// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4687 0 0
// PrepareRussianBase ;
  29: CALL 2976 0 0
// PrepareRussianCommander ;
  33: CALL 2927 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8306 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild = 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode = 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible = 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack = 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson = 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase = 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer = 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus = 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer = 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog = 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog = 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog = 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil = 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower = 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable = 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter = 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor = 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 39804 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 39804 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: LD_EXP 49
 585: PPUSH
 586: CALL 39804 0 3
 590: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 591: LD_ADDR_EXP 8
 595: PUSH
 596: LD_STRING Dickens
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: LD_EXP 49
 606: PPUSH
 607: CALL 39804 0 3
 611: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 612: LD_ADDR_EXP 9
 616: PUSH
 617: LD_STRING Woodruff
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_EXP 49
 627: PPUSH
 628: CALL 39804 0 3
 632: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 633: LD_ADDR_EXP 12
 637: PUSH
 638: LD_STRING Campell
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_EXP 49
 648: PPUSH
 649: CALL 39804 0 3
 653: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING Knight
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: LD_EXP 49
 669: PPUSH
 670: CALL 39804 0 3
 674: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 675: LD_ADDR_EXP 11
 679: PUSH
 680: LD_STRING Claptopn
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_EXP 49
 690: PPUSH
 691: CALL 39804 0 3
 695: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING Harisson
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: LD_EXP 49
 711: PPUSH
 712: CALL 39804 0 3
 716: ST_TO_ADDR
// if not Lisa then
 717: LD_EXP 4
 721: NOT
 722: IFFALSE 745
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 724: LD_ADDR_EXP 2
 728: PUSH
 729: LD_STRING Bobby
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_EXP 49
 739: PPUSH
 740: CALL 39804 0 3
 744: ST_TO_ADDR
// if not Lisa and not Bobby then
 745: LD_EXP 4
 749: NOT
 750: PUSH
 751: LD_EXP 2
 755: NOT
 756: AND
 757: IFFALSE 780
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 759: LD_ADDR_EXP 3
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_EXP 49
 774: PPUSH
 775: CALL 39804 0 3
 779: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 780: LD_EXP 4
 784: NOT
 785: PUSH
 786: LD_EXP 2
 790: NOT
 791: AND
 792: PUSH
 793: LD_EXP 3
 797: NOT
 798: AND
 799: IFFALSE 898
// begin tmp = CreateCharacterSet ( 03_others ) ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 31
 813: ST_TO_ADDR
// if tmp then
 814: LD_VAR 0 3
 818: IFFALSE 875
// begin RandomBeforeMission = tmp [ 1 ] ;
 820: LD_ADDR_EXP 6
 824: PUSH
 825: LD_VAR 0 3
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 834: LD_STRING 03_others
 836: PPUSH
 837: CALL_OW 40
// if tmp > 1 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: GREATER
 849: IFFALSE 873
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: DIFF
 865: PPUSH
 866: LD_STRING 03_others
 868: PPUSH
 869: CALL_OW 38
// end else
 873: GO 898
// begin PrepareHuman ( false , 1 , 3 ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: LD_INT 3
 883: PPUSH
 884: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 888: LD_ADDR_EXP 6
 892: PUSH
 893: CALL_OW 44
 897: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 4
 905: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 906: LD_ADDR_EXP 13
 910: PUSH
 911: LD_STRING Donaldson
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: LD_EXP 49
 921: PPUSH
 922: CALL 39804 0 3
 926: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Frank
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 39804 0 3
 947: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 32
 955: PPUSH
 956: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 960: LD_EXP 7
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 975: LD_EXP 7
 979: PPUSH
 980: LD_INT 32
 982: PPUSH
 983: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 987: LD_EXP 8
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1002: LD_EXP 9
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1017: LD_EXP 12
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1032: LD_EXP 10
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1047: LD_EXP 11
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 49
// if Lisa = false then
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1087: LD_EXP 2
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// if Lisa = false and Bobby = false then
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: PUSH
1111: LD_EXP 2
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1137: LD_EXP 4
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: PUSH
1146: LD_EXP 2
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: PUSH
1156: LD_EXP 3
1160: PUSH
1161: LD_INT 0
1163: EQUAL
1164: AND
1165: IFFALSE 1182
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1167: LD_EXP 6
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 49
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1187: LD_INT 0
1189: PPUSH
1190: PPUSH
1191: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1192: LD_EXP 13
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// if Frank then
1207: LD_EXP 5
1211: IFFALSE 1228
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1213: LD_EXP 5
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// uc_nation = 1 ;
1228: LD_ADDR_OWVAR 21
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// uc_side = 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// hc_class := 3 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING SecondCharsGal
1267: ST_TO_ADDR
// hc_face_number := 53 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 53
1275: ST_TO_ADDR
// hc_name := Freddie Warner ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Freddie Warner
1283: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 8
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 2
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 56 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 56
1401: ST_TO_ADDR
// hc_name := Mel Brennan ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Mel Brennan
1409: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 12
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// hc_class := 1 ;
1496: LD_ADDR_OWVAR 28
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_sex := sex_male ;
1504: LD_ADDR_OWVAR 27
1508: PUSH
1509: LD_INT 1
1511: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING AmGalRemake
1519: ST_TO_ADDR
// hc_face_number := 5 ;
1520: LD_ADDR_OWVAR 34
1524: PUSH
1525: LD_INT 5
1527: ST_TO_ADDR
// hc_name := Bob Joplin ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Bob Joplin
1535: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1536: LD_ADDR_OWVAR 29
1540: PUSH
1541: LD_INT 10
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1551: LD_ADDR_OWVAR 30
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1574: LD_ADDR_OWVAR 31
1578: PUSH
1579: LD_INT 3
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// un = CreateHuman ;
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: CALL_OW 44
1606: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1607: LD_VAR 0 3
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// hc_class := 3 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// hc_sex := sex_female ;
1630: LD_ADDR_OWVAR 27
1634: PUSH
1635: LD_INT 2
1637: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING AmGalRemake
1645: ST_TO_ADDR
// hc_face_number := 8 ;
1646: LD_ADDR_OWVAR 34
1650: PUSH
1651: LD_INT 8
1653: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1654: LD_ADDR_OWVAR 26
1658: PUSH
1659: LD_STRING Elizabeth Whitney
1661: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1662: LD_ADDR_OWVAR 29
1666: PUSH
1667: LD_INT 9
1669: PUSH
1670: LD_INT 11
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1677: LD_ADDR_OWVAR 30
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1700: LD_ADDR_OWVAR 31
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: LD_INT 4
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// un = CreateHuman ;
1723: LD_ADDR_VAR 0 3
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// InitHc ;
1748: CALL_OW 19
// end ;
1752: LD_VAR 0 1
1756: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
1761: PPUSH
1762: PPUSH
// uc_nation = 1 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// uc_side = 1 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 2
1786: ST_TO_ADDR
// vc_engine := engine_combustion ;
1787: LD_ADDR_OWVAR 39
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_control := control_manual ;
1795: LD_ADDR_OWVAR 38
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1803: LD_ADDR_OWVAR 41
1807: PUSH
1808: LD_INT 65
1810: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_OWVAR 67
1838: ARRAY
1839: ST_TO_ADDR
// veh := CreateVehicle ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 2
1857: PPUSH
1858: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: CALL_OW 428
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: IFFALSE 1898
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1878: LD_VAR 0 5
1882: PPUSH
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 48
1896: GO 1916
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1898: LD_VAR 0 5
1902: PPUSH
1903: LD_INT 23
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 48
// hc_class := 1 ;
1916: LD_ADDR_OWVAR 28
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_sex := sex_male ;
1924: LD_ADDR_OWVAR 27
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1932: LD_ADDR_OWVAR 33
1936: PUSH
1937: LD_STRING SecondCharsGal
1939: ST_TO_ADDR
// hc_face_number := 59 ;
1940: LD_ADDR_OWVAR 34
1944: PUSH
1945: LD_INT 59
1947: ST_TO_ADDR
// hc_name := Max Gray ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING Max Gray
1955: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 9
1963: PUSH
1964: LD_INT 11
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1971: LD_ADDR_OWVAR 30
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1994: LD_ADDR_OWVAR 31
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 0
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: ST_TO_ADDR
// un = CreateHuman ;
2017: LD_ADDR_VAR 0 4
2021: PUSH
2022: CALL_OW 44
2026: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_INT 11
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// hc_class := 2 ;
2042: LD_ADDR_OWVAR 28
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_sex := sex_male ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2058: LD_ADDR_OWVAR 33
2062: PUSH
2063: LD_STRING SecondCharsGal
2065: ST_TO_ADDR
// hc_face_number := 50 ;
2066: LD_ADDR_OWVAR 34
2070: PUSH
2071: LD_INT 50
2073: ST_TO_ADDR
// hc_name := Frank Hughes ;
2074: LD_ADDR_OWVAR 26
2078: PUSH
2079: LD_STRING Frank Hughes
2081: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2082: LD_ADDR_OWVAR 29
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: LD_INT 10
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2097: LD_ADDR_OWVAR 30
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 11
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// hc_class := 1 ;
2168: LD_ADDR_OWVAR 28
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_sex := sex_male ;
2176: LD_ADDR_OWVAR 27
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2184: LD_ADDR_OWVAR 33
2188: PUSH
2189: LD_STRING SecondCharsGal
2191: ST_TO_ADDR
// hc_face_number := 54 ;
2192: LD_ADDR_OWVAR 34
2196: PUSH
2197: LD_INT 54
2199: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_STRING Luigi Ghbellin
2207: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2208: LD_ADDR_OWVAR 29
2212: PUSH
2213: LD_INT 11
2215: PUSH
2216: LD_INT 11
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2223: LD_ADDR_OWVAR 30
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2246: LD_ADDR_OWVAR 31
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// un = CreateHuman ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: CALL_OW 44
2278: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2279: LD_VAR 0 4
2283: PPUSH
2284: LD_INT 11
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL_OW 49
// hc_class := 3 ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 3
2301: ST_TO_ADDR
// hc_sex := sex_male ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2310: LD_ADDR_OWVAR 33
2314: PUSH
2315: LD_STRING AmGalRemake
2317: ST_TO_ADDR
// hc_face_number := 6 ;
2318: LD_ADDR_OWVAR 34
2322: PUSH
2323: LD_INT 6
2325: ST_TO_ADDR
// hc_name := Leon Carter ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Leon Carter
2333: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2334: LD_ADDR_OWVAR 29
2338: PUSH
2339: LD_INT 10
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2349: LD_ADDR_OWVAR 30
2353: PUSH
2354: LD_INT 0
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2372: LD_ADDR_OWVAR 31
2376: PUSH
2377: LD_INT 0
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: ST_TO_ADDR
// un = CreateHuman ;
2395: LD_ADDR_VAR 0 4
2399: PUSH
2400: CALL_OW 44
2404: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2405: LD_VAR 0 4
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 52
// if count = 4 then
2419: LD_VAR 0 1
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2555
// begin hc_class := 1 ;
2429: LD_ADDR_OWVAR 28
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_sex := sex_male ;
2437: LD_ADDR_OWVAR 27
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING SecondCharsGal
2452: ST_TO_ADDR
// hc_face_number := 34 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 34
2460: ST_TO_ADDR
// hc_name := Ian Hill ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING Ian Hill
2468: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2469: LD_ADDR_OWVAR 29
2473: PUSH
2474: LD_INT 10
2476: PUSH
2477: LD_INT 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2484: LD_ADDR_OWVAR 30
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: LD_INT 0
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2507: LD_ADDR_OWVAR 31
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: ST_TO_ADDR
// un = CreateHuman ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: CALL_OW 44
2539: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2540: LD_VAR 0 4
2544: PPUSH
2545: LD_INT 11
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 49
// end ; if count = 5 then
2555: LD_VAR 0 1
2559: PUSH
2560: LD_INT 5
2562: EQUAL
2563: IFFALSE 2817
// begin hc_class := 1 ;
2565: LD_ADDR_OWVAR 28
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_sex := sex_male ;
2573: LD_ADDR_OWVAR 27
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2581: LD_ADDR_OWVAR 33
2585: PUSH
2586: LD_STRING SecondCharsGal
2588: ST_TO_ADDR
// hc_face_number := 34 ;
2589: LD_ADDR_OWVAR 34
2593: PUSH
2594: LD_INT 34
2596: ST_TO_ADDR
// hc_name := Ian Hill ;
2597: LD_ADDR_OWVAR 26
2601: PUSH
2602: LD_STRING Ian Hill
2604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2605: LD_ADDR_OWVAR 29
2609: PUSH
2610: LD_INT 10
2612: PUSH
2613: LD_INT 12
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2620: LD_ADDR_OWVAR 30
2624: PUSH
2625: LD_INT 1
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 0
2633: PUSH
2634: LD_INT 0
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2643: LD_ADDR_OWVAR 31
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: ST_TO_ADDR
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// hc_class := 1 ;
2691: LD_ADDR_OWVAR 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// hc_sex := sex_female ;
2699: LD_ADDR_OWVAR 27
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2707: LD_ADDR_OWVAR 33
2711: PUSH
2712: LD_STRING SecondCharsGal
2714: ST_TO_ADDR
// hc_face_number := 41 ;
2715: LD_ADDR_OWVAR 34
2719: PUSH
2720: LD_INT 41
2722: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2723: LD_ADDR_OWVAR 26
2727: PUSH
2728: LD_STRING Kate Wadsworth
2730: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2731: LD_ADDR_OWVAR 29
2735: PUSH
2736: LD_INT 9
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2746: LD_ADDR_OWVAR 30
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2769: LD_ADDR_OWVAR 31
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// un = CreateHuman ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 11
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2817: LD_INT 11
2819: PPUSH
2820: LD_INT 22
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 21
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 26
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 70
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2868: LD_INT 11
2870: PPUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 26
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 70
2910: PUSH
2911: LD_INT 1
2913: ARRAY
2914: PPUSH
2915: LD_STRING D6-Sol3-1
2917: PPUSH
2918: CALL_OW 88
// end ; end_of_file
2922: LD_VAR 0 2
2926: RET
// export function PrepareRussianCommander ; begin
2927: LD_INT 0
2929: PPUSH
// uc_side = 3 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// uc_nation = 3 ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Stolypin
2953: PPUSH
2954: CALL_OW 25
2958: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2959: LD_EXP 15
2963: PPUSH
2964: LD_INT 21
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: LD_VAR 0 1
2975: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// if Difficulty > 1 then
2982: LD_OWVAR 67
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3100
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := 3 ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// InitHc_All ( ) ;
3008: CALL_OW 584
// InitBc ;
3012: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3016: LD_INT 0
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL_OW 380
// bc_type := b_breastwork ;
3029: LD_ADDR_OWVAR 42
3033: PUSH
3034: LD_INT 31
3036: ST_TO_ADDR
// bc_level := 4 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 4
3044: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3045: LD_ADDR_VAR 0 3
3049: PUSH
3050: LD_INT 100
3052: PPUSH
3053: LD_INT 58
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 5
3081: PPUSH
3082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3086: LD_VAR 0 4
3090: PPUSH
3091: LD_VAR 0 3
3095: PPUSH
3096: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3100: LD_INT 3
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 22
3108: PPUSH
3109: LD_EXP 16
3113: PPUSH
3114: LD_EXP 17
3118: PPUSH
3119: CALL_OW 12
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 4
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 6
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_OWVAR 67
3149: ARRAY
3150: PPUSH
3151: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 21
3163: PPUSH
3164: LD_EXP 16
3168: PPUSH
3169: LD_EXP 17
3173: PPUSH
3174: CALL_OW 12
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: LD_EXP 16
3202: PPUSH
3203: LD_EXP 17
3207: PPUSH
3208: CALL_OW 12
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 24
3231: PPUSH
3232: LD_EXP 16
3236: PPUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 5
3252: PPUSH
3253: CALL 4353 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3332
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3294: LD_INT 3
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: LD_EXP 17
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL 4353 0 6
3330: GO 3291
3332: POP
3333: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 30
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: FOR_IN
3369: IFFALSE 3397
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL 4462 0 2
3395: GO 3368
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 1
3403: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 6 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 6
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// InitHC_All ( ) ;
3426: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: DOUBLE
3436: LD_INT 1
3438: DEC
3439: ST_TO_ADDR
3440: LD_INT 1
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: LD_INT 2
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_OWVAR 67
3462: ARRAY
3463: PUSH
3464: FOR_TO
3465: IFFALSE 3633
// begin vc_engine = 1 ;
3467: LD_ADDR_OWVAR 39
3471: PUSH
3472: LD_INT 1
3474: ST_TO_ADDR
// vc_control = 1 ;
3475: LD_ADDR_OWVAR 38
3479: PUSH
3480: LD_INT 1
3482: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3483: LD_ADDR_OWVAR 40
3487: PUSH
3488: LD_INT 42
3490: PUSH
3491: LD_INT 42
3493: PUSH
3494: LD_INT 43
3496: PUSH
3497: LD_INT 43
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: LD_OWVAR 67
3510: ARRAY
3511: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3512: LD_ADDR_OWVAR 37
3516: PUSH
3517: LD_INT 21
3519: PUSH
3520: LD_INT 22
3522: PUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 22
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_OWVAR 67
3539: ARRAY
3540: ST_TO_ADDR
// veh = CreateVehicle ;
3541: LD_ADDR_VAR 0 3
3545: PUSH
3546: CALL_OW 45
3550: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_INT 3
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// hc_gallery =  ;
3566: LD_ADDR_OWVAR 33
3570: PUSH
3571: LD_STRING 
3573: ST_TO_ADDR
// hc_name =  ;
3574: LD_ADDR_OWVAR 26
3578: PUSH
3579: LD_STRING 
3581: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3582: LD_INT 0
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: LD_EXP 16
3592: PPUSH
3593: LD_EXP 17
3597: PPUSH
3598: CALL_OW 12
3602: PPUSH
3603: CALL_OW 380
// un = CreateHuman ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: CALL_OW 44
3616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3617: LD_VAR 0 4
3621: PPUSH
3622: LD_VAR 0 3
3626: PPUSH
3627: CALL_OW 52
// end ;
3631: GO 3464
3633: POP
3634: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3635: LD_INT 0
3637: PPUSH
3638: LD_INT 2
3640: PPUSH
3641: LD_EXP 16
3645: PPUSH
3646: LD_EXP 17
3650: PPUSH
3651: CALL_OW 12
3655: PUSH
3656: LD_INT 2
3658: PLUS
3659: PPUSH
3660: CALL_OW 380
// un = CreateHuman ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3689: LD_INT 0
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_EXP 16
3699: PPUSH
3700: LD_EXP 17
3704: PPUSH
3705: CALL_OW 12
3709: PUSH
3710: LD_INT 2
3712: PLUS
3713: PPUSH
3714: CALL_OW 380
// un = CreateHuman ;
3718: LD_ADDR_VAR 0 4
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3728: LD_VAR 0 4
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 2
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_OWVAR 67
3775: ARRAY
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 3
3782: PPUSH
3783: CALL_OW 12
3787: PLUS
3788: PUSH
3789: FOR_TO
3790: IFFALSE 3860
// begin hc_gallery =  ;
3792: LD_ADDR_OWVAR 33
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// hc_name =  ;
3800: LD_ADDR_OWVAR 26
3804: PUSH
3805: LD_STRING 
3807: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_EXP 16
3818: PPUSH
3819: LD_EXP 17
3823: PPUSH
3824: CALL_OW 12
3828: PPUSH
3829: CALL_OW 380
// un = CreateHuman ;
3833: LD_ADDR_VAR 0 4
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3843: LD_VAR 0 4
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 49
// end ;
3858: GO 3789
3860: POP
3861: POP
// vc_engine = 1 ;
3862: LD_ADDR_OWVAR 39
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// vc_control = 1 ;
3870: LD_ADDR_OWVAR 38
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// vc_weapon = 51 ;
3878: LD_ADDR_OWVAR 40
3882: PUSH
3883: LD_INT 51
3885: ST_TO_ADDR
// vc_chassis = 22 ;
3886: LD_ADDR_OWVAR 37
3890: PUSH
3891: LD_INT 22
3893: ST_TO_ADDR
// veh = CreateVehicle ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 100
3929: PPUSH
3930: CALL_OW 290
// hc_gallery =  ;
3934: LD_ADDR_OWVAR 33
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// hc_name =  ;
3942: LD_ADDR_OWVAR 26
3946: PUSH
3947: LD_STRING 
3949: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: LD_EXP 16
3960: PPUSH
3961: LD_EXP 17
3965: PPUSH
3966: CALL_OW 12
3970: PPUSH
3971: CALL_OW 380
// un = CreateHuman ;
3975: LD_ADDR_VAR 0 4
3979: PUSH
3980: CALL_OW 44
3984: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3985: LD_VAR 0 4
3989: PPUSH
3990: LD_VAR 0 3
3994: PPUSH
3995: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3999: LD_ADDR_VAR 0 2
4003: PUSH
4004: LD_INT 22
4006: PUSH
4007: LD_INT 6
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: LD_INT 25
4022: PUSH
4023: LD_INT 2
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 69
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4085
// ComAgressiveMove ( i , 45 , 46 ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_INT 45
4075: PPUSH
4076: LD_INT 46
4078: PPUSH
4079: CALL_OW 114
4083: GO 4065
4085: POP
4086: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_INT 22
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 25
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 69
4120: PUSH
4121: FOR_IN
4122: IFFALSE 4153
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4124: LD_ADDR_EXP 21
4128: PUSH
4129: LD_VAR 0 2
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: LD_INT 48
4139: PPUSH
4140: LD_INT 55
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: CALL_OW 145
4150: ST_TO_ADDR
4151: GO 4121
4153: POP
4154: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4155: LD_ADDR_VAR 0 2
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 6
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 69
4188: PUSH
4189: FOR_IN
4190: IFFALSE 4209
// ComMoveXY ( i , 39 , 55 ) ;
4192: LD_VAR 0 2
4196: PPUSH
4197: LD_INT 39
4199: PPUSH
4200: LD_INT 55
4202: PPUSH
4203: CALL_OW 111
4207: GO 4189
4209: POP
4210: POP
// end ;
4211: LD_VAR 0 1
4215: RET
// export function PrepareFirstAttack ; var i , un ; begin
4216: LD_INT 0
4218: PPUSH
4219: PPUSH
4220: PPUSH
// uc_side = 5 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 5
4228: ST_TO_ADDR
// uc_nation = 3 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 3
4236: ST_TO_ADDR
// for i := 1 to 4 do
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: DOUBLE
4243: LD_INT 1
4245: DEC
4246: ST_TO_ADDR
4247: LD_INT 4
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4338
// begin InitHC_All ( ) ;
4253: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4257: LD_INT 0
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_EXP 16
4267: PPUSH
4268: LD_EXP 17
4272: PPUSH
4273: CALL_OW 12
4277: PPUSH
4278: CALL_OW 380
// un = CreateHuman ;
4282: LD_ADDR_VAR 0 3
4286: PUSH
4287: CALL_OW 44
4291: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4292: LD_VAR 0 3
4296: PPUSH
4297: LD_INT 4
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_EXP 1
4316: PPUSH
4317: CALL_OW 250
4321: PPUSH
4322: LD_EXP 1
4326: PPUSH
4327: CALL_OW 251
4331: PPUSH
4332: CALL_OW 114
// end ;
4336: GO 4250
4338: POP
4339: POP
// firstRussianAttack = 1 ;
4340: LD_ADDR_EXP 23
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// end ; end_of_file
4348: LD_VAR 0 1
4352: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4353: LD_INT 0
4355: PPUSH
4356: PPUSH
4357: PPUSH
// for i = 1 to count do
4358: LD_ADDR_VAR 0 8
4362: PUSH
4363: DOUBLE
4364: LD_INT 1
4366: DEC
4367: ST_TO_ADDR
4368: LD_VAR 0 6
4372: PUSH
4373: FOR_TO
4374: IFFALSE 4455
// begin uc_side = side ;
4376: LD_ADDR_OWVAR 20
4380: PUSH
4381: LD_VAR 0 1
4385: ST_TO_ADDR
// uc_nation = nation ;
4386: LD_ADDR_OWVAR 21
4390: PUSH
4391: LD_VAR 0 2
4395: ST_TO_ADDR
// hc_gallery =  ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING 
4403: ST_TO_ADDR
// hc_name =  ;
4404: LD_ADDR_OWVAR 26
4408: PUSH
4409: LD_STRING 
4411: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4412: LD_INT 0
4414: PPUSH
4415: LD_VAR 0 5
4419: PPUSH
4420: LD_VAR 0 4
4424: PPUSH
4425: CALL_OW 380
// un = CreateHuman ;
4429: LD_ADDR_VAR 0 9
4433: PUSH
4434: CALL_OW 44
4438: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4439: LD_VAR 0 9
4443: PPUSH
4444: LD_VAR 0 3
4448: PPUSH
4449: CALL_OW 52
// end ;
4453: GO 4373
4455: POP
4456: POP
// end ;
4457: LD_VAR 0 7
4461: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4462: LD_INT 0
4464: PPUSH
4465: PPUSH
4466: PPUSH
// uc_side := GetSide ( b ) ;
4467: LD_ADDR_OWVAR 20
4471: PUSH
4472: LD_VAR 0 2
4476: PPUSH
4477: CALL_OW 255
4481: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4482: LD_ADDR_OWVAR 21
4486: PUSH
4487: LD_VAR 0 2
4491: PPUSH
4492: CALL_OW 248
4496: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4497: LD_INT 0
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 380
// un = CreateHuman ;
4512: LD_ADDR_VAR 0 4
4516: PUSH
4517: CALL_OW 44
4521: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4522: LD_ADDR_VAR 0 5
4526: PUSH
4527: LD_VAR 0 2
4531: PPUSH
4532: CALL_OW 254
4536: PUSH
4537: LD_INT 3
4539: MINUS
4540: ST_TO_ADDR
// if dir < 0 then
4541: LD_VAR 0 5
4545: PUSH
4546: LD_INT 0
4548: LESS
4549: IFFALSE 4565
// dir := 6 + dir ;
4551: LD_ADDR_VAR 0 5
4555: PUSH
4556: LD_INT 6
4558: PUSH
4559: LD_VAR 0 5
4563: PLUS
4564: ST_TO_ADDR
// SetDir ( un , dir ) ;
4565: LD_VAR 0 4
4569: PPUSH
4570: LD_VAR 0 5
4574: PPUSH
4575: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: LD_VAR 0 2
4588: PPUSH
4589: CALL_OW 52
// end ;
4593: LD_VAR 0 3
4597: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4598: LD_INT 0
4600: PPUSH
4601: PPUSH
4602: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4603: LD_ADDR_VAR 0 6
4607: PUSH
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: PPUSH
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 12
4625: ARRAY
4626: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4627: LD_VAR 0 6
4631: PPUSH
4632: CALL_OW 258
4636: PUSH
4637: LD_INT 1
4639: EQUAL
4640: IFFALSE 4658
// Say ( speaker , dialogMID ) else
4642: LD_VAR 0 6
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: CALL_OW 88
4656: GO 4672
// Say ( speaker , dialogFID ) ;
4658: LD_VAR 0 6
4662: PPUSH
4663: LD_VAR 0 3
4667: PPUSH
4668: CALL_OW 88
// result := speaker ;
4672: LD_ADDR_VAR 0 4
4676: PUSH
4677: LD_VAR 0 6
4681: ST_TO_ADDR
// end ;
4682: LD_VAR 0 4
4686: RET
// export function PrepareDifficulty ; var tmp ; begin
4687: LD_INT 0
4689: PPUSH
4690: PPUSH
// if Difficulty = 1 then
4691: LD_OWVAR 67
4695: PUSH
4696: LD_INT 1
4698: EQUAL
4699: IFFALSE 4717
// begin RuSoldMinLevel = 1 ;
4701: LD_ADDR_EXP 16
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4709: LD_ADDR_EXP 17
4713: PUSH
4714: LD_INT 2
4716: ST_TO_ADDR
// end ; if Difficulty = 2 then
4717: LD_OWVAR 67
4721: PUSH
4722: LD_INT 2
4724: EQUAL
4725: IFFALSE 4826
// begin RuSoldMinLevel = 2 ;
4727: LD_ADDR_EXP 16
4731: PUSH
4732: LD_INT 2
4734: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4735: LD_ADDR_EXP 17
4739: PUSH
4740: LD_INT 3
4742: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4743: LD_INT 23
4745: PPUSH
4746: CALL_OW 64
// uc_nation = 3 ;
4750: LD_ADDR_OWVAR 21
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// uc_side = 3 ;
4758: LD_ADDR_OWVAR 20
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// bc_level = 5 ;
4766: LD_ADDR_OWVAR 43
4770: PUSH
4771: LD_INT 5
4773: ST_TO_ADDR
// bc_type = 32 ;
4774: LD_ADDR_OWVAR 42
4778: PUSH
4779: LD_INT 32
4781: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: LD_INT 76
4789: PPUSH
4790: LD_INT 91
4792: PPUSH
4793: LD_INT 2
4795: PPUSH
4796: CALL_OW 47
4800: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4801: LD_VAR 0 2
4805: PPUSH
4806: LD_INT 43
4808: PPUSH
4809: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4813: LD_INT 51
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 322
// end ; if Difficulty >= 3 then
4826: LD_OWVAR 67
4830: PUSH
4831: LD_INT 3
4833: GREATEREQUAL
4834: IFFALSE 4998
// begin RuSoldMinLevel = Difficulty ;
4836: LD_ADDR_EXP 16
4840: PUSH
4841: LD_OWVAR 67
4845: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4846: LD_ADDR_EXP 17
4850: PUSH
4851: LD_INT 4
4853: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4854: LD_INT 26
4856: PPUSH
4857: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4861: LD_INT 23
4863: PPUSH
4864: CALL_OW 64
// uc_nation = 3 ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// uc_side = 3 ;
4876: LD_ADDR_OWVAR 20
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// bc_level = 5 ;
4884: LD_ADDR_OWVAR 43
4888: PUSH
4889: LD_INT 5
4891: ST_TO_ADDR
// bc_type = 32 ;
4892: LD_ADDR_OWVAR 42
4896: PUSH
4897: LD_INT 32
4899: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4900: LD_ADDR_VAR 0 2
4904: PUSH
4905: LD_INT 76
4907: PPUSH
4908: LD_INT 91
4910: PPUSH
4911: LD_INT 2
4913: PPUSH
4914: CALL_OW 47
4918: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_INT 44
4926: PPUSH
4927: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4931: LD_ADDR_VAR 0 2
4935: PUSH
4936: LD_INT 83
4938: PPUSH
4939: LD_INT 84
4941: PPUSH
4942: LD_INT 2
4944: PPUSH
4945: CALL_OW 47
4949: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4950: LD_VAR 0 2
4954: PPUSH
4955: LD_INT 43
4957: PPUSH
4958: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4962: LD_INT 51
4964: PPUSH
4965: LD_INT 3
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4975: LD_INT 52
4977: PPUSH
4978: LD_INT 3
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4988: LD_INT 25
4990: PPUSH
4991: LD_INT 44
4993: PPUSH
4994: CALL_OW 431
// end ; end ;
4998: LD_VAR 0 1
5002: RET
// export function EnergyDialog ; begin
5003: LD_INT 0
5005: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5006: LD_INT 46
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: CALL_OW 321
5016: PUSH
5017: LD_INT 1
5019: EQUAL
5020: PUSH
5021: LD_INT 35
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 321
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: AND
5036: IFFALSE 5060
// begin Say ( JMM , D9c-JMM-1 ) ;
5038: LD_EXP 1
5042: PPUSH
5043: LD_STRING D9c-JMM-1
5045: PPUSH
5046: CALL_OW 88
// energyVDialog = 1 ;
5050: LD_ADDR_EXP 33
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// end else
5058: GO 5214
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5060: LD_INT 35
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 321
5070: PUSH
5071: LD_INT 2
5073: EQUAL
5074: PUSH
5075: LD_EXP 33
5079: PUSH
5080: LD_INT 0
5082: EQUAL
5083: AND
5084: IFFALSE 5106
// begin Say ( JMM , D9c-JMM-1a ) ;
5086: LD_EXP 1
5090: PPUSH
5091: LD_STRING D9c-JMM-1a
5093: PPUSH
5094: CALL_OW 88
// energyVDialog = 1 ;
5098: LD_ADDR_EXP 33
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5106: LD_INT 46
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: CALL_OW 321
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: PUSH
5121: LD_EXP 33
5125: PUSH
5126: LD_INT 0
5128: EQUAL
5129: AND
5130: IFFALSE 5152
// begin Say ( JMM , D9c-JMM-1b ) ;
5132: LD_EXP 1
5136: PPUSH
5137: LD_STRING D9c-JMM-1b
5139: PPUSH
5140: CALL_OW 88
// energyVDialog = 1 ;
5144: LD_ADDR_EXP 33
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5152: LD_INT 46
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 321
5162: PUSH
5163: LD_INT 2
5165: EQUAL
5166: PUSH
5167: LD_INT 21
5169: PPUSH
5170: LD_INT 1
5172: PPUSH
5173: CALL_OW 321
5177: PUSH
5178: LD_INT 2
5180: EQUAL
5181: AND
5182: PUSH
5183: LD_EXP 33
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: AND
5192: IFFALSE 5214
// begin Say ( JMM , D9c-JMM-1c ) ;
5194: LD_EXP 1
5198: PPUSH
5199: LD_STRING D9c-JMM-1c
5201: PPUSH
5202: CALL_OW 88
// energyVDialog = 1 ;
5206: LD_ADDR_EXP 33
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ; end ; end ;
5214: LD_VAR 0 1
5218: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5226: LD_VAR 0 1
5230: NOT
5231: PUSH
5232: LD_VAR 0 1
5236: PPUSH
5237: CALL_OW 256
5241: PUSH
5242: LD_INT 250
5244: LESS
5245: OR
5246: PUSH
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 314
5256: PUSH
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 261
5266: PUSH
5267: LD_INT 20
5269: GREATER
5270: AND
5271: OR
5272: IFFALSE 5276
// exit ;
5274: GO 5641
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5276: LD_VAR 0 1
5280: PPUSH
5281: CALL_OW 261
5285: PUSH
5286: LD_INT 20
5288: LESS
5289: PUSH
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 110
5299: PUSH
5300: LD_INT 21
5302: EQUAL
5303: NOT
5304: AND
5305: IFFALSE 5332
// begin ComStop ( bulldozer ) ;
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_INT 21
5323: PPUSH
5324: CALL_OW 109
// exit ;
5328: GO 5641
// end else
5330: GO 5359
// if GetFuel ( bulldozer ) > 20 then
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 261
5341: PUSH
5342: LD_INT 20
5344: GREATER
5345: IFFALSE 5359
// SetTag ( bulldozer , 0 ) ;
5347: LD_VAR 0 1
5351: PPUSH
5352: LD_INT 0
5354: PPUSH
5355: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5359: LD_ADDR_VAR 0 5
5363: PUSH
5364: LD_VAR 0 2
5368: PPUSH
5369: CALL_OW 353
5373: ST_TO_ADDR
// tmp := [ ] ;
5374: LD_ADDR_VAR 0 6
5378: PUSH
5379: EMPTY
5380: ST_TO_ADDR
// for i = 1 to list do
5381: LD_ADDR_VAR 0 4
5385: PUSH
5386: DOUBLE
5387: LD_INT 1
5389: DEC
5390: ST_TO_ADDR
5391: LD_VAR 0 5
5395: PUSH
5396: FOR_TO
5397: IFFALSE 5495
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5399: LD_VAR 0 5
5403: PUSH
5404: LD_VAR 0 4
5408: ARRAY
5409: PUSH
5410: LD_INT 1
5412: ARRAY
5413: PPUSH
5414: LD_VAR 0 5
5418: PUSH
5419: LD_VAR 0 4
5423: ARRAY
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: PPUSH
5429: CALL_OW 554
5433: IFFALSE 5493
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5435: LD_ADDR_VAR 0 6
5439: PUSH
5440: LD_VAR 0 6
5444: PPUSH
5445: LD_VAR 0 6
5449: PUSH
5450: LD_INT 1
5452: PLUS
5453: PPUSH
5454: LD_VAR 0 5
5458: PUSH
5459: LD_VAR 0 4
5463: ARRAY
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PUSH
5469: LD_VAR 0 5
5473: PUSH
5474: LD_VAR 0 4
5478: ARRAY
5479: PUSH
5480: LD_INT 2
5482: ARRAY
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PPUSH
5488: CALL_OW 1
5492: ST_TO_ADDR
// end ;
5493: GO 5396
5495: POP
5496: POP
// ComStop ( bulldozer ) ;
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5506: LD_ADDR_VAR 0 7
5510: PUSH
5511: LD_VAR 0 1
5515: PPUSH
5516: CALL_OW 250
5520: PUSH
5521: LD_VAR 0 1
5525: PPUSH
5526: CALL_OW 251
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: ST_TO_ADDR
// for i = tmp downto 1 do
5535: LD_ADDR_VAR 0 4
5539: PUSH
5540: DOUBLE
5541: LD_VAR 0 6
5545: INC
5546: ST_TO_ADDR
5547: LD_INT 1
5549: PUSH
5550: FOR_DOWNTO
5551: IFFALSE 5639
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5553: LD_ADDR_VAR 0 7
5557: PUSH
5558: LD_VAR 0 7
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: PPUSH
5567: LD_VAR 0 7
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: LD_VAR 0 6
5580: PPUSH
5581: CALL 5742 0 3
5585: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5586: LD_VAR 0 1
5590: PPUSH
5591: LD_VAR 0 7
5595: PUSH
5596: LD_INT 1
5598: ARRAY
5599: PPUSH
5600: LD_VAR 0 7
5604: PUSH
5605: LD_INT 2
5607: ARRAY
5608: PPUSH
5609: CALL 5646 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: LD_VAR 0 6
5622: PPUSH
5623: LD_VAR 0 7
5627: PUSH
5628: LD_INT 3
5630: ARRAY
5631: PPUSH
5632: CALL_OW 3
5636: ST_TO_ADDR
// end ;
5637: GO 5550
5639: POP
5640: POP
// end ;
5641: LD_VAR 0 3
5645: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5646: LD_INT 0
5648: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5649: LD_VAR 0 2
5653: PPUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: CALL_OW 351
5663: PUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: CALL_OW 554
5678: AND
5679: PUSH
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: CALL_OW 488
5694: AND
5695: PUSH
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 428
5710: PUSH
5711: LD_INT 1
5713: NEG
5714: EQUAL
5715: AND
5716: IFFALSE 5737
// AddComMoveXY ( bulldozer , x , y ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_VAR 0 3
5732: PPUSH
5733: CALL_OW 171
// end ;
5737: LD_VAR 0 4
5741: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
5749: PPUSH
5750: PPUSH
// dist := 99999 ;
5751: LD_ADDR_VAR 0 6
5755: PUSH
5756: LD_INT 99999
5758: ST_TO_ADDR
// for i = 1 to list do
5759: LD_ADDR_VAR 0 5
5763: PUSH
5764: DOUBLE
5765: LD_INT 1
5767: DEC
5768: ST_TO_ADDR
5769: LD_VAR 0 3
5773: PUSH
5774: FOR_TO
5775: IFFALSE 5913
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5777: LD_ADDR_VAR 0 7
5781: PUSH
5782: LD_VAR 0 1
5786: PPUSH
5787: LD_VAR 0 2
5791: PPUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_VAR 0 5
5801: ARRAY
5802: PUSH
5803: LD_INT 1
5805: ARRAY
5806: PPUSH
5807: LD_VAR 0 3
5811: PUSH
5812: LD_VAR 0 5
5816: ARRAY
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PPUSH
5822: CALL_OW 298
5826: ST_TO_ADDR
// if d = 0 then
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 0
5834: EQUAL
5835: IFFALSE 5839
// continue ;
5837: GO 5774
// if d < dist then
5839: LD_VAR 0 7
5843: PUSH
5844: LD_VAR 0 6
5848: LESS
5849: IFFALSE 5911
// begin _x := list [ i ] [ 1 ] ;
5851: LD_ADDR_VAR 0 8
5855: PUSH
5856: LD_VAR 0 3
5860: PUSH
5861: LD_VAR 0 5
5865: ARRAY
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5871: LD_ADDR_VAR 0 9
5875: PUSH
5876: LD_VAR 0 3
5880: PUSH
5881: LD_VAR 0 5
5885: ARRAY
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: ST_TO_ADDR
// _i := i ;
5891: LD_ADDR_VAR 0 10
5895: PUSH
5896: LD_VAR 0 5
5900: ST_TO_ADDR
// dist := d ;
5901: LD_ADDR_VAR 0 6
5905: PUSH
5906: LD_VAR 0 7
5910: ST_TO_ADDR
// end ; end ;
5911: GO 5774
5913: POP
5914: POP
// result := [ _x , _y , _i , dist ] ;
5915: LD_ADDR_VAR 0 4
5919: PUSH
5920: LD_VAR 0 8
5924: PUSH
5925: LD_VAR 0 9
5929: PUSH
5930: LD_VAR 0 10
5934: PUSH
5935: LD_VAR 0 6
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: ST_TO_ADDR
// end ;
5946: LD_VAR 0 4
5950: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// for i = 1 to 72 do
5955: LD_ADDR_VAR 0 5
5959: PUSH
5960: DOUBLE
5961: LD_INT 1
5963: DEC
5964: ST_TO_ADDR
5965: LD_INT 72
5967: PUSH
5968: FOR_TO
5969: IFFALSE 6023
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5971: LD_VAR 0 5
5975: PPUSH
5976: LD_VAR 0 1
5980: PPUSH
5981: CALL_OW 321
5985: PUSH
5986: LD_INT 1
5988: EQUAL
5989: PUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: LD_VAR 0 3
5999: PPUSH
6000: CALL_OW 482
6004: AND
6005: IFFALSE 6021
// AddComResearch ( lab , i ) ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 5
6016: PPUSH
6017: CALL_OW 184
6021: GO 5968
6023: POP
6024: POP
// end ;
6025: LD_VAR 0 4
6029: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
6036: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6037: LD_ADDR_VAR 0 7
6041: PUSH
6042: LD_VAR 0 2
6046: PPUSH
6047: CALL_OW 313
6051: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6052: LD_ADDR_VAR 0 8
6056: PUSH
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_INT 22
6064: PUSH
6065: LD_VAR 0 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 2
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 24
6086: PUSH
6087: LD_INT 750
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: LD_INT 54
6099: PUSH
6100: EMPTY
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 70
6117: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6118: LD_ADDR_VAR 0 5
6122: PUSH
6123: LD_VAR 0 3
6127: PPUSH
6128: LD_INT 22
6130: PUSH
6131: LD_VAR 0 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 21
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: LD_INT 24
6155: PUSH
6156: LD_INT 1000
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: EMPTY
6173: LIST
6174: PPUSH
6175: CALL_OW 70
6179: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6180: LD_VAR 0 5
6184: NOT
6185: PUSH
6186: LD_INT 22
6188: PUSH
6189: LD_VAR 0 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 24
6210: PUSH
6211: LD_INT 250
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: PPUSH
6223: CALL_OW 69
6227: NOT
6228: AND
6229: IFFALSE 6233
// exit ;
6231: GO 6329
// if buildingsList and engineerOkInside then
6233: LD_VAR 0 5
6237: PUSH
6238: LD_VAR 0 7
6242: AND
6243: IFFALSE 6269
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6245: LD_VAR 0 7
6249: PPUSH
6250: LD_INT 25
6252: PUSH
6253: LD_INT 2
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 72
6264: PPUSH
6265: CALL_OW 122
// if buildingsList and engineerOkOutside then
6269: LD_VAR 0 5
6273: PUSH
6274: LD_VAR 0 8
6278: AND
6279: IFFALSE 6299
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6299: LD_VAR 0 5
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: PUSH
6308: LD_VAR 0 8
6312: AND
6313: IFFALSE 6329
// ComEnterUnit ( engineerOkOutside , building ) ;
6315: LD_VAR 0 8
6319: PPUSH
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL_OW 120
// end ;
6329: LD_VAR 0 4
6333: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6343: LD_ADDR_VAR 0 6
6347: PUSH
6348: LD_INT 22
6350: PUSH
6351: LD_VAR 0 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 23
6372: PUSH
6373: LD_INT 2
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 251
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6401: LD_ADDR_VAR 0 7
6405: PUSH
6406: LD_VAR 0 3
6410: PPUSH
6411: LD_INT 22
6413: PUSH
6414: LD_VAR 0 1
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 23
6425: PUSH
6426: LD_INT 2
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 25
6435: PUSH
6436: LD_INT 4
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 50
6445: PUSH
6446: EMPTY
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PPUSH
6455: CALL_OW 70
6459: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6460: LD_ADDR_VAR 0 8
6464: PUSH
6465: LD_VAR 0 3
6469: PPUSH
6470: LD_INT 22
6472: PUSH
6473: LD_VAR 0 1
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 21
6484: PUSH
6485: LD_INT 1
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 3
6494: PUSH
6495: LD_INT 25
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 24
6514: PUSH
6515: LD_INT 750
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: PPUSH
6532: CALL_OW 70
6536: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6537: LD_ADDR_VAR 0 9
6541: PUSH
6542: LD_VAR 0 2
6546: PPUSH
6547: LD_INT 22
6549: PUSH
6550: LD_VAR 0 1
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 21
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 25
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 3
6588: PUSH
6589: LD_INT 24
6591: PUSH
6592: LD_INT 1000
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: PPUSH
6609: CALL_OW 70
6613: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6614: LD_VAR 0 8
6618: NOT
6619: PUSH
6620: LD_VAR 0 9
6624: NOT
6625: AND
6626: PUSH
6627: LD_VAR 0 6
6631: NOT
6632: AND
6633: IFFALSE 6637
// exit ;
6635: GO 6843
// if damageUnits and sciList then
6637: LD_VAR 0 8
6641: PUSH
6642: LD_VAR 0 6
6646: AND
6647: IFFALSE 6663
// ComMoveToArea ( damageUnits , healArea ) ;
6649: LD_VAR 0 8
6653: PPUSH
6654: LD_VAR 0 2
6658: PPUSH
6659: CALL_OW 113
// if unitsToHeal and sciList then
6663: LD_VAR 0 9
6667: PUSH
6668: LD_VAR 0 6
6672: AND
6673: IFFALSE 6684
// ComExitBuilding ( sciList ) ;
6675: LD_VAR 0 6
6679: PPUSH
6680: CALL_OW 122
// if unitsToHeal and sciListOutside then
6684: LD_VAR 0 9
6688: PUSH
6689: LD_VAR 0 7
6693: AND
6694: IFFALSE 6714
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6696: LD_VAR 0 7
6700: PPUSH
6701: LD_VAR 0 9
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: PPUSH
6710: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6714: LD_VAR 0 8
6718: PUSH
6719: LD_INT 0
6721: EQUAL
6722: PUSH
6723: LD_VAR 0 9
6727: PUSH
6728: LD_INT 0
6730: EQUAL
6731: AND
6732: PUSH
6733: LD_VAR 0 7
6737: AND
6738: IFFALSE 6843
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6740: LD_ADDR_VAR 0 10
6744: PUSH
6745: LD_INT 22
6747: PUSH
6748: LD_VAR 0 1
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 21
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 8
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 69
6786: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6787: LD_ADDR_VAR 0 11
6791: PUSH
6792: LD_INT 1
6794: PPUSH
6795: LD_VAR 0 10
6799: PPUSH
6800: CALL_OW 12
6804: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6805: LD_VAR 0 7
6809: PPUSH
6810: LD_INT 3
6812: PUSH
6813: LD_INT 60
6815: PUSH
6816: EMPTY
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PPUSH
6823: CALL_OW 72
6827: PPUSH
6828: LD_VAR 0 10
6832: PUSH
6833: LD_VAR 0 11
6837: ARRAY
6838: PPUSH
6839: CALL_OW 120
// end ; end ;
6843: LD_VAR 0 5
6847: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6852: LD_INT 22
6854: PUSH
6855: LD_VAR 0 1
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 21
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 69
6882: PUSH
6883: LD_VAR 0 3
6887: LESSEQUAL
6888: IFFALSE 6955
// for i = 1 to vehCount do
6890: LD_ADDR_VAR 0 9
6894: PUSH
6895: DOUBLE
6896: LD_INT 1
6898: DEC
6899: ST_TO_ADDR
6900: LD_VAR 0 3
6904: PUSH
6905: FOR_TO
6906: IFFALSE 6953
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6908: LD_VAR 0 2
6912: PPUSH
6913: LD_VAR 0 7
6917: PPUSH
6918: LD_VAR 0 5
6922: PPUSH
6923: LD_VAR 0 6
6927: PPUSH
6928: LD_VAR 0 4
6932: PUSH
6933: LD_INT 1
6935: PPUSH
6936: LD_VAR 0 4
6940: PPUSH
6941: CALL_OW 12
6945: ARRAY
6946: PPUSH
6947: CALL_OW 185
6951: GO 6905
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 8
6959: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
// for i = 1 to medicCount do
6973: LD_ADDR_VAR 0 11
6977: PUSH
6978: DOUBLE
6979: LD_INT 1
6981: DEC
6982: ST_TO_ADDR
6983: LD_VAR 0 4
6987: PUSH
6988: FOR_TO
6989: IFFALSE 7059
// begin uc_side = side ;
6991: LD_ADDR_OWVAR 20
6995: PUSH
6996: LD_VAR 0 1
7000: ST_TO_ADDR
// uc_nation = nation ;
7001: LD_ADDR_OWVAR 21
7005: PUSH
7006: LD_VAR 0 2
7010: ST_TO_ADDR
// InitHC_All ( ) ;
7011: CALL_OW 584
// PrepareHuman ( false , 4 , skil ) ;
7015: LD_INT 0
7017: PPUSH
7018: LD_INT 4
7020: PPUSH
7021: LD_VAR 0 5
7025: PPUSH
7026: CALL_OW 380
// un = CreateHuman ;
7030: LD_ADDR_VAR 0 13
7034: PUSH
7035: CALL_OW 44
7039: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7040: LD_VAR 0 13
7044: PPUSH
7045: LD_VAR 0 6
7049: PPUSH
7050: LD_INT 0
7052: PPUSH
7053: CALL_OW 49
// end ;
7057: GO 6988
7059: POP
7060: POP
// for i = 1 to soldierCount do
7061: LD_ADDR_VAR 0 11
7065: PUSH
7066: DOUBLE
7067: LD_INT 1
7069: DEC
7070: ST_TO_ADDR
7071: LD_VAR 0 3
7075: PUSH
7076: FOR_TO
7077: IFFALSE 7147
// begin uc_side = side ;
7079: LD_ADDR_OWVAR 20
7083: PUSH
7084: LD_VAR 0 1
7088: ST_TO_ADDR
// uc_nation = nation ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_VAR 0 2
7098: ST_TO_ADDR
// InitHC_All ( ) ;
7099: CALL_OW 584
// PrepareHuman ( false , 1 , skil ) ;
7103: LD_INT 0
7105: PPUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_VAR 0 5
7113: PPUSH
7114: CALL_OW 380
// un = CreateHuman ;
7118: LD_ADDR_VAR 0 13
7122: PUSH
7123: CALL_OW 44
7127: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7128: LD_VAR 0 13
7132: PPUSH
7133: LD_VAR 0 6
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7076
7147: POP
7148: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7149: LD_ADDR_VAR 0 16
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 1
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 25
7201: PUSH
7202: LD_INT 9
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7225: LD_ADDR_VAR 0 15
7229: PUSH
7230: LD_INT 22
7232: PUSH
7233: LD_VAR 0 1
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 4
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 69
7260: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7261: LD_VAR 0 15
7265: PPUSH
7266: LD_VAR 0 7
7270: PPUSH
7271: CALL_OW 113
// if strategy = 1 then
7275: LD_VAR 0 9
7279: PUSH
7280: LD_INT 1
7282: EQUAL
7283: IFFALSE 7731
// begin for i in soldiersOK_list do
7285: LD_ADDR_VAR 0 11
7289: PUSH
7290: LD_VAR 0 16
7294: PUSH
7295: FOR_IN
7296: IFFALSE 7360
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7298: LD_VAR 0 11
7302: PPUSH
7303: LD_INT 91
7305: PPUSH
7306: LD_INT 63
7308: PPUSH
7309: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7313: LD_VAR 0 11
7317: PPUSH
7318: LD_INT 101
7320: PPUSH
7321: LD_INT 53
7323: PPUSH
7324: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7328: LD_VAR 0 11
7332: PPUSH
7333: LD_INT 75
7335: PPUSH
7336: LD_INT 23
7338: PPUSH
7339: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7343: LD_VAR 0 11
7347: PPUSH
7348: LD_INT 78
7350: PPUSH
7351: LD_INT 8
7353: PPUSH
7354: CALL_OW 174
// end ;
7358: GO 7295
7360: POP
7361: POP
// wait ( 0 0$30 ) ;
7362: LD_INT 1050
7364: PPUSH
7365: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7369: LD_INT 35
7371: PPUSH
7372: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7376: LD_ADDR_VAR 0 14
7380: PUSH
7381: LD_INT 22
7383: PUSH
7384: LD_VAR 0 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: LD_INT 24
7401: PUSH
7402: LD_INT 550
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 24
7415: PUSH
7416: LD_INT 250
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7437: LD_ADDR_VAR 0 16
7441: PUSH
7442: LD_INT 22
7444: PUSH
7445: LD_VAR 0 1
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 25
7456: PUSH
7457: LD_INT 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 24
7466: PUSH
7467: LD_INT 1000
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: PPUSH
7479: CALL_OW 69
7483: ST_TO_ADDR
// if medicCount then
7484: LD_VAR 0 4
7488: IFFALSE 7528
// begin if damageUnit_list then
7490: LD_VAR 0 14
7494: IFFALSE 7528
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7496: LD_VAR 0 14
7500: PPUSH
7501: LD_VAR 0 7
7505: PPUSH
7506: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_VAR 0 14
7519: PUSH
7520: LD_INT 1
7522: ARRAY
7523: PPUSH
7524: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7528: LD_ADDR_VAR 0 11
7532: PUSH
7533: LD_VAR 0 16
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7715
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7541: LD_ADDR_VAR 0 19
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_VAR 0 8
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 69
7562: PPUSH
7563: LD_VAR 0 11
7567: PPUSH
7568: CALL_OW 74
7572: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7573: LD_ADDR_VAR 0 20
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 2
7592: PUSH
7593: LD_INT 59
7595: PUSH
7596: EMPTY
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 1
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 21
7611: PUSH
7612: LD_INT 2
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: PPUSH
7632: CALL_OW 69
7636: PPUSH
7637: LD_VAR 0 11
7641: PPUSH
7642: CALL_OW 74
7646: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7647: LD_VAR 0 11
7651: PPUSH
7652: LD_VAR 0 19
7656: PPUSH
7657: CALL_OW 296
7661: PUSH
7662: LD_INT 8
7664: PLUS
7665: PUSH
7666: LD_VAR 0 11
7670: PPUSH
7671: LD_VAR 0 20
7675: PPUSH
7676: CALL_OW 296
7680: LESS
7681: IFFALSE 7699
// ComAttackUnit ( i , target1 ) else
7683: LD_VAR 0 11
7687: PPUSH
7688: LD_VAR 0 19
7692: PPUSH
7693: CALL_OW 115
7697: GO 7713
// ComAttackUnit ( i , target2 ) ;
7699: LD_VAR 0 11
7703: PPUSH
7704: LD_VAR 0 20
7708: PPUSH
7709: CALL_OW 115
// end ;
7713: GO 7538
7715: POP
7716: POP
// until not soldiersOK_list and not damageUnit_list ;
7717: LD_VAR 0 16
7721: NOT
7722: PUSH
7723: LD_VAR 0 14
7727: NOT
7728: AND
7729: IFFALSE 7369
// end ; if strategy = 2 then
7731: LD_VAR 0 9
7735: PUSH
7736: LD_INT 2
7738: EQUAL
7739: IFFALSE 8157
// begin for i in soldiersOK_list do
7741: LD_ADDR_VAR 0 11
7745: PUSH
7746: LD_VAR 0 16
7750: PUSH
7751: FOR_IN
7752: IFFALSE 7786
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7754: LD_VAR 0 11
7758: PPUSH
7759: LD_INT 91
7761: PPUSH
7762: LD_INT 63
7764: PPUSH
7765: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7769: LD_VAR 0 11
7773: PPUSH
7774: LD_INT 75
7776: PPUSH
7777: LD_INT 33
7779: PPUSH
7780: CALL_OW 174
// end ;
7784: GO 7751
7786: POP
7787: POP
// wait ( 0 0$10 ) ;
7788: LD_INT 350
7790: PPUSH
7791: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7795: LD_INT 105
7797: PPUSH
7798: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7802: LD_ADDR_VAR 0 14
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: LD_INT 24
7827: PUSH
7828: LD_INT 550
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 24
7841: PUSH
7842: LD_INT 250
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 69
7862: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7863: LD_ADDR_VAR 0 16
7867: PUSH
7868: LD_INT 22
7870: PUSH
7871: LD_VAR 0 1
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 25
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 24
7892: PUSH
7893: LD_INT 1000
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: PPUSH
7905: CALL_OW 69
7909: ST_TO_ADDR
// if medicCount then
7910: LD_VAR 0 4
7914: IFFALSE 7954
// begin if damageUnit_list then
7916: LD_VAR 0 14
7920: IFFALSE 7954
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7922: LD_VAR 0 14
7926: PPUSH
7927: LD_VAR 0 7
7931: PPUSH
7932: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7936: LD_VAR 0 4
7940: PPUSH
7941: LD_VAR 0 14
7945: PUSH
7946: LD_INT 1
7948: ARRAY
7949: PPUSH
7950: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7954: LD_ADDR_VAR 0 11
7958: PUSH
7959: LD_VAR 0 16
7963: PUSH
7964: FOR_IN
7965: IFFALSE 8141
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7967: LD_ADDR_VAR 0 19
7971: PUSH
7972: LD_INT 22
7974: PUSH
7975: LD_VAR 0 8
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PPUSH
7984: CALL_OW 69
7988: PPUSH
7989: LD_VAR 0 11
7993: PPUSH
7994: CALL_OW 74
7998: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7999: LD_ADDR_VAR 0 20
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 8
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: LD_INT 59
8021: PUSH
8022: EMPTY
8023: LIST
8024: PUSH
8025: LD_INT 21
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: LD_INT 21
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: PPUSH
8058: CALL_OW 69
8062: PPUSH
8063: LD_VAR 0 11
8067: PPUSH
8068: CALL_OW 74
8072: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8073: LD_VAR 0 11
8077: PPUSH
8078: LD_VAR 0 19
8082: PPUSH
8083: CALL_OW 296
8087: PUSH
8088: LD_INT 8
8090: PLUS
8091: PUSH
8092: LD_VAR 0 11
8096: PPUSH
8097: LD_VAR 0 20
8101: PPUSH
8102: CALL_OW 296
8106: LESS
8107: IFFALSE 8125
// ComAttackUnit ( i , target1 ) else
8109: LD_VAR 0 11
8113: PPUSH
8114: LD_VAR 0 19
8118: PPUSH
8119: CALL_OW 115
8123: GO 8139
// ComAttackUnit ( i , target2 ) ;
8125: LD_VAR 0 11
8129: PPUSH
8130: LD_VAR 0 20
8134: PPUSH
8135: CALL_OW 115
// end ;
8139: GO 7964
8141: POP
8142: POP
// until not soldiersOK_list and not damageUnit_list ;
8143: LD_VAR 0 16
8147: NOT
8148: PUSH
8149: LD_VAR 0 14
8153: NOT
8154: AND
8155: IFFALSE 7795
// end ; if medic_list then
8157: LD_VAR 0 15
8161: IFFALSE 8301
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8163: LD_ADDR_VAR 0 15
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_VAR 0 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 25
8182: PUSH
8183: LD_INT 4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 50
8192: PUSH
8193: EMPTY
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8206: LD_INT 35
8208: PPUSH
8209: CALL_OW 67
// for i in medic_list do
8213: LD_ADDR_VAR 0 11
8217: PUSH
8218: LD_VAR 0 15
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8292
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8226: LD_VAR 0 11
8230: PPUSH
8231: CALL_OW 314
8235: NOT
8236: PUSH
8237: LD_VAR 0 11
8241: PPUSH
8242: LD_INT 4
8244: PPUSH
8245: CALL_OW 308
8249: NOT
8250: AND
8251: IFFALSE 8267
// ComMoveToArea ( i , RussianAttack ) else
8253: LD_VAR 0 11
8257: PPUSH
8258: LD_INT 4
8260: PPUSH
8261: CALL_OW 113
8265: GO 8290
// if IsInArea ( i , RussianAttack ) then
8267: LD_VAR 0 11
8271: PPUSH
8272: LD_INT 4
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8290
// RemoveUnit ( i ) ;
8281: LD_VAR 0 11
8285: PPUSH
8286: CALL_OW 64
8290: GO 8223
8292: POP
8293: POP
// until not medic_list ;
8294: LD_VAR 0 15
8298: NOT
8299: IFFALSE 8163
// end ; end ; end_of_file
8301: LD_VAR 0 10
8305: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8306: LD_INT 0
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
// InGameOn ;
8313: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8317: LD_ADDR_VAR 0 3
8321: PUSH
8322: LD_EXP 8
8326: PUSH
8327: LD_EXP 9
8331: PUSH
8332: LD_EXP 10
8336: PUSH
8337: LD_EXP 11
8341: PUSH
8342: LD_EXP 12
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8354: LD_ADDR_VAR 0 4
8358: PUSH
8359: LD_INT 46
8361: PUSH
8362: LD_INT 45
8364: PUSH
8365: LD_INT 44
8367: PUSH
8368: LD_INT 43
8370: PUSH
8371: LD_INT 42
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8381: LD_ADDR_VAR 0 5
8385: PUSH
8386: LD_INT 14
8388: PUSH
8389: LD_INT 12
8391: PUSH
8392: LD_INT 10
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 6
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8408: LD_EXP 11
8412: PPUSH
8413: LD_INT 31
8415: PPUSH
8416: LD_INT 59
8418: PPUSH
8419: LD_INT 19
8421: PPUSH
8422: LD_INT 5
8424: PPUSH
8425: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8429: LD_INT 32
8431: PPUSH
8432: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8436: LD_INT 32
8438: PPUSH
8439: LD_INT 51
8441: PPUSH
8442: LD_INT 26
8444: PPUSH
8445: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8449: LD_INT 32
8451: PPUSH
8452: LD_INT 53
8454: PPUSH
8455: LD_INT 23
8457: PPUSH
8458: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8462: LD_INT 32
8464: PPUSH
8465: LD_INT 52
8467: PPUSH
8468: LD_INT 19
8470: PPUSH
8471: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8475: LD_INT 35
8477: PPUSH
8478: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8482: LD_INT 32
8484: PPUSH
8485: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8489: LD_INT 32
8491: PPUSH
8492: CALL_OW 250
8496: PUSH
8497: LD_INT 52
8499: EQUAL
8500: PUSH
8501: LD_INT 32
8503: PPUSH
8504: CALL_OW 251
8508: PUSH
8509: LD_INT 19
8511: EQUAL
8512: AND
8513: IFFALSE 8475
// ComExitVehicle ( JMM ) ;
8515: LD_EXP 1
8519: PPUSH
8520: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8524: LD_EXP 7
8528: PPUSH
8529: LD_EXP 1
8533: PPUSH
8534: CALL_OW 119
// wait ( 0 0$01 ) ;
8538: LD_INT 35
8540: PPUSH
8541: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8545: LD_EXP 1
8549: PPUSH
8550: LD_INT 46
8552: PPUSH
8553: LD_INT 10
8555: PPUSH
8556: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8560: LD_EXP 1
8564: PPUSH
8565: LD_EXP 7
8569: PPUSH
8570: CALL_OW 179
// wait ( 0 0$4 ) ;
8574: LD_INT 140
8576: PPUSH
8577: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8581: LD_EXP 1
8585: PPUSH
8586: LD_STRING D1-JMM-1
8588: PPUSH
8589: CALL_OW 88
// if not dialogue_skipped then
8593: LD_OWVAR 59
8597: NOT
8598: IFFALSE 9255
// begin for i := 1 to gammaSquad do
8600: LD_ADDR_VAR 0 2
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 3
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8677
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8618: LD_VAR 0 3
8622: PUSH
8623: LD_VAR 0 2
8627: ARRAY
8628: PPUSH
8629: LD_VAR 0 4
8633: PUSH
8634: LD_VAR 0 2
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 5
8644: PUSH
8645: LD_VAR 0 2
8649: ARRAY
8650: PPUSH
8651: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8655: LD_VAR 0 3
8659: PUSH
8660: LD_VAR 0 2
8664: ARRAY
8665: PPUSH
8666: LD_EXP 1
8670: PPUSH
8671: CALL_OW 179
// end ;
8675: GO 8615
8677: POP
8678: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8679: LD_EXP 4
8683: PPUSH
8684: LD_INT 41
8686: PPUSH
8687: LD_INT 4
8689: PPUSH
8690: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8694: LD_EXP 4
8698: PPUSH
8699: LD_EXP 1
8703: PPUSH
8704: CALL_OW 179
// if Lisa = false and Bobby then
8708: LD_EXP 4
8712: PUSH
8713: LD_INT 0
8715: EQUAL
8716: PUSH
8717: LD_EXP 2
8721: AND
8722: IFFALSE 8753
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8724: LD_EXP 2
8728: PPUSH
8729: LD_INT 41
8731: PPUSH
8732: LD_INT 4
8734: PPUSH
8735: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8739: LD_EXP 2
8743: PPUSH
8744: LD_EXP 1
8748: PPUSH
8749: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8753: LD_EXP 4
8757: PUSH
8758: LD_INT 0
8760: EQUAL
8761: PUSH
8762: LD_EXP 2
8766: PUSH
8767: LD_INT 0
8769: EQUAL
8770: AND
8771: PUSH
8772: LD_EXP 3
8776: AND
8777: IFFALSE 8808
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8779: LD_EXP 3
8783: PPUSH
8784: LD_INT 41
8786: PPUSH
8787: LD_INT 4
8789: PPUSH
8790: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8794: LD_EXP 3
8798: PPUSH
8799: LD_EXP 1
8803: PPUSH
8804: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8808: LD_EXP 4
8812: PUSH
8813: LD_INT 0
8815: EQUAL
8816: PUSH
8817: LD_EXP 2
8821: PUSH
8822: LD_INT 0
8824: EQUAL
8825: AND
8826: PUSH
8827: LD_EXP 3
8831: PUSH
8832: LD_INT 0
8834: EQUAL
8835: AND
8836: IFFALSE 8867
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8838: LD_EXP 6
8842: PPUSH
8843: LD_INT 41
8845: PPUSH
8846: LD_INT 4
8848: PPUSH
8849: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8853: LD_EXP 6
8857: PPUSH
8858: LD_EXP 1
8862: PPUSH
8863: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8867: LD_EXP 7
8871: PPUSH
8872: LD_STRING D1-Brown-1
8874: PPUSH
8875: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8879: LD_EXP 1
8883: PPUSH
8884: LD_STRING D1-JMM-2
8886: PPUSH
8887: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8891: LD_EXP 7
8895: PPUSH
8896: LD_STRING D1-Brown-2
8898: PPUSH
8899: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8903: LD_EXP 1
8907: PPUSH
8908: LD_EXP 9
8912: PPUSH
8913: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8917: LD_EXP 9
8921: PPUSH
8922: LD_STRING D1-FSol1-2
8924: PPUSH
8925: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8929: LD_EXP 1
8933: PPUSH
8934: LD_EXP 8
8938: PPUSH
8939: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8943: LD_EXP 8
8947: PPUSH
8948: LD_STRING D1-Sol2-2
8950: PPUSH
8951: CALL_OW 88
// if Lisa then
8955: LD_EXP 4
8959: IFFALSE 8999
// begin ComTurnUnit ( JMM , Lisa ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_EXP 4
8970: PPUSH
8971: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8975: LD_EXP 4
8979: PPUSH
8980: LD_STRING D1-Lisa-2
8982: PPUSH
8983: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8987: LD_EXP 1
8991: PPUSH
8992: LD_STRING D1-JMM-3
8994: PPUSH
8995: CALL_OW 88
// end ; if Bobby then
8999: LD_EXP 2
9003: IFFALSE 9043
// begin ComTurnUnit ( JMM , Bobby ) ;
9005: LD_EXP 1
9009: PPUSH
9010: LD_EXP 2
9014: PPUSH
9015: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9019: LD_EXP 2
9023: PPUSH
9024: LD_STRING D1-Bobby-2
9026: PPUSH
9027: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9031: LD_EXP 1
9035: PPUSH
9036: LD_STRING D1-JMM-3
9038: PPUSH
9039: CALL_OW 88
// end ; if Cyrus then
9043: LD_EXP 3
9047: IFFALSE 9087
// begin ComTurnUnit ( JMM , Cyrus ) ;
9049: LD_EXP 1
9053: PPUSH
9054: LD_EXP 3
9058: PPUSH
9059: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9063: LD_EXP 3
9067: PPUSH
9068: LD_STRING D1-Cyrus-2
9070: PPUSH
9071: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9075: LD_EXP 1
9079: PPUSH
9080: LD_STRING D1-JMM-3
9082: PPUSH
9083: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9087: LD_EXP 1
9091: PPUSH
9092: LD_EXP 7
9096: PPUSH
9097: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9101: LD_EXP 1
9105: PPUSH
9106: LD_STRING D1-JMM-3a
9108: PPUSH
9109: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9113: LD_EXP 7
9117: PPUSH
9118: LD_INT 38
9120: PPUSH
9121: LD_INT 5
9123: PPUSH
9124: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9128: LD_EXP 7
9132: PPUSH
9133: LD_EXP 1
9137: PPUSH
9138: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9142: LD_EXP 1
9146: PPUSH
9147: LD_INT 40
9149: PPUSH
9150: LD_INT 7
9152: PPUSH
9153: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_EXP 7
9166: PPUSH
9167: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9171: LD_EXP 7
9175: PPUSH
9176: LD_STRING D1-Brown-3
9178: PPUSH
9179: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9183: LD_EXP 14
9187: PPUSH
9188: LD_STRING D1-Har-3
9190: PPUSH
9191: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9195: LD_EXP 1
9199: PPUSH
9200: LD_STRING D1-JMM-4
9202: PPUSH
9203: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9207: LD_EXP 14
9211: PPUSH
9212: LD_STRING D1-Har-4
9214: PPUSH
9215: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9219: LD_EXP 1
9223: PPUSH
9224: LD_STRING D1-JMM-5
9226: PPUSH
9227: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9231: LD_EXP 14
9235: PPUSH
9236: LD_STRING D1-Har-5
9238: PPUSH
9239: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9243: LD_EXP 1
9247: PPUSH
9248: LD_STRING D1-JMM-6
9250: PPUSH
9251: CALL_OW 88
// end ; InGameOff ;
9255: CALL_OW 9
// PrepareRussianConvoy ;
9259: CALL 3404 0 0
// ChangeMissionObjectives ( M1 ) ;
9263: LD_STRING M1
9265: PPUSH
9266: CALL_OW 337
// SaveForQuickRestart ;
9270: CALL_OW 22
// timerStatus = 1 ;
9274: LD_ADDR_EXP 29
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// startTimer = 1 ;
9282: LD_ADDR_EXP 30
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// bonusAvalaible = 1 ;
9290: LD_ADDR_EXP 44
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9298: LD_INT 105
9300: PPUSH
9301: CALL_OW 67
// DialogueOn ;
9305: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9309: LD_EXP 12
9313: PPUSH
9314: LD_STRING D9-Mech1-1
9316: PPUSH
9317: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9321: LD_EXP 1
9325: PPUSH
9326: LD_STRING D9-JMM-1
9328: PPUSH
9329: CALL_OW 88
// DialogueOff ;
9333: CALL_OW 7
// end ;
9337: LD_VAR 0 1
9341: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9342: LD_INT 47
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 321
9352: PUSH
9353: LD_INT 2
9355: EQUAL
9356: PUSH
9357: LD_EXP 31
9361: NOT
9362: AND
9363: PUSH
9364: LD_INT 22
9366: PUSH
9367: LD_INT 1
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 21
9376: PUSH
9377: LD_INT 3
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 30
9386: PUSH
9387: LD_INT 3
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 57
9396: PUSH
9397: EMPTY
9398: LIST
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 69
9410: AND
9411: IFFALSE 9645
9413: GO 9415
9415: DISABLE
// begin factoryDialog := true ;
9416: LD_ADDR_EXP 31
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// if IsOk ( Campell ) then
9424: LD_EXP 12
9428: PPUSH
9429: CALL_OW 302
9433: IFFALSE 9449
// Say ( Campell , D10-Mech1-1 ) else
9435: LD_EXP 12
9439: PPUSH
9440: LD_STRING D10-Mech1-1
9442: PPUSH
9443: CALL_OW 88
9447: GO 9645
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9449: LD_INT 22
9451: PUSH
9452: LD_INT 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 21
9461: PUSH
9462: LD_INT 1
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 25
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 26
9481: PUSH
9482: LD_INT 1
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: PUSH
9500: LD_EXP 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: DIFF
9508: IFFALSE 9582
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9510: LD_INT 22
9512: PUSH
9513: LD_INT 1
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 21
9522: PUSH
9523: LD_INT 1
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 25
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 26
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: PUSH
9561: LD_EXP 1
9565: PUSH
9566: EMPTY
9567: LIST
9568: DIFF
9569: PPUSH
9570: LD_STRING D10-Mech1-1
9572: PPUSH
9573: LD_STRING D10-Mech1-1
9575: PPUSH
9576: CALL 4598 0 3
9580: GO 9645
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9582: LD_INT 22
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 26
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 1
9619: ARRAY
9620: PPUSH
9621: CALL_OW 69
9625: PUSH
9626: LD_EXP 1
9630: PUSH
9631: EMPTY
9632: LIST
9633: DIFF
9634: PPUSH
9635: LD_STRING D10-Mech1-1
9637: PPUSH
9638: LD_STRING D10-Mech1-1
9640: PPUSH
9641: CALL 4598 0 3
// end ; end ;
9645: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9646: LD_INT 22
9648: PUSH
9649: LD_INT 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 30
9658: PUSH
9659: LD_INT 32
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 69
9674: PUSH
9675: LD_EXP 32
9679: PUSH
9680: LD_INT 0
9682: EQUAL
9683: AND
9684: IFFALSE 9920
9686: GO 9688
9688: DISABLE
// begin if IsOk ( Claptopn ) then
9689: LD_EXP 11
9693: PPUSH
9694: CALL_OW 302
9698: IFFALSE 9714
// Say ( Claptopn , D9b-Eng1-1 ) else
9700: LD_EXP 11
9704: PPUSH
9705: LD_STRING D9b-Eng1-1
9707: PPUSH
9708: CALL_OW 88
9712: GO 9906
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9714: LD_INT 22
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 21
9726: PUSH
9727: LD_INT 1
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 25
9736: PUSH
9737: LD_INT 3
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 26
9746: PUSH
9747: LD_INT 1
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PPUSH
9760: CALL_OW 69
9764: PUSH
9765: LD_EXP 1
9769: PUSH
9770: EMPTY
9771: LIST
9772: DIFF
9773: IFFALSE 9847
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9775: LD_INT 22
9777: PUSH
9778: LD_INT 1
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 21
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 25
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 26
9807: PUSH
9808: LD_INT 1
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 69
9825: PUSH
9826: LD_EXP 1
9830: PUSH
9831: EMPTY
9832: LIST
9833: DIFF
9834: PPUSH
9835: LD_STRING D9b-Eng1-1
9837: PPUSH
9838: LD_STRING D9b-Eng1-11
9840: PPUSH
9841: CALL 4598 0 3
9845: GO 9906
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9847: LD_INT 22
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 21
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 26
9869: PUSH
9870: LD_INT 1
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 69
9886: PUSH
9887: LD_EXP 1
9891: PUSH
9892: EMPTY
9893: LIST
9894: DIFF
9895: PPUSH
9896: LD_STRING D9b-Eng1-1
9898: PPUSH
9899: LD_STRING D9b-Eng1-1
9901: PPUSH
9902: CALL 4598 0 3
// end ; if energyVDialog = 0 then
9906: LD_EXP 33
9910: PUSH
9911: LD_INT 0
9913: EQUAL
9914: IFFALSE 9920
// EnergyDialog ;
9916: CALL 5003 0 0
// end ;
9920: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9921: LD_EXP 34
9925: PUSH
9926: LD_INT 1
9928: EQUAL
9929: PUSH
9930: LD_EXP 35
9934: PUSH
9935: LD_INT 1
9937: EQUAL
9938: AND
9939: IFFALSE 9951
9941: GO 9943
9943: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9944: LD_STRING M1a
9946: PPUSH
9947: CALL_OW 337
9951: END
// every 3 3$0 do
9952: GO 9954
9954: DISABLE
// PrepareFirstAttack ;
9955: CALL 4216 0 0
9959: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9960: LD_INT 22
9962: PUSH
9963: LD_INT 5
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 21
9972: PUSH
9973: LD_INT 1
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 3
9982: PUSH
9983: LD_INT 24
9985: PUSH
9986: LD_INT 250
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 69
10006: PUSH
10007: LD_INT 0
10009: GREATER
10010: PUSH
10011: LD_EXP 23
10015: PUSH
10016: LD_INT 1
10018: EQUAL
10019: AND
10020: IFFALSE 10321
10022: GO 10024
10024: DISABLE
10025: LD_INT 0
10027: PPUSH
// begin firstRussianAttack = 2 ;
10028: LD_ADDR_EXP 23
10032: PUSH
10033: LD_INT 2
10035: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10036: LD_INT 22
10038: PUSH
10039: LD_INT 5
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 21
10048: PUSH
10049: LD_INT 1
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 69
10064: PPUSH
10065: LD_INT 125
10067: PPUSH
10068: LD_INT 98
10070: PPUSH
10071: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10075: LD_INT 22
10077: PUSH
10078: LD_INT 1
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 21
10087: PUSH
10088: LD_INT 1
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: LD_EXP 1
10108: PUSH
10109: LD_EXP 7
10113: PUSH
10114: LD_EXP 4
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: DIFF
10124: PPUSH
10125: LD_STRING DAtt1-Sol1-1
10127: PPUSH
10128: LD_STRING DAtt1-FSol1-1
10130: PPUSH
10131: CALL 4598 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10135: LD_EXP 1
10139: PPUSH
10140: LD_STRING DAtt1-JMM-1
10142: PPUSH
10143: CALL_OW 88
// if Lisa then
10147: LD_EXP 4
10151: IFFALSE 10167
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10153: LD_EXP 4
10157: PPUSH
10158: LD_STRING DAtt1a-Lisa-1
10160: PPUSH
10161: CALL_OW 88
10165: GO 10238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10167: LD_INT 22
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 1
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 26
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PUSH
10207: LD_EXP 1
10211: PUSH
10212: LD_EXP 7
10216: PUSH
10217: LD_EXP 4
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: DIFF
10227: PPUSH
10228: LD_STRING DAtt1a-Sol1-1
10230: PPUSH
10231: LD_STRING DAtt1-FSol1-1
10233: PPUSH
10234: CALL 4598 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10238: LD_EXP 1
10242: PPUSH
10243: LD_STRING DAtt1a-JMM-1
10245: PPUSH
10246: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10250: LD_INT 22
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 26
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 69
10289: PUSH
10290: LD_EXP 1
10294: PUSH
10295: LD_EXP 7
10299: PUSH
10300: LD_EXP 4
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: DIFF
10310: PPUSH
10311: LD_STRING DAtt1b-Sol1-1
10313: PPUSH
10314: LD_STRING DAtt1a-Sol1-1
10316: PPUSH
10317: CALL 4598 0 3
// end ;
10321: PPOPN 1
10323: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10324: LD_EXP 23
10328: PUSH
10329: LD_INT 2
10331: EQUAL
10332: PUSH
10333: LD_INT 5
10335: PPUSH
10336: LD_INT 22
10338: PUSH
10339: LD_INT 5
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 21
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PPUSH
10360: CALL_OW 70
10364: AND
10365: IFFALSE 10423
10367: GO 10369
10369: DISABLE
10370: LD_INT 0
10372: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10373: LD_ADDR_VAR 0 1
10377: PUSH
10378: LD_INT 22
10380: PUSH
10381: LD_INT 5
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 21
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PPUSH
10402: CALL_OW 69
10406: PUSH
10407: FOR_IN
10408: IFFALSE 10421
// RemoveUnit ( i ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL_OW 64
10419: GO 10407
10421: POP
10422: POP
// end ;
10423: PPOPN 1
10425: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10426: LD_INT 22
10428: PUSH
10429: LD_INT 5
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: PPUSH
10439: CALL_OW 69
10443: PUSH
10444: LD_INT 0
10446: EQUAL
10447: PUSH
10448: LD_EXP 23
10452: PUSH
10453: LD_INT 2
10455: EQUAL
10456: AND
10457: IFFALSE 10470
10459: GO 10461
10461: DISABLE
// firstRussianAttack = 3 ;
10462: LD_ADDR_EXP 23
10466: PUSH
10467: LD_INT 3
10469: ST_TO_ADDR
10470: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10471: LD_EXP 28
10475: PUSH
10476: LD_INT 0
10478: EQUAL
10479: IFFALSE 10560
10481: GO 10483
10483: DISABLE
// begin timerStatus = 4 ;
10484: LD_ADDR_EXP 29
10488: PUSH
10489: LD_INT 4
10491: ST_TO_ADDR
// DialogueOn ;
10492: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10496: LD_EXP 13
10500: PPUSH
10501: LD_STRING D2-Don-1
10503: PPUSH
10504: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10508: LD_EXP 1
10512: PPUSH
10513: LD_STRING D2-JMM-1
10515: PPUSH
10516: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10520: LD_EXP 13
10524: PPUSH
10525: LD_STRING D2-Don-2
10527: PPUSH
10528: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10532: LD_EXP 1
10536: PPUSH
10537: LD_STRING D2-JMM-2
10539: PPUSH
10540: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10544: LD_EXP 13
10548: PPUSH
10549: LD_STRING D2-Don-3
10551: PPUSH
10552: CALL_OW 94
// DialogueOff ;
10556: CALL_OW 7
// end ;
10560: END
// every 12 12$0 do var tmp ;
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
// begin PrepareDonaldsonArmy ;
10567: CALL 1187 0 0
// CenterNowOnUnits ( Donaldson ) ;
10571: LD_EXP 13
10575: PPUSH
10576: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10580: LD_INT 22
10582: PUSH
10583: LD_INT 6
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: NOT
10595: IFFALSE 10611
// begin wait ( 3 ) ;
10597: LD_INT 3
10599: PPUSH
10600: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10604: LD_STRING ACH_BASE
10606: PPUSH
10607: CALL_OW 543
// end ; tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
10611: LD_ADDR_VAR 0 1
10615: PUSH
10616: LD_INT 22
10618: PUSH
10619: LD_INT 4
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 26
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: PPUSH
10651: CALL_OW 69
10655: PUSH
10656: LD_EXP 5
10660: PUSH
10661: EMPTY
10662: LIST
10663: DIFF
10664: ST_TO_ADDR
// DialogueOn ;
10665: CALL_OW 6
// tmp := tmp diff DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10669: LD_ADDR_VAR 0 1
10673: PUSH
10674: LD_VAR 0 1
10678: PUSH
10679: LD_VAR 0 1
10683: PPUSH
10684: LD_STRING D3-Sol1-1
10686: PPUSH
10687: LD_STRING D3-Sol1-1
10689: PPUSH
10690: CALL 4598 0 3
10694: DIFF
10695: ST_TO_ADDR
// DialogRandom ( tmp , D3-Sol2-1 , D3-Sol2-1 ) ;
10696: LD_VAR 0 1
10700: PPUSH
10701: LD_STRING D3-Sol2-1
10703: PPUSH
10704: LD_STRING D3-Sol2-1
10706: PPUSH
10707: CALL 4598 0 3
// if Frank then
10711: LD_EXP 5
10715: IFFALSE 10729
// Say ( Frank , D3-Frank-1 ) ;
10717: LD_EXP 5
10721: PPUSH
10722: LD_STRING D3-Frank-1
10724: PPUSH
10725: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10729: LD_EXP 13
10733: PPUSH
10734: LD_STRING D3-Don-1
10736: PPUSH
10737: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10741: LD_EXP 13
10745: PPUSH
10746: LD_STRING D3-Don-1a
10748: PPUSH
10749: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10753: LD_EXP 1
10757: PPUSH
10758: LD_STRING D3-JMM-1
10760: PPUSH
10761: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10765: LD_EXP 13
10769: PPUSH
10770: LD_STRING D3-Don-2
10772: PPUSH
10773: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10777: LD_INT 22
10779: PUSH
10780: LD_INT 6
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 21
10789: PUSH
10790: LD_INT 1
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PPUSH
10801: CALL_OW 69
10805: IFFALSE 10943
// begin Say ( JMM , D3-JMM-2 ) ;
10807: LD_EXP 1
10811: PPUSH
10812: LD_STRING D3-JMM-2
10814: PPUSH
10815: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10819: LD_EXP 13
10823: PPUSH
10824: LD_STRING D3-Don-3
10826: PPUSH
10827: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10831: LD_EXP 1
10835: PPUSH
10836: LD_STRING D3-JMM-3
10838: PPUSH
10839: CALL_OW 88
// if IsOK ( Frank ) then
10843: LD_EXP 5
10847: PPUSH
10848: CALL_OW 302
10852: IFFALSE 10866
// Say ( Frank , D3-Frank-3 ) ;
10854: LD_EXP 5
10858: PPUSH
10859: LD_STRING D3-Frank-3
10861: PPUSH
10862: CALL_OW 88
// DialogueOff ;
10866: CALL_OW 7
// if IsOk ( Frank ) then
10870: LD_EXP 5
10874: PPUSH
10875: CALL_OW 302
10879: IFFALSE 10941
// begin SetSide ( Frank , 0 ) ;
10881: LD_EXP 5
10885: PPUSH
10886: LD_INT 0
10888: PPUSH
10889: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10893: LD_EXP 5
10897: PPUSH
10898: LD_INT 12
10900: PPUSH
10901: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10905: LD_EXP 5
10909: PPUSH
10910: LD_STRING 04t_Frank
10912: PPUSH
10913: CALL_OW 38
// wait ( 0 0$3 ) ;
10917: LD_INT 105
10919: PPUSH
10920: CALL_OW 67
// frankScoutBase = 1 ;
10924: LD_ADDR_EXP 25
10928: PUSH
10929: LD_INT 1
10931: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10932: LD_EXP 5
10936: PPUSH
10937: CALL_OW 64
// end ; end else
10941: GO 11030
// begin Say ( JMM , D3-JMM-4 ) ;
10943: LD_EXP 1
10947: PPUSH
10948: LD_STRING D3-JMM-4
10950: PPUSH
10951: CALL_OW 88
// DialogueOff ;
10955: CALL_OW 7
// if IsOk ( Frank ) then
10959: LD_EXP 5
10963: PPUSH
10964: CALL_OW 302
10968: IFFALSE 11030
// begin SetSide ( Frank , 0 ) ;
10970: LD_EXP 5
10974: PPUSH
10975: LD_INT 0
10977: PPUSH
10978: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10982: LD_EXP 5
10986: PPUSH
10987: LD_INT 12
10989: PPUSH
10990: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10994: LD_EXP 5
10998: PPUSH
10999: LD_STRING 04t_Frank
11001: PPUSH
11002: CALL_OW 38
// wait ( 0 0$3 ) ;
11006: LD_INT 105
11008: PPUSH
11009: CALL_OW 67
// frankScoutBase = 1 ;
11013: LD_ADDR_EXP 25
11017: PUSH
11018: LD_INT 1
11020: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11021: LD_EXP 5
11025: PPUSH
11026: CALL_OW 64
// end ; end ; end ;
11030: PPOPN 1
11032: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11033: LD_EXP 13
11037: PPUSH
11038: CALL_OW 255
11042: PUSH
11043: LD_INT 4
11045: EQUAL
11046: PUSH
11047: LD_EXP 13
11051: PPUSH
11052: CALL_OW 302
11056: AND
11057: IFFALSE 11297
11059: GO 11061
11061: DISABLE
11062: LD_INT 0
11064: PPUSH
11065: PPUSH
// begin wait ( 5 5$00 ) ;
11066: LD_INT 10500
11068: PPUSH
11069: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11073: LD_EXP 13
11077: PPUSH
11078: CALL_OW 255
11082: PUSH
11083: LD_INT 1
11085: EQUAL
11086: PUSH
11087: LD_EXP 13
11091: PPUSH
11092: CALL_OW 301
11096: OR
11097: IFFALSE 11101
// exit ;
11099: GO 11297
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11101: LD_EXP 13
11105: PPUSH
11106: LD_STRING D3b-Don-1
11108: PPUSH
11109: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11113: LD_ADDR_EXP 41
11117: PUSH
11118: LD_INT 1
11120: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11121: LD_ADDR_VAR 0 2
11125: PUSH
11126: LD_INT 22
11128: PUSH
11129: LD_INT 4
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 69
11140: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11141: LD_INT 35
11143: PPUSH
11144: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11148: LD_VAR 0 2
11152: NOT
11153: PUSH
11154: LD_INT 22
11156: PUSH
11157: LD_INT 6
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: LD_INT 101
11166: PUSH
11167: LD_INT 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PPUSH
11178: CALL_OW 69
11182: OR
11183: IFFALSE 11141
// if not tmp then
11185: LD_VAR 0 2
11189: NOT
11190: IFFALSE 11194
// exit ;
11192: GO 11297
// for i in tmp do
11194: LD_ADDR_VAR 0 1
11198: PUSH
11199: LD_VAR 0 2
11203: PUSH
11204: FOR_IN
11205: IFFALSE 11224
// ComAgressiveMove ( i , 52 , 64 ) ;
11207: LD_VAR 0 1
11211: PPUSH
11212: LD_INT 52
11214: PPUSH
11215: LD_INT 64
11217: PPUSH
11218: CALL_OW 114
11222: GO 11204
11224: POP
11225: POP
// wait ( 0 0$10 ) ;
11226: LD_INT 350
11228: PPUSH
11229: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11233: LD_ADDR_VAR 0 1
11237: PUSH
11238: LD_INT 22
11240: PUSH
11241: LD_INT 4
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PPUSH
11248: CALL_OW 69
11252: PUSH
11253: LD_EXP 5
11257: DIFF
11258: PUSH
11259: FOR_IN
11260: IFFALSE 11276
// SetSide ( i , 1 ) ;
11262: LD_VAR 0 1
11266: PPUSH
11267: LD_INT 1
11269: PPUSH
11270: CALL_OW 235
11274: GO 11259
11276: POP
11277: POP
// if IsLive ( Donaldson ) then
11278: LD_EXP 13
11282: PPUSH
11283: CALL_OW 300
11287: IFFALSE 11297
// saveDonaldson := 1 ;
11289: LD_ADDR_EXP 24
11293: PUSH
11294: LD_INT 1
11296: ST_TO_ADDR
// end ;
11297: PPOPN 2
11299: END
// every 0 0$1 trigger IsOk ( Donaldson ) and not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11300: LD_EXP 13
11304: PPUSH
11305: CALL_OW 302
11309: PUSH
11310: LD_EXP 24
11314: NOT
11315: AND
11316: PUSH
11317: LD_EXP 41
11321: NOT
11322: AND
11323: PUSH
11324: LD_INT 26
11326: PPUSH
11327: LD_INT 22
11329: PUSH
11330: LD_INT 1
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PPUSH
11337: CALL_OW 70
11341: PUSH
11342: LD_EXP 13
11346: PPUSH
11347: LD_EXP 1
11351: PPUSH
11352: CALL_OW 296
11356: PUSH
11357: LD_INT 6
11359: LESS
11360: OR
11361: AND
11362: IFFALSE 11417
11364: GO 11366
11366: DISABLE
11367: LD_INT 0
11369: PPUSH
// begin saveDonaldson := 1 ;
11370: LD_ADDR_EXP 24
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11378: LD_ADDR_VAR 0 1
11382: PUSH
11383: LD_INT 22
11385: PUSH
11386: LD_INT 4
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PPUSH
11393: CALL_OW 69
11397: PUSH
11398: FOR_IN
11399: IFFALSE 11415
// SetSide ( i , 1 ) ;
11401: LD_VAR 0 1
11405: PPUSH
11406: LD_INT 1
11408: PPUSH
11409: CALL_OW 235
11413: GO 11398
11415: POP
11416: POP
// end ;
11417: PPOPN 1
11419: END
// every 0 0$1 trigger frankScoutBase do
11420: LD_EXP 25
11424: IFFALSE 11789
11426: GO 11428
11428: DISABLE
// begin wait ( 2 2$30 ) ;
11429: LD_INT 5250
11431: PPUSH
11432: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11436: LD_INT 35
11438: PPUSH
11439: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11443: LD_INT 81
11445: PUSH
11446: LD_INT 4
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 92
11455: PUSH
11456: LD_INT 84
11458: PUSH
11459: LD_INT 28
11461: PUSH
11462: LD_INT 22
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PPUSH
11475: CALL_OW 69
11479: NOT
11480: IFFALSE 11436
// uc_side = 4 ;
11482: LD_ADDR_OWVAR 20
11486: PUSH
11487: LD_INT 4
11489: ST_TO_ADDR
// uc_nation = 1 ;
11490: LD_ADDR_OWVAR 21
11494: PUSH
11495: LD_INT 1
11497: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11498: LD_ADDR_EXP 5
11502: PUSH
11503: LD_STRING 04t_Frank
11505: PPUSH
11506: CALL_OW 34
11510: ST_TO_ADDR
// if not Frank then
11511: LD_EXP 5
11515: NOT
11516: IFFALSE 11520
// exit ;
11518: GO 11789
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11520: LD_EXP 5
11524: PPUSH
11525: LD_INT 13
11527: PPUSH
11528: LD_INT 0
11530: PPUSH
11531: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11535: LD_INT 35
11537: PPUSH
11538: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11542: LD_EXP 1
11546: PPUSH
11547: CALL_OW 310
11551: NOT
11552: PUSH
11553: LD_EXP 1
11557: PPUSH
11558: LD_INT 4
11560: PPUSH
11561: CALL_OW 296
11565: PUSH
11566: LD_INT 20
11568: LESS
11569: AND
11570: IFFALSE 11603
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11572: LD_EXP 5
11576: PPUSH
11577: LD_EXP 1
11581: PPUSH
11582: CALL_OW 250
11586: PPUSH
11587: LD_EXP 1
11591: PPUSH
11592: CALL_OW 251
11596: PPUSH
11597: CALL_OW 111
11601: GO 11618
// ComMoveXY ( Frank , 51 , 15 ) ;
11603: LD_EXP 5
11607: PPUSH
11608: LD_INT 51
11610: PPUSH
11611: LD_INT 15
11613: PPUSH
11614: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11618: LD_EXP 5
11622: PPUSH
11623: LD_EXP 1
11627: PPUSH
11628: CALL_OW 296
11632: PUSH
11633: LD_INT 10
11635: LESS
11636: IFFALSE 11535
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11638: LD_EXP 1
11642: PUSH
11643: LD_EXP 5
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PPUSH
11652: CALL_OW 87
// DialogueOn ;
11656: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11660: LD_EXP 5
11664: PPUSH
11665: LD_STRING D3a-Frank-1
11667: PPUSH
11668: CALL_OW 88
// if Lisa then
11672: LD_EXP 4
11676: IFFALSE 11726
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11678: LD_EXP 4
11682: PPUSH
11683: LD_STRING D3a-Lisa-1
11685: PPUSH
11686: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11690: LD_EXP 5
11694: PPUSH
11695: LD_STRING D3a-Frank-2
11697: PPUSH
11698: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11702: LD_EXP 4
11706: PPUSH
11707: LD_STRING D3a-Lisa-2
11709: PPUSH
11710: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11714: LD_EXP 5
11718: PPUSH
11719: LD_STRING D3a-Frank-3
11721: PPUSH
11722: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11726: LD_EXP 1
11730: PPUSH
11731: LD_STRING D3a-JMM-3
11733: PPUSH
11734: CALL_OW 88
// DialogueOff ;
11738: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11742: LD_EXP 5
11746: PPUSH
11747: LD_INT 1
11749: PPUSH
11750: CALL_OW 235
// InGameOn ;
11754: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11758: LD_INT 1
11760: PPUSH
11761: LD_INT 7
11763: PPUSH
11764: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11768: LD_INT 93
11770: PPUSH
11771: LD_INT 91
11773: PPUSH
11774: CALL_OW 84
// wait ( 0 0$5 ) ;
11778: LD_INT 175
11780: PPUSH
11781: CALL_OW 67
// InGameOff ;
11785: CALL_OW 9
// end ;
11789: END
// every 12 12$0 trigger Difficulty > 1 do
11790: LD_OWVAR 67
11794: PUSH
11795: LD_INT 1
11797: GREATER
11798: IFFALSE 11822
11800: GO 11802
11802: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11803: LD_INT 24
11805: PPUSH
11806: LD_INT 24
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: LD_INT 1
11814: PPUSH
11815: LD_INT 53
11817: PPUSH
11818: CALL_OW 185
11822: END
// every 18 18$0 do
11823: GO 11825
11825: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11826: LD_EXP 14
11830: PPUSH
11831: LD_STRING D4-Har-1
11833: PPUSH
11834: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11838: LD_EXP 1
11842: PPUSH
11843: LD_STRING D4-JMM-1
11845: PPUSH
11846: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11850: LD_EXP 14
11854: PPUSH
11855: LD_STRING D4-Har-2
11857: PPUSH
11858: CALL_OW 94
// case Query ( Q1 ) of 1 :
11862: LD_STRING Q1
11864: PPUSH
11865: CALL_OW 97
11869: PUSH
11870: LD_INT 1
11872: DOUBLE
11873: EQUAL
11874: IFTRUE 11878
11876: GO 11937
11878: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11879: LD_EXP 1
11883: PPUSH
11884: LD_STRING D5-JMM-1
11886: PPUSH
11887: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11891: LD_EXP 14
11895: PPUSH
11896: LD_STRING D5-Har-1
11898: PPUSH
11899: CALL_OW 94
// timeToSupport = 10 10$0 ;
11903: LD_ADDR_EXP 28
11907: PUSH
11908: LD_INT 21000
11910: ST_TO_ADDR
// timerStatus = 2 ;
11911: LD_ADDR_EXP 29
11915: PUSH
11916: LD_INT 2
11918: ST_TO_ADDR
// startTimer = 1 ;
11919: LD_ADDR_EXP 30
11923: PUSH
11924: LD_INT 1
11926: ST_TO_ADDR
// harrAnswer = 1 ;
11927: LD_ADDR_EXP 26
11931: PUSH
11932: LD_INT 1
11934: ST_TO_ADDR
// end ; 2 :
11935: GO 12072
11937: LD_INT 2
11939: DOUBLE
11940: EQUAL
11941: IFTRUE 11945
11943: GO 12004
11945: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11946: LD_EXP 1
11950: PPUSH
11951: LD_STRING D5-JMM-2
11953: PPUSH
11954: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11958: LD_EXP 14
11962: PPUSH
11963: LD_STRING D5-Har-2
11965: PPUSH
11966: CALL_OW 94
// timeToSupport = 5 5$0 ;
11970: LD_ADDR_EXP 28
11974: PUSH
11975: LD_INT 10500
11977: ST_TO_ADDR
// timerStatus = 2 ;
11978: LD_ADDR_EXP 29
11982: PUSH
11983: LD_INT 2
11985: ST_TO_ADDR
// startTimer = 1 ;
11986: LD_ADDR_EXP 30
11990: PUSH
11991: LD_INT 1
11993: ST_TO_ADDR
// harrAnswer = 2 ;
11994: LD_ADDR_EXP 26
11998: PUSH
11999: LD_INT 2
12001: ST_TO_ADDR
// end ; 3 :
12002: GO 12072
12004: LD_INT 3
12006: DOUBLE
12007: EQUAL
12008: IFTRUE 12012
12010: GO 12071
12012: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12013: LD_EXP 1
12017: PPUSH
12018: LD_STRING D5-JMM-3
12020: PPUSH
12021: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12025: LD_EXP 14
12029: PPUSH
12030: LD_STRING D5-Har-3
12032: PPUSH
12033: CALL_OW 94
// timeToSupport = 5 5$0 ;
12037: LD_ADDR_EXP 28
12041: PUSH
12042: LD_INT 10500
12044: ST_TO_ADDR
// timerStatus = 2 ;
12045: LD_ADDR_EXP 29
12049: PUSH
12050: LD_INT 2
12052: ST_TO_ADDR
// startTimer = 1 ;
12053: LD_ADDR_EXP 30
12057: PUSH
12058: LD_INT 1
12060: ST_TO_ADDR
// harrAnswer = 3 ;
12061: LD_ADDR_EXP 26
12065: PUSH
12066: LD_INT 3
12068: ST_TO_ADDR
// end ; end ;
12069: GO 12072
12071: POP
// end ;
12072: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12073: LD_EXP 29
12077: PUSH
12078: LD_INT 2
12080: EQUAL
12081: PUSH
12082: LD_EXP 28
12086: PUSH
12087: LD_INT 0
12089: EQUAL
12090: AND
12091: IFFALSE 12380
12093: GO 12095
12095: DISABLE
// begin timerStatus = 4 ;
12096: LD_ADDR_EXP 29
12100: PUSH
12101: LD_INT 4
12103: ST_TO_ADDR
// if harrAnswer = 1 then
12104: LD_EXP 26
12108: PUSH
12109: LD_INT 1
12111: EQUAL
12112: IFFALSE 12196
// begin PrepareHarrisonSupport ( 3 ) ;
12114: LD_INT 3
12116: PPUSH
12117: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12121: LD_INT 2100
12123: PPUSH
12124: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12128: LD_EXP 14
12132: PPUSH
12133: LD_STRING D7-Har-1
12135: PPUSH
12136: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12140: LD_STRING M2
12142: PPUSH
12143: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12147: LD_ADDR_EXP 27
12151: PUSH
12152: LD_INT 31500
12154: PUSH
12155: LD_INT 10500
12157: PUSH
12158: LD_INT 8400
12160: PUSH
12161: LD_INT 6300
12163: PUSH
12164: LD_INT 6300
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: PUSH
12173: LD_OWVAR 67
12177: ARRAY
12178: PLUS
12179: ST_TO_ADDR
// startTimer = 1 ;
12180: LD_ADDR_EXP 30
12184: PUSH
12185: LD_INT 1
12187: ST_TO_ADDR
// timerStatus = 3 ;
12188: LD_ADDR_EXP 29
12192: PUSH
12193: LD_INT 3
12195: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12196: LD_EXP 26
12200: PUSH
12201: LD_INT 2
12203: EQUAL
12204: IFFALSE 12288
// begin PrepareHarrisonSupport ( 4 ) ;
12206: LD_INT 4
12208: PPUSH
12209: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12213: LD_INT 2100
12215: PPUSH
12216: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12220: LD_EXP 14
12224: PPUSH
12225: LD_STRING D7-Har-1
12227: PPUSH
12228: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12232: LD_STRING M2
12234: PPUSH
12235: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12239: LD_ADDR_EXP 27
12243: PUSH
12244: LD_INT 33600
12246: PUSH
12247: LD_INT 10500
12249: PUSH
12250: LD_INT 8400
12252: PUSH
12253: LD_INT 6300
12255: PUSH
12256: LD_INT 5250
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: PUSH
12265: LD_OWVAR 67
12269: ARRAY
12270: PLUS
12271: ST_TO_ADDR
// startTimer = 1 ;
12272: LD_ADDR_EXP 30
12276: PUSH
12277: LD_INT 1
12279: ST_TO_ADDR
// timerStatus = 3 ;
12280: LD_ADDR_EXP 29
12284: PUSH
12285: LD_INT 3
12287: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12288: LD_EXP 26
12292: PUSH
12293: LD_INT 3
12295: EQUAL
12296: IFFALSE 12380
// begin PrepareHarrisonSupport ( 5 ) ;
12298: LD_INT 5
12300: PPUSH
12301: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12305: LD_INT 2100
12307: PPUSH
12308: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12312: LD_EXP 14
12316: PPUSH
12317: LD_STRING D7-Har-1
12319: PPUSH
12320: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12324: LD_STRING M2
12326: PPUSH
12327: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12331: LD_ADDR_EXP 27
12335: PUSH
12336: LD_INT 35700
12338: PUSH
12339: LD_INT 10500
12341: PUSH
12342: LD_INT 6300
12344: PUSH
12345: LD_INT 4200
12347: PUSH
12348: LD_INT 3150
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: PUSH
12357: LD_OWVAR 67
12361: ARRAY
12362: PLUS
12363: ST_TO_ADDR
// startTimer = 1 ;
12364: LD_ADDR_EXP 30
12368: PUSH
12369: LD_INT 1
12371: ST_TO_ADDR
// timerStatus = 3 ;
12372: LD_ADDR_EXP 29
12376: PUSH
12377: LD_INT 3
12379: ST_TO_ADDR
// end ; end ;
12380: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12381: LD_EXP 27
12385: PUSH
12386: LD_INT 8400
12388: LESSEQUAL
12389: PUSH
12390: LD_EXP 29
12394: PUSH
12395: LD_INT 3
12397: EQUAL
12398: AND
12399: IFFALSE 12431
12401: GO 12403
12403: DISABLE
// begin DialogueOn ;
12404: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12408: LD_EXP 14
12412: PPUSH
12413: LD_STRING D7a-Har-1
12415: PPUSH
12416: CALL_OW 94
// DialogueOff ;
12420: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12424: LD_STRING M2a
12426: PPUSH
12427: CALL_OW 337
// end ;
12431: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12432: LD_EXP 27
12436: PUSH
12437: LD_INT 0
12439: LESSEQUAL
12440: PUSH
12441: LD_EXP 29
12445: PUSH
12446: LD_INT 3
12448: EQUAL
12449: AND
12450: PUSH
12451: LD_EXP 40
12455: NOT
12456: AND
12457: IFFALSE 12596
12459: GO 12461
12461: DISABLE
12462: LD_INT 0
12464: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12465: LD_ADDR_VAR 0 1
12469: PUSH
12470: LD_INT 22
12472: PUSH
12473: LD_INT 1
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 69
12484: PUSH
12485: LD_EXP 1
12489: PUSH
12490: EMPTY
12491: LIST
12492: DIFF
12493: ST_TO_ADDR
// saveDonaldson = 2 ;
12494: LD_ADDR_EXP 24
12498: PUSH
12499: LD_INT 2
12501: ST_TO_ADDR
// DialogueOn ;
12502: CALL_OW 6
// if IsOk ( Donaldson ) then
12506: LD_EXP 13
12510: PPUSH
12511: CALL_OW 302
12515: IFFALSE 12531
// SayRadio ( Harisson , D8-Har-1 ) else
12517: LD_EXP 14
12521: PPUSH
12522: LD_STRING D8-Har-1
12524: PPUSH
12525: CALL_OW 94
12529: GO 12543
// SayRadio ( Harisson , D8-Har-1a ) ;
12531: LD_EXP 14
12535: PPUSH
12536: LD_STRING D8-Har-1a
12538: PPUSH
12539: CALL_OW 94
// DialogueOff ;
12543: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12547: LD_VAR 0 1
12551: PPUSH
12552: LD_INT 4
12554: PPUSH
12555: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12559: LD_VAR 0 1
12563: PPUSH
12564: LD_INT 88
12566: PPUSH
12567: LD_INT 89
12569: PPUSH
12570: CALL_OW 114
// honor = 0 ;
12574: LD_ADDR_EXP 39
12578: PUSH
12579: LD_INT 0
12581: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12582: LD_INT 350
12584: PPUSH
12585: CALL_OW 67
// YouLost ( LostCommand ) ;
12589: LD_STRING LostCommand
12591: PPUSH
12592: CALL_OW 104
// end ;
12596: PPOPN 1
12598: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12599: LD_INT 22
12601: PUSH
12602: LD_INT 6
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 21
12611: PUSH
12612: LD_INT 1
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PPUSH
12623: CALL_OW 69
12627: PUSH
12628: LD_INT 0
12630: EQUAL
12631: PUSH
12632: LD_EXP 20
12636: PUSH
12637: LD_INT 0
12639: EQUAL
12640: AND
12641: PUSH
12642: LD_EXP 44
12646: PUSH
12647: LD_INT 1
12649: EQUAL
12650: AND
12651: IFFALSE 12745
12653: GO 12655
12655: DISABLE
12656: LD_INT 0
12658: PPUSH
12659: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12660: LD_ADDR_VAR 0 2
12664: PUSH
12665: LD_INT 22
12667: PUSH
12668: LD_INT 1
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 21
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 23
12687: PUSH
12688: LD_INT 1
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: LIST
12699: PPUSH
12700: CALL_OW 69
12704: ST_TO_ADDR
// for i in tmp do
12705: LD_ADDR_VAR 0 1
12709: PUSH
12710: LD_VAR 0 2
12714: PUSH
12715: FOR_IN
12716: IFFALSE 12743
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12718: LD_VAR 0 1
12722: PPUSH
12723: LD_INT 1
12725: PPUSH
12726: LD_INT 4
12728: PPUSH
12729: CALL_OW 12
12733: PPUSH
12734: LD_INT 500
12736: PPUSH
12737: CALL_OW 492
12741: GO 12715
12743: POP
12744: POP
// end ; end_of_file
12745: PPOPN 2
12747: END
// every 0 0$1 trigger AIEnable do
12748: LD_EXP 37
12752: IFFALSE 12846
12754: GO 12756
12756: DISABLE
// begin enable ;
12757: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12758: LD_INT 3
12760: PPUSH
12761: LD_INT 21
12763: PPUSH
12764: LD_INT 7
12766: PPUSH
12767: CALL 6030 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12771: LD_INT 3
12773: PPUSH
12774: LD_INT 8
12776: PPUSH
12777: LD_INT 7
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: CALL 6334 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12787: LD_EXP 20
12791: PUSH
12792: LD_INT 2
12794: EQUAL
12795: PUSH
12796: LD_INT 22
12798: PUSH
12799: LD_INT 6
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PPUSH
12806: CALL_OW 69
12810: AND
12811: IFFALSE 12846
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12813: LD_INT 6
12815: PPUSH
12816: LD_EXP 21
12820: PPUSH
12821: LD_INT 6
12823: PPUSH
12824: CALL 6030 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12828: LD_INT 6
12830: PPUSH
12831: LD_INT 9
12833: PPUSH
12834: LD_INT 6
12836: PPUSH
12837: LD_EXP 22
12841: PPUSH
12842: CALL 6334 0 4
// end ; end ;
12846: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12847: LD_EXP 15
12851: PPUSH
12852: CALL_OW 310
12856: NOT
12857: PUSH
12858: LD_INT 21
12860: PPUSH
12861: CALL_OW 302
12865: AND
12866: PUSH
12867: LD_INT 21
12869: PPUSH
12870: CALL_OW 255
12874: PUSH
12875: LD_INT 3
12877: EQUAL
12878: AND
12879: IFFALSE 12896
12881: GO 12883
12883: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12884: LD_EXP 15
12888: PPUSH
12889: LD_INT 21
12891: PPUSH
12892: CALL_OW 120
12896: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12897: LD_INT 22
12899: PUSH
12900: LD_INT 3
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PUSH
12907: LD_INT 21
12909: PUSH
12910: LD_INT 2
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 55
12919: PUSH
12920: EMPTY
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 69
12932: PUSH
12933: LD_INT 0
12935: EQUAL
12936: PUSH
12937: LD_INT 1
12939: PPUSH
12940: CALL_OW 255
12944: PUSH
12945: LD_INT 3
12947: EQUAL
12948: AND
12949: PUSH
12950: LD_INT 21
12952: PPUSH
12953: CALL_OW 302
12957: AND
12958: PUSH
12959: LD_INT 21
12961: PPUSH
12962: CALL_OW 255
12966: PUSH
12967: LD_INT 3
12969: EQUAL
12970: AND
12971: PUSH
12972: LD_INT 21
12974: PPUSH
12975: CALL_OW 302
12979: AND
12980: IFFALSE 13192
12982: GO 12984
12984: DISABLE
// begin enable ;
12985: ENABLE
// if Difficulty = 1 then
12986: LD_OWVAR 67
12990: PUSH
12991: LD_INT 1
12993: EQUAL
12994: IFFALSE 13038
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
12996: LD_INT 3
12998: PPUSH
12999: LD_INT 24
13001: PPUSH
13002: LD_OWVAR 67
13006: PUSH
13007: LD_INT 2
13009: PLUS
13010: PPUSH
13011: LD_INT 42
13013: PUSH
13014: LD_INT 44
13016: PUSH
13017: LD_INT 43
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: PPUSH
13025: LD_INT 1
13027: PPUSH
13028: LD_INT 1
13030: PPUSH
13031: LD_INT 21
13033: PPUSH
13034: CALL 6848 0 7
// if Difficulty = 2 then
13038: LD_OWVAR 67
13042: PUSH
13043: LD_INT 2
13045: EQUAL
13046: IFFALSE 13113
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13048: LD_INT 3
13050: PPUSH
13051: LD_INT 24
13053: PPUSH
13054: LD_OWVAR 67
13058: PUSH
13059: LD_INT 2
13061: PLUS
13062: PPUSH
13063: LD_INT 44
13065: PUSH
13066: LD_INT 44
13068: PUSH
13069: LD_INT 43
13071: PUSH
13072: LD_INT 43
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: PPUSH
13081: LD_INT 1
13083: PPUSH
13084: LD_INT 1
13086: PPUSH
13087: LD_INT 21
13089: PUSH
13090: LD_INT 22
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PUSH
13097: LD_INT 1
13099: PPUSH
13100: LD_INT 2
13102: PPUSH
13103: CALL_OW 12
13107: ARRAY
13108: PPUSH
13109: CALL 6848 0 7
// if Difficulty >= 3 then
13113: LD_OWVAR 67
13117: PUSH
13118: LD_INT 3
13120: GREATEREQUAL
13121: IFFALSE 13192
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13123: LD_INT 3
13125: PPUSH
13126: LD_INT 24
13128: PPUSH
13129: LD_OWVAR 67
13133: PUSH
13134: LD_INT 2
13136: PPUSH
13137: LD_INT 3
13139: PPUSH
13140: CALL_OW 12
13144: PLUS
13145: PPUSH
13146: LD_INT 44
13148: PUSH
13149: LD_INT 44
13151: PUSH
13152: LD_INT 43
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: LIST
13159: PPUSH
13160: LD_INT 1
13162: PPUSH
13163: LD_INT 1
13165: PPUSH
13166: LD_INT 22
13168: PUSH
13169: LD_INT 23
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 1
13178: PPUSH
13179: LD_INT 2
13181: PPUSH
13182: CALL_OW 12
13186: ARRAY
13187: PPUSH
13188: CALL 6848 0 7
// end ;
13192: END
// every 0 0$1 do
13193: GO 13195
13195: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13196: LD_INT 3
13198: PPUSH
13199: LD_INT 1
13201: PPUSH
13202: LD_INT 3
13204: PPUSH
13205: CALL 5951 0 3
13209: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13210: LD_EXP 20
13214: PUSH
13215: LD_INT 1
13217: EQUAL
13218: IFFALSE 13365
13220: GO 13222
13222: DISABLE
13223: LD_INT 0
13225: PPUSH
13226: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13227: LD_ADDR_VAR 0 2
13231: PUSH
13232: LD_INT 22
13234: PUSH
13235: LD_INT 6
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 21
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: LD_INT 34
13254: PUSH
13255: LD_INT 51
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: PPUSH
13267: CALL_OW 69
13271: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13272: LD_VAR 0 2
13276: PUSH
13277: LD_INT 1
13279: ARRAY
13280: PPUSH
13281: LD_EXP 21
13285: PPUSH
13286: CALL_OW 250
13290: PUSH
13291: LD_INT 5
13293: MINUS
13294: PPUSH
13295: LD_EXP 21
13299: PPUSH
13300: CALL_OW 251
13304: PUSH
13305: LD_INT 5
13307: MINUS
13308: PPUSH
13309: CALL_OW 111
// wait ( 0 0$5 ) ;
13313: LD_INT 175
13315: PPUSH
13316: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13320: LD_VAR 0 2
13324: PUSH
13325: LD_INT 1
13327: ARRAY
13328: PPUSH
13329: LD_INT 41
13331: PPUSH
13332: LD_INT 52
13334: PPUSH
13335: CALL_OW 177
// wait ( 0 0$40 ) ;
13339: LD_INT 1400
13341: PPUSH
13342: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13346: LD_VAR 0 2
13350: PUSH
13351: LD_INT 1
13353: ARRAY
13354: PPUSH
13355: LD_INT 41
13357: PPUSH
13358: LD_INT 44
13360: PPUSH
13361: CALL_OW 111
// end ;
13365: PPOPN 2
13367: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13368: LD_EXP 21
13372: PPUSH
13373: CALL_OW 274
13377: PPUSH
13378: LD_INT 1
13380: PPUSH
13381: CALL_OW 275
13385: PUSH
13386: LD_INT 100
13388: GREATEREQUAL
13389: IFFALSE 13617
13391: GO 13393
13393: DISABLE
13394: LD_INT 0
13396: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13397: LD_ADDR_VAR 0 1
13401: PUSH
13402: LD_INT 22
13404: PUSH
13405: LD_INT 6
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 21
13414: PUSH
13415: LD_INT 1
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 25
13424: PUSH
13425: LD_INT 2
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: PPUSH
13437: CALL_OW 69
13441: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13442: LD_VAR 0 1
13446: PUSH
13447: LD_INT 1
13449: ARRAY
13450: PPUSH
13451: LD_INT 4
13453: PPUSH
13454: LD_INT 39
13456: PPUSH
13457: LD_INT 37
13459: PPUSH
13460: LD_INT 3
13462: PPUSH
13463: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13467: LD_VAR 0 1
13471: PUSH
13472: LD_INT 1
13474: ARRAY
13475: PPUSH
13476: LD_INT 29
13478: PPUSH
13479: LD_INT 42
13481: PPUSH
13482: LD_INT 54
13484: PPUSH
13485: LD_INT 3
13487: PPUSH
13488: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13492: LD_VAR 0 1
13496: PUSH
13497: LD_INT 1
13499: ARRAY
13500: PPUSH
13501: LD_INT 6
13503: PPUSH
13504: LD_INT 38
13506: PPUSH
13507: LD_INT 48
13509: PPUSH
13510: LD_INT 0
13512: PPUSH
13513: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13517: LD_VAR 0 1
13521: PUSH
13522: LD_INT 1
13524: ARRAY
13525: PPUSH
13526: LD_INT 2
13528: PPUSH
13529: LD_INT 32
13531: PPUSH
13532: LD_INT 38
13534: PPUSH
13535: LD_INT 2
13537: PPUSH
13538: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13542: LD_VAR 0 1
13546: PUSH
13547: LD_INT 1
13549: ARRAY
13550: PPUSH
13551: LD_INT 26
13553: PPUSH
13554: LD_INT 39
13556: PPUSH
13557: LD_INT 55
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13567: LD_VAR 0 1
13571: PUSH
13572: LD_INT 1
13574: ARRAY
13575: PPUSH
13576: LD_INT 32
13578: PPUSH
13579: LD_INT 31
13581: PPUSH
13582: LD_INT 31
13584: PPUSH
13585: LD_INT 3
13587: PPUSH
13588: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13592: LD_VAR 0 1
13596: PUSH
13597: LD_INT 1
13599: ARRAY
13600: PPUSH
13601: LD_INT 31
13603: PPUSH
13604: LD_INT 50
13606: PPUSH
13607: LD_INT 51
13609: PPUSH
13610: LD_INT 4
13612: PPUSH
13613: CALL_OW 205
// end ;
13617: PPOPN 1
13619: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13620: LD_EXP 46
13624: IFFALSE 14189
13626: GO 13628
13628: DISABLE
13629: LD_INT 0
13631: PPUSH
13632: PPUSH
13633: PPUSH
// begin enable ;
13634: ENABLE
// if not ruMobile then
13635: LD_EXP 46
13639: NOT
13640: IFFALSE 13644
// exit ;
13642: GO 14189
// for i in ruMobile do
13644: LD_ADDR_VAR 0 1
13648: PUSH
13649: LD_EXP 46
13653: PUSH
13654: FOR_IN
13655: IFFALSE 14187
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13657: LD_VAR 0 1
13661: PPUSH
13662: CALL_OW 302
13666: NOT
13667: PUSH
13668: LD_VAR 0 1
13672: PPUSH
13673: CALL_OW 255
13677: PUSH
13678: LD_INT 3
13680: NONEQUAL
13681: OR
13682: IFFALSE 13702
// begin ruMobile := ruMobile diff i ;
13684: LD_ADDR_EXP 46
13688: PUSH
13689: LD_EXP 46
13693: PUSH
13694: LD_VAR 0 1
13698: DIFF
13699: ST_TO_ADDR
// continue ;
13700: GO 13654
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 110
13711: NOT
13712: PUSH
13713: LD_VAR 0 1
13717: PPUSH
13718: CALL_OW 110
13722: PUSH
13723: LD_INT 0
13725: EQUAL
13726: OR
13727: IFFALSE 13842
// begin if GetFuel ( i ) < 50 then
13729: LD_VAR 0 1
13733: PPUSH
13734: CALL_OW 261
13738: PUSH
13739: LD_INT 50
13741: LESS
13742: IFFALSE 13801
// begin ComMoveXY ( i , 106 , 88 ) ;
13744: LD_VAR 0 1
13748: PPUSH
13749: LD_INT 106
13751: PPUSH
13752: LD_INT 88
13754: PPUSH
13755: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13759: LD_INT 35
13761: PPUSH
13762: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13766: LD_VAR 0 1
13770: PPUSH
13771: LD_INT 106
13773: PPUSH
13774: LD_INT 88
13776: PPUSH
13777: CALL_OW 297
13781: PUSH
13782: LD_INT 4
13784: LESS
13785: IFFALSE 13759
// SetFuel ( i , 100 ) ;
13787: LD_VAR 0 1
13791: PPUSH
13792: LD_INT 100
13794: PPUSH
13795: CALL_OW 240
// end else
13799: GO 13842
// if not IsInArea ( i , ruParking ) then
13801: LD_VAR 0 1
13805: PPUSH
13806: LD_INT 25
13808: PPUSH
13809: CALL_OW 308
13813: NOT
13814: IFFALSE 13830
// ComMoveToArea ( i , ruParking ) else
13816: LD_VAR 0 1
13820: PPUSH
13821: LD_INT 25
13823: PPUSH
13824: CALL_OW 113
13828: GO 13842
// SetTag ( i , 1 ) ;
13830: LD_VAR 0 1
13834: PPUSH
13835: LD_INT 1
13837: PPUSH
13838: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13842: LD_VAR 0 1
13846: PPUSH
13847: CALL_OW 110
13851: PUSH
13852: LD_INT 1
13854: EQUAL
13855: IFFALSE 13985
// begin if GetLives ( i ) < 650 then
13857: LD_VAR 0 1
13861: PPUSH
13862: CALL_OW 256
13866: PUSH
13867: LD_INT 650
13869: LESS
13870: IFFALSE 13962
// begin if not IsDrivenBy ( i ) then
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 311
13881: NOT
13882: IFFALSE 13886
// continue ;
13884: GO 13654
// mech := IsDrivenBy ( i ) ;
13886: LD_ADDR_VAR 0 2
13890: PUSH
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 311
13900: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13901: LD_VAR 0 2
13905: PPUSH
13906: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13910: LD_VAR 0 2
13914: PPUSH
13915: LD_VAR 0 1
13919: PPUSH
13920: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13924: LD_INT 35
13926: PPUSH
13927: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13931: LD_VAR 0 1
13935: PPUSH
13936: CALL_OW 256
13940: PUSH
13941: LD_INT 1000
13943: EQUAL
13944: IFFALSE 13924
// ComEnterUnit ( mech , i ) ;
13946: LD_VAR 0 2
13950: PPUSH
13951: LD_VAR 0 1
13955: PPUSH
13956: CALL_OW 120
// end else
13960: GO 13985
// if IsDrivenBy ( i ) then
13962: LD_VAR 0 1
13966: PPUSH
13967: CALL_OW 311
13971: IFFALSE 13985
// SetTag ( i , 2 ) ;
13973: LD_VAR 0 1
13977: PPUSH
13978: LD_INT 2
13980: PPUSH
13981: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
13985: LD_VAR 0 1
13989: PPUSH
13990: CALL_OW 110
13994: PUSH
13995: LD_INT 2
13997: EQUAL
13998: IFFALSE 14185
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14000: LD_ADDR_VAR 0 3
14004: PUSH
14005: LD_INT 24
14007: PPUSH
14008: LD_INT 81
14010: PUSH
14011: LD_INT 3
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PPUSH
14018: CALL_OW 70
14022: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14023: LD_VAR 0 1
14027: PPUSH
14028: CALL_OW 256
14032: PUSH
14033: LD_INT 650
14035: LESS
14036: IFFALSE 14061
// begin ComStop ( i ) ;
14038: LD_VAR 0 1
14042: PPUSH
14043: CALL_OW 141
// SetTag ( i , 0 ) ;
14047: LD_VAR 0 1
14051: PPUSH
14052: LD_INT 0
14054: PPUSH
14055: CALL_OW 109
// continue ;
14059: GO 13654
// end ; if enemy then
14061: LD_VAR 0 3
14065: IFFALSE 14105
// begin if not HasTask ( i ) then
14067: LD_VAR 0 1
14071: PPUSH
14072: CALL_OW 314
14076: NOT
14077: IFFALSE 14103
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14079: LD_VAR 0 1
14083: PPUSH
14084: LD_VAR 0 3
14088: PPUSH
14089: LD_VAR 0 1
14093: PPUSH
14094: CALL_OW 74
14098: PPUSH
14099: CALL_OW 115
// end else
14103: GO 14185
// if ruMobile > 2 then
14105: LD_EXP 46
14109: PUSH
14110: LD_INT 2
14112: GREATER
14113: IFFALSE 14185
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14115: LD_ADDR_VAR 0 3
14119: PUSH
14120: LD_INT 81
14122: PUSH
14123: LD_INT 3
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PPUSH
14130: CALL_OW 69
14134: ST_TO_ADDR
// if enemy then
14135: LD_VAR 0 3
14139: IFFALSE 14185
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
14141: LD_VAR 0 1
14145: PPUSH
14146: LD_INT 95
14148: PUSH
14149: LD_INT 74
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 67
14158: PUSH
14159: LD_INT 59
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: LD_INT 55
14168: PUSH
14169: LD_INT 41
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: PPUSH
14181: CALL 79729 0 2
// end ; end ; end ;
14185: GO 13654
14187: POP
14188: POP
// end ; end_of_file
14189: PPOPN 3
14191: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14192: LD_INT 0
14194: PPUSH
14195: PPUSH
14196: PPUSH
14197: PPUSH
14198: PPUSH
14199: PPUSH
14200: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14201: LD_ADDR_VAR 0 3
14205: PUSH
14206: LD_INT 22
14208: PUSH
14209: LD_INT 6
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PUSH
14216: LD_INT 21
14218: PUSH
14219: LD_INT 1
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 25
14228: PUSH
14229: LD_INT 1
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 3
14238: PUSH
14239: LD_INT 54
14241: PUSH
14242: EMPTY
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: PPUSH
14255: CALL_OW 69
14259: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14260: LD_ADDR_VAR 0 7
14264: PUSH
14265: LD_INT 22
14267: PUSH
14268: LD_INT 6
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: LD_INT 21
14277: PUSH
14278: LD_INT 1
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 25
14287: PUSH
14288: LD_INT 1
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 54
14297: PUSH
14298: EMPTY
14299: LIST
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: PPUSH
14307: CALL_OW 69
14311: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14312: LD_ADDR_VAR 0 4
14316: PUSH
14317: LD_INT 22
14319: PUSH
14320: LD_INT 6
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 21
14329: PUSH
14330: LD_INT 1
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: LD_INT 25
14339: PUSH
14340: LD_INT 2
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14357: LD_ADDR_VAR 0 6
14361: PUSH
14362: LD_INT 22
14364: PUSH
14365: LD_INT 6
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: LD_INT 21
14374: PUSH
14375: LD_INT 1
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PUSH
14382: LD_INT 25
14384: PUSH
14385: LD_INT 4
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: LIST
14396: PPUSH
14397: CALL_OW 69
14401: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14402: LD_ADDR_VAR 0 8
14406: PUSH
14407: LD_INT 22
14409: PUSH
14410: LD_INT 6
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 21
14419: PUSH
14420: LD_INT 2
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: LD_INT 34
14429: PUSH
14430: LD_INT 51
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 69
14446: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 255
14456: PUSH
14457: LD_INT 6
14459: EQUAL
14460: PUSH
14461: LD_VAR 0 1
14465: PPUSH
14466: CALL_OW 266
14470: PUSH
14471: LD_INT 0
14473: EQUAL
14474: AND
14475: IFFALSE 14495
// begin ruPDepot = building ;
14477: LD_ADDR_EXP 21
14481: PUSH
14482: LD_VAR 0 1
14486: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14487: LD_ADDR_EXP 20
14491: PUSH
14492: LD_INT 1
14494: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 266
14504: PUSH
14505: LD_INT 4
14507: EQUAL
14508: PUSH
14509: LD_VAR 0 1
14513: PPUSH
14514: CALL_OW 255
14518: PUSH
14519: LD_INT 6
14521: EQUAL
14522: AND
14523: IFFALSE 14556
// for i in tmpSold do
14525: LD_ADDR_VAR 0 2
14529: PUSH
14530: LD_VAR 0 3
14534: PUSH
14535: FOR_IN
14536: IFFALSE 14554
// ComEnterUnit ( i , building ) ;
14538: LD_VAR 0 2
14542: PPUSH
14543: LD_VAR 0 1
14547: PPUSH
14548: CALL_OW 120
14552: GO 14535
14554: POP
14555: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14556: LD_VAR 0 1
14560: PPUSH
14561: CALL_OW 266
14565: PUSH
14566: LD_INT 6
14568: EQUAL
14569: PUSH
14570: LD_VAR 0 1
14574: PPUSH
14575: CALL_OW 255
14579: PUSH
14580: LD_INT 6
14582: EQUAL
14583: AND
14584: IFFALSE 14642
// begin for i in tmpSci do
14586: LD_ADDR_VAR 0 2
14590: PUSH
14591: LD_VAR 0 6
14595: PUSH
14596: FOR_IN
14597: IFFALSE 14615
// ComEnterUnit ( i , building ) ;
14599: LD_VAR 0 2
14603: PPUSH
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 120
14613: GO 14596
14615: POP
14616: POP
// ResAllTechs ( 6 , building , 3 ) ;
14617: LD_INT 6
14619: PPUSH
14620: LD_VAR 0 1
14624: PPUSH
14625: LD_INT 3
14627: PPUSH
14628: CALL 5951 0 3
// ruPLab = building ;
14632: LD_ADDR_EXP 22
14636: PUSH
14637: LD_VAR 0 1
14641: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14642: LD_VAR 0 1
14646: PPUSH
14647: CALL_OW 266
14651: PUSH
14652: LD_INT 2
14654: EQUAL
14655: PUSH
14656: LD_VAR 0 1
14660: PPUSH
14661: CALL_OW 255
14665: PUSH
14666: LD_INT 6
14668: EQUAL
14669: AND
14670: IFFALSE 14721
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14672: LD_ADDR_VAR 0 5
14676: PUSH
14677: LD_VAR 0 8
14681: PUSH
14682: LD_INT 1
14684: ARRAY
14685: PPUSH
14686: CALL_OW 313
14690: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14691: LD_VAR 0 5
14695: PPUSH
14696: CALL_OW 121
// wait ( 0 0$1 ) ;
14700: LD_INT 35
14702: PPUSH
14703: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14707: LD_VAR 0 5
14711: PPUSH
14712: LD_VAR 0 1
14716: PPUSH
14717: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14721: LD_VAR 0 1
14725: PPUSH
14726: CALL_OW 266
14730: PUSH
14731: LD_INT 32
14733: EQUAL
14734: PUSH
14735: LD_VAR 0 1
14739: PPUSH
14740: CALL_OW 255
14744: PUSH
14745: LD_INT 6
14747: EQUAL
14748: AND
14749: IFFALSE 14801
// begin ComPlaceWeapon ( building , 42 ) ;
14751: LD_VAR 0 1
14755: PPUSH
14756: LD_INT 42
14758: PPUSH
14759: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14763: LD_VAR 0 7
14767: PUSH
14768: LD_INT 1
14770: ARRAY
14771: PPUSH
14772: CALL_OW 122
// wait ( 0 0$1 ) ;
14776: LD_INT 35
14778: PPUSH
14779: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14783: LD_VAR 0 7
14787: PUSH
14788: LD_INT 1
14790: ARRAY
14791: PPUSH
14792: LD_VAR 0 1
14796: PPUSH
14797: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14801: LD_VAR 0 1
14805: PPUSH
14806: CALL_OW 266
14810: PUSH
14811: LD_INT 31
14813: EQUAL
14814: PUSH
14815: LD_VAR 0 1
14819: PPUSH
14820: CALL_OW 255
14824: PUSH
14825: LD_INT 6
14827: EQUAL
14828: AND
14829: IFFALSE 14895
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14831: LD_VAR 0 7
14835: PUSH
14836: LD_INT 2
14838: ARRAY
14839: PPUSH
14840: CALL_OW 122
// wait ( 0 0$1 ) ;
14844: LD_INT 35
14846: PPUSH
14847: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14851: LD_VAR 0 7
14855: PUSH
14856: LD_INT 2
14858: ARRAY
14859: PPUSH
14860: LD_VAR 0 1
14864: PPUSH
14865: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14869: LD_VAR 0 4
14873: PUSH
14874: LD_INT 1
14876: ARRAY
14877: PPUSH
14878: LD_EXP 21
14882: PPUSH
14883: CALL_OW 120
// baseReadyToBuild = 2 ;
14887: LD_ADDR_EXP 20
14891: PUSH
14892: LD_INT 2
14894: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14895: LD_VAR 0 1
14899: PPUSH
14900: CALL_OW 266
14904: PUSH
14905: LD_INT 32
14907: EQUAL
14908: PUSH
14909: LD_VAR 0 1
14913: PPUSH
14914: CALL_OW 255
14918: PUSH
14919: LD_INT 1
14921: EQUAL
14922: AND
14923: PUSH
14924: LD_EXP 32
14928: PUSH
14929: LD_INT 0
14931: EQUAL
14932: AND
14933: IFFALSE 15178
// begin bunkerDialog = 1 ;
14935: LD_ADDR_EXP 32
14939: PUSH
14940: LD_INT 1
14942: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14943: LD_EXP 11
14947: PPUSH
14948: CALL_OW 302
14952: IFFALSE 14968
// Say ( Claptopn , D11-Eng1-1 ) else
14954: LD_EXP 11
14958: PPUSH
14959: LD_STRING D11-Eng1-1
14961: PPUSH
14962: CALL_OW 88
14966: GO 15164
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14968: LD_INT 22
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 21
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 25
14990: PUSH
14991: LD_INT 3
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: LD_INT 26
15000: PUSH
15001: LD_INT 1
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: PPUSH
15014: CALL_OW 69
15018: PUSH
15019: LD_EXP 1
15023: PUSH
15024: EMPTY
15025: LIST
15026: PUSH
15027: LD_INT 0
15029: GREATER
15030: DIFF
15031: IFFALSE 15105
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15033: LD_INT 22
15035: PUSH
15036: LD_INT 1
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 21
15045: PUSH
15046: LD_INT 1
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 25
15055: PUSH
15056: LD_INT 2
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 26
15065: PUSH
15066: LD_INT 1
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: PPUSH
15079: CALL_OW 69
15083: PUSH
15084: LD_EXP 1
15088: PUSH
15089: EMPTY
15090: LIST
15091: DIFF
15092: PPUSH
15093: LD_STRING D11-Eng1-1
15095: PPUSH
15096: LD_STRING D11-Eng1-1
15098: PPUSH
15099: CALL 4598 0 3
15103: GO 15164
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15105: LD_INT 22
15107: PUSH
15108: LD_INT 1
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: LD_INT 21
15117: PUSH
15118: LD_INT 1
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PUSH
15125: LD_INT 26
15127: PUSH
15128: LD_INT 1
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: PPUSH
15140: CALL_OW 69
15144: PUSH
15145: LD_EXP 1
15149: PUSH
15150: EMPTY
15151: LIST
15152: DIFF
15153: PPUSH
15154: LD_STRING D11-Eng1-1
15156: PPUSH
15157: LD_STRING D11-Eng1-1
15159: PPUSH
15160: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15164: LD_EXP 33
15168: PUSH
15169: LD_INT 0
15171: EQUAL
15172: IFFALSE 15178
// EnergyDialog ;
15174: CALL 5003 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15178: LD_VAR 0 1
15182: PPUSH
15183: CALL_OW 266
15187: PUSH
15188: LD_INT 29
15190: EQUAL
15191: PUSH
15192: LD_VAR 0 1
15196: PPUSH
15197: CALL_OW 255
15201: PUSH
15202: LD_INT 1
15204: EQUAL
15205: AND
15206: IFFALSE 15216
// buildOil = 1 ;
15208: LD_ADDR_EXP 34
15212: PUSH
15213: LD_INT 1
15215: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15216: LD_VAR 0 1
15220: PPUSH
15221: CALL_OW 266
15225: PUSH
15226: LD_INT 26
15228: EQUAL
15229: PUSH
15230: LD_VAR 0 1
15234: PPUSH
15235: CALL_OW 255
15239: PUSH
15240: LD_INT 1
15242: EQUAL
15243: AND
15244: IFFALSE 15254
// buildPower = 1 ;
15246: LD_ADDR_EXP 35
15250: PUSH
15251: LD_INT 1
15253: ST_TO_ADDR
// end ;
15254: PPOPN 8
15256: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15257: LD_VAR 0 1
15261: PPUSH
15262: CALL_OW 266
15266: PUSH
15267: LD_INT 3
15269: EQUAL
15270: PUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 255
15280: PUSH
15281: LD_INT 1
15283: EQUAL
15284: AND
15285: PUSH
15286: LD_EXP 31
15290: PUSH
15291: LD_INT 0
15293: EQUAL
15294: AND
15295: IFFALSE 15643
// begin factoryDialog = 1 ;
15297: LD_ADDR_EXP 31
15301: PUSH
15302: LD_INT 1
15304: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15305: LD_INT 47
15307: PPUSH
15308: LD_INT 1
15310: PPUSH
15311: CALL_OW 321
15315: PUSH
15316: LD_INT 1
15318: EQUAL
15319: PUSH
15320: LD_INT 45
15322: PPUSH
15323: LD_INT 1
15325: PPUSH
15326: CALL_OW 321
15330: PUSH
15331: LD_INT 1
15333: EQUAL
15334: AND
15335: IFFALSE 15643
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15337: LD_INT 22
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 21
15349: PUSH
15350: LD_INT 3
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 30
15359: PUSH
15360: LD_INT 3
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 24
15369: PUSH
15370: LD_INT 1000
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: PPUSH
15383: CALL_OW 69
15387: PUSH
15388: LD_INT 1
15390: ARRAY
15391: PPUSH
15392: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15396: LD_EXP 1
15400: PPUSH
15401: LD_STRING D9a-JMM-1
15403: PPUSH
15404: CALL_OW 88
// if IsOK ( Campell ) then
15408: LD_EXP 12
15412: PPUSH
15413: CALL_OW 302
15417: IFFALSE 15433
// Say ( Campell , D9a-Mech1-1 ) else
15419: LD_EXP 12
15423: PPUSH
15424: LD_STRING D9a-Mech1-1
15426: PPUSH
15427: CALL_OW 88
15431: GO 15629
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15433: LD_INT 22
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 21
15445: PUSH
15446: LD_INT 1
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 25
15455: PUSH
15456: LD_INT 3
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: LD_INT 26
15465: PUSH
15466: LD_INT 1
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: PPUSH
15479: CALL_OW 69
15483: PUSH
15484: LD_EXP 1
15488: PUSH
15489: EMPTY
15490: LIST
15491: PUSH
15492: LD_INT 0
15494: GREATER
15495: DIFF
15496: IFFALSE 15570
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15498: LD_INT 22
15500: PUSH
15501: LD_INT 1
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 21
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 25
15520: PUSH
15521: LD_INT 3
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 26
15530: PUSH
15531: LD_INT 1
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: PPUSH
15544: CALL_OW 69
15548: PUSH
15549: LD_EXP 1
15553: PUSH
15554: EMPTY
15555: LIST
15556: DIFF
15557: PPUSH
15558: LD_STRING D9a-Mech1-1
15560: PPUSH
15561: LD_STRING D9a-Mech1-1
15563: PPUSH
15564: CALL 4598 0 3
15568: GO 15629
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15570: LD_INT 22
15572: PUSH
15573: LD_INT 1
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 21
15582: PUSH
15583: LD_INT 1
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 26
15592: PUSH
15593: LD_INT 1
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: LIST
15604: PPUSH
15605: CALL_OW 69
15609: PUSH
15610: LD_EXP 1
15614: PUSH
15615: EMPTY
15616: LIST
15617: DIFF
15618: PPUSH
15619: LD_STRING D9a-Mech1-1
15621: PPUSH
15622: LD_STRING D9a-Mech1-1
15624: PPUSH
15625: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15629: LD_EXP 33
15633: PUSH
15634: LD_INT 0
15636: EQUAL
15637: IFFALSE 15643
// EnergyDialog ;
15639: CALL 5003 0 0
// end ; end ; end ;
15643: PPOPN 1
15645: END
// on UnitDestroyed ( unit ) do var mech ;
15646: LD_INT 0
15648: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15649: LD_VAR 0 1
15653: PPUSH
15654: CALL 35515 0 1
// if unit = JMM then
15658: LD_VAR 0 1
15662: PUSH
15663: LD_EXP 1
15667: EQUAL
15668: IFFALSE 15677
// YouLost ( JMM ) ;
15670: LD_STRING JMM
15672: PPUSH
15673: CALL_OW 104
// if unit = ambdept0 then
15677: LD_VAR 0 1
15681: PUSH
15682: LD_INT 4
15684: EQUAL
15685: IFFALSE 15694
// YouLost ( Base ) ;
15687: LD_STRING Base
15689: PPUSH
15690: CALL_OW 104
// if unit in ruMobile then
15694: LD_VAR 0 1
15698: PUSH
15699: LD_EXP 46
15703: IN
15704: IFFALSE 15722
// ruMobile = ruMobile diff ruMobile ;
15706: LD_ADDR_EXP 46
15710: PUSH
15711: LD_EXP 46
15715: PUSH
15716: LD_EXP 46
15720: DIFF
15721: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15722: LD_VAR 0 1
15726: PPUSH
15727: CALL_OW 247
15731: PUSH
15732: LD_INT 1
15734: EQUAL
15735: PUSH
15736: LD_VAR 0 1
15740: PPUSH
15741: CALL_OW 255
15745: PUSH
15746: LD_INT 1
15748: EQUAL
15749: AND
15750: IFFALSE 15766
// lostCounter = lostCounter + 1 ;
15752: LD_ADDR_EXP 38
15756: PUSH
15757: LD_EXP 38
15761: PUSH
15762: LD_INT 1
15764: PLUS
15765: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15766: LD_EXP 43
15770: PUSH
15771: LD_INT 24
15773: PPUSH
15774: CALL_OW 313
15778: PUSH
15779: LD_INT 6
15781: LESS
15782: AND
15783: PUSH
15784: LD_VAR 0 1
15788: PPUSH
15789: CALL_OW 257
15793: PUSH
15794: LD_INT 3
15796: EQUAL
15797: AND
15798: PUSH
15799: LD_VAR 0 1
15803: PPUSH
15804: CALL_OW 255
15808: PUSH
15809: LD_INT 3
15811: EQUAL
15812: AND
15813: PUSH
15814: LD_INT 24
15816: PPUSH
15817: CALL_OW 302
15821: AND
15822: PUSH
15823: LD_INT 24
15825: PPUSH
15826: CALL_OW 255
15830: PUSH
15831: LD_INT 3
15833: EQUAL
15834: AND
15835: IFFALSE 15964
// begin ruMech := ruMech - 1 ;
15837: LD_ADDR_EXP 43
15841: PUSH
15842: LD_EXP 43
15846: PUSH
15847: LD_INT 1
15849: MINUS
15850: ST_TO_ADDR
// if ruMech = 0 then
15851: LD_EXP 43
15855: PUSH
15856: LD_INT 0
15858: EQUAL
15859: IFFALSE 15863
// exit ;
15861: GO 15964
// wait ( 0 0$40 ) ;
15863: LD_INT 1400
15865: PPUSH
15866: CALL_OW 67
// uc_side = 3 ;
15870: LD_ADDR_OWVAR 20
15874: PUSH
15875: LD_INT 3
15877: ST_TO_ADDR
// uc_nation = 3 ;
15878: LD_ADDR_OWVAR 21
15882: PUSH
15883: LD_INT 3
15885: ST_TO_ADDR
// hc_gallery :=  ;
15886: LD_ADDR_OWVAR 33
15890: PUSH
15891: LD_STRING 
15893: ST_TO_ADDR
// hc_name :=  ;
15894: LD_ADDR_OWVAR 26
15898: PUSH
15899: LD_STRING 
15901: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15902: LD_INT 0
15904: PPUSH
15905: LD_EXP 16
15909: PPUSH
15910: LD_EXP 17
15914: PPUSH
15915: CALL_OW 12
15919: PPUSH
15920: CALL_OW 383
// mech := CreateHuman ;
15924: LD_ADDR_VAR 0 2
15928: PUSH
15929: CALL_OW 44
15933: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15934: LD_VAR 0 2
15938: PPUSH
15939: LD_INT 124
15941: PPUSH
15942: LD_INT 97
15944: PPUSH
15945: LD_INT 0
15947: PPUSH
15948: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
15952: LD_VAR 0 2
15956: PPUSH
15957: LD_INT 24
15959: PPUSH
15960: CALL_OW 120
// end ; end ;
15964: PPOPN 2
15966: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15967: LD_INT 0
15969: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15970: LD_VAR 0 1
15974: PPUSH
15975: LD_VAR 0 2
15979: PPUSH
15980: CALL 35635 0 2
// if GetSide ( vehicle ) = 1 then
15984: LD_VAR 0 1
15988: PPUSH
15989: CALL_OW 255
15993: PUSH
15994: LD_INT 1
15996: EQUAL
15997: IFFALSE 16013
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
15999: LD_ADDR_EXP 42
16003: PUSH
16004: LD_EXP 42
16008: PUSH
16009: LD_INT 1
16011: PLUS
16012: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16013: LD_VAR 0 1
16017: PPUSH
16018: CALL_OW 255
16022: PUSH
16023: LD_INT 3
16025: EQUAL
16026: PUSH
16027: LD_VAR 0 1
16031: PPUSH
16032: CALL_OW 264
16036: PUSH
16037: LD_INT 42
16039: PUSH
16040: LD_INT 43
16042: PUSH
16043: LD_INT 44
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: IN
16051: AND
16052: IFFALSE 16070
// ruMobile := ruMobile union vehicle ;
16054: LD_ADDR_EXP 46
16058: PUSH
16059: LD_EXP 46
16063: PUSH
16064: LD_VAR 0 1
16068: UNION
16069: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16070: LD_VAR 0 1
16074: PPUSH
16075: CALL_OW 264
16079: PUSH
16080: LD_INT 53
16082: EQUAL
16083: IFFALSE 16219
// begin uc_side = 3 ;
16085: LD_ADDR_OWVAR 20
16089: PUSH
16090: LD_INT 3
16092: ST_TO_ADDR
// uc_nation = 3 ;
16093: LD_ADDR_OWVAR 21
16097: PUSH
16098: LD_INT 3
16100: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16101: LD_INT 0
16103: PPUSH
16104: LD_EXP 17
16108: PPUSH
16109: CALL_OW 383
// driver := CreateHuman ;
16113: LD_ADDR_VAR 0 3
16117: PUSH
16118: CALL_OW 44
16122: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16123: LD_VAR 0 3
16127: PPUSH
16128: LD_VAR 0 2
16132: PPUSH
16133: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16137: LD_VAR 0 1
16141: PPUSH
16142: LD_INT 21
16144: PPUSH
16145: CALL 5219 0 2
// repeat wait ( 0 0$1 ) ;
16149: LD_INT 35
16151: PPUSH
16152: CALL_OW 67
// until not HasTask ( vehicle ) ;
16156: LD_VAR 0 1
16160: PPUSH
16161: CALL_OW 314
16165: NOT
16166: IFFALSE 16149
// driver := IsDrivenBy ( vehicle ) ;
16168: LD_ADDR_VAR 0 3
16172: PUSH
16173: LD_VAR 0 1
16177: PPUSH
16178: CALL_OW 311
16182: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16183: LD_VAR 0 3
16187: PPUSH
16188: LD_INT 104
16190: PPUSH
16191: LD_INT 73
16193: PPUSH
16194: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16198: LD_VAR 0 3
16202: PPUSH
16203: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16207: LD_VAR 0 3
16211: PPUSH
16212: LD_INT 24
16214: PPUSH
16215: CALL_OW 180
// end ; end ;
16219: PPOPN 3
16221: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16222: LD_VAR 0 1
16226: PPUSH
16227: CALL_OW 255
16231: PUSH
16232: LD_INT 3
16234: EQUAL
16235: PUSH
16236: LD_VAR 0 1
16240: PPUSH
16241: CALL_OW 247
16245: PUSH
16246: LD_INT 2
16248: EQUAL
16249: AND
16250: PUSH
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 264
16260: PUSH
16261: LD_INT 42
16263: PUSH
16264: LD_INT 43
16266: PUSH
16267: LD_INT 44
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: LIST
16274: IN
16275: AND
16276: IFFALSE 16325
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16278: LD_INT 24
16280: PPUSH
16281: LD_VAR 0 1
16285: PPUSH
16286: CALL_OW 265
16290: PPUSH
16291: LD_VAR 0 1
16295: PPUSH
16296: CALL_OW 262
16300: PPUSH
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 263
16310: PPUSH
16311: LD_VAR 0 1
16315: PPUSH
16316: CALL_OW 264
16320: PPUSH
16321: CALL_OW 185
// end ;
16325: PPOPN 1
16327: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16328: LD_VAR 0 1
16332: PPUSH
16333: CALL_OW 255
16337: PUSH
16338: LD_INT 3
16340: EQUAL
16341: PUSH
16342: LD_VAR 0 2
16346: PPUSH
16347: CALL_OW 255
16351: PUSH
16352: LD_INT 3
16354: EQUAL
16355: AND
16356: PUSH
16357: LD_INT 24
16359: PPUSH
16360: CALL_OW 302
16364: AND
16365: PUSH
16366: LD_VAR 0 1
16370: PPUSH
16371: CALL_OW 302
16375: NOT
16376: AND
16377: IFFALSE 16391
// ComEnterUnit ( human , rubfact0 ) ;
16379: LD_VAR 0 2
16383: PPUSH
16384: LD_INT 24
16386: PPUSH
16387: CALL_OW 120
// end ;
16391: PPOPN 2
16393: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16394: LD_VAR 0 1
16398: PUSH
16399: LD_INT 24
16401: EQUAL
16402: PUSH
16403: LD_VAR 0 2
16407: PPUSH
16408: CALL_OW 256
16412: PUSH
16413: LD_INT 1000
16415: LESS
16416: AND
16417: IFFALSE 16431
// SetLives ( un , 1000 ) ;
16419: LD_VAR 0 2
16423: PPUSH
16424: LD_INT 1000
16426: PPUSH
16427: CALL_OW 234
// end ;
16431: PPOPN 2
16433: END
// on Command ( comandid ) do var i , j , tmp ;
16434: LD_INT 0
16436: PPUSH
16437: PPUSH
16438: PPUSH
// begin SOS_Command ( comandid ) ;
16439: LD_VAR 0 1
16443: PPUSH
16444: CALL 35619 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16448: LD_INT 22
16450: PUSH
16451: LD_INT 4
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PPUSH
16458: CALL_OW 69
16462: NOT
16463: IFFALSE 16467
// exit ;
16465: GO 16632
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16467: LD_ADDR_VAR 0 2
16471: PUSH
16472: LD_INT 22
16474: PUSH
16475: LD_INT 1
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 2
16484: PUSH
16485: LD_INT 21
16487: PUSH
16488: LD_INT 1
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 21
16497: PUSH
16498: LD_INT 2
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: LIST
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PPUSH
16514: CALL_OW 69
16518: PUSH
16519: FOR_IN
16520: IFFALSE 16630
// begin if GetTaskList ( i ) > 0 then
16522: LD_VAR 0 2
16526: PPUSH
16527: CALL_OW 437
16531: PUSH
16532: LD_INT 0
16534: GREATER
16535: IFFALSE 16628
// begin for j = 1 to GetTaskList ( i ) do
16537: LD_ADDR_VAR 0 3
16541: PUSH
16542: DOUBLE
16543: LD_INT 1
16545: DEC
16546: ST_TO_ADDR
16547: LD_VAR 0 2
16551: PPUSH
16552: CALL_OW 437
16556: PUSH
16557: FOR_TO
16558: IFFALSE 16626
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16560: LD_ADDR_VAR 0 4
16564: PUSH
16565: LD_VAR 0 2
16569: PPUSH
16570: CALL_OW 437
16574: PUSH
16575: LD_VAR 0 3
16579: ARRAY
16580: PUSH
16581: LD_INT 4
16583: ARRAY
16584: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16585: LD_VAR 0 4
16589: PPUSH
16590: CALL_OW 255
16594: PUSH
16595: LD_INT 4
16597: EQUAL
16598: PUSH
16599: LD_VAR 0 4
16603: PPUSH
16604: CALL_OW 255
16608: PUSH
16609: LD_INT 0
16611: EQUAL
16612: OR
16613: IFFALSE 16624
// ComStop ( i ) ;
16615: LD_VAR 0 2
16619: PPUSH
16620: CALL_OW 141
// end ;
16624: GO 16557
16626: POP
16627: POP
// end ; end ;
16628: GO 16519
16630: POP
16631: POP
// end ; end_of_file
16632: PPOPN 4
16634: END
// every 10 10$0 do
16635: GO 16637
16637: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16638: LD_INT 5
16640: PPUSH
16641: LD_INT 3
16643: PPUSH
16644: LD_INT 2
16646: PUSH
16647: LD_INT 2
16649: PUSH
16650: LD_INT 3
16652: PUSH
16653: LD_INT 4
16655: PUSH
16656: LD_INT 4
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: PUSH
16665: LD_OWVAR 67
16669: ARRAY
16670: PLUS
16671: PPUSH
16672: LD_INT 0
16674: PPUSH
16675: LD_EXP 16
16679: PPUSH
16680: LD_EXP 17
16684: PPUSH
16685: CALL_OW 12
16689: PPUSH
16690: LD_INT 4
16692: PPUSH
16693: LD_INT 14
16695: PPUSH
16696: LD_INT 1
16698: PPUSH
16699: LD_INT 2
16701: PPUSH
16702: CALL 6960 0 9
16706: END
// every 20 20$0 do
16707: GO 16709
16709: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16710: LD_INT 5
16712: PPUSH
16713: LD_INT 3
16715: PPUSH
16716: LD_INT 4
16718: PUSH
16719: LD_INT 2
16721: PUSH
16722: LD_INT 3
16724: PUSH
16725: LD_INT 4
16727: PUSH
16728: LD_INT 5
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: PUSH
16737: LD_OWVAR 67
16741: ARRAY
16742: PLUS
16743: PPUSH
16744: LD_INT 2
16746: PPUSH
16747: LD_EXP 16
16751: PPUSH
16752: LD_EXP 17
16756: PPUSH
16757: CALL_OW 12
16761: PPUSH
16762: LD_INT 4
16764: PPUSH
16765: LD_INT 14
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: LD_INT 1
16773: PPUSH
16774: CALL 6960 0 9
16778: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16779: GO 16781
16781: DISABLE
16782: LD_INT 0
16784: PPUSH
16785: PPUSH
16786: PPUSH
16787: PPUSH
16788: PPUSH
// begin hex := [ 123 , 95 ] ;
16789: LD_ADDR_VAR 0 4
16793: PUSH
16794: LD_INT 123
16796: PUSH
16797: LD_INT 95
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: ST_TO_ADDR
// tmp := [ ] ;
16804: LD_ADDR_VAR 0 5
16808: PUSH
16809: EMPTY
16810: ST_TO_ADDR
// if Difficulty > 1 then
16811: LD_OWVAR 67
16815: PUSH
16816: LD_INT 1
16818: GREATER
16819: IFFALSE 16829
// specAttack := true ;
16821: LD_ADDR_EXP 47
16825: PUSH
16826: LD_INT 1
16828: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16829: LD_ADDR_VAR 0 1
16833: PUSH
16834: DOUBLE
16835: LD_INT 1
16837: DEC
16838: ST_TO_ADDR
16839: LD_INT 4
16841: PUSH
16842: LD_INT 5
16844: PUSH
16845: LD_INT 6
16847: PUSH
16848: LD_INT 7
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: PUSH
16857: LD_OWVAR 67
16861: ARRAY
16862: PUSH
16863: FOR_TO
16864: IFFALSE 17166
// begin uc_side := 5 ;
16866: LD_ADDR_OWVAR 20
16870: PUSH
16871: LD_INT 5
16873: ST_TO_ADDR
// uc_nation := 3 ;
16874: LD_ADDR_OWVAR 21
16878: PUSH
16879: LD_INT 3
16881: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16882: LD_ADDR_OWVAR 37
16886: PUSH
16887: LD_INT 21
16889: PUSH
16890: LD_INT 22
16892: PUSH
16893: LD_INT 23
16895: PUSH
16896: LD_INT 24
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: PUSH
16905: LD_VAR 0 1
16909: PUSH
16910: LD_OWVAR 67
16914: MOD
16915: PUSH
16916: LD_INT 1
16918: PLUS
16919: ARRAY
16920: ST_TO_ADDR
// vc_engine := engine_combustion ;
16921: LD_ADDR_OWVAR 39
16925: PUSH
16926: LD_INT 1
16928: ST_TO_ADDR
// vc_control := control_manual ;
16929: LD_ADDR_OWVAR 38
16933: PUSH
16934: LD_INT 1
16936: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16937: LD_ADDR_OWVAR 40
16941: PUSH
16942: LD_INT 42
16944: PUSH
16945: LD_INT 43
16947: PUSH
16948: LD_INT 44
16950: PUSH
16951: LD_INT 44
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: PUSH
16960: LD_VAR 0 1
16964: PUSH
16965: LD_OWVAR 67
16969: MOD
16970: PUSH
16971: LD_INT 1
16973: PLUS
16974: ARRAY
16975: ST_TO_ADDR
// veh := CreateVehicle ;
16976: LD_ADDR_VAR 0 3
16980: PUSH
16981: CALL_OW 45
16985: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
16986: LD_VAR 0 3
16990: PPUSH
16991: LD_INT 5
16993: PPUSH
16994: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
16998: LD_INT 35
17000: PPUSH
17001: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17005: LD_VAR 0 4
17009: PUSH
17010: LD_INT 1
17012: ARRAY
17013: PPUSH
17014: LD_VAR 0 4
17018: PUSH
17019: LD_INT 2
17021: ARRAY
17022: PPUSH
17023: CALL_OW 428
17027: PUSH
17028: LD_INT 0
17030: EQUAL
17031: IFFALSE 16998
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17033: LD_VAR 0 3
17037: PPUSH
17038: LD_VAR 0 4
17042: PUSH
17043: LD_INT 1
17045: ARRAY
17046: PPUSH
17047: LD_VAR 0 4
17051: PUSH
17052: LD_INT 2
17054: ARRAY
17055: PPUSH
17056: LD_INT 0
17058: PPUSH
17059: CALL_OW 48
// uc_side := 5 ;
17063: LD_ADDR_OWVAR 20
17067: PUSH
17068: LD_INT 5
17070: ST_TO_ADDR
// uc_nation := 3 ;
17071: LD_ADDR_OWVAR 21
17075: PUSH
17076: LD_INT 3
17078: ST_TO_ADDR
// InitHC_All ( ) ;
17079: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
17083: LD_INT 0
17085: PPUSH
17086: LD_INT 2
17088: PUSH
17089: LD_OWVAR 67
17093: PLUS
17094: PPUSH
17095: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17099: CALL_OW 44
17103: PPUSH
17104: LD_VAR 0 3
17108: PPUSH
17109: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17113: LD_VAR 0 3
17117: PPUSH
17118: LD_INT 101
17120: PPUSH
17121: LD_INT 77
17123: PPUSH
17124: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17128: LD_ADDR_VAR 0 5
17132: PUSH
17133: LD_VAR 0 5
17137: PPUSH
17138: LD_VAR 0 5
17142: PUSH
17143: LD_INT 1
17145: PLUS
17146: PPUSH
17147: LD_VAR 0 3
17151: PPUSH
17152: CALL_OW 1
17156: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17157: LD_INT 105
17159: PPUSH
17160: CALL_OW 67
// end ;
17164: GO 16863
17166: POP
17167: POP
// repeat wait ( 0 0$1 ) ;
17168: LD_INT 35
17170: PPUSH
17171: CALL_OW 67
// for i in tmp do
17175: LD_ADDR_VAR 0 1
17179: PUSH
17180: LD_VAR 0 5
17184: PUSH
17185: FOR_IN
17186: IFFALSE 17254
// if not IsOk ( i ) then
17188: LD_VAR 0 1
17192: PPUSH
17193: CALL_OW 302
17197: NOT
17198: IFFALSE 17218
// tmp := tmp diff i else
17200: LD_ADDR_VAR 0 5
17204: PUSH
17205: LD_VAR 0 5
17209: PUSH
17210: LD_VAR 0 1
17214: DIFF
17215: ST_TO_ADDR
17216: GO 17252
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17218: LD_VAR 0 1
17222: PPUSH
17223: LD_INT 22
17225: PUSH
17226: LD_INT 1
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: PPUSH
17238: LD_VAR 0 1
17242: PPUSH
17243: CALL_OW 74
17247: PPUSH
17248: CALL_OW 115
17252: GO 17185
17254: POP
17255: POP
// until not tmp ;
17256: LD_VAR 0 5
17260: NOT
17261: IFFALSE 17168
// end ;
17263: PPOPN 5
17265: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17266: LD_EXP 47
17270: IFFALSE 17648
17272: GO 17274
17274: DISABLE
17275: LD_INT 0
17277: PPUSH
17278: PPUSH
17279: PPUSH
17280: PPUSH
// begin wait ( 0 0$20 ) ;
17281: LD_INT 700
17283: PPUSH
17284: CALL_OW 67
// uc_side := 5 ;
17288: LD_ADDR_OWVAR 20
17292: PUSH
17293: LD_INT 5
17295: ST_TO_ADDR
// uc_nation := 3 ;
17296: LD_ADDR_OWVAR 21
17300: PUSH
17301: LD_INT 3
17303: ST_TO_ADDR
// InitHc ;
17304: CALL_OW 19
// hc_importance := 0 ;
17308: LD_ADDR_OWVAR 32
17312: PUSH
17313: LD_INT 0
17315: ST_TO_ADDR
// tmp := [ ] ;
17316: LD_ADDR_VAR 0 2
17320: PUSH
17321: EMPTY
17322: ST_TO_ADDR
// InitHC_All ( ) ;
17323: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17327: LD_INT 0
17329: PPUSH
17330: LD_INT 2
17332: PPUSH
17333: LD_INT 6
17335: PPUSH
17336: CALL_OW 380
// eng := CreateHuman ;
17340: LD_ADDR_VAR 0 4
17344: PUSH
17345: CALL_OW 44
17349: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17350: LD_VAR 0 4
17354: PPUSH
17355: LD_INT 78
17357: PPUSH
17358: LD_INT 2
17360: PPUSH
17361: LD_INT 4
17363: PPUSH
17364: LD_INT 0
17366: PPUSH
17367: CALL_OW 50
// for i = 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
17371: LD_ADDR_VAR 0 3
17375: PUSH
17376: DOUBLE
17377: LD_INT 1
17379: DEC
17380: ST_TO_ADDR
17381: LD_INT 3
17383: PUSH
17384: LD_INT 3
17386: PUSH
17387: LD_INT 4
17389: PUSH
17390: LD_INT 5
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: PUSH
17399: LD_OWVAR 67
17403: ARRAY
17404: PUSH
17405: FOR_TO
17406: IFFALSE 17495
// begin InitHC_All ( ) ;
17408: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17412: LD_INT 0
17414: PPUSH
17415: LD_INT 1
17417: PPUSH
17418: LD_INT 4
17420: PUSH
17421: LD_INT 5
17423: PUSH
17424: LD_INT 6
17426: PUSH
17427: LD_INT 6
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: PUSH
17436: LD_OWVAR 67
17440: ARRAY
17441: PPUSH
17442: CALL_OW 380
// un := CreateHuman ;
17446: LD_ADDR_VAR 0 1
17450: PUSH
17451: CALL_OW 44
17455: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17456: LD_VAR 0 1
17460: PPUSH
17461: LD_INT 78
17463: PPUSH
17464: LD_INT 2
17466: PPUSH
17467: LD_INT 4
17469: PPUSH
17470: LD_INT 0
17472: PPUSH
17473: CALL_OW 50
// tmp := tmp ^ un ;
17477: LD_ADDR_VAR 0 2
17481: PUSH
17482: LD_VAR 0 2
17486: PUSH
17487: LD_VAR 0 1
17491: ADD
17492: ST_TO_ADDR
// end ;
17493: GO 17405
17495: POP
17496: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17497: LD_VAR 0 2
17501: PPUSH
17502: LD_INT 49
17504: PPUSH
17505: LD_INT 3
17507: PPUSH
17508: CALL_OW 111
// wait ( 0 0$2 ) ;
17512: LD_INT 70
17514: PPUSH
17515: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17519: LD_VAR 0 4
17523: PPUSH
17524: LD_INT 49
17526: PPUSH
17527: LD_INT 3
17529: PPUSH
17530: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17534: LD_VAR 0 4
17538: PPUSH
17539: LD_INT 4
17541: PPUSH
17542: CALL_OW 227
// wait ( 0 0$10 ) ;
17546: LD_INT 350
17548: PPUSH
17549: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17553: LD_INT 35
17555: PPUSH
17556: CALL_OW 67
// for i in tmp do
17560: LD_ADDR_VAR 0 3
17564: PUSH
17565: LD_VAR 0 2
17569: PUSH
17570: FOR_IN
17571: IFFALSE 17639
// if not IsOk ( i ) then
17573: LD_VAR 0 3
17577: PPUSH
17578: CALL_OW 302
17582: NOT
17583: IFFALSE 17603
// tmp := tmp diff i else
17585: LD_ADDR_VAR 0 2
17589: PUSH
17590: LD_VAR 0 2
17594: PUSH
17595: LD_VAR 0 3
17599: DIFF
17600: ST_TO_ADDR
17601: GO 17637
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17603: LD_VAR 0 3
17607: PPUSH
17608: LD_INT 22
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PPUSH
17618: CALL_OW 69
17622: PPUSH
17623: LD_VAR 0 3
17627: PPUSH
17628: CALL_OW 74
17632: PPUSH
17633: CALL_OW 115
17637: GO 17570
17639: POP
17640: POP
// until not tmp ;
17641: LD_VAR 0 2
17645: NOT
17646: IFFALSE 17553
// end ; end_of_file
17648: PPOPN 4
17650: END
// every 0 0$1 trigger startTimer = 1 do
17651: LD_EXP 30
17655: PUSH
17656: LD_INT 1
17658: EQUAL
17659: IFFALSE 17789
17661: GO 17663
17663: DISABLE
// begin enable ;
17664: ENABLE
// if timerStatus = 1 then
17665: LD_EXP 29
17669: PUSH
17670: LD_INT 1
17672: EQUAL
17673: IFFALSE 17706
// begin timeToSupport = timeToSupport - 0 0$01 ;
17675: LD_ADDR_EXP 28
17679: PUSH
17680: LD_EXP 28
17684: PUSH
17685: LD_INT 35
17687: MINUS
17688: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17689: LD_ADDR_OWVAR 47
17693: PUSH
17694: LD_STRING #Am04-1
17696: PUSH
17697: LD_EXP 28
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: ST_TO_ADDR
// end ; if timerStatus = 2 then
17706: LD_EXP 29
17710: PUSH
17711: LD_INT 2
17713: EQUAL
17714: IFFALSE 17747
// begin timeToSupport = timeToSupport - 0 0$01 ;
17716: LD_ADDR_EXP 28
17720: PUSH
17721: LD_EXP 28
17725: PUSH
17726: LD_INT 35
17728: MINUS
17729: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17730: LD_ADDR_OWVAR 47
17734: PUSH
17735: LD_STRING #Am04-2
17737: PUSH
17738: LD_EXP 28
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: ST_TO_ADDR
// end ; if timerStatus = 3 then
17747: LD_EXP 29
17751: PUSH
17752: LD_INT 3
17754: EQUAL
17755: IFFALSE 17771
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17757: LD_ADDR_EXP 27
17761: PUSH
17762: LD_EXP 27
17766: PUSH
17767: LD_INT 35
17769: MINUS
17770: ST_TO_ADDR
// if timerStatus = 4 then
17771: LD_EXP 29
17775: PUSH
17776: LD_INT 4
17778: EQUAL
17779: IFFALSE 17789
// display_strings =  ;
17781: LD_ADDR_OWVAR 47
17785: PUSH
17786: LD_STRING 
17788: ST_TO_ADDR
// end ; end_of_file
17789: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17790: LD_EXP 15
17794: PPUSH
17795: CALL_OW 301
17799: PUSH
17800: LD_INT 22
17802: PUSH
17803: LD_INT 3
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 21
17812: PUSH
17813: LD_INT 1
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PPUSH
17824: CALL_OW 69
17828: PUSH
17829: LD_INT 14
17831: PUSH
17832: LD_INT 13
17834: PUSH
17835: LD_INT 12
17837: PUSH
17838: LD_INT 11
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: PUSH
17847: LD_OWVAR 67
17851: ARRAY
17852: LESS
17853: AND
17854: IFFALSE 18440
17856: GO 17858
17858: DISABLE
17859: LD_INT 0
17861: PPUSH
17862: PPUSH
17863: PPUSH
// begin AIEnable = 0 ;
17864: LD_ADDR_EXP 37
17868: PUSH
17869: LD_INT 0
17871: ST_TO_ADDR
// escapeAvalaible = 1 ;
17872: LD_ADDR_EXP 40
17876: PUSH
17877: LD_INT 1
17879: ST_TO_ADDR
// Video ( true ) ;
17880: LD_INT 1
17882: PPUSH
17883: CALL 77097 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17887: LD_INT 3
17889: PPUSH
17890: LD_INT 1
17892: PPUSH
17893: LD_INT 1
17895: PPUSH
17896: LD_INT 0
17898: PPUSH
17899: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17903: LD_INT 6
17905: PPUSH
17906: LD_INT 1
17908: PPUSH
17909: LD_INT 1
17911: PPUSH
17912: LD_INT 0
17914: PPUSH
17915: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17919: LD_INT 5
17921: PPUSH
17922: LD_INT 1
17924: PPUSH
17925: LD_INT 1
17927: PPUSH
17928: LD_INT 0
17930: PPUSH
17931: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17935: LD_INT 3
17937: PPUSH
17938: LD_INT 1
17940: PPUSH
17941: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17945: LD_INT 97
17947: PPUSH
17948: LD_INT 91
17950: PPUSH
17951: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17955: LD_INT 22
17957: PUSH
17958: LD_INT 3
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 21
17967: PUSH
17968: LD_INT 1
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PPUSH
17979: CALL_OW 69
17983: PPUSH
17984: CALL_OW 121
// wait ( 0 0$01 ) ;
17988: LD_INT 35
17990: PPUSH
17991: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17995: LD_INT 22
17997: PUSH
17998: LD_INT 3
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 21
18007: PUSH
18008: LD_INT 1
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PPUSH
18019: CALL_OW 69
18023: PPUSH
18024: LD_INT 124
18026: PPUSH
18027: LD_INT 98
18029: PPUSH
18030: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18034: LD_INT 22
18036: PUSH
18037: LD_INT 5
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 21
18046: PUSH
18047: LD_INT 1
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PPUSH
18058: CALL_OW 69
18062: PPUSH
18063: CALL_OW 121
// wait ( 0 0$01 ) ;
18067: LD_INT 35
18069: PPUSH
18070: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18074: LD_INT 22
18076: PUSH
18077: LD_INT 5
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 21
18086: PUSH
18087: LD_INT 1
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PPUSH
18098: CALL_OW 69
18102: PPUSH
18103: LD_INT 124
18105: PPUSH
18106: LD_INT 98
18108: PPUSH
18109: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18113: LD_INT 22
18115: PUSH
18116: LD_INT 6
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 21
18125: PUSH
18126: LD_INT 1
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 69
18141: PPUSH
18142: CALL_OW 121
// wait ( 0 0$01 ) ;
18146: LD_INT 35
18148: PPUSH
18149: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18153: LD_INT 22
18155: PUSH
18156: LD_INT 6
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 21
18165: PUSH
18166: LD_INT 1
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PPUSH
18177: CALL_OW 69
18181: PPUSH
18182: LD_INT 124
18184: PPUSH
18185: LD_INT 98
18187: PPUSH
18188: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18192: LD_INT 22
18194: PUSH
18195: LD_INT 1
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 21
18204: PUSH
18205: LD_INT 1
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: PPUSH
18221: LD_INT 124
18223: PPUSH
18224: LD_INT 96
18226: PPUSH
18227: CALL_OW 114
// wait ( 0 0$1 ) ;
18231: LD_INT 35
18233: PPUSH
18234: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18238: LD_INT 124
18240: PPUSH
18241: LD_INT 96
18243: PPUSH
18244: CALL_OW 84
// p := 0 0$0 ;
18248: LD_ADDR_VAR 0 3
18252: PUSH
18253: LD_INT 0
18255: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18256: LD_ADDR_VAR 0 2
18260: PUSH
18261: LD_INT 2
18263: PUSH
18264: LD_INT 22
18266: PUSH
18267: LD_INT 3
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 22
18276: PUSH
18277: LD_INT 6
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 21
18291: PUSH
18292: LD_INT 1
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PPUSH
18303: CALL_OW 69
18307: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18308: LD_INT 35
18310: PPUSH
18311: CALL_OW 67
// p := p + 0 0$1 ;
18315: LD_ADDR_VAR 0 3
18319: PUSH
18320: LD_VAR 0 3
18324: PUSH
18325: LD_INT 35
18327: PLUS
18328: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18329: LD_VAR 0 2
18333: PPUSH
18334: LD_INT 5
18336: PPUSH
18337: CALL_OW 113
// for i in tmp do
18341: LD_ADDR_VAR 0 1
18345: PUSH
18346: LD_VAR 0 2
18350: PUSH
18351: FOR_IN
18352: IFFALSE 18379
// if IsInArea ( tmp , RussianEscape ) then
18354: LD_VAR 0 2
18358: PPUSH
18359: LD_INT 5
18361: PPUSH
18362: CALL_OW 308
18366: IFFALSE 18377
// RemoveUnit ( i ) ;
18368: LD_VAR 0 1
18372: PPUSH
18373: CALL_OW 64
18377: GO 18351
18379: POP
18380: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18381: LD_INT 23
18383: PUSH
18384: LD_INT 3
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 21
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 24
18403: PUSH
18404: LD_INT 250
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: LIST
18415: PPUSH
18416: CALL_OW 69
18420: PUSH
18421: LD_INT 0
18423: EQUAL
18424: PUSH
18425: LD_VAR 0 3
18429: PUSH
18430: LD_INT 245
18432: GREATEREQUAL
18433: OR
18434: IFFALSE 18308
// FinishMission ;
18436: CALL 18443 0 0
// end ;
18440: PPOPN 3
18442: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18443: LD_INT 0
18445: PPUSH
18446: PPUSH
18447: PPUSH
18448: PPUSH
18449: PPUSH
// if not vehicleProduceCounter then
18450: LD_EXP 42
18454: NOT
18455: IFFALSE 18464
// SetAchievement ( ACH_INFANTRY ) ;
18457: LD_STRING ACH_INFANTRY
18459: PPUSH
18460: CALL_OW 543
// if tick <= 20 20$00 then
18464: LD_OWVAR 1
18468: PUSH
18469: LD_INT 42000
18471: LESSEQUAL
18472: IFFALSE 18488
// begin wait ( 3 ) ;
18474: LD_INT 3
18476: PPUSH
18477: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18481: LD_STRING ACH_ASPEED_4
18483: PPUSH
18484: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18488: LD_INT 22
18490: PPUSH
18491: CALL 19146 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18495: LD_INT 69
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: CALL_OW 321
18505: PPUSH
18506: LD_STRING GatlingInGamma
18508: PPUSH
18509: CALL_OW 39
// m1 := false ;
18513: LD_ADDR_VAR 0 3
18517: PUSH
18518: LD_INT 0
18520: ST_TO_ADDR
// m2 := false ;
18521: LD_ADDR_VAR 0 4
18525: PUSH
18526: LD_INT 0
18528: ST_TO_ADDR
// m3 := false ;
18529: LD_ADDR_VAR 0 5
18533: PUSH
18534: LD_INT 0
18536: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18537: LD_EXP 34
18541: PUSH
18542: LD_INT 1
18544: EQUAL
18545: PUSH
18546: LD_EXP 35
18550: PUSH
18551: LD_INT 1
18553: EQUAL
18554: AND
18555: IFFALSE 18577
// begin AddMedal ( oil , 1 ) ;
18557: LD_STRING oil
18559: PPUSH
18560: LD_INT 1
18562: PPUSH
18563: CALL_OW 101
// m1 := true ;
18567: LD_ADDR_VAR 0 3
18571: PUSH
18572: LD_INT 1
18574: ST_TO_ADDR
// end else
18575: GO 18670
// begin if buildOil = 1 and buildPower = 0 then
18577: LD_EXP 34
18581: PUSH
18582: LD_INT 1
18584: EQUAL
18585: PUSH
18586: LD_EXP 35
18590: PUSH
18591: LD_INT 0
18593: EQUAL
18594: AND
18595: IFFALSE 18608
// AddMedal ( oil , - 1 ) ;
18597: LD_STRING oil
18599: PPUSH
18600: LD_INT 1
18602: NEG
18603: PPUSH
18604: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18608: LD_EXP 34
18612: PUSH
18613: LD_INT 0
18615: EQUAL
18616: PUSH
18617: LD_EXP 35
18621: PUSH
18622: LD_INT 1
18624: EQUAL
18625: AND
18626: IFFALSE 18639
// AddMedal ( oil , - 2 ) ;
18628: LD_STRING oil
18630: PPUSH
18631: LD_INT 2
18633: NEG
18634: PPUSH
18635: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18639: LD_EXP 34
18643: PUSH
18644: LD_INT 0
18646: EQUAL
18647: PUSH
18648: LD_EXP 35
18652: PUSH
18653: LD_INT 0
18655: EQUAL
18656: AND
18657: IFFALSE 18670
// AddMedal ( oil , - 3 ) ;
18659: LD_STRING oil
18661: PPUSH
18662: LD_INT 3
18664: NEG
18665: PPUSH
18666: CALL_OW 101
// end ; if lostCounter > 3 then
18670: LD_EXP 38
18674: PUSH
18675: LD_INT 3
18677: GREATER
18678: IFFALSE 18693
// AddMedal ( deaths , - 1 ) else
18680: LD_STRING deaths
18682: PPUSH
18683: LD_INT 1
18685: NEG
18686: PPUSH
18687: CALL_OW 101
18691: GO 18711
// begin AddMedal ( deaths , 1 ) ;
18693: LD_STRING deaths
18695: PPUSH
18696: LD_INT 1
18698: PPUSH
18699: CALL_OW 101
// m2 := true ;
18703: LD_ADDR_VAR 0 4
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// end ; if honor = 1 then
18711: LD_EXP 39
18715: PUSH
18716: LD_INT 1
18718: EQUAL
18719: IFFALSE 18741
// begin AddMedal ( honour , 1 ) ;
18721: LD_STRING honour
18723: PPUSH
18724: LD_INT 1
18726: PPUSH
18727: CALL_OW 101
// m3 := true ;
18731: LD_ADDR_VAR 0 5
18735: PUSH
18736: LD_INT 1
18738: ST_TO_ADDR
// end else
18739: GO 18752
// AddMedal ( honour , - 1 ) ;
18741: LD_STRING honour
18743: PPUSH
18744: LD_INT 1
18746: NEG
18747: PPUSH
18748: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18752: LD_VAR 0 3
18756: PUSH
18757: LD_VAR 0 4
18761: AND
18762: PUSH
18763: LD_VAR 0 5
18767: AND
18768: PUSH
18769: LD_OWVAR 67
18773: PUSH
18774: LD_INT 3
18776: GREATEREQUAL
18777: AND
18778: IFFALSE 18790
// SetAchievementEX ( ACH_AMER , 4 ) ;
18780: LD_STRING ACH_AMER
18782: PPUSH
18783: LD_INT 4
18785: PPUSH
18786: CALL_OW 564
// GiveMedals ( Main ) ;
18790: LD_STRING Main
18792: PPUSH
18793: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18797: LD_INT 22
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 23
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 21
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: LIST
18831: PPUSH
18832: CALL_OW 69
18836: PPUSH
18837: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18841: LD_EXP 1
18845: PPUSH
18846: LD_EXP 48
18850: PUSH
18851: LD_STRING JMM
18853: STR
18854: PPUSH
18855: CALL_OW 38
// if IsOK ( Bobby ) then
18859: LD_EXP 2
18863: PPUSH
18864: CALL_OW 302
18868: IFFALSE 18888
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18870: LD_EXP 2
18874: PPUSH
18875: LD_EXP 48
18879: PUSH
18880: LD_STRING Bobby
18882: STR
18883: PPUSH
18884: CALL_OW 38
// if IsOK ( Cyrus ) then
18888: LD_EXP 3
18892: PPUSH
18893: CALL_OW 302
18897: IFFALSE 18917
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18899: LD_EXP 3
18903: PPUSH
18904: LD_EXP 48
18908: PUSH
18909: LD_STRING Cyrus
18911: STR
18912: PPUSH
18913: CALL_OW 38
// if IsOK ( Lisa ) then
18917: LD_EXP 4
18921: PPUSH
18922: CALL_OW 302
18926: IFFALSE 18946
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18928: LD_EXP 4
18932: PPUSH
18933: LD_EXP 48
18937: PUSH
18938: LD_STRING Lisa
18940: STR
18941: PPUSH
18942: CALL_OW 38
// if IsOK ( Brown ) then
18946: LD_EXP 7
18950: PPUSH
18951: CALL_OW 302
18955: IFFALSE 18982
// begin ToLua ( enableBioCharacter(BIO_JEFF) ) ;
18957: LD_STRING enableBioCharacter(BIO_JEFF)
18959: PPUSH
18960: CALL_OW 559
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18964: LD_EXP 7
18968: PPUSH
18969: LD_EXP 48
18973: PUSH
18974: LD_STRING Brown
18976: STR
18977: PPUSH
18978: CALL_OW 38
// end ; if not IsDead ( Donaldson ) then
18982: LD_EXP 13
18986: PPUSH
18987: CALL_OW 301
18991: NOT
18992: IFFALSE 19019
// begin ToLua ( enableBioCharacter(BIO_LUCY) ) ;
18994: LD_STRING enableBioCharacter(BIO_LUCY)
18996: PPUSH
18997: CALL_OW 559
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19001: LD_EXP 13
19005: PPUSH
19006: LD_EXP 48
19010: PUSH
19011: LD_STRING Donaldson
19013: STR
19014: PPUSH
19015: CALL_OW 38
// end ; if not IsDead ( Frank ) then
19019: LD_EXP 5
19023: PPUSH
19024: CALL_OW 301
19028: NOT
19029: IFFALSE 19049
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19031: LD_EXP 5
19035: PPUSH
19036: LD_EXP 48
19040: PUSH
19041: LD_STRING Frank
19043: STR
19044: PPUSH
19045: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19049: LD_INT 50
19051: PUSH
19052: EMPTY
19053: LIST
19054: PUSH
19055: LD_INT 22
19057: PUSH
19058: LD_INT 1
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 21
19067: PUSH
19068: LD_INT 1
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: LIST
19079: PPUSH
19080: CALL_OW 69
19084: PUSH
19085: LD_EXP 1
19089: PUSH
19090: LD_EXP 2
19094: PUSH
19095: LD_EXP 3
19099: PUSH
19100: LD_EXP 4
19104: PUSH
19105: LD_EXP 7
19109: PUSH
19110: LD_EXP 13
19114: PUSH
19115: LD_EXP 5
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: DIFF
19129: PPUSH
19130: LD_STRING 04_other_survivors
19132: PPUSH
19133: CALL_OW 38
// YouWin ;
19137: CALL_OW 103
// end ;
19141: LD_VAR 0 1
19145: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19146: LD_INT 0
19148: PPUSH
19149: PPUSH
19150: PPUSH
19151: PPUSH
// gammaBase = [ ] ;
19152: LD_ADDR_VAR 0 4
19156: PUSH
19157: EMPTY
19158: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19159: LD_ADDR_VAR 0 5
19163: PUSH
19164: LD_VAR 0 1
19168: PPUSH
19169: LD_INT 22
19171: PUSH
19172: LD_INT 1
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 21
19181: PUSH
19182: LD_INT 3
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PPUSH
19193: CALL_OW 70
19197: ST_TO_ADDR
// for i in buildings do
19198: LD_ADDR_VAR 0 3
19202: PUSH
19203: LD_VAR 0 5
19207: PUSH
19208: FOR_IN
19209: IFFALSE 19546
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19211: LD_VAR 0 3
19215: PPUSH
19216: CALL_OW 266
19220: PUSH
19221: LD_INT 6
19223: PUSH
19224: LD_INT 7
19226: PUSH
19227: LD_INT 8
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: LIST
19234: IN
19235: IFFALSE 19349
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19237: LD_ADDR_VAR 0 4
19241: PUSH
19242: LD_VAR 0 4
19246: PUSH
19247: LD_VAR 0 3
19251: PPUSH
19252: CALL_OW 266
19256: PUSH
19257: LD_VAR 0 3
19261: PPUSH
19262: CALL_OW 250
19266: PUSH
19267: LD_VAR 0 3
19271: PPUSH
19272: CALL_OW 251
19276: PUSH
19277: LD_VAR 0 3
19281: PPUSH
19282: CALL_OW 254
19286: PUSH
19287: LD_VAR 0 3
19291: PPUSH
19292: CALL_OW 267
19296: PUSH
19297: LD_VAR 0 3
19301: PPUSH
19302: CALL_OW 248
19306: PUSH
19307: LD_VAR 0 3
19311: PPUSH
19312: LD_INT 1
19314: PPUSH
19315: CALL_OW 268
19319: PUSH
19320: LD_VAR 0 3
19324: PPUSH
19325: LD_INT 2
19327: PPUSH
19328: CALL_OW 268
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: PUSH
19343: EMPTY
19344: LIST
19345: ADD
19346: ST_TO_ADDR
19347: GO 19544
// if GetBType ( i ) in [ b_bunker ] then
19349: LD_VAR 0 3
19353: PPUSH
19354: CALL_OW 266
19358: PUSH
19359: LD_INT 32
19361: PUSH
19362: EMPTY
19363: LIST
19364: IN
19365: IFFALSE 19462
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19367: LD_ADDR_VAR 0 4
19371: PUSH
19372: LD_VAR 0 4
19376: PUSH
19377: LD_VAR 0 3
19381: PPUSH
19382: CALL_OW 266
19386: PUSH
19387: LD_VAR 0 3
19391: PPUSH
19392: CALL_OW 250
19396: PUSH
19397: LD_VAR 0 3
19401: PPUSH
19402: CALL_OW 251
19406: PUSH
19407: LD_VAR 0 3
19411: PPUSH
19412: CALL_OW 254
19416: PUSH
19417: LD_VAR 0 3
19421: PPUSH
19422: CALL_OW 267
19426: PUSH
19427: LD_VAR 0 3
19431: PPUSH
19432: CALL_OW 248
19436: PUSH
19437: LD_VAR 0 3
19441: PPUSH
19442: CALL_OW 269
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: PUSH
19456: EMPTY
19457: LIST
19458: ADD
19459: ST_TO_ADDR
19460: GO 19544
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19462: LD_ADDR_VAR 0 4
19466: PUSH
19467: LD_VAR 0 4
19471: PUSH
19472: LD_VAR 0 3
19476: PPUSH
19477: CALL_OW 266
19481: PUSH
19482: LD_VAR 0 3
19486: PPUSH
19487: CALL_OW 250
19491: PUSH
19492: LD_VAR 0 3
19496: PPUSH
19497: CALL_OW 251
19501: PUSH
19502: LD_VAR 0 3
19506: PPUSH
19507: CALL_OW 254
19511: PUSH
19512: LD_VAR 0 3
19516: PPUSH
19517: CALL_OW 267
19521: PUSH
19522: LD_VAR 0 3
19526: PPUSH
19527: CALL_OW 248
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: PUSH
19540: EMPTY
19541: LIST
19542: ADD
19543: ST_TO_ADDR
// end ;
19544: GO 19208
19546: POP
19547: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19548: LD_VAR 0 4
19552: PPUSH
19553: LD_STRING GammaBase
19555: PPUSH
19556: CALL_OW 39
// end ; end_of_file
19560: LD_VAR 0 2
19564: RET
// every 1 1$15 do
19565: GO 19567
19567: DISABLE
// begin if supply <= 13 and supply > 7 then
19568: LD_EXP 36
19572: PUSH
19573: LD_INT 13
19575: LESSEQUAL
19576: PUSH
19577: LD_EXP 36
19581: PUSH
19582: LD_INT 7
19584: GREATER
19585: AND
19586: IFFALSE 19609
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19588: LD_INT 3
19590: PPUSH
19591: LD_INT 5
19593: PPUSH
19594: CALL_OW 12
19598: PPUSH
19599: LD_INT 18
19601: PPUSH
19602: LD_INT 1
19604: PPUSH
19605: CALL_OW 55
// if supply <= 7 and supply > 4 then
19609: LD_EXP 36
19613: PUSH
19614: LD_INT 7
19616: LESSEQUAL
19617: PUSH
19618: LD_EXP 36
19622: PUSH
19623: LD_INT 4
19625: GREATER
19626: AND
19627: IFFALSE 19650
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19629: LD_INT 3
19631: PPUSH
19632: LD_INT 5
19634: PPUSH
19635: CALL_OW 12
19639: PPUSH
19640: LD_INT 19
19642: PPUSH
19643: LD_INT 1
19645: PPUSH
19646: CALL_OW 55
// if supply <= 4 and supply > 0 then
19650: LD_EXP 36
19654: PUSH
19655: LD_INT 4
19657: LESSEQUAL
19658: PUSH
19659: LD_EXP 36
19663: PUSH
19664: LD_INT 0
19666: GREATER
19667: AND
19668: IFFALSE 19691
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19670: LD_INT 3
19672: PPUSH
19673: LD_INT 5
19675: PPUSH
19676: CALL_OW 12
19680: PPUSH
19681: LD_INT 20
19683: PPUSH
19684: LD_INT 1
19686: PPUSH
19687: CALL_OW 55
// if supply then
19691: LD_EXP 36
19695: IFFALSE 19712
// begin supply = supply - 1 ;
19697: LD_ADDR_EXP 36
19701: PUSH
19702: LD_EXP 36
19706: PUSH
19707: LD_INT 1
19709: MINUS
19710: ST_TO_ADDR
// enable ;
19711: ENABLE
// end ; end ; end_of_file end_of_file
19712: END
// export globalGameSaveCounter ; every 0 0$1 do
19713: GO 19715
19715: DISABLE
// begin enable ;
19716: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19717: LD_STRING updateTimer(
19719: PUSH
19720: LD_OWVAR 1
19724: STR
19725: PUSH
19726: LD_STRING );
19728: STR
19729: PPUSH
19730: CALL_OW 559
// end ;
19734: END
// every 0 0$1 do
19735: GO 19737
19737: DISABLE
// begin globalGameSaveCounter := 0 ;
19738: LD_ADDR_EXP 50
19742: PUSH
19743: LD_INT 0
19745: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19746: LD_STRING setGameSaveCounter(0)
19748: PPUSH
19749: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19753: LD_STRING initStreamRollete();
19755: PPUSH
19756: CALL_OW 559
// InitStreamMode ;
19760: CALL 21086 0 0
// DefineStreamItems ( false ) ;
19764: LD_INT 0
19766: PPUSH
19767: CALL 21550 0 1
// end ;
19771: END
// export function SOS_MapStart ( ) ; begin
19772: LD_INT 0
19774: PPUSH
// if streamModeActive then
19775: LD_EXP 51
19779: IFFALSE 19788
// DefineStreamItems ( true ) ;
19781: LD_INT 1
19783: PPUSH
19784: CALL 21550 0 1
// UpdateLuaVariables ( ) ;
19788: CALL 19805 0 0
// UpdateFactoryWaypoints ( ) ;
19792: CALL 34419 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19796: CALL 34676 0 0
// end ;
19800: LD_VAR 0 1
19804: RET
// function UpdateLuaVariables ( ) ; begin
19805: LD_INT 0
19807: PPUSH
// if globalGameSaveCounter then
19808: LD_EXP 50
19812: IFFALSE 19846
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19814: LD_ADDR_EXP 50
19818: PUSH
19819: LD_EXP 50
19823: PPUSH
19824: CALL 78486 0 1
19828: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19829: LD_STRING setGameSaveCounter(
19831: PUSH
19832: LD_EXP 50
19836: STR
19837: PUSH
19838: LD_STRING )
19840: STR
19841: PPUSH
19842: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19846: LD_STRING setGameDifficulty(
19848: PUSH
19849: LD_OWVAR 67
19853: STR
19854: PUSH
19855: LD_STRING )
19857: STR
19858: PPUSH
19859: CALL_OW 559
// end ;
19863: LD_VAR 0 1
19867: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19868: LD_INT 0
19870: PPUSH
// if p2 = stream_mode then
19871: LD_VAR 0 2
19875: PUSH
19876: LD_INT 100
19878: EQUAL
19879: IFFALSE 20882
// begin if not StreamModeActive then
19881: LD_EXP 51
19885: NOT
19886: IFFALSE 19896
// StreamModeActive := true ;
19888: LD_ADDR_EXP 51
19892: PUSH
19893: LD_INT 1
19895: ST_TO_ADDR
// if p3 = 0 then
19896: LD_VAR 0 3
19900: PUSH
19901: LD_INT 0
19903: EQUAL
19904: IFFALSE 19910
// InitStreamMode ;
19906: CALL 21086 0 0
// if p3 = 1 then
19910: LD_VAR 0 3
19914: PUSH
19915: LD_INT 1
19917: EQUAL
19918: IFFALSE 19928
// sRocket := true ;
19920: LD_ADDR_EXP 56
19924: PUSH
19925: LD_INT 1
19927: ST_TO_ADDR
// if p3 = 2 then
19928: LD_VAR 0 3
19932: PUSH
19933: LD_INT 2
19935: EQUAL
19936: IFFALSE 19946
// sSpeed := true ;
19938: LD_ADDR_EXP 55
19942: PUSH
19943: LD_INT 1
19945: ST_TO_ADDR
// if p3 = 3 then
19946: LD_VAR 0 3
19950: PUSH
19951: LD_INT 3
19953: EQUAL
19954: IFFALSE 19964
// sEngine := true ;
19956: LD_ADDR_EXP 57
19960: PUSH
19961: LD_INT 1
19963: ST_TO_ADDR
// if p3 = 4 then
19964: LD_VAR 0 3
19968: PUSH
19969: LD_INT 4
19971: EQUAL
19972: IFFALSE 19982
// sSpec := true ;
19974: LD_ADDR_EXP 54
19978: PUSH
19979: LD_INT 1
19981: ST_TO_ADDR
// if p3 = 5 then
19982: LD_VAR 0 3
19986: PUSH
19987: LD_INT 5
19989: EQUAL
19990: IFFALSE 20000
// sLevel := true ;
19992: LD_ADDR_EXP 58
19996: PUSH
19997: LD_INT 1
19999: ST_TO_ADDR
// if p3 = 6 then
20000: LD_VAR 0 3
20004: PUSH
20005: LD_INT 6
20007: EQUAL
20008: IFFALSE 20018
// sArmoury := true ;
20010: LD_ADDR_EXP 59
20014: PUSH
20015: LD_INT 1
20017: ST_TO_ADDR
// if p3 = 7 then
20018: LD_VAR 0 3
20022: PUSH
20023: LD_INT 7
20025: EQUAL
20026: IFFALSE 20036
// sRadar := true ;
20028: LD_ADDR_EXP 60
20032: PUSH
20033: LD_INT 1
20035: ST_TO_ADDR
// if p3 = 8 then
20036: LD_VAR 0 3
20040: PUSH
20041: LD_INT 8
20043: EQUAL
20044: IFFALSE 20054
// sBunker := true ;
20046: LD_ADDR_EXP 61
20050: PUSH
20051: LD_INT 1
20053: ST_TO_ADDR
// if p3 = 9 then
20054: LD_VAR 0 3
20058: PUSH
20059: LD_INT 9
20061: EQUAL
20062: IFFALSE 20072
// sHack := true ;
20064: LD_ADDR_EXP 62
20068: PUSH
20069: LD_INT 1
20071: ST_TO_ADDR
// if p3 = 10 then
20072: LD_VAR 0 3
20076: PUSH
20077: LD_INT 10
20079: EQUAL
20080: IFFALSE 20090
// sFire := true ;
20082: LD_ADDR_EXP 63
20086: PUSH
20087: LD_INT 1
20089: ST_TO_ADDR
// if p3 = 11 then
20090: LD_VAR 0 3
20094: PUSH
20095: LD_INT 11
20097: EQUAL
20098: IFFALSE 20108
// sRefresh := true ;
20100: LD_ADDR_EXP 64
20104: PUSH
20105: LD_INT 1
20107: ST_TO_ADDR
// if p3 = 12 then
20108: LD_VAR 0 3
20112: PUSH
20113: LD_INT 12
20115: EQUAL
20116: IFFALSE 20126
// sExp := true ;
20118: LD_ADDR_EXP 65
20122: PUSH
20123: LD_INT 1
20125: ST_TO_ADDR
// if p3 = 13 then
20126: LD_VAR 0 3
20130: PUSH
20131: LD_INT 13
20133: EQUAL
20134: IFFALSE 20144
// sDepot := true ;
20136: LD_ADDR_EXP 66
20140: PUSH
20141: LD_INT 1
20143: ST_TO_ADDR
// if p3 = 14 then
20144: LD_VAR 0 3
20148: PUSH
20149: LD_INT 14
20151: EQUAL
20152: IFFALSE 20162
// sFlag := true ;
20154: LD_ADDR_EXP 67
20158: PUSH
20159: LD_INT 1
20161: ST_TO_ADDR
// if p3 = 15 then
20162: LD_VAR 0 3
20166: PUSH
20167: LD_INT 15
20169: EQUAL
20170: IFFALSE 20180
// sKamikadze := true ;
20172: LD_ADDR_EXP 75
20176: PUSH
20177: LD_INT 1
20179: ST_TO_ADDR
// if p3 = 16 then
20180: LD_VAR 0 3
20184: PUSH
20185: LD_INT 16
20187: EQUAL
20188: IFFALSE 20198
// sTroll := true ;
20190: LD_ADDR_EXP 76
20194: PUSH
20195: LD_INT 1
20197: ST_TO_ADDR
// if p3 = 17 then
20198: LD_VAR 0 3
20202: PUSH
20203: LD_INT 17
20205: EQUAL
20206: IFFALSE 20216
// sSlow := true ;
20208: LD_ADDR_EXP 77
20212: PUSH
20213: LD_INT 1
20215: ST_TO_ADDR
// if p3 = 18 then
20216: LD_VAR 0 3
20220: PUSH
20221: LD_INT 18
20223: EQUAL
20224: IFFALSE 20234
// sLack := true ;
20226: LD_ADDR_EXP 78
20230: PUSH
20231: LD_INT 1
20233: ST_TO_ADDR
// if p3 = 19 then
20234: LD_VAR 0 3
20238: PUSH
20239: LD_INT 19
20241: EQUAL
20242: IFFALSE 20252
// sTank := true ;
20244: LD_ADDR_EXP 80
20248: PUSH
20249: LD_INT 1
20251: ST_TO_ADDR
// if p3 = 20 then
20252: LD_VAR 0 3
20256: PUSH
20257: LD_INT 20
20259: EQUAL
20260: IFFALSE 20270
// sRemote := true ;
20262: LD_ADDR_EXP 81
20266: PUSH
20267: LD_INT 1
20269: ST_TO_ADDR
// if p3 = 21 then
20270: LD_VAR 0 3
20274: PUSH
20275: LD_INT 21
20277: EQUAL
20278: IFFALSE 20288
// sPowell := true ;
20280: LD_ADDR_EXP 82
20284: PUSH
20285: LD_INT 1
20287: ST_TO_ADDR
// if p3 = 22 then
20288: LD_VAR 0 3
20292: PUSH
20293: LD_INT 22
20295: EQUAL
20296: IFFALSE 20306
// sTeleport := true ;
20298: LD_ADDR_EXP 85
20302: PUSH
20303: LD_INT 1
20305: ST_TO_ADDR
// if p3 = 23 then
20306: LD_VAR 0 3
20310: PUSH
20311: LD_INT 23
20313: EQUAL
20314: IFFALSE 20324
// sOilTower := true ;
20316: LD_ADDR_EXP 87
20320: PUSH
20321: LD_INT 1
20323: ST_TO_ADDR
// if p3 = 24 then
20324: LD_VAR 0 3
20328: PUSH
20329: LD_INT 24
20331: EQUAL
20332: IFFALSE 20342
// sShovel := true ;
20334: LD_ADDR_EXP 88
20338: PUSH
20339: LD_INT 1
20341: ST_TO_ADDR
// if p3 = 25 then
20342: LD_VAR 0 3
20346: PUSH
20347: LD_INT 25
20349: EQUAL
20350: IFFALSE 20360
// sSheik := true ;
20352: LD_ADDR_EXP 89
20356: PUSH
20357: LD_INT 1
20359: ST_TO_ADDR
// if p3 = 26 then
20360: LD_VAR 0 3
20364: PUSH
20365: LD_INT 26
20367: EQUAL
20368: IFFALSE 20378
// sEarthquake := true ;
20370: LD_ADDR_EXP 91
20374: PUSH
20375: LD_INT 1
20377: ST_TO_ADDR
// if p3 = 27 then
20378: LD_VAR 0 3
20382: PUSH
20383: LD_INT 27
20385: EQUAL
20386: IFFALSE 20396
// sAI := true ;
20388: LD_ADDR_EXP 92
20392: PUSH
20393: LD_INT 1
20395: ST_TO_ADDR
// if p3 = 28 then
20396: LD_VAR 0 3
20400: PUSH
20401: LD_INT 28
20403: EQUAL
20404: IFFALSE 20414
// sCargo := true ;
20406: LD_ADDR_EXP 95
20410: PUSH
20411: LD_INT 1
20413: ST_TO_ADDR
// if p3 = 29 then
20414: LD_VAR 0 3
20418: PUSH
20419: LD_INT 29
20421: EQUAL
20422: IFFALSE 20432
// sDLaser := true ;
20424: LD_ADDR_EXP 96
20428: PUSH
20429: LD_INT 1
20431: ST_TO_ADDR
// if p3 = 30 then
20432: LD_VAR 0 3
20436: PUSH
20437: LD_INT 30
20439: EQUAL
20440: IFFALSE 20450
// sExchange := true ;
20442: LD_ADDR_EXP 97
20446: PUSH
20447: LD_INT 1
20449: ST_TO_ADDR
// if p3 = 31 then
20450: LD_VAR 0 3
20454: PUSH
20455: LD_INT 31
20457: EQUAL
20458: IFFALSE 20468
// sFac := true ;
20460: LD_ADDR_EXP 98
20464: PUSH
20465: LD_INT 1
20467: ST_TO_ADDR
// if p3 = 32 then
20468: LD_VAR 0 3
20472: PUSH
20473: LD_INT 32
20475: EQUAL
20476: IFFALSE 20486
// sPower := true ;
20478: LD_ADDR_EXP 99
20482: PUSH
20483: LD_INT 1
20485: ST_TO_ADDR
// if p3 = 33 then
20486: LD_VAR 0 3
20490: PUSH
20491: LD_INT 33
20493: EQUAL
20494: IFFALSE 20504
// sRandom := true ;
20496: LD_ADDR_EXP 100
20500: PUSH
20501: LD_INT 1
20503: ST_TO_ADDR
// if p3 = 34 then
20504: LD_VAR 0 3
20508: PUSH
20509: LD_INT 34
20511: EQUAL
20512: IFFALSE 20522
// sShield := true ;
20514: LD_ADDR_EXP 101
20518: PUSH
20519: LD_INT 1
20521: ST_TO_ADDR
// if p3 = 35 then
20522: LD_VAR 0 3
20526: PUSH
20527: LD_INT 35
20529: EQUAL
20530: IFFALSE 20540
// sTime := true ;
20532: LD_ADDR_EXP 102
20536: PUSH
20537: LD_INT 1
20539: ST_TO_ADDR
// if p3 = 36 then
20540: LD_VAR 0 3
20544: PUSH
20545: LD_INT 36
20547: EQUAL
20548: IFFALSE 20558
// sTools := true ;
20550: LD_ADDR_EXP 103
20554: PUSH
20555: LD_INT 1
20557: ST_TO_ADDR
// if p3 = 101 then
20558: LD_VAR 0 3
20562: PUSH
20563: LD_INT 101
20565: EQUAL
20566: IFFALSE 20576
// sSold := true ;
20568: LD_ADDR_EXP 68
20572: PUSH
20573: LD_INT 1
20575: ST_TO_ADDR
// if p3 = 102 then
20576: LD_VAR 0 3
20580: PUSH
20581: LD_INT 102
20583: EQUAL
20584: IFFALSE 20594
// sDiff := true ;
20586: LD_ADDR_EXP 69
20590: PUSH
20591: LD_INT 1
20593: ST_TO_ADDR
// if p3 = 103 then
20594: LD_VAR 0 3
20598: PUSH
20599: LD_INT 103
20601: EQUAL
20602: IFFALSE 20612
// sFog := true ;
20604: LD_ADDR_EXP 72
20608: PUSH
20609: LD_INT 1
20611: ST_TO_ADDR
// if p3 = 104 then
20612: LD_VAR 0 3
20616: PUSH
20617: LD_INT 104
20619: EQUAL
20620: IFFALSE 20630
// sReset := true ;
20622: LD_ADDR_EXP 73
20626: PUSH
20627: LD_INT 1
20629: ST_TO_ADDR
// if p3 = 105 then
20630: LD_VAR 0 3
20634: PUSH
20635: LD_INT 105
20637: EQUAL
20638: IFFALSE 20648
// sSun := true ;
20640: LD_ADDR_EXP 74
20644: PUSH
20645: LD_INT 1
20647: ST_TO_ADDR
// if p3 = 106 then
20648: LD_VAR 0 3
20652: PUSH
20653: LD_INT 106
20655: EQUAL
20656: IFFALSE 20666
// sTiger := true ;
20658: LD_ADDR_EXP 70
20662: PUSH
20663: LD_INT 1
20665: ST_TO_ADDR
// if p3 = 107 then
20666: LD_VAR 0 3
20670: PUSH
20671: LD_INT 107
20673: EQUAL
20674: IFFALSE 20684
// sBomb := true ;
20676: LD_ADDR_EXP 71
20680: PUSH
20681: LD_INT 1
20683: ST_TO_ADDR
// if p3 = 108 then
20684: LD_VAR 0 3
20688: PUSH
20689: LD_INT 108
20691: EQUAL
20692: IFFALSE 20702
// sWound := true ;
20694: LD_ADDR_EXP 79
20698: PUSH
20699: LD_INT 1
20701: ST_TO_ADDR
// if p3 = 109 then
20702: LD_VAR 0 3
20706: PUSH
20707: LD_INT 109
20709: EQUAL
20710: IFFALSE 20720
// sBetray := true ;
20712: LD_ADDR_EXP 83
20716: PUSH
20717: LD_INT 1
20719: ST_TO_ADDR
// if p3 = 110 then
20720: LD_VAR 0 3
20724: PUSH
20725: LD_INT 110
20727: EQUAL
20728: IFFALSE 20738
// sContamin := true ;
20730: LD_ADDR_EXP 84
20734: PUSH
20735: LD_INT 1
20737: ST_TO_ADDR
// if p3 = 111 then
20738: LD_VAR 0 3
20742: PUSH
20743: LD_INT 111
20745: EQUAL
20746: IFFALSE 20756
// sOil := true ;
20748: LD_ADDR_EXP 86
20752: PUSH
20753: LD_INT 1
20755: ST_TO_ADDR
// if p3 = 112 then
20756: LD_VAR 0 3
20760: PUSH
20761: LD_INT 112
20763: EQUAL
20764: IFFALSE 20774
// sStu := true ;
20766: LD_ADDR_EXP 90
20770: PUSH
20771: LD_INT 1
20773: ST_TO_ADDR
// if p3 = 113 then
20774: LD_VAR 0 3
20778: PUSH
20779: LD_INT 113
20781: EQUAL
20782: IFFALSE 20792
// sBazooka := true ;
20784: LD_ADDR_EXP 93
20788: PUSH
20789: LD_INT 1
20791: ST_TO_ADDR
// if p3 = 114 then
20792: LD_VAR 0 3
20796: PUSH
20797: LD_INT 114
20799: EQUAL
20800: IFFALSE 20810
// sMortar := true ;
20802: LD_ADDR_EXP 94
20806: PUSH
20807: LD_INT 1
20809: ST_TO_ADDR
// if p3 = 115 then
20810: LD_VAR 0 3
20814: PUSH
20815: LD_INT 115
20817: EQUAL
20818: IFFALSE 20828
// sRanger := true ;
20820: LD_ADDR_EXP 104
20824: PUSH
20825: LD_INT 1
20827: ST_TO_ADDR
// if p3 = 116 then
20828: LD_VAR 0 3
20832: PUSH
20833: LD_INT 116
20835: EQUAL
20836: IFFALSE 20846
// sComputer := true ;
20838: LD_ADDR_EXP 105
20842: PUSH
20843: LD_INT 1
20845: ST_TO_ADDR
// if p3 = 117 then
20846: LD_VAR 0 3
20850: PUSH
20851: LD_INT 117
20853: EQUAL
20854: IFFALSE 20864
// s30 := true ;
20856: LD_ADDR_EXP 106
20860: PUSH
20861: LD_INT 1
20863: ST_TO_ADDR
// if p3 = 118 then
20864: LD_VAR 0 3
20868: PUSH
20869: LD_INT 118
20871: EQUAL
20872: IFFALSE 20882
// s60 := true ;
20874: LD_ADDR_EXP 107
20878: PUSH
20879: LD_INT 1
20881: ST_TO_ADDR
// end ; if p2 = hack_mode then
20882: LD_VAR 0 2
20886: PUSH
20887: LD_INT 101
20889: EQUAL
20890: IFFALSE 21018
// begin case p3 of 1 :
20892: LD_VAR 0 3
20896: PUSH
20897: LD_INT 1
20899: DOUBLE
20900: EQUAL
20901: IFTRUE 20905
20903: GO 20912
20905: POP
// hHackUnlimitedResources ; 2 :
20906: CALL 33165 0 0
20910: GO 21018
20912: LD_INT 2
20914: DOUBLE
20915: EQUAL
20916: IFTRUE 20920
20918: GO 20927
20920: POP
// hHackSetLevel10 ; 3 :
20921: CALL 33298 0 0
20925: GO 21018
20927: LD_INT 3
20929: DOUBLE
20930: EQUAL
20931: IFTRUE 20935
20933: GO 20942
20935: POP
// hHackSetLevel10YourUnits ; 4 :
20936: CALL 33383 0 0
20940: GO 21018
20942: LD_INT 4
20944: DOUBLE
20945: EQUAL
20946: IFTRUE 20950
20948: GO 20957
20950: POP
// hHackInvincible ; 5 :
20951: CALL 33831 0 0
20955: GO 21018
20957: LD_INT 5
20959: DOUBLE
20960: EQUAL
20961: IFTRUE 20965
20963: GO 20972
20965: POP
// hHackInvisible ; 6 :
20966: CALL 33942 0 0
20970: GO 21018
20972: LD_INT 6
20974: DOUBLE
20975: EQUAL
20976: IFTRUE 20980
20978: GO 20987
20980: POP
// hHackChangeYourSide ; 7 :
20981: CALL 33999 0 0
20985: GO 21018
20987: LD_INT 7
20989: DOUBLE
20990: EQUAL
20991: IFTRUE 20995
20993: GO 21002
20995: POP
// hHackChangeUnitSide ; 8 :
20996: CALL 34041 0 0
21000: GO 21018
21002: LD_INT 8
21004: DOUBLE
21005: EQUAL
21006: IFTRUE 21010
21008: GO 21017
21010: POP
// hHackFog ; end ;
21011: CALL 34142 0 0
21015: GO 21018
21017: POP
// end ; if p2 = game_save_mode then
21018: LD_VAR 0 2
21022: PUSH
21023: LD_INT 102
21025: EQUAL
21026: IFFALSE 21081
// begin if p3 = 1 then
21028: LD_VAR 0 3
21032: PUSH
21033: LD_INT 1
21035: EQUAL
21036: IFFALSE 21048
// globalGameSaveCounter := p4 ;
21038: LD_ADDR_EXP 50
21042: PUSH
21043: LD_VAR 0 4
21047: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21048: LD_VAR 0 3
21052: PUSH
21053: LD_INT 2
21055: EQUAL
21056: PUSH
21057: LD_EXP 50
21061: AND
21062: IFFALSE 21081
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21064: LD_STRING setGameSaveCounter(
21066: PUSH
21067: LD_EXP 50
21071: STR
21072: PUSH
21073: LD_STRING )
21075: STR
21076: PPUSH
21077: CALL_OW 559
// end ; end ;
21081: LD_VAR 0 7
21085: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21086: LD_INT 0
21088: PPUSH
// streamModeActive := false ;
21089: LD_ADDR_EXP 51
21093: PUSH
21094: LD_INT 0
21096: ST_TO_ADDR
// normalCounter := 36 ;
21097: LD_ADDR_EXP 52
21101: PUSH
21102: LD_INT 36
21104: ST_TO_ADDR
// hardcoreCounter := 18 ;
21105: LD_ADDR_EXP 53
21109: PUSH
21110: LD_INT 18
21112: ST_TO_ADDR
// sRocket := false ;
21113: LD_ADDR_EXP 56
21117: PUSH
21118: LD_INT 0
21120: ST_TO_ADDR
// sSpeed := false ;
21121: LD_ADDR_EXP 55
21125: PUSH
21126: LD_INT 0
21128: ST_TO_ADDR
// sEngine := false ;
21129: LD_ADDR_EXP 57
21133: PUSH
21134: LD_INT 0
21136: ST_TO_ADDR
// sSpec := false ;
21137: LD_ADDR_EXP 54
21141: PUSH
21142: LD_INT 0
21144: ST_TO_ADDR
// sLevel := false ;
21145: LD_ADDR_EXP 58
21149: PUSH
21150: LD_INT 0
21152: ST_TO_ADDR
// sArmoury := false ;
21153: LD_ADDR_EXP 59
21157: PUSH
21158: LD_INT 0
21160: ST_TO_ADDR
// sRadar := false ;
21161: LD_ADDR_EXP 60
21165: PUSH
21166: LD_INT 0
21168: ST_TO_ADDR
// sBunker := false ;
21169: LD_ADDR_EXP 61
21173: PUSH
21174: LD_INT 0
21176: ST_TO_ADDR
// sHack := false ;
21177: LD_ADDR_EXP 62
21181: PUSH
21182: LD_INT 0
21184: ST_TO_ADDR
// sFire := false ;
21185: LD_ADDR_EXP 63
21189: PUSH
21190: LD_INT 0
21192: ST_TO_ADDR
// sRefresh := false ;
21193: LD_ADDR_EXP 64
21197: PUSH
21198: LD_INT 0
21200: ST_TO_ADDR
// sExp := false ;
21201: LD_ADDR_EXP 65
21205: PUSH
21206: LD_INT 0
21208: ST_TO_ADDR
// sDepot := false ;
21209: LD_ADDR_EXP 66
21213: PUSH
21214: LD_INT 0
21216: ST_TO_ADDR
// sFlag := false ;
21217: LD_ADDR_EXP 67
21221: PUSH
21222: LD_INT 0
21224: ST_TO_ADDR
// sKamikadze := false ;
21225: LD_ADDR_EXP 75
21229: PUSH
21230: LD_INT 0
21232: ST_TO_ADDR
// sTroll := false ;
21233: LD_ADDR_EXP 76
21237: PUSH
21238: LD_INT 0
21240: ST_TO_ADDR
// sSlow := false ;
21241: LD_ADDR_EXP 77
21245: PUSH
21246: LD_INT 0
21248: ST_TO_ADDR
// sLack := false ;
21249: LD_ADDR_EXP 78
21253: PUSH
21254: LD_INT 0
21256: ST_TO_ADDR
// sTank := false ;
21257: LD_ADDR_EXP 80
21261: PUSH
21262: LD_INT 0
21264: ST_TO_ADDR
// sRemote := false ;
21265: LD_ADDR_EXP 81
21269: PUSH
21270: LD_INT 0
21272: ST_TO_ADDR
// sPowell := false ;
21273: LD_ADDR_EXP 82
21277: PUSH
21278: LD_INT 0
21280: ST_TO_ADDR
// sTeleport := false ;
21281: LD_ADDR_EXP 85
21285: PUSH
21286: LD_INT 0
21288: ST_TO_ADDR
// sOilTower := false ;
21289: LD_ADDR_EXP 87
21293: PUSH
21294: LD_INT 0
21296: ST_TO_ADDR
// sShovel := false ;
21297: LD_ADDR_EXP 88
21301: PUSH
21302: LD_INT 0
21304: ST_TO_ADDR
// sSheik := false ;
21305: LD_ADDR_EXP 89
21309: PUSH
21310: LD_INT 0
21312: ST_TO_ADDR
// sEarthquake := false ;
21313: LD_ADDR_EXP 91
21317: PUSH
21318: LD_INT 0
21320: ST_TO_ADDR
// sAI := false ;
21321: LD_ADDR_EXP 92
21325: PUSH
21326: LD_INT 0
21328: ST_TO_ADDR
// sCargo := false ;
21329: LD_ADDR_EXP 95
21333: PUSH
21334: LD_INT 0
21336: ST_TO_ADDR
// sDLaser := false ;
21337: LD_ADDR_EXP 96
21341: PUSH
21342: LD_INT 0
21344: ST_TO_ADDR
// sExchange := false ;
21345: LD_ADDR_EXP 97
21349: PUSH
21350: LD_INT 0
21352: ST_TO_ADDR
// sFac := false ;
21353: LD_ADDR_EXP 98
21357: PUSH
21358: LD_INT 0
21360: ST_TO_ADDR
// sPower := false ;
21361: LD_ADDR_EXP 99
21365: PUSH
21366: LD_INT 0
21368: ST_TO_ADDR
// sRandom := false ;
21369: LD_ADDR_EXP 100
21373: PUSH
21374: LD_INT 0
21376: ST_TO_ADDR
// sShield := false ;
21377: LD_ADDR_EXP 101
21381: PUSH
21382: LD_INT 0
21384: ST_TO_ADDR
// sTime := false ;
21385: LD_ADDR_EXP 102
21389: PUSH
21390: LD_INT 0
21392: ST_TO_ADDR
// sTools := false ;
21393: LD_ADDR_EXP 103
21397: PUSH
21398: LD_INT 0
21400: ST_TO_ADDR
// sSold := false ;
21401: LD_ADDR_EXP 68
21405: PUSH
21406: LD_INT 0
21408: ST_TO_ADDR
// sDiff := false ;
21409: LD_ADDR_EXP 69
21413: PUSH
21414: LD_INT 0
21416: ST_TO_ADDR
// sFog := false ;
21417: LD_ADDR_EXP 72
21421: PUSH
21422: LD_INT 0
21424: ST_TO_ADDR
// sReset := false ;
21425: LD_ADDR_EXP 73
21429: PUSH
21430: LD_INT 0
21432: ST_TO_ADDR
// sSun := false ;
21433: LD_ADDR_EXP 74
21437: PUSH
21438: LD_INT 0
21440: ST_TO_ADDR
// sTiger := false ;
21441: LD_ADDR_EXP 70
21445: PUSH
21446: LD_INT 0
21448: ST_TO_ADDR
// sBomb := false ;
21449: LD_ADDR_EXP 71
21453: PUSH
21454: LD_INT 0
21456: ST_TO_ADDR
// sWound := false ;
21457: LD_ADDR_EXP 79
21461: PUSH
21462: LD_INT 0
21464: ST_TO_ADDR
// sBetray := false ;
21465: LD_ADDR_EXP 83
21469: PUSH
21470: LD_INT 0
21472: ST_TO_ADDR
// sContamin := false ;
21473: LD_ADDR_EXP 84
21477: PUSH
21478: LD_INT 0
21480: ST_TO_ADDR
// sOil := false ;
21481: LD_ADDR_EXP 86
21485: PUSH
21486: LD_INT 0
21488: ST_TO_ADDR
// sStu := false ;
21489: LD_ADDR_EXP 90
21493: PUSH
21494: LD_INT 0
21496: ST_TO_ADDR
// sBazooka := false ;
21497: LD_ADDR_EXP 93
21501: PUSH
21502: LD_INT 0
21504: ST_TO_ADDR
// sMortar := false ;
21505: LD_ADDR_EXP 94
21509: PUSH
21510: LD_INT 0
21512: ST_TO_ADDR
// sRanger := false ;
21513: LD_ADDR_EXP 104
21517: PUSH
21518: LD_INT 0
21520: ST_TO_ADDR
// sComputer := false ;
21521: LD_ADDR_EXP 105
21525: PUSH
21526: LD_INT 0
21528: ST_TO_ADDR
// s30 := false ;
21529: LD_ADDR_EXP 106
21533: PUSH
21534: LD_INT 0
21536: ST_TO_ADDR
// s60 := false ;
21537: LD_ADDR_EXP 107
21541: PUSH
21542: LD_INT 0
21544: ST_TO_ADDR
// end ;
21545: LD_VAR 0 1
21549: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21550: LD_INT 0
21552: PPUSH
21553: PPUSH
21554: PPUSH
21555: PPUSH
21556: PPUSH
21557: PPUSH
21558: PPUSH
// result := [ ] ;
21559: LD_ADDR_VAR 0 2
21563: PUSH
21564: EMPTY
21565: ST_TO_ADDR
// if campaign_id = 1 then
21566: LD_OWVAR 69
21570: PUSH
21571: LD_INT 1
21573: EQUAL
21574: IFFALSE 24740
// begin case mission_number of 1 :
21576: LD_OWVAR 70
21580: PUSH
21581: LD_INT 1
21583: DOUBLE
21584: EQUAL
21585: IFTRUE 21589
21587: GO 21665
21589: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21590: LD_ADDR_VAR 0 2
21594: PUSH
21595: LD_INT 2
21597: PUSH
21598: LD_INT 4
21600: PUSH
21601: LD_INT 11
21603: PUSH
21604: LD_INT 12
21606: PUSH
21607: LD_INT 15
21609: PUSH
21610: LD_INT 16
21612: PUSH
21613: LD_INT 22
21615: PUSH
21616: LD_INT 23
21618: PUSH
21619: LD_INT 26
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 101
21635: PUSH
21636: LD_INT 102
21638: PUSH
21639: LD_INT 106
21641: PUSH
21642: LD_INT 116
21644: PUSH
21645: LD_INT 117
21647: PUSH
21648: LD_INT 118
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: ST_TO_ADDR
21663: GO 24738
21665: LD_INT 2
21667: DOUBLE
21668: EQUAL
21669: IFTRUE 21673
21671: GO 21757
21673: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21674: LD_ADDR_VAR 0 2
21678: PUSH
21679: LD_INT 2
21681: PUSH
21682: LD_INT 4
21684: PUSH
21685: LD_INT 11
21687: PUSH
21688: LD_INT 12
21690: PUSH
21691: LD_INT 15
21693: PUSH
21694: LD_INT 16
21696: PUSH
21697: LD_INT 22
21699: PUSH
21700: LD_INT 23
21702: PUSH
21703: LD_INT 26
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 101
21719: PUSH
21720: LD_INT 102
21722: PUSH
21723: LD_INT 105
21725: PUSH
21726: LD_INT 106
21728: PUSH
21729: LD_INT 108
21731: PUSH
21732: LD_INT 116
21734: PUSH
21735: LD_INT 117
21737: PUSH
21738: LD_INT 118
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: ST_TO_ADDR
21755: GO 24738
21757: LD_INT 3
21759: DOUBLE
21760: EQUAL
21761: IFTRUE 21765
21763: GO 21853
21765: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21766: LD_ADDR_VAR 0 2
21770: PUSH
21771: LD_INT 2
21773: PUSH
21774: LD_INT 4
21776: PUSH
21777: LD_INT 5
21779: PUSH
21780: LD_INT 11
21782: PUSH
21783: LD_INT 12
21785: PUSH
21786: LD_INT 15
21788: PUSH
21789: LD_INT 16
21791: PUSH
21792: LD_INT 22
21794: PUSH
21795: LD_INT 26
21797: PUSH
21798: LD_INT 36
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 101
21815: PUSH
21816: LD_INT 102
21818: PUSH
21819: LD_INT 105
21821: PUSH
21822: LD_INT 106
21824: PUSH
21825: LD_INT 108
21827: PUSH
21828: LD_INT 116
21830: PUSH
21831: LD_INT 117
21833: PUSH
21834: LD_INT 118
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: ST_TO_ADDR
21851: GO 24738
21853: LD_INT 4
21855: DOUBLE
21856: EQUAL
21857: IFTRUE 21861
21859: GO 21957
21861: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21862: LD_ADDR_VAR 0 2
21866: PUSH
21867: LD_INT 2
21869: PUSH
21870: LD_INT 4
21872: PUSH
21873: LD_INT 5
21875: PUSH
21876: LD_INT 8
21878: PUSH
21879: LD_INT 11
21881: PUSH
21882: LD_INT 12
21884: PUSH
21885: LD_INT 15
21887: PUSH
21888: LD_INT 16
21890: PUSH
21891: LD_INT 22
21893: PUSH
21894: LD_INT 23
21896: PUSH
21897: LD_INT 26
21899: PUSH
21900: LD_INT 36
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 101
21919: PUSH
21920: LD_INT 102
21922: PUSH
21923: LD_INT 105
21925: PUSH
21926: LD_INT 106
21928: PUSH
21929: LD_INT 108
21931: PUSH
21932: LD_INT 116
21934: PUSH
21935: LD_INT 117
21937: PUSH
21938: LD_INT 118
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: ST_TO_ADDR
21955: GO 24738
21957: LD_INT 5
21959: DOUBLE
21960: EQUAL
21961: IFTRUE 21965
21963: GO 22077
21965: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21966: LD_ADDR_VAR 0 2
21970: PUSH
21971: LD_INT 2
21973: PUSH
21974: LD_INT 4
21976: PUSH
21977: LD_INT 5
21979: PUSH
21980: LD_INT 6
21982: PUSH
21983: LD_INT 8
21985: PUSH
21986: LD_INT 11
21988: PUSH
21989: LD_INT 12
21991: PUSH
21992: LD_INT 15
21994: PUSH
21995: LD_INT 16
21997: PUSH
21998: LD_INT 22
22000: PUSH
22001: LD_INT 23
22003: PUSH
22004: LD_INT 25
22006: PUSH
22007: LD_INT 26
22009: PUSH
22010: LD_INT 36
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 101
22031: PUSH
22032: LD_INT 102
22034: PUSH
22035: LD_INT 105
22037: PUSH
22038: LD_INT 106
22040: PUSH
22041: LD_INT 108
22043: PUSH
22044: LD_INT 109
22046: PUSH
22047: LD_INT 112
22049: PUSH
22050: LD_INT 116
22052: PUSH
22053: LD_INT 117
22055: PUSH
22056: LD_INT 118
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: ST_TO_ADDR
22075: GO 24738
22077: LD_INT 6
22079: DOUBLE
22080: EQUAL
22081: IFTRUE 22085
22083: GO 22217
22085: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22086: LD_ADDR_VAR 0 2
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: LD_INT 4
22096: PUSH
22097: LD_INT 5
22099: PUSH
22100: LD_INT 6
22102: PUSH
22103: LD_INT 8
22105: PUSH
22106: LD_INT 11
22108: PUSH
22109: LD_INT 12
22111: PUSH
22112: LD_INT 15
22114: PUSH
22115: LD_INT 16
22117: PUSH
22118: LD_INT 20
22120: PUSH
22121: LD_INT 21
22123: PUSH
22124: LD_INT 22
22126: PUSH
22127: LD_INT 23
22129: PUSH
22130: LD_INT 25
22132: PUSH
22133: LD_INT 26
22135: PUSH
22136: LD_INT 30
22138: PUSH
22139: LD_INT 31
22141: PUSH
22142: LD_INT 32
22144: PUSH
22145: LD_INT 36
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 101
22171: PUSH
22172: LD_INT 102
22174: PUSH
22175: LD_INT 105
22177: PUSH
22178: LD_INT 106
22180: PUSH
22181: LD_INT 108
22183: PUSH
22184: LD_INT 109
22186: PUSH
22187: LD_INT 112
22189: PUSH
22190: LD_INT 116
22192: PUSH
22193: LD_INT 117
22195: PUSH
22196: LD_INT 118
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: ST_TO_ADDR
22215: GO 24738
22217: LD_INT 7
22219: DOUBLE
22220: EQUAL
22221: IFTRUE 22225
22223: GO 22337
22225: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22226: LD_ADDR_VAR 0 2
22230: PUSH
22231: LD_INT 2
22233: PUSH
22234: LD_INT 4
22236: PUSH
22237: LD_INT 5
22239: PUSH
22240: LD_INT 7
22242: PUSH
22243: LD_INT 11
22245: PUSH
22246: LD_INT 12
22248: PUSH
22249: LD_INT 15
22251: PUSH
22252: LD_INT 16
22254: PUSH
22255: LD_INT 20
22257: PUSH
22258: LD_INT 21
22260: PUSH
22261: LD_INT 22
22263: PUSH
22264: LD_INT 23
22266: PUSH
22267: LD_INT 25
22269: PUSH
22270: LD_INT 26
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 101
22291: PUSH
22292: LD_INT 102
22294: PUSH
22295: LD_INT 103
22297: PUSH
22298: LD_INT 105
22300: PUSH
22301: LD_INT 106
22303: PUSH
22304: LD_INT 108
22306: PUSH
22307: LD_INT 112
22309: PUSH
22310: LD_INT 116
22312: PUSH
22313: LD_INT 117
22315: PUSH
22316: LD_INT 118
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: ST_TO_ADDR
22335: GO 24738
22337: LD_INT 8
22339: DOUBLE
22340: EQUAL
22341: IFTRUE 22345
22343: GO 22485
22345: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22346: LD_ADDR_VAR 0 2
22350: PUSH
22351: LD_INT 2
22353: PUSH
22354: LD_INT 4
22356: PUSH
22357: LD_INT 5
22359: PUSH
22360: LD_INT 6
22362: PUSH
22363: LD_INT 7
22365: PUSH
22366: LD_INT 8
22368: PUSH
22369: LD_INT 11
22371: PUSH
22372: LD_INT 12
22374: PUSH
22375: LD_INT 15
22377: PUSH
22378: LD_INT 16
22380: PUSH
22381: LD_INT 20
22383: PUSH
22384: LD_INT 21
22386: PUSH
22387: LD_INT 22
22389: PUSH
22390: LD_INT 23
22392: PUSH
22393: LD_INT 25
22395: PUSH
22396: LD_INT 26
22398: PUSH
22399: LD_INT 30
22401: PUSH
22402: LD_INT 31
22404: PUSH
22405: LD_INT 32
22407: PUSH
22408: LD_INT 36
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 101
22435: PUSH
22436: LD_INT 102
22438: PUSH
22439: LD_INT 103
22441: PUSH
22442: LD_INT 105
22444: PUSH
22445: LD_INT 106
22447: PUSH
22448: LD_INT 108
22450: PUSH
22451: LD_INT 109
22453: PUSH
22454: LD_INT 112
22456: PUSH
22457: LD_INT 116
22459: PUSH
22460: LD_INT 117
22462: PUSH
22463: LD_INT 118
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: ST_TO_ADDR
22483: GO 24738
22485: LD_INT 9
22487: DOUBLE
22488: EQUAL
22489: IFTRUE 22493
22491: GO 22641
22493: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22494: LD_ADDR_VAR 0 2
22498: PUSH
22499: LD_INT 2
22501: PUSH
22502: LD_INT 4
22504: PUSH
22505: LD_INT 5
22507: PUSH
22508: LD_INT 6
22510: PUSH
22511: LD_INT 7
22513: PUSH
22514: LD_INT 8
22516: PUSH
22517: LD_INT 11
22519: PUSH
22520: LD_INT 12
22522: PUSH
22523: LD_INT 15
22525: PUSH
22526: LD_INT 16
22528: PUSH
22529: LD_INT 20
22531: PUSH
22532: LD_INT 21
22534: PUSH
22535: LD_INT 22
22537: PUSH
22538: LD_INT 23
22540: PUSH
22541: LD_INT 25
22543: PUSH
22544: LD_INT 26
22546: PUSH
22547: LD_INT 28
22549: PUSH
22550: LD_INT 30
22552: PUSH
22553: LD_INT 31
22555: PUSH
22556: LD_INT 32
22558: PUSH
22559: LD_INT 36
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 101
22587: PUSH
22588: LD_INT 102
22590: PUSH
22591: LD_INT 103
22593: PUSH
22594: LD_INT 105
22596: PUSH
22597: LD_INT 106
22599: PUSH
22600: LD_INT 108
22602: PUSH
22603: LD_INT 109
22605: PUSH
22606: LD_INT 112
22608: PUSH
22609: LD_INT 114
22611: PUSH
22612: LD_INT 116
22614: PUSH
22615: LD_INT 117
22617: PUSH
22618: LD_INT 118
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: ST_TO_ADDR
22639: GO 24738
22641: LD_INT 10
22643: DOUBLE
22644: EQUAL
22645: IFTRUE 22649
22647: GO 22845
22649: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22650: LD_ADDR_VAR 0 2
22654: PUSH
22655: LD_INT 2
22657: PUSH
22658: LD_INT 4
22660: PUSH
22661: LD_INT 5
22663: PUSH
22664: LD_INT 6
22666: PUSH
22667: LD_INT 7
22669: PUSH
22670: LD_INT 8
22672: PUSH
22673: LD_INT 9
22675: PUSH
22676: LD_INT 10
22678: PUSH
22679: LD_INT 11
22681: PUSH
22682: LD_INT 12
22684: PUSH
22685: LD_INT 13
22687: PUSH
22688: LD_INT 14
22690: PUSH
22691: LD_INT 15
22693: PUSH
22694: LD_INT 16
22696: PUSH
22697: LD_INT 17
22699: PUSH
22700: LD_INT 18
22702: PUSH
22703: LD_INT 19
22705: PUSH
22706: LD_INT 20
22708: PUSH
22709: LD_INT 21
22711: PUSH
22712: LD_INT 22
22714: PUSH
22715: LD_INT 23
22717: PUSH
22718: LD_INT 24
22720: PUSH
22721: LD_INT 25
22723: PUSH
22724: LD_INT 26
22726: PUSH
22727: LD_INT 28
22729: PUSH
22730: LD_INT 30
22732: PUSH
22733: LD_INT 31
22735: PUSH
22736: LD_INT 32
22738: PUSH
22739: LD_INT 36
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 101
22775: PUSH
22776: LD_INT 102
22778: PUSH
22779: LD_INT 103
22781: PUSH
22782: LD_INT 104
22784: PUSH
22785: LD_INT 105
22787: PUSH
22788: LD_INT 106
22790: PUSH
22791: LD_INT 107
22793: PUSH
22794: LD_INT 108
22796: PUSH
22797: LD_INT 109
22799: PUSH
22800: LD_INT 110
22802: PUSH
22803: LD_INT 111
22805: PUSH
22806: LD_INT 112
22808: PUSH
22809: LD_INT 114
22811: PUSH
22812: LD_INT 116
22814: PUSH
22815: LD_INT 117
22817: PUSH
22818: LD_INT 118
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: ST_TO_ADDR
22843: GO 24738
22845: LD_INT 11
22847: DOUBLE
22848: EQUAL
22849: IFTRUE 22853
22851: GO 23057
22853: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22854: LD_ADDR_VAR 0 2
22858: PUSH
22859: LD_INT 2
22861: PUSH
22862: LD_INT 3
22864: PUSH
22865: LD_INT 4
22867: PUSH
22868: LD_INT 5
22870: PUSH
22871: LD_INT 6
22873: PUSH
22874: LD_INT 7
22876: PUSH
22877: LD_INT 8
22879: PUSH
22880: LD_INT 9
22882: PUSH
22883: LD_INT 10
22885: PUSH
22886: LD_INT 11
22888: PUSH
22889: LD_INT 12
22891: PUSH
22892: LD_INT 13
22894: PUSH
22895: LD_INT 14
22897: PUSH
22898: LD_INT 15
22900: PUSH
22901: LD_INT 16
22903: PUSH
22904: LD_INT 17
22906: PUSH
22907: LD_INT 18
22909: PUSH
22910: LD_INT 19
22912: PUSH
22913: LD_INT 20
22915: PUSH
22916: LD_INT 21
22918: PUSH
22919: LD_INT 22
22921: PUSH
22922: LD_INT 23
22924: PUSH
22925: LD_INT 24
22927: PUSH
22928: LD_INT 25
22930: PUSH
22931: LD_INT 26
22933: PUSH
22934: LD_INT 28
22936: PUSH
22937: LD_INT 30
22939: PUSH
22940: LD_INT 31
22942: PUSH
22943: LD_INT 32
22945: PUSH
22946: LD_INT 34
22948: PUSH
22949: LD_INT 36
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 101
22987: PUSH
22988: LD_INT 102
22990: PUSH
22991: LD_INT 103
22993: PUSH
22994: LD_INT 104
22996: PUSH
22997: LD_INT 105
22999: PUSH
23000: LD_INT 106
23002: PUSH
23003: LD_INT 107
23005: PUSH
23006: LD_INT 108
23008: PUSH
23009: LD_INT 109
23011: PUSH
23012: LD_INT 110
23014: PUSH
23015: LD_INT 111
23017: PUSH
23018: LD_INT 112
23020: PUSH
23021: LD_INT 114
23023: PUSH
23024: LD_INT 116
23026: PUSH
23027: LD_INT 117
23029: PUSH
23030: LD_INT 118
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: ST_TO_ADDR
23055: GO 24738
23057: LD_INT 12
23059: DOUBLE
23060: EQUAL
23061: IFTRUE 23065
23063: GO 23285
23065: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23066: LD_ADDR_VAR 0 2
23070: PUSH
23071: LD_INT 1
23073: PUSH
23074: LD_INT 2
23076: PUSH
23077: LD_INT 3
23079: PUSH
23080: LD_INT 4
23082: PUSH
23083: LD_INT 5
23085: PUSH
23086: LD_INT 6
23088: PUSH
23089: LD_INT 7
23091: PUSH
23092: LD_INT 8
23094: PUSH
23095: LD_INT 9
23097: PUSH
23098: LD_INT 10
23100: PUSH
23101: LD_INT 11
23103: PUSH
23104: LD_INT 12
23106: PUSH
23107: LD_INT 13
23109: PUSH
23110: LD_INT 14
23112: PUSH
23113: LD_INT 15
23115: PUSH
23116: LD_INT 16
23118: PUSH
23119: LD_INT 17
23121: PUSH
23122: LD_INT 18
23124: PUSH
23125: LD_INT 19
23127: PUSH
23128: LD_INT 20
23130: PUSH
23131: LD_INT 21
23133: PUSH
23134: LD_INT 22
23136: PUSH
23137: LD_INT 23
23139: PUSH
23140: LD_INT 24
23142: PUSH
23143: LD_INT 25
23145: PUSH
23146: LD_INT 26
23148: PUSH
23149: LD_INT 27
23151: PUSH
23152: LD_INT 28
23154: PUSH
23155: LD_INT 30
23157: PUSH
23158: LD_INT 31
23160: PUSH
23161: LD_INT 32
23163: PUSH
23164: LD_INT 33
23166: PUSH
23167: LD_INT 34
23169: PUSH
23170: LD_INT 36
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 101
23211: PUSH
23212: LD_INT 102
23214: PUSH
23215: LD_INT 103
23217: PUSH
23218: LD_INT 104
23220: PUSH
23221: LD_INT 105
23223: PUSH
23224: LD_INT 106
23226: PUSH
23227: LD_INT 107
23229: PUSH
23230: LD_INT 108
23232: PUSH
23233: LD_INT 109
23235: PUSH
23236: LD_INT 110
23238: PUSH
23239: LD_INT 111
23241: PUSH
23242: LD_INT 112
23244: PUSH
23245: LD_INT 113
23247: PUSH
23248: LD_INT 114
23250: PUSH
23251: LD_INT 116
23253: PUSH
23254: LD_INT 117
23256: PUSH
23257: LD_INT 118
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: ST_TO_ADDR
23283: GO 24738
23285: LD_INT 13
23287: DOUBLE
23288: EQUAL
23289: IFTRUE 23293
23291: GO 23501
23293: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23294: LD_ADDR_VAR 0 2
23298: PUSH
23299: LD_INT 1
23301: PUSH
23302: LD_INT 2
23304: PUSH
23305: LD_INT 3
23307: PUSH
23308: LD_INT 4
23310: PUSH
23311: LD_INT 5
23313: PUSH
23314: LD_INT 8
23316: PUSH
23317: LD_INT 9
23319: PUSH
23320: LD_INT 10
23322: PUSH
23323: LD_INT 11
23325: PUSH
23326: LD_INT 12
23328: PUSH
23329: LD_INT 14
23331: PUSH
23332: LD_INT 15
23334: PUSH
23335: LD_INT 16
23337: PUSH
23338: LD_INT 17
23340: PUSH
23341: LD_INT 18
23343: PUSH
23344: LD_INT 19
23346: PUSH
23347: LD_INT 20
23349: PUSH
23350: LD_INT 21
23352: PUSH
23353: LD_INT 22
23355: PUSH
23356: LD_INT 23
23358: PUSH
23359: LD_INT 24
23361: PUSH
23362: LD_INT 25
23364: PUSH
23365: LD_INT 26
23367: PUSH
23368: LD_INT 27
23370: PUSH
23371: LD_INT 28
23373: PUSH
23374: LD_INT 30
23376: PUSH
23377: LD_INT 31
23379: PUSH
23380: LD_INT 32
23382: PUSH
23383: LD_INT 33
23385: PUSH
23386: LD_INT 34
23388: PUSH
23389: LD_INT 36
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 101
23427: PUSH
23428: LD_INT 102
23430: PUSH
23431: LD_INT 103
23433: PUSH
23434: LD_INT 104
23436: PUSH
23437: LD_INT 105
23439: PUSH
23440: LD_INT 106
23442: PUSH
23443: LD_INT 107
23445: PUSH
23446: LD_INT 108
23448: PUSH
23449: LD_INT 109
23451: PUSH
23452: LD_INT 110
23454: PUSH
23455: LD_INT 111
23457: PUSH
23458: LD_INT 112
23460: PUSH
23461: LD_INT 113
23463: PUSH
23464: LD_INT 114
23466: PUSH
23467: LD_INT 116
23469: PUSH
23470: LD_INT 117
23472: PUSH
23473: LD_INT 118
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: ST_TO_ADDR
23499: GO 24738
23501: LD_INT 14
23503: DOUBLE
23504: EQUAL
23505: IFTRUE 23509
23507: GO 23733
23509: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23510: LD_ADDR_VAR 0 2
23514: PUSH
23515: LD_INT 1
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: LD_INT 3
23523: PUSH
23524: LD_INT 4
23526: PUSH
23527: LD_INT 5
23529: PUSH
23530: LD_INT 6
23532: PUSH
23533: LD_INT 7
23535: PUSH
23536: LD_INT 8
23538: PUSH
23539: LD_INT 9
23541: PUSH
23542: LD_INT 10
23544: PUSH
23545: LD_INT 11
23547: PUSH
23548: LD_INT 12
23550: PUSH
23551: LD_INT 13
23553: PUSH
23554: LD_INT 14
23556: PUSH
23557: LD_INT 15
23559: PUSH
23560: LD_INT 16
23562: PUSH
23563: LD_INT 17
23565: PUSH
23566: LD_INT 18
23568: PUSH
23569: LD_INT 19
23571: PUSH
23572: LD_INT 20
23574: PUSH
23575: LD_INT 21
23577: PUSH
23578: LD_INT 22
23580: PUSH
23581: LD_INT 23
23583: PUSH
23584: LD_INT 24
23586: PUSH
23587: LD_INT 25
23589: PUSH
23590: LD_INT 26
23592: PUSH
23593: LD_INT 27
23595: PUSH
23596: LD_INT 28
23598: PUSH
23599: LD_INT 29
23601: PUSH
23602: LD_INT 30
23604: PUSH
23605: LD_INT 31
23607: PUSH
23608: LD_INT 32
23610: PUSH
23611: LD_INT 33
23613: PUSH
23614: LD_INT 34
23616: PUSH
23617: LD_INT 36
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 101
23659: PUSH
23660: LD_INT 102
23662: PUSH
23663: LD_INT 103
23665: PUSH
23666: LD_INT 104
23668: PUSH
23669: LD_INT 105
23671: PUSH
23672: LD_INT 106
23674: PUSH
23675: LD_INT 107
23677: PUSH
23678: LD_INT 108
23680: PUSH
23681: LD_INT 109
23683: PUSH
23684: LD_INT 110
23686: PUSH
23687: LD_INT 111
23689: PUSH
23690: LD_INT 112
23692: PUSH
23693: LD_INT 113
23695: PUSH
23696: LD_INT 114
23698: PUSH
23699: LD_INT 116
23701: PUSH
23702: LD_INT 117
23704: PUSH
23705: LD_INT 118
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: ST_TO_ADDR
23731: GO 24738
23733: LD_INT 15
23735: DOUBLE
23736: EQUAL
23737: IFTRUE 23741
23739: GO 23965
23741: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23742: LD_ADDR_VAR 0 2
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: LD_INT 3
23755: PUSH
23756: LD_INT 4
23758: PUSH
23759: LD_INT 5
23761: PUSH
23762: LD_INT 6
23764: PUSH
23765: LD_INT 7
23767: PUSH
23768: LD_INT 8
23770: PUSH
23771: LD_INT 9
23773: PUSH
23774: LD_INT 10
23776: PUSH
23777: LD_INT 11
23779: PUSH
23780: LD_INT 12
23782: PUSH
23783: LD_INT 13
23785: PUSH
23786: LD_INT 14
23788: PUSH
23789: LD_INT 15
23791: PUSH
23792: LD_INT 16
23794: PUSH
23795: LD_INT 17
23797: PUSH
23798: LD_INT 18
23800: PUSH
23801: LD_INT 19
23803: PUSH
23804: LD_INT 20
23806: PUSH
23807: LD_INT 21
23809: PUSH
23810: LD_INT 22
23812: PUSH
23813: LD_INT 23
23815: PUSH
23816: LD_INT 24
23818: PUSH
23819: LD_INT 25
23821: PUSH
23822: LD_INT 26
23824: PUSH
23825: LD_INT 27
23827: PUSH
23828: LD_INT 28
23830: PUSH
23831: LD_INT 29
23833: PUSH
23834: LD_INT 30
23836: PUSH
23837: LD_INT 31
23839: PUSH
23840: LD_INT 32
23842: PUSH
23843: LD_INT 33
23845: PUSH
23846: LD_INT 34
23848: PUSH
23849: LD_INT 36
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 101
23891: PUSH
23892: LD_INT 102
23894: PUSH
23895: LD_INT 103
23897: PUSH
23898: LD_INT 104
23900: PUSH
23901: LD_INT 105
23903: PUSH
23904: LD_INT 106
23906: PUSH
23907: LD_INT 107
23909: PUSH
23910: LD_INT 108
23912: PUSH
23913: LD_INT 109
23915: PUSH
23916: LD_INT 110
23918: PUSH
23919: LD_INT 111
23921: PUSH
23922: LD_INT 112
23924: PUSH
23925: LD_INT 113
23927: PUSH
23928: LD_INT 114
23930: PUSH
23931: LD_INT 116
23933: PUSH
23934: LD_INT 117
23936: PUSH
23937: LD_INT 118
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: ST_TO_ADDR
23963: GO 24738
23965: LD_INT 16
23967: DOUBLE
23968: EQUAL
23969: IFTRUE 23973
23971: GO 24109
23973: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23974: LD_ADDR_VAR 0 2
23978: PUSH
23979: LD_INT 2
23981: PUSH
23982: LD_INT 4
23984: PUSH
23985: LD_INT 5
23987: PUSH
23988: LD_INT 7
23990: PUSH
23991: LD_INT 11
23993: PUSH
23994: LD_INT 12
23996: PUSH
23997: LD_INT 15
23999: PUSH
24000: LD_INT 16
24002: PUSH
24003: LD_INT 20
24005: PUSH
24006: LD_INT 21
24008: PUSH
24009: LD_INT 22
24011: PUSH
24012: LD_INT 23
24014: PUSH
24015: LD_INT 25
24017: PUSH
24018: LD_INT 26
24020: PUSH
24021: LD_INT 30
24023: PUSH
24024: LD_INT 31
24026: PUSH
24027: LD_INT 32
24029: PUSH
24030: LD_INT 33
24032: PUSH
24033: LD_INT 34
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 101
24059: PUSH
24060: LD_INT 102
24062: PUSH
24063: LD_INT 103
24065: PUSH
24066: LD_INT 106
24068: PUSH
24069: LD_INT 108
24071: PUSH
24072: LD_INT 112
24074: PUSH
24075: LD_INT 113
24077: PUSH
24078: LD_INT 114
24080: PUSH
24081: LD_INT 116
24083: PUSH
24084: LD_INT 117
24086: PUSH
24087: LD_INT 118
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: ST_TO_ADDR
24107: GO 24738
24109: LD_INT 17
24111: DOUBLE
24112: EQUAL
24113: IFTRUE 24117
24115: GO 24341
24117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24118: LD_ADDR_VAR 0 2
24122: PUSH
24123: LD_INT 1
24125: PUSH
24126: LD_INT 2
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: LD_INT 4
24134: PUSH
24135: LD_INT 5
24137: PUSH
24138: LD_INT 6
24140: PUSH
24141: LD_INT 7
24143: PUSH
24144: LD_INT 8
24146: PUSH
24147: LD_INT 9
24149: PUSH
24150: LD_INT 10
24152: PUSH
24153: LD_INT 11
24155: PUSH
24156: LD_INT 12
24158: PUSH
24159: LD_INT 13
24161: PUSH
24162: LD_INT 14
24164: PUSH
24165: LD_INT 15
24167: PUSH
24168: LD_INT 16
24170: PUSH
24171: LD_INT 17
24173: PUSH
24174: LD_INT 18
24176: PUSH
24177: LD_INT 19
24179: PUSH
24180: LD_INT 20
24182: PUSH
24183: LD_INT 21
24185: PUSH
24186: LD_INT 22
24188: PUSH
24189: LD_INT 23
24191: PUSH
24192: LD_INT 24
24194: PUSH
24195: LD_INT 25
24197: PUSH
24198: LD_INT 26
24200: PUSH
24201: LD_INT 27
24203: PUSH
24204: LD_INT 28
24206: PUSH
24207: LD_INT 29
24209: PUSH
24210: LD_INT 30
24212: PUSH
24213: LD_INT 31
24215: PUSH
24216: LD_INT 32
24218: PUSH
24219: LD_INT 33
24221: PUSH
24222: LD_INT 34
24224: PUSH
24225: LD_INT 36
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 101
24267: PUSH
24268: LD_INT 102
24270: PUSH
24271: LD_INT 103
24273: PUSH
24274: LD_INT 104
24276: PUSH
24277: LD_INT 105
24279: PUSH
24280: LD_INT 106
24282: PUSH
24283: LD_INT 107
24285: PUSH
24286: LD_INT 108
24288: PUSH
24289: LD_INT 109
24291: PUSH
24292: LD_INT 110
24294: PUSH
24295: LD_INT 111
24297: PUSH
24298: LD_INT 112
24300: PUSH
24301: LD_INT 113
24303: PUSH
24304: LD_INT 114
24306: PUSH
24307: LD_INT 116
24309: PUSH
24310: LD_INT 117
24312: PUSH
24313: LD_INT 118
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: ST_TO_ADDR
24339: GO 24738
24341: LD_INT 18
24343: DOUBLE
24344: EQUAL
24345: IFTRUE 24349
24347: GO 24497
24349: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24350: LD_ADDR_VAR 0 2
24354: PUSH
24355: LD_INT 2
24357: PUSH
24358: LD_INT 4
24360: PUSH
24361: LD_INT 5
24363: PUSH
24364: LD_INT 7
24366: PUSH
24367: LD_INT 11
24369: PUSH
24370: LD_INT 12
24372: PUSH
24373: LD_INT 15
24375: PUSH
24376: LD_INT 16
24378: PUSH
24379: LD_INT 20
24381: PUSH
24382: LD_INT 21
24384: PUSH
24385: LD_INT 22
24387: PUSH
24388: LD_INT 23
24390: PUSH
24391: LD_INT 25
24393: PUSH
24394: LD_INT 26
24396: PUSH
24397: LD_INT 30
24399: PUSH
24400: LD_INT 31
24402: PUSH
24403: LD_INT 32
24405: PUSH
24406: LD_INT 33
24408: PUSH
24409: LD_INT 34
24411: PUSH
24412: LD_INT 35
24414: PUSH
24415: LD_INT 36
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 101
24443: PUSH
24444: LD_INT 102
24446: PUSH
24447: LD_INT 103
24449: PUSH
24450: LD_INT 106
24452: PUSH
24453: LD_INT 108
24455: PUSH
24456: LD_INT 112
24458: PUSH
24459: LD_INT 113
24461: PUSH
24462: LD_INT 114
24464: PUSH
24465: LD_INT 115
24467: PUSH
24468: LD_INT 116
24470: PUSH
24471: LD_INT 117
24473: PUSH
24474: LD_INT 118
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: ST_TO_ADDR
24495: GO 24738
24497: LD_INT 19
24499: DOUBLE
24500: EQUAL
24501: IFTRUE 24505
24503: GO 24737
24505: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24506: LD_ADDR_VAR 0 2
24510: PUSH
24511: LD_INT 1
24513: PUSH
24514: LD_INT 2
24516: PUSH
24517: LD_INT 3
24519: PUSH
24520: LD_INT 4
24522: PUSH
24523: LD_INT 5
24525: PUSH
24526: LD_INT 6
24528: PUSH
24529: LD_INT 7
24531: PUSH
24532: LD_INT 8
24534: PUSH
24535: LD_INT 9
24537: PUSH
24538: LD_INT 10
24540: PUSH
24541: LD_INT 11
24543: PUSH
24544: LD_INT 12
24546: PUSH
24547: LD_INT 13
24549: PUSH
24550: LD_INT 14
24552: PUSH
24553: LD_INT 15
24555: PUSH
24556: LD_INT 16
24558: PUSH
24559: LD_INT 17
24561: PUSH
24562: LD_INT 18
24564: PUSH
24565: LD_INT 19
24567: PUSH
24568: LD_INT 20
24570: PUSH
24571: LD_INT 21
24573: PUSH
24574: LD_INT 22
24576: PUSH
24577: LD_INT 23
24579: PUSH
24580: LD_INT 24
24582: PUSH
24583: LD_INT 25
24585: PUSH
24586: LD_INT 26
24588: PUSH
24589: LD_INT 27
24591: PUSH
24592: LD_INT 28
24594: PUSH
24595: LD_INT 29
24597: PUSH
24598: LD_INT 30
24600: PUSH
24601: LD_INT 31
24603: PUSH
24604: LD_INT 32
24606: PUSH
24607: LD_INT 33
24609: PUSH
24610: LD_INT 34
24612: PUSH
24613: LD_INT 35
24615: PUSH
24616: LD_INT 36
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 101
24659: PUSH
24660: LD_INT 102
24662: PUSH
24663: LD_INT 103
24665: PUSH
24666: LD_INT 104
24668: PUSH
24669: LD_INT 105
24671: PUSH
24672: LD_INT 106
24674: PUSH
24675: LD_INT 107
24677: PUSH
24678: LD_INT 108
24680: PUSH
24681: LD_INT 109
24683: PUSH
24684: LD_INT 110
24686: PUSH
24687: LD_INT 111
24689: PUSH
24690: LD_INT 112
24692: PUSH
24693: LD_INT 113
24695: PUSH
24696: LD_INT 114
24698: PUSH
24699: LD_INT 115
24701: PUSH
24702: LD_INT 116
24704: PUSH
24705: LD_INT 117
24707: PUSH
24708: LD_INT 118
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: ST_TO_ADDR
24735: GO 24738
24737: POP
// end else
24738: GO 24969
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24740: LD_ADDR_VAR 0 2
24744: PUSH
24745: LD_INT 1
24747: PUSH
24748: LD_INT 2
24750: PUSH
24751: LD_INT 3
24753: PUSH
24754: LD_INT 4
24756: PUSH
24757: LD_INT 5
24759: PUSH
24760: LD_INT 6
24762: PUSH
24763: LD_INT 7
24765: PUSH
24766: LD_INT 8
24768: PUSH
24769: LD_INT 9
24771: PUSH
24772: LD_INT 10
24774: PUSH
24775: LD_INT 11
24777: PUSH
24778: LD_INT 12
24780: PUSH
24781: LD_INT 13
24783: PUSH
24784: LD_INT 14
24786: PUSH
24787: LD_INT 15
24789: PUSH
24790: LD_INT 16
24792: PUSH
24793: LD_INT 17
24795: PUSH
24796: LD_INT 18
24798: PUSH
24799: LD_INT 19
24801: PUSH
24802: LD_INT 20
24804: PUSH
24805: LD_INT 21
24807: PUSH
24808: LD_INT 22
24810: PUSH
24811: LD_INT 23
24813: PUSH
24814: LD_INT 24
24816: PUSH
24817: LD_INT 25
24819: PUSH
24820: LD_INT 26
24822: PUSH
24823: LD_INT 27
24825: PUSH
24826: LD_INT 28
24828: PUSH
24829: LD_INT 29
24831: PUSH
24832: LD_INT 30
24834: PUSH
24835: LD_INT 31
24837: PUSH
24838: LD_INT 32
24840: PUSH
24841: LD_INT 33
24843: PUSH
24844: LD_INT 34
24846: PUSH
24847: LD_INT 35
24849: PUSH
24850: LD_INT 36
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 101
24893: PUSH
24894: LD_INT 102
24896: PUSH
24897: LD_INT 103
24899: PUSH
24900: LD_INT 104
24902: PUSH
24903: LD_INT 105
24905: PUSH
24906: LD_INT 106
24908: PUSH
24909: LD_INT 107
24911: PUSH
24912: LD_INT 108
24914: PUSH
24915: LD_INT 109
24917: PUSH
24918: LD_INT 110
24920: PUSH
24921: LD_INT 111
24923: PUSH
24924: LD_INT 112
24926: PUSH
24927: LD_INT 113
24929: PUSH
24930: LD_INT 114
24932: PUSH
24933: LD_INT 115
24935: PUSH
24936: LD_INT 116
24938: PUSH
24939: LD_INT 117
24941: PUSH
24942: LD_INT 118
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: ST_TO_ADDR
// if result then
24969: LD_VAR 0 2
24973: IFFALSE 25759
// begin normal :=  ;
24975: LD_ADDR_VAR 0 5
24979: PUSH
24980: LD_STRING 
24982: ST_TO_ADDR
// hardcore :=  ;
24983: LD_ADDR_VAR 0 6
24987: PUSH
24988: LD_STRING 
24990: ST_TO_ADDR
// active :=  ;
24991: LD_ADDR_VAR 0 7
24995: PUSH
24996: LD_STRING 
24998: ST_TO_ADDR
// for i = 1 to normalCounter do
24999: LD_ADDR_VAR 0 8
25003: PUSH
25004: DOUBLE
25005: LD_INT 1
25007: DEC
25008: ST_TO_ADDR
25009: LD_EXP 52
25013: PUSH
25014: FOR_TO
25015: IFFALSE 25116
// begin tmp := 0 ;
25017: LD_ADDR_VAR 0 3
25021: PUSH
25022: LD_STRING 0
25024: ST_TO_ADDR
// if result [ 1 ] then
25025: LD_VAR 0 2
25029: PUSH
25030: LD_INT 1
25032: ARRAY
25033: IFFALSE 25098
// if result [ 1 ] [ 1 ] = i then
25035: LD_VAR 0 2
25039: PUSH
25040: LD_INT 1
25042: ARRAY
25043: PUSH
25044: LD_INT 1
25046: ARRAY
25047: PUSH
25048: LD_VAR 0 8
25052: EQUAL
25053: IFFALSE 25098
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25055: LD_ADDR_VAR 0 2
25059: PUSH
25060: LD_VAR 0 2
25064: PPUSH
25065: LD_INT 1
25067: PPUSH
25068: LD_VAR 0 2
25072: PUSH
25073: LD_INT 1
25075: ARRAY
25076: PPUSH
25077: LD_INT 1
25079: PPUSH
25080: CALL_OW 3
25084: PPUSH
25085: CALL_OW 1
25089: ST_TO_ADDR
// tmp := 1 ;
25090: LD_ADDR_VAR 0 3
25094: PUSH
25095: LD_STRING 1
25097: ST_TO_ADDR
// end ; normal := normal & tmp ;
25098: LD_ADDR_VAR 0 5
25102: PUSH
25103: LD_VAR 0 5
25107: PUSH
25108: LD_VAR 0 3
25112: STR
25113: ST_TO_ADDR
// end ;
25114: GO 25014
25116: POP
25117: POP
// for i = 1 to hardcoreCounter do
25118: LD_ADDR_VAR 0 8
25122: PUSH
25123: DOUBLE
25124: LD_INT 1
25126: DEC
25127: ST_TO_ADDR
25128: LD_EXP 53
25132: PUSH
25133: FOR_TO
25134: IFFALSE 25239
// begin tmp := 0 ;
25136: LD_ADDR_VAR 0 3
25140: PUSH
25141: LD_STRING 0
25143: ST_TO_ADDR
// if result [ 2 ] then
25144: LD_VAR 0 2
25148: PUSH
25149: LD_INT 2
25151: ARRAY
25152: IFFALSE 25221
// if result [ 2 ] [ 1 ] = 100 + i then
25154: LD_VAR 0 2
25158: PUSH
25159: LD_INT 2
25161: ARRAY
25162: PUSH
25163: LD_INT 1
25165: ARRAY
25166: PUSH
25167: LD_INT 100
25169: PUSH
25170: LD_VAR 0 8
25174: PLUS
25175: EQUAL
25176: IFFALSE 25221
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25178: LD_ADDR_VAR 0 2
25182: PUSH
25183: LD_VAR 0 2
25187: PPUSH
25188: LD_INT 2
25190: PPUSH
25191: LD_VAR 0 2
25195: PUSH
25196: LD_INT 2
25198: ARRAY
25199: PPUSH
25200: LD_INT 1
25202: PPUSH
25203: CALL_OW 3
25207: PPUSH
25208: CALL_OW 1
25212: ST_TO_ADDR
// tmp := 1 ;
25213: LD_ADDR_VAR 0 3
25217: PUSH
25218: LD_STRING 1
25220: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25221: LD_ADDR_VAR 0 6
25225: PUSH
25226: LD_VAR 0 6
25230: PUSH
25231: LD_VAR 0 3
25235: STR
25236: ST_TO_ADDR
// end ;
25237: GO 25133
25239: POP
25240: POP
// if isGameLoad then
25241: LD_VAR 0 1
25245: IFFALSE 25720
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25247: LD_ADDR_VAR 0 4
25251: PUSH
25252: LD_EXP 56
25256: PUSH
25257: LD_EXP 55
25261: PUSH
25262: LD_EXP 57
25266: PUSH
25267: LD_EXP 54
25271: PUSH
25272: LD_EXP 58
25276: PUSH
25277: LD_EXP 59
25281: PUSH
25282: LD_EXP 60
25286: PUSH
25287: LD_EXP 61
25291: PUSH
25292: LD_EXP 62
25296: PUSH
25297: LD_EXP 63
25301: PUSH
25302: LD_EXP 64
25306: PUSH
25307: LD_EXP 65
25311: PUSH
25312: LD_EXP 66
25316: PUSH
25317: LD_EXP 67
25321: PUSH
25322: LD_EXP 75
25326: PUSH
25327: LD_EXP 76
25331: PUSH
25332: LD_EXP 77
25336: PUSH
25337: LD_EXP 78
25341: PUSH
25342: LD_EXP 80
25346: PUSH
25347: LD_EXP 81
25351: PUSH
25352: LD_EXP 82
25356: PUSH
25357: LD_EXP 85
25361: PUSH
25362: LD_EXP 87
25366: PUSH
25367: LD_EXP 88
25371: PUSH
25372: LD_EXP 89
25376: PUSH
25377: LD_EXP 91
25381: PUSH
25382: LD_EXP 92
25386: PUSH
25387: LD_EXP 95
25391: PUSH
25392: LD_EXP 96
25396: PUSH
25397: LD_EXP 97
25401: PUSH
25402: LD_EXP 98
25406: PUSH
25407: LD_EXP 99
25411: PUSH
25412: LD_EXP 100
25416: PUSH
25417: LD_EXP 101
25421: PUSH
25422: LD_EXP 102
25426: PUSH
25427: LD_EXP 103
25431: PUSH
25432: LD_EXP 68
25436: PUSH
25437: LD_EXP 69
25441: PUSH
25442: LD_EXP 72
25446: PUSH
25447: LD_EXP 73
25451: PUSH
25452: LD_EXP 74
25456: PUSH
25457: LD_EXP 70
25461: PUSH
25462: LD_EXP 71
25466: PUSH
25467: LD_EXP 79
25471: PUSH
25472: LD_EXP 83
25476: PUSH
25477: LD_EXP 84
25481: PUSH
25482: LD_EXP 86
25486: PUSH
25487: LD_EXP 90
25491: PUSH
25492: LD_EXP 93
25496: PUSH
25497: LD_EXP 94
25501: PUSH
25502: LD_EXP 104
25506: PUSH
25507: LD_EXP 105
25511: PUSH
25512: LD_EXP 106
25516: PUSH
25517: LD_EXP 107
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: ST_TO_ADDR
// tmp :=  ;
25578: LD_ADDR_VAR 0 3
25582: PUSH
25583: LD_STRING 
25585: ST_TO_ADDR
// for i = 1 to normalCounter do
25586: LD_ADDR_VAR 0 8
25590: PUSH
25591: DOUBLE
25592: LD_INT 1
25594: DEC
25595: ST_TO_ADDR
25596: LD_EXP 52
25600: PUSH
25601: FOR_TO
25602: IFFALSE 25638
// begin if flags [ i ] then
25604: LD_VAR 0 4
25608: PUSH
25609: LD_VAR 0 8
25613: ARRAY
25614: IFFALSE 25636
// tmp := tmp & i & ; ;
25616: LD_ADDR_VAR 0 3
25620: PUSH
25621: LD_VAR 0 3
25625: PUSH
25626: LD_VAR 0 8
25630: STR
25631: PUSH
25632: LD_STRING ;
25634: STR
25635: ST_TO_ADDR
// end ;
25636: GO 25601
25638: POP
25639: POP
// for i = 1 to hardcoreCounter do
25640: LD_ADDR_VAR 0 8
25644: PUSH
25645: DOUBLE
25646: LD_INT 1
25648: DEC
25649: ST_TO_ADDR
25650: LD_EXP 53
25654: PUSH
25655: FOR_TO
25656: IFFALSE 25702
// begin if flags [ normalCounter + i ] then
25658: LD_VAR 0 4
25662: PUSH
25663: LD_EXP 52
25667: PUSH
25668: LD_VAR 0 8
25672: PLUS
25673: ARRAY
25674: IFFALSE 25700
// tmp := tmp & ( 100 + i ) & ; ;
25676: LD_ADDR_VAR 0 3
25680: PUSH
25681: LD_VAR 0 3
25685: PUSH
25686: LD_INT 100
25688: PUSH
25689: LD_VAR 0 8
25693: PLUS
25694: STR
25695: PUSH
25696: LD_STRING ;
25698: STR
25699: ST_TO_ADDR
// end ;
25700: GO 25655
25702: POP
25703: POP
// if tmp then
25704: LD_VAR 0 3
25708: IFFALSE 25720
// active := tmp ;
25710: LD_ADDR_VAR 0 7
25714: PUSH
25715: LD_VAR 0 3
25719: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25720: LD_STRING getStreamItemsFromMission("
25722: PUSH
25723: LD_VAR 0 5
25727: STR
25728: PUSH
25729: LD_STRING ","
25731: STR
25732: PUSH
25733: LD_VAR 0 6
25737: STR
25738: PUSH
25739: LD_STRING ","
25741: STR
25742: PUSH
25743: LD_VAR 0 7
25747: STR
25748: PUSH
25749: LD_STRING ")
25751: STR
25752: PPUSH
25753: CALL_OW 559
// end else
25757: GO 25766
// ToLua ( getStreamItemsFromMission("","","") ) ;
25759: LD_STRING getStreamItemsFromMission("","","")
25761: PPUSH
25762: CALL_OW 559
// end ;
25766: LD_VAR 0 2
25770: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25771: LD_EXP 51
25775: PUSH
25776: LD_EXP 56
25780: AND
25781: IFFALSE 25905
25783: GO 25785
25785: DISABLE
25786: LD_INT 0
25788: PPUSH
25789: PPUSH
// begin enable ;
25790: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25791: LD_ADDR_VAR 0 2
25795: PUSH
25796: LD_INT 22
25798: PUSH
25799: LD_OWVAR 2
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 2
25810: PUSH
25811: LD_INT 34
25813: PUSH
25814: LD_INT 7
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 34
25823: PUSH
25824: LD_INT 45
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 34
25833: PUSH
25834: LD_INT 28
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 34
25843: PUSH
25844: LD_INT 47
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PPUSH
25862: CALL_OW 69
25866: ST_TO_ADDR
// if not tmp then
25867: LD_VAR 0 2
25871: NOT
25872: IFFALSE 25876
// exit ;
25874: GO 25905
// for i in tmp do
25876: LD_ADDR_VAR 0 1
25880: PUSH
25881: LD_VAR 0 2
25885: PUSH
25886: FOR_IN
25887: IFFALSE 25903
// begin SetLives ( i , 0 ) ;
25889: LD_VAR 0 1
25893: PPUSH
25894: LD_INT 0
25896: PPUSH
25897: CALL_OW 234
// end ;
25901: GO 25886
25903: POP
25904: POP
// end ;
25905: PPOPN 2
25907: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25908: LD_EXP 51
25912: PUSH
25913: LD_EXP 57
25917: AND
25918: IFFALSE 26002
25920: GO 25922
25922: DISABLE
25923: LD_INT 0
25925: PPUSH
25926: PPUSH
// begin enable ;
25927: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25928: LD_ADDR_VAR 0 2
25932: PUSH
25933: LD_INT 22
25935: PUSH
25936: LD_OWVAR 2
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 32
25947: PUSH
25948: LD_INT 3
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PPUSH
25959: CALL_OW 69
25963: ST_TO_ADDR
// if not tmp then
25964: LD_VAR 0 2
25968: NOT
25969: IFFALSE 25973
// exit ;
25971: GO 26002
// for i in tmp do
25973: LD_ADDR_VAR 0 1
25977: PUSH
25978: LD_VAR 0 2
25982: PUSH
25983: FOR_IN
25984: IFFALSE 26000
// begin SetLives ( i , 0 ) ;
25986: LD_VAR 0 1
25990: PPUSH
25991: LD_INT 0
25993: PPUSH
25994: CALL_OW 234
// end ;
25998: GO 25983
26000: POP
26001: POP
// end ;
26002: PPOPN 2
26004: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26005: LD_EXP 51
26009: PUSH
26010: LD_EXP 54
26014: AND
26015: IFFALSE 26108
26017: GO 26019
26019: DISABLE
26020: LD_INT 0
26022: PPUSH
// begin enable ;
26023: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26024: LD_ADDR_VAR 0 1
26028: PUSH
26029: LD_INT 22
26031: PUSH
26032: LD_OWVAR 2
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: LD_INT 25
26046: PUSH
26047: LD_INT 5
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 25
26056: PUSH
26057: LD_INT 9
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 25
26066: PUSH
26067: LD_INT 8
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PPUSH
26084: CALL_OW 69
26088: PUSH
26089: FOR_IN
26090: IFFALSE 26106
// begin SetClass ( i , 1 ) ;
26092: LD_VAR 0 1
26096: PPUSH
26097: LD_INT 1
26099: PPUSH
26100: CALL_OW 336
// end ;
26104: GO 26089
26106: POP
26107: POP
// end ;
26108: PPOPN 1
26110: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26111: LD_EXP 51
26115: PUSH
26116: LD_EXP 55
26120: AND
26121: PUSH
26122: LD_OWVAR 65
26126: PUSH
26127: LD_INT 7
26129: LESS
26130: AND
26131: IFFALSE 26145
26133: GO 26135
26135: DISABLE
// begin enable ;
26136: ENABLE
// game_speed := 7 ;
26137: LD_ADDR_OWVAR 65
26141: PUSH
26142: LD_INT 7
26144: ST_TO_ADDR
// end ;
26145: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26146: LD_EXP 51
26150: PUSH
26151: LD_EXP 58
26155: AND
26156: IFFALSE 26358
26158: GO 26160
26160: DISABLE
26161: LD_INT 0
26163: PPUSH
26164: PPUSH
26165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26166: LD_ADDR_VAR 0 3
26170: PUSH
26171: LD_INT 81
26173: PUSH
26174: LD_OWVAR 2
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 21
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PPUSH
26197: CALL_OW 69
26201: ST_TO_ADDR
// if not tmp then
26202: LD_VAR 0 3
26206: NOT
26207: IFFALSE 26211
// exit ;
26209: GO 26358
// if tmp > 5 then
26211: LD_VAR 0 3
26215: PUSH
26216: LD_INT 5
26218: GREATER
26219: IFFALSE 26231
// k := 5 else
26221: LD_ADDR_VAR 0 2
26225: PUSH
26226: LD_INT 5
26228: ST_TO_ADDR
26229: GO 26241
// k := tmp ;
26231: LD_ADDR_VAR 0 2
26235: PUSH
26236: LD_VAR 0 3
26240: ST_TO_ADDR
// for i := 1 to k do
26241: LD_ADDR_VAR 0 1
26245: PUSH
26246: DOUBLE
26247: LD_INT 1
26249: DEC
26250: ST_TO_ADDR
26251: LD_VAR 0 2
26255: PUSH
26256: FOR_TO
26257: IFFALSE 26356
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26259: LD_VAR 0 3
26263: PUSH
26264: LD_VAR 0 1
26268: ARRAY
26269: PPUSH
26270: LD_VAR 0 1
26274: PUSH
26275: LD_INT 4
26277: MOD
26278: PUSH
26279: LD_INT 1
26281: PLUS
26282: PPUSH
26283: CALL_OW 259
26287: PUSH
26288: LD_INT 10
26290: LESS
26291: IFFALSE 26354
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26293: LD_VAR 0 3
26297: PUSH
26298: LD_VAR 0 1
26302: ARRAY
26303: PPUSH
26304: LD_VAR 0 1
26308: PUSH
26309: LD_INT 4
26311: MOD
26312: PUSH
26313: LD_INT 1
26315: PLUS
26316: PPUSH
26317: LD_VAR 0 3
26321: PUSH
26322: LD_VAR 0 1
26326: ARRAY
26327: PPUSH
26328: LD_VAR 0 1
26332: PUSH
26333: LD_INT 4
26335: MOD
26336: PUSH
26337: LD_INT 1
26339: PLUS
26340: PPUSH
26341: CALL_OW 259
26345: PUSH
26346: LD_INT 1
26348: PLUS
26349: PPUSH
26350: CALL_OW 237
26354: GO 26256
26356: POP
26357: POP
// end ;
26358: PPOPN 3
26360: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26361: LD_EXP 51
26365: PUSH
26366: LD_EXP 59
26370: AND
26371: IFFALSE 26391
26373: GO 26375
26375: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26376: LD_INT 4
26378: PPUSH
26379: LD_OWVAR 2
26383: PPUSH
26384: LD_INT 0
26386: PPUSH
26387: CALL_OW 324
26391: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26392: LD_EXP 51
26396: PUSH
26397: LD_EXP 88
26401: AND
26402: IFFALSE 26422
26404: GO 26406
26406: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26407: LD_INT 19
26409: PPUSH
26410: LD_OWVAR 2
26414: PPUSH
26415: LD_INT 0
26417: PPUSH
26418: CALL_OW 324
26422: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26423: LD_EXP 51
26427: PUSH
26428: LD_EXP 60
26432: AND
26433: IFFALSE 26535
26435: GO 26437
26437: DISABLE
26438: LD_INT 0
26440: PPUSH
26441: PPUSH
// begin enable ;
26442: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26443: LD_ADDR_VAR 0 2
26447: PUSH
26448: LD_INT 22
26450: PUSH
26451: LD_OWVAR 2
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: LD_INT 34
26465: PUSH
26466: LD_INT 11
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 34
26475: PUSH
26476: LD_INT 30
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: LIST
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PPUSH
26492: CALL_OW 69
26496: ST_TO_ADDR
// if not tmp then
26497: LD_VAR 0 2
26501: NOT
26502: IFFALSE 26506
// exit ;
26504: GO 26535
// for i in tmp do
26506: LD_ADDR_VAR 0 1
26510: PUSH
26511: LD_VAR 0 2
26515: PUSH
26516: FOR_IN
26517: IFFALSE 26533
// begin SetLives ( i , 0 ) ;
26519: LD_VAR 0 1
26523: PPUSH
26524: LD_INT 0
26526: PPUSH
26527: CALL_OW 234
// end ;
26531: GO 26516
26533: POP
26534: POP
// end ;
26535: PPOPN 2
26537: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26538: LD_EXP 51
26542: PUSH
26543: LD_EXP 61
26547: AND
26548: IFFALSE 26568
26550: GO 26552
26552: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26553: LD_INT 32
26555: PPUSH
26556: LD_OWVAR 2
26560: PPUSH
26561: LD_INT 0
26563: PPUSH
26564: CALL_OW 324
26568: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26569: LD_EXP 51
26573: PUSH
26574: LD_EXP 62
26578: AND
26579: IFFALSE 26760
26581: GO 26583
26583: DISABLE
26584: LD_INT 0
26586: PPUSH
26587: PPUSH
26588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26589: LD_ADDR_VAR 0 2
26593: PUSH
26594: LD_INT 22
26596: PUSH
26597: LD_OWVAR 2
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 33
26608: PUSH
26609: LD_INT 3
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PPUSH
26620: CALL_OW 69
26624: ST_TO_ADDR
// if not tmp then
26625: LD_VAR 0 2
26629: NOT
26630: IFFALSE 26634
// exit ;
26632: GO 26760
// side := 0 ;
26634: LD_ADDR_VAR 0 3
26638: PUSH
26639: LD_INT 0
26641: ST_TO_ADDR
// for i := 1 to 8 do
26642: LD_ADDR_VAR 0 1
26646: PUSH
26647: DOUBLE
26648: LD_INT 1
26650: DEC
26651: ST_TO_ADDR
26652: LD_INT 8
26654: PUSH
26655: FOR_TO
26656: IFFALSE 26704
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26658: LD_OWVAR 2
26662: PUSH
26663: LD_VAR 0 1
26667: NONEQUAL
26668: PUSH
26669: LD_OWVAR 2
26673: PPUSH
26674: LD_VAR 0 1
26678: PPUSH
26679: CALL_OW 81
26683: PUSH
26684: LD_INT 2
26686: EQUAL
26687: AND
26688: IFFALSE 26702
// begin side := i ;
26690: LD_ADDR_VAR 0 3
26694: PUSH
26695: LD_VAR 0 1
26699: ST_TO_ADDR
// break ;
26700: GO 26704
// end ;
26702: GO 26655
26704: POP
26705: POP
// if not side then
26706: LD_VAR 0 3
26710: NOT
26711: IFFALSE 26715
// exit ;
26713: GO 26760
// for i := 1 to tmp do
26715: LD_ADDR_VAR 0 1
26719: PUSH
26720: DOUBLE
26721: LD_INT 1
26723: DEC
26724: ST_TO_ADDR
26725: LD_VAR 0 2
26729: PUSH
26730: FOR_TO
26731: IFFALSE 26758
// if Prob ( 60 ) then
26733: LD_INT 60
26735: PPUSH
26736: CALL_OW 13
26740: IFFALSE 26756
// SetSide ( i , side ) ;
26742: LD_VAR 0 1
26746: PPUSH
26747: LD_VAR 0 3
26751: PPUSH
26752: CALL_OW 235
26756: GO 26730
26758: POP
26759: POP
// end ;
26760: PPOPN 3
26762: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26763: LD_EXP 51
26767: PUSH
26768: LD_EXP 64
26772: AND
26773: IFFALSE 26892
26775: GO 26777
26777: DISABLE
26778: LD_INT 0
26780: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26781: LD_ADDR_VAR 0 1
26785: PUSH
26786: LD_INT 22
26788: PUSH
26789: LD_OWVAR 2
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 21
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 3
26810: PUSH
26811: LD_INT 23
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: LIST
26829: PPUSH
26830: CALL_OW 69
26834: PUSH
26835: FOR_IN
26836: IFFALSE 26890
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26838: LD_VAR 0 1
26842: PPUSH
26843: CALL_OW 257
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: LD_INT 2
26853: PUSH
26854: LD_INT 3
26856: PUSH
26857: LD_INT 4
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: IN
26866: IFFALSE 26888
// SetClass ( un , rand ( 1 , 4 ) ) ;
26868: LD_VAR 0 1
26872: PPUSH
26873: LD_INT 1
26875: PPUSH
26876: LD_INT 4
26878: PPUSH
26879: CALL_OW 12
26883: PPUSH
26884: CALL_OW 336
26888: GO 26835
26890: POP
26891: POP
// end ;
26892: PPOPN 1
26894: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26895: LD_EXP 51
26899: PUSH
26900: LD_EXP 63
26904: AND
26905: IFFALSE 26984
26907: GO 26909
26909: DISABLE
26910: LD_INT 0
26912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26913: LD_ADDR_VAR 0 1
26917: PUSH
26918: LD_INT 22
26920: PUSH
26921: LD_OWVAR 2
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 21
26932: PUSH
26933: LD_INT 3
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PPUSH
26944: CALL_OW 69
26948: ST_TO_ADDR
// if not tmp then
26949: LD_VAR 0 1
26953: NOT
26954: IFFALSE 26958
// exit ;
26956: GO 26984
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26958: LD_VAR 0 1
26962: PUSH
26963: LD_INT 1
26965: PPUSH
26966: LD_VAR 0 1
26970: PPUSH
26971: CALL_OW 12
26975: ARRAY
26976: PPUSH
26977: LD_INT 100
26979: PPUSH
26980: CALL_OW 234
// end ;
26984: PPOPN 1
26986: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26987: LD_EXP 51
26991: PUSH
26992: LD_EXP 65
26996: AND
26997: IFFALSE 27095
26999: GO 27001
27001: DISABLE
27002: LD_INT 0
27004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27005: LD_ADDR_VAR 0 1
27009: PUSH
27010: LD_INT 22
27012: PUSH
27013: LD_OWVAR 2
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 21
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PPUSH
27036: CALL_OW 69
27040: ST_TO_ADDR
// if not tmp then
27041: LD_VAR 0 1
27045: NOT
27046: IFFALSE 27050
// exit ;
27048: GO 27095
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27050: LD_VAR 0 1
27054: PUSH
27055: LD_INT 1
27057: PPUSH
27058: LD_VAR 0 1
27062: PPUSH
27063: CALL_OW 12
27067: ARRAY
27068: PPUSH
27069: LD_INT 1
27071: PPUSH
27072: LD_INT 4
27074: PPUSH
27075: CALL_OW 12
27079: PPUSH
27080: LD_INT 3000
27082: PPUSH
27083: LD_INT 9000
27085: PPUSH
27086: CALL_OW 12
27090: PPUSH
27091: CALL_OW 492
// end ;
27095: PPOPN 1
27097: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27098: LD_EXP 51
27102: PUSH
27103: LD_EXP 66
27107: AND
27108: IFFALSE 27128
27110: GO 27112
27112: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27113: LD_INT 1
27115: PPUSH
27116: LD_OWVAR 2
27120: PPUSH
27121: LD_INT 0
27123: PPUSH
27124: CALL_OW 324
27128: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27129: LD_EXP 51
27133: PUSH
27134: LD_EXP 67
27138: AND
27139: IFFALSE 27222
27141: GO 27143
27143: DISABLE
27144: LD_INT 0
27146: PPUSH
27147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27148: LD_ADDR_VAR 0 2
27152: PUSH
27153: LD_INT 22
27155: PUSH
27156: LD_OWVAR 2
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 21
27167: PUSH
27168: LD_INT 3
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PPUSH
27179: CALL_OW 69
27183: ST_TO_ADDR
// if not tmp then
27184: LD_VAR 0 2
27188: NOT
27189: IFFALSE 27193
// exit ;
27191: GO 27222
// for i in tmp do
27193: LD_ADDR_VAR 0 1
27197: PUSH
27198: LD_VAR 0 2
27202: PUSH
27203: FOR_IN
27204: IFFALSE 27220
// SetBLevel ( i , 10 ) ;
27206: LD_VAR 0 1
27210: PPUSH
27211: LD_INT 10
27213: PPUSH
27214: CALL_OW 241
27218: GO 27203
27220: POP
27221: POP
// end ;
27222: PPOPN 2
27224: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27225: LD_EXP 51
27229: PUSH
27230: LD_EXP 68
27234: AND
27235: IFFALSE 27346
27237: GO 27239
27239: DISABLE
27240: LD_INT 0
27242: PPUSH
27243: PPUSH
27244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27245: LD_ADDR_VAR 0 3
27249: PUSH
27250: LD_INT 22
27252: PUSH
27253: LD_OWVAR 2
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 25
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PPUSH
27276: CALL_OW 69
27280: ST_TO_ADDR
// if not tmp then
27281: LD_VAR 0 3
27285: NOT
27286: IFFALSE 27290
// exit ;
27288: GO 27346
// un := tmp [ rand ( 1 , tmp ) ] ;
27290: LD_ADDR_VAR 0 2
27294: PUSH
27295: LD_VAR 0 3
27299: PUSH
27300: LD_INT 1
27302: PPUSH
27303: LD_VAR 0 3
27307: PPUSH
27308: CALL_OW 12
27312: ARRAY
27313: ST_TO_ADDR
// if Crawls ( un ) then
27314: LD_VAR 0 2
27318: PPUSH
27319: CALL_OW 318
27323: IFFALSE 27334
// ComWalk ( un ) ;
27325: LD_VAR 0 2
27329: PPUSH
27330: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27334: LD_VAR 0 2
27338: PPUSH
27339: LD_INT 5
27341: PPUSH
27342: CALL_OW 336
// end ;
27346: PPOPN 3
27348: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27349: LD_EXP 51
27353: PUSH
27354: LD_EXP 69
27358: AND
27359: PUSH
27360: LD_OWVAR 67
27364: PUSH
27365: LD_INT 4
27367: LESS
27368: AND
27369: IFFALSE 27388
27371: GO 27373
27373: DISABLE
// begin Difficulty := Difficulty + 1 ;
27374: LD_ADDR_OWVAR 67
27378: PUSH
27379: LD_OWVAR 67
27383: PUSH
27384: LD_INT 1
27386: PLUS
27387: ST_TO_ADDR
// end ;
27388: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27389: LD_EXP 51
27393: PUSH
27394: LD_EXP 70
27398: AND
27399: IFFALSE 27502
27401: GO 27403
27403: DISABLE
27404: LD_INT 0
27406: PPUSH
// begin for i := 1 to 5 do
27407: LD_ADDR_VAR 0 1
27411: PUSH
27412: DOUBLE
27413: LD_INT 1
27415: DEC
27416: ST_TO_ADDR
27417: LD_INT 5
27419: PUSH
27420: FOR_TO
27421: IFFALSE 27500
// begin uc_nation := nation_nature ;
27423: LD_ADDR_OWVAR 21
27427: PUSH
27428: LD_INT 0
27430: ST_TO_ADDR
// uc_side := 0 ;
27431: LD_ADDR_OWVAR 20
27435: PUSH
27436: LD_INT 0
27438: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27439: LD_ADDR_OWVAR 29
27443: PUSH
27444: LD_INT 12
27446: PUSH
27447: LD_INT 12
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: ST_TO_ADDR
// hc_agressivity := 20 ;
27454: LD_ADDR_OWVAR 35
27458: PUSH
27459: LD_INT 20
27461: ST_TO_ADDR
// hc_class := class_tiger ;
27462: LD_ADDR_OWVAR 28
27466: PUSH
27467: LD_INT 14
27469: ST_TO_ADDR
// hc_gallery :=  ;
27470: LD_ADDR_OWVAR 33
27474: PUSH
27475: LD_STRING 
27477: ST_TO_ADDR
// hc_name :=  ;
27478: LD_ADDR_OWVAR 26
27482: PUSH
27483: LD_STRING 
27485: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27486: CALL_OW 44
27490: PPUSH
27491: LD_INT 0
27493: PPUSH
27494: CALL_OW 51
// end ;
27498: GO 27420
27500: POP
27501: POP
// end ;
27502: PPOPN 1
27504: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27505: LD_EXP 51
27509: PUSH
27510: LD_EXP 71
27514: AND
27515: IFFALSE 27524
27517: GO 27519
27519: DISABLE
// StreamSibBomb ;
27520: CALL 27525 0 0
27524: END
// export function StreamSibBomb ; var i , x , y ; begin
27525: LD_INT 0
27527: PPUSH
27528: PPUSH
27529: PPUSH
27530: PPUSH
// result := false ;
27531: LD_ADDR_VAR 0 1
27535: PUSH
27536: LD_INT 0
27538: ST_TO_ADDR
// for i := 1 to 16 do
27539: LD_ADDR_VAR 0 2
27543: PUSH
27544: DOUBLE
27545: LD_INT 1
27547: DEC
27548: ST_TO_ADDR
27549: LD_INT 16
27551: PUSH
27552: FOR_TO
27553: IFFALSE 27752
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27555: LD_ADDR_VAR 0 3
27559: PUSH
27560: LD_INT 10
27562: PUSH
27563: LD_INT 20
27565: PUSH
27566: LD_INT 30
27568: PUSH
27569: LD_INT 40
27571: PUSH
27572: LD_INT 50
27574: PUSH
27575: LD_INT 60
27577: PUSH
27578: LD_INT 70
27580: PUSH
27581: LD_INT 80
27583: PUSH
27584: LD_INT 90
27586: PUSH
27587: LD_INT 100
27589: PUSH
27590: LD_INT 110
27592: PUSH
27593: LD_INT 120
27595: PUSH
27596: LD_INT 130
27598: PUSH
27599: LD_INT 140
27601: PUSH
27602: LD_INT 150
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 1
27624: PPUSH
27625: LD_INT 15
27627: PPUSH
27628: CALL_OW 12
27632: ARRAY
27633: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27634: LD_ADDR_VAR 0 4
27638: PUSH
27639: LD_INT 10
27641: PUSH
27642: LD_INT 20
27644: PUSH
27645: LD_INT 30
27647: PUSH
27648: LD_INT 40
27650: PUSH
27651: LD_INT 50
27653: PUSH
27654: LD_INT 60
27656: PUSH
27657: LD_INT 70
27659: PUSH
27660: LD_INT 80
27662: PUSH
27663: LD_INT 90
27665: PUSH
27666: LD_INT 100
27668: PUSH
27669: LD_INT 110
27671: PUSH
27672: LD_INT 120
27674: PUSH
27675: LD_INT 130
27677: PUSH
27678: LD_INT 140
27680: PUSH
27681: LD_INT 150
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 1
27703: PPUSH
27704: LD_INT 15
27706: PPUSH
27707: CALL_OW 12
27711: ARRAY
27712: ST_TO_ADDR
// if ValidHex ( x , y ) then
27713: LD_VAR 0 3
27717: PPUSH
27718: LD_VAR 0 4
27722: PPUSH
27723: CALL_OW 488
27727: IFFALSE 27750
// begin result := [ x , y ] ;
27729: LD_ADDR_VAR 0 1
27733: PUSH
27734: LD_VAR 0 3
27738: PUSH
27739: LD_VAR 0 4
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: ST_TO_ADDR
// break ;
27748: GO 27752
// end ; end ;
27750: GO 27552
27752: POP
27753: POP
// if result then
27754: LD_VAR 0 1
27758: IFFALSE 27818
// begin ToLua ( playSibBomb() ) ;
27760: LD_STRING playSibBomb()
27762: PPUSH
27763: CALL_OW 559
// wait ( 0 0$14 ) ;
27767: LD_INT 490
27769: PPUSH
27770: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27774: LD_VAR 0 1
27778: PUSH
27779: LD_INT 1
27781: ARRAY
27782: PPUSH
27783: LD_VAR 0 1
27787: PUSH
27788: LD_INT 2
27790: ARRAY
27791: PPUSH
27792: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27796: LD_VAR 0 1
27800: PUSH
27801: LD_INT 1
27803: ARRAY
27804: PPUSH
27805: LD_VAR 0 1
27809: PUSH
27810: LD_INT 2
27812: ARRAY
27813: PPUSH
27814: CALL_OW 429
// end ; end ;
27818: LD_VAR 0 1
27822: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27823: LD_EXP 51
27827: PUSH
27828: LD_EXP 73
27832: AND
27833: IFFALSE 27845
27835: GO 27837
27837: DISABLE
// YouLost (  ) ;
27838: LD_STRING 
27840: PPUSH
27841: CALL_OW 104
27845: END
// every 0 0$1 trigger StreamModeActive and sFog do
27846: LD_EXP 51
27850: PUSH
27851: LD_EXP 72
27855: AND
27856: IFFALSE 27870
27858: GO 27860
27860: DISABLE
// FogOff ( your_side ) ;
27861: LD_OWVAR 2
27865: PPUSH
27866: CALL_OW 344
27870: END
// every 0 0$1 trigger StreamModeActive and sSun do
27871: LD_EXP 51
27875: PUSH
27876: LD_EXP 74
27880: AND
27881: IFFALSE 27909
27883: GO 27885
27885: DISABLE
// begin solar_recharge_percent := 0 ;
27886: LD_ADDR_OWVAR 79
27890: PUSH
27891: LD_INT 0
27893: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27894: LD_INT 10500
27896: PPUSH
27897: CALL_OW 67
// solar_recharge_percent := 100 ;
27901: LD_ADDR_OWVAR 79
27905: PUSH
27906: LD_INT 100
27908: ST_TO_ADDR
// end ;
27909: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27910: LD_EXP 51
27914: PUSH
27915: LD_EXP 75
27919: AND
27920: IFFALSE 28159
27922: GO 27924
27924: DISABLE
27925: LD_INT 0
27927: PPUSH
27928: PPUSH
27929: PPUSH
// begin tmp := [ ] ;
27930: LD_ADDR_VAR 0 3
27934: PUSH
27935: EMPTY
27936: ST_TO_ADDR
// for i := 1 to 6 do
27937: LD_ADDR_VAR 0 1
27941: PUSH
27942: DOUBLE
27943: LD_INT 1
27945: DEC
27946: ST_TO_ADDR
27947: LD_INT 6
27949: PUSH
27950: FOR_TO
27951: IFFALSE 28056
// begin uc_nation := nation_nature ;
27953: LD_ADDR_OWVAR 21
27957: PUSH
27958: LD_INT 0
27960: ST_TO_ADDR
// uc_side := 0 ;
27961: LD_ADDR_OWVAR 20
27965: PUSH
27966: LD_INT 0
27968: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27969: LD_ADDR_OWVAR 29
27973: PUSH
27974: LD_INT 12
27976: PUSH
27977: LD_INT 12
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: ST_TO_ADDR
// hc_agressivity := 20 ;
27984: LD_ADDR_OWVAR 35
27988: PUSH
27989: LD_INT 20
27991: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27992: LD_ADDR_OWVAR 28
27996: PUSH
27997: LD_INT 17
27999: ST_TO_ADDR
// hc_gallery :=  ;
28000: LD_ADDR_OWVAR 33
28004: PUSH
28005: LD_STRING 
28007: ST_TO_ADDR
// hc_name :=  ;
28008: LD_ADDR_OWVAR 26
28012: PUSH
28013: LD_STRING 
28015: ST_TO_ADDR
// un := CreateHuman ;
28016: LD_ADDR_VAR 0 2
28020: PUSH
28021: CALL_OW 44
28025: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28026: LD_VAR 0 2
28030: PPUSH
28031: LD_INT 1
28033: PPUSH
28034: CALL_OW 51
// tmp := tmp ^ un ;
28038: LD_ADDR_VAR 0 3
28042: PUSH
28043: LD_VAR 0 3
28047: PUSH
28048: LD_VAR 0 2
28052: ADD
28053: ST_TO_ADDR
// end ;
28054: GO 27950
28056: POP
28057: POP
// repeat wait ( 0 0$1 ) ;
28058: LD_INT 35
28060: PPUSH
28061: CALL_OW 67
// for un in tmp do
28065: LD_ADDR_VAR 0 2
28069: PUSH
28070: LD_VAR 0 3
28074: PUSH
28075: FOR_IN
28076: IFFALSE 28150
// begin if IsDead ( un ) then
28078: LD_VAR 0 2
28082: PPUSH
28083: CALL_OW 301
28087: IFFALSE 28107
// begin tmp := tmp diff un ;
28089: LD_ADDR_VAR 0 3
28093: PUSH
28094: LD_VAR 0 3
28098: PUSH
28099: LD_VAR 0 2
28103: DIFF
28104: ST_TO_ADDR
// continue ;
28105: GO 28075
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28107: LD_VAR 0 2
28111: PPUSH
28112: LD_INT 3
28114: PUSH
28115: LD_INT 22
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PPUSH
28129: CALL_OW 69
28133: PPUSH
28134: LD_VAR 0 2
28138: PPUSH
28139: CALL_OW 74
28143: PPUSH
28144: CALL_OW 115
// end ;
28148: GO 28075
28150: POP
28151: POP
// until not tmp ;
28152: LD_VAR 0 3
28156: NOT
28157: IFFALSE 28058
// end ;
28159: PPOPN 3
28161: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28162: LD_EXP 51
28166: PUSH
28167: LD_EXP 76
28171: AND
28172: IFFALSE 28226
28174: GO 28176
28176: DISABLE
// begin ToLua ( displayTroll(); ) ;
28177: LD_STRING displayTroll();
28179: PPUSH
28180: CALL_OW 559
// wait ( 3 3$00 ) ;
28184: LD_INT 6300
28186: PPUSH
28187: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28191: LD_STRING hideTroll();
28193: PPUSH
28194: CALL_OW 559
// wait ( 1 1$00 ) ;
28198: LD_INT 2100
28200: PPUSH
28201: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28205: LD_STRING displayTroll();
28207: PPUSH
28208: CALL_OW 559
// wait ( 1 1$00 ) ;
28212: LD_INT 2100
28214: PPUSH
28215: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28219: LD_STRING hideTroll();
28221: PPUSH
28222: CALL_OW 559
// end ;
28226: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28227: LD_EXP 51
28231: PUSH
28232: LD_EXP 77
28236: AND
28237: IFFALSE 28300
28239: GO 28241
28241: DISABLE
28242: LD_INT 0
28244: PPUSH
// begin p := 0 ;
28245: LD_ADDR_VAR 0 1
28249: PUSH
28250: LD_INT 0
28252: ST_TO_ADDR
// repeat game_speed := 1 ;
28253: LD_ADDR_OWVAR 65
28257: PUSH
28258: LD_INT 1
28260: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28261: LD_INT 35
28263: PPUSH
28264: CALL_OW 67
// p := p + 1 ;
28268: LD_ADDR_VAR 0 1
28272: PUSH
28273: LD_VAR 0 1
28277: PUSH
28278: LD_INT 1
28280: PLUS
28281: ST_TO_ADDR
// until p >= 60 ;
28282: LD_VAR 0 1
28286: PUSH
28287: LD_INT 60
28289: GREATEREQUAL
28290: IFFALSE 28253
// game_speed := 4 ;
28292: LD_ADDR_OWVAR 65
28296: PUSH
28297: LD_INT 4
28299: ST_TO_ADDR
// end ;
28300: PPOPN 1
28302: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28303: LD_EXP 51
28307: PUSH
28308: LD_EXP 78
28312: AND
28313: IFFALSE 28459
28315: GO 28317
28317: DISABLE
28318: LD_INT 0
28320: PPUSH
28321: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28322: LD_ADDR_VAR 0 1
28326: PUSH
28327: LD_INT 22
28329: PUSH
28330: LD_OWVAR 2
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 2
28341: PUSH
28342: LD_INT 30
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 30
28354: PUSH
28355: LD_INT 1
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: LIST
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PPUSH
28371: CALL_OW 69
28375: ST_TO_ADDR
// if not depot then
28376: LD_VAR 0 1
28380: NOT
28381: IFFALSE 28385
// exit ;
28383: GO 28459
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28385: LD_ADDR_VAR 0 2
28389: PUSH
28390: LD_VAR 0 1
28394: PUSH
28395: LD_INT 1
28397: PPUSH
28398: LD_VAR 0 1
28402: PPUSH
28403: CALL_OW 12
28407: ARRAY
28408: PPUSH
28409: CALL_OW 274
28413: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28414: LD_VAR 0 2
28418: PPUSH
28419: LD_INT 1
28421: PPUSH
28422: LD_INT 0
28424: PPUSH
28425: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28429: LD_VAR 0 2
28433: PPUSH
28434: LD_INT 2
28436: PPUSH
28437: LD_INT 0
28439: PPUSH
28440: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28444: LD_VAR 0 2
28448: PPUSH
28449: LD_INT 3
28451: PPUSH
28452: LD_INT 0
28454: PPUSH
28455: CALL_OW 277
// end ;
28459: PPOPN 2
28461: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28462: LD_EXP 51
28466: PUSH
28467: LD_EXP 79
28471: AND
28472: IFFALSE 28569
28474: GO 28476
28476: DISABLE
28477: LD_INT 0
28479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28480: LD_ADDR_VAR 0 1
28484: PUSH
28485: LD_INT 22
28487: PUSH
28488: LD_OWVAR 2
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 21
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 3
28509: PUSH
28510: LD_INT 23
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: LIST
28528: PPUSH
28529: CALL_OW 69
28533: ST_TO_ADDR
// if not tmp then
28534: LD_VAR 0 1
28538: NOT
28539: IFFALSE 28543
// exit ;
28541: GO 28569
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28543: LD_VAR 0 1
28547: PUSH
28548: LD_INT 1
28550: PPUSH
28551: LD_VAR 0 1
28555: PPUSH
28556: CALL_OW 12
28560: ARRAY
28561: PPUSH
28562: LD_INT 200
28564: PPUSH
28565: CALL_OW 234
// end ;
28569: PPOPN 1
28571: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28572: LD_EXP 51
28576: PUSH
28577: LD_EXP 80
28581: AND
28582: IFFALSE 28661
28584: GO 28586
28586: DISABLE
28587: LD_INT 0
28589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28590: LD_ADDR_VAR 0 1
28594: PUSH
28595: LD_INT 22
28597: PUSH
28598: LD_OWVAR 2
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 21
28609: PUSH
28610: LD_INT 2
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PPUSH
28621: CALL_OW 69
28625: ST_TO_ADDR
// if not tmp then
28626: LD_VAR 0 1
28630: NOT
28631: IFFALSE 28635
// exit ;
28633: GO 28661
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28635: LD_VAR 0 1
28639: PUSH
28640: LD_INT 1
28642: PPUSH
28643: LD_VAR 0 1
28647: PPUSH
28648: CALL_OW 12
28652: ARRAY
28653: PPUSH
28654: LD_INT 60
28656: PPUSH
28657: CALL_OW 234
// end ;
28661: PPOPN 1
28663: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28664: LD_EXP 51
28668: PUSH
28669: LD_EXP 81
28673: AND
28674: IFFALSE 28773
28676: GO 28678
28678: DISABLE
28679: LD_INT 0
28681: PPUSH
28682: PPUSH
// begin enable ;
28683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28684: LD_ADDR_VAR 0 1
28688: PUSH
28689: LD_INT 22
28691: PUSH
28692: LD_OWVAR 2
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 61
28703: PUSH
28704: EMPTY
28705: LIST
28706: PUSH
28707: LD_INT 33
28709: PUSH
28710: LD_INT 2
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: LIST
28721: PPUSH
28722: CALL_OW 69
28726: ST_TO_ADDR
// if not tmp then
28727: LD_VAR 0 1
28731: NOT
28732: IFFALSE 28736
// exit ;
28734: GO 28773
// for i in tmp do
28736: LD_ADDR_VAR 0 2
28740: PUSH
28741: LD_VAR 0 1
28745: PUSH
28746: FOR_IN
28747: IFFALSE 28771
// if IsControledBy ( i ) then
28749: LD_VAR 0 2
28753: PPUSH
28754: CALL_OW 312
28758: IFFALSE 28769
// ComUnlink ( i ) ;
28760: LD_VAR 0 2
28764: PPUSH
28765: CALL_OW 136
28769: GO 28746
28771: POP
28772: POP
// end ;
28773: PPOPN 2
28775: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28776: LD_EXP 51
28780: PUSH
28781: LD_EXP 82
28785: AND
28786: IFFALSE 28926
28788: GO 28790
28790: DISABLE
28791: LD_INT 0
28793: PPUSH
28794: PPUSH
// begin ToLua ( displayPowell(); ) ;
28795: LD_STRING displayPowell();
28797: PPUSH
28798: CALL_OW 559
// uc_side := 0 ;
28802: LD_ADDR_OWVAR 20
28806: PUSH
28807: LD_INT 0
28809: ST_TO_ADDR
// uc_nation := 2 ;
28810: LD_ADDR_OWVAR 21
28814: PUSH
28815: LD_INT 2
28817: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28818: LD_ADDR_OWVAR 37
28822: PUSH
28823: LD_INT 14
28825: ST_TO_ADDR
// vc_engine := engine_siberite ;
28826: LD_ADDR_OWVAR 39
28830: PUSH
28831: LD_INT 3
28833: ST_TO_ADDR
// vc_control := control_apeman ;
28834: LD_ADDR_OWVAR 38
28838: PUSH
28839: LD_INT 5
28841: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28842: LD_ADDR_OWVAR 40
28846: PUSH
28847: LD_INT 29
28849: ST_TO_ADDR
// un := CreateVehicle ;
28850: LD_ADDR_VAR 0 2
28854: PUSH
28855: CALL_OW 45
28859: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28860: LD_VAR 0 2
28864: PPUSH
28865: LD_INT 1
28867: PPUSH
28868: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28872: LD_INT 35
28874: PPUSH
28875: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28879: LD_VAR 0 2
28883: PPUSH
28884: LD_INT 22
28886: PUSH
28887: LD_OWVAR 2
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PPUSH
28896: CALL_OW 69
28900: PPUSH
28901: LD_VAR 0 2
28905: PPUSH
28906: CALL_OW 74
28910: PPUSH
28911: CALL_OW 115
// until IsDead ( un ) ;
28915: LD_VAR 0 2
28919: PPUSH
28920: CALL_OW 301
28924: IFFALSE 28872
// end ;
28926: PPOPN 2
28928: END
// every 0 0$1 trigger StreamModeActive and sStu do
28929: LD_EXP 51
28933: PUSH
28934: LD_EXP 90
28938: AND
28939: IFFALSE 28955
28941: GO 28943
28943: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28944: LD_STRING displayStucuk();
28946: PPUSH
28947: CALL_OW 559
// ResetFog ;
28951: CALL_OW 335
// end ;
28955: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28956: LD_EXP 51
28960: PUSH
28961: LD_EXP 83
28965: AND
28966: IFFALSE 29107
28968: GO 28970
28970: DISABLE
28971: LD_INT 0
28973: PPUSH
28974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28975: LD_ADDR_VAR 0 2
28979: PUSH
28980: LD_INT 22
28982: PUSH
28983: LD_OWVAR 2
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 21
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PPUSH
29006: CALL_OW 69
29010: ST_TO_ADDR
// if not tmp then
29011: LD_VAR 0 2
29015: NOT
29016: IFFALSE 29020
// exit ;
29018: GO 29107
// un := tmp [ rand ( 1 , tmp ) ] ;
29020: LD_ADDR_VAR 0 1
29024: PUSH
29025: LD_VAR 0 2
29029: PUSH
29030: LD_INT 1
29032: PPUSH
29033: LD_VAR 0 2
29037: PPUSH
29038: CALL_OW 12
29042: ARRAY
29043: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29044: LD_VAR 0 1
29048: PPUSH
29049: LD_INT 0
29051: PPUSH
29052: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29056: LD_VAR 0 1
29060: PPUSH
29061: LD_OWVAR 3
29065: PUSH
29066: LD_VAR 0 1
29070: DIFF
29071: PPUSH
29072: LD_VAR 0 1
29076: PPUSH
29077: CALL_OW 74
29081: PPUSH
29082: CALL_OW 115
// wait ( 0 0$20 ) ;
29086: LD_INT 700
29088: PPUSH
29089: CALL_OW 67
// SetSide ( un , your_side ) ;
29093: LD_VAR 0 1
29097: PPUSH
29098: LD_OWVAR 2
29102: PPUSH
29103: CALL_OW 235
// end ;
29107: PPOPN 2
29109: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29110: LD_EXP 51
29114: PUSH
29115: LD_EXP 84
29119: AND
29120: IFFALSE 29226
29122: GO 29124
29124: DISABLE
29125: LD_INT 0
29127: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29128: LD_ADDR_VAR 0 1
29132: PUSH
29133: LD_INT 22
29135: PUSH
29136: LD_OWVAR 2
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 2
29147: PUSH
29148: LD_INT 30
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 30
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: LIST
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PPUSH
29177: CALL_OW 69
29181: ST_TO_ADDR
// if not depot then
29182: LD_VAR 0 1
29186: NOT
29187: IFFALSE 29191
// exit ;
29189: GO 29226
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29191: LD_VAR 0 1
29195: PUSH
29196: LD_INT 1
29198: ARRAY
29199: PPUSH
29200: CALL_OW 250
29204: PPUSH
29205: LD_VAR 0 1
29209: PUSH
29210: LD_INT 1
29212: ARRAY
29213: PPUSH
29214: CALL_OW 251
29218: PPUSH
29219: LD_INT 70
29221: PPUSH
29222: CALL_OW 495
// end ;
29226: PPOPN 1
29228: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29229: LD_EXP 51
29233: PUSH
29234: LD_EXP 85
29238: AND
29239: IFFALSE 29450
29241: GO 29243
29243: DISABLE
29244: LD_INT 0
29246: PPUSH
29247: PPUSH
29248: PPUSH
29249: PPUSH
29250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29251: LD_ADDR_VAR 0 5
29255: PUSH
29256: LD_INT 22
29258: PUSH
29259: LD_OWVAR 2
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 21
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PPUSH
29282: CALL_OW 69
29286: ST_TO_ADDR
// if not tmp then
29287: LD_VAR 0 5
29291: NOT
29292: IFFALSE 29296
// exit ;
29294: GO 29450
// for i in tmp do
29296: LD_ADDR_VAR 0 1
29300: PUSH
29301: LD_VAR 0 5
29305: PUSH
29306: FOR_IN
29307: IFFALSE 29448
// begin d := rand ( 0 , 5 ) ;
29309: LD_ADDR_VAR 0 4
29313: PUSH
29314: LD_INT 0
29316: PPUSH
29317: LD_INT 5
29319: PPUSH
29320: CALL_OW 12
29324: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29325: LD_ADDR_VAR 0 2
29329: PUSH
29330: LD_VAR 0 1
29334: PPUSH
29335: CALL_OW 250
29339: PPUSH
29340: LD_VAR 0 4
29344: PPUSH
29345: LD_INT 3
29347: PPUSH
29348: LD_INT 12
29350: PPUSH
29351: CALL_OW 12
29355: PPUSH
29356: CALL_OW 272
29360: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29361: LD_ADDR_VAR 0 3
29365: PUSH
29366: LD_VAR 0 1
29370: PPUSH
29371: CALL_OW 251
29375: PPUSH
29376: LD_VAR 0 4
29380: PPUSH
29381: LD_INT 3
29383: PPUSH
29384: LD_INT 12
29386: PPUSH
29387: CALL_OW 12
29391: PPUSH
29392: CALL_OW 273
29396: ST_TO_ADDR
// if ValidHex ( x , y ) then
29397: LD_VAR 0 2
29401: PPUSH
29402: LD_VAR 0 3
29406: PPUSH
29407: CALL_OW 488
29411: IFFALSE 29446
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29413: LD_VAR 0 1
29417: PPUSH
29418: LD_VAR 0 2
29422: PPUSH
29423: LD_VAR 0 3
29427: PPUSH
29428: LD_INT 3
29430: PPUSH
29431: LD_INT 6
29433: PPUSH
29434: CALL_OW 12
29438: PPUSH
29439: LD_INT 1
29441: PPUSH
29442: CALL_OW 483
// end ;
29446: GO 29306
29448: POP
29449: POP
// end ;
29450: PPOPN 5
29452: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29453: LD_EXP 51
29457: PUSH
29458: LD_EXP 86
29462: AND
29463: IFFALSE 29557
29465: GO 29467
29467: DISABLE
29468: LD_INT 0
29470: PPUSH
29471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29472: LD_ADDR_VAR 0 2
29476: PUSH
29477: LD_INT 22
29479: PUSH
29480: LD_OWVAR 2
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 32
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 21
29501: PUSH
29502: LD_INT 2
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: PPUSH
29514: CALL_OW 69
29518: ST_TO_ADDR
// if not tmp then
29519: LD_VAR 0 2
29523: NOT
29524: IFFALSE 29528
// exit ;
29526: GO 29557
// for i in tmp do
29528: LD_ADDR_VAR 0 1
29532: PUSH
29533: LD_VAR 0 2
29537: PUSH
29538: FOR_IN
29539: IFFALSE 29555
// SetFuel ( i , 0 ) ;
29541: LD_VAR 0 1
29545: PPUSH
29546: LD_INT 0
29548: PPUSH
29549: CALL_OW 240
29553: GO 29538
29555: POP
29556: POP
// end ;
29557: PPOPN 2
29559: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29560: LD_EXP 51
29564: PUSH
29565: LD_EXP 87
29569: AND
29570: IFFALSE 29636
29572: GO 29574
29574: DISABLE
29575: LD_INT 0
29577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29578: LD_ADDR_VAR 0 1
29582: PUSH
29583: LD_INT 22
29585: PUSH
29586: LD_OWVAR 2
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 30
29597: PUSH
29598: LD_INT 29
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PPUSH
29609: CALL_OW 69
29613: ST_TO_ADDR
// if not tmp then
29614: LD_VAR 0 1
29618: NOT
29619: IFFALSE 29623
// exit ;
29621: GO 29636
// DestroyUnit ( tmp [ 1 ] ) ;
29623: LD_VAR 0 1
29627: PUSH
29628: LD_INT 1
29630: ARRAY
29631: PPUSH
29632: CALL_OW 65
// end ;
29636: PPOPN 1
29638: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29639: LD_EXP 51
29643: PUSH
29644: LD_EXP 89
29648: AND
29649: IFFALSE 29778
29651: GO 29653
29653: DISABLE
29654: LD_INT 0
29656: PPUSH
// begin uc_side := 0 ;
29657: LD_ADDR_OWVAR 20
29661: PUSH
29662: LD_INT 0
29664: ST_TO_ADDR
// uc_nation := nation_arabian ;
29665: LD_ADDR_OWVAR 21
29669: PUSH
29670: LD_INT 2
29672: ST_TO_ADDR
// hc_gallery :=  ;
29673: LD_ADDR_OWVAR 33
29677: PUSH
29678: LD_STRING 
29680: ST_TO_ADDR
// hc_name :=  ;
29681: LD_ADDR_OWVAR 26
29685: PUSH
29686: LD_STRING 
29688: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29689: LD_INT 1
29691: PPUSH
29692: LD_INT 11
29694: PPUSH
29695: LD_INT 10
29697: PPUSH
29698: CALL_OW 380
// un := CreateHuman ;
29702: LD_ADDR_VAR 0 1
29706: PUSH
29707: CALL_OW 44
29711: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29712: LD_VAR 0 1
29716: PPUSH
29717: LD_INT 1
29719: PPUSH
29720: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29724: LD_INT 35
29726: PPUSH
29727: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29731: LD_VAR 0 1
29735: PPUSH
29736: LD_INT 22
29738: PUSH
29739: LD_OWVAR 2
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PPUSH
29748: CALL_OW 69
29752: PPUSH
29753: LD_VAR 0 1
29757: PPUSH
29758: CALL_OW 74
29762: PPUSH
29763: CALL_OW 115
// until IsDead ( un ) ;
29767: LD_VAR 0 1
29771: PPUSH
29772: CALL_OW 301
29776: IFFALSE 29724
// end ;
29778: PPOPN 1
29780: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29781: LD_EXP 51
29785: PUSH
29786: LD_EXP 91
29790: AND
29791: IFFALSE 29803
29793: GO 29795
29795: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29796: LD_STRING earthquake(getX(game), 0, 32)
29798: PPUSH
29799: CALL_OW 559
29803: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29804: LD_EXP 51
29808: PUSH
29809: LD_EXP 92
29813: AND
29814: IFFALSE 29905
29816: GO 29818
29818: DISABLE
29819: LD_INT 0
29821: PPUSH
// begin enable ;
29822: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29823: LD_ADDR_VAR 0 1
29827: PUSH
29828: LD_INT 22
29830: PUSH
29831: LD_OWVAR 2
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 21
29842: PUSH
29843: LD_INT 2
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 33
29852: PUSH
29853: LD_INT 3
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: LIST
29864: PPUSH
29865: CALL_OW 69
29869: ST_TO_ADDR
// if not tmp then
29870: LD_VAR 0 1
29874: NOT
29875: IFFALSE 29879
// exit ;
29877: GO 29905
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29879: LD_VAR 0 1
29883: PUSH
29884: LD_INT 1
29886: PPUSH
29887: LD_VAR 0 1
29891: PPUSH
29892: CALL_OW 12
29896: ARRAY
29897: PPUSH
29898: LD_INT 1
29900: PPUSH
29901: CALL_OW 234
// end ;
29905: PPOPN 1
29907: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29908: LD_EXP 51
29912: PUSH
29913: LD_EXP 93
29917: AND
29918: IFFALSE 30059
29920: GO 29922
29922: DISABLE
29923: LD_INT 0
29925: PPUSH
29926: PPUSH
29927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29928: LD_ADDR_VAR 0 3
29932: PUSH
29933: LD_INT 22
29935: PUSH
29936: LD_OWVAR 2
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 25
29947: PUSH
29948: LD_INT 1
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PPUSH
29959: CALL_OW 69
29963: ST_TO_ADDR
// if not tmp then
29964: LD_VAR 0 3
29968: NOT
29969: IFFALSE 29973
// exit ;
29971: GO 30059
// un := tmp [ rand ( 1 , tmp ) ] ;
29973: LD_ADDR_VAR 0 2
29977: PUSH
29978: LD_VAR 0 3
29982: PUSH
29983: LD_INT 1
29985: PPUSH
29986: LD_VAR 0 3
29990: PPUSH
29991: CALL_OW 12
29995: ARRAY
29996: ST_TO_ADDR
// if Crawls ( un ) then
29997: LD_VAR 0 2
30001: PPUSH
30002: CALL_OW 318
30006: IFFALSE 30017
// ComWalk ( un ) ;
30008: LD_VAR 0 2
30012: PPUSH
30013: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30017: LD_VAR 0 2
30021: PPUSH
30022: LD_INT 9
30024: PPUSH
30025: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30029: LD_INT 28
30031: PPUSH
30032: LD_OWVAR 2
30036: PPUSH
30037: LD_INT 2
30039: PPUSH
30040: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30044: LD_INT 29
30046: PPUSH
30047: LD_OWVAR 2
30051: PPUSH
30052: LD_INT 2
30054: PPUSH
30055: CALL_OW 322
// end ;
30059: PPOPN 3
30061: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30062: LD_EXP 51
30066: PUSH
30067: LD_EXP 94
30071: AND
30072: IFFALSE 30183
30074: GO 30076
30076: DISABLE
30077: LD_INT 0
30079: PPUSH
30080: PPUSH
30081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30082: LD_ADDR_VAR 0 3
30086: PUSH
30087: LD_INT 22
30089: PUSH
30090: LD_OWVAR 2
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 25
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PPUSH
30113: CALL_OW 69
30117: ST_TO_ADDR
// if not tmp then
30118: LD_VAR 0 3
30122: NOT
30123: IFFALSE 30127
// exit ;
30125: GO 30183
// un := tmp [ rand ( 1 , tmp ) ] ;
30127: LD_ADDR_VAR 0 2
30131: PUSH
30132: LD_VAR 0 3
30136: PUSH
30137: LD_INT 1
30139: PPUSH
30140: LD_VAR 0 3
30144: PPUSH
30145: CALL_OW 12
30149: ARRAY
30150: ST_TO_ADDR
// if Crawls ( un ) then
30151: LD_VAR 0 2
30155: PPUSH
30156: CALL_OW 318
30160: IFFALSE 30171
// ComWalk ( un ) ;
30162: LD_VAR 0 2
30166: PPUSH
30167: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30171: LD_VAR 0 2
30175: PPUSH
30176: LD_INT 8
30178: PPUSH
30179: CALL_OW 336
// end ;
30183: PPOPN 3
30185: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30186: LD_EXP 51
30190: PUSH
30191: LD_EXP 95
30195: AND
30196: IFFALSE 30340
30198: GO 30200
30200: DISABLE
30201: LD_INT 0
30203: PPUSH
30204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30205: LD_ADDR_VAR 0 2
30209: PUSH
30210: LD_INT 22
30212: PUSH
30213: LD_OWVAR 2
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 21
30224: PUSH
30225: LD_INT 2
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 2
30234: PUSH
30235: LD_INT 34
30237: PUSH
30238: LD_INT 12
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 34
30247: PUSH
30248: LD_INT 51
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 34
30257: PUSH
30258: LD_INT 32
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: LIST
30275: PPUSH
30276: CALL_OW 69
30280: ST_TO_ADDR
// if not tmp then
30281: LD_VAR 0 2
30285: NOT
30286: IFFALSE 30290
// exit ;
30288: GO 30340
// for i in tmp do
30290: LD_ADDR_VAR 0 1
30294: PUSH
30295: LD_VAR 0 2
30299: PUSH
30300: FOR_IN
30301: IFFALSE 30338
// if GetCargo ( i , mat_artifact ) = 0 then
30303: LD_VAR 0 1
30307: PPUSH
30308: LD_INT 4
30310: PPUSH
30311: CALL_OW 289
30315: PUSH
30316: LD_INT 0
30318: EQUAL
30319: IFFALSE 30336
// SetCargo ( i , mat_siberit , 100 ) ;
30321: LD_VAR 0 1
30325: PPUSH
30326: LD_INT 3
30328: PPUSH
30329: LD_INT 100
30331: PPUSH
30332: CALL_OW 290
30336: GO 30300
30338: POP
30339: POP
// end ;
30340: PPOPN 2
30342: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30343: LD_EXP 51
30347: PUSH
30348: LD_EXP 96
30352: AND
30353: IFFALSE 30536
30355: GO 30357
30357: DISABLE
30358: LD_INT 0
30360: PPUSH
30361: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30362: LD_ADDR_VAR 0 2
30366: PUSH
30367: LD_INT 22
30369: PUSH
30370: LD_OWVAR 2
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PPUSH
30379: CALL_OW 69
30383: ST_TO_ADDR
// if not tmp then
30384: LD_VAR 0 2
30388: NOT
30389: IFFALSE 30393
// exit ;
30391: GO 30536
// for i := 1 to 2 do
30393: LD_ADDR_VAR 0 1
30397: PUSH
30398: DOUBLE
30399: LD_INT 1
30401: DEC
30402: ST_TO_ADDR
30403: LD_INT 2
30405: PUSH
30406: FOR_TO
30407: IFFALSE 30534
// begin uc_side := your_side ;
30409: LD_ADDR_OWVAR 20
30413: PUSH
30414: LD_OWVAR 2
30418: ST_TO_ADDR
// uc_nation := nation_american ;
30419: LD_ADDR_OWVAR 21
30423: PUSH
30424: LD_INT 1
30426: ST_TO_ADDR
// vc_chassis := us_morphling ;
30427: LD_ADDR_OWVAR 37
30431: PUSH
30432: LD_INT 5
30434: ST_TO_ADDR
// vc_engine := engine_siberite ;
30435: LD_ADDR_OWVAR 39
30439: PUSH
30440: LD_INT 3
30442: ST_TO_ADDR
// vc_control := control_computer ;
30443: LD_ADDR_OWVAR 38
30447: PUSH
30448: LD_INT 3
30450: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30451: LD_ADDR_OWVAR 40
30455: PUSH
30456: LD_INT 10
30458: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30459: LD_VAR 0 2
30463: PUSH
30464: LD_INT 1
30466: ARRAY
30467: PPUSH
30468: CALL_OW 310
30472: NOT
30473: IFFALSE 30520
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30475: CALL_OW 45
30479: PPUSH
30480: LD_VAR 0 2
30484: PUSH
30485: LD_INT 1
30487: ARRAY
30488: PPUSH
30489: CALL_OW 250
30493: PPUSH
30494: LD_VAR 0 2
30498: PUSH
30499: LD_INT 1
30501: ARRAY
30502: PPUSH
30503: CALL_OW 251
30507: PPUSH
30508: LD_INT 12
30510: PPUSH
30511: LD_INT 1
30513: PPUSH
30514: CALL_OW 50
30518: GO 30532
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30520: CALL_OW 45
30524: PPUSH
30525: LD_INT 1
30527: PPUSH
30528: CALL_OW 51
// end ;
30532: GO 30406
30534: POP
30535: POP
// end ;
30536: PPOPN 2
30538: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30539: LD_EXP 51
30543: PUSH
30544: LD_EXP 97
30548: AND
30549: IFFALSE 30771
30551: GO 30553
30553: DISABLE
30554: LD_INT 0
30556: PPUSH
30557: PPUSH
30558: PPUSH
30559: PPUSH
30560: PPUSH
30561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30562: LD_ADDR_VAR 0 6
30566: PUSH
30567: LD_INT 22
30569: PUSH
30570: LD_OWVAR 2
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 21
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 3
30591: PUSH
30592: LD_INT 23
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: LIST
30610: PPUSH
30611: CALL_OW 69
30615: ST_TO_ADDR
// if not tmp then
30616: LD_VAR 0 6
30620: NOT
30621: IFFALSE 30625
// exit ;
30623: GO 30771
// s1 := rand ( 1 , 4 ) ;
30625: LD_ADDR_VAR 0 2
30629: PUSH
30630: LD_INT 1
30632: PPUSH
30633: LD_INT 4
30635: PPUSH
30636: CALL_OW 12
30640: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30641: LD_ADDR_VAR 0 4
30645: PUSH
30646: LD_VAR 0 6
30650: PUSH
30651: LD_INT 1
30653: ARRAY
30654: PPUSH
30655: LD_VAR 0 2
30659: PPUSH
30660: CALL_OW 259
30664: ST_TO_ADDR
// if s1 = 1 then
30665: LD_VAR 0 2
30669: PUSH
30670: LD_INT 1
30672: EQUAL
30673: IFFALSE 30693
// s2 := rand ( 2 , 4 ) else
30675: LD_ADDR_VAR 0 3
30679: PUSH
30680: LD_INT 2
30682: PPUSH
30683: LD_INT 4
30685: PPUSH
30686: CALL_OW 12
30690: ST_TO_ADDR
30691: GO 30701
// s2 := 1 ;
30693: LD_ADDR_VAR 0 3
30697: PUSH
30698: LD_INT 1
30700: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30701: LD_ADDR_VAR 0 5
30705: PUSH
30706: LD_VAR 0 6
30710: PUSH
30711: LD_INT 1
30713: ARRAY
30714: PPUSH
30715: LD_VAR 0 3
30719: PPUSH
30720: CALL_OW 259
30724: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30725: LD_VAR 0 6
30729: PUSH
30730: LD_INT 1
30732: ARRAY
30733: PPUSH
30734: LD_VAR 0 2
30738: PPUSH
30739: LD_VAR 0 5
30743: PPUSH
30744: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30748: LD_VAR 0 6
30752: PUSH
30753: LD_INT 1
30755: ARRAY
30756: PPUSH
30757: LD_VAR 0 3
30761: PPUSH
30762: LD_VAR 0 4
30766: PPUSH
30767: CALL_OW 237
// end ;
30771: PPOPN 6
30773: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30774: LD_EXP 51
30778: PUSH
30779: LD_EXP 98
30783: AND
30784: IFFALSE 30863
30786: GO 30788
30788: DISABLE
30789: LD_INT 0
30791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30792: LD_ADDR_VAR 0 1
30796: PUSH
30797: LD_INT 22
30799: PUSH
30800: LD_OWVAR 2
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 30
30811: PUSH
30812: LD_INT 3
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PPUSH
30823: CALL_OW 69
30827: ST_TO_ADDR
// if not tmp then
30828: LD_VAR 0 1
30832: NOT
30833: IFFALSE 30837
// exit ;
30835: GO 30863
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30837: LD_VAR 0 1
30841: PUSH
30842: LD_INT 1
30844: PPUSH
30845: LD_VAR 0 1
30849: PPUSH
30850: CALL_OW 12
30854: ARRAY
30855: PPUSH
30856: LD_INT 1
30858: PPUSH
30859: CALL_OW 234
// end ;
30863: PPOPN 1
30865: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30866: LD_EXP 51
30870: PUSH
30871: LD_EXP 99
30875: AND
30876: IFFALSE 30988
30878: GO 30880
30880: DISABLE
30881: LD_INT 0
30883: PPUSH
30884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30885: LD_ADDR_VAR 0 2
30889: PUSH
30890: LD_INT 22
30892: PUSH
30893: LD_OWVAR 2
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 2
30904: PUSH
30905: LD_INT 30
30907: PUSH
30908: LD_INT 27
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 30
30917: PUSH
30918: LD_INT 26
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 30
30927: PUSH
30928: LD_INT 28
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PPUSH
30945: CALL_OW 69
30949: ST_TO_ADDR
// if not tmp then
30950: LD_VAR 0 2
30954: NOT
30955: IFFALSE 30959
// exit ;
30957: GO 30988
// for i in tmp do
30959: LD_ADDR_VAR 0 1
30963: PUSH
30964: LD_VAR 0 2
30968: PUSH
30969: FOR_IN
30970: IFFALSE 30986
// SetLives ( i , 1 ) ;
30972: LD_VAR 0 1
30976: PPUSH
30977: LD_INT 1
30979: PPUSH
30980: CALL_OW 234
30984: GO 30969
30986: POP
30987: POP
// end ;
30988: PPOPN 2
30990: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30991: LD_EXP 51
30995: PUSH
30996: LD_EXP 100
31000: AND
31001: IFFALSE 31288
31003: GO 31005
31005: DISABLE
31006: LD_INT 0
31008: PPUSH
31009: PPUSH
31010: PPUSH
// begin i := rand ( 1 , 7 ) ;
31011: LD_ADDR_VAR 0 1
31015: PUSH
31016: LD_INT 1
31018: PPUSH
31019: LD_INT 7
31021: PPUSH
31022: CALL_OW 12
31026: ST_TO_ADDR
// case i of 1 :
31027: LD_VAR 0 1
31031: PUSH
31032: LD_INT 1
31034: DOUBLE
31035: EQUAL
31036: IFTRUE 31040
31038: GO 31050
31040: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31041: LD_STRING earthquake(getX(game), 0, 32)
31043: PPUSH
31044: CALL_OW 559
31048: GO 31288
31050: LD_INT 2
31052: DOUBLE
31053: EQUAL
31054: IFTRUE 31058
31056: GO 31072
31058: POP
// begin ToLua ( displayStucuk(); ) ;
31059: LD_STRING displayStucuk();
31061: PPUSH
31062: CALL_OW 559
// ResetFog ;
31066: CALL_OW 335
// end ; 3 :
31070: GO 31288
31072: LD_INT 3
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31184
31080: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31081: LD_ADDR_VAR 0 2
31085: PUSH
31086: LD_INT 22
31088: PUSH
31089: LD_OWVAR 2
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 25
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PPUSH
31112: CALL_OW 69
31116: ST_TO_ADDR
// if not tmp then
31117: LD_VAR 0 2
31121: NOT
31122: IFFALSE 31126
// exit ;
31124: GO 31288
// un := tmp [ rand ( 1 , tmp ) ] ;
31126: LD_ADDR_VAR 0 3
31130: PUSH
31131: LD_VAR 0 2
31135: PUSH
31136: LD_INT 1
31138: PPUSH
31139: LD_VAR 0 2
31143: PPUSH
31144: CALL_OW 12
31148: ARRAY
31149: ST_TO_ADDR
// if Crawls ( un ) then
31150: LD_VAR 0 3
31154: PPUSH
31155: CALL_OW 318
31159: IFFALSE 31170
// ComWalk ( un ) ;
31161: LD_VAR 0 3
31165: PPUSH
31166: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31170: LD_VAR 0 3
31174: PPUSH
31175: LD_INT 8
31177: PPUSH
31178: CALL_OW 336
// end ; 4 :
31182: GO 31288
31184: LD_INT 4
31186: DOUBLE
31187: EQUAL
31188: IFTRUE 31192
31190: GO 31266
31192: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31193: LD_ADDR_VAR 0 2
31197: PUSH
31198: LD_INT 22
31200: PUSH
31201: LD_OWVAR 2
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 30
31212: PUSH
31213: LD_INT 29
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PPUSH
31224: CALL_OW 69
31228: ST_TO_ADDR
// if not tmp then
31229: LD_VAR 0 2
31233: NOT
31234: IFFALSE 31238
// exit ;
31236: GO 31288
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31238: LD_VAR 0 2
31242: PUSH
31243: LD_INT 1
31245: ARRAY
31246: PPUSH
31247: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31251: LD_VAR 0 2
31255: PUSH
31256: LD_INT 1
31258: ARRAY
31259: PPUSH
31260: CALL_OW 65
// end ; 5 .. 7 :
31264: GO 31288
31266: LD_INT 5
31268: DOUBLE
31269: GREATEREQUAL
31270: IFFALSE 31278
31272: LD_INT 7
31274: DOUBLE
31275: LESSEQUAL
31276: IFTRUE 31280
31278: GO 31287
31280: POP
// StreamSibBomb ; end ;
31281: CALL 27525 0 0
31285: GO 31288
31287: POP
// end ;
31288: PPOPN 3
31290: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31291: LD_EXP 51
31295: PUSH
31296: LD_EXP 101
31300: AND
31301: IFFALSE 31457
31303: GO 31305
31305: DISABLE
31306: LD_INT 0
31308: PPUSH
31309: PPUSH
31310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31311: LD_ADDR_VAR 0 2
31315: PUSH
31316: LD_INT 81
31318: PUSH
31319: LD_OWVAR 2
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: LD_INT 21
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 21
31343: PUSH
31344: LD_INT 2
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: LIST
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PPUSH
31360: CALL_OW 69
31364: ST_TO_ADDR
// if not tmp then
31365: LD_VAR 0 2
31369: NOT
31370: IFFALSE 31374
// exit ;
31372: GO 31457
// p := 0 ;
31374: LD_ADDR_VAR 0 3
31378: PUSH
31379: LD_INT 0
31381: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31382: LD_INT 35
31384: PPUSH
31385: CALL_OW 67
// p := p + 1 ;
31389: LD_ADDR_VAR 0 3
31393: PUSH
31394: LD_VAR 0 3
31398: PUSH
31399: LD_INT 1
31401: PLUS
31402: ST_TO_ADDR
// for i in tmp do
31403: LD_ADDR_VAR 0 1
31407: PUSH
31408: LD_VAR 0 2
31412: PUSH
31413: FOR_IN
31414: IFFALSE 31445
// if GetLives ( i ) < 1000 then
31416: LD_VAR 0 1
31420: PPUSH
31421: CALL_OW 256
31425: PUSH
31426: LD_INT 1000
31428: LESS
31429: IFFALSE 31443
// SetLives ( i , 1000 ) ;
31431: LD_VAR 0 1
31435: PPUSH
31436: LD_INT 1000
31438: PPUSH
31439: CALL_OW 234
31443: GO 31413
31445: POP
31446: POP
// until p > 20 ;
31447: LD_VAR 0 3
31451: PUSH
31452: LD_INT 20
31454: GREATER
31455: IFFALSE 31382
// end ;
31457: PPOPN 3
31459: END
// every 0 0$1 trigger StreamModeActive and sTime do
31460: LD_EXP 51
31464: PUSH
31465: LD_EXP 102
31469: AND
31470: IFFALSE 31505
31472: GO 31474
31474: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31475: LD_INT 28
31477: PPUSH
31478: LD_OWVAR 2
31482: PPUSH
31483: LD_INT 2
31485: PPUSH
31486: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31490: LD_INT 30
31492: PPUSH
31493: LD_OWVAR 2
31497: PPUSH
31498: LD_INT 2
31500: PPUSH
31501: CALL_OW 322
// end ;
31505: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31506: LD_EXP 51
31510: PUSH
31511: LD_EXP 103
31515: AND
31516: IFFALSE 31637
31518: GO 31520
31520: DISABLE
31521: LD_INT 0
31523: PPUSH
31524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31525: LD_ADDR_VAR 0 2
31529: PUSH
31530: LD_INT 22
31532: PUSH
31533: LD_OWVAR 2
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 21
31544: PUSH
31545: LD_INT 1
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 3
31554: PUSH
31555: LD_INT 23
31557: PUSH
31558: LD_INT 0
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: LIST
31573: PPUSH
31574: CALL_OW 69
31578: ST_TO_ADDR
// if not tmp then
31579: LD_VAR 0 2
31583: NOT
31584: IFFALSE 31588
// exit ;
31586: GO 31637
// for i in tmp do
31588: LD_ADDR_VAR 0 1
31592: PUSH
31593: LD_VAR 0 2
31597: PUSH
31598: FOR_IN
31599: IFFALSE 31635
// begin if Crawls ( i ) then
31601: LD_VAR 0 1
31605: PPUSH
31606: CALL_OW 318
31610: IFFALSE 31621
// ComWalk ( i ) ;
31612: LD_VAR 0 1
31616: PPUSH
31617: CALL_OW 138
// SetClass ( i , 2 ) ;
31621: LD_VAR 0 1
31625: PPUSH
31626: LD_INT 2
31628: PPUSH
31629: CALL_OW 336
// end ;
31633: GO 31598
31635: POP
31636: POP
// end ;
31637: PPOPN 2
31639: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31640: LD_EXP 51
31644: PUSH
31645: LD_EXP 104
31649: AND
31650: IFFALSE 31938
31652: GO 31654
31654: DISABLE
31655: LD_INT 0
31657: PPUSH
31658: PPUSH
31659: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31660: LD_OWVAR 2
31664: PPUSH
31665: LD_INT 9
31667: PPUSH
31668: LD_INT 1
31670: PPUSH
31671: LD_INT 1
31673: PPUSH
31674: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31678: LD_INT 9
31680: PPUSH
31681: LD_OWVAR 2
31685: PPUSH
31686: CALL_OW 343
// uc_side := 9 ;
31690: LD_ADDR_OWVAR 20
31694: PUSH
31695: LD_INT 9
31697: ST_TO_ADDR
// uc_nation := 2 ;
31698: LD_ADDR_OWVAR 21
31702: PUSH
31703: LD_INT 2
31705: ST_TO_ADDR
// hc_name := Dark Warrior ;
31706: LD_ADDR_OWVAR 26
31710: PUSH
31711: LD_STRING Dark Warrior
31713: ST_TO_ADDR
// hc_gallery :=  ;
31714: LD_ADDR_OWVAR 33
31718: PUSH
31719: LD_STRING 
31721: ST_TO_ADDR
// hc_noskilllimit := true ;
31722: LD_ADDR_OWVAR 76
31726: PUSH
31727: LD_INT 1
31729: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31730: LD_ADDR_OWVAR 31
31734: PUSH
31735: LD_INT 30
31737: PUSH
31738: LD_INT 30
31740: PUSH
31741: LD_INT 30
31743: PUSH
31744: LD_INT 30
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: ST_TO_ADDR
// un := CreateHuman ;
31753: LD_ADDR_VAR 0 3
31757: PUSH
31758: CALL_OW 44
31762: ST_TO_ADDR
// hc_noskilllimit := false ;
31763: LD_ADDR_OWVAR 76
31767: PUSH
31768: LD_INT 0
31770: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31771: LD_VAR 0 3
31775: PPUSH
31776: LD_INT 1
31778: PPUSH
31779: CALL_OW 51
// ToLua ( playRanger() ) ;
31783: LD_STRING playRanger()
31785: PPUSH
31786: CALL_OW 559
// p := 0 ;
31790: LD_ADDR_VAR 0 2
31794: PUSH
31795: LD_INT 0
31797: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31798: LD_INT 35
31800: PPUSH
31801: CALL_OW 67
// p := p + 1 ;
31805: LD_ADDR_VAR 0 2
31809: PUSH
31810: LD_VAR 0 2
31814: PUSH
31815: LD_INT 1
31817: PLUS
31818: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31819: LD_VAR 0 3
31823: PPUSH
31824: CALL_OW 256
31828: PUSH
31829: LD_INT 1000
31831: LESS
31832: IFFALSE 31846
// SetLives ( un , 1000 ) ;
31834: LD_VAR 0 3
31838: PPUSH
31839: LD_INT 1000
31841: PPUSH
31842: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31846: LD_VAR 0 3
31850: PPUSH
31851: LD_INT 81
31853: PUSH
31854: LD_OWVAR 2
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 91
31865: PUSH
31866: LD_VAR 0 3
31870: PUSH
31871: LD_INT 30
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: LIST
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PPUSH
31883: CALL_OW 69
31887: PPUSH
31888: LD_VAR 0 3
31892: PPUSH
31893: CALL_OW 74
31897: PPUSH
31898: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31902: LD_VAR 0 2
31906: PUSH
31907: LD_INT 80
31909: GREATER
31910: PUSH
31911: LD_VAR 0 3
31915: PPUSH
31916: CALL_OW 301
31920: OR
31921: IFFALSE 31798
// if un then
31923: LD_VAR 0 3
31927: IFFALSE 31938
// RemoveUnit ( un ) ;
31929: LD_VAR 0 3
31933: PPUSH
31934: CALL_OW 64
// end ;
31938: PPOPN 3
31940: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31941: LD_EXP 105
31945: IFFALSE 32061
31947: GO 31949
31949: DISABLE
31950: LD_INT 0
31952: PPUSH
31953: PPUSH
31954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31955: LD_ADDR_VAR 0 2
31959: PUSH
31960: LD_INT 81
31962: PUSH
31963: LD_OWVAR 2
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 21
31974: PUSH
31975: LD_INT 1
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PPUSH
31986: CALL_OW 69
31990: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31991: LD_STRING playComputer()
31993: PPUSH
31994: CALL_OW 559
// if not tmp then
31998: LD_VAR 0 2
32002: NOT
32003: IFFALSE 32007
// exit ;
32005: GO 32061
// for i in tmp do
32007: LD_ADDR_VAR 0 1
32011: PUSH
32012: LD_VAR 0 2
32016: PUSH
32017: FOR_IN
32018: IFFALSE 32059
// for j := 1 to 4 do
32020: LD_ADDR_VAR 0 3
32024: PUSH
32025: DOUBLE
32026: LD_INT 1
32028: DEC
32029: ST_TO_ADDR
32030: LD_INT 4
32032: PUSH
32033: FOR_TO
32034: IFFALSE 32055
// SetSkill ( i , j , 10 ) ;
32036: LD_VAR 0 1
32040: PPUSH
32041: LD_VAR 0 3
32045: PPUSH
32046: LD_INT 10
32048: PPUSH
32049: CALL_OW 237
32053: GO 32033
32055: POP
32056: POP
32057: GO 32017
32059: POP
32060: POP
// end ;
32061: PPOPN 3
32063: END
// every 0 0$1 trigger s30 do var i , tmp ;
32064: LD_EXP 106
32068: IFFALSE 32137
32070: GO 32072
32072: DISABLE
32073: LD_INT 0
32075: PPUSH
32076: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32077: LD_ADDR_VAR 0 2
32081: PUSH
32082: LD_INT 22
32084: PUSH
32085: LD_OWVAR 2
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PPUSH
32094: CALL_OW 69
32098: ST_TO_ADDR
// if not tmp then
32099: LD_VAR 0 2
32103: NOT
32104: IFFALSE 32108
// exit ;
32106: GO 32137
// for i in tmp do
32108: LD_ADDR_VAR 0 1
32112: PUSH
32113: LD_VAR 0 2
32117: PUSH
32118: FOR_IN
32119: IFFALSE 32135
// SetLives ( i , 300 ) ;
32121: LD_VAR 0 1
32125: PPUSH
32126: LD_INT 300
32128: PPUSH
32129: CALL_OW 234
32133: GO 32118
32135: POP
32136: POP
// end ;
32137: PPOPN 2
32139: END
// every 0 0$1 trigger s60 do var i , tmp ;
32140: LD_EXP 107
32144: IFFALSE 32213
32146: GO 32148
32148: DISABLE
32149: LD_INT 0
32151: PPUSH
32152: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32153: LD_ADDR_VAR 0 2
32157: PUSH
32158: LD_INT 22
32160: PUSH
32161: LD_OWVAR 2
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PPUSH
32170: CALL_OW 69
32174: ST_TO_ADDR
// if not tmp then
32175: LD_VAR 0 2
32179: NOT
32180: IFFALSE 32184
// exit ;
32182: GO 32213
// for i in tmp do
32184: LD_ADDR_VAR 0 1
32188: PUSH
32189: LD_VAR 0 2
32193: PUSH
32194: FOR_IN
32195: IFFALSE 32211
// SetLives ( i , 600 ) ;
32197: LD_VAR 0 1
32201: PPUSH
32202: LD_INT 600
32204: PPUSH
32205: CALL_OW 234
32209: GO 32194
32211: POP
32212: POP
// end ;
32213: PPOPN 2
32215: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32216: LD_INT 0
32218: PPUSH
// case cmd of 301 :
32219: LD_VAR 0 1
32223: PUSH
32224: LD_INT 301
32226: DOUBLE
32227: EQUAL
32228: IFTRUE 32232
32230: GO 32264
32232: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32233: LD_VAR 0 6
32237: PPUSH
32238: LD_VAR 0 7
32242: PPUSH
32243: LD_VAR 0 8
32247: PPUSH
32248: LD_VAR 0 4
32252: PPUSH
32253: LD_VAR 0 5
32257: PPUSH
32258: CALL 33473 0 5
32262: GO 32385
32264: LD_INT 302
32266: DOUBLE
32267: EQUAL
32268: IFTRUE 32272
32270: GO 32309
32272: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32273: LD_VAR 0 6
32277: PPUSH
32278: LD_VAR 0 7
32282: PPUSH
32283: LD_VAR 0 8
32287: PPUSH
32288: LD_VAR 0 9
32292: PPUSH
32293: LD_VAR 0 4
32297: PPUSH
32298: LD_VAR 0 5
32302: PPUSH
32303: CALL 33564 0 6
32307: GO 32385
32309: LD_INT 303
32311: DOUBLE
32312: EQUAL
32313: IFTRUE 32317
32315: GO 32354
32317: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32318: LD_VAR 0 6
32322: PPUSH
32323: LD_VAR 0 7
32327: PPUSH
32328: LD_VAR 0 8
32332: PPUSH
32333: LD_VAR 0 9
32337: PPUSH
32338: LD_VAR 0 4
32342: PPUSH
32343: LD_VAR 0 5
32347: PPUSH
32348: CALL 32390 0 6
32352: GO 32385
32354: LD_INT 304
32356: DOUBLE
32357: EQUAL
32358: IFTRUE 32362
32360: GO 32384
32362: POP
// hHackTeleport ( unit , x , y ) ; end ;
32363: LD_VAR 0 2
32367: PPUSH
32368: LD_VAR 0 4
32372: PPUSH
32373: LD_VAR 0 5
32377: PPUSH
32378: CALL 34157 0 3
32382: GO 32385
32384: POP
// end ;
32385: LD_VAR 0 12
32389: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32390: LD_INT 0
32392: PPUSH
32393: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32394: LD_VAR 0 1
32398: PUSH
32399: LD_INT 1
32401: LESS
32402: PUSH
32403: LD_VAR 0 1
32407: PUSH
32408: LD_INT 3
32410: GREATER
32411: OR
32412: PUSH
32413: LD_VAR 0 5
32417: PPUSH
32418: LD_VAR 0 6
32422: PPUSH
32423: CALL_OW 428
32427: OR
32428: IFFALSE 32432
// exit ;
32430: GO 33160
// uc_side := your_side ;
32432: LD_ADDR_OWVAR 20
32436: PUSH
32437: LD_OWVAR 2
32441: ST_TO_ADDR
// uc_nation := nation ;
32442: LD_ADDR_OWVAR 21
32446: PUSH
32447: LD_VAR 0 1
32451: ST_TO_ADDR
// bc_level = 1 ;
32452: LD_ADDR_OWVAR 43
32456: PUSH
32457: LD_INT 1
32459: ST_TO_ADDR
// case btype of 1 :
32460: LD_VAR 0 2
32464: PUSH
32465: LD_INT 1
32467: DOUBLE
32468: EQUAL
32469: IFTRUE 32473
32471: GO 32484
32473: POP
// bc_type := b_depot ; 2 :
32474: LD_ADDR_OWVAR 42
32478: PUSH
32479: LD_INT 0
32481: ST_TO_ADDR
32482: GO 33104
32484: LD_INT 2
32486: DOUBLE
32487: EQUAL
32488: IFTRUE 32492
32490: GO 32503
32492: POP
// bc_type := b_warehouse ; 3 :
32493: LD_ADDR_OWVAR 42
32497: PUSH
32498: LD_INT 1
32500: ST_TO_ADDR
32501: GO 33104
32503: LD_INT 3
32505: DOUBLE
32506: EQUAL
32507: IFTRUE 32511
32509: GO 32522
32511: POP
// bc_type := b_lab ; 4 .. 9 :
32512: LD_ADDR_OWVAR 42
32516: PUSH
32517: LD_INT 6
32519: ST_TO_ADDR
32520: GO 33104
32522: LD_INT 4
32524: DOUBLE
32525: GREATEREQUAL
32526: IFFALSE 32534
32528: LD_INT 9
32530: DOUBLE
32531: LESSEQUAL
32532: IFTRUE 32536
32534: GO 32596
32536: POP
// begin bc_type := b_lab_half ;
32537: LD_ADDR_OWVAR 42
32541: PUSH
32542: LD_INT 7
32544: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32545: LD_ADDR_OWVAR 44
32549: PUSH
32550: LD_INT 10
32552: PUSH
32553: LD_INT 11
32555: PUSH
32556: LD_INT 12
32558: PUSH
32559: LD_INT 15
32561: PUSH
32562: LD_INT 14
32564: PUSH
32565: LD_INT 13
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: PUSH
32576: LD_VAR 0 2
32580: PUSH
32581: LD_INT 3
32583: MINUS
32584: ARRAY
32585: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32586: LD_ADDR_OWVAR 45
32590: PUSH
32591: LD_INT 9
32593: ST_TO_ADDR
// end ; 10 .. 13 :
32594: GO 33104
32596: LD_INT 10
32598: DOUBLE
32599: GREATEREQUAL
32600: IFFALSE 32608
32602: LD_INT 13
32604: DOUBLE
32605: LESSEQUAL
32606: IFTRUE 32610
32608: GO 32687
32610: POP
// begin bc_type := b_lab_full ;
32611: LD_ADDR_OWVAR 42
32615: PUSH
32616: LD_INT 8
32618: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32619: LD_ADDR_OWVAR 44
32623: PUSH
32624: LD_INT 10
32626: PUSH
32627: LD_INT 12
32629: PUSH
32630: LD_INT 14
32632: PUSH
32633: LD_INT 13
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: PUSH
32642: LD_VAR 0 2
32646: PUSH
32647: LD_INT 9
32649: MINUS
32650: ARRAY
32651: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32652: LD_ADDR_OWVAR 45
32656: PUSH
32657: LD_INT 11
32659: PUSH
32660: LD_INT 15
32662: PUSH
32663: LD_INT 12
32665: PUSH
32666: LD_INT 15
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: PUSH
32675: LD_VAR 0 2
32679: PUSH
32680: LD_INT 9
32682: MINUS
32683: ARRAY
32684: ST_TO_ADDR
// end ; 14 :
32685: GO 33104
32687: LD_INT 14
32689: DOUBLE
32690: EQUAL
32691: IFTRUE 32695
32693: GO 32706
32695: POP
// bc_type := b_workshop ; 15 :
32696: LD_ADDR_OWVAR 42
32700: PUSH
32701: LD_INT 2
32703: ST_TO_ADDR
32704: GO 33104
32706: LD_INT 15
32708: DOUBLE
32709: EQUAL
32710: IFTRUE 32714
32712: GO 32725
32714: POP
// bc_type := b_factory ; 16 :
32715: LD_ADDR_OWVAR 42
32719: PUSH
32720: LD_INT 3
32722: ST_TO_ADDR
32723: GO 33104
32725: LD_INT 16
32727: DOUBLE
32728: EQUAL
32729: IFTRUE 32733
32731: GO 32744
32733: POP
// bc_type := b_ext_gun ; 17 :
32734: LD_ADDR_OWVAR 42
32738: PUSH
32739: LD_INT 17
32741: ST_TO_ADDR
32742: GO 33104
32744: LD_INT 17
32746: DOUBLE
32747: EQUAL
32748: IFTRUE 32752
32750: GO 32780
32752: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32753: LD_ADDR_OWVAR 42
32757: PUSH
32758: LD_INT 19
32760: PUSH
32761: LD_INT 23
32763: PUSH
32764: LD_INT 19
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: LIST
32771: PUSH
32772: LD_VAR 0 1
32776: ARRAY
32777: ST_TO_ADDR
32778: GO 33104
32780: LD_INT 18
32782: DOUBLE
32783: EQUAL
32784: IFTRUE 32788
32786: GO 32799
32788: POP
// bc_type := b_ext_radar ; 19 :
32789: LD_ADDR_OWVAR 42
32793: PUSH
32794: LD_INT 20
32796: ST_TO_ADDR
32797: GO 33104
32799: LD_INT 19
32801: DOUBLE
32802: EQUAL
32803: IFTRUE 32807
32805: GO 32818
32807: POP
// bc_type := b_ext_radio ; 20 :
32808: LD_ADDR_OWVAR 42
32812: PUSH
32813: LD_INT 22
32815: ST_TO_ADDR
32816: GO 33104
32818: LD_INT 20
32820: DOUBLE
32821: EQUAL
32822: IFTRUE 32826
32824: GO 32837
32826: POP
// bc_type := b_ext_siberium ; 21 :
32827: LD_ADDR_OWVAR 42
32831: PUSH
32832: LD_INT 21
32834: ST_TO_ADDR
32835: GO 33104
32837: LD_INT 21
32839: DOUBLE
32840: EQUAL
32841: IFTRUE 32845
32843: GO 32856
32845: POP
// bc_type := b_ext_computer ; 22 :
32846: LD_ADDR_OWVAR 42
32850: PUSH
32851: LD_INT 24
32853: ST_TO_ADDR
32854: GO 33104
32856: LD_INT 22
32858: DOUBLE
32859: EQUAL
32860: IFTRUE 32864
32862: GO 32875
32864: POP
// bc_type := b_ext_track ; 23 :
32865: LD_ADDR_OWVAR 42
32869: PUSH
32870: LD_INT 16
32872: ST_TO_ADDR
32873: GO 33104
32875: LD_INT 23
32877: DOUBLE
32878: EQUAL
32879: IFTRUE 32883
32881: GO 32894
32883: POP
// bc_type := b_ext_laser ; 24 :
32884: LD_ADDR_OWVAR 42
32888: PUSH
32889: LD_INT 25
32891: ST_TO_ADDR
32892: GO 33104
32894: LD_INT 24
32896: DOUBLE
32897: EQUAL
32898: IFTRUE 32902
32900: GO 32913
32902: POP
// bc_type := b_control_tower ; 25 :
32903: LD_ADDR_OWVAR 42
32907: PUSH
32908: LD_INT 36
32910: ST_TO_ADDR
32911: GO 33104
32913: LD_INT 25
32915: DOUBLE
32916: EQUAL
32917: IFTRUE 32921
32919: GO 32932
32921: POP
// bc_type := b_breastwork ; 26 :
32922: LD_ADDR_OWVAR 42
32926: PUSH
32927: LD_INT 31
32929: ST_TO_ADDR
32930: GO 33104
32932: LD_INT 26
32934: DOUBLE
32935: EQUAL
32936: IFTRUE 32940
32938: GO 32951
32940: POP
// bc_type := b_bunker ; 27 :
32941: LD_ADDR_OWVAR 42
32945: PUSH
32946: LD_INT 32
32948: ST_TO_ADDR
32949: GO 33104
32951: LD_INT 27
32953: DOUBLE
32954: EQUAL
32955: IFTRUE 32959
32957: GO 32970
32959: POP
// bc_type := b_turret ; 28 :
32960: LD_ADDR_OWVAR 42
32964: PUSH
32965: LD_INT 33
32967: ST_TO_ADDR
32968: GO 33104
32970: LD_INT 28
32972: DOUBLE
32973: EQUAL
32974: IFTRUE 32978
32976: GO 32989
32978: POP
// bc_type := b_armoury ; 29 :
32979: LD_ADDR_OWVAR 42
32983: PUSH
32984: LD_INT 4
32986: ST_TO_ADDR
32987: GO 33104
32989: LD_INT 29
32991: DOUBLE
32992: EQUAL
32993: IFTRUE 32997
32995: GO 33008
32997: POP
// bc_type := b_barracks ; 30 :
32998: LD_ADDR_OWVAR 42
33002: PUSH
33003: LD_INT 5
33005: ST_TO_ADDR
33006: GO 33104
33008: LD_INT 30
33010: DOUBLE
33011: EQUAL
33012: IFTRUE 33016
33014: GO 33027
33016: POP
// bc_type := b_solar_power ; 31 :
33017: LD_ADDR_OWVAR 42
33021: PUSH
33022: LD_INT 27
33024: ST_TO_ADDR
33025: GO 33104
33027: LD_INT 31
33029: DOUBLE
33030: EQUAL
33031: IFTRUE 33035
33033: GO 33046
33035: POP
// bc_type := b_oil_power ; 32 :
33036: LD_ADDR_OWVAR 42
33040: PUSH
33041: LD_INT 26
33043: ST_TO_ADDR
33044: GO 33104
33046: LD_INT 32
33048: DOUBLE
33049: EQUAL
33050: IFTRUE 33054
33052: GO 33065
33054: POP
// bc_type := b_siberite_power ; 33 :
33055: LD_ADDR_OWVAR 42
33059: PUSH
33060: LD_INT 28
33062: ST_TO_ADDR
33063: GO 33104
33065: LD_INT 33
33067: DOUBLE
33068: EQUAL
33069: IFTRUE 33073
33071: GO 33084
33073: POP
// bc_type := b_oil_mine ; 34 :
33074: LD_ADDR_OWVAR 42
33078: PUSH
33079: LD_INT 29
33081: ST_TO_ADDR
33082: GO 33104
33084: LD_INT 34
33086: DOUBLE
33087: EQUAL
33088: IFTRUE 33092
33090: GO 33103
33092: POP
// bc_type := b_siberite_mine ; end ;
33093: LD_ADDR_OWVAR 42
33097: PUSH
33098: LD_INT 30
33100: ST_TO_ADDR
33101: GO 33104
33103: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33104: LD_ADDR_VAR 0 8
33108: PUSH
33109: LD_VAR 0 5
33113: PPUSH
33114: LD_VAR 0 6
33118: PPUSH
33119: LD_VAR 0 3
33123: PPUSH
33124: CALL_OW 47
33128: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33129: LD_OWVAR 42
33133: PUSH
33134: LD_INT 32
33136: PUSH
33137: LD_INT 33
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: IN
33144: IFFALSE 33160
// PlaceWeaponTurret ( b , weapon ) ;
33146: LD_VAR 0 8
33150: PPUSH
33151: LD_VAR 0 4
33155: PPUSH
33156: CALL_OW 431
// end ;
33160: LD_VAR 0 7
33164: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33165: LD_INT 0
33167: PPUSH
33168: PPUSH
33169: PPUSH
33170: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33171: LD_ADDR_VAR 0 4
33175: PUSH
33176: LD_INT 22
33178: PUSH
33179: LD_OWVAR 2
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 2
33190: PUSH
33191: LD_INT 30
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 30
33203: PUSH
33204: LD_INT 1
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: LIST
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PPUSH
33220: CALL_OW 69
33224: ST_TO_ADDR
// if not tmp then
33225: LD_VAR 0 4
33229: NOT
33230: IFFALSE 33234
// exit ;
33232: GO 33293
// for i in tmp do
33234: LD_ADDR_VAR 0 2
33238: PUSH
33239: LD_VAR 0 4
33243: PUSH
33244: FOR_IN
33245: IFFALSE 33291
// for j = 1 to 3 do
33247: LD_ADDR_VAR 0 3
33251: PUSH
33252: DOUBLE
33253: LD_INT 1
33255: DEC
33256: ST_TO_ADDR
33257: LD_INT 3
33259: PUSH
33260: FOR_TO
33261: IFFALSE 33287
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33263: LD_VAR 0 2
33267: PPUSH
33268: CALL_OW 274
33272: PPUSH
33273: LD_VAR 0 3
33277: PPUSH
33278: LD_INT 99999
33280: PPUSH
33281: CALL_OW 277
33285: GO 33260
33287: POP
33288: POP
33289: GO 33244
33291: POP
33292: POP
// end ;
33293: LD_VAR 0 1
33297: RET
// export function hHackSetLevel10 ; var i , j ; begin
33298: LD_INT 0
33300: PPUSH
33301: PPUSH
33302: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33303: LD_ADDR_VAR 0 2
33307: PUSH
33308: LD_INT 21
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PPUSH
33318: CALL_OW 69
33322: PUSH
33323: FOR_IN
33324: IFFALSE 33376
// if IsSelected ( i ) then
33326: LD_VAR 0 2
33330: PPUSH
33331: CALL_OW 306
33335: IFFALSE 33374
// begin for j := 1 to 4 do
33337: LD_ADDR_VAR 0 3
33341: PUSH
33342: DOUBLE
33343: LD_INT 1
33345: DEC
33346: ST_TO_ADDR
33347: LD_INT 4
33349: PUSH
33350: FOR_TO
33351: IFFALSE 33372
// SetSkill ( i , j , 10 ) ;
33353: LD_VAR 0 2
33357: PPUSH
33358: LD_VAR 0 3
33362: PPUSH
33363: LD_INT 10
33365: PPUSH
33366: CALL_OW 237
33370: GO 33350
33372: POP
33373: POP
// end ;
33374: GO 33323
33376: POP
33377: POP
// end ;
33378: LD_VAR 0 1
33382: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33383: LD_INT 0
33385: PPUSH
33386: PPUSH
33387: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33388: LD_ADDR_VAR 0 2
33392: PUSH
33393: LD_INT 22
33395: PUSH
33396: LD_OWVAR 2
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 21
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PPUSH
33419: CALL_OW 69
33423: PUSH
33424: FOR_IN
33425: IFFALSE 33466
// begin for j := 1 to 4 do
33427: LD_ADDR_VAR 0 3
33431: PUSH
33432: DOUBLE
33433: LD_INT 1
33435: DEC
33436: ST_TO_ADDR
33437: LD_INT 4
33439: PUSH
33440: FOR_TO
33441: IFFALSE 33462
// SetSkill ( i , j , 10 ) ;
33443: LD_VAR 0 2
33447: PPUSH
33448: LD_VAR 0 3
33452: PPUSH
33453: LD_INT 10
33455: PPUSH
33456: CALL_OW 237
33460: GO 33440
33462: POP
33463: POP
// end ;
33464: GO 33424
33466: POP
33467: POP
// end ;
33468: LD_VAR 0 1
33472: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33473: LD_INT 0
33475: PPUSH
// uc_side := your_side ;
33476: LD_ADDR_OWVAR 20
33480: PUSH
33481: LD_OWVAR 2
33485: ST_TO_ADDR
// uc_nation := nation ;
33486: LD_ADDR_OWVAR 21
33490: PUSH
33491: LD_VAR 0 1
33495: ST_TO_ADDR
// InitHc ;
33496: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33500: LD_INT 0
33502: PPUSH
33503: LD_VAR 0 2
33507: PPUSH
33508: LD_VAR 0 3
33512: PPUSH
33513: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33517: LD_VAR 0 4
33521: PPUSH
33522: LD_VAR 0 5
33526: PPUSH
33527: CALL_OW 428
33531: PUSH
33532: LD_INT 0
33534: EQUAL
33535: IFFALSE 33559
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33537: CALL_OW 44
33541: PPUSH
33542: LD_VAR 0 4
33546: PPUSH
33547: LD_VAR 0 5
33551: PPUSH
33552: LD_INT 1
33554: PPUSH
33555: CALL_OW 48
// end ;
33559: LD_VAR 0 6
33563: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33564: LD_INT 0
33566: PPUSH
33567: PPUSH
// uc_side := your_side ;
33568: LD_ADDR_OWVAR 20
33572: PUSH
33573: LD_OWVAR 2
33577: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33578: LD_VAR 0 1
33582: PUSH
33583: LD_INT 1
33585: PUSH
33586: LD_INT 2
33588: PUSH
33589: LD_INT 3
33591: PUSH
33592: LD_INT 4
33594: PUSH
33595: LD_INT 5
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: IN
33605: IFFALSE 33617
// uc_nation := nation_american else
33607: LD_ADDR_OWVAR 21
33611: PUSH
33612: LD_INT 1
33614: ST_TO_ADDR
33615: GO 33660
// if chassis in [ 11 , 12 , 13 , 14 ] then
33617: LD_VAR 0 1
33621: PUSH
33622: LD_INT 11
33624: PUSH
33625: LD_INT 12
33627: PUSH
33628: LD_INT 13
33630: PUSH
33631: LD_INT 14
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: IN
33640: IFFALSE 33652
// uc_nation := nation_arabian else
33642: LD_ADDR_OWVAR 21
33646: PUSH
33647: LD_INT 2
33649: ST_TO_ADDR
33650: GO 33660
// uc_nation := nation_russian ;
33652: LD_ADDR_OWVAR 21
33656: PUSH
33657: LD_INT 3
33659: ST_TO_ADDR
// vc_chassis := chassis ;
33660: LD_ADDR_OWVAR 37
33664: PUSH
33665: LD_VAR 0 1
33669: ST_TO_ADDR
// vc_engine := engine ;
33670: LD_ADDR_OWVAR 39
33674: PUSH
33675: LD_VAR 0 2
33679: ST_TO_ADDR
// vc_control := control ;
33680: LD_ADDR_OWVAR 38
33684: PUSH
33685: LD_VAR 0 3
33689: ST_TO_ADDR
// vc_weapon := weapon ;
33690: LD_ADDR_OWVAR 40
33694: PUSH
33695: LD_VAR 0 4
33699: ST_TO_ADDR
// un := CreateVehicle ;
33700: LD_ADDR_VAR 0 8
33704: PUSH
33705: CALL_OW 45
33709: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33710: LD_VAR 0 8
33714: PPUSH
33715: LD_INT 0
33717: PPUSH
33718: LD_INT 5
33720: PPUSH
33721: CALL_OW 12
33725: PPUSH
33726: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33730: LD_VAR 0 8
33734: PPUSH
33735: LD_VAR 0 5
33739: PPUSH
33740: LD_VAR 0 6
33744: PPUSH
33745: LD_INT 1
33747: PPUSH
33748: CALL_OW 48
// end ;
33752: LD_VAR 0 7
33756: RET
// export hInvincible ; every 1 do
33757: GO 33759
33759: DISABLE
// hInvincible := [ ] ;
33760: LD_ADDR_EXP 108
33764: PUSH
33765: EMPTY
33766: ST_TO_ADDR
33767: END
// every 10 do var i ;
33768: GO 33770
33770: DISABLE
33771: LD_INT 0
33773: PPUSH
// begin enable ;
33774: ENABLE
// if not hInvincible then
33775: LD_EXP 108
33779: NOT
33780: IFFALSE 33784
// exit ;
33782: GO 33828
// for i in hInvincible do
33784: LD_ADDR_VAR 0 1
33788: PUSH
33789: LD_EXP 108
33793: PUSH
33794: FOR_IN
33795: IFFALSE 33826
// if GetLives ( i ) < 1000 then
33797: LD_VAR 0 1
33801: PPUSH
33802: CALL_OW 256
33806: PUSH
33807: LD_INT 1000
33809: LESS
33810: IFFALSE 33824
// SetLives ( i , 1000 ) ;
33812: LD_VAR 0 1
33816: PPUSH
33817: LD_INT 1000
33819: PPUSH
33820: CALL_OW 234
33824: GO 33794
33826: POP
33827: POP
// end ;
33828: PPOPN 1
33830: END
// export function hHackInvincible ; var i ; begin
33831: LD_INT 0
33833: PPUSH
33834: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33835: LD_ADDR_VAR 0 2
33839: PUSH
33840: LD_INT 2
33842: PUSH
33843: LD_INT 21
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 21
33855: PUSH
33856: LD_INT 2
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: LIST
33867: PPUSH
33868: CALL_OW 69
33872: PUSH
33873: FOR_IN
33874: IFFALSE 33935
// if IsSelected ( i ) then
33876: LD_VAR 0 2
33880: PPUSH
33881: CALL_OW 306
33885: IFFALSE 33933
// begin if i in hInvincible then
33887: LD_VAR 0 2
33891: PUSH
33892: LD_EXP 108
33896: IN
33897: IFFALSE 33917
// hInvincible := hInvincible diff i else
33899: LD_ADDR_EXP 108
33903: PUSH
33904: LD_EXP 108
33908: PUSH
33909: LD_VAR 0 2
33913: DIFF
33914: ST_TO_ADDR
33915: GO 33933
// hInvincible := hInvincible union i ;
33917: LD_ADDR_EXP 108
33921: PUSH
33922: LD_EXP 108
33926: PUSH
33927: LD_VAR 0 2
33931: UNION
33932: ST_TO_ADDR
// end ;
33933: GO 33873
33935: POP
33936: POP
// end ;
33937: LD_VAR 0 1
33941: RET
// export function hHackInvisible ; var i , j ; begin
33942: LD_INT 0
33944: PPUSH
33945: PPUSH
33946: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33947: LD_ADDR_VAR 0 2
33951: PUSH
33952: LD_INT 21
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PPUSH
33962: CALL_OW 69
33966: PUSH
33967: FOR_IN
33968: IFFALSE 33992
// if IsSelected ( i ) then
33970: LD_VAR 0 2
33974: PPUSH
33975: CALL_OW 306
33979: IFFALSE 33990
// ComForceInvisible ( i ) ;
33981: LD_VAR 0 2
33985: PPUSH
33986: CALL_OW 496
33990: GO 33967
33992: POP
33993: POP
// end ;
33994: LD_VAR 0 1
33998: RET
// export function hHackChangeYourSide ; begin
33999: LD_INT 0
34001: PPUSH
// if your_side = 8 then
34002: LD_OWVAR 2
34006: PUSH
34007: LD_INT 8
34009: EQUAL
34010: IFFALSE 34022
// your_side := 0 else
34012: LD_ADDR_OWVAR 2
34016: PUSH
34017: LD_INT 0
34019: ST_TO_ADDR
34020: GO 34036
// your_side := your_side + 1 ;
34022: LD_ADDR_OWVAR 2
34026: PUSH
34027: LD_OWVAR 2
34031: PUSH
34032: LD_INT 1
34034: PLUS
34035: ST_TO_ADDR
// end ;
34036: LD_VAR 0 1
34040: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34041: LD_INT 0
34043: PPUSH
34044: PPUSH
34045: PPUSH
// for i in all_units do
34046: LD_ADDR_VAR 0 2
34050: PUSH
34051: LD_OWVAR 3
34055: PUSH
34056: FOR_IN
34057: IFFALSE 34135
// if IsSelected ( i ) then
34059: LD_VAR 0 2
34063: PPUSH
34064: CALL_OW 306
34068: IFFALSE 34133
// begin j := GetSide ( i ) ;
34070: LD_ADDR_VAR 0 3
34074: PUSH
34075: LD_VAR 0 2
34079: PPUSH
34080: CALL_OW 255
34084: ST_TO_ADDR
// if j = 8 then
34085: LD_VAR 0 3
34089: PUSH
34090: LD_INT 8
34092: EQUAL
34093: IFFALSE 34105
// j := 0 else
34095: LD_ADDR_VAR 0 3
34099: PUSH
34100: LD_INT 0
34102: ST_TO_ADDR
34103: GO 34119
// j := j + 1 ;
34105: LD_ADDR_VAR 0 3
34109: PUSH
34110: LD_VAR 0 3
34114: PUSH
34115: LD_INT 1
34117: PLUS
34118: ST_TO_ADDR
// SetSide ( i , j ) ;
34119: LD_VAR 0 2
34123: PPUSH
34124: LD_VAR 0 3
34128: PPUSH
34129: CALL_OW 235
// end ;
34133: GO 34056
34135: POP
34136: POP
// end ;
34137: LD_VAR 0 1
34141: RET
// export function hHackFog ; begin
34142: LD_INT 0
34144: PPUSH
// FogOff ( true ) ;
34145: LD_INT 1
34147: PPUSH
34148: CALL_OW 344
// end ;
34152: LD_VAR 0 1
34156: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34157: LD_INT 0
34159: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34160: LD_VAR 0 1
34164: PPUSH
34165: LD_VAR 0 2
34169: PPUSH
34170: LD_VAR 0 3
34174: PPUSH
34175: LD_INT 1
34177: PPUSH
34178: LD_INT 1
34180: PPUSH
34181: CALL_OW 483
// CenterOnXY ( x , y ) ;
34185: LD_VAR 0 2
34189: PPUSH
34190: LD_VAR 0 3
34194: PPUSH
34195: CALL_OW 84
// end ;
34199: LD_VAR 0 4
34203: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34204: LD_INT 0
34206: PPUSH
34207: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34208: LD_VAR 0 1
34212: NOT
34213: PUSH
34214: LD_VAR 0 2
34218: PPUSH
34219: LD_VAR 0 3
34223: PPUSH
34224: CALL_OW 488
34228: NOT
34229: OR
34230: PUSH
34231: LD_VAR 0 1
34235: PPUSH
34236: CALL_OW 266
34240: PUSH
34241: LD_INT 3
34243: NONEQUAL
34244: PUSH
34245: LD_VAR 0 1
34249: PPUSH
34250: CALL_OW 247
34254: PUSH
34255: LD_INT 1
34257: EQUAL
34258: NOT
34259: AND
34260: OR
34261: IFFALSE 34265
// exit ;
34263: GO 34414
// if GetType ( factory ) = unit_human then
34265: LD_VAR 0 1
34269: PPUSH
34270: CALL_OW 247
34274: PUSH
34275: LD_INT 1
34277: EQUAL
34278: IFFALSE 34295
// factory := IsInUnit ( factory ) ;
34280: LD_ADDR_VAR 0 1
34284: PUSH
34285: LD_VAR 0 1
34289: PPUSH
34290: CALL_OW 310
34294: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34295: LD_VAR 0 1
34299: PPUSH
34300: CALL_OW 266
34304: PUSH
34305: LD_INT 3
34307: NONEQUAL
34308: IFFALSE 34312
// exit ;
34310: GO 34414
// if HexInfo ( x , y ) = factory then
34312: LD_VAR 0 2
34316: PPUSH
34317: LD_VAR 0 3
34321: PPUSH
34322: CALL_OW 428
34326: PUSH
34327: LD_VAR 0 1
34331: EQUAL
34332: IFFALSE 34359
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34334: LD_ADDR_EXP 109
34338: PUSH
34339: LD_EXP 109
34343: PPUSH
34344: LD_VAR 0 1
34348: PPUSH
34349: LD_INT 0
34351: PPUSH
34352: CALL_OW 1
34356: ST_TO_ADDR
34357: GO 34410
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34359: LD_ADDR_EXP 109
34363: PUSH
34364: LD_EXP 109
34368: PPUSH
34369: LD_VAR 0 1
34373: PPUSH
34374: LD_VAR 0 1
34378: PPUSH
34379: CALL_OW 255
34383: PUSH
34384: LD_VAR 0 1
34388: PUSH
34389: LD_VAR 0 2
34393: PUSH
34394: LD_VAR 0 3
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: PPUSH
34405: CALL_OW 1
34409: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34410: CALL 34419 0 0
// end ;
34414: LD_VAR 0 4
34418: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34419: LD_INT 0
34421: PPUSH
34422: PPUSH
34423: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34424: LD_STRING resetFactoryWaypoint();
34426: PPUSH
34427: CALL_OW 559
// if factoryWaypoints then
34431: LD_EXP 109
34435: IFFALSE 34561
// begin list := PrepareArray ( factoryWaypoints ) ;
34437: LD_ADDR_VAR 0 3
34441: PUSH
34442: LD_EXP 109
34446: PPUSH
34447: CALL 80883 0 1
34451: ST_TO_ADDR
// for i := 1 to list do
34452: LD_ADDR_VAR 0 2
34456: PUSH
34457: DOUBLE
34458: LD_INT 1
34460: DEC
34461: ST_TO_ADDR
34462: LD_VAR 0 3
34466: PUSH
34467: FOR_TO
34468: IFFALSE 34559
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34470: LD_STRING setFactoryWaypointXY(
34472: PUSH
34473: LD_VAR 0 3
34477: PUSH
34478: LD_VAR 0 2
34482: ARRAY
34483: PUSH
34484: LD_INT 1
34486: ARRAY
34487: STR
34488: PUSH
34489: LD_STRING ,
34491: STR
34492: PUSH
34493: LD_VAR 0 3
34497: PUSH
34498: LD_VAR 0 2
34502: ARRAY
34503: PUSH
34504: LD_INT 2
34506: ARRAY
34507: STR
34508: PUSH
34509: LD_STRING ,
34511: STR
34512: PUSH
34513: LD_VAR 0 3
34517: PUSH
34518: LD_VAR 0 2
34522: ARRAY
34523: PUSH
34524: LD_INT 3
34526: ARRAY
34527: STR
34528: PUSH
34529: LD_STRING ,
34531: STR
34532: PUSH
34533: LD_VAR 0 3
34537: PUSH
34538: LD_VAR 0 2
34542: ARRAY
34543: PUSH
34544: LD_INT 4
34546: ARRAY
34547: STR
34548: PUSH
34549: LD_STRING )
34551: STR
34552: PPUSH
34553: CALL_OW 559
34557: GO 34467
34559: POP
34560: POP
// end ; end ;
34561: LD_VAR 0 1
34565: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34566: LD_INT 0
34568: PPUSH
// if HexInfo ( x , y ) = warehouse then
34569: LD_VAR 0 2
34573: PPUSH
34574: LD_VAR 0 3
34578: PPUSH
34579: CALL_OW 428
34583: PUSH
34584: LD_VAR 0 1
34588: EQUAL
34589: IFFALSE 34616
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34591: LD_ADDR_EXP 110
34595: PUSH
34596: LD_EXP 110
34600: PPUSH
34601: LD_VAR 0 1
34605: PPUSH
34606: LD_INT 0
34608: PPUSH
34609: CALL_OW 1
34613: ST_TO_ADDR
34614: GO 34667
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34616: LD_ADDR_EXP 110
34620: PUSH
34621: LD_EXP 110
34625: PPUSH
34626: LD_VAR 0 1
34630: PPUSH
34631: LD_VAR 0 1
34635: PPUSH
34636: CALL_OW 255
34640: PUSH
34641: LD_VAR 0 1
34645: PUSH
34646: LD_VAR 0 2
34650: PUSH
34651: LD_VAR 0 3
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: PPUSH
34662: CALL_OW 1
34666: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34667: CALL 34676 0 0
// end ;
34671: LD_VAR 0 4
34675: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34676: LD_INT 0
34678: PPUSH
34679: PPUSH
34680: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34681: LD_STRING resetWarehouseGatheringPoints();
34683: PPUSH
34684: CALL_OW 559
// if warehouseGatheringPoints then
34688: LD_EXP 110
34692: IFFALSE 34818
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34694: LD_ADDR_VAR 0 3
34698: PUSH
34699: LD_EXP 110
34703: PPUSH
34704: CALL 80883 0 1
34708: ST_TO_ADDR
// for i := 1 to list do
34709: LD_ADDR_VAR 0 2
34713: PUSH
34714: DOUBLE
34715: LD_INT 1
34717: DEC
34718: ST_TO_ADDR
34719: LD_VAR 0 3
34723: PUSH
34724: FOR_TO
34725: IFFALSE 34816
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34727: LD_STRING setWarehouseGatheringPointXY(
34729: PUSH
34730: LD_VAR 0 3
34734: PUSH
34735: LD_VAR 0 2
34739: ARRAY
34740: PUSH
34741: LD_INT 1
34743: ARRAY
34744: STR
34745: PUSH
34746: LD_STRING ,
34748: STR
34749: PUSH
34750: LD_VAR 0 3
34754: PUSH
34755: LD_VAR 0 2
34759: ARRAY
34760: PUSH
34761: LD_INT 2
34763: ARRAY
34764: STR
34765: PUSH
34766: LD_STRING ,
34768: STR
34769: PUSH
34770: LD_VAR 0 3
34774: PUSH
34775: LD_VAR 0 2
34779: ARRAY
34780: PUSH
34781: LD_INT 3
34783: ARRAY
34784: STR
34785: PUSH
34786: LD_STRING ,
34788: STR
34789: PUSH
34790: LD_VAR 0 3
34794: PUSH
34795: LD_VAR 0 2
34799: ARRAY
34800: PUSH
34801: LD_INT 4
34803: ARRAY
34804: STR
34805: PUSH
34806: LD_STRING )
34808: STR
34809: PPUSH
34810: CALL_OW 559
34814: GO 34724
34816: POP
34817: POP
// end ; end ;
34818: LD_VAR 0 1
34822: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34823: LD_EXP 110
34827: IFFALSE 35512
34829: GO 34831
34831: DISABLE
34832: LD_INT 0
34834: PPUSH
34835: PPUSH
34836: PPUSH
34837: PPUSH
34838: PPUSH
34839: PPUSH
34840: PPUSH
34841: PPUSH
34842: PPUSH
// begin enable ;
34843: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34844: LD_ADDR_VAR 0 3
34848: PUSH
34849: LD_EXP 110
34853: PPUSH
34854: CALL 80883 0 1
34858: ST_TO_ADDR
// if not list then
34859: LD_VAR 0 3
34863: NOT
34864: IFFALSE 34868
// exit ;
34866: GO 35512
// for i := 1 to list do
34868: LD_ADDR_VAR 0 1
34872: PUSH
34873: DOUBLE
34874: LD_INT 1
34876: DEC
34877: ST_TO_ADDR
34878: LD_VAR 0 3
34882: PUSH
34883: FOR_TO
34884: IFFALSE 35510
// begin depot := list [ i ] [ 2 ] ;
34886: LD_ADDR_VAR 0 8
34890: PUSH
34891: LD_VAR 0 3
34895: PUSH
34896: LD_VAR 0 1
34900: ARRAY
34901: PUSH
34902: LD_INT 2
34904: ARRAY
34905: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34906: LD_ADDR_VAR 0 5
34910: PUSH
34911: LD_VAR 0 3
34915: PUSH
34916: LD_VAR 0 1
34920: ARRAY
34921: PUSH
34922: LD_INT 1
34924: ARRAY
34925: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34926: LD_VAR 0 8
34930: PPUSH
34931: CALL_OW 301
34935: PUSH
34936: LD_VAR 0 5
34940: PUSH
34941: LD_VAR 0 8
34945: PPUSH
34946: CALL_OW 255
34950: NONEQUAL
34951: OR
34952: IFFALSE 34981
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34954: LD_ADDR_EXP 110
34958: PUSH
34959: LD_EXP 110
34963: PPUSH
34964: LD_VAR 0 8
34968: PPUSH
34969: LD_INT 0
34971: PPUSH
34972: CALL_OW 1
34976: ST_TO_ADDR
// exit ;
34977: POP
34978: POP
34979: GO 35512
// end ; x := list [ i ] [ 3 ] ;
34981: LD_ADDR_VAR 0 6
34985: PUSH
34986: LD_VAR 0 3
34990: PUSH
34991: LD_VAR 0 1
34995: ARRAY
34996: PUSH
34997: LD_INT 3
34999: ARRAY
35000: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35001: LD_ADDR_VAR 0 7
35005: PUSH
35006: LD_VAR 0 3
35010: PUSH
35011: LD_VAR 0 1
35015: ARRAY
35016: PUSH
35017: LD_INT 4
35019: ARRAY
35020: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35021: LD_ADDR_VAR 0 9
35025: PUSH
35026: LD_VAR 0 6
35030: PPUSH
35031: LD_VAR 0 7
35035: PPUSH
35036: LD_INT 16
35038: PPUSH
35039: CALL 79471 0 3
35043: ST_TO_ADDR
// if not cratesNearbyPoint then
35044: LD_VAR 0 9
35048: NOT
35049: IFFALSE 35055
// exit ;
35051: POP
35052: POP
35053: GO 35512
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35055: LD_ADDR_VAR 0 4
35059: PUSH
35060: LD_INT 22
35062: PUSH
35063: LD_VAR 0 5
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 3
35074: PUSH
35075: LD_INT 60
35077: PUSH
35078: EMPTY
35079: LIST
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 91
35087: PUSH
35088: LD_VAR 0 8
35092: PUSH
35093: LD_INT 6
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: LD_INT 25
35106: PUSH
35107: LD_INT 2
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 25
35116: PUSH
35117: LD_INT 16
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: LIST
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: PPUSH
35135: CALL_OW 69
35139: PUSH
35140: LD_VAR 0 8
35144: PPUSH
35145: CALL_OW 313
35149: PPUSH
35150: LD_INT 3
35152: PUSH
35153: LD_INT 60
35155: PUSH
35156: EMPTY
35157: LIST
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 2
35165: PUSH
35166: LD_INT 25
35168: PUSH
35169: LD_INT 2
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 25
35178: PUSH
35179: LD_INT 16
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: LIST
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PPUSH
35195: CALL_OW 72
35199: UNION
35200: ST_TO_ADDR
// if tmp then
35201: LD_VAR 0 4
35205: IFFALSE 35285
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35207: LD_ADDR_VAR 0 4
35211: PUSH
35212: LD_VAR 0 4
35216: PPUSH
35217: LD_INT 3
35219: PPUSH
35220: CALL 77440 0 2
35224: ST_TO_ADDR
// for j in tmp do
35225: LD_ADDR_VAR 0 2
35229: PUSH
35230: LD_VAR 0 4
35234: PUSH
35235: FOR_IN
35236: IFFALSE 35279
// begin if IsInUnit ( j ) then
35238: LD_VAR 0 2
35242: PPUSH
35243: CALL_OW 310
35247: IFFALSE 35258
// ComExit ( j ) ;
35249: LD_VAR 0 2
35253: PPUSH
35254: CALL 77523 0 1
// AddComCollect ( j , x , y ) ;
35258: LD_VAR 0 2
35262: PPUSH
35263: LD_VAR 0 6
35267: PPUSH
35268: LD_VAR 0 7
35272: PPUSH
35273: CALL_OW 177
// end ;
35277: GO 35235
35279: POP
35280: POP
// exit ;
35281: POP
35282: POP
35283: GO 35512
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35285: LD_ADDR_VAR 0 4
35289: PUSH
35290: LD_INT 22
35292: PUSH
35293: LD_VAR 0 5
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 91
35304: PUSH
35305: LD_VAR 0 8
35309: PUSH
35310: LD_INT 8
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 2
35320: PUSH
35321: LD_INT 34
35323: PUSH
35324: LD_INT 12
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 34
35333: PUSH
35334: LD_INT 51
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 34
35343: PUSH
35344: LD_INT 32
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 34
35353: PUSH
35354: LD_INT 89
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: LIST
35372: PPUSH
35373: CALL_OW 69
35377: ST_TO_ADDR
// if tmp then
35378: LD_VAR 0 4
35382: IFFALSE 35508
// begin for j in tmp do
35384: LD_ADDR_VAR 0 2
35388: PUSH
35389: LD_VAR 0 4
35393: PUSH
35394: FOR_IN
35395: IFFALSE 35506
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35397: LD_VAR 0 2
35401: PPUSH
35402: CALL_OW 262
35406: PUSH
35407: LD_INT 3
35409: EQUAL
35410: PUSH
35411: LD_VAR 0 2
35415: PPUSH
35416: CALL_OW 261
35420: PUSH
35421: LD_INT 20
35423: GREATER
35424: OR
35425: PUSH
35426: LD_VAR 0 2
35430: PPUSH
35431: CALL_OW 314
35435: NOT
35436: AND
35437: PUSH
35438: LD_VAR 0 2
35442: PPUSH
35443: CALL_OW 263
35447: PUSH
35448: LD_INT 1
35450: NONEQUAL
35451: PUSH
35452: LD_VAR 0 2
35456: PPUSH
35457: CALL_OW 311
35461: OR
35462: AND
35463: IFFALSE 35504
// begin ComCollect ( j , x , y ) ;
35465: LD_VAR 0 2
35469: PPUSH
35470: LD_VAR 0 6
35474: PPUSH
35475: LD_VAR 0 7
35479: PPUSH
35480: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35484: LD_VAR 0 2
35488: PPUSH
35489: LD_VAR 0 8
35493: PPUSH
35494: CALL_OW 172
// exit ;
35498: POP
35499: POP
35500: POP
35501: POP
35502: GO 35512
// end ;
35504: GO 35394
35506: POP
35507: POP
// end ; end ;
35508: GO 34883
35510: POP
35511: POP
// end ; end_of_file
35512: PPOPN 9
35514: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35515: LD_INT 0
35517: PPUSH
35518: PPUSH
35519: PPUSH
35520: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35521: LD_VAR 0 1
35525: PPUSH
35526: CALL_OW 264
35530: PUSH
35531: LD_INT 91
35533: EQUAL
35534: IFFALSE 35606
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35536: LD_INT 68
35538: PPUSH
35539: LD_VAR 0 1
35543: PPUSH
35544: CALL_OW 255
35548: PPUSH
35549: CALL_OW 321
35553: PUSH
35554: LD_INT 2
35556: EQUAL
35557: IFFALSE 35569
// eff := 70 else
35559: LD_ADDR_VAR 0 4
35563: PUSH
35564: LD_INT 70
35566: ST_TO_ADDR
35567: GO 35577
// eff := 30 ;
35569: LD_ADDR_VAR 0 4
35573: PUSH
35574: LD_INT 30
35576: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35577: LD_VAR 0 1
35581: PPUSH
35582: CALL_OW 250
35586: PPUSH
35587: LD_VAR 0 1
35591: PPUSH
35592: CALL_OW 251
35596: PPUSH
35597: LD_VAR 0 4
35601: PPUSH
35602: CALL_OW 495
// end ; end ;
35606: LD_VAR 0 2
35610: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35611: LD_INT 0
35613: PPUSH
// end ;
35614: LD_VAR 0 4
35618: RET
// export function SOS_Command ( cmd ) ; begin
35619: LD_INT 0
35621: PPUSH
// end ;
35622: LD_VAR 0 2
35626: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35627: LD_INT 0
35629: PPUSH
// end ;
35630: LD_VAR 0 6
35634: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35635: LD_INT 0
35637: PPUSH
35638: PPUSH
// if not vehicle or not factory then
35639: LD_VAR 0 1
35643: NOT
35644: PUSH
35645: LD_VAR 0 2
35649: NOT
35650: OR
35651: IFFALSE 35655
// exit ;
35653: GO 35886
// if factoryWaypoints >= factory then
35655: LD_EXP 109
35659: PUSH
35660: LD_VAR 0 2
35664: GREATEREQUAL
35665: IFFALSE 35886
// if factoryWaypoints [ factory ] then
35667: LD_EXP 109
35671: PUSH
35672: LD_VAR 0 2
35676: ARRAY
35677: IFFALSE 35886
// begin if GetControl ( vehicle ) = control_manual then
35679: LD_VAR 0 1
35683: PPUSH
35684: CALL_OW 263
35688: PUSH
35689: LD_INT 1
35691: EQUAL
35692: IFFALSE 35773
// begin driver := IsDrivenBy ( vehicle ) ;
35694: LD_ADDR_VAR 0 4
35698: PUSH
35699: LD_VAR 0 1
35703: PPUSH
35704: CALL_OW 311
35708: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35709: LD_VAR 0 4
35713: PPUSH
35714: LD_EXP 109
35718: PUSH
35719: LD_VAR 0 2
35723: ARRAY
35724: PUSH
35725: LD_INT 3
35727: ARRAY
35728: PPUSH
35729: LD_EXP 109
35733: PUSH
35734: LD_VAR 0 2
35738: ARRAY
35739: PUSH
35740: LD_INT 4
35742: ARRAY
35743: PPUSH
35744: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35748: LD_VAR 0 4
35752: PPUSH
35753: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35757: LD_VAR 0 4
35761: PPUSH
35762: LD_VAR 0 2
35766: PPUSH
35767: CALL_OW 180
// end else
35771: GO 35886
// if GetControl ( vehicle ) = control_remote then
35773: LD_VAR 0 1
35777: PPUSH
35778: CALL_OW 263
35782: PUSH
35783: LD_INT 2
35785: EQUAL
35786: IFFALSE 35847
// begin wait ( 0 0$2 ) ;
35788: LD_INT 70
35790: PPUSH
35791: CALL_OW 67
// if Connect ( vehicle ) then
35795: LD_VAR 0 1
35799: PPUSH
35800: CALL 47744 0 1
35804: IFFALSE 35845
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35806: LD_VAR 0 1
35810: PPUSH
35811: LD_EXP 109
35815: PUSH
35816: LD_VAR 0 2
35820: ARRAY
35821: PUSH
35822: LD_INT 3
35824: ARRAY
35825: PPUSH
35826: LD_EXP 109
35830: PUSH
35831: LD_VAR 0 2
35835: ARRAY
35836: PUSH
35837: LD_INT 4
35839: ARRAY
35840: PPUSH
35841: CALL_OW 171
// end else
35845: GO 35886
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35847: LD_VAR 0 1
35851: PPUSH
35852: LD_EXP 109
35856: PUSH
35857: LD_VAR 0 2
35861: ARRAY
35862: PUSH
35863: LD_INT 3
35865: ARRAY
35866: PPUSH
35867: LD_EXP 109
35871: PUSH
35872: LD_VAR 0 2
35876: ARRAY
35877: PUSH
35878: LD_INT 4
35880: ARRAY
35881: PPUSH
35882: CALL_OW 171
// end ; end ;
35886: LD_VAR 0 3
35890: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35891: LD_INT 0
35893: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35894: LD_VAR 0 1
35898: PUSH
35899: LD_INT 250
35901: EQUAL
35902: PUSH
35903: LD_VAR 0 2
35907: PPUSH
35908: CALL_OW 264
35912: PUSH
35913: LD_INT 81
35915: EQUAL
35916: AND
35917: IFFALSE 35938
// MinerPlaceMine ( unit , x , y ) ;
35919: LD_VAR 0 2
35923: PPUSH
35924: LD_VAR 0 4
35928: PPUSH
35929: LD_VAR 0 5
35933: PPUSH
35934: CALL 38323 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35938: LD_VAR 0 1
35942: PUSH
35943: LD_INT 251
35945: EQUAL
35946: PUSH
35947: LD_VAR 0 2
35951: PPUSH
35952: CALL_OW 264
35956: PUSH
35957: LD_INT 81
35959: EQUAL
35960: AND
35961: IFFALSE 35982
// MinerDetonateMine ( unit , x , y ) ;
35963: LD_VAR 0 2
35967: PPUSH
35968: LD_VAR 0 4
35972: PPUSH
35973: LD_VAR 0 5
35977: PPUSH
35978: CALL 38598 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35982: LD_VAR 0 1
35986: PUSH
35987: LD_INT 252
35989: EQUAL
35990: PUSH
35991: LD_VAR 0 2
35995: PPUSH
35996: CALL_OW 264
36000: PUSH
36001: LD_INT 81
36003: EQUAL
36004: AND
36005: IFFALSE 36026
// MinerCreateMinefield ( unit , x , y ) ;
36007: LD_VAR 0 2
36011: PPUSH
36012: LD_VAR 0 4
36016: PPUSH
36017: LD_VAR 0 5
36021: PPUSH
36022: CALL 39015 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36026: LD_VAR 0 1
36030: PUSH
36031: LD_INT 253
36033: EQUAL
36034: PUSH
36035: LD_VAR 0 2
36039: PPUSH
36040: CALL_OW 257
36044: PUSH
36045: LD_INT 5
36047: EQUAL
36048: AND
36049: IFFALSE 36070
// ComBinocular ( unit , x , y ) ;
36051: LD_VAR 0 2
36055: PPUSH
36056: LD_VAR 0 4
36060: PPUSH
36061: LD_VAR 0 5
36065: PPUSH
36066: CALL 39384 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36070: LD_VAR 0 1
36074: PUSH
36075: LD_INT 254
36077: EQUAL
36078: PUSH
36079: LD_VAR 0 2
36083: PPUSH
36084: CALL_OW 264
36088: PUSH
36089: LD_INT 99
36091: EQUAL
36092: AND
36093: PUSH
36094: LD_VAR 0 3
36098: PPUSH
36099: CALL_OW 263
36103: PUSH
36104: LD_INT 3
36106: EQUAL
36107: AND
36108: IFFALSE 36124
// HackDestroyVehicle ( unit , selectedUnit ) ;
36110: LD_VAR 0 2
36114: PPUSH
36115: LD_VAR 0 3
36119: PPUSH
36120: CALL 37687 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36124: LD_VAR 0 1
36128: PUSH
36129: LD_INT 255
36131: EQUAL
36132: PUSH
36133: LD_VAR 0 2
36137: PPUSH
36138: CALL_OW 264
36142: PUSH
36143: LD_INT 14
36145: PUSH
36146: LD_INT 53
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: IN
36153: AND
36154: PUSH
36155: LD_VAR 0 4
36159: PPUSH
36160: LD_VAR 0 5
36164: PPUSH
36165: CALL_OW 488
36169: AND
36170: IFFALSE 36194
// CutTreeXYR ( unit , x , y , 12 ) ;
36172: LD_VAR 0 2
36176: PPUSH
36177: LD_VAR 0 4
36181: PPUSH
36182: LD_VAR 0 5
36186: PPUSH
36187: LD_INT 12
36189: PPUSH
36190: CALL 36257 0 4
// if cmd = 256 then
36194: LD_VAR 0 1
36198: PUSH
36199: LD_INT 256
36201: EQUAL
36202: IFFALSE 36223
// SetFactoryWaypoint ( unit , x , y ) ;
36204: LD_VAR 0 2
36208: PPUSH
36209: LD_VAR 0 4
36213: PPUSH
36214: LD_VAR 0 5
36218: PPUSH
36219: CALL 34204 0 3
// if cmd = 257 then
36223: LD_VAR 0 1
36227: PUSH
36228: LD_INT 257
36230: EQUAL
36231: IFFALSE 36252
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36233: LD_VAR 0 2
36237: PPUSH
36238: LD_VAR 0 4
36242: PPUSH
36243: LD_VAR 0 5
36247: PPUSH
36248: CALL 34566 0 3
// end ;
36252: LD_VAR 0 6
36256: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36257: LD_INT 0
36259: PPUSH
36260: PPUSH
36261: PPUSH
36262: PPUSH
36263: PPUSH
36264: PPUSH
36265: PPUSH
36266: PPUSH
36267: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36268: LD_VAR 0 1
36272: NOT
36273: PUSH
36274: LD_VAR 0 2
36278: PPUSH
36279: LD_VAR 0 3
36283: PPUSH
36284: CALL_OW 488
36288: NOT
36289: OR
36290: PUSH
36291: LD_VAR 0 4
36295: NOT
36296: OR
36297: IFFALSE 36301
// exit ;
36299: GO 36641
// list := [ ] ;
36301: LD_ADDR_VAR 0 13
36305: PUSH
36306: EMPTY
36307: ST_TO_ADDR
// if x - r < 0 then
36308: LD_VAR 0 2
36312: PUSH
36313: LD_VAR 0 4
36317: MINUS
36318: PUSH
36319: LD_INT 0
36321: LESS
36322: IFFALSE 36334
// min_x := 0 else
36324: LD_ADDR_VAR 0 7
36328: PUSH
36329: LD_INT 0
36331: ST_TO_ADDR
36332: GO 36350
// min_x := x - r ;
36334: LD_ADDR_VAR 0 7
36338: PUSH
36339: LD_VAR 0 2
36343: PUSH
36344: LD_VAR 0 4
36348: MINUS
36349: ST_TO_ADDR
// if y - r < 0 then
36350: LD_VAR 0 3
36354: PUSH
36355: LD_VAR 0 4
36359: MINUS
36360: PUSH
36361: LD_INT 0
36363: LESS
36364: IFFALSE 36376
// min_y := 0 else
36366: LD_ADDR_VAR 0 8
36370: PUSH
36371: LD_INT 0
36373: ST_TO_ADDR
36374: GO 36392
// min_y := y - r ;
36376: LD_ADDR_VAR 0 8
36380: PUSH
36381: LD_VAR 0 3
36385: PUSH
36386: LD_VAR 0 4
36390: MINUS
36391: ST_TO_ADDR
// max_x := x + r ;
36392: LD_ADDR_VAR 0 9
36396: PUSH
36397: LD_VAR 0 2
36401: PUSH
36402: LD_VAR 0 4
36406: PLUS
36407: ST_TO_ADDR
// max_y := y + r ;
36408: LD_ADDR_VAR 0 10
36412: PUSH
36413: LD_VAR 0 3
36417: PUSH
36418: LD_VAR 0 4
36422: PLUS
36423: ST_TO_ADDR
// for _x = min_x to max_x do
36424: LD_ADDR_VAR 0 11
36428: PUSH
36429: DOUBLE
36430: LD_VAR 0 7
36434: DEC
36435: ST_TO_ADDR
36436: LD_VAR 0 9
36440: PUSH
36441: FOR_TO
36442: IFFALSE 36559
// for _y = min_y to max_y do
36444: LD_ADDR_VAR 0 12
36448: PUSH
36449: DOUBLE
36450: LD_VAR 0 8
36454: DEC
36455: ST_TO_ADDR
36456: LD_VAR 0 10
36460: PUSH
36461: FOR_TO
36462: IFFALSE 36555
// begin if not ValidHex ( _x , _y ) then
36464: LD_VAR 0 11
36468: PPUSH
36469: LD_VAR 0 12
36473: PPUSH
36474: CALL_OW 488
36478: NOT
36479: IFFALSE 36483
// continue ;
36481: GO 36461
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36483: LD_VAR 0 11
36487: PPUSH
36488: LD_VAR 0 12
36492: PPUSH
36493: CALL_OW 351
36497: PUSH
36498: LD_VAR 0 11
36502: PPUSH
36503: LD_VAR 0 12
36507: PPUSH
36508: CALL_OW 554
36512: AND
36513: IFFALSE 36553
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36515: LD_ADDR_VAR 0 13
36519: PUSH
36520: LD_VAR 0 13
36524: PPUSH
36525: LD_VAR 0 13
36529: PUSH
36530: LD_INT 1
36532: PLUS
36533: PPUSH
36534: LD_VAR 0 11
36538: PUSH
36539: LD_VAR 0 12
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PPUSH
36548: CALL_OW 2
36552: ST_TO_ADDR
// end ;
36553: GO 36461
36555: POP
36556: POP
36557: GO 36441
36559: POP
36560: POP
// if not list then
36561: LD_VAR 0 13
36565: NOT
36566: IFFALSE 36570
// exit ;
36568: GO 36641
// for i in list do
36570: LD_ADDR_VAR 0 6
36574: PUSH
36575: LD_VAR 0 13
36579: PUSH
36580: FOR_IN
36581: IFFALSE 36639
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36583: LD_VAR 0 1
36587: PPUSH
36588: LD_STRING M
36590: PUSH
36591: LD_VAR 0 6
36595: PUSH
36596: LD_INT 1
36598: ARRAY
36599: PUSH
36600: LD_VAR 0 6
36604: PUSH
36605: LD_INT 2
36607: ARRAY
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: PUSH
36630: EMPTY
36631: LIST
36632: PPUSH
36633: CALL_OW 447
36637: GO 36580
36639: POP
36640: POP
// end ;
36641: LD_VAR 0 5
36645: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36646: LD_EXP 112
36650: NOT
36651: IFFALSE 36701
36653: GO 36655
36655: DISABLE
// begin initHack := true ;
36656: LD_ADDR_EXP 112
36660: PUSH
36661: LD_INT 1
36663: ST_TO_ADDR
// hackTanks := [ ] ;
36664: LD_ADDR_EXP 113
36668: PUSH
36669: EMPTY
36670: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36671: LD_ADDR_EXP 114
36675: PUSH
36676: EMPTY
36677: ST_TO_ADDR
// hackLimit := 3 ;
36678: LD_ADDR_EXP 115
36682: PUSH
36683: LD_INT 3
36685: ST_TO_ADDR
// hackDist := 12 ;
36686: LD_ADDR_EXP 116
36690: PUSH
36691: LD_INT 12
36693: ST_TO_ADDR
// hackCounter := [ ] ;
36694: LD_ADDR_EXP 117
36698: PUSH
36699: EMPTY
36700: ST_TO_ADDR
// end ;
36701: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36702: LD_EXP 112
36706: PUSH
36707: LD_INT 34
36709: PUSH
36710: LD_INT 99
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PPUSH
36717: CALL_OW 69
36721: AND
36722: IFFALSE 36975
36724: GO 36726
36726: DISABLE
36727: LD_INT 0
36729: PPUSH
36730: PPUSH
// begin enable ;
36731: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36732: LD_ADDR_VAR 0 1
36736: PUSH
36737: LD_INT 34
36739: PUSH
36740: LD_INT 99
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PPUSH
36747: CALL_OW 69
36751: PUSH
36752: FOR_IN
36753: IFFALSE 36973
// begin if not i in hackTanks then
36755: LD_VAR 0 1
36759: PUSH
36760: LD_EXP 113
36764: IN
36765: NOT
36766: IFFALSE 36849
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36768: LD_ADDR_EXP 113
36772: PUSH
36773: LD_EXP 113
36777: PPUSH
36778: LD_EXP 113
36782: PUSH
36783: LD_INT 1
36785: PLUS
36786: PPUSH
36787: LD_VAR 0 1
36791: PPUSH
36792: CALL_OW 1
36796: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36797: LD_ADDR_EXP 114
36801: PUSH
36802: LD_EXP 114
36806: PPUSH
36807: LD_EXP 114
36811: PUSH
36812: LD_INT 1
36814: PLUS
36815: PPUSH
36816: EMPTY
36817: PPUSH
36818: CALL_OW 1
36822: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36823: LD_ADDR_EXP 117
36827: PUSH
36828: LD_EXP 117
36832: PPUSH
36833: LD_EXP 117
36837: PUSH
36838: LD_INT 1
36840: PLUS
36841: PPUSH
36842: EMPTY
36843: PPUSH
36844: CALL_OW 1
36848: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36849: LD_VAR 0 1
36853: PPUSH
36854: CALL_OW 302
36858: NOT
36859: IFFALSE 36872
// begin HackUnlinkAll ( i ) ;
36861: LD_VAR 0 1
36865: PPUSH
36866: CALL 36978 0 1
// continue ;
36870: GO 36752
// end ; HackCheckCapturedStatus ( i ) ;
36872: LD_VAR 0 1
36876: PPUSH
36877: CALL 37421 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36881: LD_ADDR_VAR 0 2
36885: PUSH
36886: LD_INT 81
36888: PUSH
36889: LD_VAR 0 1
36893: PPUSH
36894: CALL_OW 255
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 33
36905: PUSH
36906: LD_INT 3
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 91
36915: PUSH
36916: LD_VAR 0 1
36920: PUSH
36921: LD_EXP 116
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 50
36933: PUSH
36934: EMPTY
36935: LIST
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: PPUSH
36943: CALL_OW 69
36947: ST_TO_ADDR
// if not tmp then
36948: LD_VAR 0 2
36952: NOT
36953: IFFALSE 36957
// continue ;
36955: GO 36752
// HackLink ( i , tmp ) ;
36957: LD_VAR 0 1
36961: PPUSH
36962: LD_VAR 0 2
36966: PPUSH
36967: CALL 37114 0 2
// end ;
36971: GO 36752
36973: POP
36974: POP
// end ;
36975: PPOPN 2
36977: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36978: LD_INT 0
36980: PPUSH
36981: PPUSH
36982: PPUSH
// if not hack in hackTanks then
36983: LD_VAR 0 1
36987: PUSH
36988: LD_EXP 113
36992: IN
36993: NOT
36994: IFFALSE 36998
// exit ;
36996: GO 37109
// index := GetElementIndex ( hackTanks , hack ) ;
36998: LD_ADDR_VAR 0 4
37002: PUSH
37003: LD_EXP 113
37007: PPUSH
37008: LD_VAR 0 1
37012: PPUSH
37013: CALL 44551 0 2
37017: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37018: LD_EXP 114
37022: PUSH
37023: LD_VAR 0 4
37027: ARRAY
37028: IFFALSE 37109
// begin for i in hackTanksCaptured [ index ] do
37030: LD_ADDR_VAR 0 3
37034: PUSH
37035: LD_EXP 114
37039: PUSH
37040: LD_VAR 0 4
37044: ARRAY
37045: PUSH
37046: FOR_IN
37047: IFFALSE 37073
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37049: LD_VAR 0 3
37053: PUSH
37054: LD_INT 1
37056: ARRAY
37057: PPUSH
37058: LD_VAR 0 3
37062: PUSH
37063: LD_INT 2
37065: ARRAY
37066: PPUSH
37067: CALL_OW 235
37071: GO 37046
37073: POP
37074: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37075: LD_ADDR_EXP 114
37079: PUSH
37080: LD_EXP 114
37084: PPUSH
37085: LD_VAR 0 4
37089: PPUSH
37090: EMPTY
37091: PPUSH
37092: CALL_OW 1
37096: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37097: LD_VAR 0 1
37101: PPUSH
37102: LD_INT 0
37104: PPUSH
37105: CALL_OW 505
// end ; end ;
37109: LD_VAR 0 2
37113: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37114: LD_INT 0
37116: PPUSH
37117: PPUSH
37118: PPUSH
// if not hack in hackTanks or not vehicles then
37119: LD_VAR 0 1
37123: PUSH
37124: LD_EXP 113
37128: IN
37129: NOT
37130: PUSH
37131: LD_VAR 0 2
37135: NOT
37136: OR
37137: IFFALSE 37141
// exit ;
37139: GO 37416
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37141: LD_ADDR_VAR 0 2
37145: PUSH
37146: LD_VAR 0 1
37150: PPUSH
37151: LD_VAR 0 2
37155: PPUSH
37156: LD_INT 1
37158: PPUSH
37159: LD_INT 1
37161: PPUSH
37162: CALL 45201 0 4
37166: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37167: LD_ADDR_VAR 0 5
37171: PUSH
37172: LD_EXP 113
37176: PPUSH
37177: LD_VAR 0 1
37181: PPUSH
37182: CALL 44551 0 2
37186: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37187: LD_EXP 114
37191: PUSH
37192: LD_VAR 0 5
37196: ARRAY
37197: PUSH
37198: LD_EXP 115
37202: LESS
37203: IFFALSE 37392
// begin for i := 1 to vehicles do
37205: LD_ADDR_VAR 0 4
37209: PUSH
37210: DOUBLE
37211: LD_INT 1
37213: DEC
37214: ST_TO_ADDR
37215: LD_VAR 0 2
37219: PUSH
37220: FOR_TO
37221: IFFALSE 37390
// begin if hackTanksCaptured [ index ] = hackLimit then
37223: LD_EXP 114
37227: PUSH
37228: LD_VAR 0 5
37232: ARRAY
37233: PUSH
37234: LD_EXP 115
37238: EQUAL
37239: IFFALSE 37243
// break ;
37241: GO 37390
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37243: LD_ADDR_EXP 117
37247: PUSH
37248: LD_EXP 117
37252: PPUSH
37253: LD_VAR 0 5
37257: PPUSH
37258: LD_EXP 117
37262: PUSH
37263: LD_VAR 0 5
37267: ARRAY
37268: PUSH
37269: LD_INT 1
37271: PLUS
37272: PPUSH
37273: CALL_OW 1
37277: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37278: LD_ADDR_EXP 114
37282: PUSH
37283: LD_EXP 114
37287: PPUSH
37288: LD_VAR 0 5
37292: PUSH
37293: LD_EXP 114
37297: PUSH
37298: LD_VAR 0 5
37302: ARRAY
37303: PUSH
37304: LD_INT 1
37306: PLUS
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PPUSH
37312: LD_VAR 0 2
37316: PUSH
37317: LD_VAR 0 4
37321: ARRAY
37322: PUSH
37323: LD_VAR 0 2
37327: PUSH
37328: LD_VAR 0 4
37332: ARRAY
37333: PPUSH
37334: CALL_OW 255
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PPUSH
37343: CALL 44766 0 3
37347: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37348: LD_VAR 0 2
37352: PUSH
37353: LD_VAR 0 4
37357: ARRAY
37358: PPUSH
37359: LD_VAR 0 1
37363: PPUSH
37364: CALL_OW 255
37368: PPUSH
37369: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37373: LD_VAR 0 2
37377: PUSH
37378: LD_VAR 0 4
37382: ARRAY
37383: PPUSH
37384: CALL_OW 141
// end ;
37388: GO 37220
37390: POP
37391: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37392: LD_VAR 0 1
37396: PPUSH
37397: LD_EXP 114
37401: PUSH
37402: LD_VAR 0 5
37406: ARRAY
37407: PUSH
37408: LD_INT 0
37410: PLUS
37411: PPUSH
37412: CALL_OW 505
// end ;
37416: LD_VAR 0 3
37420: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37421: LD_INT 0
37423: PPUSH
37424: PPUSH
37425: PPUSH
37426: PPUSH
// if not hack in hackTanks then
37427: LD_VAR 0 1
37431: PUSH
37432: LD_EXP 113
37436: IN
37437: NOT
37438: IFFALSE 37442
// exit ;
37440: GO 37682
// index := GetElementIndex ( hackTanks , hack ) ;
37442: LD_ADDR_VAR 0 4
37446: PUSH
37447: LD_EXP 113
37451: PPUSH
37452: LD_VAR 0 1
37456: PPUSH
37457: CALL 44551 0 2
37461: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37462: LD_ADDR_VAR 0 3
37466: PUSH
37467: DOUBLE
37468: LD_EXP 114
37472: PUSH
37473: LD_VAR 0 4
37477: ARRAY
37478: INC
37479: ST_TO_ADDR
37480: LD_INT 1
37482: PUSH
37483: FOR_DOWNTO
37484: IFFALSE 37656
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37486: LD_ADDR_VAR 0 5
37490: PUSH
37491: LD_EXP 114
37495: PUSH
37496: LD_VAR 0 4
37500: ARRAY
37501: PUSH
37502: LD_VAR 0 3
37506: ARRAY
37507: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37508: LD_VAR 0 5
37512: PUSH
37513: LD_INT 1
37515: ARRAY
37516: PPUSH
37517: CALL_OW 302
37521: NOT
37522: PUSH
37523: LD_VAR 0 5
37527: PUSH
37528: LD_INT 1
37530: ARRAY
37531: PPUSH
37532: CALL_OW 255
37536: PUSH
37537: LD_VAR 0 1
37541: PPUSH
37542: CALL_OW 255
37546: NONEQUAL
37547: OR
37548: IFFALSE 37654
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37550: LD_VAR 0 5
37554: PUSH
37555: LD_INT 1
37557: ARRAY
37558: PPUSH
37559: CALL_OW 305
37563: PUSH
37564: LD_VAR 0 5
37568: PUSH
37569: LD_INT 1
37571: ARRAY
37572: PPUSH
37573: CALL_OW 255
37577: PUSH
37578: LD_VAR 0 1
37582: PPUSH
37583: CALL_OW 255
37587: EQUAL
37588: AND
37589: IFFALSE 37613
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37591: LD_VAR 0 5
37595: PUSH
37596: LD_INT 1
37598: ARRAY
37599: PPUSH
37600: LD_VAR 0 5
37604: PUSH
37605: LD_INT 2
37607: ARRAY
37608: PPUSH
37609: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37613: LD_ADDR_EXP 114
37617: PUSH
37618: LD_EXP 114
37622: PPUSH
37623: LD_VAR 0 4
37627: PPUSH
37628: LD_EXP 114
37632: PUSH
37633: LD_VAR 0 4
37637: ARRAY
37638: PPUSH
37639: LD_VAR 0 3
37643: PPUSH
37644: CALL_OW 3
37648: PPUSH
37649: CALL_OW 1
37653: ST_TO_ADDR
// end ; end ;
37654: GO 37483
37656: POP
37657: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37658: LD_VAR 0 1
37662: PPUSH
37663: LD_EXP 114
37667: PUSH
37668: LD_VAR 0 4
37672: ARRAY
37673: PUSH
37674: LD_INT 0
37676: PLUS
37677: PPUSH
37678: CALL_OW 505
// end ;
37682: LD_VAR 0 2
37686: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37687: LD_INT 0
37689: PPUSH
37690: PPUSH
37691: PPUSH
37692: PPUSH
// if not hack in hackTanks then
37693: LD_VAR 0 1
37697: PUSH
37698: LD_EXP 113
37702: IN
37703: NOT
37704: IFFALSE 37708
// exit ;
37706: GO 37793
// index := GetElementIndex ( hackTanks , hack ) ;
37708: LD_ADDR_VAR 0 5
37712: PUSH
37713: LD_EXP 113
37717: PPUSH
37718: LD_VAR 0 1
37722: PPUSH
37723: CALL 44551 0 2
37727: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37728: LD_ADDR_VAR 0 4
37732: PUSH
37733: DOUBLE
37734: LD_INT 1
37736: DEC
37737: ST_TO_ADDR
37738: LD_EXP 114
37742: PUSH
37743: LD_VAR 0 5
37747: ARRAY
37748: PUSH
37749: FOR_TO
37750: IFFALSE 37791
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37752: LD_EXP 114
37756: PUSH
37757: LD_VAR 0 5
37761: ARRAY
37762: PUSH
37763: LD_VAR 0 4
37767: ARRAY
37768: PUSH
37769: LD_INT 1
37771: ARRAY
37772: PUSH
37773: LD_VAR 0 2
37777: EQUAL
37778: IFFALSE 37789
// KillUnit ( vehicle ) ;
37780: LD_VAR 0 2
37784: PPUSH
37785: CALL_OW 66
37789: GO 37749
37791: POP
37792: POP
// end ;
37793: LD_VAR 0 3
37797: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37798: LD_EXP 118
37802: NOT
37803: IFFALSE 37838
37805: GO 37807
37807: DISABLE
// begin initMiner := true ;
37808: LD_ADDR_EXP 118
37812: PUSH
37813: LD_INT 1
37815: ST_TO_ADDR
// minersList := [ ] ;
37816: LD_ADDR_EXP 119
37820: PUSH
37821: EMPTY
37822: ST_TO_ADDR
// minerMinesList := [ ] ;
37823: LD_ADDR_EXP 120
37827: PUSH
37828: EMPTY
37829: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37830: LD_ADDR_EXP 121
37834: PUSH
37835: LD_INT 5
37837: ST_TO_ADDR
// end ;
37838: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37839: LD_EXP 118
37843: PUSH
37844: LD_INT 34
37846: PUSH
37847: LD_INT 81
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PPUSH
37854: CALL_OW 69
37858: AND
37859: IFFALSE 38320
37861: GO 37863
37863: DISABLE
37864: LD_INT 0
37866: PPUSH
37867: PPUSH
37868: PPUSH
37869: PPUSH
// begin enable ;
37870: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37871: LD_ADDR_VAR 0 1
37875: PUSH
37876: LD_INT 34
37878: PUSH
37879: LD_INT 81
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PPUSH
37886: CALL_OW 69
37890: PUSH
37891: FOR_IN
37892: IFFALSE 37964
// begin if not i in minersList then
37894: LD_VAR 0 1
37898: PUSH
37899: LD_EXP 119
37903: IN
37904: NOT
37905: IFFALSE 37962
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37907: LD_ADDR_EXP 119
37911: PUSH
37912: LD_EXP 119
37916: PPUSH
37917: LD_EXP 119
37921: PUSH
37922: LD_INT 1
37924: PLUS
37925: PPUSH
37926: LD_VAR 0 1
37930: PPUSH
37931: CALL_OW 1
37935: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37936: LD_ADDR_EXP 120
37940: PUSH
37941: LD_EXP 120
37945: PPUSH
37946: LD_EXP 120
37950: PUSH
37951: LD_INT 1
37953: PLUS
37954: PPUSH
37955: EMPTY
37956: PPUSH
37957: CALL_OW 1
37961: ST_TO_ADDR
// end end ;
37962: GO 37891
37964: POP
37965: POP
// for i := minerMinesList downto 1 do
37966: LD_ADDR_VAR 0 1
37970: PUSH
37971: DOUBLE
37972: LD_EXP 120
37976: INC
37977: ST_TO_ADDR
37978: LD_INT 1
37980: PUSH
37981: FOR_DOWNTO
37982: IFFALSE 38318
// begin if IsLive ( minersList [ i ] ) then
37984: LD_EXP 119
37988: PUSH
37989: LD_VAR 0 1
37993: ARRAY
37994: PPUSH
37995: CALL_OW 300
37999: IFFALSE 38027
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38001: LD_EXP 119
38005: PUSH
38006: LD_VAR 0 1
38010: ARRAY
38011: PPUSH
38012: LD_EXP 120
38016: PUSH
38017: LD_VAR 0 1
38021: ARRAY
38022: PPUSH
38023: CALL_OW 505
// if not minerMinesList [ i ] then
38027: LD_EXP 120
38031: PUSH
38032: LD_VAR 0 1
38036: ARRAY
38037: NOT
38038: IFFALSE 38042
// continue ;
38040: GO 37981
// for j := minerMinesList [ i ] downto 1 do
38042: LD_ADDR_VAR 0 2
38046: PUSH
38047: DOUBLE
38048: LD_EXP 120
38052: PUSH
38053: LD_VAR 0 1
38057: ARRAY
38058: INC
38059: ST_TO_ADDR
38060: LD_INT 1
38062: PUSH
38063: FOR_DOWNTO
38064: IFFALSE 38314
// begin side := GetSide ( minersList [ i ] ) ;
38066: LD_ADDR_VAR 0 3
38070: PUSH
38071: LD_EXP 119
38075: PUSH
38076: LD_VAR 0 1
38080: ARRAY
38081: PPUSH
38082: CALL_OW 255
38086: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38087: LD_ADDR_VAR 0 4
38091: PUSH
38092: LD_EXP 120
38096: PUSH
38097: LD_VAR 0 1
38101: ARRAY
38102: PUSH
38103: LD_VAR 0 2
38107: ARRAY
38108: PUSH
38109: LD_INT 1
38111: ARRAY
38112: PPUSH
38113: LD_EXP 120
38117: PUSH
38118: LD_VAR 0 1
38122: ARRAY
38123: PUSH
38124: LD_VAR 0 2
38128: ARRAY
38129: PUSH
38130: LD_INT 2
38132: ARRAY
38133: PPUSH
38134: CALL_OW 428
38138: ST_TO_ADDR
// if not tmp then
38139: LD_VAR 0 4
38143: NOT
38144: IFFALSE 38148
// continue ;
38146: GO 38063
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38148: LD_VAR 0 4
38152: PUSH
38153: LD_INT 81
38155: PUSH
38156: LD_VAR 0 3
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PPUSH
38165: CALL_OW 69
38169: IN
38170: PUSH
38171: LD_EXP 120
38175: PUSH
38176: LD_VAR 0 1
38180: ARRAY
38181: PUSH
38182: LD_VAR 0 2
38186: ARRAY
38187: PUSH
38188: LD_INT 1
38190: ARRAY
38191: PPUSH
38192: LD_EXP 120
38196: PUSH
38197: LD_VAR 0 1
38201: ARRAY
38202: PUSH
38203: LD_VAR 0 2
38207: ARRAY
38208: PUSH
38209: LD_INT 2
38211: ARRAY
38212: PPUSH
38213: CALL_OW 458
38217: AND
38218: IFFALSE 38312
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38220: LD_EXP 120
38224: PUSH
38225: LD_VAR 0 1
38229: ARRAY
38230: PUSH
38231: LD_VAR 0 2
38235: ARRAY
38236: PUSH
38237: LD_INT 1
38239: ARRAY
38240: PPUSH
38241: LD_EXP 120
38245: PUSH
38246: LD_VAR 0 1
38250: ARRAY
38251: PUSH
38252: LD_VAR 0 2
38256: ARRAY
38257: PUSH
38258: LD_INT 2
38260: ARRAY
38261: PPUSH
38262: LD_VAR 0 3
38266: PPUSH
38267: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38271: LD_ADDR_EXP 120
38275: PUSH
38276: LD_EXP 120
38280: PPUSH
38281: LD_VAR 0 1
38285: PPUSH
38286: LD_EXP 120
38290: PUSH
38291: LD_VAR 0 1
38295: ARRAY
38296: PPUSH
38297: LD_VAR 0 2
38301: PPUSH
38302: CALL_OW 3
38306: PPUSH
38307: CALL_OW 1
38311: ST_TO_ADDR
// end ; end ;
38312: GO 38063
38314: POP
38315: POP
// end ;
38316: GO 37981
38318: POP
38319: POP
// end ;
38320: PPOPN 4
38322: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38323: LD_INT 0
38325: PPUSH
38326: PPUSH
// result := false ;
38327: LD_ADDR_VAR 0 4
38331: PUSH
38332: LD_INT 0
38334: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38335: LD_VAR 0 1
38339: PPUSH
38340: CALL_OW 264
38344: PUSH
38345: LD_INT 81
38347: EQUAL
38348: NOT
38349: IFFALSE 38353
// exit ;
38351: GO 38593
// index := GetElementIndex ( minersList , unit ) ;
38353: LD_ADDR_VAR 0 5
38357: PUSH
38358: LD_EXP 119
38362: PPUSH
38363: LD_VAR 0 1
38367: PPUSH
38368: CALL 44551 0 2
38372: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38373: LD_EXP 120
38377: PUSH
38378: LD_VAR 0 5
38382: ARRAY
38383: PUSH
38384: LD_EXP 121
38388: GREATEREQUAL
38389: IFFALSE 38393
// exit ;
38391: GO 38593
// ComMoveXY ( unit , x , y ) ;
38393: LD_VAR 0 1
38397: PPUSH
38398: LD_VAR 0 2
38402: PPUSH
38403: LD_VAR 0 3
38407: PPUSH
38408: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38412: LD_INT 35
38414: PPUSH
38415: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38419: LD_VAR 0 1
38423: PPUSH
38424: LD_VAR 0 2
38428: PPUSH
38429: LD_VAR 0 3
38433: PPUSH
38434: CALL 75935 0 3
38438: NOT
38439: PUSH
38440: LD_VAR 0 1
38444: PPUSH
38445: CALL_OW 314
38449: AND
38450: IFFALSE 38454
// exit ;
38452: GO 38593
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38454: LD_VAR 0 2
38458: PPUSH
38459: LD_VAR 0 3
38463: PPUSH
38464: CALL_OW 428
38468: PUSH
38469: LD_VAR 0 1
38473: EQUAL
38474: PUSH
38475: LD_VAR 0 1
38479: PPUSH
38480: CALL_OW 314
38484: NOT
38485: AND
38486: IFFALSE 38412
// PlaySoundXY ( x , y , PlantMine ) ;
38488: LD_VAR 0 2
38492: PPUSH
38493: LD_VAR 0 3
38497: PPUSH
38498: LD_STRING PlantMine
38500: PPUSH
38501: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38505: LD_VAR 0 2
38509: PPUSH
38510: LD_VAR 0 3
38514: PPUSH
38515: LD_VAR 0 1
38519: PPUSH
38520: CALL_OW 255
38524: PPUSH
38525: LD_INT 0
38527: PPUSH
38528: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38532: LD_ADDR_EXP 120
38536: PUSH
38537: LD_EXP 120
38541: PPUSH
38542: LD_VAR 0 5
38546: PUSH
38547: LD_EXP 120
38551: PUSH
38552: LD_VAR 0 5
38556: ARRAY
38557: PUSH
38558: LD_INT 1
38560: PLUS
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PPUSH
38566: LD_VAR 0 2
38570: PUSH
38571: LD_VAR 0 3
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PPUSH
38580: CALL 44766 0 3
38584: ST_TO_ADDR
// result := true ;
38585: LD_ADDR_VAR 0 4
38589: PUSH
38590: LD_INT 1
38592: ST_TO_ADDR
// end ;
38593: LD_VAR 0 4
38597: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38598: LD_INT 0
38600: PPUSH
38601: PPUSH
38602: PPUSH
// if not unit in minersList then
38603: LD_VAR 0 1
38607: PUSH
38608: LD_EXP 119
38612: IN
38613: NOT
38614: IFFALSE 38618
// exit ;
38616: GO 39010
// index := GetElementIndex ( minersList , unit ) ;
38618: LD_ADDR_VAR 0 6
38622: PUSH
38623: LD_EXP 119
38627: PPUSH
38628: LD_VAR 0 1
38632: PPUSH
38633: CALL 44551 0 2
38637: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38638: LD_ADDR_VAR 0 5
38642: PUSH
38643: DOUBLE
38644: LD_EXP 120
38648: PUSH
38649: LD_VAR 0 6
38653: ARRAY
38654: INC
38655: ST_TO_ADDR
38656: LD_INT 1
38658: PUSH
38659: FOR_DOWNTO
38660: IFFALSE 38821
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38662: LD_EXP 120
38666: PUSH
38667: LD_VAR 0 6
38671: ARRAY
38672: PUSH
38673: LD_VAR 0 5
38677: ARRAY
38678: PUSH
38679: LD_INT 1
38681: ARRAY
38682: PUSH
38683: LD_VAR 0 2
38687: EQUAL
38688: PUSH
38689: LD_EXP 120
38693: PUSH
38694: LD_VAR 0 6
38698: ARRAY
38699: PUSH
38700: LD_VAR 0 5
38704: ARRAY
38705: PUSH
38706: LD_INT 2
38708: ARRAY
38709: PUSH
38710: LD_VAR 0 3
38714: EQUAL
38715: AND
38716: IFFALSE 38819
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38718: LD_EXP 120
38722: PUSH
38723: LD_VAR 0 6
38727: ARRAY
38728: PUSH
38729: LD_VAR 0 5
38733: ARRAY
38734: PUSH
38735: LD_INT 1
38737: ARRAY
38738: PPUSH
38739: LD_EXP 120
38743: PUSH
38744: LD_VAR 0 6
38748: ARRAY
38749: PUSH
38750: LD_VAR 0 5
38754: ARRAY
38755: PUSH
38756: LD_INT 2
38758: ARRAY
38759: PPUSH
38760: LD_VAR 0 1
38764: PPUSH
38765: CALL_OW 255
38769: PPUSH
38770: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38774: LD_ADDR_EXP 120
38778: PUSH
38779: LD_EXP 120
38783: PPUSH
38784: LD_VAR 0 6
38788: PPUSH
38789: LD_EXP 120
38793: PUSH
38794: LD_VAR 0 6
38798: ARRAY
38799: PPUSH
38800: LD_VAR 0 5
38804: PPUSH
38805: CALL_OW 3
38809: PPUSH
38810: CALL_OW 1
38814: ST_TO_ADDR
// exit ;
38815: POP
38816: POP
38817: GO 39010
// end ; end ;
38819: GO 38659
38821: POP
38822: POP
// for i := minerMinesList [ index ] downto 1 do
38823: LD_ADDR_VAR 0 5
38827: PUSH
38828: DOUBLE
38829: LD_EXP 120
38833: PUSH
38834: LD_VAR 0 6
38838: ARRAY
38839: INC
38840: ST_TO_ADDR
38841: LD_INT 1
38843: PUSH
38844: FOR_DOWNTO
38845: IFFALSE 39008
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38847: LD_EXP 120
38851: PUSH
38852: LD_VAR 0 6
38856: ARRAY
38857: PUSH
38858: LD_VAR 0 5
38862: ARRAY
38863: PUSH
38864: LD_INT 1
38866: ARRAY
38867: PPUSH
38868: LD_EXP 120
38872: PUSH
38873: LD_VAR 0 6
38877: ARRAY
38878: PUSH
38879: LD_VAR 0 5
38883: ARRAY
38884: PUSH
38885: LD_INT 2
38887: ARRAY
38888: PPUSH
38889: LD_VAR 0 2
38893: PPUSH
38894: LD_VAR 0 3
38898: PPUSH
38899: CALL_OW 298
38903: PUSH
38904: LD_INT 6
38906: LESS
38907: IFFALSE 39006
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38909: LD_EXP 120
38913: PUSH
38914: LD_VAR 0 6
38918: ARRAY
38919: PUSH
38920: LD_VAR 0 5
38924: ARRAY
38925: PUSH
38926: LD_INT 1
38928: ARRAY
38929: PPUSH
38930: LD_EXP 120
38934: PUSH
38935: LD_VAR 0 6
38939: ARRAY
38940: PUSH
38941: LD_VAR 0 5
38945: ARRAY
38946: PUSH
38947: LD_INT 2
38949: ARRAY
38950: PPUSH
38951: LD_VAR 0 1
38955: PPUSH
38956: CALL_OW 255
38960: PPUSH
38961: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38965: LD_ADDR_EXP 120
38969: PUSH
38970: LD_EXP 120
38974: PPUSH
38975: LD_VAR 0 6
38979: PPUSH
38980: LD_EXP 120
38984: PUSH
38985: LD_VAR 0 6
38989: ARRAY
38990: PPUSH
38991: LD_VAR 0 5
38995: PPUSH
38996: CALL_OW 3
39000: PPUSH
39001: CALL_OW 1
39005: ST_TO_ADDR
// end ; end ;
39006: GO 38844
39008: POP
39009: POP
// end ;
39010: LD_VAR 0 4
39014: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39015: LD_INT 0
39017: PPUSH
39018: PPUSH
39019: PPUSH
39020: PPUSH
39021: PPUSH
39022: PPUSH
39023: PPUSH
39024: PPUSH
39025: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39026: LD_VAR 0 1
39030: PPUSH
39031: CALL_OW 264
39035: PUSH
39036: LD_INT 81
39038: EQUAL
39039: NOT
39040: PUSH
39041: LD_VAR 0 1
39045: PUSH
39046: LD_EXP 119
39050: IN
39051: NOT
39052: OR
39053: IFFALSE 39057
// exit ;
39055: GO 39379
// index := GetElementIndex ( minersList , unit ) ;
39057: LD_ADDR_VAR 0 6
39061: PUSH
39062: LD_EXP 119
39066: PPUSH
39067: LD_VAR 0 1
39071: PPUSH
39072: CALL 44551 0 2
39076: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39077: LD_ADDR_VAR 0 8
39081: PUSH
39082: LD_EXP 121
39086: PUSH
39087: LD_EXP 120
39091: PUSH
39092: LD_VAR 0 6
39096: ARRAY
39097: MINUS
39098: ST_TO_ADDR
// if not minesFreeAmount then
39099: LD_VAR 0 8
39103: NOT
39104: IFFALSE 39108
// exit ;
39106: GO 39379
// tmp := [ ] ;
39108: LD_ADDR_VAR 0 7
39112: PUSH
39113: EMPTY
39114: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39115: LD_ADDR_VAR 0 5
39119: PUSH
39120: DOUBLE
39121: LD_INT 1
39123: DEC
39124: ST_TO_ADDR
39125: LD_VAR 0 8
39129: PUSH
39130: FOR_TO
39131: IFFALSE 39326
// begin _d := rand ( 0 , 5 ) ;
39133: LD_ADDR_VAR 0 11
39137: PUSH
39138: LD_INT 0
39140: PPUSH
39141: LD_INT 5
39143: PPUSH
39144: CALL_OW 12
39148: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39149: LD_ADDR_VAR 0 12
39153: PUSH
39154: LD_INT 2
39156: PPUSH
39157: LD_INT 6
39159: PPUSH
39160: CALL_OW 12
39164: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39165: LD_ADDR_VAR 0 9
39169: PUSH
39170: LD_VAR 0 2
39174: PPUSH
39175: LD_VAR 0 11
39179: PPUSH
39180: LD_VAR 0 12
39184: PPUSH
39185: CALL_OW 272
39189: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39190: LD_ADDR_VAR 0 10
39194: PUSH
39195: LD_VAR 0 3
39199: PPUSH
39200: LD_VAR 0 11
39204: PPUSH
39205: LD_VAR 0 12
39209: PPUSH
39210: CALL_OW 273
39214: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39215: LD_VAR 0 9
39219: PPUSH
39220: LD_VAR 0 10
39224: PPUSH
39225: CALL_OW 488
39229: PUSH
39230: LD_VAR 0 9
39234: PUSH
39235: LD_VAR 0 10
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_VAR 0 7
39248: IN
39249: NOT
39250: AND
39251: PUSH
39252: LD_VAR 0 9
39256: PPUSH
39257: LD_VAR 0 10
39261: PPUSH
39262: CALL_OW 458
39266: NOT
39267: AND
39268: IFFALSE 39310
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39270: LD_ADDR_VAR 0 7
39274: PUSH
39275: LD_VAR 0 7
39279: PPUSH
39280: LD_VAR 0 7
39284: PUSH
39285: LD_INT 1
39287: PLUS
39288: PPUSH
39289: LD_VAR 0 9
39293: PUSH
39294: LD_VAR 0 10
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PPUSH
39303: CALL_OW 1
39307: ST_TO_ADDR
39308: GO 39324
// i := i - 1 ;
39310: LD_ADDR_VAR 0 5
39314: PUSH
39315: LD_VAR 0 5
39319: PUSH
39320: LD_INT 1
39322: MINUS
39323: ST_TO_ADDR
// end ;
39324: GO 39130
39326: POP
39327: POP
// for i in tmp do
39328: LD_ADDR_VAR 0 5
39332: PUSH
39333: LD_VAR 0 7
39337: PUSH
39338: FOR_IN
39339: IFFALSE 39377
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39341: LD_VAR 0 1
39345: PPUSH
39346: LD_VAR 0 5
39350: PUSH
39351: LD_INT 1
39353: ARRAY
39354: PPUSH
39355: LD_VAR 0 5
39359: PUSH
39360: LD_INT 2
39362: ARRAY
39363: PPUSH
39364: CALL 38323 0 3
39368: NOT
39369: IFFALSE 39375
// exit ;
39371: POP
39372: POP
39373: GO 39379
39375: GO 39338
39377: POP
39378: POP
// end ;
39379: LD_VAR 0 4
39383: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39384: LD_INT 0
39386: PPUSH
39387: PPUSH
39388: PPUSH
39389: PPUSH
39390: PPUSH
39391: PPUSH
39392: PPUSH
// if not GetClass ( unit ) = class_sniper then
39393: LD_VAR 0 1
39397: PPUSH
39398: CALL_OW 257
39402: PUSH
39403: LD_INT 5
39405: EQUAL
39406: NOT
39407: IFFALSE 39411
// exit ;
39409: GO 39799
// dist := 8 ;
39411: LD_ADDR_VAR 0 5
39415: PUSH
39416: LD_INT 8
39418: ST_TO_ADDR
// viewRange := 12 ;
39419: LD_ADDR_VAR 0 7
39423: PUSH
39424: LD_INT 12
39426: ST_TO_ADDR
// side := GetSide ( unit ) ;
39427: LD_ADDR_VAR 0 6
39431: PUSH
39432: LD_VAR 0 1
39436: PPUSH
39437: CALL_OW 255
39441: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39442: LD_INT 61
39444: PPUSH
39445: LD_VAR 0 6
39449: PPUSH
39450: CALL_OW 321
39454: PUSH
39455: LD_INT 2
39457: EQUAL
39458: IFFALSE 39468
// viewRange := 16 ;
39460: LD_ADDR_VAR 0 7
39464: PUSH
39465: LD_INT 16
39467: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39468: LD_VAR 0 1
39472: PPUSH
39473: LD_VAR 0 2
39477: PPUSH
39478: LD_VAR 0 3
39482: PPUSH
39483: CALL_OW 297
39487: PUSH
39488: LD_VAR 0 5
39492: GREATER
39493: IFFALSE 39572
// begin ComMoveXY ( unit , x , y ) ;
39495: LD_VAR 0 1
39499: PPUSH
39500: LD_VAR 0 2
39504: PPUSH
39505: LD_VAR 0 3
39509: PPUSH
39510: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39514: LD_INT 35
39516: PPUSH
39517: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39521: LD_VAR 0 1
39525: PPUSH
39526: LD_VAR 0 2
39530: PPUSH
39531: LD_VAR 0 3
39535: PPUSH
39536: CALL 75935 0 3
39540: NOT
39541: IFFALSE 39545
// exit ;
39543: GO 39799
// until GetDistUnitXY ( unit , x , y ) < dist ;
39545: LD_VAR 0 1
39549: PPUSH
39550: LD_VAR 0 2
39554: PPUSH
39555: LD_VAR 0 3
39559: PPUSH
39560: CALL_OW 297
39564: PUSH
39565: LD_VAR 0 5
39569: LESS
39570: IFFALSE 39514
// end ; ComTurnXY ( unit , x , y ) ;
39572: LD_VAR 0 1
39576: PPUSH
39577: LD_VAR 0 2
39581: PPUSH
39582: LD_VAR 0 3
39586: PPUSH
39587: CALL_OW 118
// wait ( 5 ) ;
39591: LD_INT 5
39593: PPUSH
39594: CALL_OW 67
// _d := GetDir ( unit ) ;
39598: LD_ADDR_VAR 0 10
39602: PUSH
39603: LD_VAR 0 1
39607: PPUSH
39608: CALL_OW 254
39612: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39613: LD_ADDR_VAR 0 8
39617: PUSH
39618: LD_VAR 0 1
39622: PPUSH
39623: CALL_OW 250
39627: PPUSH
39628: LD_VAR 0 10
39632: PPUSH
39633: LD_VAR 0 5
39637: PPUSH
39638: CALL_OW 272
39642: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39643: LD_ADDR_VAR 0 9
39647: PUSH
39648: LD_VAR 0 1
39652: PPUSH
39653: CALL_OW 251
39657: PPUSH
39658: LD_VAR 0 10
39662: PPUSH
39663: LD_VAR 0 5
39667: PPUSH
39668: CALL_OW 273
39672: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39673: LD_VAR 0 8
39677: PPUSH
39678: LD_VAR 0 9
39682: PPUSH
39683: CALL_OW 488
39687: NOT
39688: IFFALSE 39692
// exit ;
39690: GO 39799
// ComAnimCustom ( unit , 1 ) ;
39692: LD_VAR 0 1
39696: PPUSH
39697: LD_INT 1
39699: PPUSH
39700: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39704: LD_VAR 0 8
39708: PPUSH
39709: LD_VAR 0 9
39713: PPUSH
39714: LD_VAR 0 6
39718: PPUSH
39719: LD_VAR 0 7
39723: PPUSH
39724: CALL_OW 330
// repeat wait ( 1 ) ;
39728: LD_INT 1
39730: PPUSH
39731: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39735: LD_VAR 0 1
39739: PPUSH
39740: CALL_OW 316
39744: PUSH
39745: LD_VAR 0 1
39749: PPUSH
39750: CALL_OW 314
39754: OR
39755: PUSH
39756: LD_VAR 0 1
39760: PPUSH
39761: CALL_OW 302
39765: NOT
39766: OR
39767: PUSH
39768: LD_VAR 0 1
39772: PPUSH
39773: CALL_OW 301
39777: OR
39778: IFFALSE 39728
// RemoveSeeing ( _x , _y , side ) ;
39780: LD_VAR 0 8
39784: PPUSH
39785: LD_VAR 0 9
39789: PPUSH
39790: LD_VAR 0 6
39794: PPUSH
39795: CALL_OW 331
// end ; end_of_file
39799: LD_VAR 0 4
39803: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39804: LD_INT 0
39806: PPUSH
39807: PPUSH
// if exist_mode then
39808: LD_VAR 0 2
39812: IFFALSE 39837
// unit := CreateCharacter ( prefix & ident ) else
39814: LD_ADDR_VAR 0 5
39818: PUSH
39819: LD_VAR 0 3
39823: PUSH
39824: LD_VAR 0 1
39828: STR
39829: PPUSH
39830: CALL_OW 34
39834: ST_TO_ADDR
39835: GO 39852
// unit := NewCharacter ( ident ) ;
39837: LD_ADDR_VAR 0 5
39841: PUSH
39842: LD_VAR 0 1
39846: PPUSH
39847: CALL_OW 25
39851: ST_TO_ADDR
// result := unit ;
39852: LD_ADDR_VAR 0 4
39856: PUSH
39857: LD_VAR 0 5
39861: ST_TO_ADDR
// end ;
39862: LD_VAR 0 4
39866: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39867: LD_INT 0
39869: PPUSH
39870: PPUSH
// if not side or not nation then
39871: LD_VAR 0 1
39875: NOT
39876: PUSH
39877: LD_VAR 0 2
39881: NOT
39882: OR
39883: IFFALSE 39887
// exit ;
39885: GO 40655
// case nation of nation_american :
39887: LD_VAR 0 2
39891: PUSH
39892: LD_INT 1
39894: DOUBLE
39895: EQUAL
39896: IFTRUE 39900
39898: GO 40114
39900: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39901: LD_ADDR_VAR 0 4
39905: PUSH
39906: LD_INT 35
39908: PUSH
39909: LD_INT 45
39911: PUSH
39912: LD_INT 46
39914: PUSH
39915: LD_INT 47
39917: PUSH
39918: LD_INT 82
39920: PUSH
39921: LD_INT 83
39923: PUSH
39924: LD_INT 84
39926: PUSH
39927: LD_INT 85
39929: PUSH
39930: LD_INT 86
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: LD_INT 2
39938: PUSH
39939: LD_INT 6
39941: PUSH
39942: LD_INT 15
39944: PUSH
39945: LD_INT 16
39947: PUSH
39948: LD_INT 7
39950: PUSH
39951: LD_INT 12
39953: PUSH
39954: LD_INT 13
39956: PUSH
39957: LD_INT 10
39959: PUSH
39960: LD_INT 14
39962: PUSH
39963: LD_INT 20
39965: PUSH
39966: LD_INT 21
39968: PUSH
39969: LD_INT 22
39971: PUSH
39972: LD_INT 25
39974: PUSH
39975: LD_INT 32
39977: PUSH
39978: LD_INT 27
39980: PUSH
39981: LD_INT 36
39983: PUSH
39984: LD_INT 69
39986: PUSH
39987: LD_INT 39
39989: PUSH
39990: LD_INT 34
39992: PUSH
39993: LD_INT 40
39995: PUSH
39996: LD_INT 48
39998: PUSH
39999: LD_INT 49
40001: PUSH
40002: LD_INT 50
40004: PUSH
40005: LD_INT 51
40007: PUSH
40008: LD_INT 52
40010: PUSH
40011: LD_INT 53
40013: PUSH
40014: LD_INT 54
40016: PUSH
40017: LD_INT 55
40019: PUSH
40020: LD_INT 56
40022: PUSH
40023: LD_INT 57
40025: PUSH
40026: LD_INT 58
40028: PUSH
40029: LD_INT 59
40031: PUSH
40032: LD_INT 60
40034: PUSH
40035: LD_INT 61
40037: PUSH
40038: LD_INT 62
40040: PUSH
40041: LD_INT 80
40043: PUSH
40044: LD_INT 82
40046: PUSH
40047: LD_INT 83
40049: PUSH
40050: LD_INT 84
40052: PUSH
40053: LD_INT 85
40055: PUSH
40056: LD_INT 86
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: ST_TO_ADDR
40112: GO 40579
40114: LD_INT 2
40116: DOUBLE
40117: EQUAL
40118: IFTRUE 40122
40120: GO 40348
40122: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40123: LD_ADDR_VAR 0 4
40127: PUSH
40128: LD_INT 35
40130: PUSH
40131: LD_INT 45
40133: PUSH
40134: LD_INT 46
40136: PUSH
40137: LD_INT 47
40139: PUSH
40140: LD_INT 82
40142: PUSH
40143: LD_INT 83
40145: PUSH
40146: LD_INT 84
40148: PUSH
40149: LD_INT 85
40151: PUSH
40152: LD_INT 87
40154: PUSH
40155: LD_INT 70
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: LD_INT 11
40163: PUSH
40164: LD_INT 3
40166: PUSH
40167: LD_INT 4
40169: PUSH
40170: LD_INT 5
40172: PUSH
40173: LD_INT 6
40175: PUSH
40176: LD_INT 15
40178: PUSH
40179: LD_INT 18
40181: PUSH
40182: LD_INT 7
40184: PUSH
40185: LD_INT 17
40187: PUSH
40188: LD_INT 8
40190: PUSH
40191: LD_INT 20
40193: PUSH
40194: LD_INT 21
40196: PUSH
40197: LD_INT 22
40199: PUSH
40200: LD_INT 72
40202: PUSH
40203: LD_INT 26
40205: PUSH
40206: LD_INT 69
40208: PUSH
40209: LD_INT 39
40211: PUSH
40212: LD_INT 40
40214: PUSH
40215: LD_INT 41
40217: PUSH
40218: LD_INT 42
40220: PUSH
40221: LD_INT 43
40223: PUSH
40224: LD_INT 48
40226: PUSH
40227: LD_INT 49
40229: PUSH
40230: LD_INT 50
40232: PUSH
40233: LD_INT 51
40235: PUSH
40236: LD_INT 52
40238: PUSH
40239: LD_INT 53
40241: PUSH
40242: LD_INT 54
40244: PUSH
40245: LD_INT 55
40247: PUSH
40248: LD_INT 56
40250: PUSH
40251: LD_INT 60
40253: PUSH
40254: LD_INT 61
40256: PUSH
40257: LD_INT 62
40259: PUSH
40260: LD_INT 66
40262: PUSH
40263: LD_INT 67
40265: PUSH
40266: LD_INT 68
40268: PUSH
40269: LD_INT 81
40271: PUSH
40272: LD_INT 82
40274: PUSH
40275: LD_INT 83
40277: PUSH
40278: LD_INT 84
40280: PUSH
40281: LD_INT 85
40283: PUSH
40284: LD_INT 87
40286: PUSH
40287: LD_INT 88
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: ST_TO_ADDR
40346: GO 40579
40348: LD_INT 3
40350: DOUBLE
40351: EQUAL
40352: IFTRUE 40356
40354: GO 40578
40356: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40357: LD_ADDR_VAR 0 4
40361: PUSH
40362: LD_INT 46
40364: PUSH
40365: LD_INT 47
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: LD_INT 2
40373: PUSH
40374: LD_INT 82
40376: PUSH
40377: LD_INT 83
40379: PUSH
40380: LD_INT 84
40382: PUSH
40383: LD_INT 85
40385: PUSH
40386: LD_INT 86
40388: PUSH
40389: LD_INT 11
40391: PUSH
40392: LD_INT 9
40394: PUSH
40395: LD_INT 20
40397: PUSH
40398: LD_INT 19
40400: PUSH
40401: LD_INT 21
40403: PUSH
40404: LD_INT 24
40406: PUSH
40407: LD_INT 22
40409: PUSH
40410: LD_INT 25
40412: PUSH
40413: LD_INT 28
40415: PUSH
40416: LD_INT 29
40418: PUSH
40419: LD_INT 30
40421: PUSH
40422: LD_INT 31
40424: PUSH
40425: LD_INT 37
40427: PUSH
40428: LD_INT 38
40430: PUSH
40431: LD_INT 32
40433: PUSH
40434: LD_INT 27
40436: PUSH
40437: LD_INT 33
40439: PUSH
40440: LD_INT 69
40442: PUSH
40443: LD_INT 39
40445: PUSH
40446: LD_INT 34
40448: PUSH
40449: LD_INT 40
40451: PUSH
40452: LD_INT 71
40454: PUSH
40455: LD_INT 23
40457: PUSH
40458: LD_INT 44
40460: PUSH
40461: LD_INT 48
40463: PUSH
40464: LD_INT 49
40466: PUSH
40467: LD_INT 50
40469: PUSH
40470: LD_INT 51
40472: PUSH
40473: LD_INT 52
40475: PUSH
40476: LD_INT 53
40478: PUSH
40479: LD_INT 54
40481: PUSH
40482: LD_INT 55
40484: PUSH
40485: LD_INT 56
40487: PUSH
40488: LD_INT 57
40490: PUSH
40491: LD_INT 58
40493: PUSH
40494: LD_INT 59
40496: PUSH
40497: LD_INT 63
40499: PUSH
40500: LD_INT 64
40502: PUSH
40503: LD_INT 65
40505: PUSH
40506: LD_INT 82
40508: PUSH
40509: LD_INT 83
40511: PUSH
40512: LD_INT 84
40514: PUSH
40515: LD_INT 85
40517: PUSH
40518: LD_INT 86
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: ST_TO_ADDR
40576: GO 40579
40578: POP
// if state > - 1 and state < 3 then
40579: LD_VAR 0 3
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: GREATER
40588: PUSH
40589: LD_VAR 0 3
40593: PUSH
40594: LD_INT 3
40596: LESS
40597: AND
40598: IFFALSE 40655
// for i in result do
40600: LD_ADDR_VAR 0 5
40604: PUSH
40605: LD_VAR 0 4
40609: PUSH
40610: FOR_IN
40611: IFFALSE 40653
// if GetTech ( i , side ) <> state then
40613: LD_VAR 0 5
40617: PPUSH
40618: LD_VAR 0 1
40622: PPUSH
40623: CALL_OW 321
40627: PUSH
40628: LD_VAR 0 3
40632: NONEQUAL
40633: IFFALSE 40651
// result := result diff i ;
40635: LD_ADDR_VAR 0 4
40639: PUSH
40640: LD_VAR 0 4
40644: PUSH
40645: LD_VAR 0 5
40649: DIFF
40650: ST_TO_ADDR
40651: GO 40610
40653: POP
40654: POP
// end ;
40655: LD_VAR 0 4
40659: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40660: LD_INT 0
40662: PPUSH
40663: PPUSH
40664: PPUSH
// result := true ;
40665: LD_ADDR_VAR 0 3
40669: PUSH
40670: LD_INT 1
40672: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40673: LD_ADDR_VAR 0 5
40677: PUSH
40678: LD_VAR 0 2
40682: PPUSH
40683: CALL_OW 480
40687: ST_TO_ADDR
// if not tmp then
40688: LD_VAR 0 5
40692: NOT
40693: IFFALSE 40697
// exit ;
40695: GO 40746
// for i in tmp do
40697: LD_ADDR_VAR 0 4
40701: PUSH
40702: LD_VAR 0 5
40706: PUSH
40707: FOR_IN
40708: IFFALSE 40744
// if GetTech ( i , side ) <> state_researched then
40710: LD_VAR 0 4
40714: PPUSH
40715: LD_VAR 0 1
40719: PPUSH
40720: CALL_OW 321
40724: PUSH
40725: LD_INT 2
40727: NONEQUAL
40728: IFFALSE 40742
// begin result := false ;
40730: LD_ADDR_VAR 0 3
40734: PUSH
40735: LD_INT 0
40737: ST_TO_ADDR
// exit ;
40738: POP
40739: POP
40740: GO 40746
// end ;
40742: GO 40707
40744: POP
40745: POP
// end ;
40746: LD_VAR 0 3
40750: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40751: LD_INT 0
40753: PPUSH
40754: PPUSH
40755: PPUSH
40756: PPUSH
40757: PPUSH
40758: PPUSH
40759: PPUSH
40760: PPUSH
40761: PPUSH
40762: PPUSH
40763: PPUSH
40764: PPUSH
40765: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40766: LD_VAR 0 1
40770: NOT
40771: PUSH
40772: LD_VAR 0 1
40776: PPUSH
40777: CALL_OW 257
40781: PUSH
40782: LD_INT 9
40784: NONEQUAL
40785: OR
40786: IFFALSE 40790
// exit ;
40788: GO 41363
// side := GetSide ( unit ) ;
40790: LD_ADDR_VAR 0 9
40794: PUSH
40795: LD_VAR 0 1
40799: PPUSH
40800: CALL_OW 255
40804: ST_TO_ADDR
// tech_space := tech_spacanom ;
40805: LD_ADDR_VAR 0 12
40809: PUSH
40810: LD_INT 29
40812: ST_TO_ADDR
// tech_time := tech_taurad ;
40813: LD_ADDR_VAR 0 13
40817: PUSH
40818: LD_INT 28
40820: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40821: LD_ADDR_VAR 0 11
40825: PUSH
40826: LD_VAR 0 1
40830: PPUSH
40831: CALL_OW 310
40835: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40836: LD_VAR 0 11
40840: PPUSH
40841: CALL_OW 247
40845: PUSH
40846: LD_INT 2
40848: EQUAL
40849: IFFALSE 40853
// exit ;
40851: GO 41363
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40853: LD_ADDR_VAR 0 8
40857: PUSH
40858: LD_INT 81
40860: PUSH
40861: LD_VAR 0 9
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 3
40872: PUSH
40873: LD_INT 21
40875: PUSH
40876: LD_INT 3
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PPUSH
40891: CALL_OW 69
40895: ST_TO_ADDR
// if not tmp then
40896: LD_VAR 0 8
40900: NOT
40901: IFFALSE 40905
// exit ;
40903: GO 41363
// if in_unit then
40905: LD_VAR 0 11
40909: IFFALSE 40933
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40911: LD_ADDR_VAR 0 10
40915: PUSH
40916: LD_VAR 0 8
40920: PPUSH
40921: LD_VAR 0 11
40925: PPUSH
40926: CALL_OW 74
40930: ST_TO_ADDR
40931: GO 40953
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40933: LD_ADDR_VAR 0 10
40937: PUSH
40938: LD_VAR 0 8
40942: PPUSH
40943: LD_VAR 0 1
40947: PPUSH
40948: CALL_OW 74
40952: ST_TO_ADDR
// if not enemy then
40953: LD_VAR 0 10
40957: NOT
40958: IFFALSE 40962
// exit ;
40960: GO 41363
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40962: LD_VAR 0 11
40966: PUSH
40967: LD_VAR 0 11
40971: PPUSH
40972: LD_VAR 0 10
40976: PPUSH
40977: CALL_OW 296
40981: PUSH
40982: LD_INT 13
40984: GREATER
40985: AND
40986: PUSH
40987: LD_VAR 0 1
40991: PPUSH
40992: LD_VAR 0 10
40996: PPUSH
40997: CALL_OW 296
41001: PUSH
41002: LD_INT 12
41004: GREATER
41005: OR
41006: IFFALSE 41010
// exit ;
41008: GO 41363
// missile := [ 1 ] ;
41010: LD_ADDR_VAR 0 14
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: EMPTY
41019: LIST
41020: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41021: LD_VAR 0 9
41025: PPUSH
41026: LD_VAR 0 12
41030: PPUSH
41031: CALL_OW 325
41035: IFFALSE 41064
// missile := Replace ( missile , missile + 1 , 2 ) ;
41037: LD_ADDR_VAR 0 14
41041: PUSH
41042: LD_VAR 0 14
41046: PPUSH
41047: LD_VAR 0 14
41051: PUSH
41052: LD_INT 1
41054: PLUS
41055: PPUSH
41056: LD_INT 2
41058: PPUSH
41059: CALL_OW 1
41063: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41064: LD_VAR 0 9
41068: PPUSH
41069: LD_VAR 0 13
41073: PPUSH
41074: CALL_OW 325
41078: PUSH
41079: LD_VAR 0 10
41083: PPUSH
41084: CALL_OW 255
41088: PPUSH
41089: LD_VAR 0 13
41093: PPUSH
41094: CALL_OW 325
41098: NOT
41099: AND
41100: IFFALSE 41129
// missile := Replace ( missile , missile + 1 , 3 ) ;
41102: LD_ADDR_VAR 0 14
41106: PUSH
41107: LD_VAR 0 14
41111: PPUSH
41112: LD_VAR 0 14
41116: PUSH
41117: LD_INT 1
41119: PLUS
41120: PPUSH
41121: LD_INT 3
41123: PPUSH
41124: CALL_OW 1
41128: ST_TO_ADDR
// if missile < 2 then
41129: LD_VAR 0 14
41133: PUSH
41134: LD_INT 2
41136: LESS
41137: IFFALSE 41141
// exit ;
41139: GO 41363
// x := GetX ( enemy ) ;
41141: LD_ADDR_VAR 0 4
41145: PUSH
41146: LD_VAR 0 10
41150: PPUSH
41151: CALL_OW 250
41155: ST_TO_ADDR
// y := GetY ( enemy ) ;
41156: LD_ADDR_VAR 0 5
41160: PUSH
41161: LD_VAR 0 10
41165: PPUSH
41166: CALL_OW 251
41170: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41171: LD_ADDR_VAR 0 6
41175: PUSH
41176: LD_VAR 0 4
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PPUSH
41185: LD_INT 1
41187: PPUSH
41188: CALL_OW 12
41192: PLUS
41193: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41194: LD_ADDR_VAR 0 7
41198: PUSH
41199: LD_VAR 0 5
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PPUSH
41208: LD_INT 1
41210: PPUSH
41211: CALL_OW 12
41215: PLUS
41216: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41217: LD_VAR 0 6
41221: PPUSH
41222: LD_VAR 0 7
41226: PPUSH
41227: CALL_OW 488
41231: NOT
41232: IFFALSE 41254
// begin _x := x ;
41234: LD_ADDR_VAR 0 6
41238: PUSH
41239: LD_VAR 0 4
41243: ST_TO_ADDR
// _y := y ;
41244: LD_ADDR_VAR 0 7
41248: PUSH
41249: LD_VAR 0 5
41253: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41254: LD_ADDR_VAR 0 3
41258: PUSH
41259: LD_INT 1
41261: PPUSH
41262: LD_VAR 0 14
41266: PPUSH
41267: CALL_OW 12
41271: ST_TO_ADDR
// case i of 1 :
41272: LD_VAR 0 3
41276: PUSH
41277: LD_INT 1
41279: DOUBLE
41280: EQUAL
41281: IFTRUE 41285
41283: GO 41302
41285: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41286: LD_VAR 0 1
41290: PPUSH
41291: LD_VAR 0 10
41295: PPUSH
41296: CALL_OW 115
41300: GO 41363
41302: LD_INT 2
41304: DOUBLE
41305: EQUAL
41306: IFTRUE 41310
41308: GO 41332
41310: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41311: LD_VAR 0 1
41315: PPUSH
41316: LD_VAR 0 6
41320: PPUSH
41321: LD_VAR 0 7
41325: PPUSH
41326: CALL_OW 153
41330: GO 41363
41332: LD_INT 3
41334: DOUBLE
41335: EQUAL
41336: IFTRUE 41340
41338: GO 41362
41340: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41341: LD_VAR 0 1
41345: PPUSH
41346: LD_VAR 0 6
41350: PPUSH
41351: LD_VAR 0 7
41355: PPUSH
41356: CALL_OW 154
41360: GO 41363
41362: POP
// end ;
41363: LD_VAR 0 2
41367: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41368: LD_INT 0
41370: PPUSH
41371: PPUSH
41372: PPUSH
41373: PPUSH
41374: PPUSH
41375: PPUSH
// if not unit or not building then
41376: LD_VAR 0 1
41380: NOT
41381: PUSH
41382: LD_VAR 0 2
41386: NOT
41387: OR
41388: IFFALSE 41392
// exit ;
41390: GO 41550
// x := GetX ( building ) ;
41392: LD_ADDR_VAR 0 5
41396: PUSH
41397: LD_VAR 0 2
41401: PPUSH
41402: CALL_OW 250
41406: ST_TO_ADDR
// y := GetY ( building ) ;
41407: LD_ADDR_VAR 0 6
41411: PUSH
41412: LD_VAR 0 2
41416: PPUSH
41417: CALL_OW 251
41421: ST_TO_ADDR
// for i = 0 to 5 do
41422: LD_ADDR_VAR 0 4
41426: PUSH
41427: DOUBLE
41428: LD_INT 0
41430: DEC
41431: ST_TO_ADDR
41432: LD_INT 5
41434: PUSH
41435: FOR_TO
41436: IFFALSE 41548
// begin _x := ShiftX ( x , i , 3 ) ;
41438: LD_ADDR_VAR 0 7
41442: PUSH
41443: LD_VAR 0 5
41447: PPUSH
41448: LD_VAR 0 4
41452: PPUSH
41453: LD_INT 3
41455: PPUSH
41456: CALL_OW 272
41460: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41461: LD_ADDR_VAR 0 8
41465: PUSH
41466: LD_VAR 0 6
41470: PPUSH
41471: LD_VAR 0 4
41475: PPUSH
41476: LD_INT 3
41478: PPUSH
41479: CALL_OW 273
41483: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41484: LD_VAR 0 7
41488: PPUSH
41489: LD_VAR 0 8
41493: PPUSH
41494: CALL_OW 488
41498: NOT
41499: IFFALSE 41503
// continue ;
41501: GO 41435
// if HexInfo ( _x , _y ) = 0 then
41503: LD_VAR 0 7
41507: PPUSH
41508: LD_VAR 0 8
41512: PPUSH
41513: CALL_OW 428
41517: PUSH
41518: LD_INT 0
41520: EQUAL
41521: IFFALSE 41546
// begin ComMoveXY ( unit , _x , _y ) ;
41523: LD_VAR 0 1
41527: PPUSH
41528: LD_VAR 0 7
41532: PPUSH
41533: LD_VAR 0 8
41537: PPUSH
41538: CALL_OW 111
// exit ;
41542: POP
41543: POP
41544: GO 41550
// end ; end ;
41546: GO 41435
41548: POP
41549: POP
// end ;
41550: LD_VAR 0 3
41554: RET
// export function ScanBase ( side , base_area ) ; begin
41555: LD_INT 0
41557: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41558: LD_ADDR_VAR 0 3
41562: PUSH
41563: LD_VAR 0 2
41567: PPUSH
41568: LD_INT 81
41570: PUSH
41571: LD_VAR 0 1
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PPUSH
41580: CALL_OW 70
41584: ST_TO_ADDR
// end ;
41585: LD_VAR 0 3
41589: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41590: LD_INT 0
41592: PPUSH
41593: PPUSH
41594: PPUSH
41595: PPUSH
// result := false ;
41596: LD_ADDR_VAR 0 2
41600: PUSH
41601: LD_INT 0
41603: ST_TO_ADDR
// side := GetSide ( unit ) ;
41604: LD_ADDR_VAR 0 3
41608: PUSH
41609: LD_VAR 0 1
41613: PPUSH
41614: CALL_OW 255
41618: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41619: LD_ADDR_VAR 0 4
41623: PUSH
41624: LD_VAR 0 1
41628: PPUSH
41629: CALL_OW 248
41633: ST_TO_ADDR
// case nat of 1 :
41634: LD_VAR 0 4
41638: PUSH
41639: LD_INT 1
41641: DOUBLE
41642: EQUAL
41643: IFTRUE 41647
41645: GO 41658
41647: POP
// tech := tech_lassight ; 2 :
41648: LD_ADDR_VAR 0 5
41652: PUSH
41653: LD_INT 12
41655: ST_TO_ADDR
41656: GO 41697
41658: LD_INT 2
41660: DOUBLE
41661: EQUAL
41662: IFTRUE 41666
41664: GO 41677
41666: POP
// tech := tech_mortar ; 3 :
41667: LD_ADDR_VAR 0 5
41671: PUSH
41672: LD_INT 41
41674: ST_TO_ADDR
41675: GO 41697
41677: LD_INT 3
41679: DOUBLE
41680: EQUAL
41681: IFTRUE 41685
41683: GO 41696
41685: POP
// tech := tech_bazooka ; end ;
41686: LD_ADDR_VAR 0 5
41690: PUSH
41691: LD_INT 44
41693: ST_TO_ADDR
41694: GO 41697
41696: POP
// if Researched ( side , tech ) then
41697: LD_VAR 0 3
41701: PPUSH
41702: LD_VAR 0 5
41706: PPUSH
41707: CALL_OW 325
41711: IFFALSE 41738
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41713: LD_ADDR_VAR 0 2
41717: PUSH
41718: LD_INT 5
41720: PUSH
41721: LD_INT 8
41723: PUSH
41724: LD_INT 9
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: LIST
41731: PUSH
41732: LD_VAR 0 4
41736: ARRAY
41737: ST_TO_ADDR
// end ;
41738: LD_VAR 0 2
41742: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41743: LD_INT 0
41745: PPUSH
41746: PPUSH
41747: PPUSH
// if not mines then
41748: LD_VAR 0 2
41752: NOT
41753: IFFALSE 41757
// exit ;
41755: GO 41901
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41757: LD_ADDR_VAR 0 5
41761: PUSH
41762: LD_INT 81
41764: PUSH
41765: LD_VAR 0 1
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 3
41776: PUSH
41777: LD_INT 21
41779: PUSH
41780: LD_INT 3
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PPUSH
41795: CALL_OW 69
41799: ST_TO_ADDR
// for i in mines do
41800: LD_ADDR_VAR 0 4
41804: PUSH
41805: LD_VAR 0 2
41809: PUSH
41810: FOR_IN
41811: IFFALSE 41899
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41813: LD_VAR 0 4
41817: PUSH
41818: LD_INT 1
41820: ARRAY
41821: PPUSH
41822: LD_VAR 0 4
41826: PUSH
41827: LD_INT 2
41829: ARRAY
41830: PPUSH
41831: CALL_OW 458
41835: NOT
41836: IFFALSE 41840
// continue ;
41838: GO 41810
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41840: LD_VAR 0 4
41844: PUSH
41845: LD_INT 1
41847: ARRAY
41848: PPUSH
41849: LD_VAR 0 4
41853: PUSH
41854: LD_INT 2
41856: ARRAY
41857: PPUSH
41858: CALL_OW 428
41862: PUSH
41863: LD_VAR 0 5
41867: IN
41868: IFFALSE 41897
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41870: LD_VAR 0 4
41874: PUSH
41875: LD_INT 1
41877: ARRAY
41878: PPUSH
41879: LD_VAR 0 4
41883: PUSH
41884: LD_INT 2
41886: ARRAY
41887: PPUSH
41888: LD_VAR 0 1
41892: PPUSH
41893: CALL_OW 456
// end ;
41897: GO 41810
41899: POP
41900: POP
// end ;
41901: LD_VAR 0 3
41905: RET
// export function Count ( array ) ; begin
41906: LD_INT 0
41908: PPUSH
// result := array + 0 ;
41909: LD_ADDR_VAR 0 2
41913: PUSH
41914: LD_VAR 0 1
41918: PUSH
41919: LD_INT 0
41921: PLUS
41922: ST_TO_ADDR
// end ;
41923: LD_VAR 0 2
41927: RET
// export function IsEmpty ( building ) ; begin
41928: LD_INT 0
41930: PPUSH
// if not building then
41931: LD_VAR 0 1
41935: NOT
41936: IFFALSE 41940
// exit ;
41938: GO 41983
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41940: LD_ADDR_VAR 0 2
41944: PUSH
41945: LD_VAR 0 1
41949: PUSH
41950: LD_INT 22
41952: PUSH
41953: LD_VAR 0 1
41957: PPUSH
41958: CALL_OW 255
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 58
41969: PUSH
41970: EMPTY
41971: LIST
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PPUSH
41977: CALL_OW 69
41981: IN
41982: ST_TO_ADDR
// end ;
41983: LD_VAR 0 2
41987: RET
// export function IsNotFull ( building ) ; var places ; begin
41988: LD_INT 0
41990: PPUSH
41991: PPUSH
// if not building then
41992: LD_VAR 0 1
41996: NOT
41997: IFFALSE 42001
// exit ;
41999: GO 42029
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42001: LD_ADDR_VAR 0 2
42005: PUSH
42006: LD_VAR 0 1
42010: PPUSH
42011: LD_INT 3
42013: PUSH
42014: LD_INT 62
42016: PUSH
42017: EMPTY
42018: LIST
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PPUSH
42024: CALL_OW 72
42028: ST_TO_ADDR
// end ;
42029: LD_VAR 0 2
42033: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42034: LD_INT 0
42036: PPUSH
42037: PPUSH
42038: PPUSH
42039: PPUSH
// tmp := [ ] ;
42040: LD_ADDR_VAR 0 3
42044: PUSH
42045: EMPTY
42046: ST_TO_ADDR
// list := [ ] ;
42047: LD_ADDR_VAR 0 5
42051: PUSH
42052: EMPTY
42053: ST_TO_ADDR
// for i = 16 to 25 do
42054: LD_ADDR_VAR 0 4
42058: PUSH
42059: DOUBLE
42060: LD_INT 16
42062: DEC
42063: ST_TO_ADDR
42064: LD_INT 25
42066: PUSH
42067: FOR_TO
42068: IFFALSE 42141
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42070: LD_ADDR_VAR 0 3
42074: PUSH
42075: LD_VAR 0 3
42079: PUSH
42080: LD_INT 22
42082: PUSH
42083: LD_VAR 0 1
42087: PPUSH
42088: CALL_OW 255
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 91
42099: PUSH
42100: LD_VAR 0 1
42104: PUSH
42105: LD_INT 6
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 30
42115: PUSH
42116: LD_VAR 0 4
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: LIST
42129: PUSH
42130: EMPTY
42131: LIST
42132: PPUSH
42133: CALL_OW 69
42137: ADD
42138: ST_TO_ADDR
42139: GO 42067
42141: POP
42142: POP
// for i = 1 to tmp do
42143: LD_ADDR_VAR 0 4
42147: PUSH
42148: DOUBLE
42149: LD_INT 1
42151: DEC
42152: ST_TO_ADDR
42153: LD_VAR 0 3
42157: PUSH
42158: FOR_TO
42159: IFFALSE 42247
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42161: LD_ADDR_VAR 0 5
42165: PUSH
42166: LD_VAR 0 5
42170: PUSH
42171: LD_VAR 0 3
42175: PUSH
42176: LD_VAR 0 4
42180: ARRAY
42181: PPUSH
42182: CALL_OW 266
42186: PUSH
42187: LD_VAR 0 3
42191: PUSH
42192: LD_VAR 0 4
42196: ARRAY
42197: PPUSH
42198: CALL_OW 250
42202: PUSH
42203: LD_VAR 0 3
42207: PUSH
42208: LD_VAR 0 4
42212: ARRAY
42213: PPUSH
42214: CALL_OW 251
42218: PUSH
42219: LD_VAR 0 3
42223: PUSH
42224: LD_VAR 0 4
42228: ARRAY
42229: PPUSH
42230: CALL_OW 254
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: PUSH
42241: EMPTY
42242: LIST
42243: ADD
42244: ST_TO_ADDR
42245: GO 42158
42247: POP
42248: POP
// result := list ;
42249: LD_ADDR_VAR 0 2
42253: PUSH
42254: LD_VAR 0 5
42258: ST_TO_ADDR
// end ;
42259: LD_VAR 0 2
42263: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42264: LD_INT 0
42266: PPUSH
42267: PPUSH
42268: PPUSH
42269: PPUSH
42270: PPUSH
42271: PPUSH
42272: PPUSH
// if not factory then
42273: LD_VAR 0 1
42277: NOT
42278: IFFALSE 42282
// exit ;
42280: GO 42875
// if control = control_apeman then
42282: LD_VAR 0 4
42286: PUSH
42287: LD_INT 5
42289: EQUAL
42290: IFFALSE 42399
// begin tmp := UnitsInside ( factory ) ;
42292: LD_ADDR_VAR 0 8
42296: PUSH
42297: LD_VAR 0 1
42301: PPUSH
42302: CALL_OW 313
42306: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42307: LD_VAR 0 8
42311: PPUSH
42312: LD_INT 25
42314: PUSH
42315: LD_INT 12
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PPUSH
42322: CALL_OW 72
42326: NOT
42327: IFFALSE 42337
// control := control_manual ;
42329: LD_ADDR_VAR 0 4
42333: PUSH
42334: LD_INT 1
42336: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42337: LD_ADDR_VAR 0 8
42341: PUSH
42342: LD_VAR 0 1
42346: PPUSH
42347: CALL 42034 0 1
42351: ST_TO_ADDR
// if tmp then
42352: LD_VAR 0 8
42356: IFFALSE 42399
// begin for i in tmp do
42358: LD_ADDR_VAR 0 7
42362: PUSH
42363: LD_VAR 0 8
42367: PUSH
42368: FOR_IN
42369: IFFALSE 42397
// if i [ 1 ] = b_ext_radio then
42371: LD_VAR 0 7
42375: PUSH
42376: LD_INT 1
42378: ARRAY
42379: PUSH
42380: LD_INT 22
42382: EQUAL
42383: IFFALSE 42395
// begin control := control_remote ;
42385: LD_ADDR_VAR 0 4
42389: PUSH
42390: LD_INT 2
42392: ST_TO_ADDR
// break ;
42393: GO 42397
// end ;
42395: GO 42368
42397: POP
42398: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42399: LD_VAR 0 1
42403: PPUSH
42404: LD_VAR 0 2
42408: PPUSH
42409: LD_VAR 0 3
42413: PPUSH
42414: LD_VAR 0 4
42418: PPUSH
42419: LD_VAR 0 5
42423: PPUSH
42424: CALL_OW 448
42428: IFFALSE 42463
// begin result := [ chassis , engine , control , weapon ] ;
42430: LD_ADDR_VAR 0 6
42434: PUSH
42435: LD_VAR 0 2
42439: PUSH
42440: LD_VAR 0 3
42444: PUSH
42445: LD_VAR 0 4
42449: PUSH
42450: LD_VAR 0 5
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: ST_TO_ADDR
// exit ;
42461: GO 42875
// end ; _chassis := AvailableChassisList ( factory ) ;
42463: LD_ADDR_VAR 0 9
42467: PUSH
42468: LD_VAR 0 1
42472: PPUSH
42473: CALL_OW 475
42477: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42478: LD_ADDR_VAR 0 11
42482: PUSH
42483: LD_VAR 0 1
42487: PPUSH
42488: CALL_OW 476
42492: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42493: LD_ADDR_VAR 0 12
42497: PUSH
42498: LD_VAR 0 1
42502: PPUSH
42503: CALL_OW 477
42507: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42508: LD_ADDR_VAR 0 10
42512: PUSH
42513: LD_VAR 0 1
42517: PPUSH
42518: CALL_OW 478
42522: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42523: LD_VAR 0 9
42527: NOT
42528: PUSH
42529: LD_VAR 0 11
42533: NOT
42534: OR
42535: PUSH
42536: LD_VAR 0 12
42540: NOT
42541: OR
42542: PUSH
42543: LD_VAR 0 10
42547: NOT
42548: OR
42549: IFFALSE 42584
// begin result := [ chassis , engine , control , weapon ] ;
42551: LD_ADDR_VAR 0 6
42555: PUSH
42556: LD_VAR 0 2
42560: PUSH
42561: LD_VAR 0 3
42565: PUSH
42566: LD_VAR 0 4
42570: PUSH
42571: LD_VAR 0 5
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: ST_TO_ADDR
// exit ;
42582: GO 42875
// end ; if not chassis in _chassis then
42584: LD_VAR 0 2
42588: PUSH
42589: LD_VAR 0 9
42593: IN
42594: NOT
42595: IFFALSE 42621
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42597: LD_ADDR_VAR 0 2
42601: PUSH
42602: LD_VAR 0 9
42606: PUSH
42607: LD_INT 1
42609: PPUSH
42610: LD_VAR 0 9
42614: PPUSH
42615: CALL_OW 12
42619: ARRAY
42620: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42621: LD_VAR 0 2
42625: PPUSH
42626: LD_VAR 0 3
42630: PPUSH
42631: CALL 42880 0 2
42635: NOT
42636: IFFALSE 42695
// repeat engine := _engine [ 1 ] ;
42638: LD_ADDR_VAR 0 3
42642: PUSH
42643: LD_VAR 0 11
42647: PUSH
42648: LD_INT 1
42650: ARRAY
42651: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42652: LD_ADDR_VAR 0 11
42656: PUSH
42657: LD_VAR 0 11
42661: PPUSH
42662: LD_INT 1
42664: PPUSH
42665: CALL_OW 3
42669: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42670: LD_VAR 0 2
42674: PPUSH
42675: LD_VAR 0 3
42679: PPUSH
42680: CALL 42880 0 2
42684: PUSH
42685: LD_VAR 0 11
42689: PUSH
42690: EMPTY
42691: EQUAL
42692: OR
42693: IFFALSE 42638
// if not control in _control then
42695: LD_VAR 0 4
42699: PUSH
42700: LD_VAR 0 12
42704: IN
42705: NOT
42706: IFFALSE 42732
// control := _control [ rand ( 1 , _control ) ] ;
42708: LD_ADDR_VAR 0 4
42712: PUSH
42713: LD_VAR 0 12
42717: PUSH
42718: LD_INT 1
42720: PPUSH
42721: LD_VAR 0 12
42725: PPUSH
42726: CALL_OW 12
42730: ARRAY
42731: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42732: LD_VAR 0 2
42736: PPUSH
42737: LD_VAR 0 5
42741: PPUSH
42742: CALL 43100 0 2
42746: NOT
42747: IFFALSE 42806
// repeat weapon := _weapon [ 1 ] ;
42749: LD_ADDR_VAR 0 5
42753: PUSH
42754: LD_VAR 0 10
42758: PUSH
42759: LD_INT 1
42761: ARRAY
42762: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42763: LD_ADDR_VAR 0 10
42767: PUSH
42768: LD_VAR 0 10
42772: PPUSH
42773: LD_INT 1
42775: PPUSH
42776: CALL_OW 3
42780: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42781: LD_VAR 0 2
42785: PPUSH
42786: LD_VAR 0 5
42790: PPUSH
42791: CALL 43100 0 2
42795: PUSH
42796: LD_VAR 0 10
42800: PUSH
42801: EMPTY
42802: EQUAL
42803: OR
42804: IFFALSE 42749
// result := [ ] ;
42806: LD_ADDR_VAR 0 6
42810: PUSH
42811: EMPTY
42812: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42813: LD_VAR 0 1
42817: PPUSH
42818: LD_VAR 0 2
42822: PPUSH
42823: LD_VAR 0 3
42827: PPUSH
42828: LD_VAR 0 4
42832: PPUSH
42833: LD_VAR 0 5
42837: PPUSH
42838: CALL_OW 448
42842: IFFALSE 42875
// result := [ chassis , engine , control , weapon ] ;
42844: LD_ADDR_VAR 0 6
42848: PUSH
42849: LD_VAR 0 2
42853: PUSH
42854: LD_VAR 0 3
42858: PUSH
42859: LD_VAR 0 4
42863: PUSH
42864: LD_VAR 0 5
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: ST_TO_ADDR
// end ;
42875: LD_VAR 0 6
42879: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42880: LD_INT 0
42882: PPUSH
// if not chassis or not engine then
42883: LD_VAR 0 1
42887: NOT
42888: PUSH
42889: LD_VAR 0 2
42893: NOT
42894: OR
42895: IFFALSE 42899
// exit ;
42897: GO 43095
// case engine of engine_solar :
42899: LD_VAR 0 2
42903: PUSH
42904: LD_INT 2
42906: DOUBLE
42907: EQUAL
42908: IFTRUE 42912
42910: GO 42950
42912: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42913: LD_ADDR_VAR 0 3
42917: PUSH
42918: LD_INT 11
42920: PUSH
42921: LD_INT 12
42923: PUSH
42924: LD_INT 13
42926: PUSH
42927: LD_INT 14
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: LD_INT 3
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: ST_TO_ADDR
42948: GO 43079
42950: LD_INT 1
42952: DOUBLE
42953: EQUAL
42954: IFTRUE 42958
42956: GO 43020
42958: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42959: LD_ADDR_VAR 0 3
42963: PUSH
42964: LD_INT 11
42966: PUSH
42967: LD_INT 12
42969: PUSH
42970: LD_INT 13
42972: PUSH
42973: LD_INT 14
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: LD_INT 2
42981: PUSH
42982: LD_INT 3
42984: PUSH
42985: LD_INT 4
42987: PUSH
42988: LD_INT 5
42990: PUSH
42991: LD_INT 21
42993: PUSH
42994: LD_INT 23
42996: PUSH
42997: LD_INT 22
42999: PUSH
43000: LD_INT 24
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: ST_TO_ADDR
43018: GO 43079
43020: LD_INT 3
43022: DOUBLE
43023: EQUAL
43024: IFTRUE 43028
43026: GO 43078
43028: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43029: LD_ADDR_VAR 0 3
43033: PUSH
43034: LD_INT 13
43036: PUSH
43037: LD_INT 14
43039: PUSH
43040: LD_INT 2
43042: PUSH
43043: LD_INT 3
43045: PUSH
43046: LD_INT 4
43048: PUSH
43049: LD_INT 5
43051: PUSH
43052: LD_INT 21
43054: PUSH
43055: LD_INT 22
43057: PUSH
43058: LD_INT 23
43060: PUSH
43061: LD_INT 24
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: ST_TO_ADDR
43076: GO 43079
43078: POP
// result := ( chassis in result ) ;
43079: LD_ADDR_VAR 0 3
43083: PUSH
43084: LD_VAR 0 1
43088: PUSH
43089: LD_VAR 0 3
43093: IN
43094: ST_TO_ADDR
// end ;
43095: LD_VAR 0 3
43099: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43100: LD_INT 0
43102: PPUSH
// if not chassis or not weapon then
43103: LD_VAR 0 1
43107: NOT
43108: PUSH
43109: LD_VAR 0 2
43113: NOT
43114: OR
43115: IFFALSE 43119
// exit ;
43117: GO 44179
// case weapon of us_machine_gun :
43119: LD_VAR 0 2
43123: PUSH
43124: LD_INT 2
43126: DOUBLE
43127: EQUAL
43128: IFTRUE 43132
43130: GO 43162
43132: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43133: LD_ADDR_VAR 0 3
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: LD_INT 3
43146: PUSH
43147: LD_INT 4
43149: PUSH
43150: LD_INT 5
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: ST_TO_ADDR
43160: GO 44163
43162: LD_INT 3
43164: DOUBLE
43165: EQUAL
43166: IFTRUE 43170
43168: GO 43200
43170: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43171: LD_ADDR_VAR 0 3
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: LD_INT 2
43181: PUSH
43182: LD_INT 3
43184: PUSH
43185: LD_INT 4
43187: PUSH
43188: LD_INT 5
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: ST_TO_ADDR
43198: GO 44163
43200: LD_INT 11
43202: DOUBLE
43203: EQUAL
43204: IFTRUE 43208
43206: GO 43238
43208: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43209: LD_ADDR_VAR 0 3
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: LD_INT 2
43219: PUSH
43220: LD_INT 3
43222: PUSH
43223: LD_INT 4
43225: PUSH
43226: LD_INT 5
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: ST_TO_ADDR
43236: GO 44163
43238: LD_INT 4
43240: DOUBLE
43241: EQUAL
43242: IFTRUE 43246
43244: GO 43272
43246: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43247: LD_ADDR_VAR 0 3
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: LD_INT 3
43257: PUSH
43258: LD_INT 4
43260: PUSH
43261: LD_INT 5
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: ST_TO_ADDR
43270: GO 44163
43272: LD_INT 5
43274: DOUBLE
43275: EQUAL
43276: IFTRUE 43280
43278: GO 43306
43280: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43281: LD_ADDR_VAR 0 3
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: LD_INT 3
43291: PUSH
43292: LD_INT 4
43294: PUSH
43295: LD_INT 5
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: ST_TO_ADDR
43304: GO 44163
43306: LD_INT 9
43308: DOUBLE
43309: EQUAL
43310: IFTRUE 43314
43312: GO 43340
43314: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43315: LD_ADDR_VAR 0 3
43319: PUSH
43320: LD_INT 2
43322: PUSH
43323: LD_INT 3
43325: PUSH
43326: LD_INT 4
43328: PUSH
43329: LD_INT 5
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: ST_TO_ADDR
43338: GO 44163
43340: LD_INT 7
43342: DOUBLE
43343: EQUAL
43344: IFTRUE 43348
43346: GO 43374
43348: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43349: LD_ADDR_VAR 0 3
43353: PUSH
43354: LD_INT 2
43356: PUSH
43357: LD_INT 3
43359: PUSH
43360: LD_INT 4
43362: PUSH
43363: LD_INT 5
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: ST_TO_ADDR
43372: GO 44163
43374: LD_INT 12
43376: DOUBLE
43377: EQUAL
43378: IFTRUE 43382
43380: GO 43408
43382: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43383: LD_ADDR_VAR 0 3
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: LD_INT 3
43393: PUSH
43394: LD_INT 4
43396: PUSH
43397: LD_INT 5
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: ST_TO_ADDR
43406: GO 44163
43408: LD_INT 13
43410: DOUBLE
43411: EQUAL
43412: IFTRUE 43416
43414: GO 43442
43416: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43417: LD_ADDR_VAR 0 3
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: LD_INT 3
43427: PUSH
43428: LD_INT 4
43430: PUSH
43431: LD_INT 5
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: ST_TO_ADDR
43440: GO 44163
43442: LD_INT 14
43444: DOUBLE
43445: EQUAL
43446: IFTRUE 43450
43448: GO 43468
43450: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43451: LD_ADDR_VAR 0 3
43455: PUSH
43456: LD_INT 4
43458: PUSH
43459: LD_INT 5
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: ST_TO_ADDR
43466: GO 44163
43468: LD_INT 6
43470: DOUBLE
43471: EQUAL
43472: IFTRUE 43476
43474: GO 43494
43476: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43477: LD_ADDR_VAR 0 3
43481: PUSH
43482: LD_INT 4
43484: PUSH
43485: LD_INT 5
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: ST_TO_ADDR
43492: GO 44163
43494: LD_INT 10
43496: DOUBLE
43497: EQUAL
43498: IFTRUE 43502
43500: GO 43520
43502: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43503: LD_ADDR_VAR 0 3
43507: PUSH
43508: LD_INT 4
43510: PUSH
43511: LD_INT 5
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: ST_TO_ADDR
43518: GO 44163
43520: LD_INT 22
43522: DOUBLE
43523: EQUAL
43524: IFTRUE 43528
43526: GO 43554
43528: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43529: LD_ADDR_VAR 0 3
43533: PUSH
43534: LD_INT 11
43536: PUSH
43537: LD_INT 12
43539: PUSH
43540: LD_INT 13
43542: PUSH
43543: LD_INT 14
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: ST_TO_ADDR
43552: GO 44163
43554: LD_INT 23
43556: DOUBLE
43557: EQUAL
43558: IFTRUE 43562
43560: GO 43588
43562: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43563: LD_ADDR_VAR 0 3
43567: PUSH
43568: LD_INT 11
43570: PUSH
43571: LD_INT 12
43573: PUSH
43574: LD_INT 13
43576: PUSH
43577: LD_INT 14
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: ST_TO_ADDR
43586: GO 44163
43588: LD_INT 24
43590: DOUBLE
43591: EQUAL
43592: IFTRUE 43596
43594: GO 43622
43596: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43597: LD_ADDR_VAR 0 3
43601: PUSH
43602: LD_INT 11
43604: PUSH
43605: LD_INT 12
43607: PUSH
43608: LD_INT 13
43610: PUSH
43611: LD_INT 14
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: ST_TO_ADDR
43620: GO 44163
43622: LD_INT 30
43624: DOUBLE
43625: EQUAL
43626: IFTRUE 43630
43628: GO 43656
43630: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43631: LD_ADDR_VAR 0 3
43635: PUSH
43636: LD_INT 11
43638: PUSH
43639: LD_INT 12
43641: PUSH
43642: LD_INT 13
43644: PUSH
43645: LD_INT 14
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: ST_TO_ADDR
43654: GO 44163
43656: LD_INT 25
43658: DOUBLE
43659: EQUAL
43660: IFTRUE 43664
43662: GO 43682
43664: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43665: LD_ADDR_VAR 0 3
43669: PUSH
43670: LD_INT 13
43672: PUSH
43673: LD_INT 14
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: ST_TO_ADDR
43680: GO 44163
43682: LD_INT 27
43684: DOUBLE
43685: EQUAL
43686: IFTRUE 43690
43688: GO 43708
43690: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43691: LD_ADDR_VAR 0 3
43695: PUSH
43696: LD_INT 13
43698: PUSH
43699: LD_INT 14
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: ST_TO_ADDR
43706: GO 44163
43708: LD_INT 92
43710: DOUBLE
43711: EQUAL
43712: IFTRUE 43716
43714: GO 43742
43716: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43717: LD_ADDR_VAR 0 3
43721: PUSH
43722: LD_INT 11
43724: PUSH
43725: LD_INT 12
43727: PUSH
43728: LD_INT 13
43730: PUSH
43731: LD_INT 14
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: ST_TO_ADDR
43740: GO 44163
43742: LD_INT 28
43744: DOUBLE
43745: EQUAL
43746: IFTRUE 43750
43748: GO 43768
43750: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43751: LD_ADDR_VAR 0 3
43755: PUSH
43756: LD_INT 13
43758: PUSH
43759: LD_INT 14
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: ST_TO_ADDR
43766: GO 44163
43768: LD_INT 29
43770: DOUBLE
43771: EQUAL
43772: IFTRUE 43776
43774: GO 43794
43776: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43777: LD_ADDR_VAR 0 3
43781: PUSH
43782: LD_INT 13
43784: PUSH
43785: LD_INT 14
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: ST_TO_ADDR
43792: GO 44163
43794: LD_INT 31
43796: DOUBLE
43797: EQUAL
43798: IFTRUE 43802
43800: GO 43820
43802: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43803: LD_ADDR_VAR 0 3
43807: PUSH
43808: LD_INT 13
43810: PUSH
43811: LD_INT 14
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: ST_TO_ADDR
43818: GO 44163
43820: LD_INT 26
43822: DOUBLE
43823: EQUAL
43824: IFTRUE 43828
43826: GO 43846
43828: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43829: LD_ADDR_VAR 0 3
43833: PUSH
43834: LD_INT 13
43836: PUSH
43837: LD_INT 14
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: ST_TO_ADDR
43844: GO 44163
43846: LD_INT 42
43848: DOUBLE
43849: EQUAL
43850: IFTRUE 43854
43852: GO 43880
43854: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43855: LD_ADDR_VAR 0 3
43859: PUSH
43860: LD_INT 21
43862: PUSH
43863: LD_INT 22
43865: PUSH
43866: LD_INT 23
43868: PUSH
43869: LD_INT 24
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: ST_TO_ADDR
43878: GO 44163
43880: LD_INT 43
43882: DOUBLE
43883: EQUAL
43884: IFTRUE 43888
43886: GO 43914
43888: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43889: LD_ADDR_VAR 0 3
43893: PUSH
43894: LD_INT 21
43896: PUSH
43897: LD_INT 22
43899: PUSH
43900: LD_INT 23
43902: PUSH
43903: LD_INT 24
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: ST_TO_ADDR
43912: GO 44163
43914: LD_INT 44
43916: DOUBLE
43917: EQUAL
43918: IFTRUE 43922
43920: GO 43948
43922: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43923: LD_ADDR_VAR 0 3
43927: PUSH
43928: LD_INT 21
43930: PUSH
43931: LD_INT 22
43933: PUSH
43934: LD_INT 23
43936: PUSH
43937: LD_INT 24
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: ST_TO_ADDR
43946: GO 44163
43948: LD_INT 45
43950: DOUBLE
43951: EQUAL
43952: IFTRUE 43956
43954: GO 43982
43956: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43957: LD_ADDR_VAR 0 3
43961: PUSH
43962: LD_INT 21
43964: PUSH
43965: LD_INT 22
43967: PUSH
43968: LD_INT 23
43970: PUSH
43971: LD_INT 24
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: ST_TO_ADDR
43980: GO 44163
43982: LD_INT 49
43984: DOUBLE
43985: EQUAL
43986: IFTRUE 43990
43988: GO 44016
43990: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43991: LD_ADDR_VAR 0 3
43995: PUSH
43996: LD_INT 21
43998: PUSH
43999: LD_INT 22
44001: PUSH
44002: LD_INT 23
44004: PUSH
44005: LD_INT 24
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: ST_TO_ADDR
44014: GO 44163
44016: LD_INT 51
44018: DOUBLE
44019: EQUAL
44020: IFTRUE 44024
44022: GO 44050
44024: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44025: LD_ADDR_VAR 0 3
44029: PUSH
44030: LD_INT 21
44032: PUSH
44033: LD_INT 22
44035: PUSH
44036: LD_INT 23
44038: PUSH
44039: LD_INT 24
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: ST_TO_ADDR
44048: GO 44163
44050: LD_INT 52
44052: DOUBLE
44053: EQUAL
44054: IFTRUE 44058
44056: GO 44084
44058: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44059: LD_ADDR_VAR 0 3
44063: PUSH
44064: LD_INT 21
44066: PUSH
44067: LD_INT 22
44069: PUSH
44070: LD_INT 23
44072: PUSH
44073: LD_INT 24
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: ST_TO_ADDR
44082: GO 44163
44084: LD_INT 53
44086: DOUBLE
44087: EQUAL
44088: IFTRUE 44092
44090: GO 44110
44092: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44093: LD_ADDR_VAR 0 3
44097: PUSH
44098: LD_INT 23
44100: PUSH
44101: LD_INT 24
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: ST_TO_ADDR
44108: GO 44163
44110: LD_INT 46
44112: DOUBLE
44113: EQUAL
44114: IFTRUE 44118
44116: GO 44136
44118: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44119: LD_ADDR_VAR 0 3
44123: PUSH
44124: LD_INT 23
44126: PUSH
44127: LD_INT 24
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: ST_TO_ADDR
44134: GO 44163
44136: LD_INT 47
44138: DOUBLE
44139: EQUAL
44140: IFTRUE 44144
44142: GO 44162
44144: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44145: LD_ADDR_VAR 0 3
44149: PUSH
44150: LD_INT 23
44152: PUSH
44153: LD_INT 24
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: ST_TO_ADDR
44160: GO 44163
44162: POP
// result := ( chassis in result ) ;
44163: LD_ADDR_VAR 0 3
44167: PUSH
44168: LD_VAR 0 1
44172: PUSH
44173: LD_VAR 0 3
44177: IN
44178: ST_TO_ADDR
// end ;
44179: LD_VAR 0 3
44183: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44184: LD_INT 0
44186: PPUSH
44187: PPUSH
44188: PPUSH
44189: PPUSH
44190: PPUSH
44191: PPUSH
44192: PPUSH
// result := array ;
44193: LD_ADDR_VAR 0 5
44197: PUSH
44198: LD_VAR 0 1
44202: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44203: LD_VAR 0 1
44207: NOT
44208: PUSH
44209: LD_VAR 0 2
44213: NOT
44214: OR
44215: PUSH
44216: LD_VAR 0 3
44220: NOT
44221: OR
44222: PUSH
44223: LD_VAR 0 2
44227: PUSH
44228: LD_VAR 0 1
44232: GREATER
44233: OR
44234: PUSH
44235: LD_VAR 0 3
44239: PUSH
44240: LD_VAR 0 1
44244: GREATER
44245: OR
44246: IFFALSE 44250
// exit ;
44248: GO 44546
// if direction then
44250: LD_VAR 0 4
44254: IFFALSE 44318
// begin d := 1 ;
44256: LD_ADDR_VAR 0 9
44260: PUSH
44261: LD_INT 1
44263: ST_TO_ADDR
// if i_from > i_to then
44264: LD_VAR 0 2
44268: PUSH
44269: LD_VAR 0 3
44273: GREATER
44274: IFFALSE 44300
// length := ( array - i_from ) + i_to else
44276: LD_ADDR_VAR 0 11
44280: PUSH
44281: LD_VAR 0 1
44285: PUSH
44286: LD_VAR 0 2
44290: MINUS
44291: PUSH
44292: LD_VAR 0 3
44296: PLUS
44297: ST_TO_ADDR
44298: GO 44316
// length := i_to - i_from ;
44300: LD_ADDR_VAR 0 11
44304: PUSH
44305: LD_VAR 0 3
44309: PUSH
44310: LD_VAR 0 2
44314: MINUS
44315: ST_TO_ADDR
// end else
44316: GO 44379
// begin d := - 1 ;
44318: LD_ADDR_VAR 0 9
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: ST_TO_ADDR
// if i_from > i_to then
44327: LD_VAR 0 2
44331: PUSH
44332: LD_VAR 0 3
44336: GREATER
44337: IFFALSE 44357
// length := i_from - i_to else
44339: LD_ADDR_VAR 0 11
44343: PUSH
44344: LD_VAR 0 2
44348: PUSH
44349: LD_VAR 0 3
44353: MINUS
44354: ST_TO_ADDR
44355: GO 44379
// length := ( array - i_to ) + i_from ;
44357: LD_ADDR_VAR 0 11
44361: PUSH
44362: LD_VAR 0 1
44366: PUSH
44367: LD_VAR 0 3
44371: MINUS
44372: PUSH
44373: LD_VAR 0 2
44377: PLUS
44378: ST_TO_ADDR
// end ; if not length then
44379: LD_VAR 0 11
44383: NOT
44384: IFFALSE 44388
// exit ;
44386: GO 44546
// tmp := array ;
44388: LD_ADDR_VAR 0 10
44392: PUSH
44393: LD_VAR 0 1
44397: ST_TO_ADDR
// for i = 1 to length do
44398: LD_ADDR_VAR 0 6
44402: PUSH
44403: DOUBLE
44404: LD_INT 1
44406: DEC
44407: ST_TO_ADDR
44408: LD_VAR 0 11
44412: PUSH
44413: FOR_TO
44414: IFFALSE 44534
// begin for j = 1 to array do
44416: LD_ADDR_VAR 0 7
44420: PUSH
44421: DOUBLE
44422: LD_INT 1
44424: DEC
44425: ST_TO_ADDR
44426: LD_VAR 0 1
44430: PUSH
44431: FOR_TO
44432: IFFALSE 44520
// begin k := j + d ;
44434: LD_ADDR_VAR 0 8
44438: PUSH
44439: LD_VAR 0 7
44443: PUSH
44444: LD_VAR 0 9
44448: PLUS
44449: ST_TO_ADDR
// if k > array then
44450: LD_VAR 0 8
44454: PUSH
44455: LD_VAR 0 1
44459: GREATER
44460: IFFALSE 44470
// k := 1 ;
44462: LD_ADDR_VAR 0 8
44466: PUSH
44467: LD_INT 1
44469: ST_TO_ADDR
// if not k then
44470: LD_VAR 0 8
44474: NOT
44475: IFFALSE 44487
// k := array ;
44477: LD_ADDR_VAR 0 8
44481: PUSH
44482: LD_VAR 0 1
44486: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44487: LD_ADDR_VAR 0 10
44491: PUSH
44492: LD_VAR 0 10
44496: PPUSH
44497: LD_VAR 0 8
44501: PPUSH
44502: LD_VAR 0 1
44506: PUSH
44507: LD_VAR 0 7
44511: ARRAY
44512: PPUSH
44513: CALL_OW 1
44517: ST_TO_ADDR
// end ;
44518: GO 44431
44520: POP
44521: POP
// array := tmp ;
44522: LD_ADDR_VAR 0 1
44526: PUSH
44527: LD_VAR 0 10
44531: ST_TO_ADDR
// end ;
44532: GO 44413
44534: POP
44535: POP
// result := array ;
44536: LD_ADDR_VAR 0 5
44540: PUSH
44541: LD_VAR 0 1
44545: ST_TO_ADDR
// end ;
44546: LD_VAR 0 5
44550: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44551: LD_INT 0
44553: PPUSH
44554: PPUSH
// result := 0 ;
44555: LD_ADDR_VAR 0 3
44559: PUSH
44560: LD_INT 0
44562: ST_TO_ADDR
// if not array or not value in array then
44563: LD_VAR 0 1
44567: NOT
44568: PUSH
44569: LD_VAR 0 2
44573: PUSH
44574: LD_VAR 0 1
44578: IN
44579: NOT
44580: OR
44581: IFFALSE 44585
// exit ;
44583: GO 44639
// for i = 1 to array do
44585: LD_ADDR_VAR 0 4
44589: PUSH
44590: DOUBLE
44591: LD_INT 1
44593: DEC
44594: ST_TO_ADDR
44595: LD_VAR 0 1
44599: PUSH
44600: FOR_TO
44601: IFFALSE 44637
// if value = array [ i ] then
44603: LD_VAR 0 2
44607: PUSH
44608: LD_VAR 0 1
44612: PUSH
44613: LD_VAR 0 4
44617: ARRAY
44618: EQUAL
44619: IFFALSE 44635
// begin result := i ;
44621: LD_ADDR_VAR 0 3
44625: PUSH
44626: LD_VAR 0 4
44630: ST_TO_ADDR
// exit ;
44631: POP
44632: POP
44633: GO 44639
// end ;
44635: GO 44600
44637: POP
44638: POP
// end ;
44639: LD_VAR 0 3
44643: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44644: LD_INT 0
44646: PPUSH
// vc_chassis := chassis ;
44647: LD_ADDR_OWVAR 37
44651: PUSH
44652: LD_VAR 0 1
44656: ST_TO_ADDR
// vc_engine := engine ;
44657: LD_ADDR_OWVAR 39
44661: PUSH
44662: LD_VAR 0 2
44666: ST_TO_ADDR
// vc_control := control ;
44667: LD_ADDR_OWVAR 38
44671: PUSH
44672: LD_VAR 0 3
44676: ST_TO_ADDR
// vc_weapon := weapon ;
44677: LD_ADDR_OWVAR 40
44681: PUSH
44682: LD_VAR 0 4
44686: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44687: LD_ADDR_OWVAR 41
44691: PUSH
44692: LD_VAR 0 5
44696: ST_TO_ADDR
// end ;
44697: LD_VAR 0 6
44701: RET
// export function WantPlant ( unit ) ; var task ; begin
44702: LD_INT 0
44704: PPUSH
44705: PPUSH
// result := false ;
44706: LD_ADDR_VAR 0 2
44710: PUSH
44711: LD_INT 0
44713: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44714: LD_ADDR_VAR 0 3
44718: PUSH
44719: LD_VAR 0 1
44723: PPUSH
44724: CALL_OW 437
44728: ST_TO_ADDR
// if task then
44729: LD_VAR 0 3
44733: IFFALSE 44761
// if task [ 1 ] [ 1 ] = p then
44735: LD_VAR 0 3
44739: PUSH
44740: LD_INT 1
44742: ARRAY
44743: PUSH
44744: LD_INT 1
44746: ARRAY
44747: PUSH
44748: LD_STRING p
44750: EQUAL
44751: IFFALSE 44761
// result := true ;
44753: LD_ADDR_VAR 0 2
44757: PUSH
44758: LD_INT 1
44760: ST_TO_ADDR
// end ;
44761: LD_VAR 0 2
44765: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44766: LD_INT 0
44768: PPUSH
44769: PPUSH
44770: PPUSH
44771: PPUSH
// if pos < 1 then
44772: LD_VAR 0 2
44776: PUSH
44777: LD_INT 1
44779: LESS
44780: IFFALSE 44784
// exit ;
44782: GO 45087
// if pos = 1 then
44784: LD_VAR 0 2
44788: PUSH
44789: LD_INT 1
44791: EQUAL
44792: IFFALSE 44825
// result := Replace ( arr , pos [ 1 ] , value ) else
44794: LD_ADDR_VAR 0 4
44798: PUSH
44799: LD_VAR 0 1
44803: PPUSH
44804: LD_VAR 0 2
44808: PUSH
44809: LD_INT 1
44811: ARRAY
44812: PPUSH
44813: LD_VAR 0 3
44817: PPUSH
44818: CALL_OW 1
44822: ST_TO_ADDR
44823: GO 45087
// begin tmp := arr ;
44825: LD_ADDR_VAR 0 6
44829: PUSH
44830: LD_VAR 0 1
44834: ST_TO_ADDR
// s_arr := [ tmp ] ;
44835: LD_ADDR_VAR 0 7
44839: PUSH
44840: LD_VAR 0 6
44844: PUSH
44845: EMPTY
44846: LIST
44847: ST_TO_ADDR
// for i = 1 to pos - 1 do
44848: LD_ADDR_VAR 0 5
44852: PUSH
44853: DOUBLE
44854: LD_INT 1
44856: DEC
44857: ST_TO_ADDR
44858: LD_VAR 0 2
44862: PUSH
44863: LD_INT 1
44865: MINUS
44866: PUSH
44867: FOR_TO
44868: IFFALSE 44913
// begin tmp := tmp [ pos [ i ] ] ;
44870: LD_ADDR_VAR 0 6
44874: PUSH
44875: LD_VAR 0 6
44879: PUSH
44880: LD_VAR 0 2
44884: PUSH
44885: LD_VAR 0 5
44889: ARRAY
44890: ARRAY
44891: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44892: LD_ADDR_VAR 0 7
44896: PUSH
44897: LD_VAR 0 7
44901: PUSH
44902: LD_VAR 0 6
44906: PUSH
44907: EMPTY
44908: LIST
44909: ADD
44910: ST_TO_ADDR
// end ;
44911: GO 44867
44913: POP
44914: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44915: LD_ADDR_VAR 0 6
44919: PUSH
44920: LD_VAR 0 6
44924: PPUSH
44925: LD_VAR 0 2
44929: PUSH
44930: LD_VAR 0 2
44934: ARRAY
44935: PPUSH
44936: LD_VAR 0 3
44940: PPUSH
44941: CALL_OW 1
44945: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44946: LD_ADDR_VAR 0 7
44950: PUSH
44951: LD_VAR 0 7
44955: PPUSH
44956: LD_VAR 0 7
44960: PPUSH
44961: LD_VAR 0 6
44965: PPUSH
44966: CALL_OW 1
44970: ST_TO_ADDR
// for i = s_arr downto 2 do
44971: LD_ADDR_VAR 0 5
44975: PUSH
44976: DOUBLE
44977: LD_VAR 0 7
44981: INC
44982: ST_TO_ADDR
44983: LD_INT 2
44985: PUSH
44986: FOR_DOWNTO
44987: IFFALSE 45071
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44989: LD_ADDR_VAR 0 6
44993: PUSH
44994: LD_VAR 0 7
44998: PUSH
44999: LD_VAR 0 5
45003: PUSH
45004: LD_INT 1
45006: MINUS
45007: ARRAY
45008: PPUSH
45009: LD_VAR 0 2
45013: PUSH
45014: LD_VAR 0 5
45018: PUSH
45019: LD_INT 1
45021: MINUS
45022: ARRAY
45023: PPUSH
45024: LD_VAR 0 7
45028: PUSH
45029: LD_VAR 0 5
45033: ARRAY
45034: PPUSH
45035: CALL_OW 1
45039: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45040: LD_ADDR_VAR 0 7
45044: PUSH
45045: LD_VAR 0 7
45049: PPUSH
45050: LD_VAR 0 5
45054: PUSH
45055: LD_INT 1
45057: MINUS
45058: PPUSH
45059: LD_VAR 0 6
45063: PPUSH
45064: CALL_OW 1
45068: ST_TO_ADDR
// end ;
45069: GO 44986
45071: POP
45072: POP
// result := s_arr [ 1 ] ;
45073: LD_ADDR_VAR 0 4
45077: PUSH
45078: LD_VAR 0 7
45082: PUSH
45083: LD_INT 1
45085: ARRAY
45086: ST_TO_ADDR
// end ; end ;
45087: LD_VAR 0 4
45091: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45092: LD_INT 0
45094: PPUSH
45095: PPUSH
// if not list then
45096: LD_VAR 0 1
45100: NOT
45101: IFFALSE 45105
// exit ;
45103: GO 45196
// i := list [ pos1 ] ;
45105: LD_ADDR_VAR 0 5
45109: PUSH
45110: LD_VAR 0 1
45114: PUSH
45115: LD_VAR 0 2
45119: ARRAY
45120: ST_TO_ADDR
// if not i then
45121: LD_VAR 0 5
45125: NOT
45126: IFFALSE 45130
// exit ;
45128: GO 45196
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45130: LD_ADDR_VAR 0 1
45134: PUSH
45135: LD_VAR 0 1
45139: PPUSH
45140: LD_VAR 0 2
45144: PPUSH
45145: LD_VAR 0 1
45149: PUSH
45150: LD_VAR 0 3
45154: ARRAY
45155: PPUSH
45156: CALL_OW 1
45160: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45161: LD_ADDR_VAR 0 1
45165: PUSH
45166: LD_VAR 0 1
45170: PPUSH
45171: LD_VAR 0 3
45175: PPUSH
45176: LD_VAR 0 5
45180: PPUSH
45181: CALL_OW 1
45185: ST_TO_ADDR
// result := list ;
45186: LD_ADDR_VAR 0 4
45190: PUSH
45191: LD_VAR 0 1
45195: ST_TO_ADDR
// end ;
45196: LD_VAR 0 4
45200: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45201: LD_INT 0
45203: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45204: LD_ADDR_VAR 0 5
45208: PUSH
45209: LD_VAR 0 1
45213: PPUSH
45214: CALL_OW 250
45218: PPUSH
45219: LD_VAR 0 1
45223: PPUSH
45224: CALL_OW 251
45228: PPUSH
45229: LD_VAR 0 2
45233: PPUSH
45234: LD_VAR 0 3
45238: PPUSH
45239: LD_VAR 0 4
45243: PPUSH
45244: CALL 45254 0 5
45248: ST_TO_ADDR
// end ;
45249: LD_VAR 0 5
45253: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45254: LD_INT 0
45256: PPUSH
45257: PPUSH
45258: PPUSH
45259: PPUSH
// if not list then
45260: LD_VAR 0 3
45264: NOT
45265: IFFALSE 45269
// exit ;
45267: GO 45657
// result := [ ] ;
45269: LD_ADDR_VAR 0 6
45273: PUSH
45274: EMPTY
45275: ST_TO_ADDR
// for i in list do
45276: LD_ADDR_VAR 0 7
45280: PUSH
45281: LD_VAR 0 3
45285: PUSH
45286: FOR_IN
45287: IFFALSE 45489
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45289: LD_ADDR_VAR 0 9
45293: PUSH
45294: LD_VAR 0 7
45298: PPUSH
45299: LD_VAR 0 1
45303: PPUSH
45304: LD_VAR 0 2
45308: PPUSH
45309: CALL_OW 297
45313: ST_TO_ADDR
// if not result then
45314: LD_VAR 0 6
45318: NOT
45319: IFFALSE 45345
// result := [ [ i , tmp ] ] else
45321: LD_ADDR_VAR 0 6
45325: PUSH
45326: LD_VAR 0 7
45330: PUSH
45331: LD_VAR 0 9
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: EMPTY
45341: LIST
45342: ST_TO_ADDR
45343: GO 45487
// begin if result [ result ] [ 2 ] < tmp then
45345: LD_VAR 0 6
45349: PUSH
45350: LD_VAR 0 6
45354: ARRAY
45355: PUSH
45356: LD_INT 2
45358: ARRAY
45359: PUSH
45360: LD_VAR 0 9
45364: LESS
45365: IFFALSE 45407
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45367: LD_ADDR_VAR 0 6
45371: PUSH
45372: LD_VAR 0 6
45376: PPUSH
45377: LD_VAR 0 6
45381: PUSH
45382: LD_INT 1
45384: PLUS
45385: PPUSH
45386: LD_VAR 0 7
45390: PUSH
45391: LD_VAR 0 9
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PPUSH
45400: CALL_OW 2
45404: ST_TO_ADDR
45405: GO 45487
// for j = 1 to result do
45407: LD_ADDR_VAR 0 8
45411: PUSH
45412: DOUBLE
45413: LD_INT 1
45415: DEC
45416: ST_TO_ADDR
45417: LD_VAR 0 6
45421: PUSH
45422: FOR_TO
45423: IFFALSE 45485
// begin if tmp < result [ j ] [ 2 ] then
45425: LD_VAR 0 9
45429: PUSH
45430: LD_VAR 0 6
45434: PUSH
45435: LD_VAR 0 8
45439: ARRAY
45440: PUSH
45441: LD_INT 2
45443: ARRAY
45444: LESS
45445: IFFALSE 45483
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45447: LD_ADDR_VAR 0 6
45451: PUSH
45452: LD_VAR 0 6
45456: PPUSH
45457: LD_VAR 0 8
45461: PPUSH
45462: LD_VAR 0 7
45466: PUSH
45467: LD_VAR 0 9
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PPUSH
45476: CALL_OW 2
45480: ST_TO_ADDR
// break ;
45481: GO 45485
// end ; end ;
45483: GO 45422
45485: POP
45486: POP
// end ; end ;
45487: GO 45286
45489: POP
45490: POP
// if result and not asc then
45491: LD_VAR 0 6
45495: PUSH
45496: LD_VAR 0 4
45500: NOT
45501: AND
45502: IFFALSE 45577
// begin tmp := result ;
45504: LD_ADDR_VAR 0 9
45508: PUSH
45509: LD_VAR 0 6
45513: ST_TO_ADDR
// for i = tmp downto 1 do
45514: LD_ADDR_VAR 0 7
45518: PUSH
45519: DOUBLE
45520: LD_VAR 0 9
45524: INC
45525: ST_TO_ADDR
45526: LD_INT 1
45528: PUSH
45529: FOR_DOWNTO
45530: IFFALSE 45575
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45532: LD_ADDR_VAR 0 6
45536: PUSH
45537: LD_VAR 0 6
45541: PPUSH
45542: LD_VAR 0 9
45546: PUSH
45547: LD_VAR 0 7
45551: MINUS
45552: PUSH
45553: LD_INT 1
45555: PLUS
45556: PPUSH
45557: LD_VAR 0 9
45561: PUSH
45562: LD_VAR 0 7
45566: ARRAY
45567: PPUSH
45568: CALL_OW 1
45572: ST_TO_ADDR
45573: GO 45529
45575: POP
45576: POP
// end ; tmp := [ ] ;
45577: LD_ADDR_VAR 0 9
45581: PUSH
45582: EMPTY
45583: ST_TO_ADDR
// if mode then
45584: LD_VAR 0 5
45588: IFFALSE 45657
// begin for i = 1 to result do
45590: LD_ADDR_VAR 0 7
45594: PUSH
45595: DOUBLE
45596: LD_INT 1
45598: DEC
45599: ST_TO_ADDR
45600: LD_VAR 0 6
45604: PUSH
45605: FOR_TO
45606: IFFALSE 45645
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45608: LD_ADDR_VAR 0 9
45612: PUSH
45613: LD_VAR 0 9
45617: PPUSH
45618: LD_VAR 0 7
45622: PPUSH
45623: LD_VAR 0 6
45627: PUSH
45628: LD_VAR 0 7
45632: ARRAY
45633: PUSH
45634: LD_INT 1
45636: ARRAY
45637: PPUSH
45638: CALL_OW 1
45642: ST_TO_ADDR
45643: GO 45605
45645: POP
45646: POP
// result := tmp ;
45647: LD_ADDR_VAR 0 6
45651: PUSH
45652: LD_VAR 0 9
45656: ST_TO_ADDR
// end ; end ;
45657: LD_VAR 0 6
45661: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45662: LD_INT 0
45664: PPUSH
45665: PPUSH
45666: PPUSH
45667: PPUSH
45668: PPUSH
45669: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45670: LD_ADDR_VAR 0 5
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: ST_TO_ADDR
// if not x or not y then
45692: LD_VAR 0 2
45696: NOT
45697: PUSH
45698: LD_VAR 0 3
45702: NOT
45703: OR
45704: IFFALSE 45708
// exit ;
45706: GO 47358
// if not range then
45708: LD_VAR 0 4
45712: NOT
45713: IFFALSE 45723
// range := 10 ;
45715: LD_ADDR_VAR 0 4
45719: PUSH
45720: LD_INT 10
45722: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45723: LD_ADDR_VAR 0 8
45727: PUSH
45728: LD_INT 81
45730: PUSH
45731: LD_VAR 0 1
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 92
45742: PUSH
45743: LD_VAR 0 2
45747: PUSH
45748: LD_VAR 0 3
45752: PUSH
45753: LD_VAR 0 4
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 3
45766: PUSH
45767: LD_INT 21
45769: PUSH
45770: LD_INT 3
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: LIST
45785: PPUSH
45786: CALL_OW 69
45790: ST_TO_ADDR
// if not tmp then
45791: LD_VAR 0 8
45795: NOT
45796: IFFALSE 45800
// exit ;
45798: GO 47358
// for i in tmp do
45800: LD_ADDR_VAR 0 6
45804: PUSH
45805: LD_VAR 0 8
45809: PUSH
45810: FOR_IN
45811: IFFALSE 47333
// begin points := [ 0 , 0 , 0 ] ;
45813: LD_ADDR_VAR 0 9
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: LIST
45831: ST_TO_ADDR
// bpoints := 1 ;
45832: LD_ADDR_VAR 0 10
45836: PUSH
45837: LD_INT 1
45839: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45840: LD_VAR 0 6
45844: PPUSH
45845: CALL_OW 247
45849: PUSH
45850: LD_INT 1
45852: DOUBLE
45853: EQUAL
45854: IFTRUE 45858
45856: GO 46436
45858: POP
// begin if GetClass ( i ) = 1 then
45859: LD_VAR 0 6
45863: PPUSH
45864: CALL_OW 257
45868: PUSH
45869: LD_INT 1
45871: EQUAL
45872: IFFALSE 45893
// points := [ 10 , 5 , 3 ] ;
45874: LD_ADDR_VAR 0 9
45878: PUSH
45879: LD_INT 10
45881: PUSH
45882: LD_INT 5
45884: PUSH
45885: LD_INT 3
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: LIST
45892: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45893: LD_VAR 0 6
45897: PPUSH
45898: CALL_OW 257
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: LD_INT 3
45908: PUSH
45909: LD_INT 4
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: IN
45917: IFFALSE 45938
// points := [ 3 , 2 , 1 ] ;
45919: LD_ADDR_VAR 0 9
45923: PUSH
45924: LD_INT 3
45926: PUSH
45927: LD_INT 2
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: LIST
45937: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45938: LD_VAR 0 6
45942: PPUSH
45943: CALL_OW 257
45947: PUSH
45948: LD_INT 5
45950: EQUAL
45951: IFFALSE 45972
// points := [ 130 , 5 , 2 ] ;
45953: LD_ADDR_VAR 0 9
45957: PUSH
45958: LD_INT 130
45960: PUSH
45961: LD_INT 5
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: LIST
45971: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45972: LD_VAR 0 6
45976: PPUSH
45977: CALL_OW 257
45981: PUSH
45982: LD_INT 8
45984: EQUAL
45985: IFFALSE 46006
// points := [ 35 , 35 , 30 ] ;
45987: LD_ADDR_VAR 0 9
45991: PUSH
45992: LD_INT 35
45994: PUSH
45995: LD_INT 35
45997: PUSH
45998: LD_INT 30
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: LIST
46005: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46006: LD_VAR 0 6
46010: PPUSH
46011: CALL_OW 257
46015: PUSH
46016: LD_INT 9
46018: EQUAL
46019: IFFALSE 46040
// points := [ 20 , 55 , 40 ] ;
46021: LD_ADDR_VAR 0 9
46025: PUSH
46026: LD_INT 20
46028: PUSH
46029: LD_INT 55
46031: PUSH
46032: LD_INT 40
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: LIST
46039: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46040: LD_VAR 0 6
46044: PPUSH
46045: CALL_OW 257
46049: PUSH
46050: LD_INT 12
46052: PUSH
46053: LD_INT 16
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: IN
46060: IFFALSE 46081
// points := [ 5 , 3 , 2 ] ;
46062: LD_ADDR_VAR 0 9
46066: PUSH
46067: LD_INT 5
46069: PUSH
46070: LD_INT 3
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: LIST
46080: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46081: LD_VAR 0 6
46085: PPUSH
46086: CALL_OW 257
46090: PUSH
46091: LD_INT 17
46093: EQUAL
46094: IFFALSE 46115
// points := [ 100 , 50 , 75 ] ;
46096: LD_ADDR_VAR 0 9
46100: PUSH
46101: LD_INT 100
46103: PUSH
46104: LD_INT 50
46106: PUSH
46107: LD_INT 75
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: LIST
46114: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46115: LD_VAR 0 6
46119: PPUSH
46120: CALL_OW 257
46124: PUSH
46125: LD_INT 15
46127: EQUAL
46128: IFFALSE 46149
// points := [ 10 , 5 , 3 ] ;
46130: LD_ADDR_VAR 0 9
46134: PUSH
46135: LD_INT 10
46137: PUSH
46138: LD_INT 5
46140: PUSH
46141: LD_INT 3
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: LIST
46148: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46149: LD_VAR 0 6
46153: PPUSH
46154: CALL_OW 257
46158: PUSH
46159: LD_INT 14
46161: EQUAL
46162: IFFALSE 46183
// points := [ 10 , 0 , 0 ] ;
46164: LD_ADDR_VAR 0 9
46168: PUSH
46169: LD_INT 10
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: LIST
46182: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46183: LD_VAR 0 6
46187: PPUSH
46188: CALL_OW 257
46192: PUSH
46193: LD_INT 11
46195: EQUAL
46196: IFFALSE 46217
// points := [ 30 , 10 , 5 ] ;
46198: LD_ADDR_VAR 0 9
46202: PUSH
46203: LD_INT 30
46205: PUSH
46206: LD_INT 10
46208: PUSH
46209: LD_INT 5
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: LIST
46216: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46217: LD_VAR 0 1
46221: PPUSH
46222: LD_INT 5
46224: PPUSH
46225: CALL_OW 321
46229: PUSH
46230: LD_INT 2
46232: EQUAL
46233: IFFALSE 46250
// bpoints := bpoints * 1.8 ;
46235: LD_ADDR_VAR 0 10
46239: PUSH
46240: LD_VAR 0 10
46244: PUSH
46245: LD_REAL  1.80000000000000E+0000
46248: MUL
46249: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46250: LD_VAR 0 6
46254: PPUSH
46255: CALL_OW 257
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: LD_INT 2
46265: PUSH
46266: LD_INT 3
46268: PUSH
46269: LD_INT 4
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: IN
46278: PUSH
46279: LD_VAR 0 1
46283: PPUSH
46284: LD_INT 51
46286: PPUSH
46287: CALL_OW 321
46291: PUSH
46292: LD_INT 2
46294: EQUAL
46295: AND
46296: IFFALSE 46313
// bpoints := bpoints * 1.2 ;
46298: LD_ADDR_VAR 0 10
46302: PUSH
46303: LD_VAR 0 10
46307: PUSH
46308: LD_REAL  1.20000000000000E+0000
46311: MUL
46312: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46313: LD_VAR 0 6
46317: PPUSH
46318: CALL_OW 257
46322: PUSH
46323: LD_INT 5
46325: PUSH
46326: LD_INT 7
46328: PUSH
46329: LD_INT 9
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: LIST
46336: IN
46337: PUSH
46338: LD_VAR 0 1
46342: PPUSH
46343: LD_INT 52
46345: PPUSH
46346: CALL_OW 321
46350: PUSH
46351: LD_INT 2
46353: EQUAL
46354: AND
46355: IFFALSE 46372
// bpoints := bpoints * 1.5 ;
46357: LD_ADDR_VAR 0 10
46361: PUSH
46362: LD_VAR 0 10
46366: PUSH
46367: LD_REAL  1.50000000000000E+0000
46370: MUL
46371: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46372: LD_VAR 0 1
46376: PPUSH
46377: LD_INT 66
46379: PPUSH
46380: CALL_OW 321
46384: PUSH
46385: LD_INT 2
46387: EQUAL
46388: IFFALSE 46405
// bpoints := bpoints * 1.1 ;
46390: LD_ADDR_VAR 0 10
46394: PUSH
46395: LD_VAR 0 10
46399: PUSH
46400: LD_REAL  1.10000000000000E+0000
46403: MUL
46404: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46405: LD_ADDR_VAR 0 10
46409: PUSH
46410: LD_VAR 0 10
46414: PUSH
46415: LD_VAR 0 6
46419: PPUSH
46420: LD_INT 1
46422: PPUSH
46423: CALL_OW 259
46427: PUSH
46428: LD_REAL  1.15000000000000E+0000
46431: MUL
46432: MUL
46433: ST_TO_ADDR
// end ; unit_vehicle :
46434: GO 47262
46436: LD_INT 2
46438: DOUBLE
46439: EQUAL
46440: IFTRUE 46444
46442: GO 47250
46444: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46445: LD_VAR 0 6
46449: PPUSH
46450: CALL_OW 264
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: LD_INT 42
46460: PUSH
46461: LD_INT 24
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: LIST
46468: IN
46469: IFFALSE 46490
// points := [ 25 , 5 , 3 ] ;
46471: LD_ADDR_VAR 0 9
46475: PUSH
46476: LD_INT 25
46478: PUSH
46479: LD_INT 5
46481: PUSH
46482: LD_INT 3
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: LIST
46489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46490: LD_VAR 0 6
46494: PPUSH
46495: CALL_OW 264
46499: PUSH
46500: LD_INT 4
46502: PUSH
46503: LD_INT 43
46505: PUSH
46506: LD_INT 25
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: IN
46514: IFFALSE 46535
// points := [ 40 , 15 , 5 ] ;
46516: LD_ADDR_VAR 0 9
46520: PUSH
46521: LD_INT 40
46523: PUSH
46524: LD_INT 15
46526: PUSH
46527: LD_INT 5
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: LIST
46534: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46535: LD_VAR 0 6
46539: PPUSH
46540: CALL_OW 264
46544: PUSH
46545: LD_INT 3
46547: PUSH
46548: LD_INT 23
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: IN
46555: IFFALSE 46576
// points := [ 7 , 25 , 8 ] ;
46557: LD_ADDR_VAR 0 9
46561: PUSH
46562: LD_INT 7
46564: PUSH
46565: LD_INT 25
46567: PUSH
46568: LD_INT 8
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: LIST
46575: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46576: LD_VAR 0 6
46580: PPUSH
46581: CALL_OW 264
46585: PUSH
46586: LD_INT 5
46588: PUSH
46589: LD_INT 27
46591: PUSH
46592: LD_INT 44
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: LIST
46599: IN
46600: IFFALSE 46621
// points := [ 14 , 50 , 16 ] ;
46602: LD_ADDR_VAR 0 9
46606: PUSH
46607: LD_INT 14
46609: PUSH
46610: LD_INT 50
46612: PUSH
46613: LD_INT 16
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46621: LD_VAR 0 6
46625: PPUSH
46626: CALL_OW 264
46630: PUSH
46631: LD_INT 6
46633: PUSH
46634: LD_INT 46
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: IN
46641: IFFALSE 46662
// points := [ 32 , 120 , 70 ] ;
46643: LD_ADDR_VAR 0 9
46647: PUSH
46648: LD_INT 32
46650: PUSH
46651: LD_INT 120
46653: PUSH
46654: LD_INT 70
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: LIST
46661: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46662: LD_VAR 0 6
46666: PPUSH
46667: CALL_OW 264
46671: PUSH
46672: LD_INT 7
46674: PUSH
46675: LD_INT 28
46677: PUSH
46678: LD_INT 45
46680: PUSH
46681: LD_INT 92
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: IN
46690: IFFALSE 46711
// points := [ 35 , 20 , 45 ] ;
46692: LD_ADDR_VAR 0 9
46696: PUSH
46697: LD_INT 35
46699: PUSH
46700: LD_INT 20
46702: PUSH
46703: LD_INT 45
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: LIST
46710: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46711: LD_VAR 0 6
46715: PPUSH
46716: CALL_OW 264
46720: PUSH
46721: LD_INT 47
46723: PUSH
46724: EMPTY
46725: LIST
46726: IN
46727: IFFALSE 46748
// points := [ 67 , 45 , 75 ] ;
46729: LD_ADDR_VAR 0 9
46733: PUSH
46734: LD_INT 67
46736: PUSH
46737: LD_INT 45
46739: PUSH
46740: LD_INT 75
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: LIST
46747: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46748: LD_VAR 0 6
46752: PPUSH
46753: CALL_OW 264
46757: PUSH
46758: LD_INT 26
46760: PUSH
46761: EMPTY
46762: LIST
46763: IN
46764: IFFALSE 46785
// points := [ 120 , 30 , 80 ] ;
46766: LD_ADDR_VAR 0 9
46770: PUSH
46771: LD_INT 120
46773: PUSH
46774: LD_INT 30
46776: PUSH
46777: LD_INT 80
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: LIST
46784: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46785: LD_VAR 0 6
46789: PPUSH
46790: CALL_OW 264
46794: PUSH
46795: LD_INT 22
46797: PUSH
46798: EMPTY
46799: LIST
46800: IN
46801: IFFALSE 46822
// points := [ 40 , 1 , 1 ] ;
46803: LD_ADDR_VAR 0 9
46807: PUSH
46808: LD_INT 40
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: LIST
46821: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46822: LD_VAR 0 6
46826: PPUSH
46827: CALL_OW 264
46831: PUSH
46832: LD_INT 29
46834: PUSH
46835: EMPTY
46836: LIST
46837: IN
46838: IFFALSE 46859
// points := [ 70 , 200 , 400 ] ;
46840: LD_ADDR_VAR 0 9
46844: PUSH
46845: LD_INT 70
46847: PUSH
46848: LD_INT 200
46850: PUSH
46851: LD_INT 400
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: LIST
46858: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46859: LD_VAR 0 6
46863: PPUSH
46864: CALL_OW 264
46868: PUSH
46869: LD_INT 14
46871: PUSH
46872: LD_INT 53
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: IN
46879: IFFALSE 46900
// points := [ 40 , 10 , 20 ] ;
46881: LD_ADDR_VAR 0 9
46885: PUSH
46886: LD_INT 40
46888: PUSH
46889: LD_INT 10
46891: PUSH
46892: LD_INT 20
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: LIST
46899: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46900: LD_VAR 0 6
46904: PPUSH
46905: CALL_OW 264
46909: PUSH
46910: LD_INT 9
46912: PUSH
46913: EMPTY
46914: LIST
46915: IN
46916: IFFALSE 46937
// points := [ 5 , 70 , 20 ] ;
46918: LD_ADDR_VAR 0 9
46922: PUSH
46923: LD_INT 5
46925: PUSH
46926: LD_INT 70
46928: PUSH
46929: LD_INT 20
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: LIST
46936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46937: LD_VAR 0 6
46941: PPUSH
46942: CALL_OW 264
46946: PUSH
46947: LD_INT 10
46949: PUSH
46950: EMPTY
46951: LIST
46952: IN
46953: IFFALSE 46974
// points := [ 35 , 110 , 70 ] ;
46955: LD_ADDR_VAR 0 9
46959: PUSH
46960: LD_INT 35
46962: PUSH
46963: LD_INT 110
46965: PUSH
46966: LD_INT 70
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: LIST
46973: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46974: LD_VAR 0 6
46978: PPUSH
46979: CALL_OW 265
46983: PUSH
46984: LD_INT 25
46986: EQUAL
46987: IFFALSE 47008
// points := [ 80 , 65 , 100 ] ;
46989: LD_ADDR_VAR 0 9
46993: PUSH
46994: LD_INT 80
46996: PUSH
46997: LD_INT 65
46999: PUSH
47000: LD_INT 100
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: LIST
47007: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47008: LD_VAR 0 6
47012: PPUSH
47013: CALL_OW 263
47017: PUSH
47018: LD_INT 1
47020: EQUAL
47021: IFFALSE 47056
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47023: LD_ADDR_VAR 0 10
47027: PUSH
47028: LD_VAR 0 10
47032: PUSH
47033: LD_VAR 0 6
47037: PPUSH
47038: CALL_OW 311
47042: PPUSH
47043: LD_INT 3
47045: PPUSH
47046: CALL_OW 259
47050: PUSH
47051: LD_INT 4
47053: MUL
47054: MUL
47055: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47056: LD_VAR 0 6
47060: PPUSH
47061: CALL_OW 263
47065: PUSH
47066: LD_INT 2
47068: EQUAL
47069: IFFALSE 47120
// begin j := IsControledBy ( i ) ;
47071: LD_ADDR_VAR 0 7
47075: PUSH
47076: LD_VAR 0 6
47080: PPUSH
47081: CALL_OW 312
47085: ST_TO_ADDR
// if j then
47086: LD_VAR 0 7
47090: IFFALSE 47120
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47092: LD_ADDR_VAR 0 10
47096: PUSH
47097: LD_VAR 0 10
47101: PUSH
47102: LD_VAR 0 7
47106: PPUSH
47107: LD_INT 3
47109: PPUSH
47110: CALL_OW 259
47114: PUSH
47115: LD_INT 3
47117: MUL
47118: MUL
47119: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47120: LD_VAR 0 6
47124: PPUSH
47125: CALL_OW 264
47129: PUSH
47130: LD_INT 5
47132: PUSH
47133: LD_INT 6
47135: PUSH
47136: LD_INT 46
47138: PUSH
47139: LD_INT 44
47141: PUSH
47142: LD_INT 47
47144: PUSH
47145: LD_INT 45
47147: PUSH
47148: LD_INT 28
47150: PUSH
47151: LD_INT 7
47153: PUSH
47154: LD_INT 27
47156: PUSH
47157: LD_INT 29
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: IN
47172: PUSH
47173: LD_VAR 0 1
47177: PPUSH
47178: LD_INT 52
47180: PPUSH
47181: CALL_OW 321
47185: PUSH
47186: LD_INT 2
47188: EQUAL
47189: AND
47190: IFFALSE 47207
// bpoints := bpoints * 1.2 ;
47192: LD_ADDR_VAR 0 10
47196: PUSH
47197: LD_VAR 0 10
47201: PUSH
47202: LD_REAL  1.20000000000000E+0000
47205: MUL
47206: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47207: LD_VAR 0 6
47211: PPUSH
47212: CALL_OW 264
47216: PUSH
47217: LD_INT 6
47219: PUSH
47220: LD_INT 46
47222: PUSH
47223: LD_INT 47
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: LIST
47230: IN
47231: IFFALSE 47248
// bpoints := bpoints * 1.2 ;
47233: LD_ADDR_VAR 0 10
47237: PUSH
47238: LD_VAR 0 10
47242: PUSH
47243: LD_REAL  1.20000000000000E+0000
47246: MUL
47247: ST_TO_ADDR
// end ; unit_building :
47248: GO 47262
47250: LD_INT 3
47252: DOUBLE
47253: EQUAL
47254: IFTRUE 47258
47256: GO 47261
47258: POP
// ; end ;
47259: GO 47262
47261: POP
// for j = 1 to 3 do
47262: LD_ADDR_VAR 0 7
47266: PUSH
47267: DOUBLE
47268: LD_INT 1
47270: DEC
47271: ST_TO_ADDR
47272: LD_INT 3
47274: PUSH
47275: FOR_TO
47276: IFFALSE 47329
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47278: LD_ADDR_VAR 0 5
47282: PUSH
47283: LD_VAR 0 5
47287: PPUSH
47288: LD_VAR 0 7
47292: PPUSH
47293: LD_VAR 0 5
47297: PUSH
47298: LD_VAR 0 7
47302: ARRAY
47303: PUSH
47304: LD_VAR 0 9
47308: PUSH
47309: LD_VAR 0 7
47313: ARRAY
47314: PUSH
47315: LD_VAR 0 10
47319: MUL
47320: PLUS
47321: PPUSH
47322: CALL_OW 1
47326: ST_TO_ADDR
47327: GO 47275
47329: POP
47330: POP
// end ;
47331: GO 45810
47333: POP
47334: POP
// result := Replace ( result , 4 , tmp ) ;
47335: LD_ADDR_VAR 0 5
47339: PUSH
47340: LD_VAR 0 5
47344: PPUSH
47345: LD_INT 4
47347: PPUSH
47348: LD_VAR 0 8
47352: PPUSH
47353: CALL_OW 1
47357: ST_TO_ADDR
// end ;
47358: LD_VAR 0 5
47362: RET
// export function DangerAtRange ( unit , range ) ; begin
47363: LD_INT 0
47365: PPUSH
// if not unit then
47366: LD_VAR 0 1
47370: NOT
47371: IFFALSE 47375
// exit ;
47373: GO 47420
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47375: LD_ADDR_VAR 0 3
47379: PUSH
47380: LD_VAR 0 1
47384: PPUSH
47385: CALL_OW 255
47389: PPUSH
47390: LD_VAR 0 1
47394: PPUSH
47395: CALL_OW 250
47399: PPUSH
47400: LD_VAR 0 1
47404: PPUSH
47405: CALL_OW 251
47409: PPUSH
47410: LD_VAR 0 2
47414: PPUSH
47415: CALL 45662 0 4
47419: ST_TO_ADDR
// end ;
47420: LD_VAR 0 3
47424: RET
// export function DangerInArea ( side , area ) ; begin
47425: LD_INT 0
47427: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47428: LD_ADDR_VAR 0 3
47432: PUSH
47433: LD_VAR 0 2
47437: PPUSH
47438: LD_INT 81
47440: PUSH
47441: LD_VAR 0 1
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PPUSH
47450: CALL_OW 70
47454: ST_TO_ADDR
// end ;
47455: LD_VAR 0 3
47459: RET
// export function IsExtension ( b ) ; begin
47460: LD_INT 0
47462: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47463: LD_ADDR_VAR 0 2
47467: PUSH
47468: LD_VAR 0 1
47472: PUSH
47473: LD_INT 23
47475: PUSH
47476: LD_INT 20
47478: PUSH
47479: LD_INT 22
47481: PUSH
47482: LD_INT 17
47484: PUSH
47485: LD_INT 24
47487: PUSH
47488: LD_INT 21
47490: PUSH
47491: LD_INT 19
47493: PUSH
47494: LD_INT 16
47496: PUSH
47497: LD_INT 25
47499: PUSH
47500: LD_INT 18
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: IN
47515: ST_TO_ADDR
// end ;
47516: LD_VAR 0 2
47520: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47521: LD_INT 0
47523: PPUSH
47524: PPUSH
47525: PPUSH
// result := [ ] ;
47526: LD_ADDR_VAR 0 4
47530: PUSH
47531: EMPTY
47532: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47533: LD_ADDR_VAR 0 5
47537: PUSH
47538: LD_VAR 0 2
47542: PPUSH
47543: LD_INT 21
47545: PUSH
47546: LD_INT 3
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PPUSH
47553: CALL_OW 70
47557: ST_TO_ADDR
// if not tmp then
47558: LD_VAR 0 5
47562: NOT
47563: IFFALSE 47567
// exit ;
47565: GO 47631
// if checkLink then
47567: LD_VAR 0 3
47571: IFFALSE 47621
// begin for i in tmp do
47573: LD_ADDR_VAR 0 6
47577: PUSH
47578: LD_VAR 0 5
47582: PUSH
47583: FOR_IN
47584: IFFALSE 47619
// if GetBase ( i ) <> base then
47586: LD_VAR 0 6
47590: PPUSH
47591: CALL_OW 274
47595: PUSH
47596: LD_VAR 0 1
47600: NONEQUAL
47601: IFFALSE 47617
// ComLinkToBase ( base , i ) ;
47603: LD_VAR 0 1
47607: PPUSH
47608: LD_VAR 0 6
47612: PPUSH
47613: CALL_OW 169
47617: GO 47583
47619: POP
47620: POP
// end ; result := tmp ;
47621: LD_ADDR_VAR 0 4
47625: PUSH
47626: LD_VAR 0 5
47630: ST_TO_ADDR
// end ;
47631: LD_VAR 0 4
47635: RET
// export function ComComplete ( units , b ) ; var i ; begin
47636: LD_INT 0
47638: PPUSH
47639: PPUSH
// if not units then
47640: LD_VAR 0 1
47644: NOT
47645: IFFALSE 47649
// exit ;
47647: GO 47739
// for i in units do
47649: LD_ADDR_VAR 0 4
47653: PUSH
47654: LD_VAR 0 1
47658: PUSH
47659: FOR_IN
47660: IFFALSE 47737
// if BuildingStatus ( b ) = bs_build then
47662: LD_VAR 0 2
47666: PPUSH
47667: CALL_OW 461
47671: PUSH
47672: LD_INT 1
47674: EQUAL
47675: IFFALSE 47735
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47677: LD_VAR 0 4
47681: PPUSH
47682: LD_STRING h
47684: PUSH
47685: LD_VAR 0 2
47689: PPUSH
47690: CALL_OW 250
47694: PUSH
47695: LD_VAR 0 2
47699: PPUSH
47700: CALL_OW 251
47704: PUSH
47705: LD_VAR 0 2
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: PUSH
47728: EMPTY
47729: LIST
47730: PPUSH
47731: CALL_OW 446
47735: GO 47659
47737: POP
47738: POP
// end ;
47739: LD_VAR 0 3
47743: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47744: LD_INT 0
47746: PPUSH
47747: PPUSH
47748: PPUSH
47749: PPUSH
47750: PPUSH
47751: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47752: LD_VAR 0 1
47756: NOT
47757: PUSH
47758: LD_VAR 0 1
47762: PPUSH
47763: CALL_OW 263
47767: PUSH
47768: LD_INT 2
47770: NONEQUAL
47771: OR
47772: IFFALSE 47776
// exit ;
47774: GO 48092
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47776: LD_ADDR_VAR 0 6
47780: PUSH
47781: LD_INT 22
47783: PUSH
47784: LD_VAR 0 1
47788: PPUSH
47789: CALL_OW 255
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 2
47800: PUSH
47801: LD_INT 30
47803: PUSH
47804: LD_INT 36
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 34
47813: PUSH
47814: LD_INT 31
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: LIST
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PPUSH
47830: CALL_OW 69
47834: ST_TO_ADDR
// if not tmp then
47835: LD_VAR 0 6
47839: NOT
47840: IFFALSE 47844
// exit ;
47842: GO 48092
// result := [ ] ;
47844: LD_ADDR_VAR 0 2
47848: PUSH
47849: EMPTY
47850: ST_TO_ADDR
// for i in tmp do
47851: LD_ADDR_VAR 0 3
47855: PUSH
47856: LD_VAR 0 6
47860: PUSH
47861: FOR_IN
47862: IFFALSE 47933
// begin t := UnitsInside ( i ) ;
47864: LD_ADDR_VAR 0 4
47868: PUSH
47869: LD_VAR 0 3
47873: PPUSH
47874: CALL_OW 313
47878: ST_TO_ADDR
// if t then
47879: LD_VAR 0 4
47883: IFFALSE 47931
// for j in t do
47885: LD_ADDR_VAR 0 7
47889: PUSH
47890: LD_VAR 0 4
47894: PUSH
47895: FOR_IN
47896: IFFALSE 47929
// result := Replace ( result , result + 1 , j ) ;
47898: LD_ADDR_VAR 0 2
47902: PUSH
47903: LD_VAR 0 2
47907: PPUSH
47908: LD_VAR 0 2
47912: PUSH
47913: LD_INT 1
47915: PLUS
47916: PPUSH
47917: LD_VAR 0 7
47921: PPUSH
47922: CALL_OW 1
47926: ST_TO_ADDR
47927: GO 47895
47929: POP
47930: POP
// end ;
47931: GO 47861
47933: POP
47934: POP
// if not result then
47935: LD_VAR 0 2
47939: NOT
47940: IFFALSE 47944
// exit ;
47942: GO 48092
// mech := result [ 1 ] ;
47944: LD_ADDR_VAR 0 5
47948: PUSH
47949: LD_VAR 0 2
47953: PUSH
47954: LD_INT 1
47956: ARRAY
47957: ST_TO_ADDR
// if result > 1 then
47958: LD_VAR 0 2
47962: PUSH
47963: LD_INT 1
47965: GREATER
47966: IFFALSE 48078
// begin for i = 2 to result do
47968: LD_ADDR_VAR 0 3
47972: PUSH
47973: DOUBLE
47974: LD_INT 2
47976: DEC
47977: ST_TO_ADDR
47978: LD_VAR 0 2
47982: PUSH
47983: FOR_TO
47984: IFFALSE 48076
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47986: LD_ADDR_VAR 0 4
47990: PUSH
47991: LD_VAR 0 2
47995: PUSH
47996: LD_VAR 0 3
48000: ARRAY
48001: PPUSH
48002: LD_INT 3
48004: PPUSH
48005: CALL_OW 259
48009: PUSH
48010: LD_VAR 0 2
48014: PUSH
48015: LD_VAR 0 3
48019: ARRAY
48020: PPUSH
48021: CALL_OW 432
48025: MINUS
48026: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48027: LD_VAR 0 4
48031: PUSH
48032: LD_VAR 0 5
48036: PPUSH
48037: LD_INT 3
48039: PPUSH
48040: CALL_OW 259
48044: PUSH
48045: LD_VAR 0 5
48049: PPUSH
48050: CALL_OW 432
48054: MINUS
48055: GREATEREQUAL
48056: IFFALSE 48074
// mech := result [ i ] ;
48058: LD_ADDR_VAR 0 5
48062: PUSH
48063: LD_VAR 0 2
48067: PUSH
48068: LD_VAR 0 3
48072: ARRAY
48073: ST_TO_ADDR
// end ;
48074: GO 47983
48076: POP
48077: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48078: LD_VAR 0 1
48082: PPUSH
48083: LD_VAR 0 5
48087: PPUSH
48088: CALL_OW 135
// end ;
48092: LD_VAR 0 2
48096: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48097: LD_INT 0
48099: PPUSH
48100: PPUSH
48101: PPUSH
48102: PPUSH
48103: PPUSH
48104: PPUSH
48105: PPUSH
48106: PPUSH
48107: PPUSH
48108: PPUSH
48109: PPUSH
48110: PPUSH
48111: PPUSH
// result := [ ] ;
48112: LD_ADDR_VAR 0 7
48116: PUSH
48117: EMPTY
48118: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48119: LD_VAR 0 1
48123: PPUSH
48124: CALL_OW 266
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: IN
48139: NOT
48140: IFFALSE 48144
// exit ;
48142: GO 49778
// if name then
48144: LD_VAR 0 3
48148: IFFALSE 48164
// SetBName ( base_dep , name ) ;
48150: LD_VAR 0 1
48154: PPUSH
48155: LD_VAR 0 3
48159: PPUSH
48160: CALL_OW 500
// base := GetBase ( base_dep ) ;
48164: LD_ADDR_VAR 0 15
48168: PUSH
48169: LD_VAR 0 1
48173: PPUSH
48174: CALL_OW 274
48178: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48179: LD_ADDR_VAR 0 16
48183: PUSH
48184: LD_VAR 0 1
48188: PPUSH
48189: CALL_OW 255
48193: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48194: LD_ADDR_VAR 0 17
48198: PUSH
48199: LD_VAR 0 1
48203: PPUSH
48204: CALL_OW 248
48208: ST_TO_ADDR
// if sources then
48209: LD_VAR 0 5
48213: IFFALSE 48260
// for i = 1 to 3 do
48215: LD_ADDR_VAR 0 8
48219: PUSH
48220: DOUBLE
48221: LD_INT 1
48223: DEC
48224: ST_TO_ADDR
48225: LD_INT 3
48227: PUSH
48228: FOR_TO
48229: IFFALSE 48258
// AddResourceType ( base , i , sources [ i ] ) ;
48231: LD_VAR 0 15
48235: PPUSH
48236: LD_VAR 0 8
48240: PPUSH
48241: LD_VAR 0 5
48245: PUSH
48246: LD_VAR 0 8
48250: ARRAY
48251: PPUSH
48252: CALL_OW 276
48256: GO 48228
48258: POP
48259: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48260: LD_ADDR_VAR 0 18
48264: PUSH
48265: LD_VAR 0 15
48269: PPUSH
48270: LD_VAR 0 2
48274: PPUSH
48275: LD_INT 1
48277: PPUSH
48278: CALL 47521 0 3
48282: ST_TO_ADDR
// InitHc ;
48283: CALL_OW 19
// InitUc ;
48287: CALL_OW 18
// uc_side := side ;
48291: LD_ADDR_OWVAR 20
48295: PUSH
48296: LD_VAR 0 16
48300: ST_TO_ADDR
// uc_nation := nation ;
48301: LD_ADDR_OWVAR 21
48305: PUSH
48306: LD_VAR 0 17
48310: ST_TO_ADDR
// if buildings then
48311: LD_VAR 0 18
48315: IFFALSE 49637
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48317: LD_ADDR_VAR 0 19
48321: PUSH
48322: LD_VAR 0 18
48326: PPUSH
48327: LD_INT 2
48329: PUSH
48330: LD_INT 30
48332: PUSH
48333: LD_INT 29
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 30
48342: PUSH
48343: LD_INT 30
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: LIST
48354: PPUSH
48355: CALL_OW 72
48359: ST_TO_ADDR
// if tmp then
48360: LD_VAR 0 19
48364: IFFALSE 48412
// for i in tmp do
48366: LD_ADDR_VAR 0 8
48370: PUSH
48371: LD_VAR 0 19
48375: PUSH
48376: FOR_IN
48377: IFFALSE 48410
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48379: LD_VAR 0 8
48383: PPUSH
48384: CALL_OW 250
48388: PPUSH
48389: LD_VAR 0 8
48393: PPUSH
48394: CALL_OW 251
48398: PPUSH
48399: LD_VAR 0 16
48403: PPUSH
48404: CALL_OW 441
48408: GO 48376
48410: POP
48411: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48412: LD_VAR 0 18
48416: PPUSH
48417: LD_INT 2
48419: PUSH
48420: LD_INT 30
48422: PUSH
48423: LD_INT 32
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 30
48432: PUSH
48433: LD_INT 33
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: LIST
48444: PPUSH
48445: CALL_OW 72
48449: IFFALSE 48537
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48451: LD_ADDR_VAR 0 8
48455: PUSH
48456: LD_VAR 0 18
48460: PPUSH
48461: LD_INT 2
48463: PUSH
48464: LD_INT 30
48466: PUSH
48467: LD_INT 32
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 30
48476: PUSH
48477: LD_INT 33
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: LIST
48488: PPUSH
48489: CALL_OW 72
48493: PUSH
48494: FOR_IN
48495: IFFALSE 48535
// begin if not GetBWeapon ( i ) then
48497: LD_VAR 0 8
48501: PPUSH
48502: CALL_OW 269
48506: NOT
48507: IFFALSE 48533
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48509: LD_VAR 0 8
48513: PPUSH
48514: LD_VAR 0 8
48518: PPUSH
48519: LD_VAR 0 2
48523: PPUSH
48524: CALL 49783 0 2
48528: PPUSH
48529: CALL_OW 431
// end ;
48533: GO 48494
48535: POP
48536: POP
// end ; for i = 1 to personel do
48537: LD_ADDR_VAR 0 8
48541: PUSH
48542: DOUBLE
48543: LD_INT 1
48545: DEC
48546: ST_TO_ADDR
48547: LD_VAR 0 6
48551: PUSH
48552: FOR_TO
48553: IFFALSE 49617
// begin if i > 4 then
48555: LD_VAR 0 8
48559: PUSH
48560: LD_INT 4
48562: GREATER
48563: IFFALSE 48567
// break ;
48565: GO 49617
// case i of 1 :
48567: LD_VAR 0 8
48571: PUSH
48572: LD_INT 1
48574: DOUBLE
48575: EQUAL
48576: IFTRUE 48580
48578: GO 48660
48580: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48581: LD_ADDR_VAR 0 12
48585: PUSH
48586: LD_VAR 0 18
48590: PPUSH
48591: LD_INT 22
48593: PUSH
48594: LD_VAR 0 16
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 58
48605: PUSH
48606: EMPTY
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: LD_INT 30
48614: PUSH
48615: LD_INT 32
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 30
48624: PUSH
48625: LD_INT 4
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 30
48634: PUSH
48635: LD_INT 5
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: LIST
48652: PPUSH
48653: CALL_OW 72
48657: ST_TO_ADDR
48658: GO 48882
48660: LD_INT 2
48662: DOUBLE
48663: EQUAL
48664: IFTRUE 48668
48666: GO 48730
48668: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48669: LD_ADDR_VAR 0 12
48673: PUSH
48674: LD_VAR 0 18
48678: PPUSH
48679: LD_INT 22
48681: PUSH
48682: LD_VAR 0 16
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: LD_INT 30
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 30
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: LIST
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PPUSH
48723: CALL_OW 72
48727: ST_TO_ADDR
48728: GO 48882
48730: LD_INT 3
48732: DOUBLE
48733: EQUAL
48734: IFTRUE 48738
48736: GO 48800
48738: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48739: LD_ADDR_VAR 0 12
48743: PUSH
48744: LD_VAR 0 18
48748: PPUSH
48749: LD_INT 22
48751: PUSH
48752: LD_VAR 0 16
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: LD_INT 30
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 30
48776: PUSH
48777: LD_INT 3
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: LIST
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PPUSH
48793: CALL_OW 72
48797: ST_TO_ADDR
48798: GO 48882
48800: LD_INT 4
48802: DOUBLE
48803: EQUAL
48804: IFTRUE 48808
48806: GO 48881
48808: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48809: LD_ADDR_VAR 0 12
48813: PUSH
48814: LD_VAR 0 18
48818: PPUSH
48819: LD_INT 22
48821: PUSH
48822: LD_VAR 0 16
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: LD_INT 30
48836: PUSH
48837: LD_INT 6
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 30
48846: PUSH
48847: LD_INT 7
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 30
48856: PUSH
48857: LD_INT 8
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PPUSH
48874: CALL_OW 72
48878: ST_TO_ADDR
48879: GO 48882
48881: POP
// if i = 1 then
48882: LD_VAR 0 8
48886: PUSH
48887: LD_INT 1
48889: EQUAL
48890: IFFALSE 49001
// begin tmp := [ ] ;
48892: LD_ADDR_VAR 0 19
48896: PUSH
48897: EMPTY
48898: ST_TO_ADDR
// for j in f do
48899: LD_ADDR_VAR 0 9
48903: PUSH
48904: LD_VAR 0 12
48908: PUSH
48909: FOR_IN
48910: IFFALSE 48983
// if GetBType ( j ) = b_bunker then
48912: LD_VAR 0 9
48916: PPUSH
48917: CALL_OW 266
48921: PUSH
48922: LD_INT 32
48924: EQUAL
48925: IFFALSE 48952
// tmp := Insert ( tmp , 1 , j ) else
48927: LD_ADDR_VAR 0 19
48931: PUSH
48932: LD_VAR 0 19
48936: PPUSH
48937: LD_INT 1
48939: PPUSH
48940: LD_VAR 0 9
48944: PPUSH
48945: CALL_OW 2
48949: ST_TO_ADDR
48950: GO 48981
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48952: LD_ADDR_VAR 0 19
48956: PUSH
48957: LD_VAR 0 19
48961: PPUSH
48962: LD_VAR 0 19
48966: PUSH
48967: LD_INT 1
48969: PLUS
48970: PPUSH
48971: LD_VAR 0 9
48975: PPUSH
48976: CALL_OW 2
48980: ST_TO_ADDR
48981: GO 48909
48983: POP
48984: POP
// if tmp then
48985: LD_VAR 0 19
48989: IFFALSE 49001
// f := tmp ;
48991: LD_ADDR_VAR 0 12
48995: PUSH
48996: LD_VAR 0 19
49000: ST_TO_ADDR
// end ; x := personel [ i ] ;
49001: LD_ADDR_VAR 0 13
49005: PUSH
49006: LD_VAR 0 6
49010: PUSH
49011: LD_VAR 0 8
49015: ARRAY
49016: ST_TO_ADDR
// if x = - 1 then
49017: LD_VAR 0 13
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: EQUAL
49026: IFFALSE 49235
// begin for j in f do
49028: LD_ADDR_VAR 0 9
49032: PUSH
49033: LD_VAR 0 12
49037: PUSH
49038: FOR_IN
49039: IFFALSE 49231
// repeat InitHc ;
49041: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49045: LD_VAR 0 9
49049: PPUSH
49050: CALL_OW 266
49054: PUSH
49055: LD_INT 5
49057: EQUAL
49058: IFFALSE 49128
// begin if UnitsInside ( j ) < 3 then
49060: LD_VAR 0 9
49064: PPUSH
49065: CALL_OW 313
49069: PUSH
49070: LD_INT 3
49072: LESS
49073: IFFALSE 49109
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49075: LD_INT 0
49077: PPUSH
49078: LD_INT 5
49080: PUSH
49081: LD_INT 8
49083: PUSH
49084: LD_INT 9
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: LIST
49091: PUSH
49092: LD_VAR 0 17
49096: ARRAY
49097: PPUSH
49098: LD_VAR 0 4
49102: PPUSH
49103: CALL_OW 380
49107: GO 49126
// PrepareHuman ( false , i , skill ) ;
49109: LD_INT 0
49111: PPUSH
49112: LD_VAR 0 8
49116: PPUSH
49117: LD_VAR 0 4
49121: PPUSH
49122: CALL_OW 380
// end else
49126: GO 49145
// PrepareHuman ( false , i , skill ) ;
49128: LD_INT 0
49130: PPUSH
49131: LD_VAR 0 8
49135: PPUSH
49136: LD_VAR 0 4
49140: PPUSH
49141: CALL_OW 380
// un := CreateHuman ;
49145: LD_ADDR_VAR 0 14
49149: PUSH
49150: CALL_OW 44
49154: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49155: LD_ADDR_VAR 0 7
49159: PUSH
49160: LD_VAR 0 7
49164: PPUSH
49165: LD_INT 1
49167: PPUSH
49168: LD_VAR 0 14
49172: PPUSH
49173: CALL_OW 2
49177: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49178: LD_VAR 0 14
49182: PPUSH
49183: LD_VAR 0 9
49187: PPUSH
49188: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49192: LD_VAR 0 9
49196: PPUSH
49197: CALL_OW 313
49201: PUSH
49202: LD_INT 6
49204: EQUAL
49205: PUSH
49206: LD_VAR 0 9
49210: PPUSH
49211: CALL_OW 266
49215: PUSH
49216: LD_INT 32
49218: PUSH
49219: LD_INT 31
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: IN
49226: OR
49227: IFFALSE 49041
49229: GO 49038
49231: POP
49232: POP
// end else
49233: GO 49615
// for j = 1 to x do
49235: LD_ADDR_VAR 0 9
49239: PUSH
49240: DOUBLE
49241: LD_INT 1
49243: DEC
49244: ST_TO_ADDR
49245: LD_VAR 0 13
49249: PUSH
49250: FOR_TO
49251: IFFALSE 49613
// begin InitHc ;
49253: CALL_OW 19
// if not f then
49257: LD_VAR 0 12
49261: NOT
49262: IFFALSE 49351
// begin PrepareHuman ( false , i , skill ) ;
49264: LD_INT 0
49266: PPUSH
49267: LD_VAR 0 8
49271: PPUSH
49272: LD_VAR 0 4
49276: PPUSH
49277: CALL_OW 380
// un := CreateHuman ;
49281: LD_ADDR_VAR 0 14
49285: PUSH
49286: CALL_OW 44
49290: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49291: LD_ADDR_VAR 0 7
49295: PUSH
49296: LD_VAR 0 7
49300: PPUSH
49301: LD_INT 1
49303: PPUSH
49304: LD_VAR 0 14
49308: PPUSH
49309: CALL_OW 2
49313: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49314: LD_VAR 0 14
49318: PPUSH
49319: LD_VAR 0 1
49323: PPUSH
49324: CALL_OW 250
49328: PPUSH
49329: LD_VAR 0 1
49333: PPUSH
49334: CALL_OW 251
49338: PPUSH
49339: LD_INT 10
49341: PPUSH
49342: LD_INT 0
49344: PPUSH
49345: CALL_OW 50
// continue ;
49349: GO 49250
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49351: LD_VAR 0 12
49355: PUSH
49356: LD_INT 1
49358: ARRAY
49359: PPUSH
49360: CALL_OW 313
49364: PUSH
49365: LD_VAR 0 12
49369: PUSH
49370: LD_INT 1
49372: ARRAY
49373: PPUSH
49374: CALL_OW 266
49378: PUSH
49379: LD_INT 32
49381: PUSH
49382: LD_INT 31
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: IN
49389: AND
49390: PUSH
49391: LD_VAR 0 12
49395: PUSH
49396: LD_INT 1
49398: ARRAY
49399: PPUSH
49400: CALL_OW 313
49404: PUSH
49405: LD_INT 6
49407: EQUAL
49408: OR
49409: IFFALSE 49429
// f := Delete ( f , 1 ) ;
49411: LD_ADDR_VAR 0 12
49415: PUSH
49416: LD_VAR 0 12
49420: PPUSH
49421: LD_INT 1
49423: PPUSH
49424: CALL_OW 3
49428: ST_TO_ADDR
// if not f then
49429: LD_VAR 0 12
49433: NOT
49434: IFFALSE 49452
// begin x := x + 2 ;
49436: LD_ADDR_VAR 0 13
49440: PUSH
49441: LD_VAR 0 13
49445: PUSH
49446: LD_INT 2
49448: PLUS
49449: ST_TO_ADDR
// continue ;
49450: GO 49250
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49452: LD_VAR 0 12
49456: PUSH
49457: LD_INT 1
49459: ARRAY
49460: PPUSH
49461: CALL_OW 266
49465: PUSH
49466: LD_INT 5
49468: EQUAL
49469: IFFALSE 49543
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49471: LD_VAR 0 12
49475: PUSH
49476: LD_INT 1
49478: ARRAY
49479: PPUSH
49480: CALL_OW 313
49484: PUSH
49485: LD_INT 3
49487: LESS
49488: IFFALSE 49524
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49490: LD_INT 0
49492: PPUSH
49493: LD_INT 5
49495: PUSH
49496: LD_INT 8
49498: PUSH
49499: LD_INT 9
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: LIST
49506: PUSH
49507: LD_VAR 0 17
49511: ARRAY
49512: PPUSH
49513: LD_VAR 0 4
49517: PPUSH
49518: CALL_OW 380
49522: GO 49541
// PrepareHuman ( false , i , skill ) ;
49524: LD_INT 0
49526: PPUSH
49527: LD_VAR 0 8
49531: PPUSH
49532: LD_VAR 0 4
49536: PPUSH
49537: CALL_OW 380
// end else
49541: GO 49560
// PrepareHuman ( false , i , skill ) ;
49543: LD_INT 0
49545: PPUSH
49546: LD_VAR 0 8
49550: PPUSH
49551: LD_VAR 0 4
49555: PPUSH
49556: CALL_OW 380
// un := CreateHuman ;
49560: LD_ADDR_VAR 0 14
49564: PUSH
49565: CALL_OW 44
49569: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49570: LD_ADDR_VAR 0 7
49574: PUSH
49575: LD_VAR 0 7
49579: PPUSH
49580: LD_INT 1
49582: PPUSH
49583: LD_VAR 0 14
49587: PPUSH
49588: CALL_OW 2
49592: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49593: LD_VAR 0 14
49597: PPUSH
49598: LD_VAR 0 12
49602: PUSH
49603: LD_INT 1
49605: ARRAY
49606: PPUSH
49607: CALL_OW 52
// end ;
49611: GO 49250
49613: POP
49614: POP
// end ;
49615: GO 48552
49617: POP
49618: POP
// result := result ^ buildings ;
49619: LD_ADDR_VAR 0 7
49623: PUSH
49624: LD_VAR 0 7
49628: PUSH
49629: LD_VAR 0 18
49633: ADD
49634: ST_TO_ADDR
// end else
49635: GO 49778
// begin for i = 1 to personel do
49637: LD_ADDR_VAR 0 8
49641: PUSH
49642: DOUBLE
49643: LD_INT 1
49645: DEC
49646: ST_TO_ADDR
49647: LD_VAR 0 6
49651: PUSH
49652: FOR_TO
49653: IFFALSE 49776
// begin if i > 4 then
49655: LD_VAR 0 8
49659: PUSH
49660: LD_INT 4
49662: GREATER
49663: IFFALSE 49667
// break ;
49665: GO 49776
// x := personel [ i ] ;
49667: LD_ADDR_VAR 0 13
49671: PUSH
49672: LD_VAR 0 6
49676: PUSH
49677: LD_VAR 0 8
49681: ARRAY
49682: ST_TO_ADDR
// if x = - 1 then
49683: LD_VAR 0 13
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: EQUAL
49692: IFFALSE 49696
// continue ;
49694: GO 49652
// PrepareHuman ( false , i , skill ) ;
49696: LD_INT 0
49698: PPUSH
49699: LD_VAR 0 8
49703: PPUSH
49704: LD_VAR 0 4
49708: PPUSH
49709: CALL_OW 380
// un := CreateHuman ;
49713: LD_ADDR_VAR 0 14
49717: PUSH
49718: CALL_OW 44
49722: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49723: LD_VAR 0 14
49727: PPUSH
49728: LD_VAR 0 1
49732: PPUSH
49733: CALL_OW 250
49737: PPUSH
49738: LD_VAR 0 1
49742: PPUSH
49743: CALL_OW 251
49747: PPUSH
49748: LD_INT 10
49750: PPUSH
49751: LD_INT 0
49753: PPUSH
49754: CALL_OW 50
// result := result ^ un ;
49758: LD_ADDR_VAR 0 7
49762: PUSH
49763: LD_VAR 0 7
49767: PUSH
49768: LD_VAR 0 14
49772: ADD
49773: ST_TO_ADDR
// end ;
49774: GO 49652
49776: POP
49777: POP
// end ; end ;
49778: LD_VAR 0 7
49782: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49783: LD_INT 0
49785: PPUSH
49786: PPUSH
49787: PPUSH
49788: PPUSH
49789: PPUSH
49790: PPUSH
49791: PPUSH
49792: PPUSH
49793: PPUSH
49794: PPUSH
49795: PPUSH
49796: PPUSH
49797: PPUSH
49798: PPUSH
49799: PPUSH
49800: PPUSH
// result := false ;
49801: LD_ADDR_VAR 0 3
49805: PUSH
49806: LD_INT 0
49808: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49809: LD_VAR 0 1
49813: NOT
49814: PUSH
49815: LD_VAR 0 1
49819: PPUSH
49820: CALL_OW 266
49824: PUSH
49825: LD_INT 32
49827: PUSH
49828: LD_INT 33
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: IN
49835: NOT
49836: OR
49837: IFFALSE 49841
// exit ;
49839: GO 50950
// nat := GetNation ( tower ) ;
49841: LD_ADDR_VAR 0 12
49845: PUSH
49846: LD_VAR 0 1
49850: PPUSH
49851: CALL_OW 248
49855: ST_TO_ADDR
// side := GetSide ( tower ) ;
49856: LD_ADDR_VAR 0 16
49860: PUSH
49861: LD_VAR 0 1
49865: PPUSH
49866: CALL_OW 255
49870: ST_TO_ADDR
// x := GetX ( tower ) ;
49871: LD_ADDR_VAR 0 10
49875: PUSH
49876: LD_VAR 0 1
49880: PPUSH
49881: CALL_OW 250
49885: ST_TO_ADDR
// y := GetY ( tower ) ;
49886: LD_ADDR_VAR 0 11
49890: PUSH
49891: LD_VAR 0 1
49895: PPUSH
49896: CALL_OW 251
49900: ST_TO_ADDR
// if not x or not y then
49901: LD_VAR 0 10
49905: NOT
49906: PUSH
49907: LD_VAR 0 11
49911: NOT
49912: OR
49913: IFFALSE 49917
// exit ;
49915: GO 50950
// weapon := 0 ;
49917: LD_ADDR_VAR 0 18
49921: PUSH
49922: LD_INT 0
49924: ST_TO_ADDR
// fac_list := [ ] ;
49925: LD_ADDR_VAR 0 17
49929: PUSH
49930: EMPTY
49931: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49932: LD_ADDR_VAR 0 6
49936: PUSH
49937: LD_VAR 0 1
49941: PPUSH
49942: CALL_OW 274
49946: PPUSH
49947: LD_VAR 0 2
49951: PPUSH
49952: LD_INT 0
49954: PPUSH
49955: CALL 47521 0 3
49959: PPUSH
49960: LD_INT 30
49962: PUSH
49963: LD_INT 3
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PPUSH
49970: CALL_OW 72
49974: ST_TO_ADDR
// if not factories then
49975: LD_VAR 0 6
49979: NOT
49980: IFFALSE 49984
// exit ;
49982: GO 50950
// for i in factories do
49984: LD_ADDR_VAR 0 8
49988: PUSH
49989: LD_VAR 0 6
49993: PUSH
49994: FOR_IN
49995: IFFALSE 50020
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49997: LD_ADDR_VAR 0 17
50001: PUSH
50002: LD_VAR 0 17
50006: PUSH
50007: LD_VAR 0 8
50011: PPUSH
50012: CALL_OW 478
50016: UNION
50017: ST_TO_ADDR
50018: GO 49994
50020: POP
50021: POP
// if not fac_list then
50022: LD_VAR 0 17
50026: NOT
50027: IFFALSE 50031
// exit ;
50029: GO 50950
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50031: LD_ADDR_VAR 0 5
50035: PUSH
50036: LD_INT 4
50038: PUSH
50039: LD_INT 5
50041: PUSH
50042: LD_INT 9
50044: PUSH
50045: LD_INT 10
50047: PUSH
50048: LD_INT 6
50050: PUSH
50051: LD_INT 7
50053: PUSH
50054: LD_INT 11
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 27
50068: PUSH
50069: LD_INT 28
50071: PUSH
50072: LD_INT 26
50074: PUSH
50075: LD_INT 30
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 43
50086: PUSH
50087: LD_INT 44
50089: PUSH
50090: LD_INT 46
50092: PUSH
50093: LD_INT 45
50095: PUSH
50096: LD_INT 47
50098: PUSH
50099: LD_INT 49
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: LIST
50114: PUSH
50115: LD_VAR 0 12
50119: ARRAY
50120: ST_TO_ADDR
// list := list isect fac_list ;
50121: LD_ADDR_VAR 0 5
50125: PUSH
50126: LD_VAR 0 5
50130: PUSH
50131: LD_VAR 0 17
50135: ISECT
50136: ST_TO_ADDR
// if not list then
50137: LD_VAR 0 5
50141: NOT
50142: IFFALSE 50146
// exit ;
50144: GO 50950
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50146: LD_VAR 0 12
50150: PUSH
50151: LD_INT 3
50153: EQUAL
50154: PUSH
50155: LD_INT 49
50157: PUSH
50158: LD_VAR 0 5
50162: IN
50163: AND
50164: PUSH
50165: LD_INT 31
50167: PPUSH
50168: LD_VAR 0 16
50172: PPUSH
50173: CALL_OW 321
50177: PUSH
50178: LD_INT 2
50180: EQUAL
50181: AND
50182: IFFALSE 50242
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50184: LD_INT 22
50186: PUSH
50187: LD_VAR 0 16
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 35
50198: PUSH
50199: LD_INT 49
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 91
50208: PUSH
50209: LD_VAR 0 1
50213: PUSH
50214: LD_INT 10
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: LIST
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: LIST
50226: PPUSH
50227: CALL_OW 69
50231: NOT
50232: IFFALSE 50242
// weapon := ru_time_lapser ;
50234: LD_ADDR_VAR 0 18
50238: PUSH
50239: LD_INT 49
50241: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50242: LD_VAR 0 12
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: IN
50257: PUSH
50258: LD_INT 11
50260: PUSH
50261: LD_VAR 0 5
50265: IN
50266: PUSH
50267: LD_INT 30
50269: PUSH
50270: LD_VAR 0 5
50274: IN
50275: OR
50276: AND
50277: PUSH
50278: LD_INT 6
50280: PPUSH
50281: LD_VAR 0 16
50285: PPUSH
50286: CALL_OW 321
50290: PUSH
50291: LD_INT 2
50293: EQUAL
50294: AND
50295: IFFALSE 50460
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50297: LD_INT 22
50299: PUSH
50300: LD_VAR 0 16
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 2
50311: PUSH
50312: LD_INT 35
50314: PUSH
50315: LD_INT 11
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 35
50324: PUSH
50325: LD_INT 30
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 91
50339: PUSH
50340: LD_VAR 0 1
50344: PUSH
50345: LD_INT 18
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: LIST
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: LIST
50357: PPUSH
50358: CALL_OW 69
50362: NOT
50363: PUSH
50364: LD_INT 22
50366: PUSH
50367: LD_VAR 0 16
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 2
50378: PUSH
50379: LD_INT 30
50381: PUSH
50382: LD_INT 32
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 30
50391: PUSH
50392: LD_INT 33
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 91
50406: PUSH
50407: LD_VAR 0 1
50411: PUSH
50412: LD_INT 12
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: LIST
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: LIST
50424: PUSH
50425: EMPTY
50426: LIST
50427: PPUSH
50428: CALL_OW 69
50432: PUSH
50433: LD_INT 2
50435: GREATER
50436: AND
50437: IFFALSE 50460
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50439: LD_ADDR_VAR 0 18
50443: PUSH
50444: LD_INT 11
50446: PUSH
50447: LD_INT 30
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_VAR 0 12
50458: ARRAY
50459: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50460: LD_VAR 0 18
50464: NOT
50465: PUSH
50466: LD_INT 40
50468: PPUSH
50469: LD_VAR 0 16
50473: PPUSH
50474: CALL_OW 321
50478: PUSH
50479: LD_INT 2
50481: EQUAL
50482: AND
50483: PUSH
50484: LD_INT 7
50486: PUSH
50487: LD_VAR 0 5
50491: IN
50492: PUSH
50493: LD_INT 28
50495: PUSH
50496: LD_VAR 0 5
50500: IN
50501: OR
50502: PUSH
50503: LD_INT 45
50505: PUSH
50506: LD_VAR 0 5
50510: IN
50511: OR
50512: AND
50513: IFFALSE 50767
// begin hex := GetHexInfo ( x , y ) ;
50515: LD_ADDR_VAR 0 4
50519: PUSH
50520: LD_VAR 0 10
50524: PPUSH
50525: LD_VAR 0 11
50529: PPUSH
50530: CALL_OW 546
50534: ST_TO_ADDR
// if hex [ 1 ] then
50535: LD_VAR 0 4
50539: PUSH
50540: LD_INT 1
50542: ARRAY
50543: IFFALSE 50547
// exit ;
50545: GO 50950
// height := hex [ 2 ] ;
50547: LD_ADDR_VAR 0 15
50551: PUSH
50552: LD_VAR 0 4
50556: PUSH
50557: LD_INT 2
50559: ARRAY
50560: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50561: LD_ADDR_VAR 0 14
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 2
50571: PUSH
50572: LD_INT 3
50574: PUSH
50575: LD_INT 5
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: ST_TO_ADDR
// for i in tmp do
50584: LD_ADDR_VAR 0 8
50588: PUSH
50589: LD_VAR 0 14
50593: PUSH
50594: FOR_IN
50595: IFFALSE 50765
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50597: LD_ADDR_VAR 0 9
50601: PUSH
50602: LD_VAR 0 10
50606: PPUSH
50607: LD_VAR 0 8
50611: PPUSH
50612: LD_INT 5
50614: PPUSH
50615: CALL_OW 272
50619: PUSH
50620: LD_VAR 0 11
50624: PPUSH
50625: LD_VAR 0 8
50629: PPUSH
50630: LD_INT 5
50632: PPUSH
50633: CALL_OW 273
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50642: LD_VAR 0 9
50646: PUSH
50647: LD_INT 1
50649: ARRAY
50650: PPUSH
50651: LD_VAR 0 9
50655: PUSH
50656: LD_INT 2
50658: ARRAY
50659: PPUSH
50660: CALL_OW 488
50664: IFFALSE 50763
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50666: LD_ADDR_VAR 0 4
50670: PUSH
50671: LD_VAR 0 9
50675: PUSH
50676: LD_INT 1
50678: ARRAY
50679: PPUSH
50680: LD_VAR 0 9
50684: PUSH
50685: LD_INT 2
50687: ARRAY
50688: PPUSH
50689: CALL_OW 546
50693: ST_TO_ADDR
// if hex [ 1 ] then
50694: LD_VAR 0 4
50698: PUSH
50699: LD_INT 1
50701: ARRAY
50702: IFFALSE 50706
// continue ;
50704: GO 50594
// h := hex [ 2 ] ;
50706: LD_ADDR_VAR 0 13
50710: PUSH
50711: LD_VAR 0 4
50715: PUSH
50716: LD_INT 2
50718: ARRAY
50719: ST_TO_ADDR
// if h + 7 < height then
50720: LD_VAR 0 13
50724: PUSH
50725: LD_INT 7
50727: PLUS
50728: PUSH
50729: LD_VAR 0 15
50733: LESS
50734: IFFALSE 50763
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50736: LD_ADDR_VAR 0 18
50740: PUSH
50741: LD_INT 7
50743: PUSH
50744: LD_INT 28
50746: PUSH
50747: LD_INT 45
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: LIST
50754: PUSH
50755: LD_VAR 0 12
50759: ARRAY
50760: ST_TO_ADDR
// break ;
50761: GO 50765
// end ; end ; end ;
50763: GO 50594
50765: POP
50766: POP
// end ; if not weapon then
50767: LD_VAR 0 18
50771: NOT
50772: IFFALSE 50832
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50774: LD_ADDR_VAR 0 5
50778: PUSH
50779: LD_VAR 0 5
50783: PUSH
50784: LD_INT 11
50786: PUSH
50787: LD_INT 30
50789: PUSH
50790: LD_INT 49
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: LIST
50797: DIFF
50798: ST_TO_ADDR
// if not list then
50799: LD_VAR 0 5
50803: NOT
50804: IFFALSE 50808
// exit ;
50806: GO 50950
// weapon := list [ rand ( 1 , list ) ] ;
50808: LD_ADDR_VAR 0 18
50812: PUSH
50813: LD_VAR 0 5
50817: PUSH
50818: LD_INT 1
50820: PPUSH
50821: LD_VAR 0 5
50825: PPUSH
50826: CALL_OW 12
50830: ARRAY
50831: ST_TO_ADDR
// end ; if weapon then
50832: LD_VAR 0 18
50836: IFFALSE 50950
// begin tmp := CostOfWeapon ( weapon ) ;
50838: LD_ADDR_VAR 0 14
50842: PUSH
50843: LD_VAR 0 18
50847: PPUSH
50848: CALL_OW 451
50852: ST_TO_ADDR
// j := GetBase ( tower ) ;
50853: LD_ADDR_VAR 0 9
50857: PUSH
50858: LD_VAR 0 1
50862: PPUSH
50863: CALL_OW 274
50867: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50868: LD_VAR 0 9
50872: PPUSH
50873: LD_INT 1
50875: PPUSH
50876: CALL_OW 275
50880: PUSH
50881: LD_VAR 0 14
50885: PUSH
50886: LD_INT 1
50888: ARRAY
50889: GREATEREQUAL
50890: PUSH
50891: LD_VAR 0 9
50895: PPUSH
50896: LD_INT 2
50898: PPUSH
50899: CALL_OW 275
50903: PUSH
50904: LD_VAR 0 14
50908: PUSH
50909: LD_INT 2
50911: ARRAY
50912: GREATEREQUAL
50913: AND
50914: PUSH
50915: LD_VAR 0 9
50919: PPUSH
50920: LD_INT 3
50922: PPUSH
50923: CALL_OW 275
50927: PUSH
50928: LD_VAR 0 14
50932: PUSH
50933: LD_INT 3
50935: ARRAY
50936: GREATEREQUAL
50937: AND
50938: IFFALSE 50950
// result := weapon ;
50940: LD_ADDR_VAR 0 3
50944: PUSH
50945: LD_VAR 0 18
50949: ST_TO_ADDR
// end ; end ;
50950: LD_VAR 0 3
50954: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50955: LD_INT 0
50957: PPUSH
50958: PPUSH
// result := true ;
50959: LD_ADDR_VAR 0 3
50963: PUSH
50964: LD_INT 1
50966: ST_TO_ADDR
// if array1 = array2 then
50967: LD_VAR 0 1
50971: PUSH
50972: LD_VAR 0 2
50976: EQUAL
50977: IFFALSE 51037
// begin for i = 1 to array1 do
50979: LD_ADDR_VAR 0 4
50983: PUSH
50984: DOUBLE
50985: LD_INT 1
50987: DEC
50988: ST_TO_ADDR
50989: LD_VAR 0 1
50993: PUSH
50994: FOR_TO
50995: IFFALSE 51033
// if array1 [ i ] <> array2 [ i ] then
50997: LD_VAR 0 1
51001: PUSH
51002: LD_VAR 0 4
51006: ARRAY
51007: PUSH
51008: LD_VAR 0 2
51012: PUSH
51013: LD_VAR 0 4
51017: ARRAY
51018: NONEQUAL
51019: IFFALSE 51031
// begin result := false ;
51021: LD_ADDR_VAR 0 3
51025: PUSH
51026: LD_INT 0
51028: ST_TO_ADDR
// break ;
51029: GO 51033
// end ;
51031: GO 50994
51033: POP
51034: POP
// end else
51035: GO 51045
// result := false ;
51037: LD_ADDR_VAR 0 3
51041: PUSH
51042: LD_INT 0
51044: ST_TO_ADDR
// end ;
51045: LD_VAR 0 3
51049: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51050: LD_INT 0
51052: PPUSH
51053: PPUSH
// if not array1 or not array2 then
51054: LD_VAR 0 1
51058: NOT
51059: PUSH
51060: LD_VAR 0 2
51064: NOT
51065: OR
51066: IFFALSE 51070
// exit ;
51068: GO 51134
// result := true ;
51070: LD_ADDR_VAR 0 3
51074: PUSH
51075: LD_INT 1
51077: ST_TO_ADDR
// for i = 1 to array1 do
51078: LD_ADDR_VAR 0 4
51082: PUSH
51083: DOUBLE
51084: LD_INT 1
51086: DEC
51087: ST_TO_ADDR
51088: LD_VAR 0 1
51092: PUSH
51093: FOR_TO
51094: IFFALSE 51132
// if array1 [ i ] <> array2 [ i ] then
51096: LD_VAR 0 1
51100: PUSH
51101: LD_VAR 0 4
51105: ARRAY
51106: PUSH
51107: LD_VAR 0 2
51111: PUSH
51112: LD_VAR 0 4
51116: ARRAY
51117: NONEQUAL
51118: IFFALSE 51130
// begin result := false ;
51120: LD_ADDR_VAR 0 3
51124: PUSH
51125: LD_INT 0
51127: ST_TO_ADDR
// break ;
51128: GO 51132
// end ;
51130: GO 51093
51132: POP
51133: POP
// end ;
51134: LD_VAR 0 3
51138: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51139: LD_INT 0
51141: PPUSH
51142: PPUSH
51143: PPUSH
// pom := GetBase ( fac ) ;
51144: LD_ADDR_VAR 0 5
51148: PUSH
51149: LD_VAR 0 1
51153: PPUSH
51154: CALL_OW 274
51158: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51159: LD_ADDR_VAR 0 4
51163: PUSH
51164: LD_VAR 0 2
51168: PUSH
51169: LD_INT 1
51171: ARRAY
51172: PPUSH
51173: LD_VAR 0 2
51177: PUSH
51178: LD_INT 2
51180: ARRAY
51181: PPUSH
51182: LD_VAR 0 2
51186: PUSH
51187: LD_INT 3
51189: ARRAY
51190: PPUSH
51191: LD_VAR 0 2
51195: PUSH
51196: LD_INT 4
51198: ARRAY
51199: PPUSH
51200: CALL_OW 449
51204: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51205: LD_ADDR_VAR 0 3
51209: PUSH
51210: LD_VAR 0 5
51214: PPUSH
51215: LD_INT 1
51217: PPUSH
51218: CALL_OW 275
51222: PUSH
51223: LD_VAR 0 4
51227: PUSH
51228: LD_INT 1
51230: ARRAY
51231: GREATEREQUAL
51232: PUSH
51233: LD_VAR 0 5
51237: PPUSH
51238: LD_INT 2
51240: PPUSH
51241: CALL_OW 275
51245: PUSH
51246: LD_VAR 0 4
51250: PUSH
51251: LD_INT 2
51253: ARRAY
51254: GREATEREQUAL
51255: AND
51256: PUSH
51257: LD_VAR 0 5
51261: PPUSH
51262: LD_INT 3
51264: PPUSH
51265: CALL_OW 275
51269: PUSH
51270: LD_VAR 0 4
51274: PUSH
51275: LD_INT 3
51277: ARRAY
51278: GREATEREQUAL
51279: AND
51280: ST_TO_ADDR
// end ;
51281: LD_VAR 0 3
51285: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51286: LD_INT 0
51288: PPUSH
51289: PPUSH
51290: PPUSH
51291: PPUSH
// pom := GetBase ( building ) ;
51292: LD_ADDR_VAR 0 3
51296: PUSH
51297: LD_VAR 0 1
51301: PPUSH
51302: CALL_OW 274
51306: ST_TO_ADDR
// if not pom then
51307: LD_VAR 0 3
51311: NOT
51312: IFFALSE 51316
// exit ;
51314: GO 51486
// btype := GetBType ( building ) ;
51316: LD_ADDR_VAR 0 5
51320: PUSH
51321: LD_VAR 0 1
51325: PPUSH
51326: CALL_OW 266
51330: ST_TO_ADDR
// if btype = b_armoury then
51331: LD_VAR 0 5
51335: PUSH
51336: LD_INT 4
51338: EQUAL
51339: IFFALSE 51349
// btype := b_barracks ;
51341: LD_ADDR_VAR 0 5
51345: PUSH
51346: LD_INT 5
51348: ST_TO_ADDR
// if btype = b_depot then
51349: LD_VAR 0 5
51353: PUSH
51354: LD_INT 0
51356: EQUAL
51357: IFFALSE 51367
// btype := b_warehouse ;
51359: LD_ADDR_VAR 0 5
51363: PUSH
51364: LD_INT 1
51366: ST_TO_ADDR
// if btype = b_workshop then
51367: LD_VAR 0 5
51371: PUSH
51372: LD_INT 2
51374: EQUAL
51375: IFFALSE 51385
// btype := b_factory ;
51377: LD_ADDR_VAR 0 5
51381: PUSH
51382: LD_INT 3
51384: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51385: LD_ADDR_VAR 0 4
51389: PUSH
51390: LD_VAR 0 5
51394: PPUSH
51395: LD_VAR 0 1
51399: PPUSH
51400: CALL_OW 248
51404: PPUSH
51405: CALL_OW 450
51409: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51410: LD_ADDR_VAR 0 2
51414: PUSH
51415: LD_VAR 0 3
51419: PPUSH
51420: LD_INT 1
51422: PPUSH
51423: CALL_OW 275
51427: PUSH
51428: LD_VAR 0 4
51432: PUSH
51433: LD_INT 1
51435: ARRAY
51436: GREATEREQUAL
51437: PUSH
51438: LD_VAR 0 3
51442: PPUSH
51443: LD_INT 2
51445: PPUSH
51446: CALL_OW 275
51450: PUSH
51451: LD_VAR 0 4
51455: PUSH
51456: LD_INT 2
51458: ARRAY
51459: GREATEREQUAL
51460: AND
51461: PUSH
51462: LD_VAR 0 3
51466: PPUSH
51467: LD_INT 3
51469: PPUSH
51470: CALL_OW 275
51474: PUSH
51475: LD_VAR 0 4
51479: PUSH
51480: LD_INT 3
51482: ARRAY
51483: GREATEREQUAL
51484: AND
51485: ST_TO_ADDR
// end ;
51486: LD_VAR 0 2
51490: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51491: LD_INT 0
51493: PPUSH
51494: PPUSH
51495: PPUSH
// pom := GetBase ( building ) ;
51496: LD_ADDR_VAR 0 4
51500: PUSH
51501: LD_VAR 0 1
51505: PPUSH
51506: CALL_OW 274
51510: ST_TO_ADDR
// if not pom then
51511: LD_VAR 0 4
51515: NOT
51516: IFFALSE 51520
// exit ;
51518: GO 51621
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51520: LD_ADDR_VAR 0 5
51524: PUSH
51525: LD_VAR 0 2
51529: PPUSH
51530: LD_VAR 0 1
51534: PPUSH
51535: CALL_OW 248
51539: PPUSH
51540: CALL_OW 450
51544: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51545: LD_ADDR_VAR 0 3
51549: PUSH
51550: LD_VAR 0 4
51554: PPUSH
51555: LD_INT 1
51557: PPUSH
51558: CALL_OW 275
51562: PUSH
51563: LD_VAR 0 5
51567: PUSH
51568: LD_INT 1
51570: ARRAY
51571: GREATEREQUAL
51572: PUSH
51573: LD_VAR 0 4
51577: PPUSH
51578: LD_INT 2
51580: PPUSH
51581: CALL_OW 275
51585: PUSH
51586: LD_VAR 0 5
51590: PUSH
51591: LD_INT 2
51593: ARRAY
51594: GREATEREQUAL
51595: AND
51596: PUSH
51597: LD_VAR 0 4
51601: PPUSH
51602: LD_INT 3
51604: PPUSH
51605: CALL_OW 275
51609: PUSH
51610: LD_VAR 0 5
51614: PUSH
51615: LD_INT 3
51617: ARRAY
51618: GREATEREQUAL
51619: AND
51620: ST_TO_ADDR
// end ;
51621: LD_VAR 0 3
51625: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51626: LD_INT 0
51628: PPUSH
51629: PPUSH
51630: PPUSH
51631: PPUSH
51632: PPUSH
51633: PPUSH
51634: PPUSH
51635: PPUSH
51636: PPUSH
51637: PPUSH
51638: PPUSH
// result := false ;
51639: LD_ADDR_VAR 0 8
51643: PUSH
51644: LD_INT 0
51646: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51647: LD_VAR 0 5
51651: NOT
51652: PUSH
51653: LD_VAR 0 1
51657: NOT
51658: OR
51659: PUSH
51660: LD_VAR 0 2
51664: NOT
51665: OR
51666: PUSH
51667: LD_VAR 0 3
51671: NOT
51672: OR
51673: IFFALSE 51677
// exit ;
51675: GO 52491
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51677: LD_ADDR_VAR 0 14
51681: PUSH
51682: LD_VAR 0 1
51686: PPUSH
51687: LD_VAR 0 2
51691: PPUSH
51692: LD_VAR 0 3
51696: PPUSH
51697: LD_VAR 0 4
51701: PPUSH
51702: LD_VAR 0 5
51706: PUSH
51707: LD_INT 1
51709: ARRAY
51710: PPUSH
51711: CALL_OW 248
51715: PPUSH
51716: LD_INT 0
51718: PPUSH
51719: CALL 53744 0 6
51723: ST_TO_ADDR
// if not hexes then
51724: LD_VAR 0 14
51728: NOT
51729: IFFALSE 51733
// exit ;
51731: GO 52491
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51733: LD_ADDR_VAR 0 17
51737: PUSH
51738: LD_VAR 0 5
51742: PPUSH
51743: LD_INT 22
51745: PUSH
51746: LD_VAR 0 13
51750: PPUSH
51751: CALL_OW 255
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 2
51762: PUSH
51763: LD_INT 30
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 30
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: LIST
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PPUSH
51792: CALL_OW 72
51796: ST_TO_ADDR
// for i = 1 to hexes do
51797: LD_ADDR_VAR 0 9
51801: PUSH
51802: DOUBLE
51803: LD_INT 1
51805: DEC
51806: ST_TO_ADDR
51807: LD_VAR 0 14
51811: PUSH
51812: FOR_TO
51813: IFFALSE 52489
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51815: LD_ADDR_VAR 0 13
51819: PUSH
51820: LD_VAR 0 14
51824: PUSH
51825: LD_VAR 0 9
51829: ARRAY
51830: PUSH
51831: LD_INT 1
51833: ARRAY
51834: PPUSH
51835: LD_VAR 0 14
51839: PUSH
51840: LD_VAR 0 9
51844: ARRAY
51845: PUSH
51846: LD_INT 2
51848: ARRAY
51849: PPUSH
51850: CALL_OW 428
51854: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51855: LD_VAR 0 14
51859: PUSH
51860: LD_VAR 0 9
51864: ARRAY
51865: PUSH
51866: LD_INT 1
51868: ARRAY
51869: PPUSH
51870: LD_VAR 0 14
51874: PUSH
51875: LD_VAR 0 9
51879: ARRAY
51880: PUSH
51881: LD_INT 2
51883: ARRAY
51884: PPUSH
51885: CALL_OW 351
51889: PUSH
51890: LD_VAR 0 14
51894: PUSH
51895: LD_VAR 0 9
51899: ARRAY
51900: PUSH
51901: LD_INT 1
51903: ARRAY
51904: PPUSH
51905: LD_VAR 0 14
51909: PUSH
51910: LD_VAR 0 9
51914: ARRAY
51915: PUSH
51916: LD_INT 2
51918: ARRAY
51919: PPUSH
51920: CALL_OW 488
51924: NOT
51925: OR
51926: PUSH
51927: LD_VAR 0 13
51931: PPUSH
51932: CALL_OW 247
51936: PUSH
51937: LD_INT 3
51939: EQUAL
51940: OR
51941: IFFALSE 51947
// exit ;
51943: POP
51944: POP
51945: GO 52491
// if not tmp then
51947: LD_VAR 0 13
51951: NOT
51952: IFFALSE 51956
// continue ;
51954: GO 51812
// result := true ;
51956: LD_ADDR_VAR 0 8
51960: PUSH
51961: LD_INT 1
51963: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51964: LD_VAR 0 6
51968: PUSH
51969: LD_VAR 0 13
51973: PPUSH
51974: CALL_OW 247
51978: PUSH
51979: LD_INT 2
51981: EQUAL
51982: AND
51983: PUSH
51984: LD_VAR 0 13
51988: PPUSH
51989: CALL_OW 263
51993: PUSH
51994: LD_INT 1
51996: EQUAL
51997: AND
51998: IFFALSE 52162
// begin if IsDrivenBy ( tmp ) then
52000: LD_VAR 0 13
52004: PPUSH
52005: CALL_OW 311
52009: IFFALSE 52013
// continue ;
52011: GO 51812
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52013: LD_VAR 0 6
52017: PPUSH
52018: LD_INT 3
52020: PUSH
52021: LD_INT 60
52023: PUSH
52024: EMPTY
52025: LIST
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 3
52033: PUSH
52034: LD_INT 55
52036: PUSH
52037: EMPTY
52038: LIST
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PPUSH
52048: CALL_OW 72
52052: IFFALSE 52160
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52054: LD_ADDR_VAR 0 18
52058: PUSH
52059: LD_VAR 0 6
52063: PPUSH
52064: LD_INT 3
52066: PUSH
52067: LD_INT 60
52069: PUSH
52070: EMPTY
52071: LIST
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 3
52079: PUSH
52080: LD_INT 55
52082: PUSH
52083: EMPTY
52084: LIST
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PPUSH
52094: CALL_OW 72
52098: PUSH
52099: LD_INT 1
52101: ARRAY
52102: ST_TO_ADDR
// if IsInUnit ( driver ) then
52103: LD_VAR 0 18
52107: PPUSH
52108: CALL_OW 310
52112: IFFALSE 52123
// ComExit ( driver ) ;
52114: LD_VAR 0 18
52118: PPUSH
52119: CALL 77523 0 1
// AddComEnterUnit ( driver , tmp ) ;
52123: LD_VAR 0 18
52127: PPUSH
52128: LD_VAR 0 13
52132: PPUSH
52133: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52137: LD_VAR 0 18
52141: PPUSH
52142: LD_VAR 0 7
52146: PPUSH
52147: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52151: LD_VAR 0 18
52155: PPUSH
52156: CALL_OW 181
// end ; continue ;
52160: GO 51812
// end ; if not cleaners or not tmp in cleaners then
52162: LD_VAR 0 6
52166: NOT
52167: PUSH
52168: LD_VAR 0 13
52172: PUSH
52173: LD_VAR 0 6
52177: IN
52178: NOT
52179: OR
52180: IFFALSE 52487
// begin if dep then
52182: LD_VAR 0 17
52186: IFFALSE 52322
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52188: LD_ADDR_VAR 0 16
52192: PUSH
52193: LD_VAR 0 17
52197: PUSH
52198: LD_INT 1
52200: ARRAY
52201: PPUSH
52202: CALL_OW 250
52206: PPUSH
52207: LD_VAR 0 17
52211: PUSH
52212: LD_INT 1
52214: ARRAY
52215: PPUSH
52216: CALL_OW 254
52220: PPUSH
52221: LD_INT 5
52223: PPUSH
52224: CALL_OW 272
52228: PUSH
52229: LD_VAR 0 17
52233: PUSH
52234: LD_INT 1
52236: ARRAY
52237: PPUSH
52238: CALL_OW 251
52242: PPUSH
52243: LD_VAR 0 17
52247: PUSH
52248: LD_INT 1
52250: ARRAY
52251: PPUSH
52252: CALL_OW 254
52256: PPUSH
52257: LD_INT 5
52259: PPUSH
52260: CALL_OW 273
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52269: LD_VAR 0 16
52273: PUSH
52274: LD_INT 1
52276: ARRAY
52277: PPUSH
52278: LD_VAR 0 16
52282: PUSH
52283: LD_INT 2
52285: ARRAY
52286: PPUSH
52287: CALL_OW 488
52291: IFFALSE 52322
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52293: LD_VAR 0 13
52297: PPUSH
52298: LD_VAR 0 16
52302: PUSH
52303: LD_INT 1
52305: ARRAY
52306: PPUSH
52307: LD_VAR 0 16
52311: PUSH
52312: LD_INT 2
52314: ARRAY
52315: PPUSH
52316: CALL_OW 111
// continue ;
52320: GO 51812
// end ; end ; r := GetDir ( tmp ) ;
52322: LD_ADDR_VAR 0 15
52326: PUSH
52327: LD_VAR 0 13
52331: PPUSH
52332: CALL_OW 254
52336: ST_TO_ADDR
// if r = 5 then
52337: LD_VAR 0 15
52341: PUSH
52342: LD_INT 5
52344: EQUAL
52345: IFFALSE 52355
// r := 0 ;
52347: LD_ADDR_VAR 0 15
52351: PUSH
52352: LD_INT 0
52354: ST_TO_ADDR
// for j = r to 5 do
52355: LD_ADDR_VAR 0 10
52359: PUSH
52360: DOUBLE
52361: LD_VAR 0 15
52365: DEC
52366: ST_TO_ADDR
52367: LD_INT 5
52369: PUSH
52370: FOR_TO
52371: IFFALSE 52485
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52373: LD_ADDR_VAR 0 11
52377: PUSH
52378: LD_VAR 0 13
52382: PPUSH
52383: CALL_OW 250
52387: PPUSH
52388: LD_VAR 0 10
52392: PPUSH
52393: LD_INT 2
52395: PPUSH
52396: CALL_OW 272
52400: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52401: LD_ADDR_VAR 0 12
52405: PUSH
52406: LD_VAR 0 13
52410: PPUSH
52411: CALL_OW 251
52415: PPUSH
52416: LD_VAR 0 10
52420: PPUSH
52421: LD_INT 2
52423: PPUSH
52424: CALL_OW 273
52428: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52429: LD_VAR 0 11
52433: PPUSH
52434: LD_VAR 0 12
52438: PPUSH
52439: CALL_OW 488
52443: PUSH
52444: LD_VAR 0 11
52448: PPUSH
52449: LD_VAR 0 12
52453: PPUSH
52454: CALL_OW 428
52458: NOT
52459: AND
52460: IFFALSE 52483
// begin ComMoveXY ( tmp , _x , _y ) ;
52462: LD_VAR 0 13
52466: PPUSH
52467: LD_VAR 0 11
52471: PPUSH
52472: LD_VAR 0 12
52476: PPUSH
52477: CALL_OW 111
// break ;
52481: GO 52485
// end ; end ;
52483: GO 52370
52485: POP
52486: POP
// end ; end ;
52487: GO 51812
52489: POP
52490: POP
// end ;
52491: LD_VAR 0 8
52495: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52496: LD_INT 0
52498: PPUSH
// result := true ;
52499: LD_ADDR_VAR 0 3
52503: PUSH
52504: LD_INT 1
52506: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52507: LD_VAR 0 2
52511: PUSH
52512: LD_INT 24
52514: DOUBLE
52515: EQUAL
52516: IFTRUE 52526
52518: LD_INT 33
52520: DOUBLE
52521: EQUAL
52522: IFTRUE 52526
52524: GO 52551
52526: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52527: LD_ADDR_VAR 0 3
52531: PUSH
52532: LD_INT 32
52534: PPUSH
52535: LD_VAR 0 1
52539: PPUSH
52540: CALL_OW 321
52544: PUSH
52545: LD_INT 2
52547: EQUAL
52548: ST_TO_ADDR
52549: GO 52867
52551: LD_INT 20
52553: DOUBLE
52554: EQUAL
52555: IFTRUE 52559
52557: GO 52584
52559: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52560: LD_ADDR_VAR 0 3
52564: PUSH
52565: LD_INT 6
52567: PPUSH
52568: LD_VAR 0 1
52572: PPUSH
52573: CALL_OW 321
52577: PUSH
52578: LD_INT 2
52580: EQUAL
52581: ST_TO_ADDR
52582: GO 52867
52584: LD_INT 22
52586: DOUBLE
52587: EQUAL
52588: IFTRUE 52598
52590: LD_INT 36
52592: DOUBLE
52593: EQUAL
52594: IFTRUE 52598
52596: GO 52623
52598: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52599: LD_ADDR_VAR 0 3
52603: PUSH
52604: LD_INT 15
52606: PPUSH
52607: LD_VAR 0 1
52611: PPUSH
52612: CALL_OW 321
52616: PUSH
52617: LD_INT 2
52619: EQUAL
52620: ST_TO_ADDR
52621: GO 52867
52623: LD_INT 30
52625: DOUBLE
52626: EQUAL
52627: IFTRUE 52631
52629: GO 52656
52631: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52632: LD_ADDR_VAR 0 3
52636: PUSH
52637: LD_INT 20
52639: PPUSH
52640: LD_VAR 0 1
52644: PPUSH
52645: CALL_OW 321
52649: PUSH
52650: LD_INT 2
52652: EQUAL
52653: ST_TO_ADDR
52654: GO 52867
52656: LD_INT 28
52658: DOUBLE
52659: EQUAL
52660: IFTRUE 52670
52662: LD_INT 21
52664: DOUBLE
52665: EQUAL
52666: IFTRUE 52670
52668: GO 52695
52670: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52671: LD_ADDR_VAR 0 3
52675: PUSH
52676: LD_INT 21
52678: PPUSH
52679: LD_VAR 0 1
52683: PPUSH
52684: CALL_OW 321
52688: PUSH
52689: LD_INT 2
52691: EQUAL
52692: ST_TO_ADDR
52693: GO 52867
52695: LD_INT 16
52697: DOUBLE
52698: EQUAL
52699: IFTRUE 52703
52701: GO 52728
52703: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52704: LD_ADDR_VAR 0 3
52708: PUSH
52709: LD_INT 84
52711: PPUSH
52712: LD_VAR 0 1
52716: PPUSH
52717: CALL_OW 321
52721: PUSH
52722: LD_INT 2
52724: EQUAL
52725: ST_TO_ADDR
52726: GO 52867
52728: LD_INT 19
52730: DOUBLE
52731: EQUAL
52732: IFTRUE 52742
52734: LD_INT 23
52736: DOUBLE
52737: EQUAL
52738: IFTRUE 52742
52740: GO 52767
52742: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52743: LD_ADDR_VAR 0 3
52747: PUSH
52748: LD_INT 83
52750: PPUSH
52751: LD_VAR 0 1
52755: PPUSH
52756: CALL_OW 321
52760: PUSH
52761: LD_INT 2
52763: EQUAL
52764: ST_TO_ADDR
52765: GO 52867
52767: LD_INT 17
52769: DOUBLE
52770: EQUAL
52771: IFTRUE 52775
52773: GO 52800
52775: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52776: LD_ADDR_VAR 0 3
52780: PUSH
52781: LD_INT 39
52783: PPUSH
52784: LD_VAR 0 1
52788: PPUSH
52789: CALL_OW 321
52793: PUSH
52794: LD_INT 2
52796: EQUAL
52797: ST_TO_ADDR
52798: GO 52867
52800: LD_INT 18
52802: DOUBLE
52803: EQUAL
52804: IFTRUE 52808
52806: GO 52833
52808: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52809: LD_ADDR_VAR 0 3
52813: PUSH
52814: LD_INT 40
52816: PPUSH
52817: LD_VAR 0 1
52821: PPUSH
52822: CALL_OW 321
52826: PUSH
52827: LD_INT 2
52829: EQUAL
52830: ST_TO_ADDR
52831: GO 52867
52833: LD_INT 27
52835: DOUBLE
52836: EQUAL
52837: IFTRUE 52841
52839: GO 52866
52841: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52842: LD_ADDR_VAR 0 3
52846: PUSH
52847: LD_INT 35
52849: PPUSH
52850: LD_VAR 0 1
52854: PPUSH
52855: CALL_OW 321
52859: PUSH
52860: LD_INT 2
52862: EQUAL
52863: ST_TO_ADDR
52864: GO 52867
52866: POP
// end ;
52867: LD_VAR 0 3
52871: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52872: LD_INT 0
52874: PPUSH
52875: PPUSH
52876: PPUSH
52877: PPUSH
52878: PPUSH
52879: PPUSH
52880: PPUSH
52881: PPUSH
52882: PPUSH
52883: PPUSH
52884: PPUSH
// result := false ;
52885: LD_ADDR_VAR 0 6
52889: PUSH
52890: LD_INT 0
52892: ST_TO_ADDR
// if btype = b_depot then
52893: LD_VAR 0 2
52897: PUSH
52898: LD_INT 0
52900: EQUAL
52901: IFFALSE 52913
// begin result := true ;
52903: LD_ADDR_VAR 0 6
52907: PUSH
52908: LD_INT 1
52910: ST_TO_ADDR
// exit ;
52911: GO 53739
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52913: LD_VAR 0 1
52917: NOT
52918: PUSH
52919: LD_VAR 0 1
52923: PPUSH
52924: CALL_OW 266
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: IN
52939: NOT
52940: OR
52941: PUSH
52942: LD_VAR 0 2
52946: NOT
52947: OR
52948: PUSH
52949: LD_VAR 0 5
52953: PUSH
52954: LD_INT 0
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: LD_INT 3
52965: PUSH
52966: LD_INT 4
52968: PUSH
52969: LD_INT 5
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: IN
52980: NOT
52981: OR
52982: PUSH
52983: LD_VAR 0 3
52987: PPUSH
52988: LD_VAR 0 4
52992: PPUSH
52993: CALL_OW 488
52997: NOT
52998: OR
52999: IFFALSE 53003
// exit ;
53001: GO 53739
// side := GetSide ( depot ) ;
53003: LD_ADDR_VAR 0 9
53007: PUSH
53008: LD_VAR 0 1
53012: PPUSH
53013: CALL_OW 255
53017: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53018: LD_VAR 0 9
53022: PPUSH
53023: LD_VAR 0 2
53027: PPUSH
53028: CALL 52496 0 2
53032: NOT
53033: IFFALSE 53037
// exit ;
53035: GO 53739
// pom := GetBase ( depot ) ;
53037: LD_ADDR_VAR 0 10
53041: PUSH
53042: LD_VAR 0 1
53046: PPUSH
53047: CALL_OW 274
53051: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53052: LD_ADDR_VAR 0 11
53056: PUSH
53057: LD_VAR 0 2
53061: PPUSH
53062: LD_VAR 0 1
53066: PPUSH
53067: CALL_OW 248
53071: PPUSH
53072: CALL_OW 450
53076: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53077: LD_VAR 0 10
53081: PPUSH
53082: LD_INT 1
53084: PPUSH
53085: CALL_OW 275
53089: PUSH
53090: LD_VAR 0 11
53094: PUSH
53095: LD_INT 1
53097: ARRAY
53098: GREATEREQUAL
53099: PUSH
53100: LD_VAR 0 10
53104: PPUSH
53105: LD_INT 2
53107: PPUSH
53108: CALL_OW 275
53112: PUSH
53113: LD_VAR 0 11
53117: PUSH
53118: LD_INT 2
53120: ARRAY
53121: GREATEREQUAL
53122: AND
53123: PUSH
53124: LD_VAR 0 10
53128: PPUSH
53129: LD_INT 3
53131: PPUSH
53132: CALL_OW 275
53136: PUSH
53137: LD_VAR 0 11
53141: PUSH
53142: LD_INT 3
53144: ARRAY
53145: GREATEREQUAL
53146: AND
53147: NOT
53148: IFFALSE 53152
// exit ;
53150: GO 53739
// if GetBType ( depot ) = b_depot then
53152: LD_VAR 0 1
53156: PPUSH
53157: CALL_OW 266
53161: PUSH
53162: LD_INT 0
53164: EQUAL
53165: IFFALSE 53177
// dist := 28 else
53167: LD_ADDR_VAR 0 14
53171: PUSH
53172: LD_INT 28
53174: ST_TO_ADDR
53175: GO 53185
// dist := 36 ;
53177: LD_ADDR_VAR 0 14
53181: PUSH
53182: LD_INT 36
53184: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53185: LD_VAR 0 1
53189: PPUSH
53190: LD_VAR 0 3
53194: PPUSH
53195: LD_VAR 0 4
53199: PPUSH
53200: CALL_OW 297
53204: PUSH
53205: LD_VAR 0 14
53209: GREATER
53210: IFFALSE 53214
// exit ;
53212: GO 53739
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53214: LD_ADDR_VAR 0 12
53218: PUSH
53219: LD_VAR 0 2
53223: PPUSH
53224: LD_VAR 0 3
53228: PPUSH
53229: LD_VAR 0 4
53233: PPUSH
53234: LD_VAR 0 5
53238: PPUSH
53239: LD_VAR 0 1
53243: PPUSH
53244: CALL_OW 248
53248: PPUSH
53249: LD_INT 0
53251: PPUSH
53252: CALL 53744 0 6
53256: ST_TO_ADDR
// if not hexes then
53257: LD_VAR 0 12
53261: NOT
53262: IFFALSE 53266
// exit ;
53264: GO 53739
// hex := GetHexInfo ( x , y ) ;
53266: LD_ADDR_VAR 0 15
53270: PUSH
53271: LD_VAR 0 3
53275: PPUSH
53276: LD_VAR 0 4
53280: PPUSH
53281: CALL_OW 546
53285: ST_TO_ADDR
// if hex [ 1 ] then
53286: LD_VAR 0 15
53290: PUSH
53291: LD_INT 1
53293: ARRAY
53294: IFFALSE 53298
// exit ;
53296: GO 53739
// height := hex [ 2 ] ;
53298: LD_ADDR_VAR 0 13
53302: PUSH
53303: LD_VAR 0 15
53307: PUSH
53308: LD_INT 2
53310: ARRAY
53311: ST_TO_ADDR
// for i = 1 to hexes do
53312: LD_ADDR_VAR 0 7
53316: PUSH
53317: DOUBLE
53318: LD_INT 1
53320: DEC
53321: ST_TO_ADDR
53322: LD_VAR 0 12
53326: PUSH
53327: FOR_TO
53328: IFFALSE 53658
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53330: LD_VAR 0 12
53334: PUSH
53335: LD_VAR 0 7
53339: ARRAY
53340: PUSH
53341: LD_INT 1
53343: ARRAY
53344: PPUSH
53345: LD_VAR 0 12
53349: PUSH
53350: LD_VAR 0 7
53354: ARRAY
53355: PUSH
53356: LD_INT 2
53358: ARRAY
53359: PPUSH
53360: CALL_OW 488
53364: NOT
53365: PUSH
53366: LD_VAR 0 12
53370: PUSH
53371: LD_VAR 0 7
53375: ARRAY
53376: PUSH
53377: LD_INT 1
53379: ARRAY
53380: PPUSH
53381: LD_VAR 0 12
53385: PUSH
53386: LD_VAR 0 7
53390: ARRAY
53391: PUSH
53392: LD_INT 2
53394: ARRAY
53395: PPUSH
53396: CALL_OW 428
53400: PUSH
53401: LD_INT 0
53403: GREATER
53404: OR
53405: PUSH
53406: LD_VAR 0 12
53410: PUSH
53411: LD_VAR 0 7
53415: ARRAY
53416: PUSH
53417: LD_INT 1
53419: ARRAY
53420: PPUSH
53421: LD_VAR 0 12
53425: PUSH
53426: LD_VAR 0 7
53430: ARRAY
53431: PUSH
53432: LD_INT 2
53434: ARRAY
53435: PPUSH
53436: CALL_OW 351
53440: OR
53441: IFFALSE 53447
// exit ;
53443: POP
53444: POP
53445: GO 53739
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53447: LD_ADDR_VAR 0 8
53451: PUSH
53452: LD_VAR 0 12
53456: PUSH
53457: LD_VAR 0 7
53461: ARRAY
53462: PUSH
53463: LD_INT 1
53465: ARRAY
53466: PPUSH
53467: LD_VAR 0 12
53471: PUSH
53472: LD_VAR 0 7
53476: ARRAY
53477: PUSH
53478: LD_INT 2
53480: ARRAY
53481: PPUSH
53482: CALL_OW 546
53486: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53487: LD_VAR 0 8
53491: PUSH
53492: LD_INT 1
53494: ARRAY
53495: PUSH
53496: LD_VAR 0 8
53500: PUSH
53501: LD_INT 2
53503: ARRAY
53504: PUSH
53505: LD_VAR 0 13
53509: PUSH
53510: LD_INT 2
53512: PLUS
53513: GREATER
53514: OR
53515: PUSH
53516: LD_VAR 0 8
53520: PUSH
53521: LD_INT 2
53523: ARRAY
53524: PUSH
53525: LD_VAR 0 13
53529: PUSH
53530: LD_INT 2
53532: MINUS
53533: LESS
53534: OR
53535: PUSH
53536: LD_VAR 0 8
53540: PUSH
53541: LD_INT 3
53543: ARRAY
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 8
53550: PUSH
53551: LD_INT 9
53553: PUSH
53554: LD_INT 10
53556: PUSH
53557: LD_INT 11
53559: PUSH
53560: LD_INT 12
53562: PUSH
53563: LD_INT 13
53565: PUSH
53566: LD_INT 16
53568: PUSH
53569: LD_INT 17
53571: PUSH
53572: LD_INT 18
53574: PUSH
53575: LD_INT 19
53577: PUSH
53578: LD_INT 20
53580: PUSH
53581: LD_INT 21
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: IN
53599: NOT
53600: OR
53601: PUSH
53602: LD_VAR 0 8
53606: PUSH
53607: LD_INT 5
53609: ARRAY
53610: NOT
53611: OR
53612: PUSH
53613: LD_VAR 0 8
53617: PUSH
53618: LD_INT 6
53620: ARRAY
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: LD_INT 2
53627: PUSH
53628: LD_INT 7
53630: PUSH
53631: LD_INT 9
53633: PUSH
53634: LD_INT 10
53636: PUSH
53637: LD_INT 11
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: IN
53648: NOT
53649: OR
53650: IFFALSE 53656
// exit ;
53652: POP
53653: POP
53654: GO 53739
// end ;
53656: GO 53327
53658: POP
53659: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53660: LD_VAR 0 9
53664: PPUSH
53665: LD_VAR 0 3
53669: PPUSH
53670: LD_VAR 0 4
53674: PPUSH
53675: LD_INT 20
53677: PPUSH
53678: CALL 45662 0 4
53682: PUSH
53683: LD_INT 4
53685: ARRAY
53686: IFFALSE 53690
// exit ;
53688: GO 53739
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53690: LD_VAR 0 2
53694: PUSH
53695: LD_INT 29
53697: PUSH
53698: LD_INT 30
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: IN
53705: PUSH
53706: LD_VAR 0 3
53710: PPUSH
53711: LD_VAR 0 4
53715: PPUSH
53716: LD_VAR 0 9
53720: PPUSH
53721: CALL_OW 440
53725: NOT
53726: AND
53727: IFFALSE 53731
// exit ;
53729: GO 53739
// result := true ;
53731: LD_ADDR_VAR 0 6
53735: PUSH
53736: LD_INT 1
53738: ST_TO_ADDR
// end ;
53739: LD_VAR 0 6
53743: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53744: LD_INT 0
53746: PPUSH
53747: PPUSH
53748: PPUSH
53749: PPUSH
53750: PPUSH
53751: PPUSH
53752: PPUSH
53753: PPUSH
53754: PPUSH
53755: PPUSH
53756: PPUSH
53757: PPUSH
53758: PPUSH
53759: PPUSH
53760: PPUSH
53761: PPUSH
53762: PPUSH
53763: PPUSH
53764: PPUSH
53765: PPUSH
53766: PPUSH
53767: PPUSH
53768: PPUSH
53769: PPUSH
53770: PPUSH
53771: PPUSH
53772: PPUSH
53773: PPUSH
53774: PPUSH
53775: PPUSH
53776: PPUSH
53777: PPUSH
53778: PPUSH
53779: PPUSH
53780: PPUSH
53781: PPUSH
53782: PPUSH
53783: PPUSH
53784: PPUSH
53785: PPUSH
53786: PPUSH
53787: PPUSH
53788: PPUSH
53789: PPUSH
53790: PPUSH
53791: PPUSH
53792: PPUSH
53793: PPUSH
53794: PPUSH
53795: PPUSH
53796: PPUSH
53797: PPUSH
53798: PPUSH
53799: PPUSH
53800: PPUSH
53801: PPUSH
53802: PPUSH
53803: PPUSH
// result = [ ] ;
53804: LD_ADDR_VAR 0 7
53808: PUSH
53809: EMPTY
53810: ST_TO_ADDR
// temp_list = [ ] ;
53811: LD_ADDR_VAR 0 9
53815: PUSH
53816: EMPTY
53817: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53818: LD_VAR 0 4
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: LD_INT 3
53834: PUSH
53835: LD_INT 4
53837: PUSH
53838: LD_INT 5
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: IN
53849: NOT
53850: PUSH
53851: LD_VAR 0 1
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: IN
53866: PUSH
53867: LD_VAR 0 5
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: LD_INT 2
53877: PUSH
53878: LD_INT 3
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: LIST
53885: IN
53886: NOT
53887: AND
53888: OR
53889: IFFALSE 53893
// exit ;
53891: GO 72284
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53893: LD_VAR 0 1
53897: PUSH
53898: LD_INT 6
53900: PUSH
53901: LD_INT 7
53903: PUSH
53904: LD_INT 8
53906: PUSH
53907: LD_INT 13
53909: PUSH
53910: LD_INT 12
53912: PUSH
53913: LD_INT 15
53915: PUSH
53916: LD_INT 11
53918: PUSH
53919: LD_INT 14
53921: PUSH
53922: LD_INT 10
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: IN
53936: IFFALSE 53946
// btype = b_lab ;
53938: LD_ADDR_VAR 0 1
53942: PUSH
53943: LD_INT 6
53945: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53946: LD_VAR 0 6
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: LIST
53964: IN
53965: NOT
53966: PUSH
53967: LD_VAR 0 1
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: LD_INT 3
53983: PUSH
53984: LD_INT 6
53986: PUSH
53987: LD_INT 36
53989: PUSH
53990: LD_INT 4
53992: PUSH
53993: LD_INT 5
53995: PUSH
53996: LD_INT 31
53998: PUSH
53999: LD_INT 32
54001: PUSH
54002: LD_INT 33
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: IN
54018: NOT
54019: PUSH
54020: LD_VAR 0 6
54024: PUSH
54025: LD_INT 1
54027: EQUAL
54028: AND
54029: OR
54030: PUSH
54031: LD_VAR 0 1
54035: PUSH
54036: LD_INT 2
54038: PUSH
54039: LD_INT 3
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: IN
54046: NOT
54047: PUSH
54048: LD_VAR 0 6
54052: PUSH
54053: LD_INT 2
54055: EQUAL
54056: AND
54057: OR
54058: IFFALSE 54068
// mode = 0 ;
54060: LD_ADDR_VAR 0 6
54064: PUSH
54065: LD_INT 0
54067: ST_TO_ADDR
// case mode of 0 :
54068: LD_VAR 0 6
54072: PUSH
54073: LD_INT 0
54075: DOUBLE
54076: EQUAL
54077: IFTRUE 54081
54079: GO 65534
54081: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54082: LD_ADDR_VAR 0 11
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: LD_INT 1
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: NEG
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: LD_INT 2
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: LD_INT 2
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: LD_INT 3
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: LD_INT 3
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54275: LD_ADDR_VAR 0 12
54279: PUSH
54280: LD_INT 0
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: NEG
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: LD_INT 1
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 2
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 2
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 2
54409: NEG
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 2
54421: NEG
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 3
54432: NEG
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 3
54443: NEG
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54471: LD_ADDR_VAR 0 13
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: LD_INT 2
54556: NEG
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 2
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 2
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: NEG
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 2
54618: NEG
54619: PUSH
54620: LD_INT 3
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 3
54630: NEG
54631: PUSH
54632: LD_INT 2
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 3
54642: NEG
54643: PUSH
54644: LD_INT 3
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54670: LD_ADDR_VAR 0 14
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: LD_INT 2
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: LD_INT 3
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_INT 3
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: LD_INT 2
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54866: LD_ADDR_VAR 0 15
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 2
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 3
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 3
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55059: LD_ADDR_VAR 0 16
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 0
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: NEG
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 3
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 3
55216: PUSH
55217: LD_INT 3
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 2
55226: PUSH
55227: LD_INT 3
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55252: LD_ADDR_VAR 0 17
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: NEG
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: LD_INT 2
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: LD_INT 2
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 2
55428: NEG
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: NEG
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55482: LD_ADDR_VAR 0 18
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 0
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 1
55563: NEG
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 2
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 2
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 2
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: LD_INT 2
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: LD_INT 2
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: LD_INT 2
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 2
55658: NEG
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: NEG
55682: PUSH
55683: LD_INT 2
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55712: LD_ADDR_VAR 0 19
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 2
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 2
55911: NEG
55912: PUSH
55913: LD_INT 2
55915: NEG
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55942: LD_ADDR_VAR 0 20
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: LD_INT 2
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 2
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 2
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 0
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: LD_INT 2
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56172: LD_ADDR_VAR 0 21
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: LD_INT 2
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: LD_INT 2
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: LD_INT 2
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 2
56359: NEG
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 2
56371: NEG
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56402: LD_ADDR_VAR 0 22
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: LD_INT 2
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 2
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 2
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: LD_INT 2
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: LD_INT 2
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 2
56578: NEG
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56632: LD_ADDR_VAR 0 23
56636: PUSH
56637: LD_INT 0
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: NEG
56702: PUSH
56703: LD_INT 1
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: NEG
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 2
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 2
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: PUSH
56768: LD_INT 2
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 2
56808: NEG
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 2
56831: NEG
56832: PUSH
56833: LD_INT 2
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 2
56843: NEG
56844: PUSH
56845: LD_INT 3
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: LD_INT 3
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: LD_INT 2
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56912: LD_ADDR_VAR 0 24
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: LD_INT 2
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 2
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 2
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 2
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: LD_INT 2
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 2
57088: NEG
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 2
57099: NEG
57100: PUSH
57101: LD_INT 1
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: LD_INT 2
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: LD_INT 2
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 3
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 3
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57188: LD_ADDR_VAR 0 25
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 1
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: LD_INT 1
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 2
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: LD_INT 2
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 2
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 2
57375: NEG
57376: PUSH
57377: LD_INT 1
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: LD_INT 2
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 3
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 3
57409: PUSH
57410: LD_INT 2
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 2
57419: PUSH
57420: LD_INT 3
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: LD_INT 3
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57462: LD_ADDR_VAR 0 26
57466: PUSH
57467: LD_INT 0
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: LD_INT 1
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: LD_INT 1
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: LD_INT 2
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 2
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 2
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 1
57627: NEG
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 2
57638: NEG
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 2
57649: NEG
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: NEG
57662: PUSH
57663: LD_INT 2
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 2
57673: PUSH
57674: LD_INT 3
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: LD_INT 3
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: LD_INT 2
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57738: LD_ADDR_VAR 0 27
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: LD_INT 1
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: LD_INT 1
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: LD_INT 1
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: NEG
57820: PUSH
57821: LD_INT 2
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: LD_INT 2
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: LD_INT 2
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: LD_INT 2
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 2
57914: NEG
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 2
57925: NEG
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 2
57937: NEG
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: LD_INT 2
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 3
57971: NEG
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 3
57983: NEG
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58018: LD_ADDR_VAR 0 28
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: NEG
58100: PUSH
58101: LD_INT 2
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: LD_INT 2
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: LD_INT 1
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 2
58217: NEG
58218: PUSH
58219: LD_INT 2
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: LD_INT 3
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: LD_INT 3
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 3
58253: NEG
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 3
58265: NEG
58266: PUSH
58267: LD_INT 2
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58300: LD_ADDR_VAR 0 29
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: LD_INT 1
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: NEG
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: LD_INT 2
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: LD_INT 2
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 2
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 1
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 2
58466: NEG
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: NEG
58479: PUSH
58480: LD_INT 2
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 2
58490: NEG
58491: PUSH
58492: LD_INT 3
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 2
58502: PUSH
58503: LD_INT 1
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 3
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: LD_INT 3
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: LD_INT 2
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 3
58544: NEG
58545: PUSH
58546: LD_INT 2
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58579: LD_ADDR_VAR 0 30
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: LD_INT 1
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 1
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 0
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: NEG
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: LD_INT 2
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: LD_INT 2
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 2
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 2
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 2
58714: PUSH
58715: LD_INT 2
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 1
58734: NEG
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 2
58745: NEG
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 2
58756: NEG
58757: PUSH
58758: LD_INT 1
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 1
58768: NEG
58769: PUSH
58770: LD_INT 3
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: LD_INT 2
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 3
58791: PUSH
58792: LD_INT 2
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 2
58801: PUSH
58802: LD_INT 3
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 2
58811: NEG
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 3
58822: NEG
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58857: LD_ADDR_VAR 0 31
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: LD_INT 0
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: LD_INT 2
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 2
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: LD_INT 2
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 2
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PUSH
59036: LD_INT 2
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: LD_INT 3
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 3
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: PUSH
59080: LD_INT 3
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 1
59089: NEG
59090: PUSH
59091: LD_INT 2
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 3
59100: NEG
59101: PUSH
59102: LD_INT 2
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59135: LD_ADDR_VAR 0 32
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: LD_INT 1
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 2
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: LD_INT 2
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 2
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: LD_INT 2
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: NEG
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 2
59301: NEG
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 2
59312: NEG
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: NEG
59325: PUSH
59326: LD_INT 3
59328: NEG
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: LD_INT 2
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 3
59347: PUSH
59348: LD_INT 2
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 2
59357: PUSH
59358: LD_INT 3
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 2
59367: NEG
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 3
59378: NEG
59379: PUSH
59380: LD_INT 1
59382: NEG
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59413: LD_ADDR_VAR 0 33
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: LD_INT 0
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: NEG
59495: PUSH
59496: LD_INT 2
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 1
59506: PUSH
59507: LD_INT 1
59509: NEG
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 2
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: LD_INT 2
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: LD_INT 2
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: LD_INT 1
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 2
59568: NEG
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 2
59579: NEG
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 2
59591: NEG
59592: PUSH
59593: LD_INT 2
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 2
59603: NEG
59604: PUSH
59605: LD_INT 3
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 2
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 3
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: LD_INT 3
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: LD_INT 2
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 3
59657: NEG
59658: PUSH
59659: LD_INT 2
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59692: LD_ADDR_VAR 0 34
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: NEG
59774: PUSH
59775: LD_INT 2
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: LD_INT 2
59788: NEG
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: LD_INT 1
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 2
59807: PUSH
59808: LD_INT 1
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: LD_INT 2
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 2
59848: NEG
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 2
59859: NEG
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: LD_INT 2
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: LD_INT 3
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: LD_INT 2
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 3
59906: PUSH
59907: LD_INT 2
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 2
59916: PUSH
59917: LD_INT 3
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: LD_INT 1
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 3
59937: NEG
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59972: LD_ADDR_VAR 0 35
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60084: LD_ADDR_VAR 0 36
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 1
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: LD_INT 2
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: LD_INT 2
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60196: LD_ADDR_VAR 0 37
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: LD_INT 1
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: LD_INT 1
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60308: LD_ADDR_VAR 0 38
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 2
60389: PUSH
60390: LD_INT 1
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 2
60399: NEG
60400: PUSH
60401: LD_INT 1
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60420: LD_ADDR_VAR 0 39
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: LD_INT 1
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: LD_INT 1
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 0
60468: PUSH
60469: LD_INT 1
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: LD_INT 0
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: LD_INT 1
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: LD_INT 2
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60532: LD_ADDR_VAR 0 40
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: LD_INT 0
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: LD_INT 0
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: LD_INT 1
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 0
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 1
60590: NEG
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60644: LD_ADDR_VAR 0 41
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 1
60713: NEG
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 1
60725: NEG
60726: PUSH
60727: LD_INT 2
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 2
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: LD_INT 2
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: LD_INT 1
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: LD_INT 2
60810: NEG
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 2
60822: NEG
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 2
60834: NEG
60835: PUSH
60836: LD_INT 3
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 3
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 3
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 3
60877: PUSH
60878: LD_INT 2
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 3
60887: PUSH
60888: LD_INT 3
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 2
60897: PUSH
60898: LD_INT 3
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 2
60907: NEG
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 3
60918: NEG
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 3
60929: NEG
60930: PUSH
60931: LD_INT 1
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 3
60941: NEG
60942: PUSH
60943: LD_INT 2
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 3
60953: NEG
60954: PUSH
60955: LD_INT 3
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60994: LD_ADDR_VAR 0 42
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 1
61052: NEG
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 1
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: LD_INT 2
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: LD_INT 1
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 2
61109: PUSH
61110: LD_INT 1
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: LD_INT 2
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: LD_INT 2
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 2
61160: NEG
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 2
61172: NEG
61173: PUSH
61174: LD_INT 2
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: NEG
61185: PUSH
61186: LD_INT 3
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 1
61196: NEG
61197: PUSH
61198: LD_INT 3
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: LD_INT 3
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: LD_INT 2
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 3
61230: PUSH
61231: LD_INT 2
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 3
61240: PUSH
61241: LD_INT 3
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 2
61250: PUSH
61251: LD_INT 3
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 1
61260: PUSH
61261: LD_INT 3
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: LD_INT 3
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 1
61280: NEG
61281: PUSH
61282: LD_INT 2
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 3
61291: NEG
61292: PUSH
61293: LD_INT 2
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 3
61303: NEG
61304: PUSH
61305: LD_INT 3
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61344: LD_ADDR_VAR 0 43
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: LD_INT 0
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: LD_INT 1
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 1
61372: PUSH
61373: LD_INT 0
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: LD_INT 1
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 1
61402: NEG
61403: PUSH
61404: LD_INT 0
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 1
61413: NEG
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 1
61425: NEG
61426: PUSH
61427: LD_INT 2
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 0
61437: PUSH
61438: LD_INT 2
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 1
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 2
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 2
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 1
61479: PUSH
61480: LD_INT 2
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: LD_INT 2
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: LD_INT 1
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 2
61510: NEG
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 2
61521: NEG
61522: PUSH
61523: LD_INT 1
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 1
61533: NEG
61534: PUSH
61535: LD_INT 3
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: LD_INT 3
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 1
61556: PUSH
61557: LD_INT 2
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 2
61567: PUSH
61568: LD_INT 1
61570: NEG
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 3
61578: PUSH
61579: LD_INT 0
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 3
61588: PUSH
61589: LD_INT 1
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 3
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: LD_INT 2
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 2
61629: NEG
61630: PUSH
61631: LD_INT 1
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 3
61640: NEG
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 3
61651: NEG
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61692: LD_ADDR_VAR 0 44
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: LD_INT 1
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: NEG
61774: PUSH
61775: LD_INT 2
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: PUSH
61786: LD_INT 1
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 2
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 2
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 2
61816: PUSH
61817: LD_INT 2
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: LD_INT 2
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 2
61847: NEG
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 2
61858: NEG
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: LD_INT 2
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 2
61882: NEG
61883: PUSH
61884: LD_INT 3
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 2
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 3
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 3
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 3
61925: PUSH
61926: LD_INT 2
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 3
61935: PUSH
61936: LD_INT 3
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 2
61945: PUSH
61946: LD_INT 3
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 2
61955: NEG
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 3
61966: NEG
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 3
61977: NEG
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 3
61989: NEG
61990: PUSH
61991: LD_INT 2
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 3
62001: NEG
62002: PUSH
62003: LD_INT 3
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62042: LD_ADDR_VAR 0 45
62046: PUSH
62047: LD_INT 0
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 0
62059: PUSH
62060: LD_INT 1
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: LD_INT 1
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 1
62100: NEG
62101: PUSH
62102: LD_INT 0
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: LD_INT 1
62115: NEG
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 1
62123: NEG
62124: PUSH
62125: LD_INT 2
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: LD_INT 2
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: LD_INT 1
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 2
62157: PUSH
62158: LD_INT 1
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 2
62167: PUSH
62168: LD_INT 2
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: LD_INT 2
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 1
62197: NEG
62198: PUSH
62199: LD_INT 1
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: PUSH
62206: LD_INT 2
62208: NEG
62209: PUSH
62210: LD_INT 1
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 2
62220: NEG
62221: PUSH
62222: LD_INT 2
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 2
62232: NEG
62233: PUSH
62234: LD_INT 3
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 1
62244: NEG
62245: PUSH
62246: LD_INT 3
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: LD_INT 3
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: LD_INT 2
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 3
62278: PUSH
62279: LD_INT 2
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 3
62288: PUSH
62289: LD_INT 3
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 2
62298: PUSH
62299: LD_INT 3
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: LD_INT 3
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: LD_INT 3
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: LD_INT 2
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 3
62339: NEG
62340: PUSH
62341: LD_INT 2
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 3
62351: NEG
62352: PUSH
62353: LD_INT 3
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62392: LD_ADDR_VAR 0 46
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: LD_INT 1
62412: NEG
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: LD_INT 0
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: LD_INT 1
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: LD_INT 1
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 1
62461: NEG
62462: PUSH
62463: LD_INT 1
62465: NEG
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: LD_INT 1
62473: NEG
62474: PUSH
62475: LD_INT 2
62477: NEG
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: LD_INT 2
62488: NEG
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: LD_INT 1
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 2
62507: PUSH
62508: LD_INT 0
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 2
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: LD_INT 2
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: LD_INT 2
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 1
62547: NEG
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 2
62558: NEG
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 2
62569: NEG
62570: PUSH
62571: LD_INT 1
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: LD_INT 3
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: LD_INT 3
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: PUSH
62605: LD_INT 2
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 2
62615: PUSH
62616: LD_INT 1
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 3
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 3
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: LD_INT 3
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: LD_INT 3
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 1
62666: NEG
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 2
62677: NEG
62678: PUSH
62679: LD_INT 1
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 3
62688: NEG
62689: PUSH
62690: LD_INT 0
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 3
62699: NEG
62700: PUSH
62701: LD_INT 1
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62740: LD_ADDR_VAR 0 47
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: LD_INT 0
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: LD_INT 1
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 1
62768: PUSH
62769: LD_INT 0
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 1
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 0
62788: PUSH
62789: LD_INT 1
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: NEG
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 1
62809: NEG
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 1
62821: NEG
62822: PUSH
62823: LD_INT 2
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: LD_INT 2
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 2
62855: NEG
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 2
62867: NEG
62868: PUSH
62869: LD_INT 2
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62891: LD_ADDR_VAR 0 48
62895: PUSH
62896: LD_INT 0
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 0
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 1
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: LD_INT 1
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 0
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 1
62949: NEG
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: NEG
62961: PUSH
62962: LD_INT 1
62964: NEG
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: LD_INT 2
62976: NEG
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 0
62984: PUSH
62985: LD_INT 2
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 1
62995: PUSH
62996: LD_INT 1
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 2
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 2
63016: PUSH
63017: LD_INT 1
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63038: LD_ADDR_VAR 0 49
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: LD_INT 0
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: LD_INT 1
63058: NEG
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 1
63066: PUSH
63067: LD_INT 0
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: LD_INT 1
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 1
63096: NEG
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 1
63107: NEG
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: LD_INT 1
63122: NEG
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 2
63130: PUSH
63131: LD_INT 0
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 2
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 2
63150: PUSH
63151: LD_INT 2
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 1
63160: PUSH
63161: LD_INT 2
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63182: LD_ADDR_VAR 0 50
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: LD_INT 0
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 0
63199: PUSH
63200: LD_INT 1
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 1
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: LD_INT 1
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: LD_INT 1
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 1
63240: NEG
63241: PUSH
63242: LD_INT 0
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 1
63251: NEG
63252: PUSH
63253: LD_INT 1
63255: NEG
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 2
63263: PUSH
63264: LD_INT 1
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 2
63273: PUSH
63274: LD_INT 2
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 1
63283: PUSH
63284: LD_INT 2
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: LD_INT 2
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63326: LD_ADDR_VAR 0 51
63330: PUSH
63331: LD_INT 0
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: LD_INT 1
63346: NEG
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 1
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 1
63364: PUSH
63365: LD_INT 1
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 0
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 1
63384: NEG
63385: PUSH
63386: LD_INT 0
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: LD_INT 1
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 1
63407: PUSH
63408: LD_INT 2
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 0
63417: PUSH
63418: LD_INT 2
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 1
63427: NEG
63428: PUSH
63429: LD_INT 1
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 2
63438: NEG
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 2
63449: NEG
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63473: LD_ADDR_VAR 0 52
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: LD_INT 1
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 1
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 1
63531: NEG
63532: PUSH
63533: LD_INT 0
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 1
63542: NEG
63543: PUSH
63544: LD_INT 1
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 1
63554: NEG
63555: PUSH
63556: LD_INT 2
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 1
63566: NEG
63567: PUSH
63568: LD_INT 1
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 2
63577: NEG
63578: PUSH
63579: LD_INT 0
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 2
63588: NEG
63589: PUSH
63590: LD_INT 1
63592: NEG
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 2
63600: NEG
63601: PUSH
63602: LD_INT 2
63604: NEG
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63624: LD_ADDR_VAR 0 53
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: LD_INT 0
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: LD_INT 1
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 1
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 1
63662: PUSH
63663: LD_INT 1
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 0
63672: PUSH
63673: LD_INT 1
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 1
63682: NEG
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 1
63693: NEG
63694: PUSH
63695: LD_INT 1
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 1
63705: NEG
63706: PUSH
63707: LD_INT 2
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 0
63717: PUSH
63718: LD_INT 2
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 1
63728: PUSH
63729: LD_INT 1
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 2
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: LD_INT 1
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 2
63759: PUSH
63760: LD_INT 2
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: PUSH
63770: LD_INT 2
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: LD_INT 2
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: LD_INT 1
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 2
63800: NEG
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 2
63811: NEG
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 2
63823: NEG
63824: PUSH
63825: LD_INT 2
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63854: LD_ADDR_VAR 0 54
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: LD_INT 0
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 0
63871: PUSH
63872: LD_INT 1
63874: NEG
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 1
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 1
63892: PUSH
63893: LD_INT 1
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: LD_INT 1
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: NEG
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 1
63923: NEG
63924: PUSH
63925: LD_INT 1
63927: NEG
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 1
63935: NEG
63936: PUSH
63937: LD_INT 2
63939: NEG
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: LD_INT 2
63950: NEG
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 1
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 2
63969: PUSH
63970: LD_INT 0
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 2
63979: PUSH
63980: LD_INT 1
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 2
63989: PUSH
63990: LD_INT 2
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 1
63999: PUSH
64000: LD_INT 2
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: LD_INT 2
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: LD_INT 1
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 2
64030: NEG
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 2
64041: NEG
64042: PUSH
64043: LD_INT 1
64045: NEG
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 2
64053: NEG
64054: PUSH
64055: LD_INT 2
64057: NEG
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64084: LD_ADDR_VAR 0 55
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: LD_INT 0
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 0
64101: PUSH
64102: LD_INT 1
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 1
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 1
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 0
64132: PUSH
64133: LD_INT 1
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 1
64142: NEG
64143: PUSH
64144: LD_INT 0
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 1
64153: NEG
64154: PUSH
64155: LD_INT 1
64157: NEG
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 1
64165: NEG
64166: PUSH
64167: LD_INT 2
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: LD_INT 2
64180: NEG
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 1
64188: PUSH
64189: LD_INT 1
64191: NEG
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 2
64199: PUSH
64200: LD_INT 0
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 2
64209: PUSH
64210: LD_INT 1
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 2
64219: PUSH
64220: LD_INT 2
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: LD_INT 2
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 0
64239: PUSH
64240: LD_INT 2
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 1
64249: NEG
64250: PUSH
64251: LD_INT 1
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 2
64260: NEG
64261: PUSH
64262: LD_INT 0
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 2
64271: NEG
64272: PUSH
64273: LD_INT 1
64275: NEG
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 2
64283: NEG
64284: PUSH
64285: LD_INT 2
64287: NEG
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64314: LD_ADDR_VAR 0 56
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: LD_INT 1
64334: NEG
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: LD_INT 0
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 1
64352: PUSH
64353: LD_INT 1
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 1
64372: NEG
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: LD_INT 1
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: NEG
64396: PUSH
64397: LD_INT 2
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: LD_INT 2
64410: NEG
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 1
64418: PUSH
64419: LD_INT 1
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 2
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 2
64439: PUSH
64440: LD_INT 1
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 2
64449: PUSH
64450: LD_INT 2
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 1
64459: PUSH
64460: LD_INT 2
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: LD_INT 2
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: LD_INT 1
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 2
64490: NEG
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 2
64501: NEG
64502: PUSH
64503: LD_INT 1
64505: NEG
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 2
64513: NEG
64514: PUSH
64515: LD_INT 2
64517: NEG
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64544: LD_ADDR_VAR 0 57
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: LD_INT 0
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: LD_INT 1
64564: NEG
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 1
64572: PUSH
64573: LD_INT 0
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 1
64582: PUSH
64583: LD_INT 1
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 0
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 1
64602: NEG
64603: PUSH
64604: LD_INT 0
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: LD_INT 1
64617: NEG
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: NEG
64626: PUSH
64627: LD_INT 2
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 0
64637: PUSH
64638: LD_INT 2
64640: NEG
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 2
64659: PUSH
64660: LD_INT 0
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 2
64669: PUSH
64670: LD_INT 1
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 2
64679: PUSH
64680: LD_INT 2
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 1
64689: PUSH
64690: LD_INT 2
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 0
64699: PUSH
64700: LD_INT 2
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 1
64709: NEG
64710: PUSH
64711: LD_INT 1
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 2
64720: NEG
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 2
64731: NEG
64732: PUSH
64733: LD_INT 1
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 2
64743: NEG
64744: PUSH
64745: LD_INT 2
64747: NEG
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64774: LD_ADDR_VAR 0 58
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: LD_INT 1
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 1
64802: PUSH
64803: LD_INT 0
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: PUSH
64813: LD_INT 1
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: LD_INT 1
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 1
64855: NEG
64856: PUSH
64857: LD_INT 2
64859: NEG
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 0
64867: PUSH
64868: LD_INT 2
64870: NEG
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 1
64878: PUSH
64879: LD_INT 1
64881: NEG
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 2
64889: PUSH
64890: LD_INT 0
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 2
64899: PUSH
64900: LD_INT 1
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 2
64909: PUSH
64910: LD_INT 2
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 1
64919: PUSH
64920: LD_INT 2
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 0
64929: PUSH
64930: LD_INT 2
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: LD_INT 1
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 2
64950: NEG
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 2
64961: NEG
64962: PUSH
64963: LD_INT 1
64965: NEG
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 2
64973: NEG
64974: PUSH
64975: LD_INT 2
64977: NEG
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65004: LD_ADDR_VAR 0 59
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: LD_INT 1
65024: NEG
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 1
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: LD_INT 1
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 0
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: NEG
65063: PUSH
65064: LD_INT 0
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 1
65073: NEG
65074: PUSH
65075: LD_INT 1
65077: NEG
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65092: LD_ADDR_VAR 0 60
65096: PUSH
65097: LD_INT 0
65099: PUSH
65100: LD_INT 0
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 0
65109: PUSH
65110: LD_INT 1
65112: NEG
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: LD_INT 0
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 1
65130: PUSH
65131: LD_INT 1
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 0
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 1
65161: NEG
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65180: LD_ADDR_VAR 0 61
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: LD_INT 0
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: LD_INT 1
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: LD_INT 0
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 1
65218: PUSH
65219: LD_INT 1
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: LD_INT 1
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 1
65238: NEG
65239: PUSH
65240: LD_INT 0
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: NEG
65250: PUSH
65251: LD_INT 1
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65268: LD_ADDR_VAR 0 62
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: LD_INT 0
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 0
65285: PUSH
65286: LD_INT 1
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 1
65296: PUSH
65297: LD_INT 0
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 1
65306: PUSH
65307: LD_INT 1
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 0
65316: PUSH
65317: LD_INT 1
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 1
65326: NEG
65327: PUSH
65328: LD_INT 0
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 1
65337: NEG
65338: PUSH
65339: LD_INT 1
65341: NEG
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65356: LD_ADDR_VAR 0 63
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: LD_INT 0
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 0
65373: PUSH
65374: LD_INT 1
65376: NEG
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 1
65384: PUSH
65385: LD_INT 0
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 1
65394: PUSH
65395: LD_INT 1
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 0
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 1
65414: NEG
65415: PUSH
65416: LD_INT 0
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: NEG
65426: PUSH
65427: LD_INT 1
65429: NEG
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65444: LD_ADDR_VAR 0 64
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: LD_INT 0
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 0
65461: PUSH
65462: LD_INT 1
65464: NEG
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 1
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 1
65482: PUSH
65483: LD_INT 1
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 0
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 1
65502: NEG
65503: PUSH
65504: LD_INT 0
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 1
65513: NEG
65514: PUSH
65515: LD_INT 1
65517: NEG
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: ST_TO_ADDR
// end ; 1 :
65532: GO 71429
65534: LD_INT 1
65536: DOUBLE
65537: EQUAL
65538: IFTRUE 65542
65540: GO 68165
65542: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65543: LD_ADDR_VAR 0 11
65547: PUSH
65548: LD_INT 1
65550: NEG
65551: PUSH
65552: LD_INT 3
65554: NEG
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: LD_INT 3
65565: NEG
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: LD_INT 2
65576: NEG
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: LIST
65586: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65587: LD_ADDR_VAR 0 12
65591: PUSH
65592: LD_INT 2
65594: PUSH
65595: LD_INT 1
65597: NEG
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 3
65605: PUSH
65606: LD_INT 0
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 3
65615: PUSH
65616: LD_INT 1
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: LIST
65627: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65628: LD_ADDR_VAR 0 13
65632: PUSH
65633: LD_INT 3
65635: PUSH
65636: LD_INT 2
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 3
65645: PUSH
65646: LD_INT 3
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 2
65655: PUSH
65656: LD_INT 3
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: LIST
65667: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65668: LD_ADDR_VAR 0 14
65672: PUSH
65673: LD_INT 1
65675: PUSH
65676: LD_INT 3
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 0
65685: PUSH
65686: LD_INT 3
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 1
65695: NEG
65696: PUSH
65697: LD_INT 2
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: LIST
65708: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65709: LD_ADDR_VAR 0 15
65713: PUSH
65714: LD_INT 2
65716: NEG
65717: PUSH
65718: LD_INT 1
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 3
65727: NEG
65728: PUSH
65729: LD_INT 0
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 3
65738: NEG
65739: PUSH
65740: LD_INT 1
65742: NEG
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: LIST
65752: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65753: LD_ADDR_VAR 0 16
65757: PUSH
65758: LD_INT 2
65760: NEG
65761: PUSH
65762: LD_INT 3
65764: NEG
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 3
65772: NEG
65773: PUSH
65774: LD_INT 2
65776: NEG
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 3
65784: NEG
65785: PUSH
65786: LD_INT 3
65788: NEG
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: LIST
65798: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65799: LD_ADDR_VAR 0 17
65803: PUSH
65804: LD_INT 1
65806: NEG
65807: PUSH
65808: LD_INT 3
65810: NEG
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 0
65818: PUSH
65819: LD_INT 3
65821: NEG
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 1
65829: PUSH
65830: LD_INT 2
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: LIST
65842: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65843: LD_ADDR_VAR 0 18
65847: PUSH
65848: LD_INT 2
65850: PUSH
65851: LD_INT 1
65853: NEG
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 3
65861: PUSH
65862: LD_INT 0
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 3
65871: PUSH
65872: LD_INT 1
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: LIST
65883: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65884: LD_ADDR_VAR 0 19
65888: PUSH
65889: LD_INT 3
65891: PUSH
65892: LD_INT 2
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 3
65901: PUSH
65902: LD_INT 3
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 2
65911: PUSH
65912: LD_INT 3
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: LIST
65923: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65924: LD_ADDR_VAR 0 20
65928: PUSH
65929: LD_INT 1
65931: PUSH
65932: LD_INT 3
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 0
65941: PUSH
65942: LD_INT 3
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 1
65951: NEG
65952: PUSH
65953: LD_INT 2
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: LIST
65964: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65965: LD_ADDR_VAR 0 21
65969: PUSH
65970: LD_INT 2
65972: NEG
65973: PUSH
65974: LD_INT 1
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 3
65983: NEG
65984: PUSH
65985: LD_INT 0
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 3
65994: NEG
65995: PUSH
65996: LD_INT 1
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: LIST
66008: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66009: LD_ADDR_VAR 0 22
66013: PUSH
66014: LD_INT 2
66016: NEG
66017: PUSH
66018: LD_INT 3
66020: NEG
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 3
66028: NEG
66029: PUSH
66030: LD_INT 2
66032: NEG
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 3
66040: NEG
66041: PUSH
66042: LD_INT 3
66044: NEG
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: LIST
66054: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66055: LD_ADDR_VAR 0 23
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: LD_INT 3
66065: NEG
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 1
66073: NEG
66074: PUSH
66075: LD_INT 4
66077: NEG
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 1
66085: PUSH
66086: LD_INT 3
66088: NEG
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: LIST
66098: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66099: LD_ADDR_VAR 0 24
66103: PUSH
66104: LD_INT 3
66106: PUSH
66107: LD_INT 0
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 3
66116: PUSH
66117: LD_INT 1
66119: NEG
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 4
66127: PUSH
66128: LD_INT 1
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: LIST
66139: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66140: LD_ADDR_VAR 0 25
66144: PUSH
66145: LD_INT 3
66147: PUSH
66148: LD_INT 3
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 4
66157: PUSH
66158: LD_INT 3
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 3
66167: PUSH
66168: LD_INT 4
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: LIST
66179: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66180: LD_ADDR_VAR 0 26
66184: PUSH
66185: LD_INT 0
66187: PUSH
66188: LD_INT 3
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 1
66197: PUSH
66198: LD_INT 4
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 1
66207: NEG
66208: PUSH
66209: LD_INT 3
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: LIST
66220: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66221: LD_ADDR_VAR 0 27
66225: PUSH
66226: LD_INT 3
66228: NEG
66229: PUSH
66230: LD_INT 0
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 3
66239: NEG
66240: PUSH
66241: LD_INT 1
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 4
66250: NEG
66251: PUSH
66252: LD_INT 1
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: LIST
66264: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66265: LD_ADDR_VAR 0 28
66269: PUSH
66270: LD_INT 3
66272: NEG
66273: PUSH
66274: LD_INT 3
66276: NEG
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 3
66284: NEG
66285: PUSH
66286: LD_INT 4
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 4
66296: NEG
66297: PUSH
66298: LD_INT 3
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: LIST
66310: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66311: LD_ADDR_VAR 0 29
66315: PUSH
66316: LD_INT 1
66318: NEG
66319: PUSH
66320: LD_INT 3
66322: NEG
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 0
66330: PUSH
66331: LD_INT 3
66333: NEG
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 1
66341: PUSH
66342: LD_INT 2
66344: NEG
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 1
66352: NEG
66353: PUSH
66354: LD_INT 4
66356: NEG
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 0
66364: PUSH
66365: LD_INT 4
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 1
66375: PUSH
66376: LD_INT 3
66378: NEG
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 1
66386: NEG
66387: PUSH
66388: LD_INT 5
66390: NEG
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 0
66398: PUSH
66399: LD_INT 5
66401: NEG
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 1
66409: PUSH
66410: LD_INT 4
66412: NEG
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PUSH
66418: LD_INT 1
66420: NEG
66421: PUSH
66422: LD_INT 6
66424: NEG
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 0
66432: PUSH
66433: LD_INT 6
66435: NEG
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 1
66443: PUSH
66444: LD_INT 5
66446: NEG
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66466: LD_ADDR_VAR 0 30
66470: PUSH
66471: LD_INT 2
66473: PUSH
66474: LD_INT 1
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 3
66484: PUSH
66485: LD_INT 0
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 3
66494: PUSH
66495: LD_INT 1
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 3
66504: PUSH
66505: LD_INT 1
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 4
66515: PUSH
66516: LD_INT 0
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 4
66525: PUSH
66526: LD_INT 1
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 4
66535: PUSH
66536: LD_INT 1
66538: NEG
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 5
66546: PUSH
66547: LD_INT 0
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 5
66556: PUSH
66557: LD_INT 1
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 5
66566: PUSH
66567: LD_INT 1
66569: NEG
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 6
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 6
66587: PUSH
66588: LD_INT 1
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66609: LD_ADDR_VAR 0 31
66613: PUSH
66614: LD_INT 3
66616: PUSH
66617: LD_INT 2
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 3
66626: PUSH
66627: LD_INT 3
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 2
66636: PUSH
66637: LD_INT 3
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 4
66646: PUSH
66647: LD_INT 3
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 4
66656: PUSH
66657: LD_INT 4
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 3
66666: PUSH
66667: LD_INT 4
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 5
66676: PUSH
66677: LD_INT 4
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 5
66686: PUSH
66687: LD_INT 5
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 4
66696: PUSH
66697: LD_INT 5
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 6
66706: PUSH
66707: LD_INT 5
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 6
66716: PUSH
66717: LD_INT 6
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 5
66726: PUSH
66727: LD_INT 6
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66748: LD_ADDR_VAR 0 32
66752: PUSH
66753: LD_INT 1
66755: PUSH
66756: LD_INT 3
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: LD_INT 0
66765: PUSH
66766: LD_INT 3
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 1
66775: NEG
66776: PUSH
66777: LD_INT 2
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: LD_INT 1
66786: PUSH
66787: LD_INT 4
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 0
66796: PUSH
66797: LD_INT 4
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 1
66806: NEG
66807: PUSH
66808: LD_INT 3
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 1
66817: PUSH
66818: LD_INT 5
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_INT 0
66827: PUSH
66828: LD_INT 5
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: LD_INT 1
66837: NEG
66838: PUSH
66839: LD_INT 4
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 1
66848: PUSH
66849: LD_INT 6
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 0
66858: PUSH
66859: LD_INT 6
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 1
66868: NEG
66869: PUSH
66870: LD_INT 5
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66891: LD_ADDR_VAR 0 33
66895: PUSH
66896: LD_INT 2
66898: NEG
66899: PUSH
66900: LD_INT 1
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 3
66909: NEG
66910: PUSH
66911: LD_INT 0
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 3
66920: NEG
66921: PUSH
66922: LD_INT 1
66924: NEG
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 3
66932: NEG
66933: PUSH
66934: LD_INT 1
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 4
66943: NEG
66944: PUSH
66945: LD_INT 0
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 4
66954: NEG
66955: PUSH
66956: LD_INT 1
66958: NEG
66959: PUSH
66960: EMPTY
66961: LIST
66962: LIST
66963: PUSH
66964: LD_INT 4
66966: NEG
66967: PUSH
66968: LD_INT 1
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 5
66977: NEG
66978: PUSH
66979: LD_INT 0
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 5
66988: NEG
66989: PUSH
66990: LD_INT 1
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 5
67000: NEG
67001: PUSH
67002: LD_INT 1
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 6
67011: NEG
67012: PUSH
67013: LD_INT 0
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 6
67022: NEG
67023: PUSH
67024: LD_INT 1
67026: NEG
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67046: LD_ADDR_VAR 0 34
67050: PUSH
67051: LD_INT 2
67053: NEG
67054: PUSH
67055: LD_INT 3
67057: NEG
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: LD_INT 3
67065: NEG
67066: PUSH
67067: LD_INT 2
67069: NEG
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 3
67077: NEG
67078: PUSH
67079: LD_INT 3
67081: NEG
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 3
67089: NEG
67090: PUSH
67091: LD_INT 4
67093: NEG
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 4
67101: NEG
67102: PUSH
67103: LD_INT 3
67105: NEG
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 4
67113: NEG
67114: PUSH
67115: LD_INT 4
67117: NEG
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 4
67125: NEG
67126: PUSH
67127: LD_INT 5
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 5
67137: NEG
67138: PUSH
67139: LD_INT 4
67141: NEG
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 5
67149: NEG
67150: PUSH
67151: LD_INT 5
67153: NEG
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 5
67161: NEG
67162: PUSH
67163: LD_INT 6
67165: NEG
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 6
67173: NEG
67174: PUSH
67175: LD_INT 5
67177: NEG
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 6
67185: NEG
67186: PUSH
67187: LD_INT 6
67189: NEG
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67209: LD_ADDR_VAR 0 41
67213: PUSH
67214: LD_INT 0
67216: PUSH
67217: LD_INT 2
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 1
67227: NEG
67228: PUSH
67229: LD_INT 3
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 1
67239: PUSH
67240: LD_INT 2
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: LIST
67252: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67253: LD_ADDR_VAR 0 42
67257: PUSH
67258: LD_INT 2
67260: PUSH
67261: LD_INT 0
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 2
67270: PUSH
67271: LD_INT 1
67273: NEG
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 3
67281: PUSH
67282: LD_INT 1
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: LIST
67293: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67294: LD_ADDR_VAR 0 43
67298: PUSH
67299: LD_INT 2
67301: PUSH
67302: LD_INT 2
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 3
67311: PUSH
67312: LD_INT 2
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 2
67321: PUSH
67322: LD_INT 3
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: LIST
67333: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67334: LD_ADDR_VAR 0 44
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: LD_INT 2
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 1
67351: PUSH
67352: LD_INT 3
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 1
67361: NEG
67362: PUSH
67363: LD_INT 2
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: LIST
67374: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67375: LD_ADDR_VAR 0 45
67379: PUSH
67380: LD_INT 2
67382: NEG
67383: PUSH
67384: LD_INT 0
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: PUSH
67391: LD_INT 2
67393: NEG
67394: PUSH
67395: LD_INT 1
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 3
67404: NEG
67405: PUSH
67406: LD_INT 1
67408: NEG
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: LIST
67418: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67419: LD_ADDR_VAR 0 46
67423: PUSH
67424: LD_INT 2
67426: NEG
67427: PUSH
67428: LD_INT 2
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 2
67438: NEG
67439: PUSH
67440: LD_INT 3
67442: NEG
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 3
67450: NEG
67451: PUSH
67452: LD_INT 2
67454: NEG
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: LIST
67464: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67465: LD_ADDR_VAR 0 47
67469: PUSH
67470: LD_INT 2
67472: NEG
67473: PUSH
67474: LD_INT 3
67476: NEG
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 1
67484: NEG
67485: PUSH
67486: LD_INT 3
67488: NEG
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67498: LD_ADDR_VAR 0 48
67502: PUSH
67503: LD_INT 1
67505: PUSH
67506: LD_INT 2
67508: NEG
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 2
67516: PUSH
67517: LD_INT 1
67519: NEG
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67529: LD_ADDR_VAR 0 49
67533: PUSH
67534: LD_INT 3
67536: PUSH
67537: LD_INT 1
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 3
67546: PUSH
67547: LD_INT 2
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67558: LD_ADDR_VAR 0 50
67562: PUSH
67563: LD_INT 2
67565: PUSH
67566: LD_INT 3
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 1
67575: PUSH
67576: LD_INT 3
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67587: LD_ADDR_VAR 0 51
67591: PUSH
67592: LD_INT 1
67594: NEG
67595: PUSH
67596: LD_INT 2
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 2
67605: NEG
67606: PUSH
67607: LD_INT 1
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67618: LD_ADDR_VAR 0 52
67622: PUSH
67623: LD_INT 3
67625: NEG
67626: PUSH
67627: LD_INT 1
67629: NEG
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 3
67637: NEG
67638: PUSH
67639: LD_INT 2
67641: NEG
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: EMPTY
67648: LIST
67649: LIST
67650: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67651: LD_ADDR_VAR 0 53
67655: PUSH
67656: LD_INT 1
67658: NEG
67659: PUSH
67660: LD_INT 3
67662: NEG
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 0
67670: PUSH
67671: LD_INT 3
67673: NEG
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 1
67681: PUSH
67682: LD_INT 2
67684: NEG
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: LIST
67694: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67695: LD_ADDR_VAR 0 54
67699: PUSH
67700: LD_INT 2
67702: PUSH
67703: LD_INT 1
67705: NEG
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 3
67713: PUSH
67714: LD_INT 0
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 3
67723: PUSH
67724: LD_INT 1
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: LIST
67735: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67736: LD_ADDR_VAR 0 55
67740: PUSH
67741: LD_INT 3
67743: PUSH
67744: LD_INT 2
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 3
67753: PUSH
67754: LD_INT 3
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 2
67763: PUSH
67764: LD_INT 3
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: LIST
67775: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67776: LD_ADDR_VAR 0 56
67780: PUSH
67781: LD_INT 1
67783: PUSH
67784: LD_INT 3
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: LD_INT 3
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 1
67803: NEG
67804: PUSH
67805: LD_INT 2
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: LIST
67816: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67817: LD_ADDR_VAR 0 57
67821: PUSH
67822: LD_INT 2
67824: NEG
67825: PUSH
67826: LD_INT 1
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 3
67835: NEG
67836: PUSH
67837: LD_INT 0
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 3
67846: NEG
67847: PUSH
67848: LD_INT 1
67850: NEG
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: LIST
67860: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67861: LD_ADDR_VAR 0 58
67865: PUSH
67866: LD_INT 2
67868: NEG
67869: PUSH
67870: LD_INT 3
67872: NEG
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 3
67880: NEG
67881: PUSH
67882: LD_INT 2
67884: NEG
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 3
67892: NEG
67893: PUSH
67894: LD_INT 3
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: LIST
67906: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67907: LD_ADDR_VAR 0 59
67911: PUSH
67912: LD_INT 1
67914: NEG
67915: PUSH
67916: LD_INT 2
67918: NEG
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 0
67926: PUSH
67927: LD_INT 2
67929: NEG
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 1
67937: PUSH
67938: LD_INT 1
67940: NEG
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: LIST
67950: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67951: LD_ADDR_VAR 0 60
67955: PUSH
67956: LD_INT 1
67958: PUSH
67959: LD_INT 1
67961: NEG
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 2
67969: PUSH
67970: LD_INT 0
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 2
67979: PUSH
67980: LD_INT 1
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: LIST
67991: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67992: LD_ADDR_VAR 0 61
67996: PUSH
67997: LD_INT 2
67999: PUSH
68000: LD_INT 1
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 2
68009: PUSH
68010: LD_INT 2
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 1
68019: PUSH
68020: LD_INT 2
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: LIST
68031: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68032: LD_ADDR_VAR 0 62
68036: PUSH
68037: LD_INT 1
68039: PUSH
68040: LD_INT 2
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 0
68049: PUSH
68050: LD_INT 2
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 1
68059: NEG
68060: PUSH
68061: LD_INT 1
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: LIST
68072: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68073: LD_ADDR_VAR 0 63
68077: PUSH
68078: LD_INT 1
68080: NEG
68081: PUSH
68082: LD_INT 1
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 2
68091: NEG
68092: PUSH
68093: LD_INT 0
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 2
68102: NEG
68103: PUSH
68104: LD_INT 1
68106: NEG
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: LIST
68116: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68117: LD_ADDR_VAR 0 64
68121: PUSH
68122: LD_INT 1
68124: NEG
68125: PUSH
68126: LD_INT 2
68128: NEG
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 2
68136: NEG
68137: PUSH
68138: LD_INT 1
68140: NEG
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 2
68148: NEG
68149: PUSH
68150: LD_INT 2
68152: NEG
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: LIST
68162: ST_TO_ADDR
// end ; 2 :
68163: GO 71429
68165: LD_INT 2
68167: DOUBLE
68168: EQUAL
68169: IFTRUE 68173
68171: GO 71428
68173: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68174: LD_ADDR_VAR 0 29
68178: PUSH
68179: LD_INT 4
68181: PUSH
68182: LD_INT 0
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 4
68191: PUSH
68192: LD_INT 1
68194: NEG
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 5
68202: PUSH
68203: LD_INT 0
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 5
68212: PUSH
68213: LD_INT 1
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 4
68222: PUSH
68223: LD_INT 1
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 3
68232: PUSH
68233: LD_INT 0
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 3
68242: PUSH
68243: LD_INT 1
68245: NEG
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 3
68253: PUSH
68254: LD_INT 2
68256: NEG
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 5
68264: PUSH
68265: LD_INT 2
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 3
68274: PUSH
68275: LD_INT 3
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 3
68284: PUSH
68285: LD_INT 2
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 4
68294: PUSH
68295: LD_INT 3
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 4
68304: PUSH
68305: LD_INT 4
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 3
68314: PUSH
68315: LD_INT 4
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 2
68324: PUSH
68325: LD_INT 3
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 2
68334: PUSH
68335: LD_INT 2
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 4
68344: PUSH
68345: LD_INT 2
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 2
68354: PUSH
68355: LD_INT 4
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 0
68364: PUSH
68365: LD_INT 4
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 0
68374: PUSH
68375: LD_INT 3
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 1
68384: PUSH
68385: LD_INT 4
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 1
68394: PUSH
68395: LD_INT 5
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 0
68404: PUSH
68405: LD_INT 5
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 1
68414: NEG
68415: PUSH
68416: LD_INT 4
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 1
68425: NEG
68426: PUSH
68427: LD_INT 3
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 2
68436: PUSH
68437: LD_INT 5
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 2
68446: NEG
68447: PUSH
68448: LD_INT 3
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 3
68457: NEG
68458: PUSH
68459: LD_INT 0
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 3
68468: NEG
68469: PUSH
68470: LD_INT 1
68472: NEG
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 2
68480: NEG
68481: PUSH
68482: LD_INT 0
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 2
68491: NEG
68492: PUSH
68493: LD_INT 1
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 3
68502: NEG
68503: PUSH
68504: LD_INT 1
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 4
68513: NEG
68514: PUSH
68515: LD_INT 0
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 4
68524: NEG
68525: PUSH
68526: LD_INT 1
68528: NEG
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 4
68536: NEG
68537: PUSH
68538: LD_INT 2
68540: NEG
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 2
68548: NEG
68549: PUSH
68550: LD_INT 2
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 4
68559: NEG
68560: PUSH
68561: LD_INT 4
68563: NEG
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 4
68571: NEG
68572: PUSH
68573: LD_INT 5
68575: NEG
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 3
68583: NEG
68584: PUSH
68585: LD_INT 4
68587: NEG
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 3
68595: NEG
68596: PUSH
68597: LD_INT 3
68599: NEG
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 4
68607: NEG
68608: PUSH
68609: LD_INT 3
68611: NEG
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 5
68619: NEG
68620: PUSH
68621: LD_INT 4
68623: NEG
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 5
68631: NEG
68632: PUSH
68633: LD_INT 5
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 3
68643: NEG
68644: PUSH
68645: LD_INT 5
68647: NEG
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 5
68655: NEG
68656: PUSH
68657: LD_INT 3
68659: NEG
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68712: LD_ADDR_VAR 0 30
68716: PUSH
68717: LD_INT 4
68719: PUSH
68720: LD_INT 4
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 4
68729: PUSH
68730: LD_INT 3
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 5
68739: PUSH
68740: LD_INT 4
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 5
68749: PUSH
68750: LD_INT 5
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 4
68759: PUSH
68760: LD_INT 5
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 3
68769: PUSH
68770: LD_INT 4
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 3
68779: PUSH
68780: LD_INT 3
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 5
68789: PUSH
68790: LD_INT 3
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 3
68799: PUSH
68800: LD_INT 5
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 0
68809: PUSH
68810: LD_INT 3
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 0
68819: PUSH
68820: LD_INT 2
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: PUSH
68827: LD_INT 1
68829: PUSH
68830: LD_INT 3
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 1
68839: PUSH
68840: LD_INT 4
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 0
68849: PUSH
68850: LD_INT 4
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 1
68859: NEG
68860: PUSH
68861: LD_INT 3
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 1
68870: NEG
68871: PUSH
68872: LD_INT 2
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 2
68881: PUSH
68882: LD_INT 4
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 2
68891: NEG
68892: PUSH
68893: LD_INT 2
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 4
68902: NEG
68903: PUSH
68904: LD_INT 0
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 4
68913: NEG
68914: PUSH
68915: LD_INT 1
68917: NEG
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 3
68925: NEG
68926: PUSH
68927: LD_INT 0
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 3
68936: NEG
68937: PUSH
68938: LD_INT 1
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 4
68947: NEG
68948: PUSH
68949: LD_INT 1
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 5
68958: NEG
68959: PUSH
68960: LD_INT 0
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 5
68969: NEG
68970: PUSH
68971: LD_INT 1
68973: NEG
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 5
68981: NEG
68982: PUSH
68983: LD_INT 2
68985: NEG
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PUSH
68991: LD_INT 3
68993: NEG
68994: PUSH
68995: LD_INT 2
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 3
69004: NEG
69005: PUSH
69006: LD_INT 3
69008: NEG
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 3
69016: NEG
69017: PUSH
69018: LD_INT 4
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 2
69028: NEG
69029: PUSH
69030: LD_INT 3
69032: NEG
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 2
69040: NEG
69041: PUSH
69042: LD_INT 2
69044: NEG
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 3
69052: NEG
69053: PUSH
69054: LD_INT 2
69056: NEG
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 4
69064: NEG
69065: PUSH
69066: LD_INT 3
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 4
69076: NEG
69077: PUSH
69078: LD_INT 4
69080: NEG
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 2
69088: NEG
69089: PUSH
69090: LD_INT 4
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 4
69100: NEG
69101: PUSH
69102: LD_INT 2
69104: NEG
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 0
69112: PUSH
69113: LD_INT 4
69115: NEG
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 0
69123: PUSH
69124: LD_INT 5
69126: NEG
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 1
69134: PUSH
69135: LD_INT 4
69137: NEG
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 1
69145: PUSH
69146: LD_INT 3
69148: NEG
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 0
69156: PUSH
69157: LD_INT 3
69159: NEG
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 1
69167: NEG
69168: PUSH
69169: LD_INT 4
69171: NEG
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 1
69179: NEG
69180: PUSH
69181: LD_INT 5
69183: NEG
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 2
69191: PUSH
69192: LD_INT 3
69194: NEG
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 2
69202: NEG
69203: PUSH
69204: LD_INT 5
69206: NEG
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69259: LD_ADDR_VAR 0 31
69263: PUSH
69264: LD_INT 0
69266: PUSH
69267: LD_INT 4
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 0
69276: PUSH
69277: LD_INT 3
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 1
69286: PUSH
69287: LD_INT 4
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 1
69296: PUSH
69297: LD_INT 5
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 0
69306: PUSH
69307: LD_INT 5
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 1
69316: NEG
69317: PUSH
69318: LD_INT 4
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 1
69327: NEG
69328: PUSH
69329: LD_INT 3
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 2
69338: PUSH
69339: LD_INT 5
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 2
69348: NEG
69349: PUSH
69350: LD_INT 3
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 3
69359: NEG
69360: PUSH
69361: LD_INT 0
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 3
69370: NEG
69371: PUSH
69372: LD_INT 1
69374: NEG
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 2
69382: NEG
69383: PUSH
69384: LD_INT 0
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 2
69393: NEG
69394: PUSH
69395: LD_INT 1
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 3
69404: NEG
69405: PUSH
69406: LD_INT 1
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 4
69415: NEG
69416: PUSH
69417: LD_INT 0
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 4
69426: NEG
69427: PUSH
69428: LD_INT 1
69430: NEG
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 4
69438: NEG
69439: PUSH
69440: LD_INT 2
69442: NEG
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 2
69450: NEG
69451: PUSH
69452: LD_INT 2
69454: PUSH
69455: EMPTY
69456: LIST
69457: LIST
69458: PUSH
69459: LD_INT 4
69461: NEG
69462: PUSH
69463: LD_INT 4
69465: NEG
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 4
69473: NEG
69474: PUSH
69475: LD_INT 5
69477: NEG
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 3
69485: NEG
69486: PUSH
69487: LD_INT 4
69489: NEG
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 3
69497: NEG
69498: PUSH
69499: LD_INT 3
69501: NEG
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 4
69509: NEG
69510: PUSH
69511: LD_INT 3
69513: NEG
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 5
69521: NEG
69522: PUSH
69523: LD_INT 4
69525: NEG
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 5
69533: NEG
69534: PUSH
69535: LD_INT 5
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 3
69545: NEG
69546: PUSH
69547: LD_INT 5
69549: NEG
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 5
69557: NEG
69558: PUSH
69559: LD_INT 3
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 0
69569: PUSH
69570: LD_INT 3
69572: NEG
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 0
69580: PUSH
69581: LD_INT 4
69583: NEG
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 1
69591: PUSH
69592: LD_INT 3
69594: NEG
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 1
69602: PUSH
69603: LD_INT 2
69605: NEG
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: LD_INT 0
69613: PUSH
69614: LD_INT 2
69616: NEG
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 1
69624: NEG
69625: PUSH
69626: LD_INT 3
69628: NEG
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: LD_INT 1
69636: NEG
69637: PUSH
69638: LD_INT 4
69640: NEG
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 2
69648: PUSH
69649: LD_INT 2
69651: NEG
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 2
69659: NEG
69660: PUSH
69661: LD_INT 4
69663: NEG
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 4
69671: PUSH
69672: LD_INT 0
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 4
69681: PUSH
69682: LD_INT 1
69684: NEG
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 5
69692: PUSH
69693: LD_INT 0
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 5
69702: PUSH
69703: LD_INT 1
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 4
69712: PUSH
69713: LD_INT 1
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 3
69722: PUSH
69723: LD_INT 0
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 3
69732: PUSH
69733: LD_INT 1
69735: NEG
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 3
69743: PUSH
69744: LD_INT 2
69746: NEG
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 5
69754: PUSH
69755: LD_INT 2
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: LIST
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69809: LD_ADDR_VAR 0 32
69813: PUSH
69814: LD_INT 4
69816: NEG
69817: PUSH
69818: LD_INT 0
69820: PUSH
69821: EMPTY
69822: LIST
69823: LIST
69824: PUSH
69825: LD_INT 4
69827: NEG
69828: PUSH
69829: LD_INT 1
69831: NEG
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 3
69839: NEG
69840: PUSH
69841: LD_INT 0
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: LD_INT 3
69850: NEG
69851: PUSH
69852: LD_INT 1
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 4
69861: NEG
69862: PUSH
69863: LD_INT 1
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 5
69872: NEG
69873: PUSH
69874: LD_INT 0
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 5
69883: NEG
69884: PUSH
69885: LD_INT 1
69887: NEG
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 5
69895: NEG
69896: PUSH
69897: LD_INT 2
69899: NEG
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 3
69907: NEG
69908: PUSH
69909: LD_INT 2
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 3
69918: NEG
69919: PUSH
69920: LD_INT 3
69922: NEG
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 3
69930: NEG
69931: PUSH
69932: LD_INT 4
69934: NEG
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 2
69942: NEG
69943: PUSH
69944: LD_INT 3
69946: NEG
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 2
69954: NEG
69955: PUSH
69956: LD_INT 2
69958: NEG
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 3
69966: NEG
69967: PUSH
69968: LD_INT 2
69970: NEG
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 4
69978: NEG
69979: PUSH
69980: LD_INT 3
69982: NEG
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 4
69990: NEG
69991: PUSH
69992: LD_INT 4
69994: NEG
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 2
70002: NEG
70003: PUSH
70004: LD_INT 4
70006: NEG
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 4
70014: NEG
70015: PUSH
70016: LD_INT 2
70018: NEG
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 0
70026: PUSH
70027: LD_INT 4
70029: NEG
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 0
70037: PUSH
70038: LD_INT 5
70040: NEG
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 1
70048: PUSH
70049: LD_INT 4
70051: NEG
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 1
70059: PUSH
70060: LD_INT 3
70062: NEG
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 0
70070: PUSH
70071: LD_INT 3
70073: NEG
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 1
70081: NEG
70082: PUSH
70083: LD_INT 4
70085: NEG
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 1
70093: NEG
70094: PUSH
70095: LD_INT 5
70097: NEG
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 2
70105: PUSH
70106: LD_INT 3
70108: NEG
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 2
70116: NEG
70117: PUSH
70118: LD_INT 5
70120: NEG
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 3
70128: PUSH
70129: LD_INT 0
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 3
70138: PUSH
70139: LD_INT 1
70141: NEG
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 4
70149: PUSH
70150: LD_INT 0
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 4
70159: PUSH
70160: LD_INT 1
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 3
70169: PUSH
70170: LD_INT 1
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 2
70179: PUSH
70180: LD_INT 0
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 2
70189: PUSH
70190: LD_INT 1
70192: NEG
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 2
70200: PUSH
70201: LD_INT 2
70203: NEG
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 4
70211: PUSH
70212: LD_INT 2
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 4
70221: PUSH
70222: LD_INT 4
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 4
70231: PUSH
70232: LD_INT 3
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 5
70241: PUSH
70242: LD_INT 4
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 5
70251: PUSH
70252: LD_INT 5
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 4
70261: PUSH
70262: LD_INT 5
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: LD_INT 3
70271: PUSH
70272: LD_INT 4
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 3
70281: PUSH
70282: LD_INT 3
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 5
70291: PUSH
70292: LD_INT 3
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 3
70301: PUSH
70302: LD_INT 5
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70356: LD_ADDR_VAR 0 33
70360: PUSH
70361: LD_INT 4
70363: NEG
70364: PUSH
70365: LD_INT 4
70367: NEG
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 4
70375: NEG
70376: PUSH
70377: LD_INT 5
70379: NEG
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 3
70387: NEG
70388: PUSH
70389: LD_INT 4
70391: NEG
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 3
70399: NEG
70400: PUSH
70401: LD_INT 3
70403: NEG
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 4
70411: NEG
70412: PUSH
70413: LD_INT 3
70415: NEG
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 5
70423: NEG
70424: PUSH
70425: LD_INT 4
70427: NEG
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 5
70435: NEG
70436: PUSH
70437: LD_INT 5
70439: NEG
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 3
70447: NEG
70448: PUSH
70449: LD_INT 5
70451: NEG
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 5
70459: NEG
70460: PUSH
70461: LD_INT 3
70463: NEG
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 0
70471: PUSH
70472: LD_INT 3
70474: NEG
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 0
70482: PUSH
70483: LD_INT 4
70485: NEG
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 1
70493: PUSH
70494: LD_INT 3
70496: NEG
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 1
70504: PUSH
70505: LD_INT 2
70507: NEG
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: LD_INT 0
70515: PUSH
70516: LD_INT 2
70518: NEG
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: LD_INT 1
70526: NEG
70527: PUSH
70528: LD_INT 3
70530: NEG
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 1
70538: NEG
70539: PUSH
70540: LD_INT 4
70542: NEG
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: PUSH
70548: LD_INT 2
70550: PUSH
70551: LD_INT 2
70553: NEG
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 2
70561: NEG
70562: PUSH
70563: LD_INT 4
70565: NEG
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: LD_INT 4
70573: PUSH
70574: LD_INT 0
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 4
70583: PUSH
70584: LD_INT 1
70586: NEG
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 5
70594: PUSH
70595: LD_INT 0
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 5
70604: PUSH
70605: LD_INT 1
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 4
70614: PUSH
70615: LD_INT 1
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 3
70624: PUSH
70625: LD_INT 0
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 3
70634: PUSH
70635: LD_INT 1
70637: NEG
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 3
70645: PUSH
70646: LD_INT 2
70648: NEG
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 5
70656: PUSH
70657: LD_INT 2
70659: PUSH
70660: EMPTY
70661: LIST
70662: LIST
70663: PUSH
70664: LD_INT 3
70666: PUSH
70667: LD_INT 3
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 3
70676: PUSH
70677: LD_INT 2
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: LD_INT 4
70686: PUSH
70687: LD_INT 3
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 4
70696: PUSH
70697: LD_INT 4
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: LD_INT 3
70706: PUSH
70707: LD_INT 4
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: LD_INT 2
70716: PUSH
70717: LD_INT 3
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 2
70726: PUSH
70727: LD_INT 2
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 4
70736: PUSH
70737: LD_INT 2
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 2
70746: PUSH
70747: LD_INT 4
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 0
70756: PUSH
70757: LD_INT 4
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 0
70766: PUSH
70767: LD_INT 3
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 1
70776: PUSH
70777: LD_INT 4
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 1
70786: PUSH
70787: LD_INT 5
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 0
70796: PUSH
70797: LD_INT 5
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: LD_INT 1
70806: NEG
70807: PUSH
70808: LD_INT 4
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 1
70817: NEG
70818: PUSH
70819: LD_INT 3
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 2
70828: PUSH
70829: LD_INT 5
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: PUSH
70836: LD_INT 2
70838: NEG
70839: PUSH
70840: LD_INT 3
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70894: LD_ADDR_VAR 0 34
70898: PUSH
70899: LD_INT 0
70901: PUSH
70902: LD_INT 4
70904: NEG
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 0
70912: PUSH
70913: LD_INT 5
70915: NEG
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 1
70923: PUSH
70924: LD_INT 4
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 1
70934: PUSH
70935: LD_INT 3
70937: NEG
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 0
70945: PUSH
70946: LD_INT 3
70948: NEG
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 1
70956: NEG
70957: PUSH
70958: LD_INT 4
70960: NEG
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 1
70968: NEG
70969: PUSH
70970: LD_INT 5
70972: NEG
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 2
70980: PUSH
70981: LD_INT 3
70983: NEG
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 2
70991: NEG
70992: PUSH
70993: LD_INT 5
70995: NEG
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 3
71003: PUSH
71004: LD_INT 0
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 3
71013: PUSH
71014: LD_INT 1
71016: NEG
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 4
71024: PUSH
71025: LD_INT 0
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 4
71034: PUSH
71035: LD_INT 1
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 3
71044: PUSH
71045: LD_INT 1
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 2
71054: PUSH
71055: LD_INT 0
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 2
71064: PUSH
71065: LD_INT 1
71067: NEG
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PUSH
71073: LD_INT 2
71075: PUSH
71076: LD_INT 2
71078: NEG
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 4
71086: PUSH
71087: LD_INT 2
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 4
71096: PUSH
71097: LD_INT 4
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 4
71106: PUSH
71107: LD_INT 3
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 5
71116: PUSH
71117: LD_INT 4
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 5
71126: PUSH
71127: LD_INT 5
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 4
71136: PUSH
71137: LD_INT 5
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 3
71146: PUSH
71147: LD_INT 4
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 3
71156: PUSH
71157: LD_INT 3
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 5
71166: PUSH
71167: LD_INT 3
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 3
71176: PUSH
71177: LD_INT 5
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 0
71186: PUSH
71187: LD_INT 3
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 0
71196: PUSH
71197: LD_INT 2
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 1
71206: PUSH
71207: LD_INT 3
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 1
71216: PUSH
71217: LD_INT 4
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 0
71226: PUSH
71227: LD_INT 4
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 1
71236: NEG
71237: PUSH
71238: LD_INT 3
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 1
71247: NEG
71248: PUSH
71249: LD_INT 2
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 2
71258: PUSH
71259: LD_INT 4
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 2
71268: NEG
71269: PUSH
71270: LD_INT 2
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 4
71279: NEG
71280: PUSH
71281: LD_INT 0
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: PUSH
71288: LD_INT 4
71290: NEG
71291: PUSH
71292: LD_INT 1
71294: NEG
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PUSH
71300: LD_INT 3
71302: NEG
71303: PUSH
71304: LD_INT 0
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: LD_INT 3
71313: NEG
71314: PUSH
71315: LD_INT 1
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 4
71324: NEG
71325: PUSH
71326: LD_INT 1
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: PUSH
71333: LD_INT 5
71335: NEG
71336: PUSH
71337: LD_INT 0
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 5
71346: NEG
71347: PUSH
71348: LD_INT 1
71350: NEG
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 5
71358: NEG
71359: PUSH
71360: LD_INT 2
71362: NEG
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: PUSH
71368: LD_INT 3
71370: NEG
71371: PUSH
71372: LD_INT 2
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: ST_TO_ADDR
// end ; end ;
71426: GO 71429
71428: POP
// case btype of b_depot , b_warehouse :
71429: LD_VAR 0 1
71433: PUSH
71434: LD_INT 0
71436: DOUBLE
71437: EQUAL
71438: IFTRUE 71448
71440: LD_INT 1
71442: DOUBLE
71443: EQUAL
71444: IFTRUE 71448
71446: GO 71649
71448: POP
// case nation of nation_american :
71449: LD_VAR 0 5
71453: PUSH
71454: LD_INT 1
71456: DOUBLE
71457: EQUAL
71458: IFTRUE 71462
71460: GO 71518
71462: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71463: LD_ADDR_VAR 0 9
71467: PUSH
71468: LD_VAR 0 11
71472: PUSH
71473: LD_VAR 0 12
71477: PUSH
71478: LD_VAR 0 13
71482: PUSH
71483: LD_VAR 0 14
71487: PUSH
71488: LD_VAR 0 15
71492: PUSH
71493: LD_VAR 0 16
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: PUSH
71506: LD_VAR 0 4
71510: PUSH
71511: LD_INT 1
71513: PLUS
71514: ARRAY
71515: ST_TO_ADDR
71516: GO 71647
71518: LD_INT 2
71520: DOUBLE
71521: EQUAL
71522: IFTRUE 71526
71524: GO 71582
71526: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71527: LD_ADDR_VAR 0 9
71531: PUSH
71532: LD_VAR 0 17
71536: PUSH
71537: LD_VAR 0 18
71541: PUSH
71542: LD_VAR 0 19
71546: PUSH
71547: LD_VAR 0 20
71551: PUSH
71552: LD_VAR 0 21
71556: PUSH
71557: LD_VAR 0 22
71561: PUSH
71562: EMPTY
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: PUSH
71570: LD_VAR 0 4
71574: PUSH
71575: LD_INT 1
71577: PLUS
71578: ARRAY
71579: ST_TO_ADDR
71580: GO 71647
71582: LD_INT 3
71584: DOUBLE
71585: EQUAL
71586: IFTRUE 71590
71588: GO 71646
71590: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71591: LD_ADDR_VAR 0 9
71595: PUSH
71596: LD_VAR 0 23
71600: PUSH
71601: LD_VAR 0 24
71605: PUSH
71606: LD_VAR 0 25
71610: PUSH
71611: LD_VAR 0 26
71615: PUSH
71616: LD_VAR 0 27
71620: PUSH
71621: LD_VAR 0 28
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: PUSH
71634: LD_VAR 0 4
71638: PUSH
71639: LD_INT 1
71641: PLUS
71642: ARRAY
71643: ST_TO_ADDR
71644: GO 71647
71646: POP
71647: GO 72202
71649: LD_INT 2
71651: DOUBLE
71652: EQUAL
71653: IFTRUE 71663
71655: LD_INT 3
71657: DOUBLE
71658: EQUAL
71659: IFTRUE 71663
71661: GO 71719
71663: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71664: LD_ADDR_VAR 0 9
71668: PUSH
71669: LD_VAR 0 29
71673: PUSH
71674: LD_VAR 0 30
71678: PUSH
71679: LD_VAR 0 31
71683: PUSH
71684: LD_VAR 0 32
71688: PUSH
71689: LD_VAR 0 33
71693: PUSH
71694: LD_VAR 0 34
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: PUSH
71707: LD_VAR 0 4
71711: PUSH
71712: LD_INT 1
71714: PLUS
71715: ARRAY
71716: ST_TO_ADDR
71717: GO 72202
71719: LD_INT 16
71721: DOUBLE
71722: EQUAL
71723: IFTRUE 71781
71725: LD_INT 17
71727: DOUBLE
71728: EQUAL
71729: IFTRUE 71781
71731: LD_INT 18
71733: DOUBLE
71734: EQUAL
71735: IFTRUE 71781
71737: LD_INT 19
71739: DOUBLE
71740: EQUAL
71741: IFTRUE 71781
71743: LD_INT 22
71745: DOUBLE
71746: EQUAL
71747: IFTRUE 71781
71749: LD_INT 20
71751: DOUBLE
71752: EQUAL
71753: IFTRUE 71781
71755: LD_INT 21
71757: DOUBLE
71758: EQUAL
71759: IFTRUE 71781
71761: LD_INT 23
71763: DOUBLE
71764: EQUAL
71765: IFTRUE 71781
71767: LD_INT 24
71769: DOUBLE
71770: EQUAL
71771: IFTRUE 71781
71773: LD_INT 25
71775: DOUBLE
71776: EQUAL
71777: IFTRUE 71781
71779: GO 71837
71781: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71782: LD_ADDR_VAR 0 9
71786: PUSH
71787: LD_VAR 0 35
71791: PUSH
71792: LD_VAR 0 36
71796: PUSH
71797: LD_VAR 0 37
71801: PUSH
71802: LD_VAR 0 38
71806: PUSH
71807: LD_VAR 0 39
71811: PUSH
71812: LD_VAR 0 40
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: LIST
71821: LIST
71822: LIST
71823: LIST
71824: PUSH
71825: LD_VAR 0 4
71829: PUSH
71830: LD_INT 1
71832: PLUS
71833: ARRAY
71834: ST_TO_ADDR
71835: GO 72202
71837: LD_INT 6
71839: DOUBLE
71840: EQUAL
71841: IFTRUE 71893
71843: LD_INT 7
71845: DOUBLE
71846: EQUAL
71847: IFTRUE 71893
71849: LD_INT 8
71851: DOUBLE
71852: EQUAL
71853: IFTRUE 71893
71855: LD_INT 13
71857: DOUBLE
71858: EQUAL
71859: IFTRUE 71893
71861: LD_INT 12
71863: DOUBLE
71864: EQUAL
71865: IFTRUE 71893
71867: LD_INT 15
71869: DOUBLE
71870: EQUAL
71871: IFTRUE 71893
71873: LD_INT 11
71875: DOUBLE
71876: EQUAL
71877: IFTRUE 71893
71879: LD_INT 14
71881: DOUBLE
71882: EQUAL
71883: IFTRUE 71893
71885: LD_INT 10
71887: DOUBLE
71888: EQUAL
71889: IFTRUE 71893
71891: GO 71949
71893: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71894: LD_ADDR_VAR 0 9
71898: PUSH
71899: LD_VAR 0 41
71903: PUSH
71904: LD_VAR 0 42
71908: PUSH
71909: LD_VAR 0 43
71913: PUSH
71914: LD_VAR 0 44
71918: PUSH
71919: LD_VAR 0 45
71923: PUSH
71924: LD_VAR 0 46
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: PUSH
71937: LD_VAR 0 4
71941: PUSH
71942: LD_INT 1
71944: PLUS
71945: ARRAY
71946: ST_TO_ADDR
71947: GO 72202
71949: LD_INT 36
71951: DOUBLE
71952: EQUAL
71953: IFTRUE 71957
71955: GO 72013
71957: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71958: LD_ADDR_VAR 0 9
71962: PUSH
71963: LD_VAR 0 47
71967: PUSH
71968: LD_VAR 0 48
71972: PUSH
71973: LD_VAR 0 49
71977: PUSH
71978: LD_VAR 0 50
71982: PUSH
71983: LD_VAR 0 51
71987: PUSH
71988: LD_VAR 0 52
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: LIST
71997: LIST
71998: LIST
71999: LIST
72000: PUSH
72001: LD_VAR 0 4
72005: PUSH
72006: LD_INT 1
72008: PLUS
72009: ARRAY
72010: ST_TO_ADDR
72011: GO 72202
72013: LD_INT 4
72015: DOUBLE
72016: EQUAL
72017: IFTRUE 72039
72019: LD_INT 5
72021: DOUBLE
72022: EQUAL
72023: IFTRUE 72039
72025: LD_INT 34
72027: DOUBLE
72028: EQUAL
72029: IFTRUE 72039
72031: LD_INT 37
72033: DOUBLE
72034: EQUAL
72035: IFTRUE 72039
72037: GO 72095
72039: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72040: LD_ADDR_VAR 0 9
72044: PUSH
72045: LD_VAR 0 53
72049: PUSH
72050: LD_VAR 0 54
72054: PUSH
72055: LD_VAR 0 55
72059: PUSH
72060: LD_VAR 0 56
72064: PUSH
72065: LD_VAR 0 57
72069: PUSH
72070: LD_VAR 0 58
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: PUSH
72083: LD_VAR 0 4
72087: PUSH
72088: LD_INT 1
72090: PLUS
72091: ARRAY
72092: ST_TO_ADDR
72093: GO 72202
72095: LD_INT 31
72097: DOUBLE
72098: EQUAL
72099: IFTRUE 72145
72101: LD_INT 32
72103: DOUBLE
72104: EQUAL
72105: IFTRUE 72145
72107: LD_INT 33
72109: DOUBLE
72110: EQUAL
72111: IFTRUE 72145
72113: LD_INT 27
72115: DOUBLE
72116: EQUAL
72117: IFTRUE 72145
72119: LD_INT 26
72121: DOUBLE
72122: EQUAL
72123: IFTRUE 72145
72125: LD_INT 28
72127: DOUBLE
72128: EQUAL
72129: IFTRUE 72145
72131: LD_INT 29
72133: DOUBLE
72134: EQUAL
72135: IFTRUE 72145
72137: LD_INT 30
72139: DOUBLE
72140: EQUAL
72141: IFTRUE 72145
72143: GO 72201
72145: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72146: LD_ADDR_VAR 0 9
72150: PUSH
72151: LD_VAR 0 59
72155: PUSH
72156: LD_VAR 0 60
72160: PUSH
72161: LD_VAR 0 61
72165: PUSH
72166: LD_VAR 0 62
72170: PUSH
72171: LD_VAR 0 63
72175: PUSH
72176: LD_VAR 0 64
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: LIST
72185: LIST
72186: LIST
72187: LIST
72188: PUSH
72189: LD_VAR 0 4
72193: PUSH
72194: LD_INT 1
72196: PLUS
72197: ARRAY
72198: ST_TO_ADDR
72199: GO 72202
72201: POP
// temp_list2 = [ ] ;
72202: LD_ADDR_VAR 0 10
72206: PUSH
72207: EMPTY
72208: ST_TO_ADDR
// for i in temp_list do
72209: LD_ADDR_VAR 0 8
72213: PUSH
72214: LD_VAR 0 9
72218: PUSH
72219: FOR_IN
72220: IFFALSE 72272
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72222: LD_ADDR_VAR 0 10
72226: PUSH
72227: LD_VAR 0 10
72231: PUSH
72232: LD_VAR 0 8
72236: PUSH
72237: LD_INT 1
72239: ARRAY
72240: PUSH
72241: LD_VAR 0 2
72245: PLUS
72246: PUSH
72247: LD_VAR 0 8
72251: PUSH
72252: LD_INT 2
72254: ARRAY
72255: PUSH
72256: LD_VAR 0 3
72260: PLUS
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PUSH
72266: EMPTY
72267: LIST
72268: ADD
72269: ST_TO_ADDR
72270: GO 72219
72272: POP
72273: POP
// result = temp_list2 ;
72274: LD_ADDR_VAR 0 7
72278: PUSH
72279: LD_VAR 0 10
72283: ST_TO_ADDR
// end ;
72284: LD_VAR 0 7
72288: RET
// export function EnemyInRange ( unit , dist ) ; begin
72289: LD_INT 0
72291: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72292: LD_ADDR_VAR 0 3
72296: PUSH
72297: LD_VAR 0 1
72301: PPUSH
72302: CALL_OW 255
72306: PPUSH
72307: LD_VAR 0 1
72311: PPUSH
72312: CALL_OW 250
72316: PPUSH
72317: LD_VAR 0 1
72321: PPUSH
72322: CALL_OW 251
72326: PPUSH
72327: LD_VAR 0 2
72331: PPUSH
72332: CALL 45662 0 4
72336: PUSH
72337: LD_INT 4
72339: ARRAY
72340: ST_TO_ADDR
// end ;
72341: LD_VAR 0 3
72345: RET
// export function PlayerSeeMe ( unit ) ; begin
72346: LD_INT 0
72348: PPUSH
// result := See ( your_side , unit ) ;
72349: LD_ADDR_VAR 0 2
72353: PUSH
72354: LD_OWVAR 2
72358: PPUSH
72359: LD_VAR 0 1
72363: PPUSH
72364: CALL_OW 292
72368: ST_TO_ADDR
// end ;
72369: LD_VAR 0 2
72373: RET
// export function ReverseDir ( unit ) ; begin
72374: LD_INT 0
72376: PPUSH
// if not unit then
72377: LD_VAR 0 1
72381: NOT
72382: IFFALSE 72386
// exit ;
72384: GO 72409
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72386: LD_ADDR_VAR 0 2
72390: PUSH
72391: LD_VAR 0 1
72395: PPUSH
72396: CALL_OW 254
72400: PUSH
72401: LD_INT 3
72403: PLUS
72404: PUSH
72405: LD_INT 6
72407: MOD
72408: ST_TO_ADDR
// end ;
72409: LD_VAR 0 2
72413: RET
// export function ReverseArray ( array ) ; var i ; begin
72414: LD_INT 0
72416: PPUSH
72417: PPUSH
// if not array then
72418: LD_VAR 0 1
72422: NOT
72423: IFFALSE 72427
// exit ;
72425: GO 72482
// result := [ ] ;
72427: LD_ADDR_VAR 0 2
72431: PUSH
72432: EMPTY
72433: ST_TO_ADDR
// for i := array downto 1 do
72434: LD_ADDR_VAR 0 3
72438: PUSH
72439: DOUBLE
72440: LD_VAR 0 1
72444: INC
72445: ST_TO_ADDR
72446: LD_INT 1
72448: PUSH
72449: FOR_DOWNTO
72450: IFFALSE 72480
// result := Join ( result , array [ i ] ) ;
72452: LD_ADDR_VAR 0 2
72456: PUSH
72457: LD_VAR 0 2
72461: PPUSH
72462: LD_VAR 0 1
72466: PUSH
72467: LD_VAR 0 3
72471: ARRAY
72472: PPUSH
72473: CALL 77125 0 2
72477: ST_TO_ADDR
72478: GO 72449
72480: POP
72481: POP
// end ;
72482: LD_VAR 0 2
72486: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72487: LD_INT 0
72489: PPUSH
72490: PPUSH
72491: PPUSH
72492: PPUSH
72493: PPUSH
72494: PPUSH
// if not unit or not hexes then
72495: LD_VAR 0 1
72499: NOT
72500: PUSH
72501: LD_VAR 0 2
72505: NOT
72506: OR
72507: IFFALSE 72511
// exit ;
72509: GO 72634
// dist := 9999 ;
72511: LD_ADDR_VAR 0 5
72515: PUSH
72516: LD_INT 9999
72518: ST_TO_ADDR
// for i = 1 to hexes do
72519: LD_ADDR_VAR 0 4
72523: PUSH
72524: DOUBLE
72525: LD_INT 1
72527: DEC
72528: ST_TO_ADDR
72529: LD_VAR 0 2
72533: PUSH
72534: FOR_TO
72535: IFFALSE 72622
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72537: LD_ADDR_VAR 0 6
72541: PUSH
72542: LD_VAR 0 1
72546: PPUSH
72547: LD_VAR 0 2
72551: PUSH
72552: LD_VAR 0 4
72556: ARRAY
72557: PUSH
72558: LD_INT 1
72560: ARRAY
72561: PPUSH
72562: LD_VAR 0 2
72566: PUSH
72567: LD_VAR 0 4
72571: ARRAY
72572: PUSH
72573: LD_INT 2
72575: ARRAY
72576: PPUSH
72577: CALL_OW 297
72581: ST_TO_ADDR
// if tdist < dist then
72582: LD_VAR 0 6
72586: PUSH
72587: LD_VAR 0 5
72591: LESS
72592: IFFALSE 72620
// begin hex := hexes [ i ] ;
72594: LD_ADDR_VAR 0 8
72598: PUSH
72599: LD_VAR 0 2
72603: PUSH
72604: LD_VAR 0 4
72608: ARRAY
72609: ST_TO_ADDR
// dist := tdist ;
72610: LD_ADDR_VAR 0 5
72614: PUSH
72615: LD_VAR 0 6
72619: ST_TO_ADDR
// end ; end ;
72620: GO 72534
72622: POP
72623: POP
// result := hex ;
72624: LD_ADDR_VAR 0 3
72628: PUSH
72629: LD_VAR 0 8
72633: ST_TO_ADDR
// end ;
72634: LD_VAR 0 3
72638: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72639: LD_INT 0
72641: PPUSH
72642: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72643: LD_VAR 0 1
72647: NOT
72648: PUSH
72649: LD_VAR 0 1
72653: PUSH
72654: LD_INT 21
72656: PUSH
72657: LD_INT 2
72659: PUSH
72660: EMPTY
72661: LIST
72662: LIST
72663: PUSH
72664: LD_INT 23
72666: PUSH
72667: LD_INT 2
72669: PUSH
72670: EMPTY
72671: LIST
72672: LIST
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: PPUSH
72678: CALL_OW 69
72682: IN
72683: NOT
72684: OR
72685: IFFALSE 72689
// exit ;
72687: GO 72736
// for i = 1 to 3 do
72689: LD_ADDR_VAR 0 3
72693: PUSH
72694: DOUBLE
72695: LD_INT 1
72697: DEC
72698: ST_TO_ADDR
72699: LD_INT 3
72701: PUSH
72702: FOR_TO
72703: IFFALSE 72734
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72705: LD_VAR 0 1
72709: PPUSH
72710: CALL_OW 250
72714: PPUSH
72715: LD_VAR 0 1
72719: PPUSH
72720: CALL_OW 251
72724: PPUSH
72725: LD_INT 1
72727: PPUSH
72728: CALL_OW 453
72732: GO 72702
72734: POP
72735: POP
// end ;
72736: LD_VAR 0 2
72740: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72741: LD_INT 0
72743: PPUSH
72744: PPUSH
72745: PPUSH
72746: PPUSH
72747: PPUSH
72748: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72749: LD_VAR 0 1
72753: NOT
72754: PUSH
72755: LD_VAR 0 2
72759: NOT
72760: OR
72761: PUSH
72762: LD_VAR 0 1
72766: PPUSH
72767: CALL_OW 314
72771: OR
72772: IFFALSE 72776
// exit ;
72774: GO 73243
// if GetLives ( i ) < 250 then
72776: LD_VAR 0 4
72780: PPUSH
72781: CALL_OW 256
72785: PUSH
72786: LD_INT 250
72788: LESS
72789: IFFALSE 72802
// begin ComAutodestruct ( i ) ;
72791: LD_VAR 0 4
72795: PPUSH
72796: CALL 72639 0 1
// exit ;
72800: GO 73243
// end ; x := GetX ( enemy_unit ) ;
72802: LD_ADDR_VAR 0 7
72806: PUSH
72807: LD_VAR 0 2
72811: PPUSH
72812: CALL_OW 250
72816: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72817: LD_ADDR_VAR 0 8
72821: PUSH
72822: LD_VAR 0 2
72826: PPUSH
72827: CALL_OW 251
72831: ST_TO_ADDR
// if not x or not y then
72832: LD_VAR 0 7
72836: NOT
72837: PUSH
72838: LD_VAR 0 8
72842: NOT
72843: OR
72844: IFFALSE 72848
// exit ;
72846: GO 73243
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72848: LD_ADDR_VAR 0 6
72852: PUSH
72853: LD_VAR 0 7
72857: PPUSH
72858: LD_INT 0
72860: PPUSH
72861: LD_INT 4
72863: PPUSH
72864: CALL_OW 272
72868: PUSH
72869: LD_VAR 0 8
72873: PPUSH
72874: LD_INT 0
72876: PPUSH
72877: LD_INT 4
72879: PPUSH
72880: CALL_OW 273
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: LD_VAR 0 7
72893: PPUSH
72894: LD_INT 1
72896: PPUSH
72897: LD_INT 4
72899: PPUSH
72900: CALL_OW 272
72904: PUSH
72905: LD_VAR 0 8
72909: PPUSH
72910: LD_INT 1
72912: PPUSH
72913: LD_INT 4
72915: PPUSH
72916: CALL_OW 273
72920: PUSH
72921: EMPTY
72922: LIST
72923: LIST
72924: PUSH
72925: LD_VAR 0 7
72929: PPUSH
72930: LD_INT 2
72932: PPUSH
72933: LD_INT 4
72935: PPUSH
72936: CALL_OW 272
72940: PUSH
72941: LD_VAR 0 8
72945: PPUSH
72946: LD_INT 2
72948: PPUSH
72949: LD_INT 4
72951: PPUSH
72952: CALL_OW 273
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_VAR 0 7
72965: PPUSH
72966: LD_INT 3
72968: PPUSH
72969: LD_INT 4
72971: PPUSH
72972: CALL_OW 272
72976: PUSH
72977: LD_VAR 0 8
72981: PPUSH
72982: LD_INT 3
72984: PPUSH
72985: LD_INT 4
72987: PPUSH
72988: CALL_OW 273
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: PUSH
72997: LD_VAR 0 7
73001: PPUSH
73002: LD_INT 4
73004: PPUSH
73005: LD_INT 4
73007: PPUSH
73008: CALL_OW 272
73012: PUSH
73013: LD_VAR 0 8
73017: PPUSH
73018: LD_INT 4
73020: PPUSH
73021: LD_INT 4
73023: PPUSH
73024: CALL_OW 273
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: PUSH
73033: LD_VAR 0 7
73037: PPUSH
73038: LD_INT 5
73040: PPUSH
73041: LD_INT 4
73043: PPUSH
73044: CALL_OW 272
73048: PUSH
73049: LD_VAR 0 8
73053: PPUSH
73054: LD_INT 5
73056: PPUSH
73057: LD_INT 4
73059: PPUSH
73060: CALL_OW 273
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: LIST
73073: LIST
73074: LIST
73075: LIST
73076: ST_TO_ADDR
// for i = tmp downto 1 do
73077: LD_ADDR_VAR 0 4
73081: PUSH
73082: DOUBLE
73083: LD_VAR 0 6
73087: INC
73088: ST_TO_ADDR
73089: LD_INT 1
73091: PUSH
73092: FOR_DOWNTO
73093: IFFALSE 73194
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73095: LD_VAR 0 6
73099: PUSH
73100: LD_VAR 0 4
73104: ARRAY
73105: PUSH
73106: LD_INT 1
73108: ARRAY
73109: PPUSH
73110: LD_VAR 0 6
73114: PUSH
73115: LD_VAR 0 4
73119: ARRAY
73120: PUSH
73121: LD_INT 2
73123: ARRAY
73124: PPUSH
73125: CALL_OW 488
73129: NOT
73130: PUSH
73131: LD_VAR 0 6
73135: PUSH
73136: LD_VAR 0 4
73140: ARRAY
73141: PUSH
73142: LD_INT 1
73144: ARRAY
73145: PPUSH
73146: LD_VAR 0 6
73150: PUSH
73151: LD_VAR 0 4
73155: ARRAY
73156: PUSH
73157: LD_INT 2
73159: ARRAY
73160: PPUSH
73161: CALL_OW 428
73165: PUSH
73166: LD_INT 0
73168: NONEQUAL
73169: OR
73170: IFFALSE 73192
// tmp := Delete ( tmp , i ) ;
73172: LD_ADDR_VAR 0 6
73176: PUSH
73177: LD_VAR 0 6
73181: PPUSH
73182: LD_VAR 0 4
73186: PPUSH
73187: CALL_OW 3
73191: ST_TO_ADDR
73192: GO 73092
73194: POP
73195: POP
// j := GetClosestHex ( unit , tmp ) ;
73196: LD_ADDR_VAR 0 5
73200: PUSH
73201: LD_VAR 0 1
73205: PPUSH
73206: LD_VAR 0 6
73210: PPUSH
73211: CALL 72487 0 2
73215: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73216: LD_VAR 0 1
73220: PPUSH
73221: LD_VAR 0 5
73225: PUSH
73226: LD_INT 1
73228: ARRAY
73229: PPUSH
73230: LD_VAR 0 5
73234: PUSH
73235: LD_INT 2
73237: ARRAY
73238: PPUSH
73239: CALL_OW 111
// end ;
73243: LD_VAR 0 3
73247: RET
// export function PrepareApemanSoldier ( ) ; begin
73248: LD_INT 0
73250: PPUSH
// uc_nation := 0 ;
73251: LD_ADDR_OWVAR 21
73255: PUSH
73256: LD_INT 0
73258: ST_TO_ADDR
// hc_sex := sex_male ;
73259: LD_ADDR_OWVAR 27
73263: PUSH
73264: LD_INT 1
73266: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73267: LD_ADDR_OWVAR 28
73271: PUSH
73272: LD_INT 15
73274: ST_TO_ADDR
// hc_gallery :=  ;
73275: LD_ADDR_OWVAR 33
73279: PUSH
73280: LD_STRING 
73282: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73283: LD_ADDR_OWVAR 31
73287: PUSH
73288: LD_INT 0
73290: PPUSH
73291: LD_INT 3
73293: PPUSH
73294: CALL_OW 12
73298: PUSH
73299: LD_INT 0
73301: PPUSH
73302: LD_INT 3
73304: PPUSH
73305: CALL_OW 12
73309: PUSH
73310: LD_INT 0
73312: PUSH
73313: LD_INT 0
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: ST_TO_ADDR
// end ;
73322: LD_VAR 0 1
73326: RET
// export function PrepareApemanEngineer ( ) ; begin
73327: LD_INT 0
73329: PPUSH
// uc_nation := 0 ;
73330: LD_ADDR_OWVAR 21
73334: PUSH
73335: LD_INT 0
73337: ST_TO_ADDR
// hc_sex := sex_male ;
73338: LD_ADDR_OWVAR 27
73342: PUSH
73343: LD_INT 1
73345: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73346: LD_ADDR_OWVAR 28
73350: PUSH
73351: LD_INT 16
73353: ST_TO_ADDR
// hc_gallery :=  ;
73354: LD_ADDR_OWVAR 33
73358: PUSH
73359: LD_STRING 
73361: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73362: LD_ADDR_OWVAR 31
73366: PUSH
73367: LD_INT 0
73369: PPUSH
73370: LD_INT 3
73372: PPUSH
73373: CALL_OW 12
73377: PUSH
73378: LD_INT 0
73380: PPUSH
73381: LD_INT 3
73383: PPUSH
73384: CALL_OW 12
73388: PUSH
73389: LD_INT 0
73391: PUSH
73392: LD_INT 0
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: LIST
73399: LIST
73400: ST_TO_ADDR
// end ;
73401: LD_VAR 0 1
73405: RET
// export function PrepareApeman ( agressivity ) ; begin
73406: LD_INT 0
73408: PPUSH
// uc_side := 0 ;
73409: LD_ADDR_OWVAR 20
73413: PUSH
73414: LD_INT 0
73416: ST_TO_ADDR
// uc_nation := 0 ;
73417: LD_ADDR_OWVAR 21
73421: PUSH
73422: LD_INT 0
73424: ST_TO_ADDR
// hc_sex := sex_male ;
73425: LD_ADDR_OWVAR 27
73429: PUSH
73430: LD_INT 1
73432: ST_TO_ADDR
// hc_class := class_apeman ;
73433: LD_ADDR_OWVAR 28
73437: PUSH
73438: LD_INT 12
73440: ST_TO_ADDR
// hc_gallery :=  ;
73441: LD_ADDR_OWVAR 33
73445: PUSH
73446: LD_STRING 
73448: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73449: LD_ADDR_OWVAR 35
73453: PUSH
73454: LD_VAR 0 1
73458: NEG
73459: PPUSH
73460: LD_VAR 0 1
73464: PPUSH
73465: CALL_OW 12
73469: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73470: LD_ADDR_OWVAR 31
73474: PUSH
73475: LD_INT 0
73477: PPUSH
73478: LD_INT 3
73480: PPUSH
73481: CALL_OW 12
73485: PUSH
73486: LD_INT 0
73488: PPUSH
73489: LD_INT 3
73491: PPUSH
73492: CALL_OW 12
73496: PUSH
73497: LD_INT 0
73499: PUSH
73500: LD_INT 0
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: LIST
73507: LIST
73508: ST_TO_ADDR
// end ;
73509: LD_VAR 0 2
73513: RET
// export function PrepareTiger ( agressivity ) ; begin
73514: LD_INT 0
73516: PPUSH
// uc_side := 0 ;
73517: LD_ADDR_OWVAR 20
73521: PUSH
73522: LD_INT 0
73524: ST_TO_ADDR
// uc_nation := 0 ;
73525: LD_ADDR_OWVAR 21
73529: PUSH
73530: LD_INT 0
73532: ST_TO_ADDR
// hc_class := class_tiger ;
73533: LD_ADDR_OWVAR 28
73537: PUSH
73538: LD_INT 14
73540: ST_TO_ADDR
// hc_gallery :=  ;
73541: LD_ADDR_OWVAR 33
73545: PUSH
73546: LD_STRING 
73548: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73549: LD_ADDR_OWVAR 35
73553: PUSH
73554: LD_VAR 0 1
73558: NEG
73559: PPUSH
73560: LD_VAR 0 1
73564: PPUSH
73565: CALL_OW 12
73569: ST_TO_ADDR
// end ;
73570: LD_VAR 0 2
73574: RET
// export function PrepareEnchidna ( ) ; begin
73575: LD_INT 0
73577: PPUSH
// uc_side := 0 ;
73578: LD_ADDR_OWVAR 20
73582: PUSH
73583: LD_INT 0
73585: ST_TO_ADDR
// uc_nation := 0 ;
73586: LD_ADDR_OWVAR 21
73590: PUSH
73591: LD_INT 0
73593: ST_TO_ADDR
// hc_class := class_baggie ;
73594: LD_ADDR_OWVAR 28
73598: PUSH
73599: LD_INT 13
73601: ST_TO_ADDR
// hc_gallery :=  ;
73602: LD_ADDR_OWVAR 33
73606: PUSH
73607: LD_STRING 
73609: ST_TO_ADDR
// end ;
73610: LD_VAR 0 1
73614: RET
// export function PrepareFrog ( ) ; begin
73615: LD_INT 0
73617: PPUSH
// uc_side := 0 ;
73618: LD_ADDR_OWVAR 20
73622: PUSH
73623: LD_INT 0
73625: ST_TO_ADDR
// uc_nation := 0 ;
73626: LD_ADDR_OWVAR 21
73630: PUSH
73631: LD_INT 0
73633: ST_TO_ADDR
// hc_class := class_frog ;
73634: LD_ADDR_OWVAR 28
73638: PUSH
73639: LD_INT 19
73641: ST_TO_ADDR
// hc_gallery :=  ;
73642: LD_ADDR_OWVAR 33
73646: PUSH
73647: LD_STRING 
73649: ST_TO_ADDR
// end ;
73650: LD_VAR 0 1
73654: RET
// export function PrepareFish ( ) ; begin
73655: LD_INT 0
73657: PPUSH
// uc_side := 0 ;
73658: LD_ADDR_OWVAR 20
73662: PUSH
73663: LD_INT 0
73665: ST_TO_ADDR
// uc_nation := 0 ;
73666: LD_ADDR_OWVAR 21
73670: PUSH
73671: LD_INT 0
73673: ST_TO_ADDR
// hc_class := class_fish ;
73674: LD_ADDR_OWVAR 28
73678: PUSH
73679: LD_INT 20
73681: ST_TO_ADDR
// hc_gallery :=  ;
73682: LD_ADDR_OWVAR 33
73686: PUSH
73687: LD_STRING 
73689: ST_TO_ADDR
// end ;
73690: LD_VAR 0 1
73694: RET
// export function PrepareBird ( ) ; begin
73695: LD_INT 0
73697: PPUSH
// uc_side := 0 ;
73698: LD_ADDR_OWVAR 20
73702: PUSH
73703: LD_INT 0
73705: ST_TO_ADDR
// uc_nation := 0 ;
73706: LD_ADDR_OWVAR 21
73710: PUSH
73711: LD_INT 0
73713: ST_TO_ADDR
// hc_class := class_phororhacos ;
73714: LD_ADDR_OWVAR 28
73718: PUSH
73719: LD_INT 18
73721: ST_TO_ADDR
// hc_gallery :=  ;
73722: LD_ADDR_OWVAR 33
73726: PUSH
73727: LD_STRING 
73729: ST_TO_ADDR
// end ;
73730: LD_VAR 0 1
73734: RET
// export function PrepareHorse ( ) ; begin
73735: LD_INT 0
73737: PPUSH
// uc_side := 0 ;
73738: LD_ADDR_OWVAR 20
73742: PUSH
73743: LD_INT 0
73745: ST_TO_ADDR
// uc_nation := 0 ;
73746: LD_ADDR_OWVAR 21
73750: PUSH
73751: LD_INT 0
73753: ST_TO_ADDR
// hc_class := class_horse ;
73754: LD_ADDR_OWVAR 28
73758: PUSH
73759: LD_INT 21
73761: ST_TO_ADDR
// hc_gallery :=  ;
73762: LD_ADDR_OWVAR 33
73766: PUSH
73767: LD_STRING 
73769: ST_TO_ADDR
// end ;
73770: LD_VAR 0 1
73774: RET
// export function PrepareMastodont ( ) ; begin
73775: LD_INT 0
73777: PPUSH
// uc_side := 0 ;
73778: LD_ADDR_OWVAR 20
73782: PUSH
73783: LD_INT 0
73785: ST_TO_ADDR
// uc_nation := 0 ;
73786: LD_ADDR_OWVAR 21
73790: PUSH
73791: LD_INT 0
73793: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73794: LD_ADDR_OWVAR 37
73798: PUSH
73799: LD_INT 31
73801: ST_TO_ADDR
// vc_control := control_rider ;
73802: LD_ADDR_OWVAR 38
73806: PUSH
73807: LD_INT 4
73809: ST_TO_ADDR
// end ;
73810: LD_VAR 0 1
73814: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73815: LD_INT 0
73817: PPUSH
73818: PPUSH
73819: PPUSH
// uc_side = 0 ;
73820: LD_ADDR_OWVAR 20
73824: PUSH
73825: LD_INT 0
73827: ST_TO_ADDR
// uc_nation = 0 ;
73828: LD_ADDR_OWVAR 21
73832: PUSH
73833: LD_INT 0
73835: ST_TO_ADDR
// InitHc_All ( ) ;
73836: CALL_OW 584
// InitVc ;
73840: CALL_OW 20
// if mastodonts then
73844: LD_VAR 0 6
73848: IFFALSE 73915
// for i = 1 to mastodonts do
73850: LD_ADDR_VAR 0 11
73854: PUSH
73855: DOUBLE
73856: LD_INT 1
73858: DEC
73859: ST_TO_ADDR
73860: LD_VAR 0 6
73864: PUSH
73865: FOR_TO
73866: IFFALSE 73913
// begin vc_chassis := 31 ;
73868: LD_ADDR_OWVAR 37
73872: PUSH
73873: LD_INT 31
73875: ST_TO_ADDR
// vc_control := control_rider ;
73876: LD_ADDR_OWVAR 38
73880: PUSH
73881: LD_INT 4
73883: ST_TO_ADDR
// animal := CreateVehicle ;
73884: LD_ADDR_VAR 0 12
73888: PUSH
73889: CALL_OW 45
73893: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73894: LD_VAR 0 12
73898: PPUSH
73899: LD_VAR 0 8
73903: PPUSH
73904: LD_INT 0
73906: PPUSH
73907: CALL 76043 0 3
// end ;
73911: GO 73865
73913: POP
73914: POP
// if horses then
73915: LD_VAR 0 5
73919: IFFALSE 73986
// for i = 1 to horses do
73921: LD_ADDR_VAR 0 11
73925: PUSH
73926: DOUBLE
73927: LD_INT 1
73929: DEC
73930: ST_TO_ADDR
73931: LD_VAR 0 5
73935: PUSH
73936: FOR_TO
73937: IFFALSE 73984
// begin hc_class := 21 ;
73939: LD_ADDR_OWVAR 28
73943: PUSH
73944: LD_INT 21
73946: ST_TO_ADDR
// hc_gallery :=  ;
73947: LD_ADDR_OWVAR 33
73951: PUSH
73952: LD_STRING 
73954: ST_TO_ADDR
// animal := CreateHuman ;
73955: LD_ADDR_VAR 0 12
73959: PUSH
73960: CALL_OW 44
73964: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73965: LD_VAR 0 12
73969: PPUSH
73970: LD_VAR 0 8
73974: PPUSH
73975: LD_INT 0
73977: PPUSH
73978: CALL 76043 0 3
// end ;
73982: GO 73936
73984: POP
73985: POP
// if birds then
73986: LD_VAR 0 1
73990: IFFALSE 74057
// for i = 1 to birds do
73992: LD_ADDR_VAR 0 11
73996: PUSH
73997: DOUBLE
73998: LD_INT 1
74000: DEC
74001: ST_TO_ADDR
74002: LD_VAR 0 1
74006: PUSH
74007: FOR_TO
74008: IFFALSE 74055
// begin hc_class := 18 ;
74010: LD_ADDR_OWVAR 28
74014: PUSH
74015: LD_INT 18
74017: ST_TO_ADDR
// hc_gallery =  ;
74018: LD_ADDR_OWVAR 33
74022: PUSH
74023: LD_STRING 
74025: ST_TO_ADDR
// animal := CreateHuman ;
74026: LD_ADDR_VAR 0 12
74030: PUSH
74031: CALL_OW 44
74035: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74036: LD_VAR 0 12
74040: PPUSH
74041: LD_VAR 0 8
74045: PPUSH
74046: LD_INT 0
74048: PPUSH
74049: CALL 76043 0 3
// end ;
74053: GO 74007
74055: POP
74056: POP
// if tigers then
74057: LD_VAR 0 2
74061: IFFALSE 74145
// for i = 1 to tigers do
74063: LD_ADDR_VAR 0 11
74067: PUSH
74068: DOUBLE
74069: LD_INT 1
74071: DEC
74072: ST_TO_ADDR
74073: LD_VAR 0 2
74077: PUSH
74078: FOR_TO
74079: IFFALSE 74143
// begin hc_class = class_tiger ;
74081: LD_ADDR_OWVAR 28
74085: PUSH
74086: LD_INT 14
74088: ST_TO_ADDR
// hc_gallery =  ;
74089: LD_ADDR_OWVAR 33
74093: PUSH
74094: LD_STRING 
74096: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74097: LD_ADDR_OWVAR 35
74101: PUSH
74102: LD_INT 7
74104: NEG
74105: PPUSH
74106: LD_INT 7
74108: PPUSH
74109: CALL_OW 12
74113: ST_TO_ADDR
// animal := CreateHuman ;
74114: LD_ADDR_VAR 0 12
74118: PUSH
74119: CALL_OW 44
74123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74124: LD_VAR 0 12
74128: PPUSH
74129: LD_VAR 0 8
74133: PPUSH
74134: LD_INT 0
74136: PPUSH
74137: CALL 76043 0 3
// end ;
74141: GO 74078
74143: POP
74144: POP
// if apemans then
74145: LD_VAR 0 3
74149: IFFALSE 74272
// for i = 1 to apemans do
74151: LD_ADDR_VAR 0 11
74155: PUSH
74156: DOUBLE
74157: LD_INT 1
74159: DEC
74160: ST_TO_ADDR
74161: LD_VAR 0 3
74165: PUSH
74166: FOR_TO
74167: IFFALSE 74270
// begin hc_class = class_apeman ;
74169: LD_ADDR_OWVAR 28
74173: PUSH
74174: LD_INT 12
74176: ST_TO_ADDR
// hc_gallery =  ;
74177: LD_ADDR_OWVAR 33
74181: PUSH
74182: LD_STRING 
74184: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74185: LD_ADDR_OWVAR 35
74189: PUSH
74190: LD_INT 2
74192: NEG
74193: PPUSH
74194: LD_INT 2
74196: PPUSH
74197: CALL_OW 12
74201: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74202: LD_ADDR_OWVAR 31
74206: PUSH
74207: LD_INT 1
74209: PPUSH
74210: LD_INT 3
74212: PPUSH
74213: CALL_OW 12
74217: PUSH
74218: LD_INT 1
74220: PPUSH
74221: LD_INT 3
74223: PPUSH
74224: CALL_OW 12
74228: PUSH
74229: LD_INT 0
74231: PUSH
74232: LD_INT 0
74234: PUSH
74235: EMPTY
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: ST_TO_ADDR
// animal := CreateHuman ;
74241: LD_ADDR_VAR 0 12
74245: PUSH
74246: CALL_OW 44
74250: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74251: LD_VAR 0 12
74255: PPUSH
74256: LD_VAR 0 8
74260: PPUSH
74261: LD_INT 0
74263: PPUSH
74264: CALL 76043 0 3
// end ;
74268: GO 74166
74270: POP
74271: POP
// if enchidnas then
74272: LD_VAR 0 4
74276: IFFALSE 74343
// for i = 1 to enchidnas do
74278: LD_ADDR_VAR 0 11
74282: PUSH
74283: DOUBLE
74284: LD_INT 1
74286: DEC
74287: ST_TO_ADDR
74288: LD_VAR 0 4
74292: PUSH
74293: FOR_TO
74294: IFFALSE 74341
// begin hc_class = 13 ;
74296: LD_ADDR_OWVAR 28
74300: PUSH
74301: LD_INT 13
74303: ST_TO_ADDR
// hc_gallery =  ;
74304: LD_ADDR_OWVAR 33
74308: PUSH
74309: LD_STRING 
74311: ST_TO_ADDR
// animal := CreateHuman ;
74312: LD_ADDR_VAR 0 12
74316: PUSH
74317: CALL_OW 44
74321: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74322: LD_VAR 0 12
74326: PPUSH
74327: LD_VAR 0 8
74331: PPUSH
74332: LD_INT 0
74334: PPUSH
74335: CALL 76043 0 3
// end ;
74339: GO 74293
74341: POP
74342: POP
// if fishes then
74343: LD_VAR 0 7
74347: IFFALSE 74414
// for i = 1 to fishes do
74349: LD_ADDR_VAR 0 11
74353: PUSH
74354: DOUBLE
74355: LD_INT 1
74357: DEC
74358: ST_TO_ADDR
74359: LD_VAR 0 7
74363: PUSH
74364: FOR_TO
74365: IFFALSE 74412
// begin hc_class = 20 ;
74367: LD_ADDR_OWVAR 28
74371: PUSH
74372: LD_INT 20
74374: ST_TO_ADDR
// hc_gallery =  ;
74375: LD_ADDR_OWVAR 33
74379: PUSH
74380: LD_STRING 
74382: ST_TO_ADDR
// animal := CreateHuman ;
74383: LD_ADDR_VAR 0 12
74387: PUSH
74388: CALL_OW 44
74392: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74393: LD_VAR 0 12
74397: PPUSH
74398: LD_VAR 0 9
74402: PPUSH
74403: LD_INT 0
74405: PPUSH
74406: CALL 76043 0 3
// end ;
74410: GO 74364
74412: POP
74413: POP
// end ;
74414: LD_VAR 0 10
74418: RET
// export function WantHeal ( sci , unit ) ; begin
74419: LD_INT 0
74421: PPUSH
// if GetTaskList ( sci ) > 0 then
74422: LD_VAR 0 1
74426: PPUSH
74427: CALL_OW 437
74431: PUSH
74432: LD_INT 0
74434: GREATER
74435: IFFALSE 74505
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74437: LD_VAR 0 1
74441: PPUSH
74442: CALL_OW 437
74446: PUSH
74447: LD_INT 1
74449: ARRAY
74450: PUSH
74451: LD_INT 1
74453: ARRAY
74454: PUSH
74455: LD_STRING l
74457: EQUAL
74458: PUSH
74459: LD_VAR 0 1
74463: PPUSH
74464: CALL_OW 437
74468: PUSH
74469: LD_INT 1
74471: ARRAY
74472: PUSH
74473: LD_INT 4
74475: ARRAY
74476: PUSH
74477: LD_VAR 0 2
74481: EQUAL
74482: AND
74483: IFFALSE 74495
// result := true else
74485: LD_ADDR_VAR 0 3
74489: PUSH
74490: LD_INT 1
74492: ST_TO_ADDR
74493: GO 74503
// result := false ;
74495: LD_ADDR_VAR 0 3
74499: PUSH
74500: LD_INT 0
74502: ST_TO_ADDR
// end else
74503: GO 74513
// result := false ;
74505: LD_ADDR_VAR 0 3
74509: PUSH
74510: LD_INT 0
74512: ST_TO_ADDR
// end ;
74513: LD_VAR 0 3
74517: RET
// export function HealTarget ( sci ) ; begin
74518: LD_INT 0
74520: PPUSH
// if not sci then
74521: LD_VAR 0 1
74525: NOT
74526: IFFALSE 74530
// exit ;
74528: GO 74595
// result := 0 ;
74530: LD_ADDR_VAR 0 2
74534: PUSH
74535: LD_INT 0
74537: ST_TO_ADDR
// if GetTaskList ( sci ) then
74538: LD_VAR 0 1
74542: PPUSH
74543: CALL_OW 437
74547: IFFALSE 74595
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74549: LD_VAR 0 1
74553: PPUSH
74554: CALL_OW 437
74558: PUSH
74559: LD_INT 1
74561: ARRAY
74562: PUSH
74563: LD_INT 1
74565: ARRAY
74566: PUSH
74567: LD_STRING l
74569: EQUAL
74570: IFFALSE 74595
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74572: LD_ADDR_VAR 0 2
74576: PUSH
74577: LD_VAR 0 1
74581: PPUSH
74582: CALL_OW 437
74586: PUSH
74587: LD_INT 1
74589: ARRAY
74590: PUSH
74591: LD_INT 4
74593: ARRAY
74594: ST_TO_ADDR
// end ;
74595: LD_VAR 0 2
74599: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74600: LD_INT 0
74602: PPUSH
74603: PPUSH
74604: PPUSH
74605: PPUSH
// if not base_units then
74606: LD_VAR 0 1
74610: NOT
74611: IFFALSE 74615
// exit ;
74613: GO 74702
// result := false ;
74615: LD_ADDR_VAR 0 2
74619: PUSH
74620: LD_INT 0
74622: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74623: LD_ADDR_VAR 0 5
74627: PUSH
74628: LD_VAR 0 1
74632: PPUSH
74633: LD_INT 21
74635: PUSH
74636: LD_INT 3
74638: PUSH
74639: EMPTY
74640: LIST
74641: LIST
74642: PPUSH
74643: CALL_OW 72
74647: ST_TO_ADDR
// if not tmp then
74648: LD_VAR 0 5
74652: NOT
74653: IFFALSE 74657
// exit ;
74655: GO 74702
// for i in tmp do
74657: LD_ADDR_VAR 0 3
74661: PUSH
74662: LD_VAR 0 5
74666: PUSH
74667: FOR_IN
74668: IFFALSE 74700
// begin result := EnemyInRange ( i , 22 ) ;
74670: LD_ADDR_VAR 0 2
74674: PUSH
74675: LD_VAR 0 3
74679: PPUSH
74680: LD_INT 22
74682: PPUSH
74683: CALL 72289 0 2
74687: ST_TO_ADDR
// if result then
74688: LD_VAR 0 2
74692: IFFALSE 74698
// exit ;
74694: POP
74695: POP
74696: GO 74702
// end ;
74698: GO 74667
74700: POP
74701: POP
// end ;
74702: LD_VAR 0 2
74706: RET
// export function FilterByTag ( units , tag ) ; begin
74707: LD_INT 0
74709: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74710: LD_ADDR_VAR 0 3
74714: PUSH
74715: LD_VAR 0 1
74719: PPUSH
74720: LD_INT 120
74722: PUSH
74723: LD_VAR 0 2
74727: PUSH
74728: EMPTY
74729: LIST
74730: LIST
74731: PPUSH
74732: CALL_OW 72
74736: ST_TO_ADDR
// end ;
74737: LD_VAR 0 3
74741: RET
// export function IsDriver ( un ) ; begin
74742: LD_INT 0
74744: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74745: LD_ADDR_VAR 0 2
74749: PUSH
74750: LD_VAR 0 1
74754: PUSH
74755: LD_INT 55
74757: PUSH
74758: EMPTY
74759: LIST
74760: PPUSH
74761: CALL_OW 69
74765: IN
74766: ST_TO_ADDR
// end ;
74767: LD_VAR 0 2
74771: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74772: LD_INT 0
74774: PPUSH
74775: PPUSH
// list := [ ] ;
74776: LD_ADDR_VAR 0 5
74780: PUSH
74781: EMPTY
74782: ST_TO_ADDR
// case d of 0 :
74783: LD_VAR 0 3
74787: PUSH
74788: LD_INT 0
74790: DOUBLE
74791: EQUAL
74792: IFTRUE 74796
74794: GO 74929
74796: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74797: LD_ADDR_VAR 0 5
74801: PUSH
74802: LD_VAR 0 1
74806: PUSH
74807: LD_INT 4
74809: MINUS
74810: PUSH
74811: LD_VAR 0 2
74815: PUSH
74816: LD_INT 4
74818: MINUS
74819: PUSH
74820: LD_INT 2
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: LIST
74827: PUSH
74828: LD_VAR 0 1
74832: PUSH
74833: LD_INT 3
74835: MINUS
74836: PUSH
74837: LD_VAR 0 2
74841: PUSH
74842: LD_INT 1
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: LIST
74849: PUSH
74850: LD_VAR 0 1
74854: PUSH
74855: LD_INT 4
74857: PLUS
74858: PUSH
74859: LD_VAR 0 2
74863: PUSH
74864: LD_INT 4
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: LIST
74871: PUSH
74872: LD_VAR 0 1
74876: PUSH
74877: LD_INT 3
74879: PLUS
74880: PUSH
74881: LD_VAR 0 2
74885: PUSH
74886: LD_INT 3
74888: PLUS
74889: PUSH
74890: LD_INT 5
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: LIST
74897: PUSH
74898: LD_VAR 0 1
74902: PUSH
74903: LD_VAR 0 2
74907: PUSH
74908: LD_INT 4
74910: PLUS
74911: PUSH
74912: LD_INT 0
74914: PUSH
74915: EMPTY
74916: LIST
74917: LIST
74918: LIST
74919: PUSH
74920: EMPTY
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: ST_TO_ADDR
// end ; 1 :
74927: GO 75627
74929: LD_INT 1
74931: DOUBLE
74932: EQUAL
74933: IFTRUE 74937
74935: GO 75070
74937: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74938: LD_ADDR_VAR 0 5
74942: PUSH
74943: LD_VAR 0 1
74947: PUSH
74948: LD_VAR 0 2
74952: PUSH
74953: LD_INT 4
74955: MINUS
74956: PUSH
74957: LD_INT 3
74959: PUSH
74960: EMPTY
74961: LIST
74962: LIST
74963: LIST
74964: PUSH
74965: LD_VAR 0 1
74969: PUSH
74970: LD_INT 3
74972: MINUS
74973: PUSH
74974: LD_VAR 0 2
74978: PUSH
74979: LD_INT 3
74981: MINUS
74982: PUSH
74983: LD_INT 2
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: LIST
74990: PUSH
74991: LD_VAR 0 1
74995: PUSH
74996: LD_INT 4
74998: MINUS
74999: PUSH
75000: LD_VAR 0 2
75004: PUSH
75005: LD_INT 1
75007: PUSH
75008: EMPTY
75009: LIST
75010: LIST
75011: LIST
75012: PUSH
75013: LD_VAR 0 1
75017: PUSH
75018: LD_VAR 0 2
75022: PUSH
75023: LD_INT 3
75025: PLUS
75026: PUSH
75027: LD_INT 0
75029: PUSH
75030: EMPTY
75031: LIST
75032: LIST
75033: LIST
75034: PUSH
75035: LD_VAR 0 1
75039: PUSH
75040: LD_INT 4
75042: PLUS
75043: PUSH
75044: LD_VAR 0 2
75048: PUSH
75049: LD_INT 4
75051: PLUS
75052: PUSH
75053: LD_INT 5
75055: PUSH
75056: EMPTY
75057: LIST
75058: LIST
75059: LIST
75060: PUSH
75061: EMPTY
75062: LIST
75063: LIST
75064: LIST
75065: LIST
75066: LIST
75067: ST_TO_ADDR
// end ; 2 :
75068: GO 75627
75070: LD_INT 2
75072: DOUBLE
75073: EQUAL
75074: IFTRUE 75078
75076: GO 75207
75078: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75079: LD_ADDR_VAR 0 5
75083: PUSH
75084: LD_VAR 0 1
75088: PUSH
75089: LD_VAR 0 2
75093: PUSH
75094: LD_INT 3
75096: MINUS
75097: PUSH
75098: LD_INT 3
75100: PUSH
75101: EMPTY
75102: LIST
75103: LIST
75104: LIST
75105: PUSH
75106: LD_VAR 0 1
75110: PUSH
75111: LD_INT 4
75113: PLUS
75114: PUSH
75115: LD_VAR 0 2
75119: PUSH
75120: LD_INT 4
75122: PUSH
75123: EMPTY
75124: LIST
75125: LIST
75126: LIST
75127: PUSH
75128: LD_VAR 0 1
75132: PUSH
75133: LD_VAR 0 2
75137: PUSH
75138: LD_INT 4
75140: PLUS
75141: PUSH
75142: LD_INT 0
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: LIST
75149: PUSH
75150: LD_VAR 0 1
75154: PUSH
75155: LD_INT 3
75157: MINUS
75158: PUSH
75159: LD_VAR 0 2
75163: PUSH
75164: LD_INT 1
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: LIST
75171: PUSH
75172: LD_VAR 0 1
75176: PUSH
75177: LD_INT 4
75179: MINUS
75180: PUSH
75181: LD_VAR 0 2
75185: PUSH
75186: LD_INT 4
75188: MINUS
75189: PUSH
75190: LD_INT 2
75192: PUSH
75193: EMPTY
75194: LIST
75195: LIST
75196: LIST
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: LIST
75202: LIST
75203: LIST
75204: ST_TO_ADDR
// end ; 3 :
75205: GO 75627
75207: LD_INT 3
75209: DOUBLE
75210: EQUAL
75211: IFTRUE 75215
75213: GO 75348
75215: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75216: LD_ADDR_VAR 0 5
75220: PUSH
75221: LD_VAR 0 1
75225: PUSH
75226: LD_INT 3
75228: PLUS
75229: PUSH
75230: LD_VAR 0 2
75234: PUSH
75235: LD_INT 4
75237: PUSH
75238: EMPTY
75239: LIST
75240: LIST
75241: LIST
75242: PUSH
75243: LD_VAR 0 1
75247: PUSH
75248: LD_INT 4
75250: PLUS
75251: PUSH
75252: LD_VAR 0 2
75256: PUSH
75257: LD_INT 4
75259: PLUS
75260: PUSH
75261: LD_INT 5
75263: PUSH
75264: EMPTY
75265: LIST
75266: LIST
75267: LIST
75268: PUSH
75269: LD_VAR 0 1
75273: PUSH
75274: LD_INT 4
75276: MINUS
75277: PUSH
75278: LD_VAR 0 2
75282: PUSH
75283: LD_INT 1
75285: PUSH
75286: EMPTY
75287: LIST
75288: LIST
75289: LIST
75290: PUSH
75291: LD_VAR 0 1
75295: PUSH
75296: LD_VAR 0 2
75300: PUSH
75301: LD_INT 4
75303: MINUS
75304: PUSH
75305: LD_INT 3
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: LIST
75312: PUSH
75313: LD_VAR 0 1
75317: PUSH
75318: LD_INT 3
75320: MINUS
75321: PUSH
75322: LD_VAR 0 2
75326: PUSH
75327: LD_INT 3
75329: MINUS
75330: PUSH
75331: LD_INT 2
75333: PUSH
75334: EMPTY
75335: LIST
75336: LIST
75337: LIST
75338: PUSH
75339: EMPTY
75340: LIST
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: ST_TO_ADDR
// end ; 4 :
75346: GO 75627
75348: LD_INT 4
75350: DOUBLE
75351: EQUAL
75352: IFTRUE 75356
75354: GO 75489
75356: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75357: LD_ADDR_VAR 0 5
75361: PUSH
75362: LD_VAR 0 1
75366: PUSH
75367: LD_VAR 0 2
75371: PUSH
75372: LD_INT 4
75374: PLUS
75375: PUSH
75376: LD_INT 0
75378: PUSH
75379: EMPTY
75380: LIST
75381: LIST
75382: LIST
75383: PUSH
75384: LD_VAR 0 1
75388: PUSH
75389: LD_INT 3
75391: PLUS
75392: PUSH
75393: LD_VAR 0 2
75397: PUSH
75398: LD_INT 3
75400: PLUS
75401: PUSH
75402: LD_INT 5
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: LIST
75409: PUSH
75410: LD_VAR 0 1
75414: PUSH
75415: LD_INT 4
75417: PLUS
75418: PUSH
75419: LD_VAR 0 2
75423: PUSH
75424: LD_INT 4
75426: PUSH
75427: EMPTY
75428: LIST
75429: LIST
75430: LIST
75431: PUSH
75432: LD_VAR 0 1
75436: PUSH
75437: LD_VAR 0 2
75441: PUSH
75442: LD_INT 3
75444: MINUS
75445: PUSH
75446: LD_INT 3
75448: PUSH
75449: EMPTY
75450: LIST
75451: LIST
75452: LIST
75453: PUSH
75454: LD_VAR 0 1
75458: PUSH
75459: LD_INT 4
75461: MINUS
75462: PUSH
75463: LD_VAR 0 2
75467: PUSH
75468: LD_INT 4
75470: MINUS
75471: PUSH
75472: LD_INT 2
75474: PUSH
75475: EMPTY
75476: LIST
75477: LIST
75478: LIST
75479: PUSH
75480: EMPTY
75481: LIST
75482: LIST
75483: LIST
75484: LIST
75485: LIST
75486: ST_TO_ADDR
// end ; 5 :
75487: GO 75627
75489: LD_INT 5
75491: DOUBLE
75492: EQUAL
75493: IFTRUE 75497
75495: GO 75626
75497: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75498: LD_ADDR_VAR 0 5
75502: PUSH
75503: LD_VAR 0 1
75507: PUSH
75508: LD_INT 4
75510: MINUS
75511: PUSH
75512: LD_VAR 0 2
75516: PUSH
75517: LD_INT 1
75519: PUSH
75520: EMPTY
75521: LIST
75522: LIST
75523: LIST
75524: PUSH
75525: LD_VAR 0 1
75529: PUSH
75530: LD_VAR 0 2
75534: PUSH
75535: LD_INT 4
75537: MINUS
75538: PUSH
75539: LD_INT 3
75541: PUSH
75542: EMPTY
75543: LIST
75544: LIST
75545: LIST
75546: PUSH
75547: LD_VAR 0 1
75551: PUSH
75552: LD_INT 4
75554: PLUS
75555: PUSH
75556: LD_VAR 0 2
75560: PUSH
75561: LD_INT 4
75563: PLUS
75564: PUSH
75565: LD_INT 5
75567: PUSH
75568: EMPTY
75569: LIST
75570: LIST
75571: LIST
75572: PUSH
75573: LD_VAR 0 1
75577: PUSH
75578: LD_INT 3
75580: PLUS
75581: PUSH
75582: LD_VAR 0 2
75586: PUSH
75587: LD_INT 4
75589: PUSH
75590: EMPTY
75591: LIST
75592: LIST
75593: LIST
75594: PUSH
75595: LD_VAR 0 1
75599: PUSH
75600: LD_VAR 0 2
75604: PUSH
75605: LD_INT 3
75607: PLUS
75608: PUSH
75609: LD_INT 0
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: LIST
75616: PUSH
75617: EMPTY
75618: LIST
75619: LIST
75620: LIST
75621: LIST
75622: LIST
75623: ST_TO_ADDR
// end ; end ;
75624: GO 75627
75626: POP
// result := list ;
75627: LD_ADDR_VAR 0 4
75631: PUSH
75632: LD_VAR 0 5
75636: ST_TO_ADDR
// end ;
75637: LD_VAR 0 4
75641: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75642: LD_INT 0
75644: PPUSH
75645: PPUSH
75646: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75647: LD_VAR 0 1
75651: NOT
75652: PUSH
75653: LD_VAR 0 2
75657: PUSH
75658: LD_INT 1
75660: PUSH
75661: LD_INT 2
75663: PUSH
75664: LD_INT 3
75666: PUSH
75667: LD_INT 4
75669: PUSH
75670: EMPTY
75671: LIST
75672: LIST
75673: LIST
75674: LIST
75675: IN
75676: NOT
75677: OR
75678: IFFALSE 75682
// exit ;
75680: GO 75765
// tmp := [ ] ;
75682: LD_ADDR_VAR 0 5
75686: PUSH
75687: EMPTY
75688: ST_TO_ADDR
// for i in units do
75689: LD_ADDR_VAR 0 4
75693: PUSH
75694: LD_VAR 0 1
75698: PUSH
75699: FOR_IN
75700: IFFALSE 75734
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75702: LD_ADDR_VAR 0 5
75706: PUSH
75707: LD_VAR 0 5
75711: PPUSH
75712: LD_VAR 0 4
75716: PPUSH
75717: LD_VAR 0 2
75721: PPUSH
75722: CALL_OW 259
75726: PPUSH
75727: CALL 77125 0 2
75731: ST_TO_ADDR
75732: GO 75699
75734: POP
75735: POP
// if not tmp then
75736: LD_VAR 0 5
75740: NOT
75741: IFFALSE 75745
// exit ;
75743: GO 75765
// result := SortListByListDesc ( units , tmp ) ;
75745: LD_ADDR_VAR 0 3
75749: PUSH
75750: LD_VAR 0 1
75754: PPUSH
75755: LD_VAR 0 5
75759: PPUSH
75760: CALL_OW 77
75764: ST_TO_ADDR
// end ;
75765: LD_VAR 0 3
75769: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75770: LD_INT 0
75772: PPUSH
75773: PPUSH
75774: PPUSH
// result := false ;
75775: LD_ADDR_VAR 0 3
75779: PUSH
75780: LD_INT 0
75782: ST_TO_ADDR
// if not building then
75783: LD_VAR 0 2
75787: NOT
75788: IFFALSE 75792
// exit ;
75790: GO 75930
// x := GetX ( building ) ;
75792: LD_ADDR_VAR 0 4
75796: PUSH
75797: LD_VAR 0 2
75801: PPUSH
75802: CALL_OW 250
75806: ST_TO_ADDR
// y := GetY ( building ) ;
75807: LD_ADDR_VAR 0 5
75811: PUSH
75812: LD_VAR 0 2
75816: PPUSH
75817: CALL_OW 251
75821: ST_TO_ADDR
// if not x or not y then
75822: LD_VAR 0 4
75826: NOT
75827: PUSH
75828: LD_VAR 0 5
75832: NOT
75833: OR
75834: IFFALSE 75838
// exit ;
75836: GO 75930
// if GetTaskList ( unit ) then
75838: LD_VAR 0 1
75842: PPUSH
75843: CALL_OW 437
75847: IFFALSE 75930
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75849: LD_STRING e
75851: PUSH
75852: LD_VAR 0 1
75856: PPUSH
75857: CALL_OW 437
75861: PUSH
75862: LD_INT 1
75864: ARRAY
75865: PUSH
75866: LD_INT 1
75868: ARRAY
75869: EQUAL
75870: PUSH
75871: LD_VAR 0 4
75875: PUSH
75876: LD_VAR 0 1
75880: PPUSH
75881: CALL_OW 437
75885: PUSH
75886: LD_INT 1
75888: ARRAY
75889: PUSH
75890: LD_INT 2
75892: ARRAY
75893: EQUAL
75894: AND
75895: PUSH
75896: LD_VAR 0 5
75900: PUSH
75901: LD_VAR 0 1
75905: PPUSH
75906: CALL_OW 437
75910: PUSH
75911: LD_INT 1
75913: ARRAY
75914: PUSH
75915: LD_INT 3
75917: ARRAY
75918: EQUAL
75919: AND
75920: IFFALSE 75930
// result := true end ;
75922: LD_ADDR_VAR 0 3
75926: PUSH
75927: LD_INT 1
75929: ST_TO_ADDR
// end ;
75930: LD_VAR 0 3
75934: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75935: LD_INT 0
75937: PPUSH
// result := false ;
75938: LD_ADDR_VAR 0 4
75942: PUSH
75943: LD_INT 0
75945: ST_TO_ADDR
// if GetTaskList ( unit ) then
75946: LD_VAR 0 1
75950: PPUSH
75951: CALL_OW 437
75955: IFFALSE 76038
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75957: LD_STRING M
75959: PUSH
75960: LD_VAR 0 1
75964: PPUSH
75965: CALL_OW 437
75969: PUSH
75970: LD_INT 1
75972: ARRAY
75973: PUSH
75974: LD_INT 1
75976: ARRAY
75977: EQUAL
75978: PUSH
75979: LD_VAR 0 2
75983: PUSH
75984: LD_VAR 0 1
75988: PPUSH
75989: CALL_OW 437
75993: PUSH
75994: LD_INT 1
75996: ARRAY
75997: PUSH
75998: LD_INT 2
76000: ARRAY
76001: EQUAL
76002: AND
76003: PUSH
76004: LD_VAR 0 3
76008: PUSH
76009: LD_VAR 0 1
76013: PPUSH
76014: CALL_OW 437
76018: PUSH
76019: LD_INT 1
76021: ARRAY
76022: PUSH
76023: LD_INT 3
76025: ARRAY
76026: EQUAL
76027: AND
76028: IFFALSE 76038
// result := true ;
76030: LD_ADDR_VAR 0 4
76034: PUSH
76035: LD_INT 1
76037: ST_TO_ADDR
// end ; end ;
76038: LD_VAR 0 4
76042: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76043: LD_INT 0
76045: PPUSH
76046: PPUSH
76047: PPUSH
76048: PPUSH
// if not unit or not area then
76049: LD_VAR 0 1
76053: NOT
76054: PUSH
76055: LD_VAR 0 2
76059: NOT
76060: OR
76061: IFFALSE 76065
// exit ;
76063: GO 76228
// tmp := AreaToList ( area , i ) ;
76065: LD_ADDR_VAR 0 6
76069: PUSH
76070: LD_VAR 0 2
76074: PPUSH
76075: LD_VAR 0 5
76079: PPUSH
76080: CALL_OW 517
76084: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76085: LD_ADDR_VAR 0 5
76089: PUSH
76090: DOUBLE
76091: LD_INT 1
76093: DEC
76094: ST_TO_ADDR
76095: LD_VAR 0 6
76099: PUSH
76100: LD_INT 1
76102: ARRAY
76103: PUSH
76104: FOR_TO
76105: IFFALSE 76226
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76107: LD_ADDR_VAR 0 7
76111: PUSH
76112: LD_VAR 0 6
76116: PUSH
76117: LD_INT 1
76119: ARRAY
76120: PUSH
76121: LD_VAR 0 5
76125: ARRAY
76126: PUSH
76127: LD_VAR 0 6
76131: PUSH
76132: LD_INT 2
76134: ARRAY
76135: PUSH
76136: LD_VAR 0 5
76140: ARRAY
76141: PUSH
76142: EMPTY
76143: LIST
76144: LIST
76145: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
76146: LD_INT 92
76148: PUSH
76149: LD_VAR 0 7
76153: PUSH
76154: LD_INT 1
76156: ARRAY
76157: PUSH
76158: LD_VAR 0 7
76162: PUSH
76163: LD_INT 2
76165: ARRAY
76166: PUSH
76167: LD_INT 3
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: LIST
76174: LIST
76175: PPUSH
76176: CALL_OW 69
76180: PUSH
76181: LD_INT 0
76183: EQUAL
76184: IFFALSE 76224
// begin PlaceUnitArea ( unit , area , mode ) ;
76186: LD_VAR 0 1
76190: PPUSH
76191: LD_VAR 0 2
76195: PPUSH
76196: LD_VAR 0 3
76200: PPUSH
76201: CALL_OW 49
// result := IsPlaced ( unit ) ;
76205: LD_ADDR_VAR 0 4
76209: PUSH
76210: LD_VAR 0 1
76214: PPUSH
76215: CALL_OW 305
76219: ST_TO_ADDR
// exit ;
76220: POP
76221: POP
76222: GO 76228
// end ; end ;
76224: GO 76104
76226: POP
76227: POP
// end ;
76228: LD_VAR 0 4
76232: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76233: LD_INT 0
76235: PPUSH
76236: PPUSH
76237: PPUSH
// if not side or side > 8 then
76238: LD_VAR 0 1
76242: NOT
76243: PUSH
76244: LD_VAR 0 1
76248: PUSH
76249: LD_INT 8
76251: GREATER
76252: OR
76253: IFFALSE 76257
// exit ;
76255: GO 76444
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76257: LD_ADDR_VAR 0 4
76261: PUSH
76262: LD_INT 22
76264: PUSH
76265: LD_VAR 0 1
76269: PUSH
76270: EMPTY
76271: LIST
76272: LIST
76273: PUSH
76274: LD_INT 21
76276: PUSH
76277: LD_INT 3
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: PUSH
76284: EMPTY
76285: LIST
76286: LIST
76287: PPUSH
76288: CALL_OW 69
76292: ST_TO_ADDR
// if not tmp then
76293: LD_VAR 0 4
76297: NOT
76298: IFFALSE 76302
// exit ;
76300: GO 76444
// enable_addtolog := true ;
76302: LD_ADDR_OWVAR 81
76306: PUSH
76307: LD_INT 1
76309: ST_TO_ADDR
// AddToLog ( [ ) ;
76310: LD_STRING [
76312: PPUSH
76313: CALL_OW 561
// for i in tmp do
76317: LD_ADDR_VAR 0 3
76321: PUSH
76322: LD_VAR 0 4
76326: PUSH
76327: FOR_IN
76328: IFFALSE 76435
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76330: LD_STRING [
76332: PUSH
76333: LD_VAR 0 3
76337: PPUSH
76338: CALL_OW 266
76342: STR
76343: PUSH
76344: LD_STRING , 
76346: STR
76347: PUSH
76348: LD_VAR 0 3
76352: PPUSH
76353: CALL_OW 250
76357: STR
76358: PUSH
76359: LD_STRING , 
76361: STR
76362: PUSH
76363: LD_VAR 0 3
76367: PPUSH
76368: CALL_OW 251
76372: STR
76373: PUSH
76374: LD_STRING , 
76376: STR
76377: PUSH
76378: LD_VAR 0 3
76382: PPUSH
76383: CALL_OW 254
76387: STR
76388: PUSH
76389: LD_STRING , 
76391: STR
76392: PUSH
76393: LD_VAR 0 3
76397: PPUSH
76398: LD_INT 1
76400: PPUSH
76401: CALL_OW 268
76405: STR
76406: PUSH
76407: LD_STRING , 
76409: STR
76410: PUSH
76411: LD_VAR 0 3
76415: PPUSH
76416: LD_INT 2
76418: PPUSH
76419: CALL_OW 268
76423: STR
76424: PUSH
76425: LD_STRING ],
76427: STR
76428: PPUSH
76429: CALL_OW 561
// end ;
76433: GO 76327
76435: POP
76436: POP
// AddToLog ( ]; ) ;
76437: LD_STRING ];
76439: PPUSH
76440: CALL_OW 561
// end ;
76444: LD_VAR 0 2
76448: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76449: LD_INT 0
76451: PPUSH
76452: PPUSH
76453: PPUSH
76454: PPUSH
76455: PPUSH
// if not area or not rate or not max then
76456: LD_VAR 0 1
76460: NOT
76461: PUSH
76462: LD_VAR 0 2
76466: NOT
76467: OR
76468: PUSH
76469: LD_VAR 0 4
76473: NOT
76474: OR
76475: IFFALSE 76479
// exit ;
76477: GO 76668
// while 1 do
76479: LD_INT 1
76481: IFFALSE 76668
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76483: LD_ADDR_VAR 0 9
76487: PUSH
76488: LD_VAR 0 1
76492: PPUSH
76493: LD_INT 1
76495: PPUSH
76496: CALL_OW 287
76500: PUSH
76501: LD_INT 10
76503: MUL
76504: ST_TO_ADDR
// r := rate / 10 ;
76505: LD_ADDR_VAR 0 7
76509: PUSH
76510: LD_VAR 0 2
76514: PUSH
76515: LD_INT 10
76517: DIVREAL
76518: ST_TO_ADDR
// time := 1 1$00 ;
76519: LD_ADDR_VAR 0 8
76523: PUSH
76524: LD_INT 2100
76526: ST_TO_ADDR
// if amount < min then
76527: LD_VAR 0 9
76531: PUSH
76532: LD_VAR 0 3
76536: LESS
76537: IFFALSE 76555
// r := r * 2 else
76539: LD_ADDR_VAR 0 7
76543: PUSH
76544: LD_VAR 0 7
76548: PUSH
76549: LD_INT 2
76551: MUL
76552: ST_TO_ADDR
76553: GO 76581
// if amount > max then
76555: LD_VAR 0 9
76559: PUSH
76560: LD_VAR 0 4
76564: GREATER
76565: IFFALSE 76581
// r := r / 2 ;
76567: LD_ADDR_VAR 0 7
76571: PUSH
76572: LD_VAR 0 7
76576: PUSH
76577: LD_INT 2
76579: DIVREAL
76580: ST_TO_ADDR
// time := time / r ;
76581: LD_ADDR_VAR 0 8
76585: PUSH
76586: LD_VAR 0 8
76590: PUSH
76591: LD_VAR 0 7
76595: DIVREAL
76596: ST_TO_ADDR
// if time < 0 then
76597: LD_VAR 0 8
76601: PUSH
76602: LD_INT 0
76604: LESS
76605: IFFALSE 76622
// time := time * - 1 ;
76607: LD_ADDR_VAR 0 8
76611: PUSH
76612: LD_VAR 0 8
76616: PUSH
76617: LD_INT 1
76619: NEG
76620: MUL
76621: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76622: LD_VAR 0 8
76626: PUSH
76627: LD_INT 35
76629: PPUSH
76630: LD_INT 875
76632: PPUSH
76633: CALL_OW 12
76637: PLUS
76638: PPUSH
76639: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76643: LD_INT 1
76645: PPUSH
76646: LD_INT 5
76648: PPUSH
76649: CALL_OW 12
76653: PPUSH
76654: LD_VAR 0 1
76658: PPUSH
76659: LD_INT 1
76661: PPUSH
76662: CALL_OW 55
// end ;
76666: GO 76479
// end ;
76668: LD_VAR 0 5
76672: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76673: LD_INT 0
76675: PPUSH
76676: PPUSH
76677: PPUSH
76678: PPUSH
76679: PPUSH
76680: PPUSH
76681: PPUSH
76682: PPUSH
// if not turrets or not factories then
76683: LD_VAR 0 1
76687: NOT
76688: PUSH
76689: LD_VAR 0 2
76693: NOT
76694: OR
76695: IFFALSE 76699
// exit ;
76697: GO 77006
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76699: LD_ADDR_VAR 0 10
76703: PUSH
76704: LD_INT 5
76706: PUSH
76707: LD_INT 6
76709: PUSH
76710: EMPTY
76711: LIST
76712: LIST
76713: PUSH
76714: LD_INT 2
76716: PUSH
76717: LD_INT 4
76719: PUSH
76720: EMPTY
76721: LIST
76722: LIST
76723: PUSH
76724: LD_INT 3
76726: PUSH
76727: LD_INT 5
76729: PUSH
76730: EMPTY
76731: LIST
76732: LIST
76733: PUSH
76734: EMPTY
76735: LIST
76736: LIST
76737: LIST
76738: PUSH
76739: LD_INT 24
76741: PUSH
76742: LD_INT 25
76744: PUSH
76745: EMPTY
76746: LIST
76747: LIST
76748: PUSH
76749: LD_INT 23
76751: PUSH
76752: LD_INT 27
76754: PUSH
76755: EMPTY
76756: LIST
76757: LIST
76758: PUSH
76759: EMPTY
76760: LIST
76761: LIST
76762: PUSH
76763: LD_INT 42
76765: PUSH
76766: LD_INT 43
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: PUSH
76773: LD_INT 44
76775: PUSH
76776: LD_INT 46
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: PUSH
76783: LD_INT 45
76785: PUSH
76786: LD_INT 47
76788: PUSH
76789: EMPTY
76790: LIST
76791: LIST
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: LIST
76797: PUSH
76798: EMPTY
76799: LIST
76800: LIST
76801: LIST
76802: ST_TO_ADDR
// result := [ ] ;
76803: LD_ADDR_VAR 0 3
76807: PUSH
76808: EMPTY
76809: ST_TO_ADDR
// for i in turrets do
76810: LD_ADDR_VAR 0 4
76814: PUSH
76815: LD_VAR 0 1
76819: PUSH
76820: FOR_IN
76821: IFFALSE 77004
// begin nat := GetNation ( i ) ;
76823: LD_ADDR_VAR 0 7
76827: PUSH
76828: LD_VAR 0 4
76832: PPUSH
76833: CALL_OW 248
76837: ST_TO_ADDR
// weapon := 0 ;
76838: LD_ADDR_VAR 0 8
76842: PUSH
76843: LD_INT 0
76845: ST_TO_ADDR
// if not nat then
76846: LD_VAR 0 7
76850: NOT
76851: IFFALSE 76855
// continue ;
76853: GO 76820
// for j in list [ nat ] do
76855: LD_ADDR_VAR 0 5
76859: PUSH
76860: LD_VAR 0 10
76864: PUSH
76865: LD_VAR 0 7
76869: ARRAY
76870: PUSH
76871: FOR_IN
76872: IFFALSE 76913
// if GetBWeapon ( i ) = j [ 1 ] then
76874: LD_VAR 0 4
76878: PPUSH
76879: CALL_OW 269
76883: PUSH
76884: LD_VAR 0 5
76888: PUSH
76889: LD_INT 1
76891: ARRAY
76892: EQUAL
76893: IFFALSE 76911
// begin weapon := j [ 2 ] ;
76895: LD_ADDR_VAR 0 8
76899: PUSH
76900: LD_VAR 0 5
76904: PUSH
76905: LD_INT 2
76907: ARRAY
76908: ST_TO_ADDR
// break ;
76909: GO 76913
// end ;
76911: GO 76871
76913: POP
76914: POP
// if not weapon then
76915: LD_VAR 0 8
76919: NOT
76920: IFFALSE 76924
// continue ;
76922: GO 76820
// for k in factories do
76924: LD_ADDR_VAR 0 6
76928: PUSH
76929: LD_VAR 0 2
76933: PUSH
76934: FOR_IN
76935: IFFALSE 77000
// begin weapons := AvailableWeaponList ( k ) ;
76937: LD_ADDR_VAR 0 9
76941: PUSH
76942: LD_VAR 0 6
76946: PPUSH
76947: CALL_OW 478
76951: ST_TO_ADDR
// if not weapons then
76952: LD_VAR 0 9
76956: NOT
76957: IFFALSE 76961
// continue ;
76959: GO 76934
// if weapon in weapons then
76961: LD_VAR 0 8
76965: PUSH
76966: LD_VAR 0 9
76970: IN
76971: IFFALSE 76998
// begin result := [ i , weapon ] ;
76973: LD_ADDR_VAR 0 3
76977: PUSH
76978: LD_VAR 0 4
76982: PUSH
76983: LD_VAR 0 8
76987: PUSH
76988: EMPTY
76989: LIST
76990: LIST
76991: ST_TO_ADDR
// exit ;
76992: POP
76993: POP
76994: POP
76995: POP
76996: GO 77006
// end ; end ;
76998: GO 76934
77000: POP
77001: POP
// end ;
77002: GO 76820
77004: POP
77005: POP
// end ;
77006: LD_VAR 0 3
77010: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77011: LD_INT 0
77013: PPUSH
// if not side or side > 8 then
77014: LD_VAR 0 3
77018: NOT
77019: PUSH
77020: LD_VAR 0 3
77024: PUSH
77025: LD_INT 8
77027: GREATER
77028: OR
77029: IFFALSE 77033
// exit ;
77031: GO 77092
// if not range then
77033: LD_VAR 0 4
77037: NOT
77038: IFFALSE 77049
// range := - 12 ;
77040: LD_ADDR_VAR 0 4
77044: PUSH
77045: LD_INT 12
77047: NEG
77048: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77049: LD_VAR 0 1
77053: PPUSH
77054: LD_VAR 0 2
77058: PPUSH
77059: LD_VAR 0 3
77063: PPUSH
77064: LD_VAR 0 4
77068: PPUSH
77069: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77073: LD_VAR 0 1
77077: PPUSH
77078: LD_VAR 0 2
77082: PPUSH
77083: LD_VAR 0 3
77087: PPUSH
77088: CALL_OW 331
// end ;
77092: LD_VAR 0 5
77096: RET
// export function Video ( mode ) ; begin
77097: LD_INT 0
77099: PPUSH
// ingame_video = mode ;
77100: LD_ADDR_OWVAR 52
77104: PUSH
77105: LD_VAR 0 1
77109: ST_TO_ADDR
// interface_hidden = mode ;
77110: LD_ADDR_OWVAR 54
77114: PUSH
77115: LD_VAR 0 1
77119: ST_TO_ADDR
// end ;
77120: LD_VAR 0 2
77124: RET
// export function Join ( array , element ) ; begin
77125: LD_INT 0
77127: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77128: LD_ADDR_VAR 0 3
77132: PUSH
77133: LD_VAR 0 1
77137: PPUSH
77138: LD_VAR 0 1
77142: PUSH
77143: LD_INT 1
77145: PLUS
77146: PPUSH
77147: LD_VAR 0 2
77151: PPUSH
77152: CALL_OW 1
77156: ST_TO_ADDR
// end ;
77157: LD_VAR 0 3
77161: RET
// export function JoinUnion ( array , element ) ; begin
77162: LD_INT 0
77164: PPUSH
// result := array union element ;
77165: LD_ADDR_VAR 0 3
77169: PUSH
77170: LD_VAR 0 1
77174: PUSH
77175: LD_VAR 0 2
77179: UNION
77180: ST_TO_ADDR
// end ;
77181: LD_VAR 0 3
77185: RET
// export function GetBehemoths ( side ) ; begin
77186: LD_INT 0
77188: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77189: LD_ADDR_VAR 0 2
77193: PUSH
77194: LD_INT 22
77196: PUSH
77197: LD_VAR 0 1
77201: PUSH
77202: EMPTY
77203: LIST
77204: LIST
77205: PUSH
77206: LD_INT 31
77208: PUSH
77209: LD_INT 25
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: PUSH
77216: EMPTY
77217: LIST
77218: LIST
77219: PPUSH
77220: CALL_OW 69
77224: ST_TO_ADDR
// end ;
77225: LD_VAR 0 2
77229: RET
// export function Shuffle ( array ) ; var i , index ; begin
77230: LD_INT 0
77232: PPUSH
77233: PPUSH
77234: PPUSH
// result := [ ] ;
77235: LD_ADDR_VAR 0 2
77239: PUSH
77240: EMPTY
77241: ST_TO_ADDR
// if not array then
77242: LD_VAR 0 1
77246: NOT
77247: IFFALSE 77251
// exit ;
77249: GO 77350
// Randomize ;
77251: CALL_OW 10
// for i = array downto 1 do
77255: LD_ADDR_VAR 0 3
77259: PUSH
77260: DOUBLE
77261: LD_VAR 0 1
77265: INC
77266: ST_TO_ADDR
77267: LD_INT 1
77269: PUSH
77270: FOR_DOWNTO
77271: IFFALSE 77348
// begin index := rand ( 1 , array ) ;
77273: LD_ADDR_VAR 0 4
77277: PUSH
77278: LD_INT 1
77280: PPUSH
77281: LD_VAR 0 1
77285: PPUSH
77286: CALL_OW 12
77290: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77291: LD_ADDR_VAR 0 2
77295: PUSH
77296: LD_VAR 0 2
77300: PPUSH
77301: LD_VAR 0 2
77305: PUSH
77306: LD_INT 1
77308: PLUS
77309: PPUSH
77310: LD_VAR 0 1
77314: PUSH
77315: LD_VAR 0 4
77319: ARRAY
77320: PPUSH
77321: CALL_OW 2
77325: ST_TO_ADDR
// array := Delete ( array , index ) ;
77326: LD_ADDR_VAR 0 1
77330: PUSH
77331: LD_VAR 0 1
77335: PPUSH
77336: LD_VAR 0 4
77340: PPUSH
77341: CALL_OW 3
77345: ST_TO_ADDR
// end ;
77346: GO 77270
77348: POP
77349: POP
// end ;
77350: LD_VAR 0 2
77354: RET
// export function GetBaseMaterials ( base ) ; begin
77355: LD_INT 0
77357: PPUSH
// result := [ 0 , 0 , 0 ] ;
77358: LD_ADDR_VAR 0 2
77362: PUSH
77363: LD_INT 0
77365: PUSH
77366: LD_INT 0
77368: PUSH
77369: LD_INT 0
77371: PUSH
77372: EMPTY
77373: LIST
77374: LIST
77375: LIST
77376: ST_TO_ADDR
// if not base then
77377: LD_VAR 0 1
77381: NOT
77382: IFFALSE 77386
// exit ;
77384: GO 77435
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77386: LD_ADDR_VAR 0 2
77390: PUSH
77391: LD_VAR 0 1
77395: PPUSH
77396: LD_INT 1
77398: PPUSH
77399: CALL_OW 275
77403: PUSH
77404: LD_VAR 0 1
77408: PPUSH
77409: LD_INT 2
77411: PPUSH
77412: CALL_OW 275
77416: PUSH
77417: LD_VAR 0 1
77421: PPUSH
77422: LD_INT 3
77424: PPUSH
77425: CALL_OW 275
77429: PUSH
77430: EMPTY
77431: LIST
77432: LIST
77433: LIST
77434: ST_TO_ADDR
// end ;
77435: LD_VAR 0 2
77439: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77440: LD_INT 0
77442: PPUSH
77443: PPUSH
// result := array ;
77444: LD_ADDR_VAR 0 3
77448: PUSH
77449: LD_VAR 0 1
77453: ST_TO_ADDR
// if size >= result then
77454: LD_VAR 0 2
77458: PUSH
77459: LD_VAR 0 3
77463: GREATEREQUAL
77464: IFFALSE 77468
// exit ;
77466: GO 77518
// if size then
77468: LD_VAR 0 2
77472: IFFALSE 77518
// for i := array downto size do
77474: LD_ADDR_VAR 0 4
77478: PUSH
77479: DOUBLE
77480: LD_VAR 0 1
77484: INC
77485: ST_TO_ADDR
77486: LD_VAR 0 2
77490: PUSH
77491: FOR_DOWNTO
77492: IFFALSE 77516
// result := Delete ( result , result ) ;
77494: LD_ADDR_VAR 0 3
77498: PUSH
77499: LD_VAR 0 3
77503: PPUSH
77504: LD_VAR 0 3
77508: PPUSH
77509: CALL_OW 3
77513: ST_TO_ADDR
77514: GO 77491
77516: POP
77517: POP
// end ;
77518: LD_VAR 0 3
77522: RET
// export function ComExit ( unit ) ; var tmp ; begin
77523: LD_INT 0
77525: PPUSH
77526: PPUSH
// if not IsInUnit ( unit ) then
77527: LD_VAR 0 1
77531: PPUSH
77532: CALL_OW 310
77536: NOT
77537: IFFALSE 77541
// exit ;
77539: GO 77601
// tmp := IsInUnit ( unit ) ;
77541: LD_ADDR_VAR 0 3
77545: PUSH
77546: LD_VAR 0 1
77550: PPUSH
77551: CALL_OW 310
77555: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77556: LD_VAR 0 3
77560: PPUSH
77561: CALL_OW 247
77565: PUSH
77566: LD_INT 2
77568: EQUAL
77569: IFFALSE 77582
// ComExitVehicle ( unit ) else
77571: LD_VAR 0 1
77575: PPUSH
77576: CALL_OW 121
77580: GO 77591
// ComExitBuilding ( unit ) ;
77582: LD_VAR 0 1
77586: PPUSH
77587: CALL_OW 122
// result := tmp ;
77591: LD_ADDR_VAR 0 2
77595: PUSH
77596: LD_VAR 0 3
77600: ST_TO_ADDR
// end ;
77601: LD_VAR 0 2
77605: RET
// export function ComExitAll ( units ) ; var i ; begin
77606: LD_INT 0
77608: PPUSH
77609: PPUSH
// if not units then
77610: LD_VAR 0 1
77614: NOT
77615: IFFALSE 77619
// exit ;
77617: GO 77645
// for i in units do
77619: LD_ADDR_VAR 0 3
77623: PUSH
77624: LD_VAR 0 1
77628: PUSH
77629: FOR_IN
77630: IFFALSE 77643
// ComExit ( i ) ;
77632: LD_VAR 0 3
77636: PPUSH
77637: CALL 77523 0 1
77641: GO 77629
77643: POP
77644: POP
// end ;
77645: LD_VAR 0 2
77649: RET
// export function ResetHc ; begin
77650: LD_INT 0
77652: PPUSH
// InitHc ;
77653: CALL_OW 19
// hc_importance := 0 ;
77657: LD_ADDR_OWVAR 32
77661: PUSH
77662: LD_INT 0
77664: ST_TO_ADDR
// end ;
77665: LD_VAR 0 1
77669: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77670: LD_INT 0
77672: PPUSH
77673: PPUSH
77674: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77675: LD_ADDR_VAR 0 6
77679: PUSH
77680: LD_VAR 0 1
77684: PUSH
77685: LD_VAR 0 3
77689: PLUS
77690: PUSH
77691: LD_INT 2
77693: DIV
77694: ST_TO_ADDR
// if _x < 0 then
77695: LD_VAR 0 6
77699: PUSH
77700: LD_INT 0
77702: LESS
77703: IFFALSE 77720
// _x := _x * - 1 ;
77705: LD_ADDR_VAR 0 6
77709: PUSH
77710: LD_VAR 0 6
77714: PUSH
77715: LD_INT 1
77717: NEG
77718: MUL
77719: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77720: LD_ADDR_VAR 0 7
77724: PUSH
77725: LD_VAR 0 2
77729: PUSH
77730: LD_VAR 0 4
77734: PLUS
77735: PUSH
77736: LD_INT 2
77738: DIV
77739: ST_TO_ADDR
// if _y < 0 then
77740: LD_VAR 0 7
77744: PUSH
77745: LD_INT 0
77747: LESS
77748: IFFALSE 77765
// _y := _y * - 1 ;
77750: LD_ADDR_VAR 0 7
77754: PUSH
77755: LD_VAR 0 7
77759: PUSH
77760: LD_INT 1
77762: NEG
77763: MUL
77764: ST_TO_ADDR
// result := [ _x , _y ] ;
77765: LD_ADDR_VAR 0 5
77769: PUSH
77770: LD_VAR 0 6
77774: PUSH
77775: LD_VAR 0 7
77779: PUSH
77780: EMPTY
77781: LIST
77782: LIST
77783: ST_TO_ADDR
// end ;
77784: LD_VAR 0 5
77788: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77789: LD_INT 0
77791: PPUSH
77792: PPUSH
77793: PPUSH
77794: PPUSH
// task := GetTaskList ( unit ) ;
77795: LD_ADDR_VAR 0 7
77799: PUSH
77800: LD_VAR 0 1
77804: PPUSH
77805: CALL_OW 437
77809: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77810: LD_VAR 0 7
77814: NOT
77815: PUSH
77816: LD_VAR 0 1
77820: PPUSH
77821: LD_VAR 0 2
77825: PPUSH
77826: CALL_OW 308
77830: NOT
77831: AND
77832: IFFALSE 77836
// exit ;
77834: GO 77954
// if IsInArea ( unit , area ) then
77836: LD_VAR 0 1
77840: PPUSH
77841: LD_VAR 0 2
77845: PPUSH
77846: CALL_OW 308
77850: IFFALSE 77868
// begin ComMoveToArea ( unit , goAway ) ;
77852: LD_VAR 0 1
77856: PPUSH
77857: LD_VAR 0 3
77861: PPUSH
77862: CALL_OW 113
// exit ;
77866: GO 77954
// end ; if task [ 1 ] [ 1 ] <> M then
77868: LD_VAR 0 7
77872: PUSH
77873: LD_INT 1
77875: ARRAY
77876: PUSH
77877: LD_INT 1
77879: ARRAY
77880: PUSH
77881: LD_STRING M
77883: NONEQUAL
77884: IFFALSE 77888
// exit ;
77886: GO 77954
// x := task [ 1 ] [ 2 ] ;
77888: LD_ADDR_VAR 0 5
77892: PUSH
77893: LD_VAR 0 7
77897: PUSH
77898: LD_INT 1
77900: ARRAY
77901: PUSH
77902: LD_INT 2
77904: ARRAY
77905: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77906: LD_ADDR_VAR 0 6
77910: PUSH
77911: LD_VAR 0 7
77915: PUSH
77916: LD_INT 1
77918: ARRAY
77919: PUSH
77920: LD_INT 3
77922: ARRAY
77923: ST_TO_ADDR
// if InArea ( x , y , area ) then
77924: LD_VAR 0 5
77928: PPUSH
77929: LD_VAR 0 6
77933: PPUSH
77934: LD_VAR 0 2
77938: PPUSH
77939: CALL_OW 309
77943: IFFALSE 77954
// ComStop ( unit ) ;
77945: LD_VAR 0 1
77949: PPUSH
77950: CALL_OW 141
// end ;
77954: LD_VAR 0 4
77958: RET
// export function Abs ( value ) ; begin
77959: LD_INT 0
77961: PPUSH
// result := value ;
77962: LD_ADDR_VAR 0 2
77966: PUSH
77967: LD_VAR 0 1
77971: ST_TO_ADDR
// if value < 0 then
77972: LD_VAR 0 1
77976: PUSH
77977: LD_INT 0
77979: LESS
77980: IFFALSE 77997
// result := value * - 1 ;
77982: LD_ADDR_VAR 0 2
77986: PUSH
77987: LD_VAR 0 1
77991: PUSH
77992: LD_INT 1
77994: NEG
77995: MUL
77996: ST_TO_ADDR
// end ;
77997: LD_VAR 0 2
78001: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78002: LD_INT 0
78004: PPUSH
78005: PPUSH
78006: PPUSH
78007: PPUSH
78008: PPUSH
78009: PPUSH
78010: PPUSH
78011: PPUSH
// if not unit or not building then
78012: LD_VAR 0 1
78016: NOT
78017: PUSH
78018: LD_VAR 0 2
78022: NOT
78023: OR
78024: IFFALSE 78028
// exit ;
78026: GO 78254
// x := GetX ( building ) ;
78028: LD_ADDR_VAR 0 4
78032: PUSH
78033: LD_VAR 0 2
78037: PPUSH
78038: CALL_OW 250
78042: ST_TO_ADDR
// y := GetY ( building ) ;
78043: LD_ADDR_VAR 0 6
78047: PUSH
78048: LD_VAR 0 2
78052: PPUSH
78053: CALL_OW 251
78057: ST_TO_ADDR
// d := GetDir ( building ) ;
78058: LD_ADDR_VAR 0 8
78062: PUSH
78063: LD_VAR 0 2
78067: PPUSH
78068: CALL_OW 254
78072: ST_TO_ADDR
// r := 4 ;
78073: LD_ADDR_VAR 0 9
78077: PUSH
78078: LD_INT 4
78080: ST_TO_ADDR
// for i := 1 to 5 do
78081: LD_ADDR_VAR 0 10
78085: PUSH
78086: DOUBLE
78087: LD_INT 1
78089: DEC
78090: ST_TO_ADDR
78091: LD_INT 5
78093: PUSH
78094: FOR_TO
78095: IFFALSE 78252
// begin _x := ShiftX ( x , d , r + i ) ;
78097: LD_ADDR_VAR 0 5
78101: PUSH
78102: LD_VAR 0 4
78106: PPUSH
78107: LD_VAR 0 8
78111: PPUSH
78112: LD_VAR 0 9
78116: PUSH
78117: LD_VAR 0 10
78121: PLUS
78122: PPUSH
78123: CALL_OW 272
78127: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78128: LD_ADDR_VAR 0 7
78132: PUSH
78133: LD_VAR 0 6
78137: PPUSH
78138: LD_VAR 0 8
78142: PPUSH
78143: LD_VAR 0 9
78147: PUSH
78148: LD_VAR 0 10
78152: PLUS
78153: PPUSH
78154: CALL_OW 273
78158: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78159: LD_VAR 0 5
78163: PPUSH
78164: LD_VAR 0 7
78168: PPUSH
78169: CALL_OW 488
78173: PUSH
78174: LD_VAR 0 5
78178: PPUSH
78179: LD_VAR 0 7
78183: PPUSH
78184: CALL_OW 428
78188: PPUSH
78189: CALL_OW 247
78193: PUSH
78194: LD_INT 3
78196: PUSH
78197: LD_INT 2
78199: PUSH
78200: EMPTY
78201: LIST
78202: LIST
78203: IN
78204: NOT
78205: AND
78206: IFFALSE 78250
// begin ComMoveXY ( unit , _x , _y ) ;
78208: LD_VAR 0 1
78212: PPUSH
78213: LD_VAR 0 5
78217: PPUSH
78218: LD_VAR 0 7
78222: PPUSH
78223: CALL_OW 111
// result := [ _x , _y ] ;
78227: LD_ADDR_VAR 0 3
78231: PUSH
78232: LD_VAR 0 5
78236: PUSH
78237: LD_VAR 0 7
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: ST_TO_ADDR
// exit ;
78246: POP
78247: POP
78248: GO 78254
// end ; end ;
78250: GO 78094
78252: POP
78253: POP
// end ;
78254: LD_VAR 0 3
78258: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78259: LD_INT 0
78261: PPUSH
78262: PPUSH
78263: PPUSH
// result := 0 ;
78264: LD_ADDR_VAR 0 3
78268: PUSH
78269: LD_INT 0
78271: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78272: LD_VAR 0 1
78276: PUSH
78277: LD_INT 0
78279: LESS
78280: PUSH
78281: LD_VAR 0 1
78285: PUSH
78286: LD_INT 8
78288: GREATER
78289: OR
78290: PUSH
78291: LD_VAR 0 2
78295: PUSH
78296: LD_INT 0
78298: LESS
78299: OR
78300: PUSH
78301: LD_VAR 0 2
78305: PUSH
78306: LD_INT 8
78308: GREATER
78309: OR
78310: IFFALSE 78314
// exit ;
78312: GO 78389
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78314: LD_ADDR_VAR 0 4
78318: PUSH
78319: LD_INT 22
78321: PUSH
78322: LD_VAR 0 2
78326: PUSH
78327: EMPTY
78328: LIST
78329: LIST
78330: PPUSH
78331: CALL_OW 69
78335: PUSH
78336: FOR_IN
78337: IFFALSE 78387
// begin un := UnitShoot ( i ) ;
78339: LD_ADDR_VAR 0 5
78343: PUSH
78344: LD_VAR 0 4
78348: PPUSH
78349: CALL_OW 504
78353: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78354: LD_VAR 0 5
78358: PPUSH
78359: CALL_OW 255
78363: PUSH
78364: LD_VAR 0 1
78368: EQUAL
78369: IFFALSE 78385
// begin result := un ;
78371: LD_ADDR_VAR 0 3
78375: PUSH
78376: LD_VAR 0 5
78380: ST_TO_ADDR
// exit ;
78381: POP
78382: POP
78383: GO 78389
// end ; end ;
78385: GO 78336
78387: POP
78388: POP
// end ;
78389: LD_VAR 0 3
78393: RET
// export function GetCargoBay ( units ) ; begin
78394: LD_INT 0
78396: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78397: LD_ADDR_VAR 0 2
78401: PUSH
78402: LD_VAR 0 1
78406: PPUSH
78407: LD_INT 2
78409: PUSH
78410: LD_INT 34
78412: PUSH
78413: LD_INT 12
78415: PUSH
78416: EMPTY
78417: LIST
78418: LIST
78419: PUSH
78420: LD_INT 34
78422: PUSH
78423: LD_INT 51
78425: PUSH
78426: EMPTY
78427: LIST
78428: LIST
78429: PUSH
78430: LD_INT 34
78432: PUSH
78433: LD_INT 32
78435: PUSH
78436: EMPTY
78437: LIST
78438: LIST
78439: PUSH
78440: LD_INT 34
78442: PUSH
78443: LD_INT 89
78445: PUSH
78446: EMPTY
78447: LIST
78448: LIST
78449: PUSH
78450: EMPTY
78451: LIST
78452: LIST
78453: LIST
78454: LIST
78455: LIST
78456: PPUSH
78457: CALL_OW 72
78461: ST_TO_ADDR
// end ;
78462: LD_VAR 0 2
78466: RET
// export function Negate ( value ) ; begin
78467: LD_INT 0
78469: PPUSH
// result := not value ;
78470: LD_ADDR_VAR 0 2
78474: PUSH
78475: LD_VAR 0 1
78479: NOT
78480: ST_TO_ADDR
// end ;
78481: LD_VAR 0 2
78485: RET
// export function Inc ( value ) ; begin
78486: LD_INT 0
78488: PPUSH
// result := value + 1 ;
78489: LD_ADDR_VAR 0 2
78493: PUSH
78494: LD_VAR 0 1
78498: PUSH
78499: LD_INT 1
78501: PLUS
78502: ST_TO_ADDR
// end ;
78503: LD_VAR 0 2
78507: RET
// export function Dec ( value ) ; begin
78508: LD_INT 0
78510: PPUSH
// result := value - 1 ;
78511: LD_ADDR_VAR 0 2
78515: PUSH
78516: LD_VAR 0 1
78520: PUSH
78521: LD_INT 1
78523: MINUS
78524: ST_TO_ADDR
// end ;
78525: LD_VAR 0 2
78529: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78530: LD_INT 0
78532: PPUSH
78533: PPUSH
78534: PPUSH
78535: PPUSH
78536: PPUSH
78537: PPUSH
78538: PPUSH
78539: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78540: LD_VAR 0 1
78544: PPUSH
78545: LD_VAR 0 2
78549: PPUSH
78550: CALL_OW 488
78554: NOT
78555: PUSH
78556: LD_VAR 0 3
78560: PPUSH
78561: LD_VAR 0 4
78565: PPUSH
78566: CALL_OW 488
78570: NOT
78571: OR
78572: IFFALSE 78585
// begin result := - 1 ;
78574: LD_ADDR_VAR 0 5
78578: PUSH
78579: LD_INT 1
78581: NEG
78582: ST_TO_ADDR
// exit ;
78583: GO 78820
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78585: LD_ADDR_VAR 0 12
78589: PUSH
78590: LD_VAR 0 1
78594: PPUSH
78595: LD_VAR 0 2
78599: PPUSH
78600: LD_VAR 0 3
78604: PPUSH
78605: LD_VAR 0 4
78609: PPUSH
78610: CALL 77670 0 4
78614: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78615: LD_ADDR_VAR 0 11
78619: PUSH
78620: LD_VAR 0 1
78624: PPUSH
78625: LD_VAR 0 2
78629: PPUSH
78630: LD_VAR 0 12
78634: PUSH
78635: LD_INT 1
78637: ARRAY
78638: PPUSH
78639: LD_VAR 0 12
78643: PUSH
78644: LD_INT 2
78646: ARRAY
78647: PPUSH
78648: CALL_OW 298
78652: ST_TO_ADDR
// distance := 9999 ;
78653: LD_ADDR_VAR 0 10
78657: PUSH
78658: LD_INT 9999
78660: ST_TO_ADDR
// for i := 0 to 5 do
78661: LD_ADDR_VAR 0 6
78665: PUSH
78666: DOUBLE
78667: LD_INT 0
78669: DEC
78670: ST_TO_ADDR
78671: LD_INT 5
78673: PUSH
78674: FOR_TO
78675: IFFALSE 78818
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78677: LD_ADDR_VAR 0 7
78681: PUSH
78682: LD_VAR 0 1
78686: PPUSH
78687: LD_VAR 0 6
78691: PPUSH
78692: LD_VAR 0 11
78696: PPUSH
78697: CALL_OW 272
78701: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78702: LD_ADDR_VAR 0 8
78706: PUSH
78707: LD_VAR 0 2
78711: PPUSH
78712: LD_VAR 0 6
78716: PPUSH
78717: LD_VAR 0 11
78721: PPUSH
78722: CALL_OW 273
78726: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78727: LD_VAR 0 7
78731: PPUSH
78732: LD_VAR 0 8
78736: PPUSH
78737: CALL_OW 488
78741: NOT
78742: IFFALSE 78746
// continue ;
78744: GO 78674
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78746: LD_ADDR_VAR 0 9
78750: PUSH
78751: LD_VAR 0 12
78755: PUSH
78756: LD_INT 1
78758: ARRAY
78759: PPUSH
78760: LD_VAR 0 12
78764: PUSH
78765: LD_INT 2
78767: ARRAY
78768: PPUSH
78769: LD_VAR 0 7
78773: PPUSH
78774: LD_VAR 0 8
78778: PPUSH
78779: CALL_OW 298
78783: ST_TO_ADDR
// if tmp < distance then
78784: LD_VAR 0 9
78788: PUSH
78789: LD_VAR 0 10
78793: LESS
78794: IFFALSE 78816
// begin result := i ;
78796: LD_ADDR_VAR 0 5
78800: PUSH
78801: LD_VAR 0 6
78805: ST_TO_ADDR
// distance := tmp ;
78806: LD_ADDR_VAR 0 10
78810: PUSH
78811: LD_VAR 0 9
78815: ST_TO_ADDR
// end ; end ;
78816: GO 78674
78818: POP
78819: POP
// end ;
78820: LD_VAR 0 5
78824: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78825: LD_INT 0
78827: PPUSH
78828: PPUSH
// if not driver or not IsInUnit ( driver ) then
78829: LD_VAR 0 1
78833: NOT
78834: PUSH
78835: LD_VAR 0 1
78839: PPUSH
78840: CALL_OW 310
78844: NOT
78845: OR
78846: IFFALSE 78850
// exit ;
78848: GO 78940
// vehicle := IsInUnit ( driver ) ;
78850: LD_ADDR_VAR 0 3
78854: PUSH
78855: LD_VAR 0 1
78859: PPUSH
78860: CALL_OW 310
78864: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78865: LD_VAR 0 1
78869: PPUSH
78870: LD_STRING \
78872: PUSH
78873: LD_INT 0
78875: PUSH
78876: LD_INT 0
78878: PUSH
78879: LD_INT 0
78881: PUSH
78882: LD_INT 0
78884: PUSH
78885: LD_INT 0
78887: PUSH
78888: LD_INT 0
78890: PUSH
78891: EMPTY
78892: LIST
78893: LIST
78894: LIST
78895: LIST
78896: LIST
78897: LIST
78898: LIST
78899: PUSH
78900: LD_STRING E
78902: PUSH
78903: LD_INT 0
78905: PUSH
78906: LD_INT 0
78908: PUSH
78909: LD_VAR 0 3
78913: PUSH
78914: LD_INT 0
78916: PUSH
78917: LD_INT 0
78919: PUSH
78920: LD_INT 0
78922: PUSH
78923: EMPTY
78924: LIST
78925: LIST
78926: LIST
78927: LIST
78928: LIST
78929: LIST
78930: LIST
78931: PUSH
78932: EMPTY
78933: LIST
78934: LIST
78935: PPUSH
78936: CALL_OW 446
// end ;
78940: LD_VAR 0 2
78944: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78945: LD_INT 0
78947: PPUSH
78948: PPUSH
// if not driver or not IsInUnit ( driver ) then
78949: LD_VAR 0 1
78953: NOT
78954: PUSH
78955: LD_VAR 0 1
78959: PPUSH
78960: CALL_OW 310
78964: NOT
78965: OR
78966: IFFALSE 78970
// exit ;
78968: GO 79060
// vehicle := IsInUnit ( driver ) ;
78970: LD_ADDR_VAR 0 3
78974: PUSH
78975: LD_VAR 0 1
78979: PPUSH
78980: CALL_OW 310
78984: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78985: LD_VAR 0 1
78989: PPUSH
78990: LD_STRING \
78992: PUSH
78993: LD_INT 0
78995: PUSH
78996: LD_INT 0
78998: PUSH
78999: LD_INT 0
79001: PUSH
79002: LD_INT 0
79004: PUSH
79005: LD_INT 0
79007: PUSH
79008: LD_INT 0
79010: PUSH
79011: EMPTY
79012: LIST
79013: LIST
79014: LIST
79015: LIST
79016: LIST
79017: LIST
79018: LIST
79019: PUSH
79020: LD_STRING E
79022: PUSH
79023: LD_INT 0
79025: PUSH
79026: LD_INT 0
79028: PUSH
79029: LD_VAR 0 3
79033: PUSH
79034: LD_INT 0
79036: PUSH
79037: LD_INT 0
79039: PUSH
79040: LD_INT 0
79042: PUSH
79043: EMPTY
79044: LIST
79045: LIST
79046: LIST
79047: LIST
79048: LIST
79049: LIST
79050: LIST
79051: PUSH
79052: EMPTY
79053: LIST
79054: LIST
79055: PPUSH
79056: CALL_OW 447
// end ;
79060: LD_VAR 0 2
79064: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79065: LD_INT 0
79067: PPUSH
79068: PPUSH
79069: PPUSH
// tmp := [ ] ;
79070: LD_ADDR_VAR 0 5
79074: PUSH
79075: EMPTY
79076: ST_TO_ADDR
// for i in units do
79077: LD_ADDR_VAR 0 4
79081: PUSH
79082: LD_VAR 0 1
79086: PUSH
79087: FOR_IN
79088: IFFALSE 79126
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79090: LD_ADDR_VAR 0 5
79094: PUSH
79095: LD_VAR 0 5
79099: PPUSH
79100: LD_VAR 0 5
79104: PUSH
79105: LD_INT 1
79107: PLUS
79108: PPUSH
79109: LD_VAR 0 4
79113: PPUSH
79114: CALL_OW 256
79118: PPUSH
79119: CALL_OW 2
79123: ST_TO_ADDR
79124: GO 79087
79126: POP
79127: POP
// if not tmp then
79128: LD_VAR 0 5
79132: NOT
79133: IFFALSE 79137
// exit ;
79135: GO 79185
// if asc then
79137: LD_VAR 0 2
79141: IFFALSE 79165
// result := SortListByListAsc ( units , tmp ) else
79143: LD_ADDR_VAR 0 3
79147: PUSH
79148: LD_VAR 0 1
79152: PPUSH
79153: LD_VAR 0 5
79157: PPUSH
79158: CALL_OW 76
79162: ST_TO_ADDR
79163: GO 79185
// result := SortListByListDesc ( units , tmp ) ;
79165: LD_ADDR_VAR 0 3
79169: PUSH
79170: LD_VAR 0 1
79174: PPUSH
79175: LD_VAR 0 5
79179: PPUSH
79180: CALL_OW 77
79184: ST_TO_ADDR
// end ;
79185: LD_VAR 0 3
79189: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79190: LD_INT 0
79192: PPUSH
79193: PPUSH
// task := GetTaskList ( mech ) ;
79194: LD_ADDR_VAR 0 4
79198: PUSH
79199: LD_VAR 0 1
79203: PPUSH
79204: CALL_OW 437
79208: ST_TO_ADDR
// if not task then
79209: LD_VAR 0 4
79213: NOT
79214: IFFALSE 79218
// exit ;
79216: GO 79260
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79218: LD_ADDR_VAR 0 3
79222: PUSH
79223: LD_VAR 0 4
79227: PUSH
79228: LD_INT 1
79230: ARRAY
79231: PUSH
79232: LD_INT 1
79234: ARRAY
79235: PUSH
79236: LD_STRING r
79238: EQUAL
79239: PUSH
79240: LD_VAR 0 4
79244: PUSH
79245: LD_INT 1
79247: ARRAY
79248: PUSH
79249: LD_INT 4
79251: ARRAY
79252: PUSH
79253: LD_VAR 0 2
79257: EQUAL
79258: AND
79259: ST_TO_ADDR
// end ;
79260: LD_VAR 0 3
79264: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79265: LD_INT 0
79267: PPUSH
// SetDir ( unit , d ) ;
79268: LD_VAR 0 1
79272: PPUSH
79273: LD_VAR 0 4
79277: PPUSH
79278: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79282: LD_VAR 0 1
79286: PPUSH
79287: LD_VAR 0 2
79291: PPUSH
79292: LD_VAR 0 3
79296: PPUSH
79297: LD_VAR 0 5
79301: PPUSH
79302: CALL_OW 48
// end ;
79306: LD_VAR 0 6
79310: RET
// export function ToNaturalNumber ( number ) ; begin
79311: LD_INT 0
79313: PPUSH
// result := number div 1 ;
79314: LD_ADDR_VAR 0 2
79318: PUSH
79319: LD_VAR 0 1
79323: PUSH
79324: LD_INT 1
79326: DIV
79327: ST_TO_ADDR
// if number < 0 then
79328: LD_VAR 0 1
79332: PUSH
79333: LD_INT 0
79335: LESS
79336: IFFALSE 79346
// result := 0 ;
79338: LD_ADDR_VAR 0 2
79342: PUSH
79343: LD_INT 0
79345: ST_TO_ADDR
// end ;
79346: LD_VAR 0 2
79350: RET
// export function SortByClass ( units , class ) ; var un ; begin
79351: LD_INT 0
79353: PPUSH
79354: PPUSH
// if not units or not class then
79355: LD_VAR 0 1
79359: NOT
79360: PUSH
79361: LD_VAR 0 2
79365: NOT
79366: OR
79367: IFFALSE 79371
// exit ;
79369: GO 79466
// result := [ ] ;
79371: LD_ADDR_VAR 0 3
79375: PUSH
79376: EMPTY
79377: ST_TO_ADDR
// for un in units do
79378: LD_ADDR_VAR 0 4
79382: PUSH
79383: LD_VAR 0 1
79387: PUSH
79388: FOR_IN
79389: IFFALSE 79464
// if GetClass ( un ) = class then
79391: LD_VAR 0 4
79395: PPUSH
79396: CALL_OW 257
79400: PUSH
79401: LD_VAR 0 2
79405: EQUAL
79406: IFFALSE 79433
// result := Insert ( result , 1 , un ) else
79408: LD_ADDR_VAR 0 3
79412: PUSH
79413: LD_VAR 0 3
79417: PPUSH
79418: LD_INT 1
79420: PPUSH
79421: LD_VAR 0 4
79425: PPUSH
79426: CALL_OW 2
79430: ST_TO_ADDR
79431: GO 79462
// result := Replace ( result , result + 1 , un ) ;
79433: LD_ADDR_VAR 0 3
79437: PUSH
79438: LD_VAR 0 3
79442: PPUSH
79443: LD_VAR 0 3
79447: PUSH
79448: LD_INT 1
79450: PLUS
79451: PPUSH
79452: LD_VAR 0 4
79456: PPUSH
79457: CALL_OW 1
79461: ST_TO_ADDR
79462: GO 79388
79464: POP
79465: POP
// end ;
79466: LD_VAR 0 3
79470: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79471: LD_INT 0
79473: PPUSH
79474: PPUSH
79475: PPUSH
79476: PPUSH
79477: PPUSH
79478: PPUSH
79479: PPUSH
// result := [ ] ;
79480: LD_ADDR_VAR 0 4
79484: PUSH
79485: EMPTY
79486: ST_TO_ADDR
// if x - r < 0 then
79487: LD_VAR 0 1
79491: PUSH
79492: LD_VAR 0 3
79496: MINUS
79497: PUSH
79498: LD_INT 0
79500: LESS
79501: IFFALSE 79513
// min_x := 0 else
79503: LD_ADDR_VAR 0 8
79507: PUSH
79508: LD_INT 0
79510: ST_TO_ADDR
79511: GO 79529
// min_x := x - r ;
79513: LD_ADDR_VAR 0 8
79517: PUSH
79518: LD_VAR 0 1
79522: PUSH
79523: LD_VAR 0 3
79527: MINUS
79528: ST_TO_ADDR
// if y - r < 0 then
79529: LD_VAR 0 2
79533: PUSH
79534: LD_VAR 0 3
79538: MINUS
79539: PUSH
79540: LD_INT 0
79542: LESS
79543: IFFALSE 79555
// min_y := 0 else
79545: LD_ADDR_VAR 0 7
79549: PUSH
79550: LD_INT 0
79552: ST_TO_ADDR
79553: GO 79571
// min_y := y - r ;
79555: LD_ADDR_VAR 0 7
79559: PUSH
79560: LD_VAR 0 2
79564: PUSH
79565: LD_VAR 0 3
79569: MINUS
79570: ST_TO_ADDR
// max_x := x + r ;
79571: LD_ADDR_VAR 0 9
79575: PUSH
79576: LD_VAR 0 1
79580: PUSH
79581: LD_VAR 0 3
79585: PLUS
79586: ST_TO_ADDR
// max_y := y + r ;
79587: LD_ADDR_VAR 0 10
79591: PUSH
79592: LD_VAR 0 2
79596: PUSH
79597: LD_VAR 0 3
79601: PLUS
79602: ST_TO_ADDR
// for _x = min_x to max_x do
79603: LD_ADDR_VAR 0 5
79607: PUSH
79608: DOUBLE
79609: LD_VAR 0 8
79613: DEC
79614: ST_TO_ADDR
79615: LD_VAR 0 9
79619: PUSH
79620: FOR_TO
79621: IFFALSE 79722
// for _y = min_y to max_y do
79623: LD_ADDR_VAR 0 6
79627: PUSH
79628: DOUBLE
79629: LD_VAR 0 7
79633: DEC
79634: ST_TO_ADDR
79635: LD_VAR 0 10
79639: PUSH
79640: FOR_TO
79641: IFFALSE 79718
// begin if not ValidHex ( _x , _y ) then
79643: LD_VAR 0 5
79647: PPUSH
79648: LD_VAR 0 6
79652: PPUSH
79653: CALL_OW 488
79657: NOT
79658: IFFALSE 79662
// continue ;
79660: GO 79640
// if GetResourceTypeXY ( _x , _y ) then
79662: LD_VAR 0 5
79666: PPUSH
79667: LD_VAR 0 6
79671: PPUSH
79672: CALL_OW 283
79676: IFFALSE 79716
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79678: LD_ADDR_VAR 0 4
79682: PUSH
79683: LD_VAR 0 4
79687: PPUSH
79688: LD_VAR 0 4
79692: PUSH
79693: LD_INT 1
79695: PLUS
79696: PPUSH
79697: LD_VAR 0 5
79701: PUSH
79702: LD_VAR 0 6
79706: PUSH
79707: EMPTY
79708: LIST
79709: LIST
79710: PPUSH
79711: CALL_OW 1
79715: ST_TO_ADDR
// end ;
79716: GO 79640
79718: POP
79719: POP
79720: GO 79620
79722: POP
79723: POP
// end ;
79724: LD_VAR 0 4
79728: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79729: LD_INT 0
79731: PPUSH
79732: PPUSH
79733: PPUSH
79734: PPUSH
79735: PPUSH
79736: PPUSH
79737: PPUSH
79738: PPUSH
// if not units then
79739: LD_VAR 0 1
79743: NOT
79744: IFFALSE 79748
// exit ;
79746: GO 80272
// result := UnitFilter ( units , [ f_ok ] ) ;
79748: LD_ADDR_VAR 0 3
79752: PUSH
79753: LD_VAR 0 1
79757: PPUSH
79758: LD_INT 50
79760: PUSH
79761: EMPTY
79762: LIST
79763: PPUSH
79764: CALL_OW 72
79768: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79769: LD_ADDR_VAR 0 8
79773: PUSH
79774: LD_VAR 0 1
79778: PUSH
79779: LD_INT 1
79781: ARRAY
79782: PPUSH
79783: CALL_OW 255
79787: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79788: LD_ADDR_VAR 0 10
79792: PUSH
79793: LD_INT 29
79795: PUSH
79796: LD_INT 91
79798: PUSH
79799: LD_INT 49
79801: PUSH
79802: EMPTY
79803: LIST
79804: LIST
79805: LIST
79806: ST_TO_ADDR
// if not result then
79807: LD_VAR 0 3
79811: NOT
79812: IFFALSE 79816
// exit ;
79814: GO 80272
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79816: LD_ADDR_VAR 0 5
79820: PUSH
79821: LD_INT 81
79823: PUSH
79824: LD_VAR 0 8
79828: PUSH
79829: EMPTY
79830: LIST
79831: LIST
79832: PPUSH
79833: CALL_OW 69
79837: ST_TO_ADDR
// for i in result do
79838: LD_ADDR_VAR 0 4
79842: PUSH
79843: LD_VAR 0 3
79847: PUSH
79848: FOR_IN
79849: IFFALSE 80270
// begin tag := GetTag ( i ) + 1 ;
79851: LD_ADDR_VAR 0 9
79855: PUSH
79856: LD_VAR 0 4
79860: PPUSH
79861: CALL_OW 110
79865: PUSH
79866: LD_INT 1
79868: PLUS
79869: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79870: LD_ADDR_VAR 0 7
79874: PUSH
79875: LD_VAR 0 4
79879: PPUSH
79880: CALL_OW 250
79884: PPUSH
79885: LD_VAR 0 4
79889: PPUSH
79890: CALL_OW 251
79894: PPUSH
79895: LD_INT 6
79897: PPUSH
79898: CALL 79471 0 3
79902: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79903: LD_VAR 0 4
79907: PPUSH
79908: CALL_OW 247
79912: PUSH
79913: LD_INT 2
79915: EQUAL
79916: PUSH
79917: LD_VAR 0 7
79921: AND
79922: PUSH
79923: LD_VAR 0 4
79927: PPUSH
79928: CALL_OW 264
79932: PUSH
79933: LD_VAR 0 10
79937: IN
79938: NOT
79939: AND
79940: IFFALSE 79979
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79942: LD_VAR 0 4
79946: PPUSH
79947: LD_VAR 0 7
79951: PUSH
79952: LD_INT 1
79954: ARRAY
79955: PUSH
79956: LD_INT 1
79958: ARRAY
79959: PPUSH
79960: LD_VAR 0 7
79964: PUSH
79965: LD_INT 1
79967: ARRAY
79968: PUSH
79969: LD_INT 2
79971: ARRAY
79972: PPUSH
79973: CALL_OW 116
79977: GO 80268
// if path > tag then
79979: LD_VAR 0 2
79983: PUSH
79984: LD_VAR 0 9
79988: GREATER
79989: IFFALSE 80197
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79991: LD_ADDR_VAR 0 6
79995: PUSH
79996: LD_VAR 0 5
80000: PPUSH
80001: LD_INT 91
80003: PUSH
80004: LD_VAR 0 4
80008: PUSH
80009: LD_INT 8
80011: PUSH
80012: EMPTY
80013: LIST
80014: LIST
80015: LIST
80016: PPUSH
80017: CALL_OW 72
80021: ST_TO_ADDR
// if nearEnemy then
80022: LD_VAR 0 6
80026: IFFALSE 80095
// begin if GetWeapon ( i ) = ru_time_lapser then
80028: LD_VAR 0 4
80032: PPUSH
80033: CALL_OW 264
80037: PUSH
80038: LD_INT 49
80040: EQUAL
80041: IFFALSE 80069
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80043: LD_VAR 0 4
80047: PPUSH
80048: LD_VAR 0 6
80052: PPUSH
80053: LD_VAR 0 4
80057: PPUSH
80058: CALL_OW 74
80062: PPUSH
80063: CALL_OW 112
80067: GO 80093
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80069: LD_VAR 0 4
80073: PPUSH
80074: LD_VAR 0 6
80078: PPUSH
80079: LD_VAR 0 4
80083: PPUSH
80084: CALL_OW 74
80088: PPUSH
80089: CALL 81197 0 2
// end else
80093: GO 80195
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80095: LD_VAR 0 4
80099: PPUSH
80100: LD_VAR 0 2
80104: PUSH
80105: LD_VAR 0 9
80109: ARRAY
80110: PUSH
80111: LD_INT 1
80113: ARRAY
80114: PPUSH
80115: LD_VAR 0 2
80119: PUSH
80120: LD_VAR 0 9
80124: ARRAY
80125: PUSH
80126: LD_INT 2
80128: ARRAY
80129: PPUSH
80130: CALL_OW 297
80134: PUSH
80135: LD_INT 6
80137: GREATER
80138: IFFALSE 80181
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80140: LD_VAR 0 4
80144: PPUSH
80145: LD_VAR 0 2
80149: PUSH
80150: LD_VAR 0 9
80154: ARRAY
80155: PUSH
80156: LD_INT 1
80158: ARRAY
80159: PPUSH
80160: LD_VAR 0 2
80164: PUSH
80165: LD_VAR 0 9
80169: ARRAY
80170: PUSH
80171: LD_INT 2
80173: ARRAY
80174: PPUSH
80175: CALL_OW 114
80179: GO 80195
// SetTag ( i , tag ) ;
80181: LD_VAR 0 4
80185: PPUSH
80186: LD_VAR 0 9
80190: PPUSH
80191: CALL_OW 109
// end else
80195: GO 80268
// if enemy then
80197: LD_VAR 0 5
80201: IFFALSE 80268
// begin if GetWeapon ( i ) = ru_time_lapser then
80203: LD_VAR 0 4
80207: PPUSH
80208: CALL_OW 264
80212: PUSH
80213: LD_INT 49
80215: EQUAL
80216: IFFALSE 80244
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80218: LD_VAR 0 4
80222: PPUSH
80223: LD_VAR 0 5
80227: PPUSH
80228: LD_VAR 0 4
80232: PPUSH
80233: CALL_OW 74
80237: PPUSH
80238: CALL_OW 112
80242: GO 80268
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80244: LD_VAR 0 4
80248: PPUSH
80249: LD_VAR 0 5
80253: PPUSH
80254: LD_VAR 0 4
80258: PPUSH
80259: CALL_OW 74
80263: PPUSH
80264: CALL 81197 0 2
// end ; end ;
80268: GO 79848
80270: POP
80271: POP
// end ;
80272: LD_VAR 0 3
80276: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80277: LD_INT 0
80279: PPUSH
80280: PPUSH
80281: PPUSH
// if not unit or IsInUnit ( unit ) then
80282: LD_VAR 0 1
80286: NOT
80287: PUSH
80288: LD_VAR 0 1
80292: PPUSH
80293: CALL_OW 310
80297: OR
80298: IFFALSE 80302
// exit ;
80300: GO 80393
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80302: LD_ADDR_VAR 0 4
80306: PUSH
80307: LD_VAR 0 1
80311: PPUSH
80312: CALL_OW 250
80316: PPUSH
80317: LD_VAR 0 2
80321: PPUSH
80322: LD_INT 1
80324: PPUSH
80325: CALL_OW 272
80329: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80330: LD_ADDR_VAR 0 5
80334: PUSH
80335: LD_VAR 0 1
80339: PPUSH
80340: CALL_OW 251
80344: PPUSH
80345: LD_VAR 0 2
80349: PPUSH
80350: LD_INT 1
80352: PPUSH
80353: CALL_OW 273
80357: ST_TO_ADDR
// if ValidHex ( x , y ) then
80358: LD_VAR 0 4
80362: PPUSH
80363: LD_VAR 0 5
80367: PPUSH
80368: CALL_OW 488
80372: IFFALSE 80393
// ComTurnXY ( unit , x , y ) ;
80374: LD_VAR 0 1
80378: PPUSH
80379: LD_VAR 0 4
80383: PPUSH
80384: LD_VAR 0 5
80388: PPUSH
80389: CALL_OW 118
// end ;
80393: LD_VAR 0 3
80397: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80398: LD_INT 0
80400: PPUSH
80401: PPUSH
// result := false ;
80402: LD_ADDR_VAR 0 3
80406: PUSH
80407: LD_INT 0
80409: ST_TO_ADDR
// if not units then
80410: LD_VAR 0 2
80414: NOT
80415: IFFALSE 80419
// exit ;
80417: GO 80464
// for i in units do
80419: LD_ADDR_VAR 0 4
80423: PUSH
80424: LD_VAR 0 2
80428: PUSH
80429: FOR_IN
80430: IFFALSE 80462
// if See ( side , i ) then
80432: LD_VAR 0 1
80436: PPUSH
80437: LD_VAR 0 4
80441: PPUSH
80442: CALL_OW 292
80446: IFFALSE 80460
// begin result := true ;
80448: LD_ADDR_VAR 0 3
80452: PUSH
80453: LD_INT 1
80455: ST_TO_ADDR
// exit ;
80456: POP
80457: POP
80458: GO 80464
// end ;
80460: GO 80429
80462: POP
80463: POP
// end ;
80464: LD_VAR 0 3
80468: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80469: LD_INT 0
80471: PPUSH
80472: PPUSH
80473: PPUSH
80474: PPUSH
// if not unit or not points then
80475: LD_VAR 0 1
80479: NOT
80480: PUSH
80481: LD_VAR 0 2
80485: NOT
80486: OR
80487: IFFALSE 80491
// exit ;
80489: GO 80581
// dist := 99999 ;
80491: LD_ADDR_VAR 0 5
80495: PUSH
80496: LD_INT 99999
80498: ST_TO_ADDR
// for i in points do
80499: LD_ADDR_VAR 0 4
80503: PUSH
80504: LD_VAR 0 2
80508: PUSH
80509: FOR_IN
80510: IFFALSE 80579
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80512: LD_ADDR_VAR 0 6
80516: PUSH
80517: LD_VAR 0 1
80521: PPUSH
80522: LD_VAR 0 4
80526: PUSH
80527: LD_INT 1
80529: ARRAY
80530: PPUSH
80531: LD_VAR 0 4
80535: PUSH
80536: LD_INT 2
80538: ARRAY
80539: PPUSH
80540: CALL_OW 297
80544: ST_TO_ADDR
// if tmpDist < dist then
80545: LD_VAR 0 6
80549: PUSH
80550: LD_VAR 0 5
80554: LESS
80555: IFFALSE 80577
// begin result := i ;
80557: LD_ADDR_VAR 0 3
80561: PUSH
80562: LD_VAR 0 4
80566: ST_TO_ADDR
// dist := tmpDist ;
80567: LD_ADDR_VAR 0 5
80571: PUSH
80572: LD_VAR 0 6
80576: ST_TO_ADDR
// end ; end ;
80577: GO 80509
80579: POP
80580: POP
// end ;
80581: LD_VAR 0 3
80585: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80586: LD_INT 0
80588: PPUSH
// uc_side := side ;
80589: LD_ADDR_OWVAR 20
80593: PUSH
80594: LD_VAR 0 1
80598: ST_TO_ADDR
// uc_nation := 3 ;
80599: LD_ADDR_OWVAR 21
80603: PUSH
80604: LD_INT 3
80606: ST_TO_ADDR
// vc_chassis := 25 ;
80607: LD_ADDR_OWVAR 37
80611: PUSH
80612: LD_INT 25
80614: ST_TO_ADDR
// vc_engine := engine_siberite ;
80615: LD_ADDR_OWVAR 39
80619: PUSH
80620: LD_INT 3
80622: ST_TO_ADDR
// vc_control := control_computer ;
80623: LD_ADDR_OWVAR 38
80627: PUSH
80628: LD_INT 3
80630: ST_TO_ADDR
// vc_weapon := 59 ;
80631: LD_ADDR_OWVAR 40
80635: PUSH
80636: LD_INT 59
80638: ST_TO_ADDR
// result := CreateVehicle ;
80639: LD_ADDR_VAR 0 5
80643: PUSH
80644: CALL_OW 45
80648: ST_TO_ADDR
// SetDir ( result , d ) ;
80649: LD_VAR 0 5
80653: PPUSH
80654: LD_VAR 0 4
80658: PPUSH
80659: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80663: LD_VAR 0 5
80667: PPUSH
80668: LD_VAR 0 2
80672: PPUSH
80673: LD_VAR 0 3
80677: PPUSH
80678: LD_INT 0
80680: PPUSH
80681: CALL_OW 48
// end ;
80685: LD_VAR 0 5
80689: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80690: LD_INT 0
80692: PPUSH
80693: PPUSH
80694: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80695: LD_ADDR_VAR 0 2
80699: PUSH
80700: LD_INT 0
80702: PUSH
80703: LD_INT 0
80705: PUSH
80706: LD_INT 0
80708: PUSH
80709: LD_INT 0
80711: PUSH
80712: EMPTY
80713: LIST
80714: LIST
80715: LIST
80716: LIST
80717: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80718: LD_VAR 0 1
80722: NOT
80723: PUSH
80724: LD_VAR 0 1
80728: PPUSH
80729: CALL_OW 264
80733: PUSH
80734: LD_INT 12
80736: PUSH
80737: LD_INT 51
80739: PUSH
80740: LD_INT 32
80742: PUSH
80743: LD_INT 89
80745: PUSH
80746: EMPTY
80747: LIST
80748: LIST
80749: LIST
80750: LIST
80751: IN
80752: NOT
80753: OR
80754: IFFALSE 80758
// exit ;
80756: GO 80856
// for i := 1 to 3 do
80758: LD_ADDR_VAR 0 3
80762: PUSH
80763: DOUBLE
80764: LD_INT 1
80766: DEC
80767: ST_TO_ADDR
80768: LD_INT 3
80770: PUSH
80771: FOR_TO
80772: IFFALSE 80854
// begin tmp := GetCargo ( cargo , i ) ;
80774: LD_ADDR_VAR 0 4
80778: PUSH
80779: LD_VAR 0 1
80783: PPUSH
80784: LD_VAR 0 3
80788: PPUSH
80789: CALL_OW 289
80793: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80794: LD_ADDR_VAR 0 2
80798: PUSH
80799: LD_VAR 0 2
80803: PPUSH
80804: LD_VAR 0 3
80808: PPUSH
80809: LD_VAR 0 4
80813: PPUSH
80814: CALL_OW 1
80818: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80819: LD_ADDR_VAR 0 2
80823: PUSH
80824: LD_VAR 0 2
80828: PPUSH
80829: LD_INT 4
80831: PPUSH
80832: LD_VAR 0 2
80836: PUSH
80837: LD_INT 4
80839: ARRAY
80840: PUSH
80841: LD_VAR 0 4
80845: PLUS
80846: PPUSH
80847: CALL_OW 1
80851: ST_TO_ADDR
// end ;
80852: GO 80771
80854: POP
80855: POP
// end ;
80856: LD_VAR 0 2
80860: RET
// export function Length ( array ) ; begin
80861: LD_INT 0
80863: PPUSH
// result := array + 0 ;
80864: LD_ADDR_VAR 0 2
80868: PUSH
80869: LD_VAR 0 1
80873: PUSH
80874: LD_INT 0
80876: PLUS
80877: ST_TO_ADDR
// end ;
80878: LD_VAR 0 2
80882: RET
// export function PrepareArray ( array ) ; begin
80883: LD_INT 0
80885: PPUSH
// result := array diff 0 ;
80886: LD_ADDR_VAR 0 2
80890: PUSH
80891: LD_VAR 0 1
80895: PUSH
80896: LD_INT 0
80898: DIFF
80899: ST_TO_ADDR
// if not result [ 1 ] then
80900: LD_VAR 0 2
80904: PUSH
80905: LD_INT 1
80907: ARRAY
80908: NOT
80909: IFFALSE 80929
// result := Delete ( result , 1 ) ;
80911: LD_ADDR_VAR 0 2
80915: PUSH
80916: LD_VAR 0 2
80920: PPUSH
80921: LD_INT 1
80923: PPUSH
80924: CALL_OW 3
80928: ST_TO_ADDR
// end ;
80929: LD_VAR 0 2
80933: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80934: LD_INT 0
80936: PPUSH
80937: PPUSH
80938: PPUSH
80939: PPUSH
// sibRocketRange := 25 ;
80940: LD_ADDR_VAR 0 6
80944: PUSH
80945: LD_INT 25
80947: ST_TO_ADDR
// result := false ;
80948: LD_ADDR_VAR 0 4
80952: PUSH
80953: LD_INT 0
80955: ST_TO_ADDR
// for i := 0 to 5 do
80956: LD_ADDR_VAR 0 5
80960: PUSH
80961: DOUBLE
80962: LD_INT 0
80964: DEC
80965: ST_TO_ADDR
80966: LD_INT 5
80968: PUSH
80969: FOR_TO
80970: IFFALSE 81037
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80972: LD_VAR 0 1
80976: PPUSH
80977: LD_VAR 0 5
80981: PPUSH
80982: LD_VAR 0 6
80986: PPUSH
80987: CALL_OW 272
80991: PPUSH
80992: LD_VAR 0 2
80996: PPUSH
80997: LD_VAR 0 5
81001: PPUSH
81002: LD_VAR 0 6
81006: PPUSH
81007: CALL_OW 273
81011: PPUSH
81012: LD_VAR 0 3
81016: PPUSH
81017: CALL_OW 309
81021: IFFALSE 81035
// begin result := true ;
81023: LD_ADDR_VAR 0 4
81027: PUSH
81028: LD_INT 1
81030: ST_TO_ADDR
// exit ;
81031: POP
81032: POP
81033: GO 81039
// end ;
81035: GO 80969
81037: POP
81038: POP
// end ;
81039: LD_VAR 0 4
81043: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81044: LD_INT 0
81046: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81047: LD_VAR 0 1
81051: PPUSH
81052: LD_VAR 0 2
81056: PPUSH
81057: LD_INT 0
81059: PPUSH
81060: LD_INT 0
81062: PPUSH
81063: LD_INT 1
81065: PPUSH
81066: LD_INT 0
81068: PPUSH
81069: CALL_OW 587
// end ;
81073: LD_VAR 0 3
81077: RET
// export function CenterOnNow ( unit ) ; begin
81078: LD_INT 0
81080: PPUSH
// result := IsInUnit ( unit ) ;
81081: LD_ADDR_VAR 0 2
81085: PUSH
81086: LD_VAR 0 1
81090: PPUSH
81091: CALL_OW 310
81095: ST_TO_ADDR
// if not result then
81096: LD_VAR 0 2
81100: NOT
81101: IFFALSE 81113
// result := unit ;
81103: LD_ADDR_VAR 0 2
81107: PUSH
81108: LD_VAR 0 1
81112: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81113: LD_VAR 0 1
81117: PPUSH
81118: CALL_OW 87
// end ;
81122: LD_VAR 0 2
81126: RET
// export function ComMoveHex ( unit , hex ) ; begin
81127: LD_INT 0
81129: PPUSH
// if not hex then
81130: LD_VAR 0 2
81134: NOT
81135: IFFALSE 81139
// exit ;
81137: GO 81192
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81139: LD_VAR 0 2
81143: PUSH
81144: LD_INT 1
81146: ARRAY
81147: PPUSH
81148: LD_VAR 0 2
81152: PUSH
81153: LD_INT 2
81155: ARRAY
81156: PPUSH
81157: CALL_OW 428
81161: IFFALSE 81165
// exit ;
81163: GO 81192
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81165: LD_VAR 0 1
81169: PPUSH
81170: LD_VAR 0 2
81174: PUSH
81175: LD_INT 1
81177: ARRAY
81178: PPUSH
81179: LD_VAR 0 2
81183: PUSH
81184: LD_INT 2
81186: ARRAY
81187: PPUSH
81188: CALL_OW 111
// end ;
81192: LD_VAR 0 3
81196: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
81197: LD_INT 0
81199: PPUSH
81200: PPUSH
81201: PPUSH
// if not unit or not enemy then
81202: LD_VAR 0 1
81206: NOT
81207: PUSH
81208: LD_VAR 0 2
81212: NOT
81213: OR
81214: IFFALSE 81218
// exit ;
81216: GO 81342
// x := GetX ( enemy ) ;
81218: LD_ADDR_VAR 0 4
81222: PUSH
81223: LD_VAR 0 2
81227: PPUSH
81228: CALL_OW 250
81232: ST_TO_ADDR
// y := GetY ( enemy ) ;
81233: LD_ADDR_VAR 0 5
81237: PUSH
81238: LD_VAR 0 2
81242: PPUSH
81243: CALL_OW 251
81247: ST_TO_ADDR
// if ValidHex ( x , y ) then
81248: LD_VAR 0 4
81252: PPUSH
81253: LD_VAR 0 5
81257: PPUSH
81258: CALL_OW 488
81262: IFFALSE 81342
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
81264: LD_VAR 0 2
81268: PPUSH
81269: CALL_OW 247
81273: PUSH
81274: LD_INT 3
81276: PUSH
81277: LD_INT 2
81279: PUSH
81280: EMPTY
81281: LIST
81282: LIST
81283: IN
81284: PUSH
81285: LD_VAR 0 1
81289: PPUSH
81290: CALL_OW 255
81294: PPUSH
81295: LD_VAR 0 2
81299: PPUSH
81300: CALL_OW 292
81304: AND
81305: IFFALSE 81323
// ComAttackUnit ( unit , enemy ) else
81307: LD_VAR 0 1
81311: PPUSH
81312: LD_VAR 0 2
81316: PPUSH
81317: CALL_OW 115
81321: GO 81342
// ComAgressiveMove ( unit , x , y ) ;
81323: LD_VAR 0 1
81327: PPUSH
81328: LD_VAR 0 4
81332: PPUSH
81333: LD_VAR 0 5
81337: PPUSH
81338: CALL_OW 114
// end ; end_of_file
81342: LD_VAR 0 3
81346: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81347: LD_VAR 0 1
81351: PUSH
81352: LD_INT 200
81354: DOUBLE
81355: GREATEREQUAL
81356: IFFALSE 81364
81358: LD_INT 299
81360: DOUBLE
81361: LESSEQUAL
81362: IFTRUE 81366
81364: GO 81398
81366: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81367: LD_VAR 0 1
81371: PPUSH
81372: LD_VAR 0 2
81376: PPUSH
81377: LD_VAR 0 3
81381: PPUSH
81382: LD_VAR 0 4
81386: PPUSH
81387: LD_VAR 0 5
81391: PPUSH
81392: CALL 35891 0 5
81396: GO 81475
81398: LD_INT 300
81400: DOUBLE
81401: GREATEREQUAL
81402: IFFALSE 81410
81404: LD_INT 399
81406: DOUBLE
81407: LESSEQUAL
81408: IFTRUE 81412
81410: GO 81474
81412: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81413: LD_VAR 0 1
81417: PPUSH
81418: LD_VAR 0 2
81422: PPUSH
81423: LD_VAR 0 3
81427: PPUSH
81428: LD_VAR 0 4
81432: PPUSH
81433: LD_VAR 0 5
81437: PPUSH
81438: LD_VAR 0 6
81442: PPUSH
81443: LD_VAR 0 7
81447: PPUSH
81448: LD_VAR 0 8
81452: PPUSH
81453: LD_VAR 0 9
81457: PPUSH
81458: LD_VAR 0 10
81462: PPUSH
81463: LD_VAR 0 11
81467: PPUSH
81468: CALL 32216 0 11
81472: GO 81475
81474: POP
// end ;
81475: PPOPN 11
81477: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81478: LD_VAR 0 1
81482: PPUSH
81483: LD_VAR 0 2
81487: PPUSH
81488: LD_VAR 0 3
81492: PPUSH
81493: LD_VAR 0 4
81497: PPUSH
81498: LD_VAR 0 5
81502: PPUSH
81503: CALL 35627 0 5
// end ; end_of_file
81507: PPOPN 5
81509: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81510: LD_VAR 0 1
81514: PPUSH
81515: LD_VAR 0 2
81519: PPUSH
81520: LD_VAR 0 3
81524: PPUSH
81525: LD_VAR 0 4
81529: PPUSH
81530: LD_VAR 0 5
81534: PPUSH
81535: LD_VAR 0 6
81539: PPUSH
81540: CALL 19868 0 6
// end ;
81544: PPOPN 6
81546: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81547: LD_INT 0
81549: PPUSH
// begin if not units then
81550: LD_VAR 0 1
81554: NOT
81555: IFFALSE 81559
// exit ;
81557: GO 81559
// end ;
81559: PPOPN 7
81561: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81562: CALL 19772 0 0
// end ;
81566: PPOPN 1
81568: END
