// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 48
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 49
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 45
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// bonusAvalaible = 0 ;
  68: LD_ADDR_EXP 44
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// firstRussianAttack = 0 ;
  76: LD_ADDR_EXP 23
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// saveDonaldson = 0 ;
  84: LD_ADDR_EXP 24
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// frankScoutBase = 0 ;
  92: LD_ADDR_EXP 25
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// harrAnswer = 0 ;
 100: LD_ADDR_EXP 26
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 108: LD_ADDR_EXP 27
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 116: LD_ADDR_EXP 28
 120: PUSH
 121: LD_INT 18900
 123: ST_TO_ADDR
// timerStatus = 0 ;
 124: LD_ADDR_EXP 29
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// startTimer = 0 ;
 132: LD_ADDR_EXP 30
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// factoryDialog = 0 ;
 140: LD_ADDR_EXP 31
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// bunkerDialog = 0 ;
 148: LD_ADDR_EXP 32
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// energyVDialog = 0 ;
 156: LD_ADDR_EXP 33
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildOil = 0 ;
 164: LD_ADDR_EXP 34
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// buildPower = 0 ;
 172: LD_ADDR_EXP 35
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 180: LD_ADDR_EXP 36
 184: PUSH
 185: LD_INT 14
 187: PUSH
 188: LD_INT 12
 190: PUSH
 191: LD_INT 11
 193: PUSH
 194: LD_INT 10
 196: PUSH
 197: EMPTY
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: PUSH
 203: LD_OWVAR 67
 207: ARRAY
 208: ST_TO_ADDR
// AIEnable = 1 ;
 209: LD_ADDR_EXP 37
 213: PUSH
 214: LD_INT 1
 216: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 217: LD_ADDR_EXP 41
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// lostCounter = 0 ;
 225: LD_ADDR_EXP 38
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// honor = 1 ;
 233: LD_ADDR_EXP 39
 237: PUSH
 238: LD_INT 1
 240: ST_TO_ADDR
// escapeAvalaible = 0 ;
 241: LD_ADDR_EXP 40
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// specAttack := false ;
 249: LD_ADDR_EXP 47
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// ruMobile := [ ] ;
 257: LD_ADDR_EXP 46
 261: PUSH
 262: EMPTY
 263: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 264: LD_ADDR_EXP 43
 268: PUSH
 269: LD_INT 3
 271: PUSH
 272: LD_INT 4
 274: PUSH
 275: LD_INT 5
 277: PUSH
 278: LD_INT 6
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: LIST
 285: LIST
 286: PUSH
 287: LD_OWVAR 67
 291: ARRAY
 292: ST_TO_ADDR
// PrepareDifficulty ;
 293: CALL 4682 0 0
// PrepareRussianBase ;
 297: CALL 2974 0 0
// PrepareRussianCommander ;
 301: CALL 2925 0 0
// PrepareHeroes ;
 305: CALL 487 0 0
// SetBName ( ambdept0 , gamma ) ;
 309: LD_INT 4
 311: PPUSH
 312: LD_STRING gamma
 314: PPUSH
 315: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 319: LD_INT 21
 321: PPUSH
 322: LD_STRING fyodor
 324: PPUSH
 325: CALL_OW 500
// end ;
 329: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 330: LD_EXP 45
 334: PUSH
 335: LD_INT 1
 337: EQUAL
 338: IFFALSE 443
 340: GO 342
 342: DISABLE
 343: LD_INT 0
 345: PPUSH
// begin enable ;
 346: ENABLE
// fogoff ( true ) ;
 347: LD_INT 1
 349: PPUSH
 350: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 354: LD_ADDR_VAR 0 1
 358: PUSH
 359: LD_INT 22
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: LD_INT 21
 371: PUSH
 372: LD_INT 1
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PPUSH
 383: CALL_OW 69
 387: PUSH
 388: FOR_IN
 389: IFFALSE 405
// SetLives ( i , 1000 ) ;
 391: LD_VAR 0 1
 395: PPUSH
 396: LD_INT 1000
 398: PPUSH
 399: CALL_OW 234
 403: GO 388
 405: POP
 406: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 407: LD_INT 4
 409: PPUSH
 410: CALL_OW 274
 414: PPUSH
 415: LD_INT 1
 417: PPUSH
 418: LD_INT 9999
 420: PPUSH
 421: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 425: LD_INT 4
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 2
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
// end ;
 443: PPOPN 1
 445: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 446: LD_INT 22
 448: PUSH
 449: LD_INT 1
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: PUSH
 456: LD_INT 34
 458: PUSH
 459: LD_INT 44
 461: PUSH
 462: EMPTY
 463: LIST
 464: LIST
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PPUSH
 470: CALL_OW 69
 474: IFFALSE 486
 476: GO 478
 478: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 479: LD_STRING ACH_GUN
 481: PPUSH
 482: CALL_OW 543
 486: END
// export function PrepareHeroes ; var i , tmp ; begin
 487: LD_INT 0
 489: PPUSH
 490: PPUSH
 491: PPUSH
// uc_side = 1 ;
 492: LD_ADDR_OWVAR 20
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// uc_nation = 1 ;
 500: LD_ADDR_OWVAR 21
 504: PUSH
 505: LD_INT 1
 507: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 508: LD_ADDR_EXP 1
 512: PUSH
 513: LD_STRING JMM
 515: PPUSH
 516: LD_INT 1
 518: PPUSH
 519: LD_EXP 49
 523: PPUSH
 524: CALL 39906 0 3
 528: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 529: LD_ADDR_EXP 4
 533: PUSH
 534: LD_STRING Lisa
 536: PPUSH
 537: LD_INT 1
 539: PPUSH
 540: LD_EXP 49
 544: PPUSH
 545: CALL 39906 0 3
 549: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 550: LD_ADDR_EXP 7
 554: PUSH
 555: LD_STRING Brown
 557: PPUSH
 558: LD_INT 0
 560: PPUSH
 561: LD_EXP 49
 565: PPUSH
 566: CALL 39906 0 3
 570: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 571: LD_ADDR_EXP 8
 575: PUSH
 576: LD_STRING Dickens
 578: PPUSH
 579: LD_INT 0
 581: PPUSH
 582: LD_EXP 49
 586: PPUSH
 587: CALL 39906 0 3
 591: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 592: LD_ADDR_EXP 9
 596: PUSH
 597: LD_STRING Woodruff
 599: PPUSH
 600: LD_INT 0
 602: PPUSH
 603: LD_EXP 49
 607: PPUSH
 608: CALL 39906 0 3
 612: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 613: LD_ADDR_EXP 12
 617: PUSH
 618: LD_STRING Campell
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: LD_EXP 49
 628: PPUSH
 629: CALL 39906 0 3
 633: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 634: LD_ADDR_EXP 10
 638: PUSH
 639: LD_STRING Knight
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: LD_EXP 49
 649: PPUSH
 650: CALL 39906 0 3
 654: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 655: LD_ADDR_EXP 11
 659: PUSH
 660: LD_STRING Claptopn
 662: PPUSH
 663: LD_INT 0
 665: PPUSH
 666: LD_EXP 49
 670: PPUSH
 671: CALL 39906 0 3
 675: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 676: LD_ADDR_EXP 14
 680: PUSH
 681: LD_STRING Harisson
 683: PPUSH
 684: LD_INT 0
 686: PPUSH
 687: LD_EXP 49
 691: PPUSH
 692: CALL 39906 0 3
 696: ST_TO_ADDR
// if Lisa = false then
 697: LD_EXP 4
 701: PUSH
 702: LD_INT 0
 704: EQUAL
 705: IFFALSE 728
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 707: LD_ADDR_EXP 2
 711: PUSH
 712: LD_STRING Bobby
 714: PPUSH
 715: LD_INT 1
 717: PPUSH
 718: LD_EXP 49
 722: PPUSH
 723: CALL 39906 0 3
 727: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 728: LD_EXP 4
 732: PUSH
 733: LD_INT 0
 735: EQUAL
 736: PUSH
 737: LD_EXP 2
 741: PUSH
 742: LD_INT 0
 744: EQUAL
 745: AND
 746: IFFALSE 769
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 748: LD_ADDR_EXP 3
 752: PUSH
 753: LD_STRING Cyrus
 755: PPUSH
 756: LD_INT 1
 758: PPUSH
 759: LD_EXP 49
 763: PPUSH
 764: CALL 39906 0 3
 768: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 769: LD_EXP 4
 773: PUSH
 774: LD_INT 0
 776: EQUAL
 777: PUSH
 778: LD_EXP 2
 782: PUSH
 783: LD_INT 0
 785: EQUAL
 786: AND
 787: PUSH
 788: LD_EXP 3
 792: PUSH
 793: LD_INT 0
 795: EQUAL
 796: AND
 797: IFFALSE 896
// begin tmp = CreateCharacterSet ( 03_others ) ;
 799: LD_ADDR_VAR 0 3
 803: PUSH
 804: LD_STRING 03_others
 806: PPUSH
 807: CALL_OW 31
 811: ST_TO_ADDR
// if tmp then
 812: LD_VAR 0 3
 816: IFFALSE 873
// begin RandomBeforeMission = tmp [ 1 ] ;
 818: LD_ADDR_EXP 6
 822: PUSH
 823: LD_VAR 0 3
 827: PUSH
 828: LD_INT 1
 830: ARRAY
 831: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 832: LD_STRING 03_others
 834: PPUSH
 835: CALL_OW 40
// if tmp > 1 then
 839: LD_VAR 0 3
 843: PUSH
 844: LD_INT 1
 846: GREATER
 847: IFFALSE 871
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 849: LD_VAR 0 3
 853: PUSH
 854: LD_VAR 0 3
 858: PUSH
 859: LD_INT 1
 861: ARRAY
 862: DIFF
 863: PPUSH
 864: LD_STRING 03_others
 866: PPUSH
 867: CALL_OW 38
// end else
 871: GO 896
// begin PrepareHuman ( false , 1 , 3 ) ;
 873: LD_INT 0
 875: PPUSH
 876: LD_INT 1
 878: PPUSH
 879: LD_INT 3
 881: PPUSH
 882: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 886: LD_ADDR_EXP 6
 890: PUSH
 891: CALL_OW 44
 895: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 896: LD_ADDR_OWVAR 20
 900: PUSH
 901: LD_INT 4
 903: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 904: LD_ADDR_EXP 13
 908: PUSH
 909: LD_STRING Donaldson
 911: PPUSH
 912: LD_INT 0
 914: PPUSH
 915: LD_EXP 49
 919: PPUSH
 920: CALL 39906 0 3
 924: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 925: LD_ADDR_EXP 5
 929: PUSH
 930: LD_STRING Frank
 932: PPUSH
 933: LD_INT 1
 935: PPUSH
 936: LD_EXP 49
 940: PPUSH
 941: CALL 39906 0 3
 945: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 946: LD_EXP 1
 950: PPUSH
 951: LD_INT 32
 953: PPUSH
 954: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 958: LD_EXP 7
 962: PPUSH
 963: LD_INT 1
 965: PPUSH
 966: LD_INT 0
 968: PPUSH
 969: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 973: LD_EXP 7
 977: PPUSH
 978: LD_INT 32
 980: PPUSH
 981: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 985: LD_EXP 8
 989: PPUSH
 990: LD_INT 2
 992: PPUSH
 993: LD_INT 0
 995: PPUSH
 996: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1000: LD_EXP 9
1004: PPUSH
1005: LD_INT 2
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1015: LD_EXP 12
1019: PPUSH
1020: LD_INT 2
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1030: LD_EXP 10
1034: PPUSH
1035: LD_INT 2
1037: PPUSH
1038: LD_INT 0
1040: PPUSH
1041: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1045: LD_EXP 11
1049: PPUSH
1050: LD_INT 2
1052: PPUSH
1053: LD_INT 0
1055: PPUSH
1056: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1060: LD_EXP 4
1064: PPUSH
1065: LD_INT 2
1067: PPUSH
1068: LD_INT 0
1070: PPUSH
1071: CALL_OW 49
// if Lisa = false then
1075: LD_EXP 4
1079: PUSH
1080: LD_INT 0
1082: EQUAL
1083: IFFALSE 1100
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1085: LD_EXP 2
1089: PPUSH
1090: LD_INT 2
1092: PPUSH
1093: LD_INT 0
1095: PPUSH
1096: CALL_OW 49
// if Lisa = false and Bobby = false then
1100: LD_EXP 4
1104: PUSH
1105: LD_INT 0
1107: EQUAL
1108: PUSH
1109: LD_EXP 2
1113: PUSH
1114: LD_INT 0
1116: EQUAL
1117: AND
1118: IFFALSE 1135
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1120: LD_EXP 3
1124: PPUSH
1125: LD_INT 2
1127: PPUSH
1128: LD_INT 0
1130: PPUSH
1131: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1135: LD_EXP 4
1139: PUSH
1140: LD_INT 0
1142: EQUAL
1143: PUSH
1144: LD_EXP 2
1148: PUSH
1149: LD_INT 0
1151: EQUAL
1152: AND
1153: PUSH
1154: LD_EXP 3
1158: PUSH
1159: LD_INT 0
1161: EQUAL
1162: AND
1163: IFFALSE 1180
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1165: LD_EXP 6
1169: PPUSH
1170: LD_INT 2
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: CALL_OW 49
// end ;
1180: LD_VAR 0 1
1184: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1185: LD_INT 0
1187: PPUSH
1188: PPUSH
1189: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1190: LD_EXP 13
1194: PPUSH
1195: LD_INT 10
1197: PPUSH
1198: LD_INT 0
1200: PPUSH
1201: CALL_OW 49
// if Frank then
1205: LD_EXP 5
1209: IFFALSE 1226
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1211: LD_EXP 5
1215: PPUSH
1216: LD_INT 10
1218: PPUSH
1219: LD_INT 0
1221: PPUSH
1222: CALL_OW 49
// uc_nation = 1 ;
1226: LD_ADDR_OWVAR 21
1230: PUSH
1231: LD_INT 1
1233: ST_TO_ADDR
// uc_side = 4 ;
1234: LD_ADDR_OWVAR 20
1238: PUSH
1239: LD_INT 4
1241: ST_TO_ADDR
// hc_class := 3 ;
1242: LD_ADDR_OWVAR 28
1246: PUSH
1247: LD_INT 3
1249: ST_TO_ADDR
// hc_sex := sex_male ;
1250: LD_ADDR_OWVAR 27
1254: PUSH
1255: LD_INT 1
1257: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1258: LD_ADDR_OWVAR 33
1262: PUSH
1263: LD_STRING SecondCharsGal
1265: ST_TO_ADDR
// hc_face_number := 53 ;
1266: LD_ADDR_OWVAR 34
1270: PUSH
1271: LD_INT 53
1273: ST_TO_ADDR
// hc_name := Freddie Warner ;
1274: LD_ADDR_OWVAR 26
1278: PUSH
1279: LD_STRING Freddie Warner
1281: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1282: LD_ADDR_OWVAR 29
1286: PUSH
1287: LD_INT 8
1289: PUSH
1290: LD_INT 11
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1297: LD_ADDR_OWVAR 30
1301: PUSH
1302: LD_INT 0
1304: PUSH
1305: LD_INT 0
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 0
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1320: LD_ADDR_OWVAR 31
1324: PUSH
1325: LD_INT 1
1327: PUSH
1328: LD_INT 0
1330: PUSH
1331: LD_INT 3
1333: PUSH
1334: LD_INT 2
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: ST_TO_ADDR
// un = CreateHuman ;
1343: LD_ADDR_VAR 0 3
1347: PUSH
1348: CALL_OW 44
1352: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1353: LD_VAR 0 3
1357: PPUSH
1358: LD_INT 10
1360: PPUSH
1361: LD_INT 0
1363: PPUSH
1364: CALL_OW 49
// hc_class := 1 ;
1368: LD_ADDR_OWVAR 28
1372: PUSH
1373: LD_INT 1
1375: ST_TO_ADDR
// hc_sex := sex_male ;
1376: LD_ADDR_OWVAR 27
1380: PUSH
1381: LD_INT 1
1383: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1384: LD_ADDR_OWVAR 33
1388: PUSH
1389: LD_STRING SecondCharsGal
1391: ST_TO_ADDR
// hc_face_number := 56 ;
1392: LD_ADDR_OWVAR 34
1396: PUSH
1397: LD_INT 56
1399: ST_TO_ADDR
// hc_name := Mel Brennan ;
1400: LD_ADDR_OWVAR 26
1404: PUSH
1405: LD_STRING Mel Brennan
1407: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1408: LD_ADDR_OWVAR 29
1412: PUSH
1413: LD_INT 12
1415: PUSH
1416: LD_INT 11
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1423: LD_ADDR_OWVAR 30
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: LD_INT 1
1433: PUSH
1434: LD_INT 0
1436: PUSH
1437: LD_INT 0
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1446: LD_ADDR_OWVAR 31
1450: PUSH
1451: LD_INT 3
1453: PUSH
1454: LD_INT 1
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: LD_INT 0
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: ST_TO_ADDR
// un = CreateHuman ;
1469: LD_ADDR_VAR 0 3
1473: PUSH
1474: CALL_OW 44
1478: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1479: LD_VAR 0 3
1483: PPUSH
1484: LD_INT 10
1486: PPUSH
1487: LD_INT 0
1489: PPUSH
1490: CALL_OW 49
// hc_class := 1 ;
1494: LD_ADDR_OWVAR 28
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// hc_sex := sex_male ;
1502: LD_ADDR_OWVAR 27
1506: PUSH
1507: LD_INT 1
1509: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1510: LD_ADDR_OWVAR 33
1514: PUSH
1515: LD_STRING AmGalRemake
1517: ST_TO_ADDR
// hc_face_number := 5 ;
1518: LD_ADDR_OWVAR 34
1522: PUSH
1523: LD_INT 5
1525: ST_TO_ADDR
// hc_name := Bob Joplin ;
1526: LD_ADDR_OWVAR 26
1530: PUSH
1531: LD_STRING Bob Joplin
1533: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1534: LD_ADDR_OWVAR 29
1538: PUSH
1539: LD_INT 10
1541: PUSH
1542: LD_INT 11
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1549: LD_ADDR_OWVAR 30
1553: PUSH
1554: LD_INT 0
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 1
1562: PUSH
1563: LD_INT 0
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1572: LD_ADDR_OWVAR 31
1576: PUSH
1577: LD_INT 3
1579: PUSH
1580: LD_INT 1
1582: PUSH
1583: LD_INT 1
1585: PUSH
1586: LD_INT 1
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: ST_TO_ADDR
// un = CreateHuman ;
1595: LD_ADDR_VAR 0 3
1599: PUSH
1600: CALL_OW 44
1604: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1605: LD_VAR 0 3
1609: PPUSH
1610: LD_INT 10
1612: PPUSH
1613: LD_INT 0
1615: PPUSH
1616: CALL_OW 49
// hc_class := 3 ;
1620: LD_ADDR_OWVAR 28
1624: PUSH
1625: LD_INT 3
1627: ST_TO_ADDR
// hc_sex := sex_female ;
1628: LD_ADDR_OWVAR 27
1632: PUSH
1633: LD_INT 2
1635: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1636: LD_ADDR_OWVAR 33
1640: PUSH
1641: LD_STRING AmGalRemake
1643: ST_TO_ADDR
// hc_face_number := 8 ;
1644: LD_ADDR_OWVAR 34
1648: PUSH
1649: LD_INT 8
1651: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1652: LD_ADDR_OWVAR 26
1656: PUSH
1657: LD_STRING Elizabeth Whitney
1659: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1660: LD_ADDR_OWVAR 29
1664: PUSH
1665: LD_INT 9
1667: PUSH
1668: LD_INT 11
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1675: LD_ADDR_OWVAR 30
1679: PUSH
1680: LD_INT 0
1682: PUSH
1683: LD_INT 0
1685: PUSH
1686: LD_INT 2
1688: PUSH
1689: LD_INT 0
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1698: LD_ADDR_OWVAR 31
1702: PUSH
1703: LD_INT 2
1705: PUSH
1706: LD_INT 2
1708: PUSH
1709: LD_INT 4
1711: PUSH
1712: LD_INT 2
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: ST_TO_ADDR
// un = CreateHuman ;
1721: LD_ADDR_VAR 0 3
1725: PUSH
1726: CALL_OW 44
1730: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1731: LD_VAR 0 3
1735: PPUSH
1736: LD_INT 10
1738: PPUSH
1739: LD_INT 0
1741: PPUSH
1742: CALL_OW 49
// InitHc ;
1746: CALL_OW 19
// end ;
1750: LD_VAR 0 1
1754: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1755: LD_INT 0
1757: PPUSH
1758: PPUSH
1759: PPUSH
1760: PPUSH
// uc_nation = 1 ;
1761: LD_ADDR_OWVAR 21
1765: PUSH
1766: LD_INT 1
1768: ST_TO_ADDR
// uc_side = 1 ;
1769: LD_ADDR_OWVAR 20
1773: PUSH
1774: LD_INT 1
1776: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1777: LD_ADDR_OWVAR 37
1781: PUSH
1782: LD_INT 2
1784: ST_TO_ADDR
// vc_engine := engine_combustion ;
1785: LD_ADDR_OWVAR 39
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_control := control_manual ;
1793: LD_ADDR_OWVAR 38
1797: PUSH
1798: LD_INT 1
1800: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1801: LD_ADDR_OWVAR 41
1805: PUSH
1806: LD_INT 65
1808: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1809: LD_ADDR_OWVAR 40
1813: PUSH
1814: LD_INT 5
1816: PUSH
1817: LD_INT 3
1819: PUSH
1820: LD_INT 4
1822: PUSH
1823: LD_INT 4
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: PUSH
1832: LD_OWVAR 67
1836: ARRAY
1837: ST_TO_ADDR
// veh := CreateVehicle ;
1838: LD_ADDR_VAR 0 5
1842: PUSH
1843: CALL_OW 45
1847: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1848: LD_VAR 0 5
1852: PPUSH
1853: LD_INT 2
1855: PPUSH
1856: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1860: LD_INT 17
1862: PPUSH
1863: LD_INT 4
1865: PPUSH
1866: CALL_OW 428
1870: PUSH
1871: LD_INT 0
1873: EQUAL
1874: IFFALSE 1896
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1876: LD_VAR 0 5
1880: PPUSH
1881: LD_INT 17
1883: PPUSH
1884: LD_INT 4
1886: PPUSH
1887: LD_INT 0
1889: PPUSH
1890: CALL_OW 48
1894: GO 1914
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1896: LD_VAR 0 5
1900: PPUSH
1901: LD_INT 23
1903: PPUSH
1904: LD_INT 10
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: CALL_OW 48
// hc_class := 1 ;
1914: LD_ADDR_OWVAR 28
1918: PUSH
1919: LD_INT 1
1921: ST_TO_ADDR
// hc_sex := sex_male ;
1922: LD_ADDR_OWVAR 27
1926: PUSH
1927: LD_INT 1
1929: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1930: LD_ADDR_OWVAR 33
1934: PUSH
1935: LD_STRING SecondCharsGal
1937: ST_TO_ADDR
// hc_face_number := 59 ;
1938: LD_ADDR_OWVAR 34
1942: PUSH
1943: LD_INT 59
1945: ST_TO_ADDR
// hc_name := Max Gray ;
1946: LD_ADDR_OWVAR 26
1950: PUSH
1951: LD_STRING Max Gray
1953: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1954: LD_ADDR_OWVAR 29
1958: PUSH
1959: LD_INT 9
1961: PUSH
1962: LD_INT 11
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1969: LD_ADDR_OWVAR 30
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: LD_INT 0
1982: PUSH
1983: LD_INT 0
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1992: LD_ADDR_OWVAR 31
1996: PUSH
1997: LD_INT 4
1999: PUSH
2000: LD_INT 1
2002: PUSH
2003: LD_INT 1
2005: PUSH
2006: LD_INT 0
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: ST_TO_ADDR
// un = CreateHuman ;
2015: LD_ADDR_VAR 0 4
2019: PUSH
2020: CALL_OW 44
2024: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2025: LD_VAR 0 4
2029: PPUSH
2030: LD_INT 11
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL_OW 49
// hc_class := 2 ;
2040: LD_ADDR_OWVAR 28
2044: PUSH
2045: LD_INT 2
2047: ST_TO_ADDR
// hc_sex := sex_male ;
2048: LD_ADDR_OWVAR 27
2052: PUSH
2053: LD_INT 1
2055: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2056: LD_ADDR_OWVAR 33
2060: PUSH
2061: LD_STRING SecondCharsGal
2063: ST_TO_ADDR
// hc_face_number := 50 ;
2064: LD_ADDR_OWVAR 34
2068: PUSH
2069: LD_INT 50
2071: ST_TO_ADDR
// hc_name := Frank Hughes ;
2072: LD_ADDR_OWVAR 26
2076: PUSH
2077: LD_STRING Frank Hughes
2079: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2080: LD_ADDR_OWVAR 29
2084: PUSH
2085: LD_INT 10
2087: PUSH
2088: LD_INT 10
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2095: LD_ADDR_OWVAR 30
2099: PUSH
2100: LD_INT 1
2102: PUSH
2103: LD_INT 2
2105: PUSH
2106: LD_INT 0
2108: PUSH
2109: LD_INT 0
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2118: LD_ADDR_OWVAR 31
2122: PUSH
2123: LD_INT 1
2125: PUSH
2126: LD_INT 3
2128: PUSH
2129: LD_INT 0
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: ST_TO_ADDR
// un = CreateHuman ;
2141: LD_ADDR_VAR 0 4
2145: PUSH
2146: CALL_OW 44
2150: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2151: LD_VAR 0 4
2155: PPUSH
2156: LD_INT 11
2158: PPUSH
2159: LD_INT 0
2161: PPUSH
2162: CALL_OW 49
// hc_class := 1 ;
2166: LD_ADDR_OWVAR 28
2170: PUSH
2171: LD_INT 1
2173: ST_TO_ADDR
// hc_sex := sex_male ;
2174: LD_ADDR_OWVAR 27
2178: PUSH
2179: LD_INT 1
2181: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2182: LD_ADDR_OWVAR 33
2186: PUSH
2187: LD_STRING SecondCharsGal
2189: ST_TO_ADDR
// hc_face_number := 54 ;
2190: LD_ADDR_OWVAR 34
2194: PUSH
2195: LD_INT 54
2197: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2198: LD_ADDR_OWVAR 26
2202: PUSH
2203: LD_STRING Luigi Ghbellin
2205: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2206: LD_ADDR_OWVAR 29
2210: PUSH
2211: LD_INT 11
2213: PUSH
2214: LD_INT 11
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2221: LD_ADDR_OWVAR 30
2225: PUSH
2226: LD_INT 1
2228: PUSH
2229: LD_INT 0
2231: PUSH
2232: LD_INT 0
2234: PUSH
2235: LD_INT 0
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: LIST
2242: LIST
2243: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2244: LD_ADDR_OWVAR 31
2248: PUSH
2249: LD_INT 2
2251: PUSH
2252: LD_INT 1
2254: PUSH
2255: LD_INT 1
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: ST_TO_ADDR
// un = CreateHuman ;
2267: LD_ADDR_VAR 0 4
2271: PUSH
2272: CALL_OW 44
2276: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2277: LD_VAR 0 4
2281: PPUSH
2282: LD_INT 11
2284: PPUSH
2285: LD_INT 0
2287: PPUSH
2288: CALL_OW 49
// hc_class := 3 ;
2292: LD_ADDR_OWVAR 28
2296: PUSH
2297: LD_INT 3
2299: ST_TO_ADDR
// hc_sex := sex_male ;
2300: LD_ADDR_OWVAR 27
2304: PUSH
2305: LD_INT 1
2307: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2308: LD_ADDR_OWVAR 33
2312: PUSH
2313: LD_STRING AmGalRemake
2315: ST_TO_ADDR
// hc_face_number := 6 ;
2316: LD_ADDR_OWVAR 34
2320: PUSH
2321: LD_INT 6
2323: ST_TO_ADDR
// hc_name := Leon Carter ;
2324: LD_ADDR_OWVAR 26
2328: PUSH
2329: LD_STRING Leon Carter
2331: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2332: LD_ADDR_OWVAR 29
2336: PUSH
2337: LD_INT 10
2339: PUSH
2340: LD_INT 9
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2347: LD_ADDR_OWVAR 30
2351: PUSH
2352: LD_INT 0
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: LD_INT 2
2360: PUSH
2361: LD_INT 1
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2370: LD_ADDR_OWVAR 31
2374: PUSH
2375: LD_INT 0
2377: PUSH
2378: LD_INT 2
2380: PUSH
2381: LD_INT 3
2383: PUSH
2384: LD_INT 1
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: ST_TO_ADDR
// un = CreateHuman ;
2393: LD_ADDR_VAR 0 4
2397: PUSH
2398: CALL_OW 44
2402: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2403: LD_VAR 0 4
2407: PPUSH
2408: LD_VAR 0 5
2412: PPUSH
2413: CALL_OW 52
// if count = 4 then
2417: LD_VAR 0 1
2421: PUSH
2422: LD_INT 4
2424: EQUAL
2425: IFFALSE 2553
// begin hc_class := 1 ;
2427: LD_ADDR_OWVAR 28
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// hc_sex := sex_male ;
2435: LD_ADDR_OWVAR 27
2439: PUSH
2440: LD_INT 1
2442: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2443: LD_ADDR_OWVAR 33
2447: PUSH
2448: LD_STRING SecondCharsGal
2450: ST_TO_ADDR
// hc_face_number := 34 ;
2451: LD_ADDR_OWVAR 34
2455: PUSH
2456: LD_INT 34
2458: ST_TO_ADDR
// hc_name := Ian Hill ;
2459: LD_ADDR_OWVAR 26
2463: PUSH
2464: LD_STRING Ian Hill
2466: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2467: LD_ADDR_OWVAR 29
2471: PUSH
2472: LD_INT 10
2474: PUSH
2475: LD_INT 12
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2482: LD_ADDR_OWVAR 30
2486: PUSH
2487: LD_INT 1
2489: PUSH
2490: LD_INT 0
2492: PUSH
2493: LD_INT 0
2495: PUSH
2496: LD_INT 0
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2505: LD_ADDR_OWVAR 31
2509: PUSH
2510: LD_INT 3
2512: PUSH
2513: LD_INT 1
2515: PUSH
2516: LD_INT 1
2518: PUSH
2519: LD_INT 0
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: ST_TO_ADDR
// un = CreateHuman ;
2528: LD_ADDR_VAR 0 4
2532: PUSH
2533: CALL_OW 44
2537: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2538: LD_VAR 0 4
2542: PPUSH
2543: LD_INT 11
2545: PPUSH
2546: LD_INT 0
2548: PPUSH
2549: CALL_OW 49
// end ; if count = 5 then
2553: LD_VAR 0 1
2557: PUSH
2558: LD_INT 5
2560: EQUAL
2561: IFFALSE 2815
// begin hc_class := 1 ;
2563: LD_ADDR_OWVAR 28
2567: PUSH
2568: LD_INT 1
2570: ST_TO_ADDR
// hc_sex := sex_male ;
2571: LD_ADDR_OWVAR 27
2575: PUSH
2576: LD_INT 1
2578: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2579: LD_ADDR_OWVAR 33
2583: PUSH
2584: LD_STRING SecondCharsGal
2586: ST_TO_ADDR
// hc_face_number := 34 ;
2587: LD_ADDR_OWVAR 34
2591: PUSH
2592: LD_INT 34
2594: ST_TO_ADDR
// hc_name := Ian Hill ;
2595: LD_ADDR_OWVAR 26
2599: PUSH
2600: LD_STRING Ian Hill
2602: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2603: LD_ADDR_OWVAR 29
2607: PUSH
2608: LD_INT 10
2610: PUSH
2611: LD_INT 12
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2618: LD_ADDR_OWVAR 30
2622: PUSH
2623: LD_INT 1
2625: PUSH
2626: LD_INT 0
2628: PUSH
2629: LD_INT 0
2631: PUSH
2632: LD_INT 0
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: LIST
2639: LIST
2640: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2641: LD_ADDR_OWVAR 31
2645: PUSH
2646: LD_INT 3
2648: PUSH
2649: LD_INT 1
2651: PUSH
2652: LD_INT 1
2654: PUSH
2655: LD_INT 0
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: ST_TO_ADDR
// un = CreateHuman ;
2664: LD_ADDR_VAR 0 4
2668: PUSH
2669: CALL_OW 44
2673: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2674: LD_VAR 0 4
2678: PPUSH
2679: LD_INT 11
2681: PPUSH
2682: LD_INT 0
2684: PPUSH
2685: CALL_OW 49
// hc_class := 1 ;
2689: LD_ADDR_OWVAR 28
2693: PUSH
2694: LD_INT 1
2696: ST_TO_ADDR
// hc_sex := sex_female ;
2697: LD_ADDR_OWVAR 27
2701: PUSH
2702: LD_INT 2
2704: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2705: LD_ADDR_OWVAR 33
2709: PUSH
2710: LD_STRING SecondCharsGal
2712: ST_TO_ADDR
// hc_face_number := 41 ;
2713: LD_ADDR_OWVAR 34
2717: PUSH
2718: LD_INT 41
2720: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2721: LD_ADDR_OWVAR 26
2725: PUSH
2726: LD_STRING Kate Wadsworth
2728: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2729: LD_ADDR_OWVAR 29
2733: PUSH
2734: LD_INT 9
2736: PUSH
2737: LD_INT 9
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2744: LD_ADDR_OWVAR 30
2748: PUSH
2749: LD_INT 0
2751: PUSH
2752: LD_INT 2
2754: PUSH
2755: LD_INT 0
2757: PUSH
2758: LD_INT 0
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2767: LD_ADDR_OWVAR 31
2771: PUSH
2772: LD_INT 2
2774: PUSH
2775: LD_INT 3
2777: PUSH
2778: LD_INT 1
2780: PUSH
2781: LD_INT 0
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: ST_TO_ADDR
// un = CreateHuman ;
2790: LD_ADDR_VAR 0 4
2794: PUSH
2795: CALL_OW 44
2799: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2800: LD_VAR 0 4
2804: PPUSH
2805: LD_INT 11
2807: PPUSH
2808: LD_INT 0
2810: PPUSH
2811: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2815: LD_INT 11
2817: PPUSH
2818: LD_INT 22
2820: PUSH
2821: LD_INT 1
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: LD_INT 21
2830: PUSH
2831: LD_INT 1
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PUSH
2838: LD_INT 26
2840: PUSH
2841: LD_INT 1
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: LIST
2852: PPUSH
2853: CALL_OW 70
2857: PUSH
2858: LD_INT 1
2860: ARRAY
2861: PPUSH
2862: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2866: LD_INT 11
2868: PPUSH
2869: LD_INT 22
2871: PUSH
2872: LD_INT 1
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PUSH
2879: LD_INT 21
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PUSH
2889: LD_INT 26
2891: PUSH
2892: LD_INT 1
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: LIST
2903: PPUSH
2904: CALL_OW 70
2908: PUSH
2909: LD_INT 1
2911: ARRAY
2912: PPUSH
2913: LD_STRING D6-Sol3-1
2915: PPUSH
2916: CALL_OW 88
// end ; end_of_file
2920: LD_VAR 0 2
2924: RET
// export function PrepareRussianCommander ; begin
2925: LD_INT 0
2927: PPUSH
// uc_side = 3 ;
2928: LD_ADDR_OWVAR 20
2932: PUSH
2933: LD_INT 3
2935: ST_TO_ADDR
// uc_nation = 3 ;
2936: LD_ADDR_OWVAR 21
2940: PUSH
2941: LD_INT 3
2943: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2944: LD_ADDR_EXP 15
2948: PUSH
2949: LD_STRING Stolypin
2951: PPUSH
2952: CALL_OW 25
2956: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2957: LD_EXP 15
2961: PPUSH
2962: LD_INT 21
2964: PPUSH
2965: CALL_OW 52
// end ;
2969: LD_VAR 0 1
2973: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2974: LD_INT 0
2976: PPUSH
2977: PPUSH
2978: PPUSH
2979: PPUSH
// if Difficulty > 1 then
2980: LD_OWVAR 67
2984: PUSH
2985: LD_INT 1
2987: GREATER
2988: IFFALSE 3098
// begin uc_side := 3 ;
2990: LD_ADDR_OWVAR 20
2994: PUSH
2995: LD_INT 3
2997: ST_TO_ADDR
// uc_nation := 3 ;
2998: LD_ADDR_OWVAR 21
3002: PUSH
3003: LD_INT 3
3005: ST_TO_ADDR
// InitHc ;
3006: CALL_OW 19
// InitBc ;
3010: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3014: LD_INT 0
3016: PPUSH
3017: LD_INT 1
3019: PPUSH
3020: LD_INT 4
3022: PPUSH
3023: CALL_OW 380
// bc_type := b_breastwork ;
3027: LD_ADDR_OWVAR 42
3031: PUSH
3032: LD_INT 31
3034: ST_TO_ADDR
// bc_level := 4 ;
3035: LD_ADDR_OWVAR 43
3039: PUSH
3040: LD_INT 4
3042: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3043: LD_ADDR_VAR 0 3
3047: PUSH
3048: LD_INT 100
3050: PPUSH
3051: LD_INT 58
3053: PPUSH
3054: LD_INT 2
3056: PPUSH
3057: CALL_OW 47
3061: ST_TO_ADDR
// un := CreateHuman ;
3062: LD_ADDR_VAR 0 4
3066: PUSH
3067: CALL_OW 44
3071: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3072: LD_VAR 0 4
3076: PPUSH
3077: LD_INT 5
3079: PPUSH
3080: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3084: LD_VAR 0 4
3088: PPUSH
3089: LD_VAR 0 3
3093: PPUSH
3094: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3098: LD_INT 3
3100: PPUSH
3101: LD_INT 3
3103: PPUSH
3104: LD_INT 22
3106: PPUSH
3107: LD_EXP 16
3111: PPUSH
3112: LD_EXP 17
3116: PPUSH
3117: CALL_OW 12
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 3
3127: PUSH
3128: LD_INT 4
3130: PUSH
3131: LD_INT 5
3133: PUSH
3134: LD_INT 6
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: LD_OWVAR 67
3147: ARRAY
3148: PPUSH
3149: CALL 4347 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3153: LD_INT 3
3155: PPUSH
3156: LD_INT 3
3158: PPUSH
3159: LD_INT 21
3161: PPUSH
3162: LD_EXP 16
3166: PPUSH
3167: LD_EXP 17
3171: PPUSH
3172: CALL_OW 12
3176: PPUSH
3177: LD_INT 2
3179: PPUSH
3180: LD_INT 3
3182: PPUSH
3183: CALL 4347 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3187: LD_INT 3
3189: PPUSH
3190: LD_INT 3
3192: PPUSH
3193: LD_INT 1
3195: PPUSH
3196: LD_EXP 16
3200: PPUSH
3201: LD_EXP 17
3205: PPUSH
3206: CALL_OW 12
3210: PPUSH
3211: LD_INT 4
3213: PPUSH
3214: LD_INT 3
3216: PPUSH
3217: CALL 4347 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3221: LD_INT 3
3223: PPUSH
3224: LD_INT 3
3226: PPUSH
3227: LD_INT 24
3229: PPUSH
3230: LD_EXP 16
3234: PPUSH
3235: LD_EXP 17
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: LD_INT 3
3247: PPUSH
3248: LD_INT 5
3250: PPUSH
3251: CALL 4347 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: LD_INT 22
3262: PUSH
3263: LD_INT 3
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: LD_INT 30
3272: PUSH
3273: LD_INT 32
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: EMPTY
3281: LIST
3282: LIST
3283: PPUSH
3284: CALL_OW 69
3288: PUSH
3289: FOR_IN
3290: IFFALSE 3330
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3292: LD_INT 3
3294: PPUSH
3295: LD_INT 3
3297: PPUSH
3298: LD_VAR 0 2
3302: PPUSH
3303: LD_EXP 16
3307: PPUSH
3308: LD_EXP 17
3312: PPUSH
3313: CALL_OW 12
3317: PPUSH
3318: LD_INT 1
3320: PPUSH
3321: LD_INT 1
3323: PPUSH
3324: CALL 4347 0 6
3328: GO 3289
3330: POP
3331: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3332: LD_ADDR_VAR 0 2
3336: PUSH
3337: LD_INT 22
3339: PUSH
3340: LD_INT 3
3342: PUSH
3343: EMPTY
3344: LIST
3345: LIST
3346: PUSH
3347: LD_INT 30
3349: PUSH
3350: LD_INT 31
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PPUSH
3361: CALL_OW 69
3365: PUSH
3366: FOR_IN
3367: IFFALSE 3395
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3369: LD_EXP 16
3373: PPUSH
3374: LD_EXP 17
3378: PPUSH
3379: CALL_OW 12
3383: PPUSH
3384: LD_VAR 0 2
3388: PPUSH
3389: CALL 4457 0 2
3393: GO 3366
3395: POP
3396: POP
// end ;
3397: LD_VAR 0 1
3401: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3402: LD_INT 0
3404: PPUSH
3405: PPUSH
3406: PPUSH
3407: PPUSH
// uc_side = 6 ;
3408: LD_ADDR_OWVAR 20
3412: PUSH
3413: LD_INT 6
3415: ST_TO_ADDR
// uc_nation = 3 ;
3416: LD_ADDR_OWVAR 21
3420: PUSH
3421: LD_INT 3
3423: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3424: LD_ADDR_VAR 0 2
3428: PUSH
3429: DOUBLE
3430: LD_INT 1
3432: DEC
3433: ST_TO_ADDR
3434: LD_INT 1
3436: PUSH
3437: LD_INT 2
3439: PUSH
3440: LD_INT 2
3442: PUSH
3443: LD_INT 3
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: PUSH
3452: LD_OWVAR 67
3456: ARRAY
3457: PUSH
3458: FOR_TO
3459: IFFALSE 3619
// begin vc_engine = 1 ;
3461: LD_ADDR_OWVAR 39
3465: PUSH
3466: LD_INT 1
3468: ST_TO_ADDR
// vc_control = 1 ;
3469: LD_ADDR_OWVAR 38
3473: PUSH
3474: LD_INT 1
3476: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
3477: LD_ADDR_OWVAR 40
3481: PUSH
3482: LD_INT 42
3484: PUSH
3485: LD_INT 42
3487: PUSH
3488: LD_INT 43
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: PUSH
3496: LD_OWVAR 67
3500: ARRAY
3501: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
3502: LD_ADDR_OWVAR 37
3506: PUSH
3507: LD_INT 21
3509: PUSH
3510: LD_INT 22
3512: PUSH
3513: LD_INT 22
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: LIST
3520: PUSH
3521: LD_OWVAR 67
3525: ARRAY
3526: ST_TO_ADDR
// veh = CreateVehicle ;
3527: LD_ADDR_VAR 0 3
3531: PUSH
3532: CALL_OW 45
3536: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3537: LD_VAR 0 3
3541: PPUSH
3542: LD_INT 3
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 49
// hc_gallery =  ;
3552: LD_ADDR_OWVAR 33
3556: PUSH
3557: LD_STRING 
3559: ST_TO_ADDR
// hc_name =  ;
3560: LD_ADDR_OWVAR 26
3564: PUSH
3565: LD_STRING 
3567: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3568: LD_INT 0
3570: PPUSH
3571: LD_INT 3
3573: PPUSH
3574: LD_EXP 16
3578: PPUSH
3579: LD_EXP 17
3583: PPUSH
3584: CALL_OW 12
3588: PPUSH
3589: CALL_OW 380
// un = CreateHuman ;
3593: LD_ADDR_VAR 0 4
3597: PUSH
3598: CALL_OW 44
3602: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3603: LD_VAR 0 4
3607: PPUSH
3608: LD_VAR 0 3
3612: PPUSH
3613: CALL_OW 52
// end ;
3617: GO 3458
3619: POP
3620: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3621: LD_INT 0
3623: PPUSH
3624: LD_INT 2
3626: PPUSH
3627: LD_EXP 16
3631: PPUSH
3632: LD_EXP 17
3636: PPUSH
3637: CALL_OW 12
3641: PUSH
3642: LD_INT 2
3644: PLUS
3645: PPUSH
3646: CALL_OW 380
// un = CreateHuman ;
3650: LD_ADDR_VAR 0 4
3654: PUSH
3655: CALL_OW 44
3659: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3660: LD_VAR 0 4
3664: PPUSH
3665: LD_INT 3
3667: PPUSH
3668: LD_INT 0
3670: PPUSH
3671: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3675: LD_INT 0
3677: PPUSH
3678: LD_INT 4
3680: PPUSH
3681: LD_EXP 16
3685: PPUSH
3686: LD_EXP 17
3690: PPUSH
3691: CALL_OW 12
3695: PUSH
3696: LD_INT 2
3698: PLUS
3699: PPUSH
3700: CALL_OW 380
// un = CreateHuman ;
3704: LD_ADDR_VAR 0 4
3708: PUSH
3709: CALL_OW 44
3713: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3714: LD_VAR 0 4
3718: PPUSH
3719: LD_INT 3
3721: PPUSH
3722: LD_INT 0
3724: PPUSH
3725: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3729: LD_ADDR_VAR 0 2
3733: PUSH
3734: DOUBLE
3735: LD_INT 1
3737: DEC
3738: ST_TO_ADDR
3739: LD_INT 2
3741: PUSH
3742: LD_INT 3
3744: PUSH
3745: LD_INT 3
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: LIST
3752: PUSH
3753: LD_OWVAR 67
3757: ARRAY
3758: PUSH
3759: LD_INT 1
3761: PPUSH
3762: LD_INT 3
3764: PPUSH
3765: CALL_OW 12
3769: PLUS
3770: PUSH
3771: FOR_TO
3772: IFFALSE 3842
// begin hc_gallery =  ;
3774: LD_ADDR_OWVAR 33
3778: PUSH
3779: LD_STRING 
3781: ST_TO_ADDR
// hc_name =  ;
3782: LD_ADDR_OWVAR 26
3786: PUSH
3787: LD_STRING 
3789: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3790: LD_INT 0
3792: PPUSH
3793: LD_INT 1
3795: PPUSH
3796: LD_EXP 16
3800: PPUSH
3801: LD_EXP 17
3805: PPUSH
3806: CALL_OW 12
3810: PPUSH
3811: CALL_OW 380
// un = CreateHuman ;
3815: LD_ADDR_VAR 0 4
3819: PUSH
3820: CALL_OW 44
3824: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3825: LD_VAR 0 4
3829: PPUSH
3830: LD_INT 3
3832: PPUSH
3833: LD_INT 0
3835: PPUSH
3836: CALL_OW 49
// end ;
3840: GO 3771
3842: POP
3843: POP
// vc_engine = 1 ;
3844: LD_ADDR_OWVAR 39
3848: PUSH
3849: LD_INT 1
3851: ST_TO_ADDR
// vc_control = 1 ;
3852: LD_ADDR_OWVAR 38
3856: PUSH
3857: LD_INT 1
3859: ST_TO_ADDR
// vc_weapon = 51 ;
3860: LD_ADDR_OWVAR 40
3864: PUSH
3865: LD_INT 51
3867: ST_TO_ADDR
// vc_chassis = 22 ;
3868: LD_ADDR_OWVAR 37
3872: PUSH
3873: LD_INT 22
3875: ST_TO_ADDR
// veh = CreateVehicle ;
3876: LD_ADDR_VAR 0 3
3880: PUSH
3881: CALL_OW 45
3885: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3886: LD_VAR 0 3
3890: PPUSH
3891: LD_INT 3
3893: PPUSH
3894: LD_INT 0
3896: PPUSH
3897: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3901: LD_VAR 0 3
3905: PPUSH
3906: LD_INT 1
3908: PPUSH
3909: LD_INT 100
3911: PPUSH
3912: CALL_OW 290
// hc_gallery =  ;
3916: LD_ADDR_OWVAR 33
3920: PUSH
3921: LD_STRING 
3923: ST_TO_ADDR
// hc_name =  ;
3924: LD_ADDR_OWVAR 26
3928: PUSH
3929: LD_STRING 
3931: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3932: LD_INT 0
3934: PPUSH
3935: LD_INT 3
3937: PPUSH
3938: LD_EXP 16
3942: PPUSH
3943: LD_EXP 17
3947: PPUSH
3948: CALL_OW 12
3952: PPUSH
3953: CALL_OW 380
// un = CreateHuman ;
3957: LD_ADDR_VAR 0 4
3961: PUSH
3962: CALL_OW 44
3966: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3967: LD_VAR 0 4
3971: PPUSH
3972: LD_VAR 0 3
3976: PPUSH
3977: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3981: LD_ADDR_VAR 0 2
3985: PUSH
3986: LD_INT 22
3988: PUSH
3989: LD_INT 6
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PUSH
3996: LD_INT 1
3998: PUSH
3999: LD_INT 3
4001: PUSH
4002: LD_INT 25
4004: PUSH
4005: LD_INT 2
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PUSH
4016: LD_INT 3
4018: PUSH
4019: LD_INT 25
4021: PUSH
4022: LD_INT 4
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: LIST
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PPUSH
4042: CALL_OW 69
4046: PUSH
4047: FOR_IN
4048: IFFALSE 4067
// ComAgressiveMove ( i , 45 , 46 ) ;
4050: LD_VAR 0 2
4054: PPUSH
4055: LD_INT 45
4057: PPUSH
4058: LD_INT 46
4060: PPUSH
4061: CALL_OW 114
4065: GO 4047
4067: POP
4068: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4069: LD_ADDR_VAR 0 2
4073: PUSH
4074: LD_INT 22
4076: PUSH
4077: LD_INT 6
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: PUSH
4084: LD_INT 25
4086: PUSH
4087: LD_INT 2
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PPUSH
4098: CALL_OW 69
4102: PUSH
4103: FOR_IN
4104: IFFALSE 4135
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4106: LD_ADDR_EXP 21
4110: PUSH
4111: LD_VAR 0 2
4115: PPUSH
4116: LD_INT 0
4118: PPUSH
4119: LD_INT 48
4121: PPUSH
4122: LD_INT 55
4124: PPUSH
4125: LD_INT 5
4127: PPUSH
4128: CALL_OW 145
4132: ST_TO_ADDR
4133: GO 4103
4135: POP
4136: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: LD_INT 22
4144: PUSH
4145: LD_INT 6
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 25
4154: PUSH
4155: LD_INT 4
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: PPUSH
4166: CALL_OW 69
4170: PUSH
4171: FOR_IN
4172: IFFALSE 4191
// ComMoveXY ( i , 39 , 55 ) ;
4174: LD_VAR 0 2
4178: PPUSH
4179: LD_INT 39
4181: PPUSH
4182: LD_INT 55
4184: PPUSH
4185: CALL_OW 111
4189: GO 4171
4191: POP
4192: POP
// end ;
4193: LD_VAR 0 1
4197: RET
// export function PrepareFirstAttack ; var i , un ; begin
4198: LD_INT 0
4200: PPUSH
4201: PPUSH
4202: PPUSH
// uc_side = 5 ;
4203: LD_ADDR_OWVAR 20
4207: PUSH
4208: LD_INT 5
4210: ST_TO_ADDR
// uc_nation = 3 ;
4211: LD_ADDR_OWVAR 21
4215: PUSH
4216: LD_INT 3
4218: ST_TO_ADDR
// for i := 1 to 4 do
4219: LD_ADDR_VAR 0 2
4223: PUSH
4224: DOUBLE
4225: LD_INT 1
4227: DEC
4228: ST_TO_ADDR
4229: LD_INT 4
4231: PUSH
4232: FOR_TO
4233: IFFALSE 4332
// begin hc_gallery =  ;
4235: LD_ADDR_OWVAR 33
4239: PUSH
4240: LD_STRING 
4242: ST_TO_ADDR
// hc_name =  ;
4243: LD_ADDR_OWVAR 26
4247: PUSH
4248: LD_STRING 
4250: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4251: LD_INT 0
4253: PPUSH
4254: LD_INT 1
4256: PPUSH
4257: LD_EXP 16
4261: PPUSH
4262: LD_EXP 17
4266: PPUSH
4267: CALL_OW 12
4271: PPUSH
4272: CALL_OW 380
// un = CreateHuman ;
4276: LD_ADDR_VAR 0 3
4280: PUSH
4281: CALL_OW 44
4285: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4286: LD_VAR 0 3
4290: PPUSH
4291: LD_INT 4
4293: PPUSH
4294: LD_INT 0
4296: PPUSH
4297: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4301: LD_VAR 0 3
4305: PPUSH
4306: LD_EXP 1
4310: PPUSH
4311: CALL_OW 250
4315: PPUSH
4316: LD_EXP 1
4320: PPUSH
4321: CALL_OW 251
4325: PPUSH
4326: CALL_OW 114
// end ;
4330: GO 4232
4332: POP
4333: POP
// firstRussianAttack = 1 ;
4334: LD_ADDR_EXP 23
4338: PUSH
4339: LD_INT 1
4341: ST_TO_ADDR
// end ; end_of_file
4342: LD_VAR 0 1
4346: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4347: LD_INT 0
4349: PPUSH
4350: PPUSH
4351: PPUSH
4352: PPUSH
// for i = 1 to count do
4353: LD_ADDR_VAR 0 8
4357: PUSH
4358: DOUBLE
4359: LD_INT 1
4361: DEC
4362: ST_TO_ADDR
4363: LD_VAR 0 6
4367: PUSH
4368: FOR_TO
4369: IFFALSE 4450
// begin uc_side = side ;
4371: LD_ADDR_OWVAR 20
4375: PUSH
4376: LD_VAR 0 1
4380: ST_TO_ADDR
// uc_nation = nation ;
4381: LD_ADDR_OWVAR 21
4385: PUSH
4386: LD_VAR 0 2
4390: ST_TO_ADDR
// hc_gallery =  ;
4391: LD_ADDR_OWVAR 33
4395: PUSH
4396: LD_STRING 
4398: ST_TO_ADDR
// hc_name =  ;
4399: LD_ADDR_OWVAR 26
4403: PUSH
4404: LD_STRING 
4406: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4407: LD_INT 0
4409: PPUSH
4410: LD_VAR 0 5
4414: PPUSH
4415: LD_VAR 0 4
4419: PPUSH
4420: CALL_OW 380
// un = CreateHuman ;
4424: LD_ADDR_VAR 0 10
4428: PUSH
4429: CALL_OW 44
4433: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4434: LD_VAR 0 10
4438: PPUSH
4439: LD_VAR 0 3
4443: PPUSH
4444: CALL_OW 52
// end ;
4448: GO 4368
4450: POP
4451: POP
// end ;
4452: LD_VAR 0 7
4456: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4457: LD_INT 0
4459: PPUSH
4460: PPUSH
4461: PPUSH
// uc_side := GetSide ( b ) ;
4462: LD_ADDR_OWVAR 20
4466: PUSH
4467: LD_VAR 0 2
4471: PPUSH
4472: CALL_OW 255
4476: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4477: LD_ADDR_OWVAR 21
4481: PUSH
4482: LD_VAR 0 2
4486: PPUSH
4487: CALL_OW 248
4491: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4492: LD_INT 0
4494: PPUSH
4495: LD_INT 1
4497: PPUSH
4498: LD_VAR 0 1
4502: PPUSH
4503: CALL_OW 380
// un = CreateHuman ;
4507: LD_ADDR_VAR 0 4
4511: PUSH
4512: CALL_OW 44
4516: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4517: LD_ADDR_VAR 0 5
4521: PUSH
4522: LD_VAR 0 2
4526: PPUSH
4527: CALL_OW 254
4531: PUSH
4532: LD_INT 3
4534: MINUS
4535: ST_TO_ADDR
// if dir < 0 then
4536: LD_VAR 0 5
4540: PUSH
4541: LD_INT 0
4543: LESS
4544: IFFALSE 4560
// dir := 6 + dir ;
4546: LD_ADDR_VAR 0 5
4550: PUSH
4551: LD_INT 6
4553: PUSH
4554: LD_VAR 0 5
4558: PLUS
4559: ST_TO_ADDR
// SetDir ( un , dir ) ;
4560: LD_VAR 0 4
4564: PPUSH
4565: LD_VAR 0 5
4569: PPUSH
4570: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4574: LD_VAR 0 4
4578: PPUSH
4579: LD_VAR 0 2
4583: PPUSH
4584: CALL_OW 52
// end ;
4588: LD_VAR 0 3
4592: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4593: LD_INT 0
4595: PPUSH
4596: PPUSH
4597: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4598: LD_ADDR_VAR 0 6
4602: PUSH
4603: LD_VAR 0 1
4607: PUSH
4608: LD_INT 1
4610: PPUSH
4611: LD_VAR 0 1
4615: PPUSH
4616: CALL_OW 12
4620: ARRAY
4621: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4622: LD_VAR 0 6
4626: PPUSH
4627: CALL_OW 258
4631: PUSH
4632: LD_INT 1
4634: EQUAL
4635: IFFALSE 4653
// Say ( speaker , dialogMID ) else
4637: LD_VAR 0 6
4641: PPUSH
4642: LD_VAR 0 2
4646: PPUSH
4647: CALL_OW 88
4651: GO 4667
// Say ( speaker , dialogFID ) ;
4653: LD_VAR 0 6
4657: PPUSH
4658: LD_VAR 0 3
4662: PPUSH
4663: CALL_OW 88
// result := speaker ;
4667: LD_ADDR_VAR 0 4
4671: PUSH
4672: LD_VAR 0 6
4676: ST_TO_ADDR
// end ;
4677: LD_VAR 0 4
4681: RET
// export function PrepareDifficulty ; var tmp ; begin
4682: LD_INT 0
4684: PPUSH
4685: PPUSH
// if Difficulty = 1 then
4686: LD_OWVAR 67
4690: PUSH
4691: LD_INT 1
4693: EQUAL
4694: IFFALSE 4712
// begin RuSoldMinLevel = 1 ;
4696: LD_ADDR_EXP 16
4700: PUSH
4701: LD_INT 1
4703: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4704: LD_ADDR_EXP 17
4708: PUSH
4709: LD_INT 2
4711: ST_TO_ADDR
// end ; if Difficulty = 2 then
4712: LD_OWVAR 67
4716: PUSH
4717: LD_INT 2
4719: EQUAL
4720: IFFALSE 4821
// begin RuSoldMinLevel = 2 ;
4722: LD_ADDR_EXP 16
4726: PUSH
4727: LD_INT 2
4729: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4730: LD_ADDR_EXP 17
4734: PUSH
4735: LD_INT 3
4737: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4738: LD_INT 23
4740: PPUSH
4741: CALL_OW 64
// uc_nation = 3 ;
4745: LD_ADDR_OWVAR 21
4749: PUSH
4750: LD_INT 3
4752: ST_TO_ADDR
// uc_side = 3 ;
4753: LD_ADDR_OWVAR 20
4757: PUSH
4758: LD_INT 3
4760: ST_TO_ADDR
// bc_level = 5 ;
4761: LD_ADDR_OWVAR 43
4765: PUSH
4766: LD_INT 5
4768: ST_TO_ADDR
// bc_type = 32 ;
4769: LD_ADDR_OWVAR 42
4773: PUSH
4774: LD_INT 32
4776: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4777: LD_ADDR_VAR 0 2
4781: PUSH
4782: LD_INT 76
4784: PPUSH
4785: LD_INT 91
4787: PPUSH
4788: LD_INT 2
4790: PPUSH
4791: CALL_OW 47
4795: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4796: LD_VAR 0 2
4800: PPUSH
4801: LD_INT 43
4803: PPUSH
4804: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4808: LD_INT 51
4810: PPUSH
4811: LD_INT 3
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: CALL_OW 322
// end ; if Difficulty = 3 then
4821: LD_OWVAR 67
4825: PUSH
4826: LD_INT 3
4828: EQUAL
4829: IFFALSE 4991
// begin RuSoldMinLevel = 2 ;
4831: LD_ADDR_EXP 16
4835: PUSH
4836: LD_INT 2
4838: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4839: LD_ADDR_EXP 17
4843: PUSH
4844: LD_INT 4
4846: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4847: LD_INT 26
4849: PPUSH
4850: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4854: LD_INT 23
4856: PPUSH
4857: CALL_OW 64
// uc_nation = 3 ;
4861: LD_ADDR_OWVAR 21
4865: PUSH
4866: LD_INT 3
4868: ST_TO_ADDR
// uc_side = 3 ;
4869: LD_ADDR_OWVAR 20
4873: PUSH
4874: LD_INT 3
4876: ST_TO_ADDR
// bc_level = 5 ;
4877: LD_ADDR_OWVAR 43
4881: PUSH
4882: LD_INT 5
4884: ST_TO_ADDR
// bc_type = 32 ;
4885: LD_ADDR_OWVAR 42
4889: PUSH
4890: LD_INT 32
4892: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4893: LD_ADDR_VAR 0 2
4897: PUSH
4898: LD_INT 76
4900: PPUSH
4901: LD_INT 91
4903: PPUSH
4904: LD_INT 2
4906: PPUSH
4907: CALL_OW 47
4911: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4912: LD_VAR 0 2
4916: PPUSH
4917: LD_INT 44
4919: PPUSH
4920: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4924: LD_ADDR_VAR 0 2
4928: PUSH
4929: LD_INT 83
4931: PPUSH
4932: LD_INT 84
4934: PPUSH
4935: LD_INT 2
4937: PPUSH
4938: CALL_OW 47
4942: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4943: LD_VAR 0 2
4947: PPUSH
4948: LD_INT 43
4950: PPUSH
4951: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4955: LD_INT 51
4957: PPUSH
4958: LD_INT 3
4960: PPUSH
4961: LD_INT 1
4963: PPUSH
4964: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4968: LD_INT 52
4970: PPUSH
4971: LD_INT 3
4973: PPUSH
4974: LD_INT 1
4976: PPUSH
4977: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4981: LD_INT 25
4983: PPUSH
4984: LD_INT 44
4986: PPUSH
4987: CALL_OW 431
// end ; end ;
4991: LD_VAR 0 1
4995: RET
// export function EnergyDialog ; begin
4996: LD_INT 0
4998: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4999: LD_INT 46
5001: PPUSH
5002: LD_INT 1
5004: PPUSH
5005: CALL_OW 321
5009: PUSH
5010: LD_INT 1
5012: EQUAL
5013: PUSH
5014: LD_INT 35
5016: PPUSH
5017: LD_INT 1
5019: PPUSH
5020: CALL_OW 321
5024: PUSH
5025: LD_INT 1
5027: EQUAL
5028: AND
5029: IFFALSE 5053
// begin Say ( JMM , D9c-JMM-1 ) ;
5031: LD_EXP 1
5035: PPUSH
5036: LD_STRING D9c-JMM-1
5038: PPUSH
5039: CALL_OW 88
// energyVDialog = 1 ;
5043: LD_ADDR_EXP 33
5047: PUSH
5048: LD_INT 1
5050: ST_TO_ADDR
// end else
5051: GO 5207
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5053: LD_INT 35
5055: PPUSH
5056: LD_INT 1
5058: PPUSH
5059: CALL_OW 321
5063: PUSH
5064: LD_INT 2
5066: EQUAL
5067: PUSH
5068: LD_EXP 33
5072: PUSH
5073: LD_INT 0
5075: EQUAL
5076: AND
5077: IFFALSE 5099
// begin Say ( JMM , D9c-JMM-1a ) ;
5079: LD_EXP 1
5083: PPUSH
5084: LD_STRING D9c-JMM-1a
5086: PPUSH
5087: CALL_OW 88
// energyVDialog = 1 ;
5091: LD_ADDR_EXP 33
5095: PUSH
5096: LD_INT 1
5098: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5099: LD_INT 46
5101: PPUSH
5102: LD_INT 1
5104: PPUSH
5105: CALL_OW 321
5109: PUSH
5110: LD_INT 2
5112: EQUAL
5113: PUSH
5114: LD_EXP 33
5118: PUSH
5119: LD_INT 0
5121: EQUAL
5122: AND
5123: IFFALSE 5145
// begin Say ( JMM , D9c-JMM-1b ) ;
5125: LD_EXP 1
5129: PPUSH
5130: LD_STRING D9c-JMM-1b
5132: PPUSH
5133: CALL_OW 88
// energyVDialog = 1 ;
5137: LD_ADDR_EXP 33
5141: PUSH
5142: LD_INT 1
5144: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5145: LD_INT 46
5147: PPUSH
5148: LD_INT 1
5150: PPUSH
5151: CALL_OW 321
5155: PUSH
5156: LD_INT 2
5158: EQUAL
5159: PUSH
5160: LD_INT 21
5162: PPUSH
5163: LD_INT 1
5165: PPUSH
5166: CALL_OW 321
5170: PUSH
5171: LD_INT 2
5173: EQUAL
5174: AND
5175: PUSH
5176: LD_EXP 33
5180: PUSH
5181: LD_INT 0
5183: EQUAL
5184: AND
5185: IFFALSE 5207
// begin Say ( JMM , D9c-JMM-1c ) ;
5187: LD_EXP 1
5191: PPUSH
5192: LD_STRING D9c-JMM-1c
5194: PPUSH
5195: CALL_OW 88
// energyVDialog = 1 ;
5199: LD_ADDR_EXP 33
5203: PUSH
5204: LD_INT 1
5206: ST_TO_ADDR
// end ; end ; end ;
5207: LD_VAR 0 1
5211: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5212: LD_INT 0
5214: PPUSH
5215: PPUSH
5216: PPUSH
5217: PPUSH
5218: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5219: LD_VAR 0 1
5223: NOT
5224: PUSH
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL_OW 256
5234: PUSH
5235: LD_INT 250
5237: LESS
5238: OR
5239: PUSH
5240: LD_VAR 0 1
5244: PPUSH
5245: CALL_OW 314
5249: PUSH
5250: LD_VAR 0 1
5254: PPUSH
5255: CALL_OW 261
5259: PUSH
5260: LD_INT 20
5262: GREATER
5263: AND
5264: OR
5265: IFFALSE 5269
// exit ;
5267: GO 5634
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5269: LD_VAR 0 1
5273: PPUSH
5274: CALL_OW 261
5278: PUSH
5279: LD_INT 20
5281: LESS
5282: PUSH
5283: LD_VAR 0 1
5287: PPUSH
5288: CALL_OW 110
5292: PUSH
5293: LD_INT 21
5295: EQUAL
5296: NOT
5297: AND
5298: IFFALSE 5325
// begin ComStop ( bulldozer ) ;
5300: LD_VAR 0 1
5304: PPUSH
5305: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5309: LD_VAR 0 1
5313: PPUSH
5314: LD_INT 21
5316: PPUSH
5317: CALL_OW 109
// exit ;
5321: GO 5634
// end else
5323: GO 5352
// if GetFuel ( bulldozer ) > 20 then
5325: LD_VAR 0 1
5329: PPUSH
5330: CALL_OW 261
5334: PUSH
5335: LD_INT 20
5337: GREATER
5338: IFFALSE 5352
// SetTag ( bulldozer , 0 ) ;
5340: LD_VAR 0 1
5344: PPUSH
5345: LD_INT 0
5347: PPUSH
5348: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5352: LD_ADDR_VAR 0 5
5356: PUSH
5357: LD_VAR 0 2
5361: PPUSH
5362: CALL_OW 353
5366: ST_TO_ADDR
// tmp := [ ] ;
5367: LD_ADDR_VAR 0 6
5371: PUSH
5372: EMPTY
5373: ST_TO_ADDR
// for i = 1 to list do
5374: LD_ADDR_VAR 0 4
5378: PUSH
5379: DOUBLE
5380: LD_INT 1
5382: DEC
5383: ST_TO_ADDR
5384: LD_VAR 0 5
5388: PUSH
5389: FOR_TO
5390: IFFALSE 5488
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5392: LD_VAR 0 5
5396: PUSH
5397: LD_VAR 0 4
5401: ARRAY
5402: PUSH
5403: LD_INT 1
5405: ARRAY
5406: PPUSH
5407: LD_VAR 0 5
5411: PUSH
5412: LD_VAR 0 4
5416: ARRAY
5417: PUSH
5418: LD_INT 2
5420: ARRAY
5421: PPUSH
5422: CALL_OW 554
5426: IFFALSE 5486
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5428: LD_ADDR_VAR 0 6
5432: PUSH
5433: LD_VAR 0 6
5437: PPUSH
5438: LD_VAR 0 6
5442: PUSH
5443: LD_INT 1
5445: PLUS
5446: PPUSH
5447: LD_VAR 0 5
5451: PUSH
5452: LD_VAR 0 4
5456: ARRAY
5457: PUSH
5458: LD_INT 1
5460: ARRAY
5461: PUSH
5462: LD_VAR 0 5
5466: PUSH
5467: LD_VAR 0 4
5471: ARRAY
5472: PUSH
5473: LD_INT 2
5475: ARRAY
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PPUSH
5481: CALL_OW 1
5485: ST_TO_ADDR
// end ;
5486: GO 5389
5488: POP
5489: POP
// ComStop ( bulldozer ) ;
5490: LD_VAR 0 1
5494: PPUSH
5495: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5499: LD_ADDR_VAR 0 7
5503: PUSH
5504: LD_VAR 0 1
5508: PPUSH
5509: CALL_OW 250
5513: PUSH
5514: LD_VAR 0 1
5518: PPUSH
5519: CALL_OW 251
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: ST_TO_ADDR
// for i = tmp downto 1 do
5528: LD_ADDR_VAR 0 4
5532: PUSH
5533: DOUBLE
5534: LD_VAR 0 6
5538: INC
5539: ST_TO_ADDR
5540: LD_INT 1
5542: PUSH
5543: FOR_DOWNTO
5544: IFFALSE 5632
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5546: LD_ADDR_VAR 0 7
5550: PUSH
5551: LD_VAR 0 7
5555: PUSH
5556: LD_INT 1
5558: ARRAY
5559: PPUSH
5560: LD_VAR 0 7
5564: PUSH
5565: LD_INT 2
5567: ARRAY
5568: PPUSH
5569: LD_VAR 0 6
5573: PPUSH
5574: CALL 5735 0 3
5578: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5579: LD_VAR 0 1
5583: PPUSH
5584: LD_VAR 0 7
5588: PUSH
5589: LD_INT 1
5591: ARRAY
5592: PPUSH
5593: LD_VAR 0 7
5597: PUSH
5598: LD_INT 2
5600: ARRAY
5601: PPUSH
5602: CALL 5639 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5606: LD_ADDR_VAR 0 6
5610: PUSH
5611: LD_VAR 0 6
5615: PPUSH
5616: LD_VAR 0 7
5620: PUSH
5621: LD_INT 3
5623: ARRAY
5624: PPUSH
5625: CALL_OW 3
5629: ST_TO_ADDR
// end ;
5630: GO 5543
5632: POP
5633: POP
// end ;
5634: LD_VAR 0 3
5638: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5639: LD_INT 0
5641: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5642: LD_VAR 0 2
5646: PPUSH
5647: LD_VAR 0 3
5651: PPUSH
5652: CALL_OW 351
5656: PUSH
5657: LD_VAR 0 2
5661: PPUSH
5662: LD_VAR 0 3
5666: PPUSH
5667: CALL_OW 554
5671: AND
5672: PUSH
5673: LD_VAR 0 2
5677: PPUSH
5678: LD_VAR 0 3
5682: PPUSH
5683: CALL_OW 488
5687: AND
5688: PUSH
5689: LD_VAR 0 2
5693: PPUSH
5694: LD_VAR 0 3
5698: PPUSH
5699: CALL_OW 428
5703: PUSH
5704: LD_INT 1
5706: NEG
5707: EQUAL
5708: AND
5709: IFFALSE 5730
// AddComMoveXY ( bulldozer , x , y ) ;
5711: LD_VAR 0 1
5715: PPUSH
5716: LD_VAR 0 2
5720: PPUSH
5721: LD_VAR 0 3
5725: PPUSH
5726: CALL_OW 171
// end ;
5730: LD_VAR 0 4
5734: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5735: LD_INT 0
5737: PPUSH
5738: PPUSH
5739: PPUSH
5740: PPUSH
5741: PPUSH
5742: PPUSH
5743: PPUSH
// dist := 99999 ;
5744: LD_ADDR_VAR 0 6
5748: PUSH
5749: LD_INT 99999
5751: ST_TO_ADDR
// for i = 1 to list do
5752: LD_ADDR_VAR 0 5
5756: PUSH
5757: DOUBLE
5758: LD_INT 1
5760: DEC
5761: ST_TO_ADDR
5762: LD_VAR 0 3
5766: PUSH
5767: FOR_TO
5768: IFFALSE 5906
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5770: LD_ADDR_VAR 0 7
5774: PUSH
5775: LD_VAR 0 1
5779: PPUSH
5780: LD_VAR 0 2
5784: PPUSH
5785: LD_VAR 0 3
5789: PUSH
5790: LD_VAR 0 5
5794: ARRAY
5795: PUSH
5796: LD_INT 1
5798: ARRAY
5799: PPUSH
5800: LD_VAR 0 3
5804: PUSH
5805: LD_VAR 0 5
5809: ARRAY
5810: PUSH
5811: LD_INT 2
5813: ARRAY
5814: PPUSH
5815: CALL_OW 298
5819: ST_TO_ADDR
// if d = 0 then
5820: LD_VAR 0 7
5824: PUSH
5825: LD_INT 0
5827: EQUAL
5828: IFFALSE 5832
// continue ;
5830: GO 5767
// if d < dist then
5832: LD_VAR 0 7
5836: PUSH
5837: LD_VAR 0 6
5841: LESS
5842: IFFALSE 5904
// begin _x := list [ i ] [ 1 ] ;
5844: LD_ADDR_VAR 0 8
5848: PUSH
5849: LD_VAR 0 3
5853: PUSH
5854: LD_VAR 0 5
5858: ARRAY
5859: PUSH
5860: LD_INT 1
5862: ARRAY
5863: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5864: LD_ADDR_VAR 0 9
5868: PUSH
5869: LD_VAR 0 3
5873: PUSH
5874: LD_VAR 0 5
5878: ARRAY
5879: PUSH
5880: LD_INT 2
5882: ARRAY
5883: ST_TO_ADDR
// _i := i ;
5884: LD_ADDR_VAR 0 10
5888: PUSH
5889: LD_VAR 0 5
5893: ST_TO_ADDR
// dist := d ;
5894: LD_ADDR_VAR 0 6
5898: PUSH
5899: LD_VAR 0 7
5903: ST_TO_ADDR
// end ; end ;
5904: GO 5767
5906: POP
5907: POP
// result := [ _x , _y , _i , dist ] ;
5908: LD_ADDR_VAR 0 4
5912: PUSH
5913: LD_VAR 0 8
5917: PUSH
5918: LD_VAR 0 9
5922: PUSH
5923: LD_VAR 0 10
5927: PUSH
5928: LD_VAR 0 6
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: ST_TO_ADDR
// end ;
5939: LD_VAR 0 4
5943: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5944: LD_INT 0
5946: PPUSH
5947: PPUSH
5948: PPUSH
5949: PPUSH
// for i = 1 to 72 do
5950: LD_ADDR_VAR 0 5
5954: PUSH
5955: DOUBLE
5956: LD_INT 1
5958: DEC
5959: ST_TO_ADDR
5960: LD_INT 72
5962: PUSH
5963: FOR_TO
5964: IFFALSE 6022
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5966: LD_VAR 0 5
5970: PPUSH
5971: LD_VAR 0 1
5975: PPUSH
5976: CALL_OW 321
5980: PUSH
5981: LD_INT 1
5983: EQUAL
5984: PUSH
5985: LD_VAR 0 5
5989: PPUSH
5990: LD_VAR 0 3
5994: PPUSH
5995: CALL_OW 482
5999: PUSH
6000: LD_INT 1
6002: EQUAL
6003: AND
6004: IFFALSE 6020
// AddComResearch ( lab , i ) ;
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_VAR 0 5
6015: PPUSH
6016: CALL_OW 184
6020: GO 5963
6022: POP
6023: POP
// end ;
6024: LD_VAR 0 4
6028: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
6029: LD_INT 0
6031: PPUSH
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
6036: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6037: LD_ADDR_VAR 0 7
6041: PUSH
6042: LD_VAR 0 2
6046: PPUSH
6047: CALL_OW 313
6051: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6052: LD_ADDR_VAR 0 8
6056: PUSH
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_INT 22
6064: PUSH
6065: LD_VAR 0 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 2
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 24
6086: PUSH
6087: LD_INT 750
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: LD_INT 54
6099: PUSH
6100: EMPTY
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 70
6117: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6118: LD_ADDR_VAR 0 5
6122: PUSH
6123: LD_VAR 0 3
6127: PPUSH
6128: LD_INT 22
6130: PUSH
6131: LD_VAR 0 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 21
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: LD_INT 24
6155: PUSH
6156: LD_INT 1000
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: EMPTY
6173: LIST
6174: PPUSH
6175: CALL_OW 70
6179: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6180: LD_VAR 0 5
6184: NOT
6185: PUSH
6186: LD_INT 22
6188: PUSH
6189: LD_VAR 0 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 24
6210: PUSH
6211: LD_INT 250
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: PPUSH
6223: CALL_OW 69
6227: NOT
6228: AND
6229: IFFALSE 6233
// exit ;
6231: GO 6345
// if buildings_list > 0 and engineerOkInside then
6233: LD_VAR 0 5
6237: PUSH
6238: LD_INT 0
6240: GREATER
6241: PUSH
6242: LD_VAR 0 7
6246: AND
6247: IFFALSE 6273
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6249: LD_VAR 0 7
6253: PPUSH
6254: LD_INT 25
6256: PUSH
6257: LD_INT 2
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: PPUSH
6264: CALL_OW 72
6268: PPUSH
6269: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
6273: LD_VAR 0 5
6277: PUSH
6278: LD_INT 0
6280: GREATER
6281: PUSH
6282: LD_VAR 0 8
6286: PUSH
6287: LD_INT 0
6289: GREATER
6290: AND
6291: IFFALSE 6311
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
6293: LD_VAR 0 8
6297: PPUSH
6298: LD_VAR 0 5
6302: PUSH
6303: LD_INT 1
6305: ARRAY
6306: PPUSH
6307: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
6311: LD_VAR 0 5
6315: PUSH
6316: LD_INT 0
6318: EQUAL
6319: PUSH
6320: LD_VAR 0 8
6324: PUSH
6325: LD_INT 0
6327: GREATER
6328: AND
6329: IFFALSE 6345
// ComEnterUnit ( engineerOkOutside , building ) ;
6331: LD_VAR 0 8
6335: PPUSH
6336: LD_VAR 0 2
6340: PPUSH
6341: CALL_OW 120
// end ;
6345: LD_VAR 0 4
6349: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
6350: LD_INT 0
6352: PPUSH
6353: PPUSH
6354: PPUSH
6355: PPUSH
6356: PPUSH
6357: PPUSH
6358: PPUSH
6359: PPUSH
6360: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6361: LD_ADDR_VAR 0 6
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_VAR 0 1
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 25
6380: PUSH
6381: LD_INT 4
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 23
6390: PUSH
6391: LD_INT 2
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: PUSH
6398: LD_INT 24
6400: PUSH
6401: LD_INT 251
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: PPUSH
6414: CALL_OW 69
6418: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6419: LD_ADDR_VAR 0 7
6423: PUSH
6424: LD_VAR 0 3
6428: PPUSH
6429: LD_INT 22
6431: PUSH
6432: LD_VAR 0 1
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 23
6443: PUSH
6444: LD_INT 2
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 25
6453: PUSH
6454: LD_INT 4
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 50
6463: PUSH
6464: EMPTY
6465: LIST
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: PPUSH
6473: CALL_OW 70
6477: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6478: LD_ADDR_VAR 0 10
6482: PUSH
6483: LD_VAR 0 3
6487: PPUSH
6488: LD_INT 22
6490: PUSH
6491: LD_VAR 0 1
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 21
6502: PUSH
6503: LD_INT 1
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PUSH
6510: LD_INT 3
6512: PUSH
6513: LD_INT 25
6515: PUSH
6516: LD_INT 3
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: PUSH
6527: LD_INT 3
6529: PUSH
6530: LD_INT 24
6532: PUSH
6533: LD_INT 750
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: PPUSH
6550: CALL_OW 70
6554: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6555: LD_ADDR_VAR 0 11
6559: PUSH
6560: LD_VAR 0 2
6564: PPUSH
6565: LD_INT 22
6567: PUSH
6568: LD_VAR 0 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: LD_INT 21
6579: PUSH
6580: LD_INT 1
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 3
6589: PUSH
6590: LD_INT 25
6592: PUSH
6593: LD_INT 3
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 3
6606: PUSH
6607: LD_INT 24
6609: PUSH
6610: LD_INT 1000
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: PPUSH
6627: CALL_OW 70
6631: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6632: LD_VAR 0 10
6636: NOT
6637: PUSH
6638: LD_VAR 0 11
6642: NOT
6643: AND
6644: PUSH
6645: LD_VAR 0 6
6649: NOT
6650: AND
6651: IFFALSE 6655
// exit ;
6653: GO 6889
// if damageUnits > 0 and sci_list > 0 then
6655: LD_VAR 0 10
6659: PUSH
6660: LD_INT 0
6662: GREATER
6663: PUSH
6664: LD_VAR 0 6
6668: PUSH
6669: LD_INT 0
6671: GREATER
6672: AND
6673: IFFALSE 6689
// ComMoveToArea ( damageUnits , healArea ) ;
6675: LD_VAR 0 10
6679: PPUSH
6680: LD_VAR 0 2
6684: PPUSH
6685: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6689: LD_VAR 0 11
6693: PUSH
6694: LD_INT 0
6696: GREATER
6697: PUSH
6698: LD_VAR 0 6
6702: PUSH
6703: LD_INT 0
6705: GREATER
6706: AND
6707: IFFALSE 6718
// ComExitBuilding ( sci_list ) ;
6709: LD_VAR 0 6
6713: PPUSH
6714: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6718: LD_VAR 0 11
6722: PUSH
6723: LD_INT 0
6725: GREATER
6726: PUSH
6727: LD_VAR 0 7
6731: PUSH
6732: LD_INT 0
6734: GREATER
6735: AND
6736: IFFALSE 6756
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6738: LD_VAR 0 7
6742: PPUSH
6743: LD_VAR 0 11
6747: PUSH
6748: LD_INT 1
6750: ARRAY
6751: PPUSH
6752: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6756: LD_VAR 0 10
6760: PUSH
6761: LD_INT 0
6763: EQUAL
6764: PUSH
6765: LD_VAR 0 11
6769: PUSH
6770: LD_INT 0
6772: EQUAL
6773: AND
6774: PUSH
6775: LD_VAR 0 7
6779: PUSH
6780: LD_INT 0
6782: GREATER
6783: AND
6784: IFFALSE 6889
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6786: LD_ADDR_VAR 0 12
6790: PUSH
6791: LD_INT 22
6793: PUSH
6794: LD_VAR 0 1
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PUSH
6803: LD_INT 21
6805: PUSH
6806: LD_INT 3
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 30
6815: PUSH
6816: LD_INT 8
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 69
6832: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6833: LD_ADDR_VAR 0 13
6837: PUSH
6838: LD_INT 1
6840: PPUSH
6841: LD_VAR 0 12
6845: PPUSH
6846: CALL_OW 12
6850: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6851: LD_VAR 0 7
6855: PPUSH
6856: LD_INT 3
6858: PUSH
6859: LD_INT 60
6861: PUSH
6862: EMPTY
6863: LIST
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PPUSH
6869: CALL_OW 72
6873: PPUSH
6874: LD_VAR 0 12
6878: PUSH
6879: LD_VAR 0 13
6883: ARRAY
6884: PPUSH
6885: CALL_OW 120
// end ; end ;
6889: LD_VAR 0 5
6893: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6894: LD_INT 0
6896: PPUSH
6897: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6898: LD_INT 22
6900: PUSH
6901: LD_VAR 0 1
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: LD_INT 21
6912: PUSH
6913: LD_INT 2
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 69
6928: PUSH
6929: LD_VAR 0 3
6933: LESSEQUAL
6934: IFFALSE 7001
// for i = 1 to vehCount do
6936: LD_ADDR_VAR 0 9
6940: PUSH
6941: DOUBLE
6942: LD_INT 1
6944: DEC
6945: ST_TO_ADDR
6946: LD_VAR 0 3
6950: PUSH
6951: FOR_TO
6952: IFFALSE 6999
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6954: LD_VAR 0 2
6958: PPUSH
6959: LD_VAR 0 7
6963: PPUSH
6964: LD_VAR 0 5
6968: PPUSH
6969: LD_VAR 0 6
6973: PPUSH
6974: LD_VAR 0 4
6978: PUSH
6979: LD_INT 1
6981: PPUSH
6982: LD_VAR 0 4
6986: PPUSH
6987: CALL_OW 12
6991: ARRAY
6992: PPUSH
6993: CALL_OW 185
6997: GO 6951
6999: POP
7000: POP
// end ;
7001: LD_VAR 0 8
7005: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7006: LD_INT 0
7008: PPUSH
7009: PPUSH
7010: PPUSH
7011: PPUSH
7012: PPUSH
7013: PPUSH
7014: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7015: LD_ADDR_VAR 0 8
7019: PUSH
7020: LD_INT 22
7022: PUSH
7023: LD_VAR 0 1
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: LD_INT 21
7034: PUSH
7035: LD_INT 2
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 3
7044: PUSH
7045: LD_INT 34
7047: PUSH
7048: LD_INT 51
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PUSH
7055: LD_INT 34
7057: PUSH
7058: LD_INT 53
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: PUSH
7065: LD_INT 34
7067: PUSH
7068: LD_INT 52
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: PUSH
7081: LD_INT 24
7083: PUSH
7084: LD_INT 650
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: PPUSH
7097: CALL_OW 69
7101: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
7102: LD_INT 22
7104: PUSH
7105: LD_VAR 0 1
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 21
7116: PUSH
7117: LD_INT 2
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: LD_INT 24
7126: PUSH
7127: LD_INT 1000
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: LIST
7138: PPUSH
7139: CALL_OW 69
7143: PUSH
7144: LD_INT 3
7146: PUSH
7147: LD_INT 4
7149: PUSH
7150: LD_INT 5
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: LIST
7157: PUSH
7158: LD_OWVAR 67
7162: ARRAY
7163: GREATEREQUAL
7164: IFFALSE 7661
// repeat wait ( 0 0$1 ) ;
7166: LD_INT 35
7168: PPUSH
7169: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7173: LD_ADDR_VAR 0 8
7177: PUSH
7178: LD_INT 22
7180: PUSH
7181: LD_VAR 0 1
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 21
7192: PUSH
7193: LD_INT 2
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 3
7202: PUSH
7203: LD_INT 34
7205: PUSH
7206: LD_INT 51
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 34
7215: PUSH
7216: LD_INT 53
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 34
7225: PUSH
7226: LD_INT 52
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 24
7241: PUSH
7242: LD_INT 650
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: PPUSH
7255: CALL_OW 69
7259: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7260: LD_INT 22
7262: PUSH
7263: LD_VAR 0 1
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 95
7274: PUSH
7275: LD_VAR 0 2
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PPUSH
7288: CALL_OW 69
7292: NOT
7293: PUSH
7294: LD_VAR 0 11
7298: PUSH
7299: LD_INT 0
7301: EQUAL
7302: AND
7303: IFFALSE 7358
// for i := 1 to wayX do
7305: LD_ADDR_VAR 0 6
7309: PUSH
7310: DOUBLE
7311: LD_INT 1
7313: DEC
7314: ST_TO_ADDR
7315: LD_VAR 0 3
7319: PUSH
7320: FOR_TO
7321: IFFALSE 7356
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7323: LD_VAR 0 8
7327: PPUSH
7328: LD_VAR 0 3
7332: PUSH
7333: LD_VAR 0 6
7337: ARRAY
7338: PPUSH
7339: LD_VAR 0 4
7343: PUSH
7344: LD_VAR 0 6
7348: ARRAY
7349: PPUSH
7350: CALL_OW 174
7354: GO 7320
7356: POP
7357: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
7358: LD_INT 22
7360: PUSH
7361: LD_VAR 0 1
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: PUSH
7370: LD_INT 95
7372: PUSH
7373: LD_VAR 0 2
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PPUSH
7386: CALL_OW 69
7390: IFFALSE 7614
// begin seeEnemy = 1 ;
7392: LD_ADDR_VAR 0 11
7396: PUSH
7397: LD_INT 1
7399: ST_TO_ADDR
// for j in vehiclesOK do
7400: LD_ADDR_VAR 0 7
7404: PUSH
7405: LD_VAR 0 8
7409: PUSH
7410: FOR_IN
7411: IFFALSE 7612
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7413: LD_ADDR_VAR 0 9
7417: PUSH
7418: LD_INT 81
7420: PUSH
7421: LD_VAR 0 1
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: PUSH
7430: LD_INT 101
7432: PUSH
7433: LD_INT 1
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PPUSH
7444: CALL_OW 69
7448: PPUSH
7449: LD_VAR 0 7
7453: PPUSH
7454: CALL_OW 74
7458: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7459: LD_ADDR_VAR 0 10
7463: PUSH
7464: LD_INT 81
7466: PUSH
7467: LD_VAR 0 1
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PUSH
7476: LD_INT 101
7478: PUSH
7479: LD_INT 1
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 2
7488: PUSH
7489: LD_INT 59
7491: PUSH
7492: EMPTY
7493: LIST
7494: PUSH
7495: LD_INT 21
7497: PUSH
7498: LD_INT 1
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 21
7507: PUSH
7508: LD_INT 2
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: PPUSH
7529: CALL_OW 69
7533: PPUSH
7534: LD_VAR 0 7
7538: PPUSH
7539: CALL_OW 74
7543: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7544: LD_VAR 0 7
7548: PPUSH
7549: LD_VAR 0 9
7553: PPUSH
7554: CALL_OW 296
7558: PUSH
7559: LD_INT 8
7561: PLUS
7562: PUSH
7563: LD_VAR 0 7
7567: PPUSH
7568: LD_VAR 0 10
7572: PPUSH
7573: CALL_OW 296
7577: LESS
7578: IFFALSE 7596
// ComAttackUnit ( j , target1 ) else
7580: LD_VAR 0 7
7584: PPUSH
7585: LD_VAR 0 9
7589: PPUSH
7590: CALL_OW 115
7594: GO 7610
// ComAttackUnit ( j , target2 ) ;
7596: LD_VAR 0 7
7600: PPUSH
7601: LD_VAR 0 10
7605: PPUSH
7606: CALL_OW 115
// end ;
7610: GO 7410
7612: POP
7613: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7614: LD_INT 22
7616: PUSH
7617: LD_VAR 0 1
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 21
7628: PUSH
7629: LD_INT 2
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 24
7638: PUSH
7639: LD_INT 1000
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: PPUSH
7651: CALL_OW 69
7655: PUSH
7656: LD_INT 0
7658: EQUAL
7659: IFFALSE 7166
// seeEnemy = 0 ;
7661: LD_ADDR_VAR 0 11
7665: PUSH
7666: LD_INT 0
7668: ST_TO_ADDR
// end ;
7669: LD_VAR 0 5
7673: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7674: LD_INT 0
7676: PPUSH
7677: PPUSH
7678: PPUSH
7679: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7680: LD_ADDR_VAR 0 8
7684: PUSH
7685: LD_INT 22
7687: PUSH
7688: LD_VAR 0 1
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: LD_INT 21
7699: PUSH
7700: LD_INT 2
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: LD_INT 3
7709: PUSH
7710: LD_INT 34
7712: PUSH
7713: LD_INT 51
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 34
7722: PUSH
7723: LD_INT 53
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 34
7732: PUSH
7733: LD_INT 52
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 3
7748: PUSH
7749: LD_INT 24
7751: PUSH
7752: LD_INT 650
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: PPUSH
7769: CALL_OW 69
7773: ST_TO_ADDR
// if damageVehicles > 0 then
7774: LD_VAR 0 8
7778: PUSH
7779: LD_INT 0
7781: GREATER
7782: IFFALSE 7803
// ComMoveXY ( damageVehicles , repX , repY ) ;
7784: LD_VAR 0 8
7788: PPUSH
7789: LD_VAR 0 3
7793: PPUSH
7794: LD_VAR 0 4
7798: PPUSH
7799: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7803: LD_VAR 0 8
7807: PPUSH
7808: LD_INT 95
7810: PUSH
7811: LD_VAR 0 2
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PUSH
7820: LD_INT 3
7822: PUSH
7823: LD_INT 58
7825: PUSH
7826: EMPTY
7827: LIST
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PPUSH
7837: CALL_OW 72
7841: PUSH
7842: LD_INT 0
7844: GREATER
7845: IFFALSE 7912
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7847: LD_ADDR_VAR 0 6
7851: PUSH
7852: LD_VAR 0 8
7856: PPUSH
7857: LD_INT 95
7859: PUSH
7860: LD_VAR 0 2
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PUSH
7869: LD_INT 3
7871: PUSH
7872: LD_INT 58
7874: PUSH
7875: EMPTY
7876: LIST
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PPUSH
7886: CALL_OW 72
7890: PUSH
7891: FOR_IN
7892: IFFALSE 7910
// ComExitVehicle ( UnitsInside ( i ) ) ;
7894: LD_VAR 0 6
7898: PPUSH
7899: CALL_OW 313
7903: PPUSH
7904: CALL_OW 121
7908: GO 7891
7910: POP
7911: POP
// end ;
7912: LD_VAR 0 5
7916: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7917: LD_INT 0
7919: PPUSH
7920: PPUSH
7921: PPUSH
7922: PPUSH
7923: PPUSH
7924: PPUSH
7925: PPUSH
7926: PPUSH
7927: PPUSH
7928: PPUSH
7929: PPUSH
// for i = 1 to medicCount do
7930: LD_ADDR_VAR 0 14
7934: PUSH
7935: DOUBLE
7936: LD_INT 1
7938: DEC
7939: ST_TO_ADDR
7940: LD_VAR 0 7
7944: PUSH
7945: FOR_TO
7946: IFFALSE 8028
// begin uc_side = side ;
7948: LD_ADDR_OWVAR 20
7952: PUSH
7953: LD_VAR 0 1
7957: ST_TO_ADDR
// uc_nation = nation ;
7958: LD_ADDR_OWVAR 21
7962: PUSH
7963: LD_VAR 0 2
7967: ST_TO_ADDR
// hc_name =  ;
7968: LD_ADDR_OWVAR 26
7972: PUSH
7973: LD_STRING 
7975: ST_TO_ADDR
// hc_gallery =  ;
7976: LD_ADDR_OWVAR 33
7980: PUSH
7981: LD_STRING 
7983: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7984: LD_INT 0
7986: PPUSH
7987: LD_INT 4
7989: PPUSH
7990: LD_VAR 0 8
7994: PPUSH
7995: CALL_OW 380
// un = CreateHuman ;
7999: LD_ADDR_VAR 0 16
8003: PUSH
8004: CALL_OW 44
8008: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8009: LD_VAR 0 16
8013: PPUSH
8014: LD_VAR 0 9
8018: PPUSH
8019: LD_INT 0
8021: PPUSH
8022: CALL_OW 49
// end ;
8026: GO 7945
8028: POP
8029: POP
// for i = 1 to soldierCount do
8030: LD_ADDR_VAR 0 14
8034: PUSH
8035: DOUBLE
8036: LD_INT 1
8038: DEC
8039: ST_TO_ADDR
8040: LD_VAR 0 3
8044: PUSH
8045: FOR_TO
8046: IFFALSE 8128
// begin uc_side = side ;
8048: LD_ADDR_OWVAR 20
8052: PUSH
8053: LD_VAR 0 1
8057: ST_TO_ADDR
// uc_nation = nation ;
8058: LD_ADDR_OWVAR 21
8062: PUSH
8063: LD_VAR 0 2
8067: ST_TO_ADDR
// hc_name =  ;
8068: LD_ADDR_OWVAR 26
8072: PUSH
8073: LD_STRING 
8075: ST_TO_ADDR
// hc_gallery =  ;
8076: LD_ADDR_OWVAR 33
8080: PUSH
8081: LD_STRING 
8083: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8084: LD_INT 0
8086: PPUSH
8087: LD_INT 1
8089: PPUSH
8090: LD_VAR 0 8
8094: PPUSH
8095: CALL_OW 380
// un = CreateHuman ;
8099: LD_ADDR_VAR 0 16
8103: PUSH
8104: CALL_OW 44
8108: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8109: LD_VAR 0 16
8113: PPUSH
8114: LD_VAR 0 9
8118: PPUSH
8119: LD_INT 0
8121: PPUSH
8122: CALL_OW 49
// end ;
8126: GO 8045
8128: POP
8129: POP
// for i = 1 to sniperCount do
8130: LD_ADDR_VAR 0 14
8134: PUSH
8135: DOUBLE
8136: LD_INT 1
8138: DEC
8139: ST_TO_ADDR
8140: LD_VAR 0 4
8144: PUSH
8145: FOR_TO
8146: IFFALSE 8228
// begin uc_side = side ;
8148: LD_ADDR_OWVAR 20
8152: PUSH
8153: LD_VAR 0 1
8157: ST_TO_ADDR
// uc_nation = nation ;
8158: LD_ADDR_OWVAR 21
8162: PUSH
8163: LD_VAR 0 2
8167: ST_TO_ADDR
// hc_name =  ;
8168: LD_ADDR_OWVAR 26
8172: PUSH
8173: LD_STRING 
8175: ST_TO_ADDR
// hc_gallery =  ;
8176: LD_ADDR_OWVAR 33
8180: PUSH
8181: LD_STRING 
8183: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8184: LD_INT 0
8186: PPUSH
8187: LD_INT 5
8189: PPUSH
8190: LD_VAR 0 8
8194: PPUSH
8195: CALL_OW 380
// un = CreateHuman ;
8199: LD_ADDR_VAR 0 16
8203: PUSH
8204: CALL_OW 44
8208: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8209: LD_VAR 0 16
8213: PPUSH
8214: LD_VAR 0 9
8218: PPUSH
8219: LD_INT 0
8221: PPUSH
8222: CALL_OW 49
// end ;
8226: GO 8145
8228: POP
8229: POP
// for i = 1 to bazookCount do
8230: LD_ADDR_VAR 0 14
8234: PUSH
8235: DOUBLE
8236: LD_INT 1
8238: DEC
8239: ST_TO_ADDR
8240: LD_VAR 0 5
8244: PUSH
8245: FOR_TO
8246: IFFALSE 8328
// begin uc_side = side ;
8248: LD_ADDR_OWVAR 20
8252: PUSH
8253: LD_VAR 0 1
8257: ST_TO_ADDR
// uc_nation = nation ;
8258: LD_ADDR_OWVAR 21
8262: PUSH
8263: LD_VAR 0 2
8267: ST_TO_ADDR
// hc_name =  ;
8268: LD_ADDR_OWVAR 26
8272: PUSH
8273: LD_STRING 
8275: ST_TO_ADDR
// hc_gallery =  ;
8276: LD_ADDR_OWVAR 33
8280: PUSH
8281: LD_STRING 
8283: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8284: LD_INT 0
8286: PPUSH
8287: LD_INT 9
8289: PPUSH
8290: LD_VAR 0 8
8294: PPUSH
8295: CALL_OW 380
// un = CreateHuman ;
8299: LD_ADDR_VAR 0 16
8303: PUSH
8304: CALL_OW 44
8308: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8309: LD_VAR 0 16
8313: PPUSH
8314: LD_VAR 0 9
8318: PPUSH
8319: LD_INT 0
8321: PPUSH
8322: CALL_OW 49
// end ;
8326: GO 8245
8328: POP
8329: POP
// for i = 1 to mortalCount do
8330: LD_ADDR_VAR 0 14
8334: PUSH
8335: DOUBLE
8336: LD_INT 1
8338: DEC
8339: ST_TO_ADDR
8340: LD_VAR 0 6
8344: PUSH
8345: FOR_TO
8346: IFFALSE 8428
// begin uc_side = side ;
8348: LD_ADDR_OWVAR 20
8352: PUSH
8353: LD_VAR 0 1
8357: ST_TO_ADDR
// uc_nation = nation ;
8358: LD_ADDR_OWVAR 21
8362: PUSH
8363: LD_VAR 0 2
8367: ST_TO_ADDR
// hc_name =  ;
8368: LD_ADDR_OWVAR 26
8372: PUSH
8373: LD_STRING 
8375: ST_TO_ADDR
// hc_gallery =  ;
8376: LD_ADDR_OWVAR 33
8380: PUSH
8381: LD_STRING 
8383: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8384: LD_INT 0
8386: PPUSH
8387: LD_INT 8
8389: PPUSH
8390: LD_VAR 0 8
8394: PPUSH
8395: CALL_OW 380
// un = CreateHuman ;
8399: LD_ADDR_VAR 0 16
8403: PUSH
8404: CALL_OW 44
8408: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8409: LD_VAR 0 16
8413: PPUSH
8414: LD_VAR 0 9
8418: PPUSH
8419: LD_INT 0
8421: PPUSH
8422: CALL_OW 49
// end ;
8426: GO 8345
8428: POP
8429: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8430: LD_ADDR_VAR 0 19
8434: PUSH
8435: LD_INT 22
8437: PUSH
8438: LD_VAR 0 1
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: LD_INT 2
8449: PUSH
8450: LD_INT 25
8452: PUSH
8453: LD_INT 1
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 25
8462: PUSH
8463: LD_INT 5
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: LD_INT 25
8472: PUSH
8473: LD_INT 8
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: LD_INT 25
8482: PUSH
8483: LD_INT 9
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PPUSH
8501: CALL_OW 69
8505: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8506: LD_ADDR_VAR 0 18
8510: PUSH
8511: LD_INT 22
8513: PUSH
8514: LD_VAR 0 1
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: LD_INT 25
8525: PUSH
8526: LD_INT 4
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: PPUSH
8537: CALL_OW 69
8541: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8542: LD_VAR 0 18
8546: PPUSH
8547: LD_VAR 0 10
8551: PPUSH
8552: CALL_OW 113
// if strategy = 1 then
8556: LD_VAR 0 12
8560: PUSH
8561: LD_INT 1
8563: EQUAL
8564: IFFALSE 9055
// begin for i in soldiersOK_list do
8566: LD_ADDR_VAR 0 14
8570: PUSH
8571: LD_VAR 0 19
8575: PUSH
8576: FOR_IN
8577: IFFALSE 8641
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8579: LD_VAR 0 14
8583: PPUSH
8584: LD_INT 91
8586: PPUSH
8587: LD_INT 63
8589: PPUSH
8590: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8594: LD_VAR 0 14
8598: PPUSH
8599: LD_INT 101
8601: PPUSH
8602: LD_INT 53
8604: PPUSH
8605: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8609: LD_VAR 0 14
8613: PPUSH
8614: LD_INT 75
8616: PPUSH
8617: LD_INT 23
8619: PPUSH
8620: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8624: LD_VAR 0 14
8628: PPUSH
8629: LD_INT 78
8631: PPUSH
8632: LD_INT 8
8634: PPUSH
8635: CALL_OW 174
// end ;
8639: GO 8576
8641: POP
8642: POP
// wait ( 0 0$30 ) ;
8643: LD_INT 1050
8645: PPUSH
8646: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8650: LD_INT 35
8652: PPUSH
8653: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8657: LD_ADDR_VAR 0 17
8661: PUSH
8662: LD_INT 22
8664: PUSH
8665: LD_VAR 0 1
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 1
8676: PUSH
8677: LD_INT 3
8679: PUSH
8680: LD_INT 24
8682: PUSH
8683: LD_INT 550
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: LD_INT 24
8696: PUSH
8697: LD_INT 250
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: LIST
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: PPUSH
8713: CALL_OW 69
8717: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8718: LD_ADDR_VAR 0 19
8722: PUSH
8723: LD_INT 22
8725: PUSH
8726: LD_VAR 0 1
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PUSH
8735: LD_INT 2
8737: PUSH
8738: LD_INT 25
8740: PUSH
8741: LD_INT 1
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PUSH
8748: LD_INT 25
8750: PUSH
8751: LD_INT 5
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PUSH
8758: LD_INT 25
8760: PUSH
8761: LD_INT 8
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PUSH
8768: LD_INT 25
8770: PUSH
8771: LD_INT 9
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: PUSH
8785: LD_INT 24
8787: PUSH
8788: LD_INT 1000
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: LIST
8799: PPUSH
8800: CALL_OW 69
8804: ST_TO_ADDR
// if medicCount > 0 then
8805: LD_VAR 0 7
8809: PUSH
8810: LD_INT 0
8812: GREATER
8813: IFFALSE 8857
// begin if damageUnit_list > 0 then
8815: LD_VAR 0 17
8819: PUSH
8820: LD_INT 0
8822: GREATER
8823: IFFALSE 8857
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8825: LD_VAR 0 17
8829: PPUSH
8830: LD_VAR 0 10
8834: PPUSH
8835: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8839: LD_VAR 0 7
8843: PPUSH
8844: LD_VAR 0 17
8848: PUSH
8849: LD_INT 1
8851: ARRAY
8852: PPUSH
8853: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8857: LD_ADDR_VAR 0 14
8861: PUSH
8862: LD_VAR 0 19
8866: PUSH
8867: FOR_IN
8868: IFFALSE 9044
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8870: LD_ADDR_VAR 0 22
8874: PUSH
8875: LD_INT 22
8877: PUSH
8878: LD_VAR 0 11
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PPUSH
8887: CALL_OW 69
8891: PPUSH
8892: LD_VAR 0 14
8896: PPUSH
8897: CALL_OW 74
8901: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8902: LD_ADDR_VAR 0 23
8906: PUSH
8907: LD_INT 22
8909: PUSH
8910: LD_VAR 0 11
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PUSH
8919: LD_INT 2
8921: PUSH
8922: LD_INT 59
8924: PUSH
8925: EMPTY
8926: LIST
8927: PUSH
8928: LD_INT 21
8930: PUSH
8931: LD_INT 1
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 21
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: EMPTY
8959: LIST
8960: PPUSH
8961: CALL_OW 69
8965: PPUSH
8966: LD_VAR 0 14
8970: PPUSH
8971: CALL_OW 74
8975: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8976: LD_VAR 0 14
8980: PPUSH
8981: LD_VAR 0 22
8985: PPUSH
8986: CALL_OW 296
8990: PUSH
8991: LD_INT 8
8993: PLUS
8994: PUSH
8995: LD_VAR 0 14
8999: PPUSH
9000: LD_VAR 0 23
9004: PPUSH
9005: CALL_OW 296
9009: LESS
9010: IFFALSE 9028
// begin ComAttackUnit ( i , target1 ) ;
9012: LD_VAR 0 14
9016: PPUSH
9017: LD_VAR 0 22
9021: PPUSH
9022: CALL_OW 115
// end else
9026: GO 9042
// begin ComAttackUnit ( i , target2 ) ;
9028: LD_VAR 0 14
9032: PPUSH
9033: LD_VAR 0 23
9037: PPUSH
9038: CALL_OW 115
// end ; end ;
9042: GO 8867
9044: POP
9045: POP
// until soldiersOK_list = [ ] ;
9046: LD_VAR 0 19
9050: PUSH
9051: EMPTY
9052: EQUAL
9053: IFFALSE 8650
// end ; if strategy = 2 then
9055: LD_VAR 0 12
9059: PUSH
9060: LD_INT 2
9062: EQUAL
9063: IFFALSE 9517
// begin for i in soldiersOK_list do
9065: LD_ADDR_VAR 0 14
9069: PUSH
9070: LD_VAR 0 19
9074: PUSH
9075: FOR_IN
9076: IFFALSE 9110
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
9078: LD_VAR 0 14
9082: PPUSH
9083: LD_INT 91
9085: PPUSH
9086: LD_INT 63
9088: PPUSH
9089: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
9093: LD_VAR 0 14
9097: PPUSH
9098: LD_INT 75
9100: PPUSH
9101: LD_INT 33
9103: PPUSH
9104: CALL_OW 174
// end ;
9108: GO 9075
9110: POP
9111: POP
// repeat wait ( 0 0$3 ) ;
9112: LD_INT 105
9114: PPUSH
9115: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9119: LD_ADDR_VAR 0 17
9123: PUSH
9124: LD_INT 22
9126: PUSH
9127: LD_VAR 0 1
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 1
9138: PUSH
9139: LD_INT 3
9141: PUSH
9142: LD_INT 24
9144: PUSH
9145: LD_INT 550
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: LD_INT 24
9158: PUSH
9159: LD_INT 250
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: LIST
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PPUSH
9175: CALL_OW 69
9179: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9180: LD_ADDR_VAR 0 19
9184: PUSH
9185: LD_INT 22
9187: PUSH
9188: LD_VAR 0 1
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: LD_INT 2
9199: PUSH
9200: LD_INT 25
9202: PUSH
9203: LD_INT 1
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 25
9212: PUSH
9213: LD_INT 5
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 25
9222: PUSH
9223: LD_INT 8
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: LD_INT 25
9232: PUSH
9233: LD_INT 9
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: PUSH
9247: LD_INT 24
9249: PUSH
9250: LD_INT 1000
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: LIST
9261: PPUSH
9262: CALL_OW 69
9266: ST_TO_ADDR
// if medicCount > 0 then
9267: LD_VAR 0 7
9271: PUSH
9272: LD_INT 0
9274: GREATER
9275: IFFALSE 9319
// begin if damageUnit_list > 0 then
9277: LD_VAR 0 17
9281: PUSH
9282: LD_INT 0
9284: GREATER
9285: IFFALSE 9319
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
9287: LD_VAR 0 17
9291: PPUSH
9292: LD_VAR 0 10
9296: PPUSH
9297: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
9301: LD_VAR 0 7
9305: PPUSH
9306: LD_VAR 0 17
9310: PUSH
9311: LD_INT 1
9313: ARRAY
9314: PPUSH
9315: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
9319: LD_ADDR_VAR 0 14
9323: PUSH
9324: LD_VAR 0 19
9328: PUSH
9329: FOR_IN
9330: IFFALSE 9506
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9332: LD_ADDR_VAR 0 22
9336: PUSH
9337: LD_INT 22
9339: PUSH
9340: LD_VAR 0 11
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PPUSH
9349: CALL_OW 69
9353: PPUSH
9354: LD_VAR 0 14
9358: PPUSH
9359: CALL_OW 74
9363: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9364: LD_ADDR_VAR 0 23
9368: PUSH
9369: LD_INT 22
9371: PUSH
9372: LD_VAR 0 11
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 2
9383: PUSH
9384: LD_INT 59
9386: PUSH
9387: EMPTY
9388: LIST
9389: PUSH
9390: LD_INT 21
9392: PUSH
9393: LD_INT 1
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PUSH
9400: LD_INT 21
9402: PUSH
9403: LD_INT 2
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: EMPTY
9421: LIST
9422: PPUSH
9423: CALL_OW 69
9427: PPUSH
9428: LD_VAR 0 14
9432: PPUSH
9433: CALL_OW 74
9437: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9438: LD_VAR 0 14
9442: PPUSH
9443: LD_VAR 0 22
9447: PPUSH
9448: CALL_OW 296
9452: PUSH
9453: LD_INT 8
9455: PLUS
9456: PUSH
9457: LD_VAR 0 14
9461: PPUSH
9462: LD_VAR 0 23
9466: PPUSH
9467: CALL_OW 296
9471: LESS
9472: IFFALSE 9490
// begin ComAttackUnit ( i , target1 ) ;
9474: LD_VAR 0 14
9478: PPUSH
9479: LD_VAR 0 22
9483: PPUSH
9484: CALL_OW 115
// end else
9488: GO 9504
// begin ComAttackUnit ( i , target2 ) ;
9490: LD_VAR 0 14
9494: PPUSH
9495: LD_VAR 0 23
9499: PPUSH
9500: CALL_OW 115
// end ; end ;
9504: GO 9329
9506: POP
9507: POP
// until soldiersOK_list = [ ] ;
9508: LD_VAR 0 19
9512: PUSH
9513: EMPTY
9514: EQUAL
9515: IFFALSE 9112
// end ; if not soldiersOK_list and medic_list then
9517: LD_VAR 0 19
9521: NOT
9522: PUSH
9523: LD_VAR 0 18
9527: AND
9528: IFFALSE 9668
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
9530: LD_ADDR_VAR 0 18
9534: PUSH
9535: LD_INT 22
9537: PUSH
9538: LD_VAR 0 1
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 25
9549: PUSH
9550: LD_INT 4
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 50
9559: PUSH
9560: EMPTY
9561: LIST
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: LIST
9567: PPUSH
9568: CALL_OW 69
9572: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9573: LD_INT 35
9575: PPUSH
9576: CALL_OW 67
// for i in medic_list do
9580: LD_ADDR_VAR 0 14
9584: PUSH
9585: LD_VAR 0 18
9589: PUSH
9590: FOR_IN
9591: IFFALSE 9659
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
9593: LD_VAR 0 14
9597: PPUSH
9598: CALL_OW 314
9602: NOT
9603: PUSH
9604: LD_VAR 0 14
9608: PPUSH
9609: LD_INT 4
9611: PPUSH
9612: CALL_OW 308
9616: NOT
9617: AND
9618: IFFALSE 9634
// ComMoveToArea ( i , RussianAttack ) else
9620: LD_VAR 0 14
9624: PPUSH
9625: LD_INT 4
9627: PPUSH
9628: CALL_OW 113
9632: GO 9657
// if IsInArea ( i , RussianAttack ) then
9634: LD_VAR 0 14
9638: PPUSH
9639: LD_INT 4
9641: PPUSH
9642: CALL_OW 308
9646: IFFALSE 9657
// RemoveUnit ( i ) ;
9648: LD_VAR 0 14
9652: PPUSH
9653: CALL_OW 64
9657: GO 9590
9659: POP
9660: POP
// until not medic_list ;
9661: LD_VAR 0 18
9665: NOT
9666: IFFALSE 9530
// end ; end ;
9668: LD_VAR 0 13
9672: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9673: LD_INT 0
9675: PPUSH
9676: PPUSH
9677: PPUSH
9678: PPUSH
9679: PPUSH
9680: PPUSH
9681: PPUSH
9682: PPUSH
9683: PPUSH
9684: PPUSH
9685: PPUSH
// amChassisTab = [ ] ;
9686: LD_ADDR_VAR 0 19
9690: PUSH
9691: EMPTY
9692: ST_TO_ADDR
// arChassisTab = [ ] ;
9693: LD_ADDR_VAR 0 18
9697: PUSH
9698: EMPTY
9699: ST_TO_ADDR
// ruChassisTab = [ ] ;
9700: LD_ADDR_VAR 0 17
9704: PUSH
9705: EMPTY
9706: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9707: LD_INT 35
9709: PPUSH
9710: CALL_OW 67
// if nation = 1 then
9714: LD_VAR 0 5
9718: PUSH
9719: LD_INT 1
9721: EQUAL
9722: IFFALSE 10213
// begin uc_side = side ;
9724: LD_ADDR_OWVAR 20
9728: PUSH
9729: LD_VAR 0 2
9733: ST_TO_ADDR
// uc_nation = nation ;
9734: LD_ADDR_OWVAR 21
9738: PUSH
9739: LD_VAR 0 5
9743: ST_TO_ADDR
// vc_engine = vehengine ;
9744: LD_ADDR_OWVAR 39
9748: PUSH
9749: LD_VAR 0 6
9753: ST_TO_ADDR
// vc_control = vehcontrol ;
9754: LD_ADDR_OWVAR 38
9758: PUSH
9759: LD_VAR 0 7
9763: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9764: LD_ADDR_OWVAR 40
9768: PUSH
9769: LD_VAR 0 10
9773: PUSH
9774: LD_INT 1
9776: PPUSH
9777: LD_VAR 0 10
9781: PPUSH
9782: CALL_OW 12
9786: ARRAY
9787: ST_TO_ADDR
// for j = 1 to AMWeapon do
9788: LD_ADDR_VAR 0 14
9792: PUSH
9793: DOUBLE
9794: LD_INT 1
9796: DEC
9797: ST_TO_ADDR
9798: LD_VAR 0 10
9802: PUSH
9803: FOR_TO
9804: IFFALSE 10105
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9806: LD_VAR 0 10
9810: PUSH
9811: LD_VAR 0 14
9815: ARRAY
9816: PUSH
9817: LD_INT 2
9819: EQUAL
9820: PUSH
9821: LD_VAR 0 10
9825: PUSH
9826: LD_VAR 0 14
9830: ARRAY
9831: PUSH
9832: LD_INT 3
9834: EQUAL
9835: OR
9836: IFFALSE 9889
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9838: LD_ADDR_VAR 0 19
9842: PUSH
9843: LD_INT 1
9845: PUSH
9846: LD_INT 2
9848: PUSH
9849: LD_INT 3
9851: PUSH
9852: LD_INT 4
9854: PUSH
9855: LD_INT 5
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9865: LD_ADDR_OWVAR 37
9869: PUSH
9870: LD_VAR 0 19
9874: PUSH
9875: LD_INT 1
9877: PPUSH
9878: LD_VAR 0 19
9882: PPUSH
9883: CALL_OW 12
9887: ARRAY
9888: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9889: LD_VAR 0 10
9893: PUSH
9894: LD_VAR 0 14
9898: ARRAY
9899: PUSH
9900: LD_INT 4
9902: EQUAL
9903: PUSH
9904: LD_VAR 0 10
9908: PUSH
9909: LD_VAR 0 14
9913: ARRAY
9914: PUSH
9915: LD_INT 5
9917: EQUAL
9918: OR
9919: PUSH
9920: LD_VAR 0 10
9924: PUSH
9925: LD_VAR 0 14
9929: ARRAY
9930: PUSH
9931: LD_INT 9
9933: EQUAL
9934: OR
9935: PUSH
9936: LD_VAR 0 10
9940: PUSH
9941: LD_VAR 0 14
9945: ARRAY
9946: PUSH
9947: LD_INT 11
9949: EQUAL
9950: OR
9951: PUSH
9952: LD_VAR 0 10
9956: PUSH
9957: LD_VAR 0 14
9961: ARRAY
9962: PUSH
9963: LD_INT 7
9965: EQUAL
9966: OR
9967: IFFALSE 10016
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9969: LD_ADDR_VAR 0 19
9973: PUSH
9974: LD_INT 2
9976: PUSH
9977: LD_INT 3
9979: PUSH
9980: LD_INT 4
9982: PUSH
9983: LD_INT 5
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9992: LD_ADDR_OWVAR 37
9996: PUSH
9997: LD_VAR 0 19
10001: PUSH
10002: LD_INT 1
10004: PPUSH
10005: LD_VAR 0 19
10009: PPUSH
10010: CALL_OW 12
10014: ARRAY
10015: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
10016: LD_VAR 0 10
10020: PUSH
10021: LD_VAR 0 14
10025: ARRAY
10026: PUSH
10027: LD_INT 8
10029: EQUAL
10030: PUSH
10031: LD_VAR 0 10
10035: PUSH
10036: LD_VAR 0 14
10040: ARRAY
10041: PUSH
10042: LD_INT 6
10044: EQUAL
10045: OR
10046: PUSH
10047: LD_VAR 0 10
10051: PUSH
10052: LD_VAR 0 14
10056: ARRAY
10057: PUSH
10058: LD_INT 10
10060: EQUAL
10061: OR
10062: IFFALSE 10103
// begin amChassisTab = [ 4 , 5 ] ;
10064: LD_ADDR_VAR 0 19
10068: PUSH
10069: LD_INT 4
10071: PUSH
10072: LD_INT 5
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10079: LD_ADDR_OWVAR 37
10083: PUSH
10084: LD_VAR 0 19
10088: PUSH
10089: LD_INT 1
10091: PPUSH
10092: LD_VAR 0 19
10096: PPUSH
10097: CALL_OW 12
10101: ARRAY
10102: ST_TO_ADDR
// end ; end ;
10103: GO 9803
10105: POP
10106: POP
// veh = CreateVehicle ;
10107: LD_ADDR_VAR 0 16
10111: PUSH
10112: CALL_OW 45
10116: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10117: LD_VAR 0 16
10121: PPUSH
10122: LD_VAR 0 1
10126: PPUSH
10127: LD_INT 0
10129: PPUSH
10130: CALL_OW 49
// if vehControl = 1 then
10134: LD_VAR 0 7
10138: PUSH
10139: LD_INT 1
10141: EQUAL
10142: IFFALSE 10199
// begin hc_gallery =  ;
10144: LD_ADDR_OWVAR 33
10148: PUSH
10149: LD_STRING 
10151: ST_TO_ADDR
// hc_name =  ;
10152: LD_ADDR_OWVAR 26
10156: PUSH
10157: LD_STRING 
10159: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10160: LD_INT 0
10162: PPUSH
10163: LD_INT 3
10165: PPUSH
10166: LD_VAR 0 4
10170: PPUSH
10171: CALL_OW 380
// un = CreateHuman ;
10175: LD_ADDR_VAR 0 15
10179: PUSH
10180: CALL_OW 44
10184: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10185: LD_VAR 0 15
10189: PPUSH
10190: LD_VAR 0 16
10194: PPUSH
10195: CALL_OW 52
// end ; i = i + 1 ;
10199: LD_ADDR_VAR 0 13
10203: PUSH
10204: LD_VAR 0 13
10208: PUSH
10209: LD_INT 1
10211: PLUS
10212: ST_TO_ADDR
// end ; if nation = 2 then
10213: LD_VAR 0 5
10217: PUSH
10218: LD_INT 2
10220: EQUAL
10221: IFFALSE 10645
// begin uc_side = side ;
10223: LD_ADDR_OWVAR 20
10227: PUSH
10228: LD_VAR 0 2
10232: ST_TO_ADDR
// uc_nation = nation ;
10233: LD_ADDR_OWVAR 21
10237: PUSH
10238: LD_VAR 0 5
10242: ST_TO_ADDR
// vc_engine = vehengine ;
10243: LD_ADDR_OWVAR 39
10247: PUSH
10248: LD_VAR 0 6
10252: ST_TO_ADDR
// vc_control = vehcontrol ;
10253: LD_ADDR_OWVAR 38
10257: PUSH
10258: LD_VAR 0 7
10262: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10263: LD_ADDR_OWVAR 40
10267: PUSH
10268: LD_VAR 0 9
10272: PUSH
10273: LD_INT 1
10275: PPUSH
10276: LD_VAR 0 9
10280: PPUSH
10281: CALL_OW 12
10285: ARRAY
10286: ST_TO_ADDR
// for j = 1 to ARWeapons do
10287: LD_ADDR_VAR 0 14
10291: PUSH
10292: DOUBLE
10293: LD_INT 1
10295: DEC
10296: ST_TO_ADDR
10297: LD_VAR 0 9
10301: PUSH
10302: FOR_TO
10303: IFFALSE 10537
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10305: LD_VAR 0 9
10309: PUSH
10310: LD_VAR 0 14
10314: ARRAY
10315: PUSH
10316: LD_INT 24
10318: EQUAL
10319: PUSH
10320: LD_VAR 0 9
10324: PUSH
10325: LD_VAR 0 14
10329: ARRAY
10330: PUSH
10331: LD_INT 22
10333: EQUAL
10334: OR
10335: PUSH
10336: LD_VAR 0 9
10340: PUSH
10341: LD_VAR 0 14
10345: ARRAY
10346: PUSH
10347: LD_INT 23
10349: EQUAL
10350: OR
10351: PUSH
10352: LD_VAR 0 9
10356: PUSH
10357: LD_VAR 0 14
10361: ARRAY
10362: PUSH
10363: LD_INT 30
10365: EQUAL
10366: OR
10367: IFFALSE 10416
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10369: LD_ADDR_VAR 0 18
10373: PUSH
10374: LD_INT 11
10376: PUSH
10377: LD_INT 12
10379: PUSH
10380: LD_INT 13
10382: PUSH
10383: LD_INT 14
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10392: LD_ADDR_OWVAR 37
10396: PUSH
10397: LD_VAR 0 18
10401: PUSH
10402: LD_INT 1
10404: PPUSH
10405: LD_VAR 0 18
10409: PPUSH
10410: CALL_OW 12
10414: ARRAY
10415: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10416: LD_VAR 0 9
10420: PUSH
10421: LD_VAR 0 14
10425: ARRAY
10426: PUSH
10427: LD_INT 29
10429: EQUAL
10430: PUSH
10431: LD_VAR 0 9
10435: PUSH
10436: LD_VAR 0 14
10440: ARRAY
10441: PUSH
10442: LD_INT 28
10444: EQUAL
10445: OR
10446: PUSH
10447: LD_VAR 0 9
10451: PUSH
10452: LD_VAR 0 14
10456: ARRAY
10457: PUSH
10458: LD_INT 27
10460: EQUAL
10461: OR
10462: PUSH
10463: LD_VAR 0 9
10467: PUSH
10468: LD_VAR 0 14
10472: ARRAY
10473: PUSH
10474: LD_INT 26
10476: EQUAL
10477: OR
10478: PUSH
10479: LD_VAR 0 9
10483: PUSH
10484: LD_VAR 0 14
10488: ARRAY
10489: PUSH
10490: LD_INT 25
10492: EQUAL
10493: OR
10494: IFFALSE 10535
// begin arChassisTab = [ 13 , 14 ] ;
10496: LD_ADDR_VAR 0 18
10500: PUSH
10501: LD_INT 13
10503: PUSH
10504: LD_INT 14
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10511: LD_ADDR_OWVAR 37
10515: PUSH
10516: LD_VAR 0 18
10520: PUSH
10521: LD_INT 1
10523: PPUSH
10524: LD_VAR 0 18
10528: PPUSH
10529: CALL_OW 12
10533: ARRAY
10534: ST_TO_ADDR
// end ; end ;
10535: GO 10302
10537: POP
10538: POP
// veh = CreateVehicle ;
10539: LD_ADDR_VAR 0 16
10543: PUSH
10544: CALL_OW 45
10548: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10549: LD_VAR 0 16
10553: PPUSH
10554: LD_VAR 0 1
10558: PPUSH
10559: LD_INT 0
10561: PPUSH
10562: CALL_OW 49
// if vehcontrol = 1 then
10566: LD_VAR 0 7
10570: PUSH
10571: LD_INT 1
10573: EQUAL
10574: IFFALSE 10631
// begin hc_gallery =  ;
10576: LD_ADDR_OWVAR 33
10580: PUSH
10581: LD_STRING 
10583: ST_TO_ADDR
// hc_name =  ;
10584: LD_ADDR_OWVAR 26
10588: PUSH
10589: LD_STRING 
10591: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10592: LD_INT 0
10594: PPUSH
10595: LD_INT 3
10597: PPUSH
10598: LD_VAR 0 4
10602: PPUSH
10603: CALL_OW 380
// un = CreateHuman ;
10607: LD_ADDR_VAR 0 15
10611: PUSH
10612: CALL_OW 44
10616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10617: LD_VAR 0 15
10621: PPUSH
10622: LD_VAR 0 16
10626: PPUSH
10627: CALL_OW 52
// end ; i = i + 1 ;
10631: LD_ADDR_VAR 0 13
10635: PUSH
10636: LD_VAR 0 13
10640: PUSH
10641: LD_INT 1
10643: PLUS
10644: ST_TO_ADDR
// end ; if nation = 3 then
10645: LD_VAR 0 5
10649: PUSH
10650: LD_INT 3
10652: EQUAL
10653: IFFALSE 11045
// begin uc_side = side ;
10655: LD_ADDR_OWVAR 20
10659: PUSH
10660: LD_VAR 0 2
10664: ST_TO_ADDR
// uc_nation = nation ;
10665: LD_ADDR_OWVAR 21
10669: PUSH
10670: LD_VAR 0 5
10674: ST_TO_ADDR
// vc_engine = vehengine ;
10675: LD_ADDR_OWVAR 39
10679: PUSH
10680: LD_VAR 0 6
10684: ST_TO_ADDR
// vc_control = vehcontrol ;
10685: LD_ADDR_OWVAR 38
10689: PUSH
10690: LD_VAR 0 7
10694: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10695: LD_ADDR_OWVAR 40
10699: PUSH
10700: LD_VAR 0 8
10704: PUSH
10705: LD_INT 1
10707: PPUSH
10708: LD_VAR 0 8
10712: PPUSH
10713: CALL_OW 12
10717: ARRAY
10718: ST_TO_ADDR
// for j = 1 to RuWeapons do
10719: LD_ADDR_VAR 0 14
10723: PUSH
10724: DOUBLE
10725: LD_INT 1
10727: DEC
10728: ST_TO_ADDR
10729: LD_VAR 0 8
10733: PUSH
10734: FOR_TO
10735: IFFALSE 10937
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10737: LD_VAR 0 8
10741: PUSH
10742: LD_VAR 0 14
10746: ARRAY
10747: PUSH
10748: LD_INT 42
10750: EQUAL
10751: PUSH
10752: LD_VAR 0 8
10756: PUSH
10757: LD_VAR 0 14
10761: ARRAY
10762: PUSH
10763: LD_INT 43
10765: EQUAL
10766: OR
10767: PUSH
10768: LD_VAR 0 8
10772: PUSH
10773: LD_VAR 0 14
10777: ARRAY
10778: PUSH
10779: LD_INT 44
10781: EQUAL
10782: OR
10783: PUSH
10784: LD_VAR 0 8
10788: PUSH
10789: LD_VAR 0 14
10793: ARRAY
10794: PUSH
10795: LD_INT 45
10797: EQUAL
10798: OR
10799: PUSH
10800: LD_VAR 0 8
10804: PUSH
10805: LD_VAR 0 14
10809: ARRAY
10810: PUSH
10811: LD_INT 49
10813: EQUAL
10814: OR
10815: IFFALSE 10864
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10817: LD_ADDR_VAR 0 17
10821: PUSH
10822: LD_INT 21
10824: PUSH
10825: LD_INT 22
10827: PUSH
10828: LD_INT 23
10830: PUSH
10831: LD_INT 24
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10840: LD_ADDR_OWVAR 37
10844: PUSH
10845: LD_VAR 0 17
10849: PUSH
10850: LD_INT 1
10852: PPUSH
10853: LD_VAR 0 17
10857: PPUSH
10858: CALL_OW 12
10862: ARRAY
10863: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10864: LD_VAR 0 8
10868: PUSH
10869: LD_VAR 0 14
10873: ARRAY
10874: PUSH
10875: LD_INT 46
10877: EQUAL
10878: PUSH
10879: LD_VAR 0 8
10883: PUSH
10884: LD_VAR 0 14
10888: ARRAY
10889: PUSH
10890: LD_INT 47
10892: EQUAL
10893: OR
10894: IFFALSE 10935
// begin ruChassisTab = [ 23 , 24 ] ;
10896: LD_ADDR_VAR 0 17
10900: PUSH
10901: LD_INT 23
10903: PUSH
10904: LD_INT 24
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10911: LD_ADDR_OWVAR 37
10915: PUSH
10916: LD_VAR 0 17
10920: PUSH
10921: LD_INT 1
10923: PPUSH
10924: LD_VAR 0 17
10928: PPUSH
10929: CALL_OW 12
10933: ARRAY
10934: ST_TO_ADDR
// end ; end ;
10935: GO 10734
10937: POP
10938: POP
// veh = CreateVehicle ;
10939: LD_ADDR_VAR 0 16
10943: PUSH
10944: CALL_OW 45
10948: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10949: LD_VAR 0 16
10953: PPUSH
10954: LD_VAR 0 1
10958: PPUSH
10959: LD_INT 0
10961: PPUSH
10962: CALL_OW 49
// if vehcontrol = 1 then
10966: LD_VAR 0 7
10970: PUSH
10971: LD_INT 1
10973: EQUAL
10974: IFFALSE 11031
// begin hc_gallery =  ;
10976: LD_ADDR_OWVAR 33
10980: PUSH
10981: LD_STRING 
10983: ST_TO_ADDR
// hc_name =  ;
10984: LD_ADDR_OWVAR 26
10988: PUSH
10989: LD_STRING 
10991: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10992: LD_INT 0
10994: PPUSH
10995: LD_INT 3
10997: PPUSH
10998: LD_VAR 0 4
11002: PPUSH
11003: CALL_OW 380
// un = CreateHuman ;
11007: LD_ADDR_VAR 0 15
11011: PUSH
11012: CALL_OW 44
11016: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11017: LD_VAR 0 15
11021: PPUSH
11022: LD_VAR 0 16
11026: PPUSH
11027: CALL_OW 52
// end ; i = i + 1 ;
11031: LD_ADDR_VAR 0 13
11035: PUSH
11036: LD_VAR 0 13
11040: PUSH
11041: LD_INT 1
11043: PLUS
11044: ST_TO_ADDR
// end ; until i = vehCount ;
11045: LD_VAR 0 13
11049: PUSH
11050: LD_VAR 0 3
11054: EQUAL
11055: IFFALSE 9707
// repeat wait ( 0 0$1 ) ;
11057: LD_INT 35
11059: PPUSH
11060: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
11064: LD_INT 22
11066: PUSH
11067: LD_VAR 0 2
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 21
11078: PUSH
11079: LD_INT 2
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 24
11088: PUSH
11089: LD_INT 250
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 3
11098: PUSH
11099: LD_INT 58
11101: PUSH
11102: EMPTY
11103: LIST
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: PPUSH
11115: CALL_OW 69
11119: PUSH
11120: LD_INT 0
11122: GREATER
11123: IFFALSE 11365
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
11125: LD_ADDR_VAR 0 13
11129: PUSH
11130: LD_INT 22
11132: PUSH
11133: LD_VAR 0 2
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PUSH
11142: LD_INT 21
11144: PUSH
11145: LD_INT 2
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: PUSH
11152: LD_INT 24
11154: PUSH
11155: LD_INT 250
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: LD_INT 3
11164: PUSH
11165: LD_INT 58
11167: PUSH
11168: EMPTY
11169: LIST
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: PPUSH
11181: CALL_OW 69
11185: PUSH
11186: FOR_IN
11187: IFFALSE 11363
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11189: LD_ADDR_VAR 0 21
11193: PUSH
11194: LD_INT 22
11196: PUSH
11197: LD_VAR 0 11
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PPUSH
11206: CALL_OW 69
11210: PPUSH
11211: LD_VAR 0 13
11215: PPUSH
11216: CALL_OW 74
11220: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11221: LD_ADDR_VAR 0 22
11225: PUSH
11226: LD_INT 22
11228: PUSH
11229: LD_VAR 0 11
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 2
11240: PUSH
11241: LD_INT 59
11243: PUSH
11244: EMPTY
11245: LIST
11246: PUSH
11247: LD_INT 21
11249: PUSH
11250: LD_INT 1
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 21
11259: PUSH
11260: LD_INT 2
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: PUSH
11277: EMPTY
11278: LIST
11279: PPUSH
11280: CALL_OW 69
11284: PPUSH
11285: LD_VAR 0 13
11289: PPUSH
11290: CALL_OW 74
11294: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11295: LD_VAR 0 13
11299: PPUSH
11300: LD_VAR 0 21
11304: PPUSH
11305: CALL_OW 296
11309: PUSH
11310: LD_INT 8
11312: PLUS
11313: PUSH
11314: LD_VAR 0 13
11318: PPUSH
11319: LD_VAR 0 22
11323: PPUSH
11324: CALL_OW 296
11328: LESS
11329: IFFALSE 11347
// begin ComAttackUnit ( i , target1 ) ;
11331: LD_VAR 0 13
11335: PPUSH
11336: LD_VAR 0 21
11340: PPUSH
11341: CALL_OW 115
// end else
11345: GO 11361
// begin ComAttackUnit ( i , target2 ) ;
11347: LD_VAR 0 13
11351: PPUSH
11352: LD_VAR 0 22
11356: PPUSH
11357: CALL_OW 115
// end ; end ;
11361: GO 11186
11363: POP
11364: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11365: LD_INT 22
11367: PUSH
11368: LD_VAR 0 2
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PUSH
11377: LD_INT 21
11379: PUSH
11380: LD_INT 2
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 24
11389: PUSH
11390: LD_INT 250
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 3
11399: PUSH
11400: LD_INT 58
11402: PUSH
11403: EMPTY
11404: LIST
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: PPUSH
11416: CALL_OW 69
11420: PUSH
11421: LD_INT 0
11423: EQUAL
11424: IFFALSE 11057
// end ; end_of_file
11426: LD_VAR 0 12
11430: RET
// every 1 do var i , gammaSquad , startX , startY ;
11431: GO 11433
11433: DISABLE
11434: LD_INT 0
11436: PPUSH
11437: PPUSH
11438: PPUSH
11439: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11440: LD_ADDR_VAR 0 2
11444: PUSH
11445: LD_EXP 8
11449: PUSH
11450: LD_EXP 9
11454: PUSH
11455: LD_EXP 10
11459: PUSH
11460: LD_EXP 11
11464: PUSH
11465: LD_EXP 12
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11477: LD_ADDR_VAR 0 3
11481: PUSH
11482: LD_INT 46
11484: PUSH
11485: LD_INT 45
11487: PUSH
11488: LD_INT 44
11490: PUSH
11491: LD_INT 43
11493: PUSH
11494: LD_INT 42
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11504: LD_ADDR_VAR 0 4
11508: PUSH
11509: LD_INT 14
11511: PUSH
11512: LD_INT 12
11514: PUSH
11515: LD_INT 10
11517: PUSH
11518: LD_INT 8
11520: PUSH
11521: LD_INT 6
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
11531: LD_EXP 11
11535: PPUSH
11536: LD_INT 31
11538: PPUSH
11539: LD_INT 59
11541: PPUSH
11542: LD_INT 19
11544: PPUSH
11545: LD_INT 5
11547: PPUSH
11548: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
11552: LD_INT 32
11554: PPUSH
11555: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11559: LD_INT 32
11561: PPUSH
11562: LD_INT 51
11564: PPUSH
11565: LD_INT 26
11567: PPUSH
11568: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11572: LD_INT 32
11574: PPUSH
11575: LD_INT 53
11577: PPUSH
11578: LD_INT 23
11580: PPUSH
11581: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11585: LD_INT 32
11587: PPUSH
11588: LD_INT 52
11590: PPUSH
11591: LD_INT 19
11593: PPUSH
11594: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11598: LD_INT 35
11600: PPUSH
11601: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11605: LD_INT 32
11607: PPUSH
11608: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11612: LD_INT 32
11614: PPUSH
11615: CALL_OW 250
11619: PUSH
11620: LD_INT 52
11622: EQUAL
11623: PUSH
11624: LD_INT 32
11626: PPUSH
11627: CALL_OW 251
11631: PUSH
11632: LD_INT 19
11634: EQUAL
11635: AND
11636: IFFALSE 11598
// ComExitVehicle ( JMM ) ;
11638: LD_EXP 1
11642: PPUSH
11643: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11647: LD_EXP 7
11651: PPUSH
11652: LD_EXP 1
11656: PPUSH
11657: CALL_OW 119
// wait ( 0 0$01 ) ;
11661: LD_INT 35
11663: PPUSH
11664: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11668: LD_EXP 1
11672: PPUSH
11673: LD_INT 46
11675: PPUSH
11676: LD_INT 10
11678: PPUSH
11679: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11683: LD_EXP 1
11687: PPUSH
11688: LD_EXP 7
11692: PPUSH
11693: CALL_OW 179
// wait ( 0 0$4 ) ;
11697: LD_INT 140
11699: PPUSH
11700: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11704: LD_EXP 1
11708: PPUSH
11709: LD_STRING D1-JMM-1
11711: PPUSH
11712: CALL_OW 88
// if not dialogue_skipped then
11716: LD_OWVAR 59
11720: NOT
11721: IFFALSE 12378
// begin for i := 1 to gammaSquad do
11723: LD_ADDR_VAR 0 1
11727: PUSH
11728: DOUBLE
11729: LD_INT 1
11731: DEC
11732: ST_TO_ADDR
11733: LD_VAR 0 2
11737: PUSH
11738: FOR_TO
11739: IFFALSE 11800
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11741: LD_VAR 0 2
11745: PUSH
11746: LD_VAR 0 1
11750: ARRAY
11751: PPUSH
11752: LD_VAR 0 3
11756: PUSH
11757: LD_VAR 0 1
11761: ARRAY
11762: PPUSH
11763: LD_VAR 0 4
11767: PUSH
11768: LD_VAR 0 1
11772: ARRAY
11773: PPUSH
11774: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11778: LD_VAR 0 2
11782: PUSH
11783: LD_VAR 0 1
11787: ARRAY
11788: PPUSH
11789: LD_EXP 1
11793: PPUSH
11794: CALL_OW 179
// end ;
11798: GO 11738
11800: POP
11801: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11802: LD_EXP 4
11806: PPUSH
11807: LD_INT 41
11809: PPUSH
11810: LD_INT 4
11812: PPUSH
11813: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11817: LD_EXP 4
11821: PPUSH
11822: LD_EXP 1
11826: PPUSH
11827: CALL_OW 179
// if Lisa = false and Bobby then
11831: LD_EXP 4
11835: PUSH
11836: LD_INT 0
11838: EQUAL
11839: PUSH
11840: LD_EXP 2
11844: AND
11845: IFFALSE 11876
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11847: LD_EXP 2
11851: PPUSH
11852: LD_INT 41
11854: PPUSH
11855: LD_INT 4
11857: PPUSH
11858: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11862: LD_EXP 2
11866: PPUSH
11867: LD_EXP 1
11871: PPUSH
11872: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11876: LD_EXP 4
11880: PUSH
11881: LD_INT 0
11883: EQUAL
11884: PUSH
11885: LD_EXP 2
11889: PUSH
11890: LD_INT 0
11892: EQUAL
11893: AND
11894: PUSH
11895: LD_EXP 3
11899: AND
11900: IFFALSE 11931
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11902: LD_EXP 3
11906: PPUSH
11907: LD_INT 41
11909: PPUSH
11910: LD_INT 4
11912: PPUSH
11913: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11917: LD_EXP 3
11921: PPUSH
11922: LD_EXP 1
11926: PPUSH
11927: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11931: LD_EXP 4
11935: PUSH
11936: LD_INT 0
11938: EQUAL
11939: PUSH
11940: LD_EXP 2
11944: PUSH
11945: LD_INT 0
11947: EQUAL
11948: AND
11949: PUSH
11950: LD_EXP 3
11954: PUSH
11955: LD_INT 0
11957: EQUAL
11958: AND
11959: IFFALSE 11990
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11961: LD_EXP 6
11965: PPUSH
11966: LD_INT 41
11968: PPUSH
11969: LD_INT 4
11971: PPUSH
11972: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11976: LD_EXP 6
11980: PPUSH
11981: LD_EXP 1
11985: PPUSH
11986: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11990: LD_EXP 7
11994: PPUSH
11995: LD_STRING D1-Brown-1
11997: PPUSH
11998: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
12002: LD_EXP 1
12006: PPUSH
12007: LD_STRING D1-JMM-2
12009: PPUSH
12010: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
12014: LD_EXP 7
12018: PPUSH
12019: LD_STRING D1-Brown-2
12021: PPUSH
12022: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
12026: LD_EXP 1
12030: PPUSH
12031: LD_EXP 9
12035: PPUSH
12036: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
12040: LD_EXP 9
12044: PPUSH
12045: LD_STRING D1-FSol1-2
12047: PPUSH
12048: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
12052: LD_EXP 1
12056: PPUSH
12057: LD_EXP 8
12061: PPUSH
12062: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
12066: LD_EXP 8
12070: PPUSH
12071: LD_STRING D1-Sol2-2
12073: PPUSH
12074: CALL_OW 88
// if Lisa then
12078: LD_EXP 4
12082: IFFALSE 12122
// begin ComTurnUnit ( JMM , Lisa ) ;
12084: LD_EXP 1
12088: PPUSH
12089: LD_EXP 4
12093: PPUSH
12094: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
12098: LD_EXP 4
12102: PPUSH
12103: LD_STRING D1-Lisa-2
12105: PPUSH
12106: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12110: LD_EXP 1
12114: PPUSH
12115: LD_STRING D1-JMM-3
12117: PPUSH
12118: CALL_OW 88
// end ; if Bobby then
12122: LD_EXP 2
12126: IFFALSE 12166
// begin ComTurnUnit ( JMM , Bobby ) ;
12128: LD_EXP 1
12132: PPUSH
12133: LD_EXP 2
12137: PPUSH
12138: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
12142: LD_EXP 2
12146: PPUSH
12147: LD_STRING D1-Bobby-2
12149: PPUSH
12150: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12154: LD_EXP 1
12158: PPUSH
12159: LD_STRING D1-JMM-3
12161: PPUSH
12162: CALL_OW 88
// end ; if Cyrus then
12166: LD_EXP 3
12170: IFFALSE 12210
// begin ComTurnUnit ( JMM , Cyrus ) ;
12172: LD_EXP 1
12176: PPUSH
12177: LD_EXP 3
12181: PPUSH
12182: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
12186: LD_EXP 3
12190: PPUSH
12191: LD_STRING D1-Cyrus-2
12193: PPUSH
12194: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12198: LD_EXP 1
12202: PPUSH
12203: LD_STRING D1-JMM-3
12205: PPUSH
12206: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
12210: LD_EXP 1
12214: PPUSH
12215: LD_EXP 7
12219: PPUSH
12220: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
12224: LD_EXP 1
12228: PPUSH
12229: LD_STRING D1-JMM-3a
12231: PPUSH
12232: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
12236: LD_EXP 7
12240: PPUSH
12241: LD_INT 38
12243: PPUSH
12244: LD_INT 5
12246: PPUSH
12247: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
12251: LD_EXP 7
12255: PPUSH
12256: LD_EXP 1
12260: PPUSH
12261: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
12265: LD_EXP 1
12269: PPUSH
12270: LD_INT 40
12272: PPUSH
12273: LD_INT 7
12275: PPUSH
12276: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12280: LD_EXP 1
12284: PPUSH
12285: LD_EXP 7
12289: PPUSH
12290: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12294: LD_EXP 7
12298: PPUSH
12299: LD_STRING D1-Brown-3
12301: PPUSH
12302: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12306: LD_EXP 14
12310: PPUSH
12311: LD_STRING D1-Har-3
12313: PPUSH
12314: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12318: LD_EXP 1
12322: PPUSH
12323: LD_STRING D1-JMM-4
12325: PPUSH
12326: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12330: LD_EXP 14
12334: PPUSH
12335: LD_STRING D1-Har-4
12337: PPUSH
12338: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12342: LD_EXP 1
12346: PPUSH
12347: LD_STRING D1-JMM-5
12349: PPUSH
12350: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12354: LD_EXP 14
12358: PPUSH
12359: LD_STRING D1-Har-5
12361: PPUSH
12362: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12366: LD_EXP 1
12370: PPUSH
12371: LD_STRING D1-JMM-6
12373: PPUSH
12374: CALL_OW 88
// end ; InGameOff ;
12378: CALL_OW 9
// PrepareRussianConvoy ;
12382: CALL 3402 0 0
// ChangeMissionObjectives ( M1 ) ;
12386: LD_STRING M1
12388: PPUSH
12389: CALL_OW 337
// SaveForQuickRestart ;
12393: CALL_OW 22
// timerStatus = 1 ;
12397: LD_ADDR_EXP 29
12401: PUSH
12402: LD_INT 1
12404: ST_TO_ADDR
// startTimer = 1 ;
12405: LD_ADDR_EXP 30
12409: PUSH
12410: LD_INT 1
12412: ST_TO_ADDR
// bonusAvalaible = 1 ;
12413: LD_ADDR_EXP 44
12417: PUSH
12418: LD_INT 1
12420: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12421: LD_INT 105
12423: PPUSH
12424: CALL_OW 67
// DialogueOn ;
12428: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12432: LD_EXP 12
12436: PPUSH
12437: LD_STRING D9-Mech1-1
12439: PPUSH
12440: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12444: LD_EXP 1
12448: PPUSH
12449: LD_STRING D9-JMM-1
12451: PPUSH
12452: CALL_OW 88
// DialogueOff ;
12456: CALL_OW 7
// end ;
12460: PPOPN 4
12462: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) > 0 do
12463: LD_INT 47
12465: PPUSH
12466: LD_INT 1
12468: PPUSH
12469: CALL_OW 321
12473: PUSH
12474: LD_INT 2
12476: EQUAL
12477: PUSH
12478: LD_EXP 31
12482: NOT
12483: AND
12484: PUSH
12485: LD_INT 22
12487: PUSH
12488: LD_INT 1
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 21
12497: PUSH
12498: LD_INT 3
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: LD_INT 30
12507: PUSH
12508: LD_INT 3
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: PUSH
12515: LD_INT 57
12517: PUSH
12518: EMPTY
12519: LIST
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: PPUSH
12527: CALL_OW 69
12531: PUSH
12532: LD_INT 0
12534: GREATER
12535: AND
12536: IFFALSE 12774
12538: GO 12540
12540: DISABLE
// begin factoryDialog := true ;
12541: LD_ADDR_EXP 31
12545: PUSH
12546: LD_INT 1
12548: ST_TO_ADDR
// if IsOk ( Campell ) then
12549: LD_EXP 12
12553: PPUSH
12554: CALL_OW 302
12558: IFFALSE 12574
// begin Say ( Campell , D10-Mech1-1 ) ;
12560: LD_EXP 12
12564: PPUSH
12565: LD_STRING D10-Mech1-1
12567: PPUSH
12568: CALL_OW 88
// end else
12572: GO 12774
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12574: LD_INT 22
12576: PUSH
12577: LD_INT 1
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 21
12586: PUSH
12587: LD_INT 1
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PUSH
12594: LD_INT 25
12596: PUSH
12597: LD_INT 3
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PUSH
12604: LD_INT 26
12606: PUSH
12607: LD_INT 1
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: PPUSH
12620: CALL_OW 69
12624: PUSH
12625: LD_EXP 1
12629: PUSH
12630: EMPTY
12631: LIST
12632: PUSH
12633: LD_INT 0
12635: GREATER
12636: DIFF
12637: IFFALSE 12711
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12639: LD_INT 22
12641: PUSH
12642: LD_INT 1
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 21
12651: PUSH
12652: LD_INT 1
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 25
12661: PUSH
12662: LD_INT 3
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: LD_INT 26
12671: PUSH
12672: LD_INT 1
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: PPUSH
12685: CALL_OW 69
12689: PUSH
12690: LD_EXP 1
12694: PUSH
12695: EMPTY
12696: LIST
12697: DIFF
12698: PPUSH
12699: LD_STRING D10-Mech1-1
12701: PPUSH
12702: LD_STRING D10-Mech1-1
12704: PPUSH
12705: CALL 4593 0 3
// end else
12709: GO 12774
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12711: LD_INT 22
12713: PUSH
12714: LD_INT 1
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PUSH
12721: LD_INT 21
12723: PUSH
12724: LD_INT 1
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 26
12733: PUSH
12734: LD_INT 1
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 1
12748: ARRAY
12749: PPUSH
12750: CALL_OW 69
12754: PUSH
12755: LD_EXP 1
12759: PUSH
12760: EMPTY
12761: LIST
12762: DIFF
12763: PPUSH
12764: LD_STRING D10-Mech1-1
12766: PPUSH
12767: LD_STRING D10-Mech1-1
12769: PPUSH
12770: CALL 4593 0 3
// end ; end ; end ;
12774: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12775: LD_INT 22
12777: PUSH
12778: LD_INT 1
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 30
12787: PUSH
12788: LD_INT 32
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PPUSH
12799: CALL_OW 69
12803: PUSH
12804: LD_INT 0
12806: GREATER
12807: PUSH
12808: LD_EXP 32
12812: PUSH
12813: LD_INT 0
12815: EQUAL
12816: AND
12817: IFFALSE 13057
12819: GO 12821
12821: DISABLE
// begin if IsOK ( Claptopn ) then
12822: LD_EXP 11
12826: PPUSH
12827: CALL_OW 302
12831: IFFALSE 12847
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12833: LD_EXP 11
12837: PPUSH
12838: LD_STRING D9b-Eng1-1
12840: PPUSH
12841: CALL_OW 88
// end else
12845: GO 13043
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12847: LD_INT 22
12849: PUSH
12850: LD_INT 1
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: LD_INT 21
12859: PUSH
12860: LD_INT 1
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PUSH
12867: LD_INT 25
12869: PUSH
12870: LD_INT 3
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: LD_INT 26
12879: PUSH
12880: LD_INT 1
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: PPUSH
12893: CALL_OW 69
12897: PUSH
12898: LD_EXP 1
12902: PUSH
12903: EMPTY
12904: LIST
12905: PUSH
12906: LD_INT 0
12908: GREATER
12909: DIFF
12910: IFFALSE 12984
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12912: LD_INT 22
12914: PUSH
12915: LD_INT 1
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PUSH
12922: LD_INT 21
12924: PUSH
12925: LD_INT 1
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: LD_INT 25
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 26
12944: PUSH
12945: LD_INT 1
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: PPUSH
12958: CALL_OW 69
12962: PUSH
12963: LD_EXP 1
12967: PUSH
12968: EMPTY
12969: LIST
12970: DIFF
12971: PPUSH
12972: LD_STRING D9b-Eng1-1
12974: PPUSH
12975: LD_STRING D9b-Eng1-11
12977: PPUSH
12978: CALL 4593 0 3
// end else
12982: GO 13043
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12984: LD_INT 22
12986: PUSH
12987: LD_INT 1
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PUSH
12994: LD_INT 21
12996: PUSH
12997: LD_INT 1
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: PUSH
13004: LD_INT 26
13006: PUSH
13007: LD_INT 1
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: LIST
13018: PPUSH
13019: CALL_OW 69
13023: PUSH
13024: LD_EXP 1
13028: PUSH
13029: EMPTY
13030: LIST
13031: DIFF
13032: PPUSH
13033: LD_STRING D9b-Eng1-1
13035: PPUSH
13036: LD_STRING D9b-Eng1-1
13038: PPUSH
13039: CALL 4593 0 3
// end ; end ; if energyVDialog = 0 then
13043: LD_EXP 33
13047: PUSH
13048: LD_INT 0
13050: EQUAL
13051: IFFALSE 13057
// EnergyDialog ;
13053: CALL 4996 0 0
// end ;
13057: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
13058: LD_EXP 34
13062: PUSH
13063: LD_INT 1
13065: EQUAL
13066: PUSH
13067: LD_EXP 35
13071: PUSH
13072: LD_INT 1
13074: EQUAL
13075: AND
13076: IFFALSE 13088
13078: GO 13080
13080: DISABLE
// ChangeMissionObjectives ( M1a ) ;
13081: LD_STRING M1a
13083: PPUSH
13084: CALL_OW 337
13088: END
// every 3 3$0 do
13089: GO 13091
13091: DISABLE
// begin PrepareFirstAttack ;
13092: CALL 4198 0 0
// end ;
13096: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
13097: LD_INT 22
13099: PUSH
13100: LD_INT 5
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: PUSH
13107: LD_INT 21
13109: PUSH
13110: LD_INT 1
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 3
13119: PUSH
13120: LD_INT 24
13122: PUSH
13123: LD_INT 250
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: LIST
13138: PPUSH
13139: CALL_OW 69
13143: PUSH
13144: LD_INT 0
13146: GREATER
13147: PUSH
13148: LD_EXP 23
13152: PUSH
13153: LD_INT 1
13155: EQUAL
13156: AND
13157: IFFALSE 13458
13159: GO 13161
13161: DISABLE
13162: LD_INT 0
13164: PPUSH
// begin firstRussianAttack = 2 ;
13165: LD_ADDR_EXP 23
13169: PUSH
13170: LD_INT 2
13172: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
13173: LD_INT 22
13175: PUSH
13176: LD_INT 5
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 21
13185: PUSH
13186: LD_INT 1
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PPUSH
13197: CALL_OW 69
13201: PPUSH
13202: LD_INT 125
13204: PPUSH
13205: LD_INT 98
13207: PPUSH
13208: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
13212: LD_INT 22
13214: PUSH
13215: LD_INT 1
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: LD_INT 21
13224: PUSH
13225: LD_INT 1
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PPUSH
13236: CALL_OW 69
13240: PUSH
13241: LD_EXP 1
13245: PUSH
13246: LD_EXP 7
13250: PUSH
13251: LD_EXP 4
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: LIST
13260: DIFF
13261: PPUSH
13262: LD_STRING DAtt1-Sol1-1
13264: PPUSH
13265: LD_STRING DAtt1-FSol1-1
13267: PPUSH
13268: CALL 4593 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
13272: LD_EXP 1
13276: PPUSH
13277: LD_STRING DAtt1-JMM-1
13279: PPUSH
13280: CALL_OW 88
// if Lisa then
13284: LD_EXP 4
13288: IFFALSE 13304
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
13290: LD_EXP 4
13294: PPUSH
13295: LD_STRING DAtt1a-Lisa-1
13297: PPUSH
13298: CALL_OW 88
// end else
13302: GO 13375
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13304: LD_INT 22
13306: PUSH
13307: LD_INT 1
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: PUSH
13314: LD_INT 21
13316: PUSH
13317: LD_INT 1
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PUSH
13324: LD_INT 26
13326: PUSH
13327: LD_INT 1
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: LIST
13338: PPUSH
13339: CALL_OW 69
13343: PUSH
13344: LD_EXP 1
13348: PUSH
13349: LD_EXP 7
13353: PUSH
13354: LD_EXP 4
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: LIST
13363: DIFF
13364: PPUSH
13365: LD_STRING DAtt1a-Sol1-1
13367: PPUSH
13368: LD_STRING DAtt1-FSol1-1
13370: PPUSH
13371: CALL 4593 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13375: LD_EXP 1
13379: PPUSH
13380: LD_STRING DAtt1a-JMM-1
13382: PPUSH
13383: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13387: LD_INT 22
13389: PUSH
13390: LD_INT 1
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: LD_INT 21
13399: PUSH
13400: LD_INT 1
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 26
13409: PUSH
13410: LD_INT 1
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: LIST
13421: PPUSH
13422: CALL_OW 69
13426: PUSH
13427: LD_EXP 1
13431: PUSH
13432: LD_EXP 7
13436: PUSH
13437: LD_EXP 4
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: LIST
13446: DIFF
13447: PPUSH
13448: LD_STRING DAtt1b-Sol1-1
13450: PPUSH
13451: LD_STRING DAtt1a-Sol1-1
13453: PPUSH
13454: CALL 4593 0 3
// end ;
13458: PPOPN 1
13460: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13461: LD_EXP 23
13465: PUSH
13466: LD_INT 2
13468: EQUAL
13469: IFFALSE 13531
13471: GO 13473
13473: DISABLE
13474: LD_INT 0
13476: PPUSH
// begin enable ;
13477: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13478: LD_ADDR_VAR 0 1
13482: PUSH
13483: LD_INT 5
13485: PPUSH
13486: LD_INT 22
13488: PUSH
13489: LD_INT 5
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: LD_INT 21
13498: PUSH
13499: LD_INT 1
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PPUSH
13510: CALL_OW 70
13514: PUSH
13515: FOR_IN
13516: IFFALSE 13529
// RemoveUnit ( i ) ;
13518: LD_VAR 0 1
13522: PPUSH
13523: CALL_OW 64
13527: GO 13515
13529: POP
13530: POP
// end ;
13531: PPOPN 1
13533: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13534: LD_INT 22
13536: PUSH
13537: LD_INT 5
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: EMPTY
13545: LIST
13546: PPUSH
13547: CALL_OW 69
13551: PUSH
13552: LD_INT 0
13554: EQUAL
13555: PUSH
13556: LD_EXP 23
13560: PUSH
13561: LD_INT 2
13563: EQUAL
13564: AND
13565: IFFALSE 13578
13567: GO 13569
13569: DISABLE
// firstRussianAttack = 3 ;
13570: LD_ADDR_EXP 23
13574: PUSH
13575: LD_INT 3
13577: ST_TO_ADDR
13578: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13579: LD_EXP 28
13583: PUSH
13584: LD_INT 0
13586: EQUAL
13587: IFFALSE 13668
13589: GO 13591
13591: DISABLE
// begin timerStatus = 4 ;
13592: LD_ADDR_EXP 29
13596: PUSH
13597: LD_INT 4
13599: ST_TO_ADDR
// DialogueOn ;
13600: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13604: LD_EXP 13
13608: PPUSH
13609: LD_STRING D2-Don-1
13611: PPUSH
13612: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13616: LD_EXP 1
13620: PPUSH
13621: LD_STRING D2-JMM-1
13623: PPUSH
13624: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13628: LD_EXP 13
13632: PPUSH
13633: LD_STRING D2-Don-2
13635: PPUSH
13636: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13640: LD_EXP 1
13644: PPUSH
13645: LD_STRING D2-JMM-2
13647: PPUSH
13648: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13652: LD_EXP 13
13656: PPUSH
13657: LD_STRING D2-Don-3
13659: PPUSH
13660: CALL_OW 94
// DialogueOff ;
13664: CALL_OW 7
// end ;
13668: END
// every 12 12$0 do var tmp ;
13669: GO 13671
13671: DISABLE
13672: LD_INT 0
13674: PPUSH
// begin PrepareDonaldsonArmy ;
13675: CALL 1185 0 0
// CenterNowOnUnits ( Donaldson ) ;
13679: LD_EXP 13
13683: PPUSH
13684: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
13688: LD_INT 22
13690: PUSH
13691: LD_INT 6
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PPUSH
13698: CALL_OW 69
13702: NOT
13703: IFFALSE 13719
// begin wait ( 3 ) ;
13705: LD_INT 3
13707: PPUSH
13708: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
13712: LD_STRING ACH_BASE
13714: PPUSH
13715: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13719: LD_ADDR_VAR 0 1
13723: PUSH
13724: LD_INT 22
13726: PUSH
13727: LD_INT 4
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 21
13736: PUSH
13737: LD_INT 1
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 26
13746: PUSH
13747: LD_INT 1
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: LD_INT 25
13756: PUSH
13757: LD_INT 1
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: PPUSH
13770: CALL_OW 69
13774: PUSH
13775: LD_EXP 5
13779: PUSH
13780: EMPTY
13781: LIST
13782: DIFF
13783: ST_TO_ADDR
// DialogueOn ;
13784: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13788: LD_VAR 0 1
13792: PPUSH
13793: LD_STRING D3-Sol1-1
13795: PPUSH
13796: LD_STRING D3-Sol1-1
13798: PPUSH
13799: CALL 4593 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13803: LD_INT 22
13805: PUSH
13806: LD_INT 4
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: LD_INT 21
13815: PUSH
13816: LD_INT 1
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PUSH
13823: LD_INT 26
13825: PUSH
13826: LD_INT 1
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: PUSH
13833: LD_INT 25
13835: PUSH
13836: LD_INT 3
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: PPUSH
13849: CALL_OW 69
13853: PPUSH
13854: LD_STRING D3-Sol2-1
13856: PPUSH
13857: LD_STRING D3-Sol2-1
13859: PPUSH
13860: CALL 4593 0 3
// if Frank then
13864: LD_EXP 5
13868: IFFALSE 13882
// Say ( Frank , D3-Frank-1 ) ;
13870: LD_EXP 5
13874: PPUSH
13875: LD_STRING D3-Frank-1
13877: PPUSH
13878: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13882: LD_EXP 13
13886: PPUSH
13887: LD_STRING D3-Don-1
13889: PPUSH
13890: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13894: LD_EXP 13
13898: PPUSH
13899: LD_STRING D3-Don-1a
13901: PPUSH
13902: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13906: LD_EXP 1
13910: PPUSH
13911: LD_STRING D3-JMM-1
13913: PPUSH
13914: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13918: LD_EXP 13
13922: PPUSH
13923: LD_STRING D3-Don-2
13925: PPUSH
13926: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13930: LD_INT 22
13932: PUSH
13933: LD_INT 6
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: LD_INT 21
13942: PUSH
13943: LD_INT 1
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PPUSH
13954: CALL_OW 69
13958: PUSH
13959: LD_INT 0
13961: GREATER
13962: IFFALSE 14100
// begin Say ( JMM , D3-JMM-2 ) ;
13964: LD_EXP 1
13968: PPUSH
13969: LD_STRING D3-JMM-2
13971: PPUSH
13972: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13976: LD_EXP 13
13980: PPUSH
13981: LD_STRING D3-Don-3
13983: PPUSH
13984: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13988: LD_EXP 1
13992: PPUSH
13993: LD_STRING D3-JMM-3
13995: PPUSH
13996: CALL_OW 88
// if IsOK ( Frank ) then
14000: LD_EXP 5
14004: PPUSH
14005: CALL_OW 302
14009: IFFALSE 14023
// Say ( Frank , D3-Frank-3 ) ;
14011: LD_EXP 5
14015: PPUSH
14016: LD_STRING D3-Frank-3
14018: PPUSH
14019: CALL_OW 88
// DialogueOff ;
14023: CALL_OW 7
// if IsOK ( Frank ) then
14027: LD_EXP 5
14031: PPUSH
14032: CALL_OW 302
14036: IFFALSE 14098
// begin SetSide ( Frank , 0 ) ;
14038: LD_EXP 5
14042: PPUSH
14043: LD_INT 0
14045: PPUSH
14046: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14050: LD_EXP 5
14054: PPUSH
14055: LD_INT 12
14057: PPUSH
14058: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14062: LD_EXP 5
14066: PPUSH
14067: LD_STRING 04t_Frank
14069: PPUSH
14070: CALL_OW 38
// Wait ( 0 0$3 ) ;
14074: LD_INT 105
14076: PPUSH
14077: CALL_OW 67
// frankScoutBase = 1 ;
14081: LD_ADDR_EXP 25
14085: PUSH
14086: LD_INT 1
14088: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14089: LD_EXP 5
14093: PPUSH
14094: CALL_OW 64
// end ; end else
14098: GO 14187
// begin Say ( JMM , D3-JMM-4 ) ;
14100: LD_EXP 1
14104: PPUSH
14105: LD_STRING D3-JMM-4
14107: PPUSH
14108: CALL_OW 88
// DialogueOff ;
14112: CALL_OW 7
// if IsOK ( Frank ) then
14116: LD_EXP 5
14120: PPUSH
14121: CALL_OW 302
14125: IFFALSE 14187
// begin SetSide ( Frank , 0 ) ;
14127: LD_EXP 5
14131: PPUSH
14132: LD_INT 0
14134: PPUSH
14135: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14139: LD_EXP 5
14143: PPUSH
14144: LD_INT 12
14146: PPUSH
14147: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14151: LD_EXP 5
14155: PPUSH
14156: LD_STRING 04t_Frank
14158: PPUSH
14159: CALL_OW 38
// Wait ( 0 0$3 ) ;
14163: LD_INT 105
14165: PPUSH
14166: CALL_OW 67
// frankScoutBase = 1 ;
14170: LD_ADDR_EXP 25
14174: PUSH
14175: LD_INT 1
14177: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14178: LD_EXP 5
14182: PPUSH
14183: CALL_OW 64
// end ; end ; end ;
14187: PPOPN 1
14189: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
14190: LD_EXP 13
14194: PPUSH
14195: CALL_OW 255
14199: PUSH
14200: LD_INT 4
14202: EQUAL
14203: PUSH
14204: LD_EXP 13
14208: PPUSH
14209: CALL_OW 302
14213: AND
14214: IFFALSE 14383
14216: GO 14218
14218: DISABLE
14219: LD_INT 0
14221: PPUSH
14222: PPUSH
// begin wait ( 5 5$00 ) ;
14223: LD_INT 10500
14225: PPUSH
14226: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
14230: LD_EXP 13
14234: PPUSH
14235: CALL_OW 255
14239: PUSH
14240: LD_INT 1
14242: EQUAL
14243: PUSH
14244: LD_EXP 13
14248: PPUSH
14249: CALL_OW 301
14253: OR
14254: IFFALSE 14258
// exit ;
14256: GO 14383
// SayRadio ( Donaldson , D3b-Don-1 ) ;
14258: LD_EXP 13
14262: PPUSH
14263: LD_STRING D3b-Don-1
14265: PPUSH
14266: CALL_OW 94
// donaldsonCoopAttack = 1 ;
14270: LD_ADDR_EXP 41
14274: PUSH
14275: LD_INT 1
14277: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
14278: LD_ADDR_VAR 0 2
14282: PUSH
14283: LD_INT 22
14285: PUSH
14286: LD_INT 4
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PPUSH
14293: CALL_OW 69
14297: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14298: LD_INT 35
14300: PPUSH
14301: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
14305: LD_VAR 0 2
14309: NOT
14310: PUSH
14311: LD_INT 22
14313: PUSH
14314: LD_INT 6
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: LD_INT 101
14323: PUSH
14324: LD_INT 1
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PPUSH
14335: CALL_OW 69
14339: OR
14340: IFFALSE 14298
// if not tmp then
14342: LD_VAR 0 2
14346: NOT
14347: IFFALSE 14351
// exit ;
14349: GO 14383
// for i in tmp do
14351: LD_ADDR_VAR 0 1
14355: PUSH
14356: LD_VAR 0 2
14360: PUSH
14361: FOR_IN
14362: IFFALSE 14381
// ComAgressiveMove ( i , 52 , 64 ) ;
14364: LD_VAR 0 1
14368: PPUSH
14369: LD_INT 52
14371: PPUSH
14372: LD_INT 64
14374: PPUSH
14375: CALL_OW 114
14379: GO 14361
14381: POP
14382: POP
// end ;
14383: PPOPN 2
14385: END
// every 0 0$1 trigger not saveDonaldson and FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) do var i ;
14386: LD_EXP 24
14390: NOT
14391: PUSH
14392: LD_INT 26
14394: PPUSH
14395: LD_INT 22
14397: PUSH
14398: LD_INT 1
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PPUSH
14405: CALL_OW 70
14409: AND
14410: IFFALSE 14465
14412: GO 14414
14414: DISABLE
14415: LD_INT 0
14417: PPUSH
// begin saveDonaldson := 1 ;
14418: LD_ADDR_EXP 24
14422: PUSH
14423: LD_INT 1
14425: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
14426: LD_ADDR_VAR 0 1
14430: PUSH
14431: LD_INT 22
14433: PUSH
14434: LD_INT 4
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PPUSH
14441: CALL_OW 69
14445: PUSH
14446: FOR_IN
14447: IFFALSE 14463
// SetSide ( i , 1 ) ;
14449: LD_VAR 0 1
14453: PPUSH
14454: LD_INT 1
14456: PPUSH
14457: CALL_OW 235
14461: GO 14446
14463: POP
14464: POP
// end ;
14465: PPOPN 1
14467: END
// every 0 0$1 trigger frankScoutBase do
14468: LD_EXP 25
14472: IFFALSE 14837
14474: GO 14476
14476: DISABLE
// begin wait ( 2 2$30 ) ;
14477: LD_INT 5250
14479: PPUSH
14480: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14484: LD_INT 35
14486: PPUSH
14487: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
14491: LD_INT 81
14493: PUSH
14494: LD_INT 4
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 92
14503: PUSH
14504: LD_INT 84
14506: PUSH
14507: LD_INT 28
14509: PUSH
14510: LD_INT 22
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PPUSH
14523: CALL_OW 69
14527: NOT
14528: IFFALSE 14484
// uc_side = 4 ;
14530: LD_ADDR_OWVAR 20
14534: PUSH
14535: LD_INT 4
14537: ST_TO_ADDR
// uc_nation = 1 ;
14538: LD_ADDR_OWVAR 21
14542: PUSH
14543: LD_INT 1
14545: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
14546: LD_ADDR_EXP 5
14550: PUSH
14551: LD_STRING 04t_Frank
14553: PPUSH
14554: CALL_OW 34
14558: ST_TO_ADDR
// if not Frank then
14559: LD_EXP 5
14563: NOT
14564: IFFALSE 14568
// exit ;
14566: GO 14837
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14568: LD_EXP 5
14572: PPUSH
14573: LD_INT 13
14575: PPUSH
14576: LD_INT 0
14578: PPUSH
14579: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14583: LD_INT 35
14585: PPUSH
14586: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
14590: LD_EXP 1
14594: PPUSH
14595: CALL_OW 310
14599: NOT
14600: PUSH
14601: LD_EXP 1
14605: PPUSH
14606: LD_INT 4
14608: PPUSH
14609: CALL_OW 296
14613: PUSH
14614: LD_INT 20
14616: LESS
14617: AND
14618: IFFALSE 14651
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14620: LD_EXP 5
14624: PPUSH
14625: LD_EXP 1
14629: PPUSH
14630: CALL_OW 250
14634: PPUSH
14635: LD_EXP 1
14639: PPUSH
14640: CALL_OW 251
14644: PPUSH
14645: CALL_OW 111
14649: GO 14666
// ComMoveXY ( Frank , 51 , 15 ) ;
14651: LD_EXP 5
14655: PPUSH
14656: LD_INT 51
14658: PPUSH
14659: LD_INT 15
14661: PPUSH
14662: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14666: LD_EXP 5
14670: PPUSH
14671: LD_EXP 1
14675: PPUSH
14676: CALL_OW 296
14680: PUSH
14681: LD_INT 10
14683: LESS
14684: IFFALSE 14583
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14686: LD_EXP 1
14690: PUSH
14691: LD_EXP 5
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PPUSH
14700: CALL_OW 87
// DialogueOn ;
14704: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14708: LD_EXP 5
14712: PPUSH
14713: LD_STRING D3a-Frank-1
14715: PPUSH
14716: CALL_OW 88
// if Lisa then
14720: LD_EXP 4
14724: IFFALSE 14774
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14726: LD_EXP 4
14730: PPUSH
14731: LD_STRING D3a-Lisa-1
14733: PPUSH
14734: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14738: LD_EXP 5
14742: PPUSH
14743: LD_STRING D3a-Frank-2
14745: PPUSH
14746: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14750: LD_EXP 4
14754: PPUSH
14755: LD_STRING D3a-Lisa-2
14757: PPUSH
14758: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14762: LD_EXP 5
14766: PPUSH
14767: LD_STRING D3a-Frank-3
14769: PPUSH
14770: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14774: LD_EXP 1
14778: PPUSH
14779: LD_STRING D3a-JMM-3
14781: PPUSH
14782: CALL_OW 88
// DialogueOff ;
14786: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14790: LD_EXP 5
14794: PPUSH
14795: LD_INT 1
14797: PPUSH
14798: CALL_OW 235
// InGameOn ;
14802: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14806: LD_INT 1
14808: PPUSH
14809: LD_INT 7
14811: PPUSH
14812: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14816: LD_INT 93
14818: PPUSH
14819: LD_INT 91
14821: PPUSH
14822: CALL_OW 84
// wait ( 0 0$5 ) ;
14826: LD_INT 175
14828: PPUSH
14829: CALL_OW 67
// InGameOff ;
14833: CALL_OW 9
// end ;
14837: END
// every 12 12$0 trigger Difficulty > 1 do
14838: LD_OWVAR 67
14842: PUSH
14843: LD_INT 1
14845: GREATER
14846: IFFALSE 14870
14848: GO 14850
14850: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14851: LD_INT 24
14853: PPUSH
14854: LD_INT 24
14856: PPUSH
14857: LD_INT 1
14859: PPUSH
14860: LD_INT 1
14862: PPUSH
14863: LD_INT 53
14865: PPUSH
14866: CALL_OW 185
14870: END
// every 18 18$0 do
14871: GO 14873
14873: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14874: LD_EXP 14
14878: PPUSH
14879: LD_STRING D4-Har-1
14881: PPUSH
14882: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14886: LD_EXP 1
14890: PPUSH
14891: LD_STRING D4-JMM-1
14893: PPUSH
14894: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14898: LD_EXP 14
14902: PPUSH
14903: LD_STRING D4-Har-2
14905: PPUSH
14906: CALL_OW 94
// case query ( Q1 ) of 1 :
14910: LD_STRING Q1
14912: PPUSH
14913: CALL_OW 97
14917: PUSH
14918: LD_INT 1
14920: DOUBLE
14921: EQUAL
14922: IFTRUE 14926
14924: GO 14985
14926: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14927: LD_EXP 1
14931: PPUSH
14932: LD_STRING D5-JMM-1
14934: PPUSH
14935: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14939: LD_EXP 14
14943: PPUSH
14944: LD_STRING D5-Har-1
14946: PPUSH
14947: CALL_OW 94
// timeToSupport = 10 10$0 ;
14951: LD_ADDR_EXP 28
14955: PUSH
14956: LD_INT 21000
14958: ST_TO_ADDR
// timerStatus = 2 ;
14959: LD_ADDR_EXP 29
14963: PUSH
14964: LD_INT 2
14966: ST_TO_ADDR
// startTimer = 1 ;
14967: LD_ADDR_EXP 30
14971: PUSH
14972: LD_INT 1
14974: ST_TO_ADDR
// harrAnswer = 1 ;
14975: LD_ADDR_EXP 26
14979: PUSH
14980: LD_INT 1
14982: ST_TO_ADDR
// end ; 2 :
14983: GO 15120
14985: LD_INT 2
14987: DOUBLE
14988: EQUAL
14989: IFTRUE 14993
14991: GO 15052
14993: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14994: LD_EXP 1
14998: PPUSH
14999: LD_STRING D5-JMM-2
15001: PPUSH
15002: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
15006: LD_EXP 14
15010: PPUSH
15011: LD_STRING D5-Har-2
15013: PPUSH
15014: CALL_OW 94
// timeToSupport = 5 5$0 ;
15018: LD_ADDR_EXP 28
15022: PUSH
15023: LD_INT 10500
15025: ST_TO_ADDR
// timerStatus = 2 ;
15026: LD_ADDR_EXP 29
15030: PUSH
15031: LD_INT 2
15033: ST_TO_ADDR
// startTimer = 1 ;
15034: LD_ADDR_EXP 30
15038: PUSH
15039: LD_INT 1
15041: ST_TO_ADDR
// harrAnswer = 2 ;
15042: LD_ADDR_EXP 26
15046: PUSH
15047: LD_INT 2
15049: ST_TO_ADDR
// end ; 3 :
15050: GO 15120
15052: LD_INT 3
15054: DOUBLE
15055: EQUAL
15056: IFTRUE 15060
15058: GO 15119
15060: POP
// begin Say ( JMM , D5-JMM-3 ) ;
15061: LD_EXP 1
15065: PPUSH
15066: LD_STRING D5-JMM-3
15068: PPUSH
15069: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
15073: LD_EXP 14
15077: PPUSH
15078: LD_STRING D5-Har-3
15080: PPUSH
15081: CALL_OW 94
// timeToSupport = 5 5$0 ;
15085: LD_ADDR_EXP 28
15089: PUSH
15090: LD_INT 10500
15092: ST_TO_ADDR
// timerStatus = 2 ;
15093: LD_ADDR_EXP 29
15097: PUSH
15098: LD_INT 2
15100: ST_TO_ADDR
// startTimer = 1 ;
15101: LD_ADDR_EXP 30
15105: PUSH
15106: LD_INT 1
15108: ST_TO_ADDR
// harrAnswer = 3 ;
15109: LD_ADDR_EXP 26
15113: PUSH
15114: LD_INT 3
15116: ST_TO_ADDR
// end ; end ;
15117: GO 15120
15119: POP
// end ;
15120: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
15121: LD_EXP 29
15125: PUSH
15126: LD_INT 2
15128: EQUAL
15129: PUSH
15130: LD_EXP 28
15134: PUSH
15135: LD_INT 0
15137: EQUAL
15138: AND
15139: IFFALSE 15416
15141: GO 15143
15143: DISABLE
// begin timerStatus = 4 ;
15144: LD_ADDR_EXP 29
15148: PUSH
15149: LD_INT 4
15151: ST_TO_ADDR
// if harrAnswer = 1 then
15152: LD_EXP 26
15156: PUSH
15157: LD_INT 1
15159: EQUAL
15160: IFFALSE 15240
// begin PrepareHarrisonSupport ( 3 ) ;
15162: LD_INT 3
15164: PPUSH
15165: CALL 1755 0 1
// wait ( 1 1$0 ) ;
15169: LD_INT 2100
15171: PPUSH
15172: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15176: LD_EXP 14
15180: PPUSH
15181: LD_STRING D7-Har-1
15183: PPUSH
15184: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15188: LD_STRING M2
15190: PPUSH
15191: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15195: LD_ADDR_EXP 27
15199: PUSH
15200: LD_INT 31500
15202: PUSH
15203: LD_INT 10500
15205: PUSH
15206: LD_INT 8400
15208: PUSH
15209: LD_INT 6300
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: LIST
15216: PUSH
15217: LD_OWVAR 67
15221: ARRAY
15222: PLUS
15223: ST_TO_ADDR
// startTimer = 1 ;
15224: LD_ADDR_EXP 30
15228: PUSH
15229: LD_INT 1
15231: ST_TO_ADDR
// timerStatus = 3 ;
15232: LD_ADDR_EXP 29
15236: PUSH
15237: LD_INT 3
15239: ST_TO_ADDR
// end ; if harrAnswer = 2 then
15240: LD_EXP 26
15244: PUSH
15245: LD_INT 2
15247: EQUAL
15248: IFFALSE 15328
// begin PrepareHarrisonSupport ( 4 ) ;
15250: LD_INT 4
15252: PPUSH
15253: CALL 1755 0 1
// wait ( 1 1$0 ) ;
15257: LD_INT 2100
15259: PPUSH
15260: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15264: LD_EXP 14
15268: PPUSH
15269: LD_STRING D7-Har-1
15271: PPUSH
15272: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15276: LD_STRING M2
15278: PPUSH
15279: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15283: LD_ADDR_EXP 27
15287: PUSH
15288: LD_INT 33600
15290: PUSH
15291: LD_INT 10500
15293: PUSH
15294: LD_INT 8400
15296: PUSH
15297: LD_INT 6300
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: LIST
15304: PUSH
15305: LD_OWVAR 67
15309: ARRAY
15310: PLUS
15311: ST_TO_ADDR
// startTimer = 1 ;
15312: LD_ADDR_EXP 30
15316: PUSH
15317: LD_INT 1
15319: ST_TO_ADDR
// timerStatus = 3 ;
15320: LD_ADDR_EXP 29
15324: PUSH
15325: LD_INT 3
15327: ST_TO_ADDR
// end ; if harrAnswer = 3 then
15328: LD_EXP 26
15332: PUSH
15333: LD_INT 3
15335: EQUAL
15336: IFFALSE 15416
// begin PrepareHarrisonSupport ( 5 ) ;
15338: LD_INT 5
15340: PPUSH
15341: CALL 1755 0 1
// wait ( 1 1$0 ) ;
15345: LD_INT 2100
15347: PPUSH
15348: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15352: LD_EXP 14
15356: PPUSH
15357: LD_STRING D7-Har-1
15359: PPUSH
15360: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15364: LD_STRING M2
15366: PPUSH
15367: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
15371: LD_ADDR_EXP 27
15375: PUSH
15376: LD_INT 35700
15378: PUSH
15379: LD_INT 10500
15381: PUSH
15382: LD_INT 6300
15384: PUSH
15385: LD_INT 4200
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: PUSH
15393: LD_OWVAR 67
15397: ARRAY
15398: PLUS
15399: ST_TO_ADDR
// startTimer = 1 ;
15400: LD_ADDR_EXP 30
15404: PUSH
15405: LD_INT 1
15407: ST_TO_ADDR
// timerStatus = 3 ;
15408: LD_ADDR_EXP 29
15412: PUSH
15413: LD_INT 3
15415: ST_TO_ADDR
// end ; end ;
15416: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
15417: LD_EXP 27
15421: PUSH
15422: LD_INT 8400
15424: LESSEQUAL
15425: PUSH
15426: LD_EXP 29
15430: PUSH
15431: LD_INT 3
15433: EQUAL
15434: AND
15435: IFFALSE 15467
15437: GO 15439
15439: DISABLE
// begin DialogueOn ;
15440: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15444: LD_EXP 14
15448: PPUSH
15449: LD_STRING D7a-Har-1
15451: PPUSH
15452: CALL_OW 94
// DialogueOff ;
15456: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15460: LD_STRING M2a
15462: PPUSH
15463: CALL_OW 337
// end ;
15467: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
15468: LD_EXP 27
15472: PUSH
15473: LD_INT 0
15475: LESSEQUAL
15476: PUSH
15477: LD_EXP 29
15481: PUSH
15482: LD_INT 3
15484: EQUAL
15485: AND
15486: PUSH
15487: LD_EXP 40
15491: NOT
15492: AND
15493: IFFALSE 15632
15495: GO 15497
15497: DISABLE
15498: LD_INT 0
15500: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15501: LD_ADDR_VAR 0 1
15505: PUSH
15506: LD_INT 22
15508: PUSH
15509: LD_INT 1
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PPUSH
15516: CALL_OW 69
15520: PUSH
15521: LD_EXP 1
15525: PUSH
15526: EMPTY
15527: LIST
15528: DIFF
15529: ST_TO_ADDR
// saveDonaldson = 2 ;
15530: LD_ADDR_EXP 24
15534: PUSH
15535: LD_INT 2
15537: ST_TO_ADDR
// DialogueOn ;
15538: CALL_OW 6
// if IsOK ( Donaldson ) then
15542: LD_EXP 13
15546: PPUSH
15547: CALL_OW 302
15551: IFFALSE 15567
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15553: LD_EXP 14
15557: PPUSH
15558: LD_STRING D8-Har-1
15560: PPUSH
15561: CALL_OW 94
// end else
15565: GO 15579
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15567: LD_EXP 14
15571: PPUSH
15572: LD_STRING D8-Har-1a
15574: PPUSH
15575: CALL_OW 94
// end ; DialogueOff ;
15579: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15583: LD_VAR 0 1
15587: PPUSH
15588: LD_INT 4
15590: PPUSH
15591: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15595: LD_VAR 0 1
15599: PPUSH
15600: LD_INT 88
15602: PPUSH
15603: LD_INT 89
15605: PPUSH
15606: CALL_OW 114
// honor = 0 ;
15610: LD_ADDR_EXP 39
15614: PUSH
15615: LD_INT 0
15617: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15618: LD_INT 350
15620: PPUSH
15621: CALL_OW 67
// YouLost ( LostCommand ) ;
15625: LD_STRING LostCommand
15627: PPUSH
15628: CALL_OW 104
// end ;
15632: PPOPN 1
15634: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15635: LD_INT 22
15637: PUSH
15638: LD_INT 6
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: PUSH
15645: LD_INT 21
15647: PUSH
15648: LD_INT 1
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PPUSH
15659: CALL_OW 69
15663: PUSH
15664: LD_INT 0
15666: EQUAL
15667: PUSH
15668: LD_EXP 20
15672: PUSH
15673: LD_INT 0
15675: EQUAL
15676: AND
15677: PUSH
15678: LD_EXP 44
15682: PUSH
15683: LD_INT 1
15685: EQUAL
15686: AND
15687: IFFALSE 15781
15689: GO 15691
15691: DISABLE
15692: LD_INT 0
15694: PPUSH
15695: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15696: LD_ADDR_VAR 0 2
15700: PUSH
15701: LD_INT 22
15703: PUSH
15704: LD_INT 1
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 21
15713: PUSH
15714: LD_INT 1
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: LD_INT 23
15723: PUSH
15724: LD_INT 1
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: LIST
15735: PPUSH
15736: CALL_OW 69
15740: ST_TO_ADDR
// for i in tmp do
15741: LD_ADDR_VAR 0 1
15745: PUSH
15746: LD_VAR 0 2
15750: PUSH
15751: FOR_IN
15752: IFFALSE 15779
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15754: LD_VAR 0 1
15758: PPUSH
15759: LD_INT 1
15761: PPUSH
15762: LD_INT 4
15764: PPUSH
15765: CALL_OW 12
15769: PPUSH
15770: LD_INT 500
15772: PPUSH
15773: CALL_OW 492
// end ;
15777: GO 15751
15779: POP
15780: POP
// end ; end_of_file
15781: PPOPN 2
15783: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15784: GO 15786
15786: DISABLE
15787: LD_INT 0
15789: PPUSH
// begin enemyWayX = [ ] ;
15790: LD_ADDR_EXP 50
15794: PUSH
15795: EMPTY
15796: ST_TO_ADDR
// enemyWayY = [ ] ;
15797: LD_ADDR_EXP 51
15801: PUSH
15802: EMPTY
15803: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15804: LD_ADDR_VAR 0 1
15808: PUSH
15809: LD_INT 1
15811: PPUSH
15812: LD_INT 3
15814: PPUSH
15815: CALL_OW 12
15819: ST_TO_ADDR
// if rnd = 1 then
15820: LD_VAR 0 1
15824: PUSH
15825: LD_INT 1
15827: EQUAL
15828: IFFALSE 15868
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15830: LD_ADDR_EXP 50
15834: PUSH
15835: LD_INT 73
15837: PUSH
15838: LD_INT 46
15840: PUSH
15841: LD_INT 29
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15849: LD_ADDR_EXP 51
15853: PUSH
15854: LD_INT 71
15856: PUSH
15857: LD_INT 43
15859: PUSH
15860: LD_INT 29
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: LIST
15867: ST_TO_ADDR
// end ; if rnd = 2 then
15868: LD_VAR 0 1
15872: PUSH
15873: LD_INT 2
15875: EQUAL
15876: IFFALSE 15900
// begin enemyWayX = [ 64 ] ;
15878: LD_ADDR_EXP 50
15882: PUSH
15883: LD_INT 64
15885: PUSH
15886: EMPTY
15887: LIST
15888: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15889: LD_ADDR_EXP 51
15893: PUSH
15894: LD_INT 43
15896: PUSH
15897: EMPTY
15898: LIST
15899: ST_TO_ADDR
// end ; if rnd = 3 then
15900: LD_VAR 0 1
15904: PUSH
15905: LD_INT 3
15907: EQUAL
15908: IFFALSE 15932
// begin enemyWayX = [ 80 ] ;
15910: LD_ADDR_EXP 50
15914: PUSH
15915: LD_INT 80
15917: PUSH
15918: EMPTY
15919: LIST
15920: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15921: LD_ADDR_EXP 51
15925: PUSH
15926: LD_INT 28
15928: PUSH
15929: EMPTY
15930: LIST
15931: ST_TO_ADDR
// end ; enable ;
15932: ENABLE
// end ;
15933: PPOPN 1
15935: END
// every 0 0$1 trigger AIEnable = 1 do
15936: LD_EXP 37
15940: PUSH
15941: LD_INT 1
15943: EQUAL
15944: IFFALSE 16058
15946: GO 15948
15948: DISABLE
// begin enable ;
15949: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15950: LD_INT 3
15952: PPUSH
15953: LD_INT 21
15955: PPUSH
15956: LD_INT 7
15958: PPUSH
15959: CALL 6029 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15963: LD_INT 3
15965: PPUSH
15966: LD_INT 8
15968: PPUSH
15969: LD_INT 7
15971: PPUSH
15972: LD_INT 1
15974: PPUSH
15975: CALL 6350 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15979: LD_INT 3
15981: PPUSH
15982: LD_INT 17
15984: PPUSH
15985: LD_INT 108
15987: PPUSH
15988: LD_INT 95
15990: PPUSH
15991: CALL 7674 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15995: LD_INT 3
15997: PPUSH
15998: LD_INT 23
16000: PPUSH
16001: LD_EXP 50
16005: PPUSH
16006: LD_EXP 51
16010: PPUSH
16011: CALL 7006 0 4
// if baseReadyToBuild = 2 then
16015: LD_EXP 20
16019: PUSH
16020: LD_INT 2
16022: EQUAL
16023: IFFALSE 16058
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
16025: LD_INT 6
16027: PPUSH
16028: LD_EXP 21
16032: PPUSH
16033: LD_INT 6
16035: PPUSH
16036: CALL 6029 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
16040: LD_INT 6
16042: PPUSH
16043: LD_INT 9
16045: PPUSH
16046: LD_INT 6
16048: PPUSH
16049: LD_EXP 22
16053: PPUSH
16054: CALL 6350 0 4
// end ; end ;
16058: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
16059: LD_EXP 15
16063: PPUSH
16064: CALL_OW 310
16068: NOT
16069: PUSH
16070: LD_INT 21
16072: PPUSH
16073: CALL_OW 302
16077: AND
16078: PUSH
16079: LD_INT 21
16081: PPUSH
16082: CALL_OW 255
16086: PUSH
16087: LD_INT 3
16089: EQUAL
16090: AND
16091: IFFALSE 16109
16093: GO 16095
16095: DISABLE
// begin enable ;
16096: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
16097: LD_EXP 15
16101: PPUSH
16102: LD_INT 21
16104: PPUSH
16105: CALL_OW 120
// end ;
16109: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
16110: LD_INT 22
16112: PUSH
16113: LD_INT 3
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 21
16122: PUSH
16123: LD_INT 2
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 55
16132: PUSH
16133: EMPTY
16134: LIST
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: LIST
16140: PPUSH
16141: CALL_OW 69
16145: PUSH
16146: LD_INT 0
16148: EQUAL
16149: PUSH
16150: LD_INT 1
16152: PPUSH
16153: CALL_OW 255
16157: PUSH
16158: LD_INT 3
16160: EQUAL
16161: AND
16162: PUSH
16163: LD_INT 21
16165: PPUSH
16166: CALL_OW 302
16170: AND
16171: PUSH
16172: LD_INT 21
16174: PPUSH
16175: CALL_OW 255
16179: PUSH
16180: LD_INT 3
16182: EQUAL
16183: AND
16184: PUSH
16185: LD_INT 21
16187: PPUSH
16188: CALL_OW 302
16192: AND
16193: IFFALSE 16405
16195: GO 16197
16197: DISABLE
// begin enable ;
16198: ENABLE
// if Difficulty = 1 then
16199: LD_OWVAR 67
16203: PUSH
16204: LD_INT 1
16206: EQUAL
16207: IFFALSE 16251
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
16209: LD_INT 3
16211: PPUSH
16212: LD_INT 24
16214: PPUSH
16215: LD_OWVAR 67
16219: PUSH
16220: LD_INT 2
16222: PLUS
16223: PPUSH
16224: LD_INT 42
16226: PUSH
16227: LD_INT 44
16229: PUSH
16230: LD_INT 43
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: LIST
16237: PPUSH
16238: LD_INT 1
16240: PPUSH
16241: LD_INT 1
16243: PPUSH
16244: LD_INT 21
16246: PPUSH
16247: CALL 6894 0 7
// if Difficulty = 2 then
16251: LD_OWVAR 67
16255: PUSH
16256: LD_INT 2
16258: EQUAL
16259: IFFALSE 16326
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
16261: LD_INT 3
16263: PPUSH
16264: LD_INT 24
16266: PPUSH
16267: LD_OWVAR 67
16271: PUSH
16272: LD_INT 2
16274: PLUS
16275: PPUSH
16276: LD_INT 44
16278: PUSH
16279: LD_INT 44
16281: PUSH
16282: LD_INT 43
16284: PUSH
16285: LD_INT 43
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: PPUSH
16294: LD_INT 1
16296: PPUSH
16297: LD_INT 1
16299: PPUSH
16300: LD_INT 21
16302: PUSH
16303: LD_INT 22
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 1
16312: PPUSH
16313: LD_INT 2
16315: PPUSH
16316: CALL_OW 12
16320: ARRAY
16321: PPUSH
16322: CALL 6894 0 7
// if Difficulty = 3 then
16326: LD_OWVAR 67
16330: PUSH
16331: LD_INT 3
16333: EQUAL
16334: IFFALSE 16405
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
16336: LD_INT 3
16338: PPUSH
16339: LD_INT 24
16341: PPUSH
16342: LD_OWVAR 67
16346: PUSH
16347: LD_INT 2
16349: PPUSH
16350: LD_INT 3
16352: PPUSH
16353: CALL_OW 12
16357: PLUS
16358: PPUSH
16359: LD_INT 44
16361: PUSH
16362: LD_INT 44
16364: PUSH
16365: LD_INT 43
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: LIST
16372: PPUSH
16373: LD_INT 1
16375: PPUSH
16376: LD_INT 1
16378: PPUSH
16379: LD_INT 22
16381: PUSH
16382: LD_INT 23
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 1
16391: PPUSH
16392: LD_INT 2
16394: PPUSH
16395: CALL_OW 12
16399: ARRAY
16400: PPUSH
16401: CALL 6894 0 7
// end ;
16405: END
// every 0 0$1 do
16406: GO 16408
16408: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
16409: LD_INT 3
16411: PPUSH
16412: LD_INT 1
16414: PPUSH
16415: LD_INT 3
16417: PPUSH
16418: CALL 5944 0 3
16422: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
16423: LD_EXP 20
16427: PUSH
16428: LD_INT 1
16430: EQUAL
16431: IFFALSE 16578
16433: GO 16435
16435: DISABLE
16436: LD_INT 0
16438: PPUSH
16439: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16440: LD_ADDR_VAR 0 2
16444: PUSH
16445: LD_INT 22
16447: PUSH
16448: LD_INT 6
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 21
16457: PUSH
16458: LD_INT 2
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 34
16467: PUSH
16468: LD_INT 51
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: LIST
16479: PPUSH
16480: CALL_OW 69
16484: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16485: LD_VAR 0 2
16489: PUSH
16490: LD_INT 1
16492: ARRAY
16493: PPUSH
16494: LD_EXP 21
16498: PPUSH
16499: CALL_OW 250
16503: PUSH
16504: LD_INT 5
16506: MINUS
16507: PPUSH
16508: LD_EXP 21
16512: PPUSH
16513: CALL_OW 251
16517: PUSH
16518: LD_INT 5
16520: MINUS
16521: PPUSH
16522: CALL_OW 111
// wait ( 0 0$5 ) ;
16526: LD_INT 175
16528: PPUSH
16529: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16533: LD_VAR 0 2
16537: PUSH
16538: LD_INT 1
16540: ARRAY
16541: PPUSH
16542: LD_INT 41
16544: PPUSH
16545: LD_INT 52
16547: PPUSH
16548: CALL_OW 177
// wait ( 0 0$40 ) ;
16552: LD_INT 1400
16554: PPUSH
16555: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16559: LD_VAR 0 2
16563: PUSH
16564: LD_INT 1
16566: ARRAY
16567: PPUSH
16568: LD_INT 41
16570: PPUSH
16571: LD_INT 44
16573: PPUSH
16574: CALL_OW 111
// end ;
16578: PPOPN 2
16580: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16581: LD_EXP 21
16585: PPUSH
16586: CALL_OW 274
16590: PPUSH
16591: LD_INT 1
16593: PPUSH
16594: CALL_OW 275
16598: PUSH
16599: LD_INT 100
16601: GREATEREQUAL
16602: IFFALSE 16830
16604: GO 16606
16606: DISABLE
16607: LD_INT 0
16609: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16610: LD_ADDR_VAR 0 1
16614: PUSH
16615: LD_INT 22
16617: PUSH
16618: LD_INT 6
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 21
16627: PUSH
16628: LD_INT 1
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 25
16637: PUSH
16638: LD_INT 2
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: LIST
16649: PPUSH
16650: CALL_OW 69
16654: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16655: LD_VAR 0 1
16659: PUSH
16660: LD_INT 1
16662: ARRAY
16663: PPUSH
16664: LD_INT 4
16666: PPUSH
16667: LD_INT 39
16669: PPUSH
16670: LD_INT 37
16672: PPUSH
16673: LD_INT 3
16675: PPUSH
16676: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16680: LD_VAR 0 1
16684: PUSH
16685: LD_INT 1
16687: ARRAY
16688: PPUSH
16689: LD_INT 29
16691: PPUSH
16692: LD_INT 42
16694: PPUSH
16695: LD_INT 54
16697: PPUSH
16698: LD_INT 3
16700: PPUSH
16701: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16705: LD_VAR 0 1
16709: PUSH
16710: LD_INT 1
16712: ARRAY
16713: PPUSH
16714: LD_INT 6
16716: PPUSH
16717: LD_INT 38
16719: PPUSH
16720: LD_INT 48
16722: PPUSH
16723: LD_INT 0
16725: PPUSH
16726: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16730: LD_VAR 0 1
16734: PUSH
16735: LD_INT 1
16737: ARRAY
16738: PPUSH
16739: LD_INT 2
16741: PPUSH
16742: LD_INT 32
16744: PPUSH
16745: LD_INT 38
16747: PPUSH
16748: LD_INT 2
16750: PPUSH
16751: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16755: LD_VAR 0 1
16759: PUSH
16760: LD_INT 1
16762: ARRAY
16763: PPUSH
16764: LD_INT 26
16766: PPUSH
16767: LD_INT 39
16769: PPUSH
16770: LD_INT 55
16772: PPUSH
16773: LD_INT 3
16775: PPUSH
16776: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16780: LD_VAR 0 1
16784: PUSH
16785: LD_INT 1
16787: ARRAY
16788: PPUSH
16789: LD_INT 32
16791: PPUSH
16792: LD_INT 31
16794: PPUSH
16795: LD_INT 31
16797: PPUSH
16798: LD_INT 3
16800: PPUSH
16801: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16805: LD_VAR 0 1
16809: PUSH
16810: LD_INT 1
16812: ARRAY
16813: PPUSH
16814: LD_INT 31
16816: PPUSH
16817: LD_INT 50
16819: PPUSH
16820: LD_INT 51
16822: PPUSH
16823: LD_INT 4
16825: PPUSH
16826: CALL_OW 205
// end ;
16830: PPOPN 1
16832: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
16833: LD_EXP 46
16837: IFFALSE 17394
16839: GO 16841
16841: DISABLE
16842: LD_INT 0
16844: PPUSH
16845: PPUSH
16846: PPUSH
// begin enable ;
16847: ENABLE
// if not ruMobile then
16848: LD_EXP 46
16852: NOT
16853: IFFALSE 16857
// exit ;
16855: GO 17394
// for i in ruMobile do
16857: LD_ADDR_VAR 0 1
16861: PUSH
16862: LD_EXP 46
16866: PUSH
16867: FOR_IN
16868: IFFALSE 17392
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
16870: LD_VAR 0 1
16874: PPUSH
16875: CALL_OW 302
16879: NOT
16880: PUSH
16881: LD_VAR 0 1
16885: PPUSH
16886: CALL_OW 255
16890: PUSH
16891: LD_INT 3
16893: NONEQUAL
16894: OR
16895: IFFALSE 16915
// begin ruMobile := ruMobile diff i ;
16897: LD_ADDR_EXP 46
16901: PUSH
16902: LD_EXP 46
16906: PUSH
16907: LD_VAR 0 1
16911: DIFF
16912: ST_TO_ADDR
// continue ;
16913: GO 16867
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
16915: LD_VAR 0 1
16919: PPUSH
16920: CALL_OW 110
16924: NOT
16925: PUSH
16926: LD_VAR 0 1
16930: PPUSH
16931: CALL_OW 110
16935: PUSH
16936: LD_INT 0
16938: EQUAL
16939: OR
16940: IFFALSE 17055
// begin if GetFuel ( i ) < 50 then
16942: LD_VAR 0 1
16946: PPUSH
16947: CALL_OW 261
16951: PUSH
16952: LD_INT 50
16954: LESS
16955: IFFALSE 17014
// begin ComMoveXY ( i , 106 , 88 ) ;
16957: LD_VAR 0 1
16961: PPUSH
16962: LD_INT 106
16964: PPUSH
16965: LD_INT 88
16967: PPUSH
16968: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16972: LD_INT 35
16974: PPUSH
16975: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
16979: LD_VAR 0 1
16983: PPUSH
16984: LD_INT 106
16986: PPUSH
16987: LD_INT 88
16989: PPUSH
16990: CALL_OW 297
16994: PUSH
16995: LD_INT 4
16997: LESS
16998: IFFALSE 16972
// SetFuel ( i , 100 ) ;
17000: LD_VAR 0 1
17004: PPUSH
17005: LD_INT 100
17007: PPUSH
17008: CALL_OW 240
// end else
17012: GO 17055
// if not IsInArea ( i , ruParking ) then
17014: LD_VAR 0 1
17018: PPUSH
17019: LD_INT 25
17021: PPUSH
17022: CALL_OW 308
17026: NOT
17027: IFFALSE 17043
// ComMoveToArea ( i , ruParking ) else
17029: LD_VAR 0 1
17033: PPUSH
17034: LD_INT 25
17036: PPUSH
17037: CALL_OW 113
17041: GO 17055
// SetTag ( i , 1 ) ;
17043: LD_VAR 0 1
17047: PPUSH
17048: LD_INT 1
17050: PPUSH
17051: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
17055: LD_VAR 0 1
17059: PPUSH
17060: CALL_OW 110
17064: PUSH
17065: LD_INT 1
17067: EQUAL
17068: IFFALSE 17198
// begin if GetLives ( i ) < 1000 then
17070: LD_VAR 0 1
17074: PPUSH
17075: CALL_OW 256
17079: PUSH
17080: LD_INT 1000
17082: LESS
17083: IFFALSE 17175
// begin if not IsDrivenBy ( i ) then
17085: LD_VAR 0 1
17089: PPUSH
17090: CALL_OW 311
17094: NOT
17095: IFFALSE 17099
// continue ;
17097: GO 16867
// mech := IsDrivenBy ( i ) ;
17099: LD_ADDR_VAR 0 2
17103: PUSH
17104: LD_VAR 0 1
17108: PPUSH
17109: CALL_OW 311
17113: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
17114: LD_VAR 0 2
17118: PPUSH
17119: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
17123: LD_VAR 0 2
17127: PPUSH
17128: LD_VAR 0 1
17132: PPUSH
17133: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
17137: LD_INT 35
17139: PPUSH
17140: CALL_OW 67
// until GetLives ( i ) = 1000 ;
17144: LD_VAR 0 1
17148: PPUSH
17149: CALL_OW 256
17153: PUSH
17154: LD_INT 1000
17156: EQUAL
17157: IFFALSE 17137
// ComEnterUnit ( mech , i ) ;
17159: LD_VAR 0 2
17163: PPUSH
17164: LD_VAR 0 1
17168: PPUSH
17169: CALL_OW 120
// end else
17173: GO 17198
// if IsDrivenBy ( i ) then
17175: LD_VAR 0 1
17179: PPUSH
17180: CALL_OW 311
17184: IFFALSE 17198
// SetTag ( i , 2 ) ;
17186: LD_VAR 0 1
17190: PPUSH
17191: LD_INT 2
17193: PPUSH
17194: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
17198: LD_VAR 0 1
17202: PPUSH
17203: CALL_OW 110
17207: PUSH
17208: LD_INT 2
17210: EQUAL
17211: IFFALSE 17390
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
17213: LD_ADDR_VAR 0 3
17217: PUSH
17218: LD_INT 24
17220: PPUSH
17221: LD_INT 81
17223: PUSH
17224: LD_INT 3
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PPUSH
17231: CALL_OW 70
17235: ST_TO_ADDR
// if GetLives ( i ) < 650 then
17236: LD_VAR 0 1
17240: PPUSH
17241: CALL_OW 256
17245: PUSH
17246: LD_INT 650
17248: LESS
17249: IFFALSE 17274
// begin ComStop ( i ) ;
17251: LD_VAR 0 1
17255: PPUSH
17256: CALL_OW 141
// SetTag ( i , 0 ) ;
17260: LD_VAR 0 1
17264: PPUSH
17265: LD_INT 0
17267: PPUSH
17268: CALL_OW 109
// continue ;
17272: GO 16867
// end ; if enemy then
17274: LD_VAR 0 3
17278: IFFALSE 17318
// begin if not HasTask ( i ) then
17280: LD_VAR 0 1
17284: PPUSH
17285: CALL_OW 314
17289: NOT
17290: IFFALSE 17316
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17292: LD_VAR 0 1
17296: PPUSH
17297: LD_VAR 0 3
17301: PPUSH
17302: LD_VAR 0 1
17306: PPUSH
17307: CALL_OW 74
17311: PPUSH
17312: CALL_OW 115
// end else
17316: GO 17390
// if ruMobile > 2 then
17318: LD_EXP 46
17322: PUSH
17323: LD_INT 2
17325: GREATER
17326: IFFALSE 17390
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17328: LD_ADDR_VAR 0 3
17332: PUSH
17333: LD_INT 81
17335: PUSH
17336: LD_INT 3
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PPUSH
17343: CALL_OW 69
17347: ST_TO_ADDR
// if enemy then
17348: LD_VAR 0 3
17352: IFFALSE 17390
// if not HasTask ( i ) then
17354: LD_VAR 0 1
17358: PPUSH
17359: CALL_OW 314
17363: NOT
17364: IFFALSE 17390
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17366: LD_VAR 0 1
17370: PPUSH
17371: LD_VAR 0 3
17375: PPUSH
17376: LD_VAR 0 1
17380: PPUSH
17381: CALL_OW 74
17385: PPUSH
17386: CALL_OW 115
// end ; end ; end ;
17390: GO 16867
17392: POP
17393: POP
// end ; end_of_file
17394: PPOPN 3
17396: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
17397: LD_INT 0
17399: PPUSH
17400: PPUSH
17401: PPUSH
17402: PPUSH
17403: PPUSH
17404: PPUSH
17405: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
17406: LD_ADDR_VAR 0 3
17410: PUSH
17411: LD_INT 22
17413: PUSH
17414: LD_INT 6
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 21
17423: PUSH
17424: LD_INT 1
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 25
17433: PUSH
17434: LD_INT 1
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 3
17443: PUSH
17444: LD_INT 54
17446: PUSH
17447: EMPTY
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: PPUSH
17460: CALL_OW 69
17464: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
17465: LD_ADDR_VAR 0 7
17469: PUSH
17470: LD_INT 22
17472: PUSH
17473: LD_INT 6
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 21
17482: PUSH
17483: LD_INT 1
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 25
17492: PUSH
17493: LD_INT 1
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 54
17502: PUSH
17503: EMPTY
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: PPUSH
17512: CALL_OW 69
17516: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
17517: LD_ADDR_VAR 0 4
17521: PUSH
17522: LD_INT 22
17524: PUSH
17525: LD_INT 6
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 21
17534: PUSH
17535: LD_INT 1
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 25
17544: PUSH
17545: LD_INT 2
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: PPUSH
17557: CALL_OW 69
17561: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
17562: LD_ADDR_VAR 0 6
17566: PUSH
17567: LD_INT 22
17569: PUSH
17570: LD_INT 6
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 21
17579: PUSH
17580: LD_INT 1
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 25
17589: PUSH
17590: LD_INT 4
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: LIST
17601: PPUSH
17602: CALL_OW 69
17606: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
17607: LD_ADDR_VAR 0 8
17611: PUSH
17612: LD_INT 22
17614: PUSH
17615: LD_INT 6
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 21
17624: PUSH
17625: LD_INT 2
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 34
17634: PUSH
17635: LD_INT 51
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: LIST
17646: PPUSH
17647: CALL_OW 69
17651: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
17652: LD_VAR 0 1
17656: PPUSH
17657: CALL_OW 255
17661: PUSH
17662: LD_INT 6
17664: EQUAL
17665: PUSH
17666: LD_VAR 0 1
17670: PPUSH
17671: CALL_OW 266
17675: PUSH
17676: LD_INT 0
17678: EQUAL
17679: AND
17680: IFFALSE 17700
// begin ruPDepot = building ;
17682: LD_ADDR_EXP 21
17686: PUSH
17687: LD_VAR 0 1
17691: ST_TO_ADDR
// baseReadyToBuild = 1 ;
17692: LD_ADDR_EXP 20
17696: PUSH
17697: LD_INT 1
17699: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
17700: LD_VAR 0 1
17704: PPUSH
17705: CALL_OW 266
17709: PUSH
17710: LD_INT 4
17712: EQUAL
17713: PUSH
17714: LD_VAR 0 1
17718: PPUSH
17719: CALL_OW 255
17723: PUSH
17724: LD_INT 6
17726: EQUAL
17727: AND
17728: IFFALSE 17761
// for i in tmpSold do
17730: LD_ADDR_VAR 0 2
17734: PUSH
17735: LD_VAR 0 3
17739: PUSH
17740: FOR_IN
17741: IFFALSE 17759
// ComEnterUnit ( i , building ) ;
17743: LD_VAR 0 2
17747: PPUSH
17748: LD_VAR 0 1
17752: PPUSH
17753: CALL_OW 120
17757: GO 17740
17759: POP
17760: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
17761: LD_VAR 0 1
17765: PPUSH
17766: CALL_OW 266
17770: PUSH
17771: LD_INT 6
17773: EQUAL
17774: PUSH
17775: LD_VAR 0 1
17779: PPUSH
17780: CALL_OW 255
17784: PUSH
17785: LD_INT 6
17787: EQUAL
17788: AND
17789: IFFALSE 17847
// begin for i in tmpSci do
17791: LD_ADDR_VAR 0 2
17795: PUSH
17796: LD_VAR 0 6
17800: PUSH
17801: FOR_IN
17802: IFFALSE 17820
// ComEnterUnit ( i , building ) ;
17804: LD_VAR 0 2
17808: PPUSH
17809: LD_VAR 0 1
17813: PPUSH
17814: CALL_OW 120
17818: GO 17801
17820: POP
17821: POP
// ResAllTechs ( 6 , building , 3 ) ;
17822: LD_INT 6
17824: PPUSH
17825: LD_VAR 0 1
17829: PPUSH
17830: LD_INT 3
17832: PPUSH
17833: CALL 5944 0 3
// ruPLab = building ;
17837: LD_ADDR_EXP 22
17841: PUSH
17842: LD_VAR 0 1
17846: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
17847: LD_VAR 0 1
17851: PPUSH
17852: CALL_OW 266
17856: PUSH
17857: LD_INT 2
17859: EQUAL
17860: PUSH
17861: LD_VAR 0 1
17865: PPUSH
17866: CALL_OW 255
17870: PUSH
17871: LD_INT 6
17873: EQUAL
17874: AND
17875: IFFALSE 17926
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
17877: LD_ADDR_VAR 0 5
17881: PUSH
17882: LD_VAR 0 8
17886: PUSH
17887: LD_INT 1
17889: ARRAY
17890: PPUSH
17891: CALL_OW 313
17895: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
17896: LD_VAR 0 5
17900: PPUSH
17901: CALL_OW 121
// wait ( 0 0$1 ) ;
17905: LD_INT 35
17907: PPUSH
17908: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
17912: LD_VAR 0 5
17916: PPUSH
17917: LD_VAR 0 1
17921: PPUSH
17922: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
17926: LD_VAR 0 1
17930: PPUSH
17931: CALL_OW 266
17935: PUSH
17936: LD_INT 32
17938: EQUAL
17939: PUSH
17940: LD_VAR 0 1
17944: PPUSH
17945: CALL_OW 255
17949: PUSH
17950: LD_INT 6
17952: EQUAL
17953: AND
17954: IFFALSE 18006
// begin ComPlaceWeapon ( building , 42 ) ;
17956: LD_VAR 0 1
17960: PPUSH
17961: LD_INT 42
17963: PPUSH
17964: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
17968: LD_VAR 0 7
17972: PUSH
17973: LD_INT 1
17975: ARRAY
17976: PPUSH
17977: CALL_OW 122
// wait ( 0 0$1 ) ;
17981: LD_INT 35
17983: PPUSH
17984: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
17988: LD_VAR 0 7
17992: PUSH
17993: LD_INT 1
17995: ARRAY
17996: PPUSH
17997: LD_VAR 0 1
18001: PPUSH
18002: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
18006: LD_VAR 0 1
18010: PPUSH
18011: CALL_OW 266
18015: PUSH
18016: LD_INT 31
18018: EQUAL
18019: PUSH
18020: LD_VAR 0 1
18024: PPUSH
18025: CALL_OW 255
18029: PUSH
18030: LD_INT 6
18032: EQUAL
18033: AND
18034: IFFALSE 18100
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
18036: LD_VAR 0 7
18040: PUSH
18041: LD_INT 2
18043: ARRAY
18044: PPUSH
18045: CALL_OW 122
// wait ( 0 0$1 ) ;
18049: LD_INT 35
18051: PPUSH
18052: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
18056: LD_VAR 0 7
18060: PUSH
18061: LD_INT 2
18063: ARRAY
18064: PPUSH
18065: LD_VAR 0 1
18069: PPUSH
18070: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
18074: LD_VAR 0 4
18078: PUSH
18079: LD_INT 1
18081: ARRAY
18082: PPUSH
18083: LD_EXP 21
18087: PPUSH
18088: CALL_OW 120
// baseReadyToBuild = 2 ;
18092: LD_ADDR_EXP 20
18096: PUSH
18097: LD_INT 2
18099: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
18100: LD_VAR 0 1
18104: PPUSH
18105: CALL_OW 266
18109: PUSH
18110: LD_INT 32
18112: EQUAL
18113: PUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 255
18123: PUSH
18124: LD_INT 1
18126: EQUAL
18127: AND
18128: PUSH
18129: LD_EXP 32
18133: PUSH
18134: LD_INT 0
18136: EQUAL
18137: AND
18138: IFFALSE 18383
// begin bunkerDialog = 1 ;
18140: LD_ADDR_EXP 32
18144: PUSH
18145: LD_INT 1
18147: ST_TO_ADDR
// if IsOK ( Claptopn ) then
18148: LD_EXP 11
18152: PPUSH
18153: CALL_OW 302
18157: IFFALSE 18173
// begin Say ( Claptopn , D11-Eng1-1 ) ;
18159: LD_EXP 11
18163: PPUSH
18164: LD_STRING D11-Eng1-1
18166: PPUSH
18167: CALL_OW 88
// end else
18171: GO 18369
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18173: LD_INT 22
18175: PUSH
18176: LD_INT 1
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 21
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 25
18195: PUSH
18196: LD_INT 3
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 26
18205: PUSH
18206: LD_INT 1
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: PPUSH
18219: CALL_OW 69
18223: PUSH
18224: LD_EXP 1
18228: PUSH
18229: EMPTY
18230: LIST
18231: PUSH
18232: LD_INT 0
18234: GREATER
18235: DIFF
18236: IFFALSE 18310
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18238: LD_INT 22
18240: PUSH
18241: LD_INT 1
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 21
18250: PUSH
18251: LD_INT 1
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 25
18260: PUSH
18261: LD_INT 2
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 26
18270: PUSH
18271: LD_INT 1
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: PPUSH
18284: CALL_OW 69
18288: PUSH
18289: LD_EXP 1
18293: PUSH
18294: EMPTY
18295: LIST
18296: DIFF
18297: PPUSH
18298: LD_STRING D11-Eng1-1
18300: PPUSH
18301: LD_STRING D11-Eng1-1
18303: PPUSH
18304: CALL 4593 0 3
// end else
18308: GO 18369
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18310: LD_INT 22
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 21
18322: PUSH
18323: LD_INT 1
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 26
18332: PUSH
18333: LD_INT 1
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: LIST
18344: PPUSH
18345: CALL_OW 69
18349: PUSH
18350: LD_EXP 1
18354: PUSH
18355: EMPTY
18356: LIST
18357: DIFF
18358: PPUSH
18359: LD_STRING D11-Eng1-1
18361: PPUSH
18362: LD_STRING D11-Eng1-1
18364: PPUSH
18365: CALL 4593 0 3
// end ; end ; if energyVDialog = 0 then
18369: LD_EXP 33
18373: PUSH
18374: LD_INT 0
18376: EQUAL
18377: IFFALSE 18383
// EnergyDialog ;
18379: CALL 4996 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
18383: LD_VAR 0 1
18387: PPUSH
18388: CALL_OW 266
18392: PUSH
18393: LD_INT 29
18395: EQUAL
18396: PUSH
18397: LD_VAR 0 1
18401: PPUSH
18402: CALL_OW 255
18406: PUSH
18407: LD_INT 1
18409: EQUAL
18410: AND
18411: IFFALSE 18421
// buildOil = 1 ;
18413: LD_ADDR_EXP 34
18417: PUSH
18418: LD_INT 1
18420: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
18421: LD_VAR 0 1
18425: PPUSH
18426: CALL_OW 266
18430: PUSH
18431: LD_INT 26
18433: EQUAL
18434: PUSH
18435: LD_VAR 0 1
18439: PPUSH
18440: CALL_OW 255
18444: PUSH
18445: LD_INT 1
18447: EQUAL
18448: AND
18449: IFFALSE 18459
// buildPower = 1 ;
18451: LD_ADDR_EXP 35
18455: PUSH
18456: LD_INT 1
18458: ST_TO_ADDR
// end ;
18459: PPOPN 8
18461: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
18462: LD_VAR 0 1
18466: PPUSH
18467: CALL_OW 266
18471: PUSH
18472: LD_INT 3
18474: EQUAL
18475: PUSH
18476: LD_VAR 0 1
18480: PPUSH
18481: CALL_OW 255
18485: PUSH
18486: LD_INT 1
18488: EQUAL
18489: AND
18490: PUSH
18491: LD_EXP 31
18495: PUSH
18496: LD_INT 0
18498: EQUAL
18499: AND
18500: IFFALSE 18848
// begin factoryDialog = 1 ;
18502: LD_ADDR_EXP 31
18506: PUSH
18507: LD_INT 1
18509: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
18510: LD_INT 47
18512: PPUSH
18513: LD_INT 1
18515: PPUSH
18516: CALL_OW 321
18520: PUSH
18521: LD_INT 1
18523: EQUAL
18524: PUSH
18525: LD_INT 45
18527: PPUSH
18528: LD_INT 1
18530: PPUSH
18531: CALL_OW 321
18535: PUSH
18536: LD_INT 1
18538: EQUAL
18539: AND
18540: IFFALSE 18848
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18542: LD_INT 22
18544: PUSH
18545: LD_INT 1
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 21
18554: PUSH
18555: LD_INT 3
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 30
18564: PUSH
18565: LD_INT 3
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 24
18574: PUSH
18575: LD_INT 1000
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: PPUSH
18588: CALL_OW 69
18592: PUSH
18593: LD_INT 1
18595: ARRAY
18596: PPUSH
18597: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
18601: LD_EXP 1
18605: PPUSH
18606: LD_STRING D9a-JMM-1
18608: PPUSH
18609: CALL_OW 88
// if IsOK ( Campell ) then
18613: LD_EXP 12
18617: PPUSH
18618: CALL_OW 302
18622: IFFALSE 18638
// begin Say ( Campell , D9a-Mech1-1 ) ;
18624: LD_EXP 12
18628: PPUSH
18629: LD_STRING D9a-Mech1-1
18631: PPUSH
18632: CALL_OW 88
// end else
18636: GO 18834
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18638: LD_INT 22
18640: PUSH
18641: LD_INT 1
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 21
18650: PUSH
18651: LD_INT 1
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 25
18660: PUSH
18661: LD_INT 3
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 26
18670: PUSH
18671: LD_INT 1
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: PPUSH
18684: CALL_OW 69
18688: PUSH
18689: LD_EXP 1
18693: PUSH
18694: EMPTY
18695: LIST
18696: PUSH
18697: LD_INT 0
18699: GREATER
18700: DIFF
18701: IFFALSE 18775
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18703: LD_INT 22
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 21
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 25
18725: PUSH
18726: LD_INT 3
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 26
18735: PUSH
18736: LD_INT 1
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: PPUSH
18749: CALL_OW 69
18753: PUSH
18754: LD_EXP 1
18758: PUSH
18759: EMPTY
18760: LIST
18761: DIFF
18762: PPUSH
18763: LD_STRING D9a-Mech1-1
18765: PPUSH
18766: LD_STRING D9a-Mech1-1
18768: PPUSH
18769: CALL 4593 0 3
// end else
18773: GO 18834
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18775: LD_INT 22
18777: PUSH
18778: LD_INT 1
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 21
18787: PUSH
18788: LD_INT 1
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 26
18797: PUSH
18798: LD_INT 1
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: LIST
18809: PPUSH
18810: CALL_OW 69
18814: PUSH
18815: LD_EXP 1
18819: PUSH
18820: EMPTY
18821: LIST
18822: DIFF
18823: PPUSH
18824: LD_STRING D9a-Mech1-1
18826: PPUSH
18827: LD_STRING D9a-Mech1-1
18829: PPUSH
18830: CALL 4593 0 3
// end ; end ; if energyVDialog = 0 then
18834: LD_EXP 33
18838: PUSH
18839: LD_INT 0
18841: EQUAL
18842: IFFALSE 18848
// EnergyDialog ;
18844: CALL 4996 0 0
// end ; end ; end ;
18848: PPOPN 1
18850: END
// on UnitDestroyed ( unit ) do var mech ;
18851: LD_INT 0
18853: PPUSH
// begin if unit = JMM then
18854: LD_VAR 0 1
18858: PUSH
18859: LD_EXP 1
18863: EQUAL
18864: IFFALSE 18873
// YouLost ( JMM ) ;
18866: LD_STRING JMM
18868: PPUSH
18869: CALL_OW 104
// if unit in ruMobile then
18873: LD_VAR 0 1
18877: PUSH
18878: LD_EXP 46
18882: IN
18883: IFFALSE 18901
// ruMobile = ruMobile diff ruMobile ;
18885: LD_ADDR_EXP 46
18889: PUSH
18890: LD_EXP 46
18894: PUSH
18895: LD_EXP 46
18899: DIFF
18900: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
18901: LD_VAR 0 1
18905: PPUSH
18906: CALL_OW 247
18910: PUSH
18911: LD_INT 1
18913: EQUAL
18914: PUSH
18915: LD_VAR 0 1
18919: PPUSH
18920: CALL_OW 255
18924: PUSH
18925: LD_INT 1
18927: EQUAL
18928: AND
18929: IFFALSE 18945
// lostCounter = lostCounter + 1 ;
18931: LD_ADDR_EXP 38
18935: PUSH
18936: LD_EXP 38
18940: PUSH
18941: LD_INT 1
18943: PLUS
18944: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
18945: LD_EXP 43
18949: PUSH
18950: LD_INT 24
18952: PPUSH
18953: CALL_OW 313
18957: PUSH
18958: LD_INT 6
18960: LESS
18961: AND
18962: PUSH
18963: LD_VAR 0 1
18967: PPUSH
18968: CALL_OW 257
18972: PUSH
18973: LD_INT 3
18975: EQUAL
18976: AND
18977: PUSH
18978: LD_VAR 0 1
18982: PPUSH
18983: CALL_OW 255
18987: PUSH
18988: LD_INT 3
18990: EQUAL
18991: AND
18992: PUSH
18993: LD_INT 24
18995: PPUSH
18996: CALL_OW 302
19000: AND
19001: PUSH
19002: LD_INT 24
19004: PPUSH
19005: CALL_OW 255
19009: PUSH
19010: LD_INT 3
19012: EQUAL
19013: AND
19014: IFFALSE 19143
// begin ruMech := ruMech - 1 ;
19016: LD_ADDR_EXP 43
19020: PUSH
19021: LD_EXP 43
19025: PUSH
19026: LD_INT 1
19028: MINUS
19029: ST_TO_ADDR
// if ruMech = 0 then
19030: LD_EXP 43
19034: PUSH
19035: LD_INT 0
19037: EQUAL
19038: IFFALSE 19042
// exit ;
19040: GO 19143
// wait ( 0 0$40 ) ;
19042: LD_INT 1400
19044: PPUSH
19045: CALL_OW 67
// uc_side = 3 ;
19049: LD_ADDR_OWVAR 20
19053: PUSH
19054: LD_INT 3
19056: ST_TO_ADDR
// uc_nation = 3 ;
19057: LD_ADDR_OWVAR 21
19061: PUSH
19062: LD_INT 3
19064: ST_TO_ADDR
// hc_gallery :=  ;
19065: LD_ADDR_OWVAR 33
19069: PUSH
19070: LD_STRING 
19072: ST_TO_ADDR
// hc_name :=  ;
19073: LD_ADDR_OWVAR 26
19077: PUSH
19078: LD_STRING 
19080: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
19081: LD_INT 0
19083: PPUSH
19084: LD_EXP 16
19088: PPUSH
19089: LD_EXP 17
19093: PPUSH
19094: CALL_OW 12
19098: PPUSH
19099: CALL_OW 383
// mech := CreateHuman ;
19103: LD_ADDR_VAR 0 2
19107: PUSH
19108: CALL_OW 44
19112: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
19113: LD_VAR 0 2
19117: PPUSH
19118: LD_INT 124
19120: PPUSH
19121: LD_INT 97
19123: PPUSH
19124: LD_INT 0
19126: PPUSH
19127: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
19131: LD_VAR 0 2
19135: PPUSH
19136: LD_INT 24
19138: PPUSH
19139: CALL_OW 120
// end ; end ;
19143: PPOPN 2
19145: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
19146: LD_INT 0
19148: PPUSH
// begin if GetSide ( vehicle ) = 1 then
19149: LD_VAR 0 1
19153: PPUSH
19154: CALL_OW 255
19158: PUSH
19159: LD_INT 1
19161: EQUAL
19162: IFFALSE 19178
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
19164: LD_ADDR_EXP 42
19168: PUSH
19169: LD_EXP 42
19173: PUSH
19174: LD_INT 1
19176: PLUS
19177: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
19178: LD_VAR 0 1
19182: PPUSH
19183: CALL_OW 255
19187: PUSH
19188: LD_INT 3
19190: EQUAL
19191: PUSH
19192: LD_VAR 0 1
19196: PPUSH
19197: CALL_OW 264
19201: PUSH
19202: LD_INT 42
19204: PUSH
19205: LD_INT 43
19207: PUSH
19208: LD_INT 44
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: LIST
19215: IN
19216: AND
19217: IFFALSE 19235
// ruMobile := ruMobile union vehicle ;
19219: LD_ADDR_EXP 46
19223: PUSH
19224: LD_EXP 46
19228: PUSH
19229: LD_VAR 0 1
19233: UNION
19234: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 53 then
19235: LD_VAR 0 1
19239: PPUSH
19240: CALL_OW 264
19244: PUSH
19245: LD_INT 53
19247: EQUAL
19248: IFFALSE 19384
// begin uc_side = 3 ;
19250: LD_ADDR_OWVAR 20
19254: PUSH
19255: LD_INT 3
19257: ST_TO_ADDR
// uc_nation = 3 ;
19258: LD_ADDR_OWVAR 21
19262: PUSH
19263: LD_INT 3
19265: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
19266: LD_INT 0
19268: PPUSH
19269: LD_EXP 17
19273: PPUSH
19274: CALL_OW 383
// driver := CreateHuman ;
19278: LD_ADDR_VAR 0 3
19282: PUSH
19283: CALL_OW 44
19287: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
19288: LD_VAR 0 3
19292: PPUSH
19293: LD_VAR 0 2
19297: PPUSH
19298: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
19302: LD_VAR 0 1
19306: PPUSH
19307: LD_INT 21
19309: PPUSH
19310: CALL 5212 0 2
// repeat wait ( 0 0$1 ) ;
19314: LD_INT 35
19316: PPUSH
19317: CALL_OW 67
// until not HasTask ( vehicle ) ;
19321: LD_VAR 0 1
19325: PPUSH
19326: CALL_OW 314
19330: NOT
19331: IFFALSE 19314
// driver := IsDrivenBy ( vehicle ) ;
19333: LD_ADDR_VAR 0 3
19337: PUSH
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 311
19347: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
19348: LD_VAR 0 3
19352: PPUSH
19353: LD_INT 104
19355: PPUSH
19356: LD_INT 73
19358: PPUSH
19359: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19363: LD_VAR 0 3
19367: PPUSH
19368: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
19372: LD_VAR 0 3
19376: PPUSH
19377: LD_INT 24
19379: PPUSH
19380: CALL_OW 180
// end ; end ;
19384: PPOPN 3
19386: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
19387: LD_INT 0
19389: PPUSH
19390: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
19391: LD_VAR 0 1
19395: PPUSH
19396: CALL_OW 255
19400: PUSH
19401: LD_INT 3
19403: EQUAL
19404: PUSH
19405: LD_VAR 0 1
19409: PPUSH
19410: CALL_OW 247
19414: PUSH
19415: LD_INT 2
19417: EQUAL
19418: AND
19419: IFFALSE 19513
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
19421: LD_VAR 0 1
19425: PPUSH
19426: CALL_OW 264
19430: PUSH
19431: LD_INT 42
19433: EQUAL
19434: PUSH
19435: LD_VAR 0 1
19439: PPUSH
19440: CALL_OW 264
19444: PUSH
19445: LD_INT 43
19447: EQUAL
19448: OR
19449: PUSH
19450: LD_VAR 0 1
19454: PPUSH
19455: CALL_OW 264
19459: PUSH
19460: LD_INT 44
19462: EQUAL
19463: OR
19464: IFFALSE 19513
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
19466: LD_INT 24
19468: PPUSH
19469: LD_VAR 0 1
19473: PPUSH
19474: CALL_OW 265
19478: PPUSH
19479: LD_VAR 0 1
19483: PPUSH
19484: CALL_OW 262
19488: PPUSH
19489: LD_VAR 0 1
19493: PPUSH
19494: CALL_OW 263
19498: PPUSH
19499: LD_VAR 0 1
19503: PPUSH
19504: CALL_OW 264
19508: PPUSH
19509: CALL_OW 185
// end ;
19513: PPOPN 3
19515: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
19516: LD_VAR 0 1
19520: PPUSH
19521: CALL_OW 255
19525: PUSH
19526: LD_INT 3
19528: EQUAL
19529: PUSH
19530: LD_VAR 0 2
19534: PPUSH
19535: CALL_OW 255
19539: PUSH
19540: LD_INT 3
19542: EQUAL
19543: AND
19544: PUSH
19545: LD_INT 24
19547: PPUSH
19548: CALL_OW 302
19552: AND
19553: PUSH
19554: LD_VAR 0 1
19558: PPUSH
19559: CALL_OW 302
19563: NOT
19564: AND
19565: IFFALSE 19579
// ComEnterUnit ( human , rubfact0 ) ;
19567: LD_VAR 0 2
19571: PPUSH
19572: LD_INT 24
19574: PPUSH
19575: CALL_OW 120
// end ;
19579: PPOPN 2
19581: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
19582: LD_VAR 0 1
19586: PUSH
19587: LD_INT 24
19589: EQUAL
19590: PUSH
19591: LD_VAR 0 2
19595: PPUSH
19596: CALL_OW 256
19600: PUSH
19601: LD_INT 1000
19603: LESS
19604: AND
19605: IFFALSE 19619
// SetLives ( un , 1000 ) ;
19607: LD_VAR 0 2
19611: PPUSH
19612: LD_INT 1000
19614: PPUSH
19615: CALL_OW 234
// end ;
19619: PPOPN 2
19621: END
// on Command ( comandid ) do var i , j , tmp ;
19622: LD_INT 0
19624: PPUSH
19625: PPUSH
19626: PPUSH
// begin SOS_Command ( comandid ) ;
19627: LD_VAR 0 1
19631: PPUSH
19632: CALL 35997 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
19636: LD_INT 22
19638: PUSH
19639: LD_INT 4
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PPUSH
19646: CALL_OW 69
19650: NOT
19651: IFFALSE 19655
// exit ;
19653: GO 19820
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
19655: LD_ADDR_VAR 0 2
19659: PUSH
19660: LD_INT 22
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 2
19672: PUSH
19673: LD_INT 21
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 21
19685: PUSH
19686: LD_INT 2
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: LIST
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PPUSH
19702: CALL_OW 69
19706: PUSH
19707: FOR_IN
19708: IFFALSE 19818
// begin if GetTaskList ( i ) > 0 then
19710: LD_VAR 0 2
19714: PPUSH
19715: CALL_OW 437
19719: PUSH
19720: LD_INT 0
19722: GREATER
19723: IFFALSE 19816
// begin for j = 1 to GetTaskList ( i ) do
19725: LD_ADDR_VAR 0 3
19729: PUSH
19730: DOUBLE
19731: LD_INT 1
19733: DEC
19734: ST_TO_ADDR
19735: LD_VAR 0 2
19739: PPUSH
19740: CALL_OW 437
19744: PUSH
19745: FOR_TO
19746: IFFALSE 19814
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
19748: LD_ADDR_VAR 0 4
19752: PUSH
19753: LD_VAR 0 2
19757: PPUSH
19758: CALL_OW 437
19762: PUSH
19763: LD_VAR 0 3
19767: ARRAY
19768: PUSH
19769: LD_INT 4
19771: ARRAY
19772: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
19773: LD_VAR 0 4
19777: PPUSH
19778: CALL_OW 255
19782: PUSH
19783: LD_INT 4
19785: EQUAL
19786: PUSH
19787: LD_VAR 0 4
19791: PPUSH
19792: CALL_OW 255
19796: PUSH
19797: LD_INT 0
19799: EQUAL
19800: OR
19801: IFFALSE 19812
// ComStop ( i ) ;
19803: LD_VAR 0 2
19807: PPUSH
19808: CALL_OW 141
// end ;
19812: GO 19745
19814: POP
19815: POP
// end ; end ;
19816: GO 19707
19818: POP
19819: POP
// end ; end_of_file
19820: PPOPN 4
19822: END
// every 10 10$0 do
19823: GO 19825
19825: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
19826: LD_INT 5
19828: PPUSH
19829: LD_INT 3
19831: PPUSH
19832: LD_INT 2
19834: PUSH
19835: LD_INT 2
19837: PUSH
19838: LD_INT 3
19840: PUSH
19841: LD_INT 4
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: LIST
19848: PUSH
19849: LD_OWVAR 67
19853: ARRAY
19854: PLUS
19855: PPUSH
19856: LD_INT 0
19858: PPUSH
19859: LD_INT 0
19861: PPUSH
19862: LD_INT 0
19864: PPUSH
19865: LD_INT 0
19867: PPUSH
19868: LD_EXP 16
19872: PPUSH
19873: LD_EXP 17
19877: PPUSH
19878: CALL_OW 12
19882: PPUSH
19883: LD_INT 4
19885: PPUSH
19886: LD_INT 14
19888: PPUSH
19889: LD_INT 1
19891: PPUSH
19892: LD_INT 2
19894: PPUSH
19895: CALL 7917 0 12
// end ;
19899: END
// every 20 20$0 do
19900: GO 19902
19902: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
19903: LD_INT 5
19905: PPUSH
19906: LD_INT 3
19908: PPUSH
19909: LD_INT 4
19911: PUSH
19912: LD_INT 2
19914: PUSH
19915: LD_INT 3
19917: PUSH
19918: LD_INT 4
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: LIST
19925: PUSH
19926: LD_OWVAR 67
19930: ARRAY
19931: PLUS
19932: PPUSH
19933: LD_INT 0
19935: PPUSH
19936: LD_INT 0
19938: PPUSH
19939: LD_INT 0
19941: PPUSH
19942: LD_INT 2
19944: PPUSH
19945: LD_EXP 16
19949: PPUSH
19950: LD_EXP 17
19954: PPUSH
19955: CALL_OW 12
19959: PPUSH
19960: LD_INT 4
19962: PPUSH
19963: LD_INT 14
19965: PPUSH
19966: LD_INT 1
19968: PPUSH
19969: LD_INT 1
19971: PPUSH
19972: CALL 7917 0 12
// end ;
19976: END
// every 25 25$0 do
19977: GO 19979
19979: DISABLE
// begin if Difficulty > 1 then
19980: LD_OWVAR 67
19984: PUSH
19985: LD_INT 1
19987: GREATER
19988: IFFALSE 19998
// specAttack := true ;
19990: LD_ADDR_EXP 47
19994: PUSH
19995: LD_INT 1
19997: ST_TO_ADDR
// RespawnAttackVehicle ( RussianAttack , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
19998: LD_INT 4
20000: PPUSH
20001: LD_INT 5
20003: PPUSH
20004: LD_INT 4
20006: PUSH
20007: LD_INT 5
20009: PUSH
20010: LD_INT 6
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: LIST
20017: PUSH
20018: LD_OWVAR 67
20022: ARRAY
20023: PPUSH
20024: LD_EXP 16
20028: PPUSH
20029: LD_EXP 17
20033: PPUSH
20034: CALL_OW 12
20038: PPUSH
20039: LD_INT 3
20041: PPUSH
20042: LD_INT 1
20044: PPUSH
20045: LD_INT 1
20047: PPUSH
20048: LD_INT 42
20050: PUSH
20051: LD_INT 42
20053: PUSH
20054: LD_INT 43
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 42
20064: PUSH
20065: LD_INT 43
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 43
20074: PUSH
20075: LD_INT 43
20077: PUSH
20078: LD_INT 43
20080: PUSH
20081: LD_INT 44
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: LIST
20094: PUSH
20095: LD_OWVAR 67
20099: ARRAY
20100: PPUSH
20101: EMPTY
20102: PPUSH
20103: EMPTY
20104: PPUSH
20105: LD_INT 1
20107: PPUSH
20108: CALL 9673 0 11
// end ;
20112: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
20113: LD_EXP 47
20117: IFFALSE 20480
20119: GO 20121
20121: DISABLE
20122: LD_INT 0
20124: PPUSH
20125: PPUSH
20126: PPUSH
20127: PPUSH
// begin wait ( 0 0$20 ) ;
20128: LD_INT 700
20130: PPUSH
20131: CALL_OW 67
// uc_side := 5 ;
20135: LD_ADDR_OWVAR 20
20139: PUSH
20140: LD_INT 5
20142: ST_TO_ADDR
// uc_nation := 3 ;
20143: LD_ADDR_OWVAR 21
20147: PUSH
20148: LD_INT 3
20150: ST_TO_ADDR
// InitHc ;
20151: CALL_OW 19
// hc_importance := 0 ;
20155: LD_ADDR_OWVAR 32
20159: PUSH
20160: LD_INT 0
20162: ST_TO_ADDR
// tmp := [ ] ;
20163: LD_ADDR_VAR 0 2
20167: PUSH
20168: EMPTY
20169: ST_TO_ADDR
// PrepareHuman ( false , 2 , 6 ) ;
20170: LD_INT 0
20172: PPUSH
20173: LD_INT 2
20175: PPUSH
20176: LD_INT 6
20178: PPUSH
20179: CALL_OW 380
// eng := CreateHuman ;
20183: LD_ADDR_VAR 0 4
20187: PUSH
20188: CALL_OW 44
20192: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
20193: LD_VAR 0 4
20197: PPUSH
20198: LD_INT 78
20200: PPUSH
20201: LD_INT 2
20203: PPUSH
20204: LD_INT 4
20206: PPUSH
20207: LD_INT 0
20209: PPUSH
20210: CALL_OW 50
// for i = 1 to 2 + Difficulty do
20214: LD_ADDR_VAR 0 3
20218: PUSH
20219: DOUBLE
20220: LD_INT 1
20222: DEC
20223: ST_TO_ADDR
20224: LD_INT 2
20226: PUSH
20227: LD_OWVAR 67
20231: PLUS
20232: PUSH
20233: FOR_TO
20234: IFFALSE 20315
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
20236: LD_INT 0
20238: PPUSH
20239: LD_INT 1
20241: PPUSH
20242: LD_INT 4
20244: PUSH
20245: LD_INT 5
20247: PUSH
20248: LD_INT 6
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: LIST
20255: PUSH
20256: LD_OWVAR 67
20260: ARRAY
20261: PPUSH
20262: CALL_OW 380
// un := CreateHuman ;
20266: LD_ADDR_VAR 0 1
20270: PUSH
20271: CALL_OW 44
20275: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
20276: LD_VAR 0 1
20280: PPUSH
20281: LD_INT 78
20283: PPUSH
20284: LD_INT 2
20286: PPUSH
20287: LD_INT 4
20289: PPUSH
20290: LD_INT 0
20292: PPUSH
20293: CALL_OW 50
// tmp := tmp ^ un ;
20297: LD_ADDR_VAR 0 2
20301: PUSH
20302: LD_VAR 0 2
20306: PUSH
20307: LD_VAR 0 1
20311: ADD
20312: ST_TO_ADDR
// end ;
20313: GO 20233
20315: POP
20316: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
20317: LD_VAR 0 2
20321: PPUSH
20322: LD_INT 49
20324: PPUSH
20325: LD_INT 3
20327: PPUSH
20328: CALL_OW 111
// wait ( 0 0$2 ) ;
20332: LD_INT 70
20334: PPUSH
20335: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
20339: LD_VAR 0 4
20343: PPUSH
20344: LD_INT 49
20346: PPUSH
20347: LD_INT 3
20349: PPUSH
20350: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
20354: LD_VAR 0 4
20358: PPUSH
20359: LD_INT 4
20361: PPUSH
20362: CALL_OW 227
// wait ( 0 0$10 ) ;
20366: LD_INT 350
20368: PPUSH
20369: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20373: LD_INT 35
20375: PPUSH
20376: CALL_OW 67
// for i in tmp do
20380: LD_ADDR_VAR 0 3
20384: PUSH
20385: LD_VAR 0 2
20389: PUSH
20390: FOR_IN
20391: IFFALSE 20471
// if not IsOk ( i ) then
20393: LD_VAR 0 3
20397: PPUSH
20398: CALL_OW 302
20402: NOT
20403: IFFALSE 20423
// tmp := tmp diff i else
20405: LD_ADDR_VAR 0 2
20409: PUSH
20410: LD_VAR 0 2
20414: PUSH
20415: LD_VAR 0 3
20419: DIFF
20420: ST_TO_ADDR
20421: GO 20469
// if not HasTask ( i ) then
20423: LD_VAR 0 3
20427: PPUSH
20428: CALL_OW 314
20432: NOT
20433: IFFALSE 20469
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
20435: LD_VAR 0 3
20439: PPUSH
20440: LD_INT 22
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PPUSH
20450: CALL_OW 69
20454: PPUSH
20455: LD_VAR 0 3
20459: PPUSH
20460: CALL_OW 74
20464: PPUSH
20465: CALL_OW 115
20469: GO 20390
20471: POP
20472: POP
// until not tmp ;
20473: LD_VAR 0 2
20477: NOT
20478: IFFALSE 20373
// end ; end_of_file
20480: PPOPN 4
20482: END
// every 0 0$1 trigger startTimer = 1 do
20483: LD_EXP 30
20487: PUSH
20488: LD_INT 1
20490: EQUAL
20491: IFFALSE 20621
20493: GO 20495
20495: DISABLE
// begin enable ;
20496: ENABLE
// if timerStatus = 1 then
20497: LD_EXP 29
20501: PUSH
20502: LD_INT 1
20504: EQUAL
20505: IFFALSE 20538
// begin timeToSupport = timeToSupport - 0 0$01 ;
20507: LD_ADDR_EXP 28
20511: PUSH
20512: LD_EXP 28
20516: PUSH
20517: LD_INT 35
20519: MINUS
20520: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
20521: LD_ADDR_OWVAR 47
20525: PUSH
20526: LD_STRING #Am04-1
20528: PUSH
20529: LD_EXP 28
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: ST_TO_ADDR
// end ; if timerStatus = 2 then
20538: LD_EXP 29
20542: PUSH
20543: LD_INT 2
20545: EQUAL
20546: IFFALSE 20579
// begin timeToSupport = timeToSupport - 0 0$01 ;
20548: LD_ADDR_EXP 28
20552: PUSH
20553: LD_EXP 28
20557: PUSH
20558: LD_INT 35
20560: MINUS
20561: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
20562: LD_ADDR_OWVAR 47
20566: PUSH
20567: LD_STRING #Am04-2
20569: PUSH
20570: LD_EXP 28
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: ST_TO_ADDR
// end ; if timerStatus = 3 then
20579: LD_EXP 29
20583: PUSH
20584: LD_INT 3
20586: EQUAL
20587: IFFALSE 20603
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
20589: LD_ADDR_EXP 27
20593: PUSH
20594: LD_EXP 27
20598: PUSH
20599: LD_INT 35
20601: MINUS
20602: ST_TO_ADDR
// end ; if timerStatus = 4 then
20603: LD_EXP 29
20607: PUSH
20608: LD_INT 4
20610: EQUAL
20611: IFFALSE 20621
// begin display_strings =  ;
20613: LD_ADDR_OWVAR 47
20617: PUSH
20618: LD_STRING 
20620: ST_TO_ADDR
// end ; end ; end_of_file
20621: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
20622: LD_INT 4
20624: PPUSH
20625: CALL_OW 301
20629: IFFALSE 20641
20631: GO 20633
20633: DISABLE
// YouLost ( Base ) ; end_of_file
20634: LD_STRING Base
20636: PPUSH
20637: CALL_OW 104
20641: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , tmp , p ;
20642: LD_EXP 15
20646: PPUSH
20647: CALL_OW 301
20651: PUSH
20652: LD_INT 22
20654: PUSH
20655: LD_INT 3
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 21
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PPUSH
20676: CALL_OW 69
20680: PUSH
20681: LD_INT 14
20683: PUSH
20684: LD_INT 13
20686: PUSH
20687: LD_INT 12
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: LIST
20694: PUSH
20695: LD_OWVAR 67
20699: ARRAY
20700: LESS
20701: AND
20702: IFFALSE 21288
20704: GO 20706
20706: DISABLE
20707: LD_INT 0
20709: PPUSH
20710: PPUSH
20711: PPUSH
// begin AIEnable = 0 ;
20712: LD_ADDR_EXP 37
20716: PUSH
20717: LD_INT 0
20719: ST_TO_ADDR
// escapeAvalaible = 1 ;
20720: LD_ADDR_EXP 40
20724: PUSH
20725: LD_INT 1
20727: ST_TO_ADDR
// Video ( true ) ;
20728: LD_INT 1
20730: PPUSH
20731: CALL 76615 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
20735: LD_INT 3
20737: PPUSH
20738: LD_INT 1
20740: PPUSH
20741: LD_INT 1
20743: PPUSH
20744: LD_INT 0
20746: PPUSH
20747: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
20751: LD_INT 6
20753: PPUSH
20754: LD_INT 1
20756: PPUSH
20757: LD_INT 1
20759: PPUSH
20760: LD_INT 0
20762: PPUSH
20763: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
20767: LD_INT 5
20769: PPUSH
20770: LD_INT 1
20772: PPUSH
20773: LD_INT 1
20775: PPUSH
20776: LD_INT 0
20778: PPUSH
20779: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
20783: LD_INT 3
20785: PPUSH
20786: LD_INT 1
20788: PPUSH
20789: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
20793: LD_INT 97
20795: PPUSH
20796: LD_INT 91
20798: PPUSH
20799: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
20803: LD_INT 22
20805: PUSH
20806: LD_INT 3
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 21
20815: PUSH
20816: LD_INT 1
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PPUSH
20827: CALL_OW 69
20831: PPUSH
20832: CALL_OW 121
// wait ( 0 0$01 ) ;
20836: LD_INT 35
20838: PPUSH
20839: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20843: LD_INT 22
20845: PUSH
20846: LD_INT 3
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 21
20855: PUSH
20856: LD_INT 1
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PPUSH
20867: CALL_OW 69
20871: PPUSH
20872: LD_INT 124
20874: PPUSH
20875: LD_INT 98
20877: PPUSH
20878: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
20882: LD_INT 22
20884: PUSH
20885: LD_INT 5
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 21
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PPUSH
20906: CALL_OW 69
20910: PPUSH
20911: CALL_OW 121
// wait ( 0 0$01 ) ;
20915: LD_INT 35
20917: PPUSH
20918: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20922: LD_INT 22
20924: PUSH
20925: LD_INT 5
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 21
20934: PUSH
20935: LD_INT 1
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PPUSH
20946: CALL_OW 69
20950: PPUSH
20951: LD_INT 124
20953: PPUSH
20954: LD_INT 98
20956: PPUSH
20957: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
20961: LD_INT 22
20963: PUSH
20964: LD_INT 6
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 21
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PPUSH
20985: CALL_OW 69
20989: PPUSH
20990: CALL_OW 121
// wait ( 0 0$01 ) ;
20994: LD_INT 35
20996: PPUSH
20997: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21001: LD_INT 22
21003: PUSH
21004: LD_INT 6
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 21
21013: PUSH
21014: LD_INT 1
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PPUSH
21025: CALL_OW 69
21029: PPUSH
21030: LD_INT 124
21032: PPUSH
21033: LD_INT 98
21035: PPUSH
21036: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
21040: LD_INT 22
21042: PUSH
21043: LD_INT 1
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: LD_INT 21
21052: PUSH
21053: LD_INT 1
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PPUSH
21064: CALL_OW 69
21068: PPUSH
21069: LD_INT 124
21071: PPUSH
21072: LD_INT 96
21074: PPUSH
21075: CALL_OW 114
// wait ( 0 0$1 ) ;
21079: LD_INT 35
21081: PPUSH
21082: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
21086: LD_INT 124
21088: PPUSH
21089: LD_INT 96
21091: PPUSH
21092: CALL_OW 84
// p := 0 0$0 ;
21096: LD_ADDR_VAR 0 3
21100: PUSH
21101: LD_INT 0
21103: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
21104: LD_ADDR_VAR 0 2
21108: PUSH
21109: LD_INT 2
21111: PUSH
21112: LD_INT 22
21114: PUSH
21115: LD_INT 3
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 22
21124: PUSH
21125: LD_INT 6
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 21
21139: PUSH
21140: LD_INT 1
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PPUSH
21151: CALL_OW 69
21155: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21156: LD_INT 35
21158: PPUSH
21159: CALL_OW 67
// p := p + 0 0$1 ;
21163: LD_ADDR_VAR 0 3
21167: PUSH
21168: LD_VAR 0 3
21172: PUSH
21173: LD_INT 35
21175: PLUS
21176: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
21177: LD_VAR 0 2
21181: PPUSH
21182: LD_INT 5
21184: PPUSH
21185: CALL_OW 113
// for i in tmp do
21189: LD_ADDR_VAR 0 1
21193: PUSH
21194: LD_VAR 0 2
21198: PUSH
21199: FOR_IN
21200: IFFALSE 21227
// if IsInArea ( tmp , RussianEscape ) then
21202: LD_VAR 0 2
21206: PPUSH
21207: LD_INT 5
21209: PPUSH
21210: CALL_OW 308
21214: IFFALSE 21225
// RemoveUnit ( i ) ;
21216: LD_VAR 0 1
21220: PPUSH
21221: CALL_OW 64
21225: GO 21199
21227: POP
21228: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
21229: LD_INT 23
21231: PUSH
21232: LD_INT 3
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 21
21241: PUSH
21242: LD_INT 1
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 24
21251: PUSH
21252: LD_INT 250
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: LIST
21263: PPUSH
21264: CALL_OW 69
21268: PUSH
21269: LD_INT 0
21271: EQUAL
21272: PUSH
21273: LD_VAR 0 3
21277: PUSH
21278: LD_INT 245
21280: GREATEREQUAL
21281: OR
21282: IFFALSE 21156
// FinishMission ;
21284: CALL 21291 0 0
// end ;
21288: PPOPN 3
21290: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
21291: LD_INT 0
21293: PPUSH
21294: PPUSH
21295: PPUSH
21296: PPUSH
21297: PPUSH
// if not vehicleProduceCounter then
21298: LD_EXP 42
21302: NOT
21303: IFFALSE 21312
// SetAchievement ( ACH_INFANTRY ) ;
21305: LD_STRING ACH_INFANTRY
21307: PPUSH
21308: CALL_OW 543
// if tick <= 20 20$00 then
21312: LD_OWVAR 1
21316: PUSH
21317: LD_INT 42000
21319: LESSEQUAL
21320: IFFALSE 21336
// begin wait ( 3 ) ;
21322: LD_INT 3
21324: PPUSH
21325: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
21329: LD_STRING ACH_ASPEED_4
21331: PPUSH
21332: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
21336: LD_INT 22
21338: PPUSH
21339: CALL 21980 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
21343: LD_INT 69
21345: PPUSH
21346: LD_INT 1
21348: PPUSH
21349: CALL_OW 321
21353: PPUSH
21354: LD_STRING GatlingInGamma
21356: PPUSH
21357: CALL_OW 39
// m1 := false ;
21361: LD_ADDR_VAR 0 3
21365: PUSH
21366: LD_INT 0
21368: ST_TO_ADDR
// m2 := false ;
21369: LD_ADDR_VAR 0 4
21373: PUSH
21374: LD_INT 0
21376: ST_TO_ADDR
// m3 := false ;
21377: LD_ADDR_VAR 0 5
21381: PUSH
21382: LD_INT 0
21384: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
21385: LD_EXP 34
21389: PUSH
21390: LD_INT 1
21392: EQUAL
21393: PUSH
21394: LD_EXP 35
21398: PUSH
21399: LD_INT 1
21401: EQUAL
21402: AND
21403: IFFALSE 21425
// begin AddMedal ( oil , 1 ) ;
21405: LD_STRING oil
21407: PPUSH
21408: LD_INT 1
21410: PPUSH
21411: CALL_OW 101
// m1 := true ;
21415: LD_ADDR_VAR 0 3
21419: PUSH
21420: LD_INT 1
21422: ST_TO_ADDR
// end else
21423: GO 21518
// begin if buildOil = 1 and buildPower = 0 then
21425: LD_EXP 34
21429: PUSH
21430: LD_INT 1
21432: EQUAL
21433: PUSH
21434: LD_EXP 35
21438: PUSH
21439: LD_INT 0
21441: EQUAL
21442: AND
21443: IFFALSE 21456
// AddMedal ( oil , - 1 ) ;
21445: LD_STRING oil
21447: PPUSH
21448: LD_INT 1
21450: NEG
21451: PPUSH
21452: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
21456: LD_EXP 34
21460: PUSH
21461: LD_INT 0
21463: EQUAL
21464: PUSH
21465: LD_EXP 35
21469: PUSH
21470: LD_INT 1
21472: EQUAL
21473: AND
21474: IFFALSE 21487
// AddMedal ( oil , - 2 ) ;
21476: LD_STRING oil
21478: PPUSH
21479: LD_INT 2
21481: NEG
21482: PPUSH
21483: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
21487: LD_EXP 34
21491: PUSH
21492: LD_INT 0
21494: EQUAL
21495: PUSH
21496: LD_EXP 35
21500: PUSH
21501: LD_INT 0
21503: EQUAL
21504: AND
21505: IFFALSE 21518
// AddMedal ( oil , - 3 ) ;
21507: LD_STRING oil
21509: PPUSH
21510: LD_INT 3
21512: NEG
21513: PPUSH
21514: CALL_OW 101
// end ; if lostCounter > 3 then
21518: LD_EXP 38
21522: PUSH
21523: LD_INT 3
21525: GREATER
21526: IFFALSE 21541
// AddMedal ( deaths , - 1 ) else
21528: LD_STRING deaths
21530: PPUSH
21531: LD_INT 1
21533: NEG
21534: PPUSH
21535: CALL_OW 101
21539: GO 21559
// begin AddMedal ( deaths , 1 ) ;
21541: LD_STRING deaths
21543: PPUSH
21544: LD_INT 1
21546: PPUSH
21547: CALL_OW 101
// m2 := true ;
21551: LD_ADDR_VAR 0 4
21555: PUSH
21556: LD_INT 1
21558: ST_TO_ADDR
// end ; if honor = 1 then
21559: LD_EXP 39
21563: PUSH
21564: LD_INT 1
21566: EQUAL
21567: IFFALSE 21589
// begin AddMedal ( honour , 1 ) ;
21569: LD_STRING honour
21571: PPUSH
21572: LD_INT 1
21574: PPUSH
21575: CALL_OW 101
// m3 := true ;
21579: LD_ADDR_VAR 0 5
21583: PUSH
21584: LD_INT 1
21586: ST_TO_ADDR
// end else
21587: GO 21600
// begin AddMedal ( honour , - 1 ) ;
21589: LD_STRING honour
21591: PPUSH
21592: LD_INT 1
21594: NEG
21595: PPUSH
21596: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
21600: LD_VAR 0 3
21604: PUSH
21605: LD_VAR 0 4
21609: AND
21610: PUSH
21611: LD_VAR 0 5
21615: AND
21616: PUSH
21617: LD_OWVAR 67
21621: PUSH
21622: LD_INT 3
21624: EQUAL
21625: AND
21626: IFFALSE 21638
// SetAchievementEX ( ACH_AMER , 4 ) ;
21628: LD_STRING ACH_AMER
21630: PPUSH
21631: LD_INT 4
21633: PPUSH
21634: CALL_OW 564
// GiveMedals ( Main ) ;
21638: LD_STRING Main
21640: PPUSH
21641: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
21645: LD_INT 22
21647: PUSH
21648: LD_INT 1
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 23
21657: PUSH
21658: LD_INT 1
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 21
21667: PUSH
21668: LD_INT 1
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: LIST
21679: PPUSH
21680: CALL_OW 69
21684: PPUSH
21685: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21689: LD_EXP 1
21693: PPUSH
21694: LD_EXP 48
21698: PUSH
21699: LD_STRING JMM
21701: STR
21702: PPUSH
21703: CALL_OW 38
// if IsOK ( Bobby ) then
21707: LD_EXP 2
21711: PPUSH
21712: CALL_OW 302
21716: IFFALSE 21736
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21718: LD_EXP 2
21722: PPUSH
21723: LD_EXP 48
21727: PUSH
21728: LD_STRING Bobby
21730: STR
21731: PPUSH
21732: CALL_OW 38
// if IsOK ( Cyrus ) then
21736: LD_EXP 3
21740: PPUSH
21741: CALL_OW 302
21745: IFFALSE 21765
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21747: LD_EXP 3
21751: PPUSH
21752: LD_EXP 48
21756: PUSH
21757: LD_STRING Cyrus
21759: STR
21760: PPUSH
21761: CALL_OW 38
// if IsOK ( Lisa ) then
21765: LD_EXP 4
21769: PPUSH
21770: CALL_OW 302
21774: IFFALSE 21794
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21776: LD_EXP 4
21780: PPUSH
21781: LD_EXP 48
21785: PUSH
21786: LD_STRING Lisa
21788: STR
21789: PPUSH
21790: CALL_OW 38
// if IsOK ( Brown ) then
21794: LD_EXP 7
21798: PPUSH
21799: CALL_OW 302
21803: IFFALSE 21823
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
21805: LD_EXP 7
21809: PPUSH
21810: LD_EXP 48
21814: PUSH
21815: LD_STRING Brown
21817: STR
21818: PPUSH
21819: CALL_OW 38
// if not IsDead ( Donaldson ) then
21823: LD_EXP 13
21827: PPUSH
21828: CALL_OW 301
21832: NOT
21833: IFFALSE 21853
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21835: LD_EXP 13
21839: PPUSH
21840: LD_EXP 48
21844: PUSH
21845: LD_STRING Donaldson
21847: STR
21848: PPUSH
21849: CALL_OW 38
// if not IsDead ( Frank ) then
21853: LD_EXP 5
21857: PPUSH
21858: CALL_OW 301
21862: NOT
21863: IFFALSE 21883
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
21865: LD_EXP 5
21869: PPUSH
21870: LD_EXP 48
21874: PUSH
21875: LD_STRING Frank
21877: STR
21878: PPUSH
21879: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
21883: LD_INT 50
21885: PUSH
21886: EMPTY
21887: LIST
21888: PUSH
21889: LD_INT 22
21891: PUSH
21892: LD_INT 1
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 21
21901: PUSH
21902: LD_INT 1
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: LIST
21913: PPUSH
21914: CALL_OW 69
21918: PUSH
21919: LD_EXP 1
21923: PUSH
21924: LD_EXP 2
21928: PUSH
21929: LD_EXP 3
21933: PUSH
21934: LD_EXP 4
21938: PUSH
21939: LD_EXP 7
21943: PUSH
21944: LD_EXP 13
21948: PUSH
21949: LD_EXP 5
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: DIFF
21963: PPUSH
21964: LD_STRING 04_other_survivors
21966: PPUSH
21967: CALL_OW 38
// YouWin ;
21971: CALL_OW 103
// end ;
21975: LD_VAR 0 1
21979: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
21980: LD_INT 0
21982: PPUSH
21983: PPUSH
21984: PPUSH
21985: PPUSH
// gammaBase = [ ] ;
21986: LD_ADDR_VAR 0 4
21990: PUSH
21991: EMPTY
21992: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
21993: LD_ADDR_VAR 0 5
21997: PUSH
21998: LD_VAR 0 1
22002: PPUSH
22003: LD_INT 22
22005: PUSH
22006: LD_INT 1
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 21
22015: PUSH
22016: LD_INT 3
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PPUSH
22027: CALL_OW 70
22031: ST_TO_ADDR
// for i in buildings do
22032: LD_ADDR_VAR 0 3
22036: PUSH
22037: LD_VAR 0 5
22041: PUSH
22042: FOR_IN
22043: IFFALSE 22380
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
22045: LD_VAR 0 3
22049: PPUSH
22050: CALL_OW 266
22054: PUSH
22055: LD_INT 6
22057: PUSH
22058: LD_INT 7
22060: PUSH
22061: LD_INT 8
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: LIST
22068: IN
22069: IFFALSE 22183
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
22071: LD_ADDR_VAR 0 4
22075: PUSH
22076: LD_VAR 0 4
22080: PUSH
22081: LD_VAR 0 3
22085: PPUSH
22086: CALL_OW 266
22090: PUSH
22091: LD_VAR 0 3
22095: PPUSH
22096: CALL_OW 250
22100: PUSH
22101: LD_VAR 0 3
22105: PPUSH
22106: CALL_OW 251
22110: PUSH
22111: LD_VAR 0 3
22115: PPUSH
22116: CALL_OW 254
22120: PUSH
22121: LD_VAR 0 3
22125: PPUSH
22126: CALL_OW 267
22130: PUSH
22131: LD_VAR 0 3
22135: PPUSH
22136: CALL_OW 248
22140: PUSH
22141: LD_VAR 0 3
22145: PPUSH
22146: LD_INT 1
22148: PPUSH
22149: CALL_OW 268
22153: PUSH
22154: LD_VAR 0 3
22158: PPUSH
22159: LD_INT 2
22161: PPUSH
22162: CALL_OW 268
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: PUSH
22177: EMPTY
22178: LIST
22179: ADD
22180: ST_TO_ADDR
22181: GO 22378
// if GetBType ( i ) in [ b_bunker ] then
22183: LD_VAR 0 3
22187: PPUSH
22188: CALL_OW 266
22192: PUSH
22193: LD_INT 32
22195: PUSH
22196: EMPTY
22197: LIST
22198: IN
22199: IFFALSE 22296
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22201: LD_ADDR_VAR 0 4
22205: PUSH
22206: LD_VAR 0 4
22210: PUSH
22211: LD_VAR 0 3
22215: PPUSH
22216: CALL_OW 266
22220: PUSH
22221: LD_VAR 0 3
22225: PPUSH
22226: CALL_OW 250
22230: PUSH
22231: LD_VAR 0 3
22235: PPUSH
22236: CALL_OW 251
22240: PUSH
22241: LD_VAR 0 3
22245: PPUSH
22246: CALL_OW 254
22250: PUSH
22251: LD_VAR 0 3
22255: PPUSH
22256: CALL_OW 267
22260: PUSH
22261: LD_VAR 0 3
22265: PPUSH
22266: CALL_OW 248
22270: PUSH
22271: LD_VAR 0 3
22275: PPUSH
22276: CALL_OW 269
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: PUSH
22290: EMPTY
22291: LIST
22292: ADD
22293: ST_TO_ADDR
22294: GO 22378
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
22296: LD_ADDR_VAR 0 4
22300: PUSH
22301: LD_VAR 0 4
22305: PUSH
22306: LD_VAR 0 3
22310: PPUSH
22311: CALL_OW 266
22315: PUSH
22316: LD_VAR 0 3
22320: PPUSH
22321: CALL_OW 250
22325: PUSH
22326: LD_VAR 0 3
22330: PPUSH
22331: CALL_OW 251
22335: PUSH
22336: LD_VAR 0 3
22340: PPUSH
22341: CALL_OW 254
22345: PUSH
22346: LD_VAR 0 3
22350: PPUSH
22351: CALL_OW 267
22355: PUSH
22356: LD_VAR 0 3
22360: PPUSH
22361: CALL_OW 248
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: PUSH
22374: EMPTY
22375: LIST
22376: ADD
22377: ST_TO_ADDR
// end ;
22378: GO 22042
22380: POP
22381: POP
// SaveVariable ( gammaBase , GammaBase ) ;
22382: LD_VAR 0 4
22386: PPUSH
22387: LD_STRING GammaBase
22389: PPUSH
22390: CALL_OW 39
// end ; end_of_file
22394: LD_VAR 0 2
22398: RET
// every 1 1$15 do
22399: GO 22401
22401: DISABLE
// begin if supply <= 13 and supply > 7 then
22402: LD_EXP 36
22406: PUSH
22407: LD_INT 13
22409: LESSEQUAL
22410: PUSH
22411: LD_EXP 36
22415: PUSH
22416: LD_INT 7
22418: GREATER
22419: AND
22420: IFFALSE 22443
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
22422: LD_INT 3
22424: PPUSH
22425: LD_INT 5
22427: PPUSH
22428: CALL_OW 12
22432: PPUSH
22433: LD_INT 18
22435: PPUSH
22436: LD_INT 1
22438: PPUSH
22439: CALL_OW 55
// if supply <= 7 and supply > 4 then
22443: LD_EXP 36
22447: PUSH
22448: LD_INT 7
22450: LESSEQUAL
22451: PUSH
22452: LD_EXP 36
22456: PUSH
22457: LD_INT 4
22459: GREATER
22460: AND
22461: IFFALSE 22484
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
22463: LD_INT 3
22465: PPUSH
22466: LD_INT 5
22468: PPUSH
22469: CALL_OW 12
22473: PPUSH
22474: LD_INT 19
22476: PPUSH
22477: LD_INT 1
22479: PPUSH
22480: CALL_OW 55
// if supply <= 4 and supply > 0 then
22484: LD_EXP 36
22488: PUSH
22489: LD_INT 4
22491: LESSEQUAL
22492: PUSH
22493: LD_EXP 36
22497: PUSH
22498: LD_INT 0
22500: GREATER
22501: AND
22502: IFFALSE 22525
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
22504: LD_INT 3
22506: PPUSH
22507: LD_INT 5
22509: PPUSH
22510: CALL_OW 12
22514: PPUSH
22515: LD_INT 20
22517: PPUSH
22518: LD_INT 1
22520: PPUSH
22521: CALL_OW 55
// if supply > 0 then
22525: LD_EXP 36
22529: PUSH
22530: LD_INT 0
22532: GREATER
22533: IFFALSE 22550
// begin supply = supply - 1 ;
22535: LD_ADDR_EXP 36
22539: PUSH
22540: LD_EXP 36
22544: PUSH
22545: LD_INT 1
22547: MINUS
22548: ST_TO_ADDR
// enable ;
22549: ENABLE
// end ; end ; end_of_file
22550: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
22551: LD_INT 0
22553: PPUSH
// ar_miner := 81 ;
22554: LD_ADDR_EXP 59
22558: PUSH
22559: LD_INT 81
22561: ST_TO_ADDR
// ar_crane := 88 ;
22562: LD_ADDR_EXP 58
22566: PUSH
22567: LD_INT 88
22569: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22570: LD_ADDR_EXP 53
22574: PUSH
22575: LD_INT 89
22577: ST_TO_ADDR
// us_hack := 99 ;
22578: LD_ADDR_EXP 54
22582: PUSH
22583: LD_INT 99
22585: ST_TO_ADDR
// us_artillery := 97 ;
22586: LD_ADDR_EXP 55
22590: PUSH
22591: LD_INT 97
22593: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22594: LD_ADDR_EXP 56
22598: PUSH
22599: LD_INT 91
22601: ST_TO_ADDR
// ar_mortar := 92 ;
22602: LD_ADDR_EXP 57
22606: PUSH
22607: LD_INT 92
22609: ST_TO_ADDR
// ru_radar := 98 ;
22610: LD_ADDR_EXP 52
22614: PUSH
22615: LD_INT 98
22617: ST_TO_ADDR
// tech_Artillery := 80 ;
22618: LD_ADDR_EXP 60
22622: PUSH
22623: LD_INT 80
22625: ST_TO_ADDR
// tech_RadMat := 81 ;
22626: LD_ADDR_EXP 61
22630: PUSH
22631: LD_INT 81
22633: ST_TO_ADDR
// tech_BasicTools := 82 ;
22634: LD_ADDR_EXP 62
22638: PUSH
22639: LD_INT 82
22641: ST_TO_ADDR
// tech_Cargo := 83 ;
22642: LD_ADDR_EXP 63
22646: PUSH
22647: LD_INT 83
22649: ST_TO_ADDR
// tech_Track := 84 ;
22650: LD_ADDR_EXP 64
22654: PUSH
22655: LD_INT 84
22657: ST_TO_ADDR
// tech_Crane := 85 ;
22658: LD_ADDR_EXP 65
22662: PUSH
22663: LD_INT 85
22665: ST_TO_ADDR
// tech_Bulldozer := 86 ;
22666: LD_ADDR_EXP 66
22670: PUSH
22671: LD_INT 86
22673: ST_TO_ADDR
// tech_Hovercraft := 87 ;
22674: LD_ADDR_EXP 67
22678: PUSH
22679: LD_INT 87
22681: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
22682: LD_ADDR_EXP 68
22686: PUSH
22687: LD_INT 88
22689: ST_TO_ADDR
// class_mastodont := 31 ;
22690: LD_ADDR_EXP 69
22694: PUSH
22695: LD_INT 31
22697: ST_TO_ADDR
// class_horse := 21 ;
22698: LD_ADDR_EXP 70
22702: PUSH
22703: LD_INT 21
22705: ST_TO_ADDR
// end ;
22706: LD_VAR 0 1
22710: RET
// every 1 do
22711: GO 22713
22713: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
22714: CALL 22551 0 0
22718: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22719: LD_INT 0
22721: PPUSH
// if p2 = 100 then
22722: LD_VAR 0 2
22726: PUSH
22727: LD_INT 100
22729: EQUAL
22730: IFFALSE 23679
// begin if not StreamModeActive then
22732: LD_EXP 71
22736: NOT
22737: IFFALSE 22747
// StreamModeActive := true ;
22739: LD_ADDR_EXP 71
22743: PUSH
22744: LD_INT 1
22746: ST_TO_ADDR
// if p3 = 0 then
22747: LD_VAR 0 3
22751: PUSH
22752: LD_INT 0
22754: EQUAL
22755: IFFALSE 22761
// InitStreamMode ;
22757: CALL 23839 0 0
// if p3 = 1 then
22761: LD_VAR 0 3
22765: PUSH
22766: LD_INT 1
22768: EQUAL
22769: IFFALSE 22779
// sRocket := true ;
22771: LD_ADDR_EXP 76
22775: PUSH
22776: LD_INT 1
22778: ST_TO_ADDR
// if p3 = 2 then
22779: LD_VAR 0 3
22783: PUSH
22784: LD_INT 2
22786: EQUAL
22787: IFFALSE 22797
// sSpeed := true ;
22789: LD_ADDR_EXP 75
22793: PUSH
22794: LD_INT 1
22796: ST_TO_ADDR
// if p3 = 3 then
22797: LD_VAR 0 3
22801: PUSH
22802: LD_INT 3
22804: EQUAL
22805: IFFALSE 22815
// sEngine := true ;
22807: LD_ADDR_EXP 77
22811: PUSH
22812: LD_INT 1
22814: ST_TO_ADDR
// if p3 = 4 then
22815: LD_VAR 0 3
22819: PUSH
22820: LD_INT 4
22822: EQUAL
22823: IFFALSE 22833
// sSpec := true ;
22825: LD_ADDR_EXP 74
22829: PUSH
22830: LD_INT 1
22832: ST_TO_ADDR
// if p3 = 5 then
22833: LD_VAR 0 3
22837: PUSH
22838: LD_INT 5
22840: EQUAL
22841: IFFALSE 22851
// sLevel := true ;
22843: LD_ADDR_EXP 78
22847: PUSH
22848: LD_INT 1
22850: ST_TO_ADDR
// if p3 = 6 then
22851: LD_VAR 0 3
22855: PUSH
22856: LD_INT 6
22858: EQUAL
22859: IFFALSE 22869
// sArmoury := true ;
22861: LD_ADDR_EXP 79
22865: PUSH
22866: LD_INT 1
22868: ST_TO_ADDR
// if p3 = 7 then
22869: LD_VAR 0 3
22873: PUSH
22874: LD_INT 7
22876: EQUAL
22877: IFFALSE 22887
// sRadar := true ;
22879: LD_ADDR_EXP 80
22883: PUSH
22884: LD_INT 1
22886: ST_TO_ADDR
// if p3 = 8 then
22887: LD_VAR 0 3
22891: PUSH
22892: LD_INT 8
22894: EQUAL
22895: IFFALSE 22905
// sBunker := true ;
22897: LD_ADDR_EXP 81
22901: PUSH
22902: LD_INT 1
22904: ST_TO_ADDR
// if p3 = 9 then
22905: LD_VAR 0 3
22909: PUSH
22910: LD_INT 9
22912: EQUAL
22913: IFFALSE 22923
// sHack := true ;
22915: LD_ADDR_EXP 82
22919: PUSH
22920: LD_INT 1
22922: ST_TO_ADDR
// if p3 = 10 then
22923: LD_VAR 0 3
22927: PUSH
22928: LD_INT 10
22930: EQUAL
22931: IFFALSE 22941
// sFire := true ;
22933: LD_ADDR_EXP 83
22937: PUSH
22938: LD_INT 1
22940: ST_TO_ADDR
// if p3 = 11 then
22941: LD_VAR 0 3
22945: PUSH
22946: LD_INT 11
22948: EQUAL
22949: IFFALSE 22959
// sRefresh := true ;
22951: LD_ADDR_EXP 84
22955: PUSH
22956: LD_INT 1
22958: ST_TO_ADDR
// if p3 = 12 then
22959: LD_VAR 0 3
22963: PUSH
22964: LD_INT 12
22966: EQUAL
22967: IFFALSE 22977
// sExp := true ;
22969: LD_ADDR_EXP 85
22973: PUSH
22974: LD_INT 1
22976: ST_TO_ADDR
// if p3 = 13 then
22977: LD_VAR 0 3
22981: PUSH
22982: LD_INT 13
22984: EQUAL
22985: IFFALSE 22995
// sDepot := true ;
22987: LD_ADDR_EXP 86
22991: PUSH
22992: LD_INT 1
22994: ST_TO_ADDR
// if p3 = 14 then
22995: LD_VAR 0 3
22999: PUSH
23000: LD_INT 14
23002: EQUAL
23003: IFFALSE 23013
// sFlag := true ;
23005: LD_ADDR_EXP 87
23009: PUSH
23010: LD_INT 1
23012: ST_TO_ADDR
// if p3 = 15 then
23013: LD_VAR 0 3
23017: PUSH
23018: LD_INT 15
23020: EQUAL
23021: IFFALSE 23031
// sKamikadze := true ;
23023: LD_ADDR_EXP 95
23027: PUSH
23028: LD_INT 1
23030: ST_TO_ADDR
// if p3 = 16 then
23031: LD_VAR 0 3
23035: PUSH
23036: LD_INT 16
23038: EQUAL
23039: IFFALSE 23049
// sTroll := true ;
23041: LD_ADDR_EXP 96
23045: PUSH
23046: LD_INT 1
23048: ST_TO_ADDR
// if p3 = 17 then
23049: LD_VAR 0 3
23053: PUSH
23054: LD_INT 17
23056: EQUAL
23057: IFFALSE 23067
// sSlow := true ;
23059: LD_ADDR_EXP 97
23063: PUSH
23064: LD_INT 1
23066: ST_TO_ADDR
// if p3 = 18 then
23067: LD_VAR 0 3
23071: PUSH
23072: LD_INT 18
23074: EQUAL
23075: IFFALSE 23085
// sLack := true ;
23077: LD_ADDR_EXP 98
23081: PUSH
23082: LD_INT 1
23084: ST_TO_ADDR
// if p3 = 19 then
23085: LD_VAR 0 3
23089: PUSH
23090: LD_INT 19
23092: EQUAL
23093: IFFALSE 23103
// sTank := true ;
23095: LD_ADDR_EXP 100
23099: PUSH
23100: LD_INT 1
23102: ST_TO_ADDR
// if p3 = 20 then
23103: LD_VAR 0 3
23107: PUSH
23108: LD_INT 20
23110: EQUAL
23111: IFFALSE 23121
// sRemote := true ;
23113: LD_ADDR_EXP 101
23117: PUSH
23118: LD_INT 1
23120: ST_TO_ADDR
// if p3 = 21 then
23121: LD_VAR 0 3
23125: PUSH
23126: LD_INT 21
23128: EQUAL
23129: IFFALSE 23139
// sPowell := true ;
23131: LD_ADDR_EXP 102
23135: PUSH
23136: LD_INT 1
23138: ST_TO_ADDR
// if p3 = 22 then
23139: LD_VAR 0 3
23143: PUSH
23144: LD_INT 22
23146: EQUAL
23147: IFFALSE 23157
// sTeleport := true ;
23149: LD_ADDR_EXP 105
23153: PUSH
23154: LD_INT 1
23156: ST_TO_ADDR
// if p3 = 23 then
23157: LD_VAR 0 3
23161: PUSH
23162: LD_INT 23
23164: EQUAL
23165: IFFALSE 23175
// sOilTower := true ;
23167: LD_ADDR_EXP 107
23171: PUSH
23172: LD_INT 1
23174: ST_TO_ADDR
// if p3 = 24 then
23175: LD_VAR 0 3
23179: PUSH
23180: LD_INT 24
23182: EQUAL
23183: IFFALSE 23193
// sShovel := true ;
23185: LD_ADDR_EXP 108
23189: PUSH
23190: LD_INT 1
23192: ST_TO_ADDR
// if p3 = 25 then
23193: LD_VAR 0 3
23197: PUSH
23198: LD_INT 25
23200: EQUAL
23201: IFFALSE 23211
// sSheik := true ;
23203: LD_ADDR_EXP 109
23207: PUSH
23208: LD_INT 1
23210: ST_TO_ADDR
// if p3 = 26 then
23211: LD_VAR 0 3
23215: PUSH
23216: LD_INT 26
23218: EQUAL
23219: IFFALSE 23229
// sEarthquake := true ;
23221: LD_ADDR_EXP 111
23225: PUSH
23226: LD_INT 1
23228: ST_TO_ADDR
// if p3 = 27 then
23229: LD_VAR 0 3
23233: PUSH
23234: LD_INT 27
23236: EQUAL
23237: IFFALSE 23247
// sAI := true ;
23239: LD_ADDR_EXP 112
23243: PUSH
23244: LD_INT 1
23246: ST_TO_ADDR
// if p3 = 28 then
23247: LD_VAR 0 3
23251: PUSH
23252: LD_INT 28
23254: EQUAL
23255: IFFALSE 23265
// sCargo := true ;
23257: LD_ADDR_EXP 115
23261: PUSH
23262: LD_INT 1
23264: ST_TO_ADDR
// if p3 = 29 then
23265: LD_VAR 0 3
23269: PUSH
23270: LD_INT 29
23272: EQUAL
23273: IFFALSE 23283
// sDLaser := true ;
23275: LD_ADDR_EXP 116
23279: PUSH
23280: LD_INT 1
23282: ST_TO_ADDR
// if p3 = 30 then
23283: LD_VAR 0 3
23287: PUSH
23288: LD_INT 30
23290: EQUAL
23291: IFFALSE 23301
// sExchange := true ;
23293: LD_ADDR_EXP 117
23297: PUSH
23298: LD_INT 1
23300: ST_TO_ADDR
// if p3 = 31 then
23301: LD_VAR 0 3
23305: PUSH
23306: LD_INT 31
23308: EQUAL
23309: IFFALSE 23319
// sFac := true ;
23311: LD_ADDR_EXP 118
23315: PUSH
23316: LD_INT 1
23318: ST_TO_ADDR
// if p3 = 32 then
23319: LD_VAR 0 3
23323: PUSH
23324: LD_INT 32
23326: EQUAL
23327: IFFALSE 23337
// sPower := true ;
23329: LD_ADDR_EXP 119
23333: PUSH
23334: LD_INT 1
23336: ST_TO_ADDR
// if p3 = 33 then
23337: LD_VAR 0 3
23341: PUSH
23342: LD_INT 33
23344: EQUAL
23345: IFFALSE 23355
// sRandom := true ;
23347: LD_ADDR_EXP 120
23351: PUSH
23352: LD_INT 1
23354: ST_TO_ADDR
// if p3 = 34 then
23355: LD_VAR 0 3
23359: PUSH
23360: LD_INT 34
23362: EQUAL
23363: IFFALSE 23373
// sShield := true ;
23365: LD_ADDR_EXP 121
23369: PUSH
23370: LD_INT 1
23372: ST_TO_ADDR
// if p3 = 35 then
23373: LD_VAR 0 3
23377: PUSH
23378: LD_INT 35
23380: EQUAL
23381: IFFALSE 23391
// sTime := true ;
23383: LD_ADDR_EXP 122
23387: PUSH
23388: LD_INT 1
23390: ST_TO_ADDR
// if p3 = 36 then
23391: LD_VAR 0 3
23395: PUSH
23396: LD_INT 36
23398: EQUAL
23399: IFFALSE 23409
// sTools := true ;
23401: LD_ADDR_EXP 123
23405: PUSH
23406: LD_INT 1
23408: ST_TO_ADDR
// if p3 = 101 then
23409: LD_VAR 0 3
23413: PUSH
23414: LD_INT 101
23416: EQUAL
23417: IFFALSE 23427
// sSold := true ;
23419: LD_ADDR_EXP 88
23423: PUSH
23424: LD_INT 1
23426: ST_TO_ADDR
// if p3 = 102 then
23427: LD_VAR 0 3
23431: PUSH
23432: LD_INT 102
23434: EQUAL
23435: IFFALSE 23445
// sDiff := true ;
23437: LD_ADDR_EXP 89
23441: PUSH
23442: LD_INT 1
23444: ST_TO_ADDR
// if p3 = 103 then
23445: LD_VAR 0 3
23449: PUSH
23450: LD_INT 103
23452: EQUAL
23453: IFFALSE 23463
// sFog := true ;
23455: LD_ADDR_EXP 92
23459: PUSH
23460: LD_INT 1
23462: ST_TO_ADDR
// if p3 = 104 then
23463: LD_VAR 0 3
23467: PUSH
23468: LD_INT 104
23470: EQUAL
23471: IFFALSE 23481
// sReset := true ;
23473: LD_ADDR_EXP 93
23477: PUSH
23478: LD_INT 1
23480: ST_TO_ADDR
// if p3 = 105 then
23481: LD_VAR 0 3
23485: PUSH
23486: LD_INT 105
23488: EQUAL
23489: IFFALSE 23499
// sSun := true ;
23491: LD_ADDR_EXP 94
23495: PUSH
23496: LD_INT 1
23498: ST_TO_ADDR
// if p3 = 106 then
23499: LD_VAR 0 3
23503: PUSH
23504: LD_INT 106
23506: EQUAL
23507: IFFALSE 23517
// sTiger := true ;
23509: LD_ADDR_EXP 90
23513: PUSH
23514: LD_INT 1
23516: ST_TO_ADDR
// if p3 = 107 then
23517: LD_VAR 0 3
23521: PUSH
23522: LD_INT 107
23524: EQUAL
23525: IFFALSE 23535
// sBomb := true ;
23527: LD_ADDR_EXP 91
23531: PUSH
23532: LD_INT 1
23534: ST_TO_ADDR
// if p3 = 108 then
23535: LD_VAR 0 3
23539: PUSH
23540: LD_INT 108
23542: EQUAL
23543: IFFALSE 23553
// sWound := true ;
23545: LD_ADDR_EXP 99
23549: PUSH
23550: LD_INT 1
23552: ST_TO_ADDR
// if p3 = 109 then
23553: LD_VAR 0 3
23557: PUSH
23558: LD_INT 109
23560: EQUAL
23561: IFFALSE 23571
// sBetray := true ;
23563: LD_ADDR_EXP 103
23567: PUSH
23568: LD_INT 1
23570: ST_TO_ADDR
// if p3 = 110 then
23571: LD_VAR 0 3
23575: PUSH
23576: LD_INT 110
23578: EQUAL
23579: IFFALSE 23589
// sContamin := true ;
23581: LD_ADDR_EXP 104
23585: PUSH
23586: LD_INT 1
23588: ST_TO_ADDR
// if p3 = 111 then
23589: LD_VAR 0 3
23593: PUSH
23594: LD_INT 111
23596: EQUAL
23597: IFFALSE 23607
// sOil := true ;
23599: LD_ADDR_EXP 106
23603: PUSH
23604: LD_INT 1
23606: ST_TO_ADDR
// if p3 = 112 then
23607: LD_VAR 0 3
23611: PUSH
23612: LD_INT 112
23614: EQUAL
23615: IFFALSE 23625
// sStu := true ;
23617: LD_ADDR_EXP 110
23621: PUSH
23622: LD_INT 1
23624: ST_TO_ADDR
// if p3 = 113 then
23625: LD_VAR 0 3
23629: PUSH
23630: LD_INT 113
23632: EQUAL
23633: IFFALSE 23643
// sBazooka := true ;
23635: LD_ADDR_EXP 113
23639: PUSH
23640: LD_INT 1
23642: ST_TO_ADDR
// if p3 = 114 then
23643: LD_VAR 0 3
23647: PUSH
23648: LD_INT 114
23650: EQUAL
23651: IFFALSE 23661
// sMortar := true ;
23653: LD_ADDR_EXP 114
23657: PUSH
23658: LD_INT 1
23660: ST_TO_ADDR
// if p3 = 115 then
23661: LD_VAR 0 3
23665: PUSH
23666: LD_INT 115
23668: EQUAL
23669: IFFALSE 23679
// sRanger := true ;
23671: LD_ADDR_EXP 124
23675: PUSH
23676: LD_INT 1
23678: ST_TO_ADDR
// end ; if p2 = 101 then
23679: LD_VAR 0 2
23683: PUSH
23684: LD_INT 101
23686: EQUAL
23687: IFFALSE 23815
// begin case p3 of 1 :
23689: LD_VAR 0 3
23693: PUSH
23694: LD_INT 1
23696: DOUBLE
23697: EQUAL
23698: IFTRUE 23702
23700: GO 23709
23702: POP
// hHackUnlimitedResources ; 2 :
23703: CALL 34852 0 0
23707: GO 23815
23709: LD_INT 2
23711: DOUBLE
23712: EQUAL
23713: IFTRUE 23717
23715: GO 23724
23717: POP
// hHackSetLevel10 ; 3 :
23718: CALL 34985 0 0
23722: GO 23815
23724: LD_INT 3
23726: DOUBLE
23727: EQUAL
23728: IFTRUE 23732
23730: GO 23739
23732: POP
// hHackSetLevel10YourUnits ; 4 :
23733: CALL 35070 0 0
23737: GO 23815
23739: LD_INT 4
23741: DOUBLE
23742: EQUAL
23743: IFTRUE 23747
23745: GO 23754
23747: POP
// hHackInvincible ; 5 :
23748: CALL 35518 0 0
23752: GO 23815
23754: LD_INT 5
23756: DOUBLE
23757: EQUAL
23758: IFTRUE 23762
23760: GO 23769
23762: POP
// hHackInvisible ; 6 :
23763: CALL 35629 0 0
23767: GO 23815
23769: LD_INT 6
23771: DOUBLE
23772: EQUAL
23773: IFTRUE 23777
23775: GO 23784
23777: POP
// hHackChangeYourSide ; 7 :
23778: CALL 35686 0 0
23782: GO 23815
23784: LD_INT 7
23786: DOUBLE
23787: EQUAL
23788: IFTRUE 23792
23790: GO 23799
23792: POP
// hHackChangeUnitSide ; 8 :
23793: CALL 35728 0 0
23797: GO 23815
23799: LD_INT 8
23801: DOUBLE
23802: EQUAL
23803: IFTRUE 23807
23805: GO 23814
23807: POP
// hHackFog ; end ;
23808: CALL 35829 0 0
23812: GO 23815
23814: POP
// end ; end ;
23815: LD_VAR 0 7
23819: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
23820: GO 23822
23822: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
23823: LD_STRING initStreamRollete();
23825: PPUSH
23826: CALL_OW 559
// InitStreamMode ;
23830: CALL 23839 0 0
// DefineStreamItems ( ) ;
23834: CALL 24279 0 0
// end ;
23838: END
// function InitStreamMode ; begin
23839: LD_INT 0
23841: PPUSH
// streamModeActive := false ;
23842: LD_ADDR_EXP 71
23846: PUSH
23847: LD_INT 0
23849: ST_TO_ADDR
// normalCounter := 36 ;
23850: LD_ADDR_EXP 72
23854: PUSH
23855: LD_INT 36
23857: ST_TO_ADDR
// hardcoreCounter := 16 ;
23858: LD_ADDR_EXP 73
23862: PUSH
23863: LD_INT 16
23865: ST_TO_ADDR
// sRocket := false ;
23866: LD_ADDR_EXP 76
23870: PUSH
23871: LD_INT 0
23873: ST_TO_ADDR
// sSpeed := false ;
23874: LD_ADDR_EXP 75
23878: PUSH
23879: LD_INT 0
23881: ST_TO_ADDR
// sEngine := false ;
23882: LD_ADDR_EXP 77
23886: PUSH
23887: LD_INT 0
23889: ST_TO_ADDR
// sSpec := false ;
23890: LD_ADDR_EXP 74
23894: PUSH
23895: LD_INT 0
23897: ST_TO_ADDR
// sLevel := false ;
23898: LD_ADDR_EXP 78
23902: PUSH
23903: LD_INT 0
23905: ST_TO_ADDR
// sArmoury := false ;
23906: LD_ADDR_EXP 79
23910: PUSH
23911: LD_INT 0
23913: ST_TO_ADDR
// sRadar := false ;
23914: LD_ADDR_EXP 80
23918: PUSH
23919: LD_INT 0
23921: ST_TO_ADDR
// sBunker := false ;
23922: LD_ADDR_EXP 81
23926: PUSH
23927: LD_INT 0
23929: ST_TO_ADDR
// sHack := false ;
23930: LD_ADDR_EXP 82
23934: PUSH
23935: LD_INT 0
23937: ST_TO_ADDR
// sFire := false ;
23938: LD_ADDR_EXP 83
23942: PUSH
23943: LD_INT 0
23945: ST_TO_ADDR
// sRefresh := false ;
23946: LD_ADDR_EXP 84
23950: PUSH
23951: LD_INT 0
23953: ST_TO_ADDR
// sExp := false ;
23954: LD_ADDR_EXP 85
23958: PUSH
23959: LD_INT 0
23961: ST_TO_ADDR
// sDepot := false ;
23962: LD_ADDR_EXP 86
23966: PUSH
23967: LD_INT 0
23969: ST_TO_ADDR
// sFlag := false ;
23970: LD_ADDR_EXP 87
23974: PUSH
23975: LD_INT 0
23977: ST_TO_ADDR
// sKamikadze := false ;
23978: LD_ADDR_EXP 95
23982: PUSH
23983: LD_INT 0
23985: ST_TO_ADDR
// sTroll := false ;
23986: LD_ADDR_EXP 96
23990: PUSH
23991: LD_INT 0
23993: ST_TO_ADDR
// sSlow := false ;
23994: LD_ADDR_EXP 97
23998: PUSH
23999: LD_INT 0
24001: ST_TO_ADDR
// sLack := false ;
24002: LD_ADDR_EXP 98
24006: PUSH
24007: LD_INT 0
24009: ST_TO_ADDR
// sTank := false ;
24010: LD_ADDR_EXP 100
24014: PUSH
24015: LD_INT 0
24017: ST_TO_ADDR
// sRemote := false ;
24018: LD_ADDR_EXP 101
24022: PUSH
24023: LD_INT 0
24025: ST_TO_ADDR
// sPowell := false ;
24026: LD_ADDR_EXP 102
24030: PUSH
24031: LD_INT 0
24033: ST_TO_ADDR
// sTeleport := false ;
24034: LD_ADDR_EXP 105
24038: PUSH
24039: LD_INT 0
24041: ST_TO_ADDR
// sOilTower := false ;
24042: LD_ADDR_EXP 107
24046: PUSH
24047: LD_INT 0
24049: ST_TO_ADDR
// sShovel := false ;
24050: LD_ADDR_EXP 108
24054: PUSH
24055: LD_INT 0
24057: ST_TO_ADDR
// sSheik := false ;
24058: LD_ADDR_EXP 109
24062: PUSH
24063: LD_INT 0
24065: ST_TO_ADDR
// sEarthquake := false ;
24066: LD_ADDR_EXP 111
24070: PUSH
24071: LD_INT 0
24073: ST_TO_ADDR
// sAI := false ;
24074: LD_ADDR_EXP 112
24078: PUSH
24079: LD_INT 0
24081: ST_TO_ADDR
// sCargo := false ;
24082: LD_ADDR_EXP 115
24086: PUSH
24087: LD_INT 0
24089: ST_TO_ADDR
// sDLaser := false ;
24090: LD_ADDR_EXP 116
24094: PUSH
24095: LD_INT 0
24097: ST_TO_ADDR
// sExchange := false ;
24098: LD_ADDR_EXP 117
24102: PUSH
24103: LD_INT 0
24105: ST_TO_ADDR
// sFac := false ;
24106: LD_ADDR_EXP 118
24110: PUSH
24111: LD_INT 0
24113: ST_TO_ADDR
// sPower := false ;
24114: LD_ADDR_EXP 119
24118: PUSH
24119: LD_INT 0
24121: ST_TO_ADDR
// sRandom := false ;
24122: LD_ADDR_EXP 120
24126: PUSH
24127: LD_INT 0
24129: ST_TO_ADDR
// sShield := false ;
24130: LD_ADDR_EXP 121
24134: PUSH
24135: LD_INT 0
24137: ST_TO_ADDR
// sTime := false ;
24138: LD_ADDR_EXP 122
24142: PUSH
24143: LD_INT 0
24145: ST_TO_ADDR
// sTools := false ;
24146: LD_ADDR_EXP 123
24150: PUSH
24151: LD_INT 0
24153: ST_TO_ADDR
// sSold := false ;
24154: LD_ADDR_EXP 88
24158: PUSH
24159: LD_INT 0
24161: ST_TO_ADDR
// sDiff := false ;
24162: LD_ADDR_EXP 89
24166: PUSH
24167: LD_INT 0
24169: ST_TO_ADDR
// sFog := false ;
24170: LD_ADDR_EXP 92
24174: PUSH
24175: LD_INT 0
24177: ST_TO_ADDR
// sReset := false ;
24178: LD_ADDR_EXP 93
24182: PUSH
24183: LD_INT 0
24185: ST_TO_ADDR
// sSun := false ;
24186: LD_ADDR_EXP 94
24190: PUSH
24191: LD_INT 0
24193: ST_TO_ADDR
// sTiger := false ;
24194: LD_ADDR_EXP 90
24198: PUSH
24199: LD_INT 0
24201: ST_TO_ADDR
// sBomb := false ;
24202: LD_ADDR_EXP 91
24206: PUSH
24207: LD_INT 0
24209: ST_TO_ADDR
// sWound := false ;
24210: LD_ADDR_EXP 99
24214: PUSH
24215: LD_INT 0
24217: ST_TO_ADDR
// sBetray := false ;
24218: LD_ADDR_EXP 103
24222: PUSH
24223: LD_INT 0
24225: ST_TO_ADDR
// sContamin := false ;
24226: LD_ADDR_EXP 104
24230: PUSH
24231: LD_INT 0
24233: ST_TO_ADDR
// sOil := false ;
24234: LD_ADDR_EXP 106
24238: PUSH
24239: LD_INT 0
24241: ST_TO_ADDR
// sStu := false ;
24242: LD_ADDR_EXP 110
24246: PUSH
24247: LD_INT 0
24249: ST_TO_ADDR
// sBazooka := false ;
24250: LD_ADDR_EXP 113
24254: PUSH
24255: LD_INT 0
24257: ST_TO_ADDR
// sMortar := false ;
24258: LD_ADDR_EXP 114
24262: PUSH
24263: LD_INT 0
24265: ST_TO_ADDR
// sRanger := false ;
24266: LD_ADDR_EXP 124
24270: PUSH
24271: LD_INT 0
24273: ST_TO_ADDR
// end ;
24274: LD_VAR 0 1
24278: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
24279: LD_INT 0
24281: PPUSH
24282: PPUSH
24283: PPUSH
24284: PPUSH
24285: PPUSH
// result := [ ] ;
24286: LD_ADDR_VAR 0 1
24290: PUSH
24291: EMPTY
24292: ST_TO_ADDR
// if campaign_id = 1 then
24293: LD_OWVAR 69
24297: PUSH
24298: LD_INT 1
24300: EQUAL
24301: IFFALSE 27239
// begin case mission_number of 1 :
24303: LD_OWVAR 70
24307: PUSH
24308: LD_INT 1
24310: DOUBLE
24311: EQUAL
24312: IFTRUE 24316
24314: GO 24380
24316: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
24317: LD_ADDR_VAR 0 1
24321: PUSH
24322: LD_INT 2
24324: PUSH
24325: LD_INT 4
24327: PUSH
24328: LD_INT 11
24330: PUSH
24331: LD_INT 12
24333: PUSH
24334: LD_INT 15
24336: PUSH
24337: LD_INT 16
24339: PUSH
24340: LD_INT 22
24342: PUSH
24343: LD_INT 23
24345: PUSH
24346: LD_INT 26
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 101
24362: PUSH
24363: LD_INT 102
24365: PUSH
24366: LD_INT 106
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: LIST
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: ST_TO_ADDR
24378: GO 27237
24380: LD_INT 2
24382: DOUBLE
24383: EQUAL
24384: IFTRUE 24388
24386: GO 24460
24388: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
24389: LD_ADDR_VAR 0 1
24393: PUSH
24394: LD_INT 2
24396: PUSH
24397: LD_INT 4
24399: PUSH
24400: LD_INT 11
24402: PUSH
24403: LD_INT 12
24405: PUSH
24406: LD_INT 15
24408: PUSH
24409: LD_INT 16
24411: PUSH
24412: LD_INT 22
24414: PUSH
24415: LD_INT 23
24417: PUSH
24418: LD_INT 26
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 101
24434: PUSH
24435: LD_INT 102
24437: PUSH
24438: LD_INT 105
24440: PUSH
24441: LD_INT 106
24443: PUSH
24444: LD_INT 108
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: ST_TO_ADDR
24458: GO 27237
24460: LD_INT 3
24462: DOUBLE
24463: EQUAL
24464: IFTRUE 24468
24466: GO 24544
24468: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
24469: LD_ADDR_VAR 0 1
24473: PUSH
24474: LD_INT 2
24476: PUSH
24477: LD_INT 4
24479: PUSH
24480: LD_INT 5
24482: PUSH
24483: LD_INT 11
24485: PUSH
24486: LD_INT 12
24488: PUSH
24489: LD_INT 15
24491: PUSH
24492: LD_INT 16
24494: PUSH
24495: LD_INT 22
24497: PUSH
24498: LD_INT 26
24500: PUSH
24501: LD_INT 36
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 101
24518: PUSH
24519: LD_INT 102
24521: PUSH
24522: LD_INT 105
24524: PUSH
24525: LD_INT 106
24527: PUSH
24528: LD_INT 108
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: ST_TO_ADDR
24542: GO 27237
24544: LD_INT 4
24546: DOUBLE
24547: EQUAL
24548: IFTRUE 24552
24550: GO 24636
24552: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
24553: LD_ADDR_VAR 0 1
24557: PUSH
24558: LD_INT 2
24560: PUSH
24561: LD_INT 4
24563: PUSH
24564: LD_INT 5
24566: PUSH
24567: LD_INT 8
24569: PUSH
24570: LD_INT 11
24572: PUSH
24573: LD_INT 12
24575: PUSH
24576: LD_INT 15
24578: PUSH
24579: LD_INT 16
24581: PUSH
24582: LD_INT 22
24584: PUSH
24585: LD_INT 23
24587: PUSH
24588: LD_INT 26
24590: PUSH
24591: LD_INT 36
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 101
24610: PUSH
24611: LD_INT 102
24613: PUSH
24614: LD_INT 105
24616: PUSH
24617: LD_INT 106
24619: PUSH
24620: LD_INT 108
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: ST_TO_ADDR
24634: GO 27237
24636: LD_INT 5
24638: DOUBLE
24639: EQUAL
24640: IFTRUE 24644
24642: GO 24744
24644: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
24645: LD_ADDR_VAR 0 1
24649: PUSH
24650: LD_INT 2
24652: PUSH
24653: LD_INT 4
24655: PUSH
24656: LD_INT 5
24658: PUSH
24659: LD_INT 6
24661: PUSH
24662: LD_INT 8
24664: PUSH
24665: LD_INT 11
24667: PUSH
24668: LD_INT 12
24670: PUSH
24671: LD_INT 15
24673: PUSH
24674: LD_INT 16
24676: PUSH
24677: LD_INT 22
24679: PUSH
24680: LD_INT 23
24682: PUSH
24683: LD_INT 25
24685: PUSH
24686: LD_INT 26
24688: PUSH
24689: LD_INT 36
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 101
24710: PUSH
24711: LD_INT 102
24713: PUSH
24714: LD_INT 105
24716: PUSH
24717: LD_INT 106
24719: PUSH
24720: LD_INT 108
24722: PUSH
24723: LD_INT 109
24725: PUSH
24726: LD_INT 112
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: ST_TO_ADDR
24742: GO 27237
24744: LD_INT 6
24746: DOUBLE
24747: EQUAL
24748: IFTRUE 24752
24750: GO 24872
24752: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
24753: LD_ADDR_VAR 0 1
24757: PUSH
24758: LD_INT 2
24760: PUSH
24761: LD_INT 4
24763: PUSH
24764: LD_INT 5
24766: PUSH
24767: LD_INT 6
24769: PUSH
24770: LD_INT 8
24772: PUSH
24773: LD_INT 11
24775: PUSH
24776: LD_INT 12
24778: PUSH
24779: LD_INT 15
24781: PUSH
24782: LD_INT 16
24784: PUSH
24785: LD_INT 20
24787: PUSH
24788: LD_INT 21
24790: PUSH
24791: LD_INT 22
24793: PUSH
24794: LD_INT 23
24796: PUSH
24797: LD_INT 25
24799: PUSH
24800: LD_INT 26
24802: PUSH
24803: LD_INT 30
24805: PUSH
24806: LD_INT 31
24808: PUSH
24809: LD_INT 32
24811: PUSH
24812: LD_INT 36
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 101
24838: PUSH
24839: LD_INT 102
24841: PUSH
24842: LD_INT 105
24844: PUSH
24845: LD_INT 106
24847: PUSH
24848: LD_INT 108
24850: PUSH
24851: LD_INT 109
24853: PUSH
24854: LD_INT 112
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: ST_TO_ADDR
24870: GO 27237
24872: LD_INT 7
24874: DOUBLE
24875: EQUAL
24876: IFTRUE 24880
24878: GO 24980
24880: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
24881: LD_ADDR_VAR 0 1
24885: PUSH
24886: LD_INT 2
24888: PUSH
24889: LD_INT 4
24891: PUSH
24892: LD_INT 5
24894: PUSH
24895: LD_INT 7
24897: PUSH
24898: LD_INT 11
24900: PUSH
24901: LD_INT 12
24903: PUSH
24904: LD_INT 15
24906: PUSH
24907: LD_INT 16
24909: PUSH
24910: LD_INT 20
24912: PUSH
24913: LD_INT 21
24915: PUSH
24916: LD_INT 22
24918: PUSH
24919: LD_INT 23
24921: PUSH
24922: LD_INT 25
24924: PUSH
24925: LD_INT 26
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 101
24946: PUSH
24947: LD_INT 102
24949: PUSH
24950: LD_INT 103
24952: PUSH
24953: LD_INT 105
24955: PUSH
24956: LD_INT 106
24958: PUSH
24959: LD_INT 108
24961: PUSH
24962: LD_INT 112
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: ST_TO_ADDR
24978: GO 27237
24980: LD_INT 8
24982: DOUBLE
24983: EQUAL
24984: IFTRUE 24988
24986: GO 25116
24988: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
24989: LD_ADDR_VAR 0 1
24993: PUSH
24994: LD_INT 2
24996: PUSH
24997: LD_INT 4
24999: PUSH
25000: LD_INT 5
25002: PUSH
25003: LD_INT 6
25005: PUSH
25006: LD_INT 7
25008: PUSH
25009: LD_INT 8
25011: PUSH
25012: LD_INT 11
25014: PUSH
25015: LD_INT 12
25017: PUSH
25018: LD_INT 15
25020: PUSH
25021: LD_INT 16
25023: PUSH
25024: LD_INT 20
25026: PUSH
25027: LD_INT 21
25029: PUSH
25030: LD_INT 22
25032: PUSH
25033: LD_INT 23
25035: PUSH
25036: LD_INT 25
25038: PUSH
25039: LD_INT 26
25041: PUSH
25042: LD_INT 30
25044: PUSH
25045: LD_INT 31
25047: PUSH
25048: LD_INT 32
25050: PUSH
25051: LD_INT 36
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 101
25078: PUSH
25079: LD_INT 102
25081: PUSH
25082: LD_INT 103
25084: PUSH
25085: LD_INT 105
25087: PUSH
25088: LD_INT 106
25090: PUSH
25091: LD_INT 108
25093: PUSH
25094: LD_INT 109
25096: PUSH
25097: LD_INT 112
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: ST_TO_ADDR
25114: GO 27237
25116: LD_INT 9
25118: DOUBLE
25119: EQUAL
25120: IFTRUE 25124
25122: GO 25260
25124: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
25125: LD_ADDR_VAR 0 1
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: LD_INT 4
25135: PUSH
25136: LD_INT 5
25138: PUSH
25139: LD_INT 6
25141: PUSH
25142: LD_INT 7
25144: PUSH
25145: LD_INT 8
25147: PUSH
25148: LD_INT 11
25150: PUSH
25151: LD_INT 12
25153: PUSH
25154: LD_INT 15
25156: PUSH
25157: LD_INT 16
25159: PUSH
25160: LD_INT 20
25162: PUSH
25163: LD_INT 21
25165: PUSH
25166: LD_INT 22
25168: PUSH
25169: LD_INT 23
25171: PUSH
25172: LD_INT 25
25174: PUSH
25175: LD_INT 26
25177: PUSH
25178: LD_INT 28
25180: PUSH
25181: LD_INT 30
25183: PUSH
25184: LD_INT 31
25186: PUSH
25187: LD_INT 32
25189: PUSH
25190: LD_INT 36
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 101
25218: PUSH
25219: LD_INT 102
25221: PUSH
25222: LD_INT 103
25224: PUSH
25225: LD_INT 105
25227: PUSH
25228: LD_INT 106
25230: PUSH
25231: LD_INT 108
25233: PUSH
25234: LD_INT 109
25236: PUSH
25237: LD_INT 112
25239: PUSH
25240: LD_INT 114
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: ST_TO_ADDR
25258: GO 27237
25260: LD_INT 10
25262: DOUBLE
25263: EQUAL
25264: IFTRUE 25268
25266: GO 25452
25268: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
25269: LD_ADDR_VAR 0 1
25273: PUSH
25274: LD_INT 2
25276: PUSH
25277: LD_INT 4
25279: PUSH
25280: LD_INT 5
25282: PUSH
25283: LD_INT 6
25285: PUSH
25286: LD_INT 7
25288: PUSH
25289: LD_INT 8
25291: PUSH
25292: LD_INT 9
25294: PUSH
25295: LD_INT 10
25297: PUSH
25298: LD_INT 11
25300: PUSH
25301: LD_INT 12
25303: PUSH
25304: LD_INT 13
25306: PUSH
25307: LD_INT 14
25309: PUSH
25310: LD_INT 15
25312: PUSH
25313: LD_INT 16
25315: PUSH
25316: LD_INT 17
25318: PUSH
25319: LD_INT 18
25321: PUSH
25322: LD_INT 19
25324: PUSH
25325: LD_INT 20
25327: PUSH
25328: LD_INT 21
25330: PUSH
25331: LD_INT 22
25333: PUSH
25334: LD_INT 23
25336: PUSH
25337: LD_INT 24
25339: PUSH
25340: LD_INT 25
25342: PUSH
25343: LD_INT 26
25345: PUSH
25346: LD_INT 28
25348: PUSH
25349: LD_INT 30
25351: PUSH
25352: LD_INT 31
25354: PUSH
25355: LD_INT 32
25357: PUSH
25358: LD_INT 36
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 101
25394: PUSH
25395: LD_INT 102
25397: PUSH
25398: LD_INT 103
25400: PUSH
25401: LD_INT 104
25403: PUSH
25404: LD_INT 105
25406: PUSH
25407: LD_INT 106
25409: PUSH
25410: LD_INT 107
25412: PUSH
25413: LD_INT 108
25415: PUSH
25416: LD_INT 109
25418: PUSH
25419: LD_INT 110
25421: PUSH
25422: LD_INT 111
25424: PUSH
25425: LD_INT 112
25427: PUSH
25428: LD_INT 114
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: ST_TO_ADDR
25450: GO 27237
25452: LD_INT 11
25454: DOUBLE
25455: EQUAL
25456: IFTRUE 25460
25458: GO 25652
25460: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
25461: LD_ADDR_VAR 0 1
25465: PUSH
25466: LD_INT 2
25468: PUSH
25469: LD_INT 3
25471: PUSH
25472: LD_INT 4
25474: PUSH
25475: LD_INT 5
25477: PUSH
25478: LD_INT 6
25480: PUSH
25481: LD_INT 7
25483: PUSH
25484: LD_INT 8
25486: PUSH
25487: LD_INT 9
25489: PUSH
25490: LD_INT 10
25492: PUSH
25493: LD_INT 11
25495: PUSH
25496: LD_INT 12
25498: PUSH
25499: LD_INT 13
25501: PUSH
25502: LD_INT 14
25504: PUSH
25505: LD_INT 15
25507: PUSH
25508: LD_INT 16
25510: PUSH
25511: LD_INT 17
25513: PUSH
25514: LD_INT 18
25516: PUSH
25517: LD_INT 19
25519: PUSH
25520: LD_INT 20
25522: PUSH
25523: LD_INT 21
25525: PUSH
25526: LD_INT 22
25528: PUSH
25529: LD_INT 23
25531: PUSH
25532: LD_INT 24
25534: PUSH
25535: LD_INT 25
25537: PUSH
25538: LD_INT 26
25540: PUSH
25541: LD_INT 28
25543: PUSH
25544: LD_INT 30
25546: PUSH
25547: LD_INT 31
25549: PUSH
25550: LD_INT 32
25552: PUSH
25553: LD_INT 34
25555: PUSH
25556: LD_INT 36
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 101
25594: PUSH
25595: LD_INT 102
25597: PUSH
25598: LD_INT 103
25600: PUSH
25601: LD_INT 104
25603: PUSH
25604: LD_INT 105
25606: PUSH
25607: LD_INT 106
25609: PUSH
25610: LD_INT 107
25612: PUSH
25613: LD_INT 108
25615: PUSH
25616: LD_INT 109
25618: PUSH
25619: LD_INT 110
25621: PUSH
25622: LD_INT 111
25624: PUSH
25625: LD_INT 112
25627: PUSH
25628: LD_INT 114
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: ST_TO_ADDR
25650: GO 27237
25652: LD_INT 12
25654: DOUBLE
25655: EQUAL
25656: IFTRUE 25660
25658: GO 25868
25660: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
25661: LD_ADDR_VAR 0 1
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: LD_INT 2
25671: PUSH
25672: LD_INT 3
25674: PUSH
25675: LD_INT 4
25677: PUSH
25678: LD_INT 5
25680: PUSH
25681: LD_INT 6
25683: PUSH
25684: LD_INT 7
25686: PUSH
25687: LD_INT 8
25689: PUSH
25690: LD_INT 9
25692: PUSH
25693: LD_INT 10
25695: PUSH
25696: LD_INT 11
25698: PUSH
25699: LD_INT 12
25701: PUSH
25702: LD_INT 13
25704: PUSH
25705: LD_INT 14
25707: PUSH
25708: LD_INT 15
25710: PUSH
25711: LD_INT 16
25713: PUSH
25714: LD_INT 17
25716: PUSH
25717: LD_INT 18
25719: PUSH
25720: LD_INT 19
25722: PUSH
25723: LD_INT 20
25725: PUSH
25726: LD_INT 21
25728: PUSH
25729: LD_INT 22
25731: PUSH
25732: LD_INT 23
25734: PUSH
25735: LD_INT 24
25737: PUSH
25738: LD_INT 25
25740: PUSH
25741: LD_INT 26
25743: PUSH
25744: LD_INT 27
25746: PUSH
25747: LD_INT 28
25749: PUSH
25750: LD_INT 30
25752: PUSH
25753: LD_INT 31
25755: PUSH
25756: LD_INT 32
25758: PUSH
25759: LD_INT 33
25761: PUSH
25762: LD_INT 34
25764: PUSH
25765: LD_INT 36
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 101
25806: PUSH
25807: LD_INT 102
25809: PUSH
25810: LD_INT 103
25812: PUSH
25813: LD_INT 104
25815: PUSH
25816: LD_INT 105
25818: PUSH
25819: LD_INT 106
25821: PUSH
25822: LD_INT 107
25824: PUSH
25825: LD_INT 108
25827: PUSH
25828: LD_INT 109
25830: PUSH
25831: LD_INT 110
25833: PUSH
25834: LD_INT 111
25836: PUSH
25837: LD_INT 112
25839: PUSH
25840: LD_INT 113
25842: PUSH
25843: LD_INT 114
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: ST_TO_ADDR
25866: GO 27237
25868: LD_INT 13
25870: DOUBLE
25871: EQUAL
25872: IFTRUE 25876
25874: GO 26072
25876: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
25877: LD_ADDR_VAR 0 1
25881: PUSH
25882: LD_INT 1
25884: PUSH
25885: LD_INT 2
25887: PUSH
25888: LD_INT 3
25890: PUSH
25891: LD_INT 4
25893: PUSH
25894: LD_INT 5
25896: PUSH
25897: LD_INT 8
25899: PUSH
25900: LD_INT 9
25902: PUSH
25903: LD_INT 10
25905: PUSH
25906: LD_INT 11
25908: PUSH
25909: LD_INT 12
25911: PUSH
25912: LD_INT 14
25914: PUSH
25915: LD_INT 15
25917: PUSH
25918: LD_INT 16
25920: PUSH
25921: LD_INT 17
25923: PUSH
25924: LD_INT 18
25926: PUSH
25927: LD_INT 19
25929: PUSH
25930: LD_INT 20
25932: PUSH
25933: LD_INT 21
25935: PUSH
25936: LD_INT 22
25938: PUSH
25939: LD_INT 23
25941: PUSH
25942: LD_INT 24
25944: PUSH
25945: LD_INT 25
25947: PUSH
25948: LD_INT 26
25950: PUSH
25951: LD_INT 27
25953: PUSH
25954: LD_INT 28
25956: PUSH
25957: LD_INT 30
25959: PUSH
25960: LD_INT 31
25962: PUSH
25963: LD_INT 32
25965: PUSH
25966: LD_INT 33
25968: PUSH
25969: LD_INT 34
25971: PUSH
25972: LD_INT 36
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 101
26010: PUSH
26011: LD_INT 102
26013: PUSH
26014: LD_INT 103
26016: PUSH
26017: LD_INT 104
26019: PUSH
26020: LD_INT 105
26022: PUSH
26023: LD_INT 106
26025: PUSH
26026: LD_INT 107
26028: PUSH
26029: LD_INT 108
26031: PUSH
26032: LD_INT 109
26034: PUSH
26035: LD_INT 110
26037: PUSH
26038: LD_INT 111
26040: PUSH
26041: LD_INT 112
26043: PUSH
26044: LD_INT 113
26046: PUSH
26047: LD_INT 114
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: ST_TO_ADDR
26070: GO 27237
26072: LD_INT 14
26074: DOUBLE
26075: EQUAL
26076: IFTRUE 26080
26078: GO 26292
26080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
26081: LD_ADDR_VAR 0 1
26085: PUSH
26086: LD_INT 1
26088: PUSH
26089: LD_INT 2
26091: PUSH
26092: LD_INT 3
26094: PUSH
26095: LD_INT 4
26097: PUSH
26098: LD_INT 5
26100: PUSH
26101: LD_INT 6
26103: PUSH
26104: LD_INT 7
26106: PUSH
26107: LD_INT 8
26109: PUSH
26110: LD_INT 9
26112: PUSH
26113: LD_INT 10
26115: PUSH
26116: LD_INT 11
26118: PUSH
26119: LD_INT 12
26121: PUSH
26122: LD_INT 13
26124: PUSH
26125: LD_INT 14
26127: PUSH
26128: LD_INT 15
26130: PUSH
26131: LD_INT 16
26133: PUSH
26134: LD_INT 17
26136: PUSH
26137: LD_INT 18
26139: PUSH
26140: LD_INT 19
26142: PUSH
26143: LD_INT 20
26145: PUSH
26146: LD_INT 21
26148: PUSH
26149: LD_INT 22
26151: PUSH
26152: LD_INT 23
26154: PUSH
26155: LD_INT 24
26157: PUSH
26158: LD_INT 25
26160: PUSH
26161: LD_INT 26
26163: PUSH
26164: LD_INT 27
26166: PUSH
26167: LD_INT 28
26169: PUSH
26170: LD_INT 29
26172: PUSH
26173: LD_INT 30
26175: PUSH
26176: LD_INT 31
26178: PUSH
26179: LD_INT 32
26181: PUSH
26182: LD_INT 33
26184: PUSH
26185: LD_INT 34
26187: PUSH
26188: LD_INT 36
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 101
26230: PUSH
26231: LD_INT 102
26233: PUSH
26234: LD_INT 103
26236: PUSH
26237: LD_INT 104
26239: PUSH
26240: LD_INT 105
26242: PUSH
26243: LD_INT 106
26245: PUSH
26246: LD_INT 107
26248: PUSH
26249: LD_INT 108
26251: PUSH
26252: LD_INT 109
26254: PUSH
26255: LD_INT 110
26257: PUSH
26258: LD_INT 111
26260: PUSH
26261: LD_INT 112
26263: PUSH
26264: LD_INT 113
26266: PUSH
26267: LD_INT 114
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: ST_TO_ADDR
26290: GO 27237
26292: LD_INT 15
26294: DOUBLE
26295: EQUAL
26296: IFTRUE 26300
26298: GO 26512
26300: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
26301: LD_ADDR_VAR 0 1
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: LD_INT 2
26311: PUSH
26312: LD_INT 3
26314: PUSH
26315: LD_INT 4
26317: PUSH
26318: LD_INT 5
26320: PUSH
26321: LD_INT 6
26323: PUSH
26324: LD_INT 7
26326: PUSH
26327: LD_INT 8
26329: PUSH
26330: LD_INT 9
26332: PUSH
26333: LD_INT 10
26335: PUSH
26336: LD_INT 11
26338: PUSH
26339: LD_INT 12
26341: PUSH
26342: LD_INT 13
26344: PUSH
26345: LD_INT 14
26347: PUSH
26348: LD_INT 15
26350: PUSH
26351: LD_INT 16
26353: PUSH
26354: LD_INT 17
26356: PUSH
26357: LD_INT 18
26359: PUSH
26360: LD_INT 19
26362: PUSH
26363: LD_INT 20
26365: PUSH
26366: LD_INT 21
26368: PUSH
26369: LD_INT 22
26371: PUSH
26372: LD_INT 23
26374: PUSH
26375: LD_INT 24
26377: PUSH
26378: LD_INT 25
26380: PUSH
26381: LD_INT 26
26383: PUSH
26384: LD_INT 27
26386: PUSH
26387: LD_INT 28
26389: PUSH
26390: LD_INT 29
26392: PUSH
26393: LD_INT 30
26395: PUSH
26396: LD_INT 31
26398: PUSH
26399: LD_INT 32
26401: PUSH
26402: LD_INT 33
26404: PUSH
26405: LD_INT 34
26407: PUSH
26408: LD_INT 36
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 101
26450: PUSH
26451: LD_INT 102
26453: PUSH
26454: LD_INT 103
26456: PUSH
26457: LD_INT 104
26459: PUSH
26460: LD_INT 105
26462: PUSH
26463: LD_INT 106
26465: PUSH
26466: LD_INT 107
26468: PUSH
26469: LD_INT 108
26471: PUSH
26472: LD_INT 109
26474: PUSH
26475: LD_INT 110
26477: PUSH
26478: LD_INT 111
26480: PUSH
26481: LD_INT 112
26483: PUSH
26484: LD_INT 113
26486: PUSH
26487: LD_INT 114
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: ST_TO_ADDR
26510: GO 27237
26512: LD_INT 16
26514: DOUBLE
26515: EQUAL
26516: IFTRUE 26520
26518: GO 26644
26520: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
26521: LD_ADDR_VAR 0 1
26525: PUSH
26526: LD_INT 2
26528: PUSH
26529: LD_INT 4
26531: PUSH
26532: LD_INT 5
26534: PUSH
26535: LD_INT 7
26537: PUSH
26538: LD_INT 11
26540: PUSH
26541: LD_INT 12
26543: PUSH
26544: LD_INT 15
26546: PUSH
26547: LD_INT 16
26549: PUSH
26550: LD_INT 20
26552: PUSH
26553: LD_INT 21
26555: PUSH
26556: LD_INT 22
26558: PUSH
26559: LD_INT 23
26561: PUSH
26562: LD_INT 25
26564: PUSH
26565: LD_INT 26
26567: PUSH
26568: LD_INT 30
26570: PUSH
26571: LD_INT 31
26573: PUSH
26574: LD_INT 32
26576: PUSH
26577: LD_INT 33
26579: PUSH
26580: LD_INT 34
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 101
26606: PUSH
26607: LD_INT 102
26609: PUSH
26610: LD_INT 103
26612: PUSH
26613: LD_INT 106
26615: PUSH
26616: LD_INT 108
26618: PUSH
26619: LD_INT 112
26621: PUSH
26622: LD_INT 113
26624: PUSH
26625: LD_INT 114
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: ST_TO_ADDR
26642: GO 27237
26644: LD_INT 17
26646: DOUBLE
26647: EQUAL
26648: IFTRUE 26652
26650: GO 26864
26652: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
26653: LD_ADDR_VAR 0 1
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: LD_INT 2
26663: PUSH
26664: LD_INT 3
26666: PUSH
26667: LD_INT 4
26669: PUSH
26670: LD_INT 5
26672: PUSH
26673: LD_INT 6
26675: PUSH
26676: LD_INT 7
26678: PUSH
26679: LD_INT 8
26681: PUSH
26682: LD_INT 9
26684: PUSH
26685: LD_INT 10
26687: PUSH
26688: LD_INT 11
26690: PUSH
26691: LD_INT 12
26693: PUSH
26694: LD_INT 13
26696: PUSH
26697: LD_INT 14
26699: PUSH
26700: LD_INT 15
26702: PUSH
26703: LD_INT 16
26705: PUSH
26706: LD_INT 17
26708: PUSH
26709: LD_INT 18
26711: PUSH
26712: LD_INT 19
26714: PUSH
26715: LD_INT 20
26717: PUSH
26718: LD_INT 21
26720: PUSH
26721: LD_INT 22
26723: PUSH
26724: LD_INT 23
26726: PUSH
26727: LD_INT 24
26729: PUSH
26730: LD_INT 25
26732: PUSH
26733: LD_INT 26
26735: PUSH
26736: LD_INT 27
26738: PUSH
26739: LD_INT 28
26741: PUSH
26742: LD_INT 29
26744: PUSH
26745: LD_INT 30
26747: PUSH
26748: LD_INT 31
26750: PUSH
26751: LD_INT 32
26753: PUSH
26754: LD_INT 33
26756: PUSH
26757: LD_INT 34
26759: PUSH
26760: LD_INT 36
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 101
26802: PUSH
26803: LD_INT 102
26805: PUSH
26806: LD_INT 103
26808: PUSH
26809: LD_INT 104
26811: PUSH
26812: LD_INT 105
26814: PUSH
26815: LD_INT 106
26817: PUSH
26818: LD_INT 107
26820: PUSH
26821: LD_INT 108
26823: PUSH
26824: LD_INT 109
26826: PUSH
26827: LD_INT 110
26829: PUSH
26830: LD_INT 111
26832: PUSH
26833: LD_INT 112
26835: PUSH
26836: LD_INT 113
26838: PUSH
26839: LD_INT 114
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: ST_TO_ADDR
26862: GO 27237
26864: LD_INT 18
26866: DOUBLE
26867: EQUAL
26868: IFTRUE 26872
26870: GO 27008
26872: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
26873: LD_ADDR_VAR 0 1
26877: PUSH
26878: LD_INT 2
26880: PUSH
26881: LD_INT 4
26883: PUSH
26884: LD_INT 5
26886: PUSH
26887: LD_INT 7
26889: PUSH
26890: LD_INT 11
26892: PUSH
26893: LD_INT 12
26895: PUSH
26896: LD_INT 15
26898: PUSH
26899: LD_INT 16
26901: PUSH
26902: LD_INT 20
26904: PUSH
26905: LD_INT 21
26907: PUSH
26908: LD_INT 22
26910: PUSH
26911: LD_INT 23
26913: PUSH
26914: LD_INT 25
26916: PUSH
26917: LD_INT 26
26919: PUSH
26920: LD_INT 30
26922: PUSH
26923: LD_INT 31
26925: PUSH
26926: LD_INT 32
26928: PUSH
26929: LD_INT 33
26931: PUSH
26932: LD_INT 34
26934: PUSH
26935: LD_INT 35
26937: PUSH
26938: LD_INT 36
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 101
26966: PUSH
26967: LD_INT 102
26969: PUSH
26970: LD_INT 103
26972: PUSH
26973: LD_INT 106
26975: PUSH
26976: LD_INT 108
26978: PUSH
26979: LD_INT 112
26981: PUSH
26982: LD_INT 113
26984: PUSH
26985: LD_INT 114
26987: PUSH
26988: LD_INT 115
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: ST_TO_ADDR
27006: GO 27237
27008: LD_INT 19
27010: DOUBLE
27011: EQUAL
27012: IFTRUE 27016
27014: GO 27236
27016: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
27017: LD_ADDR_VAR 0 1
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: LD_INT 2
27027: PUSH
27028: LD_INT 3
27030: PUSH
27031: LD_INT 4
27033: PUSH
27034: LD_INT 5
27036: PUSH
27037: LD_INT 6
27039: PUSH
27040: LD_INT 7
27042: PUSH
27043: LD_INT 8
27045: PUSH
27046: LD_INT 9
27048: PUSH
27049: LD_INT 10
27051: PUSH
27052: LD_INT 11
27054: PUSH
27055: LD_INT 12
27057: PUSH
27058: LD_INT 13
27060: PUSH
27061: LD_INT 14
27063: PUSH
27064: LD_INT 15
27066: PUSH
27067: LD_INT 16
27069: PUSH
27070: LD_INT 17
27072: PUSH
27073: LD_INT 18
27075: PUSH
27076: LD_INT 19
27078: PUSH
27079: LD_INT 20
27081: PUSH
27082: LD_INT 21
27084: PUSH
27085: LD_INT 22
27087: PUSH
27088: LD_INT 23
27090: PUSH
27091: LD_INT 24
27093: PUSH
27094: LD_INT 25
27096: PUSH
27097: LD_INT 26
27099: PUSH
27100: LD_INT 27
27102: PUSH
27103: LD_INT 28
27105: PUSH
27106: LD_INT 29
27108: PUSH
27109: LD_INT 30
27111: PUSH
27112: LD_INT 31
27114: PUSH
27115: LD_INT 32
27117: PUSH
27118: LD_INT 33
27120: PUSH
27121: LD_INT 34
27123: PUSH
27124: LD_INT 35
27126: PUSH
27127: LD_INT 36
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 101
27170: PUSH
27171: LD_INT 102
27173: PUSH
27174: LD_INT 103
27176: PUSH
27177: LD_INT 104
27179: PUSH
27180: LD_INT 105
27182: PUSH
27183: LD_INT 106
27185: PUSH
27186: LD_INT 107
27188: PUSH
27189: LD_INT 108
27191: PUSH
27192: LD_INT 109
27194: PUSH
27195: LD_INT 110
27197: PUSH
27198: LD_INT 111
27200: PUSH
27201: LD_INT 112
27203: PUSH
27204: LD_INT 113
27206: PUSH
27207: LD_INT 114
27209: PUSH
27210: LD_INT 115
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: ST_TO_ADDR
27234: GO 27237
27236: POP
// end else
27237: GO 27456
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
27239: LD_ADDR_VAR 0 1
27243: PUSH
27244: LD_INT 1
27246: PUSH
27247: LD_INT 2
27249: PUSH
27250: LD_INT 3
27252: PUSH
27253: LD_INT 4
27255: PUSH
27256: LD_INT 5
27258: PUSH
27259: LD_INT 6
27261: PUSH
27262: LD_INT 7
27264: PUSH
27265: LD_INT 8
27267: PUSH
27268: LD_INT 9
27270: PUSH
27271: LD_INT 10
27273: PUSH
27274: LD_INT 11
27276: PUSH
27277: LD_INT 12
27279: PUSH
27280: LD_INT 13
27282: PUSH
27283: LD_INT 14
27285: PUSH
27286: LD_INT 15
27288: PUSH
27289: LD_INT 16
27291: PUSH
27292: LD_INT 17
27294: PUSH
27295: LD_INT 18
27297: PUSH
27298: LD_INT 19
27300: PUSH
27301: LD_INT 20
27303: PUSH
27304: LD_INT 21
27306: PUSH
27307: LD_INT 22
27309: PUSH
27310: LD_INT 23
27312: PUSH
27313: LD_INT 24
27315: PUSH
27316: LD_INT 25
27318: PUSH
27319: LD_INT 26
27321: PUSH
27322: LD_INT 27
27324: PUSH
27325: LD_INT 28
27327: PUSH
27328: LD_INT 29
27330: PUSH
27331: LD_INT 30
27333: PUSH
27334: LD_INT 31
27336: PUSH
27337: LD_INT 32
27339: PUSH
27340: LD_INT 33
27342: PUSH
27343: LD_INT 34
27345: PUSH
27346: LD_INT 35
27348: PUSH
27349: LD_INT 36
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 101
27392: PUSH
27393: LD_INT 102
27395: PUSH
27396: LD_INT 103
27398: PUSH
27399: LD_INT 104
27401: PUSH
27402: LD_INT 105
27404: PUSH
27405: LD_INT 106
27407: PUSH
27408: LD_INT 107
27410: PUSH
27411: LD_INT 108
27413: PUSH
27414: LD_INT 109
27416: PUSH
27417: LD_INT 110
27419: PUSH
27420: LD_INT 111
27422: PUSH
27423: LD_INT 112
27425: PUSH
27426: LD_INT 113
27428: PUSH
27429: LD_INT 114
27431: PUSH
27432: LD_INT 115
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: ST_TO_ADDR
// if result then
27456: LD_VAR 0 1
27460: IFFALSE 27749
// begin normal :=  ;
27462: LD_ADDR_VAR 0 3
27466: PUSH
27467: LD_STRING 
27469: ST_TO_ADDR
// hardcore :=  ;
27470: LD_ADDR_VAR 0 4
27474: PUSH
27475: LD_STRING 
27477: ST_TO_ADDR
// for i = 1 to normalCounter do
27478: LD_ADDR_VAR 0 5
27482: PUSH
27483: DOUBLE
27484: LD_INT 1
27486: DEC
27487: ST_TO_ADDR
27488: LD_EXP 72
27492: PUSH
27493: FOR_TO
27494: IFFALSE 27595
// begin tmp := 0 ;
27496: LD_ADDR_VAR 0 2
27500: PUSH
27501: LD_STRING 0
27503: ST_TO_ADDR
// if result [ 1 ] then
27504: LD_VAR 0 1
27508: PUSH
27509: LD_INT 1
27511: ARRAY
27512: IFFALSE 27577
// if result [ 1 ] [ 1 ] = i then
27514: LD_VAR 0 1
27518: PUSH
27519: LD_INT 1
27521: ARRAY
27522: PUSH
27523: LD_INT 1
27525: ARRAY
27526: PUSH
27527: LD_VAR 0 5
27531: EQUAL
27532: IFFALSE 27577
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27534: LD_ADDR_VAR 0 1
27538: PUSH
27539: LD_VAR 0 1
27543: PPUSH
27544: LD_INT 1
27546: PPUSH
27547: LD_VAR 0 1
27551: PUSH
27552: LD_INT 1
27554: ARRAY
27555: PPUSH
27556: LD_INT 1
27558: PPUSH
27559: CALL_OW 3
27563: PPUSH
27564: CALL_OW 1
27568: ST_TO_ADDR
// tmp := 1 ;
27569: LD_ADDR_VAR 0 2
27573: PUSH
27574: LD_STRING 1
27576: ST_TO_ADDR
// end ; normal := normal & tmp ;
27577: LD_ADDR_VAR 0 3
27581: PUSH
27582: LD_VAR 0 3
27586: PUSH
27587: LD_VAR 0 2
27591: STR
27592: ST_TO_ADDR
// end ;
27593: GO 27493
27595: POP
27596: POP
// for i = 1 to hardcoreCounter do
27597: LD_ADDR_VAR 0 5
27601: PUSH
27602: DOUBLE
27603: LD_INT 1
27605: DEC
27606: ST_TO_ADDR
27607: LD_EXP 73
27611: PUSH
27612: FOR_TO
27613: IFFALSE 27718
// begin tmp := 0 ;
27615: LD_ADDR_VAR 0 2
27619: PUSH
27620: LD_STRING 0
27622: ST_TO_ADDR
// if result [ 2 ] then
27623: LD_VAR 0 1
27627: PUSH
27628: LD_INT 2
27630: ARRAY
27631: IFFALSE 27700
// if result [ 2 ] [ 1 ] = 100 + i then
27633: LD_VAR 0 1
27637: PUSH
27638: LD_INT 2
27640: ARRAY
27641: PUSH
27642: LD_INT 1
27644: ARRAY
27645: PUSH
27646: LD_INT 100
27648: PUSH
27649: LD_VAR 0 5
27653: PLUS
27654: EQUAL
27655: IFFALSE 27700
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27657: LD_ADDR_VAR 0 1
27661: PUSH
27662: LD_VAR 0 1
27666: PPUSH
27667: LD_INT 2
27669: PPUSH
27670: LD_VAR 0 1
27674: PUSH
27675: LD_INT 2
27677: ARRAY
27678: PPUSH
27679: LD_INT 1
27681: PPUSH
27682: CALL_OW 3
27686: PPUSH
27687: CALL_OW 1
27691: ST_TO_ADDR
// tmp := 1 ;
27692: LD_ADDR_VAR 0 2
27696: PUSH
27697: LD_STRING 1
27699: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27700: LD_ADDR_VAR 0 4
27704: PUSH
27705: LD_VAR 0 4
27709: PUSH
27710: LD_VAR 0 2
27714: STR
27715: ST_TO_ADDR
// end ;
27716: GO 27612
27718: POP
27719: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
27720: LD_STRING getStreamItemsFromMission("
27722: PUSH
27723: LD_VAR 0 3
27727: STR
27728: PUSH
27729: LD_STRING ","
27731: STR
27732: PUSH
27733: LD_VAR 0 4
27737: STR
27738: PUSH
27739: LD_STRING ")
27741: STR
27742: PPUSH
27743: CALL_OW 559
// end else
27747: GO 27756
// ToLua ( getStreamItemsFromMission("","") ) ;
27749: LD_STRING getStreamItemsFromMission("","")
27751: PPUSH
27752: CALL_OW 559
// end ;
27756: LD_VAR 0 1
27760: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27761: LD_EXP 71
27765: PUSH
27766: LD_EXP 76
27770: AND
27771: IFFALSE 27895
27773: GO 27775
27775: DISABLE
27776: LD_INT 0
27778: PPUSH
27779: PPUSH
// begin enable ;
27780: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27781: LD_ADDR_VAR 0 2
27785: PUSH
27786: LD_INT 22
27788: PUSH
27789: LD_OWVAR 2
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: LD_INT 34
27803: PUSH
27804: LD_INT 7
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 34
27813: PUSH
27814: LD_INT 45
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 34
27823: PUSH
27824: LD_INT 28
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 34
27833: PUSH
27834: LD_INT 47
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PPUSH
27852: CALL_OW 69
27856: ST_TO_ADDR
// if not tmp then
27857: LD_VAR 0 2
27861: NOT
27862: IFFALSE 27866
// exit ;
27864: GO 27895
// for i in tmp do
27866: LD_ADDR_VAR 0 1
27870: PUSH
27871: LD_VAR 0 2
27875: PUSH
27876: FOR_IN
27877: IFFALSE 27893
// begin SetLives ( i , 0 ) ;
27879: LD_VAR 0 1
27883: PPUSH
27884: LD_INT 0
27886: PPUSH
27887: CALL_OW 234
// end ;
27891: GO 27876
27893: POP
27894: POP
// end ;
27895: PPOPN 2
27897: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27898: LD_EXP 71
27902: PUSH
27903: LD_EXP 77
27907: AND
27908: IFFALSE 27992
27910: GO 27912
27912: DISABLE
27913: LD_INT 0
27915: PPUSH
27916: PPUSH
// begin enable ;
27917: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27918: LD_ADDR_VAR 0 2
27922: PUSH
27923: LD_INT 22
27925: PUSH
27926: LD_OWVAR 2
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 32
27937: PUSH
27938: LD_INT 3
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PPUSH
27949: CALL_OW 69
27953: ST_TO_ADDR
// if not tmp then
27954: LD_VAR 0 2
27958: NOT
27959: IFFALSE 27963
// exit ;
27961: GO 27992
// for i in tmp do
27963: LD_ADDR_VAR 0 1
27967: PUSH
27968: LD_VAR 0 2
27972: PUSH
27973: FOR_IN
27974: IFFALSE 27990
// begin SetLives ( i , 0 ) ;
27976: LD_VAR 0 1
27980: PPUSH
27981: LD_INT 0
27983: PPUSH
27984: CALL_OW 234
// end ;
27988: GO 27973
27990: POP
27991: POP
// end ;
27992: PPOPN 2
27994: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27995: LD_EXP 71
27999: PUSH
28000: LD_EXP 74
28004: AND
28005: IFFALSE 28098
28007: GO 28009
28009: DISABLE
28010: LD_INT 0
28012: PPUSH
// begin enable ;
28013: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28014: LD_ADDR_VAR 0 1
28018: PUSH
28019: LD_INT 22
28021: PUSH
28022: LD_OWVAR 2
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 2
28033: PUSH
28034: LD_INT 25
28036: PUSH
28037: LD_INT 5
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 25
28046: PUSH
28047: LD_INT 9
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 25
28056: PUSH
28057: LD_INT 8
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PPUSH
28074: CALL_OW 69
28078: PUSH
28079: FOR_IN
28080: IFFALSE 28096
// begin SetClass ( i , 1 ) ;
28082: LD_VAR 0 1
28086: PPUSH
28087: LD_INT 1
28089: PPUSH
28090: CALL_OW 336
// end ;
28094: GO 28079
28096: POP
28097: POP
// end ;
28098: PPOPN 1
28100: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28101: LD_EXP 71
28105: PUSH
28106: LD_EXP 75
28110: AND
28111: PUSH
28112: LD_OWVAR 65
28116: PUSH
28117: LD_INT 7
28119: LESS
28120: AND
28121: IFFALSE 28135
28123: GO 28125
28125: DISABLE
// begin enable ;
28126: ENABLE
// game_speed := 7 ;
28127: LD_ADDR_OWVAR 65
28131: PUSH
28132: LD_INT 7
28134: ST_TO_ADDR
// end ;
28135: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28136: LD_EXP 71
28140: PUSH
28141: LD_EXP 78
28145: AND
28146: IFFALSE 28348
28148: GO 28150
28150: DISABLE
28151: LD_INT 0
28153: PPUSH
28154: PPUSH
28155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28156: LD_ADDR_VAR 0 3
28160: PUSH
28161: LD_INT 81
28163: PUSH
28164: LD_OWVAR 2
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 21
28175: PUSH
28176: LD_INT 1
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PPUSH
28187: CALL_OW 69
28191: ST_TO_ADDR
// if not tmp then
28192: LD_VAR 0 3
28196: NOT
28197: IFFALSE 28201
// exit ;
28199: GO 28348
// if tmp > 5 then
28201: LD_VAR 0 3
28205: PUSH
28206: LD_INT 5
28208: GREATER
28209: IFFALSE 28221
// k := 5 else
28211: LD_ADDR_VAR 0 2
28215: PUSH
28216: LD_INT 5
28218: ST_TO_ADDR
28219: GO 28231
// k := tmp ;
28221: LD_ADDR_VAR 0 2
28225: PUSH
28226: LD_VAR 0 3
28230: ST_TO_ADDR
// for i := 1 to k do
28231: LD_ADDR_VAR 0 1
28235: PUSH
28236: DOUBLE
28237: LD_INT 1
28239: DEC
28240: ST_TO_ADDR
28241: LD_VAR 0 2
28245: PUSH
28246: FOR_TO
28247: IFFALSE 28346
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28249: LD_VAR 0 3
28253: PUSH
28254: LD_VAR 0 1
28258: ARRAY
28259: PPUSH
28260: LD_VAR 0 1
28264: PUSH
28265: LD_INT 4
28267: MOD
28268: PUSH
28269: LD_INT 1
28271: PLUS
28272: PPUSH
28273: CALL_OW 259
28277: PUSH
28278: LD_INT 10
28280: LESS
28281: IFFALSE 28344
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28283: LD_VAR 0 3
28287: PUSH
28288: LD_VAR 0 1
28292: ARRAY
28293: PPUSH
28294: LD_VAR 0 1
28298: PUSH
28299: LD_INT 4
28301: MOD
28302: PUSH
28303: LD_INT 1
28305: PLUS
28306: PPUSH
28307: LD_VAR 0 3
28311: PUSH
28312: LD_VAR 0 1
28316: ARRAY
28317: PPUSH
28318: LD_VAR 0 1
28322: PUSH
28323: LD_INT 4
28325: MOD
28326: PUSH
28327: LD_INT 1
28329: PLUS
28330: PPUSH
28331: CALL_OW 259
28335: PUSH
28336: LD_INT 1
28338: PLUS
28339: PPUSH
28340: CALL_OW 237
28344: GO 28246
28346: POP
28347: POP
// end ;
28348: PPOPN 3
28350: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28351: LD_EXP 71
28355: PUSH
28356: LD_EXP 79
28360: AND
28361: IFFALSE 28381
28363: GO 28365
28365: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28366: LD_INT 4
28368: PPUSH
28369: LD_OWVAR 2
28373: PPUSH
28374: LD_INT 0
28376: PPUSH
28377: CALL_OW 324
28381: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28382: LD_EXP 71
28386: PUSH
28387: LD_EXP 108
28391: AND
28392: IFFALSE 28412
28394: GO 28396
28396: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28397: LD_INT 19
28399: PPUSH
28400: LD_OWVAR 2
28404: PPUSH
28405: LD_INT 0
28407: PPUSH
28408: CALL_OW 324
28412: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28413: LD_EXP 71
28417: PUSH
28418: LD_EXP 80
28422: AND
28423: IFFALSE 28525
28425: GO 28427
28427: DISABLE
28428: LD_INT 0
28430: PPUSH
28431: PPUSH
// begin enable ;
28432: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28433: LD_ADDR_VAR 0 2
28437: PUSH
28438: LD_INT 22
28440: PUSH
28441: LD_OWVAR 2
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 2
28452: PUSH
28453: LD_INT 34
28455: PUSH
28456: LD_INT 11
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 34
28465: PUSH
28466: LD_INT 30
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PPUSH
28482: CALL_OW 69
28486: ST_TO_ADDR
// if not tmp then
28487: LD_VAR 0 2
28491: NOT
28492: IFFALSE 28496
// exit ;
28494: GO 28525
// for i in tmp do
28496: LD_ADDR_VAR 0 1
28500: PUSH
28501: LD_VAR 0 2
28505: PUSH
28506: FOR_IN
28507: IFFALSE 28523
// begin SetLives ( i , 0 ) ;
28509: LD_VAR 0 1
28513: PPUSH
28514: LD_INT 0
28516: PPUSH
28517: CALL_OW 234
// end ;
28521: GO 28506
28523: POP
28524: POP
// end ;
28525: PPOPN 2
28527: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28528: LD_EXP 71
28532: PUSH
28533: LD_EXP 81
28537: AND
28538: IFFALSE 28558
28540: GO 28542
28542: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28543: LD_INT 32
28545: PPUSH
28546: LD_OWVAR 2
28550: PPUSH
28551: LD_INT 0
28553: PPUSH
28554: CALL_OW 324
28558: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28559: LD_EXP 71
28563: PUSH
28564: LD_EXP 82
28568: AND
28569: IFFALSE 28750
28571: GO 28573
28573: DISABLE
28574: LD_INT 0
28576: PPUSH
28577: PPUSH
28578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28579: LD_ADDR_VAR 0 2
28583: PUSH
28584: LD_INT 22
28586: PUSH
28587: LD_OWVAR 2
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 33
28598: PUSH
28599: LD_INT 3
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PPUSH
28610: CALL_OW 69
28614: ST_TO_ADDR
// if not tmp then
28615: LD_VAR 0 2
28619: NOT
28620: IFFALSE 28624
// exit ;
28622: GO 28750
// side := 0 ;
28624: LD_ADDR_VAR 0 3
28628: PUSH
28629: LD_INT 0
28631: ST_TO_ADDR
// for i := 1 to 8 do
28632: LD_ADDR_VAR 0 1
28636: PUSH
28637: DOUBLE
28638: LD_INT 1
28640: DEC
28641: ST_TO_ADDR
28642: LD_INT 8
28644: PUSH
28645: FOR_TO
28646: IFFALSE 28694
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28648: LD_OWVAR 2
28652: PUSH
28653: LD_VAR 0 1
28657: NONEQUAL
28658: PUSH
28659: LD_OWVAR 2
28663: PPUSH
28664: LD_VAR 0 1
28668: PPUSH
28669: CALL_OW 81
28673: PUSH
28674: LD_INT 2
28676: EQUAL
28677: AND
28678: IFFALSE 28692
// begin side := i ;
28680: LD_ADDR_VAR 0 3
28684: PUSH
28685: LD_VAR 0 1
28689: ST_TO_ADDR
// break ;
28690: GO 28694
// end ;
28692: GO 28645
28694: POP
28695: POP
// if not side then
28696: LD_VAR 0 3
28700: NOT
28701: IFFALSE 28705
// exit ;
28703: GO 28750
// for i := 1 to tmp do
28705: LD_ADDR_VAR 0 1
28709: PUSH
28710: DOUBLE
28711: LD_INT 1
28713: DEC
28714: ST_TO_ADDR
28715: LD_VAR 0 2
28719: PUSH
28720: FOR_TO
28721: IFFALSE 28748
// if Prob ( 60 ) then
28723: LD_INT 60
28725: PPUSH
28726: CALL_OW 13
28730: IFFALSE 28746
// SetSide ( i , side ) ;
28732: LD_VAR 0 1
28736: PPUSH
28737: LD_VAR 0 3
28741: PPUSH
28742: CALL_OW 235
28746: GO 28720
28748: POP
28749: POP
// end ;
28750: PPOPN 3
28752: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28753: LD_EXP 71
28757: PUSH
28758: LD_EXP 84
28762: AND
28763: IFFALSE 28882
28765: GO 28767
28767: DISABLE
28768: LD_INT 0
28770: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28771: LD_ADDR_VAR 0 1
28775: PUSH
28776: LD_INT 22
28778: PUSH
28779: LD_OWVAR 2
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 21
28790: PUSH
28791: LD_INT 1
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 3
28800: PUSH
28801: LD_INT 23
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: LIST
28819: PPUSH
28820: CALL_OW 69
28824: PUSH
28825: FOR_IN
28826: IFFALSE 28880
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28828: LD_VAR 0 1
28832: PPUSH
28833: CALL_OW 257
28837: PUSH
28838: LD_INT 1
28840: PUSH
28841: LD_INT 2
28843: PUSH
28844: LD_INT 3
28846: PUSH
28847: LD_INT 4
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: IN
28856: IFFALSE 28878
// SetClass ( un , rand ( 1 , 4 ) ) ;
28858: LD_VAR 0 1
28862: PPUSH
28863: LD_INT 1
28865: PPUSH
28866: LD_INT 4
28868: PPUSH
28869: CALL_OW 12
28873: PPUSH
28874: CALL_OW 336
28878: GO 28825
28880: POP
28881: POP
// end ;
28882: PPOPN 1
28884: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28885: LD_EXP 71
28889: PUSH
28890: LD_EXP 83
28894: AND
28895: IFFALSE 28974
28897: GO 28899
28899: DISABLE
28900: LD_INT 0
28902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28903: LD_ADDR_VAR 0 1
28907: PUSH
28908: LD_INT 22
28910: PUSH
28911: LD_OWVAR 2
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 21
28922: PUSH
28923: LD_INT 3
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PPUSH
28934: CALL_OW 69
28938: ST_TO_ADDR
// if not tmp then
28939: LD_VAR 0 1
28943: NOT
28944: IFFALSE 28948
// exit ;
28946: GO 28974
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28948: LD_VAR 0 1
28952: PUSH
28953: LD_INT 1
28955: PPUSH
28956: LD_VAR 0 1
28960: PPUSH
28961: CALL_OW 12
28965: ARRAY
28966: PPUSH
28967: LD_INT 100
28969: PPUSH
28970: CALL_OW 234
// end ;
28974: PPOPN 1
28976: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28977: LD_EXP 71
28981: PUSH
28982: LD_EXP 85
28986: AND
28987: IFFALSE 29085
28989: GO 28991
28991: DISABLE
28992: LD_INT 0
28994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28995: LD_ADDR_VAR 0 1
28999: PUSH
29000: LD_INT 22
29002: PUSH
29003: LD_OWVAR 2
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 21
29014: PUSH
29015: LD_INT 1
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PPUSH
29026: CALL_OW 69
29030: ST_TO_ADDR
// if not tmp then
29031: LD_VAR 0 1
29035: NOT
29036: IFFALSE 29040
// exit ;
29038: GO 29085
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29040: LD_VAR 0 1
29044: PUSH
29045: LD_INT 1
29047: PPUSH
29048: LD_VAR 0 1
29052: PPUSH
29053: CALL_OW 12
29057: ARRAY
29058: PPUSH
29059: LD_INT 1
29061: PPUSH
29062: LD_INT 4
29064: PPUSH
29065: CALL_OW 12
29069: PPUSH
29070: LD_INT 3000
29072: PPUSH
29073: LD_INT 9000
29075: PPUSH
29076: CALL_OW 12
29080: PPUSH
29081: CALL_OW 492
// end ;
29085: PPOPN 1
29087: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29088: LD_EXP 71
29092: PUSH
29093: LD_EXP 86
29097: AND
29098: IFFALSE 29118
29100: GO 29102
29102: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29103: LD_INT 1
29105: PPUSH
29106: LD_OWVAR 2
29110: PPUSH
29111: LD_INT 0
29113: PPUSH
29114: CALL_OW 324
29118: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29119: LD_EXP 71
29123: PUSH
29124: LD_EXP 87
29128: AND
29129: IFFALSE 29212
29131: GO 29133
29133: DISABLE
29134: LD_INT 0
29136: PPUSH
29137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29138: LD_ADDR_VAR 0 2
29142: PUSH
29143: LD_INT 22
29145: PUSH
29146: LD_OWVAR 2
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 21
29157: PUSH
29158: LD_INT 3
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PPUSH
29169: CALL_OW 69
29173: ST_TO_ADDR
// if not tmp then
29174: LD_VAR 0 2
29178: NOT
29179: IFFALSE 29183
// exit ;
29181: GO 29212
// for i in tmp do
29183: LD_ADDR_VAR 0 1
29187: PUSH
29188: LD_VAR 0 2
29192: PUSH
29193: FOR_IN
29194: IFFALSE 29210
// SetBLevel ( i , 10 ) ;
29196: LD_VAR 0 1
29200: PPUSH
29201: LD_INT 10
29203: PPUSH
29204: CALL_OW 241
29208: GO 29193
29210: POP
29211: POP
// end ;
29212: PPOPN 2
29214: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29215: LD_EXP 71
29219: PUSH
29220: LD_EXP 88
29224: AND
29225: IFFALSE 29336
29227: GO 29229
29229: DISABLE
29230: LD_INT 0
29232: PPUSH
29233: PPUSH
29234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29235: LD_ADDR_VAR 0 3
29239: PUSH
29240: LD_INT 22
29242: PUSH
29243: LD_OWVAR 2
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 25
29254: PUSH
29255: LD_INT 1
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PPUSH
29266: CALL_OW 69
29270: ST_TO_ADDR
// if not tmp then
29271: LD_VAR 0 3
29275: NOT
29276: IFFALSE 29280
// exit ;
29278: GO 29336
// un := tmp [ rand ( 1 , tmp ) ] ;
29280: LD_ADDR_VAR 0 2
29284: PUSH
29285: LD_VAR 0 3
29289: PUSH
29290: LD_INT 1
29292: PPUSH
29293: LD_VAR 0 3
29297: PPUSH
29298: CALL_OW 12
29302: ARRAY
29303: ST_TO_ADDR
// if Crawls ( un ) then
29304: LD_VAR 0 2
29308: PPUSH
29309: CALL_OW 318
29313: IFFALSE 29324
// ComWalk ( un ) ;
29315: LD_VAR 0 2
29319: PPUSH
29320: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29324: LD_VAR 0 2
29328: PPUSH
29329: LD_INT 5
29331: PPUSH
29332: CALL_OW 336
// end ;
29336: PPOPN 3
29338: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
29339: LD_EXP 71
29343: PUSH
29344: LD_EXP 89
29348: AND
29349: PUSH
29350: LD_OWVAR 67
29354: PUSH
29355: LD_INT 3
29357: LESS
29358: AND
29359: IFFALSE 29378
29361: GO 29363
29363: DISABLE
// Difficulty := Difficulty + 1 ;
29364: LD_ADDR_OWVAR 67
29368: PUSH
29369: LD_OWVAR 67
29373: PUSH
29374: LD_INT 1
29376: PLUS
29377: ST_TO_ADDR
29378: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29379: LD_EXP 71
29383: PUSH
29384: LD_EXP 90
29388: AND
29389: IFFALSE 29492
29391: GO 29393
29393: DISABLE
29394: LD_INT 0
29396: PPUSH
// begin for i := 1 to 5 do
29397: LD_ADDR_VAR 0 1
29401: PUSH
29402: DOUBLE
29403: LD_INT 1
29405: DEC
29406: ST_TO_ADDR
29407: LD_INT 5
29409: PUSH
29410: FOR_TO
29411: IFFALSE 29490
// begin uc_nation := nation_nature ;
29413: LD_ADDR_OWVAR 21
29417: PUSH
29418: LD_INT 0
29420: ST_TO_ADDR
// uc_side := 0 ;
29421: LD_ADDR_OWVAR 20
29425: PUSH
29426: LD_INT 0
29428: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29429: LD_ADDR_OWVAR 29
29433: PUSH
29434: LD_INT 12
29436: PUSH
29437: LD_INT 12
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: ST_TO_ADDR
// hc_agressivity := 20 ;
29444: LD_ADDR_OWVAR 35
29448: PUSH
29449: LD_INT 20
29451: ST_TO_ADDR
// hc_class := class_tiger ;
29452: LD_ADDR_OWVAR 28
29456: PUSH
29457: LD_INT 14
29459: ST_TO_ADDR
// hc_gallery :=  ;
29460: LD_ADDR_OWVAR 33
29464: PUSH
29465: LD_STRING 
29467: ST_TO_ADDR
// hc_name :=  ;
29468: LD_ADDR_OWVAR 26
29472: PUSH
29473: LD_STRING 
29475: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29476: CALL_OW 44
29480: PPUSH
29481: LD_INT 0
29483: PPUSH
29484: CALL_OW 51
// end ;
29488: GO 29410
29490: POP
29491: POP
// end ;
29492: PPOPN 1
29494: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29495: LD_EXP 71
29499: PUSH
29500: LD_EXP 91
29504: AND
29505: IFFALSE 29514
29507: GO 29509
29509: DISABLE
// StreamSibBomb ;
29510: CALL 29515 0 0
29514: END
// export function StreamSibBomb ; var i , x , y ; begin
29515: LD_INT 0
29517: PPUSH
29518: PPUSH
29519: PPUSH
29520: PPUSH
// result := false ;
29521: LD_ADDR_VAR 0 1
29525: PUSH
29526: LD_INT 0
29528: ST_TO_ADDR
// for i := 1 to 16 do
29529: LD_ADDR_VAR 0 2
29533: PUSH
29534: DOUBLE
29535: LD_INT 1
29537: DEC
29538: ST_TO_ADDR
29539: LD_INT 16
29541: PUSH
29542: FOR_TO
29543: IFFALSE 29742
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29545: LD_ADDR_VAR 0 3
29549: PUSH
29550: LD_INT 10
29552: PUSH
29553: LD_INT 20
29555: PUSH
29556: LD_INT 30
29558: PUSH
29559: LD_INT 40
29561: PUSH
29562: LD_INT 50
29564: PUSH
29565: LD_INT 60
29567: PUSH
29568: LD_INT 70
29570: PUSH
29571: LD_INT 80
29573: PUSH
29574: LD_INT 90
29576: PUSH
29577: LD_INT 100
29579: PUSH
29580: LD_INT 110
29582: PUSH
29583: LD_INT 120
29585: PUSH
29586: LD_INT 130
29588: PUSH
29589: LD_INT 140
29591: PUSH
29592: LD_INT 150
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 1
29614: PPUSH
29615: LD_INT 15
29617: PPUSH
29618: CALL_OW 12
29622: ARRAY
29623: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29624: LD_ADDR_VAR 0 4
29628: PUSH
29629: LD_INT 10
29631: PUSH
29632: LD_INT 20
29634: PUSH
29635: LD_INT 30
29637: PUSH
29638: LD_INT 40
29640: PUSH
29641: LD_INT 50
29643: PUSH
29644: LD_INT 60
29646: PUSH
29647: LD_INT 70
29649: PUSH
29650: LD_INT 80
29652: PUSH
29653: LD_INT 90
29655: PUSH
29656: LD_INT 100
29658: PUSH
29659: LD_INT 110
29661: PUSH
29662: LD_INT 120
29664: PUSH
29665: LD_INT 130
29667: PUSH
29668: LD_INT 140
29670: PUSH
29671: LD_INT 150
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 1
29693: PPUSH
29694: LD_INT 15
29696: PPUSH
29697: CALL_OW 12
29701: ARRAY
29702: ST_TO_ADDR
// if ValidHex ( x , y ) then
29703: LD_VAR 0 3
29707: PPUSH
29708: LD_VAR 0 4
29712: PPUSH
29713: CALL_OW 488
29717: IFFALSE 29740
// begin result := [ x , y ] ;
29719: LD_ADDR_VAR 0 1
29723: PUSH
29724: LD_VAR 0 3
29728: PUSH
29729: LD_VAR 0 4
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: ST_TO_ADDR
// break ;
29738: GO 29742
// end ; end ;
29740: GO 29542
29742: POP
29743: POP
// if result then
29744: LD_VAR 0 1
29748: IFFALSE 29808
// begin ToLua ( playSibBomb() ) ;
29750: LD_STRING playSibBomb()
29752: PPUSH
29753: CALL_OW 559
// wait ( 0 0$14 ) ;
29757: LD_INT 490
29759: PPUSH
29760: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29764: LD_VAR 0 1
29768: PUSH
29769: LD_INT 1
29771: ARRAY
29772: PPUSH
29773: LD_VAR 0 1
29777: PUSH
29778: LD_INT 2
29780: ARRAY
29781: PPUSH
29782: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29786: LD_VAR 0 1
29790: PUSH
29791: LD_INT 1
29793: ARRAY
29794: PPUSH
29795: LD_VAR 0 1
29799: PUSH
29800: LD_INT 2
29802: ARRAY
29803: PPUSH
29804: CALL_OW 429
// end ; end ;
29808: LD_VAR 0 1
29812: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29813: LD_EXP 71
29817: PUSH
29818: LD_EXP 93
29822: AND
29823: IFFALSE 29835
29825: GO 29827
29827: DISABLE
// YouLost (  ) ;
29828: LD_STRING 
29830: PPUSH
29831: CALL_OW 104
29835: END
// every 0 0$1 trigger StreamModeActive and sFog do
29836: LD_EXP 71
29840: PUSH
29841: LD_EXP 92
29845: AND
29846: IFFALSE 29860
29848: GO 29850
29850: DISABLE
// FogOff ( your_side ) ;
29851: LD_OWVAR 2
29855: PPUSH
29856: CALL_OW 344
29860: END
// every 0 0$1 trigger StreamModeActive and sSun do
29861: LD_EXP 71
29865: PUSH
29866: LD_EXP 94
29870: AND
29871: IFFALSE 29899
29873: GO 29875
29875: DISABLE
// begin solar_recharge_percent := 0 ;
29876: LD_ADDR_OWVAR 79
29880: PUSH
29881: LD_INT 0
29883: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29884: LD_INT 10500
29886: PPUSH
29887: CALL_OW 67
// solar_recharge_percent := 100 ;
29891: LD_ADDR_OWVAR 79
29895: PUSH
29896: LD_INT 100
29898: ST_TO_ADDR
// end ;
29899: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29900: LD_EXP 71
29904: PUSH
29905: LD_EXP 95
29909: AND
29910: IFFALSE 30149
29912: GO 29914
29914: DISABLE
29915: LD_INT 0
29917: PPUSH
29918: PPUSH
29919: PPUSH
// begin tmp := [ ] ;
29920: LD_ADDR_VAR 0 3
29924: PUSH
29925: EMPTY
29926: ST_TO_ADDR
// for i := 1 to 6 do
29927: LD_ADDR_VAR 0 1
29931: PUSH
29932: DOUBLE
29933: LD_INT 1
29935: DEC
29936: ST_TO_ADDR
29937: LD_INT 6
29939: PUSH
29940: FOR_TO
29941: IFFALSE 30046
// begin uc_nation := nation_nature ;
29943: LD_ADDR_OWVAR 21
29947: PUSH
29948: LD_INT 0
29950: ST_TO_ADDR
// uc_side := 0 ;
29951: LD_ADDR_OWVAR 20
29955: PUSH
29956: LD_INT 0
29958: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29959: LD_ADDR_OWVAR 29
29963: PUSH
29964: LD_INT 12
29966: PUSH
29967: LD_INT 12
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: ST_TO_ADDR
// hc_agressivity := 20 ;
29974: LD_ADDR_OWVAR 35
29978: PUSH
29979: LD_INT 20
29981: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29982: LD_ADDR_OWVAR 28
29986: PUSH
29987: LD_INT 17
29989: ST_TO_ADDR
// hc_gallery :=  ;
29990: LD_ADDR_OWVAR 33
29994: PUSH
29995: LD_STRING 
29997: ST_TO_ADDR
// hc_name :=  ;
29998: LD_ADDR_OWVAR 26
30002: PUSH
30003: LD_STRING 
30005: ST_TO_ADDR
// un := CreateHuman ;
30006: LD_ADDR_VAR 0 2
30010: PUSH
30011: CALL_OW 44
30015: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30016: LD_VAR 0 2
30020: PPUSH
30021: LD_INT 1
30023: PPUSH
30024: CALL_OW 51
// tmp := tmp ^ un ;
30028: LD_ADDR_VAR 0 3
30032: PUSH
30033: LD_VAR 0 3
30037: PUSH
30038: LD_VAR 0 2
30042: ADD
30043: ST_TO_ADDR
// end ;
30044: GO 29940
30046: POP
30047: POP
// repeat wait ( 0 0$1 ) ;
30048: LD_INT 35
30050: PPUSH
30051: CALL_OW 67
// for un in tmp do
30055: LD_ADDR_VAR 0 2
30059: PUSH
30060: LD_VAR 0 3
30064: PUSH
30065: FOR_IN
30066: IFFALSE 30140
// begin if IsDead ( un ) then
30068: LD_VAR 0 2
30072: PPUSH
30073: CALL_OW 301
30077: IFFALSE 30097
// begin tmp := tmp diff un ;
30079: LD_ADDR_VAR 0 3
30083: PUSH
30084: LD_VAR 0 3
30088: PUSH
30089: LD_VAR 0 2
30093: DIFF
30094: ST_TO_ADDR
// continue ;
30095: GO 30065
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30097: LD_VAR 0 2
30101: PPUSH
30102: LD_INT 3
30104: PUSH
30105: LD_INT 22
30107: PUSH
30108: LD_INT 0
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PPUSH
30119: CALL_OW 69
30123: PPUSH
30124: LD_VAR 0 2
30128: PPUSH
30129: CALL_OW 74
30133: PPUSH
30134: CALL_OW 115
// end ;
30138: GO 30065
30140: POP
30141: POP
// until not tmp ;
30142: LD_VAR 0 3
30146: NOT
30147: IFFALSE 30048
// end ;
30149: PPOPN 3
30151: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30152: LD_EXP 71
30156: PUSH
30157: LD_EXP 96
30161: AND
30162: IFFALSE 30216
30164: GO 30166
30166: DISABLE
// begin ToLua ( displayTroll(); ) ;
30167: LD_STRING displayTroll();
30169: PPUSH
30170: CALL_OW 559
// wait ( 3 3$00 ) ;
30174: LD_INT 6300
30176: PPUSH
30177: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30181: LD_STRING hideTroll();
30183: PPUSH
30184: CALL_OW 559
// wait ( 1 1$00 ) ;
30188: LD_INT 2100
30190: PPUSH
30191: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30195: LD_STRING displayTroll();
30197: PPUSH
30198: CALL_OW 559
// wait ( 1 1$00 ) ;
30202: LD_INT 2100
30204: PPUSH
30205: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30209: LD_STRING hideTroll();
30211: PPUSH
30212: CALL_OW 559
// end ;
30216: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30217: LD_EXP 71
30221: PUSH
30222: LD_EXP 97
30226: AND
30227: IFFALSE 30290
30229: GO 30231
30231: DISABLE
30232: LD_INT 0
30234: PPUSH
// begin p := 0 ;
30235: LD_ADDR_VAR 0 1
30239: PUSH
30240: LD_INT 0
30242: ST_TO_ADDR
// repeat game_speed := 1 ;
30243: LD_ADDR_OWVAR 65
30247: PUSH
30248: LD_INT 1
30250: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30251: LD_INT 35
30253: PPUSH
30254: CALL_OW 67
// p := p + 1 ;
30258: LD_ADDR_VAR 0 1
30262: PUSH
30263: LD_VAR 0 1
30267: PUSH
30268: LD_INT 1
30270: PLUS
30271: ST_TO_ADDR
// until p >= 60 ;
30272: LD_VAR 0 1
30276: PUSH
30277: LD_INT 60
30279: GREATEREQUAL
30280: IFFALSE 30243
// game_speed := 4 ;
30282: LD_ADDR_OWVAR 65
30286: PUSH
30287: LD_INT 4
30289: ST_TO_ADDR
// end ;
30290: PPOPN 1
30292: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30293: LD_EXP 71
30297: PUSH
30298: LD_EXP 98
30302: AND
30303: IFFALSE 30449
30305: GO 30307
30307: DISABLE
30308: LD_INT 0
30310: PPUSH
30311: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30312: LD_ADDR_VAR 0 1
30316: PUSH
30317: LD_INT 22
30319: PUSH
30320: LD_OWVAR 2
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 2
30331: PUSH
30332: LD_INT 30
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 30
30344: PUSH
30345: LD_INT 1
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: LIST
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PPUSH
30361: CALL_OW 69
30365: ST_TO_ADDR
// if not depot then
30366: LD_VAR 0 1
30370: NOT
30371: IFFALSE 30375
// exit ;
30373: GO 30449
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30375: LD_ADDR_VAR 0 2
30379: PUSH
30380: LD_VAR 0 1
30384: PUSH
30385: LD_INT 1
30387: PPUSH
30388: LD_VAR 0 1
30392: PPUSH
30393: CALL_OW 12
30397: ARRAY
30398: PPUSH
30399: CALL_OW 274
30403: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30404: LD_VAR 0 2
30408: PPUSH
30409: LD_INT 1
30411: PPUSH
30412: LD_INT 0
30414: PPUSH
30415: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30419: LD_VAR 0 2
30423: PPUSH
30424: LD_INT 2
30426: PPUSH
30427: LD_INT 0
30429: PPUSH
30430: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30434: LD_VAR 0 2
30438: PPUSH
30439: LD_INT 3
30441: PPUSH
30442: LD_INT 0
30444: PPUSH
30445: CALL_OW 277
// end ;
30449: PPOPN 2
30451: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30452: LD_EXP 71
30456: PUSH
30457: LD_EXP 99
30461: AND
30462: IFFALSE 30559
30464: GO 30466
30466: DISABLE
30467: LD_INT 0
30469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30470: LD_ADDR_VAR 0 1
30474: PUSH
30475: LD_INT 22
30477: PUSH
30478: LD_OWVAR 2
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 21
30489: PUSH
30490: LD_INT 1
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 3
30499: PUSH
30500: LD_INT 23
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: LIST
30518: PPUSH
30519: CALL_OW 69
30523: ST_TO_ADDR
// if not tmp then
30524: LD_VAR 0 1
30528: NOT
30529: IFFALSE 30533
// exit ;
30531: GO 30559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30533: LD_VAR 0 1
30537: PUSH
30538: LD_INT 1
30540: PPUSH
30541: LD_VAR 0 1
30545: PPUSH
30546: CALL_OW 12
30550: ARRAY
30551: PPUSH
30552: LD_INT 200
30554: PPUSH
30555: CALL_OW 234
// end ;
30559: PPOPN 1
30561: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30562: LD_EXP 71
30566: PUSH
30567: LD_EXP 100
30571: AND
30572: IFFALSE 30651
30574: GO 30576
30576: DISABLE
30577: LD_INT 0
30579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30580: LD_ADDR_VAR 0 1
30584: PUSH
30585: LD_INT 22
30587: PUSH
30588: LD_OWVAR 2
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 21
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PPUSH
30611: CALL_OW 69
30615: ST_TO_ADDR
// if not tmp then
30616: LD_VAR 0 1
30620: NOT
30621: IFFALSE 30625
// exit ;
30623: GO 30651
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30625: LD_VAR 0 1
30629: PUSH
30630: LD_INT 1
30632: PPUSH
30633: LD_VAR 0 1
30637: PPUSH
30638: CALL_OW 12
30642: ARRAY
30643: PPUSH
30644: LD_INT 60
30646: PPUSH
30647: CALL_OW 234
// end ;
30651: PPOPN 1
30653: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30654: LD_EXP 71
30658: PUSH
30659: LD_EXP 101
30663: AND
30664: IFFALSE 30763
30666: GO 30668
30668: DISABLE
30669: LD_INT 0
30671: PPUSH
30672: PPUSH
// begin enable ;
30673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30674: LD_ADDR_VAR 0 1
30678: PUSH
30679: LD_INT 22
30681: PUSH
30682: LD_OWVAR 2
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 61
30693: PUSH
30694: EMPTY
30695: LIST
30696: PUSH
30697: LD_INT 33
30699: PUSH
30700: LD_INT 2
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: LIST
30711: PPUSH
30712: CALL_OW 69
30716: ST_TO_ADDR
// if not tmp then
30717: LD_VAR 0 1
30721: NOT
30722: IFFALSE 30726
// exit ;
30724: GO 30763
// for i in tmp do
30726: LD_ADDR_VAR 0 2
30730: PUSH
30731: LD_VAR 0 1
30735: PUSH
30736: FOR_IN
30737: IFFALSE 30761
// if IsControledBy ( i ) then
30739: LD_VAR 0 2
30743: PPUSH
30744: CALL_OW 312
30748: IFFALSE 30759
// ComUnlink ( i ) ;
30750: LD_VAR 0 2
30754: PPUSH
30755: CALL_OW 136
30759: GO 30736
30761: POP
30762: POP
// end ;
30763: PPOPN 2
30765: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30766: LD_EXP 71
30770: PUSH
30771: LD_EXP 102
30775: AND
30776: IFFALSE 30916
30778: GO 30780
30780: DISABLE
30781: LD_INT 0
30783: PPUSH
30784: PPUSH
// begin ToLua ( displayPowell(); ) ;
30785: LD_STRING displayPowell();
30787: PPUSH
30788: CALL_OW 559
// uc_side := 0 ;
30792: LD_ADDR_OWVAR 20
30796: PUSH
30797: LD_INT 0
30799: ST_TO_ADDR
// uc_nation := 2 ;
30800: LD_ADDR_OWVAR 21
30804: PUSH
30805: LD_INT 2
30807: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30808: LD_ADDR_OWVAR 37
30812: PUSH
30813: LD_INT 14
30815: ST_TO_ADDR
// vc_engine := engine_siberite ;
30816: LD_ADDR_OWVAR 39
30820: PUSH
30821: LD_INT 3
30823: ST_TO_ADDR
// vc_control := control_apeman ;
30824: LD_ADDR_OWVAR 38
30828: PUSH
30829: LD_INT 5
30831: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30832: LD_ADDR_OWVAR 40
30836: PUSH
30837: LD_INT 29
30839: ST_TO_ADDR
// un := CreateVehicle ;
30840: LD_ADDR_VAR 0 2
30844: PUSH
30845: CALL_OW 45
30849: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30850: LD_VAR 0 2
30854: PPUSH
30855: LD_INT 1
30857: PPUSH
30858: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30862: LD_INT 35
30864: PPUSH
30865: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30869: LD_VAR 0 2
30873: PPUSH
30874: LD_INT 22
30876: PUSH
30877: LD_OWVAR 2
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PPUSH
30886: CALL_OW 69
30890: PPUSH
30891: LD_VAR 0 2
30895: PPUSH
30896: CALL_OW 74
30900: PPUSH
30901: CALL_OW 115
// until IsDead ( un ) ;
30905: LD_VAR 0 2
30909: PPUSH
30910: CALL_OW 301
30914: IFFALSE 30862
// end ;
30916: PPOPN 2
30918: END
// every 0 0$1 trigger StreamModeActive and sStu do
30919: LD_EXP 71
30923: PUSH
30924: LD_EXP 110
30928: AND
30929: IFFALSE 30945
30931: GO 30933
30933: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30934: LD_STRING displayStucuk();
30936: PPUSH
30937: CALL_OW 559
// ResetFog ;
30941: CALL_OW 335
// end ;
30945: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30946: LD_EXP 71
30950: PUSH
30951: LD_EXP 103
30955: AND
30956: IFFALSE 31097
30958: GO 30960
30960: DISABLE
30961: LD_INT 0
30963: PPUSH
30964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30965: LD_ADDR_VAR 0 2
30969: PUSH
30970: LD_INT 22
30972: PUSH
30973: LD_OWVAR 2
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 21
30984: PUSH
30985: LD_INT 1
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PPUSH
30996: CALL_OW 69
31000: ST_TO_ADDR
// if not tmp then
31001: LD_VAR 0 2
31005: NOT
31006: IFFALSE 31010
// exit ;
31008: GO 31097
// un := tmp [ rand ( 1 , tmp ) ] ;
31010: LD_ADDR_VAR 0 1
31014: PUSH
31015: LD_VAR 0 2
31019: PUSH
31020: LD_INT 1
31022: PPUSH
31023: LD_VAR 0 2
31027: PPUSH
31028: CALL_OW 12
31032: ARRAY
31033: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31034: LD_VAR 0 1
31038: PPUSH
31039: LD_INT 0
31041: PPUSH
31042: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31046: LD_VAR 0 1
31050: PPUSH
31051: LD_OWVAR 3
31055: PUSH
31056: LD_VAR 0 1
31060: DIFF
31061: PPUSH
31062: LD_VAR 0 1
31066: PPUSH
31067: CALL_OW 74
31071: PPUSH
31072: CALL_OW 115
// wait ( 0 0$20 ) ;
31076: LD_INT 700
31078: PPUSH
31079: CALL_OW 67
// SetSide ( un , your_side ) ;
31083: LD_VAR 0 1
31087: PPUSH
31088: LD_OWVAR 2
31092: PPUSH
31093: CALL_OW 235
// end ;
31097: PPOPN 2
31099: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31100: LD_EXP 71
31104: PUSH
31105: LD_EXP 104
31109: AND
31110: IFFALSE 31216
31112: GO 31114
31114: DISABLE
31115: LD_INT 0
31117: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31118: LD_ADDR_VAR 0 1
31122: PUSH
31123: LD_INT 22
31125: PUSH
31126: LD_OWVAR 2
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 2
31137: PUSH
31138: LD_INT 30
31140: PUSH
31141: LD_INT 0
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 30
31150: PUSH
31151: LD_INT 1
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: LIST
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PPUSH
31167: CALL_OW 69
31171: ST_TO_ADDR
// if not depot then
31172: LD_VAR 0 1
31176: NOT
31177: IFFALSE 31181
// exit ;
31179: GO 31216
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31181: LD_VAR 0 1
31185: PUSH
31186: LD_INT 1
31188: ARRAY
31189: PPUSH
31190: CALL_OW 250
31194: PPUSH
31195: LD_VAR 0 1
31199: PUSH
31200: LD_INT 1
31202: ARRAY
31203: PPUSH
31204: CALL_OW 251
31208: PPUSH
31209: LD_INT 70
31211: PPUSH
31212: CALL_OW 495
// end ;
31216: PPOPN 1
31218: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31219: LD_EXP 71
31223: PUSH
31224: LD_EXP 105
31228: AND
31229: IFFALSE 31440
31231: GO 31233
31233: DISABLE
31234: LD_INT 0
31236: PPUSH
31237: PPUSH
31238: PPUSH
31239: PPUSH
31240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31241: LD_ADDR_VAR 0 5
31245: PUSH
31246: LD_INT 22
31248: PUSH
31249: LD_OWVAR 2
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 21
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PPUSH
31272: CALL_OW 69
31276: ST_TO_ADDR
// if not tmp then
31277: LD_VAR 0 5
31281: NOT
31282: IFFALSE 31286
// exit ;
31284: GO 31440
// for i in tmp do
31286: LD_ADDR_VAR 0 1
31290: PUSH
31291: LD_VAR 0 5
31295: PUSH
31296: FOR_IN
31297: IFFALSE 31438
// begin d := rand ( 0 , 5 ) ;
31299: LD_ADDR_VAR 0 4
31303: PUSH
31304: LD_INT 0
31306: PPUSH
31307: LD_INT 5
31309: PPUSH
31310: CALL_OW 12
31314: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31315: LD_ADDR_VAR 0 2
31319: PUSH
31320: LD_VAR 0 1
31324: PPUSH
31325: CALL_OW 250
31329: PPUSH
31330: LD_VAR 0 4
31334: PPUSH
31335: LD_INT 3
31337: PPUSH
31338: LD_INT 12
31340: PPUSH
31341: CALL_OW 12
31345: PPUSH
31346: CALL_OW 272
31350: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31351: LD_ADDR_VAR 0 3
31355: PUSH
31356: LD_VAR 0 1
31360: PPUSH
31361: CALL_OW 251
31365: PPUSH
31366: LD_VAR 0 4
31370: PPUSH
31371: LD_INT 3
31373: PPUSH
31374: LD_INT 12
31376: PPUSH
31377: CALL_OW 12
31381: PPUSH
31382: CALL_OW 273
31386: ST_TO_ADDR
// if ValidHex ( x , y ) then
31387: LD_VAR 0 2
31391: PPUSH
31392: LD_VAR 0 3
31396: PPUSH
31397: CALL_OW 488
31401: IFFALSE 31436
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31403: LD_VAR 0 1
31407: PPUSH
31408: LD_VAR 0 2
31412: PPUSH
31413: LD_VAR 0 3
31417: PPUSH
31418: LD_INT 3
31420: PPUSH
31421: LD_INT 6
31423: PPUSH
31424: CALL_OW 12
31428: PPUSH
31429: LD_INT 1
31431: PPUSH
31432: CALL_OW 483
// end ;
31436: GO 31296
31438: POP
31439: POP
// end ;
31440: PPOPN 5
31442: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31443: LD_EXP 71
31447: PUSH
31448: LD_EXP 106
31452: AND
31453: IFFALSE 31547
31455: GO 31457
31457: DISABLE
31458: LD_INT 0
31460: PPUSH
31461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31462: LD_ADDR_VAR 0 2
31466: PUSH
31467: LD_INT 22
31469: PUSH
31470: LD_OWVAR 2
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 32
31481: PUSH
31482: LD_INT 1
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 21
31491: PUSH
31492: LD_INT 2
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: LIST
31503: PPUSH
31504: CALL_OW 69
31508: ST_TO_ADDR
// if not tmp then
31509: LD_VAR 0 2
31513: NOT
31514: IFFALSE 31518
// exit ;
31516: GO 31547
// for i in tmp do
31518: LD_ADDR_VAR 0 1
31522: PUSH
31523: LD_VAR 0 2
31527: PUSH
31528: FOR_IN
31529: IFFALSE 31545
// SetFuel ( i , 0 ) ;
31531: LD_VAR 0 1
31535: PPUSH
31536: LD_INT 0
31538: PPUSH
31539: CALL_OW 240
31543: GO 31528
31545: POP
31546: POP
// end ;
31547: PPOPN 2
31549: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31550: LD_EXP 71
31554: PUSH
31555: LD_EXP 107
31559: AND
31560: IFFALSE 31626
31562: GO 31564
31564: DISABLE
31565: LD_INT 0
31567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31568: LD_ADDR_VAR 0 1
31572: PUSH
31573: LD_INT 22
31575: PUSH
31576: LD_OWVAR 2
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 30
31587: PUSH
31588: LD_INT 29
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PPUSH
31599: CALL_OW 69
31603: ST_TO_ADDR
// if not tmp then
31604: LD_VAR 0 1
31608: NOT
31609: IFFALSE 31613
// exit ;
31611: GO 31626
// DestroyUnit ( tmp [ 1 ] ) ;
31613: LD_VAR 0 1
31617: PUSH
31618: LD_INT 1
31620: ARRAY
31621: PPUSH
31622: CALL_OW 65
// end ;
31626: PPOPN 1
31628: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31629: LD_EXP 71
31633: PUSH
31634: LD_EXP 109
31638: AND
31639: IFFALSE 31768
31641: GO 31643
31643: DISABLE
31644: LD_INT 0
31646: PPUSH
// begin uc_side := 0 ;
31647: LD_ADDR_OWVAR 20
31651: PUSH
31652: LD_INT 0
31654: ST_TO_ADDR
// uc_nation := nation_arabian ;
31655: LD_ADDR_OWVAR 21
31659: PUSH
31660: LD_INT 2
31662: ST_TO_ADDR
// hc_gallery :=  ;
31663: LD_ADDR_OWVAR 33
31667: PUSH
31668: LD_STRING 
31670: ST_TO_ADDR
// hc_name :=  ;
31671: LD_ADDR_OWVAR 26
31675: PUSH
31676: LD_STRING 
31678: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31679: LD_INT 1
31681: PPUSH
31682: LD_INT 11
31684: PPUSH
31685: LD_INT 10
31687: PPUSH
31688: CALL_OW 380
// un := CreateHuman ;
31692: LD_ADDR_VAR 0 1
31696: PUSH
31697: CALL_OW 44
31701: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31702: LD_VAR 0 1
31706: PPUSH
31707: LD_INT 1
31709: PPUSH
31710: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31714: LD_INT 35
31716: PPUSH
31717: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31721: LD_VAR 0 1
31725: PPUSH
31726: LD_INT 22
31728: PUSH
31729: LD_OWVAR 2
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PPUSH
31738: CALL_OW 69
31742: PPUSH
31743: LD_VAR 0 1
31747: PPUSH
31748: CALL_OW 74
31752: PPUSH
31753: CALL_OW 115
// until IsDead ( un ) ;
31757: LD_VAR 0 1
31761: PPUSH
31762: CALL_OW 301
31766: IFFALSE 31714
// end ;
31768: PPOPN 1
31770: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31771: LD_EXP 71
31775: PUSH
31776: LD_EXP 111
31780: AND
31781: IFFALSE 31793
31783: GO 31785
31785: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31786: LD_STRING earthquake(getX(game), 0, 32)
31788: PPUSH
31789: CALL_OW 559
31793: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31794: LD_EXP 71
31798: PUSH
31799: LD_EXP 112
31803: AND
31804: IFFALSE 31895
31806: GO 31808
31808: DISABLE
31809: LD_INT 0
31811: PPUSH
// begin enable ;
31812: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31813: LD_ADDR_VAR 0 1
31817: PUSH
31818: LD_INT 22
31820: PUSH
31821: LD_OWVAR 2
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 21
31832: PUSH
31833: LD_INT 2
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 33
31842: PUSH
31843: LD_INT 3
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: LIST
31854: PPUSH
31855: CALL_OW 69
31859: ST_TO_ADDR
// if not tmp then
31860: LD_VAR 0 1
31864: NOT
31865: IFFALSE 31869
// exit ;
31867: GO 31895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31869: LD_VAR 0 1
31873: PUSH
31874: LD_INT 1
31876: PPUSH
31877: LD_VAR 0 1
31881: PPUSH
31882: CALL_OW 12
31886: ARRAY
31887: PPUSH
31888: LD_INT 1
31890: PPUSH
31891: CALL_OW 234
// end ;
31895: PPOPN 1
31897: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31898: LD_EXP 71
31902: PUSH
31903: LD_EXP 113
31907: AND
31908: IFFALSE 32049
31910: GO 31912
31912: DISABLE
31913: LD_INT 0
31915: PPUSH
31916: PPUSH
31917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31918: LD_ADDR_VAR 0 3
31922: PUSH
31923: LD_INT 22
31925: PUSH
31926: LD_OWVAR 2
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 25
31937: PUSH
31938: LD_INT 1
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PPUSH
31949: CALL_OW 69
31953: ST_TO_ADDR
// if not tmp then
31954: LD_VAR 0 3
31958: NOT
31959: IFFALSE 31963
// exit ;
31961: GO 32049
// un := tmp [ rand ( 1 , tmp ) ] ;
31963: LD_ADDR_VAR 0 2
31967: PUSH
31968: LD_VAR 0 3
31972: PUSH
31973: LD_INT 1
31975: PPUSH
31976: LD_VAR 0 3
31980: PPUSH
31981: CALL_OW 12
31985: ARRAY
31986: ST_TO_ADDR
// if Crawls ( un ) then
31987: LD_VAR 0 2
31991: PPUSH
31992: CALL_OW 318
31996: IFFALSE 32007
// ComWalk ( un ) ;
31998: LD_VAR 0 2
32002: PPUSH
32003: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32007: LD_VAR 0 2
32011: PPUSH
32012: LD_INT 9
32014: PPUSH
32015: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32019: LD_INT 28
32021: PPUSH
32022: LD_OWVAR 2
32026: PPUSH
32027: LD_INT 2
32029: PPUSH
32030: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32034: LD_INT 29
32036: PPUSH
32037: LD_OWVAR 2
32041: PPUSH
32042: LD_INT 2
32044: PPUSH
32045: CALL_OW 322
// end ;
32049: PPOPN 3
32051: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32052: LD_EXP 71
32056: PUSH
32057: LD_EXP 114
32061: AND
32062: IFFALSE 32173
32064: GO 32066
32066: DISABLE
32067: LD_INT 0
32069: PPUSH
32070: PPUSH
32071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32072: LD_ADDR_VAR 0 3
32076: PUSH
32077: LD_INT 22
32079: PUSH
32080: LD_OWVAR 2
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 25
32091: PUSH
32092: LD_INT 1
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PPUSH
32103: CALL_OW 69
32107: ST_TO_ADDR
// if not tmp then
32108: LD_VAR 0 3
32112: NOT
32113: IFFALSE 32117
// exit ;
32115: GO 32173
// un := tmp [ rand ( 1 , tmp ) ] ;
32117: LD_ADDR_VAR 0 2
32121: PUSH
32122: LD_VAR 0 3
32126: PUSH
32127: LD_INT 1
32129: PPUSH
32130: LD_VAR 0 3
32134: PPUSH
32135: CALL_OW 12
32139: ARRAY
32140: ST_TO_ADDR
// if Crawls ( un ) then
32141: LD_VAR 0 2
32145: PPUSH
32146: CALL_OW 318
32150: IFFALSE 32161
// ComWalk ( un ) ;
32152: LD_VAR 0 2
32156: PPUSH
32157: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32161: LD_VAR 0 2
32165: PPUSH
32166: LD_INT 8
32168: PPUSH
32169: CALL_OW 336
// end ;
32173: PPOPN 3
32175: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32176: LD_EXP 71
32180: PUSH
32181: LD_EXP 115
32185: AND
32186: IFFALSE 32330
32188: GO 32190
32190: DISABLE
32191: LD_INT 0
32193: PPUSH
32194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32195: LD_ADDR_VAR 0 2
32199: PUSH
32200: LD_INT 22
32202: PUSH
32203: LD_OWVAR 2
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 21
32214: PUSH
32215: LD_INT 2
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 2
32224: PUSH
32225: LD_INT 34
32227: PUSH
32228: LD_INT 12
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 34
32237: PUSH
32238: LD_INT 51
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 34
32247: PUSH
32248: LD_INT 32
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: LIST
32265: PPUSH
32266: CALL_OW 69
32270: ST_TO_ADDR
// if not tmp then
32271: LD_VAR 0 2
32275: NOT
32276: IFFALSE 32280
// exit ;
32278: GO 32330
// for i in tmp do
32280: LD_ADDR_VAR 0 1
32284: PUSH
32285: LD_VAR 0 2
32289: PUSH
32290: FOR_IN
32291: IFFALSE 32328
// if GetCargo ( i , mat_artifact ) = 0 then
32293: LD_VAR 0 1
32297: PPUSH
32298: LD_INT 4
32300: PPUSH
32301: CALL_OW 289
32305: PUSH
32306: LD_INT 0
32308: EQUAL
32309: IFFALSE 32326
// SetCargo ( i , mat_siberit , 100 ) ;
32311: LD_VAR 0 1
32315: PPUSH
32316: LD_INT 3
32318: PPUSH
32319: LD_INT 100
32321: PPUSH
32322: CALL_OW 290
32326: GO 32290
32328: POP
32329: POP
// end ;
32330: PPOPN 2
32332: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32333: LD_EXP 71
32337: PUSH
32338: LD_EXP 116
32342: AND
32343: IFFALSE 32526
32345: GO 32347
32347: DISABLE
32348: LD_INT 0
32350: PPUSH
32351: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32352: LD_ADDR_VAR 0 2
32356: PUSH
32357: LD_INT 22
32359: PUSH
32360: LD_OWVAR 2
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PPUSH
32369: CALL_OW 69
32373: ST_TO_ADDR
// if not tmp then
32374: LD_VAR 0 2
32378: NOT
32379: IFFALSE 32383
// exit ;
32381: GO 32526
// for i := 1 to 2 do
32383: LD_ADDR_VAR 0 1
32387: PUSH
32388: DOUBLE
32389: LD_INT 1
32391: DEC
32392: ST_TO_ADDR
32393: LD_INT 2
32395: PUSH
32396: FOR_TO
32397: IFFALSE 32524
// begin uc_side := your_side ;
32399: LD_ADDR_OWVAR 20
32403: PUSH
32404: LD_OWVAR 2
32408: ST_TO_ADDR
// uc_nation := nation_american ;
32409: LD_ADDR_OWVAR 21
32413: PUSH
32414: LD_INT 1
32416: ST_TO_ADDR
// vc_chassis := us_morphling ;
32417: LD_ADDR_OWVAR 37
32421: PUSH
32422: LD_INT 5
32424: ST_TO_ADDR
// vc_engine := engine_siberite ;
32425: LD_ADDR_OWVAR 39
32429: PUSH
32430: LD_INT 3
32432: ST_TO_ADDR
// vc_control := control_computer ;
32433: LD_ADDR_OWVAR 38
32437: PUSH
32438: LD_INT 3
32440: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32441: LD_ADDR_OWVAR 40
32445: PUSH
32446: LD_INT 10
32448: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32449: LD_VAR 0 2
32453: PUSH
32454: LD_INT 1
32456: ARRAY
32457: PPUSH
32458: CALL_OW 310
32462: NOT
32463: IFFALSE 32510
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32465: CALL_OW 45
32469: PPUSH
32470: LD_VAR 0 2
32474: PUSH
32475: LD_INT 1
32477: ARRAY
32478: PPUSH
32479: CALL_OW 250
32483: PPUSH
32484: LD_VAR 0 2
32488: PUSH
32489: LD_INT 1
32491: ARRAY
32492: PPUSH
32493: CALL_OW 251
32497: PPUSH
32498: LD_INT 12
32500: PPUSH
32501: LD_INT 1
32503: PPUSH
32504: CALL_OW 50
32508: GO 32522
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32510: CALL_OW 45
32514: PPUSH
32515: LD_INT 1
32517: PPUSH
32518: CALL_OW 51
// end ;
32522: GO 32396
32524: POP
32525: POP
// end ;
32526: PPOPN 2
32528: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32529: LD_EXP 71
32533: PUSH
32534: LD_EXP 117
32538: AND
32539: IFFALSE 32761
32541: GO 32543
32543: DISABLE
32544: LD_INT 0
32546: PPUSH
32547: PPUSH
32548: PPUSH
32549: PPUSH
32550: PPUSH
32551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32552: LD_ADDR_VAR 0 6
32556: PUSH
32557: LD_INT 22
32559: PUSH
32560: LD_OWVAR 2
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 21
32571: PUSH
32572: LD_INT 1
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 3
32581: PUSH
32582: LD_INT 23
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: LIST
32600: PPUSH
32601: CALL_OW 69
32605: ST_TO_ADDR
// if not tmp then
32606: LD_VAR 0 6
32610: NOT
32611: IFFALSE 32615
// exit ;
32613: GO 32761
// s1 := rand ( 1 , 4 ) ;
32615: LD_ADDR_VAR 0 2
32619: PUSH
32620: LD_INT 1
32622: PPUSH
32623: LD_INT 4
32625: PPUSH
32626: CALL_OW 12
32630: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32631: LD_ADDR_VAR 0 4
32635: PUSH
32636: LD_VAR 0 6
32640: PUSH
32641: LD_INT 1
32643: ARRAY
32644: PPUSH
32645: LD_VAR 0 2
32649: PPUSH
32650: CALL_OW 259
32654: ST_TO_ADDR
// if s1 = 1 then
32655: LD_VAR 0 2
32659: PUSH
32660: LD_INT 1
32662: EQUAL
32663: IFFALSE 32683
// s2 := rand ( 2 , 4 ) else
32665: LD_ADDR_VAR 0 3
32669: PUSH
32670: LD_INT 2
32672: PPUSH
32673: LD_INT 4
32675: PPUSH
32676: CALL_OW 12
32680: ST_TO_ADDR
32681: GO 32691
// s2 := 1 ;
32683: LD_ADDR_VAR 0 3
32687: PUSH
32688: LD_INT 1
32690: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32691: LD_ADDR_VAR 0 5
32695: PUSH
32696: LD_VAR 0 6
32700: PUSH
32701: LD_INT 1
32703: ARRAY
32704: PPUSH
32705: LD_VAR 0 3
32709: PPUSH
32710: CALL_OW 259
32714: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32715: LD_VAR 0 6
32719: PUSH
32720: LD_INT 1
32722: ARRAY
32723: PPUSH
32724: LD_VAR 0 2
32728: PPUSH
32729: LD_VAR 0 5
32733: PPUSH
32734: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32738: LD_VAR 0 6
32742: PUSH
32743: LD_INT 1
32745: ARRAY
32746: PPUSH
32747: LD_VAR 0 3
32751: PPUSH
32752: LD_VAR 0 4
32756: PPUSH
32757: CALL_OW 237
// end ;
32761: PPOPN 6
32763: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32764: LD_EXP 71
32768: PUSH
32769: LD_EXP 118
32773: AND
32774: IFFALSE 32853
32776: GO 32778
32778: DISABLE
32779: LD_INT 0
32781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32782: LD_ADDR_VAR 0 1
32786: PUSH
32787: LD_INT 22
32789: PUSH
32790: LD_OWVAR 2
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 30
32801: PUSH
32802: LD_INT 3
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PPUSH
32813: CALL_OW 69
32817: ST_TO_ADDR
// if not tmp then
32818: LD_VAR 0 1
32822: NOT
32823: IFFALSE 32827
// exit ;
32825: GO 32853
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32827: LD_VAR 0 1
32831: PUSH
32832: LD_INT 1
32834: PPUSH
32835: LD_VAR 0 1
32839: PPUSH
32840: CALL_OW 12
32844: ARRAY
32845: PPUSH
32846: LD_INT 1
32848: PPUSH
32849: CALL_OW 234
// end ;
32853: PPOPN 1
32855: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32856: LD_EXP 71
32860: PUSH
32861: LD_EXP 119
32865: AND
32866: IFFALSE 32978
32868: GO 32870
32870: DISABLE
32871: LD_INT 0
32873: PPUSH
32874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32875: LD_ADDR_VAR 0 2
32879: PUSH
32880: LD_INT 22
32882: PUSH
32883: LD_OWVAR 2
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 2
32894: PUSH
32895: LD_INT 30
32897: PUSH
32898: LD_INT 27
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 30
32907: PUSH
32908: LD_INT 26
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 30
32917: PUSH
32918: LD_INT 28
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PPUSH
32935: CALL_OW 69
32939: ST_TO_ADDR
// if not tmp then
32940: LD_VAR 0 2
32944: NOT
32945: IFFALSE 32949
// exit ;
32947: GO 32978
// for i in tmp do
32949: LD_ADDR_VAR 0 1
32953: PUSH
32954: LD_VAR 0 2
32958: PUSH
32959: FOR_IN
32960: IFFALSE 32976
// SetLives ( i , 1 ) ;
32962: LD_VAR 0 1
32966: PPUSH
32967: LD_INT 1
32969: PPUSH
32970: CALL_OW 234
32974: GO 32959
32976: POP
32977: POP
// end ;
32978: PPOPN 2
32980: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32981: LD_EXP 71
32985: PUSH
32986: LD_EXP 120
32990: AND
32991: IFFALSE 33265
32993: GO 32995
32995: DISABLE
32996: LD_INT 0
32998: PPUSH
32999: PPUSH
33000: PPUSH
// begin i := rand ( 1 , 7 ) ;
33001: LD_ADDR_VAR 0 1
33005: PUSH
33006: LD_INT 1
33008: PPUSH
33009: LD_INT 7
33011: PPUSH
33012: CALL_OW 12
33016: ST_TO_ADDR
// case i of 1 :
33017: LD_VAR 0 1
33021: PUSH
33022: LD_INT 1
33024: DOUBLE
33025: EQUAL
33026: IFTRUE 33030
33028: GO 33040
33030: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33031: LD_STRING earthquake(getX(game), 0, 32)
33033: PPUSH
33034: CALL_OW 559
33038: GO 33265
33040: LD_INT 2
33042: DOUBLE
33043: EQUAL
33044: IFTRUE 33048
33046: GO 33062
33048: POP
// begin ToLua ( displayStucuk(); ) ;
33049: LD_STRING displayStucuk();
33051: PPUSH
33052: CALL_OW 559
// ResetFog ;
33056: CALL_OW 335
// end ; 3 :
33060: GO 33265
33062: LD_INT 3
33064: DOUBLE
33065: EQUAL
33066: IFTRUE 33070
33068: GO 33174
33070: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33071: LD_ADDR_VAR 0 2
33075: PUSH
33076: LD_INT 22
33078: PUSH
33079: LD_OWVAR 2
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 25
33090: PUSH
33091: LD_INT 1
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PPUSH
33102: CALL_OW 69
33106: ST_TO_ADDR
// if not tmp then
33107: LD_VAR 0 2
33111: NOT
33112: IFFALSE 33116
// exit ;
33114: GO 33265
// un := tmp [ rand ( 1 , tmp ) ] ;
33116: LD_ADDR_VAR 0 3
33120: PUSH
33121: LD_VAR 0 2
33125: PUSH
33126: LD_INT 1
33128: PPUSH
33129: LD_VAR 0 2
33133: PPUSH
33134: CALL_OW 12
33138: ARRAY
33139: ST_TO_ADDR
// if Crawls ( un ) then
33140: LD_VAR 0 3
33144: PPUSH
33145: CALL_OW 318
33149: IFFALSE 33160
// ComWalk ( un ) ;
33151: LD_VAR 0 3
33155: PPUSH
33156: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33160: LD_VAR 0 3
33164: PPUSH
33165: LD_INT 8
33167: PPUSH
33168: CALL_OW 336
// end ; 4 :
33172: GO 33265
33174: LD_INT 4
33176: DOUBLE
33177: EQUAL
33178: IFTRUE 33182
33180: GO 33243
33182: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33183: LD_ADDR_VAR 0 2
33187: PUSH
33188: LD_INT 22
33190: PUSH
33191: LD_OWVAR 2
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 30
33202: PUSH
33203: LD_INT 29
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PPUSH
33214: CALL_OW 69
33218: ST_TO_ADDR
// if not tmp then
33219: LD_VAR 0 2
33223: NOT
33224: IFFALSE 33228
// exit ;
33226: GO 33265
// DestroyUnit ( tmp [ 1 ] ) ;
33228: LD_VAR 0 2
33232: PUSH
33233: LD_INT 1
33235: ARRAY
33236: PPUSH
33237: CALL_OW 65
// end ; 5 .. 7 :
33241: GO 33265
33243: LD_INT 5
33245: DOUBLE
33246: GREATEREQUAL
33247: IFFALSE 33255
33249: LD_INT 7
33251: DOUBLE
33252: LESSEQUAL
33253: IFTRUE 33257
33255: GO 33264
33257: POP
// StreamSibBomb ; end ;
33258: CALL 29515 0 0
33262: GO 33265
33264: POP
// end ;
33265: PPOPN 3
33267: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33268: LD_EXP 71
33272: PUSH
33273: LD_EXP 121
33277: AND
33278: IFFALSE 33434
33280: GO 33282
33282: DISABLE
33283: LD_INT 0
33285: PPUSH
33286: PPUSH
33287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33288: LD_ADDR_VAR 0 2
33292: PUSH
33293: LD_INT 81
33295: PUSH
33296: LD_OWVAR 2
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 2
33307: PUSH
33308: LD_INT 21
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 21
33320: PUSH
33321: LD_INT 2
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PPUSH
33337: CALL_OW 69
33341: ST_TO_ADDR
// if not tmp then
33342: LD_VAR 0 2
33346: NOT
33347: IFFALSE 33351
// exit ;
33349: GO 33434
// p := 0 ;
33351: LD_ADDR_VAR 0 3
33355: PUSH
33356: LD_INT 0
33358: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33359: LD_INT 35
33361: PPUSH
33362: CALL_OW 67
// p := p + 1 ;
33366: LD_ADDR_VAR 0 3
33370: PUSH
33371: LD_VAR 0 3
33375: PUSH
33376: LD_INT 1
33378: PLUS
33379: ST_TO_ADDR
// for i in tmp do
33380: LD_ADDR_VAR 0 1
33384: PUSH
33385: LD_VAR 0 2
33389: PUSH
33390: FOR_IN
33391: IFFALSE 33422
// if GetLives ( i ) < 1000 then
33393: LD_VAR 0 1
33397: PPUSH
33398: CALL_OW 256
33402: PUSH
33403: LD_INT 1000
33405: LESS
33406: IFFALSE 33420
// SetLives ( i , 1000 ) ;
33408: LD_VAR 0 1
33412: PPUSH
33413: LD_INT 1000
33415: PPUSH
33416: CALL_OW 234
33420: GO 33390
33422: POP
33423: POP
// until p > 20 ;
33424: LD_VAR 0 3
33428: PUSH
33429: LD_INT 20
33431: GREATER
33432: IFFALSE 33359
// end ;
33434: PPOPN 3
33436: END
// every 0 0$1 trigger StreamModeActive and sTime do
33437: LD_EXP 71
33441: PUSH
33442: LD_EXP 122
33446: AND
33447: IFFALSE 33482
33449: GO 33451
33451: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33452: LD_INT 28
33454: PPUSH
33455: LD_OWVAR 2
33459: PPUSH
33460: LD_INT 2
33462: PPUSH
33463: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33467: LD_INT 30
33469: PPUSH
33470: LD_OWVAR 2
33474: PPUSH
33475: LD_INT 2
33477: PPUSH
33478: CALL_OW 322
// end ;
33482: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33483: LD_EXP 71
33487: PUSH
33488: LD_EXP 123
33492: AND
33493: IFFALSE 33614
33495: GO 33497
33497: DISABLE
33498: LD_INT 0
33500: PPUSH
33501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33502: LD_ADDR_VAR 0 2
33506: PUSH
33507: LD_INT 22
33509: PUSH
33510: LD_OWVAR 2
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 21
33521: PUSH
33522: LD_INT 1
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 3
33531: PUSH
33532: LD_INT 23
33534: PUSH
33535: LD_INT 0
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: LIST
33550: PPUSH
33551: CALL_OW 69
33555: ST_TO_ADDR
// if not tmp then
33556: LD_VAR 0 2
33560: NOT
33561: IFFALSE 33565
// exit ;
33563: GO 33614
// for i in tmp do
33565: LD_ADDR_VAR 0 1
33569: PUSH
33570: LD_VAR 0 2
33574: PUSH
33575: FOR_IN
33576: IFFALSE 33612
// begin if Crawls ( i ) then
33578: LD_VAR 0 1
33582: PPUSH
33583: CALL_OW 318
33587: IFFALSE 33598
// ComWalk ( i ) ;
33589: LD_VAR 0 1
33593: PPUSH
33594: CALL_OW 138
// SetClass ( i , 2 ) ;
33598: LD_VAR 0 1
33602: PPUSH
33603: LD_INT 2
33605: PPUSH
33606: CALL_OW 336
// end ;
33610: GO 33575
33612: POP
33613: POP
// end ;
33614: PPOPN 2
33616: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33617: LD_EXP 71
33621: PUSH
33622: LD_EXP 124
33626: AND
33627: IFFALSE 33908
33629: GO 33631
33631: DISABLE
33632: LD_INT 0
33634: PPUSH
33635: PPUSH
33636: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33637: LD_OWVAR 2
33641: PPUSH
33642: LD_INT 9
33644: PPUSH
33645: LD_INT 1
33647: PPUSH
33648: LD_INT 1
33650: PPUSH
33651: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33655: LD_INT 9
33657: PPUSH
33658: LD_OWVAR 2
33662: PPUSH
33663: CALL_OW 343
// uc_side := 9 ;
33667: LD_ADDR_OWVAR 20
33671: PUSH
33672: LD_INT 9
33674: ST_TO_ADDR
// uc_nation := 2 ;
33675: LD_ADDR_OWVAR 21
33679: PUSH
33680: LD_INT 2
33682: ST_TO_ADDR
// hc_name := Dark Warrior ;
33683: LD_ADDR_OWVAR 26
33687: PUSH
33688: LD_STRING Dark Warrior
33690: ST_TO_ADDR
// hc_gallery :=  ;
33691: LD_ADDR_OWVAR 33
33695: PUSH
33696: LD_STRING 
33698: ST_TO_ADDR
// hc_noskilllimit := true ;
33699: LD_ADDR_OWVAR 76
33703: PUSH
33704: LD_INT 1
33706: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33707: LD_ADDR_OWVAR 31
33711: PUSH
33712: LD_INT 30
33714: PUSH
33715: LD_INT 30
33717: PUSH
33718: LD_INT 30
33720: PUSH
33721: LD_INT 30
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: ST_TO_ADDR
// un := CreateHuman ;
33730: LD_ADDR_VAR 0 3
33734: PUSH
33735: CALL_OW 44
33739: ST_TO_ADDR
// hc_noskilllimit := false ;
33740: LD_ADDR_OWVAR 76
33744: PUSH
33745: LD_INT 0
33747: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33748: LD_VAR 0 3
33752: PPUSH
33753: LD_INT 1
33755: PPUSH
33756: CALL_OW 51
// p := 0 ;
33760: LD_ADDR_VAR 0 2
33764: PUSH
33765: LD_INT 0
33767: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33768: LD_INT 35
33770: PPUSH
33771: CALL_OW 67
// p := p + 1 ;
33775: LD_ADDR_VAR 0 2
33779: PUSH
33780: LD_VAR 0 2
33784: PUSH
33785: LD_INT 1
33787: PLUS
33788: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33789: LD_VAR 0 3
33793: PPUSH
33794: CALL_OW 256
33798: PUSH
33799: LD_INT 1000
33801: LESS
33802: IFFALSE 33816
// SetLives ( un , 1000 ) ;
33804: LD_VAR 0 3
33808: PPUSH
33809: LD_INT 1000
33811: PPUSH
33812: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33816: LD_VAR 0 3
33820: PPUSH
33821: LD_INT 81
33823: PUSH
33824: LD_OWVAR 2
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 91
33835: PUSH
33836: LD_VAR 0 3
33840: PUSH
33841: LD_INT 30
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: LIST
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PPUSH
33853: CALL_OW 69
33857: PPUSH
33858: LD_VAR 0 3
33862: PPUSH
33863: CALL_OW 74
33867: PPUSH
33868: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
33872: LD_VAR 0 2
33876: PUSH
33877: LD_INT 60
33879: GREATER
33880: PUSH
33881: LD_VAR 0 3
33885: PPUSH
33886: CALL_OW 301
33890: OR
33891: IFFALSE 33768
// if un then
33893: LD_VAR 0 3
33897: IFFALSE 33908
// RemoveUnit ( un ) ;
33899: LD_VAR 0 3
33903: PPUSH
33904: CALL_OW 64
// end ;
33908: PPOPN 3
33910: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33911: LD_INT 0
33913: PPUSH
// case cmd of 301 :
33914: LD_VAR 0 1
33918: PUSH
33919: LD_INT 301
33921: DOUBLE
33922: EQUAL
33923: IFTRUE 33927
33925: GO 33959
33927: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33928: LD_VAR 0 6
33932: PPUSH
33933: LD_VAR 0 7
33937: PPUSH
33938: LD_VAR 0 8
33942: PPUSH
33943: LD_VAR 0 4
33947: PPUSH
33948: LD_VAR 0 5
33952: PPUSH
33953: CALL 35160 0 5
33957: GO 34080
33959: LD_INT 302
33961: DOUBLE
33962: EQUAL
33963: IFTRUE 33967
33965: GO 34004
33967: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33968: LD_VAR 0 6
33972: PPUSH
33973: LD_VAR 0 7
33977: PPUSH
33978: LD_VAR 0 8
33982: PPUSH
33983: LD_VAR 0 9
33987: PPUSH
33988: LD_VAR 0 4
33992: PPUSH
33993: LD_VAR 0 5
33997: PPUSH
33998: CALL 35251 0 6
34002: GO 34080
34004: LD_INT 303
34006: DOUBLE
34007: EQUAL
34008: IFTRUE 34012
34010: GO 34049
34012: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34013: LD_VAR 0 6
34017: PPUSH
34018: LD_VAR 0 7
34022: PPUSH
34023: LD_VAR 0 8
34027: PPUSH
34028: LD_VAR 0 9
34032: PPUSH
34033: LD_VAR 0 4
34037: PPUSH
34038: LD_VAR 0 5
34042: PPUSH
34043: CALL 34085 0 6
34047: GO 34080
34049: LD_INT 304
34051: DOUBLE
34052: EQUAL
34053: IFTRUE 34057
34055: GO 34079
34057: POP
// hHackTeleport ( unit , x , y ) ; end ;
34058: LD_VAR 0 2
34062: PPUSH
34063: LD_VAR 0 4
34067: PPUSH
34068: LD_VAR 0 5
34072: PPUSH
34073: CALL 35844 0 3
34077: GO 34080
34079: POP
// end ;
34080: LD_VAR 0 12
34084: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34085: LD_INT 0
34087: PPUSH
34088: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34089: LD_VAR 0 1
34093: PUSH
34094: LD_INT 1
34096: LESS
34097: PUSH
34098: LD_VAR 0 1
34102: PUSH
34103: LD_INT 3
34105: GREATER
34106: OR
34107: PUSH
34108: LD_VAR 0 5
34112: PPUSH
34113: LD_VAR 0 6
34117: PPUSH
34118: CALL_OW 428
34122: OR
34123: IFFALSE 34127
// exit ;
34125: GO 34847
// uc_side := your_side ;
34127: LD_ADDR_OWVAR 20
34131: PUSH
34132: LD_OWVAR 2
34136: ST_TO_ADDR
// uc_nation := nation ;
34137: LD_ADDR_OWVAR 21
34141: PUSH
34142: LD_VAR 0 1
34146: ST_TO_ADDR
// bc_level = 1 ;
34147: LD_ADDR_OWVAR 43
34151: PUSH
34152: LD_INT 1
34154: ST_TO_ADDR
// case btype of 1 :
34155: LD_VAR 0 2
34159: PUSH
34160: LD_INT 1
34162: DOUBLE
34163: EQUAL
34164: IFTRUE 34168
34166: GO 34179
34168: POP
// bc_type := b_depot ; 2 :
34169: LD_ADDR_OWVAR 42
34173: PUSH
34174: LD_INT 0
34176: ST_TO_ADDR
34177: GO 34791
34179: LD_INT 2
34181: DOUBLE
34182: EQUAL
34183: IFTRUE 34187
34185: GO 34198
34187: POP
// bc_type := b_warehouse ; 3 :
34188: LD_ADDR_OWVAR 42
34192: PUSH
34193: LD_INT 1
34195: ST_TO_ADDR
34196: GO 34791
34198: LD_INT 3
34200: DOUBLE
34201: EQUAL
34202: IFTRUE 34206
34204: GO 34217
34206: POP
// bc_type := b_lab ; 4 .. 9 :
34207: LD_ADDR_OWVAR 42
34211: PUSH
34212: LD_INT 6
34214: ST_TO_ADDR
34215: GO 34791
34217: LD_INT 4
34219: DOUBLE
34220: GREATEREQUAL
34221: IFFALSE 34229
34223: LD_INT 9
34225: DOUBLE
34226: LESSEQUAL
34227: IFTRUE 34231
34229: GO 34283
34231: POP
// begin bc_type := b_lab_half ;
34232: LD_ADDR_OWVAR 42
34236: PUSH
34237: LD_INT 7
34239: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34240: LD_ADDR_OWVAR 44
34244: PUSH
34245: LD_INT 10
34247: PUSH
34248: LD_INT 11
34250: PUSH
34251: LD_INT 12
34253: PUSH
34254: LD_INT 15
34256: PUSH
34257: LD_INT 14
34259: PUSH
34260: LD_INT 13
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: PUSH
34271: LD_VAR 0 2
34275: PUSH
34276: LD_INT 3
34278: MINUS
34279: ARRAY
34280: ST_TO_ADDR
// end ; 10 .. 13 :
34281: GO 34791
34283: LD_INT 10
34285: DOUBLE
34286: GREATEREQUAL
34287: IFFALSE 34295
34289: LD_INT 13
34291: DOUBLE
34292: LESSEQUAL
34293: IFTRUE 34297
34295: GO 34374
34297: POP
// begin bc_type := b_lab_full ;
34298: LD_ADDR_OWVAR 42
34302: PUSH
34303: LD_INT 8
34305: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34306: LD_ADDR_OWVAR 44
34310: PUSH
34311: LD_INT 10
34313: PUSH
34314: LD_INT 12
34316: PUSH
34317: LD_INT 14
34319: PUSH
34320: LD_INT 13
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: PUSH
34329: LD_VAR 0 2
34333: PUSH
34334: LD_INT 9
34336: MINUS
34337: ARRAY
34338: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34339: LD_ADDR_OWVAR 45
34343: PUSH
34344: LD_INT 11
34346: PUSH
34347: LD_INT 15
34349: PUSH
34350: LD_INT 12
34352: PUSH
34353: LD_INT 15
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: PUSH
34362: LD_VAR 0 2
34366: PUSH
34367: LD_INT 9
34369: MINUS
34370: ARRAY
34371: ST_TO_ADDR
// end ; 14 :
34372: GO 34791
34374: LD_INT 14
34376: DOUBLE
34377: EQUAL
34378: IFTRUE 34382
34380: GO 34393
34382: POP
// bc_type := b_workshop ; 15 :
34383: LD_ADDR_OWVAR 42
34387: PUSH
34388: LD_INT 2
34390: ST_TO_ADDR
34391: GO 34791
34393: LD_INT 15
34395: DOUBLE
34396: EQUAL
34397: IFTRUE 34401
34399: GO 34412
34401: POP
// bc_type := b_factory ; 16 :
34402: LD_ADDR_OWVAR 42
34406: PUSH
34407: LD_INT 3
34409: ST_TO_ADDR
34410: GO 34791
34412: LD_INT 16
34414: DOUBLE
34415: EQUAL
34416: IFTRUE 34420
34418: GO 34431
34420: POP
// bc_type := b_ext_gun ; 17 :
34421: LD_ADDR_OWVAR 42
34425: PUSH
34426: LD_INT 17
34428: ST_TO_ADDR
34429: GO 34791
34431: LD_INT 17
34433: DOUBLE
34434: EQUAL
34435: IFTRUE 34439
34437: GO 34467
34439: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34440: LD_ADDR_OWVAR 42
34444: PUSH
34445: LD_INT 19
34447: PUSH
34448: LD_INT 23
34450: PUSH
34451: LD_INT 19
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: PUSH
34459: LD_VAR 0 1
34463: ARRAY
34464: ST_TO_ADDR
34465: GO 34791
34467: LD_INT 18
34469: DOUBLE
34470: EQUAL
34471: IFTRUE 34475
34473: GO 34486
34475: POP
// bc_type := b_ext_radar ; 19 :
34476: LD_ADDR_OWVAR 42
34480: PUSH
34481: LD_INT 20
34483: ST_TO_ADDR
34484: GO 34791
34486: LD_INT 19
34488: DOUBLE
34489: EQUAL
34490: IFTRUE 34494
34492: GO 34505
34494: POP
// bc_type := b_ext_radio ; 20 :
34495: LD_ADDR_OWVAR 42
34499: PUSH
34500: LD_INT 22
34502: ST_TO_ADDR
34503: GO 34791
34505: LD_INT 20
34507: DOUBLE
34508: EQUAL
34509: IFTRUE 34513
34511: GO 34524
34513: POP
// bc_type := b_ext_siberium ; 21 :
34514: LD_ADDR_OWVAR 42
34518: PUSH
34519: LD_INT 21
34521: ST_TO_ADDR
34522: GO 34791
34524: LD_INT 21
34526: DOUBLE
34527: EQUAL
34528: IFTRUE 34532
34530: GO 34543
34532: POP
// bc_type := b_ext_computer ; 22 :
34533: LD_ADDR_OWVAR 42
34537: PUSH
34538: LD_INT 24
34540: ST_TO_ADDR
34541: GO 34791
34543: LD_INT 22
34545: DOUBLE
34546: EQUAL
34547: IFTRUE 34551
34549: GO 34562
34551: POP
// bc_type := b_ext_track ; 23 :
34552: LD_ADDR_OWVAR 42
34556: PUSH
34557: LD_INT 16
34559: ST_TO_ADDR
34560: GO 34791
34562: LD_INT 23
34564: DOUBLE
34565: EQUAL
34566: IFTRUE 34570
34568: GO 34581
34570: POP
// bc_type := b_ext_laser ; 24 :
34571: LD_ADDR_OWVAR 42
34575: PUSH
34576: LD_INT 25
34578: ST_TO_ADDR
34579: GO 34791
34581: LD_INT 24
34583: DOUBLE
34584: EQUAL
34585: IFTRUE 34589
34587: GO 34600
34589: POP
// bc_type := b_control_tower ; 25 :
34590: LD_ADDR_OWVAR 42
34594: PUSH
34595: LD_INT 36
34597: ST_TO_ADDR
34598: GO 34791
34600: LD_INT 25
34602: DOUBLE
34603: EQUAL
34604: IFTRUE 34608
34606: GO 34619
34608: POP
// bc_type := b_breastwork ; 26 :
34609: LD_ADDR_OWVAR 42
34613: PUSH
34614: LD_INT 31
34616: ST_TO_ADDR
34617: GO 34791
34619: LD_INT 26
34621: DOUBLE
34622: EQUAL
34623: IFTRUE 34627
34625: GO 34638
34627: POP
// bc_type := b_bunker ; 27 :
34628: LD_ADDR_OWVAR 42
34632: PUSH
34633: LD_INT 32
34635: ST_TO_ADDR
34636: GO 34791
34638: LD_INT 27
34640: DOUBLE
34641: EQUAL
34642: IFTRUE 34646
34644: GO 34657
34646: POP
// bc_type := b_turret ; 28 :
34647: LD_ADDR_OWVAR 42
34651: PUSH
34652: LD_INT 33
34654: ST_TO_ADDR
34655: GO 34791
34657: LD_INT 28
34659: DOUBLE
34660: EQUAL
34661: IFTRUE 34665
34663: GO 34676
34665: POP
// bc_type := b_armoury ; 29 :
34666: LD_ADDR_OWVAR 42
34670: PUSH
34671: LD_INT 4
34673: ST_TO_ADDR
34674: GO 34791
34676: LD_INT 29
34678: DOUBLE
34679: EQUAL
34680: IFTRUE 34684
34682: GO 34695
34684: POP
// bc_type := b_barracks ; 30 :
34685: LD_ADDR_OWVAR 42
34689: PUSH
34690: LD_INT 5
34692: ST_TO_ADDR
34693: GO 34791
34695: LD_INT 30
34697: DOUBLE
34698: EQUAL
34699: IFTRUE 34703
34701: GO 34714
34703: POP
// bc_type := b_solar_power ; 31 :
34704: LD_ADDR_OWVAR 42
34708: PUSH
34709: LD_INT 27
34711: ST_TO_ADDR
34712: GO 34791
34714: LD_INT 31
34716: DOUBLE
34717: EQUAL
34718: IFTRUE 34722
34720: GO 34733
34722: POP
// bc_type := b_oil_power ; 32 :
34723: LD_ADDR_OWVAR 42
34727: PUSH
34728: LD_INT 26
34730: ST_TO_ADDR
34731: GO 34791
34733: LD_INT 32
34735: DOUBLE
34736: EQUAL
34737: IFTRUE 34741
34739: GO 34752
34741: POP
// bc_type := b_siberite_power ; 33 :
34742: LD_ADDR_OWVAR 42
34746: PUSH
34747: LD_INT 28
34749: ST_TO_ADDR
34750: GO 34791
34752: LD_INT 33
34754: DOUBLE
34755: EQUAL
34756: IFTRUE 34760
34758: GO 34771
34760: POP
// bc_type := b_oil_mine ; 34 :
34761: LD_ADDR_OWVAR 42
34765: PUSH
34766: LD_INT 29
34768: ST_TO_ADDR
34769: GO 34791
34771: LD_INT 34
34773: DOUBLE
34774: EQUAL
34775: IFTRUE 34779
34777: GO 34790
34779: POP
// bc_type := b_siberite_mine ; end ;
34780: LD_ADDR_OWVAR 42
34784: PUSH
34785: LD_INT 30
34787: ST_TO_ADDR
34788: GO 34791
34790: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34791: LD_ADDR_VAR 0 8
34795: PUSH
34796: LD_VAR 0 5
34800: PPUSH
34801: LD_VAR 0 6
34805: PPUSH
34806: LD_VAR 0 3
34810: PPUSH
34811: CALL_OW 47
34815: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34816: LD_OWVAR 42
34820: PUSH
34821: LD_INT 32
34823: PUSH
34824: LD_INT 33
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: IN
34831: IFFALSE 34847
// PlaceWeaponTurret ( b , weapon ) ;
34833: LD_VAR 0 8
34837: PPUSH
34838: LD_VAR 0 4
34842: PPUSH
34843: CALL_OW 431
// end ;
34847: LD_VAR 0 7
34851: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34852: LD_INT 0
34854: PPUSH
34855: PPUSH
34856: PPUSH
34857: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34858: LD_ADDR_VAR 0 4
34862: PUSH
34863: LD_INT 22
34865: PUSH
34866: LD_OWVAR 2
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 2
34877: PUSH
34878: LD_INT 30
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 30
34890: PUSH
34891: LD_INT 1
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: LIST
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PPUSH
34907: CALL_OW 69
34911: ST_TO_ADDR
// if not tmp then
34912: LD_VAR 0 4
34916: NOT
34917: IFFALSE 34921
// exit ;
34919: GO 34980
// for i in tmp do
34921: LD_ADDR_VAR 0 2
34925: PUSH
34926: LD_VAR 0 4
34930: PUSH
34931: FOR_IN
34932: IFFALSE 34978
// for j = 1 to 3 do
34934: LD_ADDR_VAR 0 3
34938: PUSH
34939: DOUBLE
34940: LD_INT 1
34942: DEC
34943: ST_TO_ADDR
34944: LD_INT 3
34946: PUSH
34947: FOR_TO
34948: IFFALSE 34974
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34950: LD_VAR 0 2
34954: PPUSH
34955: CALL_OW 274
34959: PPUSH
34960: LD_VAR 0 3
34964: PPUSH
34965: LD_INT 99999
34967: PPUSH
34968: CALL_OW 277
34972: GO 34947
34974: POP
34975: POP
34976: GO 34931
34978: POP
34979: POP
// end ;
34980: LD_VAR 0 1
34984: RET
// export function hHackSetLevel10 ; var i , j ; begin
34985: LD_INT 0
34987: PPUSH
34988: PPUSH
34989: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34990: LD_ADDR_VAR 0 2
34994: PUSH
34995: LD_INT 21
34997: PUSH
34998: LD_INT 1
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PPUSH
35005: CALL_OW 69
35009: PUSH
35010: FOR_IN
35011: IFFALSE 35063
// if IsSelected ( i ) then
35013: LD_VAR 0 2
35017: PPUSH
35018: CALL_OW 306
35022: IFFALSE 35061
// begin for j := 1 to 4 do
35024: LD_ADDR_VAR 0 3
35028: PUSH
35029: DOUBLE
35030: LD_INT 1
35032: DEC
35033: ST_TO_ADDR
35034: LD_INT 4
35036: PUSH
35037: FOR_TO
35038: IFFALSE 35059
// SetSkill ( i , j , 10 ) ;
35040: LD_VAR 0 2
35044: PPUSH
35045: LD_VAR 0 3
35049: PPUSH
35050: LD_INT 10
35052: PPUSH
35053: CALL_OW 237
35057: GO 35037
35059: POP
35060: POP
// end ;
35061: GO 35010
35063: POP
35064: POP
// end ;
35065: LD_VAR 0 1
35069: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35070: LD_INT 0
35072: PPUSH
35073: PPUSH
35074: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35075: LD_ADDR_VAR 0 2
35079: PUSH
35080: LD_INT 22
35082: PUSH
35083: LD_OWVAR 2
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 21
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PPUSH
35106: CALL_OW 69
35110: PUSH
35111: FOR_IN
35112: IFFALSE 35153
// begin for j := 1 to 4 do
35114: LD_ADDR_VAR 0 3
35118: PUSH
35119: DOUBLE
35120: LD_INT 1
35122: DEC
35123: ST_TO_ADDR
35124: LD_INT 4
35126: PUSH
35127: FOR_TO
35128: IFFALSE 35149
// SetSkill ( i , j , 10 ) ;
35130: LD_VAR 0 2
35134: PPUSH
35135: LD_VAR 0 3
35139: PPUSH
35140: LD_INT 10
35142: PPUSH
35143: CALL_OW 237
35147: GO 35127
35149: POP
35150: POP
// end ;
35151: GO 35111
35153: POP
35154: POP
// end ;
35155: LD_VAR 0 1
35159: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35160: LD_INT 0
35162: PPUSH
// uc_side := your_side ;
35163: LD_ADDR_OWVAR 20
35167: PUSH
35168: LD_OWVAR 2
35172: ST_TO_ADDR
// uc_nation := nation ;
35173: LD_ADDR_OWVAR 21
35177: PUSH
35178: LD_VAR 0 1
35182: ST_TO_ADDR
// InitHc ;
35183: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35187: LD_INT 0
35189: PPUSH
35190: LD_VAR 0 2
35194: PPUSH
35195: LD_VAR 0 3
35199: PPUSH
35200: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35204: LD_VAR 0 4
35208: PPUSH
35209: LD_VAR 0 5
35213: PPUSH
35214: CALL_OW 428
35218: PUSH
35219: LD_INT 0
35221: EQUAL
35222: IFFALSE 35246
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35224: CALL_OW 44
35228: PPUSH
35229: LD_VAR 0 4
35233: PPUSH
35234: LD_VAR 0 5
35238: PPUSH
35239: LD_INT 1
35241: PPUSH
35242: CALL_OW 48
// end ;
35246: LD_VAR 0 6
35250: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35251: LD_INT 0
35253: PPUSH
35254: PPUSH
// uc_side := your_side ;
35255: LD_ADDR_OWVAR 20
35259: PUSH
35260: LD_OWVAR 2
35264: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35265: LD_VAR 0 1
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: LD_INT 2
35275: PUSH
35276: LD_INT 3
35278: PUSH
35279: LD_INT 4
35281: PUSH
35282: LD_INT 5
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: IN
35292: IFFALSE 35304
// uc_nation := nation_american else
35294: LD_ADDR_OWVAR 21
35298: PUSH
35299: LD_INT 1
35301: ST_TO_ADDR
35302: GO 35347
// if chassis in [ 11 , 12 , 13 , 14 ] then
35304: LD_VAR 0 1
35308: PUSH
35309: LD_INT 11
35311: PUSH
35312: LD_INT 12
35314: PUSH
35315: LD_INT 13
35317: PUSH
35318: LD_INT 14
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: IN
35327: IFFALSE 35339
// uc_nation := nation_arabian else
35329: LD_ADDR_OWVAR 21
35333: PUSH
35334: LD_INT 2
35336: ST_TO_ADDR
35337: GO 35347
// uc_nation := nation_russian ;
35339: LD_ADDR_OWVAR 21
35343: PUSH
35344: LD_INT 3
35346: ST_TO_ADDR
// vc_chassis := chassis ;
35347: LD_ADDR_OWVAR 37
35351: PUSH
35352: LD_VAR 0 1
35356: ST_TO_ADDR
// vc_engine := engine ;
35357: LD_ADDR_OWVAR 39
35361: PUSH
35362: LD_VAR 0 2
35366: ST_TO_ADDR
// vc_control := control ;
35367: LD_ADDR_OWVAR 38
35371: PUSH
35372: LD_VAR 0 3
35376: ST_TO_ADDR
// vc_weapon := weapon ;
35377: LD_ADDR_OWVAR 40
35381: PUSH
35382: LD_VAR 0 4
35386: ST_TO_ADDR
// un := CreateVehicle ;
35387: LD_ADDR_VAR 0 8
35391: PUSH
35392: CALL_OW 45
35396: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35397: LD_VAR 0 8
35401: PPUSH
35402: LD_INT 0
35404: PPUSH
35405: LD_INT 5
35407: PPUSH
35408: CALL_OW 12
35412: PPUSH
35413: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35417: LD_VAR 0 8
35421: PPUSH
35422: LD_VAR 0 5
35426: PPUSH
35427: LD_VAR 0 6
35431: PPUSH
35432: LD_INT 1
35434: PPUSH
35435: CALL_OW 48
// end ;
35439: LD_VAR 0 7
35443: RET
// export hInvincible ; every 1 do
35444: GO 35446
35446: DISABLE
// hInvincible := [ ] ;
35447: LD_ADDR_EXP 125
35451: PUSH
35452: EMPTY
35453: ST_TO_ADDR
35454: END
// every 10 do var i ;
35455: GO 35457
35457: DISABLE
35458: LD_INT 0
35460: PPUSH
// begin enable ;
35461: ENABLE
// if not hInvincible then
35462: LD_EXP 125
35466: NOT
35467: IFFALSE 35471
// exit ;
35469: GO 35515
// for i in hInvincible do
35471: LD_ADDR_VAR 0 1
35475: PUSH
35476: LD_EXP 125
35480: PUSH
35481: FOR_IN
35482: IFFALSE 35513
// if GetLives ( i ) < 1000 then
35484: LD_VAR 0 1
35488: PPUSH
35489: CALL_OW 256
35493: PUSH
35494: LD_INT 1000
35496: LESS
35497: IFFALSE 35511
// SetLives ( i , 1000 ) ;
35499: LD_VAR 0 1
35503: PPUSH
35504: LD_INT 1000
35506: PPUSH
35507: CALL_OW 234
35511: GO 35481
35513: POP
35514: POP
// end ;
35515: PPOPN 1
35517: END
// export function hHackInvincible ; var i ; begin
35518: LD_INT 0
35520: PPUSH
35521: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35522: LD_ADDR_VAR 0 2
35526: PUSH
35527: LD_INT 2
35529: PUSH
35530: LD_INT 21
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 21
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: LIST
35554: PPUSH
35555: CALL_OW 69
35559: PUSH
35560: FOR_IN
35561: IFFALSE 35622
// if IsSelected ( i ) then
35563: LD_VAR 0 2
35567: PPUSH
35568: CALL_OW 306
35572: IFFALSE 35620
// begin if i in hInvincible then
35574: LD_VAR 0 2
35578: PUSH
35579: LD_EXP 125
35583: IN
35584: IFFALSE 35604
// hInvincible := hInvincible diff i else
35586: LD_ADDR_EXP 125
35590: PUSH
35591: LD_EXP 125
35595: PUSH
35596: LD_VAR 0 2
35600: DIFF
35601: ST_TO_ADDR
35602: GO 35620
// hInvincible := hInvincible union i ;
35604: LD_ADDR_EXP 125
35608: PUSH
35609: LD_EXP 125
35613: PUSH
35614: LD_VAR 0 2
35618: UNION
35619: ST_TO_ADDR
// end ;
35620: GO 35560
35622: POP
35623: POP
// end ;
35624: LD_VAR 0 1
35628: RET
// export function hHackInvisible ; var i , j ; begin
35629: LD_INT 0
35631: PPUSH
35632: PPUSH
35633: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35634: LD_ADDR_VAR 0 2
35638: PUSH
35639: LD_INT 21
35641: PUSH
35642: LD_INT 1
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PPUSH
35649: CALL_OW 69
35653: PUSH
35654: FOR_IN
35655: IFFALSE 35679
// if IsSelected ( i ) then
35657: LD_VAR 0 2
35661: PPUSH
35662: CALL_OW 306
35666: IFFALSE 35677
// ComForceInvisible ( i ) ;
35668: LD_VAR 0 2
35672: PPUSH
35673: CALL_OW 496
35677: GO 35654
35679: POP
35680: POP
// end ;
35681: LD_VAR 0 1
35685: RET
// export function hHackChangeYourSide ; begin
35686: LD_INT 0
35688: PPUSH
// if your_side = 8 then
35689: LD_OWVAR 2
35693: PUSH
35694: LD_INT 8
35696: EQUAL
35697: IFFALSE 35709
// your_side := 0 else
35699: LD_ADDR_OWVAR 2
35703: PUSH
35704: LD_INT 0
35706: ST_TO_ADDR
35707: GO 35723
// your_side := your_side + 1 ;
35709: LD_ADDR_OWVAR 2
35713: PUSH
35714: LD_OWVAR 2
35718: PUSH
35719: LD_INT 1
35721: PLUS
35722: ST_TO_ADDR
// end ;
35723: LD_VAR 0 1
35727: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35728: LD_INT 0
35730: PPUSH
35731: PPUSH
35732: PPUSH
// for i in all_units do
35733: LD_ADDR_VAR 0 2
35737: PUSH
35738: LD_OWVAR 3
35742: PUSH
35743: FOR_IN
35744: IFFALSE 35822
// if IsSelected ( i ) then
35746: LD_VAR 0 2
35750: PPUSH
35751: CALL_OW 306
35755: IFFALSE 35820
// begin j := GetSide ( i ) ;
35757: LD_ADDR_VAR 0 3
35761: PUSH
35762: LD_VAR 0 2
35766: PPUSH
35767: CALL_OW 255
35771: ST_TO_ADDR
// if j = 8 then
35772: LD_VAR 0 3
35776: PUSH
35777: LD_INT 8
35779: EQUAL
35780: IFFALSE 35792
// j := 0 else
35782: LD_ADDR_VAR 0 3
35786: PUSH
35787: LD_INT 0
35789: ST_TO_ADDR
35790: GO 35806
// j := j + 1 ;
35792: LD_ADDR_VAR 0 3
35796: PUSH
35797: LD_VAR 0 3
35801: PUSH
35802: LD_INT 1
35804: PLUS
35805: ST_TO_ADDR
// SetSide ( i , j ) ;
35806: LD_VAR 0 2
35810: PPUSH
35811: LD_VAR 0 3
35815: PPUSH
35816: CALL_OW 235
// end ;
35820: GO 35743
35822: POP
35823: POP
// end ;
35824: LD_VAR 0 1
35828: RET
// export function hHackFog ; begin
35829: LD_INT 0
35831: PPUSH
// FogOff ( true ) ;
35832: LD_INT 1
35834: PPUSH
35835: CALL_OW 344
// end ;
35839: LD_VAR 0 1
35843: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35844: LD_INT 0
35846: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35847: LD_VAR 0 1
35851: PPUSH
35852: LD_VAR 0 2
35856: PPUSH
35857: LD_VAR 0 3
35861: PPUSH
35862: LD_INT 1
35864: PPUSH
35865: LD_INT 1
35867: PPUSH
35868: CALL_OW 483
// CenterOnXY ( x , y ) ;
35872: LD_VAR 0 2
35876: PPUSH
35877: LD_VAR 0 3
35881: PPUSH
35882: CALL_OW 84
// end ; end_of_file
35886: LD_VAR 0 4
35890: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35891: LD_INT 0
35893: PPUSH
35894: PPUSH
35895: PPUSH
35896: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35897: LD_VAR 0 1
35901: PPUSH
35902: CALL_OW 264
35906: PUSH
35907: LD_EXP 56
35911: EQUAL
35912: IFFALSE 35984
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35914: LD_INT 68
35916: PPUSH
35917: LD_VAR 0 1
35921: PPUSH
35922: CALL_OW 255
35926: PPUSH
35927: CALL_OW 321
35931: PUSH
35932: LD_INT 2
35934: EQUAL
35935: IFFALSE 35947
// eff := 70 else
35937: LD_ADDR_VAR 0 4
35941: PUSH
35942: LD_INT 70
35944: ST_TO_ADDR
35945: GO 35955
// eff := 30 ;
35947: LD_ADDR_VAR 0 4
35951: PUSH
35952: LD_INT 30
35954: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35955: LD_VAR 0 1
35959: PPUSH
35960: CALL_OW 250
35964: PPUSH
35965: LD_VAR 0 1
35969: PPUSH
35970: CALL_OW 251
35974: PPUSH
35975: LD_VAR 0 4
35979: PPUSH
35980: CALL_OW 495
// end ; end ;
35984: LD_VAR 0 2
35988: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35989: LD_INT 0
35991: PPUSH
// end ;
35992: LD_VAR 0 4
35996: RET
// export function SOS_Command ( cmd ) ; begin
35997: LD_INT 0
35999: PPUSH
// end ;
36000: LD_VAR 0 2
36004: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36005: LD_INT 0
36007: PPUSH
// if cmd = 121 then
36008: LD_VAR 0 1
36012: PUSH
36013: LD_INT 121
36015: EQUAL
36016: IFFALSE 36018
// end ;
36018: LD_VAR 0 6
36022: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36023: LD_INT 0
36025: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36026: LD_VAR 0 1
36030: PUSH
36031: LD_INT 250
36033: EQUAL
36034: PUSH
36035: LD_VAR 0 2
36039: PPUSH
36040: CALL_OW 264
36044: PUSH
36045: LD_EXP 59
36049: EQUAL
36050: AND
36051: IFFALSE 36072
// MinerPlaceMine ( unit , x , y ) ;
36053: LD_VAR 0 2
36057: PPUSH
36058: LD_VAR 0 4
36062: PPUSH
36063: LD_VAR 0 5
36067: PPUSH
36068: CALL 38421 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36072: LD_VAR 0 1
36076: PUSH
36077: LD_INT 251
36079: EQUAL
36080: PUSH
36081: LD_VAR 0 2
36085: PPUSH
36086: CALL_OW 264
36090: PUSH
36091: LD_EXP 59
36095: EQUAL
36096: AND
36097: IFFALSE 36118
// MinerDetonateMine ( unit , x , y ) ;
36099: LD_VAR 0 2
36103: PPUSH
36104: LD_VAR 0 4
36108: PPUSH
36109: LD_VAR 0 5
36113: PPUSH
36114: CALL 38698 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36118: LD_VAR 0 1
36122: PUSH
36123: LD_INT 252
36125: EQUAL
36126: PUSH
36127: LD_VAR 0 2
36131: PPUSH
36132: CALL_OW 264
36136: PUSH
36137: LD_EXP 59
36141: EQUAL
36142: AND
36143: IFFALSE 36164
// MinerCreateMinefield ( unit , x , y ) ;
36145: LD_VAR 0 2
36149: PPUSH
36150: LD_VAR 0 4
36154: PPUSH
36155: LD_VAR 0 5
36159: PPUSH
36160: CALL 39115 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36164: LD_VAR 0 1
36168: PUSH
36169: LD_INT 253
36171: EQUAL
36172: PUSH
36173: LD_VAR 0 2
36177: PPUSH
36178: CALL_OW 257
36182: PUSH
36183: LD_INT 5
36185: EQUAL
36186: AND
36187: IFFALSE 36208
// ComBinocular ( unit , x , y ) ;
36189: LD_VAR 0 2
36193: PPUSH
36194: LD_VAR 0 4
36198: PPUSH
36199: LD_VAR 0 5
36203: PPUSH
36204: CALL 39486 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36208: LD_VAR 0 1
36212: PUSH
36213: LD_INT 254
36215: EQUAL
36216: PUSH
36217: LD_VAR 0 2
36221: PPUSH
36222: CALL_OW 264
36226: PUSH
36227: LD_EXP 54
36231: EQUAL
36232: AND
36233: PUSH
36234: LD_VAR 0 3
36238: PPUSH
36239: CALL_OW 263
36243: PUSH
36244: LD_INT 3
36246: EQUAL
36247: AND
36248: IFFALSE 36264
// HackDestroyVehicle ( unit , selectedUnit ) ;
36250: LD_VAR 0 2
36254: PPUSH
36255: LD_VAR 0 3
36259: PPUSH
36260: CALL 37781 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36264: LD_VAR 0 1
36268: PUSH
36269: LD_INT 255
36271: EQUAL
36272: PUSH
36273: LD_VAR 0 2
36277: PPUSH
36278: CALL_OW 264
36282: PUSH
36283: LD_INT 14
36285: PUSH
36286: LD_INT 53
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: IN
36293: AND
36294: PUSH
36295: LD_VAR 0 4
36299: PPUSH
36300: LD_VAR 0 5
36304: PPUSH
36305: CALL_OW 488
36309: AND
36310: IFFALSE 36334
// CutTreeXYR ( unit , x , y , 12 ) ;
36312: LD_VAR 0 2
36316: PPUSH
36317: LD_VAR 0 4
36321: PPUSH
36322: LD_VAR 0 5
36326: PPUSH
36327: LD_INT 12
36329: PPUSH
36330: CALL 36347 0 4
// end ;
36334: LD_VAR 0 6
36338: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
36339: LD_INT 0
36341: PPUSH
// end ;
36342: LD_VAR 0 4
36346: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36347: LD_INT 0
36349: PPUSH
36350: PPUSH
36351: PPUSH
36352: PPUSH
36353: PPUSH
36354: PPUSH
36355: PPUSH
36356: PPUSH
36357: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36358: LD_VAR 0 1
36362: NOT
36363: PUSH
36364: LD_VAR 0 2
36368: PPUSH
36369: LD_VAR 0 3
36373: PPUSH
36374: CALL_OW 488
36378: NOT
36379: OR
36380: PUSH
36381: LD_VAR 0 4
36385: NOT
36386: OR
36387: IFFALSE 36391
// exit ;
36389: GO 36731
// list := [ ] ;
36391: LD_ADDR_VAR 0 13
36395: PUSH
36396: EMPTY
36397: ST_TO_ADDR
// if x - r < 0 then
36398: LD_VAR 0 2
36402: PUSH
36403: LD_VAR 0 4
36407: MINUS
36408: PUSH
36409: LD_INT 0
36411: LESS
36412: IFFALSE 36424
// min_x := 0 else
36414: LD_ADDR_VAR 0 7
36418: PUSH
36419: LD_INT 0
36421: ST_TO_ADDR
36422: GO 36440
// min_x := x - r ;
36424: LD_ADDR_VAR 0 7
36428: PUSH
36429: LD_VAR 0 2
36433: PUSH
36434: LD_VAR 0 4
36438: MINUS
36439: ST_TO_ADDR
// if y - r < 0 then
36440: LD_VAR 0 3
36444: PUSH
36445: LD_VAR 0 4
36449: MINUS
36450: PUSH
36451: LD_INT 0
36453: LESS
36454: IFFALSE 36466
// min_y := 0 else
36456: LD_ADDR_VAR 0 8
36460: PUSH
36461: LD_INT 0
36463: ST_TO_ADDR
36464: GO 36482
// min_y := y - r ;
36466: LD_ADDR_VAR 0 8
36470: PUSH
36471: LD_VAR 0 3
36475: PUSH
36476: LD_VAR 0 4
36480: MINUS
36481: ST_TO_ADDR
// max_x := x + r ;
36482: LD_ADDR_VAR 0 9
36486: PUSH
36487: LD_VAR 0 2
36491: PUSH
36492: LD_VAR 0 4
36496: PLUS
36497: ST_TO_ADDR
// max_y := y + r ;
36498: LD_ADDR_VAR 0 10
36502: PUSH
36503: LD_VAR 0 3
36507: PUSH
36508: LD_VAR 0 4
36512: PLUS
36513: ST_TO_ADDR
// for _x = min_x to max_x do
36514: LD_ADDR_VAR 0 11
36518: PUSH
36519: DOUBLE
36520: LD_VAR 0 7
36524: DEC
36525: ST_TO_ADDR
36526: LD_VAR 0 9
36530: PUSH
36531: FOR_TO
36532: IFFALSE 36649
// for _y = min_y to max_y do
36534: LD_ADDR_VAR 0 12
36538: PUSH
36539: DOUBLE
36540: LD_VAR 0 8
36544: DEC
36545: ST_TO_ADDR
36546: LD_VAR 0 10
36550: PUSH
36551: FOR_TO
36552: IFFALSE 36645
// begin if not ValidHex ( _x , _y ) then
36554: LD_VAR 0 11
36558: PPUSH
36559: LD_VAR 0 12
36563: PPUSH
36564: CALL_OW 488
36568: NOT
36569: IFFALSE 36573
// continue ;
36571: GO 36551
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36573: LD_VAR 0 11
36577: PPUSH
36578: LD_VAR 0 12
36582: PPUSH
36583: CALL_OW 351
36587: PUSH
36588: LD_VAR 0 11
36592: PPUSH
36593: LD_VAR 0 12
36597: PPUSH
36598: CALL_OW 554
36602: AND
36603: IFFALSE 36643
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36605: LD_ADDR_VAR 0 13
36609: PUSH
36610: LD_VAR 0 13
36614: PPUSH
36615: LD_VAR 0 13
36619: PUSH
36620: LD_INT 1
36622: PLUS
36623: PPUSH
36624: LD_VAR 0 11
36628: PUSH
36629: LD_VAR 0 12
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PPUSH
36638: CALL_OW 2
36642: ST_TO_ADDR
// end ;
36643: GO 36551
36645: POP
36646: POP
36647: GO 36531
36649: POP
36650: POP
// if not list then
36651: LD_VAR 0 13
36655: NOT
36656: IFFALSE 36660
// exit ;
36658: GO 36731
// for i in list do
36660: LD_ADDR_VAR 0 6
36664: PUSH
36665: LD_VAR 0 13
36669: PUSH
36670: FOR_IN
36671: IFFALSE 36729
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36673: LD_VAR 0 1
36677: PPUSH
36678: LD_STRING M
36680: PUSH
36681: LD_VAR 0 6
36685: PUSH
36686: LD_INT 1
36688: ARRAY
36689: PUSH
36690: LD_VAR 0 6
36694: PUSH
36695: LD_INT 2
36697: ARRAY
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: PUSH
36720: EMPTY
36721: LIST
36722: PPUSH
36723: CALL_OW 447
36727: GO 36670
36729: POP
36730: POP
// end ;
36731: LD_VAR 0 5
36735: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36736: LD_EXP 128
36740: NOT
36741: IFFALSE 36791
36743: GO 36745
36745: DISABLE
// begin initHack := true ;
36746: LD_ADDR_EXP 128
36750: PUSH
36751: LD_INT 1
36753: ST_TO_ADDR
// hackTanks := [ ] ;
36754: LD_ADDR_EXP 129
36758: PUSH
36759: EMPTY
36760: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36761: LD_ADDR_EXP 130
36765: PUSH
36766: EMPTY
36767: ST_TO_ADDR
// hackLimit := 3 ;
36768: LD_ADDR_EXP 131
36772: PUSH
36773: LD_INT 3
36775: ST_TO_ADDR
// hackDist := 12 ;
36776: LD_ADDR_EXP 132
36780: PUSH
36781: LD_INT 12
36783: ST_TO_ADDR
// hackCounter := [ ] ;
36784: LD_ADDR_EXP 133
36788: PUSH
36789: EMPTY
36790: ST_TO_ADDR
// end ;
36791: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36792: LD_EXP 128
36796: PUSH
36797: LD_INT 34
36799: PUSH
36800: LD_EXP 54
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PPUSH
36809: CALL_OW 69
36813: AND
36814: IFFALSE 37069
36816: GO 36818
36818: DISABLE
36819: LD_INT 0
36821: PPUSH
36822: PPUSH
// begin enable ;
36823: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36824: LD_ADDR_VAR 0 1
36828: PUSH
36829: LD_INT 34
36831: PUSH
36832: LD_EXP 54
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PPUSH
36841: CALL_OW 69
36845: PUSH
36846: FOR_IN
36847: IFFALSE 37067
// begin if not i in hackTanks then
36849: LD_VAR 0 1
36853: PUSH
36854: LD_EXP 129
36858: IN
36859: NOT
36860: IFFALSE 36943
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36862: LD_ADDR_EXP 129
36866: PUSH
36867: LD_EXP 129
36871: PPUSH
36872: LD_EXP 129
36876: PUSH
36877: LD_INT 1
36879: PLUS
36880: PPUSH
36881: LD_VAR 0 1
36885: PPUSH
36886: CALL_OW 1
36890: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36891: LD_ADDR_EXP 130
36895: PUSH
36896: LD_EXP 130
36900: PPUSH
36901: LD_EXP 130
36905: PUSH
36906: LD_INT 1
36908: PLUS
36909: PPUSH
36910: EMPTY
36911: PPUSH
36912: CALL_OW 1
36916: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36917: LD_ADDR_EXP 133
36921: PUSH
36922: LD_EXP 133
36926: PPUSH
36927: LD_EXP 133
36931: PUSH
36932: LD_INT 1
36934: PLUS
36935: PPUSH
36936: EMPTY
36937: PPUSH
36938: CALL_OW 1
36942: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36943: LD_VAR 0 1
36947: PPUSH
36948: CALL_OW 302
36952: NOT
36953: IFFALSE 36966
// begin HackUnlinkAll ( i ) ;
36955: LD_VAR 0 1
36959: PPUSH
36960: CALL 37072 0 1
// continue ;
36964: GO 36846
// end ; HackCheckCapturedStatus ( i ) ;
36966: LD_VAR 0 1
36970: PPUSH
36971: CALL 37515 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36975: LD_ADDR_VAR 0 2
36979: PUSH
36980: LD_INT 81
36982: PUSH
36983: LD_VAR 0 1
36987: PPUSH
36988: CALL_OW 255
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 33
36999: PUSH
37000: LD_INT 3
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 91
37009: PUSH
37010: LD_VAR 0 1
37014: PUSH
37015: LD_EXP 132
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 50
37027: PUSH
37028: EMPTY
37029: LIST
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: PPUSH
37037: CALL_OW 69
37041: ST_TO_ADDR
// if not tmp then
37042: LD_VAR 0 2
37046: NOT
37047: IFFALSE 37051
// continue ;
37049: GO 36846
// HackLink ( i , tmp ) ;
37051: LD_VAR 0 1
37055: PPUSH
37056: LD_VAR 0 2
37060: PPUSH
37061: CALL 37208 0 2
// end ;
37065: GO 36846
37067: POP
37068: POP
// end ;
37069: PPOPN 2
37071: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37072: LD_INT 0
37074: PPUSH
37075: PPUSH
37076: PPUSH
// if not hack in hackTanks then
37077: LD_VAR 0 1
37081: PUSH
37082: LD_EXP 129
37086: IN
37087: NOT
37088: IFFALSE 37092
// exit ;
37090: GO 37203
// index := GetElementIndex ( hackTanks , hack ) ;
37092: LD_ADDR_VAR 0 4
37096: PUSH
37097: LD_EXP 129
37101: PPUSH
37102: LD_VAR 0 1
37106: PPUSH
37107: CALL 44677 0 2
37111: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37112: LD_EXP 130
37116: PUSH
37117: LD_VAR 0 4
37121: ARRAY
37122: IFFALSE 37203
// begin for i in hackTanksCaptured [ index ] do
37124: LD_ADDR_VAR 0 3
37128: PUSH
37129: LD_EXP 130
37133: PUSH
37134: LD_VAR 0 4
37138: ARRAY
37139: PUSH
37140: FOR_IN
37141: IFFALSE 37167
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37143: LD_VAR 0 3
37147: PUSH
37148: LD_INT 1
37150: ARRAY
37151: PPUSH
37152: LD_VAR 0 3
37156: PUSH
37157: LD_INT 2
37159: ARRAY
37160: PPUSH
37161: CALL_OW 235
37165: GO 37140
37167: POP
37168: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37169: LD_ADDR_EXP 130
37173: PUSH
37174: LD_EXP 130
37178: PPUSH
37179: LD_VAR 0 4
37183: PPUSH
37184: EMPTY
37185: PPUSH
37186: CALL_OW 1
37190: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37191: LD_VAR 0 1
37195: PPUSH
37196: LD_INT 0
37198: PPUSH
37199: CALL_OW 505
// end ; end ;
37203: LD_VAR 0 2
37207: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37208: LD_INT 0
37210: PPUSH
37211: PPUSH
37212: PPUSH
// if not hack in hackTanks or not vehicles then
37213: LD_VAR 0 1
37217: PUSH
37218: LD_EXP 129
37222: IN
37223: NOT
37224: PUSH
37225: LD_VAR 0 2
37229: NOT
37230: OR
37231: IFFALSE 37235
// exit ;
37233: GO 37510
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37235: LD_ADDR_VAR 0 2
37239: PUSH
37240: LD_VAR 0 1
37244: PPUSH
37245: LD_VAR 0 2
37249: PPUSH
37250: LD_INT 1
37252: PPUSH
37253: LD_INT 1
37255: PPUSH
37256: CALL 45327 0 4
37260: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37261: LD_ADDR_VAR 0 5
37265: PUSH
37266: LD_EXP 129
37270: PPUSH
37271: LD_VAR 0 1
37275: PPUSH
37276: CALL 44677 0 2
37280: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37281: LD_EXP 130
37285: PUSH
37286: LD_VAR 0 5
37290: ARRAY
37291: PUSH
37292: LD_EXP 131
37296: LESS
37297: IFFALSE 37486
// begin for i := 1 to vehicles do
37299: LD_ADDR_VAR 0 4
37303: PUSH
37304: DOUBLE
37305: LD_INT 1
37307: DEC
37308: ST_TO_ADDR
37309: LD_VAR 0 2
37313: PUSH
37314: FOR_TO
37315: IFFALSE 37484
// begin if hackTanksCaptured [ index ] = hackLimit then
37317: LD_EXP 130
37321: PUSH
37322: LD_VAR 0 5
37326: ARRAY
37327: PUSH
37328: LD_EXP 131
37332: EQUAL
37333: IFFALSE 37337
// break ;
37335: GO 37484
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37337: LD_ADDR_EXP 133
37341: PUSH
37342: LD_EXP 133
37346: PPUSH
37347: LD_VAR 0 5
37351: PPUSH
37352: LD_EXP 133
37356: PUSH
37357: LD_VAR 0 5
37361: ARRAY
37362: PUSH
37363: LD_INT 1
37365: PLUS
37366: PPUSH
37367: CALL_OW 1
37371: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37372: LD_ADDR_EXP 130
37376: PUSH
37377: LD_EXP 130
37381: PPUSH
37382: LD_VAR 0 5
37386: PUSH
37387: LD_EXP 130
37391: PUSH
37392: LD_VAR 0 5
37396: ARRAY
37397: PUSH
37398: LD_INT 1
37400: PLUS
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PPUSH
37406: LD_VAR 0 2
37410: PUSH
37411: LD_VAR 0 4
37415: ARRAY
37416: PUSH
37417: LD_VAR 0 2
37421: PUSH
37422: LD_VAR 0 4
37426: ARRAY
37427: PPUSH
37428: CALL_OW 255
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PPUSH
37437: CALL 44892 0 3
37441: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37442: LD_VAR 0 2
37446: PUSH
37447: LD_VAR 0 4
37451: ARRAY
37452: PPUSH
37453: LD_VAR 0 1
37457: PPUSH
37458: CALL_OW 255
37462: PPUSH
37463: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37467: LD_VAR 0 2
37471: PUSH
37472: LD_VAR 0 4
37476: ARRAY
37477: PPUSH
37478: CALL_OW 141
// end ;
37482: GO 37314
37484: POP
37485: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37486: LD_VAR 0 1
37490: PPUSH
37491: LD_EXP 130
37495: PUSH
37496: LD_VAR 0 5
37500: ARRAY
37501: PUSH
37502: LD_INT 0
37504: PLUS
37505: PPUSH
37506: CALL_OW 505
// end ;
37510: LD_VAR 0 3
37514: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37515: LD_INT 0
37517: PPUSH
37518: PPUSH
37519: PPUSH
37520: PPUSH
// if not hack in hackTanks then
37521: LD_VAR 0 1
37525: PUSH
37526: LD_EXP 129
37530: IN
37531: NOT
37532: IFFALSE 37536
// exit ;
37534: GO 37776
// index := GetElementIndex ( hackTanks , hack ) ;
37536: LD_ADDR_VAR 0 4
37540: PUSH
37541: LD_EXP 129
37545: PPUSH
37546: LD_VAR 0 1
37550: PPUSH
37551: CALL 44677 0 2
37555: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37556: LD_ADDR_VAR 0 3
37560: PUSH
37561: DOUBLE
37562: LD_EXP 130
37566: PUSH
37567: LD_VAR 0 4
37571: ARRAY
37572: INC
37573: ST_TO_ADDR
37574: LD_INT 1
37576: PUSH
37577: FOR_DOWNTO
37578: IFFALSE 37750
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37580: LD_ADDR_VAR 0 5
37584: PUSH
37585: LD_EXP 130
37589: PUSH
37590: LD_VAR 0 4
37594: ARRAY
37595: PUSH
37596: LD_VAR 0 3
37600: ARRAY
37601: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37602: LD_VAR 0 5
37606: PUSH
37607: LD_INT 1
37609: ARRAY
37610: PPUSH
37611: CALL_OW 302
37615: NOT
37616: PUSH
37617: LD_VAR 0 5
37621: PUSH
37622: LD_INT 1
37624: ARRAY
37625: PPUSH
37626: CALL_OW 255
37630: PUSH
37631: LD_VAR 0 1
37635: PPUSH
37636: CALL_OW 255
37640: NONEQUAL
37641: OR
37642: IFFALSE 37748
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37644: LD_VAR 0 5
37648: PUSH
37649: LD_INT 1
37651: ARRAY
37652: PPUSH
37653: CALL_OW 305
37657: PUSH
37658: LD_VAR 0 5
37662: PUSH
37663: LD_INT 1
37665: ARRAY
37666: PPUSH
37667: CALL_OW 255
37671: PUSH
37672: LD_VAR 0 1
37676: PPUSH
37677: CALL_OW 255
37681: EQUAL
37682: AND
37683: IFFALSE 37707
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37685: LD_VAR 0 5
37689: PUSH
37690: LD_INT 1
37692: ARRAY
37693: PPUSH
37694: LD_VAR 0 5
37698: PUSH
37699: LD_INT 2
37701: ARRAY
37702: PPUSH
37703: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37707: LD_ADDR_EXP 130
37711: PUSH
37712: LD_EXP 130
37716: PPUSH
37717: LD_VAR 0 4
37721: PPUSH
37722: LD_EXP 130
37726: PUSH
37727: LD_VAR 0 4
37731: ARRAY
37732: PPUSH
37733: LD_VAR 0 3
37737: PPUSH
37738: CALL_OW 3
37742: PPUSH
37743: CALL_OW 1
37747: ST_TO_ADDR
// end ; end ;
37748: GO 37577
37750: POP
37751: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37752: LD_VAR 0 1
37756: PPUSH
37757: LD_EXP 130
37761: PUSH
37762: LD_VAR 0 4
37766: ARRAY
37767: PUSH
37768: LD_INT 0
37770: PLUS
37771: PPUSH
37772: CALL_OW 505
// end ;
37776: LD_VAR 0 2
37780: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37781: LD_INT 0
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
// if not hack in hackTanks then
37787: LD_VAR 0 1
37791: PUSH
37792: LD_EXP 129
37796: IN
37797: NOT
37798: IFFALSE 37802
// exit ;
37800: GO 37887
// index := GetElementIndex ( hackTanks , hack ) ;
37802: LD_ADDR_VAR 0 5
37806: PUSH
37807: LD_EXP 129
37811: PPUSH
37812: LD_VAR 0 1
37816: PPUSH
37817: CALL 44677 0 2
37821: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37822: LD_ADDR_VAR 0 4
37826: PUSH
37827: DOUBLE
37828: LD_INT 1
37830: DEC
37831: ST_TO_ADDR
37832: LD_EXP 130
37836: PUSH
37837: LD_VAR 0 5
37841: ARRAY
37842: PUSH
37843: FOR_TO
37844: IFFALSE 37885
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37846: LD_EXP 130
37850: PUSH
37851: LD_VAR 0 5
37855: ARRAY
37856: PUSH
37857: LD_VAR 0 4
37861: ARRAY
37862: PUSH
37863: LD_INT 1
37865: ARRAY
37866: PUSH
37867: LD_VAR 0 2
37871: EQUAL
37872: IFFALSE 37883
// KillUnit ( vehicle ) ;
37874: LD_VAR 0 2
37878: PPUSH
37879: CALL_OW 66
37883: GO 37843
37885: POP
37886: POP
// end ;
37887: LD_VAR 0 3
37891: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37892: LD_EXP 134
37896: NOT
37897: IFFALSE 37932
37899: GO 37901
37901: DISABLE
// begin initMiner := true ;
37902: LD_ADDR_EXP 134
37906: PUSH
37907: LD_INT 1
37909: ST_TO_ADDR
// minersList := [ ] ;
37910: LD_ADDR_EXP 135
37914: PUSH
37915: EMPTY
37916: ST_TO_ADDR
// minerMinesList := [ ] ;
37917: LD_ADDR_EXP 136
37921: PUSH
37922: EMPTY
37923: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37924: LD_ADDR_EXP 137
37928: PUSH
37929: LD_INT 5
37931: ST_TO_ADDR
// end ;
37932: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37933: LD_EXP 134
37937: PUSH
37938: LD_INT 34
37940: PUSH
37941: LD_EXP 59
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PPUSH
37950: CALL_OW 69
37954: AND
37955: IFFALSE 38418
37957: GO 37959
37959: DISABLE
37960: LD_INT 0
37962: PPUSH
37963: PPUSH
37964: PPUSH
37965: PPUSH
// begin enable ;
37966: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37967: LD_ADDR_VAR 0 1
37971: PUSH
37972: LD_INT 34
37974: PUSH
37975: LD_EXP 59
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PPUSH
37984: CALL_OW 69
37988: PUSH
37989: FOR_IN
37990: IFFALSE 38062
// begin if not i in minersList then
37992: LD_VAR 0 1
37996: PUSH
37997: LD_EXP 135
38001: IN
38002: NOT
38003: IFFALSE 38060
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38005: LD_ADDR_EXP 135
38009: PUSH
38010: LD_EXP 135
38014: PPUSH
38015: LD_EXP 135
38019: PUSH
38020: LD_INT 1
38022: PLUS
38023: PPUSH
38024: LD_VAR 0 1
38028: PPUSH
38029: CALL_OW 1
38033: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38034: LD_ADDR_EXP 136
38038: PUSH
38039: LD_EXP 136
38043: PPUSH
38044: LD_EXP 136
38048: PUSH
38049: LD_INT 1
38051: PLUS
38052: PPUSH
38053: EMPTY
38054: PPUSH
38055: CALL_OW 1
38059: ST_TO_ADDR
// end end ;
38060: GO 37989
38062: POP
38063: POP
// for i := minerMinesList downto 1 do
38064: LD_ADDR_VAR 0 1
38068: PUSH
38069: DOUBLE
38070: LD_EXP 136
38074: INC
38075: ST_TO_ADDR
38076: LD_INT 1
38078: PUSH
38079: FOR_DOWNTO
38080: IFFALSE 38416
// begin if IsLive ( minersList [ i ] ) then
38082: LD_EXP 135
38086: PUSH
38087: LD_VAR 0 1
38091: ARRAY
38092: PPUSH
38093: CALL_OW 300
38097: IFFALSE 38125
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38099: LD_EXP 135
38103: PUSH
38104: LD_VAR 0 1
38108: ARRAY
38109: PPUSH
38110: LD_EXP 136
38114: PUSH
38115: LD_VAR 0 1
38119: ARRAY
38120: PPUSH
38121: CALL_OW 505
// if not minerMinesList [ i ] then
38125: LD_EXP 136
38129: PUSH
38130: LD_VAR 0 1
38134: ARRAY
38135: NOT
38136: IFFALSE 38140
// continue ;
38138: GO 38079
// for j := minerMinesList [ i ] downto 1 do
38140: LD_ADDR_VAR 0 2
38144: PUSH
38145: DOUBLE
38146: LD_EXP 136
38150: PUSH
38151: LD_VAR 0 1
38155: ARRAY
38156: INC
38157: ST_TO_ADDR
38158: LD_INT 1
38160: PUSH
38161: FOR_DOWNTO
38162: IFFALSE 38412
// begin side := GetSide ( minersList [ i ] ) ;
38164: LD_ADDR_VAR 0 3
38168: PUSH
38169: LD_EXP 135
38173: PUSH
38174: LD_VAR 0 1
38178: ARRAY
38179: PPUSH
38180: CALL_OW 255
38184: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38185: LD_ADDR_VAR 0 4
38189: PUSH
38190: LD_EXP 136
38194: PUSH
38195: LD_VAR 0 1
38199: ARRAY
38200: PUSH
38201: LD_VAR 0 2
38205: ARRAY
38206: PUSH
38207: LD_INT 1
38209: ARRAY
38210: PPUSH
38211: LD_EXP 136
38215: PUSH
38216: LD_VAR 0 1
38220: ARRAY
38221: PUSH
38222: LD_VAR 0 2
38226: ARRAY
38227: PUSH
38228: LD_INT 2
38230: ARRAY
38231: PPUSH
38232: CALL_OW 428
38236: ST_TO_ADDR
// if not tmp then
38237: LD_VAR 0 4
38241: NOT
38242: IFFALSE 38246
// continue ;
38244: GO 38161
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38246: LD_VAR 0 4
38250: PUSH
38251: LD_INT 81
38253: PUSH
38254: LD_VAR 0 3
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PPUSH
38263: CALL_OW 69
38267: IN
38268: PUSH
38269: LD_EXP 136
38273: PUSH
38274: LD_VAR 0 1
38278: ARRAY
38279: PUSH
38280: LD_VAR 0 2
38284: ARRAY
38285: PUSH
38286: LD_INT 1
38288: ARRAY
38289: PPUSH
38290: LD_EXP 136
38294: PUSH
38295: LD_VAR 0 1
38299: ARRAY
38300: PUSH
38301: LD_VAR 0 2
38305: ARRAY
38306: PUSH
38307: LD_INT 2
38309: ARRAY
38310: PPUSH
38311: CALL_OW 458
38315: AND
38316: IFFALSE 38410
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38318: LD_EXP 136
38322: PUSH
38323: LD_VAR 0 1
38327: ARRAY
38328: PUSH
38329: LD_VAR 0 2
38333: ARRAY
38334: PUSH
38335: LD_INT 1
38337: ARRAY
38338: PPUSH
38339: LD_EXP 136
38343: PUSH
38344: LD_VAR 0 1
38348: ARRAY
38349: PUSH
38350: LD_VAR 0 2
38354: ARRAY
38355: PUSH
38356: LD_INT 2
38358: ARRAY
38359: PPUSH
38360: LD_VAR 0 3
38364: PPUSH
38365: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38369: LD_ADDR_EXP 136
38373: PUSH
38374: LD_EXP 136
38378: PPUSH
38379: LD_VAR 0 1
38383: PPUSH
38384: LD_EXP 136
38388: PUSH
38389: LD_VAR 0 1
38393: ARRAY
38394: PPUSH
38395: LD_VAR 0 2
38399: PPUSH
38400: CALL_OW 3
38404: PPUSH
38405: CALL_OW 1
38409: ST_TO_ADDR
// end ; end ;
38410: GO 38161
38412: POP
38413: POP
// end ;
38414: GO 38079
38416: POP
38417: POP
// end ;
38418: PPOPN 4
38420: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38421: LD_INT 0
38423: PPUSH
38424: PPUSH
// result := false ;
38425: LD_ADDR_VAR 0 4
38429: PUSH
38430: LD_INT 0
38432: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38433: LD_VAR 0 1
38437: PPUSH
38438: CALL_OW 264
38442: PUSH
38443: LD_EXP 59
38447: EQUAL
38448: NOT
38449: IFFALSE 38453
// exit ;
38451: GO 38693
// index := GetElementIndex ( minersList , unit ) ;
38453: LD_ADDR_VAR 0 5
38457: PUSH
38458: LD_EXP 135
38462: PPUSH
38463: LD_VAR 0 1
38467: PPUSH
38468: CALL 44677 0 2
38472: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38473: LD_EXP 136
38477: PUSH
38478: LD_VAR 0 5
38482: ARRAY
38483: PUSH
38484: LD_EXP 137
38488: GREATEREQUAL
38489: IFFALSE 38493
// exit ;
38491: GO 38693
// ComMoveXY ( unit , x , y ) ;
38493: LD_VAR 0 1
38497: PPUSH
38498: LD_VAR 0 2
38502: PPUSH
38503: LD_VAR 0 3
38507: PPUSH
38508: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38512: LD_INT 35
38514: PPUSH
38515: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38519: LD_VAR 0 1
38523: PPUSH
38524: LD_VAR 0 2
38528: PPUSH
38529: LD_VAR 0 3
38533: PPUSH
38534: CALL 75449 0 3
38538: NOT
38539: PUSH
38540: LD_VAR 0 1
38544: PPUSH
38545: CALL_OW 314
38549: AND
38550: IFFALSE 38554
// exit ;
38552: GO 38693
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38554: LD_VAR 0 2
38558: PPUSH
38559: LD_VAR 0 3
38563: PPUSH
38564: CALL_OW 428
38568: PUSH
38569: LD_VAR 0 1
38573: EQUAL
38574: PUSH
38575: LD_VAR 0 1
38579: PPUSH
38580: CALL_OW 314
38584: NOT
38585: AND
38586: IFFALSE 38512
// PlaySoundXY ( x , y , PlantMine ) ;
38588: LD_VAR 0 2
38592: PPUSH
38593: LD_VAR 0 3
38597: PPUSH
38598: LD_STRING PlantMine
38600: PPUSH
38601: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38605: LD_VAR 0 2
38609: PPUSH
38610: LD_VAR 0 3
38614: PPUSH
38615: LD_VAR 0 1
38619: PPUSH
38620: CALL_OW 255
38624: PPUSH
38625: LD_INT 0
38627: PPUSH
38628: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38632: LD_ADDR_EXP 136
38636: PUSH
38637: LD_EXP 136
38641: PPUSH
38642: LD_VAR 0 5
38646: PUSH
38647: LD_EXP 136
38651: PUSH
38652: LD_VAR 0 5
38656: ARRAY
38657: PUSH
38658: LD_INT 1
38660: PLUS
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PPUSH
38666: LD_VAR 0 2
38670: PUSH
38671: LD_VAR 0 3
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PPUSH
38680: CALL 44892 0 3
38684: ST_TO_ADDR
// result := true ;
38685: LD_ADDR_VAR 0 4
38689: PUSH
38690: LD_INT 1
38692: ST_TO_ADDR
// end ;
38693: LD_VAR 0 4
38697: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38698: LD_INT 0
38700: PPUSH
38701: PPUSH
38702: PPUSH
// if not unit in minersList then
38703: LD_VAR 0 1
38707: PUSH
38708: LD_EXP 135
38712: IN
38713: NOT
38714: IFFALSE 38718
// exit ;
38716: GO 39110
// index := GetElementIndex ( minersList , unit ) ;
38718: LD_ADDR_VAR 0 6
38722: PUSH
38723: LD_EXP 135
38727: PPUSH
38728: LD_VAR 0 1
38732: PPUSH
38733: CALL 44677 0 2
38737: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38738: LD_ADDR_VAR 0 5
38742: PUSH
38743: DOUBLE
38744: LD_EXP 136
38748: PUSH
38749: LD_VAR 0 6
38753: ARRAY
38754: INC
38755: ST_TO_ADDR
38756: LD_INT 1
38758: PUSH
38759: FOR_DOWNTO
38760: IFFALSE 38921
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38762: LD_EXP 136
38766: PUSH
38767: LD_VAR 0 6
38771: ARRAY
38772: PUSH
38773: LD_VAR 0 5
38777: ARRAY
38778: PUSH
38779: LD_INT 1
38781: ARRAY
38782: PUSH
38783: LD_VAR 0 2
38787: EQUAL
38788: PUSH
38789: LD_EXP 136
38793: PUSH
38794: LD_VAR 0 6
38798: ARRAY
38799: PUSH
38800: LD_VAR 0 5
38804: ARRAY
38805: PUSH
38806: LD_INT 2
38808: ARRAY
38809: PUSH
38810: LD_VAR 0 3
38814: EQUAL
38815: AND
38816: IFFALSE 38919
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38818: LD_EXP 136
38822: PUSH
38823: LD_VAR 0 6
38827: ARRAY
38828: PUSH
38829: LD_VAR 0 5
38833: ARRAY
38834: PUSH
38835: LD_INT 1
38837: ARRAY
38838: PPUSH
38839: LD_EXP 136
38843: PUSH
38844: LD_VAR 0 6
38848: ARRAY
38849: PUSH
38850: LD_VAR 0 5
38854: ARRAY
38855: PUSH
38856: LD_INT 2
38858: ARRAY
38859: PPUSH
38860: LD_VAR 0 1
38864: PPUSH
38865: CALL_OW 255
38869: PPUSH
38870: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38874: LD_ADDR_EXP 136
38878: PUSH
38879: LD_EXP 136
38883: PPUSH
38884: LD_VAR 0 6
38888: PPUSH
38889: LD_EXP 136
38893: PUSH
38894: LD_VAR 0 6
38898: ARRAY
38899: PPUSH
38900: LD_VAR 0 5
38904: PPUSH
38905: CALL_OW 3
38909: PPUSH
38910: CALL_OW 1
38914: ST_TO_ADDR
// exit ;
38915: POP
38916: POP
38917: GO 39110
// end ; end ;
38919: GO 38759
38921: POP
38922: POP
// for i := minerMinesList [ index ] downto 1 do
38923: LD_ADDR_VAR 0 5
38927: PUSH
38928: DOUBLE
38929: LD_EXP 136
38933: PUSH
38934: LD_VAR 0 6
38938: ARRAY
38939: INC
38940: ST_TO_ADDR
38941: LD_INT 1
38943: PUSH
38944: FOR_DOWNTO
38945: IFFALSE 39108
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38947: LD_EXP 136
38951: PUSH
38952: LD_VAR 0 6
38956: ARRAY
38957: PUSH
38958: LD_VAR 0 5
38962: ARRAY
38963: PUSH
38964: LD_INT 1
38966: ARRAY
38967: PPUSH
38968: LD_EXP 136
38972: PUSH
38973: LD_VAR 0 6
38977: ARRAY
38978: PUSH
38979: LD_VAR 0 5
38983: ARRAY
38984: PUSH
38985: LD_INT 2
38987: ARRAY
38988: PPUSH
38989: LD_VAR 0 2
38993: PPUSH
38994: LD_VAR 0 3
38998: PPUSH
38999: CALL_OW 298
39003: PUSH
39004: LD_INT 6
39006: LESS
39007: IFFALSE 39106
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39009: LD_EXP 136
39013: PUSH
39014: LD_VAR 0 6
39018: ARRAY
39019: PUSH
39020: LD_VAR 0 5
39024: ARRAY
39025: PUSH
39026: LD_INT 1
39028: ARRAY
39029: PPUSH
39030: LD_EXP 136
39034: PUSH
39035: LD_VAR 0 6
39039: ARRAY
39040: PUSH
39041: LD_VAR 0 5
39045: ARRAY
39046: PUSH
39047: LD_INT 2
39049: ARRAY
39050: PPUSH
39051: LD_VAR 0 1
39055: PPUSH
39056: CALL_OW 255
39060: PPUSH
39061: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39065: LD_ADDR_EXP 136
39069: PUSH
39070: LD_EXP 136
39074: PPUSH
39075: LD_VAR 0 6
39079: PPUSH
39080: LD_EXP 136
39084: PUSH
39085: LD_VAR 0 6
39089: ARRAY
39090: PPUSH
39091: LD_VAR 0 5
39095: PPUSH
39096: CALL_OW 3
39100: PPUSH
39101: CALL_OW 1
39105: ST_TO_ADDR
// end ; end ;
39106: GO 38944
39108: POP
39109: POP
// end ;
39110: LD_VAR 0 4
39114: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39115: LD_INT 0
39117: PPUSH
39118: PPUSH
39119: PPUSH
39120: PPUSH
39121: PPUSH
39122: PPUSH
39123: PPUSH
39124: PPUSH
39125: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39126: LD_VAR 0 1
39130: PPUSH
39131: CALL_OW 264
39135: PUSH
39136: LD_EXP 59
39140: EQUAL
39141: NOT
39142: PUSH
39143: LD_VAR 0 1
39147: PUSH
39148: LD_EXP 135
39152: IN
39153: NOT
39154: OR
39155: IFFALSE 39159
// exit ;
39157: GO 39481
// index := GetElementIndex ( minersList , unit ) ;
39159: LD_ADDR_VAR 0 6
39163: PUSH
39164: LD_EXP 135
39168: PPUSH
39169: LD_VAR 0 1
39173: PPUSH
39174: CALL 44677 0 2
39178: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39179: LD_ADDR_VAR 0 8
39183: PUSH
39184: LD_EXP 137
39188: PUSH
39189: LD_EXP 136
39193: PUSH
39194: LD_VAR 0 6
39198: ARRAY
39199: MINUS
39200: ST_TO_ADDR
// if not minesFreeAmount then
39201: LD_VAR 0 8
39205: NOT
39206: IFFALSE 39210
// exit ;
39208: GO 39481
// tmp := [ ] ;
39210: LD_ADDR_VAR 0 7
39214: PUSH
39215: EMPTY
39216: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39217: LD_ADDR_VAR 0 5
39221: PUSH
39222: DOUBLE
39223: LD_INT 1
39225: DEC
39226: ST_TO_ADDR
39227: LD_VAR 0 8
39231: PUSH
39232: FOR_TO
39233: IFFALSE 39428
// begin _d := rand ( 0 , 5 ) ;
39235: LD_ADDR_VAR 0 11
39239: PUSH
39240: LD_INT 0
39242: PPUSH
39243: LD_INT 5
39245: PPUSH
39246: CALL_OW 12
39250: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39251: LD_ADDR_VAR 0 12
39255: PUSH
39256: LD_INT 2
39258: PPUSH
39259: LD_INT 6
39261: PPUSH
39262: CALL_OW 12
39266: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39267: LD_ADDR_VAR 0 9
39271: PUSH
39272: LD_VAR 0 2
39276: PPUSH
39277: LD_VAR 0 11
39281: PPUSH
39282: LD_VAR 0 12
39286: PPUSH
39287: CALL_OW 272
39291: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39292: LD_ADDR_VAR 0 10
39296: PUSH
39297: LD_VAR 0 3
39301: PPUSH
39302: LD_VAR 0 11
39306: PPUSH
39307: LD_VAR 0 12
39311: PPUSH
39312: CALL_OW 273
39316: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39317: LD_VAR 0 9
39321: PPUSH
39322: LD_VAR 0 10
39326: PPUSH
39327: CALL_OW 488
39331: PUSH
39332: LD_VAR 0 9
39336: PUSH
39337: LD_VAR 0 10
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_VAR 0 7
39350: IN
39351: NOT
39352: AND
39353: PUSH
39354: LD_VAR 0 9
39358: PPUSH
39359: LD_VAR 0 10
39363: PPUSH
39364: CALL_OW 458
39368: NOT
39369: AND
39370: IFFALSE 39412
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39372: LD_ADDR_VAR 0 7
39376: PUSH
39377: LD_VAR 0 7
39381: PPUSH
39382: LD_VAR 0 7
39386: PUSH
39387: LD_INT 1
39389: PLUS
39390: PPUSH
39391: LD_VAR 0 9
39395: PUSH
39396: LD_VAR 0 10
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PPUSH
39405: CALL_OW 1
39409: ST_TO_ADDR
39410: GO 39426
// i := i - 1 ;
39412: LD_ADDR_VAR 0 5
39416: PUSH
39417: LD_VAR 0 5
39421: PUSH
39422: LD_INT 1
39424: MINUS
39425: ST_TO_ADDR
// end ;
39426: GO 39232
39428: POP
39429: POP
// for i in tmp do
39430: LD_ADDR_VAR 0 5
39434: PUSH
39435: LD_VAR 0 7
39439: PUSH
39440: FOR_IN
39441: IFFALSE 39479
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39443: LD_VAR 0 1
39447: PPUSH
39448: LD_VAR 0 5
39452: PUSH
39453: LD_INT 1
39455: ARRAY
39456: PPUSH
39457: LD_VAR 0 5
39461: PUSH
39462: LD_INT 2
39464: ARRAY
39465: PPUSH
39466: CALL 38421 0 3
39470: NOT
39471: IFFALSE 39477
// exit ;
39473: POP
39474: POP
39475: GO 39481
39477: GO 39440
39479: POP
39480: POP
// end ;
39481: LD_VAR 0 4
39485: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39486: LD_INT 0
39488: PPUSH
39489: PPUSH
39490: PPUSH
39491: PPUSH
39492: PPUSH
39493: PPUSH
39494: PPUSH
// if not GetClass ( unit ) = class_sniper then
39495: LD_VAR 0 1
39499: PPUSH
39500: CALL_OW 257
39504: PUSH
39505: LD_INT 5
39507: EQUAL
39508: NOT
39509: IFFALSE 39513
// exit ;
39511: GO 39901
// dist := 8 ;
39513: LD_ADDR_VAR 0 5
39517: PUSH
39518: LD_INT 8
39520: ST_TO_ADDR
// viewRange := 12 ;
39521: LD_ADDR_VAR 0 7
39525: PUSH
39526: LD_INT 12
39528: ST_TO_ADDR
// side := GetSide ( unit ) ;
39529: LD_ADDR_VAR 0 6
39533: PUSH
39534: LD_VAR 0 1
39538: PPUSH
39539: CALL_OW 255
39543: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39544: LD_INT 61
39546: PPUSH
39547: LD_VAR 0 6
39551: PPUSH
39552: CALL_OW 321
39556: PUSH
39557: LD_INT 2
39559: EQUAL
39560: IFFALSE 39570
// viewRange := 16 ;
39562: LD_ADDR_VAR 0 7
39566: PUSH
39567: LD_INT 16
39569: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39570: LD_VAR 0 1
39574: PPUSH
39575: LD_VAR 0 2
39579: PPUSH
39580: LD_VAR 0 3
39584: PPUSH
39585: CALL_OW 297
39589: PUSH
39590: LD_VAR 0 5
39594: GREATER
39595: IFFALSE 39674
// begin ComMoveXY ( unit , x , y ) ;
39597: LD_VAR 0 1
39601: PPUSH
39602: LD_VAR 0 2
39606: PPUSH
39607: LD_VAR 0 3
39611: PPUSH
39612: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39616: LD_INT 35
39618: PPUSH
39619: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39623: LD_VAR 0 1
39627: PPUSH
39628: LD_VAR 0 2
39632: PPUSH
39633: LD_VAR 0 3
39637: PPUSH
39638: CALL 75449 0 3
39642: NOT
39643: IFFALSE 39647
// exit ;
39645: GO 39901
// until GetDistUnitXY ( unit , x , y ) < dist ;
39647: LD_VAR 0 1
39651: PPUSH
39652: LD_VAR 0 2
39656: PPUSH
39657: LD_VAR 0 3
39661: PPUSH
39662: CALL_OW 297
39666: PUSH
39667: LD_VAR 0 5
39671: LESS
39672: IFFALSE 39616
// end ; ComTurnXY ( unit , x , y ) ;
39674: LD_VAR 0 1
39678: PPUSH
39679: LD_VAR 0 2
39683: PPUSH
39684: LD_VAR 0 3
39688: PPUSH
39689: CALL_OW 118
// wait ( 5 ) ;
39693: LD_INT 5
39695: PPUSH
39696: CALL_OW 67
// _d := GetDir ( unit ) ;
39700: LD_ADDR_VAR 0 10
39704: PUSH
39705: LD_VAR 0 1
39709: PPUSH
39710: CALL_OW 254
39714: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39715: LD_ADDR_VAR 0 8
39719: PUSH
39720: LD_VAR 0 1
39724: PPUSH
39725: CALL_OW 250
39729: PPUSH
39730: LD_VAR 0 10
39734: PPUSH
39735: LD_VAR 0 5
39739: PPUSH
39740: CALL_OW 272
39744: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39745: LD_ADDR_VAR 0 9
39749: PUSH
39750: LD_VAR 0 1
39754: PPUSH
39755: CALL_OW 251
39759: PPUSH
39760: LD_VAR 0 10
39764: PPUSH
39765: LD_VAR 0 5
39769: PPUSH
39770: CALL_OW 273
39774: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39775: LD_VAR 0 8
39779: PPUSH
39780: LD_VAR 0 9
39784: PPUSH
39785: CALL_OW 488
39789: NOT
39790: IFFALSE 39794
// exit ;
39792: GO 39901
// ComAnimCustom ( unit , 1 ) ;
39794: LD_VAR 0 1
39798: PPUSH
39799: LD_INT 1
39801: PPUSH
39802: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39806: LD_VAR 0 8
39810: PPUSH
39811: LD_VAR 0 9
39815: PPUSH
39816: LD_VAR 0 6
39820: PPUSH
39821: LD_VAR 0 7
39825: PPUSH
39826: CALL_OW 330
// repeat wait ( 1 ) ;
39830: LD_INT 1
39832: PPUSH
39833: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39837: LD_VAR 0 1
39841: PPUSH
39842: CALL_OW 316
39846: PUSH
39847: LD_VAR 0 1
39851: PPUSH
39852: CALL_OW 314
39856: OR
39857: PUSH
39858: LD_VAR 0 1
39862: PPUSH
39863: CALL_OW 302
39867: NOT
39868: OR
39869: PUSH
39870: LD_VAR 0 1
39874: PPUSH
39875: CALL_OW 301
39879: OR
39880: IFFALSE 39830
// RemoveSeeing ( _x , _y , side ) ;
39882: LD_VAR 0 8
39886: PPUSH
39887: LD_VAR 0 9
39891: PPUSH
39892: LD_VAR 0 6
39896: PPUSH
39897: CALL_OW 331
// end ; end_of_file
39901: LD_VAR 0 4
39905: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39906: LD_INT 0
39908: PPUSH
39909: PPUSH
// if exist_mode then
39910: LD_VAR 0 2
39914: IFFALSE 39939
// unit := CreateCharacter ( prefix & ident ) else
39916: LD_ADDR_VAR 0 5
39920: PUSH
39921: LD_VAR 0 3
39925: PUSH
39926: LD_VAR 0 1
39930: STR
39931: PPUSH
39932: CALL_OW 34
39936: ST_TO_ADDR
39937: GO 39954
// unit := NewCharacter ( ident ) ;
39939: LD_ADDR_VAR 0 5
39943: PUSH
39944: LD_VAR 0 1
39948: PPUSH
39949: CALL_OW 25
39953: ST_TO_ADDR
// result := unit ;
39954: LD_ADDR_VAR 0 4
39958: PUSH
39959: LD_VAR 0 5
39963: ST_TO_ADDR
// end ;
39964: LD_VAR 0 4
39968: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39969: LD_INT 0
39971: PPUSH
39972: PPUSH
// if not side or not nation then
39973: LD_VAR 0 1
39977: NOT
39978: PUSH
39979: LD_VAR 0 2
39983: NOT
39984: OR
39985: IFFALSE 39989
// exit ;
39987: GO 40757
// case nation of nation_american :
39989: LD_VAR 0 2
39993: PUSH
39994: LD_INT 1
39996: DOUBLE
39997: EQUAL
39998: IFTRUE 40002
40000: GO 40216
40002: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40003: LD_ADDR_VAR 0 4
40007: PUSH
40008: LD_INT 35
40010: PUSH
40011: LD_INT 45
40013: PUSH
40014: LD_INT 46
40016: PUSH
40017: LD_INT 47
40019: PUSH
40020: LD_INT 82
40022: PUSH
40023: LD_INT 83
40025: PUSH
40026: LD_INT 84
40028: PUSH
40029: LD_INT 85
40031: PUSH
40032: LD_INT 86
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: LD_INT 2
40040: PUSH
40041: LD_INT 6
40043: PUSH
40044: LD_INT 15
40046: PUSH
40047: LD_INT 16
40049: PUSH
40050: LD_INT 7
40052: PUSH
40053: LD_INT 12
40055: PUSH
40056: LD_INT 13
40058: PUSH
40059: LD_INT 10
40061: PUSH
40062: LD_INT 14
40064: PUSH
40065: LD_INT 20
40067: PUSH
40068: LD_INT 21
40070: PUSH
40071: LD_INT 22
40073: PUSH
40074: LD_INT 25
40076: PUSH
40077: LD_INT 32
40079: PUSH
40080: LD_INT 27
40082: PUSH
40083: LD_INT 36
40085: PUSH
40086: LD_INT 69
40088: PUSH
40089: LD_INT 39
40091: PUSH
40092: LD_INT 34
40094: PUSH
40095: LD_INT 40
40097: PUSH
40098: LD_INT 48
40100: PUSH
40101: LD_INT 49
40103: PUSH
40104: LD_INT 50
40106: PUSH
40107: LD_INT 51
40109: PUSH
40110: LD_INT 52
40112: PUSH
40113: LD_INT 53
40115: PUSH
40116: LD_INT 54
40118: PUSH
40119: LD_INT 55
40121: PUSH
40122: LD_INT 56
40124: PUSH
40125: LD_INT 57
40127: PUSH
40128: LD_INT 58
40130: PUSH
40131: LD_INT 59
40133: PUSH
40134: LD_INT 60
40136: PUSH
40137: LD_INT 61
40139: PUSH
40140: LD_INT 62
40142: PUSH
40143: LD_INT 80
40145: PUSH
40146: LD_INT 82
40148: PUSH
40149: LD_INT 83
40151: PUSH
40152: LD_INT 84
40154: PUSH
40155: LD_INT 85
40157: PUSH
40158: LD_INT 86
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: ST_TO_ADDR
40214: GO 40681
40216: LD_INT 2
40218: DOUBLE
40219: EQUAL
40220: IFTRUE 40224
40222: GO 40450
40224: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40225: LD_ADDR_VAR 0 4
40229: PUSH
40230: LD_INT 35
40232: PUSH
40233: LD_INT 45
40235: PUSH
40236: LD_INT 46
40238: PUSH
40239: LD_INT 47
40241: PUSH
40242: LD_INT 82
40244: PUSH
40245: LD_INT 83
40247: PUSH
40248: LD_INT 84
40250: PUSH
40251: LD_INT 85
40253: PUSH
40254: LD_INT 87
40256: PUSH
40257: LD_INT 70
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: LD_INT 11
40265: PUSH
40266: LD_INT 3
40268: PUSH
40269: LD_INT 4
40271: PUSH
40272: LD_INT 5
40274: PUSH
40275: LD_INT 6
40277: PUSH
40278: LD_INT 15
40280: PUSH
40281: LD_INT 18
40283: PUSH
40284: LD_INT 7
40286: PUSH
40287: LD_INT 17
40289: PUSH
40290: LD_INT 8
40292: PUSH
40293: LD_INT 20
40295: PUSH
40296: LD_INT 21
40298: PUSH
40299: LD_INT 22
40301: PUSH
40302: LD_INT 72
40304: PUSH
40305: LD_INT 26
40307: PUSH
40308: LD_INT 69
40310: PUSH
40311: LD_INT 39
40313: PUSH
40314: LD_INT 40
40316: PUSH
40317: LD_INT 41
40319: PUSH
40320: LD_INT 42
40322: PUSH
40323: LD_INT 43
40325: PUSH
40326: LD_INT 48
40328: PUSH
40329: LD_INT 49
40331: PUSH
40332: LD_INT 50
40334: PUSH
40335: LD_INT 51
40337: PUSH
40338: LD_INT 52
40340: PUSH
40341: LD_INT 53
40343: PUSH
40344: LD_INT 54
40346: PUSH
40347: LD_INT 55
40349: PUSH
40350: LD_INT 56
40352: PUSH
40353: LD_INT 60
40355: PUSH
40356: LD_INT 61
40358: PUSH
40359: LD_INT 62
40361: PUSH
40362: LD_INT 66
40364: PUSH
40365: LD_INT 67
40367: PUSH
40368: LD_INT 68
40370: PUSH
40371: LD_INT 81
40373: PUSH
40374: LD_INT 82
40376: PUSH
40377: LD_INT 83
40379: PUSH
40380: LD_INT 84
40382: PUSH
40383: LD_INT 85
40385: PUSH
40386: LD_INT 87
40388: PUSH
40389: LD_INT 88
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: ST_TO_ADDR
40448: GO 40681
40450: LD_INT 3
40452: DOUBLE
40453: EQUAL
40454: IFTRUE 40458
40456: GO 40680
40458: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40459: LD_ADDR_VAR 0 4
40463: PUSH
40464: LD_INT 46
40466: PUSH
40467: LD_INT 47
40469: PUSH
40470: LD_INT 1
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: LD_INT 82
40478: PUSH
40479: LD_INT 83
40481: PUSH
40482: LD_INT 84
40484: PUSH
40485: LD_INT 85
40487: PUSH
40488: LD_INT 86
40490: PUSH
40491: LD_INT 11
40493: PUSH
40494: LD_INT 9
40496: PUSH
40497: LD_INT 20
40499: PUSH
40500: LD_INT 19
40502: PUSH
40503: LD_INT 21
40505: PUSH
40506: LD_INT 24
40508: PUSH
40509: LD_INT 22
40511: PUSH
40512: LD_INT 25
40514: PUSH
40515: LD_INT 28
40517: PUSH
40518: LD_INT 29
40520: PUSH
40521: LD_INT 30
40523: PUSH
40524: LD_INT 31
40526: PUSH
40527: LD_INT 37
40529: PUSH
40530: LD_INT 38
40532: PUSH
40533: LD_INT 32
40535: PUSH
40536: LD_INT 27
40538: PUSH
40539: LD_INT 33
40541: PUSH
40542: LD_INT 69
40544: PUSH
40545: LD_INT 39
40547: PUSH
40548: LD_INT 34
40550: PUSH
40551: LD_INT 40
40553: PUSH
40554: LD_INT 71
40556: PUSH
40557: LD_INT 23
40559: PUSH
40560: LD_INT 44
40562: PUSH
40563: LD_INT 48
40565: PUSH
40566: LD_INT 49
40568: PUSH
40569: LD_INT 50
40571: PUSH
40572: LD_INT 51
40574: PUSH
40575: LD_INT 52
40577: PUSH
40578: LD_INT 53
40580: PUSH
40581: LD_INT 54
40583: PUSH
40584: LD_INT 55
40586: PUSH
40587: LD_INT 56
40589: PUSH
40590: LD_INT 57
40592: PUSH
40593: LD_INT 58
40595: PUSH
40596: LD_INT 59
40598: PUSH
40599: LD_INT 63
40601: PUSH
40602: LD_INT 64
40604: PUSH
40605: LD_INT 65
40607: PUSH
40608: LD_INT 82
40610: PUSH
40611: LD_INT 83
40613: PUSH
40614: LD_INT 84
40616: PUSH
40617: LD_INT 85
40619: PUSH
40620: LD_INT 86
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: ST_TO_ADDR
40678: GO 40681
40680: POP
// if state > - 1 and state < 3 then
40681: LD_VAR 0 3
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: GREATER
40690: PUSH
40691: LD_VAR 0 3
40695: PUSH
40696: LD_INT 3
40698: LESS
40699: AND
40700: IFFALSE 40757
// for i in result do
40702: LD_ADDR_VAR 0 5
40706: PUSH
40707: LD_VAR 0 4
40711: PUSH
40712: FOR_IN
40713: IFFALSE 40755
// if GetTech ( i , side ) <> state then
40715: LD_VAR 0 5
40719: PPUSH
40720: LD_VAR 0 1
40724: PPUSH
40725: CALL_OW 321
40729: PUSH
40730: LD_VAR 0 3
40734: NONEQUAL
40735: IFFALSE 40753
// result := result diff i ;
40737: LD_ADDR_VAR 0 4
40741: PUSH
40742: LD_VAR 0 4
40746: PUSH
40747: LD_VAR 0 5
40751: DIFF
40752: ST_TO_ADDR
40753: GO 40712
40755: POP
40756: POP
// end ;
40757: LD_VAR 0 4
40761: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40762: LD_INT 0
40764: PPUSH
40765: PPUSH
40766: PPUSH
// result := true ;
40767: LD_ADDR_VAR 0 3
40771: PUSH
40772: LD_INT 1
40774: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40775: LD_ADDR_VAR 0 5
40779: PUSH
40780: LD_VAR 0 2
40784: PPUSH
40785: CALL_OW 480
40789: ST_TO_ADDR
// if not tmp then
40790: LD_VAR 0 5
40794: NOT
40795: IFFALSE 40799
// exit ;
40797: GO 40848
// for i in tmp do
40799: LD_ADDR_VAR 0 4
40803: PUSH
40804: LD_VAR 0 5
40808: PUSH
40809: FOR_IN
40810: IFFALSE 40846
// if GetTech ( i , side ) <> state_researched then
40812: LD_VAR 0 4
40816: PPUSH
40817: LD_VAR 0 1
40821: PPUSH
40822: CALL_OW 321
40826: PUSH
40827: LD_INT 2
40829: NONEQUAL
40830: IFFALSE 40844
// begin result := false ;
40832: LD_ADDR_VAR 0 3
40836: PUSH
40837: LD_INT 0
40839: ST_TO_ADDR
// exit ;
40840: POP
40841: POP
40842: GO 40848
// end ;
40844: GO 40809
40846: POP
40847: POP
// end ;
40848: LD_VAR 0 3
40852: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40853: LD_INT 0
40855: PPUSH
40856: PPUSH
40857: PPUSH
40858: PPUSH
40859: PPUSH
40860: PPUSH
40861: PPUSH
40862: PPUSH
40863: PPUSH
40864: PPUSH
40865: PPUSH
40866: PPUSH
40867: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40868: LD_VAR 0 1
40872: NOT
40873: PUSH
40874: LD_VAR 0 1
40878: PPUSH
40879: CALL_OW 257
40883: PUSH
40884: LD_INT 9
40886: NONEQUAL
40887: OR
40888: IFFALSE 40892
// exit ;
40890: GO 41465
// side := GetSide ( unit ) ;
40892: LD_ADDR_VAR 0 9
40896: PUSH
40897: LD_VAR 0 1
40901: PPUSH
40902: CALL_OW 255
40906: ST_TO_ADDR
// tech_space := tech_spacanom ;
40907: LD_ADDR_VAR 0 12
40911: PUSH
40912: LD_INT 29
40914: ST_TO_ADDR
// tech_time := tech_taurad ;
40915: LD_ADDR_VAR 0 13
40919: PUSH
40920: LD_INT 28
40922: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40923: LD_ADDR_VAR 0 11
40927: PUSH
40928: LD_VAR 0 1
40932: PPUSH
40933: CALL_OW 310
40937: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40938: LD_VAR 0 11
40942: PPUSH
40943: CALL_OW 247
40947: PUSH
40948: LD_INT 2
40950: EQUAL
40951: IFFALSE 40955
// exit ;
40953: GO 41465
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40955: LD_ADDR_VAR 0 8
40959: PUSH
40960: LD_INT 81
40962: PUSH
40963: LD_VAR 0 9
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 3
40974: PUSH
40975: LD_INT 21
40977: PUSH
40978: LD_INT 3
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PPUSH
40993: CALL_OW 69
40997: ST_TO_ADDR
// if not tmp then
40998: LD_VAR 0 8
41002: NOT
41003: IFFALSE 41007
// exit ;
41005: GO 41465
// if in_unit then
41007: LD_VAR 0 11
41011: IFFALSE 41035
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41013: LD_ADDR_VAR 0 10
41017: PUSH
41018: LD_VAR 0 8
41022: PPUSH
41023: LD_VAR 0 11
41027: PPUSH
41028: CALL_OW 74
41032: ST_TO_ADDR
41033: GO 41055
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41035: LD_ADDR_VAR 0 10
41039: PUSH
41040: LD_VAR 0 8
41044: PPUSH
41045: LD_VAR 0 1
41049: PPUSH
41050: CALL_OW 74
41054: ST_TO_ADDR
// if not enemy then
41055: LD_VAR 0 10
41059: NOT
41060: IFFALSE 41064
// exit ;
41062: GO 41465
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41064: LD_VAR 0 11
41068: PUSH
41069: LD_VAR 0 11
41073: PPUSH
41074: LD_VAR 0 10
41078: PPUSH
41079: CALL_OW 296
41083: PUSH
41084: LD_INT 13
41086: GREATER
41087: AND
41088: PUSH
41089: LD_VAR 0 1
41093: PPUSH
41094: LD_VAR 0 10
41098: PPUSH
41099: CALL_OW 296
41103: PUSH
41104: LD_INT 12
41106: GREATER
41107: OR
41108: IFFALSE 41112
// exit ;
41110: GO 41465
// missile := [ 1 ] ;
41112: LD_ADDR_VAR 0 14
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: EMPTY
41121: LIST
41122: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41123: LD_VAR 0 9
41127: PPUSH
41128: LD_VAR 0 12
41132: PPUSH
41133: CALL_OW 325
41137: IFFALSE 41166
// missile := Insert ( missile , missile + 1 , 2 ) ;
41139: LD_ADDR_VAR 0 14
41143: PUSH
41144: LD_VAR 0 14
41148: PPUSH
41149: LD_VAR 0 14
41153: PUSH
41154: LD_INT 1
41156: PLUS
41157: PPUSH
41158: LD_INT 2
41160: PPUSH
41161: CALL_OW 2
41165: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41166: LD_VAR 0 9
41170: PPUSH
41171: LD_VAR 0 13
41175: PPUSH
41176: CALL_OW 325
41180: PUSH
41181: LD_VAR 0 10
41185: PPUSH
41186: CALL_OW 255
41190: PPUSH
41191: LD_VAR 0 13
41195: PPUSH
41196: CALL_OW 325
41200: NOT
41201: AND
41202: IFFALSE 41231
// missile := Insert ( missile , missile + 1 , 3 ) ;
41204: LD_ADDR_VAR 0 14
41208: PUSH
41209: LD_VAR 0 14
41213: PPUSH
41214: LD_VAR 0 14
41218: PUSH
41219: LD_INT 1
41221: PLUS
41222: PPUSH
41223: LD_INT 3
41225: PPUSH
41226: CALL_OW 2
41230: ST_TO_ADDR
// if missile < 2 then
41231: LD_VAR 0 14
41235: PUSH
41236: LD_INT 2
41238: LESS
41239: IFFALSE 41243
// exit ;
41241: GO 41465
// x := GetX ( enemy ) ;
41243: LD_ADDR_VAR 0 4
41247: PUSH
41248: LD_VAR 0 10
41252: PPUSH
41253: CALL_OW 250
41257: ST_TO_ADDR
// y := GetY ( enemy ) ;
41258: LD_ADDR_VAR 0 5
41262: PUSH
41263: LD_VAR 0 10
41267: PPUSH
41268: CALL_OW 251
41272: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41273: LD_ADDR_VAR 0 6
41277: PUSH
41278: LD_VAR 0 4
41282: PUSH
41283: LD_INT 1
41285: NEG
41286: PPUSH
41287: LD_INT 1
41289: PPUSH
41290: CALL_OW 12
41294: PLUS
41295: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41296: LD_ADDR_VAR 0 7
41300: PUSH
41301: LD_VAR 0 5
41305: PUSH
41306: LD_INT 1
41308: NEG
41309: PPUSH
41310: LD_INT 1
41312: PPUSH
41313: CALL_OW 12
41317: PLUS
41318: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41319: LD_VAR 0 6
41323: PPUSH
41324: LD_VAR 0 7
41328: PPUSH
41329: CALL_OW 488
41333: NOT
41334: IFFALSE 41356
// begin _x := x ;
41336: LD_ADDR_VAR 0 6
41340: PUSH
41341: LD_VAR 0 4
41345: ST_TO_ADDR
// _y := y ;
41346: LD_ADDR_VAR 0 7
41350: PUSH
41351: LD_VAR 0 5
41355: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41356: LD_ADDR_VAR 0 3
41360: PUSH
41361: LD_INT 1
41363: PPUSH
41364: LD_VAR 0 14
41368: PPUSH
41369: CALL_OW 12
41373: ST_TO_ADDR
// case i of 1 :
41374: LD_VAR 0 3
41378: PUSH
41379: LD_INT 1
41381: DOUBLE
41382: EQUAL
41383: IFTRUE 41387
41385: GO 41404
41387: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41388: LD_VAR 0 1
41392: PPUSH
41393: LD_VAR 0 10
41397: PPUSH
41398: CALL_OW 115
41402: GO 41465
41404: LD_INT 2
41406: DOUBLE
41407: EQUAL
41408: IFTRUE 41412
41410: GO 41434
41412: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41413: LD_VAR 0 1
41417: PPUSH
41418: LD_VAR 0 6
41422: PPUSH
41423: LD_VAR 0 7
41427: PPUSH
41428: CALL_OW 153
41432: GO 41465
41434: LD_INT 3
41436: DOUBLE
41437: EQUAL
41438: IFTRUE 41442
41440: GO 41464
41442: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41443: LD_VAR 0 1
41447: PPUSH
41448: LD_VAR 0 6
41452: PPUSH
41453: LD_VAR 0 7
41457: PPUSH
41458: CALL_OW 154
41462: GO 41465
41464: POP
// end ;
41465: LD_VAR 0 2
41469: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41470: LD_INT 0
41472: PPUSH
41473: PPUSH
41474: PPUSH
41475: PPUSH
41476: PPUSH
41477: PPUSH
// if not unit or not building then
41478: LD_VAR 0 1
41482: NOT
41483: PUSH
41484: LD_VAR 0 2
41488: NOT
41489: OR
41490: IFFALSE 41494
// exit ;
41492: GO 41652
// x := GetX ( building ) ;
41494: LD_ADDR_VAR 0 5
41498: PUSH
41499: LD_VAR 0 2
41503: PPUSH
41504: CALL_OW 250
41508: ST_TO_ADDR
// y := GetY ( building ) ;
41509: LD_ADDR_VAR 0 6
41513: PUSH
41514: LD_VAR 0 2
41518: PPUSH
41519: CALL_OW 251
41523: ST_TO_ADDR
// for i = 0 to 5 do
41524: LD_ADDR_VAR 0 4
41528: PUSH
41529: DOUBLE
41530: LD_INT 0
41532: DEC
41533: ST_TO_ADDR
41534: LD_INT 5
41536: PUSH
41537: FOR_TO
41538: IFFALSE 41650
// begin _x := ShiftX ( x , i , 3 ) ;
41540: LD_ADDR_VAR 0 7
41544: PUSH
41545: LD_VAR 0 5
41549: PPUSH
41550: LD_VAR 0 4
41554: PPUSH
41555: LD_INT 3
41557: PPUSH
41558: CALL_OW 272
41562: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41563: LD_ADDR_VAR 0 8
41567: PUSH
41568: LD_VAR 0 6
41572: PPUSH
41573: LD_VAR 0 4
41577: PPUSH
41578: LD_INT 3
41580: PPUSH
41581: CALL_OW 273
41585: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41586: LD_VAR 0 7
41590: PPUSH
41591: LD_VAR 0 8
41595: PPUSH
41596: CALL_OW 488
41600: NOT
41601: IFFALSE 41605
// continue ;
41603: GO 41537
// if HexInfo ( _x , _y ) = 0 then
41605: LD_VAR 0 7
41609: PPUSH
41610: LD_VAR 0 8
41614: PPUSH
41615: CALL_OW 428
41619: PUSH
41620: LD_INT 0
41622: EQUAL
41623: IFFALSE 41648
// begin ComMoveXY ( unit , _x , _y ) ;
41625: LD_VAR 0 1
41629: PPUSH
41630: LD_VAR 0 7
41634: PPUSH
41635: LD_VAR 0 8
41639: PPUSH
41640: CALL_OW 111
// exit ;
41644: POP
41645: POP
41646: GO 41652
// end ; end ;
41648: GO 41537
41650: POP
41651: POP
// end ;
41652: LD_VAR 0 3
41656: RET
// export function ScanBase ( side , base_area ) ; begin
41657: LD_INT 0
41659: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41660: LD_ADDR_VAR 0 3
41664: PUSH
41665: LD_VAR 0 2
41669: PPUSH
41670: LD_INT 81
41672: PUSH
41673: LD_VAR 0 1
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PPUSH
41682: CALL_OW 70
41686: ST_TO_ADDR
// end ;
41687: LD_VAR 0 3
41691: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41692: LD_INT 0
41694: PPUSH
41695: PPUSH
41696: PPUSH
41697: PPUSH
// result := false ;
41698: LD_ADDR_VAR 0 2
41702: PUSH
41703: LD_INT 0
41705: ST_TO_ADDR
// side := GetSide ( unit ) ;
41706: LD_ADDR_VAR 0 3
41710: PUSH
41711: LD_VAR 0 1
41715: PPUSH
41716: CALL_OW 255
41720: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41721: LD_ADDR_VAR 0 4
41725: PUSH
41726: LD_VAR 0 1
41730: PPUSH
41731: CALL_OW 248
41735: ST_TO_ADDR
// case nat of 1 :
41736: LD_VAR 0 4
41740: PUSH
41741: LD_INT 1
41743: DOUBLE
41744: EQUAL
41745: IFTRUE 41749
41747: GO 41760
41749: POP
// tech := tech_lassight ; 2 :
41750: LD_ADDR_VAR 0 5
41754: PUSH
41755: LD_INT 12
41757: ST_TO_ADDR
41758: GO 41799
41760: LD_INT 2
41762: DOUBLE
41763: EQUAL
41764: IFTRUE 41768
41766: GO 41779
41768: POP
// tech := tech_mortar ; 3 :
41769: LD_ADDR_VAR 0 5
41773: PUSH
41774: LD_INT 41
41776: ST_TO_ADDR
41777: GO 41799
41779: LD_INT 3
41781: DOUBLE
41782: EQUAL
41783: IFTRUE 41787
41785: GO 41798
41787: POP
// tech := tech_bazooka ; end ;
41788: LD_ADDR_VAR 0 5
41792: PUSH
41793: LD_INT 44
41795: ST_TO_ADDR
41796: GO 41799
41798: POP
// if Researched ( side , tech ) then
41799: LD_VAR 0 3
41803: PPUSH
41804: LD_VAR 0 5
41808: PPUSH
41809: CALL_OW 325
41813: IFFALSE 41840
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41815: LD_ADDR_VAR 0 2
41819: PUSH
41820: LD_INT 5
41822: PUSH
41823: LD_INT 8
41825: PUSH
41826: LD_INT 9
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: LIST
41833: PUSH
41834: LD_VAR 0 4
41838: ARRAY
41839: ST_TO_ADDR
// end ;
41840: LD_VAR 0 2
41844: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41845: LD_INT 0
41847: PPUSH
41848: PPUSH
41849: PPUSH
// if not mines then
41850: LD_VAR 0 2
41854: NOT
41855: IFFALSE 41859
// exit ;
41857: GO 42003
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41859: LD_ADDR_VAR 0 5
41863: PUSH
41864: LD_INT 81
41866: PUSH
41867: LD_VAR 0 1
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 3
41878: PUSH
41879: LD_INT 21
41881: PUSH
41882: LD_INT 3
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PPUSH
41897: CALL_OW 69
41901: ST_TO_ADDR
// for i in mines do
41902: LD_ADDR_VAR 0 4
41906: PUSH
41907: LD_VAR 0 2
41911: PUSH
41912: FOR_IN
41913: IFFALSE 42001
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41915: LD_VAR 0 4
41919: PUSH
41920: LD_INT 1
41922: ARRAY
41923: PPUSH
41924: LD_VAR 0 4
41928: PUSH
41929: LD_INT 2
41931: ARRAY
41932: PPUSH
41933: CALL_OW 458
41937: NOT
41938: IFFALSE 41942
// continue ;
41940: GO 41912
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41942: LD_VAR 0 4
41946: PUSH
41947: LD_INT 1
41949: ARRAY
41950: PPUSH
41951: LD_VAR 0 4
41955: PUSH
41956: LD_INT 2
41958: ARRAY
41959: PPUSH
41960: CALL_OW 428
41964: PUSH
41965: LD_VAR 0 5
41969: IN
41970: IFFALSE 41999
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41972: LD_VAR 0 4
41976: PUSH
41977: LD_INT 1
41979: ARRAY
41980: PPUSH
41981: LD_VAR 0 4
41985: PUSH
41986: LD_INT 2
41988: ARRAY
41989: PPUSH
41990: LD_VAR 0 1
41994: PPUSH
41995: CALL_OW 456
// end ;
41999: GO 41912
42001: POP
42002: POP
// end ;
42003: LD_VAR 0 3
42007: RET
// export function Count ( array ) ; var i ; begin
42008: LD_INT 0
42010: PPUSH
42011: PPUSH
// result := 0 ;
42012: LD_ADDR_VAR 0 2
42016: PUSH
42017: LD_INT 0
42019: ST_TO_ADDR
// for i in array do
42020: LD_ADDR_VAR 0 3
42024: PUSH
42025: LD_VAR 0 1
42029: PUSH
42030: FOR_IN
42031: IFFALSE 42055
// if i then
42033: LD_VAR 0 3
42037: IFFALSE 42053
// result := result + 1 ;
42039: LD_ADDR_VAR 0 2
42043: PUSH
42044: LD_VAR 0 2
42048: PUSH
42049: LD_INT 1
42051: PLUS
42052: ST_TO_ADDR
42053: GO 42030
42055: POP
42056: POP
// end ;
42057: LD_VAR 0 2
42061: RET
// export function IsEmpty ( building ) ; begin
42062: LD_INT 0
42064: PPUSH
// if not building then
42065: LD_VAR 0 1
42069: NOT
42070: IFFALSE 42074
// exit ;
42072: GO 42117
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42074: LD_ADDR_VAR 0 2
42078: PUSH
42079: LD_VAR 0 1
42083: PUSH
42084: LD_INT 22
42086: PUSH
42087: LD_VAR 0 1
42091: PPUSH
42092: CALL_OW 255
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 58
42103: PUSH
42104: EMPTY
42105: LIST
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PPUSH
42111: CALL_OW 69
42115: IN
42116: ST_TO_ADDR
// end ;
42117: LD_VAR 0 2
42121: RET
// export function IsNotFull ( building ) ; begin
42122: LD_INT 0
42124: PPUSH
// if not building then
42125: LD_VAR 0 1
42129: NOT
42130: IFFALSE 42134
// exit ;
42132: GO 42153
// result := UnitsInside ( building ) < 6 ;
42134: LD_ADDR_VAR 0 2
42138: PUSH
42139: LD_VAR 0 1
42143: PPUSH
42144: CALL_OW 313
42148: PUSH
42149: LD_INT 6
42151: LESS
42152: ST_TO_ADDR
// end ;
42153: LD_VAR 0 2
42157: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42158: LD_INT 0
42160: PPUSH
42161: PPUSH
42162: PPUSH
42163: PPUSH
// tmp := [ ] ;
42164: LD_ADDR_VAR 0 3
42168: PUSH
42169: EMPTY
42170: ST_TO_ADDR
// list := [ ] ;
42171: LD_ADDR_VAR 0 5
42175: PUSH
42176: EMPTY
42177: ST_TO_ADDR
// for i = 16 to 25 do
42178: LD_ADDR_VAR 0 4
42182: PUSH
42183: DOUBLE
42184: LD_INT 16
42186: DEC
42187: ST_TO_ADDR
42188: LD_INT 25
42190: PUSH
42191: FOR_TO
42192: IFFALSE 42265
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42194: LD_ADDR_VAR 0 3
42198: PUSH
42199: LD_VAR 0 3
42203: PUSH
42204: LD_INT 22
42206: PUSH
42207: LD_VAR 0 1
42211: PPUSH
42212: CALL_OW 255
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 91
42223: PUSH
42224: LD_VAR 0 1
42228: PUSH
42229: LD_INT 6
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 30
42239: PUSH
42240: LD_VAR 0 4
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: LIST
42253: PUSH
42254: EMPTY
42255: LIST
42256: PPUSH
42257: CALL_OW 69
42261: ADD
42262: ST_TO_ADDR
42263: GO 42191
42265: POP
42266: POP
// for i = 1 to tmp do
42267: LD_ADDR_VAR 0 4
42271: PUSH
42272: DOUBLE
42273: LD_INT 1
42275: DEC
42276: ST_TO_ADDR
42277: LD_VAR 0 3
42281: PUSH
42282: FOR_TO
42283: IFFALSE 42371
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42285: LD_ADDR_VAR 0 5
42289: PUSH
42290: LD_VAR 0 5
42294: PUSH
42295: LD_VAR 0 3
42299: PUSH
42300: LD_VAR 0 4
42304: ARRAY
42305: PPUSH
42306: CALL_OW 266
42310: PUSH
42311: LD_VAR 0 3
42315: PUSH
42316: LD_VAR 0 4
42320: ARRAY
42321: PPUSH
42322: CALL_OW 250
42326: PUSH
42327: LD_VAR 0 3
42331: PUSH
42332: LD_VAR 0 4
42336: ARRAY
42337: PPUSH
42338: CALL_OW 251
42342: PUSH
42343: LD_VAR 0 3
42347: PUSH
42348: LD_VAR 0 4
42352: ARRAY
42353: PPUSH
42354: CALL_OW 254
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: PUSH
42365: EMPTY
42366: LIST
42367: ADD
42368: ST_TO_ADDR
42369: GO 42282
42371: POP
42372: POP
// result := list ;
42373: LD_ADDR_VAR 0 2
42377: PUSH
42378: LD_VAR 0 5
42382: ST_TO_ADDR
// end ;
42383: LD_VAR 0 2
42387: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42388: LD_INT 0
42390: PPUSH
42391: PPUSH
42392: PPUSH
42393: PPUSH
42394: PPUSH
42395: PPUSH
42396: PPUSH
// if not factory then
42397: LD_VAR 0 1
42401: NOT
42402: IFFALSE 42406
// exit ;
42404: GO 42999
// if control = control_apeman then
42406: LD_VAR 0 4
42410: PUSH
42411: LD_INT 5
42413: EQUAL
42414: IFFALSE 42523
// begin tmp := UnitsInside ( factory ) ;
42416: LD_ADDR_VAR 0 8
42420: PUSH
42421: LD_VAR 0 1
42425: PPUSH
42426: CALL_OW 313
42430: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42431: LD_VAR 0 8
42435: PPUSH
42436: LD_INT 25
42438: PUSH
42439: LD_INT 12
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PPUSH
42446: CALL_OW 72
42450: NOT
42451: IFFALSE 42461
// control := control_manual ;
42453: LD_ADDR_VAR 0 4
42457: PUSH
42458: LD_INT 1
42460: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42461: LD_ADDR_VAR 0 8
42465: PUSH
42466: LD_VAR 0 1
42470: PPUSH
42471: CALL 42158 0 1
42475: ST_TO_ADDR
// if tmp then
42476: LD_VAR 0 8
42480: IFFALSE 42523
// begin for i in tmp do
42482: LD_ADDR_VAR 0 7
42486: PUSH
42487: LD_VAR 0 8
42491: PUSH
42492: FOR_IN
42493: IFFALSE 42521
// if i [ 1 ] = b_ext_radio then
42495: LD_VAR 0 7
42499: PUSH
42500: LD_INT 1
42502: ARRAY
42503: PUSH
42504: LD_INT 22
42506: EQUAL
42507: IFFALSE 42519
// begin control := control_remote ;
42509: LD_ADDR_VAR 0 4
42513: PUSH
42514: LD_INT 2
42516: ST_TO_ADDR
// break ;
42517: GO 42521
// end ;
42519: GO 42492
42521: POP
42522: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42523: LD_VAR 0 1
42527: PPUSH
42528: LD_VAR 0 2
42532: PPUSH
42533: LD_VAR 0 3
42537: PPUSH
42538: LD_VAR 0 4
42542: PPUSH
42543: LD_VAR 0 5
42547: PPUSH
42548: CALL_OW 448
42552: IFFALSE 42587
// begin result := [ chassis , engine , control , weapon ] ;
42554: LD_ADDR_VAR 0 6
42558: PUSH
42559: LD_VAR 0 2
42563: PUSH
42564: LD_VAR 0 3
42568: PUSH
42569: LD_VAR 0 4
42573: PUSH
42574: LD_VAR 0 5
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: ST_TO_ADDR
// exit ;
42585: GO 42999
// end ; _chassis := AvailableChassisList ( factory ) ;
42587: LD_ADDR_VAR 0 9
42591: PUSH
42592: LD_VAR 0 1
42596: PPUSH
42597: CALL_OW 475
42601: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42602: LD_ADDR_VAR 0 11
42606: PUSH
42607: LD_VAR 0 1
42611: PPUSH
42612: CALL_OW 476
42616: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42617: LD_ADDR_VAR 0 12
42621: PUSH
42622: LD_VAR 0 1
42626: PPUSH
42627: CALL_OW 477
42631: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42632: LD_ADDR_VAR 0 10
42636: PUSH
42637: LD_VAR 0 1
42641: PPUSH
42642: CALL_OW 478
42646: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42647: LD_VAR 0 9
42651: NOT
42652: PUSH
42653: LD_VAR 0 11
42657: NOT
42658: OR
42659: PUSH
42660: LD_VAR 0 12
42664: NOT
42665: OR
42666: PUSH
42667: LD_VAR 0 10
42671: NOT
42672: OR
42673: IFFALSE 42708
// begin result := [ chassis , engine , control , weapon ] ;
42675: LD_ADDR_VAR 0 6
42679: PUSH
42680: LD_VAR 0 2
42684: PUSH
42685: LD_VAR 0 3
42689: PUSH
42690: LD_VAR 0 4
42694: PUSH
42695: LD_VAR 0 5
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: ST_TO_ADDR
// exit ;
42706: GO 42999
// end ; if not chassis in _chassis then
42708: LD_VAR 0 2
42712: PUSH
42713: LD_VAR 0 9
42717: IN
42718: NOT
42719: IFFALSE 42745
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42721: LD_ADDR_VAR 0 2
42725: PUSH
42726: LD_VAR 0 9
42730: PUSH
42731: LD_INT 1
42733: PPUSH
42734: LD_VAR 0 9
42738: PPUSH
42739: CALL_OW 12
42743: ARRAY
42744: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42745: LD_VAR 0 2
42749: PPUSH
42750: LD_VAR 0 3
42754: PPUSH
42755: CALL 43004 0 2
42759: NOT
42760: IFFALSE 42819
// repeat engine := _engine [ 1 ] ;
42762: LD_ADDR_VAR 0 3
42766: PUSH
42767: LD_VAR 0 11
42771: PUSH
42772: LD_INT 1
42774: ARRAY
42775: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42776: LD_ADDR_VAR 0 11
42780: PUSH
42781: LD_VAR 0 11
42785: PPUSH
42786: LD_INT 1
42788: PPUSH
42789: CALL_OW 3
42793: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42794: LD_VAR 0 2
42798: PPUSH
42799: LD_VAR 0 3
42803: PPUSH
42804: CALL 43004 0 2
42808: PUSH
42809: LD_VAR 0 11
42813: PUSH
42814: EMPTY
42815: EQUAL
42816: OR
42817: IFFALSE 42762
// if not control in _control then
42819: LD_VAR 0 4
42823: PUSH
42824: LD_VAR 0 12
42828: IN
42829: NOT
42830: IFFALSE 42856
// control := _control [ rand ( 1 , _control ) ] ;
42832: LD_ADDR_VAR 0 4
42836: PUSH
42837: LD_VAR 0 12
42841: PUSH
42842: LD_INT 1
42844: PPUSH
42845: LD_VAR 0 12
42849: PPUSH
42850: CALL_OW 12
42854: ARRAY
42855: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42856: LD_VAR 0 2
42860: PPUSH
42861: LD_VAR 0 5
42865: PPUSH
42866: CALL 43224 0 2
42870: NOT
42871: IFFALSE 42930
// repeat weapon := _weapon [ 1 ] ;
42873: LD_ADDR_VAR 0 5
42877: PUSH
42878: LD_VAR 0 10
42882: PUSH
42883: LD_INT 1
42885: ARRAY
42886: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42887: LD_ADDR_VAR 0 10
42891: PUSH
42892: LD_VAR 0 10
42896: PPUSH
42897: LD_INT 1
42899: PPUSH
42900: CALL_OW 3
42904: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42905: LD_VAR 0 2
42909: PPUSH
42910: LD_VAR 0 5
42914: PPUSH
42915: CALL 43224 0 2
42919: PUSH
42920: LD_VAR 0 10
42924: PUSH
42925: EMPTY
42926: EQUAL
42927: OR
42928: IFFALSE 42873
// result := [ ] ;
42930: LD_ADDR_VAR 0 6
42934: PUSH
42935: EMPTY
42936: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42937: LD_VAR 0 1
42941: PPUSH
42942: LD_VAR 0 2
42946: PPUSH
42947: LD_VAR 0 3
42951: PPUSH
42952: LD_VAR 0 4
42956: PPUSH
42957: LD_VAR 0 5
42961: PPUSH
42962: CALL_OW 448
42966: IFFALSE 42999
// result := [ chassis , engine , control , weapon ] ;
42968: LD_ADDR_VAR 0 6
42972: PUSH
42973: LD_VAR 0 2
42977: PUSH
42978: LD_VAR 0 3
42982: PUSH
42983: LD_VAR 0 4
42987: PUSH
42988: LD_VAR 0 5
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: ST_TO_ADDR
// end ;
42999: LD_VAR 0 6
43003: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43004: LD_INT 0
43006: PPUSH
// if not chassis or not engine then
43007: LD_VAR 0 1
43011: NOT
43012: PUSH
43013: LD_VAR 0 2
43017: NOT
43018: OR
43019: IFFALSE 43023
// exit ;
43021: GO 43219
// case engine of engine_solar :
43023: LD_VAR 0 2
43027: PUSH
43028: LD_INT 2
43030: DOUBLE
43031: EQUAL
43032: IFTRUE 43036
43034: GO 43074
43036: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43037: LD_ADDR_VAR 0 3
43041: PUSH
43042: LD_INT 11
43044: PUSH
43045: LD_INT 12
43047: PUSH
43048: LD_INT 13
43050: PUSH
43051: LD_INT 14
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: LD_INT 3
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: ST_TO_ADDR
43072: GO 43203
43074: LD_INT 1
43076: DOUBLE
43077: EQUAL
43078: IFTRUE 43082
43080: GO 43144
43082: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43083: LD_ADDR_VAR 0 3
43087: PUSH
43088: LD_INT 11
43090: PUSH
43091: LD_INT 12
43093: PUSH
43094: LD_INT 13
43096: PUSH
43097: LD_INT 14
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: LD_INT 2
43105: PUSH
43106: LD_INT 3
43108: PUSH
43109: LD_INT 4
43111: PUSH
43112: LD_INT 5
43114: PUSH
43115: LD_INT 21
43117: PUSH
43118: LD_INT 23
43120: PUSH
43121: LD_INT 22
43123: PUSH
43124: LD_INT 24
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: ST_TO_ADDR
43142: GO 43203
43144: LD_INT 3
43146: DOUBLE
43147: EQUAL
43148: IFTRUE 43152
43150: GO 43202
43152: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43153: LD_ADDR_VAR 0 3
43157: PUSH
43158: LD_INT 13
43160: PUSH
43161: LD_INT 14
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: LD_INT 3
43169: PUSH
43170: LD_INT 4
43172: PUSH
43173: LD_INT 5
43175: PUSH
43176: LD_INT 21
43178: PUSH
43179: LD_INT 22
43181: PUSH
43182: LD_INT 23
43184: PUSH
43185: LD_INT 24
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: ST_TO_ADDR
43200: GO 43203
43202: POP
// result := ( chassis in result ) ;
43203: LD_ADDR_VAR 0 3
43207: PUSH
43208: LD_VAR 0 1
43212: PUSH
43213: LD_VAR 0 3
43217: IN
43218: ST_TO_ADDR
// end ;
43219: LD_VAR 0 3
43223: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43224: LD_INT 0
43226: PPUSH
// if not chassis or not weapon then
43227: LD_VAR 0 1
43231: NOT
43232: PUSH
43233: LD_VAR 0 2
43237: NOT
43238: OR
43239: IFFALSE 43243
// exit ;
43241: GO 44305
// case weapon of us_machine_gun :
43243: LD_VAR 0 2
43247: PUSH
43248: LD_INT 2
43250: DOUBLE
43251: EQUAL
43252: IFTRUE 43256
43254: GO 43286
43256: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43257: LD_ADDR_VAR 0 3
43261: PUSH
43262: LD_INT 1
43264: PUSH
43265: LD_INT 2
43267: PUSH
43268: LD_INT 3
43270: PUSH
43271: LD_INT 4
43273: PUSH
43274: LD_INT 5
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: ST_TO_ADDR
43284: GO 44289
43286: LD_INT 3
43288: DOUBLE
43289: EQUAL
43290: IFTRUE 43294
43292: GO 43324
43294: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43295: LD_ADDR_VAR 0 3
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: LD_INT 3
43308: PUSH
43309: LD_INT 4
43311: PUSH
43312: LD_INT 5
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: ST_TO_ADDR
43322: GO 44289
43324: LD_INT 11
43326: DOUBLE
43327: EQUAL
43328: IFTRUE 43332
43330: GO 43362
43332: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43333: LD_ADDR_VAR 0 3
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: LD_INT 2
43343: PUSH
43344: LD_INT 3
43346: PUSH
43347: LD_INT 4
43349: PUSH
43350: LD_INT 5
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: ST_TO_ADDR
43360: GO 44289
43362: LD_INT 4
43364: DOUBLE
43365: EQUAL
43366: IFTRUE 43370
43368: GO 43396
43370: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43371: LD_ADDR_VAR 0 3
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: LD_INT 3
43381: PUSH
43382: LD_INT 4
43384: PUSH
43385: LD_INT 5
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: ST_TO_ADDR
43394: GO 44289
43396: LD_INT 5
43398: DOUBLE
43399: EQUAL
43400: IFTRUE 43404
43402: GO 43430
43404: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43405: LD_ADDR_VAR 0 3
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: LD_INT 3
43415: PUSH
43416: LD_INT 4
43418: PUSH
43419: LD_INT 5
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: ST_TO_ADDR
43428: GO 44289
43430: LD_INT 9
43432: DOUBLE
43433: EQUAL
43434: IFTRUE 43438
43436: GO 43464
43438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43439: LD_ADDR_VAR 0 3
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: LD_INT 3
43449: PUSH
43450: LD_INT 4
43452: PUSH
43453: LD_INT 5
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: ST_TO_ADDR
43462: GO 44289
43464: LD_INT 7
43466: DOUBLE
43467: EQUAL
43468: IFTRUE 43472
43470: GO 43498
43472: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43473: LD_ADDR_VAR 0 3
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: LD_INT 3
43483: PUSH
43484: LD_INT 4
43486: PUSH
43487: LD_INT 5
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: ST_TO_ADDR
43496: GO 44289
43498: LD_INT 12
43500: DOUBLE
43501: EQUAL
43502: IFTRUE 43506
43504: GO 43532
43506: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43507: LD_ADDR_VAR 0 3
43511: PUSH
43512: LD_INT 2
43514: PUSH
43515: LD_INT 3
43517: PUSH
43518: LD_INT 4
43520: PUSH
43521: LD_INT 5
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: ST_TO_ADDR
43530: GO 44289
43532: LD_INT 13
43534: DOUBLE
43535: EQUAL
43536: IFTRUE 43540
43538: GO 43566
43540: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43541: LD_ADDR_VAR 0 3
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: LD_INT 3
43551: PUSH
43552: LD_INT 4
43554: PUSH
43555: LD_INT 5
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: ST_TO_ADDR
43564: GO 44289
43566: LD_INT 14
43568: DOUBLE
43569: EQUAL
43570: IFTRUE 43574
43572: GO 43592
43574: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43575: LD_ADDR_VAR 0 3
43579: PUSH
43580: LD_INT 4
43582: PUSH
43583: LD_INT 5
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: ST_TO_ADDR
43590: GO 44289
43592: LD_INT 6
43594: DOUBLE
43595: EQUAL
43596: IFTRUE 43600
43598: GO 43618
43600: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43601: LD_ADDR_VAR 0 3
43605: PUSH
43606: LD_INT 4
43608: PUSH
43609: LD_INT 5
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: ST_TO_ADDR
43616: GO 44289
43618: LD_INT 10
43620: DOUBLE
43621: EQUAL
43622: IFTRUE 43626
43624: GO 43644
43626: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43627: LD_ADDR_VAR 0 3
43631: PUSH
43632: LD_INT 4
43634: PUSH
43635: LD_INT 5
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: ST_TO_ADDR
43642: GO 44289
43644: LD_INT 22
43646: DOUBLE
43647: EQUAL
43648: IFTRUE 43652
43650: GO 43678
43652: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43653: LD_ADDR_VAR 0 3
43657: PUSH
43658: LD_INT 11
43660: PUSH
43661: LD_INT 12
43663: PUSH
43664: LD_INT 13
43666: PUSH
43667: LD_INT 14
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: ST_TO_ADDR
43676: GO 44289
43678: LD_INT 23
43680: DOUBLE
43681: EQUAL
43682: IFTRUE 43686
43684: GO 43712
43686: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43687: LD_ADDR_VAR 0 3
43691: PUSH
43692: LD_INT 11
43694: PUSH
43695: LD_INT 12
43697: PUSH
43698: LD_INT 13
43700: PUSH
43701: LD_INT 14
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: ST_TO_ADDR
43710: GO 44289
43712: LD_INT 24
43714: DOUBLE
43715: EQUAL
43716: IFTRUE 43720
43718: GO 43746
43720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43721: LD_ADDR_VAR 0 3
43725: PUSH
43726: LD_INT 11
43728: PUSH
43729: LD_INT 12
43731: PUSH
43732: LD_INT 13
43734: PUSH
43735: LD_INT 14
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: ST_TO_ADDR
43744: GO 44289
43746: LD_INT 30
43748: DOUBLE
43749: EQUAL
43750: IFTRUE 43754
43752: GO 43780
43754: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43755: LD_ADDR_VAR 0 3
43759: PUSH
43760: LD_INT 11
43762: PUSH
43763: LD_INT 12
43765: PUSH
43766: LD_INT 13
43768: PUSH
43769: LD_INT 14
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: ST_TO_ADDR
43778: GO 44289
43780: LD_INT 25
43782: DOUBLE
43783: EQUAL
43784: IFTRUE 43788
43786: GO 43806
43788: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43789: LD_ADDR_VAR 0 3
43793: PUSH
43794: LD_INT 13
43796: PUSH
43797: LD_INT 14
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: ST_TO_ADDR
43804: GO 44289
43806: LD_INT 27
43808: DOUBLE
43809: EQUAL
43810: IFTRUE 43814
43812: GO 43832
43814: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43815: LD_ADDR_VAR 0 3
43819: PUSH
43820: LD_INT 13
43822: PUSH
43823: LD_INT 14
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: ST_TO_ADDR
43830: GO 44289
43832: LD_EXP 57
43836: DOUBLE
43837: EQUAL
43838: IFTRUE 43842
43840: GO 43868
43842: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43843: LD_ADDR_VAR 0 3
43847: PUSH
43848: LD_INT 11
43850: PUSH
43851: LD_INT 12
43853: PUSH
43854: LD_INT 13
43856: PUSH
43857: LD_INT 14
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: ST_TO_ADDR
43866: GO 44289
43868: LD_INT 28
43870: DOUBLE
43871: EQUAL
43872: IFTRUE 43876
43874: GO 43894
43876: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43877: LD_ADDR_VAR 0 3
43881: PUSH
43882: LD_INT 13
43884: PUSH
43885: LD_INT 14
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: ST_TO_ADDR
43892: GO 44289
43894: LD_INT 29
43896: DOUBLE
43897: EQUAL
43898: IFTRUE 43902
43900: GO 43920
43902: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43903: LD_ADDR_VAR 0 3
43907: PUSH
43908: LD_INT 13
43910: PUSH
43911: LD_INT 14
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: ST_TO_ADDR
43918: GO 44289
43920: LD_INT 31
43922: DOUBLE
43923: EQUAL
43924: IFTRUE 43928
43926: GO 43946
43928: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43929: LD_ADDR_VAR 0 3
43933: PUSH
43934: LD_INT 13
43936: PUSH
43937: LD_INT 14
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: ST_TO_ADDR
43944: GO 44289
43946: LD_INT 26
43948: DOUBLE
43949: EQUAL
43950: IFTRUE 43954
43952: GO 43972
43954: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43955: LD_ADDR_VAR 0 3
43959: PUSH
43960: LD_INT 13
43962: PUSH
43963: LD_INT 14
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: ST_TO_ADDR
43970: GO 44289
43972: LD_INT 42
43974: DOUBLE
43975: EQUAL
43976: IFTRUE 43980
43978: GO 44006
43980: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43981: LD_ADDR_VAR 0 3
43985: PUSH
43986: LD_INT 21
43988: PUSH
43989: LD_INT 22
43991: PUSH
43992: LD_INT 23
43994: PUSH
43995: LD_INT 24
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: ST_TO_ADDR
44004: GO 44289
44006: LD_INT 43
44008: DOUBLE
44009: EQUAL
44010: IFTRUE 44014
44012: GO 44040
44014: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44015: LD_ADDR_VAR 0 3
44019: PUSH
44020: LD_INT 21
44022: PUSH
44023: LD_INT 22
44025: PUSH
44026: LD_INT 23
44028: PUSH
44029: LD_INT 24
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: ST_TO_ADDR
44038: GO 44289
44040: LD_INT 44
44042: DOUBLE
44043: EQUAL
44044: IFTRUE 44048
44046: GO 44074
44048: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44049: LD_ADDR_VAR 0 3
44053: PUSH
44054: LD_INT 21
44056: PUSH
44057: LD_INT 22
44059: PUSH
44060: LD_INT 23
44062: PUSH
44063: LD_INT 24
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: ST_TO_ADDR
44072: GO 44289
44074: LD_INT 45
44076: DOUBLE
44077: EQUAL
44078: IFTRUE 44082
44080: GO 44108
44082: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44083: LD_ADDR_VAR 0 3
44087: PUSH
44088: LD_INT 21
44090: PUSH
44091: LD_INT 22
44093: PUSH
44094: LD_INT 23
44096: PUSH
44097: LD_INT 24
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: ST_TO_ADDR
44106: GO 44289
44108: LD_INT 49
44110: DOUBLE
44111: EQUAL
44112: IFTRUE 44116
44114: GO 44142
44116: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44117: LD_ADDR_VAR 0 3
44121: PUSH
44122: LD_INT 21
44124: PUSH
44125: LD_INT 22
44127: PUSH
44128: LD_INT 23
44130: PUSH
44131: LD_INT 24
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: ST_TO_ADDR
44140: GO 44289
44142: LD_INT 51
44144: DOUBLE
44145: EQUAL
44146: IFTRUE 44150
44148: GO 44176
44150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44151: LD_ADDR_VAR 0 3
44155: PUSH
44156: LD_INT 21
44158: PUSH
44159: LD_INT 22
44161: PUSH
44162: LD_INT 23
44164: PUSH
44165: LD_INT 24
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: ST_TO_ADDR
44174: GO 44289
44176: LD_INT 52
44178: DOUBLE
44179: EQUAL
44180: IFTRUE 44184
44182: GO 44210
44184: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44185: LD_ADDR_VAR 0 3
44189: PUSH
44190: LD_INT 21
44192: PUSH
44193: LD_INT 22
44195: PUSH
44196: LD_INT 23
44198: PUSH
44199: LD_INT 24
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: ST_TO_ADDR
44208: GO 44289
44210: LD_INT 53
44212: DOUBLE
44213: EQUAL
44214: IFTRUE 44218
44216: GO 44236
44218: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44219: LD_ADDR_VAR 0 3
44223: PUSH
44224: LD_INT 23
44226: PUSH
44227: LD_INT 24
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: ST_TO_ADDR
44234: GO 44289
44236: LD_INT 46
44238: DOUBLE
44239: EQUAL
44240: IFTRUE 44244
44242: GO 44262
44244: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44245: LD_ADDR_VAR 0 3
44249: PUSH
44250: LD_INT 23
44252: PUSH
44253: LD_INT 24
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: ST_TO_ADDR
44260: GO 44289
44262: LD_INT 47
44264: DOUBLE
44265: EQUAL
44266: IFTRUE 44270
44268: GO 44288
44270: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44271: LD_ADDR_VAR 0 3
44275: PUSH
44276: LD_INT 23
44278: PUSH
44279: LD_INT 24
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: ST_TO_ADDR
44286: GO 44289
44288: POP
// result := ( chassis in result ) ;
44289: LD_ADDR_VAR 0 3
44293: PUSH
44294: LD_VAR 0 1
44298: PUSH
44299: LD_VAR 0 3
44303: IN
44304: ST_TO_ADDR
// end ;
44305: LD_VAR 0 3
44309: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44310: LD_INT 0
44312: PPUSH
44313: PPUSH
44314: PPUSH
44315: PPUSH
44316: PPUSH
44317: PPUSH
44318: PPUSH
// result := array ;
44319: LD_ADDR_VAR 0 5
44323: PUSH
44324: LD_VAR 0 1
44328: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44329: LD_VAR 0 1
44333: NOT
44334: PUSH
44335: LD_VAR 0 2
44339: NOT
44340: OR
44341: PUSH
44342: LD_VAR 0 3
44346: NOT
44347: OR
44348: PUSH
44349: LD_VAR 0 2
44353: PUSH
44354: LD_VAR 0 1
44358: GREATER
44359: OR
44360: PUSH
44361: LD_VAR 0 3
44365: PUSH
44366: LD_VAR 0 1
44370: GREATER
44371: OR
44372: IFFALSE 44376
// exit ;
44374: GO 44672
// if direction then
44376: LD_VAR 0 4
44380: IFFALSE 44444
// begin d := 1 ;
44382: LD_ADDR_VAR 0 9
44386: PUSH
44387: LD_INT 1
44389: ST_TO_ADDR
// if i_from > i_to then
44390: LD_VAR 0 2
44394: PUSH
44395: LD_VAR 0 3
44399: GREATER
44400: IFFALSE 44426
// length := ( array - i_from ) + i_to else
44402: LD_ADDR_VAR 0 11
44406: PUSH
44407: LD_VAR 0 1
44411: PUSH
44412: LD_VAR 0 2
44416: MINUS
44417: PUSH
44418: LD_VAR 0 3
44422: PLUS
44423: ST_TO_ADDR
44424: GO 44442
// length := i_to - i_from ;
44426: LD_ADDR_VAR 0 11
44430: PUSH
44431: LD_VAR 0 3
44435: PUSH
44436: LD_VAR 0 2
44440: MINUS
44441: ST_TO_ADDR
// end else
44442: GO 44505
// begin d := - 1 ;
44444: LD_ADDR_VAR 0 9
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: ST_TO_ADDR
// if i_from > i_to then
44453: LD_VAR 0 2
44457: PUSH
44458: LD_VAR 0 3
44462: GREATER
44463: IFFALSE 44483
// length := i_from - i_to else
44465: LD_ADDR_VAR 0 11
44469: PUSH
44470: LD_VAR 0 2
44474: PUSH
44475: LD_VAR 0 3
44479: MINUS
44480: ST_TO_ADDR
44481: GO 44505
// length := ( array - i_to ) + i_from ;
44483: LD_ADDR_VAR 0 11
44487: PUSH
44488: LD_VAR 0 1
44492: PUSH
44493: LD_VAR 0 3
44497: MINUS
44498: PUSH
44499: LD_VAR 0 2
44503: PLUS
44504: ST_TO_ADDR
// end ; if not length then
44505: LD_VAR 0 11
44509: NOT
44510: IFFALSE 44514
// exit ;
44512: GO 44672
// tmp := array ;
44514: LD_ADDR_VAR 0 10
44518: PUSH
44519: LD_VAR 0 1
44523: ST_TO_ADDR
// for i = 1 to length do
44524: LD_ADDR_VAR 0 6
44528: PUSH
44529: DOUBLE
44530: LD_INT 1
44532: DEC
44533: ST_TO_ADDR
44534: LD_VAR 0 11
44538: PUSH
44539: FOR_TO
44540: IFFALSE 44660
// begin for j = 1 to array do
44542: LD_ADDR_VAR 0 7
44546: PUSH
44547: DOUBLE
44548: LD_INT 1
44550: DEC
44551: ST_TO_ADDR
44552: LD_VAR 0 1
44556: PUSH
44557: FOR_TO
44558: IFFALSE 44646
// begin k := j + d ;
44560: LD_ADDR_VAR 0 8
44564: PUSH
44565: LD_VAR 0 7
44569: PUSH
44570: LD_VAR 0 9
44574: PLUS
44575: ST_TO_ADDR
// if k > array then
44576: LD_VAR 0 8
44580: PUSH
44581: LD_VAR 0 1
44585: GREATER
44586: IFFALSE 44596
// k := 1 ;
44588: LD_ADDR_VAR 0 8
44592: PUSH
44593: LD_INT 1
44595: ST_TO_ADDR
// if not k then
44596: LD_VAR 0 8
44600: NOT
44601: IFFALSE 44613
// k := array ;
44603: LD_ADDR_VAR 0 8
44607: PUSH
44608: LD_VAR 0 1
44612: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44613: LD_ADDR_VAR 0 10
44617: PUSH
44618: LD_VAR 0 10
44622: PPUSH
44623: LD_VAR 0 8
44627: PPUSH
44628: LD_VAR 0 1
44632: PUSH
44633: LD_VAR 0 7
44637: ARRAY
44638: PPUSH
44639: CALL_OW 1
44643: ST_TO_ADDR
// end ;
44644: GO 44557
44646: POP
44647: POP
// array := tmp ;
44648: LD_ADDR_VAR 0 1
44652: PUSH
44653: LD_VAR 0 10
44657: ST_TO_ADDR
// end ;
44658: GO 44539
44660: POP
44661: POP
// result := array ;
44662: LD_ADDR_VAR 0 5
44666: PUSH
44667: LD_VAR 0 1
44671: ST_TO_ADDR
// end ;
44672: LD_VAR 0 5
44676: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44677: LD_INT 0
44679: PPUSH
44680: PPUSH
// result := 0 ;
44681: LD_ADDR_VAR 0 3
44685: PUSH
44686: LD_INT 0
44688: ST_TO_ADDR
// if not array or not value in array then
44689: LD_VAR 0 1
44693: NOT
44694: PUSH
44695: LD_VAR 0 2
44699: PUSH
44700: LD_VAR 0 1
44704: IN
44705: NOT
44706: OR
44707: IFFALSE 44711
// exit ;
44709: GO 44765
// for i = 1 to array do
44711: LD_ADDR_VAR 0 4
44715: PUSH
44716: DOUBLE
44717: LD_INT 1
44719: DEC
44720: ST_TO_ADDR
44721: LD_VAR 0 1
44725: PUSH
44726: FOR_TO
44727: IFFALSE 44763
// if value = array [ i ] then
44729: LD_VAR 0 2
44733: PUSH
44734: LD_VAR 0 1
44738: PUSH
44739: LD_VAR 0 4
44743: ARRAY
44744: EQUAL
44745: IFFALSE 44761
// begin result := i ;
44747: LD_ADDR_VAR 0 3
44751: PUSH
44752: LD_VAR 0 4
44756: ST_TO_ADDR
// exit ;
44757: POP
44758: POP
44759: GO 44765
// end ;
44761: GO 44726
44763: POP
44764: POP
// end ;
44765: LD_VAR 0 3
44769: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44770: LD_INT 0
44772: PPUSH
// vc_chassis := chassis ;
44773: LD_ADDR_OWVAR 37
44777: PUSH
44778: LD_VAR 0 1
44782: ST_TO_ADDR
// vc_engine := engine ;
44783: LD_ADDR_OWVAR 39
44787: PUSH
44788: LD_VAR 0 2
44792: ST_TO_ADDR
// vc_control := control ;
44793: LD_ADDR_OWVAR 38
44797: PUSH
44798: LD_VAR 0 3
44802: ST_TO_ADDR
// vc_weapon := weapon ;
44803: LD_ADDR_OWVAR 40
44807: PUSH
44808: LD_VAR 0 4
44812: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44813: LD_ADDR_OWVAR 41
44817: PUSH
44818: LD_VAR 0 5
44822: ST_TO_ADDR
// end ;
44823: LD_VAR 0 6
44827: RET
// export function WantPlant ( unit ) ; var task ; begin
44828: LD_INT 0
44830: PPUSH
44831: PPUSH
// result := false ;
44832: LD_ADDR_VAR 0 2
44836: PUSH
44837: LD_INT 0
44839: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44840: LD_ADDR_VAR 0 3
44844: PUSH
44845: LD_VAR 0 1
44849: PPUSH
44850: CALL_OW 437
44854: ST_TO_ADDR
// if task then
44855: LD_VAR 0 3
44859: IFFALSE 44887
// if task [ 1 ] [ 1 ] = p then
44861: LD_VAR 0 3
44865: PUSH
44866: LD_INT 1
44868: ARRAY
44869: PUSH
44870: LD_INT 1
44872: ARRAY
44873: PUSH
44874: LD_STRING p
44876: EQUAL
44877: IFFALSE 44887
// result := true ;
44879: LD_ADDR_VAR 0 2
44883: PUSH
44884: LD_INT 1
44886: ST_TO_ADDR
// end ;
44887: LD_VAR 0 2
44891: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44892: LD_INT 0
44894: PPUSH
44895: PPUSH
44896: PPUSH
44897: PPUSH
// if pos < 1 then
44898: LD_VAR 0 2
44902: PUSH
44903: LD_INT 1
44905: LESS
44906: IFFALSE 44910
// exit ;
44908: GO 45213
// if pos = 1 then
44910: LD_VAR 0 2
44914: PUSH
44915: LD_INT 1
44917: EQUAL
44918: IFFALSE 44951
// result := Replace ( arr , pos [ 1 ] , value ) else
44920: LD_ADDR_VAR 0 4
44924: PUSH
44925: LD_VAR 0 1
44929: PPUSH
44930: LD_VAR 0 2
44934: PUSH
44935: LD_INT 1
44937: ARRAY
44938: PPUSH
44939: LD_VAR 0 3
44943: PPUSH
44944: CALL_OW 1
44948: ST_TO_ADDR
44949: GO 45213
// begin tmp := arr ;
44951: LD_ADDR_VAR 0 6
44955: PUSH
44956: LD_VAR 0 1
44960: ST_TO_ADDR
// s_arr := [ tmp ] ;
44961: LD_ADDR_VAR 0 7
44965: PUSH
44966: LD_VAR 0 6
44970: PUSH
44971: EMPTY
44972: LIST
44973: ST_TO_ADDR
// for i = 1 to pos - 1 do
44974: LD_ADDR_VAR 0 5
44978: PUSH
44979: DOUBLE
44980: LD_INT 1
44982: DEC
44983: ST_TO_ADDR
44984: LD_VAR 0 2
44988: PUSH
44989: LD_INT 1
44991: MINUS
44992: PUSH
44993: FOR_TO
44994: IFFALSE 45039
// begin tmp := tmp [ pos [ i ] ] ;
44996: LD_ADDR_VAR 0 6
45000: PUSH
45001: LD_VAR 0 6
45005: PUSH
45006: LD_VAR 0 2
45010: PUSH
45011: LD_VAR 0 5
45015: ARRAY
45016: ARRAY
45017: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45018: LD_ADDR_VAR 0 7
45022: PUSH
45023: LD_VAR 0 7
45027: PUSH
45028: LD_VAR 0 6
45032: PUSH
45033: EMPTY
45034: LIST
45035: ADD
45036: ST_TO_ADDR
// end ;
45037: GO 44993
45039: POP
45040: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45041: LD_ADDR_VAR 0 6
45045: PUSH
45046: LD_VAR 0 6
45050: PPUSH
45051: LD_VAR 0 2
45055: PUSH
45056: LD_VAR 0 2
45060: ARRAY
45061: PPUSH
45062: LD_VAR 0 3
45066: PPUSH
45067: CALL_OW 1
45071: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45072: LD_ADDR_VAR 0 7
45076: PUSH
45077: LD_VAR 0 7
45081: PPUSH
45082: LD_VAR 0 7
45086: PPUSH
45087: LD_VAR 0 6
45091: PPUSH
45092: CALL_OW 1
45096: ST_TO_ADDR
// for i = s_arr downto 2 do
45097: LD_ADDR_VAR 0 5
45101: PUSH
45102: DOUBLE
45103: LD_VAR 0 7
45107: INC
45108: ST_TO_ADDR
45109: LD_INT 2
45111: PUSH
45112: FOR_DOWNTO
45113: IFFALSE 45197
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45115: LD_ADDR_VAR 0 6
45119: PUSH
45120: LD_VAR 0 7
45124: PUSH
45125: LD_VAR 0 5
45129: PUSH
45130: LD_INT 1
45132: MINUS
45133: ARRAY
45134: PPUSH
45135: LD_VAR 0 2
45139: PUSH
45140: LD_VAR 0 5
45144: PUSH
45145: LD_INT 1
45147: MINUS
45148: ARRAY
45149: PPUSH
45150: LD_VAR 0 7
45154: PUSH
45155: LD_VAR 0 5
45159: ARRAY
45160: PPUSH
45161: CALL_OW 1
45165: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45166: LD_ADDR_VAR 0 7
45170: PUSH
45171: LD_VAR 0 7
45175: PPUSH
45176: LD_VAR 0 5
45180: PUSH
45181: LD_INT 1
45183: MINUS
45184: PPUSH
45185: LD_VAR 0 6
45189: PPUSH
45190: CALL_OW 1
45194: ST_TO_ADDR
// end ;
45195: GO 45112
45197: POP
45198: POP
// result := s_arr [ 1 ] ;
45199: LD_ADDR_VAR 0 4
45203: PUSH
45204: LD_VAR 0 7
45208: PUSH
45209: LD_INT 1
45211: ARRAY
45212: ST_TO_ADDR
// end ; end ;
45213: LD_VAR 0 4
45217: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45218: LD_INT 0
45220: PPUSH
45221: PPUSH
// if not list then
45222: LD_VAR 0 1
45226: NOT
45227: IFFALSE 45231
// exit ;
45229: GO 45322
// i := list [ pos1 ] ;
45231: LD_ADDR_VAR 0 5
45235: PUSH
45236: LD_VAR 0 1
45240: PUSH
45241: LD_VAR 0 2
45245: ARRAY
45246: ST_TO_ADDR
// if not i then
45247: LD_VAR 0 5
45251: NOT
45252: IFFALSE 45256
// exit ;
45254: GO 45322
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45256: LD_ADDR_VAR 0 1
45260: PUSH
45261: LD_VAR 0 1
45265: PPUSH
45266: LD_VAR 0 2
45270: PPUSH
45271: LD_VAR 0 1
45275: PUSH
45276: LD_VAR 0 3
45280: ARRAY
45281: PPUSH
45282: CALL_OW 1
45286: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45287: LD_ADDR_VAR 0 1
45291: PUSH
45292: LD_VAR 0 1
45296: PPUSH
45297: LD_VAR 0 3
45301: PPUSH
45302: LD_VAR 0 5
45306: PPUSH
45307: CALL_OW 1
45311: ST_TO_ADDR
// result := list ;
45312: LD_ADDR_VAR 0 4
45316: PUSH
45317: LD_VAR 0 1
45321: ST_TO_ADDR
// end ;
45322: LD_VAR 0 4
45326: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45327: LD_INT 0
45329: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45330: LD_ADDR_VAR 0 5
45334: PUSH
45335: LD_VAR 0 1
45339: PPUSH
45340: CALL_OW 250
45344: PPUSH
45345: LD_VAR 0 1
45349: PPUSH
45350: CALL_OW 251
45354: PPUSH
45355: LD_VAR 0 2
45359: PPUSH
45360: LD_VAR 0 3
45364: PPUSH
45365: LD_VAR 0 4
45369: PPUSH
45370: CALL 45380 0 5
45374: ST_TO_ADDR
// end ;
45375: LD_VAR 0 5
45379: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45380: LD_INT 0
45382: PPUSH
45383: PPUSH
45384: PPUSH
45385: PPUSH
// if not list then
45386: LD_VAR 0 3
45390: NOT
45391: IFFALSE 45395
// exit ;
45393: GO 45783
// result := [ ] ;
45395: LD_ADDR_VAR 0 6
45399: PUSH
45400: EMPTY
45401: ST_TO_ADDR
// for i in list do
45402: LD_ADDR_VAR 0 7
45406: PUSH
45407: LD_VAR 0 3
45411: PUSH
45412: FOR_IN
45413: IFFALSE 45615
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45415: LD_ADDR_VAR 0 9
45419: PUSH
45420: LD_VAR 0 7
45424: PPUSH
45425: LD_VAR 0 1
45429: PPUSH
45430: LD_VAR 0 2
45434: PPUSH
45435: CALL_OW 297
45439: ST_TO_ADDR
// if not result then
45440: LD_VAR 0 6
45444: NOT
45445: IFFALSE 45471
// result := [ [ i , tmp ] ] else
45447: LD_ADDR_VAR 0 6
45451: PUSH
45452: LD_VAR 0 7
45456: PUSH
45457: LD_VAR 0 9
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: EMPTY
45467: LIST
45468: ST_TO_ADDR
45469: GO 45613
// begin if result [ result ] [ 2 ] < tmp then
45471: LD_VAR 0 6
45475: PUSH
45476: LD_VAR 0 6
45480: ARRAY
45481: PUSH
45482: LD_INT 2
45484: ARRAY
45485: PUSH
45486: LD_VAR 0 9
45490: LESS
45491: IFFALSE 45533
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45493: LD_ADDR_VAR 0 6
45497: PUSH
45498: LD_VAR 0 6
45502: PPUSH
45503: LD_VAR 0 6
45507: PUSH
45508: LD_INT 1
45510: PLUS
45511: PPUSH
45512: LD_VAR 0 7
45516: PUSH
45517: LD_VAR 0 9
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PPUSH
45526: CALL_OW 2
45530: ST_TO_ADDR
45531: GO 45613
// for j = 1 to result do
45533: LD_ADDR_VAR 0 8
45537: PUSH
45538: DOUBLE
45539: LD_INT 1
45541: DEC
45542: ST_TO_ADDR
45543: LD_VAR 0 6
45547: PUSH
45548: FOR_TO
45549: IFFALSE 45611
// begin if tmp < result [ j ] [ 2 ] then
45551: LD_VAR 0 9
45555: PUSH
45556: LD_VAR 0 6
45560: PUSH
45561: LD_VAR 0 8
45565: ARRAY
45566: PUSH
45567: LD_INT 2
45569: ARRAY
45570: LESS
45571: IFFALSE 45609
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45573: LD_ADDR_VAR 0 6
45577: PUSH
45578: LD_VAR 0 6
45582: PPUSH
45583: LD_VAR 0 8
45587: PPUSH
45588: LD_VAR 0 7
45592: PUSH
45593: LD_VAR 0 9
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PPUSH
45602: CALL_OW 2
45606: ST_TO_ADDR
// break ;
45607: GO 45611
// end ; end ;
45609: GO 45548
45611: POP
45612: POP
// end ; end ;
45613: GO 45412
45615: POP
45616: POP
// if result and not asc then
45617: LD_VAR 0 6
45621: PUSH
45622: LD_VAR 0 4
45626: NOT
45627: AND
45628: IFFALSE 45703
// begin tmp := result ;
45630: LD_ADDR_VAR 0 9
45634: PUSH
45635: LD_VAR 0 6
45639: ST_TO_ADDR
// for i = tmp downto 1 do
45640: LD_ADDR_VAR 0 7
45644: PUSH
45645: DOUBLE
45646: LD_VAR 0 9
45650: INC
45651: ST_TO_ADDR
45652: LD_INT 1
45654: PUSH
45655: FOR_DOWNTO
45656: IFFALSE 45701
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45658: LD_ADDR_VAR 0 6
45662: PUSH
45663: LD_VAR 0 6
45667: PPUSH
45668: LD_VAR 0 9
45672: PUSH
45673: LD_VAR 0 7
45677: MINUS
45678: PUSH
45679: LD_INT 1
45681: PLUS
45682: PPUSH
45683: LD_VAR 0 9
45687: PUSH
45688: LD_VAR 0 7
45692: ARRAY
45693: PPUSH
45694: CALL_OW 1
45698: ST_TO_ADDR
45699: GO 45655
45701: POP
45702: POP
// end ; tmp := [ ] ;
45703: LD_ADDR_VAR 0 9
45707: PUSH
45708: EMPTY
45709: ST_TO_ADDR
// if mode then
45710: LD_VAR 0 5
45714: IFFALSE 45783
// begin for i = 1 to result do
45716: LD_ADDR_VAR 0 7
45720: PUSH
45721: DOUBLE
45722: LD_INT 1
45724: DEC
45725: ST_TO_ADDR
45726: LD_VAR 0 6
45730: PUSH
45731: FOR_TO
45732: IFFALSE 45771
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45734: LD_ADDR_VAR 0 9
45738: PUSH
45739: LD_VAR 0 9
45743: PPUSH
45744: LD_VAR 0 7
45748: PPUSH
45749: LD_VAR 0 6
45753: PUSH
45754: LD_VAR 0 7
45758: ARRAY
45759: PUSH
45760: LD_INT 1
45762: ARRAY
45763: PPUSH
45764: CALL_OW 1
45768: ST_TO_ADDR
45769: GO 45731
45771: POP
45772: POP
// result := tmp ;
45773: LD_ADDR_VAR 0 6
45777: PUSH
45778: LD_VAR 0 9
45782: ST_TO_ADDR
// end ; end ;
45783: LD_VAR 0 6
45787: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45788: LD_INT 0
45790: PPUSH
45791: PPUSH
45792: PPUSH
45793: PPUSH
45794: PPUSH
45795: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45796: LD_ADDR_VAR 0 5
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: ST_TO_ADDR
// if not x or not y then
45818: LD_VAR 0 2
45822: NOT
45823: PUSH
45824: LD_VAR 0 3
45828: NOT
45829: OR
45830: IFFALSE 45834
// exit ;
45832: GO 47486
// if not range then
45834: LD_VAR 0 4
45838: NOT
45839: IFFALSE 45849
// range := 10 ;
45841: LD_ADDR_VAR 0 4
45845: PUSH
45846: LD_INT 10
45848: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45849: LD_ADDR_VAR 0 8
45853: PUSH
45854: LD_INT 81
45856: PUSH
45857: LD_VAR 0 1
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 92
45868: PUSH
45869: LD_VAR 0 2
45873: PUSH
45874: LD_VAR 0 3
45878: PUSH
45879: LD_VAR 0 4
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 3
45892: PUSH
45893: LD_INT 21
45895: PUSH
45896: LD_INT 3
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: LIST
45911: PPUSH
45912: CALL_OW 69
45916: ST_TO_ADDR
// if not tmp then
45917: LD_VAR 0 8
45921: NOT
45922: IFFALSE 45926
// exit ;
45924: GO 47486
// for i in tmp do
45926: LD_ADDR_VAR 0 6
45930: PUSH
45931: LD_VAR 0 8
45935: PUSH
45936: FOR_IN
45937: IFFALSE 47461
// begin points := [ 0 , 0 , 0 ] ;
45939: LD_ADDR_VAR 0 9
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: ST_TO_ADDR
// bpoints := 1 ;
45958: LD_ADDR_VAR 0 10
45962: PUSH
45963: LD_INT 1
45965: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45966: LD_VAR 0 6
45970: PPUSH
45971: CALL_OW 247
45975: PUSH
45976: LD_INT 1
45978: DOUBLE
45979: EQUAL
45980: IFTRUE 45984
45982: GO 46562
45984: POP
// begin if GetClass ( i ) = 1 then
45985: LD_VAR 0 6
45989: PPUSH
45990: CALL_OW 257
45994: PUSH
45995: LD_INT 1
45997: EQUAL
45998: IFFALSE 46019
// points := [ 10 , 5 , 3 ] ;
46000: LD_ADDR_VAR 0 9
46004: PUSH
46005: LD_INT 10
46007: PUSH
46008: LD_INT 5
46010: PUSH
46011: LD_INT 3
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: LIST
46018: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46019: LD_VAR 0 6
46023: PPUSH
46024: CALL_OW 257
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: LD_INT 3
46034: PUSH
46035: LD_INT 4
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: LIST
46042: IN
46043: IFFALSE 46064
// points := [ 3 , 2 , 1 ] ;
46045: LD_ADDR_VAR 0 9
46049: PUSH
46050: LD_INT 3
46052: PUSH
46053: LD_INT 2
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: LIST
46063: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46064: LD_VAR 0 6
46068: PPUSH
46069: CALL_OW 257
46073: PUSH
46074: LD_INT 5
46076: EQUAL
46077: IFFALSE 46098
// points := [ 130 , 5 , 2 ] ;
46079: LD_ADDR_VAR 0 9
46083: PUSH
46084: LD_INT 130
46086: PUSH
46087: LD_INT 5
46089: PUSH
46090: LD_INT 2
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: LIST
46097: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46098: LD_VAR 0 6
46102: PPUSH
46103: CALL_OW 257
46107: PUSH
46108: LD_INT 8
46110: EQUAL
46111: IFFALSE 46132
// points := [ 35 , 35 , 30 ] ;
46113: LD_ADDR_VAR 0 9
46117: PUSH
46118: LD_INT 35
46120: PUSH
46121: LD_INT 35
46123: PUSH
46124: LD_INT 30
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46132: LD_VAR 0 6
46136: PPUSH
46137: CALL_OW 257
46141: PUSH
46142: LD_INT 9
46144: EQUAL
46145: IFFALSE 46166
// points := [ 20 , 55 , 40 ] ;
46147: LD_ADDR_VAR 0 9
46151: PUSH
46152: LD_INT 20
46154: PUSH
46155: LD_INT 55
46157: PUSH
46158: LD_INT 40
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: LIST
46165: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46166: LD_VAR 0 6
46170: PPUSH
46171: CALL_OW 257
46175: PUSH
46176: LD_INT 12
46178: PUSH
46179: LD_INT 16
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: IN
46186: IFFALSE 46207
// points := [ 5 , 3 , 2 ] ;
46188: LD_ADDR_VAR 0 9
46192: PUSH
46193: LD_INT 5
46195: PUSH
46196: LD_INT 3
46198: PUSH
46199: LD_INT 2
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: LIST
46206: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46207: LD_VAR 0 6
46211: PPUSH
46212: CALL_OW 257
46216: PUSH
46217: LD_INT 17
46219: EQUAL
46220: IFFALSE 46241
// points := [ 100 , 50 , 75 ] ;
46222: LD_ADDR_VAR 0 9
46226: PUSH
46227: LD_INT 100
46229: PUSH
46230: LD_INT 50
46232: PUSH
46233: LD_INT 75
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46241: LD_VAR 0 6
46245: PPUSH
46246: CALL_OW 257
46250: PUSH
46251: LD_INT 15
46253: EQUAL
46254: IFFALSE 46275
// points := [ 10 , 5 , 3 ] ;
46256: LD_ADDR_VAR 0 9
46260: PUSH
46261: LD_INT 10
46263: PUSH
46264: LD_INT 5
46266: PUSH
46267: LD_INT 3
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: LIST
46274: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46275: LD_VAR 0 6
46279: PPUSH
46280: CALL_OW 257
46284: PUSH
46285: LD_INT 14
46287: EQUAL
46288: IFFALSE 46309
// points := [ 10 , 0 , 0 ] ;
46290: LD_ADDR_VAR 0 9
46294: PUSH
46295: LD_INT 10
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: LIST
46308: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46309: LD_VAR 0 6
46313: PPUSH
46314: CALL_OW 257
46318: PUSH
46319: LD_INT 11
46321: EQUAL
46322: IFFALSE 46343
// points := [ 30 , 10 , 5 ] ;
46324: LD_ADDR_VAR 0 9
46328: PUSH
46329: LD_INT 30
46331: PUSH
46332: LD_INT 10
46334: PUSH
46335: LD_INT 5
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: LIST
46342: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46343: LD_VAR 0 1
46347: PPUSH
46348: LD_INT 5
46350: PPUSH
46351: CALL_OW 321
46355: PUSH
46356: LD_INT 2
46358: EQUAL
46359: IFFALSE 46376
// bpoints := bpoints * 1.8 ;
46361: LD_ADDR_VAR 0 10
46365: PUSH
46366: LD_VAR 0 10
46370: PUSH
46371: LD_REAL  1.80000000000000E+0000
46374: MUL
46375: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46376: LD_VAR 0 6
46380: PPUSH
46381: CALL_OW 257
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: LD_INT 3
46394: PUSH
46395: LD_INT 4
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: IN
46404: PUSH
46405: LD_VAR 0 1
46409: PPUSH
46410: LD_INT 51
46412: PPUSH
46413: CALL_OW 321
46417: PUSH
46418: LD_INT 2
46420: EQUAL
46421: AND
46422: IFFALSE 46439
// bpoints := bpoints * 1.2 ;
46424: LD_ADDR_VAR 0 10
46428: PUSH
46429: LD_VAR 0 10
46433: PUSH
46434: LD_REAL  1.20000000000000E+0000
46437: MUL
46438: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46439: LD_VAR 0 6
46443: PPUSH
46444: CALL_OW 257
46448: PUSH
46449: LD_INT 5
46451: PUSH
46452: LD_INT 7
46454: PUSH
46455: LD_INT 9
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: LIST
46462: IN
46463: PUSH
46464: LD_VAR 0 1
46468: PPUSH
46469: LD_INT 52
46471: PPUSH
46472: CALL_OW 321
46476: PUSH
46477: LD_INT 2
46479: EQUAL
46480: AND
46481: IFFALSE 46498
// bpoints := bpoints * 1.5 ;
46483: LD_ADDR_VAR 0 10
46487: PUSH
46488: LD_VAR 0 10
46492: PUSH
46493: LD_REAL  1.50000000000000E+0000
46496: MUL
46497: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46498: LD_VAR 0 1
46502: PPUSH
46503: LD_INT 66
46505: PPUSH
46506: CALL_OW 321
46510: PUSH
46511: LD_INT 2
46513: EQUAL
46514: IFFALSE 46531
// bpoints := bpoints * 1.1 ;
46516: LD_ADDR_VAR 0 10
46520: PUSH
46521: LD_VAR 0 10
46525: PUSH
46526: LD_REAL  1.10000000000000E+0000
46529: MUL
46530: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46531: LD_ADDR_VAR 0 10
46535: PUSH
46536: LD_VAR 0 10
46540: PUSH
46541: LD_VAR 0 6
46545: PPUSH
46546: LD_INT 1
46548: PPUSH
46549: CALL_OW 259
46553: PUSH
46554: LD_REAL  1.15000000000000E+0000
46557: MUL
46558: MUL
46559: ST_TO_ADDR
// end ; unit_vehicle :
46560: GO 47390
46562: LD_INT 2
46564: DOUBLE
46565: EQUAL
46566: IFTRUE 46570
46568: GO 47378
46570: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46571: LD_VAR 0 6
46575: PPUSH
46576: CALL_OW 264
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: LD_INT 42
46586: PUSH
46587: LD_INT 24
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: LIST
46594: IN
46595: IFFALSE 46616
// points := [ 25 , 5 , 3 ] ;
46597: LD_ADDR_VAR 0 9
46601: PUSH
46602: LD_INT 25
46604: PUSH
46605: LD_INT 5
46607: PUSH
46608: LD_INT 3
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: LIST
46615: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46616: LD_VAR 0 6
46620: PPUSH
46621: CALL_OW 264
46625: PUSH
46626: LD_INT 4
46628: PUSH
46629: LD_INT 43
46631: PUSH
46632: LD_INT 25
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: LIST
46639: IN
46640: IFFALSE 46661
// points := [ 40 , 15 , 5 ] ;
46642: LD_ADDR_VAR 0 9
46646: PUSH
46647: LD_INT 40
46649: PUSH
46650: LD_INT 15
46652: PUSH
46653: LD_INT 5
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: LIST
46660: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46661: LD_VAR 0 6
46665: PPUSH
46666: CALL_OW 264
46670: PUSH
46671: LD_INT 3
46673: PUSH
46674: LD_INT 23
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: IN
46681: IFFALSE 46702
// points := [ 7 , 25 , 8 ] ;
46683: LD_ADDR_VAR 0 9
46687: PUSH
46688: LD_INT 7
46690: PUSH
46691: LD_INT 25
46693: PUSH
46694: LD_INT 8
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: LIST
46701: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46702: LD_VAR 0 6
46706: PPUSH
46707: CALL_OW 264
46711: PUSH
46712: LD_INT 5
46714: PUSH
46715: LD_INT 27
46717: PUSH
46718: LD_INT 44
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: LIST
46725: IN
46726: IFFALSE 46747
// points := [ 14 , 50 , 16 ] ;
46728: LD_ADDR_VAR 0 9
46732: PUSH
46733: LD_INT 14
46735: PUSH
46736: LD_INT 50
46738: PUSH
46739: LD_INT 16
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: LIST
46746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46747: LD_VAR 0 6
46751: PPUSH
46752: CALL_OW 264
46756: PUSH
46757: LD_INT 6
46759: PUSH
46760: LD_INT 46
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: IN
46767: IFFALSE 46788
// points := [ 32 , 120 , 70 ] ;
46769: LD_ADDR_VAR 0 9
46773: PUSH
46774: LD_INT 32
46776: PUSH
46777: LD_INT 120
46779: PUSH
46780: LD_INT 70
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: LIST
46787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46788: LD_VAR 0 6
46792: PPUSH
46793: CALL_OW 264
46797: PUSH
46798: LD_INT 7
46800: PUSH
46801: LD_INT 28
46803: PUSH
46804: LD_INT 45
46806: PUSH
46807: LD_EXP 57
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: IN
46818: IFFALSE 46839
// points := [ 35 , 20 , 45 ] ;
46820: LD_ADDR_VAR 0 9
46824: PUSH
46825: LD_INT 35
46827: PUSH
46828: LD_INT 20
46830: PUSH
46831: LD_INT 45
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46839: LD_VAR 0 6
46843: PPUSH
46844: CALL_OW 264
46848: PUSH
46849: LD_INT 47
46851: PUSH
46852: EMPTY
46853: LIST
46854: IN
46855: IFFALSE 46876
// points := [ 67 , 45 , 75 ] ;
46857: LD_ADDR_VAR 0 9
46861: PUSH
46862: LD_INT 67
46864: PUSH
46865: LD_INT 45
46867: PUSH
46868: LD_INT 75
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: LIST
46875: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46876: LD_VAR 0 6
46880: PPUSH
46881: CALL_OW 264
46885: PUSH
46886: LD_INT 26
46888: PUSH
46889: EMPTY
46890: LIST
46891: IN
46892: IFFALSE 46913
// points := [ 120 , 30 , 80 ] ;
46894: LD_ADDR_VAR 0 9
46898: PUSH
46899: LD_INT 120
46901: PUSH
46902: LD_INT 30
46904: PUSH
46905: LD_INT 80
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: LIST
46912: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46913: LD_VAR 0 6
46917: PPUSH
46918: CALL_OW 264
46922: PUSH
46923: LD_INT 22
46925: PUSH
46926: EMPTY
46927: LIST
46928: IN
46929: IFFALSE 46950
// points := [ 40 , 1 , 1 ] ;
46931: LD_ADDR_VAR 0 9
46935: PUSH
46936: LD_INT 40
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: LIST
46949: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46950: LD_VAR 0 6
46954: PPUSH
46955: CALL_OW 264
46959: PUSH
46960: LD_INT 29
46962: PUSH
46963: EMPTY
46964: LIST
46965: IN
46966: IFFALSE 46987
// points := [ 70 , 200 , 400 ] ;
46968: LD_ADDR_VAR 0 9
46972: PUSH
46973: LD_INT 70
46975: PUSH
46976: LD_INT 200
46978: PUSH
46979: LD_INT 400
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: LIST
46986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46987: LD_VAR 0 6
46991: PPUSH
46992: CALL_OW 264
46996: PUSH
46997: LD_INT 14
46999: PUSH
47000: LD_INT 53
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: IN
47007: IFFALSE 47028
// points := [ 40 , 10 , 20 ] ;
47009: LD_ADDR_VAR 0 9
47013: PUSH
47014: LD_INT 40
47016: PUSH
47017: LD_INT 10
47019: PUSH
47020: LD_INT 20
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: LIST
47027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47028: LD_VAR 0 6
47032: PPUSH
47033: CALL_OW 264
47037: PUSH
47038: LD_INT 9
47040: PUSH
47041: EMPTY
47042: LIST
47043: IN
47044: IFFALSE 47065
// points := [ 5 , 70 , 20 ] ;
47046: LD_ADDR_VAR 0 9
47050: PUSH
47051: LD_INT 5
47053: PUSH
47054: LD_INT 70
47056: PUSH
47057: LD_INT 20
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: LIST
47064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47065: LD_VAR 0 6
47069: PPUSH
47070: CALL_OW 264
47074: PUSH
47075: LD_INT 10
47077: PUSH
47078: EMPTY
47079: LIST
47080: IN
47081: IFFALSE 47102
// points := [ 35 , 110 , 70 ] ;
47083: LD_ADDR_VAR 0 9
47087: PUSH
47088: LD_INT 35
47090: PUSH
47091: LD_INT 110
47093: PUSH
47094: LD_INT 70
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: LIST
47101: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47102: LD_VAR 0 6
47106: PPUSH
47107: CALL_OW 265
47111: PUSH
47112: LD_INT 25
47114: EQUAL
47115: IFFALSE 47136
// points := [ 80 , 65 , 100 ] ;
47117: LD_ADDR_VAR 0 9
47121: PUSH
47122: LD_INT 80
47124: PUSH
47125: LD_INT 65
47127: PUSH
47128: LD_INT 100
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: LIST
47135: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47136: LD_VAR 0 6
47140: PPUSH
47141: CALL_OW 263
47145: PUSH
47146: LD_INT 1
47148: EQUAL
47149: IFFALSE 47184
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47151: LD_ADDR_VAR 0 10
47155: PUSH
47156: LD_VAR 0 10
47160: PUSH
47161: LD_VAR 0 6
47165: PPUSH
47166: CALL_OW 311
47170: PPUSH
47171: LD_INT 3
47173: PPUSH
47174: CALL_OW 259
47178: PUSH
47179: LD_INT 4
47181: MUL
47182: MUL
47183: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47184: LD_VAR 0 6
47188: PPUSH
47189: CALL_OW 263
47193: PUSH
47194: LD_INT 2
47196: EQUAL
47197: IFFALSE 47248
// begin j := IsControledBy ( i ) ;
47199: LD_ADDR_VAR 0 7
47203: PUSH
47204: LD_VAR 0 6
47208: PPUSH
47209: CALL_OW 312
47213: ST_TO_ADDR
// if j then
47214: LD_VAR 0 7
47218: IFFALSE 47248
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47220: LD_ADDR_VAR 0 10
47224: PUSH
47225: LD_VAR 0 10
47229: PUSH
47230: LD_VAR 0 7
47234: PPUSH
47235: LD_INT 3
47237: PPUSH
47238: CALL_OW 259
47242: PUSH
47243: LD_INT 3
47245: MUL
47246: MUL
47247: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47248: LD_VAR 0 6
47252: PPUSH
47253: CALL_OW 264
47257: PUSH
47258: LD_INT 5
47260: PUSH
47261: LD_INT 6
47263: PUSH
47264: LD_INT 46
47266: PUSH
47267: LD_INT 44
47269: PUSH
47270: LD_INT 47
47272: PUSH
47273: LD_INT 45
47275: PUSH
47276: LD_INT 28
47278: PUSH
47279: LD_INT 7
47281: PUSH
47282: LD_INT 27
47284: PUSH
47285: LD_INT 29
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: IN
47300: PUSH
47301: LD_VAR 0 1
47305: PPUSH
47306: LD_INT 52
47308: PPUSH
47309: CALL_OW 321
47313: PUSH
47314: LD_INT 2
47316: EQUAL
47317: AND
47318: IFFALSE 47335
// bpoints := bpoints * 1.2 ;
47320: LD_ADDR_VAR 0 10
47324: PUSH
47325: LD_VAR 0 10
47329: PUSH
47330: LD_REAL  1.20000000000000E+0000
47333: MUL
47334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47335: LD_VAR 0 6
47339: PPUSH
47340: CALL_OW 264
47344: PUSH
47345: LD_INT 6
47347: PUSH
47348: LD_INT 46
47350: PUSH
47351: LD_INT 47
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: LIST
47358: IN
47359: IFFALSE 47376
// bpoints := bpoints * 1.2 ;
47361: LD_ADDR_VAR 0 10
47365: PUSH
47366: LD_VAR 0 10
47370: PUSH
47371: LD_REAL  1.20000000000000E+0000
47374: MUL
47375: ST_TO_ADDR
// end ; unit_building :
47376: GO 47390
47378: LD_INT 3
47380: DOUBLE
47381: EQUAL
47382: IFTRUE 47386
47384: GO 47389
47386: POP
// ; end ;
47387: GO 47390
47389: POP
// for j = 1 to 3 do
47390: LD_ADDR_VAR 0 7
47394: PUSH
47395: DOUBLE
47396: LD_INT 1
47398: DEC
47399: ST_TO_ADDR
47400: LD_INT 3
47402: PUSH
47403: FOR_TO
47404: IFFALSE 47457
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47406: LD_ADDR_VAR 0 5
47410: PUSH
47411: LD_VAR 0 5
47415: PPUSH
47416: LD_VAR 0 7
47420: PPUSH
47421: LD_VAR 0 5
47425: PUSH
47426: LD_VAR 0 7
47430: ARRAY
47431: PUSH
47432: LD_VAR 0 9
47436: PUSH
47437: LD_VAR 0 7
47441: ARRAY
47442: PUSH
47443: LD_VAR 0 10
47447: MUL
47448: PLUS
47449: PPUSH
47450: CALL_OW 1
47454: ST_TO_ADDR
47455: GO 47403
47457: POP
47458: POP
// end ;
47459: GO 45936
47461: POP
47462: POP
// result := Replace ( result , 4 , tmp ) ;
47463: LD_ADDR_VAR 0 5
47467: PUSH
47468: LD_VAR 0 5
47472: PPUSH
47473: LD_INT 4
47475: PPUSH
47476: LD_VAR 0 8
47480: PPUSH
47481: CALL_OW 1
47485: ST_TO_ADDR
// end ;
47486: LD_VAR 0 5
47490: RET
// export function DangerAtRange ( unit , range ) ; begin
47491: LD_INT 0
47493: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47494: LD_ADDR_VAR 0 3
47498: PUSH
47499: LD_VAR 0 1
47503: PPUSH
47504: CALL_OW 255
47508: PPUSH
47509: LD_VAR 0 1
47513: PPUSH
47514: CALL_OW 250
47518: PPUSH
47519: LD_VAR 0 1
47523: PPUSH
47524: CALL_OW 251
47528: PPUSH
47529: LD_VAR 0 2
47533: PPUSH
47534: CALL 45788 0 4
47538: ST_TO_ADDR
// end ;
47539: LD_VAR 0 3
47543: RET
// export function DangerInArea ( side , area ) ; begin
47544: LD_INT 0
47546: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47547: LD_ADDR_VAR 0 3
47551: PUSH
47552: LD_VAR 0 2
47556: PPUSH
47557: LD_INT 81
47559: PUSH
47560: LD_VAR 0 1
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PPUSH
47569: CALL_OW 70
47573: ST_TO_ADDR
// end ;
47574: LD_VAR 0 3
47578: RET
// export function IsExtension ( b ) ; begin
47579: LD_INT 0
47581: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47582: LD_ADDR_VAR 0 2
47586: PUSH
47587: LD_VAR 0 1
47591: PUSH
47592: LD_INT 23
47594: PUSH
47595: LD_INT 20
47597: PUSH
47598: LD_INT 22
47600: PUSH
47601: LD_INT 17
47603: PUSH
47604: LD_INT 24
47606: PUSH
47607: LD_INT 21
47609: PUSH
47610: LD_INT 19
47612: PUSH
47613: LD_INT 16
47615: PUSH
47616: LD_INT 25
47618: PUSH
47619: LD_INT 18
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: IN
47634: ST_TO_ADDR
// end ;
47635: LD_VAR 0 2
47639: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47640: LD_INT 0
47642: PPUSH
47643: PPUSH
47644: PPUSH
// result := [ ] ;
47645: LD_ADDR_VAR 0 4
47649: PUSH
47650: EMPTY
47651: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47652: LD_ADDR_VAR 0 5
47656: PUSH
47657: LD_VAR 0 2
47661: PPUSH
47662: LD_INT 21
47664: PUSH
47665: LD_INT 3
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PPUSH
47672: CALL_OW 70
47676: ST_TO_ADDR
// if not tmp then
47677: LD_VAR 0 5
47681: NOT
47682: IFFALSE 47686
// exit ;
47684: GO 47750
// if checkLink then
47686: LD_VAR 0 3
47690: IFFALSE 47740
// begin for i in tmp do
47692: LD_ADDR_VAR 0 6
47696: PUSH
47697: LD_VAR 0 5
47701: PUSH
47702: FOR_IN
47703: IFFALSE 47738
// if GetBase ( i ) <> base then
47705: LD_VAR 0 6
47709: PPUSH
47710: CALL_OW 274
47714: PUSH
47715: LD_VAR 0 1
47719: NONEQUAL
47720: IFFALSE 47736
// ComLinkToBase ( base , i ) ;
47722: LD_VAR 0 1
47726: PPUSH
47727: LD_VAR 0 6
47731: PPUSH
47732: CALL_OW 169
47736: GO 47702
47738: POP
47739: POP
// end ; result := tmp ;
47740: LD_ADDR_VAR 0 4
47744: PUSH
47745: LD_VAR 0 5
47749: ST_TO_ADDR
// end ;
47750: LD_VAR 0 4
47754: RET
// export function ComComplete ( units , b ) ; var i ; begin
47755: LD_INT 0
47757: PPUSH
47758: PPUSH
// if not units then
47759: LD_VAR 0 1
47763: NOT
47764: IFFALSE 47768
// exit ;
47766: GO 47858
// for i in units do
47768: LD_ADDR_VAR 0 4
47772: PUSH
47773: LD_VAR 0 1
47777: PUSH
47778: FOR_IN
47779: IFFALSE 47856
// if BuildingStatus ( b ) = bs_build then
47781: LD_VAR 0 2
47785: PPUSH
47786: CALL_OW 461
47790: PUSH
47791: LD_INT 1
47793: EQUAL
47794: IFFALSE 47854
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47796: LD_VAR 0 4
47800: PPUSH
47801: LD_STRING h
47803: PUSH
47804: LD_VAR 0 2
47808: PPUSH
47809: CALL_OW 250
47813: PUSH
47814: LD_VAR 0 2
47818: PPUSH
47819: CALL_OW 251
47823: PUSH
47824: LD_VAR 0 2
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: PUSH
47847: EMPTY
47848: LIST
47849: PPUSH
47850: CALL_OW 446
47854: GO 47778
47856: POP
47857: POP
// end ;
47858: LD_VAR 0 3
47862: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47863: LD_INT 0
47865: PPUSH
47866: PPUSH
47867: PPUSH
47868: PPUSH
47869: PPUSH
47870: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47871: LD_VAR 0 1
47875: NOT
47876: PUSH
47877: LD_VAR 0 1
47881: PPUSH
47882: CALL_OW 263
47886: PUSH
47887: LD_INT 2
47889: NONEQUAL
47890: OR
47891: IFFALSE 47895
// exit ;
47893: GO 48211
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47895: LD_ADDR_VAR 0 6
47899: PUSH
47900: LD_INT 22
47902: PUSH
47903: LD_VAR 0 1
47907: PPUSH
47908: CALL_OW 255
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: LD_INT 30
47922: PUSH
47923: LD_INT 36
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 34
47932: PUSH
47933: LD_INT 31
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: LIST
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PPUSH
47949: CALL_OW 69
47953: ST_TO_ADDR
// if not tmp then
47954: LD_VAR 0 6
47958: NOT
47959: IFFALSE 47963
// exit ;
47961: GO 48211
// result := [ ] ;
47963: LD_ADDR_VAR 0 2
47967: PUSH
47968: EMPTY
47969: ST_TO_ADDR
// for i in tmp do
47970: LD_ADDR_VAR 0 3
47974: PUSH
47975: LD_VAR 0 6
47979: PUSH
47980: FOR_IN
47981: IFFALSE 48052
// begin t := UnitsInside ( i ) ;
47983: LD_ADDR_VAR 0 4
47987: PUSH
47988: LD_VAR 0 3
47992: PPUSH
47993: CALL_OW 313
47997: ST_TO_ADDR
// if t then
47998: LD_VAR 0 4
48002: IFFALSE 48050
// for j in t do
48004: LD_ADDR_VAR 0 7
48008: PUSH
48009: LD_VAR 0 4
48013: PUSH
48014: FOR_IN
48015: IFFALSE 48048
// result := Replace ( result , result + 1 , j ) ;
48017: LD_ADDR_VAR 0 2
48021: PUSH
48022: LD_VAR 0 2
48026: PPUSH
48027: LD_VAR 0 2
48031: PUSH
48032: LD_INT 1
48034: PLUS
48035: PPUSH
48036: LD_VAR 0 7
48040: PPUSH
48041: CALL_OW 1
48045: ST_TO_ADDR
48046: GO 48014
48048: POP
48049: POP
// end ;
48050: GO 47980
48052: POP
48053: POP
// if not result then
48054: LD_VAR 0 2
48058: NOT
48059: IFFALSE 48063
// exit ;
48061: GO 48211
// mech := result [ 1 ] ;
48063: LD_ADDR_VAR 0 5
48067: PUSH
48068: LD_VAR 0 2
48072: PUSH
48073: LD_INT 1
48075: ARRAY
48076: ST_TO_ADDR
// if result > 1 then
48077: LD_VAR 0 2
48081: PUSH
48082: LD_INT 1
48084: GREATER
48085: IFFALSE 48197
// begin for i = 2 to result do
48087: LD_ADDR_VAR 0 3
48091: PUSH
48092: DOUBLE
48093: LD_INT 2
48095: DEC
48096: ST_TO_ADDR
48097: LD_VAR 0 2
48101: PUSH
48102: FOR_TO
48103: IFFALSE 48195
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48105: LD_ADDR_VAR 0 4
48109: PUSH
48110: LD_VAR 0 2
48114: PUSH
48115: LD_VAR 0 3
48119: ARRAY
48120: PPUSH
48121: LD_INT 3
48123: PPUSH
48124: CALL_OW 259
48128: PUSH
48129: LD_VAR 0 2
48133: PUSH
48134: LD_VAR 0 3
48138: ARRAY
48139: PPUSH
48140: CALL_OW 432
48144: MINUS
48145: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48146: LD_VAR 0 4
48150: PUSH
48151: LD_VAR 0 5
48155: PPUSH
48156: LD_INT 3
48158: PPUSH
48159: CALL_OW 259
48163: PUSH
48164: LD_VAR 0 5
48168: PPUSH
48169: CALL_OW 432
48173: MINUS
48174: GREATEREQUAL
48175: IFFALSE 48193
// mech := result [ i ] ;
48177: LD_ADDR_VAR 0 5
48181: PUSH
48182: LD_VAR 0 2
48186: PUSH
48187: LD_VAR 0 3
48191: ARRAY
48192: ST_TO_ADDR
// end ;
48193: GO 48102
48195: POP
48196: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48197: LD_VAR 0 1
48201: PPUSH
48202: LD_VAR 0 5
48206: PPUSH
48207: CALL_OW 135
// end ;
48211: LD_VAR 0 2
48215: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48216: LD_INT 0
48218: PPUSH
48219: PPUSH
48220: PPUSH
48221: PPUSH
48222: PPUSH
48223: PPUSH
48224: PPUSH
48225: PPUSH
48226: PPUSH
48227: PPUSH
48228: PPUSH
48229: PPUSH
48230: PPUSH
// result := [ ] ;
48231: LD_ADDR_VAR 0 7
48235: PUSH
48236: EMPTY
48237: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48238: LD_VAR 0 1
48242: PPUSH
48243: CALL_OW 266
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: IN
48258: NOT
48259: IFFALSE 48263
// exit ;
48261: GO 49897
// if name then
48263: LD_VAR 0 3
48267: IFFALSE 48283
// SetBName ( base_dep , name ) ;
48269: LD_VAR 0 1
48273: PPUSH
48274: LD_VAR 0 3
48278: PPUSH
48279: CALL_OW 500
// base := GetBase ( base_dep ) ;
48283: LD_ADDR_VAR 0 15
48287: PUSH
48288: LD_VAR 0 1
48292: PPUSH
48293: CALL_OW 274
48297: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48298: LD_ADDR_VAR 0 16
48302: PUSH
48303: LD_VAR 0 1
48307: PPUSH
48308: CALL_OW 255
48312: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48313: LD_ADDR_VAR 0 17
48317: PUSH
48318: LD_VAR 0 1
48322: PPUSH
48323: CALL_OW 248
48327: ST_TO_ADDR
// if sources then
48328: LD_VAR 0 5
48332: IFFALSE 48379
// for i = 1 to 3 do
48334: LD_ADDR_VAR 0 8
48338: PUSH
48339: DOUBLE
48340: LD_INT 1
48342: DEC
48343: ST_TO_ADDR
48344: LD_INT 3
48346: PUSH
48347: FOR_TO
48348: IFFALSE 48377
// AddResourceType ( base , i , sources [ i ] ) ;
48350: LD_VAR 0 15
48354: PPUSH
48355: LD_VAR 0 8
48359: PPUSH
48360: LD_VAR 0 5
48364: PUSH
48365: LD_VAR 0 8
48369: ARRAY
48370: PPUSH
48371: CALL_OW 276
48375: GO 48347
48377: POP
48378: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48379: LD_ADDR_VAR 0 18
48383: PUSH
48384: LD_VAR 0 15
48388: PPUSH
48389: LD_VAR 0 2
48393: PPUSH
48394: LD_INT 1
48396: PPUSH
48397: CALL 47640 0 3
48401: ST_TO_ADDR
// InitHc ;
48402: CALL_OW 19
// InitUc ;
48406: CALL_OW 18
// uc_side := side ;
48410: LD_ADDR_OWVAR 20
48414: PUSH
48415: LD_VAR 0 16
48419: ST_TO_ADDR
// uc_nation := nation ;
48420: LD_ADDR_OWVAR 21
48424: PUSH
48425: LD_VAR 0 17
48429: ST_TO_ADDR
// if buildings then
48430: LD_VAR 0 18
48434: IFFALSE 49756
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48436: LD_ADDR_VAR 0 19
48440: PUSH
48441: LD_VAR 0 18
48445: PPUSH
48446: LD_INT 2
48448: PUSH
48449: LD_INT 30
48451: PUSH
48452: LD_INT 29
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 30
48461: PUSH
48462: LD_INT 30
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: LIST
48473: PPUSH
48474: CALL_OW 72
48478: ST_TO_ADDR
// if tmp then
48479: LD_VAR 0 19
48483: IFFALSE 48531
// for i in tmp do
48485: LD_ADDR_VAR 0 8
48489: PUSH
48490: LD_VAR 0 19
48494: PUSH
48495: FOR_IN
48496: IFFALSE 48529
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48498: LD_VAR 0 8
48502: PPUSH
48503: CALL_OW 250
48507: PPUSH
48508: LD_VAR 0 8
48512: PPUSH
48513: CALL_OW 251
48517: PPUSH
48518: LD_VAR 0 16
48522: PPUSH
48523: CALL_OW 441
48527: GO 48495
48529: POP
48530: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48531: LD_VAR 0 18
48535: PPUSH
48536: LD_INT 2
48538: PUSH
48539: LD_INT 30
48541: PUSH
48542: LD_INT 32
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 30
48551: PUSH
48552: LD_INT 33
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: LIST
48563: PPUSH
48564: CALL_OW 72
48568: IFFALSE 48656
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48570: LD_ADDR_VAR 0 8
48574: PUSH
48575: LD_VAR 0 18
48579: PPUSH
48580: LD_INT 2
48582: PUSH
48583: LD_INT 30
48585: PUSH
48586: LD_INT 32
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 30
48595: PUSH
48596: LD_INT 33
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: LIST
48607: PPUSH
48608: CALL_OW 72
48612: PUSH
48613: FOR_IN
48614: IFFALSE 48654
// begin if not GetBWeapon ( i ) then
48616: LD_VAR 0 8
48620: PPUSH
48621: CALL_OW 269
48625: NOT
48626: IFFALSE 48652
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48628: LD_VAR 0 8
48632: PPUSH
48633: LD_VAR 0 8
48637: PPUSH
48638: LD_VAR 0 2
48642: PPUSH
48643: CALL 49902 0 2
48647: PPUSH
48648: CALL_OW 431
// end ;
48652: GO 48613
48654: POP
48655: POP
// end ; for i = 1 to personel do
48656: LD_ADDR_VAR 0 8
48660: PUSH
48661: DOUBLE
48662: LD_INT 1
48664: DEC
48665: ST_TO_ADDR
48666: LD_VAR 0 6
48670: PUSH
48671: FOR_TO
48672: IFFALSE 49736
// begin if i > 4 then
48674: LD_VAR 0 8
48678: PUSH
48679: LD_INT 4
48681: GREATER
48682: IFFALSE 48686
// break ;
48684: GO 49736
// case i of 1 :
48686: LD_VAR 0 8
48690: PUSH
48691: LD_INT 1
48693: DOUBLE
48694: EQUAL
48695: IFTRUE 48699
48697: GO 48779
48699: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48700: LD_ADDR_VAR 0 12
48704: PUSH
48705: LD_VAR 0 18
48709: PPUSH
48710: LD_INT 22
48712: PUSH
48713: LD_VAR 0 16
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 58
48724: PUSH
48725: EMPTY
48726: LIST
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: LD_INT 30
48733: PUSH
48734: LD_INT 32
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 30
48743: PUSH
48744: LD_INT 4
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 30
48753: PUSH
48754: LD_INT 5
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: LIST
48771: PPUSH
48772: CALL_OW 72
48776: ST_TO_ADDR
48777: GO 49001
48779: LD_INT 2
48781: DOUBLE
48782: EQUAL
48783: IFTRUE 48787
48785: GO 48849
48787: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48788: LD_ADDR_VAR 0 12
48792: PUSH
48793: LD_VAR 0 18
48797: PPUSH
48798: LD_INT 22
48800: PUSH
48801: LD_VAR 0 16
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: LD_INT 30
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 30
48825: PUSH
48826: LD_INT 1
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: LIST
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PPUSH
48842: CALL_OW 72
48846: ST_TO_ADDR
48847: GO 49001
48849: LD_INT 3
48851: DOUBLE
48852: EQUAL
48853: IFTRUE 48857
48855: GO 48919
48857: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48858: LD_ADDR_VAR 0 12
48862: PUSH
48863: LD_VAR 0 18
48867: PPUSH
48868: LD_INT 22
48870: PUSH
48871: LD_VAR 0 16
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: LD_INT 30
48885: PUSH
48886: LD_INT 2
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 30
48895: PUSH
48896: LD_INT 3
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: LIST
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PPUSH
48912: CALL_OW 72
48916: ST_TO_ADDR
48917: GO 49001
48919: LD_INT 4
48921: DOUBLE
48922: EQUAL
48923: IFTRUE 48927
48925: GO 49000
48927: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48928: LD_ADDR_VAR 0 12
48932: PUSH
48933: LD_VAR 0 18
48937: PPUSH
48938: LD_INT 22
48940: PUSH
48941: LD_VAR 0 16
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: LD_INT 30
48955: PUSH
48956: LD_INT 6
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 30
48965: PUSH
48966: LD_INT 7
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 30
48975: PUSH
48976: LD_INT 8
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PPUSH
48993: CALL_OW 72
48997: ST_TO_ADDR
48998: GO 49001
49000: POP
// if i = 1 then
49001: LD_VAR 0 8
49005: PUSH
49006: LD_INT 1
49008: EQUAL
49009: IFFALSE 49120
// begin tmp := [ ] ;
49011: LD_ADDR_VAR 0 19
49015: PUSH
49016: EMPTY
49017: ST_TO_ADDR
// for j in f do
49018: LD_ADDR_VAR 0 9
49022: PUSH
49023: LD_VAR 0 12
49027: PUSH
49028: FOR_IN
49029: IFFALSE 49102
// if GetBType ( j ) = b_bunker then
49031: LD_VAR 0 9
49035: PPUSH
49036: CALL_OW 266
49040: PUSH
49041: LD_INT 32
49043: EQUAL
49044: IFFALSE 49071
// tmp := Insert ( tmp , 1 , j ) else
49046: LD_ADDR_VAR 0 19
49050: PUSH
49051: LD_VAR 0 19
49055: PPUSH
49056: LD_INT 1
49058: PPUSH
49059: LD_VAR 0 9
49063: PPUSH
49064: CALL_OW 2
49068: ST_TO_ADDR
49069: GO 49100
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49071: LD_ADDR_VAR 0 19
49075: PUSH
49076: LD_VAR 0 19
49080: PPUSH
49081: LD_VAR 0 19
49085: PUSH
49086: LD_INT 1
49088: PLUS
49089: PPUSH
49090: LD_VAR 0 9
49094: PPUSH
49095: CALL_OW 2
49099: ST_TO_ADDR
49100: GO 49028
49102: POP
49103: POP
// if tmp then
49104: LD_VAR 0 19
49108: IFFALSE 49120
// f := tmp ;
49110: LD_ADDR_VAR 0 12
49114: PUSH
49115: LD_VAR 0 19
49119: ST_TO_ADDR
// end ; x := personel [ i ] ;
49120: LD_ADDR_VAR 0 13
49124: PUSH
49125: LD_VAR 0 6
49129: PUSH
49130: LD_VAR 0 8
49134: ARRAY
49135: ST_TO_ADDR
// if x = - 1 then
49136: LD_VAR 0 13
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: EQUAL
49145: IFFALSE 49354
// begin for j in f do
49147: LD_ADDR_VAR 0 9
49151: PUSH
49152: LD_VAR 0 12
49156: PUSH
49157: FOR_IN
49158: IFFALSE 49350
// repeat InitHc ;
49160: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49164: LD_VAR 0 9
49168: PPUSH
49169: CALL_OW 266
49173: PUSH
49174: LD_INT 5
49176: EQUAL
49177: IFFALSE 49247
// begin if UnitsInside ( j ) < 3 then
49179: LD_VAR 0 9
49183: PPUSH
49184: CALL_OW 313
49188: PUSH
49189: LD_INT 3
49191: LESS
49192: IFFALSE 49228
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49194: LD_INT 0
49196: PPUSH
49197: LD_INT 5
49199: PUSH
49200: LD_INT 8
49202: PUSH
49203: LD_INT 9
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: LIST
49210: PUSH
49211: LD_VAR 0 17
49215: ARRAY
49216: PPUSH
49217: LD_VAR 0 4
49221: PPUSH
49222: CALL_OW 380
49226: GO 49245
// PrepareHuman ( false , i , skill ) ;
49228: LD_INT 0
49230: PPUSH
49231: LD_VAR 0 8
49235: PPUSH
49236: LD_VAR 0 4
49240: PPUSH
49241: CALL_OW 380
// end else
49245: GO 49264
// PrepareHuman ( false , i , skill ) ;
49247: LD_INT 0
49249: PPUSH
49250: LD_VAR 0 8
49254: PPUSH
49255: LD_VAR 0 4
49259: PPUSH
49260: CALL_OW 380
// un := CreateHuman ;
49264: LD_ADDR_VAR 0 14
49268: PUSH
49269: CALL_OW 44
49273: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49274: LD_ADDR_VAR 0 7
49278: PUSH
49279: LD_VAR 0 7
49283: PPUSH
49284: LD_INT 1
49286: PPUSH
49287: LD_VAR 0 14
49291: PPUSH
49292: CALL_OW 2
49296: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49297: LD_VAR 0 14
49301: PPUSH
49302: LD_VAR 0 9
49306: PPUSH
49307: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49311: LD_VAR 0 9
49315: PPUSH
49316: CALL_OW 313
49320: PUSH
49321: LD_INT 6
49323: EQUAL
49324: PUSH
49325: LD_VAR 0 9
49329: PPUSH
49330: CALL_OW 266
49334: PUSH
49335: LD_INT 32
49337: PUSH
49338: LD_INT 31
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: IN
49345: OR
49346: IFFALSE 49160
49348: GO 49157
49350: POP
49351: POP
// end else
49352: GO 49734
// for j = 1 to x do
49354: LD_ADDR_VAR 0 9
49358: PUSH
49359: DOUBLE
49360: LD_INT 1
49362: DEC
49363: ST_TO_ADDR
49364: LD_VAR 0 13
49368: PUSH
49369: FOR_TO
49370: IFFALSE 49732
// begin InitHc ;
49372: CALL_OW 19
// if not f then
49376: LD_VAR 0 12
49380: NOT
49381: IFFALSE 49470
// begin PrepareHuman ( false , i , skill ) ;
49383: LD_INT 0
49385: PPUSH
49386: LD_VAR 0 8
49390: PPUSH
49391: LD_VAR 0 4
49395: PPUSH
49396: CALL_OW 380
// un := CreateHuman ;
49400: LD_ADDR_VAR 0 14
49404: PUSH
49405: CALL_OW 44
49409: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49410: LD_ADDR_VAR 0 7
49414: PUSH
49415: LD_VAR 0 7
49419: PPUSH
49420: LD_INT 1
49422: PPUSH
49423: LD_VAR 0 14
49427: PPUSH
49428: CALL_OW 2
49432: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49433: LD_VAR 0 14
49437: PPUSH
49438: LD_VAR 0 1
49442: PPUSH
49443: CALL_OW 250
49447: PPUSH
49448: LD_VAR 0 1
49452: PPUSH
49453: CALL_OW 251
49457: PPUSH
49458: LD_INT 10
49460: PPUSH
49461: LD_INT 0
49463: PPUSH
49464: CALL_OW 50
// continue ;
49468: GO 49369
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49470: LD_VAR 0 12
49474: PUSH
49475: LD_INT 1
49477: ARRAY
49478: PPUSH
49479: CALL_OW 313
49483: PUSH
49484: LD_VAR 0 12
49488: PUSH
49489: LD_INT 1
49491: ARRAY
49492: PPUSH
49493: CALL_OW 266
49497: PUSH
49498: LD_INT 32
49500: PUSH
49501: LD_INT 31
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: IN
49508: AND
49509: PUSH
49510: LD_VAR 0 12
49514: PUSH
49515: LD_INT 1
49517: ARRAY
49518: PPUSH
49519: CALL_OW 313
49523: PUSH
49524: LD_INT 6
49526: EQUAL
49527: OR
49528: IFFALSE 49548
// f := Delete ( f , 1 ) ;
49530: LD_ADDR_VAR 0 12
49534: PUSH
49535: LD_VAR 0 12
49539: PPUSH
49540: LD_INT 1
49542: PPUSH
49543: CALL_OW 3
49547: ST_TO_ADDR
// if not f then
49548: LD_VAR 0 12
49552: NOT
49553: IFFALSE 49571
// begin x := x + 2 ;
49555: LD_ADDR_VAR 0 13
49559: PUSH
49560: LD_VAR 0 13
49564: PUSH
49565: LD_INT 2
49567: PLUS
49568: ST_TO_ADDR
// continue ;
49569: GO 49369
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49571: LD_VAR 0 12
49575: PUSH
49576: LD_INT 1
49578: ARRAY
49579: PPUSH
49580: CALL_OW 266
49584: PUSH
49585: LD_INT 5
49587: EQUAL
49588: IFFALSE 49662
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49590: LD_VAR 0 12
49594: PUSH
49595: LD_INT 1
49597: ARRAY
49598: PPUSH
49599: CALL_OW 313
49603: PUSH
49604: LD_INT 3
49606: LESS
49607: IFFALSE 49643
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49609: LD_INT 0
49611: PPUSH
49612: LD_INT 5
49614: PUSH
49615: LD_INT 8
49617: PUSH
49618: LD_INT 9
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: LIST
49625: PUSH
49626: LD_VAR 0 17
49630: ARRAY
49631: PPUSH
49632: LD_VAR 0 4
49636: PPUSH
49637: CALL_OW 380
49641: GO 49660
// PrepareHuman ( false , i , skill ) ;
49643: LD_INT 0
49645: PPUSH
49646: LD_VAR 0 8
49650: PPUSH
49651: LD_VAR 0 4
49655: PPUSH
49656: CALL_OW 380
// end else
49660: GO 49679
// PrepareHuman ( false , i , skill ) ;
49662: LD_INT 0
49664: PPUSH
49665: LD_VAR 0 8
49669: PPUSH
49670: LD_VAR 0 4
49674: PPUSH
49675: CALL_OW 380
// un := CreateHuman ;
49679: LD_ADDR_VAR 0 14
49683: PUSH
49684: CALL_OW 44
49688: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49689: LD_ADDR_VAR 0 7
49693: PUSH
49694: LD_VAR 0 7
49698: PPUSH
49699: LD_INT 1
49701: PPUSH
49702: LD_VAR 0 14
49706: PPUSH
49707: CALL_OW 2
49711: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49712: LD_VAR 0 14
49716: PPUSH
49717: LD_VAR 0 12
49721: PUSH
49722: LD_INT 1
49724: ARRAY
49725: PPUSH
49726: CALL_OW 52
// end ;
49730: GO 49369
49732: POP
49733: POP
// end ;
49734: GO 48671
49736: POP
49737: POP
// result := result ^ buildings ;
49738: LD_ADDR_VAR 0 7
49742: PUSH
49743: LD_VAR 0 7
49747: PUSH
49748: LD_VAR 0 18
49752: ADD
49753: ST_TO_ADDR
// end else
49754: GO 49897
// begin for i = 1 to personel do
49756: LD_ADDR_VAR 0 8
49760: PUSH
49761: DOUBLE
49762: LD_INT 1
49764: DEC
49765: ST_TO_ADDR
49766: LD_VAR 0 6
49770: PUSH
49771: FOR_TO
49772: IFFALSE 49895
// begin if i > 4 then
49774: LD_VAR 0 8
49778: PUSH
49779: LD_INT 4
49781: GREATER
49782: IFFALSE 49786
// break ;
49784: GO 49895
// x := personel [ i ] ;
49786: LD_ADDR_VAR 0 13
49790: PUSH
49791: LD_VAR 0 6
49795: PUSH
49796: LD_VAR 0 8
49800: ARRAY
49801: ST_TO_ADDR
// if x = - 1 then
49802: LD_VAR 0 13
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: EQUAL
49811: IFFALSE 49815
// continue ;
49813: GO 49771
// PrepareHuman ( false , i , skill ) ;
49815: LD_INT 0
49817: PPUSH
49818: LD_VAR 0 8
49822: PPUSH
49823: LD_VAR 0 4
49827: PPUSH
49828: CALL_OW 380
// un := CreateHuman ;
49832: LD_ADDR_VAR 0 14
49836: PUSH
49837: CALL_OW 44
49841: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49842: LD_VAR 0 14
49846: PPUSH
49847: LD_VAR 0 1
49851: PPUSH
49852: CALL_OW 250
49856: PPUSH
49857: LD_VAR 0 1
49861: PPUSH
49862: CALL_OW 251
49866: PPUSH
49867: LD_INT 10
49869: PPUSH
49870: LD_INT 0
49872: PPUSH
49873: CALL_OW 50
// result := result ^ un ;
49877: LD_ADDR_VAR 0 7
49881: PUSH
49882: LD_VAR 0 7
49886: PUSH
49887: LD_VAR 0 14
49891: ADD
49892: ST_TO_ADDR
// end ;
49893: GO 49771
49895: POP
49896: POP
// end ; end ;
49897: LD_VAR 0 7
49901: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49902: LD_INT 0
49904: PPUSH
49905: PPUSH
49906: PPUSH
49907: PPUSH
49908: PPUSH
49909: PPUSH
49910: PPUSH
49911: PPUSH
49912: PPUSH
49913: PPUSH
49914: PPUSH
49915: PPUSH
49916: PPUSH
49917: PPUSH
49918: PPUSH
49919: PPUSH
// result := false ;
49920: LD_ADDR_VAR 0 3
49924: PUSH
49925: LD_INT 0
49927: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49928: LD_VAR 0 1
49932: NOT
49933: PUSH
49934: LD_VAR 0 1
49938: PPUSH
49939: CALL_OW 266
49943: PUSH
49944: LD_INT 32
49946: PUSH
49947: LD_INT 33
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: IN
49954: NOT
49955: OR
49956: IFFALSE 49960
// exit ;
49958: GO 51069
// nat := GetNation ( tower ) ;
49960: LD_ADDR_VAR 0 12
49964: PUSH
49965: LD_VAR 0 1
49969: PPUSH
49970: CALL_OW 248
49974: ST_TO_ADDR
// side := GetSide ( tower ) ;
49975: LD_ADDR_VAR 0 16
49979: PUSH
49980: LD_VAR 0 1
49984: PPUSH
49985: CALL_OW 255
49989: ST_TO_ADDR
// x := GetX ( tower ) ;
49990: LD_ADDR_VAR 0 10
49994: PUSH
49995: LD_VAR 0 1
49999: PPUSH
50000: CALL_OW 250
50004: ST_TO_ADDR
// y := GetY ( tower ) ;
50005: LD_ADDR_VAR 0 11
50009: PUSH
50010: LD_VAR 0 1
50014: PPUSH
50015: CALL_OW 251
50019: ST_TO_ADDR
// if not x or not y then
50020: LD_VAR 0 10
50024: NOT
50025: PUSH
50026: LD_VAR 0 11
50030: NOT
50031: OR
50032: IFFALSE 50036
// exit ;
50034: GO 51069
// weapon := 0 ;
50036: LD_ADDR_VAR 0 18
50040: PUSH
50041: LD_INT 0
50043: ST_TO_ADDR
// fac_list := [ ] ;
50044: LD_ADDR_VAR 0 17
50048: PUSH
50049: EMPTY
50050: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50051: LD_ADDR_VAR 0 6
50055: PUSH
50056: LD_VAR 0 1
50060: PPUSH
50061: CALL_OW 274
50065: PPUSH
50066: LD_VAR 0 2
50070: PPUSH
50071: LD_INT 0
50073: PPUSH
50074: CALL 47640 0 3
50078: PPUSH
50079: LD_INT 30
50081: PUSH
50082: LD_INT 3
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PPUSH
50089: CALL_OW 72
50093: ST_TO_ADDR
// if not factories then
50094: LD_VAR 0 6
50098: NOT
50099: IFFALSE 50103
// exit ;
50101: GO 51069
// for i in factories do
50103: LD_ADDR_VAR 0 8
50107: PUSH
50108: LD_VAR 0 6
50112: PUSH
50113: FOR_IN
50114: IFFALSE 50139
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50116: LD_ADDR_VAR 0 17
50120: PUSH
50121: LD_VAR 0 17
50125: PUSH
50126: LD_VAR 0 8
50130: PPUSH
50131: CALL_OW 478
50135: UNION
50136: ST_TO_ADDR
50137: GO 50113
50139: POP
50140: POP
// if not fac_list then
50141: LD_VAR 0 17
50145: NOT
50146: IFFALSE 50150
// exit ;
50148: GO 51069
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50150: LD_ADDR_VAR 0 5
50154: PUSH
50155: LD_INT 4
50157: PUSH
50158: LD_INT 5
50160: PUSH
50161: LD_INT 9
50163: PUSH
50164: LD_INT 10
50166: PUSH
50167: LD_INT 6
50169: PUSH
50170: LD_INT 7
50172: PUSH
50173: LD_INT 11
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 27
50187: PUSH
50188: LD_INT 28
50190: PUSH
50191: LD_INT 26
50193: PUSH
50194: LD_INT 30
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 43
50205: PUSH
50206: LD_INT 44
50208: PUSH
50209: LD_INT 46
50211: PUSH
50212: LD_INT 45
50214: PUSH
50215: LD_INT 47
50217: PUSH
50218: LD_INT 49
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: LIST
50233: PUSH
50234: LD_VAR 0 12
50238: ARRAY
50239: ST_TO_ADDR
// list := list isect fac_list ;
50240: LD_ADDR_VAR 0 5
50244: PUSH
50245: LD_VAR 0 5
50249: PUSH
50250: LD_VAR 0 17
50254: ISECT
50255: ST_TO_ADDR
// if not list then
50256: LD_VAR 0 5
50260: NOT
50261: IFFALSE 50265
// exit ;
50263: GO 51069
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50265: LD_VAR 0 12
50269: PUSH
50270: LD_INT 3
50272: EQUAL
50273: PUSH
50274: LD_INT 49
50276: PUSH
50277: LD_VAR 0 5
50281: IN
50282: AND
50283: PUSH
50284: LD_INT 31
50286: PPUSH
50287: LD_VAR 0 16
50291: PPUSH
50292: CALL_OW 321
50296: PUSH
50297: LD_INT 2
50299: EQUAL
50300: AND
50301: IFFALSE 50361
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50303: LD_INT 22
50305: PUSH
50306: LD_VAR 0 16
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 35
50317: PUSH
50318: LD_INT 49
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 91
50327: PUSH
50328: LD_VAR 0 1
50332: PUSH
50333: LD_INT 10
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: LIST
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: LIST
50345: PPUSH
50346: CALL_OW 69
50350: NOT
50351: IFFALSE 50361
// weapon := ru_time_lapser ;
50353: LD_ADDR_VAR 0 18
50357: PUSH
50358: LD_INT 49
50360: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50361: LD_VAR 0 12
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: IN
50376: PUSH
50377: LD_INT 11
50379: PUSH
50380: LD_VAR 0 5
50384: IN
50385: PUSH
50386: LD_INT 30
50388: PUSH
50389: LD_VAR 0 5
50393: IN
50394: OR
50395: AND
50396: PUSH
50397: LD_INT 6
50399: PPUSH
50400: LD_VAR 0 16
50404: PPUSH
50405: CALL_OW 321
50409: PUSH
50410: LD_INT 2
50412: EQUAL
50413: AND
50414: IFFALSE 50579
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50416: LD_INT 22
50418: PUSH
50419: LD_VAR 0 16
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: LD_INT 35
50433: PUSH
50434: LD_INT 11
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 35
50443: PUSH
50444: LD_INT 30
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 91
50458: PUSH
50459: LD_VAR 0 1
50463: PUSH
50464: LD_INT 18
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: LIST
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: LIST
50476: PPUSH
50477: CALL_OW 69
50481: NOT
50482: PUSH
50483: LD_INT 22
50485: PUSH
50486: LD_VAR 0 16
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: PUSH
50498: LD_INT 30
50500: PUSH
50501: LD_INT 32
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 30
50510: PUSH
50511: LD_INT 33
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 91
50525: PUSH
50526: LD_VAR 0 1
50530: PUSH
50531: LD_INT 12
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: LIST
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: LIST
50543: PUSH
50544: EMPTY
50545: LIST
50546: PPUSH
50547: CALL_OW 69
50551: PUSH
50552: LD_INT 2
50554: GREATER
50555: AND
50556: IFFALSE 50579
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50558: LD_ADDR_VAR 0 18
50562: PUSH
50563: LD_INT 11
50565: PUSH
50566: LD_INT 30
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_VAR 0 12
50577: ARRAY
50578: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50579: LD_VAR 0 18
50583: NOT
50584: PUSH
50585: LD_INT 40
50587: PPUSH
50588: LD_VAR 0 16
50592: PPUSH
50593: CALL_OW 321
50597: PUSH
50598: LD_INT 2
50600: EQUAL
50601: AND
50602: PUSH
50603: LD_INT 7
50605: PUSH
50606: LD_VAR 0 5
50610: IN
50611: PUSH
50612: LD_INT 28
50614: PUSH
50615: LD_VAR 0 5
50619: IN
50620: OR
50621: PUSH
50622: LD_INT 45
50624: PUSH
50625: LD_VAR 0 5
50629: IN
50630: OR
50631: AND
50632: IFFALSE 50886
// begin hex := GetHexInfo ( x , y ) ;
50634: LD_ADDR_VAR 0 4
50638: PUSH
50639: LD_VAR 0 10
50643: PPUSH
50644: LD_VAR 0 11
50648: PPUSH
50649: CALL_OW 546
50653: ST_TO_ADDR
// if hex [ 1 ] then
50654: LD_VAR 0 4
50658: PUSH
50659: LD_INT 1
50661: ARRAY
50662: IFFALSE 50666
// exit ;
50664: GO 51069
// height := hex [ 2 ] ;
50666: LD_ADDR_VAR 0 15
50670: PUSH
50671: LD_VAR 0 4
50675: PUSH
50676: LD_INT 2
50678: ARRAY
50679: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50680: LD_ADDR_VAR 0 14
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: LD_INT 2
50690: PUSH
50691: LD_INT 3
50693: PUSH
50694: LD_INT 5
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: ST_TO_ADDR
// for i in tmp do
50703: LD_ADDR_VAR 0 8
50707: PUSH
50708: LD_VAR 0 14
50712: PUSH
50713: FOR_IN
50714: IFFALSE 50884
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50716: LD_ADDR_VAR 0 9
50720: PUSH
50721: LD_VAR 0 10
50725: PPUSH
50726: LD_VAR 0 8
50730: PPUSH
50731: LD_INT 5
50733: PPUSH
50734: CALL_OW 272
50738: PUSH
50739: LD_VAR 0 11
50743: PPUSH
50744: LD_VAR 0 8
50748: PPUSH
50749: LD_INT 5
50751: PPUSH
50752: CALL_OW 273
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50761: LD_VAR 0 9
50765: PUSH
50766: LD_INT 1
50768: ARRAY
50769: PPUSH
50770: LD_VAR 0 9
50774: PUSH
50775: LD_INT 2
50777: ARRAY
50778: PPUSH
50779: CALL_OW 488
50783: IFFALSE 50882
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50785: LD_ADDR_VAR 0 4
50789: PUSH
50790: LD_VAR 0 9
50794: PUSH
50795: LD_INT 1
50797: ARRAY
50798: PPUSH
50799: LD_VAR 0 9
50803: PUSH
50804: LD_INT 2
50806: ARRAY
50807: PPUSH
50808: CALL_OW 546
50812: ST_TO_ADDR
// if hex [ 1 ] then
50813: LD_VAR 0 4
50817: PUSH
50818: LD_INT 1
50820: ARRAY
50821: IFFALSE 50825
// continue ;
50823: GO 50713
// h := hex [ 2 ] ;
50825: LD_ADDR_VAR 0 13
50829: PUSH
50830: LD_VAR 0 4
50834: PUSH
50835: LD_INT 2
50837: ARRAY
50838: ST_TO_ADDR
// if h + 7 < height then
50839: LD_VAR 0 13
50843: PUSH
50844: LD_INT 7
50846: PLUS
50847: PUSH
50848: LD_VAR 0 15
50852: LESS
50853: IFFALSE 50882
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50855: LD_ADDR_VAR 0 18
50859: PUSH
50860: LD_INT 7
50862: PUSH
50863: LD_INT 28
50865: PUSH
50866: LD_INT 45
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: LIST
50873: PUSH
50874: LD_VAR 0 12
50878: ARRAY
50879: ST_TO_ADDR
// break ;
50880: GO 50884
// end ; end ; end ;
50882: GO 50713
50884: POP
50885: POP
// end ; if not weapon then
50886: LD_VAR 0 18
50890: NOT
50891: IFFALSE 50951
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50893: LD_ADDR_VAR 0 5
50897: PUSH
50898: LD_VAR 0 5
50902: PUSH
50903: LD_INT 11
50905: PUSH
50906: LD_INT 30
50908: PUSH
50909: LD_INT 49
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: LIST
50916: DIFF
50917: ST_TO_ADDR
// if not list then
50918: LD_VAR 0 5
50922: NOT
50923: IFFALSE 50927
// exit ;
50925: GO 51069
// weapon := list [ rand ( 1 , list ) ] ;
50927: LD_ADDR_VAR 0 18
50931: PUSH
50932: LD_VAR 0 5
50936: PUSH
50937: LD_INT 1
50939: PPUSH
50940: LD_VAR 0 5
50944: PPUSH
50945: CALL_OW 12
50949: ARRAY
50950: ST_TO_ADDR
// end ; if weapon then
50951: LD_VAR 0 18
50955: IFFALSE 51069
// begin tmp := CostOfWeapon ( weapon ) ;
50957: LD_ADDR_VAR 0 14
50961: PUSH
50962: LD_VAR 0 18
50966: PPUSH
50967: CALL_OW 451
50971: ST_TO_ADDR
// j := GetBase ( tower ) ;
50972: LD_ADDR_VAR 0 9
50976: PUSH
50977: LD_VAR 0 1
50981: PPUSH
50982: CALL_OW 274
50986: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50987: LD_VAR 0 9
50991: PPUSH
50992: LD_INT 1
50994: PPUSH
50995: CALL_OW 275
50999: PUSH
51000: LD_VAR 0 14
51004: PUSH
51005: LD_INT 1
51007: ARRAY
51008: GREATEREQUAL
51009: PUSH
51010: LD_VAR 0 9
51014: PPUSH
51015: LD_INT 2
51017: PPUSH
51018: CALL_OW 275
51022: PUSH
51023: LD_VAR 0 14
51027: PUSH
51028: LD_INT 2
51030: ARRAY
51031: GREATEREQUAL
51032: AND
51033: PUSH
51034: LD_VAR 0 9
51038: PPUSH
51039: LD_INT 3
51041: PPUSH
51042: CALL_OW 275
51046: PUSH
51047: LD_VAR 0 14
51051: PUSH
51052: LD_INT 3
51054: ARRAY
51055: GREATEREQUAL
51056: AND
51057: IFFALSE 51069
// result := weapon ;
51059: LD_ADDR_VAR 0 3
51063: PUSH
51064: LD_VAR 0 18
51068: ST_TO_ADDR
// end ; end ;
51069: LD_VAR 0 3
51073: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51074: LD_INT 0
51076: PPUSH
51077: PPUSH
// result := true ;
51078: LD_ADDR_VAR 0 3
51082: PUSH
51083: LD_INT 1
51085: ST_TO_ADDR
// if array1 = array2 then
51086: LD_VAR 0 1
51090: PUSH
51091: LD_VAR 0 2
51095: EQUAL
51096: IFFALSE 51156
// begin for i = 1 to array1 do
51098: LD_ADDR_VAR 0 4
51102: PUSH
51103: DOUBLE
51104: LD_INT 1
51106: DEC
51107: ST_TO_ADDR
51108: LD_VAR 0 1
51112: PUSH
51113: FOR_TO
51114: IFFALSE 51152
// if array1 [ i ] <> array2 [ i ] then
51116: LD_VAR 0 1
51120: PUSH
51121: LD_VAR 0 4
51125: ARRAY
51126: PUSH
51127: LD_VAR 0 2
51131: PUSH
51132: LD_VAR 0 4
51136: ARRAY
51137: NONEQUAL
51138: IFFALSE 51150
// begin result := false ;
51140: LD_ADDR_VAR 0 3
51144: PUSH
51145: LD_INT 0
51147: ST_TO_ADDR
// break ;
51148: GO 51152
// end ;
51150: GO 51113
51152: POP
51153: POP
// end else
51154: GO 51164
// result := false ;
51156: LD_ADDR_VAR 0 3
51160: PUSH
51161: LD_INT 0
51163: ST_TO_ADDR
// end ;
51164: LD_VAR 0 3
51168: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51169: LD_INT 0
51171: PPUSH
51172: PPUSH
// if not array1 or not array2 then
51173: LD_VAR 0 1
51177: NOT
51178: PUSH
51179: LD_VAR 0 2
51183: NOT
51184: OR
51185: IFFALSE 51189
// exit ;
51187: GO 51253
// result := true ;
51189: LD_ADDR_VAR 0 3
51193: PUSH
51194: LD_INT 1
51196: ST_TO_ADDR
// for i = 1 to array1 do
51197: LD_ADDR_VAR 0 4
51201: PUSH
51202: DOUBLE
51203: LD_INT 1
51205: DEC
51206: ST_TO_ADDR
51207: LD_VAR 0 1
51211: PUSH
51212: FOR_TO
51213: IFFALSE 51251
// if array1 [ i ] <> array2 [ i ] then
51215: LD_VAR 0 1
51219: PUSH
51220: LD_VAR 0 4
51224: ARRAY
51225: PUSH
51226: LD_VAR 0 2
51230: PUSH
51231: LD_VAR 0 4
51235: ARRAY
51236: NONEQUAL
51237: IFFALSE 51249
// begin result := false ;
51239: LD_ADDR_VAR 0 3
51243: PUSH
51244: LD_INT 0
51246: ST_TO_ADDR
// break ;
51247: GO 51251
// end ;
51249: GO 51212
51251: POP
51252: POP
// end ;
51253: LD_VAR 0 3
51257: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51258: LD_INT 0
51260: PPUSH
51261: PPUSH
51262: PPUSH
// pom := GetBase ( fac ) ;
51263: LD_ADDR_VAR 0 5
51267: PUSH
51268: LD_VAR 0 1
51272: PPUSH
51273: CALL_OW 274
51277: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51278: LD_ADDR_VAR 0 4
51282: PUSH
51283: LD_VAR 0 2
51287: PUSH
51288: LD_INT 1
51290: ARRAY
51291: PPUSH
51292: LD_VAR 0 2
51296: PUSH
51297: LD_INT 2
51299: ARRAY
51300: PPUSH
51301: LD_VAR 0 2
51305: PUSH
51306: LD_INT 3
51308: ARRAY
51309: PPUSH
51310: LD_VAR 0 2
51314: PUSH
51315: LD_INT 4
51317: ARRAY
51318: PPUSH
51319: CALL_OW 449
51323: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51324: LD_ADDR_VAR 0 3
51328: PUSH
51329: LD_VAR 0 5
51333: PPUSH
51334: LD_INT 1
51336: PPUSH
51337: CALL_OW 275
51341: PUSH
51342: LD_VAR 0 4
51346: PUSH
51347: LD_INT 1
51349: ARRAY
51350: GREATEREQUAL
51351: PUSH
51352: LD_VAR 0 5
51356: PPUSH
51357: LD_INT 2
51359: PPUSH
51360: CALL_OW 275
51364: PUSH
51365: LD_VAR 0 4
51369: PUSH
51370: LD_INT 2
51372: ARRAY
51373: GREATEREQUAL
51374: AND
51375: PUSH
51376: LD_VAR 0 5
51380: PPUSH
51381: LD_INT 3
51383: PPUSH
51384: CALL_OW 275
51388: PUSH
51389: LD_VAR 0 4
51393: PUSH
51394: LD_INT 3
51396: ARRAY
51397: GREATEREQUAL
51398: AND
51399: ST_TO_ADDR
// end ;
51400: LD_VAR 0 3
51404: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51405: LD_INT 0
51407: PPUSH
51408: PPUSH
51409: PPUSH
51410: PPUSH
// pom := GetBase ( building ) ;
51411: LD_ADDR_VAR 0 3
51415: PUSH
51416: LD_VAR 0 1
51420: PPUSH
51421: CALL_OW 274
51425: ST_TO_ADDR
// if not pom then
51426: LD_VAR 0 3
51430: NOT
51431: IFFALSE 51435
// exit ;
51433: GO 51605
// btype := GetBType ( building ) ;
51435: LD_ADDR_VAR 0 5
51439: PUSH
51440: LD_VAR 0 1
51444: PPUSH
51445: CALL_OW 266
51449: ST_TO_ADDR
// if btype = b_armoury then
51450: LD_VAR 0 5
51454: PUSH
51455: LD_INT 4
51457: EQUAL
51458: IFFALSE 51468
// btype := b_barracks ;
51460: LD_ADDR_VAR 0 5
51464: PUSH
51465: LD_INT 5
51467: ST_TO_ADDR
// if btype = b_depot then
51468: LD_VAR 0 5
51472: PUSH
51473: LD_INT 0
51475: EQUAL
51476: IFFALSE 51486
// btype := b_warehouse ;
51478: LD_ADDR_VAR 0 5
51482: PUSH
51483: LD_INT 1
51485: ST_TO_ADDR
// if btype = b_workshop then
51486: LD_VAR 0 5
51490: PUSH
51491: LD_INT 2
51493: EQUAL
51494: IFFALSE 51504
// btype := b_factory ;
51496: LD_ADDR_VAR 0 5
51500: PUSH
51501: LD_INT 3
51503: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51504: LD_ADDR_VAR 0 4
51508: PUSH
51509: LD_VAR 0 5
51513: PPUSH
51514: LD_VAR 0 1
51518: PPUSH
51519: CALL_OW 248
51523: PPUSH
51524: CALL_OW 450
51528: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51529: LD_ADDR_VAR 0 2
51533: PUSH
51534: LD_VAR 0 3
51538: PPUSH
51539: LD_INT 1
51541: PPUSH
51542: CALL_OW 275
51546: PUSH
51547: LD_VAR 0 4
51551: PUSH
51552: LD_INT 1
51554: ARRAY
51555: GREATEREQUAL
51556: PUSH
51557: LD_VAR 0 3
51561: PPUSH
51562: LD_INT 2
51564: PPUSH
51565: CALL_OW 275
51569: PUSH
51570: LD_VAR 0 4
51574: PUSH
51575: LD_INT 2
51577: ARRAY
51578: GREATEREQUAL
51579: AND
51580: PUSH
51581: LD_VAR 0 3
51585: PPUSH
51586: LD_INT 3
51588: PPUSH
51589: CALL_OW 275
51593: PUSH
51594: LD_VAR 0 4
51598: PUSH
51599: LD_INT 3
51601: ARRAY
51602: GREATEREQUAL
51603: AND
51604: ST_TO_ADDR
// end ;
51605: LD_VAR 0 2
51609: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51610: LD_INT 0
51612: PPUSH
51613: PPUSH
51614: PPUSH
// pom := GetBase ( building ) ;
51615: LD_ADDR_VAR 0 4
51619: PUSH
51620: LD_VAR 0 1
51624: PPUSH
51625: CALL_OW 274
51629: ST_TO_ADDR
// if not pom then
51630: LD_VAR 0 4
51634: NOT
51635: IFFALSE 51639
// exit ;
51637: GO 51740
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51639: LD_ADDR_VAR 0 5
51643: PUSH
51644: LD_VAR 0 2
51648: PPUSH
51649: LD_VAR 0 1
51653: PPUSH
51654: CALL_OW 248
51658: PPUSH
51659: CALL_OW 450
51663: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51664: LD_ADDR_VAR 0 3
51668: PUSH
51669: LD_VAR 0 4
51673: PPUSH
51674: LD_INT 1
51676: PPUSH
51677: CALL_OW 275
51681: PUSH
51682: LD_VAR 0 5
51686: PUSH
51687: LD_INT 1
51689: ARRAY
51690: GREATEREQUAL
51691: PUSH
51692: LD_VAR 0 4
51696: PPUSH
51697: LD_INT 2
51699: PPUSH
51700: CALL_OW 275
51704: PUSH
51705: LD_VAR 0 5
51709: PUSH
51710: LD_INT 2
51712: ARRAY
51713: GREATEREQUAL
51714: AND
51715: PUSH
51716: LD_VAR 0 4
51720: PPUSH
51721: LD_INT 3
51723: PPUSH
51724: CALL_OW 275
51728: PUSH
51729: LD_VAR 0 5
51733: PUSH
51734: LD_INT 3
51736: ARRAY
51737: GREATEREQUAL
51738: AND
51739: ST_TO_ADDR
// end ;
51740: LD_VAR 0 3
51744: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51745: LD_INT 0
51747: PPUSH
51748: PPUSH
51749: PPUSH
51750: PPUSH
51751: PPUSH
51752: PPUSH
51753: PPUSH
51754: PPUSH
51755: PPUSH
51756: PPUSH
51757: PPUSH
// result := false ;
51758: LD_ADDR_VAR 0 8
51762: PUSH
51763: LD_INT 0
51765: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51766: LD_VAR 0 5
51770: NOT
51771: PUSH
51772: LD_VAR 0 1
51776: NOT
51777: OR
51778: PUSH
51779: LD_VAR 0 2
51783: NOT
51784: OR
51785: PUSH
51786: LD_VAR 0 3
51790: NOT
51791: OR
51792: IFFALSE 51796
// exit ;
51794: GO 52610
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51796: LD_ADDR_VAR 0 14
51800: PUSH
51801: LD_VAR 0 1
51805: PPUSH
51806: LD_VAR 0 2
51810: PPUSH
51811: LD_VAR 0 3
51815: PPUSH
51816: LD_VAR 0 4
51820: PPUSH
51821: LD_VAR 0 5
51825: PUSH
51826: LD_INT 1
51828: ARRAY
51829: PPUSH
51830: CALL_OW 248
51834: PPUSH
51835: LD_INT 0
51837: PPUSH
51838: CALL 53847 0 6
51842: ST_TO_ADDR
// if not hexes then
51843: LD_VAR 0 14
51847: NOT
51848: IFFALSE 51852
// exit ;
51850: GO 52610
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51852: LD_ADDR_VAR 0 17
51856: PUSH
51857: LD_VAR 0 5
51861: PPUSH
51862: LD_INT 22
51864: PUSH
51865: LD_VAR 0 13
51869: PPUSH
51870: CALL_OW 255
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: LD_INT 30
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 30
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: LIST
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PPUSH
51911: CALL_OW 72
51915: ST_TO_ADDR
// for i = 1 to hexes do
51916: LD_ADDR_VAR 0 9
51920: PUSH
51921: DOUBLE
51922: LD_INT 1
51924: DEC
51925: ST_TO_ADDR
51926: LD_VAR 0 14
51930: PUSH
51931: FOR_TO
51932: IFFALSE 52608
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51934: LD_ADDR_VAR 0 13
51938: PUSH
51939: LD_VAR 0 14
51943: PUSH
51944: LD_VAR 0 9
51948: ARRAY
51949: PUSH
51950: LD_INT 1
51952: ARRAY
51953: PPUSH
51954: LD_VAR 0 14
51958: PUSH
51959: LD_VAR 0 9
51963: ARRAY
51964: PUSH
51965: LD_INT 2
51967: ARRAY
51968: PPUSH
51969: CALL_OW 428
51973: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51974: LD_VAR 0 14
51978: PUSH
51979: LD_VAR 0 9
51983: ARRAY
51984: PUSH
51985: LD_INT 1
51987: ARRAY
51988: PPUSH
51989: LD_VAR 0 14
51993: PUSH
51994: LD_VAR 0 9
51998: ARRAY
51999: PUSH
52000: LD_INT 2
52002: ARRAY
52003: PPUSH
52004: CALL_OW 351
52008: PUSH
52009: LD_VAR 0 14
52013: PUSH
52014: LD_VAR 0 9
52018: ARRAY
52019: PUSH
52020: LD_INT 1
52022: ARRAY
52023: PPUSH
52024: LD_VAR 0 14
52028: PUSH
52029: LD_VAR 0 9
52033: ARRAY
52034: PUSH
52035: LD_INT 2
52037: ARRAY
52038: PPUSH
52039: CALL_OW 488
52043: NOT
52044: OR
52045: PUSH
52046: LD_VAR 0 13
52050: PPUSH
52051: CALL_OW 247
52055: PUSH
52056: LD_INT 3
52058: EQUAL
52059: OR
52060: IFFALSE 52066
// exit ;
52062: POP
52063: POP
52064: GO 52610
// if not tmp then
52066: LD_VAR 0 13
52070: NOT
52071: IFFALSE 52075
// continue ;
52073: GO 51931
// result := true ;
52075: LD_ADDR_VAR 0 8
52079: PUSH
52080: LD_INT 1
52082: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52083: LD_VAR 0 6
52087: PUSH
52088: LD_VAR 0 13
52092: PPUSH
52093: CALL_OW 247
52097: PUSH
52098: LD_INT 2
52100: EQUAL
52101: AND
52102: PUSH
52103: LD_VAR 0 13
52107: PPUSH
52108: CALL_OW 263
52112: PUSH
52113: LD_INT 1
52115: EQUAL
52116: AND
52117: IFFALSE 52281
// begin if IsDrivenBy ( tmp ) then
52119: LD_VAR 0 13
52123: PPUSH
52124: CALL_OW 311
52128: IFFALSE 52132
// continue ;
52130: GO 51931
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52132: LD_VAR 0 6
52136: PPUSH
52137: LD_INT 3
52139: PUSH
52140: LD_INT 60
52142: PUSH
52143: EMPTY
52144: LIST
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 3
52152: PUSH
52153: LD_INT 55
52155: PUSH
52156: EMPTY
52157: LIST
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PPUSH
52167: CALL_OW 72
52171: IFFALSE 52279
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52173: LD_ADDR_VAR 0 18
52177: PUSH
52178: LD_VAR 0 6
52182: PPUSH
52183: LD_INT 3
52185: PUSH
52186: LD_INT 60
52188: PUSH
52189: EMPTY
52190: LIST
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 3
52198: PUSH
52199: LD_INT 55
52201: PUSH
52202: EMPTY
52203: LIST
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PPUSH
52213: CALL_OW 72
52217: PUSH
52218: LD_INT 1
52220: ARRAY
52221: ST_TO_ADDR
// if IsInUnit ( driver ) then
52222: LD_VAR 0 18
52226: PPUSH
52227: CALL_OW 310
52231: IFFALSE 52242
// ComExit ( driver ) ;
52233: LD_VAR 0 18
52237: PPUSH
52238: CALL 77031 0 1
// AddComEnterUnit ( driver , tmp ) ;
52242: LD_VAR 0 18
52246: PPUSH
52247: LD_VAR 0 13
52251: PPUSH
52252: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52256: LD_VAR 0 18
52260: PPUSH
52261: LD_VAR 0 7
52265: PPUSH
52266: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52270: LD_VAR 0 18
52274: PPUSH
52275: CALL_OW 181
// end ; continue ;
52279: GO 51931
// end ; if not cleaners or not tmp in cleaners then
52281: LD_VAR 0 6
52285: NOT
52286: PUSH
52287: LD_VAR 0 13
52291: PUSH
52292: LD_VAR 0 6
52296: IN
52297: NOT
52298: OR
52299: IFFALSE 52606
// begin if dep then
52301: LD_VAR 0 17
52305: IFFALSE 52441
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52307: LD_ADDR_VAR 0 16
52311: PUSH
52312: LD_VAR 0 17
52316: PUSH
52317: LD_INT 1
52319: ARRAY
52320: PPUSH
52321: CALL_OW 250
52325: PPUSH
52326: LD_VAR 0 17
52330: PUSH
52331: LD_INT 1
52333: ARRAY
52334: PPUSH
52335: CALL_OW 254
52339: PPUSH
52340: LD_INT 5
52342: PPUSH
52343: CALL_OW 272
52347: PUSH
52348: LD_VAR 0 17
52352: PUSH
52353: LD_INT 1
52355: ARRAY
52356: PPUSH
52357: CALL_OW 251
52361: PPUSH
52362: LD_VAR 0 17
52366: PUSH
52367: LD_INT 1
52369: ARRAY
52370: PPUSH
52371: CALL_OW 254
52375: PPUSH
52376: LD_INT 5
52378: PPUSH
52379: CALL_OW 273
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52388: LD_VAR 0 16
52392: PUSH
52393: LD_INT 1
52395: ARRAY
52396: PPUSH
52397: LD_VAR 0 16
52401: PUSH
52402: LD_INT 2
52404: ARRAY
52405: PPUSH
52406: CALL_OW 488
52410: IFFALSE 52441
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52412: LD_VAR 0 13
52416: PPUSH
52417: LD_VAR 0 16
52421: PUSH
52422: LD_INT 1
52424: ARRAY
52425: PPUSH
52426: LD_VAR 0 16
52430: PUSH
52431: LD_INT 2
52433: ARRAY
52434: PPUSH
52435: CALL_OW 111
// continue ;
52439: GO 51931
// end ; end ; r := GetDir ( tmp ) ;
52441: LD_ADDR_VAR 0 15
52445: PUSH
52446: LD_VAR 0 13
52450: PPUSH
52451: CALL_OW 254
52455: ST_TO_ADDR
// if r = 5 then
52456: LD_VAR 0 15
52460: PUSH
52461: LD_INT 5
52463: EQUAL
52464: IFFALSE 52474
// r := 0 ;
52466: LD_ADDR_VAR 0 15
52470: PUSH
52471: LD_INT 0
52473: ST_TO_ADDR
// for j = r to 5 do
52474: LD_ADDR_VAR 0 10
52478: PUSH
52479: DOUBLE
52480: LD_VAR 0 15
52484: DEC
52485: ST_TO_ADDR
52486: LD_INT 5
52488: PUSH
52489: FOR_TO
52490: IFFALSE 52604
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52492: LD_ADDR_VAR 0 11
52496: PUSH
52497: LD_VAR 0 13
52501: PPUSH
52502: CALL_OW 250
52506: PPUSH
52507: LD_VAR 0 10
52511: PPUSH
52512: LD_INT 2
52514: PPUSH
52515: CALL_OW 272
52519: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52520: LD_ADDR_VAR 0 12
52524: PUSH
52525: LD_VAR 0 13
52529: PPUSH
52530: CALL_OW 251
52534: PPUSH
52535: LD_VAR 0 10
52539: PPUSH
52540: LD_INT 2
52542: PPUSH
52543: CALL_OW 273
52547: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52548: LD_VAR 0 11
52552: PPUSH
52553: LD_VAR 0 12
52557: PPUSH
52558: CALL_OW 488
52562: PUSH
52563: LD_VAR 0 11
52567: PPUSH
52568: LD_VAR 0 12
52572: PPUSH
52573: CALL_OW 428
52577: NOT
52578: AND
52579: IFFALSE 52602
// begin ComMoveXY ( tmp , _x , _y ) ;
52581: LD_VAR 0 13
52585: PPUSH
52586: LD_VAR 0 11
52590: PPUSH
52591: LD_VAR 0 12
52595: PPUSH
52596: CALL_OW 111
// break ;
52600: GO 52604
// end ; end ;
52602: GO 52489
52604: POP
52605: POP
// end ; end ;
52606: GO 51931
52608: POP
52609: POP
// end ;
52610: LD_VAR 0 8
52614: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52615: LD_INT 0
52617: PPUSH
// result := true ;
52618: LD_ADDR_VAR 0 3
52622: PUSH
52623: LD_INT 1
52625: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52626: LD_VAR 0 2
52630: PUSH
52631: LD_INT 24
52633: DOUBLE
52634: EQUAL
52635: IFTRUE 52645
52637: LD_INT 33
52639: DOUBLE
52640: EQUAL
52641: IFTRUE 52645
52643: GO 52670
52645: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52646: LD_ADDR_VAR 0 3
52650: PUSH
52651: LD_INT 32
52653: PPUSH
52654: LD_VAR 0 1
52658: PPUSH
52659: CALL_OW 321
52663: PUSH
52664: LD_INT 2
52666: EQUAL
52667: ST_TO_ADDR
52668: GO 52990
52670: LD_INT 20
52672: DOUBLE
52673: EQUAL
52674: IFTRUE 52678
52676: GO 52703
52678: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52679: LD_ADDR_VAR 0 3
52683: PUSH
52684: LD_INT 6
52686: PPUSH
52687: LD_VAR 0 1
52691: PPUSH
52692: CALL_OW 321
52696: PUSH
52697: LD_INT 2
52699: EQUAL
52700: ST_TO_ADDR
52701: GO 52990
52703: LD_INT 22
52705: DOUBLE
52706: EQUAL
52707: IFTRUE 52717
52709: LD_INT 36
52711: DOUBLE
52712: EQUAL
52713: IFTRUE 52717
52715: GO 52742
52717: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52718: LD_ADDR_VAR 0 3
52722: PUSH
52723: LD_INT 15
52725: PPUSH
52726: LD_VAR 0 1
52730: PPUSH
52731: CALL_OW 321
52735: PUSH
52736: LD_INT 2
52738: EQUAL
52739: ST_TO_ADDR
52740: GO 52990
52742: LD_INT 30
52744: DOUBLE
52745: EQUAL
52746: IFTRUE 52750
52748: GO 52775
52750: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52751: LD_ADDR_VAR 0 3
52755: PUSH
52756: LD_INT 20
52758: PPUSH
52759: LD_VAR 0 1
52763: PPUSH
52764: CALL_OW 321
52768: PUSH
52769: LD_INT 2
52771: EQUAL
52772: ST_TO_ADDR
52773: GO 52990
52775: LD_INT 28
52777: DOUBLE
52778: EQUAL
52779: IFTRUE 52789
52781: LD_INT 21
52783: DOUBLE
52784: EQUAL
52785: IFTRUE 52789
52787: GO 52814
52789: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52790: LD_ADDR_VAR 0 3
52794: PUSH
52795: LD_INT 21
52797: PPUSH
52798: LD_VAR 0 1
52802: PPUSH
52803: CALL_OW 321
52807: PUSH
52808: LD_INT 2
52810: EQUAL
52811: ST_TO_ADDR
52812: GO 52990
52814: LD_INT 16
52816: DOUBLE
52817: EQUAL
52818: IFTRUE 52822
52820: GO 52849
52822: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52823: LD_ADDR_VAR 0 3
52827: PUSH
52828: LD_EXP 64
52832: PPUSH
52833: LD_VAR 0 1
52837: PPUSH
52838: CALL_OW 321
52842: PUSH
52843: LD_INT 2
52845: EQUAL
52846: ST_TO_ADDR
52847: GO 52990
52849: LD_INT 19
52851: DOUBLE
52852: EQUAL
52853: IFTRUE 52863
52855: LD_INT 23
52857: DOUBLE
52858: EQUAL
52859: IFTRUE 52863
52861: GO 52890
52863: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52864: LD_ADDR_VAR 0 3
52868: PUSH
52869: LD_EXP 63
52873: PPUSH
52874: LD_VAR 0 1
52878: PPUSH
52879: CALL_OW 321
52883: PUSH
52884: LD_INT 2
52886: EQUAL
52887: ST_TO_ADDR
52888: GO 52990
52890: LD_INT 17
52892: DOUBLE
52893: EQUAL
52894: IFTRUE 52898
52896: GO 52923
52898: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52899: LD_ADDR_VAR 0 3
52903: PUSH
52904: LD_INT 39
52906: PPUSH
52907: LD_VAR 0 1
52911: PPUSH
52912: CALL_OW 321
52916: PUSH
52917: LD_INT 2
52919: EQUAL
52920: ST_TO_ADDR
52921: GO 52990
52923: LD_INT 18
52925: DOUBLE
52926: EQUAL
52927: IFTRUE 52931
52929: GO 52956
52931: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52932: LD_ADDR_VAR 0 3
52936: PUSH
52937: LD_INT 40
52939: PPUSH
52940: LD_VAR 0 1
52944: PPUSH
52945: CALL_OW 321
52949: PUSH
52950: LD_INT 2
52952: EQUAL
52953: ST_TO_ADDR
52954: GO 52990
52956: LD_INT 27
52958: DOUBLE
52959: EQUAL
52960: IFTRUE 52964
52962: GO 52989
52964: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52965: LD_ADDR_VAR 0 3
52969: PUSH
52970: LD_INT 35
52972: PPUSH
52973: LD_VAR 0 1
52977: PPUSH
52978: CALL_OW 321
52982: PUSH
52983: LD_INT 2
52985: EQUAL
52986: ST_TO_ADDR
52987: GO 52990
52989: POP
// end ;
52990: LD_VAR 0 3
52994: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52995: LD_INT 0
52997: PPUSH
52998: PPUSH
52999: PPUSH
53000: PPUSH
53001: PPUSH
53002: PPUSH
53003: PPUSH
53004: PPUSH
53005: PPUSH
53006: PPUSH
53007: PPUSH
// result := false ;
53008: LD_ADDR_VAR 0 6
53012: PUSH
53013: LD_INT 0
53015: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53016: LD_VAR 0 1
53020: NOT
53021: PUSH
53022: LD_VAR 0 1
53026: PPUSH
53027: CALL_OW 266
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: IN
53042: NOT
53043: OR
53044: PUSH
53045: LD_VAR 0 2
53049: NOT
53050: OR
53051: PUSH
53052: LD_VAR 0 5
53056: PUSH
53057: LD_INT 0
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: LD_INT 3
53068: PUSH
53069: LD_INT 4
53071: PUSH
53072: LD_INT 5
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: IN
53083: NOT
53084: OR
53085: PUSH
53086: LD_VAR 0 3
53090: PPUSH
53091: LD_VAR 0 4
53095: PPUSH
53096: CALL_OW 488
53100: NOT
53101: OR
53102: IFFALSE 53106
// exit ;
53104: GO 53842
// side := GetSide ( depot ) ;
53106: LD_ADDR_VAR 0 9
53110: PUSH
53111: LD_VAR 0 1
53115: PPUSH
53116: CALL_OW 255
53120: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53121: LD_VAR 0 9
53125: PPUSH
53126: LD_VAR 0 2
53130: PPUSH
53131: CALL 52615 0 2
53135: NOT
53136: IFFALSE 53140
// exit ;
53138: GO 53842
// pom := GetBase ( depot ) ;
53140: LD_ADDR_VAR 0 10
53144: PUSH
53145: LD_VAR 0 1
53149: PPUSH
53150: CALL_OW 274
53154: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53155: LD_ADDR_VAR 0 11
53159: PUSH
53160: LD_VAR 0 2
53164: PPUSH
53165: LD_VAR 0 1
53169: PPUSH
53170: CALL_OW 248
53174: PPUSH
53175: CALL_OW 450
53179: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53180: LD_VAR 0 10
53184: PPUSH
53185: LD_INT 1
53187: PPUSH
53188: CALL_OW 275
53192: PUSH
53193: LD_VAR 0 11
53197: PUSH
53198: LD_INT 1
53200: ARRAY
53201: GREATEREQUAL
53202: PUSH
53203: LD_VAR 0 10
53207: PPUSH
53208: LD_INT 2
53210: PPUSH
53211: CALL_OW 275
53215: PUSH
53216: LD_VAR 0 11
53220: PUSH
53221: LD_INT 2
53223: ARRAY
53224: GREATEREQUAL
53225: AND
53226: PUSH
53227: LD_VAR 0 10
53231: PPUSH
53232: LD_INT 3
53234: PPUSH
53235: CALL_OW 275
53239: PUSH
53240: LD_VAR 0 11
53244: PUSH
53245: LD_INT 3
53247: ARRAY
53248: GREATEREQUAL
53249: AND
53250: NOT
53251: IFFALSE 53255
// exit ;
53253: GO 53842
// if GetBType ( depot ) = b_depot then
53255: LD_VAR 0 1
53259: PPUSH
53260: CALL_OW 266
53264: PUSH
53265: LD_INT 0
53267: EQUAL
53268: IFFALSE 53280
// dist := 28 else
53270: LD_ADDR_VAR 0 14
53274: PUSH
53275: LD_INT 28
53277: ST_TO_ADDR
53278: GO 53288
// dist := 36 ;
53280: LD_ADDR_VAR 0 14
53284: PUSH
53285: LD_INT 36
53287: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53288: LD_VAR 0 1
53292: PPUSH
53293: LD_VAR 0 3
53297: PPUSH
53298: LD_VAR 0 4
53302: PPUSH
53303: CALL_OW 297
53307: PUSH
53308: LD_VAR 0 14
53312: GREATER
53313: IFFALSE 53317
// exit ;
53315: GO 53842
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53317: LD_ADDR_VAR 0 12
53321: PUSH
53322: LD_VAR 0 2
53326: PPUSH
53327: LD_VAR 0 3
53331: PPUSH
53332: LD_VAR 0 4
53336: PPUSH
53337: LD_VAR 0 5
53341: PPUSH
53342: LD_VAR 0 1
53346: PPUSH
53347: CALL_OW 248
53351: PPUSH
53352: LD_INT 0
53354: PPUSH
53355: CALL 53847 0 6
53359: ST_TO_ADDR
// if not hexes then
53360: LD_VAR 0 12
53364: NOT
53365: IFFALSE 53369
// exit ;
53367: GO 53842
// hex := GetHexInfo ( x , y ) ;
53369: LD_ADDR_VAR 0 15
53373: PUSH
53374: LD_VAR 0 3
53378: PPUSH
53379: LD_VAR 0 4
53383: PPUSH
53384: CALL_OW 546
53388: ST_TO_ADDR
// if hex [ 1 ] then
53389: LD_VAR 0 15
53393: PUSH
53394: LD_INT 1
53396: ARRAY
53397: IFFALSE 53401
// exit ;
53399: GO 53842
// height := hex [ 2 ] ;
53401: LD_ADDR_VAR 0 13
53405: PUSH
53406: LD_VAR 0 15
53410: PUSH
53411: LD_INT 2
53413: ARRAY
53414: ST_TO_ADDR
// for i = 1 to hexes do
53415: LD_ADDR_VAR 0 7
53419: PUSH
53420: DOUBLE
53421: LD_INT 1
53423: DEC
53424: ST_TO_ADDR
53425: LD_VAR 0 12
53429: PUSH
53430: FOR_TO
53431: IFFALSE 53761
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53433: LD_VAR 0 12
53437: PUSH
53438: LD_VAR 0 7
53442: ARRAY
53443: PUSH
53444: LD_INT 1
53446: ARRAY
53447: PPUSH
53448: LD_VAR 0 12
53452: PUSH
53453: LD_VAR 0 7
53457: ARRAY
53458: PUSH
53459: LD_INT 2
53461: ARRAY
53462: PPUSH
53463: CALL_OW 488
53467: NOT
53468: PUSH
53469: LD_VAR 0 12
53473: PUSH
53474: LD_VAR 0 7
53478: ARRAY
53479: PUSH
53480: LD_INT 1
53482: ARRAY
53483: PPUSH
53484: LD_VAR 0 12
53488: PUSH
53489: LD_VAR 0 7
53493: ARRAY
53494: PUSH
53495: LD_INT 2
53497: ARRAY
53498: PPUSH
53499: CALL_OW 428
53503: PUSH
53504: LD_INT 0
53506: GREATER
53507: OR
53508: PUSH
53509: LD_VAR 0 12
53513: PUSH
53514: LD_VAR 0 7
53518: ARRAY
53519: PUSH
53520: LD_INT 1
53522: ARRAY
53523: PPUSH
53524: LD_VAR 0 12
53528: PUSH
53529: LD_VAR 0 7
53533: ARRAY
53534: PUSH
53535: LD_INT 2
53537: ARRAY
53538: PPUSH
53539: CALL_OW 351
53543: OR
53544: IFFALSE 53550
// exit ;
53546: POP
53547: POP
53548: GO 53842
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53550: LD_ADDR_VAR 0 8
53554: PUSH
53555: LD_VAR 0 12
53559: PUSH
53560: LD_VAR 0 7
53564: ARRAY
53565: PUSH
53566: LD_INT 1
53568: ARRAY
53569: PPUSH
53570: LD_VAR 0 12
53574: PUSH
53575: LD_VAR 0 7
53579: ARRAY
53580: PUSH
53581: LD_INT 2
53583: ARRAY
53584: PPUSH
53585: CALL_OW 546
53589: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53590: LD_VAR 0 8
53594: PUSH
53595: LD_INT 1
53597: ARRAY
53598: PUSH
53599: LD_VAR 0 8
53603: PUSH
53604: LD_INT 2
53606: ARRAY
53607: PUSH
53608: LD_VAR 0 13
53612: PUSH
53613: LD_INT 2
53615: PLUS
53616: GREATER
53617: OR
53618: PUSH
53619: LD_VAR 0 8
53623: PUSH
53624: LD_INT 2
53626: ARRAY
53627: PUSH
53628: LD_VAR 0 13
53632: PUSH
53633: LD_INT 2
53635: MINUS
53636: LESS
53637: OR
53638: PUSH
53639: LD_VAR 0 8
53643: PUSH
53644: LD_INT 3
53646: ARRAY
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: LD_INT 8
53653: PUSH
53654: LD_INT 9
53656: PUSH
53657: LD_INT 10
53659: PUSH
53660: LD_INT 11
53662: PUSH
53663: LD_INT 12
53665: PUSH
53666: LD_INT 13
53668: PUSH
53669: LD_INT 16
53671: PUSH
53672: LD_INT 17
53674: PUSH
53675: LD_INT 18
53677: PUSH
53678: LD_INT 19
53680: PUSH
53681: LD_INT 20
53683: PUSH
53684: LD_INT 21
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: IN
53702: NOT
53703: OR
53704: PUSH
53705: LD_VAR 0 8
53709: PUSH
53710: LD_INT 5
53712: ARRAY
53713: NOT
53714: OR
53715: PUSH
53716: LD_VAR 0 8
53720: PUSH
53721: LD_INT 6
53723: ARRAY
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: LD_INT 7
53733: PUSH
53734: LD_INT 9
53736: PUSH
53737: LD_INT 10
53739: PUSH
53740: LD_INT 11
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: IN
53751: NOT
53752: OR
53753: IFFALSE 53759
// exit ;
53755: POP
53756: POP
53757: GO 53842
// end ;
53759: GO 53430
53761: POP
53762: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53763: LD_VAR 0 9
53767: PPUSH
53768: LD_VAR 0 3
53772: PPUSH
53773: LD_VAR 0 4
53777: PPUSH
53778: LD_INT 20
53780: PPUSH
53781: CALL 45788 0 4
53785: PUSH
53786: LD_INT 4
53788: ARRAY
53789: IFFALSE 53793
// exit ;
53791: GO 53842
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53793: LD_VAR 0 2
53797: PUSH
53798: LD_INT 29
53800: PUSH
53801: LD_INT 30
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: IN
53808: PUSH
53809: LD_VAR 0 3
53813: PPUSH
53814: LD_VAR 0 4
53818: PPUSH
53819: LD_VAR 0 9
53823: PPUSH
53824: CALL_OW 440
53828: NOT
53829: AND
53830: IFFALSE 53834
// exit ;
53832: GO 53842
// result := true ;
53834: LD_ADDR_VAR 0 6
53838: PUSH
53839: LD_INT 1
53841: ST_TO_ADDR
// end ;
53842: LD_VAR 0 6
53846: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53847: LD_INT 0
53849: PPUSH
53850: PPUSH
53851: PPUSH
53852: PPUSH
53853: PPUSH
53854: PPUSH
53855: PPUSH
53856: PPUSH
53857: PPUSH
53858: PPUSH
53859: PPUSH
53860: PPUSH
53861: PPUSH
53862: PPUSH
53863: PPUSH
53864: PPUSH
53865: PPUSH
53866: PPUSH
53867: PPUSH
53868: PPUSH
53869: PPUSH
53870: PPUSH
53871: PPUSH
53872: PPUSH
53873: PPUSH
53874: PPUSH
53875: PPUSH
53876: PPUSH
53877: PPUSH
53878: PPUSH
53879: PPUSH
53880: PPUSH
53881: PPUSH
53882: PPUSH
53883: PPUSH
53884: PPUSH
53885: PPUSH
53886: PPUSH
53887: PPUSH
53888: PPUSH
53889: PPUSH
53890: PPUSH
53891: PPUSH
53892: PPUSH
53893: PPUSH
53894: PPUSH
53895: PPUSH
53896: PPUSH
53897: PPUSH
53898: PPUSH
53899: PPUSH
53900: PPUSH
53901: PPUSH
53902: PPUSH
53903: PPUSH
53904: PPUSH
53905: PPUSH
53906: PPUSH
// result = [ ] ;
53907: LD_ADDR_VAR 0 7
53911: PUSH
53912: EMPTY
53913: ST_TO_ADDR
// temp_list = [ ] ;
53914: LD_ADDR_VAR 0 9
53918: PUSH
53919: EMPTY
53920: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53921: LD_VAR 0 4
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: LD_INT 3
53937: PUSH
53938: LD_INT 4
53940: PUSH
53941: LD_INT 5
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: IN
53952: NOT
53953: PUSH
53954: LD_VAR 0 1
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: IN
53969: PUSH
53970: LD_VAR 0 5
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: LD_INT 3
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: LIST
53988: IN
53989: NOT
53990: AND
53991: OR
53992: IFFALSE 53996
// exit ;
53994: GO 72387
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53996: LD_VAR 0 1
54000: PUSH
54001: LD_INT 6
54003: PUSH
54004: LD_INT 7
54006: PUSH
54007: LD_INT 8
54009: PUSH
54010: LD_INT 13
54012: PUSH
54013: LD_INT 12
54015: PUSH
54016: LD_INT 15
54018: PUSH
54019: LD_INT 11
54021: PUSH
54022: LD_INT 14
54024: PUSH
54025: LD_INT 10
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: IN
54039: IFFALSE 54049
// btype = b_lab ;
54041: LD_ADDR_VAR 0 1
54045: PUSH
54046: LD_INT 6
54048: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54049: LD_VAR 0 6
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: LIST
54067: IN
54068: NOT
54069: PUSH
54070: LD_VAR 0 1
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: LD_INT 3
54086: PUSH
54087: LD_INT 6
54089: PUSH
54090: LD_INT 36
54092: PUSH
54093: LD_INT 4
54095: PUSH
54096: LD_INT 5
54098: PUSH
54099: LD_INT 31
54101: PUSH
54102: LD_INT 32
54104: PUSH
54105: LD_INT 33
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: IN
54121: NOT
54122: PUSH
54123: LD_VAR 0 6
54127: PUSH
54128: LD_INT 1
54130: EQUAL
54131: AND
54132: OR
54133: PUSH
54134: LD_VAR 0 1
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: LD_INT 3
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: IN
54149: NOT
54150: PUSH
54151: LD_VAR 0 6
54155: PUSH
54156: LD_INT 2
54158: EQUAL
54159: AND
54160: OR
54161: IFFALSE 54171
// mode = 0 ;
54163: LD_ADDR_VAR 0 6
54167: PUSH
54168: LD_INT 0
54170: ST_TO_ADDR
// case mode of 0 :
54171: LD_VAR 0 6
54175: PUSH
54176: LD_INT 0
54178: DOUBLE
54179: EQUAL
54180: IFTRUE 54184
54182: GO 65637
54184: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54185: LD_ADDR_VAR 0 11
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: LD_INT 2
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: LD_INT 2
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: LD_INT 2
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: LD_INT 3
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: LD_INT 3
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54378: LD_ADDR_VAR 0 12
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: LD_INT 1
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 2
54501: NEG
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 3
54535: NEG
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 3
54546: NEG
54547: PUSH
54548: LD_INT 1
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54574: LD_ADDR_VAR 0 13
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 2
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 2
54677: PUSH
54678: LD_INT 2
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: LD_INT 2
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: NEG
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: NEG
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: LD_INT 3
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 3
54733: NEG
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 3
54745: NEG
54746: PUSH
54747: LD_INT 3
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54773: LD_ADDR_VAR 0 14
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 0
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: LD_INT 1
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: NEG
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: LD_INT 2
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: LD_INT 2
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: LD_INT 2
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 1
54919: NEG
54920: PUSH
54921: LD_INT 3
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 3
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54969: LD_ADDR_VAR 0 15
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 0
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 2
55092: NEG
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 3
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 3
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55162: LD_ADDR_VAR 0 16
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: LD_INT 1
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: LD_INT 2
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 2
55297: NEG
55298: PUSH
55299: LD_INT 2
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 3
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 3
55319: PUSH
55320: LD_INT 3
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 2
55329: PUSH
55330: LD_INT 3
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55355: LD_ADDR_VAR 0 17
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: LD_INT 2
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 2
55531: NEG
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 2
55554: NEG
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55585: LD_ADDR_VAR 0 18
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 1
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: LD_INT 2
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: LD_INT 2
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 2
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 2
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: NEG
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 2
55761: NEG
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 2
55784: NEG
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55815: LD_ADDR_VAR 0 19
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 1
55873: NEG
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: LD_INT 2
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 2
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 2
55950: PUSH
55951: LD_INT 2
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: LD_INT 2
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 0
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 2
56002: NEG
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 2
56014: NEG
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56045: LD_ADDR_VAR 0 20
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 1
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 2
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 2
56180: PUSH
56181: LD_INT 2
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 2
56221: NEG
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: NEG
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: LD_INT 2
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56275: LD_ADDR_VAR 0 21
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: NEG
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: LD_INT 2
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 2
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 2
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 2
56451: NEG
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 2
56462: NEG
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 2
56474: NEG
56475: PUSH
56476: LD_INT 2
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56505: LD_ADDR_VAR 0 22
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 0
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: LD_INT 2
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: LD_INT 1
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 2
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 1
56650: PUSH
56651: LD_INT 2
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: LD_INT 2
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 2
56681: NEG
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 2
56704: NEG
56705: PUSH
56706: LD_INT 2
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56735: LD_ADDR_VAR 0 23
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: LD_INT 2
56831: NEG
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: LD_INT 1
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: LD_INT 2
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: LD_INT 2
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 2
56922: NEG
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: LD_INT 2
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: NEG
56947: PUSH
56948: LD_INT 3
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: LD_INT 3
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 2
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57015: LD_ADDR_VAR 0 24
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 0
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: LD_INT 2
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 2
57150: PUSH
57151: LD_INT 2
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 2
57202: NEG
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: NEG
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 3
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 3
57258: PUSH
57259: LD_INT 2
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57291: LD_ADDR_VAR 0 25
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 0
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: LD_INT 1
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 2
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: NEG
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 2
57478: NEG
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 2
57490: NEG
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 3
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: LD_INT 3
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: LD_INT 3
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57565: LD_ADDR_VAR 0 26
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 0
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: NEG
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: LD_INT 2
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 2
57690: PUSH
57691: LD_INT 1
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 2
57700: PUSH
57701: LD_INT 2
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 0
57720: PUSH
57721: LD_INT 2
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 2
57741: NEG
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 2
57764: NEG
57765: PUSH
57766: LD_INT 2
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 2
57776: PUSH
57777: LD_INT 3
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: LD_INT 3
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: LD_INT 2
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 2
57807: NEG
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57841: LD_ADDR_VAR 0 27
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: PUSH
57870: LD_INT 0
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: NEG
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: LD_INT 2
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: LD_INT 2
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 2
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 2
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 2
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 2
58017: NEG
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 2
58028: NEG
58029: PUSH
58030: LD_INT 1
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 2
58040: NEG
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 3
58074: NEG
58075: PUSH
58076: LD_INT 1
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 3
58086: NEG
58087: PUSH
58088: LD_INT 2
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58121: LD_ADDR_VAR 0 28
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: LD_INT 2
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: LD_INT 2
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 2
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: LD_INT 2
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: LD_INT 2
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 2
58297: NEG
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 2
58308: NEG
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: LD_INT 2
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: LD_INT 3
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: LD_INT 3
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 3
58356: NEG
58357: PUSH
58358: LD_INT 1
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 3
58368: NEG
58369: PUSH
58370: LD_INT 2
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58403: LD_ADDR_VAR 0 29
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: LD_INT 1
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: NEG
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: NEG
58485: PUSH
58486: LD_INT 2
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: LD_INT 2
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 2
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 2
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: LD_INT 2
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 1
58558: NEG
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 2
58569: NEG
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 2
58581: NEG
58582: PUSH
58583: LD_INT 2
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 2
58593: NEG
58594: PUSH
58595: LD_INT 3
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 2
58605: PUSH
58606: LD_INT 1
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 3
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 3
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 3
58647: NEG
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58682: LD_ADDR_VAR 0 30
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: LD_INT 1
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: NEG
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 1
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: LD_INT 2
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: LD_INT 1
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 2
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 2
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: LD_INT 2
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: NEG
58838: PUSH
58839: LD_INT 1
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 2
58848: NEG
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: LD_INT 3
58875: NEG
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 3
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: LD_INT 3
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 2
58914: NEG
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 3
58925: NEG
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58960: LD_ADDR_VAR 0 31
58964: PUSH
58965: LD_INT 0
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: NEG
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: LD_INT 2
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: LD_INT 1
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 2
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 2
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 2
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 2
59125: NEG
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 2
59137: NEG
59138: PUSH
59139: LD_INT 2
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 2
59149: NEG
59150: PUSH
59151: LD_INT 3
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: LD_INT 1
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 3
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 1
59182: PUSH
59183: LD_INT 3
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 3
59203: NEG
59204: PUSH
59205: LD_INT 2
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59238: LD_ADDR_VAR 0 32
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 0
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: NEG
59308: PUSH
59309: LD_INT 1
59311: NEG
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: LD_INT 2
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 2
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 2
59363: PUSH
59364: LD_INT 2
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: PUSH
59374: LD_INT 2
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: LD_INT 2
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: NEG
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 2
59404: NEG
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 2
59415: NEG
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: NEG
59428: PUSH
59429: LD_INT 3
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: PUSH
59440: LD_INT 2
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 3
59450: PUSH
59451: LD_INT 2
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 2
59460: PUSH
59461: LD_INT 3
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: LD_INT 1
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 3
59481: NEG
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59516: LD_ADDR_VAR 0 33
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: LD_INT 2
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 2
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 2
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: LD_INT 2
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: LD_INT 2
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 2
59671: NEG
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 2
59682: NEG
59683: PUSH
59684: LD_INT 1
59686: NEG
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 2
59694: NEG
59695: PUSH
59696: LD_INT 2
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 2
59706: NEG
59707: PUSH
59708: LD_INT 3
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 3
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: LD_INT 3
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 3
59760: NEG
59761: PUSH
59762: LD_INT 2
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59795: LD_ADDR_VAR 0 34
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: NEG
59877: PUSH
59878: LD_INT 2
59880: NEG
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: LD_INT 2
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 1
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 2
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 2
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: PUSH
59931: LD_INT 2
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: LD_INT 1
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 2
59951: NEG
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 2
59962: NEG
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 2
59974: NEG
59975: PUSH
59976: LD_INT 2
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: NEG
59987: PUSH
59988: LD_INT 3
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: LD_INT 2
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 3
60009: PUSH
60010: LD_INT 2
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 2
60019: PUSH
60020: LD_INT 3
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 3
60040: NEG
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60075: LD_ADDR_VAR 0 35
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: LD_INT 0
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: LD_INT 1
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: LD_INT 1
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 2
60156: PUSH
60157: LD_INT 1
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60187: LD_ADDR_VAR 0 36
60191: PUSH
60192: LD_INT 0
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: LD_INT 1
60207: NEG
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 0
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 1
60245: NEG
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 1
60268: NEG
60269: PUSH
60270: LD_INT 2
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: LD_INT 2
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60299: LD_ADDR_VAR 0 37
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 1
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 1
60357: NEG
60358: PUSH
60359: LD_INT 0
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 1
60368: NEG
60369: PUSH
60370: LD_INT 1
60372: NEG
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 1
60380: PUSH
60381: LD_INT 1
60383: NEG
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60411: LD_ADDR_VAR 0 38
60415: PUSH
60416: LD_INT 0
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: LD_INT 0
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 1
60480: NEG
60481: PUSH
60482: LD_INT 1
60484: NEG
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 2
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 2
60502: NEG
60503: PUSH
60504: LD_INT 1
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60523: LD_ADDR_VAR 0 39
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: LD_INT 0
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: LD_INT 1
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: LD_INT 1
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 1
60604: NEG
60605: PUSH
60606: LD_INT 2
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: PUSH
60617: LD_INT 2
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60635: LD_ADDR_VAR 0 40
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: NEG
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 1
60704: NEG
60705: PUSH
60706: LD_INT 1
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60747: LD_ADDR_VAR 0 41
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: PUSH
60776: LD_INT 0
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: NEG
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 1
60816: NEG
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: LD_INT 2
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 2
60851: PUSH
60852: LD_INT 0
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 2
60861: PUSH
60862: LD_INT 1
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 2
60871: PUSH
60872: LD_INT 2
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: LD_INT 2
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: NEG
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 2
60902: NEG
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 2
60913: NEG
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 2
60925: NEG
60926: PUSH
60927: LD_INT 2
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: NEG
60938: PUSH
60939: LD_INT 3
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 2
60949: PUSH
60950: LD_INT 1
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 3
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 3
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 3
60990: PUSH
60991: LD_INT 3
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 2
61000: PUSH
61001: LD_INT 3
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 2
61010: NEG
61011: PUSH
61012: LD_INT 1
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 3
61021: NEG
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 3
61032: NEG
61033: PUSH
61034: LD_INT 1
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 3
61044: NEG
61045: PUSH
61046: LD_INT 2
61048: NEG
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 3
61056: NEG
61057: PUSH
61058: LD_INT 3
61060: NEG
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61097: LD_ADDR_VAR 0 42
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: LD_INT 1
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 1
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: PUSH
61136: LD_INT 1
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 0
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: NEG
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: NEG
61179: PUSH
61180: LD_INT 2
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: LD_INT 2
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 2
61212: PUSH
61213: LD_INT 1
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 2
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 1
61252: NEG
61253: PUSH
61254: LD_INT 1
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 2
61263: NEG
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 2
61275: NEG
61276: PUSH
61277: LD_INT 2
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 2
61287: NEG
61288: PUSH
61289: LD_INT 3
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 1
61299: NEG
61300: PUSH
61301: LD_INT 3
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: LD_INT 3
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: LD_INT 2
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 3
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 3
61343: PUSH
61344: LD_INT 3
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 2
61353: PUSH
61354: LD_INT 3
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: LD_INT 3
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: LD_INT 3
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 1
61383: NEG
61384: PUSH
61385: LD_INT 2
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 3
61394: NEG
61395: PUSH
61396: LD_INT 2
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 3
61406: NEG
61407: PUSH
61408: LD_INT 3
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61447: LD_ADDR_VAR 0 43
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: LD_INT 1
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: LD_INT 1
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 1
61505: NEG
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 1
61528: NEG
61529: PUSH
61530: LD_INT 2
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: LD_INT 2
61543: NEG
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: LD_INT 1
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: LD_INT 2
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 1
61602: NEG
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 2
61613: NEG
61614: PUSH
61615: LD_INT 0
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 2
61624: NEG
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: LD_INT 3
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: LD_INT 3
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: LD_INT 2
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 2
61670: PUSH
61671: LD_INT 1
61673: NEG
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 3
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 3
61691: PUSH
61692: LD_INT 1
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 1
61701: PUSH
61702: LD_INT 3
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 0
61711: PUSH
61712: LD_INT 3
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 1
61721: NEG
61722: PUSH
61723: LD_INT 2
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 2
61732: NEG
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 3
61743: NEG
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 3
61754: NEG
61755: PUSH
61756: LD_INT 1
61758: NEG
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61795: LD_ADDR_VAR 0 44
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: LD_INT 0
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: LD_INT 1
61815: NEG
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: LD_INT 1
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: NEG
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 1
61864: NEG
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 1
61876: NEG
61877: PUSH
61878: LD_INT 2
61880: NEG
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 2
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 2
61909: PUSH
61910: LD_INT 1
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 2
61919: PUSH
61920: LD_INT 2
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: LD_INT 2
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: LD_INT 1
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 2
61950: NEG
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 2
61961: NEG
61962: PUSH
61963: LD_INT 1
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 2
61973: NEG
61974: PUSH
61975: LD_INT 2
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 2
61985: NEG
61986: PUSH
61987: LD_INT 3
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 2
61997: PUSH
61998: LD_INT 1
62000: NEG
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 3
62008: PUSH
62009: LD_INT 0
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 3
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 3
62028: PUSH
62029: LD_INT 2
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 3
62038: PUSH
62039: LD_INT 3
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 2
62048: PUSH
62049: LD_INT 3
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 2
62058: NEG
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 3
62069: NEG
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 3
62080: NEG
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 3
62092: NEG
62093: PUSH
62094: LD_INT 2
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 3
62104: NEG
62105: PUSH
62106: LD_INT 3
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62145: LD_ADDR_VAR 0 45
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: LD_INT 0
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 1
62203: NEG
62204: PUSH
62205: LD_INT 0
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 1
62214: NEG
62215: PUSH
62216: LD_INT 1
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 1
62226: NEG
62227: PUSH
62228: LD_INT 2
62230: NEG
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: LD_INT 2
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: PUSH
62250: LD_INT 1
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 2
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 2
62270: PUSH
62271: LD_INT 2
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: LD_INT 2
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: LD_INT 2
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: NEG
62301: PUSH
62302: LD_INT 1
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 2
62311: NEG
62312: PUSH
62313: LD_INT 1
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 2
62323: NEG
62324: PUSH
62325: LD_INT 2
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 2
62335: NEG
62336: PUSH
62337: LD_INT 3
62339: NEG
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 1
62347: NEG
62348: PUSH
62349: LD_INT 3
62351: NEG
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: LD_INT 3
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 1
62370: PUSH
62371: LD_INT 2
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 3
62381: PUSH
62382: LD_INT 2
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 3
62391: PUSH
62392: LD_INT 3
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 2
62401: PUSH
62402: LD_INT 3
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 1
62411: PUSH
62412: LD_INT 3
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 0
62421: PUSH
62422: LD_INT 3
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: LD_INT 2
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 3
62442: NEG
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 3
62454: NEG
62455: PUSH
62456: LD_INT 3
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62495: LD_ADDR_VAR 0 46
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: LD_INT 0
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: LD_INT 1
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 1
62523: PUSH
62524: LD_INT 0
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 1
62533: PUSH
62534: LD_INT 1
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: LD_INT 1
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 1
62553: NEG
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: NEG
62565: PUSH
62566: LD_INT 1
62568: NEG
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 1
62576: NEG
62577: PUSH
62578: LD_INT 2
62580: NEG
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: LD_INT 2
62591: NEG
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: LD_INT 1
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 2
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 2
62620: PUSH
62621: LD_INT 1
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 1
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 0
62640: PUSH
62641: LD_INT 2
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 1
62650: NEG
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 2
62661: NEG
62662: PUSH
62663: LD_INT 0
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 2
62672: NEG
62673: PUSH
62674: LD_INT 1
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 1
62684: NEG
62685: PUSH
62686: LD_INT 3
62688: NEG
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: LD_INT 3
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: LD_INT 2
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 2
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 3
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 3
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: PUSH
62750: LD_INT 3
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: LD_INT 3
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: LD_INT 2
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 2
62780: NEG
62781: PUSH
62782: LD_INT 1
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 3
62791: NEG
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 3
62802: NEG
62803: PUSH
62804: LD_INT 1
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62843: LD_ADDR_VAR 0 47
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 1
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: LD_INT 1
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 1
62901: NEG
62902: PUSH
62903: LD_INT 0
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 1
62924: NEG
62925: PUSH
62926: LD_INT 2
62928: NEG
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: LD_INT 0
62936: PUSH
62937: LD_INT 2
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: LD_INT 1
62950: NEG
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 2
62958: NEG
62959: PUSH
62960: LD_INT 1
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 2
62970: NEG
62971: PUSH
62972: LD_INT 2
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62994: LD_ADDR_VAR 0 48
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 0
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: LD_INT 0
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 1
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: LD_INT 1
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 1
63052: NEG
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 1
63063: NEG
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 1
63075: NEG
63076: PUSH
63077: LD_INT 2
63079: NEG
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 0
63087: PUSH
63088: LD_INT 2
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 1
63098: PUSH
63099: LD_INT 1
63101: NEG
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 2
63109: PUSH
63110: LD_INT 0
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 2
63119: PUSH
63120: LD_INT 1
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63141: LD_ADDR_VAR 0 49
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 0
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 1
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 1
63199: NEG
63200: PUSH
63201: LD_INT 0
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 1
63210: NEG
63211: PUSH
63212: LD_INT 1
63214: NEG
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: PUSH
63223: LD_INT 1
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 2
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 2
63243: PUSH
63244: LD_INT 1
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 2
63253: PUSH
63254: LD_INT 2
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: LD_INT 2
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63285: LD_ADDR_VAR 0 50
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: LD_INT 1
63305: NEG
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: LD_INT 0
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 0
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 1
63354: NEG
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 2
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 2
63376: PUSH
63377: LD_INT 2
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 1
63386: PUSH
63387: LD_INT 2
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 0
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: LD_INT 1
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63429: LD_ADDR_VAR 0 51
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: LD_INT 1
63449: NEG
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: LD_INT 0
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: LD_INT 1
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 0
63477: PUSH
63478: LD_INT 1
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 1
63487: NEG
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: LD_INT 1
63502: NEG
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 1
63510: PUSH
63511: LD_INT 2
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: LD_INT 2
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: LD_INT 1
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 2
63541: NEG
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 2
63552: NEG
63553: PUSH
63554: LD_INT 1
63556: NEG
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63576: LD_ADDR_VAR 0 52
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: LD_INT 1
63596: NEG
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 1
63604: PUSH
63605: LD_INT 0
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 1
63614: PUSH
63615: LD_INT 1
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 0
63624: PUSH
63625: LD_INT 1
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 1
63634: NEG
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 1
63645: NEG
63646: PUSH
63647: LD_INT 1
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: LD_INT 2
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 1
63669: NEG
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 2
63680: NEG
63681: PUSH
63682: LD_INT 0
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 2
63691: NEG
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 2
63703: NEG
63704: PUSH
63705: LD_INT 2
63707: NEG
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63727: LD_ADDR_VAR 0 53
63731: PUSH
63732: LD_INT 0
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 0
63744: PUSH
63745: LD_INT 1
63747: NEG
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 1
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 1
63765: PUSH
63766: LD_INT 1
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: LD_INT 1
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 1
63785: NEG
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 1
63796: NEG
63797: PUSH
63798: LD_INT 1
63800: NEG
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 1
63808: NEG
63809: PUSH
63810: LD_INT 2
63812: NEG
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: LD_INT 2
63823: NEG
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 1
63831: PUSH
63832: LD_INT 1
63834: NEG
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 2
63842: PUSH
63843: LD_INT 0
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 2
63852: PUSH
63853: LD_INT 1
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 2
63862: PUSH
63863: LD_INT 2
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 1
63872: PUSH
63873: LD_INT 2
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 0
63882: PUSH
63883: LD_INT 2
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 1
63892: NEG
63893: PUSH
63894: LD_INT 1
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 2
63903: NEG
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 2
63914: NEG
63915: PUSH
63916: LD_INT 1
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 2
63926: NEG
63927: PUSH
63928: LD_INT 2
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63957: LD_ADDR_VAR 0 54
63961: PUSH
63962: LD_INT 0
63964: PUSH
63965: LD_INT 0
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 0
63974: PUSH
63975: LD_INT 1
63977: NEG
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 1
63985: PUSH
63986: LD_INT 0
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 1
63995: PUSH
63996: LD_INT 1
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 0
64005: PUSH
64006: LD_INT 1
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 1
64015: NEG
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 1
64026: NEG
64027: PUSH
64028: LD_INT 1
64030: NEG
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 1
64038: NEG
64039: PUSH
64040: LD_INT 2
64042: NEG
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: LD_INT 2
64053: NEG
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 1
64061: PUSH
64062: LD_INT 1
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 2
64072: PUSH
64073: LD_INT 0
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 2
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 2
64092: PUSH
64093: LD_INT 2
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 1
64102: PUSH
64103: LD_INT 2
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 0
64112: PUSH
64113: LD_INT 2
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 1
64122: NEG
64123: PUSH
64124: LD_INT 1
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 2
64133: NEG
64134: PUSH
64135: LD_INT 0
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 2
64144: NEG
64145: PUSH
64146: LD_INT 1
64148: NEG
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 2
64156: NEG
64157: PUSH
64158: LD_INT 2
64160: NEG
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: LIST
64185: LIST
64186: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64187: LD_ADDR_VAR 0 55
64191: PUSH
64192: LD_INT 0
64194: PUSH
64195: LD_INT 0
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 0
64204: PUSH
64205: LD_INT 1
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 1
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 1
64225: PUSH
64226: LD_INT 1
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 0
64235: PUSH
64236: LD_INT 1
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 1
64245: NEG
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 1
64256: NEG
64257: PUSH
64258: LD_INT 1
64260: NEG
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 1
64268: NEG
64269: PUSH
64270: LD_INT 2
64272: NEG
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: LD_INT 2
64283: NEG
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 1
64291: PUSH
64292: LD_INT 1
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 2
64302: PUSH
64303: LD_INT 0
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 2
64312: PUSH
64313: LD_INT 1
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 2
64322: PUSH
64323: LD_INT 2
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 1
64332: PUSH
64333: LD_INT 2
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 0
64342: PUSH
64343: LD_INT 2
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 1
64352: NEG
64353: PUSH
64354: LD_INT 1
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 2
64363: NEG
64364: PUSH
64365: LD_INT 0
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 2
64374: NEG
64375: PUSH
64376: LD_INT 1
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 2
64386: NEG
64387: PUSH
64388: LD_INT 2
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64417: LD_ADDR_VAR 0 56
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: LD_INT 1
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: LD_INT 1
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 0
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 1
64486: NEG
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 1
64498: NEG
64499: PUSH
64500: LD_INT 2
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: LD_INT 2
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 1
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 2
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 2
64542: PUSH
64543: LD_INT 1
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 2
64552: PUSH
64553: LD_INT 2
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 1
64562: PUSH
64563: LD_INT 2
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: LD_INT 2
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 1
64582: NEG
64583: PUSH
64584: LD_INT 1
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 2
64593: NEG
64594: PUSH
64595: LD_INT 0
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: PUSH
64602: LD_INT 2
64604: NEG
64605: PUSH
64606: LD_INT 1
64608: NEG
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 2
64616: NEG
64617: PUSH
64618: LD_INT 2
64620: NEG
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64647: LD_ADDR_VAR 0 57
64651: PUSH
64652: LD_INT 0
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 1
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 1
64685: PUSH
64686: LD_INT 1
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 0
64695: PUSH
64696: LD_INT 1
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 1
64705: NEG
64706: PUSH
64707: LD_INT 0
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 1
64716: NEG
64717: PUSH
64718: LD_INT 1
64720: NEG
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 1
64728: NEG
64729: PUSH
64730: LD_INT 2
64732: NEG
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: LD_INT 2
64743: NEG
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 1
64751: PUSH
64752: LD_INT 1
64754: NEG
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 2
64762: PUSH
64763: LD_INT 0
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 2
64772: PUSH
64773: LD_INT 1
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 2
64782: PUSH
64783: LD_INT 2
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 1
64792: PUSH
64793: LD_INT 2
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 0
64802: PUSH
64803: LD_INT 2
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: NEG
64813: PUSH
64814: LD_INT 1
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 2
64823: NEG
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 2
64834: NEG
64835: PUSH
64836: LD_INT 1
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 2
64846: NEG
64847: PUSH
64848: LD_INT 2
64850: NEG
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64877: LD_ADDR_VAR 0 58
64881: PUSH
64882: LD_INT 0
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 0
64894: PUSH
64895: LD_INT 1
64897: NEG
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 1
64905: PUSH
64906: LD_INT 0
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 1
64915: PUSH
64916: LD_INT 1
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: LD_INT 1
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: LD_INT 0
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: LD_INT 1
64950: NEG
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 1
64958: NEG
64959: PUSH
64960: LD_INT 2
64962: NEG
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 0
64970: PUSH
64971: LD_INT 2
64973: NEG
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 1
64981: PUSH
64982: LD_INT 1
64984: NEG
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 2
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 2
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 2
65012: PUSH
65013: LD_INT 2
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 1
65022: PUSH
65023: LD_INT 2
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 0
65032: PUSH
65033: LD_INT 2
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 1
65042: NEG
65043: PUSH
65044: LD_INT 1
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 2
65053: NEG
65054: PUSH
65055: LD_INT 0
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 2
65064: NEG
65065: PUSH
65066: LD_INT 1
65068: NEG
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 2
65076: NEG
65077: PUSH
65078: LD_INT 2
65080: NEG
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65107: LD_ADDR_VAR 0 59
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 0
65124: PUSH
65125: LD_INT 1
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 1
65135: PUSH
65136: LD_INT 0
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 1
65145: PUSH
65146: LD_INT 1
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: LD_INT 1
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: LD_INT 0
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65195: LD_ADDR_VAR 0 60
65199: PUSH
65200: LD_INT 0
65202: PUSH
65203: LD_INT 0
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: LD_INT 1
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 1
65223: PUSH
65224: LD_INT 0
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 1
65233: PUSH
65234: LD_INT 1
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 0
65243: PUSH
65244: LD_INT 1
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 1
65253: NEG
65254: PUSH
65255: LD_INT 0
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 1
65264: NEG
65265: PUSH
65266: LD_INT 1
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65283: LD_ADDR_VAR 0 61
65287: PUSH
65288: LD_INT 0
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: LD_INT 1
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 1
65311: PUSH
65312: LD_INT 0
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 1
65321: PUSH
65322: LD_INT 1
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 0
65331: PUSH
65332: LD_INT 1
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 1
65341: NEG
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 1
65352: NEG
65353: PUSH
65354: LD_INT 1
65356: NEG
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65371: LD_ADDR_VAR 0 62
65375: PUSH
65376: LD_INT 0
65378: PUSH
65379: LD_INT 0
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 0
65388: PUSH
65389: LD_INT 1
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: PUSH
65400: LD_INT 0
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 1
65409: PUSH
65410: LD_INT 1
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: LD_INT 1
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 1
65429: NEG
65430: PUSH
65431: LD_INT 0
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 1
65440: NEG
65441: PUSH
65442: LD_INT 1
65444: NEG
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65459: LD_ADDR_VAR 0 63
65463: PUSH
65464: LD_INT 0
65466: PUSH
65467: LD_INT 0
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: LD_INT 1
65479: NEG
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 1
65487: PUSH
65488: LD_INT 0
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 1
65497: PUSH
65498: LD_INT 1
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 0
65507: PUSH
65508: LD_INT 1
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 1
65517: NEG
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 1
65528: NEG
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65547: LD_ADDR_VAR 0 64
65551: PUSH
65552: LD_INT 0
65554: PUSH
65555: LD_INT 0
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 0
65564: PUSH
65565: LD_INT 1
65567: NEG
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 1
65575: PUSH
65576: LD_INT 0
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 1
65585: PUSH
65586: LD_INT 1
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 0
65595: PUSH
65596: LD_INT 1
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 1
65605: NEG
65606: PUSH
65607: LD_INT 0
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 1
65616: NEG
65617: PUSH
65618: LD_INT 1
65620: NEG
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: ST_TO_ADDR
// end ; 1 :
65635: GO 71532
65637: LD_INT 1
65639: DOUBLE
65640: EQUAL
65641: IFTRUE 65645
65643: GO 68268
65645: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65646: LD_ADDR_VAR 0 11
65650: PUSH
65651: LD_INT 1
65653: NEG
65654: PUSH
65655: LD_INT 3
65657: NEG
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 0
65665: PUSH
65666: LD_INT 3
65668: NEG
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 1
65676: PUSH
65677: LD_INT 2
65679: NEG
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: LIST
65689: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65690: LD_ADDR_VAR 0 12
65694: PUSH
65695: LD_INT 2
65697: PUSH
65698: LD_INT 1
65700: NEG
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 3
65708: PUSH
65709: LD_INT 0
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 3
65718: PUSH
65719: LD_INT 1
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: LIST
65730: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65731: LD_ADDR_VAR 0 13
65735: PUSH
65736: LD_INT 3
65738: PUSH
65739: LD_INT 2
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 3
65748: PUSH
65749: LD_INT 3
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 2
65758: PUSH
65759: LD_INT 3
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: LIST
65770: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65771: LD_ADDR_VAR 0 14
65775: PUSH
65776: LD_INT 1
65778: PUSH
65779: LD_INT 3
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: LD_INT 3
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 1
65798: NEG
65799: PUSH
65800: LD_INT 2
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: LIST
65811: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65812: LD_ADDR_VAR 0 15
65816: PUSH
65817: LD_INT 2
65819: NEG
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 3
65830: NEG
65831: PUSH
65832: LD_INT 0
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 3
65841: NEG
65842: PUSH
65843: LD_INT 1
65845: NEG
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: LIST
65855: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65856: LD_ADDR_VAR 0 16
65860: PUSH
65861: LD_INT 2
65863: NEG
65864: PUSH
65865: LD_INT 3
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 3
65875: NEG
65876: PUSH
65877: LD_INT 2
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 3
65887: NEG
65888: PUSH
65889: LD_INT 3
65891: NEG
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: LIST
65901: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65902: LD_ADDR_VAR 0 17
65906: PUSH
65907: LD_INT 1
65909: NEG
65910: PUSH
65911: LD_INT 3
65913: NEG
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 0
65921: PUSH
65922: LD_INT 3
65924: NEG
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 1
65932: PUSH
65933: LD_INT 2
65935: NEG
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: LIST
65945: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65946: LD_ADDR_VAR 0 18
65950: PUSH
65951: LD_INT 2
65953: PUSH
65954: LD_INT 1
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 3
65964: PUSH
65965: LD_INT 0
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 3
65974: PUSH
65975: LD_INT 1
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: LIST
65986: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65987: LD_ADDR_VAR 0 19
65991: PUSH
65992: LD_INT 3
65994: PUSH
65995: LD_INT 2
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 3
66004: PUSH
66005: LD_INT 3
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 2
66014: PUSH
66015: LD_INT 3
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: LIST
66026: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66027: LD_ADDR_VAR 0 20
66031: PUSH
66032: LD_INT 1
66034: PUSH
66035: LD_INT 3
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 0
66044: PUSH
66045: LD_INT 3
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 1
66054: NEG
66055: PUSH
66056: LD_INT 2
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: LIST
66067: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66068: LD_ADDR_VAR 0 21
66072: PUSH
66073: LD_INT 2
66075: NEG
66076: PUSH
66077: LD_INT 1
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 3
66086: NEG
66087: PUSH
66088: LD_INT 0
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 3
66097: NEG
66098: PUSH
66099: LD_INT 1
66101: NEG
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: LIST
66111: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66112: LD_ADDR_VAR 0 22
66116: PUSH
66117: LD_INT 2
66119: NEG
66120: PUSH
66121: LD_INT 3
66123: NEG
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 3
66131: NEG
66132: PUSH
66133: LD_INT 2
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 3
66143: NEG
66144: PUSH
66145: LD_INT 3
66147: NEG
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: LIST
66157: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66158: LD_ADDR_VAR 0 23
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: LD_INT 3
66168: NEG
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 1
66176: NEG
66177: PUSH
66178: LD_INT 4
66180: NEG
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 1
66188: PUSH
66189: LD_INT 3
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: LIST
66201: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66202: LD_ADDR_VAR 0 24
66206: PUSH
66207: LD_INT 3
66209: PUSH
66210: LD_INT 0
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 3
66219: PUSH
66220: LD_INT 1
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 4
66230: PUSH
66231: LD_INT 1
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: LIST
66242: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66243: LD_ADDR_VAR 0 25
66247: PUSH
66248: LD_INT 3
66250: PUSH
66251: LD_INT 3
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 4
66260: PUSH
66261: LD_INT 3
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 3
66270: PUSH
66271: LD_INT 4
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: LIST
66282: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66283: LD_ADDR_VAR 0 26
66287: PUSH
66288: LD_INT 0
66290: PUSH
66291: LD_INT 3
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 1
66300: PUSH
66301: LD_INT 4
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 1
66310: NEG
66311: PUSH
66312: LD_INT 3
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: LIST
66323: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66324: LD_ADDR_VAR 0 27
66328: PUSH
66329: LD_INT 3
66331: NEG
66332: PUSH
66333: LD_INT 0
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 3
66342: NEG
66343: PUSH
66344: LD_INT 1
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 4
66353: NEG
66354: PUSH
66355: LD_INT 1
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: LIST
66367: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66368: LD_ADDR_VAR 0 28
66372: PUSH
66373: LD_INT 3
66375: NEG
66376: PUSH
66377: LD_INT 3
66379: NEG
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 3
66387: NEG
66388: PUSH
66389: LD_INT 4
66391: NEG
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 4
66399: NEG
66400: PUSH
66401: LD_INT 3
66403: NEG
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: LIST
66413: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66414: LD_ADDR_VAR 0 29
66418: PUSH
66419: LD_INT 1
66421: NEG
66422: PUSH
66423: LD_INT 3
66425: NEG
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: LD_INT 3
66436: NEG
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 1
66444: PUSH
66445: LD_INT 2
66447: NEG
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 1
66455: NEG
66456: PUSH
66457: LD_INT 4
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 0
66467: PUSH
66468: LD_INT 4
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 1
66478: PUSH
66479: LD_INT 3
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 1
66489: NEG
66490: PUSH
66491: LD_INT 5
66493: NEG
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 0
66501: PUSH
66502: LD_INT 5
66504: NEG
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 1
66512: PUSH
66513: LD_INT 4
66515: NEG
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 1
66523: NEG
66524: PUSH
66525: LD_INT 6
66527: NEG
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 0
66535: PUSH
66536: LD_INT 6
66538: NEG
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 1
66546: PUSH
66547: LD_INT 5
66549: NEG
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66569: LD_ADDR_VAR 0 30
66573: PUSH
66574: LD_INT 2
66576: PUSH
66577: LD_INT 1
66579: NEG
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 3
66587: PUSH
66588: LD_INT 0
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PUSH
66595: LD_INT 3
66597: PUSH
66598: LD_INT 1
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 3
66607: PUSH
66608: LD_INT 1
66610: NEG
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 4
66618: PUSH
66619: LD_INT 0
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 4
66628: PUSH
66629: LD_INT 1
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 4
66638: PUSH
66639: LD_INT 1
66641: NEG
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 5
66649: PUSH
66650: LD_INT 0
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 5
66659: PUSH
66660: LD_INT 1
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 5
66669: PUSH
66670: LD_INT 1
66672: NEG
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 6
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 6
66690: PUSH
66691: LD_INT 1
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66712: LD_ADDR_VAR 0 31
66716: PUSH
66717: LD_INT 3
66719: PUSH
66720: LD_INT 2
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 3
66729: PUSH
66730: LD_INT 3
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PUSH
66737: LD_INT 2
66739: PUSH
66740: LD_INT 3
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 4
66749: PUSH
66750: LD_INT 3
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 4
66759: PUSH
66760: LD_INT 4
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 3
66769: PUSH
66770: LD_INT 4
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 5
66779: PUSH
66780: LD_INT 4
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 5
66789: PUSH
66790: LD_INT 5
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 4
66799: PUSH
66800: LD_INT 5
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 6
66809: PUSH
66810: LD_INT 5
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 6
66819: PUSH
66820: LD_INT 6
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 5
66829: PUSH
66830: LD_INT 6
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66851: LD_ADDR_VAR 0 32
66855: PUSH
66856: LD_INT 1
66858: PUSH
66859: LD_INT 3
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 0
66868: PUSH
66869: LD_INT 3
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 1
66878: NEG
66879: PUSH
66880: LD_INT 2
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 1
66889: PUSH
66890: LD_INT 4
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 0
66899: PUSH
66900: LD_INT 4
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 1
66909: NEG
66910: PUSH
66911: LD_INT 3
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PUSH
66918: LD_INT 1
66920: PUSH
66921: LD_INT 5
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 0
66930: PUSH
66931: LD_INT 5
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 1
66940: NEG
66941: PUSH
66942: LD_INT 4
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 1
66951: PUSH
66952: LD_INT 6
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 0
66961: PUSH
66962: LD_INT 6
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 1
66971: NEG
66972: PUSH
66973: LD_INT 5
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66994: LD_ADDR_VAR 0 33
66998: PUSH
66999: LD_INT 2
67001: NEG
67002: PUSH
67003: LD_INT 1
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 3
67012: NEG
67013: PUSH
67014: LD_INT 0
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 3
67023: NEG
67024: PUSH
67025: LD_INT 1
67027: NEG
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 3
67035: NEG
67036: PUSH
67037: LD_INT 1
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 4
67046: NEG
67047: PUSH
67048: LD_INT 0
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 4
67057: NEG
67058: PUSH
67059: LD_INT 1
67061: NEG
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 4
67069: NEG
67070: PUSH
67071: LD_INT 1
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 5
67080: NEG
67081: PUSH
67082: LD_INT 0
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 5
67091: NEG
67092: PUSH
67093: LD_INT 1
67095: NEG
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 5
67103: NEG
67104: PUSH
67105: LD_INT 1
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 6
67114: NEG
67115: PUSH
67116: LD_INT 0
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 6
67125: NEG
67126: PUSH
67127: LD_INT 1
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67149: LD_ADDR_VAR 0 34
67153: PUSH
67154: LD_INT 2
67156: NEG
67157: PUSH
67158: LD_INT 3
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 3
67168: NEG
67169: PUSH
67170: LD_INT 2
67172: NEG
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 3
67180: NEG
67181: PUSH
67182: LD_INT 3
67184: NEG
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 3
67192: NEG
67193: PUSH
67194: LD_INT 4
67196: NEG
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 4
67204: NEG
67205: PUSH
67206: LD_INT 3
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 4
67216: NEG
67217: PUSH
67218: LD_INT 4
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 4
67228: NEG
67229: PUSH
67230: LD_INT 5
67232: NEG
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 5
67240: NEG
67241: PUSH
67242: LD_INT 4
67244: NEG
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 5
67252: NEG
67253: PUSH
67254: LD_INT 5
67256: NEG
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 5
67264: NEG
67265: PUSH
67266: LD_INT 6
67268: NEG
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 6
67276: NEG
67277: PUSH
67278: LD_INT 5
67280: NEG
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 6
67288: NEG
67289: PUSH
67290: LD_INT 6
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67312: LD_ADDR_VAR 0 41
67316: PUSH
67317: LD_INT 0
67319: PUSH
67320: LD_INT 2
67322: NEG
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 1
67330: NEG
67331: PUSH
67332: LD_INT 3
67334: NEG
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 1
67342: PUSH
67343: LD_INT 2
67345: NEG
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: LIST
67355: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67356: LD_ADDR_VAR 0 42
67360: PUSH
67361: LD_INT 2
67363: PUSH
67364: LD_INT 0
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 2
67373: PUSH
67374: LD_INT 1
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 3
67384: PUSH
67385: LD_INT 1
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: LIST
67396: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67397: LD_ADDR_VAR 0 43
67401: PUSH
67402: LD_INT 2
67404: PUSH
67405: LD_INT 2
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 3
67414: PUSH
67415: LD_INT 2
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 2
67424: PUSH
67425: LD_INT 3
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: LIST
67436: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67437: LD_ADDR_VAR 0 44
67441: PUSH
67442: LD_INT 0
67444: PUSH
67445: LD_INT 2
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 1
67454: PUSH
67455: LD_INT 3
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 1
67464: NEG
67465: PUSH
67466: LD_INT 2
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: LIST
67477: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67478: LD_ADDR_VAR 0 45
67482: PUSH
67483: LD_INT 2
67485: NEG
67486: PUSH
67487: LD_INT 0
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 2
67496: NEG
67497: PUSH
67498: LD_INT 1
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 3
67507: NEG
67508: PUSH
67509: LD_INT 1
67511: NEG
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: LIST
67521: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67522: LD_ADDR_VAR 0 46
67526: PUSH
67527: LD_INT 2
67529: NEG
67530: PUSH
67531: LD_INT 2
67533: NEG
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 2
67541: NEG
67542: PUSH
67543: LD_INT 3
67545: NEG
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 3
67553: NEG
67554: PUSH
67555: LD_INT 2
67557: NEG
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: LIST
67567: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67568: LD_ADDR_VAR 0 47
67572: PUSH
67573: LD_INT 2
67575: NEG
67576: PUSH
67577: LD_INT 3
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 1
67587: NEG
67588: PUSH
67589: LD_INT 3
67591: NEG
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67601: LD_ADDR_VAR 0 48
67605: PUSH
67606: LD_INT 1
67608: PUSH
67609: LD_INT 2
67611: NEG
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 2
67619: PUSH
67620: LD_INT 1
67622: NEG
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67632: LD_ADDR_VAR 0 49
67636: PUSH
67637: LD_INT 3
67639: PUSH
67640: LD_INT 1
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 3
67649: PUSH
67650: LD_INT 2
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67661: LD_ADDR_VAR 0 50
67665: PUSH
67666: LD_INT 2
67668: PUSH
67669: LD_INT 3
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 1
67678: PUSH
67679: LD_INT 3
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67690: LD_ADDR_VAR 0 51
67694: PUSH
67695: LD_INT 1
67697: NEG
67698: PUSH
67699: LD_INT 2
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 2
67708: NEG
67709: PUSH
67710: LD_INT 1
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67721: LD_ADDR_VAR 0 52
67725: PUSH
67726: LD_INT 3
67728: NEG
67729: PUSH
67730: LD_INT 1
67732: NEG
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 3
67740: NEG
67741: PUSH
67742: LD_INT 2
67744: NEG
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67754: LD_ADDR_VAR 0 53
67758: PUSH
67759: LD_INT 1
67761: NEG
67762: PUSH
67763: LD_INT 3
67765: NEG
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 0
67773: PUSH
67774: LD_INT 3
67776: NEG
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 1
67784: PUSH
67785: LD_INT 2
67787: NEG
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: LIST
67797: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67798: LD_ADDR_VAR 0 54
67802: PUSH
67803: LD_INT 2
67805: PUSH
67806: LD_INT 1
67808: NEG
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 3
67816: PUSH
67817: LD_INT 0
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 3
67826: PUSH
67827: LD_INT 1
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: LIST
67838: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67839: LD_ADDR_VAR 0 55
67843: PUSH
67844: LD_INT 3
67846: PUSH
67847: LD_INT 2
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 3
67856: PUSH
67857: LD_INT 3
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 2
67866: PUSH
67867: LD_INT 3
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: LIST
67878: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67879: LD_ADDR_VAR 0 56
67883: PUSH
67884: LD_INT 1
67886: PUSH
67887: LD_INT 3
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 0
67896: PUSH
67897: LD_INT 3
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 1
67906: NEG
67907: PUSH
67908: LD_INT 2
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: LIST
67919: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67920: LD_ADDR_VAR 0 57
67924: PUSH
67925: LD_INT 2
67927: NEG
67928: PUSH
67929: LD_INT 1
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 3
67938: NEG
67939: PUSH
67940: LD_INT 0
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 3
67949: NEG
67950: PUSH
67951: LD_INT 1
67953: NEG
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: LIST
67963: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67964: LD_ADDR_VAR 0 58
67968: PUSH
67969: LD_INT 2
67971: NEG
67972: PUSH
67973: LD_INT 3
67975: NEG
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 3
67983: NEG
67984: PUSH
67985: LD_INT 2
67987: NEG
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 3
67995: NEG
67996: PUSH
67997: LD_INT 3
67999: NEG
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: LIST
68009: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68010: LD_ADDR_VAR 0 59
68014: PUSH
68015: LD_INT 1
68017: NEG
68018: PUSH
68019: LD_INT 2
68021: NEG
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 0
68029: PUSH
68030: LD_INT 2
68032: NEG
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 1
68040: PUSH
68041: LD_INT 1
68043: NEG
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: LIST
68053: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68054: LD_ADDR_VAR 0 60
68058: PUSH
68059: LD_INT 1
68061: PUSH
68062: LD_INT 1
68064: NEG
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 2
68072: PUSH
68073: LD_INT 0
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 2
68082: PUSH
68083: LD_INT 1
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: LIST
68094: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68095: LD_ADDR_VAR 0 61
68099: PUSH
68100: LD_INT 2
68102: PUSH
68103: LD_INT 1
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 2
68112: PUSH
68113: LD_INT 2
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 1
68122: PUSH
68123: LD_INT 2
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: LIST
68134: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68135: LD_ADDR_VAR 0 62
68139: PUSH
68140: LD_INT 1
68142: PUSH
68143: LD_INT 2
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 0
68152: PUSH
68153: LD_INT 2
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 1
68162: NEG
68163: PUSH
68164: LD_INT 1
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: LIST
68175: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68176: LD_ADDR_VAR 0 63
68180: PUSH
68181: LD_INT 1
68183: NEG
68184: PUSH
68185: LD_INT 1
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 2
68194: NEG
68195: PUSH
68196: LD_INT 0
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 2
68205: NEG
68206: PUSH
68207: LD_INT 1
68209: NEG
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: LIST
68219: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68220: LD_ADDR_VAR 0 64
68224: PUSH
68225: LD_INT 1
68227: NEG
68228: PUSH
68229: LD_INT 2
68231: NEG
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 2
68239: NEG
68240: PUSH
68241: LD_INT 1
68243: NEG
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 2
68251: NEG
68252: PUSH
68253: LD_INT 2
68255: NEG
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: LIST
68265: ST_TO_ADDR
// end ; 2 :
68266: GO 71532
68268: LD_INT 2
68270: DOUBLE
68271: EQUAL
68272: IFTRUE 68276
68274: GO 71531
68276: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68277: LD_ADDR_VAR 0 29
68281: PUSH
68282: LD_INT 4
68284: PUSH
68285: LD_INT 0
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 4
68294: PUSH
68295: LD_INT 1
68297: NEG
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 5
68305: PUSH
68306: LD_INT 0
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 5
68315: PUSH
68316: LD_INT 1
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 4
68325: PUSH
68326: LD_INT 1
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 3
68335: PUSH
68336: LD_INT 0
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 3
68345: PUSH
68346: LD_INT 1
68348: NEG
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 3
68356: PUSH
68357: LD_INT 2
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 5
68367: PUSH
68368: LD_INT 2
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 3
68377: PUSH
68378: LD_INT 3
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 3
68387: PUSH
68388: LD_INT 2
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 4
68397: PUSH
68398: LD_INT 3
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 4
68407: PUSH
68408: LD_INT 4
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 3
68417: PUSH
68418: LD_INT 4
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 2
68427: PUSH
68428: LD_INT 3
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 2
68437: PUSH
68438: LD_INT 2
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 4
68447: PUSH
68448: LD_INT 2
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 2
68457: PUSH
68458: LD_INT 4
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 0
68467: PUSH
68468: LD_INT 4
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 0
68477: PUSH
68478: LD_INT 3
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 1
68487: PUSH
68488: LD_INT 4
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 1
68497: PUSH
68498: LD_INT 5
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 0
68507: PUSH
68508: LD_INT 5
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 1
68517: NEG
68518: PUSH
68519: LD_INT 4
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 1
68528: NEG
68529: PUSH
68530: LD_INT 3
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 2
68539: PUSH
68540: LD_INT 5
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 2
68549: NEG
68550: PUSH
68551: LD_INT 3
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 3
68560: NEG
68561: PUSH
68562: LD_INT 0
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 3
68571: NEG
68572: PUSH
68573: LD_INT 1
68575: NEG
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 2
68583: NEG
68584: PUSH
68585: LD_INT 0
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PUSH
68592: LD_INT 2
68594: NEG
68595: PUSH
68596: LD_INT 1
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 3
68605: NEG
68606: PUSH
68607: LD_INT 1
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 4
68616: NEG
68617: PUSH
68618: LD_INT 0
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 4
68627: NEG
68628: PUSH
68629: LD_INT 1
68631: NEG
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: PUSH
68637: LD_INT 4
68639: NEG
68640: PUSH
68641: LD_INT 2
68643: NEG
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 2
68651: NEG
68652: PUSH
68653: LD_INT 2
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 4
68662: NEG
68663: PUSH
68664: LD_INT 4
68666: NEG
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 4
68674: NEG
68675: PUSH
68676: LD_INT 5
68678: NEG
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 3
68686: NEG
68687: PUSH
68688: LD_INT 4
68690: NEG
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_INT 3
68698: NEG
68699: PUSH
68700: LD_INT 3
68702: NEG
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 4
68710: NEG
68711: PUSH
68712: LD_INT 3
68714: NEG
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 5
68722: NEG
68723: PUSH
68724: LD_INT 4
68726: NEG
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 5
68734: NEG
68735: PUSH
68736: LD_INT 5
68738: NEG
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 3
68746: NEG
68747: PUSH
68748: LD_INT 5
68750: NEG
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 5
68758: NEG
68759: PUSH
68760: LD_INT 3
68762: NEG
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68815: LD_ADDR_VAR 0 30
68819: PUSH
68820: LD_INT 4
68822: PUSH
68823: LD_INT 4
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 4
68832: PUSH
68833: LD_INT 3
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 5
68842: PUSH
68843: LD_INT 4
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 5
68852: PUSH
68853: LD_INT 5
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 4
68862: PUSH
68863: LD_INT 5
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 3
68872: PUSH
68873: LD_INT 4
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 3
68882: PUSH
68883: LD_INT 3
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 5
68892: PUSH
68893: LD_INT 3
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 3
68902: PUSH
68903: LD_INT 5
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 0
68912: PUSH
68913: LD_INT 3
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 0
68922: PUSH
68923: LD_INT 2
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 1
68932: PUSH
68933: LD_INT 3
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 1
68942: PUSH
68943: LD_INT 4
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 0
68952: PUSH
68953: LD_INT 4
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 1
68962: NEG
68963: PUSH
68964: LD_INT 3
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 1
68973: NEG
68974: PUSH
68975: LD_INT 2
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 2
68984: PUSH
68985: LD_INT 4
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 2
68994: NEG
68995: PUSH
68996: LD_INT 2
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 4
69005: NEG
69006: PUSH
69007: LD_INT 0
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 4
69016: NEG
69017: PUSH
69018: LD_INT 1
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 3
69028: NEG
69029: PUSH
69030: LD_INT 0
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 3
69039: NEG
69040: PUSH
69041: LD_INT 1
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 4
69050: NEG
69051: PUSH
69052: LD_INT 1
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 5
69061: NEG
69062: PUSH
69063: LD_INT 0
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 5
69072: NEG
69073: PUSH
69074: LD_INT 1
69076: NEG
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 5
69084: NEG
69085: PUSH
69086: LD_INT 2
69088: NEG
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 3
69096: NEG
69097: PUSH
69098: LD_INT 2
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 3
69107: NEG
69108: PUSH
69109: LD_INT 3
69111: NEG
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_INT 3
69119: NEG
69120: PUSH
69121: LD_INT 4
69123: NEG
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 2
69131: NEG
69132: PUSH
69133: LD_INT 3
69135: NEG
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 2
69143: NEG
69144: PUSH
69145: LD_INT 2
69147: NEG
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 3
69155: NEG
69156: PUSH
69157: LD_INT 2
69159: NEG
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 4
69167: NEG
69168: PUSH
69169: LD_INT 3
69171: NEG
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 4
69179: NEG
69180: PUSH
69181: LD_INT 4
69183: NEG
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 2
69191: NEG
69192: PUSH
69193: LD_INT 4
69195: NEG
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 4
69203: NEG
69204: PUSH
69205: LD_INT 2
69207: NEG
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 0
69215: PUSH
69216: LD_INT 4
69218: NEG
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 0
69226: PUSH
69227: LD_INT 5
69229: NEG
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 1
69237: PUSH
69238: LD_INT 4
69240: NEG
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 1
69248: PUSH
69249: LD_INT 3
69251: NEG
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 0
69259: PUSH
69260: LD_INT 3
69262: NEG
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 1
69270: NEG
69271: PUSH
69272: LD_INT 4
69274: NEG
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 1
69282: NEG
69283: PUSH
69284: LD_INT 5
69286: NEG
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 2
69294: PUSH
69295: LD_INT 3
69297: NEG
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 2
69305: NEG
69306: PUSH
69307: LD_INT 5
69309: NEG
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69362: LD_ADDR_VAR 0 31
69366: PUSH
69367: LD_INT 0
69369: PUSH
69370: LD_INT 4
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 0
69379: PUSH
69380: LD_INT 3
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 1
69389: PUSH
69390: LD_INT 4
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 1
69399: PUSH
69400: LD_INT 5
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 0
69409: PUSH
69410: LD_INT 5
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 1
69419: NEG
69420: PUSH
69421: LD_INT 4
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 1
69430: NEG
69431: PUSH
69432: LD_INT 3
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 2
69441: PUSH
69442: LD_INT 5
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 2
69451: NEG
69452: PUSH
69453: LD_INT 3
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 3
69462: NEG
69463: PUSH
69464: LD_INT 0
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 3
69473: NEG
69474: PUSH
69475: LD_INT 1
69477: NEG
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 2
69485: NEG
69486: PUSH
69487: LD_INT 0
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 2
69496: NEG
69497: PUSH
69498: LD_INT 1
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 3
69507: NEG
69508: PUSH
69509: LD_INT 1
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 4
69518: NEG
69519: PUSH
69520: LD_INT 0
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 4
69529: NEG
69530: PUSH
69531: LD_INT 1
69533: NEG
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 4
69541: NEG
69542: PUSH
69543: LD_INT 2
69545: NEG
69546: PUSH
69547: EMPTY
69548: LIST
69549: LIST
69550: PUSH
69551: LD_INT 2
69553: NEG
69554: PUSH
69555: LD_INT 2
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PUSH
69562: LD_INT 4
69564: NEG
69565: PUSH
69566: LD_INT 4
69568: NEG
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 4
69576: NEG
69577: PUSH
69578: LD_INT 5
69580: NEG
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 3
69588: NEG
69589: PUSH
69590: LD_INT 4
69592: NEG
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 3
69600: NEG
69601: PUSH
69602: LD_INT 3
69604: NEG
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 4
69612: NEG
69613: PUSH
69614: LD_INT 3
69616: NEG
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 5
69624: NEG
69625: PUSH
69626: LD_INT 4
69628: NEG
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: LD_INT 5
69636: NEG
69637: PUSH
69638: LD_INT 5
69640: NEG
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 3
69648: NEG
69649: PUSH
69650: LD_INT 5
69652: NEG
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 5
69660: NEG
69661: PUSH
69662: LD_INT 3
69664: NEG
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 0
69672: PUSH
69673: LD_INT 3
69675: NEG
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PUSH
69681: LD_INT 0
69683: PUSH
69684: LD_INT 4
69686: NEG
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 1
69694: PUSH
69695: LD_INT 3
69697: NEG
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 1
69705: PUSH
69706: LD_INT 2
69708: NEG
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 0
69716: PUSH
69717: LD_INT 2
69719: NEG
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: LD_INT 1
69727: NEG
69728: PUSH
69729: LD_INT 3
69731: NEG
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 1
69739: NEG
69740: PUSH
69741: LD_INT 4
69743: NEG
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 2
69751: PUSH
69752: LD_INT 2
69754: NEG
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 2
69762: NEG
69763: PUSH
69764: LD_INT 4
69766: NEG
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 4
69774: PUSH
69775: LD_INT 0
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 4
69784: PUSH
69785: LD_INT 1
69787: NEG
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 5
69795: PUSH
69796: LD_INT 0
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 5
69805: PUSH
69806: LD_INT 1
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 4
69815: PUSH
69816: LD_INT 1
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 3
69825: PUSH
69826: LD_INT 0
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 3
69835: PUSH
69836: LD_INT 1
69838: NEG
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: LD_INT 3
69846: PUSH
69847: LD_INT 2
69849: NEG
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 5
69857: PUSH
69858: LD_INT 2
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69912: LD_ADDR_VAR 0 32
69916: PUSH
69917: LD_INT 4
69919: NEG
69920: PUSH
69921: LD_INT 0
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 4
69930: NEG
69931: PUSH
69932: LD_INT 1
69934: NEG
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 3
69942: NEG
69943: PUSH
69944: LD_INT 0
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 3
69953: NEG
69954: PUSH
69955: LD_INT 1
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 4
69964: NEG
69965: PUSH
69966: LD_INT 1
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 5
69975: NEG
69976: PUSH
69977: LD_INT 0
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 5
69986: NEG
69987: PUSH
69988: LD_INT 1
69990: NEG
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 5
69998: NEG
69999: PUSH
70000: LD_INT 2
70002: NEG
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 3
70010: NEG
70011: PUSH
70012: LD_INT 2
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 3
70021: NEG
70022: PUSH
70023: LD_INT 3
70025: NEG
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 3
70033: NEG
70034: PUSH
70035: LD_INT 4
70037: NEG
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 2
70045: NEG
70046: PUSH
70047: LD_INT 3
70049: NEG
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: LD_INT 2
70057: NEG
70058: PUSH
70059: LD_INT 2
70061: NEG
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: PUSH
70067: LD_INT 3
70069: NEG
70070: PUSH
70071: LD_INT 2
70073: NEG
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 4
70081: NEG
70082: PUSH
70083: LD_INT 3
70085: NEG
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 4
70093: NEG
70094: PUSH
70095: LD_INT 4
70097: NEG
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 2
70105: NEG
70106: PUSH
70107: LD_INT 4
70109: NEG
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 4
70117: NEG
70118: PUSH
70119: LD_INT 2
70121: NEG
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 0
70129: PUSH
70130: LD_INT 4
70132: NEG
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: LD_INT 0
70140: PUSH
70141: LD_INT 5
70143: NEG
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 1
70151: PUSH
70152: LD_INT 4
70154: NEG
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 1
70162: PUSH
70163: LD_INT 3
70165: NEG
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 0
70173: PUSH
70174: LD_INT 3
70176: NEG
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 1
70184: NEG
70185: PUSH
70186: LD_INT 4
70188: NEG
70189: PUSH
70190: EMPTY
70191: LIST
70192: LIST
70193: PUSH
70194: LD_INT 1
70196: NEG
70197: PUSH
70198: LD_INT 5
70200: NEG
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: LD_INT 2
70208: PUSH
70209: LD_INT 3
70211: NEG
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 2
70219: NEG
70220: PUSH
70221: LD_INT 5
70223: NEG
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 3
70231: PUSH
70232: LD_INT 0
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 3
70241: PUSH
70242: LD_INT 1
70244: NEG
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PUSH
70250: LD_INT 4
70252: PUSH
70253: LD_INT 0
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 4
70262: PUSH
70263: LD_INT 1
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 3
70272: PUSH
70273: LD_INT 1
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 2
70282: PUSH
70283: LD_INT 0
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 2
70292: PUSH
70293: LD_INT 1
70295: NEG
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 2
70303: PUSH
70304: LD_INT 2
70306: NEG
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: LD_INT 4
70314: PUSH
70315: LD_INT 2
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: LD_INT 4
70324: PUSH
70325: LD_INT 4
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 4
70334: PUSH
70335: LD_INT 3
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 5
70344: PUSH
70345: LD_INT 4
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 5
70354: PUSH
70355: LD_INT 5
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 4
70364: PUSH
70365: LD_INT 5
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 3
70374: PUSH
70375: LD_INT 4
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 3
70384: PUSH
70385: LD_INT 3
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 5
70394: PUSH
70395: LD_INT 3
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 3
70404: PUSH
70405: LD_INT 5
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70459: LD_ADDR_VAR 0 33
70463: PUSH
70464: LD_INT 4
70466: NEG
70467: PUSH
70468: LD_INT 4
70470: NEG
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 4
70478: NEG
70479: PUSH
70480: LD_INT 5
70482: NEG
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 3
70490: NEG
70491: PUSH
70492: LD_INT 4
70494: NEG
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 3
70502: NEG
70503: PUSH
70504: LD_INT 3
70506: NEG
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: PUSH
70512: LD_INT 4
70514: NEG
70515: PUSH
70516: LD_INT 3
70518: NEG
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: LD_INT 5
70526: NEG
70527: PUSH
70528: LD_INT 4
70530: NEG
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 5
70538: NEG
70539: PUSH
70540: LD_INT 5
70542: NEG
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: PUSH
70548: LD_INT 3
70550: NEG
70551: PUSH
70552: LD_INT 5
70554: NEG
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 5
70562: NEG
70563: PUSH
70564: LD_INT 3
70566: NEG
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: LD_INT 0
70574: PUSH
70575: LD_INT 3
70577: NEG
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 0
70585: PUSH
70586: LD_INT 4
70588: NEG
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: PUSH
70594: LD_INT 1
70596: PUSH
70597: LD_INT 3
70599: NEG
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: PUSH
70605: LD_INT 1
70607: PUSH
70608: LD_INT 2
70610: NEG
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: PUSH
70616: LD_INT 0
70618: PUSH
70619: LD_INT 2
70621: NEG
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 1
70629: NEG
70630: PUSH
70631: LD_INT 3
70633: NEG
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 1
70641: NEG
70642: PUSH
70643: LD_INT 4
70645: NEG
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 2
70653: PUSH
70654: LD_INT 2
70656: NEG
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 2
70664: NEG
70665: PUSH
70666: LD_INT 4
70668: NEG
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 4
70676: PUSH
70677: LD_INT 0
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: LD_INT 4
70686: PUSH
70687: LD_INT 1
70689: NEG
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: LD_INT 5
70697: PUSH
70698: LD_INT 0
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 5
70707: PUSH
70708: LD_INT 1
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 4
70717: PUSH
70718: LD_INT 1
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 3
70727: PUSH
70728: LD_INT 0
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 3
70737: PUSH
70738: LD_INT 1
70740: NEG
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 3
70748: PUSH
70749: LD_INT 2
70751: NEG
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: LD_INT 5
70759: PUSH
70760: LD_INT 2
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 3
70769: PUSH
70770: LD_INT 3
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 3
70779: PUSH
70780: LD_INT 2
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 4
70789: PUSH
70790: LD_INT 3
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 4
70799: PUSH
70800: LD_INT 4
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 3
70809: PUSH
70810: LD_INT 4
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 2
70819: PUSH
70820: LD_INT 3
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 2
70829: PUSH
70830: LD_INT 2
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 4
70839: PUSH
70840: LD_INT 2
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PUSH
70847: LD_INT 2
70849: PUSH
70850: LD_INT 4
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 0
70859: PUSH
70860: LD_INT 4
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 0
70869: PUSH
70870: LD_INT 3
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 1
70879: PUSH
70880: LD_INT 4
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 1
70889: PUSH
70890: LD_INT 5
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 0
70899: PUSH
70900: LD_INT 5
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: LD_INT 1
70909: NEG
70910: PUSH
70911: LD_INT 4
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: LD_INT 1
70920: NEG
70921: PUSH
70922: LD_INT 3
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 2
70931: PUSH
70932: LD_INT 5
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 2
70941: NEG
70942: PUSH
70943: LD_INT 3
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70997: LD_ADDR_VAR 0 34
71001: PUSH
71002: LD_INT 0
71004: PUSH
71005: LD_INT 4
71007: NEG
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 0
71015: PUSH
71016: LD_INT 5
71018: NEG
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 1
71026: PUSH
71027: LD_INT 4
71029: NEG
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 1
71037: PUSH
71038: LD_INT 3
71040: NEG
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 0
71048: PUSH
71049: LD_INT 3
71051: NEG
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PUSH
71057: LD_INT 1
71059: NEG
71060: PUSH
71061: LD_INT 4
71063: NEG
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 1
71071: NEG
71072: PUSH
71073: LD_INT 5
71075: NEG
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 2
71083: PUSH
71084: LD_INT 3
71086: NEG
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 2
71094: NEG
71095: PUSH
71096: LD_INT 5
71098: NEG
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 3
71106: PUSH
71107: LD_INT 0
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 3
71116: PUSH
71117: LD_INT 1
71119: NEG
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 4
71127: PUSH
71128: LD_INT 0
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: PUSH
71135: LD_INT 4
71137: PUSH
71138: LD_INT 1
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 3
71147: PUSH
71148: LD_INT 1
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 2
71157: PUSH
71158: LD_INT 0
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PUSH
71165: LD_INT 2
71167: PUSH
71168: LD_INT 1
71170: NEG
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: LD_INT 2
71178: PUSH
71179: LD_INT 2
71181: NEG
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 4
71189: PUSH
71190: LD_INT 2
71192: PUSH
71193: EMPTY
71194: LIST
71195: LIST
71196: PUSH
71197: LD_INT 4
71199: PUSH
71200: LD_INT 4
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: PUSH
71207: LD_INT 4
71209: PUSH
71210: LD_INT 3
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 5
71219: PUSH
71220: LD_INT 4
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 5
71229: PUSH
71230: LD_INT 5
71232: PUSH
71233: EMPTY
71234: LIST
71235: LIST
71236: PUSH
71237: LD_INT 4
71239: PUSH
71240: LD_INT 5
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 3
71249: PUSH
71250: LD_INT 4
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 3
71259: PUSH
71260: LD_INT 3
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 5
71269: PUSH
71270: LD_INT 3
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 3
71279: PUSH
71280: LD_INT 5
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 0
71289: PUSH
71290: LD_INT 3
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: LD_INT 0
71299: PUSH
71300: LD_INT 2
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 1
71309: PUSH
71310: LD_INT 3
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 1
71319: PUSH
71320: LD_INT 4
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: PUSH
71327: LD_INT 0
71329: PUSH
71330: LD_INT 4
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: LD_INT 1
71339: NEG
71340: PUSH
71341: LD_INT 3
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 1
71350: NEG
71351: PUSH
71352: LD_INT 2
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 2
71361: PUSH
71362: LD_INT 4
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 2
71371: NEG
71372: PUSH
71373: LD_INT 2
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: LD_INT 4
71382: NEG
71383: PUSH
71384: LD_INT 0
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: PUSH
71391: LD_INT 4
71393: NEG
71394: PUSH
71395: LD_INT 1
71397: NEG
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: PUSH
71403: LD_INT 3
71405: NEG
71406: PUSH
71407: LD_INT 0
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: PUSH
71414: LD_INT 3
71416: NEG
71417: PUSH
71418: LD_INT 1
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PUSH
71425: LD_INT 4
71427: NEG
71428: PUSH
71429: LD_INT 1
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PUSH
71436: LD_INT 5
71438: NEG
71439: PUSH
71440: LD_INT 0
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: PUSH
71447: LD_INT 5
71449: NEG
71450: PUSH
71451: LD_INT 1
71453: NEG
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 5
71461: NEG
71462: PUSH
71463: LD_INT 2
71465: NEG
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 3
71473: NEG
71474: PUSH
71475: LD_INT 2
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: ST_TO_ADDR
// end ; end ;
71529: GO 71532
71531: POP
// case btype of b_depot , b_warehouse :
71532: LD_VAR 0 1
71536: PUSH
71537: LD_INT 0
71539: DOUBLE
71540: EQUAL
71541: IFTRUE 71551
71543: LD_INT 1
71545: DOUBLE
71546: EQUAL
71547: IFTRUE 71551
71549: GO 71752
71551: POP
// case nation of nation_american :
71552: LD_VAR 0 5
71556: PUSH
71557: LD_INT 1
71559: DOUBLE
71560: EQUAL
71561: IFTRUE 71565
71563: GO 71621
71565: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71566: LD_ADDR_VAR 0 9
71570: PUSH
71571: LD_VAR 0 11
71575: PUSH
71576: LD_VAR 0 12
71580: PUSH
71581: LD_VAR 0 13
71585: PUSH
71586: LD_VAR 0 14
71590: PUSH
71591: LD_VAR 0 15
71595: PUSH
71596: LD_VAR 0 16
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: PUSH
71609: LD_VAR 0 4
71613: PUSH
71614: LD_INT 1
71616: PLUS
71617: ARRAY
71618: ST_TO_ADDR
71619: GO 71750
71621: LD_INT 2
71623: DOUBLE
71624: EQUAL
71625: IFTRUE 71629
71627: GO 71685
71629: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71630: LD_ADDR_VAR 0 9
71634: PUSH
71635: LD_VAR 0 17
71639: PUSH
71640: LD_VAR 0 18
71644: PUSH
71645: LD_VAR 0 19
71649: PUSH
71650: LD_VAR 0 20
71654: PUSH
71655: LD_VAR 0 21
71659: PUSH
71660: LD_VAR 0 22
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: PUSH
71673: LD_VAR 0 4
71677: PUSH
71678: LD_INT 1
71680: PLUS
71681: ARRAY
71682: ST_TO_ADDR
71683: GO 71750
71685: LD_INT 3
71687: DOUBLE
71688: EQUAL
71689: IFTRUE 71693
71691: GO 71749
71693: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71694: LD_ADDR_VAR 0 9
71698: PUSH
71699: LD_VAR 0 23
71703: PUSH
71704: LD_VAR 0 24
71708: PUSH
71709: LD_VAR 0 25
71713: PUSH
71714: LD_VAR 0 26
71718: PUSH
71719: LD_VAR 0 27
71723: PUSH
71724: LD_VAR 0 28
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: PUSH
71737: LD_VAR 0 4
71741: PUSH
71742: LD_INT 1
71744: PLUS
71745: ARRAY
71746: ST_TO_ADDR
71747: GO 71750
71749: POP
71750: GO 72305
71752: LD_INT 2
71754: DOUBLE
71755: EQUAL
71756: IFTRUE 71766
71758: LD_INT 3
71760: DOUBLE
71761: EQUAL
71762: IFTRUE 71766
71764: GO 71822
71766: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71767: LD_ADDR_VAR 0 9
71771: PUSH
71772: LD_VAR 0 29
71776: PUSH
71777: LD_VAR 0 30
71781: PUSH
71782: LD_VAR 0 31
71786: PUSH
71787: LD_VAR 0 32
71791: PUSH
71792: LD_VAR 0 33
71796: PUSH
71797: LD_VAR 0 34
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: PUSH
71810: LD_VAR 0 4
71814: PUSH
71815: LD_INT 1
71817: PLUS
71818: ARRAY
71819: ST_TO_ADDR
71820: GO 72305
71822: LD_INT 16
71824: DOUBLE
71825: EQUAL
71826: IFTRUE 71884
71828: LD_INT 17
71830: DOUBLE
71831: EQUAL
71832: IFTRUE 71884
71834: LD_INT 18
71836: DOUBLE
71837: EQUAL
71838: IFTRUE 71884
71840: LD_INT 19
71842: DOUBLE
71843: EQUAL
71844: IFTRUE 71884
71846: LD_INT 22
71848: DOUBLE
71849: EQUAL
71850: IFTRUE 71884
71852: LD_INT 20
71854: DOUBLE
71855: EQUAL
71856: IFTRUE 71884
71858: LD_INT 21
71860: DOUBLE
71861: EQUAL
71862: IFTRUE 71884
71864: LD_INT 23
71866: DOUBLE
71867: EQUAL
71868: IFTRUE 71884
71870: LD_INT 24
71872: DOUBLE
71873: EQUAL
71874: IFTRUE 71884
71876: LD_INT 25
71878: DOUBLE
71879: EQUAL
71880: IFTRUE 71884
71882: GO 71940
71884: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71885: LD_ADDR_VAR 0 9
71889: PUSH
71890: LD_VAR 0 35
71894: PUSH
71895: LD_VAR 0 36
71899: PUSH
71900: LD_VAR 0 37
71904: PUSH
71905: LD_VAR 0 38
71909: PUSH
71910: LD_VAR 0 39
71914: PUSH
71915: LD_VAR 0 40
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: PUSH
71928: LD_VAR 0 4
71932: PUSH
71933: LD_INT 1
71935: PLUS
71936: ARRAY
71937: ST_TO_ADDR
71938: GO 72305
71940: LD_INT 6
71942: DOUBLE
71943: EQUAL
71944: IFTRUE 71996
71946: LD_INT 7
71948: DOUBLE
71949: EQUAL
71950: IFTRUE 71996
71952: LD_INT 8
71954: DOUBLE
71955: EQUAL
71956: IFTRUE 71996
71958: LD_INT 13
71960: DOUBLE
71961: EQUAL
71962: IFTRUE 71996
71964: LD_INT 12
71966: DOUBLE
71967: EQUAL
71968: IFTRUE 71996
71970: LD_INT 15
71972: DOUBLE
71973: EQUAL
71974: IFTRUE 71996
71976: LD_INT 11
71978: DOUBLE
71979: EQUAL
71980: IFTRUE 71996
71982: LD_INT 14
71984: DOUBLE
71985: EQUAL
71986: IFTRUE 71996
71988: LD_INT 10
71990: DOUBLE
71991: EQUAL
71992: IFTRUE 71996
71994: GO 72052
71996: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71997: LD_ADDR_VAR 0 9
72001: PUSH
72002: LD_VAR 0 41
72006: PUSH
72007: LD_VAR 0 42
72011: PUSH
72012: LD_VAR 0 43
72016: PUSH
72017: LD_VAR 0 44
72021: PUSH
72022: LD_VAR 0 45
72026: PUSH
72027: LD_VAR 0 46
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: LIST
72036: LIST
72037: LIST
72038: LIST
72039: PUSH
72040: LD_VAR 0 4
72044: PUSH
72045: LD_INT 1
72047: PLUS
72048: ARRAY
72049: ST_TO_ADDR
72050: GO 72305
72052: LD_INT 36
72054: DOUBLE
72055: EQUAL
72056: IFTRUE 72060
72058: GO 72116
72060: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72061: LD_ADDR_VAR 0 9
72065: PUSH
72066: LD_VAR 0 47
72070: PUSH
72071: LD_VAR 0 48
72075: PUSH
72076: LD_VAR 0 49
72080: PUSH
72081: LD_VAR 0 50
72085: PUSH
72086: LD_VAR 0 51
72090: PUSH
72091: LD_VAR 0 52
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: LIST
72102: LIST
72103: PUSH
72104: LD_VAR 0 4
72108: PUSH
72109: LD_INT 1
72111: PLUS
72112: ARRAY
72113: ST_TO_ADDR
72114: GO 72305
72116: LD_INT 4
72118: DOUBLE
72119: EQUAL
72120: IFTRUE 72142
72122: LD_INT 5
72124: DOUBLE
72125: EQUAL
72126: IFTRUE 72142
72128: LD_INT 34
72130: DOUBLE
72131: EQUAL
72132: IFTRUE 72142
72134: LD_INT 37
72136: DOUBLE
72137: EQUAL
72138: IFTRUE 72142
72140: GO 72198
72142: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72143: LD_ADDR_VAR 0 9
72147: PUSH
72148: LD_VAR 0 53
72152: PUSH
72153: LD_VAR 0 54
72157: PUSH
72158: LD_VAR 0 55
72162: PUSH
72163: LD_VAR 0 56
72167: PUSH
72168: LD_VAR 0 57
72172: PUSH
72173: LD_VAR 0 58
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: LIST
72182: LIST
72183: LIST
72184: LIST
72185: PUSH
72186: LD_VAR 0 4
72190: PUSH
72191: LD_INT 1
72193: PLUS
72194: ARRAY
72195: ST_TO_ADDR
72196: GO 72305
72198: LD_INT 31
72200: DOUBLE
72201: EQUAL
72202: IFTRUE 72248
72204: LD_INT 32
72206: DOUBLE
72207: EQUAL
72208: IFTRUE 72248
72210: LD_INT 33
72212: DOUBLE
72213: EQUAL
72214: IFTRUE 72248
72216: LD_INT 27
72218: DOUBLE
72219: EQUAL
72220: IFTRUE 72248
72222: LD_INT 26
72224: DOUBLE
72225: EQUAL
72226: IFTRUE 72248
72228: LD_INT 28
72230: DOUBLE
72231: EQUAL
72232: IFTRUE 72248
72234: LD_INT 29
72236: DOUBLE
72237: EQUAL
72238: IFTRUE 72248
72240: LD_INT 30
72242: DOUBLE
72243: EQUAL
72244: IFTRUE 72248
72246: GO 72304
72248: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72249: LD_ADDR_VAR 0 9
72253: PUSH
72254: LD_VAR 0 59
72258: PUSH
72259: LD_VAR 0 60
72263: PUSH
72264: LD_VAR 0 61
72268: PUSH
72269: LD_VAR 0 62
72273: PUSH
72274: LD_VAR 0 63
72278: PUSH
72279: LD_VAR 0 64
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: PUSH
72292: LD_VAR 0 4
72296: PUSH
72297: LD_INT 1
72299: PLUS
72300: ARRAY
72301: ST_TO_ADDR
72302: GO 72305
72304: POP
// temp_list2 = [ ] ;
72305: LD_ADDR_VAR 0 10
72309: PUSH
72310: EMPTY
72311: ST_TO_ADDR
// for i in temp_list do
72312: LD_ADDR_VAR 0 8
72316: PUSH
72317: LD_VAR 0 9
72321: PUSH
72322: FOR_IN
72323: IFFALSE 72375
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72325: LD_ADDR_VAR 0 10
72329: PUSH
72330: LD_VAR 0 10
72334: PUSH
72335: LD_VAR 0 8
72339: PUSH
72340: LD_INT 1
72342: ARRAY
72343: PUSH
72344: LD_VAR 0 2
72348: PLUS
72349: PUSH
72350: LD_VAR 0 8
72354: PUSH
72355: LD_INT 2
72357: ARRAY
72358: PUSH
72359: LD_VAR 0 3
72363: PLUS
72364: PUSH
72365: EMPTY
72366: LIST
72367: LIST
72368: PUSH
72369: EMPTY
72370: LIST
72371: ADD
72372: ST_TO_ADDR
72373: GO 72322
72375: POP
72376: POP
// result = temp_list2 ;
72377: LD_ADDR_VAR 0 7
72381: PUSH
72382: LD_VAR 0 10
72386: ST_TO_ADDR
// end ;
72387: LD_VAR 0 7
72391: RET
// export function EnemyInRange ( unit , dist ) ; begin
72392: LD_INT 0
72394: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72395: LD_ADDR_VAR 0 3
72399: PUSH
72400: LD_VAR 0 1
72404: PPUSH
72405: CALL_OW 255
72409: PPUSH
72410: LD_VAR 0 1
72414: PPUSH
72415: CALL_OW 250
72419: PPUSH
72420: LD_VAR 0 1
72424: PPUSH
72425: CALL_OW 251
72429: PPUSH
72430: LD_VAR 0 2
72434: PPUSH
72435: CALL 45788 0 4
72439: PUSH
72440: LD_INT 4
72442: ARRAY
72443: ST_TO_ADDR
// end ;
72444: LD_VAR 0 3
72448: RET
// export function PlayerSeeMe ( unit ) ; begin
72449: LD_INT 0
72451: PPUSH
// result := See ( your_side , unit ) ;
72452: LD_ADDR_VAR 0 2
72456: PUSH
72457: LD_OWVAR 2
72461: PPUSH
72462: LD_VAR 0 1
72466: PPUSH
72467: CALL_OW 292
72471: ST_TO_ADDR
// end ;
72472: LD_VAR 0 2
72476: RET
// export function ReverseDir ( unit ) ; begin
72477: LD_INT 0
72479: PPUSH
// if not unit then
72480: LD_VAR 0 1
72484: NOT
72485: IFFALSE 72489
// exit ;
72487: GO 72512
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72489: LD_ADDR_VAR 0 2
72493: PUSH
72494: LD_VAR 0 1
72498: PPUSH
72499: CALL_OW 254
72503: PUSH
72504: LD_INT 3
72506: PLUS
72507: PUSH
72508: LD_INT 6
72510: MOD
72511: ST_TO_ADDR
// end ;
72512: LD_VAR 0 2
72516: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
72517: LD_INT 0
72519: PPUSH
72520: PPUSH
72521: PPUSH
72522: PPUSH
72523: PPUSH
// if not hexes then
72524: LD_VAR 0 2
72528: NOT
72529: IFFALSE 72533
// exit ;
72531: GO 72681
// dist := 9999 ;
72533: LD_ADDR_VAR 0 5
72537: PUSH
72538: LD_INT 9999
72540: ST_TO_ADDR
// for i = 1 to hexes do
72541: LD_ADDR_VAR 0 4
72545: PUSH
72546: DOUBLE
72547: LD_INT 1
72549: DEC
72550: ST_TO_ADDR
72551: LD_VAR 0 2
72555: PUSH
72556: FOR_TO
72557: IFFALSE 72669
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
72559: LD_VAR 0 1
72563: PPUSH
72564: LD_VAR 0 2
72568: PUSH
72569: LD_VAR 0 4
72573: ARRAY
72574: PUSH
72575: LD_INT 1
72577: ARRAY
72578: PPUSH
72579: LD_VAR 0 2
72583: PUSH
72584: LD_VAR 0 4
72588: ARRAY
72589: PUSH
72590: LD_INT 2
72592: ARRAY
72593: PPUSH
72594: CALL_OW 297
72598: PUSH
72599: LD_VAR 0 5
72603: LESS
72604: IFFALSE 72667
// begin hex := hexes [ i ] ;
72606: LD_ADDR_VAR 0 7
72610: PUSH
72611: LD_VAR 0 2
72615: PUSH
72616: LD_VAR 0 4
72620: ARRAY
72621: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72622: LD_ADDR_VAR 0 5
72626: PUSH
72627: LD_VAR 0 1
72631: PPUSH
72632: LD_VAR 0 2
72636: PUSH
72637: LD_VAR 0 4
72641: ARRAY
72642: PUSH
72643: LD_INT 1
72645: ARRAY
72646: PPUSH
72647: LD_VAR 0 2
72651: PUSH
72652: LD_VAR 0 4
72656: ARRAY
72657: PUSH
72658: LD_INT 2
72660: ARRAY
72661: PPUSH
72662: CALL_OW 297
72666: ST_TO_ADDR
// end ; end ;
72667: GO 72556
72669: POP
72670: POP
// result := hex ;
72671: LD_ADDR_VAR 0 3
72675: PUSH
72676: LD_VAR 0 7
72680: ST_TO_ADDR
// end ;
72681: LD_VAR 0 3
72685: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72686: LD_INT 0
72688: PPUSH
72689: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72690: LD_VAR 0 1
72694: NOT
72695: PUSH
72696: LD_VAR 0 1
72700: PUSH
72701: LD_INT 21
72703: PUSH
72704: LD_INT 2
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: PUSH
72711: LD_INT 23
72713: PUSH
72714: LD_INT 2
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: PPUSH
72725: CALL_OW 69
72729: IN
72730: NOT
72731: OR
72732: IFFALSE 72736
// exit ;
72734: GO 72783
// for i = 1 to 3 do
72736: LD_ADDR_VAR 0 3
72740: PUSH
72741: DOUBLE
72742: LD_INT 1
72744: DEC
72745: ST_TO_ADDR
72746: LD_INT 3
72748: PUSH
72749: FOR_TO
72750: IFFALSE 72781
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72752: LD_VAR 0 1
72756: PPUSH
72757: CALL_OW 250
72761: PPUSH
72762: LD_VAR 0 1
72766: PPUSH
72767: CALL_OW 251
72771: PPUSH
72772: LD_INT 1
72774: PPUSH
72775: CALL_OW 453
72779: GO 72749
72781: POP
72782: POP
// end ;
72783: LD_VAR 0 2
72787: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72788: LD_INT 0
72790: PPUSH
72791: PPUSH
72792: PPUSH
72793: PPUSH
72794: PPUSH
72795: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72796: LD_VAR 0 1
72800: NOT
72801: PUSH
72802: LD_VAR 0 2
72806: NOT
72807: OR
72808: PUSH
72809: LD_VAR 0 1
72813: PPUSH
72814: CALL_OW 314
72818: OR
72819: IFFALSE 72823
// exit ;
72821: GO 73264
// x := GetX ( enemy_unit ) ;
72823: LD_ADDR_VAR 0 7
72827: PUSH
72828: LD_VAR 0 2
72832: PPUSH
72833: CALL_OW 250
72837: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72838: LD_ADDR_VAR 0 8
72842: PUSH
72843: LD_VAR 0 2
72847: PPUSH
72848: CALL_OW 251
72852: ST_TO_ADDR
// if not x or not y then
72853: LD_VAR 0 7
72857: NOT
72858: PUSH
72859: LD_VAR 0 8
72863: NOT
72864: OR
72865: IFFALSE 72869
// exit ;
72867: GO 73264
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72869: LD_ADDR_VAR 0 6
72873: PUSH
72874: LD_VAR 0 7
72878: PPUSH
72879: LD_INT 0
72881: PPUSH
72882: LD_INT 4
72884: PPUSH
72885: CALL_OW 272
72889: PUSH
72890: LD_VAR 0 8
72894: PPUSH
72895: LD_INT 0
72897: PPUSH
72898: LD_INT 4
72900: PPUSH
72901: CALL_OW 273
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: PUSH
72910: LD_VAR 0 7
72914: PPUSH
72915: LD_INT 1
72917: PPUSH
72918: LD_INT 4
72920: PPUSH
72921: CALL_OW 272
72925: PUSH
72926: LD_VAR 0 8
72930: PPUSH
72931: LD_INT 1
72933: PPUSH
72934: LD_INT 4
72936: PPUSH
72937: CALL_OW 273
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PUSH
72946: LD_VAR 0 7
72950: PPUSH
72951: LD_INT 2
72953: PPUSH
72954: LD_INT 4
72956: PPUSH
72957: CALL_OW 272
72961: PUSH
72962: LD_VAR 0 8
72966: PPUSH
72967: LD_INT 2
72969: PPUSH
72970: LD_INT 4
72972: PPUSH
72973: CALL_OW 273
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_VAR 0 7
72986: PPUSH
72987: LD_INT 3
72989: PPUSH
72990: LD_INT 4
72992: PPUSH
72993: CALL_OW 272
72997: PUSH
72998: LD_VAR 0 8
73002: PPUSH
73003: LD_INT 3
73005: PPUSH
73006: LD_INT 4
73008: PPUSH
73009: CALL_OW 273
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_VAR 0 7
73022: PPUSH
73023: LD_INT 4
73025: PPUSH
73026: LD_INT 4
73028: PPUSH
73029: CALL_OW 272
73033: PUSH
73034: LD_VAR 0 8
73038: PPUSH
73039: LD_INT 4
73041: PPUSH
73042: LD_INT 4
73044: PPUSH
73045: CALL_OW 273
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PUSH
73054: LD_VAR 0 7
73058: PPUSH
73059: LD_INT 5
73061: PPUSH
73062: LD_INT 4
73064: PPUSH
73065: CALL_OW 272
73069: PUSH
73070: LD_VAR 0 8
73074: PPUSH
73075: LD_INT 5
73077: PPUSH
73078: LD_INT 4
73080: PPUSH
73081: CALL_OW 273
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: EMPTY
73091: LIST
73092: LIST
73093: LIST
73094: LIST
73095: LIST
73096: LIST
73097: ST_TO_ADDR
// for i = tmp downto 1 do
73098: LD_ADDR_VAR 0 4
73102: PUSH
73103: DOUBLE
73104: LD_VAR 0 6
73108: INC
73109: ST_TO_ADDR
73110: LD_INT 1
73112: PUSH
73113: FOR_DOWNTO
73114: IFFALSE 73215
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73116: LD_VAR 0 6
73120: PUSH
73121: LD_VAR 0 4
73125: ARRAY
73126: PUSH
73127: LD_INT 1
73129: ARRAY
73130: PPUSH
73131: LD_VAR 0 6
73135: PUSH
73136: LD_VAR 0 4
73140: ARRAY
73141: PUSH
73142: LD_INT 2
73144: ARRAY
73145: PPUSH
73146: CALL_OW 488
73150: NOT
73151: PUSH
73152: LD_VAR 0 6
73156: PUSH
73157: LD_VAR 0 4
73161: ARRAY
73162: PUSH
73163: LD_INT 1
73165: ARRAY
73166: PPUSH
73167: LD_VAR 0 6
73171: PUSH
73172: LD_VAR 0 4
73176: ARRAY
73177: PUSH
73178: LD_INT 2
73180: ARRAY
73181: PPUSH
73182: CALL_OW 428
73186: PUSH
73187: LD_INT 0
73189: NONEQUAL
73190: OR
73191: IFFALSE 73213
// tmp := Delete ( tmp , i ) ;
73193: LD_ADDR_VAR 0 6
73197: PUSH
73198: LD_VAR 0 6
73202: PPUSH
73203: LD_VAR 0 4
73207: PPUSH
73208: CALL_OW 3
73212: ST_TO_ADDR
73213: GO 73113
73215: POP
73216: POP
// j := GetClosestHex ( unit , tmp ) ;
73217: LD_ADDR_VAR 0 5
73221: PUSH
73222: LD_VAR 0 1
73226: PPUSH
73227: LD_VAR 0 6
73231: PPUSH
73232: CALL 72517 0 2
73236: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73237: LD_VAR 0 1
73241: PPUSH
73242: LD_VAR 0 5
73246: PUSH
73247: LD_INT 1
73249: ARRAY
73250: PPUSH
73251: LD_VAR 0 5
73255: PUSH
73256: LD_INT 2
73258: ARRAY
73259: PPUSH
73260: CALL_OW 111
// end ;
73264: LD_VAR 0 3
73268: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73269: LD_INT 0
73271: PPUSH
73272: PPUSH
73273: PPUSH
// uc_side = 0 ;
73274: LD_ADDR_OWVAR 20
73278: PUSH
73279: LD_INT 0
73281: ST_TO_ADDR
// uc_nation = 0 ;
73282: LD_ADDR_OWVAR 21
73286: PUSH
73287: LD_INT 0
73289: ST_TO_ADDR
// InitHc_All ( ) ;
73290: CALL_OW 584
// InitVc ;
73294: CALL_OW 20
// if mastodonts then
73298: LD_VAR 0 6
73302: IFFALSE 73369
// for i = 1 to mastodonts do
73304: LD_ADDR_VAR 0 11
73308: PUSH
73309: DOUBLE
73310: LD_INT 1
73312: DEC
73313: ST_TO_ADDR
73314: LD_VAR 0 6
73318: PUSH
73319: FOR_TO
73320: IFFALSE 73367
// begin vc_chassis := 31 ;
73322: LD_ADDR_OWVAR 37
73326: PUSH
73327: LD_INT 31
73329: ST_TO_ADDR
// vc_control := control_rider ;
73330: LD_ADDR_OWVAR 38
73334: PUSH
73335: LD_INT 4
73337: ST_TO_ADDR
// animal := CreateVehicle ;
73338: LD_ADDR_VAR 0 12
73342: PUSH
73343: CALL_OW 45
73347: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73348: LD_VAR 0 12
73352: PPUSH
73353: LD_VAR 0 8
73357: PPUSH
73358: LD_INT 0
73360: PPUSH
73361: CALL 75557 0 3
// end ;
73365: GO 73319
73367: POP
73368: POP
// if horses then
73369: LD_VAR 0 5
73373: IFFALSE 73440
// for i = 1 to horses do
73375: LD_ADDR_VAR 0 11
73379: PUSH
73380: DOUBLE
73381: LD_INT 1
73383: DEC
73384: ST_TO_ADDR
73385: LD_VAR 0 5
73389: PUSH
73390: FOR_TO
73391: IFFALSE 73438
// begin hc_class := 21 ;
73393: LD_ADDR_OWVAR 28
73397: PUSH
73398: LD_INT 21
73400: ST_TO_ADDR
// hc_gallery :=  ;
73401: LD_ADDR_OWVAR 33
73405: PUSH
73406: LD_STRING 
73408: ST_TO_ADDR
// animal := CreateHuman ;
73409: LD_ADDR_VAR 0 12
73413: PUSH
73414: CALL_OW 44
73418: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73419: LD_VAR 0 12
73423: PPUSH
73424: LD_VAR 0 8
73428: PPUSH
73429: LD_INT 0
73431: PPUSH
73432: CALL 75557 0 3
// end ;
73436: GO 73390
73438: POP
73439: POP
// if birds then
73440: LD_VAR 0 1
73444: IFFALSE 73511
// for i = 1 to birds do
73446: LD_ADDR_VAR 0 11
73450: PUSH
73451: DOUBLE
73452: LD_INT 1
73454: DEC
73455: ST_TO_ADDR
73456: LD_VAR 0 1
73460: PUSH
73461: FOR_TO
73462: IFFALSE 73509
// begin hc_class = 18 ;
73464: LD_ADDR_OWVAR 28
73468: PUSH
73469: LD_INT 18
73471: ST_TO_ADDR
// hc_gallery =  ;
73472: LD_ADDR_OWVAR 33
73476: PUSH
73477: LD_STRING 
73479: ST_TO_ADDR
// animal := CreateHuman ;
73480: LD_ADDR_VAR 0 12
73484: PUSH
73485: CALL_OW 44
73489: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73490: LD_VAR 0 12
73494: PPUSH
73495: LD_VAR 0 8
73499: PPUSH
73500: LD_INT 0
73502: PPUSH
73503: CALL 75557 0 3
// end ;
73507: GO 73461
73509: POP
73510: POP
// if tigers then
73511: LD_VAR 0 2
73515: IFFALSE 73599
// for i = 1 to tigers do
73517: LD_ADDR_VAR 0 11
73521: PUSH
73522: DOUBLE
73523: LD_INT 1
73525: DEC
73526: ST_TO_ADDR
73527: LD_VAR 0 2
73531: PUSH
73532: FOR_TO
73533: IFFALSE 73597
// begin hc_class = class_tiger ;
73535: LD_ADDR_OWVAR 28
73539: PUSH
73540: LD_INT 14
73542: ST_TO_ADDR
// hc_gallery =  ;
73543: LD_ADDR_OWVAR 33
73547: PUSH
73548: LD_STRING 
73550: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73551: LD_ADDR_OWVAR 35
73555: PUSH
73556: LD_INT 7
73558: NEG
73559: PPUSH
73560: LD_INT 7
73562: PPUSH
73563: CALL_OW 12
73567: ST_TO_ADDR
// animal := CreateHuman ;
73568: LD_ADDR_VAR 0 12
73572: PUSH
73573: CALL_OW 44
73577: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73578: LD_VAR 0 12
73582: PPUSH
73583: LD_VAR 0 8
73587: PPUSH
73588: LD_INT 0
73590: PPUSH
73591: CALL 75557 0 3
// end ;
73595: GO 73532
73597: POP
73598: POP
// if apemans then
73599: LD_VAR 0 3
73603: IFFALSE 73726
// for i = 1 to apemans do
73605: LD_ADDR_VAR 0 11
73609: PUSH
73610: DOUBLE
73611: LD_INT 1
73613: DEC
73614: ST_TO_ADDR
73615: LD_VAR 0 3
73619: PUSH
73620: FOR_TO
73621: IFFALSE 73724
// begin hc_class = class_apeman ;
73623: LD_ADDR_OWVAR 28
73627: PUSH
73628: LD_INT 12
73630: ST_TO_ADDR
// hc_gallery =  ;
73631: LD_ADDR_OWVAR 33
73635: PUSH
73636: LD_STRING 
73638: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73639: LD_ADDR_OWVAR 35
73643: PUSH
73644: LD_INT 2
73646: NEG
73647: PPUSH
73648: LD_INT 2
73650: PPUSH
73651: CALL_OW 12
73655: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73656: LD_ADDR_OWVAR 31
73660: PUSH
73661: LD_INT 1
73663: PPUSH
73664: LD_INT 3
73666: PPUSH
73667: CALL_OW 12
73671: PUSH
73672: LD_INT 1
73674: PPUSH
73675: LD_INT 3
73677: PPUSH
73678: CALL_OW 12
73682: PUSH
73683: LD_INT 0
73685: PUSH
73686: LD_INT 0
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: ST_TO_ADDR
// animal := CreateHuman ;
73695: LD_ADDR_VAR 0 12
73699: PUSH
73700: CALL_OW 44
73704: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73705: LD_VAR 0 12
73709: PPUSH
73710: LD_VAR 0 8
73714: PPUSH
73715: LD_INT 0
73717: PPUSH
73718: CALL 75557 0 3
// end ;
73722: GO 73620
73724: POP
73725: POP
// if enchidnas then
73726: LD_VAR 0 4
73730: IFFALSE 73797
// for i = 1 to enchidnas do
73732: LD_ADDR_VAR 0 11
73736: PUSH
73737: DOUBLE
73738: LD_INT 1
73740: DEC
73741: ST_TO_ADDR
73742: LD_VAR 0 4
73746: PUSH
73747: FOR_TO
73748: IFFALSE 73795
// begin hc_class = 13 ;
73750: LD_ADDR_OWVAR 28
73754: PUSH
73755: LD_INT 13
73757: ST_TO_ADDR
// hc_gallery =  ;
73758: LD_ADDR_OWVAR 33
73762: PUSH
73763: LD_STRING 
73765: ST_TO_ADDR
// animal := CreateHuman ;
73766: LD_ADDR_VAR 0 12
73770: PUSH
73771: CALL_OW 44
73775: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73776: LD_VAR 0 12
73780: PPUSH
73781: LD_VAR 0 8
73785: PPUSH
73786: LD_INT 0
73788: PPUSH
73789: CALL 75557 0 3
// end ;
73793: GO 73747
73795: POP
73796: POP
// if fishes then
73797: LD_VAR 0 7
73801: IFFALSE 73868
// for i = 1 to fishes do
73803: LD_ADDR_VAR 0 11
73807: PUSH
73808: DOUBLE
73809: LD_INT 1
73811: DEC
73812: ST_TO_ADDR
73813: LD_VAR 0 7
73817: PUSH
73818: FOR_TO
73819: IFFALSE 73866
// begin hc_class = 20 ;
73821: LD_ADDR_OWVAR 28
73825: PUSH
73826: LD_INT 20
73828: ST_TO_ADDR
// hc_gallery =  ;
73829: LD_ADDR_OWVAR 33
73833: PUSH
73834: LD_STRING 
73836: ST_TO_ADDR
// animal := CreateHuman ;
73837: LD_ADDR_VAR 0 12
73841: PUSH
73842: CALL_OW 44
73846: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73847: LD_VAR 0 12
73851: PPUSH
73852: LD_VAR 0 9
73856: PPUSH
73857: LD_INT 0
73859: PPUSH
73860: CALL 75557 0 3
// end ;
73864: GO 73818
73866: POP
73867: POP
// end ;
73868: LD_VAR 0 10
73872: RET
// export function WantHeal ( sci , unit ) ; begin
73873: LD_INT 0
73875: PPUSH
// if GetTaskList ( sci ) > 0 then
73876: LD_VAR 0 1
73880: PPUSH
73881: CALL_OW 437
73885: PUSH
73886: LD_INT 0
73888: GREATER
73889: IFFALSE 73959
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73891: LD_VAR 0 1
73895: PPUSH
73896: CALL_OW 437
73900: PUSH
73901: LD_INT 1
73903: ARRAY
73904: PUSH
73905: LD_INT 1
73907: ARRAY
73908: PUSH
73909: LD_STRING l
73911: EQUAL
73912: PUSH
73913: LD_VAR 0 1
73917: PPUSH
73918: CALL_OW 437
73922: PUSH
73923: LD_INT 1
73925: ARRAY
73926: PUSH
73927: LD_INT 4
73929: ARRAY
73930: PUSH
73931: LD_VAR 0 2
73935: EQUAL
73936: AND
73937: IFFALSE 73949
// result := true else
73939: LD_ADDR_VAR 0 3
73943: PUSH
73944: LD_INT 1
73946: ST_TO_ADDR
73947: GO 73957
// result := false ;
73949: LD_ADDR_VAR 0 3
73953: PUSH
73954: LD_INT 0
73956: ST_TO_ADDR
// end else
73957: GO 73967
// result := false ;
73959: LD_ADDR_VAR 0 3
73963: PUSH
73964: LD_INT 0
73966: ST_TO_ADDR
// end ;
73967: LD_VAR 0 3
73971: RET
// export function HealTarget ( sci ) ; begin
73972: LD_INT 0
73974: PPUSH
// if not sci then
73975: LD_VAR 0 1
73979: NOT
73980: IFFALSE 73984
// exit ;
73982: GO 74049
// result := 0 ;
73984: LD_ADDR_VAR 0 2
73988: PUSH
73989: LD_INT 0
73991: ST_TO_ADDR
// if GetTaskList ( sci ) then
73992: LD_VAR 0 1
73996: PPUSH
73997: CALL_OW 437
74001: IFFALSE 74049
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74003: LD_VAR 0 1
74007: PPUSH
74008: CALL_OW 437
74012: PUSH
74013: LD_INT 1
74015: ARRAY
74016: PUSH
74017: LD_INT 1
74019: ARRAY
74020: PUSH
74021: LD_STRING l
74023: EQUAL
74024: IFFALSE 74049
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74026: LD_ADDR_VAR 0 2
74030: PUSH
74031: LD_VAR 0 1
74035: PPUSH
74036: CALL_OW 437
74040: PUSH
74041: LD_INT 1
74043: ARRAY
74044: PUSH
74045: LD_INT 4
74047: ARRAY
74048: ST_TO_ADDR
// end ;
74049: LD_VAR 0 2
74053: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74054: LD_INT 0
74056: PPUSH
74057: PPUSH
74058: PPUSH
74059: PPUSH
// if not base_units then
74060: LD_VAR 0 1
74064: NOT
74065: IFFALSE 74069
// exit ;
74067: GO 74156
// result := false ;
74069: LD_ADDR_VAR 0 2
74073: PUSH
74074: LD_INT 0
74076: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74077: LD_ADDR_VAR 0 5
74081: PUSH
74082: LD_VAR 0 1
74086: PPUSH
74087: LD_INT 21
74089: PUSH
74090: LD_INT 3
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: PPUSH
74097: CALL_OW 72
74101: ST_TO_ADDR
// if not tmp then
74102: LD_VAR 0 5
74106: NOT
74107: IFFALSE 74111
// exit ;
74109: GO 74156
// for i in tmp do
74111: LD_ADDR_VAR 0 3
74115: PUSH
74116: LD_VAR 0 5
74120: PUSH
74121: FOR_IN
74122: IFFALSE 74154
// begin result := EnemyInRange ( i , 22 ) ;
74124: LD_ADDR_VAR 0 2
74128: PUSH
74129: LD_VAR 0 3
74133: PPUSH
74134: LD_INT 22
74136: PPUSH
74137: CALL 72392 0 2
74141: ST_TO_ADDR
// if result then
74142: LD_VAR 0 2
74146: IFFALSE 74152
// exit ;
74148: POP
74149: POP
74150: GO 74156
// end ;
74152: GO 74121
74154: POP
74155: POP
// end ;
74156: LD_VAR 0 2
74160: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
74161: LD_INT 0
74163: PPUSH
74164: PPUSH
// if not units then
74165: LD_VAR 0 1
74169: NOT
74170: IFFALSE 74174
// exit ;
74172: GO 74244
// result := [ ] ;
74174: LD_ADDR_VAR 0 3
74178: PUSH
74179: EMPTY
74180: ST_TO_ADDR
// for i in units do
74181: LD_ADDR_VAR 0 4
74185: PUSH
74186: LD_VAR 0 1
74190: PUSH
74191: FOR_IN
74192: IFFALSE 74242
// if GetTag ( i ) = tag then
74194: LD_VAR 0 4
74198: PPUSH
74199: CALL_OW 110
74203: PUSH
74204: LD_VAR 0 2
74208: EQUAL
74209: IFFALSE 74240
// result := Insert ( result , result + 1 , i ) ;
74211: LD_ADDR_VAR 0 3
74215: PUSH
74216: LD_VAR 0 3
74220: PPUSH
74221: LD_VAR 0 3
74225: PUSH
74226: LD_INT 1
74228: PLUS
74229: PPUSH
74230: LD_VAR 0 4
74234: PPUSH
74235: CALL_OW 2
74239: ST_TO_ADDR
74240: GO 74191
74242: POP
74243: POP
// end ;
74244: LD_VAR 0 3
74248: RET
// export function IsDriver ( un ) ; begin
74249: LD_INT 0
74251: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74252: LD_ADDR_VAR 0 2
74256: PUSH
74257: LD_VAR 0 1
74261: PUSH
74262: LD_INT 55
74264: PUSH
74265: EMPTY
74266: LIST
74267: PPUSH
74268: CALL_OW 69
74272: IN
74273: ST_TO_ADDR
// end ;
74274: LD_VAR 0 2
74278: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74279: LD_INT 0
74281: PPUSH
74282: PPUSH
// list := [ ] ;
74283: LD_ADDR_VAR 0 5
74287: PUSH
74288: EMPTY
74289: ST_TO_ADDR
// case d of 0 :
74290: LD_VAR 0 3
74294: PUSH
74295: LD_INT 0
74297: DOUBLE
74298: EQUAL
74299: IFTRUE 74303
74301: GO 74436
74303: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74304: LD_ADDR_VAR 0 5
74308: PUSH
74309: LD_VAR 0 1
74313: PUSH
74314: LD_INT 4
74316: MINUS
74317: PUSH
74318: LD_VAR 0 2
74322: PUSH
74323: LD_INT 4
74325: MINUS
74326: PUSH
74327: LD_INT 2
74329: PUSH
74330: EMPTY
74331: LIST
74332: LIST
74333: LIST
74334: PUSH
74335: LD_VAR 0 1
74339: PUSH
74340: LD_INT 3
74342: MINUS
74343: PUSH
74344: LD_VAR 0 2
74348: PUSH
74349: LD_INT 1
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: LIST
74356: PUSH
74357: LD_VAR 0 1
74361: PUSH
74362: LD_INT 4
74364: PLUS
74365: PUSH
74366: LD_VAR 0 2
74370: PUSH
74371: LD_INT 4
74373: PUSH
74374: EMPTY
74375: LIST
74376: LIST
74377: LIST
74378: PUSH
74379: LD_VAR 0 1
74383: PUSH
74384: LD_INT 3
74386: PLUS
74387: PUSH
74388: LD_VAR 0 2
74392: PUSH
74393: LD_INT 3
74395: PLUS
74396: PUSH
74397: LD_INT 5
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: LIST
74404: PUSH
74405: LD_VAR 0 1
74409: PUSH
74410: LD_VAR 0 2
74414: PUSH
74415: LD_INT 4
74417: PLUS
74418: PUSH
74419: LD_INT 0
74421: PUSH
74422: EMPTY
74423: LIST
74424: LIST
74425: LIST
74426: PUSH
74427: EMPTY
74428: LIST
74429: LIST
74430: LIST
74431: LIST
74432: LIST
74433: ST_TO_ADDR
// end ; 1 :
74434: GO 75134
74436: LD_INT 1
74438: DOUBLE
74439: EQUAL
74440: IFTRUE 74444
74442: GO 74577
74444: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74445: LD_ADDR_VAR 0 5
74449: PUSH
74450: LD_VAR 0 1
74454: PUSH
74455: LD_VAR 0 2
74459: PUSH
74460: LD_INT 4
74462: MINUS
74463: PUSH
74464: LD_INT 3
74466: PUSH
74467: EMPTY
74468: LIST
74469: LIST
74470: LIST
74471: PUSH
74472: LD_VAR 0 1
74476: PUSH
74477: LD_INT 3
74479: MINUS
74480: PUSH
74481: LD_VAR 0 2
74485: PUSH
74486: LD_INT 3
74488: MINUS
74489: PUSH
74490: LD_INT 2
74492: PUSH
74493: EMPTY
74494: LIST
74495: LIST
74496: LIST
74497: PUSH
74498: LD_VAR 0 1
74502: PUSH
74503: LD_INT 4
74505: MINUS
74506: PUSH
74507: LD_VAR 0 2
74511: PUSH
74512: LD_INT 1
74514: PUSH
74515: EMPTY
74516: LIST
74517: LIST
74518: LIST
74519: PUSH
74520: LD_VAR 0 1
74524: PUSH
74525: LD_VAR 0 2
74529: PUSH
74530: LD_INT 3
74532: PLUS
74533: PUSH
74534: LD_INT 0
74536: PUSH
74537: EMPTY
74538: LIST
74539: LIST
74540: LIST
74541: PUSH
74542: LD_VAR 0 1
74546: PUSH
74547: LD_INT 4
74549: PLUS
74550: PUSH
74551: LD_VAR 0 2
74555: PUSH
74556: LD_INT 4
74558: PLUS
74559: PUSH
74560: LD_INT 5
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: LIST
74567: PUSH
74568: EMPTY
74569: LIST
74570: LIST
74571: LIST
74572: LIST
74573: LIST
74574: ST_TO_ADDR
// end ; 2 :
74575: GO 75134
74577: LD_INT 2
74579: DOUBLE
74580: EQUAL
74581: IFTRUE 74585
74583: GO 74714
74585: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74586: LD_ADDR_VAR 0 5
74590: PUSH
74591: LD_VAR 0 1
74595: PUSH
74596: LD_VAR 0 2
74600: PUSH
74601: LD_INT 3
74603: MINUS
74604: PUSH
74605: LD_INT 3
74607: PUSH
74608: EMPTY
74609: LIST
74610: LIST
74611: LIST
74612: PUSH
74613: LD_VAR 0 1
74617: PUSH
74618: LD_INT 4
74620: PLUS
74621: PUSH
74622: LD_VAR 0 2
74626: PUSH
74627: LD_INT 4
74629: PUSH
74630: EMPTY
74631: LIST
74632: LIST
74633: LIST
74634: PUSH
74635: LD_VAR 0 1
74639: PUSH
74640: LD_VAR 0 2
74644: PUSH
74645: LD_INT 4
74647: PLUS
74648: PUSH
74649: LD_INT 0
74651: PUSH
74652: EMPTY
74653: LIST
74654: LIST
74655: LIST
74656: PUSH
74657: LD_VAR 0 1
74661: PUSH
74662: LD_INT 3
74664: MINUS
74665: PUSH
74666: LD_VAR 0 2
74670: PUSH
74671: LD_INT 1
74673: PUSH
74674: EMPTY
74675: LIST
74676: LIST
74677: LIST
74678: PUSH
74679: LD_VAR 0 1
74683: PUSH
74684: LD_INT 4
74686: MINUS
74687: PUSH
74688: LD_VAR 0 2
74692: PUSH
74693: LD_INT 4
74695: MINUS
74696: PUSH
74697: LD_INT 2
74699: PUSH
74700: EMPTY
74701: LIST
74702: LIST
74703: LIST
74704: PUSH
74705: EMPTY
74706: LIST
74707: LIST
74708: LIST
74709: LIST
74710: LIST
74711: ST_TO_ADDR
// end ; 3 :
74712: GO 75134
74714: LD_INT 3
74716: DOUBLE
74717: EQUAL
74718: IFTRUE 74722
74720: GO 74855
74722: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74723: LD_ADDR_VAR 0 5
74727: PUSH
74728: LD_VAR 0 1
74732: PUSH
74733: LD_INT 3
74735: PLUS
74736: PUSH
74737: LD_VAR 0 2
74741: PUSH
74742: LD_INT 4
74744: PUSH
74745: EMPTY
74746: LIST
74747: LIST
74748: LIST
74749: PUSH
74750: LD_VAR 0 1
74754: PUSH
74755: LD_INT 4
74757: PLUS
74758: PUSH
74759: LD_VAR 0 2
74763: PUSH
74764: LD_INT 4
74766: PLUS
74767: PUSH
74768: LD_INT 5
74770: PUSH
74771: EMPTY
74772: LIST
74773: LIST
74774: LIST
74775: PUSH
74776: LD_VAR 0 1
74780: PUSH
74781: LD_INT 4
74783: MINUS
74784: PUSH
74785: LD_VAR 0 2
74789: PUSH
74790: LD_INT 1
74792: PUSH
74793: EMPTY
74794: LIST
74795: LIST
74796: LIST
74797: PUSH
74798: LD_VAR 0 1
74802: PUSH
74803: LD_VAR 0 2
74807: PUSH
74808: LD_INT 4
74810: MINUS
74811: PUSH
74812: LD_INT 3
74814: PUSH
74815: EMPTY
74816: LIST
74817: LIST
74818: LIST
74819: PUSH
74820: LD_VAR 0 1
74824: PUSH
74825: LD_INT 3
74827: MINUS
74828: PUSH
74829: LD_VAR 0 2
74833: PUSH
74834: LD_INT 3
74836: MINUS
74837: PUSH
74838: LD_INT 2
74840: PUSH
74841: EMPTY
74842: LIST
74843: LIST
74844: LIST
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: LIST
74852: ST_TO_ADDR
// end ; 4 :
74853: GO 75134
74855: LD_INT 4
74857: DOUBLE
74858: EQUAL
74859: IFTRUE 74863
74861: GO 74996
74863: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74864: LD_ADDR_VAR 0 5
74868: PUSH
74869: LD_VAR 0 1
74873: PUSH
74874: LD_VAR 0 2
74878: PUSH
74879: LD_INT 4
74881: PLUS
74882: PUSH
74883: LD_INT 0
74885: PUSH
74886: EMPTY
74887: LIST
74888: LIST
74889: LIST
74890: PUSH
74891: LD_VAR 0 1
74895: PUSH
74896: LD_INT 3
74898: PLUS
74899: PUSH
74900: LD_VAR 0 2
74904: PUSH
74905: LD_INT 3
74907: PLUS
74908: PUSH
74909: LD_INT 5
74911: PUSH
74912: EMPTY
74913: LIST
74914: LIST
74915: LIST
74916: PUSH
74917: LD_VAR 0 1
74921: PUSH
74922: LD_INT 4
74924: PLUS
74925: PUSH
74926: LD_VAR 0 2
74930: PUSH
74931: LD_INT 4
74933: PUSH
74934: EMPTY
74935: LIST
74936: LIST
74937: LIST
74938: PUSH
74939: LD_VAR 0 1
74943: PUSH
74944: LD_VAR 0 2
74948: PUSH
74949: LD_INT 3
74951: MINUS
74952: PUSH
74953: LD_INT 3
74955: PUSH
74956: EMPTY
74957: LIST
74958: LIST
74959: LIST
74960: PUSH
74961: LD_VAR 0 1
74965: PUSH
74966: LD_INT 4
74968: MINUS
74969: PUSH
74970: LD_VAR 0 2
74974: PUSH
74975: LD_INT 4
74977: MINUS
74978: PUSH
74979: LD_INT 2
74981: PUSH
74982: EMPTY
74983: LIST
74984: LIST
74985: LIST
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: ST_TO_ADDR
// end ; 5 :
74994: GO 75134
74996: LD_INT 5
74998: DOUBLE
74999: EQUAL
75000: IFTRUE 75004
75002: GO 75133
75004: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75005: LD_ADDR_VAR 0 5
75009: PUSH
75010: LD_VAR 0 1
75014: PUSH
75015: LD_INT 4
75017: MINUS
75018: PUSH
75019: LD_VAR 0 2
75023: PUSH
75024: LD_INT 1
75026: PUSH
75027: EMPTY
75028: LIST
75029: LIST
75030: LIST
75031: PUSH
75032: LD_VAR 0 1
75036: PUSH
75037: LD_VAR 0 2
75041: PUSH
75042: LD_INT 4
75044: MINUS
75045: PUSH
75046: LD_INT 3
75048: PUSH
75049: EMPTY
75050: LIST
75051: LIST
75052: LIST
75053: PUSH
75054: LD_VAR 0 1
75058: PUSH
75059: LD_INT 4
75061: PLUS
75062: PUSH
75063: LD_VAR 0 2
75067: PUSH
75068: LD_INT 4
75070: PLUS
75071: PUSH
75072: LD_INT 5
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: LIST
75079: PUSH
75080: LD_VAR 0 1
75084: PUSH
75085: LD_INT 3
75087: PLUS
75088: PUSH
75089: LD_VAR 0 2
75093: PUSH
75094: LD_INT 4
75096: PUSH
75097: EMPTY
75098: LIST
75099: LIST
75100: LIST
75101: PUSH
75102: LD_VAR 0 1
75106: PUSH
75107: LD_VAR 0 2
75111: PUSH
75112: LD_INT 3
75114: PLUS
75115: PUSH
75116: LD_INT 0
75118: PUSH
75119: EMPTY
75120: LIST
75121: LIST
75122: LIST
75123: PUSH
75124: EMPTY
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: ST_TO_ADDR
// end ; end ;
75131: GO 75134
75133: POP
// result := list ;
75134: LD_ADDR_VAR 0 4
75138: PUSH
75139: LD_VAR 0 5
75143: ST_TO_ADDR
// end ;
75144: LD_VAR 0 4
75148: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75149: LD_INT 0
75151: PPUSH
75152: PPUSH
75153: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75154: LD_VAR 0 1
75158: NOT
75159: PUSH
75160: LD_VAR 0 2
75164: PUSH
75165: LD_INT 1
75167: PUSH
75168: LD_INT 2
75170: PUSH
75171: LD_INT 3
75173: PUSH
75174: LD_INT 4
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: LIST
75181: LIST
75182: IN
75183: NOT
75184: OR
75185: IFFALSE 75189
// exit ;
75187: GO 75281
// tmp := [ ] ;
75189: LD_ADDR_VAR 0 5
75193: PUSH
75194: EMPTY
75195: ST_TO_ADDR
// for i in units do
75196: LD_ADDR_VAR 0 4
75200: PUSH
75201: LD_VAR 0 1
75205: PUSH
75206: FOR_IN
75207: IFFALSE 75250
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75209: LD_ADDR_VAR 0 5
75213: PUSH
75214: LD_VAR 0 5
75218: PPUSH
75219: LD_VAR 0 5
75223: PUSH
75224: LD_INT 1
75226: PLUS
75227: PPUSH
75228: LD_VAR 0 4
75232: PPUSH
75233: LD_VAR 0 2
75237: PPUSH
75238: CALL_OW 259
75242: PPUSH
75243: CALL_OW 2
75247: ST_TO_ADDR
75248: GO 75206
75250: POP
75251: POP
// if not tmp then
75252: LD_VAR 0 5
75256: NOT
75257: IFFALSE 75261
// exit ;
75259: GO 75281
// result := SortListByListDesc ( units , tmp ) ;
75261: LD_ADDR_VAR 0 3
75265: PUSH
75266: LD_VAR 0 1
75270: PPUSH
75271: LD_VAR 0 5
75275: PPUSH
75276: CALL_OW 77
75280: ST_TO_ADDR
// end ;
75281: LD_VAR 0 3
75285: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75286: LD_INT 0
75288: PPUSH
75289: PPUSH
75290: PPUSH
// result := false ;
75291: LD_ADDR_VAR 0 3
75295: PUSH
75296: LD_INT 0
75298: ST_TO_ADDR
// x := GetX ( building ) ;
75299: LD_ADDR_VAR 0 4
75303: PUSH
75304: LD_VAR 0 2
75308: PPUSH
75309: CALL_OW 250
75313: ST_TO_ADDR
// y := GetY ( building ) ;
75314: LD_ADDR_VAR 0 5
75318: PUSH
75319: LD_VAR 0 2
75323: PPUSH
75324: CALL_OW 251
75328: ST_TO_ADDR
// if not building or not x or not y then
75329: LD_VAR 0 2
75333: NOT
75334: PUSH
75335: LD_VAR 0 4
75339: NOT
75340: OR
75341: PUSH
75342: LD_VAR 0 5
75346: NOT
75347: OR
75348: IFFALSE 75352
// exit ;
75350: GO 75444
// if GetTaskList ( unit ) then
75352: LD_VAR 0 1
75356: PPUSH
75357: CALL_OW 437
75361: IFFALSE 75444
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75363: LD_STRING e
75365: PUSH
75366: LD_VAR 0 1
75370: PPUSH
75371: CALL_OW 437
75375: PUSH
75376: LD_INT 1
75378: ARRAY
75379: PUSH
75380: LD_INT 1
75382: ARRAY
75383: EQUAL
75384: PUSH
75385: LD_VAR 0 4
75389: PUSH
75390: LD_VAR 0 1
75394: PPUSH
75395: CALL_OW 437
75399: PUSH
75400: LD_INT 1
75402: ARRAY
75403: PUSH
75404: LD_INT 2
75406: ARRAY
75407: EQUAL
75408: AND
75409: PUSH
75410: LD_VAR 0 5
75414: PUSH
75415: LD_VAR 0 1
75419: PPUSH
75420: CALL_OW 437
75424: PUSH
75425: LD_INT 1
75427: ARRAY
75428: PUSH
75429: LD_INT 3
75431: ARRAY
75432: EQUAL
75433: AND
75434: IFFALSE 75444
// result := true end ;
75436: LD_ADDR_VAR 0 3
75440: PUSH
75441: LD_INT 1
75443: ST_TO_ADDR
// end ;
75444: LD_VAR 0 3
75448: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75449: LD_INT 0
75451: PPUSH
// result := false ;
75452: LD_ADDR_VAR 0 4
75456: PUSH
75457: LD_INT 0
75459: ST_TO_ADDR
// if GetTaskList ( unit ) then
75460: LD_VAR 0 1
75464: PPUSH
75465: CALL_OW 437
75469: IFFALSE 75552
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75471: LD_STRING M
75473: PUSH
75474: LD_VAR 0 1
75478: PPUSH
75479: CALL_OW 437
75483: PUSH
75484: LD_INT 1
75486: ARRAY
75487: PUSH
75488: LD_INT 1
75490: ARRAY
75491: EQUAL
75492: PUSH
75493: LD_VAR 0 2
75497: PUSH
75498: LD_VAR 0 1
75502: PPUSH
75503: CALL_OW 437
75507: PUSH
75508: LD_INT 1
75510: ARRAY
75511: PUSH
75512: LD_INT 2
75514: ARRAY
75515: EQUAL
75516: AND
75517: PUSH
75518: LD_VAR 0 3
75522: PUSH
75523: LD_VAR 0 1
75527: PPUSH
75528: CALL_OW 437
75532: PUSH
75533: LD_INT 1
75535: ARRAY
75536: PUSH
75537: LD_INT 3
75539: ARRAY
75540: EQUAL
75541: AND
75542: IFFALSE 75552
// result := true ;
75544: LD_ADDR_VAR 0 4
75548: PUSH
75549: LD_INT 1
75551: ST_TO_ADDR
// end ; end ;
75552: LD_VAR 0 4
75556: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75557: LD_INT 0
75559: PPUSH
75560: PPUSH
75561: PPUSH
75562: PPUSH
// if not unit or not area then
75563: LD_VAR 0 1
75567: NOT
75568: PUSH
75569: LD_VAR 0 2
75573: NOT
75574: OR
75575: IFFALSE 75579
// exit ;
75577: GO 75743
// tmp := AreaToList ( area , i ) ;
75579: LD_ADDR_VAR 0 6
75583: PUSH
75584: LD_VAR 0 2
75588: PPUSH
75589: LD_VAR 0 5
75593: PPUSH
75594: CALL_OW 517
75598: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75599: LD_ADDR_VAR 0 5
75603: PUSH
75604: DOUBLE
75605: LD_INT 1
75607: DEC
75608: ST_TO_ADDR
75609: LD_VAR 0 6
75613: PUSH
75614: LD_INT 1
75616: ARRAY
75617: PUSH
75618: FOR_TO
75619: IFFALSE 75741
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75621: LD_ADDR_VAR 0 7
75625: PUSH
75626: LD_VAR 0 6
75630: PUSH
75631: LD_INT 1
75633: ARRAY
75634: PUSH
75635: LD_VAR 0 5
75639: ARRAY
75640: PUSH
75641: LD_VAR 0 6
75645: PUSH
75646: LD_INT 2
75648: ARRAY
75649: PUSH
75650: LD_VAR 0 5
75654: ARRAY
75655: PUSH
75656: EMPTY
75657: LIST
75658: LIST
75659: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75660: LD_VAR 0 7
75664: PUSH
75665: LD_INT 1
75667: ARRAY
75668: PPUSH
75669: LD_VAR 0 7
75673: PUSH
75674: LD_INT 2
75676: ARRAY
75677: PPUSH
75678: CALL_OW 428
75682: PUSH
75683: LD_INT 0
75685: EQUAL
75686: IFFALSE 75739
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75688: LD_VAR 0 1
75692: PPUSH
75693: LD_VAR 0 7
75697: PUSH
75698: LD_INT 1
75700: ARRAY
75701: PPUSH
75702: LD_VAR 0 7
75706: PUSH
75707: LD_INT 2
75709: ARRAY
75710: PPUSH
75711: LD_VAR 0 3
75715: PPUSH
75716: CALL_OW 48
// result := IsPlaced ( unit ) ;
75720: LD_ADDR_VAR 0 4
75724: PUSH
75725: LD_VAR 0 1
75729: PPUSH
75730: CALL_OW 305
75734: ST_TO_ADDR
// exit ;
75735: POP
75736: POP
75737: GO 75743
// end ; end ;
75739: GO 75618
75741: POP
75742: POP
// end ;
75743: LD_VAR 0 4
75747: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75748: LD_INT 0
75750: PPUSH
75751: PPUSH
75752: PPUSH
// if not side or side > 8 then
75753: LD_VAR 0 1
75757: NOT
75758: PUSH
75759: LD_VAR 0 1
75763: PUSH
75764: LD_INT 8
75766: GREATER
75767: OR
75768: IFFALSE 75772
// exit ;
75770: GO 75959
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75772: LD_ADDR_VAR 0 4
75776: PUSH
75777: LD_INT 22
75779: PUSH
75780: LD_VAR 0 1
75784: PUSH
75785: EMPTY
75786: LIST
75787: LIST
75788: PUSH
75789: LD_INT 21
75791: PUSH
75792: LD_INT 3
75794: PUSH
75795: EMPTY
75796: LIST
75797: LIST
75798: PUSH
75799: EMPTY
75800: LIST
75801: LIST
75802: PPUSH
75803: CALL_OW 69
75807: ST_TO_ADDR
// if not tmp then
75808: LD_VAR 0 4
75812: NOT
75813: IFFALSE 75817
// exit ;
75815: GO 75959
// enable_addtolog := true ;
75817: LD_ADDR_OWVAR 81
75821: PUSH
75822: LD_INT 1
75824: ST_TO_ADDR
// AddToLog ( [ ) ;
75825: LD_STRING [
75827: PPUSH
75828: CALL_OW 561
// for i in tmp do
75832: LD_ADDR_VAR 0 3
75836: PUSH
75837: LD_VAR 0 4
75841: PUSH
75842: FOR_IN
75843: IFFALSE 75950
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75845: LD_STRING [
75847: PUSH
75848: LD_VAR 0 3
75852: PPUSH
75853: CALL_OW 266
75857: STR
75858: PUSH
75859: LD_STRING , 
75861: STR
75862: PUSH
75863: LD_VAR 0 3
75867: PPUSH
75868: CALL_OW 250
75872: STR
75873: PUSH
75874: LD_STRING , 
75876: STR
75877: PUSH
75878: LD_VAR 0 3
75882: PPUSH
75883: CALL_OW 251
75887: STR
75888: PUSH
75889: LD_STRING , 
75891: STR
75892: PUSH
75893: LD_VAR 0 3
75897: PPUSH
75898: CALL_OW 254
75902: STR
75903: PUSH
75904: LD_STRING , 
75906: STR
75907: PUSH
75908: LD_VAR 0 3
75912: PPUSH
75913: LD_INT 1
75915: PPUSH
75916: CALL_OW 268
75920: STR
75921: PUSH
75922: LD_STRING , 
75924: STR
75925: PUSH
75926: LD_VAR 0 3
75930: PPUSH
75931: LD_INT 2
75933: PPUSH
75934: CALL_OW 268
75938: STR
75939: PUSH
75940: LD_STRING ],
75942: STR
75943: PPUSH
75944: CALL_OW 561
// end ;
75948: GO 75842
75950: POP
75951: POP
// AddToLog ( ]; ) ;
75952: LD_STRING ];
75954: PPUSH
75955: CALL_OW 561
// end ;
75959: LD_VAR 0 2
75963: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75964: LD_INT 0
75966: PPUSH
75967: PPUSH
75968: PPUSH
75969: PPUSH
75970: PPUSH
// if not area or not rate or not max then
75971: LD_VAR 0 1
75975: NOT
75976: PUSH
75977: LD_VAR 0 2
75981: NOT
75982: OR
75983: PUSH
75984: LD_VAR 0 4
75988: NOT
75989: OR
75990: IFFALSE 75994
// exit ;
75992: GO 76186
// while 1 do
75994: LD_INT 1
75996: IFFALSE 76186
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75998: LD_ADDR_VAR 0 9
76002: PUSH
76003: LD_VAR 0 1
76007: PPUSH
76008: LD_INT 1
76010: PPUSH
76011: CALL_OW 287
76015: PUSH
76016: LD_INT 10
76018: MUL
76019: ST_TO_ADDR
// r := rate / 10 ;
76020: LD_ADDR_VAR 0 7
76024: PUSH
76025: LD_VAR 0 2
76029: PUSH
76030: LD_INT 10
76032: DIVREAL
76033: ST_TO_ADDR
// time := 1 1$00 ;
76034: LD_ADDR_VAR 0 8
76038: PUSH
76039: LD_INT 2100
76041: ST_TO_ADDR
// if amount < min then
76042: LD_VAR 0 9
76046: PUSH
76047: LD_VAR 0 3
76051: LESS
76052: IFFALSE 76070
// r := r * 2 else
76054: LD_ADDR_VAR 0 7
76058: PUSH
76059: LD_VAR 0 7
76063: PUSH
76064: LD_INT 2
76066: MUL
76067: ST_TO_ADDR
76068: GO 76096
// if amount > max then
76070: LD_VAR 0 9
76074: PUSH
76075: LD_VAR 0 4
76079: GREATER
76080: IFFALSE 76096
// r := r / 2 ;
76082: LD_ADDR_VAR 0 7
76086: PUSH
76087: LD_VAR 0 7
76091: PUSH
76092: LD_INT 2
76094: DIVREAL
76095: ST_TO_ADDR
// time := time / r ;
76096: LD_ADDR_VAR 0 8
76100: PUSH
76101: LD_VAR 0 8
76105: PUSH
76106: LD_VAR 0 7
76110: DIVREAL
76111: ST_TO_ADDR
// if time < 0 then
76112: LD_VAR 0 8
76116: PUSH
76117: LD_INT 0
76119: LESS
76120: IFFALSE 76137
// time := time * - 1 ;
76122: LD_ADDR_VAR 0 8
76126: PUSH
76127: LD_VAR 0 8
76131: PUSH
76132: LD_INT 1
76134: NEG
76135: MUL
76136: ST_TO_ADDR
// wait ( time ) ;
76137: LD_VAR 0 8
76141: PPUSH
76142: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
76146: LD_INT 35
76148: PPUSH
76149: LD_INT 875
76151: PPUSH
76152: CALL_OW 12
76156: PPUSH
76157: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76161: LD_INT 1
76163: PPUSH
76164: LD_INT 5
76166: PPUSH
76167: CALL_OW 12
76171: PPUSH
76172: LD_VAR 0 1
76176: PPUSH
76177: LD_INT 1
76179: PPUSH
76180: CALL_OW 55
// end ;
76184: GO 75994
// end ;
76186: LD_VAR 0 5
76190: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76191: LD_INT 0
76193: PPUSH
76194: PPUSH
76195: PPUSH
76196: PPUSH
76197: PPUSH
76198: PPUSH
76199: PPUSH
76200: PPUSH
// if not turrets or not factories then
76201: LD_VAR 0 1
76205: NOT
76206: PUSH
76207: LD_VAR 0 2
76211: NOT
76212: OR
76213: IFFALSE 76217
// exit ;
76215: GO 76524
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76217: LD_ADDR_VAR 0 10
76221: PUSH
76222: LD_INT 5
76224: PUSH
76225: LD_INT 6
76227: PUSH
76228: EMPTY
76229: LIST
76230: LIST
76231: PUSH
76232: LD_INT 2
76234: PUSH
76235: LD_INT 4
76237: PUSH
76238: EMPTY
76239: LIST
76240: LIST
76241: PUSH
76242: LD_INT 3
76244: PUSH
76245: LD_INT 5
76247: PUSH
76248: EMPTY
76249: LIST
76250: LIST
76251: PUSH
76252: EMPTY
76253: LIST
76254: LIST
76255: LIST
76256: PUSH
76257: LD_INT 24
76259: PUSH
76260: LD_INT 25
76262: PUSH
76263: EMPTY
76264: LIST
76265: LIST
76266: PUSH
76267: LD_INT 23
76269: PUSH
76270: LD_INT 27
76272: PUSH
76273: EMPTY
76274: LIST
76275: LIST
76276: PUSH
76277: EMPTY
76278: LIST
76279: LIST
76280: PUSH
76281: LD_INT 42
76283: PUSH
76284: LD_INT 43
76286: PUSH
76287: EMPTY
76288: LIST
76289: LIST
76290: PUSH
76291: LD_INT 44
76293: PUSH
76294: LD_INT 46
76296: PUSH
76297: EMPTY
76298: LIST
76299: LIST
76300: PUSH
76301: LD_INT 45
76303: PUSH
76304: LD_INT 47
76306: PUSH
76307: EMPTY
76308: LIST
76309: LIST
76310: PUSH
76311: EMPTY
76312: LIST
76313: LIST
76314: LIST
76315: PUSH
76316: EMPTY
76317: LIST
76318: LIST
76319: LIST
76320: ST_TO_ADDR
// result := [ ] ;
76321: LD_ADDR_VAR 0 3
76325: PUSH
76326: EMPTY
76327: ST_TO_ADDR
// for i in turrets do
76328: LD_ADDR_VAR 0 4
76332: PUSH
76333: LD_VAR 0 1
76337: PUSH
76338: FOR_IN
76339: IFFALSE 76522
// begin nat := GetNation ( i ) ;
76341: LD_ADDR_VAR 0 7
76345: PUSH
76346: LD_VAR 0 4
76350: PPUSH
76351: CALL_OW 248
76355: ST_TO_ADDR
// weapon := 0 ;
76356: LD_ADDR_VAR 0 8
76360: PUSH
76361: LD_INT 0
76363: ST_TO_ADDR
// if not nat then
76364: LD_VAR 0 7
76368: NOT
76369: IFFALSE 76373
// continue ;
76371: GO 76338
// for j in list [ nat ] do
76373: LD_ADDR_VAR 0 5
76377: PUSH
76378: LD_VAR 0 10
76382: PUSH
76383: LD_VAR 0 7
76387: ARRAY
76388: PUSH
76389: FOR_IN
76390: IFFALSE 76431
// if GetBWeapon ( i ) = j [ 1 ] then
76392: LD_VAR 0 4
76396: PPUSH
76397: CALL_OW 269
76401: PUSH
76402: LD_VAR 0 5
76406: PUSH
76407: LD_INT 1
76409: ARRAY
76410: EQUAL
76411: IFFALSE 76429
// begin weapon := j [ 2 ] ;
76413: LD_ADDR_VAR 0 8
76417: PUSH
76418: LD_VAR 0 5
76422: PUSH
76423: LD_INT 2
76425: ARRAY
76426: ST_TO_ADDR
// break ;
76427: GO 76431
// end ;
76429: GO 76389
76431: POP
76432: POP
// if not weapon then
76433: LD_VAR 0 8
76437: NOT
76438: IFFALSE 76442
// continue ;
76440: GO 76338
// for k in factories do
76442: LD_ADDR_VAR 0 6
76446: PUSH
76447: LD_VAR 0 2
76451: PUSH
76452: FOR_IN
76453: IFFALSE 76518
// begin weapons := AvailableWeaponList ( k ) ;
76455: LD_ADDR_VAR 0 9
76459: PUSH
76460: LD_VAR 0 6
76464: PPUSH
76465: CALL_OW 478
76469: ST_TO_ADDR
// if not weapons then
76470: LD_VAR 0 9
76474: NOT
76475: IFFALSE 76479
// continue ;
76477: GO 76452
// if weapon in weapons then
76479: LD_VAR 0 8
76483: PUSH
76484: LD_VAR 0 9
76488: IN
76489: IFFALSE 76516
// begin result := [ i , weapon ] ;
76491: LD_ADDR_VAR 0 3
76495: PUSH
76496: LD_VAR 0 4
76500: PUSH
76501: LD_VAR 0 8
76505: PUSH
76506: EMPTY
76507: LIST
76508: LIST
76509: ST_TO_ADDR
// exit ;
76510: POP
76511: POP
76512: POP
76513: POP
76514: GO 76524
// end ; end ;
76516: GO 76452
76518: POP
76519: POP
// end ;
76520: GO 76338
76522: POP
76523: POP
// end ;
76524: LD_VAR 0 3
76528: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76529: LD_INT 0
76531: PPUSH
// if not side or side > 8 then
76532: LD_VAR 0 3
76536: NOT
76537: PUSH
76538: LD_VAR 0 3
76542: PUSH
76543: LD_INT 8
76545: GREATER
76546: OR
76547: IFFALSE 76551
// exit ;
76549: GO 76610
// if not range then
76551: LD_VAR 0 4
76555: NOT
76556: IFFALSE 76567
// range := - 12 ;
76558: LD_ADDR_VAR 0 4
76562: PUSH
76563: LD_INT 12
76565: NEG
76566: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76567: LD_VAR 0 1
76571: PPUSH
76572: LD_VAR 0 2
76576: PPUSH
76577: LD_VAR 0 3
76581: PPUSH
76582: LD_VAR 0 4
76586: PPUSH
76587: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76591: LD_VAR 0 1
76595: PPUSH
76596: LD_VAR 0 2
76600: PPUSH
76601: LD_VAR 0 3
76605: PPUSH
76606: CALL_OW 331
// end ;
76610: LD_VAR 0 5
76614: RET
// export function Video ( mode ) ; begin
76615: LD_INT 0
76617: PPUSH
// ingame_video = mode ;
76618: LD_ADDR_OWVAR 52
76622: PUSH
76623: LD_VAR 0 1
76627: ST_TO_ADDR
// interface_hidden = mode ;
76628: LD_ADDR_OWVAR 54
76632: PUSH
76633: LD_VAR 0 1
76637: ST_TO_ADDR
// end ;
76638: LD_VAR 0 2
76642: RET
// export function Join ( array , element ) ; begin
76643: LD_INT 0
76645: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76646: LD_ADDR_VAR 0 3
76650: PUSH
76651: LD_VAR 0 1
76655: PPUSH
76656: LD_VAR 0 1
76660: PUSH
76661: LD_INT 1
76663: PLUS
76664: PPUSH
76665: LD_VAR 0 2
76669: PPUSH
76670: CALL_OW 1
76674: ST_TO_ADDR
// end ;
76675: LD_VAR 0 3
76679: RET
// export function JoinUnion ( array , element ) ; begin
76680: LD_INT 0
76682: PPUSH
// result := array union element ;
76683: LD_ADDR_VAR 0 3
76687: PUSH
76688: LD_VAR 0 1
76692: PUSH
76693: LD_VAR 0 2
76697: UNION
76698: ST_TO_ADDR
// end ;
76699: LD_VAR 0 3
76703: RET
// export function GetBehemoths ( side ) ; begin
76704: LD_INT 0
76706: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
76707: LD_ADDR_VAR 0 2
76711: PUSH
76712: LD_INT 22
76714: PUSH
76715: LD_VAR 0 1
76719: PUSH
76720: EMPTY
76721: LIST
76722: LIST
76723: PUSH
76724: LD_INT 31
76726: PUSH
76727: LD_INT 25
76729: PUSH
76730: EMPTY
76731: LIST
76732: LIST
76733: PUSH
76734: EMPTY
76735: LIST
76736: LIST
76737: PPUSH
76738: CALL_OW 69
76742: ST_TO_ADDR
// end ;
76743: LD_VAR 0 2
76747: RET
// export function Shuffle ( array ) ; var i , index ; begin
76748: LD_INT 0
76750: PPUSH
76751: PPUSH
76752: PPUSH
// result := [ ] ;
76753: LD_ADDR_VAR 0 2
76757: PUSH
76758: EMPTY
76759: ST_TO_ADDR
// if not array then
76760: LD_VAR 0 1
76764: NOT
76765: IFFALSE 76769
// exit ;
76767: GO 76868
// Randomize ;
76769: CALL_OW 10
// for i = array downto 1 do
76773: LD_ADDR_VAR 0 3
76777: PUSH
76778: DOUBLE
76779: LD_VAR 0 1
76783: INC
76784: ST_TO_ADDR
76785: LD_INT 1
76787: PUSH
76788: FOR_DOWNTO
76789: IFFALSE 76866
// begin index := rand ( 1 , array ) ;
76791: LD_ADDR_VAR 0 4
76795: PUSH
76796: LD_INT 1
76798: PPUSH
76799: LD_VAR 0 1
76803: PPUSH
76804: CALL_OW 12
76808: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76809: LD_ADDR_VAR 0 2
76813: PUSH
76814: LD_VAR 0 2
76818: PPUSH
76819: LD_VAR 0 2
76823: PUSH
76824: LD_INT 1
76826: PLUS
76827: PPUSH
76828: LD_VAR 0 1
76832: PUSH
76833: LD_VAR 0 4
76837: ARRAY
76838: PPUSH
76839: CALL_OW 2
76843: ST_TO_ADDR
// array := Delete ( array , index ) ;
76844: LD_ADDR_VAR 0 1
76848: PUSH
76849: LD_VAR 0 1
76853: PPUSH
76854: LD_VAR 0 4
76858: PPUSH
76859: CALL_OW 3
76863: ST_TO_ADDR
// end ;
76864: GO 76788
76866: POP
76867: POP
// end ;
76868: LD_VAR 0 2
76872: RET
// export function GetBaseMaterials ( base ) ; begin
76873: LD_INT 0
76875: PPUSH
// result := [ 0 , 0 , 0 ] ;
76876: LD_ADDR_VAR 0 2
76880: PUSH
76881: LD_INT 0
76883: PUSH
76884: LD_INT 0
76886: PUSH
76887: LD_INT 0
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: LIST
76894: ST_TO_ADDR
// if not base then
76895: LD_VAR 0 1
76899: NOT
76900: IFFALSE 76904
// exit ;
76902: GO 76953
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76904: LD_ADDR_VAR 0 2
76908: PUSH
76909: LD_VAR 0 1
76913: PPUSH
76914: LD_INT 1
76916: PPUSH
76917: CALL_OW 275
76921: PUSH
76922: LD_VAR 0 1
76926: PPUSH
76927: LD_INT 2
76929: PPUSH
76930: CALL_OW 275
76934: PUSH
76935: LD_VAR 0 1
76939: PPUSH
76940: LD_INT 3
76942: PPUSH
76943: CALL_OW 275
76947: PUSH
76948: EMPTY
76949: LIST
76950: LIST
76951: LIST
76952: ST_TO_ADDR
// end ;
76953: LD_VAR 0 2
76957: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76958: LD_INT 0
76960: PPUSH
76961: PPUSH
// result := array ;
76962: LD_ADDR_VAR 0 3
76966: PUSH
76967: LD_VAR 0 1
76971: ST_TO_ADDR
// if size > 0 then
76972: LD_VAR 0 2
76976: PUSH
76977: LD_INT 0
76979: GREATER
76980: IFFALSE 77026
// for i := array downto size do
76982: LD_ADDR_VAR 0 4
76986: PUSH
76987: DOUBLE
76988: LD_VAR 0 1
76992: INC
76993: ST_TO_ADDR
76994: LD_VAR 0 2
76998: PUSH
76999: FOR_DOWNTO
77000: IFFALSE 77024
// result := Delete ( result , result ) ;
77002: LD_ADDR_VAR 0 3
77006: PUSH
77007: LD_VAR 0 3
77011: PPUSH
77012: LD_VAR 0 3
77016: PPUSH
77017: CALL_OW 3
77021: ST_TO_ADDR
77022: GO 76999
77024: POP
77025: POP
// end ;
77026: LD_VAR 0 3
77030: RET
// export function ComExit ( unit ) ; var tmp ; begin
77031: LD_INT 0
77033: PPUSH
77034: PPUSH
// if not IsInUnit ( unit ) then
77035: LD_VAR 0 1
77039: PPUSH
77040: CALL_OW 310
77044: NOT
77045: IFFALSE 77049
// exit ;
77047: GO 77109
// tmp := IsInUnit ( unit ) ;
77049: LD_ADDR_VAR 0 3
77053: PUSH
77054: LD_VAR 0 1
77058: PPUSH
77059: CALL_OW 310
77063: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77064: LD_VAR 0 3
77068: PPUSH
77069: CALL_OW 247
77073: PUSH
77074: LD_INT 2
77076: EQUAL
77077: IFFALSE 77090
// ComExitVehicle ( unit ) else
77079: LD_VAR 0 1
77083: PPUSH
77084: CALL_OW 121
77088: GO 77099
// ComExitBuilding ( unit ) ;
77090: LD_VAR 0 1
77094: PPUSH
77095: CALL_OW 122
// result := tmp ;
77099: LD_ADDR_VAR 0 2
77103: PUSH
77104: LD_VAR 0 3
77108: ST_TO_ADDR
// end ;
77109: LD_VAR 0 2
77113: RET
// export function ComExitAll ( units ) ; var i ; begin
77114: LD_INT 0
77116: PPUSH
77117: PPUSH
// if not units then
77118: LD_VAR 0 1
77122: NOT
77123: IFFALSE 77127
// exit ;
77125: GO 77153
// for i in units do
77127: LD_ADDR_VAR 0 3
77131: PUSH
77132: LD_VAR 0 1
77136: PUSH
77137: FOR_IN
77138: IFFALSE 77151
// ComExit ( i ) ;
77140: LD_VAR 0 3
77144: PPUSH
77145: CALL 77031 0 1
77149: GO 77137
77151: POP
77152: POP
// end ;
77153: LD_VAR 0 2
77157: RET
// export function ResetHc ; begin
77158: LD_INT 0
77160: PPUSH
// InitHc ;
77161: CALL_OW 19
// hc_importance := 0 ;
77165: LD_ADDR_OWVAR 32
77169: PUSH
77170: LD_INT 0
77172: ST_TO_ADDR
// end ;
77173: LD_VAR 0 1
77177: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77178: LD_INT 0
77180: PPUSH
77181: PPUSH
77182: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77183: LD_ADDR_VAR 0 6
77187: PUSH
77188: LD_VAR 0 1
77192: PUSH
77193: LD_VAR 0 3
77197: PLUS
77198: PUSH
77199: LD_INT 2
77201: DIV
77202: ST_TO_ADDR
// if _x < 0 then
77203: LD_VAR 0 6
77207: PUSH
77208: LD_INT 0
77210: LESS
77211: IFFALSE 77228
// _x := _x * - 1 ;
77213: LD_ADDR_VAR 0 6
77217: PUSH
77218: LD_VAR 0 6
77222: PUSH
77223: LD_INT 1
77225: NEG
77226: MUL
77227: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77228: LD_ADDR_VAR 0 7
77232: PUSH
77233: LD_VAR 0 2
77237: PUSH
77238: LD_VAR 0 4
77242: PLUS
77243: PUSH
77244: LD_INT 2
77246: DIV
77247: ST_TO_ADDR
// if _y < 0 then
77248: LD_VAR 0 7
77252: PUSH
77253: LD_INT 0
77255: LESS
77256: IFFALSE 77273
// _y := _y * - 1 ;
77258: LD_ADDR_VAR 0 7
77262: PUSH
77263: LD_VAR 0 7
77267: PUSH
77268: LD_INT 1
77270: NEG
77271: MUL
77272: ST_TO_ADDR
// result := [ _x , _y ] ;
77273: LD_ADDR_VAR 0 5
77277: PUSH
77278: LD_VAR 0 6
77282: PUSH
77283: LD_VAR 0 7
77287: PUSH
77288: EMPTY
77289: LIST
77290: LIST
77291: ST_TO_ADDR
// end ;
77292: LD_VAR 0 5
77296: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77297: LD_INT 0
77299: PPUSH
77300: PPUSH
77301: PPUSH
77302: PPUSH
// task := GetTaskList ( unit ) ;
77303: LD_ADDR_VAR 0 7
77307: PUSH
77308: LD_VAR 0 1
77312: PPUSH
77313: CALL_OW 437
77317: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77318: LD_VAR 0 7
77322: NOT
77323: PUSH
77324: LD_VAR 0 1
77328: PPUSH
77329: LD_VAR 0 2
77333: PPUSH
77334: CALL_OW 308
77338: NOT
77339: AND
77340: IFFALSE 77344
// exit ;
77342: GO 77462
// if IsInArea ( unit , area ) then
77344: LD_VAR 0 1
77348: PPUSH
77349: LD_VAR 0 2
77353: PPUSH
77354: CALL_OW 308
77358: IFFALSE 77376
// begin ComMoveToArea ( unit , goAway ) ;
77360: LD_VAR 0 1
77364: PPUSH
77365: LD_VAR 0 3
77369: PPUSH
77370: CALL_OW 113
// exit ;
77374: GO 77462
// end ; if task [ 1 ] [ 1 ] <> M then
77376: LD_VAR 0 7
77380: PUSH
77381: LD_INT 1
77383: ARRAY
77384: PUSH
77385: LD_INT 1
77387: ARRAY
77388: PUSH
77389: LD_STRING M
77391: NONEQUAL
77392: IFFALSE 77396
// exit ;
77394: GO 77462
// x := task [ 1 ] [ 2 ] ;
77396: LD_ADDR_VAR 0 5
77400: PUSH
77401: LD_VAR 0 7
77405: PUSH
77406: LD_INT 1
77408: ARRAY
77409: PUSH
77410: LD_INT 2
77412: ARRAY
77413: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77414: LD_ADDR_VAR 0 6
77418: PUSH
77419: LD_VAR 0 7
77423: PUSH
77424: LD_INT 1
77426: ARRAY
77427: PUSH
77428: LD_INT 3
77430: ARRAY
77431: ST_TO_ADDR
// if InArea ( x , y , area ) then
77432: LD_VAR 0 5
77436: PPUSH
77437: LD_VAR 0 6
77441: PPUSH
77442: LD_VAR 0 2
77446: PPUSH
77447: CALL_OW 309
77451: IFFALSE 77462
// ComStop ( unit ) ;
77453: LD_VAR 0 1
77457: PPUSH
77458: CALL_OW 141
// end ;
77462: LD_VAR 0 4
77466: RET
// export function Abs ( value ) ; begin
77467: LD_INT 0
77469: PPUSH
// result := value ;
77470: LD_ADDR_VAR 0 2
77474: PUSH
77475: LD_VAR 0 1
77479: ST_TO_ADDR
// if value < 0 then
77480: LD_VAR 0 1
77484: PUSH
77485: LD_INT 0
77487: LESS
77488: IFFALSE 77505
// result := value * - 1 ;
77490: LD_ADDR_VAR 0 2
77494: PUSH
77495: LD_VAR 0 1
77499: PUSH
77500: LD_INT 1
77502: NEG
77503: MUL
77504: ST_TO_ADDR
// end ;
77505: LD_VAR 0 2
77509: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77510: LD_INT 0
77512: PPUSH
77513: PPUSH
77514: PPUSH
77515: PPUSH
77516: PPUSH
77517: PPUSH
77518: PPUSH
77519: PPUSH
// if not unit or not building then
77520: LD_VAR 0 1
77524: NOT
77525: PUSH
77526: LD_VAR 0 2
77530: NOT
77531: OR
77532: IFFALSE 77536
// exit ;
77534: GO 77762
// x := GetX ( building ) ;
77536: LD_ADDR_VAR 0 4
77540: PUSH
77541: LD_VAR 0 2
77545: PPUSH
77546: CALL_OW 250
77550: ST_TO_ADDR
// y := GetY ( building ) ;
77551: LD_ADDR_VAR 0 6
77555: PUSH
77556: LD_VAR 0 2
77560: PPUSH
77561: CALL_OW 251
77565: ST_TO_ADDR
// d := GetDir ( building ) ;
77566: LD_ADDR_VAR 0 8
77570: PUSH
77571: LD_VAR 0 2
77575: PPUSH
77576: CALL_OW 254
77580: ST_TO_ADDR
// r := 4 ;
77581: LD_ADDR_VAR 0 9
77585: PUSH
77586: LD_INT 4
77588: ST_TO_ADDR
// for i := 1 to 5 do
77589: LD_ADDR_VAR 0 10
77593: PUSH
77594: DOUBLE
77595: LD_INT 1
77597: DEC
77598: ST_TO_ADDR
77599: LD_INT 5
77601: PUSH
77602: FOR_TO
77603: IFFALSE 77760
// begin _x := ShiftX ( x , d , r + i ) ;
77605: LD_ADDR_VAR 0 5
77609: PUSH
77610: LD_VAR 0 4
77614: PPUSH
77615: LD_VAR 0 8
77619: PPUSH
77620: LD_VAR 0 9
77624: PUSH
77625: LD_VAR 0 10
77629: PLUS
77630: PPUSH
77631: CALL_OW 272
77635: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77636: LD_ADDR_VAR 0 7
77640: PUSH
77641: LD_VAR 0 6
77645: PPUSH
77646: LD_VAR 0 8
77650: PPUSH
77651: LD_VAR 0 9
77655: PUSH
77656: LD_VAR 0 10
77660: PLUS
77661: PPUSH
77662: CALL_OW 273
77666: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77667: LD_VAR 0 5
77671: PPUSH
77672: LD_VAR 0 7
77676: PPUSH
77677: CALL_OW 488
77681: PUSH
77682: LD_VAR 0 5
77686: PPUSH
77687: LD_VAR 0 7
77691: PPUSH
77692: CALL_OW 428
77696: PPUSH
77697: CALL_OW 247
77701: PUSH
77702: LD_INT 3
77704: PUSH
77705: LD_INT 2
77707: PUSH
77708: EMPTY
77709: LIST
77710: LIST
77711: IN
77712: NOT
77713: AND
77714: IFFALSE 77758
// begin ComMoveXY ( unit , _x , _y ) ;
77716: LD_VAR 0 1
77720: PPUSH
77721: LD_VAR 0 5
77725: PPUSH
77726: LD_VAR 0 7
77730: PPUSH
77731: CALL_OW 111
// result := [ _x , _y ] ;
77735: LD_ADDR_VAR 0 3
77739: PUSH
77740: LD_VAR 0 5
77744: PUSH
77745: LD_VAR 0 7
77749: PUSH
77750: EMPTY
77751: LIST
77752: LIST
77753: ST_TO_ADDR
// exit ;
77754: POP
77755: POP
77756: GO 77762
// end ; end ;
77758: GO 77602
77760: POP
77761: POP
// end ;
77762: LD_VAR 0 3
77766: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77767: LD_INT 0
77769: PPUSH
77770: PPUSH
77771: PPUSH
// result := 0 ;
77772: LD_ADDR_VAR 0 3
77776: PUSH
77777: LD_INT 0
77779: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77780: LD_VAR 0 1
77784: PUSH
77785: LD_INT 0
77787: LESS
77788: PUSH
77789: LD_VAR 0 1
77793: PUSH
77794: LD_INT 8
77796: GREATER
77797: OR
77798: PUSH
77799: LD_VAR 0 2
77803: PUSH
77804: LD_INT 0
77806: LESS
77807: OR
77808: PUSH
77809: LD_VAR 0 2
77813: PUSH
77814: LD_INT 8
77816: GREATER
77817: OR
77818: IFFALSE 77822
// exit ;
77820: GO 77897
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77822: LD_ADDR_VAR 0 4
77826: PUSH
77827: LD_INT 22
77829: PUSH
77830: LD_VAR 0 2
77834: PUSH
77835: EMPTY
77836: LIST
77837: LIST
77838: PPUSH
77839: CALL_OW 69
77843: PUSH
77844: FOR_IN
77845: IFFALSE 77895
// begin un := UnitShoot ( i ) ;
77847: LD_ADDR_VAR 0 5
77851: PUSH
77852: LD_VAR 0 4
77856: PPUSH
77857: CALL_OW 504
77861: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77862: LD_VAR 0 5
77866: PPUSH
77867: CALL_OW 255
77871: PUSH
77872: LD_VAR 0 1
77876: EQUAL
77877: IFFALSE 77893
// begin result := un ;
77879: LD_ADDR_VAR 0 3
77883: PUSH
77884: LD_VAR 0 5
77888: ST_TO_ADDR
// exit ;
77889: POP
77890: POP
77891: GO 77897
// end ; end ;
77893: GO 77844
77895: POP
77896: POP
// end ;
77897: LD_VAR 0 3
77901: RET
// export function GetCargoBay ( units ) ; begin
77902: LD_INT 0
77904: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77905: LD_ADDR_VAR 0 2
77909: PUSH
77910: LD_VAR 0 1
77914: PPUSH
77915: LD_INT 2
77917: PUSH
77918: LD_INT 34
77920: PUSH
77921: LD_INT 12
77923: PUSH
77924: EMPTY
77925: LIST
77926: LIST
77927: PUSH
77928: LD_INT 34
77930: PUSH
77931: LD_INT 51
77933: PUSH
77934: EMPTY
77935: LIST
77936: LIST
77937: PUSH
77938: LD_INT 34
77940: PUSH
77941: LD_INT 32
77943: PUSH
77944: EMPTY
77945: LIST
77946: LIST
77947: PUSH
77948: LD_INT 34
77950: PUSH
77951: LD_EXP 53
77955: PUSH
77956: EMPTY
77957: LIST
77958: LIST
77959: PUSH
77960: EMPTY
77961: LIST
77962: LIST
77963: LIST
77964: LIST
77965: LIST
77966: PPUSH
77967: CALL_OW 72
77971: ST_TO_ADDR
// end ;
77972: LD_VAR 0 2
77976: RET
// export function Negate ( value ) ; begin
77977: LD_INT 0
77979: PPUSH
// result := not value ;
77980: LD_ADDR_VAR 0 2
77984: PUSH
77985: LD_VAR 0 1
77989: NOT
77990: ST_TO_ADDR
// end ;
77991: LD_VAR 0 2
77995: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
77996: LD_INT 0
77998: PPUSH
// if x1 = x2 then
77999: LD_VAR 0 1
78003: PUSH
78004: LD_VAR 0 3
78008: EQUAL
78009: IFFALSE 78043
// begin if y1 > y2 then
78011: LD_VAR 0 2
78015: PUSH
78016: LD_VAR 0 4
78020: GREATER
78021: IFFALSE 78033
// result := 0 else
78023: LD_ADDR_VAR 0 5
78027: PUSH
78028: LD_INT 0
78030: ST_TO_ADDR
78031: GO 78041
// result := 3 ;
78033: LD_ADDR_VAR 0 5
78037: PUSH
78038: LD_INT 3
78040: ST_TO_ADDR
// exit ;
78041: GO 78129
// end ; if y1 = y2 then
78043: LD_VAR 0 2
78047: PUSH
78048: LD_VAR 0 4
78052: EQUAL
78053: IFFALSE 78087
// begin if x1 > x2 then
78055: LD_VAR 0 1
78059: PUSH
78060: LD_VAR 0 3
78064: GREATER
78065: IFFALSE 78077
// result := 1 else
78067: LD_ADDR_VAR 0 5
78071: PUSH
78072: LD_INT 1
78074: ST_TO_ADDR
78075: GO 78085
// result := 4 ;
78077: LD_ADDR_VAR 0 5
78081: PUSH
78082: LD_INT 4
78084: ST_TO_ADDR
// exit ;
78085: GO 78129
// end ; if x1 > x2 and y1 > y2 then
78087: LD_VAR 0 1
78091: PUSH
78092: LD_VAR 0 3
78096: GREATER
78097: PUSH
78098: LD_VAR 0 2
78102: PUSH
78103: LD_VAR 0 4
78107: GREATER
78108: AND
78109: IFFALSE 78121
// result := 2 else
78111: LD_ADDR_VAR 0 5
78115: PUSH
78116: LD_INT 2
78118: ST_TO_ADDR
78119: GO 78129
// result := 5 ;
78121: LD_ADDR_VAR 0 5
78125: PUSH
78126: LD_INT 5
78128: ST_TO_ADDR
// end ;
78129: LD_VAR 0 5
78133: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78134: LD_INT 0
78136: PPUSH
78137: PPUSH
// if not driver or not IsInUnit ( driver ) then
78138: LD_VAR 0 1
78142: NOT
78143: PUSH
78144: LD_VAR 0 1
78148: PPUSH
78149: CALL_OW 310
78153: NOT
78154: OR
78155: IFFALSE 78159
// exit ;
78157: GO 78249
// vehicle := IsInUnit ( driver ) ;
78159: LD_ADDR_VAR 0 3
78163: PUSH
78164: LD_VAR 0 1
78168: PPUSH
78169: CALL_OW 310
78173: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78174: LD_VAR 0 1
78178: PPUSH
78179: LD_STRING \
78181: PUSH
78182: LD_INT 0
78184: PUSH
78185: LD_INT 0
78187: PUSH
78188: LD_INT 0
78190: PUSH
78191: LD_INT 0
78193: PUSH
78194: LD_INT 0
78196: PUSH
78197: LD_INT 0
78199: PUSH
78200: EMPTY
78201: LIST
78202: LIST
78203: LIST
78204: LIST
78205: LIST
78206: LIST
78207: LIST
78208: PUSH
78209: LD_STRING E
78211: PUSH
78212: LD_INT 0
78214: PUSH
78215: LD_INT 0
78217: PUSH
78218: LD_VAR 0 3
78222: PUSH
78223: LD_INT 0
78225: PUSH
78226: LD_INT 0
78228: PUSH
78229: LD_INT 0
78231: PUSH
78232: EMPTY
78233: LIST
78234: LIST
78235: LIST
78236: LIST
78237: LIST
78238: LIST
78239: LIST
78240: PUSH
78241: EMPTY
78242: LIST
78243: LIST
78244: PPUSH
78245: CALL_OW 446
// end ;
78249: LD_VAR 0 2
78253: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78254: LD_INT 0
78256: PPUSH
78257: PPUSH
// if not driver or not IsInUnit ( driver ) then
78258: LD_VAR 0 1
78262: NOT
78263: PUSH
78264: LD_VAR 0 1
78268: PPUSH
78269: CALL_OW 310
78273: NOT
78274: OR
78275: IFFALSE 78279
// exit ;
78277: GO 78393
// vehicle := IsInUnit ( driver ) ;
78279: LD_ADDR_VAR 0 3
78283: PUSH
78284: LD_VAR 0 1
78288: PPUSH
78289: CALL_OW 310
78293: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78294: LD_VAR 0 1
78298: PPUSH
78299: LD_STRING \
78301: PUSH
78302: LD_INT 0
78304: PUSH
78305: LD_INT 0
78307: PUSH
78308: LD_INT 0
78310: PUSH
78311: LD_INT 0
78313: PUSH
78314: LD_INT 0
78316: PUSH
78317: LD_INT 0
78319: PUSH
78320: EMPTY
78321: LIST
78322: LIST
78323: LIST
78324: LIST
78325: LIST
78326: LIST
78327: LIST
78328: PUSH
78329: LD_STRING E
78331: PUSH
78332: LD_INT 0
78334: PUSH
78335: LD_INT 0
78337: PUSH
78338: LD_VAR 0 3
78342: PUSH
78343: LD_INT 0
78345: PUSH
78346: LD_INT 0
78348: PUSH
78349: LD_INT 0
78351: PUSH
78352: EMPTY
78353: LIST
78354: LIST
78355: LIST
78356: LIST
78357: LIST
78358: LIST
78359: LIST
78360: PUSH
78361: EMPTY
78362: LIST
78363: LIST
78364: PPUSH
78365: CALL_OW 447
// display_strings := [ driver , GetTaskList ( driver ) ] ;
78369: LD_ADDR_OWVAR 47
78373: PUSH
78374: LD_VAR 0 1
78378: PUSH
78379: LD_VAR 0 1
78383: PPUSH
78384: CALL_OW 437
78388: PUSH
78389: EMPTY
78390: LIST
78391: LIST
78392: ST_TO_ADDR
// end ;
78393: LD_VAR 0 2
78397: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78398: LD_INT 0
78400: PPUSH
78401: PPUSH
78402: PPUSH
// tmp := [ ] ;
78403: LD_ADDR_VAR 0 5
78407: PUSH
78408: EMPTY
78409: ST_TO_ADDR
// for i in units do
78410: LD_ADDR_VAR 0 4
78414: PUSH
78415: LD_VAR 0 1
78419: PUSH
78420: FOR_IN
78421: IFFALSE 78459
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78423: LD_ADDR_VAR 0 5
78427: PUSH
78428: LD_VAR 0 5
78432: PPUSH
78433: LD_VAR 0 5
78437: PUSH
78438: LD_INT 1
78440: PLUS
78441: PPUSH
78442: LD_VAR 0 4
78446: PPUSH
78447: CALL_OW 256
78451: PPUSH
78452: CALL_OW 2
78456: ST_TO_ADDR
78457: GO 78420
78459: POP
78460: POP
// if not tmp then
78461: LD_VAR 0 5
78465: NOT
78466: IFFALSE 78470
// exit ;
78468: GO 78518
// if asc then
78470: LD_VAR 0 2
78474: IFFALSE 78498
// result := SortListByListAsc ( units , tmp ) else
78476: LD_ADDR_VAR 0 3
78480: PUSH
78481: LD_VAR 0 1
78485: PPUSH
78486: LD_VAR 0 5
78490: PPUSH
78491: CALL_OW 76
78495: ST_TO_ADDR
78496: GO 78518
// result := SortListByListDesc ( units , tmp ) ;
78498: LD_ADDR_VAR 0 3
78502: PUSH
78503: LD_VAR 0 1
78507: PPUSH
78508: LD_VAR 0 5
78512: PPUSH
78513: CALL_OW 77
78517: ST_TO_ADDR
// end ;
78518: LD_VAR 0 3
78522: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78523: LD_INT 0
78525: PPUSH
78526: PPUSH
// task := GetTaskList ( mech ) ;
78527: LD_ADDR_VAR 0 4
78531: PUSH
78532: LD_VAR 0 1
78536: PPUSH
78537: CALL_OW 437
78541: ST_TO_ADDR
// if not task then
78542: LD_VAR 0 4
78546: NOT
78547: IFFALSE 78551
// exit ;
78549: GO 78593
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78551: LD_ADDR_VAR 0 3
78555: PUSH
78556: LD_VAR 0 4
78560: PUSH
78561: LD_INT 1
78563: ARRAY
78564: PUSH
78565: LD_INT 1
78567: ARRAY
78568: PUSH
78569: LD_STRING r
78571: EQUAL
78572: PUSH
78573: LD_VAR 0 4
78577: PUSH
78578: LD_INT 1
78580: ARRAY
78581: PUSH
78582: LD_INT 4
78584: ARRAY
78585: PUSH
78586: LD_VAR 0 2
78590: EQUAL
78591: AND
78592: ST_TO_ADDR
// end ;
78593: LD_VAR 0 3
78597: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78598: LD_INT 0
78600: PPUSH
// SetDir ( unit , d ) ;
78601: LD_VAR 0 1
78605: PPUSH
78606: LD_VAR 0 4
78610: PPUSH
78611: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78615: LD_VAR 0 1
78619: PPUSH
78620: LD_VAR 0 2
78624: PPUSH
78625: LD_VAR 0 3
78629: PPUSH
78630: LD_VAR 0 5
78634: PPUSH
78635: CALL_OW 48
// end ;
78639: LD_VAR 0 6
78643: RET
// export function ToNaturalNumber ( number ) ; begin
78644: LD_INT 0
78646: PPUSH
// result := number div 1 ;
78647: LD_ADDR_VAR 0 2
78651: PUSH
78652: LD_VAR 0 1
78656: PUSH
78657: LD_INT 1
78659: DIV
78660: ST_TO_ADDR
// if number < 0 then
78661: LD_VAR 0 1
78665: PUSH
78666: LD_INT 0
78668: LESS
78669: IFFALSE 78679
// result := 0 ;
78671: LD_ADDR_VAR 0 2
78675: PUSH
78676: LD_INT 0
78678: ST_TO_ADDR
// end ;
78679: LD_VAR 0 2
78683: RET
// export function SortByClass ( units , class ) ; var un ; begin
78684: LD_INT 0
78686: PPUSH
78687: PPUSH
// if not units or not class then
78688: LD_VAR 0 1
78692: NOT
78693: PUSH
78694: LD_VAR 0 2
78698: NOT
78699: OR
78700: IFFALSE 78704
// exit ;
78702: GO 78799
// result := [ ] ;
78704: LD_ADDR_VAR 0 3
78708: PUSH
78709: EMPTY
78710: ST_TO_ADDR
// for un in units do
78711: LD_ADDR_VAR 0 4
78715: PUSH
78716: LD_VAR 0 1
78720: PUSH
78721: FOR_IN
78722: IFFALSE 78797
// if GetClass ( un ) = class then
78724: LD_VAR 0 4
78728: PPUSH
78729: CALL_OW 257
78733: PUSH
78734: LD_VAR 0 2
78738: EQUAL
78739: IFFALSE 78766
// result := Insert ( result , 1 , un ) else
78741: LD_ADDR_VAR 0 3
78745: PUSH
78746: LD_VAR 0 3
78750: PPUSH
78751: LD_INT 1
78753: PPUSH
78754: LD_VAR 0 4
78758: PPUSH
78759: CALL_OW 2
78763: ST_TO_ADDR
78764: GO 78795
// result := Replace ( result , result + 1 , un ) ;
78766: LD_ADDR_VAR 0 3
78770: PUSH
78771: LD_VAR 0 3
78775: PPUSH
78776: LD_VAR 0 3
78780: PUSH
78781: LD_INT 1
78783: PLUS
78784: PPUSH
78785: LD_VAR 0 4
78789: PPUSH
78790: CALL_OW 1
78794: ST_TO_ADDR
78795: GO 78721
78797: POP
78798: POP
// end ; end_of_file
78799: LD_VAR 0 3
78803: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78804: LD_VAR 0 1
78808: PUSH
78809: LD_INT 200
78811: DOUBLE
78812: GREATEREQUAL
78813: IFFALSE 78821
78815: LD_INT 299
78817: DOUBLE
78818: LESSEQUAL
78819: IFTRUE 78823
78821: GO 78855
78823: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78824: LD_VAR 0 1
78828: PPUSH
78829: LD_VAR 0 2
78833: PPUSH
78834: LD_VAR 0 3
78838: PPUSH
78839: LD_VAR 0 4
78843: PPUSH
78844: LD_VAR 0 5
78848: PPUSH
78849: CALL 36023 0 5
78853: GO 78932
78855: LD_INT 300
78857: DOUBLE
78858: GREATEREQUAL
78859: IFFALSE 78867
78861: LD_INT 399
78863: DOUBLE
78864: LESSEQUAL
78865: IFTRUE 78869
78867: GO 78931
78869: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78870: LD_VAR 0 1
78874: PPUSH
78875: LD_VAR 0 2
78879: PPUSH
78880: LD_VAR 0 3
78884: PPUSH
78885: LD_VAR 0 4
78889: PPUSH
78890: LD_VAR 0 5
78894: PPUSH
78895: LD_VAR 0 6
78899: PPUSH
78900: LD_VAR 0 7
78904: PPUSH
78905: LD_VAR 0 8
78909: PPUSH
78910: LD_VAR 0 9
78914: PPUSH
78915: LD_VAR 0 10
78919: PPUSH
78920: LD_VAR 0 11
78924: PPUSH
78925: CALL 33911 0 11
78929: GO 78932
78931: POP
// end ;
78932: PPOPN 11
78934: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78935: LD_VAR 0 1
78939: PPUSH
78940: LD_VAR 0 2
78944: PPUSH
78945: LD_VAR 0 3
78949: PPUSH
78950: LD_VAR 0 4
78954: PPUSH
78955: LD_VAR 0 5
78959: PPUSH
78960: CALL 36005 0 5
// end ; end_of_file
78964: PPOPN 5
78966: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78967: LD_VAR 0 1
78971: PPUSH
78972: LD_VAR 0 2
78976: PPUSH
78977: LD_VAR 0 3
78981: PPUSH
78982: LD_VAR 0 4
78986: PPUSH
78987: LD_VAR 0 5
78991: PPUSH
78992: LD_VAR 0 6
78996: PPUSH
78997: CALL 22719 0 6
// end ;
79001: PPOPN 6
79003: END
