// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 48
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 49
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 45
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// bonusAvalaible = 0 ;
  68: LD_ADDR_EXP 44
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// firstRussianAttack = 0 ;
  76: LD_ADDR_EXP 23
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// saveDonaldson = 0 ;
  84: LD_ADDR_EXP 24
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// frankScoutBase = 0 ;
  92: LD_ADDR_EXP 25
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// harrAnswer = 0 ;
 100: LD_ADDR_EXP 26
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 108: LD_ADDR_EXP 27
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 116: LD_ADDR_EXP 28
 120: PUSH
 121: LD_INT 18900
 123: ST_TO_ADDR
// timerStatus = 0 ;
 124: LD_ADDR_EXP 29
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// startTimer = 0 ;
 132: LD_ADDR_EXP 30
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// factoryDialog = 0 ;
 140: LD_ADDR_EXP 31
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// bunkerDialog = 0 ;
 148: LD_ADDR_EXP 32
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// energyVDialog = 0 ;
 156: LD_ADDR_EXP 33
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildOil = 0 ;
 164: LD_ADDR_EXP 34
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// buildPower = 0 ;
 172: LD_ADDR_EXP 35
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 180: LD_ADDR_EXP 36
 184: PUSH
 185: LD_INT 14
 187: PUSH
 188: LD_INT 12
 190: PUSH
 191: LD_INT 11
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_OWVAR 67
 203: ARRAY
 204: ST_TO_ADDR
// AIEnable = 1 ;
 205: LD_ADDR_EXP 37
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 213: LD_ADDR_EXP 41
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// lostCounter = 0 ;
 221: LD_ADDR_EXP 38
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// honor = 1 ;
 229: LD_ADDR_EXP 39
 233: PUSH
 234: LD_INT 1
 236: ST_TO_ADDR
// escapeAvalaible = 0 ;
 237: LD_ADDR_EXP 40
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// specAttack := false ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// ruMobile := [ ] ;
 253: LD_ADDR_EXP 46
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// ruMech := [ 3 , 4 , 6 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 43
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: LD_INT 6
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: PUSH
 279: LD_OWVAR 67
 283: ARRAY
 284: ST_TO_ADDR
// PrepareDifficulty ;
 285: CALL 4670 0 0
// PrepareRussianBase ;
 289: CALL 2962 0 0
// PrepareRussianCommander ;
 293: CALL 2913 0 0
// PrepareHeroes ;
 297: CALL 479 0 0
// SetBName ( ambdept0 , gamma ) ;
 301: LD_INT 4
 303: PPUSH
 304: LD_STRING gamma
 306: PPUSH
 307: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 311: LD_INT 21
 313: PPUSH
 314: LD_STRING fyodor
 316: PPUSH
 317: CALL_OW 500
// end ;
 321: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 322: LD_EXP 45
 326: PUSH
 327: LD_INT 1
 329: EQUAL
 330: IFFALSE 435
 332: GO 334
 334: DISABLE
 335: LD_INT 0
 337: PPUSH
// begin enable ;
 338: ENABLE
// fogoff ( true ) ;
 339: LD_INT 1
 341: PPUSH
 342: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 346: LD_ADDR_VAR 0 1
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 1
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: FOR_IN
 381: IFFALSE 397
// SetLives ( i , 1000 ) ;
 383: LD_VAR 0 1
 387: PPUSH
 388: LD_INT 1000
 390: PPUSH
 391: CALL_OW 234
 395: GO 380
 397: POP
 398: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 399: LD_INT 4
 401: PPUSH
 402: CALL_OW 274
 406: PPUSH
 407: LD_INT 1
 409: PPUSH
 410: LD_INT 9999
 412: PPUSH
 413: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 417: LD_INT 4
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 2
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
// end ;
 435: PPOPN 1
 437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 438: LD_INT 22
 440: PUSH
 441: LD_INT 1
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 34
 450: PUSH
 451: LD_INT 44
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PPUSH
 462: CALL_OW 69
 466: IFFALSE 478
 468: GO 470
 470: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 471: LD_STRING ACH_GUN
 473: PPUSH
 474: CALL_OW 543
 478: END
// export function PrepareHeroes ; var i , tmp ; begin
 479: LD_INT 0
 481: PPUSH
 482: PPUSH
 483: PPUSH
// uc_side = 1 ;
 484: LD_ADDR_OWVAR 20
 488: PUSH
 489: LD_INT 1
 491: ST_TO_ADDR
// uc_nation = 1 ;
 492: LD_ADDR_OWVAR 21
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 500: LD_ADDR_EXP 1
 504: PUSH
 505: LD_STRING JMM
 507: PPUSH
 508: LD_INT 1
 510: PPUSH
 511: LD_EXP 49
 515: PPUSH
 516: CALL 39865 0 3
 520: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 521: LD_ADDR_EXP 4
 525: PUSH
 526: LD_STRING Lisa
 528: PPUSH
 529: LD_INT 1
 531: PPUSH
 532: LD_EXP 49
 536: PPUSH
 537: CALL 39865 0 3
 541: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 7
 546: PUSH
 547: LD_STRING Brown
 549: PPUSH
 550: LD_INT 0
 552: PPUSH
 553: LD_EXP 49
 557: PPUSH
 558: CALL 39865 0 3
 562: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 563: LD_ADDR_EXP 8
 567: PUSH
 568: LD_STRING Dickens
 570: PPUSH
 571: LD_INT 0
 573: PPUSH
 574: LD_EXP 49
 578: PPUSH
 579: CALL 39865 0 3
 583: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 584: LD_ADDR_EXP 9
 588: PUSH
 589: LD_STRING Woodruff
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: LD_EXP 49
 599: PPUSH
 600: CALL 39865 0 3
 604: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: LD_STRING Campell
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: LD_EXP 49
 620: PPUSH
 621: CALL 39865 0 3
 625: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 626: LD_ADDR_EXP 10
 630: PUSH
 631: LD_STRING Knight
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: LD_EXP 49
 641: PPUSH
 642: CALL 39865 0 3
 646: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 647: LD_ADDR_EXP 11
 651: PUSH
 652: LD_STRING Claptopn
 654: PPUSH
 655: LD_INT 0
 657: PPUSH
 658: LD_EXP 49
 662: PPUSH
 663: CALL 39865 0 3
 667: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 668: LD_ADDR_EXP 14
 672: PUSH
 673: LD_STRING Harisson
 675: PPUSH
 676: LD_INT 0
 678: PPUSH
 679: LD_EXP 49
 683: PPUSH
 684: CALL 39865 0 3
 688: ST_TO_ADDR
// if Lisa = false then
 689: LD_EXP 4
 693: PUSH
 694: LD_INT 0
 696: EQUAL
 697: IFFALSE 720
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 699: LD_ADDR_EXP 2
 703: PUSH
 704: LD_STRING Bobby
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: LD_EXP 49
 714: PPUSH
 715: CALL 39865 0 3
 719: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 720: LD_EXP 4
 724: PUSH
 725: LD_INT 0
 727: EQUAL
 728: PUSH
 729: LD_EXP 2
 733: PUSH
 734: LD_INT 0
 736: EQUAL
 737: AND
 738: IFFALSE 761
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_STRING Cyrus
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: LD_EXP 49
 755: PPUSH
 756: CALL 39865 0 3
 760: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 761: LD_EXP 4
 765: PUSH
 766: LD_INT 0
 768: EQUAL
 769: PUSH
 770: LD_EXP 2
 774: PUSH
 775: LD_INT 0
 777: EQUAL
 778: AND
 779: PUSH
 780: LD_EXP 3
 784: PUSH
 785: LD_INT 0
 787: EQUAL
 788: AND
 789: IFFALSE 888
// begin tmp = CreateCharacterSet ( 03_others ) ;
 791: LD_ADDR_VAR 0 3
 795: PUSH
 796: LD_STRING 03_others
 798: PPUSH
 799: CALL_OW 31
 803: ST_TO_ADDR
// if tmp then
 804: LD_VAR 0 3
 808: IFFALSE 865
// begin RandomBeforeMission = tmp [ 1 ] ;
 810: LD_ADDR_EXP 6
 814: PUSH
 815: LD_VAR 0 3
 819: PUSH
 820: LD_INT 1
 822: ARRAY
 823: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 824: LD_STRING 03_others
 826: PPUSH
 827: CALL_OW 40
// if tmp > 1 then
 831: LD_VAR 0 3
 835: PUSH
 836: LD_INT 1
 838: GREATER
 839: IFFALSE 863
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 841: LD_VAR 0 3
 845: PUSH
 846: LD_VAR 0 3
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: DIFF
 855: PPUSH
 856: LD_STRING 03_others
 858: PPUSH
 859: CALL_OW 38
// end else
 863: GO 888
// begin PrepareHuman ( false , 1 , 3 ) ;
 865: LD_INT 0
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: LD_INT 3
 873: PPUSH
 874: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 878: LD_ADDR_EXP 6
 882: PUSH
 883: CALL_OW 44
 887: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 888: LD_ADDR_OWVAR 20
 892: PUSH
 893: LD_INT 4
 895: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 896: LD_ADDR_EXP 13
 900: PUSH
 901: LD_STRING Donaldson
 903: PPUSH
 904: LD_INT 0
 906: PPUSH
 907: LD_EXP 49
 911: PPUSH
 912: CALL 39865 0 3
 916: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 917: LD_ADDR_EXP 5
 921: PUSH
 922: LD_STRING Frank
 924: PPUSH
 925: LD_INT 1
 927: PPUSH
 928: LD_EXP 49
 932: PPUSH
 933: CALL 39865 0 3
 937: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 938: LD_EXP 1
 942: PPUSH
 943: LD_INT 32
 945: PPUSH
 946: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 950: LD_EXP 7
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_INT 0
 960: PPUSH
 961: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 965: LD_EXP 7
 969: PPUSH
 970: LD_INT 32
 972: PPUSH
 973: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 977: LD_EXP 8
 981: PPUSH
 982: LD_INT 2
 984: PPUSH
 985: LD_INT 0
 987: PPUSH
 988: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 992: LD_EXP 9
 996: PPUSH
 997: LD_INT 2
 999: PPUSH
1000: LD_INT 0
1002: PPUSH
1003: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1007: LD_EXP 12
1011: PPUSH
1012: LD_INT 2
1014: PPUSH
1015: LD_INT 0
1017: PPUSH
1018: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1022: LD_EXP 10
1026: PPUSH
1027: LD_INT 2
1029: PPUSH
1030: LD_INT 0
1032: PPUSH
1033: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1037: LD_EXP 11
1041: PPUSH
1042: LD_INT 2
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1052: LD_EXP 4
1056: PPUSH
1057: LD_INT 2
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL_OW 49
// if Lisa = false then
1067: LD_EXP 4
1071: PUSH
1072: LD_INT 0
1074: EQUAL
1075: IFFALSE 1092
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1077: LD_EXP 2
1081: PPUSH
1082: LD_INT 2
1084: PPUSH
1085: LD_INT 0
1087: PPUSH
1088: CALL_OW 49
// if Lisa = false and Bobby = false then
1092: LD_EXP 4
1096: PUSH
1097: LD_INT 0
1099: EQUAL
1100: PUSH
1101: LD_EXP 2
1105: PUSH
1106: LD_INT 0
1108: EQUAL
1109: AND
1110: IFFALSE 1127
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1112: LD_EXP 3
1116: PPUSH
1117: LD_INT 2
1119: PPUSH
1120: LD_INT 0
1122: PPUSH
1123: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1127: LD_EXP 4
1131: PUSH
1132: LD_INT 0
1134: EQUAL
1135: PUSH
1136: LD_EXP 2
1140: PUSH
1141: LD_INT 0
1143: EQUAL
1144: AND
1145: PUSH
1146: LD_EXP 3
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: IFFALSE 1172
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1157: LD_EXP 6
1161: PPUSH
1162: LD_INT 2
1164: PPUSH
1165: LD_INT 0
1167: PPUSH
1168: CALL_OW 49
// end ;
1172: LD_VAR 0 1
1176: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1177: LD_INT 0
1179: PPUSH
1180: PPUSH
1181: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1182: LD_EXP 13
1186: PPUSH
1187: LD_INT 10
1189: PPUSH
1190: LD_INT 0
1192: PPUSH
1193: CALL_OW 49
// if Frank then
1197: LD_EXP 5
1201: IFFALSE 1218
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1203: LD_EXP 5
1207: PPUSH
1208: LD_INT 10
1210: PPUSH
1211: LD_INT 0
1213: PPUSH
1214: CALL_OW 49
// uc_nation = 1 ;
1218: LD_ADDR_OWVAR 21
1222: PUSH
1223: LD_INT 1
1225: ST_TO_ADDR
// uc_side = 4 ;
1226: LD_ADDR_OWVAR 20
1230: PUSH
1231: LD_INT 4
1233: ST_TO_ADDR
// hc_class := 3 ;
1234: LD_ADDR_OWVAR 28
1238: PUSH
1239: LD_INT 3
1241: ST_TO_ADDR
// hc_sex := sex_male ;
1242: LD_ADDR_OWVAR 27
1246: PUSH
1247: LD_INT 1
1249: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1250: LD_ADDR_OWVAR 33
1254: PUSH
1255: LD_STRING SecondCharsGal
1257: ST_TO_ADDR
// hc_face_number := 53 ;
1258: LD_ADDR_OWVAR 34
1262: PUSH
1263: LD_INT 53
1265: ST_TO_ADDR
// hc_name := Freddie Warner ;
1266: LD_ADDR_OWVAR 26
1270: PUSH
1271: LD_STRING Freddie Warner
1273: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1274: LD_ADDR_OWVAR 29
1278: PUSH
1279: LD_INT 8
1281: PUSH
1282: LD_INT 11
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1289: LD_ADDR_OWVAR 30
1293: PUSH
1294: LD_INT 0
1296: PUSH
1297: LD_INT 0
1299: PUSH
1300: LD_INT 1
1302: PUSH
1303: LD_INT 0
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1312: LD_ADDR_OWVAR 31
1316: PUSH
1317: LD_INT 1
1319: PUSH
1320: LD_INT 0
1322: PUSH
1323: LD_INT 3
1325: PUSH
1326: LD_INT 2
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: ST_TO_ADDR
// un = CreateHuman ;
1335: LD_ADDR_VAR 0 3
1339: PUSH
1340: CALL_OW 44
1344: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1345: LD_VAR 0 3
1349: PPUSH
1350: LD_INT 10
1352: PPUSH
1353: LD_INT 0
1355: PPUSH
1356: CALL_OW 49
// hc_class := 1 ;
1360: LD_ADDR_OWVAR 28
1364: PUSH
1365: LD_INT 1
1367: ST_TO_ADDR
// hc_sex := sex_male ;
1368: LD_ADDR_OWVAR 27
1372: PUSH
1373: LD_INT 1
1375: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1376: LD_ADDR_OWVAR 33
1380: PUSH
1381: LD_STRING SecondCharsGal
1383: ST_TO_ADDR
// hc_face_number := 56 ;
1384: LD_ADDR_OWVAR 34
1388: PUSH
1389: LD_INT 56
1391: ST_TO_ADDR
// hc_name := Mel Brennan ;
1392: LD_ADDR_OWVAR 26
1396: PUSH
1397: LD_STRING Mel Brennan
1399: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1400: LD_ADDR_OWVAR 29
1404: PUSH
1405: LD_INT 12
1407: PUSH
1408: LD_INT 11
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1415: LD_ADDR_OWVAR 30
1419: PUSH
1420: LD_INT 1
1422: PUSH
1423: LD_INT 1
1425: PUSH
1426: LD_INT 0
1428: PUSH
1429: LD_INT 0
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1438: LD_ADDR_OWVAR 31
1442: PUSH
1443: LD_INT 3
1445: PUSH
1446: LD_INT 1
1448: PUSH
1449: LD_INT 1
1451: PUSH
1452: LD_INT 0
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: ST_TO_ADDR
// un = CreateHuman ;
1461: LD_ADDR_VAR 0 3
1465: PUSH
1466: CALL_OW 44
1470: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1471: LD_VAR 0 3
1475: PPUSH
1476: LD_INT 10
1478: PPUSH
1479: LD_INT 0
1481: PPUSH
1482: CALL_OW 49
// hc_class := 1 ;
1486: LD_ADDR_OWVAR 28
1490: PUSH
1491: LD_INT 1
1493: ST_TO_ADDR
// hc_sex := sex_male ;
1494: LD_ADDR_OWVAR 27
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1502: LD_ADDR_OWVAR 33
1506: PUSH
1507: LD_STRING AmGalRemake
1509: ST_TO_ADDR
// hc_face_number := 5 ;
1510: LD_ADDR_OWVAR 34
1514: PUSH
1515: LD_INT 5
1517: ST_TO_ADDR
// hc_name := Bob Joplin ;
1518: LD_ADDR_OWVAR 26
1522: PUSH
1523: LD_STRING Bob Joplin
1525: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1526: LD_ADDR_OWVAR 29
1530: PUSH
1531: LD_INT 10
1533: PUSH
1534: LD_INT 11
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1541: LD_ADDR_OWVAR 30
1545: PUSH
1546: LD_INT 0
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 0
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1564: LD_ADDR_OWVAR 31
1568: PUSH
1569: LD_INT 3
1571: PUSH
1572: LD_INT 1
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: ST_TO_ADDR
// un = CreateHuman ;
1587: LD_ADDR_VAR 0 3
1591: PUSH
1592: CALL_OW 44
1596: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1597: LD_VAR 0 3
1601: PPUSH
1602: LD_INT 10
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// hc_class := 3 ;
1612: LD_ADDR_OWVAR 28
1616: PUSH
1617: LD_INT 3
1619: ST_TO_ADDR
// hc_sex := sex_female ;
1620: LD_ADDR_OWVAR 27
1624: PUSH
1625: LD_INT 2
1627: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1628: LD_ADDR_OWVAR 33
1632: PUSH
1633: LD_STRING AmGalRemake
1635: ST_TO_ADDR
// hc_face_number := 8 ;
1636: LD_ADDR_OWVAR 34
1640: PUSH
1641: LD_INT 8
1643: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1644: LD_ADDR_OWVAR 26
1648: PUSH
1649: LD_STRING Elizabeth Whitney
1651: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1652: LD_ADDR_OWVAR 29
1656: PUSH
1657: LD_INT 9
1659: PUSH
1660: LD_INT 11
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1667: LD_ADDR_OWVAR 30
1671: PUSH
1672: LD_INT 0
1674: PUSH
1675: LD_INT 0
1677: PUSH
1678: LD_INT 2
1680: PUSH
1681: LD_INT 0
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1690: LD_ADDR_OWVAR 31
1694: PUSH
1695: LD_INT 2
1697: PUSH
1698: LD_INT 2
1700: PUSH
1701: LD_INT 4
1703: PUSH
1704: LD_INT 2
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: ST_TO_ADDR
// un = CreateHuman ;
1713: LD_ADDR_VAR 0 3
1717: PUSH
1718: CALL_OW 44
1722: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1723: LD_VAR 0 3
1727: PPUSH
1728: LD_INT 10
1730: PPUSH
1731: LD_INT 0
1733: PPUSH
1734: CALL_OW 49
// InitHc ;
1738: CALL_OW 19
// end ;
1742: LD_VAR 0 1
1746: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1747: LD_INT 0
1749: PPUSH
1750: PPUSH
1751: PPUSH
1752: PPUSH
// uc_nation = 1 ;
1753: LD_ADDR_OWVAR 21
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// uc_side = 1 ;
1761: LD_ADDR_OWVAR 20
1765: PUSH
1766: LD_INT 1
1768: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1769: LD_ADDR_OWVAR 37
1773: PUSH
1774: LD_INT 2
1776: ST_TO_ADDR
// vc_engine := engine_combustion ;
1777: LD_ADDR_OWVAR 39
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// vc_control := control_manual ;
1785: LD_ADDR_OWVAR 38
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1793: LD_ADDR_OWVAR 41
1797: PUSH
1798: LD_INT 65
1800: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun ] [ Difficulty ] ;
1801: LD_ADDR_OWVAR 40
1805: PUSH
1806: LD_INT 5
1808: PUSH
1809: LD_INT 3
1811: PUSH
1812: LD_INT 4
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_OWVAR 67
1824: ARRAY
1825: ST_TO_ADDR
// veh := CreateVehicle ;
1826: LD_ADDR_VAR 0 5
1830: PUSH
1831: CALL_OW 45
1835: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1836: LD_VAR 0 5
1840: PPUSH
1841: LD_INT 2
1843: PPUSH
1844: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1848: LD_INT 17
1850: PPUSH
1851: LD_INT 4
1853: PPUSH
1854: CALL_OW 428
1858: PUSH
1859: LD_INT 0
1861: EQUAL
1862: IFFALSE 1884
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1864: LD_VAR 0 5
1868: PPUSH
1869: LD_INT 17
1871: PPUSH
1872: LD_INT 4
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 48
1882: GO 1902
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1884: LD_VAR 0 5
1888: PPUSH
1889: LD_INT 23
1891: PPUSH
1892: LD_INT 10
1894: PPUSH
1895: LD_INT 0
1897: PPUSH
1898: CALL_OW 48
// hc_class := 1 ;
1902: LD_ADDR_OWVAR 28
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// hc_sex := sex_male ;
1910: LD_ADDR_OWVAR 27
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1918: LD_ADDR_OWVAR 33
1922: PUSH
1923: LD_STRING SecondCharsGal
1925: ST_TO_ADDR
// hc_face_number := 59 ;
1926: LD_ADDR_OWVAR 34
1930: PUSH
1931: LD_INT 59
1933: ST_TO_ADDR
// hc_name := Max Gray ;
1934: LD_ADDR_OWVAR 26
1938: PUSH
1939: LD_STRING Max Gray
1941: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1942: LD_ADDR_OWVAR 29
1946: PUSH
1947: LD_INT 9
1949: PUSH
1950: LD_INT 11
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1957: LD_ADDR_OWVAR 30
1961: PUSH
1962: LD_INT 1
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: LD_INT 0
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1980: LD_ADDR_OWVAR 31
1984: PUSH
1985: LD_INT 4
1987: PUSH
1988: LD_INT 1
1990: PUSH
1991: LD_INT 1
1993: PUSH
1994: LD_INT 0
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: ST_TO_ADDR
// un = CreateHuman ;
2003: LD_ADDR_VAR 0 4
2007: PUSH
2008: CALL_OW 44
2012: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2013: LD_VAR 0 4
2017: PPUSH
2018: LD_INT 11
2020: PPUSH
2021: LD_INT 0
2023: PPUSH
2024: CALL_OW 49
// hc_class := 2 ;
2028: LD_ADDR_OWVAR 28
2032: PUSH
2033: LD_INT 2
2035: ST_TO_ADDR
// hc_sex := sex_male ;
2036: LD_ADDR_OWVAR 27
2040: PUSH
2041: LD_INT 1
2043: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2044: LD_ADDR_OWVAR 33
2048: PUSH
2049: LD_STRING SecondCharsGal
2051: ST_TO_ADDR
// hc_face_number := 50 ;
2052: LD_ADDR_OWVAR 34
2056: PUSH
2057: LD_INT 50
2059: ST_TO_ADDR
// hc_name := Frank Hughes ;
2060: LD_ADDR_OWVAR 26
2064: PUSH
2065: LD_STRING Frank Hughes
2067: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2068: LD_ADDR_OWVAR 29
2072: PUSH
2073: LD_INT 10
2075: PUSH
2076: LD_INT 10
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2083: LD_ADDR_OWVAR 30
2087: PUSH
2088: LD_INT 1
2090: PUSH
2091: LD_INT 2
2093: PUSH
2094: LD_INT 0
2096: PUSH
2097: LD_INT 0
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2106: LD_ADDR_OWVAR 31
2110: PUSH
2111: LD_INT 1
2113: PUSH
2114: LD_INT 3
2116: PUSH
2117: LD_INT 0
2119: PUSH
2120: LD_INT 1
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: ST_TO_ADDR
// un = CreateHuman ;
2129: LD_ADDR_VAR 0 4
2133: PUSH
2134: CALL_OW 44
2138: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2139: LD_VAR 0 4
2143: PPUSH
2144: LD_INT 11
2146: PPUSH
2147: LD_INT 0
2149: PPUSH
2150: CALL_OW 49
// hc_class := 1 ;
2154: LD_ADDR_OWVAR 28
2158: PUSH
2159: LD_INT 1
2161: ST_TO_ADDR
// hc_sex := sex_male ;
2162: LD_ADDR_OWVAR 27
2166: PUSH
2167: LD_INT 1
2169: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2170: LD_ADDR_OWVAR 33
2174: PUSH
2175: LD_STRING SecondCharsGal
2177: ST_TO_ADDR
// hc_face_number := 54 ;
2178: LD_ADDR_OWVAR 34
2182: PUSH
2183: LD_INT 54
2185: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2186: LD_ADDR_OWVAR 26
2190: PUSH
2191: LD_STRING Luigi Ghbellin
2193: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2194: LD_ADDR_OWVAR 29
2198: PUSH
2199: LD_INT 11
2201: PUSH
2202: LD_INT 11
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2209: LD_ADDR_OWVAR 30
2213: PUSH
2214: LD_INT 1
2216: PUSH
2217: LD_INT 0
2219: PUSH
2220: LD_INT 0
2222: PUSH
2223: LD_INT 0
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2232: LD_ADDR_OWVAR 31
2236: PUSH
2237: LD_INT 2
2239: PUSH
2240: LD_INT 1
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: LD_INT 1
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: ST_TO_ADDR
// un = CreateHuman ;
2255: LD_ADDR_VAR 0 4
2259: PUSH
2260: CALL_OW 44
2264: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2265: LD_VAR 0 4
2269: PPUSH
2270: LD_INT 11
2272: PPUSH
2273: LD_INT 0
2275: PPUSH
2276: CALL_OW 49
// hc_class := 3 ;
2280: LD_ADDR_OWVAR 28
2284: PUSH
2285: LD_INT 3
2287: ST_TO_ADDR
// hc_sex := sex_male ;
2288: LD_ADDR_OWVAR 27
2292: PUSH
2293: LD_INT 1
2295: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2296: LD_ADDR_OWVAR 33
2300: PUSH
2301: LD_STRING AmGalRemake
2303: ST_TO_ADDR
// hc_face_number := 6 ;
2304: LD_ADDR_OWVAR 34
2308: PUSH
2309: LD_INT 6
2311: ST_TO_ADDR
// hc_name := Leon Carter ;
2312: LD_ADDR_OWVAR 26
2316: PUSH
2317: LD_STRING Leon Carter
2319: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2320: LD_ADDR_OWVAR 29
2324: PUSH
2325: LD_INT 10
2327: PUSH
2328: LD_INT 9
2330: PUSH
2331: EMPTY
2332: LIST
2333: LIST
2334: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2335: LD_ADDR_OWVAR 30
2339: PUSH
2340: LD_INT 0
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: LD_INT 2
2348: PUSH
2349: LD_INT 1
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2358: LD_ADDR_OWVAR 31
2362: PUSH
2363: LD_INT 0
2365: PUSH
2366: LD_INT 2
2368: PUSH
2369: LD_INT 3
2371: PUSH
2372: LD_INT 1
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: ST_TO_ADDR
// un = CreateHuman ;
2381: LD_ADDR_VAR 0 4
2385: PUSH
2386: CALL_OW 44
2390: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2391: LD_VAR 0 4
2395: PPUSH
2396: LD_VAR 0 5
2400: PPUSH
2401: CALL_OW 52
// if count = 4 then
2405: LD_VAR 0 1
2409: PUSH
2410: LD_INT 4
2412: EQUAL
2413: IFFALSE 2541
// begin hc_class := 1 ;
2415: LD_ADDR_OWVAR 28
2419: PUSH
2420: LD_INT 1
2422: ST_TO_ADDR
// hc_sex := sex_male ;
2423: LD_ADDR_OWVAR 27
2427: PUSH
2428: LD_INT 1
2430: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2431: LD_ADDR_OWVAR 33
2435: PUSH
2436: LD_STRING SecondCharsGal
2438: ST_TO_ADDR
// hc_face_number := 34 ;
2439: LD_ADDR_OWVAR 34
2443: PUSH
2444: LD_INT 34
2446: ST_TO_ADDR
// hc_name := Ian Hill ;
2447: LD_ADDR_OWVAR 26
2451: PUSH
2452: LD_STRING Ian Hill
2454: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2455: LD_ADDR_OWVAR 29
2459: PUSH
2460: LD_INT 10
2462: PUSH
2463: LD_INT 12
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2470: LD_ADDR_OWVAR 30
2474: PUSH
2475: LD_INT 1
2477: PUSH
2478: LD_INT 0
2480: PUSH
2481: LD_INT 0
2483: PUSH
2484: LD_INT 0
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2493: LD_ADDR_OWVAR 31
2497: PUSH
2498: LD_INT 3
2500: PUSH
2501: LD_INT 1
2503: PUSH
2504: LD_INT 1
2506: PUSH
2507: LD_INT 0
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: ST_TO_ADDR
// un = CreateHuman ;
2516: LD_ADDR_VAR 0 4
2520: PUSH
2521: CALL_OW 44
2525: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2526: LD_VAR 0 4
2530: PPUSH
2531: LD_INT 11
2533: PPUSH
2534: LD_INT 0
2536: PPUSH
2537: CALL_OW 49
// end ; if count = 5 then
2541: LD_VAR 0 1
2545: PUSH
2546: LD_INT 5
2548: EQUAL
2549: IFFALSE 2803
// begin hc_class := 1 ;
2551: LD_ADDR_OWVAR 28
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// hc_sex := sex_male ;
2559: LD_ADDR_OWVAR 27
2563: PUSH
2564: LD_INT 1
2566: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2567: LD_ADDR_OWVAR 33
2571: PUSH
2572: LD_STRING SecondCharsGal
2574: ST_TO_ADDR
// hc_face_number := 34 ;
2575: LD_ADDR_OWVAR 34
2579: PUSH
2580: LD_INT 34
2582: ST_TO_ADDR
// hc_name := Ian Hill ;
2583: LD_ADDR_OWVAR 26
2587: PUSH
2588: LD_STRING Ian Hill
2590: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2591: LD_ADDR_OWVAR 29
2595: PUSH
2596: LD_INT 10
2598: PUSH
2599: LD_INT 12
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2606: LD_ADDR_OWVAR 30
2610: PUSH
2611: LD_INT 1
2613: PUSH
2614: LD_INT 0
2616: PUSH
2617: LD_INT 0
2619: PUSH
2620: LD_INT 0
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2629: LD_ADDR_OWVAR 31
2633: PUSH
2634: LD_INT 3
2636: PUSH
2637: LD_INT 1
2639: PUSH
2640: LD_INT 1
2642: PUSH
2643: LD_INT 0
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: ST_TO_ADDR
// un = CreateHuman ;
2652: LD_ADDR_VAR 0 4
2656: PUSH
2657: CALL_OW 44
2661: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2662: LD_VAR 0 4
2666: PPUSH
2667: LD_INT 11
2669: PPUSH
2670: LD_INT 0
2672: PPUSH
2673: CALL_OW 49
// hc_class := 1 ;
2677: LD_ADDR_OWVAR 28
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// hc_sex := sex_female ;
2685: LD_ADDR_OWVAR 27
2689: PUSH
2690: LD_INT 2
2692: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2693: LD_ADDR_OWVAR 33
2697: PUSH
2698: LD_STRING SecondCharsGal
2700: ST_TO_ADDR
// hc_face_number := 41 ;
2701: LD_ADDR_OWVAR 34
2705: PUSH
2706: LD_INT 41
2708: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2709: LD_ADDR_OWVAR 26
2713: PUSH
2714: LD_STRING Kate Wadsworth
2716: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2717: LD_ADDR_OWVAR 29
2721: PUSH
2722: LD_INT 9
2724: PUSH
2725: LD_INT 9
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2732: LD_ADDR_OWVAR 30
2736: PUSH
2737: LD_INT 0
2739: PUSH
2740: LD_INT 2
2742: PUSH
2743: LD_INT 0
2745: PUSH
2746: LD_INT 0
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2755: LD_ADDR_OWVAR 31
2759: PUSH
2760: LD_INT 2
2762: PUSH
2763: LD_INT 3
2765: PUSH
2766: LD_INT 1
2768: PUSH
2769: LD_INT 0
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: LIST
2777: ST_TO_ADDR
// un = CreateHuman ;
2778: LD_ADDR_VAR 0 4
2782: PUSH
2783: CALL_OW 44
2787: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2788: LD_VAR 0 4
2792: PPUSH
2793: LD_INT 11
2795: PPUSH
2796: LD_INT 0
2798: PPUSH
2799: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2803: LD_INT 11
2805: PPUSH
2806: LD_INT 22
2808: PUSH
2809: LD_INT 1
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 21
2818: PUSH
2819: LD_INT 1
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PUSH
2826: LD_INT 26
2828: PUSH
2829: LD_INT 1
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: PPUSH
2841: CALL_OW 70
2845: PUSH
2846: LD_INT 1
2848: ARRAY
2849: PPUSH
2850: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2854: LD_INT 11
2856: PPUSH
2857: LD_INT 22
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 21
2869: PUSH
2870: LD_INT 1
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 26
2879: PUSH
2880: LD_INT 1
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: PPUSH
2892: CALL_OW 70
2896: PUSH
2897: LD_INT 1
2899: ARRAY
2900: PPUSH
2901: LD_STRING D6-Sol3-1
2903: PPUSH
2904: CALL_OW 88
// end ; end_of_file
2908: LD_VAR 0 2
2912: RET
// export function PrepareRussianCommander ; begin
2913: LD_INT 0
2915: PPUSH
// uc_side = 3 ;
2916: LD_ADDR_OWVAR 20
2920: PUSH
2921: LD_INT 3
2923: ST_TO_ADDR
// uc_nation = 3 ;
2924: LD_ADDR_OWVAR 21
2928: PUSH
2929: LD_INT 3
2931: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2932: LD_ADDR_EXP 15
2936: PUSH
2937: LD_STRING Stolypin
2939: PPUSH
2940: CALL_OW 25
2944: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2945: LD_EXP 15
2949: PPUSH
2950: LD_INT 21
2952: PPUSH
2953: CALL_OW 52
// end ;
2957: LD_VAR 0 1
2961: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2962: LD_INT 0
2964: PPUSH
2965: PPUSH
2966: PPUSH
2967: PPUSH
// if Difficulty > 1 then
2968: LD_OWVAR 67
2972: PUSH
2973: LD_INT 1
2975: GREATER
2976: IFFALSE 3086
// begin uc_side := 3 ;
2978: LD_ADDR_OWVAR 20
2982: PUSH
2983: LD_INT 3
2985: ST_TO_ADDR
// uc_nation := 3 ;
2986: LD_ADDR_OWVAR 21
2990: PUSH
2991: LD_INT 3
2993: ST_TO_ADDR
// InitHc ;
2994: CALL_OW 19
// InitBc ;
2998: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3002: LD_INT 0
3004: PPUSH
3005: LD_INT 1
3007: PPUSH
3008: LD_INT 4
3010: PPUSH
3011: CALL_OW 380
// bc_type := b_breastwork ;
3015: LD_ADDR_OWVAR 42
3019: PUSH
3020: LD_INT 31
3022: ST_TO_ADDR
// bc_level := 4 ;
3023: LD_ADDR_OWVAR 43
3027: PUSH
3028: LD_INT 4
3030: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3031: LD_ADDR_VAR 0 3
3035: PUSH
3036: LD_INT 100
3038: PPUSH
3039: LD_INT 58
3041: PPUSH
3042: LD_INT 2
3044: PPUSH
3045: CALL_OW 47
3049: ST_TO_ADDR
// un := CreateHuman ;
3050: LD_ADDR_VAR 0 4
3054: PUSH
3055: CALL_OW 44
3059: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3060: LD_VAR 0 4
3064: PPUSH
3065: LD_INT 5
3067: PPUSH
3068: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3072: LD_VAR 0 4
3076: PPUSH
3077: LD_VAR 0 3
3081: PPUSH
3082: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3086: LD_INT 3
3088: PPUSH
3089: LD_INT 3
3091: PPUSH
3092: LD_INT 22
3094: PPUSH
3095: LD_EXP 16
3099: PPUSH
3100: LD_EXP 17
3104: PPUSH
3105: CALL_OW 12
3109: PPUSH
3110: LD_INT 1
3112: PPUSH
3113: LD_INT 3
3115: PUSH
3116: LD_INT 4
3118: PUSH
3119: LD_INT 5
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: LIST
3126: PUSH
3127: LD_OWVAR 67
3131: ARRAY
3132: PPUSH
3133: CALL 4335 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3137: LD_INT 3
3139: PPUSH
3140: LD_INT 3
3142: PPUSH
3143: LD_INT 21
3145: PPUSH
3146: LD_EXP 16
3150: PPUSH
3151: LD_EXP 17
3155: PPUSH
3156: CALL_OW 12
3160: PPUSH
3161: LD_INT 2
3163: PPUSH
3164: LD_INT 3
3166: PPUSH
3167: CALL 4335 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3171: LD_INT 3
3173: PPUSH
3174: LD_INT 3
3176: PPUSH
3177: LD_INT 1
3179: PPUSH
3180: LD_EXP 16
3184: PPUSH
3185: LD_EXP 17
3189: PPUSH
3190: CALL_OW 12
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: LD_INT 3
3200: PPUSH
3201: CALL 4335 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3205: LD_INT 3
3207: PPUSH
3208: LD_INT 3
3210: PPUSH
3211: LD_INT 24
3213: PPUSH
3214: LD_EXP 16
3218: PPUSH
3219: LD_EXP 17
3223: PPUSH
3224: CALL_OW 12
3228: PPUSH
3229: LD_INT 3
3231: PPUSH
3232: LD_INT 5
3234: PPUSH
3235: CALL 4335 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3239: LD_ADDR_VAR 0 2
3243: PUSH
3244: LD_INT 22
3246: PUSH
3247: LD_INT 3
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: PUSH
3254: LD_INT 30
3256: PUSH
3257: LD_INT 32
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: PPUSH
3268: CALL_OW 69
3272: PUSH
3273: FOR_IN
3274: IFFALSE 3314
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3276: LD_INT 3
3278: PPUSH
3279: LD_INT 3
3281: PPUSH
3282: LD_VAR 0 2
3286: PPUSH
3287: LD_EXP 16
3291: PPUSH
3292: LD_EXP 17
3296: PPUSH
3297: CALL_OW 12
3301: PPUSH
3302: LD_INT 1
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: CALL 4335 0 6
3312: GO 3273
3314: POP
3315: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3316: LD_ADDR_VAR 0 2
3320: PUSH
3321: LD_INT 22
3323: PUSH
3324: LD_INT 3
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 30
3333: PUSH
3334: LD_INT 31
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 69
3349: PUSH
3350: FOR_IN
3351: IFFALSE 3379
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3353: LD_EXP 16
3357: PPUSH
3358: LD_EXP 17
3362: PPUSH
3363: CALL_OW 12
3367: PPUSH
3368: LD_VAR 0 2
3372: PPUSH
3373: CALL 4445 0 2
3377: GO 3350
3379: POP
3380: POP
// end ;
3381: LD_VAR 0 1
3385: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3386: LD_INT 0
3388: PPUSH
3389: PPUSH
3390: PPUSH
3391: PPUSH
// uc_side = 6 ;
3392: LD_ADDR_OWVAR 20
3396: PUSH
3397: LD_INT 6
3399: ST_TO_ADDR
// uc_nation = 3 ;
3400: LD_ADDR_OWVAR 21
3404: PUSH
3405: LD_INT 3
3407: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
3408: LD_ADDR_VAR 0 2
3412: PUSH
3413: DOUBLE
3414: LD_INT 1
3416: DEC
3417: ST_TO_ADDR
3418: LD_INT 1
3420: PUSH
3421: LD_INT 2
3423: PUSH
3424: LD_INT 1
3426: PPUSH
3427: LD_INT 2
3429: PPUSH
3430: CALL_OW 12
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: LD_OWVAR 67
3444: ARRAY
3445: PUSH
3446: FOR_TO
3447: IFFALSE 3607
// begin vc_engine = 1 ;
3449: LD_ADDR_OWVAR 39
3453: PUSH
3454: LD_INT 1
3456: ST_TO_ADDR
// vc_control = 1 ;
3457: LD_ADDR_OWVAR 38
3461: PUSH
3462: LD_INT 1
3464: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
3465: LD_ADDR_OWVAR 40
3469: PUSH
3470: LD_INT 42
3472: PUSH
3473: LD_INT 42
3475: PUSH
3476: LD_INT 43
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_OWVAR 67
3488: ARRAY
3489: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
3490: LD_ADDR_OWVAR 37
3494: PUSH
3495: LD_INT 21
3497: PUSH
3498: LD_INT 22
3500: PUSH
3501: LD_INT 22
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_OWVAR 67
3513: ARRAY
3514: ST_TO_ADDR
// veh = CreateVehicle ;
3515: LD_ADDR_VAR 0 3
3519: PUSH
3520: CALL_OW 45
3524: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3525: LD_VAR 0 3
3529: PPUSH
3530: LD_INT 3
3532: PPUSH
3533: LD_INT 0
3535: PPUSH
3536: CALL_OW 49
// hc_gallery =  ;
3540: LD_ADDR_OWVAR 33
3544: PUSH
3545: LD_STRING 
3547: ST_TO_ADDR
// hc_name =  ;
3548: LD_ADDR_OWVAR 26
3552: PUSH
3553: LD_STRING 
3555: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3556: LD_INT 0
3558: PPUSH
3559: LD_INT 3
3561: PPUSH
3562: LD_EXP 16
3566: PPUSH
3567: LD_EXP 17
3571: PPUSH
3572: CALL_OW 12
3576: PPUSH
3577: CALL_OW 380
// un = CreateHuman ;
3581: LD_ADDR_VAR 0 4
3585: PUSH
3586: CALL_OW 44
3590: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3591: LD_VAR 0 4
3595: PPUSH
3596: LD_VAR 0 3
3600: PPUSH
3601: CALL_OW 52
// end ;
3605: GO 3446
3607: POP
3608: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3609: LD_INT 0
3611: PPUSH
3612: LD_INT 2
3614: PPUSH
3615: LD_EXP 16
3619: PPUSH
3620: LD_EXP 17
3624: PPUSH
3625: CALL_OW 12
3629: PUSH
3630: LD_INT 2
3632: PLUS
3633: PPUSH
3634: CALL_OW 380
// un = CreateHuman ;
3638: LD_ADDR_VAR 0 4
3642: PUSH
3643: CALL_OW 44
3647: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3648: LD_VAR 0 4
3652: PPUSH
3653: LD_INT 3
3655: PPUSH
3656: LD_INT 0
3658: PPUSH
3659: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3663: LD_INT 0
3665: PPUSH
3666: LD_INT 4
3668: PPUSH
3669: LD_EXP 16
3673: PPUSH
3674: LD_EXP 17
3678: PPUSH
3679: CALL_OW 12
3683: PUSH
3684: LD_INT 2
3686: PLUS
3687: PPUSH
3688: CALL_OW 380
// un = CreateHuman ;
3692: LD_ADDR_VAR 0 4
3696: PUSH
3697: CALL_OW 44
3701: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3702: LD_VAR 0 4
3706: PPUSH
3707: LD_INT 3
3709: PPUSH
3710: LD_INT 0
3712: PPUSH
3713: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3717: LD_ADDR_VAR 0 2
3721: PUSH
3722: DOUBLE
3723: LD_INT 1
3725: DEC
3726: ST_TO_ADDR
3727: LD_INT 2
3729: PUSH
3730: LD_INT 3
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: LIST
3740: PUSH
3741: LD_OWVAR 67
3745: ARRAY
3746: PUSH
3747: LD_INT 1
3749: PPUSH
3750: LD_INT 3
3752: PPUSH
3753: CALL_OW 12
3757: PLUS
3758: PUSH
3759: FOR_TO
3760: IFFALSE 3830
// begin hc_gallery =  ;
3762: LD_ADDR_OWVAR 33
3766: PUSH
3767: LD_STRING 
3769: ST_TO_ADDR
// hc_name =  ;
3770: LD_ADDR_OWVAR 26
3774: PUSH
3775: LD_STRING 
3777: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3778: LD_INT 0
3780: PPUSH
3781: LD_INT 1
3783: PPUSH
3784: LD_EXP 16
3788: PPUSH
3789: LD_EXP 17
3793: PPUSH
3794: CALL_OW 12
3798: PPUSH
3799: CALL_OW 380
// un = CreateHuman ;
3803: LD_ADDR_VAR 0 4
3807: PUSH
3808: CALL_OW 44
3812: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3813: LD_VAR 0 4
3817: PPUSH
3818: LD_INT 3
3820: PPUSH
3821: LD_INT 0
3823: PPUSH
3824: CALL_OW 49
// end ;
3828: GO 3759
3830: POP
3831: POP
// vc_engine = 1 ;
3832: LD_ADDR_OWVAR 39
3836: PUSH
3837: LD_INT 1
3839: ST_TO_ADDR
// vc_control = 1 ;
3840: LD_ADDR_OWVAR 38
3844: PUSH
3845: LD_INT 1
3847: ST_TO_ADDR
// vc_weapon = 51 ;
3848: LD_ADDR_OWVAR 40
3852: PUSH
3853: LD_INT 51
3855: ST_TO_ADDR
// vc_chassis = 22 ;
3856: LD_ADDR_OWVAR 37
3860: PUSH
3861: LD_INT 22
3863: ST_TO_ADDR
// veh = CreateVehicle ;
3864: LD_ADDR_VAR 0 3
3868: PUSH
3869: CALL_OW 45
3873: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3874: LD_VAR 0 3
3878: PPUSH
3879: LD_INT 3
3881: PPUSH
3882: LD_INT 0
3884: PPUSH
3885: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3889: LD_VAR 0 3
3893: PPUSH
3894: LD_INT 1
3896: PPUSH
3897: LD_INT 100
3899: PPUSH
3900: CALL_OW 290
// hc_gallery =  ;
3904: LD_ADDR_OWVAR 33
3908: PUSH
3909: LD_STRING 
3911: ST_TO_ADDR
// hc_name =  ;
3912: LD_ADDR_OWVAR 26
3916: PUSH
3917: LD_STRING 
3919: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3920: LD_INT 0
3922: PPUSH
3923: LD_INT 3
3925: PPUSH
3926: LD_EXP 16
3930: PPUSH
3931: LD_EXP 17
3935: PPUSH
3936: CALL_OW 12
3940: PPUSH
3941: CALL_OW 380
// un = CreateHuman ;
3945: LD_ADDR_VAR 0 4
3949: PUSH
3950: CALL_OW 44
3954: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3955: LD_VAR 0 4
3959: PPUSH
3960: LD_VAR 0 3
3964: PPUSH
3965: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3969: LD_ADDR_VAR 0 2
3973: PUSH
3974: LD_INT 22
3976: PUSH
3977: LD_INT 6
3979: PUSH
3980: EMPTY
3981: LIST
3982: LIST
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: LD_INT 3
3989: PUSH
3990: LD_INT 25
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: EMPTY
3997: LIST
3998: LIST
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: LD_INT 3
4006: PUSH
4007: LD_INT 25
4009: PUSH
4010: LD_INT 4
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: PUSH
4035: FOR_IN
4036: IFFALSE 4055
// ComAgressiveMove ( i , 45 , 46 ) ;
4038: LD_VAR 0 2
4042: PPUSH
4043: LD_INT 45
4045: PPUSH
4046: LD_INT 46
4048: PPUSH
4049: CALL_OW 114
4053: GO 4035
4055: POP
4056: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4057: LD_ADDR_VAR 0 2
4061: PUSH
4062: LD_INT 22
4064: PUSH
4065: LD_INT 6
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 25
4074: PUSH
4075: LD_INT 2
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: PPUSH
4086: CALL_OW 69
4090: PUSH
4091: FOR_IN
4092: IFFALSE 4123
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4094: LD_ADDR_EXP 21
4098: PUSH
4099: LD_VAR 0 2
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: LD_INT 48
4109: PPUSH
4110: LD_INT 55
4112: PPUSH
4113: LD_INT 5
4115: PPUSH
4116: CALL_OW 145
4120: ST_TO_ADDR
4121: GO 4091
4123: POP
4124: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4125: LD_ADDR_VAR 0 2
4129: PUSH
4130: LD_INT 22
4132: PUSH
4133: LD_INT 6
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 25
4142: PUSH
4143: LD_INT 4
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PPUSH
4154: CALL_OW 69
4158: PUSH
4159: FOR_IN
4160: IFFALSE 4179
// ComMoveXY ( i , 39 , 55 ) ;
4162: LD_VAR 0 2
4166: PPUSH
4167: LD_INT 39
4169: PPUSH
4170: LD_INT 55
4172: PPUSH
4173: CALL_OW 111
4177: GO 4159
4179: POP
4180: POP
// end ;
4181: LD_VAR 0 1
4185: RET
// export function PrepareFirstAttack ; var i , un ; begin
4186: LD_INT 0
4188: PPUSH
4189: PPUSH
4190: PPUSH
// uc_side = 5 ;
4191: LD_ADDR_OWVAR 20
4195: PUSH
4196: LD_INT 5
4198: ST_TO_ADDR
// uc_nation = 3 ;
4199: LD_ADDR_OWVAR 21
4203: PUSH
4204: LD_INT 3
4206: ST_TO_ADDR
// for i := 1 to 4 do
4207: LD_ADDR_VAR 0 2
4211: PUSH
4212: DOUBLE
4213: LD_INT 1
4215: DEC
4216: ST_TO_ADDR
4217: LD_INT 4
4219: PUSH
4220: FOR_TO
4221: IFFALSE 4320
// begin hc_gallery =  ;
4223: LD_ADDR_OWVAR 33
4227: PUSH
4228: LD_STRING 
4230: ST_TO_ADDR
// hc_name =  ;
4231: LD_ADDR_OWVAR 26
4235: PUSH
4236: LD_STRING 
4238: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4239: LD_INT 0
4241: PPUSH
4242: LD_INT 1
4244: PPUSH
4245: LD_EXP 16
4249: PPUSH
4250: LD_EXP 17
4254: PPUSH
4255: CALL_OW 12
4259: PPUSH
4260: CALL_OW 380
// un = CreateHuman ;
4264: LD_ADDR_VAR 0 3
4268: PUSH
4269: CALL_OW 44
4273: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4274: LD_VAR 0 3
4278: PPUSH
4279: LD_INT 4
4281: PPUSH
4282: LD_INT 0
4284: PPUSH
4285: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4289: LD_VAR 0 3
4293: PPUSH
4294: LD_EXP 1
4298: PPUSH
4299: CALL_OW 250
4303: PPUSH
4304: LD_EXP 1
4308: PPUSH
4309: CALL_OW 251
4313: PPUSH
4314: CALL_OW 114
// end ;
4318: GO 4220
4320: POP
4321: POP
// firstRussianAttack = 1 ;
4322: LD_ADDR_EXP 23
4326: PUSH
4327: LD_INT 1
4329: ST_TO_ADDR
// end ; end_of_file
4330: LD_VAR 0 1
4334: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4335: LD_INT 0
4337: PPUSH
4338: PPUSH
4339: PPUSH
4340: PPUSH
// for i = 1 to count do
4341: LD_ADDR_VAR 0 8
4345: PUSH
4346: DOUBLE
4347: LD_INT 1
4349: DEC
4350: ST_TO_ADDR
4351: LD_VAR 0 6
4355: PUSH
4356: FOR_TO
4357: IFFALSE 4438
// begin uc_side = side ;
4359: LD_ADDR_OWVAR 20
4363: PUSH
4364: LD_VAR 0 1
4368: ST_TO_ADDR
// uc_nation = nation ;
4369: LD_ADDR_OWVAR 21
4373: PUSH
4374: LD_VAR 0 2
4378: ST_TO_ADDR
// hc_gallery =  ;
4379: LD_ADDR_OWVAR 33
4383: PUSH
4384: LD_STRING 
4386: ST_TO_ADDR
// hc_name =  ;
4387: LD_ADDR_OWVAR 26
4391: PUSH
4392: LD_STRING 
4394: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4395: LD_INT 0
4397: PPUSH
4398: LD_VAR 0 5
4402: PPUSH
4403: LD_VAR 0 4
4407: PPUSH
4408: CALL_OW 380
// un = CreateHuman ;
4412: LD_ADDR_VAR 0 10
4416: PUSH
4417: CALL_OW 44
4421: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4422: LD_VAR 0 10
4426: PPUSH
4427: LD_VAR 0 3
4431: PPUSH
4432: CALL_OW 52
// end ;
4436: GO 4356
4438: POP
4439: POP
// end ;
4440: LD_VAR 0 7
4444: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4445: LD_INT 0
4447: PPUSH
4448: PPUSH
4449: PPUSH
// uc_side := GetSide ( b ) ;
4450: LD_ADDR_OWVAR 20
4454: PUSH
4455: LD_VAR 0 2
4459: PPUSH
4460: CALL_OW 255
4464: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4465: LD_ADDR_OWVAR 21
4469: PUSH
4470: LD_VAR 0 2
4474: PPUSH
4475: CALL_OW 248
4479: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4480: LD_INT 0
4482: PPUSH
4483: LD_INT 1
4485: PPUSH
4486: LD_VAR 0 1
4490: PPUSH
4491: CALL_OW 380
// un = CreateHuman ;
4495: LD_ADDR_VAR 0 4
4499: PUSH
4500: CALL_OW 44
4504: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4505: LD_ADDR_VAR 0 5
4509: PUSH
4510: LD_VAR 0 2
4514: PPUSH
4515: CALL_OW 254
4519: PUSH
4520: LD_INT 3
4522: MINUS
4523: ST_TO_ADDR
// if dir < 0 then
4524: LD_VAR 0 5
4528: PUSH
4529: LD_INT 0
4531: LESS
4532: IFFALSE 4548
// dir := 6 + dir ;
4534: LD_ADDR_VAR 0 5
4538: PUSH
4539: LD_INT 6
4541: PUSH
4542: LD_VAR 0 5
4546: PLUS
4547: ST_TO_ADDR
// SetDir ( un , dir ) ;
4548: LD_VAR 0 4
4552: PPUSH
4553: LD_VAR 0 5
4557: PPUSH
4558: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4562: LD_VAR 0 4
4566: PPUSH
4567: LD_VAR 0 2
4571: PPUSH
4572: CALL_OW 52
// end ;
4576: LD_VAR 0 3
4580: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4581: LD_INT 0
4583: PPUSH
4584: PPUSH
4585: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4586: LD_ADDR_VAR 0 6
4590: PUSH
4591: LD_VAR 0 1
4595: PUSH
4596: LD_INT 1
4598: PPUSH
4599: LD_VAR 0 1
4603: PPUSH
4604: CALL_OW 12
4608: ARRAY
4609: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4610: LD_VAR 0 6
4614: PPUSH
4615: CALL_OW 258
4619: PUSH
4620: LD_INT 1
4622: EQUAL
4623: IFFALSE 4641
// Say ( speaker , dialogMID ) else
4625: LD_VAR 0 6
4629: PPUSH
4630: LD_VAR 0 2
4634: PPUSH
4635: CALL_OW 88
4639: GO 4655
// Say ( speaker , dialogFID ) ;
4641: LD_VAR 0 6
4645: PPUSH
4646: LD_VAR 0 3
4650: PPUSH
4651: CALL_OW 88
// result := speaker ;
4655: LD_ADDR_VAR 0 4
4659: PUSH
4660: LD_VAR 0 6
4664: ST_TO_ADDR
// end ;
4665: LD_VAR 0 4
4669: RET
// export function PrepareDifficulty ; var tmp ; begin
4670: LD_INT 0
4672: PPUSH
4673: PPUSH
// if Difficulty = 1 then
4674: LD_OWVAR 67
4678: PUSH
4679: LD_INT 1
4681: EQUAL
4682: IFFALSE 4700
// begin RuSoldMinLevel = 1 ;
4684: LD_ADDR_EXP 16
4688: PUSH
4689: LD_INT 1
4691: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4692: LD_ADDR_EXP 17
4696: PUSH
4697: LD_INT 2
4699: ST_TO_ADDR
// end ; if Difficulty = 2 then
4700: LD_OWVAR 67
4704: PUSH
4705: LD_INT 2
4707: EQUAL
4708: IFFALSE 4809
// begin RuSoldMinLevel = 2 ;
4710: LD_ADDR_EXP 16
4714: PUSH
4715: LD_INT 2
4717: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4718: LD_ADDR_EXP 17
4722: PUSH
4723: LD_INT 3
4725: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4726: LD_INT 23
4728: PPUSH
4729: CALL_OW 64
// uc_nation = 3 ;
4733: LD_ADDR_OWVAR 21
4737: PUSH
4738: LD_INT 3
4740: ST_TO_ADDR
// uc_side = 3 ;
4741: LD_ADDR_OWVAR 20
4745: PUSH
4746: LD_INT 3
4748: ST_TO_ADDR
// bc_level = 5 ;
4749: LD_ADDR_OWVAR 43
4753: PUSH
4754: LD_INT 5
4756: ST_TO_ADDR
// bc_type = 32 ;
4757: LD_ADDR_OWVAR 42
4761: PUSH
4762: LD_INT 32
4764: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4765: LD_ADDR_VAR 0 2
4769: PUSH
4770: LD_INT 76
4772: PPUSH
4773: LD_INT 91
4775: PPUSH
4776: LD_INT 2
4778: PPUSH
4779: CALL_OW 47
4783: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4784: LD_VAR 0 2
4788: PPUSH
4789: LD_INT 43
4791: PPUSH
4792: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4796: LD_INT 51
4798: PPUSH
4799: LD_INT 3
4801: PPUSH
4802: LD_INT 1
4804: PPUSH
4805: CALL_OW 322
// end ; if Difficulty = 3 then
4809: LD_OWVAR 67
4813: PUSH
4814: LD_INT 3
4816: EQUAL
4817: IFFALSE 4979
// begin RuSoldMinLevel = 2 ;
4819: LD_ADDR_EXP 16
4823: PUSH
4824: LD_INT 2
4826: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4827: LD_ADDR_EXP 17
4831: PUSH
4832: LD_INT 4
4834: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4835: LD_INT 26
4837: PPUSH
4838: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4842: LD_INT 23
4844: PPUSH
4845: CALL_OW 64
// uc_nation = 3 ;
4849: LD_ADDR_OWVAR 21
4853: PUSH
4854: LD_INT 3
4856: ST_TO_ADDR
// uc_side = 3 ;
4857: LD_ADDR_OWVAR 20
4861: PUSH
4862: LD_INT 3
4864: ST_TO_ADDR
// bc_level = 5 ;
4865: LD_ADDR_OWVAR 43
4869: PUSH
4870: LD_INT 5
4872: ST_TO_ADDR
// bc_type = 32 ;
4873: LD_ADDR_OWVAR 42
4877: PUSH
4878: LD_INT 32
4880: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4881: LD_ADDR_VAR 0 2
4885: PUSH
4886: LD_INT 76
4888: PPUSH
4889: LD_INT 91
4891: PPUSH
4892: LD_INT 2
4894: PPUSH
4895: CALL_OW 47
4899: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4900: LD_VAR 0 2
4904: PPUSH
4905: LD_INT 44
4907: PPUSH
4908: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4912: LD_ADDR_VAR 0 2
4916: PUSH
4917: LD_INT 83
4919: PPUSH
4920: LD_INT 84
4922: PPUSH
4923: LD_INT 2
4925: PPUSH
4926: CALL_OW 47
4930: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4931: LD_VAR 0 2
4935: PPUSH
4936: LD_INT 43
4938: PPUSH
4939: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4943: LD_INT 51
4945: PPUSH
4946: LD_INT 3
4948: PPUSH
4949: LD_INT 1
4951: PPUSH
4952: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4956: LD_INT 52
4958: PPUSH
4959: LD_INT 3
4961: PPUSH
4962: LD_INT 1
4964: PPUSH
4965: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4969: LD_INT 25
4971: PPUSH
4972: LD_INT 44
4974: PPUSH
4975: CALL_OW 431
// end ; end ;
4979: LD_VAR 0 1
4983: RET
// export function EnergyDialog ; begin
4984: LD_INT 0
4986: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4987: LD_INT 46
4989: PPUSH
4990: LD_INT 1
4992: PPUSH
4993: CALL_OW 321
4997: PUSH
4998: LD_INT 1
5000: EQUAL
5001: PUSH
5002: LD_INT 35
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: CALL_OW 321
5012: PUSH
5013: LD_INT 1
5015: EQUAL
5016: AND
5017: IFFALSE 5041
// begin Say ( JMM , D9c-JMM-1 ) ;
5019: LD_EXP 1
5023: PPUSH
5024: LD_STRING D9c-JMM-1
5026: PPUSH
5027: CALL_OW 88
// energyVDialog = 1 ;
5031: LD_ADDR_EXP 33
5035: PUSH
5036: LD_INT 1
5038: ST_TO_ADDR
// end else
5039: GO 5195
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5041: LD_INT 35
5043: PPUSH
5044: LD_INT 1
5046: PPUSH
5047: CALL_OW 321
5051: PUSH
5052: LD_INT 2
5054: EQUAL
5055: PUSH
5056: LD_EXP 33
5060: PUSH
5061: LD_INT 0
5063: EQUAL
5064: AND
5065: IFFALSE 5087
// begin Say ( JMM , D9c-JMM-1a ) ;
5067: LD_EXP 1
5071: PPUSH
5072: LD_STRING D9c-JMM-1a
5074: PPUSH
5075: CALL_OW 88
// energyVDialog = 1 ;
5079: LD_ADDR_EXP 33
5083: PUSH
5084: LD_INT 1
5086: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5087: LD_INT 46
5089: PPUSH
5090: LD_INT 1
5092: PPUSH
5093: CALL_OW 321
5097: PUSH
5098: LD_INT 2
5100: EQUAL
5101: PUSH
5102: LD_EXP 33
5106: PUSH
5107: LD_INT 0
5109: EQUAL
5110: AND
5111: IFFALSE 5133
// begin Say ( JMM , D9c-JMM-1b ) ;
5113: LD_EXP 1
5117: PPUSH
5118: LD_STRING D9c-JMM-1b
5120: PPUSH
5121: CALL_OW 88
// energyVDialog = 1 ;
5125: LD_ADDR_EXP 33
5129: PUSH
5130: LD_INT 1
5132: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5133: LD_INT 46
5135: PPUSH
5136: LD_INT 1
5138: PPUSH
5139: CALL_OW 321
5143: PUSH
5144: LD_INT 2
5146: EQUAL
5147: PUSH
5148: LD_INT 21
5150: PPUSH
5151: LD_INT 1
5153: PPUSH
5154: CALL_OW 321
5158: PUSH
5159: LD_INT 2
5161: EQUAL
5162: AND
5163: PUSH
5164: LD_EXP 33
5168: PUSH
5169: LD_INT 0
5171: EQUAL
5172: AND
5173: IFFALSE 5195
// begin Say ( JMM , D9c-JMM-1c ) ;
5175: LD_EXP 1
5179: PPUSH
5180: LD_STRING D9c-JMM-1c
5182: PPUSH
5183: CALL_OW 88
// energyVDialog = 1 ;
5187: LD_ADDR_EXP 33
5191: PUSH
5192: LD_INT 1
5194: ST_TO_ADDR
// end ; end ; end ;
5195: LD_VAR 0 1
5199: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5200: LD_INT 0
5202: PPUSH
5203: PPUSH
5204: PPUSH
5205: PPUSH
5206: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5207: LD_VAR 0 1
5211: NOT
5212: PUSH
5213: LD_VAR 0 1
5217: PPUSH
5218: CALL_OW 256
5222: PUSH
5223: LD_INT 250
5225: LESS
5226: OR
5227: PUSH
5228: LD_VAR 0 1
5232: PPUSH
5233: CALL_OW 314
5237: PUSH
5238: LD_VAR 0 1
5242: PPUSH
5243: CALL_OW 261
5247: PUSH
5248: LD_INT 20
5250: GREATER
5251: AND
5252: OR
5253: IFFALSE 5257
// exit ;
5255: GO 5622
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 261
5266: PUSH
5267: LD_INT 20
5269: LESS
5270: PUSH
5271: LD_VAR 0 1
5275: PPUSH
5276: CALL_OW 110
5280: PUSH
5281: LD_INT 21
5283: EQUAL
5284: NOT
5285: AND
5286: IFFALSE 5313
// begin ComStop ( bulldozer ) ;
5288: LD_VAR 0 1
5292: PPUSH
5293: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5297: LD_VAR 0 1
5301: PPUSH
5302: LD_INT 21
5304: PPUSH
5305: CALL_OW 109
// exit ;
5309: GO 5622
// end else
5311: GO 5340
// if GetFuel ( bulldozer ) > 20 then
5313: LD_VAR 0 1
5317: PPUSH
5318: CALL_OW 261
5322: PUSH
5323: LD_INT 20
5325: GREATER
5326: IFFALSE 5340
// SetTag ( bulldozer , 0 ) ;
5328: LD_VAR 0 1
5332: PPUSH
5333: LD_INT 0
5335: PPUSH
5336: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5340: LD_ADDR_VAR 0 5
5344: PUSH
5345: LD_VAR 0 2
5349: PPUSH
5350: CALL_OW 353
5354: ST_TO_ADDR
// tmp := [ ] ;
5355: LD_ADDR_VAR 0 6
5359: PUSH
5360: EMPTY
5361: ST_TO_ADDR
// for i = 1 to list do
5362: LD_ADDR_VAR 0 4
5366: PUSH
5367: DOUBLE
5368: LD_INT 1
5370: DEC
5371: ST_TO_ADDR
5372: LD_VAR 0 5
5376: PUSH
5377: FOR_TO
5378: IFFALSE 5476
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5380: LD_VAR 0 5
5384: PUSH
5385: LD_VAR 0 4
5389: ARRAY
5390: PUSH
5391: LD_INT 1
5393: ARRAY
5394: PPUSH
5395: LD_VAR 0 5
5399: PUSH
5400: LD_VAR 0 4
5404: ARRAY
5405: PUSH
5406: LD_INT 2
5408: ARRAY
5409: PPUSH
5410: CALL_OW 554
5414: IFFALSE 5474
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5416: LD_ADDR_VAR 0 6
5420: PUSH
5421: LD_VAR 0 6
5425: PPUSH
5426: LD_VAR 0 6
5430: PUSH
5431: LD_INT 1
5433: PLUS
5434: PPUSH
5435: LD_VAR 0 5
5439: PUSH
5440: LD_VAR 0 4
5444: ARRAY
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PUSH
5450: LD_VAR 0 5
5454: PUSH
5455: LD_VAR 0 4
5459: ARRAY
5460: PUSH
5461: LD_INT 2
5463: ARRAY
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 1
5473: ST_TO_ADDR
// end ;
5474: GO 5377
5476: POP
5477: POP
// ComStop ( bulldozer ) ;
5478: LD_VAR 0 1
5482: PPUSH
5483: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5487: LD_ADDR_VAR 0 7
5491: PUSH
5492: LD_VAR 0 1
5496: PPUSH
5497: CALL_OW 250
5501: PUSH
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 251
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: ST_TO_ADDR
// for i = tmp downto 1 do
5516: LD_ADDR_VAR 0 4
5520: PUSH
5521: DOUBLE
5522: LD_VAR 0 6
5526: INC
5527: ST_TO_ADDR
5528: LD_INT 1
5530: PUSH
5531: FOR_DOWNTO
5532: IFFALSE 5620
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5534: LD_ADDR_VAR 0 7
5538: PUSH
5539: LD_VAR 0 7
5543: PUSH
5544: LD_INT 1
5546: ARRAY
5547: PPUSH
5548: LD_VAR 0 7
5552: PUSH
5553: LD_INT 2
5555: ARRAY
5556: PPUSH
5557: LD_VAR 0 6
5561: PPUSH
5562: CALL 5723 0 3
5566: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5567: LD_VAR 0 1
5571: PPUSH
5572: LD_VAR 0 7
5576: PUSH
5577: LD_INT 1
5579: ARRAY
5580: PPUSH
5581: LD_VAR 0 7
5585: PUSH
5586: LD_INT 2
5588: ARRAY
5589: PPUSH
5590: CALL 5627 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5594: LD_ADDR_VAR 0 6
5598: PUSH
5599: LD_VAR 0 6
5603: PPUSH
5604: LD_VAR 0 7
5608: PUSH
5609: LD_INT 3
5611: ARRAY
5612: PPUSH
5613: CALL_OW 3
5617: ST_TO_ADDR
// end ;
5618: GO 5531
5620: POP
5621: POP
// end ;
5622: LD_VAR 0 3
5626: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5627: LD_INT 0
5629: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5630: LD_VAR 0 2
5634: PPUSH
5635: LD_VAR 0 3
5639: PPUSH
5640: CALL_OW 351
5644: PUSH
5645: LD_VAR 0 2
5649: PPUSH
5650: LD_VAR 0 3
5654: PPUSH
5655: CALL_OW 554
5659: AND
5660: PUSH
5661: LD_VAR 0 2
5665: PPUSH
5666: LD_VAR 0 3
5670: PPUSH
5671: CALL_OW 488
5675: AND
5676: PUSH
5677: LD_VAR 0 2
5681: PPUSH
5682: LD_VAR 0 3
5686: PPUSH
5687: CALL_OW 428
5691: PUSH
5692: LD_INT 1
5694: NEG
5695: EQUAL
5696: AND
5697: IFFALSE 5718
// AddComMoveXY ( bulldozer , x , y ) ;
5699: LD_VAR 0 1
5703: PPUSH
5704: LD_VAR 0 2
5708: PPUSH
5709: LD_VAR 0 3
5713: PPUSH
5714: CALL_OW 171
// end ;
5718: LD_VAR 0 4
5722: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5723: LD_INT 0
5725: PPUSH
5726: PPUSH
5727: PPUSH
5728: PPUSH
5729: PPUSH
5730: PPUSH
5731: PPUSH
// dist := 99999 ;
5732: LD_ADDR_VAR 0 6
5736: PUSH
5737: LD_INT 99999
5739: ST_TO_ADDR
// for i = 1 to list do
5740: LD_ADDR_VAR 0 5
5744: PUSH
5745: DOUBLE
5746: LD_INT 1
5748: DEC
5749: ST_TO_ADDR
5750: LD_VAR 0 3
5754: PUSH
5755: FOR_TO
5756: IFFALSE 5894
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5758: LD_ADDR_VAR 0 7
5762: PUSH
5763: LD_VAR 0 1
5767: PPUSH
5768: LD_VAR 0 2
5772: PPUSH
5773: LD_VAR 0 3
5777: PUSH
5778: LD_VAR 0 5
5782: ARRAY
5783: PUSH
5784: LD_INT 1
5786: ARRAY
5787: PPUSH
5788: LD_VAR 0 3
5792: PUSH
5793: LD_VAR 0 5
5797: ARRAY
5798: PUSH
5799: LD_INT 2
5801: ARRAY
5802: PPUSH
5803: CALL_OW 298
5807: ST_TO_ADDR
// if d = 0 then
5808: LD_VAR 0 7
5812: PUSH
5813: LD_INT 0
5815: EQUAL
5816: IFFALSE 5820
// continue ;
5818: GO 5755
// if d < dist then
5820: LD_VAR 0 7
5824: PUSH
5825: LD_VAR 0 6
5829: LESS
5830: IFFALSE 5892
// begin _x := list [ i ] [ 1 ] ;
5832: LD_ADDR_VAR 0 8
5836: PUSH
5837: LD_VAR 0 3
5841: PUSH
5842: LD_VAR 0 5
5846: ARRAY
5847: PUSH
5848: LD_INT 1
5850: ARRAY
5851: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5852: LD_ADDR_VAR 0 9
5856: PUSH
5857: LD_VAR 0 3
5861: PUSH
5862: LD_VAR 0 5
5866: ARRAY
5867: PUSH
5868: LD_INT 2
5870: ARRAY
5871: ST_TO_ADDR
// _i := i ;
5872: LD_ADDR_VAR 0 10
5876: PUSH
5877: LD_VAR 0 5
5881: ST_TO_ADDR
// dist := d ;
5882: LD_ADDR_VAR 0 6
5886: PUSH
5887: LD_VAR 0 7
5891: ST_TO_ADDR
// end ; end ;
5892: GO 5755
5894: POP
5895: POP
// result := [ _x , _y , _i , dist ] ;
5896: LD_ADDR_VAR 0 4
5900: PUSH
5901: LD_VAR 0 8
5905: PUSH
5906: LD_VAR 0 9
5910: PUSH
5911: LD_VAR 0 10
5915: PUSH
5916: LD_VAR 0 6
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: ST_TO_ADDR
// end ;
5927: LD_VAR 0 4
5931: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5932: LD_INT 0
5934: PPUSH
5935: PPUSH
5936: PPUSH
5937: PPUSH
// for i = 1 to 72 do
5938: LD_ADDR_VAR 0 5
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_INT 72
5950: PUSH
5951: FOR_TO
5952: IFFALSE 6010
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5954: LD_VAR 0 5
5958: PPUSH
5959: LD_VAR 0 1
5963: PPUSH
5964: CALL_OW 321
5968: PUSH
5969: LD_INT 1
5971: EQUAL
5972: PUSH
5973: LD_VAR 0 5
5977: PPUSH
5978: LD_VAR 0 3
5982: PPUSH
5983: CALL_OW 482
5987: PUSH
5988: LD_INT 1
5990: EQUAL
5991: AND
5992: IFFALSE 6008
// AddComResearch ( lab , i ) ;
5994: LD_VAR 0 2
5998: PPUSH
5999: LD_VAR 0 5
6003: PPUSH
6004: CALL_OW 184
6008: GO 5951
6010: POP
6011: POP
// end ;
6012: LD_VAR 0 4
6016: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
6017: LD_INT 0
6019: PPUSH
6020: PPUSH
6021: PPUSH
6022: PPUSH
6023: PPUSH
6024: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6025: LD_ADDR_VAR 0 7
6029: PUSH
6030: LD_VAR 0 2
6034: PPUSH
6035: CALL_OW 313
6039: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6040: LD_ADDR_VAR 0 8
6044: PUSH
6045: LD_VAR 0 3
6049: PPUSH
6050: LD_INT 22
6052: PUSH
6053: LD_VAR 0 1
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: LD_INT 25
6064: PUSH
6065: LD_INT 2
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: LD_INT 24
6074: PUSH
6075: LD_INT 750
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: LD_INT 3
6084: PUSH
6085: LD_INT 54
6087: PUSH
6088: EMPTY
6089: LIST
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PPUSH
6101: CALL_OW 70
6105: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6106: LD_ADDR_VAR 0 5
6110: PUSH
6111: LD_VAR 0 3
6115: PPUSH
6116: LD_INT 22
6118: PUSH
6119: LD_VAR 0 1
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 21
6130: PUSH
6131: LD_INT 3
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 3
6140: PUSH
6141: LD_INT 24
6143: PUSH
6144: LD_INT 1000
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: PUSH
6160: EMPTY
6161: LIST
6162: PPUSH
6163: CALL_OW 70
6167: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6168: LD_VAR 0 5
6172: NOT
6173: PUSH
6174: LD_INT 22
6176: PUSH
6177: LD_VAR 0 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 25
6188: PUSH
6189: LD_INT 2
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 24
6198: PUSH
6199: LD_INT 250
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: LIST
6210: PPUSH
6211: CALL_OW 69
6215: NOT
6216: AND
6217: IFFALSE 6221
// exit ;
6219: GO 6333
// if buildings_list > 0 and engineerOkInside then
6221: LD_VAR 0 5
6225: PUSH
6226: LD_INT 0
6228: GREATER
6229: PUSH
6230: LD_VAR 0 7
6234: AND
6235: IFFALSE 6261
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6237: LD_VAR 0 7
6241: PPUSH
6242: LD_INT 25
6244: PUSH
6245: LD_INT 2
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 72
6256: PPUSH
6257: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
6261: LD_VAR 0 5
6265: PUSH
6266: LD_INT 0
6268: GREATER
6269: PUSH
6270: LD_VAR 0 8
6274: PUSH
6275: LD_INT 0
6277: GREATER
6278: AND
6279: IFFALSE 6299
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
6299: LD_VAR 0 5
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: PUSH
6308: LD_VAR 0 8
6312: PUSH
6313: LD_INT 0
6315: GREATER
6316: AND
6317: IFFALSE 6333
// ComEnterUnit ( engineerOkOutside , building ) ;
6319: LD_VAR 0 8
6323: PPUSH
6324: LD_VAR 0 2
6328: PPUSH
6329: CALL_OW 120
// end ;
6333: LD_VAR 0 4
6337: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
6338: LD_INT 0
6340: PPUSH
6341: PPUSH
6342: PPUSH
6343: PPUSH
6344: PPUSH
6345: PPUSH
6346: PPUSH
6347: PPUSH
6348: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6349: LD_ADDR_VAR 0 6
6353: PUSH
6354: LD_INT 22
6356: PUSH
6357: LD_VAR 0 1
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: LD_INT 25
6368: PUSH
6369: LD_INT 4
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: LD_INT 23
6378: PUSH
6379: LD_INT 2
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 24
6388: PUSH
6389: LD_INT 251
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: PPUSH
6402: CALL_OW 69
6406: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6407: LD_ADDR_VAR 0 7
6411: PUSH
6412: LD_VAR 0 3
6416: PPUSH
6417: LD_INT 22
6419: PUSH
6420: LD_VAR 0 1
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: LD_INT 23
6431: PUSH
6432: LD_INT 2
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PUSH
6439: LD_INT 25
6441: PUSH
6442: LD_INT 4
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 50
6451: PUSH
6452: EMPTY
6453: LIST
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: PPUSH
6461: CALL_OW 70
6465: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6466: LD_ADDR_VAR 0 10
6470: PUSH
6471: LD_VAR 0 3
6475: PPUSH
6476: LD_INT 22
6478: PUSH
6479: LD_VAR 0 1
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: LD_INT 21
6490: PUSH
6491: LD_INT 1
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: LD_INT 25
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 3
6517: PUSH
6518: LD_INT 24
6520: PUSH
6521: LD_INT 750
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: PPUSH
6538: CALL_OW 70
6542: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6543: LD_ADDR_VAR 0 11
6547: PUSH
6548: LD_VAR 0 2
6552: PPUSH
6553: LD_INT 22
6555: PUSH
6556: LD_VAR 0 1
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 21
6567: PUSH
6568: LD_INT 1
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: LD_INT 25
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 3
6594: PUSH
6595: LD_INT 24
6597: PUSH
6598: LD_INT 1000
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: PPUSH
6615: CALL_OW 70
6619: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6620: LD_VAR 0 10
6624: NOT
6625: PUSH
6626: LD_VAR 0 11
6630: NOT
6631: AND
6632: PUSH
6633: LD_VAR 0 6
6637: NOT
6638: AND
6639: IFFALSE 6643
// exit ;
6641: GO 6877
// if damageUnits > 0 and sci_list > 0 then
6643: LD_VAR 0 10
6647: PUSH
6648: LD_INT 0
6650: GREATER
6651: PUSH
6652: LD_VAR 0 6
6656: PUSH
6657: LD_INT 0
6659: GREATER
6660: AND
6661: IFFALSE 6677
// ComMoveToArea ( damageUnits , healArea ) ;
6663: LD_VAR 0 10
6667: PPUSH
6668: LD_VAR 0 2
6672: PPUSH
6673: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6677: LD_VAR 0 11
6681: PUSH
6682: LD_INT 0
6684: GREATER
6685: PUSH
6686: LD_VAR 0 6
6690: PUSH
6691: LD_INT 0
6693: GREATER
6694: AND
6695: IFFALSE 6706
// ComExitBuilding ( sci_list ) ;
6697: LD_VAR 0 6
6701: PPUSH
6702: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6706: LD_VAR 0 11
6710: PUSH
6711: LD_INT 0
6713: GREATER
6714: PUSH
6715: LD_VAR 0 7
6719: PUSH
6720: LD_INT 0
6722: GREATER
6723: AND
6724: IFFALSE 6744
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6726: LD_VAR 0 7
6730: PPUSH
6731: LD_VAR 0 11
6735: PUSH
6736: LD_INT 1
6738: ARRAY
6739: PPUSH
6740: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6744: LD_VAR 0 10
6748: PUSH
6749: LD_INT 0
6751: EQUAL
6752: PUSH
6753: LD_VAR 0 11
6757: PUSH
6758: LD_INT 0
6760: EQUAL
6761: AND
6762: PUSH
6763: LD_VAR 0 7
6767: PUSH
6768: LD_INT 0
6770: GREATER
6771: AND
6772: IFFALSE 6877
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6774: LD_ADDR_VAR 0 12
6778: PUSH
6779: LD_INT 22
6781: PUSH
6782: LD_VAR 0 1
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 21
6793: PUSH
6794: LD_INT 3
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 30
6803: PUSH
6804: LD_INT 8
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: LIST
6815: PPUSH
6816: CALL_OW 69
6820: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6821: LD_ADDR_VAR 0 13
6825: PUSH
6826: LD_INT 1
6828: PPUSH
6829: LD_VAR 0 12
6833: PPUSH
6834: CALL_OW 12
6838: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6839: LD_VAR 0 7
6843: PPUSH
6844: LD_INT 3
6846: PUSH
6847: LD_INT 60
6849: PUSH
6850: EMPTY
6851: LIST
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PPUSH
6857: CALL_OW 72
6861: PPUSH
6862: LD_VAR 0 12
6866: PUSH
6867: LD_VAR 0 13
6871: ARRAY
6872: PPUSH
6873: CALL_OW 120
// end ; end ;
6877: LD_VAR 0 5
6881: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6882: LD_INT 0
6884: PPUSH
6885: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6886: LD_INT 22
6888: PUSH
6889: LD_VAR 0 1
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 21
6900: PUSH
6901: LD_INT 2
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PPUSH
6912: CALL_OW 69
6916: PUSH
6917: LD_VAR 0 3
6921: LESSEQUAL
6922: IFFALSE 6989
// for i = 1 to vehCount do
6924: LD_ADDR_VAR 0 9
6928: PUSH
6929: DOUBLE
6930: LD_INT 1
6932: DEC
6933: ST_TO_ADDR
6934: LD_VAR 0 3
6938: PUSH
6939: FOR_TO
6940: IFFALSE 6987
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6942: LD_VAR 0 2
6946: PPUSH
6947: LD_VAR 0 7
6951: PPUSH
6952: LD_VAR 0 5
6956: PPUSH
6957: LD_VAR 0 6
6961: PPUSH
6962: LD_VAR 0 4
6966: PUSH
6967: LD_INT 1
6969: PPUSH
6970: LD_VAR 0 4
6974: PPUSH
6975: CALL_OW 12
6979: ARRAY
6980: PPUSH
6981: CALL_OW 185
6985: GO 6939
6987: POP
6988: POP
// end ;
6989: LD_VAR 0 8
6993: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6994: LD_INT 0
6996: PPUSH
6997: PPUSH
6998: PPUSH
6999: PPUSH
7000: PPUSH
7001: PPUSH
7002: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7003: LD_ADDR_VAR 0 8
7007: PUSH
7008: LD_INT 22
7010: PUSH
7011: LD_VAR 0 1
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 21
7022: PUSH
7023: LD_INT 2
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 3
7032: PUSH
7033: LD_INT 34
7035: PUSH
7036: LD_INT 51
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 34
7045: PUSH
7046: LD_INT 53
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PUSH
7053: LD_INT 34
7055: PUSH
7056: LD_INT 52
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 24
7071: PUSH
7072: LD_INT 650
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: PPUSH
7085: CALL_OW 69
7089: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
7090: LD_INT 22
7092: PUSH
7093: LD_VAR 0 1
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: LD_INT 21
7104: PUSH
7105: LD_INT 2
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PUSH
7112: LD_INT 24
7114: PUSH
7115: LD_INT 1000
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: PPUSH
7127: CALL_OW 69
7131: PUSH
7132: LD_INT 3
7134: PUSH
7135: LD_INT 4
7137: PUSH
7138: LD_INT 5
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: PUSH
7146: LD_OWVAR 67
7150: ARRAY
7151: GREATEREQUAL
7152: IFFALSE 7649
// repeat wait ( 0 0$1 ) ;
7154: LD_INT 35
7156: PPUSH
7157: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7161: LD_ADDR_VAR 0 8
7165: PUSH
7166: LD_INT 22
7168: PUSH
7169: LD_VAR 0 1
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: LD_INT 21
7180: PUSH
7181: LD_INT 2
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 3
7190: PUSH
7191: LD_INT 34
7193: PUSH
7194: LD_INT 51
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: LD_INT 34
7203: PUSH
7204: LD_INT 53
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 34
7213: PUSH
7214: LD_INT 52
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: LD_INT 650
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: PPUSH
7243: CALL_OW 69
7247: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7248: LD_INT 22
7250: PUSH
7251: LD_VAR 0 1
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: LD_INT 95
7262: PUSH
7263: LD_VAR 0 2
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PPUSH
7276: CALL_OW 69
7280: NOT
7281: PUSH
7282: LD_VAR 0 11
7286: PUSH
7287: LD_INT 0
7289: EQUAL
7290: AND
7291: IFFALSE 7346
// for i := 1 to wayX do
7293: LD_ADDR_VAR 0 6
7297: PUSH
7298: DOUBLE
7299: LD_INT 1
7301: DEC
7302: ST_TO_ADDR
7303: LD_VAR 0 3
7307: PUSH
7308: FOR_TO
7309: IFFALSE 7344
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7311: LD_VAR 0 8
7315: PPUSH
7316: LD_VAR 0 3
7320: PUSH
7321: LD_VAR 0 6
7325: ARRAY
7326: PPUSH
7327: LD_VAR 0 4
7331: PUSH
7332: LD_VAR 0 6
7336: ARRAY
7337: PPUSH
7338: CALL_OW 174
7342: GO 7308
7344: POP
7345: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
7346: LD_INT 22
7348: PUSH
7349: LD_VAR 0 1
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 95
7360: PUSH
7361: LD_VAR 0 2
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PPUSH
7374: CALL_OW 69
7378: IFFALSE 7602
// begin seeEnemy = 1 ;
7380: LD_ADDR_VAR 0 11
7384: PUSH
7385: LD_INT 1
7387: ST_TO_ADDR
// for j in vehiclesOK do
7388: LD_ADDR_VAR 0 7
7392: PUSH
7393: LD_VAR 0 8
7397: PUSH
7398: FOR_IN
7399: IFFALSE 7600
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7401: LD_ADDR_VAR 0 9
7405: PUSH
7406: LD_INT 81
7408: PUSH
7409: LD_VAR 0 1
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PUSH
7418: LD_INT 101
7420: PUSH
7421: LD_INT 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: PPUSH
7437: LD_VAR 0 7
7441: PPUSH
7442: CALL_OW 74
7446: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7447: LD_ADDR_VAR 0 10
7451: PUSH
7452: LD_INT 81
7454: PUSH
7455: LD_VAR 0 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 101
7466: PUSH
7467: LD_INT 1
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: LD_INT 2
7476: PUSH
7477: LD_INT 59
7479: PUSH
7480: EMPTY
7481: LIST
7482: PUSH
7483: LD_INT 21
7485: PUSH
7486: LD_INT 1
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 21
7495: PUSH
7496: LD_INT 2
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: LIST
7513: PUSH
7514: EMPTY
7515: LIST
7516: PPUSH
7517: CALL_OW 69
7521: PPUSH
7522: LD_VAR 0 7
7526: PPUSH
7527: CALL_OW 74
7531: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7532: LD_VAR 0 7
7536: PPUSH
7537: LD_VAR 0 9
7541: PPUSH
7542: CALL_OW 296
7546: PUSH
7547: LD_INT 8
7549: PLUS
7550: PUSH
7551: LD_VAR 0 7
7555: PPUSH
7556: LD_VAR 0 10
7560: PPUSH
7561: CALL_OW 296
7565: LESS
7566: IFFALSE 7584
// ComAttackUnit ( j , target1 ) else
7568: LD_VAR 0 7
7572: PPUSH
7573: LD_VAR 0 9
7577: PPUSH
7578: CALL_OW 115
7582: GO 7598
// ComAttackUnit ( j , target2 ) ;
7584: LD_VAR 0 7
7588: PPUSH
7589: LD_VAR 0 10
7593: PPUSH
7594: CALL_OW 115
// end ;
7598: GO 7398
7600: POP
7601: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7602: LD_INT 22
7604: PUSH
7605: LD_VAR 0 1
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: LD_INT 21
7616: PUSH
7617: LD_INT 2
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: PUSH
7624: LD_INT 24
7626: PUSH
7627: LD_INT 1000
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: PPUSH
7639: CALL_OW 69
7643: PUSH
7644: LD_INT 0
7646: EQUAL
7647: IFFALSE 7154
// seeEnemy = 0 ;
7649: LD_ADDR_VAR 0 11
7653: PUSH
7654: LD_INT 0
7656: ST_TO_ADDR
// end ;
7657: LD_VAR 0 5
7661: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7662: LD_INT 0
7664: PPUSH
7665: PPUSH
7666: PPUSH
7667: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7668: LD_ADDR_VAR 0 8
7672: PUSH
7673: LD_INT 22
7675: PUSH
7676: LD_VAR 0 1
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: LD_INT 21
7687: PUSH
7688: LD_INT 2
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: LD_INT 3
7697: PUSH
7698: LD_INT 34
7700: PUSH
7701: LD_INT 51
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 34
7710: PUSH
7711: LD_INT 53
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 34
7720: PUSH
7721: LD_INT 52
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 3
7736: PUSH
7737: LD_INT 24
7739: PUSH
7740: LD_INT 650
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: PPUSH
7757: CALL_OW 69
7761: ST_TO_ADDR
// if damageVehicles > 0 then
7762: LD_VAR 0 8
7766: PUSH
7767: LD_INT 0
7769: GREATER
7770: IFFALSE 7791
// ComMoveXY ( damageVehicles , repX , repY ) ;
7772: LD_VAR 0 8
7776: PPUSH
7777: LD_VAR 0 3
7781: PPUSH
7782: LD_VAR 0 4
7786: PPUSH
7787: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7791: LD_VAR 0 8
7795: PPUSH
7796: LD_INT 95
7798: PUSH
7799: LD_VAR 0 2
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_INT 3
7810: PUSH
7811: LD_INT 58
7813: PUSH
7814: EMPTY
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PPUSH
7825: CALL_OW 72
7829: PUSH
7830: LD_INT 0
7832: GREATER
7833: IFFALSE 7900
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7835: LD_ADDR_VAR 0 6
7839: PUSH
7840: LD_VAR 0 8
7844: PPUSH
7845: LD_INT 95
7847: PUSH
7848: LD_VAR 0 2
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: LD_INT 58
7862: PUSH
7863: EMPTY
7864: LIST
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PPUSH
7874: CALL_OW 72
7878: PUSH
7879: FOR_IN
7880: IFFALSE 7898
// ComExitVehicle ( UnitsInside ( i ) ) ;
7882: LD_VAR 0 6
7886: PPUSH
7887: CALL_OW 313
7891: PPUSH
7892: CALL_OW 121
7896: GO 7879
7898: POP
7899: POP
// end ;
7900: LD_VAR 0 5
7904: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7905: LD_INT 0
7907: PPUSH
7908: PPUSH
7909: PPUSH
7910: PPUSH
7911: PPUSH
7912: PPUSH
7913: PPUSH
7914: PPUSH
7915: PPUSH
7916: PPUSH
7917: PPUSH
// for i = 1 to medicCount do
7918: LD_ADDR_VAR 0 14
7922: PUSH
7923: DOUBLE
7924: LD_INT 1
7926: DEC
7927: ST_TO_ADDR
7928: LD_VAR 0 7
7932: PUSH
7933: FOR_TO
7934: IFFALSE 8016
// begin uc_side = side ;
7936: LD_ADDR_OWVAR 20
7940: PUSH
7941: LD_VAR 0 1
7945: ST_TO_ADDR
// uc_nation = nation ;
7946: LD_ADDR_OWVAR 21
7950: PUSH
7951: LD_VAR 0 2
7955: ST_TO_ADDR
// hc_name =  ;
7956: LD_ADDR_OWVAR 26
7960: PUSH
7961: LD_STRING 
7963: ST_TO_ADDR
// hc_gallery =  ;
7964: LD_ADDR_OWVAR 33
7968: PUSH
7969: LD_STRING 
7971: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7972: LD_INT 0
7974: PPUSH
7975: LD_INT 4
7977: PPUSH
7978: LD_VAR 0 8
7982: PPUSH
7983: CALL_OW 380
// un = CreateHuman ;
7987: LD_ADDR_VAR 0 16
7991: PUSH
7992: CALL_OW 44
7996: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7997: LD_VAR 0 16
8001: PPUSH
8002: LD_VAR 0 9
8006: PPUSH
8007: LD_INT 0
8009: PPUSH
8010: CALL_OW 49
// end ;
8014: GO 7933
8016: POP
8017: POP
// for i = 1 to soldierCount do
8018: LD_ADDR_VAR 0 14
8022: PUSH
8023: DOUBLE
8024: LD_INT 1
8026: DEC
8027: ST_TO_ADDR
8028: LD_VAR 0 3
8032: PUSH
8033: FOR_TO
8034: IFFALSE 8116
// begin uc_side = side ;
8036: LD_ADDR_OWVAR 20
8040: PUSH
8041: LD_VAR 0 1
8045: ST_TO_ADDR
// uc_nation = nation ;
8046: LD_ADDR_OWVAR 21
8050: PUSH
8051: LD_VAR 0 2
8055: ST_TO_ADDR
// hc_name =  ;
8056: LD_ADDR_OWVAR 26
8060: PUSH
8061: LD_STRING 
8063: ST_TO_ADDR
// hc_gallery =  ;
8064: LD_ADDR_OWVAR 33
8068: PUSH
8069: LD_STRING 
8071: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8072: LD_INT 0
8074: PPUSH
8075: LD_INT 1
8077: PPUSH
8078: LD_VAR 0 8
8082: PPUSH
8083: CALL_OW 380
// un = CreateHuman ;
8087: LD_ADDR_VAR 0 16
8091: PUSH
8092: CALL_OW 44
8096: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8097: LD_VAR 0 16
8101: PPUSH
8102: LD_VAR 0 9
8106: PPUSH
8107: LD_INT 0
8109: PPUSH
8110: CALL_OW 49
// end ;
8114: GO 8033
8116: POP
8117: POP
// for i = 1 to sniperCount do
8118: LD_ADDR_VAR 0 14
8122: PUSH
8123: DOUBLE
8124: LD_INT 1
8126: DEC
8127: ST_TO_ADDR
8128: LD_VAR 0 4
8132: PUSH
8133: FOR_TO
8134: IFFALSE 8216
// begin uc_side = side ;
8136: LD_ADDR_OWVAR 20
8140: PUSH
8141: LD_VAR 0 1
8145: ST_TO_ADDR
// uc_nation = nation ;
8146: LD_ADDR_OWVAR 21
8150: PUSH
8151: LD_VAR 0 2
8155: ST_TO_ADDR
// hc_name =  ;
8156: LD_ADDR_OWVAR 26
8160: PUSH
8161: LD_STRING 
8163: ST_TO_ADDR
// hc_gallery =  ;
8164: LD_ADDR_OWVAR 33
8168: PUSH
8169: LD_STRING 
8171: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8172: LD_INT 0
8174: PPUSH
8175: LD_INT 5
8177: PPUSH
8178: LD_VAR 0 8
8182: PPUSH
8183: CALL_OW 380
// un = CreateHuman ;
8187: LD_ADDR_VAR 0 16
8191: PUSH
8192: CALL_OW 44
8196: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8197: LD_VAR 0 16
8201: PPUSH
8202: LD_VAR 0 9
8206: PPUSH
8207: LD_INT 0
8209: PPUSH
8210: CALL_OW 49
// end ;
8214: GO 8133
8216: POP
8217: POP
// for i = 1 to bazookCount do
8218: LD_ADDR_VAR 0 14
8222: PUSH
8223: DOUBLE
8224: LD_INT 1
8226: DEC
8227: ST_TO_ADDR
8228: LD_VAR 0 5
8232: PUSH
8233: FOR_TO
8234: IFFALSE 8316
// begin uc_side = side ;
8236: LD_ADDR_OWVAR 20
8240: PUSH
8241: LD_VAR 0 1
8245: ST_TO_ADDR
// uc_nation = nation ;
8246: LD_ADDR_OWVAR 21
8250: PUSH
8251: LD_VAR 0 2
8255: ST_TO_ADDR
// hc_name =  ;
8256: LD_ADDR_OWVAR 26
8260: PUSH
8261: LD_STRING 
8263: ST_TO_ADDR
// hc_gallery =  ;
8264: LD_ADDR_OWVAR 33
8268: PUSH
8269: LD_STRING 
8271: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8272: LD_INT 0
8274: PPUSH
8275: LD_INT 9
8277: PPUSH
8278: LD_VAR 0 8
8282: PPUSH
8283: CALL_OW 380
// un = CreateHuman ;
8287: LD_ADDR_VAR 0 16
8291: PUSH
8292: CALL_OW 44
8296: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8297: LD_VAR 0 16
8301: PPUSH
8302: LD_VAR 0 9
8306: PPUSH
8307: LD_INT 0
8309: PPUSH
8310: CALL_OW 49
// end ;
8314: GO 8233
8316: POP
8317: POP
// for i = 1 to mortalCount do
8318: LD_ADDR_VAR 0 14
8322: PUSH
8323: DOUBLE
8324: LD_INT 1
8326: DEC
8327: ST_TO_ADDR
8328: LD_VAR 0 6
8332: PUSH
8333: FOR_TO
8334: IFFALSE 8416
// begin uc_side = side ;
8336: LD_ADDR_OWVAR 20
8340: PUSH
8341: LD_VAR 0 1
8345: ST_TO_ADDR
// uc_nation = nation ;
8346: LD_ADDR_OWVAR 21
8350: PUSH
8351: LD_VAR 0 2
8355: ST_TO_ADDR
// hc_name =  ;
8356: LD_ADDR_OWVAR 26
8360: PUSH
8361: LD_STRING 
8363: ST_TO_ADDR
// hc_gallery =  ;
8364: LD_ADDR_OWVAR 33
8368: PUSH
8369: LD_STRING 
8371: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8372: LD_INT 0
8374: PPUSH
8375: LD_INT 8
8377: PPUSH
8378: LD_VAR 0 8
8382: PPUSH
8383: CALL_OW 380
// un = CreateHuman ;
8387: LD_ADDR_VAR 0 16
8391: PUSH
8392: CALL_OW 44
8396: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8397: LD_VAR 0 16
8401: PPUSH
8402: LD_VAR 0 9
8406: PPUSH
8407: LD_INT 0
8409: PPUSH
8410: CALL_OW 49
// end ;
8414: GO 8333
8416: POP
8417: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8418: LD_ADDR_VAR 0 19
8422: PUSH
8423: LD_INT 22
8425: PUSH
8426: LD_VAR 0 1
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PUSH
8435: LD_INT 2
8437: PUSH
8438: LD_INT 25
8440: PUSH
8441: LD_INT 1
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 25
8450: PUSH
8451: LD_INT 5
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: LD_INT 25
8460: PUSH
8461: LD_INT 8
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: PUSH
8468: LD_INT 25
8470: PUSH
8471: LD_INT 9
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PPUSH
8489: CALL_OW 69
8493: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8494: LD_ADDR_VAR 0 18
8498: PUSH
8499: LD_INT 22
8501: PUSH
8502: LD_VAR 0 1
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 25
8513: PUSH
8514: LD_INT 4
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PPUSH
8525: CALL_OW 69
8529: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8530: LD_VAR 0 18
8534: PPUSH
8535: LD_VAR 0 10
8539: PPUSH
8540: CALL_OW 113
// if strategy = 1 then
8544: LD_VAR 0 12
8548: PUSH
8549: LD_INT 1
8551: EQUAL
8552: IFFALSE 9043
// begin for i in soldiersOK_list do
8554: LD_ADDR_VAR 0 14
8558: PUSH
8559: LD_VAR 0 19
8563: PUSH
8564: FOR_IN
8565: IFFALSE 8629
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8567: LD_VAR 0 14
8571: PPUSH
8572: LD_INT 91
8574: PPUSH
8575: LD_INT 63
8577: PPUSH
8578: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8582: LD_VAR 0 14
8586: PPUSH
8587: LD_INT 101
8589: PPUSH
8590: LD_INT 53
8592: PPUSH
8593: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8597: LD_VAR 0 14
8601: PPUSH
8602: LD_INT 75
8604: PPUSH
8605: LD_INT 23
8607: PPUSH
8608: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8612: LD_VAR 0 14
8616: PPUSH
8617: LD_INT 78
8619: PPUSH
8620: LD_INT 8
8622: PPUSH
8623: CALL_OW 174
// end ;
8627: GO 8564
8629: POP
8630: POP
// wait ( 0 0$30 ) ;
8631: LD_INT 1050
8633: PPUSH
8634: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8638: LD_INT 35
8640: PPUSH
8641: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8645: LD_ADDR_VAR 0 17
8649: PUSH
8650: LD_INT 22
8652: PUSH
8653: LD_VAR 0 1
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: LD_INT 1
8664: PUSH
8665: LD_INT 3
8667: PUSH
8668: LD_INT 24
8670: PUSH
8671: LD_INT 550
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PUSH
8682: LD_INT 24
8684: PUSH
8685: LD_INT 250
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: LIST
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PPUSH
8701: CALL_OW 69
8705: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8706: LD_ADDR_VAR 0 19
8710: PUSH
8711: LD_INT 22
8713: PUSH
8714: LD_VAR 0 1
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 2
8725: PUSH
8726: LD_INT 25
8728: PUSH
8729: LD_INT 1
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: LD_INT 25
8738: PUSH
8739: LD_INT 5
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_INT 25
8748: PUSH
8749: LD_INT 8
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 25
8758: PUSH
8759: LD_INT 9
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: PUSH
8773: LD_INT 24
8775: PUSH
8776: LD_INT 1000
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: LIST
8787: PPUSH
8788: CALL_OW 69
8792: ST_TO_ADDR
// if medicCount > 0 then
8793: LD_VAR 0 7
8797: PUSH
8798: LD_INT 0
8800: GREATER
8801: IFFALSE 8845
// begin if damageUnit_list > 0 then
8803: LD_VAR 0 17
8807: PUSH
8808: LD_INT 0
8810: GREATER
8811: IFFALSE 8845
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8813: LD_VAR 0 17
8817: PPUSH
8818: LD_VAR 0 10
8822: PPUSH
8823: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8827: LD_VAR 0 7
8831: PPUSH
8832: LD_VAR 0 17
8836: PUSH
8837: LD_INT 1
8839: ARRAY
8840: PPUSH
8841: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8845: LD_ADDR_VAR 0 14
8849: PUSH
8850: LD_VAR 0 19
8854: PUSH
8855: FOR_IN
8856: IFFALSE 9032
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8858: LD_ADDR_VAR 0 22
8862: PUSH
8863: LD_INT 22
8865: PUSH
8866: LD_VAR 0 11
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 69
8879: PPUSH
8880: LD_VAR 0 14
8884: PPUSH
8885: CALL_OW 74
8889: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8890: LD_ADDR_VAR 0 23
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: LD_VAR 0 11
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 2
8909: PUSH
8910: LD_INT 59
8912: PUSH
8913: EMPTY
8914: LIST
8915: PUSH
8916: LD_INT 21
8918: PUSH
8919: LD_INT 1
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: LD_INT 21
8928: PUSH
8929: LD_INT 2
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: EMPTY
8947: LIST
8948: PPUSH
8949: CALL_OW 69
8953: PPUSH
8954: LD_VAR 0 14
8958: PPUSH
8959: CALL_OW 74
8963: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8964: LD_VAR 0 14
8968: PPUSH
8969: LD_VAR 0 22
8973: PPUSH
8974: CALL_OW 296
8978: PUSH
8979: LD_INT 8
8981: PLUS
8982: PUSH
8983: LD_VAR 0 14
8987: PPUSH
8988: LD_VAR 0 23
8992: PPUSH
8993: CALL_OW 296
8997: LESS
8998: IFFALSE 9016
// begin ComAttackUnit ( i , target1 ) ;
9000: LD_VAR 0 14
9004: PPUSH
9005: LD_VAR 0 22
9009: PPUSH
9010: CALL_OW 115
// end else
9014: GO 9030
// begin ComAttackUnit ( i , target2 ) ;
9016: LD_VAR 0 14
9020: PPUSH
9021: LD_VAR 0 23
9025: PPUSH
9026: CALL_OW 115
// end ; end ;
9030: GO 8855
9032: POP
9033: POP
// until soldiersOK_list = [ ] ;
9034: LD_VAR 0 19
9038: PUSH
9039: EMPTY
9040: EQUAL
9041: IFFALSE 8638
// end ; if strategy = 2 then
9043: LD_VAR 0 12
9047: PUSH
9048: LD_INT 2
9050: EQUAL
9051: IFFALSE 9505
// begin for i in soldiersOK_list do
9053: LD_ADDR_VAR 0 14
9057: PUSH
9058: LD_VAR 0 19
9062: PUSH
9063: FOR_IN
9064: IFFALSE 9098
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
9066: LD_VAR 0 14
9070: PPUSH
9071: LD_INT 91
9073: PPUSH
9074: LD_INT 63
9076: PPUSH
9077: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
9081: LD_VAR 0 14
9085: PPUSH
9086: LD_INT 75
9088: PPUSH
9089: LD_INT 33
9091: PPUSH
9092: CALL_OW 174
// end ;
9096: GO 9063
9098: POP
9099: POP
// repeat wait ( 0 0$3 ) ;
9100: LD_INT 105
9102: PPUSH
9103: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9107: LD_ADDR_VAR 0 17
9111: PUSH
9112: LD_INT 22
9114: PUSH
9115: LD_VAR 0 1
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: PUSH
9124: LD_INT 1
9126: PUSH
9127: LD_INT 3
9129: PUSH
9130: LD_INT 24
9132: PUSH
9133: LD_INT 550
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: PUSH
9144: LD_INT 24
9146: PUSH
9147: LD_INT 250
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 69
9167: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9168: LD_ADDR_VAR 0 19
9172: PUSH
9173: LD_INT 22
9175: PUSH
9176: LD_VAR 0 1
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 2
9187: PUSH
9188: LD_INT 25
9190: PUSH
9191: LD_INT 1
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: LD_INT 25
9200: PUSH
9201: LD_INT 5
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: LD_INT 25
9210: PUSH
9211: LD_INT 8
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: LD_INT 25
9220: PUSH
9221: LD_INT 9
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: PUSH
9235: LD_INT 24
9237: PUSH
9238: LD_INT 1000
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: LIST
9249: PPUSH
9250: CALL_OW 69
9254: ST_TO_ADDR
// if medicCount > 0 then
9255: LD_VAR 0 7
9259: PUSH
9260: LD_INT 0
9262: GREATER
9263: IFFALSE 9307
// begin if damageUnit_list > 0 then
9265: LD_VAR 0 17
9269: PUSH
9270: LD_INT 0
9272: GREATER
9273: IFFALSE 9307
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
9275: LD_VAR 0 17
9279: PPUSH
9280: LD_VAR 0 10
9284: PPUSH
9285: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
9289: LD_VAR 0 7
9293: PPUSH
9294: LD_VAR 0 17
9298: PUSH
9299: LD_INT 1
9301: ARRAY
9302: PPUSH
9303: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
9307: LD_ADDR_VAR 0 14
9311: PUSH
9312: LD_VAR 0 19
9316: PUSH
9317: FOR_IN
9318: IFFALSE 9494
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9320: LD_ADDR_VAR 0 22
9324: PUSH
9325: LD_INT 22
9327: PUSH
9328: LD_VAR 0 11
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PPUSH
9337: CALL_OW 69
9341: PPUSH
9342: LD_VAR 0 14
9346: PPUSH
9347: CALL_OW 74
9351: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9352: LD_ADDR_VAR 0 23
9356: PUSH
9357: LD_INT 22
9359: PUSH
9360: LD_VAR 0 11
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 2
9371: PUSH
9372: LD_INT 59
9374: PUSH
9375: EMPTY
9376: LIST
9377: PUSH
9378: LD_INT 21
9380: PUSH
9381: LD_INT 1
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 21
9390: PUSH
9391: LD_INT 2
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: PPUSH
9411: CALL_OW 69
9415: PPUSH
9416: LD_VAR 0 14
9420: PPUSH
9421: CALL_OW 74
9425: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9426: LD_VAR 0 14
9430: PPUSH
9431: LD_VAR 0 22
9435: PPUSH
9436: CALL_OW 296
9440: PUSH
9441: LD_INT 8
9443: PLUS
9444: PUSH
9445: LD_VAR 0 14
9449: PPUSH
9450: LD_VAR 0 23
9454: PPUSH
9455: CALL_OW 296
9459: LESS
9460: IFFALSE 9478
// begin ComAttackUnit ( i , target1 ) ;
9462: LD_VAR 0 14
9466: PPUSH
9467: LD_VAR 0 22
9471: PPUSH
9472: CALL_OW 115
// end else
9476: GO 9492
// begin ComAttackUnit ( i , target2 ) ;
9478: LD_VAR 0 14
9482: PPUSH
9483: LD_VAR 0 23
9487: PPUSH
9488: CALL_OW 115
// end ; end ;
9492: GO 9317
9494: POP
9495: POP
// until soldiersOK_list = [ ] ;
9496: LD_VAR 0 19
9500: PUSH
9501: EMPTY
9502: EQUAL
9503: IFFALSE 9100
// end ; if not soldiersOK_list and medic_list then
9505: LD_VAR 0 19
9509: NOT
9510: PUSH
9511: LD_VAR 0 18
9515: AND
9516: IFFALSE 9656
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
9518: LD_ADDR_VAR 0 18
9522: PUSH
9523: LD_INT 22
9525: PUSH
9526: LD_VAR 0 1
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: LD_INT 25
9537: PUSH
9538: LD_INT 4
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PUSH
9545: LD_INT 50
9547: PUSH
9548: EMPTY
9549: LIST
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9561: LD_INT 35
9563: PPUSH
9564: CALL_OW 67
// for i in medic_list do
9568: LD_ADDR_VAR 0 14
9572: PUSH
9573: LD_VAR 0 18
9577: PUSH
9578: FOR_IN
9579: IFFALSE 9647
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
9581: LD_VAR 0 14
9585: PPUSH
9586: CALL_OW 314
9590: NOT
9591: PUSH
9592: LD_VAR 0 14
9596: PPUSH
9597: LD_INT 4
9599: PPUSH
9600: CALL_OW 308
9604: NOT
9605: AND
9606: IFFALSE 9622
// ComMoveToArea ( i , RussianAttack ) else
9608: LD_VAR 0 14
9612: PPUSH
9613: LD_INT 4
9615: PPUSH
9616: CALL_OW 113
9620: GO 9645
// if IsInArea ( i , RussianAttack ) then
9622: LD_VAR 0 14
9626: PPUSH
9627: LD_INT 4
9629: PPUSH
9630: CALL_OW 308
9634: IFFALSE 9645
// RemoveUnit ( i ) ;
9636: LD_VAR 0 14
9640: PPUSH
9641: CALL_OW 64
9645: GO 9578
9647: POP
9648: POP
// until not medic_list ;
9649: LD_VAR 0 18
9653: NOT
9654: IFFALSE 9518
// end ; end ;
9656: LD_VAR 0 13
9660: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9661: LD_INT 0
9663: PPUSH
9664: PPUSH
9665: PPUSH
9666: PPUSH
9667: PPUSH
9668: PPUSH
9669: PPUSH
9670: PPUSH
9671: PPUSH
9672: PPUSH
9673: PPUSH
// amChassisTab = [ ] ;
9674: LD_ADDR_VAR 0 19
9678: PUSH
9679: EMPTY
9680: ST_TO_ADDR
// arChassisTab = [ ] ;
9681: LD_ADDR_VAR 0 18
9685: PUSH
9686: EMPTY
9687: ST_TO_ADDR
// ruChassisTab = [ ] ;
9688: LD_ADDR_VAR 0 17
9692: PUSH
9693: EMPTY
9694: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9695: LD_INT 35
9697: PPUSH
9698: CALL_OW 67
// if nation = 1 then
9702: LD_VAR 0 5
9706: PUSH
9707: LD_INT 1
9709: EQUAL
9710: IFFALSE 10201
// begin uc_side = side ;
9712: LD_ADDR_OWVAR 20
9716: PUSH
9717: LD_VAR 0 2
9721: ST_TO_ADDR
// uc_nation = nation ;
9722: LD_ADDR_OWVAR 21
9726: PUSH
9727: LD_VAR 0 5
9731: ST_TO_ADDR
// vc_engine = vehengine ;
9732: LD_ADDR_OWVAR 39
9736: PUSH
9737: LD_VAR 0 6
9741: ST_TO_ADDR
// vc_control = vehcontrol ;
9742: LD_ADDR_OWVAR 38
9746: PUSH
9747: LD_VAR 0 7
9751: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9752: LD_ADDR_OWVAR 40
9756: PUSH
9757: LD_VAR 0 10
9761: PUSH
9762: LD_INT 1
9764: PPUSH
9765: LD_VAR 0 10
9769: PPUSH
9770: CALL_OW 12
9774: ARRAY
9775: ST_TO_ADDR
// for j = 1 to AMWeapon do
9776: LD_ADDR_VAR 0 14
9780: PUSH
9781: DOUBLE
9782: LD_INT 1
9784: DEC
9785: ST_TO_ADDR
9786: LD_VAR 0 10
9790: PUSH
9791: FOR_TO
9792: IFFALSE 10093
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9794: LD_VAR 0 10
9798: PUSH
9799: LD_VAR 0 14
9803: ARRAY
9804: PUSH
9805: LD_INT 2
9807: EQUAL
9808: PUSH
9809: LD_VAR 0 10
9813: PUSH
9814: LD_VAR 0 14
9818: ARRAY
9819: PUSH
9820: LD_INT 3
9822: EQUAL
9823: OR
9824: IFFALSE 9877
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9826: LD_ADDR_VAR 0 19
9830: PUSH
9831: LD_INT 1
9833: PUSH
9834: LD_INT 2
9836: PUSH
9837: LD_INT 3
9839: PUSH
9840: LD_INT 4
9842: PUSH
9843: LD_INT 5
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9853: LD_ADDR_OWVAR 37
9857: PUSH
9858: LD_VAR 0 19
9862: PUSH
9863: LD_INT 1
9865: PPUSH
9866: LD_VAR 0 19
9870: PPUSH
9871: CALL_OW 12
9875: ARRAY
9876: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9877: LD_VAR 0 10
9881: PUSH
9882: LD_VAR 0 14
9886: ARRAY
9887: PUSH
9888: LD_INT 4
9890: EQUAL
9891: PUSH
9892: LD_VAR 0 10
9896: PUSH
9897: LD_VAR 0 14
9901: ARRAY
9902: PUSH
9903: LD_INT 5
9905: EQUAL
9906: OR
9907: PUSH
9908: LD_VAR 0 10
9912: PUSH
9913: LD_VAR 0 14
9917: ARRAY
9918: PUSH
9919: LD_INT 9
9921: EQUAL
9922: OR
9923: PUSH
9924: LD_VAR 0 10
9928: PUSH
9929: LD_VAR 0 14
9933: ARRAY
9934: PUSH
9935: LD_INT 11
9937: EQUAL
9938: OR
9939: PUSH
9940: LD_VAR 0 10
9944: PUSH
9945: LD_VAR 0 14
9949: ARRAY
9950: PUSH
9951: LD_INT 7
9953: EQUAL
9954: OR
9955: IFFALSE 10004
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9957: LD_ADDR_VAR 0 19
9961: PUSH
9962: LD_INT 2
9964: PUSH
9965: LD_INT 3
9967: PUSH
9968: LD_INT 4
9970: PUSH
9971: LD_INT 5
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9980: LD_ADDR_OWVAR 37
9984: PUSH
9985: LD_VAR 0 19
9989: PUSH
9990: LD_INT 1
9992: PPUSH
9993: LD_VAR 0 19
9997: PPUSH
9998: CALL_OW 12
10002: ARRAY
10003: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
10004: LD_VAR 0 10
10008: PUSH
10009: LD_VAR 0 14
10013: ARRAY
10014: PUSH
10015: LD_INT 8
10017: EQUAL
10018: PUSH
10019: LD_VAR 0 10
10023: PUSH
10024: LD_VAR 0 14
10028: ARRAY
10029: PUSH
10030: LD_INT 6
10032: EQUAL
10033: OR
10034: PUSH
10035: LD_VAR 0 10
10039: PUSH
10040: LD_VAR 0 14
10044: ARRAY
10045: PUSH
10046: LD_INT 10
10048: EQUAL
10049: OR
10050: IFFALSE 10091
// begin amChassisTab = [ 4 , 5 ] ;
10052: LD_ADDR_VAR 0 19
10056: PUSH
10057: LD_INT 4
10059: PUSH
10060: LD_INT 5
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10067: LD_ADDR_OWVAR 37
10071: PUSH
10072: LD_VAR 0 19
10076: PUSH
10077: LD_INT 1
10079: PPUSH
10080: LD_VAR 0 19
10084: PPUSH
10085: CALL_OW 12
10089: ARRAY
10090: ST_TO_ADDR
// end ; end ;
10091: GO 9791
10093: POP
10094: POP
// veh = CreateVehicle ;
10095: LD_ADDR_VAR 0 16
10099: PUSH
10100: CALL_OW 45
10104: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10105: LD_VAR 0 16
10109: PPUSH
10110: LD_VAR 0 1
10114: PPUSH
10115: LD_INT 0
10117: PPUSH
10118: CALL_OW 49
// if vehControl = 1 then
10122: LD_VAR 0 7
10126: PUSH
10127: LD_INT 1
10129: EQUAL
10130: IFFALSE 10187
// begin hc_gallery =  ;
10132: LD_ADDR_OWVAR 33
10136: PUSH
10137: LD_STRING 
10139: ST_TO_ADDR
// hc_name =  ;
10140: LD_ADDR_OWVAR 26
10144: PUSH
10145: LD_STRING 
10147: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10148: LD_INT 0
10150: PPUSH
10151: LD_INT 3
10153: PPUSH
10154: LD_VAR 0 4
10158: PPUSH
10159: CALL_OW 380
// un = CreateHuman ;
10163: LD_ADDR_VAR 0 15
10167: PUSH
10168: CALL_OW 44
10172: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10173: LD_VAR 0 15
10177: PPUSH
10178: LD_VAR 0 16
10182: PPUSH
10183: CALL_OW 52
// end ; i = i + 1 ;
10187: LD_ADDR_VAR 0 13
10191: PUSH
10192: LD_VAR 0 13
10196: PUSH
10197: LD_INT 1
10199: PLUS
10200: ST_TO_ADDR
// end ; if nation = 2 then
10201: LD_VAR 0 5
10205: PUSH
10206: LD_INT 2
10208: EQUAL
10209: IFFALSE 10633
// begin uc_side = side ;
10211: LD_ADDR_OWVAR 20
10215: PUSH
10216: LD_VAR 0 2
10220: ST_TO_ADDR
// uc_nation = nation ;
10221: LD_ADDR_OWVAR 21
10225: PUSH
10226: LD_VAR 0 5
10230: ST_TO_ADDR
// vc_engine = vehengine ;
10231: LD_ADDR_OWVAR 39
10235: PUSH
10236: LD_VAR 0 6
10240: ST_TO_ADDR
// vc_control = vehcontrol ;
10241: LD_ADDR_OWVAR 38
10245: PUSH
10246: LD_VAR 0 7
10250: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10251: LD_ADDR_OWVAR 40
10255: PUSH
10256: LD_VAR 0 9
10260: PUSH
10261: LD_INT 1
10263: PPUSH
10264: LD_VAR 0 9
10268: PPUSH
10269: CALL_OW 12
10273: ARRAY
10274: ST_TO_ADDR
// for j = 1 to ARWeapons do
10275: LD_ADDR_VAR 0 14
10279: PUSH
10280: DOUBLE
10281: LD_INT 1
10283: DEC
10284: ST_TO_ADDR
10285: LD_VAR 0 9
10289: PUSH
10290: FOR_TO
10291: IFFALSE 10525
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10293: LD_VAR 0 9
10297: PUSH
10298: LD_VAR 0 14
10302: ARRAY
10303: PUSH
10304: LD_INT 24
10306: EQUAL
10307: PUSH
10308: LD_VAR 0 9
10312: PUSH
10313: LD_VAR 0 14
10317: ARRAY
10318: PUSH
10319: LD_INT 22
10321: EQUAL
10322: OR
10323: PUSH
10324: LD_VAR 0 9
10328: PUSH
10329: LD_VAR 0 14
10333: ARRAY
10334: PUSH
10335: LD_INT 23
10337: EQUAL
10338: OR
10339: PUSH
10340: LD_VAR 0 9
10344: PUSH
10345: LD_VAR 0 14
10349: ARRAY
10350: PUSH
10351: LD_INT 30
10353: EQUAL
10354: OR
10355: IFFALSE 10404
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10357: LD_ADDR_VAR 0 18
10361: PUSH
10362: LD_INT 11
10364: PUSH
10365: LD_INT 12
10367: PUSH
10368: LD_INT 13
10370: PUSH
10371: LD_INT 14
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10380: LD_ADDR_OWVAR 37
10384: PUSH
10385: LD_VAR 0 18
10389: PUSH
10390: LD_INT 1
10392: PPUSH
10393: LD_VAR 0 18
10397: PPUSH
10398: CALL_OW 12
10402: ARRAY
10403: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10404: LD_VAR 0 9
10408: PUSH
10409: LD_VAR 0 14
10413: ARRAY
10414: PUSH
10415: LD_INT 29
10417: EQUAL
10418: PUSH
10419: LD_VAR 0 9
10423: PUSH
10424: LD_VAR 0 14
10428: ARRAY
10429: PUSH
10430: LD_INT 28
10432: EQUAL
10433: OR
10434: PUSH
10435: LD_VAR 0 9
10439: PUSH
10440: LD_VAR 0 14
10444: ARRAY
10445: PUSH
10446: LD_INT 27
10448: EQUAL
10449: OR
10450: PUSH
10451: LD_VAR 0 9
10455: PUSH
10456: LD_VAR 0 14
10460: ARRAY
10461: PUSH
10462: LD_INT 26
10464: EQUAL
10465: OR
10466: PUSH
10467: LD_VAR 0 9
10471: PUSH
10472: LD_VAR 0 14
10476: ARRAY
10477: PUSH
10478: LD_INT 25
10480: EQUAL
10481: OR
10482: IFFALSE 10523
// begin arChassisTab = [ 13 , 14 ] ;
10484: LD_ADDR_VAR 0 18
10488: PUSH
10489: LD_INT 13
10491: PUSH
10492: LD_INT 14
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10499: LD_ADDR_OWVAR 37
10503: PUSH
10504: LD_VAR 0 18
10508: PUSH
10509: LD_INT 1
10511: PPUSH
10512: LD_VAR 0 18
10516: PPUSH
10517: CALL_OW 12
10521: ARRAY
10522: ST_TO_ADDR
// end ; end ;
10523: GO 10290
10525: POP
10526: POP
// veh = CreateVehicle ;
10527: LD_ADDR_VAR 0 16
10531: PUSH
10532: CALL_OW 45
10536: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10537: LD_VAR 0 16
10541: PPUSH
10542: LD_VAR 0 1
10546: PPUSH
10547: LD_INT 0
10549: PPUSH
10550: CALL_OW 49
// if vehcontrol = 1 then
10554: LD_VAR 0 7
10558: PUSH
10559: LD_INT 1
10561: EQUAL
10562: IFFALSE 10619
// begin hc_gallery =  ;
10564: LD_ADDR_OWVAR 33
10568: PUSH
10569: LD_STRING 
10571: ST_TO_ADDR
// hc_name =  ;
10572: LD_ADDR_OWVAR 26
10576: PUSH
10577: LD_STRING 
10579: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10580: LD_INT 0
10582: PPUSH
10583: LD_INT 3
10585: PPUSH
10586: LD_VAR 0 4
10590: PPUSH
10591: CALL_OW 380
// un = CreateHuman ;
10595: LD_ADDR_VAR 0 15
10599: PUSH
10600: CALL_OW 44
10604: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10605: LD_VAR 0 15
10609: PPUSH
10610: LD_VAR 0 16
10614: PPUSH
10615: CALL_OW 52
// end ; i = i + 1 ;
10619: LD_ADDR_VAR 0 13
10623: PUSH
10624: LD_VAR 0 13
10628: PUSH
10629: LD_INT 1
10631: PLUS
10632: ST_TO_ADDR
// end ; if nation = 3 then
10633: LD_VAR 0 5
10637: PUSH
10638: LD_INT 3
10640: EQUAL
10641: IFFALSE 11033
// begin uc_side = side ;
10643: LD_ADDR_OWVAR 20
10647: PUSH
10648: LD_VAR 0 2
10652: ST_TO_ADDR
// uc_nation = nation ;
10653: LD_ADDR_OWVAR 21
10657: PUSH
10658: LD_VAR 0 5
10662: ST_TO_ADDR
// vc_engine = vehengine ;
10663: LD_ADDR_OWVAR 39
10667: PUSH
10668: LD_VAR 0 6
10672: ST_TO_ADDR
// vc_control = vehcontrol ;
10673: LD_ADDR_OWVAR 38
10677: PUSH
10678: LD_VAR 0 7
10682: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10683: LD_ADDR_OWVAR 40
10687: PUSH
10688: LD_VAR 0 8
10692: PUSH
10693: LD_INT 1
10695: PPUSH
10696: LD_VAR 0 8
10700: PPUSH
10701: CALL_OW 12
10705: ARRAY
10706: ST_TO_ADDR
// for j = 1 to RuWeapons do
10707: LD_ADDR_VAR 0 14
10711: PUSH
10712: DOUBLE
10713: LD_INT 1
10715: DEC
10716: ST_TO_ADDR
10717: LD_VAR 0 8
10721: PUSH
10722: FOR_TO
10723: IFFALSE 10925
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10725: LD_VAR 0 8
10729: PUSH
10730: LD_VAR 0 14
10734: ARRAY
10735: PUSH
10736: LD_INT 42
10738: EQUAL
10739: PUSH
10740: LD_VAR 0 8
10744: PUSH
10745: LD_VAR 0 14
10749: ARRAY
10750: PUSH
10751: LD_INT 43
10753: EQUAL
10754: OR
10755: PUSH
10756: LD_VAR 0 8
10760: PUSH
10761: LD_VAR 0 14
10765: ARRAY
10766: PUSH
10767: LD_INT 44
10769: EQUAL
10770: OR
10771: PUSH
10772: LD_VAR 0 8
10776: PUSH
10777: LD_VAR 0 14
10781: ARRAY
10782: PUSH
10783: LD_INT 45
10785: EQUAL
10786: OR
10787: PUSH
10788: LD_VAR 0 8
10792: PUSH
10793: LD_VAR 0 14
10797: ARRAY
10798: PUSH
10799: LD_INT 49
10801: EQUAL
10802: OR
10803: IFFALSE 10852
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10805: LD_ADDR_VAR 0 17
10809: PUSH
10810: LD_INT 21
10812: PUSH
10813: LD_INT 22
10815: PUSH
10816: LD_INT 23
10818: PUSH
10819: LD_INT 24
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10828: LD_ADDR_OWVAR 37
10832: PUSH
10833: LD_VAR 0 17
10837: PUSH
10838: LD_INT 1
10840: PPUSH
10841: LD_VAR 0 17
10845: PPUSH
10846: CALL_OW 12
10850: ARRAY
10851: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10852: LD_VAR 0 8
10856: PUSH
10857: LD_VAR 0 14
10861: ARRAY
10862: PUSH
10863: LD_INT 46
10865: EQUAL
10866: PUSH
10867: LD_VAR 0 8
10871: PUSH
10872: LD_VAR 0 14
10876: ARRAY
10877: PUSH
10878: LD_INT 47
10880: EQUAL
10881: OR
10882: IFFALSE 10923
// begin ruChassisTab = [ 23 , 24 ] ;
10884: LD_ADDR_VAR 0 17
10888: PUSH
10889: LD_INT 23
10891: PUSH
10892: LD_INT 24
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10899: LD_ADDR_OWVAR 37
10903: PUSH
10904: LD_VAR 0 17
10908: PUSH
10909: LD_INT 1
10911: PPUSH
10912: LD_VAR 0 17
10916: PPUSH
10917: CALL_OW 12
10921: ARRAY
10922: ST_TO_ADDR
// end ; end ;
10923: GO 10722
10925: POP
10926: POP
// veh = CreateVehicle ;
10927: LD_ADDR_VAR 0 16
10931: PUSH
10932: CALL_OW 45
10936: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10937: LD_VAR 0 16
10941: PPUSH
10942: LD_VAR 0 1
10946: PPUSH
10947: LD_INT 0
10949: PPUSH
10950: CALL_OW 49
// if vehcontrol = 1 then
10954: LD_VAR 0 7
10958: PUSH
10959: LD_INT 1
10961: EQUAL
10962: IFFALSE 11019
// begin hc_gallery =  ;
10964: LD_ADDR_OWVAR 33
10968: PUSH
10969: LD_STRING 
10971: ST_TO_ADDR
// hc_name =  ;
10972: LD_ADDR_OWVAR 26
10976: PUSH
10977: LD_STRING 
10979: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10980: LD_INT 0
10982: PPUSH
10983: LD_INT 3
10985: PPUSH
10986: LD_VAR 0 4
10990: PPUSH
10991: CALL_OW 380
// un = CreateHuman ;
10995: LD_ADDR_VAR 0 15
10999: PUSH
11000: CALL_OW 44
11004: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11005: LD_VAR 0 15
11009: PPUSH
11010: LD_VAR 0 16
11014: PPUSH
11015: CALL_OW 52
// end ; i = i + 1 ;
11019: LD_ADDR_VAR 0 13
11023: PUSH
11024: LD_VAR 0 13
11028: PUSH
11029: LD_INT 1
11031: PLUS
11032: ST_TO_ADDR
// end ; until i = vehCount ;
11033: LD_VAR 0 13
11037: PUSH
11038: LD_VAR 0 3
11042: EQUAL
11043: IFFALSE 9695
// repeat wait ( 0 0$1 ) ;
11045: LD_INT 35
11047: PPUSH
11048: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
11052: LD_INT 22
11054: PUSH
11055: LD_VAR 0 2
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 21
11066: PUSH
11067: LD_INT 2
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 24
11076: PUSH
11077: LD_INT 250
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 3
11086: PUSH
11087: LD_INT 58
11089: PUSH
11090: EMPTY
11091: LIST
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: PPUSH
11103: CALL_OW 69
11107: PUSH
11108: LD_INT 0
11110: GREATER
11111: IFFALSE 11353
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
11113: LD_ADDR_VAR 0 13
11117: PUSH
11118: LD_INT 22
11120: PUSH
11121: LD_VAR 0 2
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PUSH
11130: LD_INT 21
11132: PUSH
11133: LD_INT 2
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 24
11142: PUSH
11143: LD_INT 250
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 3
11152: PUSH
11153: LD_INT 58
11155: PUSH
11156: EMPTY
11157: LIST
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PPUSH
11169: CALL_OW 69
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11351
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11177: LD_ADDR_VAR 0 21
11181: PUSH
11182: LD_INT 22
11184: PUSH
11185: LD_VAR 0 11
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PPUSH
11194: CALL_OW 69
11198: PPUSH
11199: LD_VAR 0 13
11203: PPUSH
11204: CALL_OW 74
11208: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11209: LD_ADDR_VAR 0 22
11213: PUSH
11214: LD_INT 22
11216: PUSH
11217: LD_VAR 0 11
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 2
11228: PUSH
11229: LD_INT 59
11231: PUSH
11232: EMPTY
11233: LIST
11234: PUSH
11235: LD_INT 21
11237: PUSH
11238: LD_INT 1
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: LD_INT 21
11247: PUSH
11248: LD_INT 2
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: PPUSH
11268: CALL_OW 69
11272: PPUSH
11273: LD_VAR 0 13
11277: PPUSH
11278: CALL_OW 74
11282: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11283: LD_VAR 0 13
11287: PPUSH
11288: LD_VAR 0 21
11292: PPUSH
11293: CALL_OW 296
11297: PUSH
11298: LD_INT 8
11300: PLUS
11301: PUSH
11302: LD_VAR 0 13
11306: PPUSH
11307: LD_VAR 0 22
11311: PPUSH
11312: CALL_OW 296
11316: LESS
11317: IFFALSE 11335
// begin ComAttackUnit ( i , target1 ) ;
11319: LD_VAR 0 13
11323: PPUSH
11324: LD_VAR 0 21
11328: PPUSH
11329: CALL_OW 115
// end else
11333: GO 11349
// begin ComAttackUnit ( i , target2 ) ;
11335: LD_VAR 0 13
11339: PPUSH
11340: LD_VAR 0 22
11344: PPUSH
11345: CALL_OW 115
// end ; end ;
11349: GO 11174
11351: POP
11352: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11353: LD_INT 22
11355: PUSH
11356: LD_VAR 0 2
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 21
11367: PUSH
11368: LD_INT 2
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 24
11377: PUSH
11378: LD_INT 250
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 3
11387: PUSH
11388: LD_INT 58
11390: PUSH
11391: EMPTY
11392: LIST
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: PPUSH
11404: CALL_OW 69
11408: PUSH
11409: LD_INT 0
11411: EQUAL
11412: IFFALSE 11045
// end ; end_of_file
11414: LD_VAR 0 12
11418: RET
// every 1 do var i , gammaSquad , startX , startY ;
11419: GO 11421
11421: DISABLE
11422: LD_INT 0
11424: PPUSH
11425: PPUSH
11426: PPUSH
11427: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11428: LD_ADDR_VAR 0 2
11432: PUSH
11433: LD_EXP 8
11437: PUSH
11438: LD_EXP 9
11442: PUSH
11443: LD_EXP 10
11447: PUSH
11448: LD_EXP 11
11452: PUSH
11453: LD_EXP 12
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11465: LD_ADDR_VAR 0 3
11469: PUSH
11470: LD_INT 46
11472: PUSH
11473: LD_INT 45
11475: PUSH
11476: LD_INT 44
11478: PUSH
11479: LD_INT 43
11481: PUSH
11482: LD_INT 42
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11492: LD_ADDR_VAR 0 4
11496: PUSH
11497: LD_INT 14
11499: PUSH
11500: LD_INT 12
11502: PUSH
11503: LD_INT 10
11505: PUSH
11506: LD_INT 8
11508: PUSH
11509: LD_INT 6
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
11519: LD_EXP 11
11523: PPUSH
11524: LD_INT 31
11526: PPUSH
11527: LD_INT 59
11529: PPUSH
11530: LD_INT 19
11532: PPUSH
11533: LD_INT 5
11535: PPUSH
11536: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
11540: LD_INT 32
11542: PPUSH
11543: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11547: LD_INT 32
11549: PPUSH
11550: LD_INT 51
11552: PPUSH
11553: LD_INT 26
11555: PPUSH
11556: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11560: LD_INT 32
11562: PPUSH
11563: LD_INT 53
11565: PPUSH
11566: LD_INT 23
11568: PPUSH
11569: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11573: LD_INT 32
11575: PPUSH
11576: LD_INT 52
11578: PPUSH
11579: LD_INT 19
11581: PPUSH
11582: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11586: LD_INT 35
11588: PPUSH
11589: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11593: LD_INT 32
11595: PPUSH
11596: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11600: LD_INT 32
11602: PPUSH
11603: CALL_OW 250
11607: PUSH
11608: LD_INT 52
11610: EQUAL
11611: PUSH
11612: LD_INT 32
11614: PPUSH
11615: CALL_OW 251
11619: PUSH
11620: LD_INT 19
11622: EQUAL
11623: AND
11624: IFFALSE 11586
// ComExitVehicle ( JMM ) ;
11626: LD_EXP 1
11630: PPUSH
11631: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11635: LD_EXP 7
11639: PPUSH
11640: LD_EXP 1
11644: PPUSH
11645: CALL_OW 119
// wait ( 0 0$01 ) ;
11649: LD_INT 35
11651: PPUSH
11652: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11656: LD_EXP 1
11660: PPUSH
11661: LD_INT 46
11663: PPUSH
11664: LD_INT 10
11666: PPUSH
11667: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11671: LD_EXP 1
11675: PPUSH
11676: LD_EXP 7
11680: PPUSH
11681: CALL_OW 179
// wait ( 0 0$4 ) ;
11685: LD_INT 140
11687: PPUSH
11688: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11692: LD_EXP 1
11696: PPUSH
11697: LD_STRING D1-JMM-1
11699: PPUSH
11700: CALL_OW 88
// if not dialogue_skipped then
11704: LD_OWVAR 59
11708: NOT
11709: IFFALSE 12366
// begin for i := 1 to gammaSquad do
11711: LD_ADDR_VAR 0 1
11715: PUSH
11716: DOUBLE
11717: LD_INT 1
11719: DEC
11720: ST_TO_ADDR
11721: LD_VAR 0 2
11725: PUSH
11726: FOR_TO
11727: IFFALSE 11788
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11729: LD_VAR 0 2
11733: PUSH
11734: LD_VAR 0 1
11738: ARRAY
11739: PPUSH
11740: LD_VAR 0 3
11744: PUSH
11745: LD_VAR 0 1
11749: ARRAY
11750: PPUSH
11751: LD_VAR 0 4
11755: PUSH
11756: LD_VAR 0 1
11760: ARRAY
11761: PPUSH
11762: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11766: LD_VAR 0 2
11770: PUSH
11771: LD_VAR 0 1
11775: ARRAY
11776: PPUSH
11777: LD_EXP 1
11781: PPUSH
11782: CALL_OW 179
// end ;
11786: GO 11726
11788: POP
11789: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11790: LD_EXP 4
11794: PPUSH
11795: LD_INT 41
11797: PPUSH
11798: LD_INT 4
11800: PPUSH
11801: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11805: LD_EXP 4
11809: PPUSH
11810: LD_EXP 1
11814: PPUSH
11815: CALL_OW 179
// if Lisa = false and Bobby then
11819: LD_EXP 4
11823: PUSH
11824: LD_INT 0
11826: EQUAL
11827: PUSH
11828: LD_EXP 2
11832: AND
11833: IFFALSE 11864
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11835: LD_EXP 2
11839: PPUSH
11840: LD_INT 41
11842: PPUSH
11843: LD_INT 4
11845: PPUSH
11846: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11850: LD_EXP 2
11854: PPUSH
11855: LD_EXP 1
11859: PPUSH
11860: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11864: LD_EXP 4
11868: PUSH
11869: LD_INT 0
11871: EQUAL
11872: PUSH
11873: LD_EXP 2
11877: PUSH
11878: LD_INT 0
11880: EQUAL
11881: AND
11882: PUSH
11883: LD_EXP 3
11887: AND
11888: IFFALSE 11919
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11890: LD_EXP 3
11894: PPUSH
11895: LD_INT 41
11897: PPUSH
11898: LD_INT 4
11900: PPUSH
11901: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11905: LD_EXP 3
11909: PPUSH
11910: LD_EXP 1
11914: PPUSH
11915: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11919: LD_EXP 4
11923: PUSH
11924: LD_INT 0
11926: EQUAL
11927: PUSH
11928: LD_EXP 2
11932: PUSH
11933: LD_INT 0
11935: EQUAL
11936: AND
11937: PUSH
11938: LD_EXP 3
11942: PUSH
11943: LD_INT 0
11945: EQUAL
11946: AND
11947: IFFALSE 11978
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11949: LD_EXP 6
11953: PPUSH
11954: LD_INT 41
11956: PPUSH
11957: LD_INT 4
11959: PPUSH
11960: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11964: LD_EXP 6
11968: PPUSH
11969: LD_EXP 1
11973: PPUSH
11974: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11978: LD_EXP 7
11982: PPUSH
11983: LD_STRING D1-Brown-1
11985: PPUSH
11986: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11990: LD_EXP 1
11994: PPUSH
11995: LD_STRING D1-JMM-2
11997: PPUSH
11998: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
12002: LD_EXP 7
12006: PPUSH
12007: LD_STRING D1-Brown-2
12009: PPUSH
12010: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
12014: LD_EXP 1
12018: PPUSH
12019: LD_EXP 9
12023: PPUSH
12024: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
12028: LD_EXP 9
12032: PPUSH
12033: LD_STRING D1-FSol1-2
12035: PPUSH
12036: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
12040: LD_EXP 1
12044: PPUSH
12045: LD_EXP 8
12049: PPUSH
12050: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
12054: LD_EXP 8
12058: PPUSH
12059: LD_STRING D1-Sol2-2
12061: PPUSH
12062: CALL_OW 88
// if Lisa then
12066: LD_EXP 4
12070: IFFALSE 12110
// begin ComTurnUnit ( JMM , Lisa ) ;
12072: LD_EXP 1
12076: PPUSH
12077: LD_EXP 4
12081: PPUSH
12082: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
12086: LD_EXP 4
12090: PPUSH
12091: LD_STRING D1-Lisa-2
12093: PPUSH
12094: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12098: LD_EXP 1
12102: PPUSH
12103: LD_STRING D1-JMM-3
12105: PPUSH
12106: CALL_OW 88
// end ; if Bobby then
12110: LD_EXP 2
12114: IFFALSE 12154
// begin ComTurnUnit ( JMM , Bobby ) ;
12116: LD_EXP 1
12120: PPUSH
12121: LD_EXP 2
12125: PPUSH
12126: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
12130: LD_EXP 2
12134: PPUSH
12135: LD_STRING D1-Bobby-2
12137: PPUSH
12138: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12142: LD_EXP 1
12146: PPUSH
12147: LD_STRING D1-JMM-3
12149: PPUSH
12150: CALL_OW 88
// end ; if Cyrus then
12154: LD_EXP 3
12158: IFFALSE 12198
// begin ComTurnUnit ( JMM , Cyrus ) ;
12160: LD_EXP 1
12164: PPUSH
12165: LD_EXP 3
12169: PPUSH
12170: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
12174: LD_EXP 3
12178: PPUSH
12179: LD_STRING D1-Cyrus-2
12181: PPUSH
12182: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12186: LD_EXP 1
12190: PPUSH
12191: LD_STRING D1-JMM-3
12193: PPUSH
12194: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
12198: LD_EXP 1
12202: PPUSH
12203: LD_EXP 7
12207: PPUSH
12208: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
12212: LD_EXP 1
12216: PPUSH
12217: LD_STRING D1-JMM-3a
12219: PPUSH
12220: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
12224: LD_EXP 7
12228: PPUSH
12229: LD_INT 38
12231: PPUSH
12232: LD_INT 5
12234: PPUSH
12235: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
12239: LD_EXP 7
12243: PPUSH
12244: LD_EXP 1
12248: PPUSH
12249: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
12253: LD_EXP 1
12257: PPUSH
12258: LD_INT 40
12260: PPUSH
12261: LD_INT 7
12263: PPUSH
12264: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12268: LD_EXP 1
12272: PPUSH
12273: LD_EXP 7
12277: PPUSH
12278: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12282: LD_EXP 7
12286: PPUSH
12287: LD_STRING D1-Brown-3
12289: PPUSH
12290: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12294: LD_EXP 14
12298: PPUSH
12299: LD_STRING D1-Har-3
12301: PPUSH
12302: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12306: LD_EXP 1
12310: PPUSH
12311: LD_STRING D1-JMM-4
12313: PPUSH
12314: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12318: LD_EXP 14
12322: PPUSH
12323: LD_STRING D1-Har-4
12325: PPUSH
12326: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12330: LD_EXP 1
12334: PPUSH
12335: LD_STRING D1-JMM-5
12337: PPUSH
12338: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12342: LD_EXP 14
12346: PPUSH
12347: LD_STRING D1-Har-5
12349: PPUSH
12350: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12354: LD_EXP 1
12358: PPUSH
12359: LD_STRING D1-JMM-6
12361: PPUSH
12362: CALL_OW 88
// end ; InGameOff ;
12366: CALL_OW 9
// PrepareRussianConvoy ;
12370: CALL 3386 0 0
// ChangeMissionObjectives ( M1 ) ;
12374: LD_STRING M1
12376: PPUSH
12377: CALL_OW 337
// SaveForQuickRestart ;
12381: CALL_OW 22
// timerStatus = 1 ;
12385: LD_ADDR_EXP 29
12389: PUSH
12390: LD_INT 1
12392: ST_TO_ADDR
// startTimer = 1 ;
12393: LD_ADDR_EXP 30
12397: PUSH
12398: LD_INT 1
12400: ST_TO_ADDR
// bonusAvalaible = 1 ;
12401: LD_ADDR_EXP 44
12405: PUSH
12406: LD_INT 1
12408: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12409: LD_INT 105
12411: PPUSH
12412: CALL_OW 67
// DialogueOn ;
12416: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12420: LD_EXP 12
12424: PPUSH
12425: LD_STRING D9-Mech1-1
12427: PPUSH
12428: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12432: LD_EXP 1
12436: PPUSH
12437: LD_STRING D9-JMM-1
12439: PPUSH
12440: CALL_OW 88
// DialogueOff ;
12444: CALL_OW 7
// end ;
12448: PPOPN 4
12450: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) > 0 do
12451: LD_INT 47
12453: PPUSH
12454: LD_INT 1
12456: PPUSH
12457: CALL_OW 321
12461: PUSH
12462: LD_INT 2
12464: EQUAL
12465: PUSH
12466: LD_EXP 31
12470: NOT
12471: AND
12472: PUSH
12473: LD_INT 22
12475: PUSH
12476: LD_INT 1
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PUSH
12483: LD_INT 21
12485: PUSH
12486: LD_INT 3
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 30
12495: PUSH
12496: LD_INT 3
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PUSH
12503: LD_INT 57
12505: PUSH
12506: EMPTY
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: PPUSH
12515: CALL_OW 69
12519: PUSH
12520: LD_INT 0
12522: GREATER
12523: AND
12524: IFFALSE 12762
12526: GO 12528
12528: DISABLE
// begin factoryDialog := true ;
12529: LD_ADDR_EXP 31
12533: PUSH
12534: LD_INT 1
12536: ST_TO_ADDR
// if IsOk ( Campell ) then
12537: LD_EXP 12
12541: PPUSH
12542: CALL_OW 302
12546: IFFALSE 12562
// begin Say ( Campell , D10-Mech1-1 ) ;
12548: LD_EXP 12
12552: PPUSH
12553: LD_STRING D10-Mech1-1
12555: PPUSH
12556: CALL_OW 88
// end else
12560: GO 12762
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12562: LD_INT 22
12564: PUSH
12565: LD_INT 1
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 21
12574: PUSH
12575: LD_INT 1
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: LD_INT 25
12584: PUSH
12585: LD_INT 3
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 26
12594: PUSH
12595: LD_INT 1
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: PPUSH
12608: CALL_OW 69
12612: PUSH
12613: LD_EXP 1
12617: PUSH
12618: EMPTY
12619: LIST
12620: PUSH
12621: LD_INT 0
12623: GREATER
12624: DIFF
12625: IFFALSE 12699
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12627: LD_INT 22
12629: PUSH
12630: LD_INT 1
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PUSH
12637: LD_INT 21
12639: PUSH
12640: LD_INT 1
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: LD_INT 25
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 26
12659: PUSH
12660: LD_INT 1
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: PPUSH
12673: CALL_OW 69
12677: PUSH
12678: LD_EXP 1
12682: PUSH
12683: EMPTY
12684: LIST
12685: DIFF
12686: PPUSH
12687: LD_STRING D10-Mech1-1
12689: PPUSH
12690: LD_STRING D10-Mech1-1
12692: PPUSH
12693: CALL 4581 0 3
// end else
12697: GO 12762
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12699: LD_INT 22
12701: PUSH
12702: LD_INT 1
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 21
12711: PUSH
12712: LD_INT 1
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 26
12721: PUSH
12722: LD_INT 1
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: PUSH
12734: LD_INT 1
12736: ARRAY
12737: PPUSH
12738: CALL_OW 69
12742: PUSH
12743: LD_EXP 1
12747: PUSH
12748: EMPTY
12749: LIST
12750: DIFF
12751: PPUSH
12752: LD_STRING D10-Mech1-1
12754: PPUSH
12755: LD_STRING D10-Mech1-1
12757: PPUSH
12758: CALL 4581 0 3
// end ; end ; end ;
12762: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12763: LD_INT 22
12765: PUSH
12766: LD_INT 1
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: LD_INT 30
12775: PUSH
12776: LD_INT 32
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 69
12791: PUSH
12792: LD_INT 0
12794: GREATER
12795: PUSH
12796: LD_EXP 32
12800: PUSH
12801: LD_INT 0
12803: EQUAL
12804: AND
12805: IFFALSE 13045
12807: GO 12809
12809: DISABLE
// begin if IsOK ( Claptopn ) then
12810: LD_EXP 11
12814: PPUSH
12815: CALL_OW 302
12819: IFFALSE 12835
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12821: LD_EXP 11
12825: PPUSH
12826: LD_STRING D9b-Eng1-1
12828: PPUSH
12829: CALL_OW 88
// end else
12833: GO 13031
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12835: LD_INT 22
12837: PUSH
12838: LD_INT 1
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 21
12847: PUSH
12848: LD_INT 1
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: LD_INT 25
12857: PUSH
12858: LD_INT 3
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: LD_INT 26
12867: PUSH
12868: LD_INT 1
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: PPUSH
12881: CALL_OW 69
12885: PUSH
12886: LD_EXP 1
12890: PUSH
12891: EMPTY
12892: LIST
12893: PUSH
12894: LD_INT 0
12896: GREATER
12897: DIFF
12898: IFFALSE 12972
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12900: LD_INT 22
12902: PUSH
12903: LD_INT 1
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 21
12912: PUSH
12913: LD_INT 1
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 25
12922: PUSH
12923: LD_INT 2
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 26
12932: PUSH
12933: LD_INT 1
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: PPUSH
12946: CALL_OW 69
12950: PUSH
12951: LD_EXP 1
12955: PUSH
12956: EMPTY
12957: LIST
12958: DIFF
12959: PPUSH
12960: LD_STRING D9b-Eng1-1
12962: PPUSH
12963: LD_STRING D9b-Eng1-11
12965: PPUSH
12966: CALL 4581 0 3
// end else
12970: GO 13031
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12972: LD_INT 22
12974: PUSH
12975: LD_INT 1
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 21
12984: PUSH
12985: LD_INT 1
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 26
12994: PUSH
12995: LD_INT 1
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: LIST
13006: PPUSH
13007: CALL_OW 69
13011: PUSH
13012: LD_EXP 1
13016: PUSH
13017: EMPTY
13018: LIST
13019: DIFF
13020: PPUSH
13021: LD_STRING D9b-Eng1-1
13023: PPUSH
13024: LD_STRING D9b-Eng1-1
13026: PPUSH
13027: CALL 4581 0 3
// end ; end ; if energyVDialog = 0 then
13031: LD_EXP 33
13035: PUSH
13036: LD_INT 0
13038: EQUAL
13039: IFFALSE 13045
// EnergyDialog ;
13041: CALL 4984 0 0
// end ;
13045: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
13046: LD_EXP 34
13050: PUSH
13051: LD_INT 1
13053: EQUAL
13054: PUSH
13055: LD_EXP 35
13059: PUSH
13060: LD_INT 1
13062: EQUAL
13063: AND
13064: IFFALSE 13076
13066: GO 13068
13068: DISABLE
// ChangeMissionObjectives ( M1a ) ;
13069: LD_STRING M1a
13071: PPUSH
13072: CALL_OW 337
13076: END
// every 3 3$0 do
13077: GO 13079
13079: DISABLE
// begin PrepareFirstAttack ;
13080: CALL 4186 0 0
// end ;
13084: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
13085: LD_INT 22
13087: PUSH
13088: LD_INT 5
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: LD_INT 21
13097: PUSH
13098: LD_INT 1
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 3
13107: PUSH
13108: LD_INT 24
13110: PUSH
13111: LD_INT 250
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: LIST
13126: PPUSH
13127: CALL_OW 69
13131: PUSH
13132: LD_INT 0
13134: GREATER
13135: PUSH
13136: LD_EXP 23
13140: PUSH
13141: LD_INT 1
13143: EQUAL
13144: AND
13145: IFFALSE 13446
13147: GO 13149
13149: DISABLE
13150: LD_INT 0
13152: PPUSH
// begin firstRussianAttack = 2 ;
13153: LD_ADDR_EXP 23
13157: PUSH
13158: LD_INT 2
13160: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
13161: LD_INT 22
13163: PUSH
13164: LD_INT 5
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: LD_INT 21
13173: PUSH
13174: LD_INT 1
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: PPUSH
13185: CALL_OW 69
13189: PPUSH
13190: LD_INT 125
13192: PPUSH
13193: LD_INT 98
13195: PPUSH
13196: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
13200: LD_INT 22
13202: PUSH
13203: LD_INT 1
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 21
13212: PUSH
13213: LD_INT 1
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PPUSH
13224: CALL_OW 69
13228: PUSH
13229: LD_EXP 1
13233: PUSH
13234: LD_EXP 7
13238: PUSH
13239: LD_EXP 4
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: DIFF
13249: PPUSH
13250: LD_STRING DAtt1-Sol1-1
13252: PPUSH
13253: LD_STRING DAtt1-FSol1-1
13255: PPUSH
13256: CALL 4581 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
13260: LD_EXP 1
13264: PPUSH
13265: LD_STRING DAtt1-JMM-1
13267: PPUSH
13268: CALL_OW 88
// if Lisa then
13272: LD_EXP 4
13276: IFFALSE 13292
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
13278: LD_EXP 4
13282: PPUSH
13283: LD_STRING DAtt1a-Lisa-1
13285: PPUSH
13286: CALL_OW 88
// end else
13290: GO 13363
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13292: LD_INT 22
13294: PUSH
13295: LD_INT 1
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 21
13304: PUSH
13305: LD_INT 1
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: LD_INT 26
13314: PUSH
13315: LD_INT 1
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: LIST
13326: PPUSH
13327: CALL_OW 69
13331: PUSH
13332: LD_EXP 1
13336: PUSH
13337: LD_EXP 7
13341: PUSH
13342: LD_EXP 4
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: DIFF
13352: PPUSH
13353: LD_STRING DAtt1a-Sol1-1
13355: PPUSH
13356: LD_STRING DAtt1-FSol1-1
13358: PPUSH
13359: CALL 4581 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13363: LD_EXP 1
13367: PPUSH
13368: LD_STRING DAtt1a-JMM-1
13370: PPUSH
13371: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13375: LD_INT 22
13377: PUSH
13378: LD_INT 1
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 21
13387: PUSH
13388: LD_INT 1
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 26
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 69
13414: PUSH
13415: LD_EXP 1
13419: PUSH
13420: LD_EXP 7
13424: PUSH
13425: LD_EXP 4
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: DIFF
13435: PPUSH
13436: LD_STRING DAtt1b-Sol1-1
13438: PPUSH
13439: LD_STRING DAtt1a-Sol1-1
13441: PPUSH
13442: CALL 4581 0 3
// end ;
13446: PPOPN 1
13448: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13449: LD_EXP 23
13453: PUSH
13454: LD_INT 2
13456: EQUAL
13457: IFFALSE 13519
13459: GO 13461
13461: DISABLE
13462: LD_INT 0
13464: PPUSH
// begin enable ;
13465: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13466: LD_ADDR_VAR 0 1
13470: PUSH
13471: LD_INT 5
13473: PPUSH
13474: LD_INT 22
13476: PUSH
13477: LD_INT 5
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 21
13486: PUSH
13487: LD_INT 1
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PPUSH
13498: CALL_OW 70
13502: PUSH
13503: FOR_IN
13504: IFFALSE 13517
// RemoveUnit ( i ) ;
13506: LD_VAR 0 1
13510: PPUSH
13511: CALL_OW 64
13515: GO 13503
13517: POP
13518: POP
// end ;
13519: PPOPN 1
13521: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13522: LD_INT 22
13524: PUSH
13525: LD_INT 5
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: EMPTY
13533: LIST
13534: PPUSH
13535: CALL_OW 69
13539: PUSH
13540: LD_INT 0
13542: EQUAL
13543: PUSH
13544: LD_EXP 23
13548: PUSH
13549: LD_INT 2
13551: EQUAL
13552: AND
13553: IFFALSE 13566
13555: GO 13557
13557: DISABLE
// firstRussianAttack = 3 ;
13558: LD_ADDR_EXP 23
13562: PUSH
13563: LD_INT 3
13565: ST_TO_ADDR
13566: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13567: LD_EXP 28
13571: PUSH
13572: LD_INT 0
13574: EQUAL
13575: IFFALSE 13656
13577: GO 13579
13579: DISABLE
// begin timerStatus = 4 ;
13580: LD_ADDR_EXP 29
13584: PUSH
13585: LD_INT 4
13587: ST_TO_ADDR
// DialogueOn ;
13588: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13592: LD_EXP 13
13596: PPUSH
13597: LD_STRING D2-Don-1
13599: PPUSH
13600: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13604: LD_EXP 1
13608: PPUSH
13609: LD_STRING D2-JMM-1
13611: PPUSH
13612: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13616: LD_EXP 13
13620: PPUSH
13621: LD_STRING D2-Don-2
13623: PPUSH
13624: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13628: LD_EXP 1
13632: PPUSH
13633: LD_STRING D2-JMM-2
13635: PPUSH
13636: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13640: LD_EXP 13
13644: PPUSH
13645: LD_STRING D2-Don-3
13647: PPUSH
13648: CALL_OW 94
// DialogueOff ;
13652: CALL_OW 7
// end ;
13656: END
// every 12 12$0 do var tmp ;
13657: GO 13659
13659: DISABLE
13660: LD_INT 0
13662: PPUSH
// begin PrepareDonaldsonArmy ;
13663: CALL 1177 0 0
// CenterNowOnUnits ( Donaldson ) ;
13667: LD_EXP 13
13671: PPUSH
13672: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
13676: LD_INT 22
13678: PUSH
13679: LD_INT 6
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PPUSH
13686: CALL_OW 69
13690: NOT
13691: IFFALSE 13707
// begin wait ( 3 ) ;
13693: LD_INT 3
13695: PPUSH
13696: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
13700: LD_STRING ACH_BASE
13702: PPUSH
13703: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13707: LD_ADDR_VAR 0 1
13711: PUSH
13712: LD_INT 22
13714: PUSH
13715: LD_INT 4
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 21
13724: PUSH
13725: LD_INT 1
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: LD_INT 26
13734: PUSH
13735: LD_INT 1
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PUSH
13742: LD_INT 25
13744: PUSH
13745: LD_INT 1
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 69
13762: PUSH
13763: LD_EXP 5
13767: PUSH
13768: EMPTY
13769: LIST
13770: DIFF
13771: ST_TO_ADDR
// DialogueOn ;
13772: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13776: LD_VAR 0 1
13780: PPUSH
13781: LD_STRING D3-Sol1-1
13783: PPUSH
13784: LD_STRING D3-Sol1-1
13786: PPUSH
13787: CALL 4581 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13791: LD_INT 22
13793: PUSH
13794: LD_INT 4
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 21
13803: PUSH
13804: LD_INT 1
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 26
13813: PUSH
13814: LD_INT 1
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: LD_INT 25
13823: PUSH
13824: LD_INT 3
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: PPUSH
13837: CALL_OW 69
13841: PPUSH
13842: LD_STRING D3-Sol2-1
13844: PPUSH
13845: LD_STRING D3-Sol2-1
13847: PPUSH
13848: CALL 4581 0 3
// if Frank then
13852: LD_EXP 5
13856: IFFALSE 13870
// Say ( Frank , D3-Frank-1 ) ;
13858: LD_EXP 5
13862: PPUSH
13863: LD_STRING D3-Frank-1
13865: PPUSH
13866: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13870: LD_EXP 13
13874: PPUSH
13875: LD_STRING D3-Don-1
13877: PPUSH
13878: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13882: LD_EXP 13
13886: PPUSH
13887: LD_STRING D3-Don-1a
13889: PPUSH
13890: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13894: LD_EXP 1
13898: PPUSH
13899: LD_STRING D3-JMM-1
13901: PPUSH
13902: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13906: LD_EXP 13
13910: PPUSH
13911: LD_STRING D3-Don-2
13913: PPUSH
13914: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13918: LD_INT 22
13920: PUSH
13921: LD_INT 6
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: PUSH
13928: LD_INT 21
13930: PUSH
13931: LD_INT 1
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: PPUSH
13942: CALL_OW 69
13946: PUSH
13947: LD_INT 0
13949: GREATER
13950: IFFALSE 14088
// begin Say ( JMM , D3-JMM-2 ) ;
13952: LD_EXP 1
13956: PPUSH
13957: LD_STRING D3-JMM-2
13959: PPUSH
13960: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13964: LD_EXP 13
13968: PPUSH
13969: LD_STRING D3-Don-3
13971: PPUSH
13972: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13976: LD_EXP 1
13980: PPUSH
13981: LD_STRING D3-JMM-3
13983: PPUSH
13984: CALL_OW 88
// if IsOK ( Frank ) then
13988: LD_EXP 5
13992: PPUSH
13993: CALL_OW 302
13997: IFFALSE 14011
// Say ( Frank , D3-Frank-3 ) ;
13999: LD_EXP 5
14003: PPUSH
14004: LD_STRING D3-Frank-3
14006: PPUSH
14007: CALL_OW 88
// DialogueOff ;
14011: CALL_OW 7
// if IsOK ( Frank ) then
14015: LD_EXP 5
14019: PPUSH
14020: CALL_OW 302
14024: IFFALSE 14086
// begin SetSide ( Frank , 0 ) ;
14026: LD_EXP 5
14030: PPUSH
14031: LD_INT 0
14033: PPUSH
14034: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14038: LD_EXP 5
14042: PPUSH
14043: LD_INT 12
14045: PPUSH
14046: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14050: LD_EXP 5
14054: PPUSH
14055: LD_STRING 04t_Frank
14057: PPUSH
14058: CALL_OW 38
// Wait ( 0 0$3 ) ;
14062: LD_INT 105
14064: PPUSH
14065: CALL_OW 67
// frankScoutBase = 1 ;
14069: LD_ADDR_EXP 25
14073: PUSH
14074: LD_INT 1
14076: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14077: LD_EXP 5
14081: PPUSH
14082: CALL_OW 64
// end ; end else
14086: GO 14175
// begin Say ( JMM , D3-JMM-4 ) ;
14088: LD_EXP 1
14092: PPUSH
14093: LD_STRING D3-JMM-4
14095: PPUSH
14096: CALL_OW 88
// DialogueOff ;
14100: CALL_OW 7
// if IsOK ( Frank ) then
14104: LD_EXP 5
14108: PPUSH
14109: CALL_OW 302
14113: IFFALSE 14175
// begin SetSide ( Frank , 0 ) ;
14115: LD_EXP 5
14119: PPUSH
14120: LD_INT 0
14122: PPUSH
14123: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14127: LD_EXP 5
14131: PPUSH
14132: LD_INT 12
14134: PPUSH
14135: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14139: LD_EXP 5
14143: PPUSH
14144: LD_STRING 04t_Frank
14146: PPUSH
14147: CALL_OW 38
// Wait ( 0 0$3 ) ;
14151: LD_INT 105
14153: PPUSH
14154: CALL_OW 67
// frankScoutBase = 1 ;
14158: LD_ADDR_EXP 25
14162: PUSH
14163: LD_INT 1
14165: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14166: LD_EXP 5
14170: PPUSH
14171: CALL_OW 64
// end ; end ; end ;
14175: PPOPN 1
14177: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
14178: LD_EXP 13
14182: PPUSH
14183: CALL_OW 255
14187: PUSH
14188: LD_INT 4
14190: EQUAL
14191: PUSH
14192: LD_EXP 13
14196: PPUSH
14197: CALL_OW 302
14201: AND
14202: IFFALSE 14371
14204: GO 14206
14206: DISABLE
14207: LD_INT 0
14209: PPUSH
14210: PPUSH
// begin wait ( 5 5$00 ) ;
14211: LD_INT 10500
14213: PPUSH
14214: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
14218: LD_EXP 13
14222: PPUSH
14223: CALL_OW 255
14227: PUSH
14228: LD_INT 1
14230: EQUAL
14231: PUSH
14232: LD_EXP 13
14236: PPUSH
14237: CALL_OW 301
14241: OR
14242: IFFALSE 14246
// exit ;
14244: GO 14371
// SayRadio ( Donaldson , D3b-Don-1 ) ;
14246: LD_EXP 13
14250: PPUSH
14251: LD_STRING D3b-Don-1
14253: PPUSH
14254: CALL_OW 94
// donaldsonCoopAttack = 1 ;
14258: LD_ADDR_EXP 41
14262: PUSH
14263: LD_INT 1
14265: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
14266: LD_ADDR_VAR 0 2
14270: PUSH
14271: LD_INT 22
14273: PUSH
14274: LD_INT 4
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: PPUSH
14281: CALL_OW 69
14285: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14286: LD_INT 35
14288: PPUSH
14289: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
14293: LD_VAR 0 2
14297: NOT
14298: PUSH
14299: LD_INT 22
14301: PUSH
14302: LD_INT 6
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 101
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 69
14327: OR
14328: IFFALSE 14286
// if not tmp then
14330: LD_VAR 0 2
14334: NOT
14335: IFFALSE 14339
// exit ;
14337: GO 14371
// for i in tmp do
14339: LD_ADDR_VAR 0 1
14343: PUSH
14344: LD_VAR 0 2
14348: PUSH
14349: FOR_IN
14350: IFFALSE 14369
// ComAgressiveMove ( i , 52 , 64 ) ;
14352: LD_VAR 0 1
14356: PPUSH
14357: LD_INT 52
14359: PPUSH
14360: LD_INT 64
14362: PPUSH
14363: CALL_OW 114
14367: GO 14349
14369: POP
14370: POP
// end ;
14371: PPOPN 2
14373: END
// every 0 0$1 trigger not saveDonaldson and FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) do var i ;
14374: LD_EXP 24
14378: NOT
14379: PUSH
14380: LD_INT 26
14382: PPUSH
14383: LD_INT 22
14385: PUSH
14386: LD_INT 1
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PPUSH
14393: CALL_OW 70
14397: AND
14398: IFFALSE 14453
14400: GO 14402
14402: DISABLE
14403: LD_INT 0
14405: PPUSH
// begin saveDonaldson := 1 ;
14406: LD_ADDR_EXP 24
14410: PUSH
14411: LD_INT 1
14413: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
14414: LD_ADDR_VAR 0 1
14418: PUSH
14419: LD_INT 22
14421: PUSH
14422: LD_INT 4
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PPUSH
14429: CALL_OW 69
14433: PUSH
14434: FOR_IN
14435: IFFALSE 14451
// SetSide ( i , 1 ) ;
14437: LD_VAR 0 1
14441: PPUSH
14442: LD_INT 1
14444: PPUSH
14445: CALL_OW 235
14449: GO 14434
14451: POP
14452: POP
// end ;
14453: PPOPN 1
14455: END
// every 0 0$1 trigger frankScoutBase do
14456: LD_EXP 25
14460: IFFALSE 14825
14462: GO 14464
14464: DISABLE
// begin wait ( 2 2$30 ) ;
14465: LD_INT 5250
14467: PPUSH
14468: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14472: LD_INT 35
14474: PPUSH
14475: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
14479: LD_INT 81
14481: PUSH
14482: LD_INT 4
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: PUSH
14489: LD_INT 92
14491: PUSH
14492: LD_INT 84
14494: PUSH
14495: LD_INT 28
14497: PUSH
14498: LD_INT 22
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PPUSH
14511: CALL_OW 69
14515: NOT
14516: IFFALSE 14472
// uc_side = 4 ;
14518: LD_ADDR_OWVAR 20
14522: PUSH
14523: LD_INT 4
14525: ST_TO_ADDR
// uc_nation = 1 ;
14526: LD_ADDR_OWVAR 21
14530: PUSH
14531: LD_INT 1
14533: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
14534: LD_ADDR_EXP 5
14538: PUSH
14539: LD_STRING 04t_Frank
14541: PPUSH
14542: CALL_OW 34
14546: ST_TO_ADDR
// if not Frank then
14547: LD_EXP 5
14551: NOT
14552: IFFALSE 14556
// exit ;
14554: GO 14825
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14556: LD_EXP 5
14560: PPUSH
14561: LD_INT 13
14563: PPUSH
14564: LD_INT 0
14566: PPUSH
14567: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14571: LD_INT 35
14573: PPUSH
14574: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
14578: LD_EXP 1
14582: PPUSH
14583: CALL_OW 310
14587: NOT
14588: PUSH
14589: LD_EXP 1
14593: PPUSH
14594: LD_INT 4
14596: PPUSH
14597: CALL_OW 296
14601: PUSH
14602: LD_INT 20
14604: LESS
14605: AND
14606: IFFALSE 14639
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14608: LD_EXP 5
14612: PPUSH
14613: LD_EXP 1
14617: PPUSH
14618: CALL_OW 250
14622: PPUSH
14623: LD_EXP 1
14627: PPUSH
14628: CALL_OW 251
14632: PPUSH
14633: CALL_OW 111
14637: GO 14654
// ComMoveXY ( Frank , 51 , 15 ) ;
14639: LD_EXP 5
14643: PPUSH
14644: LD_INT 51
14646: PPUSH
14647: LD_INT 15
14649: PPUSH
14650: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14654: LD_EXP 5
14658: PPUSH
14659: LD_EXP 1
14663: PPUSH
14664: CALL_OW 296
14668: PUSH
14669: LD_INT 10
14671: LESS
14672: IFFALSE 14571
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14674: LD_EXP 1
14678: PUSH
14679: LD_EXP 5
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PPUSH
14688: CALL_OW 87
// DialogueOn ;
14692: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14696: LD_EXP 5
14700: PPUSH
14701: LD_STRING D3a-Frank-1
14703: PPUSH
14704: CALL_OW 88
// if Lisa then
14708: LD_EXP 4
14712: IFFALSE 14762
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14714: LD_EXP 4
14718: PPUSH
14719: LD_STRING D3a-Lisa-1
14721: PPUSH
14722: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14726: LD_EXP 5
14730: PPUSH
14731: LD_STRING D3a-Frank-2
14733: PPUSH
14734: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14738: LD_EXP 4
14742: PPUSH
14743: LD_STRING D3a-Lisa-2
14745: PPUSH
14746: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14750: LD_EXP 5
14754: PPUSH
14755: LD_STRING D3a-Frank-3
14757: PPUSH
14758: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14762: LD_EXP 1
14766: PPUSH
14767: LD_STRING D3a-JMM-3
14769: PPUSH
14770: CALL_OW 88
// DialogueOff ;
14774: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14778: LD_EXP 5
14782: PPUSH
14783: LD_INT 1
14785: PPUSH
14786: CALL_OW 235
// InGameOn ;
14790: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14794: LD_INT 1
14796: PPUSH
14797: LD_INT 7
14799: PPUSH
14800: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14804: LD_INT 93
14806: PPUSH
14807: LD_INT 91
14809: PPUSH
14810: CALL_OW 84
// wait ( 0 0$5 ) ;
14814: LD_INT 175
14816: PPUSH
14817: CALL_OW 67
// InGameOff ;
14821: CALL_OW 9
// end ;
14825: END
// every 12 12$0 trigger Difficulty > 1 do
14826: LD_OWVAR 67
14830: PUSH
14831: LD_INT 1
14833: GREATER
14834: IFFALSE 14858
14836: GO 14838
14838: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14839: LD_INT 24
14841: PPUSH
14842: LD_INT 24
14844: PPUSH
14845: LD_INT 1
14847: PPUSH
14848: LD_INT 1
14850: PPUSH
14851: LD_INT 53
14853: PPUSH
14854: CALL_OW 185
14858: END
// every 18 18$0 do
14859: GO 14861
14861: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14862: LD_EXP 14
14866: PPUSH
14867: LD_STRING D4-Har-1
14869: PPUSH
14870: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14874: LD_EXP 1
14878: PPUSH
14879: LD_STRING D4-JMM-1
14881: PPUSH
14882: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14886: LD_EXP 14
14890: PPUSH
14891: LD_STRING D4-Har-2
14893: PPUSH
14894: CALL_OW 94
// case query ( Q1 ) of 1 :
14898: LD_STRING Q1
14900: PPUSH
14901: CALL_OW 97
14905: PUSH
14906: LD_INT 1
14908: DOUBLE
14909: EQUAL
14910: IFTRUE 14914
14912: GO 14973
14914: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14915: LD_EXP 1
14919: PPUSH
14920: LD_STRING D5-JMM-1
14922: PPUSH
14923: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14927: LD_EXP 14
14931: PPUSH
14932: LD_STRING D5-Har-1
14934: PPUSH
14935: CALL_OW 94
// timeToSupport = 10 10$0 ;
14939: LD_ADDR_EXP 28
14943: PUSH
14944: LD_INT 21000
14946: ST_TO_ADDR
// timerStatus = 2 ;
14947: LD_ADDR_EXP 29
14951: PUSH
14952: LD_INT 2
14954: ST_TO_ADDR
// startTimer = 1 ;
14955: LD_ADDR_EXP 30
14959: PUSH
14960: LD_INT 1
14962: ST_TO_ADDR
// harrAnswer = 1 ;
14963: LD_ADDR_EXP 26
14967: PUSH
14968: LD_INT 1
14970: ST_TO_ADDR
// end ; 2 :
14971: GO 15108
14973: LD_INT 2
14975: DOUBLE
14976: EQUAL
14977: IFTRUE 14981
14979: GO 15040
14981: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14982: LD_EXP 1
14986: PPUSH
14987: LD_STRING D5-JMM-2
14989: PPUSH
14990: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14994: LD_EXP 14
14998: PPUSH
14999: LD_STRING D5-Har-2
15001: PPUSH
15002: CALL_OW 94
// timeToSupport = 5 5$0 ;
15006: LD_ADDR_EXP 28
15010: PUSH
15011: LD_INT 10500
15013: ST_TO_ADDR
// timerStatus = 2 ;
15014: LD_ADDR_EXP 29
15018: PUSH
15019: LD_INT 2
15021: ST_TO_ADDR
// startTimer = 1 ;
15022: LD_ADDR_EXP 30
15026: PUSH
15027: LD_INT 1
15029: ST_TO_ADDR
// harrAnswer = 2 ;
15030: LD_ADDR_EXP 26
15034: PUSH
15035: LD_INT 2
15037: ST_TO_ADDR
// end ; 3 :
15038: GO 15108
15040: LD_INT 3
15042: DOUBLE
15043: EQUAL
15044: IFTRUE 15048
15046: GO 15107
15048: POP
// begin Say ( JMM , D5-JMM-3 ) ;
15049: LD_EXP 1
15053: PPUSH
15054: LD_STRING D5-JMM-3
15056: PPUSH
15057: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
15061: LD_EXP 14
15065: PPUSH
15066: LD_STRING D5-Har-3
15068: PPUSH
15069: CALL_OW 94
// timeToSupport = 5 5$0 ;
15073: LD_ADDR_EXP 28
15077: PUSH
15078: LD_INT 10500
15080: ST_TO_ADDR
// timerStatus = 2 ;
15081: LD_ADDR_EXP 29
15085: PUSH
15086: LD_INT 2
15088: ST_TO_ADDR
// startTimer = 1 ;
15089: LD_ADDR_EXP 30
15093: PUSH
15094: LD_INT 1
15096: ST_TO_ADDR
// harrAnswer = 3 ;
15097: LD_ADDR_EXP 26
15101: PUSH
15102: LD_INT 3
15104: ST_TO_ADDR
// end ; end ;
15105: GO 15108
15107: POP
// end ;
15108: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
15109: LD_EXP 29
15113: PUSH
15114: LD_INT 2
15116: EQUAL
15117: PUSH
15118: LD_EXP 28
15122: PUSH
15123: LD_INT 0
15125: EQUAL
15126: AND
15127: IFFALSE 15404
15129: GO 15131
15131: DISABLE
// begin timerStatus = 4 ;
15132: LD_ADDR_EXP 29
15136: PUSH
15137: LD_INT 4
15139: ST_TO_ADDR
// if harrAnswer = 1 then
15140: LD_EXP 26
15144: PUSH
15145: LD_INT 1
15147: EQUAL
15148: IFFALSE 15228
// begin PrepareHarrisonSupport ( 3 ) ;
15150: LD_INT 3
15152: PPUSH
15153: CALL 1747 0 1
// wait ( 1 1$0 ) ;
15157: LD_INT 2100
15159: PPUSH
15160: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15164: LD_EXP 14
15168: PPUSH
15169: LD_STRING D7-Har-1
15171: PPUSH
15172: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15176: LD_STRING M2
15178: PPUSH
15179: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15183: LD_ADDR_EXP 27
15187: PUSH
15188: LD_INT 31500
15190: PUSH
15191: LD_INT 10500
15193: PUSH
15194: LD_INT 8400
15196: PUSH
15197: LD_INT 6300
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: LIST
15204: PUSH
15205: LD_OWVAR 67
15209: ARRAY
15210: PLUS
15211: ST_TO_ADDR
// startTimer = 1 ;
15212: LD_ADDR_EXP 30
15216: PUSH
15217: LD_INT 1
15219: ST_TO_ADDR
// timerStatus = 3 ;
15220: LD_ADDR_EXP 29
15224: PUSH
15225: LD_INT 3
15227: ST_TO_ADDR
// end ; if harrAnswer = 2 then
15228: LD_EXP 26
15232: PUSH
15233: LD_INT 2
15235: EQUAL
15236: IFFALSE 15316
// begin PrepareHarrisonSupport ( 4 ) ;
15238: LD_INT 4
15240: PPUSH
15241: CALL 1747 0 1
// wait ( 1 1$0 ) ;
15245: LD_INT 2100
15247: PPUSH
15248: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15252: LD_EXP 14
15256: PPUSH
15257: LD_STRING D7-Har-1
15259: PPUSH
15260: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15264: LD_STRING M2
15266: PPUSH
15267: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15271: LD_ADDR_EXP 27
15275: PUSH
15276: LD_INT 33600
15278: PUSH
15279: LD_INT 10500
15281: PUSH
15282: LD_INT 8400
15284: PUSH
15285: LD_INT 6300
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: LIST
15292: PUSH
15293: LD_OWVAR 67
15297: ARRAY
15298: PLUS
15299: ST_TO_ADDR
// startTimer = 1 ;
15300: LD_ADDR_EXP 30
15304: PUSH
15305: LD_INT 1
15307: ST_TO_ADDR
// timerStatus = 3 ;
15308: LD_ADDR_EXP 29
15312: PUSH
15313: LD_INT 3
15315: ST_TO_ADDR
// end ; if harrAnswer = 3 then
15316: LD_EXP 26
15320: PUSH
15321: LD_INT 3
15323: EQUAL
15324: IFFALSE 15404
// begin PrepareHarrisonSupport ( 5 ) ;
15326: LD_INT 5
15328: PPUSH
15329: CALL 1747 0 1
// wait ( 1 1$0 ) ;
15333: LD_INT 2100
15335: PPUSH
15336: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15340: LD_EXP 14
15344: PPUSH
15345: LD_STRING D7-Har-1
15347: PPUSH
15348: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15352: LD_STRING M2
15354: PPUSH
15355: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
15359: LD_ADDR_EXP 27
15363: PUSH
15364: LD_INT 35700
15366: PUSH
15367: LD_INT 10500
15369: PUSH
15370: LD_INT 6300
15372: PUSH
15373: LD_INT 4200
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: LIST
15380: PUSH
15381: LD_OWVAR 67
15385: ARRAY
15386: PLUS
15387: ST_TO_ADDR
// startTimer = 1 ;
15388: LD_ADDR_EXP 30
15392: PUSH
15393: LD_INT 1
15395: ST_TO_ADDR
// timerStatus = 3 ;
15396: LD_ADDR_EXP 29
15400: PUSH
15401: LD_INT 3
15403: ST_TO_ADDR
// end ; end ;
15404: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
15405: LD_EXP 27
15409: PUSH
15410: LD_INT 8400
15412: LESSEQUAL
15413: PUSH
15414: LD_EXP 29
15418: PUSH
15419: LD_INT 3
15421: EQUAL
15422: AND
15423: IFFALSE 15455
15425: GO 15427
15427: DISABLE
// begin DialogueOn ;
15428: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15432: LD_EXP 14
15436: PPUSH
15437: LD_STRING D7a-Har-1
15439: PPUSH
15440: CALL_OW 94
// DialogueOff ;
15444: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15448: LD_STRING M2a
15450: PPUSH
15451: CALL_OW 337
// end ;
15455: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
15456: LD_EXP 27
15460: PUSH
15461: LD_INT 0
15463: LESSEQUAL
15464: PUSH
15465: LD_EXP 29
15469: PUSH
15470: LD_INT 3
15472: EQUAL
15473: AND
15474: PUSH
15475: LD_EXP 40
15479: NOT
15480: AND
15481: IFFALSE 15620
15483: GO 15485
15485: DISABLE
15486: LD_INT 0
15488: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15489: LD_ADDR_VAR 0 1
15493: PUSH
15494: LD_INT 22
15496: PUSH
15497: LD_INT 1
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PPUSH
15504: CALL_OW 69
15508: PUSH
15509: LD_EXP 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: DIFF
15517: ST_TO_ADDR
// saveDonaldson = 2 ;
15518: LD_ADDR_EXP 24
15522: PUSH
15523: LD_INT 2
15525: ST_TO_ADDR
// DialogueOn ;
15526: CALL_OW 6
// if IsOK ( Donaldson ) then
15530: LD_EXP 13
15534: PPUSH
15535: CALL_OW 302
15539: IFFALSE 15555
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15541: LD_EXP 14
15545: PPUSH
15546: LD_STRING D8-Har-1
15548: PPUSH
15549: CALL_OW 94
// end else
15553: GO 15567
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15555: LD_EXP 14
15559: PPUSH
15560: LD_STRING D8-Har-1a
15562: PPUSH
15563: CALL_OW 94
// end ; DialogueOff ;
15567: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15571: LD_VAR 0 1
15575: PPUSH
15576: LD_INT 4
15578: PPUSH
15579: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15583: LD_VAR 0 1
15587: PPUSH
15588: LD_INT 88
15590: PPUSH
15591: LD_INT 89
15593: PPUSH
15594: CALL_OW 114
// honor = 0 ;
15598: LD_ADDR_EXP 39
15602: PUSH
15603: LD_INT 0
15605: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15606: LD_INT 350
15608: PPUSH
15609: CALL_OW 67
// YouLost ( LostCommand ) ;
15613: LD_STRING LostCommand
15615: PPUSH
15616: CALL_OW 104
// end ;
15620: PPOPN 1
15622: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15623: LD_INT 22
15625: PUSH
15626: LD_INT 6
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 21
15635: PUSH
15636: LD_INT 1
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PPUSH
15647: CALL_OW 69
15651: PUSH
15652: LD_INT 0
15654: EQUAL
15655: PUSH
15656: LD_EXP 20
15660: PUSH
15661: LD_INT 0
15663: EQUAL
15664: AND
15665: PUSH
15666: LD_EXP 44
15670: PUSH
15671: LD_INT 1
15673: EQUAL
15674: AND
15675: IFFALSE 15769
15677: GO 15679
15679: DISABLE
15680: LD_INT 0
15682: PPUSH
15683: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15684: LD_ADDR_VAR 0 2
15688: PUSH
15689: LD_INT 22
15691: PUSH
15692: LD_INT 1
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: LD_INT 21
15701: PUSH
15702: LD_INT 1
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: LD_INT 23
15711: PUSH
15712: LD_INT 1
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: LIST
15723: PPUSH
15724: CALL_OW 69
15728: ST_TO_ADDR
// for i in tmp do
15729: LD_ADDR_VAR 0 1
15733: PUSH
15734: LD_VAR 0 2
15738: PUSH
15739: FOR_IN
15740: IFFALSE 15767
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15742: LD_VAR 0 1
15746: PPUSH
15747: LD_INT 1
15749: PPUSH
15750: LD_INT 4
15752: PPUSH
15753: CALL_OW 12
15757: PPUSH
15758: LD_INT 500
15760: PPUSH
15761: CALL_OW 492
// end ;
15765: GO 15739
15767: POP
15768: POP
// end ; end_of_file
15769: PPOPN 2
15771: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15772: GO 15774
15774: DISABLE
15775: LD_INT 0
15777: PPUSH
// begin enemyWayX = [ ] ;
15778: LD_ADDR_EXP 50
15782: PUSH
15783: EMPTY
15784: ST_TO_ADDR
// enemyWayY = [ ] ;
15785: LD_ADDR_EXP 51
15789: PUSH
15790: EMPTY
15791: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15792: LD_ADDR_VAR 0 1
15796: PUSH
15797: LD_INT 1
15799: PPUSH
15800: LD_INT 3
15802: PPUSH
15803: CALL_OW 12
15807: ST_TO_ADDR
// if rnd = 1 then
15808: LD_VAR 0 1
15812: PUSH
15813: LD_INT 1
15815: EQUAL
15816: IFFALSE 15856
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15818: LD_ADDR_EXP 50
15822: PUSH
15823: LD_INT 73
15825: PUSH
15826: LD_INT 46
15828: PUSH
15829: LD_INT 29
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15837: LD_ADDR_EXP 51
15841: PUSH
15842: LD_INT 71
15844: PUSH
15845: LD_INT 43
15847: PUSH
15848: LD_INT 29
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: ST_TO_ADDR
// end ; if rnd = 2 then
15856: LD_VAR 0 1
15860: PUSH
15861: LD_INT 2
15863: EQUAL
15864: IFFALSE 15888
// begin enemyWayX = [ 64 ] ;
15866: LD_ADDR_EXP 50
15870: PUSH
15871: LD_INT 64
15873: PUSH
15874: EMPTY
15875: LIST
15876: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15877: LD_ADDR_EXP 51
15881: PUSH
15882: LD_INT 43
15884: PUSH
15885: EMPTY
15886: LIST
15887: ST_TO_ADDR
// end ; if rnd = 3 then
15888: LD_VAR 0 1
15892: PUSH
15893: LD_INT 3
15895: EQUAL
15896: IFFALSE 15920
// begin enemyWayX = [ 80 ] ;
15898: LD_ADDR_EXP 50
15902: PUSH
15903: LD_INT 80
15905: PUSH
15906: EMPTY
15907: LIST
15908: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15909: LD_ADDR_EXP 51
15913: PUSH
15914: LD_INT 28
15916: PUSH
15917: EMPTY
15918: LIST
15919: ST_TO_ADDR
// end ; enable ;
15920: ENABLE
// end ;
15921: PPOPN 1
15923: END
// every 0 0$1 trigger AIEnable = 1 do
15924: LD_EXP 37
15928: PUSH
15929: LD_INT 1
15931: EQUAL
15932: IFFALSE 16046
15934: GO 15936
15936: DISABLE
// begin enable ;
15937: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15938: LD_INT 3
15940: PPUSH
15941: LD_INT 21
15943: PPUSH
15944: LD_INT 7
15946: PPUSH
15947: CALL 6017 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15951: LD_INT 3
15953: PPUSH
15954: LD_INT 8
15956: PPUSH
15957: LD_INT 7
15959: PPUSH
15960: LD_INT 1
15962: PPUSH
15963: CALL 6338 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15967: LD_INT 3
15969: PPUSH
15970: LD_INT 17
15972: PPUSH
15973: LD_INT 108
15975: PPUSH
15976: LD_INT 95
15978: PPUSH
15979: CALL 7662 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15983: LD_INT 3
15985: PPUSH
15986: LD_INT 23
15988: PPUSH
15989: LD_EXP 50
15993: PPUSH
15994: LD_EXP 51
15998: PPUSH
15999: CALL 6994 0 4
// if baseReadyToBuild = 2 then
16003: LD_EXP 20
16007: PUSH
16008: LD_INT 2
16010: EQUAL
16011: IFFALSE 16046
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
16013: LD_INT 6
16015: PPUSH
16016: LD_EXP 21
16020: PPUSH
16021: LD_INT 6
16023: PPUSH
16024: CALL 6017 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
16028: LD_INT 6
16030: PPUSH
16031: LD_INT 9
16033: PPUSH
16034: LD_INT 6
16036: PPUSH
16037: LD_EXP 22
16041: PPUSH
16042: CALL 6338 0 4
// end ; end ;
16046: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
16047: LD_EXP 15
16051: PPUSH
16052: CALL_OW 310
16056: NOT
16057: PUSH
16058: LD_INT 21
16060: PPUSH
16061: CALL_OW 302
16065: AND
16066: PUSH
16067: LD_INT 21
16069: PPUSH
16070: CALL_OW 255
16074: PUSH
16075: LD_INT 3
16077: EQUAL
16078: AND
16079: IFFALSE 16097
16081: GO 16083
16083: DISABLE
// begin enable ;
16084: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
16085: LD_EXP 15
16089: PPUSH
16090: LD_INT 21
16092: PPUSH
16093: CALL_OW 120
// end ;
16097: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
16098: LD_INT 22
16100: PUSH
16101: LD_INT 3
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 21
16110: PUSH
16111: LD_INT 2
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 55
16120: PUSH
16121: EMPTY
16122: LIST
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: LIST
16128: PPUSH
16129: CALL_OW 69
16133: PUSH
16134: LD_INT 0
16136: EQUAL
16137: PUSH
16138: LD_INT 1
16140: PPUSH
16141: CALL_OW 255
16145: PUSH
16146: LD_INT 3
16148: EQUAL
16149: AND
16150: PUSH
16151: LD_INT 21
16153: PPUSH
16154: CALL_OW 302
16158: AND
16159: PUSH
16160: LD_INT 21
16162: PPUSH
16163: CALL_OW 255
16167: PUSH
16168: LD_INT 3
16170: EQUAL
16171: AND
16172: PUSH
16173: LD_INT 21
16175: PPUSH
16176: CALL_OW 302
16180: AND
16181: IFFALSE 16393
16183: GO 16185
16185: DISABLE
// begin enable ;
16186: ENABLE
// if Difficulty = 1 then
16187: LD_OWVAR 67
16191: PUSH
16192: LD_INT 1
16194: EQUAL
16195: IFFALSE 16239
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
16197: LD_INT 3
16199: PPUSH
16200: LD_INT 24
16202: PPUSH
16203: LD_OWVAR 67
16207: PUSH
16208: LD_INT 2
16210: PLUS
16211: PPUSH
16212: LD_INT 42
16214: PUSH
16215: LD_INT 44
16217: PUSH
16218: LD_INT 43
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: LIST
16225: PPUSH
16226: LD_INT 1
16228: PPUSH
16229: LD_INT 1
16231: PPUSH
16232: LD_INT 21
16234: PPUSH
16235: CALL 6882 0 7
// if Difficulty = 2 then
16239: LD_OWVAR 67
16243: PUSH
16244: LD_INT 2
16246: EQUAL
16247: IFFALSE 16314
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
16249: LD_INT 3
16251: PPUSH
16252: LD_INT 24
16254: PPUSH
16255: LD_OWVAR 67
16259: PUSH
16260: LD_INT 2
16262: PLUS
16263: PPUSH
16264: LD_INT 44
16266: PUSH
16267: LD_INT 44
16269: PUSH
16270: LD_INT 43
16272: PUSH
16273: LD_INT 43
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: PPUSH
16282: LD_INT 1
16284: PPUSH
16285: LD_INT 1
16287: PPUSH
16288: LD_INT 21
16290: PUSH
16291: LD_INT 22
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 1
16300: PPUSH
16301: LD_INT 2
16303: PPUSH
16304: CALL_OW 12
16308: ARRAY
16309: PPUSH
16310: CALL 6882 0 7
// if Difficulty = 3 then
16314: LD_OWVAR 67
16318: PUSH
16319: LD_INT 3
16321: EQUAL
16322: IFFALSE 16393
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
16324: LD_INT 3
16326: PPUSH
16327: LD_INT 24
16329: PPUSH
16330: LD_OWVAR 67
16334: PUSH
16335: LD_INT 2
16337: PPUSH
16338: LD_INT 3
16340: PPUSH
16341: CALL_OW 12
16345: PLUS
16346: PPUSH
16347: LD_INT 44
16349: PUSH
16350: LD_INT 44
16352: PUSH
16353: LD_INT 43
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: LIST
16360: PPUSH
16361: LD_INT 1
16363: PPUSH
16364: LD_INT 1
16366: PPUSH
16367: LD_INT 22
16369: PUSH
16370: LD_INT 23
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 1
16379: PPUSH
16380: LD_INT 2
16382: PPUSH
16383: CALL_OW 12
16387: ARRAY
16388: PPUSH
16389: CALL 6882 0 7
// end ;
16393: END
// every 0 0$1 do
16394: GO 16396
16396: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
16397: LD_INT 3
16399: PPUSH
16400: LD_INT 1
16402: PPUSH
16403: LD_INT 3
16405: PPUSH
16406: CALL 5932 0 3
16410: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
16411: LD_EXP 20
16415: PUSH
16416: LD_INT 1
16418: EQUAL
16419: IFFALSE 16566
16421: GO 16423
16423: DISABLE
16424: LD_INT 0
16426: PPUSH
16427: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16428: LD_ADDR_VAR 0 2
16432: PUSH
16433: LD_INT 22
16435: PUSH
16436: LD_INT 6
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: LD_INT 21
16445: PUSH
16446: LD_INT 2
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 34
16455: PUSH
16456: LD_INT 51
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: LIST
16467: PPUSH
16468: CALL_OW 69
16472: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16473: LD_VAR 0 2
16477: PUSH
16478: LD_INT 1
16480: ARRAY
16481: PPUSH
16482: LD_EXP 21
16486: PPUSH
16487: CALL_OW 250
16491: PUSH
16492: LD_INT 5
16494: MINUS
16495: PPUSH
16496: LD_EXP 21
16500: PPUSH
16501: CALL_OW 251
16505: PUSH
16506: LD_INT 5
16508: MINUS
16509: PPUSH
16510: CALL_OW 111
// wait ( 0 0$5 ) ;
16514: LD_INT 175
16516: PPUSH
16517: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16521: LD_VAR 0 2
16525: PUSH
16526: LD_INT 1
16528: ARRAY
16529: PPUSH
16530: LD_INT 41
16532: PPUSH
16533: LD_INT 52
16535: PPUSH
16536: CALL_OW 177
// wait ( 0 0$40 ) ;
16540: LD_INT 1400
16542: PPUSH
16543: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16547: LD_VAR 0 2
16551: PUSH
16552: LD_INT 1
16554: ARRAY
16555: PPUSH
16556: LD_INT 41
16558: PPUSH
16559: LD_INT 44
16561: PPUSH
16562: CALL_OW 111
// end ;
16566: PPOPN 2
16568: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16569: LD_EXP 21
16573: PPUSH
16574: CALL_OW 274
16578: PPUSH
16579: LD_INT 1
16581: PPUSH
16582: CALL_OW 275
16586: PUSH
16587: LD_INT 100
16589: GREATEREQUAL
16590: IFFALSE 16818
16592: GO 16594
16594: DISABLE
16595: LD_INT 0
16597: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16598: LD_ADDR_VAR 0 1
16602: PUSH
16603: LD_INT 22
16605: PUSH
16606: LD_INT 6
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 21
16615: PUSH
16616: LD_INT 1
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 25
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: LIST
16637: PPUSH
16638: CALL_OW 69
16642: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16643: LD_VAR 0 1
16647: PUSH
16648: LD_INT 1
16650: ARRAY
16651: PPUSH
16652: LD_INT 4
16654: PPUSH
16655: LD_INT 39
16657: PPUSH
16658: LD_INT 37
16660: PPUSH
16661: LD_INT 3
16663: PPUSH
16664: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16668: LD_VAR 0 1
16672: PUSH
16673: LD_INT 1
16675: ARRAY
16676: PPUSH
16677: LD_INT 29
16679: PPUSH
16680: LD_INT 42
16682: PPUSH
16683: LD_INT 54
16685: PPUSH
16686: LD_INT 3
16688: PPUSH
16689: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16693: LD_VAR 0 1
16697: PUSH
16698: LD_INT 1
16700: ARRAY
16701: PPUSH
16702: LD_INT 6
16704: PPUSH
16705: LD_INT 38
16707: PPUSH
16708: LD_INT 48
16710: PPUSH
16711: LD_INT 0
16713: PPUSH
16714: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16718: LD_VAR 0 1
16722: PUSH
16723: LD_INT 1
16725: ARRAY
16726: PPUSH
16727: LD_INT 2
16729: PPUSH
16730: LD_INT 32
16732: PPUSH
16733: LD_INT 38
16735: PPUSH
16736: LD_INT 2
16738: PPUSH
16739: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16743: LD_VAR 0 1
16747: PUSH
16748: LD_INT 1
16750: ARRAY
16751: PPUSH
16752: LD_INT 26
16754: PPUSH
16755: LD_INT 39
16757: PPUSH
16758: LD_INT 55
16760: PPUSH
16761: LD_INT 3
16763: PPUSH
16764: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16768: LD_VAR 0 1
16772: PUSH
16773: LD_INT 1
16775: ARRAY
16776: PPUSH
16777: LD_INT 32
16779: PPUSH
16780: LD_INT 31
16782: PPUSH
16783: LD_INT 31
16785: PPUSH
16786: LD_INT 3
16788: PPUSH
16789: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16793: LD_VAR 0 1
16797: PUSH
16798: LD_INT 1
16800: ARRAY
16801: PPUSH
16802: LD_INT 31
16804: PPUSH
16805: LD_INT 50
16807: PPUSH
16808: LD_INT 51
16810: PPUSH
16811: LD_INT 4
16813: PPUSH
16814: CALL_OW 205
// end ;
16818: PPOPN 1
16820: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
16821: LD_EXP 46
16825: IFFALSE 17382
16827: GO 16829
16829: DISABLE
16830: LD_INT 0
16832: PPUSH
16833: PPUSH
16834: PPUSH
// begin enable ;
16835: ENABLE
// if not ruMobile then
16836: LD_EXP 46
16840: NOT
16841: IFFALSE 16845
// exit ;
16843: GO 17382
// for i in ruMobile do
16845: LD_ADDR_VAR 0 1
16849: PUSH
16850: LD_EXP 46
16854: PUSH
16855: FOR_IN
16856: IFFALSE 17380
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
16858: LD_VAR 0 1
16862: PPUSH
16863: CALL_OW 302
16867: NOT
16868: PUSH
16869: LD_VAR 0 1
16873: PPUSH
16874: CALL_OW 255
16878: PUSH
16879: LD_INT 3
16881: NONEQUAL
16882: OR
16883: IFFALSE 16903
// begin ruMobile := ruMobile diff i ;
16885: LD_ADDR_EXP 46
16889: PUSH
16890: LD_EXP 46
16894: PUSH
16895: LD_VAR 0 1
16899: DIFF
16900: ST_TO_ADDR
// continue ;
16901: GO 16855
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
16903: LD_VAR 0 1
16907: PPUSH
16908: CALL_OW 110
16912: NOT
16913: PUSH
16914: LD_VAR 0 1
16918: PPUSH
16919: CALL_OW 110
16923: PUSH
16924: LD_INT 0
16926: EQUAL
16927: OR
16928: IFFALSE 17043
// begin if GetFuel ( i ) < 50 then
16930: LD_VAR 0 1
16934: PPUSH
16935: CALL_OW 261
16939: PUSH
16940: LD_INT 50
16942: LESS
16943: IFFALSE 17002
// begin ComMoveXY ( i , 106 , 88 ) ;
16945: LD_VAR 0 1
16949: PPUSH
16950: LD_INT 106
16952: PPUSH
16953: LD_INT 88
16955: PPUSH
16956: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16960: LD_INT 35
16962: PPUSH
16963: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
16967: LD_VAR 0 1
16971: PPUSH
16972: LD_INT 106
16974: PPUSH
16975: LD_INT 88
16977: PPUSH
16978: CALL_OW 297
16982: PUSH
16983: LD_INT 4
16985: LESS
16986: IFFALSE 16960
// SetFuel ( i , 100 ) ;
16988: LD_VAR 0 1
16992: PPUSH
16993: LD_INT 100
16995: PPUSH
16996: CALL_OW 240
// end else
17000: GO 17043
// if not IsInArea ( i , ruParking ) then
17002: LD_VAR 0 1
17006: PPUSH
17007: LD_INT 25
17009: PPUSH
17010: CALL_OW 308
17014: NOT
17015: IFFALSE 17031
// ComMoveToArea ( i , ruParking ) else
17017: LD_VAR 0 1
17021: PPUSH
17022: LD_INT 25
17024: PPUSH
17025: CALL_OW 113
17029: GO 17043
// SetTag ( i , 1 ) ;
17031: LD_VAR 0 1
17035: PPUSH
17036: LD_INT 1
17038: PPUSH
17039: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
17043: LD_VAR 0 1
17047: PPUSH
17048: CALL_OW 110
17052: PUSH
17053: LD_INT 1
17055: EQUAL
17056: IFFALSE 17186
// begin if GetLives ( i ) < 1000 then
17058: LD_VAR 0 1
17062: PPUSH
17063: CALL_OW 256
17067: PUSH
17068: LD_INT 1000
17070: LESS
17071: IFFALSE 17163
// begin if not IsDrivenBy ( i ) then
17073: LD_VAR 0 1
17077: PPUSH
17078: CALL_OW 311
17082: NOT
17083: IFFALSE 17087
// continue ;
17085: GO 16855
// mech := IsDrivenBy ( i ) ;
17087: LD_ADDR_VAR 0 2
17091: PUSH
17092: LD_VAR 0 1
17096: PPUSH
17097: CALL_OW 311
17101: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
17102: LD_VAR 0 2
17106: PPUSH
17107: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
17111: LD_VAR 0 2
17115: PPUSH
17116: LD_VAR 0 1
17120: PPUSH
17121: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
17125: LD_INT 35
17127: PPUSH
17128: CALL_OW 67
// until GetLives ( i ) = 1000 ;
17132: LD_VAR 0 1
17136: PPUSH
17137: CALL_OW 256
17141: PUSH
17142: LD_INT 1000
17144: EQUAL
17145: IFFALSE 17125
// ComEnterUnit ( mech , i ) ;
17147: LD_VAR 0 2
17151: PPUSH
17152: LD_VAR 0 1
17156: PPUSH
17157: CALL_OW 120
// end else
17161: GO 17186
// if IsDrivenBy ( i ) then
17163: LD_VAR 0 1
17167: PPUSH
17168: CALL_OW 311
17172: IFFALSE 17186
// SetTag ( i , 2 ) ;
17174: LD_VAR 0 1
17178: PPUSH
17179: LD_INT 2
17181: PPUSH
17182: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
17186: LD_VAR 0 1
17190: PPUSH
17191: CALL_OW 110
17195: PUSH
17196: LD_INT 2
17198: EQUAL
17199: IFFALSE 17378
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
17201: LD_ADDR_VAR 0 3
17205: PUSH
17206: LD_INT 24
17208: PPUSH
17209: LD_INT 81
17211: PUSH
17212: LD_INT 3
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PPUSH
17219: CALL_OW 70
17223: ST_TO_ADDR
// if GetLives ( i ) < 650 then
17224: LD_VAR 0 1
17228: PPUSH
17229: CALL_OW 256
17233: PUSH
17234: LD_INT 650
17236: LESS
17237: IFFALSE 17262
// begin ComStop ( i ) ;
17239: LD_VAR 0 1
17243: PPUSH
17244: CALL_OW 141
// SetTag ( i , 0 ) ;
17248: LD_VAR 0 1
17252: PPUSH
17253: LD_INT 0
17255: PPUSH
17256: CALL_OW 109
// continue ;
17260: GO 16855
// end ; if enemy then
17262: LD_VAR 0 3
17266: IFFALSE 17306
// begin if not HasTask ( i ) then
17268: LD_VAR 0 1
17272: PPUSH
17273: CALL_OW 314
17277: NOT
17278: IFFALSE 17304
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17280: LD_VAR 0 1
17284: PPUSH
17285: LD_VAR 0 3
17289: PPUSH
17290: LD_VAR 0 1
17294: PPUSH
17295: CALL_OW 74
17299: PPUSH
17300: CALL_OW 115
// end else
17304: GO 17378
// if ruMobile > 2 then
17306: LD_EXP 46
17310: PUSH
17311: LD_INT 2
17313: GREATER
17314: IFFALSE 17378
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17316: LD_ADDR_VAR 0 3
17320: PUSH
17321: LD_INT 81
17323: PUSH
17324: LD_INT 3
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PPUSH
17331: CALL_OW 69
17335: ST_TO_ADDR
// if enemy then
17336: LD_VAR 0 3
17340: IFFALSE 17378
// if not HasTask ( i ) then
17342: LD_VAR 0 1
17346: PPUSH
17347: CALL_OW 314
17351: NOT
17352: IFFALSE 17378
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17354: LD_VAR 0 1
17358: PPUSH
17359: LD_VAR 0 3
17363: PPUSH
17364: LD_VAR 0 1
17368: PPUSH
17369: CALL_OW 74
17373: PPUSH
17374: CALL_OW 115
// end ; end ; end ;
17378: GO 16855
17380: POP
17381: POP
// end ; end_of_file
17382: PPOPN 3
17384: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
17385: LD_INT 0
17387: PPUSH
17388: PPUSH
17389: PPUSH
17390: PPUSH
17391: PPUSH
17392: PPUSH
17393: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
17394: LD_ADDR_VAR 0 3
17398: PUSH
17399: LD_INT 22
17401: PUSH
17402: LD_INT 6
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 21
17411: PUSH
17412: LD_INT 1
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 25
17421: PUSH
17422: LD_INT 1
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 3
17431: PUSH
17432: LD_INT 54
17434: PUSH
17435: EMPTY
17436: LIST
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: PPUSH
17448: CALL_OW 69
17452: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
17453: LD_ADDR_VAR 0 7
17457: PUSH
17458: LD_INT 22
17460: PUSH
17461: LD_INT 6
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 21
17470: PUSH
17471: LD_INT 1
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 25
17480: PUSH
17481: LD_INT 1
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 54
17490: PUSH
17491: EMPTY
17492: LIST
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: PPUSH
17500: CALL_OW 69
17504: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
17505: LD_ADDR_VAR 0 4
17509: PUSH
17510: LD_INT 22
17512: PUSH
17513: LD_INT 6
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 21
17522: PUSH
17523: LD_INT 1
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 25
17532: PUSH
17533: LD_INT 2
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: LIST
17544: PPUSH
17545: CALL_OW 69
17549: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
17550: LD_ADDR_VAR 0 6
17554: PUSH
17555: LD_INT 22
17557: PUSH
17558: LD_INT 6
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: LD_INT 21
17567: PUSH
17568: LD_INT 1
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 25
17577: PUSH
17578: LD_INT 4
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: PPUSH
17590: CALL_OW 69
17594: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
17595: LD_ADDR_VAR 0 8
17599: PUSH
17600: LD_INT 22
17602: PUSH
17603: LD_INT 6
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 21
17612: PUSH
17613: LD_INT 2
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 34
17622: PUSH
17623: LD_INT 51
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: PPUSH
17635: CALL_OW 69
17639: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
17640: LD_VAR 0 1
17644: PPUSH
17645: CALL_OW 255
17649: PUSH
17650: LD_INT 6
17652: EQUAL
17653: PUSH
17654: LD_VAR 0 1
17658: PPUSH
17659: CALL_OW 266
17663: PUSH
17664: LD_INT 0
17666: EQUAL
17667: AND
17668: IFFALSE 17688
// begin ruPDepot = building ;
17670: LD_ADDR_EXP 21
17674: PUSH
17675: LD_VAR 0 1
17679: ST_TO_ADDR
// baseReadyToBuild = 1 ;
17680: LD_ADDR_EXP 20
17684: PUSH
17685: LD_INT 1
17687: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
17688: LD_VAR 0 1
17692: PPUSH
17693: CALL_OW 266
17697: PUSH
17698: LD_INT 4
17700: EQUAL
17701: PUSH
17702: LD_VAR 0 1
17706: PPUSH
17707: CALL_OW 255
17711: PUSH
17712: LD_INT 6
17714: EQUAL
17715: AND
17716: IFFALSE 17749
// for i in tmpSold do
17718: LD_ADDR_VAR 0 2
17722: PUSH
17723: LD_VAR 0 3
17727: PUSH
17728: FOR_IN
17729: IFFALSE 17747
// ComEnterUnit ( i , building ) ;
17731: LD_VAR 0 2
17735: PPUSH
17736: LD_VAR 0 1
17740: PPUSH
17741: CALL_OW 120
17745: GO 17728
17747: POP
17748: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
17749: LD_VAR 0 1
17753: PPUSH
17754: CALL_OW 266
17758: PUSH
17759: LD_INT 6
17761: EQUAL
17762: PUSH
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL_OW 255
17772: PUSH
17773: LD_INT 6
17775: EQUAL
17776: AND
17777: IFFALSE 17835
// begin for i in tmpSci do
17779: LD_ADDR_VAR 0 2
17783: PUSH
17784: LD_VAR 0 6
17788: PUSH
17789: FOR_IN
17790: IFFALSE 17808
// ComEnterUnit ( i , building ) ;
17792: LD_VAR 0 2
17796: PPUSH
17797: LD_VAR 0 1
17801: PPUSH
17802: CALL_OW 120
17806: GO 17789
17808: POP
17809: POP
// ResAllTechs ( 6 , building , 3 ) ;
17810: LD_INT 6
17812: PPUSH
17813: LD_VAR 0 1
17817: PPUSH
17818: LD_INT 3
17820: PPUSH
17821: CALL 5932 0 3
// ruPLab = building ;
17825: LD_ADDR_EXP 22
17829: PUSH
17830: LD_VAR 0 1
17834: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
17835: LD_VAR 0 1
17839: PPUSH
17840: CALL_OW 266
17844: PUSH
17845: LD_INT 2
17847: EQUAL
17848: PUSH
17849: LD_VAR 0 1
17853: PPUSH
17854: CALL_OW 255
17858: PUSH
17859: LD_INT 6
17861: EQUAL
17862: AND
17863: IFFALSE 17914
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
17865: LD_ADDR_VAR 0 5
17869: PUSH
17870: LD_VAR 0 8
17874: PUSH
17875: LD_INT 1
17877: ARRAY
17878: PPUSH
17879: CALL_OW 313
17883: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
17884: LD_VAR 0 5
17888: PPUSH
17889: CALL_OW 121
// wait ( 0 0$1 ) ;
17893: LD_INT 35
17895: PPUSH
17896: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
17900: LD_VAR 0 5
17904: PPUSH
17905: LD_VAR 0 1
17909: PPUSH
17910: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
17914: LD_VAR 0 1
17918: PPUSH
17919: CALL_OW 266
17923: PUSH
17924: LD_INT 32
17926: EQUAL
17927: PUSH
17928: LD_VAR 0 1
17932: PPUSH
17933: CALL_OW 255
17937: PUSH
17938: LD_INT 6
17940: EQUAL
17941: AND
17942: IFFALSE 17994
// begin ComPlaceWeapon ( building , 42 ) ;
17944: LD_VAR 0 1
17948: PPUSH
17949: LD_INT 42
17951: PPUSH
17952: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
17956: LD_VAR 0 7
17960: PUSH
17961: LD_INT 1
17963: ARRAY
17964: PPUSH
17965: CALL_OW 122
// wait ( 0 0$1 ) ;
17969: LD_INT 35
17971: PPUSH
17972: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
17976: LD_VAR 0 7
17980: PUSH
17981: LD_INT 1
17983: ARRAY
17984: PPUSH
17985: LD_VAR 0 1
17989: PPUSH
17990: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
17994: LD_VAR 0 1
17998: PPUSH
17999: CALL_OW 266
18003: PUSH
18004: LD_INT 31
18006: EQUAL
18007: PUSH
18008: LD_VAR 0 1
18012: PPUSH
18013: CALL_OW 255
18017: PUSH
18018: LD_INT 6
18020: EQUAL
18021: AND
18022: IFFALSE 18088
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
18024: LD_VAR 0 7
18028: PUSH
18029: LD_INT 2
18031: ARRAY
18032: PPUSH
18033: CALL_OW 122
// wait ( 0 0$1 ) ;
18037: LD_INT 35
18039: PPUSH
18040: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
18044: LD_VAR 0 7
18048: PUSH
18049: LD_INT 2
18051: ARRAY
18052: PPUSH
18053: LD_VAR 0 1
18057: PPUSH
18058: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
18062: LD_VAR 0 4
18066: PUSH
18067: LD_INT 1
18069: ARRAY
18070: PPUSH
18071: LD_EXP 21
18075: PPUSH
18076: CALL_OW 120
// baseReadyToBuild = 2 ;
18080: LD_ADDR_EXP 20
18084: PUSH
18085: LD_INT 2
18087: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 266
18097: PUSH
18098: LD_INT 32
18100: EQUAL
18101: PUSH
18102: LD_VAR 0 1
18106: PPUSH
18107: CALL_OW 255
18111: PUSH
18112: LD_INT 1
18114: EQUAL
18115: AND
18116: PUSH
18117: LD_EXP 32
18121: PUSH
18122: LD_INT 0
18124: EQUAL
18125: AND
18126: IFFALSE 18371
// begin bunkerDialog = 1 ;
18128: LD_ADDR_EXP 32
18132: PUSH
18133: LD_INT 1
18135: ST_TO_ADDR
// if IsOK ( Claptopn ) then
18136: LD_EXP 11
18140: PPUSH
18141: CALL_OW 302
18145: IFFALSE 18161
// begin Say ( Claptopn , D11-Eng1-1 ) ;
18147: LD_EXP 11
18151: PPUSH
18152: LD_STRING D11-Eng1-1
18154: PPUSH
18155: CALL_OW 88
// end else
18159: GO 18357
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18161: LD_INT 22
18163: PUSH
18164: LD_INT 1
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 21
18173: PUSH
18174: LD_INT 1
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 25
18183: PUSH
18184: LD_INT 3
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 26
18193: PUSH
18194: LD_INT 1
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: PPUSH
18207: CALL_OW 69
18211: PUSH
18212: LD_EXP 1
18216: PUSH
18217: EMPTY
18218: LIST
18219: PUSH
18220: LD_INT 0
18222: GREATER
18223: DIFF
18224: IFFALSE 18298
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18226: LD_INT 22
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 21
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 25
18248: PUSH
18249: LD_INT 2
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 26
18258: PUSH
18259: LD_INT 1
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: PPUSH
18272: CALL_OW 69
18276: PUSH
18277: LD_EXP 1
18281: PUSH
18282: EMPTY
18283: LIST
18284: DIFF
18285: PPUSH
18286: LD_STRING D11-Eng1-1
18288: PPUSH
18289: LD_STRING D11-Eng1-1
18291: PPUSH
18292: CALL 4581 0 3
// end else
18296: GO 18357
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18298: LD_INT 22
18300: PUSH
18301: LD_INT 1
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 21
18310: PUSH
18311: LD_INT 1
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 26
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: LIST
18332: PPUSH
18333: CALL_OW 69
18337: PUSH
18338: LD_EXP 1
18342: PUSH
18343: EMPTY
18344: LIST
18345: DIFF
18346: PPUSH
18347: LD_STRING D11-Eng1-1
18349: PPUSH
18350: LD_STRING D11-Eng1-1
18352: PPUSH
18353: CALL 4581 0 3
// end ; end ; if energyVDialog = 0 then
18357: LD_EXP 33
18361: PUSH
18362: LD_INT 0
18364: EQUAL
18365: IFFALSE 18371
// EnergyDialog ;
18367: CALL 4984 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
18371: LD_VAR 0 1
18375: PPUSH
18376: CALL_OW 266
18380: PUSH
18381: LD_INT 29
18383: EQUAL
18384: PUSH
18385: LD_VAR 0 1
18389: PPUSH
18390: CALL_OW 255
18394: PUSH
18395: LD_INT 1
18397: EQUAL
18398: AND
18399: IFFALSE 18409
// buildOil = 1 ;
18401: LD_ADDR_EXP 34
18405: PUSH
18406: LD_INT 1
18408: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
18409: LD_VAR 0 1
18413: PPUSH
18414: CALL_OW 266
18418: PUSH
18419: LD_INT 26
18421: EQUAL
18422: PUSH
18423: LD_VAR 0 1
18427: PPUSH
18428: CALL_OW 255
18432: PUSH
18433: LD_INT 1
18435: EQUAL
18436: AND
18437: IFFALSE 18447
// buildPower = 1 ;
18439: LD_ADDR_EXP 35
18443: PUSH
18444: LD_INT 1
18446: ST_TO_ADDR
// end ;
18447: PPOPN 8
18449: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
18450: LD_VAR 0 1
18454: PPUSH
18455: CALL_OW 266
18459: PUSH
18460: LD_INT 3
18462: EQUAL
18463: PUSH
18464: LD_VAR 0 1
18468: PPUSH
18469: CALL_OW 255
18473: PUSH
18474: LD_INT 1
18476: EQUAL
18477: AND
18478: PUSH
18479: LD_EXP 31
18483: PUSH
18484: LD_INT 0
18486: EQUAL
18487: AND
18488: IFFALSE 18836
// begin factoryDialog = 1 ;
18490: LD_ADDR_EXP 31
18494: PUSH
18495: LD_INT 1
18497: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
18498: LD_INT 47
18500: PPUSH
18501: LD_INT 1
18503: PPUSH
18504: CALL_OW 321
18508: PUSH
18509: LD_INT 1
18511: EQUAL
18512: PUSH
18513: LD_INT 45
18515: PPUSH
18516: LD_INT 1
18518: PPUSH
18519: CALL_OW 321
18523: PUSH
18524: LD_INT 1
18526: EQUAL
18527: AND
18528: IFFALSE 18836
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18530: LD_INT 22
18532: PUSH
18533: LD_INT 1
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 21
18542: PUSH
18543: LD_INT 3
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 30
18552: PUSH
18553: LD_INT 3
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 24
18562: PUSH
18563: LD_INT 1000
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: PPUSH
18576: CALL_OW 69
18580: PUSH
18581: LD_INT 1
18583: ARRAY
18584: PPUSH
18585: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
18589: LD_EXP 1
18593: PPUSH
18594: LD_STRING D9a-JMM-1
18596: PPUSH
18597: CALL_OW 88
// if IsOK ( Campell ) then
18601: LD_EXP 12
18605: PPUSH
18606: CALL_OW 302
18610: IFFALSE 18626
// begin Say ( Campell , D9a-Mech1-1 ) ;
18612: LD_EXP 12
18616: PPUSH
18617: LD_STRING D9a-Mech1-1
18619: PPUSH
18620: CALL_OW 88
// end else
18624: GO 18822
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18626: LD_INT 22
18628: PUSH
18629: LD_INT 1
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 21
18638: PUSH
18639: LD_INT 1
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 25
18648: PUSH
18649: LD_INT 3
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 26
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: PPUSH
18672: CALL_OW 69
18676: PUSH
18677: LD_EXP 1
18681: PUSH
18682: EMPTY
18683: LIST
18684: PUSH
18685: LD_INT 0
18687: GREATER
18688: DIFF
18689: IFFALSE 18763
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18691: LD_INT 22
18693: PUSH
18694: LD_INT 1
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 21
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 25
18713: PUSH
18714: LD_INT 3
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 26
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: PPUSH
18737: CALL_OW 69
18741: PUSH
18742: LD_EXP 1
18746: PUSH
18747: EMPTY
18748: LIST
18749: DIFF
18750: PPUSH
18751: LD_STRING D9a-Mech1-1
18753: PPUSH
18754: LD_STRING D9a-Mech1-1
18756: PPUSH
18757: CALL 4581 0 3
// end else
18761: GO 18822
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18763: LD_INT 22
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 21
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 26
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: LIST
18797: PPUSH
18798: CALL_OW 69
18802: PUSH
18803: LD_EXP 1
18807: PUSH
18808: EMPTY
18809: LIST
18810: DIFF
18811: PPUSH
18812: LD_STRING D9a-Mech1-1
18814: PPUSH
18815: LD_STRING D9a-Mech1-1
18817: PPUSH
18818: CALL 4581 0 3
// end ; end ; if energyVDialog = 0 then
18822: LD_EXP 33
18826: PUSH
18827: LD_INT 0
18829: EQUAL
18830: IFFALSE 18836
// EnergyDialog ;
18832: CALL 4984 0 0
// end ; end ; end ;
18836: PPOPN 1
18838: END
// on UnitDestroyed ( unit ) do var mech ;
18839: LD_INT 0
18841: PPUSH
// begin if unit = JMM then
18842: LD_VAR 0 1
18846: PUSH
18847: LD_EXP 1
18851: EQUAL
18852: IFFALSE 18861
// YouLost ( JMM ) ;
18854: LD_STRING JMM
18856: PPUSH
18857: CALL_OW 104
// if unit in ruMobile then
18861: LD_VAR 0 1
18865: PUSH
18866: LD_EXP 46
18870: IN
18871: IFFALSE 18889
// ruMobile = ruMobile diff ruMobile ;
18873: LD_ADDR_EXP 46
18877: PUSH
18878: LD_EXP 46
18882: PUSH
18883: LD_EXP 46
18887: DIFF
18888: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
18889: LD_VAR 0 1
18893: PPUSH
18894: CALL_OW 247
18898: PUSH
18899: LD_INT 1
18901: EQUAL
18902: PUSH
18903: LD_VAR 0 1
18907: PPUSH
18908: CALL_OW 255
18912: PUSH
18913: LD_INT 1
18915: EQUAL
18916: AND
18917: IFFALSE 18933
// lostCounter = lostCounter + 1 ;
18919: LD_ADDR_EXP 38
18923: PUSH
18924: LD_EXP 38
18928: PUSH
18929: LD_INT 1
18931: PLUS
18932: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
18933: LD_EXP 43
18937: PUSH
18938: LD_INT 24
18940: PPUSH
18941: CALL_OW 313
18945: PUSH
18946: LD_INT 6
18948: LESS
18949: AND
18950: PUSH
18951: LD_VAR 0 1
18955: PPUSH
18956: CALL_OW 257
18960: PUSH
18961: LD_INT 3
18963: EQUAL
18964: AND
18965: PUSH
18966: LD_VAR 0 1
18970: PPUSH
18971: CALL_OW 255
18975: PUSH
18976: LD_INT 3
18978: EQUAL
18979: AND
18980: PUSH
18981: LD_INT 24
18983: PPUSH
18984: CALL_OW 302
18988: AND
18989: PUSH
18990: LD_INT 24
18992: PPUSH
18993: CALL_OW 255
18997: PUSH
18998: LD_INT 3
19000: EQUAL
19001: AND
19002: IFFALSE 19131
// begin ruMech := ruMech - 1 ;
19004: LD_ADDR_EXP 43
19008: PUSH
19009: LD_EXP 43
19013: PUSH
19014: LD_INT 1
19016: MINUS
19017: ST_TO_ADDR
// if ruMech = 0 then
19018: LD_EXP 43
19022: PUSH
19023: LD_INT 0
19025: EQUAL
19026: IFFALSE 19030
// exit ;
19028: GO 19131
// wait ( 0 0$40 ) ;
19030: LD_INT 1400
19032: PPUSH
19033: CALL_OW 67
// uc_side = 3 ;
19037: LD_ADDR_OWVAR 20
19041: PUSH
19042: LD_INT 3
19044: ST_TO_ADDR
// uc_nation = 3 ;
19045: LD_ADDR_OWVAR 21
19049: PUSH
19050: LD_INT 3
19052: ST_TO_ADDR
// hc_gallery :=  ;
19053: LD_ADDR_OWVAR 33
19057: PUSH
19058: LD_STRING 
19060: ST_TO_ADDR
// hc_name :=  ;
19061: LD_ADDR_OWVAR 26
19065: PUSH
19066: LD_STRING 
19068: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
19069: LD_INT 0
19071: PPUSH
19072: LD_EXP 16
19076: PPUSH
19077: LD_EXP 17
19081: PPUSH
19082: CALL_OW 12
19086: PPUSH
19087: CALL_OW 383
// mech := CreateHuman ;
19091: LD_ADDR_VAR 0 2
19095: PUSH
19096: CALL_OW 44
19100: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
19101: LD_VAR 0 2
19105: PPUSH
19106: LD_INT 124
19108: PPUSH
19109: LD_INT 97
19111: PPUSH
19112: LD_INT 0
19114: PPUSH
19115: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
19119: LD_VAR 0 2
19123: PPUSH
19124: LD_INT 24
19126: PPUSH
19127: CALL_OW 120
// end ; end ;
19131: PPOPN 2
19133: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
19134: LD_INT 0
19136: PPUSH
// begin if GetSide ( vehicle ) = 1 then
19137: LD_VAR 0 1
19141: PPUSH
19142: CALL_OW 255
19146: PUSH
19147: LD_INT 1
19149: EQUAL
19150: IFFALSE 19166
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
19152: LD_ADDR_EXP 42
19156: PUSH
19157: LD_EXP 42
19161: PUSH
19162: LD_INT 1
19164: PLUS
19165: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
19166: LD_VAR 0 1
19170: PPUSH
19171: CALL_OW 255
19175: PUSH
19176: LD_INT 3
19178: EQUAL
19179: PUSH
19180: LD_VAR 0 1
19184: PPUSH
19185: CALL_OW 264
19189: PUSH
19190: LD_INT 42
19192: PUSH
19193: LD_INT 43
19195: PUSH
19196: LD_INT 44
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: LIST
19203: IN
19204: AND
19205: IFFALSE 19223
// ruMobile := ruMobile union vehicle ;
19207: LD_ADDR_EXP 46
19211: PUSH
19212: LD_EXP 46
19216: PUSH
19217: LD_VAR 0 1
19221: UNION
19222: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 53 then
19223: LD_VAR 0 1
19227: PPUSH
19228: CALL_OW 264
19232: PUSH
19233: LD_INT 53
19235: EQUAL
19236: IFFALSE 19372
// begin uc_side = 3 ;
19238: LD_ADDR_OWVAR 20
19242: PUSH
19243: LD_INT 3
19245: ST_TO_ADDR
// uc_nation = 3 ;
19246: LD_ADDR_OWVAR 21
19250: PUSH
19251: LD_INT 3
19253: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
19254: LD_INT 0
19256: PPUSH
19257: LD_EXP 17
19261: PPUSH
19262: CALL_OW 383
// driver := CreateHuman ;
19266: LD_ADDR_VAR 0 3
19270: PUSH
19271: CALL_OW 44
19275: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
19276: LD_VAR 0 3
19280: PPUSH
19281: LD_VAR 0 2
19285: PPUSH
19286: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
19290: LD_VAR 0 1
19294: PPUSH
19295: LD_INT 21
19297: PPUSH
19298: CALL 5200 0 2
// repeat wait ( 0 0$1 ) ;
19302: LD_INT 35
19304: PPUSH
19305: CALL_OW 67
// until not HasTask ( vehicle ) ;
19309: LD_VAR 0 1
19313: PPUSH
19314: CALL_OW 314
19318: NOT
19319: IFFALSE 19302
// driver := IsDrivenBy ( vehicle ) ;
19321: LD_ADDR_VAR 0 3
19325: PUSH
19326: LD_VAR 0 1
19330: PPUSH
19331: CALL_OW 311
19335: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
19336: LD_VAR 0 3
19340: PPUSH
19341: LD_INT 104
19343: PPUSH
19344: LD_INT 73
19346: PPUSH
19347: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19351: LD_VAR 0 3
19355: PPUSH
19356: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
19360: LD_VAR 0 3
19364: PPUSH
19365: LD_INT 24
19367: PPUSH
19368: CALL_OW 180
// end ; end ;
19372: PPOPN 3
19374: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
19375: LD_INT 0
19377: PPUSH
19378: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL_OW 255
19388: PUSH
19389: LD_INT 3
19391: EQUAL
19392: PUSH
19393: LD_VAR 0 1
19397: PPUSH
19398: CALL_OW 247
19402: PUSH
19403: LD_INT 2
19405: EQUAL
19406: AND
19407: IFFALSE 19501
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
19409: LD_VAR 0 1
19413: PPUSH
19414: CALL_OW 264
19418: PUSH
19419: LD_INT 42
19421: EQUAL
19422: PUSH
19423: LD_VAR 0 1
19427: PPUSH
19428: CALL_OW 264
19432: PUSH
19433: LD_INT 43
19435: EQUAL
19436: OR
19437: PUSH
19438: LD_VAR 0 1
19442: PPUSH
19443: CALL_OW 264
19447: PUSH
19448: LD_INT 44
19450: EQUAL
19451: OR
19452: IFFALSE 19501
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
19454: LD_INT 24
19456: PPUSH
19457: LD_VAR 0 1
19461: PPUSH
19462: CALL_OW 265
19466: PPUSH
19467: LD_VAR 0 1
19471: PPUSH
19472: CALL_OW 262
19476: PPUSH
19477: LD_VAR 0 1
19481: PPUSH
19482: CALL_OW 263
19486: PPUSH
19487: LD_VAR 0 1
19491: PPUSH
19492: CALL_OW 264
19496: PPUSH
19497: CALL_OW 185
// end ;
19501: PPOPN 3
19503: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
19504: LD_VAR 0 1
19508: PPUSH
19509: CALL_OW 255
19513: PUSH
19514: LD_INT 3
19516: EQUAL
19517: PUSH
19518: LD_VAR 0 2
19522: PPUSH
19523: CALL_OW 255
19527: PUSH
19528: LD_INT 3
19530: EQUAL
19531: AND
19532: PUSH
19533: LD_INT 24
19535: PPUSH
19536: CALL_OW 302
19540: AND
19541: PUSH
19542: LD_VAR 0 1
19546: PPUSH
19547: CALL_OW 302
19551: NOT
19552: AND
19553: IFFALSE 19567
// ComEnterUnit ( human , rubfact0 ) ;
19555: LD_VAR 0 2
19559: PPUSH
19560: LD_INT 24
19562: PPUSH
19563: CALL_OW 120
// end ;
19567: PPOPN 2
19569: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
19570: LD_VAR 0 1
19574: PUSH
19575: LD_INT 24
19577: EQUAL
19578: PUSH
19579: LD_VAR 0 2
19583: PPUSH
19584: CALL_OW 256
19588: PUSH
19589: LD_INT 1000
19591: LESS
19592: AND
19593: IFFALSE 19607
// SetLives ( un , 1000 ) ;
19595: LD_VAR 0 2
19599: PPUSH
19600: LD_INT 1000
19602: PPUSH
19603: CALL_OW 234
// end ;
19607: PPOPN 2
19609: END
// on Command ( comandid ) do var i , j , tmp ;
19610: LD_INT 0
19612: PPUSH
19613: PPUSH
19614: PPUSH
// begin SOS_Command ( comandid ) ;
19615: LD_VAR 0 1
19619: PPUSH
19620: CALL 35956 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
19624: LD_INT 22
19626: PUSH
19627: LD_INT 4
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PPUSH
19634: CALL_OW 69
19638: NOT
19639: IFFALSE 19643
// exit ;
19641: GO 19808
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
19643: LD_ADDR_VAR 0 2
19647: PUSH
19648: LD_INT 22
19650: PUSH
19651: LD_INT 1
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 2
19660: PUSH
19661: LD_INT 21
19663: PUSH
19664: LD_INT 1
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 21
19673: PUSH
19674: LD_INT 2
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: LIST
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PPUSH
19690: CALL_OW 69
19694: PUSH
19695: FOR_IN
19696: IFFALSE 19806
// begin if GetTaskList ( i ) > 0 then
19698: LD_VAR 0 2
19702: PPUSH
19703: CALL_OW 437
19707: PUSH
19708: LD_INT 0
19710: GREATER
19711: IFFALSE 19804
// begin for j = 1 to GetTaskList ( i ) do
19713: LD_ADDR_VAR 0 3
19717: PUSH
19718: DOUBLE
19719: LD_INT 1
19721: DEC
19722: ST_TO_ADDR
19723: LD_VAR 0 2
19727: PPUSH
19728: CALL_OW 437
19732: PUSH
19733: FOR_TO
19734: IFFALSE 19802
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
19736: LD_ADDR_VAR 0 4
19740: PUSH
19741: LD_VAR 0 2
19745: PPUSH
19746: CALL_OW 437
19750: PUSH
19751: LD_VAR 0 3
19755: ARRAY
19756: PUSH
19757: LD_INT 4
19759: ARRAY
19760: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
19761: LD_VAR 0 4
19765: PPUSH
19766: CALL_OW 255
19770: PUSH
19771: LD_INT 4
19773: EQUAL
19774: PUSH
19775: LD_VAR 0 4
19779: PPUSH
19780: CALL_OW 255
19784: PUSH
19785: LD_INT 0
19787: EQUAL
19788: OR
19789: IFFALSE 19800
// ComStop ( i ) ;
19791: LD_VAR 0 2
19795: PPUSH
19796: CALL_OW 141
// end ;
19800: GO 19733
19802: POP
19803: POP
// end ; end ;
19804: GO 19695
19806: POP
19807: POP
// end ; end_of_file
19808: PPOPN 4
19810: END
// every 10 10$0 do
19811: GO 19813
19813: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
19814: LD_INT 5
19816: PPUSH
19817: LD_INT 3
19819: PPUSH
19820: LD_INT 2
19822: PUSH
19823: LD_INT 2
19825: PUSH
19826: LD_INT 3
19828: PUSH
19829: LD_INT 4
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: LIST
19836: PUSH
19837: LD_OWVAR 67
19841: ARRAY
19842: PLUS
19843: PPUSH
19844: LD_INT 0
19846: PPUSH
19847: LD_INT 0
19849: PPUSH
19850: LD_INT 0
19852: PPUSH
19853: LD_INT 0
19855: PPUSH
19856: LD_EXP 16
19860: PPUSH
19861: LD_EXP 17
19865: PPUSH
19866: CALL_OW 12
19870: PPUSH
19871: LD_INT 4
19873: PPUSH
19874: LD_INT 14
19876: PPUSH
19877: LD_INT 1
19879: PPUSH
19880: LD_INT 2
19882: PPUSH
19883: CALL 7905 0 12
// end ;
19887: END
// every 20 20$0 do
19888: GO 19890
19890: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
19891: LD_INT 5
19893: PPUSH
19894: LD_INT 3
19896: PPUSH
19897: LD_INT 4
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: LD_INT 3
19905: PUSH
19906: LD_INT 4
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: LIST
19913: PUSH
19914: LD_OWVAR 67
19918: ARRAY
19919: PLUS
19920: PPUSH
19921: LD_INT 0
19923: PPUSH
19924: LD_INT 0
19926: PPUSH
19927: LD_INT 0
19929: PPUSH
19930: LD_INT 2
19932: PPUSH
19933: LD_EXP 16
19937: PPUSH
19938: LD_EXP 17
19942: PPUSH
19943: CALL_OW 12
19947: PPUSH
19948: LD_INT 4
19950: PPUSH
19951: LD_INT 14
19953: PPUSH
19954: LD_INT 1
19956: PPUSH
19957: LD_INT 1
19959: PPUSH
19960: CALL 7905 0 12
// end ;
19964: END
// every 25 25$0 do
19965: GO 19967
19967: DISABLE
// begin if Difficulty > 1 then
19968: LD_OWVAR 67
19972: PUSH
19973: LD_INT 1
19975: GREATER
19976: IFFALSE 19986
// specAttack := true ;
19978: LD_ADDR_EXP 47
19982: PUSH
19983: LD_INT 1
19985: ST_TO_ADDR
// RespawnAttackVehicle ( RussianAttack , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
19986: LD_INT 4
19988: PPUSH
19989: LD_INT 5
19991: PPUSH
19992: LD_INT 4
19994: PUSH
19995: LD_INT 5
19997: PUSH
19998: LD_INT 6
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: LIST
20005: PUSH
20006: LD_OWVAR 67
20010: ARRAY
20011: PPUSH
20012: LD_EXP 16
20016: PPUSH
20017: LD_EXP 17
20021: PPUSH
20022: CALL_OW 12
20026: PPUSH
20027: LD_INT 3
20029: PPUSH
20030: LD_INT 1
20032: PPUSH
20033: LD_INT 1
20035: PPUSH
20036: LD_INT 42
20038: PUSH
20039: LD_INT 42
20041: PUSH
20042: LD_INT 43
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 42
20052: PUSH
20053: LD_INT 43
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 43
20062: PUSH
20063: LD_INT 43
20065: PUSH
20066: LD_INT 43
20068: PUSH
20069: LD_INT 44
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: LIST
20082: PUSH
20083: LD_OWVAR 67
20087: ARRAY
20088: PPUSH
20089: EMPTY
20090: PPUSH
20091: EMPTY
20092: PPUSH
20093: LD_INT 1
20095: PPUSH
20096: CALL 9661 0 11
// end ;
20100: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
20101: LD_EXP 47
20105: IFFALSE 20468
20107: GO 20109
20109: DISABLE
20110: LD_INT 0
20112: PPUSH
20113: PPUSH
20114: PPUSH
20115: PPUSH
// begin wait ( 0 0$20 ) ;
20116: LD_INT 700
20118: PPUSH
20119: CALL_OW 67
// uc_side := 5 ;
20123: LD_ADDR_OWVAR 20
20127: PUSH
20128: LD_INT 5
20130: ST_TO_ADDR
// uc_nation := 3 ;
20131: LD_ADDR_OWVAR 21
20135: PUSH
20136: LD_INT 3
20138: ST_TO_ADDR
// InitHc ;
20139: CALL_OW 19
// hc_importance := 0 ;
20143: LD_ADDR_OWVAR 32
20147: PUSH
20148: LD_INT 0
20150: ST_TO_ADDR
// tmp := [ ] ;
20151: LD_ADDR_VAR 0 2
20155: PUSH
20156: EMPTY
20157: ST_TO_ADDR
// PrepareHuman ( false , 2 , 6 ) ;
20158: LD_INT 0
20160: PPUSH
20161: LD_INT 2
20163: PPUSH
20164: LD_INT 6
20166: PPUSH
20167: CALL_OW 380
// eng := CreateHuman ;
20171: LD_ADDR_VAR 0 4
20175: PUSH
20176: CALL_OW 44
20180: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
20181: LD_VAR 0 4
20185: PPUSH
20186: LD_INT 78
20188: PPUSH
20189: LD_INT 2
20191: PPUSH
20192: LD_INT 4
20194: PPUSH
20195: LD_INT 0
20197: PPUSH
20198: CALL_OW 50
// for i = 1 to 2 + Difficulty do
20202: LD_ADDR_VAR 0 3
20206: PUSH
20207: DOUBLE
20208: LD_INT 1
20210: DEC
20211: ST_TO_ADDR
20212: LD_INT 2
20214: PUSH
20215: LD_OWVAR 67
20219: PLUS
20220: PUSH
20221: FOR_TO
20222: IFFALSE 20303
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
20224: LD_INT 0
20226: PPUSH
20227: LD_INT 1
20229: PPUSH
20230: LD_INT 4
20232: PUSH
20233: LD_INT 5
20235: PUSH
20236: LD_INT 6
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: LIST
20243: PUSH
20244: LD_OWVAR 67
20248: ARRAY
20249: PPUSH
20250: CALL_OW 380
// un := CreateHuman ;
20254: LD_ADDR_VAR 0 1
20258: PUSH
20259: CALL_OW 44
20263: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
20264: LD_VAR 0 1
20268: PPUSH
20269: LD_INT 78
20271: PPUSH
20272: LD_INT 2
20274: PPUSH
20275: LD_INT 4
20277: PPUSH
20278: LD_INT 0
20280: PPUSH
20281: CALL_OW 50
// tmp := tmp ^ un ;
20285: LD_ADDR_VAR 0 2
20289: PUSH
20290: LD_VAR 0 2
20294: PUSH
20295: LD_VAR 0 1
20299: ADD
20300: ST_TO_ADDR
// end ;
20301: GO 20221
20303: POP
20304: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
20305: LD_VAR 0 2
20309: PPUSH
20310: LD_INT 49
20312: PPUSH
20313: LD_INT 3
20315: PPUSH
20316: CALL_OW 111
// wait ( 0 0$2 ) ;
20320: LD_INT 70
20322: PPUSH
20323: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
20327: LD_VAR 0 4
20331: PPUSH
20332: LD_INT 49
20334: PPUSH
20335: LD_INT 3
20337: PPUSH
20338: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
20342: LD_VAR 0 4
20346: PPUSH
20347: LD_INT 4
20349: PPUSH
20350: CALL_OW 227
// wait ( 0 0$10 ) ;
20354: LD_INT 350
20356: PPUSH
20357: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20361: LD_INT 35
20363: PPUSH
20364: CALL_OW 67
// for i in tmp do
20368: LD_ADDR_VAR 0 3
20372: PUSH
20373: LD_VAR 0 2
20377: PUSH
20378: FOR_IN
20379: IFFALSE 20459
// if not IsOk ( i ) then
20381: LD_VAR 0 3
20385: PPUSH
20386: CALL_OW 302
20390: NOT
20391: IFFALSE 20411
// tmp := tmp diff i else
20393: LD_ADDR_VAR 0 2
20397: PUSH
20398: LD_VAR 0 2
20402: PUSH
20403: LD_VAR 0 3
20407: DIFF
20408: ST_TO_ADDR
20409: GO 20457
// if not HasTask ( i ) then
20411: LD_VAR 0 3
20415: PPUSH
20416: CALL_OW 314
20420: NOT
20421: IFFALSE 20457
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
20423: LD_VAR 0 3
20427: PPUSH
20428: LD_INT 22
20430: PUSH
20431: LD_INT 1
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PPUSH
20438: CALL_OW 69
20442: PPUSH
20443: LD_VAR 0 3
20447: PPUSH
20448: CALL_OW 74
20452: PPUSH
20453: CALL_OW 115
20457: GO 20378
20459: POP
20460: POP
// until not tmp ;
20461: LD_VAR 0 2
20465: NOT
20466: IFFALSE 20361
// end ; end_of_file
20468: PPOPN 4
20470: END
// every 0 0$1 trigger startTimer = 1 do
20471: LD_EXP 30
20475: PUSH
20476: LD_INT 1
20478: EQUAL
20479: IFFALSE 20609
20481: GO 20483
20483: DISABLE
// begin enable ;
20484: ENABLE
// if timerStatus = 1 then
20485: LD_EXP 29
20489: PUSH
20490: LD_INT 1
20492: EQUAL
20493: IFFALSE 20526
// begin timeToSupport = timeToSupport - 0 0$01 ;
20495: LD_ADDR_EXP 28
20499: PUSH
20500: LD_EXP 28
20504: PUSH
20505: LD_INT 35
20507: MINUS
20508: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
20509: LD_ADDR_OWVAR 47
20513: PUSH
20514: LD_STRING #Am04-1
20516: PUSH
20517: LD_EXP 28
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: ST_TO_ADDR
// end ; if timerStatus = 2 then
20526: LD_EXP 29
20530: PUSH
20531: LD_INT 2
20533: EQUAL
20534: IFFALSE 20567
// begin timeToSupport = timeToSupport - 0 0$01 ;
20536: LD_ADDR_EXP 28
20540: PUSH
20541: LD_EXP 28
20545: PUSH
20546: LD_INT 35
20548: MINUS
20549: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
20550: LD_ADDR_OWVAR 47
20554: PUSH
20555: LD_STRING #Am04-2
20557: PUSH
20558: LD_EXP 28
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: ST_TO_ADDR
// end ; if timerStatus = 3 then
20567: LD_EXP 29
20571: PUSH
20572: LD_INT 3
20574: EQUAL
20575: IFFALSE 20591
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
20577: LD_ADDR_EXP 27
20581: PUSH
20582: LD_EXP 27
20586: PUSH
20587: LD_INT 35
20589: MINUS
20590: ST_TO_ADDR
// end ; if timerStatus = 4 then
20591: LD_EXP 29
20595: PUSH
20596: LD_INT 4
20598: EQUAL
20599: IFFALSE 20609
// begin display_strings =  ;
20601: LD_ADDR_OWVAR 47
20605: PUSH
20606: LD_STRING 
20608: ST_TO_ADDR
// end ; end ; end_of_file
20609: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
20610: LD_INT 4
20612: PPUSH
20613: CALL_OW 301
20617: IFFALSE 20629
20619: GO 20621
20621: DISABLE
// YouLost ( Base ) ; end_of_file
20622: LD_STRING Base
20624: PPUSH
20625: CALL_OW 104
20629: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , tmp , p ;
20630: LD_EXP 15
20634: PPUSH
20635: CALL_OW 301
20639: PUSH
20640: LD_INT 22
20642: PUSH
20643: LD_INT 3
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 21
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PPUSH
20664: CALL_OW 69
20668: PUSH
20669: LD_INT 14
20671: PUSH
20672: LD_INT 13
20674: PUSH
20675: LD_INT 12
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: LIST
20682: PUSH
20683: LD_OWVAR 67
20687: ARRAY
20688: LESS
20689: AND
20690: IFFALSE 21276
20692: GO 20694
20694: DISABLE
20695: LD_INT 0
20697: PPUSH
20698: PPUSH
20699: PPUSH
// begin AIEnable = 0 ;
20700: LD_ADDR_EXP 37
20704: PUSH
20705: LD_INT 0
20707: ST_TO_ADDR
// escapeAvalaible = 1 ;
20708: LD_ADDR_EXP 40
20712: PUSH
20713: LD_INT 1
20715: ST_TO_ADDR
// Video ( true ) ;
20716: LD_INT 1
20718: PPUSH
20719: CALL 75826 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
20723: LD_INT 3
20725: PPUSH
20726: LD_INT 1
20728: PPUSH
20729: LD_INT 1
20731: PPUSH
20732: LD_INT 0
20734: PPUSH
20735: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
20739: LD_INT 6
20741: PPUSH
20742: LD_INT 1
20744: PPUSH
20745: LD_INT 1
20747: PPUSH
20748: LD_INT 0
20750: PPUSH
20751: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
20755: LD_INT 5
20757: PPUSH
20758: LD_INT 1
20760: PPUSH
20761: LD_INT 1
20763: PPUSH
20764: LD_INT 0
20766: PPUSH
20767: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
20771: LD_INT 3
20773: PPUSH
20774: LD_INT 1
20776: PPUSH
20777: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
20781: LD_INT 97
20783: PPUSH
20784: LD_INT 91
20786: PPUSH
20787: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
20791: LD_INT 22
20793: PUSH
20794: LD_INT 3
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 21
20803: PUSH
20804: LD_INT 1
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PPUSH
20815: CALL_OW 69
20819: PPUSH
20820: CALL_OW 121
// wait ( 0 0$01 ) ;
20824: LD_INT 35
20826: PPUSH
20827: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20831: LD_INT 22
20833: PUSH
20834: LD_INT 3
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 21
20843: PUSH
20844: LD_INT 1
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PPUSH
20855: CALL_OW 69
20859: PPUSH
20860: LD_INT 124
20862: PPUSH
20863: LD_INT 98
20865: PPUSH
20866: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
20870: LD_INT 22
20872: PUSH
20873: LD_INT 5
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 21
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PPUSH
20894: CALL_OW 69
20898: PPUSH
20899: CALL_OW 121
// wait ( 0 0$01 ) ;
20903: LD_INT 35
20905: PPUSH
20906: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20910: LD_INT 22
20912: PUSH
20913: LD_INT 5
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 21
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PPUSH
20934: CALL_OW 69
20938: PPUSH
20939: LD_INT 124
20941: PPUSH
20942: LD_INT 98
20944: PPUSH
20945: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
20949: LD_INT 22
20951: PUSH
20952: LD_INT 6
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 21
20961: PUSH
20962: LD_INT 1
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PPUSH
20973: CALL_OW 69
20977: PPUSH
20978: CALL_OW 121
// wait ( 0 0$01 ) ;
20982: LD_INT 35
20984: PPUSH
20985: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20989: LD_INT 22
20991: PUSH
20992: LD_INT 6
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 21
21001: PUSH
21002: LD_INT 1
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PPUSH
21013: CALL_OW 69
21017: PPUSH
21018: LD_INT 124
21020: PPUSH
21021: LD_INT 98
21023: PPUSH
21024: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
21028: LD_INT 22
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 21
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PPUSH
21052: CALL_OW 69
21056: PPUSH
21057: LD_INT 124
21059: PPUSH
21060: LD_INT 96
21062: PPUSH
21063: CALL_OW 114
// wait ( 0 0$1 ) ;
21067: LD_INT 35
21069: PPUSH
21070: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
21074: LD_INT 124
21076: PPUSH
21077: LD_INT 96
21079: PPUSH
21080: CALL_OW 84
// p := 0 0$0 ;
21084: LD_ADDR_VAR 0 3
21088: PUSH
21089: LD_INT 0
21091: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
21092: LD_ADDR_VAR 0 2
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 22
21102: PUSH
21103: LD_INT 3
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 22
21112: PUSH
21113: LD_INT 6
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 21
21127: PUSH
21128: LD_INT 1
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PPUSH
21139: CALL_OW 69
21143: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21144: LD_INT 35
21146: PPUSH
21147: CALL_OW 67
// p := p + 0 0$1 ;
21151: LD_ADDR_VAR 0 3
21155: PUSH
21156: LD_VAR 0 3
21160: PUSH
21161: LD_INT 35
21163: PLUS
21164: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
21165: LD_VAR 0 2
21169: PPUSH
21170: LD_INT 5
21172: PPUSH
21173: CALL_OW 113
// for i in tmp do
21177: LD_ADDR_VAR 0 1
21181: PUSH
21182: LD_VAR 0 2
21186: PUSH
21187: FOR_IN
21188: IFFALSE 21215
// if IsInArea ( tmp , RussianEscape ) then
21190: LD_VAR 0 2
21194: PPUSH
21195: LD_INT 5
21197: PPUSH
21198: CALL_OW 308
21202: IFFALSE 21213
// RemoveUnit ( i ) ;
21204: LD_VAR 0 1
21208: PPUSH
21209: CALL_OW 64
21213: GO 21187
21215: POP
21216: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
21217: LD_INT 23
21219: PUSH
21220: LD_INT 3
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 21
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 24
21239: PUSH
21240: LD_INT 250
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: LIST
21251: PPUSH
21252: CALL_OW 69
21256: PUSH
21257: LD_INT 0
21259: EQUAL
21260: PUSH
21261: LD_VAR 0 3
21265: PUSH
21266: LD_INT 245
21268: GREATEREQUAL
21269: OR
21270: IFFALSE 21144
// FinishMission ;
21272: CALL 21279 0 0
// end ;
21276: PPOPN 3
21278: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
21279: LD_INT 0
21281: PPUSH
21282: PPUSH
21283: PPUSH
21284: PPUSH
21285: PPUSH
// if not vehicleProduceCounter then
21286: LD_EXP 42
21290: NOT
21291: IFFALSE 21300
// SetAchievement ( ACH_INFANTRY ) ;
21293: LD_STRING ACH_INFANTRY
21295: PPUSH
21296: CALL_OW 543
// if tick <= 20 20$00 then
21300: LD_OWVAR 1
21304: PUSH
21305: LD_INT 42000
21307: LESSEQUAL
21308: IFFALSE 21324
// begin wait ( 3 ) ;
21310: LD_INT 3
21312: PPUSH
21313: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
21317: LD_STRING ACH_ASPEED_4
21319: PPUSH
21320: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
21324: LD_INT 22
21326: PPUSH
21327: CALL 21968 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
21331: LD_INT 69
21333: PPUSH
21334: LD_INT 1
21336: PPUSH
21337: CALL_OW 321
21341: PPUSH
21342: LD_STRING GatlingInGamma
21344: PPUSH
21345: CALL_OW 39
// m1 := false ;
21349: LD_ADDR_VAR 0 3
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
// m2 := false ;
21357: LD_ADDR_VAR 0 4
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// m3 := false ;
21365: LD_ADDR_VAR 0 5
21369: PUSH
21370: LD_INT 0
21372: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
21373: LD_EXP 34
21377: PUSH
21378: LD_INT 1
21380: EQUAL
21381: PUSH
21382: LD_EXP 35
21386: PUSH
21387: LD_INT 1
21389: EQUAL
21390: AND
21391: IFFALSE 21413
// begin AddMedal ( oil , 1 ) ;
21393: LD_STRING oil
21395: PPUSH
21396: LD_INT 1
21398: PPUSH
21399: CALL_OW 101
// m1 := true ;
21403: LD_ADDR_VAR 0 3
21407: PUSH
21408: LD_INT 1
21410: ST_TO_ADDR
// end else
21411: GO 21506
// begin if buildOil = 1 and buildPower = 0 then
21413: LD_EXP 34
21417: PUSH
21418: LD_INT 1
21420: EQUAL
21421: PUSH
21422: LD_EXP 35
21426: PUSH
21427: LD_INT 0
21429: EQUAL
21430: AND
21431: IFFALSE 21444
// AddMedal ( oil , - 1 ) ;
21433: LD_STRING oil
21435: PPUSH
21436: LD_INT 1
21438: NEG
21439: PPUSH
21440: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
21444: LD_EXP 34
21448: PUSH
21449: LD_INT 0
21451: EQUAL
21452: PUSH
21453: LD_EXP 35
21457: PUSH
21458: LD_INT 1
21460: EQUAL
21461: AND
21462: IFFALSE 21475
// AddMedal ( oil , - 2 ) ;
21464: LD_STRING oil
21466: PPUSH
21467: LD_INT 2
21469: NEG
21470: PPUSH
21471: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
21475: LD_EXP 34
21479: PUSH
21480: LD_INT 0
21482: EQUAL
21483: PUSH
21484: LD_EXP 35
21488: PUSH
21489: LD_INT 0
21491: EQUAL
21492: AND
21493: IFFALSE 21506
// AddMedal ( oil , - 3 ) ;
21495: LD_STRING oil
21497: PPUSH
21498: LD_INT 3
21500: NEG
21501: PPUSH
21502: CALL_OW 101
// end ; if lostCounter > 3 then
21506: LD_EXP 38
21510: PUSH
21511: LD_INT 3
21513: GREATER
21514: IFFALSE 21529
// AddMedal ( deaths , - 1 ) else
21516: LD_STRING deaths
21518: PPUSH
21519: LD_INT 1
21521: NEG
21522: PPUSH
21523: CALL_OW 101
21527: GO 21547
// begin AddMedal ( deaths , 1 ) ;
21529: LD_STRING deaths
21531: PPUSH
21532: LD_INT 1
21534: PPUSH
21535: CALL_OW 101
// m2 := true ;
21539: LD_ADDR_VAR 0 4
21543: PUSH
21544: LD_INT 1
21546: ST_TO_ADDR
// end ; if honor = 1 then
21547: LD_EXP 39
21551: PUSH
21552: LD_INT 1
21554: EQUAL
21555: IFFALSE 21577
// begin AddMedal ( honour , 1 ) ;
21557: LD_STRING honour
21559: PPUSH
21560: LD_INT 1
21562: PPUSH
21563: CALL_OW 101
// m3 := true ;
21567: LD_ADDR_VAR 0 5
21571: PUSH
21572: LD_INT 1
21574: ST_TO_ADDR
// end else
21575: GO 21588
// begin AddMedal ( honour , - 1 ) ;
21577: LD_STRING honour
21579: PPUSH
21580: LD_INT 1
21582: NEG
21583: PPUSH
21584: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
21588: LD_VAR 0 3
21592: PUSH
21593: LD_VAR 0 4
21597: AND
21598: PUSH
21599: LD_VAR 0 5
21603: AND
21604: PUSH
21605: LD_OWVAR 67
21609: PUSH
21610: LD_INT 3
21612: EQUAL
21613: AND
21614: IFFALSE 21626
// SetAchievementEX ( ACH_AMER , 4 ) ;
21616: LD_STRING ACH_AMER
21618: PPUSH
21619: LD_INT 4
21621: PPUSH
21622: CALL_OW 564
// GiveMedals ( Main ) ;
21626: LD_STRING Main
21628: PPUSH
21629: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
21633: LD_INT 22
21635: PUSH
21636: LD_INT 1
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 23
21645: PUSH
21646: LD_INT 1
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 21
21655: PUSH
21656: LD_INT 1
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: PPUSH
21668: CALL_OW 69
21672: PPUSH
21673: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21677: LD_EXP 1
21681: PPUSH
21682: LD_EXP 48
21686: PUSH
21687: LD_STRING JMM
21689: STR
21690: PPUSH
21691: CALL_OW 38
// if IsOK ( Bobby ) then
21695: LD_EXP 2
21699: PPUSH
21700: CALL_OW 302
21704: IFFALSE 21724
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21706: LD_EXP 2
21710: PPUSH
21711: LD_EXP 48
21715: PUSH
21716: LD_STRING Bobby
21718: STR
21719: PPUSH
21720: CALL_OW 38
// if IsOK ( Cyrus ) then
21724: LD_EXP 3
21728: PPUSH
21729: CALL_OW 302
21733: IFFALSE 21753
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21735: LD_EXP 3
21739: PPUSH
21740: LD_EXP 48
21744: PUSH
21745: LD_STRING Cyrus
21747: STR
21748: PPUSH
21749: CALL_OW 38
// if IsOK ( Lisa ) then
21753: LD_EXP 4
21757: PPUSH
21758: CALL_OW 302
21762: IFFALSE 21782
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21764: LD_EXP 4
21768: PPUSH
21769: LD_EXP 48
21773: PUSH
21774: LD_STRING Lisa
21776: STR
21777: PPUSH
21778: CALL_OW 38
// if IsOK ( Brown ) then
21782: LD_EXP 7
21786: PPUSH
21787: CALL_OW 302
21791: IFFALSE 21811
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
21793: LD_EXP 7
21797: PPUSH
21798: LD_EXP 48
21802: PUSH
21803: LD_STRING Brown
21805: STR
21806: PPUSH
21807: CALL_OW 38
// if not IsDead ( Donaldson ) then
21811: LD_EXP 13
21815: PPUSH
21816: CALL_OW 301
21820: NOT
21821: IFFALSE 21841
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21823: LD_EXP 13
21827: PPUSH
21828: LD_EXP 48
21832: PUSH
21833: LD_STRING Donaldson
21835: STR
21836: PPUSH
21837: CALL_OW 38
// if not IsDead ( Frank ) then
21841: LD_EXP 5
21845: PPUSH
21846: CALL_OW 301
21850: NOT
21851: IFFALSE 21871
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
21853: LD_EXP 5
21857: PPUSH
21858: LD_EXP 48
21862: PUSH
21863: LD_STRING Frank
21865: STR
21866: PPUSH
21867: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
21871: LD_INT 50
21873: PUSH
21874: EMPTY
21875: LIST
21876: PUSH
21877: LD_INT 22
21879: PUSH
21880: LD_INT 1
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 21
21889: PUSH
21890: LD_INT 1
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: LIST
21901: PPUSH
21902: CALL_OW 69
21906: PUSH
21907: LD_EXP 1
21911: PUSH
21912: LD_EXP 2
21916: PUSH
21917: LD_EXP 3
21921: PUSH
21922: LD_EXP 4
21926: PUSH
21927: LD_EXP 7
21931: PUSH
21932: LD_EXP 13
21936: PUSH
21937: LD_EXP 5
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: DIFF
21951: PPUSH
21952: LD_STRING 04_other_survivors
21954: PPUSH
21955: CALL_OW 38
// YouWin ;
21959: CALL_OW 103
// end ;
21963: LD_VAR 0 1
21967: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
21968: LD_INT 0
21970: PPUSH
21971: PPUSH
21972: PPUSH
21973: PPUSH
// gammaBase = [ ] ;
21974: LD_ADDR_VAR 0 4
21978: PUSH
21979: EMPTY
21980: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
21981: LD_ADDR_VAR 0 5
21985: PUSH
21986: LD_VAR 0 1
21990: PPUSH
21991: LD_INT 22
21993: PUSH
21994: LD_INT 1
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 21
22003: PUSH
22004: LD_INT 3
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PPUSH
22015: CALL_OW 70
22019: ST_TO_ADDR
// for i in buildings do
22020: LD_ADDR_VAR 0 3
22024: PUSH
22025: LD_VAR 0 5
22029: PUSH
22030: FOR_IN
22031: IFFALSE 22368
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
22033: LD_VAR 0 3
22037: PPUSH
22038: CALL_OW 266
22042: PUSH
22043: LD_INT 6
22045: PUSH
22046: LD_INT 7
22048: PUSH
22049: LD_INT 8
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: LIST
22056: IN
22057: IFFALSE 22171
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
22059: LD_ADDR_VAR 0 4
22063: PUSH
22064: LD_VAR 0 4
22068: PUSH
22069: LD_VAR 0 3
22073: PPUSH
22074: CALL_OW 266
22078: PUSH
22079: LD_VAR 0 3
22083: PPUSH
22084: CALL_OW 250
22088: PUSH
22089: LD_VAR 0 3
22093: PPUSH
22094: CALL_OW 251
22098: PUSH
22099: LD_VAR 0 3
22103: PPUSH
22104: CALL_OW 254
22108: PUSH
22109: LD_VAR 0 3
22113: PPUSH
22114: CALL_OW 267
22118: PUSH
22119: LD_VAR 0 3
22123: PPUSH
22124: CALL_OW 248
22128: PUSH
22129: LD_VAR 0 3
22133: PPUSH
22134: LD_INT 1
22136: PPUSH
22137: CALL_OW 268
22141: PUSH
22142: LD_VAR 0 3
22146: PPUSH
22147: LD_INT 2
22149: PPUSH
22150: CALL_OW 268
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: PUSH
22165: EMPTY
22166: LIST
22167: ADD
22168: ST_TO_ADDR
22169: GO 22366
// if GetBType ( i ) in [ b_bunker ] then
22171: LD_VAR 0 3
22175: PPUSH
22176: CALL_OW 266
22180: PUSH
22181: LD_INT 32
22183: PUSH
22184: EMPTY
22185: LIST
22186: IN
22187: IFFALSE 22284
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22189: LD_ADDR_VAR 0 4
22193: PUSH
22194: LD_VAR 0 4
22198: PUSH
22199: LD_VAR 0 3
22203: PPUSH
22204: CALL_OW 266
22208: PUSH
22209: LD_VAR 0 3
22213: PPUSH
22214: CALL_OW 250
22218: PUSH
22219: LD_VAR 0 3
22223: PPUSH
22224: CALL_OW 251
22228: PUSH
22229: LD_VAR 0 3
22233: PPUSH
22234: CALL_OW 254
22238: PUSH
22239: LD_VAR 0 3
22243: PPUSH
22244: CALL_OW 267
22248: PUSH
22249: LD_VAR 0 3
22253: PPUSH
22254: CALL_OW 248
22258: PUSH
22259: LD_VAR 0 3
22263: PPUSH
22264: CALL_OW 269
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: PUSH
22278: EMPTY
22279: LIST
22280: ADD
22281: ST_TO_ADDR
22282: GO 22366
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
22284: LD_ADDR_VAR 0 4
22288: PUSH
22289: LD_VAR 0 4
22293: PUSH
22294: LD_VAR 0 3
22298: PPUSH
22299: CALL_OW 266
22303: PUSH
22304: LD_VAR 0 3
22308: PPUSH
22309: CALL_OW 250
22313: PUSH
22314: LD_VAR 0 3
22318: PPUSH
22319: CALL_OW 251
22323: PUSH
22324: LD_VAR 0 3
22328: PPUSH
22329: CALL_OW 254
22333: PUSH
22334: LD_VAR 0 3
22338: PPUSH
22339: CALL_OW 267
22343: PUSH
22344: LD_VAR 0 3
22348: PPUSH
22349: CALL_OW 248
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: PUSH
22362: EMPTY
22363: LIST
22364: ADD
22365: ST_TO_ADDR
// end ;
22366: GO 22030
22368: POP
22369: POP
// SaveVariable ( gammaBase , GammaBase ) ;
22370: LD_VAR 0 4
22374: PPUSH
22375: LD_STRING GammaBase
22377: PPUSH
22378: CALL_OW 39
// end ; end_of_file
22382: LD_VAR 0 2
22386: RET
// every 1 1$15 do
22387: GO 22389
22389: DISABLE
// begin if supply <= 13 and supply > 7 then
22390: LD_EXP 36
22394: PUSH
22395: LD_INT 13
22397: LESSEQUAL
22398: PUSH
22399: LD_EXP 36
22403: PUSH
22404: LD_INT 7
22406: GREATER
22407: AND
22408: IFFALSE 22431
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
22410: LD_INT 3
22412: PPUSH
22413: LD_INT 5
22415: PPUSH
22416: CALL_OW 12
22420: PPUSH
22421: LD_INT 18
22423: PPUSH
22424: LD_INT 1
22426: PPUSH
22427: CALL_OW 55
// if supply <= 7 and supply > 4 then
22431: LD_EXP 36
22435: PUSH
22436: LD_INT 7
22438: LESSEQUAL
22439: PUSH
22440: LD_EXP 36
22444: PUSH
22445: LD_INT 4
22447: GREATER
22448: AND
22449: IFFALSE 22472
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
22451: LD_INT 3
22453: PPUSH
22454: LD_INT 5
22456: PPUSH
22457: CALL_OW 12
22461: PPUSH
22462: LD_INT 19
22464: PPUSH
22465: LD_INT 1
22467: PPUSH
22468: CALL_OW 55
// if supply <= 4 and supply > 0 then
22472: LD_EXP 36
22476: PUSH
22477: LD_INT 4
22479: LESSEQUAL
22480: PUSH
22481: LD_EXP 36
22485: PUSH
22486: LD_INT 0
22488: GREATER
22489: AND
22490: IFFALSE 22513
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
22492: LD_INT 3
22494: PPUSH
22495: LD_INT 5
22497: PPUSH
22498: CALL_OW 12
22502: PPUSH
22503: LD_INT 20
22505: PPUSH
22506: LD_INT 1
22508: PPUSH
22509: CALL_OW 55
// if supply > 0 then
22513: LD_EXP 36
22517: PUSH
22518: LD_INT 0
22520: GREATER
22521: IFFALSE 22538
// begin supply = supply - 1 ;
22523: LD_ADDR_EXP 36
22527: PUSH
22528: LD_EXP 36
22532: PUSH
22533: LD_INT 1
22535: MINUS
22536: ST_TO_ADDR
// enable ;
22537: ENABLE
// end ; end ; end_of_file
22538: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
22539: LD_INT 0
22541: PPUSH
// ar_miner := 81 ;
22542: LD_ADDR_EXP 59
22546: PUSH
22547: LD_INT 81
22549: ST_TO_ADDR
// ar_crane := 88 ;
22550: LD_ADDR_EXP 58
22554: PUSH
22555: LD_INT 88
22557: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22558: LD_ADDR_EXP 53
22562: PUSH
22563: LD_INT 89
22565: ST_TO_ADDR
// us_hack := 99 ;
22566: LD_ADDR_EXP 54
22570: PUSH
22571: LD_INT 99
22573: ST_TO_ADDR
// us_artillery := 97 ;
22574: LD_ADDR_EXP 55
22578: PUSH
22579: LD_INT 97
22581: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22582: LD_ADDR_EXP 56
22586: PUSH
22587: LD_INT 91
22589: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
22590: LD_ADDR_EXP 57
22594: PUSH
22595: LD_INT 92
22597: ST_TO_ADDR
// ru_radar := 98 ;
22598: LD_ADDR_EXP 52
22602: PUSH
22603: LD_INT 98
22605: ST_TO_ADDR
// tech_Artillery := 80 ;
22606: LD_ADDR_EXP 60
22610: PUSH
22611: LD_INT 80
22613: ST_TO_ADDR
// tech_RadMat := 81 ;
22614: LD_ADDR_EXP 61
22618: PUSH
22619: LD_INT 81
22621: ST_TO_ADDR
// tech_BasicTools := 82 ;
22622: LD_ADDR_EXP 62
22626: PUSH
22627: LD_INT 82
22629: ST_TO_ADDR
// tech_Cargo := 83 ;
22630: LD_ADDR_EXP 63
22634: PUSH
22635: LD_INT 83
22637: ST_TO_ADDR
// tech_Track := 84 ;
22638: LD_ADDR_EXP 64
22642: PUSH
22643: LD_INT 84
22645: ST_TO_ADDR
// tech_Crane := 85 ;
22646: LD_ADDR_EXP 65
22650: PUSH
22651: LD_INT 85
22653: ST_TO_ADDR
// tech_Bulldozer := 86 ;
22654: LD_ADDR_EXP 66
22658: PUSH
22659: LD_INT 86
22661: ST_TO_ADDR
// tech_Hovercraft := 87 ;
22662: LD_ADDR_EXP 67
22666: PUSH
22667: LD_INT 87
22669: ST_TO_ADDR
// end ;
22670: LD_VAR 0 1
22674: RET
// every 1 do
22675: GO 22677
22677: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
22678: CALL 22539 0 0
22682: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
22683: LD_VAR 0 2
22687: PUSH
22688: LD_INT 100
22690: EQUAL
22691: IFFALSE 23640
// begin if not StreamModeActive then
22693: LD_EXP 68
22697: NOT
22698: IFFALSE 22708
// StreamModeActive := true ;
22700: LD_ADDR_EXP 68
22704: PUSH
22705: LD_INT 1
22707: ST_TO_ADDR
// if p3 = 0 then
22708: LD_VAR 0 3
22712: PUSH
22713: LD_INT 0
22715: EQUAL
22716: IFFALSE 22722
// InitStreamMode ;
22718: CALL 23798 0 0
// if p3 = 1 then
22722: LD_VAR 0 3
22726: PUSH
22727: LD_INT 1
22729: EQUAL
22730: IFFALSE 22740
// sRocket := true ;
22732: LD_ADDR_EXP 73
22736: PUSH
22737: LD_INT 1
22739: ST_TO_ADDR
// if p3 = 2 then
22740: LD_VAR 0 3
22744: PUSH
22745: LD_INT 2
22747: EQUAL
22748: IFFALSE 22758
// sSpeed := true ;
22750: LD_ADDR_EXP 72
22754: PUSH
22755: LD_INT 1
22757: ST_TO_ADDR
// if p3 = 3 then
22758: LD_VAR 0 3
22762: PUSH
22763: LD_INT 3
22765: EQUAL
22766: IFFALSE 22776
// sEngine := true ;
22768: LD_ADDR_EXP 74
22772: PUSH
22773: LD_INT 1
22775: ST_TO_ADDR
// if p3 = 4 then
22776: LD_VAR 0 3
22780: PUSH
22781: LD_INT 4
22783: EQUAL
22784: IFFALSE 22794
// sSpec := true ;
22786: LD_ADDR_EXP 71
22790: PUSH
22791: LD_INT 1
22793: ST_TO_ADDR
// if p3 = 5 then
22794: LD_VAR 0 3
22798: PUSH
22799: LD_INT 5
22801: EQUAL
22802: IFFALSE 22812
// sLevel := true ;
22804: LD_ADDR_EXP 75
22808: PUSH
22809: LD_INT 1
22811: ST_TO_ADDR
// if p3 = 6 then
22812: LD_VAR 0 3
22816: PUSH
22817: LD_INT 6
22819: EQUAL
22820: IFFALSE 22830
// sArmoury := true ;
22822: LD_ADDR_EXP 76
22826: PUSH
22827: LD_INT 1
22829: ST_TO_ADDR
// if p3 = 7 then
22830: LD_VAR 0 3
22834: PUSH
22835: LD_INT 7
22837: EQUAL
22838: IFFALSE 22848
// sRadar := true ;
22840: LD_ADDR_EXP 77
22844: PUSH
22845: LD_INT 1
22847: ST_TO_ADDR
// if p3 = 8 then
22848: LD_VAR 0 3
22852: PUSH
22853: LD_INT 8
22855: EQUAL
22856: IFFALSE 22866
// sBunker := true ;
22858: LD_ADDR_EXP 78
22862: PUSH
22863: LD_INT 1
22865: ST_TO_ADDR
// if p3 = 9 then
22866: LD_VAR 0 3
22870: PUSH
22871: LD_INT 9
22873: EQUAL
22874: IFFALSE 22884
// sHack := true ;
22876: LD_ADDR_EXP 79
22880: PUSH
22881: LD_INT 1
22883: ST_TO_ADDR
// if p3 = 10 then
22884: LD_VAR 0 3
22888: PUSH
22889: LD_INT 10
22891: EQUAL
22892: IFFALSE 22902
// sFire := true ;
22894: LD_ADDR_EXP 80
22898: PUSH
22899: LD_INT 1
22901: ST_TO_ADDR
// if p3 = 11 then
22902: LD_VAR 0 3
22906: PUSH
22907: LD_INT 11
22909: EQUAL
22910: IFFALSE 22920
// sRefresh := true ;
22912: LD_ADDR_EXP 81
22916: PUSH
22917: LD_INT 1
22919: ST_TO_ADDR
// if p3 = 12 then
22920: LD_VAR 0 3
22924: PUSH
22925: LD_INT 12
22927: EQUAL
22928: IFFALSE 22938
// sExp := true ;
22930: LD_ADDR_EXP 82
22934: PUSH
22935: LD_INT 1
22937: ST_TO_ADDR
// if p3 = 13 then
22938: LD_VAR 0 3
22942: PUSH
22943: LD_INT 13
22945: EQUAL
22946: IFFALSE 22956
// sDepot := true ;
22948: LD_ADDR_EXP 83
22952: PUSH
22953: LD_INT 1
22955: ST_TO_ADDR
// if p3 = 14 then
22956: LD_VAR 0 3
22960: PUSH
22961: LD_INT 14
22963: EQUAL
22964: IFFALSE 22974
// sFlag := true ;
22966: LD_ADDR_EXP 84
22970: PUSH
22971: LD_INT 1
22973: ST_TO_ADDR
// if p3 = 15 then
22974: LD_VAR 0 3
22978: PUSH
22979: LD_INT 15
22981: EQUAL
22982: IFFALSE 22992
// sKamikadze := true ;
22984: LD_ADDR_EXP 92
22988: PUSH
22989: LD_INT 1
22991: ST_TO_ADDR
// if p3 = 16 then
22992: LD_VAR 0 3
22996: PUSH
22997: LD_INT 16
22999: EQUAL
23000: IFFALSE 23010
// sTroll := true ;
23002: LD_ADDR_EXP 93
23006: PUSH
23007: LD_INT 1
23009: ST_TO_ADDR
// if p3 = 17 then
23010: LD_VAR 0 3
23014: PUSH
23015: LD_INT 17
23017: EQUAL
23018: IFFALSE 23028
// sSlow := true ;
23020: LD_ADDR_EXP 94
23024: PUSH
23025: LD_INT 1
23027: ST_TO_ADDR
// if p3 = 18 then
23028: LD_VAR 0 3
23032: PUSH
23033: LD_INT 18
23035: EQUAL
23036: IFFALSE 23046
// sLack := true ;
23038: LD_ADDR_EXP 95
23042: PUSH
23043: LD_INT 1
23045: ST_TO_ADDR
// if p3 = 19 then
23046: LD_VAR 0 3
23050: PUSH
23051: LD_INT 19
23053: EQUAL
23054: IFFALSE 23064
// sTank := true ;
23056: LD_ADDR_EXP 97
23060: PUSH
23061: LD_INT 1
23063: ST_TO_ADDR
// if p3 = 20 then
23064: LD_VAR 0 3
23068: PUSH
23069: LD_INT 20
23071: EQUAL
23072: IFFALSE 23082
// sRemote := true ;
23074: LD_ADDR_EXP 98
23078: PUSH
23079: LD_INT 1
23081: ST_TO_ADDR
// if p3 = 21 then
23082: LD_VAR 0 3
23086: PUSH
23087: LD_INT 21
23089: EQUAL
23090: IFFALSE 23100
// sPowell := true ;
23092: LD_ADDR_EXP 99
23096: PUSH
23097: LD_INT 1
23099: ST_TO_ADDR
// if p3 = 22 then
23100: LD_VAR 0 3
23104: PUSH
23105: LD_INT 22
23107: EQUAL
23108: IFFALSE 23118
// sTeleport := true ;
23110: LD_ADDR_EXP 102
23114: PUSH
23115: LD_INT 1
23117: ST_TO_ADDR
// if p3 = 23 then
23118: LD_VAR 0 3
23122: PUSH
23123: LD_INT 23
23125: EQUAL
23126: IFFALSE 23136
// sOilTower := true ;
23128: LD_ADDR_EXP 104
23132: PUSH
23133: LD_INT 1
23135: ST_TO_ADDR
// if p3 = 24 then
23136: LD_VAR 0 3
23140: PUSH
23141: LD_INT 24
23143: EQUAL
23144: IFFALSE 23154
// sShovel := true ;
23146: LD_ADDR_EXP 105
23150: PUSH
23151: LD_INT 1
23153: ST_TO_ADDR
// if p3 = 25 then
23154: LD_VAR 0 3
23158: PUSH
23159: LD_INT 25
23161: EQUAL
23162: IFFALSE 23172
// sSheik := true ;
23164: LD_ADDR_EXP 106
23168: PUSH
23169: LD_INT 1
23171: ST_TO_ADDR
// if p3 = 26 then
23172: LD_VAR 0 3
23176: PUSH
23177: LD_INT 26
23179: EQUAL
23180: IFFALSE 23190
// sEarthquake := true ;
23182: LD_ADDR_EXP 108
23186: PUSH
23187: LD_INT 1
23189: ST_TO_ADDR
// if p3 = 27 then
23190: LD_VAR 0 3
23194: PUSH
23195: LD_INT 27
23197: EQUAL
23198: IFFALSE 23208
// sAI := true ;
23200: LD_ADDR_EXP 109
23204: PUSH
23205: LD_INT 1
23207: ST_TO_ADDR
// if p3 = 28 then
23208: LD_VAR 0 3
23212: PUSH
23213: LD_INT 28
23215: EQUAL
23216: IFFALSE 23226
// sCargo := true ;
23218: LD_ADDR_EXP 112
23222: PUSH
23223: LD_INT 1
23225: ST_TO_ADDR
// if p3 = 29 then
23226: LD_VAR 0 3
23230: PUSH
23231: LD_INT 29
23233: EQUAL
23234: IFFALSE 23244
// sDLaser := true ;
23236: LD_ADDR_EXP 113
23240: PUSH
23241: LD_INT 1
23243: ST_TO_ADDR
// if p3 = 30 then
23244: LD_VAR 0 3
23248: PUSH
23249: LD_INT 30
23251: EQUAL
23252: IFFALSE 23262
// sExchange := true ;
23254: LD_ADDR_EXP 114
23258: PUSH
23259: LD_INT 1
23261: ST_TO_ADDR
// if p3 = 31 then
23262: LD_VAR 0 3
23266: PUSH
23267: LD_INT 31
23269: EQUAL
23270: IFFALSE 23280
// sFac := true ;
23272: LD_ADDR_EXP 115
23276: PUSH
23277: LD_INT 1
23279: ST_TO_ADDR
// if p3 = 32 then
23280: LD_VAR 0 3
23284: PUSH
23285: LD_INT 32
23287: EQUAL
23288: IFFALSE 23298
// sPower := true ;
23290: LD_ADDR_EXP 116
23294: PUSH
23295: LD_INT 1
23297: ST_TO_ADDR
// if p3 = 33 then
23298: LD_VAR 0 3
23302: PUSH
23303: LD_INT 33
23305: EQUAL
23306: IFFALSE 23316
// sRandom := true ;
23308: LD_ADDR_EXP 117
23312: PUSH
23313: LD_INT 1
23315: ST_TO_ADDR
// if p3 = 34 then
23316: LD_VAR 0 3
23320: PUSH
23321: LD_INT 34
23323: EQUAL
23324: IFFALSE 23334
// sShield := true ;
23326: LD_ADDR_EXP 118
23330: PUSH
23331: LD_INT 1
23333: ST_TO_ADDR
// if p3 = 35 then
23334: LD_VAR 0 3
23338: PUSH
23339: LD_INT 35
23341: EQUAL
23342: IFFALSE 23352
// sTime := true ;
23344: LD_ADDR_EXP 119
23348: PUSH
23349: LD_INT 1
23351: ST_TO_ADDR
// if p3 = 36 then
23352: LD_VAR 0 3
23356: PUSH
23357: LD_INT 36
23359: EQUAL
23360: IFFALSE 23370
// sTools := true ;
23362: LD_ADDR_EXP 120
23366: PUSH
23367: LD_INT 1
23369: ST_TO_ADDR
// if p3 = 101 then
23370: LD_VAR 0 3
23374: PUSH
23375: LD_INT 101
23377: EQUAL
23378: IFFALSE 23388
// sSold := true ;
23380: LD_ADDR_EXP 85
23384: PUSH
23385: LD_INT 1
23387: ST_TO_ADDR
// if p3 = 102 then
23388: LD_VAR 0 3
23392: PUSH
23393: LD_INT 102
23395: EQUAL
23396: IFFALSE 23406
// sDiff := true ;
23398: LD_ADDR_EXP 86
23402: PUSH
23403: LD_INT 1
23405: ST_TO_ADDR
// if p3 = 103 then
23406: LD_VAR 0 3
23410: PUSH
23411: LD_INT 103
23413: EQUAL
23414: IFFALSE 23424
// sFog := true ;
23416: LD_ADDR_EXP 89
23420: PUSH
23421: LD_INT 1
23423: ST_TO_ADDR
// if p3 = 104 then
23424: LD_VAR 0 3
23428: PUSH
23429: LD_INT 104
23431: EQUAL
23432: IFFALSE 23442
// sReset := true ;
23434: LD_ADDR_EXP 90
23438: PUSH
23439: LD_INT 1
23441: ST_TO_ADDR
// if p3 = 105 then
23442: LD_VAR 0 3
23446: PUSH
23447: LD_INT 105
23449: EQUAL
23450: IFFALSE 23460
// sSun := true ;
23452: LD_ADDR_EXP 91
23456: PUSH
23457: LD_INT 1
23459: ST_TO_ADDR
// if p3 = 106 then
23460: LD_VAR 0 3
23464: PUSH
23465: LD_INT 106
23467: EQUAL
23468: IFFALSE 23478
// sTiger := true ;
23470: LD_ADDR_EXP 87
23474: PUSH
23475: LD_INT 1
23477: ST_TO_ADDR
// if p3 = 107 then
23478: LD_VAR 0 3
23482: PUSH
23483: LD_INT 107
23485: EQUAL
23486: IFFALSE 23496
// sBomb := true ;
23488: LD_ADDR_EXP 88
23492: PUSH
23493: LD_INT 1
23495: ST_TO_ADDR
// if p3 = 108 then
23496: LD_VAR 0 3
23500: PUSH
23501: LD_INT 108
23503: EQUAL
23504: IFFALSE 23514
// sWound := true ;
23506: LD_ADDR_EXP 96
23510: PUSH
23511: LD_INT 1
23513: ST_TO_ADDR
// if p3 = 109 then
23514: LD_VAR 0 3
23518: PUSH
23519: LD_INT 109
23521: EQUAL
23522: IFFALSE 23532
// sBetray := true ;
23524: LD_ADDR_EXP 100
23528: PUSH
23529: LD_INT 1
23531: ST_TO_ADDR
// if p3 = 110 then
23532: LD_VAR 0 3
23536: PUSH
23537: LD_INT 110
23539: EQUAL
23540: IFFALSE 23550
// sContamin := true ;
23542: LD_ADDR_EXP 101
23546: PUSH
23547: LD_INT 1
23549: ST_TO_ADDR
// if p3 = 111 then
23550: LD_VAR 0 3
23554: PUSH
23555: LD_INT 111
23557: EQUAL
23558: IFFALSE 23568
// sOil := true ;
23560: LD_ADDR_EXP 103
23564: PUSH
23565: LD_INT 1
23567: ST_TO_ADDR
// if p3 = 112 then
23568: LD_VAR 0 3
23572: PUSH
23573: LD_INT 112
23575: EQUAL
23576: IFFALSE 23586
// sStu := true ;
23578: LD_ADDR_EXP 107
23582: PUSH
23583: LD_INT 1
23585: ST_TO_ADDR
// if p3 = 113 then
23586: LD_VAR 0 3
23590: PUSH
23591: LD_INT 113
23593: EQUAL
23594: IFFALSE 23604
// sBazooka := true ;
23596: LD_ADDR_EXP 110
23600: PUSH
23601: LD_INT 1
23603: ST_TO_ADDR
// if p3 = 114 then
23604: LD_VAR 0 3
23608: PUSH
23609: LD_INT 114
23611: EQUAL
23612: IFFALSE 23622
// sMortar := true ;
23614: LD_ADDR_EXP 111
23618: PUSH
23619: LD_INT 1
23621: ST_TO_ADDR
// if p3 = 115 then
23622: LD_VAR 0 3
23626: PUSH
23627: LD_INT 115
23629: EQUAL
23630: IFFALSE 23640
// sRanger := true ;
23632: LD_ADDR_EXP 121
23636: PUSH
23637: LD_INT 1
23639: ST_TO_ADDR
// end ; if p2 = 101 then
23640: LD_VAR 0 2
23644: PUSH
23645: LD_INT 101
23647: EQUAL
23648: IFFALSE 23776
// begin case p3 of 1 :
23650: LD_VAR 0 3
23654: PUSH
23655: LD_INT 1
23657: DOUBLE
23658: EQUAL
23659: IFTRUE 23663
23661: GO 23670
23663: POP
// hHackUnlimitedResources ; 2 :
23664: CALL 34811 0 0
23668: GO 23776
23670: LD_INT 2
23672: DOUBLE
23673: EQUAL
23674: IFTRUE 23678
23676: GO 23685
23678: POP
// hHackSetLevel10 ; 3 :
23679: CALL 34944 0 0
23683: GO 23776
23685: LD_INT 3
23687: DOUBLE
23688: EQUAL
23689: IFTRUE 23693
23691: GO 23700
23693: POP
// hHackSetLevel10YourUnits ; 4 :
23694: CALL 35029 0 0
23698: GO 23776
23700: LD_INT 4
23702: DOUBLE
23703: EQUAL
23704: IFTRUE 23708
23706: GO 23715
23708: POP
// hHackInvincible ; 5 :
23709: CALL 35477 0 0
23713: GO 23776
23715: LD_INT 5
23717: DOUBLE
23718: EQUAL
23719: IFTRUE 23723
23721: GO 23730
23723: POP
// hHackInvisible ; 6 :
23724: CALL 35588 0 0
23728: GO 23776
23730: LD_INT 6
23732: DOUBLE
23733: EQUAL
23734: IFTRUE 23738
23736: GO 23745
23738: POP
// hHackChangeYourSide ; 7 :
23739: CALL 35645 0 0
23743: GO 23776
23745: LD_INT 7
23747: DOUBLE
23748: EQUAL
23749: IFTRUE 23753
23751: GO 23760
23753: POP
// hHackChangeUnitSide ; 8 :
23754: CALL 35687 0 0
23758: GO 23776
23760: LD_INT 8
23762: DOUBLE
23763: EQUAL
23764: IFTRUE 23768
23766: GO 23775
23768: POP
// hHackFog ; end ;
23769: CALL 35788 0 0
23773: GO 23776
23775: POP
// end ; end ;
23776: PPOPN 6
23778: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
23779: GO 23781
23781: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
23782: LD_STRING initStreamRollete();
23784: PPUSH
23785: CALL_OW 559
// InitStreamMode ;
23789: CALL 23798 0 0
// DefineStreamItems ( ) ;
23793: CALL 24238 0 0
// end ;
23797: END
// function InitStreamMode ; begin
23798: LD_INT 0
23800: PPUSH
// streamModeActive := false ;
23801: LD_ADDR_EXP 68
23805: PUSH
23806: LD_INT 0
23808: ST_TO_ADDR
// normalCounter := 36 ;
23809: LD_ADDR_EXP 69
23813: PUSH
23814: LD_INT 36
23816: ST_TO_ADDR
// hardcoreCounter := 16 ;
23817: LD_ADDR_EXP 70
23821: PUSH
23822: LD_INT 16
23824: ST_TO_ADDR
// sRocket := false ;
23825: LD_ADDR_EXP 73
23829: PUSH
23830: LD_INT 0
23832: ST_TO_ADDR
// sSpeed := false ;
23833: LD_ADDR_EXP 72
23837: PUSH
23838: LD_INT 0
23840: ST_TO_ADDR
// sEngine := false ;
23841: LD_ADDR_EXP 74
23845: PUSH
23846: LD_INT 0
23848: ST_TO_ADDR
// sSpec := false ;
23849: LD_ADDR_EXP 71
23853: PUSH
23854: LD_INT 0
23856: ST_TO_ADDR
// sLevel := false ;
23857: LD_ADDR_EXP 75
23861: PUSH
23862: LD_INT 0
23864: ST_TO_ADDR
// sArmoury := false ;
23865: LD_ADDR_EXP 76
23869: PUSH
23870: LD_INT 0
23872: ST_TO_ADDR
// sRadar := false ;
23873: LD_ADDR_EXP 77
23877: PUSH
23878: LD_INT 0
23880: ST_TO_ADDR
// sBunker := false ;
23881: LD_ADDR_EXP 78
23885: PUSH
23886: LD_INT 0
23888: ST_TO_ADDR
// sHack := false ;
23889: LD_ADDR_EXP 79
23893: PUSH
23894: LD_INT 0
23896: ST_TO_ADDR
// sFire := false ;
23897: LD_ADDR_EXP 80
23901: PUSH
23902: LD_INT 0
23904: ST_TO_ADDR
// sRefresh := false ;
23905: LD_ADDR_EXP 81
23909: PUSH
23910: LD_INT 0
23912: ST_TO_ADDR
// sExp := false ;
23913: LD_ADDR_EXP 82
23917: PUSH
23918: LD_INT 0
23920: ST_TO_ADDR
// sDepot := false ;
23921: LD_ADDR_EXP 83
23925: PUSH
23926: LD_INT 0
23928: ST_TO_ADDR
// sFlag := false ;
23929: LD_ADDR_EXP 84
23933: PUSH
23934: LD_INT 0
23936: ST_TO_ADDR
// sKamikadze := false ;
23937: LD_ADDR_EXP 92
23941: PUSH
23942: LD_INT 0
23944: ST_TO_ADDR
// sTroll := false ;
23945: LD_ADDR_EXP 93
23949: PUSH
23950: LD_INT 0
23952: ST_TO_ADDR
// sSlow := false ;
23953: LD_ADDR_EXP 94
23957: PUSH
23958: LD_INT 0
23960: ST_TO_ADDR
// sLack := false ;
23961: LD_ADDR_EXP 95
23965: PUSH
23966: LD_INT 0
23968: ST_TO_ADDR
// sTank := false ;
23969: LD_ADDR_EXP 97
23973: PUSH
23974: LD_INT 0
23976: ST_TO_ADDR
// sRemote := false ;
23977: LD_ADDR_EXP 98
23981: PUSH
23982: LD_INT 0
23984: ST_TO_ADDR
// sPowell := false ;
23985: LD_ADDR_EXP 99
23989: PUSH
23990: LD_INT 0
23992: ST_TO_ADDR
// sTeleport := false ;
23993: LD_ADDR_EXP 102
23997: PUSH
23998: LD_INT 0
24000: ST_TO_ADDR
// sOilTower := false ;
24001: LD_ADDR_EXP 104
24005: PUSH
24006: LD_INT 0
24008: ST_TO_ADDR
// sShovel := false ;
24009: LD_ADDR_EXP 105
24013: PUSH
24014: LD_INT 0
24016: ST_TO_ADDR
// sSheik := false ;
24017: LD_ADDR_EXP 106
24021: PUSH
24022: LD_INT 0
24024: ST_TO_ADDR
// sEarthquake := false ;
24025: LD_ADDR_EXP 108
24029: PUSH
24030: LD_INT 0
24032: ST_TO_ADDR
// sAI := false ;
24033: LD_ADDR_EXP 109
24037: PUSH
24038: LD_INT 0
24040: ST_TO_ADDR
// sCargo := false ;
24041: LD_ADDR_EXP 112
24045: PUSH
24046: LD_INT 0
24048: ST_TO_ADDR
// sDLaser := false ;
24049: LD_ADDR_EXP 113
24053: PUSH
24054: LD_INT 0
24056: ST_TO_ADDR
// sExchange := false ;
24057: LD_ADDR_EXP 114
24061: PUSH
24062: LD_INT 0
24064: ST_TO_ADDR
// sFac := false ;
24065: LD_ADDR_EXP 115
24069: PUSH
24070: LD_INT 0
24072: ST_TO_ADDR
// sPower := false ;
24073: LD_ADDR_EXP 116
24077: PUSH
24078: LD_INT 0
24080: ST_TO_ADDR
// sRandom := false ;
24081: LD_ADDR_EXP 117
24085: PUSH
24086: LD_INT 0
24088: ST_TO_ADDR
// sShield := false ;
24089: LD_ADDR_EXP 118
24093: PUSH
24094: LD_INT 0
24096: ST_TO_ADDR
// sTime := false ;
24097: LD_ADDR_EXP 119
24101: PUSH
24102: LD_INT 0
24104: ST_TO_ADDR
// sTools := false ;
24105: LD_ADDR_EXP 120
24109: PUSH
24110: LD_INT 0
24112: ST_TO_ADDR
// sSold := false ;
24113: LD_ADDR_EXP 85
24117: PUSH
24118: LD_INT 0
24120: ST_TO_ADDR
// sDiff := false ;
24121: LD_ADDR_EXP 86
24125: PUSH
24126: LD_INT 0
24128: ST_TO_ADDR
// sFog := false ;
24129: LD_ADDR_EXP 89
24133: PUSH
24134: LD_INT 0
24136: ST_TO_ADDR
// sReset := false ;
24137: LD_ADDR_EXP 90
24141: PUSH
24142: LD_INT 0
24144: ST_TO_ADDR
// sSun := false ;
24145: LD_ADDR_EXP 91
24149: PUSH
24150: LD_INT 0
24152: ST_TO_ADDR
// sTiger := false ;
24153: LD_ADDR_EXP 87
24157: PUSH
24158: LD_INT 0
24160: ST_TO_ADDR
// sBomb := false ;
24161: LD_ADDR_EXP 88
24165: PUSH
24166: LD_INT 0
24168: ST_TO_ADDR
// sWound := false ;
24169: LD_ADDR_EXP 96
24173: PUSH
24174: LD_INT 0
24176: ST_TO_ADDR
// sBetray := false ;
24177: LD_ADDR_EXP 100
24181: PUSH
24182: LD_INT 0
24184: ST_TO_ADDR
// sContamin := false ;
24185: LD_ADDR_EXP 101
24189: PUSH
24190: LD_INT 0
24192: ST_TO_ADDR
// sOil := false ;
24193: LD_ADDR_EXP 103
24197: PUSH
24198: LD_INT 0
24200: ST_TO_ADDR
// sStu := false ;
24201: LD_ADDR_EXP 107
24205: PUSH
24206: LD_INT 0
24208: ST_TO_ADDR
// sBazooka := false ;
24209: LD_ADDR_EXP 110
24213: PUSH
24214: LD_INT 0
24216: ST_TO_ADDR
// sMortar := false ;
24217: LD_ADDR_EXP 111
24221: PUSH
24222: LD_INT 0
24224: ST_TO_ADDR
// sRanger := false ;
24225: LD_ADDR_EXP 121
24229: PUSH
24230: LD_INT 0
24232: ST_TO_ADDR
// end ;
24233: LD_VAR 0 1
24237: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
24238: LD_INT 0
24240: PPUSH
24241: PPUSH
24242: PPUSH
24243: PPUSH
24244: PPUSH
// result := [ ] ;
24245: LD_ADDR_VAR 0 1
24249: PUSH
24250: EMPTY
24251: ST_TO_ADDR
// if campaign_id = 1 then
24252: LD_OWVAR 69
24256: PUSH
24257: LD_INT 1
24259: EQUAL
24260: IFFALSE 27198
// begin case mission_number of 1 :
24262: LD_OWVAR 70
24266: PUSH
24267: LD_INT 1
24269: DOUBLE
24270: EQUAL
24271: IFTRUE 24275
24273: GO 24339
24275: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
24276: LD_ADDR_VAR 0 1
24280: PUSH
24281: LD_INT 2
24283: PUSH
24284: LD_INT 4
24286: PUSH
24287: LD_INT 11
24289: PUSH
24290: LD_INT 12
24292: PUSH
24293: LD_INT 15
24295: PUSH
24296: LD_INT 16
24298: PUSH
24299: LD_INT 22
24301: PUSH
24302: LD_INT 23
24304: PUSH
24305: LD_INT 26
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 101
24321: PUSH
24322: LD_INT 102
24324: PUSH
24325: LD_INT 106
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: LIST
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: ST_TO_ADDR
24337: GO 27196
24339: LD_INT 2
24341: DOUBLE
24342: EQUAL
24343: IFTRUE 24347
24345: GO 24419
24347: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
24348: LD_ADDR_VAR 0 1
24352: PUSH
24353: LD_INT 2
24355: PUSH
24356: LD_INT 4
24358: PUSH
24359: LD_INT 11
24361: PUSH
24362: LD_INT 12
24364: PUSH
24365: LD_INT 15
24367: PUSH
24368: LD_INT 16
24370: PUSH
24371: LD_INT 22
24373: PUSH
24374: LD_INT 23
24376: PUSH
24377: LD_INT 26
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 101
24393: PUSH
24394: LD_INT 102
24396: PUSH
24397: LD_INT 105
24399: PUSH
24400: LD_INT 106
24402: PUSH
24403: LD_INT 108
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: ST_TO_ADDR
24417: GO 27196
24419: LD_INT 3
24421: DOUBLE
24422: EQUAL
24423: IFTRUE 24427
24425: GO 24503
24427: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
24428: LD_ADDR_VAR 0 1
24432: PUSH
24433: LD_INT 2
24435: PUSH
24436: LD_INT 4
24438: PUSH
24439: LD_INT 5
24441: PUSH
24442: LD_INT 11
24444: PUSH
24445: LD_INT 12
24447: PUSH
24448: LD_INT 15
24450: PUSH
24451: LD_INT 16
24453: PUSH
24454: LD_INT 22
24456: PUSH
24457: LD_INT 26
24459: PUSH
24460: LD_INT 36
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 101
24477: PUSH
24478: LD_INT 102
24480: PUSH
24481: LD_INT 105
24483: PUSH
24484: LD_INT 106
24486: PUSH
24487: LD_INT 108
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: ST_TO_ADDR
24501: GO 27196
24503: LD_INT 4
24505: DOUBLE
24506: EQUAL
24507: IFTRUE 24511
24509: GO 24595
24511: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
24512: LD_ADDR_VAR 0 1
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: LD_INT 4
24522: PUSH
24523: LD_INT 5
24525: PUSH
24526: LD_INT 8
24528: PUSH
24529: LD_INT 11
24531: PUSH
24532: LD_INT 12
24534: PUSH
24535: LD_INT 15
24537: PUSH
24538: LD_INT 16
24540: PUSH
24541: LD_INT 22
24543: PUSH
24544: LD_INT 23
24546: PUSH
24547: LD_INT 26
24549: PUSH
24550: LD_INT 36
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 101
24569: PUSH
24570: LD_INT 102
24572: PUSH
24573: LD_INT 105
24575: PUSH
24576: LD_INT 106
24578: PUSH
24579: LD_INT 108
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: ST_TO_ADDR
24593: GO 27196
24595: LD_INT 5
24597: DOUBLE
24598: EQUAL
24599: IFTRUE 24603
24601: GO 24703
24603: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
24604: LD_ADDR_VAR 0 1
24608: PUSH
24609: LD_INT 2
24611: PUSH
24612: LD_INT 4
24614: PUSH
24615: LD_INT 5
24617: PUSH
24618: LD_INT 6
24620: PUSH
24621: LD_INT 8
24623: PUSH
24624: LD_INT 11
24626: PUSH
24627: LD_INT 12
24629: PUSH
24630: LD_INT 15
24632: PUSH
24633: LD_INT 16
24635: PUSH
24636: LD_INT 22
24638: PUSH
24639: LD_INT 23
24641: PUSH
24642: LD_INT 25
24644: PUSH
24645: LD_INT 26
24647: PUSH
24648: LD_INT 36
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 101
24669: PUSH
24670: LD_INT 102
24672: PUSH
24673: LD_INT 105
24675: PUSH
24676: LD_INT 106
24678: PUSH
24679: LD_INT 108
24681: PUSH
24682: LD_INT 109
24684: PUSH
24685: LD_INT 112
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: ST_TO_ADDR
24701: GO 27196
24703: LD_INT 6
24705: DOUBLE
24706: EQUAL
24707: IFTRUE 24711
24709: GO 24831
24711: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
24712: LD_ADDR_VAR 0 1
24716: PUSH
24717: LD_INT 2
24719: PUSH
24720: LD_INT 4
24722: PUSH
24723: LD_INT 5
24725: PUSH
24726: LD_INT 6
24728: PUSH
24729: LD_INT 8
24731: PUSH
24732: LD_INT 11
24734: PUSH
24735: LD_INT 12
24737: PUSH
24738: LD_INT 15
24740: PUSH
24741: LD_INT 16
24743: PUSH
24744: LD_INT 20
24746: PUSH
24747: LD_INT 21
24749: PUSH
24750: LD_INT 22
24752: PUSH
24753: LD_INT 23
24755: PUSH
24756: LD_INT 25
24758: PUSH
24759: LD_INT 26
24761: PUSH
24762: LD_INT 30
24764: PUSH
24765: LD_INT 31
24767: PUSH
24768: LD_INT 32
24770: PUSH
24771: LD_INT 36
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 101
24797: PUSH
24798: LD_INT 102
24800: PUSH
24801: LD_INT 105
24803: PUSH
24804: LD_INT 106
24806: PUSH
24807: LD_INT 108
24809: PUSH
24810: LD_INT 109
24812: PUSH
24813: LD_INT 112
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: ST_TO_ADDR
24829: GO 27196
24831: LD_INT 7
24833: DOUBLE
24834: EQUAL
24835: IFTRUE 24839
24837: GO 24939
24839: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
24840: LD_ADDR_VAR 0 1
24844: PUSH
24845: LD_INT 2
24847: PUSH
24848: LD_INT 4
24850: PUSH
24851: LD_INT 5
24853: PUSH
24854: LD_INT 7
24856: PUSH
24857: LD_INT 11
24859: PUSH
24860: LD_INT 12
24862: PUSH
24863: LD_INT 15
24865: PUSH
24866: LD_INT 16
24868: PUSH
24869: LD_INT 20
24871: PUSH
24872: LD_INT 21
24874: PUSH
24875: LD_INT 22
24877: PUSH
24878: LD_INT 23
24880: PUSH
24881: LD_INT 25
24883: PUSH
24884: LD_INT 26
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 101
24905: PUSH
24906: LD_INT 102
24908: PUSH
24909: LD_INT 103
24911: PUSH
24912: LD_INT 105
24914: PUSH
24915: LD_INT 106
24917: PUSH
24918: LD_INT 108
24920: PUSH
24921: LD_INT 112
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: ST_TO_ADDR
24937: GO 27196
24939: LD_INT 8
24941: DOUBLE
24942: EQUAL
24943: IFTRUE 24947
24945: GO 25075
24947: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
24948: LD_ADDR_VAR 0 1
24952: PUSH
24953: LD_INT 2
24955: PUSH
24956: LD_INT 4
24958: PUSH
24959: LD_INT 5
24961: PUSH
24962: LD_INT 6
24964: PUSH
24965: LD_INT 7
24967: PUSH
24968: LD_INT 8
24970: PUSH
24971: LD_INT 11
24973: PUSH
24974: LD_INT 12
24976: PUSH
24977: LD_INT 15
24979: PUSH
24980: LD_INT 16
24982: PUSH
24983: LD_INT 20
24985: PUSH
24986: LD_INT 21
24988: PUSH
24989: LD_INT 22
24991: PUSH
24992: LD_INT 23
24994: PUSH
24995: LD_INT 25
24997: PUSH
24998: LD_INT 26
25000: PUSH
25001: LD_INT 30
25003: PUSH
25004: LD_INT 31
25006: PUSH
25007: LD_INT 32
25009: PUSH
25010: LD_INT 36
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 101
25037: PUSH
25038: LD_INT 102
25040: PUSH
25041: LD_INT 103
25043: PUSH
25044: LD_INT 105
25046: PUSH
25047: LD_INT 106
25049: PUSH
25050: LD_INT 108
25052: PUSH
25053: LD_INT 109
25055: PUSH
25056: LD_INT 112
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: ST_TO_ADDR
25073: GO 27196
25075: LD_INT 9
25077: DOUBLE
25078: EQUAL
25079: IFTRUE 25083
25081: GO 25219
25083: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
25084: LD_ADDR_VAR 0 1
25088: PUSH
25089: LD_INT 2
25091: PUSH
25092: LD_INT 4
25094: PUSH
25095: LD_INT 5
25097: PUSH
25098: LD_INT 6
25100: PUSH
25101: LD_INT 7
25103: PUSH
25104: LD_INT 8
25106: PUSH
25107: LD_INT 11
25109: PUSH
25110: LD_INT 12
25112: PUSH
25113: LD_INT 15
25115: PUSH
25116: LD_INT 16
25118: PUSH
25119: LD_INT 20
25121: PUSH
25122: LD_INT 21
25124: PUSH
25125: LD_INT 22
25127: PUSH
25128: LD_INT 23
25130: PUSH
25131: LD_INT 25
25133: PUSH
25134: LD_INT 26
25136: PUSH
25137: LD_INT 28
25139: PUSH
25140: LD_INT 30
25142: PUSH
25143: LD_INT 31
25145: PUSH
25146: LD_INT 32
25148: PUSH
25149: LD_INT 36
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 101
25177: PUSH
25178: LD_INT 102
25180: PUSH
25181: LD_INT 103
25183: PUSH
25184: LD_INT 105
25186: PUSH
25187: LD_INT 106
25189: PUSH
25190: LD_INT 108
25192: PUSH
25193: LD_INT 109
25195: PUSH
25196: LD_INT 112
25198: PUSH
25199: LD_INT 114
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: ST_TO_ADDR
25217: GO 27196
25219: LD_INT 10
25221: DOUBLE
25222: EQUAL
25223: IFTRUE 25227
25225: GO 25411
25227: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
25228: LD_ADDR_VAR 0 1
25232: PUSH
25233: LD_INT 2
25235: PUSH
25236: LD_INT 4
25238: PUSH
25239: LD_INT 5
25241: PUSH
25242: LD_INT 6
25244: PUSH
25245: LD_INT 7
25247: PUSH
25248: LD_INT 8
25250: PUSH
25251: LD_INT 9
25253: PUSH
25254: LD_INT 10
25256: PUSH
25257: LD_INT 11
25259: PUSH
25260: LD_INT 12
25262: PUSH
25263: LD_INT 13
25265: PUSH
25266: LD_INT 14
25268: PUSH
25269: LD_INT 15
25271: PUSH
25272: LD_INT 16
25274: PUSH
25275: LD_INT 17
25277: PUSH
25278: LD_INT 18
25280: PUSH
25281: LD_INT 19
25283: PUSH
25284: LD_INT 20
25286: PUSH
25287: LD_INT 21
25289: PUSH
25290: LD_INT 22
25292: PUSH
25293: LD_INT 23
25295: PUSH
25296: LD_INT 24
25298: PUSH
25299: LD_INT 25
25301: PUSH
25302: LD_INT 26
25304: PUSH
25305: LD_INT 28
25307: PUSH
25308: LD_INT 30
25310: PUSH
25311: LD_INT 31
25313: PUSH
25314: LD_INT 32
25316: PUSH
25317: LD_INT 36
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 101
25353: PUSH
25354: LD_INT 102
25356: PUSH
25357: LD_INT 103
25359: PUSH
25360: LD_INT 104
25362: PUSH
25363: LD_INT 105
25365: PUSH
25366: LD_INT 106
25368: PUSH
25369: LD_INT 107
25371: PUSH
25372: LD_INT 108
25374: PUSH
25375: LD_INT 109
25377: PUSH
25378: LD_INT 110
25380: PUSH
25381: LD_INT 111
25383: PUSH
25384: LD_INT 112
25386: PUSH
25387: LD_INT 114
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: ST_TO_ADDR
25409: GO 27196
25411: LD_INT 11
25413: DOUBLE
25414: EQUAL
25415: IFTRUE 25419
25417: GO 25611
25419: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
25420: LD_ADDR_VAR 0 1
25424: PUSH
25425: LD_INT 2
25427: PUSH
25428: LD_INT 3
25430: PUSH
25431: LD_INT 4
25433: PUSH
25434: LD_INT 5
25436: PUSH
25437: LD_INT 6
25439: PUSH
25440: LD_INT 7
25442: PUSH
25443: LD_INT 8
25445: PUSH
25446: LD_INT 9
25448: PUSH
25449: LD_INT 10
25451: PUSH
25452: LD_INT 11
25454: PUSH
25455: LD_INT 12
25457: PUSH
25458: LD_INT 13
25460: PUSH
25461: LD_INT 14
25463: PUSH
25464: LD_INT 15
25466: PUSH
25467: LD_INT 16
25469: PUSH
25470: LD_INT 17
25472: PUSH
25473: LD_INT 18
25475: PUSH
25476: LD_INT 19
25478: PUSH
25479: LD_INT 20
25481: PUSH
25482: LD_INT 21
25484: PUSH
25485: LD_INT 22
25487: PUSH
25488: LD_INT 23
25490: PUSH
25491: LD_INT 24
25493: PUSH
25494: LD_INT 25
25496: PUSH
25497: LD_INT 26
25499: PUSH
25500: LD_INT 28
25502: PUSH
25503: LD_INT 30
25505: PUSH
25506: LD_INT 31
25508: PUSH
25509: LD_INT 32
25511: PUSH
25512: LD_INT 34
25514: PUSH
25515: LD_INT 36
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 101
25553: PUSH
25554: LD_INT 102
25556: PUSH
25557: LD_INT 103
25559: PUSH
25560: LD_INT 104
25562: PUSH
25563: LD_INT 105
25565: PUSH
25566: LD_INT 106
25568: PUSH
25569: LD_INT 107
25571: PUSH
25572: LD_INT 108
25574: PUSH
25575: LD_INT 109
25577: PUSH
25578: LD_INT 110
25580: PUSH
25581: LD_INT 111
25583: PUSH
25584: LD_INT 112
25586: PUSH
25587: LD_INT 114
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: ST_TO_ADDR
25609: GO 27196
25611: LD_INT 12
25613: DOUBLE
25614: EQUAL
25615: IFTRUE 25619
25617: GO 25827
25619: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
25620: LD_ADDR_VAR 0 1
25624: PUSH
25625: LD_INT 1
25627: PUSH
25628: LD_INT 2
25630: PUSH
25631: LD_INT 3
25633: PUSH
25634: LD_INT 4
25636: PUSH
25637: LD_INT 5
25639: PUSH
25640: LD_INT 6
25642: PUSH
25643: LD_INT 7
25645: PUSH
25646: LD_INT 8
25648: PUSH
25649: LD_INT 9
25651: PUSH
25652: LD_INT 10
25654: PUSH
25655: LD_INT 11
25657: PUSH
25658: LD_INT 12
25660: PUSH
25661: LD_INT 13
25663: PUSH
25664: LD_INT 14
25666: PUSH
25667: LD_INT 15
25669: PUSH
25670: LD_INT 16
25672: PUSH
25673: LD_INT 17
25675: PUSH
25676: LD_INT 18
25678: PUSH
25679: LD_INT 19
25681: PUSH
25682: LD_INT 20
25684: PUSH
25685: LD_INT 21
25687: PUSH
25688: LD_INT 22
25690: PUSH
25691: LD_INT 23
25693: PUSH
25694: LD_INT 24
25696: PUSH
25697: LD_INT 25
25699: PUSH
25700: LD_INT 26
25702: PUSH
25703: LD_INT 27
25705: PUSH
25706: LD_INT 28
25708: PUSH
25709: LD_INT 30
25711: PUSH
25712: LD_INT 31
25714: PUSH
25715: LD_INT 32
25717: PUSH
25718: LD_INT 33
25720: PUSH
25721: LD_INT 34
25723: PUSH
25724: LD_INT 36
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 101
25765: PUSH
25766: LD_INT 102
25768: PUSH
25769: LD_INT 103
25771: PUSH
25772: LD_INT 104
25774: PUSH
25775: LD_INT 105
25777: PUSH
25778: LD_INT 106
25780: PUSH
25781: LD_INT 107
25783: PUSH
25784: LD_INT 108
25786: PUSH
25787: LD_INT 109
25789: PUSH
25790: LD_INT 110
25792: PUSH
25793: LD_INT 111
25795: PUSH
25796: LD_INT 112
25798: PUSH
25799: LD_INT 113
25801: PUSH
25802: LD_INT 114
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: ST_TO_ADDR
25825: GO 27196
25827: LD_INT 13
25829: DOUBLE
25830: EQUAL
25831: IFTRUE 25835
25833: GO 26031
25835: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
25836: LD_ADDR_VAR 0 1
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: LD_INT 2
25846: PUSH
25847: LD_INT 3
25849: PUSH
25850: LD_INT 4
25852: PUSH
25853: LD_INT 5
25855: PUSH
25856: LD_INT 8
25858: PUSH
25859: LD_INT 9
25861: PUSH
25862: LD_INT 10
25864: PUSH
25865: LD_INT 11
25867: PUSH
25868: LD_INT 12
25870: PUSH
25871: LD_INT 14
25873: PUSH
25874: LD_INT 15
25876: PUSH
25877: LD_INT 16
25879: PUSH
25880: LD_INT 17
25882: PUSH
25883: LD_INT 18
25885: PUSH
25886: LD_INT 19
25888: PUSH
25889: LD_INT 20
25891: PUSH
25892: LD_INT 21
25894: PUSH
25895: LD_INT 22
25897: PUSH
25898: LD_INT 23
25900: PUSH
25901: LD_INT 24
25903: PUSH
25904: LD_INT 25
25906: PUSH
25907: LD_INT 26
25909: PUSH
25910: LD_INT 27
25912: PUSH
25913: LD_INT 28
25915: PUSH
25916: LD_INT 30
25918: PUSH
25919: LD_INT 31
25921: PUSH
25922: LD_INT 32
25924: PUSH
25925: LD_INT 33
25927: PUSH
25928: LD_INT 34
25930: PUSH
25931: LD_INT 36
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 101
25969: PUSH
25970: LD_INT 102
25972: PUSH
25973: LD_INT 103
25975: PUSH
25976: LD_INT 104
25978: PUSH
25979: LD_INT 105
25981: PUSH
25982: LD_INT 106
25984: PUSH
25985: LD_INT 107
25987: PUSH
25988: LD_INT 108
25990: PUSH
25991: LD_INT 109
25993: PUSH
25994: LD_INT 110
25996: PUSH
25997: LD_INT 111
25999: PUSH
26000: LD_INT 112
26002: PUSH
26003: LD_INT 113
26005: PUSH
26006: LD_INT 114
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: ST_TO_ADDR
26029: GO 27196
26031: LD_INT 14
26033: DOUBLE
26034: EQUAL
26035: IFTRUE 26039
26037: GO 26251
26039: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
26040: LD_ADDR_VAR 0 1
26044: PUSH
26045: LD_INT 1
26047: PUSH
26048: LD_INT 2
26050: PUSH
26051: LD_INT 3
26053: PUSH
26054: LD_INT 4
26056: PUSH
26057: LD_INT 5
26059: PUSH
26060: LD_INT 6
26062: PUSH
26063: LD_INT 7
26065: PUSH
26066: LD_INT 8
26068: PUSH
26069: LD_INT 9
26071: PUSH
26072: LD_INT 10
26074: PUSH
26075: LD_INT 11
26077: PUSH
26078: LD_INT 12
26080: PUSH
26081: LD_INT 13
26083: PUSH
26084: LD_INT 14
26086: PUSH
26087: LD_INT 15
26089: PUSH
26090: LD_INT 16
26092: PUSH
26093: LD_INT 17
26095: PUSH
26096: LD_INT 18
26098: PUSH
26099: LD_INT 19
26101: PUSH
26102: LD_INT 20
26104: PUSH
26105: LD_INT 21
26107: PUSH
26108: LD_INT 22
26110: PUSH
26111: LD_INT 23
26113: PUSH
26114: LD_INT 24
26116: PUSH
26117: LD_INT 25
26119: PUSH
26120: LD_INT 26
26122: PUSH
26123: LD_INT 27
26125: PUSH
26126: LD_INT 28
26128: PUSH
26129: LD_INT 29
26131: PUSH
26132: LD_INT 30
26134: PUSH
26135: LD_INT 31
26137: PUSH
26138: LD_INT 32
26140: PUSH
26141: LD_INT 33
26143: PUSH
26144: LD_INT 34
26146: PUSH
26147: LD_INT 36
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 101
26189: PUSH
26190: LD_INT 102
26192: PUSH
26193: LD_INT 103
26195: PUSH
26196: LD_INT 104
26198: PUSH
26199: LD_INT 105
26201: PUSH
26202: LD_INT 106
26204: PUSH
26205: LD_INT 107
26207: PUSH
26208: LD_INT 108
26210: PUSH
26211: LD_INT 109
26213: PUSH
26214: LD_INT 110
26216: PUSH
26217: LD_INT 111
26219: PUSH
26220: LD_INT 112
26222: PUSH
26223: LD_INT 113
26225: PUSH
26226: LD_INT 114
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: ST_TO_ADDR
26249: GO 27196
26251: LD_INT 15
26253: DOUBLE
26254: EQUAL
26255: IFTRUE 26259
26257: GO 26471
26259: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
26260: LD_ADDR_VAR 0 1
26264: PUSH
26265: LD_INT 1
26267: PUSH
26268: LD_INT 2
26270: PUSH
26271: LD_INT 3
26273: PUSH
26274: LD_INT 4
26276: PUSH
26277: LD_INT 5
26279: PUSH
26280: LD_INT 6
26282: PUSH
26283: LD_INT 7
26285: PUSH
26286: LD_INT 8
26288: PUSH
26289: LD_INT 9
26291: PUSH
26292: LD_INT 10
26294: PUSH
26295: LD_INT 11
26297: PUSH
26298: LD_INT 12
26300: PUSH
26301: LD_INT 13
26303: PUSH
26304: LD_INT 14
26306: PUSH
26307: LD_INT 15
26309: PUSH
26310: LD_INT 16
26312: PUSH
26313: LD_INT 17
26315: PUSH
26316: LD_INT 18
26318: PUSH
26319: LD_INT 19
26321: PUSH
26322: LD_INT 20
26324: PUSH
26325: LD_INT 21
26327: PUSH
26328: LD_INT 22
26330: PUSH
26331: LD_INT 23
26333: PUSH
26334: LD_INT 24
26336: PUSH
26337: LD_INT 25
26339: PUSH
26340: LD_INT 26
26342: PUSH
26343: LD_INT 27
26345: PUSH
26346: LD_INT 28
26348: PUSH
26349: LD_INT 29
26351: PUSH
26352: LD_INT 30
26354: PUSH
26355: LD_INT 31
26357: PUSH
26358: LD_INT 32
26360: PUSH
26361: LD_INT 33
26363: PUSH
26364: LD_INT 34
26366: PUSH
26367: LD_INT 36
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 101
26409: PUSH
26410: LD_INT 102
26412: PUSH
26413: LD_INT 103
26415: PUSH
26416: LD_INT 104
26418: PUSH
26419: LD_INT 105
26421: PUSH
26422: LD_INT 106
26424: PUSH
26425: LD_INT 107
26427: PUSH
26428: LD_INT 108
26430: PUSH
26431: LD_INT 109
26433: PUSH
26434: LD_INT 110
26436: PUSH
26437: LD_INT 111
26439: PUSH
26440: LD_INT 112
26442: PUSH
26443: LD_INT 113
26445: PUSH
26446: LD_INT 114
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: ST_TO_ADDR
26469: GO 27196
26471: LD_INT 16
26473: DOUBLE
26474: EQUAL
26475: IFTRUE 26479
26477: GO 26603
26479: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
26480: LD_ADDR_VAR 0 1
26484: PUSH
26485: LD_INT 2
26487: PUSH
26488: LD_INT 4
26490: PUSH
26491: LD_INT 5
26493: PUSH
26494: LD_INT 7
26496: PUSH
26497: LD_INT 11
26499: PUSH
26500: LD_INT 12
26502: PUSH
26503: LD_INT 15
26505: PUSH
26506: LD_INT 16
26508: PUSH
26509: LD_INT 20
26511: PUSH
26512: LD_INT 21
26514: PUSH
26515: LD_INT 22
26517: PUSH
26518: LD_INT 23
26520: PUSH
26521: LD_INT 25
26523: PUSH
26524: LD_INT 26
26526: PUSH
26527: LD_INT 30
26529: PUSH
26530: LD_INT 31
26532: PUSH
26533: LD_INT 32
26535: PUSH
26536: LD_INT 33
26538: PUSH
26539: LD_INT 34
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 101
26565: PUSH
26566: LD_INT 102
26568: PUSH
26569: LD_INT 103
26571: PUSH
26572: LD_INT 106
26574: PUSH
26575: LD_INT 108
26577: PUSH
26578: LD_INT 112
26580: PUSH
26581: LD_INT 113
26583: PUSH
26584: LD_INT 114
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: ST_TO_ADDR
26601: GO 27196
26603: LD_INT 17
26605: DOUBLE
26606: EQUAL
26607: IFTRUE 26611
26609: GO 26823
26611: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
26612: LD_ADDR_VAR 0 1
26616: PUSH
26617: LD_INT 1
26619: PUSH
26620: LD_INT 2
26622: PUSH
26623: LD_INT 3
26625: PUSH
26626: LD_INT 4
26628: PUSH
26629: LD_INT 5
26631: PUSH
26632: LD_INT 6
26634: PUSH
26635: LD_INT 7
26637: PUSH
26638: LD_INT 8
26640: PUSH
26641: LD_INT 9
26643: PUSH
26644: LD_INT 10
26646: PUSH
26647: LD_INT 11
26649: PUSH
26650: LD_INT 12
26652: PUSH
26653: LD_INT 13
26655: PUSH
26656: LD_INT 14
26658: PUSH
26659: LD_INT 15
26661: PUSH
26662: LD_INT 16
26664: PUSH
26665: LD_INT 17
26667: PUSH
26668: LD_INT 18
26670: PUSH
26671: LD_INT 19
26673: PUSH
26674: LD_INT 20
26676: PUSH
26677: LD_INT 21
26679: PUSH
26680: LD_INT 22
26682: PUSH
26683: LD_INT 23
26685: PUSH
26686: LD_INT 24
26688: PUSH
26689: LD_INT 25
26691: PUSH
26692: LD_INT 26
26694: PUSH
26695: LD_INT 27
26697: PUSH
26698: LD_INT 28
26700: PUSH
26701: LD_INT 29
26703: PUSH
26704: LD_INT 30
26706: PUSH
26707: LD_INT 31
26709: PUSH
26710: LD_INT 32
26712: PUSH
26713: LD_INT 33
26715: PUSH
26716: LD_INT 34
26718: PUSH
26719: LD_INT 36
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 101
26761: PUSH
26762: LD_INT 102
26764: PUSH
26765: LD_INT 103
26767: PUSH
26768: LD_INT 104
26770: PUSH
26771: LD_INT 105
26773: PUSH
26774: LD_INT 106
26776: PUSH
26777: LD_INT 107
26779: PUSH
26780: LD_INT 108
26782: PUSH
26783: LD_INT 109
26785: PUSH
26786: LD_INT 110
26788: PUSH
26789: LD_INT 111
26791: PUSH
26792: LD_INT 112
26794: PUSH
26795: LD_INT 113
26797: PUSH
26798: LD_INT 114
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: ST_TO_ADDR
26821: GO 27196
26823: LD_INT 18
26825: DOUBLE
26826: EQUAL
26827: IFTRUE 26831
26829: GO 26967
26831: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
26832: LD_ADDR_VAR 0 1
26836: PUSH
26837: LD_INT 2
26839: PUSH
26840: LD_INT 4
26842: PUSH
26843: LD_INT 5
26845: PUSH
26846: LD_INT 7
26848: PUSH
26849: LD_INT 11
26851: PUSH
26852: LD_INT 12
26854: PUSH
26855: LD_INT 15
26857: PUSH
26858: LD_INT 16
26860: PUSH
26861: LD_INT 20
26863: PUSH
26864: LD_INT 21
26866: PUSH
26867: LD_INT 22
26869: PUSH
26870: LD_INT 23
26872: PUSH
26873: LD_INT 25
26875: PUSH
26876: LD_INT 26
26878: PUSH
26879: LD_INT 30
26881: PUSH
26882: LD_INT 31
26884: PUSH
26885: LD_INT 32
26887: PUSH
26888: LD_INT 33
26890: PUSH
26891: LD_INT 34
26893: PUSH
26894: LD_INT 35
26896: PUSH
26897: LD_INT 36
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 101
26925: PUSH
26926: LD_INT 102
26928: PUSH
26929: LD_INT 103
26931: PUSH
26932: LD_INT 106
26934: PUSH
26935: LD_INT 108
26937: PUSH
26938: LD_INT 112
26940: PUSH
26941: LD_INT 113
26943: PUSH
26944: LD_INT 114
26946: PUSH
26947: LD_INT 115
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: ST_TO_ADDR
26965: GO 27196
26967: LD_INT 19
26969: DOUBLE
26970: EQUAL
26971: IFTRUE 26975
26973: GO 27195
26975: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
26976: LD_ADDR_VAR 0 1
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: LD_INT 2
26986: PUSH
26987: LD_INT 3
26989: PUSH
26990: LD_INT 4
26992: PUSH
26993: LD_INT 5
26995: PUSH
26996: LD_INT 6
26998: PUSH
26999: LD_INT 7
27001: PUSH
27002: LD_INT 8
27004: PUSH
27005: LD_INT 9
27007: PUSH
27008: LD_INT 10
27010: PUSH
27011: LD_INT 11
27013: PUSH
27014: LD_INT 12
27016: PUSH
27017: LD_INT 13
27019: PUSH
27020: LD_INT 14
27022: PUSH
27023: LD_INT 15
27025: PUSH
27026: LD_INT 16
27028: PUSH
27029: LD_INT 17
27031: PUSH
27032: LD_INT 18
27034: PUSH
27035: LD_INT 19
27037: PUSH
27038: LD_INT 20
27040: PUSH
27041: LD_INT 21
27043: PUSH
27044: LD_INT 22
27046: PUSH
27047: LD_INT 23
27049: PUSH
27050: LD_INT 24
27052: PUSH
27053: LD_INT 25
27055: PUSH
27056: LD_INT 26
27058: PUSH
27059: LD_INT 27
27061: PUSH
27062: LD_INT 28
27064: PUSH
27065: LD_INT 29
27067: PUSH
27068: LD_INT 30
27070: PUSH
27071: LD_INT 31
27073: PUSH
27074: LD_INT 32
27076: PUSH
27077: LD_INT 33
27079: PUSH
27080: LD_INT 34
27082: PUSH
27083: LD_INT 35
27085: PUSH
27086: LD_INT 36
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 101
27129: PUSH
27130: LD_INT 102
27132: PUSH
27133: LD_INT 103
27135: PUSH
27136: LD_INT 104
27138: PUSH
27139: LD_INT 105
27141: PUSH
27142: LD_INT 106
27144: PUSH
27145: LD_INT 107
27147: PUSH
27148: LD_INT 108
27150: PUSH
27151: LD_INT 109
27153: PUSH
27154: LD_INT 110
27156: PUSH
27157: LD_INT 111
27159: PUSH
27160: LD_INT 112
27162: PUSH
27163: LD_INT 113
27165: PUSH
27166: LD_INT 114
27168: PUSH
27169: LD_INT 115
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: ST_TO_ADDR
27193: GO 27196
27195: POP
// end else
27196: GO 27415
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
27198: LD_ADDR_VAR 0 1
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: LD_INT 2
27208: PUSH
27209: LD_INT 3
27211: PUSH
27212: LD_INT 4
27214: PUSH
27215: LD_INT 5
27217: PUSH
27218: LD_INT 6
27220: PUSH
27221: LD_INT 7
27223: PUSH
27224: LD_INT 8
27226: PUSH
27227: LD_INT 9
27229: PUSH
27230: LD_INT 10
27232: PUSH
27233: LD_INT 11
27235: PUSH
27236: LD_INT 12
27238: PUSH
27239: LD_INT 13
27241: PUSH
27242: LD_INT 14
27244: PUSH
27245: LD_INT 15
27247: PUSH
27248: LD_INT 16
27250: PUSH
27251: LD_INT 17
27253: PUSH
27254: LD_INT 18
27256: PUSH
27257: LD_INT 19
27259: PUSH
27260: LD_INT 20
27262: PUSH
27263: LD_INT 21
27265: PUSH
27266: LD_INT 22
27268: PUSH
27269: LD_INT 23
27271: PUSH
27272: LD_INT 24
27274: PUSH
27275: LD_INT 25
27277: PUSH
27278: LD_INT 26
27280: PUSH
27281: LD_INT 27
27283: PUSH
27284: LD_INT 28
27286: PUSH
27287: LD_INT 29
27289: PUSH
27290: LD_INT 30
27292: PUSH
27293: LD_INT 31
27295: PUSH
27296: LD_INT 32
27298: PUSH
27299: LD_INT 33
27301: PUSH
27302: LD_INT 34
27304: PUSH
27305: LD_INT 35
27307: PUSH
27308: LD_INT 36
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 101
27351: PUSH
27352: LD_INT 102
27354: PUSH
27355: LD_INT 103
27357: PUSH
27358: LD_INT 104
27360: PUSH
27361: LD_INT 105
27363: PUSH
27364: LD_INT 106
27366: PUSH
27367: LD_INT 107
27369: PUSH
27370: LD_INT 108
27372: PUSH
27373: LD_INT 109
27375: PUSH
27376: LD_INT 110
27378: PUSH
27379: LD_INT 111
27381: PUSH
27382: LD_INT 112
27384: PUSH
27385: LD_INT 113
27387: PUSH
27388: LD_INT 114
27390: PUSH
27391: LD_INT 115
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: ST_TO_ADDR
// if result then
27415: LD_VAR 0 1
27419: IFFALSE 27708
// begin normal :=  ;
27421: LD_ADDR_VAR 0 3
27425: PUSH
27426: LD_STRING 
27428: ST_TO_ADDR
// hardcore :=  ;
27429: LD_ADDR_VAR 0 4
27433: PUSH
27434: LD_STRING 
27436: ST_TO_ADDR
// for i = 1 to normalCounter do
27437: LD_ADDR_VAR 0 5
27441: PUSH
27442: DOUBLE
27443: LD_INT 1
27445: DEC
27446: ST_TO_ADDR
27447: LD_EXP 69
27451: PUSH
27452: FOR_TO
27453: IFFALSE 27554
// begin tmp := 0 ;
27455: LD_ADDR_VAR 0 2
27459: PUSH
27460: LD_STRING 0
27462: ST_TO_ADDR
// if result [ 1 ] then
27463: LD_VAR 0 1
27467: PUSH
27468: LD_INT 1
27470: ARRAY
27471: IFFALSE 27536
// if result [ 1 ] [ 1 ] = i then
27473: LD_VAR 0 1
27477: PUSH
27478: LD_INT 1
27480: ARRAY
27481: PUSH
27482: LD_INT 1
27484: ARRAY
27485: PUSH
27486: LD_VAR 0 5
27490: EQUAL
27491: IFFALSE 27536
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27493: LD_ADDR_VAR 0 1
27497: PUSH
27498: LD_VAR 0 1
27502: PPUSH
27503: LD_INT 1
27505: PPUSH
27506: LD_VAR 0 1
27510: PUSH
27511: LD_INT 1
27513: ARRAY
27514: PPUSH
27515: LD_INT 1
27517: PPUSH
27518: CALL_OW 3
27522: PPUSH
27523: CALL_OW 1
27527: ST_TO_ADDR
// tmp := 1 ;
27528: LD_ADDR_VAR 0 2
27532: PUSH
27533: LD_STRING 1
27535: ST_TO_ADDR
// end ; normal := normal & tmp ;
27536: LD_ADDR_VAR 0 3
27540: PUSH
27541: LD_VAR 0 3
27545: PUSH
27546: LD_VAR 0 2
27550: STR
27551: ST_TO_ADDR
// end ;
27552: GO 27452
27554: POP
27555: POP
// for i = 1 to hardcoreCounter do
27556: LD_ADDR_VAR 0 5
27560: PUSH
27561: DOUBLE
27562: LD_INT 1
27564: DEC
27565: ST_TO_ADDR
27566: LD_EXP 70
27570: PUSH
27571: FOR_TO
27572: IFFALSE 27677
// begin tmp := 0 ;
27574: LD_ADDR_VAR 0 2
27578: PUSH
27579: LD_STRING 0
27581: ST_TO_ADDR
// if result [ 2 ] then
27582: LD_VAR 0 1
27586: PUSH
27587: LD_INT 2
27589: ARRAY
27590: IFFALSE 27659
// if result [ 2 ] [ 1 ] = 100 + i then
27592: LD_VAR 0 1
27596: PUSH
27597: LD_INT 2
27599: ARRAY
27600: PUSH
27601: LD_INT 1
27603: ARRAY
27604: PUSH
27605: LD_INT 100
27607: PUSH
27608: LD_VAR 0 5
27612: PLUS
27613: EQUAL
27614: IFFALSE 27659
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27616: LD_ADDR_VAR 0 1
27620: PUSH
27621: LD_VAR 0 1
27625: PPUSH
27626: LD_INT 2
27628: PPUSH
27629: LD_VAR 0 1
27633: PUSH
27634: LD_INT 2
27636: ARRAY
27637: PPUSH
27638: LD_INT 1
27640: PPUSH
27641: CALL_OW 3
27645: PPUSH
27646: CALL_OW 1
27650: ST_TO_ADDR
// tmp := 1 ;
27651: LD_ADDR_VAR 0 2
27655: PUSH
27656: LD_STRING 1
27658: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27659: LD_ADDR_VAR 0 4
27663: PUSH
27664: LD_VAR 0 4
27668: PUSH
27669: LD_VAR 0 2
27673: STR
27674: ST_TO_ADDR
// end ;
27675: GO 27571
27677: POP
27678: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
27679: LD_STRING getStreamItemsFromMission("
27681: PUSH
27682: LD_VAR 0 3
27686: STR
27687: PUSH
27688: LD_STRING ","
27690: STR
27691: PUSH
27692: LD_VAR 0 4
27696: STR
27697: PUSH
27698: LD_STRING ")
27700: STR
27701: PPUSH
27702: CALL_OW 559
// end else
27706: GO 27715
// ToLua ( getStreamItemsFromMission("","") ) ;
27708: LD_STRING getStreamItemsFromMission("","")
27710: PPUSH
27711: CALL_OW 559
// end ;
27715: LD_VAR 0 1
27719: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27720: LD_EXP 68
27724: PUSH
27725: LD_EXP 73
27729: AND
27730: IFFALSE 27854
27732: GO 27734
27734: DISABLE
27735: LD_INT 0
27737: PPUSH
27738: PPUSH
// begin enable ;
27739: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27740: LD_ADDR_VAR 0 2
27744: PUSH
27745: LD_INT 22
27747: PUSH
27748: LD_OWVAR 2
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 2
27759: PUSH
27760: LD_INT 34
27762: PUSH
27763: LD_INT 7
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 34
27772: PUSH
27773: LD_INT 45
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 34
27782: PUSH
27783: LD_INT 28
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 34
27792: PUSH
27793: LD_INT 47
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PPUSH
27811: CALL_OW 69
27815: ST_TO_ADDR
// if not tmp then
27816: LD_VAR 0 2
27820: NOT
27821: IFFALSE 27825
// exit ;
27823: GO 27854
// for i in tmp do
27825: LD_ADDR_VAR 0 1
27829: PUSH
27830: LD_VAR 0 2
27834: PUSH
27835: FOR_IN
27836: IFFALSE 27852
// begin SetLives ( i , 0 ) ;
27838: LD_VAR 0 1
27842: PPUSH
27843: LD_INT 0
27845: PPUSH
27846: CALL_OW 234
// end ;
27850: GO 27835
27852: POP
27853: POP
// end ;
27854: PPOPN 2
27856: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27857: LD_EXP 68
27861: PUSH
27862: LD_EXP 74
27866: AND
27867: IFFALSE 27951
27869: GO 27871
27871: DISABLE
27872: LD_INT 0
27874: PPUSH
27875: PPUSH
// begin enable ;
27876: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27877: LD_ADDR_VAR 0 2
27881: PUSH
27882: LD_INT 22
27884: PUSH
27885: LD_OWVAR 2
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 32
27896: PUSH
27897: LD_INT 3
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PPUSH
27908: CALL_OW 69
27912: ST_TO_ADDR
// if not tmp then
27913: LD_VAR 0 2
27917: NOT
27918: IFFALSE 27922
// exit ;
27920: GO 27951
// for i in tmp do
27922: LD_ADDR_VAR 0 1
27926: PUSH
27927: LD_VAR 0 2
27931: PUSH
27932: FOR_IN
27933: IFFALSE 27949
// begin SetLives ( i , 0 ) ;
27935: LD_VAR 0 1
27939: PPUSH
27940: LD_INT 0
27942: PPUSH
27943: CALL_OW 234
// end ;
27947: GO 27932
27949: POP
27950: POP
// end ;
27951: PPOPN 2
27953: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27954: LD_EXP 68
27958: PUSH
27959: LD_EXP 71
27963: AND
27964: IFFALSE 28057
27966: GO 27968
27968: DISABLE
27969: LD_INT 0
27971: PPUSH
// begin enable ;
27972: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27973: LD_ADDR_VAR 0 1
27977: PUSH
27978: LD_INT 22
27980: PUSH
27981: LD_OWVAR 2
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 2
27992: PUSH
27993: LD_INT 25
27995: PUSH
27996: LD_INT 5
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 25
28005: PUSH
28006: LD_INT 9
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 25
28015: PUSH
28016: LD_INT 8
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PPUSH
28033: CALL_OW 69
28037: PUSH
28038: FOR_IN
28039: IFFALSE 28055
// begin SetClass ( i , 1 ) ;
28041: LD_VAR 0 1
28045: PPUSH
28046: LD_INT 1
28048: PPUSH
28049: CALL_OW 336
// end ;
28053: GO 28038
28055: POP
28056: POP
// end ;
28057: PPOPN 1
28059: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28060: LD_EXP 68
28064: PUSH
28065: LD_EXP 72
28069: AND
28070: PUSH
28071: LD_OWVAR 65
28075: PUSH
28076: LD_INT 7
28078: LESS
28079: AND
28080: IFFALSE 28094
28082: GO 28084
28084: DISABLE
// begin enable ;
28085: ENABLE
// game_speed := 7 ;
28086: LD_ADDR_OWVAR 65
28090: PUSH
28091: LD_INT 7
28093: ST_TO_ADDR
// end ;
28094: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28095: LD_EXP 68
28099: PUSH
28100: LD_EXP 75
28104: AND
28105: IFFALSE 28307
28107: GO 28109
28109: DISABLE
28110: LD_INT 0
28112: PPUSH
28113: PPUSH
28114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28115: LD_ADDR_VAR 0 3
28119: PUSH
28120: LD_INT 81
28122: PUSH
28123: LD_OWVAR 2
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 21
28134: PUSH
28135: LD_INT 1
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PPUSH
28146: CALL_OW 69
28150: ST_TO_ADDR
// if not tmp then
28151: LD_VAR 0 3
28155: NOT
28156: IFFALSE 28160
// exit ;
28158: GO 28307
// if tmp > 5 then
28160: LD_VAR 0 3
28164: PUSH
28165: LD_INT 5
28167: GREATER
28168: IFFALSE 28180
// k := 5 else
28170: LD_ADDR_VAR 0 2
28174: PUSH
28175: LD_INT 5
28177: ST_TO_ADDR
28178: GO 28190
// k := tmp ;
28180: LD_ADDR_VAR 0 2
28184: PUSH
28185: LD_VAR 0 3
28189: ST_TO_ADDR
// for i := 1 to k do
28190: LD_ADDR_VAR 0 1
28194: PUSH
28195: DOUBLE
28196: LD_INT 1
28198: DEC
28199: ST_TO_ADDR
28200: LD_VAR 0 2
28204: PUSH
28205: FOR_TO
28206: IFFALSE 28305
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28208: LD_VAR 0 3
28212: PUSH
28213: LD_VAR 0 1
28217: ARRAY
28218: PPUSH
28219: LD_VAR 0 1
28223: PUSH
28224: LD_INT 4
28226: MOD
28227: PUSH
28228: LD_INT 1
28230: PLUS
28231: PPUSH
28232: CALL_OW 259
28236: PUSH
28237: LD_INT 10
28239: LESS
28240: IFFALSE 28303
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28242: LD_VAR 0 3
28246: PUSH
28247: LD_VAR 0 1
28251: ARRAY
28252: PPUSH
28253: LD_VAR 0 1
28257: PUSH
28258: LD_INT 4
28260: MOD
28261: PUSH
28262: LD_INT 1
28264: PLUS
28265: PPUSH
28266: LD_VAR 0 3
28270: PUSH
28271: LD_VAR 0 1
28275: ARRAY
28276: PPUSH
28277: LD_VAR 0 1
28281: PUSH
28282: LD_INT 4
28284: MOD
28285: PUSH
28286: LD_INT 1
28288: PLUS
28289: PPUSH
28290: CALL_OW 259
28294: PUSH
28295: LD_INT 1
28297: PLUS
28298: PPUSH
28299: CALL_OW 237
28303: GO 28205
28305: POP
28306: POP
// end ;
28307: PPOPN 3
28309: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28310: LD_EXP 68
28314: PUSH
28315: LD_EXP 76
28319: AND
28320: IFFALSE 28340
28322: GO 28324
28324: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28325: LD_INT 4
28327: PPUSH
28328: LD_OWVAR 2
28332: PPUSH
28333: LD_INT 0
28335: PPUSH
28336: CALL_OW 324
28340: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28341: LD_EXP 68
28345: PUSH
28346: LD_EXP 105
28350: AND
28351: IFFALSE 28371
28353: GO 28355
28355: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28356: LD_INT 19
28358: PPUSH
28359: LD_OWVAR 2
28363: PPUSH
28364: LD_INT 0
28366: PPUSH
28367: CALL_OW 324
28371: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28372: LD_EXP 68
28376: PUSH
28377: LD_EXP 77
28381: AND
28382: IFFALSE 28484
28384: GO 28386
28386: DISABLE
28387: LD_INT 0
28389: PPUSH
28390: PPUSH
// begin enable ;
28391: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28392: LD_ADDR_VAR 0 2
28396: PUSH
28397: LD_INT 22
28399: PUSH
28400: LD_OWVAR 2
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 2
28411: PUSH
28412: LD_INT 34
28414: PUSH
28415: LD_INT 11
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 34
28424: PUSH
28425: LD_INT 30
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: LIST
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PPUSH
28441: CALL_OW 69
28445: ST_TO_ADDR
// if not tmp then
28446: LD_VAR 0 2
28450: NOT
28451: IFFALSE 28455
// exit ;
28453: GO 28484
// for i in tmp do
28455: LD_ADDR_VAR 0 1
28459: PUSH
28460: LD_VAR 0 2
28464: PUSH
28465: FOR_IN
28466: IFFALSE 28482
// begin SetLives ( i , 0 ) ;
28468: LD_VAR 0 1
28472: PPUSH
28473: LD_INT 0
28475: PPUSH
28476: CALL_OW 234
// end ;
28480: GO 28465
28482: POP
28483: POP
// end ;
28484: PPOPN 2
28486: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28487: LD_EXP 68
28491: PUSH
28492: LD_EXP 78
28496: AND
28497: IFFALSE 28517
28499: GO 28501
28501: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28502: LD_INT 32
28504: PPUSH
28505: LD_OWVAR 2
28509: PPUSH
28510: LD_INT 0
28512: PPUSH
28513: CALL_OW 324
28517: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28518: LD_EXP 68
28522: PUSH
28523: LD_EXP 79
28527: AND
28528: IFFALSE 28709
28530: GO 28532
28532: DISABLE
28533: LD_INT 0
28535: PPUSH
28536: PPUSH
28537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28538: LD_ADDR_VAR 0 2
28542: PUSH
28543: LD_INT 22
28545: PUSH
28546: LD_OWVAR 2
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 33
28557: PUSH
28558: LD_INT 3
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PPUSH
28569: CALL_OW 69
28573: ST_TO_ADDR
// if not tmp then
28574: LD_VAR 0 2
28578: NOT
28579: IFFALSE 28583
// exit ;
28581: GO 28709
// side := 0 ;
28583: LD_ADDR_VAR 0 3
28587: PUSH
28588: LD_INT 0
28590: ST_TO_ADDR
// for i := 1 to 8 do
28591: LD_ADDR_VAR 0 1
28595: PUSH
28596: DOUBLE
28597: LD_INT 1
28599: DEC
28600: ST_TO_ADDR
28601: LD_INT 8
28603: PUSH
28604: FOR_TO
28605: IFFALSE 28653
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28607: LD_OWVAR 2
28611: PUSH
28612: LD_VAR 0 1
28616: NONEQUAL
28617: PUSH
28618: LD_OWVAR 2
28622: PPUSH
28623: LD_VAR 0 1
28627: PPUSH
28628: CALL_OW 81
28632: PUSH
28633: LD_INT 2
28635: EQUAL
28636: AND
28637: IFFALSE 28651
// begin side := i ;
28639: LD_ADDR_VAR 0 3
28643: PUSH
28644: LD_VAR 0 1
28648: ST_TO_ADDR
// break ;
28649: GO 28653
// end ;
28651: GO 28604
28653: POP
28654: POP
// if not side then
28655: LD_VAR 0 3
28659: NOT
28660: IFFALSE 28664
// exit ;
28662: GO 28709
// for i := 1 to tmp do
28664: LD_ADDR_VAR 0 1
28668: PUSH
28669: DOUBLE
28670: LD_INT 1
28672: DEC
28673: ST_TO_ADDR
28674: LD_VAR 0 2
28678: PUSH
28679: FOR_TO
28680: IFFALSE 28707
// if Prob ( 60 ) then
28682: LD_INT 60
28684: PPUSH
28685: CALL_OW 13
28689: IFFALSE 28705
// SetSide ( i , side ) ;
28691: LD_VAR 0 1
28695: PPUSH
28696: LD_VAR 0 3
28700: PPUSH
28701: CALL_OW 235
28705: GO 28679
28707: POP
28708: POP
// end ;
28709: PPOPN 3
28711: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28712: LD_EXP 68
28716: PUSH
28717: LD_EXP 81
28721: AND
28722: IFFALSE 28841
28724: GO 28726
28726: DISABLE
28727: LD_INT 0
28729: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28730: LD_ADDR_VAR 0 1
28734: PUSH
28735: LD_INT 22
28737: PUSH
28738: LD_OWVAR 2
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 21
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 3
28759: PUSH
28760: LD_INT 23
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: LIST
28778: PPUSH
28779: CALL_OW 69
28783: PUSH
28784: FOR_IN
28785: IFFALSE 28839
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28787: LD_VAR 0 1
28791: PPUSH
28792: CALL_OW 257
28796: PUSH
28797: LD_INT 1
28799: PUSH
28800: LD_INT 2
28802: PUSH
28803: LD_INT 3
28805: PUSH
28806: LD_INT 4
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: IN
28815: IFFALSE 28837
// SetClass ( un , rand ( 1 , 4 ) ) ;
28817: LD_VAR 0 1
28821: PPUSH
28822: LD_INT 1
28824: PPUSH
28825: LD_INT 4
28827: PPUSH
28828: CALL_OW 12
28832: PPUSH
28833: CALL_OW 336
28837: GO 28784
28839: POP
28840: POP
// end ;
28841: PPOPN 1
28843: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28844: LD_EXP 68
28848: PUSH
28849: LD_EXP 80
28853: AND
28854: IFFALSE 28933
28856: GO 28858
28858: DISABLE
28859: LD_INT 0
28861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28862: LD_ADDR_VAR 0 1
28866: PUSH
28867: LD_INT 22
28869: PUSH
28870: LD_OWVAR 2
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 21
28881: PUSH
28882: LD_INT 3
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PPUSH
28893: CALL_OW 69
28897: ST_TO_ADDR
// if not tmp then
28898: LD_VAR 0 1
28902: NOT
28903: IFFALSE 28907
// exit ;
28905: GO 28933
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28907: LD_VAR 0 1
28911: PUSH
28912: LD_INT 1
28914: PPUSH
28915: LD_VAR 0 1
28919: PPUSH
28920: CALL_OW 12
28924: ARRAY
28925: PPUSH
28926: LD_INT 100
28928: PPUSH
28929: CALL_OW 234
// end ;
28933: PPOPN 1
28935: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28936: LD_EXP 68
28940: PUSH
28941: LD_EXP 82
28945: AND
28946: IFFALSE 29044
28948: GO 28950
28950: DISABLE
28951: LD_INT 0
28953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28954: LD_ADDR_VAR 0 1
28958: PUSH
28959: LD_INT 22
28961: PUSH
28962: LD_OWVAR 2
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 21
28973: PUSH
28974: LD_INT 1
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PPUSH
28985: CALL_OW 69
28989: ST_TO_ADDR
// if not tmp then
28990: LD_VAR 0 1
28994: NOT
28995: IFFALSE 28999
// exit ;
28997: GO 29044
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28999: LD_VAR 0 1
29003: PUSH
29004: LD_INT 1
29006: PPUSH
29007: LD_VAR 0 1
29011: PPUSH
29012: CALL_OW 12
29016: ARRAY
29017: PPUSH
29018: LD_INT 1
29020: PPUSH
29021: LD_INT 4
29023: PPUSH
29024: CALL_OW 12
29028: PPUSH
29029: LD_INT 3000
29031: PPUSH
29032: LD_INT 9000
29034: PPUSH
29035: CALL_OW 12
29039: PPUSH
29040: CALL_OW 492
// end ;
29044: PPOPN 1
29046: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29047: LD_EXP 68
29051: PUSH
29052: LD_EXP 83
29056: AND
29057: IFFALSE 29077
29059: GO 29061
29061: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29062: LD_INT 1
29064: PPUSH
29065: LD_OWVAR 2
29069: PPUSH
29070: LD_INT 0
29072: PPUSH
29073: CALL_OW 324
29077: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29078: LD_EXP 68
29082: PUSH
29083: LD_EXP 84
29087: AND
29088: IFFALSE 29171
29090: GO 29092
29092: DISABLE
29093: LD_INT 0
29095: PPUSH
29096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29097: LD_ADDR_VAR 0 2
29101: PUSH
29102: LD_INT 22
29104: PUSH
29105: LD_OWVAR 2
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 21
29116: PUSH
29117: LD_INT 3
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PPUSH
29128: CALL_OW 69
29132: ST_TO_ADDR
// if not tmp then
29133: LD_VAR 0 2
29137: NOT
29138: IFFALSE 29142
// exit ;
29140: GO 29171
// for i in tmp do
29142: LD_ADDR_VAR 0 1
29146: PUSH
29147: LD_VAR 0 2
29151: PUSH
29152: FOR_IN
29153: IFFALSE 29169
// SetBLevel ( i , 10 ) ;
29155: LD_VAR 0 1
29159: PPUSH
29160: LD_INT 10
29162: PPUSH
29163: CALL_OW 241
29167: GO 29152
29169: POP
29170: POP
// end ;
29171: PPOPN 2
29173: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29174: LD_EXP 68
29178: PUSH
29179: LD_EXP 85
29183: AND
29184: IFFALSE 29295
29186: GO 29188
29188: DISABLE
29189: LD_INT 0
29191: PPUSH
29192: PPUSH
29193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29194: LD_ADDR_VAR 0 3
29198: PUSH
29199: LD_INT 22
29201: PUSH
29202: LD_OWVAR 2
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 25
29213: PUSH
29214: LD_INT 1
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PPUSH
29225: CALL_OW 69
29229: ST_TO_ADDR
// if not tmp then
29230: LD_VAR 0 3
29234: NOT
29235: IFFALSE 29239
// exit ;
29237: GO 29295
// un := tmp [ rand ( 1 , tmp ) ] ;
29239: LD_ADDR_VAR 0 2
29243: PUSH
29244: LD_VAR 0 3
29248: PUSH
29249: LD_INT 1
29251: PPUSH
29252: LD_VAR 0 3
29256: PPUSH
29257: CALL_OW 12
29261: ARRAY
29262: ST_TO_ADDR
// if Crawls ( un ) then
29263: LD_VAR 0 2
29267: PPUSH
29268: CALL_OW 318
29272: IFFALSE 29283
// ComWalk ( un ) ;
29274: LD_VAR 0 2
29278: PPUSH
29279: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29283: LD_VAR 0 2
29287: PPUSH
29288: LD_INT 5
29290: PPUSH
29291: CALL_OW 336
// end ;
29295: PPOPN 3
29297: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
29298: LD_EXP 68
29302: PUSH
29303: LD_EXP 86
29307: AND
29308: PUSH
29309: LD_OWVAR 67
29313: PUSH
29314: LD_INT 3
29316: LESS
29317: AND
29318: IFFALSE 29337
29320: GO 29322
29322: DISABLE
// Difficulty := Difficulty + 1 ;
29323: LD_ADDR_OWVAR 67
29327: PUSH
29328: LD_OWVAR 67
29332: PUSH
29333: LD_INT 1
29335: PLUS
29336: ST_TO_ADDR
29337: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29338: LD_EXP 68
29342: PUSH
29343: LD_EXP 87
29347: AND
29348: IFFALSE 29451
29350: GO 29352
29352: DISABLE
29353: LD_INT 0
29355: PPUSH
// begin for i := 1 to 5 do
29356: LD_ADDR_VAR 0 1
29360: PUSH
29361: DOUBLE
29362: LD_INT 1
29364: DEC
29365: ST_TO_ADDR
29366: LD_INT 5
29368: PUSH
29369: FOR_TO
29370: IFFALSE 29449
// begin uc_nation := nation_nature ;
29372: LD_ADDR_OWVAR 21
29376: PUSH
29377: LD_INT 0
29379: ST_TO_ADDR
// uc_side := 0 ;
29380: LD_ADDR_OWVAR 20
29384: PUSH
29385: LD_INT 0
29387: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29388: LD_ADDR_OWVAR 29
29392: PUSH
29393: LD_INT 12
29395: PUSH
29396: LD_INT 12
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: ST_TO_ADDR
// hc_agressivity := 20 ;
29403: LD_ADDR_OWVAR 35
29407: PUSH
29408: LD_INT 20
29410: ST_TO_ADDR
// hc_class := class_tiger ;
29411: LD_ADDR_OWVAR 28
29415: PUSH
29416: LD_INT 14
29418: ST_TO_ADDR
// hc_gallery :=  ;
29419: LD_ADDR_OWVAR 33
29423: PUSH
29424: LD_STRING 
29426: ST_TO_ADDR
// hc_name :=  ;
29427: LD_ADDR_OWVAR 26
29431: PUSH
29432: LD_STRING 
29434: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29435: CALL_OW 44
29439: PPUSH
29440: LD_INT 0
29442: PPUSH
29443: CALL_OW 51
// end ;
29447: GO 29369
29449: POP
29450: POP
// end ;
29451: PPOPN 1
29453: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29454: LD_EXP 68
29458: PUSH
29459: LD_EXP 88
29463: AND
29464: IFFALSE 29473
29466: GO 29468
29468: DISABLE
// StreamSibBomb ;
29469: CALL 29474 0 0
29473: END
// export function StreamSibBomb ; var i , x , y ; begin
29474: LD_INT 0
29476: PPUSH
29477: PPUSH
29478: PPUSH
29479: PPUSH
// result := false ;
29480: LD_ADDR_VAR 0 1
29484: PUSH
29485: LD_INT 0
29487: ST_TO_ADDR
// for i := 1 to 16 do
29488: LD_ADDR_VAR 0 2
29492: PUSH
29493: DOUBLE
29494: LD_INT 1
29496: DEC
29497: ST_TO_ADDR
29498: LD_INT 16
29500: PUSH
29501: FOR_TO
29502: IFFALSE 29701
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29504: LD_ADDR_VAR 0 3
29508: PUSH
29509: LD_INT 10
29511: PUSH
29512: LD_INT 20
29514: PUSH
29515: LD_INT 30
29517: PUSH
29518: LD_INT 40
29520: PUSH
29521: LD_INT 50
29523: PUSH
29524: LD_INT 60
29526: PUSH
29527: LD_INT 70
29529: PUSH
29530: LD_INT 80
29532: PUSH
29533: LD_INT 90
29535: PUSH
29536: LD_INT 100
29538: PUSH
29539: LD_INT 110
29541: PUSH
29542: LD_INT 120
29544: PUSH
29545: LD_INT 130
29547: PUSH
29548: LD_INT 140
29550: PUSH
29551: LD_INT 150
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 1
29573: PPUSH
29574: LD_INT 15
29576: PPUSH
29577: CALL_OW 12
29581: ARRAY
29582: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29583: LD_ADDR_VAR 0 4
29587: PUSH
29588: LD_INT 10
29590: PUSH
29591: LD_INT 20
29593: PUSH
29594: LD_INT 30
29596: PUSH
29597: LD_INT 40
29599: PUSH
29600: LD_INT 50
29602: PUSH
29603: LD_INT 60
29605: PUSH
29606: LD_INT 70
29608: PUSH
29609: LD_INT 80
29611: PUSH
29612: LD_INT 90
29614: PUSH
29615: LD_INT 100
29617: PUSH
29618: LD_INT 110
29620: PUSH
29621: LD_INT 120
29623: PUSH
29624: LD_INT 130
29626: PUSH
29627: LD_INT 140
29629: PUSH
29630: LD_INT 150
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 1
29652: PPUSH
29653: LD_INT 15
29655: PPUSH
29656: CALL_OW 12
29660: ARRAY
29661: ST_TO_ADDR
// if ValidHex ( x , y ) then
29662: LD_VAR 0 3
29666: PPUSH
29667: LD_VAR 0 4
29671: PPUSH
29672: CALL_OW 488
29676: IFFALSE 29699
// begin result := [ x , y ] ;
29678: LD_ADDR_VAR 0 1
29682: PUSH
29683: LD_VAR 0 3
29687: PUSH
29688: LD_VAR 0 4
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: ST_TO_ADDR
// break ;
29697: GO 29701
// end ; end ;
29699: GO 29501
29701: POP
29702: POP
// if result then
29703: LD_VAR 0 1
29707: IFFALSE 29767
// begin ToLua ( playSibBomb() ) ;
29709: LD_STRING playSibBomb()
29711: PPUSH
29712: CALL_OW 559
// wait ( 0 0$14 ) ;
29716: LD_INT 490
29718: PPUSH
29719: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29723: LD_VAR 0 1
29727: PUSH
29728: LD_INT 1
29730: ARRAY
29731: PPUSH
29732: LD_VAR 0 1
29736: PUSH
29737: LD_INT 2
29739: ARRAY
29740: PPUSH
29741: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29745: LD_VAR 0 1
29749: PUSH
29750: LD_INT 1
29752: ARRAY
29753: PPUSH
29754: LD_VAR 0 1
29758: PUSH
29759: LD_INT 2
29761: ARRAY
29762: PPUSH
29763: CALL_OW 429
// end ; end ;
29767: LD_VAR 0 1
29771: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29772: LD_EXP 68
29776: PUSH
29777: LD_EXP 90
29781: AND
29782: IFFALSE 29794
29784: GO 29786
29786: DISABLE
// YouLost (  ) ;
29787: LD_STRING 
29789: PPUSH
29790: CALL_OW 104
29794: END
// every 0 0$1 trigger StreamModeActive and sFog do
29795: LD_EXP 68
29799: PUSH
29800: LD_EXP 89
29804: AND
29805: IFFALSE 29819
29807: GO 29809
29809: DISABLE
// FogOff ( your_side ) ;
29810: LD_OWVAR 2
29814: PPUSH
29815: CALL_OW 344
29819: END
// every 0 0$1 trigger StreamModeActive and sSun do
29820: LD_EXP 68
29824: PUSH
29825: LD_EXP 91
29829: AND
29830: IFFALSE 29858
29832: GO 29834
29834: DISABLE
// begin solar_recharge_percent := 0 ;
29835: LD_ADDR_OWVAR 79
29839: PUSH
29840: LD_INT 0
29842: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29843: LD_INT 10500
29845: PPUSH
29846: CALL_OW 67
// solar_recharge_percent := 100 ;
29850: LD_ADDR_OWVAR 79
29854: PUSH
29855: LD_INT 100
29857: ST_TO_ADDR
// end ;
29858: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29859: LD_EXP 68
29863: PUSH
29864: LD_EXP 92
29868: AND
29869: IFFALSE 30108
29871: GO 29873
29873: DISABLE
29874: LD_INT 0
29876: PPUSH
29877: PPUSH
29878: PPUSH
// begin tmp := [ ] ;
29879: LD_ADDR_VAR 0 3
29883: PUSH
29884: EMPTY
29885: ST_TO_ADDR
// for i := 1 to 6 do
29886: LD_ADDR_VAR 0 1
29890: PUSH
29891: DOUBLE
29892: LD_INT 1
29894: DEC
29895: ST_TO_ADDR
29896: LD_INT 6
29898: PUSH
29899: FOR_TO
29900: IFFALSE 30005
// begin uc_nation := nation_nature ;
29902: LD_ADDR_OWVAR 21
29906: PUSH
29907: LD_INT 0
29909: ST_TO_ADDR
// uc_side := 0 ;
29910: LD_ADDR_OWVAR 20
29914: PUSH
29915: LD_INT 0
29917: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29918: LD_ADDR_OWVAR 29
29922: PUSH
29923: LD_INT 12
29925: PUSH
29926: LD_INT 12
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: ST_TO_ADDR
// hc_agressivity := 20 ;
29933: LD_ADDR_OWVAR 35
29937: PUSH
29938: LD_INT 20
29940: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29941: LD_ADDR_OWVAR 28
29945: PUSH
29946: LD_INT 17
29948: ST_TO_ADDR
// hc_gallery :=  ;
29949: LD_ADDR_OWVAR 33
29953: PUSH
29954: LD_STRING 
29956: ST_TO_ADDR
// hc_name :=  ;
29957: LD_ADDR_OWVAR 26
29961: PUSH
29962: LD_STRING 
29964: ST_TO_ADDR
// un := CreateHuman ;
29965: LD_ADDR_VAR 0 2
29969: PUSH
29970: CALL_OW 44
29974: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29975: LD_VAR 0 2
29979: PPUSH
29980: LD_INT 1
29982: PPUSH
29983: CALL_OW 51
// tmp := tmp ^ un ;
29987: LD_ADDR_VAR 0 3
29991: PUSH
29992: LD_VAR 0 3
29996: PUSH
29997: LD_VAR 0 2
30001: ADD
30002: ST_TO_ADDR
// end ;
30003: GO 29899
30005: POP
30006: POP
// repeat wait ( 0 0$1 ) ;
30007: LD_INT 35
30009: PPUSH
30010: CALL_OW 67
// for un in tmp do
30014: LD_ADDR_VAR 0 2
30018: PUSH
30019: LD_VAR 0 3
30023: PUSH
30024: FOR_IN
30025: IFFALSE 30099
// begin if IsDead ( un ) then
30027: LD_VAR 0 2
30031: PPUSH
30032: CALL_OW 301
30036: IFFALSE 30056
// begin tmp := tmp diff un ;
30038: LD_ADDR_VAR 0 3
30042: PUSH
30043: LD_VAR 0 3
30047: PUSH
30048: LD_VAR 0 2
30052: DIFF
30053: ST_TO_ADDR
// continue ;
30054: GO 30024
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30056: LD_VAR 0 2
30060: PPUSH
30061: LD_INT 3
30063: PUSH
30064: LD_INT 22
30066: PUSH
30067: LD_INT 0
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PPUSH
30078: CALL_OW 69
30082: PPUSH
30083: LD_VAR 0 2
30087: PPUSH
30088: CALL_OW 74
30092: PPUSH
30093: CALL_OW 115
// end ;
30097: GO 30024
30099: POP
30100: POP
// until not tmp ;
30101: LD_VAR 0 3
30105: NOT
30106: IFFALSE 30007
// end ;
30108: PPOPN 3
30110: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30111: LD_EXP 68
30115: PUSH
30116: LD_EXP 93
30120: AND
30121: IFFALSE 30175
30123: GO 30125
30125: DISABLE
// begin ToLua ( displayTroll(); ) ;
30126: LD_STRING displayTroll();
30128: PPUSH
30129: CALL_OW 559
// wait ( 3 3$00 ) ;
30133: LD_INT 6300
30135: PPUSH
30136: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30140: LD_STRING hideTroll();
30142: PPUSH
30143: CALL_OW 559
// wait ( 1 1$00 ) ;
30147: LD_INT 2100
30149: PPUSH
30150: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30154: LD_STRING displayTroll();
30156: PPUSH
30157: CALL_OW 559
// wait ( 1 1$00 ) ;
30161: LD_INT 2100
30163: PPUSH
30164: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30168: LD_STRING hideTroll();
30170: PPUSH
30171: CALL_OW 559
// end ;
30175: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30176: LD_EXP 68
30180: PUSH
30181: LD_EXP 94
30185: AND
30186: IFFALSE 30249
30188: GO 30190
30190: DISABLE
30191: LD_INT 0
30193: PPUSH
// begin p := 0 ;
30194: LD_ADDR_VAR 0 1
30198: PUSH
30199: LD_INT 0
30201: ST_TO_ADDR
// repeat game_speed := 1 ;
30202: LD_ADDR_OWVAR 65
30206: PUSH
30207: LD_INT 1
30209: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30210: LD_INT 35
30212: PPUSH
30213: CALL_OW 67
// p := p + 1 ;
30217: LD_ADDR_VAR 0 1
30221: PUSH
30222: LD_VAR 0 1
30226: PUSH
30227: LD_INT 1
30229: PLUS
30230: ST_TO_ADDR
// until p >= 60 ;
30231: LD_VAR 0 1
30235: PUSH
30236: LD_INT 60
30238: GREATEREQUAL
30239: IFFALSE 30202
// game_speed := 4 ;
30241: LD_ADDR_OWVAR 65
30245: PUSH
30246: LD_INT 4
30248: ST_TO_ADDR
// end ;
30249: PPOPN 1
30251: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30252: LD_EXP 68
30256: PUSH
30257: LD_EXP 95
30261: AND
30262: IFFALSE 30408
30264: GO 30266
30266: DISABLE
30267: LD_INT 0
30269: PPUSH
30270: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30271: LD_ADDR_VAR 0 1
30275: PUSH
30276: LD_INT 22
30278: PUSH
30279: LD_OWVAR 2
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 2
30290: PUSH
30291: LD_INT 30
30293: PUSH
30294: LD_INT 0
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 30
30303: PUSH
30304: LD_INT 1
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: LIST
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PPUSH
30320: CALL_OW 69
30324: ST_TO_ADDR
// if not depot then
30325: LD_VAR 0 1
30329: NOT
30330: IFFALSE 30334
// exit ;
30332: GO 30408
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30334: LD_ADDR_VAR 0 2
30338: PUSH
30339: LD_VAR 0 1
30343: PUSH
30344: LD_INT 1
30346: PPUSH
30347: LD_VAR 0 1
30351: PPUSH
30352: CALL_OW 12
30356: ARRAY
30357: PPUSH
30358: CALL_OW 274
30362: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30363: LD_VAR 0 2
30367: PPUSH
30368: LD_INT 1
30370: PPUSH
30371: LD_INT 0
30373: PPUSH
30374: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30378: LD_VAR 0 2
30382: PPUSH
30383: LD_INT 2
30385: PPUSH
30386: LD_INT 0
30388: PPUSH
30389: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30393: LD_VAR 0 2
30397: PPUSH
30398: LD_INT 3
30400: PPUSH
30401: LD_INT 0
30403: PPUSH
30404: CALL_OW 277
// end ;
30408: PPOPN 2
30410: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30411: LD_EXP 68
30415: PUSH
30416: LD_EXP 96
30420: AND
30421: IFFALSE 30518
30423: GO 30425
30425: DISABLE
30426: LD_INT 0
30428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30429: LD_ADDR_VAR 0 1
30433: PUSH
30434: LD_INT 22
30436: PUSH
30437: LD_OWVAR 2
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 21
30448: PUSH
30449: LD_INT 1
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 3
30458: PUSH
30459: LD_INT 23
30461: PUSH
30462: LD_INT 0
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: LIST
30477: PPUSH
30478: CALL_OW 69
30482: ST_TO_ADDR
// if not tmp then
30483: LD_VAR 0 1
30487: NOT
30488: IFFALSE 30492
// exit ;
30490: GO 30518
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30492: LD_VAR 0 1
30496: PUSH
30497: LD_INT 1
30499: PPUSH
30500: LD_VAR 0 1
30504: PPUSH
30505: CALL_OW 12
30509: ARRAY
30510: PPUSH
30511: LD_INT 200
30513: PPUSH
30514: CALL_OW 234
// end ;
30518: PPOPN 1
30520: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30521: LD_EXP 68
30525: PUSH
30526: LD_EXP 97
30530: AND
30531: IFFALSE 30610
30533: GO 30535
30535: DISABLE
30536: LD_INT 0
30538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30539: LD_ADDR_VAR 0 1
30543: PUSH
30544: LD_INT 22
30546: PUSH
30547: LD_OWVAR 2
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 21
30558: PUSH
30559: LD_INT 2
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PPUSH
30570: CALL_OW 69
30574: ST_TO_ADDR
// if not tmp then
30575: LD_VAR 0 1
30579: NOT
30580: IFFALSE 30584
// exit ;
30582: GO 30610
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30584: LD_VAR 0 1
30588: PUSH
30589: LD_INT 1
30591: PPUSH
30592: LD_VAR 0 1
30596: PPUSH
30597: CALL_OW 12
30601: ARRAY
30602: PPUSH
30603: LD_INT 60
30605: PPUSH
30606: CALL_OW 234
// end ;
30610: PPOPN 1
30612: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30613: LD_EXP 68
30617: PUSH
30618: LD_EXP 98
30622: AND
30623: IFFALSE 30722
30625: GO 30627
30627: DISABLE
30628: LD_INT 0
30630: PPUSH
30631: PPUSH
// begin enable ;
30632: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30633: LD_ADDR_VAR 0 1
30637: PUSH
30638: LD_INT 22
30640: PUSH
30641: LD_OWVAR 2
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 61
30652: PUSH
30653: EMPTY
30654: LIST
30655: PUSH
30656: LD_INT 33
30658: PUSH
30659: LD_INT 2
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: LIST
30670: PPUSH
30671: CALL_OW 69
30675: ST_TO_ADDR
// if not tmp then
30676: LD_VAR 0 1
30680: NOT
30681: IFFALSE 30685
// exit ;
30683: GO 30722
// for i in tmp do
30685: LD_ADDR_VAR 0 2
30689: PUSH
30690: LD_VAR 0 1
30694: PUSH
30695: FOR_IN
30696: IFFALSE 30720
// if IsControledBy ( i ) then
30698: LD_VAR 0 2
30702: PPUSH
30703: CALL_OW 312
30707: IFFALSE 30718
// ComUnlink ( i ) ;
30709: LD_VAR 0 2
30713: PPUSH
30714: CALL_OW 136
30718: GO 30695
30720: POP
30721: POP
// end ;
30722: PPOPN 2
30724: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30725: LD_EXP 68
30729: PUSH
30730: LD_EXP 99
30734: AND
30735: IFFALSE 30875
30737: GO 30739
30739: DISABLE
30740: LD_INT 0
30742: PPUSH
30743: PPUSH
// begin ToLua ( displayPowell(); ) ;
30744: LD_STRING displayPowell();
30746: PPUSH
30747: CALL_OW 559
// uc_side := 0 ;
30751: LD_ADDR_OWVAR 20
30755: PUSH
30756: LD_INT 0
30758: ST_TO_ADDR
// uc_nation := 2 ;
30759: LD_ADDR_OWVAR 21
30763: PUSH
30764: LD_INT 2
30766: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30767: LD_ADDR_OWVAR 37
30771: PUSH
30772: LD_INT 14
30774: ST_TO_ADDR
// vc_engine := engine_siberite ;
30775: LD_ADDR_OWVAR 39
30779: PUSH
30780: LD_INT 3
30782: ST_TO_ADDR
// vc_control := control_apeman ;
30783: LD_ADDR_OWVAR 38
30787: PUSH
30788: LD_INT 5
30790: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30791: LD_ADDR_OWVAR 40
30795: PUSH
30796: LD_INT 29
30798: ST_TO_ADDR
// un := CreateVehicle ;
30799: LD_ADDR_VAR 0 2
30803: PUSH
30804: CALL_OW 45
30808: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30809: LD_VAR 0 2
30813: PPUSH
30814: LD_INT 1
30816: PPUSH
30817: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30821: LD_INT 35
30823: PPUSH
30824: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30828: LD_VAR 0 2
30832: PPUSH
30833: LD_INT 22
30835: PUSH
30836: LD_OWVAR 2
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PPUSH
30845: CALL_OW 69
30849: PPUSH
30850: LD_VAR 0 2
30854: PPUSH
30855: CALL_OW 74
30859: PPUSH
30860: CALL_OW 115
// until IsDead ( un ) ;
30864: LD_VAR 0 2
30868: PPUSH
30869: CALL_OW 301
30873: IFFALSE 30821
// end ;
30875: PPOPN 2
30877: END
// every 0 0$1 trigger StreamModeActive and sStu do
30878: LD_EXP 68
30882: PUSH
30883: LD_EXP 107
30887: AND
30888: IFFALSE 30904
30890: GO 30892
30892: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30893: LD_STRING displayStucuk();
30895: PPUSH
30896: CALL_OW 559
// ResetFog ;
30900: CALL_OW 335
// end ;
30904: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30905: LD_EXP 68
30909: PUSH
30910: LD_EXP 100
30914: AND
30915: IFFALSE 31056
30917: GO 30919
30919: DISABLE
30920: LD_INT 0
30922: PPUSH
30923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30924: LD_ADDR_VAR 0 2
30928: PUSH
30929: LD_INT 22
30931: PUSH
30932: LD_OWVAR 2
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 21
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PPUSH
30955: CALL_OW 69
30959: ST_TO_ADDR
// if not tmp then
30960: LD_VAR 0 2
30964: NOT
30965: IFFALSE 30969
// exit ;
30967: GO 31056
// un := tmp [ rand ( 1 , tmp ) ] ;
30969: LD_ADDR_VAR 0 1
30973: PUSH
30974: LD_VAR 0 2
30978: PUSH
30979: LD_INT 1
30981: PPUSH
30982: LD_VAR 0 2
30986: PPUSH
30987: CALL_OW 12
30991: ARRAY
30992: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30993: LD_VAR 0 1
30997: PPUSH
30998: LD_INT 0
31000: PPUSH
31001: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31005: LD_VAR 0 1
31009: PPUSH
31010: LD_OWVAR 3
31014: PUSH
31015: LD_VAR 0 1
31019: DIFF
31020: PPUSH
31021: LD_VAR 0 1
31025: PPUSH
31026: CALL_OW 74
31030: PPUSH
31031: CALL_OW 115
// wait ( 0 0$20 ) ;
31035: LD_INT 700
31037: PPUSH
31038: CALL_OW 67
// SetSide ( un , your_side ) ;
31042: LD_VAR 0 1
31046: PPUSH
31047: LD_OWVAR 2
31051: PPUSH
31052: CALL_OW 235
// end ;
31056: PPOPN 2
31058: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31059: LD_EXP 68
31063: PUSH
31064: LD_EXP 101
31068: AND
31069: IFFALSE 31175
31071: GO 31073
31073: DISABLE
31074: LD_INT 0
31076: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31077: LD_ADDR_VAR 0 1
31081: PUSH
31082: LD_INT 22
31084: PUSH
31085: LD_OWVAR 2
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 2
31096: PUSH
31097: LD_INT 30
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 30
31109: PUSH
31110: LD_INT 1
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: LIST
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PPUSH
31126: CALL_OW 69
31130: ST_TO_ADDR
// if not depot then
31131: LD_VAR 0 1
31135: NOT
31136: IFFALSE 31140
// exit ;
31138: GO 31175
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31140: LD_VAR 0 1
31144: PUSH
31145: LD_INT 1
31147: ARRAY
31148: PPUSH
31149: CALL_OW 250
31153: PPUSH
31154: LD_VAR 0 1
31158: PUSH
31159: LD_INT 1
31161: ARRAY
31162: PPUSH
31163: CALL_OW 251
31167: PPUSH
31168: LD_INT 70
31170: PPUSH
31171: CALL_OW 495
// end ;
31175: PPOPN 1
31177: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31178: LD_EXP 68
31182: PUSH
31183: LD_EXP 102
31187: AND
31188: IFFALSE 31399
31190: GO 31192
31192: DISABLE
31193: LD_INT 0
31195: PPUSH
31196: PPUSH
31197: PPUSH
31198: PPUSH
31199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31200: LD_ADDR_VAR 0 5
31204: PUSH
31205: LD_INT 22
31207: PUSH
31208: LD_OWVAR 2
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 21
31219: PUSH
31220: LD_INT 1
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PPUSH
31231: CALL_OW 69
31235: ST_TO_ADDR
// if not tmp then
31236: LD_VAR 0 5
31240: NOT
31241: IFFALSE 31245
// exit ;
31243: GO 31399
// for i in tmp do
31245: LD_ADDR_VAR 0 1
31249: PUSH
31250: LD_VAR 0 5
31254: PUSH
31255: FOR_IN
31256: IFFALSE 31397
// begin d := rand ( 0 , 5 ) ;
31258: LD_ADDR_VAR 0 4
31262: PUSH
31263: LD_INT 0
31265: PPUSH
31266: LD_INT 5
31268: PPUSH
31269: CALL_OW 12
31273: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31274: LD_ADDR_VAR 0 2
31278: PUSH
31279: LD_VAR 0 1
31283: PPUSH
31284: CALL_OW 250
31288: PPUSH
31289: LD_VAR 0 4
31293: PPUSH
31294: LD_INT 3
31296: PPUSH
31297: LD_INT 12
31299: PPUSH
31300: CALL_OW 12
31304: PPUSH
31305: CALL_OW 272
31309: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31310: LD_ADDR_VAR 0 3
31314: PUSH
31315: LD_VAR 0 1
31319: PPUSH
31320: CALL_OW 251
31324: PPUSH
31325: LD_VAR 0 4
31329: PPUSH
31330: LD_INT 3
31332: PPUSH
31333: LD_INT 12
31335: PPUSH
31336: CALL_OW 12
31340: PPUSH
31341: CALL_OW 273
31345: ST_TO_ADDR
// if ValidHex ( x , y ) then
31346: LD_VAR 0 2
31350: PPUSH
31351: LD_VAR 0 3
31355: PPUSH
31356: CALL_OW 488
31360: IFFALSE 31395
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31362: LD_VAR 0 1
31366: PPUSH
31367: LD_VAR 0 2
31371: PPUSH
31372: LD_VAR 0 3
31376: PPUSH
31377: LD_INT 3
31379: PPUSH
31380: LD_INT 6
31382: PPUSH
31383: CALL_OW 12
31387: PPUSH
31388: LD_INT 1
31390: PPUSH
31391: CALL_OW 483
// end ;
31395: GO 31255
31397: POP
31398: POP
// end ;
31399: PPOPN 5
31401: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31402: LD_EXP 68
31406: PUSH
31407: LD_EXP 103
31411: AND
31412: IFFALSE 31506
31414: GO 31416
31416: DISABLE
31417: LD_INT 0
31419: PPUSH
31420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31421: LD_ADDR_VAR 0 2
31425: PUSH
31426: LD_INT 22
31428: PUSH
31429: LD_OWVAR 2
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 32
31440: PUSH
31441: LD_INT 1
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 21
31450: PUSH
31451: LD_INT 2
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: LIST
31462: PPUSH
31463: CALL_OW 69
31467: ST_TO_ADDR
// if not tmp then
31468: LD_VAR 0 2
31472: NOT
31473: IFFALSE 31477
// exit ;
31475: GO 31506
// for i in tmp do
31477: LD_ADDR_VAR 0 1
31481: PUSH
31482: LD_VAR 0 2
31486: PUSH
31487: FOR_IN
31488: IFFALSE 31504
// SetFuel ( i , 0 ) ;
31490: LD_VAR 0 1
31494: PPUSH
31495: LD_INT 0
31497: PPUSH
31498: CALL_OW 240
31502: GO 31487
31504: POP
31505: POP
// end ;
31506: PPOPN 2
31508: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31509: LD_EXP 68
31513: PUSH
31514: LD_EXP 104
31518: AND
31519: IFFALSE 31585
31521: GO 31523
31523: DISABLE
31524: LD_INT 0
31526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31527: LD_ADDR_VAR 0 1
31531: PUSH
31532: LD_INT 22
31534: PUSH
31535: LD_OWVAR 2
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 30
31546: PUSH
31547: LD_INT 29
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PPUSH
31558: CALL_OW 69
31562: ST_TO_ADDR
// if not tmp then
31563: LD_VAR 0 1
31567: NOT
31568: IFFALSE 31572
// exit ;
31570: GO 31585
// DestroyUnit ( tmp [ 1 ] ) ;
31572: LD_VAR 0 1
31576: PUSH
31577: LD_INT 1
31579: ARRAY
31580: PPUSH
31581: CALL_OW 65
// end ;
31585: PPOPN 1
31587: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31588: LD_EXP 68
31592: PUSH
31593: LD_EXP 106
31597: AND
31598: IFFALSE 31727
31600: GO 31602
31602: DISABLE
31603: LD_INT 0
31605: PPUSH
// begin uc_side := 0 ;
31606: LD_ADDR_OWVAR 20
31610: PUSH
31611: LD_INT 0
31613: ST_TO_ADDR
// uc_nation := nation_arabian ;
31614: LD_ADDR_OWVAR 21
31618: PUSH
31619: LD_INT 2
31621: ST_TO_ADDR
// hc_gallery :=  ;
31622: LD_ADDR_OWVAR 33
31626: PUSH
31627: LD_STRING 
31629: ST_TO_ADDR
// hc_name :=  ;
31630: LD_ADDR_OWVAR 26
31634: PUSH
31635: LD_STRING 
31637: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31638: LD_INT 1
31640: PPUSH
31641: LD_INT 11
31643: PPUSH
31644: LD_INT 10
31646: PPUSH
31647: CALL_OW 380
// un := CreateHuman ;
31651: LD_ADDR_VAR 0 1
31655: PUSH
31656: CALL_OW 44
31660: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31661: LD_VAR 0 1
31665: PPUSH
31666: LD_INT 1
31668: PPUSH
31669: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31673: LD_INT 35
31675: PPUSH
31676: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31680: LD_VAR 0 1
31684: PPUSH
31685: LD_INT 22
31687: PUSH
31688: LD_OWVAR 2
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PPUSH
31697: CALL_OW 69
31701: PPUSH
31702: LD_VAR 0 1
31706: PPUSH
31707: CALL_OW 74
31711: PPUSH
31712: CALL_OW 115
// until IsDead ( un ) ;
31716: LD_VAR 0 1
31720: PPUSH
31721: CALL_OW 301
31725: IFFALSE 31673
// end ;
31727: PPOPN 1
31729: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31730: LD_EXP 68
31734: PUSH
31735: LD_EXP 108
31739: AND
31740: IFFALSE 31752
31742: GO 31744
31744: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31745: LD_STRING earthquake(getX(game), 0, 32)
31747: PPUSH
31748: CALL_OW 559
31752: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31753: LD_EXP 68
31757: PUSH
31758: LD_EXP 109
31762: AND
31763: IFFALSE 31854
31765: GO 31767
31767: DISABLE
31768: LD_INT 0
31770: PPUSH
// begin enable ;
31771: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31772: LD_ADDR_VAR 0 1
31776: PUSH
31777: LD_INT 22
31779: PUSH
31780: LD_OWVAR 2
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 21
31791: PUSH
31792: LD_INT 2
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 33
31801: PUSH
31802: LD_INT 3
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: LIST
31813: PPUSH
31814: CALL_OW 69
31818: ST_TO_ADDR
// if not tmp then
31819: LD_VAR 0 1
31823: NOT
31824: IFFALSE 31828
// exit ;
31826: GO 31854
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31828: LD_VAR 0 1
31832: PUSH
31833: LD_INT 1
31835: PPUSH
31836: LD_VAR 0 1
31840: PPUSH
31841: CALL_OW 12
31845: ARRAY
31846: PPUSH
31847: LD_INT 1
31849: PPUSH
31850: CALL_OW 234
// end ;
31854: PPOPN 1
31856: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31857: LD_EXP 68
31861: PUSH
31862: LD_EXP 110
31866: AND
31867: IFFALSE 32008
31869: GO 31871
31871: DISABLE
31872: LD_INT 0
31874: PPUSH
31875: PPUSH
31876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31877: LD_ADDR_VAR 0 3
31881: PUSH
31882: LD_INT 22
31884: PUSH
31885: LD_OWVAR 2
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 25
31896: PUSH
31897: LD_INT 1
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PPUSH
31908: CALL_OW 69
31912: ST_TO_ADDR
// if not tmp then
31913: LD_VAR 0 3
31917: NOT
31918: IFFALSE 31922
// exit ;
31920: GO 32008
// un := tmp [ rand ( 1 , tmp ) ] ;
31922: LD_ADDR_VAR 0 2
31926: PUSH
31927: LD_VAR 0 3
31931: PUSH
31932: LD_INT 1
31934: PPUSH
31935: LD_VAR 0 3
31939: PPUSH
31940: CALL_OW 12
31944: ARRAY
31945: ST_TO_ADDR
// if Crawls ( un ) then
31946: LD_VAR 0 2
31950: PPUSH
31951: CALL_OW 318
31955: IFFALSE 31966
// ComWalk ( un ) ;
31957: LD_VAR 0 2
31961: PPUSH
31962: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31966: LD_VAR 0 2
31970: PPUSH
31971: LD_INT 9
31973: PPUSH
31974: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31978: LD_INT 28
31980: PPUSH
31981: LD_OWVAR 2
31985: PPUSH
31986: LD_INT 2
31988: PPUSH
31989: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31993: LD_INT 29
31995: PPUSH
31996: LD_OWVAR 2
32000: PPUSH
32001: LD_INT 2
32003: PPUSH
32004: CALL_OW 322
// end ;
32008: PPOPN 3
32010: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32011: LD_EXP 68
32015: PUSH
32016: LD_EXP 111
32020: AND
32021: IFFALSE 32132
32023: GO 32025
32025: DISABLE
32026: LD_INT 0
32028: PPUSH
32029: PPUSH
32030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32031: LD_ADDR_VAR 0 3
32035: PUSH
32036: LD_INT 22
32038: PUSH
32039: LD_OWVAR 2
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 25
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PPUSH
32062: CALL_OW 69
32066: ST_TO_ADDR
// if not tmp then
32067: LD_VAR 0 3
32071: NOT
32072: IFFALSE 32076
// exit ;
32074: GO 32132
// un := tmp [ rand ( 1 , tmp ) ] ;
32076: LD_ADDR_VAR 0 2
32080: PUSH
32081: LD_VAR 0 3
32085: PUSH
32086: LD_INT 1
32088: PPUSH
32089: LD_VAR 0 3
32093: PPUSH
32094: CALL_OW 12
32098: ARRAY
32099: ST_TO_ADDR
// if Crawls ( un ) then
32100: LD_VAR 0 2
32104: PPUSH
32105: CALL_OW 318
32109: IFFALSE 32120
// ComWalk ( un ) ;
32111: LD_VAR 0 2
32115: PPUSH
32116: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32120: LD_VAR 0 2
32124: PPUSH
32125: LD_INT 8
32127: PPUSH
32128: CALL_OW 336
// end ;
32132: PPOPN 3
32134: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32135: LD_EXP 68
32139: PUSH
32140: LD_EXP 112
32144: AND
32145: IFFALSE 32289
32147: GO 32149
32149: DISABLE
32150: LD_INT 0
32152: PPUSH
32153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32154: LD_ADDR_VAR 0 2
32158: PUSH
32159: LD_INT 22
32161: PUSH
32162: LD_OWVAR 2
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 21
32173: PUSH
32174: LD_INT 2
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 2
32183: PUSH
32184: LD_INT 34
32186: PUSH
32187: LD_INT 12
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 34
32196: PUSH
32197: LD_INT 51
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 34
32206: PUSH
32207: LD_INT 32
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: LIST
32224: PPUSH
32225: CALL_OW 69
32229: ST_TO_ADDR
// if not tmp then
32230: LD_VAR 0 2
32234: NOT
32235: IFFALSE 32239
// exit ;
32237: GO 32289
// for i in tmp do
32239: LD_ADDR_VAR 0 1
32243: PUSH
32244: LD_VAR 0 2
32248: PUSH
32249: FOR_IN
32250: IFFALSE 32287
// if GetCargo ( i , mat_artifact ) = 0 then
32252: LD_VAR 0 1
32256: PPUSH
32257: LD_INT 4
32259: PPUSH
32260: CALL_OW 289
32264: PUSH
32265: LD_INT 0
32267: EQUAL
32268: IFFALSE 32285
// SetCargo ( i , mat_siberit , 100 ) ;
32270: LD_VAR 0 1
32274: PPUSH
32275: LD_INT 3
32277: PPUSH
32278: LD_INT 100
32280: PPUSH
32281: CALL_OW 290
32285: GO 32249
32287: POP
32288: POP
// end ;
32289: PPOPN 2
32291: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32292: LD_EXP 68
32296: PUSH
32297: LD_EXP 113
32301: AND
32302: IFFALSE 32485
32304: GO 32306
32306: DISABLE
32307: LD_INT 0
32309: PPUSH
32310: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32311: LD_ADDR_VAR 0 2
32315: PUSH
32316: LD_INT 22
32318: PUSH
32319: LD_OWVAR 2
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PPUSH
32328: CALL_OW 69
32332: ST_TO_ADDR
// if not tmp then
32333: LD_VAR 0 2
32337: NOT
32338: IFFALSE 32342
// exit ;
32340: GO 32485
// for i := 1 to 2 do
32342: LD_ADDR_VAR 0 1
32346: PUSH
32347: DOUBLE
32348: LD_INT 1
32350: DEC
32351: ST_TO_ADDR
32352: LD_INT 2
32354: PUSH
32355: FOR_TO
32356: IFFALSE 32483
// begin uc_side := your_side ;
32358: LD_ADDR_OWVAR 20
32362: PUSH
32363: LD_OWVAR 2
32367: ST_TO_ADDR
// uc_nation := nation_american ;
32368: LD_ADDR_OWVAR 21
32372: PUSH
32373: LD_INT 1
32375: ST_TO_ADDR
// vc_chassis := us_morphling ;
32376: LD_ADDR_OWVAR 37
32380: PUSH
32381: LD_INT 5
32383: ST_TO_ADDR
// vc_engine := engine_siberite ;
32384: LD_ADDR_OWVAR 39
32388: PUSH
32389: LD_INT 3
32391: ST_TO_ADDR
// vc_control := control_computer ;
32392: LD_ADDR_OWVAR 38
32396: PUSH
32397: LD_INT 3
32399: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32400: LD_ADDR_OWVAR 40
32404: PUSH
32405: LD_INT 10
32407: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32408: LD_VAR 0 2
32412: PUSH
32413: LD_INT 1
32415: ARRAY
32416: PPUSH
32417: CALL_OW 310
32421: NOT
32422: IFFALSE 32469
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32424: CALL_OW 45
32428: PPUSH
32429: LD_VAR 0 2
32433: PUSH
32434: LD_INT 1
32436: ARRAY
32437: PPUSH
32438: CALL_OW 250
32442: PPUSH
32443: LD_VAR 0 2
32447: PUSH
32448: LD_INT 1
32450: ARRAY
32451: PPUSH
32452: CALL_OW 251
32456: PPUSH
32457: LD_INT 12
32459: PPUSH
32460: LD_INT 1
32462: PPUSH
32463: CALL_OW 50
32467: GO 32481
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32469: CALL_OW 45
32473: PPUSH
32474: LD_INT 1
32476: PPUSH
32477: CALL_OW 51
// end ;
32481: GO 32355
32483: POP
32484: POP
// end ;
32485: PPOPN 2
32487: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32488: LD_EXP 68
32492: PUSH
32493: LD_EXP 114
32497: AND
32498: IFFALSE 32720
32500: GO 32502
32502: DISABLE
32503: LD_INT 0
32505: PPUSH
32506: PPUSH
32507: PPUSH
32508: PPUSH
32509: PPUSH
32510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32511: LD_ADDR_VAR 0 6
32515: PUSH
32516: LD_INT 22
32518: PUSH
32519: LD_OWVAR 2
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 21
32530: PUSH
32531: LD_INT 1
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 3
32540: PUSH
32541: LD_INT 23
32543: PUSH
32544: LD_INT 0
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: LIST
32559: PPUSH
32560: CALL_OW 69
32564: ST_TO_ADDR
// if not tmp then
32565: LD_VAR 0 6
32569: NOT
32570: IFFALSE 32574
// exit ;
32572: GO 32720
// s1 := rand ( 1 , 4 ) ;
32574: LD_ADDR_VAR 0 2
32578: PUSH
32579: LD_INT 1
32581: PPUSH
32582: LD_INT 4
32584: PPUSH
32585: CALL_OW 12
32589: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32590: LD_ADDR_VAR 0 4
32594: PUSH
32595: LD_VAR 0 6
32599: PUSH
32600: LD_INT 1
32602: ARRAY
32603: PPUSH
32604: LD_VAR 0 2
32608: PPUSH
32609: CALL_OW 259
32613: ST_TO_ADDR
// if s1 = 1 then
32614: LD_VAR 0 2
32618: PUSH
32619: LD_INT 1
32621: EQUAL
32622: IFFALSE 32642
// s2 := rand ( 2 , 4 ) else
32624: LD_ADDR_VAR 0 3
32628: PUSH
32629: LD_INT 2
32631: PPUSH
32632: LD_INT 4
32634: PPUSH
32635: CALL_OW 12
32639: ST_TO_ADDR
32640: GO 32650
// s2 := 1 ;
32642: LD_ADDR_VAR 0 3
32646: PUSH
32647: LD_INT 1
32649: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32650: LD_ADDR_VAR 0 5
32654: PUSH
32655: LD_VAR 0 6
32659: PUSH
32660: LD_INT 1
32662: ARRAY
32663: PPUSH
32664: LD_VAR 0 3
32668: PPUSH
32669: CALL_OW 259
32673: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32674: LD_VAR 0 6
32678: PUSH
32679: LD_INT 1
32681: ARRAY
32682: PPUSH
32683: LD_VAR 0 2
32687: PPUSH
32688: LD_VAR 0 5
32692: PPUSH
32693: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32697: LD_VAR 0 6
32701: PUSH
32702: LD_INT 1
32704: ARRAY
32705: PPUSH
32706: LD_VAR 0 3
32710: PPUSH
32711: LD_VAR 0 4
32715: PPUSH
32716: CALL_OW 237
// end ;
32720: PPOPN 6
32722: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32723: LD_EXP 68
32727: PUSH
32728: LD_EXP 115
32732: AND
32733: IFFALSE 32812
32735: GO 32737
32737: DISABLE
32738: LD_INT 0
32740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32741: LD_ADDR_VAR 0 1
32745: PUSH
32746: LD_INT 22
32748: PUSH
32749: LD_OWVAR 2
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 30
32760: PUSH
32761: LD_INT 3
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PPUSH
32772: CALL_OW 69
32776: ST_TO_ADDR
// if not tmp then
32777: LD_VAR 0 1
32781: NOT
32782: IFFALSE 32786
// exit ;
32784: GO 32812
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32786: LD_VAR 0 1
32790: PUSH
32791: LD_INT 1
32793: PPUSH
32794: LD_VAR 0 1
32798: PPUSH
32799: CALL_OW 12
32803: ARRAY
32804: PPUSH
32805: LD_INT 1
32807: PPUSH
32808: CALL_OW 234
// end ;
32812: PPOPN 1
32814: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32815: LD_EXP 68
32819: PUSH
32820: LD_EXP 116
32824: AND
32825: IFFALSE 32937
32827: GO 32829
32829: DISABLE
32830: LD_INT 0
32832: PPUSH
32833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32834: LD_ADDR_VAR 0 2
32838: PUSH
32839: LD_INT 22
32841: PUSH
32842: LD_OWVAR 2
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 2
32853: PUSH
32854: LD_INT 30
32856: PUSH
32857: LD_INT 27
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 30
32866: PUSH
32867: LD_INT 26
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 30
32876: PUSH
32877: LD_INT 28
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PPUSH
32894: CALL_OW 69
32898: ST_TO_ADDR
// if not tmp then
32899: LD_VAR 0 2
32903: NOT
32904: IFFALSE 32908
// exit ;
32906: GO 32937
// for i in tmp do
32908: LD_ADDR_VAR 0 1
32912: PUSH
32913: LD_VAR 0 2
32917: PUSH
32918: FOR_IN
32919: IFFALSE 32935
// SetLives ( i , 1 ) ;
32921: LD_VAR 0 1
32925: PPUSH
32926: LD_INT 1
32928: PPUSH
32929: CALL_OW 234
32933: GO 32918
32935: POP
32936: POP
// end ;
32937: PPOPN 2
32939: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32940: LD_EXP 68
32944: PUSH
32945: LD_EXP 117
32949: AND
32950: IFFALSE 33224
32952: GO 32954
32954: DISABLE
32955: LD_INT 0
32957: PPUSH
32958: PPUSH
32959: PPUSH
// begin i := rand ( 1 , 7 ) ;
32960: LD_ADDR_VAR 0 1
32964: PUSH
32965: LD_INT 1
32967: PPUSH
32968: LD_INT 7
32970: PPUSH
32971: CALL_OW 12
32975: ST_TO_ADDR
// case i of 1 :
32976: LD_VAR 0 1
32980: PUSH
32981: LD_INT 1
32983: DOUBLE
32984: EQUAL
32985: IFTRUE 32989
32987: GO 32999
32989: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32990: LD_STRING earthquake(getX(game), 0, 32)
32992: PPUSH
32993: CALL_OW 559
32997: GO 33224
32999: LD_INT 2
33001: DOUBLE
33002: EQUAL
33003: IFTRUE 33007
33005: GO 33021
33007: POP
// begin ToLua ( displayStucuk(); ) ;
33008: LD_STRING displayStucuk();
33010: PPUSH
33011: CALL_OW 559
// ResetFog ;
33015: CALL_OW 335
// end ; 3 :
33019: GO 33224
33021: LD_INT 3
33023: DOUBLE
33024: EQUAL
33025: IFTRUE 33029
33027: GO 33133
33029: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33030: LD_ADDR_VAR 0 2
33034: PUSH
33035: LD_INT 22
33037: PUSH
33038: LD_OWVAR 2
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 25
33049: PUSH
33050: LD_INT 1
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PPUSH
33061: CALL_OW 69
33065: ST_TO_ADDR
// if not tmp then
33066: LD_VAR 0 2
33070: NOT
33071: IFFALSE 33075
// exit ;
33073: GO 33224
// un := tmp [ rand ( 1 , tmp ) ] ;
33075: LD_ADDR_VAR 0 3
33079: PUSH
33080: LD_VAR 0 2
33084: PUSH
33085: LD_INT 1
33087: PPUSH
33088: LD_VAR 0 2
33092: PPUSH
33093: CALL_OW 12
33097: ARRAY
33098: ST_TO_ADDR
// if Crawls ( un ) then
33099: LD_VAR 0 3
33103: PPUSH
33104: CALL_OW 318
33108: IFFALSE 33119
// ComWalk ( un ) ;
33110: LD_VAR 0 3
33114: PPUSH
33115: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33119: LD_VAR 0 3
33123: PPUSH
33124: LD_INT 8
33126: PPUSH
33127: CALL_OW 336
// end ; 4 :
33131: GO 33224
33133: LD_INT 4
33135: DOUBLE
33136: EQUAL
33137: IFTRUE 33141
33139: GO 33202
33141: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33142: LD_ADDR_VAR 0 2
33146: PUSH
33147: LD_INT 22
33149: PUSH
33150: LD_OWVAR 2
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 30
33161: PUSH
33162: LD_INT 29
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PPUSH
33173: CALL_OW 69
33177: ST_TO_ADDR
// if not tmp then
33178: LD_VAR 0 2
33182: NOT
33183: IFFALSE 33187
// exit ;
33185: GO 33224
// DestroyUnit ( tmp [ 1 ] ) ;
33187: LD_VAR 0 2
33191: PUSH
33192: LD_INT 1
33194: ARRAY
33195: PPUSH
33196: CALL_OW 65
// end ; 5 .. 7 :
33200: GO 33224
33202: LD_INT 5
33204: DOUBLE
33205: GREATEREQUAL
33206: IFFALSE 33214
33208: LD_INT 7
33210: DOUBLE
33211: LESSEQUAL
33212: IFTRUE 33216
33214: GO 33223
33216: POP
// StreamSibBomb ; end ;
33217: CALL 29474 0 0
33221: GO 33224
33223: POP
// end ;
33224: PPOPN 3
33226: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33227: LD_EXP 68
33231: PUSH
33232: LD_EXP 118
33236: AND
33237: IFFALSE 33393
33239: GO 33241
33241: DISABLE
33242: LD_INT 0
33244: PPUSH
33245: PPUSH
33246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33247: LD_ADDR_VAR 0 2
33251: PUSH
33252: LD_INT 81
33254: PUSH
33255: LD_OWVAR 2
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 2
33266: PUSH
33267: LD_INT 21
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 21
33279: PUSH
33280: LD_INT 2
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: LIST
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PPUSH
33296: CALL_OW 69
33300: ST_TO_ADDR
// if not tmp then
33301: LD_VAR 0 2
33305: NOT
33306: IFFALSE 33310
// exit ;
33308: GO 33393
// p := 0 ;
33310: LD_ADDR_VAR 0 3
33314: PUSH
33315: LD_INT 0
33317: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33318: LD_INT 35
33320: PPUSH
33321: CALL_OW 67
// p := p + 1 ;
33325: LD_ADDR_VAR 0 3
33329: PUSH
33330: LD_VAR 0 3
33334: PUSH
33335: LD_INT 1
33337: PLUS
33338: ST_TO_ADDR
// for i in tmp do
33339: LD_ADDR_VAR 0 1
33343: PUSH
33344: LD_VAR 0 2
33348: PUSH
33349: FOR_IN
33350: IFFALSE 33381
// if GetLives ( i ) < 1000 then
33352: LD_VAR 0 1
33356: PPUSH
33357: CALL_OW 256
33361: PUSH
33362: LD_INT 1000
33364: LESS
33365: IFFALSE 33379
// SetLives ( i , 1000 ) ;
33367: LD_VAR 0 1
33371: PPUSH
33372: LD_INT 1000
33374: PPUSH
33375: CALL_OW 234
33379: GO 33349
33381: POP
33382: POP
// until p > 20 ;
33383: LD_VAR 0 3
33387: PUSH
33388: LD_INT 20
33390: GREATER
33391: IFFALSE 33318
// end ;
33393: PPOPN 3
33395: END
// every 0 0$1 trigger StreamModeActive and sTime do
33396: LD_EXP 68
33400: PUSH
33401: LD_EXP 119
33405: AND
33406: IFFALSE 33441
33408: GO 33410
33410: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33411: LD_INT 28
33413: PPUSH
33414: LD_OWVAR 2
33418: PPUSH
33419: LD_INT 2
33421: PPUSH
33422: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33426: LD_INT 30
33428: PPUSH
33429: LD_OWVAR 2
33433: PPUSH
33434: LD_INT 2
33436: PPUSH
33437: CALL_OW 322
// end ;
33441: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33442: LD_EXP 68
33446: PUSH
33447: LD_EXP 120
33451: AND
33452: IFFALSE 33573
33454: GO 33456
33456: DISABLE
33457: LD_INT 0
33459: PPUSH
33460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33461: LD_ADDR_VAR 0 2
33465: PUSH
33466: LD_INT 22
33468: PUSH
33469: LD_OWVAR 2
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 21
33480: PUSH
33481: LD_INT 1
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 3
33490: PUSH
33491: LD_INT 23
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: PPUSH
33510: CALL_OW 69
33514: ST_TO_ADDR
// if not tmp then
33515: LD_VAR 0 2
33519: NOT
33520: IFFALSE 33524
// exit ;
33522: GO 33573
// for i in tmp do
33524: LD_ADDR_VAR 0 1
33528: PUSH
33529: LD_VAR 0 2
33533: PUSH
33534: FOR_IN
33535: IFFALSE 33571
// begin if Crawls ( i ) then
33537: LD_VAR 0 1
33541: PPUSH
33542: CALL_OW 318
33546: IFFALSE 33557
// ComWalk ( i ) ;
33548: LD_VAR 0 1
33552: PPUSH
33553: CALL_OW 138
// SetClass ( i , 2 ) ;
33557: LD_VAR 0 1
33561: PPUSH
33562: LD_INT 2
33564: PPUSH
33565: CALL_OW 336
// end ;
33569: GO 33534
33571: POP
33572: POP
// end ;
33573: PPOPN 2
33575: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33576: LD_EXP 68
33580: PUSH
33581: LD_EXP 121
33585: AND
33586: IFFALSE 33867
33588: GO 33590
33590: DISABLE
33591: LD_INT 0
33593: PPUSH
33594: PPUSH
33595: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33596: LD_OWVAR 2
33600: PPUSH
33601: LD_INT 9
33603: PPUSH
33604: LD_INT 1
33606: PPUSH
33607: LD_INT 1
33609: PPUSH
33610: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33614: LD_INT 9
33616: PPUSH
33617: LD_OWVAR 2
33621: PPUSH
33622: CALL_OW 343
// uc_side := 9 ;
33626: LD_ADDR_OWVAR 20
33630: PUSH
33631: LD_INT 9
33633: ST_TO_ADDR
// uc_nation := 2 ;
33634: LD_ADDR_OWVAR 21
33638: PUSH
33639: LD_INT 2
33641: ST_TO_ADDR
// hc_name := Dark Warrior ;
33642: LD_ADDR_OWVAR 26
33646: PUSH
33647: LD_STRING Dark Warrior
33649: ST_TO_ADDR
// hc_gallery :=  ;
33650: LD_ADDR_OWVAR 33
33654: PUSH
33655: LD_STRING 
33657: ST_TO_ADDR
// hc_noskilllimit := true ;
33658: LD_ADDR_OWVAR 76
33662: PUSH
33663: LD_INT 1
33665: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33666: LD_ADDR_OWVAR 31
33670: PUSH
33671: LD_INT 30
33673: PUSH
33674: LD_INT 30
33676: PUSH
33677: LD_INT 30
33679: PUSH
33680: LD_INT 30
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: ST_TO_ADDR
// un := CreateHuman ;
33689: LD_ADDR_VAR 0 3
33693: PUSH
33694: CALL_OW 44
33698: ST_TO_ADDR
// hc_noskilllimit := false ;
33699: LD_ADDR_OWVAR 76
33703: PUSH
33704: LD_INT 0
33706: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33707: LD_VAR 0 3
33711: PPUSH
33712: LD_INT 1
33714: PPUSH
33715: CALL_OW 51
// p := 0 ;
33719: LD_ADDR_VAR 0 2
33723: PUSH
33724: LD_INT 0
33726: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33727: LD_INT 35
33729: PPUSH
33730: CALL_OW 67
// p := p + 1 ;
33734: LD_ADDR_VAR 0 2
33738: PUSH
33739: LD_VAR 0 2
33743: PUSH
33744: LD_INT 1
33746: PLUS
33747: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33748: LD_VAR 0 3
33752: PPUSH
33753: CALL_OW 256
33757: PUSH
33758: LD_INT 1000
33760: LESS
33761: IFFALSE 33775
// SetLives ( un , 1000 ) ;
33763: LD_VAR 0 3
33767: PPUSH
33768: LD_INT 1000
33770: PPUSH
33771: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33775: LD_VAR 0 3
33779: PPUSH
33780: LD_INT 81
33782: PUSH
33783: LD_OWVAR 2
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 91
33794: PUSH
33795: LD_VAR 0 3
33799: PUSH
33800: LD_INT 30
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: LIST
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PPUSH
33812: CALL_OW 69
33816: PPUSH
33817: LD_VAR 0 3
33821: PPUSH
33822: CALL_OW 74
33826: PPUSH
33827: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
33831: LD_VAR 0 2
33835: PUSH
33836: LD_INT 60
33838: GREATER
33839: PUSH
33840: LD_VAR 0 3
33844: PPUSH
33845: CALL_OW 301
33849: OR
33850: IFFALSE 33727
// if un then
33852: LD_VAR 0 3
33856: IFFALSE 33867
// RemoveUnit ( un ) ;
33858: LD_VAR 0 3
33862: PPUSH
33863: CALL_OW 64
// end ;
33867: PPOPN 3
33869: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33870: LD_INT 0
33872: PPUSH
// case cmd of 301 :
33873: LD_VAR 0 1
33877: PUSH
33878: LD_INT 301
33880: DOUBLE
33881: EQUAL
33882: IFTRUE 33886
33884: GO 33918
33886: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33887: LD_VAR 0 6
33891: PPUSH
33892: LD_VAR 0 7
33896: PPUSH
33897: LD_VAR 0 8
33901: PPUSH
33902: LD_VAR 0 4
33906: PPUSH
33907: LD_VAR 0 5
33911: PPUSH
33912: CALL 35119 0 5
33916: GO 34039
33918: LD_INT 302
33920: DOUBLE
33921: EQUAL
33922: IFTRUE 33926
33924: GO 33963
33926: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33927: LD_VAR 0 6
33931: PPUSH
33932: LD_VAR 0 7
33936: PPUSH
33937: LD_VAR 0 8
33941: PPUSH
33942: LD_VAR 0 9
33946: PPUSH
33947: LD_VAR 0 4
33951: PPUSH
33952: LD_VAR 0 5
33956: PPUSH
33957: CALL 35210 0 6
33961: GO 34039
33963: LD_INT 303
33965: DOUBLE
33966: EQUAL
33967: IFTRUE 33971
33969: GO 34008
33971: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33972: LD_VAR 0 6
33976: PPUSH
33977: LD_VAR 0 7
33981: PPUSH
33982: LD_VAR 0 8
33986: PPUSH
33987: LD_VAR 0 9
33991: PPUSH
33992: LD_VAR 0 4
33996: PPUSH
33997: LD_VAR 0 5
34001: PPUSH
34002: CALL 34044 0 6
34006: GO 34039
34008: LD_INT 304
34010: DOUBLE
34011: EQUAL
34012: IFTRUE 34016
34014: GO 34038
34016: POP
// hHackTeleport ( unit , x , y ) ; end ;
34017: LD_VAR 0 2
34021: PPUSH
34022: LD_VAR 0 4
34026: PPUSH
34027: LD_VAR 0 5
34031: PPUSH
34032: CALL 35803 0 3
34036: GO 34039
34038: POP
// end ;
34039: LD_VAR 0 12
34043: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34044: LD_INT 0
34046: PPUSH
34047: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34048: LD_VAR 0 1
34052: PUSH
34053: LD_INT 1
34055: LESS
34056: PUSH
34057: LD_VAR 0 1
34061: PUSH
34062: LD_INT 3
34064: GREATER
34065: OR
34066: PUSH
34067: LD_VAR 0 5
34071: PPUSH
34072: LD_VAR 0 6
34076: PPUSH
34077: CALL_OW 428
34081: OR
34082: IFFALSE 34086
// exit ;
34084: GO 34806
// uc_side := your_side ;
34086: LD_ADDR_OWVAR 20
34090: PUSH
34091: LD_OWVAR 2
34095: ST_TO_ADDR
// uc_nation := nation ;
34096: LD_ADDR_OWVAR 21
34100: PUSH
34101: LD_VAR 0 1
34105: ST_TO_ADDR
// bc_level = 1 ;
34106: LD_ADDR_OWVAR 43
34110: PUSH
34111: LD_INT 1
34113: ST_TO_ADDR
// case btype of 1 :
34114: LD_VAR 0 2
34118: PUSH
34119: LD_INT 1
34121: DOUBLE
34122: EQUAL
34123: IFTRUE 34127
34125: GO 34138
34127: POP
// bc_type := b_depot ; 2 :
34128: LD_ADDR_OWVAR 42
34132: PUSH
34133: LD_INT 0
34135: ST_TO_ADDR
34136: GO 34750
34138: LD_INT 2
34140: DOUBLE
34141: EQUAL
34142: IFTRUE 34146
34144: GO 34157
34146: POP
// bc_type := b_warehouse ; 3 :
34147: LD_ADDR_OWVAR 42
34151: PUSH
34152: LD_INT 1
34154: ST_TO_ADDR
34155: GO 34750
34157: LD_INT 3
34159: DOUBLE
34160: EQUAL
34161: IFTRUE 34165
34163: GO 34176
34165: POP
// bc_type := b_lab ; 4 .. 9 :
34166: LD_ADDR_OWVAR 42
34170: PUSH
34171: LD_INT 6
34173: ST_TO_ADDR
34174: GO 34750
34176: LD_INT 4
34178: DOUBLE
34179: GREATEREQUAL
34180: IFFALSE 34188
34182: LD_INT 9
34184: DOUBLE
34185: LESSEQUAL
34186: IFTRUE 34190
34188: GO 34242
34190: POP
// begin bc_type := b_lab_half ;
34191: LD_ADDR_OWVAR 42
34195: PUSH
34196: LD_INT 7
34198: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34199: LD_ADDR_OWVAR 44
34203: PUSH
34204: LD_INT 10
34206: PUSH
34207: LD_INT 11
34209: PUSH
34210: LD_INT 12
34212: PUSH
34213: LD_INT 15
34215: PUSH
34216: LD_INT 14
34218: PUSH
34219: LD_INT 13
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: PUSH
34230: LD_VAR 0 2
34234: PUSH
34235: LD_INT 3
34237: MINUS
34238: ARRAY
34239: ST_TO_ADDR
// end ; 10 .. 13 :
34240: GO 34750
34242: LD_INT 10
34244: DOUBLE
34245: GREATEREQUAL
34246: IFFALSE 34254
34248: LD_INT 13
34250: DOUBLE
34251: LESSEQUAL
34252: IFTRUE 34256
34254: GO 34333
34256: POP
// begin bc_type := b_lab_full ;
34257: LD_ADDR_OWVAR 42
34261: PUSH
34262: LD_INT 8
34264: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34265: LD_ADDR_OWVAR 44
34269: PUSH
34270: LD_INT 10
34272: PUSH
34273: LD_INT 12
34275: PUSH
34276: LD_INT 14
34278: PUSH
34279: LD_INT 13
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: PUSH
34288: LD_VAR 0 2
34292: PUSH
34293: LD_INT 9
34295: MINUS
34296: ARRAY
34297: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34298: LD_ADDR_OWVAR 45
34302: PUSH
34303: LD_INT 11
34305: PUSH
34306: LD_INT 15
34308: PUSH
34309: LD_INT 12
34311: PUSH
34312: LD_INT 15
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: PUSH
34321: LD_VAR 0 2
34325: PUSH
34326: LD_INT 9
34328: MINUS
34329: ARRAY
34330: ST_TO_ADDR
// end ; 14 :
34331: GO 34750
34333: LD_INT 14
34335: DOUBLE
34336: EQUAL
34337: IFTRUE 34341
34339: GO 34352
34341: POP
// bc_type := b_workshop ; 15 :
34342: LD_ADDR_OWVAR 42
34346: PUSH
34347: LD_INT 2
34349: ST_TO_ADDR
34350: GO 34750
34352: LD_INT 15
34354: DOUBLE
34355: EQUAL
34356: IFTRUE 34360
34358: GO 34371
34360: POP
// bc_type := b_factory ; 16 :
34361: LD_ADDR_OWVAR 42
34365: PUSH
34366: LD_INT 3
34368: ST_TO_ADDR
34369: GO 34750
34371: LD_INT 16
34373: DOUBLE
34374: EQUAL
34375: IFTRUE 34379
34377: GO 34390
34379: POP
// bc_type := b_ext_gun ; 17 :
34380: LD_ADDR_OWVAR 42
34384: PUSH
34385: LD_INT 17
34387: ST_TO_ADDR
34388: GO 34750
34390: LD_INT 17
34392: DOUBLE
34393: EQUAL
34394: IFTRUE 34398
34396: GO 34426
34398: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34399: LD_ADDR_OWVAR 42
34403: PUSH
34404: LD_INT 19
34406: PUSH
34407: LD_INT 23
34409: PUSH
34410: LD_INT 19
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: LIST
34417: PUSH
34418: LD_VAR 0 1
34422: ARRAY
34423: ST_TO_ADDR
34424: GO 34750
34426: LD_INT 18
34428: DOUBLE
34429: EQUAL
34430: IFTRUE 34434
34432: GO 34445
34434: POP
// bc_type := b_ext_radar ; 19 :
34435: LD_ADDR_OWVAR 42
34439: PUSH
34440: LD_INT 20
34442: ST_TO_ADDR
34443: GO 34750
34445: LD_INT 19
34447: DOUBLE
34448: EQUAL
34449: IFTRUE 34453
34451: GO 34464
34453: POP
// bc_type := b_ext_radio ; 20 :
34454: LD_ADDR_OWVAR 42
34458: PUSH
34459: LD_INT 22
34461: ST_TO_ADDR
34462: GO 34750
34464: LD_INT 20
34466: DOUBLE
34467: EQUAL
34468: IFTRUE 34472
34470: GO 34483
34472: POP
// bc_type := b_ext_siberium ; 21 :
34473: LD_ADDR_OWVAR 42
34477: PUSH
34478: LD_INT 21
34480: ST_TO_ADDR
34481: GO 34750
34483: LD_INT 21
34485: DOUBLE
34486: EQUAL
34487: IFTRUE 34491
34489: GO 34502
34491: POP
// bc_type := b_ext_computer ; 22 :
34492: LD_ADDR_OWVAR 42
34496: PUSH
34497: LD_INT 24
34499: ST_TO_ADDR
34500: GO 34750
34502: LD_INT 22
34504: DOUBLE
34505: EQUAL
34506: IFTRUE 34510
34508: GO 34521
34510: POP
// bc_type := b_ext_track ; 23 :
34511: LD_ADDR_OWVAR 42
34515: PUSH
34516: LD_INT 16
34518: ST_TO_ADDR
34519: GO 34750
34521: LD_INT 23
34523: DOUBLE
34524: EQUAL
34525: IFTRUE 34529
34527: GO 34540
34529: POP
// bc_type := b_ext_laser ; 24 :
34530: LD_ADDR_OWVAR 42
34534: PUSH
34535: LD_INT 25
34537: ST_TO_ADDR
34538: GO 34750
34540: LD_INT 24
34542: DOUBLE
34543: EQUAL
34544: IFTRUE 34548
34546: GO 34559
34548: POP
// bc_type := b_control_tower ; 25 :
34549: LD_ADDR_OWVAR 42
34553: PUSH
34554: LD_INT 36
34556: ST_TO_ADDR
34557: GO 34750
34559: LD_INT 25
34561: DOUBLE
34562: EQUAL
34563: IFTRUE 34567
34565: GO 34578
34567: POP
// bc_type := b_breastwork ; 26 :
34568: LD_ADDR_OWVAR 42
34572: PUSH
34573: LD_INT 31
34575: ST_TO_ADDR
34576: GO 34750
34578: LD_INT 26
34580: DOUBLE
34581: EQUAL
34582: IFTRUE 34586
34584: GO 34597
34586: POP
// bc_type := b_bunker ; 27 :
34587: LD_ADDR_OWVAR 42
34591: PUSH
34592: LD_INT 32
34594: ST_TO_ADDR
34595: GO 34750
34597: LD_INT 27
34599: DOUBLE
34600: EQUAL
34601: IFTRUE 34605
34603: GO 34616
34605: POP
// bc_type := b_turret ; 28 :
34606: LD_ADDR_OWVAR 42
34610: PUSH
34611: LD_INT 33
34613: ST_TO_ADDR
34614: GO 34750
34616: LD_INT 28
34618: DOUBLE
34619: EQUAL
34620: IFTRUE 34624
34622: GO 34635
34624: POP
// bc_type := b_armoury ; 29 :
34625: LD_ADDR_OWVAR 42
34629: PUSH
34630: LD_INT 4
34632: ST_TO_ADDR
34633: GO 34750
34635: LD_INT 29
34637: DOUBLE
34638: EQUAL
34639: IFTRUE 34643
34641: GO 34654
34643: POP
// bc_type := b_barracks ; 30 :
34644: LD_ADDR_OWVAR 42
34648: PUSH
34649: LD_INT 5
34651: ST_TO_ADDR
34652: GO 34750
34654: LD_INT 30
34656: DOUBLE
34657: EQUAL
34658: IFTRUE 34662
34660: GO 34673
34662: POP
// bc_type := b_solar_power ; 31 :
34663: LD_ADDR_OWVAR 42
34667: PUSH
34668: LD_INT 27
34670: ST_TO_ADDR
34671: GO 34750
34673: LD_INT 31
34675: DOUBLE
34676: EQUAL
34677: IFTRUE 34681
34679: GO 34692
34681: POP
// bc_type := b_oil_power ; 32 :
34682: LD_ADDR_OWVAR 42
34686: PUSH
34687: LD_INT 26
34689: ST_TO_ADDR
34690: GO 34750
34692: LD_INT 32
34694: DOUBLE
34695: EQUAL
34696: IFTRUE 34700
34698: GO 34711
34700: POP
// bc_type := b_siberite_power ; 33 :
34701: LD_ADDR_OWVAR 42
34705: PUSH
34706: LD_INT 28
34708: ST_TO_ADDR
34709: GO 34750
34711: LD_INT 33
34713: DOUBLE
34714: EQUAL
34715: IFTRUE 34719
34717: GO 34730
34719: POP
// bc_type := b_oil_mine ; 34 :
34720: LD_ADDR_OWVAR 42
34724: PUSH
34725: LD_INT 29
34727: ST_TO_ADDR
34728: GO 34750
34730: LD_INT 34
34732: DOUBLE
34733: EQUAL
34734: IFTRUE 34738
34736: GO 34749
34738: POP
// bc_type := b_siberite_mine ; end ;
34739: LD_ADDR_OWVAR 42
34743: PUSH
34744: LD_INT 30
34746: ST_TO_ADDR
34747: GO 34750
34749: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34750: LD_ADDR_VAR 0 8
34754: PUSH
34755: LD_VAR 0 5
34759: PPUSH
34760: LD_VAR 0 6
34764: PPUSH
34765: LD_VAR 0 3
34769: PPUSH
34770: CALL_OW 47
34774: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34775: LD_OWVAR 42
34779: PUSH
34780: LD_INT 32
34782: PUSH
34783: LD_INT 33
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: IN
34790: IFFALSE 34806
// PlaceWeaponTurret ( b , weapon ) ;
34792: LD_VAR 0 8
34796: PPUSH
34797: LD_VAR 0 4
34801: PPUSH
34802: CALL_OW 431
// end ;
34806: LD_VAR 0 7
34810: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34811: LD_INT 0
34813: PPUSH
34814: PPUSH
34815: PPUSH
34816: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34817: LD_ADDR_VAR 0 4
34821: PUSH
34822: LD_INT 22
34824: PUSH
34825: LD_OWVAR 2
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 2
34836: PUSH
34837: LD_INT 30
34839: PUSH
34840: LD_INT 0
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 30
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: LIST
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PPUSH
34866: CALL_OW 69
34870: ST_TO_ADDR
// if not tmp then
34871: LD_VAR 0 4
34875: NOT
34876: IFFALSE 34880
// exit ;
34878: GO 34939
// for i in tmp do
34880: LD_ADDR_VAR 0 2
34884: PUSH
34885: LD_VAR 0 4
34889: PUSH
34890: FOR_IN
34891: IFFALSE 34937
// for j = 1 to 3 do
34893: LD_ADDR_VAR 0 3
34897: PUSH
34898: DOUBLE
34899: LD_INT 1
34901: DEC
34902: ST_TO_ADDR
34903: LD_INT 3
34905: PUSH
34906: FOR_TO
34907: IFFALSE 34933
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34909: LD_VAR 0 2
34913: PPUSH
34914: CALL_OW 274
34918: PPUSH
34919: LD_VAR 0 3
34923: PPUSH
34924: LD_INT 99999
34926: PPUSH
34927: CALL_OW 277
34931: GO 34906
34933: POP
34934: POP
34935: GO 34890
34937: POP
34938: POP
// end ;
34939: LD_VAR 0 1
34943: RET
// export function hHackSetLevel10 ; var i , j ; begin
34944: LD_INT 0
34946: PPUSH
34947: PPUSH
34948: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34949: LD_ADDR_VAR 0 2
34953: PUSH
34954: LD_INT 21
34956: PUSH
34957: LD_INT 1
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PPUSH
34964: CALL_OW 69
34968: PUSH
34969: FOR_IN
34970: IFFALSE 35022
// if IsSelected ( i ) then
34972: LD_VAR 0 2
34976: PPUSH
34977: CALL_OW 306
34981: IFFALSE 35020
// begin for j := 1 to 4 do
34983: LD_ADDR_VAR 0 3
34987: PUSH
34988: DOUBLE
34989: LD_INT 1
34991: DEC
34992: ST_TO_ADDR
34993: LD_INT 4
34995: PUSH
34996: FOR_TO
34997: IFFALSE 35018
// SetSkill ( i , j , 10 ) ;
34999: LD_VAR 0 2
35003: PPUSH
35004: LD_VAR 0 3
35008: PPUSH
35009: LD_INT 10
35011: PPUSH
35012: CALL_OW 237
35016: GO 34996
35018: POP
35019: POP
// end ;
35020: GO 34969
35022: POP
35023: POP
// end ;
35024: LD_VAR 0 1
35028: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35029: LD_INT 0
35031: PPUSH
35032: PPUSH
35033: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35034: LD_ADDR_VAR 0 2
35038: PUSH
35039: LD_INT 22
35041: PUSH
35042: LD_OWVAR 2
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 21
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PPUSH
35065: CALL_OW 69
35069: PUSH
35070: FOR_IN
35071: IFFALSE 35112
// begin for j := 1 to 4 do
35073: LD_ADDR_VAR 0 3
35077: PUSH
35078: DOUBLE
35079: LD_INT 1
35081: DEC
35082: ST_TO_ADDR
35083: LD_INT 4
35085: PUSH
35086: FOR_TO
35087: IFFALSE 35108
// SetSkill ( i , j , 10 ) ;
35089: LD_VAR 0 2
35093: PPUSH
35094: LD_VAR 0 3
35098: PPUSH
35099: LD_INT 10
35101: PPUSH
35102: CALL_OW 237
35106: GO 35086
35108: POP
35109: POP
// end ;
35110: GO 35070
35112: POP
35113: POP
// end ;
35114: LD_VAR 0 1
35118: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35119: LD_INT 0
35121: PPUSH
// uc_side := your_side ;
35122: LD_ADDR_OWVAR 20
35126: PUSH
35127: LD_OWVAR 2
35131: ST_TO_ADDR
// uc_nation := nation ;
35132: LD_ADDR_OWVAR 21
35136: PUSH
35137: LD_VAR 0 1
35141: ST_TO_ADDR
// InitHc ;
35142: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35146: LD_INT 0
35148: PPUSH
35149: LD_VAR 0 2
35153: PPUSH
35154: LD_VAR 0 3
35158: PPUSH
35159: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35163: LD_VAR 0 4
35167: PPUSH
35168: LD_VAR 0 5
35172: PPUSH
35173: CALL_OW 428
35177: PUSH
35178: LD_INT 0
35180: EQUAL
35181: IFFALSE 35205
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35183: CALL_OW 44
35187: PPUSH
35188: LD_VAR 0 4
35192: PPUSH
35193: LD_VAR 0 5
35197: PPUSH
35198: LD_INT 1
35200: PPUSH
35201: CALL_OW 48
// end ;
35205: LD_VAR 0 6
35209: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35210: LD_INT 0
35212: PPUSH
35213: PPUSH
// uc_side := your_side ;
35214: LD_ADDR_OWVAR 20
35218: PUSH
35219: LD_OWVAR 2
35223: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35224: LD_VAR 0 1
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: LD_INT 2
35234: PUSH
35235: LD_INT 3
35237: PUSH
35238: LD_INT 4
35240: PUSH
35241: LD_INT 5
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: IN
35251: IFFALSE 35263
// uc_nation := nation_american else
35253: LD_ADDR_OWVAR 21
35257: PUSH
35258: LD_INT 1
35260: ST_TO_ADDR
35261: GO 35306
// if chassis in [ 11 , 12 , 13 , 14 ] then
35263: LD_VAR 0 1
35267: PUSH
35268: LD_INT 11
35270: PUSH
35271: LD_INT 12
35273: PUSH
35274: LD_INT 13
35276: PUSH
35277: LD_INT 14
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: IN
35286: IFFALSE 35298
// uc_nation := nation_arabian else
35288: LD_ADDR_OWVAR 21
35292: PUSH
35293: LD_INT 2
35295: ST_TO_ADDR
35296: GO 35306
// uc_nation := nation_russian ;
35298: LD_ADDR_OWVAR 21
35302: PUSH
35303: LD_INT 3
35305: ST_TO_ADDR
// vc_chassis := chassis ;
35306: LD_ADDR_OWVAR 37
35310: PUSH
35311: LD_VAR 0 1
35315: ST_TO_ADDR
// vc_engine := engine ;
35316: LD_ADDR_OWVAR 39
35320: PUSH
35321: LD_VAR 0 2
35325: ST_TO_ADDR
// vc_control := control ;
35326: LD_ADDR_OWVAR 38
35330: PUSH
35331: LD_VAR 0 3
35335: ST_TO_ADDR
// vc_weapon := weapon ;
35336: LD_ADDR_OWVAR 40
35340: PUSH
35341: LD_VAR 0 4
35345: ST_TO_ADDR
// un := CreateVehicle ;
35346: LD_ADDR_VAR 0 8
35350: PUSH
35351: CALL_OW 45
35355: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35356: LD_VAR 0 8
35360: PPUSH
35361: LD_INT 0
35363: PPUSH
35364: LD_INT 5
35366: PPUSH
35367: CALL_OW 12
35371: PPUSH
35372: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35376: LD_VAR 0 8
35380: PPUSH
35381: LD_VAR 0 5
35385: PPUSH
35386: LD_VAR 0 6
35390: PPUSH
35391: LD_INT 1
35393: PPUSH
35394: CALL_OW 48
// end ;
35398: LD_VAR 0 7
35402: RET
// export hInvincible ; every 1 do
35403: GO 35405
35405: DISABLE
// hInvincible := [ ] ;
35406: LD_ADDR_EXP 122
35410: PUSH
35411: EMPTY
35412: ST_TO_ADDR
35413: END
// every 10 do var i ;
35414: GO 35416
35416: DISABLE
35417: LD_INT 0
35419: PPUSH
// begin enable ;
35420: ENABLE
// if not hInvincible then
35421: LD_EXP 122
35425: NOT
35426: IFFALSE 35430
// exit ;
35428: GO 35474
// for i in hInvincible do
35430: LD_ADDR_VAR 0 1
35434: PUSH
35435: LD_EXP 122
35439: PUSH
35440: FOR_IN
35441: IFFALSE 35472
// if GetLives ( i ) < 1000 then
35443: LD_VAR 0 1
35447: PPUSH
35448: CALL_OW 256
35452: PUSH
35453: LD_INT 1000
35455: LESS
35456: IFFALSE 35470
// SetLives ( i , 1000 ) ;
35458: LD_VAR 0 1
35462: PPUSH
35463: LD_INT 1000
35465: PPUSH
35466: CALL_OW 234
35470: GO 35440
35472: POP
35473: POP
// end ;
35474: PPOPN 1
35476: END
// export function hHackInvincible ; var i ; begin
35477: LD_INT 0
35479: PPUSH
35480: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35481: LD_ADDR_VAR 0 2
35485: PUSH
35486: LD_INT 2
35488: PUSH
35489: LD_INT 21
35491: PUSH
35492: LD_INT 1
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 21
35501: PUSH
35502: LD_INT 2
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: LIST
35513: PPUSH
35514: CALL_OW 69
35518: PUSH
35519: FOR_IN
35520: IFFALSE 35581
// if IsSelected ( i ) then
35522: LD_VAR 0 2
35526: PPUSH
35527: CALL_OW 306
35531: IFFALSE 35579
// begin if i in hInvincible then
35533: LD_VAR 0 2
35537: PUSH
35538: LD_EXP 122
35542: IN
35543: IFFALSE 35563
// hInvincible := hInvincible diff i else
35545: LD_ADDR_EXP 122
35549: PUSH
35550: LD_EXP 122
35554: PUSH
35555: LD_VAR 0 2
35559: DIFF
35560: ST_TO_ADDR
35561: GO 35579
// hInvincible := hInvincible union i ;
35563: LD_ADDR_EXP 122
35567: PUSH
35568: LD_EXP 122
35572: PUSH
35573: LD_VAR 0 2
35577: UNION
35578: ST_TO_ADDR
// end ;
35579: GO 35519
35581: POP
35582: POP
// end ;
35583: LD_VAR 0 1
35587: RET
// export function hHackInvisible ; var i , j ; begin
35588: LD_INT 0
35590: PPUSH
35591: PPUSH
35592: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35593: LD_ADDR_VAR 0 2
35597: PUSH
35598: LD_INT 21
35600: PUSH
35601: LD_INT 1
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PPUSH
35608: CALL_OW 69
35612: PUSH
35613: FOR_IN
35614: IFFALSE 35638
// if IsSelected ( i ) then
35616: LD_VAR 0 2
35620: PPUSH
35621: CALL_OW 306
35625: IFFALSE 35636
// ComForceInvisible ( i ) ;
35627: LD_VAR 0 2
35631: PPUSH
35632: CALL_OW 496
35636: GO 35613
35638: POP
35639: POP
// end ;
35640: LD_VAR 0 1
35644: RET
// export function hHackChangeYourSide ; begin
35645: LD_INT 0
35647: PPUSH
// if your_side = 8 then
35648: LD_OWVAR 2
35652: PUSH
35653: LD_INT 8
35655: EQUAL
35656: IFFALSE 35668
// your_side := 0 else
35658: LD_ADDR_OWVAR 2
35662: PUSH
35663: LD_INT 0
35665: ST_TO_ADDR
35666: GO 35682
// your_side := your_side + 1 ;
35668: LD_ADDR_OWVAR 2
35672: PUSH
35673: LD_OWVAR 2
35677: PUSH
35678: LD_INT 1
35680: PLUS
35681: ST_TO_ADDR
// end ;
35682: LD_VAR 0 1
35686: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35687: LD_INT 0
35689: PPUSH
35690: PPUSH
35691: PPUSH
// for i in all_units do
35692: LD_ADDR_VAR 0 2
35696: PUSH
35697: LD_OWVAR 3
35701: PUSH
35702: FOR_IN
35703: IFFALSE 35781
// if IsSelected ( i ) then
35705: LD_VAR 0 2
35709: PPUSH
35710: CALL_OW 306
35714: IFFALSE 35779
// begin j := GetSide ( i ) ;
35716: LD_ADDR_VAR 0 3
35720: PUSH
35721: LD_VAR 0 2
35725: PPUSH
35726: CALL_OW 255
35730: ST_TO_ADDR
// if j = 8 then
35731: LD_VAR 0 3
35735: PUSH
35736: LD_INT 8
35738: EQUAL
35739: IFFALSE 35751
// j := 0 else
35741: LD_ADDR_VAR 0 3
35745: PUSH
35746: LD_INT 0
35748: ST_TO_ADDR
35749: GO 35765
// j := j + 1 ;
35751: LD_ADDR_VAR 0 3
35755: PUSH
35756: LD_VAR 0 3
35760: PUSH
35761: LD_INT 1
35763: PLUS
35764: ST_TO_ADDR
// SetSide ( i , j ) ;
35765: LD_VAR 0 2
35769: PPUSH
35770: LD_VAR 0 3
35774: PPUSH
35775: CALL_OW 235
// end ;
35779: GO 35702
35781: POP
35782: POP
// end ;
35783: LD_VAR 0 1
35787: RET
// export function hHackFog ; begin
35788: LD_INT 0
35790: PPUSH
// FogOff ( true ) ;
35791: LD_INT 1
35793: PPUSH
35794: CALL_OW 344
// end ;
35798: LD_VAR 0 1
35802: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35803: LD_INT 0
35805: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35806: LD_VAR 0 1
35810: PPUSH
35811: LD_VAR 0 2
35815: PPUSH
35816: LD_VAR 0 3
35820: PPUSH
35821: LD_INT 1
35823: PPUSH
35824: LD_INT 1
35826: PPUSH
35827: CALL_OW 483
// CenterOnXY ( x , y ) ;
35831: LD_VAR 0 2
35835: PPUSH
35836: LD_VAR 0 3
35840: PPUSH
35841: CALL_OW 84
// end ; end_of_file
35845: LD_VAR 0 4
35849: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35850: LD_INT 0
35852: PPUSH
35853: PPUSH
35854: PPUSH
35855: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35856: LD_VAR 0 1
35860: PPUSH
35861: CALL_OW 264
35865: PUSH
35866: LD_EXP 56
35870: EQUAL
35871: IFFALSE 35943
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35873: LD_INT 68
35875: PPUSH
35876: LD_VAR 0 1
35880: PPUSH
35881: CALL_OW 255
35885: PPUSH
35886: CALL_OW 321
35890: PUSH
35891: LD_INT 2
35893: EQUAL
35894: IFFALSE 35906
// eff := 70 else
35896: LD_ADDR_VAR 0 4
35900: PUSH
35901: LD_INT 70
35903: ST_TO_ADDR
35904: GO 35914
// eff := 30 ;
35906: LD_ADDR_VAR 0 4
35910: PUSH
35911: LD_INT 30
35913: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35914: LD_VAR 0 1
35918: PPUSH
35919: CALL_OW 250
35923: PPUSH
35924: LD_VAR 0 1
35928: PPUSH
35929: CALL_OW 251
35933: PPUSH
35934: LD_VAR 0 4
35938: PPUSH
35939: CALL_OW 495
// end ; end ;
35943: LD_VAR 0 2
35947: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35948: LD_INT 0
35950: PPUSH
// end ;
35951: LD_VAR 0 4
35955: RET
// export function SOS_Command ( cmd ) ; begin
35956: LD_INT 0
35958: PPUSH
// end ;
35959: LD_VAR 0 2
35963: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35964: LD_INT 0
35966: PPUSH
// if cmd = 121 then
35967: LD_VAR 0 1
35971: PUSH
35972: LD_INT 121
35974: EQUAL
35975: IFFALSE 35977
// end ;
35977: LD_VAR 0 6
35981: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35982: LD_INT 0
35984: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35985: LD_VAR 0 1
35989: PUSH
35990: LD_INT 250
35992: EQUAL
35993: PUSH
35994: LD_VAR 0 2
35998: PPUSH
35999: CALL_OW 264
36003: PUSH
36004: LD_EXP 59
36008: EQUAL
36009: AND
36010: IFFALSE 36031
// MinerPlaceMine ( unit , x , y ) ;
36012: LD_VAR 0 2
36016: PPUSH
36017: LD_VAR 0 4
36021: PPUSH
36022: LD_VAR 0 5
36026: PPUSH
36027: CALL 38380 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36031: LD_VAR 0 1
36035: PUSH
36036: LD_INT 251
36038: EQUAL
36039: PUSH
36040: LD_VAR 0 2
36044: PPUSH
36045: CALL_OW 264
36049: PUSH
36050: LD_EXP 59
36054: EQUAL
36055: AND
36056: IFFALSE 36077
// MinerDetonateMine ( unit , x , y ) ;
36058: LD_VAR 0 2
36062: PPUSH
36063: LD_VAR 0 4
36067: PPUSH
36068: LD_VAR 0 5
36072: PPUSH
36073: CALL 38657 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36077: LD_VAR 0 1
36081: PUSH
36082: LD_INT 252
36084: EQUAL
36085: PUSH
36086: LD_VAR 0 2
36090: PPUSH
36091: CALL_OW 264
36095: PUSH
36096: LD_EXP 59
36100: EQUAL
36101: AND
36102: IFFALSE 36123
// MinerCreateMinefield ( unit , x , y ) ;
36104: LD_VAR 0 2
36108: PPUSH
36109: LD_VAR 0 4
36113: PPUSH
36114: LD_VAR 0 5
36118: PPUSH
36119: CALL 39074 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36123: LD_VAR 0 1
36127: PUSH
36128: LD_INT 253
36130: EQUAL
36131: PUSH
36132: LD_VAR 0 2
36136: PPUSH
36137: CALL_OW 257
36141: PUSH
36142: LD_INT 5
36144: EQUAL
36145: AND
36146: IFFALSE 36167
// ComBinocular ( unit , x , y ) ;
36148: LD_VAR 0 2
36152: PPUSH
36153: LD_VAR 0 4
36157: PPUSH
36158: LD_VAR 0 5
36162: PPUSH
36163: CALL 39445 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36167: LD_VAR 0 1
36171: PUSH
36172: LD_INT 254
36174: EQUAL
36175: PUSH
36176: LD_VAR 0 2
36180: PPUSH
36181: CALL_OW 264
36185: PUSH
36186: LD_EXP 54
36190: EQUAL
36191: AND
36192: PUSH
36193: LD_VAR 0 3
36197: PPUSH
36198: CALL_OW 263
36202: PUSH
36203: LD_INT 3
36205: EQUAL
36206: AND
36207: IFFALSE 36223
// HackDestroyVehicle ( unit , selectedUnit ) ;
36209: LD_VAR 0 2
36213: PPUSH
36214: LD_VAR 0 3
36218: PPUSH
36219: CALL 37740 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36223: LD_VAR 0 1
36227: PUSH
36228: LD_INT 255
36230: EQUAL
36231: PUSH
36232: LD_VAR 0 2
36236: PPUSH
36237: CALL_OW 264
36241: PUSH
36242: LD_INT 14
36244: PUSH
36245: LD_INT 53
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: IN
36252: AND
36253: PUSH
36254: LD_VAR 0 4
36258: PPUSH
36259: LD_VAR 0 5
36263: PPUSH
36264: CALL_OW 488
36268: AND
36269: IFFALSE 36293
// CutTreeXYR ( unit , x , y , 12 ) ;
36271: LD_VAR 0 2
36275: PPUSH
36276: LD_VAR 0 4
36280: PPUSH
36281: LD_VAR 0 5
36285: PPUSH
36286: LD_INT 12
36288: PPUSH
36289: CALL 36306 0 4
// end ;
36293: LD_VAR 0 6
36297: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
36298: LD_INT 0
36300: PPUSH
// end ;
36301: LD_VAR 0 4
36305: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36306: LD_INT 0
36308: PPUSH
36309: PPUSH
36310: PPUSH
36311: PPUSH
36312: PPUSH
36313: PPUSH
36314: PPUSH
36315: PPUSH
36316: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36317: LD_VAR 0 1
36321: NOT
36322: PUSH
36323: LD_VAR 0 2
36327: PPUSH
36328: LD_VAR 0 3
36332: PPUSH
36333: CALL_OW 488
36337: NOT
36338: OR
36339: PUSH
36340: LD_VAR 0 4
36344: NOT
36345: OR
36346: IFFALSE 36350
// exit ;
36348: GO 36690
// list := [ ] ;
36350: LD_ADDR_VAR 0 13
36354: PUSH
36355: EMPTY
36356: ST_TO_ADDR
// if x - r < 0 then
36357: LD_VAR 0 2
36361: PUSH
36362: LD_VAR 0 4
36366: MINUS
36367: PUSH
36368: LD_INT 0
36370: LESS
36371: IFFALSE 36383
// min_x := 0 else
36373: LD_ADDR_VAR 0 7
36377: PUSH
36378: LD_INT 0
36380: ST_TO_ADDR
36381: GO 36399
// min_x := x - r ;
36383: LD_ADDR_VAR 0 7
36387: PUSH
36388: LD_VAR 0 2
36392: PUSH
36393: LD_VAR 0 4
36397: MINUS
36398: ST_TO_ADDR
// if y - r < 0 then
36399: LD_VAR 0 3
36403: PUSH
36404: LD_VAR 0 4
36408: MINUS
36409: PUSH
36410: LD_INT 0
36412: LESS
36413: IFFALSE 36425
// min_y := 0 else
36415: LD_ADDR_VAR 0 8
36419: PUSH
36420: LD_INT 0
36422: ST_TO_ADDR
36423: GO 36441
// min_y := y - r ;
36425: LD_ADDR_VAR 0 8
36429: PUSH
36430: LD_VAR 0 3
36434: PUSH
36435: LD_VAR 0 4
36439: MINUS
36440: ST_TO_ADDR
// max_x := x + r ;
36441: LD_ADDR_VAR 0 9
36445: PUSH
36446: LD_VAR 0 2
36450: PUSH
36451: LD_VAR 0 4
36455: PLUS
36456: ST_TO_ADDR
// max_y := y + r ;
36457: LD_ADDR_VAR 0 10
36461: PUSH
36462: LD_VAR 0 3
36466: PUSH
36467: LD_VAR 0 4
36471: PLUS
36472: ST_TO_ADDR
// for _x = min_x to max_x do
36473: LD_ADDR_VAR 0 11
36477: PUSH
36478: DOUBLE
36479: LD_VAR 0 7
36483: DEC
36484: ST_TO_ADDR
36485: LD_VAR 0 9
36489: PUSH
36490: FOR_TO
36491: IFFALSE 36608
// for _y = min_y to max_y do
36493: LD_ADDR_VAR 0 12
36497: PUSH
36498: DOUBLE
36499: LD_VAR 0 8
36503: DEC
36504: ST_TO_ADDR
36505: LD_VAR 0 10
36509: PUSH
36510: FOR_TO
36511: IFFALSE 36604
// begin if not ValidHex ( _x , _y ) then
36513: LD_VAR 0 11
36517: PPUSH
36518: LD_VAR 0 12
36522: PPUSH
36523: CALL_OW 488
36527: NOT
36528: IFFALSE 36532
// continue ;
36530: GO 36510
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36532: LD_VAR 0 11
36536: PPUSH
36537: LD_VAR 0 12
36541: PPUSH
36542: CALL_OW 351
36546: PUSH
36547: LD_VAR 0 11
36551: PPUSH
36552: LD_VAR 0 12
36556: PPUSH
36557: CALL_OW 554
36561: AND
36562: IFFALSE 36602
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36564: LD_ADDR_VAR 0 13
36568: PUSH
36569: LD_VAR 0 13
36573: PPUSH
36574: LD_VAR 0 13
36578: PUSH
36579: LD_INT 1
36581: PLUS
36582: PPUSH
36583: LD_VAR 0 11
36587: PUSH
36588: LD_VAR 0 12
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PPUSH
36597: CALL_OW 2
36601: ST_TO_ADDR
// end ;
36602: GO 36510
36604: POP
36605: POP
36606: GO 36490
36608: POP
36609: POP
// if not list then
36610: LD_VAR 0 13
36614: NOT
36615: IFFALSE 36619
// exit ;
36617: GO 36690
// for i in list do
36619: LD_ADDR_VAR 0 6
36623: PUSH
36624: LD_VAR 0 13
36628: PUSH
36629: FOR_IN
36630: IFFALSE 36688
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36632: LD_VAR 0 1
36636: PPUSH
36637: LD_STRING M
36639: PUSH
36640: LD_VAR 0 6
36644: PUSH
36645: LD_INT 1
36647: ARRAY
36648: PUSH
36649: LD_VAR 0 6
36653: PUSH
36654: LD_INT 2
36656: ARRAY
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: LD_INT 0
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: PUSH
36679: EMPTY
36680: LIST
36681: PPUSH
36682: CALL_OW 447
36686: GO 36629
36688: POP
36689: POP
// end ;
36690: LD_VAR 0 5
36694: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36695: LD_EXP 125
36699: NOT
36700: IFFALSE 36750
36702: GO 36704
36704: DISABLE
// begin initHack := true ;
36705: LD_ADDR_EXP 125
36709: PUSH
36710: LD_INT 1
36712: ST_TO_ADDR
// hackTanks := [ ] ;
36713: LD_ADDR_EXP 126
36717: PUSH
36718: EMPTY
36719: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36720: LD_ADDR_EXP 127
36724: PUSH
36725: EMPTY
36726: ST_TO_ADDR
// hackLimit := 3 ;
36727: LD_ADDR_EXP 128
36731: PUSH
36732: LD_INT 3
36734: ST_TO_ADDR
// hackDist := 12 ;
36735: LD_ADDR_EXP 129
36739: PUSH
36740: LD_INT 12
36742: ST_TO_ADDR
// hackCounter := [ ] ;
36743: LD_ADDR_EXP 130
36747: PUSH
36748: EMPTY
36749: ST_TO_ADDR
// end ;
36750: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36751: LD_EXP 125
36755: PUSH
36756: LD_INT 34
36758: PUSH
36759: LD_EXP 54
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PPUSH
36768: CALL_OW 69
36772: AND
36773: IFFALSE 37028
36775: GO 36777
36777: DISABLE
36778: LD_INT 0
36780: PPUSH
36781: PPUSH
// begin enable ;
36782: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36783: LD_ADDR_VAR 0 1
36787: PUSH
36788: LD_INT 34
36790: PUSH
36791: LD_EXP 54
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PPUSH
36800: CALL_OW 69
36804: PUSH
36805: FOR_IN
36806: IFFALSE 37026
// begin if not i in hackTanks then
36808: LD_VAR 0 1
36812: PUSH
36813: LD_EXP 126
36817: IN
36818: NOT
36819: IFFALSE 36902
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36821: LD_ADDR_EXP 126
36825: PUSH
36826: LD_EXP 126
36830: PPUSH
36831: LD_EXP 126
36835: PUSH
36836: LD_INT 1
36838: PLUS
36839: PPUSH
36840: LD_VAR 0 1
36844: PPUSH
36845: CALL_OW 1
36849: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36850: LD_ADDR_EXP 127
36854: PUSH
36855: LD_EXP 127
36859: PPUSH
36860: LD_EXP 127
36864: PUSH
36865: LD_INT 1
36867: PLUS
36868: PPUSH
36869: EMPTY
36870: PPUSH
36871: CALL_OW 1
36875: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36876: LD_ADDR_EXP 130
36880: PUSH
36881: LD_EXP 130
36885: PPUSH
36886: LD_EXP 130
36890: PUSH
36891: LD_INT 1
36893: PLUS
36894: PPUSH
36895: EMPTY
36896: PPUSH
36897: CALL_OW 1
36901: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36902: LD_VAR 0 1
36906: PPUSH
36907: CALL_OW 302
36911: NOT
36912: IFFALSE 36925
// begin HackUnlinkAll ( i ) ;
36914: LD_VAR 0 1
36918: PPUSH
36919: CALL 37031 0 1
// continue ;
36923: GO 36805
// end ; HackCheckCapturedStatus ( i ) ;
36925: LD_VAR 0 1
36929: PPUSH
36930: CALL 37474 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36934: LD_ADDR_VAR 0 2
36938: PUSH
36939: LD_INT 81
36941: PUSH
36942: LD_VAR 0 1
36946: PPUSH
36947: CALL_OW 255
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 33
36958: PUSH
36959: LD_INT 3
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 91
36968: PUSH
36969: LD_VAR 0 1
36973: PUSH
36974: LD_EXP 129
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 50
36986: PUSH
36987: EMPTY
36988: LIST
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: PPUSH
36996: CALL_OW 69
37000: ST_TO_ADDR
// if not tmp then
37001: LD_VAR 0 2
37005: NOT
37006: IFFALSE 37010
// continue ;
37008: GO 36805
// HackLink ( i , tmp ) ;
37010: LD_VAR 0 1
37014: PPUSH
37015: LD_VAR 0 2
37019: PPUSH
37020: CALL 37167 0 2
// end ;
37024: GO 36805
37026: POP
37027: POP
// end ;
37028: PPOPN 2
37030: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37031: LD_INT 0
37033: PPUSH
37034: PPUSH
37035: PPUSH
// if not hack in hackTanks then
37036: LD_VAR 0 1
37040: PUSH
37041: LD_EXP 126
37045: IN
37046: NOT
37047: IFFALSE 37051
// exit ;
37049: GO 37162
// index := GetElementIndex ( hackTanks , hack ) ;
37051: LD_ADDR_VAR 0 4
37055: PUSH
37056: LD_EXP 126
37060: PPUSH
37061: LD_VAR 0 1
37065: PPUSH
37066: CALL 44596 0 2
37070: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37071: LD_EXP 127
37075: PUSH
37076: LD_VAR 0 4
37080: ARRAY
37081: IFFALSE 37162
// begin for i in hackTanksCaptured [ index ] do
37083: LD_ADDR_VAR 0 3
37087: PUSH
37088: LD_EXP 127
37092: PUSH
37093: LD_VAR 0 4
37097: ARRAY
37098: PUSH
37099: FOR_IN
37100: IFFALSE 37126
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37102: LD_VAR 0 3
37106: PUSH
37107: LD_INT 1
37109: ARRAY
37110: PPUSH
37111: LD_VAR 0 3
37115: PUSH
37116: LD_INT 2
37118: ARRAY
37119: PPUSH
37120: CALL_OW 235
37124: GO 37099
37126: POP
37127: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37128: LD_ADDR_EXP 127
37132: PUSH
37133: LD_EXP 127
37137: PPUSH
37138: LD_VAR 0 4
37142: PPUSH
37143: EMPTY
37144: PPUSH
37145: CALL_OW 1
37149: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37150: LD_VAR 0 1
37154: PPUSH
37155: LD_INT 0
37157: PPUSH
37158: CALL_OW 505
// end ; end ;
37162: LD_VAR 0 2
37166: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37167: LD_INT 0
37169: PPUSH
37170: PPUSH
37171: PPUSH
// if not hack in hackTanks or not vehicles then
37172: LD_VAR 0 1
37176: PUSH
37177: LD_EXP 126
37181: IN
37182: NOT
37183: PUSH
37184: LD_VAR 0 2
37188: NOT
37189: OR
37190: IFFALSE 37194
// exit ;
37192: GO 37469
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37194: LD_ADDR_VAR 0 2
37198: PUSH
37199: LD_VAR 0 1
37203: PPUSH
37204: LD_VAR 0 2
37208: PPUSH
37209: LD_INT 1
37211: PPUSH
37212: LD_INT 1
37214: PPUSH
37215: CALL 45246 0 4
37219: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37220: LD_ADDR_VAR 0 5
37224: PUSH
37225: LD_EXP 126
37229: PPUSH
37230: LD_VAR 0 1
37234: PPUSH
37235: CALL 44596 0 2
37239: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37240: LD_EXP 127
37244: PUSH
37245: LD_VAR 0 5
37249: ARRAY
37250: PUSH
37251: LD_EXP 128
37255: LESS
37256: IFFALSE 37445
// begin for i := 1 to vehicles do
37258: LD_ADDR_VAR 0 4
37262: PUSH
37263: DOUBLE
37264: LD_INT 1
37266: DEC
37267: ST_TO_ADDR
37268: LD_VAR 0 2
37272: PUSH
37273: FOR_TO
37274: IFFALSE 37443
// begin if hackTanksCaptured [ index ] = hackLimit then
37276: LD_EXP 127
37280: PUSH
37281: LD_VAR 0 5
37285: ARRAY
37286: PUSH
37287: LD_EXP 128
37291: EQUAL
37292: IFFALSE 37296
// break ;
37294: GO 37443
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37296: LD_ADDR_EXP 130
37300: PUSH
37301: LD_EXP 130
37305: PPUSH
37306: LD_VAR 0 5
37310: PPUSH
37311: LD_EXP 130
37315: PUSH
37316: LD_VAR 0 5
37320: ARRAY
37321: PUSH
37322: LD_INT 1
37324: PLUS
37325: PPUSH
37326: CALL_OW 1
37330: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37331: LD_ADDR_EXP 127
37335: PUSH
37336: LD_EXP 127
37340: PPUSH
37341: LD_VAR 0 5
37345: PUSH
37346: LD_EXP 127
37350: PUSH
37351: LD_VAR 0 5
37355: ARRAY
37356: PUSH
37357: LD_INT 1
37359: PLUS
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PPUSH
37365: LD_VAR 0 2
37369: PUSH
37370: LD_VAR 0 4
37374: ARRAY
37375: PUSH
37376: LD_VAR 0 2
37380: PUSH
37381: LD_VAR 0 4
37385: ARRAY
37386: PPUSH
37387: CALL_OW 255
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PPUSH
37396: CALL 44811 0 3
37400: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37401: LD_VAR 0 2
37405: PUSH
37406: LD_VAR 0 4
37410: ARRAY
37411: PPUSH
37412: LD_VAR 0 1
37416: PPUSH
37417: CALL_OW 255
37421: PPUSH
37422: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37426: LD_VAR 0 2
37430: PUSH
37431: LD_VAR 0 4
37435: ARRAY
37436: PPUSH
37437: CALL_OW 141
// end ;
37441: GO 37273
37443: POP
37444: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37445: LD_VAR 0 1
37449: PPUSH
37450: LD_EXP 127
37454: PUSH
37455: LD_VAR 0 5
37459: ARRAY
37460: PUSH
37461: LD_INT 0
37463: PLUS
37464: PPUSH
37465: CALL_OW 505
// end ;
37469: LD_VAR 0 3
37473: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37474: LD_INT 0
37476: PPUSH
37477: PPUSH
37478: PPUSH
37479: PPUSH
// if not hack in hackTanks then
37480: LD_VAR 0 1
37484: PUSH
37485: LD_EXP 126
37489: IN
37490: NOT
37491: IFFALSE 37495
// exit ;
37493: GO 37735
// index := GetElementIndex ( hackTanks , hack ) ;
37495: LD_ADDR_VAR 0 4
37499: PUSH
37500: LD_EXP 126
37504: PPUSH
37505: LD_VAR 0 1
37509: PPUSH
37510: CALL 44596 0 2
37514: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37515: LD_ADDR_VAR 0 3
37519: PUSH
37520: DOUBLE
37521: LD_EXP 127
37525: PUSH
37526: LD_VAR 0 4
37530: ARRAY
37531: INC
37532: ST_TO_ADDR
37533: LD_INT 1
37535: PUSH
37536: FOR_DOWNTO
37537: IFFALSE 37709
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37539: LD_ADDR_VAR 0 5
37543: PUSH
37544: LD_EXP 127
37548: PUSH
37549: LD_VAR 0 4
37553: ARRAY
37554: PUSH
37555: LD_VAR 0 3
37559: ARRAY
37560: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37561: LD_VAR 0 5
37565: PUSH
37566: LD_INT 1
37568: ARRAY
37569: PPUSH
37570: CALL_OW 302
37574: NOT
37575: PUSH
37576: LD_VAR 0 5
37580: PUSH
37581: LD_INT 1
37583: ARRAY
37584: PPUSH
37585: CALL_OW 255
37589: PUSH
37590: LD_VAR 0 1
37594: PPUSH
37595: CALL_OW 255
37599: NONEQUAL
37600: OR
37601: IFFALSE 37707
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37603: LD_VAR 0 5
37607: PUSH
37608: LD_INT 1
37610: ARRAY
37611: PPUSH
37612: CALL_OW 305
37616: PUSH
37617: LD_VAR 0 5
37621: PUSH
37622: LD_INT 1
37624: ARRAY
37625: PPUSH
37626: CALL_OW 255
37630: PUSH
37631: LD_VAR 0 1
37635: PPUSH
37636: CALL_OW 255
37640: EQUAL
37641: AND
37642: IFFALSE 37666
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37644: LD_VAR 0 5
37648: PUSH
37649: LD_INT 1
37651: ARRAY
37652: PPUSH
37653: LD_VAR 0 5
37657: PUSH
37658: LD_INT 2
37660: ARRAY
37661: PPUSH
37662: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37666: LD_ADDR_EXP 127
37670: PUSH
37671: LD_EXP 127
37675: PPUSH
37676: LD_VAR 0 4
37680: PPUSH
37681: LD_EXP 127
37685: PUSH
37686: LD_VAR 0 4
37690: ARRAY
37691: PPUSH
37692: LD_VAR 0 3
37696: PPUSH
37697: CALL_OW 3
37701: PPUSH
37702: CALL_OW 1
37706: ST_TO_ADDR
// end ; end ;
37707: GO 37536
37709: POP
37710: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37711: LD_VAR 0 1
37715: PPUSH
37716: LD_EXP 127
37720: PUSH
37721: LD_VAR 0 4
37725: ARRAY
37726: PUSH
37727: LD_INT 0
37729: PLUS
37730: PPUSH
37731: CALL_OW 505
// end ;
37735: LD_VAR 0 2
37739: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37740: LD_INT 0
37742: PPUSH
37743: PPUSH
37744: PPUSH
37745: PPUSH
// if not hack in hackTanks then
37746: LD_VAR 0 1
37750: PUSH
37751: LD_EXP 126
37755: IN
37756: NOT
37757: IFFALSE 37761
// exit ;
37759: GO 37846
// index := GetElementIndex ( hackTanks , hack ) ;
37761: LD_ADDR_VAR 0 5
37765: PUSH
37766: LD_EXP 126
37770: PPUSH
37771: LD_VAR 0 1
37775: PPUSH
37776: CALL 44596 0 2
37780: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37781: LD_ADDR_VAR 0 4
37785: PUSH
37786: DOUBLE
37787: LD_INT 1
37789: DEC
37790: ST_TO_ADDR
37791: LD_EXP 127
37795: PUSH
37796: LD_VAR 0 5
37800: ARRAY
37801: PUSH
37802: FOR_TO
37803: IFFALSE 37844
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37805: LD_EXP 127
37809: PUSH
37810: LD_VAR 0 5
37814: ARRAY
37815: PUSH
37816: LD_VAR 0 4
37820: ARRAY
37821: PUSH
37822: LD_INT 1
37824: ARRAY
37825: PUSH
37826: LD_VAR 0 2
37830: EQUAL
37831: IFFALSE 37842
// KillUnit ( vehicle ) ;
37833: LD_VAR 0 2
37837: PPUSH
37838: CALL_OW 66
37842: GO 37802
37844: POP
37845: POP
// end ;
37846: LD_VAR 0 3
37850: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37851: LD_EXP 131
37855: NOT
37856: IFFALSE 37891
37858: GO 37860
37860: DISABLE
// begin initMiner := true ;
37861: LD_ADDR_EXP 131
37865: PUSH
37866: LD_INT 1
37868: ST_TO_ADDR
// minersList := [ ] ;
37869: LD_ADDR_EXP 132
37873: PUSH
37874: EMPTY
37875: ST_TO_ADDR
// minerMinesList := [ ] ;
37876: LD_ADDR_EXP 133
37880: PUSH
37881: EMPTY
37882: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37883: LD_ADDR_EXP 134
37887: PUSH
37888: LD_INT 5
37890: ST_TO_ADDR
// end ;
37891: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37892: LD_EXP 131
37896: PUSH
37897: LD_INT 34
37899: PUSH
37900: LD_EXP 59
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PPUSH
37909: CALL_OW 69
37913: AND
37914: IFFALSE 38377
37916: GO 37918
37918: DISABLE
37919: LD_INT 0
37921: PPUSH
37922: PPUSH
37923: PPUSH
37924: PPUSH
// begin enable ;
37925: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37926: LD_ADDR_VAR 0 1
37930: PUSH
37931: LD_INT 34
37933: PUSH
37934: LD_EXP 59
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PPUSH
37943: CALL_OW 69
37947: PUSH
37948: FOR_IN
37949: IFFALSE 38021
// begin if not i in minersList then
37951: LD_VAR 0 1
37955: PUSH
37956: LD_EXP 132
37960: IN
37961: NOT
37962: IFFALSE 38019
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37964: LD_ADDR_EXP 132
37968: PUSH
37969: LD_EXP 132
37973: PPUSH
37974: LD_EXP 132
37978: PUSH
37979: LD_INT 1
37981: PLUS
37982: PPUSH
37983: LD_VAR 0 1
37987: PPUSH
37988: CALL_OW 1
37992: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37993: LD_ADDR_EXP 133
37997: PUSH
37998: LD_EXP 133
38002: PPUSH
38003: LD_EXP 133
38007: PUSH
38008: LD_INT 1
38010: PLUS
38011: PPUSH
38012: EMPTY
38013: PPUSH
38014: CALL_OW 1
38018: ST_TO_ADDR
// end end ;
38019: GO 37948
38021: POP
38022: POP
// for i := minerMinesList downto 1 do
38023: LD_ADDR_VAR 0 1
38027: PUSH
38028: DOUBLE
38029: LD_EXP 133
38033: INC
38034: ST_TO_ADDR
38035: LD_INT 1
38037: PUSH
38038: FOR_DOWNTO
38039: IFFALSE 38375
// begin if IsLive ( minersList [ i ] ) then
38041: LD_EXP 132
38045: PUSH
38046: LD_VAR 0 1
38050: ARRAY
38051: PPUSH
38052: CALL_OW 300
38056: IFFALSE 38084
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38058: LD_EXP 132
38062: PUSH
38063: LD_VAR 0 1
38067: ARRAY
38068: PPUSH
38069: LD_EXP 133
38073: PUSH
38074: LD_VAR 0 1
38078: ARRAY
38079: PPUSH
38080: CALL_OW 505
// if not minerMinesList [ i ] then
38084: LD_EXP 133
38088: PUSH
38089: LD_VAR 0 1
38093: ARRAY
38094: NOT
38095: IFFALSE 38099
// continue ;
38097: GO 38038
// for j := minerMinesList [ i ] downto 1 do
38099: LD_ADDR_VAR 0 2
38103: PUSH
38104: DOUBLE
38105: LD_EXP 133
38109: PUSH
38110: LD_VAR 0 1
38114: ARRAY
38115: INC
38116: ST_TO_ADDR
38117: LD_INT 1
38119: PUSH
38120: FOR_DOWNTO
38121: IFFALSE 38371
// begin side := GetSide ( minersList [ i ] ) ;
38123: LD_ADDR_VAR 0 3
38127: PUSH
38128: LD_EXP 132
38132: PUSH
38133: LD_VAR 0 1
38137: ARRAY
38138: PPUSH
38139: CALL_OW 255
38143: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38144: LD_ADDR_VAR 0 4
38148: PUSH
38149: LD_EXP 133
38153: PUSH
38154: LD_VAR 0 1
38158: ARRAY
38159: PUSH
38160: LD_VAR 0 2
38164: ARRAY
38165: PUSH
38166: LD_INT 1
38168: ARRAY
38169: PPUSH
38170: LD_EXP 133
38174: PUSH
38175: LD_VAR 0 1
38179: ARRAY
38180: PUSH
38181: LD_VAR 0 2
38185: ARRAY
38186: PUSH
38187: LD_INT 2
38189: ARRAY
38190: PPUSH
38191: CALL_OW 428
38195: ST_TO_ADDR
// if not tmp then
38196: LD_VAR 0 4
38200: NOT
38201: IFFALSE 38205
// continue ;
38203: GO 38120
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38205: LD_VAR 0 4
38209: PUSH
38210: LD_INT 81
38212: PUSH
38213: LD_VAR 0 3
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PPUSH
38222: CALL_OW 69
38226: IN
38227: PUSH
38228: LD_EXP 133
38232: PUSH
38233: LD_VAR 0 1
38237: ARRAY
38238: PUSH
38239: LD_VAR 0 2
38243: ARRAY
38244: PUSH
38245: LD_INT 1
38247: ARRAY
38248: PPUSH
38249: LD_EXP 133
38253: PUSH
38254: LD_VAR 0 1
38258: ARRAY
38259: PUSH
38260: LD_VAR 0 2
38264: ARRAY
38265: PUSH
38266: LD_INT 2
38268: ARRAY
38269: PPUSH
38270: CALL_OW 458
38274: AND
38275: IFFALSE 38369
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38277: LD_EXP 133
38281: PUSH
38282: LD_VAR 0 1
38286: ARRAY
38287: PUSH
38288: LD_VAR 0 2
38292: ARRAY
38293: PUSH
38294: LD_INT 1
38296: ARRAY
38297: PPUSH
38298: LD_EXP 133
38302: PUSH
38303: LD_VAR 0 1
38307: ARRAY
38308: PUSH
38309: LD_VAR 0 2
38313: ARRAY
38314: PUSH
38315: LD_INT 2
38317: ARRAY
38318: PPUSH
38319: LD_VAR 0 3
38323: PPUSH
38324: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38328: LD_ADDR_EXP 133
38332: PUSH
38333: LD_EXP 133
38337: PPUSH
38338: LD_VAR 0 1
38342: PPUSH
38343: LD_EXP 133
38347: PUSH
38348: LD_VAR 0 1
38352: ARRAY
38353: PPUSH
38354: LD_VAR 0 2
38358: PPUSH
38359: CALL_OW 3
38363: PPUSH
38364: CALL_OW 1
38368: ST_TO_ADDR
// end ; end ;
38369: GO 38120
38371: POP
38372: POP
// end ;
38373: GO 38038
38375: POP
38376: POP
// end ;
38377: PPOPN 4
38379: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38380: LD_INT 0
38382: PPUSH
38383: PPUSH
// result := false ;
38384: LD_ADDR_VAR 0 4
38388: PUSH
38389: LD_INT 0
38391: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38392: LD_VAR 0 1
38396: PPUSH
38397: CALL_OW 264
38401: PUSH
38402: LD_EXP 59
38406: EQUAL
38407: NOT
38408: IFFALSE 38412
// exit ;
38410: GO 38652
// index := GetElementIndex ( minersList , unit ) ;
38412: LD_ADDR_VAR 0 5
38416: PUSH
38417: LD_EXP 132
38421: PPUSH
38422: LD_VAR 0 1
38426: PPUSH
38427: CALL 44596 0 2
38431: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38432: LD_EXP 133
38436: PUSH
38437: LD_VAR 0 5
38441: ARRAY
38442: PUSH
38443: LD_EXP 134
38447: GREATEREQUAL
38448: IFFALSE 38452
// exit ;
38450: GO 38652
// ComMoveXY ( unit , x , y ) ;
38452: LD_VAR 0 1
38456: PPUSH
38457: LD_VAR 0 2
38461: PPUSH
38462: LD_VAR 0 3
38466: PPUSH
38467: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38471: LD_INT 35
38473: PPUSH
38474: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38478: LD_VAR 0 1
38482: PPUSH
38483: LD_VAR 0 2
38487: PPUSH
38488: LD_VAR 0 3
38492: PPUSH
38493: CALL 74660 0 3
38497: NOT
38498: PUSH
38499: LD_VAR 0 1
38503: PPUSH
38504: CALL_OW 314
38508: AND
38509: IFFALSE 38513
// exit ;
38511: GO 38652
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38513: LD_VAR 0 2
38517: PPUSH
38518: LD_VAR 0 3
38522: PPUSH
38523: CALL_OW 428
38527: PUSH
38528: LD_VAR 0 1
38532: EQUAL
38533: PUSH
38534: LD_VAR 0 1
38538: PPUSH
38539: CALL_OW 314
38543: NOT
38544: AND
38545: IFFALSE 38471
// PlaySoundXY ( x , y , PlantMine ) ;
38547: LD_VAR 0 2
38551: PPUSH
38552: LD_VAR 0 3
38556: PPUSH
38557: LD_STRING PlantMine
38559: PPUSH
38560: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38564: LD_VAR 0 2
38568: PPUSH
38569: LD_VAR 0 3
38573: PPUSH
38574: LD_VAR 0 1
38578: PPUSH
38579: CALL_OW 255
38583: PPUSH
38584: LD_INT 0
38586: PPUSH
38587: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38591: LD_ADDR_EXP 133
38595: PUSH
38596: LD_EXP 133
38600: PPUSH
38601: LD_VAR 0 5
38605: PUSH
38606: LD_EXP 133
38610: PUSH
38611: LD_VAR 0 5
38615: ARRAY
38616: PUSH
38617: LD_INT 1
38619: PLUS
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PPUSH
38625: LD_VAR 0 2
38629: PUSH
38630: LD_VAR 0 3
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PPUSH
38639: CALL 44811 0 3
38643: ST_TO_ADDR
// result := true ;
38644: LD_ADDR_VAR 0 4
38648: PUSH
38649: LD_INT 1
38651: ST_TO_ADDR
// end ;
38652: LD_VAR 0 4
38656: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38657: LD_INT 0
38659: PPUSH
38660: PPUSH
38661: PPUSH
// if not unit in minersList then
38662: LD_VAR 0 1
38666: PUSH
38667: LD_EXP 132
38671: IN
38672: NOT
38673: IFFALSE 38677
// exit ;
38675: GO 39069
// index := GetElementIndex ( minersList , unit ) ;
38677: LD_ADDR_VAR 0 6
38681: PUSH
38682: LD_EXP 132
38686: PPUSH
38687: LD_VAR 0 1
38691: PPUSH
38692: CALL 44596 0 2
38696: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38697: LD_ADDR_VAR 0 5
38701: PUSH
38702: DOUBLE
38703: LD_EXP 133
38707: PUSH
38708: LD_VAR 0 6
38712: ARRAY
38713: INC
38714: ST_TO_ADDR
38715: LD_INT 1
38717: PUSH
38718: FOR_DOWNTO
38719: IFFALSE 38880
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38721: LD_EXP 133
38725: PUSH
38726: LD_VAR 0 6
38730: ARRAY
38731: PUSH
38732: LD_VAR 0 5
38736: ARRAY
38737: PUSH
38738: LD_INT 1
38740: ARRAY
38741: PUSH
38742: LD_VAR 0 2
38746: EQUAL
38747: PUSH
38748: LD_EXP 133
38752: PUSH
38753: LD_VAR 0 6
38757: ARRAY
38758: PUSH
38759: LD_VAR 0 5
38763: ARRAY
38764: PUSH
38765: LD_INT 2
38767: ARRAY
38768: PUSH
38769: LD_VAR 0 3
38773: EQUAL
38774: AND
38775: IFFALSE 38878
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38777: LD_EXP 133
38781: PUSH
38782: LD_VAR 0 6
38786: ARRAY
38787: PUSH
38788: LD_VAR 0 5
38792: ARRAY
38793: PUSH
38794: LD_INT 1
38796: ARRAY
38797: PPUSH
38798: LD_EXP 133
38802: PUSH
38803: LD_VAR 0 6
38807: ARRAY
38808: PUSH
38809: LD_VAR 0 5
38813: ARRAY
38814: PUSH
38815: LD_INT 2
38817: ARRAY
38818: PPUSH
38819: LD_VAR 0 1
38823: PPUSH
38824: CALL_OW 255
38828: PPUSH
38829: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38833: LD_ADDR_EXP 133
38837: PUSH
38838: LD_EXP 133
38842: PPUSH
38843: LD_VAR 0 6
38847: PPUSH
38848: LD_EXP 133
38852: PUSH
38853: LD_VAR 0 6
38857: ARRAY
38858: PPUSH
38859: LD_VAR 0 5
38863: PPUSH
38864: CALL_OW 3
38868: PPUSH
38869: CALL_OW 1
38873: ST_TO_ADDR
// exit ;
38874: POP
38875: POP
38876: GO 39069
// end ; end ;
38878: GO 38718
38880: POP
38881: POP
// for i := minerMinesList [ index ] downto 1 do
38882: LD_ADDR_VAR 0 5
38886: PUSH
38887: DOUBLE
38888: LD_EXP 133
38892: PUSH
38893: LD_VAR 0 6
38897: ARRAY
38898: INC
38899: ST_TO_ADDR
38900: LD_INT 1
38902: PUSH
38903: FOR_DOWNTO
38904: IFFALSE 39067
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38906: LD_EXP 133
38910: PUSH
38911: LD_VAR 0 6
38915: ARRAY
38916: PUSH
38917: LD_VAR 0 5
38921: ARRAY
38922: PUSH
38923: LD_INT 1
38925: ARRAY
38926: PPUSH
38927: LD_EXP 133
38931: PUSH
38932: LD_VAR 0 6
38936: ARRAY
38937: PUSH
38938: LD_VAR 0 5
38942: ARRAY
38943: PUSH
38944: LD_INT 2
38946: ARRAY
38947: PPUSH
38948: LD_VAR 0 2
38952: PPUSH
38953: LD_VAR 0 3
38957: PPUSH
38958: CALL_OW 298
38962: PUSH
38963: LD_INT 6
38965: LESS
38966: IFFALSE 39065
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38968: LD_EXP 133
38972: PUSH
38973: LD_VAR 0 6
38977: ARRAY
38978: PUSH
38979: LD_VAR 0 5
38983: ARRAY
38984: PUSH
38985: LD_INT 1
38987: ARRAY
38988: PPUSH
38989: LD_EXP 133
38993: PUSH
38994: LD_VAR 0 6
38998: ARRAY
38999: PUSH
39000: LD_VAR 0 5
39004: ARRAY
39005: PUSH
39006: LD_INT 2
39008: ARRAY
39009: PPUSH
39010: LD_VAR 0 1
39014: PPUSH
39015: CALL_OW 255
39019: PPUSH
39020: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39024: LD_ADDR_EXP 133
39028: PUSH
39029: LD_EXP 133
39033: PPUSH
39034: LD_VAR 0 6
39038: PPUSH
39039: LD_EXP 133
39043: PUSH
39044: LD_VAR 0 6
39048: ARRAY
39049: PPUSH
39050: LD_VAR 0 5
39054: PPUSH
39055: CALL_OW 3
39059: PPUSH
39060: CALL_OW 1
39064: ST_TO_ADDR
// end ; end ;
39065: GO 38903
39067: POP
39068: POP
// end ;
39069: LD_VAR 0 4
39073: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39074: LD_INT 0
39076: PPUSH
39077: PPUSH
39078: PPUSH
39079: PPUSH
39080: PPUSH
39081: PPUSH
39082: PPUSH
39083: PPUSH
39084: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39085: LD_VAR 0 1
39089: PPUSH
39090: CALL_OW 264
39094: PUSH
39095: LD_EXP 59
39099: EQUAL
39100: NOT
39101: PUSH
39102: LD_VAR 0 1
39106: PUSH
39107: LD_EXP 132
39111: IN
39112: NOT
39113: OR
39114: IFFALSE 39118
// exit ;
39116: GO 39440
// index := GetElementIndex ( minersList , unit ) ;
39118: LD_ADDR_VAR 0 6
39122: PUSH
39123: LD_EXP 132
39127: PPUSH
39128: LD_VAR 0 1
39132: PPUSH
39133: CALL 44596 0 2
39137: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39138: LD_ADDR_VAR 0 8
39142: PUSH
39143: LD_EXP 134
39147: PUSH
39148: LD_EXP 133
39152: PUSH
39153: LD_VAR 0 6
39157: ARRAY
39158: MINUS
39159: ST_TO_ADDR
// if not minesFreeAmount then
39160: LD_VAR 0 8
39164: NOT
39165: IFFALSE 39169
// exit ;
39167: GO 39440
// tmp := [ ] ;
39169: LD_ADDR_VAR 0 7
39173: PUSH
39174: EMPTY
39175: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39176: LD_ADDR_VAR 0 5
39180: PUSH
39181: DOUBLE
39182: LD_INT 1
39184: DEC
39185: ST_TO_ADDR
39186: LD_VAR 0 8
39190: PUSH
39191: FOR_TO
39192: IFFALSE 39387
// begin _d := rand ( 0 , 5 ) ;
39194: LD_ADDR_VAR 0 11
39198: PUSH
39199: LD_INT 0
39201: PPUSH
39202: LD_INT 5
39204: PPUSH
39205: CALL_OW 12
39209: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39210: LD_ADDR_VAR 0 12
39214: PUSH
39215: LD_INT 2
39217: PPUSH
39218: LD_INT 6
39220: PPUSH
39221: CALL_OW 12
39225: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39226: LD_ADDR_VAR 0 9
39230: PUSH
39231: LD_VAR 0 2
39235: PPUSH
39236: LD_VAR 0 11
39240: PPUSH
39241: LD_VAR 0 12
39245: PPUSH
39246: CALL_OW 272
39250: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39251: LD_ADDR_VAR 0 10
39255: PUSH
39256: LD_VAR 0 3
39260: PPUSH
39261: LD_VAR 0 11
39265: PPUSH
39266: LD_VAR 0 12
39270: PPUSH
39271: CALL_OW 273
39275: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39276: LD_VAR 0 9
39280: PPUSH
39281: LD_VAR 0 10
39285: PPUSH
39286: CALL_OW 488
39290: PUSH
39291: LD_VAR 0 9
39295: PUSH
39296: LD_VAR 0 10
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_VAR 0 7
39309: IN
39310: NOT
39311: AND
39312: PUSH
39313: LD_VAR 0 9
39317: PPUSH
39318: LD_VAR 0 10
39322: PPUSH
39323: CALL_OW 458
39327: NOT
39328: AND
39329: IFFALSE 39371
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39331: LD_ADDR_VAR 0 7
39335: PUSH
39336: LD_VAR 0 7
39340: PPUSH
39341: LD_VAR 0 7
39345: PUSH
39346: LD_INT 1
39348: PLUS
39349: PPUSH
39350: LD_VAR 0 9
39354: PUSH
39355: LD_VAR 0 10
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PPUSH
39364: CALL_OW 1
39368: ST_TO_ADDR
39369: GO 39385
// i := i - 1 ;
39371: LD_ADDR_VAR 0 5
39375: PUSH
39376: LD_VAR 0 5
39380: PUSH
39381: LD_INT 1
39383: MINUS
39384: ST_TO_ADDR
// end ;
39385: GO 39191
39387: POP
39388: POP
// for i in tmp do
39389: LD_ADDR_VAR 0 5
39393: PUSH
39394: LD_VAR 0 7
39398: PUSH
39399: FOR_IN
39400: IFFALSE 39438
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39402: LD_VAR 0 1
39406: PPUSH
39407: LD_VAR 0 5
39411: PUSH
39412: LD_INT 1
39414: ARRAY
39415: PPUSH
39416: LD_VAR 0 5
39420: PUSH
39421: LD_INT 2
39423: ARRAY
39424: PPUSH
39425: CALL 38380 0 3
39429: NOT
39430: IFFALSE 39436
// exit ;
39432: POP
39433: POP
39434: GO 39440
39436: GO 39399
39438: POP
39439: POP
// end ;
39440: LD_VAR 0 4
39444: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39445: LD_INT 0
39447: PPUSH
39448: PPUSH
39449: PPUSH
39450: PPUSH
39451: PPUSH
39452: PPUSH
39453: PPUSH
// if not GetClass ( unit ) = class_sniper then
39454: LD_VAR 0 1
39458: PPUSH
39459: CALL_OW 257
39463: PUSH
39464: LD_INT 5
39466: EQUAL
39467: NOT
39468: IFFALSE 39472
// exit ;
39470: GO 39860
// dist := 8 ;
39472: LD_ADDR_VAR 0 5
39476: PUSH
39477: LD_INT 8
39479: ST_TO_ADDR
// viewRange := 12 ;
39480: LD_ADDR_VAR 0 7
39484: PUSH
39485: LD_INT 12
39487: ST_TO_ADDR
// side := GetSide ( unit ) ;
39488: LD_ADDR_VAR 0 6
39492: PUSH
39493: LD_VAR 0 1
39497: PPUSH
39498: CALL_OW 255
39502: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39503: LD_INT 61
39505: PPUSH
39506: LD_VAR 0 6
39510: PPUSH
39511: CALL_OW 321
39515: PUSH
39516: LD_INT 2
39518: EQUAL
39519: IFFALSE 39529
// viewRange := 16 ;
39521: LD_ADDR_VAR 0 7
39525: PUSH
39526: LD_INT 16
39528: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39529: LD_VAR 0 1
39533: PPUSH
39534: LD_VAR 0 2
39538: PPUSH
39539: LD_VAR 0 3
39543: PPUSH
39544: CALL_OW 297
39548: PUSH
39549: LD_VAR 0 5
39553: GREATER
39554: IFFALSE 39633
// begin ComMoveXY ( unit , x , y ) ;
39556: LD_VAR 0 1
39560: PPUSH
39561: LD_VAR 0 2
39565: PPUSH
39566: LD_VAR 0 3
39570: PPUSH
39571: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39575: LD_INT 35
39577: PPUSH
39578: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39582: LD_VAR 0 1
39586: PPUSH
39587: LD_VAR 0 2
39591: PPUSH
39592: LD_VAR 0 3
39596: PPUSH
39597: CALL 74660 0 3
39601: NOT
39602: IFFALSE 39606
// exit ;
39604: GO 39860
// until GetDistUnitXY ( unit , x , y ) < dist ;
39606: LD_VAR 0 1
39610: PPUSH
39611: LD_VAR 0 2
39615: PPUSH
39616: LD_VAR 0 3
39620: PPUSH
39621: CALL_OW 297
39625: PUSH
39626: LD_VAR 0 5
39630: LESS
39631: IFFALSE 39575
// end ; ComTurnXY ( unit , x , y ) ;
39633: LD_VAR 0 1
39637: PPUSH
39638: LD_VAR 0 2
39642: PPUSH
39643: LD_VAR 0 3
39647: PPUSH
39648: CALL_OW 118
// wait ( 5 ) ;
39652: LD_INT 5
39654: PPUSH
39655: CALL_OW 67
// _d := GetDir ( unit ) ;
39659: LD_ADDR_VAR 0 10
39663: PUSH
39664: LD_VAR 0 1
39668: PPUSH
39669: CALL_OW 254
39673: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39674: LD_ADDR_VAR 0 8
39678: PUSH
39679: LD_VAR 0 1
39683: PPUSH
39684: CALL_OW 250
39688: PPUSH
39689: LD_VAR 0 10
39693: PPUSH
39694: LD_VAR 0 5
39698: PPUSH
39699: CALL_OW 272
39703: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39704: LD_ADDR_VAR 0 9
39708: PUSH
39709: LD_VAR 0 1
39713: PPUSH
39714: CALL_OW 251
39718: PPUSH
39719: LD_VAR 0 10
39723: PPUSH
39724: LD_VAR 0 5
39728: PPUSH
39729: CALL_OW 273
39733: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39734: LD_VAR 0 8
39738: PPUSH
39739: LD_VAR 0 9
39743: PPUSH
39744: CALL_OW 488
39748: NOT
39749: IFFALSE 39753
// exit ;
39751: GO 39860
// ComAnimCustom ( unit , 1 ) ;
39753: LD_VAR 0 1
39757: PPUSH
39758: LD_INT 1
39760: PPUSH
39761: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39765: LD_VAR 0 8
39769: PPUSH
39770: LD_VAR 0 9
39774: PPUSH
39775: LD_VAR 0 6
39779: PPUSH
39780: LD_VAR 0 7
39784: PPUSH
39785: CALL_OW 330
// repeat wait ( 1 ) ;
39789: LD_INT 1
39791: PPUSH
39792: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39796: LD_VAR 0 1
39800: PPUSH
39801: CALL_OW 316
39805: PUSH
39806: LD_VAR 0 1
39810: PPUSH
39811: CALL_OW 314
39815: OR
39816: PUSH
39817: LD_VAR 0 1
39821: PPUSH
39822: CALL_OW 302
39826: NOT
39827: OR
39828: PUSH
39829: LD_VAR 0 1
39833: PPUSH
39834: CALL_OW 301
39838: OR
39839: IFFALSE 39789
// RemoveSeeing ( _x , _y , side ) ;
39841: LD_VAR 0 8
39845: PPUSH
39846: LD_VAR 0 9
39850: PPUSH
39851: LD_VAR 0 6
39855: PPUSH
39856: CALL_OW 331
// end ; end_of_file
39860: LD_VAR 0 4
39864: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39865: LD_INT 0
39867: PPUSH
39868: PPUSH
// if exist_mode then
39869: LD_VAR 0 2
39873: IFFALSE 39898
// unit := CreateCharacter ( prefix & ident ) else
39875: LD_ADDR_VAR 0 5
39879: PUSH
39880: LD_VAR 0 3
39884: PUSH
39885: LD_VAR 0 1
39889: STR
39890: PPUSH
39891: CALL_OW 34
39895: ST_TO_ADDR
39896: GO 39913
// unit := NewCharacter ( ident ) ;
39898: LD_ADDR_VAR 0 5
39902: PUSH
39903: LD_VAR 0 1
39907: PPUSH
39908: CALL_OW 25
39912: ST_TO_ADDR
// result := unit ;
39913: LD_ADDR_VAR 0 4
39917: PUSH
39918: LD_VAR 0 5
39922: ST_TO_ADDR
// end ;
39923: LD_VAR 0 4
39927: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39928: LD_INT 0
39930: PPUSH
39931: PPUSH
// if not side or not nation then
39932: LD_VAR 0 1
39936: NOT
39937: PUSH
39938: LD_VAR 0 2
39942: NOT
39943: OR
39944: IFFALSE 39948
// exit ;
39946: GO 40712
// case nation of nation_american :
39948: LD_VAR 0 2
39952: PUSH
39953: LD_INT 1
39955: DOUBLE
39956: EQUAL
39957: IFTRUE 39961
39959: GO 40175
39961: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39962: LD_ADDR_VAR 0 4
39966: PUSH
39967: LD_INT 35
39969: PUSH
39970: LD_INT 45
39972: PUSH
39973: LD_INT 46
39975: PUSH
39976: LD_INT 47
39978: PUSH
39979: LD_INT 82
39981: PUSH
39982: LD_INT 83
39984: PUSH
39985: LD_INT 84
39987: PUSH
39988: LD_INT 85
39990: PUSH
39991: LD_INT 86
39993: PUSH
39994: LD_INT 1
39996: PUSH
39997: LD_INT 2
39999: PUSH
40000: LD_INT 6
40002: PUSH
40003: LD_INT 15
40005: PUSH
40006: LD_INT 16
40008: PUSH
40009: LD_INT 7
40011: PUSH
40012: LD_INT 12
40014: PUSH
40015: LD_INT 13
40017: PUSH
40018: LD_INT 10
40020: PUSH
40021: LD_INT 14
40023: PUSH
40024: LD_INT 20
40026: PUSH
40027: LD_INT 21
40029: PUSH
40030: LD_INT 22
40032: PUSH
40033: LD_INT 25
40035: PUSH
40036: LD_INT 32
40038: PUSH
40039: LD_INT 27
40041: PUSH
40042: LD_INT 36
40044: PUSH
40045: LD_INT 69
40047: PUSH
40048: LD_INT 39
40050: PUSH
40051: LD_INT 34
40053: PUSH
40054: LD_INT 40
40056: PUSH
40057: LD_INT 48
40059: PUSH
40060: LD_INT 49
40062: PUSH
40063: LD_INT 50
40065: PUSH
40066: LD_INT 51
40068: PUSH
40069: LD_INT 52
40071: PUSH
40072: LD_INT 53
40074: PUSH
40075: LD_INT 54
40077: PUSH
40078: LD_INT 55
40080: PUSH
40081: LD_INT 56
40083: PUSH
40084: LD_INT 57
40086: PUSH
40087: LD_INT 58
40089: PUSH
40090: LD_INT 59
40092: PUSH
40093: LD_INT 60
40095: PUSH
40096: LD_INT 61
40098: PUSH
40099: LD_INT 62
40101: PUSH
40102: LD_INT 80
40104: PUSH
40105: LD_INT 82
40107: PUSH
40108: LD_INT 83
40110: PUSH
40111: LD_INT 84
40113: PUSH
40114: LD_INT 85
40116: PUSH
40117: LD_INT 86
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: ST_TO_ADDR
40173: GO 40636
40175: LD_INT 2
40177: DOUBLE
40178: EQUAL
40179: IFTRUE 40183
40181: GO 40405
40183: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
40184: LD_ADDR_VAR 0 4
40188: PUSH
40189: LD_INT 35
40191: PUSH
40192: LD_INT 45
40194: PUSH
40195: LD_INT 46
40197: PUSH
40198: LD_INT 47
40200: PUSH
40201: LD_INT 82
40203: PUSH
40204: LD_INT 83
40206: PUSH
40207: LD_INT 84
40209: PUSH
40210: LD_INT 85
40212: PUSH
40213: LD_INT 87
40215: PUSH
40216: LD_INT 70
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: LD_INT 11
40224: PUSH
40225: LD_INT 3
40227: PUSH
40228: LD_INT 4
40230: PUSH
40231: LD_INT 5
40233: PUSH
40234: LD_INT 6
40236: PUSH
40237: LD_INT 15
40239: PUSH
40240: LD_INT 18
40242: PUSH
40243: LD_INT 7
40245: PUSH
40246: LD_INT 17
40248: PUSH
40249: LD_INT 8
40251: PUSH
40252: LD_INT 20
40254: PUSH
40255: LD_INT 21
40257: PUSH
40258: LD_INT 22
40260: PUSH
40261: LD_INT 72
40263: PUSH
40264: LD_INT 26
40266: PUSH
40267: LD_INT 69
40269: PUSH
40270: LD_INT 39
40272: PUSH
40273: LD_INT 40
40275: PUSH
40276: LD_INT 41
40278: PUSH
40279: LD_INT 42
40281: PUSH
40282: LD_INT 43
40284: PUSH
40285: LD_INT 48
40287: PUSH
40288: LD_INT 49
40290: PUSH
40291: LD_INT 50
40293: PUSH
40294: LD_INT 51
40296: PUSH
40297: LD_INT 52
40299: PUSH
40300: LD_INT 53
40302: PUSH
40303: LD_INT 54
40305: PUSH
40306: LD_INT 55
40308: PUSH
40309: LD_INT 56
40311: PUSH
40312: LD_INT 60
40314: PUSH
40315: LD_INT 61
40317: PUSH
40318: LD_INT 62
40320: PUSH
40321: LD_INT 66
40323: PUSH
40324: LD_INT 67
40326: PUSH
40327: LD_INT 68
40329: PUSH
40330: LD_INT 81
40332: PUSH
40333: LD_INT 82
40335: PUSH
40336: LD_INT 83
40338: PUSH
40339: LD_INT 84
40341: PUSH
40342: LD_INT 85
40344: PUSH
40345: LD_INT 87
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: ST_TO_ADDR
40403: GO 40636
40405: LD_INT 3
40407: DOUBLE
40408: EQUAL
40409: IFTRUE 40413
40411: GO 40635
40413: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40414: LD_ADDR_VAR 0 4
40418: PUSH
40419: LD_INT 46
40421: PUSH
40422: LD_INT 47
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: LD_INT 2
40430: PUSH
40431: LD_INT 82
40433: PUSH
40434: LD_INT 83
40436: PUSH
40437: LD_INT 84
40439: PUSH
40440: LD_INT 85
40442: PUSH
40443: LD_INT 86
40445: PUSH
40446: LD_INT 11
40448: PUSH
40449: LD_INT 9
40451: PUSH
40452: LD_INT 20
40454: PUSH
40455: LD_INT 19
40457: PUSH
40458: LD_INT 21
40460: PUSH
40461: LD_INT 24
40463: PUSH
40464: LD_INT 22
40466: PUSH
40467: LD_INT 25
40469: PUSH
40470: LD_INT 28
40472: PUSH
40473: LD_INT 29
40475: PUSH
40476: LD_INT 30
40478: PUSH
40479: LD_INT 31
40481: PUSH
40482: LD_INT 37
40484: PUSH
40485: LD_INT 38
40487: PUSH
40488: LD_INT 32
40490: PUSH
40491: LD_INT 27
40493: PUSH
40494: LD_INT 33
40496: PUSH
40497: LD_INT 69
40499: PUSH
40500: LD_INT 39
40502: PUSH
40503: LD_INT 34
40505: PUSH
40506: LD_INT 40
40508: PUSH
40509: LD_INT 71
40511: PUSH
40512: LD_INT 23
40514: PUSH
40515: LD_INT 44
40517: PUSH
40518: LD_INT 48
40520: PUSH
40521: LD_INT 49
40523: PUSH
40524: LD_INT 50
40526: PUSH
40527: LD_INT 51
40529: PUSH
40530: LD_INT 52
40532: PUSH
40533: LD_INT 53
40535: PUSH
40536: LD_INT 54
40538: PUSH
40539: LD_INT 55
40541: PUSH
40542: LD_INT 56
40544: PUSH
40545: LD_INT 57
40547: PUSH
40548: LD_INT 58
40550: PUSH
40551: LD_INT 59
40553: PUSH
40554: LD_INT 63
40556: PUSH
40557: LD_INT 64
40559: PUSH
40560: LD_INT 65
40562: PUSH
40563: LD_INT 82
40565: PUSH
40566: LD_INT 83
40568: PUSH
40569: LD_INT 84
40571: PUSH
40572: LD_INT 85
40574: PUSH
40575: LD_INT 86
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: ST_TO_ADDR
40633: GO 40636
40635: POP
// if state > - 1 and state < 3 then
40636: LD_VAR 0 3
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: GREATER
40645: PUSH
40646: LD_VAR 0 3
40650: PUSH
40651: LD_INT 3
40653: LESS
40654: AND
40655: IFFALSE 40712
// for i in result do
40657: LD_ADDR_VAR 0 5
40661: PUSH
40662: LD_VAR 0 4
40666: PUSH
40667: FOR_IN
40668: IFFALSE 40710
// if GetTech ( i , side ) <> state then
40670: LD_VAR 0 5
40674: PPUSH
40675: LD_VAR 0 1
40679: PPUSH
40680: CALL_OW 321
40684: PUSH
40685: LD_VAR 0 3
40689: NONEQUAL
40690: IFFALSE 40708
// result := result diff i ;
40692: LD_ADDR_VAR 0 4
40696: PUSH
40697: LD_VAR 0 4
40701: PUSH
40702: LD_VAR 0 5
40706: DIFF
40707: ST_TO_ADDR
40708: GO 40667
40710: POP
40711: POP
// end ;
40712: LD_VAR 0 4
40716: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40717: LD_INT 0
40719: PPUSH
40720: PPUSH
40721: PPUSH
// result := true ;
40722: LD_ADDR_VAR 0 3
40726: PUSH
40727: LD_INT 1
40729: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40730: LD_ADDR_VAR 0 5
40734: PUSH
40735: LD_VAR 0 2
40739: PPUSH
40740: CALL_OW 480
40744: ST_TO_ADDR
// if not tmp then
40745: LD_VAR 0 5
40749: NOT
40750: IFFALSE 40754
// exit ;
40752: GO 40803
// for i in tmp do
40754: LD_ADDR_VAR 0 4
40758: PUSH
40759: LD_VAR 0 5
40763: PUSH
40764: FOR_IN
40765: IFFALSE 40801
// if GetTech ( i , side ) <> state_researched then
40767: LD_VAR 0 4
40771: PPUSH
40772: LD_VAR 0 1
40776: PPUSH
40777: CALL_OW 321
40781: PUSH
40782: LD_INT 2
40784: NONEQUAL
40785: IFFALSE 40799
// begin result := false ;
40787: LD_ADDR_VAR 0 3
40791: PUSH
40792: LD_INT 0
40794: ST_TO_ADDR
// exit ;
40795: POP
40796: POP
40797: GO 40803
// end ;
40799: GO 40764
40801: POP
40802: POP
// end ;
40803: LD_VAR 0 3
40807: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40808: LD_INT 0
40810: PPUSH
40811: PPUSH
40812: PPUSH
40813: PPUSH
40814: PPUSH
40815: PPUSH
40816: PPUSH
40817: PPUSH
40818: PPUSH
40819: PPUSH
40820: PPUSH
40821: PPUSH
40822: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40823: LD_VAR 0 1
40827: NOT
40828: PUSH
40829: LD_VAR 0 1
40833: PPUSH
40834: CALL_OW 257
40838: PUSH
40839: LD_INT 9
40841: NONEQUAL
40842: OR
40843: IFFALSE 40847
// exit ;
40845: GO 41420
// side := GetSide ( unit ) ;
40847: LD_ADDR_VAR 0 9
40851: PUSH
40852: LD_VAR 0 1
40856: PPUSH
40857: CALL_OW 255
40861: ST_TO_ADDR
// tech_space := tech_spacanom ;
40862: LD_ADDR_VAR 0 12
40866: PUSH
40867: LD_INT 29
40869: ST_TO_ADDR
// tech_time := tech_taurad ;
40870: LD_ADDR_VAR 0 13
40874: PUSH
40875: LD_INT 28
40877: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40878: LD_ADDR_VAR 0 11
40882: PUSH
40883: LD_VAR 0 1
40887: PPUSH
40888: CALL_OW 310
40892: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40893: LD_VAR 0 11
40897: PPUSH
40898: CALL_OW 247
40902: PUSH
40903: LD_INT 2
40905: EQUAL
40906: IFFALSE 40910
// exit ;
40908: GO 41420
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40910: LD_ADDR_VAR 0 8
40914: PUSH
40915: LD_INT 81
40917: PUSH
40918: LD_VAR 0 9
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 3
40929: PUSH
40930: LD_INT 21
40932: PUSH
40933: LD_INT 3
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PPUSH
40948: CALL_OW 69
40952: ST_TO_ADDR
// if not tmp then
40953: LD_VAR 0 8
40957: NOT
40958: IFFALSE 40962
// exit ;
40960: GO 41420
// if in_unit then
40962: LD_VAR 0 11
40966: IFFALSE 40990
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40968: LD_ADDR_VAR 0 10
40972: PUSH
40973: LD_VAR 0 8
40977: PPUSH
40978: LD_VAR 0 11
40982: PPUSH
40983: CALL_OW 74
40987: ST_TO_ADDR
40988: GO 41010
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40990: LD_ADDR_VAR 0 10
40994: PUSH
40995: LD_VAR 0 8
40999: PPUSH
41000: LD_VAR 0 1
41004: PPUSH
41005: CALL_OW 74
41009: ST_TO_ADDR
// if not enemy then
41010: LD_VAR 0 10
41014: NOT
41015: IFFALSE 41019
// exit ;
41017: GO 41420
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41019: LD_VAR 0 11
41023: PUSH
41024: LD_VAR 0 11
41028: PPUSH
41029: LD_VAR 0 10
41033: PPUSH
41034: CALL_OW 296
41038: PUSH
41039: LD_INT 13
41041: GREATER
41042: AND
41043: PUSH
41044: LD_VAR 0 1
41048: PPUSH
41049: LD_VAR 0 10
41053: PPUSH
41054: CALL_OW 296
41058: PUSH
41059: LD_INT 12
41061: GREATER
41062: OR
41063: IFFALSE 41067
// exit ;
41065: GO 41420
// missile := [ 1 ] ;
41067: LD_ADDR_VAR 0 14
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: EMPTY
41076: LIST
41077: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41078: LD_VAR 0 9
41082: PPUSH
41083: LD_VAR 0 12
41087: PPUSH
41088: CALL_OW 325
41092: IFFALSE 41121
// missile := Insert ( missile , missile + 1 , 2 ) ;
41094: LD_ADDR_VAR 0 14
41098: PUSH
41099: LD_VAR 0 14
41103: PPUSH
41104: LD_VAR 0 14
41108: PUSH
41109: LD_INT 1
41111: PLUS
41112: PPUSH
41113: LD_INT 2
41115: PPUSH
41116: CALL_OW 2
41120: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41121: LD_VAR 0 9
41125: PPUSH
41126: LD_VAR 0 13
41130: PPUSH
41131: CALL_OW 325
41135: PUSH
41136: LD_VAR 0 10
41140: PPUSH
41141: CALL_OW 255
41145: PPUSH
41146: LD_VAR 0 13
41150: PPUSH
41151: CALL_OW 325
41155: NOT
41156: AND
41157: IFFALSE 41186
// missile := Insert ( missile , missile + 1 , 3 ) ;
41159: LD_ADDR_VAR 0 14
41163: PUSH
41164: LD_VAR 0 14
41168: PPUSH
41169: LD_VAR 0 14
41173: PUSH
41174: LD_INT 1
41176: PLUS
41177: PPUSH
41178: LD_INT 3
41180: PPUSH
41181: CALL_OW 2
41185: ST_TO_ADDR
// if missile < 2 then
41186: LD_VAR 0 14
41190: PUSH
41191: LD_INT 2
41193: LESS
41194: IFFALSE 41198
// exit ;
41196: GO 41420
// x := GetX ( enemy ) ;
41198: LD_ADDR_VAR 0 4
41202: PUSH
41203: LD_VAR 0 10
41207: PPUSH
41208: CALL_OW 250
41212: ST_TO_ADDR
// y := GetY ( enemy ) ;
41213: LD_ADDR_VAR 0 5
41217: PUSH
41218: LD_VAR 0 10
41222: PPUSH
41223: CALL_OW 251
41227: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41228: LD_ADDR_VAR 0 6
41232: PUSH
41233: LD_VAR 0 4
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PPUSH
41242: LD_INT 1
41244: PPUSH
41245: CALL_OW 12
41249: PLUS
41250: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41251: LD_ADDR_VAR 0 7
41255: PUSH
41256: LD_VAR 0 5
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PPUSH
41265: LD_INT 1
41267: PPUSH
41268: CALL_OW 12
41272: PLUS
41273: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41274: LD_VAR 0 6
41278: PPUSH
41279: LD_VAR 0 7
41283: PPUSH
41284: CALL_OW 488
41288: NOT
41289: IFFALSE 41311
// begin _x := x ;
41291: LD_ADDR_VAR 0 6
41295: PUSH
41296: LD_VAR 0 4
41300: ST_TO_ADDR
// _y := y ;
41301: LD_ADDR_VAR 0 7
41305: PUSH
41306: LD_VAR 0 5
41310: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41311: LD_ADDR_VAR 0 3
41315: PUSH
41316: LD_INT 1
41318: PPUSH
41319: LD_VAR 0 14
41323: PPUSH
41324: CALL_OW 12
41328: ST_TO_ADDR
// case i of 1 :
41329: LD_VAR 0 3
41333: PUSH
41334: LD_INT 1
41336: DOUBLE
41337: EQUAL
41338: IFTRUE 41342
41340: GO 41359
41342: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41343: LD_VAR 0 1
41347: PPUSH
41348: LD_VAR 0 10
41352: PPUSH
41353: CALL_OW 115
41357: GO 41420
41359: LD_INT 2
41361: DOUBLE
41362: EQUAL
41363: IFTRUE 41367
41365: GO 41389
41367: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41368: LD_VAR 0 1
41372: PPUSH
41373: LD_VAR 0 6
41377: PPUSH
41378: LD_VAR 0 7
41382: PPUSH
41383: CALL_OW 153
41387: GO 41420
41389: LD_INT 3
41391: DOUBLE
41392: EQUAL
41393: IFTRUE 41397
41395: GO 41419
41397: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41398: LD_VAR 0 1
41402: PPUSH
41403: LD_VAR 0 6
41407: PPUSH
41408: LD_VAR 0 7
41412: PPUSH
41413: CALL_OW 154
41417: GO 41420
41419: POP
// end ;
41420: LD_VAR 0 2
41424: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41425: LD_INT 0
41427: PPUSH
41428: PPUSH
41429: PPUSH
41430: PPUSH
41431: PPUSH
41432: PPUSH
// if not unit or not building then
41433: LD_VAR 0 1
41437: NOT
41438: PUSH
41439: LD_VAR 0 2
41443: NOT
41444: OR
41445: IFFALSE 41449
// exit ;
41447: GO 41607
// x := GetX ( building ) ;
41449: LD_ADDR_VAR 0 5
41453: PUSH
41454: LD_VAR 0 2
41458: PPUSH
41459: CALL_OW 250
41463: ST_TO_ADDR
// y := GetY ( building ) ;
41464: LD_ADDR_VAR 0 6
41468: PUSH
41469: LD_VAR 0 2
41473: PPUSH
41474: CALL_OW 251
41478: ST_TO_ADDR
// for i = 0 to 5 do
41479: LD_ADDR_VAR 0 4
41483: PUSH
41484: DOUBLE
41485: LD_INT 0
41487: DEC
41488: ST_TO_ADDR
41489: LD_INT 5
41491: PUSH
41492: FOR_TO
41493: IFFALSE 41605
// begin _x := ShiftX ( x , i , 3 ) ;
41495: LD_ADDR_VAR 0 7
41499: PUSH
41500: LD_VAR 0 5
41504: PPUSH
41505: LD_VAR 0 4
41509: PPUSH
41510: LD_INT 3
41512: PPUSH
41513: CALL_OW 272
41517: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41518: LD_ADDR_VAR 0 8
41522: PUSH
41523: LD_VAR 0 6
41527: PPUSH
41528: LD_VAR 0 4
41532: PPUSH
41533: LD_INT 3
41535: PPUSH
41536: CALL_OW 273
41540: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41541: LD_VAR 0 7
41545: PPUSH
41546: LD_VAR 0 8
41550: PPUSH
41551: CALL_OW 488
41555: NOT
41556: IFFALSE 41560
// continue ;
41558: GO 41492
// if HexInfo ( _x , _y ) = 0 then
41560: LD_VAR 0 7
41564: PPUSH
41565: LD_VAR 0 8
41569: PPUSH
41570: CALL_OW 428
41574: PUSH
41575: LD_INT 0
41577: EQUAL
41578: IFFALSE 41603
// begin ComMoveXY ( unit , _x , _y ) ;
41580: LD_VAR 0 1
41584: PPUSH
41585: LD_VAR 0 7
41589: PPUSH
41590: LD_VAR 0 8
41594: PPUSH
41595: CALL_OW 111
// exit ;
41599: POP
41600: POP
41601: GO 41607
// end ; end ;
41603: GO 41492
41605: POP
41606: POP
// end ;
41607: LD_VAR 0 3
41611: RET
// export function ScanBase ( side , base_area ) ; begin
41612: LD_INT 0
41614: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41615: LD_ADDR_VAR 0 3
41619: PUSH
41620: LD_VAR 0 2
41624: PPUSH
41625: LD_INT 81
41627: PUSH
41628: LD_VAR 0 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PPUSH
41637: CALL_OW 70
41641: ST_TO_ADDR
// end ;
41642: LD_VAR 0 3
41646: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41647: LD_INT 0
41649: PPUSH
41650: PPUSH
41651: PPUSH
41652: PPUSH
// result := false ;
41653: LD_ADDR_VAR 0 2
41657: PUSH
41658: LD_INT 0
41660: ST_TO_ADDR
// side := GetSide ( unit ) ;
41661: LD_ADDR_VAR 0 3
41665: PUSH
41666: LD_VAR 0 1
41670: PPUSH
41671: CALL_OW 255
41675: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41676: LD_ADDR_VAR 0 4
41680: PUSH
41681: LD_VAR 0 1
41685: PPUSH
41686: CALL_OW 248
41690: ST_TO_ADDR
// case nat of 1 :
41691: LD_VAR 0 4
41695: PUSH
41696: LD_INT 1
41698: DOUBLE
41699: EQUAL
41700: IFTRUE 41704
41702: GO 41715
41704: POP
// tech := tech_lassight ; 2 :
41705: LD_ADDR_VAR 0 5
41709: PUSH
41710: LD_INT 12
41712: ST_TO_ADDR
41713: GO 41754
41715: LD_INT 2
41717: DOUBLE
41718: EQUAL
41719: IFTRUE 41723
41721: GO 41734
41723: POP
// tech := tech_mortar ; 3 :
41724: LD_ADDR_VAR 0 5
41728: PUSH
41729: LD_INT 41
41731: ST_TO_ADDR
41732: GO 41754
41734: LD_INT 3
41736: DOUBLE
41737: EQUAL
41738: IFTRUE 41742
41740: GO 41753
41742: POP
// tech := tech_bazooka ; end ;
41743: LD_ADDR_VAR 0 5
41747: PUSH
41748: LD_INT 44
41750: ST_TO_ADDR
41751: GO 41754
41753: POP
// if Researched ( side , tech ) then
41754: LD_VAR 0 3
41758: PPUSH
41759: LD_VAR 0 5
41763: PPUSH
41764: CALL_OW 325
41768: IFFALSE 41795
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41770: LD_ADDR_VAR 0 2
41774: PUSH
41775: LD_INT 5
41777: PUSH
41778: LD_INT 8
41780: PUSH
41781: LD_INT 9
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: LIST
41788: PUSH
41789: LD_VAR 0 4
41793: ARRAY
41794: ST_TO_ADDR
// end ;
41795: LD_VAR 0 2
41799: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41800: LD_INT 0
41802: PPUSH
41803: PPUSH
41804: PPUSH
// if not mines then
41805: LD_VAR 0 2
41809: NOT
41810: IFFALSE 41814
// exit ;
41812: GO 41958
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41814: LD_ADDR_VAR 0 5
41818: PUSH
41819: LD_INT 81
41821: PUSH
41822: LD_VAR 0 1
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 3
41833: PUSH
41834: LD_INT 21
41836: PUSH
41837: LD_INT 3
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PPUSH
41852: CALL_OW 69
41856: ST_TO_ADDR
// for i in mines do
41857: LD_ADDR_VAR 0 4
41861: PUSH
41862: LD_VAR 0 2
41866: PUSH
41867: FOR_IN
41868: IFFALSE 41956
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41870: LD_VAR 0 4
41874: PUSH
41875: LD_INT 1
41877: ARRAY
41878: PPUSH
41879: LD_VAR 0 4
41883: PUSH
41884: LD_INT 2
41886: ARRAY
41887: PPUSH
41888: CALL_OW 458
41892: NOT
41893: IFFALSE 41897
// continue ;
41895: GO 41867
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41897: LD_VAR 0 4
41901: PUSH
41902: LD_INT 1
41904: ARRAY
41905: PPUSH
41906: LD_VAR 0 4
41910: PUSH
41911: LD_INT 2
41913: ARRAY
41914: PPUSH
41915: CALL_OW 428
41919: PUSH
41920: LD_VAR 0 5
41924: IN
41925: IFFALSE 41954
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41927: LD_VAR 0 4
41931: PUSH
41932: LD_INT 1
41934: ARRAY
41935: PPUSH
41936: LD_VAR 0 4
41940: PUSH
41941: LD_INT 2
41943: ARRAY
41944: PPUSH
41945: LD_VAR 0 1
41949: PPUSH
41950: CALL_OW 456
// end ;
41954: GO 41867
41956: POP
41957: POP
// end ;
41958: LD_VAR 0 3
41962: RET
// export function Count ( array ) ; var i ; begin
41963: LD_INT 0
41965: PPUSH
41966: PPUSH
// result := 0 ;
41967: LD_ADDR_VAR 0 2
41971: PUSH
41972: LD_INT 0
41974: ST_TO_ADDR
// for i in array do
41975: LD_ADDR_VAR 0 3
41979: PUSH
41980: LD_VAR 0 1
41984: PUSH
41985: FOR_IN
41986: IFFALSE 42010
// if i then
41988: LD_VAR 0 3
41992: IFFALSE 42008
// result := result + 1 ;
41994: LD_ADDR_VAR 0 2
41998: PUSH
41999: LD_VAR 0 2
42003: PUSH
42004: LD_INT 1
42006: PLUS
42007: ST_TO_ADDR
42008: GO 41985
42010: POP
42011: POP
// end ;
42012: LD_VAR 0 2
42016: RET
// export function IsEmpty ( building ) ; begin
42017: LD_INT 0
42019: PPUSH
// if not building then
42020: LD_VAR 0 1
42024: NOT
42025: IFFALSE 42029
// exit ;
42027: GO 42072
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42029: LD_ADDR_VAR 0 2
42033: PUSH
42034: LD_VAR 0 1
42038: PUSH
42039: LD_INT 22
42041: PUSH
42042: LD_VAR 0 1
42046: PPUSH
42047: CALL_OW 255
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 58
42058: PUSH
42059: EMPTY
42060: LIST
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PPUSH
42066: CALL_OW 69
42070: IN
42071: ST_TO_ADDR
// end ;
42072: LD_VAR 0 2
42076: RET
// export function IsNotFull ( building ) ; begin
42077: LD_INT 0
42079: PPUSH
// if not building then
42080: LD_VAR 0 1
42084: NOT
42085: IFFALSE 42089
// exit ;
42087: GO 42108
// result := UnitsInside ( building ) < 6 ;
42089: LD_ADDR_VAR 0 2
42093: PUSH
42094: LD_VAR 0 1
42098: PPUSH
42099: CALL_OW 313
42103: PUSH
42104: LD_INT 6
42106: LESS
42107: ST_TO_ADDR
// end ;
42108: LD_VAR 0 2
42112: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42113: LD_INT 0
42115: PPUSH
42116: PPUSH
42117: PPUSH
42118: PPUSH
// tmp := [ ] ;
42119: LD_ADDR_VAR 0 3
42123: PUSH
42124: EMPTY
42125: ST_TO_ADDR
// list := [ ] ;
42126: LD_ADDR_VAR 0 5
42130: PUSH
42131: EMPTY
42132: ST_TO_ADDR
// for i = 16 to 25 do
42133: LD_ADDR_VAR 0 4
42137: PUSH
42138: DOUBLE
42139: LD_INT 16
42141: DEC
42142: ST_TO_ADDR
42143: LD_INT 25
42145: PUSH
42146: FOR_TO
42147: IFFALSE 42220
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42149: LD_ADDR_VAR 0 3
42153: PUSH
42154: LD_VAR 0 3
42158: PUSH
42159: LD_INT 22
42161: PUSH
42162: LD_VAR 0 1
42166: PPUSH
42167: CALL_OW 255
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 91
42178: PUSH
42179: LD_VAR 0 1
42183: PUSH
42184: LD_INT 6
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 30
42194: PUSH
42195: LD_VAR 0 4
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: LIST
42208: PUSH
42209: EMPTY
42210: LIST
42211: PPUSH
42212: CALL_OW 69
42216: ADD
42217: ST_TO_ADDR
42218: GO 42146
42220: POP
42221: POP
// for i = 1 to tmp do
42222: LD_ADDR_VAR 0 4
42226: PUSH
42227: DOUBLE
42228: LD_INT 1
42230: DEC
42231: ST_TO_ADDR
42232: LD_VAR 0 3
42236: PUSH
42237: FOR_TO
42238: IFFALSE 42326
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42240: LD_ADDR_VAR 0 5
42244: PUSH
42245: LD_VAR 0 5
42249: PUSH
42250: LD_VAR 0 3
42254: PUSH
42255: LD_VAR 0 4
42259: ARRAY
42260: PPUSH
42261: CALL_OW 266
42265: PUSH
42266: LD_VAR 0 3
42270: PUSH
42271: LD_VAR 0 4
42275: ARRAY
42276: PPUSH
42277: CALL_OW 250
42281: PUSH
42282: LD_VAR 0 3
42286: PUSH
42287: LD_VAR 0 4
42291: ARRAY
42292: PPUSH
42293: CALL_OW 251
42297: PUSH
42298: LD_VAR 0 3
42302: PUSH
42303: LD_VAR 0 4
42307: ARRAY
42308: PPUSH
42309: CALL_OW 254
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: PUSH
42320: EMPTY
42321: LIST
42322: ADD
42323: ST_TO_ADDR
42324: GO 42237
42326: POP
42327: POP
// result := list ;
42328: LD_ADDR_VAR 0 2
42332: PUSH
42333: LD_VAR 0 5
42337: ST_TO_ADDR
// end ;
42338: LD_VAR 0 2
42342: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42343: LD_INT 0
42345: PPUSH
42346: PPUSH
42347: PPUSH
42348: PPUSH
42349: PPUSH
42350: PPUSH
42351: PPUSH
// if not factory then
42352: LD_VAR 0 1
42356: NOT
42357: IFFALSE 42361
// exit ;
42359: GO 42954
// if control = control_apeman then
42361: LD_VAR 0 4
42365: PUSH
42366: LD_INT 5
42368: EQUAL
42369: IFFALSE 42478
// begin tmp := UnitsInside ( factory ) ;
42371: LD_ADDR_VAR 0 8
42375: PUSH
42376: LD_VAR 0 1
42380: PPUSH
42381: CALL_OW 313
42385: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42386: LD_VAR 0 8
42390: PPUSH
42391: LD_INT 25
42393: PUSH
42394: LD_INT 12
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PPUSH
42401: CALL_OW 72
42405: NOT
42406: IFFALSE 42416
// control := control_manual ;
42408: LD_ADDR_VAR 0 4
42412: PUSH
42413: LD_INT 1
42415: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42416: LD_ADDR_VAR 0 8
42420: PUSH
42421: LD_VAR 0 1
42425: PPUSH
42426: CALL 42113 0 1
42430: ST_TO_ADDR
// if tmp then
42431: LD_VAR 0 8
42435: IFFALSE 42478
// begin for i in tmp do
42437: LD_ADDR_VAR 0 7
42441: PUSH
42442: LD_VAR 0 8
42446: PUSH
42447: FOR_IN
42448: IFFALSE 42476
// if i [ 1 ] = b_ext_radio then
42450: LD_VAR 0 7
42454: PUSH
42455: LD_INT 1
42457: ARRAY
42458: PUSH
42459: LD_INT 22
42461: EQUAL
42462: IFFALSE 42474
// begin control := control_remote ;
42464: LD_ADDR_VAR 0 4
42468: PUSH
42469: LD_INT 2
42471: ST_TO_ADDR
// break ;
42472: GO 42476
// end ;
42474: GO 42447
42476: POP
42477: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42478: LD_VAR 0 1
42482: PPUSH
42483: LD_VAR 0 2
42487: PPUSH
42488: LD_VAR 0 3
42492: PPUSH
42493: LD_VAR 0 4
42497: PPUSH
42498: LD_VAR 0 5
42502: PPUSH
42503: CALL_OW 448
42507: IFFALSE 42542
// begin result := [ chassis , engine , control , weapon ] ;
42509: LD_ADDR_VAR 0 6
42513: PUSH
42514: LD_VAR 0 2
42518: PUSH
42519: LD_VAR 0 3
42523: PUSH
42524: LD_VAR 0 4
42528: PUSH
42529: LD_VAR 0 5
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: ST_TO_ADDR
// exit ;
42540: GO 42954
// end ; _chassis := AvailableChassisList ( factory ) ;
42542: LD_ADDR_VAR 0 9
42546: PUSH
42547: LD_VAR 0 1
42551: PPUSH
42552: CALL_OW 475
42556: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42557: LD_ADDR_VAR 0 11
42561: PUSH
42562: LD_VAR 0 1
42566: PPUSH
42567: CALL_OW 476
42571: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42572: LD_ADDR_VAR 0 12
42576: PUSH
42577: LD_VAR 0 1
42581: PPUSH
42582: CALL_OW 477
42586: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42587: LD_ADDR_VAR 0 10
42591: PUSH
42592: LD_VAR 0 1
42596: PPUSH
42597: CALL_OW 478
42601: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42602: LD_VAR 0 9
42606: NOT
42607: PUSH
42608: LD_VAR 0 11
42612: NOT
42613: OR
42614: PUSH
42615: LD_VAR 0 12
42619: NOT
42620: OR
42621: PUSH
42622: LD_VAR 0 10
42626: NOT
42627: OR
42628: IFFALSE 42663
// begin result := [ chassis , engine , control , weapon ] ;
42630: LD_ADDR_VAR 0 6
42634: PUSH
42635: LD_VAR 0 2
42639: PUSH
42640: LD_VAR 0 3
42644: PUSH
42645: LD_VAR 0 4
42649: PUSH
42650: LD_VAR 0 5
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: ST_TO_ADDR
// exit ;
42661: GO 42954
// end ; if not chassis in _chassis then
42663: LD_VAR 0 2
42667: PUSH
42668: LD_VAR 0 9
42672: IN
42673: NOT
42674: IFFALSE 42700
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42676: LD_ADDR_VAR 0 2
42680: PUSH
42681: LD_VAR 0 9
42685: PUSH
42686: LD_INT 1
42688: PPUSH
42689: LD_VAR 0 9
42693: PPUSH
42694: CALL_OW 12
42698: ARRAY
42699: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42700: LD_VAR 0 2
42704: PPUSH
42705: LD_VAR 0 3
42709: PPUSH
42710: CALL 42959 0 2
42714: NOT
42715: IFFALSE 42774
// repeat engine := _engine [ 1 ] ;
42717: LD_ADDR_VAR 0 3
42721: PUSH
42722: LD_VAR 0 11
42726: PUSH
42727: LD_INT 1
42729: ARRAY
42730: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42731: LD_ADDR_VAR 0 11
42735: PUSH
42736: LD_VAR 0 11
42740: PPUSH
42741: LD_INT 1
42743: PPUSH
42744: CALL_OW 3
42748: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42749: LD_VAR 0 2
42753: PPUSH
42754: LD_VAR 0 3
42758: PPUSH
42759: CALL 42959 0 2
42763: PUSH
42764: LD_VAR 0 11
42768: PUSH
42769: EMPTY
42770: EQUAL
42771: OR
42772: IFFALSE 42717
// if not control in _control then
42774: LD_VAR 0 4
42778: PUSH
42779: LD_VAR 0 12
42783: IN
42784: NOT
42785: IFFALSE 42811
// control := _control [ rand ( 1 , _control ) ] ;
42787: LD_ADDR_VAR 0 4
42791: PUSH
42792: LD_VAR 0 12
42796: PUSH
42797: LD_INT 1
42799: PPUSH
42800: LD_VAR 0 12
42804: PPUSH
42805: CALL_OW 12
42809: ARRAY
42810: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42811: LD_VAR 0 2
42815: PPUSH
42816: LD_VAR 0 5
42820: PPUSH
42821: CALL 43179 0 2
42825: NOT
42826: IFFALSE 42885
// repeat weapon := _weapon [ 1 ] ;
42828: LD_ADDR_VAR 0 5
42832: PUSH
42833: LD_VAR 0 10
42837: PUSH
42838: LD_INT 1
42840: ARRAY
42841: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42842: LD_ADDR_VAR 0 10
42846: PUSH
42847: LD_VAR 0 10
42851: PPUSH
42852: LD_INT 1
42854: PPUSH
42855: CALL_OW 3
42859: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42860: LD_VAR 0 2
42864: PPUSH
42865: LD_VAR 0 5
42869: PPUSH
42870: CALL 43179 0 2
42874: PUSH
42875: LD_VAR 0 10
42879: PUSH
42880: EMPTY
42881: EQUAL
42882: OR
42883: IFFALSE 42828
// result := [ ] ;
42885: LD_ADDR_VAR 0 6
42889: PUSH
42890: EMPTY
42891: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42892: LD_VAR 0 1
42896: PPUSH
42897: LD_VAR 0 2
42901: PPUSH
42902: LD_VAR 0 3
42906: PPUSH
42907: LD_VAR 0 4
42911: PPUSH
42912: LD_VAR 0 5
42916: PPUSH
42917: CALL_OW 448
42921: IFFALSE 42954
// result := [ chassis , engine , control , weapon ] ;
42923: LD_ADDR_VAR 0 6
42927: PUSH
42928: LD_VAR 0 2
42932: PUSH
42933: LD_VAR 0 3
42937: PUSH
42938: LD_VAR 0 4
42942: PUSH
42943: LD_VAR 0 5
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: ST_TO_ADDR
// end ;
42954: LD_VAR 0 6
42958: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42959: LD_INT 0
42961: PPUSH
// if not chassis or not engine then
42962: LD_VAR 0 1
42966: NOT
42967: PUSH
42968: LD_VAR 0 2
42972: NOT
42973: OR
42974: IFFALSE 42978
// exit ;
42976: GO 43174
// case engine of engine_solar :
42978: LD_VAR 0 2
42982: PUSH
42983: LD_INT 2
42985: DOUBLE
42986: EQUAL
42987: IFTRUE 42991
42989: GO 43029
42991: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42992: LD_ADDR_VAR 0 3
42996: PUSH
42997: LD_INT 11
42999: PUSH
43000: LD_INT 12
43002: PUSH
43003: LD_INT 13
43005: PUSH
43006: LD_INT 14
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: LD_INT 2
43014: PUSH
43015: LD_INT 3
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: ST_TO_ADDR
43027: GO 43158
43029: LD_INT 1
43031: DOUBLE
43032: EQUAL
43033: IFTRUE 43037
43035: GO 43099
43037: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43038: LD_ADDR_VAR 0 3
43042: PUSH
43043: LD_INT 11
43045: PUSH
43046: LD_INT 12
43048: PUSH
43049: LD_INT 13
43051: PUSH
43052: LD_INT 14
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: LD_INT 3
43063: PUSH
43064: LD_INT 4
43066: PUSH
43067: LD_INT 5
43069: PUSH
43070: LD_INT 21
43072: PUSH
43073: LD_INT 23
43075: PUSH
43076: LD_INT 22
43078: PUSH
43079: LD_INT 24
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: ST_TO_ADDR
43097: GO 43158
43099: LD_INT 3
43101: DOUBLE
43102: EQUAL
43103: IFTRUE 43107
43105: GO 43157
43107: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43108: LD_ADDR_VAR 0 3
43112: PUSH
43113: LD_INT 13
43115: PUSH
43116: LD_INT 14
43118: PUSH
43119: LD_INT 2
43121: PUSH
43122: LD_INT 3
43124: PUSH
43125: LD_INT 4
43127: PUSH
43128: LD_INT 5
43130: PUSH
43131: LD_INT 21
43133: PUSH
43134: LD_INT 22
43136: PUSH
43137: LD_INT 23
43139: PUSH
43140: LD_INT 24
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: ST_TO_ADDR
43155: GO 43158
43157: POP
// result := ( chassis in result ) ;
43158: LD_ADDR_VAR 0 3
43162: PUSH
43163: LD_VAR 0 1
43167: PUSH
43168: LD_VAR 0 3
43172: IN
43173: ST_TO_ADDR
// end ;
43174: LD_VAR 0 3
43178: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43179: LD_INT 0
43181: PPUSH
// if not chassis or not weapon then
43182: LD_VAR 0 1
43186: NOT
43187: PUSH
43188: LD_VAR 0 2
43192: NOT
43193: OR
43194: IFFALSE 43198
// exit ;
43196: GO 44224
// case weapon of us_machine_gun :
43198: LD_VAR 0 2
43202: PUSH
43203: LD_INT 2
43205: DOUBLE
43206: EQUAL
43207: IFTRUE 43211
43209: GO 43241
43211: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43212: LD_ADDR_VAR 0 3
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: LD_INT 3
43225: PUSH
43226: LD_INT 4
43228: PUSH
43229: LD_INT 5
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: ST_TO_ADDR
43239: GO 44208
43241: LD_INT 3
43243: DOUBLE
43244: EQUAL
43245: IFTRUE 43249
43247: GO 43279
43249: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43250: LD_ADDR_VAR 0 3
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: LD_INT 3
43263: PUSH
43264: LD_INT 4
43266: PUSH
43267: LD_INT 5
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: ST_TO_ADDR
43277: GO 44208
43279: LD_INT 11
43281: DOUBLE
43282: EQUAL
43283: IFTRUE 43287
43285: GO 43317
43287: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43288: LD_ADDR_VAR 0 3
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 2
43298: PUSH
43299: LD_INT 3
43301: PUSH
43302: LD_INT 4
43304: PUSH
43305: LD_INT 5
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: ST_TO_ADDR
43315: GO 44208
43317: LD_INT 4
43319: DOUBLE
43320: EQUAL
43321: IFTRUE 43325
43323: GO 43351
43325: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43326: LD_ADDR_VAR 0 3
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: LD_INT 3
43336: PUSH
43337: LD_INT 4
43339: PUSH
43340: LD_INT 5
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: ST_TO_ADDR
43349: GO 44208
43351: LD_INT 5
43353: DOUBLE
43354: EQUAL
43355: IFTRUE 43359
43357: GO 43385
43359: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43360: LD_ADDR_VAR 0 3
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: LD_INT 3
43370: PUSH
43371: LD_INT 4
43373: PUSH
43374: LD_INT 5
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: ST_TO_ADDR
43383: GO 44208
43385: LD_INT 9
43387: DOUBLE
43388: EQUAL
43389: IFTRUE 43393
43391: GO 43419
43393: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43394: LD_ADDR_VAR 0 3
43398: PUSH
43399: LD_INT 2
43401: PUSH
43402: LD_INT 3
43404: PUSH
43405: LD_INT 4
43407: PUSH
43408: LD_INT 5
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: ST_TO_ADDR
43417: GO 44208
43419: LD_INT 7
43421: DOUBLE
43422: EQUAL
43423: IFTRUE 43427
43425: GO 43453
43427: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43428: LD_ADDR_VAR 0 3
43432: PUSH
43433: LD_INT 2
43435: PUSH
43436: LD_INT 3
43438: PUSH
43439: LD_INT 4
43441: PUSH
43442: LD_INT 5
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: ST_TO_ADDR
43451: GO 44208
43453: LD_INT 12
43455: DOUBLE
43456: EQUAL
43457: IFTRUE 43461
43459: GO 43487
43461: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43462: LD_ADDR_VAR 0 3
43466: PUSH
43467: LD_INT 2
43469: PUSH
43470: LD_INT 3
43472: PUSH
43473: LD_INT 4
43475: PUSH
43476: LD_INT 5
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: ST_TO_ADDR
43485: GO 44208
43487: LD_INT 13
43489: DOUBLE
43490: EQUAL
43491: IFTRUE 43495
43493: GO 43521
43495: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43496: LD_ADDR_VAR 0 3
43500: PUSH
43501: LD_INT 2
43503: PUSH
43504: LD_INT 3
43506: PUSH
43507: LD_INT 4
43509: PUSH
43510: LD_INT 5
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: ST_TO_ADDR
43519: GO 44208
43521: LD_INT 14
43523: DOUBLE
43524: EQUAL
43525: IFTRUE 43529
43527: GO 43547
43529: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43530: LD_ADDR_VAR 0 3
43534: PUSH
43535: LD_INT 4
43537: PUSH
43538: LD_INT 5
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: ST_TO_ADDR
43545: GO 44208
43547: LD_INT 6
43549: DOUBLE
43550: EQUAL
43551: IFTRUE 43555
43553: GO 43573
43555: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43556: LD_ADDR_VAR 0 3
43560: PUSH
43561: LD_INT 4
43563: PUSH
43564: LD_INT 5
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: ST_TO_ADDR
43571: GO 44208
43573: LD_INT 10
43575: DOUBLE
43576: EQUAL
43577: IFTRUE 43581
43579: GO 43599
43581: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43582: LD_ADDR_VAR 0 3
43586: PUSH
43587: LD_INT 4
43589: PUSH
43590: LD_INT 5
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: ST_TO_ADDR
43597: GO 44208
43599: LD_INT 22
43601: DOUBLE
43602: EQUAL
43603: IFTRUE 43607
43605: GO 43633
43607: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43608: LD_ADDR_VAR 0 3
43612: PUSH
43613: LD_INT 11
43615: PUSH
43616: LD_INT 12
43618: PUSH
43619: LD_INT 13
43621: PUSH
43622: LD_INT 14
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: ST_TO_ADDR
43631: GO 44208
43633: LD_INT 23
43635: DOUBLE
43636: EQUAL
43637: IFTRUE 43641
43639: GO 43667
43641: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43642: LD_ADDR_VAR 0 3
43646: PUSH
43647: LD_INT 11
43649: PUSH
43650: LD_INT 12
43652: PUSH
43653: LD_INT 13
43655: PUSH
43656: LD_INT 14
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: ST_TO_ADDR
43665: GO 44208
43667: LD_INT 24
43669: DOUBLE
43670: EQUAL
43671: IFTRUE 43675
43673: GO 43701
43675: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43676: LD_ADDR_VAR 0 3
43680: PUSH
43681: LD_INT 11
43683: PUSH
43684: LD_INT 12
43686: PUSH
43687: LD_INT 13
43689: PUSH
43690: LD_INT 14
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: ST_TO_ADDR
43699: GO 44208
43701: LD_INT 30
43703: DOUBLE
43704: EQUAL
43705: IFTRUE 43709
43707: GO 43735
43709: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43710: LD_ADDR_VAR 0 3
43714: PUSH
43715: LD_INT 11
43717: PUSH
43718: LD_INT 12
43720: PUSH
43721: LD_INT 13
43723: PUSH
43724: LD_INT 14
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: ST_TO_ADDR
43733: GO 44208
43735: LD_INT 25
43737: DOUBLE
43738: EQUAL
43739: IFTRUE 43743
43741: GO 43761
43743: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43744: LD_ADDR_VAR 0 3
43748: PUSH
43749: LD_INT 13
43751: PUSH
43752: LD_INT 14
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: ST_TO_ADDR
43759: GO 44208
43761: LD_INT 27
43763: DOUBLE
43764: EQUAL
43765: IFTRUE 43769
43767: GO 43787
43769: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43770: LD_ADDR_VAR 0 3
43774: PUSH
43775: LD_INT 13
43777: PUSH
43778: LD_INT 14
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: ST_TO_ADDR
43785: GO 44208
43787: LD_INT 28
43789: DOUBLE
43790: EQUAL
43791: IFTRUE 43795
43793: GO 43813
43795: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43796: LD_ADDR_VAR 0 3
43800: PUSH
43801: LD_INT 13
43803: PUSH
43804: LD_INT 14
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: ST_TO_ADDR
43811: GO 44208
43813: LD_INT 29
43815: DOUBLE
43816: EQUAL
43817: IFTRUE 43821
43819: GO 43839
43821: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43822: LD_ADDR_VAR 0 3
43826: PUSH
43827: LD_INT 13
43829: PUSH
43830: LD_INT 14
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: ST_TO_ADDR
43837: GO 44208
43839: LD_INT 31
43841: DOUBLE
43842: EQUAL
43843: IFTRUE 43847
43845: GO 43865
43847: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43848: LD_ADDR_VAR 0 3
43852: PUSH
43853: LD_INT 13
43855: PUSH
43856: LD_INT 14
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: ST_TO_ADDR
43863: GO 44208
43865: LD_INT 26
43867: DOUBLE
43868: EQUAL
43869: IFTRUE 43873
43871: GO 43891
43873: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43874: LD_ADDR_VAR 0 3
43878: PUSH
43879: LD_INT 13
43881: PUSH
43882: LD_INT 14
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: ST_TO_ADDR
43889: GO 44208
43891: LD_INT 42
43893: DOUBLE
43894: EQUAL
43895: IFTRUE 43899
43897: GO 43925
43899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43900: LD_ADDR_VAR 0 3
43904: PUSH
43905: LD_INT 21
43907: PUSH
43908: LD_INT 22
43910: PUSH
43911: LD_INT 23
43913: PUSH
43914: LD_INT 24
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: ST_TO_ADDR
43923: GO 44208
43925: LD_INT 43
43927: DOUBLE
43928: EQUAL
43929: IFTRUE 43933
43931: GO 43959
43933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43934: LD_ADDR_VAR 0 3
43938: PUSH
43939: LD_INT 21
43941: PUSH
43942: LD_INT 22
43944: PUSH
43945: LD_INT 23
43947: PUSH
43948: LD_INT 24
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: ST_TO_ADDR
43957: GO 44208
43959: LD_INT 44
43961: DOUBLE
43962: EQUAL
43963: IFTRUE 43967
43965: GO 43993
43967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43968: LD_ADDR_VAR 0 3
43972: PUSH
43973: LD_INT 21
43975: PUSH
43976: LD_INT 22
43978: PUSH
43979: LD_INT 23
43981: PUSH
43982: LD_INT 24
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: ST_TO_ADDR
43991: GO 44208
43993: LD_INT 45
43995: DOUBLE
43996: EQUAL
43997: IFTRUE 44001
43999: GO 44027
44001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44002: LD_ADDR_VAR 0 3
44006: PUSH
44007: LD_INT 21
44009: PUSH
44010: LD_INT 22
44012: PUSH
44013: LD_INT 23
44015: PUSH
44016: LD_INT 24
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: ST_TO_ADDR
44025: GO 44208
44027: LD_INT 49
44029: DOUBLE
44030: EQUAL
44031: IFTRUE 44035
44033: GO 44061
44035: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44036: LD_ADDR_VAR 0 3
44040: PUSH
44041: LD_INT 21
44043: PUSH
44044: LD_INT 22
44046: PUSH
44047: LD_INT 23
44049: PUSH
44050: LD_INT 24
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: ST_TO_ADDR
44059: GO 44208
44061: LD_INT 51
44063: DOUBLE
44064: EQUAL
44065: IFTRUE 44069
44067: GO 44095
44069: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44070: LD_ADDR_VAR 0 3
44074: PUSH
44075: LD_INT 21
44077: PUSH
44078: LD_INT 22
44080: PUSH
44081: LD_INT 23
44083: PUSH
44084: LD_INT 24
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: ST_TO_ADDR
44093: GO 44208
44095: LD_INT 52
44097: DOUBLE
44098: EQUAL
44099: IFTRUE 44103
44101: GO 44129
44103: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44104: LD_ADDR_VAR 0 3
44108: PUSH
44109: LD_INT 21
44111: PUSH
44112: LD_INT 22
44114: PUSH
44115: LD_INT 23
44117: PUSH
44118: LD_INT 24
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: ST_TO_ADDR
44127: GO 44208
44129: LD_INT 53
44131: DOUBLE
44132: EQUAL
44133: IFTRUE 44137
44135: GO 44155
44137: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44138: LD_ADDR_VAR 0 3
44142: PUSH
44143: LD_INT 23
44145: PUSH
44146: LD_INT 24
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: ST_TO_ADDR
44153: GO 44208
44155: LD_INT 46
44157: DOUBLE
44158: EQUAL
44159: IFTRUE 44163
44161: GO 44181
44163: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44164: LD_ADDR_VAR 0 3
44168: PUSH
44169: LD_INT 23
44171: PUSH
44172: LD_INT 24
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: ST_TO_ADDR
44179: GO 44208
44181: LD_INT 47
44183: DOUBLE
44184: EQUAL
44185: IFTRUE 44189
44187: GO 44207
44189: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44190: LD_ADDR_VAR 0 3
44194: PUSH
44195: LD_INT 23
44197: PUSH
44198: LD_INT 24
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: ST_TO_ADDR
44205: GO 44208
44207: POP
// result := ( chassis in result ) ;
44208: LD_ADDR_VAR 0 3
44212: PUSH
44213: LD_VAR 0 1
44217: PUSH
44218: LD_VAR 0 3
44222: IN
44223: ST_TO_ADDR
// end ;
44224: LD_VAR 0 3
44228: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44229: LD_INT 0
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
44237: PPUSH
// result := array ;
44238: LD_ADDR_VAR 0 5
44242: PUSH
44243: LD_VAR 0 1
44247: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44248: LD_VAR 0 1
44252: NOT
44253: PUSH
44254: LD_VAR 0 2
44258: NOT
44259: OR
44260: PUSH
44261: LD_VAR 0 3
44265: NOT
44266: OR
44267: PUSH
44268: LD_VAR 0 2
44272: PUSH
44273: LD_VAR 0 1
44277: GREATER
44278: OR
44279: PUSH
44280: LD_VAR 0 3
44284: PUSH
44285: LD_VAR 0 1
44289: GREATER
44290: OR
44291: IFFALSE 44295
// exit ;
44293: GO 44591
// if direction then
44295: LD_VAR 0 4
44299: IFFALSE 44363
// begin d := 1 ;
44301: LD_ADDR_VAR 0 9
44305: PUSH
44306: LD_INT 1
44308: ST_TO_ADDR
// if i_from > i_to then
44309: LD_VAR 0 2
44313: PUSH
44314: LD_VAR 0 3
44318: GREATER
44319: IFFALSE 44345
// length := ( array - i_from ) + i_to else
44321: LD_ADDR_VAR 0 11
44325: PUSH
44326: LD_VAR 0 1
44330: PUSH
44331: LD_VAR 0 2
44335: MINUS
44336: PUSH
44337: LD_VAR 0 3
44341: PLUS
44342: ST_TO_ADDR
44343: GO 44361
// length := i_to - i_from ;
44345: LD_ADDR_VAR 0 11
44349: PUSH
44350: LD_VAR 0 3
44354: PUSH
44355: LD_VAR 0 2
44359: MINUS
44360: ST_TO_ADDR
// end else
44361: GO 44424
// begin d := - 1 ;
44363: LD_ADDR_VAR 0 9
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: ST_TO_ADDR
// if i_from > i_to then
44372: LD_VAR 0 2
44376: PUSH
44377: LD_VAR 0 3
44381: GREATER
44382: IFFALSE 44402
// length := i_from - i_to else
44384: LD_ADDR_VAR 0 11
44388: PUSH
44389: LD_VAR 0 2
44393: PUSH
44394: LD_VAR 0 3
44398: MINUS
44399: ST_TO_ADDR
44400: GO 44424
// length := ( array - i_to ) + i_from ;
44402: LD_ADDR_VAR 0 11
44406: PUSH
44407: LD_VAR 0 1
44411: PUSH
44412: LD_VAR 0 3
44416: MINUS
44417: PUSH
44418: LD_VAR 0 2
44422: PLUS
44423: ST_TO_ADDR
// end ; if not length then
44424: LD_VAR 0 11
44428: NOT
44429: IFFALSE 44433
// exit ;
44431: GO 44591
// tmp := array ;
44433: LD_ADDR_VAR 0 10
44437: PUSH
44438: LD_VAR 0 1
44442: ST_TO_ADDR
// for i = 1 to length do
44443: LD_ADDR_VAR 0 6
44447: PUSH
44448: DOUBLE
44449: LD_INT 1
44451: DEC
44452: ST_TO_ADDR
44453: LD_VAR 0 11
44457: PUSH
44458: FOR_TO
44459: IFFALSE 44579
// begin for j = 1 to array do
44461: LD_ADDR_VAR 0 7
44465: PUSH
44466: DOUBLE
44467: LD_INT 1
44469: DEC
44470: ST_TO_ADDR
44471: LD_VAR 0 1
44475: PUSH
44476: FOR_TO
44477: IFFALSE 44565
// begin k := j + d ;
44479: LD_ADDR_VAR 0 8
44483: PUSH
44484: LD_VAR 0 7
44488: PUSH
44489: LD_VAR 0 9
44493: PLUS
44494: ST_TO_ADDR
// if k > array then
44495: LD_VAR 0 8
44499: PUSH
44500: LD_VAR 0 1
44504: GREATER
44505: IFFALSE 44515
// k := 1 ;
44507: LD_ADDR_VAR 0 8
44511: PUSH
44512: LD_INT 1
44514: ST_TO_ADDR
// if not k then
44515: LD_VAR 0 8
44519: NOT
44520: IFFALSE 44532
// k := array ;
44522: LD_ADDR_VAR 0 8
44526: PUSH
44527: LD_VAR 0 1
44531: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44532: LD_ADDR_VAR 0 10
44536: PUSH
44537: LD_VAR 0 10
44541: PPUSH
44542: LD_VAR 0 8
44546: PPUSH
44547: LD_VAR 0 1
44551: PUSH
44552: LD_VAR 0 7
44556: ARRAY
44557: PPUSH
44558: CALL_OW 1
44562: ST_TO_ADDR
// end ;
44563: GO 44476
44565: POP
44566: POP
// array := tmp ;
44567: LD_ADDR_VAR 0 1
44571: PUSH
44572: LD_VAR 0 10
44576: ST_TO_ADDR
// end ;
44577: GO 44458
44579: POP
44580: POP
// result := array ;
44581: LD_ADDR_VAR 0 5
44585: PUSH
44586: LD_VAR 0 1
44590: ST_TO_ADDR
// end ;
44591: LD_VAR 0 5
44595: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44596: LD_INT 0
44598: PPUSH
44599: PPUSH
// result := 0 ;
44600: LD_ADDR_VAR 0 3
44604: PUSH
44605: LD_INT 0
44607: ST_TO_ADDR
// if not array or not value in array then
44608: LD_VAR 0 1
44612: NOT
44613: PUSH
44614: LD_VAR 0 2
44618: PUSH
44619: LD_VAR 0 1
44623: IN
44624: NOT
44625: OR
44626: IFFALSE 44630
// exit ;
44628: GO 44684
// for i = 1 to array do
44630: LD_ADDR_VAR 0 4
44634: PUSH
44635: DOUBLE
44636: LD_INT 1
44638: DEC
44639: ST_TO_ADDR
44640: LD_VAR 0 1
44644: PUSH
44645: FOR_TO
44646: IFFALSE 44682
// if value = array [ i ] then
44648: LD_VAR 0 2
44652: PUSH
44653: LD_VAR 0 1
44657: PUSH
44658: LD_VAR 0 4
44662: ARRAY
44663: EQUAL
44664: IFFALSE 44680
// begin result := i ;
44666: LD_ADDR_VAR 0 3
44670: PUSH
44671: LD_VAR 0 4
44675: ST_TO_ADDR
// exit ;
44676: POP
44677: POP
44678: GO 44684
// end ;
44680: GO 44645
44682: POP
44683: POP
// end ;
44684: LD_VAR 0 3
44688: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44689: LD_INT 0
44691: PPUSH
// vc_chassis := chassis ;
44692: LD_ADDR_OWVAR 37
44696: PUSH
44697: LD_VAR 0 1
44701: ST_TO_ADDR
// vc_engine := engine ;
44702: LD_ADDR_OWVAR 39
44706: PUSH
44707: LD_VAR 0 2
44711: ST_TO_ADDR
// vc_control := control ;
44712: LD_ADDR_OWVAR 38
44716: PUSH
44717: LD_VAR 0 3
44721: ST_TO_ADDR
// vc_weapon := weapon ;
44722: LD_ADDR_OWVAR 40
44726: PUSH
44727: LD_VAR 0 4
44731: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44732: LD_ADDR_OWVAR 41
44736: PUSH
44737: LD_VAR 0 5
44741: ST_TO_ADDR
// end ;
44742: LD_VAR 0 6
44746: RET
// export function WantPlant ( unit ) ; var task ; begin
44747: LD_INT 0
44749: PPUSH
44750: PPUSH
// result := false ;
44751: LD_ADDR_VAR 0 2
44755: PUSH
44756: LD_INT 0
44758: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44759: LD_ADDR_VAR 0 3
44763: PUSH
44764: LD_VAR 0 1
44768: PPUSH
44769: CALL_OW 437
44773: ST_TO_ADDR
// if task then
44774: LD_VAR 0 3
44778: IFFALSE 44806
// if task [ 1 ] [ 1 ] = p then
44780: LD_VAR 0 3
44784: PUSH
44785: LD_INT 1
44787: ARRAY
44788: PUSH
44789: LD_INT 1
44791: ARRAY
44792: PUSH
44793: LD_STRING p
44795: EQUAL
44796: IFFALSE 44806
// result := true ;
44798: LD_ADDR_VAR 0 2
44802: PUSH
44803: LD_INT 1
44805: ST_TO_ADDR
// end ;
44806: LD_VAR 0 2
44810: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44811: LD_INT 0
44813: PPUSH
44814: PPUSH
44815: PPUSH
44816: PPUSH
// if pos < 1 then
44817: LD_VAR 0 2
44821: PUSH
44822: LD_INT 1
44824: LESS
44825: IFFALSE 44829
// exit ;
44827: GO 45132
// if pos = 1 then
44829: LD_VAR 0 2
44833: PUSH
44834: LD_INT 1
44836: EQUAL
44837: IFFALSE 44870
// result := Replace ( arr , pos [ 1 ] , value ) else
44839: LD_ADDR_VAR 0 4
44843: PUSH
44844: LD_VAR 0 1
44848: PPUSH
44849: LD_VAR 0 2
44853: PUSH
44854: LD_INT 1
44856: ARRAY
44857: PPUSH
44858: LD_VAR 0 3
44862: PPUSH
44863: CALL_OW 1
44867: ST_TO_ADDR
44868: GO 45132
// begin tmp := arr ;
44870: LD_ADDR_VAR 0 6
44874: PUSH
44875: LD_VAR 0 1
44879: ST_TO_ADDR
// s_arr := [ tmp ] ;
44880: LD_ADDR_VAR 0 7
44884: PUSH
44885: LD_VAR 0 6
44889: PUSH
44890: EMPTY
44891: LIST
44892: ST_TO_ADDR
// for i = 1 to pos - 1 do
44893: LD_ADDR_VAR 0 5
44897: PUSH
44898: DOUBLE
44899: LD_INT 1
44901: DEC
44902: ST_TO_ADDR
44903: LD_VAR 0 2
44907: PUSH
44908: LD_INT 1
44910: MINUS
44911: PUSH
44912: FOR_TO
44913: IFFALSE 44958
// begin tmp := tmp [ pos [ i ] ] ;
44915: LD_ADDR_VAR 0 6
44919: PUSH
44920: LD_VAR 0 6
44924: PUSH
44925: LD_VAR 0 2
44929: PUSH
44930: LD_VAR 0 5
44934: ARRAY
44935: ARRAY
44936: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44937: LD_ADDR_VAR 0 7
44941: PUSH
44942: LD_VAR 0 7
44946: PUSH
44947: LD_VAR 0 6
44951: PUSH
44952: EMPTY
44953: LIST
44954: ADD
44955: ST_TO_ADDR
// end ;
44956: GO 44912
44958: POP
44959: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44960: LD_ADDR_VAR 0 6
44964: PUSH
44965: LD_VAR 0 6
44969: PPUSH
44970: LD_VAR 0 2
44974: PUSH
44975: LD_VAR 0 2
44979: ARRAY
44980: PPUSH
44981: LD_VAR 0 3
44985: PPUSH
44986: CALL_OW 1
44990: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44991: LD_ADDR_VAR 0 7
44995: PUSH
44996: LD_VAR 0 7
45000: PPUSH
45001: LD_VAR 0 7
45005: PPUSH
45006: LD_VAR 0 6
45010: PPUSH
45011: CALL_OW 1
45015: ST_TO_ADDR
// for i = s_arr downto 2 do
45016: LD_ADDR_VAR 0 5
45020: PUSH
45021: DOUBLE
45022: LD_VAR 0 7
45026: INC
45027: ST_TO_ADDR
45028: LD_INT 2
45030: PUSH
45031: FOR_DOWNTO
45032: IFFALSE 45116
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45034: LD_ADDR_VAR 0 6
45038: PUSH
45039: LD_VAR 0 7
45043: PUSH
45044: LD_VAR 0 5
45048: PUSH
45049: LD_INT 1
45051: MINUS
45052: ARRAY
45053: PPUSH
45054: LD_VAR 0 2
45058: PUSH
45059: LD_VAR 0 5
45063: PUSH
45064: LD_INT 1
45066: MINUS
45067: ARRAY
45068: PPUSH
45069: LD_VAR 0 7
45073: PUSH
45074: LD_VAR 0 5
45078: ARRAY
45079: PPUSH
45080: CALL_OW 1
45084: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45085: LD_ADDR_VAR 0 7
45089: PUSH
45090: LD_VAR 0 7
45094: PPUSH
45095: LD_VAR 0 5
45099: PUSH
45100: LD_INT 1
45102: MINUS
45103: PPUSH
45104: LD_VAR 0 6
45108: PPUSH
45109: CALL_OW 1
45113: ST_TO_ADDR
// end ;
45114: GO 45031
45116: POP
45117: POP
// result := s_arr [ 1 ] ;
45118: LD_ADDR_VAR 0 4
45122: PUSH
45123: LD_VAR 0 7
45127: PUSH
45128: LD_INT 1
45130: ARRAY
45131: ST_TO_ADDR
// end ; end ;
45132: LD_VAR 0 4
45136: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45137: LD_INT 0
45139: PPUSH
45140: PPUSH
// if not list then
45141: LD_VAR 0 1
45145: NOT
45146: IFFALSE 45150
// exit ;
45148: GO 45241
// i := list [ pos1 ] ;
45150: LD_ADDR_VAR 0 5
45154: PUSH
45155: LD_VAR 0 1
45159: PUSH
45160: LD_VAR 0 2
45164: ARRAY
45165: ST_TO_ADDR
// if not i then
45166: LD_VAR 0 5
45170: NOT
45171: IFFALSE 45175
// exit ;
45173: GO 45241
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45175: LD_ADDR_VAR 0 1
45179: PUSH
45180: LD_VAR 0 1
45184: PPUSH
45185: LD_VAR 0 2
45189: PPUSH
45190: LD_VAR 0 1
45194: PUSH
45195: LD_VAR 0 3
45199: ARRAY
45200: PPUSH
45201: CALL_OW 1
45205: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45206: LD_ADDR_VAR 0 1
45210: PUSH
45211: LD_VAR 0 1
45215: PPUSH
45216: LD_VAR 0 3
45220: PPUSH
45221: LD_VAR 0 5
45225: PPUSH
45226: CALL_OW 1
45230: ST_TO_ADDR
// result := list ;
45231: LD_ADDR_VAR 0 4
45235: PUSH
45236: LD_VAR 0 1
45240: ST_TO_ADDR
// end ;
45241: LD_VAR 0 4
45245: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45246: LD_INT 0
45248: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45249: LD_ADDR_VAR 0 5
45253: PUSH
45254: LD_VAR 0 1
45258: PPUSH
45259: CALL_OW 250
45263: PPUSH
45264: LD_VAR 0 1
45268: PPUSH
45269: CALL_OW 251
45273: PPUSH
45274: LD_VAR 0 2
45278: PPUSH
45279: LD_VAR 0 3
45283: PPUSH
45284: LD_VAR 0 4
45288: PPUSH
45289: CALL 45299 0 5
45293: ST_TO_ADDR
// end ;
45294: LD_VAR 0 5
45298: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45299: LD_INT 0
45301: PPUSH
45302: PPUSH
45303: PPUSH
45304: PPUSH
// if not list then
45305: LD_VAR 0 3
45309: NOT
45310: IFFALSE 45314
// exit ;
45312: GO 45702
// result := [ ] ;
45314: LD_ADDR_VAR 0 6
45318: PUSH
45319: EMPTY
45320: ST_TO_ADDR
// for i in list do
45321: LD_ADDR_VAR 0 7
45325: PUSH
45326: LD_VAR 0 3
45330: PUSH
45331: FOR_IN
45332: IFFALSE 45534
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45334: LD_ADDR_VAR 0 9
45338: PUSH
45339: LD_VAR 0 7
45343: PPUSH
45344: LD_VAR 0 1
45348: PPUSH
45349: LD_VAR 0 2
45353: PPUSH
45354: CALL_OW 297
45358: ST_TO_ADDR
// if not result then
45359: LD_VAR 0 6
45363: NOT
45364: IFFALSE 45390
// result := [ [ i , tmp ] ] else
45366: LD_ADDR_VAR 0 6
45370: PUSH
45371: LD_VAR 0 7
45375: PUSH
45376: LD_VAR 0 9
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: EMPTY
45386: LIST
45387: ST_TO_ADDR
45388: GO 45532
// begin if result [ result ] [ 2 ] < tmp then
45390: LD_VAR 0 6
45394: PUSH
45395: LD_VAR 0 6
45399: ARRAY
45400: PUSH
45401: LD_INT 2
45403: ARRAY
45404: PUSH
45405: LD_VAR 0 9
45409: LESS
45410: IFFALSE 45452
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45412: LD_ADDR_VAR 0 6
45416: PUSH
45417: LD_VAR 0 6
45421: PPUSH
45422: LD_VAR 0 6
45426: PUSH
45427: LD_INT 1
45429: PLUS
45430: PPUSH
45431: LD_VAR 0 7
45435: PUSH
45436: LD_VAR 0 9
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PPUSH
45445: CALL_OW 2
45449: ST_TO_ADDR
45450: GO 45532
// for j = 1 to result do
45452: LD_ADDR_VAR 0 8
45456: PUSH
45457: DOUBLE
45458: LD_INT 1
45460: DEC
45461: ST_TO_ADDR
45462: LD_VAR 0 6
45466: PUSH
45467: FOR_TO
45468: IFFALSE 45530
// begin if tmp < result [ j ] [ 2 ] then
45470: LD_VAR 0 9
45474: PUSH
45475: LD_VAR 0 6
45479: PUSH
45480: LD_VAR 0 8
45484: ARRAY
45485: PUSH
45486: LD_INT 2
45488: ARRAY
45489: LESS
45490: IFFALSE 45528
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45492: LD_ADDR_VAR 0 6
45496: PUSH
45497: LD_VAR 0 6
45501: PPUSH
45502: LD_VAR 0 8
45506: PPUSH
45507: LD_VAR 0 7
45511: PUSH
45512: LD_VAR 0 9
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PPUSH
45521: CALL_OW 2
45525: ST_TO_ADDR
// break ;
45526: GO 45530
// end ; end ;
45528: GO 45467
45530: POP
45531: POP
// end ; end ;
45532: GO 45331
45534: POP
45535: POP
// if result and not asc then
45536: LD_VAR 0 6
45540: PUSH
45541: LD_VAR 0 4
45545: NOT
45546: AND
45547: IFFALSE 45622
// begin tmp := result ;
45549: LD_ADDR_VAR 0 9
45553: PUSH
45554: LD_VAR 0 6
45558: ST_TO_ADDR
// for i = tmp downto 1 do
45559: LD_ADDR_VAR 0 7
45563: PUSH
45564: DOUBLE
45565: LD_VAR 0 9
45569: INC
45570: ST_TO_ADDR
45571: LD_INT 1
45573: PUSH
45574: FOR_DOWNTO
45575: IFFALSE 45620
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45577: LD_ADDR_VAR 0 6
45581: PUSH
45582: LD_VAR 0 6
45586: PPUSH
45587: LD_VAR 0 9
45591: PUSH
45592: LD_VAR 0 7
45596: MINUS
45597: PUSH
45598: LD_INT 1
45600: PLUS
45601: PPUSH
45602: LD_VAR 0 9
45606: PUSH
45607: LD_VAR 0 7
45611: ARRAY
45612: PPUSH
45613: CALL_OW 1
45617: ST_TO_ADDR
45618: GO 45574
45620: POP
45621: POP
// end ; tmp := [ ] ;
45622: LD_ADDR_VAR 0 9
45626: PUSH
45627: EMPTY
45628: ST_TO_ADDR
// if mode then
45629: LD_VAR 0 5
45633: IFFALSE 45702
// begin for i = 1 to result do
45635: LD_ADDR_VAR 0 7
45639: PUSH
45640: DOUBLE
45641: LD_INT 1
45643: DEC
45644: ST_TO_ADDR
45645: LD_VAR 0 6
45649: PUSH
45650: FOR_TO
45651: IFFALSE 45690
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45653: LD_ADDR_VAR 0 9
45657: PUSH
45658: LD_VAR 0 9
45662: PPUSH
45663: LD_VAR 0 7
45667: PPUSH
45668: LD_VAR 0 6
45672: PUSH
45673: LD_VAR 0 7
45677: ARRAY
45678: PUSH
45679: LD_INT 1
45681: ARRAY
45682: PPUSH
45683: CALL_OW 1
45687: ST_TO_ADDR
45688: GO 45650
45690: POP
45691: POP
// result := tmp ;
45692: LD_ADDR_VAR 0 6
45696: PUSH
45697: LD_VAR 0 9
45701: ST_TO_ADDR
// end ; end ;
45702: LD_VAR 0 6
45706: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45707: LD_INT 0
45709: PPUSH
45710: PPUSH
45711: PPUSH
45712: PPUSH
45713: PPUSH
45714: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45715: LD_ADDR_VAR 0 5
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: EMPTY
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: ST_TO_ADDR
// if not x or not y then
45737: LD_VAR 0 2
45741: NOT
45742: PUSH
45743: LD_VAR 0 3
45747: NOT
45748: OR
45749: IFFALSE 45753
// exit ;
45751: GO 47399
// if not range then
45753: LD_VAR 0 4
45757: NOT
45758: IFFALSE 45768
// range := 10 ;
45760: LD_ADDR_VAR 0 4
45764: PUSH
45765: LD_INT 10
45767: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45768: LD_ADDR_VAR 0 8
45772: PUSH
45773: LD_INT 81
45775: PUSH
45776: LD_VAR 0 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 92
45787: PUSH
45788: LD_VAR 0 2
45792: PUSH
45793: LD_VAR 0 3
45797: PUSH
45798: LD_VAR 0 4
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 3
45811: PUSH
45812: LD_INT 21
45814: PUSH
45815: LD_INT 3
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: LIST
45830: PPUSH
45831: CALL_OW 69
45835: ST_TO_ADDR
// if not tmp then
45836: LD_VAR 0 8
45840: NOT
45841: IFFALSE 45845
// exit ;
45843: GO 47399
// for i in tmp do
45845: LD_ADDR_VAR 0 6
45849: PUSH
45850: LD_VAR 0 8
45854: PUSH
45855: FOR_IN
45856: IFFALSE 47374
// begin points := [ 0 , 0 , 0 ] ;
45858: LD_ADDR_VAR 0 9
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: LIST
45876: ST_TO_ADDR
// bpoints := 1 ;
45877: LD_ADDR_VAR 0 10
45881: PUSH
45882: LD_INT 1
45884: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45885: LD_VAR 0 6
45889: PPUSH
45890: CALL_OW 247
45894: PUSH
45895: LD_INT 1
45897: DOUBLE
45898: EQUAL
45899: IFTRUE 45903
45901: GO 46481
45903: POP
// begin if GetClass ( i ) = 1 then
45904: LD_VAR 0 6
45908: PPUSH
45909: CALL_OW 257
45913: PUSH
45914: LD_INT 1
45916: EQUAL
45917: IFFALSE 45938
// points := [ 10 , 5 , 3 ] ;
45919: LD_ADDR_VAR 0 9
45923: PUSH
45924: LD_INT 10
45926: PUSH
45927: LD_INT 5
45929: PUSH
45930: LD_INT 3
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: LIST
45937: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45938: LD_VAR 0 6
45942: PPUSH
45943: CALL_OW 257
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: LD_INT 3
45953: PUSH
45954: LD_INT 4
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: LIST
45961: IN
45962: IFFALSE 45983
// points := [ 3 , 2 , 1 ] ;
45964: LD_ADDR_VAR 0 9
45968: PUSH
45969: LD_INT 3
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: LIST
45982: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45983: LD_VAR 0 6
45987: PPUSH
45988: CALL_OW 257
45992: PUSH
45993: LD_INT 5
45995: EQUAL
45996: IFFALSE 46017
// points := [ 130 , 5 , 2 ] ;
45998: LD_ADDR_VAR 0 9
46002: PUSH
46003: LD_INT 130
46005: PUSH
46006: LD_INT 5
46008: PUSH
46009: LD_INT 2
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46017: LD_VAR 0 6
46021: PPUSH
46022: CALL_OW 257
46026: PUSH
46027: LD_INT 8
46029: EQUAL
46030: IFFALSE 46051
// points := [ 35 , 35 , 30 ] ;
46032: LD_ADDR_VAR 0 9
46036: PUSH
46037: LD_INT 35
46039: PUSH
46040: LD_INT 35
46042: PUSH
46043: LD_INT 30
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: LIST
46050: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46051: LD_VAR 0 6
46055: PPUSH
46056: CALL_OW 257
46060: PUSH
46061: LD_INT 9
46063: EQUAL
46064: IFFALSE 46085
// points := [ 20 , 55 , 40 ] ;
46066: LD_ADDR_VAR 0 9
46070: PUSH
46071: LD_INT 20
46073: PUSH
46074: LD_INT 55
46076: PUSH
46077: LD_INT 40
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46085: LD_VAR 0 6
46089: PPUSH
46090: CALL_OW 257
46094: PUSH
46095: LD_INT 12
46097: PUSH
46098: LD_INT 16
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: IN
46105: IFFALSE 46126
// points := [ 5 , 3 , 2 ] ;
46107: LD_ADDR_VAR 0 9
46111: PUSH
46112: LD_INT 5
46114: PUSH
46115: LD_INT 3
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: LIST
46125: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46126: LD_VAR 0 6
46130: PPUSH
46131: CALL_OW 257
46135: PUSH
46136: LD_INT 17
46138: EQUAL
46139: IFFALSE 46160
// points := [ 100 , 50 , 75 ] ;
46141: LD_ADDR_VAR 0 9
46145: PUSH
46146: LD_INT 100
46148: PUSH
46149: LD_INT 50
46151: PUSH
46152: LD_INT 75
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: LIST
46159: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46160: LD_VAR 0 6
46164: PPUSH
46165: CALL_OW 257
46169: PUSH
46170: LD_INT 15
46172: EQUAL
46173: IFFALSE 46194
// points := [ 10 , 5 , 3 ] ;
46175: LD_ADDR_VAR 0 9
46179: PUSH
46180: LD_INT 10
46182: PUSH
46183: LD_INT 5
46185: PUSH
46186: LD_INT 3
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: LIST
46193: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46194: LD_VAR 0 6
46198: PPUSH
46199: CALL_OW 257
46203: PUSH
46204: LD_INT 14
46206: EQUAL
46207: IFFALSE 46228
// points := [ 10 , 0 , 0 ] ;
46209: LD_ADDR_VAR 0 9
46213: PUSH
46214: LD_INT 10
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: LIST
46227: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46228: LD_VAR 0 6
46232: PPUSH
46233: CALL_OW 257
46237: PUSH
46238: LD_INT 11
46240: EQUAL
46241: IFFALSE 46262
// points := [ 30 , 10 , 5 ] ;
46243: LD_ADDR_VAR 0 9
46247: PUSH
46248: LD_INT 30
46250: PUSH
46251: LD_INT 10
46253: PUSH
46254: LD_INT 5
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46262: LD_VAR 0 1
46266: PPUSH
46267: LD_INT 5
46269: PPUSH
46270: CALL_OW 321
46274: PUSH
46275: LD_INT 2
46277: EQUAL
46278: IFFALSE 46295
// bpoints := bpoints * 1.8 ;
46280: LD_ADDR_VAR 0 10
46284: PUSH
46285: LD_VAR 0 10
46289: PUSH
46290: LD_REAL  1.80000000000000E+0000
46293: MUL
46294: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46295: LD_VAR 0 6
46299: PPUSH
46300: CALL_OW 257
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: LD_INT 3
46313: PUSH
46314: LD_INT 4
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: IN
46323: PUSH
46324: LD_VAR 0 1
46328: PPUSH
46329: LD_INT 51
46331: PPUSH
46332: CALL_OW 321
46336: PUSH
46337: LD_INT 2
46339: EQUAL
46340: AND
46341: IFFALSE 46358
// bpoints := bpoints * 1.2 ;
46343: LD_ADDR_VAR 0 10
46347: PUSH
46348: LD_VAR 0 10
46352: PUSH
46353: LD_REAL  1.20000000000000E+0000
46356: MUL
46357: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46358: LD_VAR 0 6
46362: PPUSH
46363: CALL_OW 257
46367: PUSH
46368: LD_INT 5
46370: PUSH
46371: LD_INT 7
46373: PUSH
46374: LD_INT 9
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: LIST
46381: IN
46382: PUSH
46383: LD_VAR 0 1
46387: PPUSH
46388: LD_INT 52
46390: PPUSH
46391: CALL_OW 321
46395: PUSH
46396: LD_INT 2
46398: EQUAL
46399: AND
46400: IFFALSE 46417
// bpoints := bpoints * 1.5 ;
46402: LD_ADDR_VAR 0 10
46406: PUSH
46407: LD_VAR 0 10
46411: PUSH
46412: LD_REAL  1.50000000000000E+0000
46415: MUL
46416: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46417: LD_VAR 0 1
46421: PPUSH
46422: LD_INT 66
46424: PPUSH
46425: CALL_OW 321
46429: PUSH
46430: LD_INT 2
46432: EQUAL
46433: IFFALSE 46450
// bpoints := bpoints * 1.1 ;
46435: LD_ADDR_VAR 0 10
46439: PUSH
46440: LD_VAR 0 10
46444: PUSH
46445: LD_REAL  1.10000000000000E+0000
46448: MUL
46449: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46450: LD_ADDR_VAR 0 10
46454: PUSH
46455: LD_VAR 0 10
46459: PUSH
46460: LD_VAR 0 6
46464: PPUSH
46465: LD_INT 1
46467: PPUSH
46468: CALL_OW 259
46472: PUSH
46473: LD_REAL  1.15000000000000E+0000
46476: MUL
46477: MUL
46478: ST_TO_ADDR
// end ; unit_vehicle :
46479: GO 47303
46481: LD_INT 2
46483: DOUBLE
46484: EQUAL
46485: IFTRUE 46489
46487: GO 47291
46489: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46490: LD_VAR 0 6
46494: PPUSH
46495: CALL_OW 264
46499: PUSH
46500: LD_INT 2
46502: PUSH
46503: LD_INT 42
46505: PUSH
46506: LD_INT 24
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: IN
46514: IFFALSE 46535
// points := [ 25 , 5 , 3 ] ;
46516: LD_ADDR_VAR 0 9
46520: PUSH
46521: LD_INT 25
46523: PUSH
46524: LD_INT 5
46526: PUSH
46527: LD_INT 3
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: LIST
46534: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46535: LD_VAR 0 6
46539: PPUSH
46540: CALL_OW 264
46544: PUSH
46545: LD_INT 4
46547: PUSH
46548: LD_INT 43
46550: PUSH
46551: LD_INT 25
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: LIST
46558: IN
46559: IFFALSE 46580
// points := [ 40 , 15 , 5 ] ;
46561: LD_ADDR_VAR 0 9
46565: PUSH
46566: LD_INT 40
46568: PUSH
46569: LD_INT 15
46571: PUSH
46572: LD_INT 5
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: LIST
46579: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46580: LD_VAR 0 6
46584: PPUSH
46585: CALL_OW 264
46589: PUSH
46590: LD_INT 3
46592: PUSH
46593: LD_INT 23
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: IN
46600: IFFALSE 46621
// points := [ 7 , 25 , 8 ] ;
46602: LD_ADDR_VAR 0 9
46606: PUSH
46607: LD_INT 7
46609: PUSH
46610: LD_INT 25
46612: PUSH
46613: LD_INT 8
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46621: LD_VAR 0 6
46625: PPUSH
46626: CALL_OW 264
46630: PUSH
46631: LD_INT 5
46633: PUSH
46634: LD_INT 27
46636: PUSH
46637: LD_INT 44
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: LIST
46644: IN
46645: IFFALSE 46666
// points := [ 14 , 50 , 16 ] ;
46647: LD_ADDR_VAR 0 9
46651: PUSH
46652: LD_INT 14
46654: PUSH
46655: LD_INT 50
46657: PUSH
46658: LD_INT 16
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: LIST
46665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46666: LD_VAR 0 6
46670: PPUSH
46671: CALL_OW 264
46675: PUSH
46676: LD_INT 6
46678: PUSH
46679: LD_INT 46
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: IN
46686: IFFALSE 46707
// points := [ 32 , 120 , 70 ] ;
46688: LD_ADDR_VAR 0 9
46692: PUSH
46693: LD_INT 32
46695: PUSH
46696: LD_INT 120
46698: PUSH
46699: LD_INT 70
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: LIST
46706: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
46707: LD_VAR 0 6
46711: PPUSH
46712: CALL_OW 264
46716: PUSH
46717: LD_INT 7
46719: PUSH
46720: LD_INT 28
46722: PUSH
46723: LD_INT 45
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: LIST
46730: IN
46731: IFFALSE 46752
// points := [ 35 , 20 , 45 ] ;
46733: LD_ADDR_VAR 0 9
46737: PUSH
46738: LD_INT 35
46740: PUSH
46741: LD_INT 20
46743: PUSH
46744: LD_INT 45
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: LIST
46751: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46752: LD_VAR 0 6
46756: PPUSH
46757: CALL_OW 264
46761: PUSH
46762: LD_INT 47
46764: PUSH
46765: EMPTY
46766: LIST
46767: IN
46768: IFFALSE 46789
// points := [ 67 , 45 , 75 ] ;
46770: LD_ADDR_VAR 0 9
46774: PUSH
46775: LD_INT 67
46777: PUSH
46778: LD_INT 45
46780: PUSH
46781: LD_INT 75
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: LIST
46788: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46789: LD_VAR 0 6
46793: PPUSH
46794: CALL_OW 264
46798: PUSH
46799: LD_INT 26
46801: PUSH
46802: EMPTY
46803: LIST
46804: IN
46805: IFFALSE 46826
// points := [ 120 , 30 , 80 ] ;
46807: LD_ADDR_VAR 0 9
46811: PUSH
46812: LD_INT 120
46814: PUSH
46815: LD_INT 30
46817: PUSH
46818: LD_INT 80
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: LIST
46825: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46826: LD_VAR 0 6
46830: PPUSH
46831: CALL_OW 264
46835: PUSH
46836: LD_INT 22
46838: PUSH
46839: EMPTY
46840: LIST
46841: IN
46842: IFFALSE 46863
// points := [ 40 , 1 , 1 ] ;
46844: LD_ADDR_VAR 0 9
46848: PUSH
46849: LD_INT 40
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: LIST
46862: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46863: LD_VAR 0 6
46867: PPUSH
46868: CALL_OW 264
46872: PUSH
46873: LD_INT 29
46875: PUSH
46876: EMPTY
46877: LIST
46878: IN
46879: IFFALSE 46900
// points := [ 70 , 200 , 400 ] ;
46881: LD_ADDR_VAR 0 9
46885: PUSH
46886: LD_INT 70
46888: PUSH
46889: LD_INT 200
46891: PUSH
46892: LD_INT 400
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: LIST
46899: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46900: LD_VAR 0 6
46904: PPUSH
46905: CALL_OW 264
46909: PUSH
46910: LD_INT 14
46912: PUSH
46913: LD_INT 53
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: IN
46920: IFFALSE 46941
// points := [ 40 , 10 , 20 ] ;
46922: LD_ADDR_VAR 0 9
46926: PUSH
46927: LD_INT 40
46929: PUSH
46930: LD_INT 10
46932: PUSH
46933: LD_INT 20
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: LIST
46940: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46941: LD_VAR 0 6
46945: PPUSH
46946: CALL_OW 264
46950: PUSH
46951: LD_INT 9
46953: PUSH
46954: EMPTY
46955: LIST
46956: IN
46957: IFFALSE 46978
// points := [ 5 , 70 , 20 ] ;
46959: LD_ADDR_VAR 0 9
46963: PUSH
46964: LD_INT 5
46966: PUSH
46967: LD_INT 70
46969: PUSH
46970: LD_INT 20
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: LIST
46977: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46978: LD_VAR 0 6
46982: PPUSH
46983: CALL_OW 264
46987: PUSH
46988: LD_INT 10
46990: PUSH
46991: EMPTY
46992: LIST
46993: IN
46994: IFFALSE 47015
// points := [ 35 , 110 , 70 ] ;
46996: LD_ADDR_VAR 0 9
47000: PUSH
47001: LD_INT 35
47003: PUSH
47004: LD_INT 110
47006: PUSH
47007: LD_INT 70
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: LIST
47014: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47015: LD_VAR 0 6
47019: PPUSH
47020: CALL_OW 265
47024: PUSH
47025: LD_INT 25
47027: EQUAL
47028: IFFALSE 47049
// points := [ 80 , 65 , 100 ] ;
47030: LD_ADDR_VAR 0 9
47034: PUSH
47035: LD_INT 80
47037: PUSH
47038: LD_INT 65
47040: PUSH
47041: LD_INT 100
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: LIST
47048: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47049: LD_VAR 0 6
47053: PPUSH
47054: CALL_OW 263
47058: PUSH
47059: LD_INT 1
47061: EQUAL
47062: IFFALSE 47097
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47064: LD_ADDR_VAR 0 10
47068: PUSH
47069: LD_VAR 0 10
47073: PUSH
47074: LD_VAR 0 6
47078: PPUSH
47079: CALL_OW 311
47083: PPUSH
47084: LD_INT 3
47086: PPUSH
47087: CALL_OW 259
47091: PUSH
47092: LD_INT 4
47094: MUL
47095: MUL
47096: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47097: LD_VAR 0 6
47101: PPUSH
47102: CALL_OW 263
47106: PUSH
47107: LD_INT 2
47109: EQUAL
47110: IFFALSE 47161
// begin j := IsControledBy ( i ) ;
47112: LD_ADDR_VAR 0 7
47116: PUSH
47117: LD_VAR 0 6
47121: PPUSH
47122: CALL_OW 312
47126: ST_TO_ADDR
// if j then
47127: LD_VAR 0 7
47131: IFFALSE 47161
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47133: LD_ADDR_VAR 0 10
47137: PUSH
47138: LD_VAR 0 10
47142: PUSH
47143: LD_VAR 0 7
47147: PPUSH
47148: LD_INT 3
47150: PPUSH
47151: CALL_OW 259
47155: PUSH
47156: LD_INT 3
47158: MUL
47159: MUL
47160: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47161: LD_VAR 0 6
47165: PPUSH
47166: CALL_OW 264
47170: PUSH
47171: LD_INT 5
47173: PUSH
47174: LD_INT 6
47176: PUSH
47177: LD_INT 46
47179: PUSH
47180: LD_INT 44
47182: PUSH
47183: LD_INT 47
47185: PUSH
47186: LD_INT 45
47188: PUSH
47189: LD_INT 28
47191: PUSH
47192: LD_INT 7
47194: PUSH
47195: LD_INT 27
47197: PUSH
47198: LD_INT 29
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: IN
47213: PUSH
47214: LD_VAR 0 1
47218: PPUSH
47219: LD_INT 52
47221: PPUSH
47222: CALL_OW 321
47226: PUSH
47227: LD_INT 2
47229: EQUAL
47230: AND
47231: IFFALSE 47248
// bpoints := bpoints * 1.2 ;
47233: LD_ADDR_VAR 0 10
47237: PUSH
47238: LD_VAR 0 10
47242: PUSH
47243: LD_REAL  1.20000000000000E+0000
47246: MUL
47247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47248: LD_VAR 0 6
47252: PPUSH
47253: CALL_OW 264
47257: PUSH
47258: LD_INT 6
47260: PUSH
47261: LD_INT 46
47263: PUSH
47264: LD_INT 47
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: LIST
47271: IN
47272: IFFALSE 47289
// bpoints := bpoints * 1.2 ;
47274: LD_ADDR_VAR 0 10
47278: PUSH
47279: LD_VAR 0 10
47283: PUSH
47284: LD_REAL  1.20000000000000E+0000
47287: MUL
47288: ST_TO_ADDR
// end ; unit_building :
47289: GO 47303
47291: LD_INT 3
47293: DOUBLE
47294: EQUAL
47295: IFTRUE 47299
47297: GO 47302
47299: POP
// ; end ;
47300: GO 47303
47302: POP
// for j = 1 to 3 do
47303: LD_ADDR_VAR 0 7
47307: PUSH
47308: DOUBLE
47309: LD_INT 1
47311: DEC
47312: ST_TO_ADDR
47313: LD_INT 3
47315: PUSH
47316: FOR_TO
47317: IFFALSE 47370
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47319: LD_ADDR_VAR 0 5
47323: PUSH
47324: LD_VAR 0 5
47328: PPUSH
47329: LD_VAR 0 7
47333: PPUSH
47334: LD_VAR 0 5
47338: PUSH
47339: LD_VAR 0 7
47343: ARRAY
47344: PUSH
47345: LD_VAR 0 9
47349: PUSH
47350: LD_VAR 0 7
47354: ARRAY
47355: PUSH
47356: LD_VAR 0 10
47360: MUL
47361: PLUS
47362: PPUSH
47363: CALL_OW 1
47367: ST_TO_ADDR
47368: GO 47316
47370: POP
47371: POP
// end ;
47372: GO 45855
47374: POP
47375: POP
// result := Replace ( result , 4 , tmp ) ;
47376: LD_ADDR_VAR 0 5
47380: PUSH
47381: LD_VAR 0 5
47385: PPUSH
47386: LD_INT 4
47388: PPUSH
47389: LD_VAR 0 8
47393: PPUSH
47394: CALL_OW 1
47398: ST_TO_ADDR
// end ;
47399: LD_VAR 0 5
47403: RET
// export function DangerAtRange ( unit , range ) ; begin
47404: LD_INT 0
47406: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47407: LD_ADDR_VAR 0 3
47411: PUSH
47412: LD_VAR 0 1
47416: PPUSH
47417: CALL_OW 255
47421: PPUSH
47422: LD_VAR 0 1
47426: PPUSH
47427: CALL_OW 250
47431: PPUSH
47432: LD_VAR 0 1
47436: PPUSH
47437: CALL_OW 251
47441: PPUSH
47442: LD_VAR 0 2
47446: PPUSH
47447: CALL 45707 0 4
47451: ST_TO_ADDR
// end ;
47452: LD_VAR 0 3
47456: RET
// export function DangerInArea ( side , area ) ; begin
47457: LD_INT 0
47459: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47460: LD_ADDR_VAR 0 3
47464: PUSH
47465: LD_VAR 0 2
47469: PPUSH
47470: LD_INT 81
47472: PUSH
47473: LD_VAR 0 1
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PPUSH
47482: CALL_OW 70
47486: ST_TO_ADDR
// end ;
47487: LD_VAR 0 3
47491: RET
// export function IsExtension ( b ) ; begin
47492: LD_INT 0
47494: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47495: LD_ADDR_VAR 0 2
47499: PUSH
47500: LD_VAR 0 1
47504: PUSH
47505: LD_INT 23
47507: PUSH
47508: LD_INT 20
47510: PUSH
47511: LD_INT 22
47513: PUSH
47514: LD_INT 17
47516: PUSH
47517: LD_INT 24
47519: PUSH
47520: LD_INT 21
47522: PUSH
47523: LD_INT 19
47525: PUSH
47526: LD_INT 16
47528: PUSH
47529: LD_INT 25
47531: PUSH
47532: LD_INT 18
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: IN
47547: ST_TO_ADDR
// end ;
47548: LD_VAR 0 2
47552: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
47553: LD_INT 0
47555: PPUSH
47556: PPUSH
47557: PPUSH
// result := [ ] ;
47558: LD_ADDR_VAR 0 3
47562: PUSH
47563: EMPTY
47564: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47565: LD_ADDR_VAR 0 4
47569: PUSH
47570: LD_VAR 0 2
47574: PPUSH
47575: LD_INT 21
47577: PUSH
47578: LD_INT 3
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PPUSH
47585: CALL_OW 70
47589: ST_TO_ADDR
// if not tmp then
47590: LD_VAR 0 4
47594: NOT
47595: IFFALSE 47599
// exit ;
47597: GO 47657
// for i in tmp do
47599: LD_ADDR_VAR 0 5
47603: PUSH
47604: LD_VAR 0 4
47608: PUSH
47609: FOR_IN
47610: IFFALSE 47645
// if GetBase ( i ) <> base then
47612: LD_VAR 0 5
47616: PPUSH
47617: CALL_OW 274
47621: PUSH
47622: LD_VAR 0 1
47626: NONEQUAL
47627: IFFALSE 47643
// ComLinkToBase ( base , i ) ;
47629: LD_VAR 0 1
47633: PPUSH
47634: LD_VAR 0 5
47638: PPUSH
47639: CALL_OW 169
47643: GO 47609
47645: POP
47646: POP
// result := tmp ;
47647: LD_ADDR_VAR 0 3
47651: PUSH
47652: LD_VAR 0 4
47656: ST_TO_ADDR
// end ;
47657: LD_VAR 0 3
47661: RET
// export function ComComplete ( unit , b ) ; var i ; begin
47662: LD_INT 0
47664: PPUSH
47665: PPUSH
// if BuildingStatus ( b ) = bs_build then
47666: LD_VAR 0 2
47670: PPUSH
47671: CALL_OW 461
47675: PUSH
47676: LD_INT 1
47678: EQUAL
47679: IFFALSE 47739
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47681: LD_VAR 0 1
47685: PPUSH
47686: LD_STRING h
47688: PUSH
47689: LD_VAR 0 2
47693: PPUSH
47694: CALL_OW 250
47698: PUSH
47699: LD_VAR 0 2
47703: PPUSH
47704: CALL_OW 251
47708: PUSH
47709: LD_VAR 0 2
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: PUSH
47732: EMPTY
47733: LIST
47734: PPUSH
47735: CALL_OW 446
// end ;
47739: LD_VAR 0 3
47743: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47744: LD_INT 0
47746: PPUSH
47747: PPUSH
47748: PPUSH
47749: PPUSH
47750: PPUSH
47751: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
47752: LD_VAR 0 1
47756: NOT
47757: PUSH
47758: LD_VAR 0 1
47762: PPUSH
47763: CALL_OW 263
47767: PUSH
47768: LD_INT 2
47770: EQUAL
47771: NOT
47772: OR
47773: IFFALSE 47777
// exit ;
47775: GO 48093
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47777: LD_ADDR_VAR 0 6
47781: PUSH
47782: LD_INT 22
47784: PUSH
47785: LD_VAR 0 1
47789: PPUSH
47790: CALL_OW 255
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: LD_INT 30
47804: PUSH
47805: LD_INT 36
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 34
47814: PUSH
47815: LD_INT 31
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: LIST
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PPUSH
47831: CALL_OW 69
47835: ST_TO_ADDR
// if not tmp then
47836: LD_VAR 0 6
47840: NOT
47841: IFFALSE 47845
// exit ;
47843: GO 48093
// result := [ ] ;
47845: LD_ADDR_VAR 0 2
47849: PUSH
47850: EMPTY
47851: ST_TO_ADDR
// for i in tmp do
47852: LD_ADDR_VAR 0 3
47856: PUSH
47857: LD_VAR 0 6
47861: PUSH
47862: FOR_IN
47863: IFFALSE 47934
// begin t := UnitsInside ( i ) ;
47865: LD_ADDR_VAR 0 4
47869: PUSH
47870: LD_VAR 0 3
47874: PPUSH
47875: CALL_OW 313
47879: ST_TO_ADDR
// if t then
47880: LD_VAR 0 4
47884: IFFALSE 47932
// for j in t do
47886: LD_ADDR_VAR 0 7
47890: PUSH
47891: LD_VAR 0 4
47895: PUSH
47896: FOR_IN
47897: IFFALSE 47930
// result := Insert ( result , result + 1 , j ) ;
47899: LD_ADDR_VAR 0 2
47903: PUSH
47904: LD_VAR 0 2
47908: PPUSH
47909: LD_VAR 0 2
47913: PUSH
47914: LD_INT 1
47916: PLUS
47917: PPUSH
47918: LD_VAR 0 7
47922: PPUSH
47923: CALL_OW 2
47927: ST_TO_ADDR
47928: GO 47896
47930: POP
47931: POP
// end ;
47932: GO 47862
47934: POP
47935: POP
// if not result then
47936: LD_VAR 0 2
47940: NOT
47941: IFFALSE 47945
// exit ;
47943: GO 48093
// mech := result [ 1 ] ;
47945: LD_ADDR_VAR 0 5
47949: PUSH
47950: LD_VAR 0 2
47954: PUSH
47955: LD_INT 1
47957: ARRAY
47958: ST_TO_ADDR
// if result > 1 then
47959: LD_VAR 0 2
47963: PUSH
47964: LD_INT 1
47966: GREATER
47967: IFFALSE 48079
// for i = 2 to result do
47969: LD_ADDR_VAR 0 3
47973: PUSH
47974: DOUBLE
47975: LD_INT 2
47977: DEC
47978: ST_TO_ADDR
47979: LD_VAR 0 2
47983: PUSH
47984: FOR_TO
47985: IFFALSE 48077
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47987: LD_ADDR_VAR 0 4
47991: PUSH
47992: LD_VAR 0 2
47996: PUSH
47997: LD_VAR 0 3
48001: ARRAY
48002: PPUSH
48003: LD_INT 3
48005: PPUSH
48006: CALL_OW 259
48010: PUSH
48011: LD_VAR 0 2
48015: PUSH
48016: LD_VAR 0 3
48020: ARRAY
48021: PPUSH
48022: CALL_OW 432
48026: MINUS
48027: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48028: LD_VAR 0 4
48032: PUSH
48033: LD_VAR 0 5
48037: PPUSH
48038: LD_INT 3
48040: PPUSH
48041: CALL_OW 259
48045: PUSH
48046: LD_VAR 0 5
48050: PPUSH
48051: CALL_OW 432
48055: MINUS
48056: GREATEREQUAL
48057: IFFALSE 48075
// mech := result [ i ] ;
48059: LD_ADDR_VAR 0 5
48063: PUSH
48064: LD_VAR 0 2
48068: PUSH
48069: LD_VAR 0 3
48073: ARRAY
48074: ST_TO_ADDR
// end ;
48075: GO 47984
48077: POP
48078: POP
// ComLinkTo ( vehicle , mech ) ;
48079: LD_VAR 0 1
48083: PPUSH
48084: LD_VAR 0 5
48088: PPUSH
48089: CALL_OW 135
// end ;
48093: LD_VAR 0 2
48097: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48098: LD_INT 0
48100: PPUSH
48101: PPUSH
48102: PPUSH
48103: PPUSH
48104: PPUSH
48105: PPUSH
48106: PPUSH
48107: PPUSH
48108: PPUSH
48109: PPUSH
48110: PPUSH
48111: PPUSH
48112: PPUSH
// result := [ ] ;
48113: LD_ADDR_VAR 0 7
48117: PUSH
48118: EMPTY
48119: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48120: LD_VAR 0 1
48124: PPUSH
48125: CALL_OW 266
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: IN
48140: NOT
48141: IFFALSE 48145
// exit ;
48143: GO 49776
// if name then
48145: LD_VAR 0 3
48149: IFFALSE 48165
// SetBName ( base_dep , name ) ;
48151: LD_VAR 0 1
48155: PPUSH
48156: LD_VAR 0 3
48160: PPUSH
48161: CALL_OW 500
// base := GetBase ( base_dep ) ;
48165: LD_ADDR_VAR 0 15
48169: PUSH
48170: LD_VAR 0 1
48174: PPUSH
48175: CALL_OW 274
48179: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48180: LD_ADDR_VAR 0 16
48184: PUSH
48185: LD_VAR 0 1
48189: PPUSH
48190: CALL_OW 255
48194: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48195: LD_ADDR_VAR 0 17
48199: PUSH
48200: LD_VAR 0 1
48204: PPUSH
48205: CALL_OW 248
48209: ST_TO_ADDR
// if sources then
48210: LD_VAR 0 5
48214: IFFALSE 48261
// for i = 1 to 3 do
48216: LD_ADDR_VAR 0 8
48220: PUSH
48221: DOUBLE
48222: LD_INT 1
48224: DEC
48225: ST_TO_ADDR
48226: LD_INT 3
48228: PUSH
48229: FOR_TO
48230: IFFALSE 48259
// AddResourceType ( base , i , sources [ i ] ) ;
48232: LD_VAR 0 15
48236: PPUSH
48237: LD_VAR 0 8
48241: PPUSH
48242: LD_VAR 0 5
48246: PUSH
48247: LD_VAR 0 8
48251: ARRAY
48252: PPUSH
48253: CALL_OW 276
48257: GO 48229
48259: POP
48260: POP
// buildings := GetBaseBuildings ( base , area ) ;
48261: LD_ADDR_VAR 0 18
48265: PUSH
48266: LD_VAR 0 15
48270: PPUSH
48271: LD_VAR 0 2
48275: PPUSH
48276: CALL 47553 0 2
48280: ST_TO_ADDR
// InitHc ;
48281: CALL_OW 19
// InitUc ;
48285: CALL_OW 18
// uc_side := side ;
48289: LD_ADDR_OWVAR 20
48293: PUSH
48294: LD_VAR 0 16
48298: ST_TO_ADDR
// uc_nation := nation ;
48299: LD_ADDR_OWVAR 21
48303: PUSH
48304: LD_VAR 0 17
48308: ST_TO_ADDR
// if buildings then
48309: LD_VAR 0 18
48313: IFFALSE 49635
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48315: LD_ADDR_VAR 0 19
48319: PUSH
48320: LD_VAR 0 18
48324: PPUSH
48325: LD_INT 2
48327: PUSH
48328: LD_INT 30
48330: PUSH
48331: LD_INT 29
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 30
48340: PUSH
48341: LD_INT 30
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: LIST
48352: PPUSH
48353: CALL_OW 72
48357: ST_TO_ADDR
// if tmp then
48358: LD_VAR 0 19
48362: IFFALSE 48410
// for i in tmp do
48364: LD_ADDR_VAR 0 8
48368: PUSH
48369: LD_VAR 0 19
48373: PUSH
48374: FOR_IN
48375: IFFALSE 48408
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48377: LD_VAR 0 8
48381: PPUSH
48382: CALL_OW 250
48386: PPUSH
48387: LD_VAR 0 8
48391: PPUSH
48392: CALL_OW 251
48396: PPUSH
48397: LD_VAR 0 16
48401: PPUSH
48402: CALL_OW 441
48406: GO 48374
48408: POP
48409: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48410: LD_VAR 0 18
48414: PPUSH
48415: LD_INT 2
48417: PUSH
48418: LD_INT 30
48420: PUSH
48421: LD_INT 32
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 30
48430: PUSH
48431: LD_INT 33
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: LIST
48442: PPUSH
48443: CALL_OW 72
48447: IFFALSE 48535
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48449: LD_ADDR_VAR 0 8
48453: PUSH
48454: LD_VAR 0 18
48458: PPUSH
48459: LD_INT 2
48461: PUSH
48462: LD_INT 30
48464: PUSH
48465: LD_INT 32
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 30
48474: PUSH
48475: LD_INT 33
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: LIST
48486: PPUSH
48487: CALL_OW 72
48491: PUSH
48492: FOR_IN
48493: IFFALSE 48533
// begin if not GetBWeapon ( i ) then
48495: LD_VAR 0 8
48499: PPUSH
48500: CALL_OW 269
48504: NOT
48505: IFFALSE 48531
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48507: LD_VAR 0 8
48511: PPUSH
48512: LD_VAR 0 8
48516: PPUSH
48517: LD_VAR 0 2
48521: PPUSH
48522: CALL 49781 0 2
48526: PPUSH
48527: CALL_OW 431
// end ;
48531: GO 48492
48533: POP
48534: POP
// end ; for i = 1 to personel do
48535: LD_ADDR_VAR 0 8
48539: PUSH
48540: DOUBLE
48541: LD_INT 1
48543: DEC
48544: ST_TO_ADDR
48545: LD_VAR 0 6
48549: PUSH
48550: FOR_TO
48551: IFFALSE 49615
// begin if i > 4 then
48553: LD_VAR 0 8
48557: PUSH
48558: LD_INT 4
48560: GREATER
48561: IFFALSE 48565
// break ;
48563: GO 49615
// case i of 1 :
48565: LD_VAR 0 8
48569: PUSH
48570: LD_INT 1
48572: DOUBLE
48573: EQUAL
48574: IFTRUE 48578
48576: GO 48658
48578: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48579: LD_ADDR_VAR 0 12
48583: PUSH
48584: LD_VAR 0 18
48588: PPUSH
48589: LD_INT 22
48591: PUSH
48592: LD_VAR 0 16
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 58
48603: PUSH
48604: EMPTY
48605: LIST
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: LD_INT 30
48612: PUSH
48613: LD_INT 32
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 30
48622: PUSH
48623: LD_INT 4
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 30
48632: PUSH
48633: LD_INT 5
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: LIST
48650: PPUSH
48651: CALL_OW 72
48655: ST_TO_ADDR
48656: GO 48880
48658: LD_INT 2
48660: DOUBLE
48661: EQUAL
48662: IFTRUE 48666
48664: GO 48728
48666: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48667: LD_ADDR_VAR 0 12
48671: PUSH
48672: LD_VAR 0 18
48676: PPUSH
48677: LD_INT 22
48679: PUSH
48680: LD_VAR 0 16
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: LD_INT 30
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 30
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: LIST
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PPUSH
48721: CALL_OW 72
48725: ST_TO_ADDR
48726: GO 48880
48728: LD_INT 3
48730: DOUBLE
48731: EQUAL
48732: IFTRUE 48736
48734: GO 48798
48736: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48737: LD_ADDR_VAR 0 12
48741: PUSH
48742: LD_VAR 0 18
48746: PPUSH
48747: LD_INT 22
48749: PUSH
48750: LD_VAR 0 16
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: LD_INT 30
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 30
48774: PUSH
48775: LD_INT 3
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: LIST
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PPUSH
48791: CALL_OW 72
48795: ST_TO_ADDR
48796: GO 48880
48798: LD_INT 4
48800: DOUBLE
48801: EQUAL
48802: IFTRUE 48806
48804: GO 48879
48806: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48807: LD_ADDR_VAR 0 12
48811: PUSH
48812: LD_VAR 0 18
48816: PPUSH
48817: LD_INT 22
48819: PUSH
48820: LD_VAR 0 16
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: LD_INT 30
48834: PUSH
48835: LD_INT 6
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 30
48844: PUSH
48845: LD_INT 7
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 30
48854: PUSH
48855: LD_INT 8
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PPUSH
48872: CALL_OW 72
48876: ST_TO_ADDR
48877: GO 48880
48879: POP
// if i = 1 then
48880: LD_VAR 0 8
48884: PUSH
48885: LD_INT 1
48887: EQUAL
48888: IFFALSE 48999
// begin tmp := [ ] ;
48890: LD_ADDR_VAR 0 19
48894: PUSH
48895: EMPTY
48896: ST_TO_ADDR
// for j in f do
48897: LD_ADDR_VAR 0 9
48901: PUSH
48902: LD_VAR 0 12
48906: PUSH
48907: FOR_IN
48908: IFFALSE 48981
// if GetBType ( j ) = b_bunker then
48910: LD_VAR 0 9
48914: PPUSH
48915: CALL_OW 266
48919: PUSH
48920: LD_INT 32
48922: EQUAL
48923: IFFALSE 48950
// tmp := Insert ( tmp , 1 , j ) else
48925: LD_ADDR_VAR 0 19
48929: PUSH
48930: LD_VAR 0 19
48934: PPUSH
48935: LD_INT 1
48937: PPUSH
48938: LD_VAR 0 9
48942: PPUSH
48943: CALL_OW 2
48947: ST_TO_ADDR
48948: GO 48979
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48950: LD_ADDR_VAR 0 19
48954: PUSH
48955: LD_VAR 0 19
48959: PPUSH
48960: LD_VAR 0 19
48964: PUSH
48965: LD_INT 1
48967: PLUS
48968: PPUSH
48969: LD_VAR 0 9
48973: PPUSH
48974: CALL_OW 2
48978: ST_TO_ADDR
48979: GO 48907
48981: POP
48982: POP
// if tmp then
48983: LD_VAR 0 19
48987: IFFALSE 48999
// f := tmp ;
48989: LD_ADDR_VAR 0 12
48993: PUSH
48994: LD_VAR 0 19
48998: ST_TO_ADDR
// end ; x := personel [ i ] ;
48999: LD_ADDR_VAR 0 13
49003: PUSH
49004: LD_VAR 0 6
49008: PUSH
49009: LD_VAR 0 8
49013: ARRAY
49014: ST_TO_ADDR
// if x = - 1 then
49015: LD_VAR 0 13
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: EQUAL
49024: IFFALSE 49233
// begin for j in f do
49026: LD_ADDR_VAR 0 9
49030: PUSH
49031: LD_VAR 0 12
49035: PUSH
49036: FOR_IN
49037: IFFALSE 49229
// repeat InitHc ;
49039: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49043: LD_VAR 0 9
49047: PPUSH
49048: CALL_OW 266
49052: PUSH
49053: LD_INT 5
49055: EQUAL
49056: IFFALSE 49126
// begin if UnitsInside ( j ) < 3 then
49058: LD_VAR 0 9
49062: PPUSH
49063: CALL_OW 313
49067: PUSH
49068: LD_INT 3
49070: LESS
49071: IFFALSE 49107
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49073: LD_INT 0
49075: PPUSH
49076: LD_INT 5
49078: PUSH
49079: LD_INT 8
49081: PUSH
49082: LD_INT 9
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: LIST
49089: PUSH
49090: LD_VAR 0 17
49094: ARRAY
49095: PPUSH
49096: LD_VAR 0 4
49100: PPUSH
49101: CALL_OW 380
49105: GO 49124
// PrepareHuman ( false , i , skill ) ;
49107: LD_INT 0
49109: PPUSH
49110: LD_VAR 0 8
49114: PPUSH
49115: LD_VAR 0 4
49119: PPUSH
49120: CALL_OW 380
// end else
49124: GO 49143
// PrepareHuman ( false , i , skill ) ;
49126: LD_INT 0
49128: PPUSH
49129: LD_VAR 0 8
49133: PPUSH
49134: LD_VAR 0 4
49138: PPUSH
49139: CALL_OW 380
// un := CreateHuman ;
49143: LD_ADDR_VAR 0 14
49147: PUSH
49148: CALL_OW 44
49152: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49153: LD_ADDR_VAR 0 7
49157: PUSH
49158: LD_VAR 0 7
49162: PPUSH
49163: LD_INT 1
49165: PPUSH
49166: LD_VAR 0 14
49170: PPUSH
49171: CALL_OW 2
49175: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49176: LD_VAR 0 14
49180: PPUSH
49181: LD_VAR 0 9
49185: PPUSH
49186: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49190: LD_VAR 0 9
49194: PPUSH
49195: CALL_OW 313
49199: PUSH
49200: LD_INT 6
49202: EQUAL
49203: PUSH
49204: LD_VAR 0 9
49208: PPUSH
49209: CALL_OW 266
49213: PUSH
49214: LD_INT 32
49216: PUSH
49217: LD_INT 31
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: IN
49224: OR
49225: IFFALSE 49039
49227: GO 49036
49229: POP
49230: POP
// end else
49231: GO 49613
// for j = 1 to x do
49233: LD_ADDR_VAR 0 9
49237: PUSH
49238: DOUBLE
49239: LD_INT 1
49241: DEC
49242: ST_TO_ADDR
49243: LD_VAR 0 13
49247: PUSH
49248: FOR_TO
49249: IFFALSE 49611
// begin InitHc ;
49251: CALL_OW 19
// if not f then
49255: LD_VAR 0 12
49259: NOT
49260: IFFALSE 49349
// begin PrepareHuman ( false , i , skill ) ;
49262: LD_INT 0
49264: PPUSH
49265: LD_VAR 0 8
49269: PPUSH
49270: LD_VAR 0 4
49274: PPUSH
49275: CALL_OW 380
// un := CreateHuman ;
49279: LD_ADDR_VAR 0 14
49283: PUSH
49284: CALL_OW 44
49288: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49289: LD_ADDR_VAR 0 7
49293: PUSH
49294: LD_VAR 0 7
49298: PPUSH
49299: LD_INT 1
49301: PPUSH
49302: LD_VAR 0 14
49306: PPUSH
49307: CALL_OW 2
49311: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49312: LD_VAR 0 14
49316: PPUSH
49317: LD_VAR 0 1
49321: PPUSH
49322: CALL_OW 250
49326: PPUSH
49327: LD_VAR 0 1
49331: PPUSH
49332: CALL_OW 251
49336: PPUSH
49337: LD_INT 10
49339: PPUSH
49340: LD_INT 0
49342: PPUSH
49343: CALL_OW 50
// continue ;
49347: GO 49248
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49349: LD_VAR 0 12
49353: PUSH
49354: LD_INT 1
49356: ARRAY
49357: PPUSH
49358: CALL_OW 313
49362: PUSH
49363: LD_VAR 0 12
49367: PUSH
49368: LD_INT 1
49370: ARRAY
49371: PPUSH
49372: CALL_OW 266
49376: PUSH
49377: LD_INT 32
49379: PUSH
49380: LD_INT 31
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: IN
49387: AND
49388: PUSH
49389: LD_VAR 0 12
49393: PUSH
49394: LD_INT 1
49396: ARRAY
49397: PPUSH
49398: CALL_OW 313
49402: PUSH
49403: LD_INT 6
49405: EQUAL
49406: OR
49407: IFFALSE 49427
// f := Delete ( f , 1 ) ;
49409: LD_ADDR_VAR 0 12
49413: PUSH
49414: LD_VAR 0 12
49418: PPUSH
49419: LD_INT 1
49421: PPUSH
49422: CALL_OW 3
49426: ST_TO_ADDR
// if not f then
49427: LD_VAR 0 12
49431: NOT
49432: IFFALSE 49450
// begin x := x + 2 ;
49434: LD_ADDR_VAR 0 13
49438: PUSH
49439: LD_VAR 0 13
49443: PUSH
49444: LD_INT 2
49446: PLUS
49447: ST_TO_ADDR
// continue ;
49448: GO 49248
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49450: LD_VAR 0 12
49454: PUSH
49455: LD_INT 1
49457: ARRAY
49458: PPUSH
49459: CALL_OW 266
49463: PUSH
49464: LD_INT 5
49466: EQUAL
49467: IFFALSE 49541
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49469: LD_VAR 0 12
49473: PUSH
49474: LD_INT 1
49476: ARRAY
49477: PPUSH
49478: CALL_OW 313
49482: PUSH
49483: LD_INT 3
49485: LESS
49486: IFFALSE 49522
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49488: LD_INT 0
49490: PPUSH
49491: LD_INT 5
49493: PUSH
49494: LD_INT 8
49496: PUSH
49497: LD_INT 9
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: LIST
49504: PUSH
49505: LD_VAR 0 17
49509: ARRAY
49510: PPUSH
49511: LD_VAR 0 4
49515: PPUSH
49516: CALL_OW 380
49520: GO 49539
// PrepareHuman ( false , i , skill ) ;
49522: LD_INT 0
49524: PPUSH
49525: LD_VAR 0 8
49529: PPUSH
49530: LD_VAR 0 4
49534: PPUSH
49535: CALL_OW 380
// end else
49539: GO 49558
// PrepareHuman ( false , i , skill ) ;
49541: LD_INT 0
49543: PPUSH
49544: LD_VAR 0 8
49548: PPUSH
49549: LD_VAR 0 4
49553: PPUSH
49554: CALL_OW 380
// un := CreateHuman ;
49558: LD_ADDR_VAR 0 14
49562: PUSH
49563: CALL_OW 44
49567: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49568: LD_ADDR_VAR 0 7
49572: PUSH
49573: LD_VAR 0 7
49577: PPUSH
49578: LD_INT 1
49580: PPUSH
49581: LD_VAR 0 14
49585: PPUSH
49586: CALL_OW 2
49590: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49591: LD_VAR 0 14
49595: PPUSH
49596: LD_VAR 0 12
49600: PUSH
49601: LD_INT 1
49603: ARRAY
49604: PPUSH
49605: CALL_OW 52
// end ;
49609: GO 49248
49611: POP
49612: POP
// end ;
49613: GO 48550
49615: POP
49616: POP
// result := result ^ buildings ;
49617: LD_ADDR_VAR 0 7
49621: PUSH
49622: LD_VAR 0 7
49626: PUSH
49627: LD_VAR 0 18
49631: ADD
49632: ST_TO_ADDR
// end else
49633: GO 49776
// begin for i = 1 to personel do
49635: LD_ADDR_VAR 0 8
49639: PUSH
49640: DOUBLE
49641: LD_INT 1
49643: DEC
49644: ST_TO_ADDR
49645: LD_VAR 0 6
49649: PUSH
49650: FOR_TO
49651: IFFALSE 49774
// begin if i > 4 then
49653: LD_VAR 0 8
49657: PUSH
49658: LD_INT 4
49660: GREATER
49661: IFFALSE 49665
// break ;
49663: GO 49774
// x := personel [ i ] ;
49665: LD_ADDR_VAR 0 13
49669: PUSH
49670: LD_VAR 0 6
49674: PUSH
49675: LD_VAR 0 8
49679: ARRAY
49680: ST_TO_ADDR
// if x = - 1 then
49681: LD_VAR 0 13
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: EQUAL
49690: IFFALSE 49694
// continue ;
49692: GO 49650
// PrepareHuman ( false , i , skill ) ;
49694: LD_INT 0
49696: PPUSH
49697: LD_VAR 0 8
49701: PPUSH
49702: LD_VAR 0 4
49706: PPUSH
49707: CALL_OW 380
// un := CreateHuman ;
49711: LD_ADDR_VAR 0 14
49715: PUSH
49716: CALL_OW 44
49720: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49721: LD_VAR 0 14
49725: PPUSH
49726: LD_VAR 0 1
49730: PPUSH
49731: CALL_OW 250
49735: PPUSH
49736: LD_VAR 0 1
49740: PPUSH
49741: CALL_OW 251
49745: PPUSH
49746: LD_INT 10
49748: PPUSH
49749: LD_INT 0
49751: PPUSH
49752: CALL_OW 50
// result := result ^ un ;
49756: LD_ADDR_VAR 0 7
49760: PUSH
49761: LD_VAR 0 7
49765: PUSH
49766: LD_VAR 0 14
49770: ADD
49771: ST_TO_ADDR
// end ;
49772: GO 49650
49774: POP
49775: POP
// end ; end ;
49776: LD_VAR 0 7
49780: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49781: LD_INT 0
49783: PPUSH
49784: PPUSH
49785: PPUSH
49786: PPUSH
49787: PPUSH
49788: PPUSH
49789: PPUSH
49790: PPUSH
49791: PPUSH
49792: PPUSH
49793: PPUSH
49794: PPUSH
49795: PPUSH
49796: PPUSH
49797: PPUSH
49798: PPUSH
// result := false ;
49799: LD_ADDR_VAR 0 3
49803: PUSH
49804: LD_INT 0
49806: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49807: LD_VAR 0 1
49811: NOT
49812: PUSH
49813: LD_VAR 0 1
49817: PPUSH
49818: CALL_OW 266
49822: PUSH
49823: LD_INT 32
49825: PUSH
49826: LD_INT 33
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: IN
49833: NOT
49834: OR
49835: IFFALSE 49839
// exit ;
49837: GO 50975
// nat := GetNation ( tower ) ;
49839: LD_ADDR_VAR 0 12
49843: PUSH
49844: LD_VAR 0 1
49848: PPUSH
49849: CALL_OW 248
49853: ST_TO_ADDR
// side := GetSide ( tower ) ;
49854: LD_ADDR_VAR 0 16
49858: PUSH
49859: LD_VAR 0 1
49863: PPUSH
49864: CALL_OW 255
49868: ST_TO_ADDR
// x := GetX ( tower ) ;
49869: LD_ADDR_VAR 0 10
49873: PUSH
49874: LD_VAR 0 1
49878: PPUSH
49879: CALL_OW 250
49883: ST_TO_ADDR
// y := GetY ( tower ) ;
49884: LD_ADDR_VAR 0 11
49888: PUSH
49889: LD_VAR 0 1
49893: PPUSH
49894: CALL_OW 251
49898: ST_TO_ADDR
// if not x or not y then
49899: LD_VAR 0 10
49903: NOT
49904: PUSH
49905: LD_VAR 0 11
49909: NOT
49910: OR
49911: IFFALSE 49915
// exit ;
49913: GO 50975
// weapon := 0 ;
49915: LD_ADDR_VAR 0 18
49919: PUSH
49920: LD_INT 0
49922: ST_TO_ADDR
// fac_list := [ ] ;
49923: LD_ADDR_VAR 0 17
49927: PUSH
49928: EMPTY
49929: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
49930: LD_ADDR_VAR 0 6
49934: PUSH
49935: LD_VAR 0 1
49939: PPUSH
49940: CALL_OW 274
49944: PPUSH
49945: LD_VAR 0 2
49949: PPUSH
49950: CALL 47553 0 2
49954: PPUSH
49955: LD_INT 30
49957: PUSH
49958: LD_INT 3
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PPUSH
49965: CALL_OW 72
49969: ST_TO_ADDR
// if not factories then
49970: LD_VAR 0 6
49974: NOT
49975: IFFALSE 49979
// exit ;
49977: GO 50975
// for i in factories do
49979: LD_ADDR_VAR 0 8
49983: PUSH
49984: LD_VAR 0 6
49988: PUSH
49989: FOR_IN
49990: IFFALSE 50015
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49992: LD_ADDR_VAR 0 17
49996: PUSH
49997: LD_VAR 0 17
50001: PUSH
50002: LD_VAR 0 8
50006: PPUSH
50007: CALL_OW 478
50011: UNION
50012: ST_TO_ADDR
50013: GO 49989
50015: POP
50016: POP
// if not fac_list then
50017: LD_VAR 0 17
50021: NOT
50022: IFFALSE 50026
// exit ;
50024: GO 50975
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50026: LD_ADDR_VAR 0 5
50030: PUSH
50031: LD_INT 4
50033: PUSH
50034: LD_INT 5
50036: PUSH
50037: LD_INT 9
50039: PUSH
50040: LD_INT 10
50042: PUSH
50043: LD_INT 6
50045: PUSH
50046: LD_INT 7
50048: PUSH
50049: LD_INT 11
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 27
50063: PUSH
50064: LD_INT 28
50066: PUSH
50067: LD_INT 26
50069: PUSH
50070: LD_INT 30
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 43
50081: PUSH
50082: LD_INT 44
50084: PUSH
50085: LD_INT 46
50087: PUSH
50088: LD_INT 45
50090: PUSH
50091: LD_INT 47
50093: PUSH
50094: LD_INT 49
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: LIST
50109: PUSH
50110: LD_VAR 0 12
50114: ARRAY
50115: ST_TO_ADDR
// for i in list do
50116: LD_ADDR_VAR 0 8
50120: PUSH
50121: LD_VAR 0 5
50125: PUSH
50126: FOR_IN
50127: IFFALSE 50160
// if not i in fac_list then
50129: LD_VAR 0 8
50133: PUSH
50134: LD_VAR 0 17
50138: IN
50139: NOT
50140: IFFALSE 50158
// list := list diff i ;
50142: LD_ADDR_VAR 0 5
50146: PUSH
50147: LD_VAR 0 5
50151: PUSH
50152: LD_VAR 0 8
50156: DIFF
50157: ST_TO_ADDR
50158: GO 50126
50160: POP
50161: POP
// if not list then
50162: LD_VAR 0 5
50166: NOT
50167: IFFALSE 50171
// exit ;
50169: GO 50975
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50171: LD_VAR 0 12
50175: PUSH
50176: LD_INT 3
50178: EQUAL
50179: PUSH
50180: LD_INT 49
50182: PUSH
50183: LD_VAR 0 5
50187: IN
50188: AND
50189: PUSH
50190: LD_INT 31
50192: PPUSH
50193: LD_VAR 0 16
50197: PPUSH
50198: CALL_OW 321
50202: PUSH
50203: LD_INT 2
50205: EQUAL
50206: AND
50207: IFFALSE 50267
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50209: LD_INT 22
50211: PUSH
50212: LD_VAR 0 16
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 35
50223: PUSH
50224: LD_INT 49
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 91
50233: PUSH
50234: LD_VAR 0 1
50238: PUSH
50239: LD_INT 10
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: LIST
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: LIST
50251: PPUSH
50252: CALL_OW 69
50256: NOT
50257: IFFALSE 50267
// weapon := ru_time_lapser ;
50259: LD_ADDR_VAR 0 18
50263: PUSH
50264: LD_INT 49
50266: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50267: LD_VAR 0 12
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: IN
50282: PUSH
50283: LD_INT 11
50285: PUSH
50286: LD_VAR 0 5
50290: IN
50291: PUSH
50292: LD_INT 30
50294: PUSH
50295: LD_VAR 0 5
50299: IN
50300: OR
50301: AND
50302: PUSH
50303: LD_INT 6
50305: PPUSH
50306: LD_VAR 0 16
50310: PPUSH
50311: CALL_OW 321
50315: PUSH
50316: LD_INT 2
50318: EQUAL
50319: AND
50320: IFFALSE 50485
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50322: LD_INT 22
50324: PUSH
50325: LD_VAR 0 16
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: LD_INT 35
50339: PUSH
50340: LD_INT 11
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 35
50349: PUSH
50350: LD_INT 30
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 91
50364: PUSH
50365: LD_VAR 0 1
50369: PUSH
50370: LD_INT 18
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: LIST
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: LIST
50382: PPUSH
50383: CALL_OW 69
50387: NOT
50388: PUSH
50389: LD_INT 22
50391: PUSH
50392: LD_VAR 0 16
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: LD_INT 30
50406: PUSH
50407: LD_INT 32
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 30
50416: PUSH
50417: LD_INT 33
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 91
50431: PUSH
50432: LD_VAR 0 1
50436: PUSH
50437: LD_INT 12
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: LIST
50449: PUSH
50450: EMPTY
50451: LIST
50452: PPUSH
50453: CALL_OW 69
50457: PUSH
50458: LD_INT 2
50460: GREATER
50461: AND
50462: IFFALSE 50485
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50464: LD_ADDR_VAR 0 18
50468: PUSH
50469: LD_INT 11
50471: PUSH
50472: LD_INT 30
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_VAR 0 12
50483: ARRAY
50484: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50485: LD_VAR 0 18
50489: NOT
50490: PUSH
50491: LD_INT 40
50493: PPUSH
50494: LD_VAR 0 16
50498: PPUSH
50499: CALL_OW 321
50503: PUSH
50504: LD_INT 2
50506: EQUAL
50507: AND
50508: PUSH
50509: LD_INT 7
50511: PUSH
50512: LD_VAR 0 5
50516: IN
50517: PUSH
50518: LD_INT 28
50520: PUSH
50521: LD_VAR 0 5
50525: IN
50526: OR
50527: PUSH
50528: LD_INT 45
50530: PUSH
50531: LD_VAR 0 5
50535: IN
50536: OR
50537: AND
50538: IFFALSE 50792
// begin hex := GetHexInfo ( x , y ) ;
50540: LD_ADDR_VAR 0 4
50544: PUSH
50545: LD_VAR 0 10
50549: PPUSH
50550: LD_VAR 0 11
50554: PPUSH
50555: CALL_OW 546
50559: ST_TO_ADDR
// if hex [ 1 ] then
50560: LD_VAR 0 4
50564: PUSH
50565: LD_INT 1
50567: ARRAY
50568: IFFALSE 50572
// exit ;
50570: GO 50975
// height := hex [ 2 ] ;
50572: LD_ADDR_VAR 0 15
50576: PUSH
50577: LD_VAR 0 4
50581: PUSH
50582: LD_INT 2
50584: ARRAY
50585: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50586: LD_ADDR_VAR 0 14
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: LD_INT 2
50596: PUSH
50597: LD_INT 3
50599: PUSH
50600: LD_INT 5
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: ST_TO_ADDR
// for i in tmp do
50609: LD_ADDR_VAR 0 8
50613: PUSH
50614: LD_VAR 0 14
50618: PUSH
50619: FOR_IN
50620: IFFALSE 50790
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50622: LD_ADDR_VAR 0 9
50626: PUSH
50627: LD_VAR 0 10
50631: PPUSH
50632: LD_VAR 0 8
50636: PPUSH
50637: LD_INT 5
50639: PPUSH
50640: CALL_OW 272
50644: PUSH
50645: LD_VAR 0 11
50649: PPUSH
50650: LD_VAR 0 8
50654: PPUSH
50655: LD_INT 5
50657: PPUSH
50658: CALL_OW 273
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50667: LD_VAR 0 9
50671: PUSH
50672: LD_INT 1
50674: ARRAY
50675: PPUSH
50676: LD_VAR 0 9
50680: PUSH
50681: LD_INT 2
50683: ARRAY
50684: PPUSH
50685: CALL_OW 488
50689: IFFALSE 50788
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50691: LD_ADDR_VAR 0 4
50695: PUSH
50696: LD_VAR 0 9
50700: PUSH
50701: LD_INT 1
50703: ARRAY
50704: PPUSH
50705: LD_VAR 0 9
50709: PUSH
50710: LD_INT 2
50712: ARRAY
50713: PPUSH
50714: CALL_OW 546
50718: ST_TO_ADDR
// if hex [ 1 ] then
50719: LD_VAR 0 4
50723: PUSH
50724: LD_INT 1
50726: ARRAY
50727: IFFALSE 50731
// continue ;
50729: GO 50619
// h := hex [ 2 ] ;
50731: LD_ADDR_VAR 0 13
50735: PUSH
50736: LD_VAR 0 4
50740: PUSH
50741: LD_INT 2
50743: ARRAY
50744: ST_TO_ADDR
// if h + 7 < height then
50745: LD_VAR 0 13
50749: PUSH
50750: LD_INT 7
50752: PLUS
50753: PUSH
50754: LD_VAR 0 15
50758: LESS
50759: IFFALSE 50788
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50761: LD_ADDR_VAR 0 18
50765: PUSH
50766: LD_INT 7
50768: PUSH
50769: LD_INT 28
50771: PUSH
50772: LD_INT 45
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: LIST
50779: PUSH
50780: LD_VAR 0 12
50784: ARRAY
50785: ST_TO_ADDR
// break ;
50786: GO 50790
// end ; end ; end ;
50788: GO 50619
50790: POP
50791: POP
// end ; if not weapon then
50792: LD_VAR 0 18
50796: NOT
50797: IFFALSE 50857
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50799: LD_ADDR_VAR 0 5
50803: PUSH
50804: LD_VAR 0 5
50808: PUSH
50809: LD_INT 11
50811: PUSH
50812: LD_INT 30
50814: PUSH
50815: LD_INT 49
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: LIST
50822: DIFF
50823: ST_TO_ADDR
// if not list then
50824: LD_VAR 0 5
50828: NOT
50829: IFFALSE 50833
// exit ;
50831: GO 50975
// weapon := list [ rand ( 1 , list ) ] ;
50833: LD_ADDR_VAR 0 18
50837: PUSH
50838: LD_VAR 0 5
50842: PUSH
50843: LD_INT 1
50845: PPUSH
50846: LD_VAR 0 5
50850: PPUSH
50851: CALL_OW 12
50855: ARRAY
50856: ST_TO_ADDR
// end ; if weapon then
50857: LD_VAR 0 18
50861: IFFALSE 50975
// begin tmp := CostOfWeapon ( weapon ) ;
50863: LD_ADDR_VAR 0 14
50867: PUSH
50868: LD_VAR 0 18
50872: PPUSH
50873: CALL_OW 451
50877: ST_TO_ADDR
// j := GetBase ( tower ) ;
50878: LD_ADDR_VAR 0 9
50882: PUSH
50883: LD_VAR 0 1
50887: PPUSH
50888: CALL_OW 274
50892: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50893: LD_VAR 0 9
50897: PPUSH
50898: LD_INT 1
50900: PPUSH
50901: CALL_OW 275
50905: PUSH
50906: LD_VAR 0 14
50910: PUSH
50911: LD_INT 1
50913: ARRAY
50914: GREATEREQUAL
50915: PUSH
50916: LD_VAR 0 9
50920: PPUSH
50921: LD_INT 2
50923: PPUSH
50924: CALL_OW 275
50928: PUSH
50929: LD_VAR 0 14
50933: PUSH
50934: LD_INT 2
50936: ARRAY
50937: GREATEREQUAL
50938: AND
50939: PUSH
50940: LD_VAR 0 9
50944: PPUSH
50945: LD_INT 3
50947: PPUSH
50948: CALL_OW 275
50952: PUSH
50953: LD_VAR 0 14
50957: PUSH
50958: LD_INT 3
50960: ARRAY
50961: GREATEREQUAL
50962: AND
50963: IFFALSE 50975
// result := weapon ;
50965: LD_ADDR_VAR 0 3
50969: PUSH
50970: LD_VAR 0 18
50974: ST_TO_ADDR
// end ; end ;
50975: LD_VAR 0 3
50979: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50980: LD_INT 0
50982: PPUSH
50983: PPUSH
// result := true ;
50984: LD_ADDR_VAR 0 3
50988: PUSH
50989: LD_INT 1
50991: ST_TO_ADDR
// if array1 = array2 then
50992: LD_VAR 0 1
50996: PUSH
50997: LD_VAR 0 2
51001: EQUAL
51002: IFFALSE 51062
// begin for i = 1 to array1 do
51004: LD_ADDR_VAR 0 4
51008: PUSH
51009: DOUBLE
51010: LD_INT 1
51012: DEC
51013: ST_TO_ADDR
51014: LD_VAR 0 1
51018: PUSH
51019: FOR_TO
51020: IFFALSE 51058
// if array1 [ i ] <> array2 [ i ] then
51022: LD_VAR 0 1
51026: PUSH
51027: LD_VAR 0 4
51031: ARRAY
51032: PUSH
51033: LD_VAR 0 2
51037: PUSH
51038: LD_VAR 0 4
51042: ARRAY
51043: NONEQUAL
51044: IFFALSE 51056
// begin result := false ;
51046: LD_ADDR_VAR 0 3
51050: PUSH
51051: LD_INT 0
51053: ST_TO_ADDR
// break ;
51054: GO 51058
// end ;
51056: GO 51019
51058: POP
51059: POP
// end else
51060: GO 51070
// result := false ;
51062: LD_ADDR_VAR 0 3
51066: PUSH
51067: LD_INT 0
51069: ST_TO_ADDR
// end ;
51070: LD_VAR 0 3
51074: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51075: LD_INT 0
51077: PPUSH
51078: PPUSH
51079: PPUSH
// pom := GetBase ( fac ) ;
51080: LD_ADDR_VAR 0 5
51084: PUSH
51085: LD_VAR 0 1
51089: PPUSH
51090: CALL_OW 274
51094: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51095: LD_ADDR_VAR 0 4
51099: PUSH
51100: LD_VAR 0 2
51104: PUSH
51105: LD_INT 1
51107: ARRAY
51108: PPUSH
51109: LD_VAR 0 2
51113: PUSH
51114: LD_INT 2
51116: ARRAY
51117: PPUSH
51118: LD_VAR 0 2
51122: PUSH
51123: LD_INT 3
51125: ARRAY
51126: PPUSH
51127: LD_VAR 0 2
51131: PUSH
51132: LD_INT 4
51134: ARRAY
51135: PPUSH
51136: CALL_OW 449
51140: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51141: LD_ADDR_VAR 0 3
51145: PUSH
51146: LD_VAR 0 5
51150: PPUSH
51151: LD_INT 1
51153: PPUSH
51154: CALL_OW 275
51158: PUSH
51159: LD_VAR 0 4
51163: PUSH
51164: LD_INT 1
51166: ARRAY
51167: GREATEREQUAL
51168: PUSH
51169: LD_VAR 0 5
51173: PPUSH
51174: LD_INT 2
51176: PPUSH
51177: CALL_OW 275
51181: PUSH
51182: LD_VAR 0 4
51186: PUSH
51187: LD_INT 2
51189: ARRAY
51190: GREATEREQUAL
51191: AND
51192: PUSH
51193: LD_VAR 0 5
51197: PPUSH
51198: LD_INT 3
51200: PPUSH
51201: CALL_OW 275
51205: PUSH
51206: LD_VAR 0 4
51210: PUSH
51211: LD_INT 3
51213: ARRAY
51214: GREATEREQUAL
51215: AND
51216: ST_TO_ADDR
// end ;
51217: LD_VAR 0 3
51221: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51222: LD_INT 0
51224: PPUSH
51225: PPUSH
51226: PPUSH
51227: PPUSH
// pom := GetBase ( building ) ;
51228: LD_ADDR_VAR 0 3
51232: PUSH
51233: LD_VAR 0 1
51237: PPUSH
51238: CALL_OW 274
51242: ST_TO_ADDR
// if not pom then
51243: LD_VAR 0 3
51247: NOT
51248: IFFALSE 51252
// exit ;
51250: GO 51422
// btype := GetBType ( building ) ;
51252: LD_ADDR_VAR 0 5
51256: PUSH
51257: LD_VAR 0 1
51261: PPUSH
51262: CALL_OW 266
51266: ST_TO_ADDR
// if btype = b_armoury then
51267: LD_VAR 0 5
51271: PUSH
51272: LD_INT 4
51274: EQUAL
51275: IFFALSE 51285
// btype := b_barracks ;
51277: LD_ADDR_VAR 0 5
51281: PUSH
51282: LD_INT 5
51284: ST_TO_ADDR
// if btype = b_depot then
51285: LD_VAR 0 5
51289: PUSH
51290: LD_INT 0
51292: EQUAL
51293: IFFALSE 51303
// btype := b_warehouse ;
51295: LD_ADDR_VAR 0 5
51299: PUSH
51300: LD_INT 1
51302: ST_TO_ADDR
// if btype = b_workshop then
51303: LD_VAR 0 5
51307: PUSH
51308: LD_INT 2
51310: EQUAL
51311: IFFALSE 51321
// btype := b_factory ;
51313: LD_ADDR_VAR 0 5
51317: PUSH
51318: LD_INT 3
51320: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51321: LD_ADDR_VAR 0 4
51325: PUSH
51326: LD_VAR 0 5
51330: PPUSH
51331: LD_VAR 0 1
51335: PPUSH
51336: CALL_OW 248
51340: PPUSH
51341: CALL_OW 450
51345: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51346: LD_ADDR_VAR 0 2
51350: PUSH
51351: LD_VAR 0 3
51355: PPUSH
51356: LD_INT 1
51358: PPUSH
51359: CALL_OW 275
51363: PUSH
51364: LD_VAR 0 4
51368: PUSH
51369: LD_INT 1
51371: ARRAY
51372: GREATEREQUAL
51373: PUSH
51374: LD_VAR 0 3
51378: PPUSH
51379: LD_INT 2
51381: PPUSH
51382: CALL_OW 275
51386: PUSH
51387: LD_VAR 0 4
51391: PUSH
51392: LD_INT 2
51394: ARRAY
51395: GREATEREQUAL
51396: AND
51397: PUSH
51398: LD_VAR 0 3
51402: PPUSH
51403: LD_INT 3
51405: PPUSH
51406: CALL_OW 275
51410: PUSH
51411: LD_VAR 0 4
51415: PUSH
51416: LD_INT 3
51418: ARRAY
51419: GREATEREQUAL
51420: AND
51421: ST_TO_ADDR
// end ;
51422: LD_VAR 0 2
51426: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51427: LD_INT 0
51429: PPUSH
51430: PPUSH
51431: PPUSH
// pom := GetBase ( building ) ;
51432: LD_ADDR_VAR 0 4
51436: PUSH
51437: LD_VAR 0 1
51441: PPUSH
51442: CALL_OW 274
51446: ST_TO_ADDR
// if not pom then
51447: LD_VAR 0 4
51451: NOT
51452: IFFALSE 51456
// exit ;
51454: GO 51557
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51456: LD_ADDR_VAR 0 5
51460: PUSH
51461: LD_VAR 0 2
51465: PPUSH
51466: LD_VAR 0 1
51470: PPUSH
51471: CALL_OW 248
51475: PPUSH
51476: CALL_OW 450
51480: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51481: LD_ADDR_VAR 0 3
51485: PUSH
51486: LD_VAR 0 4
51490: PPUSH
51491: LD_INT 1
51493: PPUSH
51494: CALL_OW 275
51498: PUSH
51499: LD_VAR 0 5
51503: PUSH
51504: LD_INT 1
51506: ARRAY
51507: GREATEREQUAL
51508: PUSH
51509: LD_VAR 0 4
51513: PPUSH
51514: LD_INT 2
51516: PPUSH
51517: CALL_OW 275
51521: PUSH
51522: LD_VAR 0 5
51526: PUSH
51527: LD_INT 2
51529: ARRAY
51530: GREATEREQUAL
51531: AND
51532: PUSH
51533: LD_VAR 0 4
51537: PPUSH
51538: LD_INT 3
51540: PPUSH
51541: CALL_OW 275
51545: PUSH
51546: LD_VAR 0 5
51550: PUSH
51551: LD_INT 3
51553: ARRAY
51554: GREATEREQUAL
51555: AND
51556: ST_TO_ADDR
// end ;
51557: LD_VAR 0 3
51561: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
51562: LD_INT 0
51564: PPUSH
51565: PPUSH
51566: PPUSH
51567: PPUSH
51568: PPUSH
51569: PPUSH
51570: PPUSH
51571: PPUSH
51572: PPUSH
51573: PPUSH
// result := false ;
51574: LD_ADDR_VAR 0 6
51578: PUSH
51579: LD_INT 0
51581: ST_TO_ADDR
// if not base or not btype or not x or not y then
51582: LD_VAR 0 1
51586: NOT
51587: PUSH
51588: LD_VAR 0 2
51592: NOT
51593: OR
51594: PUSH
51595: LD_VAR 0 3
51599: NOT
51600: OR
51601: PUSH
51602: LD_VAR 0 4
51606: NOT
51607: OR
51608: IFFALSE 51612
// exit ;
51610: GO 52221
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
51612: LD_ADDR_VAR 0 12
51616: PUSH
51617: LD_VAR 0 2
51621: PPUSH
51622: LD_VAR 0 3
51626: PPUSH
51627: LD_VAR 0 4
51631: PPUSH
51632: LD_VAR 0 5
51636: PPUSH
51637: LD_VAR 0 1
51641: PUSH
51642: LD_INT 1
51644: ARRAY
51645: PPUSH
51646: CALL_OW 248
51650: PPUSH
51651: LD_INT 0
51653: PPUSH
51654: CALL 53058 0 6
51658: ST_TO_ADDR
// if not hexes then
51659: LD_VAR 0 12
51663: NOT
51664: IFFALSE 51668
// exit ;
51666: GO 52221
// for i = 1 to hexes do
51668: LD_ADDR_VAR 0 7
51672: PUSH
51673: DOUBLE
51674: LD_INT 1
51676: DEC
51677: ST_TO_ADDR
51678: LD_VAR 0 12
51682: PUSH
51683: FOR_TO
51684: IFFALSE 52219
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51686: LD_ADDR_VAR 0 11
51690: PUSH
51691: LD_VAR 0 12
51695: PUSH
51696: LD_VAR 0 7
51700: ARRAY
51701: PUSH
51702: LD_INT 1
51704: ARRAY
51705: PPUSH
51706: LD_VAR 0 12
51710: PUSH
51711: LD_VAR 0 7
51715: ARRAY
51716: PUSH
51717: LD_INT 2
51719: ARRAY
51720: PPUSH
51721: CALL_OW 428
51725: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51726: LD_VAR 0 12
51730: PUSH
51731: LD_VAR 0 7
51735: ARRAY
51736: PUSH
51737: LD_INT 1
51739: ARRAY
51740: PPUSH
51741: LD_VAR 0 12
51745: PUSH
51746: LD_VAR 0 7
51750: ARRAY
51751: PUSH
51752: LD_INT 2
51754: ARRAY
51755: PPUSH
51756: CALL_OW 351
51760: PUSH
51761: LD_VAR 0 12
51765: PUSH
51766: LD_VAR 0 7
51770: ARRAY
51771: PUSH
51772: LD_INT 1
51774: ARRAY
51775: PPUSH
51776: LD_VAR 0 12
51780: PUSH
51781: LD_VAR 0 7
51785: ARRAY
51786: PUSH
51787: LD_INT 2
51789: ARRAY
51790: PPUSH
51791: CALL_OW 488
51795: NOT
51796: OR
51797: PUSH
51798: LD_VAR 0 11
51802: PPUSH
51803: CALL_OW 247
51807: PUSH
51808: LD_INT 3
51810: EQUAL
51811: OR
51812: IFFALSE 51818
// exit ;
51814: POP
51815: POP
51816: GO 52221
// if not tmp or not tmp in base then
51818: LD_VAR 0 11
51822: NOT
51823: PUSH
51824: LD_VAR 0 11
51828: PUSH
51829: LD_VAR 0 1
51833: IN
51834: NOT
51835: OR
51836: IFFALSE 51840
// continue ;
51838: GO 51683
// result := true ;
51840: LD_ADDR_VAR 0 6
51844: PUSH
51845: LD_INT 1
51847: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51848: LD_ADDR_VAR 0 15
51852: PUSH
51853: LD_VAR 0 1
51857: PPUSH
51858: LD_INT 22
51860: PUSH
51861: LD_VAR 0 11
51865: PPUSH
51866: CALL_OW 255
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: LD_INT 30
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 30
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: LIST
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PPUSH
51907: CALL_OW 72
51911: ST_TO_ADDR
// if dep then
51912: LD_VAR 0 15
51916: IFFALSE 52052
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51918: LD_ADDR_VAR 0 14
51922: PUSH
51923: LD_VAR 0 15
51927: PUSH
51928: LD_INT 1
51930: ARRAY
51931: PPUSH
51932: CALL_OW 250
51936: PPUSH
51937: LD_VAR 0 15
51941: PUSH
51942: LD_INT 1
51944: ARRAY
51945: PPUSH
51946: CALL_OW 254
51950: PPUSH
51951: LD_INT 5
51953: PPUSH
51954: CALL_OW 272
51958: PUSH
51959: LD_VAR 0 15
51963: PUSH
51964: LD_INT 1
51966: ARRAY
51967: PPUSH
51968: CALL_OW 251
51972: PPUSH
51973: LD_VAR 0 15
51977: PUSH
51978: LD_INT 1
51980: ARRAY
51981: PPUSH
51982: CALL_OW 254
51986: PPUSH
51987: LD_INT 5
51989: PPUSH
51990: CALL_OW 273
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51999: LD_VAR 0 14
52003: PUSH
52004: LD_INT 1
52006: ARRAY
52007: PPUSH
52008: LD_VAR 0 14
52012: PUSH
52013: LD_INT 2
52015: ARRAY
52016: PPUSH
52017: CALL_OW 488
52021: IFFALSE 52052
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52023: LD_VAR 0 11
52027: PPUSH
52028: LD_VAR 0 14
52032: PUSH
52033: LD_INT 1
52035: ARRAY
52036: PPUSH
52037: LD_VAR 0 14
52041: PUSH
52042: LD_INT 2
52044: ARRAY
52045: PPUSH
52046: CALL_OW 111
// continue ;
52050: GO 51683
// end ; end ; r := GetDir ( tmp ) ;
52052: LD_ADDR_VAR 0 13
52056: PUSH
52057: LD_VAR 0 11
52061: PPUSH
52062: CALL_OW 254
52066: ST_TO_ADDR
// if r = 5 then
52067: LD_VAR 0 13
52071: PUSH
52072: LD_INT 5
52074: EQUAL
52075: IFFALSE 52085
// r := 0 ;
52077: LD_ADDR_VAR 0 13
52081: PUSH
52082: LD_INT 0
52084: ST_TO_ADDR
// for j = r to 5 do
52085: LD_ADDR_VAR 0 8
52089: PUSH
52090: DOUBLE
52091: LD_VAR 0 13
52095: DEC
52096: ST_TO_ADDR
52097: LD_INT 5
52099: PUSH
52100: FOR_TO
52101: IFFALSE 52215
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52103: LD_ADDR_VAR 0 9
52107: PUSH
52108: LD_VAR 0 11
52112: PPUSH
52113: CALL_OW 250
52117: PPUSH
52118: LD_VAR 0 8
52122: PPUSH
52123: LD_INT 2
52125: PPUSH
52126: CALL_OW 272
52130: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52131: LD_ADDR_VAR 0 10
52135: PUSH
52136: LD_VAR 0 11
52140: PPUSH
52141: CALL_OW 251
52145: PPUSH
52146: LD_VAR 0 8
52150: PPUSH
52151: LD_INT 2
52153: PPUSH
52154: CALL_OW 273
52158: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52159: LD_VAR 0 9
52163: PPUSH
52164: LD_VAR 0 10
52168: PPUSH
52169: CALL_OW 488
52173: PUSH
52174: LD_VAR 0 9
52178: PPUSH
52179: LD_VAR 0 10
52183: PPUSH
52184: CALL_OW 428
52188: NOT
52189: AND
52190: IFFALSE 52213
// begin ComMoveXY ( tmp , _x , _y ) ;
52192: LD_VAR 0 11
52196: PPUSH
52197: LD_VAR 0 9
52201: PPUSH
52202: LD_VAR 0 10
52206: PPUSH
52207: CALL_OW 111
// break ;
52211: GO 52215
// end ; end ;
52213: GO 52100
52215: POP
52216: POP
// end ;
52217: GO 51683
52219: POP
52220: POP
// end ;
52221: LD_VAR 0 6
52225: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
52226: LD_INT 0
52228: PPUSH
52229: PPUSH
52230: PPUSH
52231: PPUSH
52232: PPUSH
52233: PPUSH
52234: PPUSH
52235: PPUSH
52236: PPUSH
52237: PPUSH
// result := false ;
52238: LD_ADDR_VAR 0 6
52242: PUSH
52243: LD_INT 0
52245: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52246: LD_VAR 0 1
52250: NOT
52251: PUSH
52252: LD_VAR 0 1
52256: PPUSH
52257: CALL_OW 266
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: IN
52272: NOT
52273: OR
52274: PUSH
52275: LD_VAR 0 2
52279: NOT
52280: OR
52281: PUSH
52282: LD_VAR 0 5
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: LD_INT 3
52298: PUSH
52299: LD_INT 4
52301: PUSH
52302: LD_INT 5
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: IN
52313: NOT
52314: OR
52315: PUSH
52316: LD_VAR 0 3
52320: PPUSH
52321: LD_VAR 0 4
52325: PPUSH
52326: CALL_OW 488
52330: NOT
52331: OR
52332: IFFALSE 52336
// exit ;
52334: GO 53053
// pom := GetBase ( depot ) ;
52336: LD_ADDR_VAR 0 10
52340: PUSH
52341: LD_VAR 0 1
52345: PPUSH
52346: CALL_OW 274
52350: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52351: LD_ADDR_VAR 0 11
52355: PUSH
52356: LD_VAR 0 2
52360: PPUSH
52361: LD_VAR 0 1
52365: PPUSH
52366: CALL_OW 248
52370: PPUSH
52371: CALL_OW 450
52375: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52376: LD_VAR 0 10
52380: PPUSH
52381: LD_INT 1
52383: PPUSH
52384: CALL_OW 275
52388: PUSH
52389: LD_VAR 0 11
52393: PUSH
52394: LD_INT 1
52396: ARRAY
52397: GREATEREQUAL
52398: PUSH
52399: LD_VAR 0 10
52403: PPUSH
52404: LD_INT 2
52406: PPUSH
52407: CALL_OW 275
52411: PUSH
52412: LD_VAR 0 11
52416: PUSH
52417: LD_INT 2
52419: ARRAY
52420: GREATEREQUAL
52421: AND
52422: PUSH
52423: LD_VAR 0 10
52427: PPUSH
52428: LD_INT 3
52430: PPUSH
52431: CALL_OW 275
52435: PUSH
52436: LD_VAR 0 11
52440: PUSH
52441: LD_INT 3
52443: ARRAY
52444: GREATEREQUAL
52445: AND
52446: NOT
52447: IFFALSE 52451
// exit ;
52449: GO 53053
// if GetBType ( depot ) = b_depot then
52451: LD_VAR 0 1
52455: PPUSH
52456: CALL_OW 266
52460: PUSH
52461: LD_INT 0
52463: EQUAL
52464: IFFALSE 52476
// dist := 28 else
52466: LD_ADDR_VAR 0 14
52470: PUSH
52471: LD_INT 28
52473: ST_TO_ADDR
52474: GO 52484
// dist := 36 ;
52476: LD_ADDR_VAR 0 14
52480: PUSH
52481: LD_INT 36
52483: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52484: LD_VAR 0 1
52488: PPUSH
52489: LD_VAR 0 3
52493: PPUSH
52494: LD_VAR 0 4
52498: PPUSH
52499: CALL_OW 297
52503: PUSH
52504: LD_VAR 0 14
52508: GREATER
52509: IFFALSE 52513
// exit ;
52511: GO 53053
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52513: LD_ADDR_VAR 0 12
52517: PUSH
52518: LD_VAR 0 2
52522: PPUSH
52523: LD_VAR 0 3
52527: PPUSH
52528: LD_VAR 0 4
52532: PPUSH
52533: LD_VAR 0 5
52537: PPUSH
52538: LD_VAR 0 1
52542: PPUSH
52543: CALL_OW 248
52547: PPUSH
52548: LD_INT 0
52550: PPUSH
52551: CALL 53058 0 6
52555: ST_TO_ADDR
// if not hexes then
52556: LD_VAR 0 12
52560: NOT
52561: IFFALSE 52565
// exit ;
52563: GO 53053
// hex := GetHexInfo ( x , y ) ;
52565: LD_ADDR_VAR 0 15
52569: PUSH
52570: LD_VAR 0 3
52574: PPUSH
52575: LD_VAR 0 4
52579: PPUSH
52580: CALL_OW 546
52584: ST_TO_ADDR
// if hex [ 1 ] then
52585: LD_VAR 0 15
52589: PUSH
52590: LD_INT 1
52592: ARRAY
52593: IFFALSE 52597
// exit ;
52595: GO 53053
// height := hex [ 2 ] ;
52597: LD_ADDR_VAR 0 13
52601: PUSH
52602: LD_VAR 0 15
52606: PUSH
52607: LD_INT 2
52609: ARRAY
52610: ST_TO_ADDR
// for i = 1 to hexes do
52611: LD_ADDR_VAR 0 7
52615: PUSH
52616: DOUBLE
52617: LD_INT 1
52619: DEC
52620: ST_TO_ADDR
52621: LD_VAR 0 12
52625: PUSH
52626: FOR_TO
52627: IFFALSE 52957
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52629: LD_VAR 0 12
52633: PUSH
52634: LD_VAR 0 7
52638: ARRAY
52639: PUSH
52640: LD_INT 1
52642: ARRAY
52643: PPUSH
52644: LD_VAR 0 12
52648: PUSH
52649: LD_VAR 0 7
52653: ARRAY
52654: PUSH
52655: LD_INT 2
52657: ARRAY
52658: PPUSH
52659: CALL_OW 488
52663: NOT
52664: PUSH
52665: LD_VAR 0 12
52669: PUSH
52670: LD_VAR 0 7
52674: ARRAY
52675: PUSH
52676: LD_INT 1
52678: ARRAY
52679: PPUSH
52680: LD_VAR 0 12
52684: PUSH
52685: LD_VAR 0 7
52689: ARRAY
52690: PUSH
52691: LD_INT 2
52693: ARRAY
52694: PPUSH
52695: CALL_OW 428
52699: PUSH
52700: LD_INT 0
52702: GREATER
52703: OR
52704: PUSH
52705: LD_VAR 0 12
52709: PUSH
52710: LD_VAR 0 7
52714: ARRAY
52715: PUSH
52716: LD_INT 1
52718: ARRAY
52719: PPUSH
52720: LD_VAR 0 12
52724: PUSH
52725: LD_VAR 0 7
52729: ARRAY
52730: PUSH
52731: LD_INT 2
52733: ARRAY
52734: PPUSH
52735: CALL_OW 351
52739: OR
52740: IFFALSE 52746
// exit ;
52742: POP
52743: POP
52744: GO 53053
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52746: LD_ADDR_VAR 0 8
52750: PUSH
52751: LD_VAR 0 12
52755: PUSH
52756: LD_VAR 0 7
52760: ARRAY
52761: PUSH
52762: LD_INT 1
52764: ARRAY
52765: PPUSH
52766: LD_VAR 0 12
52770: PUSH
52771: LD_VAR 0 7
52775: ARRAY
52776: PUSH
52777: LD_INT 2
52779: ARRAY
52780: PPUSH
52781: CALL_OW 546
52785: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52786: LD_VAR 0 8
52790: PUSH
52791: LD_INT 1
52793: ARRAY
52794: PUSH
52795: LD_VAR 0 8
52799: PUSH
52800: LD_INT 2
52802: ARRAY
52803: PUSH
52804: LD_VAR 0 13
52808: PUSH
52809: LD_INT 2
52811: PLUS
52812: GREATER
52813: OR
52814: PUSH
52815: LD_VAR 0 8
52819: PUSH
52820: LD_INT 2
52822: ARRAY
52823: PUSH
52824: LD_VAR 0 13
52828: PUSH
52829: LD_INT 2
52831: MINUS
52832: LESS
52833: OR
52834: PUSH
52835: LD_VAR 0 8
52839: PUSH
52840: LD_INT 3
52842: ARRAY
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: LD_INT 8
52849: PUSH
52850: LD_INT 9
52852: PUSH
52853: LD_INT 10
52855: PUSH
52856: LD_INT 11
52858: PUSH
52859: LD_INT 12
52861: PUSH
52862: LD_INT 13
52864: PUSH
52865: LD_INT 16
52867: PUSH
52868: LD_INT 17
52870: PUSH
52871: LD_INT 18
52873: PUSH
52874: LD_INT 19
52876: PUSH
52877: LD_INT 20
52879: PUSH
52880: LD_INT 21
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: IN
52898: NOT
52899: OR
52900: PUSH
52901: LD_VAR 0 8
52905: PUSH
52906: LD_INT 5
52908: ARRAY
52909: NOT
52910: OR
52911: PUSH
52912: LD_VAR 0 8
52916: PUSH
52917: LD_INT 6
52919: ARRAY
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: LD_INT 2
52926: PUSH
52927: LD_INT 7
52929: PUSH
52930: LD_INT 9
52932: PUSH
52933: LD_INT 10
52935: PUSH
52936: LD_INT 11
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: IN
52947: NOT
52948: OR
52949: IFFALSE 52955
// exit ;
52951: POP
52952: POP
52953: GO 53053
// end ;
52955: GO 52626
52957: POP
52958: POP
// side := GetSide ( depot ) ;
52959: LD_ADDR_VAR 0 9
52963: PUSH
52964: LD_VAR 0 1
52968: PPUSH
52969: CALL_OW 255
52973: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52974: LD_VAR 0 9
52978: PPUSH
52979: LD_VAR 0 3
52983: PPUSH
52984: LD_VAR 0 4
52988: PPUSH
52989: LD_INT 20
52991: PPUSH
52992: CALL 45707 0 4
52996: PUSH
52997: LD_INT 4
52999: ARRAY
53000: IFFALSE 53004
// exit ;
53002: GO 53053
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53004: LD_VAR 0 2
53008: PUSH
53009: LD_INT 29
53011: PUSH
53012: LD_INT 30
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: IN
53019: PUSH
53020: LD_VAR 0 3
53024: PPUSH
53025: LD_VAR 0 4
53029: PPUSH
53030: LD_VAR 0 9
53034: PPUSH
53035: CALL_OW 440
53039: NOT
53040: AND
53041: IFFALSE 53045
// exit ;
53043: GO 53053
// result := true ;
53045: LD_ADDR_VAR 0 6
53049: PUSH
53050: LD_INT 1
53052: ST_TO_ADDR
// end ;
53053: LD_VAR 0 6
53057: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53058: LD_INT 0
53060: PPUSH
53061: PPUSH
53062: PPUSH
53063: PPUSH
53064: PPUSH
53065: PPUSH
53066: PPUSH
53067: PPUSH
53068: PPUSH
53069: PPUSH
53070: PPUSH
53071: PPUSH
53072: PPUSH
53073: PPUSH
53074: PPUSH
53075: PPUSH
53076: PPUSH
53077: PPUSH
53078: PPUSH
53079: PPUSH
53080: PPUSH
53081: PPUSH
53082: PPUSH
53083: PPUSH
53084: PPUSH
53085: PPUSH
53086: PPUSH
53087: PPUSH
53088: PPUSH
53089: PPUSH
53090: PPUSH
53091: PPUSH
53092: PPUSH
53093: PPUSH
53094: PPUSH
53095: PPUSH
53096: PPUSH
53097: PPUSH
53098: PPUSH
53099: PPUSH
53100: PPUSH
53101: PPUSH
53102: PPUSH
53103: PPUSH
53104: PPUSH
53105: PPUSH
53106: PPUSH
53107: PPUSH
53108: PPUSH
53109: PPUSH
53110: PPUSH
53111: PPUSH
53112: PPUSH
53113: PPUSH
53114: PPUSH
53115: PPUSH
53116: PPUSH
53117: PPUSH
// result = [ ] ;
53118: LD_ADDR_VAR 0 7
53122: PUSH
53123: EMPTY
53124: ST_TO_ADDR
// temp_list = [ ] ;
53125: LD_ADDR_VAR 0 9
53129: PUSH
53130: EMPTY
53131: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53132: LD_VAR 0 4
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 3
53148: PUSH
53149: LD_INT 4
53151: PUSH
53152: LD_INT 5
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: IN
53163: NOT
53164: PUSH
53165: LD_VAR 0 1
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: IN
53180: PUSH
53181: LD_VAR 0 5
53185: PUSH
53186: LD_INT 1
53188: PUSH
53189: LD_INT 2
53191: PUSH
53192: LD_INT 3
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: LIST
53199: IN
53200: NOT
53201: AND
53202: OR
53203: IFFALSE 53207
// exit ;
53205: GO 71598
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53207: LD_VAR 0 1
53211: PUSH
53212: LD_INT 6
53214: PUSH
53215: LD_INT 7
53217: PUSH
53218: LD_INT 8
53220: PUSH
53221: LD_INT 13
53223: PUSH
53224: LD_INT 12
53226: PUSH
53227: LD_INT 15
53229: PUSH
53230: LD_INT 11
53232: PUSH
53233: LD_INT 14
53235: PUSH
53236: LD_INT 10
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: IN
53250: IFFALSE 53260
// btype = b_lab ;
53252: LD_ADDR_VAR 0 1
53256: PUSH
53257: LD_INT 6
53259: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53260: LD_VAR 0 6
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: LIST
53278: IN
53279: NOT
53280: PUSH
53281: LD_VAR 0 1
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 3
53297: PUSH
53298: LD_INT 6
53300: PUSH
53301: LD_INT 36
53303: PUSH
53304: LD_INT 4
53306: PUSH
53307: LD_INT 5
53309: PUSH
53310: LD_INT 31
53312: PUSH
53313: LD_INT 32
53315: PUSH
53316: LD_INT 33
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: IN
53332: NOT
53333: PUSH
53334: LD_VAR 0 6
53338: PUSH
53339: LD_INT 1
53341: EQUAL
53342: AND
53343: OR
53344: PUSH
53345: LD_VAR 0 1
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: LD_INT 3
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: IN
53360: NOT
53361: PUSH
53362: LD_VAR 0 6
53366: PUSH
53367: LD_INT 2
53369: EQUAL
53370: AND
53371: OR
53372: IFFALSE 53382
// mode = 0 ;
53374: LD_ADDR_VAR 0 6
53378: PUSH
53379: LD_INT 0
53381: ST_TO_ADDR
// case mode of 0 :
53382: LD_VAR 0 6
53386: PUSH
53387: LD_INT 0
53389: DOUBLE
53390: EQUAL
53391: IFTRUE 53395
53393: GO 64848
53395: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53396: LD_ADDR_VAR 0 11
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 1
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 2
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 1
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: LD_INT 3
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: LD_INT 3
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53589: LD_ADDR_VAR 0 12
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 2
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 2
53735: NEG
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 3
53746: NEG
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 3
53757: NEG
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53785: LD_ADDR_VAR 0 13
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: LD_INT 1
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 2
53920: NEG
53921: PUSH
53922: LD_INT 2
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: LD_INT 3
53936: NEG
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 3
53944: NEG
53945: PUSH
53946: LD_INT 2
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 3
53956: NEG
53957: PUSH
53958: LD_INT 3
53960: NEG
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53984: LD_ADDR_VAR 0 14
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: LD_INT 2
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: LD_INT 2
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: LD_INT 1
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: LD_INT 1
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: LD_INT 3
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: LD_INT 3
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: LD_INT 2
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54180: LD_ADDR_VAR 0 15
54184: PUSH
54185: LD_INT 0
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 2
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 3
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 3
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54373: LD_ADDR_VAR 0 16
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: LD_INT 1
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: NEG
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: LD_INT 2
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: LD_INT 1
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: LD_INT 2
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 2
54508: NEG
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 3
54520: PUSH
54521: LD_INT 2
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 3
54530: PUSH
54531: LD_INT 3
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 2
54540: PUSH
54541: LD_INT 3
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54566: LD_ADDR_VAR 0 17
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 0
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 1
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 2
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 2
54691: PUSH
54692: LD_INT 1
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: LD_INT 2
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: LD_INT 2
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 2
54753: NEG
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54796: LD_ADDR_VAR 0 18
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: LD_INT 1
54816: NEG
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: LD_INT 2
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 2
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 2
54972: NEG
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: NEG
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: LD_INT 2
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55026: LD_ADDR_VAR 0 19
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 2
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 2
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: PUSH
55162: LD_INT 2
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55256: LD_ADDR_VAR 0 20
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 1
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: LD_INT 2
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 2
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 2
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 2
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 2
55432: NEG
55433: PUSH
55434: LD_INT 0
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: LD_INT 2
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55486: LD_ADDR_VAR 0 21
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 2
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 2
55673: NEG
55674: PUSH
55675: LD_INT 1
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 2
55685: NEG
55686: PUSH
55687: LD_INT 2
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55716: LD_ADDR_VAR 0 22
55720: PUSH
55721: LD_INT 0
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: LD_INT 1
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: LD_INT 2
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 2
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 2
55851: PUSH
55852: LD_INT 2
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: LD_INT 2
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 2
55892: NEG
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 2
55903: NEG
55904: PUSH
55905: LD_INT 1
55907: NEG
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 2
55915: NEG
55916: PUSH
55917: LD_INT 2
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55946: LD_ADDR_VAR 0 23
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 2
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: PUSH
56082: LD_INT 2
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: LD_INT 2
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: LD_INT 2
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 2
56133: NEG
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: NEG
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 2
56157: NEG
56158: PUSH
56159: LD_INT 3
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 3
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: PUSH
56182: LD_INT 2
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 2
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56226: LD_ADDR_VAR 0 24
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 0
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: LD_INT 0
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 1
56307: NEG
56308: PUSH
56309: LD_INT 2
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: LD_INT 1
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 2
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 2
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: LD_INT 2
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: LD_INT 1
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 2
56402: NEG
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 2
56413: NEG
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 2
56425: NEG
56426: PUSH
56427: LD_INT 2
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 3
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 3
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56502: LD_ADDR_VAR 0 25
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 1
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: LD_INT 1
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 2
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: LD_INT 2
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: NEG
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: NEG
56690: PUSH
56691: LD_INT 1
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 2
56701: NEG
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 3
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 3
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: PUSH
56734: LD_INT 3
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: LD_INT 3
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56776: LD_ADDR_VAR 0 26
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: LD_INT 1
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: LD_INT 2
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 2
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: LD_INT 2
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: NEG
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 2
56987: PUSH
56988: LD_INT 3
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: LD_INT 3
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 2
57018: NEG
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57052: LD_ADDR_VAR 0 27
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: LD_INT 2
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: LD_INT 1
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 2
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 2
57239: NEG
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 2
57251: NEG
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: LD_INT 2
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 3
57285: NEG
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 3
57297: NEG
57298: PUSH
57299: LD_INT 2
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57332: LD_ADDR_VAR 0 28
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 0
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 2
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: PUSH
57468: LD_INT 2
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: LD_INT 2
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 2
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 1
57497: NEG
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 2
57508: NEG
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 2
57531: NEG
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: LD_INT 3
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: LD_INT 3
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 3
57567: NEG
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 3
57579: NEG
57580: PUSH
57581: LD_INT 2
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57614: LD_ADDR_VAR 0 29
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 1
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: LD_INT 1
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: LD_INT 0
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: LD_INT 2
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: LD_INT 2
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 2
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 2
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: NEG
57781: PUSH
57782: LD_INT 1
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 2
57792: NEG
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 2
57804: NEG
57805: PUSH
57806: LD_INT 3
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 2
57816: PUSH
57817: LD_INT 1
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 3
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: LD_INT 3
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: LD_INT 2
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 3
57858: NEG
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57893: LD_ADDR_VAR 0 30
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: LD_INT 1
57913: NEG
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: PUSH
57932: LD_INT 1
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: LD_INT 1
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: LD_INT 2
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: LD_INT 2
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: LD_INT 0
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: LD_INT 1
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: LD_INT 2
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: LD_INT 3
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 2
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 3
58105: PUSH
58106: LD_INT 2
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 2
58115: PUSH
58116: LD_INT 3
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 3
58136: NEG
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58171: LD_ADDR_VAR 0 31
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: LD_INT 1
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: NEG
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 2
58348: NEG
58349: PUSH
58350: LD_INT 2
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 2
58360: NEG
58361: PUSH
58362: LD_INT 3
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 2
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: LD_INT 3
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 3
58414: NEG
58415: PUSH
58416: LD_INT 2
58418: NEG
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58449: LD_ADDR_VAR 0 32
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: LD_INT 1
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: LD_INT 2
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: LD_INT 2
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 2
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 2
58574: PUSH
58575: LD_INT 2
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: LD_INT 2
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 2
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 2
58615: NEG
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 2
58626: NEG
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: LD_INT 3
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 3
58661: PUSH
58662: LD_INT 2
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 2
58671: PUSH
58672: LD_INT 3
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 2
58681: NEG
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 3
58692: NEG
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58727: LD_ADDR_VAR 0 33
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: LD_INT 1
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 1
58871: NEG
58872: PUSH
58873: LD_INT 1
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: LD_INT 0
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 2
58893: NEG
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 2
58905: NEG
58906: PUSH
58907: LD_INT 2
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 2
58917: NEG
58918: PUSH
58919: LD_INT 3
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 3
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: LD_INT 3
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: LD_INT 2
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: NEG
58972: PUSH
58973: LD_INT 2
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59006: LD_ADDR_VAR 0 34
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: LD_INT 1
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: LD_INT 1
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: LD_INT 2
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: LD_INT 2
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: LD_INT 1
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: LD_INT 1
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 2
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: LD_INT 2
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 2
59162: NEG
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 2
59173: NEG
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: NEG
59198: PUSH
59199: LD_INT 3
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: LD_INT 2
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 3
59220: PUSH
59221: LD_INT 2
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 3
59251: NEG
59252: PUSH
59253: LD_INT 1
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59286: LD_ADDR_VAR 0 35
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 2
59367: PUSH
59368: LD_INT 1
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 2
59377: NEG
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59398: LD_ADDR_VAR 0 36
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: LD_INT 1
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: LD_INT 1
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: LD_INT 1
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 1
59479: NEG
59480: PUSH
59481: LD_INT 2
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59510: LD_ADDR_VAR 0 37
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: LD_INT 1
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: LD_INT 1
59583: NEG
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59622: LD_ADDR_VAR 0 38
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: LD_INT 1
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 1
59680: NEG
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: LD_INT 1
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 2
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 2
59713: NEG
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59734: LD_ADDR_VAR 0 39
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 0
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: NEG
59804: PUSH
59805: LD_INT 1
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 2
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: LD_INT 2
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59846: LD_ADDR_VAR 0 40
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59958: LD_ADDR_VAR 0 41
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: NEG
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: LD_INT 1
60054: NEG
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 2
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 2
60072: PUSH
60073: LD_INT 1
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: LD_INT 2
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: LD_INT 2
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 1
60102: NEG
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 2
60113: NEG
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 2
60136: NEG
60137: PUSH
60138: LD_INT 2
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 2
60148: NEG
60149: PUSH
60150: LD_INT 3
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 2
60160: PUSH
60161: LD_INT 1
60163: NEG
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 3
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 3
60191: PUSH
60192: LD_INT 2
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 3
60201: PUSH
60202: LD_INT 3
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 2
60211: PUSH
60212: LD_INT 3
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 2
60221: NEG
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 3
60232: NEG
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 3
60243: NEG
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 3
60255: NEG
60256: PUSH
60257: LD_INT 2
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 3
60267: NEG
60268: PUSH
60269: LD_INT 3
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60308: LD_ADDR_VAR 0 42
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: LD_INT 2
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: LD_INT 2
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 2
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 2
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: LD_INT 2
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: LD_INT 2
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 2
60474: NEG
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 2
60486: NEG
60487: PUSH
60488: LD_INT 2
60490: NEG
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 2
60498: NEG
60499: PUSH
60500: LD_INT 3
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 1
60510: NEG
60511: PUSH
60512: LD_INT 3
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: LD_INT 3
60525: NEG
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: LD_INT 2
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 3
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 3
60554: PUSH
60555: LD_INT 3
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: LD_INT 3
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 1
60574: PUSH
60575: LD_INT 3
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 0
60584: PUSH
60585: LD_INT 3
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: NEG
60595: PUSH
60596: LD_INT 2
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 3
60605: NEG
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 3
60617: NEG
60618: PUSH
60619: LD_INT 3
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60658: LD_ADDR_VAR 0 43
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: LD_INT 1
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: LD_INT 1
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: LD_INT 2
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 2
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: LD_INT 1
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 2
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 2
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 1
60793: PUSH
60794: LD_INT 2
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: LD_INT 2
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 2
60824: NEG
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 2
60835: NEG
60836: PUSH
60837: LD_INT 1
60839: NEG
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 1
60847: NEG
60848: PUSH
60849: LD_INT 3
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: LD_INT 3
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: LD_INT 2
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 2
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 3
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 3
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: LD_INT 3
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: LD_INT 3
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 1
60932: NEG
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: NEG
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 3
60954: NEG
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 3
60965: NEG
60966: PUSH
60967: LD_INT 1
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61006: LD_ADDR_VAR 0 44
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: LD_INT 0
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: LD_INT 1
61026: NEG
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 1
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: NEG
61088: PUSH
61089: LD_INT 2
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: LD_INT 1
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 2
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 2
61120: PUSH
61121: LD_INT 1
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 2
61130: PUSH
61131: LD_INT 2
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 1
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 2
61161: NEG
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 2
61172: NEG
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: NEG
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 2
61196: NEG
61197: PUSH
61198: LD_INT 3
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 2
61208: PUSH
61209: LD_INT 1
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 3
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 3
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 3
61239: PUSH
61240: LD_INT 2
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 3
61249: PUSH
61250: LD_INT 3
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 2
61259: PUSH
61260: LD_INT 3
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 2
61269: NEG
61270: PUSH
61271: LD_INT 1
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 3
61280: NEG
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 3
61291: NEG
61292: PUSH
61293: LD_INT 1
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 3
61303: NEG
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 3
61315: NEG
61316: PUSH
61317: LD_INT 3
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61356: LD_ADDR_VAR 0 45
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: LD_INT 1
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: NEG
61415: PUSH
61416: LD_INT 0
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 1
61425: NEG
61426: PUSH
61427: LD_INT 1
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 1
61437: NEG
61438: PUSH
61439: LD_INT 2
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: LD_INT 2
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 1
61460: PUSH
61461: LD_INT 1
61463: NEG
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 2
61471: PUSH
61472: LD_INT 1
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 2
61481: PUSH
61482: LD_INT 2
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: LD_INT 2
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: LD_INT 2
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: NEG
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 2
61522: NEG
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 2
61534: NEG
61535: PUSH
61536: LD_INT 2
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 2
61546: NEG
61547: PUSH
61548: LD_INT 3
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: LD_INT 3
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: LD_INT 3
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 1
61581: PUSH
61582: LD_INT 2
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 3
61592: PUSH
61593: LD_INT 2
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 3
61602: PUSH
61603: LD_INT 3
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 2
61612: PUSH
61613: LD_INT 3
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 1
61622: PUSH
61623: LD_INT 3
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: LD_INT 3
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 1
61642: NEG
61643: PUSH
61644: LD_INT 2
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 3
61653: NEG
61654: PUSH
61655: LD_INT 2
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 3
61665: NEG
61666: PUSH
61667: LD_INT 3
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61706: LD_ADDR_VAR 0 46
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: LD_INT 1
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 1
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: LD_INT 1
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 1
61775: NEG
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: LD_INT 2
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: LD_INT 2
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 2
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 2
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 1
61841: PUSH
61842: LD_INT 2
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: LD_INT 2
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 1
61861: NEG
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 2
61872: NEG
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 2
61883: NEG
61884: PUSH
61885: LD_INT 1
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: LD_INT 3
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: LD_INT 3
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: LD_INT 2
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: PUSH
61930: LD_INT 1
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 3
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 3
61950: PUSH
61951: LD_INT 1
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: LD_INT 3
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: LD_INT 3
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 2
61991: NEG
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 3
62002: NEG
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 3
62013: NEG
62014: PUSH
62015: LD_INT 1
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62054: LD_ADDR_VAR 0 47
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: LD_INT 0
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: LD_INT 1
62074: NEG
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 1
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 1
62112: NEG
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 1
62123: NEG
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: PUSH
62137: LD_INT 2
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: LD_INT 2
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 1
62158: PUSH
62159: LD_INT 1
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 2
62169: NEG
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 2
62181: NEG
62182: PUSH
62183: LD_INT 2
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62205: LD_ADDR_VAR 0 48
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: LD_INT 1
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 1
62274: NEG
62275: PUSH
62276: LD_INT 1
62278: NEG
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: LD_INT 2
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 1
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 2
62320: PUSH
62321: LD_INT 0
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 2
62330: PUSH
62331: LD_INT 1
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62352: LD_ADDR_VAR 0 49
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: LD_INT 1
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 0
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 1
62410: NEG
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 1
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 2
62444: PUSH
62445: LD_INT 0
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 2
62454: PUSH
62455: LD_INT 1
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 2
62464: PUSH
62465: LD_INT 2
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 1
62474: PUSH
62475: LD_INT 2
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62496: LD_ADDR_VAR 0 50
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 0
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: LD_INT 0
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 0
62544: PUSH
62545: LD_INT 1
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 1
62554: NEG
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 1
62565: NEG
62566: PUSH
62567: LD_INT 1
62569: NEG
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 2
62577: PUSH
62578: LD_INT 1
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 2
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 1
62597: PUSH
62598: LD_INT 2
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 0
62607: PUSH
62608: LD_INT 2
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 1
62617: NEG
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62640: LD_ADDR_VAR 0 51
62644: PUSH
62645: LD_INT 0
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 1
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: LD_INT 1
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 0
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 1
62698: NEG
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 1
62709: NEG
62710: PUSH
62711: LD_INT 1
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: LD_INT 2
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 2
62752: NEG
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 2
62763: NEG
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62787: LD_ADDR_VAR 0 52
62791: PUSH
62792: LD_INT 0
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: LD_INT 1
62807: NEG
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 1
62815: PUSH
62816: LD_INT 0
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 1
62825: PUSH
62826: LD_INT 1
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: LD_INT 1
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 1
62845: NEG
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: LD_INT 1
62860: NEG
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: PUSH
62866: LD_INT 1
62868: NEG
62869: PUSH
62870: LD_INT 2
62872: NEG
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 1
62880: NEG
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 2
62891: NEG
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 2
62902: NEG
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 2
62914: NEG
62915: PUSH
62916: LD_INT 2
62918: NEG
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62938: LD_ADDR_VAR 0 53
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: LD_INT 1
62958: NEG
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: LD_INT 0
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 1
62976: PUSH
62977: LD_INT 1
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: LD_INT 1
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 1
62996: NEG
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 1
63007: NEG
63008: PUSH
63009: LD_INT 1
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: LD_INT 2
63023: NEG
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: LD_INT 2
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 1
63042: PUSH
63043: LD_INT 1
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 2
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 2
63063: PUSH
63064: LD_INT 1
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 2
63073: PUSH
63074: LD_INT 2
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: LD_INT 2
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: PUSH
63091: LD_INT 0
63093: PUSH
63094: LD_INT 2
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 2
63114: NEG
63115: PUSH
63116: LD_INT 0
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 2
63125: NEG
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 2
63137: NEG
63138: PUSH
63139: LD_INT 2
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63168: LD_ADDR_VAR 0 54
63172: PUSH
63173: LD_INT 0
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: LD_INT 1
63188: NEG
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: LD_INT 0
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 1
63206: PUSH
63207: LD_INT 1
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: LD_INT 1
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: NEG
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: PUSH
63239: LD_INT 1
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 1
63249: NEG
63250: PUSH
63251: LD_INT 2
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 0
63261: PUSH
63262: LD_INT 2
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 1
63272: PUSH
63273: LD_INT 1
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 2
63283: PUSH
63284: LD_INT 0
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 2
63293: PUSH
63294: LD_INT 1
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 2
63303: PUSH
63304: LD_INT 2
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: LD_INT 2
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 0
63323: PUSH
63324: LD_INT 2
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: LD_INT 1
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 2
63344: NEG
63345: PUSH
63346: LD_INT 0
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 2
63355: NEG
63356: PUSH
63357: LD_INT 1
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 2
63367: NEG
63368: PUSH
63369: LD_INT 2
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63398: LD_ADDR_VAR 0 55
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: LD_INT 1
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 1
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 1
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 0
63446: PUSH
63447: LD_INT 1
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 1
63456: NEG
63457: PUSH
63458: LD_INT 0
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 1
63467: NEG
63468: PUSH
63469: LD_INT 1
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: NEG
63480: PUSH
63481: LD_INT 2
63483: NEG
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: LD_INT 2
63494: NEG
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 1
63502: PUSH
63503: LD_INT 1
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 2
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 2
63523: PUSH
63524: LD_INT 1
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 2
63533: PUSH
63534: LD_INT 2
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 1
63543: PUSH
63544: LD_INT 2
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 0
63553: PUSH
63554: LD_INT 2
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 1
63563: NEG
63564: PUSH
63565: LD_INT 1
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 2
63574: NEG
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 2
63585: NEG
63586: PUSH
63587: LD_INT 1
63589: NEG
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 2
63597: NEG
63598: PUSH
63599: LD_INT 2
63601: NEG
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63628: LD_ADDR_VAR 0 56
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: LD_INT 1
63648: NEG
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 1
63656: PUSH
63657: LD_INT 0
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 1
63666: PUSH
63667: LD_INT 1
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 0
63676: PUSH
63677: LD_INT 1
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 1
63686: NEG
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 1
63697: NEG
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 1
63709: NEG
63710: PUSH
63711: LD_INT 2
63713: NEG
63714: PUSH
63715: EMPTY
63716: LIST
63717: LIST
63718: PUSH
63719: LD_INT 0
63721: PUSH
63722: LD_INT 2
63724: NEG
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 1
63732: PUSH
63733: LD_INT 1
63735: NEG
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 2
63743: PUSH
63744: LD_INT 0
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 2
63753: PUSH
63754: LD_INT 1
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: LD_INT 2
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 1
63773: PUSH
63774: LD_INT 2
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 0
63783: PUSH
63784: LD_INT 2
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 2
63804: NEG
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 2
63815: NEG
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 2
63827: NEG
63828: PUSH
63829: LD_INT 2
63831: NEG
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63858: LD_ADDR_VAR 0 57
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: LD_INT 0
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: LD_INT 1
63878: NEG
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 1
63896: PUSH
63897: LD_INT 1
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: LD_INT 1
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 1
63927: NEG
63928: PUSH
63929: LD_INT 1
63931: NEG
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: PUSH
63941: LD_INT 2
63943: NEG
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 0
63951: PUSH
63952: LD_INT 2
63954: NEG
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 1
63962: PUSH
63963: LD_INT 1
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 2
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 2
63983: PUSH
63984: LD_INT 1
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 2
63993: PUSH
63994: LD_INT 2
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 1
64003: PUSH
64004: LD_INT 2
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 0
64013: PUSH
64014: LD_INT 2
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 1
64023: NEG
64024: PUSH
64025: LD_INT 1
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 2
64034: NEG
64035: PUSH
64036: LD_INT 0
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 2
64045: NEG
64046: PUSH
64047: LD_INT 1
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 2
64057: NEG
64058: PUSH
64059: LD_INT 2
64061: NEG
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64088: LD_ADDR_VAR 0 58
64092: PUSH
64093: LD_INT 0
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 0
64105: PUSH
64106: LD_INT 1
64108: NEG
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 1
64116: PUSH
64117: LD_INT 0
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 1
64126: PUSH
64127: LD_INT 1
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: LD_INT 1
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 1
64146: NEG
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 1
64157: NEG
64158: PUSH
64159: LD_INT 1
64161: NEG
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_INT 1
64169: NEG
64170: PUSH
64171: LD_INT 2
64173: NEG
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 0
64181: PUSH
64182: LD_INT 2
64184: NEG
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 1
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 2
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 2
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 2
64223: PUSH
64224: LD_INT 2
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: LD_INT 2
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 0
64243: PUSH
64244: LD_INT 2
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 1
64253: NEG
64254: PUSH
64255: LD_INT 1
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 2
64264: NEG
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 2
64275: NEG
64276: PUSH
64277: LD_INT 1
64279: NEG
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 2
64287: NEG
64288: PUSH
64289: LD_INT 2
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64318: LD_ADDR_VAR 0 59
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: LD_INT 1
64338: NEG
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 1
64346: PUSH
64347: LD_INT 0
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 1
64356: PUSH
64357: LD_INT 1
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 0
64366: PUSH
64367: LD_INT 1
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 1
64376: NEG
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 1
64387: NEG
64388: PUSH
64389: LD_INT 1
64391: NEG
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64406: LD_ADDR_VAR 0 60
64410: PUSH
64411: LD_INT 0
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 1
64434: PUSH
64435: LD_INT 0
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 1
64444: PUSH
64445: LD_INT 1
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: LD_INT 1
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 1
64464: NEG
64465: PUSH
64466: LD_INT 0
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64494: LD_ADDR_VAR 0 61
64498: PUSH
64499: LD_INT 0
64501: PUSH
64502: LD_INT 0
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 0
64511: PUSH
64512: LD_INT 1
64514: NEG
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 1
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 1
64532: PUSH
64533: LD_INT 1
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 0
64542: PUSH
64543: LD_INT 1
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 1
64552: NEG
64553: PUSH
64554: LD_INT 0
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 1
64563: NEG
64564: PUSH
64565: LD_INT 1
64567: NEG
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64582: LD_ADDR_VAR 0 62
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: LD_INT 0
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: LD_INT 1
64602: NEG
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 1
64610: PUSH
64611: LD_INT 0
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: PUSH
64621: LD_INT 1
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: LD_INT 1
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 1
64640: NEG
64641: PUSH
64642: LD_INT 0
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: PUSH
64653: LD_INT 1
64655: NEG
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64670: LD_ADDR_VAR 0 63
64674: PUSH
64675: LD_INT 0
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 0
64687: PUSH
64688: LD_INT 1
64690: NEG
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 1
64698: PUSH
64699: LD_INT 0
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: LD_INT 1
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 0
64718: PUSH
64719: LD_INT 1
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 1
64728: NEG
64729: PUSH
64730: LD_INT 0
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 1
64739: NEG
64740: PUSH
64741: LD_INT 1
64743: NEG
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64758: LD_ADDR_VAR 0 64
64762: PUSH
64763: LD_INT 0
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: LD_INT 1
64778: NEG
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 1
64786: PUSH
64787: LD_INT 0
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 1
64796: PUSH
64797: LD_INT 1
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: LD_INT 1
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 1
64816: NEG
64817: PUSH
64818: LD_INT 0
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: LD_INT 1
64831: NEG
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: ST_TO_ADDR
// end ; 1 :
64846: GO 70743
64848: LD_INT 1
64850: DOUBLE
64851: EQUAL
64852: IFTRUE 64856
64854: GO 67479
64856: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64857: LD_ADDR_VAR 0 11
64861: PUSH
64862: LD_INT 1
64864: NEG
64865: PUSH
64866: LD_INT 3
64868: NEG
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 0
64876: PUSH
64877: LD_INT 3
64879: NEG
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 1
64887: PUSH
64888: LD_INT 2
64890: NEG
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: LIST
64900: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64901: LD_ADDR_VAR 0 12
64905: PUSH
64906: LD_INT 2
64908: PUSH
64909: LD_INT 1
64911: NEG
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 3
64919: PUSH
64920: LD_INT 0
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 3
64929: PUSH
64930: LD_INT 1
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: LIST
64941: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64942: LD_ADDR_VAR 0 13
64946: PUSH
64947: LD_INT 3
64949: PUSH
64950: LD_INT 2
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 3
64959: PUSH
64960: LD_INT 3
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 2
64969: PUSH
64970: LD_INT 3
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: LIST
64981: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64982: LD_ADDR_VAR 0 14
64986: PUSH
64987: LD_INT 1
64989: PUSH
64990: LD_INT 3
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: LD_INT 3
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: PUSH
65011: LD_INT 2
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: LIST
65022: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65023: LD_ADDR_VAR 0 15
65027: PUSH
65028: LD_INT 2
65030: NEG
65031: PUSH
65032: LD_INT 1
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 3
65041: NEG
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 3
65052: NEG
65053: PUSH
65054: LD_INT 1
65056: NEG
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: LIST
65066: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65067: LD_ADDR_VAR 0 16
65071: PUSH
65072: LD_INT 2
65074: NEG
65075: PUSH
65076: LD_INT 3
65078: NEG
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 3
65086: NEG
65087: PUSH
65088: LD_INT 2
65090: NEG
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 3
65098: NEG
65099: PUSH
65100: LD_INT 3
65102: NEG
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: LIST
65112: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65113: LD_ADDR_VAR 0 17
65117: PUSH
65118: LD_INT 1
65120: NEG
65121: PUSH
65122: LD_INT 3
65124: NEG
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: LD_INT 3
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: LD_INT 2
65146: NEG
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65157: LD_ADDR_VAR 0 18
65161: PUSH
65162: LD_INT 2
65164: PUSH
65165: LD_INT 1
65167: NEG
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 3
65175: PUSH
65176: LD_INT 0
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 3
65185: PUSH
65186: LD_INT 1
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: LIST
65197: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65198: LD_ADDR_VAR 0 19
65202: PUSH
65203: LD_INT 3
65205: PUSH
65206: LD_INT 2
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 3
65215: PUSH
65216: LD_INT 3
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 2
65225: PUSH
65226: LD_INT 3
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: LIST
65237: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65238: LD_ADDR_VAR 0 20
65242: PUSH
65243: LD_INT 1
65245: PUSH
65246: LD_INT 3
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 0
65255: PUSH
65256: LD_INT 3
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 1
65265: NEG
65266: PUSH
65267: LD_INT 2
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: LIST
65278: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65279: LD_ADDR_VAR 0 21
65283: PUSH
65284: LD_INT 2
65286: NEG
65287: PUSH
65288: LD_INT 1
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 3
65297: NEG
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 3
65308: NEG
65309: PUSH
65310: LD_INT 1
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: LIST
65322: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65323: LD_ADDR_VAR 0 22
65327: PUSH
65328: LD_INT 2
65330: NEG
65331: PUSH
65332: LD_INT 3
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 3
65342: NEG
65343: PUSH
65344: LD_INT 2
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 3
65354: NEG
65355: PUSH
65356: LD_INT 3
65358: NEG
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: LIST
65368: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65369: LD_ADDR_VAR 0 23
65373: PUSH
65374: LD_INT 0
65376: PUSH
65377: LD_INT 3
65379: NEG
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 1
65387: NEG
65388: PUSH
65389: LD_INT 4
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: PUSH
65400: LD_INT 3
65402: NEG
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: LIST
65412: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65413: LD_ADDR_VAR 0 24
65417: PUSH
65418: LD_INT 3
65420: PUSH
65421: LD_INT 0
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 3
65430: PUSH
65431: LD_INT 1
65433: NEG
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 4
65441: PUSH
65442: LD_INT 1
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: LIST
65453: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65454: LD_ADDR_VAR 0 25
65458: PUSH
65459: LD_INT 3
65461: PUSH
65462: LD_INT 3
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 4
65471: PUSH
65472: LD_INT 3
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 3
65481: PUSH
65482: LD_INT 4
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: LIST
65493: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65494: LD_ADDR_VAR 0 26
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: LD_INT 3
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 1
65511: PUSH
65512: LD_INT 4
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: LD_INT 3
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: LIST
65534: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65535: LD_ADDR_VAR 0 27
65539: PUSH
65540: LD_INT 3
65542: NEG
65543: PUSH
65544: LD_INT 0
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 3
65553: NEG
65554: PUSH
65555: LD_INT 1
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 4
65564: NEG
65565: PUSH
65566: LD_INT 1
65568: NEG
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: LIST
65578: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65579: LD_ADDR_VAR 0 28
65583: PUSH
65584: LD_INT 3
65586: NEG
65587: PUSH
65588: LD_INT 3
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 3
65598: NEG
65599: PUSH
65600: LD_INT 4
65602: NEG
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 4
65610: NEG
65611: PUSH
65612: LD_INT 3
65614: NEG
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: LIST
65624: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65625: LD_ADDR_VAR 0 29
65629: PUSH
65630: LD_INT 1
65632: NEG
65633: PUSH
65634: LD_INT 3
65636: NEG
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 0
65644: PUSH
65645: LD_INT 3
65647: NEG
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 1
65655: PUSH
65656: LD_INT 2
65658: NEG
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 1
65666: NEG
65667: PUSH
65668: LD_INT 4
65670: NEG
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 0
65678: PUSH
65679: LD_INT 4
65681: NEG
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 1
65689: PUSH
65690: LD_INT 3
65692: NEG
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 1
65700: NEG
65701: PUSH
65702: LD_INT 5
65704: NEG
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 0
65712: PUSH
65713: LD_INT 5
65715: NEG
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 1
65723: PUSH
65724: LD_INT 4
65726: NEG
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 1
65734: NEG
65735: PUSH
65736: LD_INT 6
65738: NEG
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 0
65746: PUSH
65747: LD_INT 6
65749: NEG
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 1
65757: PUSH
65758: LD_INT 5
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65780: LD_ADDR_VAR 0 30
65784: PUSH
65785: LD_INT 2
65787: PUSH
65788: LD_INT 1
65790: NEG
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 3
65798: PUSH
65799: LD_INT 0
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 3
65808: PUSH
65809: LD_INT 1
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 3
65818: PUSH
65819: LD_INT 1
65821: NEG
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 4
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 4
65839: PUSH
65840: LD_INT 1
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 4
65849: PUSH
65850: LD_INT 1
65852: NEG
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 5
65860: PUSH
65861: LD_INT 0
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 5
65870: PUSH
65871: LD_INT 1
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 5
65880: PUSH
65881: LD_INT 1
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 6
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 6
65901: PUSH
65902: LD_INT 1
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65923: LD_ADDR_VAR 0 31
65927: PUSH
65928: LD_INT 3
65930: PUSH
65931: LD_INT 2
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 3
65940: PUSH
65941: LD_INT 3
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 2
65950: PUSH
65951: LD_INT 3
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 4
65960: PUSH
65961: LD_INT 3
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 4
65970: PUSH
65971: LD_INT 4
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 3
65980: PUSH
65981: LD_INT 4
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 5
65990: PUSH
65991: LD_INT 4
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 5
66000: PUSH
66001: LD_INT 5
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 4
66010: PUSH
66011: LD_INT 5
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 6
66020: PUSH
66021: LD_INT 5
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 6
66030: PUSH
66031: LD_INT 6
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 5
66040: PUSH
66041: LD_INT 6
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66062: LD_ADDR_VAR 0 32
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: LD_INT 3
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: LD_INT 3
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 1
66089: NEG
66090: PUSH
66091: LD_INT 2
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 1
66100: PUSH
66101: LD_INT 4
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 0
66110: PUSH
66111: LD_INT 4
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 1
66120: NEG
66121: PUSH
66122: LD_INT 3
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 1
66131: PUSH
66132: LD_INT 5
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 0
66141: PUSH
66142: LD_INT 5
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 1
66151: NEG
66152: PUSH
66153: LD_INT 4
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 1
66162: PUSH
66163: LD_INT 6
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: LD_INT 6
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 1
66182: NEG
66183: PUSH
66184: LD_INT 5
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66205: LD_ADDR_VAR 0 33
66209: PUSH
66210: LD_INT 2
66212: NEG
66213: PUSH
66214: LD_INT 1
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 3
66223: NEG
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 3
66234: NEG
66235: PUSH
66236: LD_INT 1
66238: NEG
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 3
66246: NEG
66247: PUSH
66248: LD_INT 1
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 4
66257: NEG
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 4
66268: NEG
66269: PUSH
66270: LD_INT 1
66272: NEG
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 4
66280: NEG
66281: PUSH
66282: LD_INT 1
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 5
66291: NEG
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 5
66302: NEG
66303: PUSH
66304: LD_INT 1
66306: NEG
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 5
66314: NEG
66315: PUSH
66316: LD_INT 1
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 6
66325: NEG
66326: PUSH
66327: LD_INT 0
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 6
66336: NEG
66337: PUSH
66338: LD_INT 1
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66360: LD_ADDR_VAR 0 34
66364: PUSH
66365: LD_INT 2
66367: NEG
66368: PUSH
66369: LD_INT 3
66371: NEG
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 3
66379: NEG
66380: PUSH
66381: LD_INT 2
66383: NEG
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 3
66391: NEG
66392: PUSH
66393: LD_INT 3
66395: NEG
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 3
66403: NEG
66404: PUSH
66405: LD_INT 4
66407: NEG
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 4
66415: NEG
66416: PUSH
66417: LD_INT 3
66419: NEG
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 4
66427: NEG
66428: PUSH
66429: LD_INT 4
66431: NEG
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: PUSH
66437: LD_INT 4
66439: NEG
66440: PUSH
66441: LD_INT 5
66443: NEG
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 5
66451: NEG
66452: PUSH
66453: LD_INT 4
66455: NEG
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 5
66463: NEG
66464: PUSH
66465: LD_INT 5
66467: NEG
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 5
66475: NEG
66476: PUSH
66477: LD_INT 6
66479: NEG
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 6
66487: NEG
66488: PUSH
66489: LD_INT 5
66491: NEG
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 6
66499: NEG
66500: PUSH
66501: LD_INT 6
66503: NEG
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66523: LD_ADDR_VAR 0 41
66527: PUSH
66528: LD_INT 0
66530: PUSH
66531: LD_INT 2
66533: NEG
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 1
66541: NEG
66542: PUSH
66543: LD_INT 3
66545: NEG
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 1
66553: PUSH
66554: LD_INT 2
66556: NEG
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: LIST
66566: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66567: LD_ADDR_VAR 0 42
66571: PUSH
66572: LD_INT 2
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 2
66584: PUSH
66585: LD_INT 1
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 3
66595: PUSH
66596: LD_INT 1
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: LIST
66607: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66608: LD_ADDR_VAR 0 43
66612: PUSH
66613: LD_INT 2
66615: PUSH
66616: LD_INT 2
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 3
66625: PUSH
66626: LD_INT 2
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 2
66635: PUSH
66636: LD_INT 3
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: LIST
66647: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66648: LD_ADDR_VAR 0 44
66652: PUSH
66653: LD_INT 0
66655: PUSH
66656: LD_INT 2
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 1
66665: PUSH
66666: LD_INT 3
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 1
66675: NEG
66676: PUSH
66677: LD_INT 2
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: LIST
66688: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66689: LD_ADDR_VAR 0 45
66693: PUSH
66694: LD_INT 2
66696: NEG
66697: PUSH
66698: LD_INT 0
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 2
66707: NEG
66708: PUSH
66709: LD_INT 1
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 3
66718: NEG
66719: PUSH
66720: LD_INT 1
66722: NEG
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: LIST
66732: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66733: LD_ADDR_VAR 0 46
66737: PUSH
66738: LD_INT 2
66740: NEG
66741: PUSH
66742: LD_INT 2
66744: NEG
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 2
66752: NEG
66753: PUSH
66754: LD_INT 3
66756: NEG
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 3
66764: NEG
66765: PUSH
66766: LD_INT 2
66768: NEG
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: LIST
66778: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66779: LD_ADDR_VAR 0 47
66783: PUSH
66784: LD_INT 2
66786: NEG
66787: PUSH
66788: LD_INT 3
66790: NEG
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 1
66798: NEG
66799: PUSH
66800: LD_INT 3
66802: NEG
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66812: LD_ADDR_VAR 0 48
66816: PUSH
66817: LD_INT 1
66819: PUSH
66820: LD_INT 2
66822: NEG
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 2
66830: PUSH
66831: LD_INT 1
66833: NEG
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66843: LD_ADDR_VAR 0 49
66847: PUSH
66848: LD_INT 3
66850: PUSH
66851: LD_INT 1
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 3
66860: PUSH
66861: LD_INT 2
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66872: LD_ADDR_VAR 0 50
66876: PUSH
66877: LD_INT 2
66879: PUSH
66880: LD_INT 3
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 1
66889: PUSH
66890: LD_INT 3
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66901: LD_ADDR_VAR 0 51
66905: PUSH
66906: LD_INT 1
66908: NEG
66909: PUSH
66910: LD_INT 2
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 2
66919: NEG
66920: PUSH
66921: LD_INT 1
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66932: LD_ADDR_VAR 0 52
66936: PUSH
66937: LD_INT 3
66939: NEG
66940: PUSH
66941: LD_INT 1
66943: NEG
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 3
66951: NEG
66952: PUSH
66953: LD_INT 2
66955: NEG
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66965: LD_ADDR_VAR 0 53
66969: PUSH
66970: LD_INT 1
66972: NEG
66973: PUSH
66974: LD_INT 3
66976: NEG
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 0
66984: PUSH
66985: LD_INT 3
66987: NEG
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 1
66995: PUSH
66996: LD_INT 2
66998: NEG
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: LIST
67008: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67009: LD_ADDR_VAR 0 54
67013: PUSH
67014: LD_INT 2
67016: PUSH
67017: LD_INT 1
67019: NEG
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 3
67027: PUSH
67028: LD_INT 0
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 3
67037: PUSH
67038: LD_INT 1
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: LIST
67049: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67050: LD_ADDR_VAR 0 55
67054: PUSH
67055: LD_INT 3
67057: PUSH
67058: LD_INT 2
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 3
67067: PUSH
67068: LD_INT 3
67070: PUSH
67071: EMPTY
67072: LIST
67073: LIST
67074: PUSH
67075: LD_INT 2
67077: PUSH
67078: LD_INT 3
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: LIST
67089: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67090: LD_ADDR_VAR 0 56
67094: PUSH
67095: LD_INT 1
67097: PUSH
67098: LD_INT 3
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 0
67107: PUSH
67108: LD_INT 3
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 1
67117: NEG
67118: PUSH
67119: LD_INT 2
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: LIST
67130: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67131: LD_ADDR_VAR 0 57
67135: PUSH
67136: LD_INT 2
67138: NEG
67139: PUSH
67140: LD_INT 1
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 3
67149: NEG
67150: PUSH
67151: LD_INT 0
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 3
67160: NEG
67161: PUSH
67162: LD_INT 1
67164: NEG
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: LIST
67174: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67175: LD_ADDR_VAR 0 58
67179: PUSH
67180: LD_INT 2
67182: NEG
67183: PUSH
67184: LD_INT 3
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 3
67194: NEG
67195: PUSH
67196: LD_INT 2
67198: NEG
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 3
67206: NEG
67207: PUSH
67208: LD_INT 3
67210: NEG
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: LIST
67220: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67221: LD_ADDR_VAR 0 59
67225: PUSH
67226: LD_INT 1
67228: NEG
67229: PUSH
67230: LD_INT 2
67232: NEG
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 0
67240: PUSH
67241: LD_INT 2
67243: NEG
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 1
67251: PUSH
67252: LD_INT 1
67254: NEG
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: LIST
67264: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67265: LD_ADDR_VAR 0 60
67269: PUSH
67270: LD_INT 1
67272: PUSH
67273: LD_INT 1
67275: NEG
67276: PUSH
67277: EMPTY
67278: LIST
67279: LIST
67280: PUSH
67281: LD_INT 2
67283: PUSH
67284: LD_INT 0
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: LD_INT 2
67293: PUSH
67294: LD_INT 1
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: LIST
67305: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67306: LD_ADDR_VAR 0 61
67310: PUSH
67311: LD_INT 2
67313: PUSH
67314: LD_INT 1
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 2
67323: PUSH
67324: LD_INT 2
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 1
67333: PUSH
67334: LD_INT 2
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: LIST
67345: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67346: LD_ADDR_VAR 0 62
67350: PUSH
67351: LD_INT 1
67353: PUSH
67354: LD_INT 2
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 0
67363: PUSH
67364: LD_INT 2
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 1
67373: NEG
67374: PUSH
67375: LD_INT 1
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: LIST
67386: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67387: LD_ADDR_VAR 0 63
67391: PUSH
67392: LD_INT 1
67394: NEG
67395: PUSH
67396: LD_INT 1
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 2
67405: NEG
67406: PUSH
67407: LD_INT 0
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 2
67416: NEG
67417: PUSH
67418: LD_INT 1
67420: NEG
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: LIST
67430: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67431: LD_ADDR_VAR 0 64
67435: PUSH
67436: LD_INT 1
67438: NEG
67439: PUSH
67440: LD_INT 2
67442: NEG
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 2
67450: NEG
67451: PUSH
67452: LD_INT 1
67454: NEG
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 2
67462: NEG
67463: PUSH
67464: LD_INT 2
67466: NEG
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: LIST
67476: ST_TO_ADDR
// end ; 2 :
67477: GO 70743
67479: LD_INT 2
67481: DOUBLE
67482: EQUAL
67483: IFTRUE 67487
67485: GO 70742
67487: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67488: LD_ADDR_VAR 0 29
67492: PUSH
67493: LD_INT 4
67495: PUSH
67496: LD_INT 0
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 4
67505: PUSH
67506: LD_INT 1
67508: NEG
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 5
67516: PUSH
67517: LD_INT 0
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 5
67526: PUSH
67527: LD_INT 1
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 4
67536: PUSH
67537: LD_INT 1
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: PUSH
67544: LD_INT 3
67546: PUSH
67547: LD_INT 0
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 3
67556: PUSH
67557: LD_INT 1
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 3
67567: PUSH
67568: LD_INT 2
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 5
67578: PUSH
67579: LD_INT 2
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 3
67588: PUSH
67589: LD_INT 3
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 3
67598: PUSH
67599: LD_INT 2
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 4
67608: PUSH
67609: LD_INT 3
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 4
67618: PUSH
67619: LD_INT 4
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 3
67628: PUSH
67629: LD_INT 4
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 2
67638: PUSH
67639: LD_INT 3
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 2
67648: PUSH
67649: LD_INT 2
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 4
67658: PUSH
67659: LD_INT 2
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 2
67668: PUSH
67669: LD_INT 4
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 0
67678: PUSH
67679: LD_INT 4
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 0
67688: PUSH
67689: LD_INT 3
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 1
67698: PUSH
67699: LD_INT 4
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 1
67708: PUSH
67709: LD_INT 5
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 0
67718: PUSH
67719: LD_INT 5
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 1
67728: NEG
67729: PUSH
67730: LD_INT 4
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 1
67739: NEG
67740: PUSH
67741: LD_INT 3
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 2
67750: PUSH
67751: LD_INT 5
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 2
67760: NEG
67761: PUSH
67762: LD_INT 3
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 3
67771: NEG
67772: PUSH
67773: LD_INT 0
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 3
67782: NEG
67783: PUSH
67784: LD_INT 1
67786: NEG
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 2
67794: NEG
67795: PUSH
67796: LD_INT 0
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 2
67805: NEG
67806: PUSH
67807: LD_INT 1
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 3
67816: NEG
67817: PUSH
67818: LD_INT 1
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 4
67827: NEG
67828: PUSH
67829: LD_INT 0
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 4
67838: NEG
67839: PUSH
67840: LD_INT 1
67842: NEG
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 4
67850: NEG
67851: PUSH
67852: LD_INT 2
67854: NEG
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 2
67862: NEG
67863: PUSH
67864: LD_INT 2
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: LD_INT 4
67873: NEG
67874: PUSH
67875: LD_INT 4
67877: NEG
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 4
67885: NEG
67886: PUSH
67887: LD_INT 5
67889: NEG
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 3
67897: NEG
67898: PUSH
67899: LD_INT 4
67901: NEG
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 3
67909: NEG
67910: PUSH
67911: LD_INT 3
67913: NEG
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 4
67921: NEG
67922: PUSH
67923: LD_INT 3
67925: NEG
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 5
67933: NEG
67934: PUSH
67935: LD_INT 4
67937: NEG
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 5
67945: NEG
67946: PUSH
67947: LD_INT 5
67949: NEG
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 3
67957: NEG
67958: PUSH
67959: LD_INT 5
67961: NEG
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 5
67969: NEG
67970: PUSH
67971: LD_INT 3
67973: NEG
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68026: LD_ADDR_VAR 0 30
68030: PUSH
68031: LD_INT 4
68033: PUSH
68034: LD_INT 4
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 4
68043: PUSH
68044: LD_INT 3
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 5
68053: PUSH
68054: LD_INT 4
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 5
68063: PUSH
68064: LD_INT 5
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 4
68073: PUSH
68074: LD_INT 5
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 3
68083: PUSH
68084: LD_INT 4
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 3
68093: PUSH
68094: LD_INT 3
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 5
68103: PUSH
68104: LD_INT 3
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 3
68113: PUSH
68114: LD_INT 5
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 0
68123: PUSH
68124: LD_INT 3
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 0
68133: PUSH
68134: LD_INT 2
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 1
68143: PUSH
68144: LD_INT 3
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 1
68153: PUSH
68154: LD_INT 4
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 0
68163: PUSH
68164: LD_INT 4
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 1
68173: NEG
68174: PUSH
68175: LD_INT 3
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 1
68184: NEG
68185: PUSH
68186: LD_INT 2
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 2
68195: PUSH
68196: LD_INT 4
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 2
68205: NEG
68206: PUSH
68207: LD_INT 2
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 4
68216: NEG
68217: PUSH
68218: LD_INT 0
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 4
68227: NEG
68228: PUSH
68229: LD_INT 1
68231: NEG
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 3
68239: NEG
68240: PUSH
68241: LD_INT 0
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 3
68250: NEG
68251: PUSH
68252: LD_INT 1
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 4
68261: NEG
68262: PUSH
68263: LD_INT 1
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 5
68272: NEG
68273: PUSH
68274: LD_INT 0
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 5
68283: NEG
68284: PUSH
68285: LD_INT 1
68287: NEG
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 5
68295: NEG
68296: PUSH
68297: LD_INT 2
68299: NEG
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_INT 3
68307: NEG
68308: PUSH
68309: LD_INT 2
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 3
68318: NEG
68319: PUSH
68320: LD_INT 3
68322: NEG
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 3
68330: NEG
68331: PUSH
68332: LD_INT 4
68334: NEG
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 2
68342: NEG
68343: PUSH
68344: LD_INT 3
68346: NEG
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 2
68354: NEG
68355: PUSH
68356: LD_INT 2
68358: NEG
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 3
68366: NEG
68367: PUSH
68368: LD_INT 2
68370: NEG
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 4
68378: NEG
68379: PUSH
68380: LD_INT 3
68382: NEG
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 4
68390: NEG
68391: PUSH
68392: LD_INT 4
68394: NEG
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 2
68402: NEG
68403: PUSH
68404: LD_INT 4
68406: NEG
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 4
68414: NEG
68415: PUSH
68416: LD_INT 2
68418: NEG
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 0
68426: PUSH
68427: LD_INT 4
68429: NEG
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 0
68437: PUSH
68438: LD_INT 5
68440: NEG
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 1
68448: PUSH
68449: LD_INT 4
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 1
68459: PUSH
68460: LD_INT 3
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 0
68470: PUSH
68471: LD_INT 3
68473: NEG
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 1
68481: NEG
68482: PUSH
68483: LD_INT 4
68485: NEG
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 1
68493: NEG
68494: PUSH
68495: LD_INT 5
68497: NEG
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 2
68505: PUSH
68506: LD_INT 3
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 2
68516: NEG
68517: PUSH
68518: LD_INT 5
68520: NEG
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68573: LD_ADDR_VAR 0 31
68577: PUSH
68578: LD_INT 0
68580: PUSH
68581: LD_INT 4
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 0
68590: PUSH
68591: LD_INT 3
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 1
68600: PUSH
68601: LD_INT 4
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 1
68610: PUSH
68611: LD_INT 5
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 0
68620: PUSH
68621: LD_INT 5
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 1
68630: NEG
68631: PUSH
68632: LD_INT 4
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 1
68641: NEG
68642: PUSH
68643: LD_INT 3
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 2
68652: PUSH
68653: LD_INT 5
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 2
68662: NEG
68663: PUSH
68664: LD_INT 3
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 3
68673: NEG
68674: PUSH
68675: LD_INT 0
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 3
68684: NEG
68685: PUSH
68686: LD_INT 1
68688: NEG
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 2
68696: NEG
68697: PUSH
68698: LD_INT 0
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 2
68707: NEG
68708: PUSH
68709: LD_INT 1
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 3
68718: NEG
68719: PUSH
68720: LD_INT 1
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 4
68729: NEG
68730: PUSH
68731: LD_INT 0
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 4
68740: NEG
68741: PUSH
68742: LD_INT 1
68744: NEG
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 4
68752: NEG
68753: PUSH
68754: LD_INT 2
68756: NEG
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: LD_INT 2
68764: NEG
68765: PUSH
68766: LD_INT 2
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 4
68775: NEG
68776: PUSH
68777: LD_INT 4
68779: NEG
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 4
68787: NEG
68788: PUSH
68789: LD_INT 5
68791: NEG
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 3
68799: NEG
68800: PUSH
68801: LD_INT 4
68803: NEG
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 3
68811: NEG
68812: PUSH
68813: LD_INT 3
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 4
68823: NEG
68824: PUSH
68825: LD_INT 3
68827: NEG
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 5
68835: NEG
68836: PUSH
68837: LD_INT 4
68839: NEG
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 5
68847: NEG
68848: PUSH
68849: LD_INT 5
68851: NEG
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 3
68859: NEG
68860: PUSH
68861: LD_INT 5
68863: NEG
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 5
68871: NEG
68872: PUSH
68873: LD_INT 3
68875: NEG
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 0
68883: PUSH
68884: LD_INT 3
68886: NEG
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 0
68894: PUSH
68895: LD_INT 4
68897: NEG
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 1
68905: PUSH
68906: LD_INT 3
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 1
68916: PUSH
68917: LD_INT 2
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 0
68927: PUSH
68928: LD_INT 2
68930: NEG
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 1
68938: NEG
68939: PUSH
68940: LD_INT 3
68942: NEG
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 1
68950: NEG
68951: PUSH
68952: LD_INT 4
68954: NEG
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 2
68962: PUSH
68963: LD_INT 2
68965: NEG
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 2
68973: NEG
68974: PUSH
68975: LD_INT 4
68977: NEG
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 4
68985: PUSH
68986: LD_INT 0
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 4
68995: PUSH
68996: LD_INT 1
68998: NEG
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 5
69006: PUSH
69007: LD_INT 0
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 5
69016: PUSH
69017: LD_INT 1
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 4
69026: PUSH
69027: LD_INT 1
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 3
69036: PUSH
69037: LD_INT 0
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 3
69046: PUSH
69047: LD_INT 1
69049: NEG
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 3
69057: PUSH
69058: LD_INT 2
69060: NEG
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 5
69068: PUSH
69069: LD_INT 2
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69123: LD_ADDR_VAR 0 32
69127: PUSH
69128: LD_INT 4
69130: NEG
69131: PUSH
69132: LD_INT 0
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 4
69141: NEG
69142: PUSH
69143: LD_INT 1
69145: NEG
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 3
69153: NEG
69154: PUSH
69155: LD_INT 0
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 3
69164: NEG
69165: PUSH
69166: LD_INT 1
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 4
69175: NEG
69176: PUSH
69177: LD_INT 1
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 5
69186: NEG
69187: PUSH
69188: LD_INT 0
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 5
69197: NEG
69198: PUSH
69199: LD_INT 1
69201: NEG
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 5
69209: NEG
69210: PUSH
69211: LD_INT 2
69213: NEG
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 3
69221: NEG
69222: PUSH
69223: LD_INT 2
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 3
69232: NEG
69233: PUSH
69234: LD_INT 3
69236: NEG
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 3
69244: NEG
69245: PUSH
69246: LD_INT 4
69248: NEG
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 2
69256: NEG
69257: PUSH
69258: LD_INT 3
69260: NEG
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 2
69268: NEG
69269: PUSH
69270: LD_INT 2
69272: NEG
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 3
69280: NEG
69281: PUSH
69282: LD_INT 2
69284: NEG
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 4
69292: NEG
69293: PUSH
69294: LD_INT 3
69296: NEG
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 4
69304: NEG
69305: PUSH
69306: LD_INT 4
69308: NEG
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 2
69316: NEG
69317: PUSH
69318: LD_INT 4
69320: NEG
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 4
69328: NEG
69329: PUSH
69330: LD_INT 2
69332: NEG
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 0
69340: PUSH
69341: LD_INT 4
69343: NEG
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 0
69351: PUSH
69352: LD_INT 5
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 1
69362: PUSH
69363: LD_INT 4
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 1
69373: PUSH
69374: LD_INT 3
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 0
69384: PUSH
69385: LD_INT 3
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 1
69395: NEG
69396: PUSH
69397: LD_INT 4
69399: NEG
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: LD_INT 1
69407: NEG
69408: PUSH
69409: LD_INT 5
69411: NEG
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 2
69419: PUSH
69420: LD_INT 3
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 2
69430: NEG
69431: PUSH
69432: LD_INT 5
69434: NEG
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 3
69442: PUSH
69443: LD_INT 0
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 3
69452: PUSH
69453: LD_INT 1
69455: NEG
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 4
69463: PUSH
69464: LD_INT 0
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 4
69473: PUSH
69474: LD_INT 1
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: PUSH
69481: LD_INT 3
69483: PUSH
69484: LD_INT 1
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 2
69493: PUSH
69494: LD_INT 0
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 2
69503: PUSH
69504: LD_INT 1
69506: NEG
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 2
69514: PUSH
69515: LD_INT 2
69517: NEG
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 4
69525: PUSH
69526: LD_INT 2
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 4
69535: PUSH
69536: LD_INT 4
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 4
69545: PUSH
69546: LD_INT 3
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 5
69555: PUSH
69556: LD_INT 4
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 5
69565: PUSH
69566: LD_INT 5
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 4
69575: PUSH
69576: LD_INT 5
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 3
69585: PUSH
69586: LD_INT 4
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: PUSH
69593: LD_INT 3
69595: PUSH
69596: LD_INT 3
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 5
69605: PUSH
69606: LD_INT 3
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 3
69615: PUSH
69616: LD_INT 5
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: LIST
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69670: LD_ADDR_VAR 0 33
69674: PUSH
69675: LD_INT 4
69677: NEG
69678: PUSH
69679: LD_INT 4
69681: NEG
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 4
69689: NEG
69690: PUSH
69691: LD_INT 5
69693: NEG
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 3
69701: NEG
69702: PUSH
69703: LD_INT 4
69705: NEG
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 3
69713: NEG
69714: PUSH
69715: LD_INT 3
69717: NEG
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 4
69725: NEG
69726: PUSH
69727: LD_INT 3
69729: NEG
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 5
69737: NEG
69738: PUSH
69739: LD_INT 4
69741: NEG
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 5
69749: NEG
69750: PUSH
69751: LD_INT 5
69753: NEG
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 3
69761: NEG
69762: PUSH
69763: LD_INT 5
69765: NEG
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 5
69773: NEG
69774: PUSH
69775: LD_INT 3
69777: NEG
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 0
69785: PUSH
69786: LD_INT 3
69788: NEG
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 0
69796: PUSH
69797: LD_INT 4
69799: NEG
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 1
69807: PUSH
69808: LD_INT 3
69810: NEG
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 1
69818: PUSH
69819: LD_INT 2
69821: NEG
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 0
69829: PUSH
69830: LD_INT 2
69832: NEG
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 1
69840: NEG
69841: PUSH
69842: LD_INT 3
69844: NEG
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 1
69852: NEG
69853: PUSH
69854: LD_INT 4
69856: NEG
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 2
69864: PUSH
69865: LD_INT 2
69867: NEG
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 2
69875: NEG
69876: PUSH
69877: LD_INT 4
69879: NEG
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 4
69887: PUSH
69888: LD_INT 0
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 4
69897: PUSH
69898: LD_INT 1
69900: NEG
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 5
69908: PUSH
69909: LD_INT 0
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 5
69918: PUSH
69919: LD_INT 1
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 4
69928: PUSH
69929: LD_INT 1
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 3
69938: PUSH
69939: LD_INT 0
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 3
69948: PUSH
69949: LD_INT 1
69951: NEG
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 3
69959: PUSH
69960: LD_INT 2
69962: NEG
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 5
69970: PUSH
69971: LD_INT 2
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 3
69980: PUSH
69981: LD_INT 3
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 3
69990: PUSH
69991: LD_INT 2
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 4
70000: PUSH
70001: LD_INT 3
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 4
70010: PUSH
70011: LD_INT 4
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 3
70020: PUSH
70021: LD_INT 4
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 2
70030: PUSH
70031: LD_INT 3
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 2
70040: PUSH
70041: LD_INT 2
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 4
70050: PUSH
70051: LD_INT 2
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 2
70060: PUSH
70061: LD_INT 4
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 0
70070: PUSH
70071: LD_INT 4
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 0
70080: PUSH
70081: LD_INT 3
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 1
70090: PUSH
70091: LD_INT 4
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 1
70100: PUSH
70101: LD_INT 5
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 0
70110: PUSH
70111: LD_INT 5
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 1
70120: NEG
70121: PUSH
70122: LD_INT 4
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 1
70131: NEG
70132: PUSH
70133: LD_INT 3
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 2
70142: PUSH
70143: LD_INT 5
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 2
70152: NEG
70153: PUSH
70154: LD_INT 3
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70208: LD_ADDR_VAR 0 34
70212: PUSH
70213: LD_INT 0
70215: PUSH
70216: LD_INT 4
70218: NEG
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 0
70226: PUSH
70227: LD_INT 5
70229: NEG
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 1
70237: PUSH
70238: LD_INT 4
70240: NEG
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 1
70248: PUSH
70249: LD_INT 3
70251: NEG
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 0
70259: PUSH
70260: LD_INT 3
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 1
70270: NEG
70271: PUSH
70272: LD_INT 4
70274: NEG
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 1
70282: NEG
70283: PUSH
70284: LD_INT 5
70286: NEG
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 2
70294: PUSH
70295: LD_INT 3
70297: NEG
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 2
70305: NEG
70306: PUSH
70307: LD_INT 5
70309: NEG
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 3
70317: PUSH
70318: LD_INT 0
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 3
70327: PUSH
70328: LD_INT 1
70330: NEG
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PUSH
70336: LD_INT 4
70338: PUSH
70339: LD_INT 0
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: LD_INT 4
70348: PUSH
70349: LD_INT 1
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 3
70358: PUSH
70359: LD_INT 1
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: LD_INT 2
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: LD_INT 2
70378: PUSH
70379: LD_INT 1
70381: NEG
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 2
70389: PUSH
70390: LD_INT 2
70392: NEG
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 4
70400: PUSH
70401: LD_INT 2
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 4
70410: PUSH
70411: LD_INT 4
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 4
70420: PUSH
70421: LD_INT 3
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 5
70430: PUSH
70431: LD_INT 4
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 5
70440: PUSH
70441: LD_INT 5
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 4
70450: PUSH
70451: LD_INT 5
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 3
70460: PUSH
70461: LD_INT 4
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 3
70470: PUSH
70471: LD_INT 3
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 5
70480: PUSH
70481: LD_INT 3
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 3
70490: PUSH
70491: LD_INT 5
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 0
70500: PUSH
70501: LD_INT 3
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 0
70510: PUSH
70511: LD_INT 2
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 1
70520: PUSH
70521: LD_INT 3
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 1
70530: PUSH
70531: LD_INT 4
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 0
70540: PUSH
70541: LD_INT 4
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: PUSH
70548: LD_INT 1
70550: NEG
70551: PUSH
70552: LD_INT 3
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 1
70561: NEG
70562: PUSH
70563: LD_INT 2
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 2
70572: PUSH
70573: LD_INT 4
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 2
70582: NEG
70583: PUSH
70584: LD_INT 2
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 4
70593: NEG
70594: PUSH
70595: LD_INT 0
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 4
70604: NEG
70605: PUSH
70606: LD_INT 1
70608: NEG
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 3
70616: NEG
70617: PUSH
70618: LD_INT 0
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 3
70627: NEG
70628: PUSH
70629: LD_INT 1
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: PUSH
70636: LD_INT 4
70638: NEG
70639: PUSH
70640: LD_INT 1
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: LD_INT 5
70649: NEG
70650: PUSH
70651: LD_INT 0
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: PUSH
70658: LD_INT 5
70660: NEG
70661: PUSH
70662: LD_INT 1
70664: NEG
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 5
70672: NEG
70673: PUSH
70674: LD_INT 2
70676: NEG
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 3
70684: NEG
70685: PUSH
70686: LD_INT 2
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: ST_TO_ADDR
// end ; end ;
70740: GO 70743
70742: POP
// case btype of b_depot , b_warehouse :
70743: LD_VAR 0 1
70747: PUSH
70748: LD_INT 0
70750: DOUBLE
70751: EQUAL
70752: IFTRUE 70762
70754: LD_INT 1
70756: DOUBLE
70757: EQUAL
70758: IFTRUE 70762
70760: GO 70963
70762: POP
// case nation of nation_american :
70763: LD_VAR 0 5
70767: PUSH
70768: LD_INT 1
70770: DOUBLE
70771: EQUAL
70772: IFTRUE 70776
70774: GO 70832
70776: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70777: LD_ADDR_VAR 0 9
70781: PUSH
70782: LD_VAR 0 11
70786: PUSH
70787: LD_VAR 0 12
70791: PUSH
70792: LD_VAR 0 13
70796: PUSH
70797: LD_VAR 0 14
70801: PUSH
70802: LD_VAR 0 15
70806: PUSH
70807: LD_VAR 0 16
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: PUSH
70820: LD_VAR 0 4
70824: PUSH
70825: LD_INT 1
70827: PLUS
70828: ARRAY
70829: ST_TO_ADDR
70830: GO 70961
70832: LD_INT 2
70834: DOUBLE
70835: EQUAL
70836: IFTRUE 70840
70838: GO 70896
70840: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70841: LD_ADDR_VAR 0 9
70845: PUSH
70846: LD_VAR 0 17
70850: PUSH
70851: LD_VAR 0 18
70855: PUSH
70856: LD_VAR 0 19
70860: PUSH
70861: LD_VAR 0 20
70865: PUSH
70866: LD_VAR 0 21
70870: PUSH
70871: LD_VAR 0 22
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: PUSH
70884: LD_VAR 0 4
70888: PUSH
70889: LD_INT 1
70891: PLUS
70892: ARRAY
70893: ST_TO_ADDR
70894: GO 70961
70896: LD_INT 3
70898: DOUBLE
70899: EQUAL
70900: IFTRUE 70904
70902: GO 70960
70904: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70905: LD_ADDR_VAR 0 9
70909: PUSH
70910: LD_VAR 0 23
70914: PUSH
70915: LD_VAR 0 24
70919: PUSH
70920: LD_VAR 0 25
70924: PUSH
70925: LD_VAR 0 26
70929: PUSH
70930: LD_VAR 0 27
70934: PUSH
70935: LD_VAR 0 28
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: PUSH
70948: LD_VAR 0 4
70952: PUSH
70953: LD_INT 1
70955: PLUS
70956: ARRAY
70957: ST_TO_ADDR
70958: GO 70961
70960: POP
70961: GO 71516
70963: LD_INT 2
70965: DOUBLE
70966: EQUAL
70967: IFTRUE 70977
70969: LD_INT 3
70971: DOUBLE
70972: EQUAL
70973: IFTRUE 70977
70975: GO 71033
70977: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70978: LD_ADDR_VAR 0 9
70982: PUSH
70983: LD_VAR 0 29
70987: PUSH
70988: LD_VAR 0 30
70992: PUSH
70993: LD_VAR 0 31
70997: PUSH
70998: LD_VAR 0 32
71002: PUSH
71003: LD_VAR 0 33
71007: PUSH
71008: LD_VAR 0 34
71012: PUSH
71013: EMPTY
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: PUSH
71021: LD_VAR 0 4
71025: PUSH
71026: LD_INT 1
71028: PLUS
71029: ARRAY
71030: ST_TO_ADDR
71031: GO 71516
71033: LD_INT 16
71035: DOUBLE
71036: EQUAL
71037: IFTRUE 71095
71039: LD_INT 17
71041: DOUBLE
71042: EQUAL
71043: IFTRUE 71095
71045: LD_INT 18
71047: DOUBLE
71048: EQUAL
71049: IFTRUE 71095
71051: LD_INT 19
71053: DOUBLE
71054: EQUAL
71055: IFTRUE 71095
71057: LD_INT 22
71059: DOUBLE
71060: EQUAL
71061: IFTRUE 71095
71063: LD_INT 20
71065: DOUBLE
71066: EQUAL
71067: IFTRUE 71095
71069: LD_INT 21
71071: DOUBLE
71072: EQUAL
71073: IFTRUE 71095
71075: LD_INT 23
71077: DOUBLE
71078: EQUAL
71079: IFTRUE 71095
71081: LD_INT 24
71083: DOUBLE
71084: EQUAL
71085: IFTRUE 71095
71087: LD_INT 25
71089: DOUBLE
71090: EQUAL
71091: IFTRUE 71095
71093: GO 71151
71095: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71096: LD_ADDR_VAR 0 9
71100: PUSH
71101: LD_VAR 0 35
71105: PUSH
71106: LD_VAR 0 36
71110: PUSH
71111: LD_VAR 0 37
71115: PUSH
71116: LD_VAR 0 38
71120: PUSH
71121: LD_VAR 0 39
71125: PUSH
71126: LD_VAR 0 40
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: LIST
71137: LIST
71138: PUSH
71139: LD_VAR 0 4
71143: PUSH
71144: LD_INT 1
71146: PLUS
71147: ARRAY
71148: ST_TO_ADDR
71149: GO 71516
71151: LD_INT 6
71153: DOUBLE
71154: EQUAL
71155: IFTRUE 71207
71157: LD_INT 7
71159: DOUBLE
71160: EQUAL
71161: IFTRUE 71207
71163: LD_INT 8
71165: DOUBLE
71166: EQUAL
71167: IFTRUE 71207
71169: LD_INT 13
71171: DOUBLE
71172: EQUAL
71173: IFTRUE 71207
71175: LD_INT 12
71177: DOUBLE
71178: EQUAL
71179: IFTRUE 71207
71181: LD_INT 15
71183: DOUBLE
71184: EQUAL
71185: IFTRUE 71207
71187: LD_INT 11
71189: DOUBLE
71190: EQUAL
71191: IFTRUE 71207
71193: LD_INT 14
71195: DOUBLE
71196: EQUAL
71197: IFTRUE 71207
71199: LD_INT 10
71201: DOUBLE
71202: EQUAL
71203: IFTRUE 71207
71205: GO 71263
71207: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71208: LD_ADDR_VAR 0 9
71212: PUSH
71213: LD_VAR 0 41
71217: PUSH
71218: LD_VAR 0 42
71222: PUSH
71223: LD_VAR 0 43
71227: PUSH
71228: LD_VAR 0 44
71232: PUSH
71233: LD_VAR 0 45
71237: PUSH
71238: LD_VAR 0 46
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: PUSH
71251: LD_VAR 0 4
71255: PUSH
71256: LD_INT 1
71258: PLUS
71259: ARRAY
71260: ST_TO_ADDR
71261: GO 71516
71263: LD_INT 36
71265: DOUBLE
71266: EQUAL
71267: IFTRUE 71271
71269: GO 71327
71271: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71272: LD_ADDR_VAR 0 9
71276: PUSH
71277: LD_VAR 0 47
71281: PUSH
71282: LD_VAR 0 48
71286: PUSH
71287: LD_VAR 0 49
71291: PUSH
71292: LD_VAR 0 50
71296: PUSH
71297: LD_VAR 0 51
71301: PUSH
71302: LD_VAR 0 52
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: LIST
71311: LIST
71312: LIST
71313: LIST
71314: PUSH
71315: LD_VAR 0 4
71319: PUSH
71320: LD_INT 1
71322: PLUS
71323: ARRAY
71324: ST_TO_ADDR
71325: GO 71516
71327: LD_INT 4
71329: DOUBLE
71330: EQUAL
71331: IFTRUE 71353
71333: LD_INT 5
71335: DOUBLE
71336: EQUAL
71337: IFTRUE 71353
71339: LD_INT 34
71341: DOUBLE
71342: EQUAL
71343: IFTRUE 71353
71345: LD_INT 37
71347: DOUBLE
71348: EQUAL
71349: IFTRUE 71353
71351: GO 71409
71353: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71354: LD_ADDR_VAR 0 9
71358: PUSH
71359: LD_VAR 0 53
71363: PUSH
71364: LD_VAR 0 54
71368: PUSH
71369: LD_VAR 0 55
71373: PUSH
71374: LD_VAR 0 56
71378: PUSH
71379: LD_VAR 0 57
71383: PUSH
71384: LD_VAR 0 58
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: PUSH
71397: LD_VAR 0 4
71401: PUSH
71402: LD_INT 1
71404: PLUS
71405: ARRAY
71406: ST_TO_ADDR
71407: GO 71516
71409: LD_INT 31
71411: DOUBLE
71412: EQUAL
71413: IFTRUE 71459
71415: LD_INT 32
71417: DOUBLE
71418: EQUAL
71419: IFTRUE 71459
71421: LD_INT 33
71423: DOUBLE
71424: EQUAL
71425: IFTRUE 71459
71427: LD_INT 27
71429: DOUBLE
71430: EQUAL
71431: IFTRUE 71459
71433: LD_INT 26
71435: DOUBLE
71436: EQUAL
71437: IFTRUE 71459
71439: LD_INT 28
71441: DOUBLE
71442: EQUAL
71443: IFTRUE 71459
71445: LD_INT 29
71447: DOUBLE
71448: EQUAL
71449: IFTRUE 71459
71451: LD_INT 30
71453: DOUBLE
71454: EQUAL
71455: IFTRUE 71459
71457: GO 71515
71459: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71460: LD_ADDR_VAR 0 9
71464: PUSH
71465: LD_VAR 0 59
71469: PUSH
71470: LD_VAR 0 60
71474: PUSH
71475: LD_VAR 0 61
71479: PUSH
71480: LD_VAR 0 62
71484: PUSH
71485: LD_VAR 0 63
71489: PUSH
71490: LD_VAR 0 64
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: PUSH
71503: LD_VAR 0 4
71507: PUSH
71508: LD_INT 1
71510: PLUS
71511: ARRAY
71512: ST_TO_ADDR
71513: GO 71516
71515: POP
// temp_list2 = [ ] ;
71516: LD_ADDR_VAR 0 10
71520: PUSH
71521: EMPTY
71522: ST_TO_ADDR
// for i in temp_list do
71523: LD_ADDR_VAR 0 8
71527: PUSH
71528: LD_VAR 0 9
71532: PUSH
71533: FOR_IN
71534: IFFALSE 71586
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71536: LD_ADDR_VAR 0 10
71540: PUSH
71541: LD_VAR 0 10
71545: PUSH
71546: LD_VAR 0 8
71550: PUSH
71551: LD_INT 1
71553: ARRAY
71554: PUSH
71555: LD_VAR 0 2
71559: PLUS
71560: PUSH
71561: LD_VAR 0 8
71565: PUSH
71566: LD_INT 2
71568: ARRAY
71569: PUSH
71570: LD_VAR 0 3
71574: PLUS
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: PUSH
71580: EMPTY
71581: LIST
71582: ADD
71583: ST_TO_ADDR
71584: GO 71533
71586: POP
71587: POP
// result = temp_list2 ;
71588: LD_ADDR_VAR 0 7
71592: PUSH
71593: LD_VAR 0 10
71597: ST_TO_ADDR
// end ;
71598: LD_VAR 0 7
71602: RET
// export function EnemyInRange ( unit , dist ) ; begin
71603: LD_INT 0
71605: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71606: LD_ADDR_VAR 0 3
71610: PUSH
71611: LD_VAR 0 1
71615: PPUSH
71616: CALL_OW 255
71620: PPUSH
71621: LD_VAR 0 1
71625: PPUSH
71626: CALL_OW 250
71630: PPUSH
71631: LD_VAR 0 1
71635: PPUSH
71636: CALL_OW 251
71640: PPUSH
71641: LD_VAR 0 2
71645: PPUSH
71646: CALL 45707 0 4
71650: PUSH
71651: LD_INT 4
71653: ARRAY
71654: ST_TO_ADDR
// end ;
71655: LD_VAR 0 3
71659: RET
// export function PlayerSeeMe ( unit ) ; begin
71660: LD_INT 0
71662: PPUSH
// result := See ( your_side , unit ) ;
71663: LD_ADDR_VAR 0 2
71667: PUSH
71668: LD_OWVAR 2
71672: PPUSH
71673: LD_VAR 0 1
71677: PPUSH
71678: CALL_OW 292
71682: ST_TO_ADDR
// end ;
71683: LD_VAR 0 2
71687: RET
// export function ReverseDir ( unit ) ; begin
71688: LD_INT 0
71690: PPUSH
// if not unit then
71691: LD_VAR 0 1
71695: NOT
71696: IFFALSE 71700
// exit ;
71698: GO 71723
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71700: LD_ADDR_VAR 0 2
71704: PUSH
71705: LD_VAR 0 1
71709: PPUSH
71710: CALL_OW 254
71714: PUSH
71715: LD_INT 3
71717: PLUS
71718: PUSH
71719: LD_INT 6
71721: MOD
71722: ST_TO_ADDR
// end ;
71723: LD_VAR 0 2
71727: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71728: LD_INT 0
71730: PPUSH
71731: PPUSH
71732: PPUSH
71733: PPUSH
71734: PPUSH
// if not hexes then
71735: LD_VAR 0 2
71739: NOT
71740: IFFALSE 71744
// exit ;
71742: GO 71892
// dist := 9999 ;
71744: LD_ADDR_VAR 0 5
71748: PUSH
71749: LD_INT 9999
71751: ST_TO_ADDR
// for i = 1 to hexes do
71752: LD_ADDR_VAR 0 4
71756: PUSH
71757: DOUBLE
71758: LD_INT 1
71760: DEC
71761: ST_TO_ADDR
71762: LD_VAR 0 2
71766: PUSH
71767: FOR_TO
71768: IFFALSE 71880
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71770: LD_VAR 0 1
71774: PPUSH
71775: LD_VAR 0 2
71779: PUSH
71780: LD_VAR 0 4
71784: ARRAY
71785: PUSH
71786: LD_INT 1
71788: ARRAY
71789: PPUSH
71790: LD_VAR 0 2
71794: PUSH
71795: LD_VAR 0 4
71799: ARRAY
71800: PUSH
71801: LD_INT 2
71803: ARRAY
71804: PPUSH
71805: CALL_OW 297
71809: PUSH
71810: LD_VAR 0 5
71814: LESS
71815: IFFALSE 71878
// begin hex := hexes [ i ] ;
71817: LD_ADDR_VAR 0 7
71821: PUSH
71822: LD_VAR 0 2
71826: PUSH
71827: LD_VAR 0 4
71831: ARRAY
71832: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71833: LD_ADDR_VAR 0 5
71837: PUSH
71838: LD_VAR 0 1
71842: PPUSH
71843: LD_VAR 0 2
71847: PUSH
71848: LD_VAR 0 4
71852: ARRAY
71853: PUSH
71854: LD_INT 1
71856: ARRAY
71857: PPUSH
71858: LD_VAR 0 2
71862: PUSH
71863: LD_VAR 0 4
71867: ARRAY
71868: PUSH
71869: LD_INT 2
71871: ARRAY
71872: PPUSH
71873: CALL_OW 297
71877: ST_TO_ADDR
// end ; end ;
71878: GO 71767
71880: POP
71881: POP
// result := hex ;
71882: LD_ADDR_VAR 0 3
71886: PUSH
71887: LD_VAR 0 7
71891: ST_TO_ADDR
// end ;
71892: LD_VAR 0 3
71896: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71897: LD_INT 0
71899: PPUSH
71900: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71901: LD_VAR 0 1
71905: NOT
71906: PUSH
71907: LD_VAR 0 1
71911: PUSH
71912: LD_INT 21
71914: PUSH
71915: LD_INT 2
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: PUSH
71922: LD_INT 23
71924: PUSH
71925: LD_INT 2
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PPUSH
71936: CALL_OW 69
71940: IN
71941: NOT
71942: OR
71943: IFFALSE 71947
// exit ;
71945: GO 71994
// for i = 1 to 3 do
71947: LD_ADDR_VAR 0 3
71951: PUSH
71952: DOUBLE
71953: LD_INT 1
71955: DEC
71956: ST_TO_ADDR
71957: LD_INT 3
71959: PUSH
71960: FOR_TO
71961: IFFALSE 71992
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71963: LD_VAR 0 1
71967: PPUSH
71968: CALL_OW 250
71972: PPUSH
71973: LD_VAR 0 1
71977: PPUSH
71978: CALL_OW 251
71982: PPUSH
71983: LD_INT 1
71985: PPUSH
71986: CALL_OW 453
71990: GO 71960
71992: POP
71993: POP
// end ;
71994: LD_VAR 0 2
71998: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71999: LD_INT 0
72001: PPUSH
72002: PPUSH
72003: PPUSH
72004: PPUSH
72005: PPUSH
72006: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72007: LD_VAR 0 1
72011: NOT
72012: PUSH
72013: LD_VAR 0 2
72017: NOT
72018: OR
72019: PUSH
72020: LD_VAR 0 1
72024: PPUSH
72025: CALL_OW 314
72029: OR
72030: IFFALSE 72034
// exit ;
72032: GO 72475
// x := GetX ( enemy_unit ) ;
72034: LD_ADDR_VAR 0 7
72038: PUSH
72039: LD_VAR 0 2
72043: PPUSH
72044: CALL_OW 250
72048: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72049: LD_ADDR_VAR 0 8
72053: PUSH
72054: LD_VAR 0 2
72058: PPUSH
72059: CALL_OW 251
72063: ST_TO_ADDR
// if not x or not y then
72064: LD_VAR 0 7
72068: NOT
72069: PUSH
72070: LD_VAR 0 8
72074: NOT
72075: OR
72076: IFFALSE 72080
// exit ;
72078: GO 72475
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72080: LD_ADDR_VAR 0 6
72084: PUSH
72085: LD_VAR 0 7
72089: PPUSH
72090: LD_INT 0
72092: PPUSH
72093: LD_INT 4
72095: PPUSH
72096: CALL_OW 272
72100: PUSH
72101: LD_VAR 0 8
72105: PPUSH
72106: LD_INT 0
72108: PPUSH
72109: LD_INT 4
72111: PPUSH
72112: CALL_OW 273
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: LD_VAR 0 7
72125: PPUSH
72126: LD_INT 1
72128: PPUSH
72129: LD_INT 4
72131: PPUSH
72132: CALL_OW 272
72136: PUSH
72137: LD_VAR 0 8
72141: PPUSH
72142: LD_INT 1
72144: PPUSH
72145: LD_INT 4
72147: PPUSH
72148: CALL_OW 273
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: PUSH
72157: LD_VAR 0 7
72161: PPUSH
72162: LD_INT 2
72164: PPUSH
72165: LD_INT 4
72167: PPUSH
72168: CALL_OW 272
72172: PUSH
72173: LD_VAR 0 8
72177: PPUSH
72178: LD_INT 2
72180: PPUSH
72181: LD_INT 4
72183: PPUSH
72184: CALL_OW 273
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: LD_VAR 0 7
72197: PPUSH
72198: LD_INT 3
72200: PPUSH
72201: LD_INT 4
72203: PPUSH
72204: CALL_OW 272
72208: PUSH
72209: LD_VAR 0 8
72213: PPUSH
72214: LD_INT 3
72216: PPUSH
72217: LD_INT 4
72219: PPUSH
72220: CALL_OW 273
72224: PUSH
72225: EMPTY
72226: LIST
72227: LIST
72228: PUSH
72229: LD_VAR 0 7
72233: PPUSH
72234: LD_INT 4
72236: PPUSH
72237: LD_INT 4
72239: PPUSH
72240: CALL_OW 272
72244: PUSH
72245: LD_VAR 0 8
72249: PPUSH
72250: LD_INT 4
72252: PPUSH
72253: LD_INT 4
72255: PPUSH
72256: CALL_OW 273
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_VAR 0 7
72269: PPUSH
72270: LD_INT 5
72272: PPUSH
72273: LD_INT 4
72275: PPUSH
72276: CALL_OW 272
72280: PUSH
72281: LD_VAR 0 8
72285: PPUSH
72286: LD_INT 5
72288: PPUSH
72289: LD_INT 4
72291: PPUSH
72292: CALL_OW 273
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: ST_TO_ADDR
// for i = tmp downto 1 do
72309: LD_ADDR_VAR 0 4
72313: PUSH
72314: DOUBLE
72315: LD_VAR 0 6
72319: INC
72320: ST_TO_ADDR
72321: LD_INT 1
72323: PUSH
72324: FOR_DOWNTO
72325: IFFALSE 72426
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72327: LD_VAR 0 6
72331: PUSH
72332: LD_VAR 0 4
72336: ARRAY
72337: PUSH
72338: LD_INT 1
72340: ARRAY
72341: PPUSH
72342: LD_VAR 0 6
72346: PUSH
72347: LD_VAR 0 4
72351: ARRAY
72352: PUSH
72353: LD_INT 2
72355: ARRAY
72356: PPUSH
72357: CALL_OW 488
72361: NOT
72362: PUSH
72363: LD_VAR 0 6
72367: PUSH
72368: LD_VAR 0 4
72372: ARRAY
72373: PUSH
72374: LD_INT 1
72376: ARRAY
72377: PPUSH
72378: LD_VAR 0 6
72382: PUSH
72383: LD_VAR 0 4
72387: ARRAY
72388: PUSH
72389: LD_INT 2
72391: ARRAY
72392: PPUSH
72393: CALL_OW 428
72397: PUSH
72398: LD_INT 0
72400: NONEQUAL
72401: OR
72402: IFFALSE 72424
// tmp := Delete ( tmp , i ) ;
72404: LD_ADDR_VAR 0 6
72408: PUSH
72409: LD_VAR 0 6
72413: PPUSH
72414: LD_VAR 0 4
72418: PPUSH
72419: CALL_OW 3
72423: ST_TO_ADDR
72424: GO 72324
72426: POP
72427: POP
// j := GetClosestHex ( unit , tmp ) ;
72428: LD_ADDR_VAR 0 5
72432: PUSH
72433: LD_VAR 0 1
72437: PPUSH
72438: LD_VAR 0 6
72442: PPUSH
72443: CALL 71728 0 2
72447: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72448: LD_VAR 0 1
72452: PPUSH
72453: LD_VAR 0 5
72457: PUSH
72458: LD_INT 1
72460: ARRAY
72461: PPUSH
72462: LD_VAR 0 5
72466: PUSH
72467: LD_INT 2
72469: ARRAY
72470: PPUSH
72471: CALL_OW 111
// end ;
72475: LD_VAR 0 3
72479: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72480: LD_INT 0
72482: PPUSH
72483: PPUSH
72484: PPUSH
// uc_side = 0 ;
72485: LD_ADDR_OWVAR 20
72489: PUSH
72490: LD_INT 0
72492: ST_TO_ADDR
// uc_nation = 0 ;
72493: LD_ADDR_OWVAR 21
72497: PUSH
72498: LD_INT 0
72500: ST_TO_ADDR
// InitHc_All ( ) ;
72501: CALL_OW 584
// InitVc ;
72505: CALL_OW 20
// if mastodonts then
72509: LD_VAR 0 6
72513: IFFALSE 72580
// for i = 1 to mastodonts do
72515: LD_ADDR_VAR 0 11
72519: PUSH
72520: DOUBLE
72521: LD_INT 1
72523: DEC
72524: ST_TO_ADDR
72525: LD_VAR 0 6
72529: PUSH
72530: FOR_TO
72531: IFFALSE 72578
// begin vc_chassis := 31 ;
72533: LD_ADDR_OWVAR 37
72537: PUSH
72538: LD_INT 31
72540: ST_TO_ADDR
// vc_control := control_rider ;
72541: LD_ADDR_OWVAR 38
72545: PUSH
72546: LD_INT 4
72548: ST_TO_ADDR
// animal := CreateVehicle ;
72549: LD_ADDR_VAR 0 12
72553: PUSH
72554: CALL_OW 45
72558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72559: LD_VAR 0 12
72563: PPUSH
72564: LD_VAR 0 8
72568: PPUSH
72569: LD_INT 0
72571: PPUSH
72572: CALL 74768 0 3
// end ;
72576: GO 72530
72578: POP
72579: POP
// if horses then
72580: LD_VAR 0 5
72584: IFFALSE 72651
// for i = 1 to horses do
72586: LD_ADDR_VAR 0 11
72590: PUSH
72591: DOUBLE
72592: LD_INT 1
72594: DEC
72595: ST_TO_ADDR
72596: LD_VAR 0 5
72600: PUSH
72601: FOR_TO
72602: IFFALSE 72649
// begin hc_class := 21 ;
72604: LD_ADDR_OWVAR 28
72608: PUSH
72609: LD_INT 21
72611: ST_TO_ADDR
// hc_gallery :=  ;
72612: LD_ADDR_OWVAR 33
72616: PUSH
72617: LD_STRING 
72619: ST_TO_ADDR
// animal := CreateHuman ;
72620: LD_ADDR_VAR 0 12
72624: PUSH
72625: CALL_OW 44
72629: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72630: LD_VAR 0 12
72634: PPUSH
72635: LD_VAR 0 8
72639: PPUSH
72640: LD_INT 0
72642: PPUSH
72643: CALL 74768 0 3
// end ;
72647: GO 72601
72649: POP
72650: POP
// if birds then
72651: LD_VAR 0 1
72655: IFFALSE 72722
// for i = 1 to birds do
72657: LD_ADDR_VAR 0 11
72661: PUSH
72662: DOUBLE
72663: LD_INT 1
72665: DEC
72666: ST_TO_ADDR
72667: LD_VAR 0 1
72671: PUSH
72672: FOR_TO
72673: IFFALSE 72720
// begin hc_class = 18 ;
72675: LD_ADDR_OWVAR 28
72679: PUSH
72680: LD_INT 18
72682: ST_TO_ADDR
// hc_gallery =  ;
72683: LD_ADDR_OWVAR 33
72687: PUSH
72688: LD_STRING 
72690: ST_TO_ADDR
// animal := CreateHuman ;
72691: LD_ADDR_VAR 0 12
72695: PUSH
72696: CALL_OW 44
72700: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72701: LD_VAR 0 12
72705: PPUSH
72706: LD_VAR 0 8
72710: PPUSH
72711: LD_INT 0
72713: PPUSH
72714: CALL 74768 0 3
// end ;
72718: GO 72672
72720: POP
72721: POP
// if tigers then
72722: LD_VAR 0 2
72726: IFFALSE 72810
// for i = 1 to tigers do
72728: LD_ADDR_VAR 0 11
72732: PUSH
72733: DOUBLE
72734: LD_INT 1
72736: DEC
72737: ST_TO_ADDR
72738: LD_VAR 0 2
72742: PUSH
72743: FOR_TO
72744: IFFALSE 72808
// begin hc_class = class_tiger ;
72746: LD_ADDR_OWVAR 28
72750: PUSH
72751: LD_INT 14
72753: ST_TO_ADDR
// hc_gallery =  ;
72754: LD_ADDR_OWVAR 33
72758: PUSH
72759: LD_STRING 
72761: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72762: LD_ADDR_OWVAR 35
72766: PUSH
72767: LD_INT 7
72769: NEG
72770: PPUSH
72771: LD_INT 7
72773: PPUSH
72774: CALL_OW 12
72778: ST_TO_ADDR
// animal := CreateHuman ;
72779: LD_ADDR_VAR 0 12
72783: PUSH
72784: CALL_OW 44
72788: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72789: LD_VAR 0 12
72793: PPUSH
72794: LD_VAR 0 8
72798: PPUSH
72799: LD_INT 0
72801: PPUSH
72802: CALL 74768 0 3
// end ;
72806: GO 72743
72808: POP
72809: POP
// if apemans then
72810: LD_VAR 0 3
72814: IFFALSE 72937
// for i = 1 to apemans do
72816: LD_ADDR_VAR 0 11
72820: PUSH
72821: DOUBLE
72822: LD_INT 1
72824: DEC
72825: ST_TO_ADDR
72826: LD_VAR 0 3
72830: PUSH
72831: FOR_TO
72832: IFFALSE 72935
// begin hc_class = class_apeman ;
72834: LD_ADDR_OWVAR 28
72838: PUSH
72839: LD_INT 12
72841: ST_TO_ADDR
// hc_gallery =  ;
72842: LD_ADDR_OWVAR 33
72846: PUSH
72847: LD_STRING 
72849: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
72850: LD_ADDR_OWVAR 35
72854: PUSH
72855: LD_INT 5
72857: NEG
72858: PPUSH
72859: LD_INT 5
72861: PPUSH
72862: CALL_OW 12
72866: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72867: LD_ADDR_OWVAR 31
72871: PUSH
72872: LD_INT 1
72874: PPUSH
72875: LD_INT 3
72877: PPUSH
72878: CALL_OW 12
72882: PUSH
72883: LD_INT 1
72885: PPUSH
72886: LD_INT 3
72888: PPUSH
72889: CALL_OW 12
72893: PUSH
72894: LD_INT 0
72896: PUSH
72897: LD_INT 0
72899: PUSH
72900: EMPTY
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: ST_TO_ADDR
// animal := CreateHuman ;
72906: LD_ADDR_VAR 0 12
72910: PUSH
72911: CALL_OW 44
72915: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72916: LD_VAR 0 12
72920: PPUSH
72921: LD_VAR 0 8
72925: PPUSH
72926: LD_INT 0
72928: PPUSH
72929: CALL 74768 0 3
// end ;
72933: GO 72831
72935: POP
72936: POP
// if enchidnas then
72937: LD_VAR 0 4
72941: IFFALSE 73008
// for i = 1 to enchidnas do
72943: LD_ADDR_VAR 0 11
72947: PUSH
72948: DOUBLE
72949: LD_INT 1
72951: DEC
72952: ST_TO_ADDR
72953: LD_VAR 0 4
72957: PUSH
72958: FOR_TO
72959: IFFALSE 73006
// begin hc_class = 13 ;
72961: LD_ADDR_OWVAR 28
72965: PUSH
72966: LD_INT 13
72968: ST_TO_ADDR
// hc_gallery =  ;
72969: LD_ADDR_OWVAR 33
72973: PUSH
72974: LD_STRING 
72976: ST_TO_ADDR
// animal := CreateHuman ;
72977: LD_ADDR_VAR 0 12
72981: PUSH
72982: CALL_OW 44
72986: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72987: LD_VAR 0 12
72991: PPUSH
72992: LD_VAR 0 8
72996: PPUSH
72997: LD_INT 0
72999: PPUSH
73000: CALL 74768 0 3
// end ;
73004: GO 72958
73006: POP
73007: POP
// if fishes then
73008: LD_VAR 0 7
73012: IFFALSE 73079
// for i = 1 to fishes do
73014: LD_ADDR_VAR 0 11
73018: PUSH
73019: DOUBLE
73020: LD_INT 1
73022: DEC
73023: ST_TO_ADDR
73024: LD_VAR 0 7
73028: PUSH
73029: FOR_TO
73030: IFFALSE 73077
// begin hc_class = 20 ;
73032: LD_ADDR_OWVAR 28
73036: PUSH
73037: LD_INT 20
73039: ST_TO_ADDR
// hc_gallery =  ;
73040: LD_ADDR_OWVAR 33
73044: PUSH
73045: LD_STRING 
73047: ST_TO_ADDR
// animal := CreateHuman ;
73048: LD_ADDR_VAR 0 12
73052: PUSH
73053: CALL_OW 44
73057: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73058: LD_VAR 0 12
73062: PPUSH
73063: LD_VAR 0 9
73067: PPUSH
73068: LD_INT 0
73070: PPUSH
73071: CALL 74768 0 3
// end ;
73075: GO 73029
73077: POP
73078: POP
// end ;
73079: LD_VAR 0 10
73083: RET
// export function WantHeal ( sci , unit ) ; begin
73084: LD_INT 0
73086: PPUSH
// if GetTaskList ( sci ) > 0 then
73087: LD_VAR 0 1
73091: PPUSH
73092: CALL_OW 437
73096: PUSH
73097: LD_INT 0
73099: GREATER
73100: IFFALSE 73170
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73102: LD_VAR 0 1
73106: PPUSH
73107: CALL_OW 437
73111: PUSH
73112: LD_INT 1
73114: ARRAY
73115: PUSH
73116: LD_INT 1
73118: ARRAY
73119: PUSH
73120: LD_STRING l
73122: EQUAL
73123: PUSH
73124: LD_VAR 0 1
73128: PPUSH
73129: CALL_OW 437
73133: PUSH
73134: LD_INT 1
73136: ARRAY
73137: PUSH
73138: LD_INT 4
73140: ARRAY
73141: PUSH
73142: LD_VAR 0 2
73146: EQUAL
73147: AND
73148: IFFALSE 73160
// result := true else
73150: LD_ADDR_VAR 0 3
73154: PUSH
73155: LD_INT 1
73157: ST_TO_ADDR
73158: GO 73168
// result := false ;
73160: LD_ADDR_VAR 0 3
73164: PUSH
73165: LD_INT 0
73167: ST_TO_ADDR
// end else
73168: GO 73178
// result := false ;
73170: LD_ADDR_VAR 0 3
73174: PUSH
73175: LD_INT 0
73177: ST_TO_ADDR
// end ;
73178: LD_VAR 0 3
73182: RET
// export function HealTarget ( sci ) ; begin
73183: LD_INT 0
73185: PPUSH
// if not sci then
73186: LD_VAR 0 1
73190: NOT
73191: IFFALSE 73195
// exit ;
73193: GO 73260
// result := 0 ;
73195: LD_ADDR_VAR 0 2
73199: PUSH
73200: LD_INT 0
73202: ST_TO_ADDR
// if GetTaskList ( sci ) then
73203: LD_VAR 0 1
73207: PPUSH
73208: CALL_OW 437
73212: IFFALSE 73260
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73214: LD_VAR 0 1
73218: PPUSH
73219: CALL_OW 437
73223: PUSH
73224: LD_INT 1
73226: ARRAY
73227: PUSH
73228: LD_INT 1
73230: ARRAY
73231: PUSH
73232: LD_STRING l
73234: EQUAL
73235: IFFALSE 73260
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73237: LD_ADDR_VAR 0 2
73241: PUSH
73242: LD_VAR 0 1
73246: PPUSH
73247: CALL_OW 437
73251: PUSH
73252: LD_INT 1
73254: ARRAY
73255: PUSH
73256: LD_INT 4
73258: ARRAY
73259: ST_TO_ADDR
// end ;
73260: LD_VAR 0 2
73264: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73265: LD_INT 0
73267: PPUSH
73268: PPUSH
73269: PPUSH
73270: PPUSH
// if not base_units then
73271: LD_VAR 0 1
73275: NOT
73276: IFFALSE 73280
// exit ;
73278: GO 73367
// result := false ;
73280: LD_ADDR_VAR 0 2
73284: PUSH
73285: LD_INT 0
73287: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73288: LD_ADDR_VAR 0 5
73292: PUSH
73293: LD_VAR 0 1
73297: PPUSH
73298: LD_INT 21
73300: PUSH
73301: LD_INT 3
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: PPUSH
73308: CALL_OW 72
73312: ST_TO_ADDR
// if not tmp then
73313: LD_VAR 0 5
73317: NOT
73318: IFFALSE 73322
// exit ;
73320: GO 73367
// for i in tmp do
73322: LD_ADDR_VAR 0 3
73326: PUSH
73327: LD_VAR 0 5
73331: PUSH
73332: FOR_IN
73333: IFFALSE 73365
// begin result := EnemyInRange ( i , 22 ) ;
73335: LD_ADDR_VAR 0 2
73339: PUSH
73340: LD_VAR 0 3
73344: PPUSH
73345: LD_INT 22
73347: PPUSH
73348: CALL 71603 0 2
73352: ST_TO_ADDR
// if result then
73353: LD_VAR 0 2
73357: IFFALSE 73363
// exit ;
73359: POP
73360: POP
73361: GO 73367
// end ;
73363: GO 73332
73365: POP
73366: POP
// end ;
73367: LD_VAR 0 2
73371: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
73372: LD_INT 0
73374: PPUSH
73375: PPUSH
// if not units then
73376: LD_VAR 0 1
73380: NOT
73381: IFFALSE 73385
// exit ;
73383: GO 73455
// result := [ ] ;
73385: LD_ADDR_VAR 0 3
73389: PUSH
73390: EMPTY
73391: ST_TO_ADDR
// for i in units do
73392: LD_ADDR_VAR 0 4
73396: PUSH
73397: LD_VAR 0 1
73401: PUSH
73402: FOR_IN
73403: IFFALSE 73453
// if GetTag ( i ) = tag then
73405: LD_VAR 0 4
73409: PPUSH
73410: CALL_OW 110
73414: PUSH
73415: LD_VAR 0 2
73419: EQUAL
73420: IFFALSE 73451
// result := Insert ( result , result + 1 , i ) ;
73422: LD_ADDR_VAR 0 3
73426: PUSH
73427: LD_VAR 0 3
73431: PPUSH
73432: LD_VAR 0 3
73436: PUSH
73437: LD_INT 1
73439: PLUS
73440: PPUSH
73441: LD_VAR 0 4
73445: PPUSH
73446: CALL_OW 2
73450: ST_TO_ADDR
73451: GO 73402
73453: POP
73454: POP
// end ;
73455: LD_VAR 0 3
73459: RET
// export function IsDriver ( un ) ; begin
73460: LD_INT 0
73462: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73463: LD_ADDR_VAR 0 2
73467: PUSH
73468: LD_VAR 0 1
73472: PUSH
73473: LD_INT 55
73475: PUSH
73476: EMPTY
73477: LIST
73478: PPUSH
73479: CALL_OW 69
73483: IN
73484: ST_TO_ADDR
// end ;
73485: LD_VAR 0 2
73489: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73490: LD_INT 0
73492: PPUSH
73493: PPUSH
// list := [ ] ;
73494: LD_ADDR_VAR 0 5
73498: PUSH
73499: EMPTY
73500: ST_TO_ADDR
// case d of 0 :
73501: LD_VAR 0 3
73505: PUSH
73506: LD_INT 0
73508: DOUBLE
73509: EQUAL
73510: IFTRUE 73514
73512: GO 73647
73514: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73515: LD_ADDR_VAR 0 5
73519: PUSH
73520: LD_VAR 0 1
73524: PUSH
73525: LD_INT 4
73527: MINUS
73528: PUSH
73529: LD_VAR 0 2
73533: PUSH
73534: LD_INT 4
73536: MINUS
73537: PUSH
73538: LD_INT 2
73540: PUSH
73541: EMPTY
73542: LIST
73543: LIST
73544: LIST
73545: PUSH
73546: LD_VAR 0 1
73550: PUSH
73551: LD_INT 3
73553: MINUS
73554: PUSH
73555: LD_VAR 0 2
73559: PUSH
73560: LD_INT 1
73562: PUSH
73563: EMPTY
73564: LIST
73565: LIST
73566: LIST
73567: PUSH
73568: LD_VAR 0 1
73572: PUSH
73573: LD_INT 4
73575: PLUS
73576: PUSH
73577: LD_VAR 0 2
73581: PUSH
73582: LD_INT 4
73584: PUSH
73585: EMPTY
73586: LIST
73587: LIST
73588: LIST
73589: PUSH
73590: LD_VAR 0 1
73594: PUSH
73595: LD_INT 3
73597: PLUS
73598: PUSH
73599: LD_VAR 0 2
73603: PUSH
73604: LD_INT 3
73606: PLUS
73607: PUSH
73608: LD_INT 5
73610: PUSH
73611: EMPTY
73612: LIST
73613: LIST
73614: LIST
73615: PUSH
73616: LD_VAR 0 1
73620: PUSH
73621: LD_VAR 0 2
73625: PUSH
73626: LD_INT 4
73628: PLUS
73629: PUSH
73630: LD_INT 0
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: LIST
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: LIST
73642: LIST
73643: LIST
73644: ST_TO_ADDR
// end ; 1 :
73645: GO 74345
73647: LD_INT 1
73649: DOUBLE
73650: EQUAL
73651: IFTRUE 73655
73653: GO 73788
73655: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73656: LD_ADDR_VAR 0 5
73660: PUSH
73661: LD_VAR 0 1
73665: PUSH
73666: LD_VAR 0 2
73670: PUSH
73671: LD_INT 4
73673: MINUS
73674: PUSH
73675: LD_INT 3
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: LIST
73682: PUSH
73683: LD_VAR 0 1
73687: PUSH
73688: LD_INT 3
73690: MINUS
73691: PUSH
73692: LD_VAR 0 2
73696: PUSH
73697: LD_INT 3
73699: MINUS
73700: PUSH
73701: LD_INT 2
73703: PUSH
73704: EMPTY
73705: LIST
73706: LIST
73707: LIST
73708: PUSH
73709: LD_VAR 0 1
73713: PUSH
73714: LD_INT 4
73716: MINUS
73717: PUSH
73718: LD_VAR 0 2
73722: PUSH
73723: LD_INT 1
73725: PUSH
73726: EMPTY
73727: LIST
73728: LIST
73729: LIST
73730: PUSH
73731: LD_VAR 0 1
73735: PUSH
73736: LD_VAR 0 2
73740: PUSH
73741: LD_INT 3
73743: PLUS
73744: PUSH
73745: LD_INT 0
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: LIST
73752: PUSH
73753: LD_VAR 0 1
73757: PUSH
73758: LD_INT 4
73760: PLUS
73761: PUSH
73762: LD_VAR 0 2
73766: PUSH
73767: LD_INT 4
73769: PLUS
73770: PUSH
73771: LD_INT 5
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: LIST
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: LIST
73783: LIST
73784: LIST
73785: ST_TO_ADDR
// end ; 2 :
73786: GO 74345
73788: LD_INT 2
73790: DOUBLE
73791: EQUAL
73792: IFTRUE 73796
73794: GO 73925
73796: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73797: LD_ADDR_VAR 0 5
73801: PUSH
73802: LD_VAR 0 1
73806: PUSH
73807: LD_VAR 0 2
73811: PUSH
73812: LD_INT 3
73814: MINUS
73815: PUSH
73816: LD_INT 3
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: LIST
73823: PUSH
73824: LD_VAR 0 1
73828: PUSH
73829: LD_INT 4
73831: PLUS
73832: PUSH
73833: LD_VAR 0 2
73837: PUSH
73838: LD_INT 4
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: LIST
73845: PUSH
73846: LD_VAR 0 1
73850: PUSH
73851: LD_VAR 0 2
73855: PUSH
73856: LD_INT 4
73858: PLUS
73859: PUSH
73860: LD_INT 0
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: LIST
73867: PUSH
73868: LD_VAR 0 1
73872: PUSH
73873: LD_INT 3
73875: MINUS
73876: PUSH
73877: LD_VAR 0 2
73881: PUSH
73882: LD_INT 1
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: LIST
73889: PUSH
73890: LD_VAR 0 1
73894: PUSH
73895: LD_INT 4
73897: MINUS
73898: PUSH
73899: LD_VAR 0 2
73903: PUSH
73904: LD_INT 4
73906: MINUS
73907: PUSH
73908: LD_INT 2
73910: PUSH
73911: EMPTY
73912: LIST
73913: LIST
73914: LIST
73915: PUSH
73916: EMPTY
73917: LIST
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: ST_TO_ADDR
// end ; 3 :
73923: GO 74345
73925: LD_INT 3
73927: DOUBLE
73928: EQUAL
73929: IFTRUE 73933
73931: GO 74066
73933: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73934: LD_ADDR_VAR 0 5
73938: PUSH
73939: LD_VAR 0 1
73943: PUSH
73944: LD_INT 3
73946: PLUS
73947: PUSH
73948: LD_VAR 0 2
73952: PUSH
73953: LD_INT 4
73955: PUSH
73956: EMPTY
73957: LIST
73958: LIST
73959: LIST
73960: PUSH
73961: LD_VAR 0 1
73965: PUSH
73966: LD_INT 4
73968: PLUS
73969: PUSH
73970: LD_VAR 0 2
73974: PUSH
73975: LD_INT 4
73977: PLUS
73978: PUSH
73979: LD_INT 5
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: LIST
73986: PUSH
73987: LD_VAR 0 1
73991: PUSH
73992: LD_INT 4
73994: MINUS
73995: PUSH
73996: LD_VAR 0 2
74000: PUSH
74001: LD_INT 1
74003: PUSH
74004: EMPTY
74005: LIST
74006: LIST
74007: LIST
74008: PUSH
74009: LD_VAR 0 1
74013: PUSH
74014: LD_VAR 0 2
74018: PUSH
74019: LD_INT 4
74021: MINUS
74022: PUSH
74023: LD_INT 3
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: LIST
74030: PUSH
74031: LD_VAR 0 1
74035: PUSH
74036: LD_INT 3
74038: MINUS
74039: PUSH
74040: LD_VAR 0 2
74044: PUSH
74045: LD_INT 3
74047: MINUS
74048: PUSH
74049: LD_INT 2
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: LIST
74056: PUSH
74057: EMPTY
74058: LIST
74059: LIST
74060: LIST
74061: LIST
74062: LIST
74063: ST_TO_ADDR
// end ; 4 :
74064: GO 74345
74066: LD_INT 4
74068: DOUBLE
74069: EQUAL
74070: IFTRUE 74074
74072: GO 74207
74074: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74075: LD_ADDR_VAR 0 5
74079: PUSH
74080: LD_VAR 0 1
74084: PUSH
74085: LD_VAR 0 2
74089: PUSH
74090: LD_INT 4
74092: PLUS
74093: PUSH
74094: LD_INT 0
74096: PUSH
74097: EMPTY
74098: LIST
74099: LIST
74100: LIST
74101: PUSH
74102: LD_VAR 0 1
74106: PUSH
74107: LD_INT 3
74109: PLUS
74110: PUSH
74111: LD_VAR 0 2
74115: PUSH
74116: LD_INT 3
74118: PLUS
74119: PUSH
74120: LD_INT 5
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: LIST
74127: PUSH
74128: LD_VAR 0 1
74132: PUSH
74133: LD_INT 4
74135: PLUS
74136: PUSH
74137: LD_VAR 0 2
74141: PUSH
74142: LD_INT 4
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: LIST
74149: PUSH
74150: LD_VAR 0 1
74154: PUSH
74155: LD_VAR 0 2
74159: PUSH
74160: LD_INT 3
74162: MINUS
74163: PUSH
74164: LD_INT 3
74166: PUSH
74167: EMPTY
74168: LIST
74169: LIST
74170: LIST
74171: PUSH
74172: LD_VAR 0 1
74176: PUSH
74177: LD_INT 4
74179: MINUS
74180: PUSH
74181: LD_VAR 0 2
74185: PUSH
74186: LD_INT 4
74188: MINUS
74189: PUSH
74190: LD_INT 2
74192: PUSH
74193: EMPTY
74194: LIST
74195: LIST
74196: LIST
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: LIST
74202: LIST
74203: LIST
74204: ST_TO_ADDR
// end ; 5 :
74205: GO 74345
74207: LD_INT 5
74209: DOUBLE
74210: EQUAL
74211: IFTRUE 74215
74213: GO 74344
74215: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74216: LD_ADDR_VAR 0 5
74220: PUSH
74221: LD_VAR 0 1
74225: PUSH
74226: LD_INT 4
74228: MINUS
74229: PUSH
74230: LD_VAR 0 2
74234: PUSH
74235: LD_INT 1
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: LIST
74242: PUSH
74243: LD_VAR 0 1
74247: PUSH
74248: LD_VAR 0 2
74252: PUSH
74253: LD_INT 4
74255: MINUS
74256: PUSH
74257: LD_INT 3
74259: PUSH
74260: EMPTY
74261: LIST
74262: LIST
74263: LIST
74264: PUSH
74265: LD_VAR 0 1
74269: PUSH
74270: LD_INT 4
74272: PLUS
74273: PUSH
74274: LD_VAR 0 2
74278: PUSH
74279: LD_INT 4
74281: PLUS
74282: PUSH
74283: LD_INT 5
74285: PUSH
74286: EMPTY
74287: LIST
74288: LIST
74289: LIST
74290: PUSH
74291: LD_VAR 0 1
74295: PUSH
74296: LD_INT 3
74298: PLUS
74299: PUSH
74300: LD_VAR 0 2
74304: PUSH
74305: LD_INT 4
74307: PUSH
74308: EMPTY
74309: LIST
74310: LIST
74311: LIST
74312: PUSH
74313: LD_VAR 0 1
74317: PUSH
74318: LD_VAR 0 2
74322: PUSH
74323: LD_INT 3
74325: PLUS
74326: PUSH
74327: LD_INT 0
74329: PUSH
74330: EMPTY
74331: LIST
74332: LIST
74333: LIST
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: ST_TO_ADDR
// end ; end ;
74342: GO 74345
74344: POP
// result := list ;
74345: LD_ADDR_VAR 0 4
74349: PUSH
74350: LD_VAR 0 5
74354: ST_TO_ADDR
// end ;
74355: LD_VAR 0 4
74359: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74360: LD_INT 0
74362: PPUSH
74363: PPUSH
74364: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74365: LD_VAR 0 1
74369: NOT
74370: PUSH
74371: LD_VAR 0 2
74375: PUSH
74376: LD_INT 1
74378: PUSH
74379: LD_INT 2
74381: PUSH
74382: LD_INT 3
74384: PUSH
74385: LD_INT 4
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: LIST
74392: LIST
74393: IN
74394: NOT
74395: OR
74396: IFFALSE 74400
// exit ;
74398: GO 74492
// tmp := [ ] ;
74400: LD_ADDR_VAR 0 5
74404: PUSH
74405: EMPTY
74406: ST_TO_ADDR
// for i in units do
74407: LD_ADDR_VAR 0 4
74411: PUSH
74412: LD_VAR 0 1
74416: PUSH
74417: FOR_IN
74418: IFFALSE 74461
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74420: LD_ADDR_VAR 0 5
74424: PUSH
74425: LD_VAR 0 5
74429: PPUSH
74430: LD_VAR 0 5
74434: PUSH
74435: LD_INT 1
74437: PLUS
74438: PPUSH
74439: LD_VAR 0 4
74443: PPUSH
74444: LD_VAR 0 2
74448: PPUSH
74449: CALL_OW 259
74453: PPUSH
74454: CALL_OW 2
74458: ST_TO_ADDR
74459: GO 74417
74461: POP
74462: POP
// if not tmp then
74463: LD_VAR 0 5
74467: NOT
74468: IFFALSE 74472
// exit ;
74470: GO 74492
// result := SortListByListDesc ( units , tmp ) ;
74472: LD_ADDR_VAR 0 3
74476: PUSH
74477: LD_VAR 0 1
74481: PPUSH
74482: LD_VAR 0 5
74486: PPUSH
74487: CALL_OW 77
74491: ST_TO_ADDR
// end ;
74492: LD_VAR 0 3
74496: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74497: LD_INT 0
74499: PPUSH
74500: PPUSH
74501: PPUSH
// result := false ;
74502: LD_ADDR_VAR 0 3
74506: PUSH
74507: LD_INT 0
74509: ST_TO_ADDR
// x := GetX ( building ) ;
74510: LD_ADDR_VAR 0 4
74514: PUSH
74515: LD_VAR 0 2
74519: PPUSH
74520: CALL_OW 250
74524: ST_TO_ADDR
// y := GetY ( building ) ;
74525: LD_ADDR_VAR 0 5
74529: PUSH
74530: LD_VAR 0 2
74534: PPUSH
74535: CALL_OW 251
74539: ST_TO_ADDR
// if not building or not x or not y then
74540: LD_VAR 0 2
74544: NOT
74545: PUSH
74546: LD_VAR 0 4
74550: NOT
74551: OR
74552: PUSH
74553: LD_VAR 0 5
74557: NOT
74558: OR
74559: IFFALSE 74563
// exit ;
74561: GO 74655
// if GetTaskList ( unit ) then
74563: LD_VAR 0 1
74567: PPUSH
74568: CALL_OW 437
74572: IFFALSE 74655
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74574: LD_STRING e
74576: PUSH
74577: LD_VAR 0 1
74581: PPUSH
74582: CALL_OW 437
74586: PUSH
74587: LD_INT 1
74589: ARRAY
74590: PUSH
74591: LD_INT 1
74593: ARRAY
74594: EQUAL
74595: PUSH
74596: LD_VAR 0 4
74600: PUSH
74601: LD_VAR 0 1
74605: PPUSH
74606: CALL_OW 437
74610: PUSH
74611: LD_INT 1
74613: ARRAY
74614: PUSH
74615: LD_INT 2
74617: ARRAY
74618: EQUAL
74619: AND
74620: PUSH
74621: LD_VAR 0 5
74625: PUSH
74626: LD_VAR 0 1
74630: PPUSH
74631: CALL_OW 437
74635: PUSH
74636: LD_INT 1
74638: ARRAY
74639: PUSH
74640: LD_INT 3
74642: ARRAY
74643: EQUAL
74644: AND
74645: IFFALSE 74655
// result := true end ;
74647: LD_ADDR_VAR 0 3
74651: PUSH
74652: LD_INT 1
74654: ST_TO_ADDR
// end ;
74655: LD_VAR 0 3
74659: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74660: LD_INT 0
74662: PPUSH
// result := false ;
74663: LD_ADDR_VAR 0 4
74667: PUSH
74668: LD_INT 0
74670: ST_TO_ADDR
// if GetTaskList ( unit ) then
74671: LD_VAR 0 1
74675: PPUSH
74676: CALL_OW 437
74680: IFFALSE 74763
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74682: LD_STRING M
74684: PUSH
74685: LD_VAR 0 1
74689: PPUSH
74690: CALL_OW 437
74694: PUSH
74695: LD_INT 1
74697: ARRAY
74698: PUSH
74699: LD_INT 1
74701: ARRAY
74702: EQUAL
74703: PUSH
74704: LD_VAR 0 2
74708: PUSH
74709: LD_VAR 0 1
74713: PPUSH
74714: CALL_OW 437
74718: PUSH
74719: LD_INT 1
74721: ARRAY
74722: PUSH
74723: LD_INT 2
74725: ARRAY
74726: EQUAL
74727: AND
74728: PUSH
74729: LD_VAR 0 3
74733: PUSH
74734: LD_VAR 0 1
74738: PPUSH
74739: CALL_OW 437
74743: PUSH
74744: LD_INT 1
74746: ARRAY
74747: PUSH
74748: LD_INT 3
74750: ARRAY
74751: EQUAL
74752: AND
74753: IFFALSE 74763
// result := true ;
74755: LD_ADDR_VAR 0 4
74759: PUSH
74760: LD_INT 1
74762: ST_TO_ADDR
// end ; end ;
74763: LD_VAR 0 4
74767: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74768: LD_INT 0
74770: PPUSH
74771: PPUSH
74772: PPUSH
74773: PPUSH
// if not unit or not area then
74774: LD_VAR 0 1
74778: NOT
74779: PUSH
74780: LD_VAR 0 2
74784: NOT
74785: OR
74786: IFFALSE 74790
// exit ;
74788: GO 74954
// tmp := AreaToList ( area , i ) ;
74790: LD_ADDR_VAR 0 6
74794: PUSH
74795: LD_VAR 0 2
74799: PPUSH
74800: LD_VAR 0 5
74804: PPUSH
74805: CALL_OW 517
74809: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74810: LD_ADDR_VAR 0 5
74814: PUSH
74815: DOUBLE
74816: LD_INT 1
74818: DEC
74819: ST_TO_ADDR
74820: LD_VAR 0 6
74824: PUSH
74825: LD_INT 1
74827: ARRAY
74828: PUSH
74829: FOR_TO
74830: IFFALSE 74952
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74832: LD_ADDR_VAR 0 7
74836: PUSH
74837: LD_VAR 0 6
74841: PUSH
74842: LD_INT 1
74844: ARRAY
74845: PUSH
74846: LD_VAR 0 5
74850: ARRAY
74851: PUSH
74852: LD_VAR 0 6
74856: PUSH
74857: LD_INT 2
74859: ARRAY
74860: PUSH
74861: LD_VAR 0 5
74865: ARRAY
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74871: LD_VAR 0 7
74875: PUSH
74876: LD_INT 1
74878: ARRAY
74879: PPUSH
74880: LD_VAR 0 7
74884: PUSH
74885: LD_INT 2
74887: ARRAY
74888: PPUSH
74889: CALL_OW 428
74893: PUSH
74894: LD_INT 0
74896: EQUAL
74897: IFFALSE 74950
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74899: LD_VAR 0 1
74903: PPUSH
74904: LD_VAR 0 7
74908: PUSH
74909: LD_INT 1
74911: ARRAY
74912: PPUSH
74913: LD_VAR 0 7
74917: PUSH
74918: LD_INT 2
74920: ARRAY
74921: PPUSH
74922: LD_VAR 0 3
74926: PPUSH
74927: CALL_OW 48
// result := IsPlaced ( unit ) ;
74931: LD_ADDR_VAR 0 4
74935: PUSH
74936: LD_VAR 0 1
74940: PPUSH
74941: CALL_OW 305
74945: ST_TO_ADDR
// exit ;
74946: POP
74947: POP
74948: GO 74954
// end ; end ;
74950: GO 74829
74952: POP
74953: POP
// end ;
74954: LD_VAR 0 4
74958: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74959: LD_INT 0
74961: PPUSH
74962: PPUSH
74963: PPUSH
// if not side or side > 8 then
74964: LD_VAR 0 1
74968: NOT
74969: PUSH
74970: LD_VAR 0 1
74974: PUSH
74975: LD_INT 8
74977: GREATER
74978: OR
74979: IFFALSE 74983
// exit ;
74981: GO 75170
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74983: LD_ADDR_VAR 0 4
74987: PUSH
74988: LD_INT 22
74990: PUSH
74991: LD_VAR 0 1
74995: PUSH
74996: EMPTY
74997: LIST
74998: LIST
74999: PUSH
75000: LD_INT 21
75002: PUSH
75003: LD_INT 3
75005: PUSH
75006: EMPTY
75007: LIST
75008: LIST
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: PPUSH
75014: CALL_OW 69
75018: ST_TO_ADDR
// if not tmp then
75019: LD_VAR 0 4
75023: NOT
75024: IFFALSE 75028
// exit ;
75026: GO 75170
// enable_addtolog := true ;
75028: LD_ADDR_OWVAR 81
75032: PUSH
75033: LD_INT 1
75035: ST_TO_ADDR
// AddToLog ( [ ) ;
75036: LD_STRING [
75038: PPUSH
75039: CALL_OW 561
// for i in tmp do
75043: LD_ADDR_VAR 0 3
75047: PUSH
75048: LD_VAR 0 4
75052: PUSH
75053: FOR_IN
75054: IFFALSE 75161
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75056: LD_STRING [
75058: PUSH
75059: LD_VAR 0 3
75063: PPUSH
75064: CALL_OW 266
75068: STR
75069: PUSH
75070: LD_STRING , 
75072: STR
75073: PUSH
75074: LD_VAR 0 3
75078: PPUSH
75079: CALL_OW 250
75083: STR
75084: PUSH
75085: LD_STRING , 
75087: STR
75088: PUSH
75089: LD_VAR 0 3
75093: PPUSH
75094: CALL_OW 251
75098: STR
75099: PUSH
75100: LD_STRING , 
75102: STR
75103: PUSH
75104: LD_VAR 0 3
75108: PPUSH
75109: CALL_OW 254
75113: STR
75114: PUSH
75115: LD_STRING , 
75117: STR
75118: PUSH
75119: LD_VAR 0 3
75123: PPUSH
75124: LD_INT 1
75126: PPUSH
75127: CALL_OW 268
75131: STR
75132: PUSH
75133: LD_STRING , 
75135: STR
75136: PUSH
75137: LD_VAR 0 3
75141: PPUSH
75142: LD_INT 2
75144: PPUSH
75145: CALL_OW 268
75149: STR
75150: PUSH
75151: LD_STRING ],
75153: STR
75154: PPUSH
75155: CALL_OW 561
// end ;
75159: GO 75053
75161: POP
75162: POP
// AddToLog ( ]; ) ;
75163: LD_STRING ];
75165: PPUSH
75166: CALL_OW 561
// end ;
75170: LD_VAR 0 2
75174: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75175: LD_INT 0
75177: PPUSH
75178: PPUSH
75179: PPUSH
75180: PPUSH
75181: PPUSH
// if not area or not rate or not max then
75182: LD_VAR 0 1
75186: NOT
75187: PUSH
75188: LD_VAR 0 2
75192: NOT
75193: OR
75194: PUSH
75195: LD_VAR 0 4
75199: NOT
75200: OR
75201: IFFALSE 75205
// exit ;
75203: GO 75397
// while 1 do
75205: LD_INT 1
75207: IFFALSE 75397
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75209: LD_ADDR_VAR 0 9
75213: PUSH
75214: LD_VAR 0 1
75218: PPUSH
75219: LD_INT 1
75221: PPUSH
75222: CALL_OW 287
75226: PUSH
75227: LD_INT 10
75229: MUL
75230: ST_TO_ADDR
// r := rate / 10 ;
75231: LD_ADDR_VAR 0 7
75235: PUSH
75236: LD_VAR 0 2
75240: PUSH
75241: LD_INT 10
75243: DIVREAL
75244: ST_TO_ADDR
// time := 1 1$00 ;
75245: LD_ADDR_VAR 0 8
75249: PUSH
75250: LD_INT 2100
75252: ST_TO_ADDR
// if amount < min then
75253: LD_VAR 0 9
75257: PUSH
75258: LD_VAR 0 3
75262: LESS
75263: IFFALSE 75281
// r := r * 2 else
75265: LD_ADDR_VAR 0 7
75269: PUSH
75270: LD_VAR 0 7
75274: PUSH
75275: LD_INT 2
75277: MUL
75278: ST_TO_ADDR
75279: GO 75307
// if amount > max then
75281: LD_VAR 0 9
75285: PUSH
75286: LD_VAR 0 4
75290: GREATER
75291: IFFALSE 75307
// r := r / 2 ;
75293: LD_ADDR_VAR 0 7
75297: PUSH
75298: LD_VAR 0 7
75302: PUSH
75303: LD_INT 2
75305: DIVREAL
75306: ST_TO_ADDR
// time := time / r ;
75307: LD_ADDR_VAR 0 8
75311: PUSH
75312: LD_VAR 0 8
75316: PUSH
75317: LD_VAR 0 7
75321: DIVREAL
75322: ST_TO_ADDR
// if time < 0 then
75323: LD_VAR 0 8
75327: PUSH
75328: LD_INT 0
75330: LESS
75331: IFFALSE 75348
// time := time * - 1 ;
75333: LD_ADDR_VAR 0 8
75337: PUSH
75338: LD_VAR 0 8
75342: PUSH
75343: LD_INT 1
75345: NEG
75346: MUL
75347: ST_TO_ADDR
// wait ( time ) ;
75348: LD_VAR 0 8
75352: PPUSH
75353: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
75357: LD_INT 35
75359: PPUSH
75360: LD_INT 875
75362: PPUSH
75363: CALL_OW 12
75367: PPUSH
75368: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75372: LD_INT 1
75374: PPUSH
75375: LD_INT 5
75377: PPUSH
75378: CALL_OW 12
75382: PPUSH
75383: LD_VAR 0 1
75387: PPUSH
75388: LD_INT 1
75390: PPUSH
75391: CALL_OW 55
// end ;
75395: GO 75205
// end ;
75397: LD_VAR 0 5
75401: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75402: LD_INT 0
75404: PPUSH
75405: PPUSH
75406: PPUSH
75407: PPUSH
75408: PPUSH
75409: PPUSH
75410: PPUSH
75411: PPUSH
// if not turrets or not factories then
75412: LD_VAR 0 1
75416: NOT
75417: PUSH
75418: LD_VAR 0 2
75422: NOT
75423: OR
75424: IFFALSE 75428
// exit ;
75426: GO 75735
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75428: LD_ADDR_VAR 0 10
75432: PUSH
75433: LD_INT 5
75435: PUSH
75436: LD_INT 6
75438: PUSH
75439: EMPTY
75440: LIST
75441: LIST
75442: PUSH
75443: LD_INT 2
75445: PUSH
75446: LD_INT 4
75448: PUSH
75449: EMPTY
75450: LIST
75451: LIST
75452: PUSH
75453: LD_INT 3
75455: PUSH
75456: LD_INT 5
75458: PUSH
75459: EMPTY
75460: LIST
75461: LIST
75462: PUSH
75463: EMPTY
75464: LIST
75465: LIST
75466: LIST
75467: PUSH
75468: LD_INT 24
75470: PUSH
75471: LD_INT 25
75473: PUSH
75474: EMPTY
75475: LIST
75476: LIST
75477: PUSH
75478: LD_INT 23
75480: PUSH
75481: LD_INT 27
75483: PUSH
75484: EMPTY
75485: LIST
75486: LIST
75487: PUSH
75488: EMPTY
75489: LIST
75490: LIST
75491: PUSH
75492: LD_INT 42
75494: PUSH
75495: LD_INT 43
75497: PUSH
75498: EMPTY
75499: LIST
75500: LIST
75501: PUSH
75502: LD_INT 44
75504: PUSH
75505: LD_INT 46
75507: PUSH
75508: EMPTY
75509: LIST
75510: LIST
75511: PUSH
75512: LD_INT 45
75514: PUSH
75515: LD_INT 47
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: PUSH
75522: EMPTY
75523: LIST
75524: LIST
75525: LIST
75526: PUSH
75527: EMPTY
75528: LIST
75529: LIST
75530: LIST
75531: ST_TO_ADDR
// result := [ ] ;
75532: LD_ADDR_VAR 0 3
75536: PUSH
75537: EMPTY
75538: ST_TO_ADDR
// for i in turrets do
75539: LD_ADDR_VAR 0 4
75543: PUSH
75544: LD_VAR 0 1
75548: PUSH
75549: FOR_IN
75550: IFFALSE 75733
// begin nat := GetNation ( i ) ;
75552: LD_ADDR_VAR 0 7
75556: PUSH
75557: LD_VAR 0 4
75561: PPUSH
75562: CALL_OW 248
75566: ST_TO_ADDR
// weapon := 0 ;
75567: LD_ADDR_VAR 0 8
75571: PUSH
75572: LD_INT 0
75574: ST_TO_ADDR
// if not nat then
75575: LD_VAR 0 7
75579: NOT
75580: IFFALSE 75584
// continue ;
75582: GO 75549
// for j in list [ nat ] do
75584: LD_ADDR_VAR 0 5
75588: PUSH
75589: LD_VAR 0 10
75593: PUSH
75594: LD_VAR 0 7
75598: ARRAY
75599: PUSH
75600: FOR_IN
75601: IFFALSE 75642
// if GetBWeapon ( i ) = j [ 1 ] then
75603: LD_VAR 0 4
75607: PPUSH
75608: CALL_OW 269
75612: PUSH
75613: LD_VAR 0 5
75617: PUSH
75618: LD_INT 1
75620: ARRAY
75621: EQUAL
75622: IFFALSE 75640
// begin weapon := j [ 2 ] ;
75624: LD_ADDR_VAR 0 8
75628: PUSH
75629: LD_VAR 0 5
75633: PUSH
75634: LD_INT 2
75636: ARRAY
75637: ST_TO_ADDR
// break ;
75638: GO 75642
// end ;
75640: GO 75600
75642: POP
75643: POP
// if not weapon then
75644: LD_VAR 0 8
75648: NOT
75649: IFFALSE 75653
// continue ;
75651: GO 75549
// for k in factories do
75653: LD_ADDR_VAR 0 6
75657: PUSH
75658: LD_VAR 0 2
75662: PUSH
75663: FOR_IN
75664: IFFALSE 75729
// begin weapons := AvailableWeaponList ( k ) ;
75666: LD_ADDR_VAR 0 9
75670: PUSH
75671: LD_VAR 0 6
75675: PPUSH
75676: CALL_OW 478
75680: ST_TO_ADDR
// if not weapons then
75681: LD_VAR 0 9
75685: NOT
75686: IFFALSE 75690
// continue ;
75688: GO 75663
// if weapon in weapons then
75690: LD_VAR 0 8
75694: PUSH
75695: LD_VAR 0 9
75699: IN
75700: IFFALSE 75727
// begin result := [ i , weapon ] ;
75702: LD_ADDR_VAR 0 3
75706: PUSH
75707: LD_VAR 0 4
75711: PUSH
75712: LD_VAR 0 8
75716: PUSH
75717: EMPTY
75718: LIST
75719: LIST
75720: ST_TO_ADDR
// exit ;
75721: POP
75722: POP
75723: POP
75724: POP
75725: GO 75735
// end ; end ;
75727: GO 75663
75729: POP
75730: POP
// end ;
75731: GO 75549
75733: POP
75734: POP
// end ;
75735: LD_VAR 0 3
75739: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75740: LD_INT 0
75742: PPUSH
// if not side or side > 8 then
75743: LD_VAR 0 3
75747: NOT
75748: PUSH
75749: LD_VAR 0 3
75753: PUSH
75754: LD_INT 8
75756: GREATER
75757: OR
75758: IFFALSE 75762
// exit ;
75760: GO 75821
// if not range then
75762: LD_VAR 0 4
75766: NOT
75767: IFFALSE 75778
// range := - 12 ;
75769: LD_ADDR_VAR 0 4
75773: PUSH
75774: LD_INT 12
75776: NEG
75777: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75778: LD_VAR 0 1
75782: PPUSH
75783: LD_VAR 0 2
75787: PPUSH
75788: LD_VAR 0 3
75792: PPUSH
75793: LD_VAR 0 4
75797: PPUSH
75798: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75802: LD_VAR 0 1
75806: PPUSH
75807: LD_VAR 0 2
75811: PPUSH
75812: LD_VAR 0 3
75816: PPUSH
75817: CALL_OW 331
// end ;
75821: LD_VAR 0 5
75825: RET
// export function Video ( mode ) ; begin
75826: LD_INT 0
75828: PPUSH
// ingame_video = mode ;
75829: LD_ADDR_OWVAR 52
75833: PUSH
75834: LD_VAR 0 1
75838: ST_TO_ADDR
// interface_hidden = mode ;
75839: LD_ADDR_OWVAR 54
75843: PUSH
75844: LD_VAR 0 1
75848: ST_TO_ADDR
// end ;
75849: LD_VAR 0 2
75853: RET
// export function Join ( array , element ) ; begin
75854: LD_INT 0
75856: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75857: LD_ADDR_VAR 0 3
75861: PUSH
75862: LD_VAR 0 1
75866: PPUSH
75867: LD_VAR 0 1
75871: PUSH
75872: LD_INT 1
75874: PLUS
75875: PPUSH
75876: LD_VAR 0 2
75880: PPUSH
75881: CALL_OW 1
75885: ST_TO_ADDR
// end ;
75886: LD_VAR 0 3
75890: RET
// export function JoinUnion ( array , element ) ; begin
75891: LD_INT 0
75893: PPUSH
// result := array union element ;
75894: LD_ADDR_VAR 0 3
75898: PUSH
75899: LD_VAR 0 1
75903: PUSH
75904: LD_VAR 0 2
75908: UNION
75909: ST_TO_ADDR
// end ;
75910: LD_VAR 0 3
75914: RET
// export function GetBehemoths ( side ) ; begin
75915: LD_INT 0
75917: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
75918: LD_ADDR_VAR 0 2
75922: PUSH
75923: LD_INT 22
75925: PUSH
75926: LD_VAR 0 1
75930: PUSH
75931: EMPTY
75932: LIST
75933: LIST
75934: PUSH
75935: LD_INT 31
75937: PUSH
75938: LD_INT 25
75940: PUSH
75941: EMPTY
75942: LIST
75943: LIST
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: PPUSH
75949: CALL_OW 69
75953: ST_TO_ADDR
// end ;
75954: LD_VAR 0 2
75958: RET
// export function Shuffle ( array ) ; var i , index ; begin
75959: LD_INT 0
75961: PPUSH
75962: PPUSH
75963: PPUSH
// result := [ ] ;
75964: LD_ADDR_VAR 0 2
75968: PUSH
75969: EMPTY
75970: ST_TO_ADDR
// if not array then
75971: LD_VAR 0 1
75975: NOT
75976: IFFALSE 75980
// exit ;
75978: GO 76079
// Randomize ;
75980: CALL_OW 10
// for i = array downto 1 do
75984: LD_ADDR_VAR 0 3
75988: PUSH
75989: DOUBLE
75990: LD_VAR 0 1
75994: INC
75995: ST_TO_ADDR
75996: LD_INT 1
75998: PUSH
75999: FOR_DOWNTO
76000: IFFALSE 76077
// begin index := rand ( 1 , array ) ;
76002: LD_ADDR_VAR 0 4
76006: PUSH
76007: LD_INT 1
76009: PPUSH
76010: LD_VAR 0 1
76014: PPUSH
76015: CALL_OW 12
76019: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76020: LD_ADDR_VAR 0 2
76024: PUSH
76025: LD_VAR 0 2
76029: PPUSH
76030: LD_VAR 0 2
76034: PUSH
76035: LD_INT 1
76037: PLUS
76038: PPUSH
76039: LD_VAR 0 1
76043: PUSH
76044: LD_VAR 0 4
76048: ARRAY
76049: PPUSH
76050: CALL_OW 2
76054: ST_TO_ADDR
// array := Delete ( array , index ) ;
76055: LD_ADDR_VAR 0 1
76059: PUSH
76060: LD_VAR 0 1
76064: PPUSH
76065: LD_VAR 0 4
76069: PPUSH
76070: CALL_OW 3
76074: ST_TO_ADDR
// end ;
76075: GO 75999
76077: POP
76078: POP
// end ;
76079: LD_VAR 0 2
76083: RET
// export function GetBaseMaterials ( base ) ; begin
76084: LD_INT 0
76086: PPUSH
// result := [ 0 , 0 , 0 ] ;
76087: LD_ADDR_VAR 0 2
76091: PUSH
76092: LD_INT 0
76094: PUSH
76095: LD_INT 0
76097: PUSH
76098: LD_INT 0
76100: PUSH
76101: EMPTY
76102: LIST
76103: LIST
76104: LIST
76105: ST_TO_ADDR
// if not base then
76106: LD_VAR 0 1
76110: NOT
76111: IFFALSE 76115
// exit ;
76113: GO 76164
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76115: LD_ADDR_VAR 0 2
76119: PUSH
76120: LD_VAR 0 1
76124: PPUSH
76125: LD_INT 1
76127: PPUSH
76128: CALL_OW 275
76132: PUSH
76133: LD_VAR 0 1
76137: PPUSH
76138: LD_INT 2
76140: PPUSH
76141: CALL_OW 275
76145: PUSH
76146: LD_VAR 0 1
76150: PPUSH
76151: LD_INT 3
76153: PPUSH
76154: CALL_OW 275
76158: PUSH
76159: EMPTY
76160: LIST
76161: LIST
76162: LIST
76163: ST_TO_ADDR
// end ;
76164: LD_VAR 0 2
76168: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76169: LD_INT 0
76171: PPUSH
76172: PPUSH
// result := array ;
76173: LD_ADDR_VAR 0 3
76177: PUSH
76178: LD_VAR 0 1
76182: ST_TO_ADDR
// if size > 0 then
76183: LD_VAR 0 2
76187: PUSH
76188: LD_INT 0
76190: GREATER
76191: IFFALSE 76237
// for i := array downto size do
76193: LD_ADDR_VAR 0 4
76197: PUSH
76198: DOUBLE
76199: LD_VAR 0 1
76203: INC
76204: ST_TO_ADDR
76205: LD_VAR 0 2
76209: PUSH
76210: FOR_DOWNTO
76211: IFFALSE 76235
// result := Delete ( result , result ) ;
76213: LD_ADDR_VAR 0 3
76217: PUSH
76218: LD_VAR 0 3
76222: PPUSH
76223: LD_VAR 0 3
76227: PPUSH
76228: CALL_OW 3
76232: ST_TO_ADDR
76233: GO 76210
76235: POP
76236: POP
// end ;
76237: LD_VAR 0 3
76241: RET
// export function ComExit ( unit ) ; var tmp ; begin
76242: LD_INT 0
76244: PPUSH
76245: PPUSH
// if not IsInUnit ( unit ) then
76246: LD_VAR 0 1
76250: PPUSH
76251: CALL_OW 310
76255: NOT
76256: IFFALSE 76260
// exit ;
76258: GO 76320
// tmp := IsInUnit ( unit ) ;
76260: LD_ADDR_VAR 0 3
76264: PUSH
76265: LD_VAR 0 1
76269: PPUSH
76270: CALL_OW 310
76274: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76275: LD_VAR 0 3
76279: PPUSH
76280: CALL_OW 247
76284: PUSH
76285: LD_INT 2
76287: EQUAL
76288: IFFALSE 76301
// ComExitVehicle ( unit ) else
76290: LD_VAR 0 1
76294: PPUSH
76295: CALL_OW 121
76299: GO 76310
// ComExitBuilding ( unit ) ;
76301: LD_VAR 0 1
76305: PPUSH
76306: CALL_OW 122
// result := tmp ;
76310: LD_ADDR_VAR 0 2
76314: PUSH
76315: LD_VAR 0 3
76319: ST_TO_ADDR
// end ;
76320: LD_VAR 0 2
76324: RET
// export function ResetHc ; begin
76325: LD_INT 0
76327: PPUSH
// InitHc ;
76328: CALL_OW 19
// hc_importance := 0 ;
76332: LD_ADDR_OWVAR 32
76336: PUSH
76337: LD_INT 0
76339: ST_TO_ADDR
// end ;
76340: LD_VAR 0 1
76344: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76345: LD_INT 0
76347: PPUSH
76348: PPUSH
76349: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76350: LD_ADDR_VAR 0 6
76354: PUSH
76355: LD_VAR 0 1
76359: PUSH
76360: LD_VAR 0 3
76364: PLUS
76365: PUSH
76366: LD_INT 2
76368: DIV
76369: ST_TO_ADDR
// if _x < 0 then
76370: LD_VAR 0 6
76374: PUSH
76375: LD_INT 0
76377: LESS
76378: IFFALSE 76395
// _x := _x * - 1 ;
76380: LD_ADDR_VAR 0 6
76384: PUSH
76385: LD_VAR 0 6
76389: PUSH
76390: LD_INT 1
76392: NEG
76393: MUL
76394: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76395: LD_ADDR_VAR 0 7
76399: PUSH
76400: LD_VAR 0 2
76404: PUSH
76405: LD_VAR 0 4
76409: PLUS
76410: PUSH
76411: LD_INT 2
76413: DIV
76414: ST_TO_ADDR
// if _y < 0 then
76415: LD_VAR 0 7
76419: PUSH
76420: LD_INT 0
76422: LESS
76423: IFFALSE 76440
// _y := _y * - 1 ;
76425: LD_ADDR_VAR 0 7
76429: PUSH
76430: LD_VAR 0 7
76434: PUSH
76435: LD_INT 1
76437: NEG
76438: MUL
76439: ST_TO_ADDR
// result := [ _x , _y ] ;
76440: LD_ADDR_VAR 0 5
76444: PUSH
76445: LD_VAR 0 6
76449: PUSH
76450: LD_VAR 0 7
76454: PUSH
76455: EMPTY
76456: LIST
76457: LIST
76458: ST_TO_ADDR
// end ;
76459: LD_VAR 0 5
76463: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76464: LD_INT 0
76466: PPUSH
76467: PPUSH
76468: PPUSH
76469: PPUSH
// task := GetTaskList ( unit ) ;
76470: LD_ADDR_VAR 0 7
76474: PUSH
76475: LD_VAR 0 1
76479: PPUSH
76480: CALL_OW 437
76484: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76485: LD_VAR 0 7
76489: NOT
76490: PUSH
76491: LD_VAR 0 1
76495: PPUSH
76496: LD_VAR 0 2
76500: PPUSH
76501: CALL_OW 308
76505: NOT
76506: AND
76507: IFFALSE 76511
// exit ;
76509: GO 76629
// if IsInArea ( unit , area ) then
76511: LD_VAR 0 1
76515: PPUSH
76516: LD_VAR 0 2
76520: PPUSH
76521: CALL_OW 308
76525: IFFALSE 76543
// begin ComMoveToArea ( unit , goAway ) ;
76527: LD_VAR 0 1
76531: PPUSH
76532: LD_VAR 0 3
76536: PPUSH
76537: CALL_OW 113
// exit ;
76541: GO 76629
// end ; if task [ 1 ] [ 1 ] <> M then
76543: LD_VAR 0 7
76547: PUSH
76548: LD_INT 1
76550: ARRAY
76551: PUSH
76552: LD_INT 1
76554: ARRAY
76555: PUSH
76556: LD_STRING M
76558: NONEQUAL
76559: IFFALSE 76563
// exit ;
76561: GO 76629
// x := task [ 1 ] [ 2 ] ;
76563: LD_ADDR_VAR 0 5
76567: PUSH
76568: LD_VAR 0 7
76572: PUSH
76573: LD_INT 1
76575: ARRAY
76576: PUSH
76577: LD_INT 2
76579: ARRAY
76580: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76581: LD_ADDR_VAR 0 6
76585: PUSH
76586: LD_VAR 0 7
76590: PUSH
76591: LD_INT 1
76593: ARRAY
76594: PUSH
76595: LD_INT 3
76597: ARRAY
76598: ST_TO_ADDR
// if InArea ( x , y , area ) then
76599: LD_VAR 0 5
76603: PPUSH
76604: LD_VAR 0 6
76608: PPUSH
76609: LD_VAR 0 2
76613: PPUSH
76614: CALL_OW 309
76618: IFFALSE 76629
// ComStop ( unit ) ;
76620: LD_VAR 0 1
76624: PPUSH
76625: CALL_OW 141
// end ;
76629: LD_VAR 0 4
76633: RET
// export function Abs ( value ) ; begin
76634: LD_INT 0
76636: PPUSH
// result := value ;
76637: LD_ADDR_VAR 0 2
76641: PUSH
76642: LD_VAR 0 1
76646: ST_TO_ADDR
// if value < 0 then
76647: LD_VAR 0 1
76651: PUSH
76652: LD_INT 0
76654: LESS
76655: IFFALSE 76672
// result := value * - 1 ;
76657: LD_ADDR_VAR 0 2
76661: PUSH
76662: LD_VAR 0 1
76666: PUSH
76667: LD_INT 1
76669: NEG
76670: MUL
76671: ST_TO_ADDR
// end ;
76672: LD_VAR 0 2
76676: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76677: LD_INT 0
76679: PPUSH
76680: PPUSH
76681: PPUSH
76682: PPUSH
76683: PPUSH
76684: PPUSH
76685: PPUSH
76686: PPUSH
// if not unit or not building then
76687: LD_VAR 0 1
76691: NOT
76692: PUSH
76693: LD_VAR 0 2
76697: NOT
76698: OR
76699: IFFALSE 76703
// exit ;
76701: GO 76929
// x := GetX ( building ) ;
76703: LD_ADDR_VAR 0 4
76707: PUSH
76708: LD_VAR 0 2
76712: PPUSH
76713: CALL_OW 250
76717: ST_TO_ADDR
// y := GetY ( building ) ;
76718: LD_ADDR_VAR 0 6
76722: PUSH
76723: LD_VAR 0 2
76727: PPUSH
76728: CALL_OW 251
76732: ST_TO_ADDR
// d := GetDir ( building ) ;
76733: LD_ADDR_VAR 0 8
76737: PUSH
76738: LD_VAR 0 2
76742: PPUSH
76743: CALL_OW 254
76747: ST_TO_ADDR
// r := 4 ;
76748: LD_ADDR_VAR 0 9
76752: PUSH
76753: LD_INT 4
76755: ST_TO_ADDR
// for i := 1 to 5 do
76756: LD_ADDR_VAR 0 10
76760: PUSH
76761: DOUBLE
76762: LD_INT 1
76764: DEC
76765: ST_TO_ADDR
76766: LD_INT 5
76768: PUSH
76769: FOR_TO
76770: IFFALSE 76927
// begin _x := ShiftX ( x , d , r + i ) ;
76772: LD_ADDR_VAR 0 5
76776: PUSH
76777: LD_VAR 0 4
76781: PPUSH
76782: LD_VAR 0 8
76786: PPUSH
76787: LD_VAR 0 9
76791: PUSH
76792: LD_VAR 0 10
76796: PLUS
76797: PPUSH
76798: CALL_OW 272
76802: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76803: LD_ADDR_VAR 0 7
76807: PUSH
76808: LD_VAR 0 6
76812: PPUSH
76813: LD_VAR 0 8
76817: PPUSH
76818: LD_VAR 0 9
76822: PUSH
76823: LD_VAR 0 10
76827: PLUS
76828: PPUSH
76829: CALL_OW 273
76833: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76834: LD_VAR 0 5
76838: PPUSH
76839: LD_VAR 0 7
76843: PPUSH
76844: CALL_OW 488
76848: PUSH
76849: LD_VAR 0 5
76853: PPUSH
76854: LD_VAR 0 7
76858: PPUSH
76859: CALL_OW 428
76863: PPUSH
76864: CALL_OW 247
76868: PUSH
76869: LD_INT 3
76871: PUSH
76872: LD_INT 2
76874: PUSH
76875: EMPTY
76876: LIST
76877: LIST
76878: IN
76879: NOT
76880: AND
76881: IFFALSE 76925
// begin ComMoveXY ( unit , _x , _y ) ;
76883: LD_VAR 0 1
76887: PPUSH
76888: LD_VAR 0 5
76892: PPUSH
76893: LD_VAR 0 7
76897: PPUSH
76898: CALL_OW 111
// result := [ _x , _y ] ;
76902: LD_ADDR_VAR 0 3
76906: PUSH
76907: LD_VAR 0 5
76911: PUSH
76912: LD_VAR 0 7
76916: PUSH
76917: EMPTY
76918: LIST
76919: LIST
76920: ST_TO_ADDR
// exit ;
76921: POP
76922: POP
76923: GO 76929
// end ; end ;
76925: GO 76769
76927: POP
76928: POP
// end ;
76929: LD_VAR 0 3
76933: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76934: LD_INT 0
76936: PPUSH
76937: PPUSH
76938: PPUSH
// result := 0 ;
76939: LD_ADDR_VAR 0 3
76943: PUSH
76944: LD_INT 0
76946: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76947: LD_VAR 0 1
76951: PUSH
76952: LD_INT 0
76954: LESS
76955: PUSH
76956: LD_VAR 0 1
76960: PUSH
76961: LD_INT 8
76963: GREATER
76964: OR
76965: PUSH
76966: LD_VAR 0 2
76970: PUSH
76971: LD_INT 0
76973: LESS
76974: OR
76975: PUSH
76976: LD_VAR 0 2
76980: PUSH
76981: LD_INT 8
76983: GREATER
76984: OR
76985: IFFALSE 76989
// exit ;
76987: GO 77064
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76989: LD_ADDR_VAR 0 4
76993: PUSH
76994: LD_INT 22
76996: PUSH
76997: LD_VAR 0 2
77001: PUSH
77002: EMPTY
77003: LIST
77004: LIST
77005: PPUSH
77006: CALL_OW 69
77010: PUSH
77011: FOR_IN
77012: IFFALSE 77062
// begin un := UnitShoot ( i ) ;
77014: LD_ADDR_VAR 0 5
77018: PUSH
77019: LD_VAR 0 4
77023: PPUSH
77024: CALL_OW 504
77028: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77029: LD_VAR 0 5
77033: PPUSH
77034: CALL_OW 255
77038: PUSH
77039: LD_VAR 0 1
77043: EQUAL
77044: IFFALSE 77060
// begin result := un ;
77046: LD_ADDR_VAR 0 3
77050: PUSH
77051: LD_VAR 0 5
77055: ST_TO_ADDR
// exit ;
77056: POP
77057: POP
77058: GO 77064
// end ; end ;
77060: GO 77011
77062: POP
77063: POP
// end ; end_of_file
77064: LD_VAR 0 3
77068: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77069: LD_VAR 0 1
77073: PUSH
77074: LD_INT 200
77076: DOUBLE
77077: GREATEREQUAL
77078: IFFALSE 77086
77080: LD_INT 299
77082: DOUBLE
77083: LESSEQUAL
77084: IFTRUE 77088
77086: GO 77120
77088: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; end ;
77089: LD_VAR 0 1
77093: PPUSH
77094: LD_VAR 0 2
77098: PPUSH
77099: LD_VAR 0 3
77103: PPUSH
77104: LD_VAR 0 4
77108: PPUSH
77109: LD_VAR 0 5
77113: PPUSH
77114: CALL 35982 0 5
77118: GO 77121
77120: POP
// end ;
77121: PPOPN 11
77123: END
