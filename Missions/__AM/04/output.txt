// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 48
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 49
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 45
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// bonusAvalaible = 0 ;
  68: LD_ADDR_EXP 44
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// firstRussianAttack = 0 ;
  76: LD_ADDR_EXP 23
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// saveDonaldson = 0 ;
  84: LD_ADDR_EXP 24
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// frankScoutBase = 0 ;
  92: LD_ADDR_EXP 25
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// harrAnswer = 0 ;
 100: LD_ADDR_EXP 26
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 108: LD_ADDR_EXP 27
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 116: LD_ADDR_EXP 28
 120: PUSH
 121: LD_INT 18900
 123: ST_TO_ADDR
// timerStatus = 0 ;
 124: LD_ADDR_EXP 29
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// startTimer = 0 ;
 132: LD_ADDR_EXP 30
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// factoryDialog = 0 ;
 140: LD_ADDR_EXP 31
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// bunkerDialog = 0 ;
 148: LD_ADDR_EXP 32
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// energyVDialog = 0 ;
 156: LD_ADDR_EXP 33
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildOil = 0 ;
 164: LD_ADDR_EXP 34
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// buildPower = 0 ;
 172: LD_ADDR_EXP 35
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 180: LD_ADDR_EXP 36
 184: PUSH
 185: LD_INT 14
 187: PUSH
 188: LD_INT 12
 190: PUSH
 191: LD_INT 11
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_OWVAR 67
 203: ARRAY
 204: ST_TO_ADDR
// AIEnable = 1 ;
 205: LD_ADDR_EXP 37
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 213: LD_ADDR_EXP 41
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// lostCounter = 0 ;
 221: LD_ADDR_EXP 38
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// honor = 1 ;
 229: LD_ADDR_EXP 39
 233: PUSH
 234: LD_INT 1
 236: ST_TO_ADDR
// escapeAvalaible = 0 ;
 237: LD_ADDR_EXP 40
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// specAttack := false ;
 245: LD_ADDR_EXP 47
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// ruMobile := [ ] ;
 253: LD_ADDR_EXP 46
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// ruMech := [ 3 , 4 , 6 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 43
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: LD_INT 6
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: PUSH
 279: LD_OWVAR 67
 283: ARRAY
 284: ST_TO_ADDR
// PrepareDifficulty ;
 285: CALL 4714 0 0
// PrepareRussianBase ;
 289: CALL 3006 0 0
// PrepareRussianCommander ;
 293: CALL 2957 0 0
// PrepareHeroes ;
 297: CALL 479 0 0
// SetBName ( ambdept0 , gamma ) ;
 301: LD_INT 4
 303: PPUSH
 304: LD_STRING gamma
 306: PPUSH
 307: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 311: LD_INT 21
 313: PPUSH
 314: LD_STRING fyodor
 316: PPUSH
 317: CALL_OW 500
// end ;
 321: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 322: LD_EXP 45
 326: PUSH
 327: LD_INT 1
 329: EQUAL
 330: IFFALSE 435
 332: GO 334
 334: DISABLE
 335: LD_INT 0
 337: PPUSH
// begin enable ;
 338: ENABLE
// fogoff ( true ) ;
 339: LD_INT 1
 341: PPUSH
 342: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 346: LD_ADDR_VAR 0 1
 350: PUSH
 351: LD_INT 22
 353: PUSH
 354: LD_INT 1
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 21
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: FOR_IN
 381: IFFALSE 397
// SetLives ( i , 1000 ) ;
 383: LD_VAR 0 1
 387: PPUSH
 388: LD_INT 1000
 390: PPUSH
 391: CALL_OW 234
 395: GO 380
 397: POP
 398: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 399: LD_INT 4
 401: PPUSH
 402: CALL_OW 274
 406: PPUSH
 407: LD_INT 1
 409: PPUSH
 410: LD_INT 9999
 412: PPUSH
 413: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 417: LD_INT 4
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 2
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
// end ;
 435: PPOPN 1
 437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 438: LD_INT 22
 440: PUSH
 441: LD_INT 1
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 34
 450: PUSH
 451: LD_INT 44
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PPUSH
 462: CALL_OW 69
 466: IFFALSE 478
 468: GO 470
 470: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 471: LD_STRING ACH_GUN
 473: PPUSH
 474: CALL_OW 543
 478: END
// export function PrepareHeroes ; var i , tmp ; begin
 479: LD_INT 0
 481: PPUSH
 482: PPUSH
 483: PPUSH
// uc_side = 1 ;
 484: LD_ADDR_OWVAR 20
 488: PUSH
 489: LD_INT 1
 491: ST_TO_ADDR
// uc_nation = 1 ;
 492: LD_ADDR_OWVAR 21
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , mission_prefix_prev ) ;
 500: LD_ADDR_EXP 1
 504: PUSH
 505: LD_STRING JMM
 507: PPUSH
 508: LD_INT 1
 510: PPUSH
 511: LD_EXP 49
 515: PPUSH
 516: CALL 37164 0 3
 520: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , mission_prefix_prev ) ;
 521: LD_ADDR_EXP 4
 525: PUSH
 526: LD_STRING Lisa
 528: PPUSH
 529: LD_INT 1
 531: PPUSH
 532: LD_EXP 49
 536: PPUSH
 537: CALL 37164 0 3
 541: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 542: LD_ADDR_EXP 7
 546: PUSH
 547: LD_STRING Brown
 549: PPUSH
 550: LD_INT 0
 552: PPUSH
 553: LD_EXP 49
 557: PPUSH
 558: CALL 37164 0 3
 562: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 563: LD_ADDR_EXP 8
 567: PUSH
 568: LD_STRING Dickens
 570: PPUSH
 571: LD_INT 0
 573: PPUSH
 574: LD_EXP 49
 578: PPUSH
 579: CALL 37164 0 3
 583: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 584: LD_ADDR_EXP 9
 588: PUSH
 589: LD_STRING Woodruff
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: LD_EXP 49
 599: PPUSH
 600: CALL 37164 0 3
 604: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 605: LD_ADDR_EXP 12
 609: PUSH
 610: LD_STRING Campell
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: LD_EXP 49
 620: PPUSH
 621: CALL 37164 0 3
 625: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 626: LD_ADDR_EXP 10
 630: PUSH
 631: LD_STRING Knight
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: LD_EXP 49
 641: PPUSH
 642: CALL 37164 0 3
 646: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 647: LD_ADDR_EXP 11
 651: PUSH
 652: LD_STRING Claptopn
 654: PPUSH
 655: LD_INT 0
 657: PPUSH
 658: LD_EXP 49
 662: PPUSH
 663: CALL 37164 0 3
 667: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 668: LD_ADDR_EXP 14
 672: PUSH
 673: LD_STRING Harisson
 675: PPUSH
 676: LD_INT 0
 678: PPUSH
 679: LD_EXP 49
 683: PPUSH
 684: CALL 37164 0 3
 688: ST_TO_ADDR
// if Lisa = false then
 689: LD_EXP 4
 693: PUSH
 694: LD_INT 0
 696: EQUAL
 697: IFFALSE 720
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 699: LD_ADDR_EXP 2
 703: PUSH
 704: LD_STRING Bobby
 706: PPUSH
 707: LD_INT 1
 709: PPUSH
 710: LD_EXP 49
 714: PPUSH
 715: CALL 37164 0 3
 719: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 720: LD_EXP 4
 724: PUSH
 725: LD_INT 0
 727: EQUAL
 728: PUSH
 729: LD_EXP 2
 733: PUSH
 734: LD_INT 0
 736: EQUAL
 737: AND
 738: IFFALSE 761
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 740: LD_ADDR_EXP 3
 744: PUSH
 745: LD_STRING Cyrus
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: LD_EXP 49
 755: PPUSH
 756: CALL 37164 0 3
 760: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 761: LD_EXP 4
 765: PUSH
 766: LD_INT 0
 768: EQUAL
 769: PUSH
 770: LD_EXP 2
 774: PUSH
 775: LD_INT 0
 777: EQUAL
 778: AND
 779: PUSH
 780: LD_EXP 3
 784: PUSH
 785: LD_INT 0
 787: EQUAL
 788: AND
 789: IFFALSE 888
// begin tmp = CreateCharacterSet ( 03_others ) ;
 791: LD_ADDR_VAR 0 3
 795: PUSH
 796: LD_STRING 03_others
 798: PPUSH
 799: CALL_OW 31
 803: ST_TO_ADDR
// if tmp then
 804: LD_VAR 0 3
 808: IFFALSE 865
// begin RandomBeforeMission = tmp [ 1 ] ;
 810: LD_ADDR_EXP 6
 814: PUSH
 815: LD_VAR 0 3
 819: PUSH
 820: LD_INT 1
 822: ARRAY
 823: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 824: LD_STRING 03_others
 826: PPUSH
 827: CALL_OW 40
// if tmp > 1 then
 831: LD_VAR 0 3
 835: PUSH
 836: LD_INT 1
 838: GREATER
 839: IFFALSE 863
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 841: LD_VAR 0 3
 845: PUSH
 846: LD_VAR 0 3
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: DIFF
 855: PPUSH
 856: LD_STRING 03_others
 858: PPUSH
 859: CALL_OW 38
// end else
 863: GO 888
// begin PrepareHuman ( false , 1 , 3 ) ;
 865: LD_INT 0
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: LD_INT 3
 873: PPUSH
 874: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 878: LD_ADDR_EXP 6
 882: PUSH
 883: CALL_OW 44
 887: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 888: LD_ADDR_OWVAR 20
 892: PUSH
 893: LD_INT 4
 895: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 896: LD_ADDR_EXP 13
 900: PUSH
 901: LD_STRING Donaldson
 903: PPUSH
 904: LD_INT 0
 906: PPUSH
 907: LD_EXP 49
 911: PPUSH
 912: CALL 37164 0 3
 916: ST_TO_ADDR
// if TestCharacters ( 03_Frank ) = true then
 917: LD_STRING 03_Frank
 919: PPUSH
 920: CALL_OW 28
 924: PUSH
 925: LD_INT 1
 927: EQUAL
 928: IFFALSE 982
// begin Frank = PrepareUnit ( 03_Frank , true , mission_prefix_prev ) ;
 930: LD_ADDR_EXP 5
 934: PUSH
 935: LD_STRING 03_Frank
 937: PPUSH
 938: LD_INT 1
 940: PPUSH
 941: LD_EXP 49
 945: PPUSH
 946: CALL 37164 0 3
 950: ST_TO_ADDR
// if Frank = 0 then
 951: LD_EXP 5
 955: PUSH
 956: LD_INT 0
 958: EQUAL
 959: IFFALSE 982
// Frank = PrepareUnit ( Frank , false , mission_prefix_prev ) ;
 961: LD_ADDR_EXP 5
 965: PUSH
 966: LD_STRING Frank
 968: PPUSH
 969: LD_INT 0
 971: PPUSH
 972: LD_EXP 49
 976: PPUSH
 977: CALL 37164 0 3
 981: ST_TO_ADDR
// end ; PlaceHumanInUnit ( JMM , amvj ) ;
 982: LD_EXP 1
 986: PPUSH
 987: LD_INT 32
 989: PPUSH
 990: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 994: LD_EXP 7
 998: PPUSH
 999: LD_INT 1
1001: PPUSH
1002: LD_INT 0
1004: PPUSH
1005: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
1009: LD_EXP 7
1013: PPUSH
1014: LD_INT 32
1016: PPUSH
1017: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
1021: LD_EXP 8
1025: PPUSH
1026: LD_INT 2
1028: PPUSH
1029: LD_INT 0
1031: PPUSH
1032: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1036: LD_EXP 9
1040: PPUSH
1041: LD_INT 2
1043: PPUSH
1044: LD_INT 0
1046: PPUSH
1047: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1051: LD_EXP 12
1055: PPUSH
1056: LD_INT 2
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1066: LD_EXP 10
1070: PPUSH
1071: LD_INT 2
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1081: LD_EXP 11
1085: PPUSH
1086: LD_INT 2
1088: PPUSH
1089: LD_INT 0
1091: PPUSH
1092: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1096: LD_EXP 4
1100: PPUSH
1101: LD_INT 2
1103: PPUSH
1104: LD_INT 0
1106: PPUSH
1107: CALL_OW 49
// if Lisa = false then
1111: LD_EXP 4
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: IFFALSE 1136
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1121: LD_EXP 2
1125: PPUSH
1126: LD_INT 2
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL_OW 49
// if Lisa = false and Bobby = false then
1136: LD_EXP 4
1140: PUSH
1141: LD_INT 0
1143: EQUAL
1144: PUSH
1145: LD_EXP 2
1149: PUSH
1150: LD_INT 0
1152: EQUAL
1153: AND
1154: IFFALSE 1171
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1156: LD_EXP 3
1160: PPUSH
1161: LD_INT 2
1163: PPUSH
1164: LD_INT 0
1166: PPUSH
1167: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1171: LD_EXP 4
1175: PUSH
1176: LD_INT 0
1178: EQUAL
1179: PUSH
1180: LD_EXP 2
1184: PUSH
1185: LD_INT 0
1187: EQUAL
1188: AND
1189: PUSH
1190: LD_EXP 3
1194: PUSH
1195: LD_INT 0
1197: EQUAL
1198: AND
1199: IFFALSE 1216
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1201: LD_EXP 6
1205: PPUSH
1206: LD_INT 2
1208: PPUSH
1209: LD_INT 0
1211: PPUSH
1212: CALL_OW 49
// end ;
1216: LD_VAR 0 1
1220: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1221: LD_INT 0
1223: PPUSH
1224: PPUSH
1225: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1226: LD_EXP 13
1230: PPUSH
1231: LD_INT 10
1233: PPUSH
1234: LD_INT 0
1236: PPUSH
1237: CALL_OW 49
// if Frank then
1241: LD_EXP 5
1245: IFFALSE 1262
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1247: LD_EXP 5
1251: PPUSH
1252: LD_INT 10
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 49
// uc_nation = 1 ;
1262: LD_ADDR_OWVAR 21
1266: PUSH
1267: LD_INT 1
1269: ST_TO_ADDR
// uc_side = 4 ;
1270: LD_ADDR_OWVAR 20
1274: PUSH
1275: LD_INT 4
1277: ST_TO_ADDR
// hc_class := 3 ;
1278: LD_ADDR_OWVAR 28
1282: PUSH
1283: LD_INT 3
1285: ST_TO_ADDR
// hc_sex := sex_male ;
1286: LD_ADDR_OWVAR 27
1290: PUSH
1291: LD_INT 1
1293: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1294: LD_ADDR_OWVAR 33
1298: PUSH
1299: LD_STRING SecondCharsGal
1301: ST_TO_ADDR
// hc_face_number := 53 ;
1302: LD_ADDR_OWVAR 34
1306: PUSH
1307: LD_INT 53
1309: ST_TO_ADDR
// hc_name := Freddie Warner ;
1310: LD_ADDR_OWVAR 26
1314: PUSH
1315: LD_STRING Freddie Warner
1317: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1318: LD_ADDR_OWVAR 29
1322: PUSH
1323: LD_INT 8
1325: PUSH
1326: LD_INT 11
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1333: LD_ADDR_OWVAR 30
1337: PUSH
1338: LD_INT 0
1340: PUSH
1341: LD_INT 0
1343: PUSH
1344: LD_INT 1
1346: PUSH
1347: LD_INT 0
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1356: LD_ADDR_OWVAR 31
1360: PUSH
1361: LD_INT 1
1363: PUSH
1364: LD_INT 0
1366: PUSH
1367: LD_INT 3
1369: PUSH
1370: LD_INT 2
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: ST_TO_ADDR
// un = CreateHuman ;
1379: LD_ADDR_VAR 0 3
1383: PUSH
1384: CALL_OW 44
1388: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1389: LD_VAR 0 3
1393: PPUSH
1394: LD_INT 10
1396: PPUSH
1397: LD_INT 0
1399: PPUSH
1400: CALL_OW 49
// hc_class := 1 ;
1404: LD_ADDR_OWVAR 28
1408: PUSH
1409: LD_INT 1
1411: ST_TO_ADDR
// hc_sex := sex_male ;
1412: LD_ADDR_OWVAR 27
1416: PUSH
1417: LD_INT 1
1419: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1420: LD_ADDR_OWVAR 33
1424: PUSH
1425: LD_STRING SecondCharsGal
1427: ST_TO_ADDR
// hc_face_number := 56 ;
1428: LD_ADDR_OWVAR 34
1432: PUSH
1433: LD_INT 56
1435: ST_TO_ADDR
// hc_name := Mel Brennan ;
1436: LD_ADDR_OWVAR 26
1440: PUSH
1441: LD_STRING Mel Brennan
1443: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1444: LD_ADDR_OWVAR 29
1448: PUSH
1449: LD_INT 12
1451: PUSH
1452: LD_INT 11
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1459: LD_ADDR_OWVAR 30
1463: PUSH
1464: LD_INT 1
1466: PUSH
1467: LD_INT 1
1469: PUSH
1470: LD_INT 0
1472: PUSH
1473: LD_INT 0
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1482: LD_ADDR_OWVAR 31
1486: PUSH
1487: LD_INT 3
1489: PUSH
1490: LD_INT 1
1492: PUSH
1493: LD_INT 1
1495: PUSH
1496: LD_INT 0
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: ST_TO_ADDR
// un = CreateHuman ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: CALL_OW 44
1514: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1515: LD_VAR 0 3
1519: PPUSH
1520: LD_INT 10
1522: PPUSH
1523: LD_INT 0
1525: PPUSH
1526: CALL_OW 49
// hc_class := 1 ;
1530: LD_ADDR_OWVAR 28
1534: PUSH
1535: LD_INT 1
1537: ST_TO_ADDR
// hc_sex := sex_male ;
1538: LD_ADDR_OWVAR 27
1542: PUSH
1543: LD_INT 1
1545: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1546: LD_ADDR_OWVAR 33
1550: PUSH
1551: LD_STRING AmGalRemake
1553: ST_TO_ADDR
// hc_face_number := 5 ;
1554: LD_ADDR_OWVAR 34
1558: PUSH
1559: LD_INT 5
1561: ST_TO_ADDR
// hc_name := Bob Joplin ;
1562: LD_ADDR_OWVAR 26
1566: PUSH
1567: LD_STRING Bob Joplin
1569: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1570: LD_ADDR_OWVAR 29
1574: PUSH
1575: LD_INT 10
1577: PUSH
1578: LD_INT 11
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1585: LD_ADDR_OWVAR 30
1589: PUSH
1590: LD_INT 0
1592: PUSH
1593: LD_INT 1
1595: PUSH
1596: LD_INT 1
1598: PUSH
1599: LD_INT 0
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1608: LD_ADDR_OWVAR 31
1612: PUSH
1613: LD_INT 3
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 1
1621: PUSH
1622: LD_INT 1
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: ST_TO_ADDR
// un = CreateHuman ;
1631: LD_ADDR_VAR 0 3
1635: PUSH
1636: CALL_OW 44
1640: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1641: LD_VAR 0 3
1645: PPUSH
1646: LD_INT 10
1648: PPUSH
1649: LD_INT 0
1651: PPUSH
1652: CALL_OW 49
// hc_class := 3 ;
1656: LD_ADDR_OWVAR 28
1660: PUSH
1661: LD_INT 3
1663: ST_TO_ADDR
// hc_sex := sex_female ;
1664: LD_ADDR_OWVAR 27
1668: PUSH
1669: LD_INT 2
1671: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1672: LD_ADDR_OWVAR 33
1676: PUSH
1677: LD_STRING AmGalRemake
1679: ST_TO_ADDR
// hc_face_number := 8 ;
1680: LD_ADDR_OWVAR 34
1684: PUSH
1685: LD_INT 8
1687: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1688: LD_ADDR_OWVAR 26
1692: PUSH
1693: LD_STRING Elizabeth Whitney
1695: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1696: LD_ADDR_OWVAR 29
1700: PUSH
1701: LD_INT 9
1703: PUSH
1704: LD_INT 11
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1711: LD_ADDR_OWVAR 30
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: LD_INT 0
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: LD_INT 0
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1734: LD_ADDR_OWVAR 31
1738: PUSH
1739: LD_INT 2
1741: PUSH
1742: LD_INT 2
1744: PUSH
1745: LD_INT 4
1747: PUSH
1748: LD_INT 2
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: ST_TO_ADDR
// un = CreateHuman ;
1757: LD_ADDR_VAR 0 3
1761: PUSH
1762: CALL_OW 44
1766: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1767: LD_VAR 0 3
1771: PPUSH
1772: LD_INT 10
1774: PPUSH
1775: LD_INT 0
1777: PPUSH
1778: CALL_OW 49
// InitHc ;
1782: CALL_OW 19
// end ;
1786: LD_VAR 0 1
1790: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1791: LD_INT 0
1793: PPUSH
1794: PPUSH
1795: PPUSH
1796: PPUSH
// uc_nation = 1 ;
1797: LD_ADDR_OWVAR 21
1801: PUSH
1802: LD_INT 1
1804: ST_TO_ADDR
// uc_side = 1 ;
1805: LD_ADDR_OWVAR 20
1809: PUSH
1810: LD_INT 1
1812: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1813: LD_ADDR_OWVAR 37
1817: PUSH
1818: LD_INT 2
1820: ST_TO_ADDR
// vc_engine := engine_combustion ;
1821: LD_ADDR_OWVAR 39
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// vc_control := control_manual ;
1829: LD_ADDR_OWVAR 38
1833: PUSH
1834: LD_INT 1
1836: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1837: LD_ADDR_OWVAR 41
1841: PUSH
1842: LD_INT 65
1844: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun ] [ Difficulty ] ;
1845: LD_ADDR_OWVAR 40
1849: PUSH
1850: LD_INT 5
1852: PUSH
1853: LD_INT 3
1855: PUSH
1856: LD_INT 4
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: LIST
1863: PUSH
1864: LD_OWVAR 67
1868: ARRAY
1869: ST_TO_ADDR
// veh := CreateVehicle ;
1870: LD_ADDR_VAR 0 5
1874: PUSH
1875: CALL_OW 45
1879: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1880: LD_VAR 0 5
1884: PPUSH
1885: LD_INT 2
1887: PPUSH
1888: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1892: LD_INT 17
1894: PPUSH
1895: LD_INT 4
1897: PPUSH
1898: CALL_OW 428
1902: PUSH
1903: LD_INT 0
1905: EQUAL
1906: IFFALSE 1928
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1908: LD_VAR 0 5
1912: PPUSH
1913: LD_INT 17
1915: PPUSH
1916: LD_INT 4
1918: PPUSH
1919: LD_INT 0
1921: PPUSH
1922: CALL_OW 48
1926: GO 1946
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1928: LD_VAR 0 5
1932: PPUSH
1933: LD_INT 23
1935: PPUSH
1936: LD_INT 10
1938: PPUSH
1939: LD_INT 0
1941: PPUSH
1942: CALL_OW 48
// hc_class := 1 ;
1946: LD_ADDR_OWVAR 28
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// hc_sex := sex_male ;
1954: LD_ADDR_OWVAR 27
1958: PUSH
1959: LD_INT 1
1961: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1962: LD_ADDR_OWVAR 33
1966: PUSH
1967: LD_STRING SecondCharsGal
1969: ST_TO_ADDR
// hc_face_number := 59 ;
1970: LD_ADDR_OWVAR 34
1974: PUSH
1975: LD_INT 59
1977: ST_TO_ADDR
// hc_name := Max Gray ;
1978: LD_ADDR_OWVAR 26
1982: PUSH
1983: LD_STRING Max Gray
1985: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1986: LD_ADDR_OWVAR 29
1990: PUSH
1991: LD_INT 9
1993: PUSH
1994: LD_INT 11
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2001: LD_ADDR_OWVAR 30
2005: PUSH
2006: LD_INT 1
2008: PUSH
2009: LD_INT 0
2011: PUSH
2012: LD_INT 0
2014: PUSH
2015: LD_INT 0
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
2024: LD_ADDR_OWVAR 31
2028: PUSH
2029: LD_INT 4
2031: PUSH
2032: LD_INT 1
2034: PUSH
2035: LD_INT 1
2037: PUSH
2038: LD_INT 0
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: ST_TO_ADDR
// un = CreateHuman ;
2047: LD_ADDR_VAR 0 4
2051: PUSH
2052: CALL_OW 44
2056: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2057: LD_VAR 0 4
2061: PPUSH
2062: LD_INT 11
2064: PPUSH
2065: LD_INT 0
2067: PPUSH
2068: CALL_OW 49
// hc_class := 2 ;
2072: LD_ADDR_OWVAR 28
2076: PUSH
2077: LD_INT 2
2079: ST_TO_ADDR
// hc_sex := sex_male ;
2080: LD_ADDR_OWVAR 27
2084: PUSH
2085: LD_INT 1
2087: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2088: LD_ADDR_OWVAR 33
2092: PUSH
2093: LD_STRING SecondCharsGal
2095: ST_TO_ADDR
// hc_face_number := 50 ;
2096: LD_ADDR_OWVAR 34
2100: PUSH
2101: LD_INT 50
2103: ST_TO_ADDR
// hc_name := Frank Hughes ;
2104: LD_ADDR_OWVAR 26
2108: PUSH
2109: LD_STRING Frank Hughes
2111: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2112: LD_ADDR_OWVAR 29
2116: PUSH
2117: LD_INT 10
2119: PUSH
2120: LD_INT 10
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2127: LD_ADDR_OWVAR 30
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: LD_INT 2
2137: PUSH
2138: LD_INT 0
2140: PUSH
2141: LD_INT 0
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2150: LD_ADDR_OWVAR 31
2154: PUSH
2155: LD_INT 1
2157: PUSH
2158: LD_INT 3
2160: PUSH
2161: LD_INT 0
2163: PUSH
2164: LD_INT 1
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: ST_TO_ADDR
// un = CreateHuman ;
2173: LD_ADDR_VAR 0 4
2177: PUSH
2178: CALL_OW 44
2182: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2183: LD_VAR 0 4
2187: PPUSH
2188: LD_INT 11
2190: PPUSH
2191: LD_INT 0
2193: PPUSH
2194: CALL_OW 49
// hc_class := 1 ;
2198: LD_ADDR_OWVAR 28
2202: PUSH
2203: LD_INT 1
2205: ST_TO_ADDR
// hc_sex := sex_male ;
2206: LD_ADDR_OWVAR 27
2210: PUSH
2211: LD_INT 1
2213: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2214: LD_ADDR_OWVAR 33
2218: PUSH
2219: LD_STRING SecondCharsGal
2221: ST_TO_ADDR
// hc_face_number := 54 ;
2222: LD_ADDR_OWVAR 34
2226: PUSH
2227: LD_INT 54
2229: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2230: LD_ADDR_OWVAR 26
2234: PUSH
2235: LD_STRING Luigi Ghbellin
2237: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2238: LD_ADDR_OWVAR 29
2242: PUSH
2243: LD_INT 11
2245: PUSH
2246: LD_INT 11
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2253: LD_ADDR_OWVAR 30
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: LD_INT 0
2263: PUSH
2264: LD_INT 0
2266: PUSH
2267: LD_INT 0
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2276: LD_ADDR_OWVAR 31
2280: PUSH
2281: LD_INT 2
2283: PUSH
2284: LD_INT 1
2286: PUSH
2287: LD_INT 1
2289: PUSH
2290: LD_INT 1
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: ST_TO_ADDR
// un = CreateHuman ;
2299: LD_ADDR_VAR 0 4
2303: PUSH
2304: CALL_OW 44
2308: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2309: LD_VAR 0 4
2313: PPUSH
2314: LD_INT 11
2316: PPUSH
2317: LD_INT 0
2319: PPUSH
2320: CALL_OW 49
// hc_class := 3 ;
2324: LD_ADDR_OWVAR 28
2328: PUSH
2329: LD_INT 3
2331: ST_TO_ADDR
// hc_sex := sex_male ;
2332: LD_ADDR_OWVAR 27
2336: PUSH
2337: LD_INT 1
2339: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2340: LD_ADDR_OWVAR 33
2344: PUSH
2345: LD_STRING AmGalRemake
2347: ST_TO_ADDR
// hc_face_number := 6 ;
2348: LD_ADDR_OWVAR 34
2352: PUSH
2353: LD_INT 6
2355: ST_TO_ADDR
// hc_name := Leon Carter ;
2356: LD_ADDR_OWVAR 26
2360: PUSH
2361: LD_STRING Leon Carter
2363: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2364: LD_ADDR_OWVAR 29
2368: PUSH
2369: LD_INT 10
2371: PUSH
2372: LD_INT 9
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2379: LD_ADDR_OWVAR 30
2383: PUSH
2384: LD_INT 0
2386: PUSH
2387: LD_INT 1
2389: PUSH
2390: LD_INT 2
2392: PUSH
2393: LD_INT 1
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2402: LD_ADDR_OWVAR 31
2406: PUSH
2407: LD_INT 0
2409: PUSH
2410: LD_INT 2
2412: PUSH
2413: LD_INT 3
2415: PUSH
2416: LD_INT 1
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: ST_TO_ADDR
// un = CreateHuman ;
2425: LD_ADDR_VAR 0 4
2429: PUSH
2430: CALL_OW 44
2434: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2435: LD_VAR 0 4
2439: PPUSH
2440: LD_VAR 0 5
2444: PPUSH
2445: CALL_OW 52
// if count = 4 then
2449: LD_VAR 0 1
2453: PUSH
2454: LD_INT 4
2456: EQUAL
2457: IFFALSE 2585
// begin hc_class := 1 ;
2459: LD_ADDR_OWVAR 28
2463: PUSH
2464: LD_INT 1
2466: ST_TO_ADDR
// hc_sex := sex_male ;
2467: LD_ADDR_OWVAR 27
2471: PUSH
2472: LD_INT 1
2474: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2475: LD_ADDR_OWVAR 33
2479: PUSH
2480: LD_STRING SecondCharsGal
2482: ST_TO_ADDR
// hc_face_number := 34 ;
2483: LD_ADDR_OWVAR 34
2487: PUSH
2488: LD_INT 34
2490: ST_TO_ADDR
// hc_name := Ian Hill ;
2491: LD_ADDR_OWVAR 26
2495: PUSH
2496: LD_STRING Ian Hill
2498: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2499: LD_ADDR_OWVAR 29
2503: PUSH
2504: LD_INT 10
2506: PUSH
2507: LD_INT 12
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2514: LD_ADDR_OWVAR 30
2518: PUSH
2519: LD_INT 1
2521: PUSH
2522: LD_INT 0
2524: PUSH
2525: LD_INT 0
2527: PUSH
2528: LD_INT 0
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2537: LD_ADDR_OWVAR 31
2541: PUSH
2542: LD_INT 3
2544: PUSH
2545: LD_INT 1
2547: PUSH
2548: LD_INT 1
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: ST_TO_ADDR
// un = CreateHuman ;
2560: LD_ADDR_VAR 0 4
2564: PUSH
2565: CALL_OW 44
2569: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2570: LD_VAR 0 4
2574: PPUSH
2575: LD_INT 11
2577: PPUSH
2578: LD_INT 0
2580: PPUSH
2581: CALL_OW 49
// end ; if count = 5 then
2585: LD_VAR 0 1
2589: PUSH
2590: LD_INT 5
2592: EQUAL
2593: IFFALSE 2847
// begin hc_class := 1 ;
2595: LD_ADDR_OWVAR 28
2599: PUSH
2600: LD_INT 1
2602: ST_TO_ADDR
// hc_sex := sex_male ;
2603: LD_ADDR_OWVAR 27
2607: PUSH
2608: LD_INT 1
2610: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2611: LD_ADDR_OWVAR 33
2615: PUSH
2616: LD_STRING SecondCharsGal
2618: ST_TO_ADDR
// hc_face_number := 34 ;
2619: LD_ADDR_OWVAR 34
2623: PUSH
2624: LD_INT 34
2626: ST_TO_ADDR
// hc_name := Ian Hill ;
2627: LD_ADDR_OWVAR 26
2631: PUSH
2632: LD_STRING Ian Hill
2634: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2635: LD_ADDR_OWVAR 29
2639: PUSH
2640: LD_INT 10
2642: PUSH
2643: LD_INT 12
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2650: LD_ADDR_OWVAR 30
2654: PUSH
2655: LD_INT 1
2657: PUSH
2658: LD_INT 0
2660: PUSH
2661: LD_INT 0
2663: PUSH
2664: LD_INT 0
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: LIST
2671: LIST
2672: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2673: LD_ADDR_OWVAR 31
2677: PUSH
2678: LD_INT 3
2680: PUSH
2681: LD_INT 1
2683: PUSH
2684: LD_INT 1
2686: PUSH
2687: LD_INT 0
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: ST_TO_ADDR
// un = CreateHuman ;
2696: LD_ADDR_VAR 0 4
2700: PUSH
2701: CALL_OW 44
2705: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2706: LD_VAR 0 4
2710: PPUSH
2711: LD_INT 11
2713: PPUSH
2714: LD_INT 0
2716: PPUSH
2717: CALL_OW 49
// hc_class := 1 ;
2721: LD_ADDR_OWVAR 28
2725: PUSH
2726: LD_INT 1
2728: ST_TO_ADDR
// hc_sex := sex_female ;
2729: LD_ADDR_OWVAR 27
2733: PUSH
2734: LD_INT 2
2736: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2737: LD_ADDR_OWVAR 33
2741: PUSH
2742: LD_STRING SecondCharsGal
2744: ST_TO_ADDR
// hc_face_number := 41 ;
2745: LD_ADDR_OWVAR 34
2749: PUSH
2750: LD_INT 41
2752: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2753: LD_ADDR_OWVAR 26
2757: PUSH
2758: LD_STRING Kate Wadsworth
2760: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2761: LD_ADDR_OWVAR 29
2765: PUSH
2766: LD_INT 9
2768: PUSH
2769: LD_INT 9
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2776: LD_ADDR_OWVAR 30
2780: PUSH
2781: LD_INT 0
2783: PUSH
2784: LD_INT 2
2786: PUSH
2787: LD_INT 0
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2799: LD_ADDR_OWVAR 31
2803: PUSH
2804: LD_INT 2
2806: PUSH
2807: LD_INT 3
2809: PUSH
2810: LD_INT 1
2812: PUSH
2813: LD_INT 0
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: LIST
2820: LIST
2821: ST_TO_ADDR
// un = CreateHuman ;
2822: LD_ADDR_VAR 0 4
2826: PUSH
2827: CALL_OW 44
2831: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2832: LD_VAR 0 4
2836: PPUSH
2837: LD_INT 11
2839: PPUSH
2840: LD_INT 0
2842: PPUSH
2843: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2847: LD_INT 11
2849: PPUSH
2850: LD_INT 22
2852: PUSH
2853: LD_INT 1
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PUSH
2860: LD_INT 21
2862: PUSH
2863: LD_INT 1
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: PUSH
2870: LD_INT 26
2872: PUSH
2873: LD_INT 1
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: LIST
2884: PPUSH
2885: CALL_OW 70
2889: PUSH
2890: LD_INT 1
2892: ARRAY
2893: PPUSH
2894: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2898: LD_INT 11
2900: PPUSH
2901: LD_INT 22
2903: PUSH
2904: LD_INT 1
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 21
2913: PUSH
2914: LD_INT 1
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PUSH
2921: LD_INT 26
2923: PUSH
2924: LD_INT 1
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: LIST
2935: PPUSH
2936: CALL_OW 70
2940: PUSH
2941: LD_INT 1
2943: ARRAY
2944: PPUSH
2945: LD_STRING D6-Sol3-1
2947: PPUSH
2948: CALL_OW 88
// end ; end_of_file
2952: LD_VAR 0 2
2956: RET
// export function PrepareRussianCommander ; begin
2957: LD_INT 0
2959: PPUSH
// uc_side = 3 ;
2960: LD_ADDR_OWVAR 20
2964: PUSH
2965: LD_INT 3
2967: ST_TO_ADDR
// uc_nation = 3 ;
2968: LD_ADDR_OWVAR 21
2972: PUSH
2973: LD_INT 3
2975: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2976: LD_ADDR_EXP 15
2980: PUSH
2981: LD_STRING Stolypin
2983: PPUSH
2984: CALL_OW 25
2988: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2989: LD_EXP 15
2993: PPUSH
2994: LD_INT 21
2996: PPUSH
2997: CALL_OW 52
// end ;
3001: LD_VAR 0 1
3005: RET
// export function PrepareRussianBase ; var i , b , un ; begin
3006: LD_INT 0
3008: PPUSH
3009: PPUSH
3010: PPUSH
3011: PPUSH
// if Difficulty > 1 then
3012: LD_OWVAR 67
3016: PUSH
3017: LD_INT 1
3019: GREATER
3020: IFFALSE 3130
// begin uc_side := 3 ;
3022: LD_ADDR_OWVAR 20
3026: PUSH
3027: LD_INT 3
3029: ST_TO_ADDR
// uc_nation := 3 ;
3030: LD_ADDR_OWVAR 21
3034: PUSH
3035: LD_INT 3
3037: ST_TO_ADDR
// InitHc ;
3038: CALL_OW 19
// InitBc ;
3042: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3046: LD_INT 0
3048: PPUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_INT 4
3054: PPUSH
3055: CALL_OW 380
// bc_type := b_breastwork ;
3059: LD_ADDR_OWVAR 42
3063: PUSH
3064: LD_INT 31
3066: ST_TO_ADDR
// bc_level := 4 ;
3067: LD_ADDR_OWVAR 43
3071: PUSH
3072: LD_INT 4
3074: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3075: LD_ADDR_VAR 0 3
3079: PUSH
3080: LD_INT 100
3082: PPUSH
3083: LD_INT 58
3085: PPUSH
3086: LD_INT 2
3088: PPUSH
3089: CALL_OW 47
3093: ST_TO_ADDR
// un := CreateHuman ;
3094: LD_ADDR_VAR 0 4
3098: PUSH
3099: CALL_OW 44
3103: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3104: LD_VAR 0 4
3108: PPUSH
3109: LD_INT 5
3111: PPUSH
3112: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3116: LD_VAR 0 4
3120: PPUSH
3121: LD_VAR 0 3
3125: PPUSH
3126: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3130: LD_INT 3
3132: PPUSH
3133: LD_INT 3
3135: PPUSH
3136: LD_INT 22
3138: PPUSH
3139: LD_EXP 16
3143: PPUSH
3144: LD_EXP 17
3148: PPUSH
3149: CALL_OW 12
3153: PPUSH
3154: LD_INT 1
3156: PPUSH
3157: LD_INT 3
3159: PUSH
3160: LD_INT 4
3162: PUSH
3163: LD_INT 5
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: LIST
3170: PUSH
3171: LD_OWVAR 67
3175: ARRAY
3176: PPUSH
3177: CALL 4379 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3181: LD_INT 3
3183: PPUSH
3184: LD_INT 3
3186: PPUSH
3187: LD_INT 21
3189: PPUSH
3190: LD_EXP 16
3194: PPUSH
3195: LD_EXP 17
3199: PPUSH
3200: CALL_OW 12
3204: PPUSH
3205: LD_INT 2
3207: PPUSH
3208: LD_INT 3
3210: PPUSH
3211: CALL 4379 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3215: LD_INT 3
3217: PPUSH
3218: LD_INT 3
3220: PPUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_EXP 16
3228: PPUSH
3229: LD_EXP 17
3233: PPUSH
3234: CALL_OW 12
3238: PPUSH
3239: LD_INT 4
3241: PPUSH
3242: LD_INT 3
3244: PPUSH
3245: CALL 4379 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3249: LD_INT 3
3251: PPUSH
3252: LD_INT 3
3254: PPUSH
3255: LD_INT 24
3257: PPUSH
3258: LD_EXP 16
3262: PPUSH
3263: LD_EXP 17
3267: PPUSH
3268: CALL_OW 12
3272: PPUSH
3273: LD_INT 3
3275: PPUSH
3276: LD_INT 5
3278: PPUSH
3279: CALL 4379 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3283: LD_ADDR_VAR 0 2
3287: PUSH
3288: LD_INT 22
3290: PUSH
3291: LD_INT 3
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PUSH
3298: LD_INT 30
3300: PUSH
3301: LD_INT 32
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PPUSH
3312: CALL_OW 69
3316: PUSH
3317: FOR_IN
3318: IFFALSE 3358
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3320: LD_INT 3
3322: PPUSH
3323: LD_INT 3
3325: PPUSH
3326: LD_VAR 0 2
3330: PPUSH
3331: LD_EXP 16
3335: PPUSH
3336: LD_EXP 17
3340: PPUSH
3341: CALL_OW 12
3345: PPUSH
3346: LD_INT 1
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: CALL 4379 0 6
3356: GO 3317
3358: POP
3359: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3360: LD_ADDR_VAR 0 2
3364: PUSH
3365: LD_INT 22
3367: PUSH
3368: LD_INT 3
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PUSH
3375: LD_INT 30
3377: PUSH
3378: LD_INT 31
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PPUSH
3389: CALL_OW 69
3393: PUSH
3394: FOR_IN
3395: IFFALSE 3423
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3397: LD_EXP 16
3401: PPUSH
3402: LD_EXP 17
3406: PPUSH
3407: CALL_OW 12
3411: PPUSH
3412: LD_VAR 0 2
3416: PPUSH
3417: CALL 4489 0 2
3421: GO 3394
3423: POP
3424: POP
// end ;
3425: LD_VAR 0 1
3429: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3430: LD_INT 0
3432: PPUSH
3433: PPUSH
3434: PPUSH
3435: PPUSH
// uc_side = 6 ;
3436: LD_ADDR_OWVAR 20
3440: PUSH
3441: LD_INT 6
3443: ST_TO_ADDR
// uc_nation = 3 ;
3444: LD_ADDR_OWVAR 21
3448: PUSH
3449: LD_INT 3
3451: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
3452: LD_ADDR_VAR 0 2
3456: PUSH
3457: DOUBLE
3458: LD_INT 1
3460: DEC
3461: ST_TO_ADDR
3462: LD_INT 1
3464: PUSH
3465: LD_INT 2
3467: PUSH
3468: LD_INT 1
3470: PPUSH
3471: LD_INT 2
3473: PPUSH
3474: CALL_OW 12
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: LIST
3483: PUSH
3484: LD_OWVAR 67
3488: ARRAY
3489: PUSH
3490: FOR_TO
3491: IFFALSE 3651
// begin vc_engine = 1 ;
3493: LD_ADDR_OWVAR 39
3497: PUSH
3498: LD_INT 1
3500: ST_TO_ADDR
// vc_control = 1 ;
3501: LD_ADDR_OWVAR 38
3505: PUSH
3506: LD_INT 1
3508: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
3509: LD_ADDR_OWVAR 40
3513: PUSH
3514: LD_INT 42
3516: PUSH
3517: LD_INT 42
3519: PUSH
3520: LD_INT 43
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: LIST
3527: PUSH
3528: LD_OWVAR 67
3532: ARRAY
3533: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
3534: LD_ADDR_OWVAR 37
3538: PUSH
3539: LD_INT 21
3541: PUSH
3542: LD_INT 22
3544: PUSH
3545: LD_INT 22
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: LIST
3552: PUSH
3553: LD_OWVAR 67
3557: ARRAY
3558: ST_TO_ADDR
// veh = CreateVehicle ;
3559: LD_ADDR_VAR 0 3
3563: PUSH
3564: CALL_OW 45
3568: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3569: LD_VAR 0 3
3573: PPUSH
3574: LD_INT 3
3576: PPUSH
3577: LD_INT 0
3579: PPUSH
3580: CALL_OW 49
// hc_gallery =  ;
3584: LD_ADDR_OWVAR 33
3588: PUSH
3589: LD_STRING 
3591: ST_TO_ADDR
// hc_name =  ;
3592: LD_ADDR_OWVAR 26
3596: PUSH
3597: LD_STRING 
3599: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3600: LD_INT 0
3602: PPUSH
3603: LD_INT 3
3605: PPUSH
3606: LD_EXP 16
3610: PPUSH
3611: LD_EXP 17
3615: PPUSH
3616: CALL_OW 12
3620: PPUSH
3621: CALL_OW 380
// un = CreateHuman ;
3625: LD_ADDR_VAR 0 4
3629: PUSH
3630: CALL_OW 44
3634: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3635: LD_VAR 0 4
3639: PPUSH
3640: LD_VAR 0 3
3644: PPUSH
3645: CALL_OW 52
// end ;
3649: GO 3490
3651: POP
3652: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3653: LD_INT 0
3655: PPUSH
3656: LD_INT 2
3658: PPUSH
3659: LD_EXP 16
3663: PPUSH
3664: LD_EXP 17
3668: PPUSH
3669: CALL_OW 12
3673: PUSH
3674: LD_INT 2
3676: PLUS
3677: PPUSH
3678: CALL_OW 380
// un = CreateHuman ;
3682: LD_ADDR_VAR 0 4
3686: PUSH
3687: CALL_OW 44
3691: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3692: LD_VAR 0 4
3696: PPUSH
3697: LD_INT 3
3699: PPUSH
3700: LD_INT 0
3702: PPUSH
3703: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3707: LD_INT 0
3709: PPUSH
3710: LD_INT 4
3712: PPUSH
3713: LD_EXP 16
3717: PPUSH
3718: LD_EXP 17
3722: PPUSH
3723: CALL_OW 12
3727: PUSH
3728: LD_INT 2
3730: PLUS
3731: PPUSH
3732: CALL_OW 380
// un = CreateHuman ;
3736: LD_ADDR_VAR 0 4
3740: PUSH
3741: CALL_OW 44
3745: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3746: LD_VAR 0 4
3750: PPUSH
3751: LD_INT 3
3753: PPUSH
3754: LD_INT 0
3756: PPUSH
3757: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3761: LD_ADDR_VAR 0 2
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 2
3773: PUSH
3774: LD_INT 3
3776: PUSH
3777: LD_INT 3
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: PUSH
3785: LD_OWVAR 67
3789: ARRAY
3790: PUSH
3791: LD_INT 1
3793: PPUSH
3794: LD_INT 3
3796: PPUSH
3797: CALL_OW 12
3801: PLUS
3802: PUSH
3803: FOR_TO
3804: IFFALSE 3874
// begin hc_gallery =  ;
3806: LD_ADDR_OWVAR 33
3810: PUSH
3811: LD_STRING 
3813: ST_TO_ADDR
// hc_name =  ;
3814: LD_ADDR_OWVAR 26
3818: PUSH
3819: LD_STRING 
3821: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3822: LD_INT 0
3824: PPUSH
3825: LD_INT 1
3827: PPUSH
3828: LD_EXP 16
3832: PPUSH
3833: LD_EXP 17
3837: PPUSH
3838: CALL_OW 12
3842: PPUSH
3843: CALL_OW 380
// un = CreateHuman ;
3847: LD_ADDR_VAR 0 4
3851: PUSH
3852: CALL_OW 44
3856: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3857: LD_VAR 0 4
3861: PPUSH
3862: LD_INT 3
3864: PPUSH
3865: LD_INT 0
3867: PPUSH
3868: CALL_OW 49
// end ;
3872: GO 3803
3874: POP
3875: POP
// vc_engine = 1 ;
3876: LD_ADDR_OWVAR 39
3880: PUSH
3881: LD_INT 1
3883: ST_TO_ADDR
// vc_control = 1 ;
3884: LD_ADDR_OWVAR 38
3888: PUSH
3889: LD_INT 1
3891: ST_TO_ADDR
// vc_weapon = 51 ;
3892: LD_ADDR_OWVAR 40
3896: PUSH
3897: LD_INT 51
3899: ST_TO_ADDR
// vc_chassis = 22 ;
3900: LD_ADDR_OWVAR 37
3904: PUSH
3905: LD_INT 22
3907: ST_TO_ADDR
// veh = CreateVehicle ;
3908: LD_ADDR_VAR 0 3
3912: PUSH
3913: CALL_OW 45
3917: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3918: LD_VAR 0 3
3922: PPUSH
3923: LD_INT 3
3925: PPUSH
3926: LD_INT 0
3928: PPUSH
3929: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3933: LD_VAR 0 3
3937: PPUSH
3938: LD_INT 1
3940: PPUSH
3941: LD_INT 100
3943: PPUSH
3944: CALL_OW 290
// hc_gallery =  ;
3948: LD_ADDR_OWVAR 33
3952: PUSH
3953: LD_STRING 
3955: ST_TO_ADDR
// hc_name =  ;
3956: LD_ADDR_OWVAR 26
3960: PUSH
3961: LD_STRING 
3963: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3964: LD_INT 0
3966: PPUSH
3967: LD_INT 3
3969: PPUSH
3970: LD_EXP 16
3974: PPUSH
3975: LD_EXP 17
3979: PPUSH
3980: CALL_OW 12
3984: PPUSH
3985: CALL_OW 380
// un = CreateHuman ;
3989: LD_ADDR_VAR 0 4
3993: PUSH
3994: CALL_OW 44
3998: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3999: LD_VAR 0 4
4003: PPUSH
4004: LD_VAR 0 3
4008: PPUSH
4009: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: LD_INT 22
4020: PUSH
4021: LD_INT 6
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: PUSH
4028: LD_INT 1
4030: PUSH
4031: LD_INT 3
4033: PUSH
4034: LD_INT 25
4036: PUSH
4037: LD_INT 2
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: PUSH
4048: LD_INT 3
4050: PUSH
4051: LD_INT 25
4053: PUSH
4054: LD_INT 4
4056: PUSH
4057: EMPTY
4058: LIST
4059: LIST
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PPUSH
4074: CALL_OW 69
4078: PUSH
4079: FOR_IN
4080: IFFALSE 4099
// ComAgressiveMove ( i , 45 , 46 ) ;
4082: LD_VAR 0 2
4086: PPUSH
4087: LD_INT 45
4089: PPUSH
4090: LD_INT 46
4092: PPUSH
4093: CALL_OW 114
4097: GO 4079
4099: POP
4100: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4101: LD_ADDR_VAR 0 2
4105: PUSH
4106: LD_INT 22
4108: PUSH
4109: LD_INT 6
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 25
4118: PUSH
4119: LD_INT 2
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PPUSH
4130: CALL_OW 69
4134: PUSH
4135: FOR_IN
4136: IFFALSE 4167
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4138: LD_ADDR_EXP 21
4142: PUSH
4143: LD_VAR 0 2
4147: PPUSH
4148: LD_INT 0
4150: PPUSH
4151: LD_INT 48
4153: PPUSH
4154: LD_INT 55
4156: PPUSH
4157: LD_INT 5
4159: PPUSH
4160: CALL_OW 145
4164: ST_TO_ADDR
4165: GO 4135
4167: POP
4168: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4169: LD_ADDR_VAR 0 2
4173: PUSH
4174: LD_INT 22
4176: PUSH
4177: LD_INT 6
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PUSH
4184: LD_INT 25
4186: PUSH
4187: LD_INT 4
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PPUSH
4198: CALL_OW 69
4202: PUSH
4203: FOR_IN
4204: IFFALSE 4223
// ComMoveXY ( i , 39 , 55 ) ;
4206: LD_VAR 0 2
4210: PPUSH
4211: LD_INT 39
4213: PPUSH
4214: LD_INT 55
4216: PPUSH
4217: CALL_OW 111
4221: GO 4203
4223: POP
4224: POP
// end ;
4225: LD_VAR 0 1
4229: RET
// export function PrepareFirstAttack ; var i , un ; begin
4230: LD_INT 0
4232: PPUSH
4233: PPUSH
4234: PPUSH
// uc_side = 5 ;
4235: LD_ADDR_OWVAR 20
4239: PUSH
4240: LD_INT 5
4242: ST_TO_ADDR
// uc_nation = 3 ;
4243: LD_ADDR_OWVAR 21
4247: PUSH
4248: LD_INT 3
4250: ST_TO_ADDR
// for i := 1 to 4 do
4251: LD_ADDR_VAR 0 2
4255: PUSH
4256: DOUBLE
4257: LD_INT 1
4259: DEC
4260: ST_TO_ADDR
4261: LD_INT 4
4263: PUSH
4264: FOR_TO
4265: IFFALSE 4364
// begin hc_gallery =  ;
4267: LD_ADDR_OWVAR 33
4271: PUSH
4272: LD_STRING 
4274: ST_TO_ADDR
// hc_name =  ;
4275: LD_ADDR_OWVAR 26
4279: PUSH
4280: LD_STRING 
4282: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4283: LD_INT 0
4285: PPUSH
4286: LD_INT 1
4288: PPUSH
4289: LD_EXP 16
4293: PPUSH
4294: LD_EXP 17
4298: PPUSH
4299: CALL_OW 12
4303: PPUSH
4304: CALL_OW 380
// un = CreateHuman ;
4308: LD_ADDR_VAR 0 3
4312: PUSH
4313: CALL_OW 44
4317: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4318: LD_VAR 0 3
4322: PPUSH
4323: LD_INT 4
4325: PPUSH
4326: LD_INT 0
4328: PPUSH
4329: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4333: LD_VAR 0 3
4337: PPUSH
4338: LD_EXP 1
4342: PPUSH
4343: CALL_OW 250
4347: PPUSH
4348: LD_EXP 1
4352: PPUSH
4353: CALL_OW 251
4357: PPUSH
4358: CALL_OW 114
// end ;
4362: GO 4264
4364: POP
4365: POP
// firstRussianAttack = 1 ;
4366: LD_ADDR_EXP 23
4370: PUSH
4371: LD_INT 1
4373: ST_TO_ADDR
// end ; end_of_file
4374: LD_VAR 0 1
4378: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4379: LD_INT 0
4381: PPUSH
4382: PPUSH
4383: PPUSH
4384: PPUSH
// for i = 1 to count do
4385: LD_ADDR_VAR 0 8
4389: PUSH
4390: DOUBLE
4391: LD_INT 1
4393: DEC
4394: ST_TO_ADDR
4395: LD_VAR 0 6
4399: PUSH
4400: FOR_TO
4401: IFFALSE 4482
// begin uc_side = side ;
4403: LD_ADDR_OWVAR 20
4407: PUSH
4408: LD_VAR 0 1
4412: ST_TO_ADDR
// uc_nation = nation ;
4413: LD_ADDR_OWVAR 21
4417: PUSH
4418: LD_VAR 0 2
4422: ST_TO_ADDR
// hc_gallery =  ;
4423: LD_ADDR_OWVAR 33
4427: PUSH
4428: LD_STRING 
4430: ST_TO_ADDR
// hc_name =  ;
4431: LD_ADDR_OWVAR 26
4435: PUSH
4436: LD_STRING 
4438: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4439: LD_INT 0
4441: PPUSH
4442: LD_VAR 0 5
4446: PPUSH
4447: LD_VAR 0 4
4451: PPUSH
4452: CALL_OW 380
// un = CreateHuman ;
4456: LD_ADDR_VAR 0 10
4460: PUSH
4461: CALL_OW 44
4465: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4466: LD_VAR 0 10
4470: PPUSH
4471: LD_VAR 0 3
4475: PPUSH
4476: CALL_OW 52
// end ;
4480: GO 4400
4482: POP
4483: POP
// end ;
4484: LD_VAR 0 7
4488: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4489: LD_INT 0
4491: PPUSH
4492: PPUSH
4493: PPUSH
// uc_side := GetSide ( b ) ;
4494: LD_ADDR_OWVAR 20
4498: PUSH
4499: LD_VAR 0 2
4503: PPUSH
4504: CALL_OW 255
4508: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4509: LD_ADDR_OWVAR 21
4513: PUSH
4514: LD_VAR 0 2
4518: PPUSH
4519: CALL_OW 248
4523: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4524: LD_INT 0
4526: PPUSH
4527: LD_INT 1
4529: PPUSH
4530: LD_VAR 0 1
4534: PPUSH
4535: CALL_OW 380
// un = CreateHuman ;
4539: LD_ADDR_VAR 0 4
4543: PUSH
4544: CALL_OW 44
4548: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4549: LD_ADDR_VAR 0 5
4553: PUSH
4554: LD_VAR 0 2
4558: PPUSH
4559: CALL_OW 254
4563: PUSH
4564: LD_INT 3
4566: MINUS
4567: ST_TO_ADDR
// if dir < 0 then
4568: LD_VAR 0 5
4572: PUSH
4573: LD_INT 0
4575: LESS
4576: IFFALSE 4592
// dir := 6 + dir ;
4578: LD_ADDR_VAR 0 5
4582: PUSH
4583: LD_INT 6
4585: PUSH
4586: LD_VAR 0 5
4590: PLUS
4591: ST_TO_ADDR
// SetDir ( un , dir ) ;
4592: LD_VAR 0 4
4596: PPUSH
4597: LD_VAR 0 5
4601: PPUSH
4602: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4606: LD_VAR 0 4
4610: PPUSH
4611: LD_VAR 0 2
4615: PPUSH
4616: CALL_OW 52
// end ;
4620: LD_VAR 0 3
4624: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4625: LD_INT 0
4627: PPUSH
4628: PPUSH
4629: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4630: LD_ADDR_VAR 0 6
4634: PUSH
4635: LD_VAR 0 1
4639: PUSH
4640: LD_INT 1
4642: PPUSH
4643: LD_VAR 0 1
4647: PPUSH
4648: CALL_OW 12
4652: ARRAY
4653: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4654: LD_VAR 0 6
4658: PPUSH
4659: CALL_OW 258
4663: PUSH
4664: LD_INT 1
4666: EQUAL
4667: IFFALSE 4685
// Say ( speaker , dialogMID ) else
4669: LD_VAR 0 6
4673: PPUSH
4674: LD_VAR 0 2
4678: PPUSH
4679: CALL_OW 88
4683: GO 4699
// Say ( speaker , dialogFID ) ;
4685: LD_VAR 0 6
4689: PPUSH
4690: LD_VAR 0 3
4694: PPUSH
4695: CALL_OW 88
// result := speaker ;
4699: LD_ADDR_VAR 0 4
4703: PUSH
4704: LD_VAR 0 6
4708: ST_TO_ADDR
// end ;
4709: LD_VAR 0 4
4713: RET
// export function PrepareDifficulty ; var tmp ; begin
4714: LD_INT 0
4716: PPUSH
4717: PPUSH
// if Difficulty = 1 then
4718: LD_OWVAR 67
4722: PUSH
4723: LD_INT 1
4725: EQUAL
4726: IFFALSE 4744
// begin RuSoldMinLevel = 1 ;
4728: LD_ADDR_EXP 16
4732: PUSH
4733: LD_INT 1
4735: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4736: LD_ADDR_EXP 17
4740: PUSH
4741: LD_INT 2
4743: ST_TO_ADDR
// end ; if Difficulty = 2 then
4744: LD_OWVAR 67
4748: PUSH
4749: LD_INT 2
4751: EQUAL
4752: IFFALSE 4853
// begin RuSoldMinLevel = 2 ;
4754: LD_ADDR_EXP 16
4758: PUSH
4759: LD_INT 2
4761: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4762: LD_ADDR_EXP 17
4766: PUSH
4767: LD_INT 3
4769: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4770: LD_INT 23
4772: PPUSH
4773: CALL_OW 64
// uc_nation = 3 ;
4777: LD_ADDR_OWVAR 21
4781: PUSH
4782: LD_INT 3
4784: ST_TO_ADDR
// uc_side = 3 ;
4785: LD_ADDR_OWVAR 20
4789: PUSH
4790: LD_INT 3
4792: ST_TO_ADDR
// bc_level = 5 ;
4793: LD_ADDR_OWVAR 43
4797: PUSH
4798: LD_INT 5
4800: ST_TO_ADDR
// bc_type = 32 ;
4801: LD_ADDR_OWVAR 42
4805: PUSH
4806: LD_INT 32
4808: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4809: LD_ADDR_VAR 0 2
4813: PUSH
4814: LD_INT 76
4816: PPUSH
4817: LD_INT 91
4819: PPUSH
4820: LD_INT 2
4822: PPUSH
4823: CALL_OW 47
4827: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_INT 43
4835: PPUSH
4836: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4840: LD_INT 51
4842: PPUSH
4843: LD_INT 3
4845: PPUSH
4846: LD_INT 1
4848: PPUSH
4849: CALL_OW 322
// end ; if Difficulty = 3 then
4853: LD_OWVAR 67
4857: PUSH
4858: LD_INT 3
4860: EQUAL
4861: IFFALSE 5023
// begin RuSoldMinLevel = 2 ;
4863: LD_ADDR_EXP 16
4867: PUSH
4868: LD_INT 2
4870: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4871: LD_ADDR_EXP 17
4875: PUSH
4876: LD_INT 4
4878: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4879: LD_INT 26
4881: PPUSH
4882: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4886: LD_INT 23
4888: PPUSH
4889: CALL_OW 64
// uc_nation = 3 ;
4893: LD_ADDR_OWVAR 21
4897: PUSH
4898: LD_INT 3
4900: ST_TO_ADDR
// uc_side = 3 ;
4901: LD_ADDR_OWVAR 20
4905: PUSH
4906: LD_INT 3
4908: ST_TO_ADDR
// bc_level = 5 ;
4909: LD_ADDR_OWVAR 43
4913: PUSH
4914: LD_INT 5
4916: ST_TO_ADDR
// bc_type = 32 ;
4917: LD_ADDR_OWVAR 42
4921: PUSH
4922: LD_INT 32
4924: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4925: LD_ADDR_VAR 0 2
4929: PUSH
4930: LD_INT 76
4932: PPUSH
4933: LD_INT 91
4935: PPUSH
4936: LD_INT 2
4938: PPUSH
4939: CALL_OW 47
4943: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4944: LD_VAR 0 2
4948: PPUSH
4949: LD_INT 44
4951: PPUSH
4952: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: LD_INT 83
4963: PPUSH
4964: LD_INT 84
4966: PPUSH
4967: LD_INT 2
4969: PPUSH
4970: CALL_OW 47
4974: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4975: LD_VAR 0 2
4979: PPUSH
4980: LD_INT 43
4982: PPUSH
4983: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4987: LD_INT 51
4989: PPUSH
4990: LD_INT 3
4992: PPUSH
4993: LD_INT 1
4995: PPUSH
4996: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
5000: LD_INT 52
5002: PPUSH
5003: LD_INT 3
5005: PPUSH
5006: LD_INT 1
5008: PPUSH
5009: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
5013: LD_INT 25
5015: PPUSH
5016: LD_INT 44
5018: PPUSH
5019: CALL_OW 431
// end ; end ;
5023: LD_VAR 0 1
5027: RET
// export function EnergyDialog ; begin
5028: LD_INT 0
5030: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5031: LD_INT 46
5033: PPUSH
5034: LD_INT 1
5036: PPUSH
5037: CALL_OW 321
5041: PUSH
5042: LD_INT 1
5044: EQUAL
5045: PUSH
5046: LD_INT 35
5048: PPUSH
5049: LD_INT 1
5051: PPUSH
5052: CALL_OW 321
5056: PUSH
5057: LD_INT 1
5059: EQUAL
5060: AND
5061: IFFALSE 5085
// begin Say ( JMM , D9c-JMM-1 ) ;
5063: LD_EXP 1
5067: PPUSH
5068: LD_STRING D9c-JMM-1
5070: PPUSH
5071: CALL_OW 88
// energyVDialog = 1 ;
5075: LD_ADDR_EXP 33
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// end else
5083: GO 5239
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5085: LD_INT 35
5087: PPUSH
5088: LD_INT 1
5090: PPUSH
5091: CALL_OW 321
5095: PUSH
5096: LD_INT 2
5098: EQUAL
5099: PUSH
5100: LD_EXP 33
5104: PUSH
5105: LD_INT 0
5107: EQUAL
5108: AND
5109: IFFALSE 5131
// begin Say ( JMM , D9c-JMM-1a ) ;
5111: LD_EXP 1
5115: PPUSH
5116: LD_STRING D9c-JMM-1a
5118: PPUSH
5119: CALL_OW 88
// energyVDialog = 1 ;
5123: LD_ADDR_EXP 33
5127: PUSH
5128: LD_INT 1
5130: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5131: LD_INT 46
5133: PPUSH
5134: LD_INT 1
5136: PPUSH
5137: CALL_OW 321
5141: PUSH
5142: LD_INT 2
5144: EQUAL
5145: PUSH
5146: LD_EXP 33
5150: PUSH
5151: LD_INT 0
5153: EQUAL
5154: AND
5155: IFFALSE 5177
// begin Say ( JMM , D9c-JMM-1b ) ;
5157: LD_EXP 1
5161: PPUSH
5162: LD_STRING D9c-JMM-1b
5164: PPUSH
5165: CALL_OW 88
// energyVDialog = 1 ;
5169: LD_ADDR_EXP 33
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5177: LD_INT 46
5179: PPUSH
5180: LD_INT 1
5182: PPUSH
5183: CALL_OW 321
5187: PUSH
5188: LD_INT 2
5190: EQUAL
5191: PUSH
5192: LD_INT 21
5194: PPUSH
5195: LD_INT 1
5197: PPUSH
5198: CALL_OW 321
5202: PUSH
5203: LD_INT 2
5205: EQUAL
5206: AND
5207: PUSH
5208: LD_EXP 33
5212: PUSH
5213: LD_INT 0
5215: EQUAL
5216: AND
5217: IFFALSE 5239
// begin Say ( JMM , D9c-JMM-1c ) ;
5219: LD_EXP 1
5223: PPUSH
5224: LD_STRING D9c-JMM-1c
5226: PPUSH
5227: CALL_OW 88
// energyVDialog = 1 ;
5231: LD_ADDR_EXP 33
5235: PUSH
5236: LD_INT 1
5238: ST_TO_ADDR
// end ; end ; end ;
5239: LD_VAR 0 1
5243: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5244: LD_INT 0
5246: PPUSH
5247: PPUSH
5248: PPUSH
5249: PPUSH
5250: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5251: LD_VAR 0 1
5255: NOT
5256: PUSH
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 256
5266: PUSH
5267: LD_INT 250
5269: LESS
5270: OR
5271: PUSH
5272: LD_VAR 0 1
5276: PPUSH
5277: CALL_OW 314
5281: PUSH
5282: LD_VAR 0 1
5286: PPUSH
5287: CALL_OW 261
5291: PUSH
5292: LD_INT 20
5294: GREATER
5295: AND
5296: OR
5297: IFFALSE 5301
// exit ;
5299: GO 5666
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5301: LD_VAR 0 1
5305: PPUSH
5306: CALL_OW 261
5310: PUSH
5311: LD_INT 20
5313: LESS
5314: PUSH
5315: LD_VAR 0 1
5319: PPUSH
5320: CALL_OW 110
5324: PUSH
5325: LD_INT 21
5327: EQUAL
5328: NOT
5329: AND
5330: IFFALSE 5357
// begin ComStop ( bulldozer ) ;
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5341: LD_VAR 0 1
5345: PPUSH
5346: LD_INT 21
5348: PPUSH
5349: CALL_OW 109
// exit ;
5353: GO 5666
// end else
5355: GO 5384
// if GetFuel ( bulldozer ) > 20 then
5357: LD_VAR 0 1
5361: PPUSH
5362: CALL_OW 261
5366: PUSH
5367: LD_INT 20
5369: GREATER
5370: IFFALSE 5384
// SetTag ( bulldozer , 0 ) ;
5372: LD_VAR 0 1
5376: PPUSH
5377: LD_INT 0
5379: PPUSH
5380: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5384: LD_ADDR_VAR 0 5
5388: PUSH
5389: LD_VAR 0 2
5393: PPUSH
5394: CALL_OW 353
5398: ST_TO_ADDR
// tmp := [ ] ;
5399: LD_ADDR_VAR 0 6
5403: PUSH
5404: EMPTY
5405: ST_TO_ADDR
// for i = 1 to list do
5406: LD_ADDR_VAR 0 4
5410: PUSH
5411: DOUBLE
5412: LD_INT 1
5414: DEC
5415: ST_TO_ADDR
5416: LD_VAR 0 5
5420: PUSH
5421: FOR_TO
5422: IFFALSE 5520
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5424: LD_VAR 0 5
5428: PUSH
5429: LD_VAR 0 4
5433: ARRAY
5434: PUSH
5435: LD_INT 1
5437: ARRAY
5438: PPUSH
5439: LD_VAR 0 5
5443: PUSH
5444: LD_VAR 0 4
5448: ARRAY
5449: PUSH
5450: LD_INT 2
5452: ARRAY
5453: PPUSH
5454: CALL_OW 554
5458: IFFALSE 5518
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5460: LD_ADDR_VAR 0 6
5464: PUSH
5465: LD_VAR 0 6
5469: PPUSH
5470: LD_VAR 0 6
5474: PUSH
5475: LD_INT 1
5477: PLUS
5478: PPUSH
5479: LD_VAR 0 5
5483: PUSH
5484: LD_VAR 0 4
5488: ARRAY
5489: PUSH
5490: LD_INT 1
5492: ARRAY
5493: PUSH
5494: LD_VAR 0 5
5498: PUSH
5499: LD_VAR 0 4
5503: ARRAY
5504: PUSH
5505: LD_INT 2
5507: ARRAY
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PPUSH
5513: CALL_OW 1
5517: ST_TO_ADDR
// end ;
5518: GO 5421
5520: POP
5521: POP
// ComStop ( bulldozer ) ;
5522: LD_VAR 0 1
5526: PPUSH
5527: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5531: LD_ADDR_VAR 0 7
5535: PUSH
5536: LD_VAR 0 1
5540: PPUSH
5541: CALL_OW 250
5545: PUSH
5546: LD_VAR 0 1
5550: PPUSH
5551: CALL_OW 251
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: ST_TO_ADDR
// for i = tmp downto 1 do
5560: LD_ADDR_VAR 0 4
5564: PUSH
5565: DOUBLE
5566: LD_VAR 0 6
5570: INC
5571: ST_TO_ADDR
5572: LD_INT 1
5574: PUSH
5575: FOR_DOWNTO
5576: IFFALSE 5664
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5578: LD_ADDR_VAR 0 7
5582: PUSH
5583: LD_VAR 0 7
5587: PUSH
5588: LD_INT 1
5590: ARRAY
5591: PPUSH
5592: LD_VAR 0 7
5596: PUSH
5597: LD_INT 2
5599: ARRAY
5600: PPUSH
5601: LD_VAR 0 6
5605: PPUSH
5606: CALL 5767 0 3
5610: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5611: LD_VAR 0 1
5615: PPUSH
5616: LD_VAR 0 7
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: LD_VAR 0 7
5629: PUSH
5630: LD_INT 2
5632: ARRAY
5633: PPUSH
5634: CALL 5671 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5638: LD_ADDR_VAR 0 6
5642: PUSH
5643: LD_VAR 0 6
5647: PPUSH
5648: LD_VAR 0 7
5652: PUSH
5653: LD_INT 3
5655: ARRAY
5656: PPUSH
5657: CALL_OW 3
5661: ST_TO_ADDR
// end ;
5662: GO 5575
5664: POP
5665: POP
// end ;
5666: LD_VAR 0 3
5670: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5671: LD_INT 0
5673: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5674: LD_VAR 0 2
5678: PPUSH
5679: LD_VAR 0 3
5683: PPUSH
5684: CALL_OW 351
5688: PUSH
5689: LD_VAR 0 2
5693: PPUSH
5694: LD_VAR 0 3
5698: PPUSH
5699: CALL_OW 554
5703: AND
5704: PUSH
5705: LD_VAR 0 2
5709: PPUSH
5710: LD_VAR 0 3
5714: PPUSH
5715: CALL_OW 488
5719: AND
5720: PUSH
5721: LD_VAR 0 2
5725: PPUSH
5726: LD_VAR 0 3
5730: PPUSH
5731: CALL_OW 428
5735: PUSH
5736: LD_INT 1
5738: NEG
5739: EQUAL
5740: AND
5741: IFFALSE 5762
// AddComMoveXY ( bulldozer , x , y ) ;
5743: LD_VAR 0 1
5747: PPUSH
5748: LD_VAR 0 2
5752: PPUSH
5753: LD_VAR 0 3
5757: PPUSH
5758: CALL_OW 171
// end ;
5762: LD_VAR 0 4
5766: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5767: LD_INT 0
5769: PPUSH
5770: PPUSH
5771: PPUSH
5772: PPUSH
5773: PPUSH
5774: PPUSH
5775: PPUSH
// dist := 99999 ;
5776: LD_ADDR_VAR 0 6
5780: PUSH
5781: LD_INT 99999
5783: ST_TO_ADDR
// for i = 1 to list do
5784: LD_ADDR_VAR 0 5
5788: PUSH
5789: DOUBLE
5790: LD_INT 1
5792: DEC
5793: ST_TO_ADDR
5794: LD_VAR 0 3
5798: PUSH
5799: FOR_TO
5800: IFFALSE 5938
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5802: LD_ADDR_VAR 0 7
5806: PUSH
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_VAR 0 2
5816: PPUSH
5817: LD_VAR 0 3
5821: PUSH
5822: LD_VAR 0 5
5826: ARRAY
5827: PUSH
5828: LD_INT 1
5830: ARRAY
5831: PPUSH
5832: LD_VAR 0 3
5836: PUSH
5837: LD_VAR 0 5
5841: ARRAY
5842: PUSH
5843: LD_INT 2
5845: ARRAY
5846: PPUSH
5847: CALL_OW 298
5851: ST_TO_ADDR
// if d = 0 then
5852: LD_VAR 0 7
5856: PUSH
5857: LD_INT 0
5859: EQUAL
5860: IFFALSE 5864
// continue ;
5862: GO 5799
// if d < dist then
5864: LD_VAR 0 7
5868: PUSH
5869: LD_VAR 0 6
5873: LESS
5874: IFFALSE 5936
// begin _x := list [ i ] [ 1 ] ;
5876: LD_ADDR_VAR 0 8
5880: PUSH
5881: LD_VAR 0 3
5885: PUSH
5886: LD_VAR 0 5
5890: ARRAY
5891: PUSH
5892: LD_INT 1
5894: ARRAY
5895: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5896: LD_ADDR_VAR 0 9
5900: PUSH
5901: LD_VAR 0 3
5905: PUSH
5906: LD_VAR 0 5
5910: ARRAY
5911: PUSH
5912: LD_INT 2
5914: ARRAY
5915: ST_TO_ADDR
// _i := i ;
5916: LD_ADDR_VAR 0 10
5920: PUSH
5921: LD_VAR 0 5
5925: ST_TO_ADDR
// dist := d ;
5926: LD_ADDR_VAR 0 6
5930: PUSH
5931: LD_VAR 0 7
5935: ST_TO_ADDR
// end ; end ;
5936: GO 5799
5938: POP
5939: POP
// result := [ _x , _y , _i , dist ] ;
5940: LD_ADDR_VAR 0 4
5944: PUSH
5945: LD_VAR 0 8
5949: PUSH
5950: LD_VAR 0 9
5954: PUSH
5955: LD_VAR 0 10
5959: PUSH
5960: LD_VAR 0 6
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: ST_TO_ADDR
// end ;
5971: LD_VAR 0 4
5975: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5976: LD_INT 0
5978: PPUSH
5979: PPUSH
5980: PPUSH
5981: PPUSH
// for i = 1 to 72 do
5982: LD_ADDR_VAR 0 5
5986: PUSH
5987: DOUBLE
5988: LD_INT 1
5990: DEC
5991: ST_TO_ADDR
5992: LD_INT 72
5994: PUSH
5995: FOR_TO
5996: IFFALSE 6054
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_VAR 0 1
6007: PPUSH
6008: CALL_OW 321
6012: PUSH
6013: LD_INT 1
6015: EQUAL
6016: PUSH
6017: LD_VAR 0 5
6021: PPUSH
6022: LD_VAR 0 3
6026: PPUSH
6027: CALL_OW 482
6031: PUSH
6032: LD_INT 1
6034: EQUAL
6035: AND
6036: IFFALSE 6052
// AddComResearch ( lab , i ) ;
6038: LD_VAR 0 2
6042: PPUSH
6043: LD_VAR 0 5
6047: PPUSH
6048: CALL_OW 184
6052: GO 5995
6054: POP
6055: POP
// end ;
6056: LD_VAR 0 4
6060: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
6061: LD_INT 0
6063: PPUSH
6064: PPUSH
6065: PPUSH
6066: PPUSH
6067: PPUSH
6068: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6069: LD_ADDR_VAR 0 7
6073: PUSH
6074: LD_VAR 0 2
6078: PPUSH
6079: CALL_OW 313
6083: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6084: LD_ADDR_VAR 0 8
6088: PUSH
6089: LD_VAR 0 3
6093: PPUSH
6094: LD_INT 22
6096: PUSH
6097: LD_VAR 0 1
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: PUSH
6106: LD_INT 25
6108: PUSH
6109: LD_INT 2
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 24
6118: PUSH
6119: LD_INT 750
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: PUSH
6126: LD_INT 3
6128: PUSH
6129: LD_INT 54
6131: PUSH
6132: EMPTY
6133: LIST
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: PPUSH
6145: CALL_OW 70
6149: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6150: LD_ADDR_VAR 0 5
6154: PUSH
6155: LD_VAR 0 3
6159: PPUSH
6160: LD_INT 22
6162: PUSH
6163: LD_VAR 0 1
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PUSH
6172: LD_INT 21
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 3
6184: PUSH
6185: LD_INT 24
6187: PUSH
6188: LD_INT 1000
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: LIST
6203: PUSH
6204: EMPTY
6205: LIST
6206: PPUSH
6207: CALL_OW 70
6211: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6212: LD_VAR 0 5
6216: NOT
6217: PUSH
6218: LD_INT 22
6220: PUSH
6221: LD_VAR 0 1
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: PUSH
6230: LD_INT 25
6232: PUSH
6233: LD_INT 2
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 24
6242: PUSH
6243: LD_INT 250
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: LIST
6254: PPUSH
6255: CALL_OW 69
6259: NOT
6260: AND
6261: IFFALSE 6265
// exit ;
6263: GO 6377
// if buildings_list > 0 and engineerOkInside then
6265: LD_VAR 0 5
6269: PUSH
6270: LD_INT 0
6272: GREATER
6273: PUSH
6274: LD_VAR 0 7
6278: AND
6279: IFFALSE 6305
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6281: LD_VAR 0 7
6285: PPUSH
6286: LD_INT 25
6288: PUSH
6289: LD_INT 2
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: PPUSH
6296: CALL_OW 72
6300: PPUSH
6301: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
6305: LD_VAR 0 5
6309: PUSH
6310: LD_INT 0
6312: GREATER
6313: PUSH
6314: LD_VAR 0 8
6318: PUSH
6319: LD_INT 0
6321: GREATER
6322: AND
6323: IFFALSE 6343
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
6325: LD_VAR 0 8
6329: PPUSH
6330: LD_VAR 0 5
6334: PUSH
6335: LD_INT 1
6337: ARRAY
6338: PPUSH
6339: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
6343: LD_VAR 0 5
6347: PUSH
6348: LD_INT 0
6350: EQUAL
6351: PUSH
6352: LD_VAR 0 8
6356: PUSH
6357: LD_INT 0
6359: GREATER
6360: AND
6361: IFFALSE 6377
// ComEnterUnit ( engineerOkOutside , building ) ;
6363: LD_VAR 0 8
6367: PPUSH
6368: LD_VAR 0 2
6372: PPUSH
6373: CALL_OW 120
// end ;
6377: LD_VAR 0 4
6381: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
6382: LD_INT 0
6384: PPUSH
6385: PPUSH
6386: PPUSH
6387: PPUSH
6388: PPUSH
6389: PPUSH
6390: PPUSH
6391: PPUSH
6392: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6393: LD_ADDR_VAR 0 6
6397: PUSH
6398: LD_INT 22
6400: PUSH
6401: LD_VAR 0 1
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 25
6412: PUSH
6413: LD_INT 4
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: LD_INT 23
6422: PUSH
6423: LD_INT 2
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: PUSH
6430: LD_INT 24
6432: PUSH
6433: LD_INT 251
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 69
6450: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6451: LD_ADDR_VAR 0 7
6455: PUSH
6456: LD_VAR 0 3
6460: PPUSH
6461: LD_INT 22
6463: PUSH
6464: LD_VAR 0 1
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PUSH
6473: LD_INT 23
6475: PUSH
6476: LD_INT 2
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: PUSH
6483: LD_INT 25
6485: PUSH
6486: LD_INT 4
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: PUSH
6493: LD_INT 50
6495: PUSH
6496: EMPTY
6497: LIST
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: PPUSH
6505: CALL_OW 70
6509: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6510: LD_ADDR_VAR 0 10
6514: PUSH
6515: LD_VAR 0 3
6519: PPUSH
6520: LD_INT 22
6522: PUSH
6523: LD_VAR 0 1
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PUSH
6532: LD_INT 21
6534: PUSH
6535: LD_INT 1
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 3
6544: PUSH
6545: LD_INT 25
6547: PUSH
6548: LD_INT 3
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 3
6561: PUSH
6562: LD_INT 24
6564: PUSH
6565: LD_INT 750
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 70
6586: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6587: LD_ADDR_VAR 0 11
6591: PUSH
6592: LD_VAR 0 2
6596: PPUSH
6597: LD_INT 22
6599: PUSH
6600: LD_VAR 0 1
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 21
6611: PUSH
6612: LD_INT 1
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 3
6621: PUSH
6622: LD_INT 25
6624: PUSH
6625: LD_INT 3
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: PUSH
6636: LD_INT 3
6638: PUSH
6639: LD_INT 24
6641: PUSH
6642: LD_INT 1000
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: PPUSH
6659: CALL_OW 70
6663: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6664: LD_VAR 0 10
6668: NOT
6669: PUSH
6670: LD_VAR 0 11
6674: NOT
6675: AND
6676: PUSH
6677: LD_VAR 0 6
6681: NOT
6682: AND
6683: IFFALSE 6687
// exit ;
6685: GO 6921
// if damageUnits > 0 and sci_list > 0 then
6687: LD_VAR 0 10
6691: PUSH
6692: LD_INT 0
6694: GREATER
6695: PUSH
6696: LD_VAR 0 6
6700: PUSH
6701: LD_INT 0
6703: GREATER
6704: AND
6705: IFFALSE 6721
// ComMoveToArea ( damageUnits , healArea ) ;
6707: LD_VAR 0 10
6711: PPUSH
6712: LD_VAR 0 2
6716: PPUSH
6717: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6721: LD_VAR 0 11
6725: PUSH
6726: LD_INT 0
6728: GREATER
6729: PUSH
6730: LD_VAR 0 6
6734: PUSH
6735: LD_INT 0
6737: GREATER
6738: AND
6739: IFFALSE 6750
// ComExitBuilding ( sci_list ) ;
6741: LD_VAR 0 6
6745: PPUSH
6746: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6750: LD_VAR 0 11
6754: PUSH
6755: LD_INT 0
6757: GREATER
6758: PUSH
6759: LD_VAR 0 7
6763: PUSH
6764: LD_INT 0
6766: GREATER
6767: AND
6768: IFFALSE 6788
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6770: LD_VAR 0 7
6774: PPUSH
6775: LD_VAR 0 11
6779: PUSH
6780: LD_INT 1
6782: ARRAY
6783: PPUSH
6784: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6788: LD_VAR 0 10
6792: PUSH
6793: LD_INT 0
6795: EQUAL
6796: PUSH
6797: LD_VAR 0 11
6801: PUSH
6802: LD_INT 0
6804: EQUAL
6805: AND
6806: PUSH
6807: LD_VAR 0 7
6811: PUSH
6812: LD_INT 0
6814: GREATER
6815: AND
6816: IFFALSE 6921
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6818: LD_ADDR_VAR 0 12
6822: PUSH
6823: LD_INT 22
6825: PUSH
6826: LD_VAR 0 1
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 21
6837: PUSH
6838: LD_INT 3
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: LD_INT 30
6847: PUSH
6848: LD_INT 8
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: LIST
6859: PPUSH
6860: CALL_OW 69
6864: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6865: LD_ADDR_VAR 0 13
6869: PUSH
6870: LD_INT 1
6872: PPUSH
6873: LD_VAR 0 12
6877: PPUSH
6878: CALL_OW 12
6882: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6883: LD_VAR 0 7
6887: PPUSH
6888: LD_INT 3
6890: PUSH
6891: LD_INT 60
6893: PUSH
6894: EMPTY
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: PPUSH
6901: CALL_OW 72
6905: PPUSH
6906: LD_VAR 0 12
6910: PUSH
6911: LD_VAR 0 13
6915: ARRAY
6916: PPUSH
6917: CALL_OW 120
// end ; end ;
6921: LD_VAR 0 5
6925: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6926: LD_INT 0
6928: PPUSH
6929: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6930: LD_INT 22
6932: PUSH
6933: LD_VAR 0 1
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: LD_INT 21
6944: PUSH
6945: LD_INT 2
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PPUSH
6956: CALL_OW 69
6960: PUSH
6961: LD_VAR 0 3
6965: LESSEQUAL
6966: IFFALSE 7033
// for i = 1 to vehCount do
6968: LD_ADDR_VAR 0 9
6972: PUSH
6973: DOUBLE
6974: LD_INT 1
6976: DEC
6977: ST_TO_ADDR
6978: LD_VAR 0 3
6982: PUSH
6983: FOR_TO
6984: IFFALSE 7031
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6986: LD_VAR 0 2
6990: PPUSH
6991: LD_VAR 0 7
6995: PPUSH
6996: LD_VAR 0 5
7000: PPUSH
7001: LD_VAR 0 6
7005: PPUSH
7006: LD_VAR 0 4
7010: PUSH
7011: LD_INT 1
7013: PPUSH
7014: LD_VAR 0 4
7018: PPUSH
7019: CALL_OW 12
7023: ARRAY
7024: PPUSH
7025: CALL_OW 185
7029: GO 6983
7031: POP
7032: POP
// end ;
7033: LD_VAR 0 8
7037: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7038: LD_INT 0
7040: PPUSH
7041: PPUSH
7042: PPUSH
7043: PPUSH
7044: PPUSH
7045: PPUSH
7046: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7047: LD_ADDR_VAR 0 8
7051: PUSH
7052: LD_INT 22
7054: PUSH
7055: LD_VAR 0 1
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 21
7066: PUSH
7067: LD_INT 2
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: LD_INT 34
7079: PUSH
7080: LD_INT 51
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: LD_INT 34
7089: PUSH
7090: LD_INT 53
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: PUSH
7097: LD_INT 34
7099: PUSH
7100: LD_INT 52
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: PUSH
7113: LD_INT 24
7115: PUSH
7116: LD_INT 650
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: PPUSH
7129: CALL_OW 69
7133: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
7134: LD_INT 22
7136: PUSH
7137: LD_VAR 0 1
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: LD_INT 21
7148: PUSH
7149: LD_INT 2
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 24
7158: PUSH
7159: LD_INT 1000
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: PPUSH
7171: CALL_OW 69
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: LD_INT 4
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: LIST
7189: PUSH
7190: LD_OWVAR 67
7194: ARRAY
7195: GREATEREQUAL
7196: IFFALSE 7693
// repeat wait ( 0 0$1 ) ;
7198: LD_INT 35
7200: PPUSH
7201: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7205: LD_ADDR_VAR 0 8
7209: PUSH
7210: LD_INT 22
7212: PUSH
7213: LD_VAR 0 1
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: LD_INT 21
7224: PUSH
7225: LD_INT 2
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: LD_INT 3
7234: PUSH
7235: LD_INT 34
7237: PUSH
7238: LD_INT 51
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 34
7247: PUSH
7248: LD_INT 53
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 34
7257: PUSH
7258: LD_INT 52
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 24
7273: PUSH
7274: LD_INT 650
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: PPUSH
7287: CALL_OW 69
7291: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7292: LD_INT 22
7294: PUSH
7295: LD_VAR 0 1
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: LD_INT 95
7306: PUSH
7307: LD_VAR 0 2
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PPUSH
7320: CALL_OW 69
7324: NOT
7325: PUSH
7326: LD_VAR 0 11
7330: PUSH
7331: LD_INT 0
7333: EQUAL
7334: AND
7335: IFFALSE 7390
// for i := 1 to wayX do
7337: LD_ADDR_VAR 0 6
7341: PUSH
7342: DOUBLE
7343: LD_INT 1
7345: DEC
7346: ST_TO_ADDR
7347: LD_VAR 0 3
7351: PUSH
7352: FOR_TO
7353: IFFALSE 7388
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7355: LD_VAR 0 8
7359: PPUSH
7360: LD_VAR 0 3
7364: PUSH
7365: LD_VAR 0 6
7369: ARRAY
7370: PPUSH
7371: LD_VAR 0 4
7375: PUSH
7376: LD_VAR 0 6
7380: ARRAY
7381: PPUSH
7382: CALL_OW 174
7386: GO 7352
7388: POP
7389: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
7390: LD_INT 22
7392: PUSH
7393: LD_VAR 0 1
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 95
7404: PUSH
7405: LD_VAR 0 2
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PPUSH
7418: CALL_OW 69
7422: IFFALSE 7646
// begin seeEnemy = 1 ;
7424: LD_ADDR_VAR 0 11
7428: PUSH
7429: LD_INT 1
7431: ST_TO_ADDR
// for j in vehiclesOK do
7432: LD_ADDR_VAR 0 7
7436: PUSH
7437: LD_VAR 0 8
7441: PUSH
7442: FOR_IN
7443: IFFALSE 7644
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7445: LD_ADDR_VAR 0 9
7449: PUSH
7450: LD_INT 81
7452: PUSH
7453: LD_VAR 0 1
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 101
7464: PUSH
7465: LD_INT 1
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PPUSH
7476: CALL_OW 69
7480: PPUSH
7481: LD_VAR 0 7
7485: PPUSH
7486: CALL_OW 74
7490: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7491: LD_ADDR_VAR 0 10
7495: PUSH
7496: LD_INT 81
7498: PUSH
7499: LD_VAR 0 1
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_INT 101
7510: PUSH
7511: LD_INT 1
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PUSH
7518: LD_INT 2
7520: PUSH
7521: LD_INT 59
7523: PUSH
7524: EMPTY
7525: LIST
7526: PUSH
7527: LD_INT 21
7529: PUSH
7530: LD_INT 1
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 21
7539: PUSH
7540: LD_INT 2
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: PPUSH
7561: CALL_OW 69
7565: PPUSH
7566: LD_VAR 0 7
7570: PPUSH
7571: CALL_OW 74
7575: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7576: LD_VAR 0 7
7580: PPUSH
7581: LD_VAR 0 9
7585: PPUSH
7586: CALL_OW 296
7590: PUSH
7591: LD_INT 8
7593: PLUS
7594: PUSH
7595: LD_VAR 0 7
7599: PPUSH
7600: LD_VAR 0 10
7604: PPUSH
7605: CALL_OW 296
7609: LESS
7610: IFFALSE 7628
// ComAttackUnit ( j , target1 ) else
7612: LD_VAR 0 7
7616: PPUSH
7617: LD_VAR 0 9
7621: PPUSH
7622: CALL_OW 115
7626: GO 7642
// ComAttackUnit ( j , target2 ) ;
7628: LD_VAR 0 7
7632: PPUSH
7633: LD_VAR 0 10
7637: PPUSH
7638: CALL_OW 115
// end ;
7642: GO 7442
7644: POP
7645: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7646: LD_INT 22
7648: PUSH
7649: LD_VAR 0 1
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 21
7660: PUSH
7661: LD_INT 2
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 24
7670: PUSH
7671: LD_INT 1000
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: PPUSH
7683: CALL_OW 69
7687: PUSH
7688: LD_INT 0
7690: EQUAL
7691: IFFALSE 7198
// seeEnemy = 0 ;
7693: LD_ADDR_VAR 0 11
7697: PUSH
7698: LD_INT 0
7700: ST_TO_ADDR
// end ;
7701: LD_VAR 0 5
7705: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7706: LD_INT 0
7708: PPUSH
7709: PPUSH
7710: PPUSH
7711: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7712: LD_ADDR_VAR 0 8
7716: PUSH
7717: LD_INT 22
7719: PUSH
7720: LD_VAR 0 1
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 21
7731: PUSH
7732: LD_INT 2
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 3
7741: PUSH
7742: LD_INT 34
7744: PUSH
7745: LD_INT 51
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: PUSH
7752: LD_INT 34
7754: PUSH
7755: LD_INT 53
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PUSH
7762: LD_INT 34
7764: PUSH
7765: LD_INT 52
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: PUSH
7778: LD_INT 3
7780: PUSH
7781: LD_INT 24
7783: PUSH
7784: LD_INT 650
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: PPUSH
7801: CALL_OW 69
7805: ST_TO_ADDR
// if damageVehicles > 0 then
7806: LD_VAR 0 8
7810: PUSH
7811: LD_INT 0
7813: GREATER
7814: IFFALSE 7835
// ComMoveXY ( damageVehicles , repX , repY ) ;
7816: LD_VAR 0 8
7820: PPUSH
7821: LD_VAR 0 3
7825: PPUSH
7826: LD_VAR 0 4
7830: PPUSH
7831: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7835: LD_VAR 0 8
7839: PPUSH
7840: LD_INT 95
7842: PUSH
7843: LD_VAR 0 2
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 3
7854: PUSH
7855: LD_INT 58
7857: PUSH
7858: EMPTY
7859: LIST
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PPUSH
7869: CALL_OW 72
7873: PUSH
7874: LD_INT 0
7876: GREATER
7877: IFFALSE 7944
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7879: LD_ADDR_VAR 0 6
7883: PUSH
7884: LD_VAR 0 8
7888: PPUSH
7889: LD_INT 95
7891: PUSH
7892: LD_VAR 0 2
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: LD_INT 3
7903: PUSH
7904: LD_INT 58
7906: PUSH
7907: EMPTY
7908: LIST
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PPUSH
7918: CALL_OW 72
7922: PUSH
7923: FOR_IN
7924: IFFALSE 7942
// ComExitVehicle ( UnitsInside ( i ) ) ;
7926: LD_VAR 0 6
7930: PPUSH
7931: CALL_OW 313
7935: PPUSH
7936: CALL_OW 121
7940: GO 7923
7942: POP
7943: POP
// end ;
7944: LD_VAR 0 5
7948: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7949: LD_INT 0
7951: PPUSH
7952: PPUSH
7953: PPUSH
7954: PPUSH
7955: PPUSH
7956: PPUSH
7957: PPUSH
7958: PPUSH
7959: PPUSH
7960: PPUSH
7961: PPUSH
// for i = 1 to medicCount do
7962: LD_ADDR_VAR 0 14
7966: PUSH
7967: DOUBLE
7968: LD_INT 1
7970: DEC
7971: ST_TO_ADDR
7972: LD_VAR 0 7
7976: PUSH
7977: FOR_TO
7978: IFFALSE 8060
// begin uc_side = side ;
7980: LD_ADDR_OWVAR 20
7984: PUSH
7985: LD_VAR 0 1
7989: ST_TO_ADDR
// uc_nation = nation ;
7990: LD_ADDR_OWVAR 21
7994: PUSH
7995: LD_VAR 0 2
7999: ST_TO_ADDR
// hc_name =  ;
8000: LD_ADDR_OWVAR 26
8004: PUSH
8005: LD_STRING 
8007: ST_TO_ADDR
// hc_gallery =  ;
8008: LD_ADDR_OWVAR 33
8012: PUSH
8013: LD_STRING 
8015: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8016: LD_INT 0
8018: PPUSH
8019: LD_INT 4
8021: PPUSH
8022: LD_VAR 0 8
8026: PPUSH
8027: CALL_OW 380
// un = CreateHuman ;
8031: LD_ADDR_VAR 0 16
8035: PUSH
8036: CALL_OW 44
8040: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8041: LD_VAR 0 16
8045: PPUSH
8046: LD_VAR 0 9
8050: PPUSH
8051: LD_INT 0
8053: PPUSH
8054: CALL_OW 49
// end ;
8058: GO 7977
8060: POP
8061: POP
// for i = 1 to soldierCount do
8062: LD_ADDR_VAR 0 14
8066: PUSH
8067: DOUBLE
8068: LD_INT 1
8070: DEC
8071: ST_TO_ADDR
8072: LD_VAR 0 3
8076: PUSH
8077: FOR_TO
8078: IFFALSE 8160
// begin uc_side = side ;
8080: LD_ADDR_OWVAR 20
8084: PUSH
8085: LD_VAR 0 1
8089: ST_TO_ADDR
// uc_nation = nation ;
8090: LD_ADDR_OWVAR 21
8094: PUSH
8095: LD_VAR 0 2
8099: ST_TO_ADDR
// hc_name =  ;
8100: LD_ADDR_OWVAR 26
8104: PUSH
8105: LD_STRING 
8107: ST_TO_ADDR
// hc_gallery =  ;
8108: LD_ADDR_OWVAR 33
8112: PUSH
8113: LD_STRING 
8115: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8116: LD_INT 0
8118: PPUSH
8119: LD_INT 1
8121: PPUSH
8122: LD_VAR 0 8
8126: PPUSH
8127: CALL_OW 380
// un = CreateHuman ;
8131: LD_ADDR_VAR 0 16
8135: PUSH
8136: CALL_OW 44
8140: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8141: LD_VAR 0 16
8145: PPUSH
8146: LD_VAR 0 9
8150: PPUSH
8151: LD_INT 0
8153: PPUSH
8154: CALL_OW 49
// end ;
8158: GO 8077
8160: POP
8161: POP
// for i = 1 to sniperCount do
8162: LD_ADDR_VAR 0 14
8166: PUSH
8167: DOUBLE
8168: LD_INT 1
8170: DEC
8171: ST_TO_ADDR
8172: LD_VAR 0 4
8176: PUSH
8177: FOR_TO
8178: IFFALSE 8260
// begin uc_side = side ;
8180: LD_ADDR_OWVAR 20
8184: PUSH
8185: LD_VAR 0 1
8189: ST_TO_ADDR
// uc_nation = nation ;
8190: LD_ADDR_OWVAR 21
8194: PUSH
8195: LD_VAR 0 2
8199: ST_TO_ADDR
// hc_name =  ;
8200: LD_ADDR_OWVAR 26
8204: PUSH
8205: LD_STRING 
8207: ST_TO_ADDR
// hc_gallery =  ;
8208: LD_ADDR_OWVAR 33
8212: PUSH
8213: LD_STRING 
8215: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8216: LD_INT 0
8218: PPUSH
8219: LD_INT 5
8221: PPUSH
8222: LD_VAR 0 8
8226: PPUSH
8227: CALL_OW 380
// un = CreateHuman ;
8231: LD_ADDR_VAR 0 16
8235: PUSH
8236: CALL_OW 44
8240: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8241: LD_VAR 0 16
8245: PPUSH
8246: LD_VAR 0 9
8250: PPUSH
8251: LD_INT 0
8253: PPUSH
8254: CALL_OW 49
// end ;
8258: GO 8177
8260: POP
8261: POP
// for i = 1 to bazookCount do
8262: LD_ADDR_VAR 0 14
8266: PUSH
8267: DOUBLE
8268: LD_INT 1
8270: DEC
8271: ST_TO_ADDR
8272: LD_VAR 0 5
8276: PUSH
8277: FOR_TO
8278: IFFALSE 8360
// begin uc_side = side ;
8280: LD_ADDR_OWVAR 20
8284: PUSH
8285: LD_VAR 0 1
8289: ST_TO_ADDR
// uc_nation = nation ;
8290: LD_ADDR_OWVAR 21
8294: PUSH
8295: LD_VAR 0 2
8299: ST_TO_ADDR
// hc_name =  ;
8300: LD_ADDR_OWVAR 26
8304: PUSH
8305: LD_STRING 
8307: ST_TO_ADDR
// hc_gallery =  ;
8308: LD_ADDR_OWVAR 33
8312: PUSH
8313: LD_STRING 
8315: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8316: LD_INT 0
8318: PPUSH
8319: LD_INT 9
8321: PPUSH
8322: LD_VAR 0 8
8326: PPUSH
8327: CALL_OW 380
// un = CreateHuman ;
8331: LD_ADDR_VAR 0 16
8335: PUSH
8336: CALL_OW 44
8340: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8341: LD_VAR 0 16
8345: PPUSH
8346: LD_VAR 0 9
8350: PPUSH
8351: LD_INT 0
8353: PPUSH
8354: CALL_OW 49
// end ;
8358: GO 8277
8360: POP
8361: POP
// for i = 1 to mortalCount do
8362: LD_ADDR_VAR 0 14
8366: PUSH
8367: DOUBLE
8368: LD_INT 1
8370: DEC
8371: ST_TO_ADDR
8372: LD_VAR 0 6
8376: PUSH
8377: FOR_TO
8378: IFFALSE 8460
// begin uc_side = side ;
8380: LD_ADDR_OWVAR 20
8384: PUSH
8385: LD_VAR 0 1
8389: ST_TO_ADDR
// uc_nation = nation ;
8390: LD_ADDR_OWVAR 21
8394: PUSH
8395: LD_VAR 0 2
8399: ST_TO_ADDR
// hc_name =  ;
8400: LD_ADDR_OWVAR 26
8404: PUSH
8405: LD_STRING 
8407: ST_TO_ADDR
// hc_gallery =  ;
8408: LD_ADDR_OWVAR 33
8412: PUSH
8413: LD_STRING 
8415: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8416: LD_INT 0
8418: PPUSH
8419: LD_INT 8
8421: PPUSH
8422: LD_VAR 0 8
8426: PPUSH
8427: CALL_OW 380
// un = CreateHuman ;
8431: LD_ADDR_VAR 0 16
8435: PUSH
8436: CALL_OW 44
8440: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8441: LD_VAR 0 16
8445: PPUSH
8446: LD_VAR 0 9
8450: PPUSH
8451: LD_INT 0
8453: PPUSH
8454: CALL_OW 49
// end ;
8458: GO 8377
8460: POP
8461: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8462: LD_ADDR_VAR 0 19
8466: PUSH
8467: LD_INT 22
8469: PUSH
8470: LD_VAR 0 1
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 2
8481: PUSH
8482: LD_INT 25
8484: PUSH
8485: LD_INT 1
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: LD_INT 25
8494: PUSH
8495: LD_INT 5
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PUSH
8502: LD_INT 25
8504: PUSH
8505: LD_INT 8
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: PUSH
8512: LD_INT 25
8514: PUSH
8515: LD_INT 9
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PPUSH
8533: CALL_OW 69
8537: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8538: LD_ADDR_VAR 0 18
8542: PUSH
8543: LD_INT 22
8545: PUSH
8546: LD_VAR 0 1
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PUSH
8555: LD_INT 25
8557: PUSH
8558: LD_INT 4
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PPUSH
8569: CALL_OW 69
8573: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8574: LD_VAR 0 18
8578: PPUSH
8579: LD_VAR 0 10
8583: PPUSH
8584: CALL_OW 113
// if strategy = 1 then
8588: LD_VAR 0 12
8592: PUSH
8593: LD_INT 1
8595: EQUAL
8596: IFFALSE 9087
// begin for i in soldiersOK_list do
8598: LD_ADDR_VAR 0 14
8602: PUSH
8603: LD_VAR 0 19
8607: PUSH
8608: FOR_IN
8609: IFFALSE 8673
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8611: LD_VAR 0 14
8615: PPUSH
8616: LD_INT 91
8618: PPUSH
8619: LD_INT 63
8621: PPUSH
8622: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8626: LD_VAR 0 14
8630: PPUSH
8631: LD_INT 101
8633: PPUSH
8634: LD_INT 53
8636: PPUSH
8637: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8641: LD_VAR 0 14
8645: PPUSH
8646: LD_INT 75
8648: PPUSH
8649: LD_INT 23
8651: PPUSH
8652: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8656: LD_VAR 0 14
8660: PPUSH
8661: LD_INT 78
8663: PPUSH
8664: LD_INT 8
8666: PPUSH
8667: CALL_OW 174
// end ;
8671: GO 8608
8673: POP
8674: POP
// wait ( 0 0$30 ) ;
8675: LD_INT 1050
8677: PPUSH
8678: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8682: LD_INT 35
8684: PPUSH
8685: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8689: LD_ADDR_VAR 0 17
8693: PUSH
8694: LD_INT 22
8696: PUSH
8697: LD_VAR 0 1
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: LD_INT 1
8708: PUSH
8709: LD_INT 3
8711: PUSH
8712: LD_INT 24
8714: PUSH
8715: LD_INT 550
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 24
8728: PUSH
8729: LD_INT 250
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: LIST
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PPUSH
8745: CALL_OW 69
8749: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8750: LD_ADDR_VAR 0 19
8754: PUSH
8755: LD_INT 22
8757: PUSH
8758: LD_VAR 0 1
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PUSH
8767: LD_INT 2
8769: PUSH
8770: LD_INT 25
8772: PUSH
8773: LD_INT 1
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: PUSH
8780: LD_INT 25
8782: PUSH
8783: LD_INT 5
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: PUSH
8790: LD_INT 25
8792: PUSH
8793: LD_INT 8
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PUSH
8800: LD_INT 25
8802: PUSH
8803: LD_INT 9
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: PUSH
8817: LD_INT 24
8819: PUSH
8820: LD_INT 1000
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: PPUSH
8832: CALL_OW 69
8836: ST_TO_ADDR
// if medicCount > 0 then
8837: LD_VAR 0 7
8841: PUSH
8842: LD_INT 0
8844: GREATER
8845: IFFALSE 8889
// begin if damageUnit_list > 0 then
8847: LD_VAR 0 17
8851: PUSH
8852: LD_INT 0
8854: GREATER
8855: IFFALSE 8889
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8857: LD_VAR 0 17
8861: PPUSH
8862: LD_VAR 0 10
8866: PPUSH
8867: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8871: LD_VAR 0 7
8875: PPUSH
8876: LD_VAR 0 17
8880: PUSH
8881: LD_INT 1
8883: ARRAY
8884: PPUSH
8885: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8889: LD_ADDR_VAR 0 14
8893: PUSH
8894: LD_VAR 0 19
8898: PUSH
8899: FOR_IN
8900: IFFALSE 9076
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8902: LD_ADDR_VAR 0 22
8906: PUSH
8907: LD_INT 22
8909: PUSH
8910: LD_VAR 0 11
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PPUSH
8919: CALL_OW 69
8923: PPUSH
8924: LD_VAR 0 14
8928: PPUSH
8929: CALL_OW 74
8933: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8934: LD_ADDR_VAR 0 23
8938: PUSH
8939: LD_INT 22
8941: PUSH
8942: LD_VAR 0 11
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: LD_INT 2
8953: PUSH
8954: LD_INT 59
8956: PUSH
8957: EMPTY
8958: LIST
8959: PUSH
8960: LD_INT 21
8962: PUSH
8963: LD_INT 1
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 21
8972: PUSH
8973: LD_INT 2
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: PUSH
8990: EMPTY
8991: LIST
8992: PPUSH
8993: CALL_OW 69
8997: PPUSH
8998: LD_VAR 0 14
9002: PPUSH
9003: CALL_OW 74
9007: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9008: LD_VAR 0 14
9012: PPUSH
9013: LD_VAR 0 22
9017: PPUSH
9018: CALL_OW 296
9022: PUSH
9023: LD_INT 8
9025: PLUS
9026: PUSH
9027: LD_VAR 0 14
9031: PPUSH
9032: LD_VAR 0 23
9036: PPUSH
9037: CALL_OW 296
9041: LESS
9042: IFFALSE 9060
// begin ComAttackUnit ( i , target1 ) ;
9044: LD_VAR 0 14
9048: PPUSH
9049: LD_VAR 0 22
9053: PPUSH
9054: CALL_OW 115
// end else
9058: GO 9074
// begin ComAttackUnit ( i , target2 ) ;
9060: LD_VAR 0 14
9064: PPUSH
9065: LD_VAR 0 23
9069: PPUSH
9070: CALL_OW 115
// end ; end ;
9074: GO 8899
9076: POP
9077: POP
// until soldiersOK_list = [ ] ;
9078: LD_VAR 0 19
9082: PUSH
9083: EMPTY
9084: EQUAL
9085: IFFALSE 8682
// end ; if strategy = 2 then
9087: LD_VAR 0 12
9091: PUSH
9092: LD_INT 2
9094: EQUAL
9095: IFFALSE 9549
// begin for i in soldiersOK_list do
9097: LD_ADDR_VAR 0 14
9101: PUSH
9102: LD_VAR 0 19
9106: PUSH
9107: FOR_IN
9108: IFFALSE 9142
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
9110: LD_VAR 0 14
9114: PPUSH
9115: LD_INT 91
9117: PPUSH
9118: LD_INT 63
9120: PPUSH
9121: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
9125: LD_VAR 0 14
9129: PPUSH
9130: LD_INT 75
9132: PPUSH
9133: LD_INT 33
9135: PPUSH
9136: CALL_OW 174
// end ;
9140: GO 9107
9142: POP
9143: POP
// repeat wait ( 0 0$3 ) ;
9144: LD_INT 105
9146: PPUSH
9147: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9151: LD_ADDR_VAR 0 17
9155: PUSH
9156: LD_INT 22
9158: PUSH
9159: LD_VAR 0 1
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PUSH
9168: LD_INT 1
9170: PUSH
9171: LD_INT 3
9173: PUSH
9174: LD_INT 24
9176: PUSH
9177: LD_INT 550
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: LD_INT 24
9190: PUSH
9191: LD_INT 250
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: LIST
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PPUSH
9207: CALL_OW 69
9211: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9212: LD_ADDR_VAR 0 19
9216: PUSH
9217: LD_INT 22
9219: PUSH
9220: LD_VAR 0 1
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PUSH
9229: LD_INT 2
9231: PUSH
9232: LD_INT 25
9234: PUSH
9235: LD_INT 1
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 25
9244: PUSH
9245: LD_INT 5
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 25
9254: PUSH
9255: LD_INT 8
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: LD_INT 25
9264: PUSH
9265: LD_INT 9
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 24
9281: PUSH
9282: LD_INT 1000
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: EMPTY
9290: LIST
9291: LIST
9292: LIST
9293: PPUSH
9294: CALL_OW 69
9298: ST_TO_ADDR
// if medicCount > 0 then
9299: LD_VAR 0 7
9303: PUSH
9304: LD_INT 0
9306: GREATER
9307: IFFALSE 9351
// begin if damageUnit_list > 0 then
9309: LD_VAR 0 17
9313: PUSH
9314: LD_INT 0
9316: GREATER
9317: IFFALSE 9351
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
9319: LD_VAR 0 17
9323: PPUSH
9324: LD_VAR 0 10
9328: PPUSH
9329: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
9333: LD_VAR 0 7
9337: PPUSH
9338: LD_VAR 0 17
9342: PUSH
9343: LD_INT 1
9345: ARRAY
9346: PPUSH
9347: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
9351: LD_ADDR_VAR 0 14
9355: PUSH
9356: LD_VAR 0 19
9360: PUSH
9361: FOR_IN
9362: IFFALSE 9538
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9364: LD_ADDR_VAR 0 22
9368: PUSH
9369: LD_INT 22
9371: PUSH
9372: LD_VAR 0 11
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PPUSH
9381: CALL_OW 69
9385: PPUSH
9386: LD_VAR 0 14
9390: PPUSH
9391: CALL_OW 74
9395: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9396: LD_ADDR_VAR 0 23
9400: PUSH
9401: LD_INT 22
9403: PUSH
9404: LD_VAR 0 11
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PUSH
9413: LD_INT 2
9415: PUSH
9416: LD_INT 59
9418: PUSH
9419: EMPTY
9420: LIST
9421: PUSH
9422: LD_INT 21
9424: PUSH
9425: LD_INT 1
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 21
9434: PUSH
9435: LD_INT 2
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: EMPTY
9453: LIST
9454: PPUSH
9455: CALL_OW 69
9459: PPUSH
9460: LD_VAR 0 14
9464: PPUSH
9465: CALL_OW 74
9469: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9470: LD_VAR 0 14
9474: PPUSH
9475: LD_VAR 0 22
9479: PPUSH
9480: CALL_OW 296
9484: PUSH
9485: LD_INT 8
9487: PLUS
9488: PUSH
9489: LD_VAR 0 14
9493: PPUSH
9494: LD_VAR 0 23
9498: PPUSH
9499: CALL_OW 296
9503: LESS
9504: IFFALSE 9522
// begin ComAttackUnit ( i , target1 ) ;
9506: LD_VAR 0 14
9510: PPUSH
9511: LD_VAR 0 22
9515: PPUSH
9516: CALL_OW 115
// end else
9520: GO 9536
// begin ComAttackUnit ( i , target2 ) ;
9522: LD_VAR 0 14
9526: PPUSH
9527: LD_VAR 0 23
9531: PPUSH
9532: CALL_OW 115
// end ; end ;
9536: GO 9361
9538: POP
9539: POP
// until soldiersOK_list = [ ] ;
9540: LD_VAR 0 19
9544: PUSH
9545: EMPTY
9546: EQUAL
9547: IFFALSE 9144
// end ; if not soldiersOK_list and medic_list then
9549: LD_VAR 0 19
9553: NOT
9554: PUSH
9555: LD_VAR 0 18
9559: AND
9560: IFFALSE 9700
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
9562: LD_ADDR_VAR 0 18
9566: PUSH
9567: LD_INT 22
9569: PUSH
9570: LD_VAR 0 1
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: PUSH
9579: LD_INT 25
9581: PUSH
9582: LD_INT 4
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: LD_INT 50
9591: PUSH
9592: EMPTY
9593: LIST
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: LIST
9599: PPUSH
9600: CALL_OW 69
9604: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9605: LD_INT 35
9607: PPUSH
9608: CALL_OW 67
// for i in medic_list do
9612: LD_ADDR_VAR 0 14
9616: PUSH
9617: LD_VAR 0 18
9621: PUSH
9622: FOR_IN
9623: IFFALSE 9691
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
9625: LD_VAR 0 14
9629: PPUSH
9630: CALL_OW 314
9634: NOT
9635: PUSH
9636: LD_VAR 0 14
9640: PPUSH
9641: LD_INT 4
9643: PPUSH
9644: CALL_OW 308
9648: NOT
9649: AND
9650: IFFALSE 9666
// ComMoveToArea ( i , RussianAttack ) else
9652: LD_VAR 0 14
9656: PPUSH
9657: LD_INT 4
9659: PPUSH
9660: CALL_OW 113
9664: GO 9689
// if IsInArea ( i , RussianAttack ) then
9666: LD_VAR 0 14
9670: PPUSH
9671: LD_INT 4
9673: PPUSH
9674: CALL_OW 308
9678: IFFALSE 9689
// RemoveUnit ( i ) ;
9680: LD_VAR 0 14
9684: PPUSH
9685: CALL_OW 64
9689: GO 9622
9691: POP
9692: POP
// until not medic_list ;
9693: LD_VAR 0 18
9697: NOT
9698: IFFALSE 9562
// end ; end ;
9700: LD_VAR 0 13
9704: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9705: LD_INT 0
9707: PPUSH
9708: PPUSH
9709: PPUSH
9710: PPUSH
9711: PPUSH
9712: PPUSH
9713: PPUSH
9714: PPUSH
9715: PPUSH
9716: PPUSH
9717: PPUSH
// amChassisTab = [ ] ;
9718: LD_ADDR_VAR 0 19
9722: PUSH
9723: EMPTY
9724: ST_TO_ADDR
// arChassisTab = [ ] ;
9725: LD_ADDR_VAR 0 18
9729: PUSH
9730: EMPTY
9731: ST_TO_ADDR
// ruChassisTab = [ ] ;
9732: LD_ADDR_VAR 0 17
9736: PUSH
9737: EMPTY
9738: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9739: LD_INT 35
9741: PPUSH
9742: CALL_OW 67
// if nation = 1 then
9746: LD_VAR 0 5
9750: PUSH
9751: LD_INT 1
9753: EQUAL
9754: IFFALSE 10245
// begin uc_side = side ;
9756: LD_ADDR_OWVAR 20
9760: PUSH
9761: LD_VAR 0 2
9765: ST_TO_ADDR
// uc_nation = nation ;
9766: LD_ADDR_OWVAR 21
9770: PUSH
9771: LD_VAR 0 5
9775: ST_TO_ADDR
// vc_engine = vehengine ;
9776: LD_ADDR_OWVAR 39
9780: PUSH
9781: LD_VAR 0 6
9785: ST_TO_ADDR
// vc_control = vehcontrol ;
9786: LD_ADDR_OWVAR 38
9790: PUSH
9791: LD_VAR 0 7
9795: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9796: LD_ADDR_OWVAR 40
9800: PUSH
9801: LD_VAR 0 10
9805: PUSH
9806: LD_INT 1
9808: PPUSH
9809: LD_VAR 0 10
9813: PPUSH
9814: CALL_OW 12
9818: ARRAY
9819: ST_TO_ADDR
// for j = 1 to AMWeapon do
9820: LD_ADDR_VAR 0 14
9824: PUSH
9825: DOUBLE
9826: LD_INT 1
9828: DEC
9829: ST_TO_ADDR
9830: LD_VAR 0 10
9834: PUSH
9835: FOR_TO
9836: IFFALSE 10137
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9838: LD_VAR 0 10
9842: PUSH
9843: LD_VAR 0 14
9847: ARRAY
9848: PUSH
9849: LD_INT 2
9851: EQUAL
9852: PUSH
9853: LD_VAR 0 10
9857: PUSH
9858: LD_VAR 0 14
9862: ARRAY
9863: PUSH
9864: LD_INT 3
9866: EQUAL
9867: OR
9868: IFFALSE 9921
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9870: LD_ADDR_VAR 0 19
9874: PUSH
9875: LD_INT 1
9877: PUSH
9878: LD_INT 2
9880: PUSH
9881: LD_INT 3
9883: PUSH
9884: LD_INT 4
9886: PUSH
9887: LD_INT 5
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9897: LD_ADDR_OWVAR 37
9901: PUSH
9902: LD_VAR 0 19
9906: PUSH
9907: LD_INT 1
9909: PPUSH
9910: LD_VAR 0 19
9914: PPUSH
9915: CALL_OW 12
9919: ARRAY
9920: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9921: LD_VAR 0 10
9925: PUSH
9926: LD_VAR 0 14
9930: ARRAY
9931: PUSH
9932: LD_INT 4
9934: EQUAL
9935: PUSH
9936: LD_VAR 0 10
9940: PUSH
9941: LD_VAR 0 14
9945: ARRAY
9946: PUSH
9947: LD_INT 5
9949: EQUAL
9950: OR
9951: PUSH
9952: LD_VAR 0 10
9956: PUSH
9957: LD_VAR 0 14
9961: ARRAY
9962: PUSH
9963: LD_INT 9
9965: EQUAL
9966: OR
9967: PUSH
9968: LD_VAR 0 10
9972: PUSH
9973: LD_VAR 0 14
9977: ARRAY
9978: PUSH
9979: LD_INT 11
9981: EQUAL
9982: OR
9983: PUSH
9984: LD_VAR 0 10
9988: PUSH
9989: LD_VAR 0 14
9993: ARRAY
9994: PUSH
9995: LD_INT 7
9997: EQUAL
9998: OR
9999: IFFALSE 10048
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
10001: LD_ADDR_VAR 0 19
10005: PUSH
10006: LD_INT 2
10008: PUSH
10009: LD_INT 3
10011: PUSH
10012: LD_INT 4
10014: PUSH
10015: LD_INT 5
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10024: LD_ADDR_OWVAR 37
10028: PUSH
10029: LD_VAR 0 19
10033: PUSH
10034: LD_INT 1
10036: PPUSH
10037: LD_VAR 0 19
10041: PPUSH
10042: CALL_OW 12
10046: ARRAY
10047: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
10048: LD_VAR 0 10
10052: PUSH
10053: LD_VAR 0 14
10057: ARRAY
10058: PUSH
10059: LD_INT 8
10061: EQUAL
10062: PUSH
10063: LD_VAR 0 10
10067: PUSH
10068: LD_VAR 0 14
10072: ARRAY
10073: PUSH
10074: LD_INT 6
10076: EQUAL
10077: OR
10078: PUSH
10079: LD_VAR 0 10
10083: PUSH
10084: LD_VAR 0 14
10088: ARRAY
10089: PUSH
10090: LD_INT 10
10092: EQUAL
10093: OR
10094: IFFALSE 10135
// begin amChassisTab = [ 4 , 5 ] ;
10096: LD_ADDR_VAR 0 19
10100: PUSH
10101: LD_INT 4
10103: PUSH
10104: LD_INT 5
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10111: LD_ADDR_OWVAR 37
10115: PUSH
10116: LD_VAR 0 19
10120: PUSH
10121: LD_INT 1
10123: PPUSH
10124: LD_VAR 0 19
10128: PPUSH
10129: CALL_OW 12
10133: ARRAY
10134: ST_TO_ADDR
// end ; end ;
10135: GO 9835
10137: POP
10138: POP
// veh = CreateVehicle ;
10139: LD_ADDR_VAR 0 16
10143: PUSH
10144: CALL_OW 45
10148: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10149: LD_VAR 0 16
10153: PPUSH
10154: LD_VAR 0 1
10158: PPUSH
10159: LD_INT 0
10161: PPUSH
10162: CALL_OW 49
// if vehControl = 1 then
10166: LD_VAR 0 7
10170: PUSH
10171: LD_INT 1
10173: EQUAL
10174: IFFALSE 10231
// begin hc_gallery =  ;
10176: LD_ADDR_OWVAR 33
10180: PUSH
10181: LD_STRING 
10183: ST_TO_ADDR
// hc_name =  ;
10184: LD_ADDR_OWVAR 26
10188: PUSH
10189: LD_STRING 
10191: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10192: LD_INT 0
10194: PPUSH
10195: LD_INT 3
10197: PPUSH
10198: LD_VAR 0 4
10202: PPUSH
10203: CALL_OW 380
// un = CreateHuman ;
10207: LD_ADDR_VAR 0 15
10211: PUSH
10212: CALL_OW 44
10216: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10217: LD_VAR 0 15
10221: PPUSH
10222: LD_VAR 0 16
10226: PPUSH
10227: CALL_OW 52
// end ; i = i + 1 ;
10231: LD_ADDR_VAR 0 13
10235: PUSH
10236: LD_VAR 0 13
10240: PUSH
10241: LD_INT 1
10243: PLUS
10244: ST_TO_ADDR
// end ; if nation = 2 then
10245: LD_VAR 0 5
10249: PUSH
10250: LD_INT 2
10252: EQUAL
10253: IFFALSE 10677
// begin uc_side = side ;
10255: LD_ADDR_OWVAR 20
10259: PUSH
10260: LD_VAR 0 2
10264: ST_TO_ADDR
// uc_nation = nation ;
10265: LD_ADDR_OWVAR 21
10269: PUSH
10270: LD_VAR 0 5
10274: ST_TO_ADDR
// vc_engine = vehengine ;
10275: LD_ADDR_OWVAR 39
10279: PUSH
10280: LD_VAR 0 6
10284: ST_TO_ADDR
// vc_control = vehcontrol ;
10285: LD_ADDR_OWVAR 38
10289: PUSH
10290: LD_VAR 0 7
10294: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10295: LD_ADDR_OWVAR 40
10299: PUSH
10300: LD_VAR 0 9
10304: PUSH
10305: LD_INT 1
10307: PPUSH
10308: LD_VAR 0 9
10312: PPUSH
10313: CALL_OW 12
10317: ARRAY
10318: ST_TO_ADDR
// for j = 1 to ARWeapons do
10319: LD_ADDR_VAR 0 14
10323: PUSH
10324: DOUBLE
10325: LD_INT 1
10327: DEC
10328: ST_TO_ADDR
10329: LD_VAR 0 9
10333: PUSH
10334: FOR_TO
10335: IFFALSE 10569
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10337: LD_VAR 0 9
10341: PUSH
10342: LD_VAR 0 14
10346: ARRAY
10347: PUSH
10348: LD_INT 24
10350: EQUAL
10351: PUSH
10352: LD_VAR 0 9
10356: PUSH
10357: LD_VAR 0 14
10361: ARRAY
10362: PUSH
10363: LD_INT 22
10365: EQUAL
10366: OR
10367: PUSH
10368: LD_VAR 0 9
10372: PUSH
10373: LD_VAR 0 14
10377: ARRAY
10378: PUSH
10379: LD_INT 23
10381: EQUAL
10382: OR
10383: PUSH
10384: LD_VAR 0 9
10388: PUSH
10389: LD_VAR 0 14
10393: ARRAY
10394: PUSH
10395: LD_INT 30
10397: EQUAL
10398: OR
10399: IFFALSE 10448
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10401: LD_ADDR_VAR 0 18
10405: PUSH
10406: LD_INT 11
10408: PUSH
10409: LD_INT 12
10411: PUSH
10412: LD_INT 13
10414: PUSH
10415: LD_INT 14
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10424: LD_ADDR_OWVAR 37
10428: PUSH
10429: LD_VAR 0 18
10433: PUSH
10434: LD_INT 1
10436: PPUSH
10437: LD_VAR 0 18
10441: PPUSH
10442: CALL_OW 12
10446: ARRAY
10447: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10448: LD_VAR 0 9
10452: PUSH
10453: LD_VAR 0 14
10457: ARRAY
10458: PUSH
10459: LD_INT 29
10461: EQUAL
10462: PUSH
10463: LD_VAR 0 9
10467: PUSH
10468: LD_VAR 0 14
10472: ARRAY
10473: PUSH
10474: LD_INT 28
10476: EQUAL
10477: OR
10478: PUSH
10479: LD_VAR 0 9
10483: PUSH
10484: LD_VAR 0 14
10488: ARRAY
10489: PUSH
10490: LD_INT 27
10492: EQUAL
10493: OR
10494: PUSH
10495: LD_VAR 0 9
10499: PUSH
10500: LD_VAR 0 14
10504: ARRAY
10505: PUSH
10506: LD_INT 26
10508: EQUAL
10509: OR
10510: PUSH
10511: LD_VAR 0 9
10515: PUSH
10516: LD_VAR 0 14
10520: ARRAY
10521: PUSH
10522: LD_INT 25
10524: EQUAL
10525: OR
10526: IFFALSE 10567
// begin arChassisTab = [ 13 , 14 ] ;
10528: LD_ADDR_VAR 0 18
10532: PUSH
10533: LD_INT 13
10535: PUSH
10536: LD_INT 14
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10543: LD_ADDR_OWVAR 37
10547: PUSH
10548: LD_VAR 0 18
10552: PUSH
10553: LD_INT 1
10555: PPUSH
10556: LD_VAR 0 18
10560: PPUSH
10561: CALL_OW 12
10565: ARRAY
10566: ST_TO_ADDR
// end ; end ;
10567: GO 10334
10569: POP
10570: POP
// veh = CreateVehicle ;
10571: LD_ADDR_VAR 0 16
10575: PUSH
10576: CALL_OW 45
10580: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10581: LD_VAR 0 16
10585: PPUSH
10586: LD_VAR 0 1
10590: PPUSH
10591: LD_INT 0
10593: PPUSH
10594: CALL_OW 49
// if vehcontrol = 1 then
10598: LD_VAR 0 7
10602: PUSH
10603: LD_INT 1
10605: EQUAL
10606: IFFALSE 10663
// begin hc_gallery =  ;
10608: LD_ADDR_OWVAR 33
10612: PUSH
10613: LD_STRING 
10615: ST_TO_ADDR
// hc_name =  ;
10616: LD_ADDR_OWVAR 26
10620: PUSH
10621: LD_STRING 
10623: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10624: LD_INT 0
10626: PPUSH
10627: LD_INT 3
10629: PPUSH
10630: LD_VAR 0 4
10634: PPUSH
10635: CALL_OW 380
// un = CreateHuman ;
10639: LD_ADDR_VAR 0 15
10643: PUSH
10644: CALL_OW 44
10648: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10649: LD_VAR 0 15
10653: PPUSH
10654: LD_VAR 0 16
10658: PPUSH
10659: CALL_OW 52
// end ; i = i + 1 ;
10663: LD_ADDR_VAR 0 13
10667: PUSH
10668: LD_VAR 0 13
10672: PUSH
10673: LD_INT 1
10675: PLUS
10676: ST_TO_ADDR
// end ; if nation = 3 then
10677: LD_VAR 0 5
10681: PUSH
10682: LD_INT 3
10684: EQUAL
10685: IFFALSE 11077
// begin uc_side = side ;
10687: LD_ADDR_OWVAR 20
10691: PUSH
10692: LD_VAR 0 2
10696: ST_TO_ADDR
// uc_nation = nation ;
10697: LD_ADDR_OWVAR 21
10701: PUSH
10702: LD_VAR 0 5
10706: ST_TO_ADDR
// vc_engine = vehengine ;
10707: LD_ADDR_OWVAR 39
10711: PUSH
10712: LD_VAR 0 6
10716: ST_TO_ADDR
// vc_control = vehcontrol ;
10717: LD_ADDR_OWVAR 38
10721: PUSH
10722: LD_VAR 0 7
10726: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10727: LD_ADDR_OWVAR 40
10731: PUSH
10732: LD_VAR 0 8
10736: PUSH
10737: LD_INT 1
10739: PPUSH
10740: LD_VAR 0 8
10744: PPUSH
10745: CALL_OW 12
10749: ARRAY
10750: ST_TO_ADDR
// for j = 1 to RuWeapons do
10751: LD_ADDR_VAR 0 14
10755: PUSH
10756: DOUBLE
10757: LD_INT 1
10759: DEC
10760: ST_TO_ADDR
10761: LD_VAR 0 8
10765: PUSH
10766: FOR_TO
10767: IFFALSE 10969
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10769: LD_VAR 0 8
10773: PUSH
10774: LD_VAR 0 14
10778: ARRAY
10779: PUSH
10780: LD_INT 42
10782: EQUAL
10783: PUSH
10784: LD_VAR 0 8
10788: PUSH
10789: LD_VAR 0 14
10793: ARRAY
10794: PUSH
10795: LD_INT 43
10797: EQUAL
10798: OR
10799: PUSH
10800: LD_VAR 0 8
10804: PUSH
10805: LD_VAR 0 14
10809: ARRAY
10810: PUSH
10811: LD_INT 44
10813: EQUAL
10814: OR
10815: PUSH
10816: LD_VAR 0 8
10820: PUSH
10821: LD_VAR 0 14
10825: ARRAY
10826: PUSH
10827: LD_INT 45
10829: EQUAL
10830: OR
10831: PUSH
10832: LD_VAR 0 8
10836: PUSH
10837: LD_VAR 0 14
10841: ARRAY
10842: PUSH
10843: LD_INT 49
10845: EQUAL
10846: OR
10847: IFFALSE 10896
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10849: LD_ADDR_VAR 0 17
10853: PUSH
10854: LD_INT 21
10856: PUSH
10857: LD_INT 22
10859: PUSH
10860: LD_INT 23
10862: PUSH
10863: LD_INT 24
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10872: LD_ADDR_OWVAR 37
10876: PUSH
10877: LD_VAR 0 17
10881: PUSH
10882: LD_INT 1
10884: PPUSH
10885: LD_VAR 0 17
10889: PPUSH
10890: CALL_OW 12
10894: ARRAY
10895: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10896: LD_VAR 0 8
10900: PUSH
10901: LD_VAR 0 14
10905: ARRAY
10906: PUSH
10907: LD_INT 46
10909: EQUAL
10910: PUSH
10911: LD_VAR 0 8
10915: PUSH
10916: LD_VAR 0 14
10920: ARRAY
10921: PUSH
10922: LD_INT 47
10924: EQUAL
10925: OR
10926: IFFALSE 10967
// begin ruChassisTab = [ 23 , 24 ] ;
10928: LD_ADDR_VAR 0 17
10932: PUSH
10933: LD_INT 23
10935: PUSH
10936: LD_INT 24
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10943: LD_ADDR_OWVAR 37
10947: PUSH
10948: LD_VAR 0 17
10952: PUSH
10953: LD_INT 1
10955: PPUSH
10956: LD_VAR 0 17
10960: PPUSH
10961: CALL_OW 12
10965: ARRAY
10966: ST_TO_ADDR
// end ; end ;
10967: GO 10766
10969: POP
10970: POP
// veh = CreateVehicle ;
10971: LD_ADDR_VAR 0 16
10975: PUSH
10976: CALL_OW 45
10980: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10981: LD_VAR 0 16
10985: PPUSH
10986: LD_VAR 0 1
10990: PPUSH
10991: LD_INT 0
10993: PPUSH
10994: CALL_OW 49
// if vehcontrol = 1 then
10998: LD_VAR 0 7
11002: PUSH
11003: LD_INT 1
11005: EQUAL
11006: IFFALSE 11063
// begin hc_gallery =  ;
11008: LD_ADDR_OWVAR 33
11012: PUSH
11013: LD_STRING 
11015: ST_TO_ADDR
// hc_name =  ;
11016: LD_ADDR_OWVAR 26
11020: PUSH
11021: LD_STRING 
11023: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
11024: LD_INT 0
11026: PPUSH
11027: LD_INT 3
11029: PPUSH
11030: LD_VAR 0 4
11034: PPUSH
11035: CALL_OW 380
// un = CreateHuman ;
11039: LD_ADDR_VAR 0 15
11043: PUSH
11044: CALL_OW 44
11048: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11049: LD_VAR 0 15
11053: PPUSH
11054: LD_VAR 0 16
11058: PPUSH
11059: CALL_OW 52
// end ; i = i + 1 ;
11063: LD_ADDR_VAR 0 13
11067: PUSH
11068: LD_VAR 0 13
11072: PUSH
11073: LD_INT 1
11075: PLUS
11076: ST_TO_ADDR
// end ; until i = vehCount ;
11077: LD_VAR 0 13
11081: PUSH
11082: LD_VAR 0 3
11086: EQUAL
11087: IFFALSE 9739
// repeat wait ( 0 0$1 ) ;
11089: LD_INT 35
11091: PPUSH
11092: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
11096: LD_INT 22
11098: PUSH
11099: LD_VAR 0 2
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PUSH
11108: LD_INT 21
11110: PUSH
11111: LD_INT 2
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PUSH
11118: LD_INT 24
11120: PUSH
11121: LD_INT 250
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 3
11130: PUSH
11131: LD_INT 58
11133: PUSH
11134: EMPTY
11135: LIST
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: PPUSH
11147: CALL_OW 69
11151: PUSH
11152: LD_INT 0
11154: GREATER
11155: IFFALSE 11397
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
11157: LD_ADDR_VAR 0 13
11161: PUSH
11162: LD_INT 22
11164: PUSH
11165: LD_VAR 0 2
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 21
11176: PUSH
11177: LD_INT 2
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 24
11186: PUSH
11187: LD_INT 250
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: LD_INT 3
11196: PUSH
11197: LD_INT 58
11199: PUSH
11200: EMPTY
11201: LIST
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: PPUSH
11213: CALL_OW 69
11217: PUSH
11218: FOR_IN
11219: IFFALSE 11395
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11221: LD_ADDR_VAR 0 21
11225: PUSH
11226: LD_INT 22
11228: PUSH
11229: LD_VAR 0 11
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PPUSH
11238: CALL_OW 69
11242: PPUSH
11243: LD_VAR 0 13
11247: PPUSH
11248: CALL_OW 74
11252: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11253: LD_ADDR_VAR 0 22
11257: PUSH
11258: LD_INT 22
11260: PUSH
11261: LD_VAR 0 11
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: LD_INT 2
11272: PUSH
11273: LD_INT 59
11275: PUSH
11276: EMPTY
11277: LIST
11278: PUSH
11279: LD_INT 21
11281: PUSH
11282: LD_INT 1
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PUSH
11289: LD_INT 21
11291: PUSH
11292: LD_INT 2
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: EMPTY
11310: LIST
11311: PPUSH
11312: CALL_OW 69
11316: PPUSH
11317: LD_VAR 0 13
11321: PPUSH
11322: CALL_OW 74
11326: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11327: LD_VAR 0 13
11331: PPUSH
11332: LD_VAR 0 21
11336: PPUSH
11337: CALL_OW 296
11341: PUSH
11342: LD_INT 8
11344: PLUS
11345: PUSH
11346: LD_VAR 0 13
11350: PPUSH
11351: LD_VAR 0 22
11355: PPUSH
11356: CALL_OW 296
11360: LESS
11361: IFFALSE 11379
// begin ComAttackUnit ( i , target1 ) ;
11363: LD_VAR 0 13
11367: PPUSH
11368: LD_VAR 0 21
11372: PPUSH
11373: CALL_OW 115
// end else
11377: GO 11393
// begin ComAttackUnit ( i , target2 ) ;
11379: LD_VAR 0 13
11383: PPUSH
11384: LD_VAR 0 22
11388: PPUSH
11389: CALL_OW 115
// end ; end ;
11393: GO 11218
11395: POP
11396: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11397: LD_INT 22
11399: PUSH
11400: LD_VAR 0 2
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PUSH
11409: LD_INT 21
11411: PUSH
11412: LD_INT 2
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PUSH
11419: LD_INT 24
11421: PUSH
11422: LD_INT 250
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 3
11431: PUSH
11432: LD_INT 58
11434: PUSH
11435: EMPTY
11436: LIST
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: PPUSH
11448: CALL_OW 69
11452: PUSH
11453: LD_INT 0
11455: EQUAL
11456: IFFALSE 11089
// end ; end_of_file
11458: LD_VAR 0 12
11462: RET
// every 1 do var i , gammaSquad , startX , startY ;
11463: GO 11465
11465: DISABLE
11466: LD_INT 0
11468: PPUSH
11469: PPUSH
11470: PPUSH
11471: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11472: LD_ADDR_VAR 0 2
11476: PUSH
11477: LD_EXP 8
11481: PUSH
11482: LD_EXP 9
11486: PUSH
11487: LD_EXP 10
11491: PUSH
11492: LD_EXP 11
11496: PUSH
11497: LD_EXP 12
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11509: LD_ADDR_VAR 0 3
11513: PUSH
11514: LD_INT 46
11516: PUSH
11517: LD_INT 45
11519: PUSH
11520: LD_INT 44
11522: PUSH
11523: LD_INT 43
11525: PUSH
11526: LD_INT 42
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11536: LD_ADDR_VAR 0 4
11540: PUSH
11541: LD_INT 14
11543: PUSH
11544: LD_INT 12
11546: PUSH
11547: LD_INT 10
11549: PUSH
11550: LD_INT 8
11552: PUSH
11553: LD_INT 6
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
11563: LD_EXP 11
11567: PPUSH
11568: LD_INT 31
11570: PPUSH
11571: LD_INT 59
11573: PPUSH
11574: LD_INT 19
11576: PPUSH
11577: LD_INT 5
11579: PPUSH
11580: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
11584: LD_INT 32
11586: PPUSH
11587: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11591: LD_INT 32
11593: PPUSH
11594: LD_INT 51
11596: PPUSH
11597: LD_INT 26
11599: PPUSH
11600: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11604: LD_INT 32
11606: PPUSH
11607: LD_INT 53
11609: PPUSH
11610: LD_INT 23
11612: PPUSH
11613: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11617: LD_INT 32
11619: PPUSH
11620: LD_INT 52
11622: PPUSH
11623: LD_INT 19
11625: PPUSH
11626: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11630: LD_INT 35
11632: PPUSH
11633: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11637: LD_INT 32
11639: PPUSH
11640: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11644: LD_INT 32
11646: PPUSH
11647: CALL_OW 250
11651: PUSH
11652: LD_INT 52
11654: EQUAL
11655: PUSH
11656: LD_INT 32
11658: PPUSH
11659: CALL_OW 251
11663: PUSH
11664: LD_INT 19
11666: EQUAL
11667: AND
11668: IFFALSE 11630
// ComExitVehicle ( JMM ) ;
11670: LD_EXP 1
11674: PPUSH
11675: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11679: LD_EXP 7
11683: PPUSH
11684: LD_EXP 1
11688: PPUSH
11689: CALL_OW 119
// wait ( 0 0$01 ) ;
11693: LD_INT 35
11695: PPUSH
11696: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11700: LD_EXP 1
11704: PPUSH
11705: LD_INT 46
11707: PPUSH
11708: LD_INT 10
11710: PPUSH
11711: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11715: LD_EXP 1
11719: PPUSH
11720: LD_EXP 7
11724: PPUSH
11725: CALL_OW 179
// wait ( 0 0$4 ) ;
11729: LD_INT 140
11731: PPUSH
11732: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11736: LD_EXP 1
11740: PPUSH
11741: LD_STRING D1-JMM-1
11743: PPUSH
11744: CALL_OW 88
// if not dialogue_skipped then
11748: LD_OWVAR 59
11752: NOT
11753: IFFALSE 12410
// begin for i := 1 to gammaSquad do
11755: LD_ADDR_VAR 0 1
11759: PUSH
11760: DOUBLE
11761: LD_INT 1
11763: DEC
11764: ST_TO_ADDR
11765: LD_VAR 0 2
11769: PUSH
11770: FOR_TO
11771: IFFALSE 11832
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11773: LD_VAR 0 2
11777: PUSH
11778: LD_VAR 0 1
11782: ARRAY
11783: PPUSH
11784: LD_VAR 0 3
11788: PUSH
11789: LD_VAR 0 1
11793: ARRAY
11794: PPUSH
11795: LD_VAR 0 4
11799: PUSH
11800: LD_VAR 0 1
11804: ARRAY
11805: PPUSH
11806: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11810: LD_VAR 0 2
11814: PUSH
11815: LD_VAR 0 1
11819: ARRAY
11820: PPUSH
11821: LD_EXP 1
11825: PPUSH
11826: CALL_OW 179
// end ;
11830: GO 11770
11832: POP
11833: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11834: LD_EXP 4
11838: PPUSH
11839: LD_INT 41
11841: PPUSH
11842: LD_INT 4
11844: PPUSH
11845: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11849: LD_EXP 4
11853: PPUSH
11854: LD_EXP 1
11858: PPUSH
11859: CALL_OW 179
// if Lisa = false and Bobby then
11863: LD_EXP 4
11867: PUSH
11868: LD_INT 0
11870: EQUAL
11871: PUSH
11872: LD_EXP 2
11876: AND
11877: IFFALSE 11908
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11879: LD_EXP 2
11883: PPUSH
11884: LD_INT 41
11886: PPUSH
11887: LD_INT 4
11889: PPUSH
11890: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11894: LD_EXP 2
11898: PPUSH
11899: LD_EXP 1
11903: PPUSH
11904: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11908: LD_EXP 4
11912: PUSH
11913: LD_INT 0
11915: EQUAL
11916: PUSH
11917: LD_EXP 2
11921: PUSH
11922: LD_INT 0
11924: EQUAL
11925: AND
11926: PUSH
11927: LD_EXP 3
11931: AND
11932: IFFALSE 11963
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11934: LD_EXP 3
11938: PPUSH
11939: LD_INT 41
11941: PPUSH
11942: LD_INT 4
11944: PPUSH
11945: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11949: LD_EXP 3
11953: PPUSH
11954: LD_EXP 1
11958: PPUSH
11959: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11963: LD_EXP 4
11967: PUSH
11968: LD_INT 0
11970: EQUAL
11971: PUSH
11972: LD_EXP 2
11976: PUSH
11977: LD_INT 0
11979: EQUAL
11980: AND
11981: PUSH
11982: LD_EXP 3
11986: PUSH
11987: LD_INT 0
11989: EQUAL
11990: AND
11991: IFFALSE 12022
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11993: LD_EXP 6
11997: PPUSH
11998: LD_INT 41
12000: PPUSH
12001: LD_INT 4
12003: PPUSH
12004: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
12008: LD_EXP 6
12012: PPUSH
12013: LD_EXP 1
12017: PPUSH
12018: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
12022: LD_EXP 7
12026: PPUSH
12027: LD_STRING D1-Brown-1
12029: PPUSH
12030: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
12034: LD_EXP 1
12038: PPUSH
12039: LD_STRING D1-JMM-2
12041: PPUSH
12042: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
12046: LD_EXP 7
12050: PPUSH
12051: LD_STRING D1-Brown-2
12053: PPUSH
12054: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
12058: LD_EXP 1
12062: PPUSH
12063: LD_EXP 9
12067: PPUSH
12068: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
12072: LD_EXP 9
12076: PPUSH
12077: LD_STRING D1-FSol1-2
12079: PPUSH
12080: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
12084: LD_EXP 1
12088: PPUSH
12089: LD_EXP 8
12093: PPUSH
12094: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
12098: LD_EXP 8
12102: PPUSH
12103: LD_STRING D1-Sol2-2
12105: PPUSH
12106: CALL_OW 88
// if Lisa then
12110: LD_EXP 4
12114: IFFALSE 12154
// begin ComTurnUnit ( JMM , Lisa ) ;
12116: LD_EXP 1
12120: PPUSH
12121: LD_EXP 4
12125: PPUSH
12126: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
12130: LD_EXP 4
12134: PPUSH
12135: LD_STRING D1-Lisa-2
12137: PPUSH
12138: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12142: LD_EXP 1
12146: PPUSH
12147: LD_STRING D1-JMM-3
12149: PPUSH
12150: CALL_OW 88
// end ; if Bobby then
12154: LD_EXP 2
12158: IFFALSE 12198
// begin ComTurnUnit ( JMM , Bobby ) ;
12160: LD_EXP 1
12164: PPUSH
12165: LD_EXP 2
12169: PPUSH
12170: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
12174: LD_EXP 2
12178: PPUSH
12179: LD_STRING D1-Bobby-2
12181: PPUSH
12182: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12186: LD_EXP 1
12190: PPUSH
12191: LD_STRING D1-JMM-3
12193: PPUSH
12194: CALL_OW 88
// end ; if Cyrus then
12198: LD_EXP 3
12202: IFFALSE 12242
// begin ComTurnUnit ( JMM , Cyrus ) ;
12204: LD_EXP 1
12208: PPUSH
12209: LD_EXP 3
12213: PPUSH
12214: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
12218: LD_EXP 3
12222: PPUSH
12223: LD_STRING D1-Cyrus-2
12225: PPUSH
12226: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12230: LD_EXP 1
12234: PPUSH
12235: LD_STRING D1-JMM-3
12237: PPUSH
12238: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
12242: LD_EXP 1
12246: PPUSH
12247: LD_EXP 7
12251: PPUSH
12252: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
12256: LD_EXP 1
12260: PPUSH
12261: LD_STRING D1-JMM-3a
12263: PPUSH
12264: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
12268: LD_EXP 7
12272: PPUSH
12273: LD_INT 38
12275: PPUSH
12276: LD_INT 5
12278: PPUSH
12279: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
12283: LD_EXP 7
12287: PPUSH
12288: LD_EXP 1
12292: PPUSH
12293: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
12297: LD_EXP 1
12301: PPUSH
12302: LD_INT 40
12304: PPUSH
12305: LD_INT 7
12307: PPUSH
12308: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12312: LD_EXP 1
12316: PPUSH
12317: LD_EXP 7
12321: PPUSH
12322: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12326: LD_EXP 7
12330: PPUSH
12331: LD_STRING D1-Brown-3
12333: PPUSH
12334: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12338: LD_EXP 14
12342: PPUSH
12343: LD_STRING D1-Har-3
12345: PPUSH
12346: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12350: LD_EXP 1
12354: PPUSH
12355: LD_STRING D1-JMM-4
12357: PPUSH
12358: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12362: LD_EXP 14
12366: PPUSH
12367: LD_STRING D1-Har-4
12369: PPUSH
12370: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12374: LD_EXP 1
12378: PPUSH
12379: LD_STRING D1-JMM-5
12381: PPUSH
12382: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12386: LD_EXP 14
12390: PPUSH
12391: LD_STRING D1-Har-5
12393: PPUSH
12394: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12398: LD_EXP 1
12402: PPUSH
12403: LD_STRING D1-JMM-6
12405: PPUSH
12406: CALL_OW 88
// end ; InGameOff ;
12410: CALL_OW 9
// PrepareRussianConvoy ;
12414: CALL 3430 0 0
// ChangeMissionObjectives ( M1 ) ;
12418: LD_STRING M1
12420: PPUSH
12421: CALL_OW 337
// SaveForQuickRestart ;
12425: CALL_OW 22
// timerStatus = 1 ;
12429: LD_ADDR_EXP 29
12433: PUSH
12434: LD_INT 1
12436: ST_TO_ADDR
// startTimer = 1 ;
12437: LD_ADDR_EXP 30
12441: PUSH
12442: LD_INT 1
12444: ST_TO_ADDR
// bonusAvalaible = 1 ;
12445: LD_ADDR_EXP 44
12449: PUSH
12450: LD_INT 1
12452: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12453: LD_INT 105
12455: PPUSH
12456: CALL_OW 67
// DialogueOn ;
12460: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12464: LD_EXP 12
12468: PPUSH
12469: LD_STRING D9-Mech1-1
12471: PPUSH
12472: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12476: LD_EXP 1
12480: PPUSH
12481: LD_STRING D9-JMM-1
12483: PPUSH
12484: CALL_OW 88
// DialogueOff ;
12488: CALL_OW 7
// end ;
12492: PPOPN 4
12494: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) > 0 do
12495: LD_INT 47
12497: PPUSH
12498: LD_INT 1
12500: PPUSH
12501: CALL_OW 321
12505: PUSH
12506: LD_INT 2
12508: EQUAL
12509: PUSH
12510: LD_EXP 31
12514: NOT
12515: AND
12516: PUSH
12517: LD_INT 22
12519: PUSH
12520: LD_INT 1
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PUSH
12527: LD_INT 21
12529: PUSH
12530: LD_INT 3
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: LD_INT 30
12539: PUSH
12540: LD_INT 3
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: LD_INT 57
12549: PUSH
12550: EMPTY
12551: LIST
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: PPUSH
12559: CALL_OW 69
12563: PUSH
12564: LD_INT 0
12566: GREATER
12567: AND
12568: IFFALSE 12806
12570: GO 12572
12572: DISABLE
// begin factoryDialog := true ;
12573: LD_ADDR_EXP 31
12577: PUSH
12578: LD_INT 1
12580: ST_TO_ADDR
// if IsOk ( Campell ) then
12581: LD_EXP 12
12585: PPUSH
12586: CALL_OW 302
12590: IFFALSE 12606
// begin Say ( Campell , D10-Mech1-1 ) ;
12592: LD_EXP 12
12596: PPUSH
12597: LD_STRING D10-Mech1-1
12599: PPUSH
12600: CALL_OW 88
// end else
12604: GO 12806
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12606: LD_INT 22
12608: PUSH
12609: LD_INT 1
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 21
12618: PUSH
12619: LD_INT 1
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: LD_INT 25
12628: PUSH
12629: LD_INT 3
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: LD_INT 26
12638: PUSH
12639: LD_INT 1
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: PPUSH
12652: CALL_OW 69
12656: PUSH
12657: LD_EXP 1
12661: PUSH
12662: EMPTY
12663: LIST
12664: PUSH
12665: LD_INT 0
12667: GREATER
12668: DIFF
12669: IFFALSE 12743
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12671: LD_INT 22
12673: PUSH
12674: LD_INT 1
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: LD_INT 21
12683: PUSH
12684: LD_INT 1
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: LD_INT 25
12693: PUSH
12694: LD_INT 3
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PUSH
12701: LD_INT 26
12703: PUSH
12704: LD_INT 1
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: PPUSH
12717: CALL_OW 69
12721: PUSH
12722: LD_EXP 1
12726: PUSH
12727: EMPTY
12728: LIST
12729: DIFF
12730: PPUSH
12731: LD_STRING D10-Mech1-1
12733: PPUSH
12734: LD_STRING D10-Mech1-1
12736: PPUSH
12737: CALL 4625 0 3
// end else
12741: GO 12806
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12743: LD_INT 22
12745: PUSH
12746: LD_INT 1
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 21
12755: PUSH
12756: LD_INT 1
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: LD_INT 26
12765: PUSH
12766: LD_INT 1
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: LIST
12777: PUSH
12778: LD_INT 1
12780: ARRAY
12781: PPUSH
12782: CALL_OW 69
12786: PUSH
12787: LD_EXP 1
12791: PUSH
12792: EMPTY
12793: LIST
12794: DIFF
12795: PPUSH
12796: LD_STRING D10-Mech1-1
12798: PPUSH
12799: LD_STRING D10-Mech1-1
12801: PPUSH
12802: CALL 4625 0 3
// end ; end ; end ;
12806: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12807: LD_INT 22
12809: PUSH
12810: LD_INT 1
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 30
12819: PUSH
12820: LD_INT 32
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PPUSH
12831: CALL_OW 69
12835: PUSH
12836: LD_INT 0
12838: GREATER
12839: PUSH
12840: LD_EXP 32
12844: PUSH
12845: LD_INT 0
12847: EQUAL
12848: AND
12849: IFFALSE 13089
12851: GO 12853
12853: DISABLE
// begin if IsOK ( Claptopn ) then
12854: LD_EXP 11
12858: PPUSH
12859: CALL_OW 302
12863: IFFALSE 12879
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12865: LD_EXP 11
12869: PPUSH
12870: LD_STRING D9b-Eng1-1
12872: PPUSH
12873: CALL_OW 88
// end else
12877: GO 13075
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12879: LD_INT 22
12881: PUSH
12882: LD_INT 1
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: PUSH
12889: LD_INT 21
12891: PUSH
12892: LD_INT 1
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PUSH
12899: LD_INT 25
12901: PUSH
12902: LD_INT 3
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PUSH
12909: LD_INT 26
12911: PUSH
12912: LD_INT 1
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: PPUSH
12925: CALL_OW 69
12929: PUSH
12930: LD_EXP 1
12934: PUSH
12935: EMPTY
12936: LIST
12937: PUSH
12938: LD_INT 0
12940: GREATER
12941: DIFF
12942: IFFALSE 13016
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12944: LD_INT 22
12946: PUSH
12947: LD_INT 1
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 21
12956: PUSH
12957: LD_INT 1
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: LD_INT 25
12966: PUSH
12967: LD_INT 2
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: LD_INT 26
12976: PUSH
12977: LD_INT 1
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 69
12994: PUSH
12995: LD_EXP 1
12999: PUSH
13000: EMPTY
13001: LIST
13002: DIFF
13003: PPUSH
13004: LD_STRING D9b-Eng1-1
13006: PPUSH
13007: LD_STRING D9b-Eng1-11
13009: PPUSH
13010: CALL 4625 0 3
// end else
13014: GO 13075
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
13016: LD_INT 22
13018: PUSH
13019: LD_INT 1
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: LD_INT 21
13028: PUSH
13029: LD_INT 1
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 26
13038: PUSH
13039: LD_INT 1
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: PPUSH
13051: CALL_OW 69
13055: PUSH
13056: LD_EXP 1
13060: PUSH
13061: EMPTY
13062: LIST
13063: DIFF
13064: PPUSH
13065: LD_STRING D9b-Eng1-1
13067: PPUSH
13068: LD_STRING D9b-Eng1-1
13070: PPUSH
13071: CALL 4625 0 3
// end ; end ; if energyVDialog = 0 then
13075: LD_EXP 33
13079: PUSH
13080: LD_INT 0
13082: EQUAL
13083: IFFALSE 13089
// EnergyDialog ;
13085: CALL 5028 0 0
// end ;
13089: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
13090: LD_EXP 34
13094: PUSH
13095: LD_INT 1
13097: EQUAL
13098: PUSH
13099: LD_EXP 35
13103: PUSH
13104: LD_INT 1
13106: EQUAL
13107: AND
13108: IFFALSE 13120
13110: GO 13112
13112: DISABLE
// ChangeMissionObjectives ( M1a ) ;
13113: LD_STRING M1a
13115: PPUSH
13116: CALL_OW 337
13120: END
// every 3 3$0 do
13121: GO 13123
13123: DISABLE
// begin PrepareFirstAttack ;
13124: CALL 4230 0 0
// end ;
13128: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
13129: LD_INT 22
13131: PUSH
13132: LD_INT 5
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: LD_INT 21
13141: PUSH
13142: LD_INT 1
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 3
13151: PUSH
13152: LD_INT 24
13154: PUSH
13155: LD_INT 250
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: LIST
13170: PPUSH
13171: CALL_OW 69
13175: PUSH
13176: LD_INT 0
13178: GREATER
13179: PUSH
13180: LD_EXP 23
13184: PUSH
13185: LD_INT 1
13187: EQUAL
13188: AND
13189: IFFALSE 13490
13191: GO 13193
13193: DISABLE
13194: LD_INT 0
13196: PPUSH
// begin firstRussianAttack = 2 ;
13197: LD_ADDR_EXP 23
13201: PUSH
13202: LD_INT 2
13204: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
13205: LD_INT 22
13207: PUSH
13208: LD_INT 5
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PUSH
13215: LD_INT 21
13217: PUSH
13218: LD_INT 1
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PPUSH
13229: CALL_OW 69
13233: PPUSH
13234: LD_INT 125
13236: PPUSH
13237: LD_INT 98
13239: PPUSH
13240: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
13244: LD_INT 22
13246: PUSH
13247: LD_INT 1
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 21
13256: PUSH
13257: LD_INT 1
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PPUSH
13268: CALL_OW 69
13272: PUSH
13273: LD_EXP 1
13277: PUSH
13278: LD_EXP 7
13282: PUSH
13283: LD_EXP 4
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: LIST
13292: DIFF
13293: PPUSH
13294: LD_STRING DAtt1-Sol1-1
13296: PPUSH
13297: LD_STRING DAtt1-FSol1-1
13299: PPUSH
13300: CALL 4625 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
13304: LD_EXP 1
13308: PPUSH
13309: LD_STRING DAtt1-JMM-1
13311: PPUSH
13312: CALL_OW 88
// if Lisa then
13316: LD_EXP 4
13320: IFFALSE 13336
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
13322: LD_EXP 4
13326: PPUSH
13327: LD_STRING DAtt1a-Lisa-1
13329: PPUSH
13330: CALL_OW 88
// end else
13334: GO 13407
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13336: LD_INT 22
13338: PUSH
13339: LD_INT 1
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: LD_INT 21
13348: PUSH
13349: LD_INT 1
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 26
13358: PUSH
13359: LD_INT 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: LIST
13370: PPUSH
13371: CALL_OW 69
13375: PUSH
13376: LD_EXP 1
13380: PUSH
13381: LD_EXP 7
13385: PUSH
13386: LD_EXP 4
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: LIST
13395: DIFF
13396: PPUSH
13397: LD_STRING DAtt1a-Sol1-1
13399: PPUSH
13400: LD_STRING DAtt1-FSol1-1
13402: PPUSH
13403: CALL 4625 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13407: LD_EXP 1
13411: PPUSH
13412: LD_STRING DAtt1a-JMM-1
13414: PPUSH
13415: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13419: LD_INT 22
13421: PUSH
13422: LD_INT 1
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: LD_INT 21
13431: PUSH
13432: LD_INT 1
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 26
13441: PUSH
13442: LD_INT 1
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: LIST
13453: PPUSH
13454: CALL_OW 69
13458: PUSH
13459: LD_EXP 1
13463: PUSH
13464: LD_EXP 7
13468: PUSH
13469: LD_EXP 4
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: DIFF
13479: PPUSH
13480: LD_STRING DAtt1b-Sol1-1
13482: PPUSH
13483: LD_STRING DAtt1a-Sol1-1
13485: PPUSH
13486: CALL 4625 0 3
// end ;
13490: PPOPN 1
13492: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13493: LD_EXP 23
13497: PUSH
13498: LD_INT 2
13500: EQUAL
13501: IFFALSE 13563
13503: GO 13505
13505: DISABLE
13506: LD_INT 0
13508: PPUSH
// begin enable ;
13509: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13510: LD_ADDR_VAR 0 1
13514: PUSH
13515: LD_INT 5
13517: PPUSH
13518: LD_INT 22
13520: PUSH
13521: LD_INT 5
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 21
13530: PUSH
13531: LD_INT 1
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PPUSH
13542: CALL_OW 70
13546: PUSH
13547: FOR_IN
13548: IFFALSE 13561
// RemoveUnit ( i ) ;
13550: LD_VAR 0 1
13554: PPUSH
13555: CALL_OW 64
13559: GO 13547
13561: POP
13562: POP
// end ;
13563: PPOPN 1
13565: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13566: LD_INT 22
13568: PUSH
13569: LD_INT 5
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PUSH
13576: EMPTY
13577: LIST
13578: PPUSH
13579: CALL_OW 69
13583: PUSH
13584: LD_INT 0
13586: EQUAL
13587: PUSH
13588: LD_EXP 23
13592: PUSH
13593: LD_INT 2
13595: EQUAL
13596: AND
13597: IFFALSE 13610
13599: GO 13601
13601: DISABLE
// firstRussianAttack = 3 ;
13602: LD_ADDR_EXP 23
13606: PUSH
13607: LD_INT 3
13609: ST_TO_ADDR
13610: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13611: LD_EXP 28
13615: PUSH
13616: LD_INT 0
13618: EQUAL
13619: IFFALSE 13700
13621: GO 13623
13623: DISABLE
// begin timerStatus = 4 ;
13624: LD_ADDR_EXP 29
13628: PUSH
13629: LD_INT 4
13631: ST_TO_ADDR
// DialogueOn ;
13632: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13636: LD_EXP 13
13640: PPUSH
13641: LD_STRING D2-Don-1
13643: PPUSH
13644: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13648: LD_EXP 1
13652: PPUSH
13653: LD_STRING D2-JMM-1
13655: PPUSH
13656: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13660: LD_EXP 13
13664: PPUSH
13665: LD_STRING D2-Don-2
13667: PPUSH
13668: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13672: LD_EXP 1
13676: PPUSH
13677: LD_STRING D2-JMM-2
13679: PPUSH
13680: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13684: LD_EXP 13
13688: PPUSH
13689: LD_STRING D2-Don-3
13691: PPUSH
13692: CALL_OW 94
// DialogueOff ;
13696: CALL_OW 7
// end ;
13700: END
// every 12 12$0 do var tmp ;
13701: GO 13703
13703: DISABLE
13704: LD_INT 0
13706: PPUSH
// begin PrepareDonaldsonArmy ;
13707: CALL 1221 0 0
// CenterNowOnUnits ( Donaldson ) ;
13711: LD_EXP 13
13715: PPUSH
13716: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
13720: LD_INT 22
13722: PUSH
13723: LD_INT 6
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PPUSH
13730: CALL_OW 69
13734: NOT
13735: IFFALSE 13751
// begin wait ( 3 ) ;
13737: LD_INT 3
13739: PPUSH
13740: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
13744: LD_STRING ACH_BASE
13746: PPUSH
13747: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13751: LD_ADDR_VAR 0 1
13755: PUSH
13756: LD_INT 22
13758: PUSH
13759: LD_INT 4
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: LD_INT 21
13768: PUSH
13769: LD_INT 1
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 26
13778: PUSH
13779: LD_INT 1
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 25
13788: PUSH
13789: LD_INT 1
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: PPUSH
13802: CALL_OW 69
13806: PUSH
13807: LD_EXP 5
13811: PUSH
13812: EMPTY
13813: LIST
13814: DIFF
13815: ST_TO_ADDR
// DialogueOn ;
13816: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13820: LD_VAR 0 1
13824: PPUSH
13825: LD_STRING D3-Sol1-1
13827: PPUSH
13828: LD_STRING D3-Sol1-1
13830: PPUSH
13831: CALL 4625 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13835: LD_INT 22
13837: PUSH
13838: LD_INT 4
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 21
13847: PUSH
13848: LD_INT 1
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 26
13857: PUSH
13858: LD_INT 1
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: LD_INT 25
13867: PUSH
13868: LD_INT 3
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: PPUSH
13881: CALL_OW 69
13885: PPUSH
13886: LD_STRING D3-Sol2-1
13888: PPUSH
13889: LD_STRING D3-Sol2-1
13891: PPUSH
13892: CALL 4625 0 3
// if Frank then
13896: LD_EXP 5
13900: IFFALSE 13914
// Say ( Frank , D3-Frank-1 ) ;
13902: LD_EXP 5
13906: PPUSH
13907: LD_STRING D3-Frank-1
13909: PPUSH
13910: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13914: LD_EXP 13
13918: PPUSH
13919: LD_STRING D3-Don-1
13921: PPUSH
13922: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13926: LD_EXP 13
13930: PPUSH
13931: LD_STRING D3-Don-1a
13933: PPUSH
13934: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13938: LD_EXP 1
13942: PPUSH
13943: LD_STRING D3-JMM-1
13945: PPUSH
13946: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13950: LD_EXP 13
13954: PPUSH
13955: LD_STRING D3-Don-2
13957: PPUSH
13958: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13962: LD_INT 22
13964: PUSH
13965: LD_INT 6
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 21
13974: PUSH
13975: LD_INT 1
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PPUSH
13986: CALL_OW 69
13990: PUSH
13991: LD_INT 0
13993: GREATER
13994: IFFALSE 14132
// begin Say ( JMM , D3-JMM-2 ) ;
13996: LD_EXP 1
14000: PPUSH
14001: LD_STRING D3-JMM-2
14003: PPUSH
14004: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
14008: LD_EXP 13
14012: PPUSH
14013: LD_STRING D3-Don-3
14015: PPUSH
14016: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
14020: LD_EXP 1
14024: PPUSH
14025: LD_STRING D3-JMM-3
14027: PPUSH
14028: CALL_OW 88
// if IsOK ( Frank ) then
14032: LD_EXP 5
14036: PPUSH
14037: CALL_OW 302
14041: IFFALSE 14055
// Say ( Frank , D3-Frank-3 ) ;
14043: LD_EXP 5
14047: PPUSH
14048: LD_STRING D3-Frank-3
14050: PPUSH
14051: CALL_OW 88
// DialogueOff ;
14055: CALL_OW 7
// if IsOK ( Frank ) then
14059: LD_EXP 5
14063: PPUSH
14064: CALL_OW 302
14068: IFFALSE 14130
// begin SetSide ( Frank , 0 ) ;
14070: LD_EXP 5
14074: PPUSH
14075: LD_INT 0
14077: PPUSH
14078: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14082: LD_EXP 5
14086: PPUSH
14087: LD_INT 12
14089: PPUSH
14090: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14094: LD_EXP 5
14098: PPUSH
14099: LD_STRING 04t_Frank
14101: PPUSH
14102: CALL_OW 38
// Wait ( 0 0$3 ) ;
14106: LD_INT 105
14108: PPUSH
14109: CALL_OW 67
// frankScoutBase = 1 ;
14113: LD_ADDR_EXP 25
14117: PUSH
14118: LD_INT 1
14120: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14121: LD_EXP 5
14125: PPUSH
14126: CALL_OW 64
// end ; end else
14130: GO 14219
// begin Say ( JMM , D3-JMM-4 ) ;
14132: LD_EXP 1
14136: PPUSH
14137: LD_STRING D3-JMM-4
14139: PPUSH
14140: CALL_OW 88
// DialogueOff ;
14144: CALL_OW 7
// if IsOK ( Frank ) then
14148: LD_EXP 5
14152: PPUSH
14153: CALL_OW 302
14157: IFFALSE 14219
// begin SetSide ( Frank , 0 ) ;
14159: LD_EXP 5
14163: PPUSH
14164: LD_INT 0
14166: PPUSH
14167: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14171: LD_EXP 5
14175: PPUSH
14176: LD_INT 12
14178: PPUSH
14179: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14183: LD_EXP 5
14187: PPUSH
14188: LD_STRING 04t_Frank
14190: PPUSH
14191: CALL_OW 38
// Wait ( 0 0$3 ) ;
14195: LD_INT 105
14197: PPUSH
14198: CALL_OW 67
// frankScoutBase = 1 ;
14202: LD_ADDR_EXP 25
14206: PUSH
14207: LD_INT 1
14209: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14210: LD_EXP 5
14214: PPUSH
14215: CALL_OW 64
// end ; end ; end ;
14219: PPOPN 1
14221: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
14222: LD_EXP 13
14226: PPUSH
14227: CALL_OW 255
14231: PUSH
14232: LD_INT 4
14234: EQUAL
14235: PUSH
14236: LD_EXP 13
14240: PPUSH
14241: CALL_OW 302
14245: AND
14246: IFFALSE 14380
14248: GO 14250
14250: DISABLE
14251: LD_INT 0
14253: PPUSH
14254: PPUSH
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
14255: LD_EXP 13
14259: PPUSH
14260: LD_STRING D3b-Don-1
14262: PPUSH
14263: CALL_OW 94
// donaldsonCoopAttack = 1 ;
14267: LD_ADDR_EXP 41
14271: PUSH
14272: LD_INT 1
14274: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
14275: LD_ADDR_VAR 0 2
14279: PUSH
14280: LD_INT 22
14282: PUSH
14283: LD_INT 4
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PPUSH
14290: CALL_OW 69
14294: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14295: LD_INT 35
14297: PPUSH
14298: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
14302: LD_VAR 0 2
14306: NOT
14307: PUSH
14308: LD_INT 22
14310: PUSH
14311: LD_INT 6
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: LD_INT 101
14320: PUSH
14321: LD_INT 1
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PPUSH
14332: CALL_OW 69
14336: OR
14337: IFFALSE 14295
// if not tmp then
14339: LD_VAR 0 2
14343: NOT
14344: IFFALSE 14348
// exit ;
14346: GO 14380
// for i in tmp do
14348: LD_ADDR_VAR 0 1
14352: PUSH
14353: LD_VAR 0 2
14357: PUSH
14358: FOR_IN
14359: IFFALSE 14378
// ComAgressiveMove ( i , 52 , 64 ) ;
14361: LD_VAR 0 1
14365: PPUSH
14366: LD_INT 52
14368: PPUSH
14369: LD_INT 64
14371: PPUSH
14372: CALL_OW 114
14376: GO 14358
14378: POP
14379: POP
// end ;
14380: PPOPN 2
14382: END
// every 0 0$1 trigger not saveDonaldson and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_dist , JMM , 9 ] ] ) diff Frank do var i ;
14383: LD_EXP 24
14387: NOT
14388: PUSH
14389: LD_INT 22
14391: PUSH
14392: LD_INT 4
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 21
14401: PUSH
14402: LD_INT 1
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 91
14411: PUSH
14412: LD_EXP 1
14416: PUSH
14417: LD_INT 9
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: LIST
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: LIST
14429: PPUSH
14430: CALL_OW 69
14434: PUSH
14435: LD_EXP 5
14439: DIFF
14440: AND
14441: IFFALSE 14496
14443: GO 14445
14445: DISABLE
14446: LD_INT 0
14448: PPUSH
// begin saveDonaldson := 1 ;
14449: LD_ADDR_EXP 24
14453: PUSH
14454: LD_INT 1
14456: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
14457: LD_ADDR_VAR 0 1
14461: PUSH
14462: LD_INT 22
14464: PUSH
14465: LD_INT 4
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PPUSH
14472: CALL_OW 69
14476: PUSH
14477: FOR_IN
14478: IFFALSE 14494
// SetSide ( i , 1 ) ;
14480: LD_VAR 0 1
14484: PPUSH
14485: LD_INT 1
14487: PPUSH
14488: CALL_OW 235
14492: GO 14477
14494: POP
14495: POP
// end ;
14496: PPOPN 1
14498: END
// every 0 0$1 trigger frankScoutBase do
14499: LD_EXP 25
14503: IFFALSE 14868
14505: GO 14507
14507: DISABLE
// begin wait ( 2 2$30 ) ;
14508: LD_INT 5250
14510: PPUSH
14511: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14515: LD_INT 35
14517: PPUSH
14518: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
14522: LD_INT 81
14524: PUSH
14525: LD_INT 4
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PUSH
14532: LD_INT 92
14534: PUSH
14535: LD_INT 84
14537: PUSH
14538: LD_INT 28
14540: PUSH
14541: LD_INT 22
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PPUSH
14554: CALL_OW 69
14558: NOT
14559: IFFALSE 14515
// uc_side = 4 ;
14561: LD_ADDR_OWVAR 20
14565: PUSH
14566: LD_INT 4
14568: ST_TO_ADDR
// uc_nation = 1 ;
14569: LD_ADDR_OWVAR 21
14573: PUSH
14574: LD_INT 1
14576: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
14577: LD_ADDR_EXP 5
14581: PUSH
14582: LD_STRING 04t_Frank
14584: PPUSH
14585: CALL_OW 34
14589: ST_TO_ADDR
// if not Frank then
14590: LD_EXP 5
14594: NOT
14595: IFFALSE 14599
// exit ;
14597: GO 14868
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14599: LD_EXP 5
14603: PPUSH
14604: LD_INT 13
14606: PPUSH
14607: LD_INT 0
14609: PPUSH
14610: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14614: LD_INT 35
14616: PPUSH
14617: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
14621: LD_EXP 1
14625: PPUSH
14626: CALL_OW 310
14630: NOT
14631: PUSH
14632: LD_EXP 1
14636: PPUSH
14637: LD_INT 4
14639: PPUSH
14640: CALL_OW 296
14644: PUSH
14645: LD_INT 20
14647: LESS
14648: AND
14649: IFFALSE 14682
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14651: LD_EXP 5
14655: PPUSH
14656: LD_EXP 1
14660: PPUSH
14661: CALL_OW 250
14665: PPUSH
14666: LD_EXP 1
14670: PPUSH
14671: CALL_OW 251
14675: PPUSH
14676: CALL_OW 111
14680: GO 14697
// ComMoveXY ( Frank , 51 , 15 ) ;
14682: LD_EXP 5
14686: PPUSH
14687: LD_INT 51
14689: PPUSH
14690: LD_INT 15
14692: PPUSH
14693: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14697: LD_EXP 5
14701: PPUSH
14702: LD_EXP 1
14706: PPUSH
14707: CALL_OW 296
14711: PUSH
14712: LD_INT 10
14714: LESS
14715: IFFALSE 14614
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14717: LD_EXP 1
14721: PUSH
14722: LD_EXP 5
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PPUSH
14731: CALL_OW 87
// DialogueOn ;
14735: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14739: LD_EXP 5
14743: PPUSH
14744: LD_STRING D3a-Frank-1
14746: PPUSH
14747: CALL_OW 88
// if Lisa then
14751: LD_EXP 4
14755: IFFALSE 14805
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14757: LD_EXP 4
14761: PPUSH
14762: LD_STRING D3a-Lisa-1
14764: PPUSH
14765: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14769: LD_EXP 5
14773: PPUSH
14774: LD_STRING D3a-Frank-2
14776: PPUSH
14777: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14781: LD_EXP 4
14785: PPUSH
14786: LD_STRING D3a-Lisa-2
14788: PPUSH
14789: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14793: LD_EXP 5
14797: PPUSH
14798: LD_STRING D3a-Frank-3
14800: PPUSH
14801: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14805: LD_EXP 1
14809: PPUSH
14810: LD_STRING D3a-JMM-3
14812: PPUSH
14813: CALL_OW 88
// DialogueOff ;
14817: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14821: LD_EXP 5
14825: PPUSH
14826: LD_INT 1
14828: PPUSH
14829: CALL_OW 235
// InGameOn ;
14833: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14837: LD_INT 1
14839: PPUSH
14840: LD_INT 7
14842: PPUSH
14843: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14847: LD_INT 93
14849: PPUSH
14850: LD_INT 91
14852: PPUSH
14853: CALL_OW 84
// wait ( 0 0$5 ) ;
14857: LD_INT 175
14859: PPUSH
14860: CALL_OW 67
// InGameOff ;
14864: CALL_OW 9
// end ;
14868: END
// every 12 12$0 trigger Difficulty > 1 do
14869: LD_OWVAR 67
14873: PUSH
14874: LD_INT 1
14876: GREATER
14877: IFFALSE 14901
14879: GO 14881
14881: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14882: LD_INT 24
14884: PPUSH
14885: LD_INT 24
14887: PPUSH
14888: LD_INT 1
14890: PPUSH
14891: LD_INT 1
14893: PPUSH
14894: LD_INT 53
14896: PPUSH
14897: CALL_OW 185
14901: END
// every 18 18$0 do
14902: GO 14904
14904: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14905: LD_EXP 14
14909: PPUSH
14910: LD_STRING D4-Har-1
14912: PPUSH
14913: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14917: LD_EXP 1
14921: PPUSH
14922: LD_STRING D4-JMM-1
14924: PPUSH
14925: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14929: LD_EXP 14
14933: PPUSH
14934: LD_STRING D4-Har-2
14936: PPUSH
14937: CALL_OW 94
// case query ( Q1 ) of 1 :
14941: LD_STRING Q1
14943: PPUSH
14944: CALL_OW 97
14948: PUSH
14949: LD_INT 1
14951: DOUBLE
14952: EQUAL
14953: IFTRUE 14957
14955: GO 15016
14957: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14958: LD_EXP 1
14962: PPUSH
14963: LD_STRING D5-JMM-1
14965: PPUSH
14966: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14970: LD_EXP 14
14974: PPUSH
14975: LD_STRING D5-Har-1
14977: PPUSH
14978: CALL_OW 94
// timeToSupport = 10 10$0 ;
14982: LD_ADDR_EXP 28
14986: PUSH
14987: LD_INT 21000
14989: ST_TO_ADDR
// timerStatus = 2 ;
14990: LD_ADDR_EXP 29
14994: PUSH
14995: LD_INT 2
14997: ST_TO_ADDR
// startTimer = 1 ;
14998: LD_ADDR_EXP 30
15002: PUSH
15003: LD_INT 1
15005: ST_TO_ADDR
// harrAnswer = 1 ;
15006: LD_ADDR_EXP 26
15010: PUSH
15011: LD_INT 1
15013: ST_TO_ADDR
// end ; 2 :
15014: GO 15151
15016: LD_INT 2
15018: DOUBLE
15019: EQUAL
15020: IFTRUE 15024
15022: GO 15083
15024: POP
// begin Say ( JMM , D5-JMM-2 ) ;
15025: LD_EXP 1
15029: PPUSH
15030: LD_STRING D5-JMM-2
15032: PPUSH
15033: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
15037: LD_EXP 14
15041: PPUSH
15042: LD_STRING D5-Har-2
15044: PPUSH
15045: CALL_OW 94
// timeToSupport = 5 5$0 ;
15049: LD_ADDR_EXP 28
15053: PUSH
15054: LD_INT 10500
15056: ST_TO_ADDR
// timerStatus = 2 ;
15057: LD_ADDR_EXP 29
15061: PUSH
15062: LD_INT 2
15064: ST_TO_ADDR
// startTimer = 1 ;
15065: LD_ADDR_EXP 30
15069: PUSH
15070: LD_INT 1
15072: ST_TO_ADDR
// harrAnswer = 2 ;
15073: LD_ADDR_EXP 26
15077: PUSH
15078: LD_INT 2
15080: ST_TO_ADDR
// end ; 3 :
15081: GO 15151
15083: LD_INT 3
15085: DOUBLE
15086: EQUAL
15087: IFTRUE 15091
15089: GO 15150
15091: POP
// begin Say ( JMM , D5-JMM-3 ) ;
15092: LD_EXP 1
15096: PPUSH
15097: LD_STRING D5-JMM-3
15099: PPUSH
15100: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
15104: LD_EXP 14
15108: PPUSH
15109: LD_STRING D5-Har-3
15111: PPUSH
15112: CALL_OW 94
// timeToSupport = 5 5$0 ;
15116: LD_ADDR_EXP 28
15120: PUSH
15121: LD_INT 10500
15123: ST_TO_ADDR
// timerStatus = 2 ;
15124: LD_ADDR_EXP 29
15128: PUSH
15129: LD_INT 2
15131: ST_TO_ADDR
// startTimer = 1 ;
15132: LD_ADDR_EXP 30
15136: PUSH
15137: LD_INT 1
15139: ST_TO_ADDR
// harrAnswer = 3 ;
15140: LD_ADDR_EXP 26
15144: PUSH
15145: LD_INT 3
15147: ST_TO_ADDR
// end ; end ;
15148: GO 15151
15150: POP
// end ;
15151: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
15152: LD_EXP 29
15156: PUSH
15157: LD_INT 2
15159: EQUAL
15160: PUSH
15161: LD_EXP 28
15165: PUSH
15166: LD_INT 0
15168: EQUAL
15169: AND
15170: IFFALSE 15447
15172: GO 15174
15174: DISABLE
// begin timerStatus = 4 ;
15175: LD_ADDR_EXP 29
15179: PUSH
15180: LD_INT 4
15182: ST_TO_ADDR
// if harrAnswer = 1 then
15183: LD_EXP 26
15187: PUSH
15188: LD_INT 1
15190: EQUAL
15191: IFFALSE 15271
// begin PrepareHarrisonSupport ( 3 ) ;
15193: LD_INT 3
15195: PPUSH
15196: CALL 1791 0 1
// wait ( 1 1$0 ) ;
15200: LD_INT 2100
15202: PPUSH
15203: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15207: LD_EXP 14
15211: PPUSH
15212: LD_STRING D7-Har-1
15214: PPUSH
15215: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15219: LD_STRING M2
15221: PPUSH
15222: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15226: LD_ADDR_EXP 27
15230: PUSH
15231: LD_INT 31500
15233: PUSH
15234: LD_INT 10500
15236: PUSH
15237: LD_INT 8400
15239: PUSH
15240: LD_INT 6300
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: LIST
15247: PUSH
15248: LD_OWVAR 67
15252: ARRAY
15253: PLUS
15254: ST_TO_ADDR
// startTimer = 1 ;
15255: LD_ADDR_EXP 30
15259: PUSH
15260: LD_INT 1
15262: ST_TO_ADDR
// timerStatus = 3 ;
15263: LD_ADDR_EXP 29
15267: PUSH
15268: LD_INT 3
15270: ST_TO_ADDR
// end ; if harrAnswer = 2 then
15271: LD_EXP 26
15275: PUSH
15276: LD_INT 2
15278: EQUAL
15279: IFFALSE 15359
// begin PrepareHarrisonSupport ( 4 ) ;
15281: LD_INT 4
15283: PPUSH
15284: CALL 1791 0 1
// wait ( 1 1$0 ) ;
15288: LD_INT 2100
15290: PPUSH
15291: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15295: LD_EXP 14
15299: PPUSH
15300: LD_STRING D7-Har-1
15302: PPUSH
15303: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15307: LD_STRING M2
15309: PPUSH
15310: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15314: LD_ADDR_EXP 27
15318: PUSH
15319: LD_INT 33600
15321: PUSH
15322: LD_INT 10500
15324: PUSH
15325: LD_INT 8400
15327: PUSH
15328: LD_INT 6300
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: PUSH
15336: LD_OWVAR 67
15340: ARRAY
15341: PLUS
15342: ST_TO_ADDR
// startTimer = 1 ;
15343: LD_ADDR_EXP 30
15347: PUSH
15348: LD_INT 1
15350: ST_TO_ADDR
// timerStatus = 3 ;
15351: LD_ADDR_EXP 29
15355: PUSH
15356: LD_INT 3
15358: ST_TO_ADDR
// end ; if harrAnswer = 3 then
15359: LD_EXP 26
15363: PUSH
15364: LD_INT 3
15366: EQUAL
15367: IFFALSE 15447
// begin PrepareHarrisonSupport ( 5 ) ;
15369: LD_INT 5
15371: PPUSH
15372: CALL 1791 0 1
// wait ( 1 1$0 ) ;
15376: LD_INT 2100
15378: PPUSH
15379: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15383: LD_EXP 14
15387: PPUSH
15388: LD_STRING D7-Har-1
15390: PPUSH
15391: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15395: LD_STRING M2
15397: PPUSH
15398: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
15402: LD_ADDR_EXP 27
15406: PUSH
15407: LD_INT 35700
15409: PUSH
15410: LD_INT 10500
15412: PUSH
15413: LD_INT 6300
15415: PUSH
15416: LD_INT 4200
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: LIST
15423: PUSH
15424: LD_OWVAR 67
15428: ARRAY
15429: PLUS
15430: ST_TO_ADDR
// startTimer = 1 ;
15431: LD_ADDR_EXP 30
15435: PUSH
15436: LD_INT 1
15438: ST_TO_ADDR
// timerStatus = 3 ;
15439: LD_ADDR_EXP 29
15443: PUSH
15444: LD_INT 3
15446: ST_TO_ADDR
// end ; end ;
15447: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
15448: LD_EXP 27
15452: PUSH
15453: LD_INT 8400
15455: LESSEQUAL
15456: PUSH
15457: LD_EXP 29
15461: PUSH
15462: LD_INT 3
15464: EQUAL
15465: AND
15466: IFFALSE 15498
15468: GO 15470
15470: DISABLE
// begin DialogueOn ;
15471: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15475: LD_EXP 14
15479: PPUSH
15480: LD_STRING D7a-Har-1
15482: PPUSH
15483: CALL_OW 94
// DialogueOff ;
15487: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15491: LD_STRING M2a
15493: PPUSH
15494: CALL_OW 337
// end ;
15498: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
15499: LD_EXP 27
15503: PUSH
15504: LD_INT 0
15506: LESSEQUAL
15507: PUSH
15508: LD_EXP 29
15512: PUSH
15513: LD_INT 3
15515: EQUAL
15516: AND
15517: PUSH
15518: LD_EXP 40
15522: NOT
15523: AND
15524: IFFALSE 15663
15526: GO 15528
15528: DISABLE
15529: LD_INT 0
15531: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15532: LD_ADDR_VAR 0 1
15536: PUSH
15537: LD_INT 22
15539: PUSH
15540: LD_INT 1
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PPUSH
15547: CALL_OW 69
15551: PUSH
15552: LD_EXP 1
15556: PUSH
15557: EMPTY
15558: LIST
15559: DIFF
15560: ST_TO_ADDR
// saveDonaldson = 2 ;
15561: LD_ADDR_EXP 24
15565: PUSH
15566: LD_INT 2
15568: ST_TO_ADDR
// DialogueOn ;
15569: CALL_OW 6
// if IsOK ( Donaldson ) then
15573: LD_EXP 13
15577: PPUSH
15578: CALL_OW 302
15582: IFFALSE 15598
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15584: LD_EXP 14
15588: PPUSH
15589: LD_STRING D8-Har-1
15591: PPUSH
15592: CALL_OW 94
// end else
15596: GO 15610
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15598: LD_EXP 14
15602: PPUSH
15603: LD_STRING D8-Har-1a
15605: PPUSH
15606: CALL_OW 94
// end ; DialogueOff ;
15610: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15614: LD_VAR 0 1
15618: PPUSH
15619: LD_INT 4
15621: PPUSH
15622: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15626: LD_VAR 0 1
15630: PPUSH
15631: LD_INT 88
15633: PPUSH
15634: LD_INT 89
15636: PPUSH
15637: CALL_OW 114
// honor = 0 ;
15641: LD_ADDR_EXP 39
15645: PUSH
15646: LD_INT 0
15648: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15649: LD_INT 350
15651: PPUSH
15652: CALL_OW 67
// YouLost ( LostCommand ) ;
15656: LD_STRING LostCommand
15658: PPUSH
15659: CALL_OW 104
// end ;
15663: PPOPN 1
15665: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15666: LD_INT 22
15668: PUSH
15669: LD_INT 6
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 21
15678: PUSH
15679: LD_INT 1
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PPUSH
15690: CALL_OW 69
15694: PUSH
15695: LD_INT 0
15697: EQUAL
15698: PUSH
15699: LD_EXP 20
15703: PUSH
15704: LD_INT 0
15706: EQUAL
15707: AND
15708: PUSH
15709: LD_EXP 44
15713: PUSH
15714: LD_INT 1
15716: EQUAL
15717: AND
15718: IFFALSE 15812
15720: GO 15722
15722: DISABLE
15723: LD_INT 0
15725: PPUSH
15726: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15727: LD_ADDR_VAR 0 2
15731: PUSH
15732: LD_INT 22
15734: PUSH
15735: LD_INT 1
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: LD_INT 21
15744: PUSH
15745: LD_INT 1
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PUSH
15752: LD_INT 23
15754: PUSH
15755: LD_INT 1
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: LIST
15766: PPUSH
15767: CALL_OW 69
15771: ST_TO_ADDR
// for i in tmp do
15772: LD_ADDR_VAR 0 1
15776: PUSH
15777: LD_VAR 0 2
15781: PUSH
15782: FOR_IN
15783: IFFALSE 15810
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15785: LD_VAR 0 1
15789: PPUSH
15790: LD_INT 1
15792: PPUSH
15793: LD_INT 4
15795: PPUSH
15796: CALL_OW 12
15800: PPUSH
15801: LD_INT 500
15803: PPUSH
15804: CALL_OW 492
// end ;
15808: GO 15782
15810: POP
15811: POP
// end ; end_of_file
15812: PPOPN 2
15814: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15815: GO 15817
15817: DISABLE
15818: LD_INT 0
15820: PPUSH
// begin enemyWayX = [ ] ;
15821: LD_ADDR_EXP 50
15825: PUSH
15826: EMPTY
15827: ST_TO_ADDR
// enemyWayY = [ ] ;
15828: LD_ADDR_EXP 51
15832: PUSH
15833: EMPTY
15834: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15835: LD_ADDR_VAR 0 1
15839: PUSH
15840: LD_INT 1
15842: PPUSH
15843: LD_INT 3
15845: PPUSH
15846: CALL_OW 12
15850: ST_TO_ADDR
// if rnd = 1 then
15851: LD_VAR 0 1
15855: PUSH
15856: LD_INT 1
15858: EQUAL
15859: IFFALSE 15899
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15861: LD_ADDR_EXP 50
15865: PUSH
15866: LD_INT 73
15868: PUSH
15869: LD_INT 46
15871: PUSH
15872: LD_INT 29
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: LIST
15879: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15880: LD_ADDR_EXP 51
15884: PUSH
15885: LD_INT 71
15887: PUSH
15888: LD_INT 43
15890: PUSH
15891: LD_INT 29
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: LIST
15898: ST_TO_ADDR
// end ; if rnd = 2 then
15899: LD_VAR 0 1
15903: PUSH
15904: LD_INT 2
15906: EQUAL
15907: IFFALSE 15931
// begin enemyWayX = [ 64 ] ;
15909: LD_ADDR_EXP 50
15913: PUSH
15914: LD_INT 64
15916: PUSH
15917: EMPTY
15918: LIST
15919: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15920: LD_ADDR_EXP 51
15924: PUSH
15925: LD_INT 43
15927: PUSH
15928: EMPTY
15929: LIST
15930: ST_TO_ADDR
// end ; if rnd = 3 then
15931: LD_VAR 0 1
15935: PUSH
15936: LD_INT 3
15938: EQUAL
15939: IFFALSE 15963
// begin enemyWayX = [ 80 ] ;
15941: LD_ADDR_EXP 50
15945: PUSH
15946: LD_INT 80
15948: PUSH
15949: EMPTY
15950: LIST
15951: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15952: LD_ADDR_EXP 51
15956: PUSH
15957: LD_INT 28
15959: PUSH
15960: EMPTY
15961: LIST
15962: ST_TO_ADDR
// end ; enable ;
15963: ENABLE
// end ;
15964: PPOPN 1
15966: END
// every 0 0$1 trigger AIEnable = 1 do
15967: LD_EXP 37
15971: PUSH
15972: LD_INT 1
15974: EQUAL
15975: IFFALSE 16089
15977: GO 15979
15979: DISABLE
// begin enable ;
15980: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15981: LD_INT 3
15983: PPUSH
15984: LD_INT 21
15986: PPUSH
15987: LD_INT 7
15989: PPUSH
15990: CALL 6061 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15994: LD_INT 3
15996: PPUSH
15997: LD_INT 8
15999: PPUSH
16000: LD_INT 7
16002: PPUSH
16003: LD_INT 1
16005: PPUSH
16006: CALL 6382 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
16010: LD_INT 3
16012: PPUSH
16013: LD_INT 17
16015: PPUSH
16016: LD_INT 108
16018: PPUSH
16019: LD_INT 95
16021: PPUSH
16022: CALL 7706 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
16026: LD_INT 3
16028: PPUSH
16029: LD_INT 23
16031: PPUSH
16032: LD_EXP 50
16036: PPUSH
16037: LD_EXP 51
16041: PPUSH
16042: CALL 7038 0 4
// if baseReadyToBuild = 2 then
16046: LD_EXP 20
16050: PUSH
16051: LD_INT 2
16053: EQUAL
16054: IFFALSE 16089
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
16056: LD_INT 6
16058: PPUSH
16059: LD_EXP 21
16063: PPUSH
16064: LD_INT 6
16066: PPUSH
16067: CALL 6061 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
16071: LD_INT 6
16073: PPUSH
16074: LD_INT 9
16076: PPUSH
16077: LD_INT 6
16079: PPUSH
16080: LD_EXP 22
16084: PPUSH
16085: CALL 6382 0 4
// end ; end ;
16089: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
16090: LD_EXP 15
16094: PPUSH
16095: CALL_OW 310
16099: NOT
16100: PUSH
16101: LD_INT 21
16103: PPUSH
16104: CALL_OW 302
16108: AND
16109: PUSH
16110: LD_INT 21
16112: PPUSH
16113: CALL_OW 255
16117: PUSH
16118: LD_INT 3
16120: EQUAL
16121: AND
16122: IFFALSE 16140
16124: GO 16126
16126: DISABLE
// begin enable ;
16127: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
16128: LD_EXP 15
16132: PPUSH
16133: LD_INT 21
16135: PPUSH
16136: CALL_OW 120
// end ;
16140: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
16141: LD_INT 22
16143: PUSH
16144: LD_INT 3
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: LD_INT 21
16153: PUSH
16154: LD_INT 2
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 55
16163: PUSH
16164: EMPTY
16165: LIST
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: LIST
16171: PPUSH
16172: CALL_OW 69
16176: PUSH
16177: LD_INT 0
16179: EQUAL
16180: PUSH
16181: LD_INT 1
16183: PPUSH
16184: CALL_OW 255
16188: PUSH
16189: LD_INT 3
16191: EQUAL
16192: AND
16193: PUSH
16194: LD_INT 21
16196: PPUSH
16197: CALL_OW 302
16201: AND
16202: PUSH
16203: LD_INT 21
16205: PPUSH
16206: CALL_OW 255
16210: PUSH
16211: LD_INT 3
16213: EQUAL
16214: AND
16215: PUSH
16216: LD_INT 21
16218: PPUSH
16219: CALL_OW 302
16223: AND
16224: IFFALSE 16436
16226: GO 16228
16228: DISABLE
// begin enable ;
16229: ENABLE
// if Difficulty = 1 then
16230: LD_OWVAR 67
16234: PUSH
16235: LD_INT 1
16237: EQUAL
16238: IFFALSE 16282
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
16240: LD_INT 3
16242: PPUSH
16243: LD_INT 24
16245: PPUSH
16246: LD_OWVAR 67
16250: PUSH
16251: LD_INT 2
16253: PLUS
16254: PPUSH
16255: LD_INT 42
16257: PUSH
16258: LD_INT 44
16260: PUSH
16261: LD_INT 43
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: LIST
16268: PPUSH
16269: LD_INT 1
16271: PPUSH
16272: LD_INT 1
16274: PPUSH
16275: LD_INT 21
16277: PPUSH
16278: CALL 6926 0 7
// if Difficulty = 2 then
16282: LD_OWVAR 67
16286: PUSH
16287: LD_INT 2
16289: EQUAL
16290: IFFALSE 16357
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
16292: LD_INT 3
16294: PPUSH
16295: LD_INT 24
16297: PPUSH
16298: LD_OWVAR 67
16302: PUSH
16303: LD_INT 2
16305: PLUS
16306: PPUSH
16307: LD_INT 44
16309: PUSH
16310: LD_INT 44
16312: PUSH
16313: LD_INT 43
16315: PUSH
16316: LD_INT 43
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: PPUSH
16325: LD_INT 1
16327: PPUSH
16328: LD_INT 1
16330: PPUSH
16331: LD_INT 21
16333: PUSH
16334: LD_INT 22
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 1
16343: PPUSH
16344: LD_INT 2
16346: PPUSH
16347: CALL_OW 12
16351: ARRAY
16352: PPUSH
16353: CALL 6926 0 7
// if Difficulty = 3 then
16357: LD_OWVAR 67
16361: PUSH
16362: LD_INT 3
16364: EQUAL
16365: IFFALSE 16436
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
16367: LD_INT 3
16369: PPUSH
16370: LD_INT 24
16372: PPUSH
16373: LD_OWVAR 67
16377: PUSH
16378: LD_INT 2
16380: PPUSH
16381: LD_INT 3
16383: PPUSH
16384: CALL_OW 12
16388: PLUS
16389: PPUSH
16390: LD_INT 44
16392: PUSH
16393: LD_INT 44
16395: PUSH
16396: LD_INT 43
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: LIST
16403: PPUSH
16404: LD_INT 1
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: LD_INT 22
16412: PUSH
16413: LD_INT 23
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 1
16422: PPUSH
16423: LD_INT 2
16425: PPUSH
16426: CALL_OW 12
16430: ARRAY
16431: PPUSH
16432: CALL 6926 0 7
// end ;
16436: END
// every 0 0$1 do
16437: GO 16439
16439: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
16440: LD_INT 3
16442: PPUSH
16443: LD_INT 1
16445: PPUSH
16446: LD_INT 3
16448: PPUSH
16449: CALL 5976 0 3
16453: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
16454: LD_EXP 20
16458: PUSH
16459: LD_INT 1
16461: EQUAL
16462: IFFALSE 16609
16464: GO 16466
16466: DISABLE
16467: LD_INT 0
16469: PPUSH
16470: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16471: LD_ADDR_VAR 0 2
16475: PUSH
16476: LD_INT 22
16478: PUSH
16479: LD_INT 6
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 21
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 34
16498: PUSH
16499: LD_INT 51
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: LIST
16510: PPUSH
16511: CALL_OW 69
16515: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16516: LD_VAR 0 2
16520: PUSH
16521: LD_INT 1
16523: ARRAY
16524: PPUSH
16525: LD_EXP 21
16529: PPUSH
16530: CALL_OW 250
16534: PUSH
16535: LD_INT 5
16537: MINUS
16538: PPUSH
16539: LD_EXP 21
16543: PPUSH
16544: CALL_OW 251
16548: PUSH
16549: LD_INT 5
16551: MINUS
16552: PPUSH
16553: CALL_OW 111
// wait ( 0 0$5 ) ;
16557: LD_INT 175
16559: PPUSH
16560: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16564: LD_VAR 0 2
16568: PUSH
16569: LD_INT 1
16571: ARRAY
16572: PPUSH
16573: LD_INT 41
16575: PPUSH
16576: LD_INT 52
16578: PPUSH
16579: CALL_OW 177
// wait ( 0 0$40 ) ;
16583: LD_INT 1400
16585: PPUSH
16586: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16590: LD_VAR 0 2
16594: PUSH
16595: LD_INT 1
16597: ARRAY
16598: PPUSH
16599: LD_INT 41
16601: PPUSH
16602: LD_INT 44
16604: PPUSH
16605: CALL_OW 111
// end ;
16609: PPOPN 2
16611: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16612: LD_EXP 21
16616: PPUSH
16617: CALL_OW 274
16621: PPUSH
16622: LD_INT 1
16624: PPUSH
16625: CALL_OW 275
16629: PUSH
16630: LD_INT 100
16632: GREATEREQUAL
16633: IFFALSE 16861
16635: GO 16637
16637: DISABLE
16638: LD_INT 0
16640: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16641: LD_ADDR_VAR 0 1
16645: PUSH
16646: LD_INT 22
16648: PUSH
16649: LD_INT 6
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 21
16658: PUSH
16659: LD_INT 1
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 25
16668: PUSH
16669: LD_INT 2
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: LIST
16680: PPUSH
16681: CALL_OW 69
16685: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16686: LD_VAR 0 1
16690: PUSH
16691: LD_INT 1
16693: ARRAY
16694: PPUSH
16695: LD_INT 4
16697: PPUSH
16698: LD_INT 39
16700: PPUSH
16701: LD_INT 37
16703: PPUSH
16704: LD_INT 3
16706: PPUSH
16707: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16711: LD_VAR 0 1
16715: PUSH
16716: LD_INT 1
16718: ARRAY
16719: PPUSH
16720: LD_INT 29
16722: PPUSH
16723: LD_INT 42
16725: PPUSH
16726: LD_INT 54
16728: PPUSH
16729: LD_INT 3
16731: PPUSH
16732: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16736: LD_VAR 0 1
16740: PUSH
16741: LD_INT 1
16743: ARRAY
16744: PPUSH
16745: LD_INT 6
16747: PPUSH
16748: LD_INT 38
16750: PPUSH
16751: LD_INT 48
16753: PPUSH
16754: LD_INT 0
16756: PPUSH
16757: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16761: LD_VAR 0 1
16765: PUSH
16766: LD_INT 1
16768: ARRAY
16769: PPUSH
16770: LD_INT 2
16772: PPUSH
16773: LD_INT 32
16775: PPUSH
16776: LD_INT 38
16778: PPUSH
16779: LD_INT 2
16781: PPUSH
16782: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16786: LD_VAR 0 1
16790: PUSH
16791: LD_INT 1
16793: ARRAY
16794: PPUSH
16795: LD_INT 26
16797: PPUSH
16798: LD_INT 39
16800: PPUSH
16801: LD_INT 55
16803: PPUSH
16804: LD_INT 3
16806: PPUSH
16807: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16811: LD_VAR 0 1
16815: PUSH
16816: LD_INT 1
16818: ARRAY
16819: PPUSH
16820: LD_INT 32
16822: PPUSH
16823: LD_INT 31
16825: PPUSH
16826: LD_INT 31
16828: PPUSH
16829: LD_INT 3
16831: PPUSH
16832: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16836: LD_VAR 0 1
16840: PUSH
16841: LD_INT 1
16843: ARRAY
16844: PPUSH
16845: LD_INT 31
16847: PPUSH
16848: LD_INT 50
16850: PPUSH
16851: LD_INT 51
16853: PPUSH
16854: LD_INT 4
16856: PPUSH
16857: CALL_OW 205
// end ;
16861: PPOPN 1
16863: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
16864: LD_EXP 46
16868: IFFALSE 17425
16870: GO 16872
16872: DISABLE
16873: LD_INT 0
16875: PPUSH
16876: PPUSH
16877: PPUSH
// begin enable ;
16878: ENABLE
// if not ruMobile then
16879: LD_EXP 46
16883: NOT
16884: IFFALSE 16888
// exit ;
16886: GO 17425
// for i in ruMobile do
16888: LD_ADDR_VAR 0 1
16892: PUSH
16893: LD_EXP 46
16897: PUSH
16898: FOR_IN
16899: IFFALSE 17423
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
16901: LD_VAR 0 1
16905: PPUSH
16906: CALL_OW 302
16910: NOT
16911: PUSH
16912: LD_VAR 0 1
16916: PPUSH
16917: CALL_OW 255
16921: PUSH
16922: LD_INT 3
16924: NONEQUAL
16925: OR
16926: IFFALSE 16946
// begin ruMobile := ruMobile diff i ;
16928: LD_ADDR_EXP 46
16932: PUSH
16933: LD_EXP 46
16937: PUSH
16938: LD_VAR 0 1
16942: DIFF
16943: ST_TO_ADDR
// continue ;
16944: GO 16898
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
16946: LD_VAR 0 1
16950: PPUSH
16951: CALL_OW 110
16955: NOT
16956: PUSH
16957: LD_VAR 0 1
16961: PPUSH
16962: CALL_OW 110
16966: PUSH
16967: LD_INT 0
16969: EQUAL
16970: OR
16971: IFFALSE 17086
// begin if GetFuel ( i ) < 50 then
16973: LD_VAR 0 1
16977: PPUSH
16978: CALL_OW 261
16982: PUSH
16983: LD_INT 50
16985: LESS
16986: IFFALSE 17045
// begin ComMoveXY ( i , 106 , 88 ) ;
16988: LD_VAR 0 1
16992: PPUSH
16993: LD_INT 106
16995: PPUSH
16996: LD_INT 88
16998: PPUSH
16999: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17003: LD_INT 35
17005: PPUSH
17006: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
17010: LD_VAR 0 1
17014: PPUSH
17015: LD_INT 106
17017: PPUSH
17018: LD_INT 88
17020: PPUSH
17021: CALL_OW 297
17025: PUSH
17026: LD_INT 4
17028: LESS
17029: IFFALSE 17003
// SetFuel ( i , 100 ) ;
17031: LD_VAR 0 1
17035: PPUSH
17036: LD_INT 100
17038: PPUSH
17039: CALL_OW 240
// end else
17043: GO 17086
// if not IsInArea ( i , ruParking ) then
17045: LD_VAR 0 1
17049: PPUSH
17050: LD_INT 25
17052: PPUSH
17053: CALL_OW 308
17057: NOT
17058: IFFALSE 17074
// ComMoveToArea ( i , ruParking ) else
17060: LD_VAR 0 1
17064: PPUSH
17065: LD_INT 25
17067: PPUSH
17068: CALL_OW 113
17072: GO 17086
// SetTag ( i , 1 ) ;
17074: LD_VAR 0 1
17078: PPUSH
17079: LD_INT 1
17081: PPUSH
17082: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
17086: LD_VAR 0 1
17090: PPUSH
17091: CALL_OW 110
17095: PUSH
17096: LD_INT 1
17098: EQUAL
17099: IFFALSE 17229
// begin if GetLives ( i ) < 1000 then
17101: LD_VAR 0 1
17105: PPUSH
17106: CALL_OW 256
17110: PUSH
17111: LD_INT 1000
17113: LESS
17114: IFFALSE 17206
// begin if not IsDrivenBy ( i ) then
17116: LD_VAR 0 1
17120: PPUSH
17121: CALL_OW 311
17125: NOT
17126: IFFALSE 17130
// continue ;
17128: GO 16898
// mech := IsDrivenBy ( i ) ;
17130: LD_ADDR_VAR 0 2
17134: PUSH
17135: LD_VAR 0 1
17139: PPUSH
17140: CALL_OW 311
17144: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
17145: LD_VAR 0 2
17149: PPUSH
17150: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
17154: LD_VAR 0 2
17158: PPUSH
17159: LD_VAR 0 1
17163: PPUSH
17164: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
17168: LD_INT 35
17170: PPUSH
17171: CALL_OW 67
// until GetLives ( i ) = 1000 ;
17175: LD_VAR 0 1
17179: PPUSH
17180: CALL_OW 256
17184: PUSH
17185: LD_INT 1000
17187: EQUAL
17188: IFFALSE 17168
// ComEnterUnit ( mech , i ) ;
17190: LD_VAR 0 2
17194: PPUSH
17195: LD_VAR 0 1
17199: PPUSH
17200: CALL_OW 120
// end else
17204: GO 17229
// if IsDrivenBy ( i ) then
17206: LD_VAR 0 1
17210: PPUSH
17211: CALL_OW 311
17215: IFFALSE 17229
// SetTag ( i , 2 ) ;
17217: LD_VAR 0 1
17221: PPUSH
17222: LD_INT 2
17224: PPUSH
17225: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
17229: LD_VAR 0 1
17233: PPUSH
17234: CALL_OW 110
17238: PUSH
17239: LD_INT 2
17241: EQUAL
17242: IFFALSE 17421
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
17244: LD_ADDR_VAR 0 3
17248: PUSH
17249: LD_INT 24
17251: PPUSH
17252: LD_INT 81
17254: PUSH
17255: LD_INT 3
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PPUSH
17262: CALL_OW 70
17266: ST_TO_ADDR
// if GetLives ( i ) < 650 then
17267: LD_VAR 0 1
17271: PPUSH
17272: CALL_OW 256
17276: PUSH
17277: LD_INT 650
17279: LESS
17280: IFFALSE 17305
// begin ComStop ( i ) ;
17282: LD_VAR 0 1
17286: PPUSH
17287: CALL_OW 141
// SetTag ( i , 0 ) ;
17291: LD_VAR 0 1
17295: PPUSH
17296: LD_INT 0
17298: PPUSH
17299: CALL_OW 109
// continue ;
17303: GO 16898
// end ; if enemy then
17305: LD_VAR 0 3
17309: IFFALSE 17349
// begin if not HasTask ( i ) then
17311: LD_VAR 0 1
17315: PPUSH
17316: CALL_OW 314
17320: NOT
17321: IFFALSE 17347
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17323: LD_VAR 0 1
17327: PPUSH
17328: LD_VAR 0 3
17332: PPUSH
17333: LD_VAR 0 1
17337: PPUSH
17338: CALL_OW 74
17342: PPUSH
17343: CALL_OW 115
// end else
17347: GO 17421
// if ruMobile > 2 then
17349: LD_EXP 46
17353: PUSH
17354: LD_INT 2
17356: GREATER
17357: IFFALSE 17421
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17359: LD_ADDR_VAR 0 3
17363: PUSH
17364: LD_INT 81
17366: PUSH
17367: LD_INT 3
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PPUSH
17374: CALL_OW 69
17378: ST_TO_ADDR
// if enemy then
17379: LD_VAR 0 3
17383: IFFALSE 17421
// if not HasTask ( i ) then
17385: LD_VAR 0 1
17389: PPUSH
17390: CALL_OW 314
17394: NOT
17395: IFFALSE 17421
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17397: LD_VAR 0 1
17401: PPUSH
17402: LD_VAR 0 3
17406: PPUSH
17407: LD_VAR 0 1
17411: PPUSH
17412: CALL_OW 74
17416: PPUSH
17417: CALL_OW 115
// end ; end ; end ;
17421: GO 16898
17423: POP
17424: POP
// end ; end_of_file
17425: PPOPN 3
17427: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
17428: LD_INT 0
17430: PPUSH
17431: PPUSH
17432: PPUSH
17433: PPUSH
17434: PPUSH
17435: PPUSH
17436: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
17437: LD_ADDR_VAR 0 3
17441: PUSH
17442: LD_INT 22
17444: PUSH
17445: LD_INT 6
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 21
17454: PUSH
17455: LD_INT 1
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 25
17464: PUSH
17465: LD_INT 1
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 3
17474: PUSH
17475: LD_INT 54
17477: PUSH
17478: EMPTY
17479: LIST
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: PPUSH
17491: CALL_OW 69
17495: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
17496: LD_ADDR_VAR 0 7
17500: PUSH
17501: LD_INT 22
17503: PUSH
17504: LD_INT 6
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 21
17513: PUSH
17514: LD_INT 1
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 25
17523: PUSH
17524: LD_INT 1
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 54
17533: PUSH
17534: EMPTY
17535: LIST
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: PPUSH
17543: CALL_OW 69
17547: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
17548: LD_ADDR_VAR 0 4
17552: PUSH
17553: LD_INT 22
17555: PUSH
17556: LD_INT 6
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: LD_INT 21
17565: PUSH
17566: LD_INT 1
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 25
17575: PUSH
17576: LD_INT 2
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: LIST
17587: PPUSH
17588: CALL_OW 69
17592: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
17593: LD_ADDR_VAR 0 6
17597: PUSH
17598: LD_INT 22
17600: PUSH
17601: LD_INT 6
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 21
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 25
17620: PUSH
17621: LD_INT 4
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: LIST
17632: PPUSH
17633: CALL_OW 69
17637: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
17638: LD_ADDR_VAR 0 8
17642: PUSH
17643: LD_INT 22
17645: PUSH
17646: LD_INT 6
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 21
17655: PUSH
17656: LD_INT 2
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 34
17665: PUSH
17666: LD_INT 51
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: LIST
17677: PPUSH
17678: CALL_OW 69
17682: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
17683: LD_VAR 0 1
17687: PPUSH
17688: CALL_OW 255
17692: PUSH
17693: LD_INT 6
17695: EQUAL
17696: PUSH
17697: LD_VAR 0 1
17701: PPUSH
17702: CALL_OW 266
17706: PUSH
17707: LD_INT 0
17709: EQUAL
17710: AND
17711: IFFALSE 17731
// begin ruPDepot = building ;
17713: LD_ADDR_EXP 21
17717: PUSH
17718: LD_VAR 0 1
17722: ST_TO_ADDR
// baseReadyToBuild = 1 ;
17723: LD_ADDR_EXP 20
17727: PUSH
17728: LD_INT 1
17730: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
17731: LD_VAR 0 1
17735: PPUSH
17736: CALL_OW 266
17740: PUSH
17741: LD_INT 4
17743: EQUAL
17744: PUSH
17745: LD_VAR 0 1
17749: PPUSH
17750: CALL_OW 255
17754: PUSH
17755: LD_INT 6
17757: EQUAL
17758: AND
17759: IFFALSE 17792
// for i in tmpSold do
17761: LD_ADDR_VAR 0 2
17765: PUSH
17766: LD_VAR 0 3
17770: PUSH
17771: FOR_IN
17772: IFFALSE 17790
// ComEnterUnit ( i , building ) ;
17774: LD_VAR 0 2
17778: PPUSH
17779: LD_VAR 0 1
17783: PPUSH
17784: CALL_OW 120
17788: GO 17771
17790: POP
17791: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
17792: LD_VAR 0 1
17796: PPUSH
17797: CALL_OW 266
17801: PUSH
17802: LD_INT 6
17804: EQUAL
17805: PUSH
17806: LD_VAR 0 1
17810: PPUSH
17811: CALL_OW 255
17815: PUSH
17816: LD_INT 6
17818: EQUAL
17819: AND
17820: IFFALSE 17878
// begin for i in tmpSci do
17822: LD_ADDR_VAR 0 2
17826: PUSH
17827: LD_VAR 0 6
17831: PUSH
17832: FOR_IN
17833: IFFALSE 17851
// ComEnterUnit ( i , building ) ;
17835: LD_VAR 0 2
17839: PPUSH
17840: LD_VAR 0 1
17844: PPUSH
17845: CALL_OW 120
17849: GO 17832
17851: POP
17852: POP
// ResAllTechs ( 6 , building , 3 ) ;
17853: LD_INT 6
17855: PPUSH
17856: LD_VAR 0 1
17860: PPUSH
17861: LD_INT 3
17863: PPUSH
17864: CALL 5976 0 3
// ruPLab = building ;
17868: LD_ADDR_EXP 22
17872: PUSH
17873: LD_VAR 0 1
17877: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
17878: LD_VAR 0 1
17882: PPUSH
17883: CALL_OW 266
17887: PUSH
17888: LD_INT 2
17890: EQUAL
17891: PUSH
17892: LD_VAR 0 1
17896: PPUSH
17897: CALL_OW 255
17901: PUSH
17902: LD_INT 6
17904: EQUAL
17905: AND
17906: IFFALSE 17957
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
17908: LD_ADDR_VAR 0 5
17912: PUSH
17913: LD_VAR 0 8
17917: PUSH
17918: LD_INT 1
17920: ARRAY
17921: PPUSH
17922: CALL_OW 313
17926: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
17927: LD_VAR 0 5
17931: PPUSH
17932: CALL_OW 121
// wait ( 0 0$1 ) ;
17936: LD_INT 35
17938: PPUSH
17939: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
17943: LD_VAR 0 5
17947: PPUSH
17948: LD_VAR 0 1
17952: PPUSH
17953: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
17957: LD_VAR 0 1
17961: PPUSH
17962: CALL_OW 266
17966: PUSH
17967: LD_INT 32
17969: EQUAL
17970: PUSH
17971: LD_VAR 0 1
17975: PPUSH
17976: CALL_OW 255
17980: PUSH
17981: LD_INT 6
17983: EQUAL
17984: AND
17985: IFFALSE 18037
// begin ComPlaceWeapon ( building , 42 ) ;
17987: LD_VAR 0 1
17991: PPUSH
17992: LD_INT 42
17994: PPUSH
17995: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
17999: LD_VAR 0 7
18003: PUSH
18004: LD_INT 1
18006: ARRAY
18007: PPUSH
18008: CALL_OW 122
// wait ( 0 0$1 ) ;
18012: LD_INT 35
18014: PPUSH
18015: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
18019: LD_VAR 0 7
18023: PUSH
18024: LD_INT 1
18026: ARRAY
18027: PPUSH
18028: LD_VAR 0 1
18032: PPUSH
18033: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
18037: LD_VAR 0 1
18041: PPUSH
18042: CALL_OW 266
18046: PUSH
18047: LD_INT 31
18049: EQUAL
18050: PUSH
18051: LD_VAR 0 1
18055: PPUSH
18056: CALL_OW 255
18060: PUSH
18061: LD_INT 6
18063: EQUAL
18064: AND
18065: IFFALSE 18131
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
18067: LD_VAR 0 7
18071: PUSH
18072: LD_INT 2
18074: ARRAY
18075: PPUSH
18076: CALL_OW 122
// wait ( 0 0$1 ) ;
18080: LD_INT 35
18082: PPUSH
18083: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
18087: LD_VAR 0 7
18091: PUSH
18092: LD_INT 2
18094: ARRAY
18095: PPUSH
18096: LD_VAR 0 1
18100: PPUSH
18101: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
18105: LD_VAR 0 4
18109: PUSH
18110: LD_INT 1
18112: ARRAY
18113: PPUSH
18114: LD_EXP 21
18118: PPUSH
18119: CALL_OW 120
// baseReadyToBuild = 2 ;
18123: LD_ADDR_EXP 20
18127: PUSH
18128: LD_INT 2
18130: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
18131: LD_VAR 0 1
18135: PPUSH
18136: CALL_OW 266
18140: PUSH
18141: LD_INT 32
18143: EQUAL
18144: PUSH
18145: LD_VAR 0 1
18149: PPUSH
18150: CALL_OW 255
18154: PUSH
18155: LD_INT 1
18157: EQUAL
18158: AND
18159: PUSH
18160: LD_EXP 32
18164: PUSH
18165: LD_INT 0
18167: EQUAL
18168: AND
18169: IFFALSE 18414
// begin bunkerDialog = 1 ;
18171: LD_ADDR_EXP 32
18175: PUSH
18176: LD_INT 1
18178: ST_TO_ADDR
// if IsOK ( Claptopn ) then
18179: LD_EXP 11
18183: PPUSH
18184: CALL_OW 302
18188: IFFALSE 18204
// begin Say ( Claptopn , D11-Eng1-1 ) ;
18190: LD_EXP 11
18194: PPUSH
18195: LD_STRING D11-Eng1-1
18197: PPUSH
18198: CALL_OW 88
// end else
18202: GO 18400
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18204: LD_INT 22
18206: PUSH
18207: LD_INT 1
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 21
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 25
18226: PUSH
18227: LD_INT 3
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 26
18236: PUSH
18237: LD_INT 1
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: PPUSH
18250: CALL_OW 69
18254: PUSH
18255: LD_EXP 1
18259: PUSH
18260: EMPTY
18261: LIST
18262: PUSH
18263: LD_INT 0
18265: GREATER
18266: DIFF
18267: IFFALSE 18341
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18269: LD_INT 22
18271: PUSH
18272: LD_INT 1
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 21
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 25
18291: PUSH
18292: LD_INT 2
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 26
18301: PUSH
18302: LD_INT 1
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: PPUSH
18315: CALL_OW 69
18319: PUSH
18320: LD_EXP 1
18324: PUSH
18325: EMPTY
18326: LIST
18327: DIFF
18328: PPUSH
18329: LD_STRING D11-Eng1-1
18331: PPUSH
18332: LD_STRING D11-Eng1-1
18334: PPUSH
18335: CALL 4625 0 3
// end else
18339: GO 18400
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18341: LD_INT 22
18343: PUSH
18344: LD_INT 1
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 21
18353: PUSH
18354: LD_INT 1
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 26
18363: PUSH
18364: LD_INT 1
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: LIST
18375: PPUSH
18376: CALL_OW 69
18380: PUSH
18381: LD_EXP 1
18385: PUSH
18386: EMPTY
18387: LIST
18388: DIFF
18389: PPUSH
18390: LD_STRING D11-Eng1-1
18392: PPUSH
18393: LD_STRING D11-Eng1-1
18395: PPUSH
18396: CALL 4625 0 3
// end ; end ; if energyVDialog = 0 then
18400: LD_EXP 33
18404: PUSH
18405: LD_INT 0
18407: EQUAL
18408: IFFALSE 18414
// EnergyDialog ;
18410: CALL 5028 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
18414: LD_VAR 0 1
18418: PPUSH
18419: CALL_OW 266
18423: PUSH
18424: LD_INT 29
18426: EQUAL
18427: PUSH
18428: LD_VAR 0 1
18432: PPUSH
18433: CALL_OW 255
18437: PUSH
18438: LD_INT 1
18440: EQUAL
18441: AND
18442: IFFALSE 18452
// buildOil = 1 ;
18444: LD_ADDR_EXP 34
18448: PUSH
18449: LD_INT 1
18451: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
18452: LD_VAR 0 1
18456: PPUSH
18457: CALL_OW 266
18461: PUSH
18462: LD_INT 26
18464: EQUAL
18465: PUSH
18466: LD_VAR 0 1
18470: PPUSH
18471: CALL_OW 255
18475: PUSH
18476: LD_INT 1
18478: EQUAL
18479: AND
18480: IFFALSE 18490
// buildPower = 1 ;
18482: LD_ADDR_EXP 35
18486: PUSH
18487: LD_INT 1
18489: ST_TO_ADDR
// end ;
18490: PPOPN 8
18492: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
18493: LD_VAR 0 1
18497: PPUSH
18498: CALL_OW 266
18502: PUSH
18503: LD_INT 3
18505: EQUAL
18506: PUSH
18507: LD_VAR 0 1
18511: PPUSH
18512: CALL_OW 255
18516: PUSH
18517: LD_INT 1
18519: EQUAL
18520: AND
18521: PUSH
18522: LD_EXP 31
18526: PUSH
18527: LD_INT 0
18529: EQUAL
18530: AND
18531: IFFALSE 18879
// begin factoryDialog = 1 ;
18533: LD_ADDR_EXP 31
18537: PUSH
18538: LD_INT 1
18540: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
18541: LD_INT 47
18543: PPUSH
18544: LD_INT 1
18546: PPUSH
18547: CALL_OW 321
18551: PUSH
18552: LD_INT 1
18554: EQUAL
18555: PUSH
18556: LD_INT 45
18558: PPUSH
18559: LD_INT 1
18561: PPUSH
18562: CALL_OW 321
18566: PUSH
18567: LD_INT 1
18569: EQUAL
18570: AND
18571: IFFALSE 18879
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18573: LD_INT 22
18575: PUSH
18576: LD_INT 1
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 21
18585: PUSH
18586: LD_INT 3
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 30
18595: PUSH
18596: LD_INT 3
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 24
18605: PUSH
18606: LD_INT 1000
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: PPUSH
18619: CALL_OW 69
18623: PUSH
18624: LD_INT 1
18626: ARRAY
18627: PPUSH
18628: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
18632: LD_EXP 1
18636: PPUSH
18637: LD_STRING D9a-JMM-1
18639: PPUSH
18640: CALL_OW 88
// if IsOK ( Campell ) then
18644: LD_EXP 12
18648: PPUSH
18649: CALL_OW 302
18653: IFFALSE 18669
// begin Say ( Campell , D9a-Mech1-1 ) ;
18655: LD_EXP 12
18659: PPUSH
18660: LD_STRING D9a-Mech1-1
18662: PPUSH
18663: CALL_OW 88
// end else
18667: GO 18865
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18669: LD_INT 22
18671: PUSH
18672: LD_INT 1
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 21
18681: PUSH
18682: LD_INT 1
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 25
18691: PUSH
18692: LD_INT 3
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 26
18701: PUSH
18702: LD_INT 1
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: PPUSH
18715: CALL_OW 69
18719: PUSH
18720: LD_EXP 1
18724: PUSH
18725: EMPTY
18726: LIST
18727: PUSH
18728: LD_INT 0
18730: GREATER
18731: DIFF
18732: IFFALSE 18806
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18734: LD_INT 22
18736: PUSH
18737: LD_INT 1
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 21
18746: PUSH
18747: LD_INT 1
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 25
18756: PUSH
18757: LD_INT 3
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 26
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: PPUSH
18780: CALL_OW 69
18784: PUSH
18785: LD_EXP 1
18789: PUSH
18790: EMPTY
18791: LIST
18792: DIFF
18793: PPUSH
18794: LD_STRING D9a-Mech1-1
18796: PPUSH
18797: LD_STRING D9a-Mech1-1
18799: PPUSH
18800: CALL 4625 0 3
// end else
18804: GO 18865
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18806: LD_INT 22
18808: PUSH
18809: LD_INT 1
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 21
18818: PUSH
18819: LD_INT 1
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 26
18828: PUSH
18829: LD_INT 1
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: PPUSH
18841: CALL_OW 69
18845: PUSH
18846: LD_EXP 1
18850: PUSH
18851: EMPTY
18852: LIST
18853: DIFF
18854: PPUSH
18855: LD_STRING D9a-Mech1-1
18857: PPUSH
18858: LD_STRING D9a-Mech1-1
18860: PPUSH
18861: CALL 4625 0 3
// end ; end ; if energyVDialog = 0 then
18865: LD_EXP 33
18869: PUSH
18870: LD_INT 0
18872: EQUAL
18873: IFFALSE 18879
// EnergyDialog ;
18875: CALL 5028 0 0
// end ; end ; end ;
18879: PPOPN 1
18881: END
// on UnitDestroyed ( unit ) do var mech ;
18882: LD_INT 0
18884: PPUSH
// begin if unit = JMM then
18885: LD_VAR 0 1
18889: PUSH
18890: LD_EXP 1
18894: EQUAL
18895: IFFALSE 18904
// YouLost ( JMM ) ;
18897: LD_STRING JMM
18899: PPUSH
18900: CALL_OW 104
// if unit in ruMobile then
18904: LD_VAR 0 1
18908: PUSH
18909: LD_EXP 46
18913: IN
18914: IFFALSE 18932
// ruMobile = ruMobile diff ruMobile ;
18916: LD_ADDR_EXP 46
18920: PUSH
18921: LD_EXP 46
18925: PUSH
18926: LD_EXP 46
18930: DIFF
18931: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
18932: LD_VAR 0 1
18936: PPUSH
18937: CALL_OW 247
18941: PUSH
18942: LD_INT 1
18944: EQUAL
18945: PUSH
18946: LD_VAR 0 1
18950: PPUSH
18951: CALL_OW 255
18955: PUSH
18956: LD_INT 1
18958: EQUAL
18959: AND
18960: IFFALSE 18976
// lostCounter = lostCounter + 1 ;
18962: LD_ADDR_EXP 38
18966: PUSH
18967: LD_EXP 38
18971: PUSH
18972: LD_INT 1
18974: PLUS
18975: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
18976: LD_EXP 43
18980: PUSH
18981: LD_INT 24
18983: PPUSH
18984: CALL_OW 313
18988: PUSH
18989: LD_INT 6
18991: LESS
18992: AND
18993: PUSH
18994: LD_VAR 0 1
18998: PPUSH
18999: CALL_OW 257
19003: PUSH
19004: LD_INT 3
19006: EQUAL
19007: AND
19008: PUSH
19009: LD_VAR 0 1
19013: PPUSH
19014: CALL_OW 255
19018: PUSH
19019: LD_INT 3
19021: EQUAL
19022: AND
19023: PUSH
19024: LD_INT 24
19026: PPUSH
19027: CALL_OW 302
19031: AND
19032: PUSH
19033: LD_INT 24
19035: PPUSH
19036: CALL_OW 255
19040: PUSH
19041: LD_INT 3
19043: EQUAL
19044: AND
19045: IFFALSE 19174
// begin ruMech := ruMech - 1 ;
19047: LD_ADDR_EXP 43
19051: PUSH
19052: LD_EXP 43
19056: PUSH
19057: LD_INT 1
19059: MINUS
19060: ST_TO_ADDR
// if ruMech = 0 then
19061: LD_EXP 43
19065: PUSH
19066: LD_INT 0
19068: EQUAL
19069: IFFALSE 19073
// exit ;
19071: GO 19174
// wait ( 0 0$40 ) ;
19073: LD_INT 1400
19075: PPUSH
19076: CALL_OW 67
// uc_side = 3 ;
19080: LD_ADDR_OWVAR 20
19084: PUSH
19085: LD_INT 3
19087: ST_TO_ADDR
// uc_nation = 3 ;
19088: LD_ADDR_OWVAR 21
19092: PUSH
19093: LD_INT 3
19095: ST_TO_ADDR
// hc_gallery :=  ;
19096: LD_ADDR_OWVAR 33
19100: PUSH
19101: LD_STRING 
19103: ST_TO_ADDR
// hc_name :=  ;
19104: LD_ADDR_OWVAR 26
19108: PUSH
19109: LD_STRING 
19111: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
19112: LD_INT 0
19114: PPUSH
19115: LD_EXP 16
19119: PPUSH
19120: LD_EXP 17
19124: PPUSH
19125: CALL_OW 12
19129: PPUSH
19130: CALL_OW 383
// mech := CreateHuman ;
19134: LD_ADDR_VAR 0 2
19138: PUSH
19139: CALL_OW 44
19143: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
19144: LD_VAR 0 2
19148: PPUSH
19149: LD_INT 124
19151: PPUSH
19152: LD_INT 97
19154: PPUSH
19155: LD_INT 0
19157: PPUSH
19158: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
19162: LD_VAR 0 2
19166: PPUSH
19167: LD_INT 24
19169: PPUSH
19170: CALL_OW 120
// end ; end ;
19174: PPOPN 2
19176: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
19177: LD_INT 0
19179: PPUSH
// begin if GetSide ( vehicle ) = 1 then
19180: LD_VAR 0 1
19184: PPUSH
19185: CALL_OW 255
19189: PUSH
19190: LD_INT 1
19192: EQUAL
19193: IFFALSE 19209
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
19195: LD_ADDR_EXP 42
19199: PUSH
19200: LD_EXP 42
19204: PUSH
19205: LD_INT 1
19207: PLUS
19208: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
19209: LD_VAR 0 1
19213: PPUSH
19214: CALL_OW 255
19218: PUSH
19219: LD_INT 3
19221: EQUAL
19222: PUSH
19223: LD_VAR 0 1
19227: PPUSH
19228: CALL_OW 264
19232: PUSH
19233: LD_INT 42
19235: PUSH
19236: LD_INT 43
19238: PUSH
19239: LD_INT 44
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: LIST
19246: IN
19247: AND
19248: IFFALSE 19266
// ruMobile := ruMobile union vehicle ;
19250: LD_ADDR_EXP 46
19254: PUSH
19255: LD_EXP 46
19259: PUSH
19260: LD_VAR 0 1
19264: UNION
19265: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 53 then
19266: LD_VAR 0 1
19270: PPUSH
19271: CALL_OW 264
19275: PUSH
19276: LD_INT 53
19278: EQUAL
19279: IFFALSE 19415
// begin uc_side = 3 ;
19281: LD_ADDR_OWVAR 20
19285: PUSH
19286: LD_INT 3
19288: ST_TO_ADDR
// uc_nation = 3 ;
19289: LD_ADDR_OWVAR 21
19293: PUSH
19294: LD_INT 3
19296: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
19297: LD_INT 0
19299: PPUSH
19300: LD_EXP 17
19304: PPUSH
19305: CALL_OW 383
// driver := CreateHuman ;
19309: LD_ADDR_VAR 0 3
19313: PUSH
19314: CALL_OW 44
19318: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
19319: LD_VAR 0 3
19323: PPUSH
19324: LD_VAR 0 2
19328: PPUSH
19329: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
19333: LD_VAR 0 1
19337: PPUSH
19338: LD_INT 21
19340: PPUSH
19341: CALL 5244 0 2
// repeat wait ( 0 0$1 ) ;
19345: LD_INT 35
19347: PPUSH
19348: CALL_OW 67
// until not HasTask ( vehicle ) ;
19352: LD_VAR 0 1
19356: PPUSH
19357: CALL_OW 314
19361: NOT
19362: IFFALSE 19345
// driver := IsDrivenBy ( vehicle ) ;
19364: LD_ADDR_VAR 0 3
19368: PUSH
19369: LD_VAR 0 1
19373: PPUSH
19374: CALL_OW 311
19378: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
19379: LD_VAR 0 3
19383: PPUSH
19384: LD_INT 104
19386: PPUSH
19387: LD_INT 73
19389: PPUSH
19390: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19394: LD_VAR 0 3
19398: PPUSH
19399: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
19403: LD_VAR 0 3
19407: PPUSH
19408: LD_INT 24
19410: PPUSH
19411: CALL_OW 180
// end ; end ;
19415: PPOPN 3
19417: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
19418: LD_INT 0
19420: PPUSH
19421: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
19422: LD_VAR 0 1
19426: PPUSH
19427: CALL_OW 255
19431: PUSH
19432: LD_INT 3
19434: EQUAL
19435: PUSH
19436: LD_VAR 0 1
19440: PPUSH
19441: CALL_OW 247
19445: PUSH
19446: LD_INT 2
19448: EQUAL
19449: AND
19450: IFFALSE 19544
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
19452: LD_VAR 0 1
19456: PPUSH
19457: CALL_OW 264
19461: PUSH
19462: LD_INT 42
19464: EQUAL
19465: PUSH
19466: LD_VAR 0 1
19470: PPUSH
19471: CALL_OW 264
19475: PUSH
19476: LD_INT 43
19478: EQUAL
19479: OR
19480: PUSH
19481: LD_VAR 0 1
19485: PPUSH
19486: CALL_OW 264
19490: PUSH
19491: LD_INT 44
19493: EQUAL
19494: OR
19495: IFFALSE 19544
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
19497: LD_INT 24
19499: PPUSH
19500: LD_VAR 0 1
19504: PPUSH
19505: CALL_OW 265
19509: PPUSH
19510: LD_VAR 0 1
19514: PPUSH
19515: CALL_OW 262
19519: PPUSH
19520: LD_VAR 0 1
19524: PPUSH
19525: CALL_OW 263
19529: PPUSH
19530: LD_VAR 0 1
19534: PPUSH
19535: CALL_OW 264
19539: PPUSH
19540: CALL_OW 185
// end ;
19544: PPOPN 3
19546: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
19547: LD_VAR 0 1
19551: PPUSH
19552: CALL_OW 255
19556: PUSH
19557: LD_INT 3
19559: EQUAL
19560: PUSH
19561: LD_VAR 0 2
19565: PPUSH
19566: CALL_OW 255
19570: PUSH
19571: LD_INT 3
19573: EQUAL
19574: AND
19575: PUSH
19576: LD_INT 24
19578: PPUSH
19579: CALL_OW 302
19583: AND
19584: PUSH
19585: LD_VAR 0 1
19589: PPUSH
19590: CALL_OW 302
19594: NOT
19595: AND
19596: IFFALSE 19610
// ComEnterUnit ( human , rubfact0 ) ;
19598: LD_VAR 0 2
19602: PPUSH
19603: LD_INT 24
19605: PPUSH
19606: CALL_OW 120
// end ;
19610: PPOPN 2
19612: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
19613: LD_VAR 0 1
19617: PUSH
19618: LD_INT 24
19620: EQUAL
19621: PUSH
19622: LD_VAR 0 2
19626: PPUSH
19627: CALL_OW 256
19631: PUSH
19632: LD_INT 1000
19634: LESS
19635: AND
19636: IFFALSE 19650
// SetLives ( un , 1000 ) ;
19638: LD_VAR 0 2
19642: PPUSH
19643: LD_INT 1000
19645: PPUSH
19646: CALL_OW 234
// end ;
19650: PPOPN 2
19652: END
// on Command ( comandid ) do var i , j , tmp ;
19653: LD_INT 0
19655: PPUSH
19656: PPUSH
19657: PPUSH
// begin SOS_Command ( comandid ) ;
19658: LD_VAR 0 1
19662: PPUSH
19663: CALL 35482 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
19667: LD_INT 22
19669: PUSH
19670: LD_INT 4
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PPUSH
19677: CALL_OW 69
19681: NOT
19682: IFFALSE 19686
// exit ;
19684: GO 19851
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
19686: LD_ADDR_VAR 0 2
19690: PUSH
19691: LD_INT 22
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 2
19703: PUSH
19704: LD_INT 21
19706: PUSH
19707: LD_INT 1
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 21
19716: PUSH
19717: LD_INT 2
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: LIST
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PPUSH
19733: CALL_OW 69
19737: PUSH
19738: FOR_IN
19739: IFFALSE 19849
// begin if GetTaskList ( i ) > 0 then
19741: LD_VAR 0 2
19745: PPUSH
19746: CALL_OW 437
19750: PUSH
19751: LD_INT 0
19753: GREATER
19754: IFFALSE 19847
// begin for j = 1 to GetTaskList ( i ) do
19756: LD_ADDR_VAR 0 3
19760: PUSH
19761: DOUBLE
19762: LD_INT 1
19764: DEC
19765: ST_TO_ADDR
19766: LD_VAR 0 2
19770: PPUSH
19771: CALL_OW 437
19775: PUSH
19776: FOR_TO
19777: IFFALSE 19845
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
19779: LD_ADDR_VAR 0 4
19783: PUSH
19784: LD_VAR 0 2
19788: PPUSH
19789: CALL_OW 437
19793: PUSH
19794: LD_VAR 0 3
19798: ARRAY
19799: PUSH
19800: LD_INT 4
19802: ARRAY
19803: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
19804: LD_VAR 0 4
19808: PPUSH
19809: CALL_OW 255
19813: PUSH
19814: LD_INT 4
19816: EQUAL
19817: PUSH
19818: LD_VAR 0 4
19822: PPUSH
19823: CALL_OW 255
19827: PUSH
19828: LD_INT 0
19830: EQUAL
19831: OR
19832: IFFALSE 19843
// ComStop ( i ) ;
19834: LD_VAR 0 2
19838: PPUSH
19839: CALL_OW 141
// end ;
19843: GO 19776
19845: POP
19846: POP
// end ; end ;
19847: GO 19738
19849: POP
19850: POP
// end ; end_of_file
19851: PPOPN 4
19853: END
// every 10 10$0 do
19854: GO 19856
19856: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
19857: LD_INT 5
19859: PPUSH
19860: LD_INT 3
19862: PPUSH
19863: LD_INT 2
19865: PUSH
19866: LD_INT 2
19868: PUSH
19869: LD_INT 3
19871: PUSH
19872: LD_INT 4
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: LIST
19879: PUSH
19880: LD_OWVAR 67
19884: ARRAY
19885: PLUS
19886: PPUSH
19887: LD_INT 0
19889: PPUSH
19890: LD_INT 0
19892: PPUSH
19893: LD_INT 0
19895: PPUSH
19896: LD_INT 0
19898: PPUSH
19899: LD_EXP 16
19903: PPUSH
19904: LD_EXP 17
19908: PPUSH
19909: CALL_OW 12
19913: PPUSH
19914: LD_INT 4
19916: PPUSH
19917: LD_INT 14
19919: PPUSH
19920: LD_INT 1
19922: PPUSH
19923: LD_INT 2
19925: PPUSH
19926: CALL 7949 0 12
// end ;
19930: END
// every 20 20$0 do
19931: GO 19933
19933: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
19934: LD_INT 5
19936: PPUSH
19937: LD_INT 3
19939: PPUSH
19940: LD_INT 4
19942: PUSH
19943: LD_INT 2
19945: PUSH
19946: LD_INT 3
19948: PUSH
19949: LD_INT 4
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: LIST
19956: PUSH
19957: LD_OWVAR 67
19961: ARRAY
19962: PLUS
19963: PPUSH
19964: LD_INT 0
19966: PPUSH
19967: LD_INT 0
19969: PPUSH
19970: LD_INT 0
19972: PPUSH
19973: LD_INT 2
19975: PPUSH
19976: LD_EXP 16
19980: PPUSH
19981: LD_EXP 17
19985: PPUSH
19986: CALL_OW 12
19990: PPUSH
19991: LD_INT 4
19993: PPUSH
19994: LD_INT 14
19996: PPUSH
19997: LD_INT 1
19999: PPUSH
20000: LD_INT 1
20002: PPUSH
20003: CALL 7949 0 12
// end ;
20007: END
// every 25 25$0 do
20008: GO 20010
20010: DISABLE
// begin if Difficulty > 1 then
20011: LD_OWVAR 67
20015: PUSH
20016: LD_INT 1
20018: GREATER
20019: IFFALSE 20029
// specAttack := true ;
20021: LD_ADDR_EXP 47
20025: PUSH
20026: LD_INT 1
20028: ST_TO_ADDR
// RespawnAttackVehicle ( RussianAttack , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
20029: LD_INT 4
20031: PPUSH
20032: LD_INT 5
20034: PPUSH
20035: LD_INT 4
20037: PUSH
20038: LD_INT 5
20040: PUSH
20041: LD_INT 6
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: LIST
20048: PUSH
20049: LD_OWVAR 67
20053: ARRAY
20054: PPUSH
20055: LD_EXP 16
20059: PPUSH
20060: LD_EXP 17
20064: PPUSH
20065: CALL_OW 12
20069: PPUSH
20070: LD_INT 3
20072: PPUSH
20073: LD_INT 1
20075: PPUSH
20076: LD_INT 1
20078: PPUSH
20079: LD_INT 42
20081: PUSH
20082: LD_INT 42
20084: PUSH
20085: LD_INT 43
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 42
20095: PUSH
20096: LD_INT 43
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 43
20105: PUSH
20106: LD_INT 43
20108: PUSH
20109: LD_INT 43
20111: PUSH
20112: LD_INT 44
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: LIST
20125: PUSH
20126: LD_OWVAR 67
20130: ARRAY
20131: PPUSH
20132: EMPTY
20133: PPUSH
20134: EMPTY
20135: PPUSH
20136: LD_INT 1
20138: PPUSH
20139: CALL 9705 0 11
// end ;
20143: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
20144: LD_EXP 47
20148: IFFALSE 20511
20150: GO 20152
20152: DISABLE
20153: LD_INT 0
20155: PPUSH
20156: PPUSH
20157: PPUSH
20158: PPUSH
// begin wait ( 0 0$20 ) ;
20159: LD_INT 700
20161: PPUSH
20162: CALL_OW 67
// uc_side := 5 ;
20166: LD_ADDR_OWVAR 20
20170: PUSH
20171: LD_INT 5
20173: ST_TO_ADDR
// uc_nation := 3 ;
20174: LD_ADDR_OWVAR 21
20178: PUSH
20179: LD_INT 3
20181: ST_TO_ADDR
// InitHc ;
20182: CALL_OW 19
// hc_importance := 0 ;
20186: LD_ADDR_OWVAR 32
20190: PUSH
20191: LD_INT 0
20193: ST_TO_ADDR
// tmp := [ ] ;
20194: LD_ADDR_VAR 0 2
20198: PUSH
20199: EMPTY
20200: ST_TO_ADDR
// PrepareHuman ( false , 2 , 6 ) ;
20201: LD_INT 0
20203: PPUSH
20204: LD_INT 2
20206: PPUSH
20207: LD_INT 6
20209: PPUSH
20210: CALL_OW 380
// eng := CreateHuman ;
20214: LD_ADDR_VAR 0 4
20218: PUSH
20219: CALL_OW 44
20223: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
20224: LD_VAR 0 4
20228: PPUSH
20229: LD_INT 78
20231: PPUSH
20232: LD_INT 2
20234: PPUSH
20235: LD_INT 4
20237: PPUSH
20238: LD_INT 0
20240: PPUSH
20241: CALL_OW 50
// for i = 1 to 2 + Difficulty do
20245: LD_ADDR_VAR 0 3
20249: PUSH
20250: DOUBLE
20251: LD_INT 1
20253: DEC
20254: ST_TO_ADDR
20255: LD_INT 2
20257: PUSH
20258: LD_OWVAR 67
20262: PLUS
20263: PUSH
20264: FOR_TO
20265: IFFALSE 20346
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
20267: LD_INT 0
20269: PPUSH
20270: LD_INT 1
20272: PPUSH
20273: LD_INT 4
20275: PUSH
20276: LD_INT 5
20278: PUSH
20279: LD_INT 6
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: LIST
20286: PUSH
20287: LD_OWVAR 67
20291: ARRAY
20292: PPUSH
20293: CALL_OW 380
// un := CreateHuman ;
20297: LD_ADDR_VAR 0 1
20301: PUSH
20302: CALL_OW 44
20306: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
20307: LD_VAR 0 1
20311: PPUSH
20312: LD_INT 78
20314: PPUSH
20315: LD_INT 2
20317: PPUSH
20318: LD_INT 4
20320: PPUSH
20321: LD_INT 0
20323: PPUSH
20324: CALL_OW 50
// tmp := tmp ^ un ;
20328: LD_ADDR_VAR 0 2
20332: PUSH
20333: LD_VAR 0 2
20337: PUSH
20338: LD_VAR 0 1
20342: ADD
20343: ST_TO_ADDR
// end ;
20344: GO 20264
20346: POP
20347: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
20348: LD_VAR 0 2
20352: PPUSH
20353: LD_INT 49
20355: PPUSH
20356: LD_INT 3
20358: PPUSH
20359: CALL_OW 111
// wait ( 0 0$2 ) ;
20363: LD_INT 70
20365: PPUSH
20366: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
20370: LD_VAR 0 4
20374: PPUSH
20375: LD_INT 49
20377: PPUSH
20378: LD_INT 3
20380: PPUSH
20381: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
20385: LD_VAR 0 4
20389: PPUSH
20390: LD_INT 4
20392: PPUSH
20393: CALL_OW 227
// wait ( 0 0$10 ) ;
20397: LD_INT 350
20399: PPUSH
20400: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20404: LD_INT 35
20406: PPUSH
20407: CALL_OW 67
// for i in tmp do
20411: LD_ADDR_VAR 0 3
20415: PUSH
20416: LD_VAR 0 2
20420: PUSH
20421: FOR_IN
20422: IFFALSE 20502
// if not IsOk ( i ) then
20424: LD_VAR 0 3
20428: PPUSH
20429: CALL_OW 302
20433: NOT
20434: IFFALSE 20454
// tmp := tmp diff i else
20436: LD_ADDR_VAR 0 2
20440: PUSH
20441: LD_VAR 0 2
20445: PUSH
20446: LD_VAR 0 3
20450: DIFF
20451: ST_TO_ADDR
20452: GO 20500
// if not HasTask ( i ) then
20454: LD_VAR 0 3
20458: PPUSH
20459: CALL_OW 314
20463: NOT
20464: IFFALSE 20500
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
20466: LD_VAR 0 3
20470: PPUSH
20471: LD_INT 22
20473: PUSH
20474: LD_INT 1
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PPUSH
20481: CALL_OW 69
20485: PPUSH
20486: LD_VAR 0 3
20490: PPUSH
20491: CALL_OW 74
20495: PPUSH
20496: CALL_OW 115
20500: GO 20421
20502: POP
20503: POP
// until not tmp ;
20504: LD_VAR 0 2
20508: NOT
20509: IFFALSE 20404
// end ; end_of_file
20511: PPOPN 4
20513: END
// every 0 0$1 trigger startTimer = 1 do
20514: LD_EXP 30
20518: PUSH
20519: LD_INT 1
20521: EQUAL
20522: IFFALSE 20652
20524: GO 20526
20526: DISABLE
// begin enable ;
20527: ENABLE
// if timerStatus = 1 then
20528: LD_EXP 29
20532: PUSH
20533: LD_INT 1
20535: EQUAL
20536: IFFALSE 20569
// begin timeToSupport = timeToSupport - 0 0$01 ;
20538: LD_ADDR_EXP 28
20542: PUSH
20543: LD_EXP 28
20547: PUSH
20548: LD_INT 35
20550: MINUS
20551: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
20552: LD_ADDR_OWVAR 47
20556: PUSH
20557: LD_STRING #Am04-1
20559: PUSH
20560: LD_EXP 28
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: ST_TO_ADDR
// end ; if timerStatus = 2 then
20569: LD_EXP 29
20573: PUSH
20574: LD_INT 2
20576: EQUAL
20577: IFFALSE 20610
// begin timeToSupport = timeToSupport - 0 0$01 ;
20579: LD_ADDR_EXP 28
20583: PUSH
20584: LD_EXP 28
20588: PUSH
20589: LD_INT 35
20591: MINUS
20592: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
20593: LD_ADDR_OWVAR 47
20597: PUSH
20598: LD_STRING #Am04-2
20600: PUSH
20601: LD_EXP 28
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: ST_TO_ADDR
// end ; if timerStatus = 3 then
20610: LD_EXP 29
20614: PUSH
20615: LD_INT 3
20617: EQUAL
20618: IFFALSE 20634
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
20620: LD_ADDR_EXP 27
20624: PUSH
20625: LD_EXP 27
20629: PUSH
20630: LD_INT 35
20632: MINUS
20633: ST_TO_ADDR
// end ; if timerStatus = 4 then
20634: LD_EXP 29
20638: PUSH
20639: LD_INT 4
20641: EQUAL
20642: IFFALSE 20652
// begin display_strings =  ;
20644: LD_ADDR_OWVAR 47
20648: PUSH
20649: LD_STRING 
20651: ST_TO_ADDR
// end ; end ; end_of_file
20652: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
20653: LD_INT 4
20655: PPUSH
20656: CALL_OW 301
20660: IFFALSE 20672
20662: GO 20664
20664: DISABLE
// YouLost ( Base ) ; end_of_file
20665: LD_STRING Base
20667: PPUSH
20668: CALL_OW 104
20672: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , tmp , p ;
20673: LD_EXP 15
20677: PPUSH
20678: CALL_OW 301
20682: PUSH
20683: LD_INT 22
20685: PUSH
20686: LD_INT 3
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 21
20695: PUSH
20696: LD_INT 1
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PPUSH
20707: CALL_OW 69
20711: PUSH
20712: LD_INT 14
20714: PUSH
20715: LD_INT 13
20717: PUSH
20718: LD_INT 12
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: LIST
20725: PUSH
20726: LD_OWVAR 67
20730: ARRAY
20731: LESS
20732: AND
20733: IFFALSE 21319
20735: GO 20737
20737: DISABLE
20738: LD_INT 0
20740: PPUSH
20741: PPUSH
20742: PPUSH
// begin AIEnable = 0 ;
20743: LD_ADDR_EXP 37
20747: PUSH
20748: LD_INT 0
20750: ST_TO_ADDR
// escapeAvalaible = 1 ;
20751: LD_ADDR_EXP 40
20755: PUSH
20756: LD_INT 1
20758: ST_TO_ADDR
// Video ( true ) ;
20759: LD_INT 1
20761: PPUSH
20762: CALL 73006 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
20766: LD_INT 3
20768: PPUSH
20769: LD_INT 1
20771: PPUSH
20772: LD_INT 1
20774: PPUSH
20775: LD_INT 0
20777: PPUSH
20778: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
20782: LD_INT 6
20784: PPUSH
20785: LD_INT 1
20787: PPUSH
20788: LD_INT 1
20790: PPUSH
20791: LD_INT 0
20793: PPUSH
20794: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
20798: LD_INT 5
20800: PPUSH
20801: LD_INT 1
20803: PPUSH
20804: LD_INT 1
20806: PPUSH
20807: LD_INT 0
20809: PPUSH
20810: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
20814: LD_INT 3
20816: PPUSH
20817: LD_INT 1
20819: PPUSH
20820: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
20824: LD_INT 97
20826: PPUSH
20827: LD_INT 91
20829: PPUSH
20830: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
20834: LD_INT 22
20836: PUSH
20837: LD_INT 3
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 21
20846: PUSH
20847: LD_INT 1
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PPUSH
20858: CALL_OW 69
20862: PPUSH
20863: CALL_OW 121
// wait ( 0 0$01 ) ;
20867: LD_INT 35
20869: PPUSH
20870: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20874: LD_INT 22
20876: PUSH
20877: LD_INT 3
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 21
20886: PUSH
20887: LD_INT 1
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PPUSH
20898: CALL_OW 69
20902: PPUSH
20903: LD_INT 124
20905: PPUSH
20906: LD_INT 98
20908: PPUSH
20909: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
20913: LD_INT 22
20915: PUSH
20916: LD_INT 5
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 21
20925: PUSH
20926: LD_INT 1
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PPUSH
20937: CALL_OW 69
20941: PPUSH
20942: CALL_OW 121
// wait ( 0 0$01 ) ;
20946: LD_INT 35
20948: PPUSH
20949: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20953: LD_INT 22
20955: PUSH
20956: LD_INT 5
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 21
20965: PUSH
20966: LD_INT 1
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PPUSH
20977: CALL_OW 69
20981: PPUSH
20982: LD_INT 124
20984: PPUSH
20985: LD_INT 98
20987: PPUSH
20988: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
20992: LD_INT 22
20994: PUSH
20995: LD_INT 6
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 21
21004: PUSH
21005: LD_INT 1
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PPUSH
21016: CALL_OW 69
21020: PPUSH
21021: CALL_OW 121
// wait ( 0 0$01 ) ;
21025: LD_INT 35
21027: PPUSH
21028: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
21032: LD_INT 22
21034: PUSH
21035: LD_INT 6
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 21
21044: PUSH
21045: LD_INT 1
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PPUSH
21056: CALL_OW 69
21060: PPUSH
21061: LD_INT 124
21063: PPUSH
21064: LD_INT 98
21066: PPUSH
21067: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
21071: LD_INT 22
21073: PUSH
21074: LD_INT 1
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 21
21083: PUSH
21084: LD_INT 1
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PPUSH
21095: CALL_OW 69
21099: PPUSH
21100: LD_INT 124
21102: PPUSH
21103: LD_INT 96
21105: PPUSH
21106: CALL_OW 114
// wait ( 0 0$1 ) ;
21110: LD_INT 35
21112: PPUSH
21113: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
21117: LD_INT 124
21119: PPUSH
21120: LD_INT 96
21122: PPUSH
21123: CALL_OW 84
// p := 0 0$0 ;
21127: LD_ADDR_VAR 0 3
21131: PUSH
21132: LD_INT 0
21134: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
21135: LD_ADDR_VAR 0 2
21139: PUSH
21140: LD_INT 2
21142: PUSH
21143: LD_INT 22
21145: PUSH
21146: LD_INT 3
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 22
21155: PUSH
21156: LD_INT 6
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 21
21170: PUSH
21171: LD_INT 1
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PPUSH
21182: CALL_OW 69
21186: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21187: LD_INT 35
21189: PPUSH
21190: CALL_OW 67
// p := p + 0 0$1 ;
21194: LD_ADDR_VAR 0 3
21198: PUSH
21199: LD_VAR 0 3
21203: PUSH
21204: LD_INT 35
21206: PLUS
21207: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
21208: LD_VAR 0 2
21212: PPUSH
21213: LD_INT 5
21215: PPUSH
21216: CALL_OW 113
// for i in tmp do
21220: LD_ADDR_VAR 0 1
21224: PUSH
21225: LD_VAR 0 2
21229: PUSH
21230: FOR_IN
21231: IFFALSE 21258
// if IsInArea ( tmp , RussianEscape ) then
21233: LD_VAR 0 2
21237: PPUSH
21238: LD_INT 5
21240: PPUSH
21241: CALL_OW 308
21245: IFFALSE 21256
// RemoveUnit ( i ) ;
21247: LD_VAR 0 1
21251: PPUSH
21252: CALL_OW 64
21256: GO 21230
21258: POP
21259: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
21260: LD_INT 23
21262: PUSH
21263: LD_INT 3
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 21
21272: PUSH
21273: LD_INT 1
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 24
21282: PUSH
21283: LD_INT 250
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: LIST
21294: PPUSH
21295: CALL_OW 69
21299: PUSH
21300: LD_INT 0
21302: EQUAL
21303: PUSH
21304: LD_VAR 0 3
21308: PUSH
21309: LD_INT 245
21311: GREATEREQUAL
21312: OR
21313: IFFALSE 21187
// FinishMission ;
21315: CALL 21322 0 0
// end ;
21319: PPOPN 3
21321: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
21322: LD_INT 0
21324: PPUSH
21325: PPUSH
21326: PPUSH
21327: PPUSH
21328: PPUSH
// if not vehicleProduceCounter then
21329: LD_EXP 42
21333: NOT
21334: IFFALSE 21343
// SetAchievement ( ACH_INFANTRY ) ;
21336: LD_STRING ACH_INFANTRY
21338: PPUSH
21339: CALL_OW 543
// if tick <= 20 20$00 then
21343: LD_OWVAR 1
21347: PUSH
21348: LD_INT 42000
21350: LESSEQUAL
21351: IFFALSE 21367
// begin wait ( 3 ) ;
21353: LD_INT 3
21355: PPUSH
21356: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
21360: LD_STRING ACH_ASPEED_4
21362: PPUSH
21363: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
21367: LD_INT 22
21369: PPUSH
21370: CALL 22011 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
21374: LD_INT 69
21376: PPUSH
21377: LD_INT 1
21379: PPUSH
21380: CALL_OW 321
21384: PPUSH
21385: LD_STRING GatlingInGamma
21387: PPUSH
21388: CALL_OW 39
// m1 := false ;
21392: LD_ADDR_VAR 0 3
21396: PUSH
21397: LD_INT 0
21399: ST_TO_ADDR
// m2 := false ;
21400: LD_ADDR_VAR 0 4
21404: PUSH
21405: LD_INT 0
21407: ST_TO_ADDR
// m3 := false ;
21408: LD_ADDR_VAR 0 5
21412: PUSH
21413: LD_INT 0
21415: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
21416: LD_EXP 34
21420: PUSH
21421: LD_INT 1
21423: EQUAL
21424: PUSH
21425: LD_EXP 35
21429: PUSH
21430: LD_INT 1
21432: EQUAL
21433: AND
21434: IFFALSE 21456
// begin AddMedal ( oil , 1 ) ;
21436: LD_STRING oil
21438: PPUSH
21439: LD_INT 1
21441: PPUSH
21442: CALL_OW 101
// m1 := true ;
21446: LD_ADDR_VAR 0 3
21450: PUSH
21451: LD_INT 1
21453: ST_TO_ADDR
// end else
21454: GO 21549
// begin if buildOil = 1 and buildPower = 0 then
21456: LD_EXP 34
21460: PUSH
21461: LD_INT 1
21463: EQUAL
21464: PUSH
21465: LD_EXP 35
21469: PUSH
21470: LD_INT 0
21472: EQUAL
21473: AND
21474: IFFALSE 21487
// AddMedal ( oil , - 1 ) ;
21476: LD_STRING oil
21478: PPUSH
21479: LD_INT 1
21481: NEG
21482: PPUSH
21483: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
21487: LD_EXP 34
21491: PUSH
21492: LD_INT 0
21494: EQUAL
21495: PUSH
21496: LD_EXP 35
21500: PUSH
21501: LD_INT 1
21503: EQUAL
21504: AND
21505: IFFALSE 21518
// AddMedal ( oil , - 2 ) ;
21507: LD_STRING oil
21509: PPUSH
21510: LD_INT 2
21512: NEG
21513: PPUSH
21514: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
21518: LD_EXP 34
21522: PUSH
21523: LD_INT 0
21525: EQUAL
21526: PUSH
21527: LD_EXP 35
21531: PUSH
21532: LD_INT 0
21534: EQUAL
21535: AND
21536: IFFALSE 21549
// AddMedal ( oil , - 3 ) ;
21538: LD_STRING oil
21540: PPUSH
21541: LD_INT 3
21543: NEG
21544: PPUSH
21545: CALL_OW 101
// end ; if lostCounter > 3 then
21549: LD_EXP 38
21553: PUSH
21554: LD_INT 3
21556: GREATER
21557: IFFALSE 21572
// AddMedal ( deaths , - 1 ) else
21559: LD_STRING deaths
21561: PPUSH
21562: LD_INT 1
21564: NEG
21565: PPUSH
21566: CALL_OW 101
21570: GO 21590
// begin AddMedal ( deaths , 1 ) ;
21572: LD_STRING deaths
21574: PPUSH
21575: LD_INT 1
21577: PPUSH
21578: CALL_OW 101
// m2 := true ;
21582: LD_ADDR_VAR 0 4
21586: PUSH
21587: LD_INT 1
21589: ST_TO_ADDR
// end ; if honor = 1 then
21590: LD_EXP 39
21594: PUSH
21595: LD_INT 1
21597: EQUAL
21598: IFFALSE 21620
// begin AddMedal ( honour , 1 ) ;
21600: LD_STRING honour
21602: PPUSH
21603: LD_INT 1
21605: PPUSH
21606: CALL_OW 101
// m3 := true ;
21610: LD_ADDR_VAR 0 5
21614: PUSH
21615: LD_INT 1
21617: ST_TO_ADDR
// end else
21618: GO 21631
// begin AddMedal ( honour , - 1 ) ;
21620: LD_STRING honour
21622: PPUSH
21623: LD_INT 1
21625: NEG
21626: PPUSH
21627: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
21631: LD_VAR 0 3
21635: PUSH
21636: LD_VAR 0 4
21640: AND
21641: PUSH
21642: LD_VAR 0 5
21646: AND
21647: PUSH
21648: LD_OWVAR 67
21652: PUSH
21653: LD_INT 3
21655: EQUAL
21656: AND
21657: IFFALSE 21669
// SetAchievementEX ( ACH_AMER , 4 ) ;
21659: LD_STRING ACH_AMER
21661: PPUSH
21662: LD_INT 4
21664: PPUSH
21665: CALL_OW 564
// GiveMedals ( Main ) ;
21669: LD_STRING Main
21671: PPUSH
21672: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
21676: LD_INT 22
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 23
21688: PUSH
21689: LD_INT 1
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 21
21698: PUSH
21699: LD_INT 1
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: LIST
21710: PPUSH
21711: CALL_OW 69
21715: PPUSH
21716: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21720: LD_EXP 1
21724: PPUSH
21725: LD_EXP 48
21729: PUSH
21730: LD_STRING JMM
21732: STR
21733: PPUSH
21734: CALL_OW 38
// if IsOK ( Bobby ) then
21738: LD_EXP 2
21742: PPUSH
21743: CALL_OW 302
21747: IFFALSE 21767
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21749: LD_EXP 2
21753: PPUSH
21754: LD_EXP 48
21758: PUSH
21759: LD_STRING Bobby
21761: STR
21762: PPUSH
21763: CALL_OW 38
// if IsOK ( Cyrus ) then
21767: LD_EXP 3
21771: PPUSH
21772: CALL_OW 302
21776: IFFALSE 21796
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21778: LD_EXP 3
21782: PPUSH
21783: LD_EXP 48
21787: PUSH
21788: LD_STRING Cyrus
21790: STR
21791: PPUSH
21792: CALL_OW 38
// if IsOK ( Lisa ) then
21796: LD_EXP 4
21800: PPUSH
21801: CALL_OW 302
21805: IFFALSE 21825
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21807: LD_EXP 4
21811: PPUSH
21812: LD_EXP 48
21816: PUSH
21817: LD_STRING Lisa
21819: STR
21820: PPUSH
21821: CALL_OW 38
// if IsOK ( Brown ) then
21825: LD_EXP 7
21829: PPUSH
21830: CALL_OW 302
21834: IFFALSE 21854
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
21836: LD_EXP 7
21840: PPUSH
21841: LD_EXP 48
21845: PUSH
21846: LD_STRING Brown
21848: STR
21849: PPUSH
21850: CALL_OW 38
// if not IsDead ( Donaldson ) then
21854: LD_EXP 13
21858: PPUSH
21859: CALL_OW 301
21863: NOT
21864: IFFALSE 21884
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21866: LD_EXP 13
21870: PPUSH
21871: LD_EXP 48
21875: PUSH
21876: LD_STRING Donaldson
21878: STR
21879: PPUSH
21880: CALL_OW 38
// if not IsDead ( Frank ) then
21884: LD_EXP 5
21888: PPUSH
21889: CALL_OW 301
21893: NOT
21894: IFFALSE 21914
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
21896: LD_EXP 5
21900: PPUSH
21901: LD_EXP 48
21905: PUSH
21906: LD_STRING Frank
21908: STR
21909: PPUSH
21910: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
21914: LD_INT 50
21916: PUSH
21917: EMPTY
21918: LIST
21919: PUSH
21920: LD_INT 22
21922: PUSH
21923: LD_INT 1
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 21
21932: PUSH
21933: LD_INT 1
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: LIST
21944: PPUSH
21945: CALL_OW 69
21949: PUSH
21950: LD_EXP 1
21954: PUSH
21955: LD_EXP 2
21959: PUSH
21960: LD_EXP 3
21964: PUSH
21965: LD_EXP 4
21969: PUSH
21970: LD_EXP 7
21974: PUSH
21975: LD_EXP 13
21979: PUSH
21980: LD_EXP 5
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: DIFF
21994: PPUSH
21995: LD_STRING 04_other_survivors
21997: PPUSH
21998: CALL_OW 38
// YouWin ;
22002: CALL_OW 103
// end ;
22006: LD_VAR 0 1
22010: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
22011: LD_INT 0
22013: PPUSH
22014: PPUSH
22015: PPUSH
22016: PPUSH
// gammaBase = [ ] ;
22017: LD_ADDR_VAR 0 4
22021: PUSH
22022: EMPTY
22023: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
22024: LD_ADDR_VAR 0 5
22028: PUSH
22029: LD_VAR 0 1
22033: PPUSH
22034: LD_INT 22
22036: PUSH
22037: LD_INT 1
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 21
22046: PUSH
22047: LD_INT 3
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PPUSH
22058: CALL_OW 70
22062: ST_TO_ADDR
// for i in buildings do
22063: LD_ADDR_VAR 0 3
22067: PUSH
22068: LD_VAR 0 5
22072: PUSH
22073: FOR_IN
22074: IFFALSE 22411
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
22076: LD_VAR 0 3
22080: PPUSH
22081: CALL_OW 266
22085: PUSH
22086: LD_INT 6
22088: PUSH
22089: LD_INT 7
22091: PUSH
22092: LD_INT 8
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: LIST
22099: IN
22100: IFFALSE 22214
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
22102: LD_ADDR_VAR 0 4
22106: PUSH
22107: LD_VAR 0 4
22111: PUSH
22112: LD_VAR 0 3
22116: PPUSH
22117: CALL_OW 266
22121: PUSH
22122: LD_VAR 0 3
22126: PPUSH
22127: CALL_OW 250
22131: PUSH
22132: LD_VAR 0 3
22136: PPUSH
22137: CALL_OW 251
22141: PUSH
22142: LD_VAR 0 3
22146: PPUSH
22147: CALL_OW 254
22151: PUSH
22152: LD_VAR 0 3
22156: PPUSH
22157: CALL_OW 267
22161: PUSH
22162: LD_VAR 0 3
22166: PPUSH
22167: CALL_OW 248
22171: PUSH
22172: LD_VAR 0 3
22176: PPUSH
22177: LD_INT 1
22179: PPUSH
22180: CALL_OW 268
22184: PUSH
22185: LD_VAR 0 3
22189: PPUSH
22190: LD_INT 2
22192: PPUSH
22193: CALL_OW 268
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: PUSH
22208: EMPTY
22209: LIST
22210: ADD
22211: ST_TO_ADDR
22212: GO 22409
// if GetBType ( i ) in [ b_bunker ] then
22214: LD_VAR 0 3
22218: PPUSH
22219: CALL_OW 266
22223: PUSH
22224: LD_INT 32
22226: PUSH
22227: EMPTY
22228: LIST
22229: IN
22230: IFFALSE 22327
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22232: LD_ADDR_VAR 0 4
22236: PUSH
22237: LD_VAR 0 4
22241: PUSH
22242: LD_VAR 0 3
22246: PPUSH
22247: CALL_OW 266
22251: PUSH
22252: LD_VAR 0 3
22256: PPUSH
22257: CALL_OW 250
22261: PUSH
22262: LD_VAR 0 3
22266: PPUSH
22267: CALL_OW 251
22271: PUSH
22272: LD_VAR 0 3
22276: PPUSH
22277: CALL_OW 254
22281: PUSH
22282: LD_VAR 0 3
22286: PPUSH
22287: CALL_OW 267
22291: PUSH
22292: LD_VAR 0 3
22296: PPUSH
22297: CALL_OW 248
22301: PUSH
22302: LD_VAR 0 3
22306: PPUSH
22307: CALL_OW 269
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: PUSH
22321: EMPTY
22322: LIST
22323: ADD
22324: ST_TO_ADDR
22325: GO 22409
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
22327: LD_ADDR_VAR 0 4
22331: PUSH
22332: LD_VAR 0 4
22336: PUSH
22337: LD_VAR 0 3
22341: PPUSH
22342: CALL_OW 266
22346: PUSH
22347: LD_VAR 0 3
22351: PPUSH
22352: CALL_OW 250
22356: PUSH
22357: LD_VAR 0 3
22361: PPUSH
22362: CALL_OW 251
22366: PUSH
22367: LD_VAR 0 3
22371: PPUSH
22372: CALL_OW 254
22376: PUSH
22377: LD_VAR 0 3
22381: PPUSH
22382: CALL_OW 267
22386: PUSH
22387: LD_VAR 0 3
22391: PPUSH
22392: CALL_OW 248
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: PUSH
22405: EMPTY
22406: LIST
22407: ADD
22408: ST_TO_ADDR
// end ;
22409: GO 22073
22411: POP
22412: POP
// SaveVariable ( gammaBase , GammaBase ) ;
22413: LD_VAR 0 4
22417: PPUSH
22418: LD_STRING GammaBase
22420: PPUSH
22421: CALL_OW 39
// end ; end_of_file
22425: LD_VAR 0 2
22429: RET
// every 1 1$15 do
22430: GO 22432
22432: DISABLE
// begin if supply <= 13 and supply > 7 then
22433: LD_EXP 36
22437: PUSH
22438: LD_INT 13
22440: LESSEQUAL
22441: PUSH
22442: LD_EXP 36
22446: PUSH
22447: LD_INT 7
22449: GREATER
22450: AND
22451: IFFALSE 22474
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
22453: LD_INT 3
22455: PPUSH
22456: LD_INT 5
22458: PPUSH
22459: CALL_OW 12
22463: PPUSH
22464: LD_INT 18
22466: PPUSH
22467: LD_INT 1
22469: PPUSH
22470: CALL_OW 55
// if supply <= 7 and supply > 4 then
22474: LD_EXP 36
22478: PUSH
22479: LD_INT 7
22481: LESSEQUAL
22482: PUSH
22483: LD_EXP 36
22487: PUSH
22488: LD_INT 4
22490: GREATER
22491: AND
22492: IFFALSE 22515
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
22494: LD_INT 3
22496: PPUSH
22497: LD_INT 5
22499: PPUSH
22500: CALL_OW 12
22504: PPUSH
22505: LD_INT 19
22507: PPUSH
22508: LD_INT 1
22510: PPUSH
22511: CALL_OW 55
// if supply <= 4 and supply > 0 then
22515: LD_EXP 36
22519: PUSH
22520: LD_INT 4
22522: LESSEQUAL
22523: PUSH
22524: LD_EXP 36
22528: PUSH
22529: LD_INT 0
22531: GREATER
22532: AND
22533: IFFALSE 22556
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
22535: LD_INT 3
22537: PPUSH
22538: LD_INT 5
22540: PPUSH
22541: CALL_OW 12
22545: PPUSH
22546: LD_INT 20
22548: PPUSH
22549: LD_INT 1
22551: PPUSH
22552: CALL_OW 55
// if supply > 0 then
22556: LD_EXP 36
22560: PUSH
22561: LD_INT 0
22563: GREATER
22564: IFFALSE 22581
// begin supply = supply - 1 ;
22566: LD_ADDR_EXP 36
22570: PUSH
22571: LD_EXP 36
22575: PUSH
22576: LD_INT 1
22578: MINUS
22579: ST_TO_ADDR
// enable ;
22580: ENABLE
// end ; end ; end_of_file
22581: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
22582: LD_INT 0
22584: PPUSH
// ar_crane := 88 ;
22585: LD_ADDR_EXP 58
22589: PUSH
22590: LD_INT 88
22592: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22593: LD_ADDR_EXP 53
22597: PUSH
22598: LD_INT 89
22600: ST_TO_ADDR
// us_hack := 99 ;
22601: LD_ADDR_EXP 54
22605: PUSH
22606: LD_INT 99
22608: ST_TO_ADDR
// us_artillery := 97 ;
22609: LD_ADDR_EXP 55
22613: PUSH
22614: LD_INT 97
22616: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22617: LD_ADDR_EXP 56
22621: PUSH
22622: LD_INT 91
22624: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
22625: LD_ADDR_EXP 57
22629: PUSH
22630: LD_INT 92
22632: ST_TO_ADDR
// ru_radar := 98 ;
22633: LD_ADDR_EXP 52
22637: PUSH
22638: LD_INT 98
22640: ST_TO_ADDR
// tech_Artillery := 80 ;
22641: LD_ADDR_EXP 59
22645: PUSH
22646: LD_INT 80
22648: ST_TO_ADDR
// tech_RadMat := 81 ;
22649: LD_ADDR_EXP 60
22653: PUSH
22654: LD_INT 81
22656: ST_TO_ADDR
// tech_BasicTools := 82 ;
22657: LD_ADDR_EXP 61
22661: PUSH
22662: LD_INT 82
22664: ST_TO_ADDR
// tech_Cargo := 83 ;
22665: LD_ADDR_EXP 62
22669: PUSH
22670: LD_INT 83
22672: ST_TO_ADDR
// tech_Track := 84 ;
22673: LD_ADDR_EXP 63
22677: PUSH
22678: LD_INT 84
22680: ST_TO_ADDR
// tech_Crane := 85 ;
22681: LD_ADDR_EXP 64
22685: PUSH
22686: LD_INT 85
22688: ST_TO_ADDR
// tech_Bulldozer := 86 ;
22689: LD_ADDR_EXP 65
22693: PUSH
22694: LD_INT 86
22696: ST_TO_ADDR
// tech_Hovercraft := 87 ;
22697: LD_ADDR_EXP 66
22701: PUSH
22702: LD_INT 87
22704: ST_TO_ADDR
// end ;
22705: LD_VAR 0 1
22709: RET
// every 1 do
22710: GO 22712
22712: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
22713: CALL 22582 0 0
22717: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
22718: LD_VAR 0 2
22722: PUSH
22723: LD_INT 100
22725: EQUAL
22726: IFFALSE 23675
// begin if not StreamModeActive then
22728: LD_EXP 67
22732: NOT
22733: IFFALSE 22743
// StreamModeActive := true ;
22735: LD_ADDR_EXP 67
22739: PUSH
22740: LD_INT 1
22742: ST_TO_ADDR
// if p3 = 0 then
22743: LD_VAR 0 3
22747: PUSH
22748: LD_INT 0
22750: EQUAL
22751: IFFALSE 22757
// InitStreamMode ;
22753: CALL 23908 0 0
// if p3 = 1 then
22757: LD_VAR 0 3
22761: PUSH
22762: LD_INT 1
22764: EQUAL
22765: IFFALSE 22775
// sRocket := true ;
22767: LD_ADDR_EXP 72
22771: PUSH
22772: LD_INT 1
22774: ST_TO_ADDR
// if p3 = 2 then
22775: LD_VAR 0 3
22779: PUSH
22780: LD_INT 2
22782: EQUAL
22783: IFFALSE 22793
// sSpeed := true ;
22785: LD_ADDR_EXP 71
22789: PUSH
22790: LD_INT 1
22792: ST_TO_ADDR
// if p3 = 3 then
22793: LD_VAR 0 3
22797: PUSH
22798: LD_INT 3
22800: EQUAL
22801: IFFALSE 22811
// sEngine := true ;
22803: LD_ADDR_EXP 73
22807: PUSH
22808: LD_INT 1
22810: ST_TO_ADDR
// if p3 = 4 then
22811: LD_VAR 0 3
22815: PUSH
22816: LD_INT 4
22818: EQUAL
22819: IFFALSE 22829
// sSpec := true ;
22821: LD_ADDR_EXP 70
22825: PUSH
22826: LD_INT 1
22828: ST_TO_ADDR
// if p3 = 5 then
22829: LD_VAR 0 3
22833: PUSH
22834: LD_INT 5
22836: EQUAL
22837: IFFALSE 22847
// sLevel := true ;
22839: LD_ADDR_EXP 74
22843: PUSH
22844: LD_INT 1
22846: ST_TO_ADDR
// if p3 = 6 then
22847: LD_VAR 0 3
22851: PUSH
22852: LD_INT 6
22854: EQUAL
22855: IFFALSE 22865
// sArmoury := true ;
22857: LD_ADDR_EXP 75
22861: PUSH
22862: LD_INT 1
22864: ST_TO_ADDR
// if p3 = 7 then
22865: LD_VAR 0 3
22869: PUSH
22870: LD_INT 7
22872: EQUAL
22873: IFFALSE 22883
// sRadar := true ;
22875: LD_ADDR_EXP 76
22879: PUSH
22880: LD_INT 1
22882: ST_TO_ADDR
// if p3 = 8 then
22883: LD_VAR 0 3
22887: PUSH
22888: LD_INT 8
22890: EQUAL
22891: IFFALSE 22901
// sBunker := true ;
22893: LD_ADDR_EXP 77
22897: PUSH
22898: LD_INT 1
22900: ST_TO_ADDR
// if p3 = 9 then
22901: LD_VAR 0 3
22905: PUSH
22906: LD_INT 9
22908: EQUAL
22909: IFFALSE 22919
// sHack := true ;
22911: LD_ADDR_EXP 78
22915: PUSH
22916: LD_INT 1
22918: ST_TO_ADDR
// if p3 = 10 then
22919: LD_VAR 0 3
22923: PUSH
22924: LD_INT 10
22926: EQUAL
22927: IFFALSE 22937
// sFire := true ;
22929: LD_ADDR_EXP 79
22933: PUSH
22934: LD_INT 1
22936: ST_TO_ADDR
// if p3 = 11 then
22937: LD_VAR 0 3
22941: PUSH
22942: LD_INT 11
22944: EQUAL
22945: IFFALSE 22955
// sRefresh := true ;
22947: LD_ADDR_EXP 80
22951: PUSH
22952: LD_INT 1
22954: ST_TO_ADDR
// if p3 = 12 then
22955: LD_VAR 0 3
22959: PUSH
22960: LD_INT 12
22962: EQUAL
22963: IFFALSE 22973
// sExp := true ;
22965: LD_ADDR_EXP 81
22969: PUSH
22970: LD_INT 1
22972: ST_TO_ADDR
// if p3 = 13 then
22973: LD_VAR 0 3
22977: PUSH
22978: LD_INT 13
22980: EQUAL
22981: IFFALSE 22991
// sDepot := true ;
22983: LD_ADDR_EXP 82
22987: PUSH
22988: LD_INT 1
22990: ST_TO_ADDR
// if p3 = 14 then
22991: LD_VAR 0 3
22995: PUSH
22996: LD_INT 14
22998: EQUAL
22999: IFFALSE 23009
// sFlag := true ;
23001: LD_ADDR_EXP 83
23005: PUSH
23006: LD_INT 1
23008: ST_TO_ADDR
// if p3 = 15 then
23009: LD_VAR 0 3
23013: PUSH
23014: LD_INT 15
23016: EQUAL
23017: IFFALSE 23027
// sKamikadze := true ;
23019: LD_ADDR_EXP 91
23023: PUSH
23024: LD_INT 1
23026: ST_TO_ADDR
// if p3 = 16 then
23027: LD_VAR 0 3
23031: PUSH
23032: LD_INT 16
23034: EQUAL
23035: IFFALSE 23045
// sTroll := true ;
23037: LD_ADDR_EXP 92
23041: PUSH
23042: LD_INT 1
23044: ST_TO_ADDR
// if p3 = 17 then
23045: LD_VAR 0 3
23049: PUSH
23050: LD_INT 17
23052: EQUAL
23053: IFFALSE 23063
// sSlow := true ;
23055: LD_ADDR_EXP 93
23059: PUSH
23060: LD_INT 1
23062: ST_TO_ADDR
// if p3 = 18 then
23063: LD_VAR 0 3
23067: PUSH
23068: LD_INT 18
23070: EQUAL
23071: IFFALSE 23081
// sLack := true ;
23073: LD_ADDR_EXP 94
23077: PUSH
23078: LD_INT 1
23080: ST_TO_ADDR
// if p3 = 19 then
23081: LD_VAR 0 3
23085: PUSH
23086: LD_INT 19
23088: EQUAL
23089: IFFALSE 23099
// sTank := true ;
23091: LD_ADDR_EXP 96
23095: PUSH
23096: LD_INT 1
23098: ST_TO_ADDR
// if p3 = 20 then
23099: LD_VAR 0 3
23103: PUSH
23104: LD_INT 20
23106: EQUAL
23107: IFFALSE 23117
// sRemote := true ;
23109: LD_ADDR_EXP 97
23113: PUSH
23114: LD_INT 1
23116: ST_TO_ADDR
// if p3 = 21 then
23117: LD_VAR 0 3
23121: PUSH
23122: LD_INT 21
23124: EQUAL
23125: IFFALSE 23135
// sPowell := true ;
23127: LD_ADDR_EXP 98
23131: PUSH
23132: LD_INT 1
23134: ST_TO_ADDR
// if p3 = 22 then
23135: LD_VAR 0 3
23139: PUSH
23140: LD_INT 22
23142: EQUAL
23143: IFFALSE 23153
// sTeleport := true ;
23145: LD_ADDR_EXP 101
23149: PUSH
23150: LD_INT 1
23152: ST_TO_ADDR
// if p3 = 23 then
23153: LD_VAR 0 3
23157: PUSH
23158: LD_INT 23
23160: EQUAL
23161: IFFALSE 23171
// sOilTower := true ;
23163: LD_ADDR_EXP 103
23167: PUSH
23168: LD_INT 1
23170: ST_TO_ADDR
// if p3 = 24 then
23171: LD_VAR 0 3
23175: PUSH
23176: LD_INT 24
23178: EQUAL
23179: IFFALSE 23189
// sShovel := true ;
23181: LD_ADDR_EXP 104
23185: PUSH
23186: LD_INT 1
23188: ST_TO_ADDR
// if p3 = 25 then
23189: LD_VAR 0 3
23193: PUSH
23194: LD_INT 25
23196: EQUAL
23197: IFFALSE 23207
// sSheik := true ;
23199: LD_ADDR_EXP 105
23203: PUSH
23204: LD_INT 1
23206: ST_TO_ADDR
// if p3 = 26 then
23207: LD_VAR 0 3
23211: PUSH
23212: LD_INT 26
23214: EQUAL
23215: IFFALSE 23225
// sEarthquake := true ;
23217: LD_ADDR_EXP 107
23221: PUSH
23222: LD_INT 1
23224: ST_TO_ADDR
// if p3 = 27 then
23225: LD_VAR 0 3
23229: PUSH
23230: LD_INT 27
23232: EQUAL
23233: IFFALSE 23243
// sAI := true ;
23235: LD_ADDR_EXP 108
23239: PUSH
23240: LD_INT 1
23242: ST_TO_ADDR
// if p3 = 28 then
23243: LD_VAR 0 3
23247: PUSH
23248: LD_INT 28
23250: EQUAL
23251: IFFALSE 23261
// sCargo := true ;
23253: LD_ADDR_EXP 111
23257: PUSH
23258: LD_INT 1
23260: ST_TO_ADDR
// if p3 = 29 then
23261: LD_VAR 0 3
23265: PUSH
23266: LD_INT 29
23268: EQUAL
23269: IFFALSE 23279
// sDLaser := true ;
23271: LD_ADDR_EXP 112
23275: PUSH
23276: LD_INT 1
23278: ST_TO_ADDR
// if p3 = 30 then
23279: LD_VAR 0 3
23283: PUSH
23284: LD_INT 30
23286: EQUAL
23287: IFFALSE 23297
// sExchange := true ;
23289: LD_ADDR_EXP 113
23293: PUSH
23294: LD_INT 1
23296: ST_TO_ADDR
// if p3 = 31 then
23297: LD_VAR 0 3
23301: PUSH
23302: LD_INT 31
23304: EQUAL
23305: IFFALSE 23315
// sFac := true ;
23307: LD_ADDR_EXP 114
23311: PUSH
23312: LD_INT 1
23314: ST_TO_ADDR
// if p3 = 32 then
23315: LD_VAR 0 3
23319: PUSH
23320: LD_INT 32
23322: EQUAL
23323: IFFALSE 23333
// sPower := true ;
23325: LD_ADDR_EXP 115
23329: PUSH
23330: LD_INT 1
23332: ST_TO_ADDR
// if p3 = 33 then
23333: LD_VAR 0 3
23337: PUSH
23338: LD_INT 33
23340: EQUAL
23341: IFFALSE 23351
// sRandom := true ;
23343: LD_ADDR_EXP 116
23347: PUSH
23348: LD_INT 1
23350: ST_TO_ADDR
// if p3 = 34 then
23351: LD_VAR 0 3
23355: PUSH
23356: LD_INT 34
23358: EQUAL
23359: IFFALSE 23369
// sShield := true ;
23361: LD_ADDR_EXP 117
23365: PUSH
23366: LD_INT 1
23368: ST_TO_ADDR
// if p3 = 35 then
23369: LD_VAR 0 3
23373: PUSH
23374: LD_INT 35
23376: EQUAL
23377: IFFALSE 23387
// sTime := true ;
23379: LD_ADDR_EXP 118
23383: PUSH
23384: LD_INT 1
23386: ST_TO_ADDR
// if p3 = 36 then
23387: LD_VAR 0 3
23391: PUSH
23392: LD_INT 36
23394: EQUAL
23395: IFFALSE 23405
// sTools := true ;
23397: LD_ADDR_EXP 119
23401: PUSH
23402: LD_INT 1
23404: ST_TO_ADDR
// if p3 = 101 then
23405: LD_VAR 0 3
23409: PUSH
23410: LD_INT 101
23412: EQUAL
23413: IFFALSE 23423
// sSold := true ;
23415: LD_ADDR_EXP 84
23419: PUSH
23420: LD_INT 1
23422: ST_TO_ADDR
// if p3 = 102 then
23423: LD_VAR 0 3
23427: PUSH
23428: LD_INT 102
23430: EQUAL
23431: IFFALSE 23441
// sDiff := true ;
23433: LD_ADDR_EXP 85
23437: PUSH
23438: LD_INT 1
23440: ST_TO_ADDR
// if p3 = 103 then
23441: LD_VAR 0 3
23445: PUSH
23446: LD_INT 103
23448: EQUAL
23449: IFFALSE 23459
// sFog := true ;
23451: LD_ADDR_EXP 88
23455: PUSH
23456: LD_INT 1
23458: ST_TO_ADDR
// if p3 = 104 then
23459: LD_VAR 0 3
23463: PUSH
23464: LD_INT 104
23466: EQUAL
23467: IFFALSE 23477
// sReset := true ;
23469: LD_ADDR_EXP 89
23473: PUSH
23474: LD_INT 1
23476: ST_TO_ADDR
// if p3 = 105 then
23477: LD_VAR 0 3
23481: PUSH
23482: LD_INT 105
23484: EQUAL
23485: IFFALSE 23495
// sSun := true ;
23487: LD_ADDR_EXP 90
23491: PUSH
23492: LD_INT 1
23494: ST_TO_ADDR
// if p3 = 106 then
23495: LD_VAR 0 3
23499: PUSH
23500: LD_INT 106
23502: EQUAL
23503: IFFALSE 23513
// sTiger := true ;
23505: LD_ADDR_EXP 86
23509: PUSH
23510: LD_INT 1
23512: ST_TO_ADDR
// if p3 = 107 then
23513: LD_VAR 0 3
23517: PUSH
23518: LD_INT 107
23520: EQUAL
23521: IFFALSE 23531
// sBomb := true ;
23523: LD_ADDR_EXP 87
23527: PUSH
23528: LD_INT 1
23530: ST_TO_ADDR
// if p3 = 108 then
23531: LD_VAR 0 3
23535: PUSH
23536: LD_INT 108
23538: EQUAL
23539: IFFALSE 23549
// sWound := true ;
23541: LD_ADDR_EXP 95
23545: PUSH
23546: LD_INT 1
23548: ST_TO_ADDR
// if p3 = 109 then
23549: LD_VAR 0 3
23553: PUSH
23554: LD_INT 109
23556: EQUAL
23557: IFFALSE 23567
// sBetray := true ;
23559: LD_ADDR_EXP 99
23563: PUSH
23564: LD_INT 1
23566: ST_TO_ADDR
// if p3 = 110 then
23567: LD_VAR 0 3
23571: PUSH
23572: LD_INT 110
23574: EQUAL
23575: IFFALSE 23585
// sContamin := true ;
23577: LD_ADDR_EXP 100
23581: PUSH
23582: LD_INT 1
23584: ST_TO_ADDR
// if p3 = 111 then
23585: LD_VAR 0 3
23589: PUSH
23590: LD_INT 111
23592: EQUAL
23593: IFFALSE 23603
// sOil := true ;
23595: LD_ADDR_EXP 102
23599: PUSH
23600: LD_INT 1
23602: ST_TO_ADDR
// if p3 = 112 then
23603: LD_VAR 0 3
23607: PUSH
23608: LD_INT 112
23610: EQUAL
23611: IFFALSE 23621
// sStu := true ;
23613: LD_ADDR_EXP 106
23617: PUSH
23618: LD_INT 1
23620: ST_TO_ADDR
// if p3 = 113 then
23621: LD_VAR 0 3
23625: PUSH
23626: LD_INT 113
23628: EQUAL
23629: IFFALSE 23639
// sBazooka := true ;
23631: LD_ADDR_EXP 109
23635: PUSH
23636: LD_INT 1
23638: ST_TO_ADDR
// if p3 = 114 then
23639: LD_VAR 0 3
23643: PUSH
23644: LD_INT 114
23646: EQUAL
23647: IFFALSE 23657
// sMortar := true ;
23649: LD_ADDR_EXP 110
23653: PUSH
23654: LD_INT 1
23656: ST_TO_ADDR
// if p3 = 115 then
23657: LD_VAR 0 3
23661: PUSH
23662: LD_INT 115
23664: EQUAL
23665: IFFALSE 23675
// sRanger := true ;
23667: LD_ADDR_EXP 120
23671: PUSH
23672: LD_INT 1
23674: ST_TO_ADDR
// end ; if p2 = 101 then
23675: LD_VAR 0 2
23679: PUSH
23680: LD_INT 101
23682: EQUAL
23683: IFFALSE 23886
// begin case p3 of 1 :
23685: LD_VAR 0 3
23689: PUSH
23690: LD_INT 1
23692: DOUBLE
23693: EQUAL
23694: IFTRUE 23698
23696: GO 23705
23698: POP
// hHackUnlimitedResources ; 2 :
23699: CALL 33980 0 0
23703: GO 23886
23705: LD_INT 2
23707: DOUBLE
23708: EQUAL
23709: IFTRUE 23713
23711: GO 23720
23713: POP
// hHackSetLevel10 ; 3 :
23714: CALL 34113 0 0
23718: GO 23886
23720: LD_INT 3
23722: DOUBLE
23723: EQUAL
23724: IFTRUE 23728
23726: GO 23735
23728: POP
// hHackSetLevel10YourUnits ; 4 :
23729: CALL 34198 0 0
23733: GO 23886
23735: LD_INT 4
23737: DOUBLE
23738: EQUAL
23739: IFTRUE 23743
23741: GO 23765
23743: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
23744: LD_VAR 0 4
23748: PPUSH
23749: LD_VAR 0 5
23753: PPUSH
23754: LD_VAR 0 6
23758: PPUSH
23759: CALL 34288 0 3
23763: GO 23886
23765: LD_INT 5
23767: DOUBLE
23768: EQUAL
23769: IFTRUE 23773
23771: GO 23780
23773: POP
// hHackSpawnVehicle ; 6 :
23774: CALL 34349 0 0
23778: GO 23886
23780: LD_INT 6
23782: DOUBLE
23783: EQUAL
23784: IFTRUE 23788
23786: GO 23795
23788: POP
// hHackInvincible ; 7 :
23789: CALL 34895 0 0
23793: GO 23886
23795: LD_INT 7
23797: DOUBLE
23798: EQUAL
23799: IFTRUE 23803
23801: GO 23810
23803: POP
// hHackInvisible ; 8 :
23804: CALL 35006 0 0
23808: GO 23886
23810: LD_INT 8
23812: DOUBLE
23813: EQUAL
23814: IFTRUE 23818
23816: GO 23825
23818: POP
// hHackChangeYourSide ; 9 :
23819: CALL 35063 0 0
23823: GO 23886
23825: LD_INT 9
23827: DOUBLE
23828: EQUAL
23829: IFTRUE 23833
23831: GO 23840
23833: POP
// hHackChangeUnitSide ; 10 :
23834: CALL 35105 0 0
23838: GO 23886
23840: LD_INT 10
23842: DOUBLE
23843: EQUAL
23844: IFTRUE 23848
23846: GO 23855
23848: POP
// hHackFog ; 11 :
23849: CALL 35206 0 0
23853: GO 23886
23855: LD_INT 11
23857: DOUBLE
23858: EQUAL
23859: IFTRUE 23863
23861: GO 23870
23863: POP
// hHackApeman ; 12 :
23864: CALL 35221 0 0
23868: GO 23886
23870: LD_INT 12
23872: DOUBLE
23873: EQUAL
23874: IFTRUE 23878
23876: GO 23885
23878: POP
// hHackBoom ; end ;
23879: CALL 35306 0 0
23883: GO 23886
23885: POP
// end ; end ;
23886: PPOPN 6
23888: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
23889: GO 23891
23891: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
23892: LD_STRING initStreamRollete();
23894: PPUSH
23895: CALL_OW 559
// InitStreamMode ;
23899: CALL 23908 0 0
// DefineStreamItems ( ) ;
23903: CALL 24348 0 0
// end ;
23907: END
// function InitStreamMode ; begin
23908: LD_INT 0
23910: PPUSH
// streamModeActive := false ;
23911: LD_ADDR_EXP 67
23915: PUSH
23916: LD_INT 0
23918: ST_TO_ADDR
// normalCounter := 36 ;
23919: LD_ADDR_EXP 68
23923: PUSH
23924: LD_INT 36
23926: ST_TO_ADDR
// hardcoreCounter := 16 ;
23927: LD_ADDR_EXP 69
23931: PUSH
23932: LD_INT 16
23934: ST_TO_ADDR
// sRocket := false ;
23935: LD_ADDR_EXP 72
23939: PUSH
23940: LD_INT 0
23942: ST_TO_ADDR
// sSpeed := false ;
23943: LD_ADDR_EXP 71
23947: PUSH
23948: LD_INT 0
23950: ST_TO_ADDR
// sEngine := false ;
23951: LD_ADDR_EXP 73
23955: PUSH
23956: LD_INT 0
23958: ST_TO_ADDR
// sSpec := false ;
23959: LD_ADDR_EXP 70
23963: PUSH
23964: LD_INT 0
23966: ST_TO_ADDR
// sLevel := false ;
23967: LD_ADDR_EXP 74
23971: PUSH
23972: LD_INT 0
23974: ST_TO_ADDR
// sArmoury := false ;
23975: LD_ADDR_EXP 75
23979: PUSH
23980: LD_INT 0
23982: ST_TO_ADDR
// sRadar := false ;
23983: LD_ADDR_EXP 76
23987: PUSH
23988: LD_INT 0
23990: ST_TO_ADDR
// sBunker := false ;
23991: LD_ADDR_EXP 77
23995: PUSH
23996: LD_INT 0
23998: ST_TO_ADDR
// sHack := false ;
23999: LD_ADDR_EXP 78
24003: PUSH
24004: LD_INT 0
24006: ST_TO_ADDR
// sFire := false ;
24007: LD_ADDR_EXP 79
24011: PUSH
24012: LD_INT 0
24014: ST_TO_ADDR
// sRefresh := false ;
24015: LD_ADDR_EXP 80
24019: PUSH
24020: LD_INT 0
24022: ST_TO_ADDR
// sExp := false ;
24023: LD_ADDR_EXP 81
24027: PUSH
24028: LD_INT 0
24030: ST_TO_ADDR
// sDepot := false ;
24031: LD_ADDR_EXP 82
24035: PUSH
24036: LD_INT 0
24038: ST_TO_ADDR
// sFlag := false ;
24039: LD_ADDR_EXP 83
24043: PUSH
24044: LD_INT 0
24046: ST_TO_ADDR
// sKamikadze := false ;
24047: LD_ADDR_EXP 91
24051: PUSH
24052: LD_INT 0
24054: ST_TO_ADDR
// sTroll := false ;
24055: LD_ADDR_EXP 92
24059: PUSH
24060: LD_INT 0
24062: ST_TO_ADDR
// sSlow := false ;
24063: LD_ADDR_EXP 93
24067: PUSH
24068: LD_INT 0
24070: ST_TO_ADDR
// sLack := false ;
24071: LD_ADDR_EXP 94
24075: PUSH
24076: LD_INT 0
24078: ST_TO_ADDR
// sTank := false ;
24079: LD_ADDR_EXP 96
24083: PUSH
24084: LD_INT 0
24086: ST_TO_ADDR
// sRemote := false ;
24087: LD_ADDR_EXP 97
24091: PUSH
24092: LD_INT 0
24094: ST_TO_ADDR
// sPowell := false ;
24095: LD_ADDR_EXP 98
24099: PUSH
24100: LD_INT 0
24102: ST_TO_ADDR
// sTeleport := false ;
24103: LD_ADDR_EXP 101
24107: PUSH
24108: LD_INT 0
24110: ST_TO_ADDR
// sOilTower := false ;
24111: LD_ADDR_EXP 103
24115: PUSH
24116: LD_INT 0
24118: ST_TO_ADDR
// sShovel := false ;
24119: LD_ADDR_EXP 104
24123: PUSH
24124: LD_INT 0
24126: ST_TO_ADDR
// sSheik := false ;
24127: LD_ADDR_EXP 105
24131: PUSH
24132: LD_INT 0
24134: ST_TO_ADDR
// sEarthquake := false ;
24135: LD_ADDR_EXP 107
24139: PUSH
24140: LD_INT 0
24142: ST_TO_ADDR
// sAI := false ;
24143: LD_ADDR_EXP 108
24147: PUSH
24148: LD_INT 0
24150: ST_TO_ADDR
// sCargo := false ;
24151: LD_ADDR_EXP 111
24155: PUSH
24156: LD_INT 0
24158: ST_TO_ADDR
// sDLaser := false ;
24159: LD_ADDR_EXP 112
24163: PUSH
24164: LD_INT 0
24166: ST_TO_ADDR
// sExchange := false ;
24167: LD_ADDR_EXP 113
24171: PUSH
24172: LD_INT 0
24174: ST_TO_ADDR
// sFac := false ;
24175: LD_ADDR_EXP 114
24179: PUSH
24180: LD_INT 0
24182: ST_TO_ADDR
// sPower := false ;
24183: LD_ADDR_EXP 115
24187: PUSH
24188: LD_INT 0
24190: ST_TO_ADDR
// sRandom := false ;
24191: LD_ADDR_EXP 116
24195: PUSH
24196: LD_INT 0
24198: ST_TO_ADDR
// sShield := false ;
24199: LD_ADDR_EXP 117
24203: PUSH
24204: LD_INT 0
24206: ST_TO_ADDR
// sTime := false ;
24207: LD_ADDR_EXP 118
24211: PUSH
24212: LD_INT 0
24214: ST_TO_ADDR
// sTools := false ;
24215: LD_ADDR_EXP 119
24219: PUSH
24220: LD_INT 0
24222: ST_TO_ADDR
// sSold := false ;
24223: LD_ADDR_EXP 84
24227: PUSH
24228: LD_INT 0
24230: ST_TO_ADDR
// sDiff := false ;
24231: LD_ADDR_EXP 85
24235: PUSH
24236: LD_INT 0
24238: ST_TO_ADDR
// sFog := false ;
24239: LD_ADDR_EXP 88
24243: PUSH
24244: LD_INT 0
24246: ST_TO_ADDR
// sReset := false ;
24247: LD_ADDR_EXP 89
24251: PUSH
24252: LD_INT 0
24254: ST_TO_ADDR
// sSun := false ;
24255: LD_ADDR_EXP 90
24259: PUSH
24260: LD_INT 0
24262: ST_TO_ADDR
// sTiger := false ;
24263: LD_ADDR_EXP 86
24267: PUSH
24268: LD_INT 0
24270: ST_TO_ADDR
// sBomb := false ;
24271: LD_ADDR_EXP 87
24275: PUSH
24276: LD_INT 0
24278: ST_TO_ADDR
// sWound := false ;
24279: LD_ADDR_EXP 95
24283: PUSH
24284: LD_INT 0
24286: ST_TO_ADDR
// sBetray := false ;
24287: LD_ADDR_EXP 99
24291: PUSH
24292: LD_INT 0
24294: ST_TO_ADDR
// sContamin := false ;
24295: LD_ADDR_EXP 100
24299: PUSH
24300: LD_INT 0
24302: ST_TO_ADDR
// sOil := false ;
24303: LD_ADDR_EXP 102
24307: PUSH
24308: LD_INT 0
24310: ST_TO_ADDR
// sStu := false ;
24311: LD_ADDR_EXP 106
24315: PUSH
24316: LD_INT 0
24318: ST_TO_ADDR
// sBazooka := false ;
24319: LD_ADDR_EXP 109
24323: PUSH
24324: LD_INT 0
24326: ST_TO_ADDR
// sMortar := false ;
24327: LD_ADDR_EXP 110
24331: PUSH
24332: LD_INT 0
24334: ST_TO_ADDR
// sRanger := false ;
24335: LD_ADDR_EXP 120
24339: PUSH
24340: LD_INT 0
24342: ST_TO_ADDR
// end ;
24343: LD_VAR 0 1
24347: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
24348: LD_INT 0
24350: PPUSH
24351: PPUSH
24352: PPUSH
24353: PPUSH
24354: PPUSH
// result := [ ] ;
24355: LD_ADDR_VAR 0 1
24359: PUSH
24360: EMPTY
24361: ST_TO_ADDR
// if campaign_id = 1 then
24362: LD_OWVAR 69
24366: PUSH
24367: LD_INT 1
24369: EQUAL
24370: IFFALSE 27308
// begin case mission_number of 1 :
24372: LD_OWVAR 70
24376: PUSH
24377: LD_INT 1
24379: DOUBLE
24380: EQUAL
24381: IFTRUE 24385
24383: GO 24449
24385: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
24386: LD_ADDR_VAR 0 1
24390: PUSH
24391: LD_INT 2
24393: PUSH
24394: LD_INT 4
24396: PUSH
24397: LD_INT 11
24399: PUSH
24400: LD_INT 12
24402: PUSH
24403: LD_INT 15
24405: PUSH
24406: LD_INT 16
24408: PUSH
24409: LD_INT 22
24411: PUSH
24412: LD_INT 23
24414: PUSH
24415: LD_INT 26
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 101
24431: PUSH
24432: LD_INT 102
24434: PUSH
24435: LD_INT 106
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: LIST
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: ST_TO_ADDR
24447: GO 27306
24449: LD_INT 2
24451: DOUBLE
24452: EQUAL
24453: IFTRUE 24457
24455: GO 24529
24457: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
24458: LD_ADDR_VAR 0 1
24462: PUSH
24463: LD_INT 2
24465: PUSH
24466: LD_INT 4
24468: PUSH
24469: LD_INT 11
24471: PUSH
24472: LD_INT 12
24474: PUSH
24475: LD_INT 15
24477: PUSH
24478: LD_INT 16
24480: PUSH
24481: LD_INT 22
24483: PUSH
24484: LD_INT 23
24486: PUSH
24487: LD_INT 26
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 101
24503: PUSH
24504: LD_INT 102
24506: PUSH
24507: LD_INT 105
24509: PUSH
24510: LD_INT 106
24512: PUSH
24513: LD_INT 108
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: ST_TO_ADDR
24527: GO 27306
24529: LD_INT 3
24531: DOUBLE
24532: EQUAL
24533: IFTRUE 24537
24535: GO 24613
24537: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
24538: LD_ADDR_VAR 0 1
24542: PUSH
24543: LD_INT 2
24545: PUSH
24546: LD_INT 4
24548: PUSH
24549: LD_INT 5
24551: PUSH
24552: LD_INT 11
24554: PUSH
24555: LD_INT 12
24557: PUSH
24558: LD_INT 15
24560: PUSH
24561: LD_INT 16
24563: PUSH
24564: LD_INT 22
24566: PUSH
24567: LD_INT 26
24569: PUSH
24570: LD_INT 36
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 101
24587: PUSH
24588: LD_INT 102
24590: PUSH
24591: LD_INT 105
24593: PUSH
24594: LD_INT 106
24596: PUSH
24597: LD_INT 108
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: ST_TO_ADDR
24611: GO 27306
24613: LD_INT 4
24615: DOUBLE
24616: EQUAL
24617: IFTRUE 24621
24619: GO 24705
24621: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
24622: LD_ADDR_VAR 0 1
24626: PUSH
24627: LD_INT 2
24629: PUSH
24630: LD_INT 4
24632: PUSH
24633: LD_INT 5
24635: PUSH
24636: LD_INT 8
24638: PUSH
24639: LD_INT 11
24641: PUSH
24642: LD_INT 12
24644: PUSH
24645: LD_INT 15
24647: PUSH
24648: LD_INT 16
24650: PUSH
24651: LD_INT 22
24653: PUSH
24654: LD_INT 23
24656: PUSH
24657: LD_INT 26
24659: PUSH
24660: LD_INT 36
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 101
24679: PUSH
24680: LD_INT 102
24682: PUSH
24683: LD_INT 105
24685: PUSH
24686: LD_INT 106
24688: PUSH
24689: LD_INT 108
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: ST_TO_ADDR
24703: GO 27306
24705: LD_INT 5
24707: DOUBLE
24708: EQUAL
24709: IFTRUE 24713
24711: GO 24813
24713: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
24714: LD_ADDR_VAR 0 1
24718: PUSH
24719: LD_INT 2
24721: PUSH
24722: LD_INT 4
24724: PUSH
24725: LD_INT 5
24727: PUSH
24728: LD_INT 6
24730: PUSH
24731: LD_INT 8
24733: PUSH
24734: LD_INT 11
24736: PUSH
24737: LD_INT 12
24739: PUSH
24740: LD_INT 15
24742: PUSH
24743: LD_INT 16
24745: PUSH
24746: LD_INT 22
24748: PUSH
24749: LD_INT 23
24751: PUSH
24752: LD_INT 25
24754: PUSH
24755: LD_INT 26
24757: PUSH
24758: LD_INT 36
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 101
24779: PUSH
24780: LD_INT 102
24782: PUSH
24783: LD_INT 105
24785: PUSH
24786: LD_INT 106
24788: PUSH
24789: LD_INT 108
24791: PUSH
24792: LD_INT 109
24794: PUSH
24795: LD_INT 112
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: ST_TO_ADDR
24811: GO 27306
24813: LD_INT 6
24815: DOUBLE
24816: EQUAL
24817: IFTRUE 24821
24819: GO 24941
24821: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
24822: LD_ADDR_VAR 0 1
24826: PUSH
24827: LD_INT 2
24829: PUSH
24830: LD_INT 4
24832: PUSH
24833: LD_INT 5
24835: PUSH
24836: LD_INT 6
24838: PUSH
24839: LD_INT 8
24841: PUSH
24842: LD_INT 11
24844: PUSH
24845: LD_INT 12
24847: PUSH
24848: LD_INT 15
24850: PUSH
24851: LD_INT 16
24853: PUSH
24854: LD_INT 20
24856: PUSH
24857: LD_INT 21
24859: PUSH
24860: LD_INT 22
24862: PUSH
24863: LD_INT 23
24865: PUSH
24866: LD_INT 25
24868: PUSH
24869: LD_INT 26
24871: PUSH
24872: LD_INT 30
24874: PUSH
24875: LD_INT 31
24877: PUSH
24878: LD_INT 32
24880: PUSH
24881: LD_INT 36
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 101
24907: PUSH
24908: LD_INT 102
24910: PUSH
24911: LD_INT 105
24913: PUSH
24914: LD_INT 106
24916: PUSH
24917: LD_INT 108
24919: PUSH
24920: LD_INT 109
24922: PUSH
24923: LD_INT 112
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: ST_TO_ADDR
24939: GO 27306
24941: LD_INT 7
24943: DOUBLE
24944: EQUAL
24945: IFTRUE 24949
24947: GO 25049
24949: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
24950: LD_ADDR_VAR 0 1
24954: PUSH
24955: LD_INT 2
24957: PUSH
24958: LD_INT 4
24960: PUSH
24961: LD_INT 5
24963: PUSH
24964: LD_INT 7
24966: PUSH
24967: LD_INT 11
24969: PUSH
24970: LD_INT 12
24972: PUSH
24973: LD_INT 15
24975: PUSH
24976: LD_INT 16
24978: PUSH
24979: LD_INT 20
24981: PUSH
24982: LD_INT 21
24984: PUSH
24985: LD_INT 22
24987: PUSH
24988: LD_INT 23
24990: PUSH
24991: LD_INT 25
24993: PUSH
24994: LD_INT 26
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 101
25015: PUSH
25016: LD_INT 102
25018: PUSH
25019: LD_INT 103
25021: PUSH
25022: LD_INT 105
25024: PUSH
25025: LD_INT 106
25027: PUSH
25028: LD_INT 108
25030: PUSH
25031: LD_INT 112
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: ST_TO_ADDR
25047: GO 27306
25049: LD_INT 8
25051: DOUBLE
25052: EQUAL
25053: IFTRUE 25057
25055: GO 25185
25057: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
25058: LD_ADDR_VAR 0 1
25062: PUSH
25063: LD_INT 2
25065: PUSH
25066: LD_INT 4
25068: PUSH
25069: LD_INT 5
25071: PUSH
25072: LD_INT 6
25074: PUSH
25075: LD_INT 7
25077: PUSH
25078: LD_INT 8
25080: PUSH
25081: LD_INT 11
25083: PUSH
25084: LD_INT 12
25086: PUSH
25087: LD_INT 15
25089: PUSH
25090: LD_INT 16
25092: PUSH
25093: LD_INT 20
25095: PUSH
25096: LD_INT 21
25098: PUSH
25099: LD_INT 22
25101: PUSH
25102: LD_INT 23
25104: PUSH
25105: LD_INT 25
25107: PUSH
25108: LD_INT 26
25110: PUSH
25111: LD_INT 30
25113: PUSH
25114: LD_INT 31
25116: PUSH
25117: LD_INT 32
25119: PUSH
25120: LD_INT 36
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 101
25147: PUSH
25148: LD_INT 102
25150: PUSH
25151: LD_INT 103
25153: PUSH
25154: LD_INT 105
25156: PUSH
25157: LD_INT 106
25159: PUSH
25160: LD_INT 108
25162: PUSH
25163: LD_INT 109
25165: PUSH
25166: LD_INT 112
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: ST_TO_ADDR
25183: GO 27306
25185: LD_INT 9
25187: DOUBLE
25188: EQUAL
25189: IFTRUE 25193
25191: GO 25329
25193: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
25194: LD_ADDR_VAR 0 1
25198: PUSH
25199: LD_INT 2
25201: PUSH
25202: LD_INT 4
25204: PUSH
25205: LD_INT 5
25207: PUSH
25208: LD_INT 6
25210: PUSH
25211: LD_INT 7
25213: PUSH
25214: LD_INT 8
25216: PUSH
25217: LD_INT 11
25219: PUSH
25220: LD_INT 12
25222: PUSH
25223: LD_INT 15
25225: PUSH
25226: LD_INT 16
25228: PUSH
25229: LD_INT 20
25231: PUSH
25232: LD_INT 21
25234: PUSH
25235: LD_INT 22
25237: PUSH
25238: LD_INT 23
25240: PUSH
25241: LD_INT 25
25243: PUSH
25244: LD_INT 26
25246: PUSH
25247: LD_INT 28
25249: PUSH
25250: LD_INT 30
25252: PUSH
25253: LD_INT 31
25255: PUSH
25256: LD_INT 32
25258: PUSH
25259: LD_INT 36
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 101
25287: PUSH
25288: LD_INT 102
25290: PUSH
25291: LD_INT 103
25293: PUSH
25294: LD_INT 105
25296: PUSH
25297: LD_INT 106
25299: PUSH
25300: LD_INT 108
25302: PUSH
25303: LD_INT 109
25305: PUSH
25306: LD_INT 112
25308: PUSH
25309: LD_INT 114
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: ST_TO_ADDR
25327: GO 27306
25329: LD_INT 10
25331: DOUBLE
25332: EQUAL
25333: IFTRUE 25337
25335: GO 25521
25337: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
25338: LD_ADDR_VAR 0 1
25342: PUSH
25343: LD_INT 2
25345: PUSH
25346: LD_INT 4
25348: PUSH
25349: LD_INT 5
25351: PUSH
25352: LD_INT 6
25354: PUSH
25355: LD_INT 7
25357: PUSH
25358: LD_INT 8
25360: PUSH
25361: LD_INT 9
25363: PUSH
25364: LD_INT 10
25366: PUSH
25367: LD_INT 11
25369: PUSH
25370: LD_INT 12
25372: PUSH
25373: LD_INT 13
25375: PUSH
25376: LD_INT 14
25378: PUSH
25379: LD_INT 15
25381: PUSH
25382: LD_INT 16
25384: PUSH
25385: LD_INT 17
25387: PUSH
25388: LD_INT 18
25390: PUSH
25391: LD_INT 19
25393: PUSH
25394: LD_INT 20
25396: PUSH
25397: LD_INT 21
25399: PUSH
25400: LD_INT 22
25402: PUSH
25403: LD_INT 23
25405: PUSH
25406: LD_INT 24
25408: PUSH
25409: LD_INT 25
25411: PUSH
25412: LD_INT 26
25414: PUSH
25415: LD_INT 28
25417: PUSH
25418: LD_INT 30
25420: PUSH
25421: LD_INT 31
25423: PUSH
25424: LD_INT 32
25426: PUSH
25427: LD_INT 36
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 101
25463: PUSH
25464: LD_INT 102
25466: PUSH
25467: LD_INT 103
25469: PUSH
25470: LD_INT 104
25472: PUSH
25473: LD_INT 105
25475: PUSH
25476: LD_INT 106
25478: PUSH
25479: LD_INT 107
25481: PUSH
25482: LD_INT 108
25484: PUSH
25485: LD_INT 109
25487: PUSH
25488: LD_INT 110
25490: PUSH
25491: LD_INT 111
25493: PUSH
25494: LD_INT 112
25496: PUSH
25497: LD_INT 114
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: ST_TO_ADDR
25519: GO 27306
25521: LD_INT 11
25523: DOUBLE
25524: EQUAL
25525: IFTRUE 25529
25527: GO 25721
25529: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
25530: LD_ADDR_VAR 0 1
25534: PUSH
25535: LD_INT 2
25537: PUSH
25538: LD_INT 3
25540: PUSH
25541: LD_INT 4
25543: PUSH
25544: LD_INT 5
25546: PUSH
25547: LD_INT 6
25549: PUSH
25550: LD_INT 7
25552: PUSH
25553: LD_INT 8
25555: PUSH
25556: LD_INT 9
25558: PUSH
25559: LD_INT 10
25561: PUSH
25562: LD_INT 11
25564: PUSH
25565: LD_INT 12
25567: PUSH
25568: LD_INT 13
25570: PUSH
25571: LD_INT 14
25573: PUSH
25574: LD_INT 15
25576: PUSH
25577: LD_INT 16
25579: PUSH
25580: LD_INT 17
25582: PUSH
25583: LD_INT 18
25585: PUSH
25586: LD_INT 19
25588: PUSH
25589: LD_INT 20
25591: PUSH
25592: LD_INT 21
25594: PUSH
25595: LD_INT 22
25597: PUSH
25598: LD_INT 23
25600: PUSH
25601: LD_INT 24
25603: PUSH
25604: LD_INT 25
25606: PUSH
25607: LD_INT 26
25609: PUSH
25610: LD_INT 28
25612: PUSH
25613: LD_INT 30
25615: PUSH
25616: LD_INT 31
25618: PUSH
25619: LD_INT 32
25621: PUSH
25622: LD_INT 34
25624: PUSH
25625: LD_INT 36
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 101
25663: PUSH
25664: LD_INT 102
25666: PUSH
25667: LD_INT 103
25669: PUSH
25670: LD_INT 104
25672: PUSH
25673: LD_INT 105
25675: PUSH
25676: LD_INT 106
25678: PUSH
25679: LD_INT 107
25681: PUSH
25682: LD_INT 108
25684: PUSH
25685: LD_INT 109
25687: PUSH
25688: LD_INT 110
25690: PUSH
25691: LD_INT 111
25693: PUSH
25694: LD_INT 112
25696: PUSH
25697: LD_INT 114
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: ST_TO_ADDR
25719: GO 27306
25721: LD_INT 12
25723: DOUBLE
25724: EQUAL
25725: IFTRUE 25729
25727: GO 25937
25729: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
25730: LD_ADDR_VAR 0 1
25734: PUSH
25735: LD_INT 1
25737: PUSH
25738: LD_INT 2
25740: PUSH
25741: LD_INT 3
25743: PUSH
25744: LD_INT 4
25746: PUSH
25747: LD_INT 5
25749: PUSH
25750: LD_INT 6
25752: PUSH
25753: LD_INT 7
25755: PUSH
25756: LD_INT 8
25758: PUSH
25759: LD_INT 9
25761: PUSH
25762: LD_INT 10
25764: PUSH
25765: LD_INT 11
25767: PUSH
25768: LD_INT 12
25770: PUSH
25771: LD_INT 13
25773: PUSH
25774: LD_INT 14
25776: PUSH
25777: LD_INT 15
25779: PUSH
25780: LD_INT 16
25782: PUSH
25783: LD_INT 17
25785: PUSH
25786: LD_INT 18
25788: PUSH
25789: LD_INT 19
25791: PUSH
25792: LD_INT 20
25794: PUSH
25795: LD_INT 21
25797: PUSH
25798: LD_INT 22
25800: PUSH
25801: LD_INT 23
25803: PUSH
25804: LD_INT 24
25806: PUSH
25807: LD_INT 25
25809: PUSH
25810: LD_INT 26
25812: PUSH
25813: LD_INT 27
25815: PUSH
25816: LD_INT 28
25818: PUSH
25819: LD_INT 30
25821: PUSH
25822: LD_INT 31
25824: PUSH
25825: LD_INT 32
25827: PUSH
25828: LD_INT 33
25830: PUSH
25831: LD_INT 34
25833: PUSH
25834: LD_INT 36
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 101
25875: PUSH
25876: LD_INT 102
25878: PUSH
25879: LD_INT 103
25881: PUSH
25882: LD_INT 104
25884: PUSH
25885: LD_INT 105
25887: PUSH
25888: LD_INT 106
25890: PUSH
25891: LD_INT 107
25893: PUSH
25894: LD_INT 108
25896: PUSH
25897: LD_INT 109
25899: PUSH
25900: LD_INT 110
25902: PUSH
25903: LD_INT 111
25905: PUSH
25906: LD_INT 112
25908: PUSH
25909: LD_INT 113
25911: PUSH
25912: LD_INT 114
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: ST_TO_ADDR
25935: GO 27306
25937: LD_INT 13
25939: DOUBLE
25940: EQUAL
25941: IFTRUE 25945
25943: GO 26141
25945: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
25946: LD_ADDR_VAR 0 1
25950: PUSH
25951: LD_INT 1
25953: PUSH
25954: LD_INT 2
25956: PUSH
25957: LD_INT 3
25959: PUSH
25960: LD_INT 4
25962: PUSH
25963: LD_INT 5
25965: PUSH
25966: LD_INT 8
25968: PUSH
25969: LD_INT 9
25971: PUSH
25972: LD_INT 10
25974: PUSH
25975: LD_INT 11
25977: PUSH
25978: LD_INT 12
25980: PUSH
25981: LD_INT 14
25983: PUSH
25984: LD_INT 15
25986: PUSH
25987: LD_INT 16
25989: PUSH
25990: LD_INT 17
25992: PUSH
25993: LD_INT 18
25995: PUSH
25996: LD_INT 19
25998: PUSH
25999: LD_INT 20
26001: PUSH
26002: LD_INT 21
26004: PUSH
26005: LD_INT 22
26007: PUSH
26008: LD_INT 23
26010: PUSH
26011: LD_INT 24
26013: PUSH
26014: LD_INT 25
26016: PUSH
26017: LD_INT 26
26019: PUSH
26020: LD_INT 27
26022: PUSH
26023: LD_INT 28
26025: PUSH
26026: LD_INT 30
26028: PUSH
26029: LD_INT 31
26031: PUSH
26032: LD_INT 32
26034: PUSH
26035: LD_INT 33
26037: PUSH
26038: LD_INT 34
26040: PUSH
26041: LD_INT 36
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 101
26079: PUSH
26080: LD_INT 102
26082: PUSH
26083: LD_INT 103
26085: PUSH
26086: LD_INT 104
26088: PUSH
26089: LD_INT 105
26091: PUSH
26092: LD_INT 106
26094: PUSH
26095: LD_INT 107
26097: PUSH
26098: LD_INT 108
26100: PUSH
26101: LD_INT 109
26103: PUSH
26104: LD_INT 110
26106: PUSH
26107: LD_INT 111
26109: PUSH
26110: LD_INT 112
26112: PUSH
26113: LD_INT 113
26115: PUSH
26116: LD_INT 114
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: ST_TO_ADDR
26139: GO 27306
26141: LD_INT 14
26143: DOUBLE
26144: EQUAL
26145: IFTRUE 26149
26147: GO 26361
26149: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
26150: LD_ADDR_VAR 0 1
26154: PUSH
26155: LD_INT 1
26157: PUSH
26158: LD_INT 2
26160: PUSH
26161: LD_INT 3
26163: PUSH
26164: LD_INT 4
26166: PUSH
26167: LD_INT 5
26169: PUSH
26170: LD_INT 6
26172: PUSH
26173: LD_INT 7
26175: PUSH
26176: LD_INT 8
26178: PUSH
26179: LD_INT 9
26181: PUSH
26182: LD_INT 10
26184: PUSH
26185: LD_INT 11
26187: PUSH
26188: LD_INT 12
26190: PUSH
26191: LD_INT 13
26193: PUSH
26194: LD_INT 14
26196: PUSH
26197: LD_INT 15
26199: PUSH
26200: LD_INT 16
26202: PUSH
26203: LD_INT 17
26205: PUSH
26206: LD_INT 18
26208: PUSH
26209: LD_INT 19
26211: PUSH
26212: LD_INT 20
26214: PUSH
26215: LD_INT 21
26217: PUSH
26218: LD_INT 22
26220: PUSH
26221: LD_INT 23
26223: PUSH
26224: LD_INT 24
26226: PUSH
26227: LD_INT 25
26229: PUSH
26230: LD_INT 26
26232: PUSH
26233: LD_INT 27
26235: PUSH
26236: LD_INT 28
26238: PUSH
26239: LD_INT 29
26241: PUSH
26242: LD_INT 30
26244: PUSH
26245: LD_INT 31
26247: PUSH
26248: LD_INT 32
26250: PUSH
26251: LD_INT 33
26253: PUSH
26254: LD_INT 34
26256: PUSH
26257: LD_INT 36
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 101
26299: PUSH
26300: LD_INT 102
26302: PUSH
26303: LD_INT 103
26305: PUSH
26306: LD_INT 104
26308: PUSH
26309: LD_INT 105
26311: PUSH
26312: LD_INT 106
26314: PUSH
26315: LD_INT 107
26317: PUSH
26318: LD_INT 108
26320: PUSH
26321: LD_INT 109
26323: PUSH
26324: LD_INT 110
26326: PUSH
26327: LD_INT 111
26329: PUSH
26330: LD_INT 112
26332: PUSH
26333: LD_INT 113
26335: PUSH
26336: LD_INT 114
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: ST_TO_ADDR
26359: GO 27306
26361: LD_INT 15
26363: DOUBLE
26364: EQUAL
26365: IFTRUE 26369
26367: GO 26581
26369: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
26370: LD_ADDR_VAR 0 1
26374: PUSH
26375: LD_INT 1
26377: PUSH
26378: LD_INT 2
26380: PUSH
26381: LD_INT 3
26383: PUSH
26384: LD_INT 4
26386: PUSH
26387: LD_INT 5
26389: PUSH
26390: LD_INT 6
26392: PUSH
26393: LD_INT 7
26395: PUSH
26396: LD_INT 8
26398: PUSH
26399: LD_INT 9
26401: PUSH
26402: LD_INT 10
26404: PUSH
26405: LD_INT 11
26407: PUSH
26408: LD_INT 12
26410: PUSH
26411: LD_INT 13
26413: PUSH
26414: LD_INT 14
26416: PUSH
26417: LD_INT 15
26419: PUSH
26420: LD_INT 16
26422: PUSH
26423: LD_INT 17
26425: PUSH
26426: LD_INT 18
26428: PUSH
26429: LD_INT 19
26431: PUSH
26432: LD_INT 20
26434: PUSH
26435: LD_INT 21
26437: PUSH
26438: LD_INT 22
26440: PUSH
26441: LD_INT 23
26443: PUSH
26444: LD_INT 24
26446: PUSH
26447: LD_INT 25
26449: PUSH
26450: LD_INT 26
26452: PUSH
26453: LD_INT 27
26455: PUSH
26456: LD_INT 28
26458: PUSH
26459: LD_INT 29
26461: PUSH
26462: LD_INT 30
26464: PUSH
26465: LD_INT 31
26467: PUSH
26468: LD_INT 32
26470: PUSH
26471: LD_INT 33
26473: PUSH
26474: LD_INT 34
26476: PUSH
26477: LD_INT 36
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 101
26519: PUSH
26520: LD_INT 102
26522: PUSH
26523: LD_INT 103
26525: PUSH
26526: LD_INT 104
26528: PUSH
26529: LD_INT 105
26531: PUSH
26532: LD_INT 106
26534: PUSH
26535: LD_INT 107
26537: PUSH
26538: LD_INT 108
26540: PUSH
26541: LD_INT 109
26543: PUSH
26544: LD_INT 110
26546: PUSH
26547: LD_INT 111
26549: PUSH
26550: LD_INT 112
26552: PUSH
26553: LD_INT 113
26555: PUSH
26556: LD_INT 114
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: ST_TO_ADDR
26579: GO 27306
26581: LD_INT 16
26583: DOUBLE
26584: EQUAL
26585: IFTRUE 26589
26587: GO 26713
26589: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
26590: LD_ADDR_VAR 0 1
26594: PUSH
26595: LD_INT 2
26597: PUSH
26598: LD_INT 4
26600: PUSH
26601: LD_INT 5
26603: PUSH
26604: LD_INT 7
26606: PUSH
26607: LD_INT 11
26609: PUSH
26610: LD_INT 12
26612: PUSH
26613: LD_INT 15
26615: PUSH
26616: LD_INT 16
26618: PUSH
26619: LD_INT 20
26621: PUSH
26622: LD_INT 21
26624: PUSH
26625: LD_INT 22
26627: PUSH
26628: LD_INT 23
26630: PUSH
26631: LD_INT 25
26633: PUSH
26634: LD_INT 26
26636: PUSH
26637: LD_INT 30
26639: PUSH
26640: LD_INT 31
26642: PUSH
26643: LD_INT 32
26645: PUSH
26646: LD_INT 33
26648: PUSH
26649: LD_INT 34
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 101
26675: PUSH
26676: LD_INT 102
26678: PUSH
26679: LD_INT 103
26681: PUSH
26682: LD_INT 106
26684: PUSH
26685: LD_INT 108
26687: PUSH
26688: LD_INT 112
26690: PUSH
26691: LD_INT 113
26693: PUSH
26694: LD_INT 114
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: ST_TO_ADDR
26711: GO 27306
26713: LD_INT 17
26715: DOUBLE
26716: EQUAL
26717: IFTRUE 26721
26719: GO 26933
26721: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
26722: LD_ADDR_VAR 0 1
26726: PUSH
26727: LD_INT 1
26729: PUSH
26730: LD_INT 2
26732: PUSH
26733: LD_INT 3
26735: PUSH
26736: LD_INT 4
26738: PUSH
26739: LD_INT 5
26741: PUSH
26742: LD_INT 6
26744: PUSH
26745: LD_INT 7
26747: PUSH
26748: LD_INT 8
26750: PUSH
26751: LD_INT 9
26753: PUSH
26754: LD_INT 10
26756: PUSH
26757: LD_INT 11
26759: PUSH
26760: LD_INT 12
26762: PUSH
26763: LD_INT 13
26765: PUSH
26766: LD_INT 14
26768: PUSH
26769: LD_INT 15
26771: PUSH
26772: LD_INT 16
26774: PUSH
26775: LD_INT 17
26777: PUSH
26778: LD_INT 18
26780: PUSH
26781: LD_INT 19
26783: PUSH
26784: LD_INT 20
26786: PUSH
26787: LD_INT 21
26789: PUSH
26790: LD_INT 22
26792: PUSH
26793: LD_INT 23
26795: PUSH
26796: LD_INT 24
26798: PUSH
26799: LD_INT 25
26801: PUSH
26802: LD_INT 26
26804: PUSH
26805: LD_INT 27
26807: PUSH
26808: LD_INT 28
26810: PUSH
26811: LD_INT 29
26813: PUSH
26814: LD_INT 30
26816: PUSH
26817: LD_INT 31
26819: PUSH
26820: LD_INT 32
26822: PUSH
26823: LD_INT 33
26825: PUSH
26826: LD_INT 34
26828: PUSH
26829: LD_INT 36
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 101
26871: PUSH
26872: LD_INT 102
26874: PUSH
26875: LD_INT 103
26877: PUSH
26878: LD_INT 104
26880: PUSH
26881: LD_INT 105
26883: PUSH
26884: LD_INT 106
26886: PUSH
26887: LD_INT 107
26889: PUSH
26890: LD_INT 108
26892: PUSH
26893: LD_INT 109
26895: PUSH
26896: LD_INT 110
26898: PUSH
26899: LD_INT 111
26901: PUSH
26902: LD_INT 112
26904: PUSH
26905: LD_INT 113
26907: PUSH
26908: LD_INT 114
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: ST_TO_ADDR
26931: GO 27306
26933: LD_INT 18
26935: DOUBLE
26936: EQUAL
26937: IFTRUE 26941
26939: GO 27077
26941: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
26942: LD_ADDR_VAR 0 1
26946: PUSH
26947: LD_INT 2
26949: PUSH
26950: LD_INT 4
26952: PUSH
26953: LD_INT 5
26955: PUSH
26956: LD_INT 7
26958: PUSH
26959: LD_INT 11
26961: PUSH
26962: LD_INT 12
26964: PUSH
26965: LD_INT 15
26967: PUSH
26968: LD_INT 16
26970: PUSH
26971: LD_INT 20
26973: PUSH
26974: LD_INT 21
26976: PUSH
26977: LD_INT 22
26979: PUSH
26980: LD_INT 23
26982: PUSH
26983: LD_INT 25
26985: PUSH
26986: LD_INT 26
26988: PUSH
26989: LD_INT 30
26991: PUSH
26992: LD_INT 31
26994: PUSH
26995: LD_INT 32
26997: PUSH
26998: LD_INT 33
27000: PUSH
27001: LD_INT 34
27003: PUSH
27004: LD_INT 35
27006: PUSH
27007: LD_INT 36
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 101
27035: PUSH
27036: LD_INT 102
27038: PUSH
27039: LD_INT 103
27041: PUSH
27042: LD_INT 106
27044: PUSH
27045: LD_INT 108
27047: PUSH
27048: LD_INT 112
27050: PUSH
27051: LD_INT 113
27053: PUSH
27054: LD_INT 114
27056: PUSH
27057: LD_INT 115
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: ST_TO_ADDR
27075: GO 27306
27077: LD_INT 19
27079: DOUBLE
27080: EQUAL
27081: IFTRUE 27085
27083: GO 27305
27085: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
27086: LD_ADDR_VAR 0 1
27090: PUSH
27091: LD_INT 1
27093: PUSH
27094: LD_INT 2
27096: PUSH
27097: LD_INT 3
27099: PUSH
27100: LD_INT 4
27102: PUSH
27103: LD_INT 5
27105: PUSH
27106: LD_INT 6
27108: PUSH
27109: LD_INT 7
27111: PUSH
27112: LD_INT 8
27114: PUSH
27115: LD_INT 9
27117: PUSH
27118: LD_INT 10
27120: PUSH
27121: LD_INT 11
27123: PUSH
27124: LD_INT 12
27126: PUSH
27127: LD_INT 13
27129: PUSH
27130: LD_INT 14
27132: PUSH
27133: LD_INT 15
27135: PUSH
27136: LD_INT 16
27138: PUSH
27139: LD_INT 17
27141: PUSH
27142: LD_INT 18
27144: PUSH
27145: LD_INT 19
27147: PUSH
27148: LD_INT 20
27150: PUSH
27151: LD_INT 21
27153: PUSH
27154: LD_INT 22
27156: PUSH
27157: LD_INT 23
27159: PUSH
27160: LD_INT 24
27162: PUSH
27163: LD_INT 25
27165: PUSH
27166: LD_INT 26
27168: PUSH
27169: LD_INT 27
27171: PUSH
27172: LD_INT 28
27174: PUSH
27175: LD_INT 29
27177: PUSH
27178: LD_INT 30
27180: PUSH
27181: LD_INT 31
27183: PUSH
27184: LD_INT 32
27186: PUSH
27187: LD_INT 33
27189: PUSH
27190: LD_INT 34
27192: PUSH
27193: LD_INT 35
27195: PUSH
27196: LD_INT 36
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 101
27239: PUSH
27240: LD_INT 102
27242: PUSH
27243: LD_INT 103
27245: PUSH
27246: LD_INT 104
27248: PUSH
27249: LD_INT 105
27251: PUSH
27252: LD_INT 106
27254: PUSH
27255: LD_INT 107
27257: PUSH
27258: LD_INT 108
27260: PUSH
27261: LD_INT 109
27263: PUSH
27264: LD_INT 110
27266: PUSH
27267: LD_INT 111
27269: PUSH
27270: LD_INT 112
27272: PUSH
27273: LD_INT 113
27275: PUSH
27276: LD_INT 114
27278: PUSH
27279: LD_INT 115
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: ST_TO_ADDR
27303: GO 27306
27305: POP
// end else
27306: GO 27525
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
27308: LD_ADDR_VAR 0 1
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: LD_INT 2
27318: PUSH
27319: LD_INT 3
27321: PUSH
27322: LD_INT 4
27324: PUSH
27325: LD_INT 5
27327: PUSH
27328: LD_INT 6
27330: PUSH
27331: LD_INT 7
27333: PUSH
27334: LD_INT 8
27336: PUSH
27337: LD_INT 9
27339: PUSH
27340: LD_INT 10
27342: PUSH
27343: LD_INT 11
27345: PUSH
27346: LD_INT 12
27348: PUSH
27349: LD_INT 13
27351: PUSH
27352: LD_INT 14
27354: PUSH
27355: LD_INT 15
27357: PUSH
27358: LD_INT 16
27360: PUSH
27361: LD_INT 17
27363: PUSH
27364: LD_INT 18
27366: PUSH
27367: LD_INT 19
27369: PUSH
27370: LD_INT 20
27372: PUSH
27373: LD_INT 21
27375: PUSH
27376: LD_INT 22
27378: PUSH
27379: LD_INT 23
27381: PUSH
27382: LD_INT 24
27384: PUSH
27385: LD_INT 25
27387: PUSH
27388: LD_INT 26
27390: PUSH
27391: LD_INT 27
27393: PUSH
27394: LD_INT 28
27396: PUSH
27397: LD_INT 29
27399: PUSH
27400: LD_INT 30
27402: PUSH
27403: LD_INT 31
27405: PUSH
27406: LD_INT 32
27408: PUSH
27409: LD_INT 33
27411: PUSH
27412: LD_INT 34
27414: PUSH
27415: LD_INT 35
27417: PUSH
27418: LD_INT 36
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 101
27461: PUSH
27462: LD_INT 102
27464: PUSH
27465: LD_INT 103
27467: PUSH
27468: LD_INT 104
27470: PUSH
27471: LD_INT 105
27473: PUSH
27474: LD_INT 106
27476: PUSH
27477: LD_INT 107
27479: PUSH
27480: LD_INT 108
27482: PUSH
27483: LD_INT 109
27485: PUSH
27486: LD_INT 110
27488: PUSH
27489: LD_INT 111
27491: PUSH
27492: LD_INT 112
27494: PUSH
27495: LD_INT 113
27497: PUSH
27498: LD_INT 114
27500: PUSH
27501: LD_INT 115
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: ST_TO_ADDR
// if result then
27525: LD_VAR 0 1
27529: IFFALSE 27818
// begin normal :=  ;
27531: LD_ADDR_VAR 0 3
27535: PUSH
27536: LD_STRING 
27538: ST_TO_ADDR
// hardcore :=  ;
27539: LD_ADDR_VAR 0 4
27543: PUSH
27544: LD_STRING 
27546: ST_TO_ADDR
// for i = 1 to normalCounter do
27547: LD_ADDR_VAR 0 5
27551: PUSH
27552: DOUBLE
27553: LD_INT 1
27555: DEC
27556: ST_TO_ADDR
27557: LD_EXP 68
27561: PUSH
27562: FOR_TO
27563: IFFALSE 27664
// begin tmp := 0 ;
27565: LD_ADDR_VAR 0 2
27569: PUSH
27570: LD_STRING 0
27572: ST_TO_ADDR
// if result [ 1 ] then
27573: LD_VAR 0 1
27577: PUSH
27578: LD_INT 1
27580: ARRAY
27581: IFFALSE 27646
// if result [ 1 ] [ 1 ] = i then
27583: LD_VAR 0 1
27587: PUSH
27588: LD_INT 1
27590: ARRAY
27591: PUSH
27592: LD_INT 1
27594: ARRAY
27595: PUSH
27596: LD_VAR 0 5
27600: EQUAL
27601: IFFALSE 27646
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
27603: LD_ADDR_VAR 0 1
27607: PUSH
27608: LD_VAR 0 1
27612: PPUSH
27613: LD_INT 1
27615: PPUSH
27616: LD_VAR 0 1
27620: PUSH
27621: LD_INT 1
27623: ARRAY
27624: PPUSH
27625: LD_INT 1
27627: PPUSH
27628: CALL_OW 3
27632: PPUSH
27633: CALL_OW 1
27637: ST_TO_ADDR
// tmp := 1 ;
27638: LD_ADDR_VAR 0 2
27642: PUSH
27643: LD_STRING 1
27645: ST_TO_ADDR
// end ; normal := normal & tmp ;
27646: LD_ADDR_VAR 0 3
27650: PUSH
27651: LD_VAR 0 3
27655: PUSH
27656: LD_VAR 0 2
27660: STR
27661: ST_TO_ADDR
// end ;
27662: GO 27562
27664: POP
27665: POP
// for i = 1 to hardcoreCounter do
27666: LD_ADDR_VAR 0 5
27670: PUSH
27671: DOUBLE
27672: LD_INT 1
27674: DEC
27675: ST_TO_ADDR
27676: LD_EXP 69
27680: PUSH
27681: FOR_TO
27682: IFFALSE 27787
// begin tmp := 0 ;
27684: LD_ADDR_VAR 0 2
27688: PUSH
27689: LD_STRING 0
27691: ST_TO_ADDR
// if result [ 2 ] then
27692: LD_VAR 0 1
27696: PUSH
27697: LD_INT 2
27699: ARRAY
27700: IFFALSE 27769
// if result [ 2 ] [ 1 ] = 100 + i then
27702: LD_VAR 0 1
27706: PUSH
27707: LD_INT 2
27709: ARRAY
27710: PUSH
27711: LD_INT 1
27713: ARRAY
27714: PUSH
27715: LD_INT 100
27717: PUSH
27718: LD_VAR 0 5
27722: PLUS
27723: EQUAL
27724: IFFALSE 27769
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27726: LD_ADDR_VAR 0 1
27730: PUSH
27731: LD_VAR 0 1
27735: PPUSH
27736: LD_INT 2
27738: PPUSH
27739: LD_VAR 0 1
27743: PUSH
27744: LD_INT 2
27746: ARRAY
27747: PPUSH
27748: LD_INT 1
27750: PPUSH
27751: CALL_OW 3
27755: PPUSH
27756: CALL_OW 1
27760: ST_TO_ADDR
// tmp := 1 ;
27761: LD_ADDR_VAR 0 2
27765: PUSH
27766: LD_STRING 1
27768: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27769: LD_ADDR_VAR 0 4
27773: PUSH
27774: LD_VAR 0 4
27778: PUSH
27779: LD_VAR 0 2
27783: STR
27784: ST_TO_ADDR
// end ;
27785: GO 27681
27787: POP
27788: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
27789: LD_STRING getStreamItemsFromMission("
27791: PUSH
27792: LD_VAR 0 3
27796: STR
27797: PUSH
27798: LD_STRING ","
27800: STR
27801: PUSH
27802: LD_VAR 0 4
27806: STR
27807: PUSH
27808: LD_STRING ")
27810: STR
27811: PPUSH
27812: CALL_OW 559
// end else
27816: GO 27825
// ToLua ( getStreamItemsFromMission("","") ) ;
27818: LD_STRING getStreamItemsFromMission("","")
27820: PPUSH
27821: CALL_OW 559
// end ;
27825: LD_VAR 0 1
27829: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27830: LD_EXP 67
27834: PUSH
27835: LD_EXP 72
27839: AND
27840: IFFALSE 27964
27842: GO 27844
27844: DISABLE
27845: LD_INT 0
27847: PPUSH
27848: PPUSH
// begin enable ;
27849: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27850: LD_ADDR_VAR 0 2
27854: PUSH
27855: LD_INT 22
27857: PUSH
27858: LD_OWVAR 2
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 2
27869: PUSH
27870: LD_INT 34
27872: PUSH
27873: LD_INT 7
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 34
27882: PUSH
27883: LD_INT 45
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 34
27892: PUSH
27893: LD_INT 28
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 34
27902: PUSH
27903: LD_INT 47
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PPUSH
27921: CALL_OW 69
27925: ST_TO_ADDR
// if not tmp then
27926: LD_VAR 0 2
27930: NOT
27931: IFFALSE 27935
// exit ;
27933: GO 27964
// for i in tmp do
27935: LD_ADDR_VAR 0 1
27939: PUSH
27940: LD_VAR 0 2
27944: PUSH
27945: FOR_IN
27946: IFFALSE 27962
// begin SetLives ( i , 0 ) ;
27948: LD_VAR 0 1
27952: PPUSH
27953: LD_INT 0
27955: PPUSH
27956: CALL_OW 234
// end ;
27960: GO 27945
27962: POP
27963: POP
// end ;
27964: PPOPN 2
27966: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27967: LD_EXP 67
27971: PUSH
27972: LD_EXP 73
27976: AND
27977: IFFALSE 28061
27979: GO 27981
27981: DISABLE
27982: LD_INT 0
27984: PPUSH
27985: PPUSH
// begin enable ;
27986: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27987: LD_ADDR_VAR 0 2
27991: PUSH
27992: LD_INT 22
27994: PUSH
27995: LD_OWVAR 2
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 32
28006: PUSH
28007: LD_INT 3
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PPUSH
28018: CALL_OW 69
28022: ST_TO_ADDR
// if not tmp then
28023: LD_VAR 0 2
28027: NOT
28028: IFFALSE 28032
// exit ;
28030: GO 28061
// for i in tmp do
28032: LD_ADDR_VAR 0 1
28036: PUSH
28037: LD_VAR 0 2
28041: PUSH
28042: FOR_IN
28043: IFFALSE 28059
// begin SetLives ( i , 0 ) ;
28045: LD_VAR 0 1
28049: PPUSH
28050: LD_INT 0
28052: PPUSH
28053: CALL_OW 234
// end ;
28057: GO 28042
28059: POP
28060: POP
// end ;
28061: PPOPN 2
28063: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
28064: LD_EXP 67
28068: PUSH
28069: LD_EXP 70
28073: AND
28074: IFFALSE 28167
28076: GO 28078
28078: DISABLE
28079: LD_INT 0
28081: PPUSH
// begin enable ;
28082: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
28083: LD_ADDR_VAR 0 1
28087: PUSH
28088: LD_INT 22
28090: PUSH
28091: LD_OWVAR 2
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 2
28102: PUSH
28103: LD_INT 25
28105: PUSH
28106: LD_INT 5
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 25
28115: PUSH
28116: LD_INT 9
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 25
28125: PUSH
28126: LD_INT 8
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PPUSH
28143: CALL_OW 69
28147: PUSH
28148: FOR_IN
28149: IFFALSE 28165
// begin SetClass ( i , 1 ) ;
28151: LD_VAR 0 1
28155: PPUSH
28156: LD_INT 1
28158: PPUSH
28159: CALL_OW 336
// end ;
28163: GO 28148
28165: POP
28166: POP
// end ;
28167: PPOPN 1
28169: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
28170: LD_EXP 67
28174: PUSH
28175: LD_EXP 71
28179: AND
28180: PUSH
28181: LD_OWVAR 65
28185: PUSH
28186: LD_INT 7
28188: LESS
28189: AND
28190: IFFALSE 28204
28192: GO 28194
28194: DISABLE
// begin enable ;
28195: ENABLE
// game_speed := 7 ;
28196: LD_ADDR_OWVAR 65
28200: PUSH
28201: LD_INT 7
28203: ST_TO_ADDR
// end ;
28204: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
28205: LD_EXP 67
28209: PUSH
28210: LD_EXP 74
28214: AND
28215: IFFALSE 28417
28217: GO 28219
28219: DISABLE
28220: LD_INT 0
28222: PPUSH
28223: PPUSH
28224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28225: LD_ADDR_VAR 0 3
28229: PUSH
28230: LD_INT 81
28232: PUSH
28233: LD_OWVAR 2
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 21
28244: PUSH
28245: LD_INT 1
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PPUSH
28256: CALL_OW 69
28260: ST_TO_ADDR
// if not tmp then
28261: LD_VAR 0 3
28265: NOT
28266: IFFALSE 28270
// exit ;
28268: GO 28417
// if tmp > 5 then
28270: LD_VAR 0 3
28274: PUSH
28275: LD_INT 5
28277: GREATER
28278: IFFALSE 28290
// k := 5 else
28280: LD_ADDR_VAR 0 2
28284: PUSH
28285: LD_INT 5
28287: ST_TO_ADDR
28288: GO 28300
// k := tmp ;
28290: LD_ADDR_VAR 0 2
28294: PUSH
28295: LD_VAR 0 3
28299: ST_TO_ADDR
// for i := 1 to k do
28300: LD_ADDR_VAR 0 1
28304: PUSH
28305: DOUBLE
28306: LD_INT 1
28308: DEC
28309: ST_TO_ADDR
28310: LD_VAR 0 2
28314: PUSH
28315: FOR_TO
28316: IFFALSE 28415
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28318: LD_VAR 0 3
28322: PUSH
28323: LD_VAR 0 1
28327: ARRAY
28328: PPUSH
28329: LD_VAR 0 1
28333: PUSH
28334: LD_INT 4
28336: MOD
28337: PUSH
28338: LD_INT 1
28340: PLUS
28341: PPUSH
28342: CALL_OW 259
28346: PUSH
28347: LD_INT 10
28349: LESS
28350: IFFALSE 28413
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28352: LD_VAR 0 3
28356: PUSH
28357: LD_VAR 0 1
28361: ARRAY
28362: PPUSH
28363: LD_VAR 0 1
28367: PUSH
28368: LD_INT 4
28370: MOD
28371: PUSH
28372: LD_INT 1
28374: PLUS
28375: PPUSH
28376: LD_VAR 0 3
28380: PUSH
28381: LD_VAR 0 1
28385: ARRAY
28386: PPUSH
28387: LD_VAR 0 1
28391: PUSH
28392: LD_INT 4
28394: MOD
28395: PUSH
28396: LD_INT 1
28398: PLUS
28399: PPUSH
28400: CALL_OW 259
28404: PUSH
28405: LD_INT 1
28407: PLUS
28408: PPUSH
28409: CALL_OW 237
28413: GO 28315
28415: POP
28416: POP
// end ;
28417: PPOPN 3
28419: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28420: LD_EXP 67
28424: PUSH
28425: LD_EXP 75
28429: AND
28430: IFFALSE 28450
28432: GO 28434
28434: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28435: LD_INT 4
28437: PPUSH
28438: LD_OWVAR 2
28442: PPUSH
28443: LD_INT 0
28445: PPUSH
28446: CALL_OW 324
28450: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28451: LD_EXP 67
28455: PUSH
28456: LD_EXP 104
28460: AND
28461: IFFALSE 28481
28463: GO 28465
28465: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28466: LD_INT 19
28468: PPUSH
28469: LD_OWVAR 2
28473: PPUSH
28474: LD_INT 0
28476: PPUSH
28477: CALL_OW 324
28481: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28482: LD_EXP 67
28486: PUSH
28487: LD_EXP 76
28491: AND
28492: IFFALSE 28594
28494: GO 28496
28496: DISABLE
28497: LD_INT 0
28499: PPUSH
28500: PPUSH
// begin enable ;
28501: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28502: LD_ADDR_VAR 0 2
28506: PUSH
28507: LD_INT 22
28509: PUSH
28510: LD_OWVAR 2
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 2
28521: PUSH
28522: LD_INT 34
28524: PUSH
28525: LD_INT 11
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 34
28534: PUSH
28535: LD_INT 30
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: LIST
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PPUSH
28551: CALL_OW 69
28555: ST_TO_ADDR
// if not tmp then
28556: LD_VAR 0 2
28560: NOT
28561: IFFALSE 28565
// exit ;
28563: GO 28594
// for i in tmp do
28565: LD_ADDR_VAR 0 1
28569: PUSH
28570: LD_VAR 0 2
28574: PUSH
28575: FOR_IN
28576: IFFALSE 28592
// begin SetLives ( i , 0 ) ;
28578: LD_VAR 0 1
28582: PPUSH
28583: LD_INT 0
28585: PPUSH
28586: CALL_OW 234
// end ;
28590: GO 28575
28592: POP
28593: POP
// end ;
28594: PPOPN 2
28596: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28597: LD_EXP 67
28601: PUSH
28602: LD_EXP 77
28606: AND
28607: IFFALSE 28627
28609: GO 28611
28611: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28612: LD_INT 32
28614: PPUSH
28615: LD_OWVAR 2
28619: PPUSH
28620: LD_INT 0
28622: PPUSH
28623: CALL_OW 324
28627: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28628: LD_EXP 67
28632: PUSH
28633: LD_EXP 78
28637: AND
28638: IFFALSE 28819
28640: GO 28642
28642: DISABLE
28643: LD_INT 0
28645: PPUSH
28646: PPUSH
28647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28648: LD_ADDR_VAR 0 2
28652: PUSH
28653: LD_INT 22
28655: PUSH
28656: LD_OWVAR 2
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 33
28667: PUSH
28668: LD_INT 3
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PPUSH
28679: CALL_OW 69
28683: ST_TO_ADDR
// if not tmp then
28684: LD_VAR 0 2
28688: NOT
28689: IFFALSE 28693
// exit ;
28691: GO 28819
// side := 0 ;
28693: LD_ADDR_VAR 0 3
28697: PUSH
28698: LD_INT 0
28700: ST_TO_ADDR
// for i := 1 to 8 do
28701: LD_ADDR_VAR 0 1
28705: PUSH
28706: DOUBLE
28707: LD_INT 1
28709: DEC
28710: ST_TO_ADDR
28711: LD_INT 8
28713: PUSH
28714: FOR_TO
28715: IFFALSE 28763
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28717: LD_OWVAR 2
28721: PUSH
28722: LD_VAR 0 1
28726: NONEQUAL
28727: PUSH
28728: LD_OWVAR 2
28732: PPUSH
28733: LD_VAR 0 1
28737: PPUSH
28738: CALL_OW 81
28742: PUSH
28743: LD_INT 2
28745: EQUAL
28746: AND
28747: IFFALSE 28761
// begin side := i ;
28749: LD_ADDR_VAR 0 3
28753: PUSH
28754: LD_VAR 0 1
28758: ST_TO_ADDR
// break ;
28759: GO 28763
// end ;
28761: GO 28714
28763: POP
28764: POP
// if not side then
28765: LD_VAR 0 3
28769: NOT
28770: IFFALSE 28774
// exit ;
28772: GO 28819
// for i := 1 to tmp do
28774: LD_ADDR_VAR 0 1
28778: PUSH
28779: DOUBLE
28780: LD_INT 1
28782: DEC
28783: ST_TO_ADDR
28784: LD_VAR 0 2
28788: PUSH
28789: FOR_TO
28790: IFFALSE 28817
// if Prob ( 60 ) then
28792: LD_INT 60
28794: PPUSH
28795: CALL_OW 13
28799: IFFALSE 28815
// SetSide ( i , side ) ;
28801: LD_VAR 0 1
28805: PPUSH
28806: LD_VAR 0 3
28810: PPUSH
28811: CALL_OW 235
28815: GO 28789
28817: POP
28818: POP
// end ;
28819: PPOPN 3
28821: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28822: LD_EXP 67
28826: PUSH
28827: LD_EXP 80
28831: AND
28832: IFFALSE 28951
28834: GO 28836
28836: DISABLE
28837: LD_INT 0
28839: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28840: LD_ADDR_VAR 0 1
28844: PUSH
28845: LD_INT 22
28847: PUSH
28848: LD_OWVAR 2
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 21
28859: PUSH
28860: LD_INT 1
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 3
28869: PUSH
28870: LD_INT 23
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: LIST
28888: PPUSH
28889: CALL_OW 69
28893: PUSH
28894: FOR_IN
28895: IFFALSE 28949
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28897: LD_VAR 0 1
28901: PPUSH
28902: CALL_OW 257
28906: PUSH
28907: LD_INT 1
28909: PUSH
28910: LD_INT 2
28912: PUSH
28913: LD_INT 3
28915: PUSH
28916: LD_INT 4
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: IN
28925: IFFALSE 28947
// SetClass ( un , rand ( 1 , 4 ) ) ;
28927: LD_VAR 0 1
28931: PPUSH
28932: LD_INT 1
28934: PPUSH
28935: LD_INT 4
28937: PPUSH
28938: CALL_OW 12
28942: PPUSH
28943: CALL_OW 336
28947: GO 28894
28949: POP
28950: POP
// end ;
28951: PPOPN 1
28953: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28954: LD_EXP 67
28958: PUSH
28959: LD_EXP 79
28963: AND
28964: IFFALSE 29043
28966: GO 28968
28968: DISABLE
28969: LD_INT 0
28971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28972: LD_ADDR_VAR 0 1
28976: PUSH
28977: LD_INT 22
28979: PUSH
28980: LD_OWVAR 2
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 21
28991: PUSH
28992: LD_INT 3
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PPUSH
29003: CALL_OW 69
29007: ST_TO_ADDR
// if not tmp then
29008: LD_VAR 0 1
29012: NOT
29013: IFFALSE 29017
// exit ;
29015: GO 29043
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
29017: LD_VAR 0 1
29021: PUSH
29022: LD_INT 1
29024: PPUSH
29025: LD_VAR 0 1
29029: PPUSH
29030: CALL_OW 12
29034: ARRAY
29035: PPUSH
29036: LD_INT 100
29038: PPUSH
29039: CALL_OW 234
// end ;
29043: PPOPN 1
29045: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
29046: LD_EXP 67
29050: PUSH
29051: LD_EXP 81
29055: AND
29056: IFFALSE 29154
29058: GO 29060
29060: DISABLE
29061: LD_INT 0
29063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29064: LD_ADDR_VAR 0 1
29068: PUSH
29069: LD_INT 22
29071: PUSH
29072: LD_OWVAR 2
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 21
29083: PUSH
29084: LD_INT 1
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PPUSH
29095: CALL_OW 69
29099: ST_TO_ADDR
// if not tmp then
29100: LD_VAR 0 1
29104: NOT
29105: IFFALSE 29109
// exit ;
29107: GO 29154
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
29109: LD_VAR 0 1
29113: PUSH
29114: LD_INT 1
29116: PPUSH
29117: LD_VAR 0 1
29121: PPUSH
29122: CALL_OW 12
29126: ARRAY
29127: PPUSH
29128: LD_INT 1
29130: PPUSH
29131: LD_INT 4
29133: PPUSH
29134: CALL_OW 12
29138: PPUSH
29139: LD_INT 3000
29141: PPUSH
29142: LD_INT 9000
29144: PPUSH
29145: CALL_OW 12
29149: PPUSH
29150: CALL_OW 492
// end ;
29154: PPOPN 1
29156: END
// every 0 0$1 trigger StreamModeActive and sDepot do
29157: LD_EXP 67
29161: PUSH
29162: LD_EXP 82
29166: AND
29167: IFFALSE 29187
29169: GO 29171
29171: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
29172: LD_INT 1
29174: PPUSH
29175: LD_OWVAR 2
29179: PPUSH
29180: LD_INT 0
29182: PPUSH
29183: CALL_OW 324
29187: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
29188: LD_EXP 67
29192: PUSH
29193: LD_EXP 83
29197: AND
29198: IFFALSE 29281
29200: GO 29202
29202: DISABLE
29203: LD_INT 0
29205: PPUSH
29206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
29207: LD_ADDR_VAR 0 2
29211: PUSH
29212: LD_INT 22
29214: PUSH
29215: LD_OWVAR 2
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 21
29226: PUSH
29227: LD_INT 3
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PPUSH
29238: CALL_OW 69
29242: ST_TO_ADDR
// if not tmp then
29243: LD_VAR 0 2
29247: NOT
29248: IFFALSE 29252
// exit ;
29250: GO 29281
// for i in tmp do
29252: LD_ADDR_VAR 0 1
29256: PUSH
29257: LD_VAR 0 2
29261: PUSH
29262: FOR_IN
29263: IFFALSE 29279
// SetBLevel ( i , 10 ) ;
29265: LD_VAR 0 1
29269: PPUSH
29270: LD_INT 10
29272: PPUSH
29273: CALL_OW 241
29277: GO 29262
29279: POP
29280: POP
// end ;
29281: PPOPN 2
29283: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29284: LD_EXP 67
29288: PUSH
29289: LD_EXP 84
29293: AND
29294: IFFALSE 29405
29296: GO 29298
29298: DISABLE
29299: LD_INT 0
29301: PPUSH
29302: PPUSH
29303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29304: LD_ADDR_VAR 0 3
29308: PUSH
29309: LD_INT 22
29311: PUSH
29312: LD_OWVAR 2
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 25
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PPUSH
29335: CALL_OW 69
29339: ST_TO_ADDR
// if not tmp then
29340: LD_VAR 0 3
29344: NOT
29345: IFFALSE 29349
// exit ;
29347: GO 29405
// un := tmp [ rand ( 1 , tmp ) ] ;
29349: LD_ADDR_VAR 0 2
29353: PUSH
29354: LD_VAR 0 3
29358: PUSH
29359: LD_INT 1
29361: PPUSH
29362: LD_VAR 0 3
29366: PPUSH
29367: CALL_OW 12
29371: ARRAY
29372: ST_TO_ADDR
// if Crawls ( un ) then
29373: LD_VAR 0 2
29377: PPUSH
29378: CALL_OW 318
29382: IFFALSE 29393
// ComWalk ( un ) ;
29384: LD_VAR 0 2
29388: PPUSH
29389: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29393: LD_VAR 0 2
29397: PPUSH
29398: LD_INT 5
29400: PPUSH
29401: CALL_OW 336
// end ;
29405: PPOPN 3
29407: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
29408: LD_EXP 67
29412: PUSH
29413: LD_EXP 85
29417: AND
29418: PUSH
29419: LD_OWVAR 67
29423: PUSH
29424: LD_INT 3
29426: LESS
29427: AND
29428: IFFALSE 29447
29430: GO 29432
29432: DISABLE
// Difficulty := Difficulty + 1 ;
29433: LD_ADDR_OWVAR 67
29437: PUSH
29438: LD_OWVAR 67
29442: PUSH
29443: LD_INT 1
29445: PLUS
29446: ST_TO_ADDR
29447: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29448: LD_EXP 67
29452: PUSH
29453: LD_EXP 86
29457: AND
29458: IFFALSE 29561
29460: GO 29462
29462: DISABLE
29463: LD_INT 0
29465: PPUSH
// begin for i := 1 to 5 do
29466: LD_ADDR_VAR 0 1
29470: PUSH
29471: DOUBLE
29472: LD_INT 1
29474: DEC
29475: ST_TO_ADDR
29476: LD_INT 5
29478: PUSH
29479: FOR_TO
29480: IFFALSE 29559
// begin uc_nation := nation_nature ;
29482: LD_ADDR_OWVAR 21
29486: PUSH
29487: LD_INT 0
29489: ST_TO_ADDR
// uc_side := 0 ;
29490: LD_ADDR_OWVAR 20
29494: PUSH
29495: LD_INT 0
29497: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29498: LD_ADDR_OWVAR 29
29502: PUSH
29503: LD_INT 12
29505: PUSH
29506: LD_INT 12
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: ST_TO_ADDR
// hc_agressivity := 20 ;
29513: LD_ADDR_OWVAR 35
29517: PUSH
29518: LD_INT 20
29520: ST_TO_ADDR
// hc_class := class_tiger ;
29521: LD_ADDR_OWVAR 28
29525: PUSH
29526: LD_INT 14
29528: ST_TO_ADDR
// hc_gallery :=  ;
29529: LD_ADDR_OWVAR 33
29533: PUSH
29534: LD_STRING 
29536: ST_TO_ADDR
// hc_name :=  ;
29537: LD_ADDR_OWVAR 26
29541: PUSH
29542: LD_STRING 
29544: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29545: CALL_OW 44
29549: PPUSH
29550: LD_INT 0
29552: PPUSH
29553: CALL_OW 51
// end ;
29557: GO 29479
29559: POP
29560: POP
// end ;
29561: PPOPN 1
29563: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29564: LD_EXP 67
29568: PUSH
29569: LD_EXP 87
29573: AND
29574: IFFALSE 29583
29576: GO 29578
29578: DISABLE
// StreamSibBomb ;
29579: CALL 29584 0 0
29583: END
// export function StreamSibBomb ; var i , x , y ; begin
29584: LD_INT 0
29586: PPUSH
29587: PPUSH
29588: PPUSH
29589: PPUSH
// result := false ;
29590: LD_ADDR_VAR 0 1
29594: PUSH
29595: LD_INT 0
29597: ST_TO_ADDR
// for i := 1 to 16 do
29598: LD_ADDR_VAR 0 2
29602: PUSH
29603: DOUBLE
29604: LD_INT 1
29606: DEC
29607: ST_TO_ADDR
29608: LD_INT 16
29610: PUSH
29611: FOR_TO
29612: IFFALSE 29811
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29614: LD_ADDR_VAR 0 3
29618: PUSH
29619: LD_INT 10
29621: PUSH
29622: LD_INT 20
29624: PUSH
29625: LD_INT 30
29627: PUSH
29628: LD_INT 40
29630: PUSH
29631: LD_INT 50
29633: PUSH
29634: LD_INT 60
29636: PUSH
29637: LD_INT 70
29639: PUSH
29640: LD_INT 80
29642: PUSH
29643: LD_INT 90
29645: PUSH
29646: LD_INT 100
29648: PUSH
29649: LD_INT 110
29651: PUSH
29652: LD_INT 120
29654: PUSH
29655: LD_INT 130
29657: PUSH
29658: LD_INT 140
29660: PUSH
29661: LD_INT 150
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 1
29683: PPUSH
29684: LD_INT 15
29686: PPUSH
29687: CALL_OW 12
29691: ARRAY
29692: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29693: LD_ADDR_VAR 0 4
29697: PUSH
29698: LD_INT 10
29700: PUSH
29701: LD_INT 20
29703: PUSH
29704: LD_INT 30
29706: PUSH
29707: LD_INT 40
29709: PUSH
29710: LD_INT 50
29712: PUSH
29713: LD_INT 60
29715: PUSH
29716: LD_INT 70
29718: PUSH
29719: LD_INT 80
29721: PUSH
29722: LD_INT 90
29724: PUSH
29725: LD_INT 100
29727: PUSH
29728: LD_INT 110
29730: PUSH
29731: LD_INT 120
29733: PUSH
29734: LD_INT 130
29736: PUSH
29737: LD_INT 140
29739: PUSH
29740: LD_INT 150
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 1
29762: PPUSH
29763: LD_INT 15
29765: PPUSH
29766: CALL_OW 12
29770: ARRAY
29771: ST_TO_ADDR
// if ValidHex ( x , y ) then
29772: LD_VAR 0 3
29776: PPUSH
29777: LD_VAR 0 4
29781: PPUSH
29782: CALL_OW 488
29786: IFFALSE 29809
// begin result := [ x , y ] ;
29788: LD_ADDR_VAR 0 1
29792: PUSH
29793: LD_VAR 0 3
29797: PUSH
29798: LD_VAR 0 4
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: ST_TO_ADDR
// break ;
29807: GO 29811
// end ; end ;
29809: GO 29611
29811: POP
29812: POP
// if result then
29813: LD_VAR 0 1
29817: IFFALSE 29877
// begin ToLua ( playSibBomb() ) ;
29819: LD_STRING playSibBomb()
29821: PPUSH
29822: CALL_OW 559
// wait ( 0 0$14 ) ;
29826: LD_INT 490
29828: PPUSH
29829: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29833: LD_VAR 0 1
29837: PUSH
29838: LD_INT 1
29840: ARRAY
29841: PPUSH
29842: LD_VAR 0 1
29846: PUSH
29847: LD_INT 2
29849: ARRAY
29850: PPUSH
29851: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29855: LD_VAR 0 1
29859: PUSH
29860: LD_INT 1
29862: ARRAY
29863: PPUSH
29864: LD_VAR 0 1
29868: PUSH
29869: LD_INT 2
29871: ARRAY
29872: PPUSH
29873: CALL_OW 429
// end ; end ;
29877: LD_VAR 0 1
29881: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29882: LD_EXP 67
29886: PUSH
29887: LD_EXP 89
29891: AND
29892: IFFALSE 29904
29894: GO 29896
29896: DISABLE
// YouLost (  ) ;
29897: LD_STRING 
29899: PPUSH
29900: CALL_OW 104
29904: END
// every 0 0$1 trigger StreamModeActive and sFog do
29905: LD_EXP 67
29909: PUSH
29910: LD_EXP 88
29914: AND
29915: IFFALSE 29929
29917: GO 29919
29919: DISABLE
// FogOff ( your_side ) ;
29920: LD_OWVAR 2
29924: PPUSH
29925: CALL_OW 344
29929: END
// every 0 0$1 trigger StreamModeActive and sSun do
29930: LD_EXP 67
29934: PUSH
29935: LD_EXP 90
29939: AND
29940: IFFALSE 29968
29942: GO 29944
29944: DISABLE
// begin solar_recharge_percent := 0 ;
29945: LD_ADDR_OWVAR 79
29949: PUSH
29950: LD_INT 0
29952: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29953: LD_INT 10500
29955: PPUSH
29956: CALL_OW 67
// solar_recharge_percent := 100 ;
29960: LD_ADDR_OWVAR 79
29964: PUSH
29965: LD_INT 100
29967: ST_TO_ADDR
// end ;
29968: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29969: LD_EXP 67
29973: PUSH
29974: LD_EXP 91
29978: AND
29979: IFFALSE 30218
29981: GO 29983
29983: DISABLE
29984: LD_INT 0
29986: PPUSH
29987: PPUSH
29988: PPUSH
// begin tmp := [ ] ;
29989: LD_ADDR_VAR 0 3
29993: PUSH
29994: EMPTY
29995: ST_TO_ADDR
// for i := 1 to 6 do
29996: LD_ADDR_VAR 0 1
30000: PUSH
30001: DOUBLE
30002: LD_INT 1
30004: DEC
30005: ST_TO_ADDR
30006: LD_INT 6
30008: PUSH
30009: FOR_TO
30010: IFFALSE 30115
// begin uc_nation := nation_nature ;
30012: LD_ADDR_OWVAR 21
30016: PUSH
30017: LD_INT 0
30019: ST_TO_ADDR
// uc_side := 0 ;
30020: LD_ADDR_OWVAR 20
30024: PUSH
30025: LD_INT 0
30027: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
30028: LD_ADDR_OWVAR 29
30032: PUSH
30033: LD_INT 12
30035: PUSH
30036: LD_INT 12
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: ST_TO_ADDR
// hc_agressivity := 20 ;
30043: LD_ADDR_OWVAR 35
30047: PUSH
30048: LD_INT 20
30050: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
30051: LD_ADDR_OWVAR 28
30055: PUSH
30056: LD_INT 17
30058: ST_TO_ADDR
// hc_gallery :=  ;
30059: LD_ADDR_OWVAR 33
30063: PUSH
30064: LD_STRING 
30066: ST_TO_ADDR
// hc_name :=  ;
30067: LD_ADDR_OWVAR 26
30071: PUSH
30072: LD_STRING 
30074: ST_TO_ADDR
// un := CreateHuman ;
30075: LD_ADDR_VAR 0 2
30079: PUSH
30080: CALL_OW 44
30084: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
30085: LD_VAR 0 2
30089: PPUSH
30090: LD_INT 1
30092: PPUSH
30093: CALL_OW 51
// tmp := tmp ^ un ;
30097: LD_ADDR_VAR 0 3
30101: PUSH
30102: LD_VAR 0 3
30106: PUSH
30107: LD_VAR 0 2
30111: ADD
30112: ST_TO_ADDR
// end ;
30113: GO 30009
30115: POP
30116: POP
// repeat wait ( 0 0$1 ) ;
30117: LD_INT 35
30119: PPUSH
30120: CALL_OW 67
// for un in tmp do
30124: LD_ADDR_VAR 0 2
30128: PUSH
30129: LD_VAR 0 3
30133: PUSH
30134: FOR_IN
30135: IFFALSE 30209
// begin if IsDead ( un ) then
30137: LD_VAR 0 2
30141: PPUSH
30142: CALL_OW 301
30146: IFFALSE 30166
// begin tmp := tmp diff un ;
30148: LD_ADDR_VAR 0 3
30152: PUSH
30153: LD_VAR 0 3
30157: PUSH
30158: LD_VAR 0 2
30162: DIFF
30163: ST_TO_ADDR
// continue ;
30164: GO 30134
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
30166: LD_VAR 0 2
30170: PPUSH
30171: LD_INT 3
30173: PUSH
30174: LD_INT 22
30176: PUSH
30177: LD_INT 0
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PPUSH
30188: CALL_OW 69
30192: PPUSH
30193: LD_VAR 0 2
30197: PPUSH
30198: CALL_OW 74
30202: PPUSH
30203: CALL_OW 115
// end ;
30207: GO 30134
30209: POP
30210: POP
// until not tmp ;
30211: LD_VAR 0 3
30215: NOT
30216: IFFALSE 30117
// end ;
30218: PPOPN 3
30220: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30221: LD_EXP 67
30225: PUSH
30226: LD_EXP 92
30230: AND
30231: IFFALSE 30285
30233: GO 30235
30235: DISABLE
// begin ToLua ( displayTroll(); ) ;
30236: LD_STRING displayTroll();
30238: PPUSH
30239: CALL_OW 559
// wait ( 3 3$00 ) ;
30243: LD_INT 6300
30245: PPUSH
30246: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30250: LD_STRING hideTroll();
30252: PPUSH
30253: CALL_OW 559
// wait ( 1 1$00 ) ;
30257: LD_INT 2100
30259: PPUSH
30260: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30264: LD_STRING displayTroll();
30266: PPUSH
30267: CALL_OW 559
// wait ( 1 1$00 ) ;
30271: LD_INT 2100
30273: PPUSH
30274: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30278: LD_STRING hideTroll();
30280: PPUSH
30281: CALL_OW 559
// end ;
30285: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30286: LD_EXP 67
30290: PUSH
30291: LD_EXP 93
30295: AND
30296: IFFALSE 30359
30298: GO 30300
30300: DISABLE
30301: LD_INT 0
30303: PPUSH
// begin p := 0 ;
30304: LD_ADDR_VAR 0 1
30308: PUSH
30309: LD_INT 0
30311: ST_TO_ADDR
// repeat game_speed := 1 ;
30312: LD_ADDR_OWVAR 65
30316: PUSH
30317: LD_INT 1
30319: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30320: LD_INT 35
30322: PPUSH
30323: CALL_OW 67
// p := p + 1 ;
30327: LD_ADDR_VAR 0 1
30331: PUSH
30332: LD_VAR 0 1
30336: PUSH
30337: LD_INT 1
30339: PLUS
30340: ST_TO_ADDR
// until p >= 60 ;
30341: LD_VAR 0 1
30345: PUSH
30346: LD_INT 60
30348: GREATEREQUAL
30349: IFFALSE 30312
// game_speed := 4 ;
30351: LD_ADDR_OWVAR 65
30355: PUSH
30356: LD_INT 4
30358: ST_TO_ADDR
// end ;
30359: PPOPN 1
30361: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30362: LD_EXP 67
30366: PUSH
30367: LD_EXP 94
30371: AND
30372: IFFALSE 30518
30374: GO 30376
30376: DISABLE
30377: LD_INT 0
30379: PPUSH
30380: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30381: LD_ADDR_VAR 0 1
30385: PUSH
30386: LD_INT 22
30388: PUSH
30389: LD_OWVAR 2
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: LD_INT 30
30403: PUSH
30404: LD_INT 0
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 30
30413: PUSH
30414: LD_INT 1
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: LIST
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PPUSH
30430: CALL_OW 69
30434: ST_TO_ADDR
// if not depot then
30435: LD_VAR 0 1
30439: NOT
30440: IFFALSE 30444
// exit ;
30442: GO 30518
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30444: LD_ADDR_VAR 0 2
30448: PUSH
30449: LD_VAR 0 1
30453: PUSH
30454: LD_INT 1
30456: PPUSH
30457: LD_VAR 0 1
30461: PPUSH
30462: CALL_OW 12
30466: ARRAY
30467: PPUSH
30468: CALL_OW 274
30472: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30473: LD_VAR 0 2
30477: PPUSH
30478: LD_INT 1
30480: PPUSH
30481: LD_INT 0
30483: PPUSH
30484: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30488: LD_VAR 0 2
30492: PPUSH
30493: LD_INT 2
30495: PPUSH
30496: LD_INT 0
30498: PPUSH
30499: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30503: LD_VAR 0 2
30507: PPUSH
30508: LD_INT 3
30510: PPUSH
30511: LD_INT 0
30513: PPUSH
30514: CALL_OW 277
// end ;
30518: PPOPN 2
30520: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30521: LD_EXP 67
30525: PUSH
30526: LD_EXP 95
30530: AND
30531: IFFALSE 30628
30533: GO 30535
30535: DISABLE
30536: LD_INT 0
30538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30539: LD_ADDR_VAR 0 1
30543: PUSH
30544: LD_INT 22
30546: PUSH
30547: LD_OWVAR 2
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 21
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 3
30568: PUSH
30569: LD_INT 23
30571: PUSH
30572: LD_INT 0
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: LIST
30587: PPUSH
30588: CALL_OW 69
30592: ST_TO_ADDR
// if not tmp then
30593: LD_VAR 0 1
30597: NOT
30598: IFFALSE 30602
// exit ;
30600: GO 30628
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30602: LD_VAR 0 1
30606: PUSH
30607: LD_INT 1
30609: PPUSH
30610: LD_VAR 0 1
30614: PPUSH
30615: CALL_OW 12
30619: ARRAY
30620: PPUSH
30621: LD_INT 200
30623: PPUSH
30624: CALL_OW 234
// end ;
30628: PPOPN 1
30630: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30631: LD_EXP 67
30635: PUSH
30636: LD_EXP 96
30640: AND
30641: IFFALSE 30720
30643: GO 30645
30645: DISABLE
30646: LD_INT 0
30648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30649: LD_ADDR_VAR 0 1
30653: PUSH
30654: LD_INT 22
30656: PUSH
30657: LD_OWVAR 2
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 21
30668: PUSH
30669: LD_INT 2
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PPUSH
30680: CALL_OW 69
30684: ST_TO_ADDR
// if not tmp then
30685: LD_VAR 0 1
30689: NOT
30690: IFFALSE 30694
// exit ;
30692: GO 30720
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30694: LD_VAR 0 1
30698: PUSH
30699: LD_INT 1
30701: PPUSH
30702: LD_VAR 0 1
30706: PPUSH
30707: CALL_OW 12
30711: ARRAY
30712: PPUSH
30713: LD_INT 60
30715: PPUSH
30716: CALL_OW 234
// end ;
30720: PPOPN 1
30722: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30723: LD_EXP 67
30727: PUSH
30728: LD_EXP 97
30732: AND
30733: IFFALSE 30832
30735: GO 30737
30737: DISABLE
30738: LD_INT 0
30740: PPUSH
30741: PPUSH
// begin enable ;
30742: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30743: LD_ADDR_VAR 0 1
30747: PUSH
30748: LD_INT 22
30750: PUSH
30751: LD_OWVAR 2
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 61
30762: PUSH
30763: EMPTY
30764: LIST
30765: PUSH
30766: LD_INT 33
30768: PUSH
30769: LD_INT 2
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: LIST
30780: PPUSH
30781: CALL_OW 69
30785: ST_TO_ADDR
// if not tmp then
30786: LD_VAR 0 1
30790: NOT
30791: IFFALSE 30795
// exit ;
30793: GO 30832
// for i in tmp do
30795: LD_ADDR_VAR 0 2
30799: PUSH
30800: LD_VAR 0 1
30804: PUSH
30805: FOR_IN
30806: IFFALSE 30830
// if IsControledBy ( i ) then
30808: LD_VAR 0 2
30812: PPUSH
30813: CALL_OW 312
30817: IFFALSE 30828
// ComUnlink ( i ) ;
30819: LD_VAR 0 2
30823: PPUSH
30824: CALL_OW 136
30828: GO 30805
30830: POP
30831: POP
// end ;
30832: PPOPN 2
30834: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30835: LD_EXP 67
30839: PUSH
30840: LD_EXP 98
30844: AND
30845: IFFALSE 30985
30847: GO 30849
30849: DISABLE
30850: LD_INT 0
30852: PPUSH
30853: PPUSH
// begin ToLua ( displayPowell(); ) ;
30854: LD_STRING displayPowell();
30856: PPUSH
30857: CALL_OW 559
// uc_side := 0 ;
30861: LD_ADDR_OWVAR 20
30865: PUSH
30866: LD_INT 0
30868: ST_TO_ADDR
// uc_nation := 2 ;
30869: LD_ADDR_OWVAR 21
30873: PUSH
30874: LD_INT 2
30876: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30877: LD_ADDR_OWVAR 37
30881: PUSH
30882: LD_INT 14
30884: ST_TO_ADDR
// vc_engine := engine_siberite ;
30885: LD_ADDR_OWVAR 39
30889: PUSH
30890: LD_INT 3
30892: ST_TO_ADDR
// vc_control := control_apeman ;
30893: LD_ADDR_OWVAR 38
30897: PUSH
30898: LD_INT 5
30900: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30901: LD_ADDR_OWVAR 40
30905: PUSH
30906: LD_INT 29
30908: ST_TO_ADDR
// un := CreateVehicle ;
30909: LD_ADDR_VAR 0 2
30913: PUSH
30914: CALL_OW 45
30918: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30919: LD_VAR 0 2
30923: PPUSH
30924: LD_INT 1
30926: PPUSH
30927: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30931: LD_INT 35
30933: PPUSH
30934: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30938: LD_VAR 0 2
30942: PPUSH
30943: LD_INT 22
30945: PUSH
30946: LD_OWVAR 2
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PPUSH
30955: CALL_OW 69
30959: PPUSH
30960: LD_VAR 0 2
30964: PPUSH
30965: CALL_OW 74
30969: PPUSH
30970: CALL_OW 115
// until IsDead ( un ) ;
30974: LD_VAR 0 2
30978: PPUSH
30979: CALL_OW 301
30983: IFFALSE 30931
// end ;
30985: PPOPN 2
30987: END
// every 0 0$1 trigger StreamModeActive and sStu do
30988: LD_EXP 67
30992: PUSH
30993: LD_EXP 106
30997: AND
30998: IFFALSE 31014
31000: GO 31002
31002: DISABLE
// begin ToLua ( displayStucuk(); ) ;
31003: LD_STRING displayStucuk();
31005: PPUSH
31006: CALL_OW 559
// ResetFog ;
31010: CALL_OW 335
// end ;
31014: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
31015: LD_EXP 67
31019: PUSH
31020: LD_EXP 99
31024: AND
31025: IFFALSE 31166
31027: GO 31029
31029: DISABLE
31030: LD_INT 0
31032: PPUSH
31033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31034: LD_ADDR_VAR 0 2
31038: PUSH
31039: LD_INT 22
31041: PUSH
31042: LD_OWVAR 2
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 21
31053: PUSH
31054: LD_INT 1
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PPUSH
31065: CALL_OW 69
31069: ST_TO_ADDR
// if not tmp then
31070: LD_VAR 0 2
31074: NOT
31075: IFFALSE 31079
// exit ;
31077: GO 31166
// un := tmp [ rand ( 1 , tmp ) ] ;
31079: LD_ADDR_VAR 0 1
31083: PUSH
31084: LD_VAR 0 2
31088: PUSH
31089: LD_INT 1
31091: PPUSH
31092: LD_VAR 0 2
31096: PPUSH
31097: CALL_OW 12
31101: ARRAY
31102: ST_TO_ADDR
// SetSide ( un , 0 ) ;
31103: LD_VAR 0 1
31107: PPUSH
31108: LD_INT 0
31110: PPUSH
31111: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
31115: LD_VAR 0 1
31119: PPUSH
31120: LD_OWVAR 3
31124: PUSH
31125: LD_VAR 0 1
31129: DIFF
31130: PPUSH
31131: LD_VAR 0 1
31135: PPUSH
31136: CALL_OW 74
31140: PPUSH
31141: CALL_OW 115
// wait ( 0 0$20 ) ;
31145: LD_INT 700
31147: PPUSH
31148: CALL_OW 67
// SetSide ( un , your_side ) ;
31152: LD_VAR 0 1
31156: PPUSH
31157: LD_OWVAR 2
31161: PPUSH
31162: CALL_OW 235
// end ;
31166: PPOPN 2
31168: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
31169: LD_EXP 67
31173: PUSH
31174: LD_EXP 100
31178: AND
31179: IFFALSE 31285
31181: GO 31183
31183: DISABLE
31184: LD_INT 0
31186: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31187: LD_ADDR_VAR 0 1
31191: PUSH
31192: LD_INT 22
31194: PUSH
31195: LD_OWVAR 2
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: LD_INT 30
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 30
31219: PUSH
31220: LD_INT 1
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: LIST
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PPUSH
31236: CALL_OW 69
31240: ST_TO_ADDR
// if not depot then
31241: LD_VAR 0 1
31245: NOT
31246: IFFALSE 31250
// exit ;
31248: GO 31285
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31250: LD_VAR 0 1
31254: PUSH
31255: LD_INT 1
31257: ARRAY
31258: PPUSH
31259: CALL_OW 250
31263: PPUSH
31264: LD_VAR 0 1
31268: PUSH
31269: LD_INT 1
31271: ARRAY
31272: PPUSH
31273: CALL_OW 251
31277: PPUSH
31278: LD_INT 70
31280: PPUSH
31281: CALL_OW 495
// end ;
31285: PPOPN 1
31287: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31288: LD_EXP 67
31292: PUSH
31293: LD_EXP 101
31297: AND
31298: IFFALSE 31509
31300: GO 31302
31302: DISABLE
31303: LD_INT 0
31305: PPUSH
31306: PPUSH
31307: PPUSH
31308: PPUSH
31309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31310: LD_ADDR_VAR 0 5
31314: PUSH
31315: LD_INT 22
31317: PUSH
31318: LD_OWVAR 2
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 21
31329: PUSH
31330: LD_INT 1
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PPUSH
31341: CALL_OW 69
31345: ST_TO_ADDR
// if not tmp then
31346: LD_VAR 0 5
31350: NOT
31351: IFFALSE 31355
// exit ;
31353: GO 31509
// for i in tmp do
31355: LD_ADDR_VAR 0 1
31359: PUSH
31360: LD_VAR 0 5
31364: PUSH
31365: FOR_IN
31366: IFFALSE 31507
// begin d := rand ( 0 , 5 ) ;
31368: LD_ADDR_VAR 0 4
31372: PUSH
31373: LD_INT 0
31375: PPUSH
31376: LD_INT 5
31378: PPUSH
31379: CALL_OW 12
31383: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31384: LD_ADDR_VAR 0 2
31388: PUSH
31389: LD_VAR 0 1
31393: PPUSH
31394: CALL_OW 250
31398: PPUSH
31399: LD_VAR 0 4
31403: PPUSH
31404: LD_INT 3
31406: PPUSH
31407: LD_INT 12
31409: PPUSH
31410: CALL_OW 12
31414: PPUSH
31415: CALL_OW 272
31419: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31420: LD_ADDR_VAR 0 3
31424: PUSH
31425: LD_VAR 0 1
31429: PPUSH
31430: CALL_OW 251
31434: PPUSH
31435: LD_VAR 0 4
31439: PPUSH
31440: LD_INT 3
31442: PPUSH
31443: LD_INT 12
31445: PPUSH
31446: CALL_OW 12
31450: PPUSH
31451: CALL_OW 273
31455: ST_TO_ADDR
// if ValidHex ( x , y ) then
31456: LD_VAR 0 2
31460: PPUSH
31461: LD_VAR 0 3
31465: PPUSH
31466: CALL_OW 488
31470: IFFALSE 31505
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31472: LD_VAR 0 1
31476: PPUSH
31477: LD_VAR 0 2
31481: PPUSH
31482: LD_VAR 0 3
31486: PPUSH
31487: LD_INT 3
31489: PPUSH
31490: LD_INT 6
31492: PPUSH
31493: CALL_OW 12
31497: PPUSH
31498: LD_INT 1
31500: PPUSH
31501: CALL_OW 483
// end ;
31505: GO 31365
31507: POP
31508: POP
// end ;
31509: PPOPN 5
31511: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31512: LD_EXP 67
31516: PUSH
31517: LD_EXP 102
31521: AND
31522: IFFALSE 31616
31524: GO 31526
31526: DISABLE
31527: LD_INT 0
31529: PPUSH
31530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31531: LD_ADDR_VAR 0 2
31535: PUSH
31536: LD_INT 22
31538: PUSH
31539: LD_OWVAR 2
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 32
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 21
31560: PUSH
31561: LD_INT 2
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: LIST
31572: PPUSH
31573: CALL_OW 69
31577: ST_TO_ADDR
// if not tmp then
31578: LD_VAR 0 2
31582: NOT
31583: IFFALSE 31587
// exit ;
31585: GO 31616
// for i in tmp do
31587: LD_ADDR_VAR 0 1
31591: PUSH
31592: LD_VAR 0 2
31596: PUSH
31597: FOR_IN
31598: IFFALSE 31614
// SetFuel ( i , 0 ) ;
31600: LD_VAR 0 1
31604: PPUSH
31605: LD_INT 0
31607: PPUSH
31608: CALL_OW 240
31612: GO 31597
31614: POP
31615: POP
// end ;
31616: PPOPN 2
31618: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31619: LD_EXP 67
31623: PUSH
31624: LD_EXP 103
31628: AND
31629: IFFALSE 31695
31631: GO 31633
31633: DISABLE
31634: LD_INT 0
31636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31637: LD_ADDR_VAR 0 1
31641: PUSH
31642: LD_INT 22
31644: PUSH
31645: LD_OWVAR 2
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 30
31656: PUSH
31657: LD_INT 29
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PPUSH
31668: CALL_OW 69
31672: ST_TO_ADDR
// if not tmp then
31673: LD_VAR 0 1
31677: NOT
31678: IFFALSE 31682
// exit ;
31680: GO 31695
// DestroyUnit ( tmp [ 1 ] ) ;
31682: LD_VAR 0 1
31686: PUSH
31687: LD_INT 1
31689: ARRAY
31690: PPUSH
31691: CALL_OW 65
// end ;
31695: PPOPN 1
31697: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31698: LD_EXP 67
31702: PUSH
31703: LD_EXP 105
31707: AND
31708: IFFALSE 31837
31710: GO 31712
31712: DISABLE
31713: LD_INT 0
31715: PPUSH
// begin uc_side := 0 ;
31716: LD_ADDR_OWVAR 20
31720: PUSH
31721: LD_INT 0
31723: ST_TO_ADDR
// uc_nation := nation_arabian ;
31724: LD_ADDR_OWVAR 21
31728: PUSH
31729: LD_INT 2
31731: ST_TO_ADDR
// hc_gallery :=  ;
31732: LD_ADDR_OWVAR 33
31736: PUSH
31737: LD_STRING 
31739: ST_TO_ADDR
// hc_name :=  ;
31740: LD_ADDR_OWVAR 26
31744: PUSH
31745: LD_STRING 
31747: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31748: LD_INT 1
31750: PPUSH
31751: LD_INT 11
31753: PPUSH
31754: LD_INT 10
31756: PPUSH
31757: CALL_OW 380
// un := CreateHuman ;
31761: LD_ADDR_VAR 0 1
31765: PUSH
31766: CALL_OW 44
31770: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31771: LD_VAR 0 1
31775: PPUSH
31776: LD_INT 1
31778: PPUSH
31779: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31783: LD_INT 35
31785: PPUSH
31786: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31790: LD_VAR 0 1
31794: PPUSH
31795: LD_INT 22
31797: PUSH
31798: LD_OWVAR 2
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PPUSH
31807: CALL_OW 69
31811: PPUSH
31812: LD_VAR 0 1
31816: PPUSH
31817: CALL_OW 74
31821: PPUSH
31822: CALL_OW 115
// until IsDead ( un ) ;
31826: LD_VAR 0 1
31830: PPUSH
31831: CALL_OW 301
31835: IFFALSE 31783
// end ;
31837: PPOPN 1
31839: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31840: LD_EXP 67
31844: PUSH
31845: LD_EXP 107
31849: AND
31850: IFFALSE 31862
31852: GO 31854
31854: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31855: LD_STRING earthquake(getX(game), 0, 32)
31857: PPUSH
31858: CALL_OW 559
31862: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31863: LD_EXP 67
31867: PUSH
31868: LD_EXP 108
31872: AND
31873: IFFALSE 31964
31875: GO 31877
31877: DISABLE
31878: LD_INT 0
31880: PPUSH
// begin enable ;
31881: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31882: LD_ADDR_VAR 0 1
31886: PUSH
31887: LD_INT 22
31889: PUSH
31890: LD_OWVAR 2
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 21
31901: PUSH
31902: LD_INT 2
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 33
31911: PUSH
31912: LD_INT 3
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: LIST
31923: PPUSH
31924: CALL_OW 69
31928: ST_TO_ADDR
// if not tmp then
31929: LD_VAR 0 1
31933: NOT
31934: IFFALSE 31938
// exit ;
31936: GO 31964
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31938: LD_VAR 0 1
31942: PUSH
31943: LD_INT 1
31945: PPUSH
31946: LD_VAR 0 1
31950: PPUSH
31951: CALL_OW 12
31955: ARRAY
31956: PPUSH
31957: LD_INT 1
31959: PPUSH
31960: CALL_OW 234
// end ;
31964: PPOPN 1
31966: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31967: LD_EXP 67
31971: PUSH
31972: LD_EXP 109
31976: AND
31977: IFFALSE 32118
31979: GO 31981
31981: DISABLE
31982: LD_INT 0
31984: PPUSH
31985: PPUSH
31986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31987: LD_ADDR_VAR 0 3
31991: PUSH
31992: LD_INT 22
31994: PUSH
31995: LD_OWVAR 2
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 25
32006: PUSH
32007: LD_INT 1
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PPUSH
32018: CALL_OW 69
32022: ST_TO_ADDR
// if not tmp then
32023: LD_VAR 0 3
32027: NOT
32028: IFFALSE 32032
// exit ;
32030: GO 32118
// un := tmp [ rand ( 1 , tmp ) ] ;
32032: LD_ADDR_VAR 0 2
32036: PUSH
32037: LD_VAR 0 3
32041: PUSH
32042: LD_INT 1
32044: PPUSH
32045: LD_VAR 0 3
32049: PPUSH
32050: CALL_OW 12
32054: ARRAY
32055: ST_TO_ADDR
// if Crawls ( un ) then
32056: LD_VAR 0 2
32060: PPUSH
32061: CALL_OW 318
32065: IFFALSE 32076
// ComWalk ( un ) ;
32067: LD_VAR 0 2
32071: PPUSH
32072: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
32076: LD_VAR 0 2
32080: PPUSH
32081: LD_INT 9
32083: PPUSH
32084: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
32088: LD_INT 28
32090: PPUSH
32091: LD_OWVAR 2
32095: PPUSH
32096: LD_INT 2
32098: PPUSH
32099: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
32103: LD_INT 29
32105: PPUSH
32106: LD_OWVAR 2
32110: PPUSH
32111: LD_INT 2
32113: PPUSH
32114: CALL_OW 322
// end ;
32118: PPOPN 3
32120: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
32121: LD_EXP 67
32125: PUSH
32126: LD_EXP 110
32130: AND
32131: IFFALSE 32242
32133: GO 32135
32135: DISABLE
32136: LD_INT 0
32138: PPUSH
32139: PPUSH
32140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32141: LD_ADDR_VAR 0 3
32145: PUSH
32146: LD_INT 22
32148: PUSH
32149: LD_OWVAR 2
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 25
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PPUSH
32172: CALL_OW 69
32176: ST_TO_ADDR
// if not tmp then
32177: LD_VAR 0 3
32181: NOT
32182: IFFALSE 32186
// exit ;
32184: GO 32242
// un := tmp [ rand ( 1 , tmp ) ] ;
32186: LD_ADDR_VAR 0 2
32190: PUSH
32191: LD_VAR 0 3
32195: PUSH
32196: LD_INT 1
32198: PPUSH
32199: LD_VAR 0 3
32203: PPUSH
32204: CALL_OW 12
32208: ARRAY
32209: ST_TO_ADDR
// if Crawls ( un ) then
32210: LD_VAR 0 2
32214: PPUSH
32215: CALL_OW 318
32219: IFFALSE 32230
// ComWalk ( un ) ;
32221: LD_VAR 0 2
32225: PPUSH
32226: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32230: LD_VAR 0 2
32234: PPUSH
32235: LD_INT 8
32237: PPUSH
32238: CALL_OW 336
// end ;
32242: PPOPN 3
32244: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32245: LD_EXP 67
32249: PUSH
32250: LD_EXP 111
32254: AND
32255: IFFALSE 32399
32257: GO 32259
32259: DISABLE
32260: LD_INT 0
32262: PPUSH
32263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32264: LD_ADDR_VAR 0 2
32268: PUSH
32269: LD_INT 22
32271: PUSH
32272: LD_OWVAR 2
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 21
32283: PUSH
32284: LD_INT 2
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 2
32293: PUSH
32294: LD_INT 34
32296: PUSH
32297: LD_INT 12
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 34
32306: PUSH
32307: LD_INT 51
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 34
32316: PUSH
32317: LD_INT 32
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: PPUSH
32335: CALL_OW 69
32339: ST_TO_ADDR
// if not tmp then
32340: LD_VAR 0 2
32344: NOT
32345: IFFALSE 32349
// exit ;
32347: GO 32399
// for i in tmp do
32349: LD_ADDR_VAR 0 1
32353: PUSH
32354: LD_VAR 0 2
32358: PUSH
32359: FOR_IN
32360: IFFALSE 32397
// if GetCargo ( i , mat_artifact ) = 0 then
32362: LD_VAR 0 1
32366: PPUSH
32367: LD_INT 4
32369: PPUSH
32370: CALL_OW 289
32374: PUSH
32375: LD_INT 0
32377: EQUAL
32378: IFFALSE 32395
// SetCargo ( i , mat_siberit , 100 ) ;
32380: LD_VAR 0 1
32384: PPUSH
32385: LD_INT 3
32387: PPUSH
32388: LD_INT 100
32390: PPUSH
32391: CALL_OW 290
32395: GO 32359
32397: POP
32398: POP
// end ;
32399: PPOPN 2
32401: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32402: LD_EXP 67
32406: PUSH
32407: LD_EXP 112
32411: AND
32412: IFFALSE 32595
32414: GO 32416
32416: DISABLE
32417: LD_INT 0
32419: PPUSH
32420: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32421: LD_ADDR_VAR 0 2
32425: PUSH
32426: LD_INT 22
32428: PUSH
32429: LD_OWVAR 2
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PPUSH
32438: CALL_OW 69
32442: ST_TO_ADDR
// if not tmp then
32443: LD_VAR 0 2
32447: NOT
32448: IFFALSE 32452
// exit ;
32450: GO 32595
// for i := 1 to 2 do
32452: LD_ADDR_VAR 0 1
32456: PUSH
32457: DOUBLE
32458: LD_INT 1
32460: DEC
32461: ST_TO_ADDR
32462: LD_INT 2
32464: PUSH
32465: FOR_TO
32466: IFFALSE 32593
// begin uc_side := your_side ;
32468: LD_ADDR_OWVAR 20
32472: PUSH
32473: LD_OWVAR 2
32477: ST_TO_ADDR
// uc_nation := nation_american ;
32478: LD_ADDR_OWVAR 21
32482: PUSH
32483: LD_INT 1
32485: ST_TO_ADDR
// vc_chassis := us_morphling ;
32486: LD_ADDR_OWVAR 37
32490: PUSH
32491: LD_INT 5
32493: ST_TO_ADDR
// vc_engine := engine_siberite ;
32494: LD_ADDR_OWVAR 39
32498: PUSH
32499: LD_INT 3
32501: ST_TO_ADDR
// vc_control := control_computer ;
32502: LD_ADDR_OWVAR 38
32506: PUSH
32507: LD_INT 3
32509: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32510: LD_ADDR_OWVAR 40
32514: PUSH
32515: LD_INT 10
32517: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32518: LD_VAR 0 2
32522: PUSH
32523: LD_INT 1
32525: ARRAY
32526: PPUSH
32527: CALL_OW 310
32531: NOT
32532: IFFALSE 32579
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32534: CALL_OW 45
32538: PPUSH
32539: LD_VAR 0 2
32543: PUSH
32544: LD_INT 1
32546: ARRAY
32547: PPUSH
32548: CALL_OW 250
32552: PPUSH
32553: LD_VAR 0 2
32557: PUSH
32558: LD_INT 1
32560: ARRAY
32561: PPUSH
32562: CALL_OW 251
32566: PPUSH
32567: LD_INT 12
32569: PPUSH
32570: LD_INT 1
32572: PPUSH
32573: CALL_OW 50
32577: GO 32591
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32579: CALL_OW 45
32583: PPUSH
32584: LD_INT 1
32586: PPUSH
32587: CALL_OW 51
// end ;
32591: GO 32465
32593: POP
32594: POP
// end ;
32595: PPOPN 2
32597: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32598: LD_EXP 67
32602: PUSH
32603: LD_EXP 113
32607: AND
32608: IFFALSE 32830
32610: GO 32612
32612: DISABLE
32613: LD_INT 0
32615: PPUSH
32616: PPUSH
32617: PPUSH
32618: PPUSH
32619: PPUSH
32620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32621: LD_ADDR_VAR 0 6
32625: PUSH
32626: LD_INT 22
32628: PUSH
32629: LD_OWVAR 2
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 21
32640: PUSH
32641: LD_INT 1
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 3
32650: PUSH
32651: LD_INT 23
32653: PUSH
32654: LD_INT 0
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: LIST
32669: PPUSH
32670: CALL_OW 69
32674: ST_TO_ADDR
// if not tmp then
32675: LD_VAR 0 6
32679: NOT
32680: IFFALSE 32684
// exit ;
32682: GO 32830
// s1 := rand ( 1 , 4 ) ;
32684: LD_ADDR_VAR 0 2
32688: PUSH
32689: LD_INT 1
32691: PPUSH
32692: LD_INT 4
32694: PPUSH
32695: CALL_OW 12
32699: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32700: LD_ADDR_VAR 0 4
32704: PUSH
32705: LD_VAR 0 6
32709: PUSH
32710: LD_INT 1
32712: ARRAY
32713: PPUSH
32714: LD_VAR 0 2
32718: PPUSH
32719: CALL_OW 259
32723: ST_TO_ADDR
// if s1 = 1 then
32724: LD_VAR 0 2
32728: PUSH
32729: LD_INT 1
32731: EQUAL
32732: IFFALSE 32752
// s2 := rand ( 2 , 4 ) else
32734: LD_ADDR_VAR 0 3
32738: PUSH
32739: LD_INT 2
32741: PPUSH
32742: LD_INT 4
32744: PPUSH
32745: CALL_OW 12
32749: ST_TO_ADDR
32750: GO 32760
// s2 := 1 ;
32752: LD_ADDR_VAR 0 3
32756: PUSH
32757: LD_INT 1
32759: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32760: LD_ADDR_VAR 0 5
32764: PUSH
32765: LD_VAR 0 6
32769: PUSH
32770: LD_INT 1
32772: ARRAY
32773: PPUSH
32774: LD_VAR 0 3
32778: PPUSH
32779: CALL_OW 259
32783: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32784: LD_VAR 0 6
32788: PUSH
32789: LD_INT 1
32791: ARRAY
32792: PPUSH
32793: LD_VAR 0 2
32797: PPUSH
32798: LD_VAR 0 5
32802: PPUSH
32803: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32807: LD_VAR 0 6
32811: PUSH
32812: LD_INT 1
32814: ARRAY
32815: PPUSH
32816: LD_VAR 0 3
32820: PPUSH
32821: LD_VAR 0 4
32825: PPUSH
32826: CALL_OW 237
// end ;
32830: PPOPN 6
32832: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32833: LD_EXP 67
32837: PUSH
32838: LD_EXP 114
32842: AND
32843: IFFALSE 32922
32845: GO 32847
32847: DISABLE
32848: LD_INT 0
32850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32851: LD_ADDR_VAR 0 1
32855: PUSH
32856: LD_INT 22
32858: PUSH
32859: LD_OWVAR 2
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 30
32870: PUSH
32871: LD_INT 3
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PPUSH
32882: CALL_OW 69
32886: ST_TO_ADDR
// if not tmp then
32887: LD_VAR 0 1
32891: NOT
32892: IFFALSE 32896
// exit ;
32894: GO 32922
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32896: LD_VAR 0 1
32900: PUSH
32901: LD_INT 1
32903: PPUSH
32904: LD_VAR 0 1
32908: PPUSH
32909: CALL_OW 12
32913: ARRAY
32914: PPUSH
32915: LD_INT 1
32917: PPUSH
32918: CALL_OW 234
// end ;
32922: PPOPN 1
32924: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32925: LD_EXP 67
32929: PUSH
32930: LD_EXP 115
32934: AND
32935: IFFALSE 33047
32937: GO 32939
32939: DISABLE
32940: LD_INT 0
32942: PPUSH
32943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32944: LD_ADDR_VAR 0 2
32948: PUSH
32949: LD_INT 22
32951: PUSH
32952: LD_OWVAR 2
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 2
32963: PUSH
32964: LD_INT 30
32966: PUSH
32967: LD_INT 27
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 30
32976: PUSH
32977: LD_INT 26
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 30
32986: PUSH
32987: LD_INT 28
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PPUSH
33004: CALL_OW 69
33008: ST_TO_ADDR
// if not tmp then
33009: LD_VAR 0 2
33013: NOT
33014: IFFALSE 33018
// exit ;
33016: GO 33047
// for i in tmp do
33018: LD_ADDR_VAR 0 1
33022: PUSH
33023: LD_VAR 0 2
33027: PUSH
33028: FOR_IN
33029: IFFALSE 33045
// SetLives ( i , 1 ) ;
33031: LD_VAR 0 1
33035: PPUSH
33036: LD_INT 1
33038: PPUSH
33039: CALL_OW 234
33043: GO 33028
33045: POP
33046: POP
// end ;
33047: PPOPN 2
33049: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
33050: LD_EXP 67
33054: PUSH
33055: LD_EXP 116
33059: AND
33060: IFFALSE 33334
33062: GO 33064
33064: DISABLE
33065: LD_INT 0
33067: PPUSH
33068: PPUSH
33069: PPUSH
// begin i := rand ( 1 , 7 ) ;
33070: LD_ADDR_VAR 0 1
33074: PUSH
33075: LD_INT 1
33077: PPUSH
33078: LD_INT 7
33080: PPUSH
33081: CALL_OW 12
33085: ST_TO_ADDR
// case i of 1 :
33086: LD_VAR 0 1
33090: PUSH
33091: LD_INT 1
33093: DOUBLE
33094: EQUAL
33095: IFTRUE 33099
33097: GO 33109
33099: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
33100: LD_STRING earthquake(getX(game), 0, 32)
33102: PPUSH
33103: CALL_OW 559
33107: GO 33334
33109: LD_INT 2
33111: DOUBLE
33112: EQUAL
33113: IFTRUE 33117
33115: GO 33131
33117: POP
// begin ToLua ( displayStucuk(); ) ;
33118: LD_STRING displayStucuk();
33120: PPUSH
33121: CALL_OW 559
// ResetFog ;
33125: CALL_OW 335
// end ; 3 :
33129: GO 33334
33131: LD_INT 3
33133: DOUBLE
33134: EQUAL
33135: IFTRUE 33139
33137: GO 33243
33139: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
33140: LD_ADDR_VAR 0 2
33144: PUSH
33145: LD_INT 22
33147: PUSH
33148: LD_OWVAR 2
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 25
33159: PUSH
33160: LD_INT 1
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PPUSH
33171: CALL_OW 69
33175: ST_TO_ADDR
// if not tmp then
33176: LD_VAR 0 2
33180: NOT
33181: IFFALSE 33185
// exit ;
33183: GO 33334
// un := tmp [ rand ( 1 , tmp ) ] ;
33185: LD_ADDR_VAR 0 3
33189: PUSH
33190: LD_VAR 0 2
33194: PUSH
33195: LD_INT 1
33197: PPUSH
33198: LD_VAR 0 2
33202: PPUSH
33203: CALL_OW 12
33207: ARRAY
33208: ST_TO_ADDR
// if Crawls ( un ) then
33209: LD_VAR 0 3
33213: PPUSH
33214: CALL_OW 318
33218: IFFALSE 33229
// ComWalk ( un ) ;
33220: LD_VAR 0 3
33224: PPUSH
33225: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33229: LD_VAR 0 3
33233: PPUSH
33234: LD_INT 8
33236: PPUSH
33237: CALL_OW 336
// end ; 4 :
33241: GO 33334
33243: LD_INT 4
33245: DOUBLE
33246: EQUAL
33247: IFTRUE 33251
33249: GO 33312
33251: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33252: LD_ADDR_VAR 0 2
33256: PUSH
33257: LD_INT 22
33259: PUSH
33260: LD_OWVAR 2
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 30
33271: PUSH
33272: LD_INT 29
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PPUSH
33283: CALL_OW 69
33287: ST_TO_ADDR
// if not tmp then
33288: LD_VAR 0 2
33292: NOT
33293: IFFALSE 33297
// exit ;
33295: GO 33334
// DestroyUnit ( tmp [ 1 ] ) ;
33297: LD_VAR 0 2
33301: PUSH
33302: LD_INT 1
33304: ARRAY
33305: PPUSH
33306: CALL_OW 65
// end ; 5 .. 7 :
33310: GO 33334
33312: LD_INT 5
33314: DOUBLE
33315: GREATEREQUAL
33316: IFFALSE 33324
33318: LD_INT 7
33320: DOUBLE
33321: LESSEQUAL
33322: IFTRUE 33326
33324: GO 33333
33326: POP
// StreamSibBomb ; end ;
33327: CALL 29584 0 0
33331: GO 33334
33333: POP
// end ;
33334: PPOPN 3
33336: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33337: LD_EXP 67
33341: PUSH
33342: LD_EXP 117
33346: AND
33347: IFFALSE 33503
33349: GO 33351
33351: DISABLE
33352: LD_INT 0
33354: PPUSH
33355: PPUSH
33356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33357: LD_ADDR_VAR 0 2
33361: PUSH
33362: LD_INT 81
33364: PUSH
33365: LD_OWVAR 2
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: LD_INT 21
33379: PUSH
33380: LD_INT 1
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 21
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: LIST
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PPUSH
33406: CALL_OW 69
33410: ST_TO_ADDR
// if not tmp then
33411: LD_VAR 0 2
33415: NOT
33416: IFFALSE 33420
// exit ;
33418: GO 33503
// p := 0 ;
33420: LD_ADDR_VAR 0 3
33424: PUSH
33425: LD_INT 0
33427: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33428: LD_INT 35
33430: PPUSH
33431: CALL_OW 67
// p := p + 1 ;
33435: LD_ADDR_VAR 0 3
33439: PUSH
33440: LD_VAR 0 3
33444: PUSH
33445: LD_INT 1
33447: PLUS
33448: ST_TO_ADDR
// for i in tmp do
33449: LD_ADDR_VAR 0 1
33453: PUSH
33454: LD_VAR 0 2
33458: PUSH
33459: FOR_IN
33460: IFFALSE 33491
// if GetLives ( i ) < 1000 then
33462: LD_VAR 0 1
33466: PPUSH
33467: CALL_OW 256
33471: PUSH
33472: LD_INT 1000
33474: LESS
33475: IFFALSE 33489
// SetLives ( i , 1000 ) ;
33477: LD_VAR 0 1
33481: PPUSH
33482: LD_INT 1000
33484: PPUSH
33485: CALL_OW 234
33489: GO 33459
33491: POP
33492: POP
// until p > 20 ;
33493: LD_VAR 0 3
33497: PUSH
33498: LD_INT 20
33500: GREATER
33501: IFFALSE 33428
// end ;
33503: PPOPN 3
33505: END
// every 0 0$1 trigger StreamModeActive and sTime do
33506: LD_EXP 67
33510: PUSH
33511: LD_EXP 118
33515: AND
33516: IFFALSE 33551
33518: GO 33520
33520: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33521: LD_INT 28
33523: PPUSH
33524: LD_OWVAR 2
33528: PPUSH
33529: LD_INT 2
33531: PPUSH
33532: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33536: LD_INT 30
33538: PPUSH
33539: LD_OWVAR 2
33543: PPUSH
33544: LD_INT 2
33546: PPUSH
33547: CALL_OW 322
// end ;
33551: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33552: LD_EXP 67
33556: PUSH
33557: LD_EXP 119
33561: AND
33562: IFFALSE 33683
33564: GO 33566
33566: DISABLE
33567: LD_INT 0
33569: PPUSH
33570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33571: LD_ADDR_VAR 0 2
33575: PUSH
33576: LD_INT 22
33578: PUSH
33579: LD_OWVAR 2
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 21
33590: PUSH
33591: LD_INT 1
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 3
33600: PUSH
33601: LD_INT 23
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: LIST
33619: PPUSH
33620: CALL_OW 69
33624: ST_TO_ADDR
// if not tmp then
33625: LD_VAR 0 2
33629: NOT
33630: IFFALSE 33634
// exit ;
33632: GO 33683
// for i in tmp do
33634: LD_ADDR_VAR 0 1
33638: PUSH
33639: LD_VAR 0 2
33643: PUSH
33644: FOR_IN
33645: IFFALSE 33681
// begin if Crawls ( i ) then
33647: LD_VAR 0 1
33651: PPUSH
33652: CALL_OW 318
33656: IFFALSE 33667
// ComWalk ( i ) ;
33658: LD_VAR 0 1
33662: PPUSH
33663: CALL_OW 138
// SetClass ( i , 2 ) ;
33667: LD_VAR 0 1
33671: PPUSH
33672: LD_INT 2
33674: PPUSH
33675: CALL_OW 336
// end ;
33679: GO 33644
33681: POP
33682: POP
// end ;
33683: PPOPN 2
33685: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33686: LD_EXP 67
33690: PUSH
33691: LD_EXP 120
33695: AND
33696: IFFALSE 33977
33698: GO 33700
33700: DISABLE
33701: LD_INT 0
33703: PPUSH
33704: PPUSH
33705: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33706: LD_OWVAR 2
33710: PPUSH
33711: LD_INT 9
33713: PPUSH
33714: LD_INT 1
33716: PPUSH
33717: LD_INT 1
33719: PPUSH
33720: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33724: LD_INT 9
33726: PPUSH
33727: LD_OWVAR 2
33731: PPUSH
33732: CALL_OW 343
// uc_side := 9 ;
33736: LD_ADDR_OWVAR 20
33740: PUSH
33741: LD_INT 9
33743: ST_TO_ADDR
// uc_nation := 2 ;
33744: LD_ADDR_OWVAR 21
33748: PUSH
33749: LD_INT 2
33751: ST_TO_ADDR
// hc_name := Dark Warrior ;
33752: LD_ADDR_OWVAR 26
33756: PUSH
33757: LD_STRING Dark Warrior
33759: ST_TO_ADDR
// hc_gallery :=  ;
33760: LD_ADDR_OWVAR 33
33764: PUSH
33765: LD_STRING 
33767: ST_TO_ADDR
// hc_noskilllimit := true ;
33768: LD_ADDR_OWVAR 76
33772: PUSH
33773: LD_INT 1
33775: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33776: LD_ADDR_OWVAR 31
33780: PUSH
33781: LD_INT 30
33783: PUSH
33784: LD_INT 30
33786: PUSH
33787: LD_INT 30
33789: PUSH
33790: LD_INT 30
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: ST_TO_ADDR
// un := CreateHuman ;
33799: LD_ADDR_VAR 0 3
33803: PUSH
33804: CALL_OW 44
33808: ST_TO_ADDR
// hc_noskilllimit := false ;
33809: LD_ADDR_OWVAR 76
33813: PUSH
33814: LD_INT 0
33816: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33817: LD_VAR 0 3
33821: PPUSH
33822: LD_INT 1
33824: PPUSH
33825: CALL_OW 51
// p := 0 ;
33829: LD_ADDR_VAR 0 2
33833: PUSH
33834: LD_INT 0
33836: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33837: LD_INT 35
33839: PPUSH
33840: CALL_OW 67
// p := p + 1 ;
33844: LD_ADDR_VAR 0 2
33848: PUSH
33849: LD_VAR 0 2
33853: PUSH
33854: LD_INT 1
33856: PLUS
33857: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33858: LD_VAR 0 3
33862: PPUSH
33863: CALL_OW 256
33867: PUSH
33868: LD_INT 1000
33870: LESS
33871: IFFALSE 33885
// SetLives ( un , 1000 ) ;
33873: LD_VAR 0 3
33877: PPUSH
33878: LD_INT 1000
33880: PPUSH
33881: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33885: LD_VAR 0 3
33889: PPUSH
33890: LD_INT 81
33892: PUSH
33893: LD_OWVAR 2
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 91
33904: PUSH
33905: LD_VAR 0 3
33909: PUSH
33910: LD_INT 30
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: LIST
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PPUSH
33922: CALL_OW 69
33926: PPUSH
33927: LD_VAR 0 3
33931: PPUSH
33932: CALL_OW 74
33936: PPUSH
33937: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
33941: LD_VAR 0 2
33945: PUSH
33946: LD_INT 60
33948: GREATER
33949: PUSH
33950: LD_VAR 0 3
33954: PPUSH
33955: CALL_OW 301
33959: OR
33960: IFFALSE 33837
// if un then
33962: LD_VAR 0 3
33966: IFFALSE 33977
// RemoveUnit ( un ) ;
33968: LD_VAR 0 3
33972: PPUSH
33973: CALL_OW 64
// end ;
33977: PPOPN 3
33979: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33980: LD_INT 0
33982: PPUSH
33983: PPUSH
33984: PPUSH
33985: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33986: LD_ADDR_VAR 0 4
33990: PUSH
33991: LD_INT 22
33993: PUSH
33994: LD_OWVAR 2
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 2
34005: PUSH
34006: LD_INT 30
34008: PUSH
34009: LD_INT 0
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 30
34018: PUSH
34019: LD_INT 1
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: LIST
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PPUSH
34035: CALL_OW 69
34039: ST_TO_ADDR
// if not tmp then
34040: LD_VAR 0 4
34044: NOT
34045: IFFALSE 34049
// exit ;
34047: GO 34108
// for i in tmp do
34049: LD_ADDR_VAR 0 2
34053: PUSH
34054: LD_VAR 0 4
34058: PUSH
34059: FOR_IN
34060: IFFALSE 34106
// for j = 1 to 3 do
34062: LD_ADDR_VAR 0 3
34066: PUSH
34067: DOUBLE
34068: LD_INT 1
34070: DEC
34071: ST_TO_ADDR
34072: LD_INT 3
34074: PUSH
34075: FOR_TO
34076: IFFALSE 34102
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34078: LD_VAR 0 2
34082: PPUSH
34083: CALL_OW 274
34087: PPUSH
34088: LD_VAR 0 3
34092: PPUSH
34093: LD_INT 99999
34095: PPUSH
34096: CALL_OW 277
34100: GO 34075
34102: POP
34103: POP
34104: GO 34059
34106: POP
34107: POP
// end ;
34108: LD_VAR 0 1
34112: RET
// export function hHackSetLevel10 ; var i , j ; begin
34113: LD_INT 0
34115: PPUSH
34116: PPUSH
34117: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34118: LD_ADDR_VAR 0 2
34122: PUSH
34123: LD_INT 21
34125: PUSH
34126: LD_INT 1
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PPUSH
34133: CALL_OW 69
34137: PUSH
34138: FOR_IN
34139: IFFALSE 34191
// if IsSelected ( i ) then
34141: LD_VAR 0 2
34145: PPUSH
34146: CALL_OW 306
34150: IFFALSE 34189
// begin for j := 1 to 4 do
34152: LD_ADDR_VAR 0 3
34156: PUSH
34157: DOUBLE
34158: LD_INT 1
34160: DEC
34161: ST_TO_ADDR
34162: LD_INT 4
34164: PUSH
34165: FOR_TO
34166: IFFALSE 34187
// SetSkill ( i , j , 10 ) ;
34168: LD_VAR 0 2
34172: PPUSH
34173: LD_VAR 0 3
34177: PPUSH
34178: LD_INT 10
34180: PPUSH
34181: CALL_OW 237
34185: GO 34165
34187: POP
34188: POP
// end ;
34189: GO 34138
34191: POP
34192: POP
// end ;
34193: LD_VAR 0 1
34197: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34198: LD_INT 0
34200: PPUSH
34201: PPUSH
34202: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34203: LD_ADDR_VAR 0 2
34207: PUSH
34208: LD_INT 22
34210: PUSH
34211: LD_OWVAR 2
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 21
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PPUSH
34234: CALL_OW 69
34238: PUSH
34239: FOR_IN
34240: IFFALSE 34281
// begin for j := 1 to 4 do
34242: LD_ADDR_VAR 0 3
34246: PUSH
34247: DOUBLE
34248: LD_INT 1
34250: DEC
34251: ST_TO_ADDR
34252: LD_INT 4
34254: PUSH
34255: FOR_TO
34256: IFFALSE 34277
// SetSkill ( i , j , 10 ) ;
34258: LD_VAR 0 2
34262: PPUSH
34263: LD_VAR 0 3
34267: PPUSH
34268: LD_INT 10
34270: PPUSH
34271: CALL_OW 237
34275: GO 34255
34277: POP
34278: POP
// end ;
34279: GO 34239
34281: POP
34282: POP
// end ;
34283: LD_VAR 0 1
34287: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
34288: LD_INT 0
34290: PPUSH
// uc_side := your_side ;
34291: LD_ADDR_OWVAR 20
34295: PUSH
34296: LD_OWVAR 2
34300: ST_TO_ADDR
// uc_nation := nation ;
34301: LD_ADDR_OWVAR 21
34305: PUSH
34306: LD_VAR 0 1
34310: ST_TO_ADDR
// InitHc ;
34311: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34315: LD_INT 0
34317: PPUSH
34318: LD_VAR 0 2
34322: PPUSH
34323: LD_VAR 0 3
34327: PPUSH
34328: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
34332: CALL_OW 44
34336: PPUSH
34337: LD_INT 1
34339: PPUSH
34340: CALL_OW 51
// end ;
34344: LD_VAR 0 4
34348: RET
// export function hHackSpawnVehicle ; begin
34349: LD_INT 0
34351: PPUSH
// uc_side := your_side ;
34352: LD_ADDR_OWVAR 20
34356: PUSH
34357: LD_OWVAR 2
34361: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
34362: LD_ADDR_OWVAR 21
34366: PUSH
34367: LD_INT 1
34369: PPUSH
34370: LD_INT 3
34372: PPUSH
34373: CALL_OW 12
34377: ST_TO_ADDR
// InitVc ;
34378: CALL_OW 20
// case uc_nation of 1 :
34382: LD_OWVAR 21
34386: PUSH
34387: LD_INT 1
34389: DOUBLE
34390: EQUAL
34391: IFTRUE 34395
34393: GO 34539
34395: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
34396: LD_ADDR_OWVAR 37
34400: PUSH
34401: LD_INT 1
34403: PUSH
34404: LD_INT 2
34406: PUSH
34407: LD_INT 3
34409: PUSH
34410: LD_INT 4
34412: PUSH
34413: LD_INT 5
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 1
34425: PPUSH
34426: LD_INT 5
34428: PPUSH
34429: CALL_OW 12
34433: ARRAY
34434: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
34435: LD_ADDR_OWVAR 39
34439: PUSH
34440: LD_INT 1
34442: PPUSH
34443: LD_INT 3
34445: PPUSH
34446: CALL_OW 12
34450: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
34451: LD_ADDR_OWVAR 38
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: LD_INT 2
34461: PUSH
34462: LD_INT 3
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 1
34472: PPUSH
34473: LD_INT 3
34475: PPUSH
34476: CALL_OW 12
34480: ARRAY
34481: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
34482: LD_ADDR_OWVAR 40
34486: PUSH
34487: LD_INT 2
34489: PUSH
34490: LD_INT 4
34492: PUSH
34493: LD_INT 5
34495: PUSH
34496: LD_INT 3
34498: PUSH
34499: LD_INT 7
34501: PUSH
34502: LD_INT 8
34504: PUSH
34505: LD_INT 9
34507: PUSH
34508: LD_INT 10
34510: PUSH
34511: LD_INT 6
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 1
34527: PPUSH
34528: LD_INT 9
34530: PPUSH
34531: CALL_OW 12
34535: ARRAY
34536: ST_TO_ADDR
// end ; 2 :
34537: GO 34804
34539: LD_INT 2
34541: DOUBLE
34542: EQUAL
34543: IFTRUE 34547
34545: GO 34671
34547: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
34548: LD_ADDR_OWVAR 37
34552: PUSH
34553: LD_INT 11
34555: PUSH
34556: LD_INT 12
34558: PUSH
34559: LD_INT 13
34561: PUSH
34562: LD_INT 14
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: PPUSH
34574: LD_INT 4
34576: PPUSH
34577: CALL_OW 12
34581: ARRAY
34582: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
34583: LD_ADDR_OWVAR 39
34587: PUSH
34588: LD_INT 1
34590: PPUSH
34591: LD_INT 3
34593: PPUSH
34594: CALL_OW 12
34598: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
34599: LD_ADDR_OWVAR 38
34603: PUSH
34604: LD_INT 1
34606: PUSH
34607: LD_INT 2
34609: PUSH
34610: LD_INT 5
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 1
34620: PPUSH
34621: LD_INT 3
34623: PPUSH
34624: CALL_OW 12
34628: ARRAY
34629: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
34630: LD_ADDR_OWVAR 40
34634: PUSH
34635: LD_INT 24
34637: PUSH
34638: LD_INT 26
34640: PUSH
34641: LD_INT 27
34643: PUSH
34644: LD_INT 28
34646: PUSH
34647: LD_INT 29
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 1
34659: PPUSH
34660: LD_INT 5
34662: PPUSH
34663: CALL_OW 12
34667: ARRAY
34668: ST_TO_ADDR
// end ; 3 :
34669: GO 34804
34671: LD_INT 3
34673: DOUBLE
34674: EQUAL
34675: IFTRUE 34679
34677: GO 34803
34679: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
34680: LD_ADDR_OWVAR 37
34684: PUSH
34685: LD_INT 21
34687: PUSH
34688: LD_INT 23
34690: PUSH
34691: LD_INT 22
34693: PUSH
34694: LD_INT 24
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 1
34705: PPUSH
34706: LD_INT 4
34708: PPUSH
34709: CALL_OW 12
34713: ARRAY
34714: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
34715: LD_ADDR_OWVAR 39
34719: PUSH
34720: LD_INT 1
34722: PPUSH
34723: LD_INT 3
34725: PPUSH
34726: CALL_OW 12
34730: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
34731: LD_ADDR_OWVAR 38
34735: PUSH
34736: LD_INT 1
34738: PUSH
34739: LD_INT 3
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: PPUSH
34749: LD_INT 2
34751: PPUSH
34752: CALL_OW 12
34756: ARRAY
34757: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
34758: LD_ADDR_OWVAR 40
34762: PUSH
34763: LD_INT 42
34765: PUSH
34766: LD_INT 43
34768: PUSH
34769: LD_INT 44
34771: PUSH
34772: LD_INT 46
34774: PUSH
34775: LD_INT 48
34777: PUSH
34778: LD_INT 47
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: PPUSH
34792: LD_INT 6
34794: PPUSH
34795: CALL_OW 12
34799: ARRAY
34800: ST_TO_ADDR
// end ; end ;
34801: GO 34804
34803: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
34804: CALL_OW 45
34808: PPUSH
34809: LD_INT 1
34811: PPUSH
34812: CALL_OW 51
// end ;
34816: LD_VAR 0 1
34820: RET
// export hInvincible ; every 1 do
34821: GO 34823
34823: DISABLE
// hInvincible := [ ] ;
34824: LD_ADDR_EXP 121
34828: PUSH
34829: EMPTY
34830: ST_TO_ADDR
34831: END
// every 10 do var i ;
34832: GO 34834
34834: DISABLE
34835: LD_INT 0
34837: PPUSH
// begin enable ;
34838: ENABLE
// if not hInvincible then
34839: LD_EXP 121
34843: NOT
34844: IFFALSE 34848
// exit ;
34846: GO 34892
// for i in hInvincible do
34848: LD_ADDR_VAR 0 1
34852: PUSH
34853: LD_EXP 121
34857: PUSH
34858: FOR_IN
34859: IFFALSE 34890
// if GetLives ( i ) < 1000 then
34861: LD_VAR 0 1
34865: PPUSH
34866: CALL_OW 256
34870: PUSH
34871: LD_INT 1000
34873: LESS
34874: IFFALSE 34888
// SetLives ( i , 1000 ) ;
34876: LD_VAR 0 1
34880: PPUSH
34881: LD_INT 1000
34883: PPUSH
34884: CALL_OW 234
34888: GO 34858
34890: POP
34891: POP
// end ;
34892: PPOPN 1
34894: END
// export function hHackInvincible ; var i ; begin
34895: LD_INT 0
34897: PPUSH
34898: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34899: LD_ADDR_VAR 0 2
34903: PUSH
34904: LD_INT 2
34906: PUSH
34907: LD_INT 21
34909: PUSH
34910: LD_INT 1
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 21
34919: PUSH
34920: LD_INT 2
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: LIST
34931: PPUSH
34932: CALL_OW 69
34936: PUSH
34937: FOR_IN
34938: IFFALSE 34999
// if IsSelected ( i ) then
34940: LD_VAR 0 2
34944: PPUSH
34945: CALL_OW 306
34949: IFFALSE 34997
// begin if i in hInvincible then
34951: LD_VAR 0 2
34955: PUSH
34956: LD_EXP 121
34960: IN
34961: IFFALSE 34981
// hInvincible := hInvincible diff i else
34963: LD_ADDR_EXP 121
34967: PUSH
34968: LD_EXP 121
34972: PUSH
34973: LD_VAR 0 2
34977: DIFF
34978: ST_TO_ADDR
34979: GO 34997
// hInvincible := hInvincible union i ;
34981: LD_ADDR_EXP 121
34985: PUSH
34986: LD_EXP 121
34990: PUSH
34991: LD_VAR 0 2
34995: UNION
34996: ST_TO_ADDR
// end ;
34997: GO 34937
34999: POP
35000: POP
// end ;
35001: LD_VAR 0 1
35005: RET
// export function hHackInvisible ; var i , j ; begin
35006: LD_INT 0
35008: PPUSH
35009: PPUSH
35010: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35011: LD_ADDR_VAR 0 2
35015: PUSH
35016: LD_INT 21
35018: PUSH
35019: LD_INT 1
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PPUSH
35026: CALL_OW 69
35030: PUSH
35031: FOR_IN
35032: IFFALSE 35056
// if IsSelected ( i ) then
35034: LD_VAR 0 2
35038: PPUSH
35039: CALL_OW 306
35043: IFFALSE 35054
// ComForceInvisible ( i ) ;
35045: LD_VAR 0 2
35049: PPUSH
35050: CALL_OW 496
35054: GO 35031
35056: POP
35057: POP
// end ;
35058: LD_VAR 0 1
35062: RET
// export function hHackChangeYourSide ; begin
35063: LD_INT 0
35065: PPUSH
// if your_side = 8 then
35066: LD_OWVAR 2
35070: PUSH
35071: LD_INT 8
35073: EQUAL
35074: IFFALSE 35086
// your_side := 0 else
35076: LD_ADDR_OWVAR 2
35080: PUSH
35081: LD_INT 0
35083: ST_TO_ADDR
35084: GO 35100
// your_side := your_side + 1 ;
35086: LD_ADDR_OWVAR 2
35090: PUSH
35091: LD_OWVAR 2
35095: PUSH
35096: LD_INT 1
35098: PLUS
35099: ST_TO_ADDR
// end ;
35100: LD_VAR 0 1
35104: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35105: LD_INT 0
35107: PPUSH
35108: PPUSH
35109: PPUSH
// for i in all_units do
35110: LD_ADDR_VAR 0 2
35114: PUSH
35115: LD_OWVAR 3
35119: PUSH
35120: FOR_IN
35121: IFFALSE 35199
// if IsSelected ( i ) then
35123: LD_VAR 0 2
35127: PPUSH
35128: CALL_OW 306
35132: IFFALSE 35197
// begin j := GetSide ( i ) ;
35134: LD_ADDR_VAR 0 3
35138: PUSH
35139: LD_VAR 0 2
35143: PPUSH
35144: CALL_OW 255
35148: ST_TO_ADDR
// if j = 8 then
35149: LD_VAR 0 3
35153: PUSH
35154: LD_INT 8
35156: EQUAL
35157: IFFALSE 35169
// j := 0 else
35159: LD_ADDR_VAR 0 3
35163: PUSH
35164: LD_INT 0
35166: ST_TO_ADDR
35167: GO 35183
// j := j + 1 ;
35169: LD_ADDR_VAR 0 3
35173: PUSH
35174: LD_VAR 0 3
35178: PUSH
35179: LD_INT 1
35181: PLUS
35182: ST_TO_ADDR
// SetSide ( i , j ) ;
35183: LD_VAR 0 2
35187: PPUSH
35188: LD_VAR 0 3
35192: PPUSH
35193: CALL_OW 235
// end ;
35197: GO 35120
35199: POP
35200: POP
// end ;
35201: LD_VAR 0 1
35205: RET
// export function hHackFog ; begin
35206: LD_INT 0
35208: PPUSH
// FogOff ( true ) ;
35209: LD_INT 1
35211: PPUSH
35212: CALL_OW 344
// end ;
35216: LD_VAR 0 1
35220: RET
// export function hHackApeman ; begin
35221: LD_INT 0
35223: PPUSH
// uc_side := your_side ;
35224: LD_ADDR_OWVAR 20
35228: PUSH
35229: LD_OWVAR 2
35233: ST_TO_ADDR
// uc_nation := 0 ;
35234: LD_ADDR_OWVAR 21
35238: PUSH
35239: LD_INT 0
35241: ST_TO_ADDR
// hc_name :=  ;
35242: LD_ADDR_OWVAR 26
35246: PUSH
35247: LD_STRING 
35249: ST_TO_ADDR
// hc_gallery :=  ;
35250: LD_ADDR_OWVAR 33
35254: PUSH
35255: LD_STRING 
35257: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
35258: LD_ADDR_OWVAR 31
35262: PUSH
35263: LD_INT 0
35265: PUSH
35266: LD_INT 0
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: ST_TO_ADDR
// hc_class := class_apeman ;
35281: LD_ADDR_OWVAR 28
35285: PUSH
35286: LD_INT 12
35288: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
35289: CALL_OW 44
35293: PPUSH
35294: LD_INT 1
35296: PPUSH
35297: CALL_OW 51
// end ;
35301: LD_VAR 0 1
35305: RET
// export function hHackBoom ; begin
35306: LD_INT 0
35308: PPUSH
// uc_side := your_side ;
35309: LD_ADDR_OWVAR 20
35313: PUSH
35314: LD_OWVAR 2
35318: ST_TO_ADDR
// uc_nation := 1 ;
35319: LD_ADDR_OWVAR 21
35323: PUSH
35324: LD_INT 1
35326: ST_TO_ADDR
// vc_chassis := us_morphling ;
35327: LD_ADDR_OWVAR 37
35331: PUSH
35332: LD_INT 5
35334: ST_TO_ADDR
// vc_engine := engine_siberite ;
35335: LD_ADDR_OWVAR 39
35339: PUSH
35340: LD_INT 3
35342: ST_TO_ADDR
// vc_control := control_computer ;
35343: LD_ADDR_OWVAR 38
35347: PUSH
35348: LD_INT 3
35350: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
35351: LD_ADDR_OWVAR 40
35355: PUSH
35356: LD_INT 8
35358: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
35359: CALL_OW 45
35363: PPUSH
35364: LD_INT 1
35366: PPUSH
35367: CALL_OW 51
// end ; end_of_file
35371: LD_VAR 0 1
35375: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35376: LD_INT 0
35378: PPUSH
35379: PPUSH
35380: PPUSH
35381: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35382: LD_VAR 0 1
35386: PPUSH
35387: CALL_OW 264
35391: PUSH
35392: LD_EXP 56
35396: EQUAL
35397: IFFALSE 35469
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35399: LD_INT 68
35401: PPUSH
35402: LD_VAR 0 1
35406: PPUSH
35407: CALL_OW 255
35411: PPUSH
35412: CALL_OW 321
35416: PUSH
35417: LD_INT 2
35419: EQUAL
35420: IFFALSE 35432
// eff := 70 else
35422: LD_ADDR_VAR 0 4
35426: PUSH
35427: LD_INT 70
35429: ST_TO_ADDR
35430: GO 35440
// eff := 30 ;
35432: LD_ADDR_VAR 0 4
35436: PUSH
35437: LD_INT 30
35439: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35440: LD_VAR 0 1
35444: PPUSH
35445: CALL_OW 250
35449: PPUSH
35450: LD_VAR 0 1
35454: PPUSH
35455: CALL_OW 251
35459: PPUSH
35460: LD_VAR 0 4
35464: PPUSH
35465: CALL_OW 495
// end ; end ;
35469: LD_VAR 0 2
35473: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35474: LD_INT 0
35476: PPUSH
// end ;
35477: LD_VAR 0 4
35481: RET
// export function SOS_Command ( cmd ) ; begin
35482: LD_INT 0
35484: PPUSH
// end ;
35485: LD_VAR 0 2
35489: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35490: LD_VAR 0 1
35494: PUSH
35495: LD_INT 254
35497: EQUAL
35498: PUSH
35499: LD_VAR 0 2
35503: PPUSH
35504: CALL_OW 264
35508: PUSH
35509: LD_EXP 54
35513: EQUAL
35514: AND
35515: PUSH
35516: LD_VAR 0 3
35520: PPUSH
35521: CALL_OW 263
35525: PUSH
35526: LD_INT 3
35528: EQUAL
35529: AND
35530: IFFALSE 35546
// HackDestroyVehicle ( unit , selectedUnit ) ;
35532: LD_VAR 0 2
35536: PPUSH
35537: LD_VAR 0 3
35541: PPUSH
35542: CALL 37053 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35546: LD_VAR 0 1
35550: PUSH
35551: LD_INT 255
35553: EQUAL
35554: PUSH
35555: LD_VAR 0 2
35559: PPUSH
35560: CALL_OW 264
35564: PUSH
35565: LD_INT 14
35567: PUSH
35568: LD_INT 53
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: IN
35575: AND
35576: PUSH
35577: LD_VAR 0 4
35581: PPUSH
35582: LD_VAR 0 5
35586: PPUSH
35587: CALL_OW 488
35591: AND
35592: IFFALSE 35616
// CutTreeXYR ( unit , x , y , 12 ) ;
35594: LD_VAR 0 2
35598: PPUSH
35599: LD_VAR 0 4
35603: PPUSH
35604: LD_VAR 0 5
35608: PPUSH
35609: LD_INT 12
35611: PPUSH
35612: CALL 35619 0 4
// end ;
35616: PPOPN 5
35618: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35619: LD_INT 0
35621: PPUSH
35622: PPUSH
35623: PPUSH
35624: PPUSH
35625: PPUSH
35626: PPUSH
35627: PPUSH
35628: PPUSH
35629: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35630: LD_VAR 0 1
35634: NOT
35635: PUSH
35636: LD_VAR 0 2
35640: PPUSH
35641: LD_VAR 0 3
35645: PPUSH
35646: CALL_OW 488
35650: NOT
35651: OR
35652: PUSH
35653: LD_VAR 0 4
35657: NOT
35658: OR
35659: IFFALSE 35663
// exit ;
35661: GO 36003
// list := [ ] ;
35663: LD_ADDR_VAR 0 13
35667: PUSH
35668: EMPTY
35669: ST_TO_ADDR
// if x - r < 0 then
35670: LD_VAR 0 2
35674: PUSH
35675: LD_VAR 0 4
35679: MINUS
35680: PUSH
35681: LD_INT 0
35683: LESS
35684: IFFALSE 35696
// min_x := 0 else
35686: LD_ADDR_VAR 0 7
35690: PUSH
35691: LD_INT 0
35693: ST_TO_ADDR
35694: GO 35712
// min_x := x - r ;
35696: LD_ADDR_VAR 0 7
35700: PUSH
35701: LD_VAR 0 2
35705: PUSH
35706: LD_VAR 0 4
35710: MINUS
35711: ST_TO_ADDR
// if y - r < 0 then
35712: LD_VAR 0 3
35716: PUSH
35717: LD_VAR 0 4
35721: MINUS
35722: PUSH
35723: LD_INT 0
35725: LESS
35726: IFFALSE 35738
// min_y := 0 else
35728: LD_ADDR_VAR 0 8
35732: PUSH
35733: LD_INT 0
35735: ST_TO_ADDR
35736: GO 35754
// min_y := y - r ;
35738: LD_ADDR_VAR 0 8
35742: PUSH
35743: LD_VAR 0 3
35747: PUSH
35748: LD_VAR 0 4
35752: MINUS
35753: ST_TO_ADDR
// max_x := x + r ;
35754: LD_ADDR_VAR 0 9
35758: PUSH
35759: LD_VAR 0 2
35763: PUSH
35764: LD_VAR 0 4
35768: PLUS
35769: ST_TO_ADDR
// max_y := y + r ;
35770: LD_ADDR_VAR 0 10
35774: PUSH
35775: LD_VAR 0 3
35779: PUSH
35780: LD_VAR 0 4
35784: PLUS
35785: ST_TO_ADDR
// for _x = min_x to max_x do
35786: LD_ADDR_VAR 0 11
35790: PUSH
35791: DOUBLE
35792: LD_VAR 0 7
35796: DEC
35797: ST_TO_ADDR
35798: LD_VAR 0 9
35802: PUSH
35803: FOR_TO
35804: IFFALSE 35921
// for _y = min_y to max_y do
35806: LD_ADDR_VAR 0 12
35810: PUSH
35811: DOUBLE
35812: LD_VAR 0 8
35816: DEC
35817: ST_TO_ADDR
35818: LD_VAR 0 10
35822: PUSH
35823: FOR_TO
35824: IFFALSE 35917
// begin if not ValidHex ( _x , _y ) then
35826: LD_VAR 0 11
35830: PPUSH
35831: LD_VAR 0 12
35835: PPUSH
35836: CALL_OW 488
35840: NOT
35841: IFFALSE 35845
// continue ;
35843: GO 35823
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35845: LD_VAR 0 11
35849: PPUSH
35850: LD_VAR 0 12
35854: PPUSH
35855: CALL_OW 351
35859: PUSH
35860: LD_VAR 0 11
35864: PPUSH
35865: LD_VAR 0 12
35869: PPUSH
35870: CALL_OW 554
35874: AND
35875: IFFALSE 35915
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35877: LD_ADDR_VAR 0 13
35881: PUSH
35882: LD_VAR 0 13
35886: PPUSH
35887: LD_VAR 0 13
35891: PUSH
35892: LD_INT 1
35894: PLUS
35895: PPUSH
35896: LD_VAR 0 11
35900: PUSH
35901: LD_VAR 0 12
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PPUSH
35910: CALL_OW 2
35914: ST_TO_ADDR
// end ;
35915: GO 35823
35917: POP
35918: POP
35919: GO 35803
35921: POP
35922: POP
// if not list then
35923: LD_VAR 0 13
35927: NOT
35928: IFFALSE 35932
// exit ;
35930: GO 36003
// for i in list do
35932: LD_ADDR_VAR 0 6
35936: PUSH
35937: LD_VAR 0 13
35941: PUSH
35942: FOR_IN
35943: IFFALSE 36001
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35945: LD_VAR 0 1
35949: PPUSH
35950: LD_STRING M
35952: PUSH
35953: LD_VAR 0 6
35957: PUSH
35958: LD_INT 1
35960: ARRAY
35961: PUSH
35962: LD_VAR 0 6
35966: PUSH
35967: LD_INT 2
35969: ARRAY
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: LD_INT 0
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: PUSH
35992: EMPTY
35993: LIST
35994: PPUSH
35995: CALL_OW 447
35999: GO 35942
36001: POP
36002: POP
// end ;
36003: LD_VAR 0 5
36007: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36008: LD_EXP 122
36012: NOT
36013: IFFALSE 36063
36015: GO 36017
36017: DISABLE
// begin initHack := true ;
36018: LD_ADDR_EXP 122
36022: PUSH
36023: LD_INT 1
36025: ST_TO_ADDR
// hackTanks := [ ] ;
36026: LD_ADDR_EXP 123
36030: PUSH
36031: EMPTY
36032: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36033: LD_ADDR_EXP 124
36037: PUSH
36038: EMPTY
36039: ST_TO_ADDR
// hackLimit := 3 ;
36040: LD_ADDR_EXP 125
36044: PUSH
36045: LD_INT 3
36047: ST_TO_ADDR
// hackDist := 12 ;
36048: LD_ADDR_EXP 126
36052: PUSH
36053: LD_INT 12
36055: ST_TO_ADDR
// hackCounter := [ ] ;
36056: LD_ADDR_EXP 127
36060: PUSH
36061: EMPTY
36062: ST_TO_ADDR
// end ;
36063: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36064: LD_EXP 122
36068: PUSH
36069: LD_INT 34
36071: PUSH
36072: LD_EXP 54
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PPUSH
36081: CALL_OW 69
36085: AND
36086: IFFALSE 36341
36088: GO 36090
36090: DISABLE
36091: LD_INT 0
36093: PPUSH
36094: PPUSH
// begin enable ;
36095: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36096: LD_ADDR_VAR 0 1
36100: PUSH
36101: LD_INT 34
36103: PUSH
36104: LD_EXP 54
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PPUSH
36113: CALL_OW 69
36117: PUSH
36118: FOR_IN
36119: IFFALSE 36339
// begin if not i in hackTanks then
36121: LD_VAR 0 1
36125: PUSH
36126: LD_EXP 123
36130: IN
36131: NOT
36132: IFFALSE 36215
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36134: LD_ADDR_EXP 123
36138: PUSH
36139: LD_EXP 123
36143: PPUSH
36144: LD_EXP 123
36148: PUSH
36149: LD_INT 1
36151: PLUS
36152: PPUSH
36153: LD_VAR 0 1
36157: PPUSH
36158: CALL_OW 1
36162: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36163: LD_ADDR_EXP 124
36167: PUSH
36168: LD_EXP 124
36172: PPUSH
36173: LD_EXP 124
36177: PUSH
36178: LD_INT 1
36180: PLUS
36181: PPUSH
36182: EMPTY
36183: PPUSH
36184: CALL_OW 1
36188: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36189: LD_ADDR_EXP 127
36193: PUSH
36194: LD_EXP 127
36198: PPUSH
36199: LD_EXP 127
36203: PUSH
36204: LD_INT 1
36206: PLUS
36207: PPUSH
36208: EMPTY
36209: PPUSH
36210: CALL_OW 1
36214: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36215: LD_VAR 0 1
36219: PPUSH
36220: CALL_OW 302
36224: NOT
36225: IFFALSE 36238
// begin HackUnlinkAll ( i ) ;
36227: LD_VAR 0 1
36231: PPUSH
36232: CALL 36344 0 1
// continue ;
36236: GO 36118
// end ; HackCheckCapturedStatus ( i ) ;
36238: LD_VAR 0 1
36242: PPUSH
36243: CALL 36787 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36247: LD_ADDR_VAR 0 2
36251: PUSH
36252: LD_INT 81
36254: PUSH
36255: LD_VAR 0 1
36259: PPUSH
36260: CALL_OW 255
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 33
36271: PUSH
36272: LD_INT 3
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 91
36281: PUSH
36282: LD_VAR 0 1
36286: PUSH
36287: LD_EXP 126
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 50
36299: PUSH
36300: EMPTY
36301: LIST
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: PPUSH
36309: CALL_OW 69
36313: ST_TO_ADDR
// if not tmp then
36314: LD_VAR 0 2
36318: NOT
36319: IFFALSE 36323
// continue ;
36321: GO 36118
// HackLink ( i , tmp ) ;
36323: LD_VAR 0 1
36327: PPUSH
36328: LD_VAR 0 2
36332: PPUSH
36333: CALL 36480 0 2
// end ;
36337: GO 36118
36339: POP
36340: POP
// end ;
36341: PPOPN 2
36343: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36344: LD_INT 0
36346: PPUSH
36347: PPUSH
36348: PPUSH
// if not hack in hackTanks then
36349: LD_VAR 0 1
36353: PUSH
36354: LD_EXP 123
36358: IN
36359: NOT
36360: IFFALSE 36364
// exit ;
36362: GO 36475
// index := GetElementIndex ( hackTanks , hack ) ;
36364: LD_ADDR_VAR 0 4
36368: PUSH
36369: LD_EXP 123
36373: PPUSH
36374: LD_VAR 0 1
36378: PPUSH
36379: CALL 41895 0 2
36383: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36384: LD_EXP 124
36388: PUSH
36389: LD_VAR 0 4
36393: ARRAY
36394: IFFALSE 36475
// begin for i in hackTanksCaptured [ index ] do
36396: LD_ADDR_VAR 0 3
36400: PUSH
36401: LD_EXP 124
36405: PUSH
36406: LD_VAR 0 4
36410: ARRAY
36411: PUSH
36412: FOR_IN
36413: IFFALSE 36439
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36415: LD_VAR 0 3
36419: PUSH
36420: LD_INT 1
36422: ARRAY
36423: PPUSH
36424: LD_VAR 0 3
36428: PUSH
36429: LD_INT 2
36431: ARRAY
36432: PPUSH
36433: CALL_OW 235
36437: GO 36412
36439: POP
36440: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36441: LD_ADDR_EXP 124
36445: PUSH
36446: LD_EXP 124
36450: PPUSH
36451: LD_VAR 0 4
36455: PPUSH
36456: EMPTY
36457: PPUSH
36458: CALL_OW 1
36462: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36463: LD_VAR 0 1
36467: PPUSH
36468: LD_INT 0
36470: PPUSH
36471: CALL_OW 505
// end ; end ;
36475: LD_VAR 0 2
36479: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36480: LD_INT 0
36482: PPUSH
36483: PPUSH
36484: PPUSH
// if not hack in hackTanks or not vehicles then
36485: LD_VAR 0 1
36489: PUSH
36490: LD_EXP 123
36494: IN
36495: NOT
36496: PUSH
36497: LD_VAR 0 2
36501: NOT
36502: OR
36503: IFFALSE 36507
// exit ;
36505: GO 36782
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36507: LD_ADDR_VAR 0 2
36511: PUSH
36512: LD_VAR 0 1
36516: PPUSH
36517: LD_VAR 0 2
36521: PPUSH
36522: LD_INT 1
36524: PPUSH
36525: LD_INT 1
36527: PPUSH
36528: CALL 42545 0 4
36532: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36533: LD_ADDR_VAR 0 5
36537: PUSH
36538: LD_EXP 123
36542: PPUSH
36543: LD_VAR 0 1
36547: PPUSH
36548: CALL 41895 0 2
36552: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36553: LD_EXP 124
36557: PUSH
36558: LD_VAR 0 5
36562: ARRAY
36563: PUSH
36564: LD_EXP 125
36568: LESS
36569: IFFALSE 36758
// begin for i := 1 to vehicles do
36571: LD_ADDR_VAR 0 4
36575: PUSH
36576: DOUBLE
36577: LD_INT 1
36579: DEC
36580: ST_TO_ADDR
36581: LD_VAR 0 2
36585: PUSH
36586: FOR_TO
36587: IFFALSE 36756
// begin if hackTanksCaptured [ index ] = hackLimit then
36589: LD_EXP 124
36593: PUSH
36594: LD_VAR 0 5
36598: ARRAY
36599: PUSH
36600: LD_EXP 125
36604: EQUAL
36605: IFFALSE 36609
// break ;
36607: GO 36756
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36609: LD_ADDR_EXP 127
36613: PUSH
36614: LD_EXP 127
36618: PPUSH
36619: LD_VAR 0 5
36623: PPUSH
36624: LD_EXP 127
36628: PUSH
36629: LD_VAR 0 5
36633: ARRAY
36634: PUSH
36635: LD_INT 1
36637: PLUS
36638: PPUSH
36639: CALL_OW 1
36643: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36644: LD_ADDR_EXP 124
36648: PUSH
36649: LD_EXP 124
36653: PPUSH
36654: LD_VAR 0 5
36658: PUSH
36659: LD_EXP 124
36663: PUSH
36664: LD_VAR 0 5
36668: ARRAY
36669: PUSH
36670: LD_INT 1
36672: PLUS
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PPUSH
36678: LD_VAR 0 2
36682: PUSH
36683: LD_VAR 0 4
36687: ARRAY
36688: PUSH
36689: LD_VAR 0 2
36693: PUSH
36694: LD_VAR 0 4
36698: ARRAY
36699: PPUSH
36700: CALL_OW 255
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PPUSH
36709: CALL 42110 0 3
36713: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36714: LD_VAR 0 2
36718: PUSH
36719: LD_VAR 0 4
36723: ARRAY
36724: PPUSH
36725: LD_VAR 0 1
36729: PPUSH
36730: CALL_OW 255
36734: PPUSH
36735: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36739: LD_VAR 0 2
36743: PUSH
36744: LD_VAR 0 4
36748: ARRAY
36749: PPUSH
36750: CALL_OW 141
// end ;
36754: GO 36586
36756: POP
36757: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36758: LD_VAR 0 1
36762: PPUSH
36763: LD_EXP 124
36767: PUSH
36768: LD_VAR 0 5
36772: ARRAY
36773: PUSH
36774: LD_INT 0
36776: PLUS
36777: PPUSH
36778: CALL_OW 505
// end ;
36782: LD_VAR 0 3
36786: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36787: LD_INT 0
36789: PPUSH
36790: PPUSH
36791: PPUSH
36792: PPUSH
// if not hack in hackTanks then
36793: LD_VAR 0 1
36797: PUSH
36798: LD_EXP 123
36802: IN
36803: NOT
36804: IFFALSE 36808
// exit ;
36806: GO 37048
// index := GetElementIndex ( hackTanks , hack ) ;
36808: LD_ADDR_VAR 0 4
36812: PUSH
36813: LD_EXP 123
36817: PPUSH
36818: LD_VAR 0 1
36822: PPUSH
36823: CALL 41895 0 2
36827: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36828: LD_ADDR_VAR 0 3
36832: PUSH
36833: DOUBLE
36834: LD_EXP 124
36838: PUSH
36839: LD_VAR 0 4
36843: ARRAY
36844: INC
36845: ST_TO_ADDR
36846: LD_INT 1
36848: PUSH
36849: FOR_DOWNTO
36850: IFFALSE 37022
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36852: LD_ADDR_VAR 0 5
36856: PUSH
36857: LD_EXP 124
36861: PUSH
36862: LD_VAR 0 4
36866: ARRAY
36867: PUSH
36868: LD_VAR 0 3
36872: ARRAY
36873: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36874: LD_VAR 0 5
36878: PUSH
36879: LD_INT 1
36881: ARRAY
36882: PPUSH
36883: CALL_OW 302
36887: NOT
36888: PUSH
36889: LD_VAR 0 5
36893: PUSH
36894: LD_INT 1
36896: ARRAY
36897: PPUSH
36898: CALL_OW 255
36902: PUSH
36903: LD_VAR 0 1
36907: PPUSH
36908: CALL_OW 255
36912: NONEQUAL
36913: OR
36914: IFFALSE 37020
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36916: LD_VAR 0 5
36920: PUSH
36921: LD_INT 1
36923: ARRAY
36924: PPUSH
36925: CALL_OW 305
36929: PUSH
36930: LD_VAR 0 5
36934: PUSH
36935: LD_INT 1
36937: ARRAY
36938: PPUSH
36939: CALL_OW 255
36943: PUSH
36944: LD_VAR 0 1
36948: PPUSH
36949: CALL_OW 255
36953: EQUAL
36954: AND
36955: IFFALSE 36979
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36957: LD_VAR 0 5
36961: PUSH
36962: LD_INT 1
36964: ARRAY
36965: PPUSH
36966: LD_VAR 0 5
36970: PUSH
36971: LD_INT 2
36973: ARRAY
36974: PPUSH
36975: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36979: LD_ADDR_EXP 124
36983: PUSH
36984: LD_EXP 124
36988: PPUSH
36989: LD_VAR 0 4
36993: PPUSH
36994: LD_EXP 124
36998: PUSH
36999: LD_VAR 0 4
37003: ARRAY
37004: PPUSH
37005: LD_VAR 0 3
37009: PPUSH
37010: CALL_OW 3
37014: PPUSH
37015: CALL_OW 1
37019: ST_TO_ADDR
// end ; end ;
37020: GO 36849
37022: POP
37023: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37024: LD_VAR 0 1
37028: PPUSH
37029: LD_EXP 124
37033: PUSH
37034: LD_VAR 0 4
37038: ARRAY
37039: PUSH
37040: LD_INT 0
37042: PLUS
37043: PPUSH
37044: CALL_OW 505
// end ;
37048: LD_VAR 0 2
37052: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37053: LD_INT 0
37055: PPUSH
37056: PPUSH
37057: PPUSH
37058: PPUSH
// if not hack in hackTanks then
37059: LD_VAR 0 1
37063: PUSH
37064: LD_EXP 123
37068: IN
37069: NOT
37070: IFFALSE 37074
// exit ;
37072: GO 37159
// index := GetElementIndex ( hackTanks , hack ) ;
37074: LD_ADDR_VAR 0 5
37078: PUSH
37079: LD_EXP 123
37083: PPUSH
37084: LD_VAR 0 1
37088: PPUSH
37089: CALL 41895 0 2
37093: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37094: LD_ADDR_VAR 0 4
37098: PUSH
37099: DOUBLE
37100: LD_INT 1
37102: DEC
37103: ST_TO_ADDR
37104: LD_EXP 124
37108: PUSH
37109: LD_VAR 0 5
37113: ARRAY
37114: PUSH
37115: FOR_TO
37116: IFFALSE 37157
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37118: LD_EXP 124
37122: PUSH
37123: LD_VAR 0 5
37127: ARRAY
37128: PUSH
37129: LD_VAR 0 4
37133: ARRAY
37134: PUSH
37135: LD_INT 1
37137: ARRAY
37138: PUSH
37139: LD_VAR 0 2
37143: EQUAL
37144: IFFALSE 37155
// KillUnit ( vehicle ) ;
37146: LD_VAR 0 2
37150: PPUSH
37151: CALL_OW 66
37155: GO 37115
37157: POP
37158: POP
// end ; end_of_file
37159: LD_VAR 0 3
37163: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37164: LD_INT 0
37166: PPUSH
37167: PPUSH
// if exist_mode then
37168: LD_VAR 0 2
37172: IFFALSE 37197
// unit := CreateCharacter ( prefix & ident ) else
37174: LD_ADDR_VAR 0 5
37178: PUSH
37179: LD_VAR 0 3
37183: PUSH
37184: LD_VAR 0 1
37188: STR
37189: PPUSH
37190: CALL_OW 34
37194: ST_TO_ADDR
37195: GO 37212
// unit := NewCharacter ( ident ) ;
37197: LD_ADDR_VAR 0 5
37201: PUSH
37202: LD_VAR 0 1
37206: PPUSH
37207: CALL_OW 25
37211: ST_TO_ADDR
// result := unit ;
37212: LD_ADDR_VAR 0 4
37216: PUSH
37217: LD_VAR 0 5
37221: ST_TO_ADDR
// end ;
37222: LD_VAR 0 4
37226: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37227: LD_INT 0
37229: PPUSH
37230: PPUSH
// if not side or not nation then
37231: LD_VAR 0 1
37235: NOT
37236: PUSH
37237: LD_VAR 0 2
37241: NOT
37242: OR
37243: IFFALSE 37247
// exit ;
37245: GO 38011
// case nation of nation_american :
37247: LD_VAR 0 2
37251: PUSH
37252: LD_INT 1
37254: DOUBLE
37255: EQUAL
37256: IFTRUE 37260
37258: GO 37474
37260: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37261: LD_ADDR_VAR 0 4
37265: PUSH
37266: LD_INT 35
37268: PUSH
37269: LD_INT 45
37271: PUSH
37272: LD_INT 46
37274: PUSH
37275: LD_INT 47
37277: PUSH
37278: LD_INT 82
37280: PUSH
37281: LD_INT 83
37283: PUSH
37284: LD_INT 84
37286: PUSH
37287: LD_INT 85
37289: PUSH
37290: LD_INT 86
37292: PUSH
37293: LD_INT 1
37295: PUSH
37296: LD_INT 2
37298: PUSH
37299: LD_INT 6
37301: PUSH
37302: LD_INT 15
37304: PUSH
37305: LD_INT 16
37307: PUSH
37308: LD_INT 7
37310: PUSH
37311: LD_INT 12
37313: PUSH
37314: LD_INT 13
37316: PUSH
37317: LD_INT 10
37319: PUSH
37320: LD_INT 14
37322: PUSH
37323: LD_INT 20
37325: PUSH
37326: LD_INT 21
37328: PUSH
37329: LD_INT 22
37331: PUSH
37332: LD_INT 25
37334: PUSH
37335: LD_INT 32
37337: PUSH
37338: LD_INT 27
37340: PUSH
37341: LD_INT 36
37343: PUSH
37344: LD_INT 69
37346: PUSH
37347: LD_INT 39
37349: PUSH
37350: LD_INT 34
37352: PUSH
37353: LD_INT 40
37355: PUSH
37356: LD_INT 48
37358: PUSH
37359: LD_INT 49
37361: PUSH
37362: LD_INT 50
37364: PUSH
37365: LD_INT 51
37367: PUSH
37368: LD_INT 52
37370: PUSH
37371: LD_INT 53
37373: PUSH
37374: LD_INT 54
37376: PUSH
37377: LD_INT 55
37379: PUSH
37380: LD_INT 56
37382: PUSH
37383: LD_INT 57
37385: PUSH
37386: LD_INT 58
37388: PUSH
37389: LD_INT 59
37391: PUSH
37392: LD_INT 60
37394: PUSH
37395: LD_INT 61
37397: PUSH
37398: LD_INT 62
37400: PUSH
37401: LD_INT 80
37403: PUSH
37404: LD_INT 82
37406: PUSH
37407: LD_INT 83
37409: PUSH
37410: LD_INT 84
37412: PUSH
37413: LD_INT 85
37415: PUSH
37416: LD_INT 86
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: ST_TO_ADDR
37472: GO 37935
37474: LD_INT 2
37476: DOUBLE
37477: EQUAL
37478: IFTRUE 37482
37480: GO 37704
37482: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
37483: LD_ADDR_VAR 0 4
37487: PUSH
37488: LD_INT 35
37490: PUSH
37491: LD_INT 45
37493: PUSH
37494: LD_INT 46
37496: PUSH
37497: LD_INT 47
37499: PUSH
37500: LD_INT 82
37502: PUSH
37503: LD_INT 83
37505: PUSH
37506: LD_INT 84
37508: PUSH
37509: LD_INT 85
37511: PUSH
37512: LD_INT 87
37514: PUSH
37515: LD_INT 70
37517: PUSH
37518: LD_INT 1
37520: PUSH
37521: LD_INT 11
37523: PUSH
37524: LD_INT 3
37526: PUSH
37527: LD_INT 4
37529: PUSH
37530: LD_INT 5
37532: PUSH
37533: LD_INT 6
37535: PUSH
37536: LD_INT 15
37538: PUSH
37539: LD_INT 18
37541: PUSH
37542: LD_INT 7
37544: PUSH
37545: LD_INT 17
37547: PUSH
37548: LD_INT 8
37550: PUSH
37551: LD_INT 20
37553: PUSH
37554: LD_INT 21
37556: PUSH
37557: LD_INT 22
37559: PUSH
37560: LD_INT 72
37562: PUSH
37563: LD_INT 26
37565: PUSH
37566: LD_INT 69
37568: PUSH
37569: LD_INT 39
37571: PUSH
37572: LD_INT 40
37574: PUSH
37575: LD_INT 41
37577: PUSH
37578: LD_INT 42
37580: PUSH
37581: LD_INT 43
37583: PUSH
37584: LD_INT 48
37586: PUSH
37587: LD_INT 49
37589: PUSH
37590: LD_INT 50
37592: PUSH
37593: LD_INT 51
37595: PUSH
37596: LD_INT 52
37598: PUSH
37599: LD_INT 53
37601: PUSH
37602: LD_INT 54
37604: PUSH
37605: LD_INT 55
37607: PUSH
37608: LD_INT 56
37610: PUSH
37611: LD_INT 60
37613: PUSH
37614: LD_INT 61
37616: PUSH
37617: LD_INT 62
37619: PUSH
37620: LD_INT 66
37622: PUSH
37623: LD_INT 67
37625: PUSH
37626: LD_INT 68
37628: PUSH
37629: LD_INT 81
37631: PUSH
37632: LD_INT 82
37634: PUSH
37635: LD_INT 83
37637: PUSH
37638: LD_INT 84
37640: PUSH
37641: LD_INT 85
37643: PUSH
37644: LD_INT 87
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: ST_TO_ADDR
37702: GO 37935
37704: LD_INT 3
37706: DOUBLE
37707: EQUAL
37708: IFTRUE 37712
37710: GO 37934
37712: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37713: LD_ADDR_VAR 0 4
37717: PUSH
37718: LD_INT 46
37720: PUSH
37721: LD_INT 47
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: LD_INT 2
37729: PUSH
37730: LD_INT 82
37732: PUSH
37733: LD_INT 83
37735: PUSH
37736: LD_INT 84
37738: PUSH
37739: LD_INT 85
37741: PUSH
37742: LD_INT 86
37744: PUSH
37745: LD_INT 11
37747: PUSH
37748: LD_INT 9
37750: PUSH
37751: LD_INT 20
37753: PUSH
37754: LD_INT 19
37756: PUSH
37757: LD_INT 21
37759: PUSH
37760: LD_INT 24
37762: PUSH
37763: LD_INT 22
37765: PUSH
37766: LD_INT 25
37768: PUSH
37769: LD_INT 28
37771: PUSH
37772: LD_INT 29
37774: PUSH
37775: LD_INT 30
37777: PUSH
37778: LD_INT 31
37780: PUSH
37781: LD_INT 37
37783: PUSH
37784: LD_INT 38
37786: PUSH
37787: LD_INT 32
37789: PUSH
37790: LD_INT 27
37792: PUSH
37793: LD_INT 33
37795: PUSH
37796: LD_INT 69
37798: PUSH
37799: LD_INT 39
37801: PUSH
37802: LD_INT 34
37804: PUSH
37805: LD_INT 40
37807: PUSH
37808: LD_INT 71
37810: PUSH
37811: LD_INT 23
37813: PUSH
37814: LD_INT 44
37816: PUSH
37817: LD_INT 48
37819: PUSH
37820: LD_INT 49
37822: PUSH
37823: LD_INT 50
37825: PUSH
37826: LD_INT 51
37828: PUSH
37829: LD_INT 52
37831: PUSH
37832: LD_INT 53
37834: PUSH
37835: LD_INT 54
37837: PUSH
37838: LD_INT 55
37840: PUSH
37841: LD_INT 56
37843: PUSH
37844: LD_INT 57
37846: PUSH
37847: LD_INT 58
37849: PUSH
37850: LD_INT 59
37852: PUSH
37853: LD_INT 63
37855: PUSH
37856: LD_INT 64
37858: PUSH
37859: LD_INT 65
37861: PUSH
37862: LD_INT 82
37864: PUSH
37865: LD_INT 83
37867: PUSH
37868: LD_INT 84
37870: PUSH
37871: LD_INT 85
37873: PUSH
37874: LD_INT 86
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: ST_TO_ADDR
37932: GO 37935
37934: POP
// if state > - 1 and state < 3 then
37935: LD_VAR 0 3
37939: PUSH
37940: LD_INT 1
37942: NEG
37943: GREATER
37944: PUSH
37945: LD_VAR 0 3
37949: PUSH
37950: LD_INT 3
37952: LESS
37953: AND
37954: IFFALSE 38011
// for i in result do
37956: LD_ADDR_VAR 0 5
37960: PUSH
37961: LD_VAR 0 4
37965: PUSH
37966: FOR_IN
37967: IFFALSE 38009
// if GetTech ( i , side ) <> state then
37969: LD_VAR 0 5
37973: PPUSH
37974: LD_VAR 0 1
37978: PPUSH
37979: CALL_OW 321
37983: PUSH
37984: LD_VAR 0 3
37988: NONEQUAL
37989: IFFALSE 38007
// result := result diff i ;
37991: LD_ADDR_VAR 0 4
37995: PUSH
37996: LD_VAR 0 4
38000: PUSH
38001: LD_VAR 0 5
38005: DIFF
38006: ST_TO_ADDR
38007: GO 37966
38009: POP
38010: POP
// end ;
38011: LD_VAR 0 4
38015: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38016: LD_INT 0
38018: PPUSH
38019: PPUSH
38020: PPUSH
// result := true ;
38021: LD_ADDR_VAR 0 3
38025: PUSH
38026: LD_INT 1
38028: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38029: LD_ADDR_VAR 0 5
38033: PUSH
38034: LD_VAR 0 2
38038: PPUSH
38039: CALL_OW 480
38043: ST_TO_ADDR
// if not tmp then
38044: LD_VAR 0 5
38048: NOT
38049: IFFALSE 38053
// exit ;
38051: GO 38102
// for i in tmp do
38053: LD_ADDR_VAR 0 4
38057: PUSH
38058: LD_VAR 0 5
38062: PUSH
38063: FOR_IN
38064: IFFALSE 38100
// if GetTech ( i , side ) <> state_researched then
38066: LD_VAR 0 4
38070: PPUSH
38071: LD_VAR 0 1
38075: PPUSH
38076: CALL_OW 321
38080: PUSH
38081: LD_INT 2
38083: NONEQUAL
38084: IFFALSE 38098
// begin result := false ;
38086: LD_ADDR_VAR 0 3
38090: PUSH
38091: LD_INT 0
38093: ST_TO_ADDR
// exit ;
38094: POP
38095: POP
38096: GO 38102
// end ;
38098: GO 38063
38100: POP
38101: POP
// end ;
38102: LD_VAR 0 3
38106: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38107: LD_INT 0
38109: PPUSH
38110: PPUSH
38111: PPUSH
38112: PPUSH
38113: PPUSH
38114: PPUSH
38115: PPUSH
38116: PPUSH
38117: PPUSH
38118: PPUSH
38119: PPUSH
38120: PPUSH
38121: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38122: LD_VAR 0 1
38126: NOT
38127: PUSH
38128: LD_VAR 0 1
38132: PPUSH
38133: CALL_OW 257
38137: PUSH
38138: LD_INT 9
38140: NONEQUAL
38141: OR
38142: IFFALSE 38146
// exit ;
38144: GO 38719
// side := GetSide ( unit ) ;
38146: LD_ADDR_VAR 0 9
38150: PUSH
38151: LD_VAR 0 1
38155: PPUSH
38156: CALL_OW 255
38160: ST_TO_ADDR
// tech_space := tech_spacanom ;
38161: LD_ADDR_VAR 0 12
38165: PUSH
38166: LD_INT 29
38168: ST_TO_ADDR
// tech_time := tech_taurad ;
38169: LD_ADDR_VAR 0 13
38173: PUSH
38174: LD_INT 28
38176: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38177: LD_ADDR_VAR 0 11
38181: PUSH
38182: LD_VAR 0 1
38186: PPUSH
38187: CALL_OW 310
38191: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38192: LD_VAR 0 11
38196: PPUSH
38197: CALL_OW 247
38201: PUSH
38202: LD_INT 2
38204: EQUAL
38205: IFFALSE 38209
// exit ;
38207: GO 38719
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38209: LD_ADDR_VAR 0 8
38213: PUSH
38214: LD_INT 81
38216: PUSH
38217: LD_VAR 0 9
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 3
38228: PUSH
38229: LD_INT 21
38231: PUSH
38232: LD_INT 3
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PPUSH
38247: CALL_OW 69
38251: ST_TO_ADDR
// if not tmp then
38252: LD_VAR 0 8
38256: NOT
38257: IFFALSE 38261
// exit ;
38259: GO 38719
// if in_unit then
38261: LD_VAR 0 11
38265: IFFALSE 38289
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38267: LD_ADDR_VAR 0 10
38271: PUSH
38272: LD_VAR 0 8
38276: PPUSH
38277: LD_VAR 0 11
38281: PPUSH
38282: CALL_OW 74
38286: ST_TO_ADDR
38287: GO 38309
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38289: LD_ADDR_VAR 0 10
38293: PUSH
38294: LD_VAR 0 8
38298: PPUSH
38299: LD_VAR 0 1
38303: PPUSH
38304: CALL_OW 74
38308: ST_TO_ADDR
// if not enemy then
38309: LD_VAR 0 10
38313: NOT
38314: IFFALSE 38318
// exit ;
38316: GO 38719
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38318: LD_VAR 0 11
38322: PUSH
38323: LD_VAR 0 11
38327: PPUSH
38328: LD_VAR 0 10
38332: PPUSH
38333: CALL_OW 296
38337: PUSH
38338: LD_INT 13
38340: GREATER
38341: AND
38342: PUSH
38343: LD_VAR 0 1
38347: PPUSH
38348: LD_VAR 0 10
38352: PPUSH
38353: CALL_OW 296
38357: PUSH
38358: LD_INT 12
38360: GREATER
38361: OR
38362: IFFALSE 38366
// exit ;
38364: GO 38719
// missile := [ 1 ] ;
38366: LD_ADDR_VAR 0 14
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: EMPTY
38375: LIST
38376: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38377: LD_VAR 0 9
38381: PPUSH
38382: LD_VAR 0 12
38386: PPUSH
38387: CALL_OW 325
38391: IFFALSE 38420
// missile := Insert ( missile , missile + 1 , 2 ) ;
38393: LD_ADDR_VAR 0 14
38397: PUSH
38398: LD_VAR 0 14
38402: PPUSH
38403: LD_VAR 0 14
38407: PUSH
38408: LD_INT 1
38410: PLUS
38411: PPUSH
38412: LD_INT 2
38414: PPUSH
38415: CALL_OW 2
38419: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38420: LD_VAR 0 9
38424: PPUSH
38425: LD_VAR 0 13
38429: PPUSH
38430: CALL_OW 325
38434: PUSH
38435: LD_VAR 0 10
38439: PPUSH
38440: CALL_OW 255
38444: PPUSH
38445: LD_VAR 0 13
38449: PPUSH
38450: CALL_OW 325
38454: NOT
38455: AND
38456: IFFALSE 38485
// missile := Insert ( missile , missile + 1 , 3 ) ;
38458: LD_ADDR_VAR 0 14
38462: PUSH
38463: LD_VAR 0 14
38467: PPUSH
38468: LD_VAR 0 14
38472: PUSH
38473: LD_INT 1
38475: PLUS
38476: PPUSH
38477: LD_INT 3
38479: PPUSH
38480: CALL_OW 2
38484: ST_TO_ADDR
// if missile < 2 then
38485: LD_VAR 0 14
38489: PUSH
38490: LD_INT 2
38492: LESS
38493: IFFALSE 38497
// exit ;
38495: GO 38719
// x := GetX ( enemy ) ;
38497: LD_ADDR_VAR 0 4
38501: PUSH
38502: LD_VAR 0 10
38506: PPUSH
38507: CALL_OW 250
38511: ST_TO_ADDR
// y := GetY ( enemy ) ;
38512: LD_ADDR_VAR 0 5
38516: PUSH
38517: LD_VAR 0 10
38521: PPUSH
38522: CALL_OW 251
38526: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38527: LD_ADDR_VAR 0 6
38531: PUSH
38532: LD_VAR 0 4
38536: PUSH
38537: LD_INT 1
38539: NEG
38540: PPUSH
38541: LD_INT 1
38543: PPUSH
38544: CALL_OW 12
38548: PLUS
38549: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38550: LD_ADDR_VAR 0 7
38554: PUSH
38555: LD_VAR 0 5
38559: PUSH
38560: LD_INT 1
38562: NEG
38563: PPUSH
38564: LD_INT 1
38566: PPUSH
38567: CALL_OW 12
38571: PLUS
38572: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38573: LD_VAR 0 6
38577: PPUSH
38578: LD_VAR 0 7
38582: PPUSH
38583: CALL_OW 488
38587: NOT
38588: IFFALSE 38610
// begin _x := x ;
38590: LD_ADDR_VAR 0 6
38594: PUSH
38595: LD_VAR 0 4
38599: ST_TO_ADDR
// _y := y ;
38600: LD_ADDR_VAR 0 7
38604: PUSH
38605: LD_VAR 0 5
38609: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38610: LD_ADDR_VAR 0 3
38614: PUSH
38615: LD_INT 1
38617: PPUSH
38618: LD_VAR 0 14
38622: PPUSH
38623: CALL_OW 12
38627: ST_TO_ADDR
// case i of 1 :
38628: LD_VAR 0 3
38632: PUSH
38633: LD_INT 1
38635: DOUBLE
38636: EQUAL
38637: IFTRUE 38641
38639: GO 38658
38641: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38642: LD_VAR 0 1
38646: PPUSH
38647: LD_VAR 0 10
38651: PPUSH
38652: CALL_OW 115
38656: GO 38719
38658: LD_INT 2
38660: DOUBLE
38661: EQUAL
38662: IFTRUE 38666
38664: GO 38688
38666: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38667: LD_VAR 0 1
38671: PPUSH
38672: LD_VAR 0 6
38676: PPUSH
38677: LD_VAR 0 7
38681: PPUSH
38682: CALL_OW 153
38686: GO 38719
38688: LD_INT 3
38690: DOUBLE
38691: EQUAL
38692: IFTRUE 38696
38694: GO 38718
38696: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38697: LD_VAR 0 1
38701: PPUSH
38702: LD_VAR 0 6
38706: PPUSH
38707: LD_VAR 0 7
38711: PPUSH
38712: CALL_OW 154
38716: GO 38719
38718: POP
// end ;
38719: LD_VAR 0 2
38723: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38724: LD_INT 0
38726: PPUSH
38727: PPUSH
38728: PPUSH
38729: PPUSH
38730: PPUSH
38731: PPUSH
// if not unit or not building then
38732: LD_VAR 0 1
38736: NOT
38737: PUSH
38738: LD_VAR 0 2
38742: NOT
38743: OR
38744: IFFALSE 38748
// exit ;
38746: GO 38906
// x := GetX ( building ) ;
38748: LD_ADDR_VAR 0 5
38752: PUSH
38753: LD_VAR 0 2
38757: PPUSH
38758: CALL_OW 250
38762: ST_TO_ADDR
// y := GetY ( building ) ;
38763: LD_ADDR_VAR 0 6
38767: PUSH
38768: LD_VAR 0 2
38772: PPUSH
38773: CALL_OW 251
38777: ST_TO_ADDR
// for i = 0 to 5 do
38778: LD_ADDR_VAR 0 4
38782: PUSH
38783: DOUBLE
38784: LD_INT 0
38786: DEC
38787: ST_TO_ADDR
38788: LD_INT 5
38790: PUSH
38791: FOR_TO
38792: IFFALSE 38904
// begin _x := ShiftX ( x , i , 3 ) ;
38794: LD_ADDR_VAR 0 7
38798: PUSH
38799: LD_VAR 0 5
38803: PPUSH
38804: LD_VAR 0 4
38808: PPUSH
38809: LD_INT 3
38811: PPUSH
38812: CALL_OW 272
38816: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38817: LD_ADDR_VAR 0 8
38821: PUSH
38822: LD_VAR 0 6
38826: PPUSH
38827: LD_VAR 0 4
38831: PPUSH
38832: LD_INT 3
38834: PPUSH
38835: CALL_OW 273
38839: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38840: LD_VAR 0 7
38844: PPUSH
38845: LD_VAR 0 8
38849: PPUSH
38850: CALL_OW 488
38854: NOT
38855: IFFALSE 38859
// continue ;
38857: GO 38791
// if HexInfo ( _x , _y ) = 0 then
38859: LD_VAR 0 7
38863: PPUSH
38864: LD_VAR 0 8
38868: PPUSH
38869: CALL_OW 428
38873: PUSH
38874: LD_INT 0
38876: EQUAL
38877: IFFALSE 38902
// begin ComMoveXY ( unit , _x , _y ) ;
38879: LD_VAR 0 1
38883: PPUSH
38884: LD_VAR 0 7
38888: PPUSH
38889: LD_VAR 0 8
38893: PPUSH
38894: CALL_OW 111
// exit ;
38898: POP
38899: POP
38900: GO 38906
// end ; end ;
38902: GO 38791
38904: POP
38905: POP
// end ;
38906: LD_VAR 0 3
38910: RET
// export function ScanBase ( side , base_area ) ; begin
38911: LD_INT 0
38913: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38914: LD_ADDR_VAR 0 3
38918: PUSH
38919: LD_VAR 0 2
38923: PPUSH
38924: LD_INT 81
38926: PUSH
38927: LD_VAR 0 1
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PPUSH
38936: CALL_OW 70
38940: ST_TO_ADDR
// end ;
38941: LD_VAR 0 3
38945: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38946: LD_INT 0
38948: PPUSH
38949: PPUSH
38950: PPUSH
38951: PPUSH
// result := false ;
38952: LD_ADDR_VAR 0 2
38956: PUSH
38957: LD_INT 0
38959: ST_TO_ADDR
// side := GetSide ( unit ) ;
38960: LD_ADDR_VAR 0 3
38964: PUSH
38965: LD_VAR 0 1
38969: PPUSH
38970: CALL_OW 255
38974: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38975: LD_ADDR_VAR 0 4
38979: PUSH
38980: LD_VAR 0 1
38984: PPUSH
38985: CALL_OW 248
38989: ST_TO_ADDR
// case nat of 1 :
38990: LD_VAR 0 4
38994: PUSH
38995: LD_INT 1
38997: DOUBLE
38998: EQUAL
38999: IFTRUE 39003
39001: GO 39014
39003: POP
// tech := tech_lassight ; 2 :
39004: LD_ADDR_VAR 0 5
39008: PUSH
39009: LD_INT 12
39011: ST_TO_ADDR
39012: GO 39053
39014: LD_INT 2
39016: DOUBLE
39017: EQUAL
39018: IFTRUE 39022
39020: GO 39033
39022: POP
// tech := tech_mortar ; 3 :
39023: LD_ADDR_VAR 0 5
39027: PUSH
39028: LD_INT 41
39030: ST_TO_ADDR
39031: GO 39053
39033: LD_INT 3
39035: DOUBLE
39036: EQUAL
39037: IFTRUE 39041
39039: GO 39052
39041: POP
// tech := tech_bazooka ; end ;
39042: LD_ADDR_VAR 0 5
39046: PUSH
39047: LD_INT 44
39049: ST_TO_ADDR
39050: GO 39053
39052: POP
// if Researched ( side , tech ) then
39053: LD_VAR 0 3
39057: PPUSH
39058: LD_VAR 0 5
39062: PPUSH
39063: CALL_OW 325
39067: IFFALSE 39094
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
39069: LD_ADDR_VAR 0 2
39073: PUSH
39074: LD_INT 5
39076: PUSH
39077: LD_INT 8
39079: PUSH
39080: LD_INT 9
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: LIST
39087: PUSH
39088: LD_VAR 0 4
39092: ARRAY
39093: ST_TO_ADDR
// end ;
39094: LD_VAR 0 2
39098: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39099: LD_INT 0
39101: PPUSH
39102: PPUSH
39103: PPUSH
// if not mines then
39104: LD_VAR 0 2
39108: NOT
39109: IFFALSE 39113
// exit ;
39111: GO 39257
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39113: LD_ADDR_VAR 0 5
39117: PUSH
39118: LD_INT 81
39120: PUSH
39121: LD_VAR 0 1
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 3
39132: PUSH
39133: LD_INT 21
39135: PUSH
39136: LD_INT 3
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PPUSH
39151: CALL_OW 69
39155: ST_TO_ADDR
// for i in mines do
39156: LD_ADDR_VAR 0 4
39160: PUSH
39161: LD_VAR 0 2
39165: PUSH
39166: FOR_IN
39167: IFFALSE 39255
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39169: LD_VAR 0 4
39173: PUSH
39174: LD_INT 1
39176: ARRAY
39177: PPUSH
39178: LD_VAR 0 4
39182: PUSH
39183: LD_INT 2
39185: ARRAY
39186: PPUSH
39187: CALL_OW 458
39191: NOT
39192: IFFALSE 39196
// continue ;
39194: GO 39166
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39196: LD_VAR 0 4
39200: PUSH
39201: LD_INT 1
39203: ARRAY
39204: PPUSH
39205: LD_VAR 0 4
39209: PUSH
39210: LD_INT 2
39212: ARRAY
39213: PPUSH
39214: CALL_OW 428
39218: PUSH
39219: LD_VAR 0 5
39223: IN
39224: IFFALSE 39253
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39226: LD_VAR 0 4
39230: PUSH
39231: LD_INT 1
39233: ARRAY
39234: PPUSH
39235: LD_VAR 0 4
39239: PUSH
39240: LD_INT 2
39242: ARRAY
39243: PPUSH
39244: LD_VAR 0 1
39248: PPUSH
39249: CALL_OW 456
// end ;
39253: GO 39166
39255: POP
39256: POP
// end ;
39257: LD_VAR 0 3
39261: RET
// export function Count ( array ) ; var i ; begin
39262: LD_INT 0
39264: PPUSH
39265: PPUSH
// result := 0 ;
39266: LD_ADDR_VAR 0 2
39270: PUSH
39271: LD_INT 0
39273: ST_TO_ADDR
// for i in array do
39274: LD_ADDR_VAR 0 3
39278: PUSH
39279: LD_VAR 0 1
39283: PUSH
39284: FOR_IN
39285: IFFALSE 39309
// if i then
39287: LD_VAR 0 3
39291: IFFALSE 39307
// result := result + 1 ;
39293: LD_ADDR_VAR 0 2
39297: PUSH
39298: LD_VAR 0 2
39302: PUSH
39303: LD_INT 1
39305: PLUS
39306: ST_TO_ADDR
39307: GO 39284
39309: POP
39310: POP
// end ;
39311: LD_VAR 0 2
39315: RET
// export function IsEmpty ( building ) ; begin
39316: LD_INT 0
39318: PPUSH
// if not building then
39319: LD_VAR 0 1
39323: NOT
39324: IFFALSE 39328
// exit ;
39326: GO 39371
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39328: LD_ADDR_VAR 0 2
39332: PUSH
39333: LD_VAR 0 1
39337: PUSH
39338: LD_INT 22
39340: PUSH
39341: LD_VAR 0 1
39345: PPUSH
39346: CALL_OW 255
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 58
39357: PUSH
39358: EMPTY
39359: LIST
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PPUSH
39365: CALL_OW 69
39369: IN
39370: ST_TO_ADDR
// end ;
39371: LD_VAR 0 2
39375: RET
// export function IsNotFull ( building ) ; begin
39376: LD_INT 0
39378: PPUSH
// if not building then
39379: LD_VAR 0 1
39383: NOT
39384: IFFALSE 39388
// exit ;
39386: GO 39407
// result := UnitsInside ( building ) < 6 ;
39388: LD_ADDR_VAR 0 2
39392: PUSH
39393: LD_VAR 0 1
39397: PPUSH
39398: CALL_OW 313
39402: PUSH
39403: LD_INT 6
39405: LESS
39406: ST_TO_ADDR
// end ;
39407: LD_VAR 0 2
39411: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39412: LD_INT 0
39414: PPUSH
39415: PPUSH
39416: PPUSH
39417: PPUSH
// tmp := [ ] ;
39418: LD_ADDR_VAR 0 3
39422: PUSH
39423: EMPTY
39424: ST_TO_ADDR
// list := [ ] ;
39425: LD_ADDR_VAR 0 5
39429: PUSH
39430: EMPTY
39431: ST_TO_ADDR
// for i = 16 to 25 do
39432: LD_ADDR_VAR 0 4
39436: PUSH
39437: DOUBLE
39438: LD_INT 16
39440: DEC
39441: ST_TO_ADDR
39442: LD_INT 25
39444: PUSH
39445: FOR_TO
39446: IFFALSE 39519
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39448: LD_ADDR_VAR 0 3
39452: PUSH
39453: LD_VAR 0 3
39457: PUSH
39458: LD_INT 22
39460: PUSH
39461: LD_VAR 0 1
39465: PPUSH
39466: CALL_OW 255
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 91
39477: PUSH
39478: LD_VAR 0 1
39482: PUSH
39483: LD_INT 6
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 30
39493: PUSH
39494: LD_VAR 0 4
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: LIST
39507: PUSH
39508: EMPTY
39509: LIST
39510: PPUSH
39511: CALL_OW 69
39515: ADD
39516: ST_TO_ADDR
39517: GO 39445
39519: POP
39520: POP
// for i = 1 to tmp do
39521: LD_ADDR_VAR 0 4
39525: PUSH
39526: DOUBLE
39527: LD_INT 1
39529: DEC
39530: ST_TO_ADDR
39531: LD_VAR 0 3
39535: PUSH
39536: FOR_TO
39537: IFFALSE 39625
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39539: LD_ADDR_VAR 0 5
39543: PUSH
39544: LD_VAR 0 5
39548: PUSH
39549: LD_VAR 0 3
39553: PUSH
39554: LD_VAR 0 4
39558: ARRAY
39559: PPUSH
39560: CALL_OW 266
39564: PUSH
39565: LD_VAR 0 3
39569: PUSH
39570: LD_VAR 0 4
39574: ARRAY
39575: PPUSH
39576: CALL_OW 250
39580: PUSH
39581: LD_VAR 0 3
39585: PUSH
39586: LD_VAR 0 4
39590: ARRAY
39591: PPUSH
39592: CALL_OW 251
39596: PUSH
39597: LD_VAR 0 3
39601: PUSH
39602: LD_VAR 0 4
39606: ARRAY
39607: PPUSH
39608: CALL_OW 254
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: PUSH
39619: EMPTY
39620: LIST
39621: ADD
39622: ST_TO_ADDR
39623: GO 39536
39625: POP
39626: POP
// result := list ;
39627: LD_ADDR_VAR 0 2
39631: PUSH
39632: LD_VAR 0 5
39636: ST_TO_ADDR
// end ;
39637: LD_VAR 0 2
39641: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39642: LD_INT 0
39644: PPUSH
39645: PPUSH
39646: PPUSH
39647: PPUSH
39648: PPUSH
39649: PPUSH
39650: PPUSH
// if not factory then
39651: LD_VAR 0 1
39655: NOT
39656: IFFALSE 39660
// exit ;
39658: GO 40253
// if control = control_apeman then
39660: LD_VAR 0 4
39664: PUSH
39665: LD_INT 5
39667: EQUAL
39668: IFFALSE 39777
// begin tmp := UnitsInside ( factory ) ;
39670: LD_ADDR_VAR 0 8
39674: PUSH
39675: LD_VAR 0 1
39679: PPUSH
39680: CALL_OW 313
39684: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39685: LD_VAR 0 8
39689: PPUSH
39690: LD_INT 25
39692: PUSH
39693: LD_INT 12
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PPUSH
39700: CALL_OW 72
39704: NOT
39705: IFFALSE 39715
// control := control_manual ;
39707: LD_ADDR_VAR 0 4
39711: PUSH
39712: LD_INT 1
39714: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39715: LD_ADDR_VAR 0 8
39719: PUSH
39720: LD_VAR 0 1
39724: PPUSH
39725: CALL 39412 0 1
39729: ST_TO_ADDR
// if tmp then
39730: LD_VAR 0 8
39734: IFFALSE 39777
// begin for i in tmp do
39736: LD_ADDR_VAR 0 7
39740: PUSH
39741: LD_VAR 0 8
39745: PUSH
39746: FOR_IN
39747: IFFALSE 39775
// if i [ 1 ] = b_ext_radio then
39749: LD_VAR 0 7
39753: PUSH
39754: LD_INT 1
39756: ARRAY
39757: PUSH
39758: LD_INT 22
39760: EQUAL
39761: IFFALSE 39773
// begin control := control_remote ;
39763: LD_ADDR_VAR 0 4
39767: PUSH
39768: LD_INT 2
39770: ST_TO_ADDR
// break ;
39771: GO 39775
// end ;
39773: GO 39746
39775: POP
39776: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39777: LD_VAR 0 1
39781: PPUSH
39782: LD_VAR 0 2
39786: PPUSH
39787: LD_VAR 0 3
39791: PPUSH
39792: LD_VAR 0 4
39796: PPUSH
39797: LD_VAR 0 5
39801: PPUSH
39802: CALL_OW 448
39806: IFFALSE 39841
// begin result := [ chassis , engine , control , weapon ] ;
39808: LD_ADDR_VAR 0 6
39812: PUSH
39813: LD_VAR 0 2
39817: PUSH
39818: LD_VAR 0 3
39822: PUSH
39823: LD_VAR 0 4
39827: PUSH
39828: LD_VAR 0 5
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: ST_TO_ADDR
// exit ;
39839: GO 40253
// end ; _chassis := AvailableChassisList ( factory ) ;
39841: LD_ADDR_VAR 0 9
39845: PUSH
39846: LD_VAR 0 1
39850: PPUSH
39851: CALL_OW 475
39855: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39856: LD_ADDR_VAR 0 11
39860: PUSH
39861: LD_VAR 0 1
39865: PPUSH
39866: CALL_OW 476
39870: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39871: LD_ADDR_VAR 0 12
39875: PUSH
39876: LD_VAR 0 1
39880: PPUSH
39881: CALL_OW 477
39885: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39886: LD_ADDR_VAR 0 10
39890: PUSH
39891: LD_VAR 0 1
39895: PPUSH
39896: CALL_OW 478
39900: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39901: LD_VAR 0 9
39905: NOT
39906: PUSH
39907: LD_VAR 0 11
39911: NOT
39912: OR
39913: PUSH
39914: LD_VAR 0 12
39918: NOT
39919: OR
39920: PUSH
39921: LD_VAR 0 10
39925: NOT
39926: OR
39927: IFFALSE 39962
// begin result := [ chassis , engine , control , weapon ] ;
39929: LD_ADDR_VAR 0 6
39933: PUSH
39934: LD_VAR 0 2
39938: PUSH
39939: LD_VAR 0 3
39943: PUSH
39944: LD_VAR 0 4
39948: PUSH
39949: LD_VAR 0 5
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: ST_TO_ADDR
// exit ;
39960: GO 40253
// end ; if not chassis in _chassis then
39962: LD_VAR 0 2
39966: PUSH
39967: LD_VAR 0 9
39971: IN
39972: NOT
39973: IFFALSE 39999
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39975: LD_ADDR_VAR 0 2
39979: PUSH
39980: LD_VAR 0 9
39984: PUSH
39985: LD_INT 1
39987: PPUSH
39988: LD_VAR 0 9
39992: PPUSH
39993: CALL_OW 12
39997: ARRAY
39998: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39999: LD_VAR 0 2
40003: PPUSH
40004: LD_VAR 0 3
40008: PPUSH
40009: CALL 40258 0 2
40013: NOT
40014: IFFALSE 40073
// repeat engine := _engine [ 1 ] ;
40016: LD_ADDR_VAR 0 3
40020: PUSH
40021: LD_VAR 0 11
40025: PUSH
40026: LD_INT 1
40028: ARRAY
40029: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
40030: LD_ADDR_VAR 0 11
40034: PUSH
40035: LD_VAR 0 11
40039: PPUSH
40040: LD_INT 1
40042: PPUSH
40043: CALL_OW 3
40047: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
40048: LD_VAR 0 2
40052: PPUSH
40053: LD_VAR 0 3
40057: PPUSH
40058: CALL 40258 0 2
40062: PUSH
40063: LD_VAR 0 11
40067: PUSH
40068: EMPTY
40069: EQUAL
40070: OR
40071: IFFALSE 40016
// if not control in _control then
40073: LD_VAR 0 4
40077: PUSH
40078: LD_VAR 0 12
40082: IN
40083: NOT
40084: IFFALSE 40110
// control := _control [ rand ( 1 , _control ) ] ;
40086: LD_ADDR_VAR 0 4
40090: PUSH
40091: LD_VAR 0 12
40095: PUSH
40096: LD_INT 1
40098: PPUSH
40099: LD_VAR 0 12
40103: PPUSH
40104: CALL_OW 12
40108: ARRAY
40109: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40110: LD_VAR 0 2
40114: PPUSH
40115: LD_VAR 0 5
40119: PPUSH
40120: CALL 40478 0 2
40124: NOT
40125: IFFALSE 40184
// repeat weapon := _weapon [ 1 ] ;
40127: LD_ADDR_VAR 0 5
40131: PUSH
40132: LD_VAR 0 10
40136: PUSH
40137: LD_INT 1
40139: ARRAY
40140: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40141: LD_ADDR_VAR 0 10
40145: PUSH
40146: LD_VAR 0 10
40150: PPUSH
40151: LD_INT 1
40153: PPUSH
40154: CALL_OW 3
40158: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40159: LD_VAR 0 2
40163: PPUSH
40164: LD_VAR 0 5
40168: PPUSH
40169: CALL 40478 0 2
40173: PUSH
40174: LD_VAR 0 10
40178: PUSH
40179: EMPTY
40180: EQUAL
40181: OR
40182: IFFALSE 40127
// result := [ ] ;
40184: LD_ADDR_VAR 0 6
40188: PUSH
40189: EMPTY
40190: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40191: LD_VAR 0 1
40195: PPUSH
40196: LD_VAR 0 2
40200: PPUSH
40201: LD_VAR 0 3
40205: PPUSH
40206: LD_VAR 0 4
40210: PPUSH
40211: LD_VAR 0 5
40215: PPUSH
40216: CALL_OW 448
40220: IFFALSE 40253
// result := [ chassis , engine , control , weapon ] ;
40222: LD_ADDR_VAR 0 6
40226: PUSH
40227: LD_VAR 0 2
40231: PUSH
40232: LD_VAR 0 3
40236: PUSH
40237: LD_VAR 0 4
40241: PUSH
40242: LD_VAR 0 5
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: ST_TO_ADDR
// end ;
40253: LD_VAR 0 6
40257: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40258: LD_INT 0
40260: PPUSH
// if not chassis or not engine then
40261: LD_VAR 0 1
40265: NOT
40266: PUSH
40267: LD_VAR 0 2
40271: NOT
40272: OR
40273: IFFALSE 40277
// exit ;
40275: GO 40473
// case engine of engine_solar :
40277: LD_VAR 0 2
40281: PUSH
40282: LD_INT 2
40284: DOUBLE
40285: EQUAL
40286: IFTRUE 40290
40288: GO 40328
40290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40291: LD_ADDR_VAR 0 3
40295: PUSH
40296: LD_INT 11
40298: PUSH
40299: LD_INT 12
40301: PUSH
40302: LD_INT 13
40304: PUSH
40305: LD_INT 14
40307: PUSH
40308: LD_INT 1
40310: PUSH
40311: LD_INT 2
40313: PUSH
40314: LD_INT 3
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: ST_TO_ADDR
40326: GO 40457
40328: LD_INT 1
40330: DOUBLE
40331: EQUAL
40332: IFTRUE 40336
40334: GO 40398
40336: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40337: LD_ADDR_VAR 0 3
40341: PUSH
40342: LD_INT 11
40344: PUSH
40345: LD_INT 12
40347: PUSH
40348: LD_INT 13
40350: PUSH
40351: LD_INT 14
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: LD_INT 2
40359: PUSH
40360: LD_INT 3
40362: PUSH
40363: LD_INT 4
40365: PUSH
40366: LD_INT 5
40368: PUSH
40369: LD_INT 21
40371: PUSH
40372: LD_INT 23
40374: PUSH
40375: LD_INT 22
40377: PUSH
40378: LD_INT 24
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: ST_TO_ADDR
40396: GO 40457
40398: LD_INT 3
40400: DOUBLE
40401: EQUAL
40402: IFTRUE 40406
40404: GO 40456
40406: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40407: LD_ADDR_VAR 0 3
40411: PUSH
40412: LD_INT 13
40414: PUSH
40415: LD_INT 14
40417: PUSH
40418: LD_INT 2
40420: PUSH
40421: LD_INT 3
40423: PUSH
40424: LD_INT 4
40426: PUSH
40427: LD_INT 5
40429: PUSH
40430: LD_INT 21
40432: PUSH
40433: LD_INT 22
40435: PUSH
40436: LD_INT 23
40438: PUSH
40439: LD_INT 24
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: ST_TO_ADDR
40454: GO 40457
40456: POP
// result := ( chassis in result ) ;
40457: LD_ADDR_VAR 0 3
40461: PUSH
40462: LD_VAR 0 1
40466: PUSH
40467: LD_VAR 0 3
40471: IN
40472: ST_TO_ADDR
// end ;
40473: LD_VAR 0 3
40477: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40478: LD_INT 0
40480: PPUSH
// if not chassis or not weapon then
40481: LD_VAR 0 1
40485: NOT
40486: PUSH
40487: LD_VAR 0 2
40491: NOT
40492: OR
40493: IFFALSE 40497
// exit ;
40495: GO 41523
// case weapon of us_machine_gun :
40497: LD_VAR 0 2
40501: PUSH
40502: LD_INT 2
40504: DOUBLE
40505: EQUAL
40506: IFTRUE 40510
40508: GO 40540
40510: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40511: LD_ADDR_VAR 0 3
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: LD_INT 2
40521: PUSH
40522: LD_INT 3
40524: PUSH
40525: LD_INT 4
40527: PUSH
40528: LD_INT 5
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: ST_TO_ADDR
40538: GO 41507
40540: LD_INT 3
40542: DOUBLE
40543: EQUAL
40544: IFTRUE 40548
40546: GO 40578
40548: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40549: LD_ADDR_VAR 0 3
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: LD_INT 3
40562: PUSH
40563: LD_INT 4
40565: PUSH
40566: LD_INT 5
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: ST_TO_ADDR
40576: GO 41507
40578: LD_INT 11
40580: DOUBLE
40581: EQUAL
40582: IFTRUE 40586
40584: GO 40616
40586: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40587: LD_ADDR_VAR 0 3
40591: PUSH
40592: LD_INT 1
40594: PUSH
40595: LD_INT 2
40597: PUSH
40598: LD_INT 3
40600: PUSH
40601: LD_INT 4
40603: PUSH
40604: LD_INT 5
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: ST_TO_ADDR
40614: GO 41507
40616: LD_INT 4
40618: DOUBLE
40619: EQUAL
40620: IFTRUE 40624
40622: GO 40650
40624: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40625: LD_ADDR_VAR 0 3
40629: PUSH
40630: LD_INT 2
40632: PUSH
40633: LD_INT 3
40635: PUSH
40636: LD_INT 4
40638: PUSH
40639: LD_INT 5
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: ST_TO_ADDR
40648: GO 41507
40650: LD_INT 5
40652: DOUBLE
40653: EQUAL
40654: IFTRUE 40658
40656: GO 40684
40658: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40659: LD_ADDR_VAR 0 3
40663: PUSH
40664: LD_INT 2
40666: PUSH
40667: LD_INT 3
40669: PUSH
40670: LD_INT 4
40672: PUSH
40673: LD_INT 5
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: ST_TO_ADDR
40682: GO 41507
40684: LD_INT 9
40686: DOUBLE
40687: EQUAL
40688: IFTRUE 40692
40690: GO 40718
40692: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40693: LD_ADDR_VAR 0 3
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: LD_INT 3
40703: PUSH
40704: LD_INT 4
40706: PUSH
40707: LD_INT 5
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: ST_TO_ADDR
40716: GO 41507
40718: LD_INT 7
40720: DOUBLE
40721: EQUAL
40722: IFTRUE 40726
40724: GO 40752
40726: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40727: LD_ADDR_VAR 0 3
40731: PUSH
40732: LD_INT 2
40734: PUSH
40735: LD_INT 3
40737: PUSH
40738: LD_INT 4
40740: PUSH
40741: LD_INT 5
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: ST_TO_ADDR
40750: GO 41507
40752: LD_INT 12
40754: DOUBLE
40755: EQUAL
40756: IFTRUE 40760
40758: GO 40786
40760: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40761: LD_ADDR_VAR 0 3
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: LD_INT 3
40771: PUSH
40772: LD_INT 4
40774: PUSH
40775: LD_INT 5
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: ST_TO_ADDR
40784: GO 41507
40786: LD_INT 13
40788: DOUBLE
40789: EQUAL
40790: IFTRUE 40794
40792: GO 40820
40794: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40795: LD_ADDR_VAR 0 3
40799: PUSH
40800: LD_INT 2
40802: PUSH
40803: LD_INT 3
40805: PUSH
40806: LD_INT 4
40808: PUSH
40809: LD_INT 5
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: ST_TO_ADDR
40818: GO 41507
40820: LD_INT 14
40822: DOUBLE
40823: EQUAL
40824: IFTRUE 40828
40826: GO 40846
40828: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40829: LD_ADDR_VAR 0 3
40833: PUSH
40834: LD_INT 4
40836: PUSH
40837: LD_INT 5
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: ST_TO_ADDR
40844: GO 41507
40846: LD_INT 6
40848: DOUBLE
40849: EQUAL
40850: IFTRUE 40854
40852: GO 40872
40854: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40855: LD_ADDR_VAR 0 3
40859: PUSH
40860: LD_INT 4
40862: PUSH
40863: LD_INT 5
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: ST_TO_ADDR
40870: GO 41507
40872: LD_INT 10
40874: DOUBLE
40875: EQUAL
40876: IFTRUE 40880
40878: GO 40898
40880: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40881: LD_ADDR_VAR 0 3
40885: PUSH
40886: LD_INT 4
40888: PUSH
40889: LD_INT 5
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: ST_TO_ADDR
40896: GO 41507
40898: LD_INT 22
40900: DOUBLE
40901: EQUAL
40902: IFTRUE 40906
40904: GO 40932
40906: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40907: LD_ADDR_VAR 0 3
40911: PUSH
40912: LD_INT 11
40914: PUSH
40915: LD_INT 12
40917: PUSH
40918: LD_INT 13
40920: PUSH
40921: LD_INT 14
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: ST_TO_ADDR
40930: GO 41507
40932: LD_INT 23
40934: DOUBLE
40935: EQUAL
40936: IFTRUE 40940
40938: GO 40966
40940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40941: LD_ADDR_VAR 0 3
40945: PUSH
40946: LD_INT 11
40948: PUSH
40949: LD_INT 12
40951: PUSH
40952: LD_INT 13
40954: PUSH
40955: LD_INT 14
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: ST_TO_ADDR
40964: GO 41507
40966: LD_INT 24
40968: DOUBLE
40969: EQUAL
40970: IFTRUE 40974
40972: GO 41000
40974: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40975: LD_ADDR_VAR 0 3
40979: PUSH
40980: LD_INT 11
40982: PUSH
40983: LD_INT 12
40985: PUSH
40986: LD_INT 13
40988: PUSH
40989: LD_INT 14
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: ST_TO_ADDR
40998: GO 41507
41000: LD_INT 30
41002: DOUBLE
41003: EQUAL
41004: IFTRUE 41008
41006: GO 41034
41008: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
41009: LD_ADDR_VAR 0 3
41013: PUSH
41014: LD_INT 11
41016: PUSH
41017: LD_INT 12
41019: PUSH
41020: LD_INT 13
41022: PUSH
41023: LD_INT 14
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: ST_TO_ADDR
41032: GO 41507
41034: LD_INT 25
41036: DOUBLE
41037: EQUAL
41038: IFTRUE 41042
41040: GO 41060
41042: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
41043: LD_ADDR_VAR 0 3
41047: PUSH
41048: LD_INT 13
41050: PUSH
41051: LD_INT 14
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: ST_TO_ADDR
41058: GO 41507
41060: LD_INT 27
41062: DOUBLE
41063: EQUAL
41064: IFTRUE 41068
41066: GO 41086
41068: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41069: LD_ADDR_VAR 0 3
41073: PUSH
41074: LD_INT 13
41076: PUSH
41077: LD_INT 14
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: ST_TO_ADDR
41084: GO 41507
41086: LD_INT 28
41088: DOUBLE
41089: EQUAL
41090: IFTRUE 41094
41092: GO 41112
41094: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41095: LD_ADDR_VAR 0 3
41099: PUSH
41100: LD_INT 13
41102: PUSH
41103: LD_INT 14
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: ST_TO_ADDR
41110: GO 41507
41112: LD_INT 29
41114: DOUBLE
41115: EQUAL
41116: IFTRUE 41120
41118: GO 41138
41120: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41121: LD_ADDR_VAR 0 3
41125: PUSH
41126: LD_INT 13
41128: PUSH
41129: LD_INT 14
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: ST_TO_ADDR
41136: GO 41507
41138: LD_INT 31
41140: DOUBLE
41141: EQUAL
41142: IFTRUE 41146
41144: GO 41164
41146: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41147: LD_ADDR_VAR 0 3
41151: PUSH
41152: LD_INT 13
41154: PUSH
41155: LD_INT 14
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: ST_TO_ADDR
41162: GO 41507
41164: LD_INT 26
41166: DOUBLE
41167: EQUAL
41168: IFTRUE 41172
41170: GO 41190
41172: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41173: LD_ADDR_VAR 0 3
41177: PUSH
41178: LD_INT 13
41180: PUSH
41181: LD_INT 14
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: ST_TO_ADDR
41188: GO 41507
41190: LD_INT 42
41192: DOUBLE
41193: EQUAL
41194: IFTRUE 41198
41196: GO 41224
41198: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41199: LD_ADDR_VAR 0 3
41203: PUSH
41204: LD_INT 21
41206: PUSH
41207: LD_INT 22
41209: PUSH
41210: LD_INT 23
41212: PUSH
41213: LD_INT 24
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: ST_TO_ADDR
41222: GO 41507
41224: LD_INT 43
41226: DOUBLE
41227: EQUAL
41228: IFTRUE 41232
41230: GO 41258
41232: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41233: LD_ADDR_VAR 0 3
41237: PUSH
41238: LD_INT 21
41240: PUSH
41241: LD_INT 22
41243: PUSH
41244: LD_INT 23
41246: PUSH
41247: LD_INT 24
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: ST_TO_ADDR
41256: GO 41507
41258: LD_INT 44
41260: DOUBLE
41261: EQUAL
41262: IFTRUE 41266
41264: GO 41292
41266: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41267: LD_ADDR_VAR 0 3
41271: PUSH
41272: LD_INT 21
41274: PUSH
41275: LD_INT 22
41277: PUSH
41278: LD_INT 23
41280: PUSH
41281: LD_INT 24
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: ST_TO_ADDR
41290: GO 41507
41292: LD_INT 45
41294: DOUBLE
41295: EQUAL
41296: IFTRUE 41300
41298: GO 41326
41300: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41301: LD_ADDR_VAR 0 3
41305: PUSH
41306: LD_INT 21
41308: PUSH
41309: LD_INT 22
41311: PUSH
41312: LD_INT 23
41314: PUSH
41315: LD_INT 24
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: ST_TO_ADDR
41324: GO 41507
41326: LD_INT 49
41328: DOUBLE
41329: EQUAL
41330: IFTRUE 41334
41332: GO 41360
41334: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41335: LD_ADDR_VAR 0 3
41339: PUSH
41340: LD_INT 21
41342: PUSH
41343: LD_INT 22
41345: PUSH
41346: LD_INT 23
41348: PUSH
41349: LD_INT 24
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: ST_TO_ADDR
41358: GO 41507
41360: LD_INT 51
41362: DOUBLE
41363: EQUAL
41364: IFTRUE 41368
41366: GO 41394
41368: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41369: LD_ADDR_VAR 0 3
41373: PUSH
41374: LD_INT 21
41376: PUSH
41377: LD_INT 22
41379: PUSH
41380: LD_INT 23
41382: PUSH
41383: LD_INT 24
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: ST_TO_ADDR
41392: GO 41507
41394: LD_INT 52
41396: DOUBLE
41397: EQUAL
41398: IFTRUE 41402
41400: GO 41428
41402: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41403: LD_ADDR_VAR 0 3
41407: PUSH
41408: LD_INT 21
41410: PUSH
41411: LD_INT 22
41413: PUSH
41414: LD_INT 23
41416: PUSH
41417: LD_INT 24
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: ST_TO_ADDR
41426: GO 41507
41428: LD_INT 53
41430: DOUBLE
41431: EQUAL
41432: IFTRUE 41436
41434: GO 41454
41436: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41437: LD_ADDR_VAR 0 3
41441: PUSH
41442: LD_INT 23
41444: PUSH
41445: LD_INT 24
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: ST_TO_ADDR
41452: GO 41507
41454: LD_INT 46
41456: DOUBLE
41457: EQUAL
41458: IFTRUE 41462
41460: GO 41480
41462: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41463: LD_ADDR_VAR 0 3
41467: PUSH
41468: LD_INT 23
41470: PUSH
41471: LD_INT 24
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: ST_TO_ADDR
41478: GO 41507
41480: LD_INT 47
41482: DOUBLE
41483: EQUAL
41484: IFTRUE 41488
41486: GO 41506
41488: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41489: LD_ADDR_VAR 0 3
41493: PUSH
41494: LD_INT 23
41496: PUSH
41497: LD_INT 24
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: ST_TO_ADDR
41504: GO 41507
41506: POP
// result := ( chassis in result ) ;
41507: LD_ADDR_VAR 0 3
41511: PUSH
41512: LD_VAR 0 1
41516: PUSH
41517: LD_VAR 0 3
41521: IN
41522: ST_TO_ADDR
// end ;
41523: LD_VAR 0 3
41527: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41528: LD_INT 0
41530: PPUSH
41531: PPUSH
41532: PPUSH
41533: PPUSH
41534: PPUSH
41535: PPUSH
41536: PPUSH
// result := array ;
41537: LD_ADDR_VAR 0 5
41541: PUSH
41542: LD_VAR 0 1
41546: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41547: LD_VAR 0 1
41551: NOT
41552: PUSH
41553: LD_VAR 0 2
41557: NOT
41558: OR
41559: PUSH
41560: LD_VAR 0 3
41564: NOT
41565: OR
41566: PUSH
41567: LD_VAR 0 2
41571: PUSH
41572: LD_VAR 0 1
41576: GREATER
41577: OR
41578: PUSH
41579: LD_VAR 0 3
41583: PUSH
41584: LD_VAR 0 1
41588: GREATER
41589: OR
41590: IFFALSE 41594
// exit ;
41592: GO 41890
// if direction then
41594: LD_VAR 0 4
41598: IFFALSE 41662
// begin d := 1 ;
41600: LD_ADDR_VAR 0 9
41604: PUSH
41605: LD_INT 1
41607: ST_TO_ADDR
// if i_from > i_to then
41608: LD_VAR 0 2
41612: PUSH
41613: LD_VAR 0 3
41617: GREATER
41618: IFFALSE 41644
// length := ( array - i_from ) + i_to else
41620: LD_ADDR_VAR 0 11
41624: PUSH
41625: LD_VAR 0 1
41629: PUSH
41630: LD_VAR 0 2
41634: MINUS
41635: PUSH
41636: LD_VAR 0 3
41640: PLUS
41641: ST_TO_ADDR
41642: GO 41660
// length := i_to - i_from ;
41644: LD_ADDR_VAR 0 11
41648: PUSH
41649: LD_VAR 0 3
41653: PUSH
41654: LD_VAR 0 2
41658: MINUS
41659: ST_TO_ADDR
// end else
41660: GO 41723
// begin d := - 1 ;
41662: LD_ADDR_VAR 0 9
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: ST_TO_ADDR
// if i_from > i_to then
41671: LD_VAR 0 2
41675: PUSH
41676: LD_VAR 0 3
41680: GREATER
41681: IFFALSE 41701
// length := i_from - i_to else
41683: LD_ADDR_VAR 0 11
41687: PUSH
41688: LD_VAR 0 2
41692: PUSH
41693: LD_VAR 0 3
41697: MINUS
41698: ST_TO_ADDR
41699: GO 41723
// length := ( array - i_to ) + i_from ;
41701: LD_ADDR_VAR 0 11
41705: PUSH
41706: LD_VAR 0 1
41710: PUSH
41711: LD_VAR 0 3
41715: MINUS
41716: PUSH
41717: LD_VAR 0 2
41721: PLUS
41722: ST_TO_ADDR
// end ; if not length then
41723: LD_VAR 0 11
41727: NOT
41728: IFFALSE 41732
// exit ;
41730: GO 41890
// tmp := array ;
41732: LD_ADDR_VAR 0 10
41736: PUSH
41737: LD_VAR 0 1
41741: ST_TO_ADDR
// for i = 1 to length do
41742: LD_ADDR_VAR 0 6
41746: PUSH
41747: DOUBLE
41748: LD_INT 1
41750: DEC
41751: ST_TO_ADDR
41752: LD_VAR 0 11
41756: PUSH
41757: FOR_TO
41758: IFFALSE 41878
// begin for j = 1 to array do
41760: LD_ADDR_VAR 0 7
41764: PUSH
41765: DOUBLE
41766: LD_INT 1
41768: DEC
41769: ST_TO_ADDR
41770: LD_VAR 0 1
41774: PUSH
41775: FOR_TO
41776: IFFALSE 41864
// begin k := j + d ;
41778: LD_ADDR_VAR 0 8
41782: PUSH
41783: LD_VAR 0 7
41787: PUSH
41788: LD_VAR 0 9
41792: PLUS
41793: ST_TO_ADDR
// if k > array then
41794: LD_VAR 0 8
41798: PUSH
41799: LD_VAR 0 1
41803: GREATER
41804: IFFALSE 41814
// k := 1 ;
41806: LD_ADDR_VAR 0 8
41810: PUSH
41811: LD_INT 1
41813: ST_TO_ADDR
// if not k then
41814: LD_VAR 0 8
41818: NOT
41819: IFFALSE 41831
// k := array ;
41821: LD_ADDR_VAR 0 8
41825: PUSH
41826: LD_VAR 0 1
41830: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41831: LD_ADDR_VAR 0 10
41835: PUSH
41836: LD_VAR 0 10
41840: PPUSH
41841: LD_VAR 0 8
41845: PPUSH
41846: LD_VAR 0 1
41850: PUSH
41851: LD_VAR 0 7
41855: ARRAY
41856: PPUSH
41857: CALL_OW 1
41861: ST_TO_ADDR
// end ;
41862: GO 41775
41864: POP
41865: POP
// array := tmp ;
41866: LD_ADDR_VAR 0 1
41870: PUSH
41871: LD_VAR 0 10
41875: ST_TO_ADDR
// end ;
41876: GO 41757
41878: POP
41879: POP
// result := array ;
41880: LD_ADDR_VAR 0 5
41884: PUSH
41885: LD_VAR 0 1
41889: ST_TO_ADDR
// end ;
41890: LD_VAR 0 5
41894: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41895: LD_INT 0
41897: PPUSH
41898: PPUSH
// result := 0 ;
41899: LD_ADDR_VAR 0 3
41903: PUSH
41904: LD_INT 0
41906: ST_TO_ADDR
// if not array or not value in array then
41907: LD_VAR 0 1
41911: NOT
41912: PUSH
41913: LD_VAR 0 2
41917: PUSH
41918: LD_VAR 0 1
41922: IN
41923: NOT
41924: OR
41925: IFFALSE 41929
// exit ;
41927: GO 41983
// for i = 1 to array do
41929: LD_ADDR_VAR 0 4
41933: PUSH
41934: DOUBLE
41935: LD_INT 1
41937: DEC
41938: ST_TO_ADDR
41939: LD_VAR 0 1
41943: PUSH
41944: FOR_TO
41945: IFFALSE 41981
// if value = array [ i ] then
41947: LD_VAR 0 2
41951: PUSH
41952: LD_VAR 0 1
41956: PUSH
41957: LD_VAR 0 4
41961: ARRAY
41962: EQUAL
41963: IFFALSE 41979
// begin result := i ;
41965: LD_ADDR_VAR 0 3
41969: PUSH
41970: LD_VAR 0 4
41974: ST_TO_ADDR
// exit ;
41975: POP
41976: POP
41977: GO 41983
// end ;
41979: GO 41944
41981: POP
41982: POP
// end ;
41983: LD_VAR 0 3
41987: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41988: LD_INT 0
41990: PPUSH
// vc_chassis := chassis ;
41991: LD_ADDR_OWVAR 37
41995: PUSH
41996: LD_VAR 0 1
42000: ST_TO_ADDR
// vc_engine := engine ;
42001: LD_ADDR_OWVAR 39
42005: PUSH
42006: LD_VAR 0 2
42010: ST_TO_ADDR
// vc_control := control ;
42011: LD_ADDR_OWVAR 38
42015: PUSH
42016: LD_VAR 0 3
42020: ST_TO_ADDR
// vc_weapon := weapon ;
42021: LD_ADDR_OWVAR 40
42025: PUSH
42026: LD_VAR 0 4
42030: ST_TO_ADDR
// vc_fuel_battery := fuel ;
42031: LD_ADDR_OWVAR 41
42035: PUSH
42036: LD_VAR 0 5
42040: ST_TO_ADDR
// end ;
42041: LD_VAR 0 6
42045: RET
// export function WantPlant ( unit ) ; var task ; begin
42046: LD_INT 0
42048: PPUSH
42049: PPUSH
// result := false ;
42050: LD_ADDR_VAR 0 2
42054: PUSH
42055: LD_INT 0
42057: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42058: LD_ADDR_VAR 0 3
42062: PUSH
42063: LD_VAR 0 1
42067: PPUSH
42068: CALL_OW 437
42072: ST_TO_ADDR
// if task then
42073: LD_VAR 0 3
42077: IFFALSE 42105
// if task [ 1 ] [ 1 ] = p then
42079: LD_VAR 0 3
42083: PUSH
42084: LD_INT 1
42086: ARRAY
42087: PUSH
42088: LD_INT 1
42090: ARRAY
42091: PUSH
42092: LD_STRING p
42094: EQUAL
42095: IFFALSE 42105
// result := true ;
42097: LD_ADDR_VAR 0 2
42101: PUSH
42102: LD_INT 1
42104: ST_TO_ADDR
// end ;
42105: LD_VAR 0 2
42109: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42110: LD_INT 0
42112: PPUSH
42113: PPUSH
42114: PPUSH
42115: PPUSH
// if pos < 1 then
42116: LD_VAR 0 2
42120: PUSH
42121: LD_INT 1
42123: LESS
42124: IFFALSE 42128
// exit ;
42126: GO 42431
// if pos = 1 then
42128: LD_VAR 0 2
42132: PUSH
42133: LD_INT 1
42135: EQUAL
42136: IFFALSE 42169
// result := Replace ( arr , pos [ 1 ] , value ) else
42138: LD_ADDR_VAR 0 4
42142: PUSH
42143: LD_VAR 0 1
42147: PPUSH
42148: LD_VAR 0 2
42152: PUSH
42153: LD_INT 1
42155: ARRAY
42156: PPUSH
42157: LD_VAR 0 3
42161: PPUSH
42162: CALL_OW 1
42166: ST_TO_ADDR
42167: GO 42431
// begin tmp := arr ;
42169: LD_ADDR_VAR 0 6
42173: PUSH
42174: LD_VAR 0 1
42178: ST_TO_ADDR
// s_arr := [ tmp ] ;
42179: LD_ADDR_VAR 0 7
42183: PUSH
42184: LD_VAR 0 6
42188: PUSH
42189: EMPTY
42190: LIST
42191: ST_TO_ADDR
// for i = 1 to pos - 1 do
42192: LD_ADDR_VAR 0 5
42196: PUSH
42197: DOUBLE
42198: LD_INT 1
42200: DEC
42201: ST_TO_ADDR
42202: LD_VAR 0 2
42206: PUSH
42207: LD_INT 1
42209: MINUS
42210: PUSH
42211: FOR_TO
42212: IFFALSE 42257
// begin tmp := tmp [ pos [ i ] ] ;
42214: LD_ADDR_VAR 0 6
42218: PUSH
42219: LD_VAR 0 6
42223: PUSH
42224: LD_VAR 0 2
42228: PUSH
42229: LD_VAR 0 5
42233: ARRAY
42234: ARRAY
42235: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42236: LD_ADDR_VAR 0 7
42240: PUSH
42241: LD_VAR 0 7
42245: PUSH
42246: LD_VAR 0 6
42250: PUSH
42251: EMPTY
42252: LIST
42253: ADD
42254: ST_TO_ADDR
// end ;
42255: GO 42211
42257: POP
42258: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42259: LD_ADDR_VAR 0 6
42263: PUSH
42264: LD_VAR 0 6
42268: PPUSH
42269: LD_VAR 0 2
42273: PUSH
42274: LD_VAR 0 2
42278: ARRAY
42279: PPUSH
42280: LD_VAR 0 3
42284: PPUSH
42285: CALL_OW 1
42289: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42290: LD_ADDR_VAR 0 7
42294: PUSH
42295: LD_VAR 0 7
42299: PPUSH
42300: LD_VAR 0 7
42304: PPUSH
42305: LD_VAR 0 6
42309: PPUSH
42310: CALL_OW 1
42314: ST_TO_ADDR
// for i = s_arr downto 2 do
42315: LD_ADDR_VAR 0 5
42319: PUSH
42320: DOUBLE
42321: LD_VAR 0 7
42325: INC
42326: ST_TO_ADDR
42327: LD_INT 2
42329: PUSH
42330: FOR_DOWNTO
42331: IFFALSE 42415
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42333: LD_ADDR_VAR 0 6
42337: PUSH
42338: LD_VAR 0 7
42342: PUSH
42343: LD_VAR 0 5
42347: PUSH
42348: LD_INT 1
42350: MINUS
42351: ARRAY
42352: PPUSH
42353: LD_VAR 0 2
42357: PUSH
42358: LD_VAR 0 5
42362: PUSH
42363: LD_INT 1
42365: MINUS
42366: ARRAY
42367: PPUSH
42368: LD_VAR 0 7
42372: PUSH
42373: LD_VAR 0 5
42377: ARRAY
42378: PPUSH
42379: CALL_OW 1
42383: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42384: LD_ADDR_VAR 0 7
42388: PUSH
42389: LD_VAR 0 7
42393: PPUSH
42394: LD_VAR 0 5
42398: PUSH
42399: LD_INT 1
42401: MINUS
42402: PPUSH
42403: LD_VAR 0 6
42407: PPUSH
42408: CALL_OW 1
42412: ST_TO_ADDR
// end ;
42413: GO 42330
42415: POP
42416: POP
// result := s_arr [ 1 ] ;
42417: LD_ADDR_VAR 0 4
42421: PUSH
42422: LD_VAR 0 7
42426: PUSH
42427: LD_INT 1
42429: ARRAY
42430: ST_TO_ADDR
// end ; end ;
42431: LD_VAR 0 4
42435: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42436: LD_INT 0
42438: PPUSH
42439: PPUSH
// if not list then
42440: LD_VAR 0 1
42444: NOT
42445: IFFALSE 42449
// exit ;
42447: GO 42540
// i := list [ pos1 ] ;
42449: LD_ADDR_VAR 0 5
42453: PUSH
42454: LD_VAR 0 1
42458: PUSH
42459: LD_VAR 0 2
42463: ARRAY
42464: ST_TO_ADDR
// if not i then
42465: LD_VAR 0 5
42469: NOT
42470: IFFALSE 42474
// exit ;
42472: GO 42540
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42474: LD_ADDR_VAR 0 1
42478: PUSH
42479: LD_VAR 0 1
42483: PPUSH
42484: LD_VAR 0 2
42488: PPUSH
42489: LD_VAR 0 1
42493: PUSH
42494: LD_VAR 0 3
42498: ARRAY
42499: PPUSH
42500: CALL_OW 1
42504: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42505: LD_ADDR_VAR 0 1
42509: PUSH
42510: LD_VAR 0 1
42514: PPUSH
42515: LD_VAR 0 3
42519: PPUSH
42520: LD_VAR 0 5
42524: PPUSH
42525: CALL_OW 1
42529: ST_TO_ADDR
// result := list ;
42530: LD_ADDR_VAR 0 4
42534: PUSH
42535: LD_VAR 0 1
42539: ST_TO_ADDR
// end ;
42540: LD_VAR 0 4
42544: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42545: LD_INT 0
42547: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42548: LD_ADDR_VAR 0 5
42552: PUSH
42553: LD_VAR 0 1
42557: PPUSH
42558: CALL_OW 250
42562: PPUSH
42563: LD_VAR 0 1
42567: PPUSH
42568: CALL_OW 251
42572: PPUSH
42573: LD_VAR 0 2
42577: PPUSH
42578: LD_VAR 0 3
42582: PPUSH
42583: LD_VAR 0 4
42587: PPUSH
42588: CALL 42598 0 5
42592: ST_TO_ADDR
// end ;
42593: LD_VAR 0 5
42597: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42598: LD_INT 0
42600: PPUSH
42601: PPUSH
42602: PPUSH
42603: PPUSH
// if not list then
42604: LD_VAR 0 3
42608: NOT
42609: IFFALSE 42613
// exit ;
42611: GO 43001
// result := [ ] ;
42613: LD_ADDR_VAR 0 6
42617: PUSH
42618: EMPTY
42619: ST_TO_ADDR
// for i in list do
42620: LD_ADDR_VAR 0 7
42624: PUSH
42625: LD_VAR 0 3
42629: PUSH
42630: FOR_IN
42631: IFFALSE 42833
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42633: LD_ADDR_VAR 0 9
42637: PUSH
42638: LD_VAR 0 7
42642: PPUSH
42643: LD_VAR 0 1
42647: PPUSH
42648: LD_VAR 0 2
42652: PPUSH
42653: CALL_OW 297
42657: ST_TO_ADDR
// if not result then
42658: LD_VAR 0 6
42662: NOT
42663: IFFALSE 42689
// result := [ [ i , tmp ] ] else
42665: LD_ADDR_VAR 0 6
42669: PUSH
42670: LD_VAR 0 7
42674: PUSH
42675: LD_VAR 0 9
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: EMPTY
42685: LIST
42686: ST_TO_ADDR
42687: GO 42831
// begin if result [ result ] [ 2 ] < tmp then
42689: LD_VAR 0 6
42693: PUSH
42694: LD_VAR 0 6
42698: ARRAY
42699: PUSH
42700: LD_INT 2
42702: ARRAY
42703: PUSH
42704: LD_VAR 0 9
42708: LESS
42709: IFFALSE 42751
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42711: LD_ADDR_VAR 0 6
42715: PUSH
42716: LD_VAR 0 6
42720: PPUSH
42721: LD_VAR 0 6
42725: PUSH
42726: LD_INT 1
42728: PLUS
42729: PPUSH
42730: LD_VAR 0 7
42734: PUSH
42735: LD_VAR 0 9
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PPUSH
42744: CALL_OW 2
42748: ST_TO_ADDR
42749: GO 42831
// for j = 1 to result do
42751: LD_ADDR_VAR 0 8
42755: PUSH
42756: DOUBLE
42757: LD_INT 1
42759: DEC
42760: ST_TO_ADDR
42761: LD_VAR 0 6
42765: PUSH
42766: FOR_TO
42767: IFFALSE 42829
// begin if tmp < result [ j ] [ 2 ] then
42769: LD_VAR 0 9
42773: PUSH
42774: LD_VAR 0 6
42778: PUSH
42779: LD_VAR 0 8
42783: ARRAY
42784: PUSH
42785: LD_INT 2
42787: ARRAY
42788: LESS
42789: IFFALSE 42827
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42791: LD_ADDR_VAR 0 6
42795: PUSH
42796: LD_VAR 0 6
42800: PPUSH
42801: LD_VAR 0 8
42805: PPUSH
42806: LD_VAR 0 7
42810: PUSH
42811: LD_VAR 0 9
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PPUSH
42820: CALL_OW 2
42824: ST_TO_ADDR
// break ;
42825: GO 42829
// end ; end ;
42827: GO 42766
42829: POP
42830: POP
// end ; end ;
42831: GO 42630
42833: POP
42834: POP
// if result and not asc then
42835: LD_VAR 0 6
42839: PUSH
42840: LD_VAR 0 4
42844: NOT
42845: AND
42846: IFFALSE 42921
// begin tmp := result ;
42848: LD_ADDR_VAR 0 9
42852: PUSH
42853: LD_VAR 0 6
42857: ST_TO_ADDR
// for i = tmp downto 1 do
42858: LD_ADDR_VAR 0 7
42862: PUSH
42863: DOUBLE
42864: LD_VAR 0 9
42868: INC
42869: ST_TO_ADDR
42870: LD_INT 1
42872: PUSH
42873: FOR_DOWNTO
42874: IFFALSE 42919
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42876: LD_ADDR_VAR 0 6
42880: PUSH
42881: LD_VAR 0 6
42885: PPUSH
42886: LD_VAR 0 9
42890: PUSH
42891: LD_VAR 0 7
42895: MINUS
42896: PUSH
42897: LD_INT 1
42899: PLUS
42900: PPUSH
42901: LD_VAR 0 9
42905: PUSH
42906: LD_VAR 0 7
42910: ARRAY
42911: PPUSH
42912: CALL_OW 1
42916: ST_TO_ADDR
42917: GO 42873
42919: POP
42920: POP
// end ; tmp := [ ] ;
42921: LD_ADDR_VAR 0 9
42925: PUSH
42926: EMPTY
42927: ST_TO_ADDR
// if mode then
42928: LD_VAR 0 5
42932: IFFALSE 43001
// begin for i = 1 to result do
42934: LD_ADDR_VAR 0 7
42938: PUSH
42939: DOUBLE
42940: LD_INT 1
42942: DEC
42943: ST_TO_ADDR
42944: LD_VAR 0 6
42948: PUSH
42949: FOR_TO
42950: IFFALSE 42989
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42952: LD_ADDR_VAR 0 9
42956: PUSH
42957: LD_VAR 0 9
42961: PPUSH
42962: LD_VAR 0 7
42966: PPUSH
42967: LD_VAR 0 6
42971: PUSH
42972: LD_VAR 0 7
42976: ARRAY
42977: PUSH
42978: LD_INT 1
42980: ARRAY
42981: PPUSH
42982: CALL_OW 1
42986: ST_TO_ADDR
42987: GO 42949
42989: POP
42990: POP
// result := tmp ;
42991: LD_ADDR_VAR 0 6
42995: PUSH
42996: LD_VAR 0 9
43000: ST_TO_ADDR
// end ; end ;
43001: LD_VAR 0 6
43005: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
43006: LD_INT 0
43008: PPUSH
43009: PPUSH
43010: PPUSH
43011: PPUSH
43012: PPUSH
43013: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
43014: LD_ADDR_VAR 0 5
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: EMPTY
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: ST_TO_ADDR
// if not x or not y then
43036: LD_VAR 0 2
43040: NOT
43041: PUSH
43042: LD_VAR 0 3
43046: NOT
43047: OR
43048: IFFALSE 43052
// exit ;
43050: GO 44698
// if not range then
43052: LD_VAR 0 4
43056: NOT
43057: IFFALSE 43067
// range := 10 ;
43059: LD_ADDR_VAR 0 4
43063: PUSH
43064: LD_INT 10
43066: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43067: LD_ADDR_VAR 0 8
43071: PUSH
43072: LD_INT 81
43074: PUSH
43075: LD_VAR 0 1
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 92
43086: PUSH
43087: LD_VAR 0 2
43091: PUSH
43092: LD_VAR 0 3
43096: PUSH
43097: LD_VAR 0 4
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 3
43110: PUSH
43111: LD_INT 21
43113: PUSH
43114: LD_INT 3
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: LIST
43129: PPUSH
43130: CALL_OW 69
43134: ST_TO_ADDR
// if not tmp then
43135: LD_VAR 0 8
43139: NOT
43140: IFFALSE 43144
// exit ;
43142: GO 44698
// for i in tmp do
43144: LD_ADDR_VAR 0 6
43148: PUSH
43149: LD_VAR 0 8
43153: PUSH
43154: FOR_IN
43155: IFFALSE 44673
// begin points := [ 0 , 0 , 0 ] ;
43157: LD_ADDR_VAR 0 9
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: LD_INT 0
43167: PUSH
43168: LD_INT 0
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: LIST
43175: ST_TO_ADDR
// bpoints := 1 ;
43176: LD_ADDR_VAR 0 10
43180: PUSH
43181: LD_INT 1
43183: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43184: LD_VAR 0 6
43188: PPUSH
43189: CALL_OW 247
43193: PUSH
43194: LD_INT 1
43196: DOUBLE
43197: EQUAL
43198: IFTRUE 43202
43200: GO 43780
43202: POP
// begin if GetClass ( i ) = 1 then
43203: LD_VAR 0 6
43207: PPUSH
43208: CALL_OW 257
43212: PUSH
43213: LD_INT 1
43215: EQUAL
43216: IFFALSE 43237
// points := [ 10 , 5 , 3 ] ;
43218: LD_ADDR_VAR 0 9
43222: PUSH
43223: LD_INT 10
43225: PUSH
43226: LD_INT 5
43228: PUSH
43229: LD_INT 3
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: LIST
43236: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43237: LD_VAR 0 6
43241: PPUSH
43242: CALL_OW 257
43246: PUSH
43247: LD_INT 2
43249: PUSH
43250: LD_INT 3
43252: PUSH
43253: LD_INT 4
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: LIST
43260: IN
43261: IFFALSE 43282
// points := [ 3 , 2 , 1 ] ;
43263: LD_ADDR_VAR 0 9
43267: PUSH
43268: LD_INT 3
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: LD_INT 1
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: LIST
43281: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43282: LD_VAR 0 6
43286: PPUSH
43287: CALL_OW 257
43291: PUSH
43292: LD_INT 5
43294: EQUAL
43295: IFFALSE 43316
// points := [ 130 , 5 , 2 ] ;
43297: LD_ADDR_VAR 0 9
43301: PUSH
43302: LD_INT 130
43304: PUSH
43305: LD_INT 5
43307: PUSH
43308: LD_INT 2
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: LIST
43315: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43316: LD_VAR 0 6
43320: PPUSH
43321: CALL_OW 257
43325: PUSH
43326: LD_INT 8
43328: EQUAL
43329: IFFALSE 43350
// points := [ 35 , 35 , 30 ] ;
43331: LD_ADDR_VAR 0 9
43335: PUSH
43336: LD_INT 35
43338: PUSH
43339: LD_INT 35
43341: PUSH
43342: LD_INT 30
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: LIST
43349: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43350: LD_VAR 0 6
43354: PPUSH
43355: CALL_OW 257
43359: PUSH
43360: LD_INT 9
43362: EQUAL
43363: IFFALSE 43384
// points := [ 20 , 55 , 40 ] ;
43365: LD_ADDR_VAR 0 9
43369: PUSH
43370: LD_INT 20
43372: PUSH
43373: LD_INT 55
43375: PUSH
43376: LD_INT 40
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: LIST
43383: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43384: LD_VAR 0 6
43388: PPUSH
43389: CALL_OW 257
43393: PUSH
43394: LD_INT 12
43396: PUSH
43397: LD_INT 16
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: IN
43404: IFFALSE 43425
// points := [ 5 , 3 , 2 ] ;
43406: LD_ADDR_VAR 0 9
43410: PUSH
43411: LD_INT 5
43413: PUSH
43414: LD_INT 3
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: LIST
43424: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43425: LD_VAR 0 6
43429: PPUSH
43430: CALL_OW 257
43434: PUSH
43435: LD_INT 17
43437: EQUAL
43438: IFFALSE 43459
// points := [ 100 , 50 , 75 ] ;
43440: LD_ADDR_VAR 0 9
43444: PUSH
43445: LD_INT 100
43447: PUSH
43448: LD_INT 50
43450: PUSH
43451: LD_INT 75
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: LIST
43458: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43459: LD_VAR 0 6
43463: PPUSH
43464: CALL_OW 257
43468: PUSH
43469: LD_INT 15
43471: EQUAL
43472: IFFALSE 43493
// points := [ 10 , 5 , 3 ] ;
43474: LD_ADDR_VAR 0 9
43478: PUSH
43479: LD_INT 10
43481: PUSH
43482: LD_INT 5
43484: PUSH
43485: LD_INT 3
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: LIST
43492: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43493: LD_VAR 0 6
43497: PPUSH
43498: CALL_OW 257
43502: PUSH
43503: LD_INT 14
43505: EQUAL
43506: IFFALSE 43527
// points := [ 10 , 0 , 0 ] ;
43508: LD_ADDR_VAR 0 9
43512: PUSH
43513: LD_INT 10
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: LIST
43526: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43527: LD_VAR 0 6
43531: PPUSH
43532: CALL_OW 257
43536: PUSH
43537: LD_INT 11
43539: EQUAL
43540: IFFALSE 43561
// points := [ 30 , 10 , 5 ] ;
43542: LD_ADDR_VAR 0 9
43546: PUSH
43547: LD_INT 30
43549: PUSH
43550: LD_INT 10
43552: PUSH
43553: LD_INT 5
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: LIST
43560: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43561: LD_VAR 0 1
43565: PPUSH
43566: LD_INT 5
43568: PPUSH
43569: CALL_OW 321
43573: PUSH
43574: LD_INT 2
43576: EQUAL
43577: IFFALSE 43594
// bpoints := bpoints * 1.8 ;
43579: LD_ADDR_VAR 0 10
43583: PUSH
43584: LD_VAR 0 10
43588: PUSH
43589: LD_REAL  1.80000000000000E+0000
43592: MUL
43593: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43594: LD_VAR 0 6
43598: PPUSH
43599: CALL_OW 257
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: LD_INT 2
43609: PUSH
43610: LD_INT 3
43612: PUSH
43613: LD_INT 4
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: IN
43622: PUSH
43623: LD_VAR 0 1
43627: PPUSH
43628: LD_INT 51
43630: PPUSH
43631: CALL_OW 321
43635: PUSH
43636: LD_INT 2
43638: EQUAL
43639: AND
43640: IFFALSE 43657
// bpoints := bpoints * 1.2 ;
43642: LD_ADDR_VAR 0 10
43646: PUSH
43647: LD_VAR 0 10
43651: PUSH
43652: LD_REAL  1.20000000000000E+0000
43655: MUL
43656: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43657: LD_VAR 0 6
43661: PPUSH
43662: CALL_OW 257
43666: PUSH
43667: LD_INT 5
43669: PUSH
43670: LD_INT 7
43672: PUSH
43673: LD_INT 9
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: LIST
43680: IN
43681: PUSH
43682: LD_VAR 0 1
43686: PPUSH
43687: LD_INT 52
43689: PPUSH
43690: CALL_OW 321
43694: PUSH
43695: LD_INT 2
43697: EQUAL
43698: AND
43699: IFFALSE 43716
// bpoints := bpoints * 1.5 ;
43701: LD_ADDR_VAR 0 10
43705: PUSH
43706: LD_VAR 0 10
43710: PUSH
43711: LD_REAL  1.50000000000000E+0000
43714: MUL
43715: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43716: LD_VAR 0 1
43720: PPUSH
43721: LD_INT 66
43723: PPUSH
43724: CALL_OW 321
43728: PUSH
43729: LD_INT 2
43731: EQUAL
43732: IFFALSE 43749
// bpoints := bpoints * 1.1 ;
43734: LD_ADDR_VAR 0 10
43738: PUSH
43739: LD_VAR 0 10
43743: PUSH
43744: LD_REAL  1.10000000000000E+0000
43747: MUL
43748: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43749: LD_ADDR_VAR 0 10
43753: PUSH
43754: LD_VAR 0 10
43758: PUSH
43759: LD_VAR 0 6
43763: PPUSH
43764: LD_INT 1
43766: PPUSH
43767: CALL_OW 259
43771: PUSH
43772: LD_REAL  1.15000000000000E+0000
43775: MUL
43776: MUL
43777: ST_TO_ADDR
// end ; unit_vehicle :
43778: GO 44602
43780: LD_INT 2
43782: DOUBLE
43783: EQUAL
43784: IFTRUE 43788
43786: GO 44590
43788: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43789: LD_VAR 0 6
43793: PPUSH
43794: CALL_OW 264
43798: PUSH
43799: LD_INT 2
43801: PUSH
43802: LD_INT 42
43804: PUSH
43805: LD_INT 24
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: LIST
43812: IN
43813: IFFALSE 43834
// points := [ 25 , 5 , 3 ] ;
43815: LD_ADDR_VAR 0 9
43819: PUSH
43820: LD_INT 25
43822: PUSH
43823: LD_INT 5
43825: PUSH
43826: LD_INT 3
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: LIST
43833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43834: LD_VAR 0 6
43838: PPUSH
43839: CALL_OW 264
43843: PUSH
43844: LD_INT 4
43846: PUSH
43847: LD_INT 43
43849: PUSH
43850: LD_INT 25
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: LIST
43857: IN
43858: IFFALSE 43879
// points := [ 40 , 15 , 5 ] ;
43860: LD_ADDR_VAR 0 9
43864: PUSH
43865: LD_INT 40
43867: PUSH
43868: LD_INT 15
43870: PUSH
43871: LD_INT 5
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: LIST
43878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43879: LD_VAR 0 6
43883: PPUSH
43884: CALL_OW 264
43888: PUSH
43889: LD_INT 3
43891: PUSH
43892: LD_INT 23
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: IN
43899: IFFALSE 43920
// points := [ 7 , 25 , 8 ] ;
43901: LD_ADDR_VAR 0 9
43905: PUSH
43906: LD_INT 7
43908: PUSH
43909: LD_INT 25
43911: PUSH
43912: LD_INT 8
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: LIST
43919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43920: LD_VAR 0 6
43924: PPUSH
43925: CALL_OW 264
43929: PUSH
43930: LD_INT 5
43932: PUSH
43933: LD_INT 27
43935: PUSH
43936: LD_INT 44
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: LIST
43943: IN
43944: IFFALSE 43965
// points := [ 14 , 50 , 16 ] ;
43946: LD_ADDR_VAR 0 9
43950: PUSH
43951: LD_INT 14
43953: PUSH
43954: LD_INT 50
43956: PUSH
43957: LD_INT 16
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: LIST
43964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43965: LD_VAR 0 6
43969: PPUSH
43970: CALL_OW 264
43974: PUSH
43975: LD_INT 6
43977: PUSH
43978: LD_INT 46
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: IN
43985: IFFALSE 44006
// points := [ 32 , 120 , 70 ] ;
43987: LD_ADDR_VAR 0 9
43991: PUSH
43992: LD_INT 32
43994: PUSH
43995: LD_INT 120
43997: PUSH
43998: LD_INT 70
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: LIST
44005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
44006: LD_VAR 0 6
44010: PPUSH
44011: CALL_OW 264
44015: PUSH
44016: LD_INT 7
44018: PUSH
44019: LD_INT 28
44021: PUSH
44022: LD_INT 45
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: LIST
44029: IN
44030: IFFALSE 44051
// points := [ 35 , 20 , 45 ] ;
44032: LD_ADDR_VAR 0 9
44036: PUSH
44037: LD_INT 35
44039: PUSH
44040: LD_INT 20
44042: PUSH
44043: LD_INT 45
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: LIST
44050: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44051: LD_VAR 0 6
44055: PPUSH
44056: CALL_OW 264
44060: PUSH
44061: LD_INT 47
44063: PUSH
44064: EMPTY
44065: LIST
44066: IN
44067: IFFALSE 44088
// points := [ 67 , 45 , 75 ] ;
44069: LD_ADDR_VAR 0 9
44073: PUSH
44074: LD_INT 67
44076: PUSH
44077: LD_INT 45
44079: PUSH
44080: LD_INT 75
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: LIST
44087: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44088: LD_VAR 0 6
44092: PPUSH
44093: CALL_OW 264
44097: PUSH
44098: LD_INT 26
44100: PUSH
44101: EMPTY
44102: LIST
44103: IN
44104: IFFALSE 44125
// points := [ 120 , 30 , 80 ] ;
44106: LD_ADDR_VAR 0 9
44110: PUSH
44111: LD_INT 120
44113: PUSH
44114: LD_INT 30
44116: PUSH
44117: LD_INT 80
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: LIST
44124: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44125: LD_VAR 0 6
44129: PPUSH
44130: CALL_OW 264
44134: PUSH
44135: LD_INT 22
44137: PUSH
44138: EMPTY
44139: LIST
44140: IN
44141: IFFALSE 44162
// points := [ 40 , 1 , 1 ] ;
44143: LD_ADDR_VAR 0 9
44147: PUSH
44148: LD_INT 40
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: LIST
44161: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44162: LD_VAR 0 6
44166: PPUSH
44167: CALL_OW 264
44171: PUSH
44172: LD_INT 29
44174: PUSH
44175: EMPTY
44176: LIST
44177: IN
44178: IFFALSE 44199
// points := [ 70 , 200 , 400 ] ;
44180: LD_ADDR_VAR 0 9
44184: PUSH
44185: LD_INT 70
44187: PUSH
44188: LD_INT 200
44190: PUSH
44191: LD_INT 400
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: LIST
44198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44199: LD_VAR 0 6
44203: PPUSH
44204: CALL_OW 264
44208: PUSH
44209: LD_INT 14
44211: PUSH
44212: LD_INT 53
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: IN
44219: IFFALSE 44240
// points := [ 40 , 10 , 20 ] ;
44221: LD_ADDR_VAR 0 9
44225: PUSH
44226: LD_INT 40
44228: PUSH
44229: LD_INT 10
44231: PUSH
44232: LD_INT 20
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: LIST
44239: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44240: LD_VAR 0 6
44244: PPUSH
44245: CALL_OW 264
44249: PUSH
44250: LD_INT 9
44252: PUSH
44253: EMPTY
44254: LIST
44255: IN
44256: IFFALSE 44277
// points := [ 5 , 70 , 20 ] ;
44258: LD_ADDR_VAR 0 9
44262: PUSH
44263: LD_INT 5
44265: PUSH
44266: LD_INT 70
44268: PUSH
44269: LD_INT 20
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: LIST
44276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44277: LD_VAR 0 6
44281: PPUSH
44282: CALL_OW 264
44286: PUSH
44287: LD_INT 10
44289: PUSH
44290: EMPTY
44291: LIST
44292: IN
44293: IFFALSE 44314
// points := [ 35 , 110 , 70 ] ;
44295: LD_ADDR_VAR 0 9
44299: PUSH
44300: LD_INT 35
44302: PUSH
44303: LD_INT 110
44305: PUSH
44306: LD_INT 70
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: LIST
44313: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44314: LD_VAR 0 6
44318: PPUSH
44319: CALL_OW 265
44323: PUSH
44324: LD_INT 25
44326: EQUAL
44327: IFFALSE 44348
// points := [ 80 , 65 , 100 ] ;
44329: LD_ADDR_VAR 0 9
44333: PUSH
44334: LD_INT 80
44336: PUSH
44337: LD_INT 65
44339: PUSH
44340: LD_INT 100
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: LIST
44347: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44348: LD_VAR 0 6
44352: PPUSH
44353: CALL_OW 263
44357: PUSH
44358: LD_INT 1
44360: EQUAL
44361: IFFALSE 44396
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44363: LD_ADDR_VAR 0 10
44367: PUSH
44368: LD_VAR 0 10
44372: PUSH
44373: LD_VAR 0 6
44377: PPUSH
44378: CALL_OW 311
44382: PPUSH
44383: LD_INT 3
44385: PPUSH
44386: CALL_OW 259
44390: PUSH
44391: LD_INT 4
44393: MUL
44394: MUL
44395: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44396: LD_VAR 0 6
44400: PPUSH
44401: CALL_OW 263
44405: PUSH
44406: LD_INT 2
44408: EQUAL
44409: IFFALSE 44460
// begin j := IsControledBy ( i ) ;
44411: LD_ADDR_VAR 0 7
44415: PUSH
44416: LD_VAR 0 6
44420: PPUSH
44421: CALL_OW 312
44425: ST_TO_ADDR
// if j then
44426: LD_VAR 0 7
44430: IFFALSE 44460
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44432: LD_ADDR_VAR 0 10
44436: PUSH
44437: LD_VAR 0 10
44441: PUSH
44442: LD_VAR 0 7
44446: PPUSH
44447: LD_INT 3
44449: PPUSH
44450: CALL_OW 259
44454: PUSH
44455: LD_INT 3
44457: MUL
44458: MUL
44459: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44460: LD_VAR 0 6
44464: PPUSH
44465: CALL_OW 264
44469: PUSH
44470: LD_INT 5
44472: PUSH
44473: LD_INT 6
44475: PUSH
44476: LD_INT 46
44478: PUSH
44479: LD_INT 44
44481: PUSH
44482: LD_INT 47
44484: PUSH
44485: LD_INT 45
44487: PUSH
44488: LD_INT 28
44490: PUSH
44491: LD_INT 7
44493: PUSH
44494: LD_INT 27
44496: PUSH
44497: LD_INT 29
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: IN
44512: PUSH
44513: LD_VAR 0 1
44517: PPUSH
44518: LD_INT 52
44520: PPUSH
44521: CALL_OW 321
44525: PUSH
44526: LD_INT 2
44528: EQUAL
44529: AND
44530: IFFALSE 44547
// bpoints := bpoints * 1.2 ;
44532: LD_ADDR_VAR 0 10
44536: PUSH
44537: LD_VAR 0 10
44541: PUSH
44542: LD_REAL  1.20000000000000E+0000
44545: MUL
44546: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44547: LD_VAR 0 6
44551: PPUSH
44552: CALL_OW 264
44556: PUSH
44557: LD_INT 6
44559: PUSH
44560: LD_INT 46
44562: PUSH
44563: LD_INT 47
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: IN
44571: IFFALSE 44588
// bpoints := bpoints * 1.2 ;
44573: LD_ADDR_VAR 0 10
44577: PUSH
44578: LD_VAR 0 10
44582: PUSH
44583: LD_REAL  1.20000000000000E+0000
44586: MUL
44587: ST_TO_ADDR
// end ; unit_building :
44588: GO 44602
44590: LD_INT 3
44592: DOUBLE
44593: EQUAL
44594: IFTRUE 44598
44596: GO 44601
44598: POP
// ; end ;
44599: GO 44602
44601: POP
// for j = 1 to 3 do
44602: LD_ADDR_VAR 0 7
44606: PUSH
44607: DOUBLE
44608: LD_INT 1
44610: DEC
44611: ST_TO_ADDR
44612: LD_INT 3
44614: PUSH
44615: FOR_TO
44616: IFFALSE 44669
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44618: LD_ADDR_VAR 0 5
44622: PUSH
44623: LD_VAR 0 5
44627: PPUSH
44628: LD_VAR 0 7
44632: PPUSH
44633: LD_VAR 0 5
44637: PUSH
44638: LD_VAR 0 7
44642: ARRAY
44643: PUSH
44644: LD_VAR 0 9
44648: PUSH
44649: LD_VAR 0 7
44653: ARRAY
44654: PUSH
44655: LD_VAR 0 10
44659: MUL
44660: PLUS
44661: PPUSH
44662: CALL_OW 1
44666: ST_TO_ADDR
44667: GO 44615
44669: POP
44670: POP
// end ;
44671: GO 43154
44673: POP
44674: POP
// result := Replace ( result , 4 , tmp ) ;
44675: LD_ADDR_VAR 0 5
44679: PUSH
44680: LD_VAR 0 5
44684: PPUSH
44685: LD_INT 4
44687: PPUSH
44688: LD_VAR 0 8
44692: PPUSH
44693: CALL_OW 1
44697: ST_TO_ADDR
// end ;
44698: LD_VAR 0 5
44702: RET
// export function DangerAtRange ( unit , range ) ; begin
44703: LD_INT 0
44705: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44706: LD_ADDR_VAR 0 3
44710: PUSH
44711: LD_VAR 0 1
44715: PPUSH
44716: CALL_OW 255
44720: PPUSH
44721: LD_VAR 0 1
44725: PPUSH
44726: CALL_OW 250
44730: PPUSH
44731: LD_VAR 0 1
44735: PPUSH
44736: CALL_OW 251
44740: PPUSH
44741: LD_VAR 0 2
44745: PPUSH
44746: CALL 43006 0 4
44750: ST_TO_ADDR
// end ;
44751: LD_VAR 0 3
44755: RET
// export function DangerInArea ( side , area ) ; begin
44756: LD_INT 0
44758: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44759: LD_ADDR_VAR 0 3
44763: PUSH
44764: LD_VAR 0 2
44768: PPUSH
44769: LD_INT 81
44771: PUSH
44772: LD_VAR 0 1
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PPUSH
44781: CALL_OW 70
44785: ST_TO_ADDR
// end ;
44786: LD_VAR 0 3
44790: RET
// export function IsExtension ( b ) ; begin
44791: LD_INT 0
44793: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44794: LD_ADDR_VAR 0 2
44798: PUSH
44799: LD_VAR 0 1
44803: PUSH
44804: LD_INT 23
44806: PUSH
44807: LD_INT 20
44809: PUSH
44810: LD_INT 22
44812: PUSH
44813: LD_INT 17
44815: PUSH
44816: LD_INT 24
44818: PUSH
44819: LD_INT 21
44821: PUSH
44822: LD_INT 19
44824: PUSH
44825: LD_INT 16
44827: PUSH
44828: LD_INT 25
44830: PUSH
44831: LD_INT 18
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: IN
44846: ST_TO_ADDR
// end ;
44847: LD_VAR 0 2
44851: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
44852: LD_INT 0
44854: PPUSH
44855: PPUSH
44856: PPUSH
// result := [ ] ;
44857: LD_ADDR_VAR 0 3
44861: PUSH
44862: EMPTY
44863: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44864: LD_ADDR_VAR 0 4
44868: PUSH
44869: LD_VAR 0 2
44873: PPUSH
44874: LD_INT 21
44876: PUSH
44877: LD_INT 3
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PPUSH
44884: CALL_OW 70
44888: ST_TO_ADDR
// if not tmp then
44889: LD_VAR 0 4
44893: NOT
44894: IFFALSE 44898
// exit ;
44896: GO 44956
// for i in tmp do
44898: LD_ADDR_VAR 0 5
44902: PUSH
44903: LD_VAR 0 4
44907: PUSH
44908: FOR_IN
44909: IFFALSE 44944
// if GetBase ( i ) <> base then
44911: LD_VAR 0 5
44915: PPUSH
44916: CALL_OW 274
44920: PUSH
44921: LD_VAR 0 1
44925: NONEQUAL
44926: IFFALSE 44942
// ComLinkToBase ( base , i ) ;
44928: LD_VAR 0 1
44932: PPUSH
44933: LD_VAR 0 5
44937: PPUSH
44938: CALL_OW 169
44942: GO 44908
44944: POP
44945: POP
// result := tmp ;
44946: LD_ADDR_VAR 0 3
44950: PUSH
44951: LD_VAR 0 4
44955: ST_TO_ADDR
// end ;
44956: LD_VAR 0 3
44960: RET
// export function ComComplete ( unit , b ) ; var i ; begin
44961: LD_INT 0
44963: PPUSH
44964: PPUSH
// if BuildingStatus ( b ) = bs_build then
44965: LD_VAR 0 2
44969: PPUSH
44970: CALL_OW 461
44974: PUSH
44975: LD_INT 1
44977: EQUAL
44978: IFFALSE 45038
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44980: LD_VAR 0 1
44984: PPUSH
44985: LD_STRING h
44987: PUSH
44988: LD_VAR 0 2
44992: PPUSH
44993: CALL_OW 250
44997: PUSH
44998: LD_VAR 0 2
45002: PPUSH
45003: CALL_OW 251
45007: PUSH
45008: LD_VAR 0 2
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: PUSH
45031: EMPTY
45032: LIST
45033: PPUSH
45034: CALL_OW 446
// end ;
45038: LD_VAR 0 3
45042: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45043: LD_INT 0
45045: PPUSH
45046: PPUSH
45047: PPUSH
45048: PPUSH
45049: PPUSH
45050: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
45051: LD_VAR 0 1
45055: NOT
45056: PUSH
45057: LD_VAR 0 1
45061: PPUSH
45062: CALL_OW 263
45066: PUSH
45067: LD_INT 2
45069: EQUAL
45070: NOT
45071: OR
45072: IFFALSE 45076
// exit ;
45074: GO 45392
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45076: LD_ADDR_VAR 0 6
45080: PUSH
45081: LD_INT 22
45083: PUSH
45084: LD_VAR 0 1
45088: PPUSH
45089: CALL_OW 255
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: LD_INT 30
45103: PUSH
45104: LD_INT 36
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 34
45113: PUSH
45114: LD_INT 31
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: LIST
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PPUSH
45130: CALL_OW 69
45134: ST_TO_ADDR
// if not tmp then
45135: LD_VAR 0 6
45139: NOT
45140: IFFALSE 45144
// exit ;
45142: GO 45392
// result := [ ] ;
45144: LD_ADDR_VAR 0 2
45148: PUSH
45149: EMPTY
45150: ST_TO_ADDR
// for i in tmp do
45151: LD_ADDR_VAR 0 3
45155: PUSH
45156: LD_VAR 0 6
45160: PUSH
45161: FOR_IN
45162: IFFALSE 45233
// begin t := UnitsInside ( i ) ;
45164: LD_ADDR_VAR 0 4
45168: PUSH
45169: LD_VAR 0 3
45173: PPUSH
45174: CALL_OW 313
45178: ST_TO_ADDR
// if t then
45179: LD_VAR 0 4
45183: IFFALSE 45231
// for j in t do
45185: LD_ADDR_VAR 0 7
45189: PUSH
45190: LD_VAR 0 4
45194: PUSH
45195: FOR_IN
45196: IFFALSE 45229
// result := Insert ( result , result + 1 , j ) ;
45198: LD_ADDR_VAR 0 2
45202: PUSH
45203: LD_VAR 0 2
45207: PPUSH
45208: LD_VAR 0 2
45212: PUSH
45213: LD_INT 1
45215: PLUS
45216: PPUSH
45217: LD_VAR 0 7
45221: PPUSH
45222: CALL_OW 2
45226: ST_TO_ADDR
45227: GO 45195
45229: POP
45230: POP
// end ;
45231: GO 45161
45233: POP
45234: POP
// if not result then
45235: LD_VAR 0 2
45239: NOT
45240: IFFALSE 45244
// exit ;
45242: GO 45392
// mech := result [ 1 ] ;
45244: LD_ADDR_VAR 0 5
45248: PUSH
45249: LD_VAR 0 2
45253: PUSH
45254: LD_INT 1
45256: ARRAY
45257: ST_TO_ADDR
// if result > 1 then
45258: LD_VAR 0 2
45262: PUSH
45263: LD_INT 1
45265: GREATER
45266: IFFALSE 45378
// for i = 2 to result do
45268: LD_ADDR_VAR 0 3
45272: PUSH
45273: DOUBLE
45274: LD_INT 2
45276: DEC
45277: ST_TO_ADDR
45278: LD_VAR 0 2
45282: PUSH
45283: FOR_TO
45284: IFFALSE 45376
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45286: LD_ADDR_VAR 0 4
45290: PUSH
45291: LD_VAR 0 2
45295: PUSH
45296: LD_VAR 0 3
45300: ARRAY
45301: PPUSH
45302: LD_INT 3
45304: PPUSH
45305: CALL_OW 259
45309: PUSH
45310: LD_VAR 0 2
45314: PUSH
45315: LD_VAR 0 3
45319: ARRAY
45320: PPUSH
45321: CALL_OW 432
45325: MINUS
45326: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45327: LD_VAR 0 4
45331: PUSH
45332: LD_VAR 0 5
45336: PPUSH
45337: LD_INT 3
45339: PPUSH
45340: CALL_OW 259
45344: PUSH
45345: LD_VAR 0 5
45349: PPUSH
45350: CALL_OW 432
45354: MINUS
45355: GREATEREQUAL
45356: IFFALSE 45374
// mech := result [ i ] ;
45358: LD_ADDR_VAR 0 5
45362: PUSH
45363: LD_VAR 0 2
45367: PUSH
45368: LD_VAR 0 3
45372: ARRAY
45373: ST_TO_ADDR
// end ;
45374: GO 45283
45376: POP
45377: POP
// ComLinkTo ( vehicle , mech ) ;
45378: LD_VAR 0 1
45382: PPUSH
45383: LD_VAR 0 5
45387: PPUSH
45388: CALL_OW 135
// end ;
45392: LD_VAR 0 2
45396: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45397: LD_INT 0
45399: PPUSH
45400: PPUSH
45401: PPUSH
45402: PPUSH
45403: PPUSH
45404: PPUSH
45405: PPUSH
45406: PPUSH
45407: PPUSH
45408: PPUSH
45409: PPUSH
45410: PPUSH
45411: PPUSH
// result := [ ] ;
45412: LD_ADDR_VAR 0 7
45416: PUSH
45417: EMPTY
45418: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45419: LD_VAR 0 1
45423: PPUSH
45424: CALL_OW 266
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: IN
45439: NOT
45440: IFFALSE 45444
// exit ;
45442: GO 47075
// if name then
45444: LD_VAR 0 3
45448: IFFALSE 45464
// SetBName ( base_dep , name ) ;
45450: LD_VAR 0 1
45454: PPUSH
45455: LD_VAR 0 3
45459: PPUSH
45460: CALL_OW 500
// base := GetBase ( base_dep ) ;
45464: LD_ADDR_VAR 0 15
45468: PUSH
45469: LD_VAR 0 1
45473: PPUSH
45474: CALL_OW 274
45478: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45479: LD_ADDR_VAR 0 16
45483: PUSH
45484: LD_VAR 0 1
45488: PPUSH
45489: CALL_OW 255
45493: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45494: LD_ADDR_VAR 0 17
45498: PUSH
45499: LD_VAR 0 1
45503: PPUSH
45504: CALL_OW 248
45508: ST_TO_ADDR
// if sources then
45509: LD_VAR 0 5
45513: IFFALSE 45560
// for i = 1 to 3 do
45515: LD_ADDR_VAR 0 8
45519: PUSH
45520: DOUBLE
45521: LD_INT 1
45523: DEC
45524: ST_TO_ADDR
45525: LD_INT 3
45527: PUSH
45528: FOR_TO
45529: IFFALSE 45558
// AddResourceType ( base , i , sources [ i ] ) ;
45531: LD_VAR 0 15
45535: PPUSH
45536: LD_VAR 0 8
45540: PPUSH
45541: LD_VAR 0 5
45545: PUSH
45546: LD_VAR 0 8
45550: ARRAY
45551: PPUSH
45552: CALL_OW 276
45556: GO 45528
45558: POP
45559: POP
// buildings := GetBaseBuildings ( base , area ) ;
45560: LD_ADDR_VAR 0 18
45564: PUSH
45565: LD_VAR 0 15
45569: PPUSH
45570: LD_VAR 0 2
45574: PPUSH
45575: CALL 44852 0 2
45579: ST_TO_ADDR
// InitHc ;
45580: CALL_OW 19
// InitUc ;
45584: CALL_OW 18
// uc_side := side ;
45588: LD_ADDR_OWVAR 20
45592: PUSH
45593: LD_VAR 0 16
45597: ST_TO_ADDR
// uc_nation := nation ;
45598: LD_ADDR_OWVAR 21
45602: PUSH
45603: LD_VAR 0 17
45607: ST_TO_ADDR
// if buildings then
45608: LD_VAR 0 18
45612: IFFALSE 46934
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45614: LD_ADDR_VAR 0 19
45618: PUSH
45619: LD_VAR 0 18
45623: PPUSH
45624: LD_INT 2
45626: PUSH
45627: LD_INT 30
45629: PUSH
45630: LD_INT 29
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 30
45639: PUSH
45640: LD_INT 30
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: LIST
45651: PPUSH
45652: CALL_OW 72
45656: ST_TO_ADDR
// if tmp then
45657: LD_VAR 0 19
45661: IFFALSE 45709
// for i in tmp do
45663: LD_ADDR_VAR 0 8
45667: PUSH
45668: LD_VAR 0 19
45672: PUSH
45673: FOR_IN
45674: IFFALSE 45707
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45676: LD_VAR 0 8
45680: PPUSH
45681: CALL_OW 250
45685: PPUSH
45686: LD_VAR 0 8
45690: PPUSH
45691: CALL_OW 251
45695: PPUSH
45696: LD_VAR 0 16
45700: PPUSH
45701: CALL_OW 441
45705: GO 45673
45707: POP
45708: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45709: LD_VAR 0 18
45713: PPUSH
45714: LD_INT 2
45716: PUSH
45717: LD_INT 30
45719: PUSH
45720: LD_INT 32
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 30
45729: PUSH
45730: LD_INT 33
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: LIST
45741: PPUSH
45742: CALL_OW 72
45746: IFFALSE 45834
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45748: LD_ADDR_VAR 0 8
45752: PUSH
45753: LD_VAR 0 18
45757: PPUSH
45758: LD_INT 2
45760: PUSH
45761: LD_INT 30
45763: PUSH
45764: LD_INT 32
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 30
45773: PUSH
45774: LD_INT 33
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: LIST
45785: PPUSH
45786: CALL_OW 72
45790: PUSH
45791: FOR_IN
45792: IFFALSE 45832
// begin if not GetBWeapon ( i ) then
45794: LD_VAR 0 8
45798: PPUSH
45799: CALL_OW 269
45803: NOT
45804: IFFALSE 45830
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45806: LD_VAR 0 8
45810: PPUSH
45811: LD_VAR 0 8
45815: PPUSH
45816: LD_VAR 0 2
45820: PPUSH
45821: CALL 47080 0 2
45825: PPUSH
45826: CALL_OW 431
// end ;
45830: GO 45791
45832: POP
45833: POP
// end ; for i = 1 to personel do
45834: LD_ADDR_VAR 0 8
45838: PUSH
45839: DOUBLE
45840: LD_INT 1
45842: DEC
45843: ST_TO_ADDR
45844: LD_VAR 0 6
45848: PUSH
45849: FOR_TO
45850: IFFALSE 46914
// begin if i > 4 then
45852: LD_VAR 0 8
45856: PUSH
45857: LD_INT 4
45859: GREATER
45860: IFFALSE 45864
// break ;
45862: GO 46914
// case i of 1 :
45864: LD_VAR 0 8
45868: PUSH
45869: LD_INT 1
45871: DOUBLE
45872: EQUAL
45873: IFTRUE 45877
45875: GO 45957
45877: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45878: LD_ADDR_VAR 0 12
45882: PUSH
45883: LD_VAR 0 18
45887: PPUSH
45888: LD_INT 22
45890: PUSH
45891: LD_VAR 0 16
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 58
45902: PUSH
45903: EMPTY
45904: LIST
45905: PUSH
45906: LD_INT 2
45908: PUSH
45909: LD_INT 30
45911: PUSH
45912: LD_INT 32
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 30
45921: PUSH
45922: LD_INT 4
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 30
45931: PUSH
45932: LD_INT 5
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: LIST
45949: PPUSH
45950: CALL_OW 72
45954: ST_TO_ADDR
45955: GO 46179
45957: LD_INT 2
45959: DOUBLE
45960: EQUAL
45961: IFTRUE 45965
45963: GO 46027
45965: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45966: LD_ADDR_VAR 0 12
45970: PUSH
45971: LD_VAR 0 18
45975: PPUSH
45976: LD_INT 22
45978: PUSH
45979: LD_VAR 0 16
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 2
45990: PUSH
45991: LD_INT 30
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 30
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: LIST
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PPUSH
46020: CALL_OW 72
46024: ST_TO_ADDR
46025: GO 46179
46027: LD_INT 3
46029: DOUBLE
46030: EQUAL
46031: IFTRUE 46035
46033: GO 46097
46035: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46036: LD_ADDR_VAR 0 12
46040: PUSH
46041: LD_VAR 0 18
46045: PPUSH
46046: LD_INT 22
46048: PUSH
46049: LD_VAR 0 16
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 2
46060: PUSH
46061: LD_INT 30
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 30
46073: PUSH
46074: LD_INT 3
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: LIST
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PPUSH
46090: CALL_OW 72
46094: ST_TO_ADDR
46095: GO 46179
46097: LD_INT 4
46099: DOUBLE
46100: EQUAL
46101: IFTRUE 46105
46103: GO 46178
46105: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46106: LD_ADDR_VAR 0 12
46110: PUSH
46111: LD_VAR 0 18
46115: PPUSH
46116: LD_INT 22
46118: PUSH
46119: LD_VAR 0 16
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 2
46130: PUSH
46131: LD_INT 30
46133: PUSH
46134: LD_INT 6
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 30
46143: PUSH
46144: LD_INT 7
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 30
46153: PUSH
46154: LD_INT 8
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PPUSH
46171: CALL_OW 72
46175: ST_TO_ADDR
46176: GO 46179
46178: POP
// if i = 1 then
46179: LD_VAR 0 8
46183: PUSH
46184: LD_INT 1
46186: EQUAL
46187: IFFALSE 46298
// begin tmp := [ ] ;
46189: LD_ADDR_VAR 0 19
46193: PUSH
46194: EMPTY
46195: ST_TO_ADDR
// for j in f do
46196: LD_ADDR_VAR 0 9
46200: PUSH
46201: LD_VAR 0 12
46205: PUSH
46206: FOR_IN
46207: IFFALSE 46280
// if GetBType ( j ) = b_bunker then
46209: LD_VAR 0 9
46213: PPUSH
46214: CALL_OW 266
46218: PUSH
46219: LD_INT 32
46221: EQUAL
46222: IFFALSE 46249
// tmp := Insert ( tmp , 1 , j ) else
46224: LD_ADDR_VAR 0 19
46228: PUSH
46229: LD_VAR 0 19
46233: PPUSH
46234: LD_INT 1
46236: PPUSH
46237: LD_VAR 0 9
46241: PPUSH
46242: CALL_OW 2
46246: ST_TO_ADDR
46247: GO 46278
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46249: LD_ADDR_VAR 0 19
46253: PUSH
46254: LD_VAR 0 19
46258: PPUSH
46259: LD_VAR 0 19
46263: PUSH
46264: LD_INT 1
46266: PLUS
46267: PPUSH
46268: LD_VAR 0 9
46272: PPUSH
46273: CALL_OW 2
46277: ST_TO_ADDR
46278: GO 46206
46280: POP
46281: POP
// if tmp then
46282: LD_VAR 0 19
46286: IFFALSE 46298
// f := tmp ;
46288: LD_ADDR_VAR 0 12
46292: PUSH
46293: LD_VAR 0 19
46297: ST_TO_ADDR
// end ; x := personel [ i ] ;
46298: LD_ADDR_VAR 0 13
46302: PUSH
46303: LD_VAR 0 6
46307: PUSH
46308: LD_VAR 0 8
46312: ARRAY
46313: ST_TO_ADDR
// if x = - 1 then
46314: LD_VAR 0 13
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: EQUAL
46323: IFFALSE 46532
// begin for j in f do
46325: LD_ADDR_VAR 0 9
46329: PUSH
46330: LD_VAR 0 12
46334: PUSH
46335: FOR_IN
46336: IFFALSE 46528
// repeat InitHc ;
46338: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46342: LD_VAR 0 9
46346: PPUSH
46347: CALL_OW 266
46351: PUSH
46352: LD_INT 5
46354: EQUAL
46355: IFFALSE 46425
// begin if UnitsInside ( j ) < 3 then
46357: LD_VAR 0 9
46361: PPUSH
46362: CALL_OW 313
46366: PUSH
46367: LD_INT 3
46369: LESS
46370: IFFALSE 46406
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46372: LD_INT 0
46374: PPUSH
46375: LD_INT 5
46377: PUSH
46378: LD_INT 8
46380: PUSH
46381: LD_INT 9
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: LIST
46388: PUSH
46389: LD_VAR 0 17
46393: ARRAY
46394: PPUSH
46395: LD_VAR 0 4
46399: PPUSH
46400: CALL_OW 380
46404: GO 46423
// PrepareHuman ( false , i , skill ) ;
46406: LD_INT 0
46408: PPUSH
46409: LD_VAR 0 8
46413: PPUSH
46414: LD_VAR 0 4
46418: PPUSH
46419: CALL_OW 380
// end else
46423: GO 46442
// PrepareHuman ( false , i , skill ) ;
46425: LD_INT 0
46427: PPUSH
46428: LD_VAR 0 8
46432: PPUSH
46433: LD_VAR 0 4
46437: PPUSH
46438: CALL_OW 380
// un := CreateHuman ;
46442: LD_ADDR_VAR 0 14
46446: PUSH
46447: CALL_OW 44
46451: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46452: LD_ADDR_VAR 0 7
46456: PUSH
46457: LD_VAR 0 7
46461: PPUSH
46462: LD_INT 1
46464: PPUSH
46465: LD_VAR 0 14
46469: PPUSH
46470: CALL_OW 2
46474: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46475: LD_VAR 0 14
46479: PPUSH
46480: LD_VAR 0 9
46484: PPUSH
46485: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46489: LD_VAR 0 9
46493: PPUSH
46494: CALL_OW 313
46498: PUSH
46499: LD_INT 6
46501: EQUAL
46502: PUSH
46503: LD_VAR 0 9
46507: PPUSH
46508: CALL_OW 266
46512: PUSH
46513: LD_INT 32
46515: PUSH
46516: LD_INT 31
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: IN
46523: OR
46524: IFFALSE 46338
46526: GO 46335
46528: POP
46529: POP
// end else
46530: GO 46912
// for j = 1 to x do
46532: LD_ADDR_VAR 0 9
46536: PUSH
46537: DOUBLE
46538: LD_INT 1
46540: DEC
46541: ST_TO_ADDR
46542: LD_VAR 0 13
46546: PUSH
46547: FOR_TO
46548: IFFALSE 46910
// begin InitHc ;
46550: CALL_OW 19
// if not f then
46554: LD_VAR 0 12
46558: NOT
46559: IFFALSE 46648
// begin PrepareHuman ( false , i , skill ) ;
46561: LD_INT 0
46563: PPUSH
46564: LD_VAR 0 8
46568: PPUSH
46569: LD_VAR 0 4
46573: PPUSH
46574: CALL_OW 380
// un := CreateHuman ;
46578: LD_ADDR_VAR 0 14
46582: PUSH
46583: CALL_OW 44
46587: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46588: LD_ADDR_VAR 0 7
46592: PUSH
46593: LD_VAR 0 7
46597: PPUSH
46598: LD_INT 1
46600: PPUSH
46601: LD_VAR 0 14
46605: PPUSH
46606: CALL_OW 2
46610: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46611: LD_VAR 0 14
46615: PPUSH
46616: LD_VAR 0 1
46620: PPUSH
46621: CALL_OW 250
46625: PPUSH
46626: LD_VAR 0 1
46630: PPUSH
46631: CALL_OW 251
46635: PPUSH
46636: LD_INT 10
46638: PPUSH
46639: LD_INT 0
46641: PPUSH
46642: CALL_OW 50
// continue ;
46646: GO 46547
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46648: LD_VAR 0 12
46652: PUSH
46653: LD_INT 1
46655: ARRAY
46656: PPUSH
46657: CALL_OW 313
46661: PUSH
46662: LD_VAR 0 12
46666: PUSH
46667: LD_INT 1
46669: ARRAY
46670: PPUSH
46671: CALL_OW 266
46675: PUSH
46676: LD_INT 32
46678: PUSH
46679: LD_INT 31
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: IN
46686: AND
46687: PUSH
46688: LD_VAR 0 12
46692: PUSH
46693: LD_INT 1
46695: ARRAY
46696: PPUSH
46697: CALL_OW 313
46701: PUSH
46702: LD_INT 6
46704: EQUAL
46705: OR
46706: IFFALSE 46726
// f := Delete ( f , 1 ) ;
46708: LD_ADDR_VAR 0 12
46712: PUSH
46713: LD_VAR 0 12
46717: PPUSH
46718: LD_INT 1
46720: PPUSH
46721: CALL_OW 3
46725: ST_TO_ADDR
// if not f then
46726: LD_VAR 0 12
46730: NOT
46731: IFFALSE 46749
// begin x := x + 2 ;
46733: LD_ADDR_VAR 0 13
46737: PUSH
46738: LD_VAR 0 13
46742: PUSH
46743: LD_INT 2
46745: PLUS
46746: ST_TO_ADDR
// continue ;
46747: GO 46547
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46749: LD_VAR 0 12
46753: PUSH
46754: LD_INT 1
46756: ARRAY
46757: PPUSH
46758: CALL_OW 266
46762: PUSH
46763: LD_INT 5
46765: EQUAL
46766: IFFALSE 46840
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46768: LD_VAR 0 12
46772: PUSH
46773: LD_INT 1
46775: ARRAY
46776: PPUSH
46777: CALL_OW 313
46781: PUSH
46782: LD_INT 3
46784: LESS
46785: IFFALSE 46821
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46787: LD_INT 0
46789: PPUSH
46790: LD_INT 5
46792: PUSH
46793: LD_INT 8
46795: PUSH
46796: LD_INT 9
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: LIST
46803: PUSH
46804: LD_VAR 0 17
46808: ARRAY
46809: PPUSH
46810: LD_VAR 0 4
46814: PPUSH
46815: CALL_OW 380
46819: GO 46838
// PrepareHuman ( false , i , skill ) ;
46821: LD_INT 0
46823: PPUSH
46824: LD_VAR 0 8
46828: PPUSH
46829: LD_VAR 0 4
46833: PPUSH
46834: CALL_OW 380
// end else
46838: GO 46857
// PrepareHuman ( false , i , skill ) ;
46840: LD_INT 0
46842: PPUSH
46843: LD_VAR 0 8
46847: PPUSH
46848: LD_VAR 0 4
46852: PPUSH
46853: CALL_OW 380
// un := CreateHuman ;
46857: LD_ADDR_VAR 0 14
46861: PUSH
46862: CALL_OW 44
46866: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46867: LD_ADDR_VAR 0 7
46871: PUSH
46872: LD_VAR 0 7
46876: PPUSH
46877: LD_INT 1
46879: PPUSH
46880: LD_VAR 0 14
46884: PPUSH
46885: CALL_OW 2
46889: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46890: LD_VAR 0 14
46894: PPUSH
46895: LD_VAR 0 12
46899: PUSH
46900: LD_INT 1
46902: ARRAY
46903: PPUSH
46904: CALL_OW 52
// end ;
46908: GO 46547
46910: POP
46911: POP
// end ;
46912: GO 45849
46914: POP
46915: POP
// result := result ^ buildings ;
46916: LD_ADDR_VAR 0 7
46920: PUSH
46921: LD_VAR 0 7
46925: PUSH
46926: LD_VAR 0 18
46930: ADD
46931: ST_TO_ADDR
// end else
46932: GO 47075
// begin for i = 1 to personel do
46934: LD_ADDR_VAR 0 8
46938: PUSH
46939: DOUBLE
46940: LD_INT 1
46942: DEC
46943: ST_TO_ADDR
46944: LD_VAR 0 6
46948: PUSH
46949: FOR_TO
46950: IFFALSE 47073
// begin if i > 4 then
46952: LD_VAR 0 8
46956: PUSH
46957: LD_INT 4
46959: GREATER
46960: IFFALSE 46964
// break ;
46962: GO 47073
// x := personel [ i ] ;
46964: LD_ADDR_VAR 0 13
46968: PUSH
46969: LD_VAR 0 6
46973: PUSH
46974: LD_VAR 0 8
46978: ARRAY
46979: ST_TO_ADDR
// if x = - 1 then
46980: LD_VAR 0 13
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: EQUAL
46989: IFFALSE 46993
// continue ;
46991: GO 46949
// PrepareHuman ( false , i , skill ) ;
46993: LD_INT 0
46995: PPUSH
46996: LD_VAR 0 8
47000: PPUSH
47001: LD_VAR 0 4
47005: PPUSH
47006: CALL_OW 380
// un := CreateHuman ;
47010: LD_ADDR_VAR 0 14
47014: PUSH
47015: CALL_OW 44
47019: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47020: LD_VAR 0 14
47024: PPUSH
47025: LD_VAR 0 1
47029: PPUSH
47030: CALL_OW 250
47034: PPUSH
47035: LD_VAR 0 1
47039: PPUSH
47040: CALL_OW 251
47044: PPUSH
47045: LD_INT 10
47047: PPUSH
47048: LD_INT 0
47050: PPUSH
47051: CALL_OW 50
// result := result ^ un ;
47055: LD_ADDR_VAR 0 7
47059: PUSH
47060: LD_VAR 0 7
47064: PUSH
47065: LD_VAR 0 14
47069: ADD
47070: ST_TO_ADDR
// end ;
47071: GO 46949
47073: POP
47074: POP
// end ; end ;
47075: LD_VAR 0 7
47079: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47080: LD_INT 0
47082: PPUSH
47083: PPUSH
47084: PPUSH
47085: PPUSH
47086: PPUSH
47087: PPUSH
47088: PPUSH
47089: PPUSH
47090: PPUSH
47091: PPUSH
47092: PPUSH
47093: PPUSH
47094: PPUSH
47095: PPUSH
47096: PPUSH
47097: PPUSH
// result := false ;
47098: LD_ADDR_VAR 0 3
47102: PUSH
47103: LD_INT 0
47105: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47106: LD_VAR 0 1
47110: NOT
47111: PUSH
47112: LD_VAR 0 1
47116: PPUSH
47117: CALL_OW 266
47121: PUSH
47122: LD_INT 32
47124: PUSH
47125: LD_INT 33
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: IN
47132: NOT
47133: OR
47134: IFFALSE 47138
// exit ;
47136: GO 48274
// nat := GetNation ( tower ) ;
47138: LD_ADDR_VAR 0 12
47142: PUSH
47143: LD_VAR 0 1
47147: PPUSH
47148: CALL_OW 248
47152: ST_TO_ADDR
// side := GetSide ( tower ) ;
47153: LD_ADDR_VAR 0 16
47157: PUSH
47158: LD_VAR 0 1
47162: PPUSH
47163: CALL_OW 255
47167: ST_TO_ADDR
// x := GetX ( tower ) ;
47168: LD_ADDR_VAR 0 10
47172: PUSH
47173: LD_VAR 0 1
47177: PPUSH
47178: CALL_OW 250
47182: ST_TO_ADDR
// y := GetY ( tower ) ;
47183: LD_ADDR_VAR 0 11
47187: PUSH
47188: LD_VAR 0 1
47192: PPUSH
47193: CALL_OW 251
47197: ST_TO_ADDR
// if not x or not y then
47198: LD_VAR 0 10
47202: NOT
47203: PUSH
47204: LD_VAR 0 11
47208: NOT
47209: OR
47210: IFFALSE 47214
// exit ;
47212: GO 48274
// weapon := 0 ;
47214: LD_ADDR_VAR 0 18
47218: PUSH
47219: LD_INT 0
47221: ST_TO_ADDR
// fac_list := [ ] ;
47222: LD_ADDR_VAR 0 17
47226: PUSH
47227: EMPTY
47228: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
47229: LD_ADDR_VAR 0 6
47233: PUSH
47234: LD_VAR 0 1
47238: PPUSH
47239: CALL_OW 274
47243: PPUSH
47244: LD_VAR 0 2
47248: PPUSH
47249: CALL 44852 0 2
47253: PPUSH
47254: LD_INT 30
47256: PUSH
47257: LD_INT 3
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PPUSH
47264: CALL_OW 72
47268: ST_TO_ADDR
// if not factories then
47269: LD_VAR 0 6
47273: NOT
47274: IFFALSE 47278
// exit ;
47276: GO 48274
// for i in factories do
47278: LD_ADDR_VAR 0 8
47282: PUSH
47283: LD_VAR 0 6
47287: PUSH
47288: FOR_IN
47289: IFFALSE 47314
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47291: LD_ADDR_VAR 0 17
47295: PUSH
47296: LD_VAR 0 17
47300: PUSH
47301: LD_VAR 0 8
47305: PPUSH
47306: CALL_OW 478
47310: UNION
47311: ST_TO_ADDR
47312: GO 47288
47314: POP
47315: POP
// if not fac_list then
47316: LD_VAR 0 17
47320: NOT
47321: IFFALSE 47325
// exit ;
47323: GO 48274
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47325: LD_ADDR_VAR 0 5
47329: PUSH
47330: LD_INT 4
47332: PUSH
47333: LD_INT 5
47335: PUSH
47336: LD_INT 9
47338: PUSH
47339: LD_INT 10
47341: PUSH
47342: LD_INT 6
47344: PUSH
47345: LD_INT 7
47347: PUSH
47348: LD_INT 11
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 27
47362: PUSH
47363: LD_INT 28
47365: PUSH
47366: LD_INT 26
47368: PUSH
47369: LD_INT 30
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 43
47380: PUSH
47381: LD_INT 44
47383: PUSH
47384: LD_INT 46
47386: PUSH
47387: LD_INT 45
47389: PUSH
47390: LD_INT 47
47392: PUSH
47393: LD_INT 49
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: LIST
47408: PUSH
47409: LD_VAR 0 12
47413: ARRAY
47414: ST_TO_ADDR
// for i in list do
47415: LD_ADDR_VAR 0 8
47419: PUSH
47420: LD_VAR 0 5
47424: PUSH
47425: FOR_IN
47426: IFFALSE 47459
// if not i in fac_list then
47428: LD_VAR 0 8
47432: PUSH
47433: LD_VAR 0 17
47437: IN
47438: NOT
47439: IFFALSE 47457
// list := list diff i ;
47441: LD_ADDR_VAR 0 5
47445: PUSH
47446: LD_VAR 0 5
47450: PUSH
47451: LD_VAR 0 8
47455: DIFF
47456: ST_TO_ADDR
47457: GO 47425
47459: POP
47460: POP
// if not list then
47461: LD_VAR 0 5
47465: NOT
47466: IFFALSE 47470
// exit ;
47468: GO 48274
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47470: LD_VAR 0 12
47474: PUSH
47475: LD_INT 3
47477: EQUAL
47478: PUSH
47479: LD_INT 49
47481: PUSH
47482: LD_VAR 0 5
47486: IN
47487: AND
47488: PUSH
47489: LD_INT 31
47491: PPUSH
47492: LD_VAR 0 16
47496: PPUSH
47497: CALL_OW 321
47501: PUSH
47502: LD_INT 2
47504: EQUAL
47505: AND
47506: IFFALSE 47566
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47508: LD_INT 22
47510: PUSH
47511: LD_VAR 0 16
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 35
47522: PUSH
47523: LD_INT 49
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 91
47532: PUSH
47533: LD_VAR 0 1
47537: PUSH
47538: LD_INT 10
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: LIST
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: LIST
47550: PPUSH
47551: CALL_OW 69
47555: NOT
47556: IFFALSE 47566
// weapon := ru_time_lapser ;
47558: LD_ADDR_VAR 0 18
47562: PUSH
47563: LD_INT 49
47565: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47566: LD_VAR 0 12
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: IN
47581: PUSH
47582: LD_INT 11
47584: PUSH
47585: LD_VAR 0 5
47589: IN
47590: PUSH
47591: LD_INT 30
47593: PUSH
47594: LD_VAR 0 5
47598: IN
47599: OR
47600: AND
47601: PUSH
47602: LD_INT 6
47604: PPUSH
47605: LD_VAR 0 16
47609: PPUSH
47610: CALL_OW 321
47614: PUSH
47615: LD_INT 2
47617: EQUAL
47618: AND
47619: IFFALSE 47784
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47621: LD_INT 22
47623: PUSH
47624: LD_VAR 0 16
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 2
47635: PUSH
47636: LD_INT 35
47638: PUSH
47639: LD_INT 11
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 35
47648: PUSH
47649: LD_INT 30
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 91
47663: PUSH
47664: LD_VAR 0 1
47668: PUSH
47669: LD_INT 18
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: LIST
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: LIST
47681: PPUSH
47682: CALL_OW 69
47686: NOT
47687: PUSH
47688: LD_INT 22
47690: PUSH
47691: LD_VAR 0 16
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: LD_INT 30
47705: PUSH
47706: LD_INT 32
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 30
47715: PUSH
47716: LD_INT 33
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 91
47730: PUSH
47731: LD_VAR 0 1
47735: PUSH
47736: LD_INT 12
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: LIST
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: LIST
47748: PUSH
47749: EMPTY
47750: LIST
47751: PPUSH
47752: CALL_OW 69
47756: PUSH
47757: LD_INT 2
47759: GREATER
47760: AND
47761: IFFALSE 47784
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47763: LD_ADDR_VAR 0 18
47767: PUSH
47768: LD_INT 11
47770: PUSH
47771: LD_INT 30
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_VAR 0 12
47782: ARRAY
47783: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47784: LD_VAR 0 18
47788: NOT
47789: PUSH
47790: LD_INT 40
47792: PPUSH
47793: LD_VAR 0 16
47797: PPUSH
47798: CALL_OW 321
47802: PUSH
47803: LD_INT 2
47805: EQUAL
47806: AND
47807: PUSH
47808: LD_INT 7
47810: PUSH
47811: LD_VAR 0 5
47815: IN
47816: PUSH
47817: LD_INT 28
47819: PUSH
47820: LD_VAR 0 5
47824: IN
47825: OR
47826: PUSH
47827: LD_INT 45
47829: PUSH
47830: LD_VAR 0 5
47834: IN
47835: OR
47836: AND
47837: IFFALSE 48091
// begin hex := GetHexInfo ( x , y ) ;
47839: LD_ADDR_VAR 0 4
47843: PUSH
47844: LD_VAR 0 10
47848: PPUSH
47849: LD_VAR 0 11
47853: PPUSH
47854: CALL_OW 546
47858: ST_TO_ADDR
// if hex [ 1 ] then
47859: LD_VAR 0 4
47863: PUSH
47864: LD_INT 1
47866: ARRAY
47867: IFFALSE 47871
// exit ;
47869: GO 48274
// height := hex [ 2 ] ;
47871: LD_ADDR_VAR 0 15
47875: PUSH
47876: LD_VAR 0 4
47880: PUSH
47881: LD_INT 2
47883: ARRAY
47884: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47885: LD_ADDR_VAR 0 14
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: LD_INT 3
47898: PUSH
47899: LD_INT 5
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: ST_TO_ADDR
// for i in tmp do
47908: LD_ADDR_VAR 0 8
47912: PUSH
47913: LD_VAR 0 14
47917: PUSH
47918: FOR_IN
47919: IFFALSE 48089
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47921: LD_ADDR_VAR 0 9
47925: PUSH
47926: LD_VAR 0 10
47930: PPUSH
47931: LD_VAR 0 8
47935: PPUSH
47936: LD_INT 5
47938: PPUSH
47939: CALL_OW 272
47943: PUSH
47944: LD_VAR 0 11
47948: PPUSH
47949: LD_VAR 0 8
47953: PPUSH
47954: LD_INT 5
47956: PPUSH
47957: CALL_OW 273
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47966: LD_VAR 0 9
47970: PUSH
47971: LD_INT 1
47973: ARRAY
47974: PPUSH
47975: LD_VAR 0 9
47979: PUSH
47980: LD_INT 2
47982: ARRAY
47983: PPUSH
47984: CALL_OW 488
47988: IFFALSE 48087
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47990: LD_ADDR_VAR 0 4
47994: PUSH
47995: LD_VAR 0 9
47999: PUSH
48000: LD_INT 1
48002: ARRAY
48003: PPUSH
48004: LD_VAR 0 9
48008: PUSH
48009: LD_INT 2
48011: ARRAY
48012: PPUSH
48013: CALL_OW 546
48017: ST_TO_ADDR
// if hex [ 1 ] then
48018: LD_VAR 0 4
48022: PUSH
48023: LD_INT 1
48025: ARRAY
48026: IFFALSE 48030
// continue ;
48028: GO 47918
// h := hex [ 2 ] ;
48030: LD_ADDR_VAR 0 13
48034: PUSH
48035: LD_VAR 0 4
48039: PUSH
48040: LD_INT 2
48042: ARRAY
48043: ST_TO_ADDR
// if h + 7 < height then
48044: LD_VAR 0 13
48048: PUSH
48049: LD_INT 7
48051: PLUS
48052: PUSH
48053: LD_VAR 0 15
48057: LESS
48058: IFFALSE 48087
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48060: LD_ADDR_VAR 0 18
48064: PUSH
48065: LD_INT 7
48067: PUSH
48068: LD_INT 28
48070: PUSH
48071: LD_INT 45
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: LIST
48078: PUSH
48079: LD_VAR 0 12
48083: ARRAY
48084: ST_TO_ADDR
// break ;
48085: GO 48089
// end ; end ; end ;
48087: GO 47918
48089: POP
48090: POP
// end ; if not weapon then
48091: LD_VAR 0 18
48095: NOT
48096: IFFALSE 48156
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48098: LD_ADDR_VAR 0 5
48102: PUSH
48103: LD_VAR 0 5
48107: PUSH
48108: LD_INT 11
48110: PUSH
48111: LD_INT 30
48113: PUSH
48114: LD_INT 49
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: LIST
48121: DIFF
48122: ST_TO_ADDR
// if not list then
48123: LD_VAR 0 5
48127: NOT
48128: IFFALSE 48132
// exit ;
48130: GO 48274
// weapon := list [ rand ( 1 , list ) ] ;
48132: LD_ADDR_VAR 0 18
48136: PUSH
48137: LD_VAR 0 5
48141: PUSH
48142: LD_INT 1
48144: PPUSH
48145: LD_VAR 0 5
48149: PPUSH
48150: CALL_OW 12
48154: ARRAY
48155: ST_TO_ADDR
// end ; if weapon then
48156: LD_VAR 0 18
48160: IFFALSE 48274
// begin tmp := CostOfWeapon ( weapon ) ;
48162: LD_ADDR_VAR 0 14
48166: PUSH
48167: LD_VAR 0 18
48171: PPUSH
48172: CALL_OW 451
48176: ST_TO_ADDR
// j := GetBase ( tower ) ;
48177: LD_ADDR_VAR 0 9
48181: PUSH
48182: LD_VAR 0 1
48186: PPUSH
48187: CALL_OW 274
48191: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48192: LD_VAR 0 9
48196: PPUSH
48197: LD_INT 1
48199: PPUSH
48200: CALL_OW 275
48204: PUSH
48205: LD_VAR 0 14
48209: PUSH
48210: LD_INT 1
48212: ARRAY
48213: GREATEREQUAL
48214: PUSH
48215: LD_VAR 0 9
48219: PPUSH
48220: LD_INT 2
48222: PPUSH
48223: CALL_OW 275
48227: PUSH
48228: LD_VAR 0 14
48232: PUSH
48233: LD_INT 2
48235: ARRAY
48236: GREATEREQUAL
48237: AND
48238: PUSH
48239: LD_VAR 0 9
48243: PPUSH
48244: LD_INT 3
48246: PPUSH
48247: CALL_OW 275
48251: PUSH
48252: LD_VAR 0 14
48256: PUSH
48257: LD_INT 3
48259: ARRAY
48260: GREATEREQUAL
48261: AND
48262: IFFALSE 48274
// result := weapon ;
48264: LD_ADDR_VAR 0 3
48268: PUSH
48269: LD_VAR 0 18
48273: ST_TO_ADDR
// end ; end ;
48274: LD_VAR 0 3
48278: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48279: LD_INT 0
48281: PPUSH
48282: PPUSH
// result := true ;
48283: LD_ADDR_VAR 0 3
48287: PUSH
48288: LD_INT 1
48290: ST_TO_ADDR
// if array1 = array2 then
48291: LD_VAR 0 1
48295: PUSH
48296: LD_VAR 0 2
48300: EQUAL
48301: IFFALSE 48361
// begin for i = 1 to array1 do
48303: LD_ADDR_VAR 0 4
48307: PUSH
48308: DOUBLE
48309: LD_INT 1
48311: DEC
48312: ST_TO_ADDR
48313: LD_VAR 0 1
48317: PUSH
48318: FOR_TO
48319: IFFALSE 48357
// if array1 [ i ] <> array2 [ i ] then
48321: LD_VAR 0 1
48325: PUSH
48326: LD_VAR 0 4
48330: ARRAY
48331: PUSH
48332: LD_VAR 0 2
48336: PUSH
48337: LD_VAR 0 4
48341: ARRAY
48342: NONEQUAL
48343: IFFALSE 48355
// begin result := false ;
48345: LD_ADDR_VAR 0 3
48349: PUSH
48350: LD_INT 0
48352: ST_TO_ADDR
// break ;
48353: GO 48357
// end ;
48355: GO 48318
48357: POP
48358: POP
// end else
48359: GO 48369
// result := false ;
48361: LD_ADDR_VAR 0 3
48365: PUSH
48366: LD_INT 0
48368: ST_TO_ADDR
// end ;
48369: LD_VAR 0 3
48373: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48374: LD_INT 0
48376: PPUSH
48377: PPUSH
48378: PPUSH
// pom := GetBase ( fac ) ;
48379: LD_ADDR_VAR 0 5
48383: PUSH
48384: LD_VAR 0 1
48388: PPUSH
48389: CALL_OW 274
48393: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48394: LD_ADDR_VAR 0 4
48398: PUSH
48399: LD_VAR 0 2
48403: PUSH
48404: LD_INT 1
48406: ARRAY
48407: PPUSH
48408: LD_VAR 0 2
48412: PUSH
48413: LD_INT 2
48415: ARRAY
48416: PPUSH
48417: LD_VAR 0 2
48421: PUSH
48422: LD_INT 3
48424: ARRAY
48425: PPUSH
48426: LD_VAR 0 2
48430: PUSH
48431: LD_INT 4
48433: ARRAY
48434: PPUSH
48435: CALL_OW 449
48439: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48440: LD_ADDR_VAR 0 3
48444: PUSH
48445: LD_VAR 0 5
48449: PPUSH
48450: LD_INT 1
48452: PPUSH
48453: CALL_OW 275
48457: PUSH
48458: LD_VAR 0 4
48462: PUSH
48463: LD_INT 1
48465: ARRAY
48466: GREATEREQUAL
48467: PUSH
48468: LD_VAR 0 5
48472: PPUSH
48473: LD_INT 2
48475: PPUSH
48476: CALL_OW 275
48480: PUSH
48481: LD_VAR 0 4
48485: PUSH
48486: LD_INT 2
48488: ARRAY
48489: GREATEREQUAL
48490: AND
48491: PUSH
48492: LD_VAR 0 5
48496: PPUSH
48497: LD_INT 3
48499: PPUSH
48500: CALL_OW 275
48504: PUSH
48505: LD_VAR 0 4
48509: PUSH
48510: LD_INT 3
48512: ARRAY
48513: GREATEREQUAL
48514: AND
48515: ST_TO_ADDR
// end ;
48516: LD_VAR 0 3
48520: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48521: LD_INT 0
48523: PPUSH
48524: PPUSH
48525: PPUSH
48526: PPUSH
// pom := GetBase ( building ) ;
48527: LD_ADDR_VAR 0 3
48531: PUSH
48532: LD_VAR 0 1
48536: PPUSH
48537: CALL_OW 274
48541: ST_TO_ADDR
// if not pom then
48542: LD_VAR 0 3
48546: NOT
48547: IFFALSE 48551
// exit ;
48549: GO 48721
// btype := GetBType ( building ) ;
48551: LD_ADDR_VAR 0 5
48555: PUSH
48556: LD_VAR 0 1
48560: PPUSH
48561: CALL_OW 266
48565: ST_TO_ADDR
// if btype = b_armoury then
48566: LD_VAR 0 5
48570: PUSH
48571: LD_INT 4
48573: EQUAL
48574: IFFALSE 48584
// btype := b_barracks ;
48576: LD_ADDR_VAR 0 5
48580: PUSH
48581: LD_INT 5
48583: ST_TO_ADDR
// if btype = b_depot then
48584: LD_VAR 0 5
48588: PUSH
48589: LD_INT 0
48591: EQUAL
48592: IFFALSE 48602
// btype := b_warehouse ;
48594: LD_ADDR_VAR 0 5
48598: PUSH
48599: LD_INT 1
48601: ST_TO_ADDR
// if btype = b_workshop then
48602: LD_VAR 0 5
48606: PUSH
48607: LD_INT 2
48609: EQUAL
48610: IFFALSE 48620
// btype := b_factory ;
48612: LD_ADDR_VAR 0 5
48616: PUSH
48617: LD_INT 3
48619: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48620: LD_ADDR_VAR 0 4
48624: PUSH
48625: LD_VAR 0 5
48629: PPUSH
48630: LD_VAR 0 1
48634: PPUSH
48635: CALL_OW 248
48639: PPUSH
48640: CALL_OW 450
48644: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48645: LD_ADDR_VAR 0 2
48649: PUSH
48650: LD_VAR 0 3
48654: PPUSH
48655: LD_INT 1
48657: PPUSH
48658: CALL_OW 275
48662: PUSH
48663: LD_VAR 0 4
48667: PUSH
48668: LD_INT 1
48670: ARRAY
48671: GREATEREQUAL
48672: PUSH
48673: LD_VAR 0 3
48677: PPUSH
48678: LD_INT 2
48680: PPUSH
48681: CALL_OW 275
48685: PUSH
48686: LD_VAR 0 4
48690: PUSH
48691: LD_INT 2
48693: ARRAY
48694: GREATEREQUAL
48695: AND
48696: PUSH
48697: LD_VAR 0 3
48701: PPUSH
48702: LD_INT 3
48704: PPUSH
48705: CALL_OW 275
48709: PUSH
48710: LD_VAR 0 4
48714: PUSH
48715: LD_INT 3
48717: ARRAY
48718: GREATEREQUAL
48719: AND
48720: ST_TO_ADDR
// end ;
48721: LD_VAR 0 2
48725: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48726: LD_INT 0
48728: PPUSH
48729: PPUSH
48730: PPUSH
// pom := GetBase ( building ) ;
48731: LD_ADDR_VAR 0 4
48735: PUSH
48736: LD_VAR 0 1
48740: PPUSH
48741: CALL_OW 274
48745: ST_TO_ADDR
// if not pom then
48746: LD_VAR 0 4
48750: NOT
48751: IFFALSE 48755
// exit ;
48753: GO 48856
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48755: LD_ADDR_VAR 0 5
48759: PUSH
48760: LD_VAR 0 2
48764: PPUSH
48765: LD_VAR 0 1
48769: PPUSH
48770: CALL_OW 248
48774: PPUSH
48775: CALL_OW 450
48779: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48780: LD_ADDR_VAR 0 3
48784: PUSH
48785: LD_VAR 0 4
48789: PPUSH
48790: LD_INT 1
48792: PPUSH
48793: CALL_OW 275
48797: PUSH
48798: LD_VAR 0 5
48802: PUSH
48803: LD_INT 1
48805: ARRAY
48806: GREATEREQUAL
48807: PUSH
48808: LD_VAR 0 4
48812: PPUSH
48813: LD_INT 2
48815: PPUSH
48816: CALL_OW 275
48820: PUSH
48821: LD_VAR 0 5
48825: PUSH
48826: LD_INT 2
48828: ARRAY
48829: GREATEREQUAL
48830: AND
48831: PUSH
48832: LD_VAR 0 4
48836: PPUSH
48837: LD_INT 3
48839: PPUSH
48840: CALL_OW 275
48844: PUSH
48845: LD_VAR 0 5
48849: PUSH
48850: LD_INT 3
48852: ARRAY
48853: GREATEREQUAL
48854: AND
48855: ST_TO_ADDR
// end ;
48856: LD_VAR 0 3
48860: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
48861: LD_INT 0
48863: PPUSH
48864: PPUSH
48865: PPUSH
48866: PPUSH
48867: PPUSH
48868: PPUSH
48869: PPUSH
48870: PPUSH
48871: PPUSH
48872: PPUSH
// result := false ;
48873: LD_ADDR_VAR 0 6
48877: PUSH
48878: LD_INT 0
48880: ST_TO_ADDR
// if not base or not btype or not x or not y then
48881: LD_VAR 0 1
48885: NOT
48886: PUSH
48887: LD_VAR 0 2
48891: NOT
48892: OR
48893: PUSH
48894: LD_VAR 0 3
48898: NOT
48899: OR
48900: PUSH
48901: LD_VAR 0 4
48905: NOT
48906: OR
48907: IFFALSE 48911
// exit ;
48909: GO 49520
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
48911: LD_ADDR_VAR 0 12
48915: PUSH
48916: LD_VAR 0 2
48920: PPUSH
48921: LD_VAR 0 3
48925: PPUSH
48926: LD_VAR 0 4
48930: PPUSH
48931: LD_VAR 0 5
48935: PPUSH
48936: LD_VAR 0 1
48940: PUSH
48941: LD_INT 1
48943: ARRAY
48944: PPUSH
48945: CALL_OW 248
48949: PPUSH
48950: LD_INT 0
48952: PPUSH
48953: CALL 50357 0 6
48957: ST_TO_ADDR
// if not hexes then
48958: LD_VAR 0 12
48962: NOT
48963: IFFALSE 48967
// exit ;
48965: GO 49520
// for i = 1 to hexes do
48967: LD_ADDR_VAR 0 7
48971: PUSH
48972: DOUBLE
48973: LD_INT 1
48975: DEC
48976: ST_TO_ADDR
48977: LD_VAR 0 12
48981: PUSH
48982: FOR_TO
48983: IFFALSE 49518
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48985: LD_ADDR_VAR 0 11
48989: PUSH
48990: LD_VAR 0 12
48994: PUSH
48995: LD_VAR 0 7
48999: ARRAY
49000: PUSH
49001: LD_INT 1
49003: ARRAY
49004: PPUSH
49005: LD_VAR 0 12
49009: PUSH
49010: LD_VAR 0 7
49014: ARRAY
49015: PUSH
49016: LD_INT 2
49018: ARRAY
49019: PPUSH
49020: CALL_OW 428
49024: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49025: LD_VAR 0 12
49029: PUSH
49030: LD_VAR 0 7
49034: ARRAY
49035: PUSH
49036: LD_INT 1
49038: ARRAY
49039: PPUSH
49040: LD_VAR 0 12
49044: PUSH
49045: LD_VAR 0 7
49049: ARRAY
49050: PUSH
49051: LD_INT 2
49053: ARRAY
49054: PPUSH
49055: CALL_OW 351
49059: PUSH
49060: LD_VAR 0 12
49064: PUSH
49065: LD_VAR 0 7
49069: ARRAY
49070: PUSH
49071: LD_INT 1
49073: ARRAY
49074: PPUSH
49075: LD_VAR 0 12
49079: PUSH
49080: LD_VAR 0 7
49084: ARRAY
49085: PUSH
49086: LD_INT 2
49088: ARRAY
49089: PPUSH
49090: CALL_OW 488
49094: NOT
49095: OR
49096: PUSH
49097: LD_VAR 0 11
49101: PPUSH
49102: CALL_OW 247
49106: PUSH
49107: LD_INT 3
49109: EQUAL
49110: OR
49111: IFFALSE 49117
// exit ;
49113: POP
49114: POP
49115: GO 49520
// if not tmp or not tmp in base then
49117: LD_VAR 0 11
49121: NOT
49122: PUSH
49123: LD_VAR 0 11
49127: PUSH
49128: LD_VAR 0 1
49132: IN
49133: NOT
49134: OR
49135: IFFALSE 49139
// continue ;
49137: GO 48982
// result := true ;
49139: LD_ADDR_VAR 0 6
49143: PUSH
49144: LD_INT 1
49146: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49147: LD_ADDR_VAR 0 15
49151: PUSH
49152: LD_VAR 0 1
49156: PPUSH
49157: LD_INT 22
49159: PUSH
49160: LD_VAR 0 11
49164: PPUSH
49165: CALL_OW 255
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: LD_INT 30
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 30
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: LIST
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PPUSH
49206: CALL_OW 72
49210: ST_TO_ADDR
// if dep then
49211: LD_VAR 0 15
49215: IFFALSE 49351
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49217: LD_ADDR_VAR 0 14
49221: PUSH
49222: LD_VAR 0 15
49226: PUSH
49227: LD_INT 1
49229: ARRAY
49230: PPUSH
49231: CALL_OW 250
49235: PPUSH
49236: LD_VAR 0 15
49240: PUSH
49241: LD_INT 1
49243: ARRAY
49244: PPUSH
49245: CALL_OW 254
49249: PPUSH
49250: LD_INT 5
49252: PPUSH
49253: CALL_OW 272
49257: PUSH
49258: LD_VAR 0 15
49262: PUSH
49263: LD_INT 1
49265: ARRAY
49266: PPUSH
49267: CALL_OW 251
49271: PPUSH
49272: LD_VAR 0 15
49276: PUSH
49277: LD_INT 1
49279: ARRAY
49280: PPUSH
49281: CALL_OW 254
49285: PPUSH
49286: LD_INT 5
49288: PPUSH
49289: CALL_OW 273
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49298: LD_VAR 0 14
49302: PUSH
49303: LD_INT 1
49305: ARRAY
49306: PPUSH
49307: LD_VAR 0 14
49311: PUSH
49312: LD_INT 2
49314: ARRAY
49315: PPUSH
49316: CALL_OW 488
49320: IFFALSE 49351
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49322: LD_VAR 0 11
49326: PPUSH
49327: LD_VAR 0 14
49331: PUSH
49332: LD_INT 1
49334: ARRAY
49335: PPUSH
49336: LD_VAR 0 14
49340: PUSH
49341: LD_INT 2
49343: ARRAY
49344: PPUSH
49345: CALL_OW 111
// continue ;
49349: GO 48982
// end ; end ; r := GetDir ( tmp ) ;
49351: LD_ADDR_VAR 0 13
49355: PUSH
49356: LD_VAR 0 11
49360: PPUSH
49361: CALL_OW 254
49365: ST_TO_ADDR
// if r = 5 then
49366: LD_VAR 0 13
49370: PUSH
49371: LD_INT 5
49373: EQUAL
49374: IFFALSE 49384
// r := 0 ;
49376: LD_ADDR_VAR 0 13
49380: PUSH
49381: LD_INT 0
49383: ST_TO_ADDR
// for j = r to 5 do
49384: LD_ADDR_VAR 0 8
49388: PUSH
49389: DOUBLE
49390: LD_VAR 0 13
49394: DEC
49395: ST_TO_ADDR
49396: LD_INT 5
49398: PUSH
49399: FOR_TO
49400: IFFALSE 49514
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49402: LD_ADDR_VAR 0 9
49406: PUSH
49407: LD_VAR 0 11
49411: PPUSH
49412: CALL_OW 250
49416: PPUSH
49417: LD_VAR 0 8
49421: PPUSH
49422: LD_INT 2
49424: PPUSH
49425: CALL_OW 272
49429: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49430: LD_ADDR_VAR 0 10
49434: PUSH
49435: LD_VAR 0 11
49439: PPUSH
49440: CALL_OW 251
49444: PPUSH
49445: LD_VAR 0 8
49449: PPUSH
49450: LD_INT 2
49452: PPUSH
49453: CALL_OW 273
49457: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49458: LD_VAR 0 9
49462: PPUSH
49463: LD_VAR 0 10
49467: PPUSH
49468: CALL_OW 488
49472: PUSH
49473: LD_VAR 0 9
49477: PPUSH
49478: LD_VAR 0 10
49482: PPUSH
49483: CALL_OW 428
49487: NOT
49488: AND
49489: IFFALSE 49512
// begin ComMoveXY ( tmp , _x , _y ) ;
49491: LD_VAR 0 11
49495: PPUSH
49496: LD_VAR 0 9
49500: PPUSH
49501: LD_VAR 0 10
49505: PPUSH
49506: CALL_OW 111
// break ;
49510: GO 49514
// end ; end ;
49512: GO 49399
49514: POP
49515: POP
// end ;
49516: GO 48982
49518: POP
49519: POP
// end ;
49520: LD_VAR 0 6
49524: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
49525: LD_INT 0
49527: PPUSH
49528: PPUSH
49529: PPUSH
49530: PPUSH
49531: PPUSH
49532: PPUSH
49533: PPUSH
49534: PPUSH
49535: PPUSH
49536: PPUSH
// result := false ;
49537: LD_ADDR_VAR 0 6
49541: PUSH
49542: LD_INT 0
49544: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49545: LD_VAR 0 1
49549: NOT
49550: PUSH
49551: LD_VAR 0 1
49555: PPUSH
49556: CALL_OW 266
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: IN
49571: NOT
49572: OR
49573: PUSH
49574: LD_VAR 0 2
49578: NOT
49579: OR
49580: PUSH
49581: LD_VAR 0 5
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: LD_INT 2
49594: PUSH
49595: LD_INT 3
49597: PUSH
49598: LD_INT 4
49600: PUSH
49601: LD_INT 5
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: IN
49612: NOT
49613: OR
49614: PUSH
49615: LD_VAR 0 3
49619: PPUSH
49620: LD_VAR 0 4
49624: PPUSH
49625: CALL_OW 488
49629: NOT
49630: OR
49631: IFFALSE 49635
// exit ;
49633: GO 50352
// pom := GetBase ( depot ) ;
49635: LD_ADDR_VAR 0 10
49639: PUSH
49640: LD_VAR 0 1
49644: PPUSH
49645: CALL_OW 274
49649: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49650: LD_ADDR_VAR 0 11
49654: PUSH
49655: LD_VAR 0 2
49659: PPUSH
49660: LD_VAR 0 1
49664: PPUSH
49665: CALL_OW 248
49669: PPUSH
49670: CALL_OW 450
49674: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49675: LD_VAR 0 10
49679: PPUSH
49680: LD_INT 1
49682: PPUSH
49683: CALL_OW 275
49687: PUSH
49688: LD_VAR 0 11
49692: PUSH
49693: LD_INT 1
49695: ARRAY
49696: GREATEREQUAL
49697: PUSH
49698: LD_VAR 0 10
49702: PPUSH
49703: LD_INT 2
49705: PPUSH
49706: CALL_OW 275
49710: PUSH
49711: LD_VAR 0 11
49715: PUSH
49716: LD_INT 2
49718: ARRAY
49719: GREATEREQUAL
49720: AND
49721: PUSH
49722: LD_VAR 0 10
49726: PPUSH
49727: LD_INT 3
49729: PPUSH
49730: CALL_OW 275
49734: PUSH
49735: LD_VAR 0 11
49739: PUSH
49740: LD_INT 3
49742: ARRAY
49743: GREATEREQUAL
49744: AND
49745: NOT
49746: IFFALSE 49750
// exit ;
49748: GO 50352
// if GetBType ( depot ) = b_depot then
49750: LD_VAR 0 1
49754: PPUSH
49755: CALL_OW 266
49759: PUSH
49760: LD_INT 0
49762: EQUAL
49763: IFFALSE 49775
// dist := 28 else
49765: LD_ADDR_VAR 0 14
49769: PUSH
49770: LD_INT 28
49772: ST_TO_ADDR
49773: GO 49783
// dist := 36 ;
49775: LD_ADDR_VAR 0 14
49779: PUSH
49780: LD_INT 36
49782: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49783: LD_VAR 0 1
49787: PPUSH
49788: LD_VAR 0 3
49792: PPUSH
49793: LD_VAR 0 4
49797: PPUSH
49798: CALL_OW 297
49802: PUSH
49803: LD_VAR 0 14
49807: GREATER
49808: IFFALSE 49812
// exit ;
49810: GO 50352
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49812: LD_ADDR_VAR 0 12
49816: PUSH
49817: LD_VAR 0 2
49821: PPUSH
49822: LD_VAR 0 3
49826: PPUSH
49827: LD_VAR 0 4
49831: PPUSH
49832: LD_VAR 0 5
49836: PPUSH
49837: LD_VAR 0 1
49841: PPUSH
49842: CALL_OW 248
49846: PPUSH
49847: LD_INT 0
49849: PPUSH
49850: CALL 50357 0 6
49854: ST_TO_ADDR
// if not hexes then
49855: LD_VAR 0 12
49859: NOT
49860: IFFALSE 49864
// exit ;
49862: GO 50352
// hex := GetHexInfo ( x , y ) ;
49864: LD_ADDR_VAR 0 15
49868: PUSH
49869: LD_VAR 0 3
49873: PPUSH
49874: LD_VAR 0 4
49878: PPUSH
49879: CALL_OW 546
49883: ST_TO_ADDR
// if hex [ 1 ] then
49884: LD_VAR 0 15
49888: PUSH
49889: LD_INT 1
49891: ARRAY
49892: IFFALSE 49896
// exit ;
49894: GO 50352
// height := hex [ 2 ] ;
49896: LD_ADDR_VAR 0 13
49900: PUSH
49901: LD_VAR 0 15
49905: PUSH
49906: LD_INT 2
49908: ARRAY
49909: ST_TO_ADDR
// for i = 1 to hexes do
49910: LD_ADDR_VAR 0 7
49914: PUSH
49915: DOUBLE
49916: LD_INT 1
49918: DEC
49919: ST_TO_ADDR
49920: LD_VAR 0 12
49924: PUSH
49925: FOR_TO
49926: IFFALSE 50256
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49928: LD_VAR 0 12
49932: PUSH
49933: LD_VAR 0 7
49937: ARRAY
49938: PUSH
49939: LD_INT 1
49941: ARRAY
49942: PPUSH
49943: LD_VAR 0 12
49947: PUSH
49948: LD_VAR 0 7
49952: ARRAY
49953: PUSH
49954: LD_INT 2
49956: ARRAY
49957: PPUSH
49958: CALL_OW 488
49962: NOT
49963: PUSH
49964: LD_VAR 0 12
49968: PUSH
49969: LD_VAR 0 7
49973: ARRAY
49974: PUSH
49975: LD_INT 1
49977: ARRAY
49978: PPUSH
49979: LD_VAR 0 12
49983: PUSH
49984: LD_VAR 0 7
49988: ARRAY
49989: PUSH
49990: LD_INT 2
49992: ARRAY
49993: PPUSH
49994: CALL_OW 428
49998: PUSH
49999: LD_INT 0
50001: GREATER
50002: OR
50003: PUSH
50004: LD_VAR 0 12
50008: PUSH
50009: LD_VAR 0 7
50013: ARRAY
50014: PUSH
50015: LD_INT 1
50017: ARRAY
50018: PPUSH
50019: LD_VAR 0 12
50023: PUSH
50024: LD_VAR 0 7
50028: ARRAY
50029: PUSH
50030: LD_INT 2
50032: ARRAY
50033: PPUSH
50034: CALL_OW 351
50038: OR
50039: IFFALSE 50045
// exit ;
50041: POP
50042: POP
50043: GO 50352
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50045: LD_ADDR_VAR 0 8
50049: PUSH
50050: LD_VAR 0 12
50054: PUSH
50055: LD_VAR 0 7
50059: ARRAY
50060: PUSH
50061: LD_INT 1
50063: ARRAY
50064: PPUSH
50065: LD_VAR 0 12
50069: PUSH
50070: LD_VAR 0 7
50074: ARRAY
50075: PUSH
50076: LD_INT 2
50078: ARRAY
50079: PPUSH
50080: CALL_OW 546
50084: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50085: LD_VAR 0 8
50089: PUSH
50090: LD_INT 1
50092: ARRAY
50093: PUSH
50094: LD_VAR 0 8
50098: PUSH
50099: LD_INT 2
50101: ARRAY
50102: PUSH
50103: LD_VAR 0 13
50107: PUSH
50108: LD_INT 2
50110: PLUS
50111: GREATER
50112: OR
50113: PUSH
50114: LD_VAR 0 8
50118: PUSH
50119: LD_INT 2
50121: ARRAY
50122: PUSH
50123: LD_VAR 0 13
50127: PUSH
50128: LD_INT 2
50130: MINUS
50131: LESS
50132: OR
50133: PUSH
50134: LD_VAR 0 8
50138: PUSH
50139: LD_INT 3
50141: ARRAY
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 8
50148: PUSH
50149: LD_INT 9
50151: PUSH
50152: LD_INT 10
50154: PUSH
50155: LD_INT 11
50157: PUSH
50158: LD_INT 12
50160: PUSH
50161: LD_INT 13
50163: PUSH
50164: LD_INT 16
50166: PUSH
50167: LD_INT 17
50169: PUSH
50170: LD_INT 18
50172: PUSH
50173: LD_INT 19
50175: PUSH
50176: LD_INT 20
50178: PUSH
50179: LD_INT 21
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: IN
50197: NOT
50198: OR
50199: PUSH
50200: LD_VAR 0 8
50204: PUSH
50205: LD_INT 5
50207: ARRAY
50208: NOT
50209: OR
50210: PUSH
50211: LD_VAR 0 8
50215: PUSH
50216: LD_INT 6
50218: ARRAY
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: LD_INT 2
50225: PUSH
50226: LD_INT 7
50228: PUSH
50229: LD_INT 9
50231: PUSH
50232: LD_INT 10
50234: PUSH
50235: LD_INT 11
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: IN
50246: NOT
50247: OR
50248: IFFALSE 50254
// exit ;
50250: POP
50251: POP
50252: GO 50352
// end ;
50254: GO 49925
50256: POP
50257: POP
// side := GetSide ( depot ) ;
50258: LD_ADDR_VAR 0 9
50262: PUSH
50263: LD_VAR 0 1
50267: PPUSH
50268: CALL_OW 255
50272: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50273: LD_VAR 0 9
50277: PPUSH
50278: LD_VAR 0 3
50282: PPUSH
50283: LD_VAR 0 4
50287: PPUSH
50288: LD_INT 20
50290: PPUSH
50291: CALL 43006 0 4
50295: PUSH
50296: LD_INT 4
50298: ARRAY
50299: IFFALSE 50303
// exit ;
50301: GO 50352
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50303: LD_VAR 0 2
50307: PUSH
50308: LD_INT 29
50310: PUSH
50311: LD_INT 30
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: IN
50318: PUSH
50319: LD_VAR 0 3
50323: PPUSH
50324: LD_VAR 0 4
50328: PPUSH
50329: LD_VAR 0 9
50333: PPUSH
50334: CALL_OW 440
50338: NOT
50339: AND
50340: IFFALSE 50344
// exit ;
50342: GO 50352
// result := true ;
50344: LD_ADDR_VAR 0 6
50348: PUSH
50349: LD_INT 1
50351: ST_TO_ADDR
// end ;
50352: LD_VAR 0 6
50356: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
50357: LD_INT 0
50359: PPUSH
50360: PPUSH
50361: PPUSH
50362: PPUSH
50363: PPUSH
50364: PPUSH
50365: PPUSH
50366: PPUSH
50367: PPUSH
50368: PPUSH
50369: PPUSH
50370: PPUSH
50371: PPUSH
50372: PPUSH
50373: PPUSH
50374: PPUSH
50375: PPUSH
50376: PPUSH
50377: PPUSH
50378: PPUSH
50379: PPUSH
50380: PPUSH
50381: PPUSH
50382: PPUSH
50383: PPUSH
50384: PPUSH
50385: PPUSH
50386: PPUSH
50387: PPUSH
50388: PPUSH
50389: PPUSH
50390: PPUSH
50391: PPUSH
50392: PPUSH
50393: PPUSH
50394: PPUSH
50395: PPUSH
50396: PPUSH
50397: PPUSH
50398: PPUSH
50399: PPUSH
50400: PPUSH
50401: PPUSH
50402: PPUSH
50403: PPUSH
50404: PPUSH
50405: PPUSH
50406: PPUSH
50407: PPUSH
50408: PPUSH
50409: PPUSH
50410: PPUSH
50411: PPUSH
50412: PPUSH
50413: PPUSH
50414: PPUSH
50415: PPUSH
50416: PPUSH
// result = [ ] ;
50417: LD_ADDR_VAR 0 7
50421: PUSH
50422: EMPTY
50423: ST_TO_ADDR
// temp_list = [ ] ;
50424: LD_ADDR_VAR 0 9
50428: PUSH
50429: EMPTY
50430: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50431: LD_VAR 0 4
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: LD_INT 3
50447: PUSH
50448: LD_INT 4
50450: PUSH
50451: LD_INT 5
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: IN
50462: NOT
50463: PUSH
50464: LD_VAR 0 1
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: IN
50479: PUSH
50480: LD_VAR 0 5
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 2
50490: PUSH
50491: LD_INT 3
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: LIST
50498: IN
50499: NOT
50500: AND
50501: OR
50502: IFFALSE 50506
// exit ;
50504: GO 68897
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50506: LD_VAR 0 1
50510: PUSH
50511: LD_INT 6
50513: PUSH
50514: LD_INT 7
50516: PUSH
50517: LD_INT 8
50519: PUSH
50520: LD_INT 13
50522: PUSH
50523: LD_INT 12
50525: PUSH
50526: LD_INT 15
50528: PUSH
50529: LD_INT 11
50531: PUSH
50532: LD_INT 14
50534: PUSH
50535: LD_INT 10
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: IN
50549: IFFALSE 50559
// btype = b_lab ;
50551: LD_ADDR_VAR 0 1
50555: PUSH
50556: LD_INT 6
50558: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50559: LD_VAR 0 6
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: LD_INT 2
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: LIST
50577: IN
50578: NOT
50579: PUSH
50580: LD_VAR 0 1
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 3
50596: PUSH
50597: LD_INT 6
50599: PUSH
50600: LD_INT 36
50602: PUSH
50603: LD_INT 4
50605: PUSH
50606: LD_INT 5
50608: PUSH
50609: LD_INT 31
50611: PUSH
50612: LD_INT 32
50614: PUSH
50615: LD_INT 33
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: IN
50631: NOT
50632: PUSH
50633: LD_VAR 0 6
50637: PUSH
50638: LD_INT 1
50640: EQUAL
50641: AND
50642: OR
50643: PUSH
50644: LD_VAR 0 1
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: LD_INT 3
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: IN
50659: NOT
50660: PUSH
50661: LD_VAR 0 6
50665: PUSH
50666: LD_INT 2
50668: EQUAL
50669: AND
50670: OR
50671: IFFALSE 50681
// mode = 0 ;
50673: LD_ADDR_VAR 0 6
50677: PUSH
50678: LD_INT 0
50680: ST_TO_ADDR
// case mode of 0 :
50681: LD_VAR 0 6
50685: PUSH
50686: LD_INT 0
50688: DOUBLE
50689: EQUAL
50690: IFTRUE 50694
50692: GO 62147
50694: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50695: LD_ADDR_VAR 0 11
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: LD_INT 1
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: LD_INT 2
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: LD_INT 2
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: LD_INT 3
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: LD_INT 3
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50888: LD_ADDR_VAR 0 12
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 0
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: NEG
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 2
51011: NEG
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 2
51022: NEG
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 3
51045: NEG
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 3
51056: NEG
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51084: LD_ADDR_VAR 0 13
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 1
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: LD_INT 2
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 2
51207: NEG
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 2
51219: NEG
51220: PUSH
51221: LD_INT 2
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: LD_INT 3
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 3
51243: NEG
51244: PUSH
51245: LD_INT 2
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 3
51255: NEG
51256: PUSH
51257: LD_INT 3
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51283: LD_ADDR_VAR 0 14
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: LD_INT 2
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: LD_INT 2
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: LD_INT 2
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: LD_INT 3
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 3
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51479: LD_ADDR_VAR 0 15
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 2
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 2
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: NEG
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 2
51613: NEG
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 3
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 3
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51672: LD_ADDR_VAR 0 16
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: LD_INT 2
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 2
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: NEG
51796: PUSH
51797: LD_INT 1
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: LD_INT 2
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 3
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 3
51829: PUSH
51830: LD_INT 3
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 2
51839: PUSH
51840: LD_INT 3
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51865: LD_ADDR_VAR 0 17
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: LD_INT 2
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: LD_INT 2
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 2
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: LD_INT 2
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: NEG
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 2
52052: NEG
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 2
52064: NEG
52065: PUSH
52066: LD_INT 2
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52095: LD_ADDR_VAR 0 18
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: LD_INT 2
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: LD_INT 2
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 2
52230: PUSH
52231: LD_INT 2
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: LD_INT 2
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 2
52271: NEG
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 2
52282: NEG
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: LD_INT 2
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52325: LD_ADDR_VAR 0 19
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: LD_INT 2
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: PUSH
52441: LD_INT 0
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: LD_INT 1
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: LD_INT 2
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 2
52501: NEG
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 2
52524: NEG
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52555: LD_ADDR_VAR 0 20
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 2
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: LD_INT 1
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 2
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: LD_INT 2
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: NEG
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 2
52742: NEG
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: NEG
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52785: LD_ADDR_VAR 0 21
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: LD_INT 1
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: LD_INT 2
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 2
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 2
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 2
52920: PUSH
52921: LD_INT 2
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: NEG
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 2
52972: NEG
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: LD_INT 2
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53015: LD_ADDR_VAR 0 22
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: LD_INT 2
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 2
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 2
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 2
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: NEG
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 2
53214: NEG
53215: PUSH
53216: LD_INT 2
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53245: LD_ADDR_VAR 0 23
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 0
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 2
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 2
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: LD_INT 1
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 2
53380: PUSH
53381: LD_INT 2
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: NEG
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: LD_INT 2
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 2
53456: NEG
53457: PUSH
53458: LD_INT 3
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 1
53468: NEG
53469: PUSH
53470: LD_INT 3
53472: NEG
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53525: LD_ADDR_VAR 0 24
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: LD_INT 0
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: LD_INT 2
53610: NEG
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 0
53618: PUSH
53619: LD_INT 2
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: LD_INT 2
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: LD_INT 2
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: LD_INT 2
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: LD_INT 1
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 2
53724: NEG
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 3
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 3
53768: PUSH
53769: LD_INT 2
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53801: LD_ADDR_VAR 0 25
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: LD_INT 2
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 2
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: LD_INT 2
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: LD_INT 2
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 3
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: LD_INT 3
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: LD_INT 3
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54075: LD_ADDR_VAR 0 26
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 1
54133: NEG
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: LD_INT 1
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: LD_INT 2
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: LD_INT 2
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 2
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: LD_INT 2
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: NEG
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: LD_INT 3
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: LD_INT 3
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: NEG
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54351: LD_ADDR_VAR 0 27
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: LD_INT 2
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: LD_INT 2
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: LD_INT 1
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 2
54527: NEG
54528: PUSH
54529: LD_INT 0
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 2
54550: NEG
54551: PUSH
54552: LD_INT 2
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 3
54584: NEG
54585: PUSH
54586: LD_INT 1
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 3
54596: NEG
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54631: LD_ADDR_VAR 0 28
54635: PUSH
54636: LD_INT 0
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: NEG
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: LD_INT 2
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: LD_INT 2
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 2
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 2
54766: PUSH
54767: LD_INT 2
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 2
54807: NEG
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: NEG
54831: PUSH
54832: LD_INT 2
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 2
54842: NEG
54843: PUSH
54844: LD_INT 3
54846: NEG
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: LD_INT 3
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 3
54866: NEG
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 3
54878: NEG
54879: PUSH
54880: LD_INT 2
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54913: LD_ADDR_VAR 0 29
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: LD_INT 1
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 2
55091: NEG
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: LD_INT 3
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 3
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: PUSH
55137: LD_INT 3
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: LD_INT 2
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 3
55157: NEG
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55192: LD_ADDR_VAR 0 30
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: LD_INT 1
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 1
55273: NEG
55274: PUSH
55275: LD_INT 2
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: LD_INT 2
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 2
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 2
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: LD_INT 2
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 2
55358: NEG
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: NEG
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 3
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 3
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: LD_INT 3
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 3
55435: NEG
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55470: LD_ADDR_VAR 0 31
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: LD_INT 2
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 2
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: LD_INT 2
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 2
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: NEG
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 2
55635: NEG
55636: PUSH
55637: LD_INT 1
55639: NEG
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 2
55647: NEG
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: LD_INT 3
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 3
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: LD_INT 3
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: NEG
55703: PUSH
55704: LD_INT 2
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 3
55713: NEG
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55748: LD_ADDR_VAR 0 32
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 2
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 2
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 2
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 2
55914: NEG
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 3
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: LD_INT 2
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 3
55960: PUSH
55961: LD_INT 2
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 3
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 2
55980: NEG
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 3
55991: NEG
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56026: LD_ADDR_VAR 0 33
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: LD_INT 2
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 2
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 2
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: LD_INT 2
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: LD_INT 2
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 2
56181: NEG
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: NEG
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 2
56216: NEG
56217: PUSH
56218: LD_INT 3
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 3
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: LD_INT 3
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 3
56270: NEG
56271: PUSH
56272: LD_INT 2
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56305: LD_ADDR_VAR 0 34
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: LD_INT 2
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: LD_INT 2
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 2
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: NEG
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: LD_INT 3
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 3
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 2
56529: PUSH
56530: LD_INT 3
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 3
56550: NEG
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56585: LD_ADDR_VAR 0 35
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 0
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 1
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56697: LD_ADDR_VAR 0 36
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 2
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56809: LD_ADDR_VAR 0 37
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: LD_INT 1
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: LD_INT 1
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56921: LD_ADDR_VAR 0 38
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 2
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 2
57012: NEG
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57033: LD_ADDR_VAR 0 39
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: LD_INT 2
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57145: LD_ADDR_VAR 0 40
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: LD_INT 1
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57257: LD_ADDR_VAR 0 41
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 1
57295: PUSH
57296: LD_INT 1
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 1
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: LD_INT 2
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 2
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: LD_INT 0
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 2
57423: NEG
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 2
57435: NEG
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 2
57447: NEG
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 3
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 3
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 3
57490: PUSH
57491: LD_INT 2
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 3
57500: PUSH
57501: LD_INT 3
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 2
57510: PUSH
57511: LD_INT 3
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 2
57520: NEG
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 3
57531: NEG
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 3
57542: NEG
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 3
57554: NEG
57555: PUSH
57556: LD_INT 2
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 3
57566: NEG
57567: PUSH
57568: LD_INT 3
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57607: LD_ADDR_VAR 0 42
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: LD_INT 1
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: LD_INT 0
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: LD_INT 1
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 0
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 2
57785: NEG
57786: PUSH
57787: LD_INT 2
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 2
57797: NEG
57798: PUSH
57799: LD_INT 3
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 3
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: LD_INT 3
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 3
57843: PUSH
57844: LD_INT 2
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 3
57853: PUSH
57854: LD_INT 3
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: LD_INT 3
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: LD_INT 3
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: LD_INT 3
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 1
57893: NEG
57894: PUSH
57895: LD_INT 2
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 3
57904: NEG
57905: PUSH
57906: LD_INT 2
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 3
57916: NEG
57917: PUSH
57918: LD_INT 3
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57957: LD_ADDR_VAR 0 43
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: LD_INT 2
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: LD_INT 2
58053: NEG
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 2
58072: PUSH
58073: LD_INT 0
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 2
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: LD_INT 2
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 2
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 2
58134: NEG
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: NEG
58147: PUSH
58148: LD_INT 3
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: LD_INT 3
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: LD_INT 2
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 2
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 3
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 3
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: LD_INT 3
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: LD_INT 3
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: LD_INT 2
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 2
58242: NEG
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 3
58253: NEG
58254: PUSH
58255: LD_INT 0
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 3
58264: NEG
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58305: LD_ADDR_VAR 0 44
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 1
58343: PUSH
58344: LD_INT 1
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: LD_INT 1
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: LD_INT 2
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 2
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 2
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: LD_INT 2
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 2
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 2
58460: NEG
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: NEG
58472: PUSH
58473: LD_INT 1
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 2
58483: NEG
58484: PUSH
58485: LD_INT 2
58487: NEG
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 2
58495: NEG
58496: PUSH
58497: LD_INT 3
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 2
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 3
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 3
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 3
58538: PUSH
58539: LD_INT 2
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 3
58548: PUSH
58549: LD_INT 3
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 2
58558: PUSH
58559: LD_INT 3
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 2
58568: NEG
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 3
58579: NEG
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 3
58590: NEG
58591: PUSH
58592: LD_INT 1
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 3
58602: NEG
58603: PUSH
58604: LD_INT 2
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 3
58614: NEG
58615: PUSH
58616: LD_INT 3
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58655: LD_ADDR_VAR 0 45
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: LD_INT 2
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 2
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 2
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: LD_INT 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 2
58833: NEG
58834: PUSH
58835: LD_INT 2
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 2
58845: NEG
58846: PUSH
58847: LD_INT 3
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: LD_INT 3
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 0
58869: PUSH
58870: LD_INT 3
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 2
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 3
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 3
58901: PUSH
58902: LD_INT 3
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: LD_INT 3
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: LD_INT 3
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: LD_INT 3
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: NEG
58942: PUSH
58943: LD_INT 2
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 3
58952: NEG
58953: PUSH
58954: LD_INT 2
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 3
58964: NEG
58965: PUSH
58966: LD_INT 3
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59005: LD_ADDR_VAR 0 46
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: LD_INT 1
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: LD_INT 0
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: LD_INT 2
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: LD_INT 1
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 2
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 2
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: LD_INT 2
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: NEG
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: LD_INT 3
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: LD_INT 3
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: LD_INT 2
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 3
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 3
59249: PUSH
59250: LD_INT 1
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: NEG
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 3
59301: NEG
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 3
59312: NEG
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59353: LD_ADDR_VAR 0 47
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 2
59468: NEG
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 2
59480: NEG
59481: PUSH
59482: LD_INT 2
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59504: LD_ADDR_VAR 0 48
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: LD_INT 1
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: LD_INT 2
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: LD_INT 2
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 2
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59651: LD_ADDR_VAR 0 49
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: LD_INT 0
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: LD_INT 1
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: LD_INT 0
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: LD_INT 1
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: LD_INT 1
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: LD_INT 1
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: LD_INT 2
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: LD_INT 2
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59795: LD_ADDR_VAR 0 50
59799: PUSH
59800: LD_INT 0
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 2
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 2
59886: PUSH
59887: LD_INT 2
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: LD_INT 2
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 2
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59939: LD_ADDR_VAR 0 51
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: LD_INT 1
59959: NEG
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 1
59967: PUSH
59968: LD_INT 0
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 1
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: LD_INT 1
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: LD_INT 2
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 2
60062: NEG
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60086: LD_ADDR_VAR 0 52
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 1
60155: NEG
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: LD_INT 2
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: LD_INT 1
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 2
60190: NEG
60191: PUSH
60192: LD_INT 0
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 2
60201: NEG
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 2
60213: NEG
60214: PUSH
60215: LD_INT 2
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60237: LD_ADDR_VAR 0 53
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: LD_INT 1
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: LD_INT 1
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 1
60295: NEG
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: LD_INT 2
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: LD_INT 2
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 1
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 2
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 2
60362: PUSH
60363: LD_INT 1
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 2
60372: PUSH
60373: LD_INT 2
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 1
60382: PUSH
60383: LD_INT 2
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 0
60392: PUSH
60393: LD_INT 2
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 1
60402: NEG
60403: PUSH
60404: LD_INT 1
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 2
60413: NEG
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 2
60424: NEG
60425: PUSH
60426: LD_INT 1
60428: NEG
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 2
60436: NEG
60437: PUSH
60438: LD_INT 2
60440: NEG
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60467: LD_ADDR_VAR 0 54
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: PUSH
60506: LD_INT 1
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 1
60525: NEG
60526: PUSH
60527: LD_INT 0
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: LD_INT 2
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: LD_INT 2
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: LD_INT 1
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 2
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 2
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 2
60602: PUSH
60603: LD_INT 2
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 1
60612: PUSH
60613: LD_INT 2
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: LD_INT 2
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 2
60643: NEG
60644: PUSH
60645: LD_INT 0
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 2
60666: NEG
60667: PUSH
60668: LD_INT 2
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60697: LD_ADDR_VAR 0 55
60701: PUSH
60702: LD_INT 0
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 0
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 1
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: LD_INT 1
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: LD_INT 1
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: LD_INT 2
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: LD_INT 2
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: LD_INT 1
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 2
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 2
60822: PUSH
60823: LD_INT 1
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 2
60832: PUSH
60833: LD_INT 2
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 1
60842: PUSH
60843: LD_INT 2
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: LD_INT 2
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 1
60862: NEG
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 2
60873: NEG
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 2
60884: NEG
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 2
60896: NEG
60897: PUSH
60898: LD_INT 2
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60927: LD_ADDR_VAR 0 56
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: LD_INT 1
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: LD_INT 2
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: LD_INT 2
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: PUSH
61032: LD_INT 1
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 2
61042: PUSH
61043: LD_INT 0
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 2
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 2
61062: PUSH
61063: LD_INT 2
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: LD_INT 2
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 0
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 1
61092: NEG
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 2
61114: NEG
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: LD_INT 2
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61157: LD_ADDR_VAR 0 57
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: LD_INT 1
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 1
61215: NEG
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 0
61250: PUSH
61251: LD_INT 2
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: LD_INT 1
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 2
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 2
61282: PUSH
61283: LD_INT 1
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 2
61292: PUSH
61293: LD_INT 2
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 1
61302: PUSH
61303: LD_INT 2
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 2
61333: NEG
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 2
61344: NEG
61345: PUSH
61346: LD_INT 1
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: NEG
61357: PUSH
61358: LD_INT 2
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61387: LD_ADDR_VAR 0 58
61391: PUSH
61392: LD_INT 0
61394: PUSH
61395: LD_INT 0
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: LD_INT 1
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: LD_INT 0
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 1
61425: PUSH
61426: LD_INT 1
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 0
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 1
61445: NEG
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 1
61456: NEG
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: LD_INT 2
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: LD_INT 2
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 2
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 2
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 2
61522: PUSH
61523: LD_INT 2
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: LD_INT 2
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 0
61542: PUSH
61543: LD_INT 2
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: LD_INT 1
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 2
61563: NEG
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 2
61574: NEG
61575: PUSH
61576: LD_INT 1
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 2
61586: NEG
61587: PUSH
61588: LD_INT 2
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61617: LD_ADDR_VAR 0 59
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: LD_INT 1
61637: NEG
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 1
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: PUSH
61656: LD_INT 1
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 1
61675: NEG
61676: PUSH
61677: LD_INT 0
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 1
61686: NEG
61687: PUSH
61688: LD_INT 1
61690: NEG
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61705: LD_ADDR_VAR 0 60
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: LD_INT 1
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 1
61774: NEG
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61793: LD_ADDR_VAR 0 61
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 1
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: LD_INT 1
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: LD_INT 1
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61881: LD_ADDR_VAR 0 62
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 0
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: NEG
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 1
61950: NEG
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61969: LD_ADDR_VAR 0 63
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: LD_INT 0
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 1
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 1
62007: PUSH
62008: LD_INT 1
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: LD_INT 1
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 1
62038: NEG
62039: PUSH
62040: LD_INT 1
62042: NEG
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62057: LD_ADDR_VAR 0 64
62061: PUSH
62062: LD_INT 0
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: LD_INT 1
62077: NEG
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: LD_INT 0
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 0
62105: PUSH
62106: LD_INT 1
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 1
62115: NEG
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: LD_INT 1
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: ST_TO_ADDR
// end ; 1 :
62145: GO 68042
62147: LD_INT 1
62149: DOUBLE
62150: EQUAL
62151: IFTRUE 62155
62153: GO 64778
62155: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62156: LD_ADDR_VAR 0 11
62160: PUSH
62161: LD_INT 1
62163: NEG
62164: PUSH
62165: LD_INT 3
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: LD_INT 3
62178: NEG
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: LD_INT 2
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: LIST
62199: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62200: LD_ADDR_VAR 0 12
62204: PUSH
62205: LD_INT 2
62207: PUSH
62208: LD_INT 1
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 3
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 3
62228: PUSH
62229: LD_INT 1
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: LIST
62240: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62241: LD_ADDR_VAR 0 13
62245: PUSH
62246: LD_INT 3
62248: PUSH
62249: LD_INT 2
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 3
62258: PUSH
62259: LD_INT 3
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 2
62268: PUSH
62269: LD_INT 3
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: LIST
62280: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62281: LD_ADDR_VAR 0 14
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: LD_INT 3
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: LD_INT 3
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: LD_INT 2
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: LIST
62321: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62322: LD_ADDR_VAR 0 15
62326: PUSH
62327: LD_INT 2
62329: NEG
62330: PUSH
62331: LD_INT 1
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 3
62340: NEG
62341: PUSH
62342: LD_INT 0
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 3
62351: NEG
62352: PUSH
62353: LD_INT 1
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: LIST
62365: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62366: LD_ADDR_VAR 0 16
62370: PUSH
62371: LD_INT 2
62373: NEG
62374: PUSH
62375: LD_INT 3
62377: NEG
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 3
62385: NEG
62386: PUSH
62387: LD_INT 2
62389: NEG
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 3
62397: NEG
62398: PUSH
62399: LD_INT 3
62401: NEG
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: LIST
62411: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62412: LD_ADDR_VAR 0 17
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: LD_INT 3
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: LD_INT 3
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: LD_INT 2
62445: NEG
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: LIST
62455: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62456: LD_ADDR_VAR 0 18
62460: PUSH
62461: LD_INT 2
62463: PUSH
62464: LD_INT 1
62466: NEG
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 3
62474: PUSH
62475: LD_INT 0
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 3
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: LIST
62496: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62497: LD_ADDR_VAR 0 19
62501: PUSH
62502: LD_INT 3
62504: PUSH
62505: LD_INT 2
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 3
62514: PUSH
62515: LD_INT 3
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 2
62524: PUSH
62525: LD_INT 3
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: LIST
62536: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62537: LD_ADDR_VAR 0 20
62541: PUSH
62542: LD_INT 1
62544: PUSH
62545: LD_INT 3
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: LD_INT 3
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: NEG
62565: PUSH
62566: LD_INT 2
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: LIST
62577: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62578: LD_ADDR_VAR 0 21
62582: PUSH
62583: LD_INT 2
62585: NEG
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 3
62596: NEG
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 3
62607: NEG
62608: PUSH
62609: LD_INT 1
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: LIST
62621: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62622: LD_ADDR_VAR 0 22
62626: PUSH
62627: LD_INT 2
62629: NEG
62630: PUSH
62631: LD_INT 3
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 3
62641: NEG
62642: PUSH
62643: LD_INT 2
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 3
62653: NEG
62654: PUSH
62655: LD_INT 3
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: LIST
62667: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62668: LD_ADDR_VAR 0 23
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: LD_INT 3
62678: NEG
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: LD_INT 4
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 1
62698: PUSH
62699: LD_INT 3
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: LIST
62711: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62712: LD_ADDR_VAR 0 24
62716: PUSH
62717: LD_INT 3
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 3
62729: PUSH
62730: LD_INT 1
62732: NEG
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 4
62740: PUSH
62741: LD_INT 1
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: LIST
62752: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62753: LD_ADDR_VAR 0 25
62757: PUSH
62758: LD_INT 3
62760: PUSH
62761: LD_INT 3
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 4
62770: PUSH
62771: LD_INT 3
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 3
62780: PUSH
62781: LD_INT 4
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: LIST
62792: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62793: LD_ADDR_VAR 0 26
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: LD_INT 3
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: LD_INT 4
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: LD_INT 3
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: LIST
62833: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62834: LD_ADDR_VAR 0 27
62838: PUSH
62839: LD_INT 3
62841: NEG
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 3
62852: NEG
62853: PUSH
62854: LD_INT 1
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 4
62863: NEG
62864: PUSH
62865: LD_INT 1
62867: NEG
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: LIST
62877: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62878: LD_ADDR_VAR 0 28
62882: PUSH
62883: LD_INT 3
62885: NEG
62886: PUSH
62887: LD_INT 3
62889: NEG
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 3
62897: NEG
62898: PUSH
62899: LD_INT 4
62901: NEG
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 4
62909: NEG
62910: PUSH
62911: LD_INT 3
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: LIST
62923: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62924: LD_ADDR_VAR 0 29
62928: PUSH
62929: LD_INT 1
62931: NEG
62932: PUSH
62933: LD_INT 3
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: LD_INT 3
62946: NEG
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 1
62954: PUSH
62955: LD_INT 2
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: LD_INT 4
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: LD_INT 4
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: PUSH
62989: LD_INT 3
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 1
62999: NEG
63000: PUSH
63001: LD_INT 5
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 0
63011: PUSH
63012: LD_INT 5
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 1
63022: PUSH
63023: LD_INT 4
63025: NEG
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 1
63033: NEG
63034: PUSH
63035: LD_INT 6
63037: NEG
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 0
63045: PUSH
63046: LD_INT 6
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 1
63056: PUSH
63057: LD_INT 5
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63079: LD_ADDR_VAR 0 30
63083: PUSH
63084: LD_INT 2
63086: PUSH
63087: LD_INT 1
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 3
63097: PUSH
63098: LD_INT 0
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 3
63107: PUSH
63108: LD_INT 1
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 3
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 4
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 4
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 4
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 5
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 5
63169: PUSH
63170: LD_INT 1
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 5
63179: PUSH
63180: LD_INT 1
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 6
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 6
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63222: LD_ADDR_VAR 0 31
63226: PUSH
63227: LD_INT 3
63229: PUSH
63230: LD_INT 2
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 3
63239: PUSH
63240: LD_INT 3
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 2
63249: PUSH
63250: LD_INT 3
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 4
63259: PUSH
63260: LD_INT 3
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 4
63269: PUSH
63270: LD_INT 4
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 3
63279: PUSH
63280: LD_INT 4
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 5
63289: PUSH
63290: LD_INT 4
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 5
63299: PUSH
63300: LD_INT 5
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 4
63309: PUSH
63310: LD_INT 5
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 6
63319: PUSH
63320: LD_INT 5
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 6
63329: PUSH
63330: LD_INT 6
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 5
63339: PUSH
63340: LD_INT 6
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63361: LD_ADDR_VAR 0 32
63365: PUSH
63366: LD_INT 1
63368: PUSH
63369: LD_INT 3
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 0
63378: PUSH
63379: LD_INT 3
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 1
63388: NEG
63389: PUSH
63390: LD_INT 2
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: LD_INT 4
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: LD_INT 4
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: LD_INT 3
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: PUSH
63431: LD_INT 5
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: LD_INT 5
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: LD_INT 4
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 1
63461: PUSH
63462: LD_INT 6
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 0
63471: PUSH
63472: LD_INT 6
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 1
63481: NEG
63482: PUSH
63483: LD_INT 5
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63504: LD_ADDR_VAR 0 33
63508: PUSH
63509: LD_INT 2
63511: NEG
63512: PUSH
63513: LD_INT 1
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 3
63522: NEG
63523: PUSH
63524: LD_INT 0
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 3
63533: NEG
63534: PUSH
63535: LD_INT 1
63537: NEG
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 3
63545: NEG
63546: PUSH
63547: LD_INT 1
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 4
63556: NEG
63557: PUSH
63558: LD_INT 0
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 4
63567: NEG
63568: PUSH
63569: LD_INT 1
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 4
63579: NEG
63580: PUSH
63581: LD_INT 1
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 5
63590: NEG
63591: PUSH
63592: LD_INT 0
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 5
63601: NEG
63602: PUSH
63603: LD_INT 1
63605: NEG
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 5
63613: NEG
63614: PUSH
63615: LD_INT 1
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 6
63624: NEG
63625: PUSH
63626: LD_INT 0
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 6
63635: NEG
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63659: LD_ADDR_VAR 0 34
63663: PUSH
63664: LD_INT 2
63666: NEG
63667: PUSH
63668: LD_INT 3
63670: NEG
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 3
63678: NEG
63679: PUSH
63680: LD_INT 2
63682: NEG
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 3
63690: NEG
63691: PUSH
63692: LD_INT 3
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 3
63702: NEG
63703: PUSH
63704: LD_INT 4
63706: NEG
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 4
63714: NEG
63715: PUSH
63716: LD_INT 3
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 4
63726: NEG
63727: PUSH
63728: LD_INT 4
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 4
63738: NEG
63739: PUSH
63740: LD_INT 5
63742: NEG
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 5
63750: NEG
63751: PUSH
63752: LD_INT 4
63754: NEG
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 5
63762: NEG
63763: PUSH
63764: LD_INT 5
63766: NEG
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 5
63774: NEG
63775: PUSH
63776: LD_INT 6
63778: NEG
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 6
63786: NEG
63787: PUSH
63788: LD_INT 5
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 6
63798: NEG
63799: PUSH
63800: LD_INT 6
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63822: LD_ADDR_VAR 0 41
63826: PUSH
63827: LD_INT 0
63829: PUSH
63830: LD_INT 2
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 1
63840: NEG
63841: PUSH
63842: LD_INT 3
63844: NEG
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 1
63852: PUSH
63853: LD_INT 2
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: LIST
63865: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63866: LD_ADDR_VAR 0 42
63870: PUSH
63871: LD_INT 2
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 2
63883: PUSH
63884: LD_INT 1
63886: NEG
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 3
63894: PUSH
63895: LD_INT 1
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: LIST
63906: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63907: LD_ADDR_VAR 0 43
63911: PUSH
63912: LD_INT 2
63914: PUSH
63915: LD_INT 2
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 3
63924: PUSH
63925: LD_INT 2
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 2
63934: PUSH
63935: LD_INT 3
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: LIST
63946: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63947: LD_ADDR_VAR 0 44
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: LD_INT 2
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 1
63964: PUSH
63965: LD_INT 3
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 1
63974: NEG
63975: PUSH
63976: LD_INT 2
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: LIST
63987: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63988: LD_ADDR_VAR 0 45
63992: PUSH
63993: LD_INT 2
63995: NEG
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 2
64006: NEG
64007: PUSH
64008: LD_INT 1
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 3
64017: NEG
64018: PUSH
64019: LD_INT 1
64021: NEG
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: LIST
64031: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64032: LD_ADDR_VAR 0 46
64036: PUSH
64037: LD_INT 2
64039: NEG
64040: PUSH
64041: LD_INT 2
64043: NEG
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 2
64051: NEG
64052: PUSH
64053: LD_INT 3
64055: NEG
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_INT 3
64063: NEG
64064: PUSH
64065: LD_INT 2
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: LIST
64077: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64078: LD_ADDR_VAR 0 47
64082: PUSH
64083: LD_INT 2
64085: NEG
64086: PUSH
64087: LD_INT 3
64089: NEG
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 1
64097: NEG
64098: PUSH
64099: LD_INT 3
64101: NEG
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64111: LD_ADDR_VAR 0 48
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: LD_INT 2
64121: NEG
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 2
64129: PUSH
64130: LD_INT 1
64132: NEG
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64142: LD_ADDR_VAR 0 49
64146: PUSH
64147: LD_INT 3
64149: PUSH
64150: LD_INT 1
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 3
64159: PUSH
64160: LD_INT 2
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64171: LD_ADDR_VAR 0 50
64175: PUSH
64176: LD_INT 2
64178: PUSH
64179: LD_INT 3
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PUSH
64186: LD_INT 1
64188: PUSH
64189: LD_INT 3
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64200: LD_ADDR_VAR 0 51
64204: PUSH
64205: LD_INT 1
64207: NEG
64208: PUSH
64209: LD_INT 2
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 2
64218: NEG
64219: PUSH
64220: LD_INT 1
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64231: LD_ADDR_VAR 0 52
64235: PUSH
64236: LD_INT 3
64238: NEG
64239: PUSH
64240: LD_INT 1
64242: NEG
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 3
64250: NEG
64251: PUSH
64252: LD_INT 2
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64264: LD_ADDR_VAR 0 53
64268: PUSH
64269: LD_INT 1
64271: NEG
64272: PUSH
64273: LD_INT 3
64275: NEG
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: LD_INT 3
64286: NEG
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 1
64294: PUSH
64295: LD_INT 2
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: LIST
64307: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64308: LD_ADDR_VAR 0 54
64312: PUSH
64313: LD_INT 2
64315: PUSH
64316: LD_INT 1
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 3
64326: PUSH
64327: LD_INT 0
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 3
64336: PUSH
64337: LD_INT 1
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: LIST
64348: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64349: LD_ADDR_VAR 0 55
64353: PUSH
64354: LD_INT 3
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 3
64366: PUSH
64367: LD_INT 3
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 2
64376: PUSH
64377: LD_INT 3
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: LIST
64388: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64389: LD_ADDR_VAR 0 56
64393: PUSH
64394: LD_INT 1
64396: PUSH
64397: LD_INT 3
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 0
64406: PUSH
64407: LD_INT 3
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 1
64416: NEG
64417: PUSH
64418: LD_INT 2
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: LIST
64429: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64430: LD_ADDR_VAR 0 57
64434: PUSH
64435: LD_INT 2
64437: NEG
64438: PUSH
64439: LD_INT 1
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 3
64448: NEG
64449: PUSH
64450: LD_INT 0
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 3
64459: NEG
64460: PUSH
64461: LD_INT 1
64463: NEG
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: LIST
64473: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64474: LD_ADDR_VAR 0 58
64478: PUSH
64479: LD_INT 2
64481: NEG
64482: PUSH
64483: LD_INT 3
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 3
64493: NEG
64494: PUSH
64495: LD_INT 2
64497: NEG
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 3
64505: NEG
64506: PUSH
64507: LD_INT 3
64509: NEG
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: LIST
64519: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64520: LD_ADDR_VAR 0 59
64524: PUSH
64525: LD_INT 1
64527: NEG
64528: PUSH
64529: LD_INT 2
64531: NEG
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: LD_INT 2
64542: NEG
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: LIST
64563: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64564: LD_ADDR_VAR 0 60
64568: PUSH
64569: LD_INT 1
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 2
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 2
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: LIST
64604: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64605: LD_ADDR_VAR 0 61
64609: PUSH
64610: LD_INT 2
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 2
64622: PUSH
64623: LD_INT 2
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: LD_INT 2
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: LIST
64644: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64645: LD_ADDR_VAR 0 62
64649: PUSH
64650: LD_INT 1
64652: PUSH
64653: LD_INT 2
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 0
64662: PUSH
64663: LD_INT 2
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: LD_INT 1
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: LIST
64685: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64686: LD_ADDR_VAR 0 63
64690: PUSH
64691: LD_INT 1
64693: NEG
64694: PUSH
64695: LD_INT 1
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 2
64704: NEG
64705: PUSH
64706: LD_INT 0
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 2
64715: NEG
64716: PUSH
64717: LD_INT 1
64719: NEG
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: LIST
64729: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64730: LD_ADDR_VAR 0 64
64734: PUSH
64735: LD_INT 1
64737: NEG
64738: PUSH
64739: LD_INT 2
64741: NEG
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 2
64749: NEG
64750: PUSH
64751: LD_INT 1
64753: NEG
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 2
64761: NEG
64762: PUSH
64763: LD_INT 2
64765: NEG
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: LIST
64775: ST_TO_ADDR
// end ; 2 :
64776: GO 68042
64778: LD_INT 2
64780: DOUBLE
64781: EQUAL
64782: IFTRUE 64786
64784: GO 68041
64786: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64787: LD_ADDR_VAR 0 29
64791: PUSH
64792: LD_INT 4
64794: PUSH
64795: LD_INT 0
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 4
64804: PUSH
64805: LD_INT 1
64807: NEG
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 5
64815: PUSH
64816: LD_INT 0
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 5
64825: PUSH
64826: LD_INT 1
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 4
64835: PUSH
64836: LD_INT 1
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 3
64845: PUSH
64846: LD_INT 0
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 3
64855: PUSH
64856: LD_INT 1
64858: NEG
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 3
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 5
64877: PUSH
64878: LD_INT 2
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 3
64887: PUSH
64888: LD_INT 3
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 3
64897: PUSH
64898: LD_INT 2
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 4
64907: PUSH
64908: LD_INT 3
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 4
64917: PUSH
64918: LD_INT 4
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 3
64927: PUSH
64928: LD_INT 4
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 2
64937: PUSH
64938: LD_INT 3
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 2
64947: PUSH
64948: LD_INT 2
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 4
64957: PUSH
64958: LD_INT 2
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 2
64967: PUSH
64968: LD_INT 4
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 0
64977: PUSH
64978: LD_INT 4
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 0
64987: PUSH
64988: LD_INT 3
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 1
64997: PUSH
64998: LD_INT 4
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 1
65007: PUSH
65008: LD_INT 5
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 0
65017: PUSH
65018: LD_INT 5
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: PUSH
65029: LD_INT 4
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 1
65038: NEG
65039: PUSH
65040: LD_INT 3
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 2
65049: PUSH
65050: LD_INT 5
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 2
65059: NEG
65060: PUSH
65061: LD_INT 3
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 3
65070: NEG
65071: PUSH
65072: LD_INT 0
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 3
65081: NEG
65082: PUSH
65083: LD_INT 1
65085: NEG
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 2
65093: NEG
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 2
65104: NEG
65105: PUSH
65106: LD_INT 1
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 3
65115: NEG
65116: PUSH
65117: LD_INT 1
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 4
65126: NEG
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 4
65137: NEG
65138: PUSH
65139: LD_INT 1
65141: NEG
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 4
65149: NEG
65150: PUSH
65151: LD_INT 2
65153: NEG
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 2
65161: NEG
65162: PUSH
65163: LD_INT 2
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 4
65172: NEG
65173: PUSH
65174: LD_INT 4
65176: NEG
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 4
65184: NEG
65185: PUSH
65186: LD_INT 5
65188: NEG
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 3
65196: NEG
65197: PUSH
65198: LD_INT 4
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 3
65208: NEG
65209: PUSH
65210: LD_INT 3
65212: NEG
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 4
65220: NEG
65221: PUSH
65222: LD_INT 3
65224: NEG
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 5
65232: NEG
65233: PUSH
65234: LD_INT 4
65236: NEG
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 5
65244: NEG
65245: PUSH
65246: LD_INT 5
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 3
65256: NEG
65257: PUSH
65258: LD_INT 5
65260: NEG
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 5
65268: NEG
65269: PUSH
65270: LD_INT 3
65272: NEG
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65325: LD_ADDR_VAR 0 30
65329: PUSH
65330: LD_INT 4
65332: PUSH
65333: LD_INT 4
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 4
65342: PUSH
65343: LD_INT 3
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 5
65352: PUSH
65353: LD_INT 4
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 5
65362: PUSH
65363: LD_INT 5
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 4
65372: PUSH
65373: LD_INT 5
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 3
65382: PUSH
65383: LD_INT 4
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 3
65392: PUSH
65393: LD_INT 3
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 5
65402: PUSH
65403: LD_INT 3
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 3
65412: PUSH
65413: LD_INT 5
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 0
65422: PUSH
65423: LD_INT 3
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 0
65432: PUSH
65433: LD_INT 2
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 1
65442: PUSH
65443: LD_INT 3
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 1
65452: PUSH
65453: LD_INT 4
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: LD_INT 4
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 1
65472: NEG
65473: PUSH
65474: LD_INT 3
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 1
65483: NEG
65484: PUSH
65485: LD_INT 2
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 2
65494: PUSH
65495: LD_INT 4
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 2
65504: NEG
65505: PUSH
65506: LD_INT 2
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 4
65515: NEG
65516: PUSH
65517: LD_INT 0
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 4
65526: NEG
65527: PUSH
65528: LD_INT 1
65530: NEG
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 3
65538: NEG
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 3
65549: NEG
65550: PUSH
65551: LD_INT 1
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 4
65560: NEG
65561: PUSH
65562: LD_INT 1
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 5
65571: NEG
65572: PUSH
65573: LD_INT 0
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 5
65582: NEG
65583: PUSH
65584: LD_INT 1
65586: NEG
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 5
65594: NEG
65595: PUSH
65596: LD_INT 2
65598: NEG
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 3
65606: NEG
65607: PUSH
65608: LD_INT 2
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 3
65617: NEG
65618: PUSH
65619: LD_INT 3
65621: NEG
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 3
65629: NEG
65630: PUSH
65631: LD_INT 4
65633: NEG
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 2
65641: NEG
65642: PUSH
65643: LD_INT 3
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 2
65653: NEG
65654: PUSH
65655: LD_INT 2
65657: NEG
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 3
65665: NEG
65666: PUSH
65667: LD_INT 2
65669: NEG
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 4
65677: NEG
65678: PUSH
65679: LD_INT 3
65681: NEG
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 4
65689: NEG
65690: PUSH
65691: LD_INT 4
65693: NEG
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 2
65701: NEG
65702: PUSH
65703: LD_INT 4
65705: NEG
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 4
65713: NEG
65714: PUSH
65715: LD_INT 2
65717: NEG
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: LD_INT 4
65728: NEG
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 0
65736: PUSH
65737: LD_INT 5
65739: NEG
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 1
65747: PUSH
65748: LD_INT 4
65750: NEG
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 1
65758: PUSH
65759: LD_INT 3
65761: NEG
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 0
65769: PUSH
65770: LD_INT 3
65772: NEG
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 1
65780: NEG
65781: PUSH
65782: LD_INT 4
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 1
65792: NEG
65793: PUSH
65794: LD_INT 5
65796: NEG
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 2
65804: PUSH
65805: LD_INT 3
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 2
65815: NEG
65816: PUSH
65817: LD_INT 5
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: LIST
65856: LIST
65857: LIST
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65872: LD_ADDR_VAR 0 31
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: LD_INT 4
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 0
65889: PUSH
65890: LD_INT 3
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 1
65899: PUSH
65900: LD_INT 4
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 1
65909: PUSH
65910: LD_INT 5
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 0
65919: PUSH
65920: LD_INT 5
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 1
65929: NEG
65930: PUSH
65931: LD_INT 4
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 1
65940: NEG
65941: PUSH
65942: LD_INT 3
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 2
65951: PUSH
65952: LD_INT 5
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 2
65961: NEG
65962: PUSH
65963: LD_INT 3
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 3
65972: NEG
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 3
65983: NEG
65984: PUSH
65985: LD_INT 1
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 2
65995: NEG
65996: PUSH
65997: LD_INT 0
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 2
66006: NEG
66007: PUSH
66008: LD_INT 1
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 3
66017: NEG
66018: PUSH
66019: LD_INT 1
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 4
66028: NEG
66029: PUSH
66030: LD_INT 0
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 4
66039: NEG
66040: PUSH
66041: LD_INT 1
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 4
66051: NEG
66052: PUSH
66053: LD_INT 2
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 2
66063: NEG
66064: PUSH
66065: LD_INT 2
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 4
66074: NEG
66075: PUSH
66076: LD_INT 4
66078: NEG
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 4
66086: NEG
66087: PUSH
66088: LD_INT 5
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 3
66098: NEG
66099: PUSH
66100: LD_INT 4
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 3
66110: NEG
66111: PUSH
66112: LD_INT 3
66114: NEG
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 4
66122: NEG
66123: PUSH
66124: LD_INT 3
66126: NEG
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 5
66134: NEG
66135: PUSH
66136: LD_INT 4
66138: NEG
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 5
66146: NEG
66147: PUSH
66148: LD_INT 5
66150: NEG
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 3
66158: NEG
66159: PUSH
66160: LD_INT 5
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 5
66170: NEG
66171: PUSH
66172: LD_INT 3
66174: NEG
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: LD_INT 3
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 0
66193: PUSH
66194: LD_INT 4
66196: NEG
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 1
66204: PUSH
66205: LD_INT 3
66207: NEG
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 1
66215: PUSH
66216: LD_INT 2
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 0
66226: PUSH
66227: LD_INT 2
66229: NEG
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 1
66237: NEG
66238: PUSH
66239: LD_INT 3
66241: NEG
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 1
66249: NEG
66250: PUSH
66251: LD_INT 4
66253: NEG
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 2
66261: PUSH
66262: LD_INT 2
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 2
66272: NEG
66273: PUSH
66274: LD_INT 4
66276: NEG
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 4
66284: PUSH
66285: LD_INT 0
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 4
66294: PUSH
66295: LD_INT 1
66297: NEG
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 5
66305: PUSH
66306: LD_INT 0
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 5
66315: PUSH
66316: LD_INT 1
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 4
66325: PUSH
66326: LD_INT 1
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 3
66335: PUSH
66336: LD_INT 0
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 3
66345: PUSH
66346: LD_INT 1
66348: NEG
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 3
66356: PUSH
66357: LD_INT 2
66359: NEG
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 5
66367: PUSH
66368: LD_INT 2
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66422: LD_ADDR_VAR 0 32
66426: PUSH
66427: LD_INT 4
66429: NEG
66430: PUSH
66431: LD_INT 0
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 4
66440: NEG
66441: PUSH
66442: LD_INT 1
66444: NEG
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 3
66452: NEG
66453: PUSH
66454: LD_INT 0
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 3
66463: NEG
66464: PUSH
66465: LD_INT 1
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 4
66474: NEG
66475: PUSH
66476: LD_INT 1
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 5
66485: NEG
66486: PUSH
66487: LD_INT 0
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 5
66496: NEG
66497: PUSH
66498: LD_INT 1
66500: NEG
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 5
66508: NEG
66509: PUSH
66510: LD_INT 2
66512: NEG
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 3
66520: NEG
66521: PUSH
66522: LD_INT 2
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 3
66531: NEG
66532: PUSH
66533: LD_INT 3
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 3
66543: NEG
66544: PUSH
66545: LD_INT 4
66547: NEG
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 2
66555: NEG
66556: PUSH
66557: LD_INT 3
66559: NEG
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 2
66567: NEG
66568: PUSH
66569: LD_INT 2
66571: NEG
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 3
66579: NEG
66580: PUSH
66581: LD_INT 2
66583: NEG
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 4
66591: NEG
66592: PUSH
66593: LD_INT 3
66595: NEG
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 4
66603: NEG
66604: PUSH
66605: LD_INT 4
66607: NEG
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 2
66615: NEG
66616: PUSH
66617: LD_INT 4
66619: NEG
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 4
66627: NEG
66628: PUSH
66629: LD_INT 2
66631: NEG
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 0
66639: PUSH
66640: LD_INT 4
66642: NEG
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 0
66650: PUSH
66651: LD_INT 5
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 1
66661: PUSH
66662: LD_INT 4
66664: NEG
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: LD_INT 3
66675: NEG
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: LD_INT 3
66686: NEG
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 1
66694: NEG
66695: PUSH
66696: LD_INT 4
66698: NEG
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: PUSH
66704: LD_INT 1
66706: NEG
66707: PUSH
66708: LD_INT 5
66710: NEG
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 2
66718: PUSH
66719: LD_INT 3
66721: NEG
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 2
66729: NEG
66730: PUSH
66731: LD_INT 5
66733: NEG
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 3
66741: PUSH
66742: LD_INT 0
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 3
66751: PUSH
66752: LD_INT 1
66754: NEG
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 4
66762: PUSH
66763: LD_INT 0
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 4
66772: PUSH
66773: LD_INT 1
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 3
66782: PUSH
66783: LD_INT 1
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 2
66792: PUSH
66793: LD_INT 0
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: LD_INT 2
66802: PUSH
66803: LD_INT 1
66805: NEG
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 2
66813: PUSH
66814: LD_INT 2
66816: NEG
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 4
66824: PUSH
66825: LD_INT 2
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: LD_INT 4
66834: PUSH
66835: LD_INT 4
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PUSH
66842: LD_INT 4
66844: PUSH
66845: LD_INT 3
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 5
66854: PUSH
66855: LD_INT 4
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 5
66864: PUSH
66865: LD_INT 5
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 4
66874: PUSH
66875: LD_INT 5
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 3
66884: PUSH
66885: LD_INT 4
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 3
66894: PUSH
66895: LD_INT 3
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 5
66904: PUSH
66905: LD_INT 3
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 3
66914: PUSH
66915: LD_INT 5
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66969: LD_ADDR_VAR 0 33
66973: PUSH
66974: LD_INT 4
66976: NEG
66977: PUSH
66978: LD_INT 4
66980: NEG
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 4
66988: NEG
66989: PUSH
66990: LD_INT 5
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 3
67000: NEG
67001: PUSH
67002: LD_INT 4
67004: NEG
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 3
67012: NEG
67013: PUSH
67014: LD_INT 3
67016: NEG
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 4
67024: NEG
67025: PUSH
67026: LD_INT 3
67028: NEG
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 5
67036: NEG
67037: PUSH
67038: LD_INT 4
67040: NEG
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 5
67048: NEG
67049: PUSH
67050: LD_INT 5
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 3
67060: NEG
67061: PUSH
67062: LD_INT 5
67064: NEG
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 5
67072: NEG
67073: PUSH
67074: LD_INT 3
67076: NEG
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 0
67084: PUSH
67085: LD_INT 3
67087: NEG
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 0
67095: PUSH
67096: LD_INT 4
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 1
67106: PUSH
67107: LD_INT 3
67109: NEG
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 1
67117: PUSH
67118: LD_INT 2
67120: NEG
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 0
67128: PUSH
67129: LD_INT 2
67131: NEG
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: LD_INT 1
67139: NEG
67140: PUSH
67141: LD_INT 3
67143: NEG
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 1
67151: NEG
67152: PUSH
67153: LD_INT 4
67155: NEG
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 2
67163: PUSH
67164: LD_INT 2
67166: NEG
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 2
67174: NEG
67175: PUSH
67176: LD_INT 4
67178: NEG
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 4
67186: PUSH
67187: LD_INT 0
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 4
67196: PUSH
67197: LD_INT 1
67199: NEG
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 5
67207: PUSH
67208: LD_INT 0
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 5
67217: PUSH
67218: LD_INT 1
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 4
67227: PUSH
67228: LD_INT 1
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 3
67237: PUSH
67238: LD_INT 0
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 3
67247: PUSH
67248: LD_INT 1
67250: NEG
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 3
67258: PUSH
67259: LD_INT 2
67261: NEG
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 5
67269: PUSH
67270: LD_INT 2
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 3
67279: PUSH
67280: LD_INT 3
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 3
67289: PUSH
67290: LD_INT 2
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 4
67299: PUSH
67300: LD_INT 3
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 4
67309: PUSH
67310: LD_INT 4
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 3
67319: PUSH
67320: LD_INT 4
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 2
67329: PUSH
67330: LD_INT 3
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 2
67339: PUSH
67340: LD_INT 2
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 4
67349: PUSH
67350: LD_INT 2
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 2
67359: PUSH
67360: LD_INT 4
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: LD_INT 4
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 0
67379: PUSH
67380: LD_INT 3
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 1
67389: PUSH
67390: LD_INT 4
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 1
67399: PUSH
67400: LD_INT 5
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 0
67409: PUSH
67410: LD_INT 5
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 1
67419: NEG
67420: PUSH
67421: LD_INT 4
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 1
67430: NEG
67431: PUSH
67432: LD_INT 3
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 2
67441: PUSH
67442: LD_INT 5
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 2
67451: NEG
67452: PUSH
67453: LD_INT 3
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67507: LD_ADDR_VAR 0 34
67511: PUSH
67512: LD_INT 0
67514: PUSH
67515: LD_INT 4
67517: NEG
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 0
67525: PUSH
67526: LD_INT 5
67528: NEG
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 1
67536: PUSH
67537: LD_INT 4
67539: NEG
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 1
67547: PUSH
67548: LD_INT 3
67550: NEG
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 0
67558: PUSH
67559: LD_INT 3
67561: NEG
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 1
67569: NEG
67570: PUSH
67571: LD_INT 4
67573: NEG
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 1
67581: NEG
67582: PUSH
67583: LD_INT 5
67585: NEG
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 2
67593: PUSH
67594: LD_INT 3
67596: NEG
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 2
67604: NEG
67605: PUSH
67606: LD_INT 5
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 3
67616: PUSH
67617: LD_INT 0
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 3
67626: PUSH
67627: LD_INT 1
67629: NEG
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 4
67637: PUSH
67638: LD_INT 0
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 4
67647: PUSH
67648: LD_INT 1
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 3
67657: PUSH
67658: LD_INT 1
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 2
67667: PUSH
67668: LD_INT 0
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 2
67677: PUSH
67678: LD_INT 1
67680: NEG
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: LD_INT 2
67688: PUSH
67689: LD_INT 2
67691: NEG
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 4
67699: PUSH
67700: LD_INT 2
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 4
67709: PUSH
67710: LD_INT 4
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 4
67719: PUSH
67720: LD_INT 3
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 5
67729: PUSH
67730: LD_INT 4
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 5
67739: PUSH
67740: LD_INT 5
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 4
67749: PUSH
67750: LD_INT 5
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 3
67759: PUSH
67760: LD_INT 4
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 3
67769: PUSH
67770: LD_INT 3
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: LD_INT 5
67779: PUSH
67780: LD_INT 3
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 3
67789: PUSH
67790: LD_INT 5
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PUSH
67797: LD_INT 0
67799: PUSH
67800: LD_INT 3
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 0
67809: PUSH
67810: LD_INT 2
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 1
67819: PUSH
67820: LD_INT 3
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 1
67829: PUSH
67830: LD_INT 4
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 0
67839: PUSH
67840: LD_INT 4
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 1
67849: NEG
67850: PUSH
67851: LD_INT 3
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 1
67860: NEG
67861: PUSH
67862: LD_INT 2
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 2
67871: PUSH
67872: LD_INT 4
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 2
67881: NEG
67882: PUSH
67883: LD_INT 2
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 4
67892: NEG
67893: PUSH
67894: LD_INT 0
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 4
67903: NEG
67904: PUSH
67905: LD_INT 1
67907: NEG
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 3
67915: NEG
67916: PUSH
67917: LD_INT 0
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 3
67926: NEG
67927: PUSH
67928: LD_INT 1
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 4
67937: NEG
67938: PUSH
67939: LD_INT 1
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 5
67948: NEG
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 5
67959: NEG
67960: PUSH
67961: LD_INT 1
67963: NEG
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 5
67971: NEG
67972: PUSH
67973: LD_INT 2
67975: NEG
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 3
67983: NEG
67984: PUSH
67985: LD_INT 2
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: ST_TO_ADDR
// end ; end ;
68039: GO 68042
68041: POP
// case btype of b_depot , b_warehouse :
68042: LD_VAR 0 1
68046: PUSH
68047: LD_INT 0
68049: DOUBLE
68050: EQUAL
68051: IFTRUE 68061
68053: LD_INT 1
68055: DOUBLE
68056: EQUAL
68057: IFTRUE 68061
68059: GO 68262
68061: POP
// case nation of nation_american :
68062: LD_VAR 0 5
68066: PUSH
68067: LD_INT 1
68069: DOUBLE
68070: EQUAL
68071: IFTRUE 68075
68073: GO 68131
68075: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
68076: LD_ADDR_VAR 0 9
68080: PUSH
68081: LD_VAR 0 11
68085: PUSH
68086: LD_VAR 0 12
68090: PUSH
68091: LD_VAR 0 13
68095: PUSH
68096: LD_VAR 0 14
68100: PUSH
68101: LD_VAR 0 15
68105: PUSH
68106: LD_VAR 0 16
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: PUSH
68119: LD_VAR 0 4
68123: PUSH
68124: LD_INT 1
68126: PLUS
68127: ARRAY
68128: ST_TO_ADDR
68129: GO 68260
68131: LD_INT 2
68133: DOUBLE
68134: EQUAL
68135: IFTRUE 68139
68137: GO 68195
68139: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
68140: LD_ADDR_VAR 0 9
68144: PUSH
68145: LD_VAR 0 17
68149: PUSH
68150: LD_VAR 0 18
68154: PUSH
68155: LD_VAR 0 19
68159: PUSH
68160: LD_VAR 0 20
68164: PUSH
68165: LD_VAR 0 21
68169: PUSH
68170: LD_VAR 0 22
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: PUSH
68183: LD_VAR 0 4
68187: PUSH
68188: LD_INT 1
68190: PLUS
68191: ARRAY
68192: ST_TO_ADDR
68193: GO 68260
68195: LD_INT 3
68197: DOUBLE
68198: EQUAL
68199: IFTRUE 68203
68201: GO 68259
68203: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68204: LD_ADDR_VAR 0 9
68208: PUSH
68209: LD_VAR 0 23
68213: PUSH
68214: LD_VAR 0 24
68218: PUSH
68219: LD_VAR 0 25
68223: PUSH
68224: LD_VAR 0 26
68228: PUSH
68229: LD_VAR 0 27
68233: PUSH
68234: LD_VAR 0 28
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: PUSH
68247: LD_VAR 0 4
68251: PUSH
68252: LD_INT 1
68254: PLUS
68255: ARRAY
68256: ST_TO_ADDR
68257: GO 68260
68259: POP
68260: GO 68815
68262: LD_INT 2
68264: DOUBLE
68265: EQUAL
68266: IFTRUE 68276
68268: LD_INT 3
68270: DOUBLE
68271: EQUAL
68272: IFTRUE 68276
68274: GO 68332
68276: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68277: LD_ADDR_VAR 0 9
68281: PUSH
68282: LD_VAR 0 29
68286: PUSH
68287: LD_VAR 0 30
68291: PUSH
68292: LD_VAR 0 31
68296: PUSH
68297: LD_VAR 0 32
68301: PUSH
68302: LD_VAR 0 33
68306: PUSH
68307: LD_VAR 0 34
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: PUSH
68320: LD_VAR 0 4
68324: PUSH
68325: LD_INT 1
68327: PLUS
68328: ARRAY
68329: ST_TO_ADDR
68330: GO 68815
68332: LD_INT 16
68334: DOUBLE
68335: EQUAL
68336: IFTRUE 68394
68338: LD_INT 17
68340: DOUBLE
68341: EQUAL
68342: IFTRUE 68394
68344: LD_INT 18
68346: DOUBLE
68347: EQUAL
68348: IFTRUE 68394
68350: LD_INT 19
68352: DOUBLE
68353: EQUAL
68354: IFTRUE 68394
68356: LD_INT 22
68358: DOUBLE
68359: EQUAL
68360: IFTRUE 68394
68362: LD_INT 20
68364: DOUBLE
68365: EQUAL
68366: IFTRUE 68394
68368: LD_INT 21
68370: DOUBLE
68371: EQUAL
68372: IFTRUE 68394
68374: LD_INT 23
68376: DOUBLE
68377: EQUAL
68378: IFTRUE 68394
68380: LD_INT 24
68382: DOUBLE
68383: EQUAL
68384: IFTRUE 68394
68386: LD_INT 25
68388: DOUBLE
68389: EQUAL
68390: IFTRUE 68394
68392: GO 68450
68394: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68395: LD_ADDR_VAR 0 9
68399: PUSH
68400: LD_VAR 0 35
68404: PUSH
68405: LD_VAR 0 36
68409: PUSH
68410: LD_VAR 0 37
68414: PUSH
68415: LD_VAR 0 38
68419: PUSH
68420: LD_VAR 0 39
68424: PUSH
68425: LD_VAR 0 40
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: PUSH
68438: LD_VAR 0 4
68442: PUSH
68443: LD_INT 1
68445: PLUS
68446: ARRAY
68447: ST_TO_ADDR
68448: GO 68815
68450: LD_INT 6
68452: DOUBLE
68453: EQUAL
68454: IFTRUE 68506
68456: LD_INT 7
68458: DOUBLE
68459: EQUAL
68460: IFTRUE 68506
68462: LD_INT 8
68464: DOUBLE
68465: EQUAL
68466: IFTRUE 68506
68468: LD_INT 13
68470: DOUBLE
68471: EQUAL
68472: IFTRUE 68506
68474: LD_INT 12
68476: DOUBLE
68477: EQUAL
68478: IFTRUE 68506
68480: LD_INT 15
68482: DOUBLE
68483: EQUAL
68484: IFTRUE 68506
68486: LD_INT 11
68488: DOUBLE
68489: EQUAL
68490: IFTRUE 68506
68492: LD_INT 14
68494: DOUBLE
68495: EQUAL
68496: IFTRUE 68506
68498: LD_INT 10
68500: DOUBLE
68501: EQUAL
68502: IFTRUE 68506
68504: GO 68562
68506: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
68507: LD_ADDR_VAR 0 9
68511: PUSH
68512: LD_VAR 0 41
68516: PUSH
68517: LD_VAR 0 42
68521: PUSH
68522: LD_VAR 0 43
68526: PUSH
68527: LD_VAR 0 44
68531: PUSH
68532: LD_VAR 0 45
68536: PUSH
68537: LD_VAR 0 46
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: PUSH
68550: LD_VAR 0 4
68554: PUSH
68555: LD_INT 1
68557: PLUS
68558: ARRAY
68559: ST_TO_ADDR
68560: GO 68815
68562: LD_INT 36
68564: DOUBLE
68565: EQUAL
68566: IFTRUE 68570
68568: GO 68626
68570: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68571: LD_ADDR_VAR 0 9
68575: PUSH
68576: LD_VAR 0 47
68580: PUSH
68581: LD_VAR 0 48
68585: PUSH
68586: LD_VAR 0 49
68590: PUSH
68591: LD_VAR 0 50
68595: PUSH
68596: LD_VAR 0 51
68600: PUSH
68601: LD_VAR 0 52
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: PUSH
68614: LD_VAR 0 4
68618: PUSH
68619: LD_INT 1
68621: PLUS
68622: ARRAY
68623: ST_TO_ADDR
68624: GO 68815
68626: LD_INT 4
68628: DOUBLE
68629: EQUAL
68630: IFTRUE 68652
68632: LD_INT 5
68634: DOUBLE
68635: EQUAL
68636: IFTRUE 68652
68638: LD_INT 34
68640: DOUBLE
68641: EQUAL
68642: IFTRUE 68652
68644: LD_INT 37
68646: DOUBLE
68647: EQUAL
68648: IFTRUE 68652
68650: GO 68708
68652: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68653: LD_ADDR_VAR 0 9
68657: PUSH
68658: LD_VAR 0 53
68662: PUSH
68663: LD_VAR 0 54
68667: PUSH
68668: LD_VAR 0 55
68672: PUSH
68673: LD_VAR 0 56
68677: PUSH
68678: LD_VAR 0 57
68682: PUSH
68683: LD_VAR 0 58
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: PUSH
68696: LD_VAR 0 4
68700: PUSH
68701: LD_INT 1
68703: PLUS
68704: ARRAY
68705: ST_TO_ADDR
68706: GO 68815
68708: LD_INT 31
68710: DOUBLE
68711: EQUAL
68712: IFTRUE 68758
68714: LD_INT 32
68716: DOUBLE
68717: EQUAL
68718: IFTRUE 68758
68720: LD_INT 33
68722: DOUBLE
68723: EQUAL
68724: IFTRUE 68758
68726: LD_INT 27
68728: DOUBLE
68729: EQUAL
68730: IFTRUE 68758
68732: LD_INT 26
68734: DOUBLE
68735: EQUAL
68736: IFTRUE 68758
68738: LD_INT 28
68740: DOUBLE
68741: EQUAL
68742: IFTRUE 68758
68744: LD_INT 29
68746: DOUBLE
68747: EQUAL
68748: IFTRUE 68758
68750: LD_INT 30
68752: DOUBLE
68753: EQUAL
68754: IFTRUE 68758
68756: GO 68814
68758: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
68759: LD_ADDR_VAR 0 9
68763: PUSH
68764: LD_VAR 0 59
68768: PUSH
68769: LD_VAR 0 60
68773: PUSH
68774: LD_VAR 0 61
68778: PUSH
68779: LD_VAR 0 62
68783: PUSH
68784: LD_VAR 0 63
68788: PUSH
68789: LD_VAR 0 64
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: PUSH
68802: LD_VAR 0 4
68806: PUSH
68807: LD_INT 1
68809: PLUS
68810: ARRAY
68811: ST_TO_ADDR
68812: GO 68815
68814: POP
// temp_list2 = [ ] ;
68815: LD_ADDR_VAR 0 10
68819: PUSH
68820: EMPTY
68821: ST_TO_ADDR
// for i in temp_list do
68822: LD_ADDR_VAR 0 8
68826: PUSH
68827: LD_VAR 0 9
68831: PUSH
68832: FOR_IN
68833: IFFALSE 68885
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68835: LD_ADDR_VAR 0 10
68839: PUSH
68840: LD_VAR 0 10
68844: PUSH
68845: LD_VAR 0 8
68849: PUSH
68850: LD_INT 1
68852: ARRAY
68853: PUSH
68854: LD_VAR 0 2
68858: PLUS
68859: PUSH
68860: LD_VAR 0 8
68864: PUSH
68865: LD_INT 2
68867: ARRAY
68868: PUSH
68869: LD_VAR 0 3
68873: PLUS
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: EMPTY
68880: LIST
68881: ADD
68882: ST_TO_ADDR
68883: GO 68832
68885: POP
68886: POP
// result = temp_list2 ;
68887: LD_ADDR_VAR 0 7
68891: PUSH
68892: LD_VAR 0 10
68896: ST_TO_ADDR
// end ;
68897: LD_VAR 0 7
68901: RET
// export function EnemyInRange ( unit , dist ) ; begin
68902: LD_INT 0
68904: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68905: LD_ADDR_VAR 0 3
68909: PUSH
68910: LD_VAR 0 1
68914: PPUSH
68915: CALL_OW 255
68919: PPUSH
68920: LD_VAR 0 1
68924: PPUSH
68925: CALL_OW 250
68929: PPUSH
68930: LD_VAR 0 1
68934: PPUSH
68935: CALL_OW 251
68939: PPUSH
68940: LD_VAR 0 2
68944: PPUSH
68945: CALL 43006 0 4
68949: PUSH
68950: LD_INT 4
68952: ARRAY
68953: ST_TO_ADDR
// end ;
68954: LD_VAR 0 3
68958: RET
// export function PlayerSeeMe ( unit ) ; begin
68959: LD_INT 0
68961: PPUSH
// result := See ( your_side , unit ) ;
68962: LD_ADDR_VAR 0 2
68966: PUSH
68967: LD_OWVAR 2
68971: PPUSH
68972: LD_VAR 0 1
68976: PPUSH
68977: CALL_OW 292
68981: ST_TO_ADDR
// end ;
68982: LD_VAR 0 2
68986: RET
// export function ReverseDir ( unit ) ; begin
68987: LD_INT 0
68989: PPUSH
// if not unit then
68990: LD_VAR 0 1
68994: NOT
68995: IFFALSE 68999
// exit ;
68997: GO 69022
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68999: LD_ADDR_VAR 0 2
69003: PUSH
69004: LD_VAR 0 1
69008: PPUSH
69009: CALL_OW 254
69013: PUSH
69014: LD_INT 3
69016: PLUS
69017: PUSH
69018: LD_INT 6
69020: MOD
69021: ST_TO_ADDR
// end ;
69022: LD_VAR 0 2
69026: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69027: LD_INT 0
69029: PPUSH
69030: PPUSH
69031: PPUSH
69032: PPUSH
69033: PPUSH
// if not hexes then
69034: LD_VAR 0 2
69038: NOT
69039: IFFALSE 69043
// exit ;
69041: GO 69191
// dist := 9999 ;
69043: LD_ADDR_VAR 0 5
69047: PUSH
69048: LD_INT 9999
69050: ST_TO_ADDR
// for i = 1 to hexes do
69051: LD_ADDR_VAR 0 4
69055: PUSH
69056: DOUBLE
69057: LD_INT 1
69059: DEC
69060: ST_TO_ADDR
69061: LD_VAR 0 2
69065: PUSH
69066: FOR_TO
69067: IFFALSE 69179
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69069: LD_VAR 0 1
69073: PPUSH
69074: LD_VAR 0 2
69078: PUSH
69079: LD_VAR 0 4
69083: ARRAY
69084: PUSH
69085: LD_INT 1
69087: ARRAY
69088: PPUSH
69089: LD_VAR 0 2
69093: PUSH
69094: LD_VAR 0 4
69098: ARRAY
69099: PUSH
69100: LD_INT 2
69102: ARRAY
69103: PPUSH
69104: CALL_OW 297
69108: PUSH
69109: LD_VAR 0 5
69113: LESS
69114: IFFALSE 69177
// begin hex := hexes [ i ] ;
69116: LD_ADDR_VAR 0 7
69120: PUSH
69121: LD_VAR 0 2
69125: PUSH
69126: LD_VAR 0 4
69130: ARRAY
69131: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69132: LD_ADDR_VAR 0 5
69136: PUSH
69137: LD_VAR 0 1
69141: PPUSH
69142: LD_VAR 0 2
69146: PUSH
69147: LD_VAR 0 4
69151: ARRAY
69152: PUSH
69153: LD_INT 1
69155: ARRAY
69156: PPUSH
69157: LD_VAR 0 2
69161: PUSH
69162: LD_VAR 0 4
69166: ARRAY
69167: PUSH
69168: LD_INT 2
69170: ARRAY
69171: PPUSH
69172: CALL_OW 297
69176: ST_TO_ADDR
// end ; end ;
69177: GO 69066
69179: POP
69180: POP
// result := hex ;
69181: LD_ADDR_VAR 0 3
69185: PUSH
69186: LD_VAR 0 7
69190: ST_TO_ADDR
// end ;
69191: LD_VAR 0 3
69195: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69196: LD_INT 0
69198: PPUSH
69199: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69200: LD_VAR 0 1
69204: NOT
69205: PUSH
69206: LD_VAR 0 1
69210: PUSH
69211: LD_INT 21
69213: PUSH
69214: LD_INT 2
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 23
69223: PUSH
69224: LD_INT 2
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PPUSH
69235: CALL_OW 69
69239: IN
69240: NOT
69241: OR
69242: IFFALSE 69246
// exit ;
69244: GO 69293
// for i = 1 to 3 do
69246: LD_ADDR_VAR 0 3
69250: PUSH
69251: DOUBLE
69252: LD_INT 1
69254: DEC
69255: ST_TO_ADDR
69256: LD_INT 3
69258: PUSH
69259: FOR_TO
69260: IFFALSE 69291
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69262: LD_VAR 0 1
69266: PPUSH
69267: CALL_OW 250
69271: PPUSH
69272: LD_VAR 0 1
69276: PPUSH
69277: CALL_OW 251
69281: PPUSH
69282: LD_INT 1
69284: PPUSH
69285: CALL_OW 453
69289: GO 69259
69291: POP
69292: POP
// end ;
69293: LD_VAR 0 2
69297: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69298: LD_INT 0
69300: PPUSH
69301: PPUSH
69302: PPUSH
69303: PPUSH
69304: PPUSH
69305: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69306: LD_VAR 0 1
69310: NOT
69311: PUSH
69312: LD_VAR 0 2
69316: NOT
69317: OR
69318: PUSH
69319: LD_VAR 0 1
69323: PPUSH
69324: CALL_OW 314
69328: OR
69329: IFFALSE 69333
// exit ;
69331: GO 69774
// x := GetX ( enemy_unit ) ;
69333: LD_ADDR_VAR 0 7
69337: PUSH
69338: LD_VAR 0 2
69342: PPUSH
69343: CALL_OW 250
69347: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69348: LD_ADDR_VAR 0 8
69352: PUSH
69353: LD_VAR 0 2
69357: PPUSH
69358: CALL_OW 251
69362: ST_TO_ADDR
// if not x or not y then
69363: LD_VAR 0 7
69367: NOT
69368: PUSH
69369: LD_VAR 0 8
69373: NOT
69374: OR
69375: IFFALSE 69379
// exit ;
69377: GO 69774
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69379: LD_ADDR_VAR 0 6
69383: PUSH
69384: LD_VAR 0 7
69388: PPUSH
69389: LD_INT 0
69391: PPUSH
69392: LD_INT 4
69394: PPUSH
69395: CALL_OW 272
69399: PUSH
69400: LD_VAR 0 8
69404: PPUSH
69405: LD_INT 0
69407: PPUSH
69408: LD_INT 4
69410: PPUSH
69411: CALL_OW 273
69415: PUSH
69416: EMPTY
69417: LIST
69418: LIST
69419: PUSH
69420: LD_VAR 0 7
69424: PPUSH
69425: LD_INT 1
69427: PPUSH
69428: LD_INT 4
69430: PPUSH
69431: CALL_OW 272
69435: PUSH
69436: LD_VAR 0 8
69440: PPUSH
69441: LD_INT 1
69443: PPUSH
69444: LD_INT 4
69446: PPUSH
69447: CALL_OW 273
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_VAR 0 7
69460: PPUSH
69461: LD_INT 2
69463: PPUSH
69464: LD_INT 4
69466: PPUSH
69467: CALL_OW 272
69471: PUSH
69472: LD_VAR 0 8
69476: PPUSH
69477: LD_INT 2
69479: PPUSH
69480: LD_INT 4
69482: PPUSH
69483: CALL_OW 273
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: LD_VAR 0 7
69496: PPUSH
69497: LD_INT 3
69499: PPUSH
69500: LD_INT 4
69502: PPUSH
69503: CALL_OW 272
69507: PUSH
69508: LD_VAR 0 8
69512: PPUSH
69513: LD_INT 3
69515: PPUSH
69516: LD_INT 4
69518: PPUSH
69519: CALL_OW 273
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_VAR 0 7
69532: PPUSH
69533: LD_INT 4
69535: PPUSH
69536: LD_INT 4
69538: PPUSH
69539: CALL_OW 272
69543: PUSH
69544: LD_VAR 0 8
69548: PPUSH
69549: LD_INT 4
69551: PPUSH
69552: LD_INT 4
69554: PPUSH
69555: CALL_OW 273
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_VAR 0 7
69568: PPUSH
69569: LD_INT 5
69571: PPUSH
69572: LD_INT 4
69574: PPUSH
69575: CALL_OW 272
69579: PUSH
69580: LD_VAR 0 8
69584: PPUSH
69585: LD_INT 5
69587: PPUSH
69588: LD_INT 4
69590: PPUSH
69591: CALL_OW 273
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: ST_TO_ADDR
// for i = tmp downto 1 do
69608: LD_ADDR_VAR 0 4
69612: PUSH
69613: DOUBLE
69614: LD_VAR 0 6
69618: INC
69619: ST_TO_ADDR
69620: LD_INT 1
69622: PUSH
69623: FOR_DOWNTO
69624: IFFALSE 69725
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69626: LD_VAR 0 6
69630: PUSH
69631: LD_VAR 0 4
69635: ARRAY
69636: PUSH
69637: LD_INT 1
69639: ARRAY
69640: PPUSH
69641: LD_VAR 0 6
69645: PUSH
69646: LD_VAR 0 4
69650: ARRAY
69651: PUSH
69652: LD_INT 2
69654: ARRAY
69655: PPUSH
69656: CALL_OW 488
69660: NOT
69661: PUSH
69662: LD_VAR 0 6
69666: PUSH
69667: LD_VAR 0 4
69671: ARRAY
69672: PUSH
69673: LD_INT 1
69675: ARRAY
69676: PPUSH
69677: LD_VAR 0 6
69681: PUSH
69682: LD_VAR 0 4
69686: ARRAY
69687: PUSH
69688: LD_INT 2
69690: ARRAY
69691: PPUSH
69692: CALL_OW 428
69696: PUSH
69697: LD_INT 0
69699: NONEQUAL
69700: OR
69701: IFFALSE 69723
// tmp := Delete ( tmp , i ) ;
69703: LD_ADDR_VAR 0 6
69707: PUSH
69708: LD_VAR 0 6
69712: PPUSH
69713: LD_VAR 0 4
69717: PPUSH
69718: CALL_OW 3
69722: ST_TO_ADDR
69723: GO 69623
69725: POP
69726: POP
// j := GetClosestHex ( unit , tmp ) ;
69727: LD_ADDR_VAR 0 5
69731: PUSH
69732: LD_VAR 0 1
69736: PPUSH
69737: LD_VAR 0 6
69741: PPUSH
69742: CALL 69027 0 2
69746: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69747: LD_VAR 0 1
69751: PPUSH
69752: LD_VAR 0 5
69756: PUSH
69757: LD_INT 1
69759: ARRAY
69760: PPUSH
69761: LD_VAR 0 5
69765: PUSH
69766: LD_INT 2
69768: ARRAY
69769: PPUSH
69770: CALL_OW 111
// end ;
69774: LD_VAR 0 3
69778: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69779: LD_INT 0
69781: PPUSH
69782: PPUSH
69783: PPUSH
// uc_side = 0 ;
69784: LD_ADDR_OWVAR 20
69788: PUSH
69789: LD_INT 0
69791: ST_TO_ADDR
// uc_nation = 0 ;
69792: LD_ADDR_OWVAR 21
69796: PUSH
69797: LD_INT 0
69799: ST_TO_ADDR
// InitHc ;
69800: CALL_OW 19
// InitVc ;
69804: CALL_OW 20
// if mastodonts then
69808: LD_VAR 0 6
69812: IFFALSE 69879
// for i = 1 to mastodonts do
69814: LD_ADDR_VAR 0 11
69818: PUSH
69819: DOUBLE
69820: LD_INT 1
69822: DEC
69823: ST_TO_ADDR
69824: LD_VAR 0 6
69828: PUSH
69829: FOR_TO
69830: IFFALSE 69877
// begin vc_chassis := 31 ;
69832: LD_ADDR_OWVAR 37
69836: PUSH
69837: LD_INT 31
69839: ST_TO_ADDR
// vc_control := control_rider ;
69840: LD_ADDR_OWVAR 38
69844: PUSH
69845: LD_INT 4
69847: ST_TO_ADDR
// animal := CreateVehicle ;
69848: LD_ADDR_VAR 0 12
69852: PUSH
69853: CALL_OW 45
69857: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69858: LD_VAR 0 12
69862: PPUSH
69863: LD_VAR 0 8
69867: PPUSH
69868: LD_INT 0
69870: PPUSH
69871: CALL 71948 0 3
// end ;
69875: GO 69829
69877: POP
69878: POP
// if horses then
69879: LD_VAR 0 5
69883: IFFALSE 69950
// for i = 1 to horses do
69885: LD_ADDR_VAR 0 11
69889: PUSH
69890: DOUBLE
69891: LD_INT 1
69893: DEC
69894: ST_TO_ADDR
69895: LD_VAR 0 5
69899: PUSH
69900: FOR_TO
69901: IFFALSE 69948
// begin hc_class := 21 ;
69903: LD_ADDR_OWVAR 28
69907: PUSH
69908: LD_INT 21
69910: ST_TO_ADDR
// hc_gallery :=  ;
69911: LD_ADDR_OWVAR 33
69915: PUSH
69916: LD_STRING 
69918: ST_TO_ADDR
// animal := CreateHuman ;
69919: LD_ADDR_VAR 0 12
69923: PUSH
69924: CALL_OW 44
69928: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69929: LD_VAR 0 12
69933: PPUSH
69934: LD_VAR 0 8
69938: PPUSH
69939: LD_INT 0
69941: PPUSH
69942: CALL 71948 0 3
// end ;
69946: GO 69900
69948: POP
69949: POP
// if birds then
69950: LD_VAR 0 1
69954: IFFALSE 70021
// for i = 1 to birds do
69956: LD_ADDR_VAR 0 11
69960: PUSH
69961: DOUBLE
69962: LD_INT 1
69964: DEC
69965: ST_TO_ADDR
69966: LD_VAR 0 1
69970: PUSH
69971: FOR_TO
69972: IFFALSE 70019
// begin hc_class = 18 ;
69974: LD_ADDR_OWVAR 28
69978: PUSH
69979: LD_INT 18
69981: ST_TO_ADDR
// hc_gallery =  ;
69982: LD_ADDR_OWVAR 33
69986: PUSH
69987: LD_STRING 
69989: ST_TO_ADDR
// animal := CreateHuman ;
69990: LD_ADDR_VAR 0 12
69994: PUSH
69995: CALL_OW 44
69999: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70000: LD_VAR 0 12
70004: PPUSH
70005: LD_VAR 0 8
70009: PPUSH
70010: LD_INT 0
70012: PPUSH
70013: CALL 71948 0 3
// end ;
70017: GO 69971
70019: POP
70020: POP
// if tigers then
70021: LD_VAR 0 2
70025: IFFALSE 70109
// for i = 1 to tigers do
70027: LD_ADDR_VAR 0 11
70031: PUSH
70032: DOUBLE
70033: LD_INT 1
70035: DEC
70036: ST_TO_ADDR
70037: LD_VAR 0 2
70041: PUSH
70042: FOR_TO
70043: IFFALSE 70107
// begin hc_class = class_tiger ;
70045: LD_ADDR_OWVAR 28
70049: PUSH
70050: LD_INT 14
70052: ST_TO_ADDR
// hc_gallery =  ;
70053: LD_ADDR_OWVAR 33
70057: PUSH
70058: LD_STRING 
70060: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70061: LD_ADDR_OWVAR 35
70065: PUSH
70066: LD_INT 7
70068: NEG
70069: PPUSH
70070: LD_INT 7
70072: PPUSH
70073: CALL_OW 12
70077: ST_TO_ADDR
// animal := CreateHuman ;
70078: LD_ADDR_VAR 0 12
70082: PUSH
70083: CALL_OW 44
70087: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70088: LD_VAR 0 12
70092: PPUSH
70093: LD_VAR 0 8
70097: PPUSH
70098: LD_INT 0
70100: PPUSH
70101: CALL 71948 0 3
// end ;
70105: GO 70042
70107: POP
70108: POP
// if apemans then
70109: LD_VAR 0 3
70113: IFFALSE 70236
// for i = 1 to apemans do
70115: LD_ADDR_VAR 0 11
70119: PUSH
70120: DOUBLE
70121: LD_INT 1
70123: DEC
70124: ST_TO_ADDR
70125: LD_VAR 0 3
70129: PUSH
70130: FOR_TO
70131: IFFALSE 70234
// begin hc_class = class_apeman ;
70133: LD_ADDR_OWVAR 28
70137: PUSH
70138: LD_INT 12
70140: ST_TO_ADDR
// hc_gallery =  ;
70141: LD_ADDR_OWVAR 33
70145: PUSH
70146: LD_STRING 
70148: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
70149: LD_ADDR_OWVAR 35
70153: PUSH
70154: LD_INT 5
70156: NEG
70157: PPUSH
70158: LD_INT 5
70160: PPUSH
70161: CALL_OW 12
70165: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70166: LD_ADDR_OWVAR 31
70170: PUSH
70171: LD_INT 1
70173: PPUSH
70174: LD_INT 3
70176: PPUSH
70177: CALL_OW 12
70181: PUSH
70182: LD_INT 1
70184: PPUSH
70185: LD_INT 3
70187: PPUSH
70188: CALL_OW 12
70192: PUSH
70193: LD_INT 0
70195: PUSH
70196: LD_INT 0
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: ST_TO_ADDR
// animal := CreateHuman ;
70205: LD_ADDR_VAR 0 12
70209: PUSH
70210: CALL_OW 44
70214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70215: LD_VAR 0 12
70219: PPUSH
70220: LD_VAR 0 8
70224: PPUSH
70225: LD_INT 0
70227: PPUSH
70228: CALL 71948 0 3
// end ;
70232: GO 70130
70234: POP
70235: POP
// if enchidnas then
70236: LD_VAR 0 4
70240: IFFALSE 70307
// for i = 1 to enchidnas do
70242: LD_ADDR_VAR 0 11
70246: PUSH
70247: DOUBLE
70248: LD_INT 1
70250: DEC
70251: ST_TO_ADDR
70252: LD_VAR 0 4
70256: PUSH
70257: FOR_TO
70258: IFFALSE 70305
// begin hc_class = 13 ;
70260: LD_ADDR_OWVAR 28
70264: PUSH
70265: LD_INT 13
70267: ST_TO_ADDR
// hc_gallery =  ;
70268: LD_ADDR_OWVAR 33
70272: PUSH
70273: LD_STRING 
70275: ST_TO_ADDR
// animal := CreateHuman ;
70276: LD_ADDR_VAR 0 12
70280: PUSH
70281: CALL_OW 44
70285: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70286: LD_VAR 0 12
70290: PPUSH
70291: LD_VAR 0 8
70295: PPUSH
70296: LD_INT 0
70298: PPUSH
70299: CALL 71948 0 3
// end ;
70303: GO 70257
70305: POP
70306: POP
// if fishes then
70307: LD_VAR 0 7
70311: IFFALSE 70378
// for i = 1 to fishes do
70313: LD_ADDR_VAR 0 11
70317: PUSH
70318: DOUBLE
70319: LD_INT 1
70321: DEC
70322: ST_TO_ADDR
70323: LD_VAR 0 7
70327: PUSH
70328: FOR_TO
70329: IFFALSE 70376
// begin hc_class = 20 ;
70331: LD_ADDR_OWVAR 28
70335: PUSH
70336: LD_INT 20
70338: ST_TO_ADDR
// hc_gallery =  ;
70339: LD_ADDR_OWVAR 33
70343: PUSH
70344: LD_STRING 
70346: ST_TO_ADDR
// animal := CreateHuman ;
70347: LD_ADDR_VAR 0 12
70351: PUSH
70352: CALL_OW 44
70356: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70357: LD_VAR 0 12
70361: PPUSH
70362: LD_VAR 0 9
70366: PPUSH
70367: LD_INT 0
70369: PPUSH
70370: CALL 71948 0 3
// end ;
70374: GO 70328
70376: POP
70377: POP
// end ;
70378: LD_VAR 0 10
70382: RET
// export function WantHeal ( sci , unit ) ; begin
70383: LD_INT 0
70385: PPUSH
// if GetTaskList ( sci ) > 0 then
70386: LD_VAR 0 1
70390: PPUSH
70391: CALL_OW 437
70395: PUSH
70396: LD_INT 0
70398: GREATER
70399: IFFALSE 70469
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70401: LD_VAR 0 1
70405: PPUSH
70406: CALL_OW 437
70410: PUSH
70411: LD_INT 1
70413: ARRAY
70414: PUSH
70415: LD_INT 1
70417: ARRAY
70418: PUSH
70419: LD_STRING l
70421: EQUAL
70422: PUSH
70423: LD_VAR 0 1
70427: PPUSH
70428: CALL_OW 437
70432: PUSH
70433: LD_INT 1
70435: ARRAY
70436: PUSH
70437: LD_INT 4
70439: ARRAY
70440: PUSH
70441: LD_VAR 0 2
70445: EQUAL
70446: AND
70447: IFFALSE 70459
// result := true else
70449: LD_ADDR_VAR 0 3
70453: PUSH
70454: LD_INT 1
70456: ST_TO_ADDR
70457: GO 70467
// result := false ;
70459: LD_ADDR_VAR 0 3
70463: PUSH
70464: LD_INT 0
70466: ST_TO_ADDR
// end else
70467: GO 70477
// result := false ;
70469: LD_ADDR_VAR 0 3
70473: PUSH
70474: LD_INT 0
70476: ST_TO_ADDR
// end ;
70477: LD_VAR 0 3
70481: RET
// export function HealTarget ( sci ) ; begin
70482: LD_INT 0
70484: PPUSH
// if not sci then
70485: LD_VAR 0 1
70489: NOT
70490: IFFALSE 70494
// exit ;
70492: GO 70559
// result := 0 ;
70494: LD_ADDR_VAR 0 2
70498: PUSH
70499: LD_INT 0
70501: ST_TO_ADDR
// if GetTaskList ( sci ) then
70502: LD_VAR 0 1
70506: PPUSH
70507: CALL_OW 437
70511: IFFALSE 70559
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70513: LD_VAR 0 1
70517: PPUSH
70518: CALL_OW 437
70522: PUSH
70523: LD_INT 1
70525: ARRAY
70526: PUSH
70527: LD_INT 1
70529: ARRAY
70530: PUSH
70531: LD_STRING l
70533: EQUAL
70534: IFFALSE 70559
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70536: LD_ADDR_VAR 0 2
70540: PUSH
70541: LD_VAR 0 1
70545: PPUSH
70546: CALL_OW 437
70550: PUSH
70551: LD_INT 1
70553: ARRAY
70554: PUSH
70555: LD_INT 4
70557: ARRAY
70558: ST_TO_ADDR
// end ;
70559: LD_VAR 0 2
70563: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70564: LD_INT 0
70566: PPUSH
70567: PPUSH
70568: PPUSH
70569: PPUSH
// if not base_units then
70570: LD_VAR 0 1
70574: NOT
70575: IFFALSE 70579
// exit ;
70577: GO 70666
// result := false ;
70579: LD_ADDR_VAR 0 2
70583: PUSH
70584: LD_INT 0
70586: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70587: LD_ADDR_VAR 0 5
70591: PUSH
70592: LD_VAR 0 1
70596: PPUSH
70597: LD_INT 21
70599: PUSH
70600: LD_INT 3
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PPUSH
70607: CALL_OW 72
70611: ST_TO_ADDR
// if not tmp then
70612: LD_VAR 0 5
70616: NOT
70617: IFFALSE 70621
// exit ;
70619: GO 70666
// for i in tmp do
70621: LD_ADDR_VAR 0 3
70625: PUSH
70626: LD_VAR 0 5
70630: PUSH
70631: FOR_IN
70632: IFFALSE 70664
// begin result := EnemyInRange ( i , 22 ) ;
70634: LD_ADDR_VAR 0 2
70638: PUSH
70639: LD_VAR 0 3
70643: PPUSH
70644: LD_INT 22
70646: PPUSH
70647: CALL 68902 0 2
70651: ST_TO_ADDR
// if result then
70652: LD_VAR 0 2
70656: IFFALSE 70662
// exit ;
70658: POP
70659: POP
70660: GO 70666
// end ;
70662: GO 70631
70664: POP
70665: POP
// end ;
70666: LD_VAR 0 2
70670: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70671: LD_INT 0
70673: PPUSH
70674: PPUSH
// if not units then
70675: LD_VAR 0 1
70679: NOT
70680: IFFALSE 70684
// exit ;
70682: GO 70754
// result := [ ] ;
70684: LD_ADDR_VAR 0 3
70688: PUSH
70689: EMPTY
70690: ST_TO_ADDR
// for i in units do
70691: LD_ADDR_VAR 0 4
70695: PUSH
70696: LD_VAR 0 1
70700: PUSH
70701: FOR_IN
70702: IFFALSE 70752
// if GetTag ( i ) = tag then
70704: LD_VAR 0 4
70708: PPUSH
70709: CALL_OW 110
70713: PUSH
70714: LD_VAR 0 2
70718: EQUAL
70719: IFFALSE 70750
// result := Insert ( result , result + 1 , i ) ;
70721: LD_ADDR_VAR 0 3
70725: PUSH
70726: LD_VAR 0 3
70730: PPUSH
70731: LD_VAR 0 3
70735: PUSH
70736: LD_INT 1
70738: PLUS
70739: PPUSH
70740: LD_VAR 0 4
70744: PPUSH
70745: CALL_OW 2
70749: ST_TO_ADDR
70750: GO 70701
70752: POP
70753: POP
// end ;
70754: LD_VAR 0 3
70758: RET
// export function IsDriver ( un ) ; begin
70759: LD_INT 0
70761: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70762: LD_ADDR_VAR 0 2
70766: PUSH
70767: LD_VAR 0 1
70771: PUSH
70772: LD_INT 55
70774: PUSH
70775: EMPTY
70776: LIST
70777: PPUSH
70778: CALL_OW 69
70782: IN
70783: ST_TO_ADDR
// end ;
70784: LD_VAR 0 2
70788: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70789: LD_INT 0
70791: PPUSH
70792: PPUSH
// list := [ ] ;
70793: LD_ADDR_VAR 0 5
70797: PUSH
70798: EMPTY
70799: ST_TO_ADDR
// case d of 0 :
70800: LD_VAR 0 3
70804: PUSH
70805: LD_INT 0
70807: DOUBLE
70808: EQUAL
70809: IFTRUE 70813
70811: GO 70946
70813: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70814: LD_ADDR_VAR 0 5
70818: PUSH
70819: LD_VAR 0 1
70823: PUSH
70824: LD_INT 4
70826: MINUS
70827: PUSH
70828: LD_VAR 0 2
70832: PUSH
70833: LD_INT 4
70835: MINUS
70836: PUSH
70837: LD_INT 2
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: LIST
70844: PUSH
70845: LD_VAR 0 1
70849: PUSH
70850: LD_INT 3
70852: MINUS
70853: PUSH
70854: LD_VAR 0 2
70858: PUSH
70859: LD_INT 1
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: LIST
70866: PUSH
70867: LD_VAR 0 1
70871: PUSH
70872: LD_INT 4
70874: PLUS
70875: PUSH
70876: LD_VAR 0 2
70880: PUSH
70881: LD_INT 4
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: LIST
70888: PUSH
70889: LD_VAR 0 1
70893: PUSH
70894: LD_INT 3
70896: PLUS
70897: PUSH
70898: LD_VAR 0 2
70902: PUSH
70903: LD_INT 3
70905: PLUS
70906: PUSH
70907: LD_INT 5
70909: PUSH
70910: EMPTY
70911: LIST
70912: LIST
70913: LIST
70914: PUSH
70915: LD_VAR 0 1
70919: PUSH
70920: LD_VAR 0 2
70924: PUSH
70925: LD_INT 4
70927: PLUS
70928: PUSH
70929: LD_INT 0
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: LIST
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: ST_TO_ADDR
// end ; 1 :
70944: GO 71644
70946: LD_INT 1
70948: DOUBLE
70949: EQUAL
70950: IFTRUE 70954
70952: GO 71087
70954: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70955: LD_ADDR_VAR 0 5
70959: PUSH
70960: LD_VAR 0 1
70964: PUSH
70965: LD_VAR 0 2
70969: PUSH
70970: LD_INT 4
70972: MINUS
70973: PUSH
70974: LD_INT 3
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: LIST
70981: PUSH
70982: LD_VAR 0 1
70986: PUSH
70987: LD_INT 3
70989: MINUS
70990: PUSH
70991: LD_VAR 0 2
70995: PUSH
70996: LD_INT 3
70998: MINUS
70999: PUSH
71000: LD_INT 2
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: LIST
71007: PUSH
71008: LD_VAR 0 1
71012: PUSH
71013: LD_INT 4
71015: MINUS
71016: PUSH
71017: LD_VAR 0 2
71021: PUSH
71022: LD_INT 1
71024: PUSH
71025: EMPTY
71026: LIST
71027: LIST
71028: LIST
71029: PUSH
71030: LD_VAR 0 1
71034: PUSH
71035: LD_VAR 0 2
71039: PUSH
71040: LD_INT 3
71042: PLUS
71043: PUSH
71044: LD_INT 0
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: LIST
71051: PUSH
71052: LD_VAR 0 1
71056: PUSH
71057: LD_INT 4
71059: PLUS
71060: PUSH
71061: LD_VAR 0 2
71065: PUSH
71066: LD_INT 4
71068: PLUS
71069: PUSH
71070: LD_INT 5
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: LIST
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: ST_TO_ADDR
// end ; 2 :
71085: GO 71644
71087: LD_INT 2
71089: DOUBLE
71090: EQUAL
71091: IFTRUE 71095
71093: GO 71224
71095: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71096: LD_ADDR_VAR 0 5
71100: PUSH
71101: LD_VAR 0 1
71105: PUSH
71106: LD_VAR 0 2
71110: PUSH
71111: LD_INT 3
71113: MINUS
71114: PUSH
71115: LD_INT 3
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: LIST
71122: PUSH
71123: LD_VAR 0 1
71127: PUSH
71128: LD_INT 4
71130: PLUS
71131: PUSH
71132: LD_VAR 0 2
71136: PUSH
71137: LD_INT 4
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: LIST
71144: PUSH
71145: LD_VAR 0 1
71149: PUSH
71150: LD_VAR 0 2
71154: PUSH
71155: LD_INT 4
71157: PLUS
71158: PUSH
71159: LD_INT 0
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: LIST
71166: PUSH
71167: LD_VAR 0 1
71171: PUSH
71172: LD_INT 3
71174: MINUS
71175: PUSH
71176: LD_VAR 0 2
71180: PUSH
71181: LD_INT 1
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: LIST
71188: PUSH
71189: LD_VAR 0 1
71193: PUSH
71194: LD_INT 4
71196: MINUS
71197: PUSH
71198: LD_VAR 0 2
71202: PUSH
71203: LD_INT 4
71205: MINUS
71206: PUSH
71207: LD_INT 2
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: LIST
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: ST_TO_ADDR
// end ; 3 :
71222: GO 71644
71224: LD_INT 3
71226: DOUBLE
71227: EQUAL
71228: IFTRUE 71232
71230: GO 71365
71232: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71233: LD_ADDR_VAR 0 5
71237: PUSH
71238: LD_VAR 0 1
71242: PUSH
71243: LD_INT 3
71245: PLUS
71246: PUSH
71247: LD_VAR 0 2
71251: PUSH
71252: LD_INT 4
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: LIST
71259: PUSH
71260: LD_VAR 0 1
71264: PUSH
71265: LD_INT 4
71267: PLUS
71268: PUSH
71269: LD_VAR 0 2
71273: PUSH
71274: LD_INT 4
71276: PLUS
71277: PUSH
71278: LD_INT 5
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: LIST
71285: PUSH
71286: LD_VAR 0 1
71290: PUSH
71291: LD_INT 4
71293: MINUS
71294: PUSH
71295: LD_VAR 0 2
71299: PUSH
71300: LD_INT 1
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: LIST
71307: PUSH
71308: LD_VAR 0 1
71312: PUSH
71313: LD_VAR 0 2
71317: PUSH
71318: LD_INT 4
71320: MINUS
71321: PUSH
71322: LD_INT 3
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: LIST
71329: PUSH
71330: LD_VAR 0 1
71334: PUSH
71335: LD_INT 3
71337: MINUS
71338: PUSH
71339: LD_VAR 0 2
71343: PUSH
71344: LD_INT 3
71346: MINUS
71347: PUSH
71348: LD_INT 2
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: LIST
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: ST_TO_ADDR
// end ; 4 :
71363: GO 71644
71365: LD_INT 4
71367: DOUBLE
71368: EQUAL
71369: IFTRUE 71373
71371: GO 71506
71373: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71374: LD_ADDR_VAR 0 5
71378: PUSH
71379: LD_VAR 0 1
71383: PUSH
71384: LD_VAR 0 2
71388: PUSH
71389: LD_INT 4
71391: PLUS
71392: PUSH
71393: LD_INT 0
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: LIST
71400: PUSH
71401: LD_VAR 0 1
71405: PUSH
71406: LD_INT 3
71408: PLUS
71409: PUSH
71410: LD_VAR 0 2
71414: PUSH
71415: LD_INT 3
71417: PLUS
71418: PUSH
71419: LD_INT 5
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: LIST
71426: PUSH
71427: LD_VAR 0 1
71431: PUSH
71432: LD_INT 4
71434: PLUS
71435: PUSH
71436: LD_VAR 0 2
71440: PUSH
71441: LD_INT 4
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: LIST
71448: PUSH
71449: LD_VAR 0 1
71453: PUSH
71454: LD_VAR 0 2
71458: PUSH
71459: LD_INT 3
71461: MINUS
71462: PUSH
71463: LD_INT 3
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: LIST
71470: PUSH
71471: LD_VAR 0 1
71475: PUSH
71476: LD_INT 4
71478: MINUS
71479: PUSH
71480: LD_VAR 0 2
71484: PUSH
71485: LD_INT 4
71487: MINUS
71488: PUSH
71489: LD_INT 2
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: LIST
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: ST_TO_ADDR
// end ; 5 :
71504: GO 71644
71506: LD_INT 5
71508: DOUBLE
71509: EQUAL
71510: IFTRUE 71514
71512: GO 71643
71514: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71515: LD_ADDR_VAR 0 5
71519: PUSH
71520: LD_VAR 0 1
71524: PUSH
71525: LD_INT 4
71527: MINUS
71528: PUSH
71529: LD_VAR 0 2
71533: PUSH
71534: LD_INT 1
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: LIST
71541: PUSH
71542: LD_VAR 0 1
71546: PUSH
71547: LD_VAR 0 2
71551: PUSH
71552: LD_INT 4
71554: MINUS
71555: PUSH
71556: LD_INT 3
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: LIST
71563: PUSH
71564: LD_VAR 0 1
71568: PUSH
71569: LD_INT 4
71571: PLUS
71572: PUSH
71573: LD_VAR 0 2
71577: PUSH
71578: LD_INT 4
71580: PLUS
71581: PUSH
71582: LD_INT 5
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: LIST
71589: PUSH
71590: LD_VAR 0 1
71594: PUSH
71595: LD_INT 3
71597: PLUS
71598: PUSH
71599: LD_VAR 0 2
71603: PUSH
71604: LD_INT 4
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: LIST
71611: PUSH
71612: LD_VAR 0 1
71616: PUSH
71617: LD_VAR 0 2
71621: PUSH
71622: LD_INT 3
71624: PLUS
71625: PUSH
71626: LD_INT 0
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: LIST
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: ST_TO_ADDR
// end ; end ;
71641: GO 71644
71643: POP
// result := list ;
71644: LD_ADDR_VAR 0 4
71648: PUSH
71649: LD_VAR 0 5
71653: ST_TO_ADDR
// end ;
71654: LD_VAR 0 4
71658: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71659: LD_INT 0
71661: PPUSH
71662: PPUSH
71663: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71664: LD_VAR 0 1
71668: NOT
71669: PUSH
71670: LD_VAR 0 2
71674: PUSH
71675: LD_INT 1
71677: PUSH
71678: LD_INT 2
71680: PUSH
71681: LD_INT 3
71683: PUSH
71684: LD_INT 4
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: IN
71693: NOT
71694: OR
71695: IFFALSE 71699
// exit ;
71697: GO 71791
// tmp := [ ] ;
71699: LD_ADDR_VAR 0 5
71703: PUSH
71704: EMPTY
71705: ST_TO_ADDR
// for i in units do
71706: LD_ADDR_VAR 0 4
71710: PUSH
71711: LD_VAR 0 1
71715: PUSH
71716: FOR_IN
71717: IFFALSE 71760
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71719: LD_ADDR_VAR 0 5
71723: PUSH
71724: LD_VAR 0 5
71728: PPUSH
71729: LD_VAR 0 5
71733: PUSH
71734: LD_INT 1
71736: PLUS
71737: PPUSH
71738: LD_VAR 0 4
71742: PPUSH
71743: LD_VAR 0 2
71747: PPUSH
71748: CALL_OW 259
71752: PPUSH
71753: CALL_OW 2
71757: ST_TO_ADDR
71758: GO 71716
71760: POP
71761: POP
// if not tmp then
71762: LD_VAR 0 5
71766: NOT
71767: IFFALSE 71771
// exit ;
71769: GO 71791
// result := SortListByListDesc ( units , tmp ) ;
71771: LD_ADDR_VAR 0 3
71775: PUSH
71776: LD_VAR 0 1
71780: PPUSH
71781: LD_VAR 0 5
71785: PPUSH
71786: CALL_OW 77
71790: ST_TO_ADDR
// end ;
71791: LD_VAR 0 3
71795: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71796: LD_INT 0
71798: PPUSH
71799: PPUSH
71800: PPUSH
// x := GetX ( building ) ;
71801: LD_ADDR_VAR 0 4
71805: PUSH
71806: LD_VAR 0 2
71810: PPUSH
71811: CALL_OW 250
71815: ST_TO_ADDR
// y := GetY ( building ) ;
71816: LD_ADDR_VAR 0 5
71820: PUSH
71821: LD_VAR 0 2
71825: PPUSH
71826: CALL_OW 251
71830: ST_TO_ADDR
// if GetTaskList ( unit ) then
71831: LD_VAR 0 1
71835: PPUSH
71836: CALL_OW 437
71840: IFFALSE 71935
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71842: LD_STRING e
71844: PUSH
71845: LD_VAR 0 1
71849: PPUSH
71850: CALL_OW 437
71854: PUSH
71855: LD_INT 1
71857: ARRAY
71858: PUSH
71859: LD_INT 1
71861: ARRAY
71862: EQUAL
71863: PUSH
71864: LD_VAR 0 4
71868: PUSH
71869: LD_VAR 0 1
71873: PPUSH
71874: CALL_OW 437
71878: PUSH
71879: LD_INT 1
71881: ARRAY
71882: PUSH
71883: LD_INT 2
71885: ARRAY
71886: EQUAL
71887: AND
71888: PUSH
71889: LD_VAR 0 5
71893: PUSH
71894: LD_VAR 0 1
71898: PPUSH
71899: CALL_OW 437
71903: PUSH
71904: LD_INT 1
71906: ARRAY
71907: PUSH
71908: LD_INT 3
71910: ARRAY
71911: EQUAL
71912: AND
71913: IFFALSE 71925
// result := true else
71915: LD_ADDR_VAR 0 3
71919: PUSH
71920: LD_INT 1
71922: ST_TO_ADDR
71923: GO 71933
// result := false ;
71925: LD_ADDR_VAR 0 3
71929: PUSH
71930: LD_INT 0
71932: ST_TO_ADDR
// end else
71933: GO 71943
// result := false ;
71935: LD_ADDR_VAR 0 3
71939: PUSH
71940: LD_INT 0
71942: ST_TO_ADDR
// end ;
71943: LD_VAR 0 3
71947: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71948: LD_INT 0
71950: PPUSH
71951: PPUSH
71952: PPUSH
71953: PPUSH
// if not unit or not area then
71954: LD_VAR 0 1
71958: NOT
71959: PUSH
71960: LD_VAR 0 2
71964: NOT
71965: OR
71966: IFFALSE 71970
// exit ;
71968: GO 72134
// tmp := AreaToList ( area , i ) ;
71970: LD_ADDR_VAR 0 6
71974: PUSH
71975: LD_VAR 0 2
71979: PPUSH
71980: LD_VAR 0 5
71984: PPUSH
71985: CALL_OW 517
71989: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71990: LD_ADDR_VAR 0 5
71994: PUSH
71995: DOUBLE
71996: LD_INT 1
71998: DEC
71999: ST_TO_ADDR
72000: LD_VAR 0 6
72004: PUSH
72005: LD_INT 1
72007: ARRAY
72008: PUSH
72009: FOR_TO
72010: IFFALSE 72132
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72012: LD_ADDR_VAR 0 7
72016: PUSH
72017: LD_VAR 0 6
72021: PUSH
72022: LD_INT 1
72024: ARRAY
72025: PUSH
72026: LD_VAR 0 5
72030: ARRAY
72031: PUSH
72032: LD_VAR 0 6
72036: PUSH
72037: LD_INT 2
72039: ARRAY
72040: PUSH
72041: LD_VAR 0 5
72045: ARRAY
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72051: LD_VAR 0 7
72055: PUSH
72056: LD_INT 1
72058: ARRAY
72059: PPUSH
72060: LD_VAR 0 7
72064: PUSH
72065: LD_INT 2
72067: ARRAY
72068: PPUSH
72069: CALL_OW 428
72073: PUSH
72074: LD_INT 0
72076: EQUAL
72077: IFFALSE 72130
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72079: LD_VAR 0 1
72083: PPUSH
72084: LD_VAR 0 7
72088: PUSH
72089: LD_INT 1
72091: ARRAY
72092: PPUSH
72093: LD_VAR 0 7
72097: PUSH
72098: LD_INT 2
72100: ARRAY
72101: PPUSH
72102: LD_VAR 0 3
72106: PPUSH
72107: CALL_OW 48
// result := IsPlaced ( unit ) ;
72111: LD_ADDR_VAR 0 4
72115: PUSH
72116: LD_VAR 0 1
72120: PPUSH
72121: CALL_OW 305
72125: ST_TO_ADDR
// exit ;
72126: POP
72127: POP
72128: GO 72134
// end ; end ;
72130: GO 72009
72132: POP
72133: POP
// end ;
72134: LD_VAR 0 4
72138: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72139: LD_INT 0
72141: PPUSH
72142: PPUSH
72143: PPUSH
// if not side or side > 8 then
72144: LD_VAR 0 1
72148: NOT
72149: PUSH
72150: LD_VAR 0 1
72154: PUSH
72155: LD_INT 8
72157: GREATER
72158: OR
72159: IFFALSE 72163
// exit ;
72161: GO 72350
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72163: LD_ADDR_VAR 0 4
72167: PUSH
72168: LD_INT 22
72170: PUSH
72171: LD_VAR 0 1
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PUSH
72180: LD_INT 21
72182: PUSH
72183: LD_INT 3
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: PPUSH
72194: CALL_OW 69
72198: ST_TO_ADDR
// if not tmp then
72199: LD_VAR 0 4
72203: NOT
72204: IFFALSE 72208
// exit ;
72206: GO 72350
// enable_addtolog := true ;
72208: LD_ADDR_OWVAR 81
72212: PUSH
72213: LD_INT 1
72215: ST_TO_ADDR
// AddToLog ( [ ) ;
72216: LD_STRING [
72218: PPUSH
72219: CALL_OW 561
// for i in tmp do
72223: LD_ADDR_VAR 0 3
72227: PUSH
72228: LD_VAR 0 4
72232: PUSH
72233: FOR_IN
72234: IFFALSE 72341
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72236: LD_STRING [
72238: PUSH
72239: LD_VAR 0 3
72243: PPUSH
72244: CALL_OW 266
72248: STR
72249: PUSH
72250: LD_STRING , 
72252: STR
72253: PUSH
72254: LD_VAR 0 3
72258: PPUSH
72259: CALL_OW 250
72263: STR
72264: PUSH
72265: LD_STRING , 
72267: STR
72268: PUSH
72269: LD_VAR 0 3
72273: PPUSH
72274: CALL_OW 251
72278: STR
72279: PUSH
72280: LD_STRING , 
72282: STR
72283: PUSH
72284: LD_VAR 0 3
72288: PPUSH
72289: CALL_OW 254
72293: STR
72294: PUSH
72295: LD_STRING , 
72297: STR
72298: PUSH
72299: LD_VAR 0 3
72303: PPUSH
72304: LD_INT 1
72306: PPUSH
72307: CALL_OW 268
72311: STR
72312: PUSH
72313: LD_STRING , 
72315: STR
72316: PUSH
72317: LD_VAR 0 3
72321: PPUSH
72322: LD_INT 2
72324: PPUSH
72325: CALL_OW 268
72329: STR
72330: PUSH
72331: LD_STRING ],
72333: STR
72334: PPUSH
72335: CALL_OW 561
// end ;
72339: GO 72233
72341: POP
72342: POP
// AddToLog ( ]; ) ;
72343: LD_STRING ];
72345: PPUSH
72346: CALL_OW 561
// end ;
72350: LD_VAR 0 2
72354: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72355: LD_INT 0
72357: PPUSH
72358: PPUSH
72359: PPUSH
72360: PPUSH
72361: PPUSH
// if not area or not rate or not max then
72362: LD_VAR 0 1
72366: NOT
72367: PUSH
72368: LD_VAR 0 2
72372: NOT
72373: OR
72374: PUSH
72375: LD_VAR 0 4
72379: NOT
72380: OR
72381: IFFALSE 72385
// exit ;
72383: GO 72577
// while 1 do
72385: LD_INT 1
72387: IFFALSE 72577
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72389: LD_ADDR_VAR 0 9
72393: PUSH
72394: LD_VAR 0 1
72398: PPUSH
72399: LD_INT 1
72401: PPUSH
72402: CALL_OW 287
72406: PUSH
72407: LD_INT 10
72409: MUL
72410: ST_TO_ADDR
// r := rate / 10 ;
72411: LD_ADDR_VAR 0 7
72415: PUSH
72416: LD_VAR 0 2
72420: PUSH
72421: LD_INT 10
72423: DIVREAL
72424: ST_TO_ADDR
// time := 1 1$00 ;
72425: LD_ADDR_VAR 0 8
72429: PUSH
72430: LD_INT 2100
72432: ST_TO_ADDR
// if amount < min then
72433: LD_VAR 0 9
72437: PUSH
72438: LD_VAR 0 3
72442: LESS
72443: IFFALSE 72461
// r := r * 2 else
72445: LD_ADDR_VAR 0 7
72449: PUSH
72450: LD_VAR 0 7
72454: PUSH
72455: LD_INT 2
72457: MUL
72458: ST_TO_ADDR
72459: GO 72487
// if amount > max then
72461: LD_VAR 0 9
72465: PUSH
72466: LD_VAR 0 4
72470: GREATER
72471: IFFALSE 72487
// r := r / 2 ;
72473: LD_ADDR_VAR 0 7
72477: PUSH
72478: LD_VAR 0 7
72482: PUSH
72483: LD_INT 2
72485: DIVREAL
72486: ST_TO_ADDR
// time := time / r ;
72487: LD_ADDR_VAR 0 8
72491: PUSH
72492: LD_VAR 0 8
72496: PUSH
72497: LD_VAR 0 7
72501: DIVREAL
72502: ST_TO_ADDR
// if time < 0 then
72503: LD_VAR 0 8
72507: PUSH
72508: LD_INT 0
72510: LESS
72511: IFFALSE 72528
// time := time * - 1 ;
72513: LD_ADDR_VAR 0 8
72517: PUSH
72518: LD_VAR 0 8
72522: PUSH
72523: LD_INT 1
72525: NEG
72526: MUL
72527: ST_TO_ADDR
// wait ( time ) ;
72528: LD_VAR 0 8
72532: PPUSH
72533: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72537: LD_INT 35
72539: PPUSH
72540: LD_INT 875
72542: PPUSH
72543: CALL_OW 12
72547: PPUSH
72548: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72552: LD_INT 1
72554: PPUSH
72555: LD_INT 5
72557: PPUSH
72558: CALL_OW 12
72562: PPUSH
72563: LD_VAR 0 1
72567: PPUSH
72568: LD_INT 1
72570: PPUSH
72571: CALL_OW 55
// end ;
72575: GO 72385
// end ;
72577: LD_VAR 0 5
72581: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72582: LD_INT 0
72584: PPUSH
72585: PPUSH
72586: PPUSH
72587: PPUSH
72588: PPUSH
72589: PPUSH
72590: PPUSH
72591: PPUSH
// if not turrets or not factories then
72592: LD_VAR 0 1
72596: NOT
72597: PUSH
72598: LD_VAR 0 2
72602: NOT
72603: OR
72604: IFFALSE 72608
// exit ;
72606: GO 72915
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72608: LD_ADDR_VAR 0 10
72612: PUSH
72613: LD_INT 5
72615: PUSH
72616: LD_INT 6
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 2
72625: PUSH
72626: LD_INT 4
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 3
72635: PUSH
72636: LD_INT 5
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PUSH
72643: EMPTY
72644: LIST
72645: LIST
72646: LIST
72647: PUSH
72648: LD_INT 24
72650: PUSH
72651: LD_INT 25
72653: PUSH
72654: EMPTY
72655: LIST
72656: LIST
72657: PUSH
72658: LD_INT 23
72660: PUSH
72661: LD_INT 27
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 42
72674: PUSH
72675: LD_INT 43
72677: PUSH
72678: EMPTY
72679: LIST
72680: LIST
72681: PUSH
72682: LD_INT 44
72684: PUSH
72685: LD_INT 46
72687: PUSH
72688: EMPTY
72689: LIST
72690: LIST
72691: PUSH
72692: LD_INT 45
72694: PUSH
72695: LD_INT 47
72697: PUSH
72698: EMPTY
72699: LIST
72700: LIST
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: LIST
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: LIST
72711: ST_TO_ADDR
// result := [ ] ;
72712: LD_ADDR_VAR 0 3
72716: PUSH
72717: EMPTY
72718: ST_TO_ADDR
// for i in turrets do
72719: LD_ADDR_VAR 0 4
72723: PUSH
72724: LD_VAR 0 1
72728: PUSH
72729: FOR_IN
72730: IFFALSE 72913
// begin nat := GetNation ( i ) ;
72732: LD_ADDR_VAR 0 7
72736: PUSH
72737: LD_VAR 0 4
72741: PPUSH
72742: CALL_OW 248
72746: ST_TO_ADDR
// weapon := 0 ;
72747: LD_ADDR_VAR 0 8
72751: PUSH
72752: LD_INT 0
72754: ST_TO_ADDR
// if not nat then
72755: LD_VAR 0 7
72759: NOT
72760: IFFALSE 72764
// continue ;
72762: GO 72729
// for j in list [ nat ] do
72764: LD_ADDR_VAR 0 5
72768: PUSH
72769: LD_VAR 0 10
72773: PUSH
72774: LD_VAR 0 7
72778: ARRAY
72779: PUSH
72780: FOR_IN
72781: IFFALSE 72822
// if GetBWeapon ( i ) = j [ 1 ] then
72783: LD_VAR 0 4
72787: PPUSH
72788: CALL_OW 269
72792: PUSH
72793: LD_VAR 0 5
72797: PUSH
72798: LD_INT 1
72800: ARRAY
72801: EQUAL
72802: IFFALSE 72820
// begin weapon := j [ 2 ] ;
72804: LD_ADDR_VAR 0 8
72808: PUSH
72809: LD_VAR 0 5
72813: PUSH
72814: LD_INT 2
72816: ARRAY
72817: ST_TO_ADDR
// break ;
72818: GO 72822
// end ;
72820: GO 72780
72822: POP
72823: POP
// if not weapon then
72824: LD_VAR 0 8
72828: NOT
72829: IFFALSE 72833
// continue ;
72831: GO 72729
// for k in factories do
72833: LD_ADDR_VAR 0 6
72837: PUSH
72838: LD_VAR 0 2
72842: PUSH
72843: FOR_IN
72844: IFFALSE 72909
// begin weapons := AvailableWeaponList ( k ) ;
72846: LD_ADDR_VAR 0 9
72850: PUSH
72851: LD_VAR 0 6
72855: PPUSH
72856: CALL_OW 478
72860: ST_TO_ADDR
// if not weapons then
72861: LD_VAR 0 9
72865: NOT
72866: IFFALSE 72870
// continue ;
72868: GO 72843
// if weapon in weapons then
72870: LD_VAR 0 8
72874: PUSH
72875: LD_VAR 0 9
72879: IN
72880: IFFALSE 72907
// begin result := [ i , weapon ] ;
72882: LD_ADDR_VAR 0 3
72886: PUSH
72887: LD_VAR 0 4
72891: PUSH
72892: LD_VAR 0 8
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: ST_TO_ADDR
// exit ;
72901: POP
72902: POP
72903: POP
72904: POP
72905: GO 72915
// end ; end ;
72907: GO 72843
72909: POP
72910: POP
// end ;
72911: GO 72729
72913: POP
72914: POP
// end ;
72915: LD_VAR 0 3
72919: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72920: LD_INT 0
72922: PPUSH
// if not side or side > 8 then
72923: LD_VAR 0 3
72927: NOT
72928: PUSH
72929: LD_VAR 0 3
72933: PUSH
72934: LD_INT 8
72936: GREATER
72937: OR
72938: IFFALSE 72942
// exit ;
72940: GO 73001
// if not range then
72942: LD_VAR 0 4
72946: NOT
72947: IFFALSE 72958
// range := - 12 ;
72949: LD_ADDR_VAR 0 4
72953: PUSH
72954: LD_INT 12
72956: NEG
72957: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72958: LD_VAR 0 1
72962: PPUSH
72963: LD_VAR 0 2
72967: PPUSH
72968: LD_VAR 0 3
72972: PPUSH
72973: LD_VAR 0 4
72977: PPUSH
72978: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72982: LD_VAR 0 1
72986: PPUSH
72987: LD_VAR 0 2
72991: PPUSH
72992: LD_VAR 0 3
72996: PPUSH
72997: CALL_OW 331
// end ;
73001: LD_VAR 0 5
73005: RET
// export function Video ( mode ) ; begin
73006: LD_INT 0
73008: PPUSH
// ingame_video = mode ;
73009: LD_ADDR_OWVAR 52
73013: PUSH
73014: LD_VAR 0 1
73018: ST_TO_ADDR
// interface_hidden = mode ;
73019: LD_ADDR_OWVAR 54
73023: PUSH
73024: LD_VAR 0 1
73028: ST_TO_ADDR
// end ;
73029: LD_VAR 0 2
73033: RET
// export function Join ( array , element ) ; begin
73034: LD_INT 0
73036: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73037: LD_ADDR_VAR 0 3
73041: PUSH
73042: LD_VAR 0 1
73046: PPUSH
73047: LD_VAR 0 1
73051: PUSH
73052: LD_INT 1
73054: PLUS
73055: PPUSH
73056: LD_VAR 0 2
73060: PPUSH
73061: CALL_OW 1
73065: ST_TO_ADDR
// end ;
73066: LD_VAR 0 3
73070: RET
// export function JoinUnion ( array , element ) ; begin
73071: LD_INT 0
73073: PPUSH
// result := array union element ;
73074: LD_ADDR_VAR 0 3
73078: PUSH
73079: LD_VAR 0 1
73083: PUSH
73084: LD_VAR 0 2
73088: UNION
73089: ST_TO_ADDR
// end ;
73090: LD_VAR 0 3
73094: RET
// export function GetBehemoths ( side ) ; begin
73095: LD_INT 0
73097: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73098: LD_ADDR_VAR 0 2
73102: PUSH
73103: LD_INT 22
73105: PUSH
73106: LD_VAR 0 1
73110: PUSH
73111: EMPTY
73112: LIST
73113: LIST
73114: PUSH
73115: LD_INT 31
73117: PUSH
73118: LD_INT 25
73120: PUSH
73121: EMPTY
73122: LIST
73123: LIST
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PPUSH
73129: CALL_OW 69
73133: ST_TO_ADDR
// end ;
73134: LD_VAR 0 2
73138: RET
// export function Shuffle ( array ) ; var i , index ; begin
73139: LD_INT 0
73141: PPUSH
73142: PPUSH
73143: PPUSH
// result := [ ] ;
73144: LD_ADDR_VAR 0 2
73148: PUSH
73149: EMPTY
73150: ST_TO_ADDR
// if not array then
73151: LD_VAR 0 1
73155: NOT
73156: IFFALSE 73160
// exit ;
73158: GO 73259
// Randomize ;
73160: CALL_OW 10
// for i = array downto 1 do
73164: LD_ADDR_VAR 0 3
73168: PUSH
73169: DOUBLE
73170: LD_VAR 0 1
73174: INC
73175: ST_TO_ADDR
73176: LD_INT 1
73178: PUSH
73179: FOR_DOWNTO
73180: IFFALSE 73257
// begin index := rand ( 1 , array ) ;
73182: LD_ADDR_VAR 0 4
73186: PUSH
73187: LD_INT 1
73189: PPUSH
73190: LD_VAR 0 1
73194: PPUSH
73195: CALL_OW 12
73199: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73200: LD_ADDR_VAR 0 2
73204: PUSH
73205: LD_VAR 0 2
73209: PPUSH
73210: LD_VAR 0 2
73214: PUSH
73215: LD_INT 1
73217: PLUS
73218: PPUSH
73219: LD_VAR 0 1
73223: PUSH
73224: LD_VAR 0 4
73228: ARRAY
73229: PPUSH
73230: CALL_OW 2
73234: ST_TO_ADDR
// array := Delete ( array , index ) ;
73235: LD_ADDR_VAR 0 1
73239: PUSH
73240: LD_VAR 0 1
73244: PPUSH
73245: LD_VAR 0 4
73249: PPUSH
73250: CALL_OW 3
73254: ST_TO_ADDR
// end ;
73255: GO 73179
73257: POP
73258: POP
// end ;
73259: LD_VAR 0 2
73263: RET
// export function GetBaseMaterials ( base ) ; begin
73264: LD_INT 0
73266: PPUSH
// result := [ 0 , 0 , 0 ] ;
73267: LD_ADDR_VAR 0 2
73271: PUSH
73272: LD_INT 0
73274: PUSH
73275: LD_INT 0
73277: PUSH
73278: LD_INT 0
73280: PUSH
73281: EMPTY
73282: LIST
73283: LIST
73284: LIST
73285: ST_TO_ADDR
// if not base then
73286: LD_VAR 0 1
73290: NOT
73291: IFFALSE 73295
// exit ;
73293: GO 73344
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73295: LD_ADDR_VAR 0 2
73299: PUSH
73300: LD_VAR 0 1
73304: PPUSH
73305: LD_INT 1
73307: PPUSH
73308: CALL_OW 275
73312: PUSH
73313: LD_VAR 0 1
73317: PPUSH
73318: LD_INT 2
73320: PPUSH
73321: CALL_OW 275
73325: PUSH
73326: LD_VAR 0 1
73330: PPUSH
73331: LD_INT 3
73333: PPUSH
73334: CALL_OW 275
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: LIST
73343: ST_TO_ADDR
// end ;
73344: LD_VAR 0 2
73348: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73349: LD_INT 0
73351: PPUSH
73352: PPUSH
// result := array ;
73353: LD_ADDR_VAR 0 3
73357: PUSH
73358: LD_VAR 0 1
73362: ST_TO_ADDR
// if size > 0 then
73363: LD_VAR 0 2
73367: PUSH
73368: LD_INT 0
73370: GREATER
73371: IFFALSE 73417
// for i := array downto size do
73373: LD_ADDR_VAR 0 4
73377: PUSH
73378: DOUBLE
73379: LD_VAR 0 1
73383: INC
73384: ST_TO_ADDR
73385: LD_VAR 0 2
73389: PUSH
73390: FOR_DOWNTO
73391: IFFALSE 73415
// result := Delete ( result , result ) ;
73393: LD_ADDR_VAR 0 3
73397: PUSH
73398: LD_VAR 0 3
73402: PPUSH
73403: LD_VAR 0 3
73407: PPUSH
73408: CALL_OW 3
73412: ST_TO_ADDR
73413: GO 73390
73415: POP
73416: POP
// end ;
73417: LD_VAR 0 3
73421: RET
// export function ComExit ( unit ) ; var tmp ; begin
73422: LD_INT 0
73424: PPUSH
73425: PPUSH
// if not IsInUnit ( unit ) then
73426: LD_VAR 0 1
73430: PPUSH
73431: CALL_OW 310
73435: NOT
73436: IFFALSE 73440
// exit ;
73438: GO 73500
// tmp := IsInUnit ( unit ) ;
73440: LD_ADDR_VAR 0 3
73444: PUSH
73445: LD_VAR 0 1
73449: PPUSH
73450: CALL_OW 310
73454: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73455: LD_VAR 0 3
73459: PPUSH
73460: CALL_OW 247
73464: PUSH
73465: LD_INT 2
73467: EQUAL
73468: IFFALSE 73481
// ComExitVehicle ( unit ) else
73470: LD_VAR 0 1
73474: PPUSH
73475: CALL_OW 121
73479: GO 73490
// ComExitBuilding ( unit ) ;
73481: LD_VAR 0 1
73485: PPUSH
73486: CALL_OW 122
// result := tmp ;
73490: LD_ADDR_VAR 0 2
73494: PUSH
73495: LD_VAR 0 3
73499: ST_TO_ADDR
// end ;
73500: LD_VAR 0 2
73504: RET
// export function ResetHc ; begin
73505: LD_INT 0
73507: PPUSH
// InitHc ;
73508: CALL_OW 19
// hc_importance := 0 ;
73512: LD_ADDR_OWVAR 32
73516: PUSH
73517: LD_INT 0
73519: ST_TO_ADDR
// end ;
73520: LD_VAR 0 1
73524: RET
