// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4687 0 0
// PrepareRussianBase ;
  29: CALL 2976 0 0
// PrepareRussianCommander ;
  33: CALL 2927 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8306 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild = 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode = 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible = 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack = 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson = 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase = 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer = 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus = 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer = 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog = 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog = 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog = 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil = 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower = 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable = 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter = 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor = 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 40243 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 40243 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: LD_EXP 49
 585: PPUSH
 586: CALL 40243 0 3
 590: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 591: LD_ADDR_EXP 8
 595: PUSH
 596: LD_STRING Dickens
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: LD_EXP 49
 606: PPUSH
 607: CALL 40243 0 3
 611: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 612: LD_ADDR_EXP 9
 616: PUSH
 617: LD_STRING Woodruff
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_EXP 49
 627: PPUSH
 628: CALL 40243 0 3
 632: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 633: LD_ADDR_EXP 12
 637: PUSH
 638: LD_STRING Campell
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_EXP 49
 648: PPUSH
 649: CALL 40243 0 3
 653: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING Knight
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: LD_EXP 49
 669: PPUSH
 670: CALL 40243 0 3
 674: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 675: LD_ADDR_EXP 11
 679: PUSH
 680: LD_STRING Claptopn
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_EXP 49
 690: PPUSH
 691: CALL 40243 0 3
 695: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING Harisson
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: LD_EXP 49
 711: PPUSH
 712: CALL 40243 0 3
 716: ST_TO_ADDR
// if not Lisa then
 717: LD_EXP 4
 721: NOT
 722: IFFALSE 745
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 724: LD_ADDR_EXP 2
 728: PUSH
 729: LD_STRING Bobby
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_EXP 49
 739: PPUSH
 740: CALL 40243 0 3
 744: ST_TO_ADDR
// if not Lisa and not Bobby then
 745: LD_EXP 4
 749: NOT
 750: PUSH
 751: LD_EXP 2
 755: NOT
 756: AND
 757: IFFALSE 780
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 759: LD_ADDR_EXP 3
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_EXP 49
 774: PPUSH
 775: CALL 40243 0 3
 779: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 780: LD_EXP 4
 784: NOT
 785: PUSH
 786: LD_EXP 2
 790: NOT
 791: AND
 792: PUSH
 793: LD_EXP 3
 797: NOT
 798: AND
 799: IFFALSE 898
// begin tmp = CreateCharacterSet ( 03_others ) ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 31
 813: ST_TO_ADDR
// if tmp then
 814: LD_VAR 0 3
 818: IFFALSE 875
// begin RandomBeforeMission = tmp [ 1 ] ;
 820: LD_ADDR_EXP 6
 824: PUSH
 825: LD_VAR 0 3
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 834: LD_STRING 03_others
 836: PPUSH
 837: CALL_OW 40
// if tmp > 1 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: GREATER
 849: IFFALSE 873
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: DIFF
 865: PPUSH
 866: LD_STRING 03_others
 868: PPUSH
 869: CALL_OW 38
// end else
 873: GO 898
// begin PrepareHuman ( false , 1 , 3 ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: LD_INT 3
 883: PPUSH
 884: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 888: LD_ADDR_EXP 6
 892: PUSH
 893: CALL_OW 44
 897: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 4
 905: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 906: LD_ADDR_EXP 13
 910: PUSH
 911: LD_STRING Donaldson
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: LD_EXP 49
 921: PPUSH
 922: CALL 40243 0 3
 926: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Frank
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 40243 0 3
 947: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 32
 955: PPUSH
 956: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 960: LD_EXP 7
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 975: LD_EXP 7
 979: PPUSH
 980: LD_INT 32
 982: PPUSH
 983: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 987: LD_EXP 8
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1002: LD_EXP 9
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1017: LD_EXP 12
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1032: LD_EXP 10
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1047: LD_EXP 11
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 49
// if Lisa = false then
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1087: LD_EXP 2
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// if Lisa = false and Bobby = false then
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: PUSH
1111: LD_EXP 2
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1137: LD_EXP 4
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: PUSH
1146: LD_EXP 2
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: PUSH
1156: LD_EXP 3
1160: PUSH
1161: LD_INT 0
1163: EQUAL
1164: AND
1165: IFFALSE 1182
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1167: LD_EXP 6
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 49
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1187: LD_INT 0
1189: PPUSH
1190: PPUSH
1191: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1192: LD_EXP 13
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// if Frank then
1207: LD_EXP 5
1211: IFFALSE 1228
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1213: LD_EXP 5
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// uc_nation = 1 ;
1228: LD_ADDR_OWVAR 21
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// uc_side = 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// hc_class := 3 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING SecondCharsGal
1267: ST_TO_ADDR
// hc_face_number := 53 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 53
1275: ST_TO_ADDR
// hc_name := Freddie Warner ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Freddie Warner
1283: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 8
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 2
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 56 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 56
1401: ST_TO_ADDR
// hc_name := Mel Brennan ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Mel Brennan
1409: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 12
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// hc_class := 1 ;
1496: LD_ADDR_OWVAR 28
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_sex := sex_male ;
1504: LD_ADDR_OWVAR 27
1508: PUSH
1509: LD_INT 1
1511: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING AmGalRemake
1519: ST_TO_ADDR
// hc_face_number := 5 ;
1520: LD_ADDR_OWVAR 34
1524: PUSH
1525: LD_INT 5
1527: ST_TO_ADDR
// hc_name := Bob Joplin ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Bob Joplin
1535: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1536: LD_ADDR_OWVAR 29
1540: PUSH
1541: LD_INT 10
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1551: LD_ADDR_OWVAR 30
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1574: LD_ADDR_OWVAR 31
1578: PUSH
1579: LD_INT 3
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// un = CreateHuman ;
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: CALL_OW 44
1606: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1607: LD_VAR 0 3
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// hc_class := 3 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// hc_sex := sex_female ;
1630: LD_ADDR_OWVAR 27
1634: PUSH
1635: LD_INT 2
1637: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING AmGalRemake
1645: ST_TO_ADDR
// hc_face_number := 8 ;
1646: LD_ADDR_OWVAR 34
1650: PUSH
1651: LD_INT 8
1653: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1654: LD_ADDR_OWVAR 26
1658: PUSH
1659: LD_STRING Elizabeth Whitney
1661: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1662: LD_ADDR_OWVAR 29
1666: PUSH
1667: LD_INT 9
1669: PUSH
1670: LD_INT 11
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1677: LD_ADDR_OWVAR 30
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1700: LD_ADDR_OWVAR 31
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: LD_INT 4
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// un = CreateHuman ;
1723: LD_ADDR_VAR 0 3
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// InitHc ;
1748: CALL_OW 19
// end ;
1752: LD_VAR 0 1
1756: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
1761: PPUSH
1762: PPUSH
// uc_nation = 1 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// uc_side = 1 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 2
1786: ST_TO_ADDR
// vc_engine := engine_combustion ;
1787: LD_ADDR_OWVAR 39
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_control := control_manual ;
1795: LD_ADDR_OWVAR 38
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1803: LD_ADDR_OWVAR 41
1807: PUSH
1808: LD_INT 65
1810: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_OWVAR 67
1838: ARRAY
1839: ST_TO_ADDR
// veh := CreateVehicle ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 2
1857: PPUSH
1858: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: CALL_OW 428
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: IFFALSE 1898
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1878: LD_VAR 0 5
1882: PPUSH
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 48
1896: GO 1916
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1898: LD_VAR 0 5
1902: PPUSH
1903: LD_INT 23
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 48
// hc_class := 1 ;
1916: LD_ADDR_OWVAR 28
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_sex := sex_male ;
1924: LD_ADDR_OWVAR 27
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1932: LD_ADDR_OWVAR 33
1936: PUSH
1937: LD_STRING SecondCharsGal
1939: ST_TO_ADDR
// hc_face_number := 59 ;
1940: LD_ADDR_OWVAR 34
1944: PUSH
1945: LD_INT 59
1947: ST_TO_ADDR
// hc_name := Max Gray ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING Max Gray
1955: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 9
1963: PUSH
1964: LD_INT 11
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1971: LD_ADDR_OWVAR 30
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1994: LD_ADDR_OWVAR 31
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 0
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: ST_TO_ADDR
// un = CreateHuman ;
2017: LD_ADDR_VAR 0 4
2021: PUSH
2022: CALL_OW 44
2026: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_INT 11
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// hc_class := 2 ;
2042: LD_ADDR_OWVAR 28
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_sex := sex_male ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2058: LD_ADDR_OWVAR 33
2062: PUSH
2063: LD_STRING SecondCharsGal
2065: ST_TO_ADDR
// hc_face_number := 50 ;
2066: LD_ADDR_OWVAR 34
2070: PUSH
2071: LD_INT 50
2073: ST_TO_ADDR
// hc_name := Frank Hughes ;
2074: LD_ADDR_OWVAR 26
2078: PUSH
2079: LD_STRING Frank Hughes
2081: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2082: LD_ADDR_OWVAR 29
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: LD_INT 10
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2097: LD_ADDR_OWVAR 30
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 11
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// hc_class := 1 ;
2168: LD_ADDR_OWVAR 28
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_sex := sex_male ;
2176: LD_ADDR_OWVAR 27
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2184: LD_ADDR_OWVAR 33
2188: PUSH
2189: LD_STRING SecondCharsGal
2191: ST_TO_ADDR
// hc_face_number := 54 ;
2192: LD_ADDR_OWVAR 34
2196: PUSH
2197: LD_INT 54
2199: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_STRING Luigi Ghbellin
2207: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2208: LD_ADDR_OWVAR 29
2212: PUSH
2213: LD_INT 11
2215: PUSH
2216: LD_INT 11
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2223: LD_ADDR_OWVAR 30
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2246: LD_ADDR_OWVAR 31
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// un = CreateHuman ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: CALL_OW 44
2278: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2279: LD_VAR 0 4
2283: PPUSH
2284: LD_INT 11
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL_OW 49
// hc_class := 3 ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 3
2301: ST_TO_ADDR
// hc_sex := sex_male ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2310: LD_ADDR_OWVAR 33
2314: PUSH
2315: LD_STRING AmGalRemake
2317: ST_TO_ADDR
// hc_face_number := 6 ;
2318: LD_ADDR_OWVAR 34
2322: PUSH
2323: LD_INT 6
2325: ST_TO_ADDR
// hc_name := Leon Carter ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Leon Carter
2333: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2334: LD_ADDR_OWVAR 29
2338: PUSH
2339: LD_INT 10
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2349: LD_ADDR_OWVAR 30
2353: PUSH
2354: LD_INT 0
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2372: LD_ADDR_OWVAR 31
2376: PUSH
2377: LD_INT 0
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: ST_TO_ADDR
// un = CreateHuman ;
2395: LD_ADDR_VAR 0 4
2399: PUSH
2400: CALL_OW 44
2404: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2405: LD_VAR 0 4
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 52
// if count = 4 then
2419: LD_VAR 0 1
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2555
// begin hc_class := 1 ;
2429: LD_ADDR_OWVAR 28
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_sex := sex_male ;
2437: LD_ADDR_OWVAR 27
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING SecondCharsGal
2452: ST_TO_ADDR
// hc_face_number := 34 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 34
2460: ST_TO_ADDR
// hc_name := Ian Hill ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING Ian Hill
2468: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2469: LD_ADDR_OWVAR 29
2473: PUSH
2474: LD_INT 10
2476: PUSH
2477: LD_INT 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2484: LD_ADDR_OWVAR 30
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: LD_INT 0
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2507: LD_ADDR_OWVAR 31
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: ST_TO_ADDR
// un = CreateHuman ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: CALL_OW 44
2539: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2540: LD_VAR 0 4
2544: PPUSH
2545: LD_INT 11
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 49
// end ; if count = 5 then
2555: LD_VAR 0 1
2559: PUSH
2560: LD_INT 5
2562: EQUAL
2563: IFFALSE 2817
// begin hc_class := 1 ;
2565: LD_ADDR_OWVAR 28
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_sex := sex_male ;
2573: LD_ADDR_OWVAR 27
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2581: LD_ADDR_OWVAR 33
2585: PUSH
2586: LD_STRING SecondCharsGal
2588: ST_TO_ADDR
// hc_face_number := 34 ;
2589: LD_ADDR_OWVAR 34
2593: PUSH
2594: LD_INT 34
2596: ST_TO_ADDR
// hc_name := Ian Hill ;
2597: LD_ADDR_OWVAR 26
2601: PUSH
2602: LD_STRING Ian Hill
2604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2605: LD_ADDR_OWVAR 29
2609: PUSH
2610: LD_INT 10
2612: PUSH
2613: LD_INT 12
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2620: LD_ADDR_OWVAR 30
2624: PUSH
2625: LD_INT 1
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 0
2633: PUSH
2634: LD_INT 0
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2643: LD_ADDR_OWVAR 31
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: ST_TO_ADDR
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// hc_class := 1 ;
2691: LD_ADDR_OWVAR 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// hc_sex := sex_female ;
2699: LD_ADDR_OWVAR 27
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2707: LD_ADDR_OWVAR 33
2711: PUSH
2712: LD_STRING SecondCharsGal
2714: ST_TO_ADDR
// hc_face_number := 41 ;
2715: LD_ADDR_OWVAR 34
2719: PUSH
2720: LD_INT 41
2722: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2723: LD_ADDR_OWVAR 26
2727: PUSH
2728: LD_STRING Kate Wadsworth
2730: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2731: LD_ADDR_OWVAR 29
2735: PUSH
2736: LD_INT 9
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2746: LD_ADDR_OWVAR 30
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2769: LD_ADDR_OWVAR 31
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// un = CreateHuman ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 11
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2817: LD_INT 11
2819: PPUSH
2820: LD_INT 22
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 21
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 26
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 70
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2868: LD_INT 11
2870: PPUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 26
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 70
2910: PUSH
2911: LD_INT 1
2913: ARRAY
2914: PPUSH
2915: LD_STRING D6-Sol3-1
2917: PPUSH
2918: CALL_OW 88
// end ; end_of_file
2922: LD_VAR 0 2
2926: RET
// export function PrepareRussianCommander ; begin
2927: LD_INT 0
2929: PPUSH
// uc_side = 3 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// uc_nation = 3 ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Stolypin
2953: PPUSH
2954: CALL_OW 25
2958: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2959: LD_EXP 15
2963: PPUSH
2964: LD_INT 21
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: LD_VAR 0 1
2975: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// if Difficulty > 1 then
2982: LD_OWVAR 67
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3100
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := 3 ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// InitHc_All ( ) ;
3008: CALL_OW 584
// InitBc ;
3012: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3016: LD_INT 0
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL_OW 380
// bc_type := b_breastwork ;
3029: LD_ADDR_OWVAR 42
3033: PUSH
3034: LD_INT 31
3036: ST_TO_ADDR
// bc_level := 4 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 4
3044: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3045: LD_ADDR_VAR 0 3
3049: PUSH
3050: LD_INT 100
3052: PPUSH
3053: LD_INT 58
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 5
3081: PPUSH
3082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3086: LD_VAR 0 4
3090: PPUSH
3091: LD_VAR 0 3
3095: PPUSH
3096: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3100: LD_INT 3
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 22
3108: PPUSH
3109: LD_EXP 16
3113: PPUSH
3114: LD_EXP 17
3118: PPUSH
3119: CALL_OW 12
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 4
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 6
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_OWVAR 67
3149: ARRAY
3150: PPUSH
3151: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 21
3163: PPUSH
3164: LD_EXP 16
3168: PPUSH
3169: LD_EXP 17
3173: PPUSH
3174: CALL_OW 12
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: LD_EXP 16
3202: PPUSH
3203: LD_EXP 17
3207: PPUSH
3208: CALL_OW 12
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 24
3231: PPUSH
3232: LD_EXP 16
3236: PPUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 5
3252: PPUSH
3253: CALL 4353 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3332
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3294: LD_INT 3
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: LD_EXP 17
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL 4353 0 6
3330: GO 3291
3332: POP
3333: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 30
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: FOR_IN
3369: IFFALSE 3397
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL 4462 0 2
3395: GO 3368
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 1
3403: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 6 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 6
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// InitHC_All ( ) ;
3426: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: DOUBLE
3436: LD_INT 1
3438: DEC
3439: ST_TO_ADDR
3440: LD_INT 1
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: LD_INT 2
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_OWVAR 67
3462: ARRAY
3463: PUSH
3464: FOR_TO
3465: IFFALSE 3633
// begin vc_engine = 1 ;
3467: LD_ADDR_OWVAR 39
3471: PUSH
3472: LD_INT 1
3474: ST_TO_ADDR
// vc_control = 1 ;
3475: LD_ADDR_OWVAR 38
3479: PUSH
3480: LD_INT 1
3482: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3483: LD_ADDR_OWVAR 40
3487: PUSH
3488: LD_INT 42
3490: PUSH
3491: LD_INT 42
3493: PUSH
3494: LD_INT 43
3496: PUSH
3497: LD_INT 43
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: LD_OWVAR 67
3510: ARRAY
3511: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3512: LD_ADDR_OWVAR 37
3516: PUSH
3517: LD_INT 21
3519: PUSH
3520: LD_INT 22
3522: PUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 22
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_OWVAR 67
3539: ARRAY
3540: ST_TO_ADDR
// veh = CreateVehicle ;
3541: LD_ADDR_VAR 0 3
3545: PUSH
3546: CALL_OW 45
3550: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_INT 3
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// hc_gallery =  ;
3566: LD_ADDR_OWVAR 33
3570: PUSH
3571: LD_STRING 
3573: ST_TO_ADDR
// hc_name =  ;
3574: LD_ADDR_OWVAR 26
3578: PUSH
3579: LD_STRING 
3581: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3582: LD_INT 0
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: LD_EXP 16
3592: PPUSH
3593: LD_EXP 17
3597: PPUSH
3598: CALL_OW 12
3602: PPUSH
3603: CALL_OW 380
// un = CreateHuman ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: CALL_OW 44
3616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3617: LD_VAR 0 4
3621: PPUSH
3622: LD_VAR 0 3
3626: PPUSH
3627: CALL_OW 52
// end ;
3631: GO 3464
3633: POP
3634: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3635: LD_INT 0
3637: PPUSH
3638: LD_INT 2
3640: PPUSH
3641: LD_EXP 16
3645: PPUSH
3646: LD_EXP 17
3650: PPUSH
3651: CALL_OW 12
3655: PUSH
3656: LD_INT 2
3658: PLUS
3659: PPUSH
3660: CALL_OW 380
// un = CreateHuman ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3689: LD_INT 0
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_EXP 16
3699: PPUSH
3700: LD_EXP 17
3704: PPUSH
3705: CALL_OW 12
3709: PUSH
3710: LD_INT 2
3712: PLUS
3713: PPUSH
3714: CALL_OW 380
// un = CreateHuman ;
3718: LD_ADDR_VAR 0 4
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3728: LD_VAR 0 4
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 2
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_OWVAR 67
3775: ARRAY
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 3
3782: PPUSH
3783: CALL_OW 12
3787: PLUS
3788: PUSH
3789: FOR_TO
3790: IFFALSE 3860
// begin hc_gallery =  ;
3792: LD_ADDR_OWVAR 33
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// hc_name =  ;
3800: LD_ADDR_OWVAR 26
3804: PUSH
3805: LD_STRING 
3807: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_EXP 16
3818: PPUSH
3819: LD_EXP 17
3823: PPUSH
3824: CALL_OW 12
3828: PPUSH
3829: CALL_OW 380
// un = CreateHuman ;
3833: LD_ADDR_VAR 0 4
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3843: LD_VAR 0 4
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 49
// end ;
3858: GO 3789
3860: POP
3861: POP
// vc_engine = 1 ;
3862: LD_ADDR_OWVAR 39
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// vc_control = 1 ;
3870: LD_ADDR_OWVAR 38
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// vc_weapon = 51 ;
3878: LD_ADDR_OWVAR 40
3882: PUSH
3883: LD_INT 51
3885: ST_TO_ADDR
// vc_chassis = 22 ;
3886: LD_ADDR_OWVAR 37
3890: PUSH
3891: LD_INT 22
3893: ST_TO_ADDR
// veh = CreateVehicle ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 100
3929: PPUSH
3930: CALL_OW 290
// hc_gallery =  ;
3934: LD_ADDR_OWVAR 33
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// hc_name =  ;
3942: LD_ADDR_OWVAR 26
3946: PUSH
3947: LD_STRING 
3949: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: LD_EXP 16
3960: PPUSH
3961: LD_EXP 17
3965: PPUSH
3966: CALL_OW 12
3970: PPUSH
3971: CALL_OW 380
// un = CreateHuman ;
3975: LD_ADDR_VAR 0 4
3979: PUSH
3980: CALL_OW 44
3984: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3985: LD_VAR 0 4
3989: PPUSH
3990: LD_VAR 0 3
3994: PPUSH
3995: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3999: LD_ADDR_VAR 0 2
4003: PUSH
4004: LD_INT 22
4006: PUSH
4007: LD_INT 6
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: LD_INT 25
4022: PUSH
4023: LD_INT 2
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 69
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4085
// ComAgressiveMove ( i , 45 , 46 ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_INT 45
4075: PPUSH
4076: LD_INT 46
4078: PPUSH
4079: CALL_OW 114
4083: GO 4065
4085: POP
4086: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_INT 22
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 25
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 69
4120: PUSH
4121: FOR_IN
4122: IFFALSE 4153
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4124: LD_ADDR_EXP 21
4128: PUSH
4129: LD_VAR 0 2
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: LD_INT 48
4139: PPUSH
4140: LD_INT 55
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: CALL_OW 145
4150: ST_TO_ADDR
4151: GO 4121
4153: POP
4154: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4155: LD_ADDR_VAR 0 2
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 6
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 69
4188: PUSH
4189: FOR_IN
4190: IFFALSE 4209
// ComMoveXY ( i , 39 , 55 ) ;
4192: LD_VAR 0 2
4196: PPUSH
4197: LD_INT 39
4199: PPUSH
4200: LD_INT 55
4202: PPUSH
4203: CALL_OW 111
4207: GO 4189
4209: POP
4210: POP
// end ;
4211: LD_VAR 0 1
4215: RET
// export function PrepareFirstAttack ; var i , un ; begin
4216: LD_INT 0
4218: PPUSH
4219: PPUSH
4220: PPUSH
// uc_side = 5 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 5
4228: ST_TO_ADDR
// uc_nation = 3 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 3
4236: ST_TO_ADDR
// for i := 1 to 4 do
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: DOUBLE
4243: LD_INT 1
4245: DEC
4246: ST_TO_ADDR
4247: LD_INT 4
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4338
// begin InitHC_All ( ) ;
4253: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4257: LD_INT 0
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_EXP 16
4267: PPUSH
4268: LD_EXP 17
4272: PPUSH
4273: CALL_OW 12
4277: PPUSH
4278: CALL_OW 380
// un = CreateHuman ;
4282: LD_ADDR_VAR 0 3
4286: PUSH
4287: CALL_OW 44
4291: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4292: LD_VAR 0 3
4296: PPUSH
4297: LD_INT 4
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_EXP 1
4316: PPUSH
4317: CALL_OW 250
4321: PPUSH
4322: LD_EXP 1
4326: PPUSH
4327: CALL_OW 251
4331: PPUSH
4332: CALL_OW 114
// end ;
4336: GO 4250
4338: POP
4339: POP
// firstRussianAttack = 1 ;
4340: LD_ADDR_EXP 23
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// end ; end_of_file
4348: LD_VAR 0 1
4352: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4353: LD_INT 0
4355: PPUSH
4356: PPUSH
4357: PPUSH
// for i = 1 to count do
4358: LD_ADDR_VAR 0 8
4362: PUSH
4363: DOUBLE
4364: LD_INT 1
4366: DEC
4367: ST_TO_ADDR
4368: LD_VAR 0 6
4372: PUSH
4373: FOR_TO
4374: IFFALSE 4455
// begin uc_side = side ;
4376: LD_ADDR_OWVAR 20
4380: PUSH
4381: LD_VAR 0 1
4385: ST_TO_ADDR
// uc_nation = nation ;
4386: LD_ADDR_OWVAR 21
4390: PUSH
4391: LD_VAR 0 2
4395: ST_TO_ADDR
// hc_gallery =  ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING 
4403: ST_TO_ADDR
// hc_name =  ;
4404: LD_ADDR_OWVAR 26
4408: PUSH
4409: LD_STRING 
4411: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4412: LD_INT 0
4414: PPUSH
4415: LD_VAR 0 5
4419: PPUSH
4420: LD_VAR 0 4
4424: PPUSH
4425: CALL_OW 380
// un = CreateHuman ;
4429: LD_ADDR_VAR 0 9
4433: PUSH
4434: CALL_OW 44
4438: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4439: LD_VAR 0 9
4443: PPUSH
4444: LD_VAR 0 3
4448: PPUSH
4449: CALL_OW 52
// end ;
4453: GO 4373
4455: POP
4456: POP
// end ;
4457: LD_VAR 0 7
4461: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4462: LD_INT 0
4464: PPUSH
4465: PPUSH
4466: PPUSH
// uc_side := GetSide ( b ) ;
4467: LD_ADDR_OWVAR 20
4471: PUSH
4472: LD_VAR 0 2
4476: PPUSH
4477: CALL_OW 255
4481: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4482: LD_ADDR_OWVAR 21
4486: PUSH
4487: LD_VAR 0 2
4491: PPUSH
4492: CALL_OW 248
4496: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4497: LD_INT 0
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 380
// un = CreateHuman ;
4512: LD_ADDR_VAR 0 4
4516: PUSH
4517: CALL_OW 44
4521: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4522: LD_ADDR_VAR 0 5
4526: PUSH
4527: LD_VAR 0 2
4531: PPUSH
4532: CALL_OW 254
4536: PUSH
4537: LD_INT 3
4539: MINUS
4540: ST_TO_ADDR
// if dir < 0 then
4541: LD_VAR 0 5
4545: PUSH
4546: LD_INT 0
4548: LESS
4549: IFFALSE 4565
// dir := 6 + dir ;
4551: LD_ADDR_VAR 0 5
4555: PUSH
4556: LD_INT 6
4558: PUSH
4559: LD_VAR 0 5
4563: PLUS
4564: ST_TO_ADDR
// SetDir ( un , dir ) ;
4565: LD_VAR 0 4
4569: PPUSH
4570: LD_VAR 0 5
4574: PPUSH
4575: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: LD_VAR 0 2
4588: PPUSH
4589: CALL_OW 52
// end ;
4593: LD_VAR 0 3
4597: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4598: LD_INT 0
4600: PPUSH
4601: PPUSH
4602: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4603: LD_ADDR_VAR 0 6
4607: PUSH
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: PPUSH
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 12
4625: ARRAY
4626: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4627: LD_VAR 0 6
4631: PPUSH
4632: CALL_OW 258
4636: PUSH
4637: LD_INT 1
4639: EQUAL
4640: IFFALSE 4658
// Say ( speaker , dialogMID ) else
4642: LD_VAR 0 6
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: CALL_OW 88
4656: GO 4672
// Say ( speaker , dialogFID ) ;
4658: LD_VAR 0 6
4662: PPUSH
4663: LD_VAR 0 3
4667: PPUSH
4668: CALL_OW 88
// result := speaker ;
4672: LD_ADDR_VAR 0 4
4676: PUSH
4677: LD_VAR 0 6
4681: ST_TO_ADDR
// end ;
4682: LD_VAR 0 4
4686: RET
// export function PrepareDifficulty ; var tmp ; begin
4687: LD_INT 0
4689: PPUSH
4690: PPUSH
// if Difficulty = 1 then
4691: LD_OWVAR 67
4695: PUSH
4696: LD_INT 1
4698: EQUAL
4699: IFFALSE 4717
// begin RuSoldMinLevel = 1 ;
4701: LD_ADDR_EXP 16
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4709: LD_ADDR_EXP 17
4713: PUSH
4714: LD_INT 2
4716: ST_TO_ADDR
// end ; if Difficulty = 2 then
4717: LD_OWVAR 67
4721: PUSH
4722: LD_INT 2
4724: EQUAL
4725: IFFALSE 4826
// begin RuSoldMinLevel = 2 ;
4727: LD_ADDR_EXP 16
4731: PUSH
4732: LD_INT 2
4734: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4735: LD_ADDR_EXP 17
4739: PUSH
4740: LD_INT 3
4742: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4743: LD_INT 23
4745: PPUSH
4746: CALL_OW 64
// uc_nation = 3 ;
4750: LD_ADDR_OWVAR 21
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// uc_side = 3 ;
4758: LD_ADDR_OWVAR 20
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// bc_level = 5 ;
4766: LD_ADDR_OWVAR 43
4770: PUSH
4771: LD_INT 5
4773: ST_TO_ADDR
// bc_type = 32 ;
4774: LD_ADDR_OWVAR 42
4778: PUSH
4779: LD_INT 32
4781: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: LD_INT 76
4789: PPUSH
4790: LD_INT 91
4792: PPUSH
4793: LD_INT 2
4795: PPUSH
4796: CALL_OW 47
4800: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4801: LD_VAR 0 2
4805: PPUSH
4806: LD_INT 43
4808: PPUSH
4809: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4813: LD_INT 51
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 322
// end ; if Difficulty >= 3 then
4826: LD_OWVAR 67
4830: PUSH
4831: LD_INT 3
4833: GREATEREQUAL
4834: IFFALSE 4998
// begin RuSoldMinLevel = Difficulty ;
4836: LD_ADDR_EXP 16
4840: PUSH
4841: LD_OWVAR 67
4845: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4846: LD_ADDR_EXP 17
4850: PUSH
4851: LD_INT 4
4853: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4854: LD_INT 26
4856: PPUSH
4857: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4861: LD_INT 23
4863: PPUSH
4864: CALL_OW 64
// uc_nation = 3 ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// uc_side = 3 ;
4876: LD_ADDR_OWVAR 20
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// bc_level = 5 ;
4884: LD_ADDR_OWVAR 43
4888: PUSH
4889: LD_INT 5
4891: ST_TO_ADDR
// bc_type = 32 ;
4892: LD_ADDR_OWVAR 42
4896: PUSH
4897: LD_INT 32
4899: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4900: LD_ADDR_VAR 0 2
4904: PUSH
4905: LD_INT 76
4907: PPUSH
4908: LD_INT 91
4910: PPUSH
4911: LD_INT 2
4913: PPUSH
4914: CALL_OW 47
4918: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_INT 44
4926: PPUSH
4927: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4931: LD_ADDR_VAR 0 2
4935: PUSH
4936: LD_INT 83
4938: PPUSH
4939: LD_INT 84
4941: PPUSH
4942: LD_INT 2
4944: PPUSH
4945: CALL_OW 47
4949: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4950: LD_VAR 0 2
4954: PPUSH
4955: LD_INT 43
4957: PPUSH
4958: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4962: LD_INT 51
4964: PPUSH
4965: LD_INT 3
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4975: LD_INT 52
4977: PPUSH
4978: LD_INT 3
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4988: LD_INT 25
4990: PPUSH
4991: LD_INT 44
4993: PPUSH
4994: CALL_OW 431
// end ; end ;
4998: LD_VAR 0 1
5002: RET
// export function EnergyDialog ; begin
5003: LD_INT 0
5005: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5006: LD_INT 46
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: CALL_OW 321
5016: PUSH
5017: LD_INT 1
5019: EQUAL
5020: PUSH
5021: LD_INT 35
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 321
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: AND
5036: IFFALSE 5060
// begin Say ( JMM , D9c-JMM-1 ) ;
5038: LD_EXP 1
5042: PPUSH
5043: LD_STRING D9c-JMM-1
5045: PPUSH
5046: CALL_OW 88
// energyVDialog = 1 ;
5050: LD_ADDR_EXP 33
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// end else
5058: GO 5214
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5060: LD_INT 35
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 321
5070: PUSH
5071: LD_INT 2
5073: EQUAL
5074: PUSH
5075: LD_EXP 33
5079: PUSH
5080: LD_INT 0
5082: EQUAL
5083: AND
5084: IFFALSE 5106
// begin Say ( JMM , D9c-JMM-1a ) ;
5086: LD_EXP 1
5090: PPUSH
5091: LD_STRING D9c-JMM-1a
5093: PPUSH
5094: CALL_OW 88
// energyVDialog = 1 ;
5098: LD_ADDR_EXP 33
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5106: LD_INT 46
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: CALL_OW 321
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: PUSH
5121: LD_EXP 33
5125: PUSH
5126: LD_INT 0
5128: EQUAL
5129: AND
5130: IFFALSE 5152
// begin Say ( JMM , D9c-JMM-1b ) ;
5132: LD_EXP 1
5136: PPUSH
5137: LD_STRING D9c-JMM-1b
5139: PPUSH
5140: CALL_OW 88
// energyVDialog = 1 ;
5144: LD_ADDR_EXP 33
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5152: LD_INT 46
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 321
5162: PUSH
5163: LD_INT 2
5165: EQUAL
5166: PUSH
5167: LD_INT 21
5169: PPUSH
5170: LD_INT 1
5172: PPUSH
5173: CALL_OW 321
5177: PUSH
5178: LD_INT 2
5180: EQUAL
5181: AND
5182: PUSH
5183: LD_EXP 33
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: AND
5192: IFFALSE 5214
// begin Say ( JMM , D9c-JMM-1c ) ;
5194: LD_EXP 1
5198: PPUSH
5199: LD_STRING D9c-JMM-1c
5201: PPUSH
5202: CALL_OW 88
// energyVDialog = 1 ;
5206: LD_ADDR_EXP 33
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ; end ; end ;
5214: LD_VAR 0 1
5218: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5226: LD_VAR 0 1
5230: NOT
5231: PUSH
5232: LD_VAR 0 1
5236: PPUSH
5237: CALL_OW 256
5241: PUSH
5242: LD_INT 250
5244: LESS
5245: OR
5246: PUSH
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 314
5256: PUSH
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 261
5266: PUSH
5267: LD_INT 20
5269: GREATER
5270: AND
5271: OR
5272: IFFALSE 5276
// exit ;
5274: GO 5641
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5276: LD_VAR 0 1
5280: PPUSH
5281: CALL_OW 261
5285: PUSH
5286: LD_INT 20
5288: LESS
5289: PUSH
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 110
5299: PUSH
5300: LD_INT 21
5302: EQUAL
5303: NOT
5304: AND
5305: IFFALSE 5332
// begin ComStop ( bulldozer ) ;
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_INT 21
5323: PPUSH
5324: CALL_OW 109
// exit ;
5328: GO 5641
// end else
5330: GO 5359
// if GetFuel ( bulldozer ) > 20 then
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 261
5341: PUSH
5342: LD_INT 20
5344: GREATER
5345: IFFALSE 5359
// SetTag ( bulldozer , 0 ) ;
5347: LD_VAR 0 1
5351: PPUSH
5352: LD_INT 0
5354: PPUSH
5355: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5359: LD_ADDR_VAR 0 5
5363: PUSH
5364: LD_VAR 0 2
5368: PPUSH
5369: CALL_OW 353
5373: ST_TO_ADDR
// tmp := [ ] ;
5374: LD_ADDR_VAR 0 6
5378: PUSH
5379: EMPTY
5380: ST_TO_ADDR
// for i = 1 to list do
5381: LD_ADDR_VAR 0 4
5385: PUSH
5386: DOUBLE
5387: LD_INT 1
5389: DEC
5390: ST_TO_ADDR
5391: LD_VAR 0 5
5395: PUSH
5396: FOR_TO
5397: IFFALSE 5495
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5399: LD_VAR 0 5
5403: PUSH
5404: LD_VAR 0 4
5408: ARRAY
5409: PUSH
5410: LD_INT 1
5412: ARRAY
5413: PPUSH
5414: LD_VAR 0 5
5418: PUSH
5419: LD_VAR 0 4
5423: ARRAY
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: PPUSH
5429: CALL_OW 554
5433: IFFALSE 5493
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5435: LD_ADDR_VAR 0 6
5439: PUSH
5440: LD_VAR 0 6
5444: PPUSH
5445: LD_VAR 0 6
5449: PUSH
5450: LD_INT 1
5452: PLUS
5453: PPUSH
5454: LD_VAR 0 5
5458: PUSH
5459: LD_VAR 0 4
5463: ARRAY
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PUSH
5469: LD_VAR 0 5
5473: PUSH
5474: LD_VAR 0 4
5478: ARRAY
5479: PUSH
5480: LD_INT 2
5482: ARRAY
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PPUSH
5488: CALL_OW 1
5492: ST_TO_ADDR
// end ;
5493: GO 5396
5495: POP
5496: POP
// ComStop ( bulldozer ) ;
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5506: LD_ADDR_VAR 0 7
5510: PUSH
5511: LD_VAR 0 1
5515: PPUSH
5516: CALL_OW 250
5520: PUSH
5521: LD_VAR 0 1
5525: PPUSH
5526: CALL_OW 251
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: ST_TO_ADDR
// for i = tmp downto 1 do
5535: LD_ADDR_VAR 0 4
5539: PUSH
5540: DOUBLE
5541: LD_VAR 0 6
5545: INC
5546: ST_TO_ADDR
5547: LD_INT 1
5549: PUSH
5550: FOR_DOWNTO
5551: IFFALSE 5639
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5553: LD_ADDR_VAR 0 7
5557: PUSH
5558: LD_VAR 0 7
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: PPUSH
5567: LD_VAR 0 7
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: LD_VAR 0 6
5580: PPUSH
5581: CALL 5742 0 3
5585: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5586: LD_VAR 0 1
5590: PPUSH
5591: LD_VAR 0 7
5595: PUSH
5596: LD_INT 1
5598: ARRAY
5599: PPUSH
5600: LD_VAR 0 7
5604: PUSH
5605: LD_INT 2
5607: ARRAY
5608: PPUSH
5609: CALL 5646 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: LD_VAR 0 6
5622: PPUSH
5623: LD_VAR 0 7
5627: PUSH
5628: LD_INT 3
5630: ARRAY
5631: PPUSH
5632: CALL_OW 3
5636: ST_TO_ADDR
// end ;
5637: GO 5550
5639: POP
5640: POP
// end ;
5641: LD_VAR 0 3
5645: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5646: LD_INT 0
5648: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5649: LD_VAR 0 2
5653: PPUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: CALL_OW 351
5663: PUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: CALL_OW 554
5678: AND
5679: PUSH
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: CALL_OW 488
5694: AND
5695: PUSH
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 428
5710: PUSH
5711: LD_INT 1
5713: NEG
5714: EQUAL
5715: AND
5716: IFFALSE 5737
// AddComMoveXY ( bulldozer , x , y ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_VAR 0 3
5732: PPUSH
5733: CALL_OW 171
// end ;
5737: LD_VAR 0 4
5741: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
5749: PPUSH
5750: PPUSH
// dist := 99999 ;
5751: LD_ADDR_VAR 0 6
5755: PUSH
5756: LD_INT 99999
5758: ST_TO_ADDR
// for i = 1 to list do
5759: LD_ADDR_VAR 0 5
5763: PUSH
5764: DOUBLE
5765: LD_INT 1
5767: DEC
5768: ST_TO_ADDR
5769: LD_VAR 0 3
5773: PUSH
5774: FOR_TO
5775: IFFALSE 5913
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5777: LD_ADDR_VAR 0 7
5781: PUSH
5782: LD_VAR 0 1
5786: PPUSH
5787: LD_VAR 0 2
5791: PPUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_VAR 0 5
5801: ARRAY
5802: PUSH
5803: LD_INT 1
5805: ARRAY
5806: PPUSH
5807: LD_VAR 0 3
5811: PUSH
5812: LD_VAR 0 5
5816: ARRAY
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PPUSH
5822: CALL_OW 298
5826: ST_TO_ADDR
// if d = 0 then
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 0
5834: EQUAL
5835: IFFALSE 5839
// continue ;
5837: GO 5774
// if d < dist then
5839: LD_VAR 0 7
5843: PUSH
5844: LD_VAR 0 6
5848: LESS
5849: IFFALSE 5911
// begin _x := list [ i ] [ 1 ] ;
5851: LD_ADDR_VAR 0 8
5855: PUSH
5856: LD_VAR 0 3
5860: PUSH
5861: LD_VAR 0 5
5865: ARRAY
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5871: LD_ADDR_VAR 0 9
5875: PUSH
5876: LD_VAR 0 3
5880: PUSH
5881: LD_VAR 0 5
5885: ARRAY
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: ST_TO_ADDR
// _i := i ;
5891: LD_ADDR_VAR 0 10
5895: PUSH
5896: LD_VAR 0 5
5900: ST_TO_ADDR
// dist := d ;
5901: LD_ADDR_VAR 0 6
5905: PUSH
5906: LD_VAR 0 7
5910: ST_TO_ADDR
// end ; end ;
5911: GO 5774
5913: POP
5914: POP
// result := [ _x , _y , _i , dist ] ;
5915: LD_ADDR_VAR 0 4
5919: PUSH
5920: LD_VAR 0 8
5924: PUSH
5925: LD_VAR 0 9
5929: PUSH
5930: LD_VAR 0 10
5934: PUSH
5935: LD_VAR 0 6
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: ST_TO_ADDR
// end ;
5946: LD_VAR 0 4
5950: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// for i = 1 to 72 do
5955: LD_ADDR_VAR 0 5
5959: PUSH
5960: DOUBLE
5961: LD_INT 1
5963: DEC
5964: ST_TO_ADDR
5965: LD_INT 72
5967: PUSH
5968: FOR_TO
5969: IFFALSE 6023
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5971: LD_VAR 0 5
5975: PPUSH
5976: LD_VAR 0 1
5980: PPUSH
5981: CALL_OW 321
5985: PUSH
5986: LD_INT 1
5988: EQUAL
5989: PUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: LD_VAR 0 3
5999: PPUSH
6000: CALL_OW 482
6004: AND
6005: IFFALSE 6021
// AddComResearch ( lab , i ) ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 5
6016: PPUSH
6017: CALL_OW 184
6021: GO 5968
6023: POP
6024: POP
// end ;
6025: LD_VAR 0 4
6029: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
6036: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6037: LD_ADDR_VAR 0 7
6041: PUSH
6042: LD_VAR 0 2
6046: PPUSH
6047: CALL_OW 313
6051: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6052: LD_ADDR_VAR 0 8
6056: PUSH
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_INT 22
6064: PUSH
6065: LD_VAR 0 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 2
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 24
6086: PUSH
6087: LD_INT 750
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: LD_INT 54
6099: PUSH
6100: EMPTY
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 70
6117: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6118: LD_ADDR_VAR 0 5
6122: PUSH
6123: LD_VAR 0 3
6127: PPUSH
6128: LD_INT 22
6130: PUSH
6131: LD_VAR 0 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 21
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: LD_INT 24
6155: PUSH
6156: LD_INT 1000
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: EMPTY
6173: LIST
6174: PPUSH
6175: CALL_OW 70
6179: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6180: LD_VAR 0 5
6184: NOT
6185: PUSH
6186: LD_INT 22
6188: PUSH
6189: LD_VAR 0 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 24
6210: PUSH
6211: LD_INT 250
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: PPUSH
6223: CALL_OW 69
6227: NOT
6228: AND
6229: IFFALSE 6233
// exit ;
6231: GO 6329
// if buildingsList and engineerOkInside then
6233: LD_VAR 0 5
6237: PUSH
6238: LD_VAR 0 7
6242: AND
6243: IFFALSE 6269
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6245: LD_VAR 0 7
6249: PPUSH
6250: LD_INT 25
6252: PUSH
6253: LD_INT 2
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 72
6264: PPUSH
6265: CALL_OW 122
// if buildingsList and engineerOkOutside then
6269: LD_VAR 0 5
6273: PUSH
6274: LD_VAR 0 8
6278: AND
6279: IFFALSE 6299
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6299: LD_VAR 0 5
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: PUSH
6308: LD_VAR 0 8
6312: AND
6313: IFFALSE 6329
// ComEnterUnit ( engineerOkOutside , building ) ;
6315: LD_VAR 0 8
6319: PPUSH
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL_OW 120
// end ;
6329: LD_VAR 0 4
6333: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6343: LD_ADDR_VAR 0 6
6347: PUSH
6348: LD_INT 22
6350: PUSH
6351: LD_VAR 0 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 23
6372: PUSH
6373: LD_INT 2
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 251
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6401: LD_ADDR_VAR 0 7
6405: PUSH
6406: LD_VAR 0 3
6410: PPUSH
6411: LD_INT 22
6413: PUSH
6414: LD_VAR 0 1
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 23
6425: PUSH
6426: LD_INT 2
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 25
6435: PUSH
6436: LD_INT 4
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 50
6445: PUSH
6446: EMPTY
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PPUSH
6455: CALL_OW 70
6459: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6460: LD_ADDR_VAR 0 8
6464: PUSH
6465: LD_VAR 0 3
6469: PPUSH
6470: LD_INT 22
6472: PUSH
6473: LD_VAR 0 1
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 21
6484: PUSH
6485: LD_INT 1
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 3
6494: PUSH
6495: LD_INT 25
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 24
6514: PUSH
6515: LD_INT 750
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: PPUSH
6532: CALL_OW 70
6536: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6537: LD_ADDR_VAR 0 9
6541: PUSH
6542: LD_VAR 0 2
6546: PPUSH
6547: LD_INT 22
6549: PUSH
6550: LD_VAR 0 1
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 21
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 25
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 3
6588: PUSH
6589: LD_INT 24
6591: PUSH
6592: LD_INT 1000
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: PPUSH
6609: CALL_OW 70
6613: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6614: LD_VAR 0 8
6618: NOT
6619: PUSH
6620: LD_VAR 0 9
6624: NOT
6625: AND
6626: PUSH
6627: LD_VAR 0 6
6631: NOT
6632: AND
6633: IFFALSE 6637
// exit ;
6635: GO 6843
// if damageUnits and sciList then
6637: LD_VAR 0 8
6641: PUSH
6642: LD_VAR 0 6
6646: AND
6647: IFFALSE 6663
// ComMoveToArea ( damageUnits , healArea ) ;
6649: LD_VAR 0 8
6653: PPUSH
6654: LD_VAR 0 2
6658: PPUSH
6659: CALL_OW 113
// if unitsToHeal and sciList then
6663: LD_VAR 0 9
6667: PUSH
6668: LD_VAR 0 6
6672: AND
6673: IFFALSE 6684
// ComExitBuilding ( sciList ) ;
6675: LD_VAR 0 6
6679: PPUSH
6680: CALL_OW 122
// if unitsToHeal and sciListOutside then
6684: LD_VAR 0 9
6688: PUSH
6689: LD_VAR 0 7
6693: AND
6694: IFFALSE 6714
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6696: LD_VAR 0 7
6700: PPUSH
6701: LD_VAR 0 9
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: PPUSH
6710: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6714: LD_VAR 0 8
6718: PUSH
6719: LD_INT 0
6721: EQUAL
6722: PUSH
6723: LD_VAR 0 9
6727: PUSH
6728: LD_INT 0
6730: EQUAL
6731: AND
6732: PUSH
6733: LD_VAR 0 7
6737: AND
6738: IFFALSE 6843
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6740: LD_ADDR_VAR 0 10
6744: PUSH
6745: LD_INT 22
6747: PUSH
6748: LD_VAR 0 1
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 21
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 8
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 69
6786: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6787: LD_ADDR_VAR 0 11
6791: PUSH
6792: LD_INT 1
6794: PPUSH
6795: LD_VAR 0 10
6799: PPUSH
6800: CALL_OW 12
6804: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6805: LD_VAR 0 7
6809: PPUSH
6810: LD_INT 3
6812: PUSH
6813: LD_INT 60
6815: PUSH
6816: EMPTY
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PPUSH
6823: CALL_OW 72
6827: PPUSH
6828: LD_VAR 0 10
6832: PUSH
6833: LD_VAR 0 11
6837: ARRAY
6838: PPUSH
6839: CALL_OW 120
// end ; end ;
6843: LD_VAR 0 5
6847: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6852: LD_INT 22
6854: PUSH
6855: LD_VAR 0 1
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 21
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 69
6882: PUSH
6883: LD_VAR 0 3
6887: LESSEQUAL
6888: IFFALSE 6955
// for i = 1 to vehCount do
6890: LD_ADDR_VAR 0 9
6894: PUSH
6895: DOUBLE
6896: LD_INT 1
6898: DEC
6899: ST_TO_ADDR
6900: LD_VAR 0 3
6904: PUSH
6905: FOR_TO
6906: IFFALSE 6953
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6908: LD_VAR 0 2
6912: PPUSH
6913: LD_VAR 0 7
6917: PPUSH
6918: LD_VAR 0 5
6922: PPUSH
6923: LD_VAR 0 6
6927: PPUSH
6928: LD_VAR 0 4
6932: PUSH
6933: LD_INT 1
6935: PPUSH
6936: LD_VAR 0 4
6940: PPUSH
6941: CALL_OW 12
6945: ARRAY
6946: PPUSH
6947: CALL_OW 185
6951: GO 6905
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 8
6959: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
// for i = 1 to medicCount do
6973: LD_ADDR_VAR 0 11
6977: PUSH
6978: DOUBLE
6979: LD_INT 1
6981: DEC
6982: ST_TO_ADDR
6983: LD_VAR 0 4
6987: PUSH
6988: FOR_TO
6989: IFFALSE 7059
// begin uc_side = side ;
6991: LD_ADDR_OWVAR 20
6995: PUSH
6996: LD_VAR 0 1
7000: ST_TO_ADDR
// uc_nation = nation ;
7001: LD_ADDR_OWVAR 21
7005: PUSH
7006: LD_VAR 0 2
7010: ST_TO_ADDR
// InitHC_All ( ) ;
7011: CALL_OW 584
// PrepareHuman ( false , 4 , skil ) ;
7015: LD_INT 0
7017: PPUSH
7018: LD_INT 4
7020: PPUSH
7021: LD_VAR 0 5
7025: PPUSH
7026: CALL_OW 380
// un = CreateHuman ;
7030: LD_ADDR_VAR 0 13
7034: PUSH
7035: CALL_OW 44
7039: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7040: LD_VAR 0 13
7044: PPUSH
7045: LD_VAR 0 6
7049: PPUSH
7050: LD_INT 0
7052: PPUSH
7053: CALL_OW 49
// end ;
7057: GO 6988
7059: POP
7060: POP
// for i = 1 to soldierCount do
7061: LD_ADDR_VAR 0 11
7065: PUSH
7066: DOUBLE
7067: LD_INT 1
7069: DEC
7070: ST_TO_ADDR
7071: LD_VAR 0 3
7075: PUSH
7076: FOR_TO
7077: IFFALSE 7147
// begin uc_side = side ;
7079: LD_ADDR_OWVAR 20
7083: PUSH
7084: LD_VAR 0 1
7088: ST_TO_ADDR
// uc_nation = nation ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_VAR 0 2
7098: ST_TO_ADDR
// InitHC_All ( ) ;
7099: CALL_OW 584
// PrepareHuman ( false , 1 , skil ) ;
7103: LD_INT 0
7105: PPUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_VAR 0 5
7113: PPUSH
7114: CALL_OW 380
// un = CreateHuman ;
7118: LD_ADDR_VAR 0 13
7122: PUSH
7123: CALL_OW 44
7127: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7128: LD_VAR 0 13
7132: PPUSH
7133: LD_VAR 0 6
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7076
7147: POP
7148: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7149: LD_ADDR_VAR 0 16
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 1
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 25
7201: PUSH
7202: LD_INT 9
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7225: LD_ADDR_VAR 0 15
7229: PUSH
7230: LD_INT 22
7232: PUSH
7233: LD_VAR 0 1
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 4
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 69
7260: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7261: LD_VAR 0 15
7265: PPUSH
7266: LD_VAR 0 7
7270: PPUSH
7271: CALL_OW 113
// if strategy = 1 then
7275: LD_VAR 0 9
7279: PUSH
7280: LD_INT 1
7282: EQUAL
7283: IFFALSE 7731
// begin for i in soldiersOK_list do
7285: LD_ADDR_VAR 0 11
7289: PUSH
7290: LD_VAR 0 16
7294: PUSH
7295: FOR_IN
7296: IFFALSE 7360
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7298: LD_VAR 0 11
7302: PPUSH
7303: LD_INT 91
7305: PPUSH
7306: LD_INT 63
7308: PPUSH
7309: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7313: LD_VAR 0 11
7317: PPUSH
7318: LD_INT 101
7320: PPUSH
7321: LD_INT 53
7323: PPUSH
7324: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7328: LD_VAR 0 11
7332: PPUSH
7333: LD_INT 75
7335: PPUSH
7336: LD_INT 23
7338: PPUSH
7339: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7343: LD_VAR 0 11
7347: PPUSH
7348: LD_INT 78
7350: PPUSH
7351: LD_INT 8
7353: PPUSH
7354: CALL_OW 174
// end ;
7358: GO 7295
7360: POP
7361: POP
// wait ( 0 0$30 ) ;
7362: LD_INT 1050
7364: PPUSH
7365: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7369: LD_INT 35
7371: PPUSH
7372: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7376: LD_ADDR_VAR 0 14
7380: PUSH
7381: LD_INT 22
7383: PUSH
7384: LD_VAR 0 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: LD_INT 24
7401: PUSH
7402: LD_INT 550
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 24
7415: PUSH
7416: LD_INT 250
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7437: LD_ADDR_VAR 0 16
7441: PUSH
7442: LD_INT 22
7444: PUSH
7445: LD_VAR 0 1
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 25
7456: PUSH
7457: LD_INT 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 24
7466: PUSH
7467: LD_INT 1000
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: PPUSH
7479: CALL_OW 69
7483: ST_TO_ADDR
// if medicCount then
7484: LD_VAR 0 4
7488: IFFALSE 7528
// begin if damageUnit_list then
7490: LD_VAR 0 14
7494: IFFALSE 7528
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7496: LD_VAR 0 14
7500: PPUSH
7501: LD_VAR 0 7
7505: PPUSH
7506: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_VAR 0 14
7519: PUSH
7520: LD_INT 1
7522: ARRAY
7523: PPUSH
7524: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7528: LD_ADDR_VAR 0 11
7532: PUSH
7533: LD_VAR 0 16
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7715
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7541: LD_ADDR_VAR 0 19
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_VAR 0 8
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 69
7562: PPUSH
7563: LD_VAR 0 11
7567: PPUSH
7568: CALL_OW 74
7572: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7573: LD_ADDR_VAR 0 20
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 2
7592: PUSH
7593: LD_INT 59
7595: PUSH
7596: EMPTY
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 1
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 21
7611: PUSH
7612: LD_INT 2
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: PPUSH
7632: CALL_OW 69
7636: PPUSH
7637: LD_VAR 0 11
7641: PPUSH
7642: CALL_OW 74
7646: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7647: LD_VAR 0 11
7651: PPUSH
7652: LD_VAR 0 19
7656: PPUSH
7657: CALL_OW 296
7661: PUSH
7662: LD_INT 8
7664: PLUS
7665: PUSH
7666: LD_VAR 0 11
7670: PPUSH
7671: LD_VAR 0 20
7675: PPUSH
7676: CALL_OW 296
7680: LESS
7681: IFFALSE 7699
// ComAttackUnit ( i , target1 ) else
7683: LD_VAR 0 11
7687: PPUSH
7688: LD_VAR 0 19
7692: PPUSH
7693: CALL_OW 115
7697: GO 7713
// ComAttackUnit ( i , target2 ) ;
7699: LD_VAR 0 11
7703: PPUSH
7704: LD_VAR 0 20
7708: PPUSH
7709: CALL_OW 115
// end ;
7713: GO 7538
7715: POP
7716: POP
// until not soldiersOK_list and not damageUnit_list ;
7717: LD_VAR 0 16
7721: NOT
7722: PUSH
7723: LD_VAR 0 14
7727: NOT
7728: AND
7729: IFFALSE 7369
// end ; if strategy = 2 then
7731: LD_VAR 0 9
7735: PUSH
7736: LD_INT 2
7738: EQUAL
7739: IFFALSE 8157
// begin for i in soldiersOK_list do
7741: LD_ADDR_VAR 0 11
7745: PUSH
7746: LD_VAR 0 16
7750: PUSH
7751: FOR_IN
7752: IFFALSE 7786
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7754: LD_VAR 0 11
7758: PPUSH
7759: LD_INT 91
7761: PPUSH
7762: LD_INT 63
7764: PPUSH
7765: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7769: LD_VAR 0 11
7773: PPUSH
7774: LD_INT 75
7776: PPUSH
7777: LD_INT 33
7779: PPUSH
7780: CALL_OW 174
// end ;
7784: GO 7751
7786: POP
7787: POP
// wait ( 0 0$10 ) ;
7788: LD_INT 350
7790: PPUSH
7791: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7795: LD_INT 105
7797: PPUSH
7798: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7802: LD_ADDR_VAR 0 14
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: LD_INT 24
7827: PUSH
7828: LD_INT 550
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 24
7841: PUSH
7842: LD_INT 250
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 69
7862: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7863: LD_ADDR_VAR 0 16
7867: PUSH
7868: LD_INT 22
7870: PUSH
7871: LD_VAR 0 1
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 25
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 24
7892: PUSH
7893: LD_INT 1000
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: PPUSH
7905: CALL_OW 69
7909: ST_TO_ADDR
// if medicCount then
7910: LD_VAR 0 4
7914: IFFALSE 7954
// begin if damageUnit_list then
7916: LD_VAR 0 14
7920: IFFALSE 7954
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7922: LD_VAR 0 14
7926: PPUSH
7927: LD_VAR 0 7
7931: PPUSH
7932: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7936: LD_VAR 0 4
7940: PPUSH
7941: LD_VAR 0 14
7945: PUSH
7946: LD_INT 1
7948: ARRAY
7949: PPUSH
7950: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7954: LD_ADDR_VAR 0 11
7958: PUSH
7959: LD_VAR 0 16
7963: PUSH
7964: FOR_IN
7965: IFFALSE 8141
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7967: LD_ADDR_VAR 0 19
7971: PUSH
7972: LD_INT 22
7974: PUSH
7975: LD_VAR 0 8
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PPUSH
7984: CALL_OW 69
7988: PPUSH
7989: LD_VAR 0 11
7993: PPUSH
7994: CALL_OW 74
7998: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7999: LD_ADDR_VAR 0 20
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 8
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: LD_INT 59
8021: PUSH
8022: EMPTY
8023: LIST
8024: PUSH
8025: LD_INT 21
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: LD_INT 21
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: PPUSH
8058: CALL_OW 69
8062: PPUSH
8063: LD_VAR 0 11
8067: PPUSH
8068: CALL_OW 74
8072: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8073: LD_VAR 0 11
8077: PPUSH
8078: LD_VAR 0 19
8082: PPUSH
8083: CALL_OW 296
8087: PUSH
8088: LD_INT 8
8090: PLUS
8091: PUSH
8092: LD_VAR 0 11
8096: PPUSH
8097: LD_VAR 0 20
8101: PPUSH
8102: CALL_OW 296
8106: LESS
8107: IFFALSE 8125
// ComAttackUnit ( i , target1 ) else
8109: LD_VAR 0 11
8113: PPUSH
8114: LD_VAR 0 19
8118: PPUSH
8119: CALL_OW 115
8123: GO 8139
// ComAttackUnit ( i , target2 ) ;
8125: LD_VAR 0 11
8129: PPUSH
8130: LD_VAR 0 20
8134: PPUSH
8135: CALL_OW 115
// end ;
8139: GO 7964
8141: POP
8142: POP
// until not soldiersOK_list and not damageUnit_list ;
8143: LD_VAR 0 16
8147: NOT
8148: PUSH
8149: LD_VAR 0 14
8153: NOT
8154: AND
8155: IFFALSE 7795
// end ; if medic_list then
8157: LD_VAR 0 15
8161: IFFALSE 8301
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8163: LD_ADDR_VAR 0 15
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_VAR 0 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 25
8182: PUSH
8183: LD_INT 4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 50
8192: PUSH
8193: EMPTY
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8206: LD_INT 35
8208: PPUSH
8209: CALL_OW 67
// for i in medic_list do
8213: LD_ADDR_VAR 0 11
8217: PUSH
8218: LD_VAR 0 15
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8292
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8226: LD_VAR 0 11
8230: PPUSH
8231: CALL_OW 314
8235: NOT
8236: PUSH
8237: LD_VAR 0 11
8241: PPUSH
8242: LD_INT 4
8244: PPUSH
8245: CALL_OW 308
8249: NOT
8250: AND
8251: IFFALSE 8267
// ComMoveToArea ( i , RussianAttack ) else
8253: LD_VAR 0 11
8257: PPUSH
8258: LD_INT 4
8260: PPUSH
8261: CALL_OW 113
8265: GO 8290
// if IsInArea ( i , RussianAttack ) then
8267: LD_VAR 0 11
8271: PPUSH
8272: LD_INT 4
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8290
// RemoveUnit ( i ) ;
8281: LD_VAR 0 11
8285: PPUSH
8286: CALL_OW 64
8290: GO 8223
8292: POP
8293: POP
// until not medic_list ;
8294: LD_VAR 0 15
8298: NOT
8299: IFFALSE 8163
// end ; end ; end_of_file
8301: LD_VAR 0 10
8305: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8306: LD_INT 0
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
// InGameOn ;
8313: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8317: LD_ADDR_VAR 0 3
8321: PUSH
8322: LD_EXP 8
8326: PUSH
8327: LD_EXP 9
8331: PUSH
8332: LD_EXP 10
8336: PUSH
8337: LD_EXP 11
8341: PUSH
8342: LD_EXP 12
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8354: LD_ADDR_VAR 0 4
8358: PUSH
8359: LD_INT 46
8361: PUSH
8362: LD_INT 45
8364: PUSH
8365: LD_INT 44
8367: PUSH
8368: LD_INT 43
8370: PUSH
8371: LD_INT 42
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8381: LD_ADDR_VAR 0 5
8385: PUSH
8386: LD_INT 14
8388: PUSH
8389: LD_INT 12
8391: PUSH
8392: LD_INT 10
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 6
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8408: LD_EXP 11
8412: PPUSH
8413: LD_INT 31
8415: PPUSH
8416: LD_INT 59
8418: PPUSH
8419: LD_INT 19
8421: PPUSH
8422: LD_INT 5
8424: PPUSH
8425: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8429: LD_INT 32
8431: PPUSH
8432: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8436: LD_INT 32
8438: PPUSH
8439: LD_INT 51
8441: PPUSH
8442: LD_INT 26
8444: PPUSH
8445: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8449: LD_INT 32
8451: PPUSH
8452: LD_INT 53
8454: PPUSH
8455: LD_INT 23
8457: PPUSH
8458: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8462: LD_INT 32
8464: PPUSH
8465: LD_INT 52
8467: PPUSH
8468: LD_INT 19
8470: PPUSH
8471: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8475: LD_INT 35
8477: PPUSH
8478: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8482: LD_INT 32
8484: PPUSH
8485: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8489: LD_INT 32
8491: PPUSH
8492: CALL_OW 250
8496: PUSH
8497: LD_INT 52
8499: EQUAL
8500: PUSH
8501: LD_INT 32
8503: PPUSH
8504: CALL_OW 251
8508: PUSH
8509: LD_INT 19
8511: EQUAL
8512: AND
8513: IFFALSE 8475
// ComExitVehicle ( JMM ) ;
8515: LD_EXP 1
8519: PPUSH
8520: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8524: LD_EXP 7
8528: PPUSH
8529: LD_EXP 1
8533: PPUSH
8534: CALL_OW 119
// wait ( 0 0$01 ) ;
8538: LD_INT 35
8540: PPUSH
8541: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8545: LD_EXP 1
8549: PPUSH
8550: LD_INT 46
8552: PPUSH
8553: LD_INT 10
8555: PPUSH
8556: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8560: LD_EXP 1
8564: PPUSH
8565: LD_EXP 7
8569: PPUSH
8570: CALL_OW 179
// wait ( 0 0$4 ) ;
8574: LD_INT 140
8576: PPUSH
8577: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8581: LD_EXP 1
8585: PPUSH
8586: LD_STRING D1-JMM-1
8588: PPUSH
8589: CALL_OW 88
// if not dialogue_skipped then
8593: LD_OWVAR 59
8597: NOT
8598: IFFALSE 9255
// begin for i := 1 to gammaSquad do
8600: LD_ADDR_VAR 0 2
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 3
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8677
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8618: LD_VAR 0 3
8622: PUSH
8623: LD_VAR 0 2
8627: ARRAY
8628: PPUSH
8629: LD_VAR 0 4
8633: PUSH
8634: LD_VAR 0 2
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 5
8644: PUSH
8645: LD_VAR 0 2
8649: ARRAY
8650: PPUSH
8651: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8655: LD_VAR 0 3
8659: PUSH
8660: LD_VAR 0 2
8664: ARRAY
8665: PPUSH
8666: LD_EXP 1
8670: PPUSH
8671: CALL_OW 179
// end ;
8675: GO 8615
8677: POP
8678: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8679: LD_EXP 4
8683: PPUSH
8684: LD_INT 41
8686: PPUSH
8687: LD_INT 4
8689: PPUSH
8690: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8694: LD_EXP 4
8698: PPUSH
8699: LD_EXP 1
8703: PPUSH
8704: CALL_OW 179
// if Lisa = false and Bobby then
8708: LD_EXP 4
8712: PUSH
8713: LD_INT 0
8715: EQUAL
8716: PUSH
8717: LD_EXP 2
8721: AND
8722: IFFALSE 8753
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8724: LD_EXP 2
8728: PPUSH
8729: LD_INT 41
8731: PPUSH
8732: LD_INT 4
8734: PPUSH
8735: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8739: LD_EXP 2
8743: PPUSH
8744: LD_EXP 1
8748: PPUSH
8749: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8753: LD_EXP 4
8757: PUSH
8758: LD_INT 0
8760: EQUAL
8761: PUSH
8762: LD_EXP 2
8766: PUSH
8767: LD_INT 0
8769: EQUAL
8770: AND
8771: PUSH
8772: LD_EXP 3
8776: AND
8777: IFFALSE 8808
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8779: LD_EXP 3
8783: PPUSH
8784: LD_INT 41
8786: PPUSH
8787: LD_INT 4
8789: PPUSH
8790: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8794: LD_EXP 3
8798: PPUSH
8799: LD_EXP 1
8803: PPUSH
8804: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8808: LD_EXP 4
8812: PUSH
8813: LD_INT 0
8815: EQUAL
8816: PUSH
8817: LD_EXP 2
8821: PUSH
8822: LD_INT 0
8824: EQUAL
8825: AND
8826: PUSH
8827: LD_EXP 3
8831: PUSH
8832: LD_INT 0
8834: EQUAL
8835: AND
8836: IFFALSE 8867
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8838: LD_EXP 6
8842: PPUSH
8843: LD_INT 41
8845: PPUSH
8846: LD_INT 4
8848: PPUSH
8849: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8853: LD_EXP 6
8857: PPUSH
8858: LD_EXP 1
8862: PPUSH
8863: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8867: LD_EXP 7
8871: PPUSH
8872: LD_STRING D1-Brown-1
8874: PPUSH
8875: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8879: LD_EXP 1
8883: PPUSH
8884: LD_STRING D1-JMM-2
8886: PPUSH
8887: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8891: LD_EXP 7
8895: PPUSH
8896: LD_STRING D1-Brown-2
8898: PPUSH
8899: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8903: LD_EXP 1
8907: PPUSH
8908: LD_EXP 9
8912: PPUSH
8913: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8917: LD_EXP 9
8921: PPUSH
8922: LD_STRING D1-FSol1-2
8924: PPUSH
8925: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8929: LD_EXP 1
8933: PPUSH
8934: LD_EXP 8
8938: PPUSH
8939: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8943: LD_EXP 8
8947: PPUSH
8948: LD_STRING D1-Sol2-2
8950: PPUSH
8951: CALL_OW 88
// if Lisa then
8955: LD_EXP 4
8959: IFFALSE 8999
// begin ComTurnUnit ( JMM , Lisa ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_EXP 4
8970: PPUSH
8971: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8975: LD_EXP 4
8979: PPUSH
8980: LD_STRING D1-Lisa-2
8982: PPUSH
8983: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8987: LD_EXP 1
8991: PPUSH
8992: LD_STRING D1-JMM-3
8994: PPUSH
8995: CALL_OW 88
// end ; if Bobby then
8999: LD_EXP 2
9003: IFFALSE 9043
// begin ComTurnUnit ( JMM , Bobby ) ;
9005: LD_EXP 1
9009: PPUSH
9010: LD_EXP 2
9014: PPUSH
9015: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9019: LD_EXP 2
9023: PPUSH
9024: LD_STRING D1-Bobby-2
9026: PPUSH
9027: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9031: LD_EXP 1
9035: PPUSH
9036: LD_STRING D1-JMM-3
9038: PPUSH
9039: CALL_OW 88
// end ; if Cyrus then
9043: LD_EXP 3
9047: IFFALSE 9087
// begin ComTurnUnit ( JMM , Cyrus ) ;
9049: LD_EXP 1
9053: PPUSH
9054: LD_EXP 3
9058: PPUSH
9059: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9063: LD_EXP 3
9067: PPUSH
9068: LD_STRING D1-Cyrus-2
9070: PPUSH
9071: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9075: LD_EXP 1
9079: PPUSH
9080: LD_STRING D1-JMM-3
9082: PPUSH
9083: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9087: LD_EXP 1
9091: PPUSH
9092: LD_EXP 7
9096: PPUSH
9097: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9101: LD_EXP 1
9105: PPUSH
9106: LD_STRING D1-JMM-3a
9108: PPUSH
9109: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9113: LD_EXP 7
9117: PPUSH
9118: LD_INT 38
9120: PPUSH
9121: LD_INT 5
9123: PPUSH
9124: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9128: LD_EXP 7
9132: PPUSH
9133: LD_EXP 1
9137: PPUSH
9138: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9142: LD_EXP 1
9146: PPUSH
9147: LD_INT 40
9149: PPUSH
9150: LD_INT 7
9152: PPUSH
9153: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_EXP 7
9166: PPUSH
9167: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9171: LD_EXP 7
9175: PPUSH
9176: LD_STRING D1-Brown-3
9178: PPUSH
9179: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9183: LD_EXP 14
9187: PPUSH
9188: LD_STRING D1-Har-3
9190: PPUSH
9191: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9195: LD_EXP 1
9199: PPUSH
9200: LD_STRING D1-JMM-4
9202: PPUSH
9203: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9207: LD_EXP 14
9211: PPUSH
9212: LD_STRING D1-Har-4
9214: PPUSH
9215: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9219: LD_EXP 1
9223: PPUSH
9224: LD_STRING D1-JMM-5
9226: PPUSH
9227: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9231: LD_EXP 14
9235: PPUSH
9236: LD_STRING D1-Har-5
9238: PPUSH
9239: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9243: LD_EXP 1
9247: PPUSH
9248: LD_STRING D1-JMM-6
9250: PPUSH
9251: CALL_OW 88
// end ; InGameOff ;
9255: CALL_OW 9
// PrepareRussianConvoy ;
9259: CALL 3404 0 0
// ChangeMissionObjectives ( M1 ) ;
9263: LD_STRING M1
9265: PPUSH
9266: CALL_OW 337
// SaveForQuickRestart ;
9270: CALL_OW 22
// timerStatus = 1 ;
9274: LD_ADDR_EXP 29
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// startTimer = 1 ;
9282: LD_ADDR_EXP 30
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// bonusAvalaible = 1 ;
9290: LD_ADDR_EXP 44
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9298: LD_INT 105
9300: PPUSH
9301: CALL_OW 67
// DialogueOn ;
9305: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9309: LD_EXP 12
9313: PPUSH
9314: LD_STRING D9-Mech1-1
9316: PPUSH
9317: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9321: LD_EXP 1
9325: PPUSH
9326: LD_STRING D9-JMM-1
9328: PPUSH
9329: CALL_OW 88
// DialogueOff ;
9333: CALL_OW 7
// end ;
9337: LD_VAR 0 1
9341: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9342: LD_INT 47
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 321
9352: PUSH
9353: LD_INT 2
9355: EQUAL
9356: PUSH
9357: LD_EXP 31
9361: NOT
9362: AND
9363: PUSH
9364: LD_INT 22
9366: PUSH
9367: LD_INT 1
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 21
9376: PUSH
9377: LD_INT 3
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 30
9386: PUSH
9387: LD_INT 3
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 57
9396: PUSH
9397: EMPTY
9398: LIST
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 69
9410: AND
9411: IFFALSE 9645
9413: GO 9415
9415: DISABLE
// begin factoryDialog := true ;
9416: LD_ADDR_EXP 31
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// if IsOk ( Campell ) then
9424: LD_EXP 12
9428: PPUSH
9429: CALL_OW 302
9433: IFFALSE 9449
// Say ( Campell , D10-Mech1-1 ) else
9435: LD_EXP 12
9439: PPUSH
9440: LD_STRING D10-Mech1-1
9442: PPUSH
9443: CALL_OW 88
9447: GO 9645
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9449: LD_INT 22
9451: PUSH
9452: LD_INT 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 21
9461: PUSH
9462: LD_INT 1
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 25
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 26
9481: PUSH
9482: LD_INT 1
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: PUSH
9500: LD_EXP 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: DIFF
9508: IFFALSE 9582
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9510: LD_INT 22
9512: PUSH
9513: LD_INT 1
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 21
9522: PUSH
9523: LD_INT 1
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 25
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 26
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: PUSH
9561: LD_EXP 1
9565: PUSH
9566: EMPTY
9567: LIST
9568: DIFF
9569: PPUSH
9570: LD_STRING D10-Mech1-1
9572: PPUSH
9573: LD_STRING D10-Mech1-1
9575: PPUSH
9576: CALL 4598 0 3
9580: GO 9645
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9582: LD_INT 22
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 26
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 1
9619: ARRAY
9620: PPUSH
9621: CALL_OW 69
9625: PUSH
9626: LD_EXP 1
9630: PUSH
9631: EMPTY
9632: LIST
9633: DIFF
9634: PPUSH
9635: LD_STRING D10-Mech1-1
9637: PPUSH
9638: LD_STRING D10-Mech1-1
9640: PPUSH
9641: CALL 4598 0 3
// end ; end ;
9645: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9646: LD_INT 22
9648: PUSH
9649: LD_INT 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 30
9658: PUSH
9659: LD_INT 32
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 69
9674: PUSH
9675: LD_EXP 32
9679: PUSH
9680: LD_INT 0
9682: EQUAL
9683: AND
9684: IFFALSE 9920
9686: GO 9688
9688: DISABLE
// begin if IsOk ( Claptopn ) then
9689: LD_EXP 11
9693: PPUSH
9694: CALL_OW 302
9698: IFFALSE 9714
// Say ( Claptopn , D9b-Eng1-1 ) else
9700: LD_EXP 11
9704: PPUSH
9705: LD_STRING D9b-Eng1-1
9707: PPUSH
9708: CALL_OW 88
9712: GO 9906
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9714: LD_INT 22
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 21
9726: PUSH
9727: LD_INT 1
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 25
9736: PUSH
9737: LD_INT 3
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 26
9746: PUSH
9747: LD_INT 1
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PPUSH
9760: CALL_OW 69
9764: PUSH
9765: LD_EXP 1
9769: PUSH
9770: EMPTY
9771: LIST
9772: DIFF
9773: IFFALSE 9847
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9775: LD_INT 22
9777: PUSH
9778: LD_INT 1
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 21
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 25
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 26
9807: PUSH
9808: LD_INT 1
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 69
9825: PUSH
9826: LD_EXP 1
9830: PUSH
9831: EMPTY
9832: LIST
9833: DIFF
9834: PPUSH
9835: LD_STRING D9b-Eng1-1
9837: PPUSH
9838: LD_STRING D9b-Eng1-11
9840: PPUSH
9841: CALL 4598 0 3
9845: GO 9906
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9847: LD_INT 22
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 21
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 26
9869: PUSH
9870: LD_INT 1
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 69
9886: PUSH
9887: LD_EXP 1
9891: PUSH
9892: EMPTY
9893: LIST
9894: DIFF
9895: PPUSH
9896: LD_STRING D9b-Eng1-1
9898: PPUSH
9899: LD_STRING D9b-Eng1-1
9901: PPUSH
9902: CALL 4598 0 3
// end ; if energyVDialog = 0 then
9906: LD_EXP 33
9910: PUSH
9911: LD_INT 0
9913: EQUAL
9914: IFFALSE 9920
// EnergyDialog ;
9916: CALL 5003 0 0
// end ;
9920: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9921: LD_EXP 34
9925: PUSH
9926: LD_INT 1
9928: EQUAL
9929: PUSH
9930: LD_EXP 35
9934: PUSH
9935: LD_INT 1
9937: EQUAL
9938: AND
9939: IFFALSE 9951
9941: GO 9943
9943: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9944: LD_STRING M1a
9946: PPUSH
9947: CALL_OW 337
9951: END
// every 3 3$0 do
9952: GO 9954
9954: DISABLE
// PrepareFirstAttack ;
9955: CALL 4216 0 0
9959: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9960: LD_INT 22
9962: PUSH
9963: LD_INT 5
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 21
9972: PUSH
9973: LD_INT 1
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 3
9982: PUSH
9983: LD_INT 24
9985: PUSH
9986: LD_INT 250
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 69
10006: PUSH
10007: LD_INT 0
10009: GREATER
10010: PUSH
10011: LD_EXP 23
10015: PUSH
10016: LD_INT 1
10018: EQUAL
10019: AND
10020: IFFALSE 10321
10022: GO 10024
10024: DISABLE
10025: LD_INT 0
10027: PPUSH
// begin firstRussianAttack = 2 ;
10028: LD_ADDR_EXP 23
10032: PUSH
10033: LD_INT 2
10035: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10036: LD_INT 22
10038: PUSH
10039: LD_INT 5
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 21
10048: PUSH
10049: LD_INT 1
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 69
10064: PPUSH
10065: LD_INT 125
10067: PPUSH
10068: LD_INT 98
10070: PPUSH
10071: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10075: LD_INT 22
10077: PUSH
10078: LD_INT 1
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 21
10087: PUSH
10088: LD_INT 1
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: LD_EXP 1
10108: PUSH
10109: LD_EXP 7
10113: PUSH
10114: LD_EXP 4
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: DIFF
10124: PPUSH
10125: LD_STRING DAtt1-Sol1-1
10127: PPUSH
10128: LD_STRING DAtt1-FSol1-1
10130: PPUSH
10131: CALL 4598 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10135: LD_EXP 1
10139: PPUSH
10140: LD_STRING DAtt1-JMM-1
10142: PPUSH
10143: CALL_OW 88
// if Lisa then
10147: LD_EXP 4
10151: IFFALSE 10167
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10153: LD_EXP 4
10157: PPUSH
10158: LD_STRING DAtt1a-Lisa-1
10160: PPUSH
10161: CALL_OW 88
10165: GO 10238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10167: LD_INT 22
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 1
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 26
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PUSH
10207: LD_EXP 1
10211: PUSH
10212: LD_EXP 7
10216: PUSH
10217: LD_EXP 4
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: DIFF
10227: PPUSH
10228: LD_STRING DAtt1a-Sol1-1
10230: PPUSH
10231: LD_STRING DAtt1-FSol1-1
10233: PPUSH
10234: CALL 4598 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10238: LD_EXP 1
10242: PPUSH
10243: LD_STRING DAtt1a-JMM-1
10245: PPUSH
10246: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10250: LD_INT 22
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 26
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 69
10289: PUSH
10290: LD_EXP 1
10294: PUSH
10295: LD_EXP 7
10299: PUSH
10300: LD_EXP 4
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: DIFF
10310: PPUSH
10311: LD_STRING DAtt1b-Sol1-1
10313: PPUSH
10314: LD_STRING DAtt1a-Sol1-1
10316: PPUSH
10317: CALL 4598 0 3
// end ;
10321: PPOPN 1
10323: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10324: LD_EXP 23
10328: PUSH
10329: LD_INT 2
10331: EQUAL
10332: PUSH
10333: LD_INT 5
10335: PPUSH
10336: LD_INT 22
10338: PUSH
10339: LD_INT 5
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 21
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PPUSH
10360: CALL_OW 70
10364: AND
10365: IFFALSE 10423
10367: GO 10369
10369: DISABLE
10370: LD_INT 0
10372: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10373: LD_ADDR_VAR 0 1
10377: PUSH
10378: LD_INT 22
10380: PUSH
10381: LD_INT 5
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 21
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PPUSH
10402: CALL_OW 69
10406: PUSH
10407: FOR_IN
10408: IFFALSE 10421
// RemoveUnit ( i ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL_OW 64
10419: GO 10407
10421: POP
10422: POP
// end ;
10423: PPOPN 1
10425: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10426: LD_INT 22
10428: PUSH
10429: LD_INT 5
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: PPUSH
10439: CALL_OW 69
10443: PUSH
10444: LD_INT 0
10446: EQUAL
10447: PUSH
10448: LD_EXP 23
10452: PUSH
10453: LD_INT 2
10455: EQUAL
10456: AND
10457: IFFALSE 10470
10459: GO 10461
10461: DISABLE
// firstRussianAttack = 3 ;
10462: LD_ADDR_EXP 23
10466: PUSH
10467: LD_INT 3
10469: ST_TO_ADDR
10470: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10471: LD_EXP 28
10475: PUSH
10476: LD_INT 0
10478: EQUAL
10479: IFFALSE 10560
10481: GO 10483
10483: DISABLE
// begin timerStatus = 4 ;
10484: LD_ADDR_EXP 29
10488: PUSH
10489: LD_INT 4
10491: ST_TO_ADDR
// DialogueOn ;
10492: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10496: LD_EXP 13
10500: PPUSH
10501: LD_STRING D2-Don-1
10503: PPUSH
10504: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10508: LD_EXP 1
10512: PPUSH
10513: LD_STRING D2-JMM-1
10515: PPUSH
10516: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10520: LD_EXP 13
10524: PPUSH
10525: LD_STRING D2-Don-2
10527: PPUSH
10528: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10532: LD_EXP 1
10536: PPUSH
10537: LD_STRING D2-JMM-2
10539: PPUSH
10540: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10544: LD_EXP 13
10548: PPUSH
10549: LD_STRING D2-Don-3
10551: PPUSH
10552: CALL_OW 94
// DialogueOff ;
10556: CALL_OW 7
// end ;
10560: END
// every 12 12$0 do var tmp ;
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
// begin PrepareDonaldsonArmy ;
10567: CALL 1187 0 0
// CenterNowOnUnits ( Donaldson ) ;
10571: LD_EXP 13
10575: PPUSH
10576: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10580: LD_INT 22
10582: PUSH
10583: LD_INT 6
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: NOT
10595: IFFALSE 10611
// begin wait ( 3 ) ;
10597: LD_INT 3
10599: PPUSH
10600: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10604: LD_STRING ACH_BASE
10606: PPUSH
10607: CALL_OW 543
// end ; tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
10611: LD_ADDR_VAR 0 1
10615: PUSH
10616: LD_INT 22
10618: PUSH
10619: LD_INT 4
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 26
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: PPUSH
10651: CALL_OW 69
10655: PUSH
10656: LD_EXP 5
10660: PUSH
10661: EMPTY
10662: LIST
10663: DIFF
10664: ST_TO_ADDR
// DialogueOn ;
10665: CALL_OW 6
// tmp := tmp diff DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10669: LD_ADDR_VAR 0 1
10673: PUSH
10674: LD_VAR 0 1
10678: PUSH
10679: LD_VAR 0 1
10683: PPUSH
10684: LD_STRING D3-Sol1-1
10686: PPUSH
10687: LD_STRING D3-Sol1-1
10689: PPUSH
10690: CALL 4598 0 3
10694: DIFF
10695: ST_TO_ADDR
// DialogRandom ( tmp , D3-Sol2-1 , D3-Sol2-1 ) ;
10696: LD_VAR 0 1
10700: PPUSH
10701: LD_STRING D3-Sol2-1
10703: PPUSH
10704: LD_STRING D3-Sol2-1
10706: PPUSH
10707: CALL 4598 0 3
// if Frank then
10711: LD_EXP 5
10715: IFFALSE 10729
// Say ( Frank , D3-Frank-1 ) ;
10717: LD_EXP 5
10721: PPUSH
10722: LD_STRING D3-Frank-1
10724: PPUSH
10725: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10729: LD_EXP 13
10733: PPUSH
10734: LD_STRING D3-Don-1
10736: PPUSH
10737: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10741: LD_EXP 13
10745: PPUSH
10746: LD_STRING D3-Don-1a
10748: PPUSH
10749: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10753: LD_EXP 1
10757: PPUSH
10758: LD_STRING D3-JMM-1
10760: PPUSH
10761: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10765: LD_EXP 13
10769: PPUSH
10770: LD_STRING D3-Don-2
10772: PPUSH
10773: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10777: LD_INT 22
10779: PUSH
10780: LD_INT 6
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 21
10789: PUSH
10790: LD_INT 1
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PPUSH
10801: CALL_OW 69
10805: IFFALSE 10943
// begin Say ( JMM , D3-JMM-2 ) ;
10807: LD_EXP 1
10811: PPUSH
10812: LD_STRING D3-JMM-2
10814: PPUSH
10815: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10819: LD_EXP 13
10823: PPUSH
10824: LD_STRING D3-Don-3
10826: PPUSH
10827: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10831: LD_EXP 1
10835: PPUSH
10836: LD_STRING D3-JMM-3
10838: PPUSH
10839: CALL_OW 88
// if IsOK ( Frank ) then
10843: LD_EXP 5
10847: PPUSH
10848: CALL_OW 302
10852: IFFALSE 10866
// Say ( Frank , D3-Frank-3 ) ;
10854: LD_EXP 5
10858: PPUSH
10859: LD_STRING D3-Frank-3
10861: PPUSH
10862: CALL_OW 88
// DialogueOff ;
10866: CALL_OW 7
// if IsOk ( Frank ) then
10870: LD_EXP 5
10874: PPUSH
10875: CALL_OW 302
10879: IFFALSE 10941
// begin SetSide ( Frank , 0 ) ;
10881: LD_EXP 5
10885: PPUSH
10886: LD_INT 0
10888: PPUSH
10889: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10893: LD_EXP 5
10897: PPUSH
10898: LD_INT 12
10900: PPUSH
10901: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10905: LD_EXP 5
10909: PPUSH
10910: LD_STRING 04t_Frank
10912: PPUSH
10913: CALL_OW 38
// wait ( 0 0$3 ) ;
10917: LD_INT 105
10919: PPUSH
10920: CALL_OW 67
// frankScoutBase = 1 ;
10924: LD_ADDR_EXP 25
10928: PUSH
10929: LD_INT 1
10931: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10932: LD_EXP 5
10936: PPUSH
10937: CALL_OW 64
// end ; end else
10941: GO 11030
// begin Say ( JMM , D3-JMM-4 ) ;
10943: LD_EXP 1
10947: PPUSH
10948: LD_STRING D3-JMM-4
10950: PPUSH
10951: CALL_OW 88
// DialogueOff ;
10955: CALL_OW 7
// if IsOk ( Frank ) then
10959: LD_EXP 5
10963: PPUSH
10964: CALL_OW 302
10968: IFFALSE 11030
// begin SetSide ( Frank , 0 ) ;
10970: LD_EXP 5
10974: PPUSH
10975: LD_INT 0
10977: PPUSH
10978: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10982: LD_EXP 5
10986: PPUSH
10987: LD_INT 12
10989: PPUSH
10990: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10994: LD_EXP 5
10998: PPUSH
10999: LD_STRING 04t_Frank
11001: PPUSH
11002: CALL_OW 38
// wait ( 0 0$3 ) ;
11006: LD_INT 105
11008: PPUSH
11009: CALL_OW 67
// frankScoutBase = 1 ;
11013: LD_ADDR_EXP 25
11017: PUSH
11018: LD_INT 1
11020: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11021: LD_EXP 5
11025: PPUSH
11026: CALL_OW 64
// end ; end ; end ;
11030: PPOPN 1
11032: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11033: LD_EXP 13
11037: PPUSH
11038: CALL_OW 255
11042: PUSH
11043: LD_INT 4
11045: EQUAL
11046: PUSH
11047: LD_EXP 13
11051: PPUSH
11052: CALL_OW 302
11056: AND
11057: IFFALSE 11297
11059: GO 11061
11061: DISABLE
11062: LD_INT 0
11064: PPUSH
11065: PPUSH
// begin wait ( 5 5$00 ) ;
11066: LD_INT 10500
11068: PPUSH
11069: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11073: LD_EXP 13
11077: PPUSH
11078: CALL_OW 255
11082: PUSH
11083: LD_INT 1
11085: EQUAL
11086: PUSH
11087: LD_EXP 13
11091: PPUSH
11092: CALL_OW 301
11096: OR
11097: IFFALSE 11101
// exit ;
11099: GO 11297
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11101: LD_EXP 13
11105: PPUSH
11106: LD_STRING D3b-Don-1
11108: PPUSH
11109: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11113: LD_ADDR_EXP 41
11117: PUSH
11118: LD_INT 1
11120: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11121: LD_ADDR_VAR 0 2
11125: PUSH
11126: LD_INT 22
11128: PUSH
11129: LD_INT 4
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 69
11140: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11141: LD_INT 35
11143: PPUSH
11144: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11148: LD_VAR 0 2
11152: NOT
11153: PUSH
11154: LD_INT 22
11156: PUSH
11157: LD_INT 6
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: LD_INT 101
11166: PUSH
11167: LD_INT 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PPUSH
11178: CALL_OW 69
11182: OR
11183: IFFALSE 11141
// if not tmp then
11185: LD_VAR 0 2
11189: NOT
11190: IFFALSE 11194
// exit ;
11192: GO 11297
// for i in tmp do
11194: LD_ADDR_VAR 0 1
11198: PUSH
11199: LD_VAR 0 2
11203: PUSH
11204: FOR_IN
11205: IFFALSE 11224
// ComAgressiveMove ( i , 52 , 64 ) ;
11207: LD_VAR 0 1
11211: PPUSH
11212: LD_INT 52
11214: PPUSH
11215: LD_INT 64
11217: PPUSH
11218: CALL_OW 114
11222: GO 11204
11224: POP
11225: POP
// wait ( 0 0$10 ) ;
11226: LD_INT 350
11228: PPUSH
11229: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11233: LD_ADDR_VAR 0 1
11237: PUSH
11238: LD_INT 22
11240: PUSH
11241: LD_INT 4
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PPUSH
11248: CALL_OW 69
11252: PUSH
11253: LD_EXP 5
11257: DIFF
11258: PUSH
11259: FOR_IN
11260: IFFALSE 11276
// SetSide ( i , 1 ) ;
11262: LD_VAR 0 1
11266: PPUSH
11267: LD_INT 1
11269: PPUSH
11270: CALL_OW 235
11274: GO 11259
11276: POP
11277: POP
// if IsLive ( Donaldson ) then
11278: LD_EXP 13
11282: PPUSH
11283: CALL_OW 300
11287: IFFALSE 11297
// saveDonaldson := 1 ;
11289: LD_ADDR_EXP 24
11293: PUSH
11294: LD_INT 1
11296: ST_TO_ADDR
// end ;
11297: PPOPN 2
11299: END
// every 0 0$1 trigger IsOk ( Donaldson ) and not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11300: LD_EXP 13
11304: PPUSH
11305: CALL_OW 302
11309: PUSH
11310: LD_EXP 24
11314: NOT
11315: AND
11316: PUSH
11317: LD_EXP 41
11321: NOT
11322: AND
11323: PUSH
11324: LD_INT 26
11326: PPUSH
11327: LD_INT 22
11329: PUSH
11330: LD_INT 1
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PPUSH
11337: CALL_OW 70
11341: PUSH
11342: LD_EXP 13
11346: PPUSH
11347: LD_EXP 1
11351: PPUSH
11352: CALL_OW 296
11356: PUSH
11357: LD_INT 6
11359: LESS
11360: OR
11361: AND
11362: IFFALSE 11417
11364: GO 11366
11366: DISABLE
11367: LD_INT 0
11369: PPUSH
// begin saveDonaldson := 1 ;
11370: LD_ADDR_EXP 24
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11378: LD_ADDR_VAR 0 1
11382: PUSH
11383: LD_INT 22
11385: PUSH
11386: LD_INT 4
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PPUSH
11393: CALL_OW 69
11397: PUSH
11398: FOR_IN
11399: IFFALSE 11415
// SetSide ( i , 1 ) ;
11401: LD_VAR 0 1
11405: PPUSH
11406: LD_INT 1
11408: PPUSH
11409: CALL_OW 235
11413: GO 11398
11415: POP
11416: POP
// end ;
11417: PPOPN 1
11419: END
// every 0 0$1 trigger frankScoutBase do
11420: LD_EXP 25
11424: IFFALSE 11789
11426: GO 11428
11428: DISABLE
// begin wait ( 2 2$30 ) ;
11429: LD_INT 5250
11431: PPUSH
11432: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11436: LD_INT 35
11438: PPUSH
11439: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11443: LD_INT 81
11445: PUSH
11446: LD_INT 4
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 92
11455: PUSH
11456: LD_INT 84
11458: PUSH
11459: LD_INT 28
11461: PUSH
11462: LD_INT 22
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PPUSH
11475: CALL_OW 69
11479: NOT
11480: IFFALSE 11436
// uc_side = 4 ;
11482: LD_ADDR_OWVAR 20
11486: PUSH
11487: LD_INT 4
11489: ST_TO_ADDR
// uc_nation = 1 ;
11490: LD_ADDR_OWVAR 21
11494: PUSH
11495: LD_INT 1
11497: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11498: LD_ADDR_EXP 5
11502: PUSH
11503: LD_STRING 04t_Frank
11505: PPUSH
11506: CALL_OW 34
11510: ST_TO_ADDR
// if not Frank then
11511: LD_EXP 5
11515: NOT
11516: IFFALSE 11520
// exit ;
11518: GO 11789
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11520: LD_EXP 5
11524: PPUSH
11525: LD_INT 13
11527: PPUSH
11528: LD_INT 0
11530: PPUSH
11531: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11535: LD_INT 35
11537: PPUSH
11538: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11542: LD_EXP 1
11546: PPUSH
11547: CALL_OW 310
11551: NOT
11552: PUSH
11553: LD_EXP 1
11557: PPUSH
11558: LD_INT 4
11560: PPUSH
11561: CALL_OW 296
11565: PUSH
11566: LD_INT 20
11568: LESS
11569: AND
11570: IFFALSE 11603
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11572: LD_EXP 5
11576: PPUSH
11577: LD_EXP 1
11581: PPUSH
11582: CALL_OW 250
11586: PPUSH
11587: LD_EXP 1
11591: PPUSH
11592: CALL_OW 251
11596: PPUSH
11597: CALL_OW 111
11601: GO 11618
// ComMoveXY ( Frank , 51 , 15 ) ;
11603: LD_EXP 5
11607: PPUSH
11608: LD_INT 51
11610: PPUSH
11611: LD_INT 15
11613: PPUSH
11614: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11618: LD_EXP 5
11622: PPUSH
11623: LD_EXP 1
11627: PPUSH
11628: CALL_OW 296
11632: PUSH
11633: LD_INT 10
11635: LESS
11636: IFFALSE 11535
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11638: LD_EXP 1
11642: PUSH
11643: LD_EXP 5
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PPUSH
11652: CALL_OW 87
// DialogueOn ;
11656: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11660: LD_EXP 5
11664: PPUSH
11665: LD_STRING D3a-Frank-1
11667: PPUSH
11668: CALL_OW 88
// if Lisa then
11672: LD_EXP 4
11676: IFFALSE 11726
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11678: LD_EXP 4
11682: PPUSH
11683: LD_STRING D3a-Lisa-1
11685: PPUSH
11686: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11690: LD_EXP 5
11694: PPUSH
11695: LD_STRING D3a-Frank-2
11697: PPUSH
11698: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11702: LD_EXP 4
11706: PPUSH
11707: LD_STRING D3a-Lisa-2
11709: PPUSH
11710: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11714: LD_EXP 5
11718: PPUSH
11719: LD_STRING D3a-Frank-3
11721: PPUSH
11722: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11726: LD_EXP 1
11730: PPUSH
11731: LD_STRING D3a-JMM-3
11733: PPUSH
11734: CALL_OW 88
// DialogueOff ;
11738: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11742: LD_EXP 5
11746: PPUSH
11747: LD_INT 1
11749: PPUSH
11750: CALL_OW 235
// InGameOn ;
11754: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11758: LD_INT 1
11760: PPUSH
11761: LD_INT 7
11763: PPUSH
11764: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11768: LD_INT 93
11770: PPUSH
11771: LD_INT 91
11773: PPUSH
11774: CALL_OW 84
// wait ( 0 0$5 ) ;
11778: LD_INT 175
11780: PPUSH
11781: CALL_OW 67
// InGameOff ;
11785: CALL_OW 9
// end ;
11789: END
// every 12 12$0 trigger Difficulty > 1 do
11790: LD_OWVAR 67
11794: PUSH
11795: LD_INT 1
11797: GREATER
11798: IFFALSE 11822
11800: GO 11802
11802: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11803: LD_INT 24
11805: PPUSH
11806: LD_INT 24
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: LD_INT 1
11814: PPUSH
11815: LD_INT 53
11817: PPUSH
11818: CALL_OW 185
11822: END
// every 18 18$0 do
11823: GO 11825
11825: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11826: LD_EXP 14
11830: PPUSH
11831: LD_STRING D4-Har-1
11833: PPUSH
11834: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11838: LD_EXP 1
11842: PPUSH
11843: LD_STRING D4-JMM-1
11845: PPUSH
11846: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11850: LD_EXP 14
11854: PPUSH
11855: LD_STRING D4-Har-2
11857: PPUSH
11858: CALL_OW 94
// case Query ( Q1 ) of 1 :
11862: LD_STRING Q1
11864: PPUSH
11865: CALL_OW 97
11869: PUSH
11870: LD_INT 1
11872: DOUBLE
11873: EQUAL
11874: IFTRUE 11878
11876: GO 11937
11878: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11879: LD_EXP 1
11883: PPUSH
11884: LD_STRING D5-JMM-1
11886: PPUSH
11887: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11891: LD_EXP 14
11895: PPUSH
11896: LD_STRING D5-Har-1
11898: PPUSH
11899: CALL_OW 94
// timeToSupport = 10 10$0 ;
11903: LD_ADDR_EXP 28
11907: PUSH
11908: LD_INT 21000
11910: ST_TO_ADDR
// timerStatus = 2 ;
11911: LD_ADDR_EXP 29
11915: PUSH
11916: LD_INT 2
11918: ST_TO_ADDR
// startTimer = 1 ;
11919: LD_ADDR_EXP 30
11923: PUSH
11924: LD_INT 1
11926: ST_TO_ADDR
// harrAnswer = 1 ;
11927: LD_ADDR_EXP 26
11931: PUSH
11932: LD_INT 1
11934: ST_TO_ADDR
// end ; 2 :
11935: GO 12072
11937: LD_INT 2
11939: DOUBLE
11940: EQUAL
11941: IFTRUE 11945
11943: GO 12004
11945: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11946: LD_EXP 1
11950: PPUSH
11951: LD_STRING D5-JMM-2
11953: PPUSH
11954: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11958: LD_EXP 14
11962: PPUSH
11963: LD_STRING D5-Har-2
11965: PPUSH
11966: CALL_OW 94
// timeToSupport = 5 5$0 ;
11970: LD_ADDR_EXP 28
11974: PUSH
11975: LD_INT 10500
11977: ST_TO_ADDR
// timerStatus = 2 ;
11978: LD_ADDR_EXP 29
11982: PUSH
11983: LD_INT 2
11985: ST_TO_ADDR
// startTimer = 1 ;
11986: LD_ADDR_EXP 30
11990: PUSH
11991: LD_INT 1
11993: ST_TO_ADDR
// harrAnswer = 2 ;
11994: LD_ADDR_EXP 26
11998: PUSH
11999: LD_INT 2
12001: ST_TO_ADDR
// end ; 3 :
12002: GO 12072
12004: LD_INT 3
12006: DOUBLE
12007: EQUAL
12008: IFTRUE 12012
12010: GO 12071
12012: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12013: LD_EXP 1
12017: PPUSH
12018: LD_STRING D5-JMM-3
12020: PPUSH
12021: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12025: LD_EXP 14
12029: PPUSH
12030: LD_STRING D5-Har-3
12032: PPUSH
12033: CALL_OW 94
// timeToSupport = 5 5$0 ;
12037: LD_ADDR_EXP 28
12041: PUSH
12042: LD_INT 10500
12044: ST_TO_ADDR
// timerStatus = 2 ;
12045: LD_ADDR_EXP 29
12049: PUSH
12050: LD_INT 2
12052: ST_TO_ADDR
// startTimer = 1 ;
12053: LD_ADDR_EXP 30
12057: PUSH
12058: LD_INT 1
12060: ST_TO_ADDR
// harrAnswer = 3 ;
12061: LD_ADDR_EXP 26
12065: PUSH
12066: LD_INT 3
12068: ST_TO_ADDR
// end ; end ;
12069: GO 12072
12071: POP
// end ;
12072: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12073: LD_EXP 29
12077: PUSH
12078: LD_INT 2
12080: EQUAL
12081: PUSH
12082: LD_EXP 28
12086: PUSH
12087: LD_INT 0
12089: EQUAL
12090: AND
12091: IFFALSE 12380
12093: GO 12095
12095: DISABLE
// begin timerStatus = 4 ;
12096: LD_ADDR_EXP 29
12100: PUSH
12101: LD_INT 4
12103: ST_TO_ADDR
// if harrAnswer = 1 then
12104: LD_EXP 26
12108: PUSH
12109: LD_INT 1
12111: EQUAL
12112: IFFALSE 12196
// begin PrepareHarrisonSupport ( 3 ) ;
12114: LD_INT 3
12116: PPUSH
12117: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12121: LD_INT 2100
12123: PPUSH
12124: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12128: LD_EXP 14
12132: PPUSH
12133: LD_STRING D7-Har-1
12135: PPUSH
12136: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12140: LD_STRING M2
12142: PPUSH
12143: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12147: LD_ADDR_EXP 27
12151: PUSH
12152: LD_INT 31500
12154: PUSH
12155: LD_INT 10500
12157: PUSH
12158: LD_INT 8400
12160: PUSH
12161: LD_INT 6300
12163: PUSH
12164: LD_INT 6300
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: PUSH
12173: LD_OWVAR 67
12177: ARRAY
12178: PLUS
12179: ST_TO_ADDR
// startTimer = 1 ;
12180: LD_ADDR_EXP 30
12184: PUSH
12185: LD_INT 1
12187: ST_TO_ADDR
// timerStatus = 3 ;
12188: LD_ADDR_EXP 29
12192: PUSH
12193: LD_INT 3
12195: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12196: LD_EXP 26
12200: PUSH
12201: LD_INT 2
12203: EQUAL
12204: IFFALSE 12288
// begin PrepareHarrisonSupport ( 4 ) ;
12206: LD_INT 4
12208: PPUSH
12209: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12213: LD_INT 2100
12215: PPUSH
12216: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12220: LD_EXP 14
12224: PPUSH
12225: LD_STRING D7-Har-1
12227: PPUSH
12228: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12232: LD_STRING M2
12234: PPUSH
12235: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12239: LD_ADDR_EXP 27
12243: PUSH
12244: LD_INT 33600
12246: PUSH
12247: LD_INT 10500
12249: PUSH
12250: LD_INT 8400
12252: PUSH
12253: LD_INT 6300
12255: PUSH
12256: LD_INT 5250
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: PUSH
12265: LD_OWVAR 67
12269: ARRAY
12270: PLUS
12271: ST_TO_ADDR
// startTimer = 1 ;
12272: LD_ADDR_EXP 30
12276: PUSH
12277: LD_INT 1
12279: ST_TO_ADDR
// timerStatus = 3 ;
12280: LD_ADDR_EXP 29
12284: PUSH
12285: LD_INT 3
12287: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12288: LD_EXP 26
12292: PUSH
12293: LD_INT 3
12295: EQUAL
12296: IFFALSE 12380
// begin PrepareHarrisonSupport ( 5 ) ;
12298: LD_INT 5
12300: PPUSH
12301: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12305: LD_INT 2100
12307: PPUSH
12308: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12312: LD_EXP 14
12316: PPUSH
12317: LD_STRING D7-Har-1
12319: PPUSH
12320: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12324: LD_STRING M2
12326: PPUSH
12327: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12331: LD_ADDR_EXP 27
12335: PUSH
12336: LD_INT 35700
12338: PUSH
12339: LD_INT 10500
12341: PUSH
12342: LD_INT 6300
12344: PUSH
12345: LD_INT 4200
12347: PUSH
12348: LD_INT 3150
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: PUSH
12357: LD_OWVAR 67
12361: ARRAY
12362: PLUS
12363: ST_TO_ADDR
// startTimer = 1 ;
12364: LD_ADDR_EXP 30
12368: PUSH
12369: LD_INT 1
12371: ST_TO_ADDR
// timerStatus = 3 ;
12372: LD_ADDR_EXP 29
12376: PUSH
12377: LD_INT 3
12379: ST_TO_ADDR
// end ; end ;
12380: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12381: LD_EXP 27
12385: PUSH
12386: LD_INT 8400
12388: LESSEQUAL
12389: PUSH
12390: LD_EXP 29
12394: PUSH
12395: LD_INT 3
12397: EQUAL
12398: AND
12399: IFFALSE 12431
12401: GO 12403
12403: DISABLE
// begin DialogueOn ;
12404: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12408: LD_EXP 14
12412: PPUSH
12413: LD_STRING D7a-Har-1
12415: PPUSH
12416: CALL_OW 94
// DialogueOff ;
12420: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12424: LD_STRING M2a
12426: PPUSH
12427: CALL_OW 337
// end ;
12431: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12432: LD_EXP 27
12436: PUSH
12437: LD_INT 0
12439: LESSEQUAL
12440: PUSH
12441: LD_EXP 29
12445: PUSH
12446: LD_INT 3
12448: EQUAL
12449: AND
12450: PUSH
12451: LD_EXP 40
12455: NOT
12456: AND
12457: IFFALSE 12596
12459: GO 12461
12461: DISABLE
12462: LD_INT 0
12464: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12465: LD_ADDR_VAR 0 1
12469: PUSH
12470: LD_INT 22
12472: PUSH
12473: LD_INT 1
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 69
12484: PUSH
12485: LD_EXP 1
12489: PUSH
12490: EMPTY
12491: LIST
12492: DIFF
12493: ST_TO_ADDR
// saveDonaldson = 2 ;
12494: LD_ADDR_EXP 24
12498: PUSH
12499: LD_INT 2
12501: ST_TO_ADDR
// DialogueOn ;
12502: CALL_OW 6
// if IsOk ( Donaldson ) then
12506: LD_EXP 13
12510: PPUSH
12511: CALL_OW 302
12515: IFFALSE 12531
// SayRadio ( Harisson , D8-Har-1 ) else
12517: LD_EXP 14
12521: PPUSH
12522: LD_STRING D8-Har-1
12524: PPUSH
12525: CALL_OW 94
12529: GO 12543
// SayRadio ( Harisson , D8-Har-1a ) ;
12531: LD_EXP 14
12535: PPUSH
12536: LD_STRING D8-Har-1a
12538: PPUSH
12539: CALL_OW 94
// DialogueOff ;
12543: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12547: LD_VAR 0 1
12551: PPUSH
12552: LD_INT 4
12554: PPUSH
12555: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12559: LD_VAR 0 1
12563: PPUSH
12564: LD_INT 88
12566: PPUSH
12567: LD_INT 89
12569: PPUSH
12570: CALL_OW 114
// honor = 0 ;
12574: LD_ADDR_EXP 39
12578: PUSH
12579: LD_INT 0
12581: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12582: LD_INT 350
12584: PPUSH
12585: CALL_OW 67
// YouLost ( LostCommand ) ;
12589: LD_STRING LostCommand
12591: PPUSH
12592: CALL_OW 104
// end ;
12596: PPOPN 1
12598: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12599: LD_INT 22
12601: PUSH
12602: LD_INT 6
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 21
12611: PUSH
12612: LD_INT 1
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PPUSH
12623: CALL_OW 69
12627: PUSH
12628: LD_INT 0
12630: EQUAL
12631: PUSH
12632: LD_EXP 20
12636: PUSH
12637: LD_INT 0
12639: EQUAL
12640: AND
12641: PUSH
12642: LD_EXP 44
12646: PUSH
12647: LD_INT 1
12649: EQUAL
12650: AND
12651: IFFALSE 12745
12653: GO 12655
12655: DISABLE
12656: LD_INT 0
12658: PPUSH
12659: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12660: LD_ADDR_VAR 0 2
12664: PUSH
12665: LD_INT 22
12667: PUSH
12668: LD_INT 1
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 21
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 23
12687: PUSH
12688: LD_INT 1
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: LIST
12699: PPUSH
12700: CALL_OW 69
12704: ST_TO_ADDR
// for i in tmp do
12705: LD_ADDR_VAR 0 1
12709: PUSH
12710: LD_VAR 0 2
12714: PUSH
12715: FOR_IN
12716: IFFALSE 12743
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12718: LD_VAR 0 1
12722: PPUSH
12723: LD_INT 1
12725: PPUSH
12726: LD_INT 4
12728: PPUSH
12729: CALL_OW 12
12733: PPUSH
12734: LD_INT 500
12736: PPUSH
12737: CALL_OW 492
12741: GO 12715
12743: POP
12744: POP
// end ; end_of_file
12745: PPOPN 2
12747: END
// every 0 0$1 trigger AIEnable do
12748: LD_EXP 37
12752: IFFALSE 12846
12754: GO 12756
12756: DISABLE
// begin enable ;
12757: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12758: LD_INT 3
12760: PPUSH
12761: LD_INT 21
12763: PPUSH
12764: LD_INT 7
12766: PPUSH
12767: CALL 6030 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12771: LD_INT 3
12773: PPUSH
12774: LD_INT 8
12776: PPUSH
12777: LD_INT 7
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: CALL 6334 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12787: LD_EXP 20
12791: PUSH
12792: LD_INT 2
12794: EQUAL
12795: PUSH
12796: LD_INT 22
12798: PUSH
12799: LD_INT 6
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PPUSH
12806: CALL_OW 69
12810: AND
12811: IFFALSE 12846
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12813: LD_INT 6
12815: PPUSH
12816: LD_EXP 21
12820: PPUSH
12821: LD_INT 6
12823: PPUSH
12824: CALL 6030 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12828: LD_INT 6
12830: PPUSH
12831: LD_INT 9
12833: PPUSH
12834: LD_INT 6
12836: PPUSH
12837: LD_EXP 22
12841: PPUSH
12842: CALL 6334 0 4
// end ; end ;
12846: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12847: LD_EXP 15
12851: PPUSH
12852: CALL_OW 310
12856: NOT
12857: PUSH
12858: LD_INT 21
12860: PPUSH
12861: CALL_OW 302
12865: AND
12866: PUSH
12867: LD_INT 21
12869: PPUSH
12870: CALL_OW 255
12874: PUSH
12875: LD_INT 3
12877: EQUAL
12878: AND
12879: IFFALSE 12896
12881: GO 12883
12883: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12884: LD_EXP 15
12888: PPUSH
12889: LD_INT 21
12891: PPUSH
12892: CALL_OW 120
12896: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12897: LD_INT 22
12899: PUSH
12900: LD_INT 3
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PUSH
12907: LD_INT 21
12909: PUSH
12910: LD_INT 2
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 55
12919: PUSH
12920: EMPTY
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 69
12932: PUSH
12933: LD_INT 0
12935: EQUAL
12936: PUSH
12937: LD_INT 1
12939: PPUSH
12940: CALL_OW 255
12944: PUSH
12945: LD_INT 3
12947: EQUAL
12948: AND
12949: PUSH
12950: LD_INT 21
12952: PPUSH
12953: CALL_OW 302
12957: AND
12958: PUSH
12959: LD_INT 21
12961: PPUSH
12962: CALL_OW 255
12966: PUSH
12967: LD_INT 3
12969: EQUAL
12970: AND
12971: PUSH
12972: LD_INT 21
12974: PPUSH
12975: CALL_OW 302
12979: AND
12980: IFFALSE 13192
12982: GO 12984
12984: DISABLE
// begin enable ;
12985: ENABLE
// if Difficulty = 1 then
12986: LD_OWVAR 67
12990: PUSH
12991: LD_INT 1
12993: EQUAL
12994: IFFALSE 13038
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
12996: LD_INT 3
12998: PPUSH
12999: LD_INT 24
13001: PPUSH
13002: LD_OWVAR 67
13006: PUSH
13007: LD_INT 2
13009: PLUS
13010: PPUSH
13011: LD_INT 42
13013: PUSH
13014: LD_INT 44
13016: PUSH
13017: LD_INT 43
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: PPUSH
13025: LD_INT 1
13027: PPUSH
13028: LD_INT 1
13030: PPUSH
13031: LD_INT 21
13033: PPUSH
13034: CALL 6848 0 7
// if Difficulty = 2 then
13038: LD_OWVAR 67
13042: PUSH
13043: LD_INT 2
13045: EQUAL
13046: IFFALSE 13113
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13048: LD_INT 3
13050: PPUSH
13051: LD_INT 24
13053: PPUSH
13054: LD_OWVAR 67
13058: PUSH
13059: LD_INT 2
13061: PLUS
13062: PPUSH
13063: LD_INT 44
13065: PUSH
13066: LD_INT 44
13068: PUSH
13069: LD_INT 43
13071: PUSH
13072: LD_INT 43
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: PPUSH
13081: LD_INT 1
13083: PPUSH
13084: LD_INT 1
13086: PPUSH
13087: LD_INT 21
13089: PUSH
13090: LD_INT 22
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PUSH
13097: LD_INT 1
13099: PPUSH
13100: LD_INT 2
13102: PPUSH
13103: CALL_OW 12
13107: ARRAY
13108: PPUSH
13109: CALL 6848 0 7
// if Difficulty >= 3 then
13113: LD_OWVAR 67
13117: PUSH
13118: LD_INT 3
13120: GREATEREQUAL
13121: IFFALSE 13192
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13123: LD_INT 3
13125: PPUSH
13126: LD_INT 24
13128: PPUSH
13129: LD_OWVAR 67
13133: PUSH
13134: LD_INT 2
13136: PPUSH
13137: LD_INT 3
13139: PPUSH
13140: CALL_OW 12
13144: PLUS
13145: PPUSH
13146: LD_INT 44
13148: PUSH
13149: LD_INT 44
13151: PUSH
13152: LD_INT 43
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: LIST
13159: PPUSH
13160: LD_INT 1
13162: PPUSH
13163: LD_INT 1
13165: PPUSH
13166: LD_INT 22
13168: PUSH
13169: LD_INT 23
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 1
13178: PPUSH
13179: LD_INT 2
13181: PPUSH
13182: CALL_OW 12
13186: ARRAY
13187: PPUSH
13188: CALL 6848 0 7
// end ;
13192: END
// every 0 0$1 do
13193: GO 13195
13195: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13196: LD_INT 3
13198: PPUSH
13199: LD_INT 1
13201: PPUSH
13202: LD_INT 3
13204: PPUSH
13205: CALL 5951 0 3
13209: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13210: LD_EXP 20
13214: PUSH
13215: LD_INT 1
13217: EQUAL
13218: IFFALSE 13365
13220: GO 13222
13222: DISABLE
13223: LD_INT 0
13225: PPUSH
13226: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13227: LD_ADDR_VAR 0 2
13231: PUSH
13232: LD_INT 22
13234: PUSH
13235: LD_INT 6
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 21
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: LD_INT 34
13254: PUSH
13255: LD_INT 51
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: PPUSH
13267: CALL_OW 69
13271: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13272: LD_VAR 0 2
13276: PUSH
13277: LD_INT 1
13279: ARRAY
13280: PPUSH
13281: LD_EXP 21
13285: PPUSH
13286: CALL_OW 250
13290: PUSH
13291: LD_INT 5
13293: MINUS
13294: PPUSH
13295: LD_EXP 21
13299: PPUSH
13300: CALL_OW 251
13304: PUSH
13305: LD_INT 5
13307: MINUS
13308: PPUSH
13309: CALL_OW 111
// wait ( 0 0$5 ) ;
13313: LD_INT 175
13315: PPUSH
13316: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13320: LD_VAR 0 2
13324: PUSH
13325: LD_INT 1
13327: ARRAY
13328: PPUSH
13329: LD_INT 41
13331: PPUSH
13332: LD_INT 52
13334: PPUSH
13335: CALL_OW 177
// wait ( 0 0$40 ) ;
13339: LD_INT 1400
13341: PPUSH
13342: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13346: LD_VAR 0 2
13350: PUSH
13351: LD_INT 1
13353: ARRAY
13354: PPUSH
13355: LD_INT 41
13357: PPUSH
13358: LD_INT 44
13360: PPUSH
13361: CALL_OW 111
// end ;
13365: PPOPN 2
13367: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13368: LD_EXP 21
13372: PPUSH
13373: CALL_OW 274
13377: PPUSH
13378: LD_INT 1
13380: PPUSH
13381: CALL_OW 275
13385: PUSH
13386: LD_INT 100
13388: GREATEREQUAL
13389: IFFALSE 13617
13391: GO 13393
13393: DISABLE
13394: LD_INT 0
13396: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13397: LD_ADDR_VAR 0 1
13401: PUSH
13402: LD_INT 22
13404: PUSH
13405: LD_INT 6
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 21
13414: PUSH
13415: LD_INT 1
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 25
13424: PUSH
13425: LD_INT 2
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: PPUSH
13437: CALL_OW 69
13441: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13442: LD_VAR 0 1
13446: PUSH
13447: LD_INT 1
13449: ARRAY
13450: PPUSH
13451: LD_INT 4
13453: PPUSH
13454: LD_INT 39
13456: PPUSH
13457: LD_INT 37
13459: PPUSH
13460: LD_INT 3
13462: PPUSH
13463: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13467: LD_VAR 0 1
13471: PUSH
13472: LD_INT 1
13474: ARRAY
13475: PPUSH
13476: LD_INT 29
13478: PPUSH
13479: LD_INT 42
13481: PPUSH
13482: LD_INT 54
13484: PPUSH
13485: LD_INT 3
13487: PPUSH
13488: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13492: LD_VAR 0 1
13496: PUSH
13497: LD_INT 1
13499: ARRAY
13500: PPUSH
13501: LD_INT 6
13503: PPUSH
13504: LD_INT 38
13506: PPUSH
13507: LD_INT 48
13509: PPUSH
13510: LD_INT 0
13512: PPUSH
13513: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13517: LD_VAR 0 1
13521: PUSH
13522: LD_INT 1
13524: ARRAY
13525: PPUSH
13526: LD_INT 2
13528: PPUSH
13529: LD_INT 32
13531: PPUSH
13532: LD_INT 38
13534: PPUSH
13535: LD_INT 2
13537: PPUSH
13538: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13542: LD_VAR 0 1
13546: PUSH
13547: LD_INT 1
13549: ARRAY
13550: PPUSH
13551: LD_INT 26
13553: PPUSH
13554: LD_INT 39
13556: PPUSH
13557: LD_INT 55
13559: PPUSH
13560: LD_INT 3
13562: PPUSH
13563: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13567: LD_VAR 0 1
13571: PUSH
13572: LD_INT 1
13574: ARRAY
13575: PPUSH
13576: LD_INT 32
13578: PPUSH
13579: LD_INT 31
13581: PPUSH
13582: LD_INT 31
13584: PPUSH
13585: LD_INT 3
13587: PPUSH
13588: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13592: LD_VAR 0 1
13596: PUSH
13597: LD_INT 1
13599: ARRAY
13600: PPUSH
13601: LD_INT 31
13603: PPUSH
13604: LD_INT 50
13606: PPUSH
13607: LD_INT 51
13609: PPUSH
13610: LD_INT 4
13612: PPUSH
13613: CALL_OW 205
// end ;
13617: PPOPN 1
13619: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13620: LD_EXP 46
13624: IFFALSE 14189
13626: GO 13628
13628: DISABLE
13629: LD_INT 0
13631: PPUSH
13632: PPUSH
13633: PPUSH
// begin enable ;
13634: ENABLE
// if not ruMobile then
13635: LD_EXP 46
13639: NOT
13640: IFFALSE 13644
// exit ;
13642: GO 14189
// for i in ruMobile do
13644: LD_ADDR_VAR 0 1
13648: PUSH
13649: LD_EXP 46
13653: PUSH
13654: FOR_IN
13655: IFFALSE 14187
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13657: LD_VAR 0 1
13661: PPUSH
13662: CALL_OW 302
13666: NOT
13667: PUSH
13668: LD_VAR 0 1
13672: PPUSH
13673: CALL_OW 255
13677: PUSH
13678: LD_INT 3
13680: NONEQUAL
13681: OR
13682: IFFALSE 13702
// begin ruMobile := ruMobile diff i ;
13684: LD_ADDR_EXP 46
13688: PUSH
13689: LD_EXP 46
13693: PUSH
13694: LD_VAR 0 1
13698: DIFF
13699: ST_TO_ADDR
// continue ;
13700: GO 13654
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 110
13711: NOT
13712: PUSH
13713: LD_VAR 0 1
13717: PPUSH
13718: CALL_OW 110
13722: PUSH
13723: LD_INT 0
13725: EQUAL
13726: OR
13727: IFFALSE 13842
// begin if GetFuel ( i ) < 50 then
13729: LD_VAR 0 1
13733: PPUSH
13734: CALL_OW 261
13738: PUSH
13739: LD_INT 50
13741: LESS
13742: IFFALSE 13801
// begin ComMoveXY ( i , 106 , 88 ) ;
13744: LD_VAR 0 1
13748: PPUSH
13749: LD_INT 106
13751: PPUSH
13752: LD_INT 88
13754: PPUSH
13755: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13759: LD_INT 35
13761: PPUSH
13762: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13766: LD_VAR 0 1
13770: PPUSH
13771: LD_INT 106
13773: PPUSH
13774: LD_INT 88
13776: PPUSH
13777: CALL_OW 297
13781: PUSH
13782: LD_INT 4
13784: LESS
13785: IFFALSE 13759
// SetFuel ( i , 100 ) ;
13787: LD_VAR 0 1
13791: PPUSH
13792: LD_INT 100
13794: PPUSH
13795: CALL_OW 240
// end else
13799: GO 13842
// if not IsInArea ( i , ruParking ) then
13801: LD_VAR 0 1
13805: PPUSH
13806: LD_INT 25
13808: PPUSH
13809: CALL_OW 308
13813: NOT
13814: IFFALSE 13830
// ComMoveToArea ( i , ruParking ) else
13816: LD_VAR 0 1
13820: PPUSH
13821: LD_INT 25
13823: PPUSH
13824: CALL_OW 113
13828: GO 13842
// SetTag ( i , 1 ) ;
13830: LD_VAR 0 1
13834: PPUSH
13835: LD_INT 1
13837: PPUSH
13838: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13842: LD_VAR 0 1
13846: PPUSH
13847: CALL_OW 110
13851: PUSH
13852: LD_INT 1
13854: EQUAL
13855: IFFALSE 13985
// begin if GetLives ( i ) < 650 then
13857: LD_VAR 0 1
13861: PPUSH
13862: CALL_OW 256
13866: PUSH
13867: LD_INT 650
13869: LESS
13870: IFFALSE 13962
// begin if not IsDrivenBy ( i ) then
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 311
13881: NOT
13882: IFFALSE 13886
// continue ;
13884: GO 13654
// mech := IsDrivenBy ( i ) ;
13886: LD_ADDR_VAR 0 2
13890: PUSH
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 311
13900: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13901: LD_VAR 0 2
13905: PPUSH
13906: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13910: LD_VAR 0 2
13914: PPUSH
13915: LD_VAR 0 1
13919: PPUSH
13920: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13924: LD_INT 35
13926: PPUSH
13927: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13931: LD_VAR 0 1
13935: PPUSH
13936: CALL_OW 256
13940: PUSH
13941: LD_INT 1000
13943: EQUAL
13944: IFFALSE 13924
// ComEnterUnit ( mech , i ) ;
13946: LD_VAR 0 2
13950: PPUSH
13951: LD_VAR 0 1
13955: PPUSH
13956: CALL_OW 120
// end else
13960: GO 13985
// if IsDrivenBy ( i ) then
13962: LD_VAR 0 1
13966: PPUSH
13967: CALL_OW 311
13971: IFFALSE 13985
// SetTag ( i , 2 ) ;
13973: LD_VAR 0 1
13977: PPUSH
13978: LD_INT 2
13980: PPUSH
13981: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
13985: LD_VAR 0 1
13989: PPUSH
13990: CALL_OW 110
13994: PUSH
13995: LD_INT 2
13997: EQUAL
13998: IFFALSE 14185
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14000: LD_ADDR_VAR 0 3
14004: PUSH
14005: LD_INT 24
14007: PPUSH
14008: LD_INT 81
14010: PUSH
14011: LD_INT 3
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PPUSH
14018: CALL_OW 70
14022: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14023: LD_VAR 0 1
14027: PPUSH
14028: CALL_OW 256
14032: PUSH
14033: LD_INT 650
14035: LESS
14036: IFFALSE 14061
// begin ComStop ( i ) ;
14038: LD_VAR 0 1
14042: PPUSH
14043: CALL_OW 141
// SetTag ( i , 0 ) ;
14047: LD_VAR 0 1
14051: PPUSH
14052: LD_INT 0
14054: PPUSH
14055: CALL_OW 109
// continue ;
14059: GO 13654
// end ; if enemy then
14061: LD_VAR 0 3
14065: IFFALSE 14105
// begin if not HasTask ( i ) then
14067: LD_VAR 0 1
14071: PPUSH
14072: CALL_OW 314
14076: NOT
14077: IFFALSE 14103
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14079: LD_VAR 0 1
14083: PPUSH
14084: LD_VAR 0 3
14088: PPUSH
14089: LD_VAR 0 1
14093: PPUSH
14094: CALL_OW 74
14098: PPUSH
14099: CALL_OW 115
// end else
14103: GO 14185
// if ruMobile > 2 then
14105: LD_EXP 46
14109: PUSH
14110: LD_INT 2
14112: GREATER
14113: IFFALSE 14185
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14115: LD_ADDR_VAR 0 3
14119: PUSH
14120: LD_INT 81
14122: PUSH
14123: LD_INT 3
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PPUSH
14130: CALL_OW 69
14134: ST_TO_ADDR
// if enemy then
14135: LD_VAR 0 3
14139: IFFALSE 14185
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
14141: LD_VAR 0 1
14145: PPUSH
14146: LD_INT 95
14148: PUSH
14149: LD_INT 74
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 67
14158: PUSH
14159: LD_INT 59
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: LD_INT 55
14168: PUSH
14169: LD_INT 41
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: PPUSH
14181: CALL 80549 0 2
// end ; end ; end ;
14185: GO 13654
14187: POP
14188: POP
// end ; end_of_file
14189: PPOPN 3
14191: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14192: LD_INT 0
14194: PPUSH
14195: PPUSH
14196: PPUSH
14197: PPUSH
14198: PPUSH
14199: PPUSH
14200: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14201: LD_ADDR_VAR 0 3
14205: PUSH
14206: LD_INT 22
14208: PUSH
14209: LD_INT 6
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PUSH
14216: LD_INT 21
14218: PUSH
14219: LD_INT 1
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 25
14228: PUSH
14229: LD_INT 1
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 3
14238: PUSH
14239: LD_INT 54
14241: PUSH
14242: EMPTY
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: PPUSH
14255: CALL_OW 69
14259: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14260: LD_ADDR_VAR 0 7
14264: PUSH
14265: LD_INT 22
14267: PUSH
14268: LD_INT 6
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: LD_INT 21
14277: PUSH
14278: LD_INT 1
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 25
14287: PUSH
14288: LD_INT 1
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 54
14297: PUSH
14298: EMPTY
14299: LIST
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: PPUSH
14307: CALL_OW 69
14311: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14312: LD_ADDR_VAR 0 4
14316: PUSH
14317: LD_INT 22
14319: PUSH
14320: LD_INT 6
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 21
14329: PUSH
14330: LD_INT 1
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: LD_INT 25
14339: PUSH
14340: LD_INT 2
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 69
14356: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14357: LD_ADDR_VAR 0 6
14361: PUSH
14362: LD_INT 22
14364: PUSH
14365: LD_INT 6
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: LD_INT 21
14374: PUSH
14375: LD_INT 1
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PUSH
14382: LD_INT 25
14384: PUSH
14385: LD_INT 4
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: LIST
14396: PPUSH
14397: CALL_OW 69
14401: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14402: LD_ADDR_VAR 0 8
14406: PUSH
14407: LD_INT 22
14409: PUSH
14410: LD_INT 6
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 21
14419: PUSH
14420: LD_INT 2
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: LD_INT 34
14429: PUSH
14430: LD_INT 51
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 69
14446: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14447: LD_VAR 0 1
14451: PPUSH
14452: CALL_OW 255
14456: PUSH
14457: LD_INT 6
14459: EQUAL
14460: PUSH
14461: LD_VAR 0 1
14465: PPUSH
14466: CALL_OW 266
14470: PUSH
14471: LD_INT 0
14473: EQUAL
14474: AND
14475: IFFALSE 14495
// begin ruPDepot = building ;
14477: LD_ADDR_EXP 21
14481: PUSH
14482: LD_VAR 0 1
14486: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14487: LD_ADDR_EXP 20
14491: PUSH
14492: LD_INT 1
14494: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 266
14504: PUSH
14505: LD_INT 4
14507: EQUAL
14508: PUSH
14509: LD_VAR 0 1
14513: PPUSH
14514: CALL_OW 255
14518: PUSH
14519: LD_INT 6
14521: EQUAL
14522: AND
14523: IFFALSE 14556
// for i in tmpSold do
14525: LD_ADDR_VAR 0 2
14529: PUSH
14530: LD_VAR 0 3
14534: PUSH
14535: FOR_IN
14536: IFFALSE 14554
// ComEnterUnit ( i , building ) ;
14538: LD_VAR 0 2
14542: PPUSH
14543: LD_VAR 0 1
14547: PPUSH
14548: CALL_OW 120
14552: GO 14535
14554: POP
14555: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14556: LD_VAR 0 1
14560: PPUSH
14561: CALL_OW 266
14565: PUSH
14566: LD_INT 6
14568: EQUAL
14569: PUSH
14570: LD_VAR 0 1
14574: PPUSH
14575: CALL_OW 255
14579: PUSH
14580: LD_INT 6
14582: EQUAL
14583: AND
14584: IFFALSE 14642
// begin for i in tmpSci do
14586: LD_ADDR_VAR 0 2
14590: PUSH
14591: LD_VAR 0 6
14595: PUSH
14596: FOR_IN
14597: IFFALSE 14615
// ComEnterUnit ( i , building ) ;
14599: LD_VAR 0 2
14603: PPUSH
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 120
14613: GO 14596
14615: POP
14616: POP
// ResAllTechs ( 6 , building , 3 ) ;
14617: LD_INT 6
14619: PPUSH
14620: LD_VAR 0 1
14624: PPUSH
14625: LD_INT 3
14627: PPUSH
14628: CALL 5951 0 3
// ruPLab = building ;
14632: LD_ADDR_EXP 22
14636: PUSH
14637: LD_VAR 0 1
14641: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14642: LD_VAR 0 1
14646: PPUSH
14647: CALL_OW 266
14651: PUSH
14652: LD_INT 2
14654: EQUAL
14655: PUSH
14656: LD_VAR 0 1
14660: PPUSH
14661: CALL_OW 255
14665: PUSH
14666: LD_INT 6
14668: EQUAL
14669: AND
14670: IFFALSE 14721
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14672: LD_ADDR_VAR 0 5
14676: PUSH
14677: LD_VAR 0 8
14681: PUSH
14682: LD_INT 1
14684: ARRAY
14685: PPUSH
14686: CALL_OW 313
14690: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14691: LD_VAR 0 5
14695: PPUSH
14696: CALL_OW 121
// wait ( 0 0$1 ) ;
14700: LD_INT 35
14702: PPUSH
14703: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14707: LD_VAR 0 5
14711: PPUSH
14712: LD_VAR 0 1
14716: PPUSH
14717: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14721: LD_VAR 0 1
14725: PPUSH
14726: CALL_OW 266
14730: PUSH
14731: LD_INT 32
14733: EQUAL
14734: PUSH
14735: LD_VAR 0 1
14739: PPUSH
14740: CALL_OW 255
14744: PUSH
14745: LD_INT 6
14747: EQUAL
14748: AND
14749: IFFALSE 14801
// begin ComPlaceWeapon ( building , 42 ) ;
14751: LD_VAR 0 1
14755: PPUSH
14756: LD_INT 42
14758: PPUSH
14759: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14763: LD_VAR 0 7
14767: PUSH
14768: LD_INT 1
14770: ARRAY
14771: PPUSH
14772: CALL_OW 122
// wait ( 0 0$1 ) ;
14776: LD_INT 35
14778: PPUSH
14779: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14783: LD_VAR 0 7
14787: PUSH
14788: LD_INT 1
14790: ARRAY
14791: PPUSH
14792: LD_VAR 0 1
14796: PPUSH
14797: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14801: LD_VAR 0 1
14805: PPUSH
14806: CALL_OW 266
14810: PUSH
14811: LD_INT 31
14813: EQUAL
14814: PUSH
14815: LD_VAR 0 1
14819: PPUSH
14820: CALL_OW 255
14824: PUSH
14825: LD_INT 6
14827: EQUAL
14828: AND
14829: IFFALSE 14895
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14831: LD_VAR 0 7
14835: PUSH
14836: LD_INT 2
14838: ARRAY
14839: PPUSH
14840: CALL_OW 122
// wait ( 0 0$1 ) ;
14844: LD_INT 35
14846: PPUSH
14847: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14851: LD_VAR 0 7
14855: PUSH
14856: LD_INT 2
14858: ARRAY
14859: PPUSH
14860: LD_VAR 0 1
14864: PPUSH
14865: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14869: LD_VAR 0 4
14873: PUSH
14874: LD_INT 1
14876: ARRAY
14877: PPUSH
14878: LD_EXP 21
14882: PPUSH
14883: CALL_OW 120
// baseReadyToBuild = 2 ;
14887: LD_ADDR_EXP 20
14891: PUSH
14892: LD_INT 2
14894: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14895: LD_VAR 0 1
14899: PPUSH
14900: CALL_OW 266
14904: PUSH
14905: LD_INT 32
14907: EQUAL
14908: PUSH
14909: LD_VAR 0 1
14913: PPUSH
14914: CALL_OW 255
14918: PUSH
14919: LD_INT 1
14921: EQUAL
14922: AND
14923: PUSH
14924: LD_EXP 32
14928: PUSH
14929: LD_INT 0
14931: EQUAL
14932: AND
14933: IFFALSE 15178
// begin bunkerDialog = 1 ;
14935: LD_ADDR_EXP 32
14939: PUSH
14940: LD_INT 1
14942: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14943: LD_EXP 11
14947: PPUSH
14948: CALL_OW 302
14952: IFFALSE 14968
// Say ( Claptopn , D11-Eng1-1 ) else
14954: LD_EXP 11
14958: PPUSH
14959: LD_STRING D11-Eng1-1
14961: PPUSH
14962: CALL_OW 88
14966: GO 15164
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14968: LD_INT 22
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 21
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 25
14990: PUSH
14991: LD_INT 3
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: LD_INT 26
15000: PUSH
15001: LD_INT 1
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: PPUSH
15014: CALL_OW 69
15018: PUSH
15019: LD_EXP 1
15023: PUSH
15024: EMPTY
15025: LIST
15026: PUSH
15027: LD_INT 0
15029: GREATER
15030: DIFF
15031: IFFALSE 15105
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15033: LD_INT 22
15035: PUSH
15036: LD_INT 1
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 21
15045: PUSH
15046: LD_INT 1
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 25
15055: PUSH
15056: LD_INT 2
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 26
15065: PUSH
15066: LD_INT 1
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: PPUSH
15079: CALL_OW 69
15083: PUSH
15084: LD_EXP 1
15088: PUSH
15089: EMPTY
15090: LIST
15091: DIFF
15092: PPUSH
15093: LD_STRING D11-Eng1-1
15095: PPUSH
15096: LD_STRING D11-Eng1-1
15098: PPUSH
15099: CALL 4598 0 3
15103: GO 15164
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15105: LD_INT 22
15107: PUSH
15108: LD_INT 1
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: LD_INT 21
15117: PUSH
15118: LD_INT 1
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PUSH
15125: LD_INT 26
15127: PUSH
15128: LD_INT 1
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: PPUSH
15140: CALL_OW 69
15144: PUSH
15145: LD_EXP 1
15149: PUSH
15150: EMPTY
15151: LIST
15152: DIFF
15153: PPUSH
15154: LD_STRING D11-Eng1-1
15156: PPUSH
15157: LD_STRING D11-Eng1-1
15159: PPUSH
15160: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15164: LD_EXP 33
15168: PUSH
15169: LD_INT 0
15171: EQUAL
15172: IFFALSE 15178
// EnergyDialog ;
15174: CALL 5003 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15178: LD_VAR 0 1
15182: PPUSH
15183: CALL_OW 266
15187: PUSH
15188: LD_INT 29
15190: EQUAL
15191: PUSH
15192: LD_VAR 0 1
15196: PPUSH
15197: CALL_OW 255
15201: PUSH
15202: LD_INT 1
15204: EQUAL
15205: AND
15206: IFFALSE 15216
// buildOil = 1 ;
15208: LD_ADDR_EXP 34
15212: PUSH
15213: LD_INT 1
15215: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15216: LD_VAR 0 1
15220: PPUSH
15221: CALL_OW 266
15225: PUSH
15226: LD_INT 26
15228: EQUAL
15229: PUSH
15230: LD_VAR 0 1
15234: PPUSH
15235: CALL_OW 255
15239: PUSH
15240: LD_INT 1
15242: EQUAL
15243: AND
15244: IFFALSE 15254
// buildPower = 1 ;
15246: LD_ADDR_EXP 35
15250: PUSH
15251: LD_INT 1
15253: ST_TO_ADDR
// end ;
15254: PPOPN 8
15256: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15257: LD_VAR 0 1
15261: PPUSH
15262: CALL_OW 266
15266: PUSH
15267: LD_INT 3
15269: EQUAL
15270: PUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 255
15280: PUSH
15281: LD_INT 1
15283: EQUAL
15284: AND
15285: PUSH
15286: LD_EXP 31
15290: PUSH
15291: LD_INT 0
15293: EQUAL
15294: AND
15295: IFFALSE 15643
// begin factoryDialog = 1 ;
15297: LD_ADDR_EXP 31
15301: PUSH
15302: LD_INT 1
15304: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15305: LD_INT 47
15307: PPUSH
15308: LD_INT 1
15310: PPUSH
15311: CALL_OW 321
15315: PUSH
15316: LD_INT 1
15318: EQUAL
15319: PUSH
15320: LD_INT 45
15322: PPUSH
15323: LD_INT 1
15325: PPUSH
15326: CALL_OW 321
15330: PUSH
15331: LD_INT 1
15333: EQUAL
15334: AND
15335: IFFALSE 15643
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15337: LD_INT 22
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 21
15349: PUSH
15350: LD_INT 3
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 30
15359: PUSH
15360: LD_INT 3
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 24
15369: PUSH
15370: LD_INT 1000
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: PPUSH
15383: CALL_OW 69
15387: PUSH
15388: LD_INT 1
15390: ARRAY
15391: PPUSH
15392: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15396: LD_EXP 1
15400: PPUSH
15401: LD_STRING D9a-JMM-1
15403: PPUSH
15404: CALL_OW 88
// if IsOK ( Campell ) then
15408: LD_EXP 12
15412: PPUSH
15413: CALL_OW 302
15417: IFFALSE 15433
// Say ( Campell , D9a-Mech1-1 ) else
15419: LD_EXP 12
15423: PPUSH
15424: LD_STRING D9a-Mech1-1
15426: PPUSH
15427: CALL_OW 88
15431: GO 15629
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15433: LD_INT 22
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 21
15445: PUSH
15446: LD_INT 1
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 25
15455: PUSH
15456: LD_INT 3
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: LD_INT 26
15465: PUSH
15466: LD_INT 1
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: PPUSH
15479: CALL_OW 69
15483: PUSH
15484: LD_EXP 1
15488: PUSH
15489: EMPTY
15490: LIST
15491: PUSH
15492: LD_INT 0
15494: GREATER
15495: DIFF
15496: IFFALSE 15570
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15498: LD_INT 22
15500: PUSH
15501: LD_INT 1
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 21
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 25
15520: PUSH
15521: LD_INT 3
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 26
15530: PUSH
15531: LD_INT 1
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: PPUSH
15544: CALL_OW 69
15548: PUSH
15549: LD_EXP 1
15553: PUSH
15554: EMPTY
15555: LIST
15556: DIFF
15557: PPUSH
15558: LD_STRING D9a-Mech1-1
15560: PPUSH
15561: LD_STRING D9a-Mech1-1
15563: PPUSH
15564: CALL 4598 0 3
15568: GO 15629
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15570: LD_INT 22
15572: PUSH
15573: LD_INT 1
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 21
15582: PUSH
15583: LD_INT 1
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 26
15592: PUSH
15593: LD_INT 1
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: LIST
15604: PPUSH
15605: CALL_OW 69
15609: PUSH
15610: LD_EXP 1
15614: PUSH
15615: EMPTY
15616: LIST
15617: DIFF
15618: PPUSH
15619: LD_STRING D9a-Mech1-1
15621: PPUSH
15622: LD_STRING D9a-Mech1-1
15624: PPUSH
15625: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15629: LD_EXP 33
15633: PUSH
15634: LD_INT 0
15636: EQUAL
15637: IFFALSE 15643
// EnergyDialog ;
15639: CALL 5003 0 0
// end ; end ; end ;
15643: PPOPN 1
15645: END
// on UnitDestroyed ( unit ) do var mech ;
15646: LD_INT 0
15648: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15649: LD_VAR 0 1
15653: PPUSH
15654: CALL 35515 0 1
// if unit = JMM then
15658: LD_VAR 0 1
15662: PUSH
15663: LD_EXP 1
15667: EQUAL
15668: IFFALSE 15677
// YouLost ( JMM ) ;
15670: LD_STRING JMM
15672: PPUSH
15673: CALL_OW 104
// if unit = ambdept0 then
15677: LD_VAR 0 1
15681: PUSH
15682: LD_INT 4
15684: EQUAL
15685: IFFALSE 15694
// YouLost ( Base ) ;
15687: LD_STRING Base
15689: PPUSH
15690: CALL_OW 104
// if unit in ruMobile then
15694: LD_VAR 0 1
15698: PUSH
15699: LD_EXP 46
15703: IN
15704: IFFALSE 15722
// ruMobile = ruMobile diff ruMobile ;
15706: LD_ADDR_EXP 46
15710: PUSH
15711: LD_EXP 46
15715: PUSH
15716: LD_EXP 46
15720: DIFF
15721: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15722: LD_VAR 0 1
15726: PPUSH
15727: CALL_OW 247
15731: PUSH
15732: LD_INT 1
15734: EQUAL
15735: PUSH
15736: LD_VAR 0 1
15740: PPUSH
15741: CALL_OW 255
15745: PUSH
15746: LD_INT 1
15748: EQUAL
15749: AND
15750: IFFALSE 15766
// lostCounter = lostCounter + 1 ;
15752: LD_ADDR_EXP 38
15756: PUSH
15757: LD_EXP 38
15761: PUSH
15762: LD_INT 1
15764: PLUS
15765: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15766: LD_EXP 43
15770: PUSH
15771: LD_INT 24
15773: PPUSH
15774: CALL_OW 313
15778: PUSH
15779: LD_INT 6
15781: LESS
15782: AND
15783: PUSH
15784: LD_VAR 0 1
15788: PPUSH
15789: CALL_OW 257
15793: PUSH
15794: LD_INT 3
15796: EQUAL
15797: AND
15798: PUSH
15799: LD_VAR 0 1
15803: PPUSH
15804: CALL_OW 255
15808: PUSH
15809: LD_INT 3
15811: EQUAL
15812: AND
15813: PUSH
15814: LD_INT 24
15816: PPUSH
15817: CALL_OW 302
15821: AND
15822: PUSH
15823: LD_INT 24
15825: PPUSH
15826: CALL_OW 255
15830: PUSH
15831: LD_INT 3
15833: EQUAL
15834: AND
15835: IFFALSE 15964
// begin ruMech := ruMech - 1 ;
15837: LD_ADDR_EXP 43
15841: PUSH
15842: LD_EXP 43
15846: PUSH
15847: LD_INT 1
15849: MINUS
15850: ST_TO_ADDR
// if ruMech = 0 then
15851: LD_EXP 43
15855: PUSH
15856: LD_INT 0
15858: EQUAL
15859: IFFALSE 15863
// exit ;
15861: GO 15964
// wait ( 0 0$40 ) ;
15863: LD_INT 1400
15865: PPUSH
15866: CALL_OW 67
// uc_side = 3 ;
15870: LD_ADDR_OWVAR 20
15874: PUSH
15875: LD_INT 3
15877: ST_TO_ADDR
// uc_nation = 3 ;
15878: LD_ADDR_OWVAR 21
15882: PUSH
15883: LD_INT 3
15885: ST_TO_ADDR
// hc_gallery :=  ;
15886: LD_ADDR_OWVAR 33
15890: PUSH
15891: LD_STRING 
15893: ST_TO_ADDR
// hc_name :=  ;
15894: LD_ADDR_OWVAR 26
15898: PUSH
15899: LD_STRING 
15901: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15902: LD_INT 0
15904: PPUSH
15905: LD_EXP 16
15909: PPUSH
15910: LD_EXP 17
15914: PPUSH
15915: CALL_OW 12
15919: PPUSH
15920: CALL_OW 383
// mech := CreateHuman ;
15924: LD_ADDR_VAR 0 2
15928: PUSH
15929: CALL_OW 44
15933: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15934: LD_VAR 0 2
15938: PPUSH
15939: LD_INT 124
15941: PPUSH
15942: LD_INT 97
15944: PPUSH
15945: LD_INT 0
15947: PPUSH
15948: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
15952: LD_VAR 0 2
15956: PPUSH
15957: LD_INT 24
15959: PPUSH
15960: CALL_OW 120
// end ; end ;
15964: PPOPN 2
15966: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15967: LD_INT 0
15969: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15970: LD_VAR 0 1
15974: PPUSH
15975: LD_VAR 0 2
15979: PPUSH
15980: CALL 35635 0 2
// if GetSide ( vehicle ) = 1 then
15984: LD_VAR 0 1
15988: PPUSH
15989: CALL_OW 255
15993: PUSH
15994: LD_INT 1
15996: EQUAL
15997: IFFALSE 16013
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
15999: LD_ADDR_EXP 42
16003: PUSH
16004: LD_EXP 42
16008: PUSH
16009: LD_INT 1
16011: PLUS
16012: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16013: LD_VAR 0 1
16017: PPUSH
16018: CALL_OW 255
16022: PUSH
16023: LD_INT 3
16025: EQUAL
16026: PUSH
16027: LD_VAR 0 1
16031: PPUSH
16032: CALL_OW 264
16036: PUSH
16037: LD_INT 42
16039: PUSH
16040: LD_INT 43
16042: PUSH
16043: LD_INT 44
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: IN
16051: AND
16052: IFFALSE 16070
// ruMobile := ruMobile union vehicle ;
16054: LD_ADDR_EXP 46
16058: PUSH
16059: LD_EXP 46
16063: PUSH
16064: LD_VAR 0 1
16068: UNION
16069: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16070: LD_VAR 0 1
16074: PPUSH
16075: CALL_OW 264
16079: PUSH
16080: LD_INT 53
16082: EQUAL
16083: IFFALSE 16219
// begin uc_side = 3 ;
16085: LD_ADDR_OWVAR 20
16089: PUSH
16090: LD_INT 3
16092: ST_TO_ADDR
// uc_nation = 3 ;
16093: LD_ADDR_OWVAR 21
16097: PUSH
16098: LD_INT 3
16100: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16101: LD_INT 0
16103: PPUSH
16104: LD_EXP 17
16108: PPUSH
16109: CALL_OW 383
// driver := CreateHuman ;
16113: LD_ADDR_VAR 0 3
16117: PUSH
16118: CALL_OW 44
16122: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16123: LD_VAR 0 3
16127: PPUSH
16128: LD_VAR 0 2
16132: PPUSH
16133: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16137: LD_VAR 0 1
16141: PPUSH
16142: LD_INT 21
16144: PPUSH
16145: CALL 5219 0 2
// repeat wait ( 0 0$1 ) ;
16149: LD_INT 35
16151: PPUSH
16152: CALL_OW 67
// until not HasTask ( vehicle ) ;
16156: LD_VAR 0 1
16160: PPUSH
16161: CALL_OW 314
16165: NOT
16166: IFFALSE 16149
// driver := IsDrivenBy ( vehicle ) ;
16168: LD_ADDR_VAR 0 3
16172: PUSH
16173: LD_VAR 0 1
16177: PPUSH
16178: CALL_OW 311
16182: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16183: LD_VAR 0 3
16187: PPUSH
16188: LD_INT 104
16190: PPUSH
16191: LD_INT 73
16193: PPUSH
16194: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16198: LD_VAR 0 3
16202: PPUSH
16203: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16207: LD_VAR 0 3
16211: PPUSH
16212: LD_INT 24
16214: PPUSH
16215: CALL_OW 180
// end ; end ;
16219: PPOPN 3
16221: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16222: LD_VAR 0 1
16226: PPUSH
16227: CALL_OW 255
16231: PUSH
16232: LD_INT 3
16234: EQUAL
16235: PUSH
16236: LD_VAR 0 1
16240: PPUSH
16241: CALL_OW 247
16245: PUSH
16246: LD_INT 2
16248: EQUAL
16249: AND
16250: PUSH
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 264
16260: PUSH
16261: LD_INT 42
16263: PUSH
16264: LD_INT 43
16266: PUSH
16267: LD_INT 44
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: LIST
16274: IN
16275: AND
16276: IFFALSE 16325
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16278: LD_INT 24
16280: PPUSH
16281: LD_VAR 0 1
16285: PPUSH
16286: CALL_OW 265
16290: PPUSH
16291: LD_VAR 0 1
16295: PPUSH
16296: CALL_OW 262
16300: PPUSH
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 263
16310: PPUSH
16311: LD_VAR 0 1
16315: PPUSH
16316: CALL_OW 264
16320: PPUSH
16321: CALL_OW 185
// end ;
16325: PPOPN 1
16327: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16328: LD_VAR 0 1
16332: PPUSH
16333: CALL_OW 255
16337: PUSH
16338: LD_INT 3
16340: EQUAL
16341: PUSH
16342: LD_VAR 0 2
16346: PPUSH
16347: CALL_OW 255
16351: PUSH
16352: LD_INT 3
16354: EQUAL
16355: AND
16356: PUSH
16357: LD_INT 24
16359: PPUSH
16360: CALL_OW 302
16364: AND
16365: PUSH
16366: LD_VAR 0 1
16370: PPUSH
16371: CALL_OW 302
16375: NOT
16376: AND
16377: IFFALSE 16391
// ComEnterUnit ( human , rubfact0 ) ;
16379: LD_VAR 0 2
16383: PPUSH
16384: LD_INT 24
16386: PPUSH
16387: CALL_OW 120
// end ;
16391: PPOPN 2
16393: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16394: LD_VAR 0 1
16398: PUSH
16399: LD_INT 24
16401: EQUAL
16402: PUSH
16403: LD_VAR 0 2
16407: PPUSH
16408: CALL_OW 256
16412: PUSH
16413: LD_INT 1000
16415: LESS
16416: AND
16417: IFFALSE 16431
// SetLives ( un , 1000 ) ;
16419: LD_VAR 0 2
16423: PPUSH
16424: LD_INT 1000
16426: PPUSH
16427: CALL_OW 234
// end ;
16431: PPOPN 2
16433: END
// on Command ( comandid ) do var i , j , tmp ;
16434: LD_INT 0
16436: PPUSH
16437: PPUSH
16438: PPUSH
// begin SOS_Command ( comandid ) ;
16439: LD_VAR 0 1
16443: PPUSH
16444: CALL 35619 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16448: LD_INT 22
16450: PUSH
16451: LD_INT 4
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PPUSH
16458: CALL_OW 69
16462: NOT
16463: IFFALSE 16467
// exit ;
16465: GO 16632
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16467: LD_ADDR_VAR 0 2
16471: PUSH
16472: LD_INT 22
16474: PUSH
16475: LD_INT 1
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 2
16484: PUSH
16485: LD_INT 21
16487: PUSH
16488: LD_INT 1
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 21
16497: PUSH
16498: LD_INT 2
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: LIST
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PPUSH
16514: CALL_OW 69
16518: PUSH
16519: FOR_IN
16520: IFFALSE 16630
// begin if GetTaskList ( i ) > 0 then
16522: LD_VAR 0 2
16526: PPUSH
16527: CALL_OW 437
16531: PUSH
16532: LD_INT 0
16534: GREATER
16535: IFFALSE 16628
// begin for j = 1 to GetTaskList ( i ) do
16537: LD_ADDR_VAR 0 3
16541: PUSH
16542: DOUBLE
16543: LD_INT 1
16545: DEC
16546: ST_TO_ADDR
16547: LD_VAR 0 2
16551: PPUSH
16552: CALL_OW 437
16556: PUSH
16557: FOR_TO
16558: IFFALSE 16626
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16560: LD_ADDR_VAR 0 4
16564: PUSH
16565: LD_VAR 0 2
16569: PPUSH
16570: CALL_OW 437
16574: PUSH
16575: LD_VAR 0 3
16579: ARRAY
16580: PUSH
16581: LD_INT 4
16583: ARRAY
16584: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16585: LD_VAR 0 4
16589: PPUSH
16590: CALL_OW 255
16594: PUSH
16595: LD_INT 4
16597: EQUAL
16598: PUSH
16599: LD_VAR 0 4
16603: PPUSH
16604: CALL_OW 255
16608: PUSH
16609: LD_INT 0
16611: EQUAL
16612: OR
16613: IFFALSE 16624
// ComStop ( i ) ;
16615: LD_VAR 0 2
16619: PPUSH
16620: CALL_OW 141
// end ;
16624: GO 16557
16626: POP
16627: POP
// end ; end ;
16628: GO 16519
16630: POP
16631: POP
// end ; end_of_file
16632: PPOPN 4
16634: END
// every 10 10$0 do
16635: GO 16637
16637: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16638: LD_INT 5
16640: PPUSH
16641: LD_INT 3
16643: PPUSH
16644: LD_INT 2
16646: PUSH
16647: LD_INT 2
16649: PUSH
16650: LD_INT 3
16652: PUSH
16653: LD_INT 4
16655: PUSH
16656: LD_INT 4
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: PUSH
16665: LD_OWVAR 67
16669: ARRAY
16670: PLUS
16671: PPUSH
16672: LD_INT 0
16674: PPUSH
16675: LD_EXP 16
16679: PPUSH
16680: LD_EXP 17
16684: PPUSH
16685: CALL_OW 12
16689: PPUSH
16690: LD_INT 4
16692: PPUSH
16693: LD_INT 14
16695: PPUSH
16696: LD_INT 1
16698: PPUSH
16699: LD_INT 2
16701: PPUSH
16702: CALL 6960 0 9
16706: END
// every 20 20$0 do
16707: GO 16709
16709: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16710: LD_INT 5
16712: PPUSH
16713: LD_INT 3
16715: PPUSH
16716: LD_INT 4
16718: PUSH
16719: LD_INT 2
16721: PUSH
16722: LD_INT 3
16724: PUSH
16725: LD_INT 4
16727: PUSH
16728: LD_INT 5
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: PUSH
16737: LD_OWVAR 67
16741: ARRAY
16742: PLUS
16743: PPUSH
16744: LD_INT 2
16746: PPUSH
16747: LD_EXP 16
16751: PPUSH
16752: LD_EXP 17
16756: PPUSH
16757: CALL_OW 12
16761: PPUSH
16762: LD_INT 4
16764: PPUSH
16765: LD_INT 14
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: LD_INT 1
16773: PPUSH
16774: CALL 6960 0 9
16778: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16779: GO 16781
16781: DISABLE
16782: LD_INT 0
16784: PPUSH
16785: PPUSH
16786: PPUSH
16787: PPUSH
16788: PPUSH
// begin hex := [ 123 , 95 ] ;
16789: LD_ADDR_VAR 0 4
16793: PUSH
16794: LD_INT 123
16796: PUSH
16797: LD_INT 95
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: ST_TO_ADDR
// tmp := [ ] ;
16804: LD_ADDR_VAR 0 5
16808: PUSH
16809: EMPTY
16810: ST_TO_ADDR
// if Difficulty > 1 then
16811: LD_OWVAR 67
16815: PUSH
16816: LD_INT 1
16818: GREATER
16819: IFFALSE 16829
// specAttack := true ;
16821: LD_ADDR_EXP 47
16825: PUSH
16826: LD_INT 1
16828: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16829: LD_ADDR_VAR 0 1
16833: PUSH
16834: DOUBLE
16835: LD_INT 1
16837: DEC
16838: ST_TO_ADDR
16839: LD_INT 4
16841: PUSH
16842: LD_INT 5
16844: PUSH
16845: LD_INT 6
16847: PUSH
16848: LD_INT 7
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: PUSH
16857: LD_OWVAR 67
16861: ARRAY
16862: PUSH
16863: FOR_TO
16864: IFFALSE 17166
// begin uc_side := 5 ;
16866: LD_ADDR_OWVAR 20
16870: PUSH
16871: LD_INT 5
16873: ST_TO_ADDR
// uc_nation := 3 ;
16874: LD_ADDR_OWVAR 21
16878: PUSH
16879: LD_INT 3
16881: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16882: LD_ADDR_OWVAR 37
16886: PUSH
16887: LD_INT 21
16889: PUSH
16890: LD_INT 22
16892: PUSH
16893: LD_INT 23
16895: PUSH
16896: LD_INT 24
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: PUSH
16905: LD_VAR 0 1
16909: PUSH
16910: LD_OWVAR 67
16914: MOD
16915: PUSH
16916: LD_INT 1
16918: PLUS
16919: ARRAY
16920: ST_TO_ADDR
// vc_engine := engine_combustion ;
16921: LD_ADDR_OWVAR 39
16925: PUSH
16926: LD_INT 1
16928: ST_TO_ADDR
// vc_control := control_manual ;
16929: LD_ADDR_OWVAR 38
16933: PUSH
16934: LD_INT 1
16936: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16937: LD_ADDR_OWVAR 40
16941: PUSH
16942: LD_INT 42
16944: PUSH
16945: LD_INT 43
16947: PUSH
16948: LD_INT 44
16950: PUSH
16951: LD_INT 44
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: PUSH
16960: LD_VAR 0 1
16964: PUSH
16965: LD_OWVAR 67
16969: MOD
16970: PUSH
16971: LD_INT 1
16973: PLUS
16974: ARRAY
16975: ST_TO_ADDR
// veh := CreateVehicle ;
16976: LD_ADDR_VAR 0 3
16980: PUSH
16981: CALL_OW 45
16985: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
16986: LD_VAR 0 3
16990: PPUSH
16991: LD_INT 5
16993: PPUSH
16994: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
16998: LD_INT 35
17000: PPUSH
17001: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17005: LD_VAR 0 4
17009: PUSH
17010: LD_INT 1
17012: ARRAY
17013: PPUSH
17014: LD_VAR 0 4
17018: PUSH
17019: LD_INT 2
17021: ARRAY
17022: PPUSH
17023: CALL_OW 428
17027: PUSH
17028: LD_INT 0
17030: EQUAL
17031: IFFALSE 16998
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17033: LD_VAR 0 3
17037: PPUSH
17038: LD_VAR 0 4
17042: PUSH
17043: LD_INT 1
17045: ARRAY
17046: PPUSH
17047: LD_VAR 0 4
17051: PUSH
17052: LD_INT 2
17054: ARRAY
17055: PPUSH
17056: LD_INT 0
17058: PPUSH
17059: CALL_OW 48
// uc_side := 5 ;
17063: LD_ADDR_OWVAR 20
17067: PUSH
17068: LD_INT 5
17070: ST_TO_ADDR
// uc_nation := 3 ;
17071: LD_ADDR_OWVAR 21
17075: PUSH
17076: LD_INT 3
17078: ST_TO_ADDR
// InitHC_All ( ) ;
17079: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
17083: LD_INT 0
17085: PPUSH
17086: LD_INT 2
17088: PUSH
17089: LD_OWVAR 67
17093: PLUS
17094: PPUSH
17095: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17099: CALL_OW 44
17103: PPUSH
17104: LD_VAR 0 3
17108: PPUSH
17109: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17113: LD_VAR 0 3
17117: PPUSH
17118: LD_INT 101
17120: PPUSH
17121: LD_INT 77
17123: PPUSH
17124: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17128: LD_ADDR_VAR 0 5
17132: PUSH
17133: LD_VAR 0 5
17137: PPUSH
17138: LD_VAR 0 5
17142: PUSH
17143: LD_INT 1
17145: PLUS
17146: PPUSH
17147: LD_VAR 0 3
17151: PPUSH
17152: CALL_OW 1
17156: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17157: LD_INT 105
17159: PPUSH
17160: CALL_OW 67
// end ;
17164: GO 16863
17166: POP
17167: POP
// repeat wait ( 0 0$1 ) ;
17168: LD_INT 35
17170: PPUSH
17171: CALL_OW 67
// for i in tmp do
17175: LD_ADDR_VAR 0 1
17179: PUSH
17180: LD_VAR 0 5
17184: PUSH
17185: FOR_IN
17186: IFFALSE 17254
// if not IsOk ( i ) then
17188: LD_VAR 0 1
17192: PPUSH
17193: CALL_OW 302
17197: NOT
17198: IFFALSE 17218
// tmp := tmp diff i else
17200: LD_ADDR_VAR 0 5
17204: PUSH
17205: LD_VAR 0 5
17209: PUSH
17210: LD_VAR 0 1
17214: DIFF
17215: ST_TO_ADDR
17216: GO 17252
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17218: LD_VAR 0 1
17222: PPUSH
17223: LD_INT 22
17225: PUSH
17226: LD_INT 1
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 69
17237: PPUSH
17238: LD_VAR 0 1
17242: PPUSH
17243: CALL_OW 74
17247: PPUSH
17248: CALL_OW 115
17252: GO 17185
17254: POP
17255: POP
// until not tmp ;
17256: LD_VAR 0 5
17260: NOT
17261: IFFALSE 17168
// end ;
17263: PPOPN 5
17265: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17266: LD_EXP 47
17270: IFFALSE 17648
17272: GO 17274
17274: DISABLE
17275: LD_INT 0
17277: PPUSH
17278: PPUSH
17279: PPUSH
17280: PPUSH
// begin wait ( 0 0$20 ) ;
17281: LD_INT 700
17283: PPUSH
17284: CALL_OW 67
// uc_side := 5 ;
17288: LD_ADDR_OWVAR 20
17292: PUSH
17293: LD_INT 5
17295: ST_TO_ADDR
// uc_nation := 3 ;
17296: LD_ADDR_OWVAR 21
17300: PUSH
17301: LD_INT 3
17303: ST_TO_ADDR
// InitHc ;
17304: CALL_OW 19
// hc_importance := 0 ;
17308: LD_ADDR_OWVAR 32
17312: PUSH
17313: LD_INT 0
17315: ST_TO_ADDR
// tmp := [ ] ;
17316: LD_ADDR_VAR 0 2
17320: PUSH
17321: EMPTY
17322: ST_TO_ADDR
// InitHC_All ( ) ;
17323: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17327: LD_INT 0
17329: PPUSH
17330: LD_INT 2
17332: PPUSH
17333: LD_INT 6
17335: PPUSH
17336: CALL_OW 380
// eng := CreateHuman ;
17340: LD_ADDR_VAR 0 4
17344: PUSH
17345: CALL_OW 44
17349: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17350: LD_VAR 0 4
17354: PPUSH
17355: LD_INT 78
17357: PPUSH
17358: LD_INT 2
17360: PPUSH
17361: LD_INT 4
17363: PPUSH
17364: LD_INT 0
17366: PPUSH
17367: CALL_OW 50
// for i = 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
17371: LD_ADDR_VAR 0 3
17375: PUSH
17376: DOUBLE
17377: LD_INT 1
17379: DEC
17380: ST_TO_ADDR
17381: LD_INT 3
17383: PUSH
17384: LD_INT 3
17386: PUSH
17387: LD_INT 4
17389: PUSH
17390: LD_INT 5
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: PUSH
17399: LD_OWVAR 67
17403: ARRAY
17404: PUSH
17405: FOR_TO
17406: IFFALSE 17495
// begin InitHC_All ( ) ;
17408: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17412: LD_INT 0
17414: PPUSH
17415: LD_INT 1
17417: PPUSH
17418: LD_INT 4
17420: PUSH
17421: LD_INT 5
17423: PUSH
17424: LD_INT 6
17426: PUSH
17427: LD_INT 6
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: PUSH
17436: LD_OWVAR 67
17440: ARRAY
17441: PPUSH
17442: CALL_OW 380
// un := CreateHuman ;
17446: LD_ADDR_VAR 0 1
17450: PUSH
17451: CALL_OW 44
17455: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17456: LD_VAR 0 1
17460: PPUSH
17461: LD_INT 78
17463: PPUSH
17464: LD_INT 2
17466: PPUSH
17467: LD_INT 4
17469: PPUSH
17470: LD_INT 0
17472: PPUSH
17473: CALL_OW 50
// tmp := tmp ^ un ;
17477: LD_ADDR_VAR 0 2
17481: PUSH
17482: LD_VAR 0 2
17486: PUSH
17487: LD_VAR 0 1
17491: ADD
17492: ST_TO_ADDR
// end ;
17493: GO 17405
17495: POP
17496: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17497: LD_VAR 0 2
17501: PPUSH
17502: LD_INT 49
17504: PPUSH
17505: LD_INT 3
17507: PPUSH
17508: CALL_OW 111
// wait ( 0 0$2 ) ;
17512: LD_INT 70
17514: PPUSH
17515: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17519: LD_VAR 0 4
17523: PPUSH
17524: LD_INT 49
17526: PPUSH
17527: LD_INT 3
17529: PPUSH
17530: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17534: LD_VAR 0 4
17538: PPUSH
17539: LD_INT 4
17541: PPUSH
17542: CALL_OW 227
// wait ( 0 0$10 ) ;
17546: LD_INT 350
17548: PPUSH
17549: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17553: LD_INT 35
17555: PPUSH
17556: CALL_OW 67
// for i in tmp do
17560: LD_ADDR_VAR 0 3
17564: PUSH
17565: LD_VAR 0 2
17569: PUSH
17570: FOR_IN
17571: IFFALSE 17639
// if not IsOk ( i ) then
17573: LD_VAR 0 3
17577: PPUSH
17578: CALL_OW 302
17582: NOT
17583: IFFALSE 17603
// tmp := tmp diff i else
17585: LD_ADDR_VAR 0 2
17589: PUSH
17590: LD_VAR 0 2
17594: PUSH
17595: LD_VAR 0 3
17599: DIFF
17600: ST_TO_ADDR
17601: GO 17637
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17603: LD_VAR 0 3
17607: PPUSH
17608: LD_INT 22
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PPUSH
17618: CALL_OW 69
17622: PPUSH
17623: LD_VAR 0 3
17627: PPUSH
17628: CALL_OW 74
17632: PPUSH
17633: CALL_OW 115
17637: GO 17570
17639: POP
17640: POP
// until not tmp ;
17641: LD_VAR 0 2
17645: NOT
17646: IFFALSE 17553
// end ; end_of_file
17648: PPOPN 4
17650: END
// every 0 0$1 trigger startTimer = 1 do
17651: LD_EXP 30
17655: PUSH
17656: LD_INT 1
17658: EQUAL
17659: IFFALSE 17789
17661: GO 17663
17663: DISABLE
// begin enable ;
17664: ENABLE
// if timerStatus = 1 then
17665: LD_EXP 29
17669: PUSH
17670: LD_INT 1
17672: EQUAL
17673: IFFALSE 17706
// begin timeToSupport = timeToSupport - 0 0$01 ;
17675: LD_ADDR_EXP 28
17679: PUSH
17680: LD_EXP 28
17684: PUSH
17685: LD_INT 35
17687: MINUS
17688: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17689: LD_ADDR_OWVAR 47
17693: PUSH
17694: LD_STRING #Am04-1
17696: PUSH
17697: LD_EXP 28
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: ST_TO_ADDR
// end ; if timerStatus = 2 then
17706: LD_EXP 29
17710: PUSH
17711: LD_INT 2
17713: EQUAL
17714: IFFALSE 17747
// begin timeToSupport = timeToSupport - 0 0$01 ;
17716: LD_ADDR_EXP 28
17720: PUSH
17721: LD_EXP 28
17725: PUSH
17726: LD_INT 35
17728: MINUS
17729: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17730: LD_ADDR_OWVAR 47
17734: PUSH
17735: LD_STRING #Am04-2
17737: PUSH
17738: LD_EXP 28
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: ST_TO_ADDR
// end ; if timerStatus = 3 then
17747: LD_EXP 29
17751: PUSH
17752: LD_INT 3
17754: EQUAL
17755: IFFALSE 17771
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17757: LD_ADDR_EXP 27
17761: PUSH
17762: LD_EXP 27
17766: PUSH
17767: LD_INT 35
17769: MINUS
17770: ST_TO_ADDR
// if timerStatus = 4 then
17771: LD_EXP 29
17775: PUSH
17776: LD_INT 4
17778: EQUAL
17779: IFFALSE 17789
// display_strings =  ;
17781: LD_ADDR_OWVAR 47
17785: PUSH
17786: LD_STRING 
17788: ST_TO_ADDR
// end ; end_of_file
17789: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17790: LD_EXP 15
17794: PPUSH
17795: CALL_OW 301
17799: PUSH
17800: LD_INT 22
17802: PUSH
17803: LD_INT 3
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 21
17812: PUSH
17813: LD_INT 1
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PPUSH
17824: CALL_OW 69
17828: PUSH
17829: LD_INT 14
17831: PUSH
17832: LD_INT 13
17834: PUSH
17835: LD_INT 12
17837: PUSH
17838: LD_INT 11
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: PUSH
17847: LD_OWVAR 67
17851: ARRAY
17852: LESS
17853: AND
17854: IFFALSE 18440
17856: GO 17858
17858: DISABLE
17859: LD_INT 0
17861: PPUSH
17862: PPUSH
17863: PPUSH
// begin AIEnable = 0 ;
17864: LD_ADDR_EXP 37
17868: PUSH
17869: LD_INT 0
17871: ST_TO_ADDR
// escapeAvalaible = 1 ;
17872: LD_ADDR_EXP 40
17876: PUSH
17877: LD_INT 1
17879: ST_TO_ADDR
// Video ( true ) ;
17880: LD_INT 1
17882: PPUSH
17883: CALL 77917 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17887: LD_INT 3
17889: PPUSH
17890: LD_INT 1
17892: PPUSH
17893: LD_INT 1
17895: PPUSH
17896: LD_INT 0
17898: PPUSH
17899: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17903: LD_INT 6
17905: PPUSH
17906: LD_INT 1
17908: PPUSH
17909: LD_INT 1
17911: PPUSH
17912: LD_INT 0
17914: PPUSH
17915: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17919: LD_INT 5
17921: PPUSH
17922: LD_INT 1
17924: PPUSH
17925: LD_INT 1
17927: PPUSH
17928: LD_INT 0
17930: PPUSH
17931: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17935: LD_INT 3
17937: PPUSH
17938: LD_INT 1
17940: PPUSH
17941: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17945: LD_INT 97
17947: PPUSH
17948: LD_INT 91
17950: PPUSH
17951: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17955: LD_INT 22
17957: PUSH
17958: LD_INT 3
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 21
17967: PUSH
17968: LD_INT 1
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PPUSH
17979: CALL_OW 69
17983: PPUSH
17984: CALL_OW 121
// wait ( 0 0$01 ) ;
17988: LD_INT 35
17990: PPUSH
17991: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17995: LD_INT 22
17997: PUSH
17998: LD_INT 3
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 21
18007: PUSH
18008: LD_INT 1
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PPUSH
18019: CALL_OW 69
18023: PPUSH
18024: LD_INT 124
18026: PPUSH
18027: LD_INT 98
18029: PPUSH
18030: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18034: LD_INT 22
18036: PUSH
18037: LD_INT 5
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 21
18046: PUSH
18047: LD_INT 1
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PPUSH
18058: CALL_OW 69
18062: PPUSH
18063: CALL_OW 121
// wait ( 0 0$01 ) ;
18067: LD_INT 35
18069: PPUSH
18070: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18074: LD_INT 22
18076: PUSH
18077: LD_INT 5
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 21
18086: PUSH
18087: LD_INT 1
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PPUSH
18098: CALL_OW 69
18102: PPUSH
18103: LD_INT 124
18105: PPUSH
18106: LD_INT 98
18108: PPUSH
18109: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18113: LD_INT 22
18115: PUSH
18116: LD_INT 6
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 21
18125: PUSH
18126: LD_INT 1
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 69
18141: PPUSH
18142: CALL_OW 121
// wait ( 0 0$01 ) ;
18146: LD_INT 35
18148: PPUSH
18149: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18153: LD_INT 22
18155: PUSH
18156: LD_INT 6
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: LD_INT 21
18165: PUSH
18166: LD_INT 1
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PPUSH
18177: CALL_OW 69
18181: PPUSH
18182: LD_INT 124
18184: PPUSH
18185: LD_INT 98
18187: PPUSH
18188: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18192: LD_INT 22
18194: PUSH
18195: LD_INT 1
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 21
18204: PUSH
18205: LD_INT 1
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: PPUSH
18221: LD_INT 124
18223: PPUSH
18224: LD_INT 96
18226: PPUSH
18227: CALL_OW 114
// wait ( 0 0$1 ) ;
18231: LD_INT 35
18233: PPUSH
18234: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18238: LD_INT 124
18240: PPUSH
18241: LD_INT 96
18243: PPUSH
18244: CALL_OW 84
// p := 0 0$0 ;
18248: LD_ADDR_VAR 0 3
18252: PUSH
18253: LD_INT 0
18255: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18256: LD_ADDR_VAR 0 2
18260: PUSH
18261: LD_INT 2
18263: PUSH
18264: LD_INT 22
18266: PUSH
18267: LD_INT 3
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 22
18276: PUSH
18277: LD_INT 6
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 21
18291: PUSH
18292: LD_INT 1
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PPUSH
18303: CALL_OW 69
18307: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18308: LD_INT 35
18310: PPUSH
18311: CALL_OW 67
// p := p + 0 0$1 ;
18315: LD_ADDR_VAR 0 3
18319: PUSH
18320: LD_VAR 0 3
18324: PUSH
18325: LD_INT 35
18327: PLUS
18328: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18329: LD_VAR 0 2
18333: PPUSH
18334: LD_INT 5
18336: PPUSH
18337: CALL_OW 113
// for i in tmp do
18341: LD_ADDR_VAR 0 1
18345: PUSH
18346: LD_VAR 0 2
18350: PUSH
18351: FOR_IN
18352: IFFALSE 18379
// if IsInArea ( tmp , RussianEscape ) then
18354: LD_VAR 0 2
18358: PPUSH
18359: LD_INT 5
18361: PPUSH
18362: CALL_OW 308
18366: IFFALSE 18377
// RemoveUnit ( i ) ;
18368: LD_VAR 0 1
18372: PPUSH
18373: CALL_OW 64
18377: GO 18351
18379: POP
18380: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18381: LD_INT 23
18383: PUSH
18384: LD_INT 3
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 21
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 24
18403: PUSH
18404: LD_INT 250
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: LIST
18415: PPUSH
18416: CALL_OW 69
18420: PUSH
18421: LD_INT 0
18423: EQUAL
18424: PUSH
18425: LD_VAR 0 3
18429: PUSH
18430: LD_INT 245
18432: GREATEREQUAL
18433: OR
18434: IFFALSE 18308
// FinishMission ;
18436: CALL 18443 0 0
// end ;
18440: PPOPN 3
18442: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18443: LD_INT 0
18445: PPUSH
18446: PPUSH
18447: PPUSH
18448: PPUSH
18449: PPUSH
// if not vehicleProduceCounter then
18450: LD_EXP 42
18454: NOT
18455: IFFALSE 18464
// SetAchievement ( ACH_INFANTRY ) ;
18457: LD_STRING ACH_INFANTRY
18459: PPUSH
18460: CALL_OW 543
// if tick <= 20 20$00 then
18464: LD_OWVAR 1
18468: PUSH
18469: LD_INT 42000
18471: LESSEQUAL
18472: IFFALSE 18488
// begin wait ( 3 ) ;
18474: LD_INT 3
18476: PPUSH
18477: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18481: LD_STRING ACH_ASPEED_4
18483: PPUSH
18484: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18488: LD_INT 22
18490: PPUSH
18491: CALL 19146 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18495: LD_INT 69
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: CALL_OW 321
18505: PPUSH
18506: LD_STRING GatlingInGamma
18508: PPUSH
18509: CALL_OW 39
// m1 := false ;
18513: LD_ADDR_VAR 0 3
18517: PUSH
18518: LD_INT 0
18520: ST_TO_ADDR
// m2 := false ;
18521: LD_ADDR_VAR 0 4
18525: PUSH
18526: LD_INT 0
18528: ST_TO_ADDR
// m3 := false ;
18529: LD_ADDR_VAR 0 5
18533: PUSH
18534: LD_INT 0
18536: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18537: LD_EXP 34
18541: PUSH
18542: LD_INT 1
18544: EQUAL
18545: PUSH
18546: LD_EXP 35
18550: PUSH
18551: LD_INT 1
18553: EQUAL
18554: AND
18555: IFFALSE 18577
// begin AddMedal ( oil , 1 ) ;
18557: LD_STRING oil
18559: PPUSH
18560: LD_INT 1
18562: PPUSH
18563: CALL_OW 101
// m1 := true ;
18567: LD_ADDR_VAR 0 3
18571: PUSH
18572: LD_INT 1
18574: ST_TO_ADDR
// end else
18575: GO 18670
// begin if buildOil = 1 and buildPower = 0 then
18577: LD_EXP 34
18581: PUSH
18582: LD_INT 1
18584: EQUAL
18585: PUSH
18586: LD_EXP 35
18590: PUSH
18591: LD_INT 0
18593: EQUAL
18594: AND
18595: IFFALSE 18608
// AddMedal ( oil , - 1 ) ;
18597: LD_STRING oil
18599: PPUSH
18600: LD_INT 1
18602: NEG
18603: PPUSH
18604: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18608: LD_EXP 34
18612: PUSH
18613: LD_INT 0
18615: EQUAL
18616: PUSH
18617: LD_EXP 35
18621: PUSH
18622: LD_INT 1
18624: EQUAL
18625: AND
18626: IFFALSE 18639
// AddMedal ( oil , - 2 ) ;
18628: LD_STRING oil
18630: PPUSH
18631: LD_INT 2
18633: NEG
18634: PPUSH
18635: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18639: LD_EXP 34
18643: PUSH
18644: LD_INT 0
18646: EQUAL
18647: PUSH
18648: LD_EXP 35
18652: PUSH
18653: LD_INT 0
18655: EQUAL
18656: AND
18657: IFFALSE 18670
// AddMedal ( oil , - 3 ) ;
18659: LD_STRING oil
18661: PPUSH
18662: LD_INT 3
18664: NEG
18665: PPUSH
18666: CALL_OW 101
// end ; if lostCounter > 3 then
18670: LD_EXP 38
18674: PUSH
18675: LD_INT 3
18677: GREATER
18678: IFFALSE 18693
// AddMedal ( deaths , - 1 ) else
18680: LD_STRING deaths
18682: PPUSH
18683: LD_INT 1
18685: NEG
18686: PPUSH
18687: CALL_OW 101
18691: GO 18711
// begin AddMedal ( deaths , 1 ) ;
18693: LD_STRING deaths
18695: PPUSH
18696: LD_INT 1
18698: PPUSH
18699: CALL_OW 101
// m2 := true ;
18703: LD_ADDR_VAR 0 4
18707: PUSH
18708: LD_INT 1
18710: ST_TO_ADDR
// end ; if honor = 1 then
18711: LD_EXP 39
18715: PUSH
18716: LD_INT 1
18718: EQUAL
18719: IFFALSE 18741
// begin AddMedal ( honour , 1 ) ;
18721: LD_STRING honour
18723: PPUSH
18724: LD_INT 1
18726: PPUSH
18727: CALL_OW 101
// m3 := true ;
18731: LD_ADDR_VAR 0 5
18735: PUSH
18736: LD_INT 1
18738: ST_TO_ADDR
// end else
18739: GO 18752
// AddMedal ( honour , - 1 ) ;
18741: LD_STRING honour
18743: PPUSH
18744: LD_INT 1
18746: NEG
18747: PPUSH
18748: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18752: LD_VAR 0 3
18756: PUSH
18757: LD_VAR 0 4
18761: AND
18762: PUSH
18763: LD_VAR 0 5
18767: AND
18768: PUSH
18769: LD_OWVAR 67
18773: PUSH
18774: LD_INT 3
18776: GREATEREQUAL
18777: AND
18778: IFFALSE 18790
// SetAchievementEX ( ACH_AMER , 4 ) ;
18780: LD_STRING ACH_AMER
18782: PPUSH
18783: LD_INT 4
18785: PPUSH
18786: CALL_OW 564
// GiveMedals ( Main ) ;
18790: LD_STRING Main
18792: PPUSH
18793: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18797: LD_INT 22
18799: PUSH
18800: LD_INT 1
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 23
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 21
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: LIST
18831: PPUSH
18832: CALL_OW 69
18836: PPUSH
18837: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18841: LD_EXP 1
18845: PPUSH
18846: LD_EXP 48
18850: PUSH
18851: LD_STRING JMM
18853: STR
18854: PPUSH
18855: CALL_OW 38
// if IsOK ( Bobby ) then
18859: LD_EXP 2
18863: PPUSH
18864: CALL_OW 302
18868: IFFALSE 18888
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18870: LD_EXP 2
18874: PPUSH
18875: LD_EXP 48
18879: PUSH
18880: LD_STRING Bobby
18882: STR
18883: PPUSH
18884: CALL_OW 38
// if IsOK ( Cyrus ) then
18888: LD_EXP 3
18892: PPUSH
18893: CALL_OW 302
18897: IFFALSE 18917
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18899: LD_EXP 3
18903: PPUSH
18904: LD_EXP 48
18908: PUSH
18909: LD_STRING Cyrus
18911: STR
18912: PPUSH
18913: CALL_OW 38
// if IsOK ( Lisa ) then
18917: LD_EXP 4
18921: PPUSH
18922: CALL_OW 302
18926: IFFALSE 18946
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18928: LD_EXP 4
18932: PPUSH
18933: LD_EXP 48
18937: PUSH
18938: LD_STRING Lisa
18940: STR
18941: PPUSH
18942: CALL_OW 38
// if IsOK ( Brown ) then
18946: LD_EXP 7
18950: PPUSH
18951: CALL_OW 302
18955: IFFALSE 18982
// begin ToLua ( enableBioCharacter(BIO_JEFF) ) ;
18957: LD_STRING enableBioCharacter(BIO_JEFF)
18959: PPUSH
18960: CALL_OW 559
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18964: LD_EXP 7
18968: PPUSH
18969: LD_EXP 48
18973: PUSH
18974: LD_STRING Brown
18976: STR
18977: PPUSH
18978: CALL_OW 38
// end ; if not IsDead ( Donaldson ) then
18982: LD_EXP 13
18986: PPUSH
18987: CALL_OW 301
18991: NOT
18992: IFFALSE 19019
// begin ToLua ( enableBioCharacter(BIO_LUCY) ) ;
18994: LD_STRING enableBioCharacter(BIO_LUCY)
18996: PPUSH
18997: CALL_OW 559
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19001: LD_EXP 13
19005: PPUSH
19006: LD_EXP 48
19010: PUSH
19011: LD_STRING Donaldson
19013: STR
19014: PPUSH
19015: CALL_OW 38
// end ; if not IsDead ( Frank ) then
19019: LD_EXP 5
19023: PPUSH
19024: CALL_OW 301
19028: NOT
19029: IFFALSE 19049
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19031: LD_EXP 5
19035: PPUSH
19036: LD_EXP 48
19040: PUSH
19041: LD_STRING Frank
19043: STR
19044: PPUSH
19045: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19049: LD_INT 50
19051: PUSH
19052: EMPTY
19053: LIST
19054: PUSH
19055: LD_INT 22
19057: PUSH
19058: LD_INT 1
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 21
19067: PUSH
19068: LD_INT 1
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: LIST
19079: PPUSH
19080: CALL_OW 69
19084: PUSH
19085: LD_EXP 1
19089: PUSH
19090: LD_EXP 2
19094: PUSH
19095: LD_EXP 3
19099: PUSH
19100: LD_EXP 4
19104: PUSH
19105: LD_EXP 7
19109: PUSH
19110: LD_EXP 13
19114: PUSH
19115: LD_EXP 5
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: DIFF
19129: PPUSH
19130: LD_STRING 04_other_survivors
19132: PPUSH
19133: CALL_OW 38
// YouWin ;
19137: CALL_OW 103
// end ;
19141: LD_VAR 0 1
19145: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19146: LD_INT 0
19148: PPUSH
19149: PPUSH
19150: PPUSH
19151: PPUSH
// gammaBase = [ ] ;
19152: LD_ADDR_VAR 0 4
19156: PUSH
19157: EMPTY
19158: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19159: LD_ADDR_VAR 0 5
19163: PUSH
19164: LD_VAR 0 1
19168: PPUSH
19169: LD_INT 22
19171: PUSH
19172: LD_INT 1
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 21
19181: PUSH
19182: LD_INT 3
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PPUSH
19193: CALL_OW 70
19197: ST_TO_ADDR
// for i in buildings do
19198: LD_ADDR_VAR 0 3
19202: PUSH
19203: LD_VAR 0 5
19207: PUSH
19208: FOR_IN
19209: IFFALSE 19546
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19211: LD_VAR 0 3
19215: PPUSH
19216: CALL_OW 266
19220: PUSH
19221: LD_INT 6
19223: PUSH
19224: LD_INT 7
19226: PUSH
19227: LD_INT 8
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: LIST
19234: IN
19235: IFFALSE 19349
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19237: LD_ADDR_VAR 0 4
19241: PUSH
19242: LD_VAR 0 4
19246: PUSH
19247: LD_VAR 0 3
19251: PPUSH
19252: CALL_OW 266
19256: PUSH
19257: LD_VAR 0 3
19261: PPUSH
19262: CALL_OW 250
19266: PUSH
19267: LD_VAR 0 3
19271: PPUSH
19272: CALL_OW 251
19276: PUSH
19277: LD_VAR 0 3
19281: PPUSH
19282: CALL_OW 254
19286: PUSH
19287: LD_VAR 0 3
19291: PPUSH
19292: CALL_OW 267
19296: PUSH
19297: LD_VAR 0 3
19301: PPUSH
19302: CALL_OW 248
19306: PUSH
19307: LD_VAR 0 3
19311: PPUSH
19312: LD_INT 1
19314: PPUSH
19315: CALL_OW 268
19319: PUSH
19320: LD_VAR 0 3
19324: PPUSH
19325: LD_INT 2
19327: PPUSH
19328: CALL_OW 268
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: PUSH
19343: EMPTY
19344: LIST
19345: ADD
19346: ST_TO_ADDR
19347: GO 19544
// if GetBType ( i ) in [ b_bunker ] then
19349: LD_VAR 0 3
19353: PPUSH
19354: CALL_OW 266
19358: PUSH
19359: LD_INT 32
19361: PUSH
19362: EMPTY
19363: LIST
19364: IN
19365: IFFALSE 19462
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19367: LD_ADDR_VAR 0 4
19371: PUSH
19372: LD_VAR 0 4
19376: PUSH
19377: LD_VAR 0 3
19381: PPUSH
19382: CALL_OW 266
19386: PUSH
19387: LD_VAR 0 3
19391: PPUSH
19392: CALL_OW 250
19396: PUSH
19397: LD_VAR 0 3
19401: PPUSH
19402: CALL_OW 251
19406: PUSH
19407: LD_VAR 0 3
19411: PPUSH
19412: CALL_OW 254
19416: PUSH
19417: LD_VAR 0 3
19421: PPUSH
19422: CALL_OW 267
19426: PUSH
19427: LD_VAR 0 3
19431: PPUSH
19432: CALL_OW 248
19436: PUSH
19437: LD_VAR 0 3
19441: PPUSH
19442: CALL_OW 269
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: PUSH
19456: EMPTY
19457: LIST
19458: ADD
19459: ST_TO_ADDR
19460: GO 19544
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19462: LD_ADDR_VAR 0 4
19466: PUSH
19467: LD_VAR 0 4
19471: PUSH
19472: LD_VAR 0 3
19476: PPUSH
19477: CALL_OW 266
19481: PUSH
19482: LD_VAR 0 3
19486: PPUSH
19487: CALL_OW 250
19491: PUSH
19492: LD_VAR 0 3
19496: PPUSH
19497: CALL_OW 251
19501: PUSH
19502: LD_VAR 0 3
19506: PPUSH
19507: CALL_OW 254
19511: PUSH
19512: LD_VAR 0 3
19516: PPUSH
19517: CALL_OW 267
19521: PUSH
19522: LD_VAR 0 3
19526: PPUSH
19527: CALL_OW 248
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: PUSH
19540: EMPTY
19541: LIST
19542: ADD
19543: ST_TO_ADDR
// end ;
19544: GO 19208
19546: POP
19547: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19548: LD_VAR 0 4
19552: PPUSH
19553: LD_STRING GammaBase
19555: PPUSH
19556: CALL_OW 39
// end ; end_of_file
19560: LD_VAR 0 2
19564: RET
// every 1 1$15 do
19565: GO 19567
19567: DISABLE
// begin if supply <= 13 and supply > 7 then
19568: LD_EXP 36
19572: PUSH
19573: LD_INT 13
19575: LESSEQUAL
19576: PUSH
19577: LD_EXP 36
19581: PUSH
19582: LD_INT 7
19584: GREATER
19585: AND
19586: IFFALSE 19609
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19588: LD_INT 3
19590: PPUSH
19591: LD_INT 5
19593: PPUSH
19594: CALL_OW 12
19598: PPUSH
19599: LD_INT 18
19601: PPUSH
19602: LD_INT 1
19604: PPUSH
19605: CALL_OW 55
// if supply <= 7 and supply > 4 then
19609: LD_EXP 36
19613: PUSH
19614: LD_INT 7
19616: LESSEQUAL
19617: PUSH
19618: LD_EXP 36
19622: PUSH
19623: LD_INT 4
19625: GREATER
19626: AND
19627: IFFALSE 19650
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19629: LD_INT 3
19631: PPUSH
19632: LD_INT 5
19634: PPUSH
19635: CALL_OW 12
19639: PPUSH
19640: LD_INT 19
19642: PPUSH
19643: LD_INT 1
19645: PPUSH
19646: CALL_OW 55
// if supply <= 4 and supply > 0 then
19650: LD_EXP 36
19654: PUSH
19655: LD_INT 4
19657: LESSEQUAL
19658: PUSH
19659: LD_EXP 36
19663: PUSH
19664: LD_INT 0
19666: GREATER
19667: AND
19668: IFFALSE 19691
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19670: LD_INT 3
19672: PPUSH
19673: LD_INT 5
19675: PPUSH
19676: CALL_OW 12
19680: PPUSH
19681: LD_INT 20
19683: PPUSH
19684: LD_INT 1
19686: PPUSH
19687: CALL_OW 55
// if supply then
19691: LD_EXP 36
19695: IFFALSE 19712
// begin supply = supply - 1 ;
19697: LD_ADDR_EXP 36
19701: PUSH
19702: LD_EXP 36
19706: PUSH
19707: LD_INT 1
19709: MINUS
19710: ST_TO_ADDR
// enable ;
19711: ENABLE
// end ; end ; end_of_file end_of_file
19712: END
// export globalGameSaveCounter ; every 0 0$1 do
19713: GO 19715
19715: DISABLE
// begin enable ;
19716: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19717: LD_STRING updateTimer(
19719: PUSH
19720: LD_OWVAR 1
19724: STR
19725: PUSH
19726: LD_STRING );
19728: STR
19729: PPUSH
19730: CALL_OW 559
// end ;
19734: END
// every 0 0$1 do
19735: GO 19737
19737: DISABLE
// begin globalGameSaveCounter := 0 ;
19738: LD_ADDR_EXP 50
19742: PUSH
19743: LD_INT 0
19745: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19746: LD_STRING setGameSaveCounter(0)
19748: PPUSH
19749: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19753: LD_STRING initStreamRollete();
19755: PPUSH
19756: CALL_OW 559
// InitStreamMode ;
19760: CALL 21086 0 0
// DefineStreamItems ( false ) ;
19764: LD_INT 0
19766: PPUSH
19767: CALL 21550 0 1
// end ;
19771: END
// export function SOS_MapStart ( ) ; begin
19772: LD_INT 0
19774: PPUSH
// if streamModeActive then
19775: LD_EXP 51
19779: IFFALSE 19788
// DefineStreamItems ( true ) ;
19781: LD_INT 1
19783: PPUSH
19784: CALL 21550 0 1
// UpdateLuaVariables ( ) ;
19788: CALL 19805 0 0
// UpdateFactoryWaypoints ( ) ;
19792: CALL 34419 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19796: CALL 34676 0 0
// end ;
19800: LD_VAR 0 1
19804: RET
// function UpdateLuaVariables ( ) ; begin
19805: LD_INT 0
19807: PPUSH
// if globalGameSaveCounter then
19808: LD_EXP 50
19812: IFFALSE 19846
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19814: LD_ADDR_EXP 50
19818: PUSH
19819: LD_EXP 50
19823: PPUSH
19824: CALL 79306 0 1
19828: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19829: LD_STRING setGameSaveCounter(
19831: PUSH
19832: LD_EXP 50
19836: STR
19837: PUSH
19838: LD_STRING )
19840: STR
19841: PPUSH
19842: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19846: LD_STRING setGameDifficulty(
19848: PUSH
19849: LD_OWVAR 67
19853: STR
19854: PUSH
19855: LD_STRING )
19857: STR
19858: PPUSH
19859: CALL_OW 559
// end ;
19863: LD_VAR 0 1
19867: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19868: LD_INT 0
19870: PPUSH
// if p2 = stream_mode then
19871: LD_VAR 0 2
19875: PUSH
19876: LD_INT 100
19878: EQUAL
19879: IFFALSE 20882
// begin if not StreamModeActive then
19881: LD_EXP 51
19885: NOT
19886: IFFALSE 19896
// StreamModeActive := true ;
19888: LD_ADDR_EXP 51
19892: PUSH
19893: LD_INT 1
19895: ST_TO_ADDR
// if p3 = 0 then
19896: LD_VAR 0 3
19900: PUSH
19901: LD_INT 0
19903: EQUAL
19904: IFFALSE 19910
// InitStreamMode ;
19906: CALL 21086 0 0
// if p3 = 1 then
19910: LD_VAR 0 3
19914: PUSH
19915: LD_INT 1
19917: EQUAL
19918: IFFALSE 19928
// sRocket := true ;
19920: LD_ADDR_EXP 56
19924: PUSH
19925: LD_INT 1
19927: ST_TO_ADDR
// if p3 = 2 then
19928: LD_VAR 0 3
19932: PUSH
19933: LD_INT 2
19935: EQUAL
19936: IFFALSE 19946
// sSpeed := true ;
19938: LD_ADDR_EXP 55
19942: PUSH
19943: LD_INT 1
19945: ST_TO_ADDR
// if p3 = 3 then
19946: LD_VAR 0 3
19950: PUSH
19951: LD_INT 3
19953: EQUAL
19954: IFFALSE 19964
// sEngine := true ;
19956: LD_ADDR_EXP 57
19960: PUSH
19961: LD_INT 1
19963: ST_TO_ADDR
// if p3 = 4 then
19964: LD_VAR 0 3
19968: PUSH
19969: LD_INT 4
19971: EQUAL
19972: IFFALSE 19982
// sSpec := true ;
19974: LD_ADDR_EXP 54
19978: PUSH
19979: LD_INT 1
19981: ST_TO_ADDR
// if p3 = 5 then
19982: LD_VAR 0 3
19986: PUSH
19987: LD_INT 5
19989: EQUAL
19990: IFFALSE 20000
// sLevel := true ;
19992: LD_ADDR_EXP 58
19996: PUSH
19997: LD_INT 1
19999: ST_TO_ADDR
// if p3 = 6 then
20000: LD_VAR 0 3
20004: PUSH
20005: LD_INT 6
20007: EQUAL
20008: IFFALSE 20018
// sArmoury := true ;
20010: LD_ADDR_EXP 59
20014: PUSH
20015: LD_INT 1
20017: ST_TO_ADDR
// if p3 = 7 then
20018: LD_VAR 0 3
20022: PUSH
20023: LD_INT 7
20025: EQUAL
20026: IFFALSE 20036
// sRadar := true ;
20028: LD_ADDR_EXP 60
20032: PUSH
20033: LD_INT 1
20035: ST_TO_ADDR
// if p3 = 8 then
20036: LD_VAR 0 3
20040: PUSH
20041: LD_INT 8
20043: EQUAL
20044: IFFALSE 20054
// sBunker := true ;
20046: LD_ADDR_EXP 61
20050: PUSH
20051: LD_INT 1
20053: ST_TO_ADDR
// if p3 = 9 then
20054: LD_VAR 0 3
20058: PUSH
20059: LD_INT 9
20061: EQUAL
20062: IFFALSE 20072
// sHack := true ;
20064: LD_ADDR_EXP 62
20068: PUSH
20069: LD_INT 1
20071: ST_TO_ADDR
// if p3 = 10 then
20072: LD_VAR 0 3
20076: PUSH
20077: LD_INT 10
20079: EQUAL
20080: IFFALSE 20090
// sFire := true ;
20082: LD_ADDR_EXP 63
20086: PUSH
20087: LD_INT 1
20089: ST_TO_ADDR
// if p3 = 11 then
20090: LD_VAR 0 3
20094: PUSH
20095: LD_INT 11
20097: EQUAL
20098: IFFALSE 20108
// sRefresh := true ;
20100: LD_ADDR_EXP 64
20104: PUSH
20105: LD_INT 1
20107: ST_TO_ADDR
// if p3 = 12 then
20108: LD_VAR 0 3
20112: PUSH
20113: LD_INT 12
20115: EQUAL
20116: IFFALSE 20126
// sExp := true ;
20118: LD_ADDR_EXP 65
20122: PUSH
20123: LD_INT 1
20125: ST_TO_ADDR
// if p3 = 13 then
20126: LD_VAR 0 3
20130: PUSH
20131: LD_INT 13
20133: EQUAL
20134: IFFALSE 20144
// sDepot := true ;
20136: LD_ADDR_EXP 66
20140: PUSH
20141: LD_INT 1
20143: ST_TO_ADDR
// if p3 = 14 then
20144: LD_VAR 0 3
20148: PUSH
20149: LD_INT 14
20151: EQUAL
20152: IFFALSE 20162
// sFlag := true ;
20154: LD_ADDR_EXP 67
20158: PUSH
20159: LD_INT 1
20161: ST_TO_ADDR
// if p3 = 15 then
20162: LD_VAR 0 3
20166: PUSH
20167: LD_INT 15
20169: EQUAL
20170: IFFALSE 20180
// sKamikadze := true ;
20172: LD_ADDR_EXP 75
20176: PUSH
20177: LD_INT 1
20179: ST_TO_ADDR
// if p3 = 16 then
20180: LD_VAR 0 3
20184: PUSH
20185: LD_INT 16
20187: EQUAL
20188: IFFALSE 20198
// sTroll := true ;
20190: LD_ADDR_EXP 76
20194: PUSH
20195: LD_INT 1
20197: ST_TO_ADDR
// if p3 = 17 then
20198: LD_VAR 0 3
20202: PUSH
20203: LD_INT 17
20205: EQUAL
20206: IFFALSE 20216
// sSlow := true ;
20208: LD_ADDR_EXP 77
20212: PUSH
20213: LD_INT 1
20215: ST_TO_ADDR
// if p3 = 18 then
20216: LD_VAR 0 3
20220: PUSH
20221: LD_INT 18
20223: EQUAL
20224: IFFALSE 20234
// sLack := true ;
20226: LD_ADDR_EXP 78
20230: PUSH
20231: LD_INT 1
20233: ST_TO_ADDR
// if p3 = 19 then
20234: LD_VAR 0 3
20238: PUSH
20239: LD_INT 19
20241: EQUAL
20242: IFFALSE 20252
// sTank := true ;
20244: LD_ADDR_EXP 80
20248: PUSH
20249: LD_INT 1
20251: ST_TO_ADDR
// if p3 = 20 then
20252: LD_VAR 0 3
20256: PUSH
20257: LD_INT 20
20259: EQUAL
20260: IFFALSE 20270
// sRemote := true ;
20262: LD_ADDR_EXP 81
20266: PUSH
20267: LD_INT 1
20269: ST_TO_ADDR
// if p3 = 21 then
20270: LD_VAR 0 3
20274: PUSH
20275: LD_INT 21
20277: EQUAL
20278: IFFALSE 20288
// sPowell := true ;
20280: LD_ADDR_EXP 82
20284: PUSH
20285: LD_INT 1
20287: ST_TO_ADDR
// if p3 = 22 then
20288: LD_VAR 0 3
20292: PUSH
20293: LD_INT 22
20295: EQUAL
20296: IFFALSE 20306
// sTeleport := true ;
20298: LD_ADDR_EXP 85
20302: PUSH
20303: LD_INT 1
20305: ST_TO_ADDR
// if p3 = 23 then
20306: LD_VAR 0 3
20310: PUSH
20311: LD_INT 23
20313: EQUAL
20314: IFFALSE 20324
// sOilTower := true ;
20316: LD_ADDR_EXP 87
20320: PUSH
20321: LD_INT 1
20323: ST_TO_ADDR
// if p3 = 24 then
20324: LD_VAR 0 3
20328: PUSH
20329: LD_INT 24
20331: EQUAL
20332: IFFALSE 20342
// sShovel := true ;
20334: LD_ADDR_EXP 88
20338: PUSH
20339: LD_INT 1
20341: ST_TO_ADDR
// if p3 = 25 then
20342: LD_VAR 0 3
20346: PUSH
20347: LD_INT 25
20349: EQUAL
20350: IFFALSE 20360
// sSheik := true ;
20352: LD_ADDR_EXP 89
20356: PUSH
20357: LD_INT 1
20359: ST_TO_ADDR
// if p3 = 26 then
20360: LD_VAR 0 3
20364: PUSH
20365: LD_INT 26
20367: EQUAL
20368: IFFALSE 20378
// sEarthquake := true ;
20370: LD_ADDR_EXP 91
20374: PUSH
20375: LD_INT 1
20377: ST_TO_ADDR
// if p3 = 27 then
20378: LD_VAR 0 3
20382: PUSH
20383: LD_INT 27
20385: EQUAL
20386: IFFALSE 20396
// sAI := true ;
20388: LD_ADDR_EXP 92
20392: PUSH
20393: LD_INT 1
20395: ST_TO_ADDR
// if p3 = 28 then
20396: LD_VAR 0 3
20400: PUSH
20401: LD_INT 28
20403: EQUAL
20404: IFFALSE 20414
// sCargo := true ;
20406: LD_ADDR_EXP 95
20410: PUSH
20411: LD_INT 1
20413: ST_TO_ADDR
// if p3 = 29 then
20414: LD_VAR 0 3
20418: PUSH
20419: LD_INT 29
20421: EQUAL
20422: IFFALSE 20432
// sDLaser := true ;
20424: LD_ADDR_EXP 96
20428: PUSH
20429: LD_INT 1
20431: ST_TO_ADDR
// if p3 = 30 then
20432: LD_VAR 0 3
20436: PUSH
20437: LD_INT 30
20439: EQUAL
20440: IFFALSE 20450
// sExchange := true ;
20442: LD_ADDR_EXP 97
20446: PUSH
20447: LD_INT 1
20449: ST_TO_ADDR
// if p3 = 31 then
20450: LD_VAR 0 3
20454: PUSH
20455: LD_INT 31
20457: EQUAL
20458: IFFALSE 20468
// sFac := true ;
20460: LD_ADDR_EXP 98
20464: PUSH
20465: LD_INT 1
20467: ST_TO_ADDR
// if p3 = 32 then
20468: LD_VAR 0 3
20472: PUSH
20473: LD_INT 32
20475: EQUAL
20476: IFFALSE 20486
// sPower := true ;
20478: LD_ADDR_EXP 99
20482: PUSH
20483: LD_INT 1
20485: ST_TO_ADDR
// if p3 = 33 then
20486: LD_VAR 0 3
20490: PUSH
20491: LD_INT 33
20493: EQUAL
20494: IFFALSE 20504
// sRandom := true ;
20496: LD_ADDR_EXP 100
20500: PUSH
20501: LD_INT 1
20503: ST_TO_ADDR
// if p3 = 34 then
20504: LD_VAR 0 3
20508: PUSH
20509: LD_INT 34
20511: EQUAL
20512: IFFALSE 20522
// sShield := true ;
20514: LD_ADDR_EXP 101
20518: PUSH
20519: LD_INT 1
20521: ST_TO_ADDR
// if p3 = 35 then
20522: LD_VAR 0 3
20526: PUSH
20527: LD_INT 35
20529: EQUAL
20530: IFFALSE 20540
// sTime := true ;
20532: LD_ADDR_EXP 102
20536: PUSH
20537: LD_INT 1
20539: ST_TO_ADDR
// if p3 = 36 then
20540: LD_VAR 0 3
20544: PUSH
20545: LD_INT 36
20547: EQUAL
20548: IFFALSE 20558
// sTools := true ;
20550: LD_ADDR_EXP 103
20554: PUSH
20555: LD_INT 1
20557: ST_TO_ADDR
// if p3 = 101 then
20558: LD_VAR 0 3
20562: PUSH
20563: LD_INT 101
20565: EQUAL
20566: IFFALSE 20576
// sSold := true ;
20568: LD_ADDR_EXP 68
20572: PUSH
20573: LD_INT 1
20575: ST_TO_ADDR
// if p3 = 102 then
20576: LD_VAR 0 3
20580: PUSH
20581: LD_INT 102
20583: EQUAL
20584: IFFALSE 20594
// sDiff := true ;
20586: LD_ADDR_EXP 69
20590: PUSH
20591: LD_INT 1
20593: ST_TO_ADDR
// if p3 = 103 then
20594: LD_VAR 0 3
20598: PUSH
20599: LD_INT 103
20601: EQUAL
20602: IFFALSE 20612
// sFog := true ;
20604: LD_ADDR_EXP 72
20608: PUSH
20609: LD_INT 1
20611: ST_TO_ADDR
// if p3 = 104 then
20612: LD_VAR 0 3
20616: PUSH
20617: LD_INT 104
20619: EQUAL
20620: IFFALSE 20630
// sReset := true ;
20622: LD_ADDR_EXP 73
20626: PUSH
20627: LD_INT 1
20629: ST_TO_ADDR
// if p3 = 105 then
20630: LD_VAR 0 3
20634: PUSH
20635: LD_INT 105
20637: EQUAL
20638: IFFALSE 20648
// sSun := true ;
20640: LD_ADDR_EXP 74
20644: PUSH
20645: LD_INT 1
20647: ST_TO_ADDR
// if p3 = 106 then
20648: LD_VAR 0 3
20652: PUSH
20653: LD_INT 106
20655: EQUAL
20656: IFFALSE 20666
// sTiger := true ;
20658: LD_ADDR_EXP 70
20662: PUSH
20663: LD_INT 1
20665: ST_TO_ADDR
// if p3 = 107 then
20666: LD_VAR 0 3
20670: PUSH
20671: LD_INT 107
20673: EQUAL
20674: IFFALSE 20684
// sBomb := true ;
20676: LD_ADDR_EXP 71
20680: PUSH
20681: LD_INT 1
20683: ST_TO_ADDR
// if p3 = 108 then
20684: LD_VAR 0 3
20688: PUSH
20689: LD_INT 108
20691: EQUAL
20692: IFFALSE 20702
// sWound := true ;
20694: LD_ADDR_EXP 79
20698: PUSH
20699: LD_INT 1
20701: ST_TO_ADDR
// if p3 = 109 then
20702: LD_VAR 0 3
20706: PUSH
20707: LD_INT 109
20709: EQUAL
20710: IFFALSE 20720
// sBetray := true ;
20712: LD_ADDR_EXP 83
20716: PUSH
20717: LD_INT 1
20719: ST_TO_ADDR
// if p3 = 110 then
20720: LD_VAR 0 3
20724: PUSH
20725: LD_INT 110
20727: EQUAL
20728: IFFALSE 20738
// sContamin := true ;
20730: LD_ADDR_EXP 84
20734: PUSH
20735: LD_INT 1
20737: ST_TO_ADDR
// if p3 = 111 then
20738: LD_VAR 0 3
20742: PUSH
20743: LD_INT 111
20745: EQUAL
20746: IFFALSE 20756
// sOil := true ;
20748: LD_ADDR_EXP 86
20752: PUSH
20753: LD_INT 1
20755: ST_TO_ADDR
// if p3 = 112 then
20756: LD_VAR 0 3
20760: PUSH
20761: LD_INT 112
20763: EQUAL
20764: IFFALSE 20774
// sStu := true ;
20766: LD_ADDR_EXP 90
20770: PUSH
20771: LD_INT 1
20773: ST_TO_ADDR
// if p3 = 113 then
20774: LD_VAR 0 3
20778: PUSH
20779: LD_INT 113
20781: EQUAL
20782: IFFALSE 20792
// sBazooka := true ;
20784: LD_ADDR_EXP 93
20788: PUSH
20789: LD_INT 1
20791: ST_TO_ADDR
// if p3 = 114 then
20792: LD_VAR 0 3
20796: PUSH
20797: LD_INT 114
20799: EQUAL
20800: IFFALSE 20810
// sMortar := true ;
20802: LD_ADDR_EXP 94
20806: PUSH
20807: LD_INT 1
20809: ST_TO_ADDR
// if p3 = 115 then
20810: LD_VAR 0 3
20814: PUSH
20815: LD_INT 115
20817: EQUAL
20818: IFFALSE 20828
// sRanger := true ;
20820: LD_ADDR_EXP 104
20824: PUSH
20825: LD_INT 1
20827: ST_TO_ADDR
// if p3 = 116 then
20828: LD_VAR 0 3
20832: PUSH
20833: LD_INT 116
20835: EQUAL
20836: IFFALSE 20846
// sComputer := true ;
20838: LD_ADDR_EXP 105
20842: PUSH
20843: LD_INT 1
20845: ST_TO_ADDR
// if p3 = 117 then
20846: LD_VAR 0 3
20850: PUSH
20851: LD_INT 117
20853: EQUAL
20854: IFFALSE 20864
// s30 := true ;
20856: LD_ADDR_EXP 106
20860: PUSH
20861: LD_INT 1
20863: ST_TO_ADDR
// if p3 = 118 then
20864: LD_VAR 0 3
20868: PUSH
20869: LD_INT 118
20871: EQUAL
20872: IFFALSE 20882
// s60 := true ;
20874: LD_ADDR_EXP 107
20878: PUSH
20879: LD_INT 1
20881: ST_TO_ADDR
// end ; if p2 = hack_mode then
20882: LD_VAR 0 2
20886: PUSH
20887: LD_INT 101
20889: EQUAL
20890: IFFALSE 21018
// begin case p3 of 1 :
20892: LD_VAR 0 3
20896: PUSH
20897: LD_INT 1
20899: DOUBLE
20900: EQUAL
20901: IFTRUE 20905
20903: GO 20912
20905: POP
// hHackUnlimitedResources ; 2 :
20906: CALL 33165 0 0
20910: GO 21018
20912: LD_INT 2
20914: DOUBLE
20915: EQUAL
20916: IFTRUE 20920
20918: GO 20927
20920: POP
// hHackSetLevel10 ; 3 :
20921: CALL 33298 0 0
20925: GO 21018
20927: LD_INT 3
20929: DOUBLE
20930: EQUAL
20931: IFTRUE 20935
20933: GO 20942
20935: POP
// hHackSetLevel10YourUnits ; 4 :
20936: CALL 33383 0 0
20940: GO 21018
20942: LD_INT 4
20944: DOUBLE
20945: EQUAL
20946: IFTRUE 20950
20948: GO 20957
20950: POP
// hHackInvincible ; 5 :
20951: CALL 33831 0 0
20955: GO 21018
20957: LD_INT 5
20959: DOUBLE
20960: EQUAL
20961: IFTRUE 20965
20963: GO 20972
20965: POP
// hHackInvisible ; 6 :
20966: CALL 33942 0 0
20970: GO 21018
20972: LD_INT 6
20974: DOUBLE
20975: EQUAL
20976: IFTRUE 20980
20978: GO 20987
20980: POP
// hHackChangeYourSide ; 7 :
20981: CALL 33999 0 0
20985: GO 21018
20987: LD_INT 7
20989: DOUBLE
20990: EQUAL
20991: IFTRUE 20995
20993: GO 21002
20995: POP
// hHackChangeUnitSide ; 8 :
20996: CALL 34041 0 0
21000: GO 21018
21002: LD_INT 8
21004: DOUBLE
21005: EQUAL
21006: IFTRUE 21010
21008: GO 21017
21010: POP
// hHackFog ; end ;
21011: CALL 34142 0 0
21015: GO 21018
21017: POP
// end ; if p2 = game_save_mode then
21018: LD_VAR 0 2
21022: PUSH
21023: LD_INT 102
21025: EQUAL
21026: IFFALSE 21081
// begin if p3 = 1 then
21028: LD_VAR 0 3
21032: PUSH
21033: LD_INT 1
21035: EQUAL
21036: IFFALSE 21048
// globalGameSaveCounter := p4 ;
21038: LD_ADDR_EXP 50
21042: PUSH
21043: LD_VAR 0 4
21047: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21048: LD_VAR 0 3
21052: PUSH
21053: LD_INT 2
21055: EQUAL
21056: PUSH
21057: LD_EXP 50
21061: AND
21062: IFFALSE 21081
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21064: LD_STRING setGameSaveCounter(
21066: PUSH
21067: LD_EXP 50
21071: STR
21072: PUSH
21073: LD_STRING )
21075: STR
21076: PPUSH
21077: CALL_OW 559
// end ; end ;
21081: LD_VAR 0 7
21085: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21086: LD_INT 0
21088: PPUSH
// streamModeActive := false ;
21089: LD_ADDR_EXP 51
21093: PUSH
21094: LD_INT 0
21096: ST_TO_ADDR
// normalCounter := 36 ;
21097: LD_ADDR_EXP 52
21101: PUSH
21102: LD_INT 36
21104: ST_TO_ADDR
// hardcoreCounter := 18 ;
21105: LD_ADDR_EXP 53
21109: PUSH
21110: LD_INT 18
21112: ST_TO_ADDR
// sRocket := false ;
21113: LD_ADDR_EXP 56
21117: PUSH
21118: LD_INT 0
21120: ST_TO_ADDR
// sSpeed := false ;
21121: LD_ADDR_EXP 55
21125: PUSH
21126: LD_INT 0
21128: ST_TO_ADDR
// sEngine := false ;
21129: LD_ADDR_EXP 57
21133: PUSH
21134: LD_INT 0
21136: ST_TO_ADDR
// sSpec := false ;
21137: LD_ADDR_EXP 54
21141: PUSH
21142: LD_INT 0
21144: ST_TO_ADDR
// sLevel := false ;
21145: LD_ADDR_EXP 58
21149: PUSH
21150: LD_INT 0
21152: ST_TO_ADDR
// sArmoury := false ;
21153: LD_ADDR_EXP 59
21157: PUSH
21158: LD_INT 0
21160: ST_TO_ADDR
// sRadar := false ;
21161: LD_ADDR_EXP 60
21165: PUSH
21166: LD_INT 0
21168: ST_TO_ADDR
// sBunker := false ;
21169: LD_ADDR_EXP 61
21173: PUSH
21174: LD_INT 0
21176: ST_TO_ADDR
// sHack := false ;
21177: LD_ADDR_EXP 62
21181: PUSH
21182: LD_INT 0
21184: ST_TO_ADDR
// sFire := false ;
21185: LD_ADDR_EXP 63
21189: PUSH
21190: LD_INT 0
21192: ST_TO_ADDR
// sRefresh := false ;
21193: LD_ADDR_EXP 64
21197: PUSH
21198: LD_INT 0
21200: ST_TO_ADDR
// sExp := false ;
21201: LD_ADDR_EXP 65
21205: PUSH
21206: LD_INT 0
21208: ST_TO_ADDR
// sDepot := false ;
21209: LD_ADDR_EXP 66
21213: PUSH
21214: LD_INT 0
21216: ST_TO_ADDR
// sFlag := false ;
21217: LD_ADDR_EXP 67
21221: PUSH
21222: LD_INT 0
21224: ST_TO_ADDR
// sKamikadze := false ;
21225: LD_ADDR_EXP 75
21229: PUSH
21230: LD_INT 0
21232: ST_TO_ADDR
// sTroll := false ;
21233: LD_ADDR_EXP 76
21237: PUSH
21238: LD_INT 0
21240: ST_TO_ADDR
// sSlow := false ;
21241: LD_ADDR_EXP 77
21245: PUSH
21246: LD_INT 0
21248: ST_TO_ADDR
// sLack := false ;
21249: LD_ADDR_EXP 78
21253: PUSH
21254: LD_INT 0
21256: ST_TO_ADDR
// sTank := false ;
21257: LD_ADDR_EXP 80
21261: PUSH
21262: LD_INT 0
21264: ST_TO_ADDR
// sRemote := false ;
21265: LD_ADDR_EXP 81
21269: PUSH
21270: LD_INT 0
21272: ST_TO_ADDR
// sPowell := false ;
21273: LD_ADDR_EXP 82
21277: PUSH
21278: LD_INT 0
21280: ST_TO_ADDR
// sTeleport := false ;
21281: LD_ADDR_EXP 85
21285: PUSH
21286: LD_INT 0
21288: ST_TO_ADDR
// sOilTower := false ;
21289: LD_ADDR_EXP 87
21293: PUSH
21294: LD_INT 0
21296: ST_TO_ADDR
// sShovel := false ;
21297: LD_ADDR_EXP 88
21301: PUSH
21302: LD_INT 0
21304: ST_TO_ADDR
// sSheik := false ;
21305: LD_ADDR_EXP 89
21309: PUSH
21310: LD_INT 0
21312: ST_TO_ADDR
// sEarthquake := false ;
21313: LD_ADDR_EXP 91
21317: PUSH
21318: LD_INT 0
21320: ST_TO_ADDR
// sAI := false ;
21321: LD_ADDR_EXP 92
21325: PUSH
21326: LD_INT 0
21328: ST_TO_ADDR
// sCargo := false ;
21329: LD_ADDR_EXP 95
21333: PUSH
21334: LD_INT 0
21336: ST_TO_ADDR
// sDLaser := false ;
21337: LD_ADDR_EXP 96
21341: PUSH
21342: LD_INT 0
21344: ST_TO_ADDR
// sExchange := false ;
21345: LD_ADDR_EXP 97
21349: PUSH
21350: LD_INT 0
21352: ST_TO_ADDR
// sFac := false ;
21353: LD_ADDR_EXP 98
21357: PUSH
21358: LD_INT 0
21360: ST_TO_ADDR
// sPower := false ;
21361: LD_ADDR_EXP 99
21365: PUSH
21366: LD_INT 0
21368: ST_TO_ADDR
// sRandom := false ;
21369: LD_ADDR_EXP 100
21373: PUSH
21374: LD_INT 0
21376: ST_TO_ADDR
// sShield := false ;
21377: LD_ADDR_EXP 101
21381: PUSH
21382: LD_INT 0
21384: ST_TO_ADDR
// sTime := false ;
21385: LD_ADDR_EXP 102
21389: PUSH
21390: LD_INT 0
21392: ST_TO_ADDR
// sTools := false ;
21393: LD_ADDR_EXP 103
21397: PUSH
21398: LD_INT 0
21400: ST_TO_ADDR
// sSold := false ;
21401: LD_ADDR_EXP 68
21405: PUSH
21406: LD_INT 0
21408: ST_TO_ADDR
// sDiff := false ;
21409: LD_ADDR_EXP 69
21413: PUSH
21414: LD_INT 0
21416: ST_TO_ADDR
// sFog := false ;
21417: LD_ADDR_EXP 72
21421: PUSH
21422: LD_INT 0
21424: ST_TO_ADDR
// sReset := false ;
21425: LD_ADDR_EXP 73
21429: PUSH
21430: LD_INT 0
21432: ST_TO_ADDR
// sSun := false ;
21433: LD_ADDR_EXP 74
21437: PUSH
21438: LD_INT 0
21440: ST_TO_ADDR
// sTiger := false ;
21441: LD_ADDR_EXP 70
21445: PUSH
21446: LD_INT 0
21448: ST_TO_ADDR
// sBomb := false ;
21449: LD_ADDR_EXP 71
21453: PUSH
21454: LD_INT 0
21456: ST_TO_ADDR
// sWound := false ;
21457: LD_ADDR_EXP 79
21461: PUSH
21462: LD_INT 0
21464: ST_TO_ADDR
// sBetray := false ;
21465: LD_ADDR_EXP 83
21469: PUSH
21470: LD_INT 0
21472: ST_TO_ADDR
// sContamin := false ;
21473: LD_ADDR_EXP 84
21477: PUSH
21478: LD_INT 0
21480: ST_TO_ADDR
// sOil := false ;
21481: LD_ADDR_EXP 86
21485: PUSH
21486: LD_INT 0
21488: ST_TO_ADDR
// sStu := false ;
21489: LD_ADDR_EXP 90
21493: PUSH
21494: LD_INT 0
21496: ST_TO_ADDR
// sBazooka := false ;
21497: LD_ADDR_EXP 93
21501: PUSH
21502: LD_INT 0
21504: ST_TO_ADDR
// sMortar := false ;
21505: LD_ADDR_EXP 94
21509: PUSH
21510: LD_INT 0
21512: ST_TO_ADDR
// sRanger := false ;
21513: LD_ADDR_EXP 104
21517: PUSH
21518: LD_INT 0
21520: ST_TO_ADDR
// sComputer := false ;
21521: LD_ADDR_EXP 105
21525: PUSH
21526: LD_INT 0
21528: ST_TO_ADDR
// s30 := false ;
21529: LD_ADDR_EXP 106
21533: PUSH
21534: LD_INT 0
21536: ST_TO_ADDR
// s60 := false ;
21537: LD_ADDR_EXP 107
21541: PUSH
21542: LD_INT 0
21544: ST_TO_ADDR
// end ;
21545: LD_VAR 0 1
21549: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21550: LD_INT 0
21552: PPUSH
21553: PPUSH
21554: PPUSH
21555: PPUSH
21556: PPUSH
21557: PPUSH
21558: PPUSH
// result := [ ] ;
21559: LD_ADDR_VAR 0 2
21563: PUSH
21564: EMPTY
21565: ST_TO_ADDR
// if campaign_id = 1 then
21566: LD_OWVAR 69
21570: PUSH
21571: LD_INT 1
21573: EQUAL
21574: IFFALSE 24740
// begin case mission_number of 1 :
21576: LD_OWVAR 70
21580: PUSH
21581: LD_INT 1
21583: DOUBLE
21584: EQUAL
21585: IFTRUE 21589
21587: GO 21665
21589: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21590: LD_ADDR_VAR 0 2
21594: PUSH
21595: LD_INT 2
21597: PUSH
21598: LD_INT 4
21600: PUSH
21601: LD_INT 11
21603: PUSH
21604: LD_INT 12
21606: PUSH
21607: LD_INT 15
21609: PUSH
21610: LD_INT 16
21612: PUSH
21613: LD_INT 22
21615: PUSH
21616: LD_INT 23
21618: PUSH
21619: LD_INT 26
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 101
21635: PUSH
21636: LD_INT 102
21638: PUSH
21639: LD_INT 106
21641: PUSH
21642: LD_INT 116
21644: PUSH
21645: LD_INT 117
21647: PUSH
21648: LD_INT 118
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: ST_TO_ADDR
21663: GO 24738
21665: LD_INT 2
21667: DOUBLE
21668: EQUAL
21669: IFTRUE 21673
21671: GO 21757
21673: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21674: LD_ADDR_VAR 0 2
21678: PUSH
21679: LD_INT 2
21681: PUSH
21682: LD_INT 4
21684: PUSH
21685: LD_INT 11
21687: PUSH
21688: LD_INT 12
21690: PUSH
21691: LD_INT 15
21693: PUSH
21694: LD_INT 16
21696: PUSH
21697: LD_INT 22
21699: PUSH
21700: LD_INT 23
21702: PUSH
21703: LD_INT 26
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 101
21719: PUSH
21720: LD_INT 102
21722: PUSH
21723: LD_INT 105
21725: PUSH
21726: LD_INT 106
21728: PUSH
21729: LD_INT 108
21731: PUSH
21732: LD_INT 116
21734: PUSH
21735: LD_INT 117
21737: PUSH
21738: LD_INT 118
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: ST_TO_ADDR
21755: GO 24738
21757: LD_INT 3
21759: DOUBLE
21760: EQUAL
21761: IFTRUE 21765
21763: GO 21853
21765: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21766: LD_ADDR_VAR 0 2
21770: PUSH
21771: LD_INT 2
21773: PUSH
21774: LD_INT 4
21776: PUSH
21777: LD_INT 5
21779: PUSH
21780: LD_INT 11
21782: PUSH
21783: LD_INT 12
21785: PUSH
21786: LD_INT 15
21788: PUSH
21789: LD_INT 16
21791: PUSH
21792: LD_INT 22
21794: PUSH
21795: LD_INT 26
21797: PUSH
21798: LD_INT 36
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 101
21815: PUSH
21816: LD_INT 102
21818: PUSH
21819: LD_INT 105
21821: PUSH
21822: LD_INT 106
21824: PUSH
21825: LD_INT 108
21827: PUSH
21828: LD_INT 116
21830: PUSH
21831: LD_INT 117
21833: PUSH
21834: LD_INT 118
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: ST_TO_ADDR
21851: GO 24738
21853: LD_INT 4
21855: DOUBLE
21856: EQUAL
21857: IFTRUE 21861
21859: GO 21957
21861: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21862: LD_ADDR_VAR 0 2
21866: PUSH
21867: LD_INT 2
21869: PUSH
21870: LD_INT 4
21872: PUSH
21873: LD_INT 5
21875: PUSH
21876: LD_INT 8
21878: PUSH
21879: LD_INT 11
21881: PUSH
21882: LD_INT 12
21884: PUSH
21885: LD_INT 15
21887: PUSH
21888: LD_INT 16
21890: PUSH
21891: LD_INT 22
21893: PUSH
21894: LD_INT 23
21896: PUSH
21897: LD_INT 26
21899: PUSH
21900: LD_INT 36
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 101
21919: PUSH
21920: LD_INT 102
21922: PUSH
21923: LD_INT 105
21925: PUSH
21926: LD_INT 106
21928: PUSH
21929: LD_INT 108
21931: PUSH
21932: LD_INT 116
21934: PUSH
21935: LD_INT 117
21937: PUSH
21938: LD_INT 118
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: ST_TO_ADDR
21955: GO 24738
21957: LD_INT 5
21959: DOUBLE
21960: EQUAL
21961: IFTRUE 21965
21963: GO 22077
21965: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21966: LD_ADDR_VAR 0 2
21970: PUSH
21971: LD_INT 2
21973: PUSH
21974: LD_INT 4
21976: PUSH
21977: LD_INT 5
21979: PUSH
21980: LD_INT 6
21982: PUSH
21983: LD_INT 8
21985: PUSH
21986: LD_INT 11
21988: PUSH
21989: LD_INT 12
21991: PUSH
21992: LD_INT 15
21994: PUSH
21995: LD_INT 16
21997: PUSH
21998: LD_INT 22
22000: PUSH
22001: LD_INT 23
22003: PUSH
22004: LD_INT 25
22006: PUSH
22007: LD_INT 26
22009: PUSH
22010: LD_INT 36
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 101
22031: PUSH
22032: LD_INT 102
22034: PUSH
22035: LD_INT 105
22037: PUSH
22038: LD_INT 106
22040: PUSH
22041: LD_INT 108
22043: PUSH
22044: LD_INT 109
22046: PUSH
22047: LD_INT 112
22049: PUSH
22050: LD_INT 116
22052: PUSH
22053: LD_INT 117
22055: PUSH
22056: LD_INT 118
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: ST_TO_ADDR
22075: GO 24738
22077: LD_INT 6
22079: DOUBLE
22080: EQUAL
22081: IFTRUE 22085
22083: GO 22217
22085: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22086: LD_ADDR_VAR 0 2
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: LD_INT 4
22096: PUSH
22097: LD_INT 5
22099: PUSH
22100: LD_INT 6
22102: PUSH
22103: LD_INT 8
22105: PUSH
22106: LD_INT 11
22108: PUSH
22109: LD_INT 12
22111: PUSH
22112: LD_INT 15
22114: PUSH
22115: LD_INT 16
22117: PUSH
22118: LD_INT 20
22120: PUSH
22121: LD_INT 21
22123: PUSH
22124: LD_INT 22
22126: PUSH
22127: LD_INT 23
22129: PUSH
22130: LD_INT 25
22132: PUSH
22133: LD_INT 26
22135: PUSH
22136: LD_INT 30
22138: PUSH
22139: LD_INT 31
22141: PUSH
22142: LD_INT 32
22144: PUSH
22145: LD_INT 36
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 101
22171: PUSH
22172: LD_INT 102
22174: PUSH
22175: LD_INT 105
22177: PUSH
22178: LD_INT 106
22180: PUSH
22181: LD_INT 108
22183: PUSH
22184: LD_INT 109
22186: PUSH
22187: LD_INT 112
22189: PUSH
22190: LD_INT 116
22192: PUSH
22193: LD_INT 117
22195: PUSH
22196: LD_INT 118
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: ST_TO_ADDR
22215: GO 24738
22217: LD_INT 7
22219: DOUBLE
22220: EQUAL
22221: IFTRUE 22225
22223: GO 22337
22225: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22226: LD_ADDR_VAR 0 2
22230: PUSH
22231: LD_INT 2
22233: PUSH
22234: LD_INT 4
22236: PUSH
22237: LD_INT 5
22239: PUSH
22240: LD_INT 7
22242: PUSH
22243: LD_INT 11
22245: PUSH
22246: LD_INT 12
22248: PUSH
22249: LD_INT 15
22251: PUSH
22252: LD_INT 16
22254: PUSH
22255: LD_INT 20
22257: PUSH
22258: LD_INT 21
22260: PUSH
22261: LD_INT 22
22263: PUSH
22264: LD_INT 23
22266: PUSH
22267: LD_INT 25
22269: PUSH
22270: LD_INT 26
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 101
22291: PUSH
22292: LD_INT 102
22294: PUSH
22295: LD_INT 103
22297: PUSH
22298: LD_INT 105
22300: PUSH
22301: LD_INT 106
22303: PUSH
22304: LD_INT 108
22306: PUSH
22307: LD_INT 112
22309: PUSH
22310: LD_INT 116
22312: PUSH
22313: LD_INT 117
22315: PUSH
22316: LD_INT 118
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: ST_TO_ADDR
22335: GO 24738
22337: LD_INT 8
22339: DOUBLE
22340: EQUAL
22341: IFTRUE 22345
22343: GO 22485
22345: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22346: LD_ADDR_VAR 0 2
22350: PUSH
22351: LD_INT 2
22353: PUSH
22354: LD_INT 4
22356: PUSH
22357: LD_INT 5
22359: PUSH
22360: LD_INT 6
22362: PUSH
22363: LD_INT 7
22365: PUSH
22366: LD_INT 8
22368: PUSH
22369: LD_INT 11
22371: PUSH
22372: LD_INT 12
22374: PUSH
22375: LD_INT 15
22377: PUSH
22378: LD_INT 16
22380: PUSH
22381: LD_INT 20
22383: PUSH
22384: LD_INT 21
22386: PUSH
22387: LD_INT 22
22389: PUSH
22390: LD_INT 23
22392: PUSH
22393: LD_INT 25
22395: PUSH
22396: LD_INT 26
22398: PUSH
22399: LD_INT 30
22401: PUSH
22402: LD_INT 31
22404: PUSH
22405: LD_INT 32
22407: PUSH
22408: LD_INT 36
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 101
22435: PUSH
22436: LD_INT 102
22438: PUSH
22439: LD_INT 103
22441: PUSH
22442: LD_INT 105
22444: PUSH
22445: LD_INT 106
22447: PUSH
22448: LD_INT 108
22450: PUSH
22451: LD_INT 109
22453: PUSH
22454: LD_INT 112
22456: PUSH
22457: LD_INT 116
22459: PUSH
22460: LD_INT 117
22462: PUSH
22463: LD_INT 118
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: ST_TO_ADDR
22483: GO 24738
22485: LD_INT 9
22487: DOUBLE
22488: EQUAL
22489: IFTRUE 22493
22491: GO 22641
22493: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22494: LD_ADDR_VAR 0 2
22498: PUSH
22499: LD_INT 2
22501: PUSH
22502: LD_INT 4
22504: PUSH
22505: LD_INT 5
22507: PUSH
22508: LD_INT 6
22510: PUSH
22511: LD_INT 7
22513: PUSH
22514: LD_INT 8
22516: PUSH
22517: LD_INT 11
22519: PUSH
22520: LD_INT 12
22522: PUSH
22523: LD_INT 15
22525: PUSH
22526: LD_INT 16
22528: PUSH
22529: LD_INT 20
22531: PUSH
22532: LD_INT 21
22534: PUSH
22535: LD_INT 22
22537: PUSH
22538: LD_INT 23
22540: PUSH
22541: LD_INT 25
22543: PUSH
22544: LD_INT 26
22546: PUSH
22547: LD_INT 28
22549: PUSH
22550: LD_INT 30
22552: PUSH
22553: LD_INT 31
22555: PUSH
22556: LD_INT 32
22558: PUSH
22559: LD_INT 36
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 101
22587: PUSH
22588: LD_INT 102
22590: PUSH
22591: LD_INT 103
22593: PUSH
22594: LD_INT 105
22596: PUSH
22597: LD_INT 106
22599: PUSH
22600: LD_INT 108
22602: PUSH
22603: LD_INT 109
22605: PUSH
22606: LD_INT 112
22608: PUSH
22609: LD_INT 114
22611: PUSH
22612: LD_INT 116
22614: PUSH
22615: LD_INT 117
22617: PUSH
22618: LD_INT 118
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: ST_TO_ADDR
22639: GO 24738
22641: LD_INT 10
22643: DOUBLE
22644: EQUAL
22645: IFTRUE 22649
22647: GO 22845
22649: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22650: LD_ADDR_VAR 0 2
22654: PUSH
22655: LD_INT 2
22657: PUSH
22658: LD_INT 4
22660: PUSH
22661: LD_INT 5
22663: PUSH
22664: LD_INT 6
22666: PUSH
22667: LD_INT 7
22669: PUSH
22670: LD_INT 8
22672: PUSH
22673: LD_INT 9
22675: PUSH
22676: LD_INT 10
22678: PUSH
22679: LD_INT 11
22681: PUSH
22682: LD_INT 12
22684: PUSH
22685: LD_INT 13
22687: PUSH
22688: LD_INT 14
22690: PUSH
22691: LD_INT 15
22693: PUSH
22694: LD_INT 16
22696: PUSH
22697: LD_INT 17
22699: PUSH
22700: LD_INT 18
22702: PUSH
22703: LD_INT 19
22705: PUSH
22706: LD_INT 20
22708: PUSH
22709: LD_INT 21
22711: PUSH
22712: LD_INT 22
22714: PUSH
22715: LD_INT 23
22717: PUSH
22718: LD_INT 24
22720: PUSH
22721: LD_INT 25
22723: PUSH
22724: LD_INT 26
22726: PUSH
22727: LD_INT 28
22729: PUSH
22730: LD_INT 30
22732: PUSH
22733: LD_INT 31
22735: PUSH
22736: LD_INT 32
22738: PUSH
22739: LD_INT 36
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 101
22775: PUSH
22776: LD_INT 102
22778: PUSH
22779: LD_INT 103
22781: PUSH
22782: LD_INT 104
22784: PUSH
22785: LD_INT 105
22787: PUSH
22788: LD_INT 106
22790: PUSH
22791: LD_INT 107
22793: PUSH
22794: LD_INT 108
22796: PUSH
22797: LD_INT 109
22799: PUSH
22800: LD_INT 110
22802: PUSH
22803: LD_INT 111
22805: PUSH
22806: LD_INT 112
22808: PUSH
22809: LD_INT 114
22811: PUSH
22812: LD_INT 116
22814: PUSH
22815: LD_INT 117
22817: PUSH
22818: LD_INT 118
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: ST_TO_ADDR
22843: GO 24738
22845: LD_INT 11
22847: DOUBLE
22848: EQUAL
22849: IFTRUE 22853
22851: GO 23057
22853: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22854: LD_ADDR_VAR 0 2
22858: PUSH
22859: LD_INT 2
22861: PUSH
22862: LD_INT 3
22864: PUSH
22865: LD_INT 4
22867: PUSH
22868: LD_INT 5
22870: PUSH
22871: LD_INT 6
22873: PUSH
22874: LD_INT 7
22876: PUSH
22877: LD_INT 8
22879: PUSH
22880: LD_INT 9
22882: PUSH
22883: LD_INT 10
22885: PUSH
22886: LD_INT 11
22888: PUSH
22889: LD_INT 12
22891: PUSH
22892: LD_INT 13
22894: PUSH
22895: LD_INT 14
22897: PUSH
22898: LD_INT 15
22900: PUSH
22901: LD_INT 16
22903: PUSH
22904: LD_INT 17
22906: PUSH
22907: LD_INT 18
22909: PUSH
22910: LD_INT 19
22912: PUSH
22913: LD_INT 20
22915: PUSH
22916: LD_INT 21
22918: PUSH
22919: LD_INT 22
22921: PUSH
22922: LD_INT 23
22924: PUSH
22925: LD_INT 24
22927: PUSH
22928: LD_INT 25
22930: PUSH
22931: LD_INT 26
22933: PUSH
22934: LD_INT 28
22936: PUSH
22937: LD_INT 30
22939: PUSH
22940: LD_INT 31
22942: PUSH
22943: LD_INT 32
22945: PUSH
22946: LD_INT 34
22948: PUSH
22949: LD_INT 36
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 101
22987: PUSH
22988: LD_INT 102
22990: PUSH
22991: LD_INT 103
22993: PUSH
22994: LD_INT 104
22996: PUSH
22997: LD_INT 105
22999: PUSH
23000: LD_INT 106
23002: PUSH
23003: LD_INT 107
23005: PUSH
23006: LD_INT 108
23008: PUSH
23009: LD_INT 109
23011: PUSH
23012: LD_INT 110
23014: PUSH
23015: LD_INT 111
23017: PUSH
23018: LD_INT 112
23020: PUSH
23021: LD_INT 114
23023: PUSH
23024: LD_INT 116
23026: PUSH
23027: LD_INT 117
23029: PUSH
23030: LD_INT 118
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: ST_TO_ADDR
23055: GO 24738
23057: LD_INT 12
23059: DOUBLE
23060: EQUAL
23061: IFTRUE 23065
23063: GO 23285
23065: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23066: LD_ADDR_VAR 0 2
23070: PUSH
23071: LD_INT 1
23073: PUSH
23074: LD_INT 2
23076: PUSH
23077: LD_INT 3
23079: PUSH
23080: LD_INT 4
23082: PUSH
23083: LD_INT 5
23085: PUSH
23086: LD_INT 6
23088: PUSH
23089: LD_INT 7
23091: PUSH
23092: LD_INT 8
23094: PUSH
23095: LD_INT 9
23097: PUSH
23098: LD_INT 10
23100: PUSH
23101: LD_INT 11
23103: PUSH
23104: LD_INT 12
23106: PUSH
23107: LD_INT 13
23109: PUSH
23110: LD_INT 14
23112: PUSH
23113: LD_INT 15
23115: PUSH
23116: LD_INT 16
23118: PUSH
23119: LD_INT 17
23121: PUSH
23122: LD_INT 18
23124: PUSH
23125: LD_INT 19
23127: PUSH
23128: LD_INT 20
23130: PUSH
23131: LD_INT 21
23133: PUSH
23134: LD_INT 22
23136: PUSH
23137: LD_INT 23
23139: PUSH
23140: LD_INT 24
23142: PUSH
23143: LD_INT 25
23145: PUSH
23146: LD_INT 26
23148: PUSH
23149: LD_INT 27
23151: PUSH
23152: LD_INT 28
23154: PUSH
23155: LD_INT 30
23157: PUSH
23158: LD_INT 31
23160: PUSH
23161: LD_INT 32
23163: PUSH
23164: LD_INT 33
23166: PUSH
23167: LD_INT 34
23169: PUSH
23170: LD_INT 36
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 101
23211: PUSH
23212: LD_INT 102
23214: PUSH
23215: LD_INT 103
23217: PUSH
23218: LD_INT 104
23220: PUSH
23221: LD_INT 105
23223: PUSH
23224: LD_INT 106
23226: PUSH
23227: LD_INT 107
23229: PUSH
23230: LD_INT 108
23232: PUSH
23233: LD_INT 109
23235: PUSH
23236: LD_INT 110
23238: PUSH
23239: LD_INT 111
23241: PUSH
23242: LD_INT 112
23244: PUSH
23245: LD_INT 113
23247: PUSH
23248: LD_INT 114
23250: PUSH
23251: LD_INT 116
23253: PUSH
23254: LD_INT 117
23256: PUSH
23257: LD_INT 118
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: ST_TO_ADDR
23283: GO 24738
23285: LD_INT 13
23287: DOUBLE
23288: EQUAL
23289: IFTRUE 23293
23291: GO 23501
23293: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23294: LD_ADDR_VAR 0 2
23298: PUSH
23299: LD_INT 1
23301: PUSH
23302: LD_INT 2
23304: PUSH
23305: LD_INT 3
23307: PUSH
23308: LD_INT 4
23310: PUSH
23311: LD_INT 5
23313: PUSH
23314: LD_INT 8
23316: PUSH
23317: LD_INT 9
23319: PUSH
23320: LD_INT 10
23322: PUSH
23323: LD_INT 11
23325: PUSH
23326: LD_INT 12
23328: PUSH
23329: LD_INT 14
23331: PUSH
23332: LD_INT 15
23334: PUSH
23335: LD_INT 16
23337: PUSH
23338: LD_INT 17
23340: PUSH
23341: LD_INT 18
23343: PUSH
23344: LD_INT 19
23346: PUSH
23347: LD_INT 20
23349: PUSH
23350: LD_INT 21
23352: PUSH
23353: LD_INT 22
23355: PUSH
23356: LD_INT 23
23358: PUSH
23359: LD_INT 24
23361: PUSH
23362: LD_INT 25
23364: PUSH
23365: LD_INT 26
23367: PUSH
23368: LD_INT 27
23370: PUSH
23371: LD_INT 28
23373: PUSH
23374: LD_INT 30
23376: PUSH
23377: LD_INT 31
23379: PUSH
23380: LD_INT 32
23382: PUSH
23383: LD_INT 33
23385: PUSH
23386: LD_INT 34
23388: PUSH
23389: LD_INT 36
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 101
23427: PUSH
23428: LD_INT 102
23430: PUSH
23431: LD_INT 103
23433: PUSH
23434: LD_INT 104
23436: PUSH
23437: LD_INT 105
23439: PUSH
23440: LD_INT 106
23442: PUSH
23443: LD_INT 107
23445: PUSH
23446: LD_INT 108
23448: PUSH
23449: LD_INT 109
23451: PUSH
23452: LD_INT 110
23454: PUSH
23455: LD_INT 111
23457: PUSH
23458: LD_INT 112
23460: PUSH
23461: LD_INT 113
23463: PUSH
23464: LD_INT 114
23466: PUSH
23467: LD_INT 116
23469: PUSH
23470: LD_INT 117
23472: PUSH
23473: LD_INT 118
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: ST_TO_ADDR
23499: GO 24738
23501: LD_INT 14
23503: DOUBLE
23504: EQUAL
23505: IFTRUE 23509
23507: GO 23733
23509: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23510: LD_ADDR_VAR 0 2
23514: PUSH
23515: LD_INT 1
23517: PUSH
23518: LD_INT 2
23520: PUSH
23521: LD_INT 3
23523: PUSH
23524: LD_INT 4
23526: PUSH
23527: LD_INT 5
23529: PUSH
23530: LD_INT 6
23532: PUSH
23533: LD_INT 7
23535: PUSH
23536: LD_INT 8
23538: PUSH
23539: LD_INT 9
23541: PUSH
23542: LD_INT 10
23544: PUSH
23545: LD_INT 11
23547: PUSH
23548: LD_INT 12
23550: PUSH
23551: LD_INT 13
23553: PUSH
23554: LD_INT 14
23556: PUSH
23557: LD_INT 15
23559: PUSH
23560: LD_INT 16
23562: PUSH
23563: LD_INT 17
23565: PUSH
23566: LD_INT 18
23568: PUSH
23569: LD_INT 19
23571: PUSH
23572: LD_INT 20
23574: PUSH
23575: LD_INT 21
23577: PUSH
23578: LD_INT 22
23580: PUSH
23581: LD_INT 23
23583: PUSH
23584: LD_INT 24
23586: PUSH
23587: LD_INT 25
23589: PUSH
23590: LD_INT 26
23592: PUSH
23593: LD_INT 27
23595: PUSH
23596: LD_INT 28
23598: PUSH
23599: LD_INT 29
23601: PUSH
23602: LD_INT 30
23604: PUSH
23605: LD_INT 31
23607: PUSH
23608: LD_INT 32
23610: PUSH
23611: LD_INT 33
23613: PUSH
23614: LD_INT 34
23616: PUSH
23617: LD_INT 36
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 101
23659: PUSH
23660: LD_INT 102
23662: PUSH
23663: LD_INT 103
23665: PUSH
23666: LD_INT 104
23668: PUSH
23669: LD_INT 105
23671: PUSH
23672: LD_INT 106
23674: PUSH
23675: LD_INT 107
23677: PUSH
23678: LD_INT 108
23680: PUSH
23681: LD_INT 109
23683: PUSH
23684: LD_INT 110
23686: PUSH
23687: LD_INT 111
23689: PUSH
23690: LD_INT 112
23692: PUSH
23693: LD_INT 113
23695: PUSH
23696: LD_INT 114
23698: PUSH
23699: LD_INT 116
23701: PUSH
23702: LD_INT 117
23704: PUSH
23705: LD_INT 118
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: ST_TO_ADDR
23731: GO 24738
23733: LD_INT 15
23735: DOUBLE
23736: EQUAL
23737: IFTRUE 23741
23739: GO 23965
23741: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23742: LD_ADDR_VAR 0 2
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: LD_INT 3
23755: PUSH
23756: LD_INT 4
23758: PUSH
23759: LD_INT 5
23761: PUSH
23762: LD_INT 6
23764: PUSH
23765: LD_INT 7
23767: PUSH
23768: LD_INT 8
23770: PUSH
23771: LD_INT 9
23773: PUSH
23774: LD_INT 10
23776: PUSH
23777: LD_INT 11
23779: PUSH
23780: LD_INT 12
23782: PUSH
23783: LD_INT 13
23785: PUSH
23786: LD_INT 14
23788: PUSH
23789: LD_INT 15
23791: PUSH
23792: LD_INT 16
23794: PUSH
23795: LD_INT 17
23797: PUSH
23798: LD_INT 18
23800: PUSH
23801: LD_INT 19
23803: PUSH
23804: LD_INT 20
23806: PUSH
23807: LD_INT 21
23809: PUSH
23810: LD_INT 22
23812: PUSH
23813: LD_INT 23
23815: PUSH
23816: LD_INT 24
23818: PUSH
23819: LD_INT 25
23821: PUSH
23822: LD_INT 26
23824: PUSH
23825: LD_INT 27
23827: PUSH
23828: LD_INT 28
23830: PUSH
23831: LD_INT 29
23833: PUSH
23834: LD_INT 30
23836: PUSH
23837: LD_INT 31
23839: PUSH
23840: LD_INT 32
23842: PUSH
23843: LD_INT 33
23845: PUSH
23846: LD_INT 34
23848: PUSH
23849: LD_INT 36
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 101
23891: PUSH
23892: LD_INT 102
23894: PUSH
23895: LD_INT 103
23897: PUSH
23898: LD_INT 104
23900: PUSH
23901: LD_INT 105
23903: PUSH
23904: LD_INT 106
23906: PUSH
23907: LD_INT 107
23909: PUSH
23910: LD_INT 108
23912: PUSH
23913: LD_INT 109
23915: PUSH
23916: LD_INT 110
23918: PUSH
23919: LD_INT 111
23921: PUSH
23922: LD_INT 112
23924: PUSH
23925: LD_INT 113
23927: PUSH
23928: LD_INT 114
23930: PUSH
23931: LD_INT 116
23933: PUSH
23934: LD_INT 117
23936: PUSH
23937: LD_INT 118
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: ST_TO_ADDR
23963: GO 24738
23965: LD_INT 16
23967: DOUBLE
23968: EQUAL
23969: IFTRUE 23973
23971: GO 24109
23973: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23974: LD_ADDR_VAR 0 2
23978: PUSH
23979: LD_INT 2
23981: PUSH
23982: LD_INT 4
23984: PUSH
23985: LD_INT 5
23987: PUSH
23988: LD_INT 7
23990: PUSH
23991: LD_INT 11
23993: PUSH
23994: LD_INT 12
23996: PUSH
23997: LD_INT 15
23999: PUSH
24000: LD_INT 16
24002: PUSH
24003: LD_INT 20
24005: PUSH
24006: LD_INT 21
24008: PUSH
24009: LD_INT 22
24011: PUSH
24012: LD_INT 23
24014: PUSH
24015: LD_INT 25
24017: PUSH
24018: LD_INT 26
24020: PUSH
24021: LD_INT 30
24023: PUSH
24024: LD_INT 31
24026: PUSH
24027: LD_INT 32
24029: PUSH
24030: LD_INT 33
24032: PUSH
24033: LD_INT 34
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 101
24059: PUSH
24060: LD_INT 102
24062: PUSH
24063: LD_INT 103
24065: PUSH
24066: LD_INT 106
24068: PUSH
24069: LD_INT 108
24071: PUSH
24072: LD_INT 112
24074: PUSH
24075: LD_INT 113
24077: PUSH
24078: LD_INT 114
24080: PUSH
24081: LD_INT 116
24083: PUSH
24084: LD_INT 117
24086: PUSH
24087: LD_INT 118
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: ST_TO_ADDR
24107: GO 24738
24109: LD_INT 17
24111: DOUBLE
24112: EQUAL
24113: IFTRUE 24117
24115: GO 24341
24117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24118: LD_ADDR_VAR 0 2
24122: PUSH
24123: LD_INT 1
24125: PUSH
24126: LD_INT 2
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: LD_INT 4
24134: PUSH
24135: LD_INT 5
24137: PUSH
24138: LD_INT 6
24140: PUSH
24141: LD_INT 7
24143: PUSH
24144: LD_INT 8
24146: PUSH
24147: LD_INT 9
24149: PUSH
24150: LD_INT 10
24152: PUSH
24153: LD_INT 11
24155: PUSH
24156: LD_INT 12
24158: PUSH
24159: LD_INT 13
24161: PUSH
24162: LD_INT 14
24164: PUSH
24165: LD_INT 15
24167: PUSH
24168: LD_INT 16
24170: PUSH
24171: LD_INT 17
24173: PUSH
24174: LD_INT 18
24176: PUSH
24177: LD_INT 19
24179: PUSH
24180: LD_INT 20
24182: PUSH
24183: LD_INT 21
24185: PUSH
24186: LD_INT 22
24188: PUSH
24189: LD_INT 23
24191: PUSH
24192: LD_INT 24
24194: PUSH
24195: LD_INT 25
24197: PUSH
24198: LD_INT 26
24200: PUSH
24201: LD_INT 27
24203: PUSH
24204: LD_INT 28
24206: PUSH
24207: LD_INT 29
24209: PUSH
24210: LD_INT 30
24212: PUSH
24213: LD_INT 31
24215: PUSH
24216: LD_INT 32
24218: PUSH
24219: LD_INT 33
24221: PUSH
24222: LD_INT 34
24224: PUSH
24225: LD_INT 36
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 101
24267: PUSH
24268: LD_INT 102
24270: PUSH
24271: LD_INT 103
24273: PUSH
24274: LD_INT 104
24276: PUSH
24277: LD_INT 105
24279: PUSH
24280: LD_INT 106
24282: PUSH
24283: LD_INT 107
24285: PUSH
24286: LD_INT 108
24288: PUSH
24289: LD_INT 109
24291: PUSH
24292: LD_INT 110
24294: PUSH
24295: LD_INT 111
24297: PUSH
24298: LD_INT 112
24300: PUSH
24301: LD_INT 113
24303: PUSH
24304: LD_INT 114
24306: PUSH
24307: LD_INT 116
24309: PUSH
24310: LD_INT 117
24312: PUSH
24313: LD_INT 118
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: ST_TO_ADDR
24339: GO 24738
24341: LD_INT 18
24343: DOUBLE
24344: EQUAL
24345: IFTRUE 24349
24347: GO 24497
24349: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24350: LD_ADDR_VAR 0 2
24354: PUSH
24355: LD_INT 2
24357: PUSH
24358: LD_INT 4
24360: PUSH
24361: LD_INT 5
24363: PUSH
24364: LD_INT 7
24366: PUSH
24367: LD_INT 11
24369: PUSH
24370: LD_INT 12
24372: PUSH
24373: LD_INT 15
24375: PUSH
24376: LD_INT 16
24378: PUSH
24379: LD_INT 20
24381: PUSH
24382: LD_INT 21
24384: PUSH
24385: LD_INT 22
24387: PUSH
24388: LD_INT 23
24390: PUSH
24391: LD_INT 25
24393: PUSH
24394: LD_INT 26
24396: PUSH
24397: LD_INT 30
24399: PUSH
24400: LD_INT 31
24402: PUSH
24403: LD_INT 32
24405: PUSH
24406: LD_INT 33
24408: PUSH
24409: LD_INT 34
24411: PUSH
24412: LD_INT 35
24414: PUSH
24415: LD_INT 36
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 101
24443: PUSH
24444: LD_INT 102
24446: PUSH
24447: LD_INT 103
24449: PUSH
24450: LD_INT 106
24452: PUSH
24453: LD_INT 108
24455: PUSH
24456: LD_INT 112
24458: PUSH
24459: LD_INT 113
24461: PUSH
24462: LD_INT 114
24464: PUSH
24465: LD_INT 115
24467: PUSH
24468: LD_INT 116
24470: PUSH
24471: LD_INT 117
24473: PUSH
24474: LD_INT 118
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: ST_TO_ADDR
24495: GO 24738
24497: LD_INT 19
24499: DOUBLE
24500: EQUAL
24501: IFTRUE 24505
24503: GO 24737
24505: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24506: LD_ADDR_VAR 0 2
24510: PUSH
24511: LD_INT 1
24513: PUSH
24514: LD_INT 2
24516: PUSH
24517: LD_INT 3
24519: PUSH
24520: LD_INT 4
24522: PUSH
24523: LD_INT 5
24525: PUSH
24526: LD_INT 6
24528: PUSH
24529: LD_INT 7
24531: PUSH
24532: LD_INT 8
24534: PUSH
24535: LD_INT 9
24537: PUSH
24538: LD_INT 10
24540: PUSH
24541: LD_INT 11
24543: PUSH
24544: LD_INT 12
24546: PUSH
24547: LD_INT 13
24549: PUSH
24550: LD_INT 14
24552: PUSH
24553: LD_INT 15
24555: PUSH
24556: LD_INT 16
24558: PUSH
24559: LD_INT 17
24561: PUSH
24562: LD_INT 18
24564: PUSH
24565: LD_INT 19
24567: PUSH
24568: LD_INT 20
24570: PUSH
24571: LD_INT 21
24573: PUSH
24574: LD_INT 22
24576: PUSH
24577: LD_INT 23
24579: PUSH
24580: LD_INT 24
24582: PUSH
24583: LD_INT 25
24585: PUSH
24586: LD_INT 26
24588: PUSH
24589: LD_INT 27
24591: PUSH
24592: LD_INT 28
24594: PUSH
24595: LD_INT 29
24597: PUSH
24598: LD_INT 30
24600: PUSH
24601: LD_INT 31
24603: PUSH
24604: LD_INT 32
24606: PUSH
24607: LD_INT 33
24609: PUSH
24610: LD_INT 34
24612: PUSH
24613: LD_INT 35
24615: PUSH
24616: LD_INT 36
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 101
24659: PUSH
24660: LD_INT 102
24662: PUSH
24663: LD_INT 103
24665: PUSH
24666: LD_INT 104
24668: PUSH
24669: LD_INT 105
24671: PUSH
24672: LD_INT 106
24674: PUSH
24675: LD_INT 107
24677: PUSH
24678: LD_INT 108
24680: PUSH
24681: LD_INT 109
24683: PUSH
24684: LD_INT 110
24686: PUSH
24687: LD_INT 111
24689: PUSH
24690: LD_INT 112
24692: PUSH
24693: LD_INT 113
24695: PUSH
24696: LD_INT 114
24698: PUSH
24699: LD_INT 115
24701: PUSH
24702: LD_INT 116
24704: PUSH
24705: LD_INT 117
24707: PUSH
24708: LD_INT 118
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: ST_TO_ADDR
24735: GO 24738
24737: POP
// end else
24738: GO 24969
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24740: LD_ADDR_VAR 0 2
24744: PUSH
24745: LD_INT 1
24747: PUSH
24748: LD_INT 2
24750: PUSH
24751: LD_INT 3
24753: PUSH
24754: LD_INT 4
24756: PUSH
24757: LD_INT 5
24759: PUSH
24760: LD_INT 6
24762: PUSH
24763: LD_INT 7
24765: PUSH
24766: LD_INT 8
24768: PUSH
24769: LD_INT 9
24771: PUSH
24772: LD_INT 10
24774: PUSH
24775: LD_INT 11
24777: PUSH
24778: LD_INT 12
24780: PUSH
24781: LD_INT 13
24783: PUSH
24784: LD_INT 14
24786: PUSH
24787: LD_INT 15
24789: PUSH
24790: LD_INT 16
24792: PUSH
24793: LD_INT 17
24795: PUSH
24796: LD_INT 18
24798: PUSH
24799: LD_INT 19
24801: PUSH
24802: LD_INT 20
24804: PUSH
24805: LD_INT 21
24807: PUSH
24808: LD_INT 22
24810: PUSH
24811: LD_INT 23
24813: PUSH
24814: LD_INT 24
24816: PUSH
24817: LD_INT 25
24819: PUSH
24820: LD_INT 26
24822: PUSH
24823: LD_INT 27
24825: PUSH
24826: LD_INT 28
24828: PUSH
24829: LD_INT 29
24831: PUSH
24832: LD_INT 30
24834: PUSH
24835: LD_INT 31
24837: PUSH
24838: LD_INT 32
24840: PUSH
24841: LD_INT 33
24843: PUSH
24844: LD_INT 34
24846: PUSH
24847: LD_INT 35
24849: PUSH
24850: LD_INT 36
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 101
24893: PUSH
24894: LD_INT 102
24896: PUSH
24897: LD_INT 103
24899: PUSH
24900: LD_INT 104
24902: PUSH
24903: LD_INT 105
24905: PUSH
24906: LD_INT 106
24908: PUSH
24909: LD_INT 107
24911: PUSH
24912: LD_INT 108
24914: PUSH
24915: LD_INT 109
24917: PUSH
24918: LD_INT 110
24920: PUSH
24921: LD_INT 111
24923: PUSH
24924: LD_INT 112
24926: PUSH
24927: LD_INT 113
24929: PUSH
24930: LD_INT 114
24932: PUSH
24933: LD_INT 115
24935: PUSH
24936: LD_INT 116
24938: PUSH
24939: LD_INT 117
24941: PUSH
24942: LD_INT 118
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: ST_TO_ADDR
// if result then
24969: LD_VAR 0 2
24973: IFFALSE 25759
// begin normal :=  ;
24975: LD_ADDR_VAR 0 5
24979: PUSH
24980: LD_STRING 
24982: ST_TO_ADDR
// hardcore :=  ;
24983: LD_ADDR_VAR 0 6
24987: PUSH
24988: LD_STRING 
24990: ST_TO_ADDR
// active :=  ;
24991: LD_ADDR_VAR 0 7
24995: PUSH
24996: LD_STRING 
24998: ST_TO_ADDR
// for i = 1 to normalCounter do
24999: LD_ADDR_VAR 0 8
25003: PUSH
25004: DOUBLE
25005: LD_INT 1
25007: DEC
25008: ST_TO_ADDR
25009: LD_EXP 52
25013: PUSH
25014: FOR_TO
25015: IFFALSE 25116
// begin tmp := 0 ;
25017: LD_ADDR_VAR 0 3
25021: PUSH
25022: LD_STRING 0
25024: ST_TO_ADDR
// if result [ 1 ] then
25025: LD_VAR 0 2
25029: PUSH
25030: LD_INT 1
25032: ARRAY
25033: IFFALSE 25098
// if result [ 1 ] [ 1 ] = i then
25035: LD_VAR 0 2
25039: PUSH
25040: LD_INT 1
25042: ARRAY
25043: PUSH
25044: LD_INT 1
25046: ARRAY
25047: PUSH
25048: LD_VAR 0 8
25052: EQUAL
25053: IFFALSE 25098
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25055: LD_ADDR_VAR 0 2
25059: PUSH
25060: LD_VAR 0 2
25064: PPUSH
25065: LD_INT 1
25067: PPUSH
25068: LD_VAR 0 2
25072: PUSH
25073: LD_INT 1
25075: ARRAY
25076: PPUSH
25077: LD_INT 1
25079: PPUSH
25080: CALL_OW 3
25084: PPUSH
25085: CALL_OW 1
25089: ST_TO_ADDR
// tmp := 1 ;
25090: LD_ADDR_VAR 0 3
25094: PUSH
25095: LD_STRING 1
25097: ST_TO_ADDR
// end ; normal := normal & tmp ;
25098: LD_ADDR_VAR 0 5
25102: PUSH
25103: LD_VAR 0 5
25107: PUSH
25108: LD_VAR 0 3
25112: STR
25113: ST_TO_ADDR
// end ;
25114: GO 25014
25116: POP
25117: POP
// for i = 1 to hardcoreCounter do
25118: LD_ADDR_VAR 0 8
25122: PUSH
25123: DOUBLE
25124: LD_INT 1
25126: DEC
25127: ST_TO_ADDR
25128: LD_EXP 53
25132: PUSH
25133: FOR_TO
25134: IFFALSE 25239
// begin tmp := 0 ;
25136: LD_ADDR_VAR 0 3
25140: PUSH
25141: LD_STRING 0
25143: ST_TO_ADDR
// if result [ 2 ] then
25144: LD_VAR 0 2
25148: PUSH
25149: LD_INT 2
25151: ARRAY
25152: IFFALSE 25221
// if result [ 2 ] [ 1 ] = 100 + i then
25154: LD_VAR 0 2
25158: PUSH
25159: LD_INT 2
25161: ARRAY
25162: PUSH
25163: LD_INT 1
25165: ARRAY
25166: PUSH
25167: LD_INT 100
25169: PUSH
25170: LD_VAR 0 8
25174: PLUS
25175: EQUAL
25176: IFFALSE 25221
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25178: LD_ADDR_VAR 0 2
25182: PUSH
25183: LD_VAR 0 2
25187: PPUSH
25188: LD_INT 2
25190: PPUSH
25191: LD_VAR 0 2
25195: PUSH
25196: LD_INT 2
25198: ARRAY
25199: PPUSH
25200: LD_INT 1
25202: PPUSH
25203: CALL_OW 3
25207: PPUSH
25208: CALL_OW 1
25212: ST_TO_ADDR
// tmp := 1 ;
25213: LD_ADDR_VAR 0 3
25217: PUSH
25218: LD_STRING 1
25220: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25221: LD_ADDR_VAR 0 6
25225: PUSH
25226: LD_VAR 0 6
25230: PUSH
25231: LD_VAR 0 3
25235: STR
25236: ST_TO_ADDR
// end ;
25237: GO 25133
25239: POP
25240: POP
// if isGameLoad then
25241: LD_VAR 0 1
25245: IFFALSE 25720
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25247: LD_ADDR_VAR 0 4
25251: PUSH
25252: LD_EXP 56
25256: PUSH
25257: LD_EXP 55
25261: PUSH
25262: LD_EXP 57
25266: PUSH
25267: LD_EXP 54
25271: PUSH
25272: LD_EXP 58
25276: PUSH
25277: LD_EXP 59
25281: PUSH
25282: LD_EXP 60
25286: PUSH
25287: LD_EXP 61
25291: PUSH
25292: LD_EXP 62
25296: PUSH
25297: LD_EXP 63
25301: PUSH
25302: LD_EXP 64
25306: PUSH
25307: LD_EXP 65
25311: PUSH
25312: LD_EXP 66
25316: PUSH
25317: LD_EXP 67
25321: PUSH
25322: LD_EXP 75
25326: PUSH
25327: LD_EXP 76
25331: PUSH
25332: LD_EXP 77
25336: PUSH
25337: LD_EXP 78
25341: PUSH
25342: LD_EXP 80
25346: PUSH
25347: LD_EXP 81
25351: PUSH
25352: LD_EXP 82
25356: PUSH
25357: LD_EXP 85
25361: PUSH
25362: LD_EXP 87
25366: PUSH
25367: LD_EXP 88
25371: PUSH
25372: LD_EXP 89
25376: PUSH
25377: LD_EXP 91
25381: PUSH
25382: LD_EXP 92
25386: PUSH
25387: LD_EXP 95
25391: PUSH
25392: LD_EXP 96
25396: PUSH
25397: LD_EXP 97
25401: PUSH
25402: LD_EXP 98
25406: PUSH
25407: LD_EXP 99
25411: PUSH
25412: LD_EXP 100
25416: PUSH
25417: LD_EXP 101
25421: PUSH
25422: LD_EXP 102
25426: PUSH
25427: LD_EXP 103
25431: PUSH
25432: LD_EXP 68
25436: PUSH
25437: LD_EXP 69
25441: PUSH
25442: LD_EXP 72
25446: PUSH
25447: LD_EXP 73
25451: PUSH
25452: LD_EXP 74
25456: PUSH
25457: LD_EXP 70
25461: PUSH
25462: LD_EXP 71
25466: PUSH
25467: LD_EXP 79
25471: PUSH
25472: LD_EXP 83
25476: PUSH
25477: LD_EXP 84
25481: PUSH
25482: LD_EXP 86
25486: PUSH
25487: LD_EXP 90
25491: PUSH
25492: LD_EXP 93
25496: PUSH
25497: LD_EXP 94
25501: PUSH
25502: LD_EXP 104
25506: PUSH
25507: LD_EXP 105
25511: PUSH
25512: LD_EXP 106
25516: PUSH
25517: LD_EXP 107
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: ST_TO_ADDR
// tmp :=  ;
25578: LD_ADDR_VAR 0 3
25582: PUSH
25583: LD_STRING 
25585: ST_TO_ADDR
// for i = 1 to normalCounter do
25586: LD_ADDR_VAR 0 8
25590: PUSH
25591: DOUBLE
25592: LD_INT 1
25594: DEC
25595: ST_TO_ADDR
25596: LD_EXP 52
25600: PUSH
25601: FOR_TO
25602: IFFALSE 25638
// begin if flags [ i ] then
25604: LD_VAR 0 4
25608: PUSH
25609: LD_VAR 0 8
25613: ARRAY
25614: IFFALSE 25636
// tmp := tmp & i & ; ;
25616: LD_ADDR_VAR 0 3
25620: PUSH
25621: LD_VAR 0 3
25625: PUSH
25626: LD_VAR 0 8
25630: STR
25631: PUSH
25632: LD_STRING ;
25634: STR
25635: ST_TO_ADDR
// end ;
25636: GO 25601
25638: POP
25639: POP
// for i = 1 to hardcoreCounter do
25640: LD_ADDR_VAR 0 8
25644: PUSH
25645: DOUBLE
25646: LD_INT 1
25648: DEC
25649: ST_TO_ADDR
25650: LD_EXP 53
25654: PUSH
25655: FOR_TO
25656: IFFALSE 25702
// begin if flags [ normalCounter + i ] then
25658: LD_VAR 0 4
25662: PUSH
25663: LD_EXP 52
25667: PUSH
25668: LD_VAR 0 8
25672: PLUS
25673: ARRAY
25674: IFFALSE 25700
// tmp := tmp & ( 100 + i ) & ; ;
25676: LD_ADDR_VAR 0 3
25680: PUSH
25681: LD_VAR 0 3
25685: PUSH
25686: LD_INT 100
25688: PUSH
25689: LD_VAR 0 8
25693: PLUS
25694: STR
25695: PUSH
25696: LD_STRING ;
25698: STR
25699: ST_TO_ADDR
// end ;
25700: GO 25655
25702: POP
25703: POP
// if tmp then
25704: LD_VAR 0 3
25708: IFFALSE 25720
// active := tmp ;
25710: LD_ADDR_VAR 0 7
25714: PUSH
25715: LD_VAR 0 3
25719: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25720: LD_STRING getStreamItemsFromMission("
25722: PUSH
25723: LD_VAR 0 5
25727: STR
25728: PUSH
25729: LD_STRING ","
25731: STR
25732: PUSH
25733: LD_VAR 0 6
25737: STR
25738: PUSH
25739: LD_STRING ","
25741: STR
25742: PUSH
25743: LD_VAR 0 7
25747: STR
25748: PUSH
25749: LD_STRING ")
25751: STR
25752: PPUSH
25753: CALL_OW 559
// end else
25757: GO 25766
// ToLua ( getStreamItemsFromMission("","","") ) ;
25759: LD_STRING getStreamItemsFromMission("","","")
25761: PPUSH
25762: CALL_OW 559
// end ;
25766: LD_VAR 0 2
25770: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25771: LD_EXP 51
25775: PUSH
25776: LD_EXP 56
25780: AND
25781: IFFALSE 25905
25783: GO 25785
25785: DISABLE
25786: LD_INT 0
25788: PPUSH
25789: PPUSH
// begin enable ;
25790: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25791: LD_ADDR_VAR 0 2
25795: PUSH
25796: LD_INT 22
25798: PUSH
25799: LD_OWVAR 2
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 2
25810: PUSH
25811: LD_INT 34
25813: PUSH
25814: LD_INT 7
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 34
25823: PUSH
25824: LD_INT 45
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 34
25833: PUSH
25834: LD_INT 28
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 34
25843: PUSH
25844: LD_INT 47
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PPUSH
25862: CALL_OW 69
25866: ST_TO_ADDR
// if not tmp then
25867: LD_VAR 0 2
25871: NOT
25872: IFFALSE 25876
// exit ;
25874: GO 25905
// for i in tmp do
25876: LD_ADDR_VAR 0 1
25880: PUSH
25881: LD_VAR 0 2
25885: PUSH
25886: FOR_IN
25887: IFFALSE 25903
// begin SetLives ( i , 0 ) ;
25889: LD_VAR 0 1
25893: PPUSH
25894: LD_INT 0
25896: PPUSH
25897: CALL_OW 234
// end ;
25901: GO 25886
25903: POP
25904: POP
// end ;
25905: PPOPN 2
25907: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25908: LD_EXP 51
25912: PUSH
25913: LD_EXP 57
25917: AND
25918: IFFALSE 26002
25920: GO 25922
25922: DISABLE
25923: LD_INT 0
25925: PPUSH
25926: PPUSH
// begin enable ;
25927: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25928: LD_ADDR_VAR 0 2
25932: PUSH
25933: LD_INT 22
25935: PUSH
25936: LD_OWVAR 2
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 32
25947: PUSH
25948: LD_INT 3
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PPUSH
25959: CALL_OW 69
25963: ST_TO_ADDR
// if not tmp then
25964: LD_VAR 0 2
25968: NOT
25969: IFFALSE 25973
// exit ;
25971: GO 26002
// for i in tmp do
25973: LD_ADDR_VAR 0 1
25977: PUSH
25978: LD_VAR 0 2
25982: PUSH
25983: FOR_IN
25984: IFFALSE 26000
// begin SetLives ( i , 0 ) ;
25986: LD_VAR 0 1
25990: PPUSH
25991: LD_INT 0
25993: PPUSH
25994: CALL_OW 234
// end ;
25998: GO 25983
26000: POP
26001: POP
// end ;
26002: PPOPN 2
26004: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26005: LD_EXP 51
26009: PUSH
26010: LD_EXP 54
26014: AND
26015: IFFALSE 26108
26017: GO 26019
26019: DISABLE
26020: LD_INT 0
26022: PPUSH
// begin enable ;
26023: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26024: LD_ADDR_VAR 0 1
26028: PUSH
26029: LD_INT 22
26031: PUSH
26032: LD_OWVAR 2
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: LD_INT 25
26046: PUSH
26047: LD_INT 5
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 25
26056: PUSH
26057: LD_INT 9
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 25
26066: PUSH
26067: LD_INT 8
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PPUSH
26084: CALL_OW 69
26088: PUSH
26089: FOR_IN
26090: IFFALSE 26106
// begin SetClass ( i , 1 ) ;
26092: LD_VAR 0 1
26096: PPUSH
26097: LD_INT 1
26099: PPUSH
26100: CALL_OW 336
// end ;
26104: GO 26089
26106: POP
26107: POP
// end ;
26108: PPOPN 1
26110: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26111: LD_EXP 51
26115: PUSH
26116: LD_EXP 55
26120: AND
26121: PUSH
26122: LD_OWVAR 65
26126: PUSH
26127: LD_INT 7
26129: LESS
26130: AND
26131: IFFALSE 26145
26133: GO 26135
26135: DISABLE
// begin enable ;
26136: ENABLE
// game_speed := 7 ;
26137: LD_ADDR_OWVAR 65
26141: PUSH
26142: LD_INT 7
26144: ST_TO_ADDR
// end ;
26145: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26146: LD_EXP 51
26150: PUSH
26151: LD_EXP 58
26155: AND
26156: IFFALSE 26358
26158: GO 26160
26160: DISABLE
26161: LD_INT 0
26163: PPUSH
26164: PPUSH
26165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26166: LD_ADDR_VAR 0 3
26170: PUSH
26171: LD_INT 81
26173: PUSH
26174: LD_OWVAR 2
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 21
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PPUSH
26197: CALL_OW 69
26201: ST_TO_ADDR
// if not tmp then
26202: LD_VAR 0 3
26206: NOT
26207: IFFALSE 26211
// exit ;
26209: GO 26358
// if tmp > 5 then
26211: LD_VAR 0 3
26215: PUSH
26216: LD_INT 5
26218: GREATER
26219: IFFALSE 26231
// k := 5 else
26221: LD_ADDR_VAR 0 2
26225: PUSH
26226: LD_INT 5
26228: ST_TO_ADDR
26229: GO 26241
// k := tmp ;
26231: LD_ADDR_VAR 0 2
26235: PUSH
26236: LD_VAR 0 3
26240: ST_TO_ADDR
// for i := 1 to k do
26241: LD_ADDR_VAR 0 1
26245: PUSH
26246: DOUBLE
26247: LD_INT 1
26249: DEC
26250: ST_TO_ADDR
26251: LD_VAR 0 2
26255: PUSH
26256: FOR_TO
26257: IFFALSE 26356
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26259: LD_VAR 0 3
26263: PUSH
26264: LD_VAR 0 1
26268: ARRAY
26269: PPUSH
26270: LD_VAR 0 1
26274: PUSH
26275: LD_INT 4
26277: MOD
26278: PUSH
26279: LD_INT 1
26281: PLUS
26282: PPUSH
26283: CALL_OW 259
26287: PUSH
26288: LD_INT 10
26290: LESS
26291: IFFALSE 26354
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26293: LD_VAR 0 3
26297: PUSH
26298: LD_VAR 0 1
26302: ARRAY
26303: PPUSH
26304: LD_VAR 0 1
26308: PUSH
26309: LD_INT 4
26311: MOD
26312: PUSH
26313: LD_INT 1
26315: PLUS
26316: PPUSH
26317: LD_VAR 0 3
26321: PUSH
26322: LD_VAR 0 1
26326: ARRAY
26327: PPUSH
26328: LD_VAR 0 1
26332: PUSH
26333: LD_INT 4
26335: MOD
26336: PUSH
26337: LD_INT 1
26339: PLUS
26340: PPUSH
26341: CALL_OW 259
26345: PUSH
26346: LD_INT 1
26348: PLUS
26349: PPUSH
26350: CALL_OW 237
26354: GO 26256
26356: POP
26357: POP
// end ;
26358: PPOPN 3
26360: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26361: LD_EXP 51
26365: PUSH
26366: LD_EXP 59
26370: AND
26371: IFFALSE 26391
26373: GO 26375
26375: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26376: LD_INT 4
26378: PPUSH
26379: LD_OWVAR 2
26383: PPUSH
26384: LD_INT 0
26386: PPUSH
26387: CALL_OW 324
26391: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26392: LD_EXP 51
26396: PUSH
26397: LD_EXP 88
26401: AND
26402: IFFALSE 26422
26404: GO 26406
26406: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26407: LD_INT 19
26409: PPUSH
26410: LD_OWVAR 2
26414: PPUSH
26415: LD_INT 0
26417: PPUSH
26418: CALL_OW 324
26422: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26423: LD_EXP 51
26427: PUSH
26428: LD_EXP 60
26432: AND
26433: IFFALSE 26535
26435: GO 26437
26437: DISABLE
26438: LD_INT 0
26440: PPUSH
26441: PPUSH
// begin enable ;
26442: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26443: LD_ADDR_VAR 0 2
26447: PUSH
26448: LD_INT 22
26450: PUSH
26451: LD_OWVAR 2
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: LD_INT 34
26465: PUSH
26466: LD_INT 11
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 34
26475: PUSH
26476: LD_INT 30
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: LIST
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PPUSH
26492: CALL_OW 69
26496: ST_TO_ADDR
// if not tmp then
26497: LD_VAR 0 2
26501: NOT
26502: IFFALSE 26506
// exit ;
26504: GO 26535
// for i in tmp do
26506: LD_ADDR_VAR 0 1
26510: PUSH
26511: LD_VAR 0 2
26515: PUSH
26516: FOR_IN
26517: IFFALSE 26533
// begin SetLives ( i , 0 ) ;
26519: LD_VAR 0 1
26523: PPUSH
26524: LD_INT 0
26526: PPUSH
26527: CALL_OW 234
// end ;
26531: GO 26516
26533: POP
26534: POP
// end ;
26535: PPOPN 2
26537: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26538: LD_EXP 51
26542: PUSH
26543: LD_EXP 61
26547: AND
26548: IFFALSE 26568
26550: GO 26552
26552: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26553: LD_INT 32
26555: PPUSH
26556: LD_OWVAR 2
26560: PPUSH
26561: LD_INT 0
26563: PPUSH
26564: CALL_OW 324
26568: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26569: LD_EXP 51
26573: PUSH
26574: LD_EXP 62
26578: AND
26579: IFFALSE 26760
26581: GO 26583
26583: DISABLE
26584: LD_INT 0
26586: PPUSH
26587: PPUSH
26588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26589: LD_ADDR_VAR 0 2
26593: PUSH
26594: LD_INT 22
26596: PUSH
26597: LD_OWVAR 2
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 33
26608: PUSH
26609: LD_INT 3
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PPUSH
26620: CALL_OW 69
26624: ST_TO_ADDR
// if not tmp then
26625: LD_VAR 0 2
26629: NOT
26630: IFFALSE 26634
// exit ;
26632: GO 26760
// side := 0 ;
26634: LD_ADDR_VAR 0 3
26638: PUSH
26639: LD_INT 0
26641: ST_TO_ADDR
// for i := 1 to 8 do
26642: LD_ADDR_VAR 0 1
26646: PUSH
26647: DOUBLE
26648: LD_INT 1
26650: DEC
26651: ST_TO_ADDR
26652: LD_INT 8
26654: PUSH
26655: FOR_TO
26656: IFFALSE 26704
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26658: LD_OWVAR 2
26662: PUSH
26663: LD_VAR 0 1
26667: NONEQUAL
26668: PUSH
26669: LD_OWVAR 2
26673: PPUSH
26674: LD_VAR 0 1
26678: PPUSH
26679: CALL_OW 81
26683: PUSH
26684: LD_INT 2
26686: EQUAL
26687: AND
26688: IFFALSE 26702
// begin side := i ;
26690: LD_ADDR_VAR 0 3
26694: PUSH
26695: LD_VAR 0 1
26699: ST_TO_ADDR
// break ;
26700: GO 26704
// end ;
26702: GO 26655
26704: POP
26705: POP
// if not side then
26706: LD_VAR 0 3
26710: NOT
26711: IFFALSE 26715
// exit ;
26713: GO 26760
// for i := 1 to tmp do
26715: LD_ADDR_VAR 0 1
26719: PUSH
26720: DOUBLE
26721: LD_INT 1
26723: DEC
26724: ST_TO_ADDR
26725: LD_VAR 0 2
26729: PUSH
26730: FOR_TO
26731: IFFALSE 26758
// if Prob ( 60 ) then
26733: LD_INT 60
26735: PPUSH
26736: CALL_OW 13
26740: IFFALSE 26756
// SetSide ( i , side ) ;
26742: LD_VAR 0 1
26746: PPUSH
26747: LD_VAR 0 3
26751: PPUSH
26752: CALL_OW 235
26756: GO 26730
26758: POP
26759: POP
// end ;
26760: PPOPN 3
26762: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26763: LD_EXP 51
26767: PUSH
26768: LD_EXP 64
26772: AND
26773: IFFALSE 26892
26775: GO 26777
26777: DISABLE
26778: LD_INT 0
26780: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26781: LD_ADDR_VAR 0 1
26785: PUSH
26786: LD_INT 22
26788: PUSH
26789: LD_OWVAR 2
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 21
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 3
26810: PUSH
26811: LD_INT 23
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: LIST
26829: PPUSH
26830: CALL_OW 69
26834: PUSH
26835: FOR_IN
26836: IFFALSE 26890
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26838: LD_VAR 0 1
26842: PPUSH
26843: CALL_OW 257
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: LD_INT 2
26853: PUSH
26854: LD_INT 3
26856: PUSH
26857: LD_INT 4
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: IN
26866: IFFALSE 26888
// SetClass ( un , rand ( 1 , 4 ) ) ;
26868: LD_VAR 0 1
26872: PPUSH
26873: LD_INT 1
26875: PPUSH
26876: LD_INT 4
26878: PPUSH
26879: CALL_OW 12
26883: PPUSH
26884: CALL_OW 336
26888: GO 26835
26890: POP
26891: POP
// end ;
26892: PPOPN 1
26894: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26895: LD_EXP 51
26899: PUSH
26900: LD_EXP 63
26904: AND
26905: IFFALSE 26984
26907: GO 26909
26909: DISABLE
26910: LD_INT 0
26912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26913: LD_ADDR_VAR 0 1
26917: PUSH
26918: LD_INT 22
26920: PUSH
26921: LD_OWVAR 2
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 21
26932: PUSH
26933: LD_INT 3
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PPUSH
26944: CALL_OW 69
26948: ST_TO_ADDR
// if not tmp then
26949: LD_VAR 0 1
26953: NOT
26954: IFFALSE 26958
// exit ;
26956: GO 26984
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26958: LD_VAR 0 1
26962: PUSH
26963: LD_INT 1
26965: PPUSH
26966: LD_VAR 0 1
26970: PPUSH
26971: CALL_OW 12
26975: ARRAY
26976: PPUSH
26977: LD_INT 100
26979: PPUSH
26980: CALL_OW 234
// end ;
26984: PPOPN 1
26986: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26987: LD_EXP 51
26991: PUSH
26992: LD_EXP 65
26996: AND
26997: IFFALSE 27095
26999: GO 27001
27001: DISABLE
27002: LD_INT 0
27004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27005: LD_ADDR_VAR 0 1
27009: PUSH
27010: LD_INT 22
27012: PUSH
27013: LD_OWVAR 2
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 21
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PPUSH
27036: CALL_OW 69
27040: ST_TO_ADDR
// if not tmp then
27041: LD_VAR 0 1
27045: NOT
27046: IFFALSE 27050
// exit ;
27048: GO 27095
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27050: LD_VAR 0 1
27054: PUSH
27055: LD_INT 1
27057: PPUSH
27058: LD_VAR 0 1
27062: PPUSH
27063: CALL_OW 12
27067: ARRAY
27068: PPUSH
27069: LD_INT 1
27071: PPUSH
27072: LD_INT 4
27074: PPUSH
27075: CALL_OW 12
27079: PPUSH
27080: LD_INT 3000
27082: PPUSH
27083: LD_INT 9000
27085: PPUSH
27086: CALL_OW 12
27090: PPUSH
27091: CALL_OW 492
// end ;
27095: PPOPN 1
27097: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27098: LD_EXP 51
27102: PUSH
27103: LD_EXP 66
27107: AND
27108: IFFALSE 27128
27110: GO 27112
27112: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27113: LD_INT 1
27115: PPUSH
27116: LD_OWVAR 2
27120: PPUSH
27121: LD_INT 0
27123: PPUSH
27124: CALL_OW 324
27128: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27129: LD_EXP 51
27133: PUSH
27134: LD_EXP 67
27138: AND
27139: IFFALSE 27222
27141: GO 27143
27143: DISABLE
27144: LD_INT 0
27146: PPUSH
27147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27148: LD_ADDR_VAR 0 2
27152: PUSH
27153: LD_INT 22
27155: PUSH
27156: LD_OWVAR 2
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 21
27167: PUSH
27168: LD_INT 3
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PPUSH
27179: CALL_OW 69
27183: ST_TO_ADDR
// if not tmp then
27184: LD_VAR 0 2
27188: NOT
27189: IFFALSE 27193
// exit ;
27191: GO 27222
// for i in tmp do
27193: LD_ADDR_VAR 0 1
27197: PUSH
27198: LD_VAR 0 2
27202: PUSH
27203: FOR_IN
27204: IFFALSE 27220
// SetBLevel ( i , 10 ) ;
27206: LD_VAR 0 1
27210: PPUSH
27211: LD_INT 10
27213: PPUSH
27214: CALL_OW 241
27218: GO 27203
27220: POP
27221: POP
// end ;
27222: PPOPN 2
27224: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27225: LD_EXP 51
27229: PUSH
27230: LD_EXP 68
27234: AND
27235: IFFALSE 27346
27237: GO 27239
27239: DISABLE
27240: LD_INT 0
27242: PPUSH
27243: PPUSH
27244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27245: LD_ADDR_VAR 0 3
27249: PUSH
27250: LD_INT 22
27252: PUSH
27253: LD_OWVAR 2
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 25
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PPUSH
27276: CALL_OW 69
27280: ST_TO_ADDR
// if not tmp then
27281: LD_VAR 0 3
27285: NOT
27286: IFFALSE 27290
// exit ;
27288: GO 27346
// un := tmp [ rand ( 1 , tmp ) ] ;
27290: LD_ADDR_VAR 0 2
27294: PUSH
27295: LD_VAR 0 3
27299: PUSH
27300: LD_INT 1
27302: PPUSH
27303: LD_VAR 0 3
27307: PPUSH
27308: CALL_OW 12
27312: ARRAY
27313: ST_TO_ADDR
// if Crawls ( un ) then
27314: LD_VAR 0 2
27318: PPUSH
27319: CALL_OW 318
27323: IFFALSE 27334
// ComWalk ( un ) ;
27325: LD_VAR 0 2
27329: PPUSH
27330: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27334: LD_VAR 0 2
27338: PPUSH
27339: LD_INT 5
27341: PPUSH
27342: CALL_OW 336
// end ;
27346: PPOPN 3
27348: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27349: LD_EXP 51
27353: PUSH
27354: LD_EXP 69
27358: AND
27359: PUSH
27360: LD_OWVAR 67
27364: PUSH
27365: LD_INT 4
27367: LESS
27368: AND
27369: IFFALSE 27388
27371: GO 27373
27373: DISABLE
// begin Difficulty := Difficulty + 1 ;
27374: LD_ADDR_OWVAR 67
27378: PUSH
27379: LD_OWVAR 67
27383: PUSH
27384: LD_INT 1
27386: PLUS
27387: ST_TO_ADDR
// end ;
27388: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27389: LD_EXP 51
27393: PUSH
27394: LD_EXP 70
27398: AND
27399: IFFALSE 27502
27401: GO 27403
27403: DISABLE
27404: LD_INT 0
27406: PPUSH
// begin for i := 1 to 5 do
27407: LD_ADDR_VAR 0 1
27411: PUSH
27412: DOUBLE
27413: LD_INT 1
27415: DEC
27416: ST_TO_ADDR
27417: LD_INT 5
27419: PUSH
27420: FOR_TO
27421: IFFALSE 27500
// begin uc_nation := nation_nature ;
27423: LD_ADDR_OWVAR 21
27427: PUSH
27428: LD_INT 0
27430: ST_TO_ADDR
// uc_side := 0 ;
27431: LD_ADDR_OWVAR 20
27435: PUSH
27436: LD_INT 0
27438: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27439: LD_ADDR_OWVAR 29
27443: PUSH
27444: LD_INT 12
27446: PUSH
27447: LD_INT 12
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: ST_TO_ADDR
// hc_agressivity := 20 ;
27454: LD_ADDR_OWVAR 35
27458: PUSH
27459: LD_INT 20
27461: ST_TO_ADDR
// hc_class := class_tiger ;
27462: LD_ADDR_OWVAR 28
27466: PUSH
27467: LD_INT 14
27469: ST_TO_ADDR
// hc_gallery :=  ;
27470: LD_ADDR_OWVAR 33
27474: PUSH
27475: LD_STRING 
27477: ST_TO_ADDR
// hc_name :=  ;
27478: LD_ADDR_OWVAR 26
27482: PUSH
27483: LD_STRING 
27485: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27486: CALL_OW 44
27490: PPUSH
27491: LD_INT 0
27493: PPUSH
27494: CALL_OW 51
// end ;
27498: GO 27420
27500: POP
27501: POP
// end ;
27502: PPOPN 1
27504: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27505: LD_EXP 51
27509: PUSH
27510: LD_EXP 71
27514: AND
27515: IFFALSE 27524
27517: GO 27519
27519: DISABLE
// StreamSibBomb ;
27520: CALL 27525 0 0
27524: END
// export function StreamSibBomb ; var i , x , y ; begin
27525: LD_INT 0
27527: PPUSH
27528: PPUSH
27529: PPUSH
27530: PPUSH
// result := false ;
27531: LD_ADDR_VAR 0 1
27535: PUSH
27536: LD_INT 0
27538: ST_TO_ADDR
// for i := 1 to 16 do
27539: LD_ADDR_VAR 0 2
27543: PUSH
27544: DOUBLE
27545: LD_INT 1
27547: DEC
27548: ST_TO_ADDR
27549: LD_INT 16
27551: PUSH
27552: FOR_TO
27553: IFFALSE 27752
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27555: LD_ADDR_VAR 0 3
27559: PUSH
27560: LD_INT 10
27562: PUSH
27563: LD_INT 20
27565: PUSH
27566: LD_INT 30
27568: PUSH
27569: LD_INT 40
27571: PUSH
27572: LD_INT 50
27574: PUSH
27575: LD_INT 60
27577: PUSH
27578: LD_INT 70
27580: PUSH
27581: LD_INT 80
27583: PUSH
27584: LD_INT 90
27586: PUSH
27587: LD_INT 100
27589: PUSH
27590: LD_INT 110
27592: PUSH
27593: LD_INT 120
27595: PUSH
27596: LD_INT 130
27598: PUSH
27599: LD_INT 140
27601: PUSH
27602: LD_INT 150
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 1
27624: PPUSH
27625: LD_INT 15
27627: PPUSH
27628: CALL_OW 12
27632: ARRAY
27633: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27634: LD_ADDR_VAR 0 4
27638: PUSH
27639: LD_INT 10
27641: PUSH
27642: LD_INT 20
27644: PUSH
27645: LD_INT 30
27647: PUSH
27648: LD_INT 40
27650: PUSH
27651: LD_INT 50
27653: PUSH
27654: LD_INT 60
27656: PUSH
27657: LD_INT 70
27659: PUSH
27660: LD_INT 80
27662: PUSH
27663: LD_INT 90
27665: PUSH
27666: LD_INT 100
27668: PUSH
27669: LD_INT 110
27671: PUSH
27672: LD_INT 120
27674: PUSH
27675: LD_INT 130
27677: PUSH
27678: LD_INT 140
27680: PUSH
27681: LD_INT 150
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 1
27703: PPUSH
27704: LD_INT 15
27706: PPUSH
27707: CALL_OW 12
27711: ARRAY
27712: ST_TO_ADDR
// if ValidHex ( x , y ) then
27713: LD_VAR 0 3
27717: PPUSH
27718: LD_VAR 0 4
27722: PPUSH
27723: CALL_OW 488
27727: IFFALSE 27750
// begin result := [ x , y ] ;
27729: LD_ADDR_VAR 0 1
27733: PUSH
27734: LD_VAR 0 3
27738: PUSH
27739: LD_VAR 0 4
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: ST_TO_ADDR
// break ;
27748: GO 27752
// end ; end ;
27750: GO 27552
27752: POP
27753: POP
// if result then
27754: LD_VAR 0 1
27758: IFFALSE 27818
// begin ToLua ( playSibBomb() ) ;
27760: LD_STRING playSibBomb()
27762: PPUSH
27763: CALL_OW 559
// wait ( 0 0$14 ) ;
27767: LD_INT 490
27769: PPUSH
27770: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27774: LD_VAR 0 1
27778: PUSH
27779: LD_INT 1
27781: ARRAY
27782: PPUSH
27783: LD_VAR 0 1
27787: PUSH
27788: LD_INT 2
27790: ARRAY
27791: PPUSH
27792: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27796: LD_VAR 0 1
27800: PUSH
27801: LD_INT 1
27803: ARRAY
27804: PPUSH
27805: LD_VAR 0 1
27809: PUSH
27810: LD_INT 2
27812: ARRAY
27813: PPUSH
27814: CALL_OW 429
// end ; end ;
27818: LD_VAR 0 1
27822: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27823: LD_EXP 51
27827: PUSH
27828: LD_EXP 73
27832: AND
27833: IFFALSE 27845
27835: GO 27837
27837: DISABLE
// YouLost (  ) ;
27838: LD_STRING 
27840: PPUSH
27841: CALL_OW 104
27845: END
// every 0 0$1 trigger StreamModeActive and sFog do
27846: LD_EXP 51
27850: PUSH
27851: LD_EXP 72
27855: AND
27856: IFFALSE 27870
27858: GO 27860
27860: DISABLE
// FogOff ( your_side ) ;
27861: LD_OWVAR 2
27865: PPUSH
27866: CALL_OW 344
27870: END
// every 0 0$1 trigger StreamModeActive and sSun do
27871: LD_EXP 51
27875: PUSH
27876: LD_EXP 74
27880: AND
27881: IFFALSE 27909
27883: GO 27885
27885: DISABLE
// begin solar_recharge_percent := 0 ;
27886: LD_ADDR_OWVAR 79
27890: PUSH
27891: LD_INT 0
27893: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27894: LD_INT 10500
27896: PPUSH
27897: CALL_OW 67
// solar_recharge_percent := 100 ;
27901: LD_ADDR_OWVAR 79
27905: PUSH
27906: LD_INT 100
27908: ST_TO_ADDR
// end ;
27909: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27910: LD_EXP 51
27914: PUSH
27915: LD_EXP 75
27919: AND
27920: IFFALSE 28159
27922: GO 27924
27924: DISABLE
27925: LD_INT 0
27927: PPUSH
27928: PPUSH
27929: PPUSH
// begin tmp := [ ] ;
27930: LD_ADDR_VAR 0 3
27934: PUSH
27935: EMPTY
27936: ST_TO_ADDR
// for i := 1 to 6 do
27937: LD_ADDR_VAR 0 1
27941: PUSH
27942: DOUBLE
27943: LD_INT 1
27945: DEC
27946: ST_TO_ADDR
27947: LD_INT 6
27949: PUSH
27950: FOR_TO
27951: IFFALSE 28056
// begin uc_nation := nation_nature ;
27953: LD_ADDR_OWVAR 21
27957: PUSH
27958: LD_INT 0
27960: ST_TO_ADDR
// uc_side := 0 ;
27961: LD_ADDR_OWVAR 20
27965: PUSH
27966: LD_INT 0
27968: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27969: LD_ADDR_OWVAR 29
27973: PUSH
27974: LD_INT 12
27976: PUSH
27977: LD_INT 12
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: ST_TO_ADDR
// hc_agressivity := 20 ;
27984: LD_ADDR_OWVAR 35
27988: PUSH
27989: LD_INT 20
27991: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27992: LD_ADDR_OWVAR 28
27996: PUSH
27997: LD_INT 17
27999: ST_TO_ADDR
// hc_gallery :=  ;
28000: LD_ADDR_OWVAR 33
28004: PUSH
28005: LD_STRING 
28007: ST_TO_ADDR
// hc_name :=  ;
28008: LD_ADDR_OWVAR 26
28012: PUSH
28013: LD_STRING 
28015: ST_TO_ADDR
// un := CreateHuman ;
28016: LD_ADDR_VAR 0 2
28020: PUSH
28021: CALL_OW 44
28025: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28026: LD_VAR 0 2
28030: PPUSH
28031: LD_INT 1
28033: PPUSH
28034: CALL_OW 51
// tmp := tmp ^ un ;
28038: LD_ADDR_VAR 0 3
28042: PUSH
28043: LD_VAR 0 3
28047: PUSH
28048: LD_VAR 0 2
28052: ADD
28053: ST_TO_ADDR
// end ;
28054: GO 27950
28056: POP
28057: POP
// repeat wait ( 0 0$1 ) ;
28058: LD_INT 35
28060: PPUSH
28061: CALL_OW 67
// for un in tmp do
28065: LD_ADDR_VAR 0 2
28069: PUSH
28070: LD_VAR 0 3
28074: PUSH
28075: FOR_IN
28076: IFFALSE 28150
// begin if IsDead ( un ) then
28078: LD_VAR 0 2
28082: PPUSH
28083: CALL_OW 301
28087: IFFALSE 28107
// begin tmp := tmp diff un ;
28089: LD_ADDR_VAR 0 3
28093: PUSH
28094: LD_VAR 0 3
28098: PUSH
28099: LD_VAR 0 2
28103: DIFF
28104: ST_TO_ADDR
// continue ;
28105: GO 28075
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28107: LD_VAR 0 2
28111: PPUSH
28112: LD_INT 3
28114: PUSH
28115: LD_INT 22
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PPUSH
28129: CALL_OW 69
28133: PPUSH
28134: LD_VAR 0 2
28138: PPUSH
28139: CALL_OW 74
28143: PPUSH
28144: CALL_OW 115
// end ;
28148: GO 28075
28150: POP
28151: POP
// until not tmp ;
28152: LD_VAR 0 3
28156: NOT
28157: IFFALSE 28058
// end ;
28159: PPOPN 3
28161: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28162: LD_EXP 51
28166: PUSH
28167: LD_EXP 76
28171: AND
28172: IFFALSE 28226
28174: GO 28176
28176: DISABLE
// begin ToLua ( displayTroll(); ) ;
28177: LD_STRING displayTroll();
28179: PPUSH
28180: CALL_OW 559
// wait ( 3 3$00 ) ;
28184: LD_INT 6300
28186: PPUSH
28187: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28191: LD_STRING hideTroll();
28193: PPUSH
28194: CALL_OW 559
// wait ( 1 1$00 ) ;
28198: LD_INT 2100
28200: PPUSH
28201: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28205: LD_STRING displayTroll();
28207: PPUSH
28208: CALL_OW 559
// wait ( 1 1$00 ) ;
28212: LD_INT 2100
28214: PPUSH
28215: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28219: LD_STRING hideTroll();
28221: PPUSH
28222: CALL_OW 559
// end ;
28226: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28227: LD_EXP 51
28231: PUSH
28232: LD_EXP 77
28236: AND
28237: IFFALSE 28300
28239: GO 28241
28241: DISABLE
28242: LD_INT 0
28244: PPUSH
// begin p := 0 ;
28245: LD_ADDR_VAR 0 1
28249: PUSH
28250: LD_INT 0
28252: ST_TO_ADDR
// repeat game_speed := 1 ;
28253: LD_ADDR_OWVAR 65
28257: PUSH
28258: LD_INT 1
28260: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28261: LD_INT 35
28263: PPUSH
28264: CALL_OW 67
// p := p + 1 ;
28268: LD_ADDR_VAR 0 1
28272: PUSH
28273: LD_VAR 0 1
28277: PUSH
28278: LD_INT 1
28280: PLUS
28281: ST_TO_ADDR
// until p >= 60 ;
28282: LD_VAR 0 1
28286: PUSH
28287: LD_INT 60
28289: GREATEREQUAL
28290: IFFALSE 28253
// game_speed := 4 ;
28292: LD_ADDR_OWVAR 65
28296: PUSH
28297: LD_INT 4
28299: ST_TO_ADDR
// end ;
28300: PPOPN 1
28302: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28303: LD_EXP 51
28307: PUSH
28308: LD_EXP 78
28312: AND
28313: IFFALSE 28459
28315: GO 28317
28317: DISABLE
28318: LD_INT 0
28320: PPUSH
28321: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28322: LD_ADDR_VAR 0 1
28326: PUSH
28327: LD_INT 22
28329: PUSH
28330: LD_OWVAR 2
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 2
28341: PUSH
28342: LD_INT 30
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 30
28354: PUSH
28355: LD_INT 1
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: LIST
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PPUSH
28371: CALL_OW 69
28375: ST_TO_ADDR
// if not depot then
28376: LD_VAR 0 1
28380: NOT
28381: IFFALSE 28385
// exit ;
28383: GO 28459
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28385: LD_ADDR_VAR 0 2
28389: PUSH
28390: LD_VAR 0 1
28394: PUSH
28395: LD_INT 1
28397: PPUSH
28398: LD_VAR 0 1
28402: PPUSH
28403: CALL_OW 12
28407: ARRAY
28408: PPUSH
28409: CALL_OW 274
28413: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28414: LD_VAR 0 2
28418: PPUSH
28419: LD_INT 1
28421: PPUSH
28422: LD_INT 0
28424: PPUSH
28425: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28429: LD_VAR 0 2
28433: PPUSH
28434: LD_INT 2
28436: PPUSH
28437: LD_INT 0
28439: PPUSH
28440: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28444: LD_VAR 0 2
28448: PPUSH
28449: LD_INT 3
28451: PPUSH
28452: LD_INT 0
28454: PPUSH
28455: CALL_OW 277
// end ;
28459: PPOPN 2
28461: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28462: LD_EXP 51
28466: PUSH
28467: LD_EXP 79
28471: AND
28472: IFFALSE 28569
28474: GO 28476
28476: DISABLE
28477: LD_INT 0
28479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28480: LD_ADDR_VAR 0 1
28484: PUSH
28485: LD_INT 22
28487: PUSH
28488: LD_OWVAR 2
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 21
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 3
28509: PUSH
28510: LD_INT 23
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: LIST
28528: PPUSH
28529: CALL_OW 69
28533: ST_TO_ADDR
// if not tmp then
28534: LD_VAR 0 1
28538: NOT
28539: IFFALSE 28543
// exit ;
28541: GO 28569
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28543: LD_VAR 0 1
28547: PUSH
28548: LD_INT 1
28550: PPUSH
28551: LD_VAR 0 1
28555: PPUSH
28556: CALL_OW 12
28560: ARRAY
28561: PPUSH
28562: LD_INT 200
28564: PPUSH
28565: CALL_OW 234
// end ;
28569: PPOPN 1
28571: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28572: LD_EXP 51
28576: PUSH
28577: LD_EXP 80
28581: AND
28582: IFFALSE 28661
28584: GO 28586
28586: DISABLE
28587: LD_INT 0
28589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28590: LD_ADDR_VAR 0 1
28594: PUSH
28595: LD_INT 22
28597: PUSH
28598: LD_OWVAR 2
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 21
28609: PUSH
28610: LD_INT 2
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PPUSH
28621: CALL_OW 69
28625: ST_TO_ADDR
// if not tmp then
28626: LD_VAR 0 1
28630: NOT
28631: IFFALSE 28635
// exit ;
28633: GO 28661
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28635: LD_VAR 0 1
28639: PUSH
28640: LD_INT 1
28642: PPUSH
28643: LD_VAR 0 1
28647: PPUSH
28648: CALL_OW 12
28652: ARRAY
28653: PPUSH
28654: LD_INT 60
28656: PPUSH
28657: CALL_OW 234
// end ;
28661: PPOPN 1
28663: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28664: LD_EXP 51
28668: PUSH
28669: LD_EXP 81
28673: AND
28674: IFFALSE 28773
28676: GO 28678
28678: DISABLE
28679: LD_INT 0
28681: PPUSH
28682: PPUSH
// begin enable ;
28683: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28684: LD_ADDR_VAR 0 1
28688: PUSH
28689: LD_INT 22
28691: PUSH
28692: LD_OWVAR 2
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 61
28703: PUSH
28704: EMPTY
28705: LIST
28706: PUSH
28707: LD_INT 33
28709: PUSH
28710: LD_INT 2
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: LIST
28721: PPUSH
28722: CALL_OW 69
28726: ST_TO_ADDR
// if not tmp then
28727: LD_VAR 0 1
28731: NOT
28732: IFFALSE 28736
// exit ;
28734: GO 28773
// for i in tmp do
28736: LD_ADDR_VAR 0 2
28740: PUSH
28741: LD_VAR 0 1
28745: PUSH
28746: FOR_IN
28747: IFFALSE 28771
// if IsControledBy ( i ) then
28749: LD_VAR 0 2
28753: PPUSH
28754: CALL_OW 312
28758: IFFALSE 28769
// ComUnlink ( i ) ;
28760: LD_VAR 0 2
28764: PPUSH
28765: CALL_OW 136
28769: GO 28746
28771: POP
28772: POP
// end ;
28773: PPOPN 2
28775: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28776: LD_EXP 51
28780: PUSH
28781: LD_EXP 82
28785: AND
28786: IFFALSE 28926
28788: GO 28790
28790: DISABLE
28791: LD_INT 0
28793: PPUSH
28794: PPUSH
// begin ToLua ( displayPowell(); ) ;
28795: LD_STRING displayPowell();
28797: PPUSH
28798: CALL_OW 559
// uc_side := 0 ;
28802: LD_ADDR_OWVAR 20
28806: PUSH
28807: LD_INT 0
28809: ST_TO_ADDR
// uc_nation := 2 ;
28810: LD_ADDR_OWVAR 21
28814: PUSH
28815: LD_INT 2
28817: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28818: LD_ADDR_OWVAR 37
28822: PUSH
28823: LD_INT 14
28825: ST_TO_ADDR
// vc_engine := engine_siberite ;
28826: LD_ADDR_OWVAR 39
28830: PUSH
28831: LD_INT 3
28833: ST_TO_ADDR
// vc_control := control_apeman ;
28834: LD_ADDR_OWVAR 38
28838: PUSH
28839: LD_INT 5
28841: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28842: LD_ADDR_OWVAR 40
28846: PUSH
28847: LD_INT 29
28849: ST_TO_ADDR
// un := CreateVehicle ;
28850: LD_ADDR_VAR 0 2
28854: PUSH
28855: CALL_OW 45
28859: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28860: LD_VAR 0 2
28864: PPUSH
28865: LD_INT 1
28867: PPUSH
28868: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28872: LD_INT 35
28874: PPUSH
28875: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28879: LD_VAR 0 2
28883: PPUSH
28884: LD_INT 22
28886: PUSH
28887: LD_OWVAR 2
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PPUSH
28896: CALL_OW 69
28900: PPUSH
28901: LD_VAR 0 2
28905: PPUSH
28906: CALL_OW 74
28910: PPUSH
28911: CALL_OW 115
// until IsDead ( un ) ;
28915: LD_VAR 0 2
28919: PPUSH
28920: CALL_OW 301
28924: IFFALSE 28872
// end ;
28926: PPOPN 2
28928: END
// every 0 0$1 trigger StreamModeActive and sStu do
28929: LD_EXP 51
28933: PUSH
28934: LD_EXP 90
28938: AND
28939: IFFALSE 28955
28941: GO 28943
28943: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28944: LD_STRING displayStucuk();
28946: PPUSH
28947: CALL_OW 559
// ResetFog ;
28951: CALL_OW 335
// end ;
28955: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28956: LD_EXP 51
28960: PUSH
28961: LD_EXP 83
28965: AND
28966: IFFALSE 29107
28968: GO 28970
28970: DISABLE
28971: LD_INT 0
28973: PPUSH
28974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28975: LD_ADDR_VAR 0 2
28979: PUSH
28980: LD_INT 22
28982: PUSH
28983: LD_OWVAR 2
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 21
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PPUSH
29006: CALL_OW 69
29010: ST_TO_ADDR
// if not tmp then
29011: LD_VAR 0 2
29015: NOT
29016: IFFALSE 29020
// exit ;
29018: GO 29107
// un := tmp [ rand ( 1 , tmp ) ] ;
29020: LD_ADDR_VAR 0 1
29024: PUSH
29025: LD_VAR 0 2
29029: PUSH
29030: LD_INT 1
29032: PPUSH
29033: LD_VAR 0 2
29037: PPUSH
29038: CALL_OW 12
29042: ARRAY
29043: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29044: LD_VAR 0 1
29048: PPUSH
29049: LD_INT 0
29051: PPUSH
29052: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29056: LD_VAR 0 1
29060: PPUSH
29061: LD_OWVAR 3
29065: PUSH
29066: LD_VAR 0 1
29070: DIFF
29071: PPUSH
29072: LD_VAR 0 1
29076: PPUSH
29077: CALL_OW 74
29081: PPUSH
29082: CALL_OW 115
// wait ( 0 0$20 ) ;
29086: LD_INT 700
29088: PPUSH
29089: CALL_OW 67
// SetSide ( un , your_side ) ;
29093: LD_VAR 0 1
29097: PPUSH
29098: LD_OWVAR 2
29102: PPUSH
29103: CALL_OW 235
// end ;
29107: PPOPN 2
29109: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29110: LD_EXP 51
29114: PUSH
29115: LD_EXP 84
29119: AND
29120: IFFALSE 29226
29122: GO 29124
29124: DISABLE
29125: LD_INT 0
29127: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29128: LD_ADDR_VAR 0 1
29132: PUSH
29133: LD_INT 22
29135: PUSH
29136: LD_OWVAR 2
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 2
29147: PUSH
29148: LD_INT 30
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 30
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: LIST
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PPUSH
29177: CALL_OW 69
29181: ST_TO_ADDR
// if not depot then
29182: LD_VAR 0 1
29186: NOT
29187: IFFALSE 29191
// exit ;
29189: GO 29226
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29191: LD_VAR 0 1
29195: PUSH
29196: LD_INT 1
29198: ARRAY
29199: PPUSH
29200: CALL_OW 250
29204: PPUSH
29205: LD_VAR 0 1
29209: PUSH
29210: LD_INT 1
29212: ARRAY
29213: PPUSH
29214: CALL_OW 251
29218: PPUSH
29219: LD_INT 70
29221: PPUSH
29222: CALL_OW 495
// end ;
29226: PPOPN 1
29228: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29229: LD_EXP 51
29233: PUSH
29234: LD_EXP 85
29238: AND
29239: IFFALSE 29450
29241: GO 29243
29243: DISABLE
29244: LD_INT 0
29246: PPUSH
29247: PPUSH
29248: PPUSH
29249: PPUSH
29250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29251: LD_ADDR_VAR 0 5
29255: PUSH
29256: LD_INT 22
29258: PUSH
29259: LD_OWVAR 2
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 21
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PPUSH
29282: CALL_OW 69
29286: ST_TO_ADDR
// if not tmp then
29287: LD_VAR 0 5
29291: NOT
29292: IFFALSE 29296
// exit ;
29294: GO 29450
// for i in tmp do
29296: LD_ADDR_VAR 0 1
29300: PUSH
29301: LD_VAR 0 5
29305: PUSH
29306: FOR_IN
29307: IFFALSE 29448
// begin d := rand ( 0 , 5 ) ;
29309: LD_ADDR_VAR 0 4
29313: PUSH
29314: LD_INT 0
29316: PPUSH
29317: LD_INT 5
29319: PPUSH
29320: CALL_OW 12
29324: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29325: LD_ADDR_VAR 0 2
29329: PUSH
29330: LD_VAR 0 1
29334: PPUSH
29335: CALL_OW 250
29339: PPUSH
29340: LD_VAR 0 4
29344: PPUSH
29345: LD_INT 3
29347: PPUSH
29348: LD_INT 12
29350: PPUSH
29351: CALL_OW 12
29355: PPUSH
29356: CALL_OW 272
29360: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29361: LD_ADDR_VAR 0 3
29365: PUSH
29366: LD_VAR 0 1
29370: PPUSH
29371: CALL_OW 251
29375: PPUSH
29376: LD_VAR 0 4
29380: PPUSH
29381: LD_INT 3
29383: PPUSH
29384: LD_INT 12
29386: PPUSH
29387: CALL_OW 12
29391: PPUSH
29392: CALL_OW 273
29396: ST_TO_ADDR
// if ValidHex ( x , y ) then
29397: LD_VAR 0 2
29401: PPUSH
29402: LD_VAR 0 3
29406: PPUSH
29407: CALL_OW 488
29411: IFFALSE 29446
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29413: LD_VAR 0 1
29417: PPUSH
29418: LD_VAR 0 2
29422: PPUSH
29423: LD_VAR 0 3
29427: PPUSH
29428: LD_INT 3
29430: PPUSH
29431: LD_INT 6
29433: PPUSH
29434: CALL_OW 12
29438: PPUSH
29439: LD_INT 1
29441: PPUSH
29442: CALL_OW 483
// end ;
29446: GO 29306
29448: POP
29449: POP
// end ;
29450: PPOPN 5
29452: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29453: LD_EXP 51
29457: PUSH
29458: LD_EXP 86
29462: AND
29463: IFFALSE 29557
29465: GO 29467
29467: DISABLE
29468: LD_INT 0
29470: PPUSH
29471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29472: LD_ADDR_VAR 0 2
29476: PUSH
29477: LD_INT 22
29479: PUSH
29480: LD_OWVAR 2
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 32
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 21
29501: PUSH
29502: LD_INT 2
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: PPUSH
29514: CALL_OW 69
29518: ST_TO_ADDR
// if not tmp then
29519: LD_VAR 0 2
29523: NOT
29524: IFFALSE 29528
// exit ;
29526: GO 29557
// for i in tmp do
29528: LD_ADDR_VAR 0 1
29532: PUSH
29533: LD_VAR 0 2
29537: PUSH
29538: FOR_IN
29539: IFFALSE 29555
// SetFuel ( i , 0 ) ;
29541: LD_VAR 0 1
29545: PPUSH
29546: LD_INT 0
29548: PPUSH
29549: CALL_OW 240
29553: GO 29538
29555: POP
29556: POP
// end ;
29557: PPOPN 2
29559: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29560: LD_EXP 51
29564: PUSH
29565: LD_EXP 87
29569: AND
29570: IFFALSE 29636
29572: GO 29574
29574: DISABLE
29575: LD_INT 0
29577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29578: LD_ADDR_VAR 0 1
29582: PUSH
29583: LD_INT 22
29585: PUSH
29586: LD_OWVAR 2
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 30
29597: PUSH
29598: LD_INT 29
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PPUSH
29609: CALL_OW 69
29613: ST_TO_ADDR
// if not tmp then
29614: LD_VAR 0 1
29618: NOT
29619: IFFALSE 29623
// exit ;
29621: GO 29636
// DestroyUnit ( tmp [ 1 ] ) ;
29623: LD_VAR 0 1
29627: PUSH
29628: LD_INT 1
29630: ARRAY
29631: PPUSH
29632: CALL_OW 65
// end ;
29636: PPOPN 1
29638: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29639: LD_EXP 51
29643: PUSH
29644: LD_EXP 89
29648: AND
29649: IFFALSE 29778
29651: GO 29653
29653: DISABLE
29654: LD_INT 0
29656: PPUSH
// begin uc_side := 0 ;
29657: LD_ADDR_OWVAR 20
29661: PUSH
29662: LD_INT 0
29664: ST_TO_ADDR
// uc_nation := nation_arabian ;
29665: LD_ADDR_OWVAR 21
29669: PUSH
29670: LD_INT 2
29672: ST_TO_ADDR
// hc_gallery :=  ;
29673: LD_ADDR_OWVAR 33
29677: PUSH
29678: LD_STRING 
29680: ST_TO_ADDR
// hc_name :=  ;
29681: LD_ADDR_OWVAR 26
29685: PUSH
29686: LD_STRING 
29688: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29689: LD_INT 1
29691: PPUSH
29692: LD_INT 11
29694: PPUSH
29695: LD_INT 10
29697: PPUSH
29698: CALL_OW 380
// un := CreateHuman ;
29702: LD_ADDR_VAR 0 1
29706: PUSH
29707: CALL_OW 44
29711: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29712: LD_VAR 0 1
29716: PPUSH
29717: LD_INT 1
29719: PPUSH
29720: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29724: LD_INT 35
29726: PPUSH
29727: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29731: LD_VAR 0 1
29735: PPUSH
29736: LD_INT 22
29738: PUSH
29739: LD_OWVAR 2
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PPUSH
29748: CALL_OW 69
29752: PPUSH
29753: LD_VAR 0 1
29757: PPUSH
29758: CALL_OW 74
29762: PPUSH
29763: CALL_OW 115
// until IsDead ( un ) ;
29767: LD_VAR 0 1
29771: PPUSH
29772: CALL_OW 301
29776: IFFALSE 29724
// end ;
29778: PPOPN 1
29780: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29781: LD_EXP 51
29785: PUSH
29786: LD_EXP 91
29790: AND
29791: IFFALSE 29803
29793: GO 29795
29795: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29796: LD_STRING earthquake(getX(game), 0, 32)
29798: PPUSH
29799: CALL_OW 559
29803: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29804: LD_EXP 51
29808: PUSH
29809: LD_EXP 92
29813: AND
29814: IFFALSE 29905
29816: GO 29818
29818: DISABLE
29819: LD_INT 0
29821: PPUSH
// begin enable ;
29822: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29823: LD_ADDR_VAR 0 1
29827: PUSH
29828: LD_INT 22
29830: PUSH
29831: LD_OWVAR 2
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 21
29842: PUSH
29843: LD_INT 2
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 33
29852: PUSH
29853: LD_INT 3
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: LIST
29864: PPUSH
29865: CALL_OW 69
29869: ST_TO_ADDR
// if not tmp then
29870: LD_VAR 0 1
29874: NOT
29875: IFFALSE 29879
// exit ;
29877: GO 29905
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29879: LD_VAR 0 1
29883: PUSH
29884: LD_INT 1
29886: PPUSH
29887: LD_VAR 0 1
29891: PPUSH
29892: CALL_OW 12
29896: ARRAY
29897: PPUSH
29898: LD_INT 1
29900: PPUSH
29901: CALL_OW 234
// end ;
29905: PPOPN 1
29907: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29908: LD_EXP 51
29912: PUSH
29913: LD_EXP 93
29917: AND
29918: IFFALSE 30059
29920: GO 29922
29922: DISABLE
29923: LD_INT 0
29925: PPUSH
29926: PPUSH
29927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29928: LD_ADDR_VAR 0 3
29932: PUSH
29933: LD_INT 22
29935: PUSH
29936: LD_OWVAR 2
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 25
29947: PUSH
29948: LD_INT 1
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PPUSH
29959: CALL_OW 69
29963: ST_TO_ADDR
// if not tmp then
29964: LD_VAR 0 3
29968: NOT
29969: IFFALSE 29973
// exit ;
29971: GO 30059
// un := tmp [ rand ( 1 , tmp ) ] ;
29973: LD_ADDR_VAR 0 2
29977: PUSH
29978: LD_VAR 0 3
29982: PUSH
29983: LD_INT 1
29985: PPUSH
29986: LD_VAR 0 3
29990: PPUSH
29991: CALL_OW 12
29995: ARRAY
29996: ST_TO_ADDR
// if Crawls ( un ) then
29997: LD_VAR 0 2
30001: PPUSH
30002: CALL_OW 318
30006: IFFALSE 30017
// ComWalk ( un ) ;
30008: LD_VAR 0 2
30012: PPUSH
30013: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30017: LD_VAR 0 2
30021: PPUSH
30022: LD_INT 9
30024: PPUSH
30025: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30029: LD_INT 28
30031: PPUSH
30032: LD_OWVAR 2
30036: PPUSH
30037: LD_INT 2
30039: PPUSH
30040: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30044: LD_INT 29
30046: PPUSH
30047: LD_OWVAR 2
30051: PPUSH
30052: LD_INT 2
30054: PPUSH
30055: CALL_OW 322
// end ;
30059: PPOPN 3
30061: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30062: LD_EXP 51
30066: PUSH
30067: LD_EXP 94
30071: AND
30072: IFFALSE 30183
30074: GO 30076
30076: DISABLE
30077: LD_INT 0
30079: PPUSH
30080: PPUSH
30081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30082: LD_ADDR_VAR 0 3
30086: PUSH
30087: LD_INT 22
30089: PUSH
30090: LD_OWVAR 2
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 25
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PPUSH
30113: CALL_OW 69
30117: ST_TO_ADDR
// if not tmp then
30118: LD_VAR 0 3
30122: NOT
30123: IFFALSE 30127
// exit ;
30125: GO 30183
// un := tmp [ rand ( 1 , tmp ) ] ;
30127: LD_ADDR_VAR 0 2
30131: PUSH
30132: LD_VAR 0 3
30136: PUSH
30137: LD_INT 1
30139: PPUSH
30140: LD_VAR 0 3
30144: PPUSH
30145: CALL_OW 12
30149: ARRAY
30150: ST_TO_ADDR
// if Crawls ( un ) then
30151: LD_VAR 0 2
30155: PPUSH
30156: CALL_OW 318
30160: IFFALSE 30171
// ComWalk ( un ) ;
30162: LD_VAR 0 2
30166: PPUSH
30167: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30171: LD_VAR 0 2
30175: PPUSH
30176: LD_INT 8
30178: PPUSH
30179: CALL_OW 336
// end ;
30183: PPOPN 3
30185: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30186: LD_EXP 51
30190: PUSH
30191: LD_EXP 95
30195: AND
30196: IFFALSE 30340
30198: GO 30200
30200: DISABLE
30201: LD_INT 0
30203: PPUSH
30204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30205: LD_ADDR_VAR 0 2
30209: PUSH
30210: LD_INT 22
30212: PUSH
30213: LD_OWVAR 2
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 21
30224: PUSH
30225: LD_INT 2
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 2
30234: PUSH
30235: LD_INT 34
30237: PUSH
30238: LD_INT 12
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 34
30247: PUSH
30248: LD_INT 51
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 34
30257: PUSH
30258: LD_INT 32
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: LIST
30275: PPUSH
30276: CALL_OW 69
30280: ST_TO_ADDR
// if not tmp then
30281: LD_VAR 0 2
30285: NOT
30286: IFFALSE 30290
// exit ;
30288: GO 30340
// for i in tmp do
30290: LD_ADDR_VAR 0 1
30294: PUSH
30295: LD_VAR 0 2
30299: PUSH
30300: FOR_IN
30301: IFFALSE 30338
// if GetCargo ( i , mat_artifact ) = 0 then
30303: LD_VAR 0 1
30307: PPUSH
30308: LD_INT 4
30310: PPUSH
30311: CALL_OW 289
30315: PUSH
30316: LD_INT 0
30318: EQUAL
30319: IFFALSE 30336
// SetCargo ( i , mat_siberit , 100 ) ;
30321: LD_VAR 0 1
30325: PPUSH
30326: LD_INT 3
30328: PPUSH
30329: LD_INT 100
30331: PPUSH
30332: CALL_OW 290
30336: GO 30300
30338: POP
30339: POP
// end ;
30340: PPOPN 2
30342: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30343: LD_EXP 51
30347: PUSH
30348: LD_EXP 96
30352: AND
30353: IFFALSE 30536
30355: GO 30357
30357: DISABLE
30358: LD_INT 0
30360: PPUSH
30361: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30362: LD_ADDR_VAR 0 2
30366: PUSH
30367: LD_INT 22
30369: PUSH
30370: LD_OWVAR 2
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PPUSH
30379: CALL_OW 69
30383: ST_TO_ADDR
// if not tmp then
30384: LD_VAR 0 2
30388: NOT
30389: IFFALSE 30393
// exit ;
30391: GO 30536
// for i := 1 to 2 do
30393: LD_ADDR_VAR 0 1
30397: PUSH
30398: DOUBLE
30399: LD_INT 1
30401: DEC
30402: ST_TO_ADDR
30403: LD_INT 2
30405: PUSH
30406: FOR_TO
30407: IFFALSE 30534
// begin uc_side := your_side ;
30409: LD_ADDR_OWVAR 20
30413: PUSH
30414: LD_OWVAR 2
30418: ST_TO_ADDR
// uc_nation := nation_american ;
30419: LD_ADDR_OWVAR 21
30423: PUSH
30424: LD_INT 1
30426: ST_TO_ADDR
// vc_chassis := us_morphling ;
30427: LD_ADDR_OWVAR 37
30431: PUSH
30432: LD_INT 5
30434: ST_TO_ADDR
// vc_engine := engine_siberite ;
30435: LD_ADDR_OWVAR 39
30439: PUSH
30440: LD_INT 3
30442: ST_TO_ADDR
// vc_control := control_computer ;
30443: LD_ADDR_OWVAR 38
30447: PUSH
30448: LD_INT 3
30450: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30451: LD_ADDR_OWVAR 40
30455: PUSH
30456: LD_INT 10
30458: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30459: LD_VAR 0 2
30463: PUSH
30464: LD_INT 1
30466: ARRAY
30467: PPUSH
30468: CALL_OW 310
30472: NOT
30473: IFFALSE 30520
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30475: CALL_OW 45
30479: PPUSH
30480: LD_VAR 0 2
30484: PUSH
30485: LD_INT 1
30487: ARRAY
30488: PPUSH
30489: CALL_OW 250
30493: PPUSH
30494: LD_VAR 0 2
30498: PUSH
30499: LD_INT 1
30501: ARRAY
30502: PPUSH
30503: CALL_OW 251
30507: PPUSH
30508: LD_INT 12
30510: PPUSH
30511: LD_INT 1
30513: PPUSH
30514: CALL_OW 50
30518: GO 30532
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30520: CALL_OW 45
30524: PPUSH
30525: LD_INT 1
30527: PPUSH
30528: CALL_OW 51
// end ;
30532: GO 30406
30534: POP
30535: POP
// end ;
30536: PPOPN 2
30538: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30539: LD_EXP 51
30543: PUSH
30544: LD_EXP 97
30548: AND
30549: IFFALSE 30771
30551: GO 30553
30553: DISABLE
30554: LD_INT 0
30556: PPUSH
30557: PPUSH
30558: PPUSH
30559: PPUSH
30560: PPUSH
30561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30562: LD_ADDR_VAR 0 6
30566: PUSH
30567: LD_INT 22
30569: PUSH
30570: LD_OWVAR 2
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 21
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 3
30591: PUSH
30592: LD_INT 23
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: LIST
30610: PPUSH
30611: CALL_OW 69
30615: ST_TO_ADDR
// if not tmp then
30616: LD_VAR 0 6
30620: NOT
30621: IFFALSE 30625
// exit ;
30623: GO 30771
// s1 := rand ( 1 , 4 ) ;
30625: LD_ADDR_VAR 0 2
30629: PUSH
30630: LD_INT 1
30632: PPUSH
30633: LD_INT 4
30635: PPUSH
30636: CALL_OW 12
30640: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30641: LD_ADDR_VAR 0 4
30645: PUSH
30646: LD_VAR 0 6
30650: PUSH
30651: LD_INT 1
30653: ARRAY
30654: PPUSH
30655: LD_VAR 0 2
30659: PPUSH
30660: CALL_OW 259
30664: ST_TO_ADDR
// if s1 = 1 then
30665: LD_VAR 0 2
30669: PUSH
30670: LD_INT 1
30672: EQUAL
30673: IFFALSE 30693
// s2 := rand ( 2 , 4 ) else
30675: LD_ADDR_VAR 0 3
30679: PUSH
30680: LD_INT 2
30682: PPUSH
30683: LD_INT 4
30685: PPUSH
30686: CALL_OW 12
30690: ST_TO_ADDR
30691: GO 30701
// s2 := 1 ;
30693: LD_ADDR_VAR 0 3
30697: PUSH
30698: LD_INT 1
30700: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30701: LD_ADDR_VAR 0 5
30705: PUSH
30706: LD_VAR 0 6
30710: PUSH
30711: LD_INT 1
30713: ARRAY
30714: PPUSH
30715: LD_VAR 0 3
30719: PPUSH
30720: CALL_OW 259
30724: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30725: LD_VAR 0 6
30729: PUSH
30730: LD_INT 1
30732: ARRAY
30733: PPUSH
30734: LD_VAR 0 2
30738: PPUSH
30739: LD_VAR 0 5
30743: PPUSH
30744: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30748: LD_VAR 0 6
30752: PUSH
30753: LD_INT 1
30755: ARRAY
30756: PPUSH
30757: LD_VAR 0 3
30761: PPUSH
30762: LD_VAR 0 4
30766: PPUSH
30767: CALL_OW 237
// end ;
30771: PPOPN 6
30773: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30774: LD_EXP 51
30778: PUSH
30779: LD_EXP 98
30783: AND
30784: IFFALSE 30863
30786: GO 30788
30788: DISABLE
30789: LD_INT 0
30791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30792: LD_ADDR_VAR 0 1
30796: PUSH
30797: LD_INT 22
30799: PUSH
30800: LD_OWVAR 2
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 30
30811: PUSH
30812: LD_INT 3
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PPUSH
30823: CALL_OW 69
30827: ST_TO_ADDR
// if not tmp then
30828: LD_VAR 0 1
30832: NOT
30833: IFFALSE 30837
// exit ;
30835: GO 30863
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30837: LD_VAR 0 1
30841: PUSH
30842: LD_INT 1
30844: PPUSH
30845: LD_VAR 0 1
30849: PPUSH
30850: CALL_OW 12
30854: ARRAY
30855: PPUSH
30856: LD_INT 1
30858: PPUSH
30859: CALL_OW 234
// end ;
30863: PPOPN 1
30865: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30866: LD_EXP 51
30870: PUSH
30871: LD_EXP 99
30875: AND
30876: IFFALSE 30988
30878: GO 30880
30880: DISABLE
30881: LD_INT 0
30883: PPUSH
30884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30885: LD_ADDR_VAR 0 2
30889: PUSH
30890: LD_INT 22
30892: PUSH
30893: LD_OWVAR 2
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 2
30904: PUSH
30905: LD_INT 30
30907: PUSH
30908: LD_INT 27
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 30
30917: PUSH
30918: LD_INT 26
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 30
30927: PUSH
30928: LD_INT 28
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PPUSH
30945: CALL_OW 69
30949: ST_TO_ADDR
// if not tmp then
30950: LD_VAR 0 2
30954: NOT
30955: IFFALSE 30959
// exit ;
30957: GO 30988
// for i in tmp do
30959: LD_ADDR_VAR 0 1
30963: PUSH
30964: LD_VAR 0 2
30968: PUSH
30969: FOR_IN
30970: IFFALSE 30986
// SetLives ( i , 1 ) ;
30972: LD_VAR 0 1
30976: PPUSH
30977: LD_INT 1
30979: PPUSH
30980: CALL_OW 234
30984: GO 30969
30986: POP
30987: POP
// end ;
30988: PPOPN 2
30990: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30991: LD_EXP 51
30995: PUSH
30996: LD_EXP 100
31000: AND
31001: IFFALSE 31288
31003: GO 31005
31005: DISABLE
31006: LD_INT 0
31008: PPUSH
31009: PPUSH
31010: PPUSH
// begin i := rand ( 1 , 7 ) ;
31011: LD_ADDR_VAR 0 1
31015: PUSH
31016: LD_INT 1
31018: PPUSH
31019: LD_INT 7
31021: PPUSH
31022: CALL_OW 12
31026: ST_TO_ADDR
// case i of 1 :
31027: LD_VAR 0 1
31031: PUSH
31032: LD_INT 1
31034: DOUBLE
31035: EQUAL
31036: IFTRUE 31040
31038: GO 31050
31040: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31041: LD_STRING earthquake(getX(game), 0, 32)
31043: PPUSH
31044: CALL_OW 559
31048: GO 31288
31050: LD_INT 2
31052: DOUBLE
31053: EQUAL
31054: IFTRUE 31058
31056: GO 31072
31058: POP
// begin ToLua ( displayStucuk(); ) ;
31059: LD_STRING displayStucuk();
31061: PPUSH
31062: CALL_OW 559
// ResetFog ;
31066: CALL_OW 335
// end ; 3 :
31070: GO 31288
31072: LD_INT 3
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31184
31080: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31081: LD_ADDR_VAR 0 2
31085: PUSH
31086: LD_INT 22
31088: PUSH
31089: LD_OWVAR 2
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 25
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PPUSH
31112: CALL_OW 69
31116: ST_TO_ADDR
// if not tmp then
31117: LD_VAR 0 2
31121: NOT
31122: IFFALSE 31126
// exit ;
31124: GO 31288
// un := tmp [ rand ( 1 , tmp ) ] ;
31126: LD_ADDR_VAR 0 3
31130: PUSH
31131: LD_VAR 0 2
31135: PUSH
31136: LD_INT 1
31138: PPUSH
31139: LD_VAR 0 2
31143: PPUSH
31144: CALL_OW 12
31148: ARRAY
31149: ST_TO_ADDR
// if Crawls ( un ) then
31150: LD_VAR 0 3
31154: PPUSH
31155: CALL_OW 318
31159: IFFALSE 31170
// ComWalk ( un ) ;
31161: LD_VAR 0 3
31165: PPUSH
31166: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31170: LD_VAR 0 3
31174: PPUSH
31175: LD_INT 8
31177: PPUSH
31178: CALL_OW 336
// end ; 4 :
31182: GO 31288
31184: LD_INT 4
31186: DOUBLE
31187: EQUAL
31188: IFTRUE 31192
31190: GO 31266
31192: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31193: LD_ADDR_VAR 0 2
31197: PUSH
31198: LD_INT 22
31200: PUSH
31201: LD_OWVAR 2
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 30
31212: PUSH
31213: LD_INT 29
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PPUSH
31224: CALL_OW 69
31228: ST_TO_ADDR
// if not tmp then
31229: LD_VAR 0 2
31233: NOT
31234: IFFALSE 31238
// exit ;
31236: GO 31288
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31238: LD_VAR 0 2
31242: PUSH
31243: LD_INT 1
31245: ARRAY
31246: PPUSH
31247: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31251: LD_VAR 0 2
31255: PUSH
31256: LD_INT 1
31258: ARRAY
31259: PPUSH
31260: CALL_OW 65
// end ; 5 .. 7 :
31264: GO 31288
31266: LD_INT 5
31268: DOUBLE
31269: GREATEREQUAL
31270: IFFALSE 31278
31272: LD_INT 7
31274: DOUBLE
31275: LESSEQUAL
31276: IFTRUE 31280
31278: GO 31287
31280: POP
// StreamSibBomb ; end ;
31281: CALL 27525 0 0
31285: GO 31288
31287: POP
// end ;
31288: PPOPN 3
31290: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31291: LD_EXP 51
31295: PUSH
31296: LD_EXP 101
31300: AND
31301: IFFALSE 31457
31303: GO 31305
31305: DISABLE
31306: LD_INT 0
31308: PPUSH
31309: PPUSH
31310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31311: LD_ADDR_VAR 0 2
31315: PUSH
31316: LD_INT 81
31318: PUSH
31319: LD_OWVAR 2
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: LD_INT 21
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 21
31343: PUSH
31344: LD_INT 2
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: LIST
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PPUSH
31360: CALL_OW 69
31364: ST_TO_ADDR
// if not tmp then
31365: LD_VAR 0 2
31369: NOT
31370: IFFALSE 31374
// exit ;
31372: GO 31457
// p := 0 ;
31374: LD_ADDR_VAR 0 3
31378: PUSH
31379: LD_INT 0
31381: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31382: LD_INT 35
31384: PPUSH
31385: CALL_OW 67
// p := p + 1 ;
31389: LD_ADDR_VAR 0 3
31393: PUSH
31394: LD_VAR 0 3
31398: PUSH
31399: LD_INT 1
31401: PLUS
31402: ST_TO_ADDR
// for i in tmp do
31403: LD_ADDR_VAR 0 1
31407: PUSH
31408: LD_VAR 0 2
31412: PUSH
31413: FOR_IN
31414: IFFALSE 31445
// if GetLives ( i ) < 1000 then
31416: LD_VAR 0 1
31420: PPUSH
31421: CALL_OW 256
31425: PUSH
31426: LD_INT 1000
31428: LESS
31429: IFFALSE 31443
// SetLives ( i , 1000 ) ;
31431: LD_VAR 0 1
31435: PPUSH
31436: LD_INT 1000
31438: PPUSH
31439: CALL_OW 234
31443: GO 31413
31445: POP
31446: POP
// until p > 20 ;
31447: LD_VAR 0 3
31451: PUSH
31452: LD_INT 20
31454: GREATER
31455: IFFALSE 31382
// end ;
31457: PPOPN 3
31459: END
// every 0 0$1 trigger StreamModeActive and sTime do
31460: LD_EXP 51
31464: PUSH
31465: LD_EXP 102
31469: AND
31470: IFFALSE 31505
31472: GO 31474
31474: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31475: LD_INT 28
31477: PPUSH
31478: LD_OWVAR 2
31482: PPUSH
31483: LD_INT 2
31485: PPUSH
31486: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31490: LD_INT 30
31492: PPUSH
31493: LD_OWVAR 2
31497: PPUSH
31498: LD_INT 2
31500: PPUSH
31501: CALL_OW 322
// end ;
31505: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31506: LD_EXP 51
31510: PUSH
31511: LD_EXP 103
31515: AND
31516: IFFALSE 31637
31518: GO 31520
31520: DISABLE
31521: LD_INT 0
31523: PPUSH
31524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31525: LD_ADDR_VAR 0 2
31529: PUSH
31530: LD_INT 22
31532: PUSH
31533: LD_OWVAR 2
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 21
31544: PUSH
31545: LD_INT 1
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 3
31554: PUSH
31555: LD_INT 23
31557: PUSH
31558: LD_INT 0
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: LIST
31573: PPUSH
31574: CALL_OW 69
31578: ST_TO_ADDR
// if not tmp then
31579: LD_VAR 0 2
31583: NOT
31584: IFFALSE 31588
// exit ;
31586: GO 31637
// for i in tmp do
31588: LD_ADDR_VAR 0 1
31592: PUSH
31593: LD_VAR 0 2
31597: PUSH
31598: FOR_IN
31599: IFFALSE 31635
// begin if Crawls ( i ) then
31601: LD_VAR 0 1
31605: PPUSH
31606: CALL_OW 318
31610: IFFALSE 31621
// ComWalk ( i ) ;
31612: LD_VAR 0 1
31616: PPUSH
31617: CALL_OW 138
// SetClass ( i , 2 ) ;
31621: LD_VAR 0 1
31625: PPUSH
31626: LD_INT 2
31628: PPUSH
31629: CALL_OW 336
// end ;
31633: GO 31598
31635: POP
31636: POP
// end ;
31637: PPOPN 2
31639: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31640: LD_EXP 51
31644: PUSH
31645: LD_EXP 104
31649: AND
31650: IFFALSE 31938
31652: GO 31654
31654: DISABLE
31655: LD_INT 0
31657: PPUSH
31658: PPUSH
31659: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31660: LD_OWVAR 2
31664: PPUSH
31665: LD_INT 9
31667: PPUSH
31668: LD_INT 1
31670: PPUSH
31671: LD_INT 1
31673: PPUSH
31674: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31678: LD_INT 9
31680: PPUSH
31681: LD_OWVAR 2
31685: PPUSH
31686: CALL_OW 343
// uc_side := 9 ;
31690: LD_ADDR_OWVAR 20
31694: PUSH
31695: LD_INT 9
31697: ST_TO_ADDR
// uc_nation := 2 ;
31698: LD_ADDR_OWVAR 21
31702: PUSH
31703: LD_INT 2
31705: ST_TO_ADDR
// hc_name := Dark Warrior ;
31706: LD_ADDR_OWVAR 26
31710: PUSH
31711: LD_STRING Dark Warrior
31713: ST_TO_ADDR
// hc_gallery :=  ;
31714: LD_ADDR_OWVAR 33
31718: PUSH
31719: LD_STRING 
31721: ST_TO_ADDR
// hc_noskilllimit := true ;
31722: LD_ADDR_OWVAR 76
31726: PUSH
31727: LD_INT 1
31729: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31730: LD_ADDR_OWVAR 31
31734: PUSH
31735: LD_INT 30
31737: PUSH
31738: LD_INT 30
31740: PUSH
31741: LD_INT 30
31743: PUSH
31744: LD_INT 30
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: ST_TO_ADDR
// un := CreateHuman ;
31753: LD_ADDR_VAR 0 3
31757: PUSH
31758: CALL_OW 44
31762: ST_TO_ADDR
// hc_noskilllimit := false ;
31763: LD_ADDR_OWVAR 76
31767: PUSH
31768: LD_INT 0
31770: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31771: LD_VAR 0 3
31775: PPUSH
31776: LD_INT 1
31778: PPUSH
31779: CALL_OW 51
// ToLua ( playRanger() ) ;
31783: LD_STRING playRanger()
31785: PPUSH
31786: CALL_OW 559
// p := 0 ;
31790: LD_ADDR_VAR 0 2
31794: PUSH
31795: LD_INT 0
31797: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31798: LD_INT 35
31800: PPUSH
31801: CALL_OW 67
// p := p + 1 ;
31805: LD_ADDR_VAR 0 2
31809: PUSH
31810: LD_VAR 0 2
31814: PUSH
31815: LD_INT 1
31817: PLUS
31818: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31819: LD_VAR 0 3
31823: PPUSH
31824: CALL_OW 256
31828: PUSH
31829: LD_INT 1000
31831: LESS
31832: IFFALSE 31846
// SetLives ( un , 1000 ) ;
31834: LD_VAR 0 3
31838: PPUSH
31839: LD_INT 1000
31841: PPUSH
31842: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31846: LD_VAR 0 3
31850: PPUSH
31851: LD_INT 81
31853: PUSH
31854: LD_OWVAR 2
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 91
31865: PUSH
31866: LD_VAR 0 3
31870: PUSH
31871: LD_INT 30
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: LIST
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PPUSH
31883: CALL_OW 69
31887: PPUSH
31888: LD_VAR 0 3
31892: PPUSH
31893: CALL_OW 74
31897: PPUSH
31898: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31902: LD_VAR 0 2
31906: PUSH
31907: LD_INT 80
31909: GREATER
31910: PUSH
31911: LD_VAR 0 3
31915: PPUSH
31916: CALL_OW 301
31920: OR
31921: IFFALSE 31798
// if un then
31923: LD_VAR 0 3
31927: IFFALSE 31938
// RemoveUnit ( un ) ;
31929: LD_VAR 0 3
31933: PPUSH
31934: CALL_OW 64
// end ;
31938: PPOPN 3
31940: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31941: LD_EXP 105
31945: IFFALSE 32061
31947: GO 31949
31949: DISABLE
31950: LD_INT 0
31952: PPUSH
31953: PPUSH
31954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31955: LD_ADDR_VAR 0 2
31959: PUSH
31960: LD_INT 81
31962: PUSH
31963: LD_OWVAR 2
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 21
31974: PUSH
31975: LD_INT 1
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PPUSH
31986: CALL_OW 69
31990: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31991: LD_STRING playComputer()
31993: PPUSH
31994: CALL_OW 559
// if not tmp then
31998: LD_VAR 0 2
32002: NOT
32003: IFFALSE 32007
// exit ;
32005: GO 32061
// for i in tmp do
32007: LD_ADDR_VAR 0 1
32011: PUSH
32012: LD_VAR 0 2
32016: PUSH
32017: FOR_IN
32018: IFFALSE 32059
// for j := 1 to 4 do
32020: LD_ADDR_VAR 0 3
32024: PUSH
32025: DOUBLE
32026: LD_INT 1
32028: DEC
32029: ST_TO_ADDR
32030: LD_INT 4
32032: PUSH
32033: FOR_TO
32034: IFFALSE 32055
// SetSkill ( i , j , 10 ) ;
32036: LD_VAR 0 1
32040: PPUSH
32041: LD_VAR 0 3
32045: PPUSH
32046: LD_INT 10
32048: PPUSH
32049: CALL_OW 237
32053: GO 32033
32055: POP
32056: POP
32057: GO 32017
32059: POP
32060: POP
// end ;
32061: PPOPN 3
32063: END
// every 0 0$1 trigger s30 do var i , tmp ;
32064: LD_EXP 106
32068: IFFALSE 32137
32070: GO 32072
32072: DISABLE
32073: LD_INT 0
32075: PPUSH
32076: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32077: LD_ADDR_VAR 0 2
32081: PUSH
32082: LD_INT 22
32084: PUSH
32085: LD_OWVAR 2
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PPUSH
32094: CALL_OW 69
32098: ST_TO_ADDR
// if not tmp then
32099: LD_VAR 0 2
32103: NOT
32104: IFFALSE 32108
// exit ;
32106: GO 32137
// for i in tmp do
32108: LD_ADDR_VAR 0 1
32112: PUSH
32113: LD_VAR 0 2
32117: PUSH
32118: FOR_IN
32119: IFFALSE 32135
// SetLives ( i , 300 ) ;
32121: LD_VAR 0 1
32125: PPUSH
32126: LD_INT 300
32128: PPUSH
32129: CALL_OW 234
32133: GO 32118
32135: POP
32136: POP
// end ;
32137: PPOPN 2
32139: END
// every 0 0$1 trigger s60 do var i , tmp ;
32140: LD_EXP 107
32144: IFFALSE 32213
32146: GO 32148
32148: DISABLE
32149: LD_INT 0
32151: PPUSH
32152: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32153: LD_ADDR_VAR 0 2
32157: PUSH
32158: LD_INT 22
32160: PUSH
32161: LD_OWVAR 2
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PPUSH
32170: CALL_OW 69
32174: ST_TO_ADDR
// if not tmp then
32175: LD_VAR 0 2
32179: NOT
32180: IFFALSE 32184
// exit ;
32182: GO 32213
// for i in tmp do
32184: LD_ADDR_VAR 0 1
32188: PUSH
32189: LD_VAR 0 2
32193: PUSH
32194: FOR_IN
32195: IFFALSE 32211
// SetLives ( i , 600 ) ;
32197: LD_VAR 0 1
32201: PPUSH
32202: LD_INT 600
32204: PPUSH
32205: CALL_OW 234
32209: GO 32194
32211: POP
32212: POP
// end ;
32213: PPOPN 2
32215: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32216: LD_INT 0
32218: PPUSH
// case cmd of 301 :
32219: LD_VAR 0 1
32223: PUSH
32224: LD_INT 301
32226: DOUBLE
32227: EQUAL
32228: IFTRUE 32232
32230: GO 32264
32232: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32233: LD_VAR 0 6
32237: PPUSH
32238: LD_VAR 0 7
32242: PPUSH
32243: LD_VAR 0 8
32247: PPUSH
32248: LD_VAR 0 4
32252: PPUSH
32253: LD_VAR 0 5
32257: PPUSH
32258: CALL 33473 0 5
32262: GO 32385
32264: LD_INT 302
32266: DOUBLE
32267: EQUAL
32268: IFTRUE 32272
32270: GO 32309
32272: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32273: LD_VAR 0 6
32277: PPUSH
32278: LD_VAR 0 7
32282: PPUSH
32283: LD_VAR 0 8
32287: PPUSH
32288: LD_VAR 0 9
32292: PPUSH
32293: LD_VAR 0 4
32297: PPUSH
32298: LD_VAR 0 5
32302: PPUSH
32303: CALL 33564 0 6
32307: GO 32385
32309: LD_INT 303
32311: DOUBLE
32312: EQUAL
32313: IFTRUE 32317
32315: GO 32354
32317: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32318: LD_VAR 0 6
32322: PPUSH
32323: LD_VAR 0 7
32327: PPUSH
32328: LD_VAR 0 8
32332: PPUSH
32333: LD_VAR 0 9
32337: PPUSH
32338: LD_VAR 0 4
32342: PPUSH
32343: LD_VAR 0 5
32347: PPUSH
32348: CALL 32390 0 6
32352: GO 32385
32354: LD_INT 304
32356: DOUBLE
32357: EQUAL
32358: IFTRUE 32362
32360: GO 32384
32362: POP
// hHackTeleport ( unit , x , y ) ; end ;
32363: LD_VAR 0 2
32367: PPUSH
32368: LD_VAR 0 4
32372: PPUSH
32373: LD_VAR 0 5
32377: PPUSH
32378: CALL 34157 0 3
32382: GO 32385
32384: POP
// end ;
32385: LD_VAR 0 12
32389: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32390: LD_INT 0
32392: PPUSH
32393: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32394: LD_VAR 0 1
32398: PUSH
32399: LD_INT 1
32401: LESS
32402: PUSH
32403: LD_VAR 0 1
32407: PUSH
32408: LD_INT 3
32410: GREATER
32411: OR
32412: PUSH
32413: LD_VAR 0 5
32417: PPUSH
32418: LD_VAR 0 6
32422: PPUSH
32423: CALL_OW 428
32427: OR
32428: IFFALSE 32432
// exit ;
32430: GO 33160
// uc_side := your_side ;
32432: LD_ADDR_OWVAR 20
32436: PUSH
32437: LD_OWVAR 2
32441: ST_TO_ADDR
// uc_nation := nation ;
32442: LD_ADDR_OWVAR 21
32446: PUSH
32447: LD_VAR 0 1
32451: ST_TO_ADDR
// bc_level = 1 ;
32452: LD_ADDR_OWVAR 43
32456: PUSH
32457: LD_INT 1
32459: ST_TO_ADDR
// case btype of 1 :
32460: LD_VAR 0 2
32464: PUSH
32465: LD_INT 1
32467: DOUBLE
32468: EQUAL
32469: IFTRUE 32473
32471: GO 32484
32473: POP
// bc_type := b_depot ; 2 :
32474: LD_ADDR_OWVAR 42
32478: PUSH
32479: LD_INT 0
32481: ST_TO_ADDR
32482: GO 33104
32484: LD_INT 2
32486: DOUBLE
32487: EQUAL
32488: IFTRUE 32492
32490: GO 32503
32492: POP
// bc_type := b_warehouse ; 3 :
32493: LD_ADDR_OWVAR 42
32497: PUSH
32498: LD_INT 1
32500: ST_TO_ADDR
32501: GO 33104
32503: LD_INT 3
32505: DOUBLE
32506: EQUAL
32507: IFTRUE 32511
32509: GO 32522
32511: POP
// bc_type := b_lab ; 4 .. 9 :
32512: LD_ADDR_OWVAR 42
32516: PUSH
32517: LD_INT 6
32519: ST_TO_ADDR
32520: GO 33104
32522: LD_INT 4
32524: DOUBLE
32525: GREATEREQUAL
32526: IFFALSE 32534
32528: LD_INT 9
32530: DOUBLE
32531: LESSEQUAL
32532: IFTRUE 32536
32534: GO 32596
32536: POP
// begin bc_type := b_lab_half ;
32537: LD_ADDR_OWVAR 42
32541: PUSH
32542: LD_INT 7
32544: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32545: LD_ADDR_OWVAR 44
32549: PUSH
32550: LD_INT 10
32552: PUSH
32553: LD_INT 11
32555: PUSH
32556: LD_INT 12
32558: PUSH
32559: LD_INT 15
32561: PUSH
32562: LD_INT 14
32564: PUSH
32565: LD_INT 13
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: PUSH
32576: LD_VAR 0 2
32580: PUSH
32581: LD_INT 3
32583: MINUS
32584: ARRAY
32585: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32586: LD_ADDR_OWVAR 45
32590: PUSH
32591: LD_INT 9
32593: ST_TO_ADDR
// end ; 10 .. 13 :
32594: GO 33104
32596: LD_INT 10
32598: DOUBLE
32599: GREATEREQUAL
32600: IFFALSE 32608
32602: LD_INT 13
32604: DOUBLE
32605: LESSEQUAL
32606: IFTRUE 32610
32608: GO 32687
32610: POP
// begin bc_type := b_lab_full ;
32611: LD_ADDR_OWVAR 42
32615: PUSH
32616: LD_INT 8
32618: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32619: LD_ADDR_OWVAR 44
32623: PUSH
32624: LD_INT 10
32626: PUSH
32627: LD_INT 12
32629: PUSH
32630: LD_INT 14
32632: PUSH
32633: LD_INT 13
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: PUSH
32642: LD_VAR 0 2
32646: PUSH
32647: LD_INT 9
32649: MINUS
32650: ARRAY
32651: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32652: LD_ADDR_OWVAR 45
32656: PUSH
32657: LD_INT 11
32659: PUSH
32660: LD_INT 15
32662: PUSH
32663: LD_INT 12
32665: PUSH
32666: LD_INT 15
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: PUSH
32675: LD_VAR 0 2
32679: PUSH
32680: LD_INT 9
32682: MINUS
32683: ARRAY
32684: ST_TO_ADDR
// end ; 14 :
32685: GO 33104
32687: LD_INT 14
32689: DOUBLE
32690: EQUAL
32691: IFTRUE 32695
32693: GO 32706
32695: POP
// bc_type := b_workshop ; 15 :
32696: LD_ADDR_OWVAR 42
32700: PUSH
32701: LD_INT 2
32703: ST_TO_ADDR
32704: GO 33104
32706: LD_INT 15
32708: DOUBLE
32709: EQUAL
32710: IFTRUE 32714
32712: GO 32725
32714: POP
// bc_type := b_factory ; 16 :
32715: LD_ADDR_OWVAR 42
32719: PUSH
32720: LD_INT 3
32722: ST_TO_ADDR
32723: GO 33104
32725: LD_INT 16
32727: DOUBLE
32728: EQUAL
32729: IFTRUE 32733
32731: GO 32744
32733: POP
// bc_type := b_ext_gun ; 17 :
32734: LD_ADDR_OWVAR 42
32738: PUSH
32739: LD_INT 17
32741: ST_TO_ADDR
32742: GO 33104
32744: LD_INT 17
32746: DOUBLE
32747: EQUAL
32748: IFTRUE 32752
32750: GO 32780
32752: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32753: LD_ADDR_OWVAR 42
32757: PUSH
32758: LD_INT 19
32760: PUSH
32761: LD_INT 23
32763: PUSH
32764: LD_INT 19
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: LIST
32771: PUSH
32772: LD_VAR 0 1
32776: ARRAY
32777: ST_TO_ADDR
32778: GO 33104
32780: LD_INT 18
32782: DOUBLE
32783: EQUAL
32784: IFTRUE 32788
32786: GO 32799
32788: POP
// bc_type := b_ext_radar ; 19 :
32789: LD_ADDR_OWVAR 42
32793: PUSH
32794: LD_INT 20
32796: ST_TO_ADDR
32797: GO 33104
32799: LD_INT 19
32801: DOUBLE
32802: EQUAL
32803: IFTRUE 32807
32805: GO 32818
32807: POP
// bc_type := b_ext_radio ; 20 :
32808: LD_ADDR_OWVAR 42
32812: PUSH
32813: LD_INT 22
32815: ST_TO_ADDR
32816: GO 33104
32818: LD_INT 20
32820: DOUBLE
32821: EQUAL
32822: IFTRUE 32826
32824: GO 32837
32826: POP
// bc_type := b_ext_siberium ; 21 :
32827: LD_ADDR_OWVAR 42
32831: PUSH
32832: LD_INT 21
32834: ST_TO_ADDR
32835: GO 33104
32837: LD_INT 21
32839: DOUBLE
32840: EQUAL
32841: IFTRUE 32845
32843: GO 32856
32845: POP
// bc_type := b_ext_computer ; 22 :
32846: LD_ADDR_OWVAR 42
32850: PUSH
32851: LD_INT 24
32853: ST_TO_ADDR
32854: GO 33104
32856: LD_INT 22
32858: DOUBLE
32859: EQUAL
32860: IFTRUE 32864
32862: GO 32875
32864: POP
// bc_type := b_ext_track ; 23 :
32865: LD_ADDR_OWVAR 42
32869: PUSH
32870: LD_INT 16
32872: ST_TO_ADDR
32873: GO 33104
32875: LD_INT 23
32877: DOUBLE
32878: EQUAL
32879: IFTRUE 32883
32881: GO 32894
32883: POP
// bc_type := b_ext_laser ; 24 :
32884: LD_ADDR_OWVAR 42
32888: PUSH
32889: LD_INT 25
32891: ST_TO_ADDR
32892: GO 33104
32894: LD_INT 24
32896: DOUBLE
32897: EQUAL
32898: IFTRUE 32902
32900: GO 32913
32902: POP
// bc_type := b_control_tower ; 25 :
32903: LD_ADDR_OWVAR 42
32907: PUSH
32908: LD_INT 36
32910: ST_TO_ADDR
32911: GO 33104
32913: LD_INT 25
32915: DOUBLE
32916: EQUAL
32917: IFTRUE 32921
32919: GO 32932
32921: POP
// bc_type := b_breastwork ; 26 :
32922: LD_ADDR_OWVAR 42
32926: PUSH
32927: LD_INT 31
32929: ST_TO_ADDR
32930: GO 33104
32932: LD_INT 26
32934: DOUBLE
32935: EQUAL
32936: IFTRUE 32940
32938: GO 32951
32940: POP
// bc_type := b_bunker ; 27 :
32941: LD_ADDR_OWVAR 42
32945: PUSH
32946: LD_INT 32
32948: ST_TO_ADDR
32949: GO 33104
32951: LD_INT 27
32953: DOUBLE
32954: EQUAL
32955: IFTRUE 32959
32957: GO 32970
32959: POP
// bc_type := b_turret ; 28 :
32960: LD_ADDR_OWVAR 42
32964: PUSH
32965: LD_INT 33
32967: ST_TO_ADDR
32968: GO 33104
32970: LD_INT 28
32972: DOUBLE
32973: EQUAL
32974: IFTRUE 32978
32976: GO 32989
32978: POP
// bc_type := b_armoury ; 29 :
32979: LD_ADDR_OWVAR 42
32983: PUSH
32984: LD_INT 4
32986: ST_TO_ADDR
32987: GO 33104
32989: LD_INT 29
32991: DOUBLE
32992: EQUAL
32993: IFTRUE 32997
32995: GO 33008
32997: POP
// bc_type := b_barracks ; 30 :
32998: LD_ADDR_OWVAR 42
33002: PUSH
33003: LD_INT 5
33005: ST_TO_ADDR
33006: GO 33104
33008: LD_INT 30
33010: DOUBLE
33011: EQUAL
33012: IFTRUE 33016
33014: GO 33027
33016: POP
// bc_type := b_solar_power ; 31 :
33017: LD_ADDR_OWVAR 42
33021: PUSH
33022: LD_INT 27
33024: ST_TO_ADDR
33025: GO 33104
33027: LD_INT 31
33029: DOUBLE
33030: EQUAL
33031: IFTRUE 33035
33033: GO 33046
33035: POP
// bc_type := b_oil_power ; 32 :
33036: LD_ADDR_OWVAR 42
33040: PUSH
33041: LD_INT 26
33043: ST_TO_ADDR
33044: GO 33104
33046: LD_INT 32
33048: DOUBLE
33049: EQUAL
33050: IFTRUE 33054
33052: GO 33065
33054: POP
// bc_type := b_siberite_power ; 33 :
33055: LD_ADDR_OWVAR 42
33059: PUSH
33060: LD_INT 28
33062: ST_TO_ADDR
33063: GO 33104
33065: LD_INT 33
33067: DOUBLE
33068: EQUAL
33069: IFTRUE 33073
33071: GO 33084
33073: POP
// bc_type := b_oil_mine ; 34 :
33074: LD_ADDR_OWVAR 42
33078: PUSH
33079: LD_INT 29
33081: ST_TO_ADDR
33082: GO 33104
33084: LD_INT 34
33086: DOUBLE
33087: EQUAL
33088: IFTRUE 33092
33090: GO 33103
33092: POP
// bc_type := b_siberite_mine ; end ;
33093: LD_ADDR_OWVAR 42
33097: PUSH
33098: LD_INT 30
33100: ST_TO_ADDR
33101: GO 33104
33103: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33104: LD_ADDR_VAR 0 8
33108: PUSH
33109: LD_VAR 0 5
33113: PPUSH
33114: LD_VAR 0 6
33118: PPUSH
33119: LD_VAR 0 3
33123: PPUSH
33124: CALL_OW 47
33128: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33129: LD_OWVAR 42
33133: PUSH
33134: LD_INT 32
33136: PUSH
33137: LD_INT 33
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: IN
33144: IFFALSE 33160
// PlaceWeaponTurret ( b , weapon ) ;
33146: LD_VAR 0 8
33150: PPUSH
33151: LD_VAR 0 4
33155: PPUSH
33156: CALL_OW 431
// end ;
33160: LD_VAR 0 7
33164: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33165: LD_INT 0
33167: PPUSH
33168: PPUSH
33169: PPUSH
33170: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33171: LD_ADDR_VAR 0 4
33175: PUSH
33176: LD_INT 22
33178: PUSH
33179: LD_OWVAR 2
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 2
33190: PUSH
33191: LD_INT 30
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 30
33203: PUSH
33204: LD_INT 1
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: LIST
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PPUSH
33220: CALL_OW 69
33224: ST_TO_ADDR
// if not tmp then
33225: LD_VAR 0 4
33229: NOT
33230: IFFALSE 33234
// exit ;
33232: GO 33293
// for i in tmp do
33234: LD_ADDR_VAR 0 2
33238: PUSH
33239: LD_VAR 0 4
33243: PUSH
33244: FOR_IN
33245: IFFALSE 33291
// for j = 1 to 3 do
33247: LD_ADDR_VAR 0 3
33251: PUSH
33252: DOUBLE
33253: LD_INT 1
33255: DEC
33256: ST_TO_ADDR
33257: LD_INT 3
33259: PUSH
33260: FOR_TO
33261: IFFALSE 33287
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33263: LD_VAR 0 2
33267: PPUSH
33268: CALL_OW 274
33272: PPUSH
33273: LD_VAR 0 3
33277: PPUSH
33278: LD_INT 99999
33280: PPUSH
33281: CALL_OW 277
33285: GO 33260
33287: POP
33288: POP
33289: GO 33244
33291: POP
33292: POP
// end ;
33293: LD_VAR 0 1
33297: RET
// export function hHackSetLevel10 ; var i , j ; begin
33298: LD_INT 0
33300: PPUSH
33301: PPUSH
33302: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33303: LD_ADDR_VAR 0 2
33307: PUSH
33308: LD_INT 21
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PPUSH
33318: CALL_OW 69
33322: PUSH
33323: FOR_IN
33324: IFFALSE 33376
// if IsSelected ( i ) then
33326: LD_VAR 0 2
33330: PPUSH
33331: CALL_OW 306
33335: IFFALSE 33374
// begin for j := 1 to 4 do
33337: LD_ADDR_VAR 0 3
33341: PUSH
33342: DOUBLE
33343: LD_INT 1
33345: DEC
33346: ST_TO_ADDR
33347: LD_INT 4
33349: PUSH
33350: FOR_TO
33351: IFFALSE 33372
// SetSkill ( i , j , 10 ) ;
33353: LD_VAR 0 2
33357: PPUSH
33358: LD_VAR 0 3
33362: PPUSH
33363: LD_INT 10
33365: PPUSH
33366: CALL_OW 237
33370: GO 33350
33372: POP
33373: POP
// end ;
33374: GO 33323
33376: POP
33377: POP
// end ;
33378: LD_VAR 0 1
33382: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33383: LD_INT 0
33385: PPUSH
33386: PPUSH
33387: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33388: LD_ADDR_VAR 0 2
33392: PUSH
33393: LD_INT 22
33395: PUSH
33396: LD_OWVAR 2
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 21
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PPUSH
33419: CALL_OW 69
33423: PUSH
33424: FOR_IN
33425: IFFALSE 33466
// begin for j := 1 to 4 do
33427: LD_ADDR_VAR 0 3
33431: PUSH
33432: DOUBLE
33433: LD_INT 1
33435: DEC
33436: ST_TO_ADDR
33437: LD_INT 4
33439: PUSH
33440: FOR_TO
33441: IFFALSE 33462
// SetSkill ( i , j , 10 ) ;
33443: LD_VAR 0 2
33447: PPUSH
33448: LD_VAR 0 3
33452: PPUSH
33453: LD_INT 10
33455: PPUSH
33456: CALL_OW 237
33460: GO 33440
33462: POP
33463: POP
// end ;
33464: GO 33424
33466: POP
33467: POP
// end ;
33468: LD_VAR 0 1
33472: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33473: LD_INT 0
33475: PPUSH
// uc_side := your_side ;
33476: LD_ADDR_OWVAR 20
33480: PUSH
33481: LD_OWVAR 2
33485: ST_TO_ADDR
// uc_nation := nation ;
33486: LD_ADDR_OWVAR 21
33490: PUSH
33491: LD_VAR 0 1
33495: ST_TO_ADDR
// InitHc ;
33496: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33500: LD_INT 0
33502: PPUSH
33503: LD_VAR 0 2
33507: PPUSH
33508: LD_VAR 0 3
33512: PPUSH
33513: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33517: LD_VAR 0 4
33521: PPUSH
33522: LD_VAR 0 5
33526: PPUSH
33527: CALL_OW 428
33531: PUSH
33532: LD_INT 0
33534: EQUAL
33535: IFFALSE 33559
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33537: CALL_OW 44
33541: PPUSH
33542: LD_VAR 0 4
33546: PPUSH
33547: LD_VAR 0 5
33551: PPUSH
33552: LD_INT 1
33554: PPUSH
33555: CALL_OW 48
// end ;
33559: LD_VAR 0 6
33563: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33564: LD_INT 0
33566: PPUSH
33567: PPUSH
// uc_side := your_side ;
33568: LD_ADDR_OWVAR 20
33572: PUSH
33573: LD_OWVAR 2
33577: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33578: LD_VAR 0 1
33582: PUSH
33583: LD_INT 1
33585: PUSH
33586: LD_INT 2
33588: PUSH
33589: LD_INT 3
33591: PUSH
33592: LD_INT 4
33594: PUSH
33595: LD_INT 5
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: IN
33605: IFFALSE 33617
// uc_nation := nation_american else
33607: LD_ADDR_OWVAR 21
33611: PUSH
33612: LD_INT 1
33614: ST_TO_ADDR
33615: GO 33660
// if chassis in [ 11 , 12 , 13 , 14 ] then
33617: LD_VAR 0 1
33621: PUSH
33622: LD_INT 11
33624: PUSH
33625: LD_INT 12
33627: PUSH
33628: LD_INT 13
33630: PUSH
33631: LD_INT 14
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: IN
33640: IFFALSE 33652
// uc_nation := nation_arabian else
33642: LD_ADDR_OWVAR 21
33646: PUSH
33647: LD_INT 2
33649: ST_TO_ADDR
33650: GO 33660
// uc_nation := nation_russian ;
33652: LD_ADDR_OWVAR 21
33656: PUSH
33657: LD_INT 3
33659: ST_TO_ADDR
// vc_chassis := chassis ;
33660: LD_ADDR_OWVAR 37
33664: PUSH
33665: LD_VAR 0 1
33669: ST_TO_ADDR
// vc_engine := engine ;
33670: LD_ADDR_OWVAR 39
33674: PUSH
33675: LD_VAR 0 2
33679: ST_TO_ADDR
// vc_control := control ;
33680: LD_ADDR_OWVAR 38
33684: PUSH
33685: LD_VAR 0 3
33689: ST_TO_ADDR
// vc_weapon := weapon ;
33690: LD_ADDR_OWVAR 40
33694: PUSH
33695: LD_VAR 0 4
33699: ST_TO_ADDR
// un := CreateVehicle ;
33700: LD_ADDR_VAR 0 8
33704: PUSH
33705: CALL_OW 45
33709: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33710: LD_VAR 0 8
33714: PPUSH
33715: LD_INT 0
33717: PPUSH
33718: LD_INT 5
33720: PPUSH
33721: CALL_OW 12
33725: PPUSH
33726: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33730: LD_VAR 0 8
33734: PPUSH
33735: LD_VAR 0 5
33739: PPUSH
33740: LD_VAR 0 6
33744: PPUSH
33745: LD_INT 1
33747: PPUSH
33748: CALL_OW 48
// end ;
33752: LD_VAR 0 7
33756: RET
// export hInvincible ; every 1 do
33757: GO 33759
33759: DISABLE
// hInvincible := [ ] ;
33760: LD_ADDR_EXP 108
33764: PUSH
33765: EMPTY
33766: ST_TO_ADDR
33767: END
// every 10 do var i ;
33768: GO 33770
33770: DISABLE
33771: LD_INT 0
33773: PPUSH
// begin enable ;
33774: ENABLE
// if not hInvincible then
33775: LD_EXP 108
33779: NOT
33780: IFFALSE 33784
// exit ;
33782: GO 33828
// for i in hInvincible do
33784: LD_ADDR_VAR 0 1
33788: PUSH
33789: LD_EXP 108
33793: PUSH
33794: FOR_IN
33795: IFFALSE 33826
// if GetLives ( i ) < 1000 then
33797: LD_VAR 0 1
33801: PPUSH
33802: CALL_OW 256
33806: PUSH
33807: LD_INT 1000
33809: LESS
33810: IFFALSE 33824
// SetLives ( i , 1000 ) ;
33812: LD_VAR 0 1
33816: PPUSH
33817: LD_INT 1000
33819: PPUSH
33820: CALL_OW 234
33824: GO 33794
33826: POP
33827: POP
// end ;
33828: PPOPN 1
33830: END
// export function hHackInvincible ; var i ; begin
33831: LD_INT 0
33833: PPUSH
33834: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33835: LD_ADDR_VAR 0 2
33839: PUSH
33840: LD_INT 2
33842: PUSH
33843: LD_INT 21
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 21
33855: PUSH
33856: LD_INT 2
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: LIST
33867: PPUSH
33868: CALL_OW 69
33872: PUSH
33873: FOR_IN
33874: IFFALSE 33935
// if IsSelected ( i ) then
33876: LD_VAR 0 2
33880: PPUSH
33881: CALL_OW 306
33885: IFFALSE 33933
// begin if i in hInvincible then
33887: LD_VAR 0 2
33891: PUSH
33892: LD_EXP 108
33896: IN
33897: IFFALSE 33917
// hInvincible := hInvincible diff i else
33899: LD_ADDR_EXP 108
33903: PUSH
33904: LD_EXP 108
33908: PUSH
33909: LD_VAR 0 2
33913: DIFF
33914: ST_TO_ADDR
33915: GO 33933
// hInvincible := hInvincible union i ;
33917: LD_ADDR_EXP 108
33921: PUSH
33922: LD_EXP 108
33926: PUSH
33927: LD_VAR 0 2
33931: UNION
33932: ST_TO_ADDR
// end ;
33933: GO 33873
33935: POP
33936: POP
// end ;
33937: LD_VAR 0 1
33941: RET
// export function hHackInvisible ; var i , j ; begin
33942: LD_INT 0
33944: PPUSH
33945: PPUSH
33946: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33947: LD_ADDR_VAR 0 2
33951: PUSH
33952: LD_INT 21
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PPUSH
33962: CALL_OW 69
33966: PUSH
33967: FOR_IN
33968: IFFALSE 33992
// if IsSelected ( i ) then
33970: LD_VAR 0 2
33974: PPUSH
33975: CALL_OW 306
33979: IFFALSE 33990
// ComForceInvisible ( i ) ;
33981: LD_VAR 0 2
33985: PPUSH
33986: CALL_OW 496
33990: GO 33967
33992: POP
33993: POP
// end ;
33994: LD_VAR 0 1
33998: RET
// export function hHackChangeYourSide ; begin
33999: LD_INT 0
34001: PPUSH
// if your_side = 8 then
34002: LD_OWVAR 2
34006: PUSH
34007: LD_INT 8
34009: EQUAL
34010: IFFALSE 34022
// your_side := 0 else
34012: LD_ADDR_OWVAR 2
34016: PUSH
34017: LD_INT 0
34019: ST_TO_ADDR
34020: GO 34036
// your_side := your_side + 1 ;
34022: LD_ADDR_OWVAR 2
34026: PUSH
34027: LD_OWVAR 2
34031: PUSH
34032: LD_INT 1
34034: PLUS
34035: ST_TO_ADDR
// end ;
34036: LD_VAR 0 1
34040: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34041: LD_INT 0
34043: PPUSH
34044: PPUSH
34045: PPUSH
// for i in all_units do
34046: LD_ADDR_VAR 0 2
34050: PUSH
34051: LD_OWVAR 3
34055: PUSH
34056: FOR_IN
34057: IFFALSE 34135
// if IsSelected ( i ) then
34059: LD_VAR 0 2
34063: PPUSH
34064: CALL_OW 306
34068: IFFALSE 34133
// begin j := GetSide ( i ) ;
34070: LD_ADDR_VAR 0 3
34074: PUSH
34075: LD_VAR 0 2
34079: PPUSH
34080: CALL_OW 255
34084: ST_TO_ADDR
// if j = 8 then
34085: LD_VAR 0 3
34089: PUSH
34090: LD_INT 8
34092: EQUAL
34093: IFFALSE 34105
// j := 0 else
34095: LD_ADDR_VAR 0 3
34099: PUSH
34100: LD_INT 0
34102: ST_TO_ADDR
34103: GO 34119
// j := j + 1 ;
34105: LD_ADDR_VAR 0 3
34109: PUSH
34110: LD_VAR 0 3
34114: PUSH
34115: LD_INT 1
34117: PLUS
34118: ST_TO_ADDR
// SetSide ( i , j ) ;
34119: LD_VAR 0 2
34123: PPUSH
34124: LD_VAR 0 3
34128: PPUSH
34129: CALL_OW 235
// end ;
34133: GO 34056
34135: POP
34136: POP
// end ;
34137: LD_VAR 0 1
34141: RET
// export function hHackFog ; begin
34142: LD_INT 0
34144: PPUSH
// FogOff ( true ) ;
34145: LD_INT 1
34147: PPUSH
34148: CALL_OW 344
// end ;
34152: LD_VAR 0 1
34156: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34157: LD_INT 0
34159: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34160: LD_VAR 0 1
34164: PPUSH
34165: LD_VAR 0 2
34169: PPUSH
34170: LD_VAR 0 3
34174: PPUSH
34175: LD_INT 1
34177: PPUSH
34178: LD_INT 1
34180: PPUSH
34181: CALL_OW 483
// CenterOnXY ( x , y ) ;
34185: LD_VAR 0 2
34189: PPUSH
34190: LD_VAR 0 3
34194: PPUSH
34195: CALL_OW 84
// end ;
34199: LD_VAR 0 4
34203: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34204: LD_INT 0
34206: PPUSH
34207: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34208: LD_VAR 0 1
34212: NOT
34213: PUSH
34214: LD_VAR 0 2
34218: PPUSH
34219: LD_VAR 0 3
34223: PPUSH
34224: CALL_OW 488
34228: NOT
34229: OR
34230: PUSH
34231: LD_VAR 0 1
34235: PPUSH
34236: CALL_OW 266
34240: PUSH
34241: LD_INT 3
34243: NONEQUAL
34244: PUSH
34245: LD_VAR 0 1
34249: PPUSH
34250: CALL_OW 247
34254: PUSH
34255: LD_INT 1
34257: EQUAL
34258: NOT
34259: AND
34260: OR
34261: IFFALSE 34265
// exit ;
34263: GO 34414
// if GetType ( factory ) = unit_human then
34265: LD_VAR 0 1
34269: PPUSH
34270: CALL_OW 247
34274: PUSH
34275: LD_INT 1
34277: EQUAL
34278: IFFALSE 34295
// factory := IsInUnit ( factory ) ;
34280: LD_ADDR_VAR 0 1
34284: PUSH
34285: LD_VAR 0 1
34289: PPUSH
34290: CALL_OW 310
34294: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34295: LD_VAR 0 1
34299: PPUSH
34300: CALL_OW 266
34304: PUSH
34305: LD_INT 3
34307: NONEQUAL
34308: IFFALSE 34312
// exit ;
34310: GO 34414
// if HexInfo ( x , y ) = factory then
34312: LD_VAR 0 2
34316: PPUSH
34317: LD_VAR 0 3
34321: PPUSH
34322: CALL_OW 428
34326: PUSH
34327: LD_VAR 0 1
34331: EQUAL
34332: IFFALSE 34359
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34334: LD_ADDR_EXP 109
34338: PUSH
34339: LD_EXP 109
34343: PPUSH
34344: LD_VAR 0 1
34348: PPUSH
34349: LD_INT 0
34351: PPUSH
34352: CALL_OW 1
34356: ST_TO_ADDR
34357: GO 34410
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34359: LD_ADDR_EXP 109
34363: PUSH
34364: LD_EXP 109
34368: PPUSH
34369: LD_VAR 0 1
34373: PPUSH
34374: LD_VAR 0 1
34378: PPUSH
34379: CALL_OW 255
34383: PUSH
34384: LD_VAR 0 1
34388: PUSH
34389: LD_VAR 0 2
34393: PUSH
34394: LD_VAR 0 3
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: PPUSH
34405: CALL_OW 1
34409: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34410: CALL 34419 0 0
// end ;
34414: LD_VAR 0 4
34418: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34419: LD_INT 0
34421: PPUSH
34422: PPUSH
34423: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34424: LD_STRING resetFactoryWaypoint();
34426: PPUSH
34427: CALL_OW 559
// if factoryWaypoints then
34431: LD_EXP 109
34435: IFFALSE 34561
// begin list := PrepareArray ( factoryWaypoints ) ;
34437: LD_ADDR_VAR 0 3
34441: PUSH
34442: LD_EXP 109
34446: PPUSH
34447: CALL 81703 0 1
34451: ST_TO_ADDR
// for i := 1 to list do
34452: LD_ADDR_VAR 0 2
34456: PUSH
34457: DOUBLE
34458: LD_INT 1
34460: DEC
34461: ST_TO_ADDR
34462: LD_VAR 0 3
34466: PUSH
34467: FOR_TO
34468: IFFALSE 34559
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34470: LD_STRING setFactoryWaypointXY(
34472: PUSH
34473: LD_VAR 0 3
34477: PUSH
34478: LD_VAR 0 2
34482: ARRAY
34483: PUSH
34484: LD_INT 1
34486: ARRAY
34487: STR
34488: PUSH
34489: LD_STRING ,
34491: STR
34492: PUSH
34493: LD_VAR 0 3
34497: PUSH
34498: LD_VAR 0 2
34502: ARRAY
34503: PUSH
34504: LD_INT 2
34506: ARRAY
34507: STR
34508: PUSH
34509: LD_STRING ,
34511: STR
34512: PUSH
34513: LD_VAR 0 3
34517: PUSH
34518: LD_VAR 0 2
34522: ARRAY
34523: PUSH
34524: LD_INT 3
34526: ARRAY
34527: STR
34528: PUSH
34529: LD_STRING ,
34531: STR
34532: PUSH
34533: LD_VAR 0 3
34537: PUSH
34538: LD_VAR 0 2
34542: ARRAY
34543: PUSH
34544: LD_INT 4
34546: ARRAY
34547: STR
34548: PUSH
34549: LD_STRING )
34551: STR
34552: PPUSH
34553: CALL_OW 559
34557: GO 34467
34559: POP
34560: POP
// end ; end ;
34561: LD_VAR 0 1
34565: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34566: LD_INT 0
34568: PPUSH
// if HexInfo ( x , y ) = warehouse then
34569: LD_VAR 0 2
34573: PPUSH
34574: LD_VAR 0 3
34578: PPUSH
34579: CALL_OW 428
34583: PUSH
34584: LD_VAR 0 1
34588: EQUAL
34589: IFFALSE 34616
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34591: LD_ADDR_EXP 110
34595: PUSH
34596: LD_EXP 110
34600: PPUSH
34601: LD_VAR 0 1
34605: PPUSH
34606: LD_INT 0
34608: PPUSH
34609: CALL_OW 1
34613: ST_TO_ADDR
34614: GO 34667
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34616: LD_ADDR_EXP 110
34620: PUSH
34621: LD_EXP 110
34625: PPUSH
34626: LD_VAR 0 1
34630: PPUSH
34631: LD_VAR 0 1
34635: PPUSH
34636: CALL_OW 255
34640: PUSH
34641: LD_VAR 0 1
34645: PUSH
34646: LD_VAR 0 2
34650: PUSH
34651: LD_VAR 0 3
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: PPUSH
34662: CALL_OW 1
34666: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34667: CALL 34676 0 0
// end ;
34671: LD_VAR 0 4
34675: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34676: LD_INT 0
34678: PPUSH
34679: PPUSH
34680: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34681: LD_STRING resetWarehouseGatheringPoints();
34683: PPUSH
34684: CALL_OW 559
// if warehouseGatheringPoints then
34688: LD_EXP 110
34692: IFFALSE 34818
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34694: LD_ADDR_VAR 0 3
34698: PUSH
34699: LD_EXP 110
34703: PPUSH
34704: CALL 81703 0 1
34708: ST_TO_ADDR
// for i := 1 to list do
34709: LD_ADDR_VAR 0 2
34713: PUSH
34714: DOUBLE
34715: LD_INT 1
34717: DEC
34718: ST_TO_ADDR
34719: LD_VAR 0 3
34723: PUSH
34724: FOR_TO
34725: IFFALSE 34816
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34727: LD_STRING setWarehouseGatheringPointXY(
34729: PUSH
34730: LD_VAR 0 3
34734: PUSH
34735: LD_VAR 0 2
34739: ARRAY
34740: PUSH
34741: LD_INT 1
34743: ARRAY
34744: STR
34745: PUSH
34746: LD_STRING ,
34748: STR
34749: PUSH
34750: LD_VAR 0 3
34754: PUSH
34755: LD_VAR 0 2
34759: ARRAY
34760: PUSH
34761: LD_INT 2
34763: ARRAY
34764: STR
34765: PUSH
34766: LD_STRING ,
34768: STR
34769: PUSH
34770: LD_VAR 0 3
34774: PUSH
34775: LD_VAR 0 2
34779: ARRAY
34780: PUSH
34781: LD_INT 3
34783: ARRAY
34784: STR
34785: PUSH
34786: LD_STRING ,
34788: STR
34789: PUSH
34790: LD_VAR 0 3
34794: PUSH
34795: LD_VAR 0 2
34799: ARRAY
34800: PUSH
34801: LD_INT 4
34803: ARRAY
34804: STR
34805: PUSH
34806: LD_STRING )
34808: STR
34809: PPUSH
34810: CALL_OW 559
34814: GO 34724
34816: POP
34817: POP
// end ; end ;
34818: LD_VAR 0 1
34822: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34823: LD_EXP 110
34827: IFFALSE 35512
34829: GO 34831
34831: DISABLE
34832: LD_INT 0
34834: PPUSH
34835: PPUSH
34836: PPUSH
34837: PPUSH
34838: PPUSH
34839: PPUSH
34840: PPUSH
34841: PPUSH
34842: PPUSH
// begin enable ;
34843: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34844: LD_ADDR_VAR 0 3
34848: PUSH
34849: LD_EXP 110
34853: PPUSH
34854: CALL 81703 0 1
34858: ST_TO_ADDR
// if not list then
34859: LD_VAR 0 3
34863: NOT
34864: IFFALSE 34868
// exit ;
34866: GO 35512
// for i := 1 to list do
34868: LD_ADDR_VAR 0 1
34872: PUSH
34873: DOUBLE
34874: LD_INT 1
34876: DEC
34877: ST_TO_ADDR
34878: LD_VAR 0 3
34882: PUSH
34883: FOR_TO
34884: IFFALSE 35510
// begin depot := list [ i ] [ 2 ] ;
34886: LD_ADDR_VAR 0 8
34890: PUSH
34891: LD_VAR 0 3
34895: PUSH
34896: LD_VAR 0 1
34900: ARRAY
34901: PUSH
34902: LD_INT 2
34904: ARRAY
34905: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34906: LD_ADDR_VAR 0 5
34910: PUSH
34911: LD_VAR 0 3
34915: PUSH
34916: LD_VAR 0 1
34920: ARRAY
34921: PUSH
34922: LD_INT 1
34924: ARRAY
34925: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34926: LD_VAR 0 8
34930: PPUSH
34931: CALL_OW 301
34935: PUSH
34936: LD_VAR 0 5
34940: PUSH
34941: LD_VAR 0 8
34945: PPUSH
34946: CALL_OW 255
34950: NONEQUAL
34951: OR
34952: IFFALSE 34981
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34954: LD_ADDR_EXP 110
34958: PUSH
34959: LD_EXP 110
34963: PPUSH
34964: LD_VAR 0 8
34968: PPUSH
34969: LD_INT 0
34971: PPUSH
34972: CALL_OW 1
34976: ST_TO_ADDR
// exit ;
34977: POP
34978: POP
34979: GO 35512
// end ; x := list [ i ] [ 3 ] ;
34981: LD_ADDR_VAR 0 6
34985: PUSH
34986: LD_VAR 0 3
34990: PUSH
34991: LD_VAR 0 1
34995: ARRAY
34996: PUSH
34997: LD_INT 3
34999: ARRAY
35000: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35001: LD_ADDR_VAR 0 7
35005: PUSH
35006: LD_VAR 0 3
35010: PUSH
35011: LD_VAR 0 1
35015: ARRAY
35016: PUSH
35017: LD_INT 4
35019: ARRAY
35020: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35021: LD_ADDR_VAR 0 9
35025: PUSH
35026: LD_VAR 0 6
35030: PPUSH
35031: LD_VAR 0 7
35035: PPUSH
35036: LD_INT 16
35038: PPUSH
35039: CALL 80291 0 3
35043: ST_TO_ADDR
// if not cratesNearbyPoint then
35044: LD_VAR 0 9
35048: NOT
35049: IFFALSE 35055
// exit ;
35051: POP
35052: POP
35053: GO 35512
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35055: LD_ADDR_VAR 0 4
35059: PUSH
35060: LD_INT 22
35062: PUSH
35063: LD_VAR 0 5
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 3
35074: PUSH
35075: LD_INT 60
35077: PUSH
35078: EMPTY
35079: LIST
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 91
35087: PUSH
35088: LD_VAR 0 8
35092: PUSH
35093: LD_INT 6
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: LD_INT 25
35106: PUSH
35107: LD_INT 2
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 25
35116: PUSH
35117: LD_INT 16
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: LIST
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: PPUSH
35135: CALL_OW 69
35139: PUSH
35140: LD_VAR 0 8
35144: PPUSH
35145: CALL_OW 313
35149: PPUSH
35150: LD_INT 3
35152: PUSH
35153: LD_INT 60
35155: PUSH
35156: EMPTY
35157: LIST
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 2
35165: PUSH
35166: LD_INT 25
35168: PUSH
35169: LD_INT 2
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 25
35178: PUSH
35179: LD_INT 16
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: LIST
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PPUSH
35195: CALL_OW 72
35199: UNION
35200: ST_TO_ADDR
// if tmp then
35201: LD_VAR 0 4
35205: IFFALSE 35285
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35207: LD_ADDR_VAR 0 4
35211: PUSH
35212: LD_VAR 0 4
35216: PPUSH
35217: LD_INT 3
35219: PPUSH
35220: CALL 78260 0 2
35224: ST_TO_ADDR
// for j in tmp do
35225: LD_ADDR_VAR 0 2
35229: PUSH
35230: LD_VAR 0 4
35234: PUSH
35235: FOR_IN
35236: IFFALSE 35279
// begin if IsInUnit ( j ) then
35238: LD_VAR 0 2
35242: PPUSH
35243: CALL_OW 310
35247: IFFALSE 35258
// ComExit ( j ) ;
35249: LD_VAR 0 2
35253: PPUSH
35254: CALL 78343 0 1
// AddComCollect ( j , x , y ) ;
35258: LD_VAR 0 2
35262: PPUSH
35263: LD_VAR 0 6
35267: PPUSH
35268: LD_VAR 0 7
35272: PPUSH
35273: CALL_OW 177
// end ;
35277: GO 35235
35279: POP
35280: POP
// exit ;
35281: POP
35282: POP
35283: GO 35512
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35285: LD_ADDR_VAR 0 4
35289: PUSH
35290: LD_INT 22
35292: PUSH
35293: LD_VAR 0 5
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 91
35304: PUSH
35305: LD_VAR 0 8
35309: PUSH
35310: LD_INT 8
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 2
35320: PUSH
35321: LD_INT 34
35323: PUSH
35324: LD_INT 12
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 34
35333: PUSH
35334: LD_INT 51
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 34
35343: PUSH
35344: LD_INT 32
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 34
35353: PUSH
35354: LD_INT 89
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: LIST
35372: PPUSH
35373: CALL_OW 69
35377: ST_TO_ADDR
// if tmp then
35378: LD_VAR 0 4
35382: IFFALSE 35508
// begin for j in tmp do
35384: LD_ADDR_VAR 0 2
35388: PUSH
35389: LD_VAR 0 4
35393: PUSH
35394: FOR_IN
35395: IFFALSE 35506
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35397: LD_VAR 0 2
35401: PPUSH
35402: CALL_OW 262
35406: PUSH
35407: LD_INT 3
35409: EQUAL
35410: PUSH
35411: LD_VAR 0 2
35415: PPUSH
35416: CALL_OW 261
35420: PUSH
35421: LD_INT 20
35423: GREATER
35424: OR
35425: PUSH
35426: LD_VAR 0 2
35430: PPUSH
35431: CALL_OW 314
35435: NOT
35436: AND
35437: PUSH
35438: LD_VAR 0 2
35442: PPUSH
35443: CALL_OW 263
35447: PUSH
35448: LD_INT 1
35450: NONEQUAL
35451: PUSH
35452: LD_VAR 0 2
35456: PPUSH
35457: CALL_OW 311
35461: OR
35462: AND
35463: IFFALSE 35504
// begin ComCollect ( j , x , y ) ;
35465: LD_VAR 0 2
35469: PPUSH
35470: LD_VAR 0 6
35474: PPUSH
35475: LD_VAR 0 7
35479: PPUSH
35480: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35484: LD_VAR 0 2
35488: PPUSH
35489: LD_VAR 0 8
35493: PPUSH
35494: CALL_OW 172
// exit ;
35498: POP
35499: POP
35500: POP
35501: POP
35502: GO 35512
// end ;
35504: GO 35394
35506: POP
35507: POP
// end ; end ;
35508: GO 34883
35510: POP
35511: POP
// end ; end_of_file
35512: PPOPN 9
35514: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35515: LD_INT 0
35517: PPUSH
35518: PPUSH
35519: PPUSH
35520: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35521: LD_VAR 0 1
35525: PPUSH
35526: CALL_OW 264
35530: PUSH
35531: LD_INT 91
35533: EQUAL
35534: IFFALSE 35606
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35536: LD_INT 68
35538: PPUSH
35539: LD_VAR 0 1
35543: PPUSH
35544: CALL_OW 255
35548: PPUSH
35549: CALL_OW 321
35553: PUSH
35554: LD_INT 2
35556: EQUAL
35557: IFFALSE 35569
// eff := 70 else
35559: LD_ADDR_VAR 0 4
35563: PUSH
35564: LD_INT 70
35566: ST_TO_ADDR
35567: GO 35577
// eff := 30 ;
35569: LD_ADDR_VAR 0 4
35573: PUSH
35574: LD_INT 30
35576: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35577: LD_VAR 0 1
35581: PPUSH
35582: CALL_OW 250
35586: PPUSH
35587: LD_VAR 0 1
35591: PPUSH
35592: CALL_OW 251
35596: PPUSH
35597: LD_VAR 0 4
35601: PPUSH
35602: CALL_OW 495
// end ; end ;
35606: LD_VAR 0 2
35610: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35611: LD_INT 0
35613: PPUSH
// end ;
35614: LD_VAR 0 4
35618: RET
// export function SOS_Command ( cmd ) ; begin
35619: LD_INT 0
35621: PPUSH
// end ;
35622: LD_VAR 0 2
35626: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35627: LD_INT 0
35629: PPUSH
// end ;
35630: LD_VAR 0 6
35634: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35635: LD_INT 0
35637: PPUSH
35638: PPUSH
// if not vehicle or not factory then
35639: LD_VAR 0 1
35643: NOT
35644: PUSH
35645: LD_VAR 0 2
35649: NOT
35650: OR
35651: IFFALSE 35655
// exit ;
35653: GO 35886
// if factoryWaypoints >= factory then
35655: LD_EXP 109
35659: PUSH
35660: LD_VAR 0 2
35664: GREATEREQUAL
35665: IFFALSE 35886
// if factoryWaypoints [ factory ] then
35667: LD_EXP 109
35671: PUSH
35672: LD_VAR 0 2
35676: ARRAY
35677: IFFALSE 35886
// begin if GetControl ( vehicle ) = control_manual then
35679: LD_VAR 0 1
35683: PPUSH
35684: CALL_OW 263
35688: PUSH
35689: LD_INT 1
35691: EQUAL
35692: IFFALSE 35773
// begin driver := IsDrivenBy ( vehicle ) ;
35694: LD_ADDR_VAR 0 4
35698: PUSH
35699: LD_VAR 0 1
35703: PPUSH
35704: CALL_OW 311
35708: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35709: LD_VAR 0 4
35713: PPUSH
35714: LD_EXP 109
35718: PUSH
35719: LD_VAR 0 2
35723: ARRAY
35724: PUSH
35725: LD_INT 3
35727: ARRAY
35728: PPUSH
35729: LD_EXP 109
35733: PUSH
35734: LD_VAR 0 2
35738: ARRAY
35739: PUSH
35740: LD_INT 4
35742: ARRAY
35743: PPUSH
35744: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35748: LD_VAR 0 4
35752: PPUSH
35753: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35757: LD_VAR 0 4
35761: PPUSH
35762: LD_VAR 0 2
35766: PPUSH
35767: CALL_OW 180
// end else
35771: GO 35886
// if GetControl ( vehicle ) = control_remote then
35773: LD_VAR 0 1
35777: PPUSH
35778: CALL_OW 263
35782: PUSH
35783: LD_INT 2
35785: EQUAL
35786: IFFALSE 35847
// begin wait ( 0 0$2 ) ;
35788: LD_INT 70
35790: PPUSH
35791: CALL_OW 67
// if Connect ( vehicle ) then
35795: LD_VAR 0 1
35799: PPUSH
35800: CALL 48551 0 1
35804: IFFALSE 35845
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35806: LD_VAR 0 1
35810: PPUSH
35811: LD_EXP 109
35815: PUSH
35816: LD_VAR 0 2
35820: ARRAY
35821: PUSH
35822: LD_INT 3
35824: ARRAY
35825: PPUSH
35826: LD_EXP 109
35830: PUSH
35831: LD_VAR 0 2
35835: ARRAY
35836: PUSH
35837: LD_INT 4
35839: ARRAY
35840: PPUSH
35841: CALL_OW 171
// end else
35845: GO 35886
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35847: LD_VAR 0 1
35851: PPUSH
35852: LD_EXP 109
35856: PUSH
35857: LD_VAR 0 2
35861: ARRAY
35862: PUSH
35863: LD_INT 3
35865: ARRAY
35866: PPUSH
35867: LD_EXP 109
35871: PUSH
35872: LD_VAR 0 2
35876: ARRAY
35877: PUSH
35878: LD_INT 4
35880: ARRAY
35881: PPUSH
35882: CALL_OW 171
// end ; end ;
35886: LD_VAR 0 3
35890: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35891: LD_INT 0
35893: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35894: LD_VAR 0 1
35898: PUSH
35899: LD_INT 250
35901: EQUAL
35902: PUSH
35903: LD_VAR 0 2
35907: PPUSH
35908: CALL_OW 264
35912: PUSH
35913: LD_INT 81
35915: EQUAL
35916: AND
35917: IFFALSE 35938
// MinerPlaceMine ( unit , x , y ) ;
35919: LD_VAR 0 2
35923: PPUSH
35924: LD_VAR 0 4
35928: PPUSH
35929: LD_VAR 0 5
35933: PPUSH
35934: CALL 38762 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35938: LD_VAR 0 1
35942: PUSH
35943: LD_INT 251
35945: EQUAL
35946: PUSH
35947: LD_VAR 0 2
35951: PPUSH
35952: CALL_OW 264
35956: PUSH
35957: LD_INT 81
35959: EQUAL
35960: AND
35961: IFFALSE 35982
// MinerDetonateMine ( unit , x , y ) ;
35963: LD_VAR 0 2
35967: PPUSH
35968: LD_VAR 0 4
35972: PPUSH
35973: LD_VAR 0 5
35977: PPUSH
35978: CALL 39037 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35982: LD_VAR 0 1
35986: PUSH
35987: LD_INT 252
35989: EQUAL
35990: PUSH
35991: LD_VAR 0 2
35995: PPUSH
35996: CALL_OW 264
36000: PUSH
36001: LD_INT 81
36003: EQUAL
36004: AND
36005: IFFALSE 36026
// MinerCreateMinefield ( unit , x , y ) ;
36007: LD_VAR 0 2
36011: PPUSH
36012: LD_VAR 0 4
36016: PPUSH
36017: LD_VAR 0 5
36021: PPUSH
36022: CALL 39454 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36026: LD_VAR 0 1
36030: PUSH
36031: LD_INT 253
36033: EQUAL
36034: PUSH
36035: LD_VAR 0 2
36039: PPUSH
36040: CALL_OW 257
36044: PUSH
36045: LD_INT 5
36047: EQUAL
36048: AND
36049: IFFALSE 36070
// ComBinocular ( unit , x , y ) ;
36051: LD_VAR 0 2
36055: PPUSH
36056: LD_VAR 0 4
36060: PPUSH
36061: LD_VAR 0 5
36065: PPUSH
36066: CALL 39823 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36070: LD_VAR 0 1
36074: PUSH
36075: LD_INT 254
36077: EQUAL
36078: PUSH
36079: LD_VAR 0 2
36083: PPUSH
36084: CALL_OW 264
36088: PUSH
36089: LD_INT 99
36091: EQUAL
36092: AND
36093: PUSH
36094: LD_VAR 0 3
36098: PPUSH
36099: CALL_OW 263
36103: PUSH
36104: LD_INT 3
36106: EQUAL
36107: AND
36108: IFFALSE 36124
// HackDestroyVehicle ( unit , selectedUnit ) ;
36110: LD_VAR 0 2
36114: PPUSH
36115: LD_VAR 0 3
36119: PPUSH
36120: CALL 38126 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36124: LD_VAR 0 1
36128: PUSH
36129: LD_INT 255
36131: EQUAL
36132: PUSH
36133: LD_VAR 0 2
36137: PPUSH
36138: CALL_OW 264
36142: PUSH
36143: LD_INT 14
36145: PUSH
36146: LD_INT 53
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: IN
36153: AND
36154: PUSH
36155: LD_VAR 0 4
36159: PPUSH
36160: LD_VAR 0 5
36164: PPUSH
36165: CALL_OW 488
36169: AND
36170: IFFALSE 36194
// CutTreeXYR ( unit , x , y , 12 ) ;
36172: LD_VAR 0 2
36176: PPUSH
36177: LD_VAR 0 4
36181: PPUSH
36182: LD_VAR 0 5
36186: PPUSH
36187: LD_INT 12
36189: PPUSH
36190: CALL 36289 0 4
// if cmd = 256 then
36194: LD_VAR 0 1
36198: PUSH
36199: LD_INT 256
36201: EQUAL
36202: IFFALSE 36223
// SetFactoryWaypoint ( unit , x , y ) ;
36204: LD_VAR 0 2
36208: PPUSH
36209: LD_VAR 0 4
36213: PPUSH
36214: LD_VAR 0 5
36218: PPUSH
36219: CALL 34204 0 3
// if cmd = 257 then
36223: LD_VAR 0 1
36227: PUSH
36228: LD_INT 257
36230: EQUAL
36231: IFFALSE 36252
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36233: LD_VAR 0 2
36237: PPUSH
36238: LD_VAR 0 4
36242: PPUSH
36243: LD_VAR 0 5
36247: PPUSH
36248: CALL 34566 0 3
// if cmd = 258 then
36252: LD_VAR 0 1
36256: PUSH
36257: LD_INT 258
36259: EQUAL
36260: IFFALSE 36284
// BurnTreeXYR ( unit , x , y , 8 ) ;
36262: LD_VAR 0 2
36266: PPUSH
36267: LD_VAR 0 4
36271: PPUSH
36272: LD_VAR 0 5
36276: PPUSH
36277: LD_INT 8
36279: PPUSH
36280: CALL 36683 0 4
// end ;
36284: LD_VAR 0 6
36288: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36289: LD_INT 0
36291: PPUSH
36292: PPUSH
36293: PPUSH
36294: PPUSH
36295: PPUSH
36296: PPUSH
36297: PPUSH
36298: PPUSH
36299: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36300: LD_VAR 0 1
36304: PPUSH
36305: CALL_OW 302
36309: NOT
36310: PUSH
36311: LD_VAR 0 2
36315: PPUSH
36316: LD_VAR 0 3
36320: PPUSH
36321: CALL_OW 488
36325: NOT
36326: OR
36327: PUSH
36328: LD_VAR 0 4
36332: NOT
36333: OR
36334: IFFALSE 36338
// exit ;
36336: GO 36678
// list := [ ] ;
36338: LD_ADDR_VAR 0 13
36342: PUSH
36343: EMPTY
36344: ST_TO_ADDR
// if x - r < 0 then
36345: LD_VAR 0 2
36349: PUSH
36350: LD_VAR 0 4
36354: MINUS
36355: PUSH
36356: LD_INT 0
36358: LESS
36359: IFFALSE 36371
// min_x := 0 else
36361: LD_ADDR_VAR 0 7
36365: PUSH
36366: LD_INT 0
36368: ST_TO_ADDR
36369: GO 36387
// min_x := x - r ;
36371: LD_ADDR_VAR 0 7
36375: PUSH
36376: LD_VAR 0 2
36380: PUSH
36381: LD_VAR 0 4
36385: MINUS
36386: ST_TO_ADDR
// if y - r < 0 then
36387: LD_VAR 0 3
36391: PUSH
36392: LD_VAR 0 4
36396: MINUS
36397: PUSH
36398: LD_INT 0
36400: LESS
36401: IFFALSE 36413
// min_y := 0 else
36403: LD_ADDR_VAR 0 8
36407: PUSH
36408: LD_INT 0
36410: ST_TO_ADDR
36411: GO 36429
// min_y := y - r ;
36413: LD_ADDR_VAR 0 8
36417: PUSH
36418: LD_VAR 0 3
36422: PUSH
36423: LD_VAR 0 4
36427: MINUS
36428: ST_TO_ADDR
// max_x := x + r ;
36429: LD_ADDR_VAR 0 9
36433: PUSH
36434: LD_VAR 0 2
36438: PUSH
36439: LD_VAR 0 4
36443: PLUS
36444: ST_TO_ADDR
// max_y := y + r ;
36445: LD_ADDR_VAR 0 10
36449: PUSH
36450: LD_VAR 0 3
36454: PUSH
36455: LD_VAR 0 4
36459: PLUS
36460: ST_TO_ADDR
// for _x = min_x to max_x do
36461: LD_ADDR_VAR 0 11
36465: PUSH
36466: DOUBLE
36467: LD_VAR 0 7
36471: DEC
36472: ST_TO_ADDR
36473: LD_VAR 0 9
36477: PUSH
36478: FOR_TO
36479: IFFALSE 36596
// for _y = min_y to max_y do
36481: LD_ADDR_VAR 0 12
36485: PUSH
36486: DOUBLE
36487: LD_VAR 0 8
36491: DEC
36492: ST_TO_ADDR
36493: LD_VAR 0 10
36497: PUSH
36498: FOR_TO
36499: IFFALSE 36592
// begin if not ValidHex ( _x , _y ) then
36501: LD_VAR 0 11
36505: PPUSH
36506: LD_VAR 0 12
36510: PPUSH
36511: CALL_OW 488
36515: NOT
36516: IFFALSE 36520
// continue ;
36518: GO 36498
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36520: LD_VAR 0 11
36524: PPUSH
36525: LD_VAR 0 12
36529: PPUSH
36530: CALL_OW 351
36534: PUSH
36535: LD_VAR 0 11
36539: PPUSH
36540: LD_VAR 0 12
36544: PPUSH
36545: CALL_OW 554
36549: AND
36550: IFFALSE 36590
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36552: LD_ADDR_VAR 0 13
36556: PUSH
36557: LD_VAR 0 13
36561: PPUSH
36562: LD_VAR 0 13
36566: PUSH
36567: LD_INT 1
36569: PLUS
36570: PPUSH
36571: LD_VAR 0 11
36575: PUSH
36576: LD_VAR 0 12
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PPUSH
36585: CALL_OW 2
36589: ST_TO_ADDR
// end ;
36590: GO 36498
36592: POP
36593: POP
36594: GO 36478
36596: POP
36597: POP
// if not list then
36598: LD_VAR 0 13
36602: NOT
36603: IFFALSE 36607
// exit ;
36605: GO 36678
// for i in list do
36607: LD_ADDR_VAR 0 6
36611: PUSH
36612: LD_VAR 0 13
36616: PUSH
36617: FOR_IN
36618: IFFALSE 36676
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36620: LD_VAR 0 1
36624: PPUSH
36625: LD_STRING M
36627: PUSH
36628: LD_VAR 0 6
36632: PUSH
36633: LD_INT 1
36635: ARRAY
36636: PUSH
36637: LD_VAR 0 6
36641: PUSH
36642: LD_INT 2
36644: ARRAY
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: LD_INT 0
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: PUSH
36667: EMPTY
36668: LIST
36669: PPUSH
36670: CALL_OW 447
36674: GO 36617
36676: POP
36677: POP
// end ;
36678: LD_VAR 0 5
36682: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36683: LD_INT 0
36685: PPUSH
36686: PPUSH
36687: PPUSH
36688: PPUSH
36689: PPUSH
36690: PPUSH
36691: PPUSH
36692: PPUSH
36693: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36694: LD_VAR 0 1
36698: PPUSH
36699: CALL_OW 302
36703: NOT
36704: PUSH
36705: LD_VAR 0 2
36709: PPUSH
36710: LD_VAR 0 3
36714: PPUSH
36715: CALL_OW 488
36719: NOT
36720: OR
36721: PUSH
36722: LD_VAR 0 4
36726: NOT
36727: OR
36728: IFFALSE 36732
// exit ;
36730: GO 37080
// list := [ ] ;
36732: LD_ADDR_VAR 0 13
36736: PUSH
36737: EMPTY
36738: ST_TO_ADDR
// if x - r < 0 then
36739: LD_VAR 0 2
36743: PUSH
36744: LD_VAR 0 4
36748: MINUS
36749: PUSH
36750: LD_INT 0
36752: LESS
36753: IFFALSE 36765
// min_x := 0 else
36755: LD_ADDR_VAR 0 7
36759: PUSH
36760: LD_INT 0
36762: ST_TO_ADDR
36763: GO 36781
// min_x := x - r ;
36765: LD_ADDR_VAR 0 7
36769: PUSH
36770: LD_VAR 0 2
36774: PUSH
36775: LD_VAR 0 4
36779: MINUS
36780: ST_TO_ADDR
// if y - r < 0 then
36781: LD_VAR 0 3
36785: PUSH
36786: LD_VAR 0 4
36790: MINUS
36791: PUSH
36792: LD_INT 0
36794: LESS
36795: IFFALSE 36807
// min_y := 0 else
36797: LD_ADDR_VAR 0 8
36801: PUSH
36802: LD_INT 0
36804: ST_TO_ADDR
36805: GO 36823
// min_y := y - r ;
36807: LD_ADDR_VAR 0 8
36811: PUSH
36812: LD_VAR 0 3
36816: PUSH
36817: LD_VAR 0 4
36821: MINUS
36822: ST_TO_ADDR
// max_x := x + r ;
36823: LD_ADDR_VAR 0 9
36827: PUSH
36828: LD_VAR 0 2
36832: PUSH
36833: LD_VAR 0 4
36837: PLUS
36838: ST_TO_ADDR
// max_y := y + r ;
36839: LD_ADDR_VAR 0 10
36843: PUSH
36844: LD_VAR 0 3
36848: PUSH
36849: LD_VAR 0 4
36853: PLUS
36854: ST_TO_ADDR
// for _x = min_x to max_x do
36855: LD_ADDR_VAR 0 11
36859: PUSH
36860: DOUBLE
36861: LD_VAR 0 7
36865: DEC
36866: ST_TO_ADDR
36867: LD_VAR 0 9
36871: PUSH
36872: FOR_TO
36873: IFFALSE 36990
// for _y = min_y to max_y do
36875: LD_ADDR_VAR 0 12
36879: PUSH
36880: DOUBLE
36881: LD_VAR 0 8
36885: DEC
36886: ST_TO_ADDR
36887: LD_VAR 0 10
36891: PUSH
36892: FOR_TO
36893: IFFALSE 36986
// begin if not ValidHex ( _x , _y ) then
36895: LD_VAR 0 11
36899: PPUSH
36900: LD_VAR 0 12
36904: PPUSH
36905: CALL_OW 488
36909: NOT
36910: IFFALSE 36914
// continue ;
36912: GO 36892
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36914: LD_VAR 0 11
36918: PPUSH
36919: LD_VAR 0 12
36923: PPUSH
36924: CALL_OW 351
36928: PUSH
36929: LD_VAR 0 11
36933: PPUSH
36934: LD_VAR 0 12
36938: PPUSH
36939: CALL_OW 554
36943: AND
36944: IFFALSE 36984
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36946: LD_ADDR_VAR 0 13
36950: PUSH
36951: LD_VAR 0 13
36955: PPUSH
36956: LD_VAR 0 13
36960: PUSH
36961: LD_INT 1
36963: PLUS
36964: PPUSH
36965: LD_VAR 0 11
36969: PUSH
36970: LD_VAR 0 12
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PPUSH
36979: CALL_OW 2
36983: ST_TO_ADDR
// end ;
36984: GO 36892
36986: POP
36987: POP
36988: GO 36872
36990: POP
36991: POP
// if not list then
36992: LD_VAR 0 13
36996: NOT
36997: IFFALSE 37001
// exit ;
36999: GO 37080
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37001: LD_ADDR_VAR 0 13
37005: PUSH
37006: LD_VAR 0 1
37010: PPUSH
37011: LD_VAR 0 13
37015: PPUSH
37016: LD_INT 1
37018: PPUSH
37019: LD_INT 1
37021: PPUSH
37022: CALL 45693 0 4
37026: ST_TO_ADDR
// ComStop ( flame ) ;
37027: LD_VAR 0 1
37031: PPUSH
37032: CALL_OW 141
// for i in list do
37036: LD_ADDR_VAR 0 6
37040: PUSH
37041: LD_VAR 0 13
37045: PUSH
37046: FOR_IN
37047: IFFALSE 37078
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37049: LD_VAR 0 1
37053: PPUSH
37054: LD_VAR 0 6
37058: PUSH
37059: LD_INT 1
37061: ARRAY
37062: PPUSH
37063: LD_VAR 0 6
37067: PUSH
37068: LD_INT 2
37070: ARRAY
37071: PPUSH
37072: CALL_OW 176
37076: GO 37046
37078: POP
37079: POP
// end ;
37080: LD_VAR 0 5
37084: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37085: LD_EXP 112
37089: NOT
37090: IFFALSE 37140
37092: GO 37094
37094: DISABLE
// begin initHack := true ;
37095: LD_ADDR_EXP 112
37099: PUSH
37100: LD_INT 1
37102: ST_TO_ADDR
// hackTanks := [ ] ;
37103: LD_ADDR_EXP 113
37107: PUSH
37108: EMPTY
37109: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37110: LD_ADDR_EXP 114
37114: PUSH
37115: EMPTY
37116: ST_TO_ADDR
// hackLimit := 3 ;
37117: LD_ADDR_EXP 115
37121: PUSH
37122: LD_INT 3
37124: ST_TO_ADDR
// hackDist := 12 ;
37125: LD_ADDR_EXP 116
37129: PUSH
37130: LD_INT 12
37132: ST_TO_ADDR
// hackCounter := [ ] ;
37133: LD_ADDR_EXP 117
37137: PUSH
37138: EMPTY
37139: ST_TO_ADDR
// end ;
37140: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37141: LD_EXP 112
37145: PUSH
37146: LD_INT 34
37148: PUSH
37149: LD_INT 99
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PPUSH
37156: CALL_OW 69
37160: AND
37161: IFFALSE 37414
37163: GO 37165
37165: DISABLE
37166: LD_INT 0
37168: PPUSH
37169: PPUSH
// begin enable ;
37170: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37171: LD_ADDR_VAR 0 1
37175: PUSH
37176: LD_INT 34
37178: PUSH
37179: LD_INT 99
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PPUSH
37186: CALL_OW 69
37190: PUSH
37191: FOR_IN
37192: IFFALSE 37412
// begin if not i in hackTanks then
37194: LD_VAR 0 1
37198: PUSH
37199: LD_EXP 113
37203: IN
37204: NOT
37205: IFFALSE 37288
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37207: LD_ADDR_EXP 113
37211: PUSH
37212: LD_EXP 113
37216: PPUSH
37217: LD_EXP 113
37221: PUSH
37222: LD_INT 1
37224: PLUS
37225: PPUSH
37226: LD_VAR 0 1
37230: PPUSH
37231: CALL_OW 1
37235: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37236: LD_ADDR_EXP 114
37240: PUSH
37241: LD_EXP 114
37245: PPUSH
37246: LD_EXP 114
37250: PUSH
37251: LD_INT 1
37253: PLUS
37254: PPUSH
37255: EMPTY
37256: PPUSH
37257: CALL_OW 1
37261: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37262: LD_ADDR_EXP 117
37266: PUSH
37267: LD_EXP 117
37271: PPUSH
37272: LD_EXP 117
37276: PUSH
37277: LD_INT 1
37279: PLUS
37280: PPUSH
37281: EMPTY
37282: PPUSH
37283: CALL_OW 1
37287: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37288: LD_VAR 0 1
37292: PPUSH
37293: CALL_OW 302
37297: NOT
37298: IFFALSE 37311
// begin HackUnlinkAll ( i ) ;
37300: LD_VAR 0 1
37304: PPUSH
37305: CALL 37417 0 1
// continue ;
37309: GO 37191
// end ; HackCheckCapturedStatus ( i ) ;
37311: LD_VAR 0 1
37315: PPUSH
37316: CALL 37860 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37320: LD_ADDR_VAR 0 2
37324: PUSH
37325: LD_INT 81
37327: PUSH
37328: LD_VAR 0 1
37332: PPUSH
37333: CALL_OW 255
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 33
37344: PUSH
37345: LD_INT 3
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 91
37354: PUSH
37355: LD_VAR 0 1
37359: PUSH
37360: LD_EXP 116
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 50
37372: PUSH
37373: EMPTY
37374: LIST
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: PPUSH
37382: CALL_OW 69
37386: ST_TO_ADDR
// if not tmp then
37387: LD_VAR 0 2
37391: NOT
37392: IFFALSE 37396
// continue ;
37394: GO 37191
// HackLink ( i , tmp ) ;
37396: LD_VAR 0 1
37400: PPUSH
37401: LD_VAR 0 2
37405: PPUSH
37406: CALL 37553 0 2
// end ;
37410: GO 37191
37412: POP
37413: POP
// end ;
37414: PPOPN 2
37416: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37417: LD_INT 0
37419: PPUSH
37420: PPUSH
37421: PPUSH
// if not hack in hackTanks then
37422: LD_VAR 0 1
37426: PUSH
37427: LD_EXP 113
37431: IN
37432: NOT
37433: IFFALSE 37437
// exit ;
37435: GO 37548
// index := GetElementIndex ( hackTanks , hack ) ;
37437: LD_ADDR_VAR 0 4
37441: PUSH
37442: LD_EXP 113
37446: PPUSH
37447: LD_VAR 0 1
37451: PPUSH
37452: CALL 44990 0 2
37456: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37457: LD_EXP 114
37461: PUSH
37462: LD_VAR 0 4
37466: ARRAY
37467: IFFALSE 37548
// begin for i in hackTanksCaptured [ index ] do
37469: LD_ADDR_VAR 0 3
37473: PUSH
37474: LD_EXP 114
37478: PUSH
37479: LD_VAR 0 4
37483: ARRAY
37484: PUSH
37485: FOR_IN
37486: IFFALSE 37512
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37488: LD_VAR 0 3
37492: PUSH
37493: LD_INT 1
37495: ARRAY
37496: PPUSH
37497: LD_VAR 0 3
37501: PUSH
37502: LD_INT 2
37504: ARRAY
37505: PPUSH
37506: CALL_OW 235
37510: GO 37485
37512: POP
37513: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37514: LD_ADDR_EXP 114
37518: PUSH
37519: LD_EXP 114
37523: PPUSH
37524: LD_VAR 0 4
37528: PPUSH
37529: EMPTY
37530: PPUSH
37531: CALL_OW 1
37535: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37536: LD_VAR 0 1
37540: PPUSH
37541: LD_INT 0
37543: PPUSH
37544: CALL_OW 505
// end ; end ;
37548: LD_VAR 0 2
37552: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37553: LD_INT 0
37555: PPUSH
37556: PPUSH
37557: PPUSH
// if not hack in hackTanks or not vehicles then
37558: LD_VAR 0 1
37562: PUSH
37563: LD_EXP 113
37567: IN
37568: NOT
37569: PUSH
37570: LD_VAR 0 2
37574: NOT
37575: OR
37576: IFFALSE 37580
// exit ;
37578: GO 37855
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37580: LD_ADDR_VAR 0 2
37584: PUSH
37585: LD_VAR 0 1
37589: PPUSH
37590: LD_VAR 0 2
37594: PPUSH
37595: LD_INT 1
37597: PPUSH
37598: LD_INT 1
37600: PPUSH
37601: CALL 45640 0 4
37605: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37606: LD_ADDR_VAR 0 5
37610: PUSH
37611: LD_EXP 113
37615: PPUSH
37616: LD_VAR 0 1
37620: PPUSH
37621: CALL 44990 0 2
37625: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37626: LD_EXP 114
37630: PUSH
37631: LD_VAR 0 5
37635: ARRAY
37636: PUSH
37637: LD_EXP 115
37641: LESS
37642: IFFALSE 37831
// begin for i := 1 to vehicles do
37644: LD_ADDR_VAR 0 4
37648: PUSH
37649: DOUBLE
37650: LD_INT 1
37652: DEC
37653: ST_TO_ADDR
37654: LD_VAR 0 2
37658: PUSH
37659: FOR_TO
37660: IFFALSE 37829
// begin if hackTanksCaptured [ index ] = hackLimit then
37662: LD_EXP 114
37666: PUSH
37667: LD_VAR 0 5
37671: ARRAY
37672: PUSH
37673: LD_EXP 115
37677: EQUAL
37678: IFFALSE 37682
// break ;
37680: GO 37829
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37682: LD_ADDR_EXP 117
37686: PUSH
37687: LD_EXP 117
37691: PPUSH
37692: LD_VAR 0 5
37696: PPUSH
37697: LD_EXP 117
37701: PUSH
37702: LD_VAR 0 5
37706: ARRAY
37707: PUSH
37708: LD_INT 1
37710: PLUS
37711: PPUSH
37712: CALL_OW 1
37716: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37717: LD_ADDR_EXP 114
37721: PUSH
37722: LD_EXP 114
37726: PPUSH
37727: LD_VAR 0 5
37731: PUSH
37732: LD_EXP 114
37736: PUSH
37737: LD_VAR 0 5
37741: ARRAY
37742: PUSH
37743: LD_INT 1
37745: PLUS
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PPUSH
37751: LD_VAR 0 2
37755: PUSH
37756: LD_VAR 0 4
37760: ARRAY
37761: PUSH
37762: LD_VAR 0 2
37766: PUSH
37767: LD_VAR 0 4
37771: ARRAY
37772: PPUSH
37773: CALL_OW 255
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PPUSH
37782: CALL 45205 0 3
37786: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37787: LD_VAR 0 2
37791: PUSH
37792: LD_VAR 0 4
37796: ARRAY
37797: PPUSH
37798: LD_VAR 0 1
37802: PPUSH
37803: CALL_OW 255
37807: PPUSH
37808: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37812: LD_VAR 0 2
37816: PUSH
37817: LD_VAR 0 4
37821: ARRAY
37822: PPUSH
37823: CALL_OW 141
// end ;
37827: GO 37659
37829: POP
37830: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37831: LD_VAR 0 1
37835: PPUSH
37836: LD_EXP 114
37840: PUSH
37841: LD_VAR 0 5
37845: ARRAY
37846: PUSH
37847: LD_INT 0
37849: PLUS
37850: PPUSH
37851: CALL_OW 505
// end ;
37855: LD_VAR 0 3
37859: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37860: LD_INT 0
37862: PPUSH
37863: PPUSH
37864: PPUSH
37865: PPUSH
// if not hack in hackTanks then
37866: LD_VAR 0 1
37870: PUSH
37871: LD_EXP 113
37875: IN
37876: NOT
37877: IFFALSE 37881
// exit ;
37879: GO 38121
// index := GetElementIndex ( hackTanks , hack ) ;
37881: LD_ADDR_VAR 0 4
37885: PUSH
37886: LD_EXP 113
37890: PPUSH
37891: LD_VAR 0 1
37895: PPUSH
37896: CALL 44990 0 2
37900: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37901: LD_ADDR_VAR 0 3
37905: PUSH
37906: DOUBLE
37907: LD_EXP 114
37911: PUSH
37912: LD_VAR 0 4
37916: ARRAY
37917: INC
37918: ST_TO_ADDR
37919: LD_INT 1
37921: PUSH
37922: FOR_DOWNTO
37923: IFFALSE 38095
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37925: LD_ADDR_VAR 0 5
37929: PUSH
37930: LD_EXP 114
37934: PUSH
37935: LD_VAR 0 4
37939: ARRAY
37940: PUSH
37941: LD_VAR 0 3
37945: ARRAY
37946: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37947: LD_VAR 0 5
37951: PUSH
37952: LD_INT 1
37954: ARRAY
37955: PPUSH
37956: CALL_OW 302
37960: NOT
37961: PUSH
37962: LD_VAR 0 5
37966: PUSH
37967: LD_INT 1
37969: ARRAY
37970: PPUSH
37971: CALL_OW 255
37975: PUSH
37976: LD_VAR 0 1
37980: PPUSH
37981: CALL_OW 255
37985: NONEQUAL
37986: OR
37987: IFFALSE 38093
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37989: LD_VAR 0 5
37993: PUSH
37994: LD_INT 1
37996: ARRAY
37997: PPUSH
37998: CALL_OW 305
38002: PUSH
38003: LD_VAR 0 5
38007: PUSH
38008: LD_INT 1
38010: ARRAY
38011: PPUSH
38012: CALL_OW 255
38016: PUSH
38017: LD_VAR 0 1
38021: PPUSH
38022: CALL_OW 255
38026: EQUAL
38027: AND
38028: IFFALSE 38052
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38030: LD_VAR 0 5
38034: PUSH
38035: LD_INT 1
38037: ARRAY
38038: PPUSH
38039: LD_VAR 0 5
38043: PUSH
38044: LD_INT 2
38046: ARRAY
38047: PPUSH
38048: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38052: LD_ADDR_EXP 114
38056: PUSH
38057: LD_EXP 114
38061: PPUSH
38062: LD_VAR 0 4
38066: PPUSH
38067: LD_EXP 114
38071: PUSH
38072: LD_VAR 0 4
38076: ARRAY
38077: PPUSH
38078: LD_VAR 0 3
38082: PPUSH
38083: CALL_OW 3
38087: PPUSH
38088: CALL_OW 1
38092: ST_TO_ADDR
// end ; end ;
38093: GO 37922
38095: POP
38096: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38097: LD_VAR 0 1
38101: PPUSH
38102: LD_EXP 114
38106: PUSH
38107: LD_VAR 0 4
38111: ARRAY
38112: PUSH
38113: LD_INT 0
38115: PLUS
38116: PPUSH
38117: CALL_OW 505
// end ;
38121: LD_VAR 0 2
38125: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38126: LD_INT 0
38128: PPUSH
38129: PPUSH
38130: PPUSH
38131: PPUSH
// if not hack in hackTanks then
38132: LD_VAR 0 1
38136: PUSH
38137: LD_EXP 113
38141: IN
38142: NOT
38143: IFFALSE 38147
// exit ;
38145: GO 38232
// index := GetElementIndex ( hackTanks , hack ) ;
38147: LD_ADDR_VAR 0 5
38151: PUSH
38152: LD_EXP 113
38156: PPUSH
38157: LD_VAR 0 1
38161: PPUSH
38162: CALL 44990 0 2
38166: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38167: LD_ADDR_VAR 0 4
38171: PUSH
38172: DOUBLE
38173: LD_INT 1
38175: DEC
38176: ST_TO_ADDR
38177: LD_EXP 114
38181: PUSH
38182: LD_VAR 0 5
38186: ARRAY
38187: PUSH
38188: FOR_TO
38189: IFFALSE 38230
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38191: LD_EXP 114
38195: PUSH
38196: LD_VAR 0 5
38200: ARRAY
38201: PUSH
38202: LD_VAR 0 4
38206: ARRAY
38207: PUSH
38208: LD_INT 1
38210: ARRAY
38211: PUSH
38212: LD_VAR 0 2
38216: EQUAL
38217: IFFALSE 38228
// KillUnit ( vehicle ) ;
38219: LD_VAR 0 2
38223: PPUSH
38224: CALL_OW 66
38228: GO 38188
38230: POP
38231: POP
// end ;
38232: LD_VAR 0 3
38236: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38237: LD_EXP 118
38241: NOT
38242: IFFALSE 38277
38244: GO 38246
38246: DISABLE
// begin initMiner := true ;
38247: LD_ADDR_EXP 118
38251: PUSH
38252: LD_INT 1
38254: ST_TO_ADDR
// minersList := [ ] ;
38255: LD_ADDR_EXP 119
38259: PUSH
38260: EMPTY
38261: ST_TO_ADDR
// minerMinesList := [ ] ;
38262: LD_ADDR_EXP 120
38266: PUSH
38267: EMPTY
38268: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38269: LD_ADDR_EXP 121
38273: PUSH
38274: LD_INT 5
38276: ST_TO_ADDR
// end ;
38277: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38278: LD_EXP 118
38282: PUSH
38283: LD_INT 34
38285: PUSH
38286: LD_INT 81
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PPUSH
38293: CALL_OW 69
38297: AND
38298: IFFALSE 38759
38300: GO 38302
38302: DISABLE
38303: LD_INT 0
38305: PPUSH
38306: PPUSH
38307: PPUSH
38308: PPUSH
// begin enable ;
38309: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38310: LD_ADDR_VAR 0 1
38314: PUSH
38315: LD_INT 34
38317: PUSH
38318: LD_INT 81
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PPUSH
38325: CALL_OW 69
38329: PUSH
38330: FOR_IN
38331: IFFALSE 38403
// begin if not i in minersList then
38333: LD_VAR 0 1
38337: PUSH
38338: LD_EXP 119
38342: IN
38343: NOT
38344: IFFALSE 38401
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38346: LD_ADDR_EXP 119
38350: PUSH
38351: LD_EXP 119
38355: PPUSH
38356: LD_EXP 119
38360: PUSH
38361: LD_INT 1
38363: PLUS
38364: PPUSH
38365: LD_VAR 0 1
38369: PPUSH
38370: CALL_OW 1
38374: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38375: LD_ADDR_EXP 120
38379: PUSH
38380: LD_EXP 120
38384: PPUSH
38385: LD_EXP 120
38389: PUSH
38390: LD_INT 1
38392: PLUS
38393: PPUSH
38394: EMPTY
38395: PPUSH
38396: CALL_OW 1
38400: ST_TO_ADDR
// end end ;
38401: GO 38330
38403: POP
38404: POP
// for i := minerMinesList downto 1 do
38405: LD_ADDR_VAR 0 1
38409: PUSH
38410: DOUBLE
38411: LD_EXP 120
38415: INC
38416: ST_TO_ADDR
38417: LD_INT 1
38419: PUSH
38420: FOR_DOWNTO
38421: IFFALSE 38757
// begin if IsLive ( minersList [ i ] ) then
38423: LD_EXP 119
38427: PUSH
38428: LD_VAR 0 1
38432: ARRAY
38433: PPUSH
38434: CALL_OW 300
38438: IFFALSE 38466
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38440: LD_EXP 119
38444: PUSH
38445: LD_VAR 0 1
38449: ARRAY
38450: PPUSH
38451: LD_EXP 120
38455: PUSH
38456: LD_VAR 0 1
38460: ARRAY
38461: PPUSH
38462: CALL_OW 505
// if not minerMinesList [ i ] then
38466: LD_EXP 120
38470: PUSH
38471: LD_VAR 0 1
38475: ARRAY
38476: NOT
38477: IFFALSE 38481
// continue ;
38479: GO 38420
// for j := minerMinesList [ i ] downto 1 do
38481: LD_ADDR_VAR 0 2
38485: PUSH
38486: DOUBLE
38487: LD_EXP 120
38491: PUSH
38492: LD_VAR 0 1
38496: ARRAY
38497: INC
38498: ST_TO_ADDR
38499: LD_INT 1
38501: PUSH
38502: FOR_DOWNTO
38503: IFFALSE 38753
// begin side := GetSide ( minersList [ i ] ) ;
38505: LD_ADDR_VAR 0 3
38509: PUSH
38510: LD_EXP 119
38514: PUSH
38515: LD_VAR 0 1
38519: ARRAY
38520: PPUSH
38521: CALL_OW 255
38525: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38526: LD_ADDR_VAR 0 4
38530: PUSH
38531: LD_EXP 120
38535: PUSH
38536: LD_VAR 0 1
38540: ARRAY
38541: PUSH
38542: LD_VAR 0 2
38546: ARRAY
38547: PUSH
38548: LD_INT 1
38550: ARRAY
38551: PPUSH
38552: LD_EXP 120
38556: PUSH
38557: LD_VAR 0 1
38561: ARRAY
38562: PUSH
38563: LD_VAR 0 2
38567: ARRAY
38568: PUSH
38569: LD_INT 2
38571: ARRAY
38572: PPUSH
38573: CALL_OW 428
38577: ST_TO_ADDR
// if not tmp then
38578: LD_VAR 0 4
38582: NOT
38583: IFFALSE 38587
// continue ;
38585: GO 38502
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38587: LD_VAR 0 4
38591: PUSH
38592: LD_INT 81
38594: PUSH
38595: LD_VAR 0 3
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PPUSH
38604: CALL_OW 69
38608: IN
38609: PUSH
38610: LD_EXP 120
38614: PUSH
38615: LD_VAR 0 1
38619: ARRAY
38620: PUSH
38621: LD_VAR 0 2
38625: ARRAY
38626: PUSH
38627: LD_INT 1
38629: ARRAY
38630: PPUSH
38631: LD_EXP 120
38635: PUSH
38636: LD_VAR 0 1
38640: ARRAY
38641: PUSH
38642: LD_VAR 0 2
38646: ARRAY
38647: PUSH
38648: LD_INT 2
38650: ARRAY
38651: PPUSH
38652: CALL_OW 458
38656: AND
38657: IFFALSE 38751
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38659: LD_EXP 120
38663: PUSH
38664: LD_VAR 0 1
38668: ARRAY
38669: PUSH
38670: LD_VAR 0 2
38674: ARRAY
38675: PUSH
38676: LD_INT 1
38678: ARRAY
38679: PPUSH
38680: LD_EXP 120
38684: PUSH
38685: LD_VAR 0 1
38689: ARRAY
38690: PUSH
38691: LD_VAR 0 2
38695: ARRAY
38696: PUSH
38697: LD_INT 2
38699: ARRAY
38700: PPUSH
38701: LD_VAR 0 3
38705: PPUSH
38706: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38710: LD_ADDR_EXP 120
38714: PUSH
38715: LD_EXP 120
38719: PPUSH
38720: LD_VAR 0 1
38724: PPUSH
38725: LD_EXP 120
38729: PUSH
38730: LD_VAR 0 1
38734: ARRAY
38735: PPUSH
38736: LD_VAR 0 2
38740: PPUSH
38741: CALL_OW 3
38745: PPUSH
38746: CALL_OW 1
38750: ST_TO_ADDR
// end ; end ;
38751: GO 38502
38753: POP
38754: POP
// end ;
38755: GO 38420
38757: POP
38758: POP
// end ;
38759: PPOPN 4
38761: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38762: LD_INT 0
38764: PPUSH
38765: PPUSH
// result := false ;
38766: LD_ADDR_VAR 0 4
38770: PUSH
38771: LD_INT 0
38773: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38774: LD_VAR 0 1
38778: PPUSH
38779: CALL_OW 264
38783: PUSH
38784: LD_INT 81
38786: EQUAL
38787: NOT
38788: IFFALSE 38792
// exit ;
38790: GO 39032
// index := GetElementIndex ( minersList , unit ) ;
38792: LD_ADDR_VAR 0 5
38796: PUSH
38797: LD_EXP 119
38801: PPUSH
38802: LD_VAR 0 1
38806: PPUSH
38807: CALL 44990 0 2
38811: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38812: LD_EXP 120
38816: PUSH
38817: LD_VAR 0 5
38821: ARRAY
38822: PUSH
38823: LD_EXP 121
38827: GREATEREQUAL
38828: IFFALSE 38832
// exit ;
38830: GO 39032
// ComMoveXY ( unit , x , y ) ;
38832: LD_VAR 0 1
38836: PPUSH
38837: LD_VAR 0 2
38841: PPUSH
38842: LD_VAR 0 3
38846: PPUSH
38847: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38851: LD_INT 35
38853: PPUSH
38854: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38858: LD_VAR 0 1
38862: PPUSH
38863: LD_VAR 0 2
38867: PPUSH
38868: LD_VAR 0 3
38872: PPUSH
38873: CALL 76742 0 3
38877: NOT
38878: PUSH
38879: LD_VAR 0 1
38883: PPUSH
38884: CALL_OW 314
38888: AND
38889: IFFALSE 38893
// exit ;
38891: GO 39032
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38893: LD_VAR 0 2
38897: PPUSH
38898: LD_VAR 0 3
38902: PPUSH
38903: CALL_OW 428
38907: PUSH
38908: LD_VAR 0 1
38912: EQUAL
38913: PUSH
38914: LD_VAR 0 1
38918: PPUSH
38919: CALL_OW 314
38923: NOT
38924: AND
38925: IFFALSE 38851
// PlaySoundXY ( x , y , PlantMine ) ;
38927: LD_VAR 0 2
38931: PPUSH
38932: LD_VAR 0 3
38936: PPUSH
38937: LD_STRING PlantMine
38939: PPUSH
38940: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38944: LD_VAR 0 2
38948: PPUSH
38949: LD_VAR 0 3
38953: PPUSH
38954: LD_VAR 0 1
38958: PPUSH
38959: CALL_OW 255
38963: PPUSH
38964: LD_INT 0
38966: PPUSH
38967: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38971: LD_ADDR_EXP 120
38975: PUSH
38976: LD_EXP 120
38980: PPUSH
38981: LD_VAR 0 5
38985: PUSH
38986: LD_EXP 120
38990: PUSH
38991: LD_VAR 0 5
38995: ARRAY
38996: PUSH
38997: LD_INT 1
38999: PLUS
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PPUSH
39005: LD_VAR 0 2
39009: PUSH
39010: LD_VAR 0 3
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PPUSH
39019: CALL 45205 0 3
39023: ST_TO_ADDR
// result := true ;
39024: LD_ADDR_VAR 0 4
39028: PUSH
39029: LD_INT 1
39031: ST_TO_ADDR
// end ;
39032: LD_VAR 0 4
39036: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39037: LD_INT 0
39039: PPUSH
39040: PPUSH
39041: PPUSH
// if not unit in minersList then
39042: LD_VAR 0 1
39046: PUSH
39047: LD_EXP 119
39051: IN
39052: NOT
39053: IFFALSE 39057
// exit ;
39055: GO 39449
// index := GetElementIndex ( minersList , unit ) ;
39057: LD_ADDR_VAR 0 6
39061: PUSH
39062: LD_EXP 119
39066: PPUSH
39067: LD_VAR 0 1
39071: PPUSH
39072: CALL 44990 0 2
39076: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39077: LD_ADDR_VAR 0 5
39081: PUSH
39082: DOUBLE
39083: LD_EXP 120
39087: PUSH
39088: LD_VAR 0 6
39092: ARRAY
39093: INC
39094: ST_TO_ADDR
39095: LD_INT 1
39097: PUSH
39098: FOR_DOWNTO
39099: IFFALSE 39260
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39101: LD_EXP 120
39105: PUSH
39106: LD_VAR 0 6
39110: ARRAY
39111: PUSH
39112: LD_VAR 0 5
39116: ARRAY
39117: PUSH
39118: LD_INT 1
39120: ARRAY
39121: PUSH
39122: LD_VAR 0 2
39126: EQUAL
39127: PUSH
39128: LD_EXP 120
39132: PUSH
39133: LD_VAR 0 6
39137: ARRAY
39138: PUSH
39139: LD_VAR 0 5
39143: ARRAY
39144: PUSH
39145: LD_INT 2
39147: ARRAY
39148: PUSH
39149: LD_VAR 0 3
39153: EQUAL
39154: AND
39155: IFFALSE 39258
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39157: LD_EXP 120
39161: PUSH
39162: LD_VAR 0 6
39166: ARRAY
39167: PUSH
39168: LD_VAR 0 5
39172: ARRAY
39173: PUSH
39174: LD_INT 1
39176: ARRAY
39177: PPUSH
39178: LD_EXP 120
39182: PUSH
39183: LD_VAR 0 6
39187: ARRAY
39188: PUSH
39189: LD_VAR 0 5
39193: ARRAY
39194: PUSH
39195: LD_INT 2
39197: ARRAY
39198: PPUSH
39199: LD_VAR 0 1
39203: PPUSH
39204: CALL_OW 255
39208: PPUSH
39209: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39213: LD_ADDR_EXP 120
39217: PUSH
39218: LD_EXP 120
39222: PPUSH
39223: LD_VAR 0 6
39227: PPUSH
39228: LD_EXP 120
39232: PUSH
39233: LD_VAR 0 6
39237: ARRAY
39238: PPUSH
39239: LD_VAR 0 5
39243: PPUSH
39244: CALL_OW 3
39248: PPUSH
39249: CALL_OW 1
39253: ST_TO_ADDR
// exit ;
39254: POP
39255: POP
39256: GO 39449
// end ; end ;
39258: GO 39098
39260: POP
39261: POP
// for i := minerMinesList [ index ] downto 1 do
39262: LD_ADDR_VAR 0 5
39266: PUSH
39267: DOUBLE
39268: LD_EXP 120
39272: PUSH
39273: LD_VAR 0 6
39277: ARRAY
39278: INC
39279: ST_TO_ADDR
39280: LD_INT 1
39282: PUSH
39283: FOR_DOWNTO
39284: IFFALSE 39447
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39286: LD_EXP 120
39290: PUSH
39291: LD_VAR 0 6
39295: ARRAY
39296: PUSH
39297: LD_VAR 0 5
39301: ARRAY
39302: PUSH
39303: LD_INT 1
39305: ARRAY
39306: PPUSH
39307: LD_EXP 120
39311: PUSH
39312: LD_VAR 0 6
39316: ARRAY
39317: PUSH
39318: LD_VAR 0 5
39322: ARRAY
39323: PUSH
39324: LD_INT 2
39326: ARRAY
39327: PPUSH
39328: LD_VAR 0 2
39332: PPUSH
39333: LD_VAR 0 3
39337: PPUSH
39338: CALL_OW 298
39342: PUSH
39343: LD_INT 6
39345: LESS
39346: IFFALSE 39445
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39348: LD_EXP 120
39352: PUSH
39353: LD_VAR 0 6
39357: ARRAY
39358: PUSH
39359: LD_VAR 0 5
39363: ARRAY
39364: PUSH
39365: LD_INT 1
39367: ARRAY
39368: PPUSH
39369: LD_EXP 120
39373: PUSH
39374: LD_VAR 0 6
39378: ARRAY
39379: PUSH
39380: LD_VAR 0 5
39384: ARRAY
39385: PUSH
39386: LD_INT 2
39388: ARRAY
39389: PPUSH
39390: LD_VAR 0 1
39394: PPUSH
39395: CALL_OW 255
39399: PPUSH
39400: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39404: LD_ADDR_EXP 120
39408: PUSH
39409: LD_EXP 120
39413: PPUSH
39414: LD_VAR 0 6
39418: PPUSH
39419: LD_EXP 120
39423: PUSH
39424: LD_VAR 0 6
39428: ARRAY
39429: PPUSH
39430: LD_VAR 0 5
39434: PPUSH
39435: CALL_OW 3
39439: PPUSH
39440: CALL_OW 1
39444: ST_TO_ADDR
// end ; end ;
39445: GO 39283
39447: POP
39448: POP
// end ;
39449: LD_VAR 0 4
39453: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39454: LD_INT 0
39456: PPUSH
39457: PPUSH
39458: PPUSH
39459: PPUSH
39460: PPUSH
39461: PPUSH
39462: PPUSH
39463: PPUSH
39464: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39465: LD_VAR 0 1
39469: PPUSH
39470: CALL_OW 264
39474: PUSH
39475: LD_INT 81
39477: EQUAL
39478: NOT
39479: PUSH
39480: LD_VAR 0 1
39484: PUSH
39485: LD_EXP 119
39489: IN
39490: NOT
39491: OR
39492: IFFALSE 39496
// exit ;
39494: GO 39818
// index := GetElementIndex ( minersList , unit ) ;
39496: LD_ADDR_VAR 0 6
39500: PUSH
39501: LD_EXP 119
39505: PPUSH
39506: LD_VAR 0 1
39510: PPUSH
39511: CALL 44990 0 2
39515: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39516: LD_ADDR_VAR 0 8
39520: PUSH
39521: LD_EXP 121
39525: PUSH
39526: LD_EXP 120
39530: PUSH
39531: LD_VAR 0 6
39535: ARRAY
39536: MINUS
39537: ST_TO_ADDR
// if not minesFreeAmount then
39538: LD_VAR 0 8
39542: NOT
39543: IFFALSE 39547
// exit ;
39545: GO 39818
// tmp := [ ] ;
39547: LD_ADDR_VAR 0 7
39551: PUSH
39552: EMPTY
39553: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39554: LD_ADDR_VAR 0 5
39558: PUSH
39559: DOUBLE
39560: LD_INT 1
39562: DEC
39563: ST_TO_ADDR
39564: LD_VAR 0 8
39568: PUSH
39569: FOR_TO
39570: IFFALSE 39765
// begin _d := rand ( 0 , 5 ) ;
39572: LD_ADDR_VAR 0 11
39576: PUSH
39577: LD_INT 0
39579: PPUSH
39580: LD_INT 5
39582: PPUSH
39583: CALL_OW 12
39587: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39588: LD_ADDR_VAR 0 12
39592: PUSH
39593: LD_INT 2
39595: PPUSH
39596: LD_INT 6
39598: PPUSH
39599: CALL_OW 12
39603: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39604: LD_ADDR_VAR 0 9
39608: PUSH
39609: LD_VAR 0 2
39613: PPUSH
39614: LD_VAR 0 11
39618: PPUSH
39619: LD_VAR 0 12
39623: PPUSH
39624: CALL_OW 272
39628: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39629: LD_ADDR_VAR 0 10
39633: PUSH
39634: LD_VAR 0 3
39638: PPUSH
39639: LD_VAR 0 11
39643: PPUSH
39644: LD_VAR 0 12
39648: PPUSH
39649: CALL_OW 273
39653: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39654: LD_VAR 0 9
39658: PPUSH
39659: LD_VAR 0 10
39663: PPUSH
39664: CALL_OW 488
39668: PUSH
39669: LD_VAR 0 9
39673: PUSH
39674: LD_VAR 0 10
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_VAR 0 7
39687: IN
39688: NOT
39689: AND
39690: PUSH
39691: LD_VAR 0 9
39695: PPUSH
39696: LD_VAR 0 10
39700: PPUSH
39701: CALL_OW 458
39705: NOT
39706: AND
39707: IFFALSE 39749
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39709: LD_ADDR_VAR 0 7
39713: PUSH
39714: LD_VAR 0 7
39718: PPUSH
39719: LD_VAR 0 7
39723: PUSH
39724: LD_INT 1
39726: PLUS
39727: PPUSH
39728: LD_VAR 0 9
39732: PUSH
39733: LD_VAR 0 10
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PPUSH
39742: CALL_OW 1
39746: ST_TO_ADDR
39747: GO 39763
// i := i - 1 ;
39749: LD_ADDR_VAR 0 5
39753: PUSH
39754: LD_VAR 0 5
39758: PUSH
39759: LD_INT 1
39761: MINUS
39762: ST_TO_ADDR
// end ;
39763: GO 39569
39765: POP
39766: POP
// for i in tmp do
39767: LD_ADDR_VAR 0 5
39771: PUSH
39772: LD_VAR 0 7
39776: PUSH
39777: FOR_IN
39778: IFFALSE 39816
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39780: LD_VAR 0 1
39784: PPUSH
39785: LD_VAR 0 5
39789: PUSH
39790: LD_INT 1
39792: ARRAY
39793: PPUSH
39794: LD_VAR 0 5
39798: PUSH
39799: LD_INT 2
39801: ARRAY
39802: PPUSH
39803: CALL 38762 0 3
39807: NOT
39808: IFFALSE 39814
// exit ;
39810: POP
39811: POP
39812: GO 39818
39814: GO 39777
39816: POP
39817: POP
// end ;
39818: LD_VAR 0 4
39822: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39823: LD_INT 0
39825: PPUSH
39826: PPUSH
39827: PPUSH
39828: PPUSH
39829: PPUSH
39830: PPUSH
39831: PPUSH
// if not GetClass ( unit ) = class_sniper then
39832: LD_VAR 0 1
39836: PPUSH
39837: CALL_OW 257
39841: PUSH
39842: LD_INT 5
39844: EQUAL
39845: NOT
39846: IFFALSE 39850
// exit ;
39848: GO 40238
// dist := 8 ;
39850: LD_ADDR_VAR 0 5
39854: PUSH
39855: LD_INT 8
39857: ST_TO_ADDR
// viewRange := 12 ;
39858: LD_ADDR_VAR 0 7
39862: PUSH
39863: LD_INT 12
39865: ST_TO_ADDR
// side := GetSide ( unit ) ;
39866: LD_ADDR_VAR 0 6
39870: PUSH
39871: LD_VAR 0 1
39875: PPUSH
39876: CALL_OW 255
39880: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39881: LD_INT 61
39883: PPUSH
39884: LD_VAR 0 6
39888: PPUSH
39889: CALL_OW 321
39893: PUSH
39894: LD_INT 2
39896: EQUAL
39897: IFFALSE 39907
// viewRange := 16 ;
39899: LD_ADDR_VAR 0 7
39903: PUSH
39904: LD_INT 16
39906: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39907: LD_VAR 0 1
39911: PPUSH
39912: LD_VAR 0 2
39916: PPUSH
39917: LD_VAR 0 3
39921: PPUSH
39922: CALL_OW 297
39926: PUSH
39927: LD_VAR 0 5
39931: GREATER
39932: IFFALSE 40011
// begin ComMoveXY ( unit , x , y ) ;
39934: LD_VAR 0 1
39938: PPUSH
39939: LD_VAR 0 2
39943: PPUSH
39944: LD_VAR 0 3
39948: PPUSH
39949: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39953: LD_INT 35
39955: PPUSH
39956: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39960: LD_VAR 0 1
39964: PPUSH
39965: LD_VAR 0 2
39969: PPUSH
39970: LD_VAR 0 3
39974: PPUSH
39975: CALL 76742 0 3
39979: NOT
39980: IFFALSE 39984
// exit ;
39982: GO 40238
// until GetDistUnitXY ( unit , x , y ) < dist ;
39984: LD_VAR 0 1
39988: PPUSH
39989: LD_VAR 0 2
39993: PPUSH
39994: LD_VAR 0 3
39998: PPUSH
39999: CALL_OW 297
40003: PUSH
40004: LD_VAR 0 5
40008: LESS
40009: IFFALSE 39953
// end ; ComTurnXY ( unit , x , y ) ;
40011: LD_VAR 0 1
40015: PPUSH
40016: LD_VAR 0 2
40020: PPUSH
40021: LD_VAR 0 3
40025: PPUSH
40026: CALL_OW 118
// wait ( 5 ) ;
40030: LD_INT 5
40032: PPUSH
40033: CALL_OW 67
// _d := GetDir ( unit ) ;
40037: LD_ADDR_VAR 0 10
40041: PUSH
40042: LD_VAR 0 1
40046: PPUSH
40047: CALL_OW 254
40051: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40052: LD_ADDR_VAR 0 8
40056: PUSH
40057: LD_VAR 0 1
40061: PPUSH
40062: CALL_OW 250
40066: PPUSH
40067: LD_VAR 0 10
40071: PPUSH
40072: LD_VAR 0 5
40076: PPUSH
40077: CALL_OW 272
40081: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40082: LD_ADDR_VAR 0 9
40086: PUSH
40087: LD_VAR 0 1
40091: PPUSH
40092: CALL_OW 251
40096: PPUSH
40097: LD_VAR 0 10
40101: PPUSH
40102: LD_VAR 0 5
40106: PPUSH
40107: CALL_OW 273
40111: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40112: LD_VAR 0 8
40116: PPUSH
40117: LD_VAR 0 9
40121: PPUSH
40122: CALL_OW 488
40126: NOT
40127: IFFALSE 40131
// exit ;
40129: GO 40238
// ComAnimCustom ( unit , 1 ) ;
40131: LD_VAR 0 1
40135: PPUSH
40136: LD_INT 1
40138: PPUSH
40139: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40143: LD_VAR 0 8
40147: PPUSH
40148: LD_VAR 0 9
40152: PPUSH
40153: LD_VAR 0 6
40157: PPUSH
40158: LD_VAR 0 7
40162: PPUSH
40163: CALL_OW 330
// repeat wait ( 1 ) ;
40167: LD_INT 1
40169: PPUSH
40170: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40174: LD_VAR 0 1
40178: PPUSH
40179: CALL_OW 316
40183: PUSH
40184: LD_VAR 0 1
40188: PPUSH
40189: CALL_OW 314
40193: OR
40194: PUSH
40195: LD_VAR 0 1
40199: PPUSH
40200: CALL_OW 302
40204: NOT
40205: OR
40206: PUSH
40207: LD_VAR 0 1
40211: PPUSH
40212: CALL_OW 301
40216: OR
40217: IFFALSE 40167
// RemoveSeeing ( _x , _y , side ) ;
40219: LD_VAR 0 8
40223: PPUSH
40224: LD_VAR 0 9
40228: PPUSH
40229: LD_VAR 0 6
40233: PPUSH
40234: CALL_OW 331
// end ; end_of_file
40238: LD_VAR 0 4
40242: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40243: LD_INT 0
40245: PPUSH
40246: PPUSH
// if exist_mode then
40247: LD_VAR 0 2
40251: IFFALSE 40276
// unit := CreateCharacter ( prefix & ident ) else
40253: LD_ADDR_VAR 0 5
40257: PUSH
40258: LD_VAR 0 3
40262: PUSH
40263: LD_VAR 0 1
40267: STR
40268: PPUSH
40269: CALL_OW 34
40273: ST_TO_ADDR
40274: GO 40291
// unit := NewCharacter ( ident ) ;
40276: LD_ADDR_VAR 0 5
40280: PUSH
40281: LD_VAR 0 1
40285: PPUSH
40286: CALL_OW 25
40290: ST_TO_ADDR
// result := unit ;
40291: LD_ADDR_VAR 0 4
40295: PUSH
40296: LD_VAR 0 5
40300: ST_TO_ADDR
// end ;
40301: LD_VAR 0 4
40305: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40306: LD_INT 0
40308: PPUSH
40309: PPUSH
// if not side or not nation then
40310: LD_VAR 0 1
40314: NOT
40315: PUSH
40316: LD_VAR 0 2
40320: NOT
40321: OR
40322: IFFALSE 40326
// exit ;
40324: GO 41094
// case nation of nation_american :
40326: LD_VAR 0 2
40330: PUSH
40331: LD_INT 1
40333: DOUBLE
40334: EQUAL
40335: IFTRUE 40339
40337: GO 40553
40339: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40340: LD_ADDR_VAR 0 4
40344: PUSH
40345: LD_INT 35
40347: PUSH
40348: LD_INT 45
40350: PUSH
40351: LD_INT 46
40353: PUSH
40354: LD_INT 47
40356: PUSH
40357: LD_INT 82
40359: PUSH
40360: LD_INT 83
40362: PUSH
40363: LD_INT 84
40365: PUSH
40366: LD_INT 85
40368: PUSH
40369: LD_INT 86
40371: PUSH
40372: LD_INT 1
40374: PUSH
40375: LD_INT 2
40377: PUSH
40378: LD_INT 6
40380: PUSH
40381: LD_INT 15
40383: PUSH
40384: LD_INT 16
40386: PUSH
40387: LD_INT 7
40389: PUSH
40390: LD_INT 12
40392: PUSH
40393: LD_INT 13
40395: PUSH
40396: LD_INT 10
40398: PUSH
40399: LD_INT 14
40401: PUSH
40402: LD_INT 20
40404: PUSH
40405: LD_INT 21
40407: PUSH
40408: LD_INT 22
40410: PUSH
40411: LD_INT 25
40413: PUSH
40414: LD_INT 32
40416: PUSH
40417: LD_INT 27
40419: PUSH
40420: LD_INT 36
40422: PUSH
40423: LD_INT 69
40425: PUSH
40426: LD_INT 39
40428: PUSH
40429: LD_INT 34
40431: PUSH
40432: LD_INT 40
40434: PUSH
40435: LD_INT 48
40437: PUSH
40438: LD_INT 49
40440: PUSH
40441: LD_INT 50
40443: PUSH
40444: LD_INT 51
40446: PUSH
40447: LD_INT 52
40449: PUSH
40450: LD_INT 53
40452: PUSH
40453: LD_INT 54
40455: PUSH
40456: LD_INT 55
40458: PUSH
40459: LD_INT 56
40461: PUSH
40462: LD_INT 57
40464: PUSH
40465: LD_INT 58
40467: PUSH
40468: LD_INT 59
40470: PUSH
40471: LD_INT 60
40473: PUSH
40474: LD_INT 61
40476: PUSH
40477: LD_INT 62
40479: PUSH
40480: LD_INT 80
40482: PUSH
40483: LD_INT 82
40485: PUSH
40486: LD_INT 83
40488: PUSH
40489: LD_INT 84
40491: PUSH
40492: LD_INT 85
40494: PUSH
40495: LD_INT 86
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: ST_TO_ADDR
40551: GO 41018
40553: LD_INT 2
40555: DOUBLE
40556: EQUAL
40557: IFTRUE 40561
40559: GO 40787
40561: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40562: LD_ADDR_VAR 0 4
40566: PUSH
40567: LD_INT 35
40569: PUSH
40570: LD_INT 45
40572: PUSH
40573: LD_INT 46
40575: PUSH
40576: LD_INT 47
40578: PUSH
40579: LD_INT 82
40581: PUSH
40582: LD_INT 83
40584: PUSH
40585: LD_INT 84
40587: PUSH
40588: LD_INT 85
40590: PUSH
40591: LD_INT 87
40593: PUSH
40594: LD_INT 70
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: LD_INT 11
40602: PUSH
40603: LD_INT 3
40605: PUSH
40606: LD_INT 4
40608: PUSH
40609: LD_INT 5
40611: PUSH
40612: LD_INT 6
40614: PUSH
40615: LD_INT 15
40617: PUSH
40618: LD_INT 18
40620: PUSH
40621: LD_INT 7
40623: PUSH
40624: LD_INT 17
40626: PUSH
40627: LD_INT 8
40629: PUSH
40630: LD_INT 20
40632: PUSH
40633: LD_INT 21
40635: PUSH
40636: LD_INT 22
40638: PUSH
40639: LD_INT 72
40641: PUSH
40642: LD_INT 26
40644: PUSH
40645: LD_INT 69
40647: PUSH
40648: LD_INT 39
40650: PUSH
40651: LD_INT 40
40653: PUSH
40654: LD_INT 41
40656: PUSH
40657: LD_INT 42
40659: PUSH
40660: LD_INT 43
40662: PUSH
40663: LD_INT 48
40665: PUSH
40666: LD_INT 49
40668: PUSH
40669: LD_INT 50
40671: PUSH
40672: LD_INT 51
40674: PUSH
40675: LD_INT 52
40677: PUSH
40678: LD_INT 53
40680: PUSH
40681: LD_INT 54
40683: PUSH
40684: LD_INT 55
40686: PUSH
40687: LD_INT 56
40689: PUSH
40690: LD_INT 60
40692: PUSH
40693: LD_INT 61
40695: PUSH
40696: LD_INT 62
40698: PUSH
40699: LD_INT 66
40701: PUSH
40702: LD_INT 67
40704: PUSH
40705: LD_INT 68
40707: PUSH
40708: LD_INT 81
40710: PUSH
40711: LD_INT 82
40713: PUSH
40714: LD_INT 83
40716: PUSH
40717: LD_INT 84
40719: PUSH
40720: LD_INT 85
40722: PUSH
40723: LD_INT 87
40725: PUSH
40726: LD_INT 88
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: ST_TO_ADDR
40785: GO 41018
40787: LD_INT 3
40789: DOUBLE
40790: EQUAL
40791: IFTRUE 40795
40793: GO 41017
40795: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40796: LD_ADDR_VAR 0 4
40800: PUSH
40801: LD_INT 46
40803: PUSH
40804: LD_INT 47
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: LD_INT 82
40815: PUSH
40816: LD_INT 83
40818: PUSH
40819: LD_INT 84
40821: PUSH
40822: LD_INT 85
40824: PUSH
40825: LD_INT 86
40827: PUSH
40828: LD_INT 11
40830: PUSH
40831: LD_INT 9
40833: PUSH
40834: LD_INT 20
40836: PUSH
40837: LD_INT 19
40839: PUSH
40840: LD_INT 21
40842: PUSH
40843: LD_INT 24
40845: PUSH
40846: LD_INT 22
40848: PUSH
40849: LD_INT 25
40851: PUSH
40852: LD_INT 28
40854: PUSH
40855: LD_INT 29
40857: PUSH
40858: LD_INT 30
40860: PUSH
40861: LD_INT 31
40863: PUSH
40864: LD_INT 37
40866: PUSH
40867: LD_INT 38
40869: PUSH
40870: LD_INT 32
40872: PUSH
40873: LD_INT 27
40875: PUSH
40876: LD_INT 33
40878: PUSH
40879: LD_INT 69
40881: PUSH
40882: LD_INT 39
40884: PUSH
40885: LD_INT 34
40887: PUSH
40888: LD_INT 40
40890: PUSH
40891: LD_INT 71
40893: PUSH
40894: LD_INT 23
40896: PUSH
40897: LD_INT 44
40899: PUSH
40900: LD_INT 48
40902: PUSH
40903: LD_INT 49
40905: PUSH
40906: LD_INT 50
40908: PUSH
40909: LD_INT 51
40911: PUSH
40912: LD_INT 52
40914: PUSH
40915: LD_INT 53
40917: PUSH
40918: LD_INT 54
40920: PUSH
40921: LD_INT 55
40923: PUSH
40924: LD_INT 56
40926: PUSH
40927: LD_INT 57
40929: PUSH
40930: LD_INT 58
40932: PUSH
40933: LD_INT 59
40935: PUSH
40936: LD_INT 63
40938: PUSH
40939: LD_INT 64
40941: PUSH
40942: LD_INT 65
40944: PUSH
40945: LD_INT 82
40947: PUSH
40948: LD_INT 83
40950: PUSH
40951: LD_INT 84
40953: PUSH
40954: LD_INT 85
40956: PUSH
40957: LD_INT 86
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: ST_TO_ADDR
41015: GO 41018
41017: POP
// if state > - 1 and state < 3 then
41018: LD_VAR 0 3
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: GREATER
41027: PUSH
41028: LD_VAR 0 3
41032: PUSH
41033: LD_INT 3
41035: LESS
41036: AND
41037: IFFALSE 41094
// for i in result do
41039: LD_ADDR_VAR 0 5
41043: PUSH
41044: LD_VAR 0 4
41048: PUSH
41049: FOR_IN
41050: IFFALSE 41092
// if GetTech ( i , side ) <> state then
41052: LD_VAR 0 5
41056: PPUSH
41057: LD_VAR 0 1
41061: PPUSH
41062: CALL_OW 321
41066: PUSH
41067: LD_VAR 0 3
41071: NONEQUAL
41072: IFFALSE 41090
// result := result diff i ;
41074: LD_ADDR_VAR 0 4
41078: PUSH
41079: LD_VAR 0 4
41083: PUSH
41084: LD_VAR 0 5
41088: DIFF
41089: ST_TO_ADDR
41090: GO 41049
41092: POP
41093: POP
// end ;
41094: LD_VAR 0 4
41098: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41099: LD_INT 0
41101: PPUSH
41102: PPUSH
41103: PPUSH
// result := true ;
41104: LD_ADDR_VAR 0 3
41108: PUSH
41109: LD_INT 1
41111: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41112: LD_ADDR_VAR 0 5
41116: PUSH
41117: LD_VAR 0 2
41121: PPUSH
41122: CALL_OW 480
41126: ST_TO_ADDR
// if not tmp then
41127: LD_VAR 0 5
41131: NOT
41132: IFFALSE 41136
// exit ;
41134: GO 41185
// for i in tmp do
41136: LD_ADDR_VAR 0 4
41140: PUSH
41141: LD_VAR 0 5
41145: PUSH
41146: FOR_IN
41147: IFFALSE 41183
// if GetTech ( i , side ) <> state_researched then
41149: LD_VAR 0 4
41153: PPUSH
41154: LD_VAR 0 1
41158: PPUSH
41159: CALL_OW 321
41163: PUSH
41164: LD_INT 2
41166: NONEQUAL
41167: IFFALSE 41181
// begin result := false ;
41169: LD_ADDR_VAR 0 3
41173: PUSH
41174: LD_INT 0
41176: ST_TO_ADDR
// exit ;
41177: POP
41178: POP
41179: GO 41185
// end ;
41181: GO 41146
41183: POP
41184: POP
// end ;
41185: LD_VAR 0 3
41189: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41190: LD_INT 0
41192: PPUSH
41193: PPUSH
41194: PPUSH
41195: PPUSH
41196: PPUSH
41197: PPUSH
41198: PPUSH
41199: PPUSH
41200: PPUSH
41201: PPUSH
41202: PPUSH
41203: PPUSH
41204: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41205: LD_VAR 0 1
41209: NOT
41210: PUSH
41211: LD_VAR 0 1
41215: PPUSH
41216: CALL_OW 257
41220: PUSH
41221: LD_INT 9
41223: NONEQUAL
41224: OR
41225: IFFALSE 41229
// exit ;
41227: GO 41802
// side := GetSide ( unit ) ;
41229: LD_ADDR_VAR 0 9
41233: PUSH
41234: LD_VAR 0 1
41238: PPUSH
41239: CALL_OW 255
41243: ST_TO_ADDR
// tech_space := tech_spacanom ;
41244: LD_ADDR_VAR 0 12
41248: PUSH
41249: LD_INT 29
41251: ST_TO_ADDR
// tech_time := tech_taurad ;
41252: LD_ADDR_VAR 0 13
41256: PUSH
41257: LD_INT 28
41259: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41260: LD_ADDR_VAR 0 11
41264: PUSH
41265: LD_VAR 0 1
41269: PPUSH
41270: CALL_OW 310
41274: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41275: LD_VAR 0 11
41279: PPUSH
41280: CALL_OW 247
41284: PUSH
41285: LD_INT 2
41287: EQUAL
41288: IFFALSE 41292
// exit ;
41290: GO 41802
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41292: LD_ADDR_VAR 0 8
41296: PUSH
41297: LD_INT 81
41299: PUSH
41300: LD_VAR 0 9
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 3
41311: PUSH
41312: LD_INT 21
41314: PUSH
41315: LD_INT 3
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PPUSH
41330: CALL_OW 69
41334: ST_TO_ADDR
// if not tmp then
41335: LD_VAR 0 8
41339: NOT
41340: IFFALSE 41344
// exit ;
41342: GO 41802
// if in_unit then
41344: LD_VAR 0 11
41348: IFFALSE 41372
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41350: LD_ADDR_VAR 0 10
41354: PUSH
41355: LD_VAR 0 8
41359: PPUSH
41360: LD_VAR 0 11
41364: PPUSH
41365: CALL_OW 74
41369: ST_TO_ADDR
41370: GO 41392
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41372: LD_ADDR_VAR 0 10
41376: PUSH
41377: LD_VAR 0 8
41381: PPUSH
41382: LD_VAR 0 1
41386: PPUSH
41387: CALL_OW 74
41391: ST_TO_ADDR
// if not enemy then
41392: LD_VAR 0 10
41396: NOT
41397: IFFALSE 41401
// exit ;
41399: GO 41802
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41401: LD_VAR 0 11
41405: PUSH
41406: LD_VAR 0 11
41410: PPUSH
41411: LD_VAR 0 10
41415: PPUSH
41416: CALL_OW 296
41420: PUSH
41421: LD_INT 13
41423: GREATER
41424: AND
41425: PUSH
41426: LD_VAR 0 1
41430: PPUSH
41431: LD_VAR 0 10
41435: PPUSH
41436: CALL_OW 296
41440: PUSH
41441: LD_INT 12
41443: GREATER
41444: OR
41445: IFFALSE 41449
// exit ;
41447: GO 41802
// missile := [ 1 ] ;
41449: LD_ADDR_VAR 0 14
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: EMPTY
41458: LIST
41459: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41460: LD_VAR 0 9
41464: PPUSH
41465: LD_VAR 0 12
41469: PPUSH
41470: CALL_OW 325
41474: IFFALSE 41503
// missile := Replace ( missile , missile + 1 , 2 ) ;
41476: LD_ADDR_VAR 0 14
41480: PUSH
41481: LD_VAR 0 14
41485: PPUSH
41486: LD_VAR 0 14
41490: PUSH
41491: LD_INT 1
41493: PLUS
41494: PPUSH
41495: LD_INT 2
41497: PPUSH
41498: CALL_OW 1
41502: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41503: LD_VAR 0 9
41507: PPUSH
41508: LD_VAR 0 13
41512: PPUSH
41513: CALL_OW 325
41517: PUSH
41518: LD_VAR 0 10
41522: PPUSH
41523: CALL_OW 255
41527: PPUSH
41528: LD_VAR 0 13
41532: PPUSH
41533: CALL_OW 325
41537: NOT
41538: AND
41539: IFFALSE 41568
// missile := Replace ( missile , missile + 1 , 3 ) ;
41541: LD_ADDR_VAR 0 14
41545: PUSH
41546: LD_VAR 0 14
41550: PPUSH
41551: LD_VAR 0 14
41555: PUSH
41556: LD_INT 1
41558: PLUS
41559: PPUSH
41560: LD_INT 3
41562: PPUSH
41563: CALL_OW 1
41567: ST_TO_ADDR
// if missile < 2 then
41568: LD_VAR 0 14
41572: PUSH
41573: LD_INT 2
41575: LESS
41576: IFFALSE 41580
// exit ;
41578: GO 41802
// x := GetX ( enemy ) ;
41580: LD_ADDR_VAR 0 4
41584: PUSH
41585: LD_VAR 0 10
41589: PPUSH
41590: CALL_OW 250
41594: ST_TO_ADDR
// y := GetY ( enemy ) ;
41595: LD_ADDR_VAR 0 5
41599: PUSH
41600: LD_VAR 0 10
41604: PPUSH
41605: CALL_OW 251
41609: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41610: LD_ADDR_VAR 0 6
41614: PUSH
41615: LD_VAR 0 4
41619: PUSH
41620: LD_INT 1
41622: NEG
41623: PPUSH
41624: LD_INT 1
41626: PPUSH
41627: CALL_OW 12
41631: PLUS
41632: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41633: LD_ADDR_VAR 0 7
41637: PUSH
41638: LD_VAR 0 5
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PPUSH
41647: LD_INT 1
41649: PPUSH
41650: CALL_OW 12
41654: PLUS
41655: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41656: LD_VAR 0 6
41660: PPUSH
41661: LD_VAR 0 7
41665: PPUSH
41666: CALL_OW 488
41670: NOT
41671: IFFALSE 41693
// begin _x := x ;
41673: LD_ADDR_VAR 0 6
41677: PUSH
41678: LD_VAR 0 4
41682: ST_TO_ADDR
// _y := y ;
41683: LD_ADDR_VAR 0 7
41687: PUSH
41688: LD_VAR 0 5
41692: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41693: LD_ADDR_VAR 0 3
41697: PUSH
41698: LD_INT 1
41700: PPUSH
41701: LD_VAR 0 14
41705: PPUSH
41706: CALL_OW 12
41710: ST_TO_ADDR
// case i of 1 :
41711: LD_VAR 0 3
41715: PUSH
41716: LD_INT 1
41718: DOUBLE
41719: EQUAL
41720: IFTRUE 41724
41722: GO 41741
41724: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41725: LD_VAR 0 1
41729: PPUSH
41730: LD_VAR 0 10
41734: PPUSH
41735: CALL_OW 115
41739: GO 41802
41741: LD_INT 2
41743: DOUBLE
41744: EQUAL
41745: IFTRUE 41749
41747: GO 41771
41749: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41750: LD_VAR 0 1
41754: PPUSH
41755: LD_VAR 0 6
41759: PPUSH
41760: LD_VAR 0 7
41764: PPUSH
41765: CALL_OW 153
41769: GO 41802
41771: LD_INT 3
41773: DOUBLE
41774: EQUAL
41775: IFTRUE 41779
41777: GO 41801
41779: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41780: LD_VAR 0 1
41784: PPUSH
41785: LD_VAR 0 6
41789: PPUSH
41790: LD_VAR 0 7
41794: PPUSH
41795: CALL_OW 154
41799: GO 41802
41801: POP
// end ;
41802: LD_VAR 0 2
41806: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41807: LD_INT 0
41809: PPUSH
41810: PPUSH
41811: PPUSH
41812: PPUSH
41813: PPUSH
41814: PPUSH
// if not unit or not building then
41815: LD_VAR 0 1
41819: NOT
41820: PUSH
41821: LD_VAR 0 2
41825: NOT
41826: OR
41827: IFFALSE 41831
// exit ;
41829: GO 41989
// x := GetX ( building ) ;
41831: LD_ADDR_VAR 0 5
41835: PUSH
41836: LD_VAR 0 2
41840: PPUSH
41841: CALL_OW 250
41845: ST_TO_ADDR
// y := GetY ( building ) ;
41846: LD_ADDR_VAR 0 6
41850: PUSH
41851: LD_VAR 0 2
41855: PPUSH
41856: CALL_OW 251
41860: ST_TO_ADDR
// for i = 0 to 5 do
41861: LD_ADDR_VAR 0 4
41865: PUSH
41866: DOUBLE
41867: LD_INT 0
41869: DEC
41870: ST_TO_ADDR
41871: LD_INT 5
41873: PUSH
41874: FOR_TO
41875: IFFALSE 41987
// begin _x := ShiftX ( x , i , 3 ) ;
41877: LD_ADDR_VAR 0 7
41881: PUSH
41882: LD_VAR 0 5
41886: PPUSH
41887: LD_VAR 0 4
41891: PPUSH
41892: LD_INT 3
41894: PPUSH
41895: CALL_OW 272
41899: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41900: LD_ADDR_VAR 0 8
41904: PUSH
41905: LD_VAR 0 6
41909: PPUSH
41910: LD_VAR 0 4
41914: PPUSH
41915: LD_INT 3
41917: PPUSH
41918: CALL_OW 273
41922: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41923: LD_VAR 0 7
41927: PPUSH
41928: LD_VAR 0 8
41932: PPUSH
41933: CALL_OW 488
41937: NOT
41938: IFFALSE 41942
// continue ;
41940: GO 41874
// if HexInfo ( _x , _y ) = 0 then
41942: LD_VAR 0 7
41946: PPUSH
41947: LD_VAR 0 8
41951: PPUSH
41952: CALL_OW 428
41956: PUSH
41957: LD_INT 0
41959: EQUAL
41960: IFFALSE 41985
// begin ComMoveXY ( unit , _x , _y ) ;
41962: LD_VAR 0 1
41966: PPUSH
41967: LD_VAR 0 7
41971: PPUSH
41972: LD_VAR 0 8
41976: PPUSH
41977: CALL_OW 111
// exit ;
41981: POP
41982: POP
41983: GO 41989
// end ; end ;
41985: GO 41874
41987: POP
41988: POP
// end ;
41989: LD_VAR 0 3
41993: RET
// export function ScanBase ( side , base_area ) ; begin
41994: LD_INT 0
41996: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41997: LD_ADDR_VAR 0 3
42001: PUSH
42002: LD_VAR 0 2
42006: PPUSH
42007: LD_INT 81
42009: PUSH
42010: LD_VAR 0 1
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PPUSH
42019: CALL_OW 70
42023: ST_TO_ADDR
// end ;
42024: LD_VAR 0 3
42028: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42029: LD_INT 0
42031: PPUSH
42032: PPUSH
42033: PPUSH
42034: PPUSH
// result := false ;
42035: LD_ADDR_VAR 0 2
42039: PUSH
42040: LD_INT 0
42042: ST_TO_ADDR
// side := GetSide ( unit ) ;
42043: LD_ADDR_VAR 0 3
42047: PUSH
42048: LD_VAR 0 1
42052: PPUSH
42053: CALL_OW 255
42057: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42058: LD_ADDR_VAR 0 4
42062: PUSH
42063: LD_VAR 0 1
42067: PPUSH
42068: CALL_OW 248
42072: ST_TO_ADDR
// case nat of 1 :
42073: LD_VAR 0 4
42077: PUSH
42078: LD_INT 1
42080: DOUBLE
42081: EQUAL
42082: IFTRUE 42086
42084: GO 42097
42086: POP
// tech := tech_lassight ; 2 :
42087: LD_ADDR_VAR 0 5
42091: PUSH
42092: LD_INT 12
42094: ST_TO_ADDR
42095: GO 42136
42097: LD_INT 2
42099: DOUBLE
42100: EQUAL
42101: IFTRUE 42105
42103: GO 42116
42105: POP
// tech := tech_mortar ; 3 :
42106: LD_ADDR_VAR 0 5
42110: PUSH
42111: LD_INT 41
42113: ST_TO_ADDR
42114: GO 42136
42116: LD_INT 3
42118: DOUBLE
42119: EQUAL
42120: IFTRUE 42124
42122: GO 42135
42124: POP
// tech := tech_bazooka ; end ;
42125: LD_ADDR_VAR 0 5
42129: PUSH
42130: LD_INT 44
42132: ST_TO_ADDR
42133: GO 42136
42135: POP
// if Researched ( side , tech ) then
42136: LD_VAR 0 3
42140: PPUSH
42141: LD_VAR 0 5
42145: PPUSH
42146: CALL_OW 325
42150: IFFALSE 42177
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42152: LD_ADDR_VAR 0 2
42156: PUSH
42157: LD_INT 5
42159: PUSH
42160: LD_INT 8
42162: PUSH
42163: LD_INT 9
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: LIST
42170: PUSH
42171: LD_VAR 0 4
42175: ARRAY
42176: ST_TO_ADDR
// end ;
42177: LD_VAR 0 2
42181: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42182: LD_INT 0
42184: PPUSH
42185: PPUSH
42186: PPUSH
// if not mines then
42187: LD_VAR 0 2
42191: NOT
42192: IFFALSE 42196
// exit ;
42194: GO 42340
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42196: LD_ADDR_VAR 0 5
42200: PUSH
42201: LD_INT 81
42203: PUSH
42204: LD_VAR 0 1
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 3
42215: PUSH
42216: LD_INT 21
42218: PUSH
42219: LD_INT 3
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PPUSH
42234: CALL_OW 69
42238: ST_TO_ADDR
// for i in mines do
42239: LD_ADDR_VAR 0 4
42243: PUSH
42244: LD_VAR 0 2
42248: PUSH
42249: FOR_IN
42250: IFFALSE 42338
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42252: LD_VAR 0 4
42256: PUSH
42257: LD_INT 1
42259: ARRAY
42260: PPUSH
42261: LD_VAR 0 4
42265: PUSH
42266: LD_INT 2
42268: ARRAY
42269: PPUSH
42270: CALL_OW 458
42274: NOT
42275: IFFALSE 42279
// continue ;
42277: GO 42249
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42279: LD_VAR 0 4
42283: PUSH
42284: LD_INT 1
42286: ARRAY
42287: PPUSH
42288: LD_VAR 0 4
42292: PUSH
42293: LD_INT 2
42295: ARRAY
42296: PPUSH
42297: CALL_OW 428
42301: PUSH
42302: LD_VAR 0 5
42306: IN
42307: IFFALSE 42336
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42309: LD_VAR 0 4
42313: PUSH
42314: LD_INT 1
42316: ARRAY
42317: PPUSH
42318: LD_VAR 0 4
42322: PUSH
42323: LD_INT 2
42325: ARRAY
42326: PPUSH
42327: LD_VAR 0 1
42331: PPUSH
42332: CALL_OW 456
// end ;
42336: GO 42249
42338: POP
42339: POP
// end ;
42340: LD_VAR 0 3
42344: RET
// export function Count ( array ) ; begin
42345: LD_INT 0
42347: PPUSH
// result := array + 0 ;
42348: LD_ADDR_VAR 0 2
42352: PUSH
42353: LD_VAR 0 1
42357: PUSH
42358: LD_INT 0
42360: PLUS
42361: ST_TO_ADDR
// end ;
42362: LD_VAR 0 2
42366: RET
// export function IsEmpty ( building ) ; begin
42367: LD_INT 0
42369: PPUSH
// if not building then
42370: LD_VAR 0 1
42374: NOT
42375: IFFALSE 42379
// exit ;
42377: GO 42422
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42379: LD_ADDR_VAR 0 2
42383: PUSH
42384: LD_VAR 0 1
42388: PUSH
42389: LD_INT 22
42391: PUSH
42392: LD_VAR 0 1
42396: PPUSH
42397: CALL_OW 255
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 58
42408: PUSH
42409: EMPTY
42410: LIST
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PPUSH
42416: CALL_OW 69
42420: IN
42421: ST_TO_ADDR
// end ;
42422: LD_VAR 0 2
42426: RET
// export function IsNotFull ( building ) ; var places ; begin
42427: LD_INT 0
42429: PPUSH
42430: PPUSH
// if not building then
42431: LD_VAR 0 1
42435: NOT
42436: IFFALSE 42440
// exit ;
42438: GO 42468
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42440: LD_ADDR_VAR 0 2
42444: PUSH
42445: LD_VAR 0 1
42449: PPUSH
42450: LD_INT 3
42452: PUSH
42453: LD_INT 62
42455: PUSH
42456: EMPTY
42457: LIST
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PPUSH
42463: CALL_OW 72
42467: ST_TO_ADDR
// end ;
42468: LD_VAR 0 2
42472: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42473: LD_INT 0
42475: PPUSH
42476: PPUSH
42477: PPUSH
42478: PPUSH
// tmp := [ ] ;
42479: LD_ADDR_VAR 0 3
42483: PUSH
42484: EMPTY
42485: ST_TO_ADDR
// list := [ ] ;
42486: LD_ADDR_VAR 0 5
42490: PUSH
42491: EMPTY
42492: ST_TO_ADDR
// for i = 16 to 25 do
42493: LD_ADDR_VAR 0 4
42497: PUSH
42498: DOUBLE
42499: LD_INT 16
42501: DEC
42502: ST_TO_ADDR
42503: LD_INT 25
42505: PUSH
42506: FOR_TO
42507: IFFALSE 42580
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42509: LD_ADDR_VAR 0 3
42513: PUSH
42514: LD_VAR 0 3
42518: PUSH
42519: LD_INT 22
42521: PUSH
42522: LD_VAR 0 1
42526: PPUSH
42527: CALL_OW 255
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 91
42538: PUSH
42539: LD_VAR 0 1
42543: PUSH
42544: LD_INT 6
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 30
42554: PUSH
42555: LD_VAR 0 4
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: LIST
42568: PUSH
42569: EMPTY
42570: LIST
42571: PPUSH
42572: CALL_OW 69
42576: ADD
42577: ST_TO_ADDR
42578: GO 42506
42580: POP
42581: POP
// for i = 1 to tmp do
42582: LD_ADDR_VAR 0 4
42586: PUSH
42587: DOUBLE
42588: LD_INT 1
42590: DEC
42591: ST_TO_ADDR
42592: LD_VAR 0 3
42596: PUSH
42597: FOR_TO
42598: IFFALSE 42686
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42600: LD_ADDR_VAR 0 5
42604: PUSH
42605: LD_VAR 0 5
42609: PUSH
42610: LD_VAR 0 3
42614: PUSH
42615: LD_VAR 0 4
42619: ARRAY
42620: PPUSH
42621: CALL_OW 266
42625: PUSH
42626: LD_VAR 0 3
42630: PUSH
42631: LD_VAR 0 4
42635: ARRAY
42636: PPUSH
42637: CALL_OW 250
42641: PUSH
42642: LD_VAR 0 3
42646: PUSH
42647: LD_VAR 0 4
42651: ARRAY
42652: PPUSH
42653: CALL_OW 251
42657: PUSH
42658: LD_VAR 0 3
42662: PUSH
42663: LD_VAR 0 4
42667: ARRAY
42668: PPUSH
42669: CALL_OW 254
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: PUSH
42680: EMPTY
42681: LIST
42682: ADD
42683: ST_TO_ADDR
42684: GO 42597
42686: POP
42687: POP
// result := list ;
42688: LD_ADDR_VAR 0 2
42692: PUSH
42693: LD_VAR 0 5
42697: ST_TO_ADDR
// end ;
42698: LD_VAR 0 2
42702: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42703: LD_INT 0
42705: PPUSH
42706: PPUSH
42707: PPUSH
42708: PPUSH
42709: PPUSH
42710: PPUSH
42711: PPUSH
// if not factory then
42712: LD_VAR 0 1
42716: NOT
42717: IFFALSE 42721
// exit ;
42719: GO 43314
// if control = control_apeman then
42721: LD_VAR 0 4
42725: PUSH
42726: LD_INT 5
42728: EQUAL
42729: IFFALSE 42838
// begin tmp := UnitsInside ( factory ) ;
42731: LD_ADDR_VAR 0 8
42735: PUSH
42736: LD_VAR 0 1
42740: PPUSH
42741: CALL_OW 313
42745: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42746: LD_VAR 0 8
42750: PPUSH
42751: LD_INT 25
42753: PUSH
42754: LD_INT 12
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PPUSH
42761: CALL_OW 72
42765: NOT
42766: IFFALSE 42776
// control := control_manual ;
42768: LD_ADDR_VAR 0 4
42772: PUSH
42773: LD_INT 1
42775: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42776: LD_ADDR_VAR 0 8
42780: PUSH
42781: LD_VAR 0 1
42785: PPUSH
42786: CALL 42473 0 1
42790: ST_TO_ADDR
// if tmp then
42791: LD_VAR 0 8
42795: IFFALSE 42838
// begin for i in tmp do
42797: LD_ADDR_VAR 0 7
42801: PUSH
42802: LD_VAR 0 8
42806: PUSH
42807: FOR_IN
42808: IFFALSE 42836
// if i [ 1 ] = b_ext_radio then
42810: LD_VAR 0 7
42814: PUSH
42815: LD_INT 1
42817: ARRAY
42818: PUSH
42819: LD_INT 22
42821: EQUAL
42822: IFFALSE 42834
// begin control := control_remote ;
42824: LD_ADDR_VAR 0 4
42828: PUSH
42829: LD_INT 2
42831: ST_TO_ADDR
// break ;
42832: GO 42836
// end ;
42834: GO 42807
42836: POP
42837: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42838: LD_VAR 0 1
42842: PPUSH
42843: LD_VAR 0 2
42847: PPUSH
42848: LD_VAR 0 3
42852: PPUSH
42853: LD_VAR 0 4
42857: PPUSH
42858: LD_VAR 0 5
42862: PPUSH
42863: CALL_OW 448
42867: IFFALSE 42902
// begin result := [ chassis , engine , control , weapon ] ;
42869: LD_ADDR_VAR 0 6
42873: PUSH
42874: LD_VAR 0 2
42878: PUSH
42879: LD_VAR 0 3
42883: PUSH
42884: LD_VAR 0 4
42888: PUSH
42889: LD_VAR 0 5
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: ST_TO_ADDR
// exit ;
42900: GO 43314
// end ; _chassis := AvailableChassisList ( factory ) ;
42902: LD_ADDR_VAR 0 9
42906: PUSH
42907: LD_VAR 0 1
42911: PPUSH
42912: CALL_OW 475
42916: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42917: LD_ADDR_VAR 0 11
42921: PUSH
42922: LD_VAR 0 1
42926: PPUSH
42927: CALL_OW 476
42931: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42932: LD_ADDR_VAR 0 12
42936: PUSH
42937: LD_VAR 0 1
42941: PPUSH
42942: CALL_OW 477
42946: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42947: LD_ADDR_VAR 0 10
42951: PUSH
42952: LD_VAR 0 1
42956: PPUSH
42957: CALL_OW 478
42961: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42962: LD_VAR 0 9
42966: NOT
42967: PUSH
42968: LD_VAR 0 11
42972: NOT
42973: OR
42974: PUSH
42975: LD_VAR 0 12
42979: NOT
42980: OR
42981: PUSH
42982: LD_VAR 0 10
42986: NOT
42987: OR
42988: IFFALSE 43023
// begin result := [ chassis , engine , control , weapon ] ;
42990: LD_ADDR_VAR 0 6
42994: PUSH
42995: LD_VAR 0 2
42999: PUSH
43000: LD_VAR 0 3
43004: PUSH
43005: LD_VAR 0 4
43009: PUSH
43010: LD_VAR 0 5
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: ST_TO_ADDR
// exit ;
43021: GO 43314
// end ; if not chassis in _chassis then
43023: LD_VAR 0 2
43027: PUSH
43028: LD_VAR 0 9
43032: IN
43033: NOT
43034: IFFALSE 43060
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43036: LD_ADDR_VAR 0 2
43040: PUSH
43041: LD_VAR 0 9
43045: PUSH
43046: LD_INT 1
43048: PPUSH
43049: LD_VAR 0 9
43053: PPUSH
43054: CALL_OW 12
43058: ARRAY
43059: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43060: LD_VAR 0 2
43064: PPUSH
43065: LD_VAR 0 3
43069: PPUSH
43070: CALL 43319 0 2
43074: NOT
43075: IFFALSE 43134
// repeat engine := _engine [ 1 ] ;
43077: LD_ADDR_VAR 0 3
43081: PUSH
43082: LD_VAR 0 11
43086: PUSH
43087: LD_INT 1
43089: ARRAY
43090: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43091: LD_ADDR_VAR 0 11
43095: PUSH
43096: LD_VAR 0 11
43100: PPUSH
43101: LD_INT 1
43103: PPUSH
43104: CALL_OW 3
43108: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43109: LD_VAR 0 2
43113: PPUSH
43114: LD_VAR 0 3
43118: PPUSH
43119: CALL 43319 0 2
43123: PUSH
43124: LD_VAR 0 11
43128: PUSH
43129: EMPTY
43130: EQUAL
43131: OR
43132: IFFALSE 43077
// if not control in _control then
43134: LD_VAR 0 4
43138: PUSH
43139: LD_VAR 0 12
43143: IN
43144: NOT
43145: IFFALSE 43171
// control := _control [ rand ( 1 , _control ) ] ;
43147: LD_ADDR_VAR 0 4
43151: PUSH
43152: LD_VAR 0 12
43156: PUSH
43157: LD_INT 1
43159: PPUSH
43160: LD_VAR 0 12
43164: PPUSH
43165: CALL_OW 12
43169: ARRAY
43170: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43171: LD_VAR 0 2
43175: PPUSH
43176: LD_VAR 0 5
43180: PPUSH
43181: CALL 43539 0 2
43185: NOT
43186: IFFALSE 43245
// repeat weapon := _weapon [ 1 ] ;
43188: LD_ADDR_VAR 0 5
43192: PUSH
43193: LD_VAR 0 10
43197: PUSH
43198: LD_INT 1
43200: ARRAY
43201: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43202: LD_ADDR_VAR 0 10
43206: PUSH
43207: LD_VAR 0 10
43211: PPUSH
43212: LD_INT 1
43214: PPUSH
43215: CALL_OW 3
43219: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43220: LD_VAR 0 2
43224: PPUSH
43225: LD_VAR 0 5
43229: PPUSH
43230: CALL 43539 0 2
43234: PUSH
43235: LD_VAR 0 10
43239: PUSH
43240: EMPTY
43241: EQUAL
43242: OR
43243: IFFALSE 43188
// result := [ ] ;
43245: LD_ADDR_VAR 0 6
43249: PUSH
43250: EMPTY
43251: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43252: LD_VAR 0 1
43256: PPUSH
43257: LD_VAR 0 2
43261: PPUSH
43262: LD_VAR 0 3
43266: PPUSH
43267: LD_VAR 0 4
43271: PPUSH
43272: LD_VAR 0 5
43276: PPUSH
43277: CALL_OW 448
43281: IFFALSE 43314
// result := [ chassis , engine , control , weapon ] ;
43283: LD_ADDR_VAR 0 6
43287: PUSH
43288: LD_VAR 0 2
43292: PUSH
43293: LD_VAR 0 3
43297: PUSH
43298: LD_VAR 0 4
43302: PUSH
43303: LD_VAR 0 5
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: ST_TO_ADDR
// end ;
43314: LD_VAR 0 6
43318: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43319: LD_INT 0
43321: PPUSH
// if not chassis or not engine then
43322: LD_VAR 0 1
43326: NOT
43327: PUSH
43328: LD_VAR 0 2
43332: NOT
43333: OR
43334: IFFALSE 43338
// exit ;
43336: GO 43534
// case engine of engine_solar :
43338: LD_VAR 0 2
43342: PUSH
43343: LD_INT 2
43345: DOUBLE
43346: EQUAL
43347: IFTRUE 43351
43349: GO 43389
43351: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43352: LD_ADDR_VAR 0 3
43356: PUSH
43357: LD_INT 11
43359: PUSH
43360: LD_INT 12
43362: PUSH
43363: LD_INT 13
43365: PUSH
43366: LD_INT 14
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: LD_INT 2
43374: PUSH
43375: LD_INT 3
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: ST_TO_ADDR
43387: GO 43518
43389: LD_INT 1
43391: DOUBLE
43392: EQUAL
43393: IFTRUE 43397
43395: GO 43459
43397: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43398: LD_ADDR_VAR 0 3
43402: PUSH
43403: LD_INT 11
43405: PUSH
43406: LD_INT 12
43408: PUSH
43409: LD_INT 13
43411: PUSH
43412: LD_INT 14
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: LD_INT 3
43423: PUSH
43424: LD_INT 4
43426: PUSH
43427: LD_INT 5
43429: PUSH
43430: LD_INT 21
43432: PUSH
43433: LD_INT 23
43435: PUSH
43436: LD_INT 22
43438: PUSH
43439: LD_INT 24
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: ST_TO_ADDR
43457: GO 43518
43459: LD_INT 3
43461: DOUBLE
43462: EQUAL
43463: IFTRUE 43467
43465: GO 43517
43467: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43468: LD_ADDR_VAR 0 3
43472: PUSH
43473: LD_INT 13
43475: PUSH
43476: LD_INT 14
43478: PUSH
43479: LD_INT 2
43481: PUSH
43482: LD_INT 3
43484: PUSH
43485: LD_INT 4
43487: PUSH
43488: LD_INT 5
43490: PUSH
43491: LD_INT 21
43493: PUSH
43494: LD_INT 22
43496: PUSH
43497: LD_INT 23
43499: PUSH
43500: LD_INT 24
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: ST_TO_ADDR
43515: GO 43518
43517: POP
// result := ( chassis in result ) ;
43518: LD_ADDR_VAR 0 3
43522: PUSH
43523: LD_VAR 0 1
43527: PUSH
43528: LD_VAR 0 3
43532: IN
43533: ST_TO_ADDR
// end ;
43534: LD_VAR 0 3
43538: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43539: LD_INT 0
43541: PPUSH
// if not chassis or not weapon then
43542: LD_VAR 0 1
43546: NOT
43547: PUSH
43548: LD_VAR 0 2
43552: NOT
43553: OR
43554: IFFALSE 43558
// exit ;
43556: GO 44618
// case weapon of us_machine_gun :
43558: LD_VAR 0 2
43562: PUSH
43563: LD_INT 2
43565: DOUBLE
43566: EQUAL
43567: IFTRUE 43571
43569: GO 43601
43571: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43572: LD_ADDR_VAR 0 3
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: LD_INT 3
43585: PUSH
43586: LD_INT 4
43588: PUSH
43589: LD_INT 5
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: ST_TO_ADDR
43599: GO 44602
43601: LD_INT 3
43603: DOUBLE
43604: EQUAL
43605: IFTRUE 43609
43607: GO 43639
43609: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43610: LD_ADDR_VAR 0 3
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: LD_INT 2
43620: PUSH
43621: LD_INT 3
43623: PUSH
43624: LD_INT 4
43626: PUSH
43627: LD_INT 5
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: ST_TO_ADDR
43637: GO 44602
43639: LD_INT 11
43641: DOUBLE
43642: EQUAL
43643: IFTRUE 43647
43645: GO 43677
43647: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43648: LD_ADDR_VAR 0 3
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: LD_INT 3
43661: PUSH
43662: LD_INT 4
43664: PUSH
43665: LD_INT 5
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: ST_TO_ADDR
43675: GO 44602
43677: LD_INT 4
43679: DOUBLE
43680: EQUAL
43681: IFTRUE 43685
43683: GO 43711
43685: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43686: LD_ADDR_VAR 0 3
43690: PUSH
43691: LD_INT 2
43693: PUSH
43694: LD_INT 3
43696: PUSH
43697: LD_INT 4
43699: PUSH
43700: LD_INT 5
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: ST_TO_ADDR
43709: GO 44602
43711: LD_INT 5
43713: DOUBLE
43714: EQUAL
43715: IFTRUE 43719
43717: GO 43745
43719: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43720: LD_ADDR_VAR 0 3
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: LD_INT 3
43730: PUSH
43731: LD_INT 4
43733: PUSH
43734: LD_INT 5
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: ST_TO_ADDR
43743: GO 44602
43745: LD_INT 9
43747: DOUBLE
43748: EQUAL
43749: IFTRUE 43753
43751: GO 43779
43753: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43754: LD_ADDR_VAR 0 3
43758: PUSH
43759: LD_INT 2
43761: PUSH
43762: LD_INT 3
43764: PUSH
43765: LD_INT 4
43767: PUSH
43768: LD_INT 5
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: ST_TO_ADDR
43777: GO 44602
43779: LD_INT 7
43781: DOUBLE
43782: EQUAL
43783: IFTRUE 43787
43785: GO 43813
43787: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43788: LD_ADDR_VAR 0 3
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: LD_INT 3
43798: PUSH
43799: LD_INT 4
43801: PUSH
43802: LD_INT 5
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: ST_TO_ADDR
43811: GO 44602
43813: LD_INT 12
43815: DOUBLE
43816: EQUAL
43817: IFTRUE 43821
43819: GO 43847
43821: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43822: LD_ADDR_VAR 0 3
43826: PUSH
43827: LD_INT 2
43829: PUSH
43830: LD_INT 3
43832: PUSH
43833: LD_INT 4
43835: PUSH
43836: LD_INT 5
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: ST_TO_ADDR
43845: GO 44602
43847: LD_INT 13
43849: DOUBLE
43850: EQUAL
43851: IFTRUE 43855
43853: GO 43881
43855: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43856: LD_ADDR_VAR 0 3
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: LD_INT 3
43866: PUSH
43867: LD_INT 4
43869: PUSH
43870: LD_INT 5
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: ST_TO_ADDR
43879: GO 44602
43881: LD_INT 14
43883: DOUBLE
43884: EQUAL
43885: IFTRUE 43889
43887: GO 43907
43889: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43890: LD_ADDR_VAR 0 3
43894: PUSH
43895: LD_INT 4
43897: PUSH
43898: LD_INT 5
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: ST_TO_ADDR
43905: GO 44602
43907: LD_INT 6
43909: DOUBLE
43910: EQUAL
43911: IFTRUE 43915
43913: GO 43933
43915: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43916: LD_ADDR_VAR 0 3
43920: PUSH
43921: LD_INT 4
43923: PUSH
43924: LD_INT 5
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: ST_TO_ADDR
43931: GO 44602
43933: LD_INT 10
43935: DOUBLE
43936: EQUAL
43937: IFTRUE 43941
43939: GO 43959
43941: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43942: LD_ADDR_VAR 0 3
43946: PUSH
43947: LD_INT 4
43949: PUSH
43950: LD_INT 5
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: ST_TO_ADDR
43957: GO 44602
43959: LD_INT 22
43961: DOUBLE
43962: EQUAL
43963: IFTRUE 43967
43965: GO 43993
43967: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43968: LD_ADDR_VAR 0 3
43972: PUSH
43973: LD_INT 11
43975: PUSH
43976: LD_INT 12
43978: PUSH
43979: LD_INT 13
43981: PUSH
43982: LD_INT 14
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: ST_TO_ADDR
43991: GO 44602
43993: LD_INT 23
43995: DOUBLE
43996: EQUAL
43997: IFTRUE 44001
43999: GO 44027
44001: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44002: LD_ADDR_VAR 0 3
44006: PUSH
44007: LD_INT 11
44009: PUSH
44010: LD_INT 12
44012: PUSH
44013: LD_INT 13
44015: PUSH
44016: LD_INT 14
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: ST_TO_ADDR
44025: GO 44602
44027: LD_INT 24
44029: DOUBLE
44030: EQUAL
44031: IFTRUE 44035
44033: GO 44061
44035: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44036: LD_ADDR_VAR 0 3
44040: PUSH
44041: LD_INT 11
44043: PUSH
44044: LD_INT 12
44046: PUSH
44047: LD_INT 13
44049: PUSH
44050: LD_INT 14
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: ST_TO_ADDR
44059: GO 44602
44061: LD_INT 30
44063: DOUBLE
44064: EQUAL
44065: IFTRUE 44069
44067: GO 44095
44069: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44070: LD_ADDR_VAR 0 3
44074: PUSH
44075: LD_INT 11
44077: PUSH
44078: LD_INT 12
44080: PUSH
44081: LD_INT 13
44083: PUSH
44084: LD_INT 14
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: ST_TO_ADDR
44093: GO 44602
44095: LD_INT 25
44097: DOUBLE
44098: EQUAL
44099: IFTRUE 44103
44101: GO 44121
44103: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44104: LD_ADDR_VAR 0 3
44108: PUSH
44109: LD_INT 13
44111: PUSH
44112: LD_INT 14
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: ST_TO_ADDR
44119: GO 44602
44121: LD_INT 27
44123: DOUBLE
44124: EQUAL
44125: IFTRUE 44129
44127: GO 44147
44129: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44130: LD_ADDR_VAR 0 3
44134: PUSH
44135: LD_INT 13
44137: PUSH
44138: LD_INT 14
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: ST_TO_ADDR
44145: GO 44602
44147: LD_INT 92
44149: DOUBLE
44150: EQUAL
44151: IFTRUE 44155
44153: GO 44181
44155: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44156: LD_ADDR_VAR 0 3
44160: PUSH
44161: LD_INT 11
44163: PUSH
44164: LD_INT 12
44166: PUSH
44167: LD_INT 13
44169: PUSH
44170: LD_INT 14
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: ST_TO_ADDR
44179: GO 44602
44181: LD_INT 28
44183: DOUBLE
44184: EQUAL
44185: IFTRUE 44189
44187: GO 44207
44189: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44190: LD_ADDR_VAR 0 3
44194: PUSH
44195: LD_INT 13
44197: PUSH
44198: LD_INT 14
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: ST_TO_ADDR
44205: GO 44602
44207: LD_INT 29
44209: DOUBLE
44210: EQUAL
44211: IFTRUE 44215
44213: GO 44233
44215: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44216: LD_ADDR_VAR 0 3
44220: PUSH
44221: LD_INT 13
44223: PUSH
44224: LD_INT 14
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: ST_TO_ADDR
44231: GO 44602
44233: LD_INT 31
44235: DOUBLE
44236: EQUAL
44237: IFTRUE 44241
44239: GO 44259
44241: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44242: LD_ADDR_VAR 0 3
44246: PUSH
44247: LD_INT 13
44249: PUSH
44250: LD_INT 14
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: ST_TO_ADDR
44257: GO 44602
44259: LD_INT 26
44261: DOUBLE
44262: EQUAL
44263: IFTRUE 44267
44265: GO 44285
44267: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44268: LD_ADDR_VAR 0 3
44272: PUSH
44273: LD_INT 13
44275: PUSH
44276: LD_INT 14
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: ST_TO_ADDR
44283: GO 44602
44285: LD_INT 42
44287: DOUBLE
44288: EQUAL
44289: IFTRUE 44293
44291: GO 44319
44293: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44294: LD_ADDR_VAR 0 3
44298: PUSH
44299: LD_INT 21
44301: PUSH
44302: LD_INT 22
44304: PUSH
44305: LD_INT 23
44307: PUSH
44308: LD_INT 24
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: ST_TO_ADDR
44317: GO 44602
44319: LD_INT 43
44321: DOUBLE
44322: EQUAL
44323: IFTRUE 44327
44325: GO 44353
44327: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44328: LD_ADDR_VAR 0 3
44332: PUSH
44333: LD_INT 21
44335: PUSH
44336: LD_INT 22
44338: PUSH
44339: LD_INT 23
44341: PUSH
44342: LD_INT 24
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: ST_TO_ADDR
44351: GO 44602
44353: LD_INT 44
44355: DOUBLE
44356: EQUAL
44357: IFTRUE 44361
44359: GO 44387
44361: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44362: LD_ADDR_VAR 0 3
44366: PUSH
44367: LD_INT 21
44369: PUSH
44370: LD_INT 22
44372: PUSH
44373: LD_INT 23
44375: PUSH
44376: LD_INT 24
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: ST_TO_ADDR
44385: GO 44602
44387: LD_INT 45
44389: DOUBLE
44390: EQUAL
44391: IFTRUE 44395
44393: GO 44421
44395: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44396: LD_ADDR_VAR 0 3
44400: PUSH
44401: LD_INT 21
44403: PUSH
44404: LD_INT 22
44406: PUSH
44407: LD_INT 23
44409: PUSH
44410: LD_INT 24
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: ST_TO_ADDR
44419: GO 44602
44421: LD_INT 49
44423: DOUBLE
44424: EQUAL
44425: IFTRUE 44429
44427: GO 44455
44429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44430: LD_ADDR_VAR 0 3
44434: PUSH
44435: LD_INT 21
44437: PUSH
44438: LD_INT 22
44440: PUSH
44441: LD_INT 23
44443: PUSH
44444: LD_INT 24
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: ST_TO_ADDR
44453: GO 44602
44455: LD_INT 51
44457: DOUBLE
44458: EQUAL
44459: IFTRUE 44463
44461: GO 44489
44463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44464: LD_ADDR_VAR 0 3
44468: PUSH
44469: LD_INT 21
44471: PUSH
44472: LD_INT 22
44474: PUSH
44475: LD_INT 23
44477: PUSH
44478: LD_INT 24
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: ST_TO_ADDR
44487: GO 44602
44489: LD_INT 52
44491: DOUBLE
44492: EQUAL
44493: IFTRUE 44497
44495: GO 44523
44497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44498: LD_ADDR_VAR 0 3
44502: PUSH
44503: LD_INT 21
44505: PUSH
44506: LD_INT 22
44508: PUSH
44509: LD_INT 23
44511: PUSH
44512: LD_INT 24
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: ST_TO_ADDR
44521: GO 44602
44523: LD_INT 53
44525: DOUBLE
44526: EQUAL
44527: IFTRUE 44531
44529: GO 44549
44531: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44532: LD_ADDR_VAR 0 3
44536: PUSH
44537: LD_INT 23
44539: PUSH
44540: LD_INT 24
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: ST_TO_ADDR
44547: GO 44602
44549: LD_INT 46
44551: DOUBLE
44552: EQUAL
44553: IFTRUE 44557
44555: GO 44575
44557: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44558: LD_ADDR_VAR 0 3
44562: PUSH
44563: LD_INT 23
44565: PUSH
44566: LD_INT 24
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: ST_TO_ADDR
44573: GO 44602
44575: LD_INT 47
44577: DOUBLE
44578: EQUAL
44579: IFTRUE 44583
44581: GO 44601
44583: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44584: LD_ADDR_VAR 0 3
44588: PUSH
44589: LD_INT 23
44591: PUSH
44592: LD_INT 24
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: ST_TO_ADDR
44599: GO 44602
44601: POP
// result := ( chassis in result ) ;
44602: LD_ADDR_VAR 0 3
44606: PUSH
44607: LD_VAR 0 1
44611: PUSH
44612: LD_VAR 0 3
44616: IN
44617: ST_TO_ADDR
// end ;
44618: LD_VAR 0 3
44622: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44623: LD_INT 0
44625: PPUSH
44626: PPUSH
44627: PPUSH
44628: PPUSH
44629: PPUSH
44630: PPUSH
44631: PPUSH
// result := array ;
44632: LD_ADDR_VAR 0 5
44636: PUSH
44637: LD_VAR 0 1
44641: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44642: LD_VAR 0 1
44646: NOT
44647: PUSH
44648: LD_VAR 0 2
44652: NOT
44653: OR
44654: PUSH
44655: LD_VAR 0 3
44659: NOT
44660: OR
44661: PUSH
44662: LD_VAR 0 2
44666: PUSH
44667: LD_VAR 0 1
44671: GREATER
44672: OR
44673: PUSH
44674: LD_VAR 0 3
44678: PUSH
44679: LD_VAR 0 1
44683: GREATER
44684: OR
44685: IFFALSE 44689
// exit ;
44687: GO 44985
// if direction then
44689: LD_VAR 0 4
44693: IFFALSE 44757
// begin d := 1 ;
44695: LD_ADDR_VAR 0 9
44699: PUSH
44700: LD_INT 1
44702: ST_TO_ADDR
// if i_from > i_to then
44703: LD_VAR 0 2
44707: PUSH
44708: LD_VAR 0 3
44712: GREATER
44713: IFFALSE 44739
// length := ( array - i_from ) + i_to else
44715: LD_ADDR_VAR 0 11
44719: PUSH
44720: LD_VAR 0 1
44724: PUSH
44725: LD_VAR 0 2
44729: MINUS
44730: PUSH
44731: LD_VAR 0 3
44735: PLUS
44736: ST_TO_ADDR
44737: GO 44755
// length := i_to - i_from ;
44739: LD_ADDR_VAR 0 11
44743: PUSH
44744: LD_VAR 0 3
44748: PUSH
44749: LD_VAR 0 2
44753: MINUS
44754: ST_TO_ADDR
// end else
44755: GO 44818
// begin d := - 1 ;
44757: LD_ADDR_VAR 0 9
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: ST_TO_ADDR
// if i_from > i_to then
44766: LD_VAR 0 2
44770: PUSH
44771: LD_VAR 0 3
44775: GREATER
44776: IFFALSE 44796
// length := i_from - i_to else
44778: LD_ADDR_VAR 0 11
44782: PUSH
44783: LD_VAR 0 2
44787: PUSH
44788: LD_VAR 0 3
44792: MINUS
44793: ST_TO_ADDR
44794: GO 44818
// length := ( array - i_to ) + i_from ;
44796: LD_ADDR_VAR 0 11
44800: PUSH
44801: LD_VAR 0 1
44805: PUSH
44806: LD_VAR 0 3
44810: MINUS
44811: PUSH
44812: LD_VAR 0 2
44816: PLUS
44817: ST_TO_ADDR
// end ; if not length then
44818: LD_VAR 0 11
44822: NOT
44823: IFFALSE 44827
// exit ;
44825: GO 44985
// tmp := array ;
44827: LD_ADDR_VAR 0 10
44831: PUSH
44832: LD_VAR 0 1
44836: ST_TO_ADDR
// for i = 1 to length do
44837: LD_ADDR_VAR 0 6
44841: PUSH
44842: DOUBLE
44843: LD_INT 1
44845: DEC
44846: ST_TO_ADDR
44847: LD_VAR 0 11
44851: PUSH
44852: FOR_TO
44853: IFFALSE 44973
// begin for j = 1 to array do
44855: LD_ADDR_VAR 0 7
44859: PUSH
44860: DOUBLE
44861: LD_INT 1
44863: DEC
44864: ST_TO_ADDR
44865: LD_VAR 0 1
44869: PUSH
44870: FOR_TO
44871: IFFALSE 44959
// begin k := j + d ;
44873: LD_ADDR_VAR 0 8
44877: PUSH
44878: LD_VAR 0 7
44882: PUSH
44883: LD_VAR 0 9
44887: PLUS
44888: ST_TO_ADDR
// if k > array then
44889: LD_VAR 0 8
44893: PUSH
44894: LD_VAR 0 1
44898: GREATER
44899: IFFALSE 44909
// k := 1 ;
44901: LD_ADDR_VAR 0 8
44905: PUSH
44906: LD_INT 1
44908: ST_TO_ADDR
// if not k then
44909: LD_VAR 0 8
44913: NOT
44914: IFFALSE 44926
// k := array ;
44916: LD_ADDR_VAR 0 8
44920: PUSH
44921: LD_VAR 0 1
44925: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44926: LD_ADDR_VAR 0 10
44930: PUSH
44931: LD_VAR 0 10
44935: PPUSH
44936: LD_VAR 0 8
44940: PPUSH
44941: LD_VAR 0 1
44945: PUSH
44946: LD_VAR 0 7
44950: ARRAY
44951: PPUSH
44952: CALL_OW 1
44956: ST_TO_ADDR
// end ;
44957: GO 44870
44959: POP
44960: POP
// array := tmp ;
44961: LD_ADDR_VAR 0 1
44965: PUSH
44966: LD_VAR 0 10
44970: ST_TO_ADDR
// end ;
44971: GO 44852
44973: POP
44974: POP
// result := array ;
44975: LD_ADDR_VAR 0 5
44979: PUSH
44980: LD_VAR 0 1
44984: ST_TO_ADDR
// end ;
44985: LD_VAR 0 5
44989: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44990: LD_INT 0
44992: PPUSH
44993: PPUSH
// result := 0 ;
44994: LD_ADDR_VAR 0 3
44998: PUSH
44999: LD_INT 0
45001: ST_TO_ADDR
// if not array or not value in array then
45002: LD_VAR 0 1
45006: NOT
45007: PUSH
45008: LD_VAR 0 2
45012: PUSH
45013: LD_VAR 0 1
45017: IN
45018: NOT
45019: OR
45020: IFFALSE 45024
// exit ;
45022: GO 45078
// for i = 1 to array do
45024: LD_ADDR_VAR 0 4
45028: PUSH
45029: DOUBLE
45030: LD_INT 1
45032: DEC
45033: ST_TO_ADDR
45034: LD_VAR 0 1
45038: PUSH
45039: FOR_TO
45040: IFFALSE 45076
// if value = array [ i ] then
45042: LD_VAR 0 2
45046: PUSH
45047: LD_VAR 0 1
45051: PUSH
45052: LD_VAR 0 4
45056: ARRAY
45057: EQUAL
45058: IFFALSE 45074
// begin result := i ;
45060: LD_ADDR_VAR 0 3
45064: PUSH
45065: LD_VAR 0 4
45069: ST_TO_ADDR
// exit ;
45070: POP
45071: POP
45072: GO 45078
// end ;
45074: GO 45039
45076: POP
45077: POP
// end ;
45078: LD_VAR 0 3
45082: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45083: LD_INT 0
45085: PPUSH
// vc_chassis := chassis ;
45086: LD_ADDR_OWVAR 37
45090: PUSH
45091: LD_VAR 0 1
45095: ST_TO_ADDR
// vc_engine := engine ;
45096: LD_ADDR_OWVAR 39
45100: PUSH
45101: LD_VAR 0 2
45105: ST_TO_ADDR
// vc_control := control ;
45106: LD_ADDR_OWVAR 38
45110: PUSH
45111: LD_VAR 0 3
45115: ST_TO_ADDR
// vc_weapon := weapon ;
45116: LD_ADDR_OWVAR 40
45120: PUSH
45121: LD_VAR 0 4
45125: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45126: LD_ADDR_OWVAR 41
45130: PUSH
45131: LD_VAR 0 5
45135: ST_TO_ADDR
// end ;
45136: LD_VAR 0 6
45140: RET
// export function WantPlant ( unit ) ; var task ; begin
45141: LD_INT 0
45143: PPUSH
45144: PPUSH
// result := false ;
45145: LD_ADDR_VAR 0 2
45149: PUSH
45150: LD_INT 0
45152: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45153: LD_ADDR_VAR 0 3
45157: PUSH
45158: LD_VAR 0 1
45162: PPUSH
45163: CALL_OW 437
45167: ST_TO_ADDR
// if task then
45168: LD_VAR 0 3
45172: IFFALSE 45200
// if task [ 1 ] [ 1 ] = p then
45174: LD_VAR 0 3
45178: PUSH
45179: LD_INT 1
45181: ARRAY
45182: PUSH
45183: LD_INT 1
45185: ARRAY
45186: PUSH
45187: LD_STRING p
45189: EQUAL
45190: IFFALSE 45200
// result := true ;
45192: LD_ADDR_VAR 0 2
45196: PUSH
45197: LD_INT 1
45199: ST_TO_ADDR
// end ;
45200: LD_VAR 0 2
45204: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45205: LD_INT 0
45207: PPUSH
45208: PPUSH
45209: PPUSH
45210: PPUSH
// if pos < 1 then
45211: LD_VAR 0 2
45215: PUSH
45216: LD_INT 1
45218: LESS
45219: IFFALSE 45223
// exit ;
45221: GO 45526
// if pos = 1 then
45223: LD_VAR 0 2
45227: PUSH
45228: LD_INT 1
45230: EQUAL
45231: IFFALSE 45264
// result := Replace ( arr , pos [ 1 ] , value ) else
45233: LD_ADDR_VAR 0 4
45237: PUSH
45238: LD_VAR 0 1
45242: PPUSH
45243: LD_VAR 0 2
45247: PUSH
45248: LD_INT 1
45250: ARRAY
45251: PPUSH
45252: LD_VAR 0 3
45256: PPUSH
45257: CALL_OW 1
45261: ST_TO_ADDR
45262: GO 45526
// begin tmp := arr ;
45264: LD_ADDR_VAR 0 6
45268: PUSH
45269: LD_VAR 0 1
45273: ST_TO_ADDR
// s_arr := [ tmp ] ;
45274: LD_ADDR_VAR 0 7
45278: PUSH
45279: LD_VAR 0 6
45283: PUSH
45284: EMPTY
45285: LIST
45286: ST_TO_ADDR
// for i = 1 to pos - 1 do
45287: LD_ADDR_VAR 0 5
45291: PUSH
45292: DOUBLE
45293: LD_INT 1
45295: DEC
45296: ST_TO_ADDR
45297: LD_VAR 0 2
45301: PUSH
45302: LD_INT 1
45304: MINUS
45305: PUSH
45306: FOR_TO
45307: IFFALSE 45352
// begin tmp := tmp [ pos [ i ] ] ;
45309: LD_ADDR_VAR 0 6
45313: PUSH
45314: LD_VAR 0 6
45318: PUSH
45319: LD_VAR 0 2
45323: PUSH
45324: LD_VAR 0 5
45328: ARRAY
45329: ARRAY
45330: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45331: LD_ADDR_VAR 0 7
45335: PUSH
45336: LD_VAR 0 7
45340: PUSH
45341: LD_VAR 0 6
45345: PUSH
45346: EMPTY
45347: LIST
45348: ADD
45349: ST_TO_ADDR
// end ;
45350: GO 45306
45352: POP
45353: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45354: LD_ADDR_VAR 0 6
45358: PUSH
45359: LD_VAR 0 6
45363: PPUSH
45364: LD_VAR 0 2
45368: PUSH
45369: LD_VAR 0 2
45373: ARRAY
45374: PPUSH
45375: LD_VAR 0 3
45379: PPUSH
45380: CALL_OW 1
45384: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45385: LD_ADDR_VAR 0 7
45389: PUSH
45390: LD_VAR 0 7
45394: PPUSH
45395: LD_VAR 0 7
45399: PPUSH
45400: LD_VAR 0 6
45404: PPUSH
45405: CALL_OW 1
45409: ST_TO_ADDR
// for i = s_arr downto 2 do
45410: LD_ADDR_VAR 0 5
45414: PUSH
45415: DOUBLE
45416: LD_VAR 0 7
45420: INC
45421: ST_TO_ADDR
45422: LD_INT 2
45424: PUSH
45425: FOR_DOWNTO
45426: IFFALSE 45510
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45428: LD_ADDR_VAR 0 6
45432: PUSH
45433: LD_VAR 0 7
45437: PUSH
45438: LD_VAR 0 5
45442: PUSH
45443: LD_INT 1
45445: MINUS
45446: ARRAY
45447: PPUSH
45448: LD_VAR 0 2
45452: PUSH
45453: LD_VAR 0 5
45457: PUSH
45458: LD_INT 1
45460: MINUS
45461: ARRAY
45462: PPUSH
45463: LD_VAR 0 7
45467: PUSH
45468: LD_VAR 0 5
45472: ARRAY
45473: PPUSH
45474: CALL_OW 1
45478: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45479: LD_ADDR_VAR 0 7
45483: PUSH
45484: LD_VAR 0 7
45488: PPUSH
45489: LD_VAR 0 5
45493: PUSH
45494: LD_INT 1
45496: MINUS
45497: PPUSH
45498: LD_VAR 0 6
45502: PPUSH
45503: CALL_OW 1
45507: ST_TO_ADDR
// end ;
45508: GO 45425
45510: POP
45511: POP
// result := s_arr [ 1 ] ;
45512: LD_ADDR_VAR 0 4
45516: PUSH
45517: LD_VAR 0 7
45521: PUSH
45522: LD_INT 1
45524: ARRAY
45525: ST_TO_ADDR
// end ; end ;
45526: LD_VAR 0 4
45530: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45531: LD_INT 0
45533: PPUSH
45534: PPUSH
// if not list then
45535: LD_VAR 0 1
45539: NOT
45540: IFFALSE 45544
// exit ;
45542: GO 45635
// i := list [ pos1 ] ;
45544: LD_ADDR_VAR 0 5
45548: PUSH
45549: LD_VAR 0 1
45553: PUSH
45554: LD_VAR 0 2
45558: ARRAY
45559: ST_TO_ADDR
// if not i then
45560: LD_VAR 0 5
45564: NOT
45565: IFFALSE 45569
// exit ;
45567: GO 45635
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45569: LD_ADDR_VAR 0 1
45573: PUSH
45574: LD_VAR 0 1
45578: PPUSH
45579: LD_VAR 0 2
45583: PPUSH
45584: LD_VAR 0 1
45588: PUSH
45589: LD_VAR 0 3
45593: ARRAY
45594: PPUSH
45595: CALL_OW 1
45599: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45600: LD_ADDR_VAR 0 1
45604: PUSH
45605: LD_VAR 0 1
45609: PPUSH
45610: LD_VAR 0 3
45614: PPUSH
45615: LD_VAR 0 5
45619: PPUSH
45620: CALL_OW 1
45624: ST_TO_ADDR
// result := list ;
45625: LD_ADDR_VAR 0 4
45629: PUSH
45630: LD_VAR 0 1
45634: ST_TO_ADDR
// end ;
45635: LD_VAR 0 4
45639: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45640: LD_INT 0
45642: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45643: LD_ADDR_VAR 0 5
45647: PUSH
45648: LD_VAR 0 1
45652: PPUSH
45653: CALL_OW 250
45657: PPUSH
45658: LD_VAR 0 1
45662: PPUSH
45663: CALL_OW 251
45667: PPUSH
45668: LD_VAR 0 2
45672: PPUSH
45673: LD_VAR 0 3
45677: PPUSH
45678: LD_VAR 0 4
45682: PPUSH
45683: CALL 46061 0 5
45687: ST_TO_ADDR
// end ;
45688: LD_VAR 0 5
45692: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
45693: LD_INT 0
45695: PPUSH
45696: PPUSH
45697: PPUSH
45698: PPUSH
// if not list or not unit then
45699: LD_VAR 0 2
45703: NOT
45704: PUSH
45705: LD_VAR 0 1
45709: NOT
45710: OR
45711: IFFALSE 45715
// exit ;
45713: GO 46056
// result := [ ] ;
45715: LD_ADDR_VAR 0 5
45719: PUSH
45720: EMPTY
45721: ST_TO_ADDR
// for i in list do
45722: LD_ADDR_VAR 0 6
45726: PUSH
45727: LD_VAR 0 2
45731: PUSH
45732: FOR_IN
45733: IFFALSE 45951
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45735: LD_ADDR_VAR 0 8
45739: PUSH
45740: LD_VAR 0 1
45744: PPUSH
45745: LD_VAR 0 6
45749: PUSH
45750: LD_INT 1
45752: ARRAY
45753: PPUSH
45754: LD_VAR 0 6
45758: PUSH
45759: LD_INT 2
45761: ARRAY
45762: PPUSH
45763: CALL_OW 297
45767: ST_TO_ADDR
// if not Count ( result ) then
45768: LD_VAR 0 5
45772: PPUSH
45773: CALL 42345 0 1
45777: NOT
45778: IFFALSE 45811
// begin result := Join ( result , [ i , tmp ] ) ;
45780: LD_ADDR_VAR 0 5
45784: PUSH
45785: LD_VAR 0 5
45789: PPUSH
45790: LD_VAR 0 6
45794: PUSH
45795: LD_VAR 0 8
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PPUSH
45804: CALL 77945 0 2
45808: ST_TO_ADDR
// continue ;
45809: GO 45732
// end ; if result [ result ] [ 2 ] <= tmp then
45811: LD_VAR 0 5
45815: PUSH
45816: LD_VAR 0 5
45820: ARRAY
45821: PUSH
45822: LD_INT 2
45824: ARRAY
45825: PUSH
45826: LD_VAR 0 8
45830: LESSEQUAL
45831: IFFALSE 45864
// result := Join ( result , [ i , tmp ] ) else
45833: LD_ADDR_VAR 0 5
45837: PUSH
45838: LD_VAR 0 5
45842: PPUSH
45843: LD_VAR 0 6
45847: PUSH
45848: LD_VAR 0 8
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PPUSH
45857: CALL 77945 0 2
45861: ST_TO_ADDR
45862: GO 45949
// begin for j := 1 to Count ( result ) do
45864: LD_ADDR_VAR 0 7
45868: PUSH
45869: DOUBLE
45870: LD_INT 1
45872: DEC
45873: ST_TO_ADDR
45874: LD_VAR 0 5
45878: PPUSH
45879: CALL 42345 0 1
45883: PUSH
45884: FOR_TO
45885: IFFALSE 45947
// begin if tmp < result [ j ] [ 2 ] then
45887: LD_VAR 0 8
45891: PUSH
45892: LD_VAR 0 5
45896: PUSH
45897: LD_VAR 0 7
45901: ARRAY
45902: PUSH
45903: LD_INT 2
45905: ARRAY
45906: LESS
45907: IFFALSE 45945
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45909: LD_ADDR_VAR 0 5
45913: PUSH
45914: LD_VAR 0 5
45918: PPUSH
45919: LD_VAR 0 7
45923: PPUSH
45924: LD_VAR 0 6
45928: PUSH
45929: LD_VAR 0 8
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PPUSH
45938: CALL_OW 2
45942: ST_TO_ADDR
// break ;
45943: GO 45947
// end ; end ;
45945: GO 45884
45947: POP
45948: POP
// end ; end ;
45949: GO 45732
45951: POP
45952: POP
// if result and not asc then
45953: LD_VAR 0 5
45957: PUSH
45958: LD_VAR 0 3
45962: NOT
45963: AND
45964: IFFALSE 45981
// result := ReverseArray ( result ) ;
45966: LD_ADDR_VAR 0 5
45970: PUSH
45971: LD_VAR 0 5
45975: PPUSH
45976: CALL 73221 0 1
45980: ST_TO_ADDR
// tmp := [ ] ;
45981: LD_ADDR_VAR 0 8
45985: PUSH
45986: EMPTY
45987: ST_TO_ADDR
// if mode then
45988: LD_VAR 0 4
45992: IFFALSE 46056
// begin for i := 1 to result do
45994: LD_ADDR_VAR 0 6
45998: PUSH
45999: DOUBLE
46000: LD_INT 1
46002: DEC
46003: ST_TO_ADDR
46004: LD_VAR 0 5
46008: PUSH
46009: FOR_TO
46010: IFFALSE 46044
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46012: LD_ADDR_VAR 0 8
46016: PUSH
46017: LD_VAR 0 8
46021: PPUSH
46022: LD_VAR 0 5
46026: PUSH
46027: LD_VAR 0 6
46031: ARRAY
46032: PUSH
46033: LD_INT 1
46035: ARRAY
46036: PPUSH
46037: CALL 77945 0 2
46041: ST_TO_ADDR
46042: GO 46009
46044: POP
46045: POP
// result := tmp ;
46046: LD_ADDR_VAR 0 5
46050: PUSH
46051: LD_VAR 0 8
46055: ST_TO_ADDR
// end ; end ;
46056: LD_VAR 0 5
46060: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46061: LD_INT 0
46063: PPUSH
46064: PPUSH
46065: PPUSH
46066: PPUSH
// if not list then
46067: LD_VAR 0 3
46071: NOT
46072: IFFALSE 46076
// exit ;
46074: GO 46464
// result := [ ] ;
46076: LD_ADDR_VAR 0 6
46080: PUSH
46081: EMPTY
46082: ST_TO_ADDR
// for i in list do
46083: LD_ADDR_VAR 0 7
46087: PUSH
46088: LD_VAR 0 3
46092: PUSH
46093: FOR_IN
46094: IFFALSE 46296
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46096: LD_ADDR_VAR 0 9
46100: PUSH
46101: LD_VAR 0 7
46105: PPUSH
46106: LD_VAR 0 1
46110: PPUSH
46111: LD_VAR 0 2
46115: PPUSH
46116: CALL_OW 297
46120: ST_TO_ADDR
// if not result then
46121: LD_VAR 0 6
46125: NOT
46126: IFFALSE 46152
// result := [ [ i , tmp ] ] else
46128: LD_ADDR_VAR 0 6
46132: PUSH
46133: LD_VAR 0 7
46137: PUSH
46138: LD_VAR 0 9
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: EMPTY
46148: LIST
46149: ST_TO_ADDR
46150: GO 46294
// begin if result [ result ] [ 2 ] < tmp then
46152: LD_VAR 0 6
46156: PUSH
46157: LD_VAR 0 6
46161: ARRAY
46162: PUSH
46163: LD_INT 2
46165: ARRAY
46166: PUSH
46167: LD_VAR 0 9
46171: LESS
46172: IFFALSE 46214
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46174: LD_ADDR_VAR 0 6
46178: PUSH
46179: LD_VAR 0 6
46183: PPUSH
46184: LD_VAR 0 6
46188: PUSH
46189: LD_INT 1
46191: PLUS
46192: PPUSH
46193: LD_VAR 0 7
46197: PUSH
46198: LD_VAR 0 9
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PPUSH
46207: CALL_OW 2
46211: ST_TO_ADDR
46212: GO 46294
// for j = 1 to result do
46214: LD_ADDR_VAR 0 8
46218: PUSH
46219: DOUBLE
46220: LD_INT 1
46222: DEC
46223: ST_TO_ADDR
46224: LD_VAR 0 6
46228: PUSH
46229: FOR_TO
46230: IFFALSE 46292
// begin if tmp < result [ j ] [ 2 ] then
46232: LD_VAR 0 9
46236: PUSH
46237: LD_VAR 0 6
46241: PUSH
46242: LD_VAR 0 8
46246: ARRAY
46247: PUSH
46248: LD_INT 2
46250: ARRAY
46251: LESS
46252: IFFALSE 46290
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46254: LD_ADDR_VAR 0 6
46258: PUSH
46259: LD_VAR 0 6
46263: PPUSH
46264: LD_VAR 0 8
46268: PPUSH
46269: LD_VAR 0 7
46273: PUSH
46274: LD_VAR 0 9
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PPUSH
46283: CALL_OW 2
46287: ST_TO_ADDR
// break ;
46288: GO 46292
// end ; end ;
46290: GO 46229
46292: POP
46293: POP
// end ; end ;
46294: GO 46093
46296: POP
46297: POP
// if result and not asc then
46298: LD_VAR 0 6
46302: PUSH
46303: LD_VAR 0 4
46307: NOT
46308: AND
46309: IFFALSE 46384
// begin tmp := result ;
46311: LD_ADDR_VAR 0 9
46315: PUSH
46316: LD_VAR 0 6
46320: ST_TO_ADDR
// for i = tmp downto 1 do
46321: LD_ADDR_VAR 0 7
46325: PUSH
46326: DOUBLE
46327: LD_VAR 0 9
46331: INC
46332: ST_TO_ADDR
46333: LD_INT 1
46335: PUSH
46336: FOR_DOWNTO
46337: IFFALSE 46382
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46339: LD_ADDR_VAR 0 6
46343: PUSH
46344: LD_VAR 0 6
46348: PPUSH
46349: LD_VAR 0 9
46353: PUSH
46354: LD_VAR 0 7
46358: MINUS
46359: PUSH
46360: LD_INT 1
46362: PLUS
46363: PPUSH
46364: LD_VAR 0 9
46368: PUSH
46369: LD_VAR 0 7
46373: ARRAY
46374: PPUSH
46375: CALL_OW 1
46379: ST_TO_ADDR
46380: GO 46336
46382: POP
46383: POP
// end ; tmp := [ ] ;
46384: LD_ADDR_VAR 0 9
46388: PUSH
46389: EMPTY
46390: ST_TO_ADDR
// if mode then
46391: LD_VAR 0 5
46395: IFFALSE 46464
// begin for i = 1 to result do
46397: LD_ADDR_VAR 0 7
46401: PUSH
46402: DOUBLE
46403: LD_INT 1
46405: DEC
46406: ST_TO_ADDR
46407: LD_VAR 0 6
46411: PUSH
46412: FOR_TO
46413: IFFALSE 46452
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46415: LD_ADDR_VAR 0 9
46419: PUSH
46420: LD_VAR 0 9
46424: PPUSH
46425: LD_VAR 0 7
46429: PPUSH
46430: LD_VAR 0 6
46434: PUSH
46435: LD_VAR 0 7
46439: ARRAY
46440: PUSH
46441: LD_INT 1
46443: ARRAY
46444: PPUSH
46445: CALL_OW 1
46449: ST_TO_ADDR
46450: GO 46412
46452: POP
46453: POP
// result := tmp ;
46454: LD_ADDR_VAR 0 6
46458: PUSH
46459: LD_VAR 0 9
46463: ST_TO_ADDR
// end ; end ;
46464: LD_VAR 0 6
46468: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46469: LD_INT 0
46471: PPUSH
46472: PPUSH
46473: PPUSH
46474: PPUSH
46475: PPUSH
46476: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46477: LD_ADDR_VAR 0 5
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: ST_TO_ADDR
// if not x or not y then
46499: LD_VAR 0 2
46503: NOT
46504: PUSH
46505: LD_VAR 0 3
46509: NOT
46510: OR
46511: IFFALSE 46515
// exit ;
46513: GO 48165
// if not range then
46515: LD_VAR 0 4
46519: NOT
46520: IFFALSE 46530
// range := 10 ;
46522: LD_ADDR_VAR 0 4
46526: PUSH
46527: LD_INT 10
46529: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46530: LD_ADDR_VAR 0 8
46534: PUSH
46535: LD_INT 81
46537: PUSH
46538: LD_VAR 0 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 92
46549: PUSH
46550: LD_VAR 0 2
46554: PUSH
46555: LD_VAR 0 3
46559: PUSH
46560: LD_VAR 0 4
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 3
46573: PUSH
46574: LD_INT 21
46576: PUSH
46577: LD_INT 3
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: LIST
46592: PPUSH
46593: CALL_OW 69
46597: ST_TO_ADDR
// if not tmp then
46598: LD_VAR 0 8
46602: NOT
46603: IFFALSE 46607
// exit ;
46605: GO 48165
// for i in tmp do
46607: LD_ADDR_VAR 0 6
46611: PUSH
46612: LD_VAR 0 8
46616: PUSH
46617: FOR_IN
46618: IFFALSE 48140
// begin points := [ 0 , 0 , 0 ] ;
46620: LD_ADDR_VAR 0 9
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: LIST
46638: ST_TO_ADDR
// bpoints := 1 ;
46639: LD_ADDR_VAR 0 10
46643: PUSH
46644: LD_INT 1
46646: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46647: LD_VAR 0 6
46651: PPUSH
46652: CALL_OW 247
46656: PUSH
46657: LD_INT 1
46659: DOUBLE
46660: EQUAL
46661: IFTRUE 46665
46663: GO 47243
46665: POP
// begin if GetClass ( i ) = 1 then
46666: LD_VAR 0 6
46670: PPUSH
46671: CALL_OW 257
46675: PUSH
46676: LD_INT 1
46678: EQUAL
46679: IFFALSE 46700
// points := [ 10 , 5 , 3 ] ;
46681: LD_ADDR_VAR 0 9
46685: PUSH
46686: LD_INT 10
46688: PUSH
46689: LD_INT 5
46691: PUSH
46692: LD_INT 3
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: LIST
46699: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46700: LD_VAR 0 6
46704: PPUSH
46705: CALL_OW 257
46709: PUSH
46710: LD_INT 2
46712: PUSH
46713: LD_INT 3
46715: PUSH
46716: LD_INT 4
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: LIST
46723: IN
46724: IFFALSE 46745
// points := [ 3 , 2 , 1 ] ;
46726: LD_ADDR_VAR 0 9
46730: PUSH
46731: LD_INT 3
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: LIST
46744: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46745: LD_VAR 0 6
46749: PPUSH
46750: CALL_OW 257
46754: PUSH
46755: LD_INT 5
46757: EQUAL
46758: IFFALSE 46779
// points := [ 130 , 5 , 2 ] ;
46760: LD_ADDR_VAR 0 9
46764: PUSH
46765: LD_INT 130
46767: PUSH
46768: LD_INT 5
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: LIST
46778: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46779: LD_VAR 0 6
46783: PPUSH
46784: CALL_OW 257
46788: PUSH
46789: LD_INT 8
46791: EQUAL
46792: IFFALSE 46813
// points := [ 35 , 35 , 30 ] ;
46794: LD_ADDR_VAR 0 9
46798: PUSH
46799: LD_INT 35
46801: PUSH
46802: LD_INT 35
46804: PUSH
46805: LD_INT 30
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: LIST
46812: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46813: LD_VAR 0 6
46817: PPUSH
46818: CALL_OW 257
46822: PUSH
46823: LD_INT 9
46825: EQUAL
46826: IFFALSE 46847
// points := [ 20 , 55 , 40 ] ;
46828: LD_ADDR_VAR 0 9
46832: PUSH
46833: LD_INT 20
46835: PUSH
46836: LD_INT 55
46838: PUSH
46839: LD_INT 40
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: LIST
46846: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46847: LD_VAR 0 6
46851: PPUSH
46852: CALL_OW 257
46856: PUSH
46857: LD_INT 12
46859: PUSH
46860: LD_INT 16
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: IN
46867: IFFALSE 46888
// points := [ 5 , 3 , 2 ] ;
46869: LD_ADDR_VAR 0 9
46873: PUSH
46874: LD_INT 5
46876: PUSH
46877: LD_INT 3
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: LIST
46887: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46888: LD_VAR 0 6
46892: PPUSH
46893: CALL_OW 257
46897: PUSH
46898: LD_INT 17
46900: EQUAL
46901: IFFALSE 46922
// points := [ 100 , 50 , 75 ] ;
46903: LD_ADDR_VAR 0 9
46907: PUSH
46908: LD_INT 100
46910: PUSH
46911: LD_INT 50
46913: PUSH
46914: LD_INT 75
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: LIST
46921: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46922: LD_VAR 0 6
46926: PPUSH
46927: CALL_OW 257
46931: PUSH
46932: LD_INT 15
46934: EQUAL
46935: IFFALSE 46956
// points := [ 10 , 5 , 3 ] ;
46937: LD_ADDR_VAR 0 9
46941: PUSH
46942: LD_INT 10
46944: PUSH
46945: LD_INT 5
46947: PUSH
46948: LD_INT 3
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: LIST
46955: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46956: LD_VAR 0 6
46960: PPUSH
46961: CALL_OW 257
46965: PUSH
46966: LD_INT 14
46968: EQUAL
46969: IFFALSE 46990
// points := [ 10 , 0 , 0 ] ;
46971: LD_ADDR_VAR 0 9
46975: PUSH
46976: LD_INT 10
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: LIST
46989: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46990: LD_VAR 0 6
46994: PPUSH
46995: CALL_OW 257
46999: PUSH
47000: LD_INT 11
47002: EQUAL
47003: IFFALSE 47024
// points := [ 30 , 10 , 5 ] ;
47005: LD_ADDR_VAR 0 9
47009: PUSH
47010: LD_INT 30
47012: PUSH
47013: LD_INT 10
47015: PUSH
47016: LD_INT 5
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: LIST
47023: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47024: LD_VAR 0 1
47028: PPUSH
47029: LD_INT 5
47031: PPUSH
47032: CALL_OW 321
47036: PUSH
47037: LD_INT 2
47039: EQUAL
47040: IFFALSE 47057
// bpoints := bpoints * 1.8 ;
47042: LD_ADDR_VAR 0 10
47046: PUSH
47047: LD_VAR 0 10
47051: PUSH
47052: LD_REAL  1.80000000000000E+0000
47055: MUL
47056: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47057: LD_VAR 0 6
47061: PPUSH
47062: CALL_OW 257
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: LD_INT 3
47075: PUSH
47076: LD_INT 4
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: IN
47085: PUSH
47086: LD_VAR 0 1
47090: PPUSH
47091: LD_INT 51
47093: PPUSH
47094: CALL_OW 321
47098: PUSH
47099: LD_INT 2
47101: EQUAL
47102: AND
47103: IFFALSE 47120
// bpoints := bpoints * 1.2 ;
47105: LD_ADDR_VAR 0 10
47109: PUSH
47110: LD_VAR 0 10
47114: PUSH
47115: LD_REAL  1.20000000000000E+0000
47118: MUL
47119: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47120: LD_VAR 0 6
47124: PPUSH
47125: CALL_OW 257
47129: PUSH
47130: LD_INT 5
47132: PUSH
47133: LD_INT 7
47135: PUSH
47136: LD_INT 9
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: LIST
47143: IN
47144: PUSH
47145: LD_VAR 0 1
47149: PPUSH
47150: LD_INT 52
47152: PPUSH
47153: CALL_OW 321
47157: PUSH
47158: LD_INT 2
47160: EQUAL
47161: AND
47162: IFFALSE 47179
// bpoints := bpoints * 1.5 ;
47164: LD_ADDR_VAR 0 10
47168: PUSH
47169: LD_VAR 0 10
47173: PUSH
47174: LD_REAL  1.50000000000000E+0000
47177: MUL
47178: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47179: LD_VAR 0 1
47183: PPUSH
47184: LD_INT 66
47186: PPUSH
47187: CALL_OW 321
47191: PUSH
47192: LD_INT 2
47194: EQUAL
47195: IFFALSE 47212
// bpoints := bpoints * 1.1 ;
47197: LD_ADDR_VAR 0 10
47201: PUSH
47202: LD_VAR 0 10
47206: PUSH
47207: LD_REAL  1.10000000000000E+0000
47210: MUL
47211: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47212: LD_ADDR_VAR 0 10
47216: PUSH
47217: LD_VAR 0 10
47221: PUSH
47222: LD_VAR 0 6
47226: PPUSH
47227: LD_INT 1
47229: PPUSH
47230: CALL_OW 259
47234: PUSH
47235: LD_REAL  1.15000000000000E+0000
47238: MUL
47239: MUL
47240: ST_TO_ADDR
// end ; unit_vehicle :
47241: GO 48069
47243: LD_INT 2
47245: DOUBLE
47246: EQUAL
47247: IFTRUE 47251
47249: GO 48057
47251: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47252: LD_VAR 0 6
47256: PPUSH
47257: CALL_OW 264
47261: PUSH
47262: LD_INT 2
47264: PUSH
47265: LD_INT 42
47267: PUSH
47268: LD_INT 24
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: LIST
47275: IN
47276: IFFALSE 47297
// points := [ 25 , 5 , 3 ] ;
47278: LD_ADDR_VAR 0 9
47282: PUSH
47283: LD_INT 25
47285: PUSH
47286: LD_INT 5
47288: PUSH
47289: LD_INT 3
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: LIST
47296: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47297: LD_VAR 0 6
47301: PPUSH
47302: CALL_OW 264
47306: PUSH
47307: LD_INT 4
47309: PUSH
47310: LD_INT 43
47312: PUSH
47313: LD_INT 25
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: LIST
47320: IN
47321: IFFALSE 47342
// points := [ 40 , 15 , 5 ] ;
47323: LD_ADDR_VAR 0 9
47327: PUSH
47328: LD_INT 40
47330: PUSH
47331: LD_INT 15
47333: PUSH
47334: LD_INT 5
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: LIST
47341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47342: LD_VAR 0 6
47346: PPUSH
47347: CALL_OW 264
47351: PUSH
47352: LD_INT 3
47354: PUSH
47355: LD_INT 23
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: IN
47362: IFFALSE 47383
// points := [ 7 , 25 , 8 ] ;
47364: LD_ADDR_VAR 0 9
47368: PUSH
47369: LD_INT 7
47371: PUSH
47372: LD_INT 25
47374: PUSH
47375: LD_INT 8
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: LIST
47382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47383: LD_VAR 0 6
47387: PPUSH
47388: CALL_OW 264
47392: PUSH
47393: LD_INT 5
47395: PUSH
47396: LD_INT 27
47398: PUSH
47399: LD_INT 44
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: LIST
47406: IN
47407: IFFALSE 47428
// points := [ 14 , 50 , 16 ] ;
47409: LD_ADDR_VAR 0 9
47413: PUSH
47414: LD_INT 14
47416: PUSH
47417: LD_INT 50
47419: PUSH
47420: LD_INT 16
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: LIST
47427: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47428: LD_VAR 0 6
47432: PPUSH
47433: CALL_OW 264
47437: PUSH
47438: LD_INT 6
47440: PUSH
47441: LD_INT 46
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: IN
47448: IFFALSE 47469
// points := [ 32 , 120 , 70 ] ;
47450: LD_ADDR_VAR 0 9
47454: PUSH
47455: LD_INT 32
47457: PUSH
47458: LD_INT 120
47460: PUSH
47461: LD_INT 70
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: LIST
47468: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47469: LD_VAR 0 6
47473: PPUSH
47474: CALL_OW 264
47478: PUSH
47479: LD_INT 7
47481: PUSH
47482: LD_INT 28
47484: PUSH
47485: LD_INT 45
47487: PUSH
47488: LD_INT 92
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: IN
47497: IFFALSE 47518
// points := [ 35 , 20 , 45 ] ;
47499: LD_ADDR_VAR 0 9
47503: PUSH
47504: LD_INT 35
47506: PUSH
47507: LD_INT 20
47509: PUSH
47510: LD_INT 45
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47518: LD_VAR 0 6
47522: PPUSH
47523: CALL_OW 264
47527: PUSH
47528: LD_INT 47
47530: PUSH
47531: EMPTY
47532: LIST
47533: IN
47534: IFFALSE 47555
// points := [ 67 , 45 , 75 ] ;
47536: LD_ADDR_VAR 0 9
47540: PUSH
47541: LD_INT 67
47543: PUSH
47544: LD_INT 45
47546: PUSH
47547: LD_INT 75
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: LIST
47554: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47555: LD_VAR 0 6
47559: PPUSH
47560: CALL_OW 264
47564: PUSH
47565: LD_INT 26
47567: PUSH
47568: EMPTY
47569: LIST
47570: IN
47571: IFFALSE 47592
// points := [ 120 , 30 , 80 ] ;
47573: LD_ADDR_VAR 0 9
47577: PUSH
47578: LD_INT 120
47580: PUSH
47581: LD_INT 30
47583: PUSH
47584: LD_INT 80
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: LIST
47591: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47592: LD_VAR 0 6
47596: PPUSH
47597: CALL_OW 264
47601: PUSH
47602: LD_INT 22
47604: PUSH
47605: EMPTY
47606: LIST
47607: IN
47608: IFFALSE 47629
// points := [ 40 , 1 , 1 ] ;
47610: LD_ADDR_VAR 0 9
47614: PUSH
47615: LD_INT 40
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: LIST
47628: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47629: LD_VAR 0 6
47633: PPUSH
47634: CALL_OW 264
47638: PUSH
47639: LD_INT 29
47641: PUSH
47642: EMPTY
47643: LIST
47644: IN
47645: IFFALSE 47666
// points := [ 70 , 200 , 400 ] ;
47647: LD_ADDR_VAR 0 9
47651: PUSH
47652: LD_INT 70
47654: PUSH
47655: LD_INT 200
47657: PUSH
47658: LD_INT 400
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: LIST
47665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47666: LD_VAR 0 6
47670: PPUSH
47671: CALL_OW 264
47675: PUSH
47676: LD_INT 14
47678: PUSH
47679: LD_INT 53
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: IN
47686: IFFALSE 47707
// points := [ 40 , 10 , 20 ] ;
47688: LD_ADDR_VAR 0 9
47692: PUSH
47693: LD_INT 40
47695: PUSH
47696: LD_INT 10
47698: PUSH
47699: LD_INT 20
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: LIST
47706: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47707: LD_VAR 0 6
47711: PPUSH
47712: CALL_OW 264
47716: PUSH
47717: LD_INT 9
47719: PUSH
47720: EMPTY
47721: LIST
47722: IN
47723: IFFALSE 47744
// points := [ 5 , 70 , 20 ] ;
47725: LD_ADDR_VAR 0 9
47729: PUSH
47730: LD_INT 5
47732: PUSH
47733: LD_INT 70
47735: PUSH
47736: LD_INT 20
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: LIST
47743: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47744: LD_VAR 0 6
47748: PPUSH
47749: CALL_OW 264
47753: PUSH
47754: LD_INT 10
47756: PUSH
47757: EMPTY
47758: LIST
47759: IN
47760: IFFALSE 47781
// points := [ 35 , 110 , 70 ] ;
47762: LD_ADDR_VAR 0 9
47766: PUSH
47767: LD_INT 35
47769: PUSH
47770: LD_INT 110
47772: PUSH
47773: LD_INT 70
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: LIST
47780: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47781: LD_VAR 0 6
47785: PPUSH
47786: CALL_OW 265
47790: PUSH
47791: LD_INT 25
47793: EQUAL
47794: IFFALSE 47815
// points := [ 80 , 65 , 100 ] ;
47796: LD_ADDR_VAR 0 9
47800: PUSH
47801: LD_INT 80
47803: PUSH
47804: LD_INT 65
47806: PUSH
47807: LD_INT 100
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: LIST
47814: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47815: LD_VAR 0 6
47819: PPUSH
47820: CALL_OW 263
47824: PUSH
47825: LD_INT 1
47827: EQUAL
47828: IFFALSE 47863
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47830: LD_ADDR_VAR 0 10
47834: PUSH
47835: LD_VAR 0 10
47839: PUSH
47840: LD_VAR 0 6
47844: PPUSH
47845: CALL_OW 311
47849: PPUSH
47850: LD_INT 3
47852: PPUSH
47853: CALL_OW 259
47857: PUSH
47858: LD_INT 4
47860: MUL
47861: MUL
47862: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47863: LD_VAR 0 6
47867: PPUSH
47868: CALL_OW 263
47872: PUSH
47873: LD_INT 2
47875: EQUAL
47876: IFFALSE 47927
// begin j := IsControledBy ( i ) ;
47878: LD_ADDR_VAR 0 7
47882: PUSH
47883: LD_VAR 0 6
47887: PPUSH
47888: CALL_OW 312
47892: ST_TO_ADDR
// if j then
47893: LD_VAR 0 7
47897: IFFALSE 47927
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47899: LD_ADDR_VAR 0 10
47903: PUSH
47904: LD_VAR 0 10
47908: PUSH
47909: LD_VAR 0 7
47913: PPUSH
47914: LD_INT 3
47916: PPUSH
47917: CALL_OW 259
47921: PUSH
47922: LD_INT 3
47924: MUL
47925: MUL
47926: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47927: LD_VAR 0 6
47931: PPUSH
47932: CALL_OW 264
47936: PUSH
47937: LD_INT 5
47939: PUSH
47940: LD_INT 6
47942: PUSH
47943: LD_INT 46
47945: PUSH
47946: LD_INT 44
47948: PUSH
47949: LD_INT 47
47951: PUSH
47952: LD_INT 45
47954: PUSH
47955: LD_INT 28
47957: PUSH
47958: LD_INT 7
47960: PUSH
47961: LD_INT 27
47963: PUSH
47964: LD_INT 29
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: IN
47979: PUSH
47980: LD_VAR 0 1
47984: PPUSH
47985: LD_INT 52
47987: PPUSH
47988: CALL_OW 321
47992: PUSH
47993: LD_INT 2
47995: EQUAL
47996: AND
47997: IFFALSE 48014
// bpoints := bpoints * 1.2 ;
47999: LD_ADDR_VAR 0 10
48003: PUSH
48004: LD_VAR 0 10
48008: PUSH
48009: LD_REAL  1.20000000000000E+0000
48012: MUL
48013: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48014: LD_VAR 0 6
48018: PPUSH
48019: CALL_OW 264
48023: PUSH
48024: LD_INT 6
48026: PUSH
48027: LD_INT 46
48029: PUSH
48030: LD_INT 47
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: LIST
48037: IN
48038: IFFALSE 48055
// bpoints := bpoints * 1.2 ;
48040: LD_ADDR_VAR 0 10
48044: PUSH
48045: LD_VAR 0 10
48049: PUSH
48050: LD_REAL  1.20000000000000E+0000
48053: MUL
48054: ST_TO_ADDR
// end ; unit_building :
48055: GO 48069
48057: LD_INT 3
48059: DOUBLE
48060: EQUAL
48061: IFTRUE 48065
48063: GO 48068
48065: POP
// ; end ;
48066: GO 48069
48068: POP
// for j = 1 to 3 do
48069: LD_ADDR_VAR 0 7
48073: PUSH
48074: DOUBLE
48075: LD_INT 1
48077: DEC
48078: ST_TO_ADDR
48079: LD_INT 3
48081: PUSH
48082: FOR_TO
48083: IFFALSE 48136
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48085: LD_ADDR_VAR 0 5
48089: PUSH
48090: LD_VAR 0 5
48094: PPUSH
48095: LD_VAR 0 7
48099: PPUSH
48100: LD_VAR 0 5
48104: PUSH
48105: LD_VAR 0 7
48109: ARRAY
48110: PUSH
48111: LD_VAR 0 9
48115: PUSH
48116: LD_VAR 0 7
48120: ARRAY
48121: PUSH
48122: LD_VAR 0 10
48126: MUL
48127: PLUS
48128: PPUSH
48129: CALL_OW 1
48133: ST_TO_ADDR
48134: GO 48082
48136: POP
48137: POP
// end ;
48138: GO 46617
48140: POP
48141: POP
// result := Replace ( result , 4 , tmp ) ;
48142: LD_ADDR_VAR 0 5
48146: PUSH
48147: LD_VAR 0 5
48151: PPUSH
48152: LD_INT 4
48154: PPUSH
48155: LD_VAR 0 8
48159: PPUSH
48160: CALL_OW 1
48164: ST_TO_ADDR
// end ;
48165: LD_VAR 0 5
48169: RET
// export function DangerAtRange ( unit , range ) ; begin
48170: LD_INT 0
48172: PPUSH
// if not unit then
48173: LD_VAR 0 1
48177: NOT
48178: IFFALSE 48182
// exit ;
48180: GO 48227
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48182: LD_ADDR_VAR 0 3
48186: PUSH
48187: LD_VAR 0 1
48191: PPUSH
48192: CALL_OW 255
48196: PPUSH
48197: LD_VAR 0 1
48201: PPUSH
48202: CALL_OW 250
48206: PPUSH
48207: LD_VAR 0 1
48211: PPUSH
48212: CALL_OW 251
48216: PPUSH
48217: LD_VAR 0 2
48221: PPUSH
48222: CALL 46469 0 4
48226: ST_TO_ADDR
// end ;
48227: LD_VAR 0 3
48231: RET
// export function DangerInArea ( side , area ) ; begin
48232: LD_INT 0
48234: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48235: LD_ADDR_VAR 0 3
48239: PUSH
48240: LD_VAR 0 2
48244: PPUSH
48245: LD_INT 81
48247: PUSH
48248: LD_VAR 0 1
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PPUSH
48257: CALL_OW 70
48261: ST_TO_ADDR
// end ;
48262: LD_VAR 0 3
48266: RET
// export function IsExtension ( b ) ; begin
48267: LD_INT 0
48269: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48270: LD_ADDR_VAR 0 2
48274: PUSH
48275: LD_VAR 0 1
48279: PUSH
48280: LD_INT 23
48282: PUSH
48283: LD_INT 20
48285: PUSH
48286: LD_INT 22
48288: PUSH
48289: LD_INT 17
48291: PUSH
48292: LD_INT 24
48294: PUSH
48295: LD_INT 21
48297: PUSH
48298: LD_INT 19
48300: PUSH
48301: LD_INT 16
48303: PUSH
48304: LD_INT 25
48306: PUSH
48307: LD_INT 18
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: IN
48322: ST_TO_ADDR
// end ;
48323: LD_VAR 0 2
48327: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48328: LD_INT 0
48330: PPUSH
48331: PPUSH
48332: PPUSH
// result := [ ] ;
48333: LD_ADDR_VAR 0 4
48337: PUSH
48338: EMPTY
48339: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48340: LD_ADDR_VAR 0 5
48344: PUSH
48345: LD_VAR 0 2
48349: PPUSH
48350: LD_INT 21
48352: PUSH
48353: LD_INT 3
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PPUSH
48360: CALL_OW 70
48364: ST_TO_ADDR
// if not tmp then
48365: LD_VAR 0 5
48369: NOT
48370: IFFALSE 48374
// exit ;
48372: GO 48438
// if checkLink then
48374: LD_VAR 0 3
48378: IFFALSE 48428
// begin for i in tmp do
48380: LD_ADDR_VAR 0 6
48384: PUSH
48385: LD_VAR 0 5
48389: PUSH
48390: FOR_IN
48391: IFFALSE 48426
// if GetBase ( i ) <> base then
48393: LD_VAR 0 6
48397: PPUSH
48398: CALL_OW 274
48402: PUSH
48403: LD_VAR 0 1
48407: NONEQUAL
48408: IFFALSE 48424
// ComLinkToBase ( base , i ) ;
48410: LD_VAR 0 1
48414: PPUSH
48415: LD_VAR 0 6
48419: PPUSH
48420: CALL_OW 169
48424: GO 48390
48426: POP
48427: POP
// end ; result := tmp ;
48428: LD_ADDR_VAR 0 4
48432: PUSH
48433: LD_VAR 0 5
48437: ST_TO_ADDR
// end ;
48438: LD_VAR 0 4
48442: RET
// export function ComComplete ( units , b ) ; var i ; begin
48443: LD_INT 0
48445: PPUSH
48446: PPUSH
// if not units then
48447: LD_VAR 0 1
48451: NOT
48452: IFFALSE 48456
// exit ;
48454: GO 48546
// for i in units do
48456: LD_ADDR_VAR 0 4
48460: PUSH
48461: LD_VAR 0 1
48465: PUSH
48466: FOR_IN
48467: IFFALSE 48544
// if BuildingStatus ( b ) = bs_build then
48469: LD_VAR 0 2
48473: PPUSH
48474: CALL_OW 461
48478: PUSH
48479: LD_INT 1
48481: EQUAL
48482: IFFALSE 48542
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48484: LD_VAR 0 4
48488: PPUSH
48489: LD_STRING h
48491: PUSH
48492: LD_VAR 0 2
48496: PPUSH
48497: CALL_OW 250
48501: PUSH
48502: LD_VAR 0 2
48506: PPUSH
48507: CALL_OW 251
48511: PUSH
48512: LD_VAR 0 2
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: PUSH
48535: EMPTY
48536: LIST
48537: PPUSH
48538: CALL_OW 446
48542: GO 48466
48544: POP
48545: POP
// end ;
48546: LD_VAR 0 3
48550: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48551: LD_INT 0
48553: PPUSH
48554: PPUSH
48555: PPUSH
48556: PPUSH
48557: PPUSH
48558: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48559: LD_VAR 0 1
48563: NOT
48564: PUSH
48565: LD_VAR 0 1
48569: PPUSH
48570: CALL_OW 263
48574: PUSH
48575: LD_INT 2
48577: NONEQUAL
48578: OR
48579: IFFALSE 48583
// exit ;
48581: GO 48899
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48583: LD_ADDR_VAR 0 6
48587: PUSH
48588: LD_INT 22
48590: PUSH
48591: LD_VAR 0 1
48595: PPUSH
48596: CALL_OW 255
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: PUSH
48608: LD_INT 30
48610: PUSH
48611: LD_INT 36
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 34
48620: PUSH
48621: LD_INT 31
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: LIST
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PPUSH
48637: CALL_OW 69
48641: ST_TO_ADDR
// if not tmp then
48642: LD_VAR 0 6
48646: NOT
48647: IFFALSE 48651
// exit ;
48649: GO 48899
// result := [ ] ;
48651: LD_ADDR_VAR 0 2
48655: PUSH
48656: EMPTY
48657: ST_TO_ADDR
// for i in tmp do
48658: LD_ADDR_VAR 0 3
48662: PUSH
48663: LD_VAR 0 6
48667: PUSH
48668: FOR_IN
48669: IFFALSE 48740
// begin t := UnitsInside ( i ) ;
48671: LD_ADDR_VAR 0 4
48675: PUSH
48676: LD_VAR 0 3
48680: PPUSH
48681: CALL_OW 313
48685: ST_TO_ADDR
// if t then
48686: LD_VAR 0 4
48690: IFFALSE 48738
// for j in t do
48692: LD_ADDR_VAR 0 7
48696: PUSH
48697: LD_VAR 0 4
48701: PUSH
48702: FOR_IN
48703: IFFALSE 48736
// result := Replace ( result , result + 1 , j ) ;
48705: LD_ADDR_VAR 0 2
48709: PUSH
48710: LD_VAR 0 2
48714: PPUSH
48715: LD_VAR 0 2
48719: PUSH
48720: LD_INT 1
48722: PLUS
48723: PPUSH
48724: LD_VAR 0 7
48728: PPUSH
48729: CALL_OW 1
48733: ST_TO_ADDR
48734: GO 48702
48736: POP
48737: POP
// end ;
48738: GO 48668
48740: POP
48741: POP
// if not result then
48742: LD_VAR 0 2
48746: NOT
48747: IFFALSE 48751
// exit ;
48749: GO 48899
// mech := result [ 1 ] ;
48751: LD_ADDR_VAR 0 5
48755: PUSH
48756: LD_VAR 0 2
48760: PUSH
48761: LD_INT 1
48763: ARRAY
48764: ST_TO_ADDR
// if result > 1 then
48765: LD_VAR 0 2
48769: PUSH
48770: LD_INT 1
48772: GREATER
48773: IFFALSE 48885
// begin for i = 2 to result do
48775: LD_ADDR_VAR 0 3
48779: PUSH
48780: DOUBLE
48781: LD_INT 2
48783: DEC
48784: ST_TO_ADDR
48785: LD_VAR 0 2
48789: PUSH
48790: FOR_TO
48791: IFFALSE 48883
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48793: LD_ADDR_VAR 0 4
48797: PUSH
48798: LD_VAR 0 2
48802: PUSH
48803: LD_VAR 0 3
48807: ARRAY
48808: PPUSH
48809: LD_INT 3
48811: PPUSH
48812: CALL_OW 259
48816: PUSH
48817: LD_VAR 0 2
48821: PUSH
48822: LD_VAR 0 3
48826: ARRAY
48827: PPUSH
48828: CALL_OW 432
48832: MINUS
48833: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48834: LD_VAR 0 4
48838: PUSH
48839: LD_VAR 0 5
48843: PPUSH
48844: LD_INT 3
48846: PPUSH
48847: CALL_OW 259
48851: PUSH
48852: LD_VAR 0 5
48856: PPUSH
48857: CALL_OW 432
48861: MINUS
48862: GREATEREQUAL
48863: IFFALSE 48881
// mech := result [ i ] ;
48865: LD_ADDR_VAR 0 5
48869: PUSH
48870: LD_VAR 0 2
48874: PUSH
48875: LD_VAR 0 3
48879: ARRAY
48880: ST_TO_ADDR
// end ;
48881: GO 48790
48883: POP
48884: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48885: LD_VAR 0 1
48889: PPUSH
48890: LD_VAR 0 5
48894: PPUSH
48895: CALL_OW 135
// end ;
48899: LD_VAR 0 2
48903: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48904: LD_INT 0
48906: PPUSH
48907: PPUSH
48908: PPUSH
48909: PPUSH
48910: PPUSH
48911: PPUSH
48912: PPUSH
48913: PPUSH
48914: PPUSH
48915: PPUSH
48916: PPUSH
48917: PPUSH
48918: PPUSH
// result := [ ] ;
48919: LD_ADDR_VAR 0 7
48923: PUSH
48924: EMPTY
48925: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48926: LD_VAR 0 1
48930: PPUSH
48931: CALL_OW 266
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: IN
48946: NOT
48947: IFFALSE 48951
// exit ;
48949: GO 50585
// if name then
48951: LD_VAR 0 3
48955: IFFALSE 48971
// SetBName ( base_dep , name ) ;
48957: LD_VAR 0 1
48961: PPUSH
48962: LD_VAR 0 3
48966: PPUSH
48967: CALL_OW 500
// base := GetBase ( base_dep ) ;
48971: LD_ADDR_VAR 0 15
48975: PUSH
48976: LD_VAR 0 1
48980: PPUSH
48981: CALL_OW 274
48985: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48986: LD_ADDR_VAR 0 16
48990: PUSH
48991: LD_VAR 0 1
48995: PPUSH
48996: CALL_OW 255
49000: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49001: LD_ADDR_VAR 0 17
49005: PUSH
49006: LD_VAR 0 1
49010: PPUSH
49011: CALL_OW 248
49015: ST_TO_ADDR
// if sources then
49016: LD_VAR 0 5
49020: IFFALSE 49067
// for i = 1 to 3 do
49022: LD_ADDR_VAR 0 8
49026: PUSH
49027: DOUBLE
49028: LD_INT 1
49030: DEC
49031: ST_TO_ADDR
49032: LD_INT 3
49034: PUSH
49035: FOR_TO
49036: IFFALSE 49065
// AddResourceType ( base , i , sources [ i ] ) ;
49038: LD_VAR 0 15
49042: PPUSH
49043: LD_VAR 0 8
49047: PPUSH
49048: LD_VAR 0 5
49052: PUSH
49053: LD_VAR 0 8
49057: ARRAY
49058: PPUSH
49059: CALL_OW 276
49063: GO 49035
49065: POP
49066: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49067: LD_ADDR_VAR 0 18
49071: PUSH
49072: LD_VAR 0 15
49076: PPUSH
49077: LD_VAR 0 2
49081: PPUSH
49082: LD_INT 1
49084: PPUSH
49085: CALL 48328 0 3
49089: ST_TO_ADDR
// InitHc ;
49090: CALL_OW 19
// InitUc ;
49094: CALL_OW 18
// uc_side := side ;
49098: LD_ADDR_OWVAR 20
49102: PUSH
49103: LD_VAR 0 16
49107: ST_TO_ADDR
// uc_nation := nation ;
49108: LD_ADDR_OWVAR 21
49112: PUSH
49113: LD_VAR 0 17
49117: ST_TO_ADDR
// if buildings then
49118: LD_VAR 0 18
49122: IFFALSE 50444
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49124: LD_ADDR_VAR 0 19
49128: PUSH
49129: LD_VAR 0 18
49133: PPUSH
49134: LD_INT 2
49136: PUSH
49137: LD_INT 30
49139: PUSH
49140: LD_INT 29
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 30
49149: PUSH
49150: LD_INT 30
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: LIST
49161: PPUSH
49162: CALL_OW 72
49166: ST_TO_ADDR
// if tmp then
49167: LD_VAR 0 19
49171: IFFALSE 49219
// for i in tmp do
49173: LD_ADDR_VAR 0 8
49177: PUSH
49178: LD_VAR 0 19
49182: PUSH
49183: FOR_IN
49184: IFFALSE 49217
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49186: LD_VAR 0 8
49190: PPUSH
49191: CALL_OW 250
49195: PPUSH
49196: LD_VAR 0 8
49200: PPUSH
49201: CALL_OW 251
49205: PPUSH
49206: LD_VAR 0 16
49210: PPUSH
49211: CALL_OW 441
49215: GO 49183
49217: POP
49218: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49219: LD_VAR 0 18
49223: PPUSH
49224: LD_INT 2
49226: PUSH
49227: LD_INT 30
49229: PUSH
49230: LD_INT 32
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 30
49239: PUSH
49240: LD_INT 33
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: LIST
49251: PPUSH
49252: CALL_OW 72
49256: IFFALSE 49344
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49258: LD_ADDR_VAR 0 8
49262: PUSH
49263: LD_VAR 0 18
49267: PPUSH
49268: LD_INT 2
49270: PUSH
49271: LD_INT 30
49273: PUSH
49274: LD_INT 32
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 30
49283: PUSH
49284: LD_INT 33
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: LIST
49295: PPUSH
49296: CALL_OW 72
49300: PUSH
49301: FOR_IN
49302: IFFALSE 49342
// begin if not GetBWeapon ( i ) then
49304: LD_VAR 0 8
49308: PPUSH
49309: CALL_OW 269
49313: NOT
49314: IFFALSE 49340
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49316: LD_VAR 0 8
49320: PPUSH
49321: LD_VAR 0 8
49325: PPUSH
49326: LD_VAR 0 2
49330: PPUSH
49331: CALL 50590 0 2
49335: PPUSH
49336: CALL_OW 431
// end ;
49340: GO 49301
49342: POP
49343: POP
// end ; for i = 1 to personel do
49344: LD_ADDR_VAR 0 8
49348: PUSH
49349: DOUBLE
49350: LD_INT 1
49352: DEC
49353: ST_TO_ADDR
49354: LD_VAR 0 6
49358: PUSH
49359: FOR_TO
49360: IFFALSE 50424
// begin if i > 4 then
49362: LD_VAR 0 8
49366: PUSH
49367: LD_INT 4
49369: GREATER
49370: IFFALSE 49374
// break ;
49372: GO 50424
// case i of 1 :
49374: LD_VAR 0 8
49378: PUSH
49379: LD_INT 1
49381: DOUBLE
49382: EQUAL
49383: IFTRUE 49387
49385: GO 49467
49387: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49388: LD_ADDR_VAR 0 12
49392: PUSH
49393: LD_VAR 0 18
49397: PPUSH
49398: LD_INT 22
49400: PUSH
49401: LD_VAR 0 16
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 58
49412: PUSH
49413: EMPTY
49414: LIST
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: LD_INT 30
49421: PUSH
49422: LD_INT 32
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 30
49431: PUSH
49432: LD_INT 4
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 30
49441: PUSH
49442: LD_INT 5
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: PPUSH
49460: CALL_OW 72
49464: ST_TO_ADDR
49465: GO 49689
49467: LD_INT 2
49469: DOUBLE
49470: EQUAL
49471: IFTRUE 49475
49473: GO 49537
49475: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49476: LD_ADDR_VAR 0 12
49480: PUSH
49481: LD_VAR 0 18
49485: PPUSH
49486: LD_INT 22
49488: PUSH
49489: LD_VAR 0 16
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: LD_INT 30
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 30
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: LIST
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PPUSH
49530: CALL_OW 72
49534: ST_TO_ADDR
49535: GO 49689
49537: LD_INT 3
49539: DOUBLE
49540: EQUAL
49541: IFTRUE 49545
49543: GO 49607
49545: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49546: LD_ADDR_VAR 0 12
49550: PUSH
49551: LD_VAR 0 18
49555: PPUSH
49556: LD_INT 22
49558: PUSH
49559: LD_VAR 0 16
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 2
49570: PUSH
49571: LD_INT 30
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 30
49583: PUSH
49584: LD_INT 3
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: LIST
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PPUSH
49600: CALL_OW 72
49604: ST_TO_ADDR
49605: GO 49689
49607: LD_INT 4
49609: DOUBLE
49610: EQUAL
49611: IFTRUE 49615
49613: GO 49688
49615: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49616: LD_ADDR_VAR 0 12
49620: PUSH
49621: LD_VAR 0 18
49625: PPUSH
49626: LD_INT 22
49628: PUSH
49629: LD_VAR 0 16
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: LD_INT 30
49643: PUSH
49644: LD_INT 6
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 30
49653: PUSH
49654: LD_INT 7
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 30
49663: PUSH
49664: LD_INT 8
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PPUSH
49681: CALL_OW 72
49685: ST_TO_ADDR
49686: GO 49689
49688: POP
// if i = 1 then
49689: LD_VAR 0 8
49693: PUSH
49694: LD_INT 1
49696: EQUAL
49697: IFFALSE 49808
// begin tmp := [ ] ;
49699: LD_ADDR_VAR 0 19
49703: PUSH
49704: EMPTY
49705: ST_TO_ADDR
// for j in f do
49706: LD_ADDR_VAR 0 9
49710: PUSH
49711: LD_VAR 0 12
49715: PUSH
49716: FOR_IN
49717: IFFALSE 49790
// if GetBType ( j ) = b_bunker then
49719: LD_VAR 0 9
49723: PPUSH
49724: CALL_OW 266
49728: PUSH
49729: LD_INT 32
49731: EQUAL
49732: IFFALSE 49759
// tmp := Insert ( tmp , 1 , j ) else
49734: LD_ADDR_VAR 0 19
49738: PUSH
49739: LD_VAR 0 19
49743: PPUSH
49744: LD_INT 1
49746: PPUSH
49747: LD_VAR 0 9
49751: PPUSH
49752: CALL_OW 2
49756: ST_TO_ADDR
49757: GO 49788
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49759: LD_ADDR_VAR 0 19
49763: PUSH
49764: LD_VAR 0 19
49768: PPUSH
49769: LD_VAR 0 19
49773: PUSH
49774: LD_INT 1
49776: PLUS
49777: PPUSH
49778: LD_VAR 0 9
49782: PPUSH
49783: CALL_OW 2
49787: ST_TO_ADDR
49788: GO 49716
49790: POP
49791: POP
// if tmp then
49792: LD_VAR 0 19
49796: IFFALSE 49808
// f := tmp ;
49798: LD_ADDR_VAR 0 12
49802: PUSH
49803: LD_VAR 0 19
49807: ST_TO_ADDR
// end ; x := personel [ i ] ;
49808: LD_ADDR_VAR 0 13
49812: PUSH
49813: LD_VAR 0 6
49817: PUSH
49818: LD_VAR 0 8
49822: ARRAY
49823: ST_TO_ADDR
// if x = - 1 then
49824: LD_VAR 0 13
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: EQUAL
49833: IFFALSE 50042
// begin for j in f do
49835: LD_ADDR_VAR 0 9
49839: PUSH
49840: LD_VAR 0 12
49844: PUSH
49845: FOR_IN
49846: IFFALSE 50038
// repeat InitHc ;
49848: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49852: LD_VAR 0 9
49856: PPUSH
49857: CALL_OW 266
49861: PUSH
49862: LD_INT 5
49864: EQUAL
49865: IFFALSE 49935
// begin if UnitsInside ( j ) < 3 then
49867: LD_VAR 0 9
49871: PPUSH
49872: CALL_OW 313
49876: PUSH
49877: LD_INT 3
49879: LESS
49880: IFFALSE 49916
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49882: LD_INT 0
49884: PPUSH
49885: LD_INT 5
49887: PUSH
49888: LD_INT 8
49890: PUSH
49891: LD_INT 9
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: LIST
49898: PUSH
49899: LD_VAR 0 17
49903: ARRAY
49904: PPUSH
49905: LD_VAR 0 4
49909: PPUSH
49910: CALL_OW 380
49914: GO 49933
// PrepareHuman ( false , i , skill ) ;
49916: LD_INT 0
49918: PPUSH
49919: LD_VAR 0 8
49923: PPUSH
49924: LD_VAR 0 4
49928: PPUSH
49929: CALL_OW 380
// end else
49933: GO 49952
// PrepareHuman ( false , i , skill ) ;
49935: LD_INT 0
49937: PPUSH
49938: LD_VAR 0 8
49942: PPUSH
49943: LD_VAR 0 4
49947: PPUSH
49948: CALL_OW 380
// un := CreateHuman ;
49952: LD_ADDR_VAR 0 14
49956: PUSH
49957: CALL_OW 44
49961: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49962: LD_ADDR_VAR 0 7
49966: PUSH
49967: LD_VAR 0 7
49971: PPUSH
49972: LD_INT 1
49974: PPUSH
49975: LD_VAR 0 14
49979: PPUSH
49980: CALL_OW 2
49984: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49985: LD_VAR 0 14
49989: PPUSH
49990: LD_VAR 0 9
49994: PPUSH
49995: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49999: LD_VAR 0 9
50003: PPUSH
50004: CALL_OW 313
50008: PUSH
50009: LD_INT 6
50011: EQUAL
50012: PUSH
50013: LD_VAR 0 9
50017: PPUSH
50018: CALL_OW 266
50022: PUSH
50023: LD_INT 32
50025: PUSH
50026: LD_INT 31
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: IN
50033: OR
50034: IFFALSE 49848
50036: GO 49845
50038: POP
50039: POP
// end else
50040: GO 50422
// for j = 1 to x do
50042: LD_ADDR_VAR 0 9
50046: PUSH
50047: DOUBLE
50048: LD_INT 1
50050: DEC
50051: ST_TO_ADDR
50052: LD_VAR 0 13
50056: PUSH
50057: FOR_TO
50058: IFFALSE 50420
// begin InitHc ;
50060: CALL_OW 19
// if not f then
50064: LD_VAR 0 12
50068: NOT
50069: IFFALSE 50158
// begin PrepareHuman ( false , i , skill ) ;
50071: LD_INT 0
50073: PPUSH
50074: LD_VAR 0 8
50078: PPUSH
50079: LD_VAR 0 4
50083: PPUSH
50084: CALL_OW 380
// un := CreateHuman ;
50088: LD_ADDR_VAR 0 14
50092: PUSH
50093: CALL_OW 44
50097: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50098: LD_ADDR_VAR 0 7
50102: PUSH
50103: LD_VAR 0 7
50107: PPUSH
50108: LD_INT 1
50110: PPUSH
50111: LD_VAR 0 14
50115: PPUSH
50116: CALL_OW 2
50120: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50121: LD_VAR 0 14
50125: PPUSH
50126: LD_VAR 0 1
50130: PPUSH
50131: CALL_OW 250
50135: PPUSH
50136: LD_VAR 0 1
50140: PPUSH
50141: CALL_OW 251
50145: PPUSH
50146: LD_INT 10
50148: PPUSH
50149: LD_INT 0
50151: PPUSH
50152: CALL_OW 50
// continue ;
50156: GO 50057
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50158: LD_VAR 0 12
50162: PUSH
50163: LD_INT 1
50165: ARRAY
50166: PPUSH
50167: CALL_OW 313
50171: PUSH
50172: LD_VAR 0 12
50176: PUSH
50177: LD_INT 1
50179: ARRAY
50180: PPUSH
50181: CALL_OW 266
50185: PUSH
50186: LD_INT 32
50188: PUSH
50189: LD_INT 31
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: IN
50196: AND
50197: PUSH
50198: LD_VAR 0 12
50202: PUSH
50203: LD_INT 1
50205: ARRAY
50206: PPUSH
50207: CALL_OW 313
50211: PUSH
50212: LD_INT 6
50214: EQUAL
50215: OR
50216: IFFALSE 50236
// f := Delete ( f , 1 ) ;
50218: LD_ADDR_VAR 0 12
50222: PUSH
50223: LD_VAR 0 12
50227: PPUSH
50228: LD_INT 1
50230: PPUSH
50231: CALL_OW 3
50235: ST_TO_ADDR
// if not f then
50236: LD_VAR 0 12
50240: NOT
50241: IFFALSE 50259
// begin x := x + 2 ;
50243: LD_ADDR_VAR 0 13
50247: PUSH
50248: LD_VAR 0 13
50252: PUSH
50253: LD_INT 2
50255: PLUS
50256: ST_TO_ADDR
// continue ;
50257: GO 50057
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50259: LD_VAR 0 12
50263: PUSH
50264: LD_INT 1
50266: ARRAY
50267: PPUSH
50268: CALL_OW 266
50272: PUSH
50273: LD_INT 5
50275: EQUAL
50276: IFFALSE 50350
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50278: LD_VAR 0 12
50282: PUSH
50283: LD_INT 1
50285: ARRAY
50286: PPUSH
50287: CALL_OW 313
50291: PUSH
50292: LD_INT 3
50294: LESS
50295: IFFALSE 50331
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50297: LD_INT 0
50299: PPUSH
50300: LD_INT 5
50302: PUSH
50303: LD_INT 8
50305: PUSH
50306: LD_INT 9
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: LIST
50313: PUSH
50314: LD_VAR 0 17
50318: ARRAY
50319: PPUSH
50320: LD_VAR 0 4
50324: PPUSH
50325: CALL_OW 380
50329: GO 50348
// PrepareHuman ( false , i , skill ) ;
50331: LD_INT 0
50333: PPUSH
50334: LD_VAR 0 8
50338: PPUSH
50339: LD_VAR 0 4
50343: PPUSH
50344: CALL_OW 380
// end else
50348: GO 50367
// PrepareHuman ( false , i , skill ) ;
50350: LD_INT 0
50352: PPUSH
50353: LD_VAR 0 8
50357: PPUSH
50358: LD_VAR 0 4
50362: PPUSH
50363: CALL_OW 380
// un := CreateHuman ;
50367: LD_ADDR_VAR 0 14
50371: PUSH
50372: CALL_OW 44
50376: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50377: LD_ADDR_VAR 0 7
50381: PUSH
50382: LD_VAR 0 7
50386: PPUSH
50387: LD_INT 1
50389: PPUSH
50390: LD_VAR 0 14
50394: PPUSH
50395: CALL_OW 2
50399: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50400: LD_VAR 0 14
50404: PPUSH
50405: LD_VAR 0 12
50409: PUSH
50410: LD_INT 1
50412: ARRAY
50413: PPUSH
50414: CALL_OW 52
// end ;
50418: GO 50057
50420: POP
50421: POP
// end ;
50422: GO 49359
50424: POP
50425: POP
// result := result ^ buildings ;
50426: LD_ADDR_VAR 0 7
50430: PUSH
50431: LD_VAR 0 7
50435: PUSH
50436: LD_VAR 0 18
50440: ADD
50441: ST_TO_ADDR
// end else
50442: GO 50585
// begin for i = 1 to personel do
50444: LD_ADDR_VAR 0 8
50448: PUSH
50449: DOUBLE
50450: LD_INT 1
50452: DEC
50453: ST_TO_ADDR
50454: LD_VAR 0 6
50458: PUSH
50459: FOR_TO
50460: IFFALSE 50583
// begin if i > 4 then
50462: LD_VAR 0 8
50466: PUSH
50467: LD_INT 4
50469: GREATER
50470: IFFALSE 50474
// break ;
50472: GO 50583
// x := personel [ i ] ;
50474: LD_ADDR_VAR 0 13
50478: PUSH
50479: LD_VAR 0 6
50483: PUSH
50484: LD_VAR 0 8
50488: ARRAY
50489: ST_TO_ADDR
// if x = - 1 then
50490: LD_VAR 0 13
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: EQUAL
50499: IFFALSE 50503
// continue ;
50501: GO 50459
// PrepareHuman ( false , i , skill ) ;
50503: LD_INT 0
50505: PPUSH
50506: LD_VAR 0 8
50510: PPUSH
50511: LD_VAR 0 4
50515: PPUSH
50516: CALL_OW 380
// un := CreateHuman ;
50520: LD_ADDR_VAR 0 14
50524: PUSH
50525: CALL_OW 44
50529: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50530: LD_VAR 0 14
50534: PPUSH
50535: LD_VAR 0 1
50539: PPUSH
50540: CALL_OW 250
50544: PPUSH
50545: LD_VAR 0 1
50549: PPUSH
50550: CALL_OW 251
50554: PPUSH
50555: LD_INT 10
50557: PPUSH
50558: LD_INT 0
50560: PPUSH
50561: CALL_OW 50
// result := result ^ un ;
50565: LD_ADDR_VAR 0 7
50569: PUSH
50570: LD_VAR 0 7
50574: PUSH
50575: LD_VAR 0 14
50579: ADD
50580: ST_TO_ADDR
// end ;
50581: GO 50459
50583: POP
50584: POP
// end ; end ;
50585: LD_VAR 0 7
50589: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50590: LD_INT 0
50592: PPUSH
50593: PPUSH
50594: PPUSH
50595: PPUSH
50596: PPUSH
50597: PPUSH
50598: PPUSH
50599: PPUSH
50600: PPUSH
50601: PPUSH
50602: PPUSH
50603: PPUSH
50604: PPUSH
50605: PPUSH
50606: PPUSH
50607: PPUSH
// result := false ;
50608: LD_ADDR_VAR 0 3
50612: PUSH
50613: LD_INT 0
50615: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50616: LD_VAR 0 1
50620: NOT
50621: PUSH
50622: LD_VAR 0 1
50626: PPUSH
50627: CALL_OW 266
50631: PUSH
50632: LD_INT 32
50634: PUSH
50635: LD_INT 33
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: IN
50642: NOT
50643: OR
50644: IFFALSE 50648
// exit ;
50646: GO 51757
// nat := GetNation ( tower ) ;
50648: LD_ADDR_VAR 0 12
50652: PUSH
50653: LD_VAR 0 1
50657: PPUSH
50658: CALL_OW 248
50662: ST_TO_ADDR
// side := GetSide ( tower ) ;
50663: LD_ADDR_VAR 0 16
50667: PUSH
50668: LD_VAR 0 1
50672: PPUSH
50673: CALL_OW 255
50677: ST_TO_ADDR
// x := GetX ( tower ) ;
50678: LD_ADDR_VAR 0 10
50682: PUSH
50683: LD_VAR 0 1
50687: PPUSH
50688: CALL_OW 250
50692: ST_TO_ADDR
// y := GetY ( tower ) ;
50693: LD_ADDR_VAR 0 11
50697: PUSH
50698: LD_VAR 0 1
50702: PPUSH
50703: CALL_OW 251
50707: ST_TO_ADDR
// if not x or not y then
50708: LD_VAR 0 10
50712: NOT
50713: PUSH
50714: LD_VAR 0 11
50718: NOT
50719: OR
50720: IFFALSE 50724
// exit ;
50722: GO 51757
// weapon := 0 ;
50724: LD_ADDR_VAR 0 18
50728: PUSH
50729: LD_INT 0
50731: ST_TO_ADDR
// fac_list := [ ] ;
50732: LD_ADDR_VAR 0 17
50736: PUSH
50737: EMPTY
50738: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50739: LD_ADDR_VAR 0 6
50743: PUSH
50744: LD_VAR 0 1
50748: PPUSH
50749: CALL_OW 274
50753: PPUSH
50754: LD_VAR 0 2
50758: PPUSH
50759: LD_INT 0
50761: PPUSH
50762: CALL 48328 0 3
50766: PPUSH
50767: LD_INT 30
50769: PUSH
50770: LD_INT 3
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PPUSH
50777: CALL_OW 72
50781: ST_TO_ADDR
// if not factories then
50782: LD_VAR 0 6
50786: NOT
50787: IFFALSE 50791
// exit ;
50789: GO 51757
// for i in factories do
50791: LD_ADDR_VAR 0 8
50795: PUSH
50796: LD_VAR 0 6
50800: PUSH
50801: FOR_IN
50802: IFFALSE 50827
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50804: LD_ADDR_VAR 0 17
50808: PUSH
50809: LD_VAR 0 17
50813: PUSH
50814: LD_VAR 0 8
50818: PPUSH
50819: CALL_OW 478
50823: UNION
50824: ST_TO_ADDR
50825: GO 50801
50827: POP
50828: POP
// if not fac_list then
50829: LD_VAR 0 17
50833: NOT
50834: IFFALSE 50838
// exit ;
50836: GO 51757
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50838: LD_ADDR_VAR 0 5
50842: PUSH
50843: LD_INT 4
50845: PUSH
50846: LD_INT 5
50848: PUSH
50849: LD_INT 9
50851: PUSH
50852: LD_INT 10
50854: PUSH
50855: LD_INT 6
50857: PUSH
50858: LD_INT 7
50860: PUSH
50861: LD_INT 11
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 27
50875: PUSH
50876: LD_INT 28
50878: PUSH
50879: LD_INT 26
50881: PUSH
50882: LD_INT 30
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 43
50893: PUSH
50894: LD_INT 44
50896: PUSH
50897: LD_INT 46
50899: PUSH
50900: LD_INT 45
50902: PUSH
50903: LD_INT 47
50905: PUSH
50906: LD_INT 49
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: LIST
50921: PUSH
50922: LD_VAR 0 12
50926: ARRAY
50927: ST_TO_ADDR
// list := list isect fac_list ;
50928: LD_ADDR_VAR 0 5
50932: PUSH
50933: LD_VAR 0 5
50937: PUSH
50938: LD_VAR 0 17
50942: ISECT
50943: ST_TO_ADDR
// if not list then
50944: LD_VAR 0 5
50948: NOT
50949: IFFALSE 50953
// exit ;
50951: GO 51757
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50953: LD_VAR 0 12
50957: PUSH
50958: LD_INT 3
50960: EQUAL
50961: PUSH
50962: LD_INT 49
50964: PUSH
50965: LD_VAR 0 5
50969: IN
50970: AND
50971: PUSH
50972: LD_INT 31
50974: PPUSH
50975: LD_VAR 0 16
50979: PPUSH
50980: CALL_OW 321
50984: PUSH
50985: LD_INT 2
50987: EQUAL
50988: AND
50989: IFFALSE 51049
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50991: LD_INT 22
50993: PUSH
50994: LD_VAR 0 16
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 35
51005: PUSH
51006: LD_INT 49
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 91
51015: PUSH
51016: LD_VAR 0 1
51020: PUSH
51021: LD_INT 10
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: LIST
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: LIST
51033: PPUSH
51034: CALL_OW 69
51038: NOT
51039: IFFALSE 51049
// weapon := ru_time_lapser ;
51041: LD_ADDR_VAR 0 18
51045: PUSH
51046: LD_INT 49
51048: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51049: LD_VAR 0 12
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: IN
51064: PUSH
51065: LD_INT 11
51067: PUSH
51068: LD_VAR 0 5
51072: IN
51073: PUSH
51074: LD_INT 30
51076: PUSH
51077: LD_VAR 0 5
51081: IN
51082: OR
51083: AND
51084: PUSH
51085: LD_INT 6
51087: PPUSH
51088: LD_VAR 0 16
51092: PPUSH
51093: CALL_OW 321
51097: PUSH
51098: LD_INT 2
51100: EQUAL
51101: AND
51102: IFFALSE 51267
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51104: LD_INT 22
51106: PUSH
51107: LD_VAR 0 16
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: LD_INT 35
51121: PUSH
51122: LD_INT 11
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 35
51131: PUSH
51132: LD_INT 30
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 91
51146: PUSH
51147: LD_VAR 0 1
51151: PUSH
51152: LD_INT 18
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: LIST
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: LIST
51164: PPUSH
51165: CALL_OW 69
51169: NOT
51170: PUSH
51171: LD_INT 22
51173: PUSH
51174: LD_VAR 0 16
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: LD_INT 30
51188: PUSH
51189: LD_INT 32
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 30
51198: PUSH
51199: LD_INT 33
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 91
51213: PUSH
51214: LD_VAR 0 1
51218: PUSH
51219: LD_INT 12
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: LIST
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: LIST
51231: PUSH
51232: EMPTY
51233: LIST
51234: PPUSH
51235: CALL_OW 69
51239: PUSH
51240: LD_INT 2
51242: GREATER
51243: AND
51244: IFFALSE 51267
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51246: LD_ADDR_VAR 0 18
51250: PUSH
51251: LD_INT 11
51253: PUSH
51254: LD_INT 30
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_VAR 0 12
51265: ARRAY
51266: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51267: LD_VAR 0 18
51271: NOT
51272: PUSH
51273: LD_INT 40
51275: PPUSH
51276: LD_VAR 0 16
51280: PPUSH
51281: CALL_OW 321
51285: PUSH
51286: LD_INT 2
51288: EQUAL
51289: AND
51290: PUSH
51291: LD_INT 7
51293: PUSH
51294: LD_VAR 0 5
51298: IN
51299: PUSH
51300: LD_INT 28
51302: PUSH
51303: LD_VAR 0 5
51307: IN
51308: OR
51309: PUSH
51310: LD_INT 45
51312: PUSH
51313: LD_VAR 0 5
51317: IN
51318: OR
51319: AND
51320: IFFALSE 51574
// begin hex := GetHexInfo ( x , y ) ;
51322: LD_ADDR_VAR 0 4
51326: PUSH
51327: LD_VAR 0 10
51331: PPUSH
51332: LD_VAR 0 11
51336: PPUSH
51337: CALL_OW 546
51341: ST_TO_ADDR
// if hex [ 1 ] then
51342: LD_VAR 0 4
51346: PUSH
51347: LD_INT 1
51349: ARRAY
51350: IFFALSE 51354
// exit ;
51352: GO 51757
// height := hex [ 2 ] ;
51354: LD_ADDR_VAR 0 15
51358: PUSH
51359: LD_VAR 0 4
51363: PUSH
51364: LD_INT 2
51366: ARRAY
51367: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51368: LD_ADDR_VAR 0 14
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: LD_INT 3
51381: PUSH
51382: LD_INT 5
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: ST_TO_ADDR
// for i in tmp do
51391: LD_ADDR_VAR 0 8
51395: PUSH
51396: LD_VAR 0 14
51400: PUSH
51401: FOR_IN
51402: IFFALSE 51572
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51404: LD_ADDR_VAR 0 9
51408: PUSH
51409: LD_VAR 0 10
51413: PPUSH
51414: LD_VAR 0 8
51418: PPUSH
51419: LD_INT 5
51421: PPUSH
51422: CALL_OW 272
51426: PUSH
51427: LD_VAR 0 11
51431: PPUSH
51432: LD_VAR 0 8
51436: PPUSH
51437: LD_INT 5
51439: PPUSH
51440: CALL_OW 273
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51449: LD_VAR 0 9
51453: PUSH
51454: LD_INT 1
51456: ARRAY
51457: PPUSH
51458: LD_VAR 0 9
51462: PUSH
51463: LD_INT 2
51465: ARRAY
51466: PPUSH
51467: CALL_OW 488
51471: IFFALSE 51570
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51473: LD_ADDR_VAR 0 4
51477: PUSH
51478: LD_VAR 0 9
51482: PUSH
51483: LD_INT 1
51485: ARRAY
51486: PPUSH
51487: LD_VAR 0 9
51491: PUSH
51492: LD_INT 2
51494: ARRAY
51495: PPUSH
51496: CALL_OW 546
51500: ST_TO_ADDR
// if hex [ 1 ] then
51501: LD_VAR 0 4
51505: PUSH
51506: LD_INT 1
51508: ARRAY
51509: IFFALSE 51513
// continue ;
51511: GO 51401
// h := hex [ 2 ] ;
51513: LD_ADDR_VAR 0 13
51517: PUSH
51518: LD_VAR 0 4
51522: PUSH
51523: LD_INT 2
51525: ARRAY
51526: ST_TO_ADDR
// if h + 7 < height then
51527: LD_VAR 0 13
51531: PUSH
51532: LD_INT 7
51534: PLUS
51535: PUSH
51536: LD_VAR 0 15
51540: LESS
51541: IFFALSE 51570
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51543: LD_ADDR_VAR 0 18
51547: PUSH
51548: LD_INT 7
51550: PUSH
51551: LD_INT 28
51553: PUSH
51554: LD_INT 45
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: LIST
51561: PUSH
51562: LD_VAR 0 12
51566: ARRAY
51567: ST_TO_ADDR
// break ;
51568: GO 51572
// end ; end ; end ;
51570: GO 51401
51572: POP
51573: POP
// end ; if not weapon then
51574: LD_VAR 0 18
51578: NOT
51579: IFFALSE 51639
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51581: LD_ADDR_VAR 0 5
51585: PUSH
51586: LD_VAR 0 5
51590: PUSH
51591: LD_INT 11
51593: PUSH
51594: LD_INT 30
51596: PUSH
51597: LD_INT 49
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: LIST
51604: DIFF
51605: ST_TO_ADDR
// if not list then
51606: LD_VAR 0 5
51610: NOT
51611: IFFALSE 51615
// exit ;
51613: GO 51757
// weapon := list [ rand ( 1 , list ) ] ;
51615: LD_ADDR_VAR 0 18
51619: PUSH
51620: LD_VAR 0 5
51624: PUSH
51625: LD_INT 1
51627: PPUSH
51628: LD_VAR 0 5
51632: PPUSH
51633: CALL_OW 12
51637: ARRAY
51638: ST_TO_ADDR
// end ; if weapon then
51639: LD_VAR 0 18
51643: IFFALSE 51757
// begin tmp := CostOfWeapon ( weapon ) ;
51645: LD_ADDR_VAR 0 14
51649: PUSH
51650: LD_VAR 0 18
51654: PPUSH
51655: CALL_OW 451
51659: ST_TO_ADDR
// j := GetBase ( tower ) ;
51660: LD_ADDR_VAR 0 9
51664: PUSH
51665: LD_VAR 0 1
51669: PPUSH
51670: CALL_OW 274
51674: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51675: LD_VAR 0 9
51679: PPUSH
51680: LD_INT 1
51682: PPUSH
51683: CALL_OW 275
51687: PUSH
51688: LD_VAR 0 14
51692: PUSH
51693: LD_INT 1
51695: ARRAY
51696: GREATEREQUAL
51697: PUSH
51698: LD_VAR 0 9
51702: PPUSH
51703: LD_INT 2
51705: PPUSH
51706: CALL_OW 275
51710: PUSH
51711: LD_VAR 0 14
51715: PUSH
51716: LD_INT 2
51718: ARRAY
51719: GREATEREQUAL
51720: AND
51721: PUSH
51722: LD_VAR 0 9
51726: PPUSH
51727: LD_INT 3
51729: PPUSH
51730: CALL_OW 275
51734: PUSH
51735: LD_VAR 0 14
51739: PUSH
51740: LD_INT 3
51742: ARRAY
51743: GREATEREQUAL
51744: AND
51745: IFFALSE 51757
// result := weapon ;
51747: LD_ADDR_VAR 0 3
51751: PUSH
51752: LD_VAR 0 18
51756: ST_TO_ADDR
// end ; end ;
51757: LD_VAR 0 3
51761: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51762: LD_INT 0
51764: PPUSH
51765: PPUSH
// result := true ;
51766: LD_ADDR_VAR 0 3
51770: PUSH
51771: LD_INT 1
51773: ST_TO_ADDR
// if array1 = array2 then
51774: LD_VAR 0 1
51778: PUSH
51779: LD_VAR 0 2
51783: EQUAL
51784: IFFALSE 51844
// begin for i = 1 to array1 do
51786: LD_ADDR_VAR 0 4
51790: PUSH
51791: DOUBLE
51792: LD_INT 1
51794: DEC
51795: ST_TO_ADDR
51796: LD_VAR 0 1
51800: PUSH
51801: FOR_TO
51802: IFFALSE 51840
// if array1 [ i ] <> array2 [ i ] then
51804: LD_VAR 0 1
51808: PUSH
51809: LD_VAR 0 4
51813: ARRAY
51814: PUSH
51815: LD_VAR 0 2
51819: PUSH
51820: LD_VAR 0 4
51824: ARRAY
51825: NONEQUAL
51826: IFFALSE 51838
// begin result := false ;
51828: LD_ADDR_VAR 0 3
51832: PUSH
51833: LD_INT 0
51835: ST_TO_ADDR
// break ;
51836: GO 51840
// end ;
51838: GO 51801
51840: POP
51841: POP
// end else
51842: GO 51852
// result := false ;
51844: LD_ADDR_VAR 0 3
51848: PUSH
51849: LD_INT 0
51851: ST_TO_ADDR
// end ;
51852: LD_VAR 0 3
51856: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51857: LD_INT 0
51859: PPUSH
51860: PPUSH
// if not array1 or not array2 then
51861: LD_VAR 0 1
51865: NOT
51866: PUSH
51867: LD_VAR 0 2
51871: NOT
51872: OR
51873: IFFALSE 51877
// exit ;
51875: GO 51941
// result := true ;
51877: LD_ADDR_VAR 0 3
51881: PUSH
51882: LD_INT 1
51884: ST_TO_ADDR
// for i = 1 to array1 do
51885: LD_ADDR_VAR 0 4
51889: PUSH
51890: DOUBLE
51891: LD_INT 1
51893: DEC
51894: ST_TO_ADDR
51895: LD_VAR 0 1
51899: PUSH
51900: FOR_TO
51901: IFFALSE 51939
// if array1 [ i ] <> array2 [ i ] then
51903: LD_VAR 0 1
51907: PUSH
51908: LD_VAR 0 4
51912: ARRAY
51913: PUSH
51914: LD_VAR 0 2
51918: PUSH
51919: LD_VAR 0 4
51923: ARRAY
51924: NONEQUAL
51925: IFFALSE 51937
// begin result := false ;
51927: LD_ADDR_VAR 0 3
51931: PUSH
51932: LD_INT 0
51934: ST_TO_ADDR
// break ;
51935: GO 51939
// end ;
51937: GO 51900
51939: POP
51940: POP
// end ;
51941: LD_VAR 0 3
51945: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51946: LD_INT 0
51948: PPUSH
51949: PPUSH
51950: PPUSH
// pom := GetBase ( fac ) ;
51951: LD_ADDR_VAR 0 5
51955: PUSH
51956: LD_VAR 0 1
51960: PPUSH
51961: CALL_OW 274
51965: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51966: LD_ADDR_VAR 0 4
51970: PUSH
51971: LD_VAR 0 2
51975: PUSH
51976: LD_INT 1
51978: ARRAY
51979: PPUSH
51980: LD_VAR 0 2
51984: PUSH
51985: LD_INT 2
51987: ARRAY
51988: PPUSH
51989: LD_VAR 0 2
51993: PUSH
51994: LD_INT 3
51996: ARRAY
51997: PPUSH
51998: LD_VAR 0 2
52002: PUSH
52003: LD_INT 4
52005: ARRAY
52006: PPUSH
52007: CALL_OW 449
52011: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52012: LD_ADDR_VAR 0 3
52016: PUSH
52017: LD_VAR 0 5
52021: PPUSH
52022: LD_INT 1
52024: PPUSH
52025: CALL_OW 275
52029: PUSH
52030: LD_VAR 0 4
52034: PUSH
52035: LD_INT 1
52037: ARRAY
52038: GREATEREQUAL
52039: PUSH
52040: LD_VAR 0 5
52044: PPUSH
52045: LD_INT 2
52047: PPUSH
52048: CALL_OW 275
52052: PUSH
52053: LD_VAR 0 4
52057: PUSH
52058: LD_INT 2
52060: ARRAY
52061: GREATEREQUAL
52062: AND
52063: PUSH
52064: LD_VAR 0 5
52068: PPUSH
52069: LD_INT 3
52071: PPUSH
52072: CALL_OW 275
52076: PUSH
52077: LD_VAR 0 4
52081: PUSH
52082: LD_INT 3
52084: ARRAY
52085: GREATEREQUAL
52086: AND
52087: ST_TO_ADDR
// end ;
52088: LD_VAR 0 3
52092: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52093: LD_INT 0
52095: PPUSH
52096: PPUSH
52097: PPUSH
52098: PPUSH
// pom := GetBase ( building ) ;
52099: LD_ADDR_VAR 0 3
52103: PUSH
52104: LD_VAR 0 1
52108: PPUSH
52109: CALL_OW 274
52113: ST_TO_ADDR
// if not pom then
52114: LD_VAR 0 3
52118: NOT
52119: IFFALSE 52123
// exit ;
52121: GO 52293
// btype := GetBType ( building ) ;
52123: LD_ADDR_VAR 0 5
52127: PUSH
52128: LD_VAR 0 1
52132: PPUSH
52133: CALL_OW 266
52137: ST_TO_ADDR
// if btype = b_armoury then
52138: LD_VAR 0 5
52142: PUSH
52143: LD_INT 4
52145: EQUAL
52146: IFFALSE 52156
// btype := b_barracks ;
52148: LD_ADDR_VAR 0 5
52152: PUSH
52153: LD_INT 5
52155: ST_TO_ADDR
// if btype = b_depot then
52156: LD_VAR 0 5
52160: PUSH
52161: LD_INT 0
52163: EQUAL
52164: IFFALSE 52174
// btype := b_warehouse ;
52166: LD_ADDR_VAR 0 5
52170: PUSH
52171: LD_INT 1
52173: ST_TO_ADDR
// if btype = b_workshop then
52174: LD_VAR 0 5
52178: PUSH
52179: LD_INT 2
52181: EQUAL
52182: IFFALSE 52192
// btype := b_factory ;
52184: LD_ADDR_VAR 0 5
52188: PUSH
52189: LD_INT 3
52191: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52192: LD_ADDR_VAR 0 4
52196: PUSH
52197: LD_VAR 0 5
52201: PPUSH
52202: LD_VAR 0 1
52206: PPUSH
52207: CALL_OW 248
52211: PPUSH
52212: CALL_OW 450
52216: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52217: LD_ADDR_VAR 0 2
52221: PUSH
52222: LD_VAR 0 3
52226: PPUSH
52227: LD_INT 1
52229: PPUSH
52230: CALL_OW 275
52234: PUSH
52235: LD_VAR 0 4
52239: PUSH
52240: LD_INT 1
52242: ARRAY
52243: GREATEREQUAL
52244: PUSH
52245: LD_VAR 0 3
52249: PPUSH
52250: LD_INT 2
52252: PPUSH
52253: CALL_OW 275
52257: PUSH
52258: LD_VAR 0 4
52262: PUSH
52263: LD_INT 2
52265: ARRAY
52266: GREATEREQUAL
52267: AND
52268: PUSH
52269: LD_VAR 0 3
52273: PPUSH
52274: LD_INT 3
52276: PPUSH
52277: CALL_OW 275
52281: PUSH
52282: LD_VAR 0 4
52286: PUSH
52287: LD_INT 3
52289: ARRAY
52290: GREATEREQUAL
52291: AND
52292: ST_TO_ADDR
// end ;
52293: LD_VAR 0 2
52297: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52298: LD_INT 0
52300: PPUSH
52301: PPUSH
52302: PPUSH
// pom := GetBase ( building ) ;
52303: LD_ADDR_VAR 0 4
52307: PUSH
52308: LD_VAR 0 1
52312: PPUSH
52313: CALL_OW 274
52317: ST_TO_ADDR
// if not pom then
52318: LD_VAR 0 4
52322: NOT
52323: IFFALSE 52327
// exit ;
52325: GO 52428
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52327: LD_ADDR_VAR 0 5
52331: PUSH
52332: LD_VAR 0 2
52336: PPUSH
52337: LD_VAR 0 1
52341: PPUSH
52342: CALL_OW 248
52346: PPUSH
52347: CALL_OW 450
52351: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52352: LD_ADDR_VAR 0 3
52356: PUSH
52357: LD_VAR 0 4
52361: PPUSH
52362: LD_INT 1
52364: PPUSH
52365: CALL_OW 275
52369: PUSH
52370: LD_VAR 0 5
52374: PUSH
52375: LD_INT 1
52377: ARRAY
52378: GREATEREQUAL
52379: PUSH
52380: LD_VAR 0 4
52384: PPUSH
52385: LD_INT 2
52387: PPUSH
52388: CALL_OW 275
52392: PUSH
52393: LD_VAR 0 5
52397: PUSH
52398: LD_INT 2
52400: ARRAY
52401: GREATEREQUAL
52402: AND
52403: PUSH
52404: LD_VAR 0 4
52408: PPUSH
52409: LD_INT 3
52411: PPUSH
52412: CALL_OW 275
52416: PUSH
52417: LD_VAR 0 5
52421: PUSH
52422: LD_INT 3
52424: ARRAY
52425: GREATEREQUAL
52426: AND
52427: ST_TO_ADDR
// end ;
52428: LD_VAR 0 3
52432: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52433: LD_INT 0
52435: PPUSH
52436: PPUSH
52437: PPUSH
52438: PPUSH
52439: PPUSH
52440: PPUSH
52441: PPUSH
52442: PPUSH
52443: PPUSH
52444: PPUSH
52445: PPUSH
// result := false ;
52446: LD_ADDR_VAR 0 8
52450: PUSH
52451: LD_INT 0
52453: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52454: LD_VAR 0 5
52458: NOT
52459: PUSH
52460: LD_VAR 0 1
52464: NOT
52465: OR
52466: PUSH
52467: LD_VAR 0 2
52471: NOT
52472: OR
52473: PUSH
52474: LD_VAR 0 3
52478: NOT
52479: OR
52480: IFFALSE 52484
// exit ;
52482: GO 53298
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52484: LD_ADDR_VAR 0 14
52488: PUSH
52489: LD_VAR 0 1
52493: PPUSH
52494: LD_VAR 0 2
52498: PPUSH
52499: LD_VAR 0 3
52503: PPUSH
52504: LD_VAR 0 4
52508: PPUSH
52509: LD_VAR 0 5
52513: PUSH
52514: LD_INT 1
52516: ARRAY
52517: PPUSH
52518: CALL_OW 248
52522: PPUSH
52523: LD_INT 0
52525: PPUSH
52526: CALL 54551 0 6
52530: ST_TO_ADDR
// if not hexes then
52531: LD_VAR 0 14
52535: NOT
52536: IFFALSE 52540
// exit ;
52538: GO 53298
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52540: LD_ADDR_VAR 0 17
52544: PUSH
52545: LD_VAR 0 5
52549: PPUSH
52550: LD_INT 22
52552: PUSH
52553: LD_VAR 0 13
52557: PPUSH
52558: CALL_OW 255
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: PUSH
52570: LD_INT 30
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 30
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: LIST
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PPUSH
52599: CALL_OW 72
52603: ST_TO_ADDR
// for i = 1 to hexes do
52604: LD_ADDR_VAR 0 9
52608: PUSH
52609: DOUBLE
52610: LD_INT 1
52612: DEC
52613: ST_TO_ADDR
52614: LD_VAR 0 14
52618: PUSH
52619: FOR_TO
52620: IFFALSE 53296
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52622: LD_ADDR_VAR 0 13
52626: PUSH
52627: LD_VAR 0 14
52631: PUSH
52632: LD_VAR 0 9
52636: ARRAY
52637: PUSH
52638: LD_INT 1
52640: ARRAY
52641: PPUSH
52642: LD_VAR 0 14
52646: PUSH
52647: LD_VAR 0 9
52651: ARRAY
52652: PUSH
52653: LD_INT 2
52655: ARRAY
52656: PPUSH
52657: CALL_OW 428
52661: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52662: LD_VAR 0 14
52666: PUSH
52667: LD_VAR 0 9
52671: ARRAY
52672: PUSH
52673: LD_INT 1
52675: ARRAY
52676: PPUSH
52677: LD_VAR 0 14
52681: PUSH
52682: LD_VAR 0 9
52686: ARRAY
52687: PUSH
52688: LD_INT 2
52690: ARRAY
52691: PPUSH
52692: CALL_OW 351
52696: PUSH
52697: LD_VAR 0 14
52701: PUSH
52702: LD_VAR 0 9
52706: ARRAY
52707: PUSH
52708: LD_INT 1
52710: ARRAY
52711: PPUSH
52712: LD_VAR 0 14
52716: PUSH
52717: LD_VAR 0 9
52721: ARRAY
52722: PUSH
52723: LD_INT 2
52725: ARRAY
52726: PPUSH
52727: CALL_OW 488
52731: NOT
52732: OR
52733: PUSH
52734: LD_VAR 0 13
52738: PPUSH
52739: CALL_OW 247
52743: PUSH
52744: LD_INT 3
52746: EQUAL
52747: OR
52748: IFFALSE 52754
// exit ;
52750: POP
52751: POP
52752: GO 53298
// if not tmp then
52754: LD_VAR 0 13
52758: NOT
52759: IFFALSE 52763
// continue ;
52761: GO 52619
// result := true ;
52763: LD_ADDR_VAR 0 8
52767: PUSH
52768: LD_INT 1
52770: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52771: LD_VAR 0 6
52775: PUSH
52776: LD_VAR 0 13
52780: PPUSH
52781: CALL_OW 247
52785: PUSH
52786: LD_INT 2
52788: EQUAL
52789: AND
52790: PUSH
52791: LD_VAR 0 13
52795: PPUSH
52796: CALL_OW 263
52800: PUSH
52801: LD_INT 1
52803: EQUAL
52804: AND
52805: IFFALSE 52969
// begin if IsDrivenBy ( tmp ) then
52807: LD_VAR 0 13
52811: PPUSH
52812: CALL_OW 311
52816: IFFALSE 52820
// continue ;
52818: GO 52619
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52820: LD_VAR 0 6
52824: PPUSH
52825: LD_INT 3
52827: PUSH
52828: LD_INT 60
52830: PUSH
52831: EMPTY
52832: LIST
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 3
52840: PUSH
52841: LD_INT 55
52843: PUSH
52844: EMPTY
52845: LIST
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PPUSH
52855: CALL_OW 72
52859: IFFALSE 52967
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52861: LD_ADDR_VAR 0 18
52865: PUSH
52866: LD_VAR 0 6
52870: PPUSH
52871: LD_INT 3
52873: PUSH
52874: LD_INT 60
52876: PUSH
52877: EMPTY
52878: LIST
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 3
52886: PUSH
52887: LD_INT 55
52889: PUSH
52890: EMPTY
52891: LIST
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PPUSH
52901: CALL_OW 72
52905: PUSH
52906: LD_INT 1
52908: ARRAY
52909: ST_TO_ADDR
// if IsInUnit ( driver ) then
52910: LD_VAR 0 18
52914: PPUSH
52915: CALL_OW 310
52919: IFFALSE 52930
// ComExit ( driver ) ;
52921: LD_VAR 0 18
52925: PPUSH
52926: CALL 78343 0 1
// AddComEnterUnit ( driver , tmp ) ;
52930: LD_VAR 0 18
52934: PPUSH
52935: LD_VAR 0 13
52939: PPUSH
52940: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52944: LD_VAR 0 18
52948: PPUSH
52949: LD_VAR 0 7
52953: PPUSH
52954: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52958: LD_VAR 0 18
52962: PPUSH
52963: CALL_OW 181
// end ; continue ;
52967: GO 52619
// end ; if not cleaners or not tmp in cleaners then
52969: LD_VAR 0 6
52973: NOT
52974: PUSH
52975: LD_VAR 0 13
52979: PUSH
52980: LD_VAR 0 6
52984: IN
52985: NOT
52986: OR
52987: IFFALSE 53294
// begin if dep then
52989: LD_VAR 0 17
52993: IFFALSE 53129
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52995: LD_ADDR_VAR 0 16
52999: PUSH
53000: LD_VAR 0 17
53004: PUSH
53005: LD_INT 1
53007: ARRAY
53008: PPUSH
53009: CALL_OW 250
53013: PPUSH
53014: LD_VAR 0 17
53018: PUSH
53019: LD_INT 1
53021: ARRAY
53022: PPUSH
53023: CALL_OW 254
53027: PPUSH
53028: LD_INT 5
53030: PPUSH
53031: CALL_OW 272
53035: PUSH
53036: LD_VAR 0 17
53040: PUSH
53041: LD_INT 1
53043: ARRAY
53044: PPUSH
53045: CALL_OW 251
53049: PPUSH
53050: LD_VAR 0 17
53054: PUSH
53055: LD_INT 1
53057: ARRAY
53058: PPUSH
53059: CALL_OW 254
53063: PPUSH
53064: LD_INT 5
53066: PPUSH
53067: CALL_OW 273
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53076: LD_VAR 0 16
53080: PUSH
53081: LD_INT 1
53083: ARRAY
53084: PPUSH
53085: LD_VAR 0 16
53089: PUSH
53090: LD_INT 2
53092: ARRAY
53093: PPUSH
53094: CALL_OW 488
53098: IFFALSE 53129
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53100: LD_VAR 0 13
53104: PPUSH
53105: LD_VAR 0 16
53109: PUSH
53110: LD_INT 1
53112: ARRAY
53113: PPUSH
53114: LD_VAR 0 16
53118: PUSH
53119: LD_INT 2
53121: ARRAY
53122: PPUSH
53123: CALL_OW 111
// continue ;
53127: GO 52619
// end ; end ; r := GetDir ( tmp ) ;
53129: LD_ADDR_VAR 0 15
53133: PUSH
53134: LD_VAR 0 13
53138: PPUSH
53139: CALL_OW 254
53143: ST_TO_ADDR
// if r = 5 then
53144: LD_VAR 0 15
53148: PUSH
53149: LD_INT 5
53151: EQUAL
53152: IFFALSE 53162
// r := 0 ;
53154: LD_ADDR_VAR 0 15
53158: PUSH
53159: LD_INT 0
53161: ST_TO_ADDR
// for j = r to 5 do
53162: LD_ADDR_VAR 0 10
53166: PUSH
53167: DOUBLE
53168: LD_VAR 0 15
53172: DEC
53173: ST_TO_ADDR
53174: LD_INT 5
53176: PUSH
53177: FOR_TO
53178: IFFALSE 53292
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53180: LD_ADDR_VAR 0 11
53184: PUSH
53185: LD_VAR 0 13
53189: PPUSH
53190: CALL_OW 250
53194: PPUSH
53195: LD_VAR 0 10
53199: PPUSH
53200: LD_INT 2
53202: PPUSH
53203: CALL_OW 272
53207: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53208: LD_ADDR_VAR 0 12
53212: PUSH
53213: LD_VAR 0 13
53217: PPUSH
53218: CALL_OW 251
53222: PPUSH
53223: LD_VAR 0 10
53227: PPUSH
53228: LD_INT 2
53230: PPUSH
53231: CALL_OW 273
53235: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53236: LD_VAR 0 11
53240: PPUSH
53241: LD_VAR 0 12
53245: PPUSH
53246: CALL_OW 488
53250: PUSH
53251: LD_VAR 0 11
53255: PPUSH
53256: LD_VAR 0 12
53260: PPUSH
53261: CALL_OW 428
53265: NOT
53266: AND
53267: IFFALSE 53290
// begin ComMoveXY ( tmp , _x , _y ) ;
53269: LD_VAR 0 13
53273: PPUSH
53274: LD_VAR 0 11
53278: PPUSH
53279: LD_VAR 0 12
53283: PPUSH
53284: CALL_OW 111
// break ;
53288: GO 53292
// end ; end ;
53290: GO 53177
53292: POP
53293: POP
// end ; end ;
53294: GO 52619
53296: POP
53297: POP
// end ;
53298: LD_VAR 0 8
53302: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53303: LD_INT 0
53305: PPUSH
// result := true ;
53306: LD_ADDR_VAR 0 3
53310: PUSH
53311: LD_INT 1
53313: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53314: LD_VAR 0 2
53318: PUSH
53319: LD_INT 24
53321: DOUBLE
53322: EQUAL
53323: IFTRUE 53333
53325: LD_INT 33
53327: DOUBLE
53328: EQUAL
53329: IFTRUE 53333
53331: GO 53358
53333: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53334: LD_ADDR_VAR 0 3
53338: PUSH
53339: LD_INT 32
53341: PPUSH
53342: LD_VAR 0 1
53346: PPUSH
53347: CALL_OW 321
53351: PUSH
53352: LD_INT 2
53354: EQUAL
53355: ST_TO_ADDR
53356: GO 53674
53358: LD_INT 20
53360: DOUBLE
53361: EQUAL
53362: IFTRUE 53366
53364: GO 53391
53366: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53367: LD_ADDR_VAR 0 3
53371: PUSH
53372: LD_INT 6
53374: PPUSH
53375: LD_VAR 0 1
53379: PPUSH
53380: CALL_OW 321
53384: PUSH
53385: LD_INT 2
53387: EQUAL
53388: ST_TO_ADDR
53389: GO 53674
53391: LD_INT 22
53393: DOUBLE
53394: EQUAL
53395: IFTRUE 53405
53397: LD_INT 36
53399: DOUBLE
53400: EQUAL
53401: IFTRUE 53405
53403: GO 53430
53405: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53406: LD_ADDR_VAR 0 3
53410: PUSH
53411: LD_INT 15
53413: PPUSH
53414: LD_VAR 0 1
53418: PPUSH
53419: CALL_OW 321
53423: PUSH
53424: LD_INT 2
53426: EQUAL
53427: ST_TO_ADDR
53428: GO 53674
53430: LD_INT 30
53432: DOUBLE
53433: EQUAL
53434: IFTRUE 53438
53436: GO 53463
53438: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53439: LD_ADDR_VAR 0 3
53443: PUSH
53444: LD_INT 20
53446: PPUSH
53447: LD_VAR 0 1
53451: PPUSH
53452: CALL_OW 321
53456: PUSH
53457: LD_INT 2
53459: EQUAL
53460: ST_TO_ADDR
53461: GO 53674
53463: LD_INT 28
53465: DOUBLE
53466: EQUAL
53467: IFTRUE 53477
53469: LD_INT 21
53471: DOUBLE
53472: EQUAL
53473: IFTRUE 53477
53475: GO 53502
53477: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53478: LD_ADDR_VAR 0 3
53482: PUSH
53483: LD_INT 21
53485: PPUSH
53486: LD_VAR 0 1
53490: PPUSH
53491: CALL_OW 321
53495: PUSH
53496: LD_INT 2
53498: EQUAL
53499: ST_TO_ADDR
53500: GO 53674
53502: LD_INT 16
53504: DOUBLE
53505: EQUAL
53506: IFTRUE 53510
53508: GO 53535
53510: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53511: LD_ADDR_VAR 0 3
53515: PUSH
53516: LD_INT 84
53518: PPUSH
53519: LD_VAR 0 1
53523: PPUSH
53524: CALL_OW 321
53528: PUSH
53529: LD_INT 2
53531: EQUAL
53532: ST_TO_ADDR
53533: GO 53674
53535: LD_INT 19
53537: DOUBLE
53538: EQUAL
53539: IFTRUE 53549
53541: LD_INT 23
53543: DOUBLE
53544: EQUAL
53545: IFTRUE 53549
53547: GO 53574
53549: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53550: LD_ADDR_VAR 0 3
53554: PUSH
53555: LD_INT 83
53557: PPUSH
53558: LD_VAR 0 1
53562: PPUSH
53563: CALL_OW 321
53567: PUSH
53568: LD_INT 2
53570: EQUAL
53571: ST_TO_ADDR
53572: GO 53674
53574: LD_INT 17
53576: DOUBLE
53577: EQUAL
53578: IFTRUE 53582
53580: GO 53607
53582: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53583: LD_ADDR_VAR 0 3
53587: PUSH
53588: LD_INT 39
53590: PPUSH
53591: LD_VAR 0 1
53595: PPUSH
53596: CALL_OW 321
53600: PUSH
53601: LD_INT 2
53603: EQUAL
53604: ST_TO_ADDR
53605: GO 53674
53607: LD_INT 18
53609: DOUBLE
53610: EQUAL
53611: IFTRUE 53615
53613: GO 53640
53615: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53616: LD_ADDR_VAR 0 3
53620: PUSH
53621: LD_INT 40
53623: PPUSH
53624: LD_VAR 0 1
53628: PPUSH
53629: CALL_OW 321
53633: PUSH
53634: LD_INT 2
53636: EQUAL
53637: ST_TO_ADDR
53638: GO 53674
53640: LD_INT 27
53642: DOUBLE
53643: EQUAL
53644: IFTRUE 53648
53646: GO 53673
53648: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53649: LD_ADDR_VAR 0 3
53653: PUSH
53654: LD_INT 35
53656: PPUSH
53657: LD_VAR 0 1
53661: PPUSH
53662: CALL_OW 321
53666: PUSH
53667: LD_INT 2
53669: EQUAL
53670: ST_TO_ADDR
53671: GO 53674
53673: POP
// end ;
53674: LD_VAR 0 3
53678: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53679: LD_INT 0
53681: PPUSH
53682: PPUSH
53683: PPUSH
53684: PPUSH
53685: PPUSH
53686: PPUSH
53687: PPUSH
53688: PPUSH
53689: PPUSH
53690: PPUSH
53691: PPUSH
// result := false ;
53692: LD_ADDR_VAR 0 6
53696: PUSH
53697: LD_INT 0
53699: ST_TO_ADDR
// if btype = b_depot then
53700: LD_VAR 0 2
53704: PUSH
53705: LD_INT 0
53707: EQUAL
53708: IFFALSE 53720
// begin result := true ;
53710: LD_ADDR_VAR 0 6
53714: PUSH
53715: LD_INT 1
53717: ST_TO_ADDR
// exit ;
53718: GO 54546
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53720: LD_VAR 0 1
53724: NOT
53725: PUSH
53726: LD_VAR 0 1
53730: PPUSH
53731: CALL_OW 266
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: IN
53746: NOT
53747: OR
53748: PUSH
53749: LD_VAR 0 2
53753: NOT
53754: OR
53755: PUSH
53756: LD_VAR 0 5
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: LD_INT 2
53769: PUSH
53770: LD_INT 3
53772: PUSH
53773: LD_INT 4
53775: PUSH
53776: LD_INT 5
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: IN
53787: NOT
53788: OR
53789: PUSH
53790: LD_VAR 0 3
53794: PPUSH
53795: LD_VAR 0 4
53799: PPUSH
53800: CALL_OW 488
53804: NOT
53805: OR
53806: IFFALSE 53810
// exit ;
53808: GO 54546
// side := GetSide ( depot ) ;
53810: LD_ADDR_VAR 0 9
53814: PUSH
53815: LD_VAR 0 1
53819: PPUSH
53820: CALL_OW 255
53824: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53825: LD_VAR 0 9
53829: PPUSH
53830: LD_VAR 0 2
53834: PPUSH
53835: CALL 53303 0 2
53839: NOT
53840: IFFALSE 53844
// exit ;
53842: GO 54546
// pom := GetBase ( depot ) ;
53844: LD_ADDR_VAR 0 10
53848: PUSH
53849: LD_VAR 0 1
53853: PPUSH
53854: CALL_OW 274
53858: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53859: LD_ADDR_VAR 0 11
53863: PUSH
53864: LD_VAR 0 2
53868: PPUSH
53869: LD_VAR 0 1
53873: PPUSH
53874: CALL_OW 248
53878: PPUSH
53879: CALL_OW 450
53883: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53884: LD_VAR 0 10
53888: PPUSH
53889: LD_INT 1
53891: PPUSH
53892: CALL_OW 275
53896: PUSH
53897: LD_VAR 0 11
53901: PUSH
53902: LD_INT 1
53904: ARRAY
53905: GREATEREQUAL
53906: PUSH
53907: LD_VAR 0 10
53911: PPUSH
53912: LD_INT 2
53914: PPUSH
53915: CALL_OW 275
53919: PUSH
53920: LD_VAR 0 11
53924: PUSH
53925: LD_INT 2
53927: ARRAY
53928: GREATEREQUAL
53929: AND
53930: PUSH
53931: LD_VAR 0 10
53935: PPUSH
53936: LD_INT 3
53938: PPUSH
53939: CALL_OW 275
53943: PUSH
53944: LD_VAR 0 11
53948: PUSH
53949: LD_INT 3
53951: ARRAY
53952: GREATEREQUAL
53953: AND
53954: NOT
53955: IFFALSE 53959
// exit ;
53957: GO 54546
// if GetBType ( depot ) = b_depot then
53959: LD_VAR 0 1
53963: PPUSH
53964: CALL_OW 266
53968: PUSH
53969: LD_INT 0
53971: EQUAL
53972: IFFALSE 53984
// dist := 28 else
53974: LD_ADDR_VAR 0 14
53978: PUSH
53979: LD_INT 28
53981: ST_TO_ADDR
53982: GO 53992
// dist := 36 ;
53984: LD_ADDR_VAR 0 14
53988: PUSH
53989: LD_INT 36
53991: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53992: LD_VAR 0 1
53996: PPUSH
53997: LD_VAR 0 3
54001: PPUSH
54002: LD_VAR 0 4
54006: PPUSH
54007: CALL_OW 297
54011: PUSH
54012: LD_VAR 0 14
54016: GREATER
54017: IFFALSE 54021
// exit ;
54019: GO 54546
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54021: LD_ADDR_VAR 0 12
54025: PUSH
54026: LD_VAR 0 2
54030: PPUSH
54031: LD_VAR 0 3
54035: PPUSH
54036: LD_VAR 0 4
54040: PPUSH
54041: LD_VAR 0 5
54045: PPUSH
54046: LD_VAR 0 1
54050: PPUSH
54051: CALL_OW 248
54055: PPUSH
54056: LD_INT 0
54058: PPUSH
54059: CALL 54551 0 6
54063: ST_TO_ADDR
// if not hexes then
54064: LD_VAR 0 12
54068: NOT
54069: IFFALSE 54073
// exit ;
54071: GO 54546
// hex := GetHexInfo ( x , y ) ;
54073: LD_ADDR_VAR 0 15
54077: PUSH
54078: LD_VAR 0 3
54082: PPUSH
54083: LD_VAR 0 4
54087: PPUSH
54088: CALL_OW 546
54092: ST_TO_ADDR
// if hex [ 1 ] then
54093: LD_VAR 0 15
54097: PUSH
54098: LD_INT 1
54100: ARRAY
54101: IFFALSE 54105
// exit ;
54103: GO 54546
// height := hex [ 2 ] ;
54105: LD_ADDR_VAR 0 13
54109: PUSH
54110: LD_VAR 0 15
54114: PUSH
54115: LD_INT 2
54117: ARRAY
54118: ST_TO_ADDR
// for i = 1 to hexes do
54119: LD_ADDR_VAR 0 7
54123: PUSH
54124: DOUBLE
54125: LD_INT 1
54127: DEC
54128: ST_TO_ADDR
54129: LD_VAR 0 12
54133: PUSH
54134: FOR_TO
54135: IFFALSE 54465
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54137: LD_VAR 0 12
54141: PUSH
54142: LD_VAR 0 7
54146: ARRAY
54147: PUSH
54148: LD_INT 1
54150: ARRAY
54151: PPUSH
54152: LD_VAR 0 12
54156: PUSH
54157: LD_VAR 0 7
54161: ARRAY
54162: PUSH
54163: LD_INT 2
54165: ARRAY
54166: PPUSH
54167: CALL_OW 488
54171: NOT
54172: PUSH
54173: LD_VAR 0 12
54177: PUSH
54178: LD_VAR 0 7
54182: ARRAY
54183: PUSH
54184: LD_INT 1
54186: ARRAY
54187: PPUSH
54188: LD_VAR 0 12
54192: PUSH
54193: LD_VAR 0 7
54197: ARRAY
54198: PUSH
54199: LD_INT 2
54201: ARRAY
54202: PPUSH
54203: CALL_OW 428
54207: PUSH
54208: LD_INT 0
54210: GREATER
54211: OR
54212: PUSH
54213: LD_VAR 0 12
54217: PUSH
54218: LD_VAR 0 7
54222: ARRAY
54223: PUSH
54224: LD_INT 1
54226: ARRAY
54227: PPUSH
54228: LD_VAR 0 12
54232: PUSH
54233: LD_VAR 0 7
54237: ARRAY
54238: PUSH
54239: LD_INT 2
54241: ARRAY
54242: PPUSH
54243: CALL_OW 351
54247: OR
54248: IFFALSE 54254
// exit ;
54250: POP
54251: POP
54252: GO 54546
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54254: LD_ADDR_VAR 0 8
54258: PUSH
54259: LD_VAR 0 12
54263: PUSH
54264: LD_VAR 0 7
54268: ARRAY
54269: PUSH
54270: LD_INT 1
54272: ARRAY
54273: PPUSH
54274: LD_VAR 0 12
54278: PUSH
54279: LD_VAR 0 7
54283: ARRAY
54284: PUSH
54285: LD_INT 2
54287: ARRAY
54288: PPUSH
54289: CALL_OW 546
54293: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54294: LD_VAR 0 8
54298: PUSH
54299: LD_INT 1
54301: ARRAY
54302: PUSH
54303: LD_VAR 0 8
54307: PUSH
54308: LD_INT 2
54310: ARRAY
54311: PUSH
54312: LD_VAR 0 13
54316: PUSH
54317: LD_INT 2
54319: PLUS
54320: GREATER
54321: OR
54322: PUSH
54323: LD_VAR 0 8
54327: PUSH
54328: LD_INT 2
54330: ARRAY
54331: PUSH
54332: LD_VAR 0 13
54336: PUSH
54337: LD_INT 2
54339: MINUS
54340: LESS
54341: OR
54342: PUSH
54343: LD_VAR 0 8
54347: PUSH
54348: LD_INT 3
54350: ARRAY
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: LD_INT 8
54357: PUSH
54358: LD_INT 9
54360: PUSH
54361: LD_INT 10
54363: PUSH
54364: LD_INT 11
54366: PUSH
54367: LD_INT 12
54369: PUSH
54370: LD_INT 13
54372: PUSH
54373: LD_INT 16
54375: PUSH
54376: LD_INT 17
54378: PUSH
54379: LD_INT 18
54381: PUSH
54382: LD_INT 19
54384: PUSH
54385: LD_INT 20
54387: PUSH
54388: LD_INT 21
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: IN
54406: NOT
54407: OR
54408: PUSH
54409: LD_VAR 0 8
54413: PUSH
54414: LD_INT 5
54416: ARRAY
54417: NOT
54418: OR
54419: PUSH
54420: LD_VAR 0 8
54424: PUSH
54425: LD_INT 6
54427: ARRAY
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: LD_INT 7
54437: PUSH
54438: LD_INT 9
54440: PUSH
54441: LD_INT 10
54443: PUSH
54444: LD_INT 11
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: IN
54455: NOT
54456: OR
54457: IFFALSE 54463
// exit ;
54459: POP
54460: POP
54461: GO 54546
// end ;
54463: GO 54134
54465: POP
54466: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54467: LD_VAR 0 9
54471: PPUSH
54472: LD_VAR 0 3
54476: PPUSH
54477: LD_VAR 0 4
54481: PPUSH
54482: LD_INT 20
54484: PPUSH
54485: CALL 46469 0 4
54489: PUSH
54490: LD_INT 4
54492: ARRAY
54493: IFFALSE 54497
// exit ;
54495: GO 54546
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54497: LD_VAR 0 2
54501: PUSH
54502: LD_INT 29
54504: PUSH
54505: LD_INT 30
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: IN
54512: PUSH
54513: LD_VAR 0 3
54517: PPUSH
54518: LD_VAR 0 4
54522: PPUSH
54523: LD_VAR 0 9
54527: PPUSH
54528: CALL_OW 440
54532: NOT
54533: AND
54534: IFFALSE 54538
// exit ;
54536: GO 54546
// result := true ;
54538: LD_ADDR_VAR 0 6
54542: PUSH
54543: LD_INT 1
54545: ST_TO_ADDR
// end ;
54546: LD_VAR 0 6
54550: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54551: LD_INT 0
54553: PPUSH
54554: PPUSH
54555: PPUSH
54556: PPUSH
54557: PPUSH
54558: PPUSH
54559: PPUSH
54560: PPUSH
54561: PPUSH
54562: PPUSH
54563: PPUSH
54564: PPUSH
54565: PPUSH
54566: PPUSH
54567: PPUSH
54568: PPUSH
54569: PPUSH
54570: PPUSH
54571: PPUSH
54572: PPUSH
54573: PPUSH
54574: PPUSH
54575: PPUSH
54576: PPUSH
54577: PPUSH
54578: PPUSH
54579: PPUSH
54580: PPUSH
54581: PPUSH
54582: PPUSH
54583: PPUSH
54584: PPUSH
54585: PPUSH
54586: PPUSH
54587: PPUSH
54588: PPUSH
54589: PPUSH
54590: PPUSH
54591: PPUSH
54592: PPUSH
54593: PPUSH
54594: PPUSH
54595: PPUSH
54596: PPUSH
54597: PPUSH
54598: PPUSH
54599: PPUSH
54600: PPUSH
54601: PPUSH
54602: PPUSH
54603: PPUSH
54604: PPUSH
54605: PPUSH
54606: PPUSH
54607: PPUSH
54608: PPUSH
54609: PPUSH
54610: PPUSH
// result = [ ] ;
54611: LD_ADDR_VAR 0 7
54615: PUSH
54616: EMPTY
54617: ST_TO_ADDR
// temp_list = [ ] ;
54618: LD_ADDR_VAR 0 9
54622: PUSH
54623: EMPTY
54624: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54625: LD_VAR 0 4
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: LD_INT 3
54641: PUSH
54642: LD_INT 4
54644: PUSH
54645: LD_INT 5
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: IN
54656: NOT
54657: PUSH
54658: LD_VAR 0 1
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: IN
54673: PUSH
54674: LD_VAR 0 5
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 2
54684: PUSH
54685: LD_INT 3
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: LIST
54692: IN
54693: NOT
54694: AND
54695: OR
54696: IFFALSE 54700
// exit ;
54698: GO 73091
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54700: LD_VAR 0 1
54704: PUSH
54705: LD_INT 6
54707: PUSH
54708: LD_INT 7
54710: PUSH
54711: LD_INT 8
54713: PUSH
54714: LD_INT 13
54716: PUSH
54717: LD_INT 12
54719: PUSH
54720: LD_INT 15
54722: PUSH
54723: LD_INT 11
54725: PUSH
54726: LD_INT 14
54728: PUSH
54729: LD_INT 10
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: IN
54743: IFFALSE 54753
// btype = b_lab ;
54745: LD_ADDR_VAR 0 1
54749: PUSH
54750: LD_INT 6
54752: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54753: LD_VAR 0 6
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: LD_INT 2
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: LIST
54771: IN
54772: NOT
54773: PUSH
54774: LD_VAR 0 1
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: LD_INT 3
54790: PUSH
54791: LD_INT 6
54793: PUSH
54794: LD_INT 36
54796: PUSH
54797: LD_INT 4
54799: PUSH
54800: LD_INT 5
54802: PUSH
54803: LD_INT 31
54805: PUSH
54806: LD_INT 32
54808: PUSH
54809: LD_INT 33
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: IN
54825: NOT
54826: PUSH
54827: LD_VAR 0 6
54831: PUSH
54832: LD_INT 1
54834: EQUAL
54835: AND
54836: OR
54837: PUSH
54838: LD_VAR 0 1
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: LD_INT 3
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: IN
54853: NOT
54854: PUSH
54855: LD_VAR 0 6
54859: PUSH
54860: LD_INT 2
54862: EQUAL
54863: AND
54864: OR
54865: IFFALSE 54875
// mode = 0 ;
54867: LD_ADDR_VAR 0 6
54871: PUSH
54872: LD_INT 0
54874: ST_TO_ADDR
// case mode of 0 :
54875: LD_VAR 0 6
54879: PUSH
54880: LD_INT 0
54882: DOUBLE
54883: EQUAL
54884: IFTRUE 54888
54886: GO 66341
54888: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54889: LD_ADDR_VAR 0 11
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 2
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: NEG
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: LD_INT 3
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55082: LD_ADDR_VAR 0 12
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: LD_INT 0
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: LD_INT 1
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 2
55205: NEG
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 2
55216: NEG
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 3
55239: NEG
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 3
55250: NEG
55251: PUSH
55252: LD_INT 1
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55278: LD_ADDR_VAR 0 13
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: LD_INT 2
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 2
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: LD_INT 2
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: NEG
55426: PUSH
55427: LD_INT 3
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 3
55437: NEG
55438: PUSH
55439: LD_INT 2
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 3
55449: NEG
55450: PUSH
55451: LD_INT 3
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55477: LD_ADDR_VAR 0 14
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: NEG
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: LD_INT 2
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 2
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 2
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: LD_INT 3
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: LD_INT 3
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: LD_INT 2
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55673: LD_ADDR_VAR 0 15
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 1
55742: NEG
55743: PUSH
55744: LD_INT 1
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 2
55796: NEG
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 2
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 3
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 3
55840: PUSH
55841: LD_INT 1
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55866: LD_ADDR_VAR 0 16
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: LD_INT 2
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: LD_INT 2
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: LD_INT 2
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: LD_INT 2
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 3
56013: PUSH
56014: LD_INT 2
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 3
56023: PUSH
56024: LD_INT 3
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 2
56033: PUSH
56034: LD_INT 3
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56059: LD_ADDR_VAR 0 17
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 2
56235: NEG
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: NEG
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56289: LD_ADDR_VAR 0 18
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 1
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: NEG
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: LD_INT 2
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: LD_INT 2
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: LD_INT 1
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 2
56476: NEG
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: LD_INT 2
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56519: LD_ADDR_VAR 0 19
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: LD_INT 2
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: LD_INT 2
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 2
56695: NEG
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 2
56706: NEG
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: NEG
56719: PUSH
56720: LD_INT 2
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56749: LD_ADDR_VAR 0 20
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 2
56948: NEG
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56979: LD_ADDR_VAR 0 21
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 1
57037: NEG
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 1
57048: NEG
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: LD_INT 2
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: LD_INT 2
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 2
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 2
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57209: LD_ADDR_VAR 0 22
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: NEG
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: LD_INT 1
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 2
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 2
57385: NEG
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 2
57408: NEG
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57439: LD_ADDR_VAR 0 23
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 0
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 1
57497: NEG
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: LD_INT 2
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 2
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 2
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 2
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 2
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 2
57615: NEG
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 2
57638: NEG
57639: PUSH
57640: LD_INT 2
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: LD_INT 3
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: NEG
57663: PUSH
57664: LD_INT 3
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57719: LD_ADDR_VAR 0 24
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: LD_INT 2
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 2
57815: NEG
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 2
57895: NEG
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 2
57906: NEG
57907: PUSH
57908: LD_INT 1
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 2
57918: NEG
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: LD_INT 2
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 3
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 3
57962: PUSH
57963: LD_INT 2
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57995: LD_ADDR_VAR 0 25
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 2
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 2
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: NEG
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: NEG
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: LD_INT 2
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 3
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 3
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 2
58226: PUSH
58227: LD_INT 3
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: LD_INT 3
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58269: LD_ADDR_VAR 0 26
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 1
58327: NEG
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 1
58338: NEG
58339: PUSH
58340: LD_INT 1
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: LD_INT 2
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 2
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 2
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 2
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: NEG
58457: PUSH
58458: LD_INT 1
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 2
58468: NEG
58469: PUSH
58470: LD_INT 2
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 2
58480: PUSH
58481: LD_INT 3
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: LD_INT 3
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58545: LD_ADDR_VAR 0 27
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: LD_INT 1
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: NEG
58627: PUSH
58628: LD_INT 2
58630: NEG
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 0
58638: PUSH
58639: LD_INT 2
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 2
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: LD_INT 2
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 1
58690: PUSH
58691: LD_INT 2
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: LD_INT 2
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 2
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: NEG
58745: PUSH
58746: LD_INT 2
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: LD_INT 2
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 2
58767: NEG
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 3
58778: NEG
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 3
58790: NEG
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58825: LD_ADDR_VAR 0 28
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 1
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: LD_INT 1
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: LD_INT 2
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 2
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 2
58960: PUSH
58961: LD_INT 2
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: LD_INT 2
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 0
58980: PUSH
58981: LD_INT 2
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 2
59001: NEG
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 2
59012: NEG
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: LD_INT 2
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 2
59036: NEG
59037: PUSH
59038: LD_INT 3
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: LD_INT 3
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 3
59060: NEG
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 3
59072: NEG
59073: PUSH
59074: LD_INT 2
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59107: LD_ADDR_VAR 0 29
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 1
59165: NEG
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 1
59176: NEG
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: LD_INT 2
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: LD_INT 2
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: LD_INT 1
59214: NEG
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 2
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: LD_INT 2
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: LD_INT 2
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 2
59273: NEG
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 2
59285: NEG
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 2
59297: NEG
59298: PUSH
59299: LD_INT 3
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 2
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 3
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: LD_INT 3
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: LD_INT 2
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 3
59351: NEG
59352: PUSH
59353: LD_INT 2
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59386: LD_ADDR_VAR 0 30
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: NEG
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: LD_INT 2
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: LD_INT 2
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: LD_INT 1
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: LD_INT 1
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 2
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: LD_INT 2
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: NEG
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: NEG
59576: PUSH
59577: LD_INT 3
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: LD_INT 2
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 3
59598: PUSH
59599: LD_INT 2
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 2
59608: PUSH
59609: LD_INT 3
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 2
59618: NEG
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 3
59629: NEG
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59664: LD_ADDR_VAR 0 31
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 1
59733: NEG
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 1
59745: NEG
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 2
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: LD_INT 1
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 2
59788: PUSH
59789: LD_INT 2
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: LD_INT 2
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: LD_INT 2
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: NEG
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: NEG
59842: PUSH
59843: LD_INT 2
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 2
59853: NEG
59854: PUSH
59855: LD_INT 3
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 2
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 3
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: LD_INT 3
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: NEG
59897: PUSH
59898: LD_INT 2
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 3
59907: NEG
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59942: LD_ADDR_VAR 0 32
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: LD_INT 0
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: LD_INT 1
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: LD_INT 1
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: LD_INT 2
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 0
60035: PUSH
60036: LD_INT 2
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 2
60067: PUSH
60068: LD_INT 2
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: LD_INT 2
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: LD_INT 2
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 1
60097: NEG
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 2
60108: NEG
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 2
60119: NEG
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: NEG
60132: PUSH
60133: LD_INT 3
60135: NEG
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: PUSH
60144: LD_INT 2
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 3
60154: PUSH
60155: LD_INT 2
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 2
60164: PUSH
60165: LD_INT 3
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 2
60174: NEG
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 3
60185: NEG
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60220: LD_ADDR_VAR 0 33
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: LD_INT 1
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: LD_INT 2
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: LD_INT 1
60316: NEG
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 2
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: LD_INT 2
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 1
60364: NEG
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 2
60398: NEG
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 2
60410: NEG
60411: PUSH
60412: LD_INT 3
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: LD_INT 1
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 3
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: LD_INT 2
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 3
60464: NEG
60465: PUSH
60466: LD_INT 2
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60499: LD_ADDR_VAR 0 34
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 0
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 1
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: LD_INT 0
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: LD_INT 2
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: LD_INT 2
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 2
60614: PUSH
60615: LD_INT 1
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 2
60624: PUSH
60625: LD_INT 2
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: LD_INT 2
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 2
60655: NEG
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 2
60666: NEG
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 2
60678: NEG
60679: PUSH
60680: LD_INT 2
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 1
60690: NEG
60691: PUSH
60692: LD_INT 3
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: LD_INT 2
60705: NEG
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 3
60713: PUSH
60714: LD_INT 2
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: LD_INT 3
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 2
60733: NEG
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 3
60744: NEG
60745: PUSH
60746: LD_INT 1
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60779: LD_ADDR_VAR 0 35
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: LD_INT 0
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: LD_INT 1
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: LD_INT 1
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 0
60827: PUSH
60828: LD_INT 1
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: LD_INT 1
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 2
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 2
60870: NEG
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60891: LD_ADDR_VAR 0 36
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: LD_INT 2
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: LD_INT 2
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61003: LD_ADDR_VAR 0 37
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: LD_INT 1
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 0
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: LD_INT 1
61087: NEG
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61115: LD_ADDR_VAR 0 38
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 1
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: LD_INT 1
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 2
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 2
61206: NEG
61207: PUSH
61208: LD_INT 1
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61227: LD_ADDR_VAR 0 39
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 0
61244: PUSH
61245: LD_INT 1
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: LD_INT 1
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 1
61285: NEG
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: LD_INT 1
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 1
61308: NEG
61309: PUSH
61310: LD_INT 2
61312: NEG
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 1
61320: PUSH
61321: LD_INT 2
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61339: LD_ADDR_VAR 0 40
61343: PUSH
61344: LD_INT 0
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: LD_INT 1
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: LD_INT 1
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: NEG
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: NEG
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61451: LD_ADDR_VAR 0 41
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 0
61468: PUSH
61469: LD_INT 1
61471: NEG
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 1
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: LD_INT 1
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: NEG
61533: PUSH
61534: LD_INT 2
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 1
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 2
61555: PUSH
61556: LD_INT 0
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 2
61565: PUSH
61566: LD_INT 1
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: LD_INT 2
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: LD_INT 2
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: NEG
61596: PUSH
61597: LD_INT 1
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 2
61606: NEG
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 2
61617: NEG
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 2
61629: NEG
61630: PUSH
61631: LD_INT 2
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 2
61641: NEG
61642: PUSH
61643: LD_INT 3
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 2
61653: PUSH
61654: LD_INT 1
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 3
61664: PUSH
61665: LD_INT 0
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 3
61674: PUSH
61675: LD_INT 1
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 3
61684: PUSH
61685: LD_INT 2
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 3
61694: PUSH
61695: LD_INT 3
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 2
61704: PUSH
61705: LD_INT 3
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 2
61714: NEG
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 3
61725: NEG
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 3
61736: NEG
61737: PUSH
61738: LD_INT 1
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 3
61748: NEG
61749: PUSH
61750: LD_INT 2
61752: NEG
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 3
61760: NEG
61761: PUSH
61762: LD_INT 3
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61801: LD_ADDR_VAR 0 42
61805: PUSH
61806: LD_INT 0
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: LD_INT 1
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 1
61829: PUSH
61830: LD_INT 0
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 1
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 1
61859: NEG
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: PUSH
61872: LD_INT 1
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 1
61882: NEG
61883: PUSH
61884: LD_INT 2
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 0
61894: PUSH
61895: LD_INT 2
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: LD_INT 1
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 2
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 2
61926: PUSH
61927: LD_INT 2
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 1
61936: PUSH
61937: LD_INT 2
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 0
61946: PUSH
61947: LD_INT 2
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 1
61956: NEG
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 2
61967: NEG
61968: PUSH
61969: LD_INT 1
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 2
61979: NEG
61980: PUSH
61981: LD_INT 2
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 2
61991: NEG
61992: PUSH
61993: LD_INT 3
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: LD_INT 3
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 0
62015: PUSH
62016: LD_INT 3
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: PUSH
62027: LD_INT 2
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 3
62037: PUSH
62038: LD_INT 2
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 3
62047: PUSH
62048: LD_INT 3
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 2
62057: PUSH
62058: LD_INT 3
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: LD_INT 3
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: LD_INT 3
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: PUSH
62089: LD_INT 2
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 3
62098: NEG
62099: PUSH
62100: LD_INT 2
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 3
62110: NEG
62111: PUSH
62112: LD_INT 3
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62151: LD_ADDR_VAR 0 43
62155: PUSH
62156: LD_INT 0
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: LD_INT 1
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 1
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: LD_INT 1
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 1
62209: NEG
62210: PUSH
62211: LD_INT 0
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 1
62220: NEG
62221: PUSH
62222: LD_INT 1
62224: NEG
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: LD_INT 2
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: LD_INT 2
62247: NEG
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: LD_INT 1
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 2
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 2
62276: PUSH
62277: LD_INT 1
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 1
62286: PUSH
62287: LD_INT 2
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: LD_INT 2
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: LD_INT 1
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 2
62317: NEG
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 2
62328: NEG
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: LD_INT 3
62344: NEG
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: LD_INT 3
62355: NEG
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: LD_INT 2
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 2
62374: PUSH
62375: LD_INT 1
62377: NEG
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 3
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 3
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 1
62405: PUSH
62406: LD_INT 3
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: LD_INT 3
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: LD_INT 2
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 2
62436: NEG
62437: PUSH
62438: LD_INT 1
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 3
62447: NEG
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 3
62458: NEG
62459: PUSH
62460: LD_INT 1
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62499: LD_ADDR_VAR 0 44
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: LD_INT 1
62519: NEG
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: LD_INT 1
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: LD_INT 1
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 1
62557: NEG
62558: PUSH
62559: LD_INT 0
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 1
62568: NEG
62569: PUSH
62570: LD_INT 1
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 1
62580: NEG
62581: PUSH
62582: LD_INT 2
62584: NEG
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: LD_INT 1
62595: NEG
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: LD_INT 0
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 2
62623: PUSH
62624: LD_INT 2
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: PUSH
62634: LD_INT 2
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: LD_INT 1
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 2
62654: NEG
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 2
62665: NEG
62666: PUSH
62667: LD_INT 1
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 2
62677: NEG
62678: PUSH
62679: LD_INT 2
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 2
62689: NEG
62690: PUSH
62691: LD_INT 3
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 2
62701: PUSH
62702: LD_INT 1
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 3
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 3
62722: PUSH
62723: LD_INT 1
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 3
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 3
62742: PUSH
62743: LD_INT 3
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 2
62752: PUSH
62753: LD_INT 3
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 2
62762: NEG
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 3
62773: NEG
62774: PUSH
62775: LD_INT 0
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 3
62784: NEG
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 3
62796: NEG
62797: PUSH
62798: LD_INT 2
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 3
62808: NEG
62809: PUSH
62810: LD_INT 3
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62849: LD_ADDR_VAR 0 45
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: LD_INT 0
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: LD_INT 1
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 1
62877: PUSH
62878: LD_INT 0
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: PUSH
62888: LD_INT 1
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 0
62897: PUSH
62898: LD_INT 1
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 1
62907: NEG
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 1
62918: NEG
62919: PUSH
62920: LD_INT 1
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 1
62930: NEG
62931: PUSH
62932: LD_INT 2
62934: NEG
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 0
62942: PUSH
62943: LD_INT 2
62945: NEG
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: LD_INT 1
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 2
62974: PUSH
62975: LD_INT 2
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: LD_INT 2
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: LD_INT 2
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: LD_INT 1
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 2
63015: NEG
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 2
63027: NEG
63028: PUSH
63029: LD_INT 2
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 2
63039: NEG
63040: PUSH
63041: LD_INT 3
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 1
63051: NEG
63052: PUSH
63053: LD_INT 3
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 0
63063: PUSH
63064: LD_INT 3
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 1
63074: PUSH
63075: LD_INT 2
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 3
63085: PUSH
63086: LD_INT 2
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 3
63095: PUSH
63096: LD_INT 3
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 2
63105: PUSH
63106: LD_INT 3
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 1
63115: PUSH
63116: LD_INT 3
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 0
63125: PUSH
63126: LD_INT 3
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 1
63135: NEG
63136: PUSH
63137: LD_INT 2
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 3
63146: NEG
63147: PUSH
63148: LD_INT 2
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 3
63158: NEG
63159: PUSH
63160: LD_INT 3
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63199: LD_ADDR_VAR 0 46
63203: PUSH
63204: LD_INT 0
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: LD_INT 1
63219: NEG
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 1
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 1
63257: NEG
63258: PUSH
63259: LD_INT 0
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: LD_INT 1
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: LD_INT 2
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: LD_INT 2
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: LD_INT 1
63306: NEG
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 2
63314: PUSH
63315: LD_INT 0
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 2
63324: PUSH
63325: LD_INT 1
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 1
63334: PUSH
63335: LD_INT 2
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 0
63344: PUSH
63345: LD_INT 2
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 1
63354: NEG
63355: PUSH
63356: LD_INT 1
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 2
63365: NEG
63366: PUSH
63367: LD_INT 0
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 2
63376: NEG
63377: PUSH
63378: LD_INT 1
63380: NEG
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 1
63388: NEG
63389: PUSH
63390: LD_INT 3
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 0
63400: PUSH
63401: LD_INT 3
63403: NEG
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 1
63411: PUSH
63412: LD_INT 2
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: LD_INT 1
63425: NEG
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 3
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 3
63443: PUSH
63444: LD_INT 1
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 1
63453: PUSH
63454: LD_INT 3
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: LD_INT 3
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 1
63473: NEG
63474: PUSH
63475: LD_INT 2
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 2
63484: NEG
63485: PUSH
63486: LD_INT 1
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 3
63495: NEG
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 3
63506: NEG
63507: PUSH
63508: LD_INT 1
63510: NEG
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63547: LD_ADDR_VAR 0 47
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: LD_INT 1
63567: NEG
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 1
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 1
63585: PUSH
63586: LD_INT 1
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 0
63595: PUSH
63596: LD_INT 1
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 1
63605: NEG
63606: PUSH
63607: LD_INT 0
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 1
63616: NEG
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 1
63628: NEG
63629: PUSH
63630: LD_INT 2
63632: NEG
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 0
63640: PUSH
63641: LD_INT 2
63643: NEG
63644: PUSH
63645: EMPTY
63646: LIST
63647: LIST
63648: PUSH
63649: LD_INT 1
63651: PUSH
63652: LD_INT 1
63654: NEG
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 2
63662: NEG
63663: PUSH
63664: LD_INT 1
63666: NEG
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 2
63674: NEG
63675: PUSH
63676: LD_INT 2
63678: NEG
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63698: LD_ADDR_VAR 0 48
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: LD_INT 0
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: LD_INT 1
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 1
63726: PUSH
63727: LD_INT 0
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: PUSH
63737: LD_INT 1
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 0
63746: PUSH
63747: LD_INT 1
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 1
63756: NEG
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 1
63767: NEG
63768: PUSH
63769: LD_INT 1
63771: NEG
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 1
63779: NEG
63780: PUSH
63781: LD_INT 2
63783: NEG
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: LD_INT 2
63794: NEG
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: LD_INT 1
63805: NEG
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 2
63813: PUSH
63814: LD_INT 0
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 2
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63845: LD_ADDR_VAR 0 49
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: LD_INT 0
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 0
63862: PUSH
63863: LD_INT 1
63865: NEG
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 1
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 1
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: LD_INT 1
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 1
63903: NEG
63904: PUSH
63905: LD_INT 0
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 1
63914: NEG
63915: PUSH
63916: LD_INT 1
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 1
63926: PUSH
63927: LD_INT 1
63929: NEG
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 2
63937: PUSH
63938: LD_INT 0
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 2
63947: PUSH
63948: LD_INT 1
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 2
63957: PUSH
63958: LD_INT 2
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 1
63967: PUSH
63968: LD_INT 2
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63989: LD_ADDR_VAR 0 50
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 1
64017: PUSH
64018: LD_INT 0
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 1
64027: PUSH
64028: LD_INT 1
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 0
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 1
64047: NEG
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: LD_INT 1
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 2
64070: PUSH
64071: LD_INT 1
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 2
64080: PUSH
64081: LD_INT 2
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 1
64090: PUSH
64091: LD_INT 2
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: LD_INT 2
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: LD_INT 1
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64133: LD_ADDR_VAR 0 51
64137: PUSH
64138: LD_INT 0
64140: PUSH
64141: LD_INT 0
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: LD_INT 1
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 1
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 1
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 0
64181: PUSH
64182: LD_INT 1
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 1
64191: NEG
64192: PUSH
64193: LD_INT 0
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 1
64214: PUSH
64215: LD_INT 2
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: LD_INT 2
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 1
64234: NEG
64235: PUSH
64236: LD_INT 1
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 2
64245: NEG
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 2
64256: NEG
64257: PUSH
64258: LD_INT 1
64260: NEG
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64280: LD_ADDR_VAR 0 52
64284: PUSH
64285: LD_INT 0
64287: PUSH
64288: LD_INT 0
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: LD_INT 1
64300: NEG
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 1
64308: PUSH
64309: LD_INT 0
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 1
64318: PUSH
64319: LD_INT 1
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 1
64338: NEG
64339: PUSH
64340: LD_INT 0
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: LD_INT 1
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: NEG
64362: PUSH
64363: LD_INT 2
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: LD_INT 1
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 2
64384: NEG
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 2
64395: NEG
64396: PUSH
64397: LD_INT 1
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 2
64407: NEG
64408: PUSH
64409: LD_INT 2
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64431: LD_ADDR_VAR 0 53
64435: PUSH
64436: LD_INT 0
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: LD_INT 1
64451: NEG
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 1
64459: PUSH
64460: LD_INT 0
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: LD_INT 1
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: LD_INT 1
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: LD_INT 0
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 1
64500: NEG
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 1
64512: NEG
64513: PUSH
64514: LD_INT 2
64516: NEG
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 0
64524: PUSH
64525: LD_INT 2
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 1
64535: PUSH
64536: LD_INT 1
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 2
64546: PUSH
64547: LD_INT 0
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 2
64556: PUSH
64557: LD_INT 1
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 2
64566: PUSH
64567: LD_INT 2
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 1
64576: PUSH
64577: LD_INT 2
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 0
64586: PUSH
64587: LD_INT 2
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 1
64596: NEG
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 2
64607: NEG
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 2
64618: NEG
64619: PUSH
64620: LD_INT 1
64622: NEG
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 2
64630: NEG
64631: PUSH
64632: LD_INT 2
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64661: LD_ADDR_VAR 0 54
64665: PUSH
64666: LD_INT 0
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: LD_INT 1
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 1
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 1
64699: PUSH
64700: LD_INT 1
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 0
64709: PUSH
64710: LD_INT 1
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 1
64719: NEG
64720: PUSH
64721: LD_INT 0
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 1
64730: NEG
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 1
64742: NEG
64743: PUSH
64744: LD_INT 2
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: LD_INT 2
64757: NEG
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 1
64765: PUSH
64766: LD_INT 1
64768: NEG
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 2
64776: PUSH
64777: LD_INT 0
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 2
64786: PUSH
64787: LD_INT 1
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 2
64796: PUSH
64797: LD_INT 2
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 1
64806: PUSH
64807: LD_INT 2
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: LD_INT 2
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: LD_INT 1
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 2
64837: NEG
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 2
64848: NEG
64849: PUSH
64850: LD_INT 1
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 2
64860: NEG
64861: PUSH
64862: LD_INT 2
64864: NEG
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64891: LD_ADDR_VAR 0 55
64895: PUSH
64896: LD_INT 0
64898: PUSH
64899: LD_INT 0
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 0
64908: PUSH
64909: LD_INT 1
64911: NEG
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 1
64919: PUSH
64920: LD_INT 0
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: LD_INT 1
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 0
64939: PUSH
64940: LD_INT 1
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 1
64949: NEG
64950: PUSH
64951: LD_INT 0
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 1
64960: NEG
64961: PUSH
64962: LD_INT 1
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 1
64972: NEG
64973: PUSH
64974: LD_INT 2
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: LD_INT 2
64987: NEG
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 1
64995: PUSH
64996: LD_INT 1
64998: NEG
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 2
65006: PUSH
65007: LD_INT 0
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 2
65016: PUSH
65017: LD_INT 1
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 2
65026: PUSH
65027: LD_INT 2
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 1
65036: PUSH
65037: LD_INT 2
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 0
65046: PUSH
65047: LD_INT 2
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 1
65056: NEG
65057: PUSH
65058: LD_INT 1
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 2
65067: NEG
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 2
65078: NEG
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 2
65090: NEG
65091: PUSH
65092: LD_INT 2
65094: NEG
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65121: LD_ADDR_VAR 0 56
65125: PUSH
65126: LD_INT 0
65128: PUSH
65129: LD_INT 0
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 0
65138: PUSH
65139: LD_INT 1
65141: NEG
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 1
65149: PUSH
65150: LD_INT 0
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: PUSH
65160: LD_INT 1
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 0
65169: PUSH
65170: LD_INT 1
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 1
65179: NEG
65180: PUSH
65181: LD_INT 0
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 1
65190: NEG
65191: PUSH
65192: LD_INT 1
65194: NEG
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 1
65202: NEG
65203: PUSH
65204: LD_INT 2
65206: NEG
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 0
65214: PUSH
65215: LD_INT 2
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 1
65225: PUSH
65226: LD_INT 1
65228: NEG
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 2
65236: PUSH
65237: LD_INT 0
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 2
65246: PUSH
65247: LD_INT 1
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 2
65256: PUSH
65257: LD_INT 2
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 1
65266: PUSH
65267: LD_INT 2
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: LD_INT 2
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 1
65286: NEG
65287: PUSH
65288: LD_INT 1
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 2
65297: NEG
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 2
65308: NEG
65309: PUSH
65310: LD_INT 1
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 2
65320: NEG
65321: PUSH
65322: LD_INT 2
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65351: LD_ADDR_VAR 0 57
65355: PUSH
65356: LD_INT 0
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: LD_INT 1
65371: NEG
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 1
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 1
65389: PUSH
65390: LD_INT 1
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 0
65399: PUSH
65400: LD_INT 1
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 1
65409: NEG
65410: PUSH
65411: LD_INT 0
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 1
65420: NEG
65421: PUSH
65422: LD_INT 1
65424: NEG
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 1
65432: NEG
65433: PUSH
65434: LD_INT 2
65436: NEG
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 0
65444: PUSH
65445: LD_INT 2
65447: NEG
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 1
65455: PUSH
65456: LD_INT 1
65458: NEG
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 2
65466: PUSH
65467: LD_INT 0
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 2
65476: PUSH
65477: LD_INT 1
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 2
65486: PUSH
65487: LD_INT 2
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: LD_INT 2
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 0
65506: PUSH
65507: LD_INT 2
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 1
65516: NEG
65517: PUSH
65518: LD_INT 1
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 2
65527: NEG
65528: PUSH
65529: LD_INT 0
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 2
65538: NEG
65539: PUSH
65540: LD_INT 1
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 2
65550: NEG
65551: PUSH
65552: LD_INT 2
65554: NEG
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65581: LD_ADDR_VAR 0 58
65585: PUSH
65586: LD_INT 0
65588: PUSH
65589: LD_INT 0
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 0
65598: PUSH
65599: LD_INT 1
65601: NEG
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 1
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 1
65619: PUSH
65620: LD_INT 1
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 0
65629: PUSH
65630: LD_INT 1
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 1
65639: NEG
65640: PUSH
65641: LD_INT 0
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 1
65650: NEG
65651: PUSH
65652: LD_INT 1
65654: NEG
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 1
65662: NEG
65663: PUSH
65664: LD_INT 2
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 0
65674: PUSH
65675: LD_INT 2
65677: NEG
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 1
65685: PUSH
65686: LD_INT 1
65688: NEG
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 2
65696: PUSH
65697: LD_INT 0
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 2
65706: PUSH
65707: LD_INT 1
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 2
65716: PUSH
65717: LD_INT 2
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 1
65726: PUSH
65727: LD_INT 2
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 0
65736: PUSH
65737: LD_INT 2
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 1
65746: NEG
65747: PUSH
65748: LD_INT 1
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 2
65757: NEG
65758: PUSH
65759: LD_INT 0
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 2
65768: NEG
65769: PUSH
65770: LD_INT 1
65772: NEG
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 2
65780: NEG
65781: PUSH
65782: LD_INT 2
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65811: LD_ADDR_VAR 0 59
65815: PUSH
65816: LD_INT 0
65818: PUSH
65819: LD_INT 0
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 0
65828: PUSH
65829: LD_INT 1
65831: NEG
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 1
65839: PUSH
65840: LD_INT 0
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 1
65849: PUSH
65850: LD_INT 1
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: LD_INT 1
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 1
65869: NEG
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 1
65880: NEG
65881: PUSH
65882: LD_INT 1
65884: NEG
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65899: LD_ADDR_VAR 0 60
65903: PUSH
65904: LD_INT 0
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 0
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 1
65927: PUSH
65928: LD_INT 0
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 1
65937: PUSH
65938: LD_INT 1
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 0
65947: PUSH
65948: LD_INT 1
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 1
65957: NEG
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 1
65968: NEG
65969: PUSH
65970: LD_INT 1
65972: NEG
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65987: LD_ADDR_VAR 0 61
65991: PUSH
65992: LD_INT 0
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 0
66004: PUSH
66005: LD_INT 1
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 1
66015: PUSH
66016: LD_INT 0
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 1
66025: PUSH
66026: LD_INT 1
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 0
66035: PUSH
66036: LD_INT 1
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 1
66045: NEG
66046: PUSH
66047: LD_INT 0
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 1
66056: NEG
66057: PUSH
66058: LD_INT 1
66060: NEG
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66075: LD_ADDR_VAR 0 62
66079: PUSH
66080: LD_INT 0
66082: PUSH
66083: LD_INT 0
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 0
66092: PUSH
66093: LD_INT 1
66095: NEG
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: LD_INT 1
66103: PUSH
66104: LD_INT 0
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 1
66113: PUSH
66114: LD_INT 1
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 0
66123: PUSH
66124: LD_INT 1
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 1
66133: NEG
66134: PUSH
66135: LD_INT 0
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 1
66144: NEG
66145: PUSH
66146: LD_INT 1
66148: NEG
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66163: LD_ADDR_VAR 0 63
66167: PUSH
66168: LD_INT 0
66170: PUSH
66171: LD_INT 0
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: LD_INT 1
66183: NEG
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 1
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 1
66201: PUSH
66202: LD_INT 1
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: LD_INT 1
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 1
66221: NEG
66222: PUSH
66223: LD_INT 0
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 1
66232: NEG
66233: PUSH
66234: LD_INT 1
66236: NEG
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66251: LD_ADDR_VAR 0 64
66255: PUSH
66256: LD_INT 0
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 0
66268: PUSH
66269: LD_INT 1
66271: NEG
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 1
66279: PUSH
66280: LD_INT 0
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 1
66289: PUSH
66290: LD_INT 1
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 0
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 1
66309: NEG
66310: PUSH
66311: LD_INT 0
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 1
66320: NEG
66321: PUSH
66322: LD_INT 1
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: ST_TO_ADDR
// end ; 1 :
66339: GO 72236
66341: LD_INT 1
66343: DOUBLE
66344: EQUAL
66345: IFTRUE 66349
66347: GO 68972
66349: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66350: LD_ADDR_VAR 0 11
66354: PUSH
66355: LD_INT 1
66357: NEG
66358: PUSH
66359: LD_INT 3
66361: NEG
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: LD_INT 3
66372: NEG
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 1
66380: PUSH
66381: LD_INT 2
66383: NEG
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: LIST
66393: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66394: LD_ADDR_VAR 0 12
66398: PUSH
66399: LD_INT 2
66401: PUSH
66402: LD_INT 1
66404: NEG
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 3
66412: PUSH
66413: LD_INT 0
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: PUSH
66420: LD_INT 3
66422: PUSH
66423: LD_INT 1
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: LIST
66434: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66435: LD_ADDR_VAR 0 13
66439: PUSH
66440: LD_INT 3
66442: PUSH
66443: LD_INT 2
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 3
66452: PUSH
66453: LD_INT 3
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 2
66462: PUSH
66463: LD_INT 3
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: LIST
66474: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66475: LD_ADDR_VAR 0 14
66479: PUSH
66480: LD_INT 1
66482: PUSH
66483: LD_INT 3
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 0
66492: PUSH
66493: LD_INT 3
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 1
66502: NEG
66503: PUSH
66504: LD_INT 2
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: LIST
66515: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66516: LD_ADDR_VAR 0 15
66520: PUSH
66521: LD_INT 2
66523: NEG
66524: PUSH
66525: LD_INT 1
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 3
66534: NEG
66535: PUSH
66536: LD_INT 0
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 3
66545: NEG
66546: PUSH
66547: LD_INT 1
66549: NEG
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: LIST
66559: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66560: LD_ADDR_VAR 0 16
66564: PUSH
66565: LD_INT 2
66567: NEG
66568: PUSH
66569: LD_INT 3
66571: NEG
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 3
66579: NEG
66580: PUSH
66581: LD_INT 2
66583: NEG
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 3
66591: NEG
66592: PUSH
66593: LD_INT 3
66595: NEG
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: LIST
66605: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66606: LD_ADDR_VAR 0 17
66610: PUSH
66611: LD_INT 1
66613: NEG
66614: PUSH
66615: LD_INT 3
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 0
66625: PUSH
66626: LD_INT 3
66628: NEG
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 1
66636: PUSH
66637: LD_INT 2
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: LIST
66649: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66650: LD_ADDR_VAR 0 18
66654: PUSH
66655: LD_INT 2
66657: PUSH
66658: LD_INT 1
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 3
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 3
66678: PUSH
66679: LD_INT 1
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: LIST
66690: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66691: LD_ADDR_VAR 0 19
66695: PUSH
66696: LD_INT 3
66698: PUSH
66699: LD_INT 2
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 3
66708: PUSH
66709: LD_INT 3
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 2
66718: PUSH
66719: LD_INT 3
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: LIST
66730: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66731: LD_ADDR_VAR 0 20
66735: PUSH
66736: LD_INT 1
66738: PUSH
66739: LD_INT 3
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: LD_INT 3
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 1
66758: NEG
66759: PUSH
66760: LD_INT 2
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: LIST
66771: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66772: LD_ADDR_VAR 0 21
66776: PUSH
66777: LD_INT 2
66779: NEG
66780: PUSH
66781: LD_INT 1
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 3
66790: NEG
66791: PUSH
66792: LD_INT 0
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 3
66801: NEG
66802: PUSH
66803: LD_INT 1
66805: NEG
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: LIST
66815: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66816: LD_ADDR_VAR 0 22
66820: PUSH
66821: LD_INT 2
66823: NEG
66824: PUSH
66825: LD_INT 3
66827: NEG
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 3
66835: NEG
66836: PUSH
66837: LD_INT 2
66839: NEG
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 3
66847: NEG
66848: PUSH
66849: LD_INT 3
66851: NEG
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: LIST
66861: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66862: LD_ADDR_VAR 0 23
66866: PUSH
66867: LD_INT 0
66869: PUSH
66870: LD_INT 3
66872: NEG
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 1
66880: NEG
66881: PUSH
66882: LD_INT 4
66884: NEG
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 1
66892: PUSH
66893: LD_INT 3
66895: NEG
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: LIST
66905: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66906: LD_ADDR_VAR 0 24
66910: PUSH
66911: LD_INT 3
66913: PUSH
66914: LD_INT 0
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 3
66923: PUSH
66924: LD_INT 1
66926: NEG
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 4
66934: PUSH
66935: LD_INT 1
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: LIST
66946: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66947: LD_ADDR_VAR 0 25
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: LD_INT 3
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 4
66964: PUSH
66965: LD_INT 3
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 3
66974: PUSH
66975: LD_INT 4
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: LIST
66986: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66987: LD_ADDR_VAR 0 26
66991: PUSH
66992: LD_INT 0
66994: PUSH
66995: LD_INT 3
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 1
67004: PUSH
67005: LD_INT 4
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 1
67014: NEG
67015: PUSH
67016: LD_INT 3
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: LIST
67027: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67028: LD_ADDR_VAR 0 27
67032: PUSH
67033: LD_INT 3
67035: NEG
67036: PUSH
67037: LD_INT 0
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 3
67046: NEG
67047: PUSH
67048: LD_INT 1
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 4
67057: NEG
67058: PUSH
67059: LD_INT 1
67061: NEG
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: LIST
67071: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67072: LD_ADDR_VAR 0 28
67076: PUSH
67077: LD_INT 3
67079: NEG
67080: PUSH
67081: LD_INT 3
67083: NEG
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 3
67091: NEG
67092: PUSH
67093: LD_INT 4
67095: NEG
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 4
67103: NEG
67104: PUSH
67105: LD_INT 3
67107: NEG
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: LIST
67117: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67118: LD_ADDR_VAR 0 29
67122: PUSH
67123: LD_INT 1
67125: NEG
67126: PUSH
67127: LD_INT 3
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 0
67137: PUSH
67138: LD_INT 3
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 1
67148: PUSH
67149: LD_INT 2
67151: NEG
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 1
67159: NEG
67160: PUSH
67161: LD_INT 4
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 0
67171: PUSH
67172: LD_INT 4
67174: NEG
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 1
67182: PUSH
67183: LD_INT 3
67185: NEG
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 1
67193: NEG
67194: PUSH
67195: LD_INT 5
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 0
67205: PUSH
67206: LD_INT 5
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 1
67216: PUSH
67217: LD_INT 4
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 1
67227: NEG
67228: PUSH
67229: LD_INT 6
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: LD_INT 6
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 1
67250: PUSH
67251: LD_INT 5
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67273: LD_ADDR_VAR 0 30
67277: PUSH
67278: LD_INT 2
67280: PUSH
67281: LD_INT 1
67283: NEG
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 3
67291: PUSH
67292: LD_INT 0
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 3
67301: PUSH
67302: LD_INT 1
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 3
67311: PUSH
67312: LD_INT 1
67314: NEG
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 4
67322: PUSH
67323: LD_INT 0
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 4
67332: PUSH
67333: LD_INT 1
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 4
67342: PUSH
67343: LD_INT 1
67345: NEG
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 5
67353: PUSH
67354: LD_INT 0
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 5
67363: PUSH
67364: LD_INT 1
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 5
67373: PUSH
67374: LD_INT 1
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 6
67384: PUSH
67385: LD_INT 0
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 6
67394: PUSH
67395: LD_INT 1
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67416: LD_ADDR_VAR 0 31
67420: PUSH
67421: LD_INT 3
67423: PUSH
67424: LD_INT 2
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 3
67433: PUSH
67434: LD_INT 3
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 2
67443: PUSH
67444: LD_INT 3
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 4
67453: PUSH
67454: LD_INT 3
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 4
67463: PUSH
67464: LD_INT 4
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 3
67473: PUSH
67474: LD_INT 4
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 5
67483: PUSH
67484: LD_INT 4
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 5
67493: PUSH
67494: LD_INT 5
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 4
67503: PUSH
67504: LD_INT 5
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 6
67513: PUSH
67514: LD_INT 5
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 6
67523: PUSH
67524: LD_INT 6
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 5
67533: PUSH
67534: LD_INT 6
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67555: LD_ADDR_VAR 0 32
67559: PUSH
67560: LD_INT 1
67562: PUSH
67563: LD_INT 3
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 0
67572: PUSH
67573: LD_INT 3
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 1
67582: NEG
67583: PUSH
67584: LD_INT 2
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 1
67593: PUSH
67594: LD_INT 4
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 0
67603: PUSH
67604: LD_INT 4
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 1
67613: NEG
67614: PUSH
67615: LD_INT 3
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 1
67624: PUSH
67625: LD_INT 5
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 0
67634: PUSH
67635: LD_INT 5
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 1
67644: NEG
67645: PUSH
67646: LD_INT 4
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 1
67655: PUSH
67656: LD_INT 6
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 0
67665: PUSH
67666: LD_INT 6
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 1
67675: NEG
67676: PUSH
67677: LD_INT 5
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67698: LD_ADDR_VAR 0 33
67702: PUSH
67703: LD_INT 2
67705: NEG
67706: PUSH
67707: LD_INT 1
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 3
67716: NEG
67717: PUSH
67718: LD_INT 0
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 3
67727: NEG
67728: PUSH
67729: LD_INT 1
67731: NEG
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 3
67739: NEG
67740: PUSH
67741: LD_INT 1
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 4
67750: NEG
67751: PUSH
67752: LD_INT 0
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 4
67761: NEG
67762: PUSH
67763: LD_INT 1
67765: NEG
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 4
67773: NEG
67774: PUSH
67775: LD_INT 1
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 5
67784: NEG
67785: PUSH
67786: LD_INT 0
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 5
67795: NEG
67796: PUSH
67797: LD_INT 1
67799: NEG
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 5
67807: NEG
67808: PUSH
67809: LD_INT 1
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 6
67818: NEG
67819: PUSH
67820: LD_INT 0
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_INT 6
67829: NEG
67830: PUSH
67831: LD_INT 1
67833: NEG
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67853: LD_ADDR_VAR 0 34
67857: PUSH
67858: LD_INT 2
67860: NEG
67861: PUSH
67862: LD_INT 3
67864: NEG
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 3
67872: NEG
67873: PUSH
67874: LD_INT 2
67876: NEG
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 3
67884: NEG
67885: PUSH
67886: LD_INT 3
67888: NEG
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 3
67896: NEG
67897: PUSH
67898: LD_INT 4
67900: NEG
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 4
67908: NEG
67909: PUSH
67910: LD_INT 3
67912: NEG
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 4
67920: NEG
67921: PUSH
67922: LD_INT 4
67924: NEG
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 4
67932: NEG
67933: PUSH
67934: LD_INT 5
67936: NEG
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 5
67944: NEG
67945: PUSH
67946: LD_INT 4
67948: NEG
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 5
67956: NEG
67957: PUSH
67958: LD_INT 5
67960: NEG
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 5
67968: NEG
67969: PUSH
67970: LD_INT 6
67972: NEG
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 6
67980: NEG
67981: PUSH
67982: LD_INT 5
67984: NEG
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 6
67992: NEG
67993: PUSH
67994: LD_INT 6
67996: NEG
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68016: LD_ADDR_VAR 0 41
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: LD_INT 2
68026: NEG
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 1
68034: NEG
68035: PUSH
68036: LD_INT 3
68038: NEG
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 1
68046: PUSH
68047: LD_INT 2
68049: NEG
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: LIST
68059: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68060: LD_ADDR_VAR 0 42
68064: PUSH
68065: LD_INT 2
68067: PUSH
68068: LD_INT 0
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 2
68077: PUSH
68078: LD_INT 1
68080: NEG
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 3
68088: PUSH
68089: LD_INT 1
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: LIST
68100: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68101: LD_ADDR_VAR 0 43
68105: PUSH
68106: LD_INT 2
68108: PUSH
68109: LD_INT 2
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 3
68118: PUSH
68119: LD_INT 2
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 2
68128: PUSH
68129: LD_INT 3
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: LIST
68140: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68141: LD_ADDR_VAR 0 44
68145: PUSH
68146: LD_INT 0
68148: PUSH
68149: LD_INT 2
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 1
68158: PUSH
68159: LD_INT 3
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 1
68168: NEG
68169: PUSH
68170: LD_INT 2
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: LIST
68181: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68182: LD_ADDR_VAR 0 45
68186: PUSH
68187: LD_INT 2
68189: NEG
68190: PUSH
68191: LD_INT 0
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 2
68200: NEG
68201: PUSH
68202: LD_INT 1
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 3
68211: NEG
68212: PUSH
68213: LD_INT 1
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: LIST
68225: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68226: LD_ADDR_VAR 0 46
68230: PUSH
68231: LD_INT 2
68233: NEG
68234: PUSH
68235: LD_INT 2
68237: NEG
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 2
68245: NEG
68246: PUSH
68247: LD_INT 3
68249: NEG
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 3
68257: NEG
68258: PUSH
68259: LD_INT 2
68261: NEG
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: LIST
68271: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68272: LD_ADDR_VAR 0 47
68276: PUSH
68277: LD_INT 2
68279: NEG
68280: PUSH
68281: LD_INT 3
68283: NEG
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 1
68291: NEG
68292: PUSH
68293: LD_INT 3
68295: NEG
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68305: LD_ADDR_VAR 0 48
68309: PUSH
68310: LD_INT 1
68312: PUSH
68313: LD_INT 2
68315: NEG
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 2
68323: PUSH
68324: LD_INT 1
68326: NEG
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68336: LD_ADDR_VAR 0 49
68340: PUSH
68341: LD_INT 3
68343: PUSH
68344: LD_INT 1
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 3
68353: PUSH
68354: LD_INT 2
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68365: LD_ADDR_VAR 0 50
68369: PUSH
68370: LD_INT 2
68372: PUSH
68373: LD_INT 3
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 1
68382: PUSH
68383: LD_INT 3
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68394: LD_ADDR_VAR 0 51
68398: PUSH
68399: LD_INT 1
68401: NEG
68402: PUSH
68403: LD_INT 2
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 2
68412: NEG
68413: PUSH
68414: LD_INT 1
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68425: LD_ADDR_VAR 0 52
68429: PUSH
68430: LD_INT 3
68432: NEG
68433: PUSH
68434: LD_INT 1
68436: NEG
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 3
68444: NEG
68445: PUSH
68446: LD_INT 2
68448: NEG
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68458: LD_ADDR_VAR 0 53
68462: PUSH
68463: LD_INT 1
68465: NEG
68466: PUSH
68467: LD_INT 3
68469: NEG
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 0
68477: PUSH
68478: LD_INT 3
68480: NEG
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 1
68488: PUSH
68489: LD_INT 2
68491: NEG
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: LIST
68501: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68502: LD_ADDR_VAR 0 54
68506: PUSH
68507: LD_INT 2
68509: PUSH
68510: LD_INT 1
68512: NEG
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 3
68520: PUSH
68521: LD_INT 0
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 3
68530: PUSH
68531: LD_INT 1
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: LIST
68542: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68543: LD_ADDR_VAR 0 55
68547: PUSH
68548: LD_INT 3
68550: PUSH
68551: LD_INT 2
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: PUSH
68558: LD_INT 3
68560: PUSH
68561: LD_INT 3
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 2
68570: PUSH
68571: LD_INT 3
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: LIST
68582: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68583: LD_ADDR_VAR 0 56
68587: PUSH
68588: LD_INT 1
68590: PUSH
68591: LD_INT 3
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 0
68600: PUSH
68601: LD_INT 3
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 1
68610: NEG
68611: PUSH
68612: LD_INT 2
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: LIST
68623: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68624: LD_ADDR_VAR 0 57
68628: PUSH
68629: LD_INT 2
68631: NEG
68632: PUSH
68633: LD_INT 1
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 3
68642: NEG
68643: PUSH
68644: LD_INT 0
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 3
68653: NEG
68654: PUSH
68655: LD_INT 1
68657: NEG
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: LIST
68667: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68668: LD_ADDR_VAR 0 58
68672: PUSH
68673: LD_INT 2
68675: NEG
68676: PUSH
68677: LD_INT 3
68679: NEG
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 3
68687: NEG
68688: PUSH
68689: LD_INT 2
68691: NEG
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 3
68699: NEG
68700: PUSH
68701: LD_INT 3
68703: NEG
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: LIST
68713: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68714: LD_ADDR_VAR 0 59
68718: PUSH
68719: LD_INT 1
68721: NEG
68722: PUSH
68723: LD_INT 2
68725: NEG
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 0
68733: PUSH
68734: LD_INT 2
68736: NEG
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 1
68744: PUSH
68745: LD_INT 1
68747: NEG
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: LIST
68757: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68758: LD_ADDR_VAR 0 60
68762: PUSH
68763: LD_INT 1
68765: PUSH
68766: LD_INT 1
68768: NEG
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 2
68776: PUSH
68777: LD_INT 0
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 2
68786: PUSH
68787: LD_INT 1
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: LIST
68798: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68799: LD_ADDR_VAR 0 61
68803: PUSH
68804: LD_INT 2
68806: PUSH
68807: LD_INT 1
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 2
68816: PUSH
68817: LD_INT 2
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 1
68826: PUSH
68827: LD_INT 2
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: LIST
68838: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68839: LD_ADDR_VAR 0 62
68843: PUSH
68844: LD_INT 1
68846: PUSH
68847: LD_INT 2
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 0
68856: PUSH
68857: LD_INT 2
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 1
68866: NEG
68867: PUSH
68868: LD_INT 1
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: LIST
68879: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68880: LD_ADDR_VAR 0 63
68884: PUSH
68885: LD_INT 1
68887: NEG
68888: PUSH
68889: LD_INT 1
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 2
68898: NEG
68899: PUSH
68900: LD_INT 0
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 2
68909: NEG
68910: PUSH
68911: LD_INT 1
68913: NEG
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: LIST
68923: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68924: LD_ADDR_VAR 0 64
68928: PUSH
68929: LD_INT 1
68931: NEG
68932: PUSH
68933: LD_INT 2
68935: NEG
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 2
68943: NEG
68944: PUSH
68945: LD_INT 1
68947: NEG
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 2
68955: NEG
68956: PUSH
68957: LD_INT 2
68959: NEG
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: LIST
68969: ST_TO_ADDR
// end ; 2 :
68970: GO 72236
68972: LD_INT 2
68974: DOUBLE
68975: EQUAL
68976: IFTRUE 68980
68978: GO 72235
68980: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68981: LD_ADDR_VAR 0 29
68985: PUSH
68986: LD_INT 4
68988: PUSH
68989: LD_INT 0
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 4
68998: PUSH
68999: LD_INT 1
69001: NEG
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 5
69009: PUSH
69010: LD_INT 0
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 5
69019: PUSH
69020: LD_INT 1
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 4
69029: PUSH
69030: LD_INT 1
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 3
69039: PUSH
69040: LD_INT 0
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 3
69049: PUSH
69050: LD_INT 1
69052: NEG
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 3
69060: PUSH
69061: LD_INT 2
69063: NEG
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 5
69071: PUSH
69072: LD_INT 2
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 3
69081: PUSH
69082: LD_INT 3
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 3
69091: PUSH
69092: LD_INT 2
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 4
69101: PUSH
69102: LD_INT 3
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 4
69111: PUSH
69112: LD_INT 4
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 3
69121: PUSH
69122: LD_INT 4
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 2
69131: PUSH
69132: LD_INT 3
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 2
69141: PUSH
69142: LD_INT 2
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 4
69151: PUSH
69152: LD_INT 2
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 2
69161: PUSH
69162: LD_INT 4
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 0
69171: PUSH
69172: LD_INT 4
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 0
69181: PUSH
69182: LD_INT 3
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 1
69191: PUSH
69192: LD_INT 4
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 1
69201: PUSH
69202: LD_INT 5
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 0
69211: PUSH
69212: LD_INT 5
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 1
69221: NEG
69222: PUSH
69223: LD_INT 4
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 1
69232: NEG
69233: PUSH
69234: LD_INT 3
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 2
69243: PUSH
69244: LD_INT 5
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PUSH
69251: LD_INT 2
69253: NEG
69254: PUSH
69255: LD_INT 3
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 3
69264: NEG
69265: PUSH
69266: LD_INT 0
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 3
69275: NEG
69276: PUSH
69277: LD_INT 1
69279: NEG
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 2
69287: NEG
69288: PUSH
69289: LD_INT 0
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 2
69298: NEG
69299: PUSH
69300: LD_INT 1
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 3
69309: NEG
69310: PUSH
69311: LD_INT 1
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: LD_INT 4
69320: NEG
69321: PUSH
69322: LD_INT 0
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 4
69331: NEG
69332: PUSH
69333: LD_INT 1
69335: NEG
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 4
69343: NEG
69344: PUSH
69345: LD_INT 2
69347: NEG
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 2
69355: NEG
69356: PUSH
69357: LD_INT 2
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 4
69366: NEG
69367: PUSH
69368: LD_INT 4
69370: NEG
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 4
69378: NEG
69379: PUSH
69380: LD_INT 5
69382: NEG
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 3
69390: NEG
69391: PUSH
69392: LD_INT 4
69394: NEG
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PUSH
69400: LD_INT 3
69402: NEG
69403: PUSH
69404: LD_INT 3
69406: NEG
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 4
69414: NEG
69415: PUSH
69416: LD_INT 3
69418: NEG
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 5
69426: NEG
69427: PUSH
69428: LD_INT 4
69430: NEG
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 5
69438: NEG
69439: PUSH
69440: LD_INT 5
69442: NEG
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 3
69450: NEG
69451: PUSH
69452: LD_INT 5
69454: NEG
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 5
69462: NEG
69463: PUSH
69464: LD_INT 3
69466: NEG
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: LIST
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69519: LD_ADDR_VAR 0 30
69523: PUSH
69524: LD_INT 4
69526: PUSH
69527: LD_INT 4
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 4
69536: PUSH
69537: LD_INT 3
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 5
69546: PUSH
69547: LD_INT 4
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 5
69556: PUSH
69557: LD_INT 5
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 4
69566: PUSH
69567: LD_INT 5
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 3
69576: PUSH
69577: LD_INT 4
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 3
69586: PUSH
69587: LD_INT 3
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 5
69596: PUSH
69597: LD_INT 3
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 3
69606: PUSH
69607: LD_INT 5
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 0
69616: PUSH
69617: LD_INT 3
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 0
69626: PUSH
69627: LD_INT 2
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: LD_INT 1
69636: PUSH
69637: LD_INT 3
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 1
69646: PUSH
69647: LD_INT 4
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 0
69656: PUSH
69657: LD_INT 4
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: LD_INT 1
69666: NEG
69667: PUSH
69668: LD_INT 3
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: LD_INT 1
69677: NEG
69678: PUSH
69679: LD_INT 2
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 2
69688: PUSH
69689: LD_INT 4
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 2
69698: NEG
69699: PUSH
69700: LD_INT 2
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 4
69709: NEG
69710: PUSH
69711: LD_INT 0
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 4
69720: NEG
69721: PUSH
69722: LD_INT 1
69724: NEG
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 3
69732: NEG
69733: PUSH
69734: LD_INT 0
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 3
69743: NEG
69744: PUSH
69745: LD_INT 1
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 4
69754: NEG
69755: PUSH
69756: LD_INT 1
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: LD_INT 5
69765: NEG
69766: PUSH
69767: LD_INT 0
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PUSH
69774: LD_INT 5
69776: NEG
69777: PUSH
69778: LD_INT 1
69780: NEG
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 5
69788: NEG
69789: PUSH
69790: LD_INT 2
69792: NEG
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 3
69800: NEG
69801: PUSH
69802: LD_INT 2
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 3
69811: NEG
69812: PUSH
69813: LD_INT 3
69815: NEG
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 3
69823: NEG
69824: PUSH
69825: LD_INT 4
69827: NEG
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 2
69835: NEG
69836: PUSH
69837: LD_INT 3
69839: NEG
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 2
69847: NEG
69848: PUSH
69849: LD_INT 2
69851: NEG
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 3
69859: NEG
69860: PUSH
69861: LD_INT 2
69863: NEG
69864: PUSH
69865: EMPTY
69866: LIST
69867: LIST
69868: PUSH
69869: LD_INT 4
69871: NEG
69872: PUSH
69873: LD_INT 3
69875: NEG
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 4
69883: NEG
69884: PUSH
69885: LD_INT 4
69887: NEG
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 2
69895: NEG
69896: PUSH
69897: LD_INT 4
69899: NEG
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 4
69907: NEG
69908: PUSH
69909: LD_INT 2
69911: NEG
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 0
69919: PUSH
69920: LD_INT 4
69922: NEG
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 0
69930: PUSH
69931: LD_INT 5
69933: NEG
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 1
69941: PUSH
69942: LD_INT 4
69944: NEG
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 1
69952: PUSH
69953: LD_INT 3
69955: NEG
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 0
69963: PUSH
69964: LD_INT 3
69966: NEG
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 1
69974: NEG
69975: PUSH
69976: LD_INT 4
69978: NEG
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 1
69986: NEG
69987: PUSH
69988: LD_INT 5
69990: NEG
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 2
69998: PUSH
69999: LD_INT 3
70001: NEG
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 2
70009: NEG
70010: PUSH
70011: LD_INT 5
70013: NEG
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70066: LD_ADDR_VAR 0 31
70070: PUSH
70071: LD_INT 0
70073: PUSH
70074: LD_INT 4
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 0
70083: PUSH
70084: LD_INT 3
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 1
70093: PUSH
70094: LD_INT 4
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 1
70103: PUSH
70104: LD_INT 5
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 0
70113: PUSH
70114: LD_INT 5
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 1
70123: NEG
70124: PUSH
70125: LD_INT 4
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 1
70134: NEG
70135: PUSH
70136: LD_INT 3
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 2
70145: PUSH
70146: LD_INT 5
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 2
70155: NEG
70156: PUSH
70157: LD_INT 3
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: LD_INT 3
70166: NEG
70167: PUSH
70168: LD_INT 0
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 3
70177: NEG
70178: PUSH
70179: LD_INT 1
70181: NEG
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 2
70189: NEG
70190: PUSH
70191: LD_INT 0
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 2
70200: NEG
70201: PUSH
70202: LD_INT 1
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 3
70211: NEG
70212: PUSH
70213: LD_INT 1
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 4
70222: NEG
70223: PUSH
70224: LD_INT 0
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 4
70233: NEG
70234: PUSH
70235: LD_INT 1
70237: NEG
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 4
70245: NEG
70246: PUSH
70247: LD_INT 2
70249: NEG
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 2
70257: NEG
70258: PUSH
70259: LD_INT 2
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 4
70268: NEG
70269: PUSH
70270: LD_INT 4
70272: NEG
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 4
70280: NEG
70281: PUSH
70282: LD_INT 5
70284: NEG
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 3
70292: NEG
70293: PUSH
70294: LD_INT 4
70296: NEG
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: LD_INT 3
70304: NEG
70305: PUSH
70306: LD_INT 3
70308: NEG
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 4
70316: NEG
70317: PUSH
70318: LD_INT 3
70320: NEG
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PUSH
70326: LD_INT 5
70328: NEG
70329: PUSH
70330: LD_INT 4
70332: NEG
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 5
70340: NEG
70341: PUSH
70342: LD_INT 5
70344: NEG
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 3
70352: NEG
70353: PUSH
70354: LD_INT 5
70356: NEG
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 5
70364: NEG
70365: PUSH
70366: LD_INT 3
70368: NEG
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 0
70376: PUSH
70377: LD_INT 3
70379: NEG
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 0
70387: PUSH
70388: LD_INT 4
70390: NEG
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: PUSH
70396: LD_INT 1
70398: PUSH
70399: LD_INT 3
70401: NEG
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 1
70409: PUSH
70410: LD_INT 2
70412: NEG
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 0
70420: PUSH
70421: LD_INT 2
70423: NEG
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 1
70431: NEG
70432: PUSH
70433: LD_INT 3
70435: NEG
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 1
70443: NEG
70444: PUSH
70445: LD_INT 4
70447: NEG
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 2
70455: PUSH
70456: LD_INT 2
70458: NEG
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 2
70466: NEG
70467: PUSH
70468: LD_INT 4
70470: NEG
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 4
70478: PUSH
70479: LD_INT 0
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 4
70488: PUSH
70489: LD_INT 1
70491: NEG
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 5
70499: PUSH
70500: LD_INT 0
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_INT 5
70509: PUSH
70510: LD_INT 1
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 4
70519: PUSH
70520: LD_INT 1
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 3
70529: PUSH
70530: LD_INT 0
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: PUSH
70537: LD_INT 3
70539: PUSH
70540: LD_INT 1
70542: NEG
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: PUSH
70548: LD_INT 3
70550: PUSH
70551: LD_INT 2
70553: NEG
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 5
70561: PUSH
70562: LD_INT 2
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70616: LD_ADDR_VAR 0 32
70620: PUSH
70621: LD_INT 4
70623: NEG
70624: PUSH
70625: LD_INT 0
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 4
70634: NEG
70635: PUSH
70636: LD_INT 1
70638: NEG
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 3
70646: NEG
70647: PUSH
70648: LD_INT 0
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 3
70657: NEG
70658: PUSH
70659: LD_INT 1
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 4
70668: NEG
70669: PUSH
70670: LD_INT 1
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: LD_INT 5
70679: NEG
70680: PUSH
70681: LD_INT 0
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PUSH
70688: LD_INT 5
70690: NEG
70691: PUSH
70692: LD_INT 1
70694: NEG
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PUSH
70700: LD_INT 5
70702: NEG
70703: PUSH
70704: LD_INT 2
70706: NEG
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 3
70714: NEG
70715: PUSH
70716: LD_INT 2
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 3
70725: NEG
70726: PUSH
70727: LD_INT 3
70729: NEG
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 3
70737: NEG
70738: PUSH
70739: LD_INT 4
70741: NEG
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 2
70749: NEG
70750: PUSH
70751: LD_INT 3
70753: NEG
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 2
70761: NEG
70762: PUSH
70763: LD_INT 2
70765: NEG
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: PUSH
70771: LD_INT 3
70773: NEG
70774: PUSH
70775: LD_INT 2
70777: NEG
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: PUSH
70783: LD_INT 4
70785: NEG
70786: PUSH
70787: LD_INT 3
70789: NEG
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 4
70797: NEG
70798: PUSH
70799: LD_INT 4
70801: NEG
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 2
70809: NEG
70810: PUSH
70811: LD_INT 4
70813: NEG
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 4
70821: NEG
70822: PUSH
70823: LD_INT 2
70825: NEG
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 0
70833: PUSH
70834: LD_INT 4
70836: NEG
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 0
70844: PUSH
70845: LD_INT 5
70847: NEG
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 1
70855: PUSH
70856: LD_INT 4
70858: NEG
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 1
70866: PUSH
70867: LD_INT 3
70869: NEG
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 0
70877: PUSH
70878: LD_INT 3
70880: NEG
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 1
70888: NEG
70889: PUSH
70890: LD_INT 4
70892: NEG
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 1
70900: NEG
70901: PUSH
70902: LD_INT 5
70904: NEG
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 2
70912: PUSH
70913: LD_INT 3
70915: NEG
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 2
70923: NEG
70924: PUSH
70925: LD_INT 5
70927: NEG
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 3
70935: PUSH
70936: LD_INT 0
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 3
70945: PUSH
70946: LD_INT 1
70948: NEG
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 4
70956: PUSH
70957: LD_INT 0
70959: PUSH
70960: EMPTY
70961: LIST
70962: LIST
70963: PUSH
70964: LD_INT 4
70966: PUSH
70967: LD_INT 1
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: LD_INT 3
70976: PUSH
70977: LD_INT 1
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 2
70986: PUSH
70987: LD_INT 0
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PUSH
70994: LD_INT 2
70996: PUSH
70997: LD_INT 1
70999: NEG
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: LD_INT 2
71007: PUSH
71008: LD_INT 2
71010: NEG
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: PUSH
71016: LD_INT 4
71018: PUSH
71019: LD_INT 2
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: LD_INT 4
71028: PUSH
71029: LD_INT 4
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: LD_INT 4
71038: PUSH
71039: LD_INT 3
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 5
71048: PUSH
71049: LD_INT 4
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 5
71058: PUSH
71059: LD_INT 5
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 4
71068: PUSH
71069: LD_INT 5
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 3
71078: PUSH
71079: LD_INT 4
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_INT 3
71088: PUSH
71089: LD_INT 3
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PUSH
71096: LD_INT 5
71098: PUSH
71099: LD_INT 3
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 3
71108: PUSH
71109: LD_INT 5
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: LIST
71137: LIST
71138: LIST
71139: LIST
71140: LIST
71141: LIST
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71163: LD_ADDR_VAR 0 33
71167: PUSH
71168: LD_INT 4
71170: NEG
71171: PUSH
71172: LD_INT 4
71174: NEG
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: PUSH
71180: LD_INT 4
71182: NEG
71183: PUSH
71184: LD_INT 5
71186: NEG
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: LD_INT 3
71194: NEG
71195: PUSH
71196: LD_INT 4
71198: NEG
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 3
71206: NEG
71207: PUSH
71208: LD_INT 3
71210: NEG
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: LD_INT 4
71218: NEG
71219: PUSH
71220: LD_INT 3
71222: NEG
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: LD_INT 5
71230: NEG
71231: PUSH
71232: LD_INT 4
71234: NEG
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PUSH
71240: LD_INT 5
71242: NEG
71243: PUSH
71244: LD_INT 5
71246: NEG
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 3
71254: NEG
71255: PUSH
71256: LD_INT 5
71258: NEG
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 5
71266: NEG
71267: PUSH
71268: LD_INT 3
71270: NEG
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 0
71278: PUSH
71279: LD_INT 3
71281: NEG
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 0
71289: PUSH
71290: LD_INT 4
71292: NEG
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 1
71300: PUSH
71301: LD_INT 3
71303: NEG
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 1
71311: PUSH
71312: LD_INT 2
71314: NEG
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 0
71322: PUSH
71323: LD_INT 2
71325: NEG
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 1
71333: NEG
71334: PUSH
71335: LD_INT 3
71337: NEG
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 1
71345: NEG
71346: PUSH
71347: LD_INT 4
71349: NEG
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 2
71357: PUSH
71358: LD_INT 2
71360: NEG
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 2
71368: NEG
71369: PUSH
71370: LD_INT 4
71372: NEG
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 4
71380: PUSH
71381: LD_INT 0
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 4
71390: PUSH
71391: LD_INT 1
71393: NEG
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 5
71401: PUSH
71402: LD_INT 0
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 5
71411: PUSH
71412: LD_INT 1
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 4
71421: PUSH
71422: LD_INT 1
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 3
71431: PUSH
71432: LD_INT 0
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 3
71441: PUSH
71442: LD_INT 1
71444: NEG
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: PUSH
71450: LD_INT 3
71452: PUSH
71453: LD_INT 2
71455: NEG
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PUSH
71461: LD_INT 5
71463: PUSH
71464: LD_INT 2
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 3
71473: PUSH
71474: LD_INT 3
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 3
71483: PUSH
71484: LD_INT 2
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: LD_INT 4
71493: PUSH
71494: LD_INT 3
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: PUSH
71501: LD_INT 4
71503: PUSH
71504: LD_INT 4
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: LD_INT 3
71513: PUSH
71514: LD_INT 4
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 2
71523: PUSH
71524: LD_INT 3
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 2
71533: PUSH
71534: LD_INT 2
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: LD_INT 4
71543: PUSH
71544: LD_INT 2
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 2
71553: PUSH
71554: LD_INT 4
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PUSH
71561: LD_INT 0
71563: PUSH
71564: LD_INT 4
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: LD_INT 0
71573: PUSH
71574: LD_INT 3
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: LD_INT 1
71583: PUSH
71584: LD_INT 4
71586: PUSH
71587: EMPTY
71588: LIST
71589: LIST
71590: PUSH
71591: LD_INT 1
71593: PUSH
71594: LD_INT 5
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: PUSH
71601: LD_INT 0
71603: PUSH
71604: LD_INT 5
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 1
71613: NEG
71614: PUSH
71615: LD_INT 4
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PUSH
71622: LD_INT 1
71624: NEG
71625: PUSH
71626: LD_INT 3
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 2
71635: PUSH
71636: LD_INT 5
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: LD_INT 2
71645: NEG
71646: PUSH
71647: LD_INT 3
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: LIST
71682: LIST
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71701: LD_ADDR_VAR 0 34
71705: PUSH
71706: LD_INT 0
71708: PUSH
71709: LD_INT 4
71711: NEG
71712: PUSH
71713: EMPTY
71714: LIST
71715: LIST
71716: PUSH
71717: LD_INT 0
71719: PUSH
71720: LD_INT 5
71722: NEG
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: LD_INT 1
71730: PUSH
71731: LD_INT 4
71733: NEG
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 1
71741: PUSH
71742: LD_INT 3
71744: NEG
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 0
71752: PUSH
71753: LD_INT 3
71755: NEG
71756: PUSH
71757: EMPTY
71758: LIST
71759: LIST
71760: PUSH
71761: LD_INT 1
71763: NEG
71764: PUSH
71765: LD_INT 4
71767: NEG
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: LD_INT 1
71775: NEG
71776: PUSH
71777: LD_INT 5
71779: NEG
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 2
71787: PUSH
71788: LD_INT 3
71790: NEG
71791: PUSH
71792: EMPTY
71793: LIST
71794: LIST
71795: PUSH
71796: LD_INT 2
71798: NEG
71799: PUSH
71800: LD_INT 5
71802: NEG
71803: PUSH
71804: EMPTY
71805: LIST
71806: LIST
71807: PUSH
71808: LD_INT 3
71810: PUSH
71811: LD_INT 0
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 3
71820: PUSH
71821: LD_INT 1
71823: NEG
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 4
71831: PUSH
71832: LD_INT 0
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PUSH
71839: LD_INT 4
71841: PUSH
71842: LD_INT 1
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 3
71851: PUSH
71852: LD_INT 1
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_INT 2
71861: PUSH
71862: LD_INT 0
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 2
71871: PUSH
71872: LD_INT 1
71874: NEG
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: LD_INT 2
71882: PUSH
71883: LD_INT 2
71885: NEG
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 4
71893: PUSH
71894: LD_INT 2
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: LD_INT 4
71903: PUSH
71904: LD_INT 4
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PUSH
71911: LD_INT 4
71913: PUSH
71914: LD_INT 3
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 5
71923: PUSH
71924: LD_INT 4
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: LD_INT 5
71933: PUSH
71934: LD_INT 5
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: PUSH
71941: LD_INT 4
71943: PUSH
71944: LD_INT 5
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: PUSH
71951: LD_INT 3
71953: PUSH
71954: LD_INT 4
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PUSH
71961: LD_INT 3
71963: PUSH
71964: LD_INT 3
71966: PUSH
71967: EMPTY
71968: LIST
71969: LIST
71970: PUSH
71971: LD_INT 5
71973: PUSH
71974: LD_INT 3
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: PUSH
71981: LD_INT 3
71983: PUSH
71984: LD_INT 5
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 0
71993: PUSH
71994: LD_INT 3
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 0
72003: PUSH
72004: LD_INT 2
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 1
72013: PUSH
72014: LD_INT 3
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 1
72023: PUSH
72024: LD_INT 4
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PUSH
72031: LD_INT 0
72033: PUSH
72034: LD_INT 4
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 1
72043: NEG
72044: PUSH
72045: LD_INT 3
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: LD_INT 1
72054: NEG
72055: PUSH
72056: LD_INT 2
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: PUSH
72063: LD_INT 2
72065: PUSH
72066: LD_INT 4
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: PUSH
72073: LD_INT 2
72075: NEG
72076: PUSH
72077: LD_INT 2
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 4
72086: NEG
72087: PUSH
72088: LD_INT 0
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: PUSH
72095: LD_INT 4
72097: NEG
72098: PUSH
72099: LD_INT 1
72101: NEG
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: PUSH
72107: LD_INT 3
72109: NEG
72110: PUSH
72111: LD_INT 0
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: PUSH
72118: LD_INT 3
72120: NEG
72121: PUSH
72122: LD_INT 1
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: PUSH
72129: LD_INT 4
72131: NEG
72132: PUSH
72133: LD_INT 1
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: LD_INT 5
72142: NEG
72143: PUSH
72144: LD_INT 0
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PUSH
72151: LD_INT 5
72153: NEG
72154: PUSH
72155: LD_INT 1
72157: NEG
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PUSH
72163: LD_INT 5
72165: NEG
72166: PUSH
72167: LD_INT 2
72169: NEG
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PUSH
72175: LD_INT 3
72177: NEG
72178: PUSH
72179: LD_INT 2
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: LIST
72216: LIST
72217: LIST
72218: LIST
72219: LIST
72220: LIST
72221: LIST
72222: LIST
72223: LIST
72224: LIST
72225: LIST
72226: LIST
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: ST_TO_ADDR
// end ; end ;
72233: GO 72236
72235: POP
// case btype of b_depot , b_warehouse :
72236: LD_VAR 0 1
72240: PUSH
72241: LD_INT 0
72243: DOUBLE
72244: EQUAL
72245: IFTRUE 72255
72247: LD_INT 1
72249: DOUBLE
72250: EQUAL
72251: IFTRUE 72255
72253: GO 72456
72255: POP
// case nation of nation_american :
72256: LD_VAR 0 5
72260: PUSH
72261: LD_INT 1
72263: DOUBLE
72264: EQUAL
72265: IFTRUE 72269
72267: GO 72325
72269: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72270: LD_ADDR_VAR 0 9
72274: PUSH
72275: LD_VAR 0 11
72279: PUSH
72280: LD_VAR 0 12
72284: PUSH
72285: LD_VAR 0 13
72289: PUSH
72290: LD_VAR 0 14
72294: PUSH
72295: LD_VAR 0 15
72299: PUSH
72300: LD_VAR 0 16
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: LIST
72311: LIST
72312: PUSH
72313: LD_VAR 0 4
72317: PUSH
72318: LD_INT 1
72320: PLUS
72321: ARRAY
72322: ST_TO_ADDR
72323: GO 72454
72325: LD_INT 2
72327: DOUBLE
72328: EQUAL
72329: IFTRUE 72333
72331: GO 72389
72333: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72334: LD_ADDR_VAR 0 9
72338: PUSH
72339: LD_VAR 0 17
72343: PUSH
72344: LD_VAR 0 18
72348: PUSH
72349: LD_VAR 0 19
72353: PUSH
72354: LD_VAR 0 20
72358: PUSH
72359: LD_VAR 0 21
72363: PUSH
72364: LD_VAR 0 22
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: LIST
72373: LIST
72374: LIST
72375: LIST
72376: PUSH
72377: LD_VAR 0 4
72381: PUSH
72382: LD_INT 1
72384: PLUS
72385: ARRAY
72386: ST_TO_ADDR
72387: GO 72454
72389: LD_INT 3
72391: DOUBLE
72392: EQUAL
72393: IFTRUE 72397
72395: GO 72453
72397: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72398: LD_ADDR_VAR 0 9
72402: PUSH
72403: LD_VAR 0 23
72407: PUSH
72408: LD_VAR 0 24
72412: PUSH
72413: LD_VAR 0 25
72417: PUSH
72418: LD_VAR 0 26
72422: PUSH
72423: LD_VAR 0 27
72427: PUSH
72428: LD_VAR 0 28
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: LIST
72437: LIST
72438: LIST
72439: LIST
72440: PUSH
72441: LD_VAR 0 4
72445: PUSH
72446: LD_INT 1
72448: PLUS
72449: ARRAY
72450: ST_TO_ADDR
72451: GO 72454
72453: POP
72454: GO 73009
72456: LD_INT 2
72458: DOUBLE
72459: EQUAL
72460: IFTRUE 72470
72462: LD_INT 3
72464: DOUBLE
72465: EQUAL
72466: IFTRUE 72470
72468: GO 72526
72470: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72471: LD_ADDR_VAR 0 9
72475: PUSH
72476: LD_VAR 0 29
72480: PUSH
72481: LD_VAR 0 30
72485: PUSH
72486: LD_VAR 0 31
72490: PUSH
72491: LD_VAR 0 32
72495: PUSH
72496: LD_VAR 0 33
72500: PUSH
72501: LD_VAR 0 34
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: PUSH
72514: LD_VAR 0 4
72518: PUSH
72519: LD_INT 1
72521: PLUS
72522: ARRAY
72523: ST_TO_ADDR
72524: GO 73009
72526: LD_INT 16
72528: DOUBLE
72529: EQUAL
72530: IFTRUE 72588
72532: LD_INT 17
72534: DOUBLE
72535: EQUAL
72536: IFTRUE 72588
72538: LD_INT 18
72540: DOUBLE
72541: EQUAL
72542: IFTRUE 72588
72544: LD_INT 19
72546: DOUBLE
72547: EQUAL
72548: IFTRUE 72588
72550: LD_INT 22
72552: DOUBLE
72553: EQUAL
72554: IFTRUE 72588
72556: LD_INT 20
72558: DOUBLE
72559: EQUAL
72560: IFTRUE 72588
72562: LD_INT 21
72564: DOUBLE
72565: EQUAL
72566: IFTRUE 72588
72568: LD_INT 23
72570: DOUBLE
72571: EQUAL
72572: IFTRUE 72588
72574: LD_INT 24
72576: DOUBLE
72577: EQUAL
72578: IFTRUE 72588
72580: LD_INT 25
72582: DOUBLE
72583: EQUAL
72584: IFTRUE 72588
72586: GO 72644
72588: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72589: LD_ADDR_VAR 0 9
72593: PUSH
72594: LD_VAR 0 35
72598: PUSH
72599: LD_VAR 0 36
72603: PUSH
72604: LD_VAR 0 37
72608: PUSH
72609: LD_VAR 0 38
72613: PUSH
72614: LD_VAR 0 39
72618: PUSH
72619: LD_VAR 0 40
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: PUSH
72632: LD_VAR 0 4
72636: PUSH
72637: LD_INT 1
72639: PLUS
72640: ARRAY
72641: ST_TO_ADDR
72642: GO 73009
72644: LD_INT 6
72646: DOUBLE
72647: EQUAL
72648: IFTRUE 72700
72650: LD_INT 7
72652: DOUBLE
72653: EQUAL
72654: IFTRUE 72700
72656: LD_INT 8
72658: DOUBLE
72659: EQUAL
72660: IFTRUE 72700
72662: LD_INT 13
72664: DOUBLE
72665: EQUAL
72666: IFTRUE 72700
72668: LD_INT 12
72670: DOUBLE
72671: EQUAL
72672: IFTRUE 72700
72674: LD_INT 15
72676: DOUBLE
72677: EQUAL
72678: IFTRUE 72700
72680: LD_INT 11
72682: DOUBLE
72683: EQUAL
72684: IFTRUE 72700
72686: LD_INT 14
72688: DOUBLE
72689: EQUAL
72690: IFTRUE 72700
72692: LD_INT 10
72694: DOUBLE
72695: EQUAL
72696: IFTRUE 72700
72698: GO 72756
72700: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72701: LD_ADDR_VAR 0 9
72705: PUSH
72706: LD_VAR 0 41
72710: PUSH
72711: LD_VAR 0 42
72715: PUSH
72716: LD_VAR 0 43
72720: PUSH
72721: LD_VAR 0 44
72725: PUSH
72726: LD_VAR 0 45
72730: PUSH
72731: LD_VAR 0 46
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: PUSH
72744: LD_VAR 0 4
72748: PUSH
72749: LD_INT 1
72751: PLUS
72752: ARRAY
72753: ST_TO_ADDR
72754: GO 73009
72756: LD_INT 36
72758: DOUBLE
72759: EQUAL
72760: IFTRUE 72764
72762: GO 72820
72764: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72765: LD_ADDR_VAR 0 9
72769: PUSH
72770: LD_VAR 0 47
72774: PUSH
72775: LD_VAR 0 48
72779: PUSH
72780: LD_VAR 0 49
72784: PUSH
72785: LD_VAR 0 50
72789: PUSH
72790: LD_VAR 0 51
72794: PUSH
72795: LD_VAR 0 52
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: LIST
72807: PUSH
72808: LD_VAR 0 4
72812: PUSH
72813: LD_INT 1
72815: PLUS
72816: ARRAY
72817: ST_TO_ADDR
72818: GO 73009
72820: LD_INT 4
72822: DOUBLE
72823: EQUAL
72824: IFTRUE 72846
72826: LD_INT 5
72828: DOUBLE
72829: EQUAL
72830: IFTRUE 72846
72832: LD_INT 34
72834: DOUBLE
72835: EQUAL
72836: IFTRUE 72846
72838: LD_INT 37
72840: DOUBLE
72841: EQUAL
72842: IFTRUE 72846
72844: GO 72902
72846: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72847: LD_ADDR_VAR 0 9
72851: PUSH
72852: LD_VAR 0 53
72856: PUSH
72857: LD_VAR 0 54
72861: PUSH
72862: LD_VAR 0 55
72866: PUSH
72867: LD_VAR 0 56
72871: PUSH
72872: LD_VAR 0 57
72876: PUSH
72877: LD_VAR 0 58
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: PUSH
72890: LD_VAR 0 4
72894: PUSH
72895: LD_INT 1
72897: PLUS
72898: ARRAY
72899: ST_TO_ADDR
72900: GO 73009
72902: LD_INT 31
72904: DOUBLE
72905: EQUAL
72906: IFTRUE 72952
72908: LD_INT 32
72910: DOUBLE
72911: EQUAL
72912: IFTRUE 72952
72914: LD_INT 33
72916: DOUBLE
72917: EQUAL
72918: IFTRUE 72952
72920: LD_INT 27
72922: DOUBLE
72923: EQUAL
72924: IFTRUE 72952
72926: LD_INT 26
72928: DOUBLE
72929: EQUAL
72930: IFTRUE 72952
72932: LD_INT 28
72934: DOUBLE
72935: EQUAL
72936: IFTRUE 72952
72938: LD_INT 29
72940: DOUBLE
72941: EQUAL
72942: IFTRUE 72952
72944: LD_INT 30
72946: DOUBLE
72947: EQUAL
72948: IFTRUE 72952
72950: GO 73008
72952: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72953: LD_ADDR_VAR 0 9
72957: PUSH
72958: LD_VAR 0 59
72962: PUSH
72963: LD_VAR 0 60
72967: PUSH
72968: LD_VAR 0 61
72972: PUSH
72973: LD_VAR 0 62
72977: PUSH
72978: LD_VAR 0 63
72982: PUSH
72983: LD_VAR 0 64
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: LIST
72992: LIST
72993: LIST
72994: LIST
72995: PUSH
72996: LD_VAR 0 4
73000: PUSH
73001: LD_INT 1
73003: PLUS
73004: ARRAY
73005: ST_TO_ADDR
73006: GO 73009
73008: POP
// temp_list2 = [ ] ;
73009: LD_ADDR_VAR 0 10
73013: PUSH
73014: EMPTY
73015: ST_TO_ADDR
// for i in temp_list do
73016: LD_ADDR_VAR 0 8
73020: PUSH
73021: LD_VAR 0 9
73025: PUSH
73026: FOR_IN
73027: IFFALSE 73079
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73029: LD_ADDR_VAR 0 10
73033: PUSH
73034: LD_VAR 0 10
73038: PUSH
73039: LD_VAR 0 8
73043: PUSH
73044: LD_INT 1
73046: ARRAY
73047: PUSH
73048: LD_VAR 0 2
73052: PLUS
73053: PUSH
73054: LD_VAR 0 8
73058: PUSH
73059: LD_INT 2
73061: ARRAY
73062: PUSH
73063: LD_VAR 0 3
73067: PLUS
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PUSH
73073: EMPTY
73074: LIST
73075: ADD
73076: ST_TO_ADDR
73077: GO 73026
73079: POP
73080: POP
// result = temp_list2 ;
73081: LD_ADDR_VAR 0 7
73085: PUSH
73086: LD_VAR 0 10
73090: ST_TO_ADDR
// end ;
73091: LD_VAR 0 7
73095: RET
// export function EnemyInRange ( unit , dist ) ; begin
73096: LD_INT 0
73098: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73099: LD_ADDR_VAR 0 3
73103: PUSH
73104: LD_VAR 0 1
73108: PPUSH
73109: CALL_OW 255
73113: PPUSH
73114: LD_VAR 0 1
73118: PPUSH
73119: CALL_OW 250
73123: PPUSH
73124: LD_VAR 0 1
73128: PPUSH
73129: CALL_OW 251
73133: PPUSH
73134: LD_VAR 0 2
73138: PPUSH
73139: CALL 46469 0 4
73143: PUSH
73144: LD_INT 4
73146: ARRAY
73147: ST_TO_ADDR
// end ;
73148: LD_VAR 0 3
73152: RET
// export function PlayerSeeMe ( unit ) ; begin
73153: LD_INT 0
73155: PPUSH
// result := See ( your_side , unit ) ;
73156: LD_ADDR_VAR 0 2
73160: PUSH
73161: LD_OWVAR 2
73165: PPUSH
73166: LD_VAR 0 1
73170: PPUSH
73171: CALL_OW 292
73175: ST_TO_ADDR
// end ;
73176: LD_VAR 0 2
73180: RET
// export function ReverseDir ( unit ) ; begin
73181: LD_INT 0
73183: PPUSH
// if not unit then
73184: LD_VAR 0 1
73188: NOT
73189: IFFALSE 73193
// exit ;
73191: GO 73216
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73193: LD_ADDR_VAR 0 2
73197: PUSH
73198: LD_VAR 0 1
73202: PPUSH
73203: CALL_OW 254
73207: PUSH
73208: LD_INT 3
73210: PLUS
73211: PUSH
73212: LD_INT 6
73214: MOD
73215: ST_TO_ADDR
// end ;
73216: LD_VAR 0 2
73220: RET
// export function ReverseArray ( array ) ; var i ; begin
73221: LD_INT 0
73223: PPUSH
73224: PPUSH
// if not array then
73225: LD_VAR 0 1
73229: NOT
73230: IFFALSE 73234
// exit ;
73232: GO 73289
// result := [ ] ;
73234: LD_ADDR_VAR 0 2
73238: PUSH
73239: EMPTY
73240: ST_TO_ADDR
// for i := array downto 1 do
73241: LD_ADDR_VAR 0 3
73245: PUSH
73246: DOUBLE
73247: LD_VAR 0 1
73251: INC
73252: ST_TO_ADDR
73253: LD_INT 1
73255: PUSH
73256: FOR_DOWNTO
73257: IFFALSE 73287
// result := Join ( result , array [ i ] ) ;
73259: LD_ADDR_VAR 0 2
73263: PUSH
73264: LD_VAR 0 2
73268: PPUSH
73269: LD_VAR 0 1
73273: PUSH
73274: LD_VAR 0 3
73278: ARRAY
73279: PPUSH
73280: CALL 77945 0 2
73284: ST_TO_ADDR
73285: GO 73256
73287: POP
73288: POP
// end ;
73289: LD_VAR 0 2
73293: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73294: LD_INT 0
73296: PPUSH
73297: PPUSH
73298: PPUSH
73299: PPUSH
73300: PPUSH
73301: PPUSH
// if not unit or not hexes then
73302: LD_VAR 0 1
73306: NOT
73307: PUSH
73308: LD_VAR 0 2
73312: NOT
73313: OR
73314: IFFALSE 73318
// exit ;
73316: GO 73441
// dist := 9999 ;
73318: LD_ADDR_VAR 0 5
73322: PUSH
73323: LD_INT 9999
73325: ST_TO_ADDR
// for i = 1 to hexes do
73326: LD_ADDR_VAR 0 4
73330: PUSH
73331: DOUBLE
73332: LD_INT 1
73334: DEC
73335: ST_TO_ADDR
73336: LD_VAR 0 2
73340: PUSH
73341: FOR_TO
73342: IFFALSE 73429
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73344: LD_ADDR_VAR 0 6
73348: PUSH
73349: LD_VAR 0 1
73353: PPUSH
73354: LD_VAR 0 2
73358: PUSH
73359: LD_VAR 0 4
73363: ARRAY
73364: PUSH
73365: LD_INT 1
73367: ARRAY
73368: PPUSH
73369: LD_VAR 0 2
73373: PUSH
73374: LD_VAR 0 4
73378: ARRAY
73379: PUSH
73380: LD_INT 2
73382: ARRAY
73383: PPUSH
73384: CALL_OW 297
73388: ST_TO_ADDR
// if tdist < dist then
73389: LD_VAR 0 6
73393: PUSH
73394: LD_VAR 0 5
73398: LESS
73399: IFFALSE 73427
// begin hex := hexes [ i ] ;
73401: LD_ADDR_VAR 0 8
73405: PUSH
73406: LD_VAR 0 2
73410: PUSH
73411: LD_VAR 0 4
73415: ARRAY
73416: ST_TO_ADDR
// dist := tdist ;
73417: LD_ADDR_VAR 0 5
73421: PUSH
73422: LD_VAR 0 6
73426: ST_TO_ADDR
// end ; end ;
73427: GO 73341
73429: POP
73430: POP
// result := hex ;
73431: LD_ADDR_VAR 0 3
73435: PUSH
73436: LD_VAR 0 8
73440: ST_TO_ADDR
// end ;
73441: LD_VAR 0 3
73445: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73446: LD_INT 0
73448: PPUSH
73449: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73450: LD_VAR 0 1
73454: NOT
73455: PUSH
73456: LD_VAR 0 1
73460: PUSH
73461: LD_INT 21
73463: PUSH
73464: LD_INT 2
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 23
73473: PUSH
73474: LD_INT 2
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: EMPTY
73482: LIST
73483: LIST
73484: PPUSH
73485: CALL_OW 69
73489: IN
73490: NOT
73491: OR
73492: IFFALSE 73496
// exit ;
73494: GO 73543
// for i = 1 to 3 do
73496: LD_ADDR_VAR 0 3
73500: PUSH
73501: DOUBLE
73502: LD_INT 1
73504: DEC
73505: ST_TO_ADDR
73506: LD_INT 3
73508: PUSH
73509: FOR_TO
73510: IFFALSE 73541
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73512: LD_VAR 0 1
73516: PPUSH
73517: CALL_OW 250
73521: PPUSH
73522: LD_VAR 0 1
73526: PPUSH
73527: CALL_OW 251
73531: PPUSH
73532: LD_INT 1
73534: PPUSH
73535: CALL_OW 453
73539: GO 73509
73541: POP
73542: POP
// end ;
73543: LD_VAR 0 2
73547: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73548: LD_INT 0
73550: PPUSH
73551: PPUSH
73552: PPUSH
73553: PPUSH
73554: PPUSH
73555: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73556: LD_VAR 0 1
73560: NOT
73561: PUSH
73562: LD_VAR 0 2
73566: NOT
73567: OR
73568: PUSH
73569: LD_VAR 0 1
73573: PPUSH
73574: CALL_OW 314
73578: OR
73579: IFFALSE 73583
// exit ;
73581: GO 74050
// if GetLives ( i ) < 250 then
73583: LD_VAR 0 4
73587: PPUSH
73588: CALL_OW 256
73592: PUSH
73593: LD_INT 250
73595: LESS
73596: IFFALSE 73609
// begin ComAutodestruct ( i ) ;
73598: LD_VAR 0 4
73602: PPUSH
73603: CALL 73446 0 1
// exit ;
73607: GO 74050
// end ; x := GetX ( enemy_unit ) ;
73609: LD_ADDR_VAR 0 7
73613: PUSH
73614: LD_VAR 0 2
73618: PPUSH
73619: CALL_OW 250
73623: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73624: LD_ADDR_VAR 0 8
73628: PUSH
73629: LD_VAR 0 2
73633: PPUSH
73634: CALL_OW 251
73638: ST_TO_ADDR
// if not x or not y then
73639: LD_VAR 0 7
73643: NOT
73644: PUSH
73645: LD_VAR 0 8
73649: NOT
73650: OR
73651: IFFALSE 73655
// exit ;
73653: GO 74050
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73655: LD_ADDR_VAR 0 6
73659: PUSH
73660: LD_VAR 0 7
73664: PPUSH
73665: LD_INT 0
73667: PPUSH
73668: LD_INT 4
73670: PPUSH
73671: CALL_OW 272
73675: PUSH
73676: LD_VAR 0 8
73680: PPUSH
73681: LD_INT 0
73683: PPUSH
73684: LD_INT 4
73686: PPUSH
73687: CALL_OW 273
73691: PUSH
73692: EMPTY
73693: LIST
73694: LIST
73695: PUSH
73696: LD_VAR 0 7
73700: PPUSH
73701: LD_INT 1
73703: PPUSH
73704: LD_INT 4
73706: PPUSH
73707: CALL_OW 272
73711: PUSH
73712: LD_VAR 0 8
73716: PPUSH
73717: LD_INT 1
73719: PPUSH
73720: LD_INT 4
73722: PPUSH
73723: CALL_OW 273
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: PUSH
73732: LD_VAR 0 7
73736: PPUSH
73737: LD_INT 2
73739: PPUSH
73740: LD_INT 4
73742: PPUSH
73743: CALL_OW 272
73747: PUSH
73748: LD_VAR 0 8
73752: PPUSH
73753: LD_INT 2
73755: PPUSH
73756: LD_INT 4
73758: PPUSH
73759: CALL_OW 273
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: PUSH
73768: LD_VAR 0 7
73772: PPUSH
73773: LD_INT 3
73775: PPUSH
73776: LD_INT 4
73778: PPUSH
73779: CALL_OW 272
73783: PUSH
73784: LD_VAR 0 8
73788: PPUSH
73789: LD_INT 3
73791: PPUSH
73792: LD_INT 4
73794: PPUSH
73795: CALL_OW 273
73799: PUSH
73800: EMPTY
73801: LIST
73802: LIST
73803: PUSH
73804: LD_VAR 0 7
73808: PPUSH
73809: LD_INT 4
73811: PPUSH
73812: LD_INT 4
73814: PPUSH
73815: CALL_OW 272
73819: PUSH
73820: LD_VAR 0 8
73824: PPUSH
73825: LD_INT 4
73827: PPUSH
73828: LD_INT 4
73830: PPUSH
73831: CALL_OW 273
73835: PUSH
73836: EMPTY
73837: LIST
73838: LIST
73839: PUSH
73840: LD_VAR 0 7
73844: PPUSH
73845: LD_INT 5
73847: PPUSH
73848: LD_INT 4
73850: PPUSH
73851: CALL_OW 272
73855: PUSH
73856: LD_VAR 0 8
73860: PPUSH
73861: LD_INT 5
73863: PPUSH
73864: LD_INT 4
73866: PPUSH
73867: CALL_OW 273
73871: PUSH
73872: EMPTY
73873: LIST
73874: LIST
73875: PUSH
73876: EMPTY
73877: LIST
73878: LIST
73879: LIST
73880: LIST
73881: LIST
73882: LIST
73883: ST_TO_ADDR
// for i = tmp downto 1 do
73884: LD_ADDR_VAR 0 4
73888: PUSH
73889: DOUBLE
73890: LD_VAR 0 6
73894: INC
73895: ST_TO_ADDR
73896: LD_INT 1
73898: PUSH
73899: FOR_DOWNTO
73900: IFFALSE 74001
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73902: LD_VAR 0 6
73906: PUSH
73907: LD_VAR 0 4
73911: ARRAY
73912: PUSH
73913: LD_INT 1
73915: ARRAY
73916: PPUSH
73917: LD_VAR 0 6
73921: PUSH
73922: LD_VAR 0 4
73926: ARRAY
73927: PUSH
73928: LD_INT 2
73930: ARRAY
73931: PPUSH
73932: CALL_OW 488
73936: NOT
73937: PUSH
73938: LD_VAR 0 6
73942: PUSH
73943: LD_VAR 0 4
73947: ARRAY
73948: PUSH
73949: LD_INT 1
73951: ARRAY
73952: PPUSH
73953: LD_VAR 0 6
73957: PUSH
73958: LD_VAR 0 4
73962: ARRAY
73963: PUSH
73964: LD_INT 2
73966: ARRAY
73967: PPUSH
73968: CALL_OW 428
73972: PUSH
73973: LD_INT 0
73975: NONEQUAL
73976: OR
73977: IFFALSE 73999
// tmp := Delete ( tmp , i ) ;
73979: LD_ADDR_VAR 0 6
73983: PUSH
73984: LD_VAR 0 6
73988: PPUSH
73989: LD_VAR 0 4
73993: PPUSH
73994: CALL_OW 3
73998: ST_TO_ADDR
73999: GO 73899
74001: POP
74002: POP
// j := GetClosestHex ( unit , tmp ) ;
74003: LD_ADDR_VAR 0 5
74007: PUSH
74008: LD_VAR 0 1
74012: PPUSH
74013: LD_VAR 0 6
74017: PPUSH
74018: CALL 73294 0 2
74022: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74023: LD_VAR 0 1
74027: PPUSH
74028: LD_VAR 0 5
74032: PUSH
74033: LD_INT 1
74035: ARRAY
74036: PPUSH
74037: LD_VAR 0 5
74041: PUSH
74042: LD_INT 2
74044: ARRAY
74045: PPUSH
74046: CALL_OW 111
// end ;
74050: LD_VAR 0 3
74054: RET
// export function PrepareApemanSoldier ( ) ; begin
74055: LD_INT 0
74057: PPUSH
// uc_nation := 0 ;
74058: LD_ADDR_OWVAR 21
74062: PUSH
74063: LD_INT 0
74065: ST_TO_ADDR
// hc_sex := sex_male ;
74066: LD_ADDR_OWVAR 27
74070: PUSH
74071: LD_INT 1
74073: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74074: LD_ADDR_OWVAR 28
74078: PUSH
74079: LD_INT 15
74081: ST_TO_ADDR
// hc_gallery :=  ;
74082: LD_ADDR_OWVAR 33
74086: PUSH
74087: LD_STRING 
74089: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74090: LD_ADDR_OWVAR 31
74094: PUSH
74095: LD_INT 0
74097: PPUSH
74098: LD_INT 3
74100: PPUSH
74101: CALL_OW 12
74105: PUSH
74106: LD_INT 0
74108: PPUSH
74109: LD_INT 3
74111: PPUSH
74112: CALL_OW 12
74116: PUSH
74117: LD_INT 0
74119: PUSH
74120: LD_INT 0
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: ST_TO_ADDR
// end ;
74129: LD_VAR 0 1
74133: RET
// export function PrepareApemanEngineer ( ) ; begin
74134: LD_INT 0
74136: PPUSH
// uc_nation := 0 ;
74137: LD_ADDR_OWVAR 21
74141: PUSH
74142: LD_INT 0
74144: ST_TO_ADDR
// hc_sex := sex_male ;
74145: LD_ADDR_OWVAR 27
74149: PUSH
74150: LD_INT 1
74152: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74153: LD_ADDR_OWVAR 28
74157: PUSH
74158: LD_INT 16
74160: ST_TO_ADDR
// hc_gallery :=  ;
74161: LD_ADDR_OWVAR 33
74165: PUSH
74166: LD_STRING 
74168: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74169: LD_ADDR_OWVAR 31
74173: PUSH
74174: LD_INT 0
74176: PPUSH
74177: LD_INT 3
74179: PPUSH
74180: CALL_OW 12
74184: PUSH
74185: LD_INT 0
74187: PPUSH
74188: LD_INT 3
74190: PPUSH
74191: CALL_OW 12
74195: PUSH
74196: LD_INT 0
74198: PUSH
74199: LD_INT 0
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: LIST
74206: LIST
74207: ST_TO_ADDR
// end ;
74208: LD_VAR 0 1
74212: RET
// export function PrepareApeman ( agressivity ) ; begin
74213: LD_INT 0
74215: PPUSH
// uc_side := 0 ;
74216: LD_ADDR_OWVAR 20
74220: PUSH
74221: LD_INT 0
74223: ST_TO_ADDR
// uc_nation := 0 ;
74224: LD_ADDR_OWVAR 21
74228: PUSH
74229: LD_INT 0
74231: ST_TO_ADDR
// hc_sex := sex_male ;
74232: LD_ADDR_OWVAR 27
74236: PUSH
74237: LD_INT 1
74239: ST_TO_ADDR
// hc_class := class_apeman ;
74240: LD_ADDR_OWVAR 28
74244: PUSH
74245: LD_INT 12
74247: ST_TO_ADDR
// hc_gallery :=  ;
74248: LD_ADDR_OWVAR 33
74252: PUSH
74253: LD_STRING 
74255: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74256: LD_ADDR_OWVAR 35
74260: PUSH
74261: LD_VAR 0 1
74265: NEG
74266: PPUSH
74267: LD_VAR 0 1
74271: PPUSH
74272: CALL_OW 12
74276: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74277: LD_ADDR_OWVAR 31
74281: PUSH
74282: LD_INT 0
74284: PPUSH
74285: LD_INT 3
74287: PPUSH
74288: CALL_OW 12
74292: PUSH
74293: LD_INT 0
74295: PPUSH
74296: LD_INT 3
74298: PPUSH
74299: CALL_OW 12
74303: PUSH
74304: LD_INT 0
74306: PUSH
74307: LD_INT 0
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: LIST
74314: LIST
74315: ST_TO_ADDR
// end ;
74316: LD_VAR 0 2
74320: RET
// export function PrepareTiger ( agressivity ) ; begin
74321: LD_INT 0
74323: PPUSH
// uc_side := 0 ;
74324: LD_ADDR_OWVAR 20
74328: PUSH
74329: LD_INT 0
74331: ST_TO_ADDR
// uc_nation := 0 ;
74332: LD_ADDR_OWVAR 21
74336: PUSH
74337: LD_INT 0
74339: ST_TO_ADDR
// hc_class := class_tiger ;
74340: LD_ADDR_OWVAR 28
74344: PUSH
74345: LD_INT 14
74347: ST_TO_ADDR
// hc_gallery :=  ;
74348: LD_ADDR_OWVAR 33
74352: PUSH
74353: LD_STRING 
74355: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74356: LD_ADDR_OWVAR 35
74360: PUSH
74361: LD_VAR 0 1
74365: NEG
74366: PPUSH
74367: LD_VAR 0 1
74371: PPUSH
74372: CALL_OW 12
74376: ST_TO_ADDR
// end ;
74377: LD_VAR 0 2
74381: RET
// export function PrepareEnchidna ( ) ; begin
74382: LD_INT 0
74384: PPUSH
// uc_side := 0 ;
74385: LD_ADDR_OWVAR 20
74389: PUSH
74390: LD_INT 0
74392: ST_TO_ADDR
// uc_nation := 0 ;
74393: LD_ADDR_OWVAR 21
74397: PUSH
74398: LD_INT 0
74400: ST_TO_ADDR
// hc_class := class_baggie ;
74401: LD_ADDR_OWVAR 28
74405: PUSH
74406: LD_INT 13
74408: ST_TO_ADDR
// hc_gallery :=  ;
74409: LD_ADDR_OWVAR 33
74413: PUSH
74414: LD_STRING 
74416: ST_TO_ADDR
// end ;
74417: LD_VAR 0 1
74421: RET
// export function PrepareFrog ( ) ; begin
74422: LD_INT 0
74424: PPUSH
// uc_side := 0 ;
74425: LD_ADDR_OWVAR 20
74429: PUSH
74430: LD_INT 0
74432: ST_TO_ADDR
// uc_nation := 0 ;
74433: LD_ADDR_OWVAR 21
74437: PUSH
74438: LD_INT 0
74440: ST_TO_ADDR
// hc_class := class_frog ;
74441: LD_ADDR_OWVAR 28
74445: PUSH
74446: LD_INT 19
74448: ST_TO_ADDR
// hc_gallery :=  ;
74449: LD_ADDR_OWVAR 33
74453: PUSH
74454: LD_STRING 
74456: ST_TO_ADDR
// end ;
74457: LD_VAR 0 1
74461: RET
// export function PrepareFish ( ) ; begin
74462: LD_INT 0
74464: PPUSH
// uc_side := 0 ;
74465: LD_ADDR_OWVAR 20
74469: PUSH
74470: LD_INT 0
74472: ST_TO_ADDR
// uc_nation := 0 ;
74473: LD_ADDR_OWVAR 21
74477: PUSH
74478: LD_INT 0
74480: ST_TO_ADDR
// hc_class := class_fish ;
74481: LD_ADDR_OWVAR 28
74485: PUSH
74486: LD_INT 20
74488: ST_TO_ADDR
// hc_gallery :=  ;
74489: LD_ADDR_OWVAR 33
74493: PUSH
74494: LD_STRING 
74496: ST_TO_ADDR
// end ;
74497: LD_VAR 0 1
74501: RET
// export function PrepareBird ( ) ; begin
74502: LD_INT 0
74504: PPUSH
// uc_side := 0 ;
74505: LD_ADDR_OWVAR 20
74509: PUSH
74510: LD_INT 0
74512: ST_TO_ADDR
// uc_nation := 0 ;
74513: LD_ADDR_OWVAR 21
74517: PUSH
74518: LD_INT 0
74520: ST_TO_ADDR
// hc_class := class_phororhacos ;
74521: LD_ADDR_OWVAR 28
74525: PUSH
74526: LD_INT 18
74528: ST_TO_ADDR
// hc_gallery :=  ;
74529: LD_ADDR_OWVAR 33
74533: PUSH
74534: LD_STRING 
74536: ST_TO_ADDR
// end ;
74537: LD_VAR 0 1
74541: RET
// export function PrepareHorse ( ) ; begin
74542: LD_INT 0
74544: PPUSH
// uc_side := 0 ;
74545: LD_ADDR_OWVAR 20
74549: PUSH
74550: LD_INT 0
74552: ST_TO_ADDR
// uc_nation := 0 ;
74553: LD_ADDR_OWVAR 21
74557: PUSH
74558: LD_INT 0
74560: ST_TO_ADDR
// hc_class := class_horse ;
74561: LD_ADDR_OWVAR 28
74565: PUSH
74566: LD_INT 21
74568: ST_TO_ADDR
// hc_gallery :=  ;
74569: LD_ADDR_OWVAR 33
74573: PUSH
74574: LD_STRING 
74576: ST_TO_ADDR
// end ;
74577: LD_VAR 0 1
74581: RET
// export function PrepareMastodont ( ) ; begin
74582: LD_INT 0
74584: PPUSH
// uc_side := 0 ;
74585: LD_ADDR_OWVAR 20
74589: PUSH
74590: LD_INT 0
74592: ST_TO_ADDR
// uc_nation := 0 ;
74593: LD_ADDR_OWVAR 21
74597: PUSH
74598: LD_INT 0
74600: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74601: LD_ADDR_OWVAR 37
74605: PUSH
74606: LD_INT 31
74608: ST_TO_ADDR
// vc_control := control_rider ;
74609: LD_ADDR_OWVAR 38
74613: PUSH
74614: LD_INT 4
74616: ST_TO_ADDR
// end ;
74617: LD_VAR 0 1
74621: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74622: LD_INT 0
74624: PPUSH
74625: PPUSH
74626: PPUSH
// uc_side = 0 ;
74627: LD_ADDR_OWVAR 20
74631: PUSH
74632: LD_INT 0
74634: ST_TO_ADDR
// uc_nation = 0 ;
74635: LD_ADDR_OWVAR 21
74639: PUSH
74640: LD_INT 0
74642: ST_TO_ADDR
// InitHc_All ( ) ;
74643: CALL_OW 584
// InitVc ;
74647: CALL_OW 20
// if mastodonts then
74651: LD_VAR 0 6
74655: IFFALSE 74722
// for i = 1 to mastodonts do
74657: LD_ADDR_VAR 0 11
74661: PUSH
74662: DOUBLE
74663: LD_INT 1
74665: DEC
74666: ST_TO_ADDR
74667: LD_VAR 0 6
74671: PUSH
74672: FOR_TO
74673: IFFALSE 74720
// begin vc_chassis := 31 ;
74675: LD_ADDR_OWVAR 37
74679: PUSH
74680: LD_INT 31
74682: ST_TO_ADDR
// vc_control := control_rider ;
74683: LD_ADDR_OWVAR 38
74687: PUSH
74688: LD_INT 4
74690: ST_TO_ADDR
// animal := CreateVehicle ;
74691: LD_ADDR_VAR 0 12
74695: PUSH
74696: CALL_OW 45
74700: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74701: LD_VAR 0 12
74705: PPUSH
74706: LD_VAR 0 8
74710: PPUSH
74711: LD_INT 0
74713: PPUSH
74714: CALL 76850 0 3
// end ;
74718: GO 74672
74720: POP
74721: POP
// if horses then
74722: LD_VAR 0 5
74726: IFFALSE 74793
// for i = 1 to horses do
74728: LD_ADDR_VAR 0 11
74732: PUSH
74733: DOUBLE
74734: LD_INT 1
74736: DEC
74737: ST_TO_ADDR
74738: LD_VAR 0 5
74742: PUSH
74743: FOR_TO
74744: IFFALSE 74791
// begin hc_class := 21 ;
74746: LD_ADDR_OWVAR 28
74750: PUSH
74751: LD_INT 21
74753: ST_TO_ADDR
// hc_gallery :=  ;
74754: LD_ADDR_OWVAR 33
74758: PUSH
74759: LD_STRING 
74761: ST_TO_ADDR
// animal := CreateHuman ;
74762: LD_ADDR_VAR 0 12
74766: PUSH
74767: CALL_OW 44
74771: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74772: LD_VAR 0 12
74776: PPUSH
74777: LD_VAR 0 8
74781: PPUSH
74782: LD_INT 0
74784: PPUSH
74785: CALL 76850 0 3
// end ;
74789: GO 74743
74791: POP
74792: POP
// if birds then
74793: LD_VAR 0 1
74797: IFFALSE 74864
// for i = 1 to birds do
74799: LD_ADDR_VAR 0 11
74803: PUSH
74804: DOUBLE
74805: LD_INT 1
74807: DEC
74808: ST_TO_ADDR
74809: LD_VAR 0 1
74813: PUSH
74814: FOR_TO
74815: IFFALSE 74862
// begin hc_class := 18 ;
74817: LD_ADDR_OWVAR 28
74821: PUSH
74822: LD_INT 18
74824: ST_TO_ADDR
// hc_gallery =  ;
74825: LD_ADDR_OWVAR 33
74829: PUSH
74830: LD_STRING 
74832: ST_TO_ADDR
// animal := CreateHuman ;
74833: LD_ADDR_VAR 0 12
74837: PUSH
74838: CALL_OW 44
74842: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74843: LD_VAR 0 12
74847: PPUSH
74848: LD_VAR 0 8
74852: PPUSH
74853: LD_INT 0
74855: PPUSH
74856: CALL 76850 0 3
// end ;
74860: GO 74814
74862: POP
74863: POP
// if tigers then
74864: LD_VAR 0 2
74868: IFFALSE 74952
// for i = 1 to tigers do
74870: LD_ADDR_VAR 0 11
74874: PUSH
74875: DOUBLE
74876: LD_INT 1
74878: DEC
74879: ST_TO_ADDR
74880: LD_VAR 0 2
74884: PUSH
74885: FOR_TO
74886: IFFALSE 74950
// begin hc_class = class_tiger ;
74888: LD_ADDR_OWVAR 28
74892: PUSH
74893: LD_INT 14
74895: ST_TO_ADDR
// hc_gallery =  ;
74896: LD_ADDR_OWVAR 33
74900: PUSH
74901: LD_STRING 
74903: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74904: LD_ADDR_OWVAR 35
74908: PUSH
74909: LD_INT 7
74911: NEG
74912: PPUSH
74913: LD_INT 7
74915: PPUSH
74916: CALL_OW 12
74920: ST_TO_ADDR
// animal := CreateHuman ;
74921: LD_ADDR_VAR 0 12
74925: PUSH
74926: CALL_OW 44
74930: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74931: LD_VAR 0 12
74935: PPUSH
74936: LD_VAR 0 8
74940: PPUSH
74941: LD_INT 0
74943: PPUSH
74944: CALL 76850 0 3
// end ;
74948: GO 74885
74950: POP
74951: POP
// if apemans then
74952: LD_VAR 0 3
74956: IFFALSE 75079
// for i = 1 to apemans do
74958: LD_ADDR_VAR 0 11
74962: PUSH
74963: DOUBLE
74964: LD_INT 1
74966: DEC
74967: ST_TO_ADDR
74968: LD_VAR 0 3
74972: PUSH
74973: FOR_TO
74974: IFFALSE 75077
// begin hc_class = class_apeman ;
74976: LD_ADDR_OWVAR 28
74980: PUSH
74981: LD_INT 12
74983: ST_TO_ADDR
// hc_gallery =  ;
74984: LD_ADDR_OWVAR 33
74988: PUSH
74989: LD_STRING 
74991: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74992: LD_ADDR_OWVAR 35
74996: PUSH
74997: LD_INT 2
74999: NEG
75000: PPUSH
75001: LD_INT 2
75003: PPUSH
75004: CALL_OW 12
75008: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75009: LD_ADDR_OWVAR 31
75013: PUSH
75014: LD_INT 1
75016: PPUSH
75017: LD_INT 3
75019: PPUSH
75020: CALL_OW 12
75024: PUSH
75025: LD_INT 1
75027: PPUSH
75028: LD_INT 3
75030: PPUSH
75031: CALL_OW 12
75035: PUSH
75036: LD_INT 0
75038: PUSH
75039: LD_INT 0
75041: PUSH
75042: EMPTY
75043: LIST
75044: LIST
75045: LIST
75046: LIST
75047: ST_TO_ADDR
// animal := CreateHuman ;
75048: LD_ADDR_VAR 0 12
75052: PUSH
75053: CALL_OW 44
75057: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75058: LD_VAR 0 12
75062: PPUSH
75063: LD_VAR 0 8
75067: PPUSH
75068: LD_INT 0
75070: PPUSH
75071: CALL 76850 0 3
// end ;
75075: GO 74973
75077: POP
75078: POP
// if enchidnas then
75079: LD_VAR 0 4
75083: IFFALSE 75150
// for i = 1 to enchidnas do
75085: LD_ADDR_VAR 0 11
75089: PUSH
75090: DOUBLE
75091: LD_INT 1
75093: DEC
75094: ST_TO_ADDR
75095: LD_VAR 0 4
75099: PUSH
75100: FOR_TO
75101: IFFALSE 75148
// begin hc_class = 13 ;
75103: LD_ADDR_OWVAR 28
75107: PUSH
75108: LD_INT 13
75110: ST_TO_ADDR
// hc_gallery =  ;
75111: LD_ADDR_OWVAR 33
75115: PUSH
75116: LD_STRING 
75118: ST_TO_ADDR
// animal := CreateHuman ;
75119: LD_ADDR_VAR 0 12
75123: PUSH
75124: CALL_OW 44
75128: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75129: LD_VAR 0 12
75133: PPUSH
75134: LD_VAR 0 8
75138: PPUSH
75139: LD_INT 0
75141: PPUSH
75142: CALL 76850 0 3
// end ;
75146: GO 75100
75148: POP
75149: POP
// if fishes then
75150: LD_VAR 0 7
75154: IFFALSE 75221
// for i = 1 to fishes do
75156: LD_ADDR_VAR 0 11
75160: PUSH
75161: DOUBLE
75162: LD_INT 1
75164: DEC
75165: ST_TO_ADDR
75166: LD_VAR 0 7
75170: PUSH
75171: FOR_TO
75172: IFFALSE 75219
// begin hc_class = 20 ;
75174: LD_ADDR_OWVAR 28
75178: PUSH
75179: LD_INT 20
75181: ST_TO_ADDR
// hc_gallery =  ;
75182: LD_ADDR_OWVAR 33
75186: PUSH
75187: LD_STRING 
75189: ST_TO_ADDR
// animal := CreateHuman ;
75190: LD_ADDR_VAR 0 12
75194: PUSH
75195: CALL_OW 44
75199: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75200: LD_VAR 0 12
75204: PPUSH
75205: LD_VAR 0 9
75209: PPUSH
75210: LD_INT 0
75212: PPUSH
75213: CALL 76850 0 3
// end ;
75217: GO 75171
75219: POP
75220: POP
// end ;
75221: LD_VAR 0 10
75225: RET
// export function WantHeal ( sci , unit ) ; begin
75226: LD_INT 0
75228: PPUSH
// if GetTaskList ( sci ) > 0 then
75229: LD_VAR 0 1
75233: PPUSH
75234: CALL_OW 437
75238: PUSH
75239: LD_INT 0
75241: GREATER
75242: IFFALSE 75312
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75244: LD_VAR 0 1
75248: PPUSH
75249: CALL_OW 437
75253: PUSH
75254: LD_INT 1
75256: ARRAY
75257: PUSH
75258: LD_INT 1
75260: ARRAY
75261: PUSH
75262: LD_STRING l
75264: EQUAL
75265: PUSH
75266: LD_VAR 0 1
75270: PPUSH
75271: CALL_OW 437
75275: PUSH
75276: LD_INT 1
75278: ARRAY
75279: PUSH
75280: LD_INT 4
75282: ARRAY
75283: PUSH
75284: LD_VAR 0 2
75288: EQUAL
75289: AND
75290: IFFALSE 75302
// result := true else
75292: LD_ADDR_VAR 0 3
75296: PUSH
75297: LD_INT 1
75299: ST_TO_ADDR
75300: GO 75310
// result := false ;
75302: LD_ADDR_VAR 0 3
75306: PUSH
75307: LD_INT 0
75309: ST_TO_ADDR
// end else
75310: GO 75320
// result := false ;
75312: LD_ADDR_VAR 0 3
75316: PUSH
75317: LD_INT 0
75319: ST_TO_ADDR
// end ;
75320: LD_VAR 0 3
75324: RET
// export function HealTarget ( sci ) ; begin
75325: LD_INT 0
75327: PPUSH
// if not sci then
75328: LD_VAR 0 1
75332: NOT
75333: IFFALSE 75337
// exit ;
75335: GO 75402
// result := 0 ;
75337: LD_ADDR_VAR 0 2
75341: PUSH
75342: LD_INT 0
75344: ST_TO_ADDR
// if GetTaskList ( sci ) then
75345: LD_VAR 0 1
75349: PPUSH
75350: CALL_OW 437
75354: IFFALSE 75402
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75356: LD_VAR 0 1
75360: PPUSH
75361: CALL_OW 437
75365: PUSH
75366: LD_INT 1
75368: ARRAY
75369: PUSH
75370: LD_INT 1
75372: ARRAY
75373: PUSH
75374: LD_STRING l
75376: EQUAL
75377: IFFALSE 75402
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75379: LD_ADDR_VAR 0 2
75383: PUSH
75384: LD_VAR 0 1
75388: PPUSH
75389: CALL_OW 437
75393: PUSH
75394: LD_INT 1
75396: ARRAY
75397: PUSH
75398: LD_INT 4
75400: ARRAY
75401: ST_TO_ADDR
// end ;
75402: LD_VAR 0 2
75406: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75407: LD_INT 0
75409: PPUSH
75410: PPUSH
75411: PPUSH
75412: PPUSH
// if not base_units then
75413: LD_VAR 0 1
75417: NOT
75418: IFFALSE 75422
// exit ;
75420: GO 75509
// result := false ;
75422: LD_ADDR_VAR 0 2
75426: PUSH
75427: LD_INT 0
75429: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75430: LD_ADDR_VAR 0 5
75434: PUSH
75435: LD_VAR 0 1
75439: PPUSH
75440: LD_INT 21
75442: PUSH
75443: LD_INT 3
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: PPUSH
75450: CALL_OW 72
75454: ST_TO_ADDR
// if not tmp then
75455: LD_VAR 0 5
75459: NOT
75460: IFFALSE 75464
// exit ;
75462: GO 75509
// for i in tmp do
75464: LD_ADDR_VAR 0 3
75468: PUSH
75469: LD_VAR 0 5
75473: PUSH
75474: FOR_IN
75475: IFFALSE 75507
// begin result := EnemyInRange ( i , 22 ) ;
75477: LD_ADDR_VAR 0 2
75481: PUSH
75482: LD_VAR 0 3
75486: PPUSH
75487: LD_INT 22
75489: PPUSH
75490: CALL 73096 0 2
75494: ST_TO_ADDR
// if result then
75495: LD_VAR 0 2
75499: IFFALSE 75505
// exit ;
75501: POP
75502: POP
75503: GO 75509
// end ;
75505: GO 75474
75507: POP
75508: POP
// end ;
75509: LD_VAR 0 2
75513: RET
// export function FilterByTag ( units , tag ) ; begin
75514: LD_INT 0
75516: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75517: LD_ADDR_VAR 0 3
75521: PUSH
75522: LD_VAR 0 1
75526: PPUSH
75527: LD_INT 120
75529: PUSH
75530: LD_VAR 0 2
75534: PUSH
75535: EMPTY
75536: LIST
75537: LIST
75538: PPUSH
75539: CALL_OW 72
75543: ST_TO_ADDR
// end ;
75544: LD_VAR 0 3
75548: RET
// export function IsDriver ( un ) ; begin
75549: LD_INT 0
75551: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75552: LD_ADDR_VAR 0 2
75556: PUSH
75557: LD_VAR 0 1
75561: PUSH
75562: LD_INT 55
75564: PUSH
75565: EMPTY
75566: LIST
75567: PPUSH
75568: CALL_OW 69
75572: IN
75573: ST_TO_ADDR
// end ;
75574: LD_VAR 0 2
75578: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75579: LD_INT 0
75581: PPUSH
75582: PPUSH
// list := [ ] ;
75583: LD_ADDR_VAR 0 5
75587: PUSH
75588: EMPTY
75589: ST_TO_ADDR
// case d of 0 :
75590: LD_VAR 0 3
75594: PUSH
75595: LD_INT 0
75597: DOUBLE
75598: EQUAL
75599: IFTRUE 75603
75601: GO 75736
75603: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75604: LD_ADDR_VAR 0 5
75608: PUSH
75609: LD_VAR 0 1
75613: PUSH
75614: LD_INT 4
75616: MINUS
75617: PUSH
75618: LD_VAR 0 2
75622: PUSH
75623: LD_INT 4
75625: MINUS
75626: PUSH
75627: LD_INT 2
75629: PUSH
75630: EMPTY
75631: LIST
75632: LIST
75633: LIST
75634: PUSH
75635: LD_VAR 0 1
75639: PUSH
75640: LD_INT 3
75642: MINUS
75643: PUSH
75644: LD_VAR 0 2
75648: PUSH
75649: LD_INT 1
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: LIST
75656: PUSH
75657: LD_VAR 0 1
75661: PUSH
75662: LD_INT 4
75664: PLUS
75665: PUSH
75666: LD_VAR 0 2
75670: PUSH
75671: LD_INT 4
75673: PUSH
75674: EMPTY
75675: LIST
75676: LIST
75677: LIST
75678: PUSH
75679: LD_VAR 0 1
75683: PUSH
75684: LD_INT 3
75686: PLUS
75687: PUSH
75688: LD_VAR 0 2
75692: PUSH
75693: LD_INT 3
75695: PLUS
75696: PUSH
75697: LD_INT 5
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: LIST
75704: PUSH
75705: LD_VAR 0 1
75709: PUSH
75710: LD_VAR 0 2
75714: PUSH
75715: LD_INT 4
75717: PLUS
75718: PUSH
75719: LD_INT 0
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: LIST
75726: PUSH
75727: EMPTY
75728: LIST
75729: LIST
75730: LIST
75731: LIST
75732: LIST
75733: ST_TO_ADDR
// end ; 1 :
75734: GO 76434
75736: LD_INT 1
75738: DOUBLE
75739: EQUAL
75740: IFTRUE 75744
75742: GO 75877
75744: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75745: LD_ADDR_VAR 0 5
75749: PUSH
75750: LD_VAR 0 1
75754: PUSH
75755: LD_VAR 0 2
75759: PUSH
75760: LD_INT 4
75762: MINUS
75763: PUSH
75764: LD_INT 3
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: LIST
75771: PUSH
75772: LD_VAR 0 1
75776: PUSH
75777: LD_INT 3
75779: MINUS
75780: PUSH
75781: LD_VAR 0 2
75785: PUSH
75786: LD_INT 3
75788: MINUS
75789: PUSH
75790: LD_INT 2
75792: PUSH
75793: EMPTY
75794: LIST
75795: LIST
75796: LIST
75797: PUSH
75798: LD_VAR 0 1
75802: PUSH
75803: LD_INT 4
75805: MINUS
75806: PUSH
75807: LD_VAR 0 2
75811: PUSH
75812: LD_INT 1
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: LIST
75819: PUSH
75820: LD_VAR 0 1
75824: PUSH
75825: LD_VAR 0 2
75829: PUSH
75830: LD_INT 3
75832: PLUS
75833: PUSH
75834: LD_INT 0
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: LIST
75841: PUSH
75842: LD_VAR 0 1
75846: PUSH
75847: LD_INT 4
75849: PLUS
75850: PUSH
75851: LD_VAR 0 2
75855: PUSH
75856: LD_INT 4
75858: PLUS
75859: PUSH
75860: LD_INT 5
75862: PUSH
75863: EMPTY
75864: LIST
75865: LIST
75866: LIST
75867: PUSH
75868: EMPTY
75869: LIST
75870: LIST
75871: LIST
75872: LIST
75873: LIST
75874: ST_TO_ADDR
// end ; 2 :
75875: GO 76434
75877: LD_INT 2
75879: DOUBLE
75880: EQUAL
75881: IFTRUE 75885
75883: GO 76014
75885: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75886: LD_ADDR_VAR 0 5
75890: PUSH
75891: LD_VAR 0 1
75895: PUSH
75896: LD_VAR 0 2
75900: PUSH
75901: LD_INT 3
75903: MINUS
75904: PUSH
75905: LD_INT 3
75907: PUSH
75908: EMPTY
75909: LIST
75910: LIST
75911: LIST
75912: PUSH
75913: LD_VAR 0 1
75917: PUSH
75918: LD_INT 4
75920: PLUS
75921: PUSH
75922: LD_VAR 0 2
75926: PUSH
75927: LD_INT 4
75929: PUSH
75930: EMPTY
75931: LIST
75932: LIST
75933: LIST
75934: PUSH
75935: LD_VAR 0 1
75939: PUSH
75940: LD_VAR 0 2
75944: PUSH
75945: LD_INT 4
75947: PLUS
75948: PUSH
75949: LD_INT 0
75951: PUSH
75952: EMPTY
75953: LIST
75954: LIST
75955: LIST
75956: PUSH
75957: LD_VAR 0 1
75961: PUSH
75962: LD_INT 3
75964: MINUS
75965: PUSH
75966: LD_VAR 0 2
75970: PUSH
75971: LD_INT 1
75973: PUSH
75974: EMPTY
75975: LIST
75976: LIST
75977: LIST
75978: PUSH
75979: LD_VAR 0 1
75983: PUSH
75984: LD_INT 4
75986: MINUS
75987: PUSH
75988: LD_VAR 0 2
75992: PUSH
75993: LD_INT 4
75995: MINUS
75996: PUSH
75997: LD_INT 2
75999: PUSH
76000: EMPTY
76001: LIST
76002: LIST
76003: LIST
76004: PUSH
76005: EMPTY
76006: LIST
76007: LIST
76008: LIST
76009: LIST
76010: LIST
76011: ST_TO_ADDR
// end ; 3 :
76012: GO 76434
76014: LD_INT 3
76016: DOUBLE
76017: EQUAL
76018: IFTRUE 76022
76020: GO 76155
76022: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76023: LD_ADDR_VAR 0 5
76027: PUSH
76028: LD_VAR 0 1
76032: PUSH
76033: LD_INT 3
76035: PLUS
76036: PUSH
76037: LD_VAR 0 2
76041: PUSH
76042: LD_INT 4
76044: PUSH
76045: EMPTY
76046: LIST
76047: LIST
76048: LIST
76049: PUSH
76050: LD_VAR 0 1
76054: PUSH
76055: LD_INT 4
76057: PLUS
76058: PUSH
76059: LD_VAR 0 2
76063: PUSH
76064: LD_INT 4
76066: PLUS
76067: PUSH
76068: LD_INT 5
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: LIST
76075: PUSH
76076: LD_VAR 0 1
76080: PUSH
76081: LD_INT 4
76083: MINUS
76084: PUSH
76085: LD_VAR 0 2
76089: PUSH
76090: LD_INT 1
76092: PUSH
76093: EMPTY
76094: LIST
76095: LIST
76096: LIST
76097: PUSH
76098: LD_VAR 0 1
76102: PUSH
76103: LD_VAR 0 2
76107: PUSH
76108: LD_INT 4
76110: MINUS
76111: PUSH
76112: LD_INT 3
76114: PUSH
76115: EMPTY
76116: LIST
76117: LIST
76118: LIST
76119: PUSH
76120: LD_VAR 0 1
76124: PUSH
76125: LD_INT 3
76127: MINUS
76128: PUSH
76129: LD_VAR 0 2
76133: PUSH
76134: LD_INT 3
76136: MINUS
76137: PUSH
76138: LD_INT 2
76140: PUSH
76141: EMPTY
76142: LIST
76143: LIST
76144: LIST
76145: PUSH
76146: EMPTY
76147: LIST
76148: LIST
76149: LIST
76150: LIST
76151: LIST
76152: ST_TO_ADDR
// end ; 4 :
76153: GO 76434
76155: LD_INT 4
76157: DOUBLE
76158: EQUAL
76159: IFTRUE 76163
76161: GO 76296
76163: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76164: LD_ADDR_VAR 0 5
76168: PUSH
76169: LD_VAR 0 1
76173: PUSH
76174: LD_VAR 0 2
76178: PUSH
76179: LD_INT 4
76181: PLUS
76182: PUSH
76183: LD_INT 0
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: LIST
76190: PUSH
76191: LD_VAR 0 1
76195: PUSH
76196: LD_INT 3
76198: PLUS
76199: PUSH
76200: LD_VAR 0 2
76204: PUSH
76205: LD_INT 3
76207: PLUS
76208: PUSH
76209: LD_INT 5
76211: PUSH
76212: EMPTY
76213: LIST
76214: LIST
76215: LIST
76216: PUSH
76217: LD_VAR 0 1
76221: PUSH
76222: LD_INT 4
76224: PLUS
76225: PUSH
76226: LD_VAR 0 2
76230: PUSH
76231: LD_INT 4
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: LIST
76238: PUSH
76239: LD_VAR 0 1
76243: PUSH
76244: LD_VAR 0 2
76248: PUSH
76249: LD_INT 3
76251: MINUS
76252: PUSH
76253: LD_INT 3
76255: PUSH
76256: EMPTY
76257: LIST
76258: LIST
76259: LIST
76260: PUSH
76261: LD_VAR 0 1
76265: PUSH
76266: LD_INT 4
76268: MINUS
76269: PUSH
76270: LD_VAR 0 2
76274: PUSH
76275: LD_INT 4
76277: MINUS
76278: PUSH
76279: LD_INT 2
76281: PUSH
76282: EMPTY
76283: LIST
76284: LIST
76285: LIST
76286: PUSH
76287: EMPTY
76288: LIST
76289: LIST
76290: LIST
76291: LIST
76292: LIST
76293: ST_TO_ADDR
// end ; 5 :
76294: GO 76434
76296: LD_INT 5
76298: DOUBLE
76299: EQUAL
76300: IFTRUE 76304
76302: GO 76433
76304: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76305: LD_ADDR_VAR 0 5
76309: PUSH
76310: LD_VAR 0 1
76314: PUSH
76315: LD_INT 4
76317: MINUS
76318: PUSH
76319: LD_VAR 0 2
76323: PUSH
76324: LD_INT 1
76326: PUSH
76327: EMPTY
76328: LIST
76329: LIST
76330: LIST
76331: PUSH
76332: LD_VAR 0 1
76336: PUSH
76337: LD_VAR 0 2
76341: PUSH
76342: LD_INT 4
76344: MINUS
76345: PUSH
76346: LD_INT 3
76348: PUSH
76349: EMPTY
76350: LIST
76351: LIST
76352: LIST
76353: PUSH
76354: LD_VAR 0 1
76358: PUSH
76359: LD_INT 4
76361: PLUS
76362: PUSH
76363: LD_VAR 0 2
76367: PUSH
76368: LD_INT 4
76370: PLUS
76371: PUSH
76372: LD_INT 5
76374: PUSH
76375: EMPTY
76376: LIST
76377: LIST
76378: LIST
76379: PUSH
76380: LD_VAR 0 1
76384: PUSH
76385: LD_INT 3
76387: PLUS
76388: PUSH
76389: LD_VAR 0 2
76393: PUSH
76394: LD_INT 4
76396: PUSH
76397: EMPTY
76398: LIST
76399: LIST
76400: LIST
76401: PUSH
76402: LD_VAR 0 1
76406: PUSH
76407: LD_VAR 0 2
76411: PUSH
76412: LD_INT 3
76414: PLUS
76415: PUSH
76416: LD_INT 0
76418: PUSH
76419: EMPTY
76420: LIST
76421: LIST
76422: LIST
76423: PUSH
76424: EMPTY
76425: LIST
76426: LIST
76427: LIST
76428: LIST
76429: LIST
76430: ST_TO_ADDR
// end ; end ;
76431: GO 76434
76433: POP
// result := list ;
76434: LD_ADDR_VAR 0 4
76438: PUSH
76439: LD_VAR 0 5
76443: ST_TO_ADDR
// end ;
76444: LD_VAR 0 4
76448: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76449: LD_INT 0
76451: PPUSH
76452: PPUSH
76453: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76454: LD_VAR 0 1
76458: NOT
76459: PUSH
76460: LD_VAR 0 2
76464: PUSH
76465: LD_INT 1
76467: PUSH
76468: LD_INT 2
76470: PUSH
76471: LD_INT 3
76473: PUSH
76474: LD_INT 4
76476: PUSH
76477: EMPTY
76478: LIST
76479: LIST
76480: LIST
76481: LIST
76482: IN
76483: NOT
76484: OR
76485: IFFALSE 76489
// exit ;
76487: GO 76572
// tmp := [ ] ;
76489: LD_ADDR_VAR 0 5
76493: PUSH
76494: EMPTY
76495: ST_TO_ADDR
// for i in units do
76496: LD_ADDR_VAR 0 4
76500: PUSH
76501: LD_VAR 0 1
76505: PUSH
76506: FOR_IN
76507: IFFALSE 76541
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76509: LD_ADDR_VAR 0 5
76513: PUSH
76514: LD_VAR 0 5
76518: PPUSH
76519: LD_VAR 0 4
76523: PPUSH
76524: LD_VAR 0 2
76528: PPUSH
76529: CALL_OW 259
76533: PPUSH
76534: CALL 77945 0 2
76538: ST_TO_ADDR
76539: GO 76506
76541: POP
76542: POP
// if not tmp then
76543: LD_VAR 0 5
76547: NOT
76548: IFFALSE 76552
// exit ;
76550: GO 76572
// result := SortListByListDesc ( units , tmp ) ;
76552: LD_ADDR_VAR 0 3
76556: PUSH
76557: LD_VAR 0 1
76561: PPUSH
76562: LD_VAR 0 5
76566: PPUSH
76567: CALL_OW 77
76571: ST_TO_ADDR
// end ;
76572: LD_VAR 0 3
76576: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76577: LD_INT 0
76579: PPUSH
76580: PPUSH
76581: PPUSH
// result := false ;
76582: LD_ADDR_VAR 0 3
76586: PUSH
76587: LD_INT 0
76589: ST_TO_ADDR
// if not building then
76590: LD_VAR 0 2
76594: NOT
76595: IFFALSE 76599
// exit ;
76597: GO 76737
// x := GetX ( building ) ;
76599: LD_ADDR_VAR 0 4
76603: PUSH
76604: LD_VAR 0 2
76608: PPUSH
76609: CALL_OW 250
76613: ST_TO_ADDR
// y := GetY ( building ) ;
76614: LD_ADDR_VAR 0 5
76618: PUSH
76619: LD_VAR 0 2
76623: PPUSH
76624: CALL_OW 251
76628: ST_TO_ADDR
// if not x or not y then
76629: LD_VAR 0 4
76633: NOT
76634: PUSH
76635: LD_VAR 0 5
76639: NOT
76640: OR
76641: IFFALSE 76645
// exit ;
76643: GO 76737
// if GetTaskList ( unit ) then
76645: LD_VAR 0 1
76649: PPUSH
76650: CALL_OW 437
76654: IFFALSE 76737
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76656: LD_STRING e
76658: PUSH
76659: LD_VAR 0 1
76663: PPUSH
76664: CALL_OW 437
76668: PUSH
76669: LD_INT 1
76671: ARRAY
76672: PUSH
76673: LD_INT 1
76675: ARRAY
76676: EQUAL
76677: PUSH
76678: LD_VAR 0 4
76682: PUSH
76683: LD_VAR 0 1
76687: PPUSH
76688: CALL_OW 437
76692: PUSH
76693: LD_INT 1
76695: ARRAY
76696: PUSH
76697: LD_INT 2
76699: ARRAY
76700: EQUAL
76701: AND
76702: PUSH
76703: LD_VAR 0 5
76707: PUSH
76708: LD_VAR 0 1
76712: PPUSH
76713: CALL_OW 437
76717: PUSH
76718: LD_INT 1
76720: ARRAY
76721: PUSH
76722: LD_INT 3
76724: ARRAY
76725: EQUAL
76726: AND
76727: IFFALSE 76737
// result := true end ;
76729: LD_ADDR_VAR 0 3
76733: PUSH
76734: LD_INT 1
76736: ST_TO_ADDR
// end ;
76737: LD_VAR 0 3
76741: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76742: LD_INT 0
76744: PPUSH
// result := false ;
76745: LD_ADDR_VAR 0 4
76749: PUSH
76750: LD_INT 0
76752: ST_TO_ADDR
// if GetTaskList ( unit ) then
76753: LD_VAR 0 1
76757: PPUSH
76758: CALL_OW 437
76762: IFFALSE 76845
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76764: LD_STRING M
76766: PUSH
76767: LD_VAR 0 1
76771: PPUSH
76772: CALL_OW 437
76776: PUSH
76777: LD_INT 1
76779: ARRAY
76780: PUSH
76781: LD_INT 1
76783: ARRAY
76784: EQUAL
76785: PUSH
76786: LD_VAR 0 2
76790: PUSH
76791: LD_VAR 0 1
76795: PPUSH
76796: CALL_OW 437
76800: PUSH
76801: LD_INT 1
76803: ARRAY
76804: PUSH
76805: LD_INT 2
76807: ARRAY
76808: EQUAL
76809: AND
76810: PUSH
76811: LD_VAR 0 3
76815: PUSH
76816: LD_VAR 0 1
76820: PPUSH
76821: CALL_OW 437
76825: PUSH
76826: LD_INT 1
76828: ARRAY
76829: PUSH
76830: LD_INT 3
76832: ARRAY
76833: EQUAL
76834: AND
76835: IFFALSE 76845
// result := true ;
76837: LD_ADDR_VAR 0 4
76841: PUSH
76842: LD_INT 1
76844: ST_TO_ADDR
// end ; end ;
76845: LD_VAR 0 4
76849: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76850: LD_INT 0
76852: PPUSH
76853: PPUSH
76854: PPUSH
76855: PPUSH
// if not unit or not area then
76856: LD_VAR 0 1
76860: NOT
76861: PUSH
76862: LD_VAR 0 2
76866: NOT
76867: OR
76868: IFFALSE 76872
// exit ;
76870: GO 77048
// tmp := AreaToList ( area , i ) ;
76872: LD_ADDR_VAR 0 6
76876: PUSH
76877: LD_VAR 0 2
76881: PPUSH
76882: LD_VAR 0 5
76886: PPUSH
76887: CALL_OW 517
76891: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76892: LD_ADDR_VAR 0 5
76896: PUSH
76897: DOUBLE
76898: LD_INT 1
76900: DEC
76901: ST_TO_ADDR
76902: LD_VAR 0 6
76906: PUSH
76907: LD_INT 1
76909: ARRAY
76910: PUSH
76911: FOR_TO
76912: IFFALSE 77046
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76914: LD_ADDR_VAR 0 7
76918: PUSH
76919: LD_VAR 0 6
76923: PUSH
76924: LD_INT 1
76926: ARRAY
76927: PUSH
76928: LD_VAR 0 5
76932: ARRAY
76933: PUSH
76934: LD_VAR 0 6
76938: PUSH
76939: LD_INT 2
76941: ARRAY
76942: PUSH
76943: LD_VAR 0 5
76947: ARRAY
76948: PUSH
76949: EMPTY
76950: LIST
76951: LIST
76952: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
76953: LD_INT 92
76955: PUSH
76956: LD_VAR 0 7
76960: PUSH
76961: LD_INT 1
76963: ARRAY
76964: PUSH
76965: LD_VAR 0 7
76969: PUSH
76970: LD_INT 2
76972: ARRAY
76973: PUSH
76974: LD_INT 2
76976: PUSH
76977: EMPTY
76978: LIST
76979: LIST
76980: LIST
76981: LIST
76982: PPUSH
76983: CALL_OW 69
76987: PUSH
76988: LD_INT 0
76990: EQUAL
76991: IFFALSE 77044
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76993: LD_VAR 0 1
76997: PPUSH
76998: LD_VAR 0 7
77002: PUSH
77003: LD_INT 1
77005: ARRAY
77006: PPUSH
77007: LD_VAR 0 7
77011: PUSH
77012: LD_INT 2
77014: ARRAY
77015: PPUSH
77016: LD_VAR 0 3
77020: PPUSH
77021: CALL_OW 48
// result := IsPlaced ( unit ) ;
77025: LD_ADDR_VAR 0 4
77029: PUSH
77030: LD_VAR 0 1
77034: PPUSH
77035: CALL_OW 305
77039: ST_TO_ADDR
// exit ;
77040: POP
77041: POP
77042: GO 77048
// end ; end ;
77044: GO 76911
77046: POP
77047: POP
// end ;
77048: LD_VAR 0 4
77052: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77053: LD_INT 0
77055: PPUSH
77056: PPUSH
77057: PPUSH
// if not side or side > 8 then
77058: LD_VAR 0 1
77062: NOT
77063: PUSH
77064: LD_VAR 0 1
77068: PUSH
77069: LD_INT 8
77071: GREATER
77072: OR
77073: IFFALSE 77077
// exit ;
77075: GO 77264
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77077: LD_ADDR_VAR 0 4
77081: PUSH
77082: LD_INT 22
77084: PUSH
77085: LD_VAR 0 1
77089: PUSH
77090: EMPTY
77091: LIST
77092: LIST
77093: PUSH
77094: LD_INT 21
77096: PUSH
77097: LD_INT 3
77099: PUSH
77100: EMPTY
77101: LIST
77102: LIST
77103: PUSH
77104: EMPTY
77105: LIST
77106: LIST
77107: PPUSH
77108: CALL_OW 69
77112: ST_TO_ADDR
// if not tmp then
77113: LD_VAR 0 4
77117: NOT
77118: IFFALSE 77122
// exit ;
77120: GO 77264
// enable_addtolog := true ;
77122: LD_ADDR_OWVAR 81
77126: PUSH
77127: LD_INT 1
77129: ST_TO_ADDR
// AddToLog ( [ ) ;
77130: LD_STRING [
77132: PPUSH
77133: CALL_OW 561
// for i in tmp do
77137: LD_ADDR_VAR 0 3
77141: PUSH
77142: LD_VAR 0 4
77146: PUSH
77147: FOR_IN
77148: IFFALSE 77255
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77150: LD_STRING [
77152: PUSH
77153: LD_VAR 0 3
77157: PPUSH
77158: CALL_OW 266
77162: STR
77163: PUSH
77164: LD_STRING , 
77166: STR
77167: PUSH
77168: LD_VAR 0 3
77172: PPUSH
77173: CALL_OW 250
77177: STR
77178: PUSH
77179: LD_STRING , 
77181: STR
77182: PUSH
77183: LD_VAR 0 3
77187: PPUSH
77188: CALL_OW 251
77192: STR
77193: PUSH
77194: LD_STRING , 
77196: STR
77197: PUSH
77198: LD_VAR 0 3
77202: PPUSH
77203: CALL_OW 254
77207: STR
77208: PUSH
77209: LD_STRING , 
77211: STR
77212: PUSH
77213: LD_VAR 0 3
77217: PPUSH
77218: LD_INT 1
77220: PPUSH
77221: CALL_OW 268
77225: STR
77226: PUSH
77227: LD_STRING , 
77229: STR
77230: PUSH
77231: LD_VAR 0 3
77235: PPUSH
77236: LD_INT 2
77238: PPUSH
77239: CALL_OW 268
77243: STR
77244: PUSH
77245: LD_STRING ],
77247: STR
77248: PPUSH
77249: CALL_OW 561
// end ;
77253: GO 77147
77255: POP
77256: POP
// AddToLog ( ]; ) ;
77257: LD_STRING ];
77259: PPUSH
77260: CALL_OW 561
// end ;
77264: LD_VAR 0 2
77268: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77269: LD_INT 0
77271: PPUSH
77272: PPUSH
77273: PPUSH
77274: PPUSH
77275: PPUSH
// if not area or not rate or not max then
77276: LD_VAR 0 1
77280: NOT
77281: PUSH
77282: LD_VAR 0 2
77286: NOT
77287: OR
77288: PUSH
77289: LD_VAR 0 4
77293: NOT
77294: OR
77295: IFFALSE 77299
// exit ;
77297: GO 77488
// while 1 do
77299: LD_INT 1
77301: IFFALSE 77488
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77303: LD_ADDR_VAR 0 9
77307: PUSH
77308: LD_VAR 0 1
77312: PPUSH
77313: LD_INT 1
77315: PPUSH
77316: CALL_OW 287
77320: PUSH
77321: LD_INT 10
77323: MUL
77324: ST_TO_ADDR
// r := rate / 10 ;
77325: LD_ADDR_VAR 0 7
77329: PUSH
77330: LD_VAR 0 2
77334: PUSH
77335: LD_INT 10
77337: DIVREAL
77338: ST_TO_ADDR
// time := 1 1$00 ;
77339: LD_ADDR_VAR 0 8
77343: PUSH
77344: LD_INT 2100
77346: ST_TO_ADDR
// if amount < min then
77347: LD_VAR 0 9
77351: PUSH
77352: LD_VAR 0 3
77356: LESS
77357: IFFALSE 77375
// r := r * 2 else
77359: LD_ADDR_VAR 0 7
77363: PUSH
77364: LD_VAR 0 7
77368: PUSH
77369: LD_INT 2
77371: MUL
77372: ST_TO_ADDR
77373: GO 77401
// if amount > max then
77375: LD_VAR 0 9
77379: PUSH
77380: LD_VAR 0 4
77384: GREATER
77385: IFFALSE 77401
// r := r / 2 ;
77387: LD_ADDR_VAR 0 7
77391: PUSH
77392: LD_VAR 0 7
77396: PUSH
77397: LD_INT 2
77399: DIVREAL
77400: ST_TO_ADDR
// time := time / r ;
77401: LD_ADDR_VAR 0 8
77405: PUSH
77406: LD_VAR 0 8
77410: PUSH
77411: LD_VAR 0 7
77415: DIVREAL
77416: ST_TO_ADDR
// if time < 0 then
77417: LD_VAR 0 8
77421: PUSH
77422: LD_INT 0
77424: LESS
77425: IFFALSE 77442
// time := time * - 1 ;
77427: LD_ADDR_VAR 0 8
77431: PUSH
77432: LD_VAR 0 8
77436: PUSH
77437: LD_INT 1
77439: NEG
77440: MUL
77441: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77442: LD_VAR 0 8
77446: PUSH
77447: LD_INT 35
77449: PPUSH
77450: LD_INT 875
77452: PPUSH
77453: CALL_OW 12
77457: PLUS
77458: PPUSH
77459: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77463: LD_INT 1
77465: PPUSH
77466: LD_INT 5
77468: PPUSH
77469: CALL_OW 12
77473: PPUSH
77474: LD_VAR 0 1
77478: PPUSH
77479: LD_INT 1
77481: PPUSH
77482: CALL_OW 55
// end ;
77486: GO 77299
// end ;
77488: LD_VAR 0 5
77492: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77493: LD_INT 0
77495: PPUSH
77496: PPUSH
77497: PPUSH
77498: PPUSH
77499: PPUSH
77500: PPUSH
77501: PPUSH
77502: PPUSH
// if not turrets or not factories then
77503: LD_VAR 0 1
77507: NOT
77508: PUSH
77509: LD_VAR 0 2
77513: NOT
77514: OR
77515: IFFALSE 77519
// exit ;
77517: GO 77826
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77519: LD_ADDR_VAR 0 10
77523: PUSH
77524: LD_INT 5
77526: PUSH
77527: LD_INT 6
77529: PUSH
77530: EMPTY
77531: LIST
77532: LIST
77533: PUSH
77534: LD_INT 2
77536: PUSH
77537: LD_INT 4
77539: PUSH
77540: EMPTY
77541: LIST
77542: LIST
77543: PUSH
77544: LD_INT 3
77546: PUSH
77547: LD_INT 5
77549: PUSH
77550: EMPTY
77551: LIST
77552: LIST
77553: PUSH
77554: EMPTY
77555: LIST
77556: LIST
77557: LIST
77558: PUSH
77559: LD_INT 24
77561: PUSH
77562: LD_INT 25
77564: PUSH
77565: EMPTY
77566: LIST
77567: LIST
77568: PUSH
77569: LD_INT 23
77571: PUSH
77572: LD_INT 27
77574: PUSH
77575: EMPTY
77576: LIST
77577: LIST
77578: PUSH
77579: EMPTY
77580: LIST
77581: LIST
77582: PUSH
77583: LD_INT 42
77585: PUSH
77586: LD_INT 43
77588: PUSH
77589: EMPTY
77590: LIST
77591: LIST
77592: PUSH
77593: LD_INT 44
77595: PUSH
77596: LD_INT 46
77598: PUSH
77599: EMPTY
77600: LIST
77601: LIST
77602: PUSH
77603: LD_INT 45
77605: PUSH
77606: LD_INT 47
77608: PUSH
77609: EMPTY
77610: LIST
77611: LIST
77612: PUSH
77613: EMPTY
77614: LIST
77615: LIST
77616: LIST
77617: PUSH
77618: EMPTY
77619: LIST
77620: LIST
77621: LIST
77622: ST_TO_ADDR
// result := [ ] ;
77623: LD_ADDR_VAR 0 3
77627: PUSH
77628: EMPTY
77629: ST_TO_ADDR
// for i in turrets do
77630: LD_ADDR_VAR 0 4
77634: PUSH
77635: LD_VAR 0 1
77639: PUSH
77640: FOR_IN
77641: IFFALSE 77824
// begin nat := GetNation ( i ) ;
77643: LD_ADDR_VAR 0 7
77647: PUSH
77648: LD_VAR 0 4
77652: PPUSH
77653: CALL_OW 248
77657: ST_TO_ADDR
// weapon := 0 ;
77658: LD_ADDR_VAR 0 8
77662: PUSH
77663: LD_INT 0
77665: ST_TO_ADDR
// if not nat then
77666: LD_VAR 0 7
77670: NOT
77671: IFFALSE 77675
// continue ;
77673: GO 77640
// for j in list [ nat ] do
77675: LD_ADDR_VAR 0 5
77679: PUSH
77680: LD_VAR 0 10
77684: PUSH
77685: LD_VAR 0 7
77689: ARRAY
77690: PUSH
77691: FOR_IN
77692: IFFALSE 77733
// if GetBWeapon ( i ) = j [ 1 ] then
77694: LD_VAR 0 4
77698: PPUSH
77699: CALL_OW 269
77703: PUSH
77704: LD_VAR 0 5
77708: PUSH
77709: LD_INT 1
77711: ARRAY
77712: EQUAL
77713: IFFALSE 77731
// begin weapon := j [ 2 ] ;
77715: LD_ADDR_VAR 0 8
77719: PUSH
77720: LD_VAR 0 5
77724: PUSH
77725: LD_INT 2
77727: ARRAY
77728: ST_TO_ADDR
// break ;
77729: GO 77733
// end ;
77731: GO 77691
77733: POP
77734: POP
// if not weapon then
77735: LD_VAR 0 8
77739: NOT
77740: IFFALSE 77744
// continue ;
77742: GO 77640
// for k in factories do
77744: LD_ADDR_VAR 0 6
77748: PUSH
77749: LD_VAR 0 2
77753: PUSH
77754: FOR_IN
77755: IFFALSE 77820
// begin weapons := AvailableWeaponList ( k ) ;
77757: LD_ADDR_VAR 0 9
77761: PUSH
77762: LD_VAR 0 6
77766: PPUSH
77767: CALL_OW 478
77771: ST_TO_ADDR
// if not weapons then
77772: LD_VAR 0 9
77776: NOT
77777: IFFALSE 77781
// continue ;
77779: GO 77754
// if weapon in weapons then
77781: LD_VAR 0 8
77785: PUSH
77786: LD_VAR 0 9
77790: IN
77791: IFFALSE 77818
// begin result := [ i , weapon ] ;
77793: LD_ADDR_VAR 0 3
77797: PUSH
77798: LD_VAR 0 4
77802: PUSH
77803: LD_VAR 0 8
77807: PUSH
77808: EMPTY
77809: LIST
77810: LIST
77811: ST_TO_ADDR
// exit ;
77812: POP
77813: POP
77814: POP
77815: POP
77816: GO 77826
// end ; end ;
77818: GO 77754
77820: POP
77821: POP
// end ;
77822: GO 77640
77824: POP
77825: POP
// end ;
77826: LD_VAR 0 3
77830: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77831: LD_INT 0
77833: PPUSH
// if not side or side > 8 then
77834: LD_VAR 0 3
77838: NOT
77839: PUSH
77840: LD_VAR 0 3
77844: PUSH
77845: LD_INT 8
77847: GREATER
77848: OR
77849: IFFALSE 77853
// exit ;
77851: GO 77912
// if not range then
77853: LD_VAR 0 4
77857: NOT
77858: IFFALSE 77869
// range := - 12 ;
77860: LD_ADDR_VAR 0 4
77864: PUSH
77865: LD_INT 12
77867: NEG
77868: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77869: LD_VAR 0 1
77873: PPUSH
77874: LD_VAR 0 2
77878: PPUSH
77879: LD_VAR 0 3
77883: PPUSH
77884: LD_VAR 0 4
77888: PPUSH
77889: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77893: LD_VAR 0 1
77897: PPUSH
77898: LD_VAR 0 2
77902: PPUSH
77903: LD_VAR 0 3
77907: PPUSH
77908: CALL_OW 331
// end ;
77912: LD_VAR 0 5
77916: RET
// export function Video ( mode ) ; begin
77917: LD_INT 0
77919: PPUSH
// ingame_video = mode ;
77920: LD_ADDR_OWVAR 52
77924: PUSH
77925: LD_VAR 0 1
77929: ST_TO_ADDR
// interface_hidden = mode ;
77930: LD_ADDR_OWVAR 54
77934: PUSH
77935: LD_VAR 0 1
77939: ST_TO_ADDR
// end ;
77940: LD_VAR 0 2
77944: RET
// export function Join ( array , element ) ; begin
77945: LD_INT 0
77947: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77948: LD_ADDR_VAR 0 3
77952: PUSH
77953: LD_VAR 0 1
77957: PPUSH
77958: LD_VAR 0 1
77962: PUSH
77963: LD_INT 1
77965: PLUS
77966: PPUSH
77967: LD_VAR 0 2
77971: PPUSH
77972: CALL_OW 1
77976: ST_TO_ADDR
// end ;
77977: LD_VAR 0 3
77981: RET
// export function JoinUnion ( array , element ) ; begin
77982: LD_INT 0
77984: PPUSH
// result := array union element ;
77985: LD_ADDR_VAR 0 3
77989: PUSH
77990: LD_VAR 0 1
77994: PUSH
77995: LD_VAR 0 2
77999: UNION
78000: ST_TO_ADDR
// end ;
78001: LD_VAR 0 3
78005: RET
// export function GetBehemoths ( side ) ; begin
78006: LD_INT 0
78008: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78009: LD_ADDR_VAR 0 2
78013: PUSH
78014: LD_INT 22
78016: PUSH
78017: LD_VAR 0 1
78021: PUSH
78022: EMPTY
78023: LIST
78024: LIST
78025: PUSH
78026: LD_INT 31
78028: PUSH
78029: LD_INT 25
78031: PUSH
78032: EMPTY
78033: LIST
78034: LIST
78035: PUSH
78036: EMPTY
78037: LIST
78038: LIST
78039: PPUSH
78040: CALL_OW 69
78044: ST_TO_ADDR
// end ;
78045: LD_VAR 0 2
78049: RET
// export function Shuffle ( array ) ; var i , index ; begin
78050: LD_INT 0
78052: PPUSH
78053: PPUSH
78054: PPUSH
// result := [ ] ;
78055: LD_ADDR_VAR 0 2
78059: PUSH
78060: EMPTY
78061: ST_TO_ADDR
// if not array then
78062: LD_VAR 0 1
78066: NOT
78067: IFFALSE 78071
// exit ;
78069: GO 78170
// Randomize ;
78071: CALL_OW 10
// for i = array downto 1 do
78075: LD_ADDR_VAR 0 3
78079: PUSH
78080: DOUBLE
78081: LD_VAR 0 1
78085: INC
78086: ST_TO_ADDR
78087: LD_INT 1
78089: PUSH
78090: FOR_DOWNTO
78091: IFFALSE 78168
// begin index := rand ( 1 , array ) ;
78093: LD_ADDR_VAR 0 4
78097: PUSH
78098: LD_INT 1
78100: PPUSH
78101: LD_VAR 0 1
78105: PPUSH
78106: CALL_OW 12
78110: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78111: LD_ADDR_VAR 0 2
78115: PUSH
78116: LD_VAR 0 2
78120: PPUSH
78121: LD_VAR 0 2
78125: PUSH
78126: LD_INT 1
78128: PLUS
78129: PPUSH
78130: LD_VAR 0 1
78134: PUSH
78135: LD_VAR 0 4
78139: ARRAY
78140: PPUSH
78141: CALL_OW 2
78145: ST_TO_ADDR
// array := Delete ( array , index ) ;
78146: LD_ADDR_VAR 0 1
78150: PUSH
78151: LD_VAR 0 1
78155: PPUSH
78156: LD_VAR 0 4
78160: PPUSH
78161: CALL_OW 3
78165: ST_TO_ADDR
// end ;
78166: GO 78090
78168: POP
78169: POP
// end ;
78170: LD_VAR 0 2
78174: RET
// export function GetBaseMaterials ( base ) ; begin
78175: LD_INT 0
78177: PPUSH
// result := [ 0 , 0 , 0 ] ;
78178: LD_ADDR_VAR 0 2
78182: PUSH
78183: LD_INT 0
78185: PUSH
78186: LD_INT 0
78188: PUSH
78189: LD_INT 0
78191: PUSH
78192: EMPTY
78193: LIST
78194: LIST
78195: LIST
78196: ST_TO_ADDR
// if not base then
78197: LD_VAR 0 1
78201: NOT
78202: IFFALSE 78206
// exit ;
78204: GO 78255
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78206: LD_ADDR_VAR 0 2
78210: PUSH
78211: LD_VAR 0 1
78215: PPUSH
78216: LD_INT 1
78218: PPUSH
78219: CALL_OW 275
78223: PUSH
78224: LD_VAR 0 1
78228: PPUSH
78229: LD_INT 2
78231: PPUSH
78232: CALL_OW 275
78236: PUSH
78237: LD_VAR 0 1
78241: PPUSH
78242: LD_INT 3
78244: PPUSH
78245: CALL_OW 275
78249: PUSH
78250: EMPTY
78251: LIST
78252: LIST
78253: LIST
78254: ST_TO_ADDR
// end ;
78255: LD_VAR 0 2
78259: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78260: LD_INT 0
78262: PPUSH
78263: PPUSH
// result := array ;
78264: LD_ADDR_VAR 0 3
78268: PUSH
78269: LD_VAR 0 1
78273: ST_TO_ADDR
// if size >= result then
78274: LD_VAR 0 2
78278: PUSH
78279: LD_VAR 0 3
78283: GREATEREQUAL
78284: IFFALSE 78288
// exit ;
78286: GO 78338
// if size then
78288: LD_VAR 0 2
78292: IFFALSE 78338
// for i := array downto size do
78294: LD_ADDR_VAR 0 4
78298: PUSH
78299: DOUBLE
78300: LD_VAR 0 1
78304: INC
78305: ST_TO_ADDR
78306: LD_VAR 0 2
78310: PUSH
78311: FOR_DOWNTO
78312: IFFALSE 78336
// result := Delete ( result , result ) ;
78314: LD_ADDR_VAR 0 3
78318: PUSH
78319: LD_VAR 0 3
78323: PPUSH
78324: LD_VAR 0 3
78328: PPUSH
78329: CALL_OW 3
78333: ST_TO_ADDR
78334: GO 78311
78336: POP
78337: POP
// end ;
78338: LD_VAR 0 3
78342: RET
// export function ComExit ( unit ) ; var tmp ; begin
78343: LD_INT 0
78345: PPUSH
78346: PPUSH
// if not IsInUnit ( unit ) then
78347: LD_VAR 0 1
78351: PPUSH
78352: CALL_OW 310
78356: NOT
78357: IFFALSE 78361
// exit ;
78359: GO 78421
// tmp := IsInUnit ( unit ) ;
78361: LD_ADDR_VAR 0 3
78365: PUSH
78366: LD_VAR 0 1
78370: PPUSH
78371: CALL_OW 310
78375: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78376: LD_VAR 0 3
78380: PPUSH
78381: CALL_OW 247
78385: PUSH
78386: LD_INT 2
78388: EQUAL
78389: IFFALSE 78402
// ComExitVehicle ( unit ) else
78391: LD_VAR 0 1
78395: PPUSH
78396: CALL_OW 121
78400: GO 78411
// ComExitBuilding ( unit ) ;
78402: LD_VAR 0 1
78406: PPUSH
78407: CALL_OW 122
// result := tmp ;
78411: LD_ADDR_VAR 0 2
78415: PUSH
78416: LD_VAR 0 3
78420: ST_TO_ADDR
// end ;
78421: LD_VAR 0 2
78425: RET
// export function ComExitAll ( units ) ; var i ; begin
78426: LD_INT 0
78428: PPUSH
78429: PPUSH
// if not units then
78430: LD_VAR 0 1
78434: NOT
78435: IFFALSE 78439
// exit ;
78437: GO 78465
// for i in units do
78439: LD_ADDR_VAR 0 3
78443: PUSH
78444: LD_VAR 0 1
78448: PUSH
78449: FOR_IN
78450: IFFALSE 78463
// ComExit ( i ) ;
78452: LD_VAR 0 3
78456: PPUSH
78457: CALL 78343 0 1
78461: GO 78449
78463: POP
78464: POP
// end ;
78465: LD_VAR 0 2
78469: RET
// export function ResetHc ; begin
78470: LD_INT 0
78472: PPUSH
// InitHc ;
78473: CALL_OW 19
// hc_importance := 0 ;
78477: LD_ADDR_OWVAR 32
78481: PUSH
78482: LD_INT 0
78484: ST_TO_ADDR
// end ;
78485: LD_VAR 0 1
78489: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78490: LD_INT 0
78492: PPUSH
78493: PPUSH
78494: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78495: LD_ADDR_VAR 0 6
78499: PUSH
78500: LD_VAR 0 1
78504: PUSH
78505: LD_VAR 0 3
78509: PLUS
78510: PUSH
78511: LD_INT 2
78513: DIV
78514: ST_TO_ADDR
// if _x < 0 then
78515: LD_VAR 0 6
78519: PUSH
78520: LD_INT 0
78522: LESS
78523: IFFALSE 78540
// _x := _x * - 1 ;
78525: LD_ADDR_VAR 0 6
78529: PUSH
78530: LD_VAR 0 6
78534: PUSH
78535: LD_INT 1
78537: NEG
78538: MUL
78539: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78540: LD_ADDR_VAR 0 7
78544: PUSH
78545: LD_VAR 0 2
78549: PUSH
78550: LD_VAR 0 4
78554: PLUS
78555: PUSH
78556: LD_INT 2
78558: DIV
78559: ST_TO_ADDR
// if _y < 0 then
78560: LD_VAR 0 7
78564: PUSH
78565: LD_INT 0
78567: LESS
78568: IFFALSE 78585
// _y := _y * - 1 ;
78570: LD_ADDR_VAR 0 7
78574: PUSH
78575: LD_VAR 0 7
78579: PUSH
78580: LD_INT 1
78582: NEG
78583: MUL
78584: ST_TO_ADDR
// result := [ _x , _y ] ;
78585: LD_ADDR_VAR 0 5
78589: PUSH
78590: LD_VAR 0 6
78594: PUSH
78595: LD_VAR 0 7
78599: PUSH
78600: EMPTY
78601: LIST
78602: LIST
78603: ST_TO_ADDR
// end ;
78604: LD_VAR 0 5
78608: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78609: LD_INT 0
78611: PPUSH
78612: PPUSH
78613: PPUSH
78614: PPUSH
// task := GetTaskList ( unit ) ;
78615: LD_ADDR_VAR 0 7
78619: PUSH
78620: LD_VAR 0 1
78624: PPUSH
78625: CALL_OW 437
78629: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78630: LD_VAR 0 7
78634: NOT
78635: PUSH
78636: LD_VAR 0 1
78640: PPUSH
78641: LD_VAR 0 2
78645: PPUSH
78646: CALL_OW 308
78650: NOT
78651: AND
78652: IFFALSE 78656
// exit ;
78654: GO 78774
// if IsInArea ( unit , area ) then
78656: LD_VAR 0 1
78660: PPUSH
78661: LD_VAR 0 2
78665: PPUSH
78666: CALL_OW 308
78670: IFFALSE 78688
// begin ComMoveToArea ( unit , goAway ) ;
78672: LD_VAR 0 1
78676: PPUSH
78677: LD_VAR 0 3
78681: PPUSH
78682: CALL_OW 113
// exit ;
78686: GO 78774
// end ; if task [ 1 ] [ 1 ] <> M then
78688: LD_VAR 0 7
78692: PUSH
78693: LD_INT 1
78695: ARRAY
78696: PUSH
78697: LD_INT 1
78699: ARRAY
78700: PUSH
78701: LD_STRING M
78703: NONEQUAL
78704: IFFALSE 78708
// exit ;
78706: GO 78774
// x := task [ 1 ] [ 2 ] ;
78708: LD_ADDR_VAR 0 5
78712: PUSH
78713: LD_VAR 0 7
78717: PUSH
78718: LD_INT 1
78720: ARRAY
78721: PUSH
78722: LD_INT 2
78724: ARRAY
78725: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78726: LD_ADDR_VAR 0 6
78730: PUSH
78731: LD_VAR 0 7
78735: PUSH
78736: LD_INT 1
78738: ARRAY
78739: PUSH
78740: LD_INT 3
78742: ARRAY
78743: ST_TO_ADDR
// if InArea ( x , y , area ) then
78744: LD_VAR 0 5
78748: PPUSH
78749: LD_VAR 0 6
78753: PPUSH
78754: LD_VAR 0 2
78758: PPUSH
78759: CALL_OW 309
78763: IFFALSE 78774
// ComStop ( unit ) ;
78765: LD_VAR 0 1
78769: PPUSH
78770: CALL_OW 141
// end ;
78774: LD_VAR 0 4
78778: RET
// export function Abs ( value ) ; begin
78779: LD_INT 0
78781: PPUSH
// result := value ;
78782: LD_ADDR_VAR 0 2
78786: PUSH
78787: LD_VAR 0 1
78791: ST_TO_ADDR
// if value < 0 then
78792: LD_VAR 0 1
78796: PUSH
78797: LD_INT 0
78799: LESS
78800: IFFALSE 78817
// result := value * - 1 ;
78802: LD_ADDR_VAR 0 2
78806: PUSH
78807: LD_VAR 0 1
78811: PUSH
78812: LD_INT 1
78814: NEG
78815: MUL
78816: ST_TO_ADDR
// end ;
78817: LD_VAR 0 2
78821: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78822: LD_INT 0
78824: PPUSH
78825: PPUSH
78826: PPUSH
78827: PPUSH
78828: PPUSH
78829: PPUSH
78830: PPUSH
78831: PPUSH
// if not unit or not building then
78832: LD_VAR 0 1
78836: NOT
78837: PUSH
78838: LD_VAR 0 2
78842: NOT
78843: OR
78844: IFFALSE 78848
// exit ;
78846: GO 79074
// x := GetX ( building ) ;
78848: LD_ADDR_VAR 0 4
78852: PUSH
78853: LD_VAR 0 2
78857: PPUSH
78858: CALL_OW 250
78862: ST_TO_ADDR
// y := GetY ( building ) ;
78863: LD_ADDR_VAR 0 6
78867: PUSH
78868: LD_VAR 0 2
78872: PPUSH
78873: CALL_OW 251
78877: ST_TO_ADDR
// d := GetDir ( building ) ;
78878: LD_ADDR_VAR 0 8
78882: PUSH
78883: LD_VAR 0 2
78887: PPUSH
78888: CALL_OW 254
78892: ST_TO_ADDR
// r := 4 ;
78893: LD_ADDR_VAR 0 9
78897: PUSH
78898: LD_INT 4
78900: ST_TO_ADDR
// for i := 1 to 5 do
78901: LD_ADDR_VAR 0 10
78905: PUSH
78906: DOUBLE
78907: LD_INT 1
78909: DEC
78910: ST_TO_ADDR
78911: LD_INT 5
78913: PUSH
78914: FOR_TO
78915: IFFALSE 79072
// begin _x := ShiftX ( x , d , r + i ) ;
78917: LD_ADDR_VAR 0 5
78921: PUSH
78922: LD_VAR 0 4
78926: PPUSH
78927: LD_VAR 0 8
78931: PPUSH
78932: LD_VAR 0 9
78936: PUSH
78937: LD_VAR 0 10
78941: PLUS
78942: PPUSH
78943: CALL_OW 272
78947: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78948: LD_ADDR_VAR 0 7
78952: PUSH
78953: LD_VAR 0 6
78957: PPUSH
78958: LD_VAR 0 8
78962: PPUSH
78963: LD_VAR 0 9
78967: PUSH
78968: LD_VAR 0 10
78972: PLUS
78973: PPUSH
78974: CALL_OW 273
78978: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78979: LD_VAR 0 5
78983: PPUSH
78984: LD_VAR 0 7
78988: PPUSH
78989: CALL_OW 488
78993: PUSH
78994: LD_VAR 0 5
78998: PPUSH
78999: LD_VAR 0 7
79003: PPUSH
79004: CALL_OW 428
79008: PPUSH
79009: CALL_OW 247
79013: PUSH
79014: LD_INT 3
79016: PUSH
79017: LD_INT 2
79019: PUSH
79020: EMPTY
79021: LIST
79022: LIST
79023: IN
79024: NOT
79025: AND
79026: IFFALSE 79070
// begin ComMoveXY ( unit , _x , _y ) ;
79028: LD_VAR 0 1
79032: PPUSH
79033: LD_VAR 0 5
79037: PPUSH
79038: LD_VAR 0 7
79042: PPUSH
79043: CALL_OW 111
// result := [ _x , _y ] ;
79047: LD_ADDR_VAR 0 3
79051: PUSH
79052: LD_VAR 0 5
79056: PUSH
79057: LD_VAR 0 7
79061: PUSH
79062: EMPTY
79063: LIST
79064: LIST
79065: ST_TO_ADDR
// exit ;
79066: POP
79067: POP
79068: GO 79074
// end ; end ;
79070: GO 78914
79072: POP
79073: POP
// end ;
79074: LD_VAR 0 3
79078: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79079: LD_INT 0
79081: PPUSH
79082: PPUSH
79083: PPUSH
// result := 0 ;
79084: LD_ADDR_VAR 0 3
79088: PUSH
79089: LD_INT 0
79091: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79092: LD_VAR 0 1
79096: PUSH
79097: LD_INT 0
79099: LESS
79100: PUSH
79101: LD_VAR 0 1
79105: PUSH
79106: LD_INT 8
79108: GREATER
79109: OR
79110: PUSH
79111: LD_VAR 0 2
79115: PUSH
79116: LD_INT 0
79118: LESS
79119: OR
79120: PUSH
79121: LD_VAR 0 2
79125: PUSH
79126: LD_INT 8
79128: GREATER
79129: OR
79130: IFFALSE 79134
// exit ;
79132: GO 79209
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79134: LD_ADDR_VAR 0 4
79138: PUSH
79139: LD_INT 22
79141: PUSH
79142: LD_VAR 0 2
79146: PUSH
79147: EMPTY
79148: LIST
79149: LIST
79150: PPUSH
79151: CALL_OW 69
79155: PUSH
79156: FOR_IN
79157: IFFALSE 79207
// begin un := UnitShoot ( i ) ;
79159: LD_ADDR_VAR 0 5
79163: PUSH
79164: LD_VAR 0 4
79168: PPUSH
79169: CALL_OW 504
79173: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79174: LD_VAR 0 5
79178: PPUSH
79179: CALL_OW 255
79183: PUSH
79184: LD_VAR 0 1
79188: EQUAL
79189: IFFALSE 79205
// begin result := un ;
79191: LD_ADDR_VAR 0 3
79195: PUSH
79196: LD_VAR 0 5
79200: ST_TO_ADDR
// exit ;
79201: POP
79202: POP
79203: GO 79209
// end ; end ;
79205: GO 79156
79207: POP
79208: POP
// end ;
79209: LD_VAR 0 3
79213: RET
// export function GetCargoBay ( units ) ; begin
79214: LD_INT 0
79216: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79217: LD_ADDR_VAR 0 2
79221: PUSH
79222: LD_VAR 0 1
79226: PPUSH
79227: LD_INT 2
79229: PUSH
79230: LD_INT 34
79232: PUSH
79233: LD_INT 12
79235: PUSH
79236: EMPTY
79237: LIST
79238: LIST
79239: PUSH
79240: LD_INT 34
79242: PUSH
79243: LD_INT 51
79245: PUSH
79246: EMPTY
79247: LIST
79248: LIST
79249: PUSH
79250: LD_INT 34
79252: PUSH
79253: LD_INT 32
79255: PUSH
79256: EMPTY
79257: LIST
79258: LIST
79259: PUSH
79260: LD_INT 34
79262: PUSH
79263: LD_INT 89
79265: PUSH
79266: EMPTY
79267: LIST
79268: LIST
79269: PUSH
79270: EMPTY
79271: LIST
79272: LIST
79273: LIST
79274: LIST
79275: LIST
79276: PPUSH
79277: CALL_OW 72
79281: ST_TO_ADDR
// end ;
79282: LD_VAR 0 2
79286: RET
// export function Negate ( value ) ; begin
79287: LD_INT 0
79289: PPUSH
// result := not value ;
79290: LD_ADDR_VAR 0 2
79294: PUSH
79295: LD_VAR 0 1
79299: NOT
79300: ST_TO_ADDR
// end ;
79301: LD_VAR 0 2
79305: RET
// export function Inc ( value ) ; begin
79306: LD_INT 0
79308: PPUSH
// result := value + 1 ;
79309: LD_ADDR_VAR 0 2
79313: PUSH
79314: LD_VAR 0 1
79318: PUSH
79319: LD_INT 1
79321: PLUS
79322: ST_TO_ADDR
// end ;
79323: LD_VAR 0 2
79327: RET
// export function Dec ( value ) ; begin
79328: LD_INT 0
79330: PPUSH
// result := value - 1 ;
79331: LD_ADDR_VAR 0 2
79335: PUSH
79336: LD_VAR 0 1
79340: PUSH
79341: LD_INT 1
79343: MINUS
79344: ST_TO_ADDR
// end ;
79345: LD_VAR 0 2
79349: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79350: LD_INT 0
79352: PPUSH
79353: PPUSH
79354: PPUSH
79355: PPUSH
79356: PPUSH
79357: PPUSH
79358: PPUSH
79359: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79360: LD_VAR 0 1
79364: PPUSH
79365: LD_VAR 0 2
79369: PPUSH
79370: CALL_OW 488
79374: NOT
79375: PUSH
79376: LD_VAR 0 3
79380: PPUSH
79381: LD_VAR 0 4
79385: PPUSH
79386: CALL_OW 488
79390: NOT
79391: OR
79392: IFFALSE 79405
// begin result := - 1 ;
79394: LD_ADDR_VAR 0 5
79398: PUSH
79399: LD_INT 1
79401: NEG
79402: ST_TO_ADDR
// exit ;
79403: GO 79640
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79405: LD_ADDR_VAR 0 12
79409: PUSH
79410: LD_VAR 0 1
79414: PPUSH
79415: LD_VAR 0 2
79419: PPUSH
79420: LD_VAR 0 3
79424: PPUSH
79425: LD_VAR 0 4
79429: PPUSH
79430: CALL 78490 0 4
79434: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79435: LD_ADDR_VAR 0 11
79439: PUSH
79440: LD_VAR 0 1
79444: PPUSH
79445: LD_VAR 0 2
79449: PPUSH
79450: LD_VAR 0 12
79454: PUSH
79455: LD_INT 1
79457: ARRAY
79458: PPUSH
79459: LD_VAR 0 12
79463: PUSH
79464: LD_INT 2
79466: ARRAY
79467: PPUSH
79468: CALL_OW 298
79472: ST_TO_ADDR
// distance := 9999 ;
79473: LD_ADDR_VAR 0 10
79477: PUSH
79478: LD_INT 9999
79480: ST_TO_ADDR
// for i := 0 to 5 do
79481: LD_ADDR_VAR 0 6
79485: PUSH
79486: DOUBLE
79487: LD_INT 0
79489: DEC
79490: ST_TO_ADDR
79491: LD_INT 5
79493: PUSH
79494: FOR_TO
79495: IFFALSE 79638
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79497: LD_ADDR_VAR 0 7
79501: PUSH
79502: LD_VAR 0 1
79506: PPUSH
79507: LD_VAR 0 6
79511: PPUSH
79512: LD_VAR 0 11
79516: PPUSH
79517: CALL_OW 272
79521: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79522: LD_ADDR_VAR 0 8
79526: PUSH
79527: LD_VAR 0 2
79531: PPUSH
79532: LD_VAR 0 6
79536: PPUSH
79537: LD_VAR 0 11
79541: PPUSH
79542: CALL_OW 273
79546: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79547: LD_VAR 0 7
79551: PPUSH
79552: LD_VAR 0 8
79556: PPUSH
79557: CALL_OW 488
79561: NOT
79562: IFFALSE 79566
// continue ;
79564: GO 79494
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79566: LD_ADDR_VAR 0 9
79570: PUSH
79571: LD_VAR 0 12
79575: PUSH
79576: LD_INT 1
79578: ARRAY
79579: PPUSH
79580: LD_VAR 0 12
79584: PUSH
79585: LD_INT 2
79587: ARRAY
79588: PPUSH
79589: LD_VAR 0 7
79593: PPUSH
79594: LD_VAR 0 8
79598: PPUSH
79599: CALL_OW 298
79603: ST_TO_ADDR
// if tmp < distance then
79604: LD_VAR 0 9
79608: PUSH
79609: LD_VAR 0 10
79613: LESS
79614: IFFALSE 79636
// begin result := i ;
79616: LD_ADDR_VAR 0 5
79620: PUSH
79621: LD_VAR 0 6
79625: ST_TO_ADDR
// distance := tmp ;
79626: LD_ADDR_VAR 0 10
79630: PUSH
79631: LD_VAR 0 9
79635: ST_TO_ADDR
// end ; end ;
79636: GO 79494
79638: POP
79639: POP
// end ;
79640: LD_VAR 0 5
79644: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79645: LD_INT 0
79647: PPUSH
79648: PPUSH
// if not driver or not IsInUnit ( driver ) then
79649: LD_VAR 0 1
79653: NOT
79654: PUSH
79655: LD_VAR 0 1
79659: PPUSH
79660: CALL_OW 310
79664: NOT
79665: OR
79666: IFFALSE 79670
// exit ;
79668: GO 79760
// vehicle := IsInUnit ( driver ) ;
79670: LD_ADDR_VAR 0 3
79674: PUSH
79675: LD_VAR 0 1
79679: PPUSH
79680: CALL_OW 310
79684: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79685: LD_VAR 0 1
79689: PPUSH
79690: LD_STRING \
79692: PUSH
79693: LD_INT 0
79695: PUSH
79696: LD_INT 0
79698: PUSH
79699: LD_INT 0
79701: PUSH
79702: LD_INT 0
79704: PUSH
79705: LD_INT 0
79707: PUSH
79708: LD_INT 0
79710: PUSH
79711: EMPTY
79712: LIST
79713: LIST
79714: LIST
79715: LIST
79716: LIST
79717: LIST
79718: LIST
79719: PUSH
79720: LD_STRING E
79722: PUSH
79723: LD_INT 0
79725: PUSH
79726: LD_INT 0
79728: PUSH
79729: LD_VAR 0 3
79733: PUSH
79734: LD_INT 0
79736: PUSH
79737: LD_INT 0
79739: PUSH
79740: LD_INT 0
79742: PUSH
79743: EMPTY
79744: LIST
79745: LIST
79746: LIST
79747: LIST
79748: LIST
79749: LIST
79750: LIST
79751: PUSH
79752: EMPTY
79753: LIST
79754: LIST
79755: PPUSH
79756: CALL_OW 446
// end ;
79760: LD_VAR 0 2
79764: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79765: LD_INT 0
79767: PPUSH
79768: PPUSH
// if not driver or not IsInUnit ( driver ) then
79769: LD_VAR 0 1
79773: NOT
79774: PUSH
79775: LD_VAR 0 1
79779: PPUSH
79780: CALL_OW 310
79784: NOT
79785: OR
79786: IFFALSE 79790
// exit ;
79788: GO 79880
// vehicle := IsInUnit ( driver ) ;
79790: LD_ADDR_VAR 0 3
79794: PUSH
79795: LD_VAR 0 1
79799: PPUSH
79800: CALL_OW 310
79804: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79805: LD_VAR 0 1
79809: PPUSH
79810: LD_STRING \
79812: PUSH
79813: LD_INT 0
79815: PUSH
79816: LD_INT 0
79818: PUSH
79819: LD_INT 0
79821: PUSH
79822: LD_INT 0
79824: PUSH
79825: LD_INT 0
79827: PUSH
79828: LD_INT 0
79830: PUSH
79831: EMPTY
79832: LIST
79833: LIST
79834: LIST
79835: LIST
79836: LIST
79837: LIST
79838: LIST
79839: PUSH
79840: LD_STRING E
79842: PUSH
79843: LD_INT 0
79845: PUSH
79846: LD_INT 0
79848: PUSH
79849: LD_VAR 0 3
79853: PUSH
79854: LD_INT 0
79856: PUSH
79857: LD_INT 0
79859: PUSH
79860: LD_INT 0
79862: PUSH
79863: EMPTY
79864: LIST
79865: LIST
79866: LIST
79867: LIST
79868: LIST
79869: LIST
79870: LIST
79871: PUSH
79872: EMPTY
79873: LIST
79874: LIST
79875: PPUSH
79876: CALL_OW 447
// end ;
79880: LD_VAR 0 2
79884: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79885: LD_INT 0
79887: PPUSH
79888: PPUSH
79889: PPUSH
// tmp := [ ] ;
79890: LD_ADDR_VAR 0 5
79894: PUSH
79895: EMPTY
79896: ST_TO_ADDR
// for i in units do
79897: LD_ADDR_VAR 0 4
79901: PUSH
79902: LD_VAR 0 1
79906: PUSH
79907: FOR_IN
79908: IFFALSE 79946
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79910: LD_ADDR_VAR 0 5
79914: PUSH
79915: LD_VAR 0 5
79919: PPUSH
79920: LD_VAR 0 5
79924: PUSH
79925: LD_INT 1
79927: PLUS
79928: PPUSH
79929: LD_VAR 0 4
79933: PPUSH
79934: CALL_OW 256
79938: PPUSH
79939: CALL_OW 2
79943: ST_TO_ADDR
79944: GO 79907
79946: POP
79947: POP
// if not tmp then
79948: LD_VAR 0 5
79952: NOT
79953: IFFALSE 79957
// exit ;
79955: GO 80005
// if asc then
79957: LD_VAR 0 2
79961: IFFALSE 79985
// result := SortListByListAsc ( units , tmp ) else
79963: LD_ADDR_VAR 0 3
79967: PUSH
79968: LD_VAR 0 1
79972: PPUSH
79973: LD_VAR 0 5
79977: PPUSH
79978: CALL_OW 76
79982: ST_TO_ADDR
79983: GO 80005
// result := SortListByListDesc ( units , tmp ) ;
79985: LD_ADDR_VAR 0 3
79989: PUSH
79990: LD_VAR 0 1
79994: PPUSH
79995: LD_VAR 0 5
79999: PPUSH
80000: CALL_OW 77
80004: ST_TO_ADDR
// end ;
80005: LD_VAR 0 3
80009: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80010: LD_INT 0
80012: PPUSH
80013: PPUSH
// task := GetTaskList ( mech ) ;
80014: LD_ADDR_VAR 0 4
80018: PUSH
80019: LD_VAR 0 1
80023: PPUSH
80024: CALL_OW 437
80028: ST_TO_ADDR
// if not task then
80029: LD_VAR 0 4
80033: NOT
80034: IFFALSE 80038
// exit ;
80036: GO 80080
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80038: LD_ADDR_VAR 0 3
80042: PUSH
80043: LD_VAR 0 4
80047: PUSH
80048: LD_INT 1
80050: ARRAY
80051: PUSH
80052: LD_INT 1
80054: ARRAY
80055: PUSH
80056: LD_STRING r
80058: EQUAL
80059: PUSH
80060: LD_VAR 0 4
80064: PUSH
80065: LD_INT 1
80067: ARRAY
80068: PUSH
80069: LD_INT 4
80071: ARRAY
80072: PUSH
80073: LD_VAR 0 2
80077: EQUAL
80078: AND
80079: ST_TO_ADDR
// end ;
80080: LD_VAR 0 3
80084: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80085: LD_INT 0
80087: PPUSH
// SetDir ( unit , d ) ;
80088: LD_VAR 0 1
80092: PPUSH
80093: LD_VAR 0 4
80097: PPUSH
80098: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80102: LD_VAR 0 1
80106: PPUSH
80107: LD_VAR 0 2
80111: PPUSH
80112: LD_VAR 0 3
80116: PPUSH
80117: LD_VAR 0 5
80121: PPUSH
80122: CALL_OW 48
// end ;
80126: LD_VAR 0 6
80130: RET
// export function ToNaturalNumber ( number ) ; begin
80131: LD_INT 0
80133: PPUSH
// result := number div 1 ;
80134: LD_ADDR_VAR 0 2
80138: PUSH
80139: LD_VAR 0 1
80143: PUSH
80144: LD_INT 1
80146: DIV
80147: ST_TO_ADDR
// if number < 0 then
80148: LD_VAR 0 1
80152: PUSH
80153: LD_INT 0
80155: LESS
80156: IFFALSE 80166
// result := 0 ;
80158: LD_ADDR_VAR 0 2
80162: PUSH
80163: LD_INT 0
80165: ST_TO_ADDR
// end ;
80166: LD_VAR 0 2
80170: RET
// export function SortByClass ( units , class ) ; var un ; begin
80171: LD_INT 0
80173: PPUSH
80174: PPUSH
// if not units or not class then
80175: LD_VAR 0 1
80179: NOT
80180: PUSH
80181: LD_VAR 0 2
80185: NOT
80186: OR
80187: IFFALSE 80191
// exit ;
80189: GO 80286
// result := [ ] ;
80191: LD_ADDR_VAR 0 3
80195: PUSH
80196: EMPTY
80197: ST_TO_ADDR
// for un in units do
80198: LD_ADDR_VAR 0 4
80202: PUSH
80203: LD_VAR 0 1
80207: PUSH
80208: FOR_IN
80209: IFFALSE 80284
// if GetClass ( un ) = class then
80211: LD_VAR 0 4
80215: PPUSH
80216: CALL_OW 257
80220: PUSH
80221: LD_VAR 0 2
80225: EQUAL
80226: IFFALSE 80253
// result := Insert ( result , 1 , un ) else
80228: LD_ADDR_VAR 0 3
80232: PUSH
80233: LD_VAR 0 3
80237: PPUSH
80238: LD_INT 1
80240: PPUSH
80241: LD_VAR 0 4
80245: PPUSH
80246: CALL_OW 2
80250: ST_TO_ADDR
80251: GO 80282
// result := Replace ( result , result + 1 , un ) ;
80253: LD_ADDR_VAR 0 3
80257: PUSH
80258: LD_VAR 0 3
80262: PPUSH
80263: LD_VAR 0 3
80267: PUSH
80268: LD_INT 1
80270: PLUS
80271: PPUSH
80272: LD_VAR 0 4
80276: PPUSH
80277: CALL_OW 1
80281: ST_TO_ADDR
80282: GO 80208
80284: POP
80285: POP
// end ;
80286: LD_VAR 0 3
80290: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80291: LD_INT 0
80293: PPUSH
80294: PPUSH
80295: PPUSH
80296: PPUSH
80297: PPUSH
80298: PPUSH
80299: PPUSH
// result := [ ] ;
80300: LD_ADDR_VAR 0 4
80304: PUSH
80305: EMPTY
80306: ST_TO_ADDR
// if x - r < 0 then
80307: LD_VAR 0 1
80311: PUSH
80312: LD_VAR 0 3
80316: MINUS
80317: PUSH
80318: LD_INT 0
80320: LESS
80321: IFFALSE 80333
// min_x := 0 else
80323: LD_ADDR_VAR 0 8
80327: PUSH
80328: LD_INT 0
80330: ST_TO_ADDR
80331: GO 80349
// min_x := x - r ;
80333: LD_ADDR_VAR 0 8
80337: PUSH
80338: LD_VAR 0 1
80342: PUSH
80343: LD_VAR 0 3
80347: MINUS
80348: ST_TO_ADDR
// if y - r < 0 then
80349: LD_VAR 0 2
80353: PUSH
80354: LD_VAR 0 3
80358: MINUS
80359: PUSH
80360: LD_INT 0
80362: LESS
80363: IFFALSE 80375
// min_y := 0 else
80365: LD_ADDR_VAR 0 7
80369: PUSH
80370: LD_INT 0
80372: ST_TO_ADDR
80373: GO 80391
// min_y := y - r ;
80375: LD_ADDR_VAR 0 7
80379: PUSH
80380: LD_VAR 0 2
80384: PUSH
80385: LD_VAR 0 3
80389: MINUS
80390: ST_TO_ADDR
// max_x := x + r ;
80391: LD_ADDR_VAR 0 9
80395: PUSH
80396: LD_VAR 0 1
80400: PUSH
80401: LD_VAR 0 3
80405: PLUS
80406: ST_TO_ADDR
// max_y := y + r ;
80407: LD_ADDR_VAR 0 10
80411: PUSH
80412: LD_VAR 0 2
80416: PUSH
80417: LD_VAR 0 3
80421: PLUS
80422: ST_TO_ADDR
// for _x = min_x to max_x do
80423: LD_ADDR_VAR 0 5
80427: PUSH
80428: DOUBLE
80429: LD_VAR 0 8
80433: DEC
80434: ST_TO_ADDR
80435: LD_VAR 0 9
80439: PUSH
80440: FOR_TO
80441: IFFALSE 80542
// for _y = min_y to max_y do
80443: LD_ADDR_VAR 0 6
80447: PUSH
80448: DOUBLE
80449: LD_VAR 0 7
80453: DEC
80454: ST_TO_ADDR
80455: LD_VAR 0 10
80459: PUSH
80460: FOR_TO
80461: IFFALSE 80538
// begin if not ValidHex ( _x , _y ) then
80463: LD_VAR 0 5
80467: PPUSH
80468: LD_VAR 0 6
80472: PPUSH
80473: CALL_OW 488
80477: NOT
80478: IFFALSE 80482
// continue ;
80480: GO 80460
// if GetResourceTypeXY ( _x , _y ) then
80482: LD_VAR 0 5
80486: PPUSH
80487: LD_VAR 0 6
80491: PPUSH
80492: CALL_OW 283
80496: IFFALSE 80536
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80498: LD_ADDR_VAR 0 4
80502: PUSH
80503: LD_VAR 0 4
80507: PPUSH
80508: LD_VAR 0 4
80512: PUSH
80513: LD_INT 1
80515: PLUS
80516: PPUSH
80517: LD_VAR 0 5
80521: PUSH
80522: LD_VAR 0 6
80526: PUSH
80527: EMPTY
80528: LIST
80529: LIST
80530: PPUSH
80531: CALL_OW 1
80535: ST_TO_ADDR
// end ;
80536: GO 80460
80538: POP
80539: POP
80540: GO 80440
80542: POP
80543: POP
// end ;
80544: LD_VAR 0 4
80548: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80549: LD_INT 0
80551: PPUSH
80552: PPUSH
80553: PPUSH
80554: PPUSH
80555: PPUSH
80556: PPUSH
80557: PPUSH
80558: PPUSH
// if not units then
80559: LD_VAR 0 1
80563: NOT
80564: IFFALSE 80568
// exit ;
80566: GO 81092
// result := UnitFilter ( units , [ f_ok ] ) ;
80568: LD_ADDR_VAR 0 3
80572: PUSH
80573: LD_VAR 0 1
80577: PPUSH
80578: LD_INT 50
80580: PUSH
80581: EMPTY
80582: LIST
80583: PPUSH
80584: CALL_OW 72
80588: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80589: LD_ADDR_VAR 0 8
80593: PUSH
80594: LD_VAR 0 1
80598: PUSH
80599: LD_INT 1
80601: ARRAY
80602: PPUSH
80603: CALL_OW 255
80607: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80608: LD_ADDR_VAR 0 10
80612: PUSH
80613: LD_INT 29
80615: PUSH
80616: LD_INT 91
80618: PUSH
80619: LD_INT 49
80621: PUSH
80622: EMPTY
80623: LIST
80624: LIST
80625: LIST
80626: ST_TO_ADDR
// if not result then
80627: LD_VAR 0 3
80631: NOT
80632: IFFALSE 80636
// exit ;
80634: GO 81092
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80636: LD_ADDR_VAR 0 5
80640: PUSH
80641: LD_INT 81
80643: PUSH
80644: LD_VAR 0 8
80648: PUSH
80649: EMPTY
80650: LIST
80651: LIST
80652: PPUSH
80653: CALL_OW 69
80657: ST_TO_ADDR
// for i in result do
80658: LD_ADDR_VAR 0 4
80662: PUSH
80663: LD_VAR 0 3
80667: PUSH
80668: FOR_IN
80669: IFFALSE 81090
// begin tag := GetTag ( i ) + 1 ;
80671: LD_ADDR_VAR 0 9
80675: PUSH
80676: LD_VAR 0 4
80680: PPUSH
80681: CALL_OW 110
80685: PUSH
80686: LD_INT 1
80688: PLUS
80689: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80690: LD_ADDR_VAR 0 7
80694: PUSH
80695: LD_VAR 0 4
80699: PPUSH
80700: CALL_OW 250
80704: PPUSH
80705: LD_VAR 0 4
80709: PPUSH
80710: CALL_OW 251
80714: PPUSH
80715: LD_INT 6
80717: PPUSH
80718: CALL 80291 0 3
80722: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80723: LD_VAR 0 4
80727: PPUSH
80728: CALL_OW 247
80732: PUSH
80733: LD_INT 2
80735: EQUAL
80736: PUSH
80737: LD_VAR 0 7
80741: AND
80742: PUSH
80743: LD_VAR 0 4
80747: PPUSH
80748: CALL_OW 264
80752: PUSH
80753: LD_VAR 0 10
80757: IN
80758: NOT
80759: AND
80760: IFFALSE 80799
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80762: LD_VAR 0 4
80766: PPUSH
80767: LD_VAR 0 7
80771: PUSH
80772: LD_INT 1
80774: ARRAY
80775: PUSH
80776: LD_INT 1
80778: ARRAY
80779: PPUSH
80780: LD_VAR 0 7
80784: PUSH
80785: LD_INT 1
80787: ARRAY
80788: PUSH
80789: LD_INT 2
80791: ARRAY
80792: PPUSH
80793: CALL_OW 116
80797: GO 81088
// if path > tag then
80799: LD_VAR 0 2
80803: PUSH
80804: LD_VAR 0 9
80808: GREATER
80809: IFFALSE 81017
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80811: LD_ADDR_VAR 0 6
80815: PUSH
80816: LD_VAR 0 5
80820: PPUSH
80821: LD_INT 91
80823: PUSH
80824: LD_VAR 0 4
80828: PUSH
80829: LD_INT 8
80831: PUSH
80832: EMPTY
80833: LIST
80834: LIST
80835: LIST
80836: PPUSH
80837: CALL_OW 72
80841: ST_TO_ADDR
// if nearEnemy then
80842: LD_VAR 0 6
80846: IFFALSE 80915
// begin if GetWeapon ( i ) = ru_time_lapser then
80848: LD_VAR 0 4
80852: PPUSH
80853: CALL_OW 264
80857: PUSH
80858: LD_INT 49
80860: EQUAL
80861: IFFALSE 80889
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80863: LD_VAR 0 4
80867: PPUSH
80868: LD_VAR 0 6
80872: PPUSH
80873: LD_VAR 0 4
80877: PPUSH
80878: CALL_OW 74
80882: PPUSH
80883: CALL_OW 112
80887: GO 80913
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80889: LD_VAR 0 4
80893: PPUSH
80894: LD_VAR 0 6
80898: PPUSH
80899: LD_VAR 0 4
80903: PPUSH
80904: CALL_OW 74
80908: PPUSH
80909: CALL 82017 0 2
// end else
80913: GO 81015
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80915: LD_VAR 0 4
80919: PPUSH
80920: LD_VAR 0 2
80924: PUSH
80925: LD_VAR 0 9
80929: ARRAY
80930: PUSH
80931: LD_INT 1
80933: ARRAY
80934: PPUSH
80935: LD_VAR 0 2
80939: PUSH
80940: LD_VAR 0 9
80944: ARRAY
80945: PUSH
80946: LD_INT 2
80948: ARRAY
80949: PPUSH
80950: CALL_OW 297
80954: PUSH
80955: LD_INT 6
80957: GREATER
80958: IFFALSE 81001
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80960: LD_VAR 0 4
80964: PPUSH
80965: LD_VAR 0 2
80969: PUSH
80970: LD_VAR 0 9
80974: ARRAY
80975: PUSH
80976: LD_INT 1
80978: ARRAY
80979: PPUSH
80980: LD_VAR 0 2
80984: PUSH
80985: LD_VAR 0 9
80989: ARRAY
80990: PUSH
80991: LD_INT 2
80993: ARRAY
80994: PPUSH
80995: CALL_OW 114
80999: GO 81015
// SetTag ( i , tag ) ;
81001: LD_VAR 0 4
81005: PPUSH
81006: LD_VAR 0 9
81010: PPUSH
81011: CALL_OW 109
// end else
81015: GO 81088
// if enemy then
81017: LD_VAR 0 5
81021: IFFALSE 81088
// begin if GetWeapon ( i ) = ru_time_lapser then
81023: LD_VAR 0 4
81027: PPUSH
81028: CALL_OW 264
81032: PUSH
81033: LD_INT 49
81035: EQUAL
81036: IFFALSE 81064
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81038: LD_VAR 0 4
81042: PPUSH
81043: LD_VAR 0 5
81047: PPUSH
81048: LD_VAR 0 4
81052: PPUSH
81053: CALL_OW 74
81057: PPUSH
81058: CALL_OW 112
81062: GO 81088
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81064: LD_VAR 0 4
81068: PPUSH
81069: LD_VAR 0 5
81073: PPUSH
81074: LD_VAR 0 4
81078: PPUSH
81079: CALL_OW 74
81083: PPUSH
81084: CALL 82017 0 2
// end ; end ;
81088: GO 80668
81090: POP
81091: POP
// end ;
81092: LD_VAR 0 3
81096: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81097: LD_INT 0
81099: PPUSH
81100: PPUSH
81101: PPUSH
// if not unit or IsInUnit ( unit ) then
81102: LD_VAR 0 1
81106: NOT
81107: PUSH
81108: LD_VAR 0 1
81112: PPUSH
81113: CALL_OW 310
81117: OR
81118: IFFALSE 81122
// exit ;
81120: GO 81213
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81122: LD_ADDR_VAR 0 4
81126: PUSH
81127: LD_VAR 0 1
81131: PPUSH
81132: CALL_OW 250
81136: PPUSH
81137: LD_VAR 0 2
81141: PPUSH
81142: LD_INT 1
81144: PPUSH
81145: CALL_OW 272
81149: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81150: LD_ADDR_VAR 0 5
81154: PUSH
81155: LD_VAR 0 1
81159: PPUSH
81160: CALL_OW 251
81164: PPUSH
81165: LD_VAR 0 2
81169: PPUSH
81170: LD_INT 1
81172: PPUSH
81173: CALL_OW 273
81177: ST_TO_ADDR
// if ValidHex ( x , y ) then
81178: LD_VAR 0 4
81182: PPUSH
81183: LD_VAR 0 5
81187: PPUSH
81188: CALL_OW 488
81192: IFFALSE 81213
// ComTurnXY ( unit , x , y ) ;
81194: LD_VAR 0 1
81198: PPUSH
81199: LD_VAR 0 4
81203: PPUSH
81204: LD_VAR 0 5
81208: PPUSH
81209: CALL_OW 118
// end ;
81213: LD_VAR 0 3
81217: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81218: LD_INT 0
81220: PPUSH
81221: PPUSH
// result := false ;
81222: LD_ADDR_VAR 0 3
81226: PUSH
81227: LD_INT 0
81229: ST_TO_ADDR
// if not units then
81230: LD_VAR 0 2
81234: NOT
81235: IFFALSE 81239
// exit ;
81237: GO 81284
// for i in units do
81239: LD_ADDR_VAR 0 4
81243: PUSH
81244: LD_VAR 0 2
81248: PUSH
81249: FOR_IN
81250: IFFALSE 81282
// if See ( side , i ) then
81252: LD_VAR 0 1
81256: PPUSH
81257: LD_VAR 0 4
81261: PPUSH
81262: CALL_OW 292
81266: IFFALSE 81280
// begin result := true ;
81268: LD_ADDR_VAR 0 3
81272: PUSH
81273: LD_INT 1
81275: ST_TO_ADDR
// exit ;
81276: POP
81277: POP
81278: GO 81284
// end ;
81280: GO 81249
81282: POP
81283: POP
// end ;
81284: LD_VAR 0 3
81288: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81289: LD_INT 0
81291: PPUSH
81292: PPUSH
81293: PPUSH
81294: PPUSH
// if not unit or not points then
81295: LD_VAR 0 1
81299: NOT
81300: PUSH
81301: LD_VAR 0 2
81305: NOT
81306: OR
81307: IFFALSE 81311
// exit ;
81309: GO 81401
// dist := 99999 ;
81311: LD_ADDR_VAR 0 5
81315: PUSH
81316: LD_INT 99999
81318: ST_TO_ADDR
// for i in points do
81319: LD_ADDR_VAR 0 4
81323: PUSH
81324: LD_VAR 0 2
81328: PUSH
81329: FOR_IN
81330: IFFALSE 81399
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81332: LD_ADDR_VAR 0 6
81336: PUSH
81337: LD_VAR 0 1
81341: PPUSH
81342: LD_VAR 0 4
81346: PUSH
81347: LD_INT 1
81349: ARRAY
81350: PPUSH
81351: LD_VAR 0 4
81355: PUSH
81356: LD_INT 2
81358: ARRAY
81359: PPUSH
81360: CALL_OW 297
81364: ST_TO_ADDR
// if tmpDist < dist then
81365: LD_VAR 0 6
81369: PUSH
81370: LD_VAR 0 5
81374: LESS
81375: IFFALSE 81397
// begin result := i ;
81377: LD_ADDR_VAR 0 3
81381: PUSH
81382: LD_VAR 0 4
81386: ST_TO_ADDR
// dist := tmpDist ;
81387: LD_ADDR_VAR 0 5
81391: PUSH
81392: LD_VAR 0 6
81396: ST_TO_ADDR
// end ; end ;
81397: GO 81329
81399: POP
81400: POP
// end ;
81401: LD_VAR 0 3
81405: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81406: LD_INT 0
81408: PPUSH
// uc_side := side ;
81409: LD_ADDR_OWVAR 20
81413: PUSH
81414: LD_VAR 0 1
81418: ST_TO_ADDR
// uc_nation := 3 ;
81419: LD_ADDR_OWVAR 21
81423: PUSH
81424: LD_INT 3
81426: ST_TO_ADDR
// vc_chassis := 25 ;
81427: LD_ADDR_OWVAR 37
81431: PUSH
81432: LD_INT 25
81434: ST_TO_ADDR
// vc_engine := engine_siberite ;
81435: LD_ADDR_OWVAR 39
81439: PUSH
81440: LD_INT 3
81442: ST_TO_ADDR
// vc_control := control_computer ;
81443: LD_ADDR_OWVAR 38
81447: PUSH
81448: LD_INT 3
81450: ST_TO_ADDR
// vc_weapon := 59 ;
81451: LD_ADDR_OWVAR 40
81455: PUSH
81456: LD_INT 59
81458: ST_TO_ADDR
// result := CreateVehicle ;
81459: LD_ADDR_VAR 0 5
81463: PUSH
81464: CALL_OW 45
81468: ST_TO_ADDR
// SetDir ( result , d ) ;
81469: LD_VAR 0 5
81473: PPUSH
81474: LD_VAR 0 4
81478: PPUSH
81479: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81483: LD_VAR 0 5
81487: PPUSH
81488: LD_VAR 0 2
81492: PPUSH
81493: LD_VAR 0 3
81497: PPUSH
81498: LD_INT 0
81500: PPUSH
81501: CALL_OW 48
// end ;
81505: LD_VAR 0 5
81509: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81510: LD_INT 0
81512: PPUSH
81513: PPUSH
81514: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81515: LD_ADDR_VAR 0 2
81519: PUSH
81520: LD_INT 0
81522: PUSH
81523: LD_INT 0
81525: PUSH
81526: LD_INT 0
81528: PUSH
81529: LD_INT 0
81531: PUSH
81532: EMPTY
81533: LIST
81534: LIST
81535: LIST
81536: LIST
81537: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81538: LD_VAR 0 1
81542: NOT
81543: PUSH
81544: LD_VAR 0 1
81548: PPUSH
81549: CALL_OW 264
81553: PUSH
81554: LD_INT 12
81556: PUSH
81557: LD_INT 51
81559: PUSH
81560: LD_INT 32
81562: PUSH
81563: LD_INT 89
81565: PUSH
81566: EMPTY
81567: LIST
81568: LIST
81569: LIST
81570: LIST
81571: IN
81572: NOT
81573: OR
81574: IFFALSE 81578
// exit ;
81576: GO 81676
// for i := 1 to 3 do
81578: LD_ADDR_VAR 0 3
81582: PUSH
81583: DOUBLE
81584: LD_INT 1
81586: DEC
81587: ST_TO_ADDR
81588: LD_INT 3
81590: PUSH
81591: FOR_TO
81592: IFFALSE 81674
// begin tmp := GetCargo ( cargo , i ) ;
81594: LD_ADDR_VAR 0 4
81598: PUSH
81599: LD_VAR 0 1
81603: PPUSH
81604: LD_VAR 0 3
81608: PPUSH
81609: CALL_OW 289
81613: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81614: LD_ADDR_VAR 0 2
81618: PUSH
81619: LD_VAR 0 2
81623: PPUSH
81624: LD_VAR 0 3
81628: PPUSH
81629: LD_VAR 0 4
81633: PPUSH
81634: CALL_OW 1
81638: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81639: LD_ADDR_VAR 0 2
81643: PUSH
81644: LD_VAR 0 2
81648: PPUSH
81649: LD_INT 4
81651: PPUSH
81652: LD_VAR 0 2
81656: PUSH
81657: LD_INT 4
81659: ARRAY
81660: PUSH
81661: LD_VAR 0 4
81665: PLUS
81666: PPUSH
81667: CALL_OW 1
81671: ST_TO_ADDR
// end ;
81672: GO 81591
81674: POP
81675: POP
// end ;
81676: LD_VAR 0 2
81680: RET
// export function Length ( array ) ; begin
81681: LD_INT 0
81683: PPUSH
// result := array + 0 ;
81684: LD_ADDR_VAR 0 2
81688: PUSH
81689: LD_VAR 0 1
81693: PUSH
81694: LD_INT 0
81696: PLUS
81697: ST_TO_ADDR
// end ;
81698: LD_VAR 0 2
81702: RET
// export function PrepareArray ( array ) ; begin
81703: LD_INT 0
81705: PPUSH
// result := array diff 0 ;
81706: LD_ADDR_VAR 0 2
81710: PUSH
81711: LD_VAR 0 1
81715: PUSH
81716: LD_INT 0
81718: DIFF
81719: ST_TO_ADDR
// if not result [ 1 ] then
81720: LD_VAR 0 2
81724: PUSH
81725: LD_INT 1
81727: ARRAY
81728: NOT
81729: IFFALSE 81749
// result := Delete ( result , 1 ) ;
81731: LD_ADDR_VAR 0 2
81735: PUSH
81736: LD_VAR 0 2
81740: PPUSH
81741: LD_INT 1
81743: PPUSH
81744: CALL_OW 3
81748: ST_TO_ADDR
// end ;
81749: LD_VAR 0 2
81753: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81754: LD_INT 0
81756: PPUSH
81757: PPUSH
81758: PPUSH
81759: PPUSH
// sibRocketRange := 25 ;
81760: LD_ADDR_VAR 0 6
81764: PUSH
81765: LD_INT 25
81767: ST_TO_ADDR
// result := false ;
81768: LD_ADDR_VAR 0 4
81772: PUSH
81773: LD_INT 0
81775: ST_TO_ADDR
// for i := 0 to 5 do
81776: LD_ADDR_VAR 0 5
81780: PUSH
81781: DOUBLE
81782: LD_INT 0
81784: DEC
81785: ST_TO_ADDR
81786: LD_INT 5
81788: PUSH
81789: FOR_TO
81790: IFFALSE 81857
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81792: LD_VAR 0 1
81796: PPUSH
81797: LD_VAR 0 5
81801: PPUSH
81802: LD_VAR 0 6
81806: PPUSH
81807: CALL_OW 272
81811: PPUSH
81812: LD_VAR 0 2
81816: PPUSH
81817: LD_VAR 0 5
81821: PPUSH
81822: LD_VAR 0 6
81826: PPUSH
81827: CALL_OW 273
81831: PPUSH
81832: LD_VAR 0 3
81836: PPUSH
81837: CALL_OW 309
81841: IFFALSE 81855
// begin result := true ;
81843: LD_ADDR_VAR 0 4
81847: PUSH
81848: LD_INT 1
81850: ST_TO_ADDR
// exit ;
81851: POP
81852: POP
81853: GO 81859
// end ;
81855: GO 81789
81857: POP
81858: POP
// end ;
81859: LD_VAR 0 4
81863: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81864: LD_INT 0
81866: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81867: LD_VAR 0 1
81871: PPUSH
81872: LD_VAR 0 2
81876: PPUSH
81877: LD_INT 0
81879: PPUSH
81880: LD_INT 0
81882: PPUSH
81883: LD_INT 1
81885: PPUSH
81886: LD_INT 0
81888: PPUSH
81889: CALL_OW 587
// end ;
81893: LD_VAR 0 3
81897: RET
// export function CenterOnNow ( unit ) ; begin
81898: LD_INT 0
81900: PPUSH
// result := IsInUnit ( unit ) ;
81901: LD_ADDR_VAR 0 2
81905: PUSH
81906: LD_VAR 0 1
81910: PPUSH
81911: CALL_OW 310
81915: ST_TO_ADDR
// if not result then
81916: LD_VAR 0 2
81920: NOT
81921: IFFALSE 81933
// result := unit ;
81923: LD_ADDR_VAR 0 2
81927: PUSH
81928: LD_VAR 0 1
81932: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81933: LD_VAR 0 1
81937: PPUSH
81938: CALL_OW 87
// end ;
81942: LD_VAR 0 2
81946: RET
// export function ComMoveHex ( unit , hex ) ; begin
81947: LD_INT 0
81949: PPUSH
// if not hex then
81950: LD_VAR 0 2
81954: NOT
81955: IFFALSE 81959
// exit ;
81957: GO 82012
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81959: LD_VAR 0 2
81963: PUSH
81964: LD_INT 1
81966: ARRAY
81967: PPUSH
81968: LD_VAR 0 2
81972: PUSH
81973: LD_INT 2
81975: ARRAY
81976: PPUSH
81977: CALL_OW 428
81981: IFFALSE 81985
// exit ;
81983: GO 82012
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81985: LD_VAR 0 1
81989: PPUSH
81990: LD_VAR 0 2
81994: PUSH
81995: LD_INT 1
81997: ARRAY
81998: PPUSH
81999: LD_VAR 0 2
82003: PUSH
82004: LD_INT 2
82006: ARRAY
82007: PPUSH
82008: CALL_OW 111
// end ;
82012: LD_VAR 0 3
82016: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82017: LD_INT 0
82019: PPUSH
82020: PPUSH
82021: PPUSH
// if not unit or not enemy then
82022: LD_VAR 0 1
82026: NOT
82027: PUSH
82028: LD_VAR 0 2
82032: NOT
82033: OR
82034: IFFALSE 82038
// exit ;
82036: GO 82162
// x := GetX ( enemy ) ;
82038: LD_ADDR_VAR 0 4
82042: PUSH
82043: LD_VAR 0 2
82047: PPUSH
82048: CALL_OW 250
82052: ST_TO_ADDR
// y := GetY ( enemy ) ;
82053: LD_ADDR_VAR 0 5
82057: PUSH
82058: LD_VAR 0 2
82062: PPUSH
82063: CALL_OW 251
82067: ST_TO_ADDR
// if ValidHex ( x , y ) then
82068: LD_VAR 0 4
82072: PPUSH
82073: LD_VAR 0 5
82077: PPUSH
82078: CALL_OW 488
82082: IFFALSE 82162
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
82084: LD_VAR 0 2
82088: PPUSH
82089: CALL_OW 247
82093: PUSH
82094: LD_INT 3
82096: PUSH
82097: LD_INT 2
82099: PUSH
82100: EMPTY
82101: LIST
82102: LIST
82103: IN
82104: PUSH
82105: LD_VAR 0 1
82109: PPUSH
82110: CALL_OW 255
82114: PPUSH
82115: LD_VAR 0 2
82119: PPUSH
82120: CALL_OW 292
82124: AND
82125: IFFALSE 82143
// ComAttackUnit ( unit , enemy ) else
82127: LD_VAR 0 1
82131: PPUSH
82132: LD_VAR 0 2
82136: PPUSH
82137: CALL_OW 115
82141: GO 82162
// ComAgressiveMove ( unit , x , y ) ;
82143: LD_VAR 0 1
82147: PPUSH
82148: LD_VAR 0 4
82152: PPUSH
82153: LD_VAR 0 5
82157: PPUSH
82158: CALL_OW 114
// end ; end_of_file
82162: LD_VAR 0 3
82166: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82167: LD_VAR 0 1
82171: PUSH
82172: LD_INT 200
82174: DOUBLE
82175: GREATEREQUAL
82176: IFFALSE 82184
82178: LD_INT 299
82180: DOUBLE
82181: LESSEQUAL
82182: IFTRUE 82186
82184: GO 82218
82186: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82187: LD_VAR 0 1
82191: PPUSH
82192: LD_VAR 0 2
82196: PPUSH
82197: LD_VAR 0 3
82201: PPUSH
82202: LD_VAR 0 4
82206: PPUSH
82207: LD_VAR 0 5
82211: PPUSH
82212: CALL 35891 0 5
82216: GO 82295
82218: LD_INT 300
82220: DOUBLE
82221: GREATEREQUAL
82222: IFFALSE 82230
82224: LD_INT 399
82226: DOUBLE
82227: LESSEQUAL
82228: IFTRUE 82232
82230: GO 82294
82232: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82233: LD_VAR 0 1
82237: PPUSH
82238: LD_VAR 0 2
82242: PPUSH
82243: LD_VAR 0 3
82247: PPUSH
82248: LD_VAR 0 4
82252: PPUSH
82253: LD_VAR 0 5
82257: PPUSH
82258: LD_VAR 0 6
82262: PPUSH
82263: LD_VAR 0 7
82267: PPUSH
82268: LD_VAR 0 8
82272: PPUSH
82273: LD_VAR 0 9
82277: PPUSH
82278: LD_VAR 0 10
82282: PPUSH
82283: LD_VAR 0 11
82287: PPUSH
82288: CALL 32216 0 11
82292: GO 82295
82294: POP
// end ;
82295: PPOPN 11
82297: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82298: LD_VAR 0 1
82302: PPUSH
82303: LD_VAR 0 2
82307: PPUSH
82308: LD_VAR 0 3
82312: PPUSH
82313: LD_VAR 0 4
82317: PPUSH
82318: LD_VAR 0 5
82322: PPUSH
82323: CALL 35627 0 5
// end ; end_of_file
82327: PPOPN 5
82329: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82330: LD_VAR 0 1
82334: PPUSH
82335: LD_VAR 0 2
82339: PPUSH
82340: LD_VAR 0 3
82344: PPUSH
82345: LD_VAR 0 4
82349: PPUSH
82350: LD_VAR 0 5
82354: PPUSH
82355: LD_VAR 0 6
82359: PPUSH
82360: CALL 19868 0 6
// end ;
82364: PPOPN 6
82366: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82367: LD_INT 0
82369: PPUSH
// begin if not units then
82370: LD_VAR 0 1
82374: NOT
82375: IFFALSE 82379
// exit ;
82377: GO 82379
// end ;
82379: PPOPN 7
82381: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82382: CALL 19772 0 0
// end ;
82386: PPOPN 1
82388: END
