// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4687 0 0
// PrepareRussianBase ;
  29: CALL 2976 0 0
// PrepareRussianCommander ;
  33: CALL 2927 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8306 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel := 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel := 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild := 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode := false ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible := 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack := 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson := 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase := 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer := 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase := 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport := 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus := 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer := 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog := 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog := 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog := 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil := 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower := 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply := [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable := 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack := 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter := 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor := 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 40677 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 40677 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: LD_EXP 49
 585: PPUSH
 586: CALL 40677 0 3
 590: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 591: LD_ADDR_EXP 8
 595: PUSH
 596: LD_STRING Dickens
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: LD_EXP 49
 606: PPUSH
 607: CALL 40677 0 3
 611: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 612: LD_ADDR_EXP 9
 616: PUSH
 617: LD_STRING Woodruff
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_EXP 49
 627: PPUSH
 628: CALL 40677 0 3
 632: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 633: LD_ADDR_EXP 12
 637: PUSH
 638: LD_STRING Campell
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_EXP 49
 648: PPUSH
 649: CALL 40677 0 3
 653: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING Knight
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: LD_EXP 49
 669: PPUSH
 670: CALL 40677 0 3
 674: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 675: LD_ADDR_EXP 11
 679: PUSH
 680: LD_STRING Claptopn
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_EXP 49
 690: PPUSH
 691: CALL 40677 0 3
 695: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING Harisson
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: LD_EXP 49
 711: PPUSH
 712: CALL 40677 0 3
 716: ST_TO_ADDR
// if not Lisa then
 717: LD_EXP 4
 721: NOT
 722: IFFALSE 745
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 724: LD_ADDR_EXP 2
 728: PUSH
 729: LD_STRING Bobby
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_EXP 49
 739: PPUSH
 740: CALL 40677 0 3
 744: ST_TO_ADDR
// if not Lisa and not Bobby then
 745: LD_EXP 4
 749: NOT
 750: PUSH
 751: LD_EXP 2
 755: NOT
 756: AND
 757: IFFALSE 780
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 759: LD_ADDR_EXP 3
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_EXP 49
 774: PPUSH
 775: CALL 40677 0 3
 779: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 780: LD_EXP 4
 784: NOT
 785: PUSH
 786: LD_EXP 2
 790: NOT
 791: AND
 792: PUSH
 793: LD_EXP 3
 797: NOT
 798: AND
 799: IFFALSE 898
// begin tmp = CreateCharacterSet ( 03_others ) ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 31
 813: ST_TO_ADDR
// if tmp then
 814: LD_VAR 0 3
 818: IFFALSE 875
// begin RandomBeforeMission = tmp [ 1 ] ;
 820: LD_ADDR_EXP 6
 824: PUSH
 825: LD_VAR 0 3
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 834: LD_STRING 03_others
 836: PPUSH
 837: CALL_OW 40
// if tmp > 1 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: GREATER
 849: IFFALSE 873
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: DIFF
 865: PPUSH
 866: LD_STRING 03_others
 868: PPUSH
 869: CALL_OW 38
// end else
 873: GO 898
// begin PrepareHuman ( false , 1 , 3 ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: LD_INT 3
 883: PPUSH
 884: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 888: LD_ADDR_EXP 6
 892: PUSH
 893: CALL_OW 44
 897: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 4
 905: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 906: LD_ADDR_EXP 13
 910: PUSH
 911: LD_STRING Donaldson
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: LD_EXP 49
 921: PPUSH
 922: CALL 40677 0 3
 926: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Frank
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 40677 0 3
 947: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 32
 955: PPUSH
 956: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 960: LD_EXP 7
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 975: LD_EXP 7
 979: PPUSH
 980: LD_INT 32
 982: PPUSH
 983: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 987: LD_EXP 8
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1002: LD_EXP 9
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1017: LD_EXP 12
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1032: LD_EXP 10
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1047: LD_EXP 11
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 49
// if Lisa = false then
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1087: LD_EXP 2
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// if Lisa = false and Bobby = false then
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: PUSH
1111: LD_EXP 2
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1137: LD_EXP 4
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: PUSH
1146: LD_EXP 2
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: PUSH
1156: LD_EXP 3
1160: PUSH
1161: LD_INT 0
1163: EQUAL
1164: AND
1165: IFFALSE 1182
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1167: LD_EXP 6
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 49
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1187: LD_INT 0
1189: PPUSH
1190: PPUSH
1191: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1192: LD_EXP 13
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// if Frank then
1207: LD_EXP 5
1211: IFFALSE 1228
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1213: LD_EXP 5
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// uc_nation = 1 ;
1228: LD_ADDR_OWVAR 21
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// uc_side = 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// hc_class := 3 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING SecondCharsGal
1267: ST_TO_ADDR
// hc_face_number := 53 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 53
1275: ST_TO_ADDR
// hc_name := Freddie Warner ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Freddie Warner
1283: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 8
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 2
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 56 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 56
1401: ST_TO_ADDR
// hc_name := Mel Brennan ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Mel Brennan
1409: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 12
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// hc_class := 1 ;
1496: LD_ADDR_OWVAR 28
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_sex := sex_male ;
1504: LD_ADDR_OWVAR 27
1508: PUSH
1509: LD_INT 1
1511: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING AmGalRemake
1519: ST_TO_ADDR
// hc_face_number := 5 ;
1520: LD_ADDR_OWVAR 34
1524: PUSH
1525: LD_INT 5
1527: ST_TO_ADDR
// hc_name := Bob Joplin ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Bob Joplin
1535: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1536: LD_ADDR_OWVAR 29
1540: PUSH
1541: LD_INT 10
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1551: LD_ADDR_OWVAR 30
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1574: LD_ADDR_OWVAR 31
1578: PUSH
1579: LD_INT 3
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// un = CreateHuman ;
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: CALL_OW 44
1606: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1607: LD_VAR 0 3
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// hc_class := 3 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// hc_sex := sex_female ;
1630: LD_ADDR_OWVAR 27
1634: PUSH
1635: LD_INT 2
1637: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING AmGalRemake
1645: ST_TO_ADDR
// hc_face_number := 8 ;
1646: LD_ADDR_OWVAR 34
1650: PUSH
1651: LD_INT 8
1653: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1654: LD_ADDR_OWVAR 26
1658: PUSH
1659: LD_STRING Elizabeth Whitney
1661: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1662: LD_ADDR_OWVAR 29
1666: PUSH
1667: LD_INT 9
1669: PUSH
1670: LD_INT 11
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1677: LD_ADDR_OWVAR 30
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1700: LD_ADDR_OWVAR 31
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: LD_INT 4
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// un = CreateHuman ;
1723: LD_ADDR_VAR 0 3
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// InitHc ;
1748: CALL_OW 19
// end ;
1752: LD_VAR 0 1
1756: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
1761: PPUSH
1762: PPUSH
// uc_nation = 1 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// uc_side = 1 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 2
1786: ST_TO_ADDR
// vc_engine := engine_combustion ;
1787: LD_ADDR_OWVAR 39
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_control := control_manual ;
1795: LD_ADDR_OWVAR 38
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1803: LD_ADDR_OWVAR 41
1807: PUSH
1808: LD_INT 65
1810: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_OWVAR 67
1838: ARRAY
1839: ST_TO_ADDR
// veh := CreateVehicle ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 2
1857: PPUSH
1858: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: CALL_OW 428
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: IFFALSE 1898
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1878: LD_VAR 0 5
1882: PPUSH
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 48
1896: GO 1916
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1898: LD_VAR 0 5
1902: PPUSH
1903: LD_INT 23
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 48
// hc_class := 1 ;
1916: LD_ADDR_OWVAR 28
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_sex := sex_male ;
1924: LD_ADDR_OWVAR 27
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1932: LD_ADDR_OWVAR 33
1936: PUSH
1937: LD_STRING SecondCharsGal
1939: ST_TO_ADDR
// hc_face_number := 59 ;
1940: LD_ADDR_OWVAR 34
1944: PUSH
1945: LD_INT 59
1947: ST_TO_ADDR
// hc_name := Max Gray ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING Max Gray
1955: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 9
1963: PUSH
1964: LD_INT 11
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1971: LD_ADDR_OWVAR 30
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1994: LD_ADDR_OWVAR 31
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 0
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: ST_TO_ADDR
// un = CreateHuman ;
2017: LD_ADDR_VAR 0 4
2021: PUSH
2022: CALL_OW 44
2026: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_INT 11
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// hc_class := 2 ;
2042: LD_ADDR_OWVAR 28
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_sex := sex_male ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2058: LD_ADDR_OWVAR 33
2062: PUSH
2063: LD_STRING SecondCharsGal
2065: ST_TO_ADDR
// hc_face_number := 50 ;
2066: LD_ADDR_OWVAR 34
2070: PUSH
2071: LD_INT 50
2073: ST_TO_ADDR
// hc_name := Frank Hughes ;
2074: LD_ADDR_OWVAR 26
2078: PUSH
2079: LD_STRING Frank Hughes
2081: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2082: LD_ADDR_OWVAR 29
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: LD_INT 10
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2097: LD_ADDR_OWVAR 30
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 11
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// hc_class := 1 ;
2168: LD_ADDR_OWVAR 28
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_sex := sex_male ;
2176: LD_ADDR_OWVAR 27
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2184: LD_ADDR_OWVAR 33
2188: PUSH
2189: LD_STRING SecondCharsGal
2191: ST_TO_ADDR
// hc_face_number := 54 ;
2192: LD_ADDR_OWVAR 34
2196: PUSH
2197: LD_INT 54
2199: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_STRING Luigi Ghbellin
2207: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2208: LD_ADDR_OWVAR 29
2212: PUSH
2213: LD_INT 11
2215: PUSH
2216: LD_INT 11
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2223: LD_ADDR_OWVAR 30
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2246: LD_ADDR_OWVAR 31
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// un = CreateHuman ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: CALL_OW 44
2278: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2279: LD_VAR 0 4
2283: PPUSH
2284: LD_INT 11
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL_OW 49
// hc_class := 3 ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 3
2301: ST_TO_ADDR
// hc_sex := sex_male ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2310: LD_ADDR_OWVAR 33
2314: PUSH
2315: LD_STRING AmGalRemake
2317: ST_TO_ADDR
// hc_face_number := 6 ;
2318: LD_ADDR_OWVAR 34
2322: PUSH
2323: LD_INT 6
2325: ST_TO_ADDR
// hc_name := Leon Carter ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Leon Carter
2333: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2334: LD_ADDR_OWVAR 29
2338: PUSH
2339: LD_INT 10
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2349: LD_ADDR_OWVAR 30
2353: PUSH
2354: LD_INT 0
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2372: LD_ADDR_OWVAR 31
2376: PUSH
2377: LD_INT 0
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: ST_TO_ADDR
// un = CreateHuman ;
2395: LD_ADDR_VAR 0 4
2399: PUSH
2400: CALL_OW 44
2404: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2405: LD_VAR 0 4
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 52
// if count = 4 then
2419: LD_VAR 0 1
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2555
// begin hc_class := 1 ;
2429: LD_ADDR_OWVAR 28
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_sex := sex_male ;
2437: LD_ADDR_OWVAR 27
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING SecondCharsGal
2452: ST_TO_ADDR
// hc_face_number := 34 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 34
2460: ST_TO_ADDR
// hc_name := Ian Hill ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING Ian Hill
2468: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2469: LD_ADDR_OWVAR 29
2473: PUSH
2474: LD_INT 10
2476: PUSH
2477: LD_INT 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2484: LD_ADDR_OWVAR 30
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: LD_INT 0
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2507: LD_ADDR_OWVAR 31
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: ST_TO_ADDR
// un = CreateHuman ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: CALL_OW 44
2539: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2540: LD_VAR 0 4
2544: PPUSH
2545: LD_INT 11
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 49
// end ; if count = 5 then
2555: LD_VAR 0 1
2559: PUSH
2560: LD_INT 5
2562: EQUAL
2563: IFFALSE 2817
// begin hc_class := 1 ;
2565: LD_ADDR_OWVAR 28
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_sex := sex_male ;
2573: LD_ADDR_OWVAR 27
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2581: LD_ADDR_OWVAR 33
2585: PUSH
2586: LD_STRING SecondCharsGal
2588: ST_TO_ADDR
// hc_face_number := 34 ;
2589: LD_ADDR_OWVAR 34
2593: PUSH
2594: LD_INT 34
2596: ST_TO_ADDR
// hc_name := Ian Hill ;
2597: LD_ADDR_OWVAR 26
2601: PUSH
2602: LD_STRING Ian Hill
2604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2605: LD_ADDR_OWVAR 29
2609: PUSH
2610: LD_INT 10
2612: PUSH
2613: LD_INT 12
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2620: LD_ADDR_OWVAR 30
2624: PUSH
2625: LD_INT 1
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 0
2633: PUSH
2634: LD_INT 0
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2643: LD_ADDR_OWVAR 31
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: ST_TO_ADDR
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// hc_class := 1 ;
2691: LD_ADDR_OWVAR 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// hc_sex := sex_female ;
2699: LD_ADDR_OWVAR 27
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2707: LD_ADDR_OWVAR 33
2711: PUSH
2712: LD_STRING SecondCharsGal
2714: ST_TO_ADDR
// hc_face_number := 41 ;
2715: LD_ADDR_OWVAR 34
2719: PUSH
2720: LD_INT 41
2722: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2723: LD_ADDR_OWVAR 26
2727: PUSH
2728: LD_STRING Kate Wadsworth
2730: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2731: LD_ADDR_OWVAR 29
2735: PUSH
2736: LD_INT 9
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2746: LD_ADDR_OWVAR 30
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2769: LD_ADDR_OWVAR 31
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// un = CreateHuman ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 11
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2817: LD_INT 11
2819: PPUSH
2820: LD_INT 22
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 21
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 26
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 70
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2868: LD_INT 11
2870: PPUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 26
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 70
2910: PUSH
2911: LD_INT 1
2913: ARRAY
2914: PPUSH
2915: LD_STRING D6-Sol3-1
2917: PPUSH
2918: CALL_OW 88
// end ; end_of_file
2922: LD_VAR 0 2
2926: RET
// export function PrepareRussianCommander ; begin
2927: LD_INT 0
2929: PPUSH
// uc_side = 3 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// uc_nation = 3 ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Stolypin
2953: PPUSH
2954: CALL_OW 25
2958: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2959: LD_EXP 15
2963: PPUSH
2964: LD_INT 21
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: LD_VAR 0 1
2975: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// if Difficulty > 1 then
2982: LD_OWVAR 67
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3100
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := 3 ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// InitHc_All ( ) ;
3008: CALL_OW 584
// InitBc ;
3012: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3016: LD_INT 0
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL_OW 380
// bc_type := b_breastwork ;
3029: LD_ADDR_OWVAR 42
3033: PUSH
3034: LD_INT 31
3036: ST_TO_ADDR
// bc_level := 4 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 4
3044: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3045: LD_ADDR_VAR 0 3
3049: PUSH
3050: LD_INT 100
3052: PPUSH
3053: LD_INT 58
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 5
3081: PPUSH
3082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3086: LD_VAR 0 4
3090: PPUSH
3091: LD_VAR 0 3
3095: PPUSH
3096: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3100: LD_INT 3
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 22
3108: PPUSH
3109: LD_EXP 16
3113: PPUSH
3114: LD_EXP 17
3118: PPUSH
3119: CALL_OW 12
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 4
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 6
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_OWVAR 67
3149: ARRAY
3150: PPUSH
3151: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 21
3163: PPUSH
3164: LD_EXP 16
3168: PPUSH
3169: LD_EXP 17
3173: PPUSH
3174: CALL_OW 12
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: LD_EXP 16
3202: PPUSH
3203: LD_EXP 17
3207: PPUSH
3208: CALL_OW 12
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 24
3231: PPUSH
3232: LD_EXP 16
3236: PPUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 5
3252: PPUSH
3253: CALL 4353 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3332
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3294: LD_INT 3
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: LD_EXP 17
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL 4353 0 6
3330: GO 3291
3332: POP
3333: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 30
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: FOR_IN
3369: IFFALSE 3397
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL 4462 0 2
3395: GO 3368
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 1
3403: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 6 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 6
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// InitHC_All ( ) ;
3426: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: DOUBLE
3436: LD_INT 1
3438: DEC
3439: ST_TO_ADDR
3440: LD_INT 1
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: LD_INT 2
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_OWVAR 67
3462: ARRAY
3463: PUSH
3464: FOR_TO
3465: IFFALSE 3633
// begin vc_engine = 1 ;
3467: LD_ADDR_OWVAR 39
3471: PUSH
3472: LD_INT 1
3474: ST_TO_ADDR
// vc_control = 1 ;
3475: LD_ADDR_OWVAR 38
3479: PUSH
3480: LD_INT 1
3482: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3483: LD_ADDR_OWVAR 40
3487: PUSH
3488: LD_INT 42
3490: PUSH
3491: LD_INT 42
3493: PUSH
3494: LD_INT 43
3496: PUSH
3497: LD_INT 43
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: LD_OWVAR 67
3510: ARRAY
3511: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3512: LD_ADDR_OWVAR 37
3516: PUSH
3517: LD_INT 21
3519: PUSH
3520: LD_INT 22
3522: PUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 22
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_OWVAR 67
3539: ARRAY
3540: ST_TO_ADDR
// veh = CreateVehicle ;
3541: LD_ADDR_VAR 0 3
3545: PUSH
3546: CALL_OW 45
3550: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_INT 3
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// hc_gallery =  ;
3566: LD_ADDR_OWVAR 33
3570: PUSH
3571: LD_STRING 
3573: ST_TO_ADDR
// hc_name =  ;
3574: LD_ADDR_OWVAR 26
3578: PUSH
3579: LD_STRING 
3581: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3582: LD_INT 0
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: LD_EXP 16
3592: PPUSH
3593: LD_EXP 17
3597: PPUSH
3598: CALL_OW 12
3602: PPUSH
3603: CALL_OW 380
// un = CreateHuman ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: CALL_OW 44
3616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3617: LD_VAR 0 4
3621: PPUSH
3622: LD_VAR 0 3
3626: PPUSH
3627: CALL_OW 52
// end ;
3631: GO 3464
3633: POP
3634: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3635: LD_INT 0
3637: PPUSH
3638: LD_INT 2
3640: PPUSH
3641: LD_EXP 16
3645: PPUSH
3646: LD_EXP 17
3650: PPUSH
3651: CALL_OW 12
3655: PUSH
3656: LD_INT 2
3658: PLUS
3659: PPUSH
3660: CALL_OW 380
// un = CreateHuman ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3689: LD_INT 0
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_EXP 16
3699: PPUSH
3700: LD_EXP 17
3704: PPUSH
3705: CALL_OW 12
3709: PUSH
3710: LD_INT 2
3712: PLUS
3713: PPUSH
3714: CALL_OW 380
// un = CreateHuman ;
3718: LD_ADDR_VAR 0 4
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3728: LD_VAR 0 4
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 2
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_OWVAR 67
3775: ARRAY
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 3
3782: PPUSH
3783: CALL_OW 12
3787: PLUS
3788: PUSH
3789: FOR_TO
3790: IFFALSE 3860
// begin hc_gallery =  ;
3792: LD_ADDR_OWVAR 33
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// hc_name =  ;
3800: LD_ADDR_OWVAR 26
3804: PUSH
3805: LD_STRING 
3807: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_EXP 16
3818: PPUSH
3819: LD_EXP 17
3823: PPUSH
3824: CALL_OW 12
3828: PPUSH
3829: CALL_OW 380
// un = CreateHuman ;
3833: LD_ADDR_VAR 0 4
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3843: LD_VAR 0 4
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 49
// end ;
3858: GO 3789
3860: POP
3861: POP
// vc_engine = 1 ;
3862: LD_ADDR_OWVAR 39
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// vc_control = 1 ;
3870: LD_ADDR_OWVAR 38
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// vc_weapon = 51 ;
3878: LD_ADDR_OWVAR 40
3882: PUSH
3883: LD_INT 51
3885: ST_TO_ADDR
// vc_chassis = 22 ;
3886: LD_ADDR_OWVAR 37
3890: PUSH
3891: LD_INT 22
3893: ST_TO_ADDR
// veh = CreateVehicle ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 100
3929: PPUSH
3930: CALL_OW 290
// hc_gallery =  ;
3934: LD_ADDR_OWVAR 33
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// hc_name =  ;
3942: LD_ADDR_OWVAR 26
3946: PUSH
3947: LD_STRING 
3949: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: LD_EXP 16
3960: PPUSH
3961: LD_EXP 17
3965: PPUSH
3966: CALL_OW 12
3970: PPUSH
3971: CALL_OW 380
// un = CreateHuman ;
3975: LD_ADDR_VAR 0 4
3979: PUSH
3980: CALL_OW 44
3984: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3985: LD_VAR 0 4
3989: PPUSH
3990: LD_VAR 0 3
3994: PPUSH
3995: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3999: LD_ADDR_VAR 0 2
4003: PUSH
4004: LD_INT 22
4006: PUSH
4007: LD_INT 6
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: LD_INT 25
4022: PUSH
4023: LD_INT 2
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 69
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4085
// ComAgressiveMove ( i , 45 , 46 ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_INT 45
4075: PPUSH
4076: LD_INT 46
4078: PPUSH
4079: CALL_OW 114
4083: GO 4065
4085: POP
4086: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_INT 22
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 25
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 69
4120: PUSH
4121: FOR_IN
4122: IFFALSE 4153
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4124: LD_ADDR_EXP 21
4128: PUSH
4129: LD_VAR 0 2
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: LD_INT 48
4139: PPUSH
4140: LD_INT 55
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: CALL_OW 145
4150: ST_TO_ADDR
4151: GO 4121
4153: POP
4154: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4155: LD_ADDR_VAR 0 2
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 6
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 69
4188: PUSH
4189: FOR_IN
4190: IFFALSE 4209
// ComMoveXY ( i , 39 , 55 ) ;
4192: LD_VAR 0 2
4196: PPUSH
4197: LD_INT 39
4199: PPUSH
4200: LD_INT 55
4202: PPUSH
4203: CALL_OW 111
4207: GO 4189
4209: POP
4210: POP
// end ;
4211: LD_VAR 0 1
4215: RET
// export function PrepareFirstAttack ; var i , un ; begin
4216: LD_INT 0
4218: PPUSH
4219: PPUSH
4220: PPUSH
// uc_side = 5 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 5
4228: ST_TO_ADDR
// uc_nation = 3 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 3
4236: ST_TO_ADDR
// for i := 1 to 4 do
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: DOUBLE
4243: LD_INT 1
4245: DEC
4246: ST_TO_ADDR
4247: LD_INT 4
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4338
// begin InitHC_All ( ) ;
4253: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4257: LD_INT 0
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_EXP 16
4267: PPUSH
4268: LD_EXP 17
4272: PPUSH
4273: CALL_OW 12
4277: PPUSH
4278: CALL_OW 380
// un = CreateHuman ;
4282: LD_ADDR_VAR 0 3
4286: PUSH
4287: CALL_OW 44
4291: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4292: LD_VAR 0 3
4296: PPUSH
4297: LD_INT 4
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_EXP 1
4316: PPUSH
4317: CALL_OW 250
4321: PPUSH
4322: LD_EXP 1
4326: PPUSH
4327: CALL_OW 251
4331: PPUSH
4332: CALL_OW 114
// end ;
4336: GO 4250
4338: POP
4339: POP
// firstRussianAttack = 1 ;
4340: LD_ADDR_EXP 23
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// end ; end_of_file
4348: LD_VAR 0 1
4352: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4353: LD_INT 0
4355: PPUSH
4356: PPUSH
4357: PPUSH
// for i = 1 to count do
4358: LD_ADDR_VAR 0 8
4362: PUSH
4363: DOUBLE
4364: LD_INT 1
4366: DEC
4367: ST_TO_ADDR
4368: LD_VAR 0 6
4372: PUSH
4373: FOR_TO
4374: IFFALSE 4455
// begin uc_side = side ;
4376: LD_ADDR_OWVAR 20
4380: PUSH
4381: LD_VAR 0 1
4385: ST_TO_ADDR
// uc_nation = nation ;
4386: LD_ADDR_OWVAR 21
4390: PUSH
4391: LD_VAR 0 2
4395: ST_TO_ADDR
// hc_gallery =  ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING 
4403: ST_TO_ADDR
// hc_name =  ;
4404: LD_ADDR_OWVAR 26
4408: PUSH
4409: LD_STRING 
4411: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4412: LD_INT 0
4414: PPUSH
4415: LD_VAR 0 5
4419: PPUSH
4420: LD_VAR 0 4
4424: PPUSH
4425: CALL_OW 380
// un = CreateHuman ;
4429: LD_ADDR_VAR 0 9
4433: PUSH
4434: CALL_OW 44
4438: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4439: LD_VAR 0 9
4443: PPUSH
4444: LD_VAR 0 3
4448: PPUSH
4449: CALL_OW 52
// end ;
4453: GO 4373
4455: POP
4456: POP
// end ;
4457: LD_VAR 0 7
4461: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4462: LD_INT 0
4464: PPUSH
4465: PPUSH
4466: PPUSH
// uc_side := GetSide ( b ) ;
4467: LD_ADDR_OWVAR 20
4471: PUSH
4472: LD_VAR 0 2
4476: PPUSH
4477: CALL_OW 255
4481: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4482: LD_ADDR_OWVAR 21
4486: PUSH
4487: LD_VAR 0 2
4491: PPUSH
4492: CALL_OW 248
4496: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4497: LD_INT 0
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 380
// un = CreateHuman ;
4512: LD_ADDR_VAR 0 4
4516: PUSH
4517: CALL_OW 44
4521: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4522: LD_ADDR_VAR 0 5
4526: PUSH
4527: LD_VAR 0 2
4531: PPUSH
4532: CALL_OW 254
4536: PUSH
4537: LD_INT 3
4539: MINUS
4540: ST_TO_ADDR
// if dir < 0 then
4541: LD_VAR 0 5
4545: PUSH
4546: LD_INT 0
4548: LESS
4549: IFFALSE 4565
// dir := 6 + dir ;
4551: LD_ADDR_VAR 0 5
4555: PUSH
4556: LD_INT 6
4558: PUSH
4559: LD_VAR 0 5
4563: PLUS
4564: ST_TO_ADDR
// SetDir ( un , dir ) ;
4565: LD_VAR 0 4
4569: PPUSH
4570: LD_VAR 0 5
4574: PPUSH
4575: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: LD_VAR 0 2
4588: PPUSH
4589: CALL_OW 52
// end ;
4593: LD_VAR 0 3
4597: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4598: LD_INT 0
4600: PPUSH
4601: PPUSH
4602: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4603: LD_ADDR_VAR 0 6
4607: PUSH
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: PPUSH
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 12
4625: ARRAY
4626: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4627: LD_VAR 0 6
4631: PPUSH
4632: CALL_OW 258
4636: PUSH
4637: LD_INT 1
4639: EQUAL
4640: IFFALSE 4658
// Say ( speaker , dialogMID ) else
4642: LD_VAR 0 6
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: CALL_OW 88
4656: GO 4672
// Say ( speaker , dialogFID ) ;
4658: LD_VAR 0 6
4662: PPUSH
4663: LD_VAR 0 3
4667: PPUSH
4668: CALL_OW 88
// result := speaker ;
4672: LD_ADDR_VAR 0 4
4676: PUSH
4677: LD_VAR 0 6
4681: ST_TO_ADDR
// end ;
4682: LD_VAR 0 4
4686: RET
// export function PrepareDifficulty ; var tmp ; begin
4687: LD_INT 0
4689: PPUSH
4690: PPUSH
// if Difficulty = 1 then
4691: LD_OWVAR 67
4695: PUSH
4696: LD_INT 1
4698: EQUAL
4699: IFFALSE 4717
// begin RuSoldMinLevel = 1 ;
4701: LD_ADDR_EXP 16
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4709: LD_ADDR_EXP 17
4713: PUSH
4714: LD_INT 2
4716: ST_TO_ADDR
// end ; if Difficulty = 2 then
4717: LD_OWVAR 67
4721: PUSH
4722: LD_INT 2
4724: EQUAL
4725: IFFALSE 4826
// begin RuSoldMinLevel = 2 ;
4727: LD_ADDR_EXP 16
4731: PUSH
4732: LD_INT 2
4734: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4735: LD_ADDR_EXP 17
4739: PUSH
4740: LD_INT 3
4742: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4743: LD_INT 23
4745: PPUSH
4746: CALL_OW 64
// uc_nation = 3 ;
4750: LD_ADDR_OWVAR 21
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// uc_side = 3 ;
4758: LD_ADDR_OWVAR 20
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// bc_level = 5 ;
4766: LD_ADDR_OWVAR 43
4770: PUSH
4771: LD_INT 5
4773: ST_TO_ADDR
// bc_type = 32 ;
4774: LD_ADDR_OWVAR 42
4778: PUSH
4779: LD_INT 32
4781: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: LD_INT 76
4789: PPUSH
4790: LD_INT 91
4792: PPUSH
4793: LD_INT 2
4795: PPUSH
4796: CALL_OW 47
4800: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4801: LD_VAR 0 2
4805: PPUSH
4806: LD_INT 43
4808: PPUSH
4809: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4813: LD_INT 51
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 322
// end ; if Difficulty >= 3 then
4826: LD_OWVAR 67
4830: PUSH
4831: LD_INT 3
4833: GREATEREQUAL
4834: IFFALSE 4998
// begin RuSoldMinLevel = Difficulty ;
4836: LD_ADDR_EXP 16
4840: PUSH
4841: LD_OWVAR 67
4845: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4846: LD_ADDR_EXP 17
4850: PUSH
4851: LD_INT 4
4853: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4854: LD_INT 26
4856: PPUSH
4857: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4861: LD_INT 23
4863: PPUSH
4864: CALL_OW 64
// uc_nation = 3 ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// uc_side = 3 ;
4876: LD_ADDR_OWVAR 20
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// bc_level = 5 ;
4884: LD_ADDR_OWVAR 43
4888: PUSH
4889: LD_INT 5
4891: ST_TO_ADDR
// bc_type = 32 ;
4892: LD_ADDR_OWVAR 42
4896: PUSH
4897: LD_INT 32
4899: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4900: LD_ADDR_VAR 0 2
4904: PUSH
4905: LD_INT 76
4907: PPUSH
4908: LD_INT 91
4910: PPUSH
4911: LD_INT 2
4913: PPUSH
4914: CALL_OW 47
4918: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_INT 44
4926: PPUSH
4927: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4931: LD_ADDR_VAR 0 2
4935: PUSH
4936: LD_INT 83
4938: PPUSH
4939: LD_INT 84
4941: PPUSH
4942: LD_INT 2
4944: PPUSH
4945: CALL_OW 47
4949: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4950: LD_VAR 0 2
4954: PPUSH
4955: LD_INT 43
4957: PPUSH
4958: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4962: LD_INT 51
4964: PPUSH
4965: LD_INT 3
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4975: LD_INT 52
4977: PPUSH
4978: LD_INT 3
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4988: LD_INT 25
4990: PPUSH
4991: LD_INT 44
4993: PPUSH
4994: CALL_OW 431
// end ; end ;
4998: LD_VAR 0 1
5002: RET
// export function EnergyDialog ; begin
5003: LD_INT 0
5005: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5006: LD_INT 46
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: CALL_OW 321
5016: PUSH
5017: LD_INT 1
5019: EQUAL
5020: PUSH
5021: LD_INT 35
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 321
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: AND
5036: IFFALSE 5060
// begin Say ( JMM , D9c-JMM-1 ) ;
5038: LD_EXP 1
5042: PPUSH
5043: LD_STRING D9c-JMM-1
5045: PPUSH
5046: CALL_OW 88
// energyVDialog = 1 ;
5050: LD_ADDR_EXP 33
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// end else
5058: GO 5214
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5060: LD_INT 35
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 321
5070: PUSH
5071: LD_INT 2
5073: EQUAL
5074: PUSH
5075: LD_EXP 33
5079: PUSH
5080: LD_INT 0
5082: EQUAL
5083: AND
5084: IFFALSE 5106
// begin Say ( JMM , D9c-JMM-1a ) ;
5086: LD_EXP 1
5090: PPUSH
5091: LD_STRING D9c-JMM-1a
5093: PPUSH
5094: CALL_OW 88
// energyVDialog = 1 ;
5098: LD_ADDR_EXP 33
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5106: LD_INT 46
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: CALL_OW 321
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: PUSH
5121: LD_EXP 33
5125: PUSH
5126: LD_INT 0
5128: EQUAL
5129: AND
5130: IFFALSE 5152
// begin Say ( JMM , D9c-JMM-1b ) ;
5132: LD_EXP 1
5136: PPUSH
5137: LD_STRING D9c-JMM-1b
5139: PPUSH
5140: CALL_OW 88
// energyVDialog = 1 ;
5144: LD_ADDR_EXP 33
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5152: LD_INT 46
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 321
5162: PUSH
5163: LD_INT 2
5165: EQUAL
5166: PUSH
5167: LD_INT 21
5169: PPUSH
5170: LD_INT 1
5172: PPUSH
5173: CALL_OW 321
5177: PUSH
5178: LD_INT 2
5180: EQUAL
5181: AND
5182: PUSH
5183: LD_EXP 33
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: AND
5192: IFFALSE 5214
// begin Say ( JMM , D9c-JMM-1c ) ;
5194: LD_EXP 1
5198: PPUSH
5199: LD_STRING D9c-JMM-1c
5201: PPUSH
5202: CALL_OW 88
// energyVDialog = 1 ;
5206: LD_ADDR_EXP 33
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ; end ; end ;
5214: LD_VAR 0 1
5218: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5226: LD_VAR 0 1
5230: NOT
5231: PUSH
5232: LD_VAR 0 1
5236: PPUSH
5237: CALL_OW 256
5241: PUSH
5242: LD_INT 250
5244: LESS
5245: OR
5246: PUSH
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 314
5256: PUSH
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 261
5266: PUSH
5267: LD_INT 20
5269: GREATER
5270: AND
5271: OR
5272: IFFALSE 5276
// exit ;
5274: GO 5641
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5276: LD_VAR 0 1
5280: PPUSH
5281: CALL_OW 261
5285: PUSH
5286: LD_INT 20
5288: LESS
5289: PUSH
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 110
5299: PUSH
5300: LD_INT 21
5302: EQUAL
5303: NOT
5304: AND
5305: IFFALSE 5332
// begin ComStop ( bulldozer ) ;
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_INT 21
5323: PPUSH
5324: CALL_OW 109
// exit ;
5328: GO 5641
// end else
5330: GO 5359
// if GetFuel ( bulldozer ) > 20 then
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 261
5341: PUSH
5342: LD_INT 20
5344: GREATER
5345: IFFALSE 5359
// SetTag ( bulldozer , 0 ) ;
5347: LD_VAR 0 1
5351: PPUSH
5352: LD_INT 0
5354: PPUSH
5355: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5359: LD_ADDR_VAR 0 5
5363: PUSH
5364: LD_VAR 0 2
5368: PPUSH
5369: CALL_OW 353
5373: ST_TO_ADDR
// tmp := [ ] ;
5374: LD_ADDR_VAR 0 6
5378: PUSH
5379: EMPTY
5380: ST_TO_ADDR
// for i = 1 to list do
5381: LD_ADDR_VAR 0 4
5385: PUSH
5386: DOUBLE
5387: LD_INT 1
5389: DEC
5390: ST_TO_ADDR
5391: LD_VAR 0 5
5395: PUSH
5396: FOR_TO
5397: IFFALSE 5495
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5399: LD_VAR 0 5
5403: PUSH
5404: LD_VAR 0 4
5408: ARRAY
5409: PUSH
5410: LD_INT 1
5412: ARRAY
5413: PPUSH
5414: LD_VAR 0 5
5418: PUSH
5419: LD_VAR 0 4
5423: ARRAY
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: PPUSH
5429: CALL_OW 554
5433: IFFALSE 5493
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5435: LD_ADDR_VAR 0 6
5439: PUSH
5440: LD_VAR 0 6
5444: PPUSH
5445: LD_VAR 0 6
5449: PUSH
5450: LD_INT 1
5452: PLUS
5453: PPUSH
5454: LD_VAR 0 5
5458: PUSH
5459: LD_VAR 0 4
5463: ARRAY
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PUSH
5469: LD_VAR 0 5
5473: PUSH
5474: LD_VAR 0 4
5478: ARRAY
5479: PUSH
5480: LD_INT 2
5482: ARRAY
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PPUSH
5488: CALL_OW 1
5492: ST_TO_ADDR
// end ;
5493: GO 5396
5495: POP
5496: POP
// ComStop ( bulldozer ) ;
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5506: LD_ADDR_VAR 0 7
5510: PUSH
5511: LD_VAR 0 1
5515: PPUSH
5516: CALL_OW 250
5520: PUSH
5521: LD_VAR 0 1
5525: PPUSH
5526: CALL_OW 251
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: ST_TO_ADDR
// for i = tmp downto 1 do
5535: LD_ADDR_VAR 0 4
5539: PUSH
5540: DOUBLE
5541: LD_VAR 0 6
5545: INC
5546: ST_TO_ADDR
5547: LD_INT 1
5549: PUSH
5550: FOR_DOWNTO
5551: IFFALSE 5639
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5553: LD_ADDR_VAR 0 7
5557: PUSH
5558: LD_VAR 0 7
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: PPUSH
5567: LD_VAR 0 7
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: LD_VAR 0 6
5580: PPUSH
5581: CALL 5742 0 3
5585: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5586: LD_VAR 0 1
5590: PPUSH
5591: LD_VAR 0 7
5595: PUSH
5596: LD_INT 1
5598: ARRAY
5599: PPUSH
5600: LD_VAR 0 7
5604: PUSH
5605: LD_INT 2
5607: ARRAY
5608: PPUSH
5609: CALL 5646 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: LD_VAR 0 6
5622: PPUSH
5623: LD_VAR 0 7
5627: PUSH
5628: LD_INT 3
5630: ARRAY
5631: PPUSH
5632: CALL_OW 3
5636: ST_TO_ADDR
// end ;
5637: GO 5550
5639: POP
5640: POP
// end ;
5641: LD_VAR 0 3
5645: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5646: LD_INT 0
5648: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5649: LD_VAR 0 2
5653: PPUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: CALL_OW 351
5663: PUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: CALL_OW 554
5678: AND
5679: PUSH
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: CALL_OW 488
5694: AND
5695: PUSH
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 428
5710: PUSH
5711: LD_INT 1
5713: NEG
5714: EQUAL
5715: AND
5716: IFFALSE 5737
// AddComMoveXY ( bulldozer , x , y ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_VAR 0 3
5732: PPUSH
5733: CALL_OW 171
// end ;
5737: LD_VAR 0 4
5741: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
5749: PPUSH
5750: PPUSH
// dist := 99999 ;
5751: LD_ADDR_VAR 0 6
5755: PUSH
5756: LD_INT 99999
5758: ST_TO_ADDR
// for i = 1 to list do
5759: LD_ADDR_VAR 0 5
5763: PUSH
5764: DOUBLE
5765: LD_INT 1
5767: DEC
5768: ST_TO_ADDR
5769: LD_VAR 0 3
5773: PUSH
5774: FOR_TO
5775: IFFALSE 5913
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5777: LD_ADDR_VAR 0 7
5781: PUSH
5782: LD_VAR 0 1
5786: PPUSH
5787: LD_VAR 0 2
5791: PPUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_VAR 0 5
5801: ARRAY
5802: PUSH
5803: LD_INT 1
5805: ARRAY
5806: PPUSH
5807: LD_VAR 0 3
5811: PUSH
5812: LD_VAR 0 5
5816: ARRAY
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PPUSH
5822: CALL_OW 298
5826: ST_TO_ADDR
// if d = 0 then
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 0
5834: EQUAL
5835: IFFALSE 5839
// continue ;
5837: GO 5774
// if d < dist then
5839: LD_VAR 0 7
5843: PUSH
5844: LD_VAR 0 6
5848: LESS
5849: IFFALSE 5911
// begin _x := list [ i ] [ 1 ] ;
5851: LD_ADDR_VAR 0 8
5855: PUSH
5856: LD_VAR 0 3
5860: PUSH
5861: LD_VAR 0 5
5865: ARRAY
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5871: LD_ADDR_VAR 0 9
5875: PUSH
5876: LD_VAR 0 3
5880: PUSH
5881: LD_VAR 0 5
5885: ARRAY
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: ST_TO_ADDR
// _i := i ;
5891: LD_ADDR_VAR 0 10
5895: PUSH
5896: LD_VAR 0 5
5900: ST_TO_ADDR
// dist := d ;
5901: LD_ADDR_VAR 0 6
5905: PUSH
5906: LD_VAR 0 7
5910: ST_TO_ADDR
// end ; end ;
5911: GO 5774
5913: POP
5914: POP
// result := [ _x , _y , _i , dist ] ;
5915: LD_ADDR_VAR 0 4
5919: PUSH
5920: LD_VAR 0 8
5924: PUSH
5925: LD_VAR 0 9
5929: PUSH
5930: LD_VAR 0 10
5934: PUSH
5935: LD_VAR 0 6
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: ST_TO_ADDR
// end ;
5946: LD_VAR 0 4
5950: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// for i = 1 to 72 do
5955: LD_ADDR_VAR 0 5
5959: PUSH
5960: DOUBLE
5961: LD_INT 1
5963: DEC
5964: ST_TO_ADDR
5965: LD_INT 72
5967: PUSH
5968: FOR_TO
5969: IFFALSE 6023
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5971: LD_VAR 0 5
5975: PPUSH
5976: LD_VAR 0 1
5980: PPUSH
5981: CALL_OW 321
5985: PUSH
5986: LD_INT 1
5988: EQUAL
5989: PUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: LD_VAR 0 3
5999: PPUSH
6000: CALL_OW 482
6004: AND
6005: IFFALSE 6021
// AddComResearch ( lab , i ) ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 5
6016: PPUSH
6017: CALL_OW 184
6021: GO 5968
6023: POP
6024: POP
// end ;
6025: LD_VAR 0 4
6029: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
6036: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6037: LD_ADDR_VAR 0 7
6041: PUSH
6042: LD_VAR 0 2
6046: PPUSH
6047: CALL_OW 313
6051: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6052: LD_ADDR_VAR 0 8
6056: PUSH
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_INT 22
6064: PUSH
6065: LD_VAR 0 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 2
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 24
6086: PUSH
6087: LD_INT 750
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: LD_INT 54
6099: PUSH
6100: EMPTY
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 70
6117: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6118: LD_ADDR_VAR 0 5
6122: PUSH
6123: LD_VAR 0 3
6127: PPUSH
6128: LD_INT 22
6130: PUSH
6131: LD_VAR 0 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 21
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: LD_INT 24
6155: PUSH
6156: LD_INT 1000
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: EMPTY
6173: LIST
6174: PPUSH
6175: CALL_OW 70
6179: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6180: LD_VAR 0 5
6184: NOT
6185: PUSH
6186: LD_INT 22
6188: PUSH
6189: LD_VAR 0 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 24
6210: PUSH
6211: LD_INT 250
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: PPUSH
6223: CALL_OW 69
6227: NOT
6228: AND
6229: IFFALSE 6233
// exit ;
6231: GO 6329
// if buildingsList and engineerOkInside then
6233: LD_VAR 0 5
6237: PUSH
6238: LD_VAR 0 7
6242: AND
6243: IFFALSE 6269
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6245: LD_VAR 0 7
6249: PPUSH
6250: LD_INT 25
6252: PUSH
6253: LD_INT 2
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 72
6264: PPUSH
6265: CALL_OW 122
// if buildingsList and engineerOkOutside then
6269: LD_VAR 0 5
6273: PUSH
6274: LD_VAR 0 8
6278: AND
6279: IFFALSE 6299
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6299: LD_VAR 0 5
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: PUSH
6308: LD_VAR 0 8
6312: AND
6313: IFFALSE 6329
// ComEnterUnit ( engineerOkOutside , building ) ;
6315: LD_VAR 0 8
6319: PPUSH
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL_OW 120
// end ;
6329: LD_VAR 0 4
6333: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6343: LD_ADDR_VAR 0 6
6347: PUSH
6348: LD_INT 22
6350: PUSH
6351: LD_VAR 0 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 23
6372: PUSH
6373: LD_INT 2
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 251
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6401: LD_ADDR_VAR 0 7
6405: PUSH
6406: LD_VAR 0 3
6410: PPUSH
6411: LD_INT 22
6413: PUSH
6414: LD_VAR 0 1
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 23
6425: PUSH
6426: LD_INT 2
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 25
6435: PUSH
6436: LD_INT 4
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 50
6445: PUSH
6446: EMPTY
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PPUSH
6455: CALL_OW 70
6459: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6460: LD_ADDR_VAR 0 8
6464: PUSH
6465: LD_VAR 0 3
6469: PPUSH
6470: LD_INT 22
6472: PUSH
6473: LD_VAR 0 1
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 21
6484: PUSH
6485: LD_INT 1
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 3
6494: PUSH
6495: LD_INT 25
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 24
6514: PUSH
6515: LD_INT 750
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: PPUSH
6532: CALL_OW 70
6536: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6537: LD_ADDR_VAR 0 9
6541: PUSH
6542: LD_VAR 0 2
6546: PPUSH
6547: LD_INT 22
6549: PUSH
6550: LD_VAR 0 1
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 21
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 25
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 3
6588: PUSH
6589: LD_INT 24
6591: PUSH
6592: LD_INT 1000
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: PPUSH
6609: CALL_OW 70
6613: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6614: LD_VAR 0 8
6618: NOT
6619: PUSH
6620: LD_VAR 0 9
6624: NOT
6625: AND
6626: PUSH
6627: LD_VAR 0 6
6631: NOT
6632: AND
6633: IFFALSE 6637
// exit ;
6635: GO 6843
// if damageUnits and sciList then
6637: LD_VAR 0 8
6641: PUSH
6642: LD_VAR 0 6
6646: AND
6647: IFFALSE 6663
// ComMoveToArea ( damageUnits , healArea ) ;
6649: LD_VAR 0 8
6653: PPUSH
6654: LD_VAR 0 2
6658: PPUSH
6659: CALL_OW 113
// if unitsToHeal and sciList then
6663: LD_VAR 0 9
6667: PUSH
6668: LD_VAR 0 6
6672: AND
6673: IFFALSE 6684
// ComExitBuilding ( sciList ) ;
6675: LD_VAR 0 6
6679: PPUSH
6680: CALL_OW 122
// if unitsToHeal and sciListOutside then
6684: LD_VAR 0 9
6688: PUSH
6689: LD_VAR 0 7
6693: AND
6694: IFFALSE 6714
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6696: LD_VAR 0 7
6700: PPUSH
6701: LD_VAR 0 9
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: PPUSH
6710: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6714: LD_VAR 0 8
6718: PUSH
6719: LD_INT 0
6721: EQUAL
6722: PUSH
6723: LD_VAR 0 9
6727: PUSH
6728: LD_INT 0
6730: EQUAL
6731: AND
6732: PUSH
6733: LD_VAR 0 7
6737: AND
6738: IFFALSE 6843
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6740: LD_ADDR_VAR 0 10
6744: PUSH
6745: LD_INT 22
6747: PUSH
6748: LD_VAR 0 1
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 21
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 8
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 69
6786: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6787: LD_ADDR_VAR 0 11
6791: PUSH
6792: LD_INT 1
6794: PPUSH
6795: LD_VAR 0 10
6799: PPUSH
6800: CALL_OW 12
6804: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6805: LD_VAR 0 7
6809: PPUSH
6810: LD_INT 3
6812: PUSH
6813: LD_INT 60
6815: PUSH
6816: EMPTY
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PPUSH
6823: CALL_OW 72
6827: PPUSH
6828: LD_VAR 0 10
6832: PUSH
6833: LD_VAR 0 11
6837: ARRAY
6838: PPUSH
6839: CALL_OW 120
// end ; end ;
6843: LD_VAR 0 5
6847: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6852: LD_INT 22
6854: PUSH
6855: LD_VAR 0 1
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 21
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 69
6882: PUSH
6883: LD_VAR 0 3
6887: LESSEQUAL
6888: IFFALSE 6955
// for i = 1 to vehCount do
6890: LD_ADDR_VAR 0 9
6894: PUSH
6895: DOUBLE
6896: LD_INT 1
6898: DEC
6899: ST_TO_ADDR
6900: LD_VAR 0 3
6904: PUSH
6905: FOR_TO
6906: IFFALSE 6953
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6908: LD_VAR 0 2
6912: PPUSH
6913: LD_VAR 0 7
6917: PPUSH
6918: LD_VAR 0 5
6922: PPUSH
6923: LD_VAR 0 6
6927: PPUSH
6928: LD_VAR 0 4
6932: PUSH
6933: LD_INT 1
6935: PPUSH
6936: LD_VAR 0 4
6940: PPUSH
6941: CALL_OW 12
6945: ARRAY
6946: PPUSH
6947: CALL_OW 185
6951: GO 6905
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 8
6959: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
// for i = 1 to medicCount do
6973: LD_ADDR_VAR 0 11
6977: PUSH
6978: DOUBLE
6979: LD_INT 1
6981: DEC
6982: ST_TO_ADDR
6983: LD_VAR 0 4
6987: PUSH
6988: FOR_TO
6989: IFFALSE 7059
// begin uc_side = side ;
6991: LD_ADDR_OWVAR 20
6995: PUSH
6996: LD_VAR 0 1
7000: ST_TO_ADDR
// uc_nation = nation ;
7001: LD_ADDR_OWVAR 21
7005: PUSH
7006: LD_VAR 0 2
7010: ST_TO_ADDR
// InitHC_All ( ) ;
7011: CALL_OW 584
// PrepareHuman ( false , 4 , skil ) ;
7015: LD_INT 0
7017: PPUSH
7018: LD_INT 4
7020: PPUSH
7021: LD_VAR 0 5
7025: PPUSH
7026: CALL_OW 380
// un = CreateHuman ;
7030: LD_ADDR_VAR 0 13
7034: PUSH
7035: CALL_OW 44
7039: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7040: LD_VAR 0 13
7044: PPUSH
7045: LD_VAR 0 6
7049: PPUSH
7050: LD_INT 0
7052: PPUSH
7053: CALL_OW 49
// end ;
7057: GO 6988
7059: POP
7060: POP
// for i = 1 to soldierCount do
7061: LD_ADDR_VAR 0 11
7065: PUSH
7066: DOUBLE
7067: LD_INT 1
7069: DEC
7070: ST_TO_ADDR
7071: LD_VAR 0 3
7075: PUSH
7076: FOR_TO
7077: IFFALSE 7147
// begin uc_side = side ;
7079: LD_ADDR_OWVAR 20
7083: PUSH
7084: LD_VAR 0 1
7088: ST_TO_ADDR
// uc_nation = nation ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_VAR 0 2
7098: ST_TO_ADDR
// InitHC_All ( ) ;
7099: CALL_OW 584
// PrepareHuman ( false , 1 , skil ) ;
7103: LD_INT 0
7105: PPUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_VAR 0 5
7113: PPUSH
7114: CALL_OW 380
// un = CreateHuman ;
7118: LD_ADDR_VAR 0 13
7122: PUSH
7123: CALL_OW 44
7127: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7128: LD_VAR 0 13
7132: PPUSH
7133: LD_VAR 0 6
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7076
7147: POP
7148: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7149: LD_ADDR_VAR 0 16
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 1
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 25
7201: PUSH
7202: LD_INT 9
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7225: LD_ADDR_VAR 0 15
7229: PUSH
7230: LD_INT 22
7232: PUSH
7233: LD_VAR 0 1
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 4
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 69
7260: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7261: LD_VAR 0 15
7265: PPUSH
7266: LD_VAR 0 7
7270: PPUSH
7271: CALL_OW 113
// if strategy = 1 then
7275: LD_VAR 0 9
7279: PUSH
7280: LD_INT 1
7282: EQUAL
7283: IFFALSE 7731
// begin for i in soldiersOK_list do
7285: LD_ADDR_VAR 0 11
7289: PUSH
7290: LD_VAR 0 16
7294: PUSH
7295: FOR_IN
7296: IFFALSE 7360
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7298: LD_VAR 0 11
7302: PPUSH
7303: LD_INT 91
7305: PPUSH
7306: LD_INT 63
7308: PPUSH
7309: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7313: LD_VAR 0 11
7317: PPUSH
7318: LD_INT 101
7320: PPUSH
7321: LD_INT 53
7323: PPUSH
7324: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7328: LD_VAR 0 11
7332: PPUSH
7333: LD_INT 75
7335: PPUSH
7336: LD_INT 23
7338: PPUSH
7339: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7343: LD_VAR 0 11
7347: PPUSH
7348: LD_INT 78
7350: PPUSH
7351: LD_INT 8
7353: PPUSH
7354: CALL_OW 174
// end ;
7358: GO 7295
7360: POP
7361: POP
// wait ( 0 0$30 ) ;
7362: LD_INT 1050
7364: PPUSH
7365: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7369: LD_INT 35
7371: PPUSH
7372: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7376: LD_ADDR_VAR 0 14
7380: PUSH
7381: LD_INT 22
7383: PUSH
7384: LD_VAR 0 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: LD_INT 24
7401: PUSH
7402: LD_INT 550
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 24
7415: PUSH
7416: LD_INT 250
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7437: LD_ADDR_VAR 0 16
7441: PUSH
7442: LD_INT 22
7444: PUSH
7445: LD_VAR 0 1
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 25
7456: PUSH
7457: LD_INT 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 24
7466: PUSH
7467: LD_INT 1000
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: PPUSH
7479: CALL_OW 69
7483: ST_TO_ADDR
// if medicCount then
7484: LD_VAR 0 4
7488: IFFALSE 7528
// begin if damageUnit_list then
7490: LD_VAR 0 14
7494: IFFALSE 7528
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7496: LD_VAR 0 14
7500: PPUSH
7501: LD_VAR 0 7
7505: PPUSH
7506: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_VAR 0 14
7519: PUSH
7520: LD_INT 1
7522: ARRAY
7523: PPUSH
7524: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7528: LD_ADDR_VAR 0 11
7532: PUSH
7533: LD_VAR 0 16
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7715
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7541: LD_ADDR_VAR 0 19
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_VAR 0 8
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 69
7562: PPUSH
7563: LD_VAR 0 11
7567: PPUSH
7568: CALL_OW 74
7572: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7573: LD_ADDR_VAR 0 20
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 2
7592: PUSH
7593: LD_INT 59
7595: PUSH
7596: EMPTY
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 1
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 21
7611: PUSH
7612: LD_INT 2
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: PPUSH
7632: CALL_OW 69
7636: PPUSH
7637: LD_VAR 0 11
7641: PPUSH
7642: CALL_OW 74
7646: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7647: LD_VAR 0 11
7651: PPUSH
7652: LD_VAR 0 19
7656: PPUSH
7657: CALL_OW 296
7661: PUSH
7662: LD_INT 8
7664: PLUS
7665: PUSH
7666: LD_VAR 0 11
7670: PPUSH
7671: LD_VAR 0 20
7675: PPUSH
7676: CALL_OW 296
7680: LESS
7681: IFFALSE 7699
// ComAttackUnit ( i , target1 ) else
7683: LD_VAR 0 11
7687: PPUSH
7688: LD_VAR 0 19
7692: PPUSH
7693: CALL_OW 115
7697: GO 7713
// ComAttackUnit ( i , target2 ) ;
7699: LD_VAR 0 11
7703: PPUSH
7704: LD_VAR 0 20
7708: PPUSH
7709: CALL_OW 115
// end ;
7713: GO 7538
7715: POP
7716: POP
// until not soldiersOK_list and not damageUnit_list ;
7717: LD_VAR 0 16
7721: NOT
7722: PUSH
7723: LD_VAR 0 14
7727: NOT
7728: AND
7729: IFFALSE 7369
// end ; if strategy = 2 then
7731: LD_VAR 0 9
7735: PUSH
7736: LD_INT 2
7738: EQUAL
7739: IFFALSE 8157
// begin for i in soldiersOK_list do
7741: LD_ADDR_VAR 0 11
7745: PUSH
7746: LD_VAR 0 16
7750: PUSH
7751: FOR_IN
7752: IFFALSE 7786
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7754: LD_VAR 0 11
7758: PPUSH
7759: LD_INT 91
7761: PPUSH
7762: LD_INT 63
7764: PPUSH
7765: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7769: LD_VAR 0 11
7773: PPUSH
7774: LD_INT 75
7776: PPUSH
7777: LD_INT 33
7779: PPUSH
7780: CALL_OW 174
// end ;
7784: GO 7751
7786: POP
7787: POP
// wait ( 0 0$10 ) ;
7788: LD_INT 350
7790: PPUSH
7791: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7795: LD_INT 105
7797: PPUSH
7798: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7802: LD_ADDR_VAR 0 14
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: LD_INT 24
7827: PUSH
7828: LD_INT 550
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 24
7841: PUSH
7842: LD_INT 250
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 69
7862: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7863: LD_ADDR_VAR 0 16
7867: PUSH
7868: LD_INT 22
7870: PUSH
7871: LD_VAR 0 1
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 25
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 24
7892: PUSH
7893: LD_INT 1000
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: PPUSH
7905: CALL_OW 69
7909: ST_TO_ADDR
// if medicCount then
7910: LD_VAR 0 4
7914: IFFALSE 7954
// begin if damageUnit_list then
7916: LD_VAR 0 14
7920: IFFALSE 7954
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7922: LD_VAR 0 14
7926: PPUSH
7927: LD_VAR 0 7
7931: PPUSH
7932: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7936: LD_VAR 0 4
7940: PPUSH
7941: LD_VAR 0 14
7945: PUSH
7946: LD_INT 1
7948: ARRAY
7949: PPUSH
7950: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7954: LD_ADDR_VAR 0 11
7958: PUSH
7959: LD_VAR 0 16
7963: PUSH
7964: FOR_IN
7965: IFFALSE 8141
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7967: LD_ADDR_VAR 0 19
7971: PUSH
7972: LD_INT 22
7974: PUSH
7975: LD_VAR 0 8
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PPUSH
7984: CALL_OW 69
7988: PPUSH
7989: LD_VAR 0 11
7993: PPUSH
7994: CALL_OW 74
7998: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7999: LD_ADDR_VAR 0 20
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 8
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: LD_INT 59
8021: PUSH
8022: EMPTY
8023: LIST
8024: PUSH
8025: LD_INT 21
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: LD_INT 21
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: PPUSH
8058: CALL_OW 69
8062: PPUSH
8063: LD_VAR 0 11
8067: PPUSH
8068: CALL_OW 74
8072: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8073: LD_VAR 0 11
8077: PPUSH
8078: LD_VAR 0 19
8082: PPUSH
8083: CALL_OW 296
8087: PUSH
8088: LD_INT 8
8090: PLUS
8091: PUSH
8092: LD_VAR 0 11
8096: PPUSH
8097: LD_VAR 0 20
8101: PPUSH
8102: CALL_OW 296
8106: LESS
8107: IFFALSE 8125
// ComAttackUnit ( i , target1 ) else
8109: LD_VAR 0 11
8113: PPUSH
8114: LD_VAR 0 19
8118: PPUSH
8119: CALL_OW 115
8123: GO 8139
// ComAttackUnit ( i , target2 ) ;
8125: LD_VAR 0 11
8129: PPUSH
8130: LD_VAR 0 20
8134: PPUSH
8135: CALL_OW 115
// end ;
8139: GO 7964
8141: POP
8142: POP
// until not soldiersOK_list and not damageUnit_list ;
8143: LD_VAR 0 16
8147: NOT
8148: PUSH
8149: LD_VAR 0 14
8153: NOT
8154: AND
8155: IFFALSE 7795
// end ; if medic_list then
8157: LD_VAR 0 15
8161: IFFALSE 8301
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8163: LD_ADDR_VAR 0 15
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_VAR 0 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 25
8182: PUSH
8183: LD_INT 4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 50
8192: PUSH
8193: EMPTY
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8206: LD_INT 35
8208: PPUSH
8209: CALL_OW 67
// for i in medic_list do
8213: LD_ADDR_VAR 0 11
8217: PUSH
8218: LD_VAR 0 15
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8292
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8226: LD_VAR 0 11
8230: PPUSH
8231: CALL_OW 314
8235: NOT
8236: PUSH
8237: LD_VAR 0 11
8241: PPUSH
8242: LD_INT 4
8244: PPUSH
8245: CALL_OW 308
8249: NOT
8250: AND
8251: IFFALSE 8267
// ComMoveToArea ( i , RussianAttack ) else
8253: LD_VAR 0 11
8257: PPUSH
8258: LD_INT 4
8260: PPUSH
8261: CALL_OW 113
8265: GO 8290
// if IsInArea ( i , RussianAttack ) then
8267: LD_VAR 0 11
8271: PPUSH
8272: LD_INT 4
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8290
// RemoveUnit ( i ) ;
8281: LD_VAR 0 11
8285: PPUSH
8286: CALL_OW 64
8290: GO 8223
8292: POP
8293: POP
// until not medic_list ;
8294: LD_VAR 0 15
8298: NOT
8299: IFFALSE 8163
// end ; end ; end_of_file
8301: LD_VAR 0 10
8305: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8306: LD_INT 0
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
// InGameOn ;
8313: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8317: LD_ADDR_VAR 0 3
8321: PUSH
8322: LD_EXP 8
8326: PUSH
8327: LD_EXP 9
8331: PUSH
8332: LD_EXP 10
8336: PUSH
8337: LD_EXP 11
8341: PUSH
8342: LD_EXP 12
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8354: LD_ADDR_VAR 0 4
8358: PUSH
8359: LD_INT 46
8361: PUSH
8362: LD_INT 45
8364: PUSH
8365: LD_INT 44
8367: PUSH
8368: LD_INT 43
8370: PUSH
8371: LD_INT 42
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8381: LD_ADDR_VAR 0 5
8385: PUSH
8386: LD_INT 14
8388: PUSH
8389: LD_INT 12
8391: PUSH
8392: LD_INT 10
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 6
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8408: LD_EXP 11
8412: PPUSH
8413: LD_INT 31
8415: PPUSH
8416: LD_INT 59
8418: PPUSH
8419: LD_INT 19
8421: PPUSH
8422: LD_INT 5
8424: PPUSH
8425: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8429: LD_INT 32
8431: PPUSH
8432: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8436: LD_INT 32
8438: PPUSH
8439: LD_INT 51
8441: PPUSH
8442: LD_INT 26
8444: PPUSH
8445: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8449: LD_INT 32
8451: PPUSH
8452: LD_INT 53
8454: PPUSH
8455: LD_INT 23
8457: PPUSH
8458: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8462: LD_INT 32
8464: PPUSH
8465: LD_INT 52
8467: PPUSH
8468: LD_INT 19
8470: PPUSH
8471: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8475: LD_INT 35
8477: PPUSH
8478: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8482: LD_INT 32
8484: PPUSH
8485: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8489: LD_INT 32
8491: PPUSH
8492: CALL_OW 250
8496: PUSH
8497: LD_INT 52
8499: EQUAL
8500: PUSH
8501: LD_INT 32
8503: PPUSH
8504: CALL_OW 251
8508: PUSH
8509: LD_INT 19
8511: EQUAL
8512: AND
8513: IFFALSE 8475
// ComExitVehicle ( JMM ) ;
8515: LD_EXP 1
8519: PPUSH
8520: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8524: LD_EXP 7
8528: PPUSH
8529: LD_EXP 1
8533: PPUSH
8534: CALL_OW 119
// wait ( 0 0$01 ) ;
8538: LD_INT 35
8540: PPUSH
8541: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8545: LD_EXP 1
8549: PPUSH
8550: LD_INT 46
8552: PPUSH
8553: LD_INT 10
8555: PPUSH
8556: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8560: LD_EXP 1
8564: PPUSH
8565: LD_EXP 7
8569: PPUSH
8570: CALL_OW 179
// wait ( 0 0$4 ) ;
8574: LD_INT 140
8576: PPUSH
8577: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8581: LD_EXP 1
8585: PPUSH
8586: LD_STRING D1-JMM-1
8588: PPUSH
8589: CALL_OW 88
// if not dialogue_skipped then
8593: LD_OWVAR 59
8597: NOT
8598: IFFALSE 9255
// begin for i := 1 to gammaSquad do
8600: LD_ADDR_VAR 0 2
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 3
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8677
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8618: LD_VAR 0 3
8622: PUSH
8623: LD_VAR 0 2
8627: ARRAY
8628: PPUSH
8629: LD_VAR 0 4
8633: PUSH
8634: LD_VAR 0 2
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 5
8644: PUSH
8645: LD_VAR 0 2
8649: ARRAY
8650: PPUSH
8651: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8655: LD_VAR 0 3
8659: PUSH
8660: LD_VAR 0 2
8664: ARRAY
8665: PPUSH
8666: LD_EXP 1
8670: PPUSH
8671: CALL_OW 179
// end ;
8675: GO 8615
8677: POP
8678: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8679: LD_EXP 4
8683: PPUSH
8684: LD_INT 41
8686: PPUSH
8687: LD_INT 4
8689: PPUSH
8690: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8694: LD_EXP 4
8698: PPUSH
8699: LD_EXP 1
8703: PPUSH
8704: CALL_OW 179
// if Lisa = false and Bobby then
8708: LD_EXP 4
8712: PUSH
8713: LD_INT 0
8715: EQUAL
8716: PUSH
8717: LD_EXP 2
8721: AND
8722: IFFALSE 8753
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8724: LD_EXP 2
8728: PPUSH
8729: LD_INT 41
8731: PPUSH
8732: LD_INT 4
8734: PPUSH
8735: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8739: LD_EXP 2
8743: PPUSH
8744: LD_EXP 1
8748: PPUSH
8749: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8753: LD_EXP 4
8757: PUSH
8758: LD_INT 0
8760: EQUAL
8761: PUSH
8762: LD_EXP 2
8766: PUSH
8767: LD_INT 0
8769: EQUAL
8770: AND
8771: PUSH
8772: LD_EXP 3
8776: AND
8777: IFFALSE 8808
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8779: LD_EXP 3
8783: PPUSH
8784: LD_INT 41
8786: PPUSH
8787: LD_INT 4
8789: PPUSH
8790: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8794: LD_EXP 3
8798: PPUSH
8799: LD_EXP 1
8803: PPUSH
8804: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8808: LD_EXP 4
8812: PUSH
8813: LD_INT 0
8815: EQUAL
8816: PUSH
8817: LD_EXP 2
8821: PUSH
8822: LD_INT 0
8824: EQUAL
8825: AND
8826: PUSH
8827: LD_EXP 3
8831: PUSH
8832: LD_INT 0
8834: EQUAL
8835: AND
8836: IFFALSE 8867
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8838: LD_EXP 6
8842: PPUSH
8843: LD_INT 41
8845: PPUSH
8846: LD_INT 4
8848: PPUSH
8849: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8853: LD_EXP 6
8857: PPUSH
8858: LD_EXP 1
8862: PPUSH
8863: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8867: LD_EXP 7
8871: PPUSH
8872: LD_STRING D1-Brown-1
8874: PPUSH
8875: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8879: LD_EXP 1
8883: PPUSH
8884: LD_STRING D1-JMM-2
8886: PPUSH
8887: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8891: LD_EXP 7
8895: PPUSH
8896: LD_STRING D1-Brown-2
8898: PPUSH
8899: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8903: LD_EXP 1
8907: PPUSH
8908: LD_EXP 9
8912: PPUSH
8913: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8917: LD_EXP 9
8921: PPUSH
8922: LD_STRING D1-FSol1-2
8924: PPUSH
8925: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8929: LD_EXP 1
8933: PPUSH
8934: LD_EXP 8
8938: PPUSH
8939: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8943: LD_EXP 8
8947: PPUSH
8948: LD_STRING D1-Sol2-2
8950: PPUSH
8951: CALL_OW 88
// if Lisa then
8955: LD_EXP 4
8959: IFFALSE 8999
// begin ComTurnUnit ( JMM , Lisa ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_EXP 4
8970: PPUSH
8971: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8975: LD_EXP 4
8979: PPUSH
8980: LD_STRING D1-Lisa-2
8982: PPUSH
8983: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8987: LD_EXP 1
8991: PPUSH
8992: LD_STRING D1-JMM-3
8994: PPUSH
8995: CALL_OW 88
// end ; if Bobby then
8999: LD_EXP 2
9003: IFFALSE 9043
// begin ComTurnUnit ( JMM , Bobby ) ;
9005: LD_EXP 1
9009: PPUSH
9010: LD_EXP 2
9014: PPUSH
9015: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9019: LD_EXP 2
9023: PPUSH
9024: LD_STRING D1-Bobby-2
9026: PPUSH
9027: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9031: LD_EXP 1
9035: PPUSH
9036: LD_STRING D1-JMM-3
9038: PPUSH
9039: CALL_OW 88
// end ; if Cyrus then
9043: LD_EXP 3
9047: IFFALSE 9087
// begin ComTurnUnit ( JMM , Cyrus ) ;
9049: LD_EXP 1
9053: PPUSH
9054: LD_EXP 3
9058: PPUSH
9059: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9063: LD_EXP 3
9067: PPUSH
9068: LD_STRING D1-Cyrus-2
9070: PPUSH
9071: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9075: LD_EXP 1
9079: PPUSH
9080: LD_STRING D1-JMM-3
9082: PPUSH
9083: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9087: LD_EXP 1
9091: PPUSH
9092: LD_EXP 7
9096: PPUSH
9097: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9101: LD_EXP 1
9105: PPUSH
9106: LD_STRING D1-JMM-3a
9108: PPUSH
9109: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9113: LD_EXP 7
9117: PPUSH
9118: LD_INT 38
9120: PPUSH
9121: LD_INT 5
9123: PPUSH
9124: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9128: LD_EXP 7
9132: PPUSH
9133: LD_EXP 1
9137: PPUSH
9138: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9142: LD_EXP 1
9146: PPUSH
9147: LD_INT 40
9149: PPUSH
9150: LD_INT 7
9152: PPUSH
9153: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_EXP 7
9166: PPUSH
9167: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9171: LD_EXP 7
9175: PPUSH
9176: LD_STRING D1-Brown-3
9178: PPUSH
9179: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9183: LD_EXP 14
9187: PPUSH
9188: LD_STRING D1-Har-3
9190: PPUSH
9191: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9195: LD_EXP 1
9199: PPUSH
9200: LD_STRING D1-JMM-4
9202: PPUSH
9203: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9207: LD_EXP 14
9211: PPUSH
9212: LD_STRING D1-Har-4
9214: PPUSH
9215: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9219: LD_EXP 1
9223: PPUSH
9224: LD_STRING D1-JMM-5
9226: PPUSH
9227: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9231: LD_EXP 14
9235: PPUSH
9236: LD_STRING D1-Har-5
9238: PPUSH
9239: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9243: LD_EXP 1
9247: PPUSH
9248: LD_STRING D1-JMM-6
9250: PPUSH
9251: CALL_OW 88
// end ; InGameOff ;
9255: CALL_OW 9
// PrepareRussianConvoy ;
9259: CALL 3404 0 0
// ChangeMissionObjectives ( M1 ) ;
9263: LD_STRING M1
9265: PPUSH
9266: CALL_OW 337
// SaveForQuickRestart ;
9270: CALL_OW 22
// timerStatus = 1 ;
9274: LD_ADDR_EXP 29
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// startTimer = 1 ;
9282: LD_ADDR_EXP 30
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// bonusAvalaible = 1 ;
9290: LD_ADDR_EXP 44
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9298: LD_INT 105
9300: PPUSH
9301: CALL_OW 67
// DialogueOn ;
9305: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9309: LD_EXP 12
9313: PPUSH
9314: LD_STRING D9-Mech1-1
9316: PPUSH
9317: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9321: LD_EXP 1
9325: PPUSH
9326: LD_STRING D9-JMM-1
9328: PPUSH
9329: CALL_OW 88
// DialogueOff ;
9333: CALL_OW 7
// end ;
9337: LD_VAR 0 1
9341: RET
// export function JMMTraitor ; begin
9342: LD_INT 0
9344: PPUSH
// wait ( 0 0$2 ) ;
9345: LD_INT 70
9347: PPUSH
9348: CALL_OW 67
// DialogueOn ;
9352: CALL_OW 6
// InGameOn ;
9356: CALL_OW 8
// SayRadio ( Harisson , D8-Har-1b ) ;
9360: LD_EXP 14
9364: PPUSH
9365: LD_STRING D8-Har-1b
9367: PPUSH
9368: CALL_OW 94
// YouLost ( LostCommand ) ;
9372: LD_STRING LostCommand
9374: PPUSH
9375: CALL_OW 104
// InGameOff ;
9379: CALL_OW 9
// DialogueOff ;
9383: CALL_OW 7
// end ;
9387: LD_VAR 0 1
9391: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9392: LD_INT 47
9394: PPUSH
9395: LD_INT 1
9397: PPUSH
9398: CALL_OW 321
9402: PUSH
9403: LD_INT 2
9405: EQUAL
9406: PUSH
9407: LD_EXP 31
9411: NOT
9412: AND
9413: PUSH
9414: LD_INT 22
9416: PUSH
9417: LD_INT 1
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: PUSH
9424: LD_INT 21
9426: PUSH
9427: LD_INT 3
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: LD_INT 30
9436: PUSH
9437: LD_INT 3
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: PUSH
9444: LD_INT 57
9446: PUSH
9447: EMPTY
9448: LIST
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: PPUSH
9456: CALL_OW 69
9460: AND
9461: IFFALSE 9695
9463: GO 9465
9465: DISABLE
// begin factoryDialog := true ;
9466: LD_ADDR_EXP 31
9470: PUSH
9471: LD_INT 1
9473: ST_TO_ADDR
// if IsOk ( Campell ) then
9474: LD_EXP 12
9478: PPUSH
9479: CALL_OW 302
9483: IFFALSE 9499
// Say ( Campell , D10-Mech1-1 ) else
9485: LD_EXP 12
9489: PPUSH
9490: LD_STRING D10-Mech1-1
9492: PPUSH
9493: CALL_OW 88
9497: GO 9695
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9499: LD_INT 22
9501: PUSH
9502: LD_INT 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 21
9511: PUSH
9512: LD_INT 1
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: LD_INT 25
9521: PUSH
9522: LD_INT 3
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: PUSH
9529: LD_INT 26
9531: PUSH
9532: LD_INT 1
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: PPUSH
9545: CALL_OW 69
9549: PUSH
9550: LD_EXP 1
9554: PUSH
9555: EMPTY
9556: LIST
9557: DIFF
9558: IFFALSE 9632
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9560: LD_INT 22
9562: PUSH
9563: LD_INT 1
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PUSH
9570: LD_INT 21
9572: PUSH
9573: LD_INT 1
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: PUSH
9580: LD_INT 25
9582: PUSH
9583: LD_INT 3
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PUSH
9590: LD_INT 26
9592: PUSH
9593: LD_INT 1
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: PPUSH
9606: CALL_OW 69
9610: PUSH
9611: LD_EXP 1
9615: PUSH
9616: EMPTY
9617: LIST
9618: DIFF
9619: PPUSH
9620: LD_STRING D10-Mech1-1
9622: PPUSH
9623: LD_STRING D10-Mech1-1
9625: PPUSH
9626: CALL 4598 0 3
9630: GO 9695
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9632: LD_INT 22
9634: PUSH
9635: LD_INT 1
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: PUSH
9642: LD_INT 21
9644: PUSH
9645: LD_INT 1
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: LD_INT 26
9654: PUSH
9655: LD_INT 1
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: LIST
9666: PUSH
9667: LD_INT 1
9669: ARRAY
9670: PPUSH
9671: CALL_OW 69
9675: PUSH
9676: LD_EXP 1
9680: PUSH
9681: EMPTY
9682: LIST
9683: DIFF
9684: PPUSH
9685: LD_STRING D10-Mech1-1
9687: PPUSH
9688: LD_STRING D10-Mech1-1
9690: PPUSH
9691: CALL 4598 0 3
// end ; end ;
9695: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9696: LD_INT 22
9698: PUSH
9699: LD_INT 1
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 30
9708: PUSH
9709: LD_INT 32
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PPUSH
9720: CALL_OW 69
9724: PUSH
9725: LD_EXP 32
9729: PUSH
9730: LD_INT 0
9732: EQUAL
9733: AND
9734: IFFALSE 9970
9736: GO 9738
9738: DISABLE
// begin if IsOk ( Claptopn ) then
9739: LD_EXP 11
9743: PPUSH
9744: CALL_OW 302
9748: IFFALSE 9764
// Say ( Claptopn , D9b-Eng1-1 ) else
9750: LD_EXP 11
9754: PPUSH
9755: LD_STRING D9b-Eng1-1
9757: PPUSH
9758: CALL_OW 88
9762: GO 9956
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9764: LD_INT 22
9766: PUSH
9767: LD_INT 1
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PUSH
9774: LD_INT 21
9776: PUSH
9777: LD_INT 1
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PUSH
9784: LD_INT 25
9786: PUSH
9787: LD_INT 3
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 26
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: PPUSH
9810: CALL_OW 69
9814: PUSH
9815: LD_EXP 1
9819: PUSH
9820: EMPTY
9821: LIST
9822: DIFF
9823: IFFALSE 9897
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9825: LD_INT 22
9827: PUSH
9828: LD_INT 1
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PUSH
9835: LD_INT 21
9837: PUSH
9838: LD_INT 1
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PUSH
9845: LD_INT 25
9847: PUSH
9848: LD_INT 2
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PUSH
9855: LD_INT 26
9857: PUSH
9858: LD_INT 1
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: PPUSH
9871: CALL_OW 69
9875: PUSH
9876: LD_EXP 1
9880: PUSH
9881: EMPTY
9882: LIST
9883: DIFF
9884: PPUSH
9885: LD_STRING D9b-Eng1-1
9887: PPUSH
9888: LD_STRING D9b-Eng1-11
9890: PPUSH
9891: CALL 4598 0 3
9895: GO 9956
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9897: LD_INT 22
9899: PUSH
9900: LD_INT 1
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 21
9909: PUSH
9910: LD_INT 1
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 26
9919: PUSH
9920: LD_INT 1
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: PPUSH
9932: CALL_OW 69
9936: PUSH
9937: LD_EXP 1
9941: PUSH
9942: EMPTY
9943: LIST
9944: DIFF
9945: PPUSH
9946: LD_STRING D9b-Eng1-1
9948: PPUSH
9949: LD_STRING D9b-Eng1-1
9951: PPUSH
9952: CALL 4598 0 3
// end ; if energyVDialog = 0 then
9956: LD_EXP 33
9960: PUSH
9961: LD_INT 0
9963: EQUAL
9964: IFFALSE 9970
// EnergyDialog ;
9966: CALL 5003 0 0
// end ;
9970: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9971: LD_EXP 34
9975: PUSH
9976: LD_INT 1
9978: EQUAL
9979: PUSH
9980: LD_EXP 35
9984: PUSH
9985: LD_INT 1
9987: EQUAL
9988: AND
9989: IFFALSE 10001
9991: GO 9993
9993: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9994: LD_STRING M1a
9996: PPUSH
9997: CALL_OW 337
10001: END
// every 3 3$0 do
10002: GO 10004
10004: DISABLE
// PrepareFirstAttack ;
10005: CALL 4216 0 0
10009: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
10010: LD_INT 22
10012: PUSH
10013: LD_INT 5
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PUSH
10020: LD_INT 21
10022: PUSH
10023: LD_INT 1
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 3
10032: PUSH
10033: LD_INT 24
10035: PUSH
10036: LD_INT 250
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: LIST
10051: PPUSH
10052: CALL_OW 69
10056: PUSH
10057: LD_INT 0
10059: GREATER
10060: PUSH
10061: LD_EXP 23
10065: PUSH
10066: LD_INT 1
10068: EQUAL
10069: AND
10070: IFFALSE 10371
10072: GO 10074
10074: DISABLE
10075: LD_INT 0
10077: PPUSH
// begin firstRussianAttack = 2 ;
10078: LD_ADDR_EXP 23
10082: PUSH
10083: LD_INT 2
10085: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10086: LD_INT 22
10088: PUSH
10089: LD_INT 5
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 21
10098: PUSH
10099: LD_INT 1
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PPUSH
10110: CALL_OW 69
10114: PPUSH
10115: LD_INT 125
10117: PPUSH
10118: LD_INT 98
10120: PPUSH
10121: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10125: LD_INT 22
10127: PUSH
10128: LD_INT 1
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PUSH
10135: LD_INT 21
10137: PUSH
10138: LD_INT 1
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PPUSH
10149: CALL_OW 69
10153: PUSH
10154: LD_EXP 1
10158: PUSH
10159: LD_EXP 7
10163: PUSH
10164: LD_EXP 4
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: LIST
10173: DIFF
10174: PPUSH
10175: LD_STRING DAtt1-Sol1-1
10177: PPUSH
10178: LD_STRING DAtt1-FSol1-1
10180: PPUSH
10181: CALL 4598 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10185: LD_EXP 1
10189: PPUSH
10190: LD_STRING DAtt1-JMM-1
10192: PPUSH
10193: CALL_OW 88
// if Lisa then
10197: LD_EXP 4
10201: IFFALSE 10217
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10203: LD_EXP 4
10207: PPUSH
10208: LD_STRING DAtt1a-Lisa-1
10210: PPUSH
10211: CALL_OW 88
10215: GO 10288
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10217: LD_INT 22
10219: PUSH
10220: LD_INT 1
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: LD_INT 21
10229: PUSH
10230: LD_INT 1
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: LD_INT 26
10239: PUSH
10240: LD_INT 1
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: LIST
10251: PPUSH
10252: CALL_OW 69
10256: PUSH
10257: LD_EXP 1
10261: PUSH
10262: LD_EXP 7
10266: PUSH
10267: LD_EXP 4
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: LIST
10276: DIFF
10277: PPUSH
10278: LD_STRING DAtt1a-Sol1-1
10280: PPUSH
10281: LD_STRING DAtt1-FSol1-1
10283: PPUSH
10284: CALL 4598 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10288: LD_EXP 1
10292: PPUSH
10293: LD_STRING DAtt1a-JMM-1
10295: PPUSH
10296: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10300: LD_INT 22
10302: PUSH
10303: LD_INT 1
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: LD_INT 21
10312: PUSH
10313: LD_INT 1
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: LD_INT 26
10322: PUSH
10323: LD_INT 1
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: LIST
10334: PPUSH
10335: CALL_OW 69
10339: PUSH
10340: LD_EXP 1
10344: PUSH
10345: LD_EXP 7
10349: PUSH
10350: LD_EXP 4
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: LIST
10359: DIFF
10360: PPUSH
10361: LD_STRING DAtt1b-Sol1-1
10363: PPUSH
10364: LD_STRING DAtt1a-Sol1-1
10366: PPUSH
10367: CALL 4598 0 3
// end ;
10371: PPOPN 1
10373: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10374: LD_EXP 23
10378: PUSH
10379: LD_INT 2
10381: EQUAL
10382: PUSH
10383: LD_INT 5
10385: PPUSH
10386: LD_INT 22
10388: PUSH
10389: LD_INT 5
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: LD_INT 21
10398: PUSH
10399: LD_INT 1
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PPUSH
10410: CALL_OW 70
10414: AND
10415: IFFALSE 10473
10417: GO 10419
10419: DISABLE
10420: LD_INT 0
10422: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10423: LD_ADDR_VAR 0 1
10427: PUSH
10428: LD_INT 22
10430: PUSH
10431: LD_INT 5
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PUSH
10438: LD_INT 21
10440: PUSH
10441: LD_INT 1
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PPUSH
10452: CALL_OW 69
10456: PUSH
10457: FOR_IN
10458: IFFALSE 10471
// RemoveUnit ( i ) ;
10460: LD_VAR 0 1
10464: PPUSH
10465: CALL_OW 64
10469: GO 10457
10471: POP
10472: POP
// end ;
10473: PPOPN 1
10475: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10476: LD_INT 22
10478: PUSH
10479: LD_INT 5
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: EMPTY
10487: LIST
10488: PPUSH
10489: CALL_OW 69
10493: PUSH
10494: LD_INT 0
10496: EQUAL
10497: PUSH
10498: LD_EXP 23
10502: PUSH
10503: LD_INT 2
10505: EQUAL
10506: AND
10507: IFFALSE 10520
10509: GO 10511
10511: DISABLE
// firstRussianAttack = 3 ;
10512: LD_ADDR_EXP 23
10516: PUSH
10517: LD_INT 3
10519: ST_TO_ADDR
10520: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10521: LD_EXP 28
10525: PUSH
10526: LD_INT 0
10528: EQUAL
10529: IFFALSE 10610
10531: GO 10533
10533: DISABLE
// begin timerStatus = 4 ;
10534: LD_ADDR_EXP 29
10538: PUSH
10539: LD_INT 4
10541: ST_TO_ADDR
// DialogueOn ;
10542: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10546: LD_EXP 13
10550: PPUSH
10551: LD_STRING D2-Don-1
10553: PPUSH
10554: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10558: LD_EXP 1
10562: PPUSH
10563: LD_STRING D2-JMM-1
10565: PPUSH
10566: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10570: LD_EXP 13
10574: PPUSH
10575: LD_STRING D2-Don-2
10577: PPUSH
10578: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10582: LD_EXP 1
10586: PPUSH
10587: LD_STRING D2-JMM-2
10589: PPUSH
10590: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10594: LD_EXP 13
10598: PPUSH
10599: LD_STRING D2-Don-3
10601: PPUSH
10602: CALL_OW 94
// DialogueOff ;
10606: CALL_OW 7
// end ;
10610: END
// every 12 12$0 do var tmp ;
10611: GO 10613
10613: DISABLE
10614: LD_INT 0
10616: PPUSH
// begin PrepareDonaldsonArmy ;
10617: CALL 1187 0 0
// CenterNowOnUnits ( Donaldson ) ;
10621: LD_EXP 13
10625: PPUSH
10626: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10630: LD_INT 22
10632: PUSH
10633: LD_INT 6
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PPUSH
10640: CALL_OW 69
10644: NOT
10645: IFFALSE 10661
// begin wait ( 3 ) ;
10647: LD_INT 3
10649: PPUSH
10650: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10654: LD_STRING ACH_BASE
10656: PPUSH
10657: CALL_OW 543
// end ; tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
10661: LD_ADDR_VAR 0 1
10665: PUSH
10666: LD_INT 22
10668: PUSH
10669: LD_INT 4
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: LD_INT 21
10678: PUSH
10679: LD_INT 1
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: LD_INT 26
10688: PUSH
10689: LD_INT 1
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: LIST
10700: PPUSH
10701: CALL_OW 69
10705: PUSH
10706: LD_EXP 5
10710: PUSH
10711: EMPTY
10712: LIST
10713: DIFF
10714: ST_TO_ADDR
// DialogueOn ;
10715: CALL_OW 6
// tmp := tmp diff DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10719: LD_ADDR_VAR 0 1
10723: PUSH
10724: LD_VAR 0 1
10728: PUSH
10729: LD_VAR 0 1
10733: PPUSH
10734: LD_STRING D3-Sol1-1
10736: PPUSH
10737: LD_STRING D3-Sol1-1
10739: PPUSH
10740: CALL 4598 0 3
10744: DIFF
10745: ST_TO_ADDR
// DialogRandom ( tmp , D3-Sol2-1 , D3-Sol2-1 ) ;
10746: LD_VAR 0 1
10750: PPUSH
10751: LD_STRING D3-Sol2-1
10753: PPUSH
10754: LD_STRING D3-Sol2-1
10756: PPUSH
10757: CALL 4598 0 3
// if Frank then
10761: LD_EXP 5
10765: IFFALSE 10779
// Say ( Frank , D3-Frank-1 ) ;
10767: LD_EXP 5
10771: PPUSH
10772: LD_STRING D3-Frank-1
10774: PPUSH
10775: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10779: LD_EXP 13
10783: PPUSH
10784: LD_STRING D3-Don-1
10786: PPUSH
10787: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10791: LD_EXP 13
10795: PPUSH
10796: LD_STRING D3-Don-1a
10798: PPUSH
10799: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10803: LD_EXP 1
10807: PPUSH
10808: LD_STRING D3-JMM-1
10810: PPUSH
10811: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10815: LD_EXP 13
10819: PPUSH
10820: LD_STRING D3-Don-2
10822: PPUSH
10823: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10827: LD_INT 22
10829: PUSH
10830: LD_INT 6
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 21
10839: PUSH
10840: LD_INT 1
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PPUSH
10851: CALL_OW 69
10855: IFFALSE 10993
// begin Say ( JMM , D3-JMM-2 ) ;
10857: LD_EXP 1
10861: PPUSH
10862: LD_STRING D3-JMM-2
10864: PPUSH
10865: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10869: LD_EXP 13
10873: PPUSH
10874: LD_STRING D3-Don-3
10876: PPUSH
10877: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10881: LD_EXP 1
10885: PPUSH
10886: LD_STRING D3-JMM-3
10888: PPUSH
10889: CALL_OW 88
// if IsOK ( Frank ) then
10893: LD_EXP 5
10897: PPUSH
10898: CALL_OW 302
10902: IFFALSE 10916
// Say ( Frank , D3-Frank-3 ) ;
10904: LD_EXP 5
10908: PPUSH
10909: LD_STRING D3-Frank-3
10911: PPUSH
10912: CALL_OW 88
// DialogueOff ;
10916: CALL_OW 7
// if IsOk ( Frank ) then
10920: LD_EXP 5
10924: PPUSH
10925: CALL_OW 302
10929: IFFALSE 10991
// begin SetSide ( Frank , 0 ) ;
10931: LD_EXP 5
10935: PPUSH
10936: LD_INT 0
10938: PPUSH
10939: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10943: LD_EXP 5
10947: PPUSH
10948: LD_INT 12
10950: PPUSH
10951: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10955: LD_EXP 5
10959: PPUSH
10960: LD_STRING 04t_Frank
10962: PPUSH
10963: CALL_OW 38
// wait ( 0 0$3 ) ;
10967: LD_INT 105
10969: PPUSH
10970: CALL_OW 67
// frankScoutBase = 1 ;
10974: LD_ADDR_EXP 25
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10982: LD_EXP 5
10986: PPUSH
10987: CALL_OW 64
// end ; end else
10991: GO 11080
// begin Say ( JMM , D3-JMM-4 ) ;
10993: LD_EXP 1
10997: PPUSH
10998: LD_STRING D3-JMM-4
11000: PPUSH
11001: CALL_OW 88
// DialogueOff ;
11005: CALL_OW 7
// if IsOk ( Frank ) then
11009: LD_EXP 5
11013: PPUSH
11014: CALL_OW 302
11018: IFFALSE 11080
// begin SetSide ( Frank , 0 ) ;
11020: LD_EXP 5
11024: PPUSH
11025: LD_INT 0
11027: PPUSH
11028: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11032: LD_EXP 5
11036: PPUSH
11037: LD_INT 12
11039: PPUSH
11040: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
11044: LD_EXP 5
11048: PPUSH
11049: LD_STRING 04t_Frank
11051: PPUSH
11052: CALL_OW 38
// wait ( 0 0$3 ) ;
11056: LD_INT 105
11058: PPUSH
11059: CALL_OW 67
// frankScoutBase = 1 ;
11063: LD_ADDR_EXP 25
11067: PUSH
11068: LD_INT 1
11070: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11071: LD_EXP 5
11075: PPUSH
11076: CALL_OW 64
// end ; end ; end ;
11080: PPOPN 1
11082: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11083: LD_EXP 13
11087: PPUSH
11088: CALL_OW 255
11092: PUSH
11093: LD_INT 4
11095: EQUAL
11096: PUSH
11097: LD_EXP 13
11101: PPUSH
11102: CALL_OW 302
11106: AND
11107: IFFALSE 11347
11109: GO 11111
11111: DISABLE
11112: LD_INT 0
11114: PPUSH
11115: PPUSH
// begin wait ( 5 5$00 ) ;
11116: LD_INT 10500
11118: PPUSH
11119: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11123: LD_EXP 13
11127: PPUSH
11128: CALL_OW 255
11132: PUSH
11133: LD_INT 1
11135: EQUAL
11136: PUSH
11137: LD_EXP 13
11141: PPUSH
11142: CALL_OW 301
11146: OR
11147: IFFALSE 11151
// exit ;
11149: GO 11347
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11151: LD_EXP 13
11155: PPUSH
11156: LD_STRING D3b-Don-1
11158: PPUSH
11159: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11163: LD_ADDR_EXP 41
11167: PUSH
11168: LD_INT 1
11170: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11171: LD_ADDR_VAR 0 2
11175: PUSH
11176: LD_INT 22
11178: PUSH
11179: LD_INT 4
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PPUSH
11186: CALL_OW 69
11190: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11191: LD_INT 35
11193: PPUSH
11194: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11198: LD_VAR 0 2
11202: NOT
11203: PUSH
11204: LD_INT 22
11206: PUSH
11207: LD_INT 6
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 101
11216: PUSH
11217: LD_INT 1
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PPUSH
11228: CALL_OW 69
11232: OR
11233: IFFALSE 11191
// if not tmp then
11235: LD_VAR 0 2
11239: NOT
11240: IFFALSE 11244
// exit ;
11242: GO 11347
// for i in tmp do
11244: LD_ADDR_VAR 0 1
11248: PUSH
11249: LD_VAR 0 2
11253: PUSH
11254: FOR_IN
11255: IFFALSE 11274
// ComAgressiveMove ( i , 52 , 64 ) ;
11257: LD_VAR 0 1
11261: PPUSH
11262: LD_INT 52
11264: PPUSH
11265: LD_INT 64
11267: PPUSH
11268: CALL_OW 114
11272: GO 11254
11274: POP
11275: POP
// wait ( 0 0$10 ) ;
11276: LD_INT 350
11278: PPUSH
11279: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11283: LD_ADDR_VAR 0 1
11287: PUSH
11288: LD_INT 22
11290: PUSH
11291: LD_INT 4
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PPUSH
11298: CALL_OW 69
11302: PUSH
11303: LD_EXP 5
11307: DIFF
11308: PUSH
11309: FOR_IN
11310: IFFALSE 11326
// SetSide ( i , 1 ) ;
11312: LD_VAR 0 1
11316: PPUSH
11317: LD_INT 1
11319: PPUSH
11320: CALL_OW 235
11324: GO 11309
11326: POP
11327: POP
// if IsLive ( Donaldson ) then
11328: LD_EXP 13
11332: PPUSH
11333: CALL_OW 300
11337: IFFALSE 11347
// saveDonaldson := 1 ;
11339: LD_ADDR_EXP 24
11343: PUSH
11344: LD_INT 1
11346: ST_TO_ADDR
// end ;
11347: PPOPN 2
11349: END
// every 0 0$1 trigger IsOk ( Donaldson ) and not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11350: LD_EXP 13
11354: PPUSH
11355: CALL_OW 302
11359: PUSH
11360: LD_EXP 24
11364: NOT
11365: AND
11366: PUSH
11367: LD_EXP 41
11371: NOT
11372: AND
11373: PUSH
11374: LD_INT 26
11376: PPUSH
11377: LD_INT 22
11379: PUSH
11380: LD_INT 1
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PPUSH
11387: CALL_OW 70
11391: PUSH
11392: LD_EXP 13
11396: PPUSH
11397: LD_EXP 1
11401: PPUSH
11402: CALL_OW 296
11406: PUSH
11407: LD_INT 6
11409: LESS
11410: OR
11411: AND
11412: IFFALSE 11467
11414: GO 11416
11416: DISABLE
11417: LD_INT 0
11419: PPUSH
// begin saveDonaldson := 1 ;
11420: LD_ADDR_EXP 24
11424: PUSH
11425: LD_INT 1
11427: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11428: LD_ADDR_VAR 0 1
11432: PUSH
11433: LD_INT 22
11435: PUSH
11436: LD_INT 4
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PPUSH
11443: CALL_OW 69
11447: PUSH
11448: FOR_IN
11449: IFFALSE 11465
// SetSide ( i , 1 ) ;
11451: LD_VAR 0 1
11455: PPUSH
11456: LD_INT 1
11458: PPUSH
11459: CALL_OW 235
11463: GO 11448
11465: POP
11466: POP
// end ;
11467: PPOPN 1
11469: END
// every 0 0$1 trigger frankScoutBase do
11470: LD_EXP 25
11474: IFFALSE 11839
11476: GO 11478
11478: DISABLE
// begin wait ( 2 2$30 ) ;
11479: LD_INT 5250
11481: PPUSH
11482: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11486: LD_INT 35
11488: PPUSH
11489: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11493: LD_INT 81
11495: PUSH
11496: LD_INT 4
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 92
11505: PUSH
11506: LD_INT 84
11508: PUSH
11509: LD_INT 28
11511: PUSH
11512: LD_INT 22
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: PPUSH
11525: CALL_OW 69
11529: NOT
11530: IFFALSE 11486
// uc_side = 4 ;
11532: LD_ADDR_OWVAR 20
11536: PUSH
11537: LD_INT 4
11539: ST_TO_ADDR
// uc_nation = 1 ;
11540: LD_ADDR_OWVAR 21
11544: PUSH
11545: LD_INT 1
11547: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11548: LD_ADDR_EXP 5
11552: PUSH
11553: LD_STRING 04t_Frank
11555: PPUSH
11556: CALL_OW 34
11560: ST_TO_ADDR
// if not Frank then
11561: LD_EXP 5
11565: NOT
11566: IFFALSE 11570
// exit ;
11568: GO 11839
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11570: LD_EXP 5
11574: PPUSH
11575: LD_INT 13
11577: PPUSH
11578: LD_INT 0
11580: PPUSH
11581: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11585: LD_INT 35
11587: PPUSH
11588: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11592: LD_EXP 1
11596: PPUSH
11597: CALL_OW 310
11601: NOT
11602: PUSH
11603: LD_EXP 1
11607: PPUSH
11608: LD_INT 4
11610: PPUSH
11611: CALL_OW 296
11615: PUSH
11616: LD_INT 20
11618: LESS
11619: AND
11620: IFFALSE 11653
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11622: LD_EXP 5
11626: PPUSH
11627: LD_EXP 1
11631: PPUSH
11632: CALL_OW 250
11636: PPUSH
11637: LD_EXP 1
11641: PPUSH
11642: CALL_OW 251
11646: PPUSH
11647: CALL_OW 111
11651: GO 11668
// ComMoveXY ( Frank , 51 , 15 ) ;
11653: LD_EXP 5
11657: PPUSH
11658: LD_INT 51
11660: PPUSH
11661: LD_INT 15
11663: PPUSH
11664: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11668: LD_EXP 5
11672: PPUSH
11673: LD_EXP 1
11677: PPUSH
11678: CALL_OW 296
11682: PUSH
11683: LD_INT 10
11685: LESS
11686: IFFALSE 11585
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11688: LD_EXP 1
11692: PUSH
11693: LD_EXP 5
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: PPUSH
11702: CALL_OW 87
// DialogueOn ;
11706: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11710: LD_EXP 5
11714: PPUSH
11715: LD_STRING D3a-Frank-1
11717: PPUSH
11718: CALL_OW 88
// if Lisa then
11722: LD_EXP 4
11726: IFFALSE 11776
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11728: LD_EXP 4
11732: PPUSH
11733: LD_STRING D3a-Lisa-1
11735: PPUSH
11736: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11740: LD_EXP 5
11744: PPUSH
11745: LD_STRING D3a-Frank-2
11747: PPUSH
11748: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11752: LD_EXP 4
11756: PPUSH
11757: LD_STRING D3a-Lisa-2
11759: PPUSH
11760: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11764: LD_EXP 5
11768: PPUSH
11769: LD_STRING D3a-Frank-3
11771: PPUSH
11772: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11776: LD_EXP 1
11780: PPUSH
11781: LD_STRING D3a-JMM-3
11783: PPUSH
11784: CALL_OW 88
// DialogueOff ;
11788: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11792: LD_EXP 5
11796: PPUSH
11797: LD_INT 1
11799: PPUSH
11800: CALL_OW 235
// InGameOn ;
11804: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11808: LD_INT 1
11810: PPUSH
11811: LD_INT 7
11813: PPUSH
11814: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11818: LD_INT 93
11820: PPUSH
11821: LD_INT 91
11823: PPUSH
11824: CALL_OW 84
// wait ( 0 0$5 ) ;
11828: LD_INT 175
11830: PPUSH
11831: CALL_OW 67
// InGameOff ;
11835: CALL_OW 9
// end ;
11839: END
// every 12 12$0 trigger Difficulty > 1 do
11840: LD_OWVAR 67
11844: PUSH
11845: LD_INT 1
11847: GREATER
11848: IFFALSE 11872
11850: GO 11852
11852: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11853: LD_INT 24
11855: PPUSH
11856: LD_INT 24
11858: PPUSH
11859: LD_INT 1
11861: PPUSH
11862: LD_INT 1
11864: PPUSH
11865: LD_INT 53
11867: PPUSH
11868: CALL_OW 185
11872: END
// every 18 18$0 do
11873: GO 11875
11875: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11876: LD_EXP 14
11880: PPUSH
11881: LD_STRING D4-Har-1
11883: PPUSH
11884: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11888: LD_EXP 1
11892: PPUSH
11893: LD_STRING D4-JMM-1
11895: PPUSH
11896: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11900: LD_EXP 14
11904: PPUSH
11905: LD_STRING D4-Har-2
11907: PPUSH
11908: CALL_OW 94
// case Query ( Q1 ) of 1 :
11912: LD_STRING Q1
11914: PPUSH
11915: CALL_OW 97
11919: PUSH
11920: LD_INT 1
11922: DOUBLE
11923: EQUAL
11924: IFTRUE 11928
11926: GO 11987
11928: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11929: LD_EXP 1
11933: PPUSH
11934: LD_STRING D5-JMM-1
11936: PPUSH
11937: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11941: LD_EXP 14
11945: PPUSH
11946: LD_STRING D5-Har-1
11948: PPUSH
11949: CALL_OW 94
// timeToSupport = 10 10$0 ;
11953: LD_ADDR_EXP 28
11957: PUSH
11958: LD_INT 21000
11960: ST_TO_ADDR
// timerStatus = 2 ;
11961: LD_ADDR_EXP 29
11965: PUSH
11966: LD_INT 2
11968: ST_TO_ADDR
// startTimer = 1 ;
11969: LD_ADDR_EXP 30
11973: PUSH
11974: LD_INT 1
11976: ST_TO_ADDR
// harrAnswer = 1 ;
11977: LD_ADDR_EXP 26
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
// end ; 2 :
11985: GO 12122
11987: LD_INT 2
11989: DOUBLE
11990: EQUAL
11991: IFTRUE 11995
11993: GO 12054
11995: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11996: LD_EXP 1
12000: PPUSH
12001: LD_STRING D5-JMM-2
12003: PPUSH
12004: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
12008: LD_EXP 14
12012: PPUSH
12013: LD_STRING D5-Har-2
12015: PPUSH
12016: CALL_OW 94
// timeToSupport = 5 5$0 ;
12020: LD_ADDR_EXP 28
12024: PUSH
12025: LD_INT 10500
12027: ST_TO_ADDR
// timerStatus = 2 ;
12028: LD_ADDR_EXP 29
12032: PUSH
12033: LD_INT 2
12035: ST_TO_ADDR
// startTimer = 1 ;
12036: LD_ADDR_EXP 30
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// harrAnswer = 2 ;
12044: LD_ADDR_EXP 26
12048: PUSH
12049: LD_INT 2
12051: ST_TO_ADDR
// end ; 3 :
12052: GO 12122
12054: LD_INT 3
12056: DOUBLE
12057: EQUAL
12058: IFTRUE 12062
12060: GO 12121
12062: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12063: LD_EXP 1
12067: PPUSH
12068: LD_STRING D5-JMM-3
12070: PPUSH
12071: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12075: LD_EXP 14
12079: PPUSH
12080: LD_STRING D5-Har-3
12082: PPUSH
12083: CALL_OW 94
// timeToSupport = 5 5$0 ;
12087: LD_ADDR_EXP 28
12091: PUSH
12092: LD_INT 10500
12094: ST_TO_ADDR
// timerStatus = 2 ;
12095: LD_ADDR_EXP 29
12099: PUSH
12100: LD_INT 2
12102: ST_TO_ADDR
// startTimer = 1 ;
12103: LD_ADDR_EXP 30
12107: PUSH
12108: LD_INT 1
12110: ST_TO_ADDR
// harrAnswer = 3 ;
12111: LD_ADDR_EXP 26
12115: PUSH
12116: LD_INT 3
12118: ST_TO_ADDR
// end ; end ;
12119: GO 12122
12121: POP
// end ;
12122: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12123: LD_EXP 29
12127: PUSH
12128: LD_INT 2
12130: EQUAL
12131: PUSH
12132: LD_EXP 28
12136: PUSH
12137: LD_INT 0
12139: EQUAL
12140: AND
12141: IFFALSE 12430
12143: GO 12145
12145: DISABLE
// begin timerStatus = 4 ;
12146: LD_ADDR_EXP 29
12150: PUSH
12151: LD_INT 4
12153: ST_TO_ADDR
// if harrAnswer = 1 then
12154: LD_EXP 26
12158: PUSH
12159: LD_INT 1
12161: EQUAL
12162: IFFALSE 12246
// begin PrepareHarrisonSupport ( 3 ) ;
12164: LD_INT 3
12166: PPUSH
12167: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12171: LD_INT 2100
12173: PPUSH
12174: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12178: LD_EXP 14
12182: PPUSH
12183: LD_STRING D7-Har-1
12185: PPUSH
12186: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12190: LD_STRING M2
12192: PPUSH
12193: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12197: LD_ADDR_EXP 27
12201: PUSH
12202: LD_INT 31500
12204: PUSH
12205: LD_INT 10500
12207: PUSH
12208: LD_INT 8400
12210: PUSH
12211: LD_INT 6300
12213: PUSH
12214: LD_INT 6300
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: PUSH
12223: LD_OWVAR 67
12227: ARRAY
12228: PLUS
12229: ST_TO_ADDR
// startTimer = 1 ;
12230: LD_ADDR_EXP 30
12234: PUSH
12235: LD_INT 1
12237: ST_TO_ADDR
// timerStatus = 3 ;
12238: LD_ADDR_EXP 29
12242: PUSH
12243: LD_INT 3
12245: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12246: LD_EXP 26
12250: PUSH
12251: LD_INT 2
12253: EQUAL
12254: IFFALSE 12338
// begin PrepareHarrisonSupport ( 4 ) ;
12256: LD_INT 4
12258: PPUSH
12259: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12263: LD_INT 2100
12265: PPUSH
12266: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12270: LD_EXP 14
12274: PPUSH
12275: LD_STRING D7-Har-1
12277: PPUSH
12278: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12282: LD_STRING M2
12284: PPUSH
12285: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12289: LD_ADDR_EXP 27
12293: PUSH
12294: LD_INT 33600
12296: PUSH
12297: LD_INT 10500
12299: PUSH
12300: LD_INT 8400
12302: PUSH
12303: LD_INT 6300
12305: PUSH
12306: LD_INT 5250
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: PUSH
12315: LD_OWVAR 67
12319: ARRAY
12320: PLUS
12321: ST_TO_ADDR
// startTimer = 1 ;
12322: LD_ADDR_EXP 30
12326: PUSH
12327: LD_INT 1
12329: ST_TO_ADDR
// timerStatus = 3 ;
12330: LD_ADDR_EXP 29
12334: PUSH
12335: LD_INT 3
12337: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12338: LD_EXP 26
12342: PUSH
12343: LD_INT 3
12345: EQUAL
12346: IFFALSE 12430
// begin PrepareHarrisonSupport ( 5 ) ;
12348: LD_INT 5
12350: PPUSH
12351: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12355: LD_INT 2100
12357: PPUSH
12358: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12362: LD_EXP 14
12366: PPUSH
12367: LD_STRING D7-Har-1
12369: PPUSH
12370: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12374: LD_STRING M2
12376: PPUSH
12377: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12381: LD_ADDR_EXP 27
12385: PUSH
12386: LD_INT 35700
12388: PUSH
12389: LD_INT 10500
12391: PUSH
12392: LD_INT 6300
12394: PUSH
12395: LD_INT 4200
12397: PUSH
12398: LD_INT 3150
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: PUSH
12407: LD_OWVAR 67
12411: ARRAY
12412: PLUS
12413: ST_TO_ADDR
// startTimer = 1 ;
12414: LD_ADDR_EXP 30
12418: PUSH
12419: LD_INT 1
12421: ST_TO_ADDR
// timerStatus = 3 ;
12422: LD_ADDR_EXP 29
12426: PUSH
12427: LD_INT 3
12429: ST_TO_ADDR
// end ; end ;
12430: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12431: LD_EXP 27
12435: PUSH
12436: LD_INT 8400
12438: LESSEQUAL
12439: PUSH
12440: LD_EXP 29
12444: PUSH
12445: LD_INT 3
12447: EQUAL
12448: AND
12449: IFFALSE 12481
12451: GO 12453
12453: DISABLE
// begin DialogueOn ;
12454: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12458: LD_EXP 14
12462: PPUSH
12463: LD_STRING D7a-Har-1
12465: PPUSH
12466: CALL_OW 94
// DialogueOff ;
12470: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12474: LD_STRING M2a
12476: PPUSH
12477: CALL_OW 337
// end ;
12481: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12482: LD_EXP 27
12486: PUSH
12487: LD_INT 0
12489: LESSEQUAL
12490: PUSH
12491: LD_EXP 29
12495: PUSH
12496: LD_INT 3
12498: EQUAL
12499: AND
12500: PUSH
12501: LD_EXP 40
12505: NOT
12506: AND
12507: IFFALSE 12646
12509: GO 12511
12511: DISABLE
12512: LD_INT 0
12514: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12515: LD_ADDR_VAR 0 1
12519: PUSH
12520: LD_INT 22
12522: PUSH
12523: LD_INT 1
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PPUSH
12530: CALL_OW 69
12534: PUSH
12535: LD_EXP 1
12539: PUSH
12540: EMPTY
12541: LIST
12542: DIFF
12543: ST_TO_ADDR
// saveDonaldson = 2 ;
12544: LD_ADDR_EXP 24
12548: PUSH
12549: LD_INT 2
12551: ST_TO_ADDR
// DialogueOn ;
12552: CALL_OW 6
// if IsOk ( Donaldson ) then
12556: LD_EXP 13
12560: PPUSH
12561: CALL_OW 302
12565: IFFALSE 12581
// SayRadio ( Harisson , D8-Har-1 ) else
12567: LD_EXP 14
12571: PPUSH
12572: LD_STRING D8-Har-1
12574: PPUSH
12575: CALL_OW 94
12579: GO 12593
// SayRadio ( Harisson , D8-Har-1a ) ;
12581: LD_EXP 14
12585: PPUSH
12586: LD_STRING D8-Har-1a
12588: PPUSH
12589: CALL_OW 94
// DialogueOff ;
12593: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12597: LD_VAR 0 1
12601: PPUSH
12602: LD_INT 4
12604: PPUSH
12605: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12609: LD_VAR 0 1
12613: PPUSH
12614: LD_INT 88
12616: PPUSH
12617: LD_INT 89
12619: PPUSH
12620: CALL_OW 114
// honor = 0 ;
12624: LD_ADDR_EXP 39
12628: PUSH
12629: LD_INT 0
12631: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12632: LD_INT 350
12634: PPUSH
12635: CALL_OW 67
// YouLost ( LostCommand ) ;
12639: LD_STRING LostCommand
12641: PPUSH
12642: CALL_OW 104
// end ;
12646: PPOPN 1
12648: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12649: LD_INT 22
12651: PUSH
12652: LD_INT 6
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 21
12661: PUSH
12662: LD_INT 1
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PPUSH
12673: CALL_OW 69
12677: PUSH
12678: LD_INT 0
12680: EQUAL
12681: PUSH
12682: LD_EXP 20
12686: PUSH
12687: LD_INT 0
12689: EQUAL
12690: AND
12691: PUSH
12692: LD_EXP 44
12696: PUSH
12697: LD_INT 1
12699: EQUAL
12700: AND
12701: IFFALSE 12795
12703: GO 12705
12705: DISABLE
12706: LD_INT 0
12708: PPUSH
12709: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12710: LD_ADDR_VAR 0 2
12714: PUSH
12715: LD_INT 22
12717: PUSH
12718: LD_INT 1
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 21
12727: PUSH
12728: LD_INT 1
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: LD_INT 23
12737: PUSH
12738: LD_INT 1
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: LIST
12749: PPUSH
12750: CALL_OW 69
12754: ST_TO_ADDR
// for i in tmp do
12755: LD_ADDR_VAR 0 1
12759: PUSH
12760: LD_VAR 0 2
12764: PUSH
12765: FOR_IN
12766: IFFALSE 12793
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12768: LD_VAR 0 1
12772: PPUSH
12773: LD_INT 1
12775: PPUSH
12776: LD_INT 4
12778: PPUSH
12779: CALL_OW 12
12783: PPUSH
12784: LD_INT 500
12786: PPUSH
12787: CALL_OW 492
12791: GO 12765
12793: POP
12794: POP
// end ; end_of_file
12795: PPOPN 2
12797: END
// every 0 0$1 trigger AIEnable do
12798: LD_EXP 37
12802: IFFALSE 12896
12804: GO 12806
12806: DISABLE
// begin enable ;
12807: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12808: LD_INT 3
12810: PPUSH
12811: LD_INT 21
12813: PPUSH
12814: LD_INT 7
12816: PPUSH
12817: CALL 6030 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12821: LD_INT 3
12823: PPUSH
12824: LD_INT 8
12826: PPUSH
12827: LD_INT 7
12829: PPUSH
12830: LD_INT 1
12832: PPUSH
12833: CALL 6334 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12837: LD_EXP 20
12841: PUSH
12842: LD_INT 2
12844: EQUAL
12845: PUSH
12846: LD_INT 22
12848: PUSH
12849: LD_INT 6
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PPUSH
12856: CALL_OW 69
12860: AND
12861: IFFALSE 12896
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12863: LD_INT 6
12865: PPUSH
12866: LD_EXP 21
12870: PPUSH
12871: LD_INT 6
12873: PPUSH
12874: CALL 6030 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12878: LD_INT 6
12880: PPUSH
12881: LD_INT 9
12883: PPUSH
12884: LD_INT 6
12886: PPUSH
12887: LD_EXP 22
12891: PPUSH
12892: CALL 6334 0 4
// end ; end ;
12896: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12897: LD_EXP 15
12901: PPUSH
12902: CALL_OW 310
12906: NOT
12907: PUSH
12908: LD_INT 21
12910: PPUSH
12911: CALL_OW 302
12915: AND
12916: PUSH
12917: LD_INT 21
12919: PPUSH
12920: CALL_OW 255
12924: PUSH
12925: LD_INT 3
12927: EQUAL
12928: AND
12929: IFFALSE 12946
12931: GO 12933
12933: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12934: LD_EXP 15
12938: PPUSH
12939: LD_INT 21
12941: PPUSH
12942: CALL_OW 120
12946: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12947: LD_INT 22
12949: PUSH
12950: LD_INT 3
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PUSH
12957: LD_INT 21
12959: PUSH
12960: LD_INT 2
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PUSH
12967: LD_INT 55
12969: PUSH
12970: EMPTY
12971: LIST
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: LIST
12977: PPUSH
12978: CALL_OW 69
12982: PUSH
12983: LD_INT 0
12985: EQUAL
12986: PUSH
12987: LD_INT 1
12989: PPUSH
12990: CALL_OW 255
12994: PUSH
12995: LD_INT 3
12997: EQUAL
12998: AND
12999: PUSH
13000: LD_INT 21
13002: PPUSH
13003: CALL_OW 302
13007: AND
13008: PUSH
13009: LD_INT 21
13011: PPUSH
13012: CALL_OW 255
13016: PUSH
13017: LD_INT 3
13019: EQUAL
13020: AND
13021: PUSH
13022: LD_INT 21
13024: PPUSH
13025: CALL_OW 302
13029: AND
13030: IFFALSE 13242
13032: GO 13034
13034: DISABLE
// begin enable ;
13035: ENABLE
// if Difficulty = 1 then
13036: LD_OWVAR 67
13040: PUSH
13041: LD_INT 1
13043: EQUAL
13044: IFFALSE 13088
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
13046: LD_INT 3
13048: PPUSH
13049: LD_INT 24
13051: PPUSH
13052: LD_OWVAR 67
13056: PUSH
13057: LD_INT 2
13059: PLUS
13060: PPUSH
13061: LD_INT 42
13063: PUSH
13064: LD_INT 44
13066: PUSH
13067: LD_INT 43
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: PPUSH
13075: LD_INT 1
13077: PPUSH
13078: LD_INT 1
13080: PPUSH
13081: LD_INT 21
13083: PPUSH
13084: CALL 6848 0 7
// if Difficulty = 2 then
13088: LD_OWVAR 67
13092: PUSH
13093: LD_INT 2
13095: EQUAL
13096: IFFALSE 13163
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13098: LD_INT 3
13100: PPUSH
13101: LD_INT 24
13103: PPUSH
13104: LD_OWVAR 67
13108: PUSH
13109: LD_INT 2
13111: PLUS
13112: PPUSH
13113: LD_INT 44
13115: PUSH
13116: LD_INT 44
13118: PUSH
13119: LD_INT 43
13121: PUSH
13122: LD_INT 43
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: PPUSH
13131: LD_INT 1
13133: PPUSH
13134: LD_INT 1
13136: PPUSH
13137: LD_INT 21
13139: PUSH
13140: LD_INT 22
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 1
13149: PPUSH
13150: LD_INT 2
13152: PPUSH
13153: CALL_OW 12
13157: ARRAY
13158: PPUSH
13159: CALL 6848 0 7
// if Difficulty >= 3 then
13163: LD_OWVAR 67
13167: PUSH
13168: LD_INT 3
13170: GREATEREQUAL
13171: IFFALSE 13242
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13173: LD_INT 3
13175: PPUSH
13176: LD_INT 24
13178: PPUSH
13179: LD_OWVAR 67
13183: PUSH
13184: LD_INT 2
13186: PPUSH
13187: LD_INT 3
13189: PPUSH
13190: CALL_OW 12
13194: PLUS
13195: PPUSH
13196: LD_INT 44
13198: PUSH
13199: LD_INT 44
13201: PUSH
13202: LD_INT 43
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: LIST
13209: PPUSH
13210: LD_INT 1
13212: PPUSH
13213: LD_INT 1
13215: PPUSH
13216: LD_INT 22
13218: PUSH
13219: LD_INT 23
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 1
13228: PPUSH
13229: LD_INT 2
13231: PPUSH
13232: CALL_OW 12
13236: ARRAY
13237: PPUSH
13238: CALL 6848 0 7
// end ;
13242: END
// every 0 0$1 do
13243: GO 13245
13245: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13246: LD_INT 3
13248: PPUSH
13249: LD_INT 1
13251: PPUSH
13252: LD_INT 3
13254: PPUSH
13255: CALL 5951 0 3
13259: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13260: LD_EXP 20
13264: PUSH
13265: LD_INT 1
13267: EQUAL
13268: IFFALSE 13415
13270: GO 13272
13272: DISABLE
13273: LD_INT 0
13275: PPUSH
13276: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13277: LD_ADDR_VAR 0 2
13281: PUSH
13282: LD_INT 22
13284: PUSH
13285: LD_INT 6
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 21
13294: PUSH
13295: LD_INT 2
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 34
13304: PUSH
13305: LD_INT 51
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: LIST
13316: PPUSH
13317: CALL_OW 69
13321: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13322: LD_VAR 0 2
13326: PUSH
13327: LD_INT 1
13329: ARRAY
13330: PPUSH
13331: LD_EXP 21
13335: PPUSH
13336: CALL_OW 250
13340: PUSH
13341: LD_INT 5
13343: MINUS
13344: PPUSH
13345: LD_EXP 21
13349: PPUSH
13350: CALL_OW 251
13354: PUSH
13355: LD_INT 5
13357: MINUS
13358: PPUSH
13359: CALL_OW 111
// wait ( 0 0$5 ) ;
13363: LD_INT 175
13365: PPUSH
13366: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13370: LD_VAR 0 2
13374: PUSH
13375: LD_INT 1
13377: ARRAY
13378: PPUSH
13379: LD_INT 41
13381: PPUSH
13382: LD_INT 52
13384: PPUSH
13385: CALL_OW 177
// wait ( 0 0$40 ) ;
13389: LD_INT 1400
13391: PPUSH
13392: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13396: LD_VAR 0 2
13400: PUSH
13401: LD_INT 1
13403: ARRAY
13404: PPUSH
13405: LD_INT 41
13407: PPUSH
13408: LD_INT 44
13410: PPUSH
13411: CALL_OW 111
// end ;
13415: PPOPN 2
13417: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13418: LD_EXP 21
13422: PPUSH
13423: CALL_OW 274
13427: PPUSH
13428: LD_INT 1
13430: PPUSH
13431: CALL_OW 275
13435: PUSH
13436: LD_INT 100
13438: GREATEREQUAL
13439: IFFALSE 13667
13441: GO 13443
13443: DISABLE
13444: LD_INT 0
13446: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13447: LD_ADDR_VAR 0 1
13451: PUSH
13452: LD_INT 22
13454: PUSH
13455: LD_INT 6
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PUSH
13462: LD_INT 21
13464: PUSH
13465: LD_INT 1
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PUSH
13472: LD_INT 25
13474: PUSH
13475: LD_INT 2
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: LIST
13486: PPUSH
13487: CALL_OW 69
13491: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13492: LD_VAR 0 1
13496: PUSH
13497: LD_INT 1
13499: ARRAY
13500: PPUSH
13501: LD_INT 4
13503: PPUSH
13504: LD_INT 39
13506: PPUSH
13507: LD_INT 37
13509: PPUSH
13510: LD_INT 3
13512: PPUSH
13513: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13517: LD_VAR 0 1
13521: PUSH
13522: LD_INT 1
13524: ARRAY
13525: PPUSH
13526: LD_INT 29
13528: PPUSH
13529: LD_INT 42
13531: PPUSH
13532: LD_INT 54
13534: PPUSH
13535: LD_INT 3
13537: PPUSH
13538: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13542: LD_VAR 0 1
13546: PUSH
13547: LD_INT 1
13549: ARRAY
13550: PPUSH
13551: LD_INT 6
13553: PPUSH
13554: LD_INT 38
13556: PPUSH
13557: LD_INT 48
13559: PPUSH
13560: LD_INT 0
13562: PPUSH
13563: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13567: LD_VAR 0 1
13571: PUSH
13572: LD_INT 1
13574: ARRAY
13575: PPUSH
13576: LD_INT 2
13578: PPUSH
13579: LD_INT 32
13581: PPUSH
13582: LD_INT 38
13584: PPUSH
13585: LD_INT 2
13587: PPUSH
13588: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13592: LD_VAR 0 1
13596: PUSH
13597: LD_INT 1
13599: ARRAY
13600: PPUSH
13601: LD_INT 26
13603: PPUSH
13604: LD_INT 39
13606: PPUSH
13607: LD_INT 55
13609: PPUSH
13610: LD_INT 3
13612: PPUSH
13613: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13617: LD_VAR 0 1
13621: PUSH
13622: LD_INT 1
13624: ARRAY
13625: PPUSH
13626: LD_INT 32
13628: PPUSH
13629: LD_INT 31
13631: PPUSH
13632: LD_INT 31
13634: PPUSH
13635: LD_INT 3
13637: PPUSH
13638: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13642: LD_VAR 0 1
13646: PUSH
13647: LD_INT 1
13649: ARRAY
13650: PPUSH
13651: LD_INT 31
13653: PPUSH
13654: LD_INT 50
13656: PPUSH
13657: LD_INT 51
13659: PPUSH
13660: LD_INT 4
13662: PPUSH
13663: CALL_OW 205
// end ;
13667: PPOPN 1
13669: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13670: LD_EXP 46
13674: IFFALSE 14239
13676: GO 13678
13678: DISABLE
13679: LD_INT 0
13681: PPUSH
13682: PPUSH
13683: PPUSH
// begin enable ;
13684: ENABLE
// if not ruMobile then
13685: LD_EXP 46
13689: NOT
13690: IFFALSE 13694
// exit ;
13692: GO 14239
// for i in ruMobile do
13694: LD_ADDR_VAR 0 1
13698: PUSH
13699: LD_EXP 46
13703: PUSH
13704: FOR_IN
13705: IFFALSE 14237
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13707: LD_VAR 0 1
13711: PPUSH
13712: CALL_OW 302
13716: NOT
13717: PUSH
13718: LD_VAR 0 1
13722: PPUSH
13723: CALL_OW 255
13727: PUSH
13728: LD_INT 3
13730: NONEQUAL
13731: OR
13732: IFFALSE 13752
// begin ruMobile := ruMobile diff i ;
13734: LD_ADDR_EXP 46
13738: PUSH
13739: LD_EXP 46
13743: PUSH
13744: LD_VAR 0 1
13748: DIFF
13749: ST_TO_ADDR
// continue ;
13750: GO 13704
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13752: LD_VAR 0 1
13756: PPUSH
13757: CALL_OW 110
13761: NOT
13762: PUSH
13763: LD_VAR 0 1
13767: PPUSH
13768: CALL_OW 110
13772: PUSH
13773: LD_INT 0
13775: EQUAL
13776: OR
13777: IFFALSE 13892
// begin if GetFuel ( i ) < 50 then
13779: LD_VAR 0 1
13783: PPUSH
13784: CALL_OW 261
13788: PUSH
13789: LD_INT 50
13791: LESS
13792: IFFALSE 13851
// begin ComMoveXY ( i , 106 , 88 ) ;
13794: LD_VAR 0 1
13798: PPUSH
13799: LD_INT 106
13801: PPUSH
13802: LD_INT 88
13804: PPUSH
13805: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13809: LD_INT 35
13811: PPUSH
13812: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13816: LD_VAR 0 1
13820: PPUSH
13821: LD_INT 106
13823: PPUSH
13824: LD_INT 88
13826: PPUSH
13827: CALL_OW 297
13831: PUSH
13832: LD_INT 4
13834: LESS
13835: IFFALSE 13809
// SetFuel ( i , 100 ) ;
13837: LD_VAR 0 1
13841: PPUSH
13842: LD_INT 100
13844: PPUSH
13845: CALL_OW 240
// end else
13849: GO 13892
// if not IsInArea ( i , ruParking ) then
13851: LD_VAR 0 1
13855: PPUSH
13856: LD_INT 25
13858: PPUSH
13859: CALL_OW 308
13863: NOT
13864: IFFALSE 13880
// ComMoveToArea ( i , ruParking ) else
13866: LD_VAR 0 1
13870: PPUSH
13871: LD_INT 25
13873: PPUSH
13874: CALL_OW 113
13878: GO 13892
// SetTag ( i , 1 ) ;
13880: LD_VAR 0 1
13884: PPUSH
13885: LD_INT 1
13887: PPUSH
13888: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13892: LD_VAR 0 1
13896: PPUSH
13897: CALL_OW 110
13901: PUSH
13902: LD_INT 1
13904: EQUAL
13905: IFFALSE 14035
// begin if GetLives ( i ) < 650 then
13907: LD_VAR 0 1
13911: PPUSH
13912: CALL_OW 256
13916: PUSH
13917: LD_INT 650
13919: LESS
13920: IFFALSE 14012
// begin if not IsDrivenBy ( i ) then
13922: LD_VAR 0 1
13926: PPUSH
13927: CALL_OW 311
13931: NOT
13932: IFFALSE 13936
// continue ;
13934: GO 13704
// mech := IsDrivenBy ( i ) ;
13936: LD_ADDR_VAR 0 2
13940: PUSH
13941: LD_VAR 0 1
13945: PPUSH
13946: CALL_OW 311
13950: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13951: LD_VAR 0 2
13955: PPUSH
13956: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13960: LD_VAR 0 2
13964: PPUSH
13965: LD_VAR 0 1
13969: PPUSH
13970: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13974: LD_INT 35
13976: PPUSH
13977: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13981: LD_VAR 0 1
13985: PPUSH
13986: CALL_OW 256
13990: PUSH
13991: LD_INT 1000
13993: EQUAL
13994: IFFALSE 13974
// ComEnterUnit ( mech , i ) ;
13996: LD_VAR 0 2
14000: PPUSH
14001: LD_VAR 0 1
14005: PPUSH
14006: CALL_OW 120
// end else
14010: GO 14035
// if IsDrivenBy ( i ) then
14012: LD_VAR 0 1
14016: PPUSH
14017: CALL_OW 311
14021: IFFALSE 14035
// SetTag ( i , 2 ) ;
14023: LD_VAR 0 1
14027: PPUSH
14028: LD_INT 2
14030: PPUSH
14031: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
14035: LD_VAR 0 1
14039: PPUSH
14040: CALL_OW 110
14044: PUSH
14045: LD_INT 2
14047: EQUAL
14048: IFFALSE 14235
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14050: LD_ADDR_VAR 0 3
14054: PUSH
14055: LD_INT 24
14057: PPUSH
14058: LD_INT 81
14060: PUSH
14061: LD_INT 3
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PPUSH
14068: CALL_OW 70
14072: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14073: LD_VAR 0 1
14077: PPUSH
14078: CALL_OW 256
14082: PUSH
14083: LD_INT 650
14085: LESS
14086: IFFALSE 14111
// begin ComStop ( i ) ;
14088: LD_VAR 0 1
14092: PPUSH
14093: CALL_OW 141
// SetTag ( i , 0 ) ;
14097: LD_VAR 0 1
14101: PPUSH
14102: LD_INT 0
14104: PPUSH
14105: CALL_OW 109
// continue ;
14109: GO 13704
// end ; if enemy then
14111: LD_VAR 0 3
14115: IFFALSE 14155
// begin if not HasTask ( i ) then
14117: LD_VAR 0 1
14121: PPUSH
14122: CALL_OW 314
14126: NOT
14127: IFFALSE 14153
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14129: LD_VAR 0 1
14133: PPUSH
14134: LD_VAR 0 3
14138: PPUSH
14139: LD_VAR 0 1
14143: PPUSH
14144: CALL_OW 74
14148: PPUSH
14149: CALL_OW 115
// end else
14153: GO 14235
// if ruMobile > 2 then
14155: LD_EXP 46
14159: PUSH
14160: LD_INT 2
14162: GREATER
14163: IFFALSE 14235
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14165: LD_ADDR_VAR 0 3
14169: PUSH
14170: LD_INT 81
14172: PUSH
14173: LD_INT 3
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PPUSH
14180: CALL_OW 69
14184: ST_TO_ADDR
// if enemy then
14185: LD_VAR 0 3
14189: IFFALSE 14235
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
14191: LD_VAR 0 1
14195: PPUSH
14196: LD_INT 95
14198: PUSH
14199: LD_INT 74
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PUSH
14206: LD_INT 67
14208: PUSH
14209: LD_INT 59
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PUSH
14216: LD_INT 55
14218: PUSH
14219: LD_INT 41
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: LIST
14230: PPUSH
14231: CALL 80983 0 2
// end ; end ; end ;
14235: GO 13704
14237: POP
14238: POP
// end ; end_of_file
14239: PPOPN 3
14241: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14242: LD_INT 0
14244: PPUSH
14245: PPUSH
14246: PPUSH
14247: PPUSH
14248: PPUSH
14249: PPUSH
14250: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14251: LD_ADDR_VAR 0 3
14255: PUSH
14256: LD_INT 22
14258: PUSH
14259: LD_INT 6
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: LD_INT 21
14268: PUSH
14269: LD_INT 1
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: LD_INT 25
14278: PUSH
14279: LD_INT 1
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 3
14288: PUSH
14289: LD_INT 54
14291: PUSH
14292: EMPTY
14293: LIST
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: PPUSH
14305: CALL_OW 69
14309: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14310: LD_ADDR_VAR 0 7
14314: PUSH
14315: LD_INT 22
14317: PUSH
14318: LD_INT 6
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 21
14327: PUSH
14328: LD_INT 1
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: LD_INT 25
14337: PUSH
14338: LD_INT 1
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 54
14347: PUSH
14348: EMPTY
14349: LIST
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: PPUSH
14357: CALL_OW 69
14361: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14362: LD_ADDR_VAR 0 4
14366: PUSH
14367: LD_INT 22
14369: PUSH
14370: LD_INT 6
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: LD_INT 21
14379: PUSH
14380: LD_INT 1
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PUSH
14387: LD_INT 25
14389: PUSH
14390: LD_INT 2
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: LIST
14401: PPUSH
14402: CALL_OW 69
14406: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14407: LD_ADDR_VAR 0 6
14411: PUSH
14412: LD_INT 22
14414: PUSH
14415: LD_INT 6
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: LD_INT 21
14424: PUSH
14425: LD_INT 1
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 25
14434: PUSH
14435: LD_INT 4
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: LIST
14446: PPUSH
14447: CALL_OW 69
14451: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14452: LD_ADDR_VAR 0 8
14456: PUSH
14457: LD_INT 22
14459: PUSH
14460: LD_INT 6
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: LD_INT 21
14469: PUSH
14470: LD_INT 2
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PUSH
14477: LD_INT 34
14479: PUSH
14480: LD_INT 51
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: LIST
14491: PPUSH
14492: CALL_OW 69
14496: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14497: LD_VAR 0 1
14501: PPUSH
14502: CALL_OW 255
14506: PUSH
14507: LD_INT 6
14509: EQUAL
14510: PUSH
14511: LD_VAR 0 1
14515: PPUSH
14516: CALL_OW 266
14520: PUSH
14521: LD_INT 0
14523: EQUAL
14524: AND
14525: IFFALSE 14545
// begin ruPDepot = building ;
14527: LD_ADDR_EXP 21
14531: PUSH
14532: LD_VAR 0 1
14536: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14537: LD_ADDR_EXP 20
14541: PUSH
14542: LD_INT 1
14544: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14545: LD_VAR 0 1
14549: PPUSH
14550: CALL_OW 266
14554: PUSH
14555: LD_INT 4
14557: EQUAL
14558: PUSH
14559: LD_VAR 0 1
14563: PPUSH
14564: CALL_OW 255
14568: PUSH
14569: LD_INT 6
14571: EQUAL
14572: AND
14573: IFFALSE 14606
// for i in tmpSold do
14575: LD_ADDR_VAR 0 2
14579: PUSH
14580: LD_VAR 0 3
14584: PUSH
14585: FOR_IN
14586: IFFALSE 14604
// ComEnterUnit ( i , building ) ;
14588: LD_VAR 0 2
14592: PPUSH
14593: LD_VAR 0 1
14597: PPUSH
14598: CALL_OW 120
14602: GO 14585
14604: POP
14605: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14606: LD_VAR 0 1
14610: PPUSH
14611: CALL_OW 266
14615: PUSH
14616: LD_INT 6
14618: EQUAL
14619: PUSH
14620: LD_VAR 0 1
14624: PPUSH
14625: CALL_OW 255
14629: PUSH
14630: LD_INT 6
14632: EQUAL
14633: AND
14634: IFFALSE 14692
// begin for i in tmpSci do
14636: LD_ADDR_VAR 0 2
14640: PUSH
14641: LD_VAR 0 6
14645: PUSH
14646: FOR_IN
14647: IFFALSE 14665
// ComEnterUnit ( i , building ) ;
14649: LD_VAR 0 2
14653: PPUSH
14654: LD_VAR 0 1
14658: PPUSH
14659: CALL_OW 120
14663: GO 14646
14665: POP
14666: POP
// ResAllTechs ( 6 , building , 3 ) ;
14667: LD_INT 6
14669: PPUSH
14670: LD_VAR 0 1
14674: PPUSH
14675: LD_INT 3
14677: PPUSH
14678: CALL 5951 0 3
// ruPLab = building ;
14682: LD_ADDR_EXP 22
14686: PUSH
14687: LD_VAR 0 1
14691: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14692: LD_VAR 0 1
14696: PPUSH
14697: CALL_OW 266
14701: PUSH
14702: LD_INT 2
14704: EQUAL
14705: PUSH
14706: LD_VAR 0 1
14710: PPUSH
14711: CALL_OW 255
14715: PUSH
14716: LD_INT 6
14718: EQUAL
14719: AND
14720: IFFALSE 14771
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14722: LD_ADDR_VAR 0 5
14726: PUSH
14727: LD_VAR 0 8
14731: PUSH
14732: LD_INT 1
14734: ARRAY
14735: PPUSH
14736: CALL_OW 313
14740: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14741: LD_VAR 0 5
14745: PPUSH
14746: CALL_OW 121
// wait ( 0 0$1 ) ;
14750: LD_INT 35
14752: PPUSH
14753: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14757: LD_VAR 0 5
14761: PPUSH
14762: LD_VAR 0 1
14766: PPUSH
14767: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14771: LD_VAR 0 1
14775: PPUSH
14776: CALL_OW 266
14780: PUSH
14781: LD_INT 32
14783: EQUAL
14784: PUSH
14785: LD_VAR 0 1
14789: PPUSH
14790: CALL_OW 255
14794: PUSH
14795: LD_INT 6
14797: EQUAL
14798: AND
14799: IFFALSE 14851
// begin ComPlaceWeapon ( building , 42 ) ;
14801: LD_VAR 0 1
14805: PPUSH
14806: LD_INT 42
14808: PPUSH
14809: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14813: LD_VAR 0 7
14817: PUSH
14818: LD_INT 1
14820: ARRAY
14821: PPUSH
14822: CALL_OW 122
// wait ( 0 0$1 ) ;
14826: LD_INT 35
14828: PPUSH
14829: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14833: LD_VAR 0 7
14837: PUSH
14838: LD_INT 1
14840: ARRAY
14841: PPUSH
14842: LD_VAR 0 1
14846: PPUSH
14847: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14851: LD_VAR 0 1
14855: PPUSH
14856: CALL_OW 266
14860: PUSH
14861: LD_INT 31
14863: EQUAL
14864: PUSH
14865: LD_VAR 0 1
14869: PPUSH
14870: CALL_OW 255
14874: PUSH
14875: LD_INT 6
14877: EQUAL
14878: AND
14879: IFFALSE 14945
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14881: LD_VAR 0 7
14885: PUSH
14886: LD_INT 2
14888: ARRAY
14889: PPUSH
14890: CALL_OW 122
// wait ( 0 0$1 ) ;
14894: LD_INT 35
14896: PPUSH
14897: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14901: LD_VAR 0 7
14905: PUSH
14906: LD_INT 2
14908: ARRAY
14909: PPUSH
14910: LD_VAR 0 1
14914: PPUSH
14915: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14919: LD_VAR 0 4
14923: PUSH
14924: LD_INT 1
14926: ARRAY
14927: PPUSH
14928: LD_EXP 21
14932: PPUSH
14933: CALL_OW 120
// baseReadyToBuild = 2 ;
14937: LD_ADDR_EXP 20
14941: PUSH
14942: LD_INT 2
14944: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14945: LD_VAR 0 1
14949: PPUSH
14950: CALL_OW 266
14954: PUSH
14955: LD_INT 32
14957: EQUAL
14958: PUSH
14959: LD_VAR 0 1
14963: PPUSH
14964: CALL_OW 255
14968: PUSH
14969: LD_INT 1
14971: EQUAL
14972: AND
14973: PUSH
14974: LD_EXP 32
14978: PUSH
14979: LD_INT 0
14981: EQUAL
14982: AND
14983: IFFALSE 15228
// begin bunkerDialog = 1 ;
14985: LD_ADDR_EXP 32
14989: PUSH
14990: LD_INT 1
14992: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14993: LD_EXP 11
14997: PPUSH
14998: CALL_OW 302
15002: IFFALSE 15018
// Say ( Claptopn , D11-Eng1-1 ) else
15004: LD_EXP 11
15008: PPUSH
15009: LD_STRING D11-Eng1-1
15011: PPUSH
15012: CALL_OW 88
15016: GO 15214
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15018: LD_INT 22
15020: PUSH
15021: LD_INT 1
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: LD_INT 21
15030: PUSH
15031: LD_INT 1
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 25
15040: PUSH
15041: LD_INT 3
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: LD_INT 26
15050: PUSH
15051: LD_INT 1
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: PPUSH
15064: CALL_OW 69
15068: PUSH
15069: LD_EXP 1
15073: PUSH
15074: EMPTY
15075: LIST
15076: PUSH
15077: LD_INT 0
15079: GREATER
15080: DIFF
15081: IFFALSE 15155
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15083: LD_INT 22
15085: PUSH
15086: LD_INT 1
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 21
15095: PUSH
15096: LD_INT 1
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: LD_INT 25
15105: PUSH
15106: LD_INT 2
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: LD_INT 26
15115: PUSH
15116: LD_INT 1
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: PPUSH
15129: CALL_OW 69
15133: PUSH
15134: LD_EXP 1
15138: PUSH
15139: EMPTY
15140: LIST
15141: DIFF
15142: PPUSH
15143: LD_STRING D11-Eng1-1
15145: PPUSH
15146: LD_STRING D11-Eng1-1
15148: PPUSH
15149: CALL 4598 0 3
15153: GO 15214
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15155: LD_INT 22
15157: PUSH
15158: LD_INT 1
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 21
15167: PUSH
15168: LD_INT 1
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: LD_INT 26
15177: PUSH
15178: LD_INT 1
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: LIST
15189: PPUSH
15190: CALL_OW 69
15194: PUSH
15195: LD_EXP 1
15199: PUSH
15200: EMPTY
15201: LIST
15202: DIFF
15203: PPUSH
15204: LD_STRING D11-Eng1-1
15206: PPUSH
15207: LD_STRING D11-Eng1-1
15209: PPUSH
15210: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15214: LD_EXP 33
15218: PUSH
15219: LD_INT 0
15221: EQUAL
15222: IFFALSE 15228
// EnergyDialog ;
15224: CALL 5003 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15228: LD_VAR 0 1
15232: PPUSH
15233: CALL_OW 266
15237: PUSH
15238: LD_INT 29
15240: EQUAL
15241: PUSH
15242: LD_VAR 0 1
15246: PPUSH
15247: CALL_OW 255
15251: PUSH
15252: LD_INT 1
15254: EQUAL
15255: AND
15256: IFFALSE 15266
// buildOil = 1 ;
15258: LD_ADDR_EXP 34
15262: PUSH
15263: LD_INT 1
15265: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15266: LD_VAR 0 1
15270: PPUSH
15271: CALL_OW 266
15275: PUSH
15276: LD_INT 26
15278: EQUAL
15279: PUSH
15280: LD_VAR 0 1
15284: PPUSH
15285: CALL_OW 255
15289: PUSH
15290: LD_INT 1
15292: EQUAL
15293: AND
15294: IFFALSE 15304
// buildPower = 1 ;
15296: LD_ADDR_EXP 35
15300: PUSH
15301: LD_INT 1
15303: ST_TO_ADDR
// end ;
15304: PPOPN 8
15306: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15307: LD_VAR 0 1
15311: PPUSH
15312: CALL_OW 266
15316: PUSH
15317: LD_INT 3
15319: EQUAL
15320: PUSH
15321: LD_VAR 0 1
15325: PPUSH
15326: CALL_OW 255
15330: PUSH
15331: LD_INT 1
15333: EQUAL
15334: AND
15335: PUSH
15336: LD_EXP 31
15340: PUSH
15341: LD_INT 0
15343: EQUAL
15344: AND
15345: IFFALSE 15693
// begin factoryDialog = 1 ;
15347: LD_ADDR_EXP 31
15351: PUSH
15352: LD_INT 1
15354: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15355: LD_INT 47
15357: PPUSH
15358: LD_INT 1
15360: PPUSH
15361: CALL_OW 321
15365: PUSH
15366: LD_INT 1
15368: EQUAL
15369: PUSH
15370: LD_INT 45
15372: PPUSH
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 321
15380: PUSH
15381: LD_INT 1
15383: EQUAL
15384: AND
15385: IFFALSE 15693
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15387: LD_INT 22
15389: PUSH
15390: LD_INT 1
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: LD_INT 21
15399: PUSH
15400: LD_INT 3
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: LD_INT 30
15409: PUSH
15410: LD_INT 3
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: LD_INT 24
15419: PUSH
15420: LD_INT 1000
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: PPUSH
15433: CALL_OW 69
15437: PUSH
15438: LD_INT 1
15440: ARRAY
15441: PPUSH
15442: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15446: LD_EXP 1
15450: PPUSH
15451: LD_STRING D9a-JMM-1
15453: PPUSH
15454: CALL_OW 88
// if IsOK ( Campell ) then
15458: LD_EXP 12
15462: PPUSH
15463: CALL_OW 302
15467: IFFALSE 15483
// Say ( Campell , D9a-Mech1-1 ) else
15469: LD_EXP 12
15473: PPUSH
15474: LD_STRING D9a-Mech1-1
15476: PPUSH
15477: CALL_OW 88
15481: GO 15679
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15483: LD_INT 22
15485: PUSH
15486: LD_INT 1
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: PUSH
15493: LD_INT 21
15495: PUSH
15496: LD_INT 1
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PUSH
15503: LD_INT 25
15505: PUSH
15506: LD_INT 3
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: LD_INT 26
15515: PUSH
15516: LD_INT 1
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: PPUSH
15529: CALL_OW 69
15533: PUSH
15534: LD_EXP 1
15538: PUSH
15539: EMPTY
15540: LIST
15541: PUSH
15542: LD_INT 0
15544: GREATER
15545: DIFF
15546: IFFALSE 15620
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15548: LD_INT 22
15550: PUSH
15551: LD_INT 1
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 21
15560: PUSH
15561: LD_INT 1
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 25
15570: PUSH
15571: LD_INT 3
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 26
15580: PUSH
15581: LD_INT 1
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: PPUSH
15594: CALL_OW 69
15598: PUSH
15599: LD_EXP 1
15603: PUSH
15604: EMPTY
15605: LIST
15606: DIFF
15607: PPUSH
15608: LD_STRING D9a-Mech1-1
15610: PPUSH
15611: LD_STRING D9a-Mech1-1
15613: PPUSH
15614: CALL 4598 0 3
15618: GO 15679
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15620: LD_INT 22
15622: PUSH
15623: LD_INT 1
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 21
15632: PUSH
15633: LD_INT 1
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 26
15642: PUSH
15643: LD_INT 1
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: LIST
15654: PPUSH
15655: CALL_OW 69
15659: PUSH
15660: LD_EXP 1
15664: PUSH
15665: EMPTY
15666: LIST
15667: DIFF
15668: PPUSH
15669: LD_STRING D9a-Mech1-1
15671: PPUSH
15672: LD_STRING D9a-Mech1-1
15674: PPUSH
15675: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15679: LD_EXP 33
15683: PUSH
15684: LD_INT 0
15686: EQUAL
15687: IFFALSE 15693
// EnergyDialog ;
15689: CALL 5003 0 0
// end ; end ; end ;
15693: PPOPN 1
15695: END
// on UnitDestroyed ( unit ) do var mech ;
15696: LD_INT 0
15698: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: CALL 35783 0 1
// if unit = JMM then
15708: LD_VAR 0 1
15712: PUSH
15713: LD_EXP 1
15717: EQUAL
15718: IFFALSE 15727
// YouLost ( JMM ) ;
15720: LD_STRING JMM
15722: PPUSH
15723: CALL_OW 104
// if unit = ambdept0 then
15727: LD_VAR 0 1
15731: PUSH
15732: LD_INT 4
15734: EQUAL
15735: IFFALSE 15744
// YouLost ( Base ) ;
15737: LD_STRING Base
15739: PPUSH
15740: CALL_OW 104
// if unit in ruMobile then
15744: LD_VAR 0 1
15748: PUSH
15749: LD_EXP 46
15753: IN
15754: IFFALSE 15772
// ruMobile = ruMobile diff ruMobile ;
15756: LD_ADDR_EXP 46
15760: PUSH
15761: LD_EXP 46
15765: PUSH
15766: LD_EXP 46
15770: DIFF
15771: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15772: LD_VAR 0 1
15776: PPUSH
15777: CALL_OW 247
15781: PUSH
15782: LD_INT 1
15784: EQUAL
15785: PUSH
15786: LD_VAR 0 1
15790: PPUSH
15791: CALL_OW 255
15795: PUSH
15796: LD_INT 1
15798: EQUAL
15799: AND
15800: IFFALSE 15816
// lostCounter = lostCounter + 1 ;
15802: LD_ADDR_EXP 38
15806: PUSH
15807: LD_EXP 38
15811: PUSH
15812: LD_INT 1
15814: PLUS
15815: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15816: LD_EXP 43
15820: PUSH
15821: LD_INT 24
15823: PPUSH
15824: CALL_OW 313
15828: PUSH
15829: LD_INT 6
15831: LESS
15832: AND
15833: PUSH
15834: LD_VAR 0 1
15838: PPUSH
15839: CALL_OW 257
15843: PUSH
15844: LD_INT 3
15846: EQUAL
15847: AND
15848: PUSH
15849: LD_VAR 0 1
15853: PPUSH
15854: CALL_OW 255
15858: PUSH
15859: LD_INT 3
15861: EQUAL
15862: AND
15863: PUSH
15864: LD_INT 24
15866: PPUSH
15867: CALL_OW 302
15871: AND
15872: PUSH
15873: LD_INT 24
15875: PPUSH
15876: CALL_OW 255
15880: PUSH
15881: LD_INT 3
15883: EQUAL
15884: AND
15885: IFFALSE 16014
// begin ruMech := ruMech - 1 ;
15887: LD_ADDR_EXP 43
15891: PUSH
15892: LD_EXP 43
15896: PUSH
15897: LD_INT 1
15899: MINUS
15900: ST_TO_ADDR
// if ruMech = 0 then
15901: LD_EXP 43
15905: PUSH
15906: LD_INT 0
15908: EQUAL
15909: IFFALSE 15913
// exit ;
15911: GO 16014
// wait ( 0 0$40 ) ;
15913: LD_INT 1400
15915: PPUSH
15916: CALL_OW 67
// uc_side = 3 ;
15920: LD_ADDR_OWVAR 20
15924: PUSH
15925: LD_INT 3
15927: ST_TO_ADDR
// uc_nation = 3 ;
15928: LD_ADDR_OWVAR 21
15932: PUSH
15933: LD_INT 3
15935: ST_TO_ADDR
// hc_gallery :=  ;
15936: LD_ADDR_OWVAR 33
15940: PUSH
15941: LD_STRING 
15943: ST_TO_ADDR
// hc_name :=  ;
15944: LD_ADDR_OWVAR 26
15948: PUSH
15949: LD_STRING 
15951: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15952: LD_INT 0
15954: PPUSH
15955: LD_EXP 16
15959: PPUSH
15960: LD_EXP 17
15964: PPUSH
15965: CALL_OW 12
15969: PPUSH
15970: CALL_OW 383
// mech := CreateHuman ;
15974: LD_ADDR_VAR 0 2
15978: PUSH
15979: CALL_OW 44
15983: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15984: LD_VAR 0 2
15988: PPUSH
15989: LD_INT 124
15991: PPUSH
15992: LD_INT 97
15994: PPUSH
15995: LD_INT 0
15997: PPUSH
15998: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
16002: LD_VAR 0 2
16006: PPUSH
16007: LD_INT 24
16009: PPUSH
16010: CALL_OW 120
// end ; end ;
16014: PPOPN 2
16016: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
16017: LD_INT 0
16019: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
16020: LD_VAR 0 1
16024: PPUSH
16025: LD_VAR 0 2
16029: PPUSH
16030: CALL 35903 0 2
// if GetSide ( vehicle ) = 1 then
16034: LD_VAR 0 1
16038: PPUSH
16039: CALL_OW 255
16043: PUSH
16044: LD_INT 1
16046: EQUAL
16047: IFFALSE 16063
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
16049: LD_ADDR_EXP 42
16053: PUSH
16054: LD_EXP 42
16058: PUSH
16059: LD_INT 1
16061: PLUS
16062: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16063: LD_VAR 0 1
16067: PPUSH
16068: CALL_OW 255
16072: PUSH
16073: LD_INT 3
16075: EQUAL
16076: PUSH
16077: LD_VAR 0 1
16081: PPUSH
16082: CALL_OW 264
16086: PUSH
16087: LD_INT 42
16089: PUSH
16090: LD_INT 43
16092: PUSH
16093: LD_INT 44
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: LIST
16100: IN
16101: AND
16102: IFFALSE 16120
// ruMobile := ruMobile union vehicle ;
16104: LD_ADDR_EXP 46
16108: PUSH
16109: LD_EXP 46
16113: PUSH
16114: LD_VAR 0 1
16118: UNION
16119: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16120: LD_VAR 0 1
16124: PPUSH
16125: CALL_OW 264
16129: PUSH
16130: LD_INT 53
16132: EQUAL
16133: IFFALSE 16269
// begin uc_side = 3 ;
16135: LD_ADDR_OWVAR 20
16139: PUSH
16140: LD_INT 3
16142: ST_TO_ADDR
// uc_nation = 3 ;
16143: LD_ADDR_OWVAR 21
16147: PUSH
16148: LD_INT 3
16150: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16151: LD_INT 0
16153: PPUSH
16154: LD_EXP 17
16158: PPUSH
16159: CALL_OW 383
// driver := CreateHuman ;
16163: LD_ADDR_VAR 0 3
16167: PUSH
16168: CALL_OW 44
16172: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16173: LD_VAR 0 3
16177: PPUSH
16178: LD_VAR 0 2
16182: PPUSH
16183: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16187: LD_VAR 0 1
16191: PPUSH
16192: LD_INT 21
16194: PPUSH
16195: CALL 5219 0 2
// repeat wait ( 0 0$1 ) ;
16199: LD_INT 35
16201: PPUSH
16202: CALL_OW 67
// until not HasTask ( vehicle ) ;
16206: LD_VAR 0 1
16210: PPUSH
16211: CALL_OW 314
16215: NOT
16216: IFFALSE 16199
// driver := IsDrivenBy ( vehicle ) ;
16218: LD_ADDR_VAR 0 3
16222: PUSH
16223: LD_VAR 0 1
16227: PPUSH
16228: CALL_OW 311
16232: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16233: LD_VAR 0 3
16237: PPUSH
16238: LD_INT 104
16240: PPUSH
16241: LD_INT 73
16243: PPUSH
16244: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16248: LD_VAR 0 3
16252: PPUSH
16253: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16257: LD_VAR 0 3
16261: PPUSH
16262: LD_INT 24
16264: PPUSH
16265: CALL_OW 180
// end ; end ;
16269: PPOPN 3
16271: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16272: LD_VAR 0 1
16276: PPUSH
16277: CALL_OW 255
16281: PUSH
16282: LD_INT 3
16284: EQUAL
16285: PUSH
16286: LD_VAR 0 1
16290: PPUSH
16291: CALL_OW 247
16295: PUSH
16296: LD_INT 2
16298: EQUAL
16299: AND
16300: PUSH
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 264
16310: PUSH
16311: LD_INT 42
16313: PUSH
16314: LD_INT 43
16316: PUSH
16317: LD_INT 44
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: LIST
16324: IN
16325: AND
16326: IFFALSE 16375
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16328: LD_INT 24
16330: PPUSH
16331: LD_VAR 0 1
16335: PPUSH
16336: CALL_OW 265
16340: PPUSH
16341: LD_VAR 0 1
16345: PPUSH
16346: CALL_OW 262
16350: PPUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL_OW 263
16360: PPUSH
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 264
16370: PPUSH
16371: CALL_OW 185
// end ;
16375: PPOPN 1
16377: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16378: LD_VAR 0 1
16382: PPUSH
16383: CALL_OW 255
16387: PUSH
16388: LD_INT 3
16390: EQUAL
16391: PUSH
16392: LD_VAR 0 2
16396: PPUSH
16397: CALL_OW 255
16401: PUSH
16402: LD_INT 3
16404: EQUAL
16405: AND
16406: PUSH
16407: LD_INT 24
16409: PPUSH
16410: CALL_OW 302
16414: AND
16415: PUSH
16416: LD_VAR 0 1
16420: PPUSH
16421: CALL_OW 302
16425: NOT
16426: AND
16427: IFFALSE 16441
// ComEnterUnit ( human , rubfact0 ) ;
16429: LD_VAR 0 2
16433: PPUSH
16434: LD_INT 24
16436: PPUSH
16437: CALL_OW 120
// end ;
16441: PPOPN 2
16443: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 5 then
16444: LD_VAR 0 1
16448: PPUSH
16449: CALL_OW 255
16453: PUSH
16454: LD_INT 5
16456: EQUAL
16457: IFFALSE 16531
// begin repeat ComMoveXY ( driver , 125 , 97 ) ;
16459: LD_VAR 0 1
16463: PPUSH
16464: LD_INT 125
16466: PPUSH
16467: LD_INT 97
16469: PPUSH
16470: CALL_OW 111
// wait ( 0 0$1 ) ;
16474: LD_INT 35
16476: PPUSH
16477: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 125 , 97 ) ;
16481: LD_VAR 0 1
16485: PPUSH
16486: CALL_OW 301
16490: PUSH
16491: LD_VAR 0 1
16495: PPUSH
16496: LD_INT 125
16498: PPUSH
16499: LD_INT 97
16501: PPUSH
16502: CALL_OW 307
16506: OR
16507: IFFALSE 16459
// if IsDead ( driver ) then
16509: LD_VAR 0 1
16513: PPUSH
16514: CALL_OW 301
16518: IFFALSE 16522
// exit ;
16520: GO 16531
// RemoveUnit ( driver ) ;
16522: LD_VAR 0 1
16526: PPUSH
16527: CALL_OW 64
// end ; end ;
16531: PPOPN 4
16533: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16534: LD_VAR 0 1
16538: PUSH
16539: LD_INT 24
16541: EQUAL
16542: PUSH
16543: LD_VAR 0 2
16547: PPUSH
16548: CALL_OW 256
16552: PUSH
16553: LD_INT 1000
16555: LESS
16556: AND
16557: IFFALSE 16571
// SetLives ( un , 1000 ) ;
16559: LD_VAR 0 2
16563: PPUSH
16564: LD_INT 1000
16566: PPUSH
16567: CALL_OW 234
// end ;
16571: PPOPN 2
16573: END
// on Command ( comandid ) do var i , j , tmp ;
16574: LD_INT 0
16576: PPUSH
16577: PPUSH
16578: PPUSH
// begin SOS_Command ( comandid ) ;
16579: LD_VAR 0 1
16583: PPUSH
16584: CALL 35887 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16588: LD_INT 22
16590: PUSH
16591: LD_INT 4
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PPUSH
16598: CALL_OW 69
16602: NOT
16603: IFFALSE 16607
// exit ;
16605: GO 16772
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16607: LD_ADDR_VAR 0 2
16611: PUSH
16612: LD_INT 22
16614: PUSH
16615: LD_INT 1
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 2
16624: PUSH
16625: LD_INT 21
16627: PUSH
16628: LD_INT 1
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 21
16637: PUSH
16638: LD_INT 2
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: LIST
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PPUSH
16654: CALL_OW 69
16658: PUSH
16659: FOR_IN
16660: IFFALSE 16770
// begin if GetTaskList ( i ) > 0 then
16662: LD_VAR 0 2
16666: PPUSH
16667: CALL_OW 437
16671: PUSH
16672: LD_INT 0
16674: GREATER
16675: IFFALSE 16768
// begin for j = 1 to GetTaskList ( i ) do
16677: LD_ADDR_VAR 0 3
16681: PUSH
16682: DOUBLE
16683: LD_INT 1
16685: DEC
16686: ST_TO_ADDR
16687: LD_VAR 0 2
16691: PPUSH
16692: CALL_OW 437
16696: PUSH
16697: FOR_TO
16698: IFFALSE 16766
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16700: LD_ADDR_VAR 0 4
16704: PUSH
16705: LD_VAR 0 2
16709: PPUSH
16710: CALL_OW 437
16714: PUSH
16715: LD_VAR 0 3
16719: ARRAY
16720: PUSH
16721: LD_INT 4
16723: ARRAY
16724: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16725: LD_VAR 0 4
16729: PPUSH
16730: CALL_OW 255
16734: PUSH
16735: LD_INT 4
16737: EQUAL
16738: PUSH
16739: LD_VAR 0 4
16743: PPUSH
16744: CALL_OW 255
16748: PUSH
16749: LD_INT 0
16751: EQUAL
16752: OR
16753: IFFALSE 16764
// ComStop ( i ) ;
16755: LD_VAR 0 2
16759: PPUSH
16760: CALL_OW 141
// end ;
16764: GO 16697
16766: POP
16767: POP
// end ; end ;
16768: GO 16659
16770: POP
16771: POP
// end ;
16772: PPOPN 4
16774: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
16775: LD_VAR 0 1
16779: PUSH
16780: LD_INT 22
16782: PUSH
16783: LD_INT 1
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 23
16792: PUSH
16793: LD_INT 1
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: LD_INT 21
16802: PUSH
16803: LD_INT 1
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: LIST
16814: PPUSH
16815: CALL_OW 69
16819: IN
16820: PUSH
16821: LD_VAR 0 2
16825: PUSH
16826: LD_INT 1
16828: EQUAL
16829: AND
16830: IFFALSE 16836
// JMMTraitor ;
16832: CALL 9342 0 0
// end ; end_of_file
16836: PPOPN 3
16838: END
// every 10 10$0 do
16839: GO 16841
16841: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16842: LD_INT 5
16844: PPUSH
16845: LD_INT 3
16847: PPUSH
16848: LD_INT 2
16850: PUSH
16851: LD_INT 2
16853: PUSH
16854: LD_INT 3
16856: PUSH
16857: LD_INT 4
16859: PUSH
16860: LD_INT 4
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: PUSH
16869: LD_OWVAR 67
16873: ARRAY
16874: PLUS
16875: PPUSH
16876: LD_INT 0
16878: PPUSH
16879: LD_EXP 16
16883: PPUSH
16884: LD_EXP 17
16888: PPUSH
16889: CALL_OW 12
16893: PPUSH
16894: LD_INT 4
16896: PPUSH
16897: LD_INT 14
16899: PPUSH
16900: LD_INT 1
16902: PPUSH
16903: LD_INT 2
16905: PPUSH
16906: CALL 6960 0 9
16910: END
// every 20 20$0 do
16911: GO 16913
16913: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16914: LD_INT 5
16916: PPUSH
16917: LD_INT 3
16919: PPUSH
16920: LD_INT 4
16922: PUSH
16923: LD_INT 2
16925: PUSH
16926: LD_INT 3
16928: PUSH
16929: LD_INT 4
16931: PUSH
16932: LD_INT 5
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: PUSH
16941: LD_OWVAR 67
16945: ARRAY
16946: PLUS
16947: PPUSH
16948: LD_INT 2
16950: PPUSH
16951: LD_EXP 16
16955: PPUSH
16956: LD_EXP 17
16960: PPUSH
16961: CALL_OW 12
16965: PPUSH
16966: LD_INT 4
16968: PPUSH
16969: LD_INT 14
16971: PPUSH
16972: LD_INT 1
16974: PPUSH
16975: LD_INT 1
16977: PPUSH
16978: CALL 6960 0 9
16982: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16983: GO 16985
16985: DISABLE
16986: LD_INT 0
16988: PPUSH
16989: PPUSH
16990: PPUSH
16991: PPUSH
16992: PPUSH
// begin hex := [ 123 , 95 ] ;
16993: LD_ADDR_VAR 0 4
16997: PUSH
16998: LD_INT 123
17000: PUSH
17001: LD_INT 95
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: ST_TO_ADDR
// tmp := [ ] ;
17008: LD_ADDR_VAR 0 5
17012: PUSH
17013: EMPTY
17014: ST_TO_ADDR
// if Difficulty > 1 then
17015: LD_OWVAR 67
17019: PUSH
17020: LD_INT 1
17022: GREATER
17023: IFFALSE 17033
// specAttack := true ;
17025: LD_ADDR_EXP 47
17029: PUSH
17030: LD_INT 1
17032: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
17033: LD_ADDR_VAR 0 1
17037: PUSH
17038: DOUBLE
17039: LD_INT 1
17041: DEC
17042: ST_TO_ADDR
17043: LD_INT 4
17045: PUSH
17046: LD_INT 5
17048: PUSH
17049: LD_INT 6
17051: PUSH
17052: LD_INT 7
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: PUSH
17061: LD_OWVAR 67
17065: ARRAY
17066: PUSH
17067: FOR_TO
17068: IFFALSE 17370
// begin uc_side := 5 ;
17070: LD_ADDR_OWVAR 20
17074: PUSH
17075: LD_INT 5
17077: ST_TO_ADDR
// uc_nation := 3 ;
17078: LD_ADDR_OWVAR 21
17082: PUSH
17083: LD_INT 3
17085: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
17086: LD_ADDR_OWVAR 37
17090: PUSH
17091: LD_INT 21
17093: PUSH
17094: LD_INT 22
17096: PUSH
17097: LD_INT 23
17099: PUSH
17100: LD_INT 24
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: PUSH
17109: LD_VAR 0 1
17113: PUSH
17114: LD_OWVAR 67
17118: MOD
17119: PUSH
17120: LD_INT 1
17122: PLUS
17123: ARRAY
17124: ST_TO_ADDR
// vc_engine := engine_combustion ;
17125: LD_ADDR_OWVAR 39
17129: PUSH
17130: LD_INT 1
17132: ST_TO_ADDR
// vc_control := control_manual ;
17133: LD_ADDR_OWVAR 38
17137: PUSH
17138: LD_INT 1
17140: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
17141: LD_ADDR_OWVAR 40
17145: PUSH
17146: LD_INT 42
17148: PUSH
17149: LD_INT 43
17151: PUSH
17152: LD_INT 44
17154: PUSH
17155: LD_INT 44
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: PUSH
17164: LD_VAR 0 1
17168: PUSH
17169: LD_OWVAR 67
17173: MOD
17174: PUSH
17175: LD_INT 1
17177: PLUS
17178: ARRAY
17179: ST_TO_ADDR
// veh := CreateVehicle ;
17180: LD_ADDR_VAR 0 3
17184: PUSH
17185: CALL_OW 45
17189: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17190: LD_VAR 0 3
17194: PPUSH
17195: LD_INT 5
17197: PPUSH
17198: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
17202: LD_INT 35
17204: PPUSH
17205: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17209: LD_VAR 0 4
17213: PUSH
17214: LD_INT 1
17216: ARRAY
17217: PPUSH
17218: LD_VAR 0 4
17222: PUSH
17223: LD_INT 2
17225: ARRAY
17226: PPUSH
17227: CALL_OW 428
17231: PUSH
17232: LD_INT 0
17234: EQUAL
17235: IFFALSE 17202
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17237: LD_VAR 0 3
17241: PPUSH
17242: LD_VAR 0 4
17246: PUSH
17247: LD_INT 1
17249: ARRAY
17250: PPUSH
17251: LD_VAR 0 4
17255: PUSH
17256: LD_INT 2
17258: ARRAY
17259: PPUSH
17260: LD_INT 0
17262: PPUSH
17263: CALL_OW 48
// uc_side := 5 ;
17267: LD_ADDR_OWVAR 20
17271: PUSH
17272: LD_INT 5
17274: ST_TO_ADDR
// uc_nation := 3 ;
17275: LD_ADDR_OWVAR 21
17279: PUSH
17280: LD_INT 3
17282: ST_TO_ADDR
// InitHC_All ( ) ;
17283: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
17287: LD_INT 0
17289: PPUSH
17290: LD_INT 2
17292: PUSH
17293: LD_OWVAR 67
17297: PLUS
17298: PPUSH
17299: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17303: CALL_OW 44
17307: PPUSH
17308: LD_VAR 0 3
17312: PPUSH
17313: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17317: LD_VAR 0 3
17321: PPUSH
17322: LD_INT 101
17324: PPUSH
17325: LD_INT 77
17327: PPUSH
17328: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17332: LD_ADDR_VAR 0 5
17336: PUSH
17337: LD_VAR 0 5
17341: PPUSH
17342: LD_VAR 0 5
17346: PUSH
17347: LD_INT 1
17349: PLUS
17350: PPUSH
17351: LD_VAR 0 3
17355: PPUSH
17356: CALL_OW 1
17360: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17361: LD_INT 105
17363: PPUSH
17364: CALL_OW 67
// end ;
17368: GO 17067
17370: POP
17371: POP
// repeat wait ( 0 0$1 ) ;
17372: LD_INT 35
17374: PPUSH
17375: CALL_OW 67
// for i in tmp do
17379: LD_ADDR_VAR 0 1
17383: PUSH
17384: LD_VAR 0 5
17388: PUSH
17389: FOR_IN
17390: IFFALSE 17458
// if not IsOk ( i ) then
17392: LD_VAR 0 1
17396: PPUSH
17397: CALL_OW 302
17401: NOT
17402: IFFALSE 17422
// tmp := tmp diff i else
17404: LD_ADDR_VAR 0 5
17408: PUSH
17409: LD_VAR 0 5
17413: PUSH
17414: LD_VAR 0 1
17418: DIFF
17419: ST_TO_ADDR
17420: GO 17456
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17422: LD_VAR 0 1
17426: PPUSH
17427: LD_INT 22
17429: PUSH
17430: LD_INT 1
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PPUSH
17437: CALL_OW 69
17441: PPUSH
17442: LD_VAR 0 1
17446: PPUSH
17447: CALL_OW 74
17451: PPUSH
17452: CALL_OW 115
17456: GO 17389
17458: POP
17459: POP
// until not tmp ;
17460: LD_VAR 0 5
17464: NOT
17465: IFFALSE 17372
// end ;
17467: PPOPN 5
17469: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17470: LD_EXP 47
17474: IFFALSE 17852
17476: GO 17478
17478: DISABLE
17479: LD_INT 0
17481: PPUSH
17482: PPUSH
17483: PPUSH
17484: PPUSH
// begin wait ( 0 0$20 ) ;
17485: LD_INT 700
17487: PPUSH
17488: CALL_OW 67
// uc_side := 5 ;
17492: LD_ADDR_OWVAR 20
17496: PUSH
17497: LD_INT 5
17499: ST_TO_ADDR
// uc_nation := 3 ;
17500: LD_ADDR_OWVAR 21
17504: PUSH
17505: LD_INT 3
17507: ST_TO_ADDR
// InitHc ;
17508: CALL_OW 19
// hc_importance := 0 ;
17512: LD_ADDR_OWVAR 32
17516: PUSH
17517: LD_INT 0
17519: ST_TO_ADDR
// tmp := [ ] ;
17520: LD_ADDR_VAR 0 2
17524: PUSH
17525: EMPTY
17526: ST_TO_ADDR
// InitHC_All ( ) ;
17527: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17531: LD_INT 0
17533: PPUSH
17534: LD_INT 2
17536: PPUSH
17537: LD_INT 6
17539: PPUSH
17540: CALL_OW 380
// eng := CreateHuman ;
17544: LD_ADDR_VAR 0 4
17548: PUSH
17549: CALL_OW 44
17553: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17554: LD_VAR 0 4
17558: PPUSH
17559: LD_INT 78
17561: PPUSH
17562: LD_INT 2
17564: PPUSH
17565: LD_INT 4
17567: PPUSH
17568: LD_INT 0
17570: PPUSH
17571: CALL_OW 50
// for i = 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
17575: LD_ADDR_VAR 0 3
17579: PUSH
17580: DOUBLE
17581: LD_INT 1
17583: DEC
17584: ST_TO_ADDR
17585: LD_INT 3
17587: PUSH
17588: LD_INT 3
17590: PUSH
17591: LD_INT 4
17593: PUSH
17594: LD_INT 5
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: PUSH
17603: LD_OWVAR 67
17607: ARRAY
17608: PUSH
17609: FOR_TO
17610: IFFALSE 17699
// begin InitHC_All ( ) ;
17612: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17616: LD_INT 0
17618: PPUSH
17619: LD_INT 1
17621: PPUSH
17622: LD_INT 4
17624: PUSH
17625: LD_INT 5
17627: PUSH
17628: LD_INT 6
17630: PUSH
17631: LD_INT 6
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: PUSH
17640: LD_OWVAR 67
17644: ARRAY
17645: PPUSH
17646: CALL_OW 380
// un := CreateHuman ;
17650: LD_ADDR_VAR 0 1
17654: PUSH
17655: CALL_OW 44
17659: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17660: LD_VAR 0 1
17664: PPUSH
17665: LD_INT 78
17667: PPUSH
17668: LD_INT 2
17670: PPUSH
17671: LD_INT 4
17673: PPUSH
17674: LD_INT 0
17676: PPUSH
17677: CALL_OW 50
// tmp := tmp ^ un ;
17681: LD_ADDR_VAR 0 2
17685: PUSH
17686: LD_VAR 0 2
17690: PUSH
17691: LD_VAR 0 1
17695: ADD
17696: ST_TO_ADDR
// end ;
17697: GO 17609
17699: POP
17700: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17701: LD_VAR 0 2
17705: PPUSH
17706: LD_INT 49
17708: PPUSH
17709: LD_INT 3
17711: PPUSH
17712: CALL_OW 111
// wait ( 0 0$2 ) ;
17716: LD_INT 70
17718: PPUSH
17719: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17723: LD_VAR 0 4
17727: PPUSH
17728: LD_INT 49
17730: PPUSH
17731: LD_INT 3
17733: PPUSH
17734: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17738: LD_VAR 0 4
17742: PPUSH
17743: LD_INT 4
17745: PPUSH
17746: CALL_OW 227
// wait ( 0 0$10 ) ;
17750: LD_INT 350
17752: PPUSH
17753: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17757: LD_INT 35
17759: PPUSH
17760: CALL_OW 67
// for i in tmp do
17764: LD_ADDR_VAR 0 3
17768: PUSH
17769: LD_VAR 0 2
17773: PUSH
17774: FOR_IN
17775: IFFALSE 17843
// if not IsOk ( i ) then
17777: LD_VAR 0 3
17781: PPUSH
17782: CALL_OW 302
17786: NOT
17787: IFFALSE 17807
// tmp := tmp diff i else
17789: LD_ADDR_VAR 0 2
17793: PUSH
17794: LD_VAR 0 2
17798: PUSH
17799: LD_VAR 0 3
17803: DIFF
17804: ST_TO_ADDR
17805: GO 17841
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17807: LD_VAR 0 3
17811: PPUSH
17812: LD_INT 22
17814: PUSH
17815: LD_INT 1
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PPUSH
17822: CALL_OW 69
17826: PPUSH
17827: LD_VAR 0 3
17831: PPUSH
17832: CALL_OW 74
17836: PPUSH
17837: CALL_OW 115
17841: GO 17774
17843: POP
17844: POP
// until not tmp ;
17845: LD_VAR 0 2
17849: NOT
17850: IFFALSE 17757
// end ; end_of_file
17852: PPOPN 4
17854: END
// every 0 0$1 trigger startTimer = 1 do
17855: LD_EXP 30
17859: PUSH
17860: LD_INT 1
17862: EQUAL
17863: IFFALSE 17993
17865: GO 17867
17867: DISABLE
// begin enable ;
17868: ENABLE
// if timerStatus = 1 then
17869: LD_EXP 29
17873: PUSH
17874: LD_INT 1
17876: EQUAL
17877: IFFALSE 17910
// begin timeToSupport = timeToSupport - 0 0$01 ;
17879: LD_ADDR_EXP 28
17883: PUSH
17884: LD_EXP 28
17888: PUSH
17889: LD_INT 35
17891: MINUS
17892: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17893: LD_ADDR_OWVAR 47
17897: PUSH
17898: LD_STRING #Am04-1
17900: PUSH
17901: LD_EXP 28
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: ST_TO_ADDR
// end ; if timerStatus = 2 then
17910: LD_EXP 29
17914: PUSH
17915: LD_INT 2
17917: EQUAL
17918: IFFALSE 17951
// begin timeToSupport = timeToSupport - 0 0$01 ;
17920: LD_ADDR_EXP 28
17924: PUSH
17925: LD_EXP 28
17929: PUSH
17930: LD_INT 35
17932: MINUS
17933: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17934: LD_ADDR_OWVAR 47
17938: PUSH
17939: LD_STRING #Am04-2
17941: PUSH
17942: LD_EXP 28
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: ST_TO_ADDR
// end ; if timerStatus = 3 then
17951: LD_EXP 29
17955: PUSH
17956: LD_INT 3
17958: EQUAL
17959: IFFALSE 17975
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17961: LD_ADDR_EXP 27
17965: PUSH
17966: LD_EXP 27
17970: PUSH
17971: LD_INT 35
17973: MINUS
17974: ST_TO_ADDR
// if timerStatus = 4 then
17975: LD_EXP 29
17979: PUSH
17980: LD_INT 4
17982: EQUAL
17983: IFFALSE 17993
// display_strings =  ;
17985: LD_ADDR_OWVAR 47
17989: PUSH
17990: LD_STRING 
17992: ST_TO_ADDR
// end ; end_of_file
17993: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17994: LD_EXP 15
17998: PPUSH
17999: CALL_OW 301
18003: PUSH
18004: LD_INT 22
18006: PUSH
18007: LD_INT 3
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 21
18016: PUSH
18017: LD_INT 1
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PPUSH
18028: CALL_OW 69
18032: PUSH
18033: LD_INT 14
18035: PUSH
18036: LD_INT 13
18038: PUSH
18039: LD_INT 12
18041: PUSH
18042: LD_INT 11
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: PUSH
18051: LD_OWVAR 67
18055: ARRAY
18056: LESS
18057: AND
18058: IFFALSE 18644
18060: GO 18062
18062: DISABLE
18063: LD_INT 0
18065: PPUSH
18066: PPUSH
18067: PPUSH
// begin AIEnable = 0 ;
18068: LD_ADDR_EXP 37
18072: PUSH
18073: LD_INT 0
18075: ST_TO_ADDR
// escapeAvalaible = 1 ;
18076: LD_ADDR_EXP 40
18080: PUSH
18081: LD_INT 1
18083: ST_TO_ADDR
// Video ( true ) ;
18084: LD_INT 1
18086: PPUSH
18087: CALL 78351 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
18091: LD_INT 3
18093: PPUSH
18094: LD_INT 1
18096: PPUSH
18097: LD_INT 1
18099: PPUSH
18100: LD_INT 0
18102: PPUSH
18103: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
18107: LD_INT 6
18109: PPUSH
18110: LD_INT 1
18112: PPUSH
18113: LD_INT 1
18115: PPUSH
18116: LD_INT 0
18118: PPUSH
18119: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
18123: LD_INT 5
18125: PPUSH
18126: LD_INT 1
18128: PPUSH
18129: LD_INT 1
18131: PPUSH
18132: LD_INT 0
18134: PPUSH
18135: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
18139: LD_INT 3
18141: PPUSH
18142: LD_INT 1
18144: PPUSH
18145: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
18149: LD_INT 97
18151: PPUSH
18152: LD_INT 91
18154: PPUSH
18155: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
18159: LD_INT 22
18161: PUSH
18162: LD_INT 3
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 21
18171: PUSH
18172: LD_INT 1
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PPUSH
18183: CALL_OW 69
18187: PPUSH
18188: CALL_OW 121
// wait ( 0 0$01 ) ;
18192: LD_INT 35
18194: PPUSH
18195: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18199: LD_INT 22
18201: PUSH
18202: LD_INT 3
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 21
18211: PUSH
18212: LD_INT 1
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PPUSH
18223: CALL_OW 69
18227: PPUSH
18228: LD_INT 124
18230: PPUSH
18231: LD_INT 98
18233: PPUSH
18234: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18238: LD_INT 22
18240: PUSH
18241: LD_INT 5
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 21
18250: PUSH
18251: LD_INT 1
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PPUSH
18262: CALL_OW 69
18266: PPUSH
18267: CALL_OW 121
// wait ( 0 0$01 ) ;
18271: LD_INT 35
18273: PPUSH
18274: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18278: LD_INT 22
18280: PUSH
18281: LD_INT 5
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 21
18290: PUSH
18291: LD_INT 1
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PPUSH
18302: CALL_OW 69
18306: PPUSH
18307: LD_INT 124
18309: PPUSH
18310: LD_INT 98
18312: PPUSH
18313: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18317: LD_INT 22
18319: PUSH
18320: LD_INT 6
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 21
18329: PUSH
18330: LD_INT 1
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PPUSH
18341: CALL_OW 69
18345: PPUSH
18346: CALL_OW 121
// wait ( 0 0$01 ) ;
18350: LD_INT 35
18352: PPUSH
18353: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18357: LD_INT 22
18359: PUSH
18360: LD_INT 6
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 21
18369: PUSH
18370: LD_INT 1
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PPUSH
18381: CALL_OW 69
18385: PPUSH
18386: LD_INT 124
18388: PPUSH
18389: LD_INT 98
18391: PPUSH
18392: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18396: LD_INT 22
18398: PUSH
18399: LD_INT 1
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 21
18408: PUSH
18409: LD_INT 1
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PPUSH
18420: CALL_OW 69
18424: PPUSH
18425: LD_INT 124
18427: PPUSH
18428: LD_INT 96
18430: PPUSH
18431: CALL_OW 114
// wait ( 0 0$1 ) ;
18435: LD_INT 35
18437: PPUSH
18438: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18442: LD_INT 124
18444: PPUSH
18445: LD_INT 96
18447: PPUSH
18448: CALL_OW 84
// p := 0 0$0 ;
18452: LD_ADDR_VAR 0 3
18456: PUSH
18457: LD_INT 0
18459: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18460: LD_ADDR_VAR 0 2
18464: PUSH
18465: LD_INT 2
18467: PUSH
18468: LD_INT 22
18470: PUSH
18471: LD_INT 3
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 22
18480: PUSH
18481: LD_INT 6
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 21
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PPUSH
18507: CALL_OW 69
18511: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18512: LD_INT 35
18514: PPUSH
18515: CALL_OW 67
// p := p + 0 0$1 ;
18519: LD_ADDR_VAR 0 3
18523: PUSH
18524: LD_VAR 0 3
18528: PUSH
18529: LD_INT 35
18531: PLUS
18532: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18533: LD_VAR 0 2
18537: PPUSH
18538: LD_INT 5
18540: PPUSH
18541: CALL_OW 113
// for i in tmp do
18545: LD_ADDR_VAR 0 1
18549: PUSH
18550: LD_VAR 0 2
18554: PUSH
18555: FOR_IN
18556: IFFALSE 18583
// if IsInArea ( tmp , RussianEscape ) then
18558: LD_VAR 0 2
18562: PPUSH
18563: LD_INT 5
18565: PPUSH
18566: CALL_OW 308
18570: IFFALSE 18581
// RemoveUnit ( i ) ;
18572: LD_VAR 0 1
18576: PPUSH
18577: CALL_OW 64
18581: GO 18555
18583: POP
18584: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18585: LD_INT 23
18587: PUSH
18588: LD_INT 3
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 21
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 24
18607: PUSH
18608: LD_INT 250
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: PPUSH
18620: CALL_OW 69
18624: PUSH
18625: LD_INT 0
18627: EQUAL
18628: PUSH
18629: LD_VAR 0 3
18633: PUSH
18634: LD_INT 245
18636: GREATEREQUAL
18637: OR
18638: IFFALSE 18512
// FinishMission ;
18640: CALL 18647 0 0
// end ;
18644: PPOPN 3
18646: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18647: LD_INT 0
18649: PPUSH
18650: PPUSH
18651: PPUSH
18652: PPUSH
18653: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
18654: LD_INT 22
18656: PUSH
18657: LD_INT 1
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 21
18666: PUSH
18667: LD_INT 1
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 23
18676: PUSH
18677: LD_INT 1
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 50
18686: PUSH
18687: EMPTY
18688: LIST
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: PPUSH
18696: CALL_OW 69
18700: PPUSH
18701: CALL 42779 0 1
18705: PUSH
18706: LD_INT 5
18708: LESS
18709: IFFALSE 18718
// YouLost ( LostVictory ) ;
18711: LD_STRING LostVictory
18713: PPUSH
18714: CALL_OW 104
// if not vehicleProduceCounter then
18718: LD_EXP 42
18722: NOT
18723: IFFALSE 18732
// SetAchievement ( ACH_INFANTRY ) ;
18725: LD_STRING ACH_INFANTRY
18727: PPUSH
18728: CALL_OW 543
// if tick <= 20 20$00 then
18732: LD_OWVAR 1
18736: PUSH
18737: LD_INT 42000
18739: LESSEQUAL
18740: IFFALSE 18756
// begin wait ( 3 ) ;
18742: LD_INT 3
18744: PPUSH
18745: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18749: LD_STRING ACH_ASPEED_4
18751: PPUSH
18752: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18756: LD_INT 22
18758: PPUSH
18759: CALL 19414 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18763: LD_INT 69
18765: PPUSH
18766: LD_INT 1
18768: PPUSH
18769: CALL_OW 321
18773: PPUSH
18774: LD_STRING GatlingInGamma
18776: PPUSH
18777: CALL_OW 39
// m1 := false ;
18781: LD_ADDR_VAR 0 3
18785: PUSH
18786: LD_INT 0
18788: ST_TO_ADDR
// m2 := false ;
18789: LD_ADDR_VAR 0 4
18793: PUSH
18794: LD_INT 0
18796: ST_TO_ADDR
// m3 := false ;
18797: LD_ADDR_VAR 0 5
18801: PUSH
18802: LD_INT 0
18804: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18805: LD_EXP 34
18809: PUSH
18810: LD_INT 1
18812: EQUAL
18813: PUSH
18814: LD_EXP 35
18818: PUSH
18819: LD_INT 1
18821: EQUAL
18822: AND
18823: IFFALSE 18845
// begin AddMedal ( oil , 1 ) ;
18825: LD_STRING oil
18827: PPUSH
18828: LD_INT 1
18830: PPUSH
18831: CALL_OW 101
// m1 := true ;
18835: LD_ADDR_VAR 0 3
18839: PUSH
18840: LD_INT 1
18842: ST_TO_ADDR
// end else
18843: GO 18938
// begin if buildOil = 1 and buildPower = 0 then
18845: LD_EXP 34
18849: PUSH
18850: LD_INT 1
18852: EQUAL
18853: PUSH
18854: LD_EXP 35
18858: PUSH
18859: LD_INT 0
18861: EQUAL
18862: AND
18863: IFFALSE 18876
// AddMedal ( oil , - 1 ) ;
18865: LD_STRING oil
18867: PPUSH
18868: LD_INT 1
18870: NEG
18871: PPUSH
18872: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18876: LD_EXP 34
18880: PUSH
18881: LD_INT 0
18883: EQUAL
18884: PUSH
18885: LD_EXP 35
18889: PUSH
18890: LD_INT 1
18892: EQUAL
18893: AND
18894: IFFALSE 18907
// AddMedal ( oil , - 2 ) ;
18896: LD_STRING oil
18898: PPUSH
18899: LD_INT 2
18901: NEG
18902: PPUSH
18903: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18907: LD_EXP 34
18911: PUSH
18912: LD_INT 0
18914: EQUAL
18915: PUSH
18916: LD_EXP 35
18920: PUSH
18921: LD_INT 0
18923: EQUAL
18924: AND
18925: IFFALSE 18938
// AddMedal ( oil , - 3 ) ;
18927: LD_STRING oil
18929: PPUSH
18930: LD_INT 3
18932: NEG
18933: PPUSH
18934: CALL_OW 101
// end ; if lostCounter > 3 then
18938: LD_EXP 38
18942: PUSH
18943: LD_INT 3
18945: GREATER
18946: IFFALSE 18961
// AddMedal ( deaths , - 1 ) else
18948: LD_STRING deaths
18950: PPUSH
18951: LD_INT 1
18953: NEG
18954: PPUSH
18955: CALL_OW 101
18959: GO 18979
// begin AddMedal ( deaths , 1 ) ;
18961: LD_STRING deaths
18963: PPUSH
18964: LD_INT 1
18966: PPUSH
18967: CALL_OW 101
// m2 := true ;
18971: LD_ADDR_VAR 0 4
18975: PUSH
18976: LD_INT 1
18978: ST_TO_ADDR
// end ; if honor = 1 then
18979: LD_EXP 39
18983: PUSH
18984: LD_INT 1
18986: EQUAL
18987: IFFALSE 19009
// begin AddMedal ( honour , 1 ) ;
18989: LD_STRING honour
18991: PPUSH
18992: LD_INT 1
18994: PPUSH
18995: CALL_OW 101
// m3 := true ;
18999: LD_ADDR_VAR 0 5
19003: PUSH
19004: LD_INT 1
19006: ST_TO_ADDR
// end else
19007: GO 19020
// AddMedal ( honour , - 1 ) ;
19009: LD_STRING honour
19011: PPUSH
19012: LD_INT 1
19014: NEG
19015: PPUSH
19016: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
19020: LD_VAR 0 3
19024: PUSH
19025: LD_VAR 0 4
19029: AND
19030: PUSH
19031: LD_VAR 0 5
19035: AND
19036: PUSH
19037: LD_OWVAR 67
19041: PUSH
19042: LD_INT 3
19044: GREATEREQUAL
19045: AND
19046: IFFALSE 19058
// SetAchievementEX ( ACH_AMER , 4 ) ;
19048: LD_STRING ACH_AMER
19050: PPUSH
19051: LD_INT 4
19053: PPUSH
19054: CALL_OW 564
// GiveMedals ( Main ) ;
19058: LD_STRING Main
19060: PPUSH
19061: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19065: LD_INT 22
19067: PUSH
19068: LD_INT 1
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 23
19077: PUSH
19078: LD_INT 1
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 21
19087: PUSH
19088: LD_INT 1
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: PPUSH
19100: CALL_OW 69
19104: PPUSH
19105: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19109: LD_EXP 1
19113: PPUSH
19114: LD_EXP 48
19118: PUSH
19119: LD_STRING JMM
19121: STR
19122: PPUSH
19123: CALL_OW 38
// if IsOK ( Bobby ) then
19127: LD_EXP 2
19131: PPUSH
19132: CALL_OW 302
19136: IFFALSE 19156
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19138: LD_EXP 2
19142: PPUSH
19143: LD_EXP 48
19147: PUSH
19148: LD_STRING Bobby
19150: STR
19151: PPUSH
19152: CALL_OW 38
// if IsOK ( Cyrus ) then
19156: LD_EXP 3
19160: PPUSH
19161: CALL_OW 302
19165: IFFALSE 19185
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19167: LD_EXP 3
19171: PPUSH
19172: LD_EXP 48
19176: PUSH
19177: LD_STRING Cyrus
19179: STR
19180: PPUSH
19181: CALL_OW 38
// if IsOK ( Lisa ) then
19185: LD_EXP 4
19189: PPUSH
19190: CALL_OW 302
19194: IFFALSE 19214
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19196: LD_EXP 4
19200: PPUSH
19201: LD_EXP 48
19205: PUSH
19206: LD_STRING Lisa
19208: STR
19209: PPUSH
19210: CALL_OW 38
// if IsOK ( Brown ) then
19214: LD_EXP 7
19218: PPUSH
19219: CALL_OW 302
19223: IFFALSE 19250
// begin ToLua ( enableBioCharacter(BIO_JEFF) ) ;
19225: LD_STRING enableBioCharacter(BIO_JEFF)
19227: PPUSH
19228: CALL_OW 559
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
19232: LD_EXP 7
19236: PPUSH
19237: LD_EXP 48
19241: PUSH
19242: LD_STRING Brown
19244: STR
19245: PPUSH
19246: CALL_OW 38
// end ; if not IsDead ( Donaldson ) then
19250: LD_EXP 13
19254: PPUSH
19255: CALL_OW 301
19259: NOT
19260: IFFALSE 19287
// begin ToLua ( enableBioCharacter(BIO_LUCY) ) ;
19262: LD_STRING enableBioCharacter(BIO_LUCY)
19264: PPUSH
19265: CALL_OW 559
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19269: LD_EXP 13
19273: PPUSH
19274: LD_EXP 48
19278: PUSH
19279: LD_STRING Donaldson
19281: STR
19282: PPUSH
19283: CALL_OW 38
// end ; if not IsDead ( Frank ) then
19287: LD_EXP 5
19291: PPUSH
19292: CALL_OW 301
19296: NOT
19297: IFFALSE 19317
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19299: LD_EXP 5
19303: PPUSH
19304: LD_EXP 48
19308: PUSH
19309: LD_STRING Frank
19311: STR
19312: PPUSH
19313: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19317: LD_INT 50
19319: PUSH
19320: EMPTY
19321: LIST
19322: PUSH
19323: LD_INT 22
19325: PUSH
19326: LD_INT 1
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 21
19335: PUSH
19336: LD_INT 1
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: LIST
19347: PPUSH
19348: CALL_OW 69
19352: PUSH
19353: LD_EXP 1
19357: PUSH
19358: LD_EXP 2
19362: PUSH
19363: LD_EXP 3
19367: PUSH
19368: LD_EXP 4
19372: PUSH
19373: LD_EXP 7
19377: PUSH
19378: LD_EXP 13
19382: PUSH
19383: LD_EXP 5
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: DIFF
19397: PPUSH
19398: LD_STRING 04_other_survivors
19400: PPUSH
19401: CALL_OW 38
// YouWin ;
19405: CALL_OW 103
// end ;
19409: LD_VAR 0 1
19413: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19414: LD_INT 0
19416: PPUSH
19417: PPUSH
19418: PPUSH
19419: PPUSH
// gammaBase = [ ] ;
19420: LD_ADDR_VAR 0 4
19424: PUSH
19425: EMPTY
19426: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19427: LD_ADDR_VAR 0 5
19431: PUSH
19432: LD_VAR 0 1
19436: PPUSH
19437: LD_INT 22
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 21
19449: PUSH
19450: LD_INT 3
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PPUSH
19461: CALL_OW 70
19465: ST_TO_ADDR
// for i in buildings do
19466: LD_ADDR_VAR 0 3
19470: PUSH
19471: LD_VAR 0 5
19475: PUSH
19476: FOR_IN
19477: IFFALSE 19814
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19479: LD_VAR 0 3
19483: PPUSH
19484: CALL_OW 266
19488: PUSH
19489: LD_INT 6
19491: PUSH
19492: LD_INT 7
19494: PUSH
19495: LD_INT 8
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: LIST
19502: IN
19503: IFFALSE 19617
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19505: LD_ADDR_VAR 0 4
19509: PUSH
19510: LD_VAR 0 4
19514: PUSH
19515: LD_VAR 0 3
19519: PPUSH
19520: CALL_OW 266
19524: PUSH
19525: LD_VAR 0 3
19529: PPUSH
19530: CALL_OW 250
19534: PUSH
19535: LD_VAR 0 3
19539: PPUSH
19540: CALL_OW 251
19544: PUSH
19545: LD_VAR 0 3
19549: PPUSH
19550: CALL_OW 254
19554: PUSH
19555: LD_VAR 0 3
19559: PPUSH
19560: CALL_OW 267
19564: PUSH
19565: LD_VAR 0 3
19569: PPUSH
19570: CALL_OW 248
19574: PUSH
19575: LD_VAR 0 3
19579: PPUSH
19580: LD_INT 1
19582: PPUSH
19583: CALL_OW 268
19587: PUSH
19588: LD_VAR 0 3
19592: PPUSH
19593: LD_INT 2
19595: PPUSH
19596: CALL_OW 268
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: PUSH
19611: EMPTY
19612: LIST
19613: ADD
19614: ST_TO_ADDR
19615: GO 19812
// if GetBType ( i ) in [ b_bunker ] then
19617: LD_VAR 0 3
19621: PPUSH
19622: CALL_OW 266
19626: PUSH
19627: LD_INT 32
19629: PUSH
19630: EMPTY
19631: LIST
19632: IN
19633: IFFALSE 19730
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19635: LD_ADDR_VAR 0 4
19639: PUSH
19640: LD_VAR 0 4
19644: PUSH
19645: LD_VAR 0 3
19649: PPUSH
19650: CALL_OW 266
19654: PUSH
19655: LD_VAR 0 3
19659: PPUSH
19660: CALL_OW 250
19664: PUSH
19665: LD_VAR 0 3
19669: PPUSH
19670: CALL_OW 251
19674: PUSH
19675: LD_VAR 0 3
19679: PPUSH
19680: CALL_OW 254
19684: PUSH
19685: LD_VAR 0 3
19689: PPUSH
19690: CALL_OW 267
19694: PUSH
19695: LD_VAR 0 3
19699: PPUSH
19700: CALL_OW 248
19704: PUSH
19705: LD_VAR 0 3
19709: PPUSH
19710: CALL_OW 269
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: PUSH
19724: EMPTY
19725: LIST
19726: ADD
19727: ST_TO_ADDR
19728: GO 19812
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19730: LD_ADDR_VAR 0 4
19734: PUSH
19735: LD_VAR 0 4
19739: PUSH
19740: LD_VAR 0 3
19744: PPUSH
19745: CALL_OW 266
19749: PUSH
19750: LD_VAR 0 3
19754: PPUSH
19755: CALL_OW 250
19759: PUSH
19760: LD_VAR 0 3
19764: PPUSH
19765: CALL_OW 251
19769: PUSH
19770: LD_VAR 0 3
19774: PPUSH
19775: CALL_OW 254
19779: PUSH
19780: LD_VAR 0 3
19784: PPUSH
19785: CALL_OW 267
19789: PUSH
19790: LD_VAR 0 3
19794: PPUSH
19795: CALL_OW 248
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: PUSH
19808: EMPTY
19809: LIST
19810: ADD
19811: ST_TO_ADDR
// end ;
19812: GO 19476
19814: POP
19815: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19816: LD_VAR 0 4
19820: PPUSH
19821: LD_STRING GammaBase
19823: PPUSH
19824: CALL_OW 39
// end ; end_of_file
19828: LD_VAR 0 2
19832: RET
// every 1 1$15 do
19833: GO 19835
19835: DISABLE
// begin if supply <= 13 and supply > 7 then
19836: LD_EXP 36
19840: PUSH
19841: LD_INT 13
19843: LESSEQUAL
19844: PUSH
19845: LD_EXP 36
19849: PUSH
19850: LD_INT 7
19852: GREATER
19853: AND
19854: IFFALSE 19877
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19856: LD_INT 3
19858: PPUSH
19859: LD_INT 5
19861: PPUSH
19862: CALL_OW 12
19866: PPUSH
19867: LD_INT 18
19869: PPUSH
19870: LD_INT 1
19872: PPUSH
19873: CALL_OW 55
// if supply <= 7 and supply > 4 then
19877: LD_EXP 36
19881: PUSH
19882: LD_INT 7
19884: LESSEQUAL
19885: PUSH
19886: LD_EXP 36
19890: PUSH
19891: LD_INT 4
19893: GREATER
19894: AND
19895: IFFALSE 19918
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19897: LD_INT 3
19899: PPUSH
19900: LD_INT 5
19902: PPUSH
19903: CALL_OW 12
19907: PPUSH
19908: LD_INT 19
19910: PPUSH
19911: LD_INT 1
19913: PPUSH
19914: CALL_OW 55
// if supply <= 4 and supply > 0 then
19918: LD_EXP 36
19922: PUSH
19923: LD_INT 4
19925: LESSEQUAL
19926: PUSH
19927: LD_EXP 36
19931: PUSH
19932: LD_INT 0
19934: GREATER
19935: AND
19936: IFFALSE 19959
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19938: LD_INT 3
19940: PPUSH
19941: LD_INT 5
19943: PPUSH
19944: CALL_OW 12
19948: PPUSH
19949: LD_INT 20
19951: PPUSH
19952: LD_INT 1
19954: PPUSH
19955: CALL_OW 55
// if supply then
19959: LD_EXP 36
19963: IFFALSE 19980
// begin supply = supply - 1 ;
19965: LD_ADDR_EXP 36
19969: PUSH
19970: LD_EXP 36
19974: PUSH
19975: LD_INT 1
19977: MINUS
19978: ST_TO_ADDR
// enable ;
19979: ENABLE
// end ; end ; end_of_file end_of_file
19980: END
// export globalGameSaveCounter ; every 0 0$1 do
19981: GO 19983
19983: DISABLE
// begin enable ;
19984: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19985: LD_STRING updateTimer(
19987: PUSH
19988: LD_OWVAR 1
19992: STR
19993: PUSH
19994: LD_STRING );
19996: STR
19997: PPUSH
19998: CALL_OW 559
// end ;
20002: END
// every 0 0$1 do
20003: GO 20005
20005: DISABLE
// begin globalGameSaveCounter := 0 ;
20006: LD_ADDR_EXP 50
20010: PUSH
20011: LD_INT 0
20013: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20014: LD_STRING setGameSaveCounter(0)
20016: PPUSH
20017: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20021: LD_STRING initStreamRollete();
20023: PPUSH
20024: CALL_OW 559
// InitStreamMode ;
20028: CALL 21354 0 0
// DefineStreamItems ( false ) ;
20032: LD_INT 0
20034: PPUSH
20035: CALL 21818 0 1
// end ;
20039: END
// export function SOS_MapStart ( ) ; begin
20040: LD_INT 0
20042: PPUSH
// if streamModeActive then
20043: LD_EXP 51
20047: IFFALSE 20056
// DefineStreamItems ( true ) ;
20049: LD_INT 1
20051: PPUSH
20052: CALL 21818 0 1
// UpdateLuaVariables ( ) ;
20056: CALL 20073 0 0
// UpdateFactoryWaypoints ( ) ;
20060: CALL 34687 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20064: CALL 34944 0 0
// end ;
20068: LD_VAR 0 1
20072: RET
// function UpdateLuaVariables ( ) ; begin
20073: LD_INT 0
20075: PPUSH
// if globalGameSaveCounter then
20076: LD_EXP 50
20080: IFFALSE 20114
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20082: LD_ADDR_EXP 50
20086: PUSH
20087: LD_EXP 50
20091: PPUSH
20092: CALL 79740 0 1
20096: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20097: LD_STRING setGameSaveCounter(
20099: PUSH
20100: LD_EXP 50
20104: STR
20105: PUSH
20106: LD_STRING )
20108: STR
20109: PPUSH
20110: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20114: LD_STRING setGameDifficulty(
20116: PUSH
20117: LD_OWVAR 67
20121: STR
20122: PUSH
20123: LD_STRING )
20125: STR
20126: PPUSH
20127: CALL_OW 559
// end ;
20131: LD_VAR 0 1
20135: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20136: LD_INT 0
20138: PPUSH
// if p2 = stream_mode then
20139: LD_VAR 0 2
20143: PUSH
20144: LD_INT 100
20146: EQUAL
20147: IFFALSE 21150
// begin if not StreamModeActive then
20149: LD_EXP 51
20153: NOT
20154: IFFALSE 20164
// StreamModeActive := true ;
20156: LD_ADDR_EXP 51
20160: PUSH
20161: LD_INT 1
20163: ST_TO_ADDR
// if p3 = 0 then
20164: LD_VAR 0 3
20168: PUSH
20169: LD_INT 0
20171: EQUAL
20172: IFFALSE 20178
// InitStreamMode ;
20174: CALL 21354 0 0
// if p3 = 1 then
20178: LD_VAR 0 3
20182: PUSH
20183: LD_INT 1
20185: EQUAL
20186: IFFALSE 20196
// sRocket := true ;
20188: LD_ADDR_EXP 56
20192: PUSH
20193: LD_INT 1
20195: ST_TO_ADDR
// if p3 = 2 then
20196: LD_VAR 0 3
20200: PUSH
20201: LD_INT 2
20203: EQUAL
20204: IFFALSE 20214
// sSpeed := true ;
20206: LD_ADDR_EXP 55
20210: PUSH
20211: LD_INT 1
20213: ST_TO_ADDR
// if p3 = 3 then
20214: LD_VAR 0 3
20218: PUSH
20219: LD_INT 3
20221: EQUAL
20222: IFFALSE 20232
// sEngine := true ;
20224: LD_ADDR_EXP 57
20228: PUSH
20229: LD_INT 1
20231: ST_TO_ADDR
// if p3 = 4 then
20232: LD_VAR 0 3
20236: PUSH
20237: LD_INT 4
20239: EQUAL
20240: IFFALSE 20250
// sSpec := true ;
20242: LD_ADDR_EXP 54
20246: PUSH
20247: LD_INT 1
20249: ST_TO_ADDR
// if p3 = 5 then
20250: LD_VAR 0 3
20254: PUSH
20255: LD_INT 5
20257: EQUAL
20258: IFFALSE 20268
// sLevel := true ;
20260: LD_ADDR_EXP 58
20264: PUSH
20265: LD_INT 1
20267: ST_TO_ADDR
// if p3 = 6 then
20268: LD_VAR 0 3
20272: PUSH
20273: LD_INT 6
20275: EQUAL
20276: IFFALSE 20286
// sArmoury := true ;
20278: LD_ADDR_EXP 59
20282: PUSH
20283: LD_INT 1
20285: ST_TO_ADDR
// if p3 = 7 then
20286: LD_VAR 0 3
20290: PUSH
20291: LD_INT 7
20293: EQUAL
20294: IFFALSE 20304
// sRadar := true ;
20296: LD_ADDR_EXP 60
20300: PUSH
20301: LD_INT 1
20303: ST_TO_ADDR
// if p3 = 8 then
20304: LD_VAR 0 3
20308: PUSH
20309: LD_INT 8
20311: EQUAL
20312: IFFALSE 20322
// sBunker := true ;
20314: LD_ADDR_EXP 61
20318: PUSH
20319: LD_INT 1
20321: ST_TO_ADDR
// if p3 = 9 then
20322: LD_VAR 0 3
20326: PUSH
20327: LD_INT 9
20329: EQUAL
20330: IFFALSE 20340
// sHack := true ;
20332: LD_ADDR_EXP 62
20336: PUSH
20337: LD_INT 1
20339: ST_TO_ADDR
// if p3 = 10 then
20340: LD_VAR 0 3
20344: PUSH
20345: LD_INT 10
20347: EQUAL
20348: IFFALSE 20358
// sFire := true ;
20350: LD_ADDR_EXP 63
20354: PUSH
20355: LD_INT 1
20357: ST_TO_ADDR
// if p3 = 11 then
20358: LD_VAR 0 3
20362: PUSH
20363: LD_INT 11
20365: EQUAL
20366: IFFALSE 20376
// sRefresh := true ;
20368: LD_ADDR_EXP 64
20372: PUSH
20373: LD_INT 1
20375: ST_TO_ADDR
// if p3 = 12 then
20376: LD_VAR 0 3
20380: PUSH
20381: LD_INT 12
20383: EQUAL
20384: IFFALSE 20394
// sExp := true ;
20386: LD_ADDR_EXP 65
20390: PUSH
20391: LD_INT 1
20393: ST_TO_ADDR
// if p3 = 13 then
20394: LD_VAR 0 3
20398: PUSH
20399: LD_INT 13
20401: EQUAL
20402: IFFALSE 20412
// sDepot := true ;
20404: LD_ADDR_EXP 66
20408: PUSH
20409: LD_INT 1
20411: ST_TO_ADDR
// if p3 = 14 then
20412: LD_VAR 0 3
20416: PUSH
20417: LD_INT 14
20419: EQUAL
20420: IFFALSE 20430
// sFlag := true ;
20422: LD_ADDR_EXP 67
20426: PUSH
20427: LD_INT 1
20429: ST_TO_ADDR
// if p3 = 15 then
20430: LD_VAR 0 3
20434: PUSH
20435: LD_INT 15
20437: EQUAL
20438: IFFALSE 20448
// sKamikadze := true ;
20440: LD_ADDR_EXP 75
20444: PUSH
20445: LD_INT 1
20447: ST_TO_ADDR
// if p3 = 16 then
20448: LD_VAR 0 3
20452: PUSH
20453: LD_INT 16
20455: EQUAL
20456: IFFALSE 20466
// sTroll := true ;
20458: LD_ADDR_EXP 76
20462: PUSH
20463: LD_INT 1
20465: ST_TO_ADDR
// if p3 = 17 then
20466: LD_VAR 0 3
20470: PUSH
20471: LD_INT 17
20473: EQUAL
20474: IFFALSE 20484
// sSlow := true ;
20476: LD_ADDR_EXP 77
20480: PUSH
20481: LD_INT 1
20483: ST_TO_ADDR
// if p3 = 18 then
20484: LD_VAR 0 3
20488: PUSH
20489: LD_INT 18
20491: EQUAL
20492: IFFALSE 20502
// sLack := true ;
20494: LD_ADDR_EXP 78
20498: PUSH
20499: LD_INT 1
20501: ST_TO_ADDR
// if p3 = 19 then
20502: LD_VAR 0 3
20506: PUSH
20507: LD_INT 19
20509: EQUAL
20510: IFFALSE 20520
// sTank := true ;
20512: LD_ADDR_EXP 80
20516: PUSH
20517: LD_INT 1
20519: ST_TO_ADDR
// if p3 = 20 then
20520: LD_VAR 0 3
20524: PUSH
20525: LD_INT 20
20527: EQUAL
20528: IFFALSE 20538
// sRemote := true ;
20530: LD_ADDR_EXP 81
20534: PUSH
20535: LD_INT 1
20537: ST_TO_ADDR
// if p3 = 21 then
20538: LD_VAR 0 3
20542: PUSH
20543: LD_INT 21
20545: EQUAL
20546: IFFALSE 20556
// sPowell := true ;
20548: LD_ADDR_EXP 82
20552: PUSH
20553: LD_INT 1
20555: ST_TO_ADDR
// if p3 = 22 then
20556: LD_VAR 0 3
20560: PUSH
20561: LD_INT 22
20563: EQUAL
20564: IFFALSE 20574
// sTeleport := true ;
20566: LD_ADDR_EXP 85
20570: PUSH
20571: LD_INT 1
20573: ST_TO_ADDR
// if p3 = 23 then
20574: LD_VAR 0 3
20578: PUSH
20579: LD_INT 23
20581: EQUAL
20582: IFFALSE 20592
// sOilTower := true ;
20584: LD_ADDR_EXP 87
20588: PUSH
20589: LD_INT 1
20591: ST_TO_ADDR
// if p3 = 24 then
20592: LD_VAR 0 3
20596: PUSH
20597: LD_INT 24
20599: EQUAL
20600: IFFALSE 20610
// sShovel := true ;
20602: LD_ADDR_EXP 88
20606: PUSH
20607: LD_INT 1
20609: ST_TO_ADDR
// if p3 = 25 then
20610: LD_VAR 0 3
20614: PUSH
20615: LD_INT 25
20617: EQUAL
20618: IFFALSE 20628
// sSheik := true ;
20620: LD_ADDR_EXP 89
20624: PUSH
20625: LD_INT 1
20627: ST_TO_ADDR
// if p3 = 26 then
20628: LD_VAR 0 3
20632: PUSH
20633: LD_INT 26
20635: EQUAL
20636: IFFALSE 20646
// sEarthquake := true ;
20638: LD_ADDR_EXP 91
20642: PUSH
20643: LD_INT 1
20645: ST_TO_ADDR
// if p3 = 27 then
20646: LD_VAR 0 3
20650: PUSH
20651: LD_INT 27
20653: EQUAL
20654: IFFALSE 20664
// sAI := true ;
20656: LD_ADDR_EXP 92
20660: PUSH
20661: LD_INT 1
20663: ST_TO_ADDR
// if p3 = 28 then
20664: LD_VAR 0 3
20668: PUSH
20669: LD_INT 28
20671: EQUAL
20672: IFFALSE 20682
// sCargo := true ;
20674: LD_ADDR_EXP 95
20678: PUSH
20679: LD_INT 1
20681: ST_TO_ADDR
// if p3 = 29 then
20682: LD_VAR 0 3
20686: PUSH
20687: LD_INT 29
20689: EQUAL
20690: IFFALSE 20700
// sDLaser := true ;
20692: LD_ADDR_EXP 96
20696: PUSH
20697: LD_INT 1
20699: ST_TO_ADDR
// if p3 = 30 then
20700: LD_VAR 0 3
20704: PUSH
20705: LD_INT 30
20707: EQUAL
20708: IFFALSE 20718
// sExchange := true ;
20710: LD_ADDR_EXP 97
20714: PUSH
20715: LD_INT 1
20717: ST_TO_ADDR
// if p3 = 31 then
20718: LD_VAR 0 3
20722: PUSH
20723: LD_INT 31
20725: EQUAL
20726: IFFALSE 20736
// sFac := true ;
20728: LD_ADDR_EXP 98
20732: PUSH
20733: LD_INT 1
20735: ST_TO_ADDR
// if p3 = 32 then
20736: LD_VAR 0 3
20740: PUSH
20741: LD_INT 32
20743: EQUAL
20744: IFFALSE 20754
// sPower := true ;
20746: LD_ADDR_EXP 99
20750: PUSH
20751: LD_INT 1
20753: ST_TO_ADDR
// if p3 = 33 then
20754: LD_VAR 0 3
20758: PUSH
20759: LD_INT 33
20761: EQUAL
20762: IFFALSE 20772
// sRandom := true ;
20764: LD_ADDR_EXP 100
20768: PUSH
20769: LD_INT 1
20771: ST_TO_ADDR
// if p3 = 34 then
20772: LD_VAR 0 3
20776: PUSH
20777: LD_INT 34
20779: EQUAL
20780: IFFALSE 20790
// sShield := true ;
20782: LD_ADDR_EXP 101
20786: PUSH
20787: LD_INT 1
20789: ST_TO_ADDR
// if p3 = 35 then
20790: LD_VAR 0 3
20794: PUSH
20795: LD_INT 35
20797: EQUAL
20798: IFFALSE 20808
// sTime := true ;
20800: LD_ADDR_EXP 102
20804: PUSH
20805: LD_INT 1
20807: ST_TO_ADDR
// if p3 = 36 then
20808: LD_VAR 0 3
20812: PUSH
20813: LD_INT 36
20815: EQUAL
20816: IFFALSE 20826
// sTools := true ;
20818: LD_ADDR_EXP 103
20822: PUSH
20823: LD_INT 1
20825: ST_TO_ADDR
// if p3 = 101 then
20826: LD_VAR 0 3
20830: PUSH
20831: LD_INT 101
20833: EQUAL
20834: IFFALSE 20844
// sSold := true ;
20836: LD_ADDR_EXP 68
20840: PUSH
20841: LD_INT 1
20843: ST_TO_ADDR
// if p3 = 102 then
20844: LD_VAR 0 3
20848: PUSH
20849: LD_INT 102
20851: EQUAL
20852: IFFALSE 20862
// sDiff := true ;
20854: LD_ADDR_EXP 69
20858: PUSH
20859: LD_INT 1
20861: ST_TO_ADDR
// if p3 = 103 then
20862: LD_VAR 0 3
20866: PUSH
20867: LD_INT 103
20869: EQUAL
20870: IFFALSE 20880
// sFog := true ;
20872: LD_ADDR_EXP 72
20876: PUSH
20877: LD_INT 1
20879: ST_TO_ADDR
// if p3 = 104 then
20880: LD_VAR 0 3
20884: PUSH
20885: LD_INT 104
20887: EQUAL
20888: IFFALSE 20898
// sReset := true ;
20890: LD_ADDR_EXP 73
20894: PUSH
20895: LD_INT 1
20897: ST_TO_ADDR
// if p3 = 105 then
20898: LD_VAR 0 3
20902: PUSH
20903: LD_INT 105
20905: EQUAL
20906: IFFALSE 20916
// sSun := true ;
20908: LD_ADDR_EXP 74
20912: PUSH
20913: LD_INT 1
20915: ST_TO_ADDR
// if p3 = 106 then
20916: LD_VAR 0 3
20920: PUSH
20921: LD_INT 106
20923: EQUAL
20924: IFFALSE 20934
// sTiger := true ;
20926: LD_ADDR_EXP 70
20930: PUSH
20931: LD_INT 1
20933: ST_TO_ADDR
// if p3 = 107 then
20934: LD_VAR 0 3
20938: PUSH
20939: LD_INT 107
20941: EQUAL
20942: IFFALSE 20952
// sBomb := true ;
20944: LD_ADDR_EXP 71
20948: PUSH
20949: LD_INT 1
20951: ST_TO_ADDR
// if p3 = 108 then
20952: LD_VAR 0 3
20956: PUSH
20957: LD_INT 108
20959: EQUAL
20960: IFFALSE 20970
// sWound := true ;
20962: LD_ADDR_EXP 79
20966: PUSH
20967: LD_INT 1
20969: ST_TO_ADDR
// if p3 = 109 then
20970: LD_VAR 0 3
20974: PUSH
20975: LD_INT 109
20977: EQUAL
20978: IFFALSE 20988
// sBetray := true ;
20980: LD_ADDR_EXP 83
20984: PUSH
20985: LD_INT 1
20987: ST_TO_ADDR
// if p3 = 110 then
20988: LD_VAR 0 3
20992: PUSH
20993: LD_INT 110
20995: EQUAL
20996: IFFALSE 21006
// sContamin := true ;
20998: LD_ADDR_EXP 84
21002: PUSH
21003: LD_INT 1
21005: ST_TO_ADDR
// if p3 = 111 then
21006: LD_VAR 0 3
21010: PUSH
21011: LD_INT 111
21013: EQUAL
21014: IFFALSE 21024
// sOil := true ;
21016: LD_ADDR_EXP 86
21020: PUSH
21021: LD_INT 1
21023: ST_TO_ADDR
// if p3 = 112 then
21024: LD_VAR 0 3
21028: PUSH
21029: LD_INT 112
21031: EQUAL
21032: IFFALSE 21042
// sStu := true ;
21034: LD_ADDR_EXP 90
21038: PUSH
21039: LD_INT 1
21041: ST_TO_ADDR
// if p3 = 113 then
21042: LD_VAR 0 3
21046: PUSH
21047: LD_INT 113
21049: EQUAL
21050: IFFALSE 21060
// sBazooka := true ;
21052: LD_ADDR_EXP 93
21056: PUSH
21057: LD_INT 1
21059: ST_TO_ADDR
// if p3 = 114 then
21060: LD_VAR 0 3
21064: PUSH
21065: LD_INT 114
21067: EQUAL
21068: IFFALSE 21078
// sMortar := true ;
21070: LD_ADDR_EXP 94
21074: PUSH
21075: LD_INT 1
21077: ST_TO_ADDR
// if p3 = 115 then
21078: LD_VAR 0 3
21082: PUSH
21083: LD_INT 115
21085: EQUAL
21086: IFFALSE 21096
// sRanger := true ;
21088: LD_ADDR_EXP 104
21092: PUSH
21093: LD_INT 1
21095: ST_TO_ADDR
// if p3 = 116 then
21096: LD_VAR 0 3
21100: PUSH
21101: LD_INT 116
21103: EQUAL
21104: IFFALSE 21114
// sComputer := true ;
21106: LD_ADDR_EXP 105
21110: PUSH
21111: LD_INT 1
21113: ST_TO_ADDR
// if p3 = 117 then
21114: LD_VAR 0 3
21118: PUSH
21119: LD_INT 117
21121: EQUAL
21122: IFFALSE 21132
// s30 := true ;
21124: LD_ADDR_EXP 106
21128: PUSH
21129: LD_INT 1
21131: ST_TO_ADDR
// if p3 = 118 then
21132: LD_VAR 0 3
21136: PUSH
21137: LD_INT 118
21139: EQUAL
21140: IFFALSE 21150
// s60 := true ;
21142: LD_ADDR_EXP 107
21146: PUSH
21147: LD_INT 1
21149: ST_TO_ADDR
// end ; if p2 = hack_mode then
21150: LD_VAR 0 2
21154: PUSH
21155: LD_INT 101
21157: EQUAL
21158: IFFALSE 21286
// begin case p3 of 1 :
21160: LD_VAR 0 3
21164: PUSH
21165: LD_INT 1
21167: DOUBLE
21168: EQUAL
21169: IFTRUE 21173
21171: GO 21180
21173: POP
// hHackUnlimitedResources ; 2 :
21174: CALL 33433 0 0
21178: GO 21286
21180: LD_INT 2
21182: DOUBLE
21183: EQUAL
21184: IFTRUE 21188
21186: GO 21195
21188: POP
// hHackSetLevel10 ; 3 :
21189: CALL 33566 0 0
21193: GO 21286
21195: LD_INT 3
21197: DOUBLE
21198: EQUAL
21199: IFTRUE 21203
21201: GO 21210
21203: POP
// hHackSetLevel10YourUnits ; 4 :
21204: CALL 33651 0 0
21208: GO 21286
21210: LD_INT 4
21212: DOUBLE
21213: EQUAL
21214: IFTRUE 21218
21216: GO 21225
21218: POP
// hHackInvincible ; 5 :
21219: CALL 34099 0 0
21223: GO 21286
21225: LD_INT 5
21227: DOUBLE
21228: EQUAL
21229: IFTRUE 21233
21231: GO 21240
21233: POP
// hHackInvisible ; 6 :
21234: CALL 34210 0 0
21238: GO 21286
21240: LD_INT 6
21242: DOUBLE
21243: EQUAL
21244: IFTRUE 21248
21246: GO 21255
21248: POP
// hHackChangeYourSide ; 7 :
21249: CALL 34267 0 0
21253: GO 21286
21255: LD_INT 7
21257: DOUBLE
21258: EQUAL
21259: IFTRUE 21263
21261: GO 21270
21263: POP
// hHackChangeUnitSide ; 8 :
21264: CALL 34309 0 0
21268: GO 21286
21270: LD_INT 8
21272: DOUBLE
21273: EQUAL
21274: IFTRUE 21278
21276: GO 21285
21278: POP
// hHackFog ; end ;
21279: CALL 34410 0 0
21283: GO 21286
21285: POP
// end ; if p2 = game_save_mode then
21286: LD_VAR 0 2
21290: PUSH
21291: LD_INT 102
21293: EQUAL
21294: IFFALSE 21349
// begin if p3 = 1 then
21296: LD_VAR 0 3
21300: PUSH
21301: LD_INT 1
21303: EQUAL
21304: IFFALSE 21316
// globalGameSaveCounter := p4 ;
21306: LD_ADDR_EXP 50
21310: PUSH
21311: LD_VAR 0 4
21315: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21316: LD_VAR 0 3
21320: PUSH
21321: LD_INT 2
21323: EQUAL
21324: PUSH
21325: LD_EXP 50
21329: AND
21330: IFFALSE 21349
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21332: LD_STRING setGameSaveCounter(
21334: PUSH
21335: LD_EXP 50
21339: STR
21340: PUSH
21341: LD_STRING )
21343: STR
21344: PPUSH
21345: CALL_OW 559
// end ; end ;
21349: LD_VAR 0 7
21353: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21354: LD_INT 0
21356: PPUSH
// streamModeActive := false ;
21357: LD_ADDR_EXP 51
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// normalCounter := 36 ;
21365: LD_ADDR_EXP 52
21369: PUSH
21370: LD_INT 36
21372: ST_TO_ADDR
// hardcoreCounter := 18 ;
21373: LD_ADDR_EXP 53
21377: PUSH
21378: LD_INT 18
21380: ST_TO_ADDR
// sRocket := false ;
21381: LD_ADDR_EXP 56
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// sSpeed := false ;
21389: LD_ADDR_EXP 55
21393: PUSH
21394: LD_INT 0
21396: ST_TO_ADDR
// sEngine := false ;
21397: LD_ADDR_EXP 57
21401: PUSH
21402: LD_INT 0
21404: ST_TO_ADDR
// sSpec := false ;
21405: LD_ADDR_EXP 54
21409: PUSH
21410: LD_INT 0
21412: ST_TO_ADDR
// sLevel := false ;
21413: LD_ADDR_EXP 58
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// sArmoury := false ;
21421: LD_ADDR_EXP 59
21425: PUSH
21426: LD_INT 0
21428: ST_TO_ADDR
// sRadar := false ;
21429: LD_ADDR_EXP 60
21433: PUSH
21434: LD_INT 0
21436: ST_TO_ADDR
// sBunker := false ;
21437: LD_ADDR_EXP 61
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
// sHack := false ;
21445: LD_ADDR_EXP 62
21449: PUSH
21450: LD_INT 0
21452: ST_TO_ADDR
// sFire := false ;
21453: LD_ADDR_EXP 63
21457: PUSH
21458: LD_INT 0
21460: ST_TO_ADDR
// sRefresh := false ;
21461: LD_ADDR_EXP 64
21465: PUSH
21466: LD_INT 0
21468: ST_TO_ADDR
// sExp := false ;
21469: LD_ADDR_EXP 65
21473: PUSH
21474: LD_INT 0
21476: ST_TO_ADDR
// sDepot := false ;
21477: LD_ADDR_EXP 66
21481: PUSH
21482: LD_INT 0
21484: ST_TO_ADDR
// sFlag := false ;
21485: LD_ADDR_EXP 67
21489: PUSH
21490: LD_INT 0
21492: ST_TO_ADDR
// sKamikadze := false ;
21493: LD_ADDR_EXP 75
21497: PUSH
21498: LD_INT 0
21500: ST_TO_ADDR
// sTroll := false ;
21501: LD_ADDR_EXP 76
21505: PUSH
21506: LD_INT 0
21508: ST_TO_ADDR
// sSlow := false ;
21509: LD_ADDR_EXP 77
21513: PUSH
21514: LD_INT 0
21516: ST_TO_ADDR
// sLack := false ;
21517: LD_ADDR_EXP 78
21521: PUSH
21522: LD_INT 0
21524: ST_TO_ADDR
// sTank := false ;
21525: LD_ADDR_EXP 80
21529: PUSH
21530: LD_INT 0
21532: ST_TO_ADDR
// sRemote := false ;
21533: LD_ADDR_EXP 81
21537: PUSH
21538: LD_INT 0
21540: ST_TO_ADDR
// sPowell := false ;
21541: LD_ADDR_EXP 82
21545: PUSH
21546: LD_INT 0
21548: ST_TO_ADDR
// sTeleport := false ;
21549: LD_ADDR_EXP 85
21553: PUSH
21554: LD_INT 0
21556: ST_TO_ADDR
// sOilTower := false ;
21557: LD_ADDR_EXP 87
21561: PUSH
21562: LD_INT 0
21564: ST_TO_ADDR
// sShovel := false ;
21565: LD_ADDR_EXP 88
21569: PUSH
21570: LD_INT 0
21572: ST_TO_ADDR
// sSheik := false ;
21573: LD_ADDR_EXP 89
21577: PUSH
21578: LD_INT 0
21580: ST_TO_ADDR
// sEarthquake := false ;
21581: LD_ADDR_EXP 91
21585: PUSH
21586: LD_INT 0
21588: ST_TO_ADDR
// sAI := false ;
21589: LD_ADDR_EXP 92
21593: PUSH
21594: LD_INT 0
21596: ST_TO_ADDR
// sCargo := false ;
21597: LD_ADDR_EXP 95
21601: PUSH
21602: LD_INT 0
21604: ST_TO_ADDR
// sDLaser := false ;
21605: LD_ADDR_EXP 96
21609: PUSH
21610: LD_INT 0
21612: ST_TO_ADDR
// sExchange := false ;
21613: LD_ADDR_EXP 97
21617: PUSH
21618: LD_INT 0
21620: ST_TO_ADDR
// sFac := false ;
21621: LD_ADDR_EXP 98
21625: PUSH
21626: LD_INT 0
21628: ST_TO_ADDR
// sPower := false ;
21629: LD_ADDR_EXP 99
21633: PUSH
21634: LD_INT 0
21636: ST_TO_ADDR
// sRandom := false ;
21637: LD_ADDR_EXP 100
21641: PUSH
21642: LD_INT 0
21644: ST_TO_ADDR
// sShield := false ;
21645: LD_ADDR_EXP 101
21649: PUSH
21650: LD_INT 0
21652: ST_TO_ADDR
// sTime := false ;
21653: LD_ADDR_EXP 102
21657: PUSH
21658: LD_INT 0
21660: ST_TO_ADDR
// sTools := false ;
21661: LD_ADDR_EXP 103
21665: PUSH
21666: LD_INT 0
21668: ST_TO_ADDR
// sSold := false ;
21669: LD_ADDR_EXP 68
21673: PUSH
21674: LD_INT 0
21676: ST_TO_ADDR
// sDiff := false ;
21677: LD_ADDR_EXP 69
21681: PUSH
21682: LD_INT 0
21684: ST_TO_ADDR
// sFog := false ;
21685: LD_ADDR_EXP 72
21689: PUSH
21690: LD_INT 0
21692: ST_TO_ADDR
// sReset := false ;
21693: LD_ADDR_EXP 73
21697: PUSH
21698: LD_INT 0
21700: ST_TO_ADDR
// sSun := false ;
21701: LD_ADDR_EXP 74
21705: PUSH
21706: LD_INT 0
21708: ST_TO_ADDR
// sTiger := false ;
21709: LD_ADDR_EXP 70
21713: PUSH
21714: LD_INT 0
21716: ST_TO_ADDR
// sBomb := false ;
21717: LD_ADDR_EXP 71
21721: PUSH
21722: LD_INT 0
21724: ST_TO_ADDR
// sWound := false ;
21725: LD_ADDR_EXP 79
21729: PUSH
21730: LD_INT 0
21732: ST_TO_ADDR
// sBetray := false ;
21733: LD_ADDR_EXP 83
21737: PUSH
21738: LD_INT 0
21740: ST_TO_ADDR
// sContamin := false ;
21741: LD_ADDR_EXP 84
21745: PUSH
21746: LD_INT 0
21748: ST_TO_ADDR
// sOil := false ;
21749: LD_ADDR_EXP 86
21753: PUSH
21754: LD_INT 0
21756: ST_TO_ADDR
// sStu := false ;
21757: LD_ADDR_EXP 90
21761: PUSH
21762: LD_INT 0
21764: ST_TO_ADDR
// sBazooka := false ;
21765: LD_ADDR_EXP 93
21769: PUSH
21770: LD_INT 0
21772: ST_TO_ADDR
// sMortar := false ;
21773: LD_ADDR_EXP 94
21777: PUSH
21778: LD_INT 0
21780: ST_TO_ADDR
// sRanger := false ;
21781: LD_ADDR_EXP 104
21785: PUSH
21786: LD_INT 0
21788: ST_TO_ADDR
// sComputer := false ;
21789: LD_ADDR_EXP 105
21793: PUSH
21794: LD_INT 0
21796: ST_TO_ADDR
// s30 := false ;
21797: LD_ADDR_EXP 106
21801: PUSH
21802: LD_INT 0
21804: ST_TO_ADDR
// s60 := false ;
21805: LD_ADDR_EXP 107
21809: PUSH
21810: LD_INT 0
21812: ST_TO_ADDR
// end ;
21813: LD_VAR 0 1
21817: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21818: LD_INT 0
21820: PPUSH
21821: PPUSH
21822: PPUSH
21823: PPUSH
21824: PPUSH
21825: PPUSH
21826: PPUSH
// result := [ ] ;
21827: LD_ADDR_VAR 0 2
21831: PUSH
21832: EMPTY
21833: ST_TO_ADDR
// if campaign_id = 1 then
21834: LD_OWVAR 69
21838: PUSH
21839: LD_INT 1
21841: EQUAL
21842: IFFALSE 25008
// begin case mission_number of 1 :
21844: LD_OWVAR 70
21848: PUSH
21849: LD_INT 1
21851: DOUBLE
21852: EQUAL
21853: IFTRUE 21857
21855: GO 21933
21857: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21858: LD_ADDR_VAR 0 2
21862: PUSH
21863: LD_INT 2
21865: PUSH
21866: LD_INT 4
21868: PUSH
21869: LD_INT 11
21871: PUSH
21872: LD_INT 12
21874: PUSH
21875: LD_INT 15
21877: PUSH
21878: LD_INT 16
21880: PUSH
21881: LD_INT 22
21883: PUSH
21884: LD_INT 23
21886: PUSH
21887: LD_INT 26
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 101
21903: PUSH
21904: LD_INT 102
21906: PUSH
21907: LD_INT 106
21909: PUSH
21910: LD_INT 116
21912: PUSH
21913: LD_INT 117
21915: PUSH
21916: LD_INT 118
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: ST_TO_ADDR
21931: GO 25006
21933: LD_INT 2
21935: DOUBLE
21936: EQUAL
21937: IFTRUE 21941
21939: GO 22025
21941: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21942: LD_ADDR_VAR 0 2
21946: PUSH
21947: LD_INT 2
21949: PUSH
21950: LD_INT 4
21952: PUSH
21953: LD_INT 11
21955: PUSH
21956: LD_INT 12
21958: PUSH
21959: LD_INT 15
21961: PUSH
21962: LD_INT 16
21964: PUSH
21965: LD_INT 22
21967: PUSH
21968: LD_INT 23
21970: PUSH
21971: LD_INT 26
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 101
21987: PUSH
21988: LD_INT 102
21990: PUSH
21991: LD_INT 105
21993: PUSH
21994: LD_INT 106
21996: PUSH
21997: LD_INT 108
21999: PUSH
22000: LD_INT 116
22002: PUSH
22003: LD_INT 117
22005: PUSH
22006: LD_INT 118
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: ST_TO_ADDR
22023: GO 25006
22025: LD_INT 3
22027: DOUBLE
22028: EQUAL
22029: IFTRUE 22033
22031: GO 22121
22033: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22034: LD_ADDR_VAR 0 2
22038: PUSH
22039: LD_INT 2
22041: PUSH
22042: LD_INT 4
22044: PUSH
22045: LD_INT 5
22047: PUSH
22048: LD_INT 11
22050: PUSH
22051: LD_INT 12
22053: PUSH
22054: LD_INT 15
22056: PUSH
22057: LD_INT 16
22059: PUSH
22060: LD_INT 22
22062: PUSH
22063: LD_INT 26
22065: PUSH
22066: LD_INT 36
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 101
22083: PUSH
22084: LD_INT 102
22086: PUSH
22087: LD_INT 105
22089: PUSH
22090: LD_INT 106
22092: PUSH
22093: LD_INT 108
22095: PUSH
22096: LD_INT 116
22098: PUSH
22099: LD_INT 117
22101: PUSH
22102: LD_INT 118
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: ST_TO_ADDR
22119: GO 25006
22121: LD_INT 4
22123: DOUBLE
22124: EQUAL
22125: IFTRUE 22129
22127: GO 22225
22129: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22130: LD_ADDR_VAR 0 2
22134: PUSH
22135: LD_INT 2
22137: PUSH
22138: LD_INT 4
22140: PUSH
22141: LD_INT 5
22143: PUSH
22144: LD_INT 8
22146: PUSH
22147: LD_INT 11
22149: PUSH
22150: LD_INT 12
22152: PUSH
22153: LD_INT 15
22155: PUSH
22156: LD_INT 16
22158: PUSH
22159: LD_INT 22
22161: PUSH
22162: LD_INT 23
22164: PUSH
22165: LD_INT 26
22167: PUSH
22168: LD_INT 36
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 101
22187: PUSH
22188: LD_INT 102
22190: PUSH
22191: LD_INT 105
22193: PUSH
22194: LD_INT 106
22196: PUSH
22197: LD_INT 108
22199: PUSH
22200: LD_INT 116
22202: PUSH
22203: LD_INT 117
22205: PUSH
22206: LD_INT 118
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: ST_TO_ADDR
22223: GO 25006
22225: LD_INT 5
22227: DOUBLE
22228: EQUAL
22229: IFTRUE 22233
22231: GO 22345
22233: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22234: LD_ADDR_VAR 0 2
22238: PUSH
22239: LD_INT 2
22241: PUSH
22242: LD_INT 4
22244: PUSH
22245: LD_INT 5
22247: PUSH
22248: LD_INT 6
22250: PUSH
22251: LD_INT 8
22253: PUSH
22254: LD_INT 11
22256: PUSH
22257: LD_INT 12
22259: PUSH
22260: LD_INT 15
22262: PUSH
22263: LD_INT 16
22265: PUSH
22266: LD_INT 22
22268: PUSH
22269: LD_INT 23
22271: PUSH
22272: LD_INT 25
22274: PUSH
22275: LD_INT 26
22277: PUSH
22278: LD_INT 36
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 101
22299: PUSH
22300: LD_INT 102
22302: PUSH
22303: LD_INT 105
22305: PUSH
22306: LD_INT 106
22308: PUSH
22309: LD_INT 108
22311: PUSH
22312: LD_INT 109
22314: PUSH
22315: LD_INT 112
22317: PUSH
22318: LD_INT 116
22320: PUSH
22321: LD_INT 117
22323: PUSH
22324: LD_INT 118
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: ST_TO_ADDR
22343: GO 25006
22345: LD_INT 6
22347: DOUBLE
22348: EQUAL
22349: IFTRUE 22353
22351: GO 22485
22353: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22354: LD_ADDR_VAR 0 2
22358: PUSH
22359: LD_INT 2
22361: PUSH
22362: LD_INT 4
22364: PUSH
22365: LD_INT 5
22367: PUSH
22368: LD_INT 6
22370: PUSH
22371: LD_INT 8
22373: PUSH
22374: LD_INT 11
22376: PUSH
22377: LD_INT 12
22379: PUSH
22380: LD_INT 15
22382: PUSH
22383: LD_INT 16
22385: PUSH
22386: LD_INT 20
22388: PUSH
22389: LD_INT 21
22391: PUSH
22392: LD_INT 22
22394: PUSH
22395: LD_INT 23
22397: PUSH
22398: LD_INT 25
22400: PUSH
22401: LD_INT 26
22403: PUSH
22404: LD_INT 30
22406: PUSH
22407: LD_INT 31
22409: PUSH
22410: LD_INT 32
22412: PUSH
22413: LD_INT 36
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 101
22439: PUSH
22440: LD_INT 102
22442: PUSH
22443: LD_INT 105
22445: PUSH
22446: LD_INT 106
22448: PUSH
22449: LD_INT 108
22451: PUSH
22452: LD_INT 109
22454: PUSH
22455: LD_INT 112
22457: PUSH
22458: LD_INT 116
22460: PUSH
22461: LD_INT 117
22463: PUSH
22464: LD_INT 118
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: ST_TO_ADDR
22483: GO 25006
22485: LD_INT 7
22487: DOUBLE
22488: EQUAL
22489: IFTRUE 22493
22491: GO 22605
22493: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22494: LD_ADDR_VAR 0 2
22498: PUSH
22499: LD_INT 2
22501: PUSH
22502: LD_INT 4
22504: PUSH
22505: LD_INT 5
22507: PUSH
22508: LD_INT 7
22510: PUSH
22511: LD_INT 11
22513: PUSH
22514: LD_INT 12
22516: PUSH
22517: LD_INT 15
22519: PUSH
22520: LD_INT 16
22522: PUSH
22523: LD_INT 20
22525: PUSH
22526: LD_INT 21
22528: PUSH
22529: LD_INT 22
22531: PUSH
22532: LD_INT 23
22534: PUSH
22535: LD_INT 25
22537: PUSH
22538: LD_INT 26
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 101
22559: PUSH
22560: LD_INT 102
22562: PUSH
22563: LD_INT 103
22565: PUSH
22566: LD_INT 105
22568: PUSH
22569: LD_INT 106
22571: PUSH
22572: LD_INT 108
22574: PUSH
22575: LD_INT 112
22577: PUSH
22578: LD_INT 116
22580: PUSH
22581: LD_INT 117
22583: PUSH
22584: LD_INT 118
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: ST_TO_ADDR
22603: GO 25006
22605: LD_INT 8
22607: DOUBLE
22608: EQUAL
22609: IFTRUE 22613
22611: GO 22753
22613: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22614: LD_ADDR_VAR 0 2
22618: PUSH
22619: LD_INT 2
22621: PUSH
22622: LD_INT 4
22624: PUSH
22625: LD_INT 5
22627: PUSH
22628: LD_INT 6
22630: PUSH
22631: LD_INT 7
22633: PUSH
22634: LD_INT 8
22636: PUSH
22637: LD_INT 11
22639: PUSH
22640: LD_INT 12
22642: PUSH
22643: LD_INT 15
22645: PUSH
22646: LD_INT 16
22648: PUSH
22649: LD_INT 20
22651: PUSH
22652: LD_INT 21
22654: PUSH
22655: LD_INT 22
22657: PUSH
22658: LD_INT 23
22660: PUSH
22661: LD_INT 25
22663: PUSH
22664: LD_INT 26
22666: PUSH
22667: LD_INT 30
22669: PUSH
22670: LD_INT 31
22672: PUSH
22673: LD_INT 32
22675: PUSH
22676: LD_INT 36
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 101
22703: PUSH
22704: LD_INT 102
22706: PUSH
22707: LD_INT 103
22709: PUSH
22710: LD_INT 105
22712: PUSH
22713: LD_INT 106
22715: PUSH
22716: LD_INT 108
22718: PUSH
22719: LD_INT 109
22721: PUSH
22722: LD_INT 112
22724: PUSH
22725: LD_INT 116
22727: PUSH
22728: LD_INT 117
22730: PUSH
22731: LD_INT 118
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: ST_TO_ADDR
22751: GO 25006
22753: LD_INT 9
22755: DOUBLE
22756: EQUAL
22757: IFTRUE 22761
22759: GO 22909
22761: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22762: LD_ADDR_VAR 0 2
22766: PUSH
22767: LD_INT 2
22769: PUSH
22770: LD_INT 4
22772: PUSH
22773: LD_INT 5
22775: PUSH
22776: LD_INT 6
22778: PUSH
22779: LD_INT 7
22781: PUSH
22782: LD_INT 8
22784: PUSH
22785: LD_INT 11
22787: PUSH
22788: LD_INT 12
22790: PUSH
22791: LD_INT 15
22793: PUSH
22794: LD_INT 16
22796: PUSH
22797: LD_INT 20
22799: PUSH
22800: LD_INT 21
22802: PUSH
22803: LD_INT 22
22805: PUSH
22806: LD_INT 23
22808: PUSH
22809: LD_INT 25
22811: PUSH
22812: LD_INT 26
22814: PUSH
22815: LD_INT 28
22817: PUSH
22818: LD_INT 30
22820: PUSH
22821: LD_INT 31
22823: PUSH
22824: LD_INT 32
22826: PUSH
22827: LD_INT 36
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 101
22855: PUSH
22856: LD_INT 102
22858: PUSH
22859: LD_INT 103
22861: PUSH
22862: LD_INT 105
22864: PUSH
22865: LD_INT 106
22867: PUSH
22868: LD_INT 108
22870: PUSH
22871: LD_INT 109
22873: PUSH
22874: LD_INT 112
22876: PUSH
22877: LD_INT 114
22879: PUSH
22880: LD_INT 116
22882: PUSH
22883: LD_INT 117
22885: PUSH
22886: LD_INT 118
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: ST_TO_ADDR
22907: GO 25006
22909: LD_INT 10
22911: DOUBLE
22912: EQUAL
22913: IFTRUE 22917
22915: GO 23113
22917: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22918: LD_ADDR_VAR 0 2
22922: PUSH
22923: LD_INT 2
22925: PUSH
22926: LD_INT 4
22928: PUSH
22929: LD_INT 5
22931: PUSH
22932: LD_INT 6
22934: PUSH
22935: LD_INT 7
22937: PUSH
22938: LD_INT 8
22940: PUSH
22941: LD_INT 9
22943: PUSH
22944: LD_INT 10
22946: PUSH
22947: LD_INT 11
22949: PUSH
22950: LD_INT 12
22952: PUSH
22953: LD_INT 13
22955: PUSH
22956: LD_INT 14
22958: PUSH
22959: LD_INT 15
22961: PUSH
22962: LD_INT 16
22964: PUSH
22965: LD_INT 17
22967: PUSH
22968: LD_INT 18
22970: PUSH
22971: LD_INT 19
22973: PUSH
22974: LD_INT 20
22976: PUSH
22977: LD_INT 21
22979: PUSH
22980: LD_INT 22
22982: PUSH
22983: LD_INT 23
22985: PUSH
22986: LD_INT 24
22988: PUSH
22989: LD_INT 25
22991: PUSH
22992: LD_INT 26
22994: PUSH
22995: LD_INT 28
22997: PUSH
22998: LD_INT 30
23000: PUSH
23001: LD_INT 31
23003: PUSH
23004: LD_INT 32
23006: PUSH
23007: LD_INT 36
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 101
23043: PUSH
23044: LD_INT 102
23046: PUSH
23047: LD_INT 103
23049: PUSH
23050: LD_INT 104
23052: PUSH
23053: LD_INT 105
23055: PUSH
23056: LD_INT 106
23058: PUSH
23059: LD_INT 107
23061: PUSH
23062: LD_INT 108
23064: PUSH
23065: LD_INT 109
23067: PUSH
23068: LD_INT 110
23070: PUSH
23071: LD_INT 111
23073: PUSH
23074: LD_INT 112
23076: PUSH
23077: LD_INT 114
23079: PUSH
23080: LD_INT 116
23082: PUSH
23083: LD_INT 117
23085: PUSH
23086: LD_INT 118
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: ST_TO_ADDR
23111: GO 25006
23113: LD_INT 11
23115: DOUBLE
23116: EQUAL
23117: IFTRUE 23121
23119: GO 23325
23121: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23122: LD_ADDR_VAR 0 2
23126: PUSH
23127: LD_INT 2
23129: PUSH
23130: LD_INT 3
23132: PUSH
23133: LD_INT 4
23135: PUSH
23136: LD_INT 5
23138: PUSH
23139: LD_INT 6
23141: PUSH
23142: LD_INT 7
23144: PUSH
23145: LD_INT 8
23147: PUSH
23148: LD_INT 9
23150: PUSH
23151: LD_INT 10
23153: PUSH
23154: LD_INT 11
23156: PUSH
23157: LD_INT 12
23159: PUSH
23160: LD_INT 13
23162: PUSH
23163: LD_INT 14
23165: PUSH
23166: LD_INT 15
23168: PUSH
23169: LD_INT 16
23171: PUSH
23172: LD_INT 17
23174: PUSH
23175: LD_INT 18
23177: PUSH
23178: LD_INT 19
23180: PUSH
23181: LD_INT 20
23183: PUSH
23184: LD_INT 21
23186: PUSH
23187: LD_INT 22
23189: PUSH
23190: LD_INT 23
23192: PUSH
23193: LD_INT 24
23195: PUSH
23196: LD_INT 25
23198: PUSH
23199: LD_INT 26
23201: PUSH
23202: LD_INT 28
23204: PUSH
23205: LD_INT 30
23207: PUSH
23208: LD_INT 31
23210: PUSH
23211: LD_INT 32
23213: PUSH
23214: LD_INT 34
23216: PUSH
23217: LD_INT 36
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 101
23255: PUSH
23256: LD_INT 102
23258: PUSH
23259: LD_INT 103
23261: PUSH
23262: LD_INT 104
23264: PUSH
23265: LD_INT 105
23267: PUSH
23268: LD_INT 106
23270: PUSH
23271: LD_INT 107
23273: PUSH
23274: LD_INT 108
23276: PUSH
23277: LD_INT 109
23279: PUSH
23280: LD_INT 110
23282: PUSH
23283: LD_INT 111
23285: PUSH
23286: LD_INT 112
23288: PUSH
23289: LD_INT 114
23291: PUSH
23292: LD_INT 116
23294: PUSH
23295: LD_INT 117
23297: PUSH
23298: LD_INT 118
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: ST_TO_ADDR
23323: GO 25006
23325: LD_INT 12
23327: DOUBLE
23328: EQUAL
23329: IFTRUE 23333
23331: GO 23553
23333: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23334: LD_ADDR_VAR 0 2
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: LD_INT 2
23344: PUSH
23345: LD_INT 3
23347: PUSH
23348: LD_INT 4
23350: PUSH
23351: LD_INT 5
23353: PUSH
23354: LD_INT 6
23356: PUSH
23357: LD_INT 7
23359: PUSH
23360: LD_INT 8
23362: PUSH
23363: LD_INT 9
23365: PUSH
23366: LD_INT 10
23368: PUSH
23369: LD_INT 11
23371: PUSH
23372: LD_INT 12
23374: PUSH
23375: LD_INT 13
23377: PUSH
23378: LD_INT 14
23380: PUSH
23381: LD_INT 15
23383: PUSH
23384: LD_INT 16
23386: PUSH
23387: LD_INT 17
23389: PUSH
23390: LD_INT 18
23392: PUSH
23393: LD_INT 19
23395: PUSH
23396: LD_INT 20
23398: PUSH
23399: LD_INT 21
23401: PUSH
23402: LD_INT 22
23404: PUSH
23405: LD_INT 23
23407: PUSH
23408: LD_INT 24
23410: PUSH
23411: LD_INT 25
23413: PUSH
23414: LD_INT 26
23416: PUSH
23417: LD_INT 27
23419: PUSH
23420: LD_INT 28
23422: PUSH
23423: LD_INT 30
23425: PUSH
23426: LD_INT 31
23428: PUSH
23429: LD_INT 32
23431: PUSH
23432: LD_INT 33
23434: PUSH
23435: LD_INT 34
23437: PUSH
23438: LD_INT 36
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 101
23479: PUSH
23480: LD_INT 102
23482: PUSH
23483: LD_INT 103
23485: PUSH
23486: LD_INT 104
23488: PUSH
23489: LD_INT 105
23491: PUSH
23492: LD_INT 106
23494: PUSH
23495: LD_INT 107
23497: PUSH
23498: LD_INT 108
23500: PUSH
23501: LD_INT 109
23503: PUSH
23504: LD_INT 110
23506: PUSH
23507: LD_INT 111
23509: PUSH
23510: LD_INT 112
23512: PUSH
23513: LD_INT 113
23515: PUSH
23516: LD_INT 114
23518: PUSH
23519: LD_INT 116
23521: PUSH
23522: LD_INT 117
23524: PUSH
23525: LD_INT 118
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: ST_TO_ADDR
23551: GO 25006
23553: LD_INT 13
23555: DOUBLE
23556: EQUAL
23557: IFTRUE 23561
23559: GO 23769
23561: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23562: LD_ADDR_VAR 0 2
23566: PUSH
23567: LD_INT 1
23569: PUSH
23570: LD_INT 2
23572: PUSH
23573: LD_INT 3
23575: PUSH
23576: LD_INT 4
23578: PUSH
23579: LD_INT 5
23581: PUSH
23582: LD_INT 8
23584: PUSH
23585: LD_INT 9
23587: PUSH
23588: LD_INT 10
23590: PUSH
23591: LD_INT 11
23593: PUSH
23594: LD_INT 12
23596: PUSH
23597: LD_INT 14
23599: PUSH
23600: LD_INT 15
23602: PUSH
23603: LD_INT 16
23605: PUSH
23606: LD_INT 17
23608: PUSH
23609: LD_INT 18
23611: PUSH
23612: LD_INT 19
23614: PUSH
23615: LD_INT 20
23617: PUSH
23618: LD_INT 21
23620: PUSH
23621: LD_INT 22
23623: PUSH
23624: LD_INT 23
23626: PUSH
23627: LD_INT 24
23629: PUSH
23630: LD_INT 25
23632: PUSH
23633: LD_INT 26
23635: PUSH
23636: LD_INT 27
23638: PUSH
23639: LD_INT 28
23641: PUSH
23642: LD_INT 30
23644: PUSH
23645: LD_INT 31
23647: PUSH
23648: LD_INT 32
23650: PUSH
23651: LD_INT 33
23653: PUSH
23654: LD_INT 34
23656: PUSH
23657: LD_INT 36
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 101
23695: PUSH
23696: LD_INT 102
23698: PUSH
23699: LD_INT 103
23701: PUSH
23702: LD_INT 104
23704: PUSH
23705: LD_INT 105
23707: PUSH
23708: LD_INT 106
23710: PUSH
23711: LD_INT 107
23713: PUSH
23714: LD_INT 108
23716: PUSH
23717: LD_INT 109
23719: PUSH
23720: LD_INT 110
23722: PUSH
23723: LD_INT 111
23725: PUSH
23726: LD_INT 112
23728: PUSH
23729: LD_INT 113
23731: PUSH
23732: LD_INT 114
23734: PUSH
23735: LD_INT 116
23737: PUSH
23738: LD_INT 117
23740: PUSH
23741: LD_INT 118
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: ST_TO_ADDR
23767: GO 25006
23769: LD_INT 14
23771: DOUBLE
23772: EQUAL
23773: IFTRUE 23777
23775: GO 24001
23777: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23778: LD_ADDR_VAR 0 2
23782: PUSH
23783: LD_INT 1
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: LD_INT 3
23791: PUSH
23792: LD_INT 4
23794: PUSH
23795: LD_INT 5
23797: PUSH
23798: LD_INT 6
23800: PUSH
23801: LD_INT 7
23803: PUSH
23804: LD_INT 8
23806: PUSH
23807: LD_INT 9
23809: PUSH
23810: LD_INT 10
23812: PUSH
23813: LD_INT 11
23815: PUSH
23816: LD_INT 12
23818: PUSH
23819: LD_INT 13
23821: PUSH
23822: LD_INT 14
23824: PUSH
23825: LD_INT 15
23827: PUSH
23828: LD_INT 16
23830: PUSH
23831: LD_INT 17
23833: PUSH
23834: LD_INT 18
23836: PUSH
23837: LD_INT 19
23839: PUSH
23840: LD_INT 20
23842: PUSH
23843: LD_INT 21
23845: PUSH
23846: LD_INT 22
23848: PUSH
23849: LD_INT 23
23851: PUSH
23852: LD_INT 24
23854: PUSH
23855: LD_INT 25
23857: PUSH
23858: LD_INT 26
23860: PUSH
23861: LD_INT 27
23863: PUSH
23864: LD_INT 28
23866: PUSH
23867: LD_INT 29
23869: PUSH
23870: LD_INT 30
23872: PUSH
23873: LD_INT 31
23875: PUSH
23876: LD_INT 32
23878: PUSH
23879: LD_INT 33
23881: PUSH
23882: LD_INT 34
23884: PUSH
23885: LD_INT 36
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 101
23927: PUSH
23928: LD_INT 102
23930: PUSH
23931: LD_INT 103
23933: PUSH
23934: LD_INT 104
23936: PUSH
23937: LD_INT 105
23939: PUSH
23940: LD_INT 106
23942: PUSH
23943: LD_INT 107
23945: PUSH
23946: LD_INT 108
23948: PUSH
23949: LD_INT 109
23951: PUSH
23952: LD_INT 110
23954: PUSH
23955: LD_INT 111
23957: PUSH
23958: LD_INT 112
23960: PUSH
23961: LD_INT 113
23963: PUSH
23964: LD_INT 114
23966: PUSH
23967: LD_INT 116
23969: PUSH
23970: LD_INT 117
23972: PUSH
23973: LD_INT 118
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: ST_TO_ADDR
23999: GO 25006
24001: LD_INT 15
24003: DOUBLE
24004: EQUAL
24005: IFTRUE 24009
24007: GO 24233
24009: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24010: LD_ADDR_VAR 0 2
24014: PUSH
24015: LD_INT 1
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: LD_INT 3
24023: PUSH
24024: LD_INT 4
24026: PUSH
24027: LD_INT 5
24029: PUSH
24030: LD_INT 6
24032: PUSH
24033: LD_INT 7
24035: PUSH
24036: LD_INT 8
24038: PUSH
24039: LD_INT 9
24041: PUSH
24042: LD_INT 10
24044: PUSH
24045: LD_INT 11
24047: PUSH
24048: LD_INT 12
24050: PUSH
24051: LD_INT 13
24053: PUSH
24054: LD_INT 14
24056: PUSH
24057: LD_INT 15
24059: PUSH
24060: LD_INT 16
24062: PUSH
24063: LD_INT 17
24065: PUSH
24066: LD_INT 18
24068: PUSH
24069: LD_INT 19
24071: PUSH
24072: LD_INT 20
24074: PUSH
24075: LD_INT 21
24077: PUSH
24078: LD_INT 22
24080: PUSH
24081: LD_INT 23
24083: PUSH
24084: LD_INT 24
24086: PUSH
24087: LD_INT 25
24089: PUSH
24090: LD_INT 26
24092: PUSH
24093: LD_INT 27
24095: PUSH
24096: LD_INT 28
24098: PUSH
24099: LD_INT 29
24101: PUSH
24102: LD_INT 30
24104: PUSH
24105: LD_INT 31
24107: PUSH
24108: LD_INT 32
24110: PUSH
24111: LD_INT 33
24113: PUSH
24114: LD_INT 34
24116: PUSH
24117: LD_INT 36
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 101
24159: PUSH
24160: LD_INT 102
24162: PUSH
24163: LD_INT 103
24165: PUSH
24166: LD_INT 104
24168: PUSH
24169: LD_INT 105
24171: PUSH
24172: LD_INT 106
24174: PUSH
24175: LD_INT 107
24177: PUSH
24178: LD_INT 108
24180: PUSH
24181: LD_INT 109
24183: PUSH
24184: LD_INT 110
24186: PUSH
24187: LD_INT 111
24189: PUSH
24190: LD_INT 112
24192: PUSH
24193: LD_INT 113
24195: PUSH
24196: LD_INT 114
24198: PUSH
24199: LD_INT 116
24201: PUSH
24202: LD_INT 117
24204: PUSH
24205: LD_INT 118
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: ST_TO_ADDR
24231: GO 25006
24233: LD_INT 16
24235: DOUBLE
24236: EQUAL
24237: IFTRUE 24241
24239: GO 24377
24241: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24242: LD_ADDR_VAR 0 2
24246: PUSH
24247: LD_INT 2
24249: PUSH
24250: LD_INT 4
24252: PUSH
24253: LD_INT 5
24255: PUSH
24256: LD_INT 7
24258: PUSH
24259: LD_INT 11
24261: PUSH
24262: LD_INT 12
24264: PUSH
24265: LD_INT 15
24267: PUSH
24268: LD_INT 16
24270: PUSH
24271: LD_INT 20
24273: PUSH
24274: LD_INT 21
24276: PUSH
24277: LD_INT 22
24279: PUSH
24280: LD_INT 23
24282: PUSH
24283: LD_INT 25
24285: PUSH
24286: LD_INT 26
24288: PUSH
24289: LD_INT 30
24291: PUSH
24292: LD_INT 31
24294: PUSH
24295: LD_INT 32
24297: PUSH
24298: LD_INT 33
24300: PUSH
24301: LD_INT 34
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 101
24327: PUSH
24328: LD_INT 102
24330: PUSH
24331: LD_INT 103
24333: PUSH
24334: LD_INT 106
24336: PUSH
24337: LD_INT 108
24339: PUSH
24340: LD_INT 112
24342: PUSH
24343: LD_INT 113
24345: PUSH
24346: LD_INT 114
24348: PUSH
24349: LD_INT 116
24351: PUSH
24352: LD_INT 117
24354: PUSH
24355: LD_INT 118
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: ST_TO_ADDR
24375: GO 25006
24377: LD_INT 17
24379: DOUBLE
24380: EQUAL
24381: IFTRUE 24385
24383: GO 24609
24385: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24386: LD_ADDR_VAR 0 2
24390: PUSH
24391: LD_INT 1
24393: PUSH
24394: LD_INT 2
24396: PUSH
24397: LD_INT 3
24399: PUSH
24400: LD_INT 4
24402: PUSH
24403: LD_INT 5
24405: PUSH
24406: LD_INT 6
24408: PUSH
24409: LD_INT 7
24411: PUSH
24412: LD_INT 8
24414: PUSH
24415: LD_INT 9
24417: PUSH
24418: LD_INT 10
24420: PUSH
24421: LD_INT 11
24423: PUSH
24424: LD_INT 12
24426: PUSH
24427: LD_INT 13
24429: PUSH
24430: LD_INT 14
24432: PUSH
24433: LD_INT 15
24435: PUSH
24436: LD_INT 16
24438: PUSH
24439: LD_INT 17
24441: PUSH
24442: LD_INT 18
24444: PUSH
24445: LD_INT 19
24447: PUSH
24448: LD_INT 20
24450: PUSH
24451: LD_INT 21
24453: PUSH
24454: LD_INT 22
24456: PUSH
24457: LD_INT 23
24459: PUSH
24460: LD_INT 24
24462: PUSH
24463: LD_INT 25
24465: PUSH
24466: LD_INT 26
24468: PUSH
24469: LD_INT 27
24471: PUSH
24472: LD_INT 28
24474: PUSH
24475: LD_INT 29
24477: PUSH
24478: LD_INT 30
24480: PUSH
24481: LD_INT 31
24483: PUSH
24484: LD_INT 32
24486: PUSH
24487: LD_INT 33
24489: PUSH
24490: LD_INT 34
24492: PUSH
24493: LD_INT 36
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 101
24535: PUSH
24536: LD_INT 102
24538: PUSH
24539: LD_INT 103
24541: PUSH
24542: LD_INT 104
24544: PUSH
24545: LD_INT 105
24547: PUSH
24548: LD_INT 106
24550: PUSH
24551: LD_INT 107
24553: PUSH
24554: LD_INT 108
24556: PUSH
24557: LD_INT 109
24559: PUSH
24560: LD_INT 110
24562: PUSH
24563: LD_INT 111
24565: PUSH
24566: LD_INT 112
24568: PUSH
24569: LD_INT 113
24571: PUSH
24572: LD_INT 114
24574: PUSH
24575: LD_INT 116
24577: PUSH
24578: LD_INT 117
24580: PUSH
24581: LD_INT 118
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: ST_TO_ADDR
24607: GO 25006
24609: LD_INT 18
24611: DOUBLE
24612: EQUAL
24613: IFTRUE 24617
24615: GO 24765
24617: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24618: LD_ADDR_VAR 0 2
24622: PUSH
24623: LD_INT 2
24625: PUSH
24626: LD_INT 4
24628: PUSH
24629: LD_INT 5
24631: PUSH
24632: LD_INT 7
24634: PUSH
24635: LD_INT 11
24637: PUSH
24638: LD_INT 12
24640: PUSH
24641: LD_INT 15
24643: PUSH
24644: LD_INT 16
24646: PUSH
24647: LD_INT 20
24649: PUSH
24650: LD_INT 21
24652: PUSH
24653: LD_INT 22
24655: PUSH
24656: LD_INT 23
24658: PUSH
24659: LD_INT 25
24661: PUSH
24662: LD_INT 26
24664: PUSH
24665: LD_INT 30
24667: PUSH
24668: LD_INT 31
24670: PUSH
24671: LD_INT 32
24673: PUSH
24674: LD_INT 33
24676: PUSH
24677: LD_INT 34
24679: PUSH
24680: LD_INT 35
24682: PUSH
24683: LD_INT 36
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 101
24711: PUSH
24712: LD_INT 102
24714: PUSH
24715: LD_INT 103
24717: PUSH
24718: LD_INT 106
24720: PUSH
24721: LD_INT 108
24723: PUSH
24724: LD_INT 112
24726: PUSH
24727: LD_INT 113
24729: PUSH
24730: LD_INT 114
24732: PUSH
24733: LD_INT 115
24735: PUSH
24736: LD_INT 116
24738: PUSH
24739: LD_INT 117
24741: PUSH
24742: LD_INT 118
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: ST_TO_ADDR
24763: GO 25006
24765: LD_INT 19
24767: DOUBLE
24768: EQUAL
24769: IFTRUE 24773
24771: GO 25005
24773: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24774: LD_ADDR_VAR 0 2
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: LD_INT 2
24784: PUSH
24785: LD_INT 3
24787: PUSH
24788: LD_INT 4
24790: PUSH
24791: LD_INT 5
24793: PUSH
24794: LD_INT 6
24796: PUSH
24797: LD_INT 7
24799: PUSH
24800: LD_INT 8
24802: PUSH
24803: LD_INT 9
24805: PUSH
24806: LD_INT 10
24808: PUSH
24809: LD_INT 11
24811: PUSH
24812: LD_INT 12
24814: PUSH
24815: LD_INT 13
24817: PUSH
24818: LD_INT 14
24820: PUSH
24821: LD_INT 15
24823: PUSH
24824: LD_INT 16
24826: PUSH
24827: LD_INT 17
24829: PUSH
24830: LD_INT 18
24832: PUSH
24833: LD_INT 19
24835: PUSH
24836: LD_INT 20
24838: PUSH
24839: LD_INT 21
24841: PUSH
24842: LD_INT 22
24844: PUSH
24845: LD_INT 23
24847: PUSH
24848: LD_INT 24
24850: PUSH
24851: LD_INT 25
24853: PUSH
24854: LD_INT 26
24856: PUSH
24857: LD_INT 27
24859: PUSH
24860: LD_INT 28
24862: PUSH
24863: LD_INT 29
24865: PUSH
24866: LD_INT 30
24868: PUSH
24869: LD_INT 31
24871: PUSH
24872: LD_INT 32
24874: PUSH
24875: LD_INT 33
24877: PUSH
24878: LD_INT 34
24880: PUSH
24881: LD_INT 35
24883: PUSH
24884: LD_INT 36
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 101
24927: PUSH
24928: LD_INT 102
24930: PUSH
24931: LD_INT 103
24933: PUSH
24934: LD_INT 104
24936: PUSH
24937: LD_INT 105
24939: PUSH
24940: LD_INT 106
24942: PUSH
24943: LD_INT 107
24945: PUSH
24946: LD_INT 108
24948: PUSH
24949: LD_INT 109
24951: PUSH
24952: LD_INT 110
24954: PUSH
24955: LD_INT 111
24957: PUSH
24958: LD_INT 112
24960: PUSH
24961: LD_INT 113
24963: PUSH
24964: LD_INT 114
24966: PUSH
24967: LD_INT 115
24969: PUSH
24970: LD_INT 116
24972: PUSH
24973: LD_INT 117
24975: PUSH
24976: LD_INT 118
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: ST_TO_ADDR
25003: GO 25006
25005: POP
// end else
25006: GO 25237
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25008: LD_ADDR_VAR 0 2
25012: PUSH
25013: LD_INT 1
25015: PUSH
25016: LD_INT 2
25018: PUSH
25019: LD_INT 3
25021: PUSH
25022: LD_INT 4
25024: PUSH
25025: LD_INT 5
25027: PUSH
25028: LD_INT 6
25030: PUSH
25031: LD_INT 7
25033: PUSH
25034: LD_INT 8
25036: PUSH
25037: LD_INT 9
25039: PUSH
25040: LD_INT 10
25042: PUSH
25043: LD_INT 11
25045: PUSH
25046: LD_INT 12
25048: PUSH
25049: LD_INT 13
25051: PUSH
25052: LD_INT 14
25054: PUSH
25055: LD_INT 15
25057: PUSH
25058: LD_INT 16
25060: PUSH
25061: LD_INT 17
25063: PUSH
25064: LD_INT 18
25066: PUSH
25067: LD_INT 19
25069: PUSH
25070: LD_INT 20
25072: PUSH
25073: LD_INT 21
25075: PUSH
25076: LD_INT 22
25078: PUSH
25079: LD_INT 23
25081: PUSH
25082: LD_INT 24
25084: PUSH
25085: LD_INT 25
25087: PUSH
25088: LD_INT 26
25090: PUSH
25091: LD_INT 27
25093: PUSH
25094: LD_INT 28
25096: PUSH
25097: LD_INT 29
25099: PUSH
25100: LD_INT 30
25102: PUSH
25103: LD_INT 31
25105: PUSH
25106: LD_INT 32
25108: PUSH
25109: LD_INT 33
25111: PUSH
25112: LD_INT 34
25114: PUSH
25115: LD_INT 35
25117: PUSH
25118: LD_INT 36
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 101
25161: PUSH
25162: LD_INT 102
25164: PUSH
25165: LD_INT 103
25167: PUSH
25168: LD_INT 104
25170: PUSH
25171: LD_INT 105
25173: PUSH
25174: LD_INT 106
25176: PUSH
25177: LD_INT 107
25179: PUSH
25180: LD_INT 108
25182: PUSH
25183: LD_INT 109
25185: PUSH
25186: LD_INT 110
25188: PUSH
25189: LD_INT 111
25191: PUSH
25192: LD_INT 112
25194: PUSH
25195: LD_INT 113
25197: PUSH
25198: LD_INT 114
25200: PUSH
25201: LD_INT 115
25203: PUSH
25204: LD_INT 116
25206: PUSH
25207: LD_INT 117
25209: PUSH
25210: LD_INT 118
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: ST_TO_ADDR
// if result then
25237: LD_VAR 0 2
25241: IFFALSE 26027
// begin normal :=  ;
25243: LD_ADDR_VAR 0 5
25247: PUSH
25248: LD_STRING 
25250: ST_TO_ADDR
// hardcore :=  ;
25251: LD_ADDR_VAR 0 6
25255: PUSH
25256: LD_STRING 
25258: ST_TO_ADDR
// active :=  ;
25259: LD_ADDR_VAR 0 7
25263: PUSH
25264: LD_STRING 
25266: ST_TO_ADDR
// for i = 1 to normalCounter do
25267: LD_ADDR_VAR 0 8
25271: PUSH
25272: DOUBLE
25273: LD_INT 1
25275: DEC
25276: ST_TO_ADDR
25277: LD_EXP 52
25281: PUSH
25282: FOR_TO
25283: IFFALSE 25384
// begin tmp := 0 ;
25285: LD_ADDR_VAR 0 3
25289: PUSH
25290: LD_STRING 0
25292: ST_TO_ADDR
// if result [ 1 ] then
25293: LD_VAR 0 2
25297: PUSH
25298: LD_INT 1
25300: ARRAY
25301: IFFALSE 25366
// if result [ 1 ] [ 1 ] = i then
25303: LD_VAR 0 2
25307: PUSH
25308: LD_INT 1
25310: ARRAY
25311: PUSH
25312: LD_INT 1
25314: ARRAY
25315: PUSH
25316: LD_VAR 0 8
25320: EQUAL
25321: IFFALSE 25366
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25323: LD_ADDR_VAR 0 2
25327: PUSH
25328: LD_VAR 0 2
25332: PPUSH
25333: LD_INT 1
25335: PPUSH
25336: LD_VAR 0 2
25340: PUSH
25341: LD_INT 1
25343: ARRAY
25344: PPUSH
25345: LD_INT 1
25347: PPUSH
25348: CALL_OW 3
25352: PPUSH
25353: CALL_OW 1
25357: ST_TO_ADDR
// tmp := 1 ;
25358: LD_ADDR_VAR 0 3
25362: PUSH
25363: LD_STRING 1
25365: ST_TO_ADDR
// end ; normal := normal & tmp ;
25366: LD_ADDR_VAR 0 5
25370: PUSH
25371: LD_VAR 0 5
25375: PUSH
25376: LD_VAR 0 3
25380: STR
25381: ST_TO_ADDR
// end ;
25382: GO 25282
25384: POP
25385: POP
// for i = 1 to hardcoreCounter do
25386: LD_ADDR_VAR 0 8
25390: PUSH
25391: DOUBLE
25392: LD_INT 1
25394: DEC
25395: ST_TO_ADDR
25396: LD_EXP 53
25400: PUSH
25401: FOR_TO
25402: IFFALSE 25507
// begin tmp := 0 ;
25404: LD_ADDR_VAR 0 3
25408: PUSH
25409: LD_STRING 0
25411: ST_TO_ADDR
// if result [ 2 ] then
25412: LD_VAR 0 2
25416: PUSH
25417: LD_INT 2
25419: ARRAY
25420: IFFALSE 25489
// if result [ 2 ] [ 1 ] = 100 + i then
25422: LD_VAR 0 2
25426: PUSH
25427: LD_INT 2
25429: ARRAY
25430: PUSH
25431: LD_INT 1
25433: ARRAY
25434: PUSH
25435: LD_INT 100
25437: PUSH
25438: LD_VAR 0 8
25442: PLUS
25443: EQUAL
25444: IFFALSE 25489
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25446: LD_ADDR_VAR 0 2
25450: PUSH
25451: LD_VAR 0 2
25455: PPUSH
25456: LD_INT 2
25458: PPUSH
25459: LD_VAR 0 2
25463: PUSH
25464: LD_INT 2
25466: ARRAY
25467: PPUSH
25468: LD_INT 1
25470: PPUSH
25471: CALL_OW 3
25475: PPUSH
25476: CALL_OW 1
25480: ST_TO_ADDR
// tmp := 1 ;
25481: LD_ADDR_VAR 0 3
25485: PUSH
25486: LD_STRING 1
25488: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25489: LD_ADDR_VAR 0 6
25493: PUSH
25494: LD_VAR 0 6
25498: PUSH
25499: LD_VAR 0 3
25503: STR
25504: ST_TO_ADDR
// end ;
25505: GO 25401
25507: POP
25508: POP
// if isGameLoad then
25509: LD_VAR 0 1
25513: IFFALSE 25988
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25515: LD_ADDR_VAR 0 4
25519: PUSH
25520: LD_EXP 56
25524: PUSH
25525: LD_EXP 55
25529: PUSH
25530: LD_EXP 57
25534: PUSH
25535: LD_EXP 54
25539: PUSH
25540: LD_EXP 58
25544: PUSH
25545: LD_EXP 59
25549: PUSH
25550: LD_EXP 60
25554: PUSH
25555: LD_EXP 61
25559: PUSH
25560: LD_EXP 62
25564: PUSH
25565: LD_EXP 63
25569: PUSH
25570: LD_EXP 64
25574: PUSH
25575: LD_EXP 65
25579: PUSH
25580: LD_EXP 66
25584: PUSH
25585: LD_EXP 67
25589: PUSH
25590: LD_EXP 75
25594: PUSH
25595: LD_EXP 76
25599: PUSH
25600: LD_EXP 77
25604: PUSH
25605: LD_EXP 78
25609: PUSH
25610: LD_EXP 80
25614: PUSH
25615: LD_EXP 81
25619: PUSH
25620: LD_EXP 82
25624: PUSH
25625: LD_EXP 85
25629: PUSH
25630: LD_EXP 87
25634: PUSH
25635: LD_EXP 88
25639: PUSH
25640: LD_EXP 89
25644: PUSH
25645: LD_EXP 91
25649: PUSH
25650: LD_EXP 92
25654: PUSH
25655: LD_EXP 95
25659: PUSH
25660: LD_EXP 96
25664: PUSH
25665: LD_EXP 97
25669: PUSH
25670: LD_EXP 98
25674: PUSH
25675: LD_EXP 99
25679: PUSH
25680: LD_EXP 100
25684: PUSH
25685: LD_EXP 101
25689: PUSH
25690: LD_EXP 102
25694: PUSH
25695: LD_EXP 103
25699: PUSH
25700: LD_EXP 68
25704: PUSH
25705: LD_EXP 69
25709: PUSH
25710: LD_EXP 72
25714: PUSH
25715: LD_EXP 73
25719: PUSH
25720: LD_EXP 74
25724: PUSH
25725: LD_EXP 70
25729: PUSH
25730: LD_EXP 71
25734: PUSH
25735: LD_EXP 79
25739: PUSH
25740: LD_EXP 83
25744: PUSH
25745: LD_EXP 84
25749: PUSH
25750: LD_EXP 86
25754: PUSH
25755: LD_EXP 90
25759: PUSH
25760: LD_EXP 93
25764: PUSH
25765: LD_EXP 94
25769: PUSH
25770: LD_EXP 104
25774: PUSH
25775: LD_EXP 105
25779: PUSH
25780: LD_EXP 106
25784: PUSH
25785: LD_EXP 107
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: ST_TO_ADDR
// tmp :=  ;
25846: LD_ADDR_VAR 0 3
25850: PUSH
25851: LD_STRING 
25853: ST_TO_ADDR
// for i = 1 to normalCounter do
25854: LD_ADDR_VAR 0 8
25858: PUSH
25859: DOUBLE
25860: LD_INT 1
25862: DEC
25863: ST_TO_ADDR
25864: LD_EXP 52
25868: PUSH
25869: FOR_TO
25870: IFFALSE 25906
// begin if flags [ i ] then
25872: LD_VAR 0 4
25876: PUSH
25877: LD_VAR 0 8
25881: ARRAY
25882: IFFALSE 25904
// tmp := tmp & i & ; ;
25884: LD_ADDR_VAR 0 3
25888: PUSH
25889: LD_VAR 0 3
25893: PUSH
25894: LD_VAR 0 8
25898: STR
25899: PUSH
25900: LD_STRING ;
25902: STR
25903: ST_TO_ADDR
// end ;
25904: GO 25869
25906: POP
25907: POP
// for i = 1 to hardcoreCounter do
25908: LD_ADDR_VAR 0 8
25912: PUSH
25913: DOUBLE
25914: LD_INT 1
25916: DEC
25917: ST_TO_ADDR
25918: LD_EXP 53
25922: PUSH
25923: FOR_TO
25924: IFFALSE 25970
// begin if flags [ normalCounter + i ] then
25926: LD_VAR 0 4
25930: PUSH
25931: LD_EXP 52
25935: PUSH
25936: LD_VAR 0 8
25940: PLUS
25941: ARRAY
25942: IFFALSE 25968
// tmp := tmp & ( 100 + i ) & ; ;
25944: LD_ADDR_VAR 0 3
25948: PUSH
25949: LD_VAR 0 3
25953: PUSH
25954: LD_INT 100
25956: PUSH
25957: LD_VAR 0 8
25961: PLUS
25962: STR
25963: PUSH
25964: LD_STRING ;
25966: STR
25967: ST_TO_ADDR
// end ;
25968: GO 25923
25970: POP
25971: POP
// if tmp then
25972: LD_VAR 0 3
25976: IFFALSE 25988
// active := tmp ;
25978: LD_ADDR_VAR 0 7
25982: PUSH
25983: LD_VAR 0 3
25987: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25988: LD_STRING getStreamItemsFromMission("
25990: PUSH
25991: LD_VAR 0 5
25995: STR
25996: PUSH
25997: LD_STRING ","
25999: STR
26000: PUSH
26001: LD_VAR 0 6
26005: STR
26006: PUSH
26007: LD_STRING ","
26009: STR
26010: PUSH
26011: LD_VAR 0 7
26015: STR
26016: PUSH
26017: LD_STRING ")
26019: STR
26020: PPUSH
26021: CALL_OW 559
// end else
26025: GO 26034
// ToLua ( getStreamItemsFromMission("","","") ) ;
26027: LD_STRING getStreamItemsFromMission("","","")
26029: PPUSH
26030: CALL_OW 559
// end ;
26034: LD_VAR 0 2
26038: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26039: LD_EXP 51
26043: PUSH
26044: LD_EXP 56
26048: AND
26049: IFFALSE 26173
26051: GO 26053
26053: DISABLE
26054: LD_INT 0
26056: PPUSH
26057: PPUSH
// begin enable ;
26058: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26059: LD_ADDR_VAR 0 2
26063: PUSH
26064: LD_INT 22
26066: PUSH
26067: LD_OWVAR 2
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 2
26078: PUSH
26079: LD_INT 34
26081: PUSH
26082: LD_INT 7
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 34
26091: PUSH
26092: LD_INT 45
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 34
26101: PUSH
26102: LD_INT 28
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 34
26111: PUSH
26112: LD_INT 47
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PPUSH
26130: CALL_OW 69
26134: ST_TO_ADDR
// if not tmp then
26135: LD_VAR 0 2
26139: NOT
26140: IFFALSE 26144
// exit ;
26142: GO 26173
// for i in tmp do
26144: LD_ADDR_VAR 0 1
26148: PUSH
26149: LD_VAR 0 2
26153: PUSH
26154: FOR_IN
26155: IFFALSE 26171
// begin SetLives ( i , 0 ) ;
26157: LD_VAR 0 1
26161: PPUSH
26162: LD_INT 0
26164: PPUSH
26165: CALL_OW 234
// end ;
26169: GO 26154
26171: POP
26172: POP
// end ;
26173: PPOPN 2
26175: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26176: LD_EXP 51
26180: PUSH
26181: LD_EXP 57
26185: AND
26186: IFFALSE 26270
26188: GO 26190
26190: DISABLE
26191: LD_INT 0
26193: PPUSH
26194: PPUSH
// begin enable ;
26195: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26196: LD_ADDR_VAR 0 2
26200: PUSH
26201: LD_INT 22
26203: PUSH
26204: LD_OWVAR 2
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 32
26215: PUSH
26216: LD_INT 3
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PPUSH
26227: CALL_OW 69
26231: ST_TO_ADDR
// if not tmp then
26232: LD_VAR 0 2
26236: NOT
26237: IFFALSE 26241
// exit ;
26239: GO 26270
// for i in tmp do
26241: LD_ADDR_VAR 0 1
26245: PUSH
26246: LD_VAR 0 2
26250: PUSH
26251: FOR_IN
26252: IFFALSE 26268
// begin SetLives ( i , 0 ) ;
26254: LD_VAR 0 1
26258: PPUSH
26259: LD_INT 0
26261: PPUSH
26262: CALL_OW 234
// end ;
26266: GO 26251
26268: POP
26269: POP
// end ;
26270: PPOPN 2
26272: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26273: LD_EXP 51
26277: PUSH
26278: LD_EXP 54
26282: AND
26283: IFFALSE 26376
26285: GO 26287
26287: DISABLE
26288: LD_INT 0
26290: PPUSH
// begin enable ;
26291: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26292: LD_ADDR_VAR 0 1
26296: PUSH
26297: LD_INT 22
26299: PUSH
26300: LD_OWVAR 2
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 2
26311: PUSH
26312: LD_INT 25
26314: PUSH
26315: LD_INT 5
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 25
26324: PUSH
26325: LD_INT 9
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 25
26334: PUSH
26335: LD_INT 8
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PPUSH
26352: CALL_OW 69
26356: PUSH
26357: FOR_IN
26358: IFFALSE 26374
// begin SetClass ( i , 1 ) ;
26360: LD_VAR 0 1
26364: PPUSH
26365: LD_INT 1
26367: PPUSH
26368: CALL_OW 336
// end ;
26372: GO 26357
26374: POP
26375: POP
// end ;
26376: PPOPN 1
26378: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26379: LD_EXP 51
26383: PUSH
26384: LD_EXP 55
26388: AND
26389: PUSH
26390: LD_OWVAR 65
26394: PUSH
26395: LD_INT 7
26397: LESS
26398: AND
26399: IFFALSE 26413
26401: GO 26403
26403: DISABLE
// begin enable ;
26404: ENABLE
// game_speed := 7 ;
26405: LD_ADDR_OWVAR 65
26409: PUSH
26410: LD_INT 7
26412: ST_TO_ADDR
// end ;
26413: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26414: LD_EXP 51
26418: PUSH
26419: LD_EXP 58
26423: AND
26424: IFFALSE 26626
26426: GO 26428
26428: DISABLE
26429: LD_INT 0
26431: PPUSH
26432: PPUSH
26433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26434: LD_ADDR_VAR 0 3
26438: PUSH
26439: LD_INT 81
26441: PUSH
26442: LD_OWVAR 2
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 21
26453: PUSH
26454: LD_INT 1
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PPUSH
26465: CALL_OW 69
26469: ST_TO_ADDR
// if not tmp then
26470: LD_VAR 0 3
26474: NOT
26475: IFFALSE 26479
// exit ;
26477: GO 26626
// if tmp > 5 then
26479: LD_VAR 0 3
26483: PUSH
26484: LD_INT 5
26486: GREATER
26487: IFFALSE 26499
// k := 5 else
26489: LD_ADDR_VAR 0 2
26493: PUSH
26494: LD_INT 5
26496: ST_TO_ADDR
26497: GO 26509
// k := tmp ;
26499: LD_ADDR_VAR 0 2
26503: PUSH
26504: LD_VAR 0 3
26508: ST_TO_ADDR
// for i := 1 to k do
26509: LD_ADDR_VAR 0 1
26513: PUSH
26514: DOUBLE
26515: LD_INT 1
26517: DEC
26518: ST_TO_ADDR
26519: LD_VAR 0 2
26523: PUSH
26524: FOR_TO
26525: IFFALSE 26624
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26527: LD_VAR 0 3
26531: PUSH
26532: LD_VAR 0 1
26536: ARRAY
26537: PPUSH
26538: LD_VAR 0 1
26542: PUSH
26543: LD_INT 4
26545: MOD
26546: PUSH
26547: LD_INT 1
26549: PLUS
26550: PPUSH
26551: CALL_OW 259
26555: PUSH
26556: LD_INT 10
26558: LESS
26559: IFFALSE 26622
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26561: LD_VAR 0 3
26565: PUSH
26566: LD_VAR 0 1
26570: ARRAY
26571: PPUSH
26572: LD_VAR 0 1
26576: PUSH
26577: LD_INT 4
26579: MOD
26580: PUSH
26581: LD_INT 1
26583: PLUS
26584: PPUSH
26585: LD_VAR 0 3
26589: PUSH
26590: LD_VAR 0 1
26594: ARRAY
26595: PPUSH
26596: LD_VAR 0 1
26600: PUSH
26601: LD_INT 4
26603: MOD
26604: PUSH
26605: LD_INT 1
26607: PLUS
26608: PPUSH
26609: CALL_OW 259
26613: PUSH
26614: LD_INT 1
26616: PLUS
26617: PPUSH
26618: CALL_OW 237
26622: GO 26524
26624: POP
26625: POP
// end ;
26626: PPOPN 3
26628: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26629: LD_EXP 51
26633: PUSH
26634: LD_EXP 59
26638: AND
26639: IFFALSE 26659
26641: GO 26643
26643: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26644: LD_INT 4
26646: PPUSH
26647: LD_OWVAR 2
26651: PPUSH
26652: LD_INT 0
26654: PPUSH
26655: CALL_OW 324
26659: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26660: LD_EXP 51
26664: PUSH
26665: LD_EXP 88
26669: AND
26670: IFFALSE 26690
26672: GO 26674
26674: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26675: LD_INT 19
26677: PPUSH
26678: LD_OWVAR 2
26682: PPUSH
26683: LD_INT 0
26685: PPUSH
26686: CALL_OW 324
26690: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26691: LD_EXP 51
26695: PUSH
26696: LD_EXP 60
26700: AND
26701: IFFALSE 26803
26703: GO 26705
26705: DISABLE
26706: LD_INT 0
26708: PPUSH
26709: PPUSH
// begin enable ;
26710: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26711: LD_ADDR_VAR 0 2
26715: PUSH
26716: LD_INT 22
26718: PUSH
26719: LD_OWVAR 2
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 2
26730: PUSH
26731: LD_INT 34
26733: PUSH
26734: LD_INT 11
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 34
26743: PUSH
26744: LD_INT 30
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: LIST
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PPUSH
26760: CALL_OW 69
26764: ST_TO_ADDR
// if not tmp then
26765: LD_VAR 0 2
26769: NOT
26770: IFFALSE 26774
// exit ;
26772: GO 26803
// for i in tmp do
26774: LD_ADDR_VAR 0 1
26778: PUSH
26779: LD_VAR 0 2
26783: PUSH
26784: FOR_IN
26785: IFFALSE 26801
// begin SetLives ( i , 0 ) ;
26787: LD_VAR 0 1
26791: PPUSH
26792: LD_INT 0
26794: PPUSH
26795: CALL_OW 234
// end ;
26799: GO 26784
26801: POP
26802: POP
// end ;
26803: PPOPN 2
26805: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26806: LD_EXP 51
26810: PUSH
26811: LD_EXP 61
26815: AND
26816: IFFALSE 26836
26818: GO 26820
26820: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26821: LD_INT 32
26823: PPUSH
26824: LD_OWVAR 2
26828: PPUSH
26829: LD_INT 0
26831: PPUSH
26832: CALL_OW 324
26836: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26837: LD_EXP 51
26841: PUSH
26842: LD_EXP 62
26846: AND
26847: IFFALSE 27028
26849: GO 26851
26851: DISABLE
26852: LD_INT 0
26854: PPUSH
26855: PPUSH
26856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26857: LD_ADDR_VAR 0 2
26861: PUSH
26862: LD_INT 22
26864: PUSH
26865: LD_OWVAR 2
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 33
26876: PUSH
26877: LD_INT 3
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PPUSH
26888: CALL_OW 69
26892: ST_TO_ADDR
// if not tmp then
26893: LD_VAR 0 2
26897: NOT
26898: IFFALSE 26902
// exit ;
26900: GO 27028
// side := 0 ;
26902: LD_ADDR_VAR 0 3
26906: PUSH
26907: LD_INT 0
26909: ST_TO_ADDR
// for i := 1 to 8 do
26910: LD_ADDR_VAR 0 1
26914: PUSH
26915: DOUBLE
26916: LD_INT 1
26918: DEC
26919: ST_TO_ADDR
26920: LD_INT 8
26922: PUSH
26923: FOR_TO
26924: IFFALSE 26972
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26926: LD_OWVAR 2
26930: PUSH
26931: LD_VAR 0 1
26935: NONEQUAL
26936: PUSH
26937: LD_OWVAR 2
26941: PPUSH
26942: LD_VAR 0 1
26946: PPUSH
26947: CALL_OW 81
26951: PUSH
26952: LD_INT 2
26954: EQUAL
26955: AND
26956: IFFALSE 26970
// begin side := i ;
26958: LD_ADDR_VAR 0 3
26962: PUSH
26963: LD_VAR 0 1
26967: ST_TO_ADDR
// break ;
26968: GO 26972
// end ;
26970: GO 26923
26972: POP
26973: POP
// if not side then
26974: LD_VAR 0 3
26978: NOT
26979: IFFALSE 26983
// exit ;
26981: GO 27028
// for i := 1 to tmp do
26983: LD_ADDR_VAR 0 1
26987: PUSH
26988: DOUBLE
26989: LD_INT 1
26991: DEC
26992: ST_TO_ADDR
26993: LD_VAR 0 2
26997: PUSH
26998: FOR_TO
26999: IFFALSE 27026
// if Prob ( 60 ) then
27001: LD_INT 60
27003: PPUSH
27004: CALL_OW 13
27008: IFFALSE 27024
// SetSide ( i , side ) ;
27010: LD_VAR 0 1
27014: PPUSH
27015: LD_VAR 0 3
27019: PPUSH
27020: CALL_OW 235
27024: GO 26998
27026: POP
27027: POP
// end ;
27028: PPOPN 3
27030: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27031: LD_EXP 51
27035: PUSH
27036: LD_EXP 64
27040: AND
27041: IFFALSE 27160
27043: GO 27045
27045: DISABLE
27046: LD_INT 0
27048: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27049: LD_ADDR_VAR 0 1
27053: PUSH
27054: LD_INT 22
27056: PUSH
27057: LD_OWVAR 2
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 21
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 3
27078: PUSH
27079: LD_INT 23
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: LIST
27097: PPUSH
27098: CALL_OW 69
27102: PUSH
27103: FOR_IN
27104: IFFALSE 27158
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27106: LD_VAR 0 1
27110: PPUSH
27111: CALL_OW 257
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: LD_INT 2
27121: PUSH
27122: LD_INT 3
27124: PUSH
27125: LD_INT 4
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: IN
27134: IFFALSE 27156
// SetClass ( un , rand ( 1 , 4 ) ) ;
27136: LD_VAR 0 1
27140: PPUSH
27141: LD_INT 1
27143: PPUSH
27144: LD_INT 4
27146: PPUSH
27147: CALL_OW 12
27151: PPUSH
27152: CALL_OW 336
27156: GO 27103
27158: POP
27159: POP
// end ;
27160: PPOPN 1
27162: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27163: LD_EXP 51
27167: PUSH
27168: LD_EXP 63
27172: AND
27173: IFFALSE 27252
27175: GO 27177
27177: DISABLE
27178: LD_INT 0
27180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27181: LD_ADDR_VAR 0 1
27185: PUSH
27186: LD_INT 22
27188: PUSH
27189: LD_OWVAR 2
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 21
27200: PUSH
27201: LD_INT 3
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PPUSH
27212: CALL_OW 69
27216: ST_TO_ADDR
// if not tmp then
27217: LD_VAR 0 1
27221: NOT
27222: IFFALSE 27226
// exit ;
27224: GO 27252
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27226: LD_VAR 0 1
27230: PUSH
27231: LD_INT 1
27233: PPUSH
27234: LD_VAR 0 1
27238: PPUSH
27239: CALL_OW 12
27243: ARRAY
27244: PPUSH
27245: LD_INT 100
27247: PPUSH
27248: CALL_OW 234
// end ;
27252: PPOPN 1
27254: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27255: LD_EXP 51
27259: PUSH
27260: LD_EXP 65
27264: AND
27265: IFFALSE 27363
27267: GO 27269
27269: DISABLE
27270: LD_INT 0
27272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27273: LD_ADDR_VAR 0 1
27277: PUSH
27278: LD_INT 22
27280: PUSH
27281: LD_OWVAR 2
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 21
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PPUSH
27304: CALL_OW 69
27308: ST_TO_ADDR
// if not tmp then
27309: LD_VAR 0 1
27313: NOT
27314: IFFALSE 27318
// exit ;
27316: GO 27363
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27318: LD_VAR 0 1
27322: PUSH
27323: LD_INT 1
27325: PPUSH
27326: LD_VAR 0 1
27330: PPUSH
27331: CALL_OW 12
27335: ARRAY
27336: PPUSH
27337: LD_INT 1
27339: PPUSH
27340: LD_INT 4
27342: PPUSH
27343: CALL_OW 12
27347: PPUSH
27348: LD_INT 3000
27350: PPUSH
27351: LD_INT 9000
27353: PPUSH
27354: CALL_OW 12
27358: PPUSH
27359: CALL_OW 492
// end ;
27363: PPOPN 1
27365: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27366: LD_EXP 51
27370: PUSH
27371: LD_EXP 66
27375: AND
27376: IFFALSE 27396
27378: GO 27380
27380: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27381: LD_INT 1
27383: PPUSH
27384: LD_OWVAR 2
27388: PPUSH
27389: LD_INT 0
27391: PPUSH
27392: CALL_OW 324
27396: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27397: LD_EXP 51
27401: PUSH
27402: LD_EXP 67
27406: AND
27407: IFFALSE 27490
27409: GO 27411
27411: DISABLE
27412: LD_INT 0
27414: PPUSH
27415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27416: LD_ADDR_VAR 0 2
27420: PUSH
27421: LD_INT 22
27423: PUSH
27424: LD_OWVAR 2
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 21
27435: PUSH
27436: LD_INT 3
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PPUSH
27447: CALL_OW 69
27451: ST_TO_ADDR
// if not tmp then
27452: LD_VAR 0 2
27456: NOT
27457: IFFALSE 27461
// exit ;
27459: GO 27490
// for i in tmp do
27461: LD_ADDR_VAR 0 1
27465: PUSH
27466: LD_VAR 0 2
27470: PUSH
27471: FOR_IN
27472: IFFALSE 27488
// SetBLevel ( i , 10 ) ;
27474: LD_VAR 0 1
27478: PPUSH
27479: LD_INT 10
27481: PPUSH
27482: CALL_OW 241
27486: GO 27471
27488: POP
27489: POP
// end ;
27490: PPOPN 2
27492: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27493: LD_EXP 51
27497: PUSH
27498: LD_EXP 68
27502: AND
27503: IFFALSE 27614
27505: GO 27507
27507: DISABLE
27508: LD_INT 0
27510: PPUSH
27511: PPUSH
27512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27513: LD_ADDR_VAR 0 3
27517: PUSH
27518: LD_INT 22
27520: PUSH
27521: LD_OWVAR 2
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 25
27532: PUSH
27533: LD_INT 1
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PPUSH
27544: CALL_OW 69
27548: ST_TO_ADDR
// if not tmp then
27549: LD_VAR 0 3
27553: NOT
27554: IFFALSE 27558
// exit ;
27556: GO 27614
// un := tmp [ rand ( 1 , tmp ) ] ;
27558: LD_ADDR_VAR 0 2
27562: PUSH
27563: LD_VAR 0 3
27567: PUSH
27568: LD_INT 1
27570: PPUSH
27571: LD_VAR 0 3
27575: PPUSH
27576: CALL_OW 12
27580: ARRAY
27581: ST_TO_ADDR
// if Crawls ( un ) then
27582: LD_VAR 0 2
27586: PPUSH
27587: CALL_OW 318
27591: IFFALSE 27602
// ComWalk ( un ) ;
27593: LD_VAR 0 2
27597: PPUSH
27598: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27602: LD_VAR 0 2
27606: PPUSH
27607: LD_INT 5
27609: PPUSH
27610: CALL_OW 336
// end ;
27614: PPOPN 3
27616: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27617: LD_EXP 51
27621: PUSH
27622: LD_EXP 69
27626: AND
27627: PUSH
27628: LD_OWVAR 67
27632: PUSH
27633: LD_INT 4
27635: LESS
27636: AND
27637: IFFALSE 27656
27639: GO 27641
27641: DISABLE
// begin Difficulty := Difficulty + 1 ;
27642: LD_ADDR_OWVAR 67
27646: PUSH
27647: LD_OWVAR 67
27651: PUSH
27652: LD_INT 1
27654: PLUS
27655: ST_TO_ADDR
// end ;
27656: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27657: LD_EXP 51
27661: PUSH
27662: LD_EXP 70
27666: AND
27667: IFFALSE 27770
27669: GO 27671
27671: DISABLE
27672: LD_INT 0
27674: PPUSH
// begin for i := 1 to 5 do
27675: LD_ADDR_VAR 0 1
27679: PUSH
27680: DOUBLE
27681: LD_INT 1
27683: DEC
27684: ST_TO_ADDR
27685: LD_INT 5
27687: PUSH
27688: FOR_TO
27689: IFFALSE 27768
// begin uc_nation := nation_nature ;
27691: LD_ADDR_OWVAR 21
27695: PUSH
27696: LD_INT 0
27698: ST_TO_ADDR
// uc_side := 0 ;
27699: LD_ADDR_OWVAR 20
27703: PUSH
27704: LD_INT 0
27706: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27707: LD_ADDR_OWVAR 29
27711: PUSH
27712: LD_INT 12
27714: PUSH
27715: LD_INT 12
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: ST_TO_ADDR
// hc_agressivity := 20 ;
27722: LD_ADDR_OWVAR 35
27726: PUSH
27727: LD_INT 20
27729: ST_TO_ADDR
// hc_class := class_tiger ;
27730: LD_ADDR_OWVAR 28
27734: PUSH
27735: LD_INT 14
27737: ST_TO_ADDR
// hc_gallery :=  ;
27738: LD_ADDR_OWVAR 33
27742: PUSH
27743: LD_STRING 
27745: ST_TO_ADDR
// hc_name :=  ;
27746: LD_ADDR_OWVAR 26
27750: PUSH
27751: LD_STRING 
27753: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27754: CALL_OW 44
27758: PPUSH
27759: LD_INT 0
27761: PPUSH
27762: CALL_OW 51
// end ;
27766: GO 27688
27768: POP
27769: POP
// end ;
27770: PPOPN 1
27772: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27773: LD_EXP 51
27777: PUSH
27778: LD_EXP 71
27782: AND
27783: IFFALSE 27792
27785: GO 27787
27787: DISABLE
// StreamSibBomb ;
27788: CALL 27793 0 0
27792: END
// export function StreamSibBomb ; var i , x , y ; begin
27793: LD_INT 0
27795: PPUSH
27796: PPUSH
27797: PPUSH
27798: PPUSH
// result := false ;
27799: LD_ADDR_VAR 0 1
27803: PUSH
27804: LD_INT 0
27806: ST_TO_ADDR
// for i := 1 to 16 do
27807: LD_ADDR_VAR 0 2
27811: PUSH
27812: DOUBLE
27813: LD_INT 1
27815: DEC
27816: ST_TO_ADDR
27817: LD_INT 16
27819: PUSH
27820: FOR_TO
27821: IFFALSE 28020
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27823: LD_ADDR_VAR 0 3
27827: PUSH
27828: LD_INT 10
27830: PUSH
27831: LD_INT 20
27833: PUSH
27834: LD_INT 30
27836: PUSH
27837: LD_INT 40
27839: PUSH
27840: LD_INT 50
27842: PUSH
27843: LD_INT 60
27845: PUSH
27846: LD_INT 70
27848: PUSH
27849: LD_INT 80
27851: PUSH
27852: LD_INT 90
27854: PUSH
27855: LD_INT 100
27857: PUSH
27858: LD_INT 110
27860: PUSH
27861: LD_INT 120
27863: PUSH
27864: LD_INT 130
27866: PUSH
27867: LD_INT 140
27869: PUSH
27870: LD_INT 150
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 1
27892: PPUSH
27893: LD_INT 15
27895: PPUSH
27896: CALL_OW 12
27900: ARRAY
27901: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27902: LD_ADDR_VAR 0 4
27906: PUSH
27907: LD_INT 10
27909: PUSH
27910: LD_INT 20
27912: PUSH
27913: LD_INT 30
27915: PUSH
27916: LD_INT 40
27918: PUSH
27919: LD_INT 50
27921: PUSH
27922: LD_INT 60
27924: PUSH
27925: LD_INT 70
27927: PUSH
27928: LD_INT 80
27930: PUSH
27931: LD_INT 90
27933: PUSH
27934: LD_INT 100
27936: PUSH
27937: LD_INT 110
27939: PUSH
27940: LD_INT 120
27942: PUSH
27943: LD_INT 130
27945: PUSH
27946: LD_INT 140
27948: PUSH
27949: LD_INT 150
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 1
27971: PPUSH
27972: LD_INT 15
27974: PPUSH
27975: CALL_OW 12
27979: ARRAY
27980: ST_TO_ADDR
// if ValidHex ( x , y ) then
27981: LD_VAR 0 3
27985: PPUSH
27986: LD_VAR 0 4
27990: PPUSH
27991: CALL_OW 488
27995: IFFALSE 28018
// begin result := [ x , y ] ;
27997: LD_ADDR_VAR 0 1
28001: PUSH
28002: LD_VAR 0 3
28006: PUSH
28007: LD_VAR 0 4
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: ST_TO_ADDR
// break ;
28016: GO 28020
// end ; end ;
28018: GO 27820
28020: POP
28021: POP
// if result then
28022: LD_VAR 0 1
28026: IFFALSE 28086
// begin ToLua ( playSibBomb() ) ;
28028: LD_STRING playSibBomb()
28030: PPUSH
28031: CALL_OW 559
// wait ( 0 0$14 ) ;
28035: LD_INT 490
28037: PPUSH
28038: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28042: LD_VAR 0 1
28046: PUSH
28047: LD_INT 1
28049: ARRAY
28050: PPUSH
28051: LD_VAR 0 1
28055: PUSH
28056: LD_INT 2
28058: ARRAY
28059: PPUSH
28060: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28064: LD_VAR 0 1
28068: PUSH
28069: LD_INT 1
28071: ARRAY
28072: PPUSH
28073: LD_VAR 0 1
28077: PUSH
28078: LD_INT 2
28080: ARRAY
28081: PPUSH
28082: CALL_OW 429
// end ; end ;
28086: LD_VAR 0 1
28090: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28091: LD_EXP 51
28095: PUSH
28096: LD_EXP 73
28100: AND
28101: IFFALSE 28113
28103: GO 28105
28105: DISABLE
// YouLost (  ) ;
28106: LD_STRING 
28108: PPUSH
28109: CALL_OW 104
28113: END
// every 0 0$1 trigger StreamModeActive and sFog do
28114: LD_EXP 51
28118: PUSH
28119: LD_EXP 72
28123: AND
28124: IFFALSE 28138
28126: GO 28128
28128: DISABLE
// FogOff ( your_side ) ;
28129: LD_OWVAR 2
28133: PPUSH
28134: CALL_OW 344
28138: END
// every 0 0$1 trigger StreamModeActive and sSun do
28139: LD_EXP 51
28143: PUSH
28144: LD_EXP 74
28148: AND
28149: IFFALSE 28177
28151: GO 28153
28153: DISABLE
// begin solar_recharge_percent := 0 ;
28154: LD_ADDR_OWVAR 79
28158: PUSH
28159: LD_INT 0
28161: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28162: LD_INT 10500
28164: PPUSH
28165: CALL_OW 67
// solar_recharge_percent := 100 ;
28169: LD_ADDR_OWVAR 79
28173: PUSH
28174: LD_INT 100
28176: ST_TO_ADDR
// end ;
28177: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28178: LD_EXP 51
28182: PUSH
28183: LD_EXP 75
28187: AND
28188: IFFALSE 28427
28190: GO 28192
28192: DISABLE
28193: LD_INT 0
28195: PPUSH
28196: PPUSH
28197: PPUSH
// begin tmp := [ ] ;
28198: LD_ADDR_VAR 0 3
28202: PUSH
28203: EMPTY
28204: ST_TO_ADDR
// for i := 1 to 6 do
28205: LD_ADDR_VAR 0 1
28209: PUSH
28210: DOUBLE
28211: LD_INT 1
28213: DEC
28214: ST_TO_ADDR
28215: LD_INT 6
28217: PUSH
28218: FOR_TO
28219: IFFALSE 28324
// begin uc_nation := nation_nature ;
28221: LD_ADDR_OWVAR 21
28225: PUSH
28226: LD_INT 0
28228: ST_TO_ADDR
// uc_side := 0 ;
28229: LD_ADDR_OWVAR 20
28233: PUSH
28234: LD_INT 0
28236: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28237: LD_ADDR_OWVAR 29
28241: PUSH
28242: LD_INT 12
28244: PUSH
28245: LD_INT 12
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: ST_TO_ADDR
// hc_agressivity := 20 ;
28252: LD_ADDR_OWVAR 35
28256: PUSH
28257: LD_INT 20
28259: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28260: LD_ADDR_OWVAR 28
28264: PUSH
28265: LD_INT 17
28267: ST_TO_ADDR
// hc_gallery :=  ;
28268: LD_ADDR_OWVAR 33
28272: PUSH
28273: LD_STRING 
28275: ST_TO_ADDR
// hc_name :=  ;
28276: LD_ADDR_OWVAR 26
28280: PUSH
28281: LD_STRING 
28283: ST_TO_ADDR
// un := CreateHuman ;
28284: LD_ADDR_VAR 0 2
28288: PUSH
28289: CALL_OW 44
28293: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28294: LD_VAR 0 2
28298: PPUSH
28299: LD_INT 1
28301: PPUSH
28302: CALL_OW 51
// tmp := tmp ^ un ;
28306: LD_ADDR_VAR 0 3
28310: PUSH
28311: LD_VAR 0 3
28315: PUSH
28316: LD_VAR 0 2
28320: ADD
28321: ST_TO_ADDR
// end ;
28322: GO 28218
28324: POP
28325: POP
// repeat wait ( 0 0$1 ) ;
28326: LD_INT 35
28328: PPUSH
28329: CALL_OW 67
// for un in tmp do
28333: LD_ADDR_VAR 0 2
28337: PUSH
28338: LD_VAR 0 3
28342: PUSH
28343: FOR_IN
28344: IFFALSE 28418
// begin if IsDead ( un ) then
28346: LD_VAR 0 2
28350: PPUSH
28351: CALL_OW 301
28355: IFFALSE 28375
// begin tmp := tmp diff un ;
28357: LD_ADDR_VAR 0 3
28361: PUSH
28362: LD_VAR 0 3
28366: PUSH
28367: LD_VAR 0 2
28371: DIFF
28372: ST_TO_ADDR
// continue ;
28373: GO 28343
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28375: LD_VAR 0 2
28379: PPUSH
28380: LD_INT 3
28382: PUSH
28383: LD_INT 22
28385: PUSH
28386: LD_INT 0
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PPUSH
28397: CALL_OW 69
28401: PPUSH
28402: LD_VAR 0 2
28406: PPUSH
28407: CALL_OW 74
28411: PPUSH
28412: CALL_OW 115
// end ;
28416: GO 28343
28418: POP
28419: POP
// until not tmp ;
28420: LD_VAR 0 3
28424: NOT
28425: IFFALSE 28326
// end ;
28427: PPOPN 3
28429: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28430: LD_EXP 51
28434: PUSH
28435: LD_EXP 76
28439: AND
28440: IFFALSE 28494
28442: GO 28444
28444: DISABLE
// begin ToLua ( displayTroll(); ) ;
28445: LD_STRING displayTroll();
28447: PPUSH
28448: CALL_OW 559
// wait ( 3 3$00 ) ;
28452: LD_INT 6300
28454: PPUSH
28455: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28459: LD_STRING hideTroll();
28461: PPUSH
28462: CALL_OW 559
// wait ( 1 1$00 ) ;
28466: LD_INT 2100
28468: PPUSH
28469: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28473: LD_STRING displayTroll();
28475: PPUSH
28476: CALL_OW 559
// wait ( 1 1$00 ) ;
28480: LD_INT 2100
28482: PPUSH
28483: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28487: LD_STRING hideTroll();
28489: PPUSH
28490: CALL_OW 559
// end ;
28494: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28495: LD_EXP 51
28499: PUSH
28500: LD_EXP 77
28504: AND
28505: IFFALSE 28568
28507: GO 28509
28509: DISABLE
28510: LD_INT 0
28512: PPUSH
// begin p := 0 ;
28513: LD_ADDR_VAR 0 1
28517: PUSH
28518: LD_INT 0
28520: ST_TO_ADDR
// repeat game_speed := 1 ;
28521: LD_ADDR_OWVAR 65
28525: PUSH
28526: LD_INT 1
28528: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28529: LD_INT 35
28531: PPUSH
28532: CALL_OW 67
// p := p + 1 ;
28536: LD_ADDR_VAR 0 1
28540: PUSH
28541: LD_VAR 0 1
28545: PUSH
28546: LD_INT 1
28548: PLUS
28549: ST_TO_ADDR
// until p >= 60 ;
28550: LD_VAR 0 1
28554: PUSH
28555: LD_INT 60
28557: GREATEREQUAL
28558: IFFALSE 28521
// game_speed := 4 ;
28560: LD_ADDR_OWVAR 65
28564: PUSH
28565: LD_INT 4
28567: ST_TO_ADDR
// end ;
28568: PPOPN 1
28570: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28571: LD_EXP 51
28575: PUSH
28576: LD_EXP 78
28580: AND
28581: IFFALSE 28727
28583: GO 28585
28585: DISABLE
28586: LD_INT 0
28588: PPUSH
28589: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28590: LD_ADDR_VAR 0 1
28594: PUSH
28595: LD_INT 22
28597: PUSH
28598: LD_OWVAR 2
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 2
28609: PUSH
28610: LD_INT 30
28612: PUSH
28613: LD_INT 0
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 30
28622: PUSH
28623: LD_INT 1
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: LIST
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PPUSH
28639: CALL_OW 69
28643: ST_TO_ADDR
// if not depot then
28644: LD_VAR 0 1
28648: NOT
28649: IFFALSE 28653
// exit ;
28651: GO 28727
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28653: LD_ADDR_VAR 0 2
28657: PUSH
28658: LD_VAR 0 1
28662: PUSH
28663: LD_INT 1
28665: PPUSH
28666: LD_VAR 0 1
28670: PPUSH
28671: CALL_OW 12
28675: ARRAY
28676: PPUSH
28677: CALL_OW 274
28681: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28682: LD_VAR 0 2
28686: PPUSH
28687: LD_INT 1
28689: PPUSH
28690: LD_INT 0
28692: PPUSH
28693: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28697: LD_VAR 0 2
28701: PPUSH
28702: LD_INT 2
28704: PPUSH
28705: LD_INT 0
28707: PPUSH
28708: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28712: LD_VAR 0 2
28716: PPUSH
28717: LD_INT 3
28719: PPUSH
28720: LD_INT 0
28722: PPUSH
28723: CALL_OW 277
// end ;
28727: PPOPN 2
28729: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28730: LD_EXP 51
28734: PUSH
28735: LD_EXP 79
28739: AND
28740: IFFALSE 28837
28742: GO 28744
28744: DISABLE
28745: LD_INT 0
28747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28748: LD_ADDR_VAR 0 1
28752: PUSH
28753: LD_INT 22
28755: PUSH
28756: LD_OWVAR 2
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 21
28767: PUSH
28768: LD_INT 1
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 3
28777: PUSH
28778: LD_INT 23
28780: PUSH
28781: LD_INT 0
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: LIST
28796: PPUSH
28797: CALL_OW 69
28801: ST_TO_ADDR
// if not tmp then
28802: LD_VAR 0 1
28806: NOT
28807: IFFALSE 28811
// exit ;
28809: GO 28837
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28811: LD_VAR 0 1
28815: PUSH
28816: LD_INT 1
28818: PPUSH
28819: LD_VAR 0 1
28823: PPUSH
28824: CALL_OW 12
28828: ARRAY
28829: PPUSH
28830: LD_INT 200
28832: PPUSH
28833: CALL_OW 234
// end ;
28837: PPOPN 1
28839: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28840: LD_EXP 51
28844: PUSH
28845: LD_EXP 80
28849: AND
28850: IFFALSE 28929
28852: GO 28854
28854: DISABLE
28855: LD_INT 0
28857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28858: LD_ADDR_VAR 0 1
28862: PUSH
28863: LD_INT 22
28865: PUSH
28866: LD_OWVAR 2
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 21
28877: PUSH
28878: LD_INT 2
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PPUSH
28889: CALL_OW 69
28893: ST_TO_ADDR
// if not tmp then
28894: LD_VAR 0 1
28898: NOT
28899: IFFALSE 28903
// exit ;
28901: GO 28929
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28903: LD_VAR 0 1
28907: PUSH
28908: LD_INT 1
28910: PPUSH
28911: LD_VAR 0 1
28915: PPUSH
28916: CALL_OW 12
28920: ARRAY
28921: PPUSH
28922: LD_INT 60
28924: PPUSH
28925: CALL_OW 234
// end ;
28929: PPOPN 1
28931: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28932: LD_EXP 51
28936: PUSH
28937: LD_EXP 81
28941: AND
28942: IFFALSE 29041
28944: GO 28946
28946: DISABLE
28947: LD_INT 0
28949: PPUSH
28950: PPUSH
// begin enable ;
28951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28952: LD_ADDR_VAR 0 1
28956: PUSH
28957: LD_INT 22
28959: PUSH
28960: LD_OWVAR 2
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 61
28971: PUSH
28972: EMPTY
28973: LIST
28974: PUSH
28975: LD_INT 33
28977: PUSH
28978: LD_INT 2
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: LIST
28989: PPUSH
28990: CALL_OW 69
28994: ST_TO_ADDR
// if not tmp then
28995: LD_VAR 0 1
28999: NOT
29000: IFFALSE 29004
// exit ;
29002: GO 29041
// for i in tmp do
29004: LD_ADDR_VAR 0 2
29008: PUSH
29009: LD_VAR 0 1
29013: PUSH
29014: FOR_IN
29015: IFFALSE 29039
// if IsControledBy ( i ) then
29017: LD_VAR 0 2
29021: PPUSH
29022: CALL_OW 312
29026: IFFALSE 29037
// ComUnlink ( i ) ;
29028: LD_VAR 0 2
29032: PPUSH
29033: CALL_OW 136
29037: GO 29014
29039: POP
29040: POP
// end ;
29041: PPOPN 2
29043: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29044: LD_EXP 51
29048: PUSH
29049: LD_EXP 82
29053: AND
29054: IFFALSE 29194
29056: GO 29058
29058: DISABLE
29059: LD_INT 0
29061: PPUSH
29062: PPUSH
// begin ToLua ( displayPowell(); ) ;
29063: LD_STRING displayPowell();
29065: PPUSH
29066: CALL_OW 559
// uc_side := 0 ;
29070: LD_ADDR_OWVAR 20
29074: PUSH
29075: LD_INT 0
29077: ST_TO_ADDR
// uc_nation := 2 ;
29078: LD_ADDR_OWVAR 21
29082: PUSH
29083: LD_INT 2
29085: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29086: LD_ADDR_OWVAR 37
29090: PUSH
29091: LD_INT 14
29093: ST_TO_ADDR
// vc_engine := engine_siberite ;
29094: LD_ADDR_OWVAR 39
29098: PUSH
29099: LD_INT 3
29101: ST_TO_ADDR
// vc_control := control_apeman ;
29102: LD_ADDR_OWVAR 38
29106: PUSH
29107: LD_INT 5
29109: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29110: LD_ADDR_OWVAR 40
29114: PUSH
29115: LD_INT 29
29117: ST_TO_ADDR
// un := CreateVehicle ;
29118: LD_ADDR_VAR 0 2
29122: PUSH
29123: CALL_OW 45
29127: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29128: LD_VAR 0 2
29132: PPUSH
29133: LD_INT 1
29135: PPUSH
29136: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29140: LD_INT 35
29142: PPUSH
29143: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29147: LD_VAR 0 2
29151: PPUSH
29152: LD_INT 22
29154: PUSH
29155: LD_OWVAR 2
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PPUSH
29164: CALL_OW 69
29168: PPUSH
29169: LD_VAR 0 2
29173: PPUSH
29174: CALL_OW 74
29178: PPUSH
29179: CALL_OW 115
// until IsDead ( un ) ;
29183: LD_VAR 0 2
29187: PPUSH
29188: CALL_OW 301
29192: IFFALSE 29140
// end ;
29194: PPOPN 2
29196: END
// every 0 0$1 trigger StreamModeActive and sStu do
29197: LD_EXP 51
29201: PUSH
29202: LD_EXP 90
29206: AND
29207: IFFALSE 29223
29209: GO 29211
29211: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29212: LD_STRING displayStucuk();
29214: PPUSH
29215: CALL_OW 559
// ResetFog ;
29219: CALL_OW 335
// end ;
29223: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29224: LD_EXP 51
29228: PUSH
29229: LD_EXP 83
29233: AND
29234: IFFALSE 29375
29236: GO 29238
29238: DISABLE
29239: LD_INT 0
29241: PPUSH
29242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29243: LD_ADDR_VAR 0 2
29247: PUSH
29248: LD_INT 22
29250: PUSH
29251: LD_OWVAR 2
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 21
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PPUSH
29274: CALL_OW 69
29278: ST_TO_ADDR
// if not tmp then
29279: LD_VAR 0 2
29283: NOT
29284: IFFALSE 29288
// exit ;
29286: GO 29375
// un := tmp [ rand ( 1 , tmp ) ] ;
29288: LD_ADDR_VAR 0 1
29292: PUSH
29293: LD_VAR 0 2
29297: PUSH
29298: LD_INT 1
29300: PPUSH
29301: LD_VAR 0 2
29305: PPUSH
29306: CALL_OW 12
29310: ARRAY
29311: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29312: LD_VAR 0 1
29316: PPUSH
29317: LD_INT 0
29319: PPUSH
29320: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29324: LD_VAR 0 1
29328: PPUSH
29329: LD_OWVAR 3
29333: PUSH
29334: LD_VAR 0 1
29338: DIFF
29339: PPUSH
29340: LD_VAR 0 1
29344: PPUSH
29345: CALL_OW 74
29349: PPUSH
29350: CALL_OW 115
// wait ( 0 0$20 ) ;
29354: LD_INT 700
29356: PPUSH
29357: CALL_OW 67
// SetSide ( un , your_side ) ;
29361: LD_VAR 0 1
29365: PPUSH
29366: LD_OWVAR 2
29370: PPUSH
29371: CALL_OW 235
// end ;
29375: PPOPN 2
29377: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29378: LD_EXP 51
29382: PUSH
29383: LD_EXP 84
29387: AND
29388: IFFALSE 29494
29390: GO 29392
29392: DISABLE
29393: LD_INT 0
29395: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29396: LD_ADDR_VAR 0 1
29400: PUSH
29401: LD_INT 22
29403: PUSH
29404: LD_OWVAR 2
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 2
29415: PUSH
29416: LD_INT 30
29418: PUSH
29419: LD_INT 0
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 30
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: LIST
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PPUSH
29445: CALL_OW 69
29449: ST_TO_ADDR
// if not depot then
29450: LD_VAR 0 1
29454: NOT
29455: IFFALSE 29459
// exit ;
29457: GO 29494
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29459: LD_VAR 0 1
29463: PUSH
29464: LD_INT 1
29466: ARRAY
29467: PPUSH
29468: CALL_OW 250
29472: PPUSH
29473: LD_VAR 0 1
29477: PUSH
29478: LD_INT 1
29480: ARRAY
29481: PPUSH
29482: CALL_OW 251
29486: PPUSH
29487: LD_INT 70
29489: PPUSH
29490: CALL_OW 495
// end ;
29494: PPOPN 1
29496: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29497: LD_EXP 51
29501: PUSH
29502: LD_EXP 85
29506: AND
29507: IFFALSE 29718
29509: GO 29511
29511: DISABLE
29512: LD_INT 0
29514: PPUSH
29515: PPUSH
29516: PPUSH
29517: PPUSH
29518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29519: LD_ADDR_VAR 0 5
29523: PUSH
29524: LD_INT 22
29526: PUSH
29527: LD_OWVAR 2
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 21
29538: PUSH
29539: LD_INT 1
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PPUSH
29550: CALL_OW 69
29554: ST_TO_ADDR
// if not tmp then
29555: LD_VAR 0 5
29559: NOT
29560: IFFALSE 29564
// exit ;
29562: GO 29718
// for i in tmp do
29564: LD_ADDR_VAR 0 1
29568: PUSH
29569: LD_VAR 0 5
29573: PUSH
29574: FOR_IN
29575: IFFALSE 29716
// begin d := rand ( 0 , 5 ) ;
29577: LD_ADDR_VAR 0 4
29581: PUSH
29582: LD_INT 0
29584: PPUSH
29585: LD_INT 5
29587: PPUSH
29588: CALL_OW 12
29592: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29593: LD_ADDR_VAR 0 2
29597: PUSH
29598: LD_VAR 0 1
29602: PPUSH
29603: CALL_OW 250
29607: PPUSH
29608: LD_VAR 0 4
29612: PPUSH
29613: LD_INT 3
29615: PPUSH
29616: LD_INT 12
29618: PPUSH
29619: CALL_OW 12
29623: PPUSH
29624: CALL_OW 272
29628: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29629: LD_ADDR_VAR 0 3
29633: PUSH
29634: LD_VAR 0 1
29638: PPUSH
29639: CALL_OW 251
29643: PPUSH
29644: LD_VAR 0 4
29648: PPUSH
29649: LD_INT 3
29651: PPUSH
29652: LD_INT 12
29654: PPUSH
29655: CALL_OW 12
29659: PPUSH
29660: CALL_OW 273
29664: ST_TO_ADDR
// if ValidHex ( x , y ) then
29665: LD_VAR 0 2
29669: PPUSH
29670: LD_VAR 0 3
29674: PPUSH
29675: CALL_OW 488
29679: IFFALSE 29714
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29681: LD_VAR 0 1
29685: PPUSH
29686: LD_VAR 0 2
29690: PPUSH
29691: LD_VAR 0 3
29695: PPUSH
29696: LD_INT 3
29698: PPUSH
29699: LD_INT 6
29701: PPUSH
29702: CALL_OW 12
29706: PPUSH
29707: LD_INT 1
29709: PPUSH
29710: CALL_OW 483
// end ;
29714: GO 29574
29716: POP
29717: POP
// end ;
29718: PPOPN 5
29720: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29721: LD_EXP 51
29725: PUSH
29726: LD_EXP 86
29730: AND
29731: IFFALSE 29825
29733: GO 29735
29735: DISABLE
29736: LD_INT 0
29738: PPUSH
29739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29740: LD_ADDR_VAR 0 2
29744: PUSH
29745: LD_INT 22
29747: PUSH
29748: LD_OWVAR 2
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 32
29759: PUSH
29760: LD_INT 1
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 21
29769: PUSH
29770: LD_INT 2
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: LIST
29781: PPUSH
29782: CALL_OW 69
29786: ST_TO_ADDR
// if not tmp then
29787: LD_VAR 0 2
29791: NOT
29792: IFFALSE 29796
// exit ;
29794: GO 29825
// for i in tmp do
29796: LD_ADDR_VAR 0 1
29800: PUSH
29801: LD_VAR 0 2
29805: PUSH
29806: FOR_IN
29807: IFFALSE 29823
// SetFuel ( i , 0 ) ;
29809: LD_VAR 0 1
29813: PPUSH
29814: LD_INT 0
29816: PPUSH
29817: CALL_OW 240
29821: GO 29806
29823: POP
29824: POP
// end ;
29825: PPOPN 2
29827: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29828: LD_EXP 51
29832: PUSH
29833: LD_EXP 87
29837: AND
29838: IFFALSE 29904
29840: GO 29842
29842: DISABLE
29843: LD_INT 0
29845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29846: LD_ADDR_VAR 0 1
29850: PUSH
29851: LD_INT 22
29853: PUSH
29854: LD_OWVAR 2
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 30
29865: PUSH
29866: LD_INT 29
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PPUSH
29877: CALL_OW 69
29881: ST_TO_ADDR
// if not tmp then
29882: LD_VAR 0 1
29886: NOT
29887: IFFALSE 29891
// exit ;
29889: GO 29904
// DestroyUnit ( tmp [ 1 ] ) ;
29891: LD_VAR 0 1
29895: PUSH
29896: LD_INT 1
29898: ARRAY
29899: PPUSH
29900: CALL_OW 65
// end ;
29904: PPOPN 1
29906: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29907: LD_EXP 51
29911: PUSH
29912: LD_EXP 89
29916: AND
29917: IFFALSE 30046
29919: GO 29921
29921: DISABLE
29922: LD_INT 0
29924: PPUSH
// begin uc_side := 0 ;
29925: LD_ADDR_OWVAR 20
29929: PUSH
29930: LD_INT 0
29932: ST_TO_ADDR
// uc_nation := nation_arabian ;
29933: LD_ADDR_OWVAR 21
29937: PUSH
29938: LD_INT 2
29940: ST_TO_ADDR
// hc_gallery :=  ;
29941: LD_ADDR_OWVAR 33
29945: PUSH
29946: LD_STRING 
29948: ST_TO_ADDR
// hc_name :=  ;
29949: LD_ADDR_OWVAR 26
29953: PUSH
29954: LD_STRING 
29956: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29957: LD_INT 1
29959: PPUSH
29960: LD_INT 11
29962: PPUSH
29963: LD_INT 10
29965: PPUSH
29966: CALL_OW 380
// un := CreateHuman ;
29970: LD_ADDR_VAR 0 1
29974: PUSH
29975: CALL_OW 44
29979: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29980: LD_VAR 0 1
29984: PPUSH
29985: LD_INT 1
29987: PPUSH
29988: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29992: LD_INT 35
29994: PPUSH
29995: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29999: LD_VAR 0 1
30003: PPUSH
30004: LD_INT 22
30006: PUSH
30007: LD_OWVAR 2
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PPUSH
30016: CALL_OW 69
30020: PPUSH
30021: LD_VAR 0 1
30025: PPUSH
30026: CALL_OW 74
30030: PPUSH
30031: CALL_OW 115
// until IsDead ( un ) ;
30035: LD_VAR 0 1
30039: PPUSH
30040: CALL_OW 301
30044: IFFALSE 29992
// end ;
30046: PPOPN 1
30048: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30049: LD_EXP 51
30053: PUSH
30054: LD_EXP 91
30058: AND
30059: IFFALSE 30071
30061: GO 30063
30063: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30064: LD_STRING earthquake(getX(game), 0, 32)
30066: PPUSH
30067: CALL_OW 559
30071: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30072: LD_EXP 51
30076: PUSH
30077: LD_EXP 92
30081: AND
30082: IFFALSE 30173
30084: GO 30086
30086: DISABLE
30087: LD_INT 0
30089: PPUSH
// begin enable ;
30090: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30091: LD_ADDR_VAR 0 1
30095: PUSH
30096: LD_INT 22
30098: PUSH
30099: LD_OWVAR 2
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 21
30110: PUSH
30111: LD_INT 2
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 33
30120: PUSH
30121: LD_INT 3
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: LIST
30132: PPUSH
30133: CALL_OW 69
30137: ST_TO_ADDR
// if not tmp then
30138: LD_VAR 0 1
30142: NOT
30143: IFFALSE 30147
// exit ;
30145: GO 30173
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30147: LD_VAR 0 1
30151: PUSH
30152: LD_INT 1
30154: PPUSH
30155: LD_VAR 0 1
30159: PPUSH
30160: CALL_OW 12
30164: ARRAY
30165: PPUSH
30166: LD_INT 1
30168: PPUSH
30169: CALL_OW 234
// end ;
30173: PPOPN 1
30175: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30176: LD_EXP 51
30180: PUSH
30181: LD_EXP 93
30185: AND
30186: IFFALSE 30327
30188: GO 30190
30190: DISABLE
30191: LD_INT 0
30193: PPUSH
30194: PPUSH
30195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30196: LD_ADDR_VAR 0 3
30200: PUSH
30201: LD_INT 22
30203: PUSH
30204: LD_OWVAR 2
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 25
30215: PUSH
30216: LD_INT 1
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PPUSH
30227: CALL_OW 69
30231: ST_TO_ADDR
// if not tmp then
30232: LD_VAR 0 3
30236: NOT
30237: IFFALSE 30241
// exit ;
30239: GO 30327
// un := tmp [ rand ( 1 , tmp ) ] ;
30241: LD_ADDR_VAR 0 2
30245: PUSH
30246: LD_VAR 0 3
30250: PUSH
30251: LD_INT 1
30253: PPUSH
30254: LD_VAR 0 3
30258: PPUSH
30259: CALL_OW 12
30263: ARRAY
30264: ST_TO_ADDR
// if Crawls ( un ) then
30265: LD_VAR 0 2
30269: PPUSH
30270: CALL_OW 318
30274: IFFALSE 30285
// ComWalk ( un ) ;
30276: LD_VAR 0 2
30280: PPUSH
30281: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30285: LD_VAR 0 2
30289: PPUSH
30290: LD_INT 9
30292: PPUSH
30293: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30297: LD_INT 28
30299: PPUSH
30300: LD_OWVAR 2
30304: PPUSH
30305: LD_INT 2
30307: PPUSH
30308: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30312: LD_INT 29
30314: PPUSH
30315: LD_OWVAR 2
30319: PPUSH
30320: LD_INT 2
30322: PPUSH
30323: CALL_OW 322
// end ;
30327: PPOPN 3
30329: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30330: LD_EXP 51
30334: PUSH
30335: LD_EXP 94
30339: AND
30340: IFFALSE 30451
30342: GO 30344
30344: DISABLE
30345: LD_INT 0
30347: PPUSH
30348: PPUSH
30349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30350: LD_ADDR_VAR 0 3
30354: PUSH
30355: LD_INT 22
30357: PUSH
30358: LD_OWVAR 2
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 25
30369: PUSH
30370: LD_INT 1
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PPUSH
30381: CALL_OW 69
30385: ST_TO_ADDR
// if not tmp then
30386: LD_VAR 0 3
30390: NOT
30391: IFFALSE 30395
// exit ;
30393: GO 30451
// un := tmp [ rand ( 1 , tmp ) ] ;
30395: LD_ADDR_VAR 0 2
30399: PUSH
30400: LD_VAR 0 3
30404: PUSH
30405: LD_INT 1
30407: PPUSH
30408: LD_VAR 0 3
30412: PPUSH
30413: CALL_OW 12
30417: ARRAY
30418: ST_TO_ADDR
// if Crawls ( un ) then
30419: LD_VAR 0 2
30423: PPUSH
30424: CALL_OW 318
30428: IFFALSE 30439
// ComWalk ( un ) ;
30430: LD_VAR 0 2
30434: PPUSH
30435: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30439: LD_VAR 0 2
30443: PPUSH
30444: LD_INT 8
30446: PPUSH
30447: CALL_OW 336
// end ;
30451: PPOPN 3
30453: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30454: LD_EXP 51
30458: PUSH
30459: LD_EXP 95
30463: AND
30464: IFFALSE 30608
30466: GO 30468
30468: DISABLE
30469: LD_INT 0
30471: PPUSH
30472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30473: LD_ADDR_VAR 0 2
30477: PUSH
30478: LD_INT 22
30480: PUSH
30481: LD_OWVAR 2
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 21
30492: PUSH
30493: LD_INT 2
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: LD_INT 34
30505: PUSH
30506: LD_INT 12
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 34
30515: PUSH
30516: LD_INT 51
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 34
30525: PUSH
30526: LD_INT 32
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: LIST
30543: PPUSH
30544: CALL_OW 69
30548: ST_TO_ADDR
// if not tmp then
30549: LD_VAR 0 2
30553: NOT
30554: IFFALSE 30558
// exit ;
30556: GO 30608
// for i in tmp do
30558: LD_ADDR_VAR 0 1
30562: PUSH
30563: LD_VAR 0 2
30567: PUSH
30568: FOR_IN
30569: IFFALSE 30606
// if GetCargo ( i , mat_artifact ) = 0 then
30571: LD_VAR 0 1
30575: PPUSH
30576: LD_INT 4
30578: PPUSH
30579: CALL_OW 289
30583: PUSH
30584: LD_INT 0
30586: EQUAL
30587: IFFALSE 30604
// SetCargo ( i , mat_siberit , 100 ) ;
30589: LD_VAR 0 1
30593: PPUSH
30594: LD_INT 3
30596: PPUSH
30597: LD_INT 100
30599: PPUSH
30600: CALL_OW 290
30604: GO 30568
30606: POP
30607: POP
// end ;
30608: PPOPN 2
30610: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30611: LD_EXP 51
30615: PUSH
30616: LD_EXP 96
30620: AND
30621: IFFALSE 30804
30623: GO 30625
30625: DISABLE
30626: LD_INT 0
30628: PPUSH
30629: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30630: LD_ADDR_VAR 0 2
30634: PUSH
30635: LD_INT 22
30637: PUSH
30638: LD_OWVAR 2
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PPUSH
30647: CALL_OW 69
30651: ST_TO_ADDR
// if not tmp then
30652: LD_VAR 0 2
30656: NOT
30657: IFFALSE 30661
// exit ;
30659: GO 30804
// for i := 1 to 2 do
30661: LD_ADDR_VAR 0 1
30665: PUSH
30666: DOUBLE
30667: LD_INT 1
30669: DEC
30670: ST_TO_ADDR
30671: LD_INT 2
30673: PUSH
30674: FOR_TO
30675: IFFALSE 30802
// begin uc_side := your_side ;
30677: LD_ADDR_OWVAR 20
30681: PUSH
30682: LD_OWVAR 2
30686: ST_TO_ADDR
// uc_nation := nation_american ;
30687: LD_ADDR_OWVAR 21
30691: PUSH
30692: LD_INT 1
30694: ST_TO_ADDR
// vc_chassis := us_morphling ;
30695: LD_ADDR_OWVAR 37
30699: PUSH
30700: LD_INT 5
30702: ST_TO_ADDR
// vc_engine := engine_siberite ;
30703: LD_ADDR_OWVAR 39
30707: PUSH
30708: LD_INT 3
30710: ST_TO_ADDR
// vc_control := control_computer ;
30711: LD_ADDR_OWVAR 38
30715: PUSH
30716: LD_INT 3
30718: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30719: LD_ADDR_OWVAR 40
30723: PUSH
30724: LD_INT 10
30726: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30727: LD_VAR 0 2
30731: PUSH
30732: LD_INT 1
30734: ARRAY
30735: PPUSH
30736: CALL_OW 310
30740: NOT
30741: IFFALSE 30788
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30743: CALL_OW 45
30747: PPUSH
30748: LD_VAR 0 2
30752: PUSH
30753: LD_INT 1
30755: ARRAY
30756: PPUSH
30757: CALL_OW 250
30761: PPUSH
30762: LD_VAR 0 2
30766: PUSH
30767: LD_INT 1
30769: ARRAY
30770: PPUSH
30771: CALL_OW 251
30775: PPUSH
30776: LD_INT 12
30778: PPUSH
30779: LD_INT 1
30781: PPUSH
30782: CALL_OW 50
30786: GO 30800
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30788: CALL_OW 45
30792: PPUSH
30793: LD_INT 1
30795: PPUSH
30796: CALL_OW 51
// end ;
30800: GO 30674
30802: POP
30803: POP
// end ;
30804: PPOPN 2
30806: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30807: LD_EXP 51
30811: PUSH
30812: LD_EXP 97
30816: AND
30817: IFFALSE 31039
30819: GO 30821
30821: DISABLE
30822: LD_INT 0
30824: PPUSH
30825: PPUSH
30826: PPUSH
30827: PPUSH
30828: PPUSH
30829: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30830: LD_ADDR_VAR 0 6
30834: PUSH
30835: LD_INT 22
30837: PUSH
30838: LD_OWVAR 2
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 21
30849: PUSH
30850: LD_INT 1
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 3
30859: PUSH
30860: LD_INT 23
30862: PUSH
30863: LD_INT 0
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: PPUSH
30879: CALL_OW 69
30883: ST_TO_ADDR
// if not tmp then
30884: LD_VAR 0 6
30888: NOT
30889: IFFALSE 30893
// exit ;
30891: GO 31039
// s1 := rand ( 1 , 4 ) ;
30893: LD_ADDR_VAR 0 2
30897: PUSH
30898: LD_INT 1
30900: PPUSH
30901: LD_INT 4
30903: PPUSH
30904: CALL_OW 12
30908: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30909: LD_ADDR_VAR 0 4
30913: PUSH
30914: LD_VAR 0 6
30918: PUSH
30919: LD_INT 1
30921: ARRAY
30922: PPUSH
30923: LD_VAR 0 2
30927: PPUSH
30928: CALL_OW 259
30932: ST_TO_ADDR
// if s1 = 1 then
30933: LD_VAR 0 2
30937: PUSH
30938: LD_INT 1
30940: EQUAL
30941: IFFALSE 30961
// s2 := rand ( 2 , 4 ) else
30943: LD_ADDR_VAR 0 3
30947: PUSH
30948: LD_INT 2
30950: PPUSH
30951: LD_INT 4
30953: PPUSH
30954: CALL_OW 12
30958: ST_TO_ADDR
30959: GO 30969
// s2 := 1 ;
30961: LD_ADDR_VAR 0 3
30965: PUSH
30966: LD_INT 1
30968: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30969: LD_ADDR_VAR 0 5
30973: PUSH
30974: LD_VAR 0 6
30978: PUSH
30979: LD_INT 1
30981: ARRAY
30982: PPUSH
30983: LD_VAR 0 3
30987: PPUSH
30988: CALL_OW 259
30992: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30993: LD_VAR 0 6
30997: PUSH
30998: LD_INT 1
31000: ARRAY
31001: PPUSH
31002: LD_VAR 0 2
31006: PPUSH
31007: LD_VAR 0 5
31011: PPUSH
31012: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31016: LD_VAR 0 6
31020: PUSH
31021: LD_INT 1
31023: ARRAY
31024: PPUSH
31025: LD_VAR 0 3
31029: PPUSH
31030: LD_VAR 0 4
31034: PPUSH
31035: CALL_OW 237
// end ;
31039: PPOPN 6
31041: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31042: LD_EXP 51
31046: PUSH
31047: LD_EXP 98
31051: AND
31052: IFFALSE 31131
31054: GO 31056
31056: DISABLE
31057: LD_INT 0
31059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31060: LD_ADDR_VAR 0 1
31064: PUSH
31065: LD_INT 22
31067: PUSH
31068: LD_OWVAR 2
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 30
31079: PUSH
31080: LD_INT 3
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PPUSH
31091: CALL_OW 69
31095: ST_TO_ADDR
// if not tmp then
31096: LD_VAR 0 1
31100: NOT
31101: IFFALSE 31105
// exit ;
31103: GO 31131
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31105: LD_VAR 0 1
31109: PUSH
31110: LD_INT 1
31112: PPUSH
31113: LD_VAR 0 1
31117: PPUSH
31118: CALL_OW 12
31122: ARRAY
31123: PPUSH
31124: LD_INT 1
31126: PPUSH
31127: CALL_OW 234
// end ;
31131: PPOPN 1
31133: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31134: LD_EXP 51
31138: PUSH
31139: LD_EXP 99
31143: AND
31144: IFFALSE 31256
31146: GO 31148
31148: DISABLE
31149: LD_INT 0
31151: PPUSH
31152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31153: LD_ADDR_VAR 0 2
31157: PUSH
31158: LD_INT 22
31160: PUSH
31161: LD_OWVAR 2
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 2
31172: PUSH
31173: LD_INT 30
31175: PUSH
31176: LD_INT 27
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 30
31185: PUSH
31186: LD_INT 26
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 30
31195: PUSH
31196: LD_INT 28
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PPUSH
31213: CALL_OW 69
31217: ST_TO_ADDR
// if not tmp then
31218: LD_VAR 0 2
31222: NOT
31223: IFFALSE 31227
// exit ;
31225: GO 31256
// for i in tmp do
31227: LD_ADDR_VAR 0 1
31231: PUSH
31232: LD_VAR 0 2
31236: PUSH
31237: FOR_IN
31238: IFFALSE 31254
// SetLives ( i , 1 ) ;
31240: LD_VAR 0 1
31244: PPUSH
31245: LD_INT 1
31247: PPUSH
31248: CALL_OW 234
31252: GO 31237
31254: POP
31255: POP
// end ;
31256: PPOPN 2
31258: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31259: LD_EXP 51
31263: PUSH
31264: LD_EXP 100
31268: AND
31269: IFFALSE 31556
31271: GO 31273
31273: DISABLE
31274: LD_INT 0
31276: PPUSH
31277: PPUSH
31278: PPUSH
// begin i := rand ( 1 , 7 ) ;
31279: LD_ADDR_VAR 0 1
31283: PUSH
31284: LD_INT 1
31286: PPUSH
31287: LD_INT 7
31289: PPUSH
31290: CALL_OW 12
31294: ST_TO_ADDR
// case i of 1 :
31295: LD_VAR 0 1
31299: PUSH
31300: LD_INT 1
31302: DOUBLE
31303: EQUAL
31304: IFTRUE 31308
31306: GO 31318
31308: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31309: LD_STRING earthquake(getX(game), 0, 32)
31311: PPUSH
31312: CALL_OW 559
31316: GO 31556
31318: LD_INT 2
31320: DOUBLE
31321: EQUAL
31322: IFTRUE 31326
31324: GO 31340
31326: POP
// begin ToLua ( displayStucuk(); ) ;
31327: LD_STRING displayStucuk();
31329: PPUSH
31330: CALL_OW 559
// ResetFog ;
31334: CALL_OW 335
// end ; 3 :
31338: GO 31556
31340: LD_INT 3
31342: DOUBLE
31343: EQUAL
31344: IFTRUE 31348
31346: GO 31452
31348: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31349: LD_ADDR_VAR 0 2
31353: PUSH
31354: LD_INT 22
31356: PUSH
31357: LD_OWVAR 2
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 25
31368: PUSH
31369: LD_INT 1
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PPUSH
31380: CALL_OW 69
31384: ST_TO_ADDR
// if not tmp then
31385: LD_VAR 0 2
31389: NOT
31390: IFFALSE 31394
// exit ;
31392: GO 31556
// un := tmp [ rand ( 1 , tmp ) ] ;
31394: LD_ADDR_VAR 0 3
31398: PUSH
31399: LD_VAR 0 2
31403: PUSH
31404: LD_INT 1
31406: PPUSH
31407: LD_VAR 0 2
31411: PPUSH
31412: CALL_OW 12
31416: ARRAY
31417: ST_TO_ADDR
// if Crawls ( un ) then
31418: LD_VAR 0 3
31422: PPUSH
31423: CALL_OW 318
31427: IFFALSE 31438
// ComWalk ( un ) ;
31429: LD_VAR 0 3
31433: PPUSH
31434: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31438: LD_VAR 0 3
31442: PPUSH
31443: LD_INT 8
31445: PPUSH
31446: CALL_OW 336
// end ; 4 :
31450: GO 31556
31452: LD_INT 4
31454: DOUBLE
31455: EQUAL
31456: IFTRUE 31460
31458: GO 31534
31460: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31461: LD_ADDR_VAR 0 2
31465: PUSH
31466: LD_INT 22
31468: PUSH
31469: LD_OWVAR 2
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 30
31480: PUSH
31481: LD_INT 29
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PPUSH
31492: CALL_OW 69
31496: ST_TO_ADDR
// if not tmp then
31497: LD_VAR 0 2
31501: NOT
31502: IFFALSE 31506
// exit ;
31504: GO 31556
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31506: LD_VAR 0 2
31510: PUSH
31511: LD_INT 1
31513: ARRAY
31514: PPUSH
31515: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31519: LD_VAR 0 2
31523: PUSH
31524: LD_INT 1
31526: ARRAY
31527: PPUSH
31528: CALL_OW 65
// end ; 5 .. 7 :
31532: GO 31556
31534: LD_INT 5
31536: DOUBLE
31537: GREATEREQUAL
31538: IFFALSE 31546
31540: LD_INT 7
31542: DOUBLE
31543: LESSEQUAL
31544: IFTRUE 31548
31546: GO 31555
31548: POP
// StreamSibBomb ; end ;
31549: CALL 27793 0 0
31553: GO 31556
31555: POP
// end ;
31556: PPOPN 3
31558: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31559: LD_EXP 51
31563: PUSH
31564: LD_EXP 101
31568: AND
31569: IFFALSE 31725
31571: GO 31573
31573: DISABLE
31574: LD_INT 0
31576: PPUSH
31577: PPUSH
31578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31579: LD_ADDR_VAR 0 2
31583: PUSH
31584: LD_INT 81
31586: PUSH
31587: LD_OWVAR 2
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 2
31598: PUSH
31599: LD_INT 21
31601: PUSH
31602: LD_INT 1
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 21
31611: PUSH
31612: LD_INT 2
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: LIST
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PPUSH
31628: CALL_OW 69
31632: ST_TO_ADDR
// if not tmp then
31633: LD_VAR 0 2
31637: NOT
31638: IFFALSE 31642
// exit ;
31640: GO 31725
// p := 0 ;
31642: LD_ADDR_VAR 0 3
31646: PUSH
31647: LD_INT 0
31649: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31650: LD_INT 35
31652: PPUSH
31653: CALL_OW 67
// p := p + 1 ;
31657: LD_ADDR_VAR 0 3
31661: PUSH
31662: LD_VAR 0 3
31666: PUSH
31667: LD_INT 1
31669: PLUS
31670: ST_TO_ADDR
// for i in tmp do
31671: LD_ADDR_VAR 0 1
31675: PUSH
31676: LD_VAR 0 2
31680: PUSH
31681: FOR_IN
31682: IFFALSE 31713
// if GetLives ( i ) < 1000 then
31684: LD_VAR 0 1
31688: PPUSH
31689: CALL_OW 256
31693: PUSH
31694: LD_INT 1000
31696: LESS
31697: IFFALSE 31711
// SetLives ( i , 1000 ) ;
31699: LD_VAR 0 1
31703: PPUSH
31704: LD_INT 1000
31706: PPUSH
31707: CALL_OW 234
31711: GO 31681
31713: POP
31714: POP
// until p > 20 ;
31715: LD_VAR 0 3
31719: PUSH
31720: LD_INT 20
31722: GREATER
31723: IFFALSE 31650
// end ;
31725: PPOPN 3
31727: END
// every 0 0$1 trigger StreamModeActive and sTime do
31728: LD_EXP 51
31732: PUSH
31733: LD_EXP 102
31737: AND
31738: IFFALSE 31773
31740: GO 31742
31742: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31743: LD_INT 28
31745: PPUSH
31746: LD_OWVAR 2
31750: PPUSH
31751: LD_INT 2
31753: PPUSH
31754: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31758: LD_INT 30
31760: PPUSH
31761: LD_OWVAR 2
31765: PPUSH
31766: LD_INT 2
31768: PPUSH
31769: CALL_OW 322
// end ;
31773: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31774: LD_EXP 51
31778: PUSH
31779: LD_EXP 103
31783: AND
31784: IFFALSE 31905
31786: GO 31788
31788: DISABLE
31789: LD_INT 0
31791: PPUSH
31792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31793: LD_ADDR_VAR 0 2
31797: PUSH
31798: LD_INT 22
31800: PUSH
31801: LD_OWVAR 2
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 21
31812: PUSH
31813: LD_INT 1
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 3
31822: PUSH
31823: LD_INT 23
31825: PUSH
31826: LD_INT 0
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: LIST
31841: PPUSH
31842: CALL_OW 69
31846: ST_TO_ADDR
// if not tmp then
31847: LD_VAR 0 2
31851: NOT
31852: IFFALSE 31856
// exit ;
31854: GO 31905
// for i in tmp do
31856: LD_ADDR_VAR 0 1
31860: PUSH
31861: LD_VAR 0 2
31865: PUSH
31866: FOR_IN
31867: IFFALSE 31903
// begin if Crawls ( i ) then
31869: LD_VAR 0 1
31873: PPUSH
31874: CALL_OW 318
31878: IFFALSE 31889
// ComWalk ( i ) ;
31880: LD_VAR 0 1
31884: PPUSH
31885: CALL_OW 138
// SetClass ( i , 2 ) ;
31889: LD_VAR 0 1
31893: PPUSH
31894: LD_INT 2
31896: PPUSH
31897: CALL_OW 336
// end ;
31901: GO 31866
31903: POP
31904: POP
// end ;
31905: PPOPN 2
31907: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31908: LD_EXP 51
31912: PUSH
31913: LD_EXP 104
31917: AND
31918: IFFALSE 32206
31920: GO 31922
31922: DISABLE
31923: LD_INT 0
31925: PPUSH
31926: PPUSH
31927: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31928: LD_OWVAR 2
31932: PPUSH
31933: LD_INT 9
31935: PPUSH
31936: LD_INT 1
31938: PPUSH
31939: LD_INT 1
31941: PPUSH
31942: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31946: LD_INT 9
31948: PPUSH
31949: LD_OWVAR 2
31953: PPUSH
31954: CALL_OW 343
// uc_side := 9 ;
31958: LD_ADDR_OWVAR 20
31962: PUSH
31963: LD_INT 9
31965: ST_TO_ADDR
// uc_nation := 2 ;
31966: LD_ADDR_OWVAR 21
31970: PUSH
31971: LD_INT 2
31973: ST_TO_ADDR
// hc_name := Dark Warrior ;
31974: LD_ADDR_OWVAR 26
31978: PUSH
31979: LD_STRING Dark Warrior
31981: ST_TO_ADDR
// hc_gallery :=  ;
31982: LD_ADDR_OWVAR 33
31986: PUSH
31987: LD_STRING 
31989: ST_TO_ADDR
// hc_noskilllimit := true ;
31990: LD_ADDR_OWVAR 76
31994: PUSH
31995: LD_INT 1
31997: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31998: LD_ADDR_OWVAR 31
32002: PUSH
32003: LD_INT 30
32005: PUSH
32006: LD_INT 30
32008: PUSH
32009: LD_INT 30
32011: PUSH
32012: LD_INT 30
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: ST_TO_ADDR
// un := CreateHuman ;
32021: LD_ADDR_VAR 0 3
32025: PUSH
32026: CALL_OW 44
32030: ST_TO_ADDR
// hc_noskilllimit := false ;
32031: LD_ADDR_OWVAR 76
32035: PUSH
32036: LD_INT 0
32038: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32039: LD_VAR 0 3
32043: PPUSH
32044: LD_INT 1
32046: PPUSH
32047: CALL_OW 51
// ToLua ( playRanger() ) ;
32051: LD_STRING playRanger()
32053: PPUSH
32054: CALL_OW 559
// p := 0 ;
32058: LD_ADDR_VAR 0 2
32062: PUSH
32063: LD_INT 0
32065: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32066: LD_INT 35
32068: PPUSH
32069: CALL_OW 67
// p := p + 1 ;
32073: LD_ADDR_VAR 0 2
32077: PUSH
32078: LD_VAR 0 2
32082: PUSH
32083: LD_INT 1
32085: PLUS
32086: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32087: LD_VAR 0 3
32091: PPUSH
32092: CALL_OW 256
32096: PUSH
32097: LD_INT 1000
32099: LESS
32100: IFFALSE 32114
// SetLives ( un , 1000 ) ;
32102: LD_VAR 0 3
32106: PPUSH
32107: LD_INT 1000
32109: PPUSH
32110: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32114: LD_VAR 0 3
32118: PPUSH
32119: LD_INT 81
32121: PUSH
32122: LD_OWVAR 2
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 91
32133: PUSH
32134: LD_VAR 0 3
32138: PUSH
32139: LD_INT 30
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: LIST
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PPUSH
32151: CALL_OW 69
32155: PPUSH
32156: LD_VAR 0 3
32160: PPUSH
32161: CALL_OW 74
32165: PPUSH
32166: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32170: LD_VAR 0 2
32174: PUSH
32175: LD_INT 80
32177: GREATER
32178: PUSH
32179: LD_VAR 0 3
32183: PPUSH
32184: CALL_OW 301
32188: OR
32189: IFFALSE 32066
// if un then
32191: LD_VAR 0 3
32195: IFFALSE 32206
// RemoveUnit ( un ) ;
32197: LD_VAR 0 3
32201: PPUSH
32202: CALL_OW 64
// end ;
32206: PPOPN 3
32208: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32209: LD_EXP 105
32213: IFFALSE 32329
32215: GO 32217
32217: DISABLE
32218: LD_INT 0
32220: PPUSH
32221: PPUSH
32222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32223: LD_ADDR_VAR 0 2
32227: PUSH
32228: LD_INT 81
32230: PUSH
32231: LD_OWVAR 2
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 21
32242: PUSH
32243: LD_INT 1
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PPUSH
32254: CALL_OW 69
32258: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32259: LD_STRING playComputer()
32261: PPUSH
32262: CALL_OW 559
// if not tmp then
32266: LD_VAR 0 2
32270: NOT
32271: IFFALSE 32275
// exit ;
32273: GO 32329
// for i in tmp do
32275: LD_ADDR_VAR 0 1
32279: PUSH
32280: LD_VAR 0 2
32284: PUSH
32285: FOR_IN
32286: IFFALSE 32327
// for j := 1 to 4 do
32288: LD_ADDR_VAR 0 3
32292: PUSH
32293: DOUBLE
32294: LD_INT 1
32296: DEC
32297: ST_TO_ADDR
32298: LD_INT 4
32300: PUSH
32301: FOR_TO
32302: IFFALSE 32323
// SetSkill ( i , j , 10 ) ;
32304: LD_VAR 0 1
32308: PPUSH
32309: LD_VAR 0 3
32313: PPUSH
32314: LD_INT 10
32316: PPUSH
32317: CALL_OW 237
32321: GO 32301
32323: POP
32324: POP
32325: GO 32285
32327: POP
32328: POP
// end ;
32329: PPOPN 3
32331: END
// every 0 0$1 trigger s30 do var i , tmp ;
32332: LD_EXP 106
32336: IFFALSE 32405
32338: GO 32340
32340: DISABLE
32341: LD_INT 0
32343: PPUSH
32344: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32345: LD_ADDR_VAR 0 2
32349: PUSH
32350: LD_INT 22
32352: PUSH
32353: LD_OWVAR 2
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PPUSH
32362: CALL_OW 69
32366: ST_TO_ADDR
// if not tmp then
32367: LD_VAR 0 2
32371: NOT
32372: IFFALSE 32376
// exit ;
32374: GO 32405
// for i in tmp do
32376: LD_ADDR_VAR 0 1
32380: PUSH
32381: LD_VAR 0 2
32385: PUSH
32386: FOR_IN
32387: IFFALSE 32403
// SetLives ( i , 300 ) ;
32389: LD_VAR 0 1
32393: PPUSH
32394: LD_INT 300
32396: PPUSH
32397: CALL_OW 234
32401: GO 32386
32403: POP
32404: POP
// end ;
32405: PPOPN 2
32407: END
// every 0 0$1 trigger s60 do var i , tmp ;
32408: LD_EXP 107
32412: IFFALSE 32481
32414: GO 32416
32416: DISABLE
32417: LD_INT 0
32419: PPUSH
32420: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32421: LD_ADDR_VAR 0 2
32425: PUSH
32426: LD_INT 22
32428: PUSH
32429: LD_OWVAR 2
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PPUSH
32438: CALL_OW 69
32442: ST_TO_ADDR
// if not tmp then
32443: LD_VAR 0 2
32447: NOT
32448: IFFALSE 32452
// exit ;
32450: GO 32481
// for i in tmp do
32452: LD_ADDR_VAR 0 1
32456: PUSH
32457: LD_VAR 0 2
32461: PUSH
32462: FOR_IN
32463: IFFALSE 32479
// SetLives ( i , 600 ) ;
32465: LD_VAR 0 1
32469: PPUSH
32470: LD_INT 600
32472: PPUSH
32473: CALL_OW 234
32477: GO 32462
32479: POP
32480: POP
// end ;
32481: PPOPN 2
32483: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32484: LD_INT 0
32486: PPUSH
// case cmd of 301 :
32487: LD_VAR 0 1
32491: PUSH
32492: LD_INT 301
32494: DOUBLE
32495: EQUAL
32496: IFTRUE 32500
32498: GO 32532
32500: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32501: LD_VAR 0 6
32505: PPUSH
32506: LD_VAR 0 7
32510: PPUSH
32511: LD_VAR 0 8
32515: PPUSH
32516: LD_VAR 0 4
32520: PPUSH
32521: LD_VAR 0 5
32525: PPUSH
32526: CALL 33741 0 5
32530: GO 32653
32532: LD_INT 302
32534: DOUBLE
32535: EQUAL
32536: IFTRUE 32540
32538: GO 32577
32540: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32541: LD_VAR 0 6
32545: PPUSH
32546: LD_VAR 0 7
32550: PPUSH
32551: LD_VAR 0 8
32555: PPUSH
32556: LD_VAR 0 9
32560: PPUSH
32561: LD_VAR 0 4
32565: PPUSH
32566: LD_VAR 0 5
32570: PPUSH
32571: CALL 33832 0 6
32575: GO 32653
32577: LD_INT 303
32579: DOUBLE
32580: EQUAL
32581: IFTRUE 32585
32583: GO 32622
32585: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32586: LD_VAR 0 6
32590: PPUSH
32591: LD_VAR 0 7
32595: PPUSH
32596: LD_VAR 0 8
32600: PPUSH
32601: LD_VAR 0 9
32605: PPUSH
32606: LD_VAR 0 4
32610: PPUSH
32611: LD_VAR 0 5
32615: PPUSH
32616: CALL 32658 0 6
32620: GO 32653
32622: LD_INT 304
32624: DOUBLE
32625: EQUAL
32626: IFTRUE 32630
32628: GO 32652
32630: POP
// hHackTeleport ( unit , x , y ) ; end ;
32631: LD_VAR 0 2
32635: PPUSH
32636: LD_VAR 0 4
32640: PPUSH
32641: LD_VAR 0 5
32645: PPUSH
32646: CALL 34425 0 3
32650: GO 32653
32652: POP
// end ;
32653: LD_VAR 0 12
32657: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32658: LD_INT 0
32660: PPUSH
32661: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32662: LD_VAR 0 1
32666: PUSH
32667: LD_INT 1
32669: LESS
32670: PUSH
32671: LD_VAR 0 1
32675: PUSH
32676: LD_INT 3
32678: GREATER
32679: OR
32680: PUSH
32681: LD_VAR 0 5
32685: PPUSH
32686: LD_VAR 0 6
32690: PPUSH
32691: CALL_OW 428
32695: OR
32696: IFFALSE 32700
// exit ;
32698: GO 33428
// uc_side := your_side ;
32700: LD_ADDR_OWVAR 20
32704: PUSH
32705: LD_OWVAR 2
32709: ST_TO_ADDR
// uc_nation := nation ;
32710: LD_ADDR_OWVAR 21
32714: PUSH
32715: LD_VAR 0 1
32719: ST_TO_ADDR
// bc_level = 1 ;
32720: LD_ADDR_OWVAR 43
32724: PUSH
32725: LD_INT 1
32727: ST_TO_ADDR
// case btype of 1 :
32728: LD_VAR 0 2
32732: PUSH
32733: LD_INT 1
32735: DOUBLE
32736: EQUAL
32737: IFTRUE 32741
32739: GO 32752
32741: POP
// bc_type := b_depot ; 2 :
32742: LD_ADDR_OWVAR 42
32746: PUSH
32747: LD_INT 0
32749: ST_TO_ADDR
32750: GO 33372
32752: LD_INT 2
32754: DOUBLE
32755: EQUAL
32756: IFTRUE 32760
32758: GO 32771
32760: POP
// bc_type := b_warehouse ; 3 :
32761: LD_ADDR_OWVAR 42
32765: PUSH
32766: LD_INT 1
32768: ST_TO_ADDR
32769: GO 33372
32771: LD_INT 3
32773: DOUBLE
32774: EQUAL
32775: IFTRUE 32779
32777: GO 32790
32779: POP
// bc_type := b_lab ; 4 .. 9 :
32780: LD_ADDR_OWVAR 42
32784: PUSH
32785: LD_INT 6
32787: ST_TO_ADDR
32788: GO 33372
32790: LD_INT 4
32792: DOUBLE
32793: GREATEREQUAL
32794: IFFALSE 32802
32796: LD_INT 9
32798: DOUBLE
32799: LESSEQUAL
32800: IFTRUE 32804
32802: GO 32864
32804: POP
// begin bc_type := b_lab_half ;
32805: LD_ADDR_OWVAR 42
32809: PUSH
32810: LD_INT 7
32812: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32813: LD_ADDR_OWVAR 44
32817: PUSH
32818: LD_INT 10
32820: PUSH
32821: LD_INT 11
32823: PUSH
32824: LD_INT 12
32826: PUSH
32827: LD_INT 15
32829: PUSH
32830: LD_INT 14
32832: PUSH
32833: LD_INT 13
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: PUSH
32844: LD_VAR 0 2
32848: PUSH
32849: LD_INT 3
32851: MINUS
32852: ARRAY
32853: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32854: LD_ADDR_OWVAR 45
32858: PUSH
32859: LD_INT 9
32861: ST_TO_ADDR
// end ; 10 .. 13 :
32862: GO 33372
32864: LD_INT 10
32866: DOUBLE
32867: GREATEREQUAL
32868: IFFALSE 32876
32870: LD_INT 13
32872: DOUBLE
32873: LESSEQUAL
32874: IFTRUE 32878
32876: GO 32955
32878: POP
// begin bc_type := b_lab_full ;
32879: LD_ADDR_OWVAR 42
32883: PUSH
32884: LD_INT 8
32886: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32887: LD_ADDR_OWVAR 44
32891: PUSH
32892: LD_INT 10
32894: PUSH
32895: LD_INT 12
32897: PUSH
32898: LD_INT 14
32900: PUSH
32901: LD_INT 13
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: PUSH
32910: LD_VAR 0 2
32914: PUSH
32915: LD_INT 9
32917: MINUS
32918: ARRAY
32919: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32920: LD_ADDR_OWVAR 45
32924: PUSH
32925: LD_INT 11
32927: PUSH
32928: LD_INT 15
32930: PUSH
32931: LD_INT 12
32933: PUSH
32934: LD_INT 15
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: PUSH
32943: LD_VAR 0 2
32947: PUSH
32948: LD_INT 9
32950: MINUS
32951: ARRAY
32952: ST_TO_ADDR
// end ; 14 :
32953: GO 33372
32955: LD_INT 14
32957: DOUBLE
32958: EQUAL
32959: IFTRUE 32963
32961: GO 32974
32963: POP
// bc_type := b_workshop ; 15 :
32964: LD_ADDR_OWVAR 42
32968: PUSH
32969: LD_INT 2
32971: ST_TO_ADDR
32972: GO 33372
32974: LD_INT 15
32976: DOUBLE
32977: EQUAL
32978: IFTRUE 32982
32980: GO 32993
32982: POP
// bc_type := b_factory ; 16 :
32983: LD_ADDR_OWVAR 42
32987: PUSH
32988: LD_INT 3
32990: ST_TO_ADDR
32991: GO 33372
32993: LD_INT 16
32995: DOUBLE
32996: EQUAL
32997: IFTRUE 33001
32999: GO 33012
33001: POP
// bc_type := b_ext_gun ; 17 :
33002: LD_ADDR_OWVAR 42
33006: PUSH
33007: LD_INT 17
33009: ST_TO_ADDR
33010: GO 33372
33012: LD_INT 17
33014: DOUBLE
33015: EQUAL
33016: IFTRUE 33020
33018: GO 33048
33020: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33021: LD_ADDR_OWVAR 42
33025: PUSH
33026: LD_INT 19
33028: PUSH
33029: LD_INT 23
33031: PUSH
33032: LD_INT 19
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: LIST
33039: PUSH
33040: LD_VAR 0 1
33044: ARRAY
33045: ST_TO_ADDR
33046: GO 33372
33048: LD_INT 18
33050: DOUBLE
33051: EQUAL
33052: IFTRUE 33056
33054: GO 33067
33056: POP
// bc_type := b_ext_radar ; 19 :
33057: LD_ADDR_OWVAR 42
33061: PUSH
33062: LD_INT 20
33064: ST_TO_ADDR
33065: GO 33372
33067: LD_INT 19
33069: DOUBLE
33070: EQUAL
33071: IFTRUE 33075
33073: GO 33086
33075: POP
// bc_type := b_ext_radio ; 20 :
33076: LD_ADDR_OWVAR 42
33080: PUSH
33081: LD_INT 22
33083: ST_TO_ADDR
33084: GO 33372
33086: LD_INT 20
33088: DOUBLE
33089: EQUAL
33090: IFTRUE 33094
33092: GO 33105
33094: POP
// bc_type := b_ext_siberium ; 21 :
33095: LD_ADDR_OWVAR 42
33099: PUSH
33100: LD_INT 21
33102: ST_TO_ADDR
33103: GO 33372
33105: LD_INT 21
33107: DOUBLE
33108: EQUAL
33109: IFTRUE 33113
33111: GO 33124
33113: POP
// bc_type := b_ext_computer ; 22 :
33114: LD_ADDR_OWVAR 42
33118: PUSH
33119: LD_INT 24
33121: ST_TO_ADDR
33122: GO 33372
33124: LD_INT 22
33126: DOUBLE
33127: EQUAL
33128: IFTRUE 33132
33130: GO 33143
33132: POP
// bc_type := b_ext_track ; 23 :
33133: LD_ADDR_OWVAR 42
33137: PUSH
33138: LD_INT 16
33140: ST_TO_ADDR
33141: GO 33372
33143: LD_INT 23
33145: DOUBLE
33146: EQUAL
33147: IFTRUE 33151
33149: GO 33162
33151: POP
// bc_type := b_ext_laser ; 24 :
33152: LD_ADDR_OWVAR 42
33156: PUSH
33157: LD_INT 25
33159: ST_TO_ADDR
33160: GO 33372
33162: LD_INT 24
33164: DOUBLE
33165: EQUAL
33166: IFTRUE 33170
33168: GO 33181
33170: POP
// bc_type := b_control_tower ; 25 :
33171: LD_ADDR_OWVAR 42
33175: PUSH
33176: LD_INT 36
33178: ST_TO_ADDR
33179: GO 33372
33181: LD_INT 25
33183: DOUBLE
33184: EQUAL
33185: IFTRUE 33189
33187: GO 33200
33189: POP
// bc_type := b_breastwork ; 26 :
33190: LD_ADDR_OWVAR 42
33194: PUSH
33195: LD_INT 31
33197: ST_TO_ADDR
33198: GO 33372
33200: LD_INT 26
33202: DOUBLE
33203: EQUAL
33204: IFTRUE 33208
33206: GO 33219
33208: POP
// bc_type := b_bunker ; 27 :
33209: LD_ADDR_OWVAR 42
33213: PUSH
33214: LD_INT 32
33216: ST_TO_ADDR
33217: GO 33372
33219: LD_INT 27
33221: DOUBLE
33222: EQUAL
33223: IFTRUE 33227
33225: GO 33238
33227: POP
// bc_type := b_turret ; 28 :
33228: LD_ADDR_OWVAR 42
33232: PUSH
33233: LD_INT 33
33235: ST_TO_ADDR
33236: GO 33372
33238: LD_INT 28
33240: DOUBLE
33241: EQUAL
33242: IFTRUE 33246
33244: GO 33257
33246: POP
// bc_type := b_armoury ; 29 :
33247: LD_ADDR_OWVAR 42
33251: PUSH
33252: LD_INT 4
33254: ST_TO_ADDR
33255: GO 33372
33257: LD_INT 29
33259: DOUBLE
33260: EQUAL
33261: IFTRUE 33265
33263: GO 33276
33265: POP
// bc_type := b_barracks ; 30 :
33266: LD_ADDR_OWVAR 42
33270: PUSH
33271: LD_INT 5
33273: ST_TO_ADDR
33274: GO 33372
33276: LD_INT 30
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33284
33282: GO 33295
33284: POP
// bc_type := b_solar_power ; 31 :
33285: LD_ADDR_OWVAR 42
33289: PUSH
33290: LD_INT 27
33292: ST_TO_ADDR
33293: GO 33372
33295: LD_INT 31
33297: DOUBLE
33298: EQUAL
33299: IFTRUE 33303
33301: GO 33314
33303: POP
// bc_type := b_oil_power ; 32 :
33304: LD_ADDR_OWVAR 42
33308: PUSH
33309: LD_INT 26
33311: ST_TO_ADDR
33312: GO 33372
33314: LD_INT 32
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33322
33320: GO 33333
33322: POP
// bc_type := b_siberite_power ; 33 :
33323: LD_ADDR_OWVAR 42
33327: PUSH
33328: LD_INT 28
33330: ST_TO_ADDR
33331: GO 33372
33333: LD_INT 33
33335: DOUBLE
33336: EQUAL
33337: IFTRUE 33341
33339: GO 33352
33341: POP
// bc_type := b_oil_mine ; 34 :
33342: LD_ADDR_OWVAR 42
33346: PUSH
33347: LD_INT 29
33349: ST_TO_ADDR
33350: GO 33372
33352: LD_INT 34
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33371
33360: POP
// bc_type := b_siberite_mine ; end ;
33361: LD_ADDR_OWVAR 42
33365: PUSH
33366: LD_INT 30
33368: ST_TO_ADDR
33369: GO 33372
33371: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33372: LD_ADDR_VAR 0 8
33376: PUSH
33377: LD_VAR 0 5
33381: PPUSH
33382: LD_VAR 0 6
33386: PPUSH
33387: LD_VAR 0 3
33391: PPUSH
33392: CALL_OW 47
33396: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33397: LD_OWVAR 42
33401: PUSH
33402: LD_INT 32
33404: PUSH
33405: LD_INT 33
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: IN
33412: IFFALSE 33428
// PlaceWeaponTurret ( b , weapon ) ;
33414: LD_VAR 0 8
33418: PPUSH
33419: LD_VAR 0 4
33423: PPUSH
33424: CALL_OW 431
// end ;
33428: LD_VAR 0 7
33432: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33433: LD_INT 0
33435: PPUSH
33436: PPUSH
33437: PPUSH
33438: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33439: LD_ADDR_VAR 0 4
33443: PUSH
33444: LD_INT 22
33446: PUSH
33447: LD_OWVAR 2
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 2
33458: PUSH
33459: LD_INT 30
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 30
33471: PUSH
33472: LD_INT 1
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: LIST
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PPUSH
33488: CALL_OW 69
33492: ST_TO_ADDR
// if not tmp then
33493: LD_VAR 0 4
33497: NOT
33498: IFFALSE 33502
// exit ;
33500: GO 33561
// for i in tmp do
33502: LD_ADDR_VAR 0 2
33506: PUSH
33507: LD_VAR 0 4
33511: PUSH
33512: FOR_IN
33513: IFFALSE 33559
// for j = 1 to 3 do
33515: LD_ADDR_VAR 0 3
33519: PUSH
33520: DOUBLE
33521: LD_INT 1
33523: DEC
33524: ST_TO_ADDR
33525: LD_INT 3
33527: PUSH
33528: FOR_TO
33529: IFFALSE 33555
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33531: LD_VAR 0 2
33535: PPUSH
33536: CALL_OW 274
33540: PPUSH
33541: LD_VAR 0 3
33545: PPUSH
33546: LD_INT 99999
33548: PPUSH
33549: CALL_OW 277
33553: GO 33528
33555: POP
33556: POP
33557: GO 33512
33559: POP
33560: POP
// end ;
33561: LD_VAR 0 1
33565: RET
// export function hHackSetLevel10 ; var i , j ; begin
33566: LD_INT 0
33568: PPUSH
33569: PPUSH
33570: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33571: LD_ADDR_VAR 0 2
33575: PUSH
33576: LD_INT 21
33578: PUSH
33579: LD_INT 1
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PPUSH
33586: CALL_OW 69
33590: PUSH
33591: FOR_IN
33592: IFFALSE 33644
// if IsSelected ( i ) then
33594: LD_VAR 0 2
33598: PPUSH
33599: CALL_OW 306
33603: IFFALSE 33642
// begin for j := 1 to 4 do
33605: LD_ADDR_VAR 0 3
33609: PUSH
33610: DOUBLE
33611: LD_INT 1
33613: DEC
33614: ST_TO_ADDR
33615: LD_INT 4
33617: PUSH
33618: FOR_TO
33619: IFFALSE 33640
// SetSkill ( i , j , 10 ) ;
33621: LD_VAR 0 2
33625: PPUSH
33626: LD_VAR 0 3
33630: PPUSH
33631: LD_INT 10
33633: PPUSH
33634: CALL_OW 237
33638: GO 33618
33640: POP
33641: POP
// end ;
33642: GO 33591
33644: POP
33645: POP
// end ;
33646: LD_VAR 0 1
33650: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33651: LD_INT 0
33653: PPUSH
33654: PPUSH
33655: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33656: LD_ADDR_VAR 0 2
33660: PUSH
33661: LD_INT 22
33663: PUSH
33664: LD_OWVAR 2
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 21
33675: PUSH
33676: LD_INT 1
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PPUSH
33687: CALL_OW 69
33691: PUSH
33692: FOR_IN
33693: IFFALSE 33734
// begin for j := 1 to 4 do
33695: LD_ADDR_VAR 0 3
33699: PUSH
33700: DOUBLE
33701: LD_INT 1
33703: DEC
33704: ST_TO_ADDR
33705: LD_INT 4
33707: PUSH
33708: FOR_TO
33709: IFFALSE 33730
// SetSkill ( i , j , 10 ) ;
33711: LD_VAR 0 2
33715: PPUSH
33716: LD_VAR 0 3
33720: PPUSH
33721: LD_INT 10
33723: PPUSH
33724: CALL_OW 237
33728: GO 33708
33730: POP
33731: POP
// end ;
33732: GO 33692
33734: POP
33735: POP
// end ;
33736: LD_VAR 0 1
33740: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33741: LD_INT 0
33743: PPUSH
// uc_side := your_side ;
33744: LD_ADDR_OWVAR 20
33748: PUSH
33749: LD_OWVAR 2
33753: ST_TO_ADDR
// uc_nation := nation ;
33754: LD_ADDR_OWVAR 21
33758: PUSH
33759: LD_VAR 0 1
33763: ST_TO_ADDR
// InitHc ;
33764: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33768: LD_INT 0
33770: PPUSH
33771: LD_VAR 0 2
33775: PPUSH
33776: LD_VAR 0 3
33780: PPUSH
33781: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33785: LD_VAR 0 4
33789: PPUSH
33790: LD_VAR 0 5
33794: PPUSH
33795: CALL_OW 428
33799: PUSH
33800: LD_INT 0
33802: EQUAL
33803: IFFALSE 33827
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33805: CALL_OW 44
33809: PPUSH
33810: LD_VAR 0 4
33814: PPUSH
33815: LD_VAR 0 5
33819: PPUSH
33820: LD_INT 1
33822: PPUSH
33823: CALL_OW 48
// end ;
33827: LD_VAR 0 6
33831: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33832: LD_INT 0
33834: PPUSH
33835: PPUSH
// uc_side := your_side ;
33836: LD_ADDR_OWVAR 20
33840: PUSH
33841: LD_OWVAR 2
33845: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33846: LD_VAR 0 1
33850: PUSH
33851: LD_INT 1
33853: PUSH
33854: LD_INT 2
33856: PUSH
33857: LD_INT 3
33859: PUSH
33860: LD_INT 4
33862: PUSH
33863: LD_INT 5
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: IN
33873: IFFALSE 33885
// uc_nation := nation_american else
33875: LD_ADDR_OWVAR 21
33879: PUSH
33880: LD_INT 1
33882: ST_TO_ADDR
33883: GO 33928
// if chassis in [ 11 , 12 , 13 , 14 ] then
33885: LD_VAR 0 1
33889: PUSH
33890: LD_INT 11
33892: PUSH
33893: LD_INT 12
33895: PUSH
33896: LD_INT 13
33898: PUSH
33899: LD_INT 14
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: IN
33908: IFFALSE 33920
// uc_nation := nation_arabian else
33910: LD_ADDR_OWVAR 21
33914: PUSH
33915: LD_INT 2
33917: ST_TO_ADDR
33918: GO 33928
// uc_nation := nation_russian ;
33920: LD_ADDR_OWVAR 21
33924: PUSH
33925: LD_INT 3
33927: ST_TO_ADDR
// vc_chassis := chassis ;
33928: LD_ADDR_OWVAR 37
33932: PUSH
33933: LD_VAR 0 1
33937: ST_TO_ADDR
// vc_engine := engine ;
33938: LD_ADDR_OWVAR 39
33942: PUSH
33943: LD_VAR 0 2
33947: ST_TO_ADDR
// vc_control := control ;
33948: LD_ADDR_OWVAR 38
33952: PUSH
33953: LD_VAR 0 3
33957: ST_TO_ADDR
// vc_weapon := weapon ;
33958: LD_ADDR_OWVAR 40
33962: PUSH
33963: LD_VAR 0 4
33967: ST_TO_ADDR
// un := CreateVehicle ;
33968: LD_ADDR_VAR 0 8
33972: PUSH
33973: CALL_OW 45
33977: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33978: LD_VAR 0 8
33982: PPUSH
33983: LD_INT 0
33985: PPUSH
33986: LD_INT 5
33988: PPUSH
33989: CALL_OW 12
33993: PPUSH
33994: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33998: LD_VAR 0 8
34002: PPUSH
34003: LD_VAR 0 5
34007: PPUSH
34008: LD_VAR 0 6
34012: PPUSH
34013: LD_INT 1
34015: PPUSH
34016: CALL_OW 48
// end ;
34020: LD_VAR 0 7
34024: RET
// export hInvincible ; every 1 do
34025: GO 34027
34027: DISABLE
// hInvincible := [ ] ;
34028: LD_ADDR_EXP 108
34032: PUSH
34033: EMPTY
34034: ST_TO_ADDR
34035: END
// every 10 do var i ;
34036: GO 34038
34038: DISABLE
34039: LD_INT 0
34041: PPUSH
// begin enable ;
34042: ENABLE
// if not hInvincible then
34043: LD_EXP 108
34047: NOT
34048: IFFALSE 34052
// exit ;
34050: GO 34096
// for i in hInvincible do
34052: LD_ADDR_VAR 0 1
34056: PUSH
34057: LD_EXP 108
34061: PUSH
34062: FOR_IN
34063: IFFALSE 34094
// if GetLives ( i ) < 1000 then
34065: LD_VAR 0 1
34069: PPUSH
34070: CALL_OW 256
34074: PUSH
34075: LD_INT 1000
34077: LESS
34078: IFFALSE 34092
// SetLives ( i , 1000 ) ;
34080: LD_VAR 0 1
34084: PPUSH
34085: LD_INT 1000
34087: PPUSH
34088: CALL_OW 234
34092: GO 34062
34094: POP
34095: POP
// end ;
34096: PPOPN 1
34098: END
// export function hHackInvincible ; var i ; begin
34099: LD_INT 0
34101: PPUSH
34102: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34103: LD_ADDR_VAR 0 2
34107: PUSH
34108: LD_INT 2
34110: PUSH
34111: LD_INT 21
34113: PUSH
34114: LD_INT 1
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 21
34123: PUSH
34124: LD_INT 2
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: LIST
34135: PPUSH
34136: CALL_OW 69
34140: PUSH
34141: FOR_IN
34142: IFFALSE 34203
// if IsSelected ( i ) then
34144: LD_VAR 0 2
34148: PPUSH
34149: CALL_OW 306
34153: IFFALSE 34201
// begin if i in hInvincible then
34155: LD_VAR 0 2
34159: PUSH
34160: LD_EXP 108
34164: IN
34165: IFFALSE 34185
// hInvincible := hInvincible diff i else
34167: LD_ADDR_EXP 108
34171: PUSH
34172: LD_EXP 108
34176: PUSH
34177: LD_VAR 0 2
34181: DIFF
34182: ST_TO_ADDR
34183: GO 34201
// hInvincible := hInvincible union i ;
34185: LD_ADDR_EXP 108
34189: PUSH
34190: LD_EXP 108
34194: PUSH
34195: LD_VAR 0 2
34199: UNION
34200: ST_TO_ADDR
// end ;
34201: GO 34141
34203: POP
34204: POP
// end ;
34205: LD_VAR 0 1
34209: RET
// export function hHackInvisible ; var i , j ; begin
34210: LD_INT 0
34212: PPUSH
34213: PPUSH
34214: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34215: LD_ADDR_VAR 0 2
34219: PUSH
34220: LD_INT 21
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PPUSH
34230: CALL_OW 69
34234: PUSH
34235: FOR_IN
34236: IFFALSE 34260
// if IsSelected ( i ) then
34238: LD_VAR 0 2
34242: PPUSH
34243: CALL_OW 306
34247: IFFALSE 34258
// ComForceInvisible ( i ) ;
34249: LD_VAR 0 2
34253: PPUSH
34254: CALL_OW 496
34258: GO 34235
34260: POP
34261: POP
// end ;
34262: LD_VAR 0 1
34266: RET
// export function hHackChangeYourSide ; begin
34267: LD_INT 0
34269: PPUSH
// if your_side = 8 then
34270: LD_OWVAR 2
34274: PUSH
34275: LD_INT 8
34277: EQUAL
34278: IFFALSE 34290
// your_side := 0 else
34280: LD_ADDR_OWVAR 2
34284: PUSH
34285: LD_INT 0
34287: ST_TO_ADDR
34288: GO 34304
// your_side := your_side + 1 ;
34290: LD_ADDR_OWVAR 2
34294: PUSH
34295: LD_OWVAR 2
34299: PUSH
34300: LD_INT 1
34302: PLUS
34303: ST_TO_ADDR
// end ;
34304: LD_VAR 0 1
34308: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34309: LD_INT 0
34311: PPUSH
34312: PPUSH
34313: PPUSH
// for i in all_units do
34314: LD_ADDR_VAR 0 2
34318: PUSH
34319: LD_OWVAR 3
34323: PUSH
34324: FOR_IN
34325: IFFALSE 34403
// if IsSelected ( i ) then
34327: LD_VAR 0 2
34331: PPUSH
34332: CALL_OW 306
34336: IFFALSE 34401
// begin j := GetSide ( i ) ;
34338: LD_ADDR_VAR 0 3
34342: PUSH
34343: LD_VAR 0 2
34347: PPUSH
34348: CALL_OW 255
34352: ST_TO_ADDR
// if j = 8 then
34353: LD_VAR 0 3
34357: PUSH
34358: LD_INT 8
34360: EQUAL
34361: IFFALSE 34373
// j := 0 else
34363: LD_ADDR_VAR 0 3
34367: PUSH
34368: LD_INT 0
34370: ST_TO_ADDR
34371: GO 34387
// j := j + 1 ;
34373: LD_ADDR_VAR 0 3
34377: PUSH
34378: LD_VAR 0 3
34382: PUSH
34383: LD_INT 1
34385: PLUS
34386: ST_TO_ADDR
// SetSide ( i , j ) ;
34387: LD_VAR 0 2
34391: PPUSH
34392: LD_VAR 0 3
34396: PPUSH
34397: CALL_OW 235
// end ;
34401: GO 34324
34403: POP
34404: POP
// end ;
34405: LD_VAR 0 1
34409: RET
// export function hHackFog ; begin
34410: LD_INT 0
34412: PPUSH
// FogOff ( true ) ;
34413: LD_INT 1
34415: PPUSH
34416: CALL_OW 344
// end ;
34420: LD_VAR 0 1
34424: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34425: LD_INT 0
34427: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34428: LD_VAR 0 1
34432: PPUSH
34433: LD_VAR 0 2
34437: PPUSH
34438: LD_VAR 0 3
34442: PPUSH
34443: LD_INT 1
34445: PPUSH
34446: LD_INT 1
34448: PPUSH
34449: CALL_OW 483
// CenterOnXY ( x , y ) ;
34453: LD_VAR 0 2
34457: PPUSH
34458: LD_VAR 0 3
34462: PPUSH
34463: CALL_OW 84
// end ;
34467: LD_VAR 0 4
34471: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34472: LD_INT 0
34474: PPUSH
34475: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34476: LD_VAR 0 1
34480: NOT
34481: PUSH
34482: LD_VAR 0 2
34486: PPUSH
34487: LD_VAR 0 3
34491: PPUSH
34492: CALL_OW 488
34496: NOT
34497: OR
34498: PUSH
34499: LD_VAR 0 1
34503: PPUSH
34504: CALL_OW 266
34508: PUSH
34509: LD_INT 3
34511: NONEQUAL
34512: PUSH
34513: LD_VAR 0 1
34517: PPUSH
34518: CALL_OW 247
34522: PUSH
34523: LD_INT 1
34525: EQUAL
34526: NOT
34527: AND
34528: OR
34529: IFFALSE 34533
// exit ;
34531: GO 34682
// if GetType ( factory ) = unit_human then
34533: LD_VAR 0 1
34537: PPUSH
34538: CALL_OW 247
34542: PUSH
34543: LD_INT 1
34545: EQUAL
34546: IFFALSE 34563
// factory := IsInUnit ( factory ) ;
34548: LD_ADDR_VAR 0 1
34552: PUSH
34553: LD_VAR 0 1
34557: PPUSH
34558: CALL_OW 310
34562: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34563: LD_VAR 0 1
34567: PPUSH
34568: CALL_OW 266
34572: PUSH
34573: LD_INT 3
34575: NONEQUAL
34576: IFFALSE 34580
// exit ;
34578: GO 34682
// if HexInfo ( x , y ) = factory then
34580: LD_VAR 0 2
34584: PPUSH
34585: LD_VAR 0 3
34589: PPUSH
34590: CALL_OW 428
34594: PUSH
34595: LD_VAR 0 1
34599: EQUAL
34600: IFFALSE 34627
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34602: LD_ADDR_EXP 109
34606: PUSH
34607: LD_EXP 109
34611: PPUSH
34612: LD_VAR 0 1
34616: PPUSH
34617: LD_INT 0
34619: PPUSH
34620: CALL_OW 1
34624: ST_TO_ADDR
34625: GO 34678
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34627: LD_ADDR_EXP 109
34631: PUSH
34632: LD_EXP 109
34636: PPUSH
34637: LD_VAR 0 1
34641: PPUSH
34642: LD_VAR 0 1
34646: PPUSH
34647: CALL_OW 255
34651: PUSH
34652: LD_VAR 0 1
34656: PUSH
34657: LD_VAR 0 2
34661: PUSH
34662: LD_VAR 0 3
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: PPUSH
34673: CALL_OW 1
34677: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34678: CALL 34687 0 0
// end ;
34682: LD_VAR 0 4
34686: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34687: LD_INT 0
34689: PPUSH
34690: PPUSH
34691: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34692: LD_STRING resetFactoryWaypoint();
34694: PPUSH
34695: CALL_OW 559
// if factoryWaypoints then
34699: LD_EXP 109
34703: IFFALSE 34829
// begin list := PrepareArray ( factoryWaypoints ) ;
34705: LD_ADDR_VAR 0 3
34709: PUSH
34710: LD_EXP 109
34714: PPUSH
34715: CALL 82137 0 1
34719: ST_TO_ADDR
// for i := 1 to list do
34720: LD_ADDR_VAR 0 2
34724: PUSH
34725: DOUBLE
34726: LD_INT 1
34728: DEC
34729: ST_TO_ADDR
34730: LD_VAR 0 3
34734: PUSH
34735: FOR_TO
34736: IFFALSE 34827
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34738: LD_STRING setFactoryWaypointXY(
34740: PUSH
34741: LD_VAR 0 3
34745: PUSH
34746: LD_VAR 0 2
34750: ARRAY
34751: PUSH
34752: LD_INT 1
34754: ARRAY
34755: STR
34756: PUSH
34757: LD_STRING ,
34759: STR
34760: PUSH
34761: LD_VAR 0 3
34765: PUSH
34766: LD_VAR 0 2
34770: ARRAY
34771: PUSH
34772: LD_INT 2
34774: ARRAY
34775: STR
34776: PUSH
34777: LD_STRING ,
34779: STR
34780: PUSH
34781: LD_VAR 0 3
34785: PUSH
34786: LD_VAR 0 2
34790: ARRAY
34791: PUSH
34792: LD_INT 3
34794: ARRAY
34795: STR
34796: PUSH
34797: LD_STRING ,
34799: STR
34800: PUSH
34801: LD_VAR 0 3
34805: PUSH
34806: LD_VAR 0 2
34810: ARRAY
34811: PUSH
34812: LD_INT 4
34814: ARRAY
34815: STR
34816: PUSH
34817: LD_STRING )
34819: STR
34820: PPUSH
34821: CALL_OW 559
34825: GO 34735
34827: POP
34828: POP
// end ; end ;
34829: LD_VAR 0 1
34833: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34834: LD_INT 0
34836: PPUSH
// if HexInfo ( x , y ) = warehouse then
34837: LD_VAR 0 2
34841: PPUSH
34842: LD_VAR 0 3
34846: PPUSH
34847: CALL_OW 428
34851: PUSH
34852: LD_VAR 0 1
34856: EQUAL
34857: IFFALSE 34884
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34859: LD_ADDR_EXP 110
34863: PUSH
34864: LD_EXP 110
34868: PPUSH
34869: LD_VAR 0 1
34873: PPUSH
34874: LD_INT 0
34876: PPUSH
34877: CALL_OW 1
34881: ST_TO_ADDR
34882: GO 34935
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34884: LD_ADDR_EXP 110
34888: PUSH
34889: LD_EXP 110
34893: PPUSH
34894: LD_VAR 0 1
34898: PPUSH
34899: LD_VAR 0 1
34903: PPUSH
34904: CALL_OW 255
34908: PUSH
34909: LD_VAR 0 1
34913: PUSH
34914: LD_VAR 0 2
34918: PUSH
34919: LD_VAR 0 3
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: PPUSH
34930: CALL_OW 1
34934: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34935: CALL 34944 0 0
// end ;
34939: LD_VAR 0 4
34943: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34944: LD_INT 0
34946: PPUSH
34947: PPUSH
34948: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34949: LD_STRING resetWarehouseGatheringPoints();
34951: PPUSH
34952: CALL_OW 559
// if warehouseGatheringPoints then
34956: LD_EXP 110
34960: IFFALSE 35086
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34962: LD_ADDR_VAR 0 3
34966: PUSH
34967: LD_EXP 110
34971: PPUSH
34972: CALL 82137 0 1
34976: ST_TO_ADDR
// for i := 1 to list do
34977: LD_ADDR_VAR 0 2
34981: PUSH
34982: DOUBLE
34983: LD_INT 1
34985: DEC
34986: ST_TO_ADDR
34987: LD_VAR 0 3
34991: PUSH
34992: FOR_TO
34993: IFFALSE 35084
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34995: LD_STRING setWarehouseGatheringPointXY(
34997: PUSH
34998: LD_VAR 0 3
35002: PUSH
35003: LD_VAR 0 2
35007: ARRAY
35008: PUSH
35009: LD_INT 1
35011: ARRAY
35012: STR
35013: PUSH
35014: LD_STRING ,
35016: STR
35017: PUSH
35018: LD_VAR 0 3
35022: PUSH
35023: LD_VAR 0 2
35027: ARRAY
35028: PUSH
35029: LD_INT 2
35031: ARRAY
35032: STR
35033: PUSH
35034: LD_STRING ,
35036: STR
35037: PUSH
35038: LD_VAR 0 3
35042: PUSH
35043: LD_VAR 0 2
35047: ARRAY
35048: PUSH
35049: LD_INT 3
35051: ARRAY
35052: STR
35053: PUSH
35054: LD_STRING ,
35056: STR
35057: PUSH
35058: LD_VAR 0 3
35062: PUSH
35063: LD_VAR 0 2
35067: ARRAY
35068: PUSH
35069: LD_INT 4
35071: ARRAY
35072: STR
35073: PUSH
35074: LD_STRING )
35076: STR
35077: PPUSH
35078: CALL_OW 559
35082: GO 34992
35084: POP
35085: POP
// end ; end ;
35086: LD_VAR 0 1
35090: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35091: LD_EXP 110
35095: IFFALSE 35780
35097: GO 35099
35099: DISABLE
35100: LD_INT 0
35102: PPUSH
35103: PPUSH
35104: PPUSH
35105: PPUSH
35106: PPUSH
35107: PPUSH
35108: PPUSH
35109: PPUSH
35110: PPUSH
// begin enable ;
35111: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35112: LD_ADDR_VAR 0 3
35116: PUSH
35117: LD_EXP 110
35121: PPUSH
35122: CALL 82137 0 1
35126: ST_TO_ADDR
// if not list then
35127: LD_VAR 0 3
35131: NOT
35132: IFFALSE 35136
// exit ;
35134: GO 35780
// for i := 1 to list do
35136: LD_ADDR_VAR 0 1
35140: PUSH
35141: DOUBLE
35142: LD_INT 1
35144: DEC
35145: ST_TO_ADDR
35146: LD_VAR 0 3
35150: PUSH
35151: FOR_TO
35152: IFFALSE 35778
// begin depot := list [ i ] [ 2 ] ;
35154: LD_ADDR_VAR 0 8
35158: PUSH
35159: LD_VAR 0 3
35163: PUSH
35164: LD_VAR 0 1
35168: ARRAY
35169: PUSH
35170: LD_INT 2
35172: ARRAY
35173: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35174: LD_ADDR_VAR 0 5
35178: PUSH
35179: LD_VAR 0 3
35183: PUSH
35184: LD_VAR 0 1
35188: ARRAY
35189: PUSH
35190: LD_INT 1
35192: ARRAY
35193: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35194: LD_VAR 0 8
35198: PPUSH
35199: CALL_OW 301
35203: PUSH
35204: LD_VAR 0 5
35208: PUSH
35209: LD_VAR 0 8
35213: PPUSH
35214: CALL_OW 255
35218: NONEQUAL
35219: OR
35220: IFFALSE 35249
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35222: LD_ADDR_EXP 110
35226: PUSH
35227: LD_EXP 110
35231: PPUSH
35232: LD_VAR 0 8
35236: PPUSH
35237: LD_INT 0
35239: PPUSH
35240: CALL_OW 1
35244: ST_TO_ADDR
// exit ;
35245: POP
35246: POP
35247: GO 35780
// end ; x := list [ i ] [ 3 ] ;
35249: LD_ADDR_VAR 0 6
35253: PUSH
35254: LD_VAR 0 3
35258: PUSH
35259: LD_VAR 0 1
35263: ARRAY
35264: PUSH
35265: LD_INT 3
35267: ARRAY
35268: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35269: LD_ADDR_VAR 0 7
35273: PUSH
35274: LD_VAR 0 3
35278: PUSH
35279: LD_VAR 0 1
35283: ARRAY
35284: PUSH
35285: LD_INT 4
35287: ARRAY
35288: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35289: LD_ADDR_VAR 0 9
35293: PUSH
35294: LD_VAR 0 6
35298: PPUSH
35299: LD_VAR 0 7
35303: PPUSH
35304: LD_INT 16
35306: PPUSH
35307: CALL 80725 0 3
35311: ST_TO_ADDR
// if not cratesNearbyPoint then
35312: LD_VAR 0 9
35316: NOT
35317: IFFALSE 35323
// exit ;
35319: POP
35320: POP
35321: GO 35780
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35323: LD_ADDR_VAR 0 4
35327: PUSH
35328: LD_INT 22
35330: PUSH
35331: LD_VAR 0 5
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 3
35342: PUSH
35343: LD_INT 60
35345: PUSH
35346: EMPTY
35347: LIST
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 91
35355: PUSH
35356: LD_VAR 0 8
35360: PUSH
35361: LD_INT 6
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 2
35371: PUSH
35372: LD_INT 25
35374: PUSH
35375: LD_INT 2
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 25
35384: PUSH
35385: LD_INT 16
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: LIST
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: PPUSH
35403: CALL_OW 69
35407: PUSH
35408: LD_VAR 0 8
35412: PPUSH
35413: CALL_OW 313
35417: PPUSH
35418: LD_INT 3
35420: PUSH
35421: LD_INT 60
35423: PUSH
35424: EMPTY
35425: LIST
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 2
35433: PUSH
35434: LD_INT 25
35436: PUSH
35437: LD_INT 2
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 25
35446: PUSH
35447: LD_INT 16
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: LIST
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PPUSH
35463: CALL_OW 72
35467: UNION
35468: ST_TO_ADDR
// if tmp then
35469: LD_VAR 0 4
35473: IFFALSE 35553
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35475: LD_ADDR_VAR 0 4
35479: PUSH
35480: LD_VAR 0 4
35484: PPUSH
35485: LD_INT 3
35487: PPUSH
35488: CALL 78694 0 2
35492: ST_TO_ADDR
// for j in tmp do
35493: LD_ADDR_VAR 0 2
35497: PUSH
35498: LD_VAR 0 4
35502: PUSH
35503: FOR_IN
35504: IFFALSE 35547
// begin if IsInUnit ( j ) then
35506: LD_VAR 0 2
35510: PPUSH
35511: CALL_OW 310
35515: IFFALSE 35526
// ComExit ( j ) ;
35517: LD_VAR 0 2
35521: PPUSH
35522: CALL 78777 0 1
// AddComCollect ( j , x , y ) ;
35526: LD_VAR 0 2
35530: PPUSH
35531: LD_VAR 0 6
35535: PPUSH
35536: LD_VAR 0 7
35540: PPUSH
35541: CALL_OW 177
// end ;
35545: GO 35503
35547: POP
35548: POP
// exit ;
35549: POP
35550: POP
35551: GO 35780
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35553: LD_ADDR_VAR 0 4
35557: PUSH
35558: LD_INT 22
35560: PUSH
35561: LD_VAR 0 5
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 91
35572: PUSH
35573: LD_VAR 0 8
35577: PUSH
35578: LD_INT 8
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 2
35588: PUSH
35589: LD_INT 34
35591: PUSH
35592: LD_INT 12
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 34
35601: PUSH
35602: LD_INT 51
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 34
35611: PUSH
35612: LD_INT 32
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 34
35621: PUSH
35622: LD_INT 89
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: LIST
35640: PPUSH
35641: CALL_OW 69
35645: ST_TO_ADDR
// if tmp then
35646: LD_VAR 0 4
35650: IFFALSE 35776
// begin for j in tmp do
35652: LD_ADDR_VAR 0 2
35656: PUSH
35657: LD_VAR 0 4
35661: PUSH
35662: FOR_IN
35663: IFFALSE 35774
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35665: LD_VAR 0 2
35669: PPUSH
35670: CALL_OW 262
35674: PUSH
35675: LD_INT 3
35677: EQUAL
35678: PUSH
35679: LD_VAR 0 2
35683: PPUSH
35684: CALL_OW 261
35688: PUSH
35689: LD_INT 20
35691: GREATER
35692: OR
35693: PUSH
35694: LD_VAR 0 2
35698: PPUSH
35699: CALL_OW 314
35703: NOT
35704: AND
35705: PUSH
35706: LD_VAR 0 2
35710: PPUSH
35711: CALL_OW 263
35715: PUSH
35716: LD_INT 1
35718: NONEQUAL
35719: PUSH
35720: LD_VAR 0 2
35724: PPUSH
35725: CALL_OW 311
35729: OR
35730: AND
35731: IFFALSE 35772
// begin ComCollect ( j , x , y ) ;
35733: LD_VAR 0 2
35737: PPUSH
35738: LD_VAR 0 6
35742: PPUSH
35743: LD_VAR 0 7
35747: PPUSH
35748: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35752: LD_VAR 0 2
35756: PPUSH
35757: LD_VAR 0 8
35761: PPUSH
35762: CALL_OW 172
// exit ;
35766: POP
35767: POP
35768: POP
35769: POP
35770: GO 35780
// end ;
35772: GO 35662
35774: POP
35775: POP
// end ; end ;
35776: GO 35151
35778: POP
35779: POP
// end ; end_of_file
35780: PPOPN 9
35782: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35783: LD_INT 0
35785: PPUSH
35786: PPUSH
35787: PPUSH
35788: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35789: LD_VAR 0 1
35793: PPUSH
35794: CALL_OW 264
35798: PUSH
35799: LD_INT 91
35801: EQUAL
35802: IFFALSE 35874
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35804: LD_INT 68
35806: PPUSH
35807: LD_VAR 0 1
35811: PPUSH
35812: CALL_OW 255
35816: PPUSH
35817: CALL_OW 321
35821: PUSH
35822: LD_INT 2
35824: EQUAL
35825: IFFALSE 35837
// eff := 70 else
35827: LD_ADDR_VAR 0 4
35831: PUSH
35832: LD_INT 70
35834: ST_TO_ADDR
35835: GO 35845
// eff := 30 ;
35837: LD_ADDR_VAR 0 4
35841: PUSH
35842: LD_INT 30
35844: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35845: LD_VAR 0 1
35849: PPUSH
35850: CALL_OW 250
35854: PPUSH
35855: LD_VAR 0 1
35859: PPUSH
35860: CALL_OW 251
35864: PPUSH
35865: LD_VAR 0 4
35869: PPUSH
35870: CALL_OW 495
// end ; end ;
35874: LD_VAR 0 2
35878: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35879: LD_INT 0
35881: PPUSH
// end ;
35882: LD_VAR 0 4
35886: RET
// export function SOS_Command ( cmd ) ; begin
35887: LD_INT 0
35889: PPUSH
// end ;
35890: LD_VAR 0 2
35894: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35895: LD_INT 0
35897: PPUSH
// end ;
35898: LD_VAR 0 6
35902: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35903: LD_INT 0
35905: PPUSH
35906: PPUSH
// if not vehicle or not factory then
35907: LD_VAR 0 1
35911: NOT
35912: PUSH
35913: LD_VAR 0 2
35917: NOT
35918: OR
35919: IFFALSE 35923
// exit ;
35921: GO 36154
// if factoryWaypoints >= factory then
35923: LD_EXP 109
35927: PUSH
35928: LD_VAR 0 2
35932: GREATEREQUAL
35933: IFFALSE 36154
// if factoryWaypoints [ factory ] then
35935: LD_EXP 109
35939: PUSH
35940: LD_VAR 0 2
35944: ARRAY
35945: IFFALSE 36154
// begin if GetControl ( vehicle ) = control_manual then
35947: LD_VAR 0 1
35951: PPUSH
35952: CALL_OW 263
35956: PUSH
35957: LD_INT 1
35959: EQUAL
35960: IFFALSE 36041
// begin driver := IsDrivenBy ( vehicle ) ;
35962: LD_ADDR_VAR 0 4
35966: PUSH
35967: LD_VAR 0 1
35971: PPUSH
35972: CALL_OW 311
35976: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35977: LD_VAR 0 4
35981: PPUSH
35982: LD_EXP 109
35986: PUSH
35987: LD_VAR 0 2
35991: ARRAY
35992: PUSH
35993: LD_INT 3
35995: ARRAY
35996: PPUSH
35997: LD_EXP 109
36001: PUSH
36002: LD_VAR 0 2
36006: ARRAY
36007: PUSH
36008: LD_INT 4
36010: ARRAY
36011: PPUSH
36012: CALL_OW 171
// AddComExitVehicle ( driver ) ;
36016: LD_VAR 0 4
36020: PPUSH
36021: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
36025: LD_VAR 0 4
36029: PPUSH
36030: LD_VAR 0 2
36034: PPUSH
36035: CALL_OW 180
// end else
36039: GO 36154
// if GetControl ( vehicle ) = control_remote then
36041: LD_VAR 0 1
36045: PPUSH
36046: CALL_OW 263
36050: PUSH
36051: LD_INT 2
36053: EQUAL
36054: IFFALSE 36115
// begin wait ( 0 0$2 ) ;
36056: LD_INT 70
36058: PPUSH
36059: CALL_OW 67
// if Connect ( vehicle ) then
36063: LD_VAR 0 1
36067: PPUSH
36068: CALL 48985 0 1
36072: IFFALSE 36113
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36074: LD_VAR 0 1
36078: PPUSH
36079: LD_EXP 109
36083: PUSH
36084: LD_VAR 0 2
36088: ARRAY
36089: PUSH
36090: LD_INT 3
36092: ARRAY
36093: PPUSH
36094: LD_EXP 109
36098: PUSH
36099: LD_VAR 0 2
36103: ARRAY
36104: PUSH
36105: LD_INT 4
36107: ARRAY
36108: PPUSH
36109: CALL_OW 171
// end else
36113: GO 36154
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
36115: LD_VAR 0 1
36119: PPUSH
36120: LD_EXP 109
36124: PUSH
36125: LD_VAR 0 2
36129: ARRAY
36130: PUSH
36131: LD_INT 3
36133: ARRAY
36134: PPUSH
36135: LD_EXP 109
36139: PUSH
36140: LD_VAR 0 2
36144: ARRAY
36145: PUSH
36146: LD_INT 4
36148: ARRAY
36149: PPUSH
36150: CALL_OW 171
// end ; end ;
36154: LD_VAR 0 3
36158: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36159: LD_INT 0
36161: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36162: LD_VAR 0 1
36166: PUSH
36167: LD_INT 250
36169: EQUAL
36170: PUSH
36171: LD_VAR 0 2
36175: PPUSH
36176: CALL_OW 264
36180: PUSH
36181: LD_INT 81
36183: EQUAL
36184: AND
36185: IFFALSE 36206
// MinerPlaceMine ( unit , x , y ) ;
36187: LD_VAR 0 2
36191: PPUSH
36192: LD_VAR 0 4
36196: PPUSH
36197: LD_VAR 0 5
36201: PPUSH
36202: CALL 39196 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36206: LD_VAR 0 1
36210: PUSH
36211: LD_INT 251
36213: EQUAL
36214: PUSH
36215: LD_VAR 0 2
36219: PPUSH
36220: CALL_OW 264
36224: PUSH
36225: LD_INT 81
36227: EQUAL
36228: AND
36229: IFFALSE 36250
// MinerDetonateMine ( unit , x , y ) ;
36231: LD_VAR 0 2
36235: PPUSH
36236: LD_VAR 0 4
36240: PPUSH
36241: LD_VAR 0 5
36245: PPUSH
36246: CALL 39471 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36250: LD_VAR 0 1
36254: PUSH
36255: LD_INT 252
36257: EQUAL
36258: PUSH
36259: LD_VAR 0 2
36263: PPUSH
36264: CALL_OW 264
36268: PUSH
36269: LD_INT 81
36271: EQUAL
36272: AND
36273: IFFALSE 36294
// MinerCreateMinefield ( unit , x , y ) ;
36275: LD_VAR 0 2
36279: PPUSH
36280: LD_VAR 0 4
36284: PPUSH
36285: LD_VAR 0 5
36289: PPUSH
36290: CALL 39888 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36294: LD_VAR 0 1
36298: PUSH
36299: LD_INT 253
36301: EQUAL
36302: PUSH
36303: LD_VAR 0 2
36307: PPUSH
36308: CALL_OW 257
36312: PUSH
36313: LD_INT 5
36315: EQUAL
36316: AND
36317: IFFALSE 36338
// ComBinocular ( unit , x , y ) ;
36319: LD_VAR 0 2
36323: PPUSH
36324: LD_VAR 0 4
36328: PPUSH
36329: LD_VAR 0 5
36333: PPUSH
36334: CALL 40257 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36338: LD_VAR 0 1
36342: PUSH
36343: LD_INT 254
36345: EQUAL
36346: PUSH
36347: LD_VAR 0 2
36351: PPUSH
36352: CALL_OW 264
36356: PUSH
36357: LD_INT 99
36359: EQUAL
36360: AND
36361: PUSH
36362: LD_VAR 0 3
36366: PPUSH
36367: CALL_OW 263
36371: PUSH
36372: LD_INT 3
36374: EQUAL
36375: AND
36376: IFFALSE 36392
// HackDestroyVehicle ( unit , selectedUnit ) ;
36378: LD_VAR 0 2
36382: PPUSH
36383: LD_VAR 0 3
36387: PPUSH
36388: CALL 38560 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36392: LD_VAR 0 1
36396: PUSH
36397: LD_INT 255
36399: EQUAL
36400: PUSH
36401: LD_VAR 0 2
36405: PPUSH
36406: CALL_OW 264
36410: PUSH
36411: LD_INT 14
36413: PUSH
36414: LD_INT 53
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: IN
36421: AND
36422: PUSH
36423: LD_VAR 0 4
36427: PPUSH
36428: LD_VAR 0 5
36432: PPUSH
36433: CALL_OW 488
36437: AND
36438: IFFALSE 36462
// CutTreeXYR ( unit , x , y , 12 ) ;
36440: LD_VAR 0 2
36444: PPUSH
36445: LD_VAR 0 4
36449: PPUSH
36450: LD_VAR 0 5
36454: PPUSH
36455: LD_INT 12
36457: PPUSH
36458: CALL 36557 0 4
// if cmd = 256 then
36462: LD_VAR 0 1
36466: PUSH
36467: LD_INT 256
36469: EQUAL
36470: IFFALSE 36491
// SetFactoryWaypoint ( unit , x , y ) ;
36472: LD_VAR 0 2
36476: PPUSH
36477: LD_VAR 0 4
36481: PPUSH
36482: LD_VAR 0 5
36486: PPUSH
36487: CALL 34472 0 3
// if cmd = 257 then
36491: LD_VAR 0 1
36495: PUSH
36496: LD_INT 257
36498: EQUAL
36499: IFFALSE 36520
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36501: LD_VAR 0 2
36505: PPUSH
36506: LD_VAR 0 4
36510: PPUSH
36511: LD_VAR 0 5
36515: PPUSH
36516: CALL 34834 0 3
// if cmd = 258 then
36520: LD_VAR 0 1
36524: PUSH
36525: LD_INT 258
36527: EQUAL
36528: IFFALSE 36552
// BurnTreeXYR ( unit , x , y , 8 ) ;
36530: LD_VAR 0 2
36534: PPUSH
36535: LD_VAR 0 4
36539: PPUSH
36540: LD_VAR 0 5
36544: PPUSH
36545: LD_INT 8
36547: PPUSH
36548: CALL 36951 0 4
// end ;
36552: LD_VAR 0 6
36556: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36557: LD_INT 0
36559: PPUSH
36560: PPUSH
36561: PPUSH
36562: PPUSH
36563: PPUSH
36564: PPUSH
36565: PPUSH
36566: PPUSH
36567: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36568: LD_VAR 0 1
36572: PPUSH
36573: CALL_OW 302
36577: NOT
36578: PUSH
36579: LD_VAR 0 2
36583: PPUSH
36584: LD_VAR 0 3
36588: PPUSH
36589: CALL_OW 488
36593: NOT
36594: OR
36595: PUSH
36596: LD_VAR 0 4
36600: NOT
36601: OR
36602: IFFALSE 36606
// exit ;
36604: GO 36946
// list := [ ] ;
36606: LD_ADDR_VAR 0 13
36610: PUSH
36611: EMPTY
36612: ST_TO_ADDR
// if x - r < 0 then
36613: LD_VAR 0 2
36617: PUSH
36618: LD_VAR 0 4
36622: MINUS
36623: PUSH
36624: LD_INT 0
36626: LESS
36627: IFFALSE 36639
// min_x := 0 else
36629: LD_ADDR_VAR 0 7
36633: PUSH
36634: LD_INT 0
36636: ST_TO_ADDR
36637: GO 36655
// min_x := x - r ;
36639: LD_ADDR_VAR 0 7
36643: PUSH
36644: LD_VAR 0 2
36648: PUSH
36649: LD_VAR 0 4
36653: MINUS
36654: ST_TO_ADDR
// if y - r < 0 then
36655: LD_VAR 0 3
36659: PUSH
36660: LD_VAR 0 4
36664: MINUS
36665: PUSH
36666: LD_INT 0
36668: LESS
36669: IFFALSE 36681
// min_y := 0 else
36671: LD_ADDR_VAR 0 8
36675: PUSH
36676: LD_INT 0
36678: ST_TO_ADDR
36679: GO 36697
// min_y := y - r ;
36681: LD_ADDR_VAR 0 8
36685: PUSH
36686: LD_VAR 0 3
36690: PUSH
36691: LD_VAR 0 4
36695: MINUS
36696: ST_TO_ADDR
// max_x := x + r ;
36697: LD_ADDR_VAR 0 9
36701: PUSH
36702: LD_VAR 0 2
36706: PUSH
36707: LD_VAR 0 4
36711: PLUS
36712: ST_TO_ADDR
// max_y := y + r ;
36713: LD_ADDR_VAR 0 10
36717: PUSH
36718: LD_VAR 0 3
36722: PUSH
36723: LD_VAR 0 4
36727: PLUS
36728: ST_TO_ADDR
// for _x = min_x to max_x do
36729: LD_ADDR_VAR 0 11
36733: PUSH
36734: DOUBLE
36735: LD_VAR 0 7
36739: DEC
36740: ST_TO_ADDR
36741: LD_VAR 0 9
36745: PUSH
36746: FOR_TO
36747: IFFALSE 36864
// for _y = min_y to max_y do
36749: LD_ADDR_VAR 0 12
36753: PUSH
36754: DOUBLE
36755: LD_VAR 0 8
36759: DEC
36760: ST_TO_ADDR
36761: LD_VAR 0 10
36765: PUSH
36766: FOR_TO
36767: IFFALSE 36860
// begin if not ValidHex ( _x , _y ) then
36769: LD_VAR 0 11
36773: PPUSH
36774: LD_VAR 0 12
36778: PPUSH
36779: CALL_OW 488
36783: NOT
36784: IFFALSE 36788
// continue ;
36786: GO 36766
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36788: LD_VAR 0 11
36792: PPUSH
36793: LD_VAR 0 12
36797: PPUSH
36798: CALL_OW 351
36802: PUSH
36803: LD_VAR 0 11
36807: PPUSH
36808: LD_VAR 0 12
36812: PPUSH
36813: CALL_OW 554
36817: AND
36818: IFFALSE 36858
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36820: LD_ADDR_VAR 0 13
36824: PUSH
36825: LD_VAR 0 13
36829: PPUSH
36830: LD_VAR 0 13
36834: PUSH
36835: LD_INT 1
36837: PLUS
36838: PPUSH
36839: LD_VAR 0 11
36843: PUSH
36844: LD_VAR 0 12
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PPUSH
36853: CALL_OW 2
36857: ST_TO_ADDR
// end ;
36858: GO 36766
36860: POP
36861: POP
36862: GO 36746
36864: POP
36865: POP
// if not list then
36866: LD_VAR 0 13
36870: NOT
36871: IFFALSE 36875
// exit ;
36873: GO 36946
// for i in list do
36875: LD_ADDR_VAR 0 6
36879: PUSH
36880: LD_VAR 0 13
36884: PUSH
36885: FOR_IN
36886: IFFALSE 36944
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36888: LD_VAR 0 1
36892: PPUSH
36893: LD_STRING M
36895: PUSH
36896: LD_VAR 0 6
36900: PUSH
36901: LD_INT 1
36903: ARRAY
36904: PUSH
36905: LD_VAR 0 6
36909: PUSH
36910: LD_INT 2
36912: ARRAY
36913: PUSH
36914: LD_INT 0
36916: PUSH
36917: LD_INT 0
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: PUSH
36935: EMPTY
36936: LIST
36937: PPUSH
36938: CALL_OW 447
36942: GO 36885
36944: POP
36945: POP
// end ;
36946: LD_VAR 0 5
36950: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36951: LD_INT 0
36953: PPUSH
36954: PPUSH
36955: PPUSH
36956: PPUSH
36957: PPUSH
36958: PPUSH
36959: PPUSH
36960: PPUSH
36961: PPUSH
36962: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36963: LD_VAR 0 1
36967: PPUSH
36968: CALL_OW 302
36972: NOT
36973: PUSH
36974: LD_VAR 0 2
36978: PPUSH
36979: LD_VAR 0 3
36983: PPUSH
36984: CALL_OW 488
36988: NOT
36989: OR
36990: PUSH
36991: LD_VAR 0 4
36995: NOT
36996: OR
36997: IFFALSE 37001
// exit ;
36999: GO 37514
// list := [ ] ;
37001: LD_ADDR_VAR 0 13
37005: PUSH
37006: EMPTY
37007: ST_TO_ADDR
// if x - r < 0 then
37008: LD_VAR 0 2
37012: PUSH
37013: LD_VAR 0 4
37017: MINUS
37018: PUSH
37019: LD_INT 0
37021: LESS
37022: IFFALSE 37034
// min_x := 0 else
37024: LD_ADDR_VAR 0 7
37028: PUSH
37029: LD_INT 0
37031: ST_TO_ADDR
37032: GO 37050
// min_x := x - r ;
37034: LD_ADDR_VAR 0 7
37038: PUSH
37039: LD_VAR 0 2
37043: PUSH
37044: LD_VAR 0 4
37048: MINUS
37049: ST_TO_ADDR
// if y - r < 0 then
37050: LD_VAR 0 3
37054: PUSH
37055: LD_VAR 0 4
37059: MINUS
37060: PUSH
37061: LD_INT 0
37063: LESS
37064: IFFALSE 37076
// min_y := 0 else
37066: LD_ADDR_VAR 0 8
37070: PUSH
37071: LD_INT 0
37073: ST_TO_ADDR
37074: GO 37092
// min_y := y - r ;
37076: LD_ADDR_VAR 0 8
37080: PUSH
37081: LD_VAR 0 3
37085: PUSH
37086: LD_VAR 0 4
37090: MINUS
37091: ST_TO_ADDR
// max_x := x + r ;
37092: LD_ADDR_VAR 0 9
37096: PUSH
37097: LD_VAR 0 2
37101: PUSH
37102: LD_VAR 0 4
37106: PLUS
37107: ST_TO_ADDR
// max_y := y + r ;
37108: LD_ADDR_VAR 0 10
37112: PUSH
37113: LD_VAR 0 3
37117: PUSH
37118: LD_VAR 0 4
37122: PLUS
37123: ST_TO_ADDR
// for _x = min_x to max_x do
37124: LD_ADDR_VAR 0 11
37128: PUSH
37129: DOUBLE
37130: LD_VAR 0 7
37134: DEC
37135: ST_TO_ADDR
37136: LD_VAR 0 9
37140: PUSH
37141: FOR_TO
37142: IFFALSE 37259
// for _y = min_y to max_y do
37144: LD_ADDR_VAR 0 12
37148: PUSH
37149: DOUBLE
37150: LD_VAR 0 8
37154: DEC
37155: ST_TO_ADDR
37156: LD_VAR 0 10
37160: PUSH
37161: FOR_TO
37162: IFFALSE 37255
// begin if not ValidHex ( _x , _y ) then
37164: LD_VAR 0 11
37168: PPUSH
37169: LD_VAR 0 12
37173: PPUSH
37174: CALL_OW 488
37178: NOT
37179: IFFALSE 37183
// continue ;
37181: GO 37161
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37183: LD_VAR 0 11
37187: PPUSH
37188: LD_VAR 0 12
37192: PPUSH
37193: CALL_OW 351
37197: PUSH
37198: LD_VAR 0 11
37202: PPUSH
37203: LD_VAR 0 12
37207: PPUSH
37208: CALL_OW 554
37212: AND
37213: IFFALSE 37253
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37215: LD_ADDR_VAR 0 13
37219: PUSH
37220: LD_VAR 0 13
37224: PPUSH
37225: LD_VAR 0 13
37229: PUSH
37230: LD_INT 1
37232: PLUS
37233: PPUSH
37234: LD_VAR 0 11
37238: PUSH
37239: LD_VAR 0 12
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PPUSH
37248: CALL_OW 2
37252: ST_TO_ADDR
// end ;
37253: GO 37161
37255: POP
37256: POP
37257: GO 37141
37259: POP
37260: POP
// if not list then
37261: LD_VAR 0 13
37265: NOT
37266: IFFALSE 37270
// exit ;
37268: GO 37514
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37270: LD_ADDR_VAR 0 13
37274: PUSH
37275: LD_VAR 0 1
37279: PPUSH
37280: LD_VAR 0 13
37284: PPUSH
37285: LD_INT 1
37287: PPUSH
37288: LD_INT 1
37290: PPUSH
37291: CALL 46127 0 4
37295: ST_TO_ADDR
// ComStop ( flame ) ;
37296: LD_VAR 0 1
37300: PPUSH
37301: CALL_OW 141
// for i in list do
37305: LD_ADDR_VAR 0 6
37309: PUSH
37310: LD_VAR 0 13
37314: PUSH
37315: FOR_IN
37316: IFFALSE 37347
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37318: LD_VAR 0 1
37322: PPUSH
37323: LD_VAR 0 6
37327: PUSH
37328: LD_INT 1
37330: ARRAY
37331: PPUSH
37332: LD_VAR 0 6
37336: PUSH
37337: LD_INT 2
37339: ARRAY
37340: PPUSH
37341: CALL_OW 176
37345: GO 37315
37347: POP
37348: POP
// repeat wait ( 0 0$1 ) ;
37349: LD_INT 35
37351: PPUSH
37352: CALL_OW 67
// task := GetTaskList ( flame ) ;
37356: LD_ADDR_VAR 0 14
37360: PUSH
37361: LD_VAR 0 1
37365: PPUSH
37366: CALL_OW 437
37370: ST_TO_ADDR
// if not task then
37371: LD_VAR 0 14
37375: NOT
37376: IFFALSE 37380
// exit ;
37378: GO 37514
// if task [ 1 ] [ 1 ] <> | then
37380: LD_VAR 0 14
37384: PUSH
37385: LD_INT 1
37387: ARRAY
37388: PUSH
37389: LD_INT 1
37391: ARRAY
37392: PUSH
37393: LD_STRING |
37395: NONEQUAL
37396: IFFALSE 37400
// exit ;
37398: GO 37514
// _x := task [ 1 ] [ 2 ] ;
37400: LD_ADDR_VAR 0 11
37404: PUSH
37405: LD_VAR 0 14
37409: PUSH
37410: LD_INT 1
37412: ARRAY
37413: PUSH
37414: LD_INT 2
37416: ARRAY
37417: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37418: LD_ADDR_VAR 0 12
37422: PUSH
37423: LD_VAR 0 14
37427: PUSH
37428: LD_INT 1
37430: ARRAY
37431: PUSH
37432: LD_INT 3
37434: ARRAY
37435: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37436: LD_VAR 0 11
37440: PPUSH
37441: LD_VAR 0 12
37445: PPUSH
37446: CALL_OW 351
37450: NOT
37451: PUSH
37452: LD_VAR 0 11
37456: PPUSH
37457: LD_VAR 0 12
37461: PPUSH
37462: CALL_OW 554
37466: NOT
37467: OR
37468: IFFALSE 37502
// begin task := Delete ( task , 1 ) ;
37470: LD_ADDR_VAR 0 14
37474: PUSH
37475: LD_VAR 0 14
37479: PPUSH
37480: LD_INT 1
37482: PPUSH
37483: CALL_OW 3
37487: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37488: LD_VAR 0 1
37492: PPUSH
37493: LD_VAR 0 14
37497: PPUSH
37498: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37502: LD_VAR 0 1
37506: PPUSH
37507: CALL_OW 314
37511: NOT
37512: IFFALSE 37349
// end ;
37514: LD_VAR 0 5
37518: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37519: LD_EXP 112
37523: NOT
37524: IFFALSE 37574
37526: GO 37528
37528: DISABLE
// begin initHack := true ;
37529: LD_ADDR_EXP 112
37533: PUSH
37534: LD_INT 1
37536: ST_TO_ADDR
// hackTanks := [ ] ;
37537: LD_ADDR_EXP 113
37541: PUSH
37542: EMPTY
37543: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37544: LD_ADDR_EXP 114
37548: PUSH
37549: EMPTY
37550: ST_TO_ADDR
// hackLimit := 3 ;
37551: LD_ADDR_EXP 115
37555: PUSH
37556: LD_INT 3
37558: ST_TO_ADDR
// hackDist := 12 ;
37559: LD_ADDR_EXP 116
37563: PUSH
37564: LD_INT 12
37566: ST_TO_ADDR
// hackCounter := [ ] ;
37567: LD_ADDR_EXP 117
37571: PUSH
37572: EMPTY
37573: ST_TO_ADDR
// end ;
37574: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37575: LD_EXP 112
37579: PUSH
37580: LD_INT 34
37582: PUSH
37583: LD_INT 99
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PPUSH
37590: CALL_OW 69
37594: AND
37595: IFFALSE 37848
37597: GO 37599
37599: DISABLE
37600: LD_INT 0
37602: PPUSH
37603: PPUSH
// begin enable ;
37604: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37605: LD_ADDR_VAR 0 1
37609: PUSH
37610: LD_INT 34
37612: PUSH
37613: LD_INT 99
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PPUSH
37620: CALL_OW 69
37624: PUSH
37625: FOR_IN
37626: IFFALSE 37846
// begin if not i in hackTanks then
37628: LD_VAR 0 1
37632: PUSH
37633: LD_EXP 113
37637: IN
37638: NOT
37639: IFFALSE 37722
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37641: LD_ADDR_EXP 113
37645: PUSH
37646: LD_EXP 113
37650: PPUSH
37651: LD_EXP 113
37655: PUSH
37656: LD_INT 1
37658: PLUS
37659: PPUSH
37660: LD_VAR 0 1
37664: PPUSH
37665: CALL_OW 1
37669: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37670: LD_ADDR_EXP 114
37674: PUSH
37675: LD_EXP 114
37679: PPUSH
37680: LD_EXP 114
37684: PUSH
37685: LD_INT 1
37687: PLUS
37688: PPUSH
37689: EMPTY
37690: PPUSH
37691: CALL_OW 1
37695: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37696: LD_ADDR_EXP 117
37700: PUSH
37701: LD_EXP 117
37705: PPUSH
37706: LD_EXP 117
37710: PUSH
37711: LD_INT 1
37713: PLUS
37714: PPUSH
37715: EMPTY
37716: PPUSH
37717: CALL_OW 1
37721: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37722: LD_VAR 0 1
37726: PPUSH
37727: CALL_OW 302
37731: NOT
37732: IFFALSE 37745
// begin HackUnlinkAll ( i ) ;
37734: LD_VAR 0 1
37738: PPUSH
37739: CALL 37851 0 1
// continue ;
37743: GO 37625
// end ; HackCheckCapturedStatus ( i ) ;
37745: LD_VAR 0 1
37749: PPUSH
37750: CALL 38294 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37754: LD_ADDR_VAR 0 2
37758: PUSH
37759: LD_INT 81
37761: PUSH
37762: LD_VAR 0 1
37766: PPUSH
37767: CALL_OW 255
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 33
37778: PUSH
37779: LD_INT 3
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 91
37788: PUSH
37789: LD_VAR 0 1
37793: PUSH
37794: LD_EXP 116
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 50
37806: PUSH
37807: EMPTY
37808: LIST
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: PPUSH
37816: CALL_OW 69
37820: ST_TO_ADDR
// if not tmp then
37821: LD_VAR 0 2
37825: NOT
37826: IFFALSE 37830
// continue ;
37828: GO 37625
// HackLink ( i , tmp ) ;
37830: LD_VAR 0 1
37834: PPUSH
37835: LD_VAR 0 2
37839: PPUSH
37840: CALL 37987 0 2
// end ;
37844: GO 37625
37846: POP
37847: POP
// end ;
37848: PPOPN 2
37850: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37851: LD_INT 0
37853: PPUSH
37854: PPUSH
37855: PPUSH
// if not hack in hackTanks then
37856: LD_VAR 0 1
37860: PUSH
37861: LD_EXP 113
37865: IN
37866: NOT
37867: IFFALSE 37871
// exit ;
37869: GO 37982
// index := GetElementIndex ( hackTanks , hack ) ;
37871: LD_ADDR_VAR 0 4
37875: PUSH
37876: LD_EXP 113
37880: PPUSH
37881: LD_VAR 0 1
37885: PPUSH
37886: CALL 45424 0 2
37890: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37891: LD_EXP 114
37895: PUSH
37896: LD_VAR 0 4
37900: ARRAY
37901: IFFALSE 37982
// begin for i in hackTanksCaptured [ index ] do
37903: LD_ADDR_VAR 0 3
37907: PUSH
37908: LD_EXP 114
37912: PUSH
37913: LD_VAR 0 4
37917: ARRAY
37918: PUSH
37919: FOR_IN
37920: IFFALSE 37946
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37922: LD_VAR 0 3
37926: PUSH
37927: LD_INT 1
37929: ARRAY
37930: PPUSH
37931: LD_VAR 0 3
37935: PUSH
37936: LD_INT 2
37938: ARRAY
37939: PPUSH
37940: CALL_OW 235
37944: GO 37919
37946: POP
37947: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37948: LD_ADDR_EXP 114
37952: PUSH
37953: LD_EXP 114
37957: PPUSH
37958: LD_VAR 0 4
37962: PPUSH
37963: EMPTY
37964: PPUSH
37965: CALL_OW 1
37969: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37970: LD_VAR 0 1
37974: PPUSH
37975: LD_INT 0
37977: PPUSH
37978: CALL_OW 505
// end ; end ;
37982: LD_VAR 0 2
37986: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37987: LD_INT 0
37989: PPUSH
37990: PPUSH
37991: PPUSH
// if not hack in hackTanks or not vehicles then
37992: LD_VAR 0 1
37996: PUSH
37997: LD_EXP 113
38001: IN
38002: NOT
38003: PUSH
38004: LD_VAR 0 2
38008: NOT
38009: OR
38010: IFFALSE 38014
// exit ;
38012: GO 38289
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38014: LD_ADDR_VAR 0 2
38018: PUSH
38019: LD_VAR 0 1
38023: PPUSH
38024: LD_VAR 0 2
38028: PPUSH
38029: LD_INT 1
38031: PPUSH
38032: LD_INT 1
38034: PPUSH
38035: CALL 46074 0 4
38039: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38040: LD_ADDR_VAR 0 5
38044: PUSH
38045: LD_EXP 113
38049: PPUSH
38050: LD_VAR 0 1
38054: PPUSH
38055: CALL 45424 0 2
38059: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38060: LD_EXP 114
38064: PUSH
38065: LD_VAR 0 5
38069: ARRAY
38070: PUSH
38071: LD_EXP 115
38075: LESS
38076: IFFALSE 38265
// begin for i := 1 to vehicles do
38078: LD_ADDR_VAR 0 4
38082: PUSH
38083: DOUBLE
38084: LD_INT 1
38086: DEC
38087: ST_TO_ADDR
38088: LD_VAR 0 2
38092: PUSH
38093: FOR_TO
38094: IFFALSE 38263
// begin if hackTanksCaptured [ index ] = hackLimit then
38096: LD_EXP 114
38100: PUSH
38101: LD_VAR 0 5
38105: ARRAY
38106: PUSH
38107: LD_EXP 115
38111: EQUAL
38112: IFFALSE 38116
// break ;
38114: GO 38263
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38116: LD_ADDR_EXP 117
38120: PUSH
38121: LD_EXP 117
38125: PPUSH
38126: LD_VAR 0 5
38130: PPUSH
38131: LD_EXP 117
38135: PUSH
38136: LD_VAR 0 5
38140: ARRAY
38141: PUSH
38142: LD_INT 1
38144: PLUS
38145: PPUSH
38146: CALL_OW 1
38150: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38151: LD_ADDR_EXP 114
38155: PUSH
38156: LD_EXP 114
38160: PPUSH
38161: LD_VAR 0 5
38165: PUSH
38166: LD_EXP 114
38170: PUSH
38171: LD_VAR 0 5
38175: ARRAY
38176: PUSH
38177: LD_INT 1
38179: PLUS
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PPUSH
38185: LD_VAR 0 2
38189: PUSH
38190: LD_VAR 0 4
38194: ARRAY
38195: PUSH
38196: LD_VAR 0 2
38200: PUSH
38201: LD_VAR 0 4
38205: ARRAY
38206: PPUSH
38207: CALL_OW 255
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PPUSH
38216: CALL 45639 0 3
38220: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38221: LD_VAR 0 2
38225: PUSH
38226: LD_VAR 0 4
38230: ARRAY
38231: PPUSH
38232: LD_VAR 0 1
38236: PPUSH
38237: CALL_OW 255
38241: PPUSH
38242: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38246: LD_VAR 0 2
38250: PUSH
38251: LD_VAR 0 4
38255: ARRAY
38256: PPUSH
38257: CALL_OW 141
// end ;
38261: GO 38093
38263: POP
38264: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38265: LD_VAR 0 1
38269: PPUSH
38270: LD_EXP 114
38274: PUSH
38275: LD_VAR 0 5
38279: ARRAY
38280: PUSH
38281: LD_INT 0
38283: PLUS
38284: PPUSH
38285: CALL_OW 505
// end ;
38289: LD_VAR 0 3
38293: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38294: LD_INT 0
38296: PPUSH
38297: PPUSH
38298: PPUSH
38299: PPUSH
// if not hack in hackTanks then
38300: LD_VAR 0 1
38304: PUSH
38305: LD_EXP 113
38309: IN
38310: NOT
38311: IFFALSE 38315
// exit ;
38313: GO 38555
// index := GetElementIndex ( hackTanks , hack ) ;
38315: LD_ADDR_VAR 0 4
38319: PUSH
38320: LD_EXP 113
38324: PPUSH
38325: LD_VAR 0 1
38329: PPUSH
38330: CALL 45424 0 2
38334: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38335: LD_ADDR_VAR 0 3
38339: PUSH
38340: DOUBLE
38341: LD_EXP 114
38345: PUSH
38346: LD_VAR 0 4
38350: ARRAY
38351: INC
38352: ST_TO_ADDR
38353: LD_INT 1
38355: PUSH
38356: FOR_DOWNTO
38357: IFFALSE 38529
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38359: LD_ADDR_VAR 0 5
38363: PUSH
38364: LD_EXP 114
38368: PUSH
38369: LD_VAR 0 4
38373: ARRAY
38374: PUSH
38375: LD_VAR 0 3
38379: ARRAY
38380: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38381: LD_VAR 0 5
38385: PUSH
38386: LD_INT 1
38388: ARRAY
38389: PPUSH
38390: CALL_OW 302
38394: NOT
38395: PUSH
38396: LD_VAR 0 5
38400: PUSH
38401: LD_INT 1
38403: ARRAY
38404: PPUSH
38405: CALL_OW 255
38409: PUSH
38410: LD_VAR 0 1
38414: PPUSH
38415: CALL_OW 255
38419: NONEQUAL
38420: OR
38421: IFFALSE 38527
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38423: LD_VAR 0 5
38427: PUSH
38428: LD_INT 1
38430: ARRAY
38431: PPUSH
38432: CALL_OW 305
38436: PUSH
38437: LD_VAR 0 5
38441: PUSH
38442: LD_INT 1
38444: ARRAY
38445: PPUSH
38446: CALL_OW 255
38450: PUSH
38451: LD_VAR 0 1
38455: PPUSH
38456: CALL_OW 255
38460: EQUAL
38461: AND
38462: IFFALSE 38486
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38464: LD_VAR 0 5
38468: PUSH
38469: LD_INT 1
38471: ARRAY
38472: PPUSH
38473: LD_VAR 0 5
38477: PUSH
38478: LD_INT 2
38480: ARRAY
38481: PPUSH
38482: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38486: LD_ADDR_EXP 114
38490: PUSH
38491: LD_EXP 114
38495: PPUSH
38496: LD_VAR 0 4
38500: PPUSH
38501: LD_EXP 114
38505: PUSH
38506: LD_VAR 0 4
38510: ARRAY
38511: PPUSH
38512: LD_VAR 0 3
38516: PPUSH
38517: CALL_OW 3
38521: PPUSH
38522: CALL_OW 1
38526: ST_TO_ADDR
// end ; end ;
38527: GO 38356
38529: POP
38530: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38531: LD_VAR 0 1
38535: PPUSH
38536: LD_EXP 114
38540: PUSH
38541: LD_VAR 0 4
38545: ARRAY
38546: PUSH
38547: LD_INT 0
38549: PLUS
38550: PPUSH
38551: CALL_OW 505
// end ;
38555: LD_VAR 0 2
38559: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38560: LD_INT 0
38562: PPUSH
38563: PPUSH
38564: PPUSH
38565: PPUSH
// if not hack in hackTanks then
38566: LD_VAR 0 1
38570: PUSH
38571: LD_EXP 113
38575: IN
38576: NOT
38577: IFFALSE 38581
// exit ;
38579: GO 38666
// index := GetElementIndex ( hackTanks , hack ) ;
38581: LD_ADDR_VAR 0 5
38585: PUSH
38586: LD_EXP 113
38590: PPUSH
38591: LD_VAR 0 1
38595: PPUSH
38596: CALL 45424 0 2
38600: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38601: LD_ADDR_VAR 0 4
38605: PUSH
38606: DOUBLE
38607: LD_INT 1
38609: DEC
38610: ST_TO_ADDR
38611: LD_EXP 114
38615: PUSH
38616: LD_VAR 0 5
38620: ARRAY
38621: PUSH
38622: FOR_TO
38623: IFFALSE 38664
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38625: LD_EXP 114
38629: PUSH
38630: LD_VAR 0 5
38634: ARRAY
38635: PUSH
38636: LD_VAR 0 4
38640: ARRAY
38641: PUSH
38642: LD_INT 1
38644: ARRAY
38645: PUSH
38646: LD_VAR 0 2
38650: EQUAL
38651: IFFALSE 38662
// KillUnit ( vehicle ) ;
38653: LD_VAR 0 2
38657: PPUSH
38658: CALL_OW 66
38662: GO 38622
38664: POP
38665: POP
// end ;
38666: LD_VAR 0 3
38670: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38671: LD_EXP 118
38675: NOT
38676: IFFALSE 38711
38678: GO 38680
38680: DISABLE
// begin initMiner := true ;
38681: LD_ADDR_EXP 118
38685: PUSH
38686: LD_INT 1
38688: ST_TO_ADDR
// minersList := [ ] ;
38689: LD_ADDR_EXP 119
38693: PUSH
38694: EMPTY
38695: ST_TO_ADDR
// minerMinesList := [ ] ;
38696: LD_ADDR_EXP 120
38700: PUSH
38701: EMPTY
38702: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38703: LD_ADDR_EXP 121
38707: PUSH
38708: LD_INT 5
38710: ST_TO_ADDR
// end ;
38711: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38712: LD_EXP 118
38716: PUSH
38717: LD_INT 34
38719: PUSH
38720: LD_INT 81
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PPUSH
38727: CALL_OW 69
38731: AND
38732: IFFALSE 39193
38734: GO 38736
38736: DISABLE
38737: LD_INT 0
38739: PPUSH
38740: PPUSH
38741: PPUSH
38742: PPUSH
// begin enable ;
38743: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38744: LD_ADDR_VAR 0 1
38748: PUSH
38749: LD_INT 34
38751: PUSH
38752: LD_INT 81
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PPUSH
38759: CALL_OW 69
38763: PUSH
38764: FOR_IN
38765: IFFALSE 38837
// begin if not i in minersList then
38767: LD_VAR 0 1
38771: PUSH
38772: LD_EXP 119
38776: IN
38777: NOT
38778: IFFALSE 38835
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38780: LD_ADDR_EXP 119
38784: PUSH
38785: LD_EXP 119
38789: PPUSH
38790: LD_EXP 119
38794: PUSH
38795: LD_INT 1
38797: PLUS
38798: PPUSH
38799: LD_VAR 0 1
38803: PPUSH
38804: CALL_OW 1
38808: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38809: LD_ADDR_EXP 120
38813: PUSH
38814: LD_EXP 120
38818: PPUSH
38819: LD_EXP 120
38823: PUSH
38824: LD_INT 1
38826: PLUS
38827: PPUSH
38828: EMPTY
38829: PPUSH
38830: CALL_OW 1
38834: ST_TO_ADDR
// end end ;
38835: GO 38764
38837: POP
38838: POP
// for i := minerMinesList downto 1 do
38839: LD_ADDR_VAR 0 1
38843: PUSH
38844: DOUBLE
38845: LD_EXP 120
38849: INC
38850: ST_TO_ADDR
38851: LD_INT 1
38853: PUSH
38854: FOR_DOWNTO
38855: IFFALSE 39191
// begin if IsLive ( minersList [ i ] ) then
38857: LD_EXP 119
38861: PUSH
38862: LD_VAR 0 1
38866: ARRAY
38867: PPUSH
38868: CALL_OW 300
38872: IFFALSE 38900
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38874: LD_EXP 119
38878: PUSH
38879: LD_VAR 0 1
38883: ARRAY
38884: PPUSH
38885: LD_EXP 120
38889: PUSH
38890: LD_VAR 0 1
38894: ARRAY
38895: PPUSH
38896: CALL_OW 505
// if not minerMinesList [ i ] then
38900: LD_EXP 120
38904: PUSH
38905: LD_VAR 0 1
38909: ARRAY
38910: NOT
38911: IFFALSE 38915
// continue ;
38913: GO 38854
// for j := minerMinesList [ i ] downto 1 do
38915: LD_ADDR_VAR 0 2
38919: PUSH
38920: DOUBLE
38921: LD_EXP 120
38925: PUSH
38926: LD_VAR 0 1
38930: ARRAY
38931: INC
38932: ST_TO_ADDR
38933: LD_INT 1
38935: PUSH
38936: FOR_DOWNTO
38937: IFFALSE 39187
// begin side := GetSide ( minersList [ i ] ) ;
38939: LD_ADDR_VAR 0 3
38943: PUSH
38944: LD_EXP 119
38948: PUSH
38949: LD_VAR 0 1
38953: ARRAY
38954: PPUSH
38955: CALL_OW 255
38959: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38960: LD_ADDR_VAR 0 4
38964: PUSH
38965: LD_EXP 120
38969: PUSH
38970: LD_VAR 0 1
38974: ARRAY
38975: PUSH
38976: LD_VAR 0 2
38980: ARRAY
38981: PUSH
38982: LD_INT 1
38984: ARRAY
38985: PPUSH
38986: LD_EXP 120
38990: PUSH
38991: LD_VAR 0 1
38995: ARRAY
38996: PUSH
38997: LD_VAR 0 2
39001: ARRAY
39002: PUSH
39003: LD_INT 2
39005: ARRAY
39006: PPUSH
39007: CALL_OW 428
39011: ST_TO_ADDR
// if not tmp then
39012: LD_VAR 0 4
39016: NOT
39017: IFFALSE 39021
// continue ;
39019: GO 38936
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39021: LD_VAR 0 4
39025: PUSH
39026: LD_INT 81
39028: PUSH
39029: LD_VAR 0 3
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PPUSH
39038: CALL_OW 69
39042: IN
39043: PUSH
39044: LD_EXP 120
39048: PUSH
39049: LD_VAR 0 1
39053: ARRAY
39054: PUSH
39055: LD_VAR 0 2
39059: ARRAY
39060: PUSH
39061: LD_INT 1
39063: ARRAY
39064: PPUSH
39065: LD_EXP 120
39069: PUSH
39070: LD_VAR 0 1
39074: ARRAY
39075: PUSH
39076: LD_VAR 0 2
39080: ARRAY
39081: PUSH
39082: LD_INT 2
39084: ARRAY
39085: PPUSH
39086: CALL_OW 458
39090: AND
39091: IFFALSE 39185
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39093: LD_EXP 120
39097: PUSH
39098: LD_VAR 0 1
39102: ARRAY
39103: PUSH
39104: LD_VAR 0 2
39108: ARRAY
39109: PUSH
39110: LD_INT 1
39112: ARRAY
39113: PPUSH
39114: LD_EXP 120
39118: PUSH
39119: LD_VAR 0 1
39123: ARRAY
39124: PUSH
39125: LD_VAR 0 2
39129: ARRAY
39130: PUSH
39131: LD_INT 2
39133: ARRAY
39134: PPUSH
39135: LD_VAR 0 3
39139: PPUSH
39140: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39144: LD_ADDR_EXP 120
39148: PUSH
39149: LD_EXP 120
39153: PPUSH
39154: LD_VAR 0 1
39158: PPUSH
39159: LD_EXP 120
39163: PUSH
39164: LD_VAR 0 1
39168: ARRAY
39169: PPUSH
39170: LD_VAR 0 2
39174: PPUSH
39175: CALL_OW 3
39179: PPUSH
39180: CALL_OW 1
39184: ST_TO_ADDR
// end ; end ;
39185: GO 38936
39187: POP
39188: POP
// end ;
39189: GO 38854
39191: POP
39192: POP
// end ;
39193: PPOPN 4
39195: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39196: LD_INT 0
39198: PPUSH
39199: PPUSH
// result := false ;
39200: LD_ADDR_VAR 0 4
39204: PUSH
39205: LD_INT 0
39207: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39208: LD_VAR 0 1
39212: PPUSH
39213: CALL_OW 264
39217: PUSH
39218: LD_INT 81
39220: EQUAL
39221: NOT
39222: IFFALSE 39226
// exit ;
39224: GO 39466
// index := GetElementIndex ( minersList , unit ) ;
39226: LD_ADDR_VAR 0 5
39230: PUSH
39231: LD_EXP 119
39235: PPUSH
39236: LD_VAR 0 1
39240: PPUSH
39241: CALL 45424 0 2
39245: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39246: LD_EXP 120
39250: PUSH
39251: LD_VAR 0 5
39255: ARRAY
39256: PUSH
39257: LD_EXP 121
39261: GREATEREQUAL
39262: IFFALSE 39266
// exit ;
39264: GO 39466
// ComMoveXY ( unit , x , y ) ;
39266: LD_VAR 0 1
39270: PPUSH
39271: LD_VAR 0 2
39275: PPUSH
39276: LD_VAR 0 3
39280: PPUSH
39281: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39285: LD_INT 35
39287: PPUSH
39288: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39292: LD_VAR 0 1
39296: PPUSH
39297: LD_VAR 0 2
39301: PPUSH
39302: LD_VAR 0 3
39306: PPUSH
39307: CALL 77176 0 3
39311: NOT
39312: PUSH
39313: LD_VAR 0 1
39317: PPUSH
39318: CALL_OW 314
39322: AND
39323: IFFALSE 39327
// exit ;
39325: GO 39466
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39327: LD_VAR 0 2
39331: PPUSH
39332: LD_VAR 0 3
39336: PPUSH
39337: CALL_OW 428
39341: PUSH
39342: LD_VAR 0 1
39346: EQUAL
39347: PUSH
39348: LD_VAR 0 1
39352: PPUSH
39353: CALL_OW 314
39357: NOT
39358: AND
39359: IFFALSE 39285
// PlaySoundXY ( x , y , PlantMine ) ;
39361: LD_VAR 0 2
39365: PPUSH
39366: LD_VAR 0 3
39370: PPUSH
39371: LD_STRING PlantMine
39373: PPUSH
39374: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39378: LD_VAR 0 2
39382: PPUSH
39383: LD_VAR 0 3
39387: PPUSH
39388: LD_VAR 0 1
39392: PPUSH
39393: CALL_OW 255
39397: PPUSH
39398: LD_INT 0
39400: PPUSH
39401: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39405: LD_ADDR_EXP 120
39409: PUSH
39410: LD_EXP 120
39414: PPUSH
39415: LD_VAR 0 5
39419: PUSH
39420: LD_EXP 120
39424: PUSH
39425: LD_VAR 0 5
39429: ARRAY
39430: PUSH
39431: LD_INT 1
39433: PLUS
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PPUSH
39439: LD_VAR 0 2
39443: PUSH
39444: LD_VAR 0 3
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PPUSH
39453: CALL 45639 0 3
39457: ST_TO_ADDR
// result := true ;
39458: LD_ADDR_VAR 0 4
39462: PUSH
39463: LD_INT 1
39465: ST_TO_ADDR
// end ;
39466: LD_VAR 0 4
39470: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39471: LD_INT 0
39473: PPUSH
39474: PPUSH
39475: PPUSH
// if not unit in minersList then
39476: LD_VAR 0 1
39480: PUSH
39481: LD_EXP 119
39485: IN
39486: NOT
39487: IFFALSE 39491
// exit ;
39489: GO 39883
// index := GetElementIndex ( minersList , unit ) ;
39491: LD_ADDR_VAR 0 6
39495: PUSH
39496: LD_EXP 119
39500: PPUSH
39501: LD_VAR 0 1
39505: PPUSH
39506: CALL 45424 0 2
39510: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39511: LD_ADDR_VAR 0 5
39515: PUSH
39516: DOUBLE
39517: LD_EXP 120
39521: PUSH
39522: LD_VAR 0 6
39526: ARRAY
39527: INC
39528: ST_TO_ADDR
39529: LD_INT 1
39531: PUSH
39532: FOR_DOWNTO
39533: IFFALSE 39694
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39535: LD_EXP 120
39539: PUSH
39540: LD_VAR 0 6
39544: ARRAY
39545: PUSH
39546: LD_VAR 0 5
39550: ARRAY
39551: PUSH
39552: LD_INT 1
39554: ARRAY
39555: PUSH
39556: LD_VAR 0 2
39560: EQUAL
39561: PUSH
39562: LD_EXP 120
39566: PUSH
39567: LD_VAR 0 6
39571: ARRAY
39572: PUSH
39573: LD_VAR 0 5
39577: ARRAY
39578: PUSH
39579: LD_INT 2
39581: ARRAY
39582: PUSH
39583: LD_VAR 0 3
39587: EQUAL
39588: AND
39589: IFFALSE 39692
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39591: LD_EXP 120
39595: PUSH
39596: LD_VAR 0 6
39600: ARRAY
39601: PUSH
39602: LD_VAR 0 5
39606: ARRAY
39607: PUSH
39608: LD_INT 1
39610: ARRAY
39611: PPUSH
39612: LD_EXP 120
39616: PUSH
39617: LD_VAR 0 6
39621: ARRAY
39622: PUSH
39623: LD_VAR 0 5
39627: ARRAY
39628: PUSH
39629: LD_INT 2
39631: ARRAY
39632: PPUSH
39633: LD_VAR 0 1
39637: PPUSH
39638: CALL_OW 255
39642: PPUSH
39643: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39647: LD_ADDR_EXP 120
39651: PUSH
39652: LD_EXP 120
39656: PPUSH
39657: LD_VAR 0 6
39661: PPUSH
39662: LD_EXP 120
39666: PUSH
39667: LD_VAR 0 6
39671: ARRAY
39672: PPUSH
39673: LD_VAR 0 5
39677: PPUSH
39678: CALL_OW 3
39682: PPUSH
39683: CALL_OW 1
39687: ST_TO_ADDR
// exit ;
39688: POP
39689: POP
39690: GO 39883
// end ; end ;
39692: GO 39532
39694: POP
39695: POP
// for i := minerMinesList [ index ] downto 1 do
39696: LD_ADDR_VAR 0 5
39700: PUSH
39701: DOUBLE
39702: LD_EXP 120
39706: PUSH
39707: LD_VAR 0 6
39711: ARRAY
39712: INC
39713: ST_TO_ADDR
39714: LD_INT 1
39716: PUSH
39717: FOR_DOWNTO
39718: IFFALSE 39881
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39720: LD_EXP 120
39724: PUSH
39725: LD_VAR 0 6
39729: ARRAY
39730: PUSH
39731: LD_VAR 0 5
39735: ARRAY
39736: PUSH
39737: LD_INT 1
39739: ARRAY
39740: PPUSH
39741: LD_EXP 120
39745: PUSH
39746: LD_VAR 0 6
39750: ARRAY
39751: PUSH
39752: LD_VAR 0 5
39756: ARRAY
39757: PUSH
39758: LD_INT 2
39760: ARRAY
39761: PPUSH
39762: LD_VAR 0 2
39766: PPUSH
39767: LD_VAR 0 3
39771: PPUSH
39772: CALL_OW 298
39776: PUSH
39777: LD_INT 6
39779: LESS
39780: IFFALSE 39879
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39782: LD_EXP 120
39786: PUSH
39787: LD_VAR 0 6
39791: ARRAY
39792: PUSH
39793: LD_VAR 0 5
39797: ARRAY
39798: PUSH
39799: LD_INT 1
39801: ARRAY
39802: PPUSH
39803: LD_EXP 120
39807: PUSH
39808: LD_VAR 0 6
39812: ARRAY
39813: PUSH
39814: LD_VAR 0 5
39818: ARRAY
39819: PUSH
39820: LD_INT 2
39822: ARRAY
39823: PPUSH
39824: LD_VAR 0 1
39828: PPUSH
39829: CALL_OW 255
39833: PPUSH
39834: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39838: LD_ADDR_EXP 120
39842: PUSH
39843: LD_EXP 120
39847: PPUSH
39848: LD_VAR 0 6
39852: PPUSH
39853: LD_EXP 120
39857: PUSH
39858: LD_VAR 0 6
39862: ARRAY
39863: PPUSH
39864: LD_VAR 0 5
39868: PPUSH
39869: CALL_OW 3
39873: PPUSH
39874: CALL_OW 1
39878: ST_TO_ADDR
// end ; end ;
39879: GO 39717
39881: POP
39882: POP
// end ;
39883: LD_VAR 0 4
39887: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39888: LD_INT 0
39890: PPUSH
39891: PPUSH
39892: PPUSH
39893: PPUSH
39894: PPUSH
39895: PPUSH
39896: PPUSH
39897: PPUSH
39898: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39899: LD_VAR 0 1
39903: PPUSH
39904: CALL_OW 264
39908: PUSH
39909: LD_INT 81
39911: EQUAL
39912: NOT
39913: PUSH
39914: LD_VAR 0 1
39918: PUSH
39919: LD_EXP 119
39923: IN
39924: NOT
39925: OR
39926: IFFALSE 39930
// exit ;
39928: GO 40252
// index := GetElementIndex ( minersList , unit ) ;
39930: LD_ADDR_VAR 0 6
39934: PUSH
39935: LD_EXP 119
39939: PPUSH
39940: LD_VAR 0 1
39944: PPUSH
39945: CALL 45424 0 2
39949: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39950: LD_ADDR_VAR 0 8
39954: PUSH
39955: LD_EXP 121
39959: PUSH
39960: LD_EXP 120
39964: PUSH
39965: LD_VAR 0 6
39969: ARRAY
39970: MINUS
39971: ST_TO_ADDR
// if not minesFreeAmount then
39972: LD_VAR 0 8
39976: NOT
39977: IFFALSE 39981
// exit ;
39979: GO 40252
// tmp := [ ] ;
39981: LD_ADDR_VAR 0 7
39985: PUSH
39986: EMPTY
39987: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39988: LD_ADDR_VAR 0 5
39992: PUSH
39993: DOUBLE
39994: LD_INT 1
39996: DEC
39997: ST_TO_ADDR
39998: LD_VAR 0 8
40002: PUSH
40003: FOR_TO
40004: IFFALSE 40199
// begin _d := rand ( 0 , 5 ) ;
40006: LD_ADDR_VAR 0 11
40010: PUSH
40011: LD_INT 0
40013: PPUSH
40014: LD_INT 5
40016: PPUSH
40017: CALL_OW 12
40021: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40022: LD_ADDR_VAR 0 12
40026: PUSH
40027: LD_INT 2
40029: PPUSH
40030: LD_INT 6
40032: PPUSH
40033: CALL_OW 12
40037: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40038: LD_ADDR_VAR 0 9
40042: PUSH
40043: LD_VAR 0 2
40047: PPUSH
40048: LD_VAR 0 11
40052: PPUSH
40053: LD_VAR 0 12
40057: PPUSH
40058: CALL_OW 272
40062: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40063: LD_ADDR_VAR 0 10
40067: PUSH
40068: LD_VAR 0 3
40072: PPUSH
40073: LD_VAR 0 11
40077: PPUSH
40078: LD_VAR 0 12
40082: PPUSH
40083: CALL_OW 273
40087: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40088: LD_VAR 0 9
40092: PPUSH
40093: LD_VAR 0 10
40097: PPUSH
40098: CALL_OW 488
40102: PUSH
40103: LD_VAR 0 9
40107: PUSH
40108: LD_VAR 0 10
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_VAR 0 7
40121: IN
40122: NOT
40123: AND
40124: PUSH
40125: LD_VAR 0 9
40129: PPUSH
40130: LD_VAR 0 10
40134: PPUSH
40135: CALL_OW 458
40139: NOT
40140: AND
40141: IFFALSE 40183
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40143: LD_ADDR_VAR 0 7
40147: PUSH
40148: LD_VAR 0 7
40152: PPUSH
40153: LD_VAR 0 7
40157: PUSH
40158: LD_INT 1
40160: PLUS
40161: PPUSH
40162: LD_VAR 0 9
40166: PUSH
40167: LD_VAR 0 10
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PPUSH
40176: CALL_OW 1
40180: ST_TO_ADDR
40181: GO 40197
// i := i - 1 ;
40183: LD_ADDR_VAR 0 5
40187: PUSH
40188: LD_VAR 0 5
40192: PUSH
40193: LD_INT 1
40195: MINUS
40196: ST_TO_ADDR
// end ;
40197: GO 40003
40199: POP
40200: POP
// for i in tmp do
40201: LD_ADDR_VAR 0 5
40205: PUSH
40206: LD_VAR 0 7
40210: PUSH
40211: FOR_IN
40212: IFFALSE 40250
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40214: LD_VAR 0 1
40218: PPUSH
40219: LD_VAR 0 5
40223: PUSH
40224: LD_INT 1
40226: ARRAY
40227: PPUSH
40228: LD_VAR 0 5
40232: PUSH
40233: LD_INT 2
40235: ARRAY
40236: PPUSH
40237: CALL 39196 0 3
40241: NOT
40242: IFFALSE 40248
// exit ;
40244: POP
40245: POP
40246: GO 40252
40248: GO 40211
40250: POP
40251: POP
// end ;
40252: LD_VAR 0 4
40256: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
40257: LD_INT 0
40259: PPUSH
40260: PPUSH
40261: PPUSH
40262: PPUSH
40263: PPUSH
40264: PPUSH
40265: PPUSH
// if not GetClass ( unit ) = class_sniper then
40266: LD_VAR 0 1
40270: PPUSH
40271: CALL_OW 257
40275: PUSH
40276: LD_INT 5
40278: EQUAL
40279: NOT
40280: IFFALSE 40284
// exit ;
40282: GO 40672
// dist := 8 ;
40284: LD_ADDR_VAR 0 5
40288: PUSH
40289: LD_INT 8
40291: ST_TO_ADDR
// viewRange := 12 ;
40292: LD_ADDR_VAR 0 7
40296: PUSH
40297: LD_INT 12
40299: ST_TO_ADDR
// side := GetSide ( unit ) ;
40300: LD_ADDR_VAR 0 6
40304: PUSH
40305: LD_VAR 0 1
40309: PPUSH
40310: CALL_OW 255
40314: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40315: LD_INT 61
40317: PPUSH
40318: LD_VAR 0 6
40322: PPUSH
40323: CALL_OW 321
40327: PUSH
40328: LD_INT 2
40330: EQUAL
40331: IFFALSE 40341
// viewRange := 16 ;
40333: LD_ADDR_VAR 0 7
40337: PUSH
40338: LD_INT 16
40340: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40341: LD_VAR 0 1
40345: PPUSH
40346: LD_VAR 0 2
40350: PPUSH
40351: LD_VAR 0 3
40355: PPUSH
40356: CALL_OW 297
40360: PUSH
40361: LD_VAR 0 5
40365: GREATER
40366: IFFALSE 40445
// begin ComMoveXY ( unit , x , y ) ;
40368: LD_VAR 0 1
40372: PPUSH
40373: LD_VAR 0 2
40377: PPUSH
40378: LD_VAR 0 3
40382: PPUSH
40383: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40387: LD_INT 35
40389: PPUSH
40390: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40394: LD_VAR 0 1
40398: PPUSH
40399: LD_VAR 0 2
40403: PPUSH
40404: LD_VAR 0 3
40408: PPUSH
40409: CALL 77176 0 3
40413: NOT
40414: IFFALSE 40418
// exit ;
40416: GO 40672
// until GetDistUnitXY ( unit , x , y ) < dist ;
40418: LD_VAR 0 1
40422: PPUSH
40423: LD_VAR 0 2
40427: PPUSH
40428: LD_VAR 0 3
40432: PPUSH
40433: CALL_OW 297
40437: PUSH
40438: LD_VAR 0 5
40442: LESS
40443: IFFALSE 40387
// end ; ComTurnXY ( unit , x , y ) ;
40445: LD_VAR 0 1
40449: PPUSH
40450: LD_VAR 0 2
40454: PPUSH
40455: LD_VAR 0 3
40459: PPUSH
40460: CALL_OW 118
// wait ( 5 ) ;
40464: LD_INT 5
40466: PPUSH
40467: CALL_OW 67
// _d := GetDir ( unit ) ;
40471: LD_ADDR_VAR 0 10
40475: PUSH
40476: LD_VAR 0 1
40480: PPUSH
40481: CALL_OW 254
40485: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
40486: LD_ADDR_VAR 0 8
40490: PUSH
40491: LD_VAR 0 1
40495: PPUSH
40496: CALL_OW 250
40500: PPUSH
40501: LD_VAR 0 10
40505: PPUSH
40506: LD_VAR 0 5
40510: PPUSH
40511: CALL_OW 272
40515: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
40516: LD_ADDR_VAR 0 9
40520: PUSH
40521: LD_VAR 0 1
40525: PPUSH
40526: CALL_OW 251
40530: PPUSH
40531: LD_VAR 0 10
40535: PPUSH
40536: LD_VAR 0 5
40540: PPUSH
40541: CALL_OW 273
40545: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40546: LD_VAR 0 8
40550: PPUSH
40551: LD_VAR 0 9
40555: PPUSH
40556: CALL_OW 488
40560: NOT
40561: IFFALSE 40565
// exit ;
40563: GO 40672
// ComAnimCustom ( unit , 1 ) ;
40565: LD_VAR 0 1
40569: PPUSH
40570: LD_INT 1
40572: PPUSH
40573: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40577: LD_VAR 0 8
40581: PPUSH
40582: LD_VAR 0 9
40586: PPUSH
40587: LD_VAR 0 6
40591: PPUSH
40592: LD_VAR 0 7
40596: PPUSH
40597: CALL_OW 330
// repeat wait ( 1 ) ;
40601: LD_INT 1
40603: PPUSH
40604: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40608: LD_VAR 0 1
40612: PPUSH
40613: CALL_OW 316
40617: PUSH
40618: LD_VAR 0 1
40622: PPUSH
40623: CALL_OW 314
40627: OR
40628: PUSH
40629: LD_VAR 0 1
40633: PPUSH
40634: CALL_OW 302
40638: NOT
40639: OR
40640: PUSH
40641: LD_VAR 0 1
40645: PPUSH
40646: CALL_OW 301
40650: OR
40651: IFFALSE 40601
// RemoveSeeing ( _x , _y , side ) ;
40653: LD_VAR 0 8
40657: PPUSH
40658: LD_VAR 0 9
40662: PPUSH
40663: LD_VAR 0 6
40667: PPUSH
40668: CALL_OW 331
// end ; end_of_file
40672: LD_VAR 0 4
40676: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40677: LD_INT 0
40679: PPUSH
40680: PPUSH
// if exist_mode then
40681: LD_VAR 0 2
40685: IFFALSE 40710
// unit := CreateCharacter ( prefix & ident ) else
40687: LD_ADDR_VAR 0 5
40691: PUSH
40692: LD_VAR 0 3
40696: PUSH
40697: LD_VAR 0 1
40701: STR
40702: PPUSH
40703: CALL_OW 34
40707: ST_TO_ADDR
40708: GO 40725
// unit := NewCharacter ( ident ) ;
40710: LD_ADDR_VAR 0 5
40714: PUSH
40715: LD_VAR 0 1
40719: PPUSH
40720: CALL_OW 25
40724: ST_TO_ADDR
// result := unit ;
40725: LD_ADDR_VAR 0 4
40729: PUSH
40730: LD_VAR 0 5
40734: ST_TO_ADDR
// end ;
40735: LD_VAR 0 4
40739: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40740: LD_INT 0
40742: PPUSH
40743: PPUSH
// if not side or not nation then
40744: LD_VAR 0 1
40748: NOT
40749: PUSH
40750: LD_VAR 0 2
40754: NOT
40755: OR
40756: IFFALSE 40760
// exit ;
40758: GO 41528
// case nation of nation_american :
40760: LD_VAR 0 2
40764: PUSH
40765: LD_INT 1
40767: DOUBLE
40768: EQUAL
40769: IFTRUE 40773
40771: GO 40987
40773: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40774: LD_ADDR_VAR 0 4
40778: PUSH
40779: LD_INT 35
40781: PUSH
40782: LD_INT 45
40784: PUSH
40785: LD_INT 46
40787: PUSH
40788: LD_INT 47
40790: PUSH
40791: LD_INT 82
40793: PUSH
40794: LD_INT 83
40796: PUSH
40797: LD_INT 84
40799: PUSH
40800: LD_INT 85
40802: PUSH
40803: LD_INT 86
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: LD_INT 2
40811: PUSH
40812: LD_INT 6
40814: PUSH
40815: LD_INT 15
40817: PUSH
40818: LD_INT 16
40820: PUSH
40821: LD_INT 7
40823: PUSH
40824: LD_INT 12
40826: PUSH
40827: LD_INT 13
40829: PUSH
40830: LD_INT 10
40832: PUSH
40833: LD_INT 14
40835: PUSH
40836: LD_INT 20
40838: PUSH
40839: LD_INT 21
40841: PUSH
40842: LD_INT 22
40844: PUSH
40845: LD_INT 25
40847: PUSH
40848: LD_INT 32
40850: PUSH
40851: LD_INT 27
40853: PUSH
40854: LD_INT 36
40856: PUSH
40857: LD_INT 69
40859: PUSH
40860: LD_INT 39
40862: PUSH
40863: LD_INT 34
40865: PUSH
40866: LD_INT 40
40868: PUSH
40869: LD_INT 48
40871: PUSH
40872: LD_INT 49
40874: PUSH
40875: LD_INT 50
40877: PUSH
40878: LD_INT 51
40880: PUSH
40881: LD_INT 52
40883: PUSH
40884: LD_INT 53
40886: PUSH
40887: LD_INT 54
40889: PUSH
40890: LD_INT 55
40892: PUSH
40893: LD_INT 56
40895: PUSH
40896: LD_INT 57
40898: PUSH
40899: LD_INT 58
40901: PUSH
40902: LD_INT 59
40904: PUSH
40905: LD_INT 60
40907: PUSH
40908: LD_INT 61
40910: PUSH
40911: LD_INT 62
40913: PUSH
40914: LD_INT 80
40916: PUSH
40917: LD_INT 82
40919: PUSH
40920: LD_INT 83
40922: PUSH
40923: LD_INT 84
40925: PUSH
40926: LD_INT 85
40928: PUSH
40929: LD_INT 86
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: ST_TO_ADDR
40985: GO 41452
40987: LD_INT 2
40989: DOUBLE
40990: EQUAL
40991: IFTRUE 40995
40993: GO 41221
40995: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40996: LD_ADDR_VAR 0 4
41000: PUSH
41001: LD_INT 35
41003: PUSH
41004: LD_INT 45
41006: PUSH
41007: LD_INT 46
41009: PUSH
41010: LD_INT 47
41012: PUSH
41013: LD_INT 82
41015: PUSH
41016: LD_INT 83
41018: PUSH
41019: LD_INT 84
41021: PUSH
41022: LD_INT 85
41024: PUSH
41025: LD_INT 87
41027: PUSH
41028: LD_INT 70
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: LD_INT 11
41036: PUSH
41037: LD_INT 3
41039: PUSH
41040: LD_INT 4
41042: PUSH
41043: LD_INT 5
41045: PUSH
41046: LD_INT 6
41048: PUSH
41049: LD_INT 15
41051: PUSH
41052: LD_INT 18
41054: PUSH
41055: LD_INT 7
41057: PUSH
41058: LD_INT 17
41060: PUSH
41061: LD_INT 8
41063: PUSH
41064: LD_INT 20
41066: PUSH
41067: LD_INT 21
41069: PUSH
41070: LD_INT 22
41072: PUSH
41073: LD_INT 72
41075: PUSH
41076: LD_INT 26
41078: PUSH
41079: LD_INT 69
41081: PUSH
41082: LD_INT 39
41084: PUSH
41085: LD_INT 40
41087: PUSH
41088: LD_INT 41
41090: PUSH
41091: LD_INT 42
41093: PUSH
41094: LD_INT 43
41096: PUSH
41097: LD_INT 48
41099: PUSH
41100: LD_INT 49
41102: PUSH
41103: LD_INT 50
41105: PUSH
41106: LD_INT 51
41108: PUSH
41109: LD_INT 52
41111: PUSH
41112: LD_INT 53
41114: PUSH
41115: LD_INT 54
41117: PUSH
41118: LD_INT 55
41120: PUSH
41121: LD_INT 56
41123: PUSH
41124: LD_INT 60
41126: PUSH
41127: LD_INT 61
41129: PUSH
41130: LD_INT 62
41132: PUSH
41133: LD_INT 66
41135: PUSH
41136: LD_INT 67
41138: PUSH
41139: LD_INT 68
41141: PUSH
41142: LD_INT 81
41144: PUSH
41145: LD_INT 82
41147: PUSH
41148: LD_INT 83
41150: PUSH
41151: LD_INT 84
41153: PUSH
41154: LD_INT 85
41156: PUSH
41157: LD_INT 87
41159: PUSH
41160: LD_INT 88
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: ST_TO_ADDR
41219: GO 41452
41221: LD_INT 3
41223: DOUBLE
41224: EQUAL
41225: IFTRUE 41229
41227: GO 41451
41229: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41230: LD_ADDR_VAR 0 4
41234: PUSH
41235: LD_INT 46
41237: PUSH
41238: LD_INT 47
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: LD_INT 82
41249: PUSH
41250: LD_INT 83
41252: PUSH
41253: LD_INT 84
41255: PUSH
41256: LD_INT 85
41258: PUSH
41259: LD_INT 86
41261: PUSH
41262: LD_INT 11
41264: PUSH
41265: LD_INT 9
41267: PUSH
41268: LD_INT 20
41270: PUSH
41271: LD_INT 19
41273: PUSH
41274: LD_INT 21
41276: PUSH
41277: LD_INT 24
41279: PUSH
41280: LD_INT 22
41282: PUSH
41283: LD_INT 25
41285: PUSH
41286: LD_INT 28
41288: PUSH
41289: LD_INT 29
41291: PUSH
41292: LD_INT 30
41294: PUSH
41295: LD_INT 31
41297: PUSH
41298: LD_INT 37
41300: PUSH
41301: LD_INT 38
41303: PUSH
41304: LD_INT 32
41306: PUSH
41307: LD_INT 27
41309: PUSH
41310: LD_INT 33
41312: PUSH
41313: LD_INT 69
41315: PUSH
41316: LD_INT 39
41318: PUSH
41319: LD_INT 34
41321: PUSH
41322: LD_INT 40
41324: PUSH
41325: LD_INT 71
41327: PUSH
41328: LD_INT 23
41330: PUSH
41331: LD_INT 44
41333: PUSH
41334: LD_INT 48
41336: PUSH
41337: LD_INT 49
41339: PUSH
41340: LD_INT 50
41342: PUSH
41343: LD_INT 51
41345: PUSH
41346: LD_INT 52
41348: PUSH
41349: LD_INT 53
41351: PUSH
41352: LD_INT 54
41354: PUSH
41355: LD_INT 55
41357: PUSH
41358: LD_INT 56
41360: PUSH
41361: LD_INT 57
41363: PUSH
41364: LD_INT 58
41366: PUSH
41367: LD_INT 59
41369: PUSH
41370: LD_INT 63
41372: PUSH
41373: LD_INT 64
41375: PUSH
41376: LD_INT 65
41378: PUSH
41379: LD_INT 82
41381: PUSH
41382: LD_INT 83
41384: PUSH
41385: LD_INT 84
41387: PUSH
41388: LD_INT 85
41390: PUSH
41391: LD_INT 86
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: ST_TO_ADDR
41449: GO 41452
41451: POP
// if state > - 1 and state < 3 then
41452: LD_VAR 0 3
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: GREATER
41461: PUSH
41462: LD_VAR 0 3
41466: PUSH
41467: LD_INT 3
41469: LESS
41470: AND
41471: IFFALSE 41528
// for i in result do
41473: LD_ADDR_VAR 0 5
41477: PUSH
41478: LD_VAR 0 4
41482: PUSH
41483: FOR_IN
41484: IFFALSE 41526
// if GetTech ( i , side ) <> state then
41486: LD_VAR 0 5
41490: PPUSH
41491: LD_VAR 0 1
41495: PPUSH
41496: CALL_OW 321
41500: PUSH
41501: LD_VAR 0 3
41505: NONEQUAL
41506: IFFALSE 41524
// result := result diff i ;
41508: LD_ADDR_VAR 0 4
41512: PUSH
41513: LD_VAR 0 4
41517: PUSH
41518: LD_VAR 0 5
41522: DIFF
41523: ST_TO_ADDR
41524: GO 41483
41526: POP
41527: POP
// end ;
41528: LD_VAR 0 4
41532: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41533: LD_INT 0
41535: PPUSH
41536: PPUSH
41537: PPUSH
// result := true ;
41538: LD_ADDR_VAR 0 3
41542: PUSH
41543: LD_INT 1
41545: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41546: LD_ADDR_VAR 0 5
41550: PUSH
41551: LD_VAR 0 2
41555: PPUSH
41556: CALL_OW 480
41560: ST_TO_ADDR
// if not tmp then
41561: LD_VAR 0 5
41565: NOT
41566: IFFALSE 41570
// exit ;
41568: GO 41619
// for i in tmp do
41570: LD_ADDR_VAR 0 4
41574: PUSH
41575: LD_VAR 0 5
41579: PUSH
41580: FOR_IN
41581: IFFALSE 41617
// if GetTech ( i , side ) <> state_researched then
41583: LD_VAR 0 4
41587: PPUSH
41588: LD_VAR 0 1
41592: PPUSH
41593: CALL_OW 321
41597: PUSH
41598: LD_INT 2
41600: NONEQUAL
41601: IFFALSE 41615
// begin result := false ;
41603: LD_ADDR_VAR 0 3
41607: PUSH
41608: LD_INT 0
41610: ST_TO_ADDR
// exit ;
41611: POP
41612: POP
41613: GO 41619
// end ;
41615: GO 41580
41617: POP
41618: POP
// end ;
41619: LD_VAR 0 3
41623: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41624: LD_INT 0
41626: PPUSH
41627: PPUSH
41628: PPUSH
41629: PPUSH
41630: PPUSH
41631: PPUSH
41632: PPUSH
41633: PPUSH
41634: PPUSH
41635: PPUSH
41636: PPUSH
41637: PPUSH
41638: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41639: LD_VAR 0 1
41643: NOT
41644: PUSH
41645: LD_VAR 0 1
41649: PPUSH
41650: CALL_OW 257
41654: PUSH
41655: LD_INT 9
41657: NONEQUAL
41658: OR
41659: IFFALSE 41663
// exit ;
41661: GO 42236
// side := GetSide ( unit ) ;
41663: LD_ADDR_VAR 0 9
41667: PUSH
41668: LD_VAR 0 1
41672: PPUSH
41673: CALL_OW 255
41677: ST_TO_ADDR
// tech_space := tech_spacanom ;
41678: LD_ADDR_VAR 0 12
41682: PUSH
41683: LD_INT 29
41685: ST_TO_ADDR
// tech_time := tech_taurad ;
41686: LD_ADDR_VAR 0 13
41690: PUSH
41691: LD_INT 28
41693: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41694: LD_ADDR_VAR 0 11
41698: PUSH
41699: LD_VAR 0 1
41703: PPUSH
41704: CALL_OW 310
41708: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41709: LD_VAR 0 11
41713: PPUSH
41714: CALL_OW 247
41718: PUSH
41719: LD_INT 2
41721: EQUAL
41722: IFFALSE 41726
// exit ;
41724: GO 42236
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41726: LD_ADDR_VAR 0 8
41730: PUSH
41731: LD_INT 81
41733: PUSH
41734: LD_VAR 0 9
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 3
41745: PUSH
41746: LD_INT 21
41748: PUSH
41749: LD_INT 3
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PPUSH
41764: CALL_OW 69
41768: ST_TO_ADDR
// if not tmp then
41769: LD_VAR 0 8
41773: NOT
41774: IFFALSE 41778
// exit ;
41776: GO 42236
// if in_unit then
41778: LD_VAR 0 11
41782: IFFALSE 41806
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41784: LD_ADDR_VAR 0 10
41788: PUSH
41789: LD_VAR 0 8
41793: PPUSH
41794: LD_VAR 0 11
41798: PPUSH
41799: CALL_OW 74
41803: ST_TO_ADDR
41804: GO 41826
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41806: LD_ADDR_VAR 0 10
41810: PUSH
41811: LD_VAR 0 8
41815: PPUSH
41816: LD_VAR 0 1
41820: PPUSH
41821: CALL_OW 74
41825: ST_TO_ADDR
// if not enemy then
41826: LD_VAR 0 10
41830: NOT
41831: IFFALSE 41835
// exit ;
41833: GO 42236
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41835: LD_VAR 0 11
41839: PUSH
41840: LD_VAR 0 11
41844: PPUSH
41845: LD_VAR 0 10
41849: PPUSH
41850: CALL_OW 296
41854: PUSH
41855: LD_INT 13
41857: GREATER
41858: AND
41859: PUSH
41860: LD_VAR 0 1
41864: PPUSH
41865: LD_VAR 0 10
41869: PPUSH
41870: CALL_OW 296
41874: PUSH
41875: LD_INT 12
41877: GREATER
41878: OR
41879: IFFALSE 41883
// exit ;
41881: GO 42236
// missile := [ 1 ] ;
41883: LD_ADDR_VAR 0 14
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: EMPTY
41892: LIST
41893: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41894: LD_VAR 0 9
41898: PPUSH
41899: LD_VAR 0 12
41903: PPUSH
41904: CALL_OW 325
41908: IFFALSE 41937
// missile := Replace ( missile , missile + 1 , 2 ) ;
41910: LD_ADDR_VAR 0 14
41914: PUSH
41915: LD_VAR 0 14
41919: PPUSH
41920: LD_VAR 0 14
41924: PUSH
41925: LD_INT 1
41927: PLUS
41928: PPUSH
41929: LD_INT 2
41931: PPUSH
41932: CALL_OW 1
41936: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41937: LD_VAR 0 9
41941: PPUSH
41942: LD_VAR 0 13
41946: PPUSH
41947: CALL_OW 325
41951: PUSH
41952: LD_VAR 0 10
41956: PPUSH
41957: CALL_OW 255
41961: PPUSH
41962: LD_VAR 0 13
41966: PPUSH
41967: CALL_OW 325
41971: NOT
41972: AND
41973: IFFALSE 42002
// missile := Replace ( missile , missile + 1 , 3 ) ;
41975: LD_ADDR_VAR 0 14
41979: PUSH
41980: LD_VAR 0 14
41984: PPUSH
41985: LD_VAR 0 14
41989: PUSH
41990: LD_INT 1
41992: PLUS
41993: PPUSH
41994: LD_INT 3
41996: PPUSH
41997: CALL_OW 1
42001: ST_TO_ADDR
// if missile < 2 then
42002: LD_VAR 0 14
42006: PUSH
42007: LD_INT 2
42009: LESS
42010: IFFALSE 42014
// exit ;
42012: GO 42236
// x := GetX ( enemy ) ;
42014: LD_ADDR_VAR 0 4
42018: PUSH
42019: LD_VAR 0 10
42023: PPUSH
42024: CALL_OW 250
42028: ST_TO_ADDR
// y := GetY ( enemy ) ;
42029: LD_ADDR_VAR 0 5
42033: PUSH
42034: LD_VAR 0 10
42038: PPUSH
42039: CALL_OW 251
42043: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42044: LD_ADDR_VAR 0 6
42048: PUSH
42049: LD_VAR 0 4
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PPUSH
42058: LD_INT 1
42060: PPUSH
42061: CALL_OW 12
42065: PLUS
42066: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42067: LD_ADDR_VAR 0 7
42071: PUSH
42072: LD_VAR 0 5
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PPUSH
42081: LD_INT 1
42083: PPUSH
42084: CALL_OW 12
42088: PLUS
42089: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42090: LD_VAR 0 6
42094: PPUSH
42095: LD_VAR 0 7
42099: PPUSH
42100: CALL_OW 488
42104: NOT
42105: IFFALSE 42127
// begin _x := x ;
42107: LD_ADDR_VAR 0 6
42111: PUSH
42112: LD_VAR 0 4
42116: ST_TO_ADDR
// _y := y ;
42117: LD_ADDR_VAR 0 7
42121: PUSH
42122: LD_VAR 0 5
42126: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42127: LD_ADDR_VAR 0 3
42131: PUSH
42132: LD_INT 1
42134: PPUSH
42135: LD_VAR 0 14
42139: PPUSH
42140: CALL_OW 12
42144: ST_TO_ADDR
// case i of 1 :
42145: LD_VAR 0 3
42149: PUSH
42150: LD_INT 1
42152: DOUBLE
42153: EQUAL
42154: IFTRUE 42158
42156: GO 42175
42158: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42159: LD_VAR 0 1
42163: PPUSH
42164: LD_VAR 0 10
42168: PPUSH
42169: CALL_OW 115
42173: GO 42236
42175: LD_INT 2
42177: DOUBLE
42178: EQUAL
42179: IFTRUE 42183
42181: GO 42205
42183: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42184: LD_VAR 0 1
42188: PPUSH
42189: LD_VAR 0 6
42193: PPUSH
42194: LD_VAR 0 7
42198: PPUSH
42199: CALL_OW 153
42203: GO 42236
42205: LD_INT 3
42207: DOUBLE
42208: EQUAL
42209: IFTRUE 42213
42211: GO 42235
42213: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42214: LD_VAR 0 1
42218: PPUSH
42219: LD_VAR 0 6
42223: PPUSH
42224: LD_VAR 0 7
42228: PPUSH
42229: CALL_OW 154
42233: GO 42236
42235: POP
// end ;
42236: LD_VAR 0 2
42240: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42241: LD_INT 0
42243: PPUSH
42244: PPUSH
42245: PPUSH
42246: PPUSH
42247: PPUSH
42248: PPUSH
// if not unit or not building then
42249: LD_VAR 0 1
42253: NOT
42254: PUSH
42255: LD_VAR 0 2
42259: NOT
42260: OR
42261: IFFALSE 42265
// exit ;
42263: GO 42423
// x := GetX ( building ) ;
42265: LD_ADDR_VAR 0 5
42269: PUSH
42270: LD_VAR 0 2
42274: PPUSH
42275: CALL_OW 250
42279: ST_TO_ADDR
// y := GetY ( building ) ;
42280: LD_ADDR_VAR 0 6
42284: PUSH
42285: LD_VAR 0 2
42289: PPUSH
42290: CALL_OW 251
42294: ST_TO_ADDR
// for i = 0 to 5 do
42295: LD_ADDR_VAR 0 4
42299: PUSH
42300: DOUBLE
42301: LD_INT 0
42303: DEC
42304: ST_TO_ADDR
42305: LD_INT 5
42307: PUSH
42308: FOR_TO
42309: IFFALSE 42421
// begin _x := ShiftX ( x , i , 3 ) ;
42311: LD_ADDR_VAR 0 7
42315: PUSH
42316: LD_VAR 0 5
42320: PPUSH
42321: LD_VAR 0 4
42325: PPUSH
42326: LD_INT 3
42328: PPUSH
42329: CALL_OW 272
42333: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42334: LD_ADDR_VAR 0 8
42338: PUSH
42339: LD_VAR 0 6
42343: PPUSH
42344: LD_VAR 0 4
42348: PPUSH
42349: LD_INT 3
42351: PPUSH
42352: CALL_OW 273
42356: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42357: LD_VAR 0 7
42361: PPUSH
42362: LD_VAR 0 8
42366: PPUSH
42367: CALL_OW 488
42371: NOT
42372: IFFALSE 42376
// continue ;
42374: GO 42308
// if HexInfo ( _x , _y ) = 0 then
42376: LD_VAR 0 7
42380: PPUSH
42381: LD_VAR 0 8
42385: PPUSH
42386: CALL_OW 428
42390: PUSH
42391: LD_INT 0
42393: EQUAL
42394: IFFALSE 42419
// begin ComMoveXY ( unit , _x , _y ) ;
42396: LD_VAR 0 1
42400: PPUSH
42401: LD_VAR 0 7
42405: PPUSH
42406: LD_VAR 0 8
42410: PPUSH
42411: CALL_OW 111
// exit ;
42415: POP
42416: POP
42417: GO 42423
// end ; end ;
42419: GO 42308
42421: POP
42422: POP
// end ;
42423: LD_VAR 0 3
42427: RET
// export function ScanBase ( side , base_area ) ; begin
42428: LD_INT 0
42430: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42431: LD_ADDR_VAR 0 3
42435: PUSH
42436: LD_VAR 0 2
42440: PPUSH
42441: LD_INT 81
42443: PUSH
42444: LD_VAR 0 1
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PPUSH
42453: CALL_OW 70
42457: ST_TO_ADDR
// end ;
42458: LD_VAR 0 3
42462: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42463: LD_INT 0
42465: PPUSH
42466: PPUSH
42467: PPUSH
42468: PPUSH
// result := false ;
42469: LD_ADDR_VAR 0 2
42473: PUSH
42474: LD_INT 0
42476: ST_TO_ADDR
// side := GetSide ( unit ) ;
42477: LD_ADDR_VAR 0 3
42481: PUSH
42482: LD_VAR 0 1
42486: PPUSH
42487: CALL_OW 255
42491: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42492: LD_ADDR_VAR 0 4
42496: PUSH
42497: LD_VAR 0 1
42501: PPUSH
42502: CALL_OW 248
42506: ST_TO_ADDR
// case nat of 1 :
42507: LD_VAR 0 4
42511: PUSH
42512: LD_INT 1
42514: DOUBLE
42515: EQUAL
42516: IFTRUE 42520
42518: GO 42531
42520: POP
// tech := tech_lassight ; 2 :
42521: LD_ADDR_VAR 0 5
42525: PUSH
42526: LD_INT 12
42528: ST_TO_ADDR
42529: GO 42570
42531: LD_INT 2
42533: DOUBLE
42534: EQUAL
42535: IFTRUE 42539
42537: GO 42550
42539: POP
// tech := tech_mortar ; 3 :
42540: LD_ADDR_VAR 0 5
42544: PUSH
42545: LD_INT 41
42547: ST_TO_ADDR
42548: GO 42570
42550: LD_INT 3
42552: DOUBLE
42553: EQUAL
42554: IFTRUE 42558
42556: GO 42569
42558: POP
// tech := tech_bazooka ; end ;
42559: LD_ADDR_VAR 0 5
42563: PUSH
42564: LD_INT 44
42566: ST_TO_ADDR
42567: GO 42570
42569: POP
// if Researched ( side , tech ) then
42570: LD_VAR 0 3
42574: PPUSH
42575: LD_VAR 0 5
42579: PPUSH
42580: CALL_OW 325
42584: IFFALSE 42611
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42586: LD_ADDR_VAR 0 2
42590: PUSH
42591: LD_INT 5
42593: PUSH
42594: LD_INT 8
42596: PUSH
42597: LD_INT 9
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: PUSH
42605: LD_VAR 0 4
42609: ARRAY
42610: ST_TO_ADDR
// end ;
42611: LD_VAR 0 2
42615: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42616: LD_INT 0
42618: PPUSH
42619: PPUSH
42620: PPUSH
// if not mines then
42621: LD_VAR 0 2
42625: NOT
42626: IFFALSE 42630
// exit ;
42628: GO 42774
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42630: LD_ADDR_VAR 0 5
42634: PUSH
42635: LD_INT 81
42637: PUSH
42638: LD_VAR 0 1
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 3
42649: PUSH
42650: LD_INT 21
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PPUSH
42668: CALL_OW 69
42672: ST_TO_ADDR
// for i in mines do
42673: LD_ADDR_VAR 0 4
42677: PUSH
42678: LD_VAR 0 2
42682: PUSH
42683: FOR_IN
42684: IFFALSE 42772
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42686: LD_VAR 0 4
42690: PUSH
42691: LD_INT 1
42693: ARRAY
42694: PPUSH
42695: LD_VAR 0 4
42699: PUSH
42700: LD_INT 2
42702: ARRAY
42703: PPUSH
42704: CALL_OW 458
42708: NOT
42709: IFFALSE 42713
// continue ;
42711: GO 42683
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42713: LD_VAR 0 4
42717: PUSH
42718: LD_INT 1
42720: ARRAY
42721: PPUSH
42722: LD_VAR 0 4
42726: PUSH
42727: LD_INT 2
42729: ARRAY
42730: PPUSH
42731: CALL_OW 428
42735: PUSH
42736: LD_VAR 0 5
42740: IN
42741: IFFALSE 42770
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42743: LD_VAR 0 4
42747: PUSH
42748: LD_INT 1
42750: ARRAY
42751: PPUSH
42752: LD_VAR 0 4
42756: PUSH
42757: LD_INT 2
42759: ARRAY
42760: PPUSH
42761: LD_VAR 0 1
42765: PPUSH
42766: CALL_OW 456
// end ;
42770: GO 42683
42772: POP
42773: POP
// end ;
42774: LD_VAR 0 3
42778: RET
// export function Count ( array ) ; begin
42779: LD_INT 0
42781: PPUSH
// result := array + 0 ;
42782: LD_ADDR_VAR 0 2
42786: PUSH
42787: LD_VAR 0 1
42791: PUSH
42792: LD_INT 0
42794: PLUS
42795: ST_TO_ADDR
// end ;
42796: LD_VAR 0 2
42800: RET
// export function IsEmpty ( building ) ; begin
42801: LD_INT 0
42803: PPUSH
// if not building then
42804: LD_VAR 0 1
42808: NOT
42809: IFFALSE 42813
// exit ;
42811: GO 42856
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42813: LD_ADDR_VAR 0 2
42817: PUSH
42818: LD_VAR 0 1
42822: PUSH
42823: LD_INT 22
42825: PUSH
42826: LD_VAR 0 1
42830: PPUSH
42831: CALL_OW 255
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 58
42842: PUSH
42843: EMPTY
42844: LIST
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PPUSH
42850: CALL_OW 69
42854: IN
42855: ST_TO_ADDR
// end ;
42856: LD_VAR 0 2
42860: RET
// export function IsNotFull ( building ) ; var places ; begin
42861: LD_INT 0
42863: PPUSH
42864: PPUSH
// if not building then
42865: LD_VAR 0 1
42869: NOT
42870: IFFALSE 42874
// exit ;
42872: GO 42902
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42874: LD_ADDR_VAR 0 2
42878: PUSH
42879: LD_VAR 0 1
42883: PPUSH
42884: LD_INT 3
42886: PUSH
42887: LD_INT 62
42889: PUSH
42890: EMPTY
42891: LIST
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PPUSH
42897: CALL_OW 72
42901: ST_TO_ADDR
// end ;
42902: LD_VAR 0 2
42906: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42907: LD_INT 0
42909: PPUSH
42910: PPUSH
42911: PPUSH
42912: PPUSH
// tmp := [ ] ;
42913: LD_ADDR_VAR 0 3
42917: PUSH
42918: EMPTY
42919: ST_TO_ADDR
// list := [ ] ;
42920: LD_ADDR_VAR 0 5
42924: PUSH
42925: EMPTY
42926: ST_TO_ADDR
// for i = 16 to 25 do
42927: LD_ADDR_VAR 0 4
42931: PUSH
42932: DOUBLE
42933: LD_INT 16
42935: DEC
42936: ST_TO_ADDR
42937: LD_INT 25
42939: PUSH
42940: FOR_TO
42941: IFFALSE 43014
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42943: LD_ADDR_VAR 0 3
42947: PUSH
42948: LD_VAR 0 3
42952: PUSH
42953: LD_INT 22
42955: PUSH
42956: LD_VAR 0 1
42960: PPUSH
42961: CALL_OW 255
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 91
42972: PUSH
42973: LD_VAR 0 1
42977: PUSH
42978: LD_INT 6
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 30
42988: PUSH
42989: LD_VAR 0 4
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: PUSH
43003: EMPTY
43004: LIST
43005: PPUSH
43006: CALL_OW 69
43010: ADD
43011: ST_TO_ADDR
43012: GO 42940
43014: POP
43015: POP
// for i = 1 to tmp do
43016: LD_ADDR_VAR 0 4
43020: PUSH
43021: DOUBLE
43022: LD_INT 1
43024: DEC
43025: ST_TO_ADDR
43026: LD_VAR 0 3
43030: PUSH
43031: FOR_TO
43032: IFFALSE 43120
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43034: LD_ADDR_VAR 0 5
43038: PUSH
43039: LD_VAR 0 5
43043: PUSH
43044: LD_VAR 0 3
43048: PUSH
43049: LD_VAR 0 4
43053: ARRAY
43054: PPUSH
43055: CALL_OW 266
43059: PUSH
43060: LD_VAR 0 3
43064: PUSH
43065: LD_VAR 0 4
43069: ARRAY
43070: PPUSH
43071: CALL_OW 250
43075: PUSH
43076: LD_VAR 0 3
43080: PUSH
43081: LD_VAR 0 4
43085: ARRAY
43086: PPUSH
43087: CALL_OW 251
43091: PUSH
43092: LD_VAR 0 3
43096: PUSH
43097: LD_VAR 0 4
43101: ARRAY
43102: PPUSH
43103: CALL_OW 254
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: PUSH
43114: EMPTY
43115: LIST
43116: ADD
43117: ST_TO_ADDR
43118: GO 43031
43120: POP
43121: POP
// result := list ;
43122: LD_ADDR_VAR 0 2
43126: PUSH
43127: LD_VAR 0 5
43131: ST_TO_ADDR
// end ;
43132: LD_VAR 0 2
43136: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43137: LD_INT 0
43139: PPUSH
43140: PPUSH
43141: PPUSH
43142: PPUSH
43143: PPUSH
43144: PPUSH
43145: PPUSH
// if not factory then
43146: LD_VAR 0 1
43150: NOT
43151: IFFALSE 43155
// exit ;
43153: GO 43748
// if control = control_apeman then
43155: LD_VAR 0 4
43159: PUSH
43160: LD_INT 5
43162: EQUAL
43163: IFFALSE 43272
// begin tmp := UnitsInside ( factory ) ;
43165: LD_ADDR_VAR 0 8
43169: PUSH
43170: LD_VAR 0 1
43174: PPUSH
43175: CALL_OW 313
43179: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43180: LD_VAR 0 8
43184: PPUSH
43185: LD_INT 25
43187: PUSH
43188: LD_INT 12
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PPUSH
43195: CALL_OW 72
43199: NOT
43200: IFFALSE 43210
// control := control_manual ;
43202: LD_ADDR_VAR 0 4
43206: PUSH
43207: LD_INT 1
43209: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43210: LD_ADDR_VAR 0 8
43214: PUSH
43215: LD_VAR 0 1
43219: PPUSH
43220: CALL 42907 0 1
43224: ST_TO_ADDR
// if tmp then
43225: LD_VAR 0 8
43229: IFFALSE 43272
// begin for i in tmp do
43231: LD_ADDR_VAR 0 7
43235: PUSH
43236: LD_VAR 0 8
43240: PUSH
43241: FOR_IN
43242: IFFALSE 43270
// if i [ 1 ] = b_ext_radio then
43244: LD_VAR 0 7
43248: PUSH
43249: LD_INT 1
43251: ARRAY
43252: PUSH
43253: LD_INT 22
43255: EQUAL
43256: IFFALSE 43268
// begin control := control_remote ;
43258: LD_ADDR_VAR 0 4
43262: PUSH
43263: LD_INT 2
43265: ST_TO_ADDR
// break ;
43266: GO 43270
// end ;
43268: GO 43241
43270: POP
43271: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43272: LD_VAR 0 1
43276: PPUSH
43277: LD_VAR 0 2
43281: PPUSH
43282: LD_VAR 0 3
43286: PPUSH
43287: LD_VAR 0 4
43291: PPUSH
43292: LD_VAR 0 5
43296: PPUSH
43297: CALL_OW 448
43301: IFFALSE 43336
// begin result := [ chassis , engine , control , weapon ] ;
43303: LD_ADDR_VAR 0 6
43307: PUSH
43308: LD_VAR 0 2
43312: PUSH
43313: LD_VAR 0 3
43317: PUSH
43318: LD_VAR 0 4
43322: PUSH
43323: LD_VAR 0 5
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: ST_TO_ADDR
// exit ;
43334: GO 43748
// end ; _chassis := AvailableChassisList ( factory ) ;
43336: LD_ADDR_VAR 0 9
43340: PUSH
43341: LD_VAR 0 1
43345: PPUSH
43346: CALL_OW 475
43350: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43351: LD_ADDR_VAR 0 11
43355: PUSH
43356: LD_VAR 0 1
43360: PPUSH
43361: CALL_OW 476
43365: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43366: LD_ADDR_VAR 0 12
43370: PUSH
43371: LD_VAR 0 1
43375: PPUSH
43376: CALL_OW 477
43380: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43381: LD_ADDR_VAR 0 10
43385: PUSH
43386: LD_VAR 0 1
43390: PPUSH
43391: CALL_OW 478
43395: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43396: LD_VAR 0 9
43400: NOT
43401: PUSH
43402: LD_VAR 0 11
43406: NOT
43407: OR
43408: PUSH
43409: LD_VAR 0 12
43413: NOT
43414: OR
43415: PUSH
43416: LD_VAR 0 10
43420: NOT
43421: OR
43422: IFFALSE 43457
// begin result := [ chassis , engine , control , weapon ] ;
43424: LD_ADDR_VAR 0 6
43428: PUSH
43429: LD_VAR 0 2
43433: PUSH
43434: LD_VAR 0 3
43438: PUSH
43439: LD_VAR 0 4
43443: PUSH
43444: LD_VAR 0 5
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: ST_TO_ADDR
// exit ;
43455: GO 43748
// end ; if not chassis in _chassis then
43457: LD_VAR 0 2
43461: PUSH
43462: LD_VAR 0 9
43466: IN
43467: NOT
43468: IFFALSE 43494
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43470: LD_ADDR_VAR 0 2
43474: PUSH
43475: LD_VAR 0 9
43479: PUSH
43480: LD_INT 1
43482: PPUSH
43483: LD_VAR 0 9
43487: PPUSH
43488: CALL_OW 12
43492: ARRAY
43493: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43494: LD_VAR 0 2
43498: PPUSH
43499: LD_VAR 0 3
43503: PPUSH
43504: CALL 43753 0 2
43508: NOT
43509: IFFALSE 43568
// repeat engine := _engine [ 1 ] ;
43511: LD_ADDR_VAR 0 3
43515: PUSH
43516: LD_VAR 0 11
43520: PUSH
43521: LD_INT 1
43523: ARRAY
43524: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43525: LD_ADDR_VAR 0 11
43529: PUSH
43530: LD_VAR 0 11
43534: PPUSH
43535: LD_INT 1
43537: PPUSH
43538: CALL_OW 3
43542: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43543: LD_VAR 0 2
43547: PPUSH
43548: LD_VAR 0 3
43552: PPUSH
43553: CALL 43753 0 2
43557: PUSH
43558: LD_VAR 0 11
43562: PUSH
43563: EMPTY
43564: EQUAL
43565: OR
43566: IFFALSE 43511
// if not control in _control then
43568: LD_VAR 0 4
43572: PUSH
43573: LD_VAR 0 12
43577: IN
43578: NOT
43579: IFFALSE 43605
// control := _control [ rand ( 1 , _control ) ] ;
43581: LD_ADDR_VAR 0 4
43585: PUSH
43586: LD_VAR 0 12
43590: PUSH
43591: LD_INT 1
43593: PPUSH
43594: LD_VAR 0 12
43598: PPUSH
43599: CALL_OW 12
43603: ARRAY
43604: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43605: LD_VAR 0 2
43609: PPUSH
43610: LD_VAR 0 5
43614: PPUSH
43615: CALL 43973 0 2
43619: NOT
43620: IFFALSE 43679
// repeat weapon := _weapon [ 1 ] ;
43622: LD_ADDR_VAR 0 5
43626: PUSH
43627: LD_VAR 0 10
43631: PUSH
43632: LD_INT 1
43634: ARRAY
43635: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43636: LD_ADDR_VAR 0 10
43640: PUSH
43641: LD_VAR 0 10
43645: PPUSH
43646: LD_INT 1
43648: PPUSH
43649: CALL_OW 3
43653: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43654: LD_VAR 0 2
43658: PPUSH
43659: LD_VAR 0 5
43663: PPUSH
43664: CALL 43973 0 2
43668: PUSH
43669: LD_VAR 0 10
43673: PUSH
43674: EMPTY
43675: EQUAL
43676: OR
43677: IFFALSE 43622
// result := [ ] ;
43679: LD_ADDR_VAR 0 6
43683: PUSH
43684: EMPTY
43685: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43686: LD_VAR 0 1
43690: PPUSH
43691: LD_VAR 0 2
43695: PPUSH
43696: LD_VAR 0 3
43700: PPUSH
43701: LD_VAR 0 4
43705: PPUSH
43706: LD_VAR 0 5
43710: PPUSH
43711: CALL_OW 448
43715: IFFALSE 43748
// result := [ chassis , engine , control , weapon ] ;
43717: LD_ADDR_VAR 0 6
43721: PUSH
43722: LD_VAR 0 2
43726: PUSH
43727: LD_VAR 0 3
43731: PUSH
43732: LD_VAR 0 4
43736: PUSH
43737: LD_VAR 0 5
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: ST_TO_ADDR
// end ;
43748: LD_VAR 0 6
43752: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43753: LD_INT 0
43755: PPUSH
// if not chassis or not engine then
43756: LD_VAR 0 1
43760: NOT
43761: PUSH
43762: LD_VAR 0 2
43766: NOT
43767: OR
43768: IFFALSE 43772
// exit ;
43770: GO 43968
// case engine of engine_solar :
43772: LD_VAR 0 2
43776: PUSH
43777: LD_INT 2
43779: DOUBLE
43780: EQUAL
43781: IFTRUE 43785
43783: GO 43823
43785: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43786: LD_ADDR_VAR 0 3
43790: PUSH
43791: LD_INT 11
43793: PUSH
43794: LD_INT 12
43796: PUSH
43797: LD_INT 13
43799: PUSH
43800: LD_INT 14
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: LD_INT 3
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: ST_TO_ADDR
43821: GO 43952
43823: LD_INT 1
43825: DOUBLE
43826: EQUAL
43827: IFTRUE 43831
43829: GO 43893
43831: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43832: LD_ADDR_VAR 0 3
43836: PUSH
43837: LD_INT 11
43839: PUSH
43840: LD_INT 12
43842: PUSH
43843: LD_INT 13
43845: PUSH
43846: LD_INT 14
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: LD_INT 2
43854: PUSH
43855: LD_INT 3
43857: PUSH
43858: LD_INT 4
43860: PUSH
43861: LD_INT 5
43863: PUSH
43864: LD_INT 21
43866: PUSH
43867: LD_INT 23
43869: PUSH
43870: LD_INT 22
43872: PUSH
43873: LD_INT 24
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: ST_TO_ADDR
43891: GO 43952
43893: LD_INT 3
43895: DOUBLE
43896: EQUAL
43897: IFTRUE 43901
43899: GO 43951
43901: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43902: LD_ADDR_VAR 0 3
43906: PUSH
43907: LD_INT 13
43909: PUSH
43910: LD_INT 14
43912: PUSH
43913: LD_INT 2
43915: PUSH
43916: LD_INT 3
43918: PUSH
43919: LD_INT 4
43921: PUSH
43922: LD_INT 5
43924: PUSH
43925: LD_INT 21
43927: PUSH
43928: LD_INT 22
43930: PUSH
43931: LD_INT 23
43933: PUSH
43934: LD_INT 24
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: ST_TO_ADDR
43949: GO 43952
43951: POP
// result := ( chassis in result ) ;
43952: LD_ADDR_VAR 0 3
43956: PUSH
43957: LD_VAR 0 1
43961: PUSH
43962: LD_VAR 0 3
43966: IN
43967: ST_TO_ADDR
// end ;
43968: LD_VAR 0 3
43972: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43973: LD_INT 0
43975: PPUSH
// if not chassis or not weapon then
43976: LD_VAR 0 1
43980: NOT
43981: PUSH
43982: LD_VAR 0 2
43986: NOT
43987: OR
43988: IFFALSE 43992
// exit ;
43990: GO 45052
// case weapon of us_machine_gun :
43992: LD_VAR 0 2
43996: PUSH
43997: LD_INT 2
43999: DOUBLE
44000: EQUAL
44001: IFTRUE 44005
44003: GO 44035
44005: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44006: LD_ADDR_VAR 0 3
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: LD_INT 2
44016: PUSH
44017: LD_INT 3
44019: PUSH
44020: LD_INT 4
44022: PUSH
44023: LD_INT 5
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: ST_TO_ADDR
44033: GO 45036
44035: LD_INT 3
44037: DOUBLE
44038: EQUAL
44039: IFTRUE 44043
44041: GO 44073
44043: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44044: LD_ADDR_VAR 0 3
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: LD_INT 2
44054: PUSH
44055: LD_INT 3
44057: PUSH
44058: LD_INT 4
44060: PUSH
44061: LD_INT 5
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: ST_TO_ADDR
44071: GO 45036
44073: LD_INT 11
44075: DOUBLE
44076: EQUAL
44077: IFTRUE 44081
44079: GO 44111
44081: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44082: LD_ADDR_VAR 0 3
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: LD_INT 3
44095: PUSH
44096: LD_INT 4
44098: PUSH
44099: LD_INT 5
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: ST_TO_ADDR
44109: GO 45036
44111: LD_INT 4
44113: DOUBLE
44114: EQUAL
44115: IFTRUE 44119
44117: GO 44145
44119: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44120: LD_ADDR_VAR 0 3
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: LD_INT 3
44130: PUSH
44131: LD_INT 4
44133: PUSH
44134: LD_INT 5
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: ST_TO_ADDR
44143: GO 45036
44145: LD_INT 5
44147: DOUBLE
44148: EQUAL
44149: IFTRUE 44153
44151: GO 44179
44153: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44154: LD_ADDR_VAR 0 3
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: LD_INT 3
44164: PUSH
44165: LD_INT 4
44167: PUSH
44168: LD_INT 5
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: ST_TO_ADDR
44177: GO 45036
44179: LD_INT 9
44181: DOUBLE
44182: EQUAL
44183: IFTRUE 44187
44185: GO 44213
44187: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44188: LD_ADDR_VAR 0 3
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: LD_INT 3
44198: PUSH
44199: LD_INT 4
44201: PUSH
44202: LD_INT 5
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: ST_TO_ADDR
44211: GO 45036
44213: LD_INT 7
44215: DOUBLE
44216: EQUAL
44217: IFTRUE 44221
44219: GO 44247
44221: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44222: LD_ADDR_VAR 0 3
44226: PUSH
44227: LD_INT 2
44229: PUSH
44230: LD_INT 3
44232: PUSH
44233: LD_INT 4
44235: PUSH
44236: LD_INT 5
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: ST_TO_ADDR
44245: GO 45036
44247: LD_INT 12
44249: DOUBLE
44250: EQUAL
44251: IFTRUE 44255
44253: GO 44281
44255: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44256: LD_ADDR_VAR 0 3
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: LD_INT 3
44266: PUSH
44267: LD_INT 4
44269: PUSH
44270: LD_INT 5
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: ST_TO_ADDR
44279: GO 45036
44281: LD_INT 13
44283: DOUBLE
44284: EQUAL
44285: IFTRUE 44289
44287: GO 44315
44289: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44290: LD_ADDR_VAR 0 3
44294: PUSH
44295: LD_INT 2
44297: PUSH
44298: LD_INT 3
44300: PUSH
44301: LD_INT 4
44303: PUSH
44304: LD_INT 5
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: ST_TO_ADDR
44313: GO 45036
44315: LD_INT 14
44317: DOUBLE
44318: EQUAL
44319: IFTRUE 44323
44321: GO 44341
44323: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44324: LD_ADDR_VAR 0 3
44328: PUSH
44329: LD_INT 4
44331: PUSH
44332: LD_INT 5
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: ST_TO_ADDR
44339: GO 45036
44341: LD_INT 6
44343: DOUBLE
44344: EQUAL
44345: IFTRUE 44349
44347: GO 44367
44349: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44350: LD_ADDR_VAR 0 3
44354: PUSH
44355: LD_INT 4
44357: PUSH
44358: LD_INT 5
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: ST_TO_ADDR
44365: GO 45036
44367: LD_INT 10
44369: DOUBLE
44370: EQUAL
44371: IFTRUE 44375
44373: GO 44393
44375: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44376: LD_ADDR_VAR 0 3
44380: PUSH
44381: LD_INT 4
44383: PUSH
44384: LD_INT 5
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: ST_TO_ADDR
44391: GO 45036
44393: LD_INT 22
44395: DOUBLE
44396: EQUAL
44397: IFTRUE 44401
44399: GO 44427
44401: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44402: LD_ADDR_VAR 0 3
44406: PUSH
44407: LD_INT 11
44409: PUSH
44410: LD_INT 12
44412: PUSH
44413: LD_INT 13
44415: PUSH
44416: LD_INT 14
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: ST_TO_ADDR
44425: GO 45036
44427: LD_INT 23
44429: DOUBLE
44430: EQUAL
44431: IFTRUE 44435
44433: GO 44461
44435: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44436: LD_ADDR_VAR 0 3
44440: PUSH
44441: LD_INT 11
44443: PUSH
44444: LD_INT 12
44446: PUSH
44447: LD_INT 13
44449: PUSH
44450: LD_INT 14
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: ST_TO_ADDR
44459: GO 45036
44461: LD_INT 24
44463: DOUBLE
44464: EQUAL
44465: IFTRUE 44469
44467: GO 44495
44469: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44470: LD_ADDR_VAR 0 3
44474: PUSH
44475: LD_INT 11
44477: PUSH
44478: LD_INT 12
44480: PUSH
44481: LD_INT 13
44483: PUSH
44484: LD_INT 14
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: ST_TO_ADDR
44493: GO 45036
44495: LD_INT 30
44497: DOUBLE
44498: EQUAL
44499: IFTRUE 44503
44501: GO 44529
44503: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44504: LD_ADDR_VAR 0 3
44508: PUSH
44509: LD_INT 11
44511: PUSH
44512: LD_INT 12
44514: PUSH
44515: LD_INT 13
44517: PUSH
44518: LD_INT 14
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: ST_TO_ADDR
44527: GO 45036
44529: LD_INT 25
44531: DOUBLE
44532: EQUAL
44533: IFTRUE 44537
44535: GO 44555
44537: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44538: LD_ADDR_VAR 0 3
44542: PUSH
44543: LD_INT 13
44545: PUSH
44546: LD_INT 14
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: ST_TO_ADDR
44553: GO 45036
44555: LD_INT 27
44557: DOUBLE
44558: EQUAL
44559: IFTRUE 44563
44561: GO 44581
44563: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44564: LD_ADDR_VAR 0 3
44568: PUSH
44569: LD_INT 13
44571: PUSH
44572: LD_INT 14
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: ST_TO_ADDR
44579: GO 45036
44581: LD_INT 92
44583: DOUBLE
44584: EQUAL
44585: IFTRUE 44589
44587: GO 44615
44589: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44590: LD_ADDR_VAR 0 3
44594: PUSH
44595: LD_INT 11
44597: PUSH
44598: LD_INT 12
44600: PUSH
44601: LD_INT 13
44603: PUSH
44604: LD_INT 14
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: ST_TO_ADDR
44613: GO 45036
44615: LD_INT 28
44617: DOUBLE
44618: EQUAL
44619: IFTRUE 44623
44621: GO 44641
44623: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44624: LD_ADDR_VAR 0 3
44628: PUSH
44629: LD_INT 13
44631: PUSH
44632: LD_INT 14
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: ST_TO_ADDR
44639: GO 45036
44641: LD_INT 29
44643: DOUBLE
44644: EQUAL
44645: IFTRUE 44649
44647: GO 44667
44649: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44650: LD_ADDR_VAR 0 3
44654: PUSH
44655: LD_INT 13
44657: PUSH
44658: LD_INT 14
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: ST_TO_ADDR
44665: GO 45036
44667: LD_INT 31
44669: DOUBLE
44670: EQUAL
44671: IFTRUE 44675
44673: GO 44693
44675: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44676: LD_ADDR_VAR 0 3
44680: PUSH
44681: LD_INT 13
44683: PUSH
44684: LD_INT 14
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: ST_TO_ADDR
44691: GO 45036
44693: LD_INT 26
44695: DOUBLE
44696: EQUAL
44697: IFTRUE 44701
44699: GO 44719
44701: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44702: LD_ADDR_VAR 0 3
44706: PUSH
44707: LD_INT 13
44709: PUSH
44710: LD_INT 14
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: ST_TO_ADDR
44717: GO 45036
44719: LD_INT 42
44721: DOUBLE
44722: EQUAL
44723: IFTRUE 44727
44725: GO 44753
44727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44728: LD_ADDR_VAR 0 3
44732: PUSH
44733: LD_INT 21
44735: PUSH
44736: LD_INT 22
44738: PUSH
44739: LD_INT 23
44741: PUSH
44742: LD_INT 24
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: ST_TO_ADDR
44751: GO 45036
44753: LD_INT 43
44755: DOUBLE
44756: EQUAL
44757: IFTRUE 44761
44759: GO 44787
44761: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44762: LD_ADDR_VAR 0 3
44766: PUSH
44767: LD_INT 21
44769: PUSH
44770: LD_INT 22
44772: PUSH
44773: LD_INT 23
44775: PUSH
44776: LD_INT 24
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: ST_TO_ADDR
44785: GO 45036
44787: LD_INT 44
44789: DOUBLE
44790: EQUAL
44791: IFTRUE 44795
44793: GO 44821
44795: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44796: LD_ADDR_VAR 0 3
44800: PUSH
44801: LD_INT 21
44803: PUSH
44804: LD_INT 22
44806: PUSH
44807: LD_INT 23
44809: PUSH
44810: LD_INT 24
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: ST_TO_ADDR
44819: GO 45036
44821: LD_INT 45
44823: DOUBLE
44824: EQUAL
44825: IFTRUE 44829
44827: GO 44855
44829: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44830: LD_ADDR_VAR 0 3
44834: PUSH
44835: LD_INT 21
44837: PUSH
44838: LD_INT 22
44840: PUSH
44841: LD_INT 23
44843: PUSH
44844: LD_INT 24
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: ST_TO_ADDR
44853: GO 45036
44855: LD_INT 49
44857: DOUBLE
44858: EQUAL
44859: IFTRUE 44863
44861: GO 44889
44863: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44864: LD_ADDR_VAR 0 3
44868: PUSH
44869: LD_INT 21
44871: PUSH
44872: LD_INT 22
44874: PUSH
44875: LD_INT 23
44877: PUSH
44878: LD_INT 24
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: ST_TO_ADDR
44887: GO 45036
44889: LD_INT 51
44891: DOUBLE
44892: EQUAL
44893: IFTRUE 44897
44895: GO 44923
44897: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44898: LD_ADDR_VAR 0 3
44902: PUSH
44903: LD_INT 21
44905: PUSH
44906: LD_INT 22
44908: PUSH
44909: LD_INT 23
44911: PUSH
44912: LD_INT 24
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: ST_TO_ADDR
44921: GO 45036
44923: LD_INT 52
44925: DOUBLE
44926: EQUAL
44927: IFTRUE 44931
44929: GO 44957
44931: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44932: LD_ADDR_VAR 0 3
44936: PUSH
44937: LD_INT 21
44939: PUSH
44940: LD_INT 22
44942: PUSH
44943: LD_INT 23
44945: PUSH
44946: LD_INT 24
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: ST_TO_ADDR
44955: GO 45036
44957: LD_INT 53
44959: DOUBLE
44960: EQUAL
44961: IFTRUE 44965
44963: GO 44983
44965: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44966: LD_ADDR_VAR 0 3
44970: PUSH
44971: LD_INT 23
44973: PUSH
44974: LD_INT 24
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: ST_TO_ADDR
44981: GO 45036
44983: LD_INT 46
44985: DOUBLE
44986: EQUAL
44987: IFTRUE 44991
44989: GO 45009
44991: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44992: LD_ADDR_VAR 0 3
44996: PUSH
44997: LD_INT 23
44999: PUSH
45000: LD_INT 24
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: ST_TO_ADDR
45007: GO 45036
45009: LD_INT 47
45011: DOUBLE
45012: EQUAL
45013: IFTRUE 45017
45015: GO 45035
45017: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45018: LD_ADDR_VAR 0 3
45022: PUSH
45023: LD_INT 23
45025: PUSH
45026: LD_INT 24
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: ST_TO_ADDR
45033: GO 45036
45035: POP
// result := ( chassis in result ) ;
45036: LD_ADDR_VAR 0 3
45040: PUSH
45041: LD_VAR 0 1
45045: PUSH
45046: LD_VAR 0 3
45050: IN
45051: ST_TO_ADDR
// end ;
45052: LD_VAR 0 3
45056: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45057: LD_INT 0
45059: PPUSH
45060: PPUSH
45061: PPUSH
45062: PPUSH
45063: PPUSH
45064: PPUSH
45065: PPUSH
// result := array ;
45066: LD_ADDR_VAR 0 5
45070: PUSH
45071: LD_VAR 0 1
45075: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45076: LD_VAR 0 1
45080: NOT
45081: PUSH
45082: LD_VAR 0 2
45086: NOT
45087: OR
45088: PUSH
45089: LD_VAR 0 3
45093: NOT
45094: OR
45095: PUSH
45096: LD_VAR 0 2
45100: PUSH
45101: LD_VAR 0 1
45105: GREATER
45106: OR
45107: PUSH
45108: LD_VAR 0 3
45112: PUSH
45113: LD_VAR 0 1
45117: GREATER
45118: OR
45119: IFFALSE 45123
// exit ;
45121: GO 45419
// if direction then
45123: LD_VAR 0 4
45127: IFFALSE 45191
// begin d := 1 ;
45129: LD_ADDR_VAR 0 9
45133: PUSH
45134: LD_INT 1
45136: ST_TO_ADDR
// if i_from > i_to then
45137: LD_VAR 0 2
45141: PUSH
45142: LD_VAR 0 3
45146: GREATER
45147: IFFALSE 45173
// length := ( array - i_from ) + i_to else
45149: LD_ADDR_VAR 0 11
45153: PUSH
45154: LD_VAR 0 1
45158: PUSH
45159: LD_VAR 0 2
45163: MINUS
45164: PUSH
45165: LD_VAR 0 3
45169: PLUS
45170: ST_TO_ADDR
45171: GO 45189
// length := i_to - i_from ;
45173: LD_ADDR_VAR 0 11
45177: PUSH
45178: LD_VAR 0 3
45182: PUSH
45183: LD_VAR 0 2
45187: MINUS
45188: ST_TO_ADDR
// end else
45189: GO 45252
// begin d := - 1 ;
45191: LD_ADDR_VAR 0 9
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: ST_TO_ADDR
// if i_from > i_to then
45200: LD_VAR 0 2
45204: PUSH
45205: LD_VAR 0 3
45209: GREATER
45210: IFFALSE 45230
// length := i_from - i_to else
45212: LD_ADDR_VAR 0 11
45216: PUSH
45217: LD_VAR 0 2
45221: PUSH
45222: LD_VAR 0 3
45226: MINUS
45227: ST_TO_ADDR
45228: GO 45252
// length := ( array - i_to ) + i_from ;
45230: LD_ADDR_VAR 0 11
45234: PUSH
45235: LD_VAR 0 1
45239: PUSH
45240: LD_VAR 0 3
45244: MINUS
45245: PUSH
45246: LD_VAR 0 2
45250: PLUS
45251: ST_TO_ADDR
// end ; if not length then
45252: LD_VAR 0 11
45256: NOT
45257: IFFALSE 45261
// exit ;
45259: GO 45419
// tmp := array ;
45261: LD_ADDR_VAR 0 10
45265: PUSH
45266: LD_VAR 0 1
45270: ST_TO_ADDR
// for i = 1 to length do
45271: LD_ADDR_VAR 0 6
45275: PUSH
45276: DOUBLE
45277: LD_INT 1
45279: DEC
45280: ST_TO_ADDR
45281: LD_VAR 0 11
45285: PUSH
45286: FOR_TO
45287: IFFALSE 45407
// begin for j = 1 to array do
45289: LD_ADDR_VAR 0 7
45293: PUSH
45294: DOUBLE
45295: LD_INT 1
45297: DEC
45298: ST_TO_ADDR
45299: LD_VAR 0 1
45303: PUSH
45304: FOR_TO
45305: IFFALSE 45393
// begin k := j + d ;
45307: LD_ADDR_VAR 0 8
45311: PUSH
45312: LD_VAR 0 7
45316: PUSH
45317: LD_VAR 0 9
45321: PLUS
45322: ST_TO_ADDR
// if k > array then
45323: LD_VAR 0 8
45327: PUSH
45328: LD_VAR 0 1
45332: GREATER
45333: IFFALSE 45343
// k := 1 ;
45335: LD_ADDR_VAR 0 8
45339: PUSH
45340: LD_INT 1
45342: ST_TO_ADDR
// if not k then
45343: LD_VAR 0 8
45347: NOT
45348: IFFALSE 45360
// k := array ;
45350: LD_ADDR_VAR 0 8
45354: PUSH
45355: LD_VAR 0 1
45359: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45360: LD_ADDR_VAR 0 10
45364: PUSH
45365: LD_VAR 0 10
45369: PPUSH
45370: LD_VAR 0 8
45374: PPUSH
45375: LD_VAR 0 1
45379: PUSH
45380: LD_VAR 0 7
45384: ARRAY
45385: PPUSH
45386: CALL_OW 1
45390: ST_TO_ADDR
// end ;
45391: GO 45304
45393: POP
45394: POP
// array := tmp ;
45395: LD_ADDR_VAR 0 1
45399: PUSH
45400: LD_VAR 0 10
45404: ST_TO_ADDR
// end ;
45405: GO 45286
45407: POP
45408: POP
// result := array ;
45409: LD_ADDR_VAR 0 5
45413: PUSH
45414: LD_VAR 0 1
45418: ST_TO_ADDR
// end ;
45419: LD_VAR 0 5
45423: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45424: LD_INT 0
45426: PPUSH
45427: PPUSH
// result := 0 ;
45428: LD_ADDR_VAR 0 3
45432: PUSH
45433: LD_INT 0
45435: ST_TO_ADDR
// if not array or not value in array then
45436: LD_VAR 0 1
45440: NOT
45441: PUSH
45442: LD_VAR 0 2
45446: PUSH
45447: LD_VAR 0 1
45451: IN
45452: NOT
45453: OR
45454: IFFALSE 45458
// exit ;
45456: GO 45512
// for i = 1 to array do
45458: LD_ADDR_VAR 0 4
45462: PUSH
45463: DOUBLE
45464: LD_INT 1
45466: DEC
45467: ST_TO_ADDR
45468: LD_VAR 0 1
45472: PUSH
45473: FOR_TO
45474: IFFALSE 45510
// if value = array [ i ] then
45476: LD_VAR 0 2
45480: PUSH
45481: LD_VAR 0 1
45485: PUSH
45486: LD_VAR 0 4
45490: ARRAY
45491: EQUAL
45492: IFFALSE 45508
// begin result := i ;
45494: LD_ADDR_VAR 0 3
45498: PUSH
45499: LD_VAR 0 4
45503: ST_TO_ADDR
// exit ;
45504: POP
45505: POP
45506: GO 45512
// end ;
45508: GO 45473
45510: POP
45511: POP
// end ;
45512: LD_VAR 0 3
45516: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45517: LD_INT 0
45519: PPUSH
// vc_chassis := chassis ;
45520: LD_ADDR_OWVAR 37
45524: PUSH
45525: LD_VAR 0 1
45529: ST_TO_ADDR
// vc_engine := engine ;
45530: LD_ADDR_OWVAR 39
45534: PUSH
45535: LD_VAR 0 2
45539: ST_TO_ADDR
// vc_control := control ;
45540: LD_ADDR_OWVAR 38
45544: PUSH
45545: LD_VAR 0 3
45549: ST_TO_ADDR
// vc_weapon := weapon ;
45550: LD_ADDR_OWVAR 40
45554: PUSH
45555: LD_VAR 0 4
45559: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45560: LD_ADDR_OWVAR 41
45564: PUSH
45565: LD_VAR 0 5
45569: ST_TO_ADDR
// end ;
45570: LD_VAR 0 6
45574: RET
// export function WantPlant ( unit ) ; var task ; begin
45575: LD_INT 0
45577: PPUSH
45578: PPUSH
// result := false ;
45579: LD_ADDR_VAR 0 2
45583: PUSH
45584: LD_INT 0
45586: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45587: LD_ADDR_VAR 0 3
45591: PUSH
45592: LD_VAR 0 1
45596: PPUSH
45597: CALL_OW 437
45601: ST_TO_ADDR
// if task then
45602: LD_VAR 0 3
45606: IFFALSE 45634
// if task [ 1 ] [ 1 ] = p then
45608: LD_VAR 0 3
45612: PUSH
45613: LD_INT 1
45615: ARRAY
45616: PUSH
45617: LD_INT 1
45619: ARRAY
45620: PUSH
45621: LD_STRING p
45623: EQUAL
45624: IFFALSE 45634
// result := true ;
45626: LD_ADDR_VAR 0 2
45630: PUSH
45631: LD_INT 1
45633: ST_TO_ADDR
// end ;
45634: LD_VAR 0 2
45638: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45639: LD_INT 0
45641: PPUSH
45642: PPUSH
45643: PPUSH
45644: PPUSH
// if pos < 1 then
45645: LD_VAR 0 2
45649: PUSH
45650: LD_INT 1
45652: LESS
45653: IFFALSE 45657
// exit ;
45655: GO 45960
// if pos = 1 then
45657: LD_VAR 0 2
45661: PUSH
45662: LD_INT 1
45664: EQUAL
45665: IFFALSE 45698
// result := Replace ( arr , pos [ 1 ] , value ) else
45667: LD_ADDR_VAR 0 4
45671: PUSH
45672: LD_VAR 0 1
45676: PPUSH
45677: LD_VAR 0 2
45681: PUSH
45682: LD_INT 1
45684: ARRAY
45685: PPUSH
45686: LD_VAR 0 3
45690: PPUSH
45691: CALL_OW 1
45695: ST_TO_ADDR
45696: GO 45960
// begin tmp := arr ;
45698: LD_ADDR_VAR 0 6
45702: PUSH
45703: LD_VAR 0 1
45707: ST_TO_ADDR
// s_arr := [ tmp ] ;
45708: LD_ADDR_VAR 0 7
45712: PUSH
45713: LD_VAR 0 6
45717: PUSH
45718: EMPTY
45719: LIST
45720: ST_TO_ADDR
// for i = 1 to pos - 1 do
45721: LD_ADDR_VAR 0 5
45725: PUSH
45726: DOUBLE
45727: LD_INT 1
45729: DEC
45730: ST_TO_ADDR
45731: LD_VAR 0 2
45735: PUSH
45736: LD_INT 1
45738: MINUS
45739: PUSH
45740: FOR_TO
45741: IFFALSE 45786
// begin tmp := tmp [ pos [ i ] ] ;
45743: LD_ADDR_VAR 0 6
45747: PUSH
45748: LD_VAR 0 6
45752: PUSH
45753: LD_VAR 0 2
45757: PUSH
45758: LD_VAR 0 5
45762: ARRAY
45763: ARRAY
45764: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45765: LD_ADDR_VAR 0 7
45769: PUSH
45770: LD_VAR 0 7
45774: PUSH
45775: LD_VAR 0 6
45779: PUSH
45780: EMPTY
45781: LIST
45782: ADD
45783: ST_TO_ADDR
// end ;
45784: GO 45740
45786: POP
45787: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45788: LD_ADDR_VAR 0 6
45792: PUSH
45793: LD_VAR 0 6
45797: PPUSH
45798: LD_VAR 0 2
45802: PUSH
45803: LD_VAR 0 2
45807: ARRAY
45808: PPUSH
45809: LD_VAR 0 3
45813: PPUSH
45814: CALL_OW 1
45818: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45819: LD_ADDR_VAR 0 7
45823: PUSH
45824: LD_VAR 0 7
45828: PPUSH
45829: LD_VAR 0 7
45833: PPUSH
45834: LD_VAR 0 6
45838: PPUSH
45839: CALL_OW 1
45843: ST_TO_ADDR
// for i = s_arr downto 2 do
45844: LD_ADDR_VAR 0 5
45848: PUSH
45849: DOUBLE
45850: LD_VAR 0 7
45854: INC
45855: ST_TO_ADDR
45856: LD_INT 2
45858: PUSH
45859: FOR_DOWNTO
45860: IFFALSE 45944
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45862: LD_ADDR_VAR 0 6
45866: PUSH
45867: LD_VAR 0 7
45871: PUSH
45872: LD_VAR 0 5
45876: PUSH
45877: LD_INT 1
45879: MINUS
45880: ARRAY
45881: PPUSH
45882: LD_VAR 0 2
45886: PUSH
45887: LD_VAR 0 5
45891: PUSH
45892: LD_INT 1
45894: MINUS
45895: ARRAY
45896: PPUSH
45897: LD_VAR 0 7
45901: PUSH
45902: LD_VAR 0 5
45906: ARRAY
45907: PPUSH
45908: CALL_OW 1
45912: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45913: LD_ADDR_VAR 0 7
45917: PUSH
45918: LD_VAR 0 7
45922: PPUSH
45923: LD_VAR 0 5
45927: PUSH
45928: LD_INT 1
45930: MINUS
45931: PPUSH
45932: LD_VAR 0 6
45936: PPUSH
45937: CALL_OW 1
45941: ST_TO_ADDR
// end ;
45942: GO 45859
45944: POP
45945: POP
// result := s_arr [ 1 ] ;
45946: LD_ADDR_VAR 0 4
45950: PUSH
45951: LD_VAR 0 7
45955: PUSH
45956: LD_INT 1
45958: ARRAY
45959: ST_TO_ADDR
// end ; end ;
45960: LD_VAR 0 4
45964: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45965: LD_INT 0
45967: PPUSH
45968: PPUSH
// if not list then
45969: LD_VAR 0 1
45973: NOT
45974: IFFALSE 45978
// exit ;
45976: GO 46069
// i := list [ pos1 ] ;
45978: LD_ADDR_VAR 0 5
45982: PUSH
45983: LD_VAR 0 1
45987: PUSH
45988: LD_VAR 0 2
45992: ARRAY
45993: ST_TO_ADDR
// if not i then
45994: LD_VAR 0 5
45998: NOT
45999: IFFALSE 46003
// exit ;
46001: GO 46069
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46003: LD_ADDR_VAR 0 1
46007: PUSH
46008: LD_VAR 0 1
46012: PPUSH
46013: LD_VAR 0 2
46017: PPUSH
46018: LD_VAR 0 1
46022: PUSH
46023: LD_VAR 0 3
46027: ARRAY
46028: PPUSH
46029: CALL_OW 1
46033: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46034: LD_ADDR_VAR 0 1
46038: PUSH
46039: LD_VAR 0 1
46043: PPUSH
46044: LD_VAR 0 3
46048: PPUSH
46049: LD_VAR 0 5
46053: PPUSH
46054: CALL_OW 1
46058: ST_TO_ADDR
// result := list ;
46059: LD_ADDR_VAR 0 4
46063: PUSH
46064: LD_VAR 0 1
46068: ST_TO_ADDR
// end ;
46069: LD_VAR 0 4
46073: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46074: LD_INT 0
46076: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46077: LD_ADDR_VAR 0 5
46081: PUSH
46082: LD_VAR 0 1
46086: PPUSH
46087: CALL_OW 250
46091: PPUSH
46092: LD_VAR 0 1
46096: PPUSH
46097: CALL_OW 251
46101: PPUSH
46102: LD_VAR 0 2
46106: PPUSH
46107: LD_VAR 0 3
46111: PPUSH
46112: LD_VAR 0 4
46116: PPUSH
46117: CALL 46495 0 5
46121: ST_TO_ADDR
// end ;
46122: LD_VAR 0 5
46126: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46127: LD_INT 0
46129: PPUSH
46130: PPUSH
46131: PPUSH
46132: PPUSH
// if not list or not unit then
46133: LD_VAR 0 2
46137: NOT
46138: PUSH
46139: LD_VAR 0 1
46143: NOT
46144: OR
46145: IFFALSE 46149
// exit ;
46147: GO 46490
// result := [ ] ;
46149: LD_ADDR_VAR 0 5
46153: PUSH
46154: EMPTY
46155: ST_TO_ADDR
// for i in list do
46156: LD_ADDR_VAR 0 6
46160: PUSH
46161: LD_VAR 0 2
46165: PUSH
46166: FOR_IN
46167: IFFALSE 46385
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46169: LD_ADDR_VAR 0 8
46173: PUSH
46174: LD_VAR 0 1
46178: PPUSH
46179: LD_VAR 0 6
46183: PUSH
46184: LD_INT 1
46186: ARRAY
46187: PPUSH
46188: LD_VAR 0 6
46192: PUSH
46193: LD_INT 2
46195: ARRAY
46196: PPUSH
46197: CALL_OW 297
46201: ST_TO_ADDR
// if not Count ( result ) then
46202: LD_VAR 0 5
46206: PPUSH
46207: CALL 42779 0 1
46211: NOT
46212: IFFALSE 46245
// begin result := Join ( result , [ i , tmp ] ) ;
46214: LD_ADDR_VAR 0 5
46218: PUSH
46219: LD_VAR 0 5
46223: PPUSH
46224: LD_VAR 0 6
46228: PUSH
46229: LD_VAR 0 8
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PPUSH
46238: CALL 78379 0 2
46242: ST_TO_ADDR
// continue ;
46243: GO 46166
// end ; if result [ result ] [ 2 ] <= tmp then
46245: LD_VAR 0 5
46249: PUSH
46250: LD_VAR 0 5
46254: ARRAY
46255: PUSH
46256: LD_INT 2
46258: ARRAY
46259: PUSH
46260: LD_VAR 0 8
46264: LESSEQUAL
46265: IFFALSE 46298
// result := Join ( result , [ i , tmp ] ) else
46267: LD_ADDR_VAR 0 5
46271: PUSH
46272: LD_VAR 0 5
46276: PPUSH
46277: LD_VAR 0 6
46281: PUSH
46282: LD_VAR 0 8
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PPUSH
46291: CALL 78379 0 2
46295: ST_TO_ADDR
46296: GO 46383
// begin for j := 1 to Count ( result ) do
46298: LD_ADDR_VAR 0 7
46302: PUSH
46303: DOUBLE
46304: LD_INT 1
46306: DEC
46307: ST_TO_ADDR
46308: LD_VAR 0 5
46312: PPUSH
46313: CALL 42779 0 1
46317: PUSH
46318: FOR_TO
46319: IFFALSE 46381
// begin if tmp < result [ j ] [ 2 ] then
46321: LD_VAR 0 8
46325: PUSH
46326: LD_VAR 0 5
46330: PUSH
46331: LD_VAR 0 7
46335: ARRAY
46336: PUSH
46337: LD_INT 2
46339: ARRAY
46340: LESS
46341: IFFALSE 46379
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46343: LD_ADDR_VAR 0 5
46347: PUSH
46348: LD_VAR 0 5
46352: PPUSH
46353: LD_VAR 0 7
46357: PPUSH
46358: LD_VAR 0 6
46362: PUSH
46363: LD_VAR 0 8
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PPUSH
46372: CALL_OW 2
46376: ST_TO_ADDR
// break ;
46377: GO 46381
// end ; end ;
46379: GO 46318
46381: POP
46382: POP
// end ; end ;
46383: GO 46166
46385: POP
46386: POP
// if result and not asc then
46387: LD_VAR 0 5
46391: PUSH
46392: LD_VAR 0 3
46396: NOT
46397: AND
46398: IFFALSE 46415
// result := ReverseArray ( result ) ;
46400: LD_ADDR_VAR 0 5
46404: PUSH
46405: LD_VAR 0 5
46409: PPUSH
46410: CALL 73655 0 1
46414: ST_TO_ADDR
// tmp := [ ] ;
46415: LD_ADDR_VAR 0 8
46419: PUSH
46420: EMPTY
46421: ST_TO_ADDR
// if mode then
46422: LD_VAR 0 4
46426: IFFALSE 46490
// begin for i := 1 to result do
46428: LD_ADDR_VAR 0 6
46432: PUSH
46433: DOUBLE
46434: LD_INT 1
46436: DEC
46437: ST_TO_ADDR
46438: LD_VAR 0 5
46442: PUSH
46443: FOR_TO
46444: IFFALSE 46478
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46446: LD_ADDR_VAR 0 8
46450: PUSH
46451: LD_VAR 0 8
46455: PPUSH
46456: LD_VAR 0 5
46460: PUSH
46461: LD_VAR 0 6
46465: ARRAY
46466: PUSH
46467: LD_INT 1
46469: ARRAY
46470: PPUSH
46471: CALL 78379 0 2
46475: ST_TO_ADDR
46476: GO 46443
46478: POP
46479: POP
// result := tmp ;
46480: LD_ADDR_VAR 0 5
46484: PUSH
46485: LD_VAR 0 8
46489: ST_TO_ADDR
// end ; end ;
46490: LD_VAR 0 5
46494: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46495: LD_INT 0
46497: PPUSH
46498: PPUSH
46499: PPUSH
46500: PPUSH
// if not list then
46501: LD_VAR 0 3
46505: NOT
46506: IFFALSE 46510
// exit ;
46508: GO 46898
// result := [ ] ;
46510: LD_ADDR_VAR 0 6
46514: PUSH
46515: EMPTY
46516: ST_TO_ADDR
// for i in list do
46517: LD_ADDR_VAR 0 7
46521: PUSH
46522: LD_VAR 0 3
46526: PUSH
46527: FOR_IN
46528: IFFALSE 46730
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46530: LD_ADDR_VAR 0 9
46534: PUSH
46535: LD_VAR 0 7
46539: PPUSH
46540: LD_VAR 0 1
46544: PPUSH
46545: LD_VAR 0 2
46549: PPUSH
46550: CALL_OW 297
46554: ST_TO_ADDR
// if not result then
46555: LD_VAR 0 6
46559: NOT
46560: IFFALSE 46586
// result := [ [ i , tmp ] ] else
46562: LD_ADDR_VAR 0 6
46566: PUSH
46567: LD_VAR 0 7
46571: PUSH
46572: LD_VAR 0 9
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: EMPTY
46582: LIST
46583: ST_TO_ADDR
46584: GO 46728
// begin if result [ result ] [ 2 ] < tmp then
46586: LD_VAR 0 6
46590: PUSH
46591: LD_VAR 0 6
46595: ARRAY
46596: PUSH
46597: LD_INT 2
46599: ARRAY
46600: PUSH
46601: LD_VAR 0 9
46605: LESS
46606: IFFALSE 46648
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46608: LD_ADDR_VAR 0 6
46612: PUSH
46613: LD_VAR 0 6
46617: PPUSH
46618: LD_VAR 0 6
46622: PUSH
46623: LD_INT 1
46625: PLUS
46626: PPUSH
46627: LD_VAR 0 7
46631: PUSH
46632: LD_VAR 0 9
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PPUSH
46641: CALL_OW 2
46645: ST_TO_ADDR
46646: GO 46728
// for j = 1 to result do
46648: LD_ADDR_VAR 0 8
46652: PUSH
46653: DOUBLE
46654: LD_INT 1
46656: DEC
46657: ST_TO_ADDR
46658: LD_VAR 0 6
46662: PUSH
46663: FOR_TO
46664: IFFALSE 46726
// begin if tmp < result [ j ] [ 2 ] then
46666: LD_VAR 0 9
46670: PUSH
46671: LD_VAR 0 6
46675: PUSH
46676: LD_VAR 0 8
46680: ARRAY
46681: PUSH
46682: LD_INT 2
46684: ARRAY
46685: LESS
46686: IFFALSE 46724
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46688: LD_ADDR_VAR 0 6
46692: PUSH
46693: LD_VAR 0 6
46697: PPUSH
46698: LD_VAR 0 8
46702: PPUSH
46703: LD_VAR 0 7
46707: PUSH
46708: LD_VAR 0 9
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PPUSH
46717: CALL_OW 2
46721: ST_TO_ADDR
// break ;
46722: GO 46726
// end ; end ;
46724: GO 46663
46726: POP
46727: POP
// end ; end ;
46728: GO 46527
46730: POP
46731: POP
// if result and not asc then
46732: LD_VAR 0 6
46736: PUSH
46737: LD_VAR 0 4
46741: NOT
46742: AND
46743: IFFALSE 46818
// begin tmp := result ;
46745: LD_ADDR_VAR 0 9
46749: PUSH
46750: LD_VAR 0 6
46754: ST_TO_ADDR
// for i = tmp downto 1 do
46755: LD_ADDR_VAR 0 7
46759: PUSH
46760: DOUBLE
46761: LD_VAR 0 9
46765: INC
46766: ST_TO_ADDR
46767: LD_INT 1
46769: PUSH
46770: FOR_DOWNTO
46771: IFFALSE 46816
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46773: LD_ADDR_VAR 0 6
46777: PUSH
46778: LD_VAR 0 6
46782: PPUSH
46783: LD_VAR 0 9
46787: PUSH
46788: LD_VAR 0 7
46792: MINUS
46793: PUSH
46794: LD_INT 1
46796: PLUS
46797: PPUSH
46798: LD_VAR 0 9
46802: PUSH
46803: LD_VAR 0 7
46807: ARRAY
46808: PPUSH
46809: CALL_OW 1
46813: ST_TO_ADDR
46814: GO 46770
46816: POP
46817: POP
// end ; tmp := [ ] ;
46818: LD_ADDR_VAR 0 9
46822: PUSH
46823: EMPTY
46824: ST_TO_ADDR
// if mode then
46825: LD_VAR 0 5
46829: IFFALSE 46898
// begin for i = 1 to result do
46831: LD_ADDR_VAR 0 7
46835: PUSH
46836: DOUBLE
46837: LD_INT 1
46839: DEC
46840: ST_TO_ADDR
46841: LD_VAR 0 6
46845: PUSH
46846: FOR_TO
46847: IFFALSE 46886
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46849: LD_ADDR_VAR 0 9
46853: PUSH
46854: LD_VAR 0 9
46858: PPUSH
46859: LD_VAR 0 7
46863: PPUSH
46864: LD_VAR 0 6
46868: PUSH
46869: LD_VAR 0 7
46873: ARRAY
46874: PUSH
46875: LD_INT 1
46877: ARRAY
46878: PPUSH
46879: CALL_OW 1
46883: ST_TO_ADDR
46884: GO 46846
46886: POP
46887: POP
// result := tmp ;
46888: LD_ADDR_VAR 0 6
46892: PUSH
46893: LD_VAR 0 9
46897: ST_TO_ADDR
// end ; end ;
46898: LD_VAR 0 6
46902: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46903: LD_INT 0
46905: PPUSH
46906: PPUSH
46907: PPUSH
46908: PPUSH
46909: PPUSH
46910: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46911: LD_ADDR_VAR 0 5
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: EMPTY
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: ST_TO_ADDR
// if not x or not y then
46933: LD_VAR 0 2
46937: NOT
46938: PUSH
46939: LD_VAR 0 3
46943: NOT
46944: OR
46945: IFFALSE 46949
// exit ;
46947: GO 48599
// if not range then
46949: LD_VAR 0 4
46953: NOT
46954: IFFALSE 46964
// range := 10 ;
46956: LD_ADDR_VAR 0 4
46960: PUSH
46961: LD_INT 10
46963: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46964: LD_ADDR_VAR 0 8
46968: PUSH
46969: LD_INT 81
46971: PUSH
46972: LD_VAR 0 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 92
46983: PUSH
46984: LD_VAR 0 2
46988: PUSH
46989: LD_VAR 0 3
46993: PUSH
46994: LD_VAR 0 4
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 3
47007: PUSH
47008: LD_INT 21
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: LIST
47026: PPUSH
47027: CALL_OW 69
47031: ST_TO_ADDR
// if not tmp then
47032: LD_VAR 0 8
47036: NOT
47037: IFFALSE 47041
// exit ;
47039: GO 48599
// for i in tmp do
47041: LD_ADDR_VAR 0 6
47045: PUSH
47046: LD_VAR 0 8
47050: PUSH
47051: FOR_IN
47052: IFFALSE 48574
// begin points := [ 0 , 0 , 0 ] ;
47054: LD_ADDR_VAR 0 9
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: LIST
47072: ST_TO_ADDR
// bpoints := 1 ;
47073: LD_ADDR_VAR 0 10
47077: PUSH
47078: LD_INT 1
47080: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47081: LD_VAR 0 6
47085: PPUSH
47086: CALL_OW 247
47090: PUSH
47091: LD_INT 1
47093: DOUBLE
47094: EQUAL
47095: IFTRUE 47099
47097: GO 47677
47099: POP
// begin if GetClass ( i ) = 1 then
47100: LD_VAR 0 6
47104: PPUSH
47105: CALL_OW 257
47109: PUSH
47110: LD_INT 1
47112: EQUAL
47113: IFFALSE 47134
// points := [ 10 , 5 , 3 ] ;
47115: LD_ADDR_VAR 0 9
47119: PUSH
47120: LD_INT 10
47122: PUSH
47123: LD_INT 5
47125: PUSH
47126: LD_INT 3
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: LIST
47133: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47134: LD_VAR 0 6
47138: PPUSH
47139: CALL_OW 257
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: LD_INT 3
47149: PUSH
47150: LD_INT 4
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: LIST
47157: IN
47158: IFFALSE 47179
// points := [ 3 , 2 , 1 ] ;
47160: LD_ADDR_VAR 0 9
47164: PUSH
47165: LD_INT 3
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47179: LD_VAR 0 6
47183: PPUSH
47184: CALL_OW 257
47188: PUSH
47189: LD_INT 5
47191: EQUAL
47192: IFFALSE 47213
// points := [ 130 , 5 , 2 ] ;
47194: LD_ADDR_VAR 0 9
47198: PUSH
47199: LD_INT 130
47201: PUSH
47202: LD_INT 5
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: LIST
47212: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47213: LD_VAR 0 6
47217: PPUSH
47218: CALL_OW 257
47222: PUSH
47223: LD_INT 8
47225: EQUAL
47226: IFFALSE 47247
// points := [ 35 , 35 , 30 ] ;
47228: LD_ADDR_VAR 0 9
47232: PUSH
47233: LD_INT 35
47235: PUSH
47236: LD_INT 35
47238: PUSH
47239: LD_INT 30
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: LIST
47246: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47247: LD_VAR 0 6
47251: PPUSH
47252: CALL_OW 257
47256: PUSH
47257: LD_INT 9
47259: EQUAL
47260: IFFALSE 47281
// points := [ 20 , 55 , 40 ] ;
47262: LD_ADDR_VAR 0 9
47266: PUSH
47267: LD_INT 20
47269: PUSH
47270: LD_INT 55
47272: PUSH
47273: LD_INT 40
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: LIST
47280: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47281: LD_VAR 0 6
47285: PPUSH
47286: CALL_OW 257
47290: PUSH
47291: LD_INT 12
47293: PUSH
47294: LD_INT 16
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: IN
47301: IFFALSE 47322
// points := [ 5 , 3 , 2 ] ;
47303: LD_ADDR_VAR 0 9
47307: PUSH
47308: LD_INT 5
47310: PUSH
47311: LD_INT 3
47313: PUSH
47314: LD_INT 2
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: LIST
47321: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47322: LD_VAR 0 6
47326: PPUSH
47327: CALL_OW 257
47331: PUSH
47332: LD_INT 17
47334: EQUAL
47335: IFFALSE 47356
// points := [ 100 , 50 , 75 ] ;
47337: LD_ADDR_VAR 0 9
47341: PUSH
47342: LD_INT 100
47344: PUSH
47345: LD_INT 50
47347: PUSH
47348: LD_INT 75
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: LIST
47355: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47356: LD_VAR 0 6
47360: PPUSH
47361: CALL_OW 257
47365: PUSH
47366: LD_INT 15
47368: EQUAL
47369: IFFALSE 47390
// points := [ 10 , 5 , 3 ] ;
47371: LD_ADDR_VAR 0 9
47375: PUSH
47376: LD_INT 10
47378: PUSH
47379: LD_INT 5
47381: PUSH
47382: LD_INT 3
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: LIST
47389: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47390: LD_VAR 0 6
47394: PPUSH
47395: CALL_OW 257
47399: PUSH
47400: LD_INT 14
47402: EQUAL
47403: IFFALSE 47424
// points := [ 10 , 0 , 0 ] ;
47405: LD_ADDR_VAR 0 9
47409: PUSH
47410: LD_INT 10
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: LIST
47423: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47424: LD_VAR 0 6
47428: PPUSH
47429: CALL_OW 257
47433: PUSH
47434: LD_INT 11
47436: EQUAL
47437: IFFALSE 47458
// points := [ 30 , 10 , 5 ] ;
47439: LD_ADDR_VAR 0 9
47443: PUSH
47444: LD_INT 30
47446: PUSH
47447: LD_INT 10
47449: PUSH
47450: LD_INT 5
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: LIST
47457: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47458: LD_VAR 0 1
47462: PPUSH
47463: LD_INT 5
47465: PPUSH
47466: CALL_OW 321
47470: PUSH
47471: LD_INT 2
47473: EQUAL
47474: IFFALSE 47491
// bpoints := bpoints * 1.8 ;
47476: LD_ADDR_VAR 0 10
47480: PUSH
47481: LD_VAR 0 10
47485: PUSH
47486: LD_REAL  1.80000000000000E+0000
47489: MUL
47490: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47491: LD_VAR 0 6
47495: PPUSH
47496: CALL_OW 257
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: LD_INT 3
47509: PUSH
47510: LD_INT 4
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: IN
47519: PUSH
47520: LD_VAR 0 1
47524: PPUSH
47525: LD_INT 51
47527: PPUSH
47528: CALL_OW 321
47532: PUSH
47533: LD_INT 2
47535: EQUAL
47536: AND
47537: IFFALSE 47554
// bpoints := bpoints * 1.2 ;
47539: LD_ADDR_VAR 0 10
47543: PUSH
47544: LD_VAR 0 10
47548: PUSH
47549: LD_REAL  1.20000000000000E+0000
47552: MUL
47553: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47554: LD_VAR 0 6
47558: PPUSH
47559: CALL_OW 257
47563: PUSH
47564: LD_INT 5
47566: PUSH
47567: LD_INT 7
47569: PUSH
47570: LD_INT 9
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: LIST
47577: IN
47578: PUSH
47579: LD_VAR 0 1
47583: PPUSH
47584: LD_INT 52
47586: PPUSH
47587: CALL_OW 321
47591: PUSH
47592: LD_INT 2
47594: EQUAL
47595: AND
47596: IFFALSE 47613
// bpoints := bpoints * 1.5 ;
47598: LD_ADDR_VAR 0 10
47602: PUSH
47603: LD_VAR 0 10
47607: PUSH
47608: LD_REAL  1.50000000000000E+0000
47611: MUL
47612: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47613: LD_VAR 0 1
47617: PPUSH
47618: LD_INT 66
47620: PPUSH
47621: CALL_OW 321
47625: PUSH
47626: LD_INT 2
47628: EQUAL
47629: IFFALSE 47646
// bpoints := bpoints * 1.1 ;
47631: LD_ADDR_VAR 0 10
47635: PUSH
47636: LD_VAR 0 10
47640: PUSH
47641: LD_REAL  1.10000000000000E+0000
47644: MUL
47645: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47646: LD_ADDR_VAR 0 10
47650: PUSH
47651: LD_VAR 0 10
47655: PUSH
47656: LD_VAR 0 6
47660: PPUSH
47661: LD_INT 1
47663: PPUSH
47664: CALL_OW 259
47668: PUSH
47669: LD_REAL  1.15000000000000E+0000
47672: MUL
47673: MUL
47674: ST_TO_ADDR
// end ; unit_vehicle :
47675: GO 48503
47677: LD_INT 2
47679: DOUBLE
47680: EQUAL
47681: IFTRUE 47685
47683: GO 48491
47685: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47686: LD_VAR 0 6
47690: PPUSH
47691: CALL_OW 264
47695: PUSH
47696: LD_INT 2
47698: PUSH
47699: LD_INT 42
47701: PUSH
47702: LD_INT 24
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: LIST
47709: IN
47710: IFFALSE 47731
// points := [ 25 , 5 , 3 ] ;
47712: LD_ADDR_VAR 0 9
47716: PUSH
47717: LD_INT 25
47719: PUSH
47720: LD_INT 5
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: LIST
47730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47731: LD_VAR 0 6
47735: PPUSH
47736: CALL_OW 264
47740: PUSH
47741: LD_INT 4
47743: PUSH
47744: LD_INT 43
47746: PUSH
47747: LD_INT 25
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: LIST
47754: IN
47755: IFFALSE 47776
// points := [ 40 , 15 , 5 ] ;
47757: LD_ADDR_VAR 0 9
47761: PUSH
47762: LD_INT 40
47764: PUSH
47765: LD_INT 15
47767: PUSH
47768: LD_INT 5
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: LIST
47775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47776: LD_VAR 0 6
47780: PPUSH
47781: CALL_OW 264
47785: PUSH
47786: LD_INT 3
47788: PUSH
47789: LD_INT 23
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: IN
47796: IFFALSE 47817
// points := [ 7 , 25 , 8 ] ;
47798: LD_ADDR_VAR 0 9
47802: PUSH
47803: LD_INT 7
47805: PUSH
47806: LD_INT 25
47808: PUSH
47809: LD_INT 8
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: LIST
47816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47817: LD_VAR 0 6
47821: PPUSH
47822: CALL_OW 264
47826: PUSH
47827: LD_INT 5
47829: PUSH
47830: LD_INT 27
47832: PUSH
47833: LD_INT 44
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: IN
47841: IFFALSE 47862
// points := [ 14 , 50 , 16 ] ;
47843: LD_ADDR_VAR 0 9
47847: PUSH
47848: LD_INT 14
47850: PUSH
47851: LD_INT 50
47853: PUSH
47854: LD_INT 16
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: LIST
47861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47862: LD_VAR 0 6
47866: PPUSH
47867: CALL_OW 264
47871: PUSH
47872: LD_INT 6
47874: PUSH
47875: LD_INT 46
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: IN
47882: IFFALSE 47903
// points := [ 32 , 120 , 70 ] ;
47884: LD_ADDR_VAR 0 9
47888: PUSH
47889: LD_INT 32
47891: PUSH
47892: LD_INT 120
47894: PUSH
47895: LD_INT 70
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: LIST
47902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47903: LD_VAR 0 6
47907: PPUSH
47908: CALL_OW 264
47912: PUSH
47913: LD_INT 7
47915: PUSH
47916: LD_INT 28
47918: PUSH
47919: LD_INT 45
47921: PUSH
47922: LD_INT 92
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: IN
47931: IFFALSE 47952
// points := [ 35 , 20 , 45 ] ;
47933: LD_ADDR_VAR 0 9
47937: PUSH
47938: LD_INT 35
47940: PUSH
47941: LD_INT 20
47943: PUSH
47944: LD_INT 45
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: LIST
47951: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47952: LD_VAR 0 6
47956: PPUSH
47957: CALL_OW 264
47961: PUSH
47962: LD_INT 47
47964: PUSH
47965: EMPTY
47966: LIST
47967: IN
47968: IFFALSE 47989
// points := [ 67 , 45 , 75 ] ;
47970: LD_ADDR_VAR 0 9
47974: PUSH
47975: LD_INT 67
47977: PUSH
47978: LD_INT 45
47980: PUSH
47981: LD_INT 75
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: LIST
47988: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47989: LD_VAR 0 6
47993: PPUSH
47994: CALL_OW 264
47998: PUSH
47999: LD_INT 26
48001: PUSH
48002: EMPTY
48003: LIST
48004: IN
48005: IFFALSE 48026
// points := [ 120 , 30 , 80 ] ;
48007: LD_ADDR_VAR 0 9
48011: PUSH
48012: LD_INT 120
48014: PUSH
48015: LD_INT 30
48017: PUSH
48018: LD_INT 80
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: LIST
48025: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48026: LD_VAR 0 6
48030: PPUSH
48031: CALL_OW 264
48035: PUSH
48036: LD_INT 22
48038: PUSH
48039: EMPTY
48040: LIST
48041: IN
48042: IFFALSE 48063
// points := [ 40 , 1 , 1 ] ;
48044: LD_ADDR_VAR 0 9
48048: PUSH
48049: LD_INT 40
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: LIST
48062: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48063: LD_VAR 0 6
48067: PPUSH
48068: CALL_OW 264
48072: PUSH
48073: LD_INT 29
48075: PUSH
48076: EMPTY
48077: LIST
48078: IN
48079: IFFALSE 48100
// points := [ 70 , 200 , 400 ] ;
48081: LD_ADDR_VAR 0 9
48085: PUSH
48086: LD_INT 70
48088: PUSH
48089: LD_INT 200
48091: PUSH
48092: LD_INT 400
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: LIST
48099: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48100: LD_VAR 0 6
48104: PPUSH
48105: CALL_OW 264
48109: PUSH
48110: LD_INT 14
48112: PUSH
48113: LD_INT 53
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: IN
48120: IFFALSE 48141
// points := [ 40 , 10 , 20 ] ;
48122: LD_ADDR_VAR 0 9
48126: PUSH
48127: LD_INT 40
48129: PUSH
48130: LD_INT 10
48132: PUSH
48133: LD_INT 20
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: LIST
48140: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48141: LD_VAR 0 6
48145: PPUSH
48146: CALL_OW 264
48150: PUSH
48151: LD_INT 9
48153: PUSH
48154: EMPTY
48155: LIST
48156: IN
48157: IFFALSE 48178
// points := [ 5 , 70 , 20 ] ;
48159: LD_ADDR_VAR 0 9
48163: PUSH
48164: LD_INT 5
48166: PUSH
48167: LD_INT 70
48169: PUSH
48170: LD_INT 20
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: LIST
48177: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48178: LD_VAR 0 6
48182: PPUSH
48183: CALL_OW 264
48187: PUSH
48188: LD_INT 10
48190: PUSH
48191: EMPTY
48192: LIST
48193: IN
48194: IFFALSE 48215
// points := [ 35 , 110 , 70 ] ;
48196: LD_ADDR_VAR 0 9
48200: PUSH
48201: LD_INT 35
48203: PUSH
48204: LD_INT 110
48206: PUSH
48207: LD_INT 70
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: LIST
48214: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48215: LD_VAR 0 6
48219: PPUSH
48220: CALL_OW 265
48224: PUSH
48225: LD_INT 25
48227: EQUAL
48228: IFFALSE 48249
// points := [ 80 , 65 , 100 ] ;
48230: LD_ADDR_VAR 0 9
48234: PUSH
48235: LD_INT 80
48237: PUSH
48238: LD_INT 65
48240: PUSH
48241: LD_INT 100
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: LIST
48248: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48249: LD_VAR 0 6
48253: PPUSH
48254: CALL_OW 263
48258: PUSH
48259: LD_INT 1
48261: EQUAL
48262: IFFALSE 48297
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48264: LD_ADDR_VAR 0 10
48268: PUSH
48269: LD_VAR 0 10
48273: PUSH
48274: LD_VAR 0 6
48278: PPUSH
48279: CALL_OW 311
48283: PPUSH
48284: LD_INT 3
48286: PPUSH
48287: CALL_OW 259
48291: PUSH
48292: LD_INT 4
48294: MUL
48295: MUL
48296: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48297: LD_VAR 0 6
48301: PPUSH
48302: CALL_OW 263
48306: PUSH
48307: LD_INT 2
48309: EQUAL
48310: IFFALSE 48361
// begin j := IsControledBy ( i ) ;
48312: LD_ADDR_VAR 0 7
48316: PUSH
48317: LD_VAR 0 6
48321: PPUSH
48322: CALL_OW 312
48326: ST_TO_ADDR
// if j then
48327: LD_VAR 0 7
48331: IFFALSE 48361
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48333: LD_ADDR_VAR 0 10
48337: PUSH
48338: LD_VAR 0 10
48342: PUSH
48343: LD_VAR 0 7
48347: PPUSH
48348: LD_INT 3
48350: PPUSH
48351: CALL_OW 259
48355: PUSH
48356: LD_INT 3
48358: MUL
48359: MUL
48360: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48361: LD_VAR 0 6
48365: PPUSH
48366: CALL_OW 264
48370: PUSH
48371: LD_INT 5
48373: PUSH
48374: LD_INT 6
48376: PUSH
48377: LD_INT 46
48379: PUSH
48380: LD_INT 44
48382: PUSH
48383: LD_INT 47
48385: PUSH
48386: LD_INT 45
48388: PUSH
48389: LD_INT 28
48391: PUSH
48392: LD_INT 7
48394: PUSH
48395: LD_INT 27
48397: PUSH
48398: LD_INT 29
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: IN
48413: PUSH
48414: LD_VAR 0 1
48418: PPUSH
48419: LD_INT 52
48421: PPUSH
48422: CALL_OW 321
48426: PUSH
48427: LD_INT 2
48429: EQUAL
48430: AND
48431: IFFALSE 48448
// bpoints := bpoints * 1.2 ;
48433: LD_ADDR_VAR 0 10
48437: PUSH
48438: LD_VAR 0 10
48442: PUSH
48443: LD_REAL  1.20000000000000E+0000
48446: MUL
48447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48448: LD_VAR 0 6
48452: PPUSH
48453: CALL_OW 264
48457: PUSH
48458: LD_INT 6
48460: PUSH
48461: LD_INT 46
48463: PUSH
48464: LD_INT 47
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: LIST
48471: IN
48472: IFFALSE 48489
// bpoints := bpoints * 1.2 ;
48474: LD_ADDR_VAR 0 10
48478: PUSH
48479: LD_VAR 0 10
48483: PUSH
48484: LD_REAL  1.20000000000000E+0000
48487: MUL
48488: ST_TO_ADDR
// end ; unit_building :
48489: GO 48503
48491: LD_INT 3
48493: DOUBLE
48494: EQUAL
48495: IFTRUE 48499
48497: GO 48502
48499: POP
// ; end ;
48500: GO 48503
48502: POP
// for j = 1 to 3 do
48503: LD_ADDR_VAR 0 7
48507: PUSH
48508: DOUBLE
48509: LD_INT 1
48511: DEC
48512: ST_TO_ADDR
48513: LD_INT 3
48515: PUSH
48516: FOR_TO
48517: IFFALSE 48570
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48519: LD_ADDR_VAR 0 5
48523: PUSH
48524: LD_VAR 0 5
48528: PPUSH
48529: LD_VAR 0 7
48533: PPUSH
48534: LD_VAR 0 5
48538: PUSH
48539: LD_VAR 0 7
48543: ARRAY
48544: PUSH
48545: LD_VAR 0 9
48549: PUSH
48550: LD_VAR 0 7
48554: ARRAY
48555: PUSH
48556: LD_VAR 0 10
48560: MUL
48561: PLUS
48562: PPUSH
48563: CALL_OW 1
48567: ST_TO_ADDR
48568: GO 48516
48570: POP
48571: POP
// end ;
48572: GO 47051
48574: POP
48575: POP
// result := Replace ( result , 4 , tmp ) ;
48576: LD_ADDR_VAR 0 5
48580: PUSH
48581: LD_VAR 0 5
48585: PPUSH
48586: LD_INT 4
48588: PPUSH
48589: LD_VAR 0 8
48593: PPUSH
48594: CALL_OW 1
48598: ST_TO_ADDR
// end ;
48599: LD_VAR 0 5
48603: RET
// export function DangerAtRange ( unit , range ) ; begin
48604: LD_INT 0
48606: PPUSH
// if not unit then
48607: LD_VAR 0 1
48611: NOT
48612: IFFALSE 48616
// exit ;
48614: GO 48661
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48616: LD_ADDR_VAR 0 3
48620: PUSH
48621: LD_VAR 0 1
48625: PPUSH
48626: CALL_OW 255
48630: PPUSH
48631: LD_VAR 0 1
48635: PPUSH
48636: CALL_OW 250
48640: PPUSH
48641: LD_VAR 0 1
48645: PPUSH
48646: CALL_OW 251
48650: PPUSH
48651: LD_VAR 0 2
48655: PPUSH
48656: CALL 46903 0 4
48660: ST_TO_ADDR
// end ;
48661: LD_VAR 0 3
48665: RET
// export function DangerInArea ( side , area ) ; begin
48666: LD_INT 0
48668: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48669: LD_ADDR_VAR 0 3
48673: PUSH
48674: LD_VAR 0 2
48678: PPUSH
48679: LD_INT 81
48681: PUSH
48682: LD_VAR 0 1
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PPUSH
48691: CALL_OW 70
48695: ST_TO_ADDR
// end ;
48696: LD_VAR 0 3
48700: RET
// export function IsExtension ( b ) ; begin
48701: LD_INT 0
48703: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48704: LD_ADDR_VAR 0 2
48708: PUSH
48709: LD_VAR 0 1
48713: PUSH
48714: LD_INT 23
48716: PUSH
48717: LD_INT 20
48719: PUSH
48720: LD_INT 22
48722: PUSH
48723: LD_INT 17
48725: PUSH
48726: LD_INT 24
48728: PUSH
48729: LD_INT 21
48731: PUSH
48732: LD_INT 19
48734: PUSH
48735: LD_INT 16
48737: PUSH
48738: LD_INT 25
48740: PUSH
48741: LD_INT 18
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: IN
48756: ST_TO_ADDR
// end ;
48757: LD_VAR 0 2
48761: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48762: LD_INT 0
48764: PPUSH
48765: PPUSH
48766: PPUSH
// result := [ ] ;
48767: LD_ADDR_VAR 0 4
48771: PUSH
48772: EMPTY
48773: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48774: LD_ADDR_VAR 0 5
48778: PUSH
48779: LD_VAR 0 2
48783: PPUSH
48784: LD_INT 21
48786: PUSH
48787: LD_INT 3
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PPUSH
48794: CALL_OW 70
48798: ST_TO_ADDR
// if not tmp then
48799: LD_VAR 0 5
48803: NOT
48804: IFFALSE 48808
// exit ;
48806: GO 48872
// if checkLink then
48808: LD_VAR 0 3
48812: IFFALSE 48862
// begin for i in tmp do
48814: LD_ADDR_VAR 0 6
48818: PUSH
48819: LD_VAR 0 5
48823: PUSH
48824: FOR_IN
48825: IFFALSE 48860
// if GetBase ( i ) <> base then
48827: LD_VAR 0 6
48831: PPUSH
48832: CALL_OW 274
48836: PUSH
48837: LD_VAR 0 1
48841: NONEQUAL
48842: IFFALSE 48858
// ComLinkToBase ( base , i ) ;
48844: LD_VAR 0 1
48848: PPUSH
48849: LD_VAR 0 6
48853: PPUSH
48854: CALL_OW 169
48858: GO 48824
48860: POP
48861: POP
// end ; result := tmp ;
48862: LD_ADDR_VAR 0 4
48866: PUSH
48867: LD_VAR 0 5
48871: ST_TO_ADDR
// end ;
48872: LD_VAR 0 4
48876: RET
// export function ComComplete ( units , b ) ; var i ; begin
48877: LD_INT 0
48879: PPUSH
48880: PPUSH
// if not units then
48881: LD_VAR 0 1
48885: NOT
48886: IFFALSE 48890
// exit ;
48888: GO 48980
// for i in units do
48890: LD_ADDR_VAR 0 4
48894: PUSH
48895: LD_VAR 0 1
48899: PUSH
48900: FOR_IN
48901: IFFALSE 48978
// if BuildingStatus ( b ) = bs_build then
48903: LD_VAR 0 2
48907: PPUSH
48908: CALL_OW 461
48912: PUSH
48913: LD_INT 1
48915: EQUAL
48916: IFFALSE 48976
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48918: LD_VAR 0 4
48922: PPUSH
48923: LD_STRING h
48925: PUSH
48926: LD_VAR 0 2
48930: PPUSH
48931: CALL_OW 250
48935: PUSH
48936: LD_VAR 0 2
48940: PPUSH
48941: CALL_OW 251
48945: PUSH
48946: LD_VAR 0 2
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: PUSH
48969: EMPTY
48970: LIST
48971: PPUSH
48972: CALL_OW 446
48976: GO 48900
48978: POP
48979: POP
// end ;
48980: LD_VAR 0 3
48984: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48985: LD_INT 0
48987: PPUSH
48988: PPUSH
48989: PPUSH
48990: PPUSH
48991: PPUSH
48992: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48993: LD_VAR 0 1
48997: NOT
48998: PUSH
48999: LD_VAR 0 1
49003: PPUSH
49004: CALL_OW 263
49008: PUSH
49009: LD_INT 2
49011: NONEQUAL
49012: OR
49013: IFFALSE 49017
// exit ;
49015: GO 49333
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49017: LD_ADDR_VAR 0 6
49021: PUSH
49022: LD_INT 22
49024: PUSH
49025: LD_VAR 0 1
49029: PPUSH
49030: CALL_OW 255
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 30
49044: PUSH
49045: LD_INT 36
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 34
49054: PUSH
49055: LD_INT 31
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: LIST
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PPUSH
49071: CALL_OW 69
49075: ST_TO_ADDR
// if not tmp then
49076: LD_VAR 0 6
49080: NOT
49081: IFFALSE 49085
// exit ;
49083: GO 49333
// result := [ ] ;
49085: LD_ADDR_VAR 0 2
49089: PUSH
49090: EMPTY
49091: ST_TO_ADDR
// for i in tmp do
49092: LD_ADDR_VAR 0 3
49096: PUSH
49097: LD_VAR 0 6
49101: PUSH
49102: FOR_IN
49103: IFFALSE 49174
// begin t := UnitsInside ( i ) ;
49105: LD_ADDR_VAR 0 4
49109: PUSH
49110: LD_VAR 0 3
49114: PPUSH
49115: CALL_OW 313
49119: ST_TO_ADDR
// if t then
49120: LD_VAR 0 4
49124: IFFALSE 49172
// for j in t do
49126: LD_ADDR_VAR 0 7
49130: PUSH
49131: LD_VAR 0 4
49135: PUSH
49136: FOR_IN
49137: IFFALSE 49170
// result := Replace ( result , result + 1 , j ) ;
49139: LD_ADDR_VAR 0 2
49143: PUSH
49144: LD_VAR 0 2
49148: PPUSH
49149: LD_VAR 0 2
49153: PUSH
49154: LD_INT 1
49156: PLUS
49157: PPUSH
49158: LD_VAR 0 7
49162: PPUSH
49163: CALL_OW 1
49167: ST_TO_ADDR
49168: GO 49136
49170: POP
49171: POP
// end ;
49172: GO 49102
49174: POP
49175: POP
// if not result then
49176: LD_VAR 0 2
49180: NOT
49181: IFFALSE 49185
// exit ;
49183: GO 49333
// mech := result [ 1 ] ;
49185: LD_ADDR_VAR 0 5
49189: PUSH
49190: LD_VAR 0 2
49194: PUSH
49195: LD_INT 1
49197: ARRAY
49198: ST_TO_ADDR
// if result > 1 then
49199: LD_VAR 0 2
49203: PUSH
49204: LD_INT 1
49206: GREATER
49207: IFFALSE 49319
// begin for i = 2 to result do
49209: LD_ADDR_VAR 0 3
49213: PUSH
49214: DOUBLE
49215: LD_INT 2
49217: DEC
49218: ST_TO_ADDR
49219: LD_VAR 0 2
49223: PUSH
49224: FOR_TO
49225: IFFALSE 49317
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49227: LD_ADDR_VAR 0 4
49231: PUSH
49232: LD_VAR 0 2
49236: PUSH
49237: LD_VAR 0 3
49241: ARRAY
49242: PPUSH
49243: LD_INT 3
49245: PPUSH
49246: CALL_OW 259
49250: PUSH
49251: LD_VAR 0 2
49255: PUSH
49256: LD_VAR 0 3
49260: ARRAY
49261: PPUSH
49262: CALL_OW 432
49266: MINUS
49267: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49268: LD_VAR 0 4
49272: PUSH
49273: LD_VAR 0 5
49277: PPUSH
49278: LD_INT 3
49280: PPUSH
49281: CALL_OW 259
49285: PUSH
49286: LD_VAR 0 5
49290: PPUSH
49291: CALL_OW 432
49295: MINUS
49296: GREATEREQUAL
49297: IFFALSE 49315
// mech := result [ i ] ;
49299: LD_ADDR_VAR 0 5
49303: PUSH
49304: LD_VAR 0 2
49308: PUSH
49309: LD_VAR 0 3
49313: ARRAY
49314: ST_TO_ADDR
// end ;
49315: GO 49224
49317: POP
49318: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49319: LD_VAR 0 1
49323: PPUSH
49324: LD_VAR 0 5
49328: PPUSH
49329: CALL_OW 135
// end ;
49333: LD_VAR 0 2
49337: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49338: LD_INT 0
49340: PPUSH
49341: PPUSH
49342: PPUSH
49343: PPUSH
49344: PPUSH
49345: PPUSH
49346: PPUSH
49347: PPUSH
49348: PPUSH
49349: PPUSH
49350: PPUSH
49351: PPUSH
49352: PPUSH
// result := [ ] ;
49353: LD_ADDR_VAR 0 7
49357: PUSH
49358: EMPTY
49359: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49360: LD_VAR 0 1
49364: PPUSH
49365: CALL_OW 266
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: IN
49380: NOT
49381: IFFALSE 49385
// exit ;
49383: GO 51019
// if name then
49385: LD_VAR 0 3
49389: IFFALSE 49405
// SetBName ( base_dep , name ) ;
49391: LD_VAR 0 1
49395: PPUSH
49396: LD_VAR 0 3
49400: PPUSH
49401: CALL_OW 500
// base := GetBase ( base_dep ) ;
49405: LD_ADDR_VAR 0 15
49409: PUSH
49410: LD_VAR 0 1
49414: PPUSH
49415: CALL_OW 274
49419: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49420: LD_ADDR_VAR 0 16
49424: PUSH
49425: LD_VAR 0 1
49429: PPUSH
49430: CALL_OW 255
49434: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49435: LD_ADDR_VAR 0 17
49439: PUSH
49440: LD_VAR 0 1
49444: PPUSH
49445: CALL_OW 248
49449: ST_TO_ADDR
// if sources then
49450: LD_VAR 0 5
49454: IFFALSE 49501
// for i = 1 to 3 do
49456: LD_ADDR_VAR 0 8
49460: PUSH
49461: DOUBLE
49462: LD_INT 1
49464: DEC
49465: ST_TO_ADDR
49466: LD_INT 3
49468: PUSH
49469: FOR_TO
49470: IFFALSE 49499
// AddResourceType ( base , i , sources [ i ] ) ;
49472: LD_VAR 0 15
49476: PPUSH
49477: LD_VAR 0 8
49481: PPUSH
49482: LD_VAR 0 5
49486: PUSH
49487: LD_VAR 0 8
49491: ARRAY
49492: PPUSH
49493: CALL_OW 276
49497: GO 49469
49499: POP
49500: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49501: LD_ADDR_VAR 0 18
49505: PUSH
49506: LD_VAR 0 15
49510: PPUSH
49511: LD_VAR 0 2
49515: PPUSH
49516: LD_INT 1
49518: PPUSH
49519: CALL 48762 0 3
49523: ST_TO_ADDR
// InitHc ;
49524: CALL_OW 19
// InitUc ;
49528: CALL_OW 18
// uc_side := side ;
49532: LD_ADDR_OWVAR 20
49536: PUSH
49537: LD_VAR 0 16
49541: ST_TO_ADDR
// uc_nation := nation ;
49542: LD_ADDR_OWVAR 21
49546: PUSH
49547: LD_VAR 0 17
49551: ST_TO_ADDR
// if buildings then
49552: LD_VAR 0 18
49556: IFFALSE 50878
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49558: LD_ADDR_VAR 0 19
49562: PUSH
49563: LD_VAR 0 18
49567: PPUSH
49568: LD_INT 2
49570: PUSH
49571: LD_INT 30
49573: PUSH
49574: LD_INT 29
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 30
49583: PUSH
49584: LD_INT 30
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: LIST
49595: PPUSH
49596: CALL_OW 72
49600: ST_TO_ADDR
// if tmp then
49601: LD_VAR 0 19
49605: IFFALSE 49653
// for i in tmp do
49607: LD_ADDR_VAR 0 8
49611: PUSH
49612: LD_VAR 0 19
49616: PUSH
49617: FOR_IN
49618: IFFALSE 49651
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49620: LD_VAR 0 8
49624: PPUSH
49625: CALL_OW 250
49629: PPUSH
49630: LD_VAR 0 8
49634: PPUSH
49635: CALL_OW 251
49639: PPUSH
49640: LD_VAR 0 16
49644: PPUSH
49645: CALL_OW 441
49649: GO 49617
49651: POP
49652: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49653: LD_VAR 0 18
49657: PPUSH
49658: LD_INT 2
49660: PUSH
49661: LD_INT 30
49663: PUSH
49664: LD_INT 32
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 30
49673: PUSH
49674: LD_INT 33
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: LIST
49685: PPUSH
49686: CALL_OW 72
49690: IFFALSE 49778
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49692: LD_ADDR_VAR 0 8
49696: PUSH
49697: LD_VAR 0 18
49701: PPUSH
49702: LD_INT 2
49704: PUSH
49705: LD_INT 30
49707: PUSH
49708: LD_INT 32
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 30
49717: PUSH
49718: LD_INT 33
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: LIST
49729: PPUSH
49730: CALL_OW 72
49734: PUSH
49735: FOR_IN
49736: IFFALSE 49776
// begin if not GetBWeapon ( i ) then
49738: LD_VAR 0 8
49742: PPUSH
49743: CALL_OW 269
49747: NOT
49748: IFFALSE 49774
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49750: LD_VAR 0 8
49754: PPUSH
49755: LD_VAR 0 8
49759: PPUSH
49760: LD_VAR 0 2
49764: PPUSH
49765: CALL 51024 0 2
49769: PPUSH
49770: CALL_OW 431
// end ;
49774: GO 49735
49776: POP
49777: POP
// end ; for i = 1 to personel do
49778: LD_ADDR_VAR 0 8
49782: PUSH
49783: DOUBLE
49784: LD_INT 1
49786: DEC
49787: ST_TO_ADDR
49788: LD_VAR 0 6
49792: PUSH
49793: FOR_TO
49794: IFFALSE 50858
// begin if i > 4 then
49796: LD_VAR 0 8
49800: PUSH
49801: LD_INT 4
49803: GREATER
49804: IFFALSE 49808
// break ;
49806: GO 50858
// case i of 1 :
49808: LD_VAR 0 8
49812: PUSH
49813: LD_INT 1
49815: DOUBLE
49816: EQUAL
49817: IFTRUE 49821
49819: GO 49901
49821: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49822: LD_ADDR_VAR 0 12
49826: PUSH
49827: LD_VAR 0 18
49831: PPUSH
49832: LD_INT 22
49834: PUSH
49835: LD_VAR 0 16
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 58
49846: PUSH
49847: EMPTY
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: PUSH
49853: LD_INT 30
49855: PUSH
49856: LD_INT 32
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 30
49865: PUSH
49866: LD_INT 4
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 30
49875: PUSH
49876: LD_INT 5
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: LIST
49893: PPUSH
49894: CALL_OW 72
49898: ST_TO_ADDR
49899: GO 50123
49901: LD_INT 2
49903: DOUBLE
49904: EQUAL
49905: IFTRUE 49909
49907: GO 49971
49909: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49910: LD_ADDR_VAR 0 12
49914: PUSH
49915: LD_VAR 0 18
49919: PPUSH
49920: LD_INT 22
49922: PUSH
49923: LD_VAR 0 16
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 2
49934: PUSH
49935: LD_INT 30
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 30
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: LIST
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PPUSH
49964: CALL_OW 72
49968: ST_TO_ADDR
49969: GO 50123
49971: LD_INT 3
49973: DOUBLE
49974: EQUAL
49975: IFTRUE 49979
49977: GO 50041
49979: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49980: LD_ADDR_VAR 0 12
49984: PUSH
49985: LD_VAR 0 18
49989: PPUSH
49990: LD_INT 22
49992: PUSH
49993: LD_VAR 0 16
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: LD_INT 30
50007: PUSH
50008: LD_INT 2
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 30
50017: PUSH
50018: LD_INT 3
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: LIST
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PPUSH
50034: CALL_OW 72
50038: ST_TO_ADDR
50039: GO 50123
50041: LD_INT 4
50043: DOUBLE
50044: EQUAL
50045: IFTRUE 50049
50047: GO 50122
50049: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50050: LD_ADDR_VAR 0 12
50054: PUSH
50055: LD_VAR 0 18
50059: PPUSH
50060: LD_INT 22
50062: PUSH
50063: LD_VAR 0 16
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: PUSH
50075: LD_INT 30
50077: PUSH
50078: LD_INT 6
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 30
50087: PUSH
50088: LD_INT 7
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 30
50097: PUSH
50098: LD_INT 8
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PPUSH
50115: CALL_OW 72
50119: ST_TO_ADDR
50120: GO 50123
50122: POP
// if i = 1 then
50123: LD_VAR 0 8
50127: PUSH
50128: LD_INT 1
50130: EQUAL
50131: IFFALSE 50242
// begin tmp := [ ] ;
50133: LD_ADDR_VAR 0 19
50137: PUSH
50138: EMPTY
50139: ST_TO_ADDR
// for j in f do
50140: LD_ADDR_VAR 0 9
50144: PUSH
50145: LD_VAR 0 12
50149: PUSH
50150: FOR_IN
50151: IFFALSE 50224
// if GetBType ( j ) = b_bunker then
50153: LD_VAR 0 9
50157: PPUSH
50158: CALL_OW 266
50162: PUSH
50163: LD_INT 32
50165: EQUAL
50166: IFFALSE 50193
// tmp := Insert ( tmp , 1 , j ) else
50168: LD_ADDR_VAR 0 19
50172: PUSH
50173: LD_VAR 0 19
50177: PPUSH
50178: LD_INT 1
50180: PPUSH
50181: LD_VAR 0 9
50185: PPUSH
50186: CALL_OW 2
50190: ST_TO_ADDR
50191: GO 50222
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50193: LD_ADDR_VAR 0 19
50197: PUSH
50198: LD_VAR 0 19
50202: PPUSH
50203: LD_VAR 0 19
50207: PUSH
50208: LD_INT 1
50210: PLUS
50211: PPUSH
50212: LD_VAR 0 9
50216: PPUSH
50217: CALL_OW 2
50221: ST_TO_ADDR
50222: GO 50150
50224: POP
50225: POP
// if tmp then
50226: LD_VAR 0 19
50230: IFFALSE 50242
// f := tmp ;
50232: LD_ADDR_VAR 0 12
50236: PUSH
50237: LD_VAR 0 19
50241: ST_TO_ADDR
// end ; x := personel [ i ] ;
50242: LD_ADDR_VAR 0 13
50246: PUSH
50247: LD_VAR 0 6
50251: PUSH
50252: LD_VAR 0 8
50256: ARRAY
50257: ST_TO_ADDR
// if x = - 1 then
50258: LD_VAR 0 13
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: EQUAL
50267: IFFALSE 50476
// begin for j in f do
50269: LD_ADDR_VAR 0 9
50273: PUSH
50274: LD_VAR 0 12
50278: PUSH
50279: FOR_IN
50280: IFFALSE 50472
// repeat InitHc ;
50282: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50286: LD_VAR 0 9
50290: PPUSH
50291: CALL_OW 266
50295: PUSH
50296: LD_INT 5
50298: EQUAL
50299: IFFALSE 50369
// begin if UnitsInside ( j ) < 3 then
50301: LD_VAR 0 9
50305: PPUSH
50306: CALL_OW 313
50310: PUSH
50311: LD_INT 3
50313: LESS
50314: IFFALSE 50350
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50316: LD_INT 0
50318: PPUSH
50319: LD_INT 5
50321: PUSH
50322: LD_INT 8
50324: PUSH
50325: LD_INT 9
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: LIST
50332: PUSH
50333: LD_VAR 0 17
50337: ARRAY
50338: PPUSH
50339: LD_VAR 0 4
50343: PPUSH
50344: CALL_OW 380
50348: GO 50367
// PrepareHuman ( false , i , skill ) ;
50350: LD_INT 0
50352: PPUSH
50353: LD_VAR 0 8
50357: PPUSH
50358: LD_VAR 0 4
50362: PPUSH
50363: CALL_OW 380
// end else
50367: GO 50386
// PrepareHuman ( false , i , skill ) ;
50369: LD_INT 0
50371: PPUSH
50372: LD_VAR 0 8
50376: PPUSH
50377: LD_VAR 0 4
50381: PPUSH
50382: CALL_OW 380
// un := CreateHuman ;
50386: LD_ADDR_VAR 0 14
50390: PUSH
50391: CALL_OW 44
50395: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50396: LD_ADDR_VAR 0 7
50400: PUSH
50401: LD_VAR 0 7
50405: PPUSH
50406: LD_INT 1
50408: PPUSH
50409: LD_VAR 0 14
50413: PPUSH
50414: CALL_OW 2
50418: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50419: LD_VAR 0 14
50423: PPUSH
50424: LD_VAR 0 9
50428: PPUSH
50429: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50433: LD_VAR 0 9
50437: PPUSH
50438: CALL_OW 313
50442: PUSH
50443: LD_INT 6
50445: EQUAL
50446: PUSH
50447: LD_VAR 0 9
50451: PPUSH
50452: CALL_OW 266
50456: PUSH
50457: LD_INT 32
50459: PUSH
50460: LD_INT 31
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: IN
50467: OR
50468: IFFALSE 50282
50470: GO 50279
50472: POP
50473: POP
// end else
50474: GO 50856
// for j = 1 to x do
50476: LD_ADDR_VAR 0 9
50480: PUSH
50481: DOUBLE
50482: LD_INT 1
50484: DEC
50485: ST_TO_ADDR
50486: LD_VAR 0 13
50490: PUSH
50491: FOR_TO
50492: IFFALSE 50854
// begin InitHc ;
50494: CALL_OW 19
// if not f then
50498: LD_VAR 0 12
50502: NOT
50503: IFFALSE 50592
// begin PrepareHuman ( false , i , skill ) ;
50505: LD_INT 0
50507: PPUSH
50508: LD_VAR 0 8
50512: PPUSH
50513: LD_VAR 0 4
50517: PPUSH
50518: CALL_OW 380
// un := CreateHuman ;
50522: LD_ADDR_VAR 0 14
50526: PUSH
50527: CALL_OW 44
50531: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50532: LD_ADDR_VAR 0 7
50536: PUSH
50537: LD_VAR 0 7
50541: PPUSH
50542: LD_INT 1
50544: PPUSH
50545: LD_VAR 0 14
50549: PPUSH
50550: CALL_OW 2
50554: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50555: LD_VAR 0 14
50559: PPUSH
50560: LD_VAR 0 1
50564: PPUSH
50565: CALL_OW 250
50569: PPUSH
50570: LD_VAR 0 1
50574: PPUSH
50575: CALL_OW 251
50579: PPUSH
50580: LD_INT 10
50582: PPUSH
50583: LD_INT 0
50585: PPUSH
50586: CALL_OW 50
// continue ;
50590: GO 50491
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50592: LD_VAR 0 12
50596: PUSH
50597: LD_INT 1
50599: ARRAY
50600: PPUSH
50601: CALL_OW 313
50605: PUSH
50606: LD_VAR 0 12
50610: PUSH
50611: LD_INT 1
50613: ARRAY
50614: PPUSH
50615: CALL_OW 266
50619: PUSH
50620: LD_INT 32
50622: PUSH
50623: LD_INT 31
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: IN
50630: AND
50631: PUSH
50632: LD_VAR 0 12
50636: PUSH
50637: LD_INT 1
50639: ARRAY
50640: PPUSH
50641: CALL_OW 313
50645: PUSH
50646: LD_INT 6
50648: EQUAL
50649: OR
50650: IFFALSE 50670
// f := Delete ( f , 1 ) ;
50652: LD_ADDR_VAR 0 12
50656: PUSH
50657: LD_VAR 0 12
50661: PPUSH
50662: LD_INT 1
50664: PPUSH
50665: CALL_OW 3
50669: ST_TO_ADDR
// if not f then
50670: LD_VAR 0 12
50674: NOT
50675: IFFALSE 50693
// begin x := x + 2 ;
50677: LD_ADDR_VAR 0 13
50681: PUSH
50682: LD_VAR 0 13
50686: PUSH
50687: LD_INT 2
50689: PLUS
50690: ST_TO_ADDR
// continue ;
50691: GO 50491
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50693: LD_VAR 0 12
50697: PUSH
50698: LD_INT 1
50700: ARRAY
50701: PPUSH
50702: CALL_OW 266
50706: PUSH
50707: LD_INT 5
50709: EQUAL
50710: IFFALSE 50784
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50712: LD_VAR 0 12
50716: PUSH
50717: LD_INT 1
50719: ARRAY
50720: PPUSH
50721: CALL_OW 313
50725: PUSH
50726: LD_INT 3
50728: LESS
50729: IFFALSE 50765
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50731: LD_INT 0
50733: PPUSH
50734: LD_INT 5
50736: PUSH
50737: LD_INT 8
50739: PUSH
50740: LD_INT 9
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: LIST
50747: PUSH
50748: LD_VAR 0 17
50752: ARRAY
50753: PPUSH
50754: LD_VAR 0 4
50758: PPUSH
50759: CALL_OW 380
50763: GO 50782
// PrepareHuman ( false , i , skill ) ;
50765: LD_INT 0
50767: PPUSH
50768: LD_VAR 0 8
50772: PPUSH
50773: LD_VAR 0 4
50777: PPUSH
50778: CALL_OW 380
// end else
50782: GO 50801
// PrepareHuman ( false , i , skill ) ;
50784: LD_INT 0
50786: PPUSH
50787: LD_VAR 0 8
50791: PPUSH
50792: LD_VAR 0 4
50796: PPUSH
50797: CALL_OW 380
// un := CreateHuman ;
50801: LD_ADDR_VAR 0 14
50805: PUSH
50806: CALL_OW 44
50810: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50811: LD_ADDR_VAR 0 7
50815: PUSH
50816: LD_VAR 0 7
50820: PPUSH
50821: LD_INT 1
50823: PPUSH
50824: LD_VAR 0 14
50828: PPUSH
50829: CALL_OW 2
50833: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50834: LD_VAR 0 14
50838: PPUSH
50839: LD_VAR 0 12
50843: PUSH
50844: LD_INT 1
50846: ARRAY
50847: PPUSH
50848: CALL_OW 52
// end ;
50852: GO 50491
50854: POP
50855: POP
// end ;
50856: GO 49793
50858: POP
50859: POP
// result := result ^ buildings ;
50860: LD_ADDR_VAR 0 7
50864: PUSH
50865: LD_VAR 0 7
50869: PUSH
50870: LD_VAR 0 18
50874: ADD
50875: ST_TO_ADDR
// end else
50876: GO 51019
// begin for i = 1 to personel do
50878: LD_ADDR_VAR 0 8
50882: PUSH
50883: DOUBLE
50884: LD_INT 1
50886: DEC
50887: ST_TO_ADDR
50888: LD_VAR 0 6
50892: PUSH
50893: FOR_TO
50894: IFFALSE 51017
// begin if i > 4 then
50896: LD_VAR 0 8
50900: PUSH
50901: LD_INT 4
50903: GREATER
50904: IFFALSE 50908
// break ;
50906: GO 51017
// x := personel [ i ] ;
50908: LD_ADDR_VAR 0 13
50912: PUSH
50913: LD_VAR 0 6
50917: PUSH
50918: LD_VAR 0 8
50922: ARRAY
50923: ST_TO_ADDR
// if x = - 1 then
50924: LD_VAR 0 13
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: EQUAL
50933: IFFALSE 50937
// continue ;
50935: GO 50893
// PrepareHuman ( false , i , skill ) ;
50937: LD_INT 0
50939: PPUSH
50940: LD_VAR 0 8
50944: PPUSH
50945: LD_VAR 0 4
50949: PPUSH
50950: CALL_OW 380
// un := CreateHuman ;
50954: LD_ADDR_VAR 0 14
50958: PUSH
50959: CALL_OW 44
50963: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50964: LD_VAR 0 14
50968: PPUSH
50969: LD_VAR 0 1
50973: PPUSH
50974: CALL_OW 250
50978: PPUSH
50979: LD_VAR 0 1
50983: PPUSH
50984: CALL_OW 251
50988: PPUSH
50989: LD_INT 10
50991: PPUSH
50992: LD_INT 0
50994: PPUSH
50995: CALL_OW 50
// result := result ^ un ;
50999: LD_ADDR_VAR 0 7
51003: PUSH
51004: LD_VAR 0 7
51008: PUSH
51009: LD_VAR 0 14
51013: ADD
51014: ST_TO_ADDR
// end ;
51015: GO 50893
51017: POP
51018: POP
// end ; end ;
51019: LD_VAR 0 7
51023: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51024: LD_INT 0
51026: PPUSH
51027: PPUSH
51028: PPUSH
51029: PPUSH
51030: PPUSH
51031: PPUSH
51032: PPUSH
51033: PPUSH
51034: PPUSH
51035: PPUSH
51036: PPUSH
51037: PPUSH
51038: PPUSH
51039: PPUSH
51040: PPUSH
51041: PPUSH
// result := false ;
51042: LD_ADDR_VAR 0 3
51046: PUSH
51047: LD_INT 0
51049: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51050: LD_VAR 0 1
51054: NOT
51055: PUSH
51056: LD_VAR 0 1
51060: PPUSH
51061: CALL_OW 266
51065: PUSH
51066: LD_INT 32
51068: PUSH
51069: LD_INT 33
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: IN
51076: NOT
51077: OR
51078: IFFALSE 51082
// exit ;
51080: GO 52191
// nat := GetNation ( tower ) ;
51082: LD_ADDR_VAR 0 12
51086: PUSH
51087: LD_VAR 0 1
51091: PPUSH
51092: CALL_OW 248
51096: ST_TO_ADDR
// side := GetSide ( tower ) ;
51097: LD_ADDR_VAR 0 16
51101: PUSH
51102: LD_VAR 0 1
51106: PPUSH
51107: CALL_OW 255
51111: ST_TO_ADDR
// x := GetX ( tower ) ;
51112: LD_ADDR_VAR 0 10
51116: PUSH
51117: LD_VAR 0 1
51121: PPUSH
51122: CALL_OW 250
51126: ST_TO_ADDR
// y := GetY ( tower ) ;
51127: LD_ADDR_VAR 0 11
51131: PUSH
51132: LD_VAR 0 1
51136: PPUSH
51137: CALL_OW 251
51141: ST_TO_ADDR
// if not x or not y then
51142: LD_VAR 0 10
51146: NOT
51147: PUSH
51148: LD_VAR 0 11
51152: NOT
51153: OR
51154: IFFALSE 51158
// exit ;
51156: GO 52191
// weapon := 0 ;
51158: LD_ADDR_VAR 0 18
51162: PUSH
51163: LD_INT 0
51165: ST_TO_ADDR
// fac_list := [ ] ;
51166: LD_ADDR_VAR 0 17
51170: PUSH
51171: EMPTY
51172: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51173: LD_ADDR_VAR 0 6
51177: PUSH
51178: LD_VAR 0 1
51182: PPUSH
51183: CALL_OW 274
51187: PPUSH
51188: LD_VAR 0 2
51192: PPUSH
51193: LD_INT 0
51195: PPUSH
51196: CALL 48762 0 3
51200: PPUSH
51201: LD_INT 30
51203: PUSH
51204: LD_INT 3
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PPUSH
51211: CALL_OW 72
51215: ST_TO_ADDR
// if not factories then
51216: LD_VAR 0 6
51220: NOT
51221: IFFALSE 51225
// exit ;
51223: GO 52191
// for i in factories do
51225: LD_ADDR_VAR 0 8
51229: PUSH
51230: LD_VAR 0 6
51234: PUSH
51235: FOR_IN
51236: IFFALSE 51261
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51238: LD_ADDR_VAR 0 17
51242: PUSH
51243: LD_VAR 0 17
51247: PUSH
51248: LD_VAR 0 8
51252: PPUSH
51253: CALL_OW 478
51257: UNION
51258: ST_TO_ADDR
51259: GO 51235
51261: POP
51262: POP
// if not fac_list then
51263: LD_VAR 0 17
51267: NOT
51268: IFFALSE 51272
// exit ;
51270: GO 52191
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51272: LD_ADDR_VAR 0 5
51276: PUSH
51277: LD_INT 4
51279: PUSH
51280: LD_INT 5
51282: PUSH
51283: LD_INT 9
51285: PUSH
51286: LD_INT 10
51288: PUSH
51289: LD_INT 6
51291: PUSH
51292: LD_INT 7
51294: PUSH
51295: LD_INT 11
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 27
51309: PUSH
51310: LD_INT 28
51312: PUSH
51313: LD_INT 26
51315: PUSH
51316: LD_INT 30
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 43
51327: PUSH
51328: LD_INT 44
51330: PUSH
51331: LD_INT 46
51333: PUSH
51334: LD_INT 45
51336: PUSH
51337: LD_INT 47
51339: PUSH
51340: LD_INT 49
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: LIST
51355: PUSH
51356: LD_VAR 0 12
51360: ARRAY
51361: ST_TO_ADDR
// list := list isect fac_list ;
51362: LD_ADDR_VAR 0 5
51366: PUSH
51367: LD_VAR 0 5
51371: PUSH
51372: LD_VAR 0 17
51376: ISECT
51377: ST_TO_ADDR
// if not list then
51378: LD_VAR 0 5
51382: NOT
51383: IFFALSE 51387
// exit ;
51385: GO 52191
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51387: LD_VAR 0 12
51391: PUSH
51392: LD_INT 3
51394: EQUAL
51395: PUSH
51396: LD_INT 49
51398: PUSH
51399: LD_VAR 0 5
51403: IN
51404: AND
51405: PUSH
51406: LD_INT 31
51408: PPUSH
51409: LD_VAR 0 16
51413: PPUSH
51414: CALL_OW 321
51418: PUSH
51419: LD_INT 2
51421: EQUAL
51422: AND
51423: IFFALSE 51483
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51425: LD_INT 22
51427: PUSH
51428: LD_VAR 0 16
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 35
51439: PUSH
51440: LD_INT 49
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 91
51449: PUSH
51450: LD_VAR 0 1
51454: PUSH
51455: LD_INT 10
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: LIST
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: LIST
51467: PPUSH
51468: CALL_OW 69
51472: NOT
51473: IFFALSE 51483
// weapon := ru_time_lapser ;
51475: LD_ADDR_VAR 0 18
51479: PUSH
51480: LD_INT 49
51482: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51483: LD_VAR 0 12
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: IN
51498: PUSH
51499: LD_INT 11
51501: PUSH
51502: LD_VAR 0 5
51506: IN
51507: PUSH
51508: LD_INT 30
51510: PUSH
51511: LD_VAR 0 5
51515: IN
51516: OR
51517: AND
51518: PUSH
51519: LD_INT 6
51521: PPUSH
51522: LD_VAR 0 16
51526: PPUSH
51527: CALL_OW 321
51531: PUSH
51532: LD_INT 2
51534: EQUAL
51535: AND
51536: IFFALSE 51701
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51538: LD_INT 22
51540: PUSH
51541: LD_VAR 0 16
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 2
51552: PUSH
51553: LD_INT 35
51555: PUSH
51556: LD_INT 11
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 35
51565: PUSH
51566: LD_INT 30
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 91
51580: PUSH
51581: LD_VAR 0 1
51585: PUSH
51586: LD_INT 18
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: LIST
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: LIST
51598: PPUSH
51599: CALL_OW 69
51603: NOT
51604: PUSH
51605: LD_INT 22
51607: PUSH
51608: LD_VAR 0 16
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: LD_INT 30
51622: PUSH
51623: LD_INT 32
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 30
51632: PUSH
51633: LD_INT 33
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 91
51647: PUSH
51648: LD_VAR 0 1
51652: PUSH
51653: LD_INT 12
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: LIST
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: LIST
51665: PUSH
51666: EMPTY
51667: LIST
51668: PPUSH
51669: CALL_OW 69
51673: PUSH
51674: LD_INT 2
51676: GREATER
51677: AND
51678: IFFALSE 51701
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51680: LD_ADDR_VAR 0 18
51684: PUSH
51685: LD_INT 11
51687: PUSH
51688: LD_INT 30
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_VAR 0 12
51699: ARRAY
51700: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51701: LD_VAR 0 18
51705: NOT
51706: PUSH
51707: LD_INT 40
51709: PPUSH
51710: LD_VAR 0 16
51714: PPUSH
51715: CALL_OW 321
51719: PUSH
51720: LD_INT 2
51722: EQUAL
51723: AND
51724: PUSH
51725: LD_INT 7
51727: PUSH
51728: LD_VAR 0 5
51732: IN
51733: PUSH
51734: LD_INT 28
51736: PUSH
51737: LD_VAR 0 5
51741: IN
51742: OR
51743: PUSH
51744: LD_INT 45
51746: PUSH
51747: LD_VAR 0 5
51751: IN
51752: OR
51753: AND
51754: IFFALSE 52008
// begin hex := GetHexInfo ( x , y ) ;
51756: LD_ADDR_VAR 0 4
51760: PUSH
51761: LD_VAR 0 10
51765: PPUSH
51766: LD_VAR 0 11
51770: PPUSH
51771: CALL_OW 546
51775: ST_TO_ADDR
// if hex [ 1 ] then
51776: LD_VAR 0 4
51780: PUSH
51781: LD_INT 1
51783: ARRAY
51784: IFFALSE 51788
// exit ;
51786: GO 52191
// height := hex [ 2 ] ;
51788: LD_ADDR_VAR 0 15
51792: PUSH
51793: LD_VAR 0 4
51797: PUSH
51798: LD_INT 2
51800: ARRAY
51801: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51802: LD_ADDR_VAR 0 14
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 3
51815: PUSH
51816: LD_INT 5
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: ST_TO_ADDR
// for i in tmp do
51825: LD_ADDR_VAR 0 8
51829: PUSH
51830: LD_VAR 0 14
51834: PUSH
51835: FOR_IN
51836: IFFALSE 52006
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51838: LD_ADDR_VAR 0 9
51842: PUSH
51843: LD_VAR 0 10
51847: PPUSH
51848: LD_VAR 0 8
51852: PPUSH
51853: LD_INT 5
51855: PPUSH
51856: CALL_OW 272
51860: PUSH
51861: LD_VAR 0 11
51865: PPUSH
51866: LD_VAR 0 8
51870: PPUSH
51871: LD_INT 5
51873: PPUSH
51874: CALL_OW 273
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51883: LD_VAR 0 9
51887: PUSH
51888: LD_INT 1
51890: ARRAY
51891: PPUSH
51892: LD_VAR 0 9
51896: PUSH
51897: LD_INT 2
51899: ARRAY
51900: PPUSH
51901: CALL_OW 488
51905: IFFALSE 52004
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51907: LD_ADDR_VAR 0 4
51911: PUSH
51912: LD_VAR 0 9
51916: PUSH
51917: LD_INT 1
51919: ARRAY
51920: PPUSH
51921: LD_VAR 0 9
51925: PUSH
51926: LD_INT 2
51928: ARRAY
51929: PPUSH
51930: CALL_OW 546
51934: ST_TO_ADDR
// if hex [ 1 ] then
51935: LD_VAR 0 4
51939: PUSH
51940: LD_INT 1
51942: ARRAY
51943: IFFALSE 51947
// continue ;
51945: GO 51835
// h := hex [ 2 ] ;
51947: LD_ADDR_VAR 0 13
51951: PUSH
51952: LD_VAR 0 4
51956: PUSH
51957: LD_INT 2
51959: ARRAY
51960: ST_TO_ADDR
// if h + 7 < height then
51961: LD_VAR 0 13
51965: PUSH
51966: LD_INT 7
51968: PLUS
51969: PUSH
51970: LD_VAR 0 15
51974: LESS
51975: IFFALSE 52004
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51977: LD_ADDR_VAR 0 18
51981: PUSH
51982: LD_INT 7
51984: PUSH
51985: LD_INT 28
51987: PUSH
51988: LD_INT 45
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: LIST
51995: PUSH
51996: LD_VAR 0 12
52000: ARRAY
52001: ST_TO_ADDR
// break ;
52002: GO 52006
// end ; end ; end ;
52004: GO 51835
52006: POP
52007: POP
// end ; if not weapon then
52008: LD_VAR 0 18
52012: NOT
52013: IFFALSE 52073
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52015: LD_ADDR_VAR 0 5
52019: PUSH
52020: LD_VAR 0 5
52024: PUSH
52025: LD_INT 11
52027: PUSH
52028: LD_INT 30
52030: PUSH
52031: LD_INT 49
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: LIST
52038: DIFF
52039: ST_TO_ADDR
// if not list then
52040: LD_VAR 0 5
52044: NOT
52045: IFFALSE 52049
// exit ;
52047: GO 52191
// weapon := list [ rand ( 1 , list ) ] ;
52049: LD_ADDR_VAR 0 18
52053: PUSH
52054: LD_VAR 0 5
52058: PUSH
52059: LD_INT 1
52061: PPUSH
52062: LD_VAR 0 5
52066: PPUSH
52067: CALL_OW 12
52071: ARRAY
52072: ST_TO_ADDR
// end ; if weapon then
52073: LD_VAR 0 18
52077: IFFALSE 52191
// begin tmp := CostOfWeapon ( weapon ) ;
52079: LD_ADDR_VAR 0 14
52083: PUSH
52084: LD_VAR 0 18
52088: PPUSH
52089: CALL_OW 451
52093: ST_TO_ADDR
// j := GetBase ( tower ) ;
52094: LD_ADDR_VAR 0 9
52098: PUSH
52099: LD_VAR 0 1
52103: PPUSH
52104: CALL_OW 274
52108: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52109: LD_VAR 0 9
52113: PPUSH
52114: LD_INT 1
52116: PPUSH
52117: CALL_OW 275
52121: PUSH
52122: LD_VAR 0 14
52126: PUSH
52127: LD_INT 1
52129: ARRAY
52130: GREATEREQUAL
52131: PUSH
52132: LD_VAR 0 9
52136: PPUSH
52137: LD_INT 2
52139: PPUSH
52140: CALL_OW 275
52144: PUSH
52145: LD_VAR 0 14
52149: PUSH
52150: LD_INT 2
52152: ARRAY
52153: GREATEREQUAL
52154: AND
52155: PUSH
52156: LD_VAR 0 9
52160: PPUSH
52161: LD_INT 3
52163: PPUSH
52164: CALL_OW 275
52168: PUSH
52169: LD_VAR 0 14
52173: PUSH
52174: LD_INT 3
52176: ARRAY
52177: GREATEREQUAL
52178: AND
52179: IFFALSE 52191
// result := weapon ;
52181: LD_ADDR_VAR 0 3
52185: PUSH
52186: LD_VAR 0 18
52190: ST_TO_ADDR
// end ; end ;
52191: LD_VAR 0 3
52195: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52196: LD_INT 0
52198: PPUSH
52199: PPUSH
// result := true ;
52200: LD_ADDR_VAR 0 3
52204: PUSH
52205: LD_INT 1
52207: ST_TO_ADDR
// if array1 = array2 then
52208: LD_VAR 0 1
52212: PUSH
52213: LD_VAR 0 2
52217: EQUAL
52218: IFFALSE 52278
// begin for i = 1 to array1 do
52220: LD_ADDR_VAR 0 4
52224: PUSH
52225: DOUBLE
52226: LD_INT 1
52228: DEC
52229: ST_TO_ADDR
52230: LD_VAR 0 1
52234: PUSH
52235: FOR_TO
52236: IFFALSE 52274
// if array1 [ i ] <> array2 [ i ] then
52238: LD_VAR 0 1
52242: PUSH
52243: LD_VAR 0 4
52247: ARRAY
52248: PUSH
52249: LD_VAR 0 2
52253: PUSH
52254: LD_VAR 0 4
52258: ARRAY
52259: NONEQUAL
52260: IFFALSE 52272
// begin result := false ;
52262: LD_ADDR_VAR 0 3
52266: PUSH
52267: LD_INT 0
52269: ST_TO_ADDR
// break ;
52270: GO 52274
// end ;
52272: GO 52235
52274: POP
52275: POP
// end else
52276: GO 52286
// result := false ;
52278: LD_ADDR_VAR 0 3
52282: PUSH
52283: LD_INT 0
52285: ST_TO_ADDR
// end ;
52286: LD_VAR 0 3
52290: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52291: LD_INT 0
52293: PPUSH
52294: PPUSH
// if not array1 or not array2 then
52295: LD_VAR 0 1
52299: NOT
52300: PUSH
52301: LD_VAR 0 2
52305: NOT
52306: OR
52307: IFFALSE 52311
// exit ;
52309: GO 52375
// result := true ;
52311: LD_ADDR_VAR 0 3
52315: PUSH
52316: LD_INT 1
52318: ST_TO_ADDR
// for i = 1 to array1 do
52319: LD_ADDR_VAR 0 4
52323: PUSH
52324: DOUBLE
52325: LD_INT 1
52327: DEC
52328: ST_TO_ADDR
52329: LD_VAR 0 1
52333: PUSH
52334: FOR_TO
52335: IFFALSE 52373
// if array1 [ i ] <> array2 [ i ] then
52337: LD_VAR 0 1
52341: PUSH
52342: LD_VAR 0 4
52346: ARRAY
52347: PUSH
52348: LD_VAR 0 2
52352: PUSH
52353: LD_VAR 0 4
52357: ARRAY
52358: NONEQUAL
52359: IFFALSE 52371
// begin result := false ;
52361: LD_ADDR_VAR 0 3
52365: PUSH
52366: LD_INT 0
52368: ST_TO_ADDR
// break ;
52369: GO 52373
// end ;
52371: GO 52334
52373: POP
52374: POP
// end ;
52375: LD_VAR 0 3
52379: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52380: LD_INT 0
52382: PPUSH
52383: PPUSH
52384: PPUSH
// pom := GetBase ( fac ) ;
52385: LD_ADDR_VAR 0 5
52389: PUSH
52390: LD_VAR 0 1
52394: PPUSH
52395: CALL_OW 274
52399: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52400: LD_ADDR_VAR 0 4
52404: PUSH
52405: LD_VAR 0 2
52409: PUSH
52410: LD_INT 1
52412: ARRAY
52413: PPUSH
52414: LD_VAR 0 2
52418: PUSH
52419: LD_INT 2
52421: ARRAY
52422: PPUSH
52423: LD_VAR 0 2
52427: PUSH
52428: LD_INT 3
52430: ARRAY
52431: PPUSH
52432: LD_VAR 0 2
52436: PUSH
52437: LD_INT 4
52439: ARRAY
52440: PPUSH
52441: CALL_OW 449
52445: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52446: LD_ADDR_VAR 0 3
52450: PUSH
52451: LD_VAR 0 5
52455: PPUSH
52456: LD_INT 1
52458: PPUSH
52459: CALL_OW 275
52463: PUSH
52464: LD_VAR 0 4
52468: PUSH
52469: LD_INT 1
52471: ARRAY
52472: GREATEREQUAL
52473: PUSH
52474: LD_VAR 0 5
52478: PPUSH
52479: LD_INT 2
52481: PPUSH
52482: CALL_OW 275
52486: PUSH
52487: LD_VAR 0 4
52491: PUSH
52492: LD_INT 2
52494: ARRAY
52495: GREATEREQUAL
52496: AND
52497: PUSH
52498: LD_VAR 0 5
52502: PPUSH
52503: LD_INT 3
52505: PPUSH
52506: CALL_OW 275
52510: PUSH
52511: LD_VAR 0 4
52515: PUSH
52516: LD_INT 3
52518: ARRAY
52519: GREATEREQUAL
52520: AND
52521: ST_TO_ADDR
// end ;
52522: LD_VAR 0 3
52526: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52527: LD_INT 0
52529: PPUSH
52530: PPUSH
52531: PPUSH
52532: PPUSH
// pom := GetBase ( building ) ;
52533: LD_ADDR_VAR 0 3
52537: PUSH
52538: LD_VAR 0 1
52542: PPUSH
52543: CALL_OW 274
52547: ST_TO_ADDR
// if not pom then
52548: LD_VAR 0 3
52552: NOT
52553: IFFALSE 52557
// exit ;
52555: GO 52727
// btype := GetBType ( building ) ;
52557: LD_ADDR_VAR 0 5
52561: PUSH
52562: LD_VAR 0 1
52566: PPUSH
52567: CALL_OW 266
52571: ST_TO_ADDR
// if btype = b_armoury then
52572: LD_VAR 0 5
52576: PUSH
52577: LD_INT 4
52579: EQUAL
52580: IFFALSE 52590
// btype := b_barracks ;
52582: LD_ADDR_VAR 0 5
52586: PUSH
52587: LD_INT 5
52589: ST_TO_ADDR
// if btype = b_depot then
52590: LD_VAR 0 5
52594: PUSH
52595: LD_INT 0
52597: EQUAL
52598: IFFALSE 52608
// btype := b_warehouse ;
52600: LD_ADDR_VAR 0 5
52604: PUSH
52605: LD_INT 1
52607: ST_TO_ADDR
// if btype = b_workshop then
52608: LD_VAR 0 5
52612: PUSH
52613: LD_INT 2
52615: EQUAL
52616: IFFALSE 52626
// btype := b_factory ;
52618: LD_ADDR_VAR 0 5
52622: PUSH
52623: LD_INT 3
52625: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52626: LD_ADDR_VAR 0 4
52630: PUSH
52631: LD_VAR 0 5
52635: PPUSH
52636: LD_VAR 0 1
52640: PPUSH
52641: CALL_OW 248
52645: PPUSH
52646: CALL_OW 450
52650: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52651: LD_ADDR_VAR 0 2
52655: PUSH
52656: LD_VAR 0 3
52660: PPUSH
52661: LD_INT 1
52663: PPUSH
52664: CALL_OW 275
52668: PUSH
52669: LD_VAR 0 4
52673: PUSH
52674: LD_INT 1
52676: ARRAY
52677: GREATEREQUAL
52678: PUSH
52679: LD_VAR 0 3
52683: PPUSH
52684: LD_INT 2
52686: PPUSH
52687: CALL_OW 275
52691: PUSH
52692: LD_VAR 0 4
52696: PUSH
52697: LD_INT 2
52699: ARRAY
52700: GREATEREQUAL
52701: AND
52702: PUSH
52703: LD_VAR 0 3
52707: PPUSH
52708: LD_INT 3
52710: PPUSH
52711: CALL_OW 275
52715: PUSH
52716: LD_VAR 0 4
52720: PUSH
52721: LD_INT 3
52723: ARRAY
52724: GREATEREQUAL
52725: AND
52726: ST_TO_ADDR
// end ;
52727: LD_VAR 0 2
52731: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52732: LD_INT 0
52734: PPUSH
52735: PPUSH
52736: PPUSH
// pom := GetBase ( building ) ;
52737: LD_ADDR_VAR 0 4
52741: PUSH
52742: LD_VAR 0 1
52746: PPUSH
52747: CALL_OW 274
52751: ST_TO_ADDR
// if not pom then
52752: LD_VAR 0 4
52756: NOT
52757: IFFALSE 52761
// exit ;
52759: GO 52862
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52761: LD_ADDR_VAR 0 5
52765: PUSH
52766: LD_VAR 0 2
52770: PPUSH
52771: LD_VAR 0 1
52775: PPUSH
52776: CALL_OW 248
52780: PPUSH
52781: CALL_OW 450
52785: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52786: LD_ADDR_VAR 0 3
52790: PUSH
52791: LD_VAR 0 4
52795: PPUSH
52796: LD_INT 1
52798: PPUSH
52799: CALL_OW 275
52803: PUSH
52804: LD_VAR 0 5
52808: PUSH
52809: LD_INT 1
52811: ARRAY
52812: GREATEREQUAL
52813: PUSH
52814: LD_VAR 0 4
52818: PPUSH
52819: LD_INT 2
52821: PPUSH
52822: CALL_OW 275
52826: PUSH
52827: LD_VAR 0 5
52831: PUSH
52832: LD_INT 2
52834: ARRAY
52835: GREATEREQUAL
52836: AND
52837: PUSH
52838: LD_VAR 0 4
52842: PPUSH
52843: LD_INT 3
52845: PPUSH
52846: CALL_OW 275
52850: PUSH
52851: LD_VAR 0 5
52855: PUSH
52856: LD_INT 3
52858: ARRAY
52859: GREATEREQUAL
52860: AND
52861: ST_TO_ADDR
// end ;
52862: LD_VAR 0 3
52866: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52867: LD_INT 0
52869: PPUSH
52870: PPUSH
52871: PPUSH
52872: PPUSH
52873: PPUSH
52874: PPUSH
52875: PPUSH
52876: PPUSH
52877: PPUSH
52878: PPUSH
52879: PPUSH
// result := false ;
52880: LD_ADDR_VAR 0 8
52884: PUSH
52885: LD_INT 0
52887: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52888: LD_VAR 0 5
52892: NOT
52893: PUSH
52894: LD_VAR 0 1
52898: NOT
52899: OR
52900: PUSH
52901: LD_VAR 0 2
52905: NOT
52906: OR
52907: PUSH
52908: LD_VAR 0 3
52912: NOT
52913: OR
52914: IFFALSE 52918
// exit ;
52916: GO 53732
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52918: LD_ADDR_VAR 0 14
52922: PUSH
52923: LD_VAR 0 1
52927: PPUSH
52928: LD_VAR 0 2
52932: PPUSH
52933: LD_VAR 0 3
52937: PPUSH
52938: LD_VAR 0 4
52942: PPUSH
52943: LD_VAR 0 5
52947: PUSH
52948: LD_INT 1
52950: ARRAY
52951: PPUSH
52952: CALL_OW 248
52956: PPUSH
52957: LD_INT 0
52959: PPUSH
52960: CALL 54985 0 6
52964: ST_TO_ADDR
// if not hexes then
52965: LD_VAR 0 14
52969: NOT
52970: IFFALSE 52974
// exit ;
52972: GO 53732
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52974: LD_ADDR_VAR 0 17
52978: PUSH
52979: LD_VAR 0 5
52983: PPUSH
52984: LD_INT 22
52986: PUSH
52987: LD_VAR 0 13
52991: PPUSH
52992: CALL_OW 255
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 2
53003: PUSH
53004: LD_INT 30
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 30
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: LIST
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PPUSH
53033: CALL_OW 72
53037: ST_TO_ADDR
// for i = 1 to hexes do
53038: LD_ADDR_VAR 0 9
53042: PUSH
53043: DOUBLE
53044: LD_INT 1
53046: DEC
53047: ST_TO_ADDR
53048: LD_VAR 0 14
53052: PUSH
53053: FOR_TO
53054: IFFALSE 53730
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53056: LD_ADDR_VAR 0 13
53060: PUSH
53061: LD_VAR 0 14
53065: PUSH
53066: LD_VAR 0 9
53070: ARRAY
53071: PUSH
53072: LD_INT 1
53074: ARRAY
53075: PPUSH
53076: LD_VAR 0 14
53080: PUSH
53081: LD_VAR 0 9
53085: ARRAY
53086: PUSH
53087: LD_INT 2
53089: ARRAY
53090: PPUSH
53091: CALL_OW 428
53095: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53096: LD_VAR 0 14
53100: PUSH
53101: LD_VAR 0 9
53105: ARRAY
53106: PUSH
53107: LD_INT 1
53109: ARRAY
53110: PPUSH
53111: LD_VAR 0 14
53115: PUSH
53116: LD_VAR 0 9
53120: ARRAY
53121: PUSH
53122: LD_INT 2
53124: ARRAY
53125: PPUSH
53126: CALL_OW 351
53130: PUSH
53131: LD_VAR 0 14
53135: PUSH
53136: LD_VAR 0 9
53140: ARRAY
53141: PUSH
53142: LD_INT 1
53144: ARRAY
53145: PPUSH
53146: LD_VAR 0 14
53150: PUSH
53151: LD_VAR 0 9
53155: ARRAY
53156: PUSH
53157: LD_INT 2
53159: ARRAY
53160: PPUSH
53161: CALL_OW 488
53165: NOT
53166: OR
53167: PUSH
53168: LD_VAR 0 13
53172: PPUSH
53173: CALL_OW 247
53177: PUSH
53178: LD_INT 3
53180: EQUAL
53181: OR
53182: IFFALSE 53188
// exit ;
53184: POP
53185: POP
53186: GO 53732
// if not tmp then
53188: LD_VAR 0 13
53192: NOT
53193: IFFALSE 53197
// continue ;
53195: GO 53053
// result := true ;
53197: LD_ADDR_VAR 0 8
53201: PUSH
53202: LD_INT 1
53204: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53205: LD_VAR 0 6
53209: PUSH
53210: LD_VAR 0 13
53214: PPUSH
53215: CALL_OW 247
53219: PUSH
53220: LD_INT 2
53222: EQUAL
53223: AND
53224: PUSH
53225: LD_VAR 0 13
53229: PPUSH
53230: CALL_OW 263
53234: PUSH
53235: LD_INT 1
53237: EQUAL
53238: AND
53239: IFFALSE 53403
// begin if IsDrivenBy ( tmp ) then
53241: LD_VAR 0 13
53245: PPUSH
53246: CALL_OW 311
53250: IFFALSE 53254
// continue ;
53252: GO 53053
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53254: LD_VAR 0 6
53258: PPUSH
53259: LD_INT 3
53261: PUSH
53262: LD_INT 60
53264: PUSH
53265: EMPTY
53266: LIST
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 3
53274: PUSH
53275: LD_INT 55
53277: PUSH
53278: EMPTY
53279: LIST
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PPUSH
53289: CALL_OW 72
53293: IFFALSE 53401
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53295: LD_ADDR_VAR 0 18
53299: PUSH
53300: LD_VAR 0 6
53304: PPUSH
53305: LD_INT 3
53307: PUSH
53308: LD_INT 60
53310: PUSH
53311: EMPTY
53312: LIST
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 3
53320: PUSH
53321: LD_INT 55
53323: PUSH
53324: EMPTY
53325: LIST
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PPUSH
53335: CALL_OW 72
53339: PUSH
53340: LD_INT 1
53342: ARRAY
53343: ST_TO_ADDR
// if IsInUnit ( driver ) then
53344: LD_VAR 0 18
53348: PPUSH
53349: CALL_OW 310
53353: IFFALSE 53364
// ComExit ( driver ) ;
53355: LD_VAR 0 18
53359: PPUSH
53360: CALL 78777 0 1
// AddComEnterUnit ( driver , tmp ) ;
53364: LD_VAR 0 18
53368: PPUSH
53369: LD_VAR 0 13
53373: PPUSH
53374: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53378: LD_VAR 0 18
53382: PPUSH
53383: LD_VAR 0 7
53387: PPUSH
53388: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53392: LD_VAR 0 18
53396: PPUSH
53397: CALL_OW 181
// end ; continue ;
53401: GO 53053
// end ; if not cleaners or not tmp in cleaners then
53403: LD_VAR 0 6
53407: NOT
53408: PUSH
53409: LD_VAR 0 13
53413: PUSH
53414: LD_VAR 0 6
53418: IN
53419: NOT
53420: OR
53421: IFFALSE 53728
// begin if dep then
53423: LD_VAR 0 17
53427: IFFALSE 53563
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53429: LD_ADDR_VAR 0 16
53433: PUSH
53434: LD_VAR 0 17
53438: PUSH
53439: LD_INT 1
53441: ARRAY
53442: PPUSH
53443: CALL_OW 250
53447: PPUSH
53448: LD_VAR 0 17
53452: PUSH
53453: LD_INT 1
53455: ARRAY
53456: PPUSH
53457: CALL_OW 254
53461: PPUSH
53462: LD_INT 5
53464: PPUSH
53465: CALL_OW 272
53469: PUSH
53470: LD_VAR 0 17
53474: PUSH
53475: LD_INT 1
53477: ARRAY
53478: PPUSH
53479: CALL_OW 251
53483: PPUSH
53484: LD_VAR 0 17
53488: PUSH
53489: LD_INT 1
53491: ARRAY
53492: PPUSH
53493: CALL_OW 254
53497: PPUSH
53498: LD_INT 5
53500: PPUSH
53501: CALL_OW 273
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53510: LD_VAR 0 16
53514: PUSH
53515: LD_INT 1
53517: ARRAY
53518: PPUSH
53519: LD_VAR 0 16
53523: PUSH
53524: LD_INT 2
53526: ARRAY
53527: PPUSH
53528: CALL_OW 488
53532: IFFALSE 53563
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53534: LD_VAR 0 13
53538: PPUSH
53539: LD_VAR 0 16
53543: PUSH
53544: LD_INT 1
53546: ARRAY
53547: PPUSH
53548: LD_VAR 0 16
53552: PUSH
53553: LD_INT 2
53555: ARRAY
53556: PPUSH
53557: CALL_OW 111
// continue ;
53561: GO 53053
// end ; end ; r := GetDir ( tmp ) ;
53563: LD_ADDR_VAR 0 15
53567: PUSH
53568: LD_VAR 0 13
53572: PPUSH
53573: CALL_OW 254
53577: ST_TO_ADDR
// if r = 5 then
53578: LD_VAR 0 15
53582: PUSH
53583: LD_INT 5
53585: EQUAL
53586: IFFALSE 53596
// r := 0 ;
53588: LD_ADDR_VAR 0 15
53592: PUSH
53593: LD_INT 0
53595: ST_TO_ADDR
// for j = r to 5 do
53596: LD_ADDR_VAR 0 10
53600: PUSH
53601: DOUBLE
53602: LD_VAR 0 15
53606: DEC
53607: ST_TO_ADDR
53608: LD_INT 5
53610: PUSH
53611: FOR_TO
53612: IFFALSE 53726
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53614: LD_ADDR_VAR 0 11
53618: PUSH
53619: LD_VAR 0 13
53623: PPUSH
53624: CALL_OW 250
53628: PPUSH
53629: LD_VAR 0 10
53633: PPUSH
53634: LD_INT 2
53636: PPUSH
53637: CALL_OW 272
53641: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53642: LD_ADDR_VAR 0 12
53646: PUSH
53647: LD_VAR 0 13
53651: PPUSH
53652: CALL_OW 251
53656: PPUSH
53657: LD_VAR 0 10
53661: PPUSH
53662: LD_INT 2
53664: PPUSH
53665: CALL_OW 273
53669: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53670: LD_VAR 0 11
53674: PPUSH
53675: LD_VAR 0 12
53679: PPUSH
53680: CALL_OW 488
53684: PUSH
53685: LD_VAR 0 11
53689: PPUSH
53690: LD_VAR 0 12
53694: PPUSH
53695: CALL_OW 428
53699: NOT
53700: AND
53701: IFFALSE 53724
// begin ComMoveXY ( tmp , _x , _y ) ;
53703: LD_VAR 0 13
53707: PPUSH
53708: LD_VAR 0 11
53712: PPUSH
53713: LD_VAR 0 12
53717: PPUSH
53718: CALL_OW 111
// break ;
53722: GO 53726
// end ; end ;
53724: GO 53611
53726: POP
53727: POP
// end ; end ;
53728: GO 53053
53730: POP
53731: POP
// end ;
53732: LD_VAR 0 8
53736: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53737: LD_INT 0
53739: PPUSH
// result := true ;
53740: LD_ADDR_VAR 0 3
53744: PUSH
53745: LD_INT 1
53747: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53748: LD_VAR 0 2
53752: PUSH
53753: LD_INT 24
53755: DOUBLE
53756: EQUAL
53757: IFTRUE 53767
53759: LD_INT 33
53761: DOUBLE
53762: EQUAL
53763: IFTRUE 53767
53765: GO 53792
53767: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53768: LD_ADDR_VAR 0 3
53772: PUSH
53773: LD_INT 32
53775: PPUSH
53776: LD_VAR 0 1
53780: PPUSH
53781: CALL_OW 321
53785: PUSH
53786: LD_INT 2
53788: EQUAL
53789: ST_TO_ADDR
53790: GO 54108
53792: LD_INT 20
53794: DOUBLE
53795: EQUAL
53796: IFTRUE 53800
53798: GO 53825
53800: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53801: LD_ADDR_VAR 0 3
53805: PUSH
53806: LD_INT 6
53808: PPUSH
53809: LD_VAR 0 1
53813: PPUSH
53814: CALL_OW 321
53818: PUSH
53819: LD_INT 2
53821: EQUAL
53822: ST_TO_ADDR
53823: GO 54108
53825: LD_INT 22
53827: DOUBLE
53828: EQUAL
53829: IFTRUE 53839
53831: LD_INT 36
53833: DOUBLE
53834: EQUAL
53835: IFTRUE 53839
53837: GO 53864
53839: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53840: LD_ADDR_VAR 0 3
53844: PUSH
53845: LD_INT 15
53847: PPUSH
53848: LD_VAR 0 1
53852: PPUSH
53853: CALL_OW 321
53857: PUSH
53858: LD_INT 2
53860: EQUAL
53861: ST_TO_ADDR
53862: GO 54108
53864: LD_INT 30
53866: DOUBLE
53867: EQUAL
53868: IFTRUE 53872
53870: GO 53897
53872: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53873: LD_ADDR_VAR 0 3
53877: PUSH
53878: LD_INT 20
53880: PPUSH
53881: LD_VAR 0 1
53885: PPUSH
53886: CALL_OW 321
53890: PUSH
53891: LD_INT 2
53893: EQUAL
53894: ST_TO_ADDR
53895: GO 54108
53897: LD_INT 28
53899: DOUBLE
53900: EQUAL
53901: IFTRUE 53911
53903: LD_INT 21
53905: DOUBLE
53906: EQUAL
53907: IFTRUE 53911
53909: GO 53936
53911: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53912: LD_ADDR_VAR 0 3
53916: PUSH
53917: LD_INT 21
53919: PPUSH
53920: LD_VAR 0 1
53924: PPUSH
53925: CALL_OW 321
53929: PUSH
53930: LD_INT 2
53932: EQUAL
53933: ST_TO_ADDR
53934: GO 54108
53936: LD_INT 16
53938: DOUBLE
53939: EQUAL
53940: IFTRUE 53944
53942: GO 53969
53944: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53945: LD_ADDR_VAR 0 3
53949: PUSH
53950: LD_INT 84
53952: PPUSH
53953: LD_VAR 0 1
53957: PPUSH
53958: CALL_OW 321
53962: PUSH
53963: LD_INT 2
53965: EQUAL
53966: ST_TO_ADDR
53967: GO 54108
53969: LD_INT 19
53971: DOUBLE
53972: EQUAL
53973: IFTRUE 53983
53975: LD_INT 23
53977: DOUBLE
53978: EQUAL
53979: IFTRUE 53983
53981: GO 54008
53983: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53984: LD_ADDR_VAR 0 3
53988: PUSH
53989: LD_INT 83
53991: PPUSH
53992: LD_VAR 0 1
53996: PPUSH
53997: CALL_OW 321
54001: PUSH
54002: LD_INT 2
54004: EQUAL
54005: ST_TO_ADDR
54006: GO 54108
54008: LD_INT 17
54010: DOUBLE
54011: EQUAL
54012: IFTRUE 54016
54014: GO 54041
54016: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54017: LD_ADDR_VAR 0 3
54021: PUSH
54022: LD_INT 39
54024: PPUSH
54025: LD_VAR 0 1
54029: PPUSH
54030: CALL_OW 321
54034: PUSH
54035: LD_INT 2
54037: EQUAL
54038: ST_TO_ADDR
54039: GO 54108
54041: LD_INT 18
54043: DOUBLE
54044: EQUAL
54045: IFTRUE 54049
54047: GO 54074
54049: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54050: LD_ADDR_VAR 0 3
54054: PUSH
54055: LD_INT 40
54057: PPUSH
54058: LD_VAR 0 1
54062: PPUSH
54063: CALL_OW 321
54067: PUSH
54068: LD_INT 2
54070: EQUAL
54071: ST_TO_ADDR
54072: GO 54108
54074: LD_INT 27
54076: DOUBLE
54077: EQUAL
54078: IFTRUE 54082
54080: GO 54107
54082: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54083: LD_ADDR_VAR 0 3
54087: PUSH
54088: LD_INT 35
54090: PPUSH
54091: LD_VAR 0 1
54095: PPUSH
54096: CALL_OW 321
54100: PUSH
54101: LD_INT 2
54103: EQUAL
54104: ST_TO_ADDR
54105: GO 54108
54107: POP
// end ;
54108: LD_VAR 0 3
54112: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54113: LD_INT 0
54115: PPUSH
54116: PPUSH
54117: PPUSH
54118: PPUSH
54119: PPUSH
54120: PPUSH
54121: PPUSH
54122: PPUSH
54123: PPUSH
54124: PPUSH
54125: PPUSH
// result := false ;
54126: LD_ADDR_VAR 0 6
54130: PUSH
54131: LD_INT 0
54133: ST_TO_ADDR
// if btype = b_depot then
54134: LD_VAR 0 2
54138: PUSH
54139: LD_INT 0
54141: EQUAL
54142: IFFALSE 54154
// begin result := true ;
54144: LD_ADDR_VAR 0 6
54148: PUSH
54149: LD_INT 1
54151: ST_TO_ADDR
// exit ;
54152: GO 54980
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54154: LD_VAR 0 1
54158: NOT
54159: PUSH
54160: LD_VAR 0 1
54164: PPUSH
54165: CALL_OW 266
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: IN
54180: NOT
54181: OR
54182: PUSH
54183: LD_VAR 0 2
54187: NOT
54188: OR
54189: PUSH
54190: LD_VAR 0 5
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 2
54203: PUSH
54204: LD_INT 3
54206: PUSH
54207: LD_INT 4
54209: PUSH
54210: LD_INT 5
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: IN
54221: NOT
54222: OR
54223: PUSH
54224: LD_VAR 0 3
54228: PPUSH
54229: LD_VAR 0 4
54233: PPUSH
54234: CALL_OW 488
54238: NOT
54239: OR
54240: IFFALSE 54244
// exit ;
54242: GO 54980
// side := GetSide ( depot ) ;
54244: LD_ADDR_VAR 0 9
54248: PUSH
54249: LD_VAR 0 1
54253: PPUSH
54254: CALL_OW 255
54258: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54259: LD_VAR 0 9
54263: PPUSH
54264: LD_VAR 0 2
54268: PPUSH
54269: CALL 53737 0 2
54273: NOT
54274: IFFALSE 54278
// exit ;
54276: GO 54980
// pom := GetBase ( depot ) ;
54278: LD_ADDR_VAR 0 10
54282: PUSH
54283: LD_VAR 0 1
54287: PPUSH
54288: CALL_OW 274
54292: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54293: LD_ADDR_VAR 0 11
54297: PUSH
54298: LD_VAR 0 2
54302: PPUSH
54303: LD_VAR 0 1
54307: PPUSH
54308: CALL_OW 248
54312: PPUSH
54313: CALL_OW 450
54317: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54318: LD_VAR 0 10
54322: PPUSH
54323: LD_INT 1
54325: PPUSH
54326: CALL_OW 275
54330: PUSH
54331: LD_VAR 0 11
54335: PUSH
54336: LD_INT 1
54338: ARRAY
54339: GREATEREQUAL
54340: PUSH
54341: LD_VAR 0 10
54345: PPUSH
54346: LD_INT 2
54348: PPUSH
54349: CALL_OW 275
54353: PUSH
54354: LD_VAR 0 11
54358: PUSH
54359: LD_INT 2
54361: ARRAY
54362: GREATEREQUAL
54363: AND
54364: PUSH
54365: LD_VAR 0 10
54369: PPUSH
54370: LD_INT 3
54372: PPUSH
54373: CALL_OW 275
54377: PUSH
54378: LD_VAR 0 11
54382: PUSH
54383: LD_INT 3
54385: ARRAY
54386: GREATEREQUAL
54387: AND
54388: NOT
54389: IFFALSE 54393
// exit ;
54391: GO 54980
// if GetBType ( depot ) = b_depot then
54393: LD_VAR 0 1
54397: PPUSH
54398: CALL_OW 266
54402: PUSH
54403: LD_INT 0
54405: EQUAL
54406: IFFALSE 54418
// dist := 28 else
54408: LD_ADDR_VAR 0 14
54412: PUSH
54413: LD_INT 28
54415: ST_TO_ADDR
54416: GO 54426
// dist := 36 ;
54418: LD_ADDR_VAR 0 14
54422: PUSH
54423: LD_INT 36
54425: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54426: LD_VAR 0 1
54430: PPUSH
54431: LD_VAR 0 3
54435: PPUSH
54436: LD_VAR 0 4
54440: PPUSH
54441: CALL_OW 297
54445: PUSH
54446: LD_VAR 0 14
54450: GREATER
54451: IFFALSE 54455
// exit ;
54453: GO 54980
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54455: LD_ADDR_VAR 0 12
54459: PUSH
54460: LD_VAR 0 2
54464: PPUSH
54465: LD_VAR 0 3
54469: PPUSH
54470: LD_VAR 0 4
54474: PPUSH
54475: LD_VAR 0 5
54479: PPUSH
54480: LD_VAR 0 1
54484: PPUSH
54485: CALL_OW 248
54489: PPUSH
54490: LD_INT 0
54492: PPUSH
54493: CALL 54985 0 6
54497: ST_TO_ADDR
// if not hexes then
54498: LD_VAR 0 12
54502: NOT
54503: IFFALSE 54507
// exit ;
54505: GO 54980
// hex := GetHexInfo ( x , y ) ;
54507: LD_ADDR_VAR 0 15
54511: PUSH
54512: LD_VAR 0 3
54516: PPUSH
54517: LD_VAR 0 4
54521: PPUSH
54522: CALL_OW 546
54526: ST_TO_ADDR
// if hex [ 1 ] then
54527: LD_VAR 0 15
54531: PUSH
54532: LD_INT 1
54534: ARRAY
54535: IFFALSE 54539
// exit ;
54537: GO 54980
// height := hex [ 2 ] ;
54539: LD_ADDR_VAR 0 13
54543: PUSH
54544: LD_VAR 0 15
54548: PUSH
54549: LD_INT 2
54551: ARRAY
54552: ST_TO_ADDR
// for i = 1 to hexes do
54553: LD_ADDR_VAR 0 7
54557: PUSH
54558: DOUBLE
54559: LD_INT 1
54561: DEC
54562: ST_TO_ADDR
54563: LD_VAR 0 12
54567: PUSH
54568: FOR_TO
54569: IFFALSE 54899
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54571: LD_VAR 0 12
54575: PUSH
54576: LD_VAR 0 7
54580: ARRAY
54581: PUSH
54582: LD_INT 1
54584: ARRAY
54585: PPUSH
54586: LD_VAR 0 12
54590: PUSH
54591: LD_VAR 0 7
54595: ARRAY
54596: PUSH
54597: LD_INT 2
54599: ARRAY
54600: PPUSH
54601: CALL_OW 488
54605: NOT
54606: PUSH
54607: LD_VAR 0 12
54611: PUSH
54612: LD_VAR 0 7
54616: ARRAY
54617: PUSH
54618: LD_INT 1
54620: ARRAY
54621: PPUSH
54622: LD_VAR 0 12
54626: PUSH
54627: LD_VAR 0 7
54631: ARRAY
54632: PUSH
54633: LD_INT 2
54635: ARRAY
54636: PPUSH
54637: CALL_OW 428
54641: PUSH
54642: LD_INT 0
54644: GREATER
54645: OR
54646: PUSH
54647: LD_VAR 0 12
54651: PUSH
54652: LD_VAR 0 7
54656: ARRAY
54657: PUSH
54658: LD_INT 1
54660: ARRAY
54661: PPUSH
54662: LD_VAR 0 12
54666: PUSH
54667: LD_VAR 0 7
54671: ARRAY
54672: PUSH
54673: LD_INT 2
54675: ARRAY
54676: PPUSH
54677: CALL_OW 351
54681: OR
54682: IFFALSE 54688
// exit ;
54684: POP
54685: POP
54686: GO 54980
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54688: LD_ADDR_VAR 0 8
54692: PUSH
54693: LD_VAR 0 12
54697: PUSH
54698: LD_VAR 0 7
54702: ARRAY
54703: PUSH
54704: LD_INT 1
54706: ARRAY
54707: PPUSH
54708: LD_VAR 0 12
54712: PUSH
54713: LD_VAR 0 7
54717: ARRAY
54718: PUSH
54719: LD_INT 2
54721: ARRAY
54722: PPUSH
54723: CALL_OW 546
54727: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54728: LD_VAR 0 8
54732: PUSH
54733: LD_INT 1
54735: ARRAY
54736: PUSH
54737: LD_VAR 0 8
54741: PUSH
54742: LD_INT 2
54744: ARRAY
54745: PUSH
54746: LD_VAR 0 13
54750: PUSH
54751: LD_INT 2
54753: PLUS
54754: GREATER
54755: OR
54756: PUSH
54757: LD_VAR 0 8
54761: PUSH
54762: LD_INT 2
54764: ARRAY
54765: PUSH
54766: LD_VAR 0 13
54770: PUSH
54771: LD_INT 2
54773: MINUS
54774: LESS
54775: OR
54776: PUSH
54777: LD_VAR 0 8
54781: PUSH
54782: LD_INT 3
54784: ARRAY
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 8
54791: PUSH
54792: LD_INT 9
54794: PUSH
54795: LD_INT 10
54797: PUSH
54798: LD_INT 11
54800: PUSH
54801: LD_INT 12
54803: PUSH
54804: LD_INT 13
54806: PUSH
54807: LD_INT 16
54809: PUSH
54810: LD_INT 17
54812: PUSH
54813: LD_INT 18
54815: PUSH
54816: LD_INT 19
54818: PUSH
54819: LD_INT 20
54821: PUSH
54822: LD_INT 21
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: IN
54840: NOT
54841: OR
54842: PUSH
54843: LD_VAR 0 8
54847: PUSH
54848: LD_INT 5
54850: ARRAY
54851: NOT
54852: OR
54853: PUSH
54854: LD_VAR 0 8
54858: PUSH
54859: LD_INT 6
54861: ARRAY
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: LD_INT 7
54871: PUSH
54872: LD_INT 9
54874: PUSH
54875: LD_INT 10
54877: PUSH
54878: LD_INT 11
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: IN
54889: NOT
54890: OR
54891: IFFALSE 54897
// exit ;
54893: POP
54894: POP
54895: GO 54980
// end ;
54897: GO 54568
54899: POP
54900: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54901: LD_VAR 0 9
54905: PPUSH
54906: LD_VAR 0 3
54910: PPUSH
54911: LD_VAR 0 4
54915: PPUSH
54916: LD_INT 20
54918: PPUSH
54919: CALL 46903 0 4
54923: PUSH
54924: LD_INT 4
54926: ARRAY
54927: IFFALSE 54931
// exit ;
54929: GO 54980
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54931: LD_VAR 0 2
54935: PUSH
54936: LD_INT 29
54938: PUSH
54939: LD_INT 30
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: IN
54946: PUSH
54947: LD_VAR 0 3
54951: PPUSH
54952: LD_VAR 0 4
54956: PPUSH
54957: LD_VAR 0 9
54961: PPUSH
54962: CALL_OW 440
54966: NOT
54967: AND
54968: IFFALSE 54972
// exit ;
54970: GO 54980
// result := true ;
54972: LD_ADDR_VAR 0 6
54976: PUSH
54977: LD_INT 1
54979: ST_TO_ADDR
// end ;
54980: LD_VAR 0 6
54984: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54985: LD_INT 0
54987: PPUSH
54988: PPUSH
54989: PPUSH
54990: PPUSH
54991: PPUSH
54992: PPUSH
54993: PPUSH
54994: PPUSH
54995: PPUSH
54996: PPUSH
54997: PPUSH
54998: PPUSH
54999: PPUSH
55000: PPUSH
55001: PPUSH
55002: PPUSH
55003: PPUSH
55004: PPUSH
55005: PPUSH
55006: PPUSH
55007: PPUSH
55008: PPUSH
55009: PPUSH
55010: PPUSH
55011: PPUSH
55012: PPUSH
55013: PPUSH
55014: PPUSH
55015: PPUSH
55016: PPUSH
55017: PPUSH
55018: PPUSH
55019: PPUSH
55020: PPUSH
55021: PPUSH
55022: PPUSH
55023: PPUSH
55024: PPUSH
55025: PPUSH
55026: PPUSH
55027: PPUSH
55028: PPUSH
55029: PPUSH
55030: PPUSH
55031: PPUSH
55032: PPUSH
55033: PPUSH
55034: PPUSH
55035: PPUSH
55036: PPUSH
55037: PPUSH
55038: PPUSH
55039: PPUSH
55040: PPUSH
55041: PPUSH
55042: PPUSH
55043: PPUSH
55044: PPUSH
// result = [ ] ;
55045: LD_ADDR_VAR 0 7
55049: PUSH
55050: EMPTY
55051: ST_TO_ADDR
// temp_list = [ ] ;
55052: LD_ADDR_VAR 0 9
55056: PUSH
55057: EMPTY
55058: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55059: LD_VAR 0 4
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: LD_INT 3
55075: PUSH
55076: LD_INT 4
55078: PUSH
55079: LD_INT 5
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: IN
55090: NOT
55091: PUSH
55092: LD_VAR 0 1
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: IN
55107: PUSH
55108: LD_VAR 0 5
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: LD_INT 3
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: LIST
55126: IN
55127: NOT
55128: AND
55129: OR
55130: IFFALSE 55134
// exit ;
55132: GO 73525
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55134: LD_VAR 0 1
55138: PUSH
55139: LD_INT 6
55141: PUSH
55142: LD_INT 7
55144: PUSH
55145: LD_INT 8
55147: PUSH
55148: LD_INT 13
55150: PUSH
55151: LD_INT 12
55153: PUSH
55154: LD_INT 15
55156: PUSH
55157: LD_INT 11
55159: PUSH
55160: LD_INT 14
55162: PUSH
55163: LD_INT 10
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: IN
55177: IFFALSE 55187
// btype = b_lab ;
55179: LD_ADDR_VAR 0 1
55183: PUSH
55184: LD_INT 6
55186: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55187: LD_VAR 0 6
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: LIST
55205: IN
55206: NOT
55207: PUSH
55208: LD_VAR 0 1
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: LD_INT 2
55221: PUSH
55222: LD_INT 3
55224: PUSH
55225: LD_INT 6
55227: PUSH
55228: LD_INT 36
55230: PUSH
55231: LD_INT 4
55233: PUSH
55234: LD_INT 5
55236: PUSH
55237: LD_INT 31
55239: PUSH
55240: LD_INT 32
55242: PUSH
55243: LD_INT 33
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: IN
55259: NOT
55260: PUSH
55261: LD_VAR 0 6
55265: PUSH
55266: LD_INT 1
55268: EQUAL
55269: AND
55270: OR
55271: PUSH
55272: LD_VAR 0 1
55276: PUSH
55277: LD_INT 2
55279: PUSH
55280: LD_INT 3
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: IN
55287: NOT
55288: PUSH
55289: LD_VAR 0 6
55293: PUSH
55294: LD_INT 2
55296: EQUAL
55297: AND
55298: OR
55299: IFFALSE 55309
// mode = 0 ;
55301: LD_ADDR_VAR 0 6
55305: PUSH
55306: LD_INT 0
55308: ST_TO_ADDR
// case mode of 0 :
55309: LD_VAR 0 6
55313: PUSH
55314: LD_INT 0
55316: DOUBLE
55317: EQUAL
55318: IFTRUE 55322
55320: GO 66775
55322: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55323: LD_ADDR_VAR 0 11
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: LD_INT 2
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 2
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: LD_INT 2
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 3
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: LD_INT 3
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55516: LD_ADDR_VAR 0 12
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: LD_INT 1
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 1
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 2
55639: NEG
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 2
55650: NEG
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: NEG
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 3
55673: NEG
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 3
55684: NEG
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55712: LD_ADDR_VAR 0 13
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 2
55835: NEG
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: NEG
55848: PUSH
55849: LD_INT 2
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 2
55859: NEG
55860: PUSH
55861: LD_INT 3
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 3
55871: NEG
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 3
55883: NEG
55884: PUSH
55885: LD_INT 3
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55911: LD_ADDR_VAR 0 14
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: NEG
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: LD_INT 2
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: LD_INT 3
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 3
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56107: LD_ADDR_VAR 0 15
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 2
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 2
56230: NEG
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 3
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 3
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56300: LD_ADDR_VAR 0 16
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 2
56403: PUSH
56404: LD_INT 2
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: LD_INT 2
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 2
56423: NEG
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 2
56435: NEG
56436: PUSH
56437: LD_INT 2
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 3
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 3
56457: PUSH
56458: LD_INT 3
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 2
56467: PUSH
56468: LD_INT 3
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56493: LD_ADDR_VAR 0 17
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: LD_INT 2
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 2
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 2
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: PUSH
56629: LD_INT 2
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: LD_INT 2
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: LD_INT 2
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 2
56669: NEG
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 2
56680: NEG
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 2
56692: NEG
56693: PUSH
56694: LD_INT 2
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56723: LD_ADDR_VAR 0 18
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: LD_INT 0
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: NEG
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: NEG
56805: PUSH
56806: LD_INT 2
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 2
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: LD_INT 1
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: LD_INT 0
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 2
56922: NEG
56923: PUSH
56924: LD_INT 2
56926: NEG
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56953: LD_ADDR_VAR 0 19
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 1
57011: NEG
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: LD_INT 2
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 2
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 2
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: LD_INT 2
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: LD_INT 2
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: LD_INT 2
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 2
57129: NEG
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 2
57152: NEG
57153: PUSH
57154: LD_INT 2
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57183: LD_ADDR_VAR 0 20
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 0
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 0
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: LD_INT 2
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: LD_INT 2
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 2
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 2
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 2
57318: PUSH
57319: LD_INT 2
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 2
57359: NEG
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 2
57370: NEG
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 2
57382: NEG
57383: PUSH
57384: LD_INT 2
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57413: LD_ADDR_VAR 0 21
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: NEG
57483: PUSH
57484: LD_INT 1
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 1
57494: NEG
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: LD_INT 2
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 2
57538: PUSH
57539: LD_INT 1
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 2
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: LD_INT 2
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 2
57589: NEG
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 2
57600: NEG
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: LD_INT 2
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57643: LD_ADDR_VAR 0 22
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 1
57724: NEG
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: LD_INT 2
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 2
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: LD_INT 1
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: LD_INT 2
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: LD_INT 2
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: LD_INT 2
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: NEG
57809: PUSH
57810: LD_INT 1
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 2
57819: NEG
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 2
57830: NEG
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: LD_INT 2
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57873: LD_ADDR_VAR 0 23
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: LD_INT 1
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: LD_INT 1
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 1
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: NEG
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: LD_INT 2
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: LD_INT 2
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 2
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 2
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: LD_INT 2
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 1
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: LD_INT 2
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 2
58049: NEG
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 2
58060: NEG
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 2
58072: NEG
58073: PUSH
58074: LD_INT 2
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 2
58084: NEG
58085: PUSH
58086: LD_INT 3
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: LD_INT 3
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: LD_INT 2
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58153: LD_ADDR_VAR 0 24
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: LD_INT 1
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: LD_INT 2
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 2
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: PUSH
58299: LD_INT 2
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: LD_INT 2
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 2
58329: NEG
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 2
58340: NEG
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 2
58352: NEG
58353: PUSH
58354: LD_INT 2
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 1
58364: PUSH
58365: LD_INT 2
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 3
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 3
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58429: LD_ADDR_VAR 0 25
58433: PUSH
58434: LD_INT 0
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: LD_INT 2
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: LD_INT 2
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 2
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 2
58564: PUSH
58565: LD_INT 2
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: LD_INT 2
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: LD_INT 2
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: NEG
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 2
58616: NEG
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: NEG
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 3
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 3
58650: PUSH
58651: LD_INT 2
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: LD_INT 3
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: LD_INT 3
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58703: LD_ADDR_VAR 0 26
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 0
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: LD_INT 2
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: LD_INT 2
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: LD_INT 2
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: LD_INT 1
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: LD_INT 0
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 2
58890: NEG
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 2
58902: NEG
58903: PUSH
58904: LD_INT 2
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 2
58914: PUSH
58915: LD_INT 3
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: LD_INT 3
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 1
58934: NEG
58935: PUSH
58936: LD_INT 2
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 2
58945: NEG
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58979: LD_ADDR_VAR 0 27
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: LD_INT 0
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: LD_INT 1
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 1
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: LD_INT 1
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: NEG
59061: PUSH
59062: LD_INT 2
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: LD_INT 2
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 2
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 2
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 2
59114: PUSH
59115: LD_INT 2
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: PUSH
59125: LD_INT 2
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 2
59155: NEG
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: LD_INT 2
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 2
59201: NEG
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 3
59212: NEG
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 3
59224: NEG
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59259: LD_ADDR_VAR 0 28
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: NEG
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: LD_INT 2
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 2
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 2
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 2
59394: PUSH
59395: LD_INT 2
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: LD_INT 2
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: LD_INT 2
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 2
59435: NEG
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 2
59446: NEG
59447: PUSH
59448: LD_INT 1
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 2
59458: NEG
59459: PUSH
59460: LD_INT 2
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: LD_INT 3
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 3
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 3
59494: NEG
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 3
59506: NEG
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59541: LD_ADDR_VAR 0 29
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: LD_INT 1
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: LD_INT 1
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: LD_INT 2
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: LD_INT 2
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: LD_INT 1
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 2
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 2
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: LD_INT 2
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: LD_INT 2
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 2
59707: NEG
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 2
59719: NEG
59720: PUSH
59721: LD_INT 2
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 2
59731: NEG
59732: PUSH
59733: LD_INT 3
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 3
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: LD_INT 3
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: NEG
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 3
59785: NEG
59786: PUSH
59787: LD_INT 2
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59820: LD_ADDR_VAR 0 30
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 0
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: LD_INT 0
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 1
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 1
59878: NEG
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: LD_INT 2
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: LD_INT 2
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 2
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 2
59945: PUSH
59946: LD_INT 1
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 2
59955: PUSH
59956: LD_INT 2
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 1
59965: PUSH
59966: LD_INT 2
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: NEG
59976: PUSH
59977: LD_INT 1
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 2
59986: NEG
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 2
59997: NEG
59998: PUSH
59999: LD_INT 1
60001: NEG
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: LD_INT 3
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: LD_INT 2
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 3
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 2
60042: PUSH
60043: LD_INT 3
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 3
60063: NEG
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60098: LD_ADDR_VAR 0 31
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: LD_INT 1
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: LD_INT 2
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 2
60212: PUSH
60213: LD_INT 1
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 2
60222: PUSH
60223: LD_INT 2
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: LD_INT 1
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: NEG
60276: PUSH
60277: LD_INT 2
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 2
60287: NEG
60288: PUSH
60289: LD_INT 3
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 2
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 3
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: LD_INT 3
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: LD_INT 2
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 3
60341: NEG
60342: PUSH
60343: LD_INT 2
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60376: LD_ADDR_VAR 0 32
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 1
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: LD_INT 1
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: LD_INT 1
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 1
60445: NEG
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 1
60457: NEG
60458: PUSH
60459: LD_INT 2
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 2
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 2
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 2
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 0
60521: PUSH
60522: LD_INT 2
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 1
60531: NEG
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 2
60542: NEG
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 2
60553: NEG
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: LD_INT 3
60569: NEG
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: PUSH
60578: LD_INT 2
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 3
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 2
60598: PUSH
60599: LD_INT 3
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 2
60608: NEG
60609: PUSH
60610: LD_INT 1
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 3
60619: NEG
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60654: LD_ADDR_VAR 0 33
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 1
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 0
60702: PUSH
60703: LD_INT 1
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 1
60712: NEG
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: LD_INT 2
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 2
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 0
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 2
60809: NEG
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 2
60820: NEG
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 2
60832: NEG
60833: PUSH
60834: LD_INT 2
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 2
60844: NEG
60845: PUSH
60846: LD_INT 3
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 3
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: LD_INT 3
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: LD_INT 2
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 3
60898: NEG
60899: PUSH
60900: LD_INT 2
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60933: LD_ADDR_VAR 0 34
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 1
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: LD_INT 0
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: LD_INT 2
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: LD_INT 2
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: LD_INT 1
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 2
61048: PUSH
61049: LD_INT 1
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 2
61058: PUSH
61059: LD_INT 2
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 1
61068: PUSH
61069: LD_INT 2
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: NEG
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 2
61089: NEG
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: LD_INT 1
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 2
61112: NEG
61113: PUSH
61114: LD_INT 2
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 1
61124: NEG
61125: PUSH
61126: LD_INT 3
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 1
61136: PUSH
61137: LD_INT 2
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 3
61147: PUSH
61148: LD_INT 2
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 2
61157: PUSH
61158: LD_INT 3
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 2
61167: NEG
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 3
61178: NEG
61179: PUSH
61180: LD_INT 1
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61213: LD_ADDR_VAR 0 35
61217: PUSH
61218: LD_INT 0
61220: PUSH
61221: LD_INT 0
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: LD_INT 1
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: LD_INT 0
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 1
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 1
61271: NEG
61272: PUSH
61273: LD_INT 0
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: LD_INT 1
61286: NEG
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 2
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 2
61304: NEG
61305: PUSH
61306: LD_INT 1
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61325: LD_ADDR_VAR 0 36
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: LD_INT 1
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 1
61383: NEG
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: NEG
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: LD_INT 2
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: LD_INT 2
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61437: LD_ADDR_VAR 0 37
61441: PUSH
61442: LD_INT 0
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: LD_INT 1
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 1
61465: PUSH
61466: LD_INT 0
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 1
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 1
61495: NEG
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: NEG
61507: PUSH
61508: LD_INT 1
61510: NEG
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: LD_INT 1
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: LD_INT 1
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61549: LD_ADDR_VAR 0 38
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: LD_INT 0
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 1
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 0
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: LD_INT 0
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: NEG
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 2
61630: PUSH
61631: LD_INT 1
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 2
61640: NEG
61641: PUSH
61642: LD_INT 1
61644: NEG
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61661: LD_ADDR_VAR 0 39
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: LD_INT 0
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: LD_INT 1
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 1
61719: NEG
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: NEG
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: LD_INT 2
61746: NEG
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: LD_INT 2
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61773: LD_ADDR_VAR 0 40
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: LD_INT 1
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 1
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 0
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: LD_INT 1
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: LD_INT 1
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61885: LD_ADDR_VAR 0 41
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 1
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 1
61923: PUSH
61924: LD_INT 1
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: LD_INT 1
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: LD_INT 1
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: NEG
61967: PUSH
61968: LD_INT 2
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 2
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 2
61999: PUSH
62000: LD_INT 1
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 2
62009: PUSH
62010: LD_INT 2
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: LD_INT 2
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: LD_INT 1
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 2
62040: NEG
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 2
62051: NEG
62052: PUSH
62053: LD_INT 1
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 2
62063: NEG
62064: PUSH
62065: LD_INT 2
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 2
62075: NEG
62076: PUSH
62077: LD_INT 3
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 2
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 3
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 3
62108: PUSH
62109: LD_INT 1
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 3
62118: PUSH
62119: LD_INT 2
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 3
62128: PUSH
62129: LD_INT 3
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 2
62138: PUSH
62139: LD_INT 3
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 2
62148: NEG
62149: PUSH
62150: LD_INT 1
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 3
62159: NEG
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 3
62170: NEG
62171: PUSH
62172: LD_INT 1
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 3
62182: NEG
62183: PUSH
62184: LD_INT 2
62186: NEG
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 3
62194: NEG
62195: PUSH
62196: LD_INT 3
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62235: LD_ADDR_VAR 0 42
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: LD_INT 1
62255: NEG
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: LD_INT 1
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: LD_INT 1
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: NEG
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 1
62316: NEG
62317: PUSH
62318: LD_INT 2
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 2
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 1
62339: PUSH
62340: LD_INT 1
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 2
62350: PUSH
62351: LD_INT 1
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 2
62360: PUSH
62361: LD_INT 2
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 1
62370: PUSH
62371: LD_INT 2
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: LD_INT 2
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: NEG
62391: PUSH
62392: LD_INT 1
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 2
62401: NEG
62402: PUSH
62403: LD_INT 1
62405: NEG
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 2
62413: NEG
62414: PUSH
62415: LD_INT 2
62417: NEG
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 2
62425: NEG
62426: PUSH
62427: LD_INT 3
62429: NEG
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: LD_INT 3
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 0
62449: PUSH
62450: LD_INT 3
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: PUSH
62461: LD_INT 2
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 3
62471: PUSH
62472: LD_INT 2
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 3
62481: PUSH
62482: LD_INT 3
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 2
62491: PUSH
62492: LD_INT 3
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 1
62501: PUSH
62502: LD_INT 3
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: LD_INT 3
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 1
62521: NEG
62522: PUSH
62523: LD_INT 2
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 3
62532: NEG
62533: PUSH
62534: LD_INT 2
62536: NEG
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 3
62544: NEG
62545: PUSH
62546: LD_INT 3
62548: NEG
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62585: LD_ADDR_VAR 0 43
62589: PUSH
62590: LD_INT 0
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 1
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 1
62623: PUSH
62624: LD_INT 1
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 0
62633: PUSH
62634: LD_INT 1
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: LD_INT 0
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 1
62654: NEG
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 1
62666: NEG
62667: PUSH
62668: LD_INT 2
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: LD_INT 2
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: LD_INT 1
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 2
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 2
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 1
62720: PUSH
62721: LD_INT 2
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 0
62730: PUSH
62731: LD_INT 2
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 1
62740: NEG
62741: PUSH
62742: LD_INT 1
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 2
62751: NEG
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 2
62762: NEG
62763: PUSH
62764: LD_INT 1
62766: NEG
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 1
62774: NEG
62775: PUSH
62776: LD_INT 3
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: LD_INT 3
62789: NEG
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: PUSH
62795: LD_INT 1
62797: PUSH
62798: LD_INT 2
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 2
62808: PUSH
62809: LD_INT 1
62811: NEG
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 3
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 3
62829: PUSH
62830: LD_INT 1
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: LD_INT 3
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 0
62849: PUSH
62850: LD_INT 3
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: PUSH
62861: LD_INT 2
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 2
62870: NEG
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 3
62881: NEG
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 3
62892: NEG
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62933: LD_ADDR_VAR 0 44
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: LD_INT 1
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 1
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: LD_INT 1
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: NEG
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: LD_INT 2
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 1
63026: PUSH
63027: LD_INT 1
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 2
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 2
63047: PUSH
63048: LD_INT 1
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 2
63057: PUSH
63058: LD_INT 2
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: PUSH
63068: LD_INT 2
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 2
63088: NEG
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 2
63099: NEG
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 2
63111: NEG
63112: PUSH
63113: LD_INT 2
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 2
63123: NEG
63124: PUSH
63125: LD_INT 3
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 2
63135: PUSH
63136: LD_INT 1
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 3
63146: PUSH
63147: LD_INT 0
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 3
63156: PUSH
63157: LD_INT 1
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 3
63166: PUSH
63167: LD_INT 2
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 3
63176: PUSH
63177: LD_INT 3
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 2
63186: PUSH
63187: LD_INT 3
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 2
63196: NEG
63197: PUSH
63198: LD_INT 1
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 3
63207: NEG
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 3
63218: NEG
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 3
63230: NEG
63231: PUSH
63232: LD_INT 2
63234: NEG
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 3
63242: NEG
63243: PUSH
63244: LD_INT 3
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63283: LD_ADDR_VAR 0 45
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: LD_INT 0
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: LD_INT 1
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: LD_INT 1
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 1
63352: NEG
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: LD_INT 2
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: LD_INT 2
63379: NEG
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 1
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 2
63398: PUSH
63399: LD_INT 1
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 2
63408: PUSH
63409: LD_INT 2
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 1
63418: PUSH
63419: LD_INT 2
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: LD_INT 2
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 1
63438: NEG
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 2
63449: NEG
63450: PUSH
63451: LD_INT 1
63453: NEG
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 2
63461: NEG
63462: PUSH
63463: LD_INT 2
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 2
63473: NEG
63474: PUSH
63475: LD_INT 3
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 1
63485: NEG
63486: PUSH
63487: LD_INT 3
63489: NEG
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 0
63497: PUSH
63498: LD_INT 3
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 1
63508: PUSH
63509: LD_INT 2
63511: NEG
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 3
63519: PUSH
63520: LD_INT 2
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 3
63529: PUSH
63530: LD_INT 3
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 2
63539: PUSH
63540: LD_INT 3
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 1
63549: PUSH
63550: LD_INT 3
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: LD_INT 3
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: LD_INT 2
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 3
63580: NEG
63581: PUSH
63582: LD_INT 2
63584: NEG
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 3
63592: NEG
63593: PUSH
63594: LD_INT 3
63596: NEG
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63633: LD_ADDR_VAR 0 46
63637: PUSH
63638: LD_INT 0
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: LD_INT 1
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 1
63661: PUSH
63662: LD_INT 0
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 1
63671: PUSH
63672: LD_INT 1
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 1
63691: NEG
63692: PUSH
63693: LD_INT 0
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 1
63702: NEG
63703: PUSH
63704: LD_INT 1
63706: NEG
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: LD_INT 2
63718: NEG
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: LD_INT 2
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 1
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 2
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 2
63758: PUSH
63759: LD_INT 1
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 1
63768: PUSH
63769: LD_INT 2
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 0
63778: PUSH
63779: LD_INT 2
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: NEG
63789: PUSH
63790: LD_INT 1
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 2
63799: NEG
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 2
63810: NEG
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 1
63822: NEG
63823: PUSH
63824: LD_INT 3
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: LD_INT 3
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 1
63845: PUSH
63846: LD_INT 2
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 2
63856: PUSH
63857: LD_INT 1
63859: NEG
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 3
63867: PUSH
63868: LD_INT 0
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 3
63877: PUSH
63878: LD_INT 1
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: LD_INT 3
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 0
63897: PUSH
63898: LD_INT 3
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 1
63907: NEG
63908: PUSH
63909: LD_INT 2
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 2
63918: NEG
63919: PUSH
63920: LD_INT 1
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 3
63929: NEG
63930: PUSH
63931: LD_INT 0
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 3
63940: NEG
63941: PUSH
63942: LD_INT 1
63944: NEG
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63981: LD_ADDR_VAR 0 47
63985: PUSH
63986: LD_INT 0
63988: PUSH
63989: LD_INT 0
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: LD_INT 1
64001: NEG
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 1
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: LD_INT 1
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: LD_INT 1
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 1
64039: NEG
64040: PUSH
64041: LD_INT 0
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 1
64050: NEG
64051: PUSH
64052: LD_INT 1
64054: NEG
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 1
64062: NEG
64063: PUSH
64064: LD_INT 2
64066: NEG
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: LD_INT 2
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: LD_INT 1
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 2
64096: NEG
64097: PUSH
64098: LD_INT 1
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 2
64108: NEG
64109: PUSH
64110: LD_INT 2
64112: NEG
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64132: LD_ADDR_VAR 0 48
64136: PUSH
64137: LD_INT 0
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: LD_INT 1
64152: NEG
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 1
64160: PUSH
64161: LD_INT 0
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 1
64170: PUSH
64171: LD_INT 1
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: LD_INT 1
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 1
64190: NEG
64191: PUSH
64192: LD_INT 0
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: PUSH
64203: LD_INT 1
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 1
64213: NEG
64214: PUSH
64215: LD_INT 2
64217: NEG
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 0
64225: PUSH
64226: LD_INT 2
64228: NEG
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 1
64236: PUSH
64237: LD_INT 1
64239: NEG
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 2
64247: PUSH
64248: LD_INT 0
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 2
64257: PUSH
64258: LD_INT 1
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64279: LD_ADDR_VAR 0 49
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 0
64296: PUSH
64297: LD_INT 1
64299: NEG
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 1
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 0
64327: PUSH
64328: LD_INT 1
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 1
64337: NEG
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 1
64348: NEG
64349: PUSH
64350: LD_INT 1
64352: NEG
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 1
64360: PUSH
64361: LD_INT 1
64363: NEG
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 2
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 2
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 2
64391: PUSH
64392: LD_INT 2
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 1
64401: PUSH
64402: LD_INT 2
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64423: LD_ADDR_VAR 0 50
64427: PUSH
64428: LD_INT 0
64430: PUSH
64431: LD_INT 0
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: LD_INT 1
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 1
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: LD_INT 1
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 0
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 1
64481: NEG
64482: PUSH
64483: LD_INT 0
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 1
64492: NEG
64493: PUSH
64494: LD_INT 1
64496: NEG
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 2
64504: PUSH
64505: LD_INT 1
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 2
64514: PUSH
64515: LD_INT 2
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 1
64524: PUSH
64525: LD_INT 2
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: LD_INT 2
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 1
64544: NEG
64545: PUSH
64546: LD_INT 1
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64567: LD_ADDR_VAR 0 51
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: LD_INT 0
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: LD_INT 1
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: LD_INT 1
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: LD_INT 1
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: NEG
64626: PUSH
64627: LD_INT 0
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 1
64636: NEG
64637: PUSH
64638: LD_INT 1
64640: NEG
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 1
64648: PUSH
64649: LD_INT 2
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 0
64658: PUSH
64659: LD_INT 2
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: PUSH
64670: LD_INT 1
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 2
64679: NEG
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 2
64690: NEG
64691: PUSH
64692: LD_INT 1
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64714: LD_ADDR_VAR 0 52
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 0
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 1
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 1
64752: PUSH
64753: LD_INT 1
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: LD_INT 1
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 1
64772: NEG
64773: PUSH
64774: LD_INT 0
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 1
64783: NEG
64784: PUSH
64785: LD_INT 1
64787: NEG
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 1
64795: NEG
64796: PUSH
64797: LD_INT 2
64799: NEG
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 1
64807: NEG
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 2
64818: NEG
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 2
64829: NEG
64830: PUSH
64831: LD_INT 1
64833: NEG
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 2
64841: NEG
64842: PUSH
64843: LD_INT 2
64845: NEG
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64865: LD_ADDR_VAR 0 53
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: LD_INT 0
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: LD_INT 1
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 1
64893: PUSH
64894: LD_INT 0
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 1
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: LD_INT 1
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 1
64923: NEG
64924: PUSH
64925: LD_INT 0
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 1
64934: NEG
64935: PUSH
64936: LD_INT 1
64938: NEG
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: LD_INT 2
64950: NEG
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: LD_INT 2
64961: NEG
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 1
64969: PUSH
64970: LD_INT 1
64972: NEG
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 2
64980: PUSH
64981: LD_INT 0
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 2
64990: PUSH
64991: LD_INT 1
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 2
65000: PUSH
65001: LD_INT 2
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 1
65010: PUSH
65011: LD_INT 2
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 2
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 1
65030: NEG
65031: PUSH
65032: LD_INT 1
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 2
65041: NEG
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 2
65052: NEG
65053: PUSH
65054: LD_INT 1
65056: NEG
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 2
65064: NEG
65065: PUSH
65066: LD_INT 2
65068: NEG
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65095: LD_ADDR_VAR 0 54
65099: PUSH
65100: LD_INT 0
65102: PUSH
65103: LD_INT 0
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 0
65112: PUSH
65113: LD_INT 1
65115: NEG
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 1
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 1
65133: PUSH
65134: LD_INT 1
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 0
65143: PUSH
65144: LD_INT 1
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 1
65153: NEG
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 1
65164: NEG
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: LD_INT 2
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: LD_INT 2
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: LD_INT 1
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 2
65210: PUSH
65211: LD_INT 0
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 2
65220: PUSH
65221: LD_INT 1
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 2
65230: PUSH
65231: LD_INT 2
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 1
65240: PUSH
65241: LD_INT 2
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 0
65250: PUSH
65251: LD_INT 2
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 1
65260: NEG
65261: PUSH
65262: LD_INT 1
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 2
65271: NEG
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 2
65282: NEG
65283: PUSH
65284: LD_INT 1
65286: NEG
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 2
65294: NEG
65295: PUSH
65296: LD_INT 2
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65325: LD_ADDR_VAR 0 55
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: LD_INT 0
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 0
65342: PUSH
65343: LD_INT 1
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 1
65353: PUSH
65354: LD_INT 0
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 1
65363: PUSH
65364: LD_INT 1
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 0
65373: PUSH
65374: LD_INT 1
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 1
65383: NEG
65384: PUSH
65385: LD_INT 0
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 1
65394: NEG
65395: PUSH
65396: LD_INT 1
65398: NEG
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 1
65406: NEG
65407: PUSH
65408: LD_INT 2
65410: NEG
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 0
65418: PUSH
65419: LD_INT 2
65421: NEG
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: LD_INT 1
65432: NEG
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 2
65440: PUSH
65441: LD_INT 0
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 2
65450: PUSH
65451: LD_INT 1
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 2
65460: PUSH
65461: LD_INT 2
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 1
65470: PUSH
65471: LD_INT 2
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 0
65480: PUSH
65481: LD_INT 2
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 1
65490: NEG
65491: PUSH
65492: LD_INT 1
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 2
65501: NEG
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 2
65512: NEG
65513: PUSH
65514: LD_INT 1
65516: NEG
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 2
65524: NEG
65525: PUSH
65526: LD_INT 2
65528: NEG
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65555: LD_ADDR_VAR 0 56
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: LD_INT 0
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 0
65572: PUSH
65573: LD_INT 1
65575: NEG
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: PUSH
65584: LD_INT 0
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 1
65593: PUSH
65594: LD_INT 1
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 0
65603: PUSH
65604: LD_INT 1
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 1
65613: NEG
65614: PUSH
65615: LD_INT 0
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 1
65624: NEG
65625: PUSH
65626: LD_INT 1
65628: NEG
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 1
65636: NEG
65637: PUSH
65638: LD_INT 2
65640: NEG
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: LD_INT 2
65651: NEG
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 1
65659: PUSH
65660: LD_INT 1
65662: NEG
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 2
65670: PUSH
65671: LD_INT 0
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 2
65680: PUSH
65681: LD_INT 1
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 2
65690: PUSH
65691: LD_INT 2
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 1
65700: PUSH
65701: LD_INT 2
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PUSH
65708: LD_INT 0
65710: PUSH
65711: LD_INT 2
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 1
65720: NEG
65721: PUSH
65722: LD_INT 1
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 2
65731: NEG
65732: PUSH
65733: LD_INT 0
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 2
65742: NEG
65743: PUSH
65744: LD_INT 1
65746: NEG
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 2
65754: NEG
65755: PUSH
65756: LD_INT 2
65758: NEG
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65785: LD_ADDR_VAR 0 57
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 0
65802: PUSH
65803: LD_INT 1
65805: NEG
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 1
65813: PUSH
65814: LD_INT 0
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: LD_INT 1
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 0
65833: PUSH
65834: LD_INT 1
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 1
65843: NEG
65844: PUSH
65845: LD_INT 0
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 1
65854: NEG
65855: PUSH
65856: LD_INT 1
65858: NEG
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 1
65866: NEG
65867: PUSH
65868: LD_INT 2
65870: NEG
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 0
65878: PUSH
65879: LD_INT 2
65881: NEG
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 1
65889: PUSH
65890: LD_INT 1
65892: NEG
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 2
65900: PUSH
65901: LD_INT 0
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 2
65910: PUSH
65911: LD_INT 1
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 2
65920: PUSH
65921: LD_INT 2
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 1
65930: PUSH
65931: LD_INT 2
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 0
65940: PUSH
65941: LD_INT 2
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: NEG
65951: PUSH
65952: LD_INT 1
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 2
65961: NEG
65962: PUSH
65963: LD_INT 0
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 2
65972: NEG
65973: PUSH
65974: LD_INT 1
65976: NEG
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 2
65984: NEG
65985: PUSH
65986: LD_INT 2
65988: NEG
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66015: LD_ADDR_VAR 0 58
66019: PUSH
66020: LD_INT 0
66022: PUSH
66023: LD_INT 0
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 0
66032: PUSH
66033: LD_INT 1
66035: NEG
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 1
66043: PUSH
66044: LD_INT 0
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 1
66053: PUSH
66054: LD_INT 1
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 0
66063: PUSH
66064: LD_INT 1
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 1
66073: NEG
66074: PUSH
66075: LD_INT 0
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 1
66084: NEG
66085: PUSH
66086: LD_INT 1
66088: NEG
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 1
66096: NEG
66097: PUSH
66098: LD_INT 2
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: LD_INT 2
66111: NEG
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 1
66119: PUSH
66120: LD_INT 1
66122: NEG
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 2
66130: PUSH
66131: LD_INT 0
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 2
66140: PUSH
66141: LD_INT 1
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 2
66150: PUSH
66151: LD_INT 2
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 1
66160: PUSH
66161: LD_INT 2
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 0
66170: PUSH
66171: LD_INT 2
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 1
66180: NEG
66181: PUSH
66182: LD_INT 1
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 2
66191: NEG
66192: PUSH
66193: LD_INT 0
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 2
66202: NEG
66203: PUSH
66204: LD_INT 1
66206: NEG
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 2
66214: NEG
66215: PUSH
66216: LD_INT 2
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66245: LD_ADDR_VAR 0 59
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: LD_INT 0
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 0
66262: PUSH
66263: LD_INT 1
66265: NEG
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 1
66273: PUSH
66274: LD_INT 0
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 1
66283: PUSH
66284: LD_INT 1
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 0
66293: PUSH
66294: LD_INT 1
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 1
66303: NEG
66304: PUSH
66305: LD_INT 0
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 1
66314: NEG
66315: PUSH
66316: LD_INT 1
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66333: LD_ADDR_VAR 0 60
66337: PUSH
66338: LD_INT 0
66340: PUSH
66341: LD_INT 0
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 0
66350: PUSH
66351: LD_INT 1
66353: NEG
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 1
66361: PUSH
66362: LD_INT 0
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 1
66371: PUSH
66372: LD_INT 1
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 0
66381: PUSH
66382: LD_INT 1
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 1
66391: NEG
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 1
66402: NEG
66403: PUSH
66404: LD_INT 1
66406: NEG
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66421: LD_ADDR_VAR 0 61
66425: PUSH
66426: LD_INT 0
66428: PUSH
66429: LD_INT 0
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 0
66438: PUSH
66439: LD_INT 1
66441: NEG
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: LD_INT 1
66449: PUSH
66450: LD_INT 0
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 1
66459: PUSH
66460: LD_INT 1
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 0
66469: PUSH
66470: LD_INT 1
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 1
66479: NEG
66480: PUSH
66481: LD_INT 0
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 1
66490: NEG
66491: PUSH
66492: LD_INT 1
66494: NEG
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66509: LD_ADDR_VAR 0 62
66513: PUSH
66514: LD_INT 0
66516: PUSH
66517: LD_INT 0
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: LD_INT 1
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 1
66547: PUSH
66548: LD_INT 1
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 0
66557: PUSH
66558: LD_INT 1
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 1
66567: NEG
66568: PUSH
66569: LD_INT 0
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 1
66578: NEG
66579: PUSH
66580: LD_INT 1
66582: NEG
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66597: LD_ADDR_VAR 0 63
66601: PUSH
66602: LD_INT 0
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 0
66614: PUSH
66615: LD_INT 1
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 1
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 1
66635: PUSH
66636: LD_INT 1
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: LD_INT 1
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 1
66655: NEG
66656: PUSH
66657: LD_INT 0
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 1
66666: NEG
66667: PUSH
66668: LD_INT 1
66670: NEG
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66685: LD_ADDR_VAR 0 64
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 0
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 1
66723: PUSH
66724: LD_INT 1
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 0
66733: PUSH
66734: LD_INT 1
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 1
66743: NEG
66744: PUSH
66745: LD_INT 0
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 1
66754: NEG
66755: PUSH
66756: LD_INT 1
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: ST_TO_ADDR
// end ; 1 :
66773: GO 72670
66775: LD_INT 1
66777: DOUBLE
66778: EQUAL
66779: IFTRUE 66783
66781: GO 69406
66783: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66784: LD_ADDR_VAR 0 11
66788: PUSH
66789: LD_INT 1
66791: NEG
66792: PUSH
66793: LD_INT 3
66795: NEG
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 0
66803: PUSH
66804: LD_INT 3
66806: NEG
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 1
66814: PUSH
66815: LD_INT 2
66817: NEG
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: LIST
66827: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66828: LD_ADDR_VAR 0 12
66832: PUSH
66833: LD_INT 2
66835: PUSH
66836: LD_INT 1
66838: NEG
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 3
66846: PUSH
66847: LD_INT 0
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 3
66856: PUSH
66857: LD_INT 1
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: LIST
66868: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66869: LD_ADDR_VAR 0 13
66873: PUSH
66874: LD_INT 3
66876: PUSH
66877: LD_INT 2
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 3
66886: PUSH
66887: LD_INT 3
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 2
66896: PUSH
66897: LD_INT 3
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: LIST
66908: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66909: LD_ADDR_VAR 0 14
66913: PUSH
66914: LD_INT 1
66916: PUSH
66917: LD_INT 3
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 0
66926: PUSH
66927: LD_INT 3
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 1
66936: NEG
66937: PUSH
66938: LD_INT 2
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: LIST
66949: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66950: LD_ADDR_VAR 0 15
66954: PUSH
66955: LD_INT 2
66957: NEG
66958: PUSH
66959: LD_INT 1
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 3
66968: NEG
66969: PUSH
66970: LD_INT 0
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: LD_INT 3
66979: NEG
66980: PUSH
66981: LD_INT 1
66983: NEG
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: LIST
66993: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66994: LD_ADDR_VAR 0 16
66998: PUSH
66999: LD_INT 2
67001: NEG
67002: PUSH
67003: LD_INT 3
67005: NEG
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 3
67013: NEG
67014: PUSH
67015: LD_INT 2
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 3
67025: NEG
67026: PUSH
67027: LD_INT 3
67029: NEG
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: LIST
67039: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67040: LD_ADDR_VAR 0 17
67044: PUSH
67045: LD_INT 1
67047: NEG
67048: PUSH
67049: LD_INT 3
67051: NEG
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 0
67059: PUSH
67060: LD_INT 3
67062: NEG
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 1
67070: PUSH
67071: LD_INT 2
67073: NEG
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: LIST
67083: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67084: LD_ADDR_VAR 0 18
67088: PUSH
67089: LD_INT 2
67091: PUSH
67092: LD_INT 1
67094: NEG
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 3
67102: PUSH
67103: LD_INT 0
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 3
67112: PUSH
67113: LD_INT 1
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: LIST
67124: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67125: LD_ADDR_VAR 0 19
67129: PUSH
67130: LD_INT 3
67132: PUSH
67133: LD_INT 2
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 3
67142: PUSH
67143: LD_INT 3
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 2
67152: PUSH
67153: LD_INT 3
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: LIST
67164: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67165: LD_ADDR_VAR 0 20
67169: PUSH
67170: LD_INT 1
67172: PUSH
67173: LD_INT 3
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 0
67182: PUSH
67183: LD_INT 3
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 1
67192: NEG
67193: PUSH
67194: LD_INT 2
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: LIST
67205: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67206: LD_ADDR_VAR 0 21
67210: PUSH
67211: LD_INT 2
67213: NEG
67214: PUSH
67215: LD_INT 1
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 3
67224: NEG
67225: PUSH
67226: LD_INT 0
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 3
67235: NEG
67236: PUSH
67237: LD_INT 1
67239: NEG
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: LIST
67249: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67250: LD_ADDR_VAR 0 22
67254: PUSH
67255: LD_INT 2
67257: NEG
67258: PUSH
67259: LD_INT 3
67261: NEG
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 3
67269: NEG
67270: PUSH
67271: LD_INT 2
67273: NEG
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 3
67281: NEG
67282: PUSH
67283: LD_INT 3
67285: NEG
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: LIST
67295: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67296: LD_ADDR_VAR 0 23
67300: PUSH
67301: LD_INT 0
67303: PUSH
67304: LD_INT 3
67306: NEG
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 1
67314: NEG
67315: PUSH
67316: LD_INT 4
67318: NEG
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 1
67326: PUSH
67327: LD_INT 3
67329: NEG
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: LIST
67339: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67340: LD_ADDR_VAR 0 24
67344: PUSH
67345: LD_INT 3
67347: PUSH
67348: LD_INT 0
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 3
67357: PUSH
67358: LD_INT 1
67360: NEG
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 4
67368: PUSH
67369: LD_INT 1
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: LIST
67380: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67381: LD_ADDR_VAR 0 25
67385: PUSH
67386: LD_INT 3
67388: PUSH
67389: LD_INT 3
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 4
67398: PUSH
67399: LD_INT 3
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 3
67408: PUSH
67409: LD_INT 4
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: LIST
67420: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67421: LD_ADDR_VAR 0 26
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: LD_INT 3
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 1
67438: PUSH
67439: LD_INT 4
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 1
67448: NEG
67449: PUSH
67450: LD_INT 3
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: LIST
67461: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67462: LD_ADDR_VAR 0 27
67466: PUSH
67467: LD_INT 3
67469: NEG
67470: PUSH
67471: LD_INT 0
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 3
67480: NEG
67481: PUSH
67482: LD_INT 1
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 4
67491: NEG
67492: PUSH
67493: LD_INT 1
67495: NEG
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: LIST
67505: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67506: LD_ADDR_VAR 0 28
67510: PUSH
67511: LD_INT 3
67513: NEG
67514: PUSH
67515: LD_INT 3
67517: NEG
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 3
67525: NEG
67526: PUSH
67527: LD_INT 4
67529: NEG
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 4
67537: NEG
67538: PUSH
67539: LD_INT 3
67541: NEG
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: LIST
67551: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67552: LD_ADDR_VAR 0 29
67556: PUSH
67557: LD_INT 1
67559: NEG
67560: PUSH
67561: LD_INT 3
67563: NEG
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 0
67571: PUSH
67572: LD_INT 3
67574: NEG
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 1
67582: PUSH
67583: LD_INT 2
67585: NEG
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 1
67593: NEG
67594: PUSH
67595: LD_INT 4
67597: NEG
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: LD_INT 4
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 1
67616: PUSH
67617: LD_INT 3
67619: NEG
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 1
67627: NEG
67628: PUSH
67629: LD_INT 5
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 0
67639: PUSH
67640: LD_INT 5
67642: NEG
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 1
67650: PUSH
67651: LD_INT 4
67653: NEG
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 1
67661: NEG
67662: PUSH
67663: LD_INT 6
67665: NEG
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 0
67673: PUSH
67674: LD_INT 6
67676: NEG
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 1
67684: PUSH
67685: LD_INT 5
67687: NEG
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67707: LD_ADDR_VAR 0 30
67711: PUSH
67712: LD_INT 2
67714: PUSH
67715: LD_INT 1
67717: NEG
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 3
67725: PUSH
67726: LD_INT 0
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 3
67735: PUSH
67736: LD_INT 1
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 3
67745: PUSH
67746: LD_INT 1
67748: NEG
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 4
67756: PUSH
67757: LD_INT 0
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 4
67766: PUSH
67767: LD_INT 1
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 4
67776: PUSH
67777: LD_INT 1
67779: NEG
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 5
67787: PUSH
67788: LD_INT 0
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 5
67797: PUSH
67798: LD_INT 1
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 5
67807: PUSH
67808: LD_INT 1
67810: NEG
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 6
67818: PUSH
67819: LD_INT 0
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 6
67828: PUSH
67829: LD_INT 1
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67850: LD_ADDR_VAR 0 31
67854: PUSH
67855: LD_INT 3
67857: PUSH
67858: LD_INT 2
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: LD_INT 3
67867: PUSH
67868: LD_INT 3
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PUSH
67875: LD_INT 2
67877: PUSH
67878: LD_INT 3
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 4
67887: PUSH
67888: LD_INT 3
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 4
67897: PUSH
67898: LD_INT 4
67900: PUSH
67901: EMPTY
67902: LIST
67903: LIST
67904: PUSH
67905: LD_INT 3
67907: PUSH
67908: LD_INT 4
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: PUSH
67915: LD_INT 5
67917: PUSH
67918: LD_INT 4
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 5
67927: PUSH
67928: LD_INT 5
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 4
67937: PUSH
67938: LD_INT 5
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 6
67947: PUSH
67948: LD_INT 5
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 6
67957: PUSH
67958: LD_INT 6
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 5
67967: PUSH
67968: LD_INT 6
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67989: LD_ADDR_VAR 0 32
67993: PUSH
67994: LD_INT 1
67996: PUSH
67997: LD_INT 3
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 0
68006: PUSH
68007: LD_INT 3
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: PUSH
68014: LD_INT 1
68016: NEG
68017: PUSH
68018: LD_INT 2
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 1
68027: PUSH
68028: LD_INT 4
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 0
68037: PUSH
68038: LD_INT 4
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 1
68047: NEG
68048: PUSH
68049: LD_INT 3
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 1
68058: PUSH
68059: LD_INT 5
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 0
68068: PUSH
68069: LD_INT 5
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 1
68078: NEG
68079: PUSH
68080: LD_INT 4
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 1
68089: PUSH
68090: LD_INT 6
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 0
68099: PUSH
68100: LD_INT 6
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 1
68109: NEG
68110: PUSH
68111: LD_INT 5
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68132: LD_ADDR_VAR 0 33
68136: PUSH
68137: LD_INT 2
68139: NEG
68140: PUSH
68141: LD_INT 1
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 3
68150: NEG
68151: PUSH
68152: LD_INT 0
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 3
68161: NEG
68162: PUSH
68163: LD_INT 1
68165: NEG
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: PUSH
68171: LD_INT 3
68173: NEG
68174: PUSH
68175: LD_INT 1
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 4
68184: NEG
68185: PUSH
68186: LD_INT 0
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 4
68195: NEG
68196: PUSH
68197: LD_INT 1
68199: NEG
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 4
68207: NEG
68208: PUSH
68209: LD_INT 1
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 5
68218: NEG
68219: PUSH
68220: LD_INT 0
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 5
68229: NEG
68230: PUSH
68231: LD_INT 1
68233: NEG
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 5
68241: NEG
68242: PUSH
68243: LD_INT 1
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 6
68252: NEG
68253: PUSH
68254: LD_INT 0
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 6
68263: NEG
68264: PUSH
68265: LD_INT 1
68267: NEG
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68287: LD_ADDR_VAR 0 34
68291: PUSH
68292: LD_INT 2
68294: NEG
68295: PUSH
68296: LD_INT 3
68298: NEG
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 3
68306: NEG
68307: PUSH
68308: LD_INT 2
68310: NEG
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 3
68318: NEG
68319: PUSH
68320: LD_INT 3
68322: NEG
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 3
68330: NEG
68331: PUSH
68332: LD_INT 4
68334: NEG
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 4
68342: NEG
68343: PUSH
68344: LD_INT 3
68346: NEG
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 4
68354: NEG
68355: PUSH
68356: LD_INT 4
68358: NEG
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 4
68366: NEG
68367: PUSH
68368: LD_INT 5
68370: NEG
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 5
68378: NEG
68379: PUSH
68380: LD_INT 4
68382: NEG
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 5
68390: NEG
68391: PUSH
68392: LD_INT 5
68394: NEG
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 5
68402: NEG
68403: PUSH
68404: LD_INT 6
68406: NEG
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 6
68414: NEG
68415: PUSH
68416: LD_INT 5
68418: NEG
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 6
68426: NEG
68427: PUSH
68428: LD_INT 6
68430: NEG
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68450: LD_ADDR_VAR 0 41
68454: PUSH
68455: LD_INT 0
68457: PUSH
68458: LD_INT 2
68460: NEG
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 1
68468: NEG
68469: PUSH
68470: LD_INT 3
68472: NEG
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 1
68480: PUSH
68481: LD_INT 2
68483: NEG
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: LIST
68493: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68494: LD_ADDR_VAR 0 42
68498: PUSH
68499: LD_INT 2
68501: PUSH
68502: LD_INT 0
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 2
68511: PUSH
68512: LD_INT 1
68514: NEG
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 3
68522: PUSH
68523: LD_INT 1
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: LIST
68534: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68535: LD_ADDR_VAR 0 43
68539: PUSH
68540: LD_INT 2
68542: PUSH
68543: LD_INT 2
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 3
68552: PUSH
68553: LD_INT 2
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 2
68562: PUSH
68563: LD_INT 3
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: LIST
68574: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68575: LD_ADDR_VAR 0 44
68579: PUSH
68580: LD_INT 0
68582: PUSH
68583: LD_INT 2
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 1
68592: PUSH
68593: LD_INT 3
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 1
68602: NEG
68603: PUSH
68604: LD_INT 2
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: LIST
68615: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68616: LD_ADDR_VAR 0 45
68620: PUSH
68621: LD_INT 2
68623: NEG
68624: PUSH
68625: LD_INT 0
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 2
68634: NEG
68635: PUSH
68636: LD_INT 1
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 3
68645: NEG
68646: PUSH
68647: LD_INT 1
68649: NEG
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: LIST
68659: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68660: LD_ADDR_VAR 0 46
68664: PUSH
68665: LD_INT 2
68667: NEG
68668: PUSH
68669: LD_INT 2
68671: NEG
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 2
68679: NEG
68680: PUSH
68681: LD_INT 3
68683: NEG
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 3
68691: NEG
68692: PUSH
68693: LD_INT 2
68695: NEG
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: LIST
68705: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68706: LD_ADDR_VAR 0 47
68710: PUSH
68711: LD_INT 2
68713: NEG
68714: PUSH
68715: LD_INT 3
68717: NEG
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 1
68725: NEG
68726: PUSH
68727: LD_INT 3
68729: NEG
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68739: LD_ADDR_VAR 0 48
68743: PUSH
68744: LD_INT 1
68746: PUSH
68747: LD_INT 2
68749: NEG
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 2
68757: PUSH
68758: LD_INT 1
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68770: LD_ADDR_VAR 0 49
68774: PUSH
68775: LD_INT 3
68777: PUSH
68778: LD_INT 1
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 3
68787: PUSH
68788: LD_INT 2
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68799: LD_ADDR_VAR 0 50
68803: PUSH
68804: LD_INT 2
68806: PUSH
68807: LD_INT 3
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 1
68816: PUSH
68817: LD_INT 3
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68828: LD_ADDR_VAR 0 51
68832: PUSH
68833: LD_INT 1
68835: NEG
68836: PUSH
68837: LD_INT 2
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 2
68846: NEG
68847: PUSH
68848: LD_INT 1
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68859: LD_ADDR_VAR 0 52
68863: PUSH
68864: LD_INT 3
68866: NEG
68867: PUSH
68868: LD_INT 1
68870: NEG
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 3
68878: NEG
68879: PUSH
68880: LD_INT 2
68882: NEG
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68892: LD_ADDR_VAR 0 53
68896: PUSH
68897: LD_INT 1
68899: NEG
68900: PUSH
68901: LD_INT 3
68903: NEG
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 0
68911: PUSH
68912: LD_INT 3
68914: NEG
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 1
68922: PUSH
68923: LD_INT 2
68925: NEG
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: LIST
68935: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68936: LD_ADDR_VAR 0 54
68940: PUSH
68941: LD_INT 2
68943: PUSH
68944: LD_INT 1
68946: NEG
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 3
68954: PUSH
68955: LD_INT 0
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 3
68964: PUSH
68965: LD_INT 1
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: LIST
68976: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68977: LD_ADDR_VAR 0 55
68981: PUSH
68982: LD_INT 3
68984: PUSH
68985: LD_INT 2
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 3
68994: PUSH
68995: LD_INT 3
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 2
69004: PUSH
69005: LD_INT 3
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: LIST
69016: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69017: LD_ADDR_VAR 0 56
69021: PUSH
69022: LD_INT 1
69024: PUSH
69025: LD_INT 3
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 0
69034: PUSH
69035: LD_INT 3
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 1
69044: NEG
69045: PUSH
69046: LD_INT 2
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: LIST
69057: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69058: LD_ADDR_VAR 0 57
69062: PUSH
69063: LD_INT 2
69065: NEG
69066: PUSH
69067: LD_INT 1
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 3
69076: NEG
69077: PUSH
69078: LD_INT 0
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 3
69087: NEG
69088: PUSH
69089: LD_INT 1
69091: NEG
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: LIST
69101: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69102: LD_ADDR_VAR 0 58
69106: PUSH
69107: LD_INT 2
69109: NEG
69110: PUSH
69111: LD_INT 3
69113: NEG
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 3
69121: NEG
69122: PUSH
69123: LD_INT 2
69125: NEG
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 3
69133: NEG
69134: PUSH
69135: LD_INT 3
69137: NEG
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: LIST
69147: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69148: LD_ADDR_VAR 0 59
69152: PUSH
69153: LD_INT 1
69155: NEG
69156: PUSH
69157: LD_INT 2
69159: NEG
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 0
69167: PUSH
69168: LD_INT 2
69170: NEG
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 1
69178: PUSH
69179: LD_INT 1
69181: NEG
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: LIST
69191: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69192: LD_ADDR_VAR 0 60
69196: PUSH
69197: LD_INT 1
69199: PUSH
69200: LD_INT 1
69202: NEG
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 2
69210: PUSH
69211: LD_INT 0
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 2
69220: PUSH
69221: LD_INT 1
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: LIST
69232: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69233: LD_ADDR_VAR 0 61
69237: PUSH
69238: LD_INT 2
69240: PUSH
69241: LD_INT 1
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 2
69250: PUSH
69251: LD_INT 2
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 1
69260: PUSH
69261: LD_INT 2
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: LIST
69272: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69273: LD_ADDR_VAR 0 62
69277: PUSH
69278: LD_INT 1
69280: PUSH
69281: LD_INT 2
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: LD_INT 2
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 1
69300: NEG
69301: PUSH
69302: LD_INT 1
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: LIST
69313: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69314: LD_ADDR_VAR 0 63
69318: PUSH
69319: LD_INT 1
69321: NEG
69322: PUSH
69323: LD_INT 1
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 2
69332: NEG
69333: PUSH
69334: LD_INT 0
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 2
69343: NEG
69344: PUSH
69345: LD_INT 1
69347: NEG
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: LIST
69357: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69358: LD_ADDR_VAR 0 64
69362: PUSH
69363: LD_INT 1
69365: NEG
69366: PUSH
69367: LD_INT 2
69369: NEG
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 2
69377: NEG
69378: PUSH
69379: LD_INT 1
69381: NEG
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 2
69389: NEG
69390: PUSH
69391: LD_INT 2
69393: NEG
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: LIST
69403: ST_TO_ADDR
// end ; 2 :
69404: GO 72670
69406: LD_INT 2
69408: DOUBLE
69409: EQUAL
69410: IFTRUE 69414
69412: GO 72669
69414: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69415: LD_ADDR_VAR 0 29
69419: PUSH
69420: LD_INT 4
69422: PUSH
69423: LD_INT 0
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 4
69432: PUSH
69433: LD_INT 1
69435: NEG
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 5
69443: PUSH
69444: LD_INT 0
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 5
69453: PUSH
69454: LD_INT 1
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 4
69463: PUSH
69464: LD_INT 1
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PUSH
69471: LD_INT 3
69473: PUSH
69474: LD_INT 0
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: PUSH
69481: LD_INT 3
69483: PUSH
69484: LD_INT 1
69486: NEG
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: LD_INT 3
69494: PUSH
69495: LD_INT 2
69497: NEG
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 5
69505: PUSH
69506: LD_INT 2
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 3
69515: PUSH
69516: LD_INT 3
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 3
69525: PUSH
69526: LD_INT 2
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 4
69535: PUSH
69536: LD_INT 3
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 4
69545: PUSH
69546: LD_INT 4
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 3
69555: PUSH
69556: LD_INT 4
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 2
69565: PUSH
69566: LD_INT 3
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 2
69575: PUSH
69576: LD_INT 2
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 4
69585: PUSH
69586: LD_INT 2
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: PUSH
69593: LD_INT 2
69595: PUSH
69596: LD_INT 4
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 0
69605: PUSH
69606: LD_INT 4
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 0
69615: PUSH
69616: LD_INT 3
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 1
69625: PUSH
69626: LD_INT 4
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 1
69635: PUSH
69636: LD_INT 5
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 0
69645: PUSH
69646: LD_INT 5
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 1
69655: NEG
69656: PUSH
69657: LD_INT 4
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: LD_INT 1
69666: NEG
69667: PUSH
69668: LD_INT 3
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: LD_INT 2
69677: PUSH
69678: LD_INT 5
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 2
69687: NEG
69688: PUSH
69689: LD_INT 3
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 3
69698: NEG
69699: PUSH
69700: LD_INT 0
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 3
69709: NEG
69710: PUSH
69711: LD_INT 1
69713: NEG
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 2
69721: NEG
69722: PUSH
69723: LD_INT 0
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 2
69732: NEG
69733: PUSH
69734: LD_INT 1
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 3
69743: NEG
69744: PUSH
69745: LD_INT 1
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 4
69754: NEG
69755: PUSH
69756: LD_INT 0
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: LD_INT 4
69765: NEG
69766: PUSH
69767: LD_INT 1
69769: NEG
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: LD_INT 4
69777: NEG
69778: PUSH
69779: LD_INT 2
69781: NEG
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 2
69789: NEG
69790: PUSH
69791: LD_INT 2
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 4
69800: NEG
69801: PUSH
69802: LD_INT 4
69804: NEG
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 4
69812: NEG
69813: PUSH
69814: LD_INT 5
69816: NEG
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 3
69824: NEG
69825: PUSH
69826: LD_INT 4
69828: NEG
69829: PUSH
69830: EMPTY
69831: LIST
69832: LIST
69833: PUSH
69834: LD_INT 3
69836: NEG
69837: PUSH
69838: LD_INT 3
69840: NEG
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 4
69848: NEG
69849: PUSH
69850: LD_INT 3
69852: NEG
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: PUSH
69858: LD_INT 5
69860: NEG
69861: PUSH
69862: LD_INT 4
69864: NEG
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 5
69872: NEG
69873: PUSH
69874: LD_INT 5
69876: NEG
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 3
69884: NEG
69885: PUSH
69886: LD_INT 5
69888: NEG
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 5
69896: NEG
69897: PUSH
69898: LD_INT 3
69900: NEG
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69953: LD_ADDR_VAR 0 30
69957: PUSH
69958: LD_INT 4
69960: PUSH
69961: LD_INT 4
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 4
69970: PUSH
69971: LD_INT 3
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 5
69980: PUSH
69981: LD_INT 4
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 5
69990: PUSH
69991: LD_INT 5
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 4
70000: PUSH
70001: LD_INT 5
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 3
70010: PUSH
70011: LD_INT 4
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 3
70020: PUSH
70021: LD_INT 3
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 5
70030: PUSH
70031: LD_INT 3
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 3
70040: PUSH
70041: LD_INT 5
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 0
70050: PUSH
70051: LD_INT 3
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 0
70060: PUSH
70061: LD_INT 2
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 1
70070: PUSH
70071: LD_INT 3
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 1
70080: PUSH
70081: LD_INT 4
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 0
70090: PUSH
70091: LD_INT 4
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 1
70100: NEG
70101: PUSH
70102: LD_INT 3
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 1
70111: NEG
70112: PUSH
70113: LD_INT 2
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 2
70122: PUSH
70123: LD_INT 4
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 2
70132: NEG
70133: PUSH
70134: LD_INT 2
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: LD_INT 4
70143: NEG
70144: PUSH
70145: LD_INT 0
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 4
70154: NEG
70155: PUSH
70156: LD_INT 1
70158: NEG
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: LD_INT 3
70166: NEG
70167: PUSH
70168: LD_INT 0
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 3
70177: NEG
70178: PUSH
70179: LD_INT 1
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 4
70188: NEG
70189: PUSH
70190: LD_INT 1
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 5
70199: NEG
70200: PUSH
70201: LD_INT 0
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 5
70210: NEG
70211: PUSH
70212: LD_INT 1
70214: NEG
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 5
70222: NEG
70223: PUSH
70224: LD_INT 2
70226: NEG
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 3
70234: NEG
70235: PUSH
70236: LD_INT 2
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 3
70245: NEG
70246: PUSH
70247: LD_INT 3
70249: NEG
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 3
70257: NEG
70258: PUSH
70259: LD_INT 4
70261: NEG
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 2
70269: NEG
70270: PUSH
70271: LD_INT 3
70273: NEG
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 2
70281: NEG
70282: PUSH
70283: LD_INT 2
70285: NEG
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 3
70293: NEG
70294: PUSH
70295: LD_INT 2
70297: NEG
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 4
70305: NEG
70306: PUSH
70307: LD_INT 3
70309: NEG
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 4
70317: NEG
70318: PUSH
70319: LD_INT 4
70321: NEG
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 2
70329: NEG
70330: PUSH
70331: LD_INT 4
70333: NEG
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 4
70341: NEG
70342: PUSH
70343: LD_INT 2
70345: NEG
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 0
70353: PUSH
70354: LD_INT 4
70356: NEG
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 0
70364: PUSH
70365: LD_INT 5
70367: NEG
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 1
70375: PUSH
70376: LD_INT 4
70378: NEG
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 1
70386: PUSH
70387: LD_INT 3
70389: NEG
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 0
70397: PUSH
70398: LD_INT 3
70400: NEG
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: PUSH
70406: LD_INT 1
70408: NEG
70409: PUSH
70410: LD_INT 4
70412: NEG
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 1
70420: NEG
70421: PUSH
70422: LD_INT 5
70424: NEG
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 2
70432: PUSH
70433: LD_INT 3
70435: NEG
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 2
70443: NEG
70444: PUSH
70445: LD_INT 5
70447: NEG
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70500: LD_ADDR_VAR 0 31
70504: PUSH
70505: LD_INT 0
70507: PUSH
70508: LD_INT 4
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 0
70517: PUSH
70518: LD_INT 3
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: LD_INT 1
70527: PUSH
70528: LD_INT 4
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: LD_INT 1
70537: PUSH
70538: LD_INT 5
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 0
70547: PUSH
70548: LD_INT 5
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 1
70557: NEG
70558: PUSH
70559: LD_INT 4
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: LD_INT 1
70568: NEG
70569: PUSH
70570: LD_INT 3
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 2
70579: PUSH
70580: LD_INT 5
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 2
70589: NEG
70590: PUSH
70591: LD_INT 3
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_INT 3
70600: NEG
70601: PUSH
70602: LD_INT 0
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 3
70611: NEG
70612: PUSH
70613: LD_INT 1
70615: NEG
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 2
70623: NEG
70624: PUSH
70625: LD_INT 0
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 2
70634: NEG
70635: PUSH
70636: LD_INT 1
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 3
70645: NEG
70646: PUSH
70647: LD_INT 1
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 4
70656: NEG
70657: PUSH
70658: LD_INT 0
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: PUSH
70665: LD_INT 4
70667: NEG
70668: PUSH
70669: LD_INT 1
70671: NEG
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: LD_INT 4
70679: NEG
70680: PUSH
70681: LD_INT 2
70683: NEG
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 2
70691: NEG
70692: PUSH
70693: LD_INT 2
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PUSH
70700: LD_INT 4
70702: NEG
70703: PUSH
70704: LD_INT 4
70706: NEG
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 4
70714: NEG
70715: PUSH
70716: LD_INT 5
70718: NEG
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 3
70726: NEG
70727: PUSH
70728: LD_INT 4
70730: NEG
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: LD_INT 3
70738: NEG
70739: PUSH
70740: LD_INT 3
70742: NEG
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_INT 4
70750: NEG
70751: PUSH
70752: LD_INT 3
70754: NEG
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 5
70762: NEG
70763: PUSH
70764: LD_INT 4
70766: NEG
70767: PUSH
70768: EMPTY
70769: LIST
70770: LIST
70771: PUSH
70772: LD_INT 5
70774: NEG
70775: PUSH
70776: LD_INT 5
70778: NEG
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 3
70786: NEG
70787: PUSH
70788: LD_INT 5
70790: NEG
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: LD_INT 5
70798: NEG
70799: PUSH
70800: LD_INT 3
70802: NEG
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: LD_INT 0
70810: PUSH
70811: LD_INT 3
70813: NEG
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 0
70821: PUSH
70822: LD_INT 4
70824: NEG
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 1
70832: PUSH
70833: LD_INT 3
70835: NEG
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 1
70843: PUSH
70844: LD_INT 2
70846: NEG
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: LD_INT 0
70854: PUSH
70855: LD_INT 2
70857: NEG
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 1
70865: NEG
70866: PUSH
70867: LD_INT 3
70869: NEG
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 1
70877: NEG
70878: PUSH
70879: LD_INT 4
70881: NEG
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 2
70889: PUSH
70890: LD_INT 2
70892: NEG
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 2
70900: NEG
70901: PUSH
70902: LD_INT 4
70904: NEG
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 4
70912: PUSH
70913: LD_INT 0
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 4
70922: PUSH
70923: LD_INT 1
70925: NEG
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: LD_INT 5
70933: PUSH
70934: LD_INT 0
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: PUSH
70941: LD_INT 5
70943: PUSH
70944: LD_INT 1
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: LD_INT 4
70953: PUSH
70954: LD_INT 1
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: LD_INT 3
70963: PUSH
70964: LD_INT 0
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: PUSH
70971: LD_INT 3
70973: PUSH
70974: LD_INT 1
70976: NEG
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: PUSH
70982: LD_INT 3
70984: PUSH
70985: LD_INT 2
70987: NEG
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: LD_INT 5
70995: PUSH
70996: LD_INT 2
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71050: LD_ADDR_VAR 0 32
71054: PUSH
71055: LD_INT 4
71057: NEG
71058: PUSH
71059: LD_INT 0
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 4
71068: NEG
71069: PUSH
71070: LD_INT 1
71072: NEG
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: LD_INT 3
71080: NEG
71081: PUSH
71082: LD_INT 0
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 3
71091: NEG
71092: PUSH
71093: LD_INT 1
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 4
71102: NEG
71103: PUSH
71104: LD_INT 1
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 5
71113: NEG
71114: PUSH
71115: LD_INT 0
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 5
71124: NEG
71125: PUSH
71126: LD_INT 1
71128: NEG
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 5
71136: NEG
71137: PUSH
71138: LD_INT 2
71140: NEG
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 3
71148: NEG
71149: PUSH
71150: LD_INT 2
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 3
71159: NEG
71160: PUSH
71161: LD_INT 3
71163: NEG
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_INT 3
71171: NEG
71172: PUSH
71173: LD_INT 4
71175: NEG
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 2
71183: NEG
71184: PUSH
71185: LD_INT 3
71187: NEG
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 2
71195: NEG
71196: PUSH
71197: LD_INT 2
71199: NEG
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: LD_INT 3
71207: NEG
71208: PUSH
71209: LD_INT 2
71211: NEG
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: PUSH
71217: LD_INT 4
71219: NEG
71220: PUSH
71221: LD_INT 3
71223: NEG
71224: PUSH
71225: EMPTY
71226: LIST
71227: LIST
71228: PUSH
71229: LD_INT 4
71231: NEG
71232: PUSH
71233: LD_INT 4
71235: NEG
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 2
71243: NEG
71244: PUSH
71245: LD_INT 4
71247: NEG
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: LD_INT 4
71255: NEG
71256: PUSH
71257: LD_INT 2
71259: NEG
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 0
71267: PUSH
71268: LD_INT 4
71270: NEG
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 0
71278: PUSH
71279: LD_INT 5
71281: NEG
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 1
71289: PUSH
71290: LD_INT 4
71292: NEG
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PUSH
71298: LD_INT 1
71300: PUSH
71301: LD_INT 3
71303: NEG
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 0
71311: PUSH
71312: LD_INT 3
71314: NEG
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 1
71322: NEG
71323: PUSH
71324: LD_INT 4
71326: NEG
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 1
71334: NEG
71335: PUSH
71336: LD_INT 5
71338: NEG
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: LD_INT 2
71346: PUSH
71347: LD_INT 3
71349: NEG
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 2
71357: NEG
71358: PUSH
71359: LD_INT 5
71361: NEG
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 3
71369: PUSH
71370: LD_INT 0
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 3
71379: PUSH
71380: LD_INT 1
71382: NEG
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 4
71390: PUSH
71391: LD_INT 0
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: PUSH
71398: LD_INT 4
71400: PUSH
71401: LD_INT 1
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 3
71410: PUSH
71411: LD_INT 1
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 2
71420: PUSH
71421: LD_INT 0
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 2
71430: PUSH
71431: LD_INT 1
71433: NEG
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 2
71441: PUSH
71442: LD_INT 2
71444: NEG
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: PUSH
71450: LD_INT 4
71452: PUSH
71453: LD_INT 2
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: LD_INT 4
71462: PUSH
71463: LD_INT 4
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 4
71472: PUSH
71473: LD_INT 3
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 5
71482: PUSH
71483: LD_INT 4
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: LD_INT 5
71492: PUSH
71493: LD_INT 5
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 4
71502: PUSH
71503: LD_INT 5
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: PUSH
71510: LD_INT 3
71512: PUSH
71513: LD_INT 4
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: PUSH
71520: LD_INT 3
71522: PUSH
71523: LD_INT 3
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PUSH
71530: LD_INT 5
71532: PUSH
71533: LD_INT 3
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 3
71542: PUSH
71543: LD_INT 5
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71597: LD_ADDR_VAR 0 33
71601: PUSH
71602: LD_INT 4
71604: NEG
71605: PUSH
71606: LD_INT 4
71608: NEG
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: PUSH
71614: LD_INT 4
71616: NEG
71617: PUSH
71618: LD_INT 5
71620: NEG
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PUSH
71626: LD_INT 3
71628: NEG
71629: PUSH
71630: LD_INT 4
71632: NEG
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PUSH
71638: LD_INT 3
71640: NEG
71641: PUSH
71642: LD_INT 3
71644: NEG
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 4
71652: NEG
71653: PUSH
71654: LD_INT 3
71656: NEG
71657: PUSH
71658: EMPTY
71659: LIST
71660: LIST
71661: PUSH
71662: LD_INT 5
71664: NEG
71665: PUSH
71666: LD_INT 4
71668: NEG
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: LD_INT 5
71676: NEG
71677: PUSH
71678: LD_INT 5
71680: NEG
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: PUSH
71686: LD_INT 3
71688: NEG
71689: PUSH
71690: LD_INT 5
71692: NEG
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: PUSH
71698: LD_INT 5
71700: NEG
71701: PUSH
71702: LD_INT 3
71704: NEG
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PUSH
71710: LD_INT 0
71712: PUSH
71713: LD_INT 3
71715: NEG
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_INT 0
71723: PUSH
71724: LD_INT 4
71726: NEG
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: PUSH
71732: LD_INT 1
71734: PUSH
71735: LD_INT 3
71737: NEG
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: PUSH
71743: LD_INT 1
71745: PUSH
71746: LD_INT 2
71748: NEG
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: PUSH
71754: LD_INT 0
71756: PUSH
71757: LD_INT 2
71759: NEG
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: LD_INT 1
71767: NEG
71768: PUSH
71769: LD_INT 3
71771: NEG
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 1
71779: NEG
71780: PUSH
71781: LD_INT 4
71783: NEG
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: LD_INT 2
71791: PUSH
71792: LD_INT 2
71794: NEG
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: LD_INT 2
71802: NEG
71803: PUSH
71804: LD_INT 4
71806: NEG
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 4
71814: PUSH
71815: LD_INT 0
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 4
71824: PUSH
71825: LD_INT 1
71827: NEG
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: PUSH
71833: LD_INT 5
71835: PUSH
71836: LD_INT 0
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: PUSH
71843: LD_INT 5
71845: PUSH
71846: LD_INT 1
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 4
71855: PUSH
71856: LD_INT 1
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PUSH
71863: LD_INT 3
71865: PUSH
71866: LD_INT 0
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: PUSH
71873: LD_INT 3
71875: PUSH
71876: LD_INT 1
71878: NEG
71879: PUSH
71880: EMPTY
71881: LIST
71882: LIST
71883: PUSH
71884: LD_INT 3
71886: PUSH
71887: LD_INT 2
71889: NEG
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: PUSH
71895: LD_INT 5
71897: PUSH
71898: LD_INT 2
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 3
71907: PUSH
71908: LD_INT 3
71910: PUSH
71911: EMPTY
71912: LIST
71913: LIST
71914: PUSH
71915: LD_INT 3
71917: PUSH
71918: LD_INT 2
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 4
71927: PUSH
71928: LD_INT 3
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: LD_INT 4
71937: PUSH
71938: LD_INT 4
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: PUSH
71945: LD_INT 3
71947: PUSH
71948: LD_INT 4
71950: PUSH
71951: EMPTY
71952: LIST
71953: LIST
71954: PUSH
71955: LD_INT 2
71957: PUSH
71958: LD_INT 3
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: PUSH
71965: LD_INT 2
71967: PUSH
71968: LD_INT 2
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: PUSH
71975: LD_INT 4
71977: PUSH
71978: LD_INT 2
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PUSH
71985: LD_INT 2
71987: PUSH
71988: LD_INT 4
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: PUSH
71995: LD_INT 0
71997: PUSH
71998: LD_INT 4
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 0
72007: PUSH
72008: LD_INT 3
72010: PUSH
72011: EMPTY
72012: LIST
72013: LIST
72014: PUSH
72015: LD_INT 1
72017: PUSH
72018: LD_INT 4
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: LD_INT 1
72027: PUSH
72028: LD_INT 5
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: PUSH
72035: LD_INT 0
72037: PUSH
72038: LD_INT 5
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PUSH
72045: LD_INT 1
72047: NEG
72048: PUSH
72049: LD_INT 4
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: PUSH
72056: LD_INT 1
72058: NEG
72059: PUSH
72060: LD_INT 3
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: PUSH
72067: LD_INT 2
72069: PUSH
72070: LD_INT 5
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: LD_INT 2
72079: NEG
72080: PUSH
72081: LD_INT 3
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: PUSH
72088: EMPTY
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72135: LD_ADDR_VAR 0 34
72139: PUSH
72140: LD_INT 0
72142: PUSH
72143: LD_INT 4
72145: NEG
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PUSH
72151: LD_INT 0
72153: PUSH
72154: LD_INT 5
72156: NEG
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 1
72164: PUSH
72165: LD_INT 4
72167: NEG
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: PUSH
72173: LD_INT 1
72175: PUSH
72176: LD_INT 3
72178: NEG
72179: PUSH
72180: EMPTY
72181: LIST
72182: LIST
72183: PUSH
72184: LD_INT 0
72186: PUSH
72187: LD_INT 3
72189: NEG
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: PUSH
72195: LD_INT 1
72197: NEG
72198: PUSH
72199: LD_INT 4
72201: NEG
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PUSH
72207: LD_INT 1
72209: NEG
72210: PUSH
72211: LD_INT 5
72213: NEG
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_INT 2
72221: PUSH
72222: LD_INT 3
72224: NEG
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: PUSH
72230: LD_INT 2
72232: NEG
72233: PUSH
72234: LD_INT 5
72236: NEG
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: LD_INT 3
72244: PUSH
72245: LD_INT 0
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: PUSH
72252: LD_INT 3
72254: PUSH
72255: LD_INT 1
72257: NEG
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: PUSH
72263: LD_INT 4
72265: PUSH
72266: LD_INT 0
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: PUSH
72273: LD_INT 4
72275: PUSH
72276: LD_INT 1
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: PUSH
72283: LD_INT 3
72285: PUSH
72286: LD_INT 1
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: PUSH
72293: LD_INT 2
72295: PUSH
72296: LD_INT 0
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: PUSH
72303: LD_INT 2
72305: PUSH
72306: LD_INT 1
72308: NEG
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 2
72316: PUSH
72317: LD_INT 2
72319: NEG
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PUSH
72325: LD_INT 4
72327: PUSH
72328: LD_INT 2
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 4
72337: PUSH
72338: LD_INT 4
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 4
72347: PUSH
72348: LD_INT 3
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: PUSH
72355: LD_INT 5
72357: PUSH
72358: LD_INT 4
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PUSH
72365: LD_INT 5
72367: PUSH
72368: LD_INT 5
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: PUSH
72375: LD_INT 4
72377: PUSH
72378: LD_INT 5
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 3
72387: PUSH
72388: LD_INT 4
72390: PUSH
72391: EMPTY
72392: LIST
72393: LIST
72394: PUSH
72395: LD_INT 3
72397: PUSH
72398: LD_INT 3
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: PUSH
72405: LD_INT 5
72407: PUSH
72408: LD_INT 3
72410: PUSH
72411: EMPTY
72412: LIST
72413: LIST
72414: PUSH
72415: LD_INT 3
72417: PUSH
72418: LD_INT 5
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: PUSH
72425: LD_INT 0
72427: PUSH
72428: LD_INT 3
72430: PUSH
72431: EMPTY
72432: LIST
72433: LIST
72434: PUSH
72435: LD_INT 0
72437: PUSH
72438: LD_INT 2
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 1
72447: PUSH
72448: LD_INT 3
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: PUSH
72455: LD_INT 1
72457: PUSH
72458: LD_INT 4
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PUSH
72465: LD_INT 0
72467: PUSH
72468: LD_INT 4
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: PUSH
72475: LD_INT 1
72477: NEG
72478: PUSH
72479: LD_INT 3
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: LD_INT 1
72488: NEG
72489: PUSH
72490: LD_INT 2
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: PUSH
72497: LD_INT 2
72499: PUSH
72500: LD_INT 4
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PUSH
72507: LD_INT 2
72509: NEG
72510: PUSH
72511: LD_INT 2
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 4
72520: NEG
72521: PUSH
72522: LD_INT 0
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 4
72531: NEG
72532: PUSH
72533: LD_INT 1
72535: NEG
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: PUSH
72541: LD_INT 3
72543: NEG
72544: PUSH
72545: LD_INT 0
72547: PUSH
72548: EMPTY
72549: LIST
72550: LIST
72551: PUSH
72552: LD_INT 3
72554: NEG
72555: PUSH
72556: LD_INT 1
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: PUSH
72563: LD_INT 4
72565: NEG
72566: PUSH
72567: LD_INT 1
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: PUSH
72574: LD_INT 5
72576: NEG
72577: PUSH
72578: LD_INT 0
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: PUSH
72585: LD_INT 5
72587: NEG
72588: PUSH
72589: LD_INT 1
72591: NEG
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: LD_INT 5
72599: NEG
72600: PUSH
72601: LD_INT 2
72603: NEG
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: PUSH
72609: LD_INT 3
72611: NEG
72612: PUSH
72613: LD_INT 2
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: ST_TO_ADDR
// end ; end ;
72667: GO 72670
72669: POP
// case btype of b_depot , b_warehouse :
72670: LD_VAR 0 1
72674: PUSH
72675: LD_INT 0
72677: DOUBLE
72678: EQUAL
72679: IFTRUE 72689
72681: LD_INT 1
72683: DOUBLE
72684: EQUAL
72685: IFTRUE 72689
72687: GO 72890
72689: POP
// case nation of nation_american :
72690: LD_VAR 0 5
72694: PUSH
72695: LD_INT 1
72697: DOUBLE
72698: EQUAL
72699: IFTRUE 72703
72701: GO 72759
72703: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72704: LD_ADDR_VAR 0 9
72708: PUSH
72709: LD_VAR 0 11
72713: PUSH
72714: LD_VAR 0 12
72718: PUSH
72719: LD_VAR 0 13
72723: PUSH
72724: LD_VAR 0 14
72728: PUSH
72729: LD_VAR 0 15
72733: PUSH
72734: LD_VAR 0 16
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: PUSH
72747: LD_VAR 0 4
72751: PUSH
72752: LD_INT 1
72754: PLUS
72755: ARRAY
72756: ST_TO_ADDR
72757: GO 72888
72759: LD_INT 2
72761: DOUBLE
72762: EQUAL
72763: IFTRUE 72767
72765: GO 72823
72767: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72768: LD_ADDR_VAR 0 9
72772: PUSH
72773: LD_VAR 0 17
72777: PUSH
72778: LD_VAR 0 18
72782: PUSH
72783: LD_VAR 0 19
72787: PUSH
72788: LD_VAR 0 20
72792: PUSH
72793: LD_VAR 0 21
72797: PUSH
72798: LD_VAR 0 22
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: LIST
72810: PUSH
72811: LD_VAR 0 4
72815: PUSH
72816: LD_INT 1
72818: PLUS
72819: ARRAY
72820: ST_TO_ADDR
72821: GO 72888
72823: LD_INT 3
72825: DOUBLE
72826: EQUAL
72827: IFTRUE 72831
72829: GO 72887
72831: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72832: LD_ADDR_VAR 0 9
72836: PUSH
72837: LD_VAR 0 23
72841: PUSH
72842: LD_VAR 0 24
72846: PUSH
72847: LD_VAR 0 25
72851: PUSH
72852: LD_VAR 0 26
72856: PUSH
72857: LD_VAR 0 27
72861: PUSH
72862: LD_VAR 0 28
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: PUSH
72875: LD_VAR 0 4
72879: PUSH
72880: LD_INT 1
72882: PLUS
72883: ARRAY
72884: ST_TO_ADDR
72885: GO 72888
72887: POP
72888: GO 73443
72890: LD_INT 2
72892: DOUBLE
72893: EQUAL
72894: IFTRUE 72904
72896: LD_INT 3
72898: DOUBLE
72899: EQUAL
72900: IFTRUE 72904
72902: GO 72960
72904: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72905: LD_ADDR_VAR 0 9
72909: PUSH
72910: LD_VAR 0 29
72914: PUSH
72915: LD_VAR 0 30
72919: PUSH
72920: LD_VAR 0 31
72924: PUSH
72925: LD_VAR 0 32
72929: PUSH
72930: LD_VAR 0 33
72934: PUSH
72935: LD_VAR 0 34
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: LIST
72944: LIST
72945: LIST
72946: LIST
72947: PUSH
72948: LD_VAR 0 4
72952: PUSH
72953: LD_INT 1
72955: PLUS
72956: ARRAY
72957: ST_TO_ADDR
72958: GO 73443
72960: LD_INT 16
72962: DOUBLE
72963: EQUAL
72964: IFTRUE 73022
72966: LD_INT 17
72968: DOUBLE
72969: EQUAL
72970: IFTRUE 73022
72972: LD_INT 18
72974: DOUBLE
72975: EQUAL
72976: IFTRUE 73022
72978: LD_INT 19
72980: DOUBLE
72981: EQUAL
72982: IFTRUE 73022
72984: LD_INT 22
72986: DOUBLE
72987: EQUAL
72988: IFTRUE 73022
72990: LD_INT 20
72992: DOUBLE
72993: EQUAL
72994: IFTRUE 73022
72996: LD_INT 21
72998: DOUBLE
72999: EQUAL
73000: IFTRUE 73022
73002: LD_INT 23
73004: DOUBLE
73005: EQUAL
73006: IFTRUE 73022
73008: LD_INT 24
73010: DOUBLE
73011: EQUAL
73012: IFTRUE 73022
73014: LD_INT 25
73016: DOUBLE
73017: EQUAL
73018: IFTRUE 73022
73020: GO 73078
73022: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73023: LD_ADDR_VAR 0 9
73027: PUSH
73028: LD_VAR 0 35
73032: PUSH
73033: LD_VAR 0 36
73037: PUSH
73038: LD_VAR 0 37
73042: PUSH
73043: LD_VAR 0 38
73047: PUSH
73048: LD_VAR 0 39
73052: PUSH
73053: LD_VAR 0 40
73057: PUSH
73058: EMPTY
73059: LIST
73060: LIST
73061: LIST
73062: LIST
73063: LIST
73064: LIST
73065: PUSH
73066: LD_VAR 0 4
73070: PUSH
73071: LD_INT 1
73073: PLUS
73074: ARRAY
73075: ST_TO_ADDR
73076: GO 73443
73078: LD_INT 6
73080: DOUBLE
73081: EQUAL
73082: IFTRUE 73134
73084: LD_INT 7
73086: DOUBLE
73087: EQUAL
73088: IFTRUE 73134
73090: LD_INT 8
73092: DOUBLE
73093: EQUAL
73094: IFTRUE 73134
73096: LD_INT 13
73098: DOUBLE
73099: EQUAL
73100: IFTRUE 73134
73102: LD_INT 12
73104: DOUBLE
73105: EQUAL
73106: IFTRUE 73134
73108: LD_INT 15
73110: DOUBLE
73111: EQUAL
73112: IFTRUE 73134
73114: LD_INT 11
73116: DOUBLE
73117: EQUAL
73118: IFTRUE 73134
73120: LD_INT 14
73122: DOUBLE
73123: EQUAL
73124: IFTRUE 73134
73126: LD_INT 10
73128: DOUBLE
73129: EQUAL
73130: IFTRUE 73134
73132: GO 73190
73134: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73135: LD_ADDR_VAR 0 9
73139: PUSH
73140: LD_VAR 0 41
73144: PUSH
73145: LD_VAR 0 42
73149: PUSH
73150: LD_VAR 0 43
73154: PUSH
73155: LD_VAR 0 44
73159: PUSH
73160: LD_VAR 0 45
73164: PUSH
73165: LD_VAR 0 46
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: PUSH
73178: LD_VAR 0 4
73182: PUSH
73183: LD_INT 1
73185: PLUS
73186: ARRAY
73187: ST_TO_ADDR
73188: GO 73443
73190: LD_INT 36
73192: DOUBLE
73193: EQUAL
73194: IFTRUE 73198
73196: GO 73254
73198: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73199: LD_ADDR_VAR 0 9
73203: PUSH
73204: LD_VAR 0 47
73208: PUSH
73209: LD_VAR 0 48
73213: PUSH
73214: LD_VAR 0 49
73218: PUSH
73219: LD_VAR 0 50
73223: PUSH
73224: LD_VAR 0 51
73228: PUSH
73229: LD_VAR 0 52
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: PUSH
73242: LD_VAR 0 4
73246: PUSH
73247: LD_INT 1
73249: PLUS
73250: ARRAY
73251: ST_TO_ADDR
73252: GO 73443
73254: LD_INT 4
73256: DOUBLE
73257: EQUAL
73258: IFTRUE 73280
73260: LD_INT 5
73262: DOUBLE
73263: EQUAL
73264: IFTRUE 73280
73266: LD_INT 34
73268: DOUBLE
73269: EQUAL
73270: IFTRUE 73280
73272: LD_INT 37
73274: DOUBLE
73275: EQUAL
73276: IFTRUE 73280
73278: GO 73336
73280: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73281: LD_ADDR_VAR 0 9
73285: PUSH
73286: LD_VAR 0 53
73290: PUSH
73291: LD_VAR 0 54
73295: PUSH
73296: LD_VAR 0 55
73300: PUSH
73301: LD_VAR 0 56
73305: PUSH
73306: LD_VAR 0 57
73310: PUSH
73311: LD_VAR 0 58
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: PUSH
73324: LD_VAR 0 4
73328: PUSH
73329: LD_INT 1
73331: PLUS
73332: ARRAY
73333: ST_TO_ADDR
73334: GO 73443
73336: LD_INT 31
73338: DOUBLE
73339: EQUAL
73340: IFTRUE 73386
73342: LD_INT 32
73344: DOUBLE
73345: EQUAL
73346: IFTRUE 73386
73348: LD_INT 33
73350: DOUBLE
73351: EQUAL
73352: IFTRUE 73386
73354: LD_INT 27
73356: DOUBLE
73357: EQUAL
73358: IFTRUE 73386
73360: LD_INT 26
73362: DOUBLE
73363: EQUAL
73364: IFTRUE 73386
73366: LD_INT 28
73368: DOUBLE
73369: EQUAL
73370: IFTRUE 73386
73372: LD_INT 29
73374: DOUBLE
73375: EQUAL
73376: IFTRUE 73386
73378: LD_INT 30
73380: DOUBLE
73381: EQUAL
73382: IFTRUE 73386
73384: GO 73442
73386: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73387: LD_ADDR_VAR 0 9
73391: PUSH
73392: LD_VAR 0 59
73396: PUSH
73397: LD_VAR 0 60
73401: PUSH
73402: LD_VAR 0 61
73406: PUSH
73407: LD_VAR 0 62
73411: PUSH
73412: LD_VAR 0 63
73416: PUSH
73417: LD_VAR 0 64
73421: PUSH
73422: EMPTY
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: LIST
73428: LIST
73429: PUSH
73430: LD_VAR 0 4
73434: PUSH
73435: LD_INT 1
73437: PLUS
73438: ARRAY
73439: ST_TO_ADDR
73440: GO 73443
73442: POP
// temp_list2 = [ ] ;
73443: LD_ADDR_VAR 0 10
73447: PUSH
73448: EMPTY
73449: ST_TO_ADDR
// for i in temp_list do
73450: LD_ADDR_VAR 0 8
73454: PUSH
73455: LD_VAR 0 9
73459: PUSH
73460: FOR_IN
73461: IFFALSE 73513
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73463: LD_ADDR_VAR 0 10
73467: PUSH
73468: LD_VAR 0 10
73472: PUSH
73473: LD_VAR 0 8
73477: PUSH
73478: LD_INT 1
73480: ARRAY
73481: PUSH
73482: LD_VAR 0 2
73486: PLUS
73487: PUSH
73488: LD_VAR 0 8
73492: PUSH
73493: LD_INT 2
73495: ARRAY
73496: PUSH
73497: LD_VAR 0 3
73501: PLUS
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: PUSH
73507: EMPTY
73508: LIST
73509: ADD
73510: ST_TO_ADDR
73511: GO 73460
73513: POP
73514: POP
// result = temp_list2 ;
73515: LD_ADDR_VAR 0 7
73519: PUSH
73520: LD_VAR 0 10
73524: ST_TO_ADDR
// end ;
73525: LD_VAR 0 7
73529: RET
// export function EnemyInRange ( unit , dist ) ; begin
73530: LD_INT 0
73532: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73533: LD_ADDR_VAR 0 3
73537: PUSH
73538: LD_VAR 0 1
73542: PPUSH
73543: CALL_OW 255
73547: PPUSH
73548: LD_VAR 0 1
73552: PPUSH
73553: CALL_OW 250
73557: PPUSH
73558: LD_VAR 0 1
73562: PPUSH
73563: CALL_OW 251
73567: PPUSH
73568: LD_VAR 0 2
73572: PPUSH
73573: CALL 46903 0 4
73577: PUSH
73578: LD_INT 4
73580: ARRAY
73581: ST_TO_ADDR
// end ;
73582: LD_VAR 0 3
73586: RET
// export function PlayerSeeMe ( unit ) ; begin
73587: LD_INT 0
73589: PPUSH
// result := See ( your_side , unit ) ;
73590: LD_ADDR_VAR 0 2
73594: PUSH
73595: LD_OWVAR 2
73599: PPUSH
73600: LD_VAR 0 1
73604: PPUSH
73605: CALL_OW 292
73609: ST_TO_ADDR
// end ;
73610: LD_VAR 0 2
73614: RET
// export function ReverseDir ( unit ) ; begin
73615: LD_INT 0
73617: PPUSH
// if not unit then
73618: LD_VAR 0 1
73622: NOT
73623: IFFALSE 73627
// exit ;
73625: GO 73650
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73627: LD_ADDR_VAR 0 2
73631: PUSH
73632: LD_VAR 0 1
73636: PPUSH
73637: CALL_OW 254
73641: PUSH
73642: LD_INT 3
73644: PLUS
73645: PUSH
73646: LD_INT 6
73648: MOD
73649: ST_TO_ADDR
// end ;
73650: LD_VAR 0 2
73654: RET
// export function ReverseArray ( array ) ; var i ; begin
73655: LD_INT 0
73657: PPUSH
73658: PPUSH
// if not array then
73659: LD_VAR 0 1
73663: NOT
73664: IFFALSE 73668
// exit ;
73666: GO 73723
// result := [ ] ;
73668: LD_ADDR_VAR 0 2
73672: PUSH
73673: EMPTY
73674: ST_TO_ADDR
// for i := array downto 1 do
73675: LD_ADDR_VAR 0 3
73679: PUSH
73680: DOUBLE
73681: LD_VAR 0 1
73685: INC
73686: ST_TO_ADDR
73687: LD_INT 1
73689: PUSH
73690: FOR_DOWNTO
73691: IFFALSE 73721
// result := Join ( result , array [ i ] ) ;
73693: LD_ADDR_VAR 0 2
73697: PUSH
73698: LD_VAR 0 2
73702: PPUSH
73703: LD_VAR 0 1
73707: PUSH
73708: LD_VAR 0 3
73712: ARRAY
73713: PPUSH
73714: CALL 78379 0 2
73718: ST_TO_ADDR
73719: GO 73690
73721: POP
73722: POP
// end ;
73723: LD_VAR 0 2
73727: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73728: LD_INT 0
73730: PPUSH
73731: PPUSH
73732: PPUSH
73733: PPUSH
73734: PPUSH
73735: PPUSH
// if not unit or not hexes then
73736: LD_VAR 0 1
73740: NOT
73741: PUSH
73742: LD_VAR 0 2
73746: NOT
73747: OR
73748: IFFALSE 73752
// exit ;
73750: GO 73875
// dist := 9999 ;
73752: LD_ADDR_VAR 0 5
73756: PUSH
73757: LD_INT 9999
73759: ST_TO_ADDR
// for i = 1 to hexes do
73760: LD_ADDR_VAR 0 4
73764: PUSH
73765: DOUBLE
73766: LD_INT 1
73768: DEC
73769: ST_TO_ADDR
73770: LD_VAR 0 2
73774: PUSH
73775: FOR_TO
73776: IFFALSE 73863
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73778: LD_ADDR_VAR 0 6
73782: PUSH
73783: LD_VAR 0 1
73787: PPUSH
73788: LD_VAR 0 2
73792: PUSH
73793: LD_VAR 0 4
73797: ARRAY
73798: PUSH
73799: LD_INT 1
73801: ARRAY
73802: PPUSH
73803: LD_VAR 0 2
73807: PUSH
73808: LD_VAR 0 4
73812: ARRAY
73813: PUSH
73814: LD_INT 2
73816: ARRAY
73817: PPUSH
73818: CALL_OW 297
73822: ST_TO_ADDR
// if tdist < dist then
73823: LD_VAR 0 6
73827: PUSH
73828: LD_VAR 0 5
73832: LESS
73833: IFFALSE 73861
// begin hex := hexes [ i ] ;
73835: LD_ADDR_VAR 0 8
73839: PUSH
73840: LD_VAR 0 2
73844: PUSH
73845: LD_VAR 0 4
73849: ARRAY
73850: ST_TO_ADDR
// dist := tdist ;
73851: LD_ADDR_VAR 0 5
73855: PUSH
73856: LD_VAR 0 6
73860: ST_TO_ADDR
// end ; end ;
73861: GO 73775
73863: POP
73864: POP
// result := hex ;
73865: LD_ADDR_VAR 0 3
73869: PUSH
73870: LD_VAR 0 8
73874: ST_TO_ADDR
// end ;
73875: LD_VAR 0 3
73879: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73880: LD_INT 0
73882: PPUSH
73883: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73884: LD_VAR 0 1
73888: NOT
73889: PUSH
73890: LD_VAR 0 1
73894: PUSH
73895: LD_INT 21
73897: PUSH
73898: LD_INT 2
73900: PUSH
73901: EMPTY
73902: LIST
73903: LIST
73904: PUSH
73905: LD_INT 23
73907: PUSH
73908: LD_INT 2
73910: PUSH
73911: EMPTY
73912: LIST
73913: LIST
73914: PUSH
73915: EMPTY
73916: LIST
73917: LIST
73918: PPUSH
73919: CALL_OW 69
73923: IN
73924: NOT
73925: OR
73926: IFFALSE 73930
// exit ;
73928: GO 73977
// for i = 1 to 3 do
73930: LD_ADDR_VAR 0 3
73934: PUSH
73935: DOUBLE
73936: LD_INT 1
73938: DEC
73939: ST_TO_ADDR
73940: LD_INT 3
73942: PUSH
73943: FOR_TO
73944: IFFALSE 73975
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73946: LD_VAR 0 1
73950: PPUSH
73951: CALL_OW 250
73955: PPUSH
73956: LD_VAR 0 1
73960: PPUSH
73961: CALL_OW 251
73965: PPUSH
73966: LD_INT 1
73968: PPUSH
73969: CALL_OW 453
73973: GO 73943
73975: POP
73976: POP
// end ;
73977: LD_VAR 0 2
73981: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73982: LD_INT 0
73984: PPUSH
73985: PPUSH
73986: PPUSH
73987: PPUSH
73988: PPUSH
73989: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73990: LD_VAR 0 1
73994: NOT
73995: PUSH
73996: LD_VAR 0 2
74000: NOT
74001: OR
74002: PUSH
74003: LD_VAR 0 1
74007: PPUSH
74008: CALL_OW 314
74012: OR
74013: IFFALSE 74017
// exit ;
74015: GO 74484
// if GetLives ( i ) < 250 then
74017: LD_VAR 0 4
74021: PPUSH
74022: CALL_OW 256
74026: PUSH
74027: LD_INT 250
74029: LESS
74030: IFFALSE 74043
// begin ComAutodestruct ( i ) ;
74032: LD_VAR 0 4
74036: PPUSH
74037: CALL 73880 0 1
// exit ;
74041: GO 74484
// end ; x := GetX ( enemy_unit ) ;
74043: LD_ADDR_VAR 0 7
74047: PUSH
74048: LD_VAR 0 2
74052: PPUSH
74053: CALL_OW 250
74057: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74058: LD_ADDR_VAR 0 8
74062: PUSH
74063: LD_VAR 0 2
74067: PPUSH
74068: CALL_OW 251
74072: ST_TO_ADDR
// if not x or not y then
74073: LD_VAR 0 7
74077: NOT
74078: PUSH
74079: LD_VAR 0 8
74083: NOT
74084: OR
74085: IFFALSE 74089
// exit ;
74087: GO 74484
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74089: LD_ADDR_VAR 0 6
74093: PUSH
74094: LD_VAR 0 7
74098: PPUSH
74099: LD_INT 0
74101: PPUSH
74102: LD_INT 4
74104: PPUSH
74105: CALL_OW 272
74109: PUSH
74110: LD_VAR 0 8
74114: PPUSH
74115: LD_INT 0
74117: PPUSH
74118: LD_INT 4
74120: PPUSH
74121: CALL_OW 273
74125: PUSH
74126: EMPTY
74127: LIST
74128: LIST
74129: PUSH
74130: LD_VAR 0 7
74134: PPUSH
74135: LD_INT 1
74137: PPUSH
74138: LD_INT 4
74140: PPUSH
74141: CALL_OW 272
74145: PUSH
74146: LD_VAR 0 8
74150: PPUSH
74151: LD_INT 1
74153: PPUSH
74154: LD_INT 4
74156: PPUSH
74157: CALL_OW 273
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: LD_VAR 0 7
74170: PPUSH
74171: LD_INT 2
74173: PPUSH
74174: LD_INT 4
74176: PPUSH
74177: CALL_OW 272
74181: PUSH
74182: LD_VAR 0 8
74186: PPUSH
74187: LD_INT 2
74189: PPUSH
74190: LD_INT 4
74192: PPUSH
74193: CALL_OW 273
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: LD_VAR 0 7
74206: PPUSH
74207: LD_INT 3
74209: PPUSH
74210: LD_INT 4
74212: PPUSH
74213: CALL_OW 272
74217: PUSH
74218: LD_VAR 0 8
74222: PPUSH
74223: LD_INT 3
74225: PPUSH
74226: LD_INT 4
74228: PPUSH
74229: CALL_OW 273
74233: PUSH
74234: EMPTY
74235: LIST
74236: LIST
74237: PUSH
74238: LD_VAR 0 7
74242: PPUSH
74243: LD_INT 4
74245: PPUSH
74246: LD_INT 4
74248: PPUSH
74249: CALL_OW 272
74253: PUSH
74254: LD_VAR 0 8
74258: PPUSH
74259: LD_INT 4
74261: PPUSH
74262: LD_INT 4
74264: PPUSH
74265: CALL_OW 273
74269: PUSH
74270: EMPTY
74271: LIST
74272: LIST
74273: PUSH
74274: LD_VAR 0 7
74278: PPUSH
74279: LD_INT 5
74281: PPUSH
74282: LD_INT 4
74284: PPUSH
74285: CALL_OW 272
74289: PUSH
74290: LD_VAR 0 8
74294: PPUSH
74295: LD_INT 5
74297: PPUSH
74298: LD_INT 4
74300: PPUSH
74301: CALL_OW 273
74305: PUSH
74306: EMPTY
74307: LIST
74308: LIST
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: LIST
74314: LIST
74315: LIST
74316: LIST
74317: ST_TO_ADDR
// for i = tmp downto 1 do
74318: LD_ADDR_VAR 0 4
74322: PUSH
74323: DOUBLE
74324: LD_VAR 0 6
74328: INC
74329: ST_TO_ADDR
74330: LD_INT 1
74332: PUSH
74333: FOR_DOWNTO
74334: IFFALSE 74435
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74336: LD_VAR 0 6
74340: PUSH
74341: LD_VAR 0 4
74345: ARRAY
74346: PUSH
74347: LD_INT 1
74349: ARRAY
74350: PPUSH
74351: LD_VAR 0 6
74355: PUSH
74356: LD_VAR 0 4
74360: ARRAY
74361: PUSH
74362: LD_INT 2
74364: ARRAY
74365: PPUSH
74366: CALL_OW 488
74370: NOT
74371: PUSH
74372: LD_VAR 0 6
74376: PUSH
74377: LD_VAR 0 4
74381: ARRAY
74382: PUSH
74383: LD_INT 1
74385: ARRAY
74386: PPUSH
74387: LD_VAR 0 6
74391: PUSH
74392: LD_VAR 0 4
74396: ARRAY
74397: PUSH
74398: LD_INT 2
74400: ARRAY
74401: PPUSH
74402: CALL_OW 428
74406: PUSH
74407: LD_INT 0
74409: NONEQUAL
74410: OR
74411: IFFALSE 74433
// tmp := Delete ( tmp , i ) ;
74413: LD_ADDR_VAR 0 6
74417: PUSH
74418: LD_VAR 0 6
74422: PPUSH
74423: LD_VAR 0 4
74427: PPUSH
74428: CALL_OW 3
74432: ST_TO_ADDR
74433: GO 74333
74435: POP
74436: POP
// j := GetClosestHex ( unit , tmp ) ;
74437: LD_ADDR_VAR 0 5
74441: PUSH
74442: LD_VAR 0 1
74446: PPUSH
74447: LD_VAR 0 6
74451: PPUSH
74452: CALL 73728 0 2
74456: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74457: LD_VAR 0 1
74461: PPUSH
74462: LD_VAR 0 5
74466: PUSH
74467: LD_INT 1
74469: ARRAY
74470: PPUSH
74471: LD_VAR 0 5
74475: PUSH
74476: LD_INT 2
74478: ARRAY
74479: PPUSH
74480: CALL_OW 111
// end ;
74484: LD_VAR 0 3
74488: RET
// export function PrepareApemanSoldier ( ) ; begin
74489: LD_INT 0
74491: PPUSH
// uc_nation := 0 ;
74492: LD_ADDR_OWVAR 21
74496: PUSH
74497: LD_INT 0
74499: ST_TO_ADDR
// hc_sex := sex_male ;
74500: LD_ADDR_OWVAR 27
74504: PUSH
74505: LD_INT 1
74507: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74508: LD_ADDR_OWVAR 28
74512: PUSH
74513: LD_INT 15
74515: ST_TO_ADDR
// hc_gallery :=  ;
74516: LD_ADDR_OWVAR 33
74520: PUSH
74521: LD_STRING 
74523: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74524: LD_ADDR_OWVAR 31
74528: PUSH
74529: LD_INT 0
74531: PPUSH
74532: LD_INT 3
74534: PPUSH
74535: CALL_OW 12
74539: PUSH
74540: LD_INT 0
74542: PPUSH
74543: LD_INT 3
74545: PPUSH
74546: CALL_OW 12
74550: PUSH
74551: LD_INT 0
74553: PUSH
74554: LD_INT 0
74556: PUSH
74557: EMPTY
74558: LIST
74559: LIST
74560: LIST
74561: LIST
74562: ST_TO_ADDR
// end ;
74563: LD_VAR 0 1
74567: RET
// export function PrepareApemanEngineer ( ) ; begin
74568: LD_INT 0
74570: PPUSH
// uc_nation := 0 ;
74571: LD_ADDR_OWVAR 21
74575: PUSH
74576: LD_INT 0
74578: ST_TO_ADDR
// hc_sex := sex_male ;
74579: LD_ADDR_OWVAR 27
74583: PUSH
74584: LD_INT 1
74586: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74587: LD_ADDR_OWVAR 28
74591: PUSH
74592: LD_INT 16
74594: ST_TO_ADDR
// hc_gallery :=  ;
74595: LD_ADDR_OWVAR 33
74599: PUSH
74600: LD_STRING 
74602: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74603: LD_ADDR_OWVAR 31
74607: PUSH
74608: LD_INT 0
74610: PPUSH
74611: LD_INT 3
74613: PPUSH
74614: CALL_OW 12
74618: PUSH
74619: LD_INT 0
74621: PPUSH
74622: LD_INT 3
74624: PPUSH
74625: CALL_OW 12
74629: PUSH
74630: LD_INT 0
74632: PUSH
74633: LD_INT 0
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: LIST
74640: LIST
74641: ST_TO_ADDR
// end ;
74642: LD_VAR 0 1
74646: RET
// export function PrepareApeman ( agressivity ) ; begin
74647: LD_INT 0
74649: PPUSH
// uc_side := 0 ;
74650: LD_ADDR_OWVAR 20
74654: PUSH
74655: LD_INT 0
74657: ST_TO_ADDR
// uc_nation := 0 ;
74658: LD_ADDR_OWVAR 21
74662: PUSH
74663: LD_INT 0
74665: ST_TO_ADDR
// hc_sex := sex_male ;
74666: LD_ADDR_OWVAR 27
74670: PUSH
74671: LD_INT 1
74673: ST_TO_ADDR
// hc_class := class_apeman ;
74674: LD_ADDR_OWVAR 28
74678: PUSH
74679: LD_INT 12
74681: ST_TO_ADDR
// hc_gallery :=  ;
74682: LD_ADDR_OWVAR 33
74686: PUSH
74687: LD_STRING 
74689: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74690: LD_ADDR_OWVAR 35
74694: PUSH
74695: LD_VAR 0 1
74699: NEG
74700: PPUSH
74701: LD_VAR 0 1
74705: PPUSH
74706: CALL_OW 12
74710: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74711: LD_ADDR_OWVAR 31
74715: PUSH
74716: LD_INT 0
74718: PPUSH
74719: LD_INT 3
74721: PPUSH
74722: CALL_OW 12
74726: PUSH
74727: LD_INT 0
74729: PPUSH
74730: LD_INT 3
74732: PPUSH
74733: CALL_OW 12
74737: PUSH
74738: LD_INT 0
74740: PUSH
74741: LD_INT 0
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: LIST
74748: LIST
74749: ST_TO_ADDR
// end ;
74750: LD_VAR 0 2
74754: RET
// export function PrepareTiger ( agressivity ) ; begin
74755: LD_INT 0
74757: PPUSH
// uc_side := 0 ;
74758: LD_ADDR_OWVAR 20
74762: PUSH
74763: LD_INT 0
74765: ST_TO_ADDR
// uc_nation := 0 ;
74766: LD_ADDR_OWVAR 21
74770: PUSH
74771: LD_INT 0
74773: ST_TO_ADDR
// hc_class := class_tiger ;
74774: LD_ADDR_OWVAR 28
74778: PUSH
74779: LD_INT 14
74781: ST_TO_ADDR
// hc_gallery :=  ;
74782: LD_ADDR_OWVAR 33
74786: PUSH
74787: LD_STRING 
74789: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74790: LD_ADDR_OWVAR 35
74794: PUSH
74795: LD_VAR 0 1
74799: NEG
74800: PPUSH
74801: LD_VAR 0 1
74805: PPUSH
74806: CALL_OW 12
74810: ST_TO_ADDR
// end ;
74811: LD_VAR 0 2
74815: RET
// export function PrepareEnchidna ( ) ; begin
74816: LD_INT 0
74818: PPUSH
// uc_side := 0 ;
74819: LD_ADDR_OWVAR 20
74823: PUSH
74824: LD_INT 0
74826: ST_TO_ADDR
// uc_nation := 0 ;
74827: LD_ADDR_OWVAR 21
74831: PUSH
74832: LD_INT 0
74834: ST_TO_ADDR
// hc_class := class_baggie ;
74835: LD_ADDR_OWVAR 28
74839: PUSH
74840: LD_INT 13
74842: ST_TO_ADDR
// hc_gallery :=  ;
74843: LD_ADDR_OWVAR 33
74847: PUSH
74848: LD_STRING 
74850: ST_TO_ADDR
// end ;
74851: LD_VAR 0 1
74855: RET
// export function PrepareFrog ( ) ; begin
74856: LD_INT 0
74858: PPUSH
// uc_side := 0 ;
74859: LD_ADDR_OWVAR 20
74863: PUSH
74864: LD_INT 0
74866: ST_TO_ADDR
// uc_nation := 0 ;
74867: LD_ADDR_OWVAR 21
74871: PUSH
74872: LD_INT 0
74874: ST_TO_ADDR
// hc_class := class_frog ;
74875: LD_ADDR_OWVAR 28
74879: PUSH
74880: LD_INT 19
74882: ST_TO_ADDR
// hc_gallery :=  ;
74883: LD_ADDR_OWVAR 33
74887: PUSH
74888: LD_STRING 
74890: ST_TO_ADDR
// end ;
74891: LD_VAR 0 1
74895: RET
// export function PrepareFish ( ) ; begin
74896: LD_INT 0
74898: PPUSH
// uc_side := 0 ;
74899: LD_ADDR_OWVAR 20
74903: PUSH
74904: LD_INT 0
74906: ST_TO_ADDR
// uc_nation := 0 ;
74907: LD_ADDR_OWVAR 21
74911: PUSH
74912: LD_INT 0
74914: ST_TO_ADDR
// hc_class := class_fish ;
74915: LD_ADDR_OWVAR 28
74919: PUSH
74920: LD_INT 20
74922: ST_TO_ADDR
// hc_gallery :=  ;
74923: LD_ADDR_OWVAR 33
74927: PUSH
74928: LD_STRING 
74930: ST_TO_ADDR
// end ;
74931: LD_VAR 0 1
74935: RET
// export function PrepareBird ( ) ; begin
74936: LD_INT 0
74938: PPUSH
// uc_side := 0 ;
74939: LD_ADDR_OWVAR 20
74943: PUSH
74944: LD_INT 0
74946: ST_TO_ADDR
// uc_nation := 0 ;
74947: LD_ADDR_OWVAR 21
74951: PUSH
74952: LD_INT 0
74954: ST_TO_ADDR
// hc_class := class_phororhacos ;
74955: LD_ADDR_OWVAR 28
74959: PUSH
74960: LD_INT 18
74962: ST_TO_ADDR
// hc_gallery :=  ;
74963: LD_ADDR_OWVAR 33
74967: PUSH
74968: LD_STRING 
74970: ST_TO_ADDR
// end ;
74971: LD_VAR 0 1
74975: RET
// export function PrepareHorse ( ) ; begin
74976: LD_INT 0
74978: PPUSH
// uc_side := 0 ;
74979: LD_ADDR_OWVAR 20
74983: PUSH
74984: LD_INT 0
74986: ST_TO_ADDR
// uc_nation := 0 ;
74987: LD_ADDR_OWVAR 21
74991: PUSH
74992: LD_INT 0
74994: ST_TO_ADDR
// hc_class := class_horse ;
74995: LD_ADDR_OWVAR 28
74999: PUSH
75000: LD_INT 21
75002: ST_TO_ADDR
// hc_gallery :=  ;
75003: LD_ADDR_OWVAR 33
75007: PUSH
75008: LD_STRING 
75010: ST_TO_ADDR
// end ;
75011: LD_VAR 0 1
75015: RET
// export function PrepareMastodont ( ) ; begin
75016: LD_INT 0
75018: PPUSH
// uc_side := 0 ;
75019: LD_ADDR_OWVAR 20
75023: PUSH
75024: LD_INT 0
75026: ST_TO_ADDR
// uc_nation := 0 ;
75027: LD_ADDR_OWVAR 21
75031: PUSH
75032: LD_INT 0
75034: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75035: LD_ADDR_OWVAR 37
75039: PUSH
75040: LD_INT 31
75042: ST_TO_ADDR
// vc_control := control_rider ;
75043: LD_ADDR_OWVAR 38
75047: PUSH
75048: LD_INT 4
75050: ST_TO_ADDR
// end ;
75051: LD_VAR 0 1
75055: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75056: LD_INT 0
75058: PPUSH
75059: PPUSH
75060: PPUSH
// uc_side = 0 ;
75061: LD_ADDR_OWVAR 20
75065: PUSH
75066: LD_INT 0
75068: ST_TO_ADDR
// uc_nation = 0 ;
75069: LD_ADDR_OWVAR 21
75073: PUSH
75074: LD_INT 0
75076: ST_TO_ADDR
// InitHc_All ( ) ;
75077: CALL_OW 584
// InitVc ;
75081: CALL_OW 20
// if mastodonts then
75085: LD_VAR 0 6
75089: IFFALSE 75156
// for i = 1 to mastodonts do
75091: LD_ADDR_VAR 0 11
75095: PUSH
75096: DOUBLE
75097: LD_INT 1
75099: DEC
75100: ST_TO_ADDR
75101: LD_VAR 0 6
75105: PUSH
75106: FOR_TO
75107: IFFALSE 75154
// begin vc_chassis := 31 ;
75109: LD_ADDR_OWVAR 37
75113: PUSH
75114: LD_INT 31
75116: ST_TO_ADDR
// vc_control := control_rider ;
75117: LD_ADDR_OWVAR 38
75121: PUSH
75122: LD_INT 4
75124: ST_TO_ADDR
// animal := CreateVehicle ;
75125: LD_ADDR_VAR 0 12
75129: PUSH
75130: CALL_OW 45
75134: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75135: LD_VAR 0 12
75139: PPUSH
75140: LD_VAR 0 8
75144: PPUSH
75145: LD_INT 0
75147: PPUSH
75148: CALL 77284 0 3
// end ;
75152: GO 75106
75154: POP
75155: POP
// if horses then
75156: LD_VAR 0 5
75160: IFFALSE 75227
// for i = 1 to horses do
75162: LD_ADDR_VAR 0 11
75166: PUSH
75167: DOUBLE
75168: LD_INT 1
75170: DEC
75171: ST_TO_ADDR
75172: LD_VAR 0 5
75176: PUSH
75177: FOR_TO
75178: IFFALSE 75225
// begin hc_class := 21 ;
75180: LD_ADDR_OWVAR 28
75184: PUSH
75185: LD_INT 21
75187: ST_TO_ADDR
// hc_gallery :=  ;
75188: LD_ADDR_OWVAR 33
75192: PUSH
75193: LD_STRING 
75195: ST_TO_ADDR
// animal := CreateHuman ;
75196: LD_ADDR_VAR 0 12
75200: PUSH
75201: CALL_OW 44
75205: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75206: LD_VAR 0 12
75210: PPUSH
75211: LD_VAR 0 8
75215: PPUSH
75216: LD_INT 0
75218: PPUSH
75219: CALL 77284 0 3
// end ;
75223: GO 75177
75225: POP
75226: POP
// if birds then
75227: LD_VAR 0 1
75231: IFFALSE 75298
// for i = 1 to birds do
75233: LD_ADDR_VAR 0 11
75237: PUSH
75238: DOUBLE
75239: LD_INT 1
75241: DEC
75242: ST_TO_ADDR
75243: LD_VAR 0 1
75247: PUSH
75248: FOR_TO
75249: IFFALSE 75296
// begin hc_class := 18 ;
75251: LD_ADDR_OWVAR 28
75255: PUSH
75256: LD_INT 18
75258: ST_TO_ADDR
// hc_gallery =  ;
75259: LD_ADDR_OWVAR 33
75263: PUSH
75264: LD_STRING 
75266: ST_TO_ADDR
// animal := CreateHuman ;
75267: LD_ADDR_VAR 0 12
75271: PUSH
75272: CALL_OW 44
75276: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75277: LD_VAR 0 12
75281: PPUSH
75282: LD_VAR 0 8
75286: PPUSH
75287: LD_INT 0
75289: PPUSH
75290: CALL 77284 0 3
// end ;
75294: GO 75248
75296: POP
75297: POP
// if tigers then
75298: LD_VAR 0 2
75302: IFFALSE 75386
// for i = 1 to tigers do
75304: LD_ADDR_VAR 0 11
75308: PUSH
75309: DOUBLE
75310: LD_INT 1
75312: DEC
75313: ST_TO_ADDR
75314: LD_VAR 0 2
75318: PUSH
75319: FOR_TO
75320: IFFALSE 75384
// begin hc_class = class_tiger ;
75322: LD_ADDR_OWVAR 28
75326: PUSH
75327: LD_INT 14
75329: ST_TO_ADDR
// hc_gallery =  ;
75330: LD_ADDR_OWVAR 33
75334: PUSH
75335: LD_STRING 
75337: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75338: LD_ADDR_OWVAR 35
75342: PUSH
75343: LD_INT 7
75345: NEG
75346: PPUSH
75347: LD_INT 7
75349: PPUSH
75350: CALL_OW 12
75354: ST_TO_ADDR
// animal := CreateHuman ;
75355: LD_ADDR_VAR 0 12
75359: PUSH
75360: CALL_OW 44
75364: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75365: LD_VAR 0 12
75369: PPUSH
75370: LD_VAR 0 8
75374: PPUSH
75375: LD_INT 0
75377: PPUSH
75378: CALL 77284 0 3
// end ;
75382: GO 75319
75384: POP
75385: POP
// if apemans then
75386: LD_VAR 0 3
75390: IFFALSE 75513
// for i = 1 to apemans do
75392: LD_ADDR_VAR 0 11
75396: PUSH
75397: DOUBLE
75398: LD_INT 1
75400: DEC
75401: ST_TO_ADDR
75402: LD_VAR 0 3
75406: PUSH
75407: FOR_TO
75408: IFFALSE 75511
// begin hc_class = class_apeman ;
75410: LD_ADDR_OWVAR 28
75414: PUSH
75415: LD_INT 12
75417: ST_TO_ADDR
// hc_gallery =  ;
75418: LD_ADDR_OWVAR 33
75422: PUSH
75423: LD_STRING 
75425: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75426: LD_ADDR_OWVAR 35
75430: PUSH
75431: LD_INT 2
75433: NEG
75434: PPUSH
75435: LD_INT 2
75437: PPUSH
75438: CALL_OW 12
75442: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75443: LD_ADDR_OWVAR 31
75447: PUSH
75448: LD_INT 1
75450: PPUSH
75451: LD_INT 3
75453: PPUSH
75454: CALL_OW 12
75458: PUSH
75459: LD_INT 1
75461: PPUSH
75462: LD_INT 3
75464: PPUSH
75465: CALL_OW 12
75469: PUSH
75470: LD_INT 0
75472: PUSH
75473: LD_INT 0
75475: PUSH
75476: EMPTY
75477: LIST
75478: LIST
75479: LIST
75480: LIST
75481: ST_TO_ADDR
// animal := CreateHuman ;
75482: LD_ADDR_VAR 0 12
75486: PUSH
75487: CALL_OW 44
75491: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75492: LD_VAR 0 12
75496: PPUSH
75497: LD_VAR 0 8
75501: PPUSH
75502: LD_INT 0
75504: PPUSH
75505: CALL 77284 0 3
// end ;
75509: GO 75407
75511: POP
75512: POP
// if enchidnas then
75513: LD_VAR 0 4
75517: IFFALSE 75584
// for i = 1 to enchidnas do
75519: LD_ADDR_VAR 0 11
75523: PUSH
75524: DOUBLE
75525: LD_INT 1
75527: DEC
75528: ST_TO_ADDR
75529: LD_VAR 0 4
75533: PUSH
75534: FOR_TO
75535: IFFALSE 75582
// begin hc_class = 13 ;
75537: LD_ADDR_OWVAR 28
75541: PUSH
75542: LD_INT 13
75544: ST_TO_ADDR
// hc_gallery =  ;
75545: LD_ADDR_OWVAR 33
75549: PUSH
75550: LD_STRING 
75552: ST_TO_ADDR
// animal := CreateHuman ;
75553: LD_ADDR_VAR 0 12
75557: PUSH
75558: CALL_OW 44
75562: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75563: LD_VAR 0 12
75567: PPUSH
75568: LD_VAR 0 8
75572: PPUSH
75573: LD_INT 0
75575: PPUSH
75576: CALL 77284 0 3
// end ;
75580: GO 75534
75582: POP
75583: POP
// if fishes then
75584: LD_VAR 0 7
75588: IFFALSE 75655
// for i = 1 to fishes do
75590: LD_ADDR_VAR 0 11
75594: PUSH
75595: DOUBLE
75596: LD_INT 1
75598: DEC
75599: ST_TO_ADDR
75600: LD_VAR 0 7
75604: PUSH
75605: FOR_TO
75606: IFFALSE 75653
// begin hc_class = 20 ;
75608: LD_ADDR_OWVAR 28
75612: PUSH
75613: LD_INT 20
75615: ST_TO_ADDR
// hc_gallery =  ;
75616: LD_ADDR_OWVAR 33
75620: PUSH
75621: LD_STRING 
75623: ST_TO_ADDR
// animal := CreateHuman ;
75624: LD_ADDR_VAR 0 12
75628: PUSH
75629: CALL_OW 44
75633: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75634: LD_VAR 0 12
75638: PPUSH
75639: LD_VAR 0 9
75643: PPUSH
75644: LD_INT 0
75646: PPUSH
75647: CALL 77284 0 3
// end ;
75651: GO 75605
75653: POP
75654: POP
// end ;
75655: LD_VAR 0 10
75659: RET
// export function WantHeal ( sci , unit ) ; begin
75660: LD_INT 0
75662: PPUSH
// if GetTaskList ( sci ) > 0 then
75663: LD_VAR 0 1
75667: PPUSH
75668: CALL_OW 437
75672: PUSH
75673: LD_INT 0
75675: GREATER
75676: IFFALSE 75746
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75678: LD_VAR 0 1
75682: PPUSH
75683: CALL_OW 437
75687: PUSH
75688: LD_INT 1
75690: ARRAY
75691: PUSH
75692: LD_INT 1
75694: ARRAY
75695: PUSH
75696: LD_STRING l
75698: EQUAL
75699: PUSH
75700: LD_VAR 0 1
75704: PPUSH
75705: CALL_OW 437
75709: PUSH
75710: LD_INT 1
75712: ARRAY
75713: PUSH
75714: LD_INT 4
75716: ARRAY
75717: PUSH
75718: LD_VAR 0 2
75722: EQUAL
75723: AND
75724: IFFALSE 75736
// result := true else
75726: LD_ADDR_VAR 0 3
75730: PUSH
75731: LD_INT 1
75733: ST_TO_ADDR
75734: GO 75744
// result := false ;
75736: LD_ADDR_VAR 0 3
75740: PUSH
75741: LD_INT 0
75743: ST_TO_ADDR
// end else
75744: GO 75754
// result := false ;
75746: LD_ADDR_VAR 0 3
75750: PUSH
75751: LD_INT 0
75753: ST_TO_ADDR
// end ;
75754: LD_VAR 0 3
75758: RET
// export function HealTarget ( sci ) ; begin
75759: LD_INT 0
75761: PPUSH
// if not sci then
75762: LD_VAR 0 1
75766: NOT
75767: IFFALSE 75771
// exit ;
75769: GO 75836
// result := 0 ;
75771: LD_ADDR_VAR 0 2
75775: PUSH
75776: LD_INT 0
75778: ST_TO_ADDR
// if GetTaskList ( sci ) then
75779: LD_VAR 0 1
75783: PPUSH
75784: CALL_OW 437
75788: IFFALSE 75836
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75790: LD_VAR 0 1
75794: PPUSH
75795: CALL_OW 437
75799: PUSH
75800: LD_INT 1
75802: ARRAY
75803: PUSH
75804: LD_INT 1
75806: ARRAY
75807: PUSH
75808: LD_STRING l
75810: EQUAL
75811: IFFALSE 75836
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75813: LD_ADDR_VAR 0 2
75817: PUSH
75818: LD_VAR 0 1
75822: PPUSH
75823: CALL_OW 437
75827: PUSH
75828: LD_INT 1
75830: ARRAY
75831: PUSH
75832: LD_INT 4
75834: ARRAY
75835: ST_TO_ADDR
// end ;
75836: LD_VAR 0 2
75840: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75841: LD_INT 0
75843: PPUSH
75844: PPUSH
75845: PPUSH
75846: PPUSH
// if not base_units then
75847: LD_VAR 0 1
75851: NOT
75852: IFFALSE 75856
// exit ;
75854: GO 75943
// result := false ;
75856: LD_ADDR_VAR 0 2
75860: PUSH
75861: LD_INT 0
75863: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75864: LD_ADDR_VAR 0 5
75868: PUSH
75869: LD_VAR 0 1
75873: PPUSH
75874: LD_INT 21
75876: PUSH
75877: LD_INT 3
75879: PUSH
75880: EMPTY
75881: LIST
75882: LIST
75883: PPUSH
75884: CALL_OW 72
75888: ST_TO_ADDR
// if not tmp then
75889: LD_VAR 0 5
75893: NOT
75894: IFFALSE 75898
// exit ;
75896: GO 75943
// for i in tmp do
75898: LD_ADDR_VAR 0 3
75902: PUSH
75903: LD_VAR 0 5
75907: PUSH
75908: FOR_IN
75909: IFFALSE 75941
// begin result := EnemyInRange ( i , 22 ) ;
75911: LD_ADDR_VAR 0 2
75915: PUSH
75916: LD_VAR 0 3
75920: PPUSH
75921: LD_INT 22
75923: PPUSH
75924: CALL 73530 0 2
75928: ST_TO_ADDR
// if result then
75929: LD_VAR 0 2
75933: IFFALSE 75939
// exit ;
75935: POP
75936: POP
75937: GO 75943
// end ;
75939: GO 75908
75941: POP
75942: POP
// end ;
75943: LD_VAR 0 2
75947: RET
// export function FilterByTag ( units , tag ) ; begin
75948: LD_INT 0
75950: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75951: LD_ADDR_VAR 0 3
75955: PUSH
75956: LD_VAR 0 1
75960: PPUSH
75961: LD_INT 120
75963: PUSH
75964: LD_VAR 0 2
75968: PUSH
75969: EMPTY
75970: LIST
75971: LIST
75972: PPUSH
75973: CALL_OW 72
75977: ST_TO_ADDR
// end ;
75978: LD_VAR 0 3
75982: RET
// export function IsDriver ( un ) ; begin
75983: LD_INT 0
75985: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75986: LD_ADDR_VAR 0 2
75990: PUSH
75991: LD_VAR 0 1
75995: PUSH
75996: LD_INT 55
75998: PUSH
75999: EMPTY
76000: LIST
76001: PPUSH
76002: CALL_OW 69
76006: IN
76007: ST_TO_ADDR
// end ;
76008: LD_VAR 0 2
76012: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76013: LD_INT 0
76015: PPUSH
76016: PPUSH
// list := [ ] ;
76017: LD_ADDR_VAR 0 5
76021: PUSH
76022: EMPTY
76023: ST_TO_ADDR
// case d of 0 :
76024: LD_VAR 0 3
76028: PUSH
76029: LD_INT 0
76031: DOUBLE
76032: EQUAL
76033: IFTRUE 76037
76035: GO 76170
76037: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76038: LD_ADDR_VAR 0 5
76042: PUSH
76043: LD_VAR 0 1
76047: PUSH
76048: LD_INT 4
76050: MINUS
76051: PUSH
76052: LD_VAR 0 2
76056: PUSH
76057: LD_INT 4
76059: MINUS
76060: PUSH
76061: LD_INT 2
76063: PUSH
76064: EMPTY
76065: LIST
76066: LIST
76067: LIST
76068: PUSH
76069: LD_VAR 0 1
76073: PUSH
76074: LD_INT 3
76076: MINUS
76077: PUSH
76078: LD_VAR 0 2
76082: PUSH
76083: LD_INT 1
76085: PUSH
76086: EMPTY
76087: LIST
76088: LIST
76089: LIST
76090: PUSH
76091: LD_VAR 0 1
76095: PUSH
76096: LD_INT 4
76098: PLUS
76099: PUSH
76100: LD_VAR 0 2
76104: PUSH
76105: LD_INT 4
76107: PUSH
76108: EMPTY
76109: LIST
76110: LIST
76111: LIST
76112: PUSH
76113: LD_VAR 0 1
76117: PUSH
76118: LD_INT 3
76120: PLUS
76121: PUSH
76122: LD_VAR 0 2
76126: PUSH
76127: LD_INT 3
76129: PLUS
76130: PUSH
76131: LD_INT 5
76133: PUSH
76134: EMPTY
76135: LIST
76136: LIST
76137: LIST
76138: PUSH
76139: LD_VAR 0 1
76143: PUSH
76144: LD_VAR 0 2
76148: PUSH
76149: LD_INT 4
76151: PLUS
76152: PUSH
76153: LD_INT 0
76155: PUSH
76156: EMPTY
76157: LIST
76158: LIST
76159: LIST
76160: PUSH
76161: EMPTY
76162: LIST
76163: LIST
76164: LIST
76165: LIST
76166: LIST
76167: ST_TO_ADDR
// end ; 1 :
76168: GO 76868
76170: LD_INT 1
76172: DOUBLE
76173: EQUAL
76174: IFTRUE 76178
76176: GO 76311
76178: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76179: LD_ADDR_VAR 0 5
76183: PUSH
76184: LD_VAR 0 1
76188: PUSH
76189: LD_VAR 0 2
76193: PUSH
76194: LD_INT 4
76196: MINUS
76197: PUSH
76198: LD_INT 3
76200: PUSH
76201: EMPTY
76202: LIST
76203: LIST
76204: LIST
76205: PUSH
76206: LD_VAR 0 1
76210: PUSH
76211: LD_INT 3
76213: MINUS
76214: PUSH
76215: LD_VAR 0 2
76219: PUSH
76220: LD_INT 3
76222: MINUS
76223: PUSH
76224: LD_INT 2
76226: PUSH
76227: EMPTY
76228: LIST
76229: LIST
76230: LIST
76231: PUSH
76232: LD_VAR 0 1
76236: PUSH
76237: LD_INT 4
76239: MINUS
76240: PUSH
76241: LD_VAR 0 2
76245: PUSH
76246: LD_INT 1
76248: PUSH
76249: EMPTY
76250: LIST
76251: LIST
76252: LIST
76253: PUSH
76254: LD_VAR 0 1
76258: PUSH
76259: LD_VAR 0 2
76263: PUSH
76264: LD_INT 3
76266: PLUS
76267: PUSH
76268: LD_INT 0
76270: PUSH
76271: EMPTY
76272: LIST
76273: LIST
76274: LIST
76275: PUSH
76276: LD_VAR 0 1
76280: PUSH
76281: LD_INT 4
76283: PLUS
76284: PUSH
76285: LD_VAR 0 2
76289: PUSH
76290: LD_INT 4
76292: PLUS
76293: PUSH
76294: LD_INT 5
76296: PUSH
76297: EMPTY
76298: LIST
76299: LIST
76300: LIST
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: LIST
76306: LIST
76307: LIST
76308: ST_TO_ADDR
// end ; 2 :
76309: GO 76868
76311: LD_INT 2
76313: DOUBLE
76314: EQUAL
76315: IFTRUE 76319
76317: GO 76448
76319: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76320: LD_ADDR_VAR 0 5
76324: PUSH
76325: LD_VAR 0 1
76329: PUSH
76330: LD_VAR 0 2
76334: PUSH
76335: LD_INT 3
76337: MINUS
76338: PUSH
76339: LD_INT 3
76341: PUSH
76342: EMPTY
76343: LIST
76344: LIST
76345: LIST
76346: PUSH
76347: LD_VAR 0 1
76351: PUSH
76352: LD_INT 4
76354: PLUS
76355: PUSH
76356: LD_VAR 0 2
76360: PUSH
76361: LD_INT 4
76363: PUSH
76364: EMPTY
76365: LIST
76366: LIST
76367: LIST
76368: PUSH
76369: LD_VAR 0 1
76373: PUSH
76374: LD_VAR 0 2
76378: PUSH
76379: LD_INT 4
76381: PLUS
76382: PUSH
76383: LD_INT 0
76385: PUSH
76386: EMPTY
76387: LIST
76388: LIST
76389: LIST
76390: PUSH
76391: LD_VAR 0 1
76395: PUSH
76396: LD_INT 3
76398: MINUS
76399: PUSH
76400: LD_VAR 0 2
76404: PUSH
76405: LD_INT 1
76407: PUSH
76408: EMPTY
76409: LIST
76410: LIST
76411: LIST
76412: PUSH
76413: LD_VAR 0 1
76417: PUSH
76418: LD_INT 4
76420: MINUS
76421: PUSH
76422: LD_VAR 0 2
76426: PUSH
76427: LD_INT 4
76429: MINUS
76430: PUSH
76431: LD_INT 2
76433: PUSH
76434: EMPTY
76435: LIST
76436: LIST
76437: LIST
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: LIST
76443: LIST
76444: LIST
76445: ST_TO_ADDR
// end ; 3 :
76446: GO 76868
76448: LD_INT 3
76450: DOUBLE
76451: EQUAL
76452: IFTRUE 76456
76454: GO 76589
76456: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76457: LD_ADDR_VAR 0 5
76461: PUSH
76462: LD_VAR 0 1
76466: PUSH
76467: LD_INT 3
76469: PLUS
76470: PUSH
76471: LD_VAR 0 2
76475: PUSH
76476: LD_INT 4
76478: PUSH
76479: EMPTY
76480: LIST
76481: LIST
76482: LIST
76483: PUSH
76484: LD_VAR 0 1
76488: PUSH
76489: LD_INT 4
76491: PLUS
76492: PUSH
76493: LD_VAR 0 2
76497: PUSH
76498: LD_INT 4
76500: PLUS
76501: PUSH
76502: LD_INT 5
76504: PUSH
76505: EMPTY
76506: LIST
76507: LIST
76508: LIST
76509: PUSH
76510: LD_VAR 0 1
76514: PUSH
76515: LD_INT 4
76517: MINUS
76518: PUSH
76519: LD_VAR 0 2
76523: PUSH
76524: LD_INT 1
76526: PUSH
76527: EMPTY
76528: LIST
76529: LIST
76530: LIST
76531: PUSH
76532: LD_VAR 0 1
76536: PUSH
76537: LD_VAR 0 2
76541: PUSH
76542: LD_INT 4
76544: MINUS
76545: PUSH
76546: LD_INT 3
76548: PUSH
76549: EMPTY
76550: LIST
76551: LIST
76552: LIST
76553: PUSH
76554: LD_VAR 0 1
76558: PUSH
76559: LD_INT 3
76561: MINUS
76562: PUSH
76563: LD_VAR 0 2
76567: PUSH
76568: LD_INT 3
76570: MINUS
76571: PUSH
76572: LD_INT 2
76574: PUSH
76575: EMPTY
76576: LIST
76577: LIST
76578: LIST
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: LIST
76584: LIST
76585: LIST
76586: ST_TO_ADDR
// end ; 4 :
76587: GO 76868
76589: LD_INT 4
76591: DOUBLE
76592: EQUAL
76593: IFTRUE 76597
76595: GO 76730
76597: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76598: LD_ADDR_VAR 0 5
76602: PUSH
76603: LD_VAR 0 1
76607: PUSH
76608: LD_VAR 0 2
76612: PUSH
76613: LD_INT 4
76615: PLUS
76616: PUSH
76617: LD_INT 0
76619: PUSH
76620: EMPTY
76621: LIST
76622: LIST
76623: LIST
76624: PUSH
76625: LD_VAR 0 1
76629: PUSH
76630: LD_INT 3
76632: PLUS
76633: PUSH
76634: LD_VAR 0 2
76638: PUSH
76639: LD_INT 3
76641: PLUS
76642: PUSH
76643: LD_INT 5
76645: PUSH
76646: EMPTY
76647: LIST
76648: LIST
76649: LIST
76650: PUSH
76651: LD_VAR 0 1
76655: PUSH
76656: LD_INT 4
76658: PLUS
76659: PUSH
76660: LD_VAR 0 2
76664: PUSH
76665: LD_INT 4
76667: PUSH
76668: EMPTY
76669: LIST
76670: LIST
76671: LIST
76672: PUSH
76673: LD_VAR 0 1
76677: PUSH
76678: LD_VAR 0 2
76682: PUSH
76683: LD_INT 3
76685: MINUS
76686: PUSH
76687: LD_INT 3
76689: PUSH
76690: EMPTY
76691: LIST
76692: LIST
76693: LIST
76694: PUSH
76695: LD_VAR 0 1
76699: PUSH
76700: LD_INT 4
76702: MINUS
76703: PUSH
76704: LD_VAR 0 2
76708: PUSH
76709: LD_INT 4
76711: MINUS
76712: PUSH
76713: LD_INT 2
76715: PUSH
76716: EMPTY
76717: LIST
76718: LIST
76719: LIST
76720: PUSH
76721: EMPTY
76722: LIST
76723: LIST
76724: LIST
76725: LIST
76726: LIST
76727: ST_TO_ADDR
// end ; 5 :
76728: GO 76868
76730: LD_INT 5
76732: DOUBLE
76733: EQUAL
76734: IFTRUE 76738
76736: GO 76867
76738: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76739: LD_ADDR_VAR 0 5
76743: PUSH
76744: LD_VAR 0 1
76748: PUSH
76749: LD_INT 4
76751: MINUS
76752: PUSH
76753: LD_VAR 0 2
76757: PUSH
76758: LD_INT 1
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: LIST
76765: PUSH
76766: LD_VAR 0 1
76770: PUSH
76771: LD_VAR 0 2
76775: PUSH
76776: LD_INT 4
76778: MINUS
76779: PUSH
76780: LD_INT 3
76782: PUSH
76783: EMPTY
76784: LIST
76785: LIST
76786: LIST
76787: PUSH
76788: LD_VAR 0 1
76792: PUSH
76793: LD_INT 4
76795: PLUS
76796: PUSH
76797: LD_VAR 0 2
76801: PUSH
76802: LD_INT 4
76804: PLUS
76805: PUSH
76806: LD_INT 5
76808: PUSH
76809: EMPTY
76810: LIST
76811: LIST
76812: LIST
76813: PUSH
76814: LD_VAR 0 1
76818: PUSH
76819: LD_INT 3
76821: PLUS
76822: PUSH
76823: LD_VAR 0 2
76827: PUSH
76828: LD_INT 4
76830: PUSH
76831: EMPTY
76832: LIST
76833: LIST
76834: LIST
76835: PUSH
76836: LD_VAR 0 1
76840: PUSH
76841: LD_VAR 0 2
76845: PUSH
76846: LD_INT 3
76848: PLUS
76849: PUSH
76850: LD_INT 0
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: LIST
76857: PUSH
76858: EMPTY
76859: LIST
76860: LIST
76861: LIST
76862: LIST
76863: LIST
76864: ST_TO_ADDR
// end ; end ;
76865: GO 76868
76867: POP
// result := list ;
76868: LD_ADDR_VAR 0 4
76872: PUSH
76873: LD_VAR 0 5
76877: ST_TO_ADDR
// end ;
76878: LD_VAR 0 4
76882: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76883: LD_INT 0
76885: PPUSH
76886: PPUSH
76887: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76888: LD_VAR 0 1
76892: NOT
76893: PUSH
76894: LD_VAR 0 2
76898: PUSH
76899: LD_INT 1
76901: PUSH
76902: LD_INT 2
76904: PUSH
76905: LD_INT 3
76907: PUSH
76908: LD_INT 4
76910: PUSH
76911: EMPTY
76912: LIST
76913: LIST
76914: LIST
76915: LIST
76916: IN
76917: NOT
76918: OR
76919: IFFALSE 76923
// exit ;
76921: GO 77006
// tmp := [ ] ;
76923: LD_ADDR_VAR 0 5
76927: PUSH
76928: EMPTY
76929: ST_TO_ADDR
// for i in units do
76930: LD_ADDR_VAR 0 4
76934: PUSH
76935: LD_VAR 0 1
76939: PUSH
76940: FOR_IN
76941: IFFALSE 76975
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76943: LD_ADDR_VAR 0 5
76947: PUSH
76948: LD_VAR 0 5
76952: PPUSH
76953: LD_VAR 0 4
76957: PPUSH
76958: LD_VAR 0 2
76962: PPUSH
76963: CALL_OW 259
76967: PPUSH
76968: CALL 78379 0 2
76972: ST_TO_ADDR
76973: GO 76940
76975: POP
76976: POP
// if not tmp then
76977: LD_VAR 0 5
76981: NOT
76982: IFFALSE 76986
// exit ;
76984: GO 77006
// result := SortListByListDesc ( units , tmp ) ;
76986: LD_ADDR_VAR 0 3
76990: PUSH
76991: LD_VAR 0 1
76995: PPUSH
76996: LD_VAR 0 5
77000: PPUSH
77001: CALL_OW 77
77005: ST_TO_ADDR
// end ;
77006: LD_VAR 0 3
77010: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77011: LD_INT 0
77013: PPUSH
77014: PPUSH
77015: PPUSH
// result := false ;
77016: LD_ADDR_VAR 0 3
77020: PUSH
77021: LD_INT 0
77023: ST_TO_ADDR
// if not building then
77024: LD_VAR 0 2
77028: NOT
77029: IFFALSE 77033
// exit ;
77031: GO 77171
// x := GetX ( building ) ;
77033: LD_ADDR_VAR 0 4
77037: PUSH
77038: LD_VAR 0 2
77042: PPUSH
77043: CALL_OW 250
77047: ST_TO_ADDR
// y := GetY ( building ) ;
77048: LD_ADDR_VAR 0 5
77052: PUSH
77053: LD_VAR 0 2
77057: PPUSH
77058: CALL_OW 251
77062: ST_TO_ADDR
// if not x or not y then
77063: LD_VAR 0 4
77067: NOT
77068: PUSH
77069: LD_VAR 0 5
77073: NOT
77074: OR
77075: IFFALSE 77079
// exit ;
77077: GO 77171
// if GetTaskList ( unit ) then
77079: LD_VAR 0 1
77083: PPUSH
77084: CALL_OW 437
77088: IFFALSE 77171
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77090: LD_STRING e
77092: PUSH
77093: LD_VAR 0 1
77097: PPUSH
77098: CALL_OW 437
77102: PUSH
77103: LD_INT 1
77105: ARRAY
77106: PUSH
77107: LD_INT 1
77109: ARRAY
77110: EQUAL
77111: PUSH
77112: LD_VAR 0 4
77116: PUSH
77117: LD_VAR 0 1
77121: PPUSH
77122: CALL_OW 437
77126: PUSH
77127: LD_INT 1
77129: ARRAY
77130: PUSH
77131: LD_INT 2
77133: ARRAY
77134: EQUAL
77135: AND
77136: PUSH
77137: LD_VAR 0 5
77141: PUSH
77142: LD_VAR 0 1
77146: PPUSH
77147: CALL_OW 437
77151: PUSH
77152: LD_INT 1
77154: ARRAY
77155: PUSH
77156: LD_INT 3
77158: ARRAY
77159: EQUAL
77160: AND
77161: IFFALSE 77171
// result := true end ;
77163: LD_ADDR_VAR 0 3
77167: PUSH
77168: LD_INT 1
77170: ST_TO_ADDR
// end ;
77171: LD_VAR 0 3
77175: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77176: LD_INT 0
77178: PPUSH
// result := false ;
77179: LD_ADDR_VAR 0 4
77183: PUSH
77184: LD_INT 0
77186: ST_TO_ADDR
// if GetTaskList ( unit ) then
77187: LD_VAR 0 1
77191: PPUSH
77192: CALL_OW 437
77196: IFFALSE 77279
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77198: LD_STRING M
77200: PUSH
77201: LD_VAR 0 1
77205: PPUSH
77206: CALL_OW 437
77210: PUSH
77211: LD_INT 1
77213: ARRAY
77214: PUSH
77215: LD_INT 1
77217: ARRAY
77218: EQUAL
77219: PUSH
77220: LD_VAR 0 2
77224: PUSH
77225: LD_VAR 0 1
77229: PPUSH
77230: CALL_OW 437
77234: PUSH
77235: LD_INT 1
77237: ARRAY
77238: PUSH
77239: LD_INT 2
77241: ARRAY
77242: EQUAL
77243: AND
77244: PUSH
77245: LD_VAR 0 3
77249: PUSH
77250: LD_VAR 0 1
77254: PPUSH
77255: CALL_OW 437
77259: PUSH
77260: LD_INT 1
77262: ARRAY
77263: PUSH
77264: LD_INT 3
77266: ARRAY
77267: EQUAL
77268: AND
77269: IFFALSE 77279
// result := true ;
77271: LD_ADDR_VAR 0 4
77275: PUSH
77276: LD_INT 1
77278: ST_TO_ADDR
// end ; end ;
77279: LD_VAR 0 4
77283: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77284: LD_INT 0
77286: PPUSH
77287: PPUSH
77288: PPUSH
77289: PPUSH
// if not unit or not area then
77290: LD_VAR 0 1
77294: NOT
77295: PUSH
77296: LD_VAR 0 2
77300: NOT
77301: OR
77302: IFFALSE 77306
// exit ;
77304: GO 77482
// tmp := AreaToList ( area , i ) ;
77306: LD_ADDR_VAR 0 6
77310: PUSH
77311: LD_VAR 0 2
77315: PPUSH
77316: LD_VAR 0 5
77320: PPUSH
77321: CALL_OW 517
77325: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77326: LD_ADDR_VAR 0 5
77330: PUSH
77331: DOUBLE
77332: LD_INT 1
77334: DEC
77335: ST_TO_ADDR
77336: LD_VAR 0 6
77340: PUSH
77341: LD_INT 1
77343: ARRAY
77344: PUSH
77345: FOR_TO
77346: IFFALSE 77480
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77348: LD_ADDR_VAR 0 7
77352: PUSH
77353: LD_VAR 0 6
77357: PUSH
77358: LD_INT 1
77360: ARRAY
77361: PUSH
77362: LD_VAR 0 5
77366: ARRAY
77367: PUSH
77368: LD_VAR 0 6
77372: PUSH
77373: LD_INT 2
77375: ARRAY
77376: PUSH
77377: LD_VAR 0 5
77381: ARRAY
77382: PUSH
77383: EMPTY
77384: LIST
77385: LIST
77386: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77387: LD_INT 92
77389: PUSH
77390: LD_VAR 0 7
77394: PUSH
77395: LD_INT 1
77397: ARRAY
77398: PUSH
77399: LD_VAR 0 7
77403: PUSH
77404: LD_INT 2
77406: ARRAY
77407: PUSH
77408: LD_INT 2
77410: PUSH
77411: EMPTY
77412: LIST
77413: LIST
77414: LIST
77415: LIST
77416: PPUSH
77417: CALL_OW 69
77421: PUSH
77422: LD_INT 0
77424: EQUAL
77425: IFFALSE 77478
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77427: LD_VAR 0 1
77431: PPUSH
77432: LD_VAR 0 7
77436: PUSH
77437: LD_INT 1
77439: ARRAY
77440: PPUSH
77441: LD_VAR 0 7
77445: PUSH
77446: LD_INT 2
77448: ARRAY
77449: PPUSH
77450: LD_VAR 0 3
77454: PPUSH
77455: CALL_OW 48
// result := IsPlaced ( unit ) ;
77459: LD_ADDR_VAR 0 4
77463: PUSH
77464: LD_VAR 0 1
77468: PPUSH
77469: CALL_OW 305
77473: ST_TO_ADDR
// exit ;
77474: POP
77475: POP
77476: GO 77482
// end ; end ;
77478: GO 77345
77480: POP
77481: POP
// end ;
77482: LD_VAR 0 4
77486: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77487: LD_INT 0
77489: PPUSH
77490: PPUSH
77491: PPUSH
// if not side or side > 8 then
77492: LD_VAR 0 1
77496: NOT
77497: PUSH
77498: LD_VAR 0 1
77502: PUSH
77503: LD_INT 8
77505: GREATER
77506: OR
77507: IFFALSE 77511
// exit ;
77509: GO 77698
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77511: LD_ADDR_VAR 0 4
77515: PUSH
77516: LD_INT 22
77518: PUSH
77519: LD_VAR 0 1
77523: PUSH
77524: EMPTY
77525: LIST
77526: LIST
77527: PUSH
77528: LD_INT 21
77530: PUSH
77531: LD_INT 3
77533: PUSH
77534: EMPTY
77535: LIST
77536: LIST
77537: PUSH
77538: EMPTY
77539: LIST
77540: LIST
77541: PPUSH
77542: CALL_OW 69
77546: ST_TO_ADDR
// if not tmp then
77547: LD_VAR 0 4
77551: NOT
77552: IFFALSE 77556
// exit ;
77554: GO 77698
// enable_addtolog := true ;
77556: LD_ADDR_OWVAR 81
77560: PUSH
77561: LD_INT 1
77563: ST_TO_ADDR
// AddToLog ( [ ) ;
77564: LD_STRING [
77566: PPUSH
77567: CALL_OW 561
// for i in tmp do
77571: LD_ADDR_VAR 0 3
77575: PUSH
77576: LD_VAR 0 4
77580: PUSH
77581: FOR_IN
77582: IFFALSE 77689
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77584: LD_STRING [
77586: PUSH
77587: LD_VAR 0 3
77591: PPUSH
77592: CALL_OW 266
77596: STR
77597: PUSH
77598: LD_STRING , 
77600: STR
77601: PUSH
77602: LD_VAR 0 3
77606: PPUSH
77607: CALL_OW 250
77611: STR
77612: PUSH
77613: LD_STRING , 
77615: STR
77616: PUSH
77617: LD_VAR 0 3
77621: PPUSH
77622: CALL_OW 251
77626: STR
77627: PUSH
77628: LD_STRING , 
77630: STR
77631: PUSH
77632: LD_VAR 0 3
77636: PPUSH
77637: CALL_OW 254
77641: STR
77642: PUSH
77643: LD_STRING , 
77645: STR
77646: PUSH
77647: LD_VAR 0 3
77651: PPUSH
77652: LD_INT 1
77654: PPUSH
77655: CALL_OW 268
77659: STR
77660: PUSH
77661: LD_STRING , 
77663: STR
77664: PUSH
77665: LD_VAR 0 3
77669: PPUSH
77670: LD_INT 2
77672: PPUSH
77673: CALL_OW 268
77677: STR
77678: PUSH
77679: LD_STRING ],
77681: STR
77682: PPUSH
77683: CALL_OW 561
// end ;
77687: GO 77581
77689: POP
77690: POP
// AddToLog ( ]; ) ;
77691: LD_STRING ];
77693: PPUSH
77694: CALL_OW 561
// end ;
77698: LD_VAR 0 2
77702: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77703: LD_INT 0
77705: PPUSH
77706: PPUSH
77707: PPUSH
77708: PPUSH
77709: PPUSH
// if not area or not rate or not max then
77710: LD_VAR 0 1
77714: NOT
77715: PUSH
77716: LD_VAR 0 2
77720: NOT
77721: OR
77722: PUSH
77723: LD_VAR 0 4
77727: NOT
77728: OR
77729: IFFALSE 77733
// exit ;
77731: GO 77922
// while 1 do
77733: LD_INT 1
77735: IFFALSE 77922
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77737: LD_ADDR_VAR 0 9
77741: PUSH
77742: LD_VAR 0 1
77746: PPUSH
77747: LD_INT 1
77749: PPUSH
77750: CALL_OW 287
77754: PUSH
77755: LD_INT 10
77757: MUL
77758: ST_TO_ADDR
// r := rate / 10 ;
77759: LD_ADDR_VAR 0 7
77763: PUSH
77764: LD_VAR 0 2
77768: PUSH
77769: LD_INT 10
77771: DIVREAL
77772: ST_TO_ADDR
// time := 1 1$00 ;
77773: LD_ADDR_VAR 0 8
77777: PUSH
77778: LD_INT 2100
77780: ST_TO_ADDR
// if amount < min then
77781: LD_VAR 0 9
77785: PUSH
77786: LD_VAR 0 3
77790: LESS
77791: IFFALSE 77809
// r := r * 2 else
77793: LD_ADDR_VAR 0 7
77797: PUSH
77798: LD_VAR 0 7
77802: PUSH
77803: LD_INT 2
77805: MUL
77806: ST_TO_ADDR
77807: GO 77835
// if amount > max then
77809: LD_VAR 0 9
77813: PUSH
77814: LD_VAR 0 4
77818: GREATER
77819: IFFALSE 77835
// r := r / 2 ;
77821: LD_ADDR_VAR 0 7
77825: PUSH
77826: LD_VAR 0 7
77830: PUSH
77831: LD_INT 2
77833: DIVREAL
77834: ST_TO_ADDR
// time := time / r ;
77835: LD_ADDR_VAR 0 8
77839: PUSH
77840: LD_VAR 0 8
77844: PUSH
77845: LD_VAR 0 7
77849: DIVREAL
77850: ST_TO_ADDR
// if time < 0 then
77851: LD_VAR 0 8
77855: PUSH
77856: LD_INT 0
77858: LESS
77859: IFFALSE 77876
// time := time * - 1 ;
77861: LD_ADDR_VAR 0 8
77865: PUSH
77866: LD_VAR 0 8
77870: PUSH
77871: LD_INT 1
77873: NEG
77874: MUL
77875: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77876: LD_VAR 0 8
77880: PUSH
77881: LD_INT 35
77883: PPUSH
77884: LD_INT 875
77886: PPUSH
77887: CALL_OW 12
77891: PLUS
77892: PPUSH
77893: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77897: LD_INT 1
77899: PPUSH
77900: LD_INT 5
77902: PPUSH
77903: CALL_OW 12
77907: PPUSH
77908: LD_VAR 0 1
77912: PPUSH
77913: LD_INT 1
77915: PPUSH
77916: CALL_OW 55
// end ;
77920: GO 77733
// end ;
77922: LD_VAR 0 5
77926: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77927: LD_INT 0
77929: PPUSH
77930: PPUSH
77931: PPUSH
77932: PPUSH
77933: PPUSH
77934: PPUSH
77935: PPUSH
77936: PPUSH
// if not turrets or not factories then
77937: LD_VAR 0 1
77941: NOT
77942: PUSH
77943: LD_VAR 0 2
77947: NOT
77948: OR
77949: IFFALSE 77953
// exit ;
77951: GO 78260
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77953: LD_ADDR_VAR 0 10
77957: PUSH
77958: LD_INT 5
77960: PUSH
77961: LD_INT 6
77963: PUSH
77964: EMPTY
77965: LIST
77966: LIST
77967: PUSH
77968: LD_INT 2
77970: PUSH
77971: LD_INT 4
77973: PUSH
77974: EMPTY
77975: LIST
77976: LIST
77977: PUSH
77978: LD_INT 3
77980: PUSH
77981: LD_INT 5
77983: PUSH
77984: EMPTY
77985: LIST
77986: LIST
77987: PUSH
77988: EMPTY
77989: LIST
77990: LIST
77991: LIST
77992: PUSH
77993: LD_INT 24
77995: PUSH
77996: LD_INT 25
77998: PUSH
77999: EMPTY
78000: LIST
78001: LIST
78002: PUSH
78003: LD_INT 23
78005: PUSH
78006: LD_INT 27
78008: PUSH
78009: EMPTY
78010: LIST
78011: LIST
78012: PUSH
78013: EMPTY
78014: LIST
78015: LIST
78016: PUSH
78017: LD_INT 42
78019: PUSH
78020: LD_INT 43
78022: PUSH
78023: EMPTY
78024: LIST
78025: LIST
78026: PUSH
78027: LD_INT 44
78029: PUSH
78030: LD_INT 46
78032: PUSH
78033: EMPTY
78034: LIST
78035: LIST
78036: PUSH
78037: LD_INT 45
78039: PUSH
78040: LD_INT 47
78042: PUSH
78043: EMPTY
78044: LIST
78045: LIST
78046: PUSH
78047: EMPTY
78048: LIST
78049: LIST
78050: LIST
78051: PUSH
78052: EMPTY
78053: LIST
78054: LIST
78055: LIST
78056: ST_TO_ADDR
// result := [ ] ;
78057: LD_ADDR_VAR 0 3
78061: PUSH
78062: EMPTY
78063: ST_TO_ADDR
// for i in turrets do
78064: LD_ADDR_VAR 0 4
78068: PUSH
78069: LD_VAR 0 1
78073: PUSH
78074: FOR_IN
78075: IFFALSE 78258
// begin nat := GetNation ( i ) ;
78077: LD_ADDR_VAR 0 7
78081: PUSH
78082: LD_VAR 0 4
78086: PPUSH
78087: CALL_OW 248
78091: ST_TO_ADDR
// weapon := 0 ;
78092: LD_ADDR_VAR 0 8
78096: PUSH
78097: LD_INT 0
78099: ST_TO_ADDR
// if not nat then
78100: LD_VAR 0 7
78104: NOT
78105: IFFALSE 78109
// continue ;
78107: GO 78074
// for j in list [ nat ] do
78109: LD_ADDR_VAR 0 5
78113: PUSH
78114: LD_VAR 0 10
78118: PUSH
78119: LD_VAR 0 7
78123: ARRAY
78124: PUSH
78125: FOR_IN
78126: IFFALSE 78167
// if GetBWeapon ( i ) = j [ 1 ] then
78128: LD_VAR 0 4
78132: PPUSH
78133: CALL_OW 269
78137: PUSH
78138: LD_VAR 0 5
78142: PUSH
78143: LD_INT 1
78145: ARRAY
78146: EQUAL
78147: IFFALSE 78165
// begin weapon := j [ 2 ] ;
78149: LD_ADDR_VAR 0 8
78153: PUSH
78154: LD_VAR 0 5
78158: PUSH
78159: LD_INT 2
78161: ARRAY
78162: ST_TO_ADDR
// break ;
78163: GO 78167
// end ;
78165: GO 78125
78167: POP
78168: POP
// if not weapon then
78169: LD_VAR 0 8
78173: NOT
78174: IFFALSE 78178
// continue ;
78176: GO 78074
// for k in factories do
78178: LD_ADDR_VAR 0 6
78182: PUSH
78183: LD_VAR 0 2
78187: PUSH
78188: FOR_IN
78189: IFFALSE 78254
// begin weapons := AvailableWeaponList ( k ) ;
78191: LD_ADDR_VAR 0 9
78195: PUSH
78196: LD_VAR 0 6
78200: PPUSH
78201: CALL_OW 478
78205: ST_TO_ADDR
// if not weapons then
78206: LD_VAR 0 9
78210: NOT
78211: IFFALSE 78215
// continue ;
78213: GO 78188
// if weapon in weapons then
78215: LD_VAR 0 8
78219: PUSH
78220: LD_VAR 0 9
78224: IN
78225: IFFALSE 78252
// begin result := [ i , weapon ] ;
78227: LD_ADDR_VAR 0 3
78231: PUSH
78232: LD_VAR 0 4
78236: PUSH
78237: LD_VAR 0 8
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: ST_TO_ADDR
// exit ;
78246: POP
78247: POP
78248: POP
78249: POP
78250: GO 78260
// end ; end ;
78252: GO 78188
78254: POP
78255: POP
// end ;
78256: GO 78074
78258: POP
78259: POP
// end ;
78260: LD_VAR 0 3
78264: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78265: LD_INT 0
78267: PPUSH
// if not side or side > 8 then
78268: LD_VAR 0 3
78272: NOT
78273: PUSH
78274: LD_VAR 0 3
78278: PUSH
78279: LD_INT 8
78281: GREATER
78282: OR
78283: IFFALSE 78287
// exit ;
78285: GO 78346
// if not range then
78287: LD_VAR 0 4
78291: NOT
78292: IFFALSE 78303
// range := - 12 ;
78294: LD_ADDR_VAR 0 4
78298: PUSH
78299: LD_INT 12
78301: NEG
78302: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78303: LD_VAR 0 1
78307: PPUSH
78308: LD_VAR 0 2
78312: PPUSH
78313: LD_VAR 0 3
78317: PPUSH
78318: LD_VAR 0 4
78322: PPUSH
78323: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78327: LD_VAR 0 1
78331: PPUSH
78332: LD_VAR 0 2
78336: PPUSH
78337: LD_VAR 0 3
78341: PPUSH
78342: CALL_OW 331
// end ;
78346: LD_VAR 0 5
78350: RET
// export function Video ( mode ) ; begin
78351: LD_INT 0
78353: PPUSH
// ingame_video = mode ;
78354: LD_ADDR_OWVAR 52
78358: PUSH
78359: LD_VAR 0 1
78363: ST_TO_ADDR
// interface_hidden = mode ;
78364: LD_ADDR_OWVAR 54
78368: PUSH
78369: LD_VAR 0 1
78373: ST_TO_ADDR
// end ;
78374: LD_VAR 0 2
78378: RET
// export function Join ( array , element ) ; begin
78379: LD_INT 0
78381: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78382: LD_ADDR_VAR 0 3
78386: PUSH
78387: LD_VAR 0 1
78391: PPUSH
78392: LD_VAR 0 1
78396: PUSH
78397: LD_INT 1
78399: PLUS
78400: PPUSH
78401: LD_VAR 0 2
78405: PPUSH
78406: CALL_OW 1
78410: ST_TO_ADDR
// end ;
78411: LD_VAR 0 3
78415: RET
// export function JoinUnion ( array , element ) ; begin
78416: LD_INT 0
78418: PPUSH
// result := array union element ;
78419: LD_ADDR_VAR 0 3
78423: PUSH
78424: LD_VAR 0 1
78428: PUSH
78429: LD_VAR 0 2
78433: UNION
78434: ST_TO_ADDR
// end ;
78435: LD_VAR 0 3
78439: RET
// export function GetBehemoths ( side ) ; begin
78440: LD_INT 0
78442: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78443: LD_ADDR_VAR 0 2
78447: PUSH
78448: LD_INT 22
78450: PUSH
78451: LD_VAR 0 1
78455: PUSH
78456: EMPTY
78457: LIST
78458: LIST
78459: PUSH
78460: LD_INT 31
78462: PUSH
78463: LD_INT 25
78465: PUSH
78466: EMPTY
78467: LIST
78468: LIST
78469: PUSH
78470: EMPTY
78471: LIST
78472: LIST
78473: PPUSH
78474: CALL_OW 69
78478: ST_TO_ADDR
// end ;
78479: LD_VAR 0 2
78483: RET
// export function Shuffle ( array ) ; var i , index ; begin
78484: LD_INT 0
78486: PPUSH
78487: PPUSH
78488: PPUSH
// result := [ ] ;
78489: LD_ADDR_VAR 0 2
78493: PUSH
78494: EMPTY
78495: ST_TO_ADDR
// if not array then
78496: LD_VAR 0 1
78500: NOT
78501: IFFALSE 78505
// exit ;
78503: GO 78604
// Randomize ;
78505: CALL_OW 10
// for i = array downto 1 do
78509: LD_ADDR_VAR 0 3
78513: PUSH
78514: DOUBLE
78515: LD_VAR 0 1
78519: INC
78520: ST_TO_ADDR
78521: LD_INT 1
78523: PUSH
78524: FOR_DOWNTO
78525: IFFALSE 78602
// begin index := rand ( 1 , array ) ;
78527: LD_ADDR_VAR 0 4
78531: PUSH
78532: LD_INT 1
78534: PPUSH
78535: LD_VAR 0 1
78539: PPUSH
78540: CALL_OW 12
78544: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78545: LD_ADDR_VAR 0 2
78549: PUSH
78550: LD_VAR 0 2
78554: PPUSH
78555: LD_VAR 0 2
78559: PUSH
78560: LD_INT 1
78562: PLUS
78563: PPUSH
78564: LD_VAR 0 1
78568: PUSH
78569: LD_VAR 0 4
78573: ARRAY
78574: PPUSH
78575: CALL_OW 2
78579: ST_TO_ADDR
// array := Delete ( array , index ) ;
78580: LD_ADDR_VAR 0 1
78584: PUSH
78585: LD_VAR 0 1
78589: PPUSH
78590: LD_VAR 0 4
78594: PPUSH
78595: CALL_OW 3
78599: ST_TO_ADDR
// end ;
78600: GO 78524
78602: POP
78603: POP
// end ;
78604: LD_VAR 0 2
78608: RET
// export function GetBaseMaterials ( base ) ; begin
78609: LD_INT 0
78611: PPUSH
// result := [ 0 , 0 , 0 ] ;
78612: LD_ADDR_VAR 0 2
78616: PUSH
78617: LD_INT 0
78619: PUSH
78620: LD_INT 0
78622: PUSH
78623: LD_INT 0
78625: PUSH
78626: EMPTY
78627: LIST
78628: LIST
78629: LIST
78630: ST_TO_ADDR
// if not base then
78631: LD_VAR 0 1
78635: NOT
78636: IFFALSE 78640
// exit ;
78638: GO 78689
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78640: LD_ADDR_VAR 0 2
78644: PUSH
78645: LD_VAR 0 1
78649: PPUSH
78650: LD_INT 1
78652: PPUSH
78653: CALL_OW 275
78657: PUSH
78658: LD_VAR 0 1
78662: PPUSH
78663: LD_INT 2
78665: PPUSH
78666: CALL_OW 275
78670: PUSH
78671: LD_VAR 0 1
78675: PPUSH
78676: LD_INT 3
78678: PPUSH
78679: CALL_OW 275
78683: PUSH
78684: EMPTY
78685: LIST
78686: LIST
78687: LIST
78688: ST_TO_ADDR
// end ;
78689: LD_VAR 0 2
78693: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78694: LD_INT 0
78696: PPUSH
78697: PPUSH
// result := array ;
78698: LD_ADDR_VAR 0 3
78702: PUSH
78703: LD_VAR 0 1
78707: ST_TO_ADDR
// if size >= result then
78708: LD_VAR 0 2
78712: PUSH
78713: LD_VAR 0 3
78717: GREATEREQUAL
78718: IFFALSE 78722
// exit ;
78720: GO 78772
// if size then
78722: LD_VAR 0 2
78726: IFFALSE 78772
// for i := array downto size do
78728: LD_ADDR_VAR 0 4
78732: PUSH
78733: DOUBLE
78734: LD_VAR 0 1
78738: INC
78739: ST_TO_ADDR
78740: LD_VAR 0 2
78744: PUSH
78745: FOR_DOWNTO
78746: IFFALSE 78770
// result := Delete ( result , result ) ;
78748: LD_ADDR_VAR 0 3
78752: PUSH
78753: LD_VAR 0 3
78757: PPUSH
78758: LD_VAR 0 3
78762: PPUSH
78763: CALL_OW 3
78767: ST_TO_ADDR
78768: GO 78745
78770: POP
78771: POP
// end ;
78772: LD_VAR 0 3
78776: RET
// export function ComExit ( unit ) ; var tmp ; begin
78777: LD_INT 0
78779: PPUSH
78780: PPUSH
// if not IsInUnit ( unit ) then
78781: LD_VAR 0 1
78785: PPUSH
78786: CALL_OW 310
78790: NOT
78791: IFFALSE 78795
// exit ;
78793: GO 78855
// tmp := IsInUnit ( unit ) ;
78795: LD_ADDR_VAR 0 3
78799: PUSH
78800: LD_VAR 0 1
78804: PPUSH
78805: CALL_OW 310
78809: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78810: LD_VAR 0 3
78814: PPUSH
78815: CALL_OW 247
78819: PUSH
78820: LD_INT 2
78822: EQUAL
78823: IFFALSE 78836
// ComExitVehicle ( unit ) else
78825: LD_VAR 0 1
78829: PPUSH
78830: CALL_OW 121
78834: GO 78845
// ComExitBuilding ( unit ) ;
78836: LD_VAR 0 1
78840: PPUSH
78841: CALL_OW 122
// result := tmp ;
78845: LD_ADDR_VAR 0 2
78849: PUSH
78850: LD_VAR 0 3
78854: ST_TO_ADDR
// end ;
78855: LD_VAR 0 2
78859: RET
// export function ComExitAll ( units ) ; var i ; begin
78860: LD_INT 0
78862: PPUSH
78863: PPUSH
// if not units then
78864: LD_VAR 0 1
78868: NOT
78869: IFFALSE 78873
// exit ;
78871: GO 78899
// for i in units do
78873: LD_ADDR_VAR 0 3
78877: PUSH
78878: LD_VAR 0 1
78882: PUSH
78883: FOR_IN
78884: IFFALSE 78897
// ComExit ( i ) ;
78886: LD_VAR 0 3
78890: PPUSH
78891: CALL 78777 0 1
78895: GO 78883
78897: POP
78898: POP
// end ;
78899: LD_VAR 0 2
78903: RET
// export function ResetHc ; begin
78904: LD_INT 0
78906: PPUSH
// InitHc ;
78907: CALL_OW 19
// hc_importance := 0 ;
78911: LD_ADDR_OWVAR 32
78915: PUSH
78916: LD_INT 0
78918: ST_TO_ADDR
// end ;
78919: LD_VAR 0 1
78923: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78924: LD_INT 0
78926: PPUSH
78927: PPUSH
78928: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78929: LD_ADDR_VAR 0 6
78933: PUSH
78934: LD_VAR 0 1
78938: PUSH
78939: LD_VAR 0 3
78943: PLUS
78944: PUSH
78945: LD_INT 2
78947: DIV
78948: ST_TO_ADDR
// if _x < 0 then
78949: LD_VAR 0 6
78953: PUSH
78954: LD_INT 0
78956: LESS
78957: IFFALSE 78974
// _x := _x * - 1 ;
78959: LD_ADDR_VAR 0 6
78963: PUSH
78964: LD_VAR 0 6
78968: PUSH
78969: LD_INT 1
78971: NEG
78972: MUL
78973: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78974: LD_ADDR_VAR 0 7
78978: PUSH
78979: LD_VAR 0 2
78983: PUSH
78984: LD_VAR 0 4
78988: PLUS
78989: PUSH
78990: LD_INT 2
78992: DIV
78993: ST_TO_ADDR
// if _y < 0 then
78994: LD_VAR 0 7
78998: PUSH
78999: LD_INT 0
79001: LESS
79002: IFFALSE 79019
// _y := _y * - 1 ;
79004: LD_ADDR_VAR 0 7
79008: PUSH
79009: LD_VAR 0 7
79013: PUSH
79014: LD_INT 1
79016: NEG
79017: MUL
79018: ST_TO_ADDR
// result := [ _x , _y ] ;
79019: LD_ADDR_VAR 0 5
79023: PUSH
79024: LD_VAR 0 6
79028: PUSH
79029: LD_VAR 0 7
79033: PUSH
79034: EMPTY
79035: LIST
79036: LIST
79037: ST_TO_ADDR
// end ;
79038: LD_VAR 0 5
79042: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79043: LD_INT 0
79045: PPUSH
79046: PPUSH
79047: PPUSH
79048: PPUSH
// task := GetTaskList ( unit ) ;
79049: LD_ADDR_VAR 0 7
79053: PUSH
79054: LD_VAR 0 1
79058: PPUSH
79059: CALL_OW 437
79063: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79064: LD_VAR 0 7
79068: NOT
79069: PUSH
79070: LD_VAR 0 1
79074: PPUSH
79075: LD_VAR 0 2
79079: PPUSH
79080: CALL_OW 308
79084: NOT
79085: AND
79086: IFFALSE 79090
// exit ;
79088: GO 79208
// if IsInArea ( unit , area ) then
79090: LD_VAR 0 1
79094: PPUSH
79095: LD_VAR 0 2
79099: PPUSH
79100: CALL_OW 308
79104: IFFALSE 79122
// begin ComMoveToArea ( unit , goAway ) ;
79106: LD_VAR 0 1
79110: PPUSH
79111: LD_VAR 0 3
79115: PPUSH
79116: CALL_OW 113
// exit ;
79120: GO 79208
// end ; if task [ 1 ] [ 1 ] <> M then
79122: LD_VAR 0 7
79126: PUSH
79127: LD_INT 1
79129: ARRAY
79130: PUSH
79131: LD_INT 1
79133: ARRAY
79134: PUSH
79135: LD_STRING M
79137: NONEQUAL
79138: IFFALSE 79142
// exit ;
79140: GO 79208
// x := task [ 1 ] [ 2 ] ;
79142: LD_ADDR_VAR 0 5
79146: PUSH
79147: LD_VAR 0 7
79151: PUSH
79152: LD_INT 1
79154: ARRAY
79155: PUSH
79156: LD_INT 2
79158: ARRAY
79159: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79160: LD_ADDR_VAR 0 6
79164: PUSH
79165: LD_VAR 0 7
79169: PUSH
79170: LD_INT 1
79172: ARRAY
79173: PUSH
79174: LD_INT 3
79176: ARRAY
79177: ST_TO_ADDR
// if InArea ( x , y , area ) then
79178: LD_VAR 0 5
79182: PPUSH
79183: LD_VAR 0 6
79187: PPUSH
79188: LD_VAR 0 2
79192: PPUSH
79193: CALL_OW 309
79197: IFFALSE 79208
// ComStop ( unit ) ;
79199: LD_VAR 0 1
79203: PPUSH
79204: CALL_OW 141
// end ;
79208: LD_VAR 0 4
79212: RET
// export function Abs ( value ) ; begin
79213: LD_INT 0
79215: PPUSH
// result := value ;
79216: LD_ADDR_VAR 0 2
79220: PUSH
79221: LD_VAR 0 1
79225: ST_TO_ADDR
// if value < 0 then
79226: LD_VAR 0 1
79230: PUSH
79231: LD_INT 0
79233: LESS
79234: IFFALSE 79251
// result := value * - 1 ;
79236: LD_ADDR_VAR 0 2
79240: PUSH
79241: LD_VAR 0 1
79245: PUSH
79246: LD_INT 1
79248: NEG
79249: MUL
79250: ST_TO_ADDR
// end ;
79251: LD_VAR 0 2
79255: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79256: LD_INT 0
79258: PPUSH
79259: PPUSH
79260: PPUSH
79261: PPUSH
79262: PPUSH
79263: PPUSH
79264: PPUSH
79265: PPUSH
// if not unit or not building then
79266: LD_VAR 0 1
79270: NOT
79271: PUSH
79272: LD_VAR 0 2
79276: NOT
79277: OR
79278: IFFALSE 79282
// exit ;
79280: GO 79508
// x := GetX ( building ) ;
79282: LD_ADDR_VAR 0 4
79286: PUSH
79287: LD_VAR 0 2
79291: PPUSH
79292: CALL_OW 250
79296: ST_TO_ADDR
// y := GetY ( building ) ;
79297: LD_ADDR_VAR 0 6
79301: PUSH
79302: LD_VAR 0 2
79306: PPUSH
79307: CALL_OW 251
79311: ST_TO_ADDR
// d := GetDir ( building ) ;
79312: LD_ADDR_VAR 0 8
79316: PUSH
79317: LD_VAR 0 2
79321: PPUSH
79322: CALL_OW 254
79326: ST_TO_ADDR
// r := 4 ;
79327: LD_ADDR_VAR 0 9
79331: PUSH
79332: LD_INT 4
79334: ST_TO_ADDR
// for i := 1 to 5 do
79335: LD_ADDR_VAR 0 10
79339: PUSH
79340: DOUBLE
79341: LD_INT 1
79343: DEC
79344: ST_TO_ADDR
79345: LD_INT 5
79347: PUSH
79348: FOR_TO
79349: IFFALSE 79506
// begin _x := ShiftX ( x , d , r + i ) ;
79351: LD_ADDR_VAR 0 5
79355: PUSH
79356: LD_VAR 0 4
79360: PPUSH
79361: LD_VAR 0 8
79365: PPUSH
79366: LD_VAR 0 9
79370: PUSH
79371: LD_VAR 0 10
79375: PLUS
79376: PPUSH
79377: CALL_OW 272
79381: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79382: LD_ADDR_VAR 0 7
79386: PUSH
79387: LD_VAR 0 6
79391: PPUSH
79392: LD_VAR 0 8
79396: PPUSH
79397: LD_VAR 0 9
79401: PUSH
79402: LD_VAR 0 10
79406: PLUS
79407: PPUSH
79408: CALL_OW 273
79412: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79413: LD_VAR 0 5
79417: PPUSH
79418: LD_VAR 0 7
79422: PPUSH
79423: CALL_OW 488
79427: PUSH
79428: LD_VAR 0 5
79432: PPUSH
79433: LD_VAR 0 7
79437: PPUSH
79438: CALL_OW 428
79442: PPUSH
79443: CALL_OW 247
79447: PUSH
79448: LD_INT 3
79450: PUSH
79451: LD_INT 2
79453: PUSH
79454: EMPTY
79455: LIST
79456: LIST
79457: IN
79458: NOT
79459: AND
79460: IFFALSE 79504
// begin ComMoveXY ( unit , _x , _y ) ;
79462: LD_VAR 0 1
79466: PPUSH
79467: LD_VAR 0 5
79471: PPUSH
79472: LD_VAR 0 7
79476: PPUSH
79477: CALL_OW 111
// result := [ _x , _y ] ;
79481: LD_ADDR_VAR 0 3
79485: PUSH
79486: LD_VAR 0 5
79490: PUSH
79491: LD_VAR 0 7
79495: PUSH
79496: EMPTY
79497: LIST
79498: LIST
79499: ST_TO_ADDR
// exit ;
79500: POP
79501: POP
79502: GO 79508
// end ; end ;
79504: GO 79348
79506: POP
79507: POP
// end ;
79508: LD_VAR 0 3
79512: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79513: LD_INT 0
79515: PPUSH
79516: PPUSH
79517: PPUSH
// result := 0 ;
79518: LD_ADDR_VAR 0 3
79522: PUSH
79523: LD_INT 0
79525: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79526: LD_VAR 0 1
79530: PUSH
79531: LD_INT 0
79533: LESS
79534: PUSH
79535: LD_VAR 0 1
79539: PUSH
79540: LD_INT 8
79542: GREATER
79543: OR
79544: PUSH
79545: LD_VAR 0 2
79549: PUSH
79550: LD_INT 0
79552: LESS
79553: OR
79554: PUSH
79555: LD_VAR 0 2
79559: PUSH
79560: LD_INT 8
79562: GREATER
79563: OR
79564: IFFALSE 79568
// exit ;
79566: GO 79643
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79568: LD_ADDR_VAR 0 4
79572: PUSH
79573: LD_INT 22
79575: PUSH
79576: LD_VAR 0 2
79580: PUSH
79581: EMPTY
79582: LIST
79583: LIST
79584: PPUSH
79585: CALL_OW 69
79589: PUSH
79590: FOR_IN
79591: IFFALSE 79641
// begin un := UnitShoot ( i ) ;
79593: LD_ADDR_VAR 0 5
79597: PUSH
79598: LD_VAR 0 4
79602: PPUSH
79603: CALL_OW 504
79607: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79608: LD_VAR 0 5
79612: PPUSH
79613: CALL_OW 255
79617: PUSH
79618: LD_VAR 0 1
79622: EQUAL
79623: IFFALSE 79639
// begin result := un ;
79625: LD_ADDR_VAR 0 3
79629: PUSH
79630: LD_VAR 0 5
79634: ST_TO_ADDR
// exit ;
79635: POP
79636: POP
79637: GO 79643
// end ; end ;
79639: GO 79590
79641: POP
79642: POP
// end ;
79643: LD_VAR 0 3
79647: RET
// export function GetCargoBay ( units ) ; begin
79648: LD_INT 0
79650: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79651: LD_ADDR_VAR 0 2
79655: PUSH
79656: LD_VAR 0 1
79660: PPUSH
79661: LD_INT 2
79663: PUSH
79664: LD_INT 34
79666: PUSH
79667: LD_INT 12
79669: PUSH
79670: EMPTY
79671: LIST
79672: LIST
79673: PUSH
79674: LD_INT 34
79676: PUSH
79677: LD_INT 51
79679: PUSH
79680: EMPTY
79681: LIST
79682: LIST
79683: PUSH
79684: LD_INT 34
79686: PUSH
79687: LD_INT 32
79689: PUSH
79690: EMPTY
79691: LIST
79692: LIST
79693: PUSH
79694: LD_INT 34
79696: PUSH
79697: LD_INT 89
79699: PUSH
79700: EMPTY
79701: LIST
79702: LIST
79703: PUSH
79704: EMPTY
79705: LIST
79706: LIST
79707: LIST
79708: LIST
79709: LIST
79710: PPUSH
79711: CALL_OW 72
79715: ST_TO_ADDR
// end ;
79716: LD_VAR 0 2
79720: RET
// export function Negate ( value ) ; begin
79721: LD_INT 0
79723: PPUSH
// result := not value ;
79724: LD_ADDR_VAR 0 2
79728: PUSH
79729: LD_VAR 0 1
79733: NOT
79734: ST_TO_ADDR
// end ;
79735: LD_VAR 0 2
79739: RET
// export function Inc ( value ) ; begin
79740: LD_INT 0
79742: PPUSH
// result := value + 1 ;
79743: LD_ADDR_VAR 0 2
79747: PUSH
79748: LD_VAR 0 1
79752: PUSH
79753: LD_INT 1
79755: PLUS
79756: ST_TO_ADDR
// end ;
79757: LD_VAR 0 2
79761: RET
// export function Dec ( value ) ; begin
79762: LD_INT 0
79764: PPUSH
// result := value - 1 ;
79765: LD_ADDR_VAR 0 2
79769: PUSH
79770: LD_VAR 0 1
79774: PUSH
79775: LD_INT 1
79777: MINUS
79778: ST_TO_ADDR
// end ;
79779: LD_VAR 0 2
79783: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79784: LD_INT 0
79786: PPUSH
79787: PPUSH
79788: PPUSH
79789: PPUSH
79790: PPUSH
79791: PPUSH
79792: PPUSH
79793: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79794: LD_VAR 0 1
79798: PPUSH
79799: LD_VAR 0 2
79803: PPUSH
79804: CALL_OW 488
79808: NOT
79809: PUSH
79810: LD_VAR 0 3
79814: PPUSH
79815: LD_VAR 0 4
79819: PPUSH
79820: CALL_OW 488
79824: NOT
79825: OR
79826: IFFALSE 79839
// begin result := - 1 ;
79828: LD_ADDR_VAR 0 5
79832: PUSH
79833: LD_INT 1
79835: NEG
79836: ST_TO_ADDR
// exit ;
79837: GO 80074
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79839: LD_ADDR_VAR 0 12
79843: PUSH
79844: LD_VAR 0 1
79848: PPUSH
79849: LD_VAR 0 2
79853: PPUSH
79854: LD_VAR 0 3
79858: PPUSH
79859: LD_VAR 0 4
79863: PPUSH
79864: CALL 78924 0 4
79868: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79869: LD_ADDR_VAR 0 11
79873: PUSH
79874: LD_VAR 0 1
79878: PPUSH
79879: LD_VAR 0 2
79883: PPUSH
79884: LD_VAR 0 12
79888: PUSH
79889: LD_INT 1
79891: ARRAY
79892: PPUSH
79893: LD_VAR 0 12
79897: PUSH
79898: LD_INT 2
79900: ARRAY
79901: PPUSH
79902: CALL_OW 298
79906: ST_TO_ADDR
// distance := 9999 ;
79907: LD_ADDR_VAR 0 10
79911: PUSH
79912: LD_INT 9999
79914: ST_TO_ADDR
// for i := 0 to 5 do
79915: LD_ADDR_VAR 0 6
79919: PUSH
79920: DOUBLE
79921: LD_INT 0
79923: DEC
79924: ST_TO_ADDR
79925: LD_INT 5
79927: PUSH
79928: FOR_TO
79929: IFFALSE 80072
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79931: LD_ADDR_VAR 0 7
79935: PUSH
79936: LD_VAR 0 1
79940: PPUSH
79941: LD_VAR 0 6
79945: PPUSH
79946: LD_VAR 0 11
79950: PPUSH
79951: CALL_OW 272
79955: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79956: LD_ADDR_VAR 0 8
79960: PUSH
79961: LD_VAR 0 2
79965: PPUSH
79966: LD_VAR 0 6
79970: PPUSH
79971: LD_VAR 0 11
79975: PPUSH
79976: CALL_OW 273
79980: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79981: LD_VAR 0 7
79985: PPUSH
79986: LD_VAR 0 8
79990: PPUSH
79991: CALL_OW 488
79995: NOT
79996: IFFALSE 80000
// continue ;
79998: GO 79928
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80000: LD_ADDR_VAR 0 9
80004: PUSH
80005: LD_VAR 0 12
80009: PUSH
80010: LD_INT 1
80012: ARRAY
80013: PPUSH
80014: LD_VAR 0 12
80018: PUSH
80019: LD_INT 2
80021: ARRAY
80022: PPUSH
80023: LD_VAR 0 7
80027: PPUSH
80028: LD_VAR 0 8
80032: PPUSH
80033: CALL_OW 298
80037: ST_TO_ADDR
// if tmp < distance then
80038: LD_VAR 0 9
80042: PUSH
80043: LD_VAR 0 10
80047: LESS
80048: IFFALSE 80070
// begin result := i ;
80050: LD_ADDR_VAR 0 5
80054: PUSH
80055: LD_VAR 0 6
80059: ST_TO_ADDR
// distance := tmp ;
80060: LD_ADDR_VAR 0 10
80064: PUSH
80065: LD_VAR 0 9
80069: ST_TO_ADDR
// end ; end ;
80070: GO 79928
80072: POP
80073: POP
// end ;
80074: LD_VAR 0 5
80078: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80079: LD_INT 0
80081: PPUSH
80082: PPUSH
// if not driver or not IsInUnit ( driver ) then
80083: LD_VAR 0 1
80087: NOT
80088: PUSH
80089: LD_VAR 0 1
80093: PPUSH
80094: CALL_OW 310
80098: NOT
80099: OR
80100: IFFALSE 80104
// exit ;
80102: GO 80194
// vehicle := IsInUnit ( driver ) ;
80104: LD_ADDR_VAR 0 3
80108: PUSH
80109: LD_VAR 0 1
80113: PPUSH
80114: CALL_OW 310
80118: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80119: LD_VAR 0 1
80123: PPUSH
80124: LD_STRING \
80126: PUSH
80127: LD_INT 0
80129: PUSH
80130: LD_INT 0
80132: PUSH
80133: LD_INT 0
80135: PUSH
80136: LD_INT 0
80138: PUSH
80139: LD_INT 0
80141: PUSH
80142: LD_INT 0
80144: PUSH
80145: EMPTY
80146: LIST
80147: LIST
80148: LIST
80149: LIST
80150: LIST
80151: LIST
80152: LIST
80153: PUSH
80154: LD_STRING E
80156: PUSH
80157: LD_INT 0
80159: PUSH
80160: LD_INT 0
80162: PUSH
80163: LD_VAR 0 3
80167: PUSH
80168: LD_INT 0
80170: PUSH
80171: LD_INT 0
80173: PUSH
80174: LD_INT 0
80176: PUSH
80177: EMPTY
80178: LIST
80179: LIST
80180: LIST
80181: LIST
80182: LIST
80183: LIST
80184: LIST
80185: PUSH
80186: EMPTY
80187: LIST
80188: LIST
80189: PPUSH
80190: CALL_OW 446
// end ;
80194: LD_VAR 0 2
80198: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80199: LD_INT 0
80201: PPUSH
80202: PPUSH
// if not driver or not IsInUnit ( driver ) then
80203: LD_VAR 0 1
80207: NOT
80208: PUSH
80209: LD_VAR 0 1
80213: PPUSH
80214: CALL_OW 310
80218: NOT
80219: OR
80220: IFFALSE 80224
// exit ;
80222: GO 80314
// vehicle := IsInUnit ( driver ) ;
80224: LD_ADDR_VAR 0 3
80228: PUSH
80229: LD_VAR 0 1
80233: PPUSH
80234: CALL_OW 310
80238: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80239: LD_VAR 0 1
80243: PPUSH
80244: LD_STRING \
80246: PUSH
80247: LD_INT 0
80249: PUSH
80250: LD_INT 0
80252: PUSH
80253: LD_INT 0
80255: PUSH
80256: LD_INT 0
80258: PUSH
80259: LD_INT 0
80261: PUSH
80262: LD_INT 0
80264: PUSH
80265: EMPTY
80266: LIST
80267: LIST
80268: LIST
80269: LIST
80270: LIST
80271: LIST
80272: LIST
80273: PUSH
80274: LD_STRING E
80276: PUSH
80277: LD_INT 0
80279: PUSH
80280: LD_INT 0
80282: PUSH
80283: LD_VAR 0 3
80287: PUSH
80288: LD_INT 0
80290: PUSH
80291: LD_INT 0
80293: PUSH
80294: LD_INT 0
80296: PUSH
80297: EMPTY
80298: LIST
80299: LIST
80300: LIST
80301: LIST
80302: LIST
80303: LIST
80304: LIST
80305: PUSH
80306: EMPTY
80307: LIST
80308: LIST
80309: PPUSH
80310: CALL_OW 447
// end ;
80314: LD_VAR 0 2
80318: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80319: LD_INT 0
80321: PPUSH
80322: PPUSH
80323: PPUSH
// tmp := [ ] ;
80324: LD_ADDR_VAR 0 5
80328: PUSH
80329: EMPTY
80330: ST_TO_ADDR
// for i in units do
80331: LD_ADDR_VAR 0 4
80335: PUSH
80336: LD_VAR 0 1
80340: PUSH
80341: FOR_IN
80342: IFFALSE 80380
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80344: LD_ADDR_VAR 0 5
80348: PUSH
80349: LD_VAR 0 5
80353: PPUSH
80354: LD_VAR 0 5
80358: PUSH
80359: LD_INT 1
80361: PLUS
80362: PPUSH
80363: LD_VAR 0 4
80367: PPUSH
80368: CALL_OW 256
80372: PPUSH
80373: CALL_OW 2
80377: ST_TO_ADDR
80378: GO 80341
80380: POP
80381: POP
// if not tmp then
80382: LD_VAR 0 5
80386: NOT
80387: IFFALSE 80391
// exit ;
80389: GO 80439
// if asc then
80391: LD_VAR 0 2
80395: IFFALSE 80419
// result := SortListByListAsc ( units , tmp ) else
80397: LD_ADDR_VAR 0 3
80401: PUSH
80402: LD_VAR 0 1
80406: PPUSH
80407: LD_VAR 0 5
80411: PPUSH
80412: CALL_OW 76
80416: ST_TO_ADDR
80417: GO 80439
// result := SortListByListDesc ( units , tmp ) ;
80419: LD_ADDR_VAR 0 3
80423: PUSH
80424: LD_VAR 0 1
80428: PPUSH
80429: LD_VAR 0 5
80433: PPUSH
80434: CALL_OW 77
80438: ST_TO_ADDR
// end ;
80439: LD_VAR 0 3
80443: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80444: LD_INT 0
80446: PPUSH
80447: PPUSH
// task := GetTaskList ( mech ) ;
80448: LD_ADDR_VAR 0 4
80452: PUSH
80453: LD_VAR 0 1
80457: PPUSH
80458: CALL_OW 437
80462: ST_TO_ADDR
// if not task then
80463: LD_VAR 0 4
80467: NOT
80468: IFFALSE 80472
// exit ;
80470: GO 80514
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80472: LD_ADDR_VAR 0 3
80476: PUSH
80477: LD_VAR 0 4
80481: PUSH
80482: LD_INT 1
80484: ARRAY
80485: PUSH
80486: LD_INT 1
80488: ARRAY
80489: PUSH
80490: LD_STRING r
80492: EQUAL
80493: PUSH
80494: LD_VAR 0 4
80498: PUSH
80499: LD_INT 1
80501: ARRAY
80502: PUSH
80503: LD_INT 4
80505: ARRAY
80506: PUSH
80507: LD_VAR 0 2
80511: EQUAL
80512: AND
80513: ST_TO_ADDR
// end ;
80514: LD_VAR 0 3
80518: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80519: LD_INT 0
80521: PPUSH
// SetDir ( unit , d ) ;
80522: LD_VAR 0 1
80526: PPUSH
80527: LD_VAR 0 4
80531: PPUSH
80532: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80536: LD_VAR 0 1
80540: PPUSH
80541: LD_VAR 0 2
80545: PPUSH
80546: LD_VAR 0 3
80550: PPUSH
80551: LD_VAR 0 5
80555: PPUSH
80556: CALL_OW 48
// end ;
80560: LD_VAR 0 6
80564: RET
// export function ToNaturalNumber ( number ) ; begin
80565: LD_INT 0
80567: PPUSH
// result := number div 1 ;
80568: LD_ADDR_VAR 0 2
80572: PUSH
80573: LD_VAR 0 1
80577: PUSH
80578: LD_INT 1
80580: DIV
80581: ST_TO_ADDR
// if number < 0 then
80582: LD_VAR 0 1
80586: PUSH
80587: LD_INT 0
80589: LESS
80590: IFFALSE 80600
// result := 0 ;
80592: LD_ADDR_VAR 0 2
80596: PUSH
80597: LD_INT 0
80599: ST_TO_ADDR
// end ;
80600: LD_VAR 0 2
80604: RET
// export function SortByClass ( units , class ) ; var un ; begin
80605: LD_INT 0
80607: PPUSH
80608: PPUSH
// if not units or not class then
80609: LD_VAR 0 1
80613: NOT
80614: PUSH
80615: LD_VAR 0 2
80619: NOT
80620: OR
80621: IFFALSE 80625
// exit ;
80623: GO 80720
// result := [ ] ;
80625: LD_ADDR_VAR 0 3
80629: PUSH
80630: EMPTY
80631: ST_TO_ADDR
// for un in units do
80632: LD_ADDR_VAR 0 4
80636: PUSH
80637: LD_VAR 0 1
80641: PUSH
80642: FOR_IN
80643: IFFALSE 80718
// if GetClass ( un ) = class then
80645: LD_VAR 0 4
80649: PPUSH
80650: CALL_OW 257
80654: PUSH
80655: LD_VAR 0 2
80659: EQUAL
80660: IFFALSE 80687
// result := Insert ( result , 1 , un ) else
80662: LD_ADDR_VAR 0 3
80666: PUSH
80667: LD_VAR 0 3
80671: PPUSH
80672: LD_INT 1
80674: PPUSH
80675: LD_VAR 0 4
80679: PPUSH
80680: CALL_OW 2
80684: ST_TO_ADDR
80685: GO 80716
// result := Replace ( result , result + 1 , un ) ;
80687: LD_ADDR_VAR 0 3
80691: PUSH
80692: LD_VAR 0 3
80696: PPUSH
80697: LD_VAR 0 3
80701: PUSH
80702: LD_INT 1
80704: PLUS
80705: PPUSH
80706: LD_VAR 0 4
80710: PPUSH
80711: CALL_OW 1
80715: ST_TO_ADDR
80716: GO 80642
80718: POP
80719: POP
// end ;
80720: LD_VAR 0 3
80724: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80725: LD_INT 0
80727: PPUSH
80728: PPUSH
80729: PPUSH
80730: PPUSH
80731: PPUSH
80732: PPUSH
80733: PPUSH
// result := [ ] ;
80734: LD_ADDR_VAR 0 4
80738: PUSH
80739: EMPTY
80740: ST_TO_ADDR
// if x - r < 0 then
80741: LD_VAR 0 1
80745: PUSH
80746: LD_VAR 0 3
80750: MINUS
80751: PUSH
80752: LD_INT 0
80754: LESS
80755: IFFALSE 80767
// min_x := 0 else
80757: LD_ADDR_VAR 0 8
80761: PUSH
80762: LD_INT 0
80764: ST_TO_ADDR
80765: GO 80783
// min_x := x - r ;
80767: LD_ADDR_VAR 0 8
80771: PUSH
80772: LD_VAR 0 1
80776: PUSH
80777: LD_VAR 0 3
80781: MINUS
80782: ST_TO_ADDR
// if y - r < 0 then
80783: LD_VAR 0 2
80787: PUSH
80788: LD_VAR 0 3
80792: MINUS
80793: PUSH
80794: LD_INT 0
80796: LESS
80797: IFFALSE 80809
// min_y := 0 else
80799: LD_ADDR_VAR 0 7
80803: PUSH
80804: LD_INT 0
80806: ST_TO_ADDR
80807: GO 80825
// min_y := y - r ;
80809: LD_ADDR_VAR 0 7
80813: PUSH
80814: LD_VAR 0 2
80818: PUSH
80819: LD_VAR 0 3
80823: MINUS
80824: ST_TO_ADDR
// max_x := x + r ;
80825: LD_ADDR_VAR 0 9
80829: PUSH
80830: LD_VAR 0 1
80834: PUSH
80835: LD_VAR 0 3
80839: PLUS
80840: ST_TO_ADDR
// max_y := y + r ;
80841: LD_ADDR_VAR 0 10
80845: PUSH
80846: LD_VAR 0 2
80850: PUSH
80851: LD_VAR 0 3
80855: PLUS
80856: ST_TO_ADDR
// for _x = min_x to max_x do
80857: LD_ADDR_VAR 0 5
80861: PUSH
80862: DOUBLE
80863: LD_VAR 0 8
80867: DEC
80868: ST_TO_ADDR
80869: LD_VAR 0 9
80873: PUSH
80874: FOR_TO
80875: IFFALSE 80976
// for _y = min_y to max_y do
80877: LD_ADDR_VAR 0 6
80881: PUSH
80882: DOUBLE
80883: LD_VAR 0 7
80887: DEC
80888: ST_TO_ADDR
80889: LD_VAR 0 10
80893: PUSH
80894: FOR_TO
80895: IFFALSE 80972
// begin if not ValidHex ( _x , _y ) then
80897: LD_VAR 0 5
80901: PPUSH
80902: LD_VAR 0 6
80906: PPUSH
80907: CALL_OW 488
80911: NOT
80912: IFFALSE 80916
// continue ;
80914: GO 80894
// if GetResourceTypeXY ( _x , _y ) then
80916: LD_VAR 0 5
80920: PPUSH
80921: LD_VAR 0 6
80925: PPUSH
80926: CALL_OW 283
80930: IFFALSE 80970
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80932: LD_ADDR_VAR 0 4
80936: PUSH
80937: LD_VAR 0 4
80941: PPUSH
80942: LD_VAR 0 4
80946: PUSH
80947: LD_INT 1
80949: PLUS
80950: PPUSH
80951: LD_VAR 0 5
80955: PUSH
80956: LD_VAR 0 6
80960: PUSH
80961: EMPTY
80962: LIST
80963: LIST
80964: PPUSH
80965: CALL_OW 1
80969: ST_TO_ADDR
// end ;
80970: GO 80894
80972: POP
80973: POP
80974: GO 80874
80976: POP
80977: POP
// end ;
80978: LD_VAR 0 4
80982: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80983: LD_INT 0
80985: PPUSH
80986: PPUSH
80987: PPUSH
80988: PPUSH
80989: PPUSH
80990: PPUSH
80991: PPUSH
80992: PPUSH
// if not units then
80993: LD_VAR 0 1
80997: NOT
80998: IFFALSE 81002
// exit ;
81000: GO 81526
// result := UnitFilter ( units , [ f_ok ] ) ;
81002: LD_ADDR_VAR 0 3
81006: PUSH
81007: LD_VAR 0 1
81011: PPUSH
81012: LD_INT 50
81014: PUSH
81015: EMPTY
81016: LIST
81017: PPUSH
81018: CALL_OW 72
81022: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81023: LD_ADDR_VAR 0 8
81027: PUSH
81028: LD_VAR 0 1
81032: PUSH
81033: LD_INT 1
81035: ARRAY
81036: PPUSH
81037: CALL_OW 255
81041: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81042: LD_ADDR_VAR 0 10
81046: PUSH
81047: LD_INT 29
81049: PUSH
81050: LD_INT 91
81052: PUSH
81053: LD_INT 49
81055: PUSH
81056: EMPTY
81057: LIST
81058: LIST
81059: LIST
81060: ST_TO_ADDR
// if not result then
81061: LD_VAR 0 3
81065: NOT
81066: IFFALSE 81070
// exit ;
81068: GO 81526
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81070: LD_ADDR_VAR 0 5
81074: PUSH
81075: LD_INT 81
81077: PUSH
81078: LD_VAR 0 8
81082: PUSH
81083: EMPTY
81084: LIST
81085: LIST
81086: PPUSH
81087: CALL_OW 69
81091: ST_TO_ADDR
// for i in result do
81092: LD_ADDR_VAR 0 4
81096: PUSH
81097: LD_VAR 0 3
81101: PUSH
81102: FOR_IN
81103: IFFALSE 81524
// begin tag := GetTag ( i ) + 1 ;
81105: LD_ADDR_VAR 0 9
81109: PUSH
81110: LD_VAR 0 4
81114: PPUSH
81115: CALL_OW 110
81119: PUSH
81120: LD_INT 1
81122: PLUS
81123: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
81124: LD_ADDR_VAR 0 7
81128: PUSH
81129: LD_VAR 0 4
81133: PPUSH
81134: CALL_OW 250
81138: PPUSH
81139: LD_VAR 0 4
81143: PPUSH
81144: CALL_OW 251
81148: PPUSH
81149: LD_INT 6
81151: PPUSH
81152: CALL 80725 0 3
81156: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
81157: LD_VAR 0 4
81161: PPUSH
81162: CALL_OW 247
81166: PUSH
81167: LD_INT 2
81169: EQUAL
81170: PUSH
81171: LD_VAR 0 7
81175: AND
81176: PUSH
81177: LD_VAR 0 4
81181: PPUSH
81182: CALL_OW 264
81186: PUSH
81187: LD_VAR 0 10
81191: IN
81192: NOT
81193: AND
81194: IFFALSE 81233
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81196: LD_VAR 0 4
81200: PPUSH
81201: LD_VAR 0 7
81205: PUSH
81206: LD_INT 1
81208: ARRAY
81209: PUSH
81210: LD_INT 1
81212: ARRAY
81213: PPUSH
81214: LD_VAR 0 7
81218: PUSH
81219: LD_INT 1
81221: ARRAY
81222: PUSH
81223: LD_INT 2
81225: ARRAY
81226: PPUSH
81227: CALL_OW 116
81231: GO 81522
// if path > tag then
81233: LD_VAR 0 2
81237: PUSH
81238: LD_VAR 0 9
81242: GREATER
81243: IFFALSE 81451
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81245: LD_ADDR_VAR 0 6
81249: PUSH
81250: LD_VAR 0 5
81254: PPUSH
81255: LD_INT 91
81257: PUSH
81258: LD_VAR 0 4
81262: PUSH
81263: LD_INT 8
81265: PUSH
81266: EMPTY
81267: LIST
81268: LIST
81269: LIST
81270: PPUSH
81271: CALL_OW 72
81275: ST_TO_ADDR
// if nearEnemy then
81276: LD_VAR 0 6
81280: IFFALSE 81349
// begin if GetWeapon ( i ) = ru_time_lapser then
81282: LD_VAR 0 4
81286: PPUSH
81287: CALL_OW 264
81291: PUSH
81292: LD_INT 49
81294: EQUAL
81295: IFFALSE 81323
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81297: LD_VAR 0 4
81301: PPUSH
81302: LD_VAR 0 6
81306: PPUSH
81307: LD_VAR 0 4
81311: PPUSH
81312: CALL_OW 74
81316: PPUSH
81317: CALL_OW 112
81321: GO 81347
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81323: LD_VAR 0 4
81327: PPUSH
81328: LD_VAR 0 6
81332: PPUSH
81333: LD_VAR 0 4
81337: PPUSH
81338: CALL_OW 74
81342: PPUSH
81343: CALL 82451 0 2
// end else
81347: GO 81449
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81349: LD_VAR 0 4
81353: PPUSH
81354: LD_VAR 0 2
81358: PUSH
81359: LD_VAR 0 9
81363: ARRAY
81364: PUSH
81365: LD_INT 1
81367: ARRAY
81368: PPUSH
81369: LD_VAR 0 2
81373: PUSH
81374: LD_VAR 0 9
81378: ARRAY
81379: PUSH
81380: LD_INT 2
81382: ARRAY
81383: PPUSH
81384: CALL_OW 297
81388: PUSH
81389: LD_INT 6
81391: GREATER
81392: IFFALSE 81435
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81394: LD_VAR 0 4
81398: PPUSH
81399: LD_VAR 0 2
81403: PUSH
81404: LD_VAR 0 9
81408: ARRAY
81409: PUSH
81410: LD_INT 1
81412: ARRAY
81413: PPUSH
81414: LD_VAR 0 2
81418: PUSH
81419: LD_VAR 0 9
81423: ARRAY
81424: PUSH
81425: LD_INT 2
81427: ARRAY
81428: PPUSH
81429: CALL_OW 114
81433: GO 81449
// SetTag ( i , tag ) ;
81435: LD_VAR 0 4
81439: PPUSH
81440: LD_VAR 0 9
81444: PPUSH
81445: CALL_OW 109
// end else
81449: GO 81522
// if enemy then
81451: LD_VAR 0 5
81455: IFFALSE 81522
// begin if GetWeapon ( i ) = ru_time_lapser then
81457: LD_VAR 0 4
81461: PPUSH
81462: CALL_OW 264
81466: PUSH
81467: LD_INT 49
81469: EQUAL
81470: IFFALSE 81498
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81472: LD_VAR 0 4
81476: PPUSH
81477: LD_VAR 0 5
81481: PPUSH
81482: LD_VAR 0 4
81486: PPUSH
81487: CALL_OW 74
81491: PPUSH
81492: CALL_OW 112
81496: GO 81522
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81498: LD_VAR 0 4
81502: PPUSH
81503: LD_VAR 0 5
81507: PPUSH
81508: LD_VAR 0 4
81512: PPUSH
81513: CALL_OW 74
81517: PPUSH
81518: CALL 82451 0 2
// end ; end ;
81522: GO 81102
81524: POP
81525: POP
// end ;
81526: LD_VAR 0 3
81530: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81531: LD_INT 0
81533: PPUSH
81534: PPUSH
81535: PPUSH
// if not unit or IsInUnit ( unit ) then
81536: LD_VAR 0 1
81540: NOT
81541: PUSH
81542: LD_VAR 0 1
81546: PPUSH
81547: CALL_OW 310
81551: OR
81552: IFFALSE 81556
// exit ;
81554: GO 81647
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81556: LD_ADDR_VAR 0 4
81560: PUSH
81561: LD_VAR 0 1
81565: PPUSH
81566: CALL_OW 250
81570: PPUSH
81571: LD_VAR 0 2
81575: PPUSH
81576: LD_INT 1
81578: PPUSH
81579: CALL_OW 272
81583: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81584: LD_ADDR_VAR 0 5
81588: PUSH
81589: LD_VAR 0 1
81593: PPUSH
81594: CALL_OW 251
81598: PPUSH
81599: LD_VAR 0 2
81603: PPUSH
81604: LD_INT 1
81606: PPUSH
81607: CALL_OW 273
81611: ST_TO_ADDR
// if ValidHex ( x , y ) then
81612: LD_VAR 0 4
81616: PPUSH
81617: LD_VAR 0 5
81621: PPUSH
81622: CALL_OW 488
81626: IFFALSE 81647
// ComTurnXY ( unit , x , y ) ;
81628: LD_VAR 0 1
81632: PPUSH
81633: LD_VAR 0 4
81637: PPUSH
81638: LD_VAR 0 5
81642: PPUSH
81643: CALL_OW 118
// end ;
81647: LD_VAR 0 3
81651: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81652: LD_INT 0
81654: PPUSH
81655: PPUSH
// result := false ;
81656: LD_ADDR_VAR 0 3
81660: PUSH
81661: LD_INT 0
81663: ST_TO_ADDR
// if not units then
81664: LD_VAR 0 2
81668: NOT
81669: IFFALSE 81673
// exit ;
81671: GO 81718
// for i in units do
81673: LD_ADDR_VAR 0 4
81677: PUSH
81678: LD_VAR 0 2
81682: PUSH
81683: FOR_IN
81684: IFFALSE 81716
// if See ( side , i ) then
81686: LD_VAR 0 1
81690: PPUSH
81691: LD_VAR 0 4
81695: PPUSH
81696: CALL_OW 292
81700: IFFALSE 81714
// begin result := true ;
81702: LD_ADDR_VAR 0 3
81706: PUSH
81707: LD_INT 1
81709: ST_TO_ADDR
// exit ;
81710: POP
81711: POP
81712: GO 81718
// end ;
81714: GO 81683
81716: POP
81717: POP
// end ;
81718: LD_VAR 0 3
81722: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81723: LD_INT 0
81725: PPUSH
81726: PPUSH
81727: PPUSH
81728: PPUSH
// if not unit or not points then
81729: LD_VAR 0 1
81733: NOT
81734: PUSH
81735: LD_VAR 0 2
81739: NOT
81740: OR
81741: IFFALSE 81745
// exit ;
81743: GO 81835
// dist := 99999 ;
81745: LD_ADDR_VAR 0 5
81749: PUSH
81750: LD_INT 99999
81752: ST_TO_ADDR
// for i in points do
81753: LD_ADDR_VAR 0 4
81757: PUSH
81758: LD_VAR 0 2
81762: PUSH
81763: FOR_IN
81764: IFFALSE 81833
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81766: LD_ADDR_VAR 0 6
81770: PUSH
81771: LD_VAR 0 1
81775: PPUSH
81776: LD_VAR 0 4
81780: PUSH
81781: LD_INT 1
81783: ARRAY
81784: PPUSH
81785: LD_VAR 0 4
81789: PUSH
81790: LD_INT 2
81792: ARRAY
81793: PPUSH
81794: CALL_OW 297
81798: ST_TO_ADDR
// if tmpDist < dist then
81799: LD_VAR 0 6
81803: PUSH
81804: LD_VAR 0 5
81808: LESS
81809: IFFALSE 81831
// begin result := i ;
81811: LD_ADDR_VAR 0 3
81815: PUSH
81816: LD_VAR 0 4
81820: ST_TO_ADDR
// dist := tmpDist ;
81821: LD_ADDR_VAR 0 5
81825: PUSH
81826: LD_VAR 0 6
81830: ST_TO_ADDR
// end ; end ;
81831: GO 81763
81833: POP
81834: POP
// end ;
81835: LD_VAR 0 3
81839: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81840: LD_INT 0
81842: PPUSH
// uc_side := side ;
81843: LD_ADDR_OWVAR 20
81847: PUSH
81848: LD_VAR 0 1
81852: ST_TO_ADDR
// uc_nation := 3 ;
81853: LD_ADDR_OWVAR 21
81857: PUSH
81858: LD_INT 3
81860: ST_TO_ADDR
// vc_chassis := 25 ;
81861: LD_ADDR_OWVAR 37
81865: PUSH
81866: LD_INT 25
81868: ST_TO_ADDR
// vc_engine := engine_siberite ;
81869: LD_ADDR_OWVAR 39
81873: PUSH
81874: LD_INT 3
81876: ST_TO_ADDR
// vc_control := control_computer ;
81877: LD_ADDR_OWVAR 38
81881: PUSH
81882: LD_INT 3
81884: ST_TO_ADDR
// vc_weapon := 59 ;
81885: LD_ADDR_OWVAR 40
81889: PUSH
81890: LD_INT 59
81892: ST_TO_ADDR
// result := CreateVehicle ;
81893: LD_ADDR_VAR 0 5
81897: PUSH
81898: CALL_OW 45
81902: ST_TO_ADDR
// SetDir ( result , d ) ;
81903: LD_VAR 0 5
81907: PPUSH
81908: LD_VAR 0 4
81912: PPUSH
81913: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81917: LD_VAR 0 5
81921: PPUSH
81922: LD_VAR 0 2
81926: PPUSH
81927: LD_VAR 0 3
81931: PPUSH
81932: LD_INT 0
81934: PPUSH
81935: CALL_OW 48
// end ;
81939: LD_VAR 0 5
81943: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81944: LD_INT 0
81946: PPUSH
81947: PPUSH
81948: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81949: LD_ADDR_VAR 0 2
81953: PUSH
81954: LD_INT 0
81956: PUSH
81957: LD_INT 0
81959: PUSH
81960: LD_INT 0
81962: PUSH
81963: LD_INT 0
81965: PUSH
81966: EMPTY
81967: LIST
81968: LIST
81969: LIST
81970: LIST
81971: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81972: LD_VAR 0 1
81976: NOT
81977: PUSH
81978: LD_VAR 0 1
81982: PPUSH
81983: CALL_OW 264
81987: PUSH
81988: LD_INT 12
81990: PUSH
81991: LD_INT 51
81993: PUSH
81994: LD_INT 32
81996: PUSH
81997: LD_INT 89
81999: PUSH
82000: EMPTY
82001: LIST
82002: LIST
82003: LIST
82004: LIST
82005: IN
82006: NOT
82007: OR
82008: IFFALSE 82012
// exit ;
82010: GO 82110
// for i := 1 to 3 do
82012: LD_ADDR_VAR 0 3
82016: PUSH
82017: DOUBLE
82018: LD_INT 1
82020: DEC
82021: ST_TO_ADDR
82022: LD_INT 3
82024: PUSH
82025: FOR_TO
82026: IFFALSE 82108
// begin tmp := GetCargo ( cargo , i ) ;
82028: LD_ADDR_VAR 0 4
82032: PUSH
82033: LD_VAR 0 1
82037: PPUSH
82038: LD_VAR 0 3
82042: PPUSH
82043: CALL_OW 289
82047: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82048: LD_ADDR_VAR 0 2
82052: PUSH
82053: LD_VAR 0 2
82057: PPUSH
82058: LD_VAR 0 3
82062: PPUSH
82063: LD_VAR 0 4
82067: PPUSH
82068: CALL_OW 1
82072: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82073: LD_ADDR_VAR 0 2
82077: PUSH
82078: LD_VAR 0 2
82082: PPUSH
82083: LD_INT 4
82085: PPUSH
82086: LD_VAR 0 2
82090: PUSH
82091: LD_INT 4
82093: ARRAY
82094: PUSH
82095: LD_VAR 0 4
82099: PLUS
82100: PPUSH
82101: CALL_OW 1
82105: ST_TO_ADDR
// end ;
82106: GO 82025
82108: POP
82109: POP
// end ;
82110: LD_VAR 0 2
82114: RET
// export function Length ( array ) ; begin
82115: LD_INT 0
82117: PPUSH
// result := array + 0 ;
82118: LD_ADDR_VAR 0 2
82122: PUSH
82123: LD_VAR 0 1
82127: PUSH
82128: LD_INT 0
82130: PLUS
82131: ST_TO_ADDR
// end ;
82132: LD_VAR 0 2
82136: RET
// export function PrepareArray ( array ) ; begin
82137: LD_INT 0
82139: PPUSH
// result := array diff 0 ;
82140: LD_ADDR_VAR 0 2
82144: PUSH
82145: LD_VAR 0 1
82149: PUSH
82150: LD_INT 0
82152: DIFF
82153: ST_TO_ADDR
// if not result [ 1 ] then
82154: LD_VAR 0 2
82158: PUSH
82159: LD_INT 1
82161: ARRAY
82162: NOT
82163: IFFALSE 82183
// result := Delete ( result , 1 ) ;
82165: LD_ADDR_VAR 0 2
82169: PUSH
82170: LD_VAR 0 2
82174: PPUSH
82175: LD_INT 1
82177: PPUSH
82178: CALL_OW 3
82182: ST_TO_ADDR
// end ;
82183: LD_VAR 0 2
82187: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82188: LD_INT 0
82190: PPUSH
82191: PPUSH
82192: PPUSH
82193: PPUSH
// sibRocketRange := 25 ;
82194: LD_ADDR_VAR 0 6
82198: PUSH
82199: LD_INT 25
82201: ST_TO_ADDR
// result := false ;
82202: LD_ADDR_VAR 0 4
82206: PUSH
82207: LD_INT 0
82209: ST_TO_ADDR
// for i := 0 to 5 do
82210: LD_ADDR_VAR 0 5
82214: PUSH
82215: DOUBLE
82216: LD_INT 0
82218: DEC
82219: ST_TO_ADDR
82220: LD_INT 5
82222: PUSH
82223: FOR_TO
82224: IFFALSE 82291
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82226: LD_VAR 0 1
82230: PPUSH
82231: LD_VAR 0 5
82235: PPUSH
82236: LD_VAR 0 6
82240: PPUSH
82241: CALL_OW 272
82245: PPUSH
82246: LD_VAR 0 2
82250: PPUSH
82251: LD_VAR 0 5
82255: PPUSH
82256: LD_VAR 0 6
82260: PPUSH
82261: CALL_OW 273
82265: PPUSH
82266: LD_VAR 0 3
82270: PPUSH
82271: CALL_OW 309
82275: IFFALSE 82289
// begin result := true ;
82277: LD_ADDR_VAR 0 4
82281: PUSH
82282: LD_INT 1
82284: ST_TO_ADDR
// exit ;
82285: POP
82286: POP
82287: GO 82293
// end ;
82289: GO 82223
82291: POP
82292: POP
// end ;
82293: LD_VAR 0 4
82297: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82298: LD_INT 0
82300: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82301: LD_VAR 0 1
82305: PPUSH
82306: LD_VAR 0 2
82310: PPUSH
82311: LD_INT 0
82313: PPUSH
82314: LD_INT 0
82316: PPUSH
82317: LD_INT 1
82319: PPUSH
82320: LD_INT 0
82322: PPUSH
82323: CALL_OW 587
// end ;
82327: LD_VAR 0 3
82331: RET
// export function CenterOnNow ( unit ) ; begin
82332: LD_INT 0
82334: PPUSH
// result := IsInUnit ( unit ) ;
82335: LD_ADDR_VAR 0 2
82339: PUSH
82340: LD_VAR 0 1
82344: PPUSH
82345: CALL_OW 310
82349: ST_TO_ADDR
// if not result then
82350: LD_VAR 0 2
82354: NOT
82355: IFFALSE 82367
// result := unit ;
82357: LD_ADDR_VAR 0 2
82361: PUSH
82362: LD_VAR 0 1
82366: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82367: LD_VAR 0 1
82371: PPUSH
82372: CALL_OW 87
// end ;
82376: LD_VAR 0 2
82380: RET
// export function ComMoveHex ( unit , hex ) ; begin
82381: LD_INT 0
82383: PPUSH
// if not hex then
82384: LD_VAR 0 2
82388: NOT
82389: IFFALSE 82393
// exit ;
82391: GO 82446
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82393: LD_VAR 0 2
82397: PUSH
82398: LD_INT 1
82400: ARRAY
82401: PPUSH
82402: LD_VAR 0 2
82406: PUSH
82407: LD_INT 2
82409: ARRAY
82410: PPUSH
82411: CALL_OW 428
82415: IFFALSE 82419
// exit ;
82417: GO 82446
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82419: LD_VAR 0 1
82423: PPUSH
82424: LD_VAR 0 2
82428: PUSH
82429: LD_INT 1
82431: ARRAY
82432: PPUSH
82433: LD_VAR 0 2
82437: PUSH
82438: LD_INT 2
82440: ARRAY
82441: PPUSH
82442: CALL_OW 111
// end ;
82446: LD_VAR 0 3
82450: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82451: LD_INT 0
82453: PPUSH
82454: PPUSH
82455: PPUSH
// if not unit or not enemy then
82456: LD_VAR 0 1
82460: NOT
82461: PUSH
82462: LD_VAR 0 2
82466: NOT
82467: OR
82468: IFFALSE 82472
// exit ;
82470: GO 82596
// x := GetX ( enemy ) ;
82472: LD_ADDR_VAR 0 4
82476: PUSH
82477: LD_VAR 0 2
82481: PPUSH
82482: CALL_OW 250
82486: ST_TO_ADDR
// y := GetY ( enemy ) ;
82487: LD_ADDR_VAR 0 5
82491: PUSH
82492: LD_VAR 0 2
82496: PPUSH
82497: CALL_OW 251
82501: ST_TO_ADDR
// if ValidHex ( x , y ) then
82502: LD_VAR 0 4
82506: PPUSH
82507: LD_VAR 0 5
82511: PPUSH
82512: CALL_OW 488
82516: IFFALSE 82596
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
82518: LD_VAR 0 2
82522: PPUSH
82523: CALL_OW 247
82527: PUSH
82528: LD_INT 3
82530: PUSH
82531: LD_INT 2
82533: PUSH
82534: EMPTY
82535: LIST
82536: LIST
82537: IN
82538: PUSH
82539: LD_VAR 0 1
82543: PPUSH
82544: CALL_OW 255
82548: PPUSH
82549: LD_VAR 0 2
82553: PPUSH
82554: CALL_OW 292
82558: AND
82559: IFFALSE 82577
// ComAttackUnit ( unit , enemy ) else
82561: LD_VAR 0 1
82565: PPUSH
82566: LD_VAR 0 2
82570: PPUSH
82571: CALL_OW 115
82575: GO 82596
// ComAgressiveMove ( unit , x , y ) ;
82577: LD_VAR 0 1
82581: PPUSH
82582: LD_VAR 0 4
82586: PPUSH
82587: LD_VAR 0 5
82591: PPUSH
82592: CALL_OW 114
// end ;
82596: LD_VAR 0 3
82600: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82601: LD_INT 0
82603: PPUSH
82604: PPUSH
82605: PPUSH
// list := AreaToList ( area , 0 ) ;
82606: LD_ADDR_VAR 0 5
82610: PUSH
82611: LD_VAR 0 1
82615: PPUSH
82616: LD_INT 0
82618: PPUSH
82619: CALL_OW 517
82623: ST_TO_ADDR
// if not list then
82624: LD_VAR 0 5
82628: NOT
82629: IFFALSE 82633
// exit ;
82631: GO 82763
// if all then
82633: LD_VAR 0 2
82637: IFFALSE 82725
// begin for i := 1 to list [ 1 ] do
82639: LD_ADDR_VAR 0 4
82643: PUSH
82644: DOUBLE
82645: LD_INT 1
82647: DEC
82648: ST_TO_ADDR
82649: LD_VAR 0 5
82653: PUSH
82654: LD_INT 1
82656: ARRAY
82657: PUSH
82658: FOR_TO
82659: IFFALSE 82721
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
82661: LD_ADDR_VAR 0 3
82665: PUSH
82666: LD_VAR 0 3
82670: PPUSH
82671: LD_VAR 0 3
82675: PUSH
82676: LD_INT 1
82678: PLUS
82679: PPUSH
82680: LD_VAR 0 5
82684: PUSH
82685: LD_INT 1
82687: ARRAY
82688: PUSH
82689: LD_VAR 0 4
82693: ARRAY
82694: PUSH
82695: LD_VAR 0 5
82699: PUSH
82700: LD_INT 2
82702: ARRAY
82703: PUSH
82704: LD_VAR 0 4
82708: ARRAY
82709: PUSH
82710: EMPTY
82711: LIST
82712: LIST
82713: PPUSH
82714: CALL_OW 1
82718: ST_TO_ADDR
82719: GO 82658
82721: POP
82722: POP
// exit ;
82723: GO 82763
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
82725: LD_ADDR_VAR 0 3
82729: PUSH
82730: LD_VAR 0 5
82734: PUSH
82735: LD_INT 1
82737: ARRAY
82738: PUSH
82739: LD_INT 1
82741: ARRAY
82742: PUSH
82743: LD_VAR 0 5
82747: PUSH
82748: LD_INT 2
82750: ARRAY
82751: PUSH
82752: LD_INT 1
82754: ARRAY
82755: PUSH
82756: EMPTY
82757: LIST
82758: LIST
82759: PUSH
82760: EMPTY
82761: LIST
82762: ST_TO_ADDR
// end ;
82763: LD_VAR 0 3
82767: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
82768: LD_INT 0
82770: PPUSH
82771: PPUSH
// list := AreaToList ( area , 0 ) ;
82772: LD_ADDR_VAR 0 4
82776: PUSH
82777: LD_VAR 0 1
82781: PPUSH
82782: LD_INT 0
82784: PPUSH
82785: CALL_OW 517
82789: ST_TO_ADDR
// if not list then
82790: LD_VAR 0 4
82794: NOT
82795: IFFALSE 82799
// exit ;
82797: GO 82840
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
82799: LD_ADDR_VAR 0 3
82803: PUSH
82804: LD_VAR 0 4
82808: PUSH
82809: LD_INT 1
82811: ARRAY
82812: PUSH
82813: LD_INT 1
82815: ARRAY
82816: PUSH
82817: LD_VAR 0 4
82821: PUSH
82822: LD_INT 2
82824: ARRAY
82825: PUSH
82826: LD_INT 1
82828: ARRAY
82829: PUSH
82830: LD_VAR 0 2
82834: PUSH
82835: EMPTY
82836: LIST
82837: LIST
82838: LIST
82839: ST_TO_ADDR
// end ;
82840: LD_VAR 0 3
82844: RET
// export function First ( array ) ; begin
82845: LD_INT 0
82847: PPUSH
// if not array then
82848: LD_VAR 0 1
82852: NOT
82853: IFFALSE 82857
// exit ;
82855: GO 82871
// result := array [ 1 ] ;
82857: LD_ADDR_VAR 0 2
82861: PUSH
82862: LD_VAR 0 1
82866: PUSH
82867: LD_INT 1
82869: ARRAY
82870: ST_TO_ADDR
// end ;
82871: LD_VAR 0 2
82875: RET
// export function Last ( array ) ; begin
82876: LD_INT 0
82878: PPUSH
// if not array then
82879: LD_VAR 0 1
82883: NOT
82884: IFFALSE 82888
// exit ;
82886: GO 82904
// result := array [ array ] ;
82888: LD_ADDR_VAR 0 2
82892: PUSH
82893: LD_VAR 0 1
82897: PUSH
82898: LD_VAR 0 1
82902: ARRAY
82903: ST_TO_ADDR
// end ; end_of_file
82904: LD_VAR 0 2
82908: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82909: LD_VAR 0 1
82913: PUSH
82914: LD_INT 200
82916: DOUBLE
82917: GREATEREQUAL
82918: IFFALSE 82926
82920: LD_INT 299
82922: DOUBLE
82923: LESSEQUAL
82924: IFTRUE 82928
82926: GO 82960
82928: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82929: LD_VAR 0 1
82933: PPUSH
82934: LD_VAR 0 2
82938: PPUSH
82939: LD_VAR 0 3
82943: PPUSH
82944: LD_VAR 0 4
82948: PPUSH
82949: LD_VAR 0 5
82953: PPUSH
82954: CALL 36159 0 5
82958: GO 83037
82960: LD_INT 300
82962: DOUBLE
82963: GREATEREQUAL
82964: IFFALSE 82972
82966: LD_INT 399
82968: DOUBLE
82969: LESSEQUAL
82970: IFTRUE 82974
82972: GO 83036
82974: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82975: LD_VAR 0 1
82979: PPUSH
82980: LD_VAR 0 2
82984: PPUSH
82985: LD_VAR 0 3
82989: PPUSH
82990: LD_VAR 0 4
82994: PPUSH
82995: LD_VAR 0 5
82999: PPUSH
83000: LD_VAR 0 6
83004: PPUSH
83005: LD_VAR 0 7
83009: PPUSH
83010: LD_VAR 0 8
83014: PPUSH
83015: LD_VAR 0 9
83019: PPUSH
83020: LD_VAR 0 10
83024: PPUSH
83025: LD_VAR 0 11
83029: PPUSH
83030: CALL 32484 0 11
83034: GO 83037
83036: POP
// end ;
83037: PPOPN 11
83039: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83040: LD_VAR 0 1
83044: PPUSH
83045: LD_VAR 0 2
83049: PPUSH
83050: LD_VAR 0 3
83054: PPUSH
83055: LD_VAR 0 4
83059: PPUSH
83060: LD_VAR 0 5
83064: PPUSH
83065: CALL 35895 0 5
// end ; end_of_file
83069: PPOPN 5
83071: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83072: LD_VAR 0 1
83076: PPUSH
83077: LD_VAR 0 2
83081: PPUSH
83082: LD_VAR 0 3
83086: PPUSH
83087: LD_VAR 0 4
83091: PPUSH
83092: LD_VAR 0 5
83096: PPUSH
83097: LD_VAR 0 6
83101: PPUSH
83102: CALL 20136 0 6
// end ;
83106: PPOPN 6
83108: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83109: LD_INT 0
83111: PPUSH
// begin if not units then
83112: LD_VAR 0 1
83116: NOT
83117: IFFALSE 83121
// exit ;
83119: GO 83121
// end ;
83121: PPOPN 7
83123: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83124: CALL 20040 0 0
// end ;
83128: PPOPN 1
83130: END
