// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 47
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 48
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 44
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// bonusAvalaible = 0 ;
  68: LD_ADDR_EXP 43
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// firstRussianAttack = 0 ;
  76: LD_ADDR_EXP 23
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// saveDonaldson = 0 ;
  84: LD_ADDR_EXP 24
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// frankScoutBase = 0 ;
  92: LD_ADDR_EXP 25
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// harrAnswer = 0 ;
 100: LD_ADDR_EXP 26
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 108: LD_ADDR_EXP 27
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 116: LD_ADDR_EXP 28
 120: PUSH
 121: LD_INT 18900
 123: ST_TO_ADDR
// timerStatus = 0 ;
 124: LD_ADDR_EXP 29
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// startTimer = 0 ;
 132: LD_ADDR_EXP 30
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// factoryDialog = 0 ;
 140: LD_ADDR_EXP 31
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// bunkerDialog = 0 ;
 148: LD_ADDR_EXP 32
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// energyVDialog = 0 ;
 156: LD_ADDR_EXP 33
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildOil = 0 ;
 164: LD_ADDR_EXP 34
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// buildPower = 0 ;
 172: LD_ADDR_EXP 35
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 180: LD_ADDR_EXP 36
 184: PUSH
 185: LD_INT 14
 187: PUSH
 188: LD_INT 12
 190: PUSH
 191: LD_INT 11
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_OWVAR 67
 203: ARRAY
 204: ST_TO_ADDR
// AIEnable = 1 ;
 205: LD_ADDR_EXP 37
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 213: LD_ADDR_EXP 41
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// lostCounter = 0 ;
 221: LD_ADDR_EXP 38
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// honor = 1 ;
 229: LD_ADDR_EXP 39
 233: PUSH
 234: LD_INT 1
 236: ST_TO_ADDR
// escapeAvalaible = 0 ;
 237: LD_ADDR_EXP 40
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// specAttack := false ;
 245: LD_ADDR_EXP 46
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// ruMobile := [ ] ;
 253: LD_ADDR_EXP 45
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// PrepareDifficulty ;
 260: CALL 4556 0 0
// PrepareRussianBase ;
 264: CALL 2785 0 0
// PrepareRussianCommander ;
 268: CALL 2736 0 0
// PrepareHeroes ;
 272: CALL 454 0 0
// SetBName ( ambdept0 , gamma ) ;
 276: LD_INT 4
 278: PPUSH
 279: LD_STRING gamma
 281: PPUSH
 282: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 286: LD_INT 21
 288: PPUSH
 289: LD_STRING fyodor
 291: PPUSH
 292: CALL_OW 500
// end ;
 296: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 297: LD_EXP 44
 301: PUSH
 302: LD_INT 1
 304: EQUAL
 305: IFFALSE 410
 307: GO 309
 309: DISABLE
 310: LD_INT 0
 312: PPUSH
// begin enable ;
 313: ENABLE
// fogoff ( true ) ;
 314: LD_INT 1
 316: PPUSH
 317: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 321: LD_ADDR_VAR 0 1
 325: PUSH
 326: LD_INT 22
 328: PUSH
 329: LD_INT 1
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PUSH
 336: LD_INT 21
 338: PUSH
 339: LD_INT 1
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PPUSH
 350: CALL_OW 69
 354: PUSH
 355: FOR_IN
 356: IFFALSE 372
// SetLives ( i , 1000 ) ;
 358: LD_VAR 0 1
 362: PPUSH
 363: LD_INT 1000
 365: PPUSH
 366: CALL_OW 234
 370: GO 355
 372: POP
 373: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 374: LD_INT 4
 376: PPUSH
 377: CALL_OW 274
 381: PPUSH
 382: LD_INT 1
 384: PPUSH
 385: LD_INT 9999
 387: PPUSH
 388: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 392: LD_INT 4
 394: PPUSH
 395: CALL_OW 274
 399: PPUSH
 400: LD_INT 2
 402: PPUSH
 403: LD_INT 9999
 405: PPUSH
 406: CALL_OW 277
// end ;
 410: PPOPN 1
 412: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 413: LD_INT 22
 415: PUSH
 416: LD_INT 1
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PUSH
 423: LD_INT 34
 425: PUSH
 426: LD_INT 44
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PPUSH
 437: CALL_OW 69
 441: IFFALSE 453
 443: GO 445
 445: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 446: LD_STRING ACH_GUN
 448: PPUSH
 449: CALL_OW 543
 453: END
// export function PrepareHeroes ; var i , tmp ; begin
 454: LD_INT 0
 456: PPUSH
 457: PPUSH
 458: PPUSH
// uc_side = 1 ;
 459: LD_ADDR_OWVAR 20
 463: PUSH
 464: LD_INT 1
 466: ST_TO_ADDR
// uc_nation = 1 ;
 467: LD_ADDR_OWVAR 21
 471: PUSH
 472: LD_INT 1
 474: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 475: LD_ADDR_EXP 1
 479: PUSH
 480: LD_STRING JMM
 482: PPUSH
 483: LD_INT 1
 485: PPUSH
 486: CALL 4158 0 2
 490: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 491: LD_ADDR_EXP 4
 495: PUSH
 496: LD_STRING Lisa
 498: PPUSH
 499: LD_INT 1
 501: PPUSH
 502: CALL 4158 0 2
 506: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 507: LD_ADDR_EXP 7
 511: PUSH
 512: LD_STRING Brown
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL 4158 0 2
 522: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 523: LD_ADDR_EXP 8
 527: PUSH
 528: LD_STRING Dickens
 530: PPUSH
 531: LD_INT 0
 533: PPUSH
 534: CALL 4158 0 2
 538: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 539: LD_ADDR_EXP 9
 543: PUSH
 544: LD_STRING Woodruff
 546: PPUSH
 547: LD_INT 0
 549: PPUSH
 550: CALL 4158 0 2
 554: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 555: LD_ADDR_EXP 12
 559: PUSH
 560: LD_STRING Campell
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL 4158 0 2
 570: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 571: LD_ADDR_EXP 10
 575: PUSH
 576: LD_STRING Knight
 578: PPUSH
 579: LD_INT 0
 581: PPUSH
 582: CALL 4158 0 2
 586: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 587: LD_ADDR_EXP 11
 591: PUSH
 592: LD_STRING Claptopn
 594: PPUSH
 595: LD_INT 0
 597: PPUSH
 598: CALL 4158 0 2
 602: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 603: LD_ADDR_EXP 14
 607: PUSH
 608: LD_STRING Harisson
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL 4158 0 2
 618: ST_TO_ADDR
// if Lisa = false then
 619: LD_EXP 4
 623: PUSH
 624: LD_INT 0
 626: EQUAL
 627: IFFALSE 645
// Bobby = PrepareUnit ( Bobby , true ) ;
 629: LD_ADDR_EXP 2
 633: PUSH
 634: LD_STRING Bobby
 636: PPUSH
 637: LD_INT 1
 639: PPUSH
 640: CALL 4158 0 2
 644: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 645: LD_EXP 4
 649: PUSH
 650: LD_INT 0
 652: EQUAL
 653: PUSH
 654: LD_EXP 2
 658: PUSH
 659: LD_INT 0
 661: EQUAL
 662: AND
 663: IFFALSE 681
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 665: LD_ADDR_EXP 3
 669: PUSH
 670: LD_STRING Cyrus
 672: PPUSH
 673: LD_INT 1
 675: PPUSH
 676: CALL 4158 0 2
 680: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 681: LD_EXP 4
 685: PUSH
 686: LD_INT 0
 688: EQUAL
 689: PUSH
 690: LD_EXP 2
 694: PUSH
 695: LD_INT 0
 697: EQUAL
 698: AND
 699: PUSH
 700: LD_EXP 3
 704: PUSH
 705: LD_INT 0
 707: EQUAL
 708: AND
 709: IFFALSE 808
// begin tmp = CreateCharacterSet ( 03_others ) ;
 711: LD_ADDR_VAR 0 3
 715: PUSH
 716: LD_STRING 03_others
 718: PPUSH
 719: CALL_OW 31
 723: ST_TO_ADDR
// if tmp then
 724: LD_VAR 0 3
 728: IFFALSE 785
// begin RandomBeforeMission = tmp [ 1 ] ;
 730: LD_ADDR_EXP 6
 734: PUSH
 735: LD_VAR 0 3
 739: PUSH
 740: LD_INT 1
 742: ARRAY
 743: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 744: LD_STRING 03_others
 746: PPUSH
 747: CALL_OW 40
// if tmp > 1 then
 751: LD_VAR 0 3
 755: PUSH
 756: LD_INT 1
 758: GREATER
 759: IFFALSE 783
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 761: LD_VAR 0 3
 765: PUSH
 766: LD_VAR 0 3
 770: PUSH
 771: LD_INT 1
 773: ARRAY
 774: DIFF
 775: PPUSH
 776: LD_STRING 03_others
 778: PPUSH
 779: CALL_OW 38
// end else
 783: GO 808
// begin PrepareHuman ( false , 1 , 3 ) ;
 785: LD_INT 0
 787: PPUSH
 788: LD_INT 1
 790: PPUSH
 791: LD_INT 3
 793: PPUSH
 794: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 798: LD_ADDR_EXP 6
 802: PUSH
 803: CALL_OW 44
 807: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 808: LD_ADDR_OWVAR 20
 812: PUSH
 813: LD_INT 4
 815: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 816: LD_ADDR_EXP 13
 820: PUSH
 821: LD_STRING Donaldson
 823: PPUSH
 824: LD_INT 0
 826: PPUSH
 827: CALL 4158 0 2
 831: ST_TO_ADDR
// if TestCharacters ( 03_Frank ) = true then
 832: LD_STRING 03_Frank
 834: PPUSH
 835: CALL_OW 28
 839: PUSH
 840: LD_INT 1
 842: EQUAL
 843: IFFALSE 887
// begin Frank = PrepareUnit ( 03_Frank , true ) ;
 845: LD_ADDR_EXP 5
 849: PUSH
 850: LD_STRING 03_Frank
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: CALL 4158 0 2
 860: ST_TO_ADDR
// if Frank = 0 then
 861: LD_EXP 5
 865: PUSH
 866: LD_INT 0
 868: EQUAL
 869: IFFALSE 887
// Frank = PrepareUnit ( Frank , false ) ;
 871: LD_ADDR_EXP 5
 875: PUSH
 876: LD_STRING Frank
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: CALL 4158 0 2
 886: ST_TO_ADDR
// end ; PlaceHumanInUnit ( JMM , amvj ) ;
 887: LD_EXP 1
 891: PPUSH
 892: LD_INT 32
 894: PPUSH
 895: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 899: LD_EXP 7
 903: PPUSH
 904: LD_INT 1
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 914: LD_EXP 7
 918: PPUSH
 919: LD_INT 32
 921: PPUSH
 922: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 926: LD_EXP 8
 930: PPUSH
 931: LD_INT 2
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 941: LD_EXP 9
 945: PPUSH
 946: LD_INT 2
 948: PPUSH
 949: LD_INT 0
 951: PPUSH
 952: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 956: LD_EXP 12
 960: PPUSH
 961: LD_INT 2
 963: PPUSH
 964: LD_INT 0
 966: PPUSH
 967: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 971: LD_EXP 10
 975: PPUSH
 976: LD_INT 2
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 986: LD_EXP 11
 990: PPUSH
 991: LD_INT 2
 993: PPUSH
 994: LD_INT 0
 996: PPUSH
 997: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1001: LD_EXP 4
1005: PPUSH
1006: LD_INT 2
1008: PPUSH
1009: LD_INT 0
1011: PPUSH
1012: CALL_OW 49
// if Lisa = false then
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 0
1023: EQUAL
1024: IFFALSE 1041
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1026: LD_EXP 2
1030: PPUSH
1031: LD_INT 2
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// if Lisa = false and Bobby = false then
1041: LD_EXP 4
1045: PUSH
1046: LD_INT 0
1048: EQUAL
1049: PUSH
1050: LD_EXP 2
1054: PUSH
1055: LD_INT 0
1057: EQUAL
1058: AND
1059: IFFALSE 1076
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1061: LD_EXP 3
1065: PPUSH
1066: LD_INT 2
1068: PPUSH
1069: LD_INT 0
1071: PPUSH
1072: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1076: LD_EXP 4
1080: PUSH
1081: LD_INT 0
1083: EQUAL
1084: PUSH
1085: LD_EXP 2
1089: PUSH
1090: LD_INT 0
1092: EQUAL
1093: AND
1094: PUSH
1095: LD_EXP 3
1099: PUSH
1100: LD_INT 0
1102: EQUAL
1103: AND
1104: IFFALSE 1121
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1106: LD_EXP 6
1110: PPUSH
1111: LD_INT 2
1113: PPUSH
1114: LD_INT 0
1116: PPUSH
1117: CALL_OW 49
// end ;
1121: LD_VAR 0 1
1125: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1126: LD_INT 0
1128: PPUSH
1129: PPUSH
1130: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1131: LD_EXP 13
1135: PPUSH
1136: LD_INT 10
1138: PPUSH
1139: LD_INT 0
1141: PPUSH
1142: CALL_OW 49
// if Frank then
1146: LD_EXP 5
1150: IFFALSE 1167
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1152: LD_EXP 5
1156: PPUSH
1157: LD_INT 10
1159: PPUSH
1160: LD_INT 0
1162: PPUSH
1163: CALL_OW 49
// uc_nation = 1 ;
1167: LD_ADDR_OWVAR 21
1171: PUSH
1172: LD_INT 1
1174: ST_TO_ADDR
// uc_side = 4 ;
1175: LD_ADDR_OWVAR 20
1179: PUSH
1180: LD_INT 4
1182: ST_TO_ADDR
// hc_class := 3 ;
1183: LD_ADDR_OWVAR 28
1187: PUSH
1188: LD_INT 3
1190: ST_TO_ADDR
// hc_sex := sex_male ;
1191: LD_ADDR_OWVAR 27
1195: PUSH
1196: LD_INT 1
1198: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1199: LD_ADDR_OWVAR 33
1203: PUSH
1204: LD_STRING SecondCharsGal
1206: ST_TO_ADDR
// hc_face_number := 53 ;
1207: LD_ADDR_OWVAR 34
1211: PUSH
1212: LD_INT 53
1214: ST_TO_ADDR
// hc_name := Freddie Warner ;
1215: LD_ADDR_OWVAR 26
1219: PUSH
1220: LD_STRING Freddie Warner
1222: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1223: LD_ADDR_OWVAR 29
1227: PUSH
1228: LD_INT 8
1230: PUSH
1231: LD_INT 11
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1238: LD_ADDR_OWVAR 30
1242: PUSH
1243: LD_INT 0
1245: PUSH
1246: LD_INT 0
1248: PUSH
1249: LD_INT 1
1251: PUSH
1252: LD_INT 0
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1261: LD_ADDR_OWVAR 31
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: LD_INT 0
1271: PUSH
1272: LD_INT 3
1274: PUSH
1275: LD_INT 0
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: ST_TO_ADDR
// un = CreateHuman ;
1284: LD_ADDR_VAR 0 3
1288: PUSH
1289: CALL_OW 44
1293: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1294: LD_VAR 0 3
1298: PPUSH
1299: LD_INT 10
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 49
// hc_class := 1 ;
1309: LD_ADDR_OWVAR 28
1313: PUSH
1314: LD_INT 1
1316: ST_TO_ADDR
// hc_sex := sex_male ;
1317: LD_ADDR_OWVAR 27
1321: PUSH
1322: LD_INT 1
1324: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1325: LD_ADDR_OWVAR 33
1329: PUSH
1330: LD_STRING SecondCharsGal
1332: ST_TO_ADDR
// hc_face_number := 56 ;
1333: LD_ADDR_OWVAR 34
1337: PUSH
1338: LD_INT 56
1340: ST_TO_ADDR
// hc_name := Mel Brennan ;
1341: LD_ADDR_OWVAR 26
1345: PUSH
1346: LD_STRING Mel Brennan
1348: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1349: LD_ADDR_OWVAR 29
1353: PUSH
1354: LD_INT 12
1356: PUSH
1357: LD_INT 11
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1364: LD_ADDR_OWVAR 30
1368: PUSH
1369: LD_INT 1
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: LD_INT 0
1377: PUSH
1378: LD_INT 0
1380: PUSH
1381: EMPTY
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1387: LD_ADDR_OWVAR 31
1391: PUSH
1392: LD_INT 2
1394: PUSH
1395: LD_INT 1
1397: PUSH
1398: LD_INT 1
1400: PUSH
1401: LD_INT 0
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: ST_TO_ADDR
// un = CreateHuman ;
1410: LD_ADDR_VAR 0 3
1414: PUSH
1415: CALL_OW 44
1419: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1420: LD_VAR 0 3
1424: PPUSH
1425: LD_INT 10
1427: PPUSH
1428: LD_INT 0
1430: PPUSH
1431: CALL_OW 49
// hc_class := 1 ;
1435: LD_ADDR_OWVAR 28
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// hc_sex := sex_male ;
1443: LD_ADDR_OWVAR 27
1447: PUSH
1448: LD_INT 1
1450: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1451: LD_ADDR_OWVAR 33
1455: PUSH
1456: LD_STRING AmGalRemake
1458: ST_TO_ADDR
// hc_face_number := 5 ;
1459: LD_ADDR_OWVAR 34
1463: PUSH
1464: LD_INT 5
1466: ST_TO_ADDR
// hc_name := Bob Joplin ;
1467: LD_ADDR_OWVAR 26
1471: PUSH
1472: LD_STRING Bob Joplin
1474: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1475: LD_ADDR_OWVAR 29
1479: PUSH
1480: LD_INT 10
1482: PUSH
1483: LD_INT 11
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1490: LD_ADDR_OWVAR 30
1494: PUSH
1495: LD_INT 0
1497: PUSH
1498: LD_INT 1
1500: PUSH
1501: LD_INT 1
1503: PUSH
1504: LD_INT 0
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1513: LD_ADDR_OWVAR 31
1517: PUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 1
1526: PUSH
1527: LD_INT 1
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: ST_TO_ADDR
// un = CreateHuman ;
1536: LD_ADDR_VAR 0 3
1540: PUSH
1541: CALL_OW 44
1545: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1546: LD_VAR 0 3
1550: PPUSH
1551: LD_INT 10
1553: PPUSH
1554: LD_INT 0
1556: PPUSH
1557: CALL_OW 49
// hc_class := 3 ;
1561: LD_ADDR_OWVAR 28
1565: PUSH
1566: LD_INT 3
1568: ST_TO_ADDR
// hc_sex := sex_female ;
1569: LD_ADDR_OWVAR 27
1573: PUSH
1574: LD_INT 2
1576: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1577: LD_ADDR_OWVAR 33
1581: PUSH
1582: LD_STRING AmGalRemake
1584: ST_TO_ADDR
// hc_face_number := 8 ;
1585: LD_ADDR_OWVAR 34
1589: PUSH
1590: LD_INT 8
1592: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1593: LD_ADDR_OWVAR 26
1597: PUSH
1598: LD_STRING Elizabeth Whitney
1600: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1601: LD_ADDR_OWVAR 29
1605: PUSH
1606: LD_INT 9
1608: PUSH
1609: LD_INT 11
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1616: LD_ADDR_OWVAR 30
1620: PUSH
1621: LD_INT 0
1623: PUSH
1624: LD_INT 0
1626: PUSH
1627: LD_INT 2
1629: PUSH
1630: LD_INT 0
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1639: LD_ADDR_OWVAR 31
1643: PUSH
1644: LD_INT 2
1646: PUSH
1647: LD_INT 2
1649: PUSH
1650: LD_INT 4
1652: PUSH
1653: LD_INT 2
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: ST_TO_ADDR
// un = CreateHuman ;
1662: LD_ADDR_VAR 0 3
1666: PUSH
1667: CALL_OW 44
1671: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1672: LD_VAR 0 3
1676: PPUSH
1677: LD_INT 10
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: CALL_OW 49
// InitHc ;
1687: CALL_OW 19
// end ;
1691: LD_VAR 0 1
1695: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1696: LD_INT 0
1698: PPUSH
1699: PPUSH
1700: PPUSH
1701: PPUSH
// uc_nation = 1 ;
1702: LD_ADDR_OWVAR 21
1706: PUSH
1707: LD_INT 1
1709: ST_TO_ADDR
// uc_side = 1 ;
1710: LD_ADDR_OWVAR 20
1714: PUSH
1715: LD_INT 1
1717: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1718: LD_ADDR_OWVAR 37
1722: PUSH
1723: LD_INT 2
1725: ST_TO_ADDR
// vc_engine := engine_combustion ;
1726: LD_ADDR_OWVAR 39
1730: PUSH
1731: LD_INT 1
1733: ST_TO_ADDR
// vc_control := control_manual ;
1734: LD_ADDR_OWVAR 38
1738: PUSH
1739: LD_INT 1
1741: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1742: LD_ADDR_OWVAR 41
1746: PUSH
1747: LD_INT 65
1749: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun ] [ Difficulty ] ;
1750: LD_ADDR_OWVAR 40
1754: PUSH
1755: LD_INT 5
1757: PUSH
1758: LD_INT 3
1760: PUSH
1761: LD_INT 4
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: PUSH
1769: LD_OWVAR 67
1773: ARRAY
1774: ST_TO_ADDR
// veh := CreateVehicle ;
1775: LD_ADDR_VAR 0 5
1779: PUSH
1780: CALL_OW 45
1784: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1785: LD_VAR 0 5
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1797: LD_INT 17
1799: PPUSH
1800: LD_INT 4
1802: PPUSH
1803: CALL_OW 428
1807: PUSH
1808: LD_INT 0
1810: EQUAL
1811: IFFALSE 1833
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1813: LD_VAR 0 5
1817: PPUSH
1818: LD_INT 17
1820: PPUSH
1821: LD_INT 4
1823: PPUSH
1824: LD_INT 0
1826: PPUSH
1827: CALL_OW 48
1831: GO 1851
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1833: LD_VAR 0 5
1837: PPUSH
1838: LD_INT 23
1840: PPUSH
1841: LD_INT 10
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 48
// hc_class := 1 ;
1851: LD_ADDR_OWVAR 28
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// hc_sex := sex_male ;
1859: LD_ADDR_OWVAR 27
1863: PUSH
1864: LD_INT 1
1866: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1867: LD_ADDR_OWVAR 33
1871: PUSH
1872: LD_STRING SecondCharsGal
1874: ST_TO_ADDR
// hc_face_number := 59 ;
1875: LD_ADDR_OWVAR 34
1879: PUSH
1880: LD_INT 59
1882: ST_TO_ADDR
// hc_name := Max Gray ;
1883: LD_ADDR_OWVAR 26
1887: PUSH
1888: LD_STRING Max Gray
1890: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1891: LD_ADDR_OWVAR 29
1895: PUSH
1896: LD_INT 9
1898: PUSH
1899: LD_INT 11
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1906: LD_ADDR_OWVAR 30
1910: PUSH
1911: LD_INT 1
1913: PUSH
1914: LD_INT 0
1916: PUSH
1917: LD_INT 0
1919: PUSH
1920: LD_INT 0
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1929: LD_ADDR_OWVAR 31
1933: PUSH
1934: LD_INT 2
1936: PUSH
1937: LD_INT 1
1939: PUSH
1940: LD_INT 1
1942: PUSH
1943: LD_INT 0
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: ST_TO_ADDR
// un = CreateHuman ;
1952: LD_ADDR_VAR 0 4
1956: PUSH
1957: CALL_OW 44
1961: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1962: LD_VAR 0 4
1966: PPUSH
1967: LD_INT 11
1969: PPUSH
1970: LD_INT 0
1972: PPUSH
1973: CALL_OW 49
// hc_class := 1 ;
1977: LD_ADDR_OWVAR 28
1981: PUSH
1982: LD_INT 1
1984: ST_TO_ADDR
// hc_sex := sex_male ;
1985: LD_ADDR_OWVAR 27
1989: PUSH
1990: LD_INT 1
1992: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1993: LD_ADDR_OWVAR 33
1997: PUSH
1998: LD_STRING SecondCharsGal
2000: ST_TO_ADDR
// hc_face_number := 54 ;
2001: LD_ADDR_OWVAR 34
2005: PUSH
2006: LD_INT 54
2008: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2009: LD_ADDR_OWVAR 26
2013: PUSH
2014: LD_STRING Luigi Ghbellin
2016: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2017: LD_ADDR_OWVAR 29
2021: PUSH
2022: LD_INT 11
2024: PUSH
2025: LD_INT 11
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2032: LD_ADDR_OWVAR 30
2036: PUSH
2037: LD_INT 1
2039: PUSH
2040: LD_INT 0
2042: PUSH
2043: LD_INT 0
2045: PUSH
2046: LD_INT 0
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
2055: LD_ADDR_OWVAR 31
2059: PUSH
2060: LD_INT 1
2062: PUSH
2063: LD_INT 0
2065: PUSH
2066: LD_INT 0
2068: PUSH
2069: LD_INT 1
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: ST_TO_ADDR
// un = CreateHuman ;
2078: LD_ADDR_VAR 0 4
2082: PUSH
2083: CALL_OW 44
2087: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2088: LD_VAR 0 4
2092: PPUSH
2093: LD_INT 11
2095: PPUSH
2096: LD_INT 0
2098: PPUSH
2099: CALL_OW 49
// hc_class := 3 ;
2103: LD_ADDR_OWVAR 28
2107: PUSH
2108: LD_INT 3
2110: ST_TO_ADDR
// hc_sex := sex_male ;
2111: LD_ADDR_OWVAR 27
2115: PUSH
2116: LD_INT 1
2118: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2119: LD_ADDR_OWVAR 33
2123: PUSH
2124: LD_STRING AmGalRemake
2126: ST_TO_ADDR
// hc_face_number := 6 ;
2127: LD_ADDR_OWVAR 34
2131: PUSH
2132: LD_INT 6
2134: ST_TO_ADDR
// hc_name := Leon Carter ;
2135: LD_ADDR_OWVAR 26
2139: PUSH
2140: LD_STRING Leon Carter
2142: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2143: LD_ADDR_OWVAR 29
2147: PUSH
2148: LD_INT 10
2150: PUSH
2151: LD_INT 9
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
2158: LD_ADDR_OWVAR 30
2162: PUSH
2163: LD_INT 0
2165: PUSH
2166: LD_INT 1
2168: PUSH
2169: LD_INT 1
2171: PUSH
2172: LD_INT 0
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
2181: LD_ADDR_OWVAR 31
2185: PUSH
2186: LD_INT 0
2188: PUSH
2189: LD_INT 1
2191: PUSH
2192: LD_INT 3
2194: PUSH
2195: LD_INT 0
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: ST_TO_ADDR
// un = CreateHuman ;
2204: LD_ADDR_VAR 0 4
2208: PUSH
2209: CALL_OW 44
2213: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2214: LD_VAR 0 4
2218: PPUSH
2219: LD_VAR 0 5
2223: PPUSH
2224: CALL_OW 52
// if count = 4 then
2228: LD_VAR 0 1
2232: PUSH
2233: LD_INT 4
2235: EQUAL
2236: IFFALSE 2364
// begin hc_class := 1 ;
2238: LD_ADDR_OWVAR 28
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// hc_sex := sex_male ;
2246: LD_ADDR_OWVAR 27
2250: PUSH
2251: LD_INT 1
2253: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2254: LD_ADDR_OWVAR 33
2258: PUSH
2259: LD_STRING SecondCharsGal
2261: ST_TO_ADDR
// hc_face_number := 34 ;
2262: LD_ADDR_OWVAR 34
2266: PUSH
2267: LD_INT 34
2269: ST_TO_ADDR
// hc_name := Ian Hill ;
2270: LD_ADDR_OWVAR 26
2274: PUSH
2275: LD_STRING Ian Hill
2277: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2278: LD_ADDR_OWVAR 29
2282: PUSH
2283: LD_INT 10
2285: PUSH
2286: LD_INT 12
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2293: LD_ADDR_OWVAR 30
2297: PUSH
2298: LD_INT 0
2300: PUSH
2301: LD_INT 0
2303: PUSH
2304: LD_INT 1
2306: PUSH
2307: LD_INT 0
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2316: LD_ADDR_OWVAR 31
2320: PUSH
2321: LD_INT 2
2323: PUSH
2324: LD_INT 0
2326: PUSH
2327: LD_INT 1
2329: PUSH
2330: LD_INT 0
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: ST_TO_ADDR
// un = CreateHuman ;
2339: LD_ADDR_VAR 0 4
2343: PUSH
2344: CALL_OW 44
2348: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2349: LD_VAR 0 4
2353: PPUSH
2354: LD_INT 11
2356: PPUSH
2357: LD_INT 0
2359: PPUSH
2360: CALL_OW 49
// end ; if count = 5 then
2364: LD_VAR 0 1
2368: PUSH
2369: LD_INT 5
2371: EQUAL
2372: IFFALSE 2626
// begin hc_class := 1 ;
2374: LD_ADDR_OWVAR 28
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// hc_sex := sex_male ;
2382: LD_ADDR_OWVAR 27
2386: PUSH
2387: LD_INT 1
2389: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2390: LD_ADDR_OWVAR 33
2394: PUSH
2395: LD_STRING SecondCharsGal
2397: ST_TO_ADDR
// hc_face_number := 34 ;
2398: LD_ADDR_OWVAR 34
2402: PUSH
2403: LD_INT 34
2405: ST_TO_ADDR
// hc_name := Ian Hill ;
2406: LD_ADDR_OWVAR 26
2410: PUSH
2411: LD_STRING Ian Hill
2413: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2414: LD_ADDR_OWVAR 29
2418: PUSH
2419: LD_INT 10
2421: PUSH
2422: LD_INT 12
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2429: LD_ADDR_OWVAR 30
2433: PUSH
2434: LD_INT 0
2436: PUSH
2437: LD_INT 0
2439: PUSH
2440: LD_INT 1
2442: PUSH
2443: LD_INT 0
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2452: LD_ADDR_OWVAR 31
2456: PUSH
2457: LD_INT 2
2459: PUSH
2460: LD_INT 0
2462: PUSH
2463: LD_INT 1
2465: PUSH
2466: LD_INT 0
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: ST_TO_ADDR
// un = CreateHuman ;
2475: LD_ADDR_VAR 0 4
2479: PUSH
2480: CALL_OW 44
2484: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2485: LD_VAR 0 4
2489: PPUSH
2490: LD_INT 11
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 49
// hc_class := 1 ;
2500: LD_ADDR_OWVAR 28
2504: PUSH
2505: LD_INT 1
2507: ST_TO_ADDR
// hc_sex := sex_female ;
2508: LD_ADDR_OWVAR 27
2512: PUSH
2513: LD_INT 2
2515: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2516: LD_ADDR_OWVAR 33
2520: PUSH
2521: LD_STRING SecondCharsGal
2523: ST_TO_ADDR
// hc_face_number := 41 ;
2524: LD_ADDR_OWVAR 34
2528: PUSH
2529: LD_INT 41
2531: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2532: LD_ADDR_OWVAR 26
2536: PUSH
2537: LD_STRING Kate Wadsworth
2539: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2540: LD_ADDR_OWVAR 29
2544: PUSH
2545: LD_INT 9
2547: PUSH
2548: LD_INT 9
2550: PUSH
2551: EMPTY
2552: LIST
2553: LIST
2554: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2555: LD_ADDR_OWVAR 30
2559: PUSH
2560: LD_INT 0
2562: PUSH
2563: LD_INT 2
2565: PUSH
2566: LD_INT 0
2568: PUSH
2569: LD_INT 0
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2578: LD_ADDR_OWVAR 31
2582: PUSH
2583: LD_INT 2
2585: PUSH
2586: LD_INT 3
2588: PUSH
2589: LD_INT 1
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: LIST
2600: ST_TO_ADDR
// un = CreateHuman ;
2601: LD_ADDR_VAR 0 4
2605: PUSH
2606: CALL_OW 44
2610: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2611: LD_VAR 0 4
2615: PPUSH
2616: LD_INT 11
2618: PPUSH
2619: LD_INT 0
2621: PPUSH
2622: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2626: LD_INT 11
2628: PPUSH
2629: LD_INT 22
2631: PUSH
2632: LD_INT 1
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PUSH
2639: LD_INT 21
2641: PUSH
2642: LD_INT 1
2644: PUSH
2645: EMPTY
2646: LIST
2647: LIST
2648: PUSH
2649: LD_INT 26
2651: PUSH
2652: LD_INT 1
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: LIST
2663: PPUSH
2664: CALL_OW 70
2668: PUSH
2669: LD_INT 1
2671: ARRAY
2672: PPUSH
2673: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2677: LD_INT 11
2679: PPUSH
2680: LD_INT 22
2682: PUSH
2683: LD_INT 1
2685: PUSH
2686: EMPTY
2687: LIST
2688: LIST
2689: PUSH
2690: LD_INT 21
2692: PUSH
2693: LD_INT 1
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 26
2702: PUSH
2703: LD_INT 1
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: EMPTY
2711: LIST
2712: LIST
2713: LIST
2714: PPUSH
2715: CALL_OW 70
2719: PUSH
2720: LD_INT 1
2722: ARRAY
2723: PPUSH
2724: LD_STRING D6-Sol3-1
2726: PPUSH
2727: CALL_OW 88
// end ; end_of_file
2731: LD_VAR 0 2
2735: RET
// export function PrepareRussianCommander ; begin
2736: LD_INT 0
2738: PPUSH
// uc_side = 3 ;
2739: LD_ADDR_OWVAR 20
2743: PUSH
2744: LD_INT 3
2746: ST_TO_ADDR
// uc_nation = 3 ;
2747: LD_ADDR_OWVAR 21
2751: PUSH
2752: LD_INT 3
2754: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2755: LD_ADDR_EXP 15
2759: PUSH
2760: LD_STRING Stolypin
2762: PPUSH
2763: CALL_OW 25
2767: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2768: LD_EXP 15
2772: PPUSH
2773: LD_INT 21
2775: PPUSH
2776: CALL_OW 52
// end ;
2780: LD_VAR 0 1
2784: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2785: LD_INT 0
2787: PPUSH
2788: PPUSH
2789: PPUSH
2790: PPUSH
// if Difficulty > 1 then
2791: LD_OWVAR 67
2795: PUSH
2796: LD_INT 1
2798: GREATER
2799: IFFALSE 2909
// begin uc_side := 3 ;
2801: LD_ADDR_OWVAR 20
2805: PUSH
2806: LD_INT 3
2808: ST_TO_ADDR
// uc_nation := 3 ;
2809: LD_ADDR_OWVAR 21
2813: PUSH
2814: LD_INT 3
2816: ST_TO_ADDR
// InitHc ;
2817: CALL_OW 19
// InitBc ;
2821: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
2825: LD_INT 0
2827: PPUSH
2828: LD_INT 1
2830: PPUSH
2831: LD_INT 4
2833: PPUSH
2834: CALL_OW 380
// bc_type := b_breastwork ;
2838: LD_ADDR_OWVAR 42
2842: PUSH
2843: LD_INT 31
2845: ST_TO_ADDR
// bc_level := 4 ;
2846: LD_ADDR_OWVAR 43
2850: PUSH
2851: LD_INT 4
2853: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
2854: LD_ADDR_VAR 0 3
2858: PUSH
2859: LD_INT 100
2861: PPUSH
2862: LD_INT 58
2864: PPUSH
2865: LD_INT 2
2867: PPUSH
2868: CALL_OW 47
2872: ST_TO_ADDR
// un := CreateHuman ;
2873: LD_ADDR_VAR 0 4
2877: PUSH
2878: CALL_OW 44
2882: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2883: LD_VAR 0 4
2887: PPUSH
2888: LD_INT 5
2890: PPUSH
2891: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
2895: LD_VAR 0 4
2899: PPUSH
2900: LD_VAR 0 3
2904: PPUSH
2905: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
2909: LD_INT 3
2911: PPUSH
2912: LD_INT 3
2914: PPUSH
2915: LD_INT 22
2917: PPUSH
2918: LD_EXP 16
2922: PPUSH
2923: LD_EXP 17
2927: PPUSH
2928: CALL_OW 12
2932: PPUSH
2933: LD_INT 1
2935: PPUSH
2936: LD_INT 3
2938: PUSH
2939: LD_INT 4
2941: PUSH
2942: LD_INT 5
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: LIST
2949: PUSH
2950: LD_OWVAR 67
2954: ARRAY
2955: PPUSH
2956: CALL 4221 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2960: LD_INT 3
2962: PPUSH
2963: LD_INT 3
2965: PPUSH
2966: LD_INT 21
2968: PPUSH
2969: LD_EXP 16
2973: PPUSH
2974: LD_EXP 17
2978: PPUSH
2979: CALL_OW 12
2983: PPUSH
2984: LD_INT 2
2986: PPUSH
2987: LD_INT 3
2989: PPUSH
2990: CALL 4221 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
2994: LD_INT 3
2996: PPUSH
2997: LD_INT 3
2999: PPUSH
3000: LD_INT 1
3002: PPUSH
3003: LD_EXP 16
3007: PPUSH
3008: LD_EXP 17
3012: PPUSH
3013: CALL_OW 12
3017: PPUSH
3018: LD_INT 4
3020: PPUSH
3021: LD_INT 3
3023: PPUSH
3024: CALL 4221 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3028: LD_INT 3
3030: PPUSH
3031: LD_INT 3
3033: PPUSH
3034: LD_INT 24
3036: PPUSH
3037: LD_EXP 16
3041: PPUSH
3042: LD_EXP 17
3046: PPUSH
3047: CALL_OW 12
3051: PPUSH
3052: LD_INT 3
3054: PPUSH
3055: LD_INT 5
3057: PPUSH
3058: CALL 4221 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3062: LD_ADDR_VAR 0 2
3066: PUSH
3067: LD_INT 22
3069: PUSH
3070: LD_INT 3
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PUSH
3077: LD_INT 30
3079: PUSH
3080: LD_INT 32
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: PPUSH
3091: CALL_OW 69
3095: PUSH
3096: FOR_IN
3097: IFFALSE 3137
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3099: LD_INT 3
3101: PPUSH
3102: LD_INT 3
3104: PPUSH
3105: LD_VAR 0 2
3109: PPUSH
3110: LD_EXP 16
3114: PPUSH
3115: LD_EXP 17
3119: PPUSH
3120: CALL_OW 12
3124: PPUSH
3125: LD_INT 1
3127: PPUSH
3128: LD_INT 1
3130: PPUSH
3131: CALL 4221 0 6
3135: GO 3096
3137: POP
3138: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3139: LD_ADDR_VAR 0 2
3143: PUSH
3144: LD_INT 22
3146: PUSH
3147: LD_INT 3
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 30
3156: PUSH
3157: LD_INT 31
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PPUSH
3168: CALL_OW 69
3172: PUSH
3173: FOR_IN
3174: IFFALSE 3202
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3176: LD_EXP 16
3180: PPUSH
3181: LD_EXP 17
3185: PPUSH
3186: CALL_OW 12
3190: PPUSH
3191: LD_VAR 0 2
3195: PPUSH
3196: CALL 4331 0 2
3200: GO 3173
3202: POP
3203: POP
// end ;
3204: LD_VAR 0 1
3208: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3209: LD_INT 0
3211: PPUSH
3212: PPUSH
3213: PPUSH
3214: PPUSH
// uc_side = 6 ;
3215: LD_ADDR_OWVAR 20
3219: PUSH
3220: LD_INT 6
3222: ST_TO_ADDR
// uc_nation = 3 ;
3223: LD_ADDR_OWVAR 21
3227: PUSH
3228: LD_INT 3
3230: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: DOUBLE
3237: LD_INT 1
3239: DEC
3240: ST_TO_ADDR
3241: LD_INT 1
3243: PUSH
3244: LD_INT 2
3246: PUSH
3247: LD_INT 1
3249: PPUSH
3250: LD_INT 2
3252: PPUSH
3253: CALL_OW 12
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: LIST
3262: PUSH
3263: LD_OWVAR 67
3267: ARRAY
3268: PUSH
3269: FOR_TO
3270: IFFALSE 3430
// begin vc_engine = 1 ;
3272: LD_ADDR_OWVAR 39
3276: PUSH
3277: LD_INT 1
3279: ST_TO_ADDR
// vc_control = 1 ;
3280: LD_ADDR_OWVAR 38
3284: PUSH
3285: LD_INT 1
3287: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
3288: LD_ADDR_OWVAR 40
3292: PUSH
3293: LD_INT 42
3295: PUSH
3296: LD_INT 42
3298: PUSH
3299: LD_INT 43
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: LIST
3306: PUSH
3307: LD_OWVAR 67
3311: ARRAY
3312: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
3313: LD_ADDR_OWVAR 37
3317: PUSH
3318: LD_INT 21
3320: PUSH
3321: LD_INT 22
3323: PUSH
3324: LD_INT 22
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: LIST
3331: PUSH
3332: LD_OWVAR 67
3336: ARRAY
3337: ST_TO_ADDR
// veh = CreateVehicle ;
3338: LD_ADDR_VAR 0 3
3342: PUSH
3343: CALL_OW 45
3347: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3348: LD_VAR 0 3
3352: PPUSH
3353: LD_INT 3
3355: PPUSH
3356: LD_INT 0
3358: PPUSH
3359: CALL_OW 49
// hc_gallery =  ;
3363: LD_ADDR_OWVAR 33
3367: PUSH
3368: LD_STRING 
3370: ST_TO_ADDR
// hc_name =  ;
3371: LD_ADDR_OWVAR 26
3375: PUSH
3376: LD_STRING 
3378: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3379: LD_INT 0
3381: PPUSH
3382: LD_INT 3
3384: PPUSH
3385: LD_EXP 16
3389: PPUSH
3390: LD_EXP 17
3394: PPUSH
3395: CALL_OW 12
3399: PPUSH
3400: CALL_OW 380
// un = CreateHuman ;
3404: LD_ADDR_VAR 0 4
3408: PUSH
3409: CALL_OW 44
3413: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3414: LD_VAR 0 4
3418: PPUSH
3419: LD_VAR 0 3
3423: PPUSH
3424: CALL_OW 52
// end ;
3428: GO 3269
3430: POP
3431: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3432: LD_INT 0
3434: PPUSH
3435: LD_INT 2
3437: PPUSH
3438: LD_EXP 16
3442: PPUSH
3443: LD_EXP 17
3447: PPUSH
3448: CALL_OW 12
3452: PUSH
3453: LD_INT 2
3455: PLUS
3456: PPUSH
3457: CALL_OW 380
// un = CreateHuman ;
3461: LD_ADDR_VAR 0 4
3465: PUSH
3466: CALL_OW 44
3470: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3471: LD_VAR 0 4
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3486: LD_INT 0
3488: PPUSH
3489: LD_INT 4
3491: PPUSH
3492: LD_EXP 16
3496: PPUSH
3497: LD_EXP 17
3501: PPUSH
3502: CALL_OW 12
3506: PUSH
3507: LD_INT 2
3509: PLUS
3510: PPUSH
3511: CALL_OW 380
// un = CreateHuman ;
3515: LD_ADDR_VAR 0 4
3519: PUSH
3520: CALL_OW 44
3524: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3525: LD_VAR 0 4
3529: PPUSH
3530: LD_INT 3
3532: PPUSH
3533: LD_INT 0
3535: PPUSH
3536: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3540: LD_ADDR_VAR 0 2
3544: PUSH
3545: DOUBLE
3546: LD_INT 1
3548: DEC
3549: ST_TO_ADDR
3550: LD_INT 2
3552: PUSH
3553: LD_INT 3
3555: PUSH
3556: LD_INT 3
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: PUSH
3564: LD_OWVAR 67
3568: ARRAY
3569: PUSH
3570: LD_INT 1
3572: PPUSH
3573: LD_INT 3
3575: PPUSH
3576: CALL_OW 12
3580: PLUS
3581: PUSH
3582: FOR_TO
3583: IFFALSE 3653
// begin hc_gallery =  ;
3585: LD_ADDR_OWVAR 33
3589: PUSH
3590: LD_STRING 
3592: ST_TO_ADDR
// hc_name =  ;
3593: LD_ADDR_OWVAR 26
3597: PUSH
3598: LD_STRING 
3600: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3601: LD_INT 0
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_EXP 16
3611: PPUSH
3612: LD_EXP 17
3616: PPUSH
3617: CALL_OW 12
3621: PPUSH
3622: CALL_OW 380
// un = CreateHuman ;
3626: LD_ADDR_VAR 0 4
3630: PUSH
3631: CALL_OW 44
3635: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3636: LD_VAR 0 4
3640: PPUSH
3641: LD_INT 3
3643: PPUSH
3644: LD_INT 0
3646: PPUSH
3647: CALL_OW 49
// end ;
3651: GO 3582
3653: POP
3654: POP
// vc_engine = 1 ;
3655: LD_ADDR_OWVAR 39
3659: PUSH
3660: LD_INT 1
3662: ST_TO_ADDR
// vc_control = 1 ;
3663: LD_ADDR_OWVAR 38
3667: PUSH
3668: LD_INT 1
3670: ST_TO_ADDR
// vc_weapon = 51 ;
3671: LD_ADDR_OWVAR 40
3675: PUSH
3676: LD_INT 51
3678: ST_TO_ADDR
// vc_chassis = 22 ;
3679: LD_ADDR_OWVAR 37
3683: PUSH
3684: LD_INT 22
3686: ST_TO_ADDR
// veh = CreateVehicle ;
3687: LD_ADDR_VAR 0 3
3691: PUSH
3692: CALL_OW 45
3696: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3697: LD_VAR 0 3
3701: PPUSH
3702: LD_INT 3
3704: PPUSH
3705: LD_INT 0
3707: PPUSH
3708: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3712: LD_VAR 0 3
3716: PPUSH
3717: LD_INT 1
3719: PPUSH
3720: LD_INT 100
3722: PPUSH
3723: CALL_OW 290
// hc_gallery =  ;
3727: LD_ADDR_OWVAR 33
3731: PUSH
3732: LD_STRING 
3734: ST_TO_ADDR
// hc_name =  ;
3735: LD_ADDR_OWVAR 26
3739: PUSH
3740: LD_STRING 
3742: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3743: LD_INT 0
3745: PPUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_EXP 16
3753: PPUSH
3754: LD_EXP 17
3758: PPUSH
3759: CALL_OW 12
3763: PPUSH
3764: CALL_OW 380
// un = CreateHuman ;
3768: LD_ADDR_VAR 0 4
3772: PUSH
3773: CALL_OW 44
3777: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3778: LD_VAR 0 4
3782: PPUSH
3783: LD_VAR 0 3
3787: PPUSH
3788: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3792: LD_ADDR_VAR 0 2
3796: PUSH
3797: LD_INT 22
3799: PUSH
3800: LD_INT 6
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PUSH
3807: LD_INT 1
3809: PUSH
3810: LD_INT 3
3812: PUSH
3813: LD_INT 25
3815: PUSH
3816: LD_INT 2
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 3
3829: PUSH
3830: LD_INT 25
3832: PUSH
3833: LD_INT 4
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PPUSH
3853: CALL_OW 69
3857: PUSH
3858: FOR_IN
3859: IFFALSE 3878
// ComAgressiveMove ( i , 45 , 46 ) ;
3861: LD_VAR 0 2
3865: PPUSH
3866: LD_INT 45
3868: PPUSH
3869: LD_INT 46
3871: PPUSH
3872: CALL_OW 114
3876: GO 3858
3878: POP
3879: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3880: LD_ADDR_VAR 0 2
3884: PUSH
3885: LD_INT 22
3887: PUSH
3888: LD_INT 6
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: LD_INT 25
3897: PUSH
3898: LD_INT 2
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: PPUSH
3909: CALL_OW 69
3913: PUSH
3914: FOR_IN
3915: IFFALSE 3946
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3917: LD_ADDR_EXP 21
3921: PUSH
3922: LD_VAR 0 2
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: LD_INT 48
3932: PPUSH
3933: LD_INT 55
3935: PPUSH
3936: LD_INT 5
3938: PPUSH
3939: CALL_OW 145
3943: ST_TO_ADDR
3944: GO 3914
3946: POP
3947: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3948: LD_ADDR_VAR 0 2
3952: PUSH
3953: LD_INT 22
3955: PUSH
3956: LD_INT 6
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PUSH
3963: LD_INT 25
3965: PUSH
3966: LD_INT 4
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PPUSH
3977: CALL_OW 69
3981: PUSH
3982: FOR_IN
3983: IFFALSE 4002
// ComMoveXY ( i , 39 , 55 ) ;
3985: LD_VAR 0 2
3989: PPUSH
3990: LD_INT 39
3992: PPUSH
3993: LD_INT 55
3995: PPUSH
3996: CALL_OW 111
4000: GO 3982
4002: POP
4003: POP
// end ;
4004: LD_VAR 0 1
4008: RET
// export function PrepareFirstAttack ; var i , un ; begin
4009: LD_INT 0
4011: PPUSH
4012: PPUSH
4013: PPUSH
// uc_side = 5 ;
4014: LD_ADDR_OWVAR 20
4018: PUSH
4019: LD_INT 5
4021: ST_TO_ADDR
// uc_nation = 3 ;
4022: LD_ADDR_OWVAR 21
4026: PUSH
4027: LD_INT 3
4029: ST_TO_ADDR
// for i := 1 to 4 do
4030: LD_ADDR_VAR 0 2
4034: PUSH
4035: DOUBLE
4036: LD_INT 1
4038: DEC
4039: ST_TO_ADDR
4040: LD_INT 4
4042: PUSH
4043: FOR_TO
4044: IFFALSE 4143
// begin hc_gallery =  ;
4046: LD_ADDR_OWVAR 33
4050: PUSH
4051: LD_STRING 
4053: ST_TO_ADDR
// hc_name =  ;
4054: LD_ADDR_OWVAR 26
4058: PUSH
4059: LD_STRING 
4061: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4062: LD_INT 0
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: LD_EXP 16
4072: PPUSH
4073: LD_EXP 17
4077: PPUSH
4078: CALL_OW 12
4082: PPUSH
4083: CALL_OW 380
// un = CreateHuman ;
4087: LD_ADDR_VAR 0 3
4091: PUSH
4092: CALL_OW 44
4096: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4097: LD_VAR 0 3
4101: PPUSH
4102: LD_INT 4
4104: PPUSH
4105: LD_INT 0
4107: PPUSH
4108: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4112: LD_VAR 0 3
4116: PPUSH
4117: LD_EXP 1
4121: PPUSH
4122: CALL_OW 250
4126: PPUSH
4127: LD_EXP 1
4131: PPUSH
4132: CALL_OW 251
4136: PPUSH
4137: CALL_OW 114
// end ;
4141: GO 4043
4143: POP
4144: POP
// firstRussianAttack = 1 ;
4145: LD_ADDR_EXP 23
4149: PUSH
4150: LD_INT 1
4152: ST_TO_ADDR
// end ; end_of_file
4153: LD_VAR 0 1
4157: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4158: LD_INT 0
4160: PPUSH
4161: PPUSH
// if exist_mode then
4162: LD_VAR 0 2
4166: IFFALSE 4191
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
4168: LD_ADDR_VAR 0 4
4172: PUSH
4173: LD_EXP 48
4177: PUSH
4178: LD_VAR 0 1
4182: STR
4183: PPUSH
4184: CALL_OW 34
4188: ST_TO_ADDR
// end else
4189: GO 4206
// begin unit := NewCharacter ( ident ) ;
4191: LD_ADDR_VAR 0 4
4195: PUSH
4196: LD_VAR 0 1
4200: PPUSH
4201: CALL_OW 25
4205: ST_TO_ADDR
// end ; result := unit ;
4206: LD_ADDR_VAR 0 3
4210: PUSH
4211: LD_VAR 0 4
4215: ST_TO_ADDR
// end ;
4216: LD_VAR 0 3
4220: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4221: LD_INT 0
4223: PPUSH
4224: PPUSH
4225: PPUSH
4226: PPUSH
// for i = 1 to count do
4227: LD_ADDR_VAR 0 8
4231: PUSH
4232: DOUBLE
4233: LD_INT 1
4235: DEC
4236: ST_TO_ADDR
4237: LD_VAR 0 6
4241: PUSH
4242: FOR_TO
4243: IFFALSE 4324
// begin uc_side = side ;
4245: LD_ADDR_OWVAR 20
4249: PUSH
4250: LD_VAR 0 1
4254: ST_TO_ADDR
// uc_nation = nation ;
4255: LD_ADDR_OWVAR 21
4259: PUSH
4260: LD_VAR 0 2
4264: ST_TO_ADDR
// hc_gallery =  ;
4265: LD_ADDR_OWVAR 33
4269: PUSH
4270: LD_STRING 
4272: ST_TO_ADDR
// hc_name =  ;
4273: LD_ADDR_OWVAR 26
4277: PUSH
4278: LD_STRING 
4280: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4281: LD_INT 0
4283: PPUSH
4284: LD_VAR 0 5
4288: PPUSH
4289: LD_VAR 0 4
4293: PPUSH
4294: CALL_OW 380
// un = CreateHuman ;
4298: LD_ADDR_VAR 0 10
4302: PUSH
4303: CALL_OW 44
4307: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4308: LD_VAR 0 10
4312: PPUSH
4313: LD_VAR 0 3
4317: PPUSH
4318: CALL_OW 52
// end ;
4322: GO 4242
4324: POP
4325: POP
// end ;
4326: LD_VAR 0 7
4330: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4331: LD_INT 0
4333: PPUSH
4334: PPUSH
4335: PPUSH
// uc_side := GetSide ( b ) ;
4336: LD_ADDR_OWVAR 20
4340: PUSH
4341: LD_VAR 0 2
4345: PPUSH
4346: CALL_OW 255
4350: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4351: LD_ADDR_OWVAR 21
4355: PUSH
4356: LD_VAR 0 2
4360: PPUSH
4361: CALL_OW 248
4365: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4366: LD_INT 0
4368: PPUSH
4369: LD_INT 1
4371: PPUSH
4372: LD_VAR 0 1
4376: PPUSH
4377: CALL_OW 380
// un = CreateHuman ;
4381: LD_ADDR_VAR 0 4
4385: PUSH
4386: CALL_OW 44
4390: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4391: LD_ADDR_VAR 0 5
4395: PUSH
4396: LD_VAR 0 2
4400: PPUSH
4401: CALL_OW 254
4405: PUSH
4406: LD_INT 3
4408: MINUS
4409: ST_TO_ADDR
// if dir < 0 then
4410: LD_VAR 0 5
4414: PUSH
4415: LD_INT 0
4417: LESS
4418: IFFALSE 4434
// dir := 6 + dir ;
4420: LD_ADDR_VAR 0 5
4424: PUSH
4425: LD_INT 6
4427: PUSH
4428: LD_VAR 0 5
4432: PLUS
4433: ST_TO_ADDR
// SetDir ( un , dir ) ;
4434: LD_VAR 0 4
4438: PPUSH
4439: LD_VAR 0 5
4443: PPUSH
4444: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4448: LD_VAR 0 4
4452: PPUSH
4453: LD_VAR 0 2
4457: PPUSH
4458: CALL_OW 52
// end ;
4462: LD_VAR 0 3
4466: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4467: LD_INT 0
4469: PPUSH
4470: PPUSH
4471: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4472: LD_ADDR_VAR 0 6
4476: PUSH
4477: LD_VAR 0 1
4481: PUSH
4482: LD_INT 1
4484: PPUSH
4485: LD_VAR 0 1
4489: PPUSH
4490: CALL_OW 12
4494: ARRAY
4495: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4496: LD_VAR 0 6
4500: PPUSH
4501: CALL_OW 258
4505: PUSH
4506: LD_INT 1
4508: EQUAL
4509: IFFALSE 4527
// Say ( speaker , dialogMID ) else
4511: LD_VAR 0 6
4515: PPUSH
4516: LD_VAR 0 2
4520: PPUSH
4521: CALL_OW 88
4525: GO 4541
// Say ( speaker , dialogFID ) ;
4527: LD_VAR 0 6
4531: PPUSH
4532: LD_VAR 0 3
4536: PPUSH
4537: CALL_OW 88
// result := speaker ;
4541: LD_ADDR_VAR 0 4
4545: PUSH
4546: LD_VAR 0 6
4550: ST_TO_ADDR
// end ;
4551: LD_VAR 0 4
4555: RET
// export function PrepareDifficulty ; var tmp ; begin
4556: LD_INT 0
4558: PPUSH
4559: PPUSH
// if Difficulty = 1 then
4560: LD_OWVAR 67
4564: PUSH
4565: LD_INT 1
4567: EQUAL
4568: IFFALSE 4586
// begin RuSoldMinLevel = 1 ;
4570: LD_ADDR_EXP 16
4574: PUSH
4575: LD_INT 1
4577: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4578: LD_ADDR_EXP 17
4582: PUSH
4583: LD_INT 3
4585: ST_TO_ADDR
// end ; if Difficulty = 2 then
4586: LD_OWVAR 67
4590: PUSH
4591: LD_INT 2
4593: EQUAL
4594: IFFALSE 4695
// begin RuSoldMinLevel = 2 ;
4596: LD_ADDR_EXP 16
4600: PUSH
4601: LD_INT 2
4603: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4604: LD_ADDR_EXP 17
4608: PUSH
4609: LD_INT 4
4611: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4612: LD_INT 23
4614: PPUSH
4615: CALL_OW 64
// uc_nation = 3 ;
4619: LD_ADDR_OWVAR 21
4623: PUSH
4624: LD_INT 3
4626: ST_TO_ADDR
// uc_side = 3 ;
4627: LD_ADDR_OWVAR 20
4631: PUSH
4632: LD_INT 3
4634: ST_TO_ADDR
// bc_level = 5 ;
4635: LD_ADDR_OWVAR 43
4639: PUSH
4640: LD_INT 5
4642: ST_TO_ADDR
// bc_type = 32 ;
4643: LD_ADDR_OWVAR 42
4647: PUSH
4648: LD_INT 32
4650: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4651: LD_ADDR_VAR 0 2
4655: PUSH
4656: LD_INT 76
4658: PPUSH
4659: LD_INT 91
4661: PPUSH
4662: LD_INT 2
4664: PPUSH
4665: CALL_OW 47
4669: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4670: LD_VAR 0 2
4674: PPUSH
4675: LD_INT 43
4677: PPUSH
4678: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4682: LD_INT 51
4684: PPUSH
4685: LD_INT 3
4687: PPUSH
4688: LD_INT 1
4690: PPUSH
4691: CALL_OW 322
// end ; if Difficulty = 3 then
4695: LD_OWVAR 67
4699: PUSH
4700: LD_INT 3
4702: EQUAL
4703: IFFALSE 4865
// begin RuSoldMinLevel = 3 ;
4705: LD_ADDR_EXP 16
4709: PUSH
4710: LD_INT 3
4712: ST_TO_ADDR
// RuSoldMaxLevel = 5 ;
4713: LD_ADDR_EXP 17
4717: PUSH
4718: LD_INT 5
4720: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4721: LD_INT 26
4723: PPUSH
4724: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4728: LD_INT 23
4730: PPUSH
4731: CALL_OW 64
// uc_nation = 3 ;
4735: LD_ADDR_OWVAR 21
4739: PUSH
4740: LD_INT 3
4742: ST_TO_ADDR
// uc_side = 3 ;
4743: LD_ADDR_OWVAR 20
4747: PUSH
4748: LD_INT 3
4750: ST_TO_ADDR
// bc_level = 5 ;
4751: LD_ADDR_OWVAR 43
4755: PUSH
4756: LD_INT 5
4758: ST_TO_ADDR
// bc_type = 32 ;
4759: LD_ADDR_OWVAR 42
4763: PUSH
4764: LD_INT 32
4766: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4767: LD_ADDR_VAR 0 2
4771: PUSH
4772: LD_INT 76
4774: PPUSH
4775: LD_INT 91
4777: PPUSH
4778: LD_INT 2
4780: PPUSH
4781: CALL_OW 47
4785: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4786: LD_VAR 0 2
4790: PPUSH
4791: LD_INT 44
4793: PPUSH
4794: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4798: LD_ADDR_VAR 0 2
4802: PUSH
4803: LD_INT 83
4805: PPUSH
4806: LD_INT 84
4808: PPUSH
4809: LD_INT 2
4811: PPUSH
4812: CALL_OW 47
4816: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4817: LD_VAR 0 2
4821: PPUSH
4822: LD_INT 43
4824: PPUSH
4825: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4829: LD_INT 51
4831: PPUSH
4832: LD_INT 3
4834: PPUSH
4835: LD_INT 1
4837: PPUSH
4838: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4842: LD_INT 52
4844: PPUSH
4845: LD_INT 3
4847: PPUSH
4848: LD_INT 1
4850: PPUSH
4851: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4855: LD_INT 25
4857: PPUSH
4858: LD_INT 44
4860: PPUSH
4861: CALL_OW 431
// end ; end ;
4865: LD_VAR 0 1
4869: RET
// export function EnergyDialog ; begin
4870: LD_INT 0
4872: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4873: LD_INT 46
4875: PPUSH
4876: LD_INT 1
4878: PPUSH
4879: CALL_OW 321
4883: PUSH
4884: LD_INT 1
4886: EQUAL
4887: PUSH
4888: LD_INT 35
4890: PPUSH
4891: LD_INT 1
4893: PPUSH
4894: CALL_OW 321
4898: PUSH
4899: LD_INT 1
4901: EQUAL
4902: AND
4903: IFFALSE 4927
// begin Say ( JMM , D9c-JMM-1 ) ;
4905: LD_EXP 1
4909: PPUSH
4910: LD_STRING D9c-JMM-1
4912: PPUSH
4913: CALL_OW 88
// energyVDialog = 1 ;
4917: LD_ADDR_EXP 33
4921: PUSH
4922: LD_INT 1
4924: ST_TO_ADDR
// end else
4925: GO 5081
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4927: LD_INT 35
4929: PPUSH
4930: LD_INT 1
4932: PPUSH
4933: CALL_OW 321
4937: PUSH
4938: LD_INT 2
4940: EQUAL
4941: PUSH
4942: LD_EXP 33
4946: PUSH
4947: LD_INT 0
4949: EQUAL
4950: AND
4951: IFFALSE 4973
// begin Say ( JMM , D9c-JMM-1a ) ;
4953: LD_EXP 1
4957: PPUSH
4958: LD_STRING D9c-JMM-1a
4960: PPUSH
4961: CALL_OW 88
// energyVDialog = 1 ;
4965: LD_ADDR_EXP 33
4969: PUSH
4970: LD_INT 1
4972: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4973: LD_INT 46
4975: PPUSH
4976: LD_INT 1
4978: PPUSH
4979: CALL_OW 321
4983: PUSH
4984: LD_INT 2
4986: EQUAL
4987: PUSH
4988: LD_EXP 33
4992: PUSH
4993: LD_INT 0
4995: EQUAL
4996: AND
4997: IFFALSE 5019
// begin Say ( JMM , D9c-JMM-1b ) ;
4999: LD_EXP 1
5003: PPUSH
5004: LD_STRING D9c-JMM-1b
5006: PPUSH
5007: CALL_OW 88
// energyVDialog = 1 ;
5011: LD_ADDR_EXP 33
5015: PUSH
5016: LD_INT 1
5018: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5019: LD_INT 46
5021: PPUSH
5022: LD_INT 1
5024: PPUSH
5025: CALL_OW 321
5029: PUSH
5030: LD_INT 2
5032: EQUAL
5033: PUSH
5034: LD_INT 21
5036: PPUSH
5037: LD_INT 1
5039: PPUSH
5040: CALL_OW 321
5044: PUSH
5045: LD_INT 2
5047: EQUAL
5048: AND
5049: PUSH
5050: LD_EXP 33
5054: PUSH
5055: LD_INT 0
5057: EQUAL
5058: AND
5059: IFFALSE 5081
// begin Say ( JMM , D9c-JMM-1c ) ;
5061: LD_EXP 1
5065: PPUSH
5066: LD_STRING D9c-JMM-1c
5068: PPUSH
5069: CALL_OW 88
// energyVDialog = 1 ;
5073: LD_ADDR_EXP 33
5077: PUSH
5078: LD_INT 1
5080: ST_TO_ADDR
// end ; end ; end ;
5081: LD_VAR 0 1
5085: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5086: LD_INT 0
5088: PPUSH
5089: PPUSH
5090: PPUSH
5091: PPUSH
5092: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5093: LD_VAR 0 1
5097: NOT
5098: PUSH
5099: LD_VAR 0 1
5103: PPUSH
5104: CALL_OW 256
5108: PUSH
5109: LD_INT 250
5111: LESS
5112: OR
5113: PUSH
5114: LD_VAR 0 1
5118: PPUSH
5119: CALL_OW 314
5123: PUSH
5124: LD_VAR 0 1
5128: PPUSH
5129: CALL_OW 261
5133: PUSH
5134: LD_INT 20
5136: GREATER
5137: AND
5138: OR
5139: IFFALSE 5143
// exit ;
5141: GO 5508
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5143: LD_VAR 0 1
5147: PPUSH
5148: CALL_OW 261
5152: PUSH
5153: LD_INT 20
5155: LESS
5156: PUSH
5157: LD_VAR 0 1
5161: PPUSH
5162: CALL_OW 110
5166: PUSH
5167: LD_INT 21
5169: EQUAL
5170: NOT
5171: AND
5172: IFFALSE 5199
// begin ComStop ( bulldozer ) ;
5174: LD_VAR 0 1
5178: PPUSH
5179: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5183: LD_VAR 0 1
5187: PPUSH
5188: LD_INT 21
5190: PPUSH
5191: CALL_OW 109
// exit ;
5195: GO 5508
// end else
5197: GO 5226
// if GetFuel ( bulldozer ) > 20 then
5199: LD_VAR 0 1
5203: PPUSH
5204: CALL_OW 261
5208: PUSH
5209: LD_INT 20
5211: GREATER
5212: IFFALSE 5226
// SetTag ( bulldozer , 0 ) ;
5214: LD_VAR 0 1
5218: PPUSH
5219: LD_INT 0
5221: PPUSH
5222: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5226: LD_ADDR_VAR 0 5
5230: PUSH
5231: LD_VAR 0 2
5235: PPUSH
5236: CALL_OW 353
5240: ST_TO_ADDR
// tmp := [ ] ;
5241: LD_ADDR_VAR 0 6
5245: PUSH
5246: EMPTY
5247: ST_TO_ADDR
// for i = 1 to list do
5248: LD_ADDR_VAR 0 4
5252: PUSH
5253: DOUBLE
5254: LD_INT 1
5256: DEC
5257: ST_TO_ADDR
5258: LD_VAR 0 5
5262: PUSH
5263: FOR_TO
5264: IFFALSE 5362
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5266: LD_VAR 0 5
5270: PUSH
5271: LD_VAR 0 4
5275: ARRAY
5276: PUSH
5277: LD_INT 1
5279: ARRAY
5280: PPUSH
5281: LD_VAR 0 5
5285: PUSH
5286: LD_VAR 0 4
5290: ARRAY
5291: PUSH
5292: LD_INT 2
5294: ARRAY
5295: PPUSH
5296: CALL_OW 554
5300: IFFALSE 5360
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5302: LD_ADDR_VAR 0 6
5306: PUSH
5307: LD_VAR 0 6
5311: PPUSH
5312: LD_VAR 0 6
5316: PUSH
5317: LD_INT 1
5319: PLUS
5320: PPUSH
5321: LD_VAR 0 5
5325: PUSH
5326: LD_VAR 0 4
5330: ARRAY
5331: PUSH
5332: LD_INT 1
5334: ARRAY
5335: PUSH
5336: LD_VAR 0 5
5340: PUSH
5341: LD_VAR 0 4
5345: ARRAY
5346: PUSH
5347: LD_INT 2
5349: ARRAY
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: PPUSH
5355: CALL_OW 1
5359: ST_TO_ADDR
// end ;
5360: GO 5263
5362: POP
5363: POP
// ComStop ( bulldozer ) ;
5364: LD_VAR 0 1
5368: PPUSH
5369: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5373: LD_ADDR_VAR 0 7
5377: PUSH
5378: LD_VAR 0 1
5382: PPUSH
5383: CALL_OW 250
5387: PUSH
5388: LD_VAR 0 1
5392: PPUSH
5393: CALL_OW 251
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: ST_TO_ADDR
// for i = tmp downto 1 do
5402: LD_ADDR_VAR 0 4
5406: PUSH
5407: DOUBLE
5408: LD_VAR 0 6
5412: INC
5413: ST_TO_ADDR
5414: LD_INT 1
5416: PUSH
5417: FOR_DOWNTO
5418: IFFALSE 5506
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5420: LD_ADDR_VAR 0 7
5424: PUSH
5425: LD_VAR 0 7
5429: PUSH
5430: LD_INT 1
5432: ARRAY
5433: PPUSH
5434: LD_VAR 0 7
5438: PUSH
5439: LD_INT 2
5441: ARRAY
5442: PPUSH
5443: LD_VAR 0 6
5447: PPUSH
5448: CALL 5609 0 3
5452: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5453: LD_VAR 0 1
5457: PPUSH
5458: LD_VAR 0 7
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PPUSH
5467: LD_VAR 0 7
5471: PUSH
5472: LD_INT 2
5474: ARRAY
5475: PPUSH
5476: CALL 5513 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5480: LD_ADDR_VAR 0 6
5484: PUSH
5485: LD_VAR 0 6
5489: PPUSH
5490: LD_VAR 0 7
5494: PUSH
5495: LD_INT 3
5497: ARRAY
5498: PPUSH
5499: CALL_OW 3
5503: ST_TO_ADDR
// end ;
5504: GO 5417
5506: POP
5507: POP
// end ;
5508: LD_VAR 0 3
5512: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5513: LD_INT 0
5515: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5516: LD_VAR 0 2
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: CALL_OW 351
5530: PUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: LD_VAR 0 3
5540: PPUSH
5541: CALL_OW 554
5545: AND
5546: PUSH
5547: LD_VAR 0 2
5551: PPUSH
5552: LD_VAR 0 3
5556: PPUSH
5557: CALL_OW 488
5561: AND
5562: PUSH
5563: LD_VAR 0 2
5567: PPUSH
5568: LD_VAR 0 3
5572: PPUSH
5573: CALL_OW 428
5577: PUSH
5578: LD_INT 1
5580: NEG
5581: EQUAL
5582: AND
5583: IFFALSE 5604
// AddComMoveXY ( bulldozer , x , y ) ;
5585: LD_VAR 0 1
5589: PPUSH
5590: LD_VAR 0 2
5594: PPUSH
5595: LD_VAR 0 3
5599: PPUSH
5600: CALL_OW 171
// end ;
5604: LD_VAR 0 4
5608: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5609: LD_INT 0
5611: PPUSH
5612: PPUSH
5613: PPUSH
5614: PPUSH
5615: PPUSH
5616: PPUSH
5617: PPUSH
// dist := 99999 ;
5618: LD_ADDR_VAR 0 6
5622: PUSH
5623: LD_INT 99999
5625: ST_TO_ADDR
// for i = 1 to list do
5626: LD_ADDR_VAR 0 5
5630: PUSH
5631: DOUBLE
5632: LD_INT 1
5634: DEC
5635: ST_TO_ADDR
5636: LD_VAR 0 3
5640: PUSH
5641: FOR_TO
5642: IFFALSE 5780
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5644: LD_ADDR_VAR 0 7
5648: PUSH
5649: LD_VAR 0 1
5653: PPUSH
5654: LD_VAR 0 2
5658: PPUSH
5659: LD_VAR 0 3
5663: PUSH
5664: LD_VAR 0 5
5668: ARRAY
5669: PUSH
5670: LD_INT 1
5672: ARRAY
5673: PPUSH
5674: LD_VAR 0 3
5678: PUSH
5679: LD_VAR 0 5
5683: ARRAY
5684: PUSH
5685: LD_INT 2
5687: ARRAY
5688: PPUSH
5689: CALL_OW 298
5693: ST_TO_ADDR
// if d = 0 then
5694: LD_VAR 0 7
5698: PUSH
5699: LD_INT 0
5701: EQUAL
5702: IFFALSE 5706
// continue ;
5704: GO 5641
// if d < dist then
5706: LD_VAR 0 7
5710: PUSH
5711: LD_VAR 0 6
5715: LESS
5716: IFFALSE 5778
// begin _x := list [ i ] [ 1 ] ;
5718: LD_ADDR_VAR 0 8
5722: PUSH
5723: LD_VAR 0 3
5727: PUSH
5728: LD_VAR 0 5
5732: ARRAY
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5738: LD_ADDR_VAR 0 9
5742: PUSH
5743: LD_VAR 0 3
5747: PUSH
5748: LD_VAR 0 5
5752: ARRAY
5753: PUSH
5754: LD_INT 2
5756: ARRAY
5757: ST_TO_ADDR
// _i := i ;
5758: LD_ADDR_VAR 0 10
5762: PUSH
5763: LD_VAR 0 5
5767: ST_TO_ADDR
// dist := d ;
5768: LD_ADDR_VAR 0 6
5772: PUSH
5773: LD_VAR 0 7
5777: ST_TO_ADDR
// end ; end ;
5778: GO 5641
5780: POP
5781: POP
// result := [ _x , _y , _i , dist ] ;
5782: LD_ADDR_VAR 0 4
5786: PUSH
5787: LD_VAR 0 8
5791: PUSH
5792: LD_VAR 0 9
5796: PUSH
5797: LD_VAR 0 10
5801: PUSH
5802: LD_VAR 0 6
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: ST_TO_ADDR
// end ;
5813: LD_VAR 0 4
5817: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5818: LD_INT 0
5820: PPUSH
5821: PPUSH
5822: PPUSH
5823: PPUSH
// for i = 1 to 72 do
5824: LD_ADDR_VAR 0 5
5828: PUSH
5829: DOUBLE
5830: LD_INT 1
5832: DEC
5833: ST_TO_ADDR
5834: LD_INT 72
5836: PUSH
5837: FOR_TO
5838: IFFALSE 5896
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5840: LD_VAR 0 5
5844: PPUSH
5845: LD_VAR 0 1
5849: PPUSH
5850: CALL_OW 321
5854: PUSH
5855: LD_INT 1
5857: EQUAL
5858: PUSH
5859: LD_VAR 0 5
5863: PPUSH
5864: LD_VAR 0 3
5868: PPUSH
5869: CALL_OW 482
5873: PUSH
5874: LD_INT 1
5876: EQUAL
5877: AND
5878: IFFALSE 5894
// AddComResearch ( lab , i ) ;
5880: LD_VAR 0 2
5884: PPUSH
5885: LD_VAR 0 5
5889: PPUSH
5890: CALL_OW 184
5894: GO 5837
5896: POP
5897: POP
// end ;
5898: LD_VAR 0 4
5902: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5903: LD_INT 0
5905: PPUSH
5906: PPUSH
5907: PPUSH
5908: PPUSH
5909: PPUSH
5910: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
5911: LD_ADDR_VAR 0 7
5915: PUSH
5916: LD_VAR 0 2
5920: PPUSH
5921: CALL_OW 313
5925: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
5926: LD_ADDR_VAR 0 8
5930: PUSH
5931: LD_VAR 0 3
5935: PPUSH
5936: LD_INT 22
5938: PUSH
5939: LD_VAR 0 1
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PUSH
5948: LD_INT 25
5950: PUSH
5951: LD_INT 2
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PUSH
5958: LD_INT 24
5960: PUSH
5961: LD_INT 750
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 3
5970: PUSH
5971: LD_INT 54
5973: PUSH
5974: EMPTY
5975: LIST
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: PPUSH
5987: CALL_OW 70
5991: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5992: LD_ADDR_VAR 0 5
5996: PUSH
5997: LD_VAR 0 3
6001: PPUSH
6002: LD_INT 22
6004: PUSH
6005: LD_VAR 0 1
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: LD_INT 21
6016: PUSH
6017: LD_INT 3
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: LD_INT 3
6026: PUSH
6027: LD_INT 24
6029: PUSH
6030: LD_INT 1000
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: LIST
6045: PUSH
6046: EMPTY
6047: LIST
6048: PPUSH
6049: CALL_OW 70
6053: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6054: LD_VAR 0 5
6058: NOT
6059: PUSH
6060: LD_INT 22
6062: PUSH
6063: LD_VAR 0 1
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: PUSH
6072: LD_INT 25
6074: PUSH
6075: LD_INT 2
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: LD_INT 24
6084: PUSH
6085: LD_INT 250
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: LIST
6096: PPUSH
6097: CALL_OW 69
6101: NOT
6102: AND
6103: IFFALSE 6107
// exit ;
6105: GO 6219
// if buildings_list > 0 and engineerOkInside then
6107: LD_VAR 0 5
6111: PUSH
6112: LD_INT 0
6114: GREATER
6115: PUSH
6116: LD_VAR 0 7
6120: AND
6121: IFFALSE 6147
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6123: LD_VAR 0 7
6127: PPUSH
6128: LD_INT 25
6130: PUSH
6131: LD_INT 2
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PPUSH
6138: CALL_OW 72
6142: PPUSH
6143: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
6147: LD_VAR 0 5
6151: PUSH
6152: LD_INT 0
6154: GREATER
6155: PUSH
6156: LD_VAR 0 8
6160: PUSH
6161: LD_INT 0
6163: GREATER
6164: AND
6165: IFFALSE 6185
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
6167: LD_VAR 0 8
6171: PPUSH
6172: LD_VAR 0 5
6176: PUSH
6177: LD_INT 1
6179: ARRAY
6180: PPUSH
6181: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
6185: LD_VAR 0 5
6189: PUSH
6190: LD_INT 0
6192: EQUAL
6193: PUSH
6194: LD_VAR 0 8
6198: PUSH
6199: LD_INT 0
6201: GREATER
6202: AND
6203: IFFALSE 6219
// ComEnterUnit ( engineerOkOutside , building ) ;
6205: LD_VAR 0 8
6209: PPUSH
6210: LD_VAR 0 2
6214: PPUSH
6215: CALL_OW 120
// end ;
6219: LD_VAR 0 4
6223: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
6224: LD_INT 0
6226: PPUSH
6227: PPUSH
6228: PPUSH
6229: PPUSH
6230: PPUSH
6231: PPUSH
6232: PPUSH
6233: PPUSH
6234: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6235: LD_ADDR_VAR 0 6
6239: PUSH
6240: LD_INT 22
6242: PUSH
6243: LD_VAR 0 1
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: LD_INT 25
6254: PUSH
6255: LD_INT 4
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: PUSH
6262: LD_INT 23
6264: PUSH
6265: LD_INT 2
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: PUSH
6272: LD_INT 24
6274: PUSH
6275: LD_INT 251
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: PPUSH
6288: CALL_OW 69
6292: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6293: LD_ADDR_VAR 0 7
6297: PUSH
6298: LD_VAR 0 3
6302: PPUSH
6303: LD_INT 22
6305: PUSH
6306: LD_VAR 0 1
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: LD_INT 23
6317: PUSH
6318: LD_INT 2
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: LD_INT 25
6327: PUSH
6328: LD_INT 4
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PUSH
6335: LD_INT 50
6337: PUSH
6338: EMPTY
6339: LIST
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: PPUSH
6347: CALL_OW 70
6351: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6352: LD_ADDR_VAR 0 10
6356: PUSH
6357: LD_VAR 0 3
6361: PPUSH
6362: LD_INT 22
6364: PUSH
6365: LD_VAR 0 1
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PUSH
6374: LD_INT 21
6376: PUSH
6377: LD_INT 1
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: PUSH
6384: LD_INT 3
6386: PUSH
6387: LD_INT 25
6389: PUSH
6390: LD_INT 3
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 3
6403: PUSH
6404: LD_INT 24
6406: PUSH
6407: LD_INT 750
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: PPUSH
6424: CALL_OW 70
6428: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6429: LD_ADDR_VAR 0 11
6433: PUSH
6434: LD_VAR 0 2
6438: PPUSH
6439: LD_INT 22
6441: PUSH
6442: LD_VAR 0 1
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 21
6453: PUSH
6454: LD_INT 1
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 3
6463: PUSH
6464: LD_INT 25
6466: PUSH
6467: LD_INT 3
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: LD_INT 3
6480: PUSH
6481: LD_INT 24
6483: PUSH
6484: LD_INT 1000
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: PPUSH
6501: CALL_OW 70
6505: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6506: LD_VAR 0 10
6510: NOT
6511: PUSH
6512: LD_VAR 0 11
6516: NOT
6517: AND
6518: PUSH
6519: LD_VAR 0 6
6523: NOT
6524: AND
6525: IFFALSE 6529
// exit ;
6527: GO 6763
// if damageUnits > 0 and sci_list > 0 then
6529: LD_VAR 0 10
6533: PUSH
6534: LD_INT 0
6536: GREATER
6537: PUSH
6538: LD_VAR 0 6
6542: PUSH
6543: LD_INT 0
6545: GREATER
6546: AND
6547: IFFALSE 6563
// ComMoveToArea ( damageUnits , healArea ) ;
6549: LD_VAR 0 10
6553: PPUSH
6554: LD_VAR 0 2
6558: PPUSH
6559: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6563: LD_VAR 0 11
6567: PUSH
6568: LD_INT 0
6570: GREATER
6571: PUSH
6572: LD_VAR 0 6
6576: PUSH
6577: LD_INT 0
6579: GREATER
6580: AND
6581: IFFALSE 6592
// ComExitBuilding ( sci_list ) ;
6583: LD_VAR 0 6
6587: PPUSH
6588: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6592: LD_VAR 0 11
6596: PUSH
6597: LD_INT 0
6599: GREATER
6600: PUSH
6601: LD_VAR 0 7
6605: PUSH
6606: LD_INT 0
6608: GREATER
6609: AND
6610: IFFALSE 6630
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6612: LD_VAR 0 7
6616: PPUSH
6617: LD_VAR 0 11
6621: PUSH
6622: LD_INT 1
6624: ARRAY
6625: PPUSH
6626: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6630: LD_VAR 0 10
6634: PUSH
6635: LD_INT 0
6637: EQUAL
6638: PUSH
6639: LD_VAR 0 11
6643: PUSH
6644: LD_INT 0
6646: EQUAL
6647: AND
6648: PUSH
6649: LD_VAR 0 7
6653: PUSH
6654: LD_INT 0
6656: GREATER
6657: AND
6658: IFFALSE 6763
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6660: LD_ADDR_VAR 0 12
6664: PUSH
6665: LD_INT 22
6667: PUSH
6668: LD_VAR 0 1
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PUSH
6677: LD_INT 21
6679: PUSH
6680: LD_INT 3
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: PUSH
6687: LD_INT 30
6689: PUSH
6690: LD_INT 8
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: LIST
6701: PPUSH
6702: CALL_OW 69
6706: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6707: LD_ADDR_VAR 0 13
6711: PUSH
6712: LD_INT 1
6714: PPUSH
6715: LD_VAR 0 12
6719: PPUSH
6720: CALL_OW 12
6724: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6725: LD_VAR 0 7
6729: PPUSH
6730: LD_INT 3
6732: PUSH
6733: LD_INT 60
6735: PUSH
6736: EMPTY
6737: LIST
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: CALL_OW 72
6747: PPUSH
6748: LD_VAR 0 12
6752: PUSH
6753: LD_VAR 0 13
6757: ARRAY
6758: PPUSH
6759: CALL_OW 120
// end ; end ;
6763: LD_VAR 0 5
6767: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6768: LD_INT 0
6770: PPUSH
6771: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6772: LD_INT 22
6774: PUSH
6775: LD_VAR 0 1
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: LD_INT 21
6786: PUSH
6787: LD_INT 2
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: PPUSH
6798: CALL_OW 69
6802: PUSH
6803: LD_VAR 0 3
6807: LESSEQUAL
6808: IFFALSE 6875
// for i = 1 to vehCount do
6810: LD_ADDR_VAR 0 9
6814: PUSH
6815: DOUBLE
6816: LD_INT 1
6818: DEC
6819: ST_TO_ADDR
6820: LD_VAR 0 3
6824: PUSH
6825: FOR_TO
6826: IFFALSE 6873
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6828: LD_VAR 0 2
6832: PPUSH
6833: LD_VAR 0 7
6837: PPUSH
6838: LD_VAR 0 5
6842: PPUSH
6843: LD_VAR 0 6
6847: PPUSH
6848: LD_VAR 0 4
6852: PUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_VAR 0 4
6860: PPUSH
6861: CALL_OW 12
6865: ARRAY
6866: PPUSH
6867: CALL_OW 185
6871: GO 6825
6873: POP
6874: POP
// end ;
6875: LD_VAR 0 8
6879: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6880: LD_INT 0
6882: PPUSH
6883: PPUSH
6884: PPUSH
6885: PPUSH
6886: PPUSH
6887: PPUSH
6888: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
6889: LD_ADDR_VAR 0 8
6893: PUSH
6894: LD_INT 22
6896: PUSH
6897: LD_VAR 0 1
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 21
6908: PUSH
6909: LD_INT 2
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 3
6918: PUSH
6919: LD_INT 34
6921: PUSH
6922: LD_INT 51
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 34
6931: PUSH
6932: LD_INT 53
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 34
6941: PUSH
6942: LD_INT 52
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 24
6957: PUSH
6958: LD_INT 650
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: PPUSH
6971: CALL_OW 69
6975: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
6976: LD_INT 22
6978: PUSH
6979: LD_VAR 0 1
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 21
6990: PUSH
6991: LD_INT 2
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: LD_INT 24
7000: PUSH
7001: LD_INT 1000
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: LIST
7012: PPUSH
7013: CALL_OW 69
7017: PUSH
7018: LD_INT 3
7020: PUSH
7021: LD_INT 4
7023: PUSH
7024: LD_INT 5
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: LIST
7031: PUSH
7032: LD_OWVAR 67
7036: ARRAY
7037: GREATEREQUAL
7038: IFFALSE 7535
// repeat wait ( 0 0$1 ) ;
7040: LD_INT 35
7042: PPUSH
7043: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
7047: LD_ADDR_VAR 0 8
7051: PUSH
7052: LD_INT 22
7054: PUSH
7055: LD_VAR 0 1
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 21
7066: PUSH
7067: LD_INT 2
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: LD_INT 34
7079: PUSH
7080: LD_INT 51
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: LD_INT 34
7089: PUSH
7090: LD_INT 53
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: PUSH
7097: LD_INT 34
7099: PUSH
7100: LD_INT 52
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: PUSH
7113: LD_INT 24
7115: PUSH
7116: LD_INT 650
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: PPUSH
7129: CALL_OW 69
7133: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7134: LD_INT 22
7136: PUSH
7137: LD_VAR 0 1
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: LD_INT 95
7148: PUSH
7149: LD_VAR 0 2
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: NOT
7167: PUSH
7168: LD_VAR 0 11
7172: PUSH
7173: LD_INT 0
7175: EQUAL
7176: AND
7177: IFFALSE 7232
// for i := 1 to wayX do
7179: LD_ADDR_VAR 0 6
7183: PUSH
7184: DOUBLE
7185: LD_INT 1
7187: DEC
7188: ST_TO_ADDR
7189: LD_VAR 0 3
7193: PUSH
7194: FOR_TO
7195: IFFALSE 7230
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7197: LD_VAR 0 8
7201: PPUSH
7202: LD_VAR 0 3
7206: PUSH
7207: LD_VAR 0 6
7211: ARRAY
7212: PPUSH
7213: LD_VAR 0 4
7217: PUSH
7218: LD_VAR 0 6
7222: ARRAY
7223: PPUSH
7224: CALL_OW 174
7228: GO 7194
7230: POP
7231: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
7232: LD_INT 22
7234: PUSH
7235: LD_VAR 0 1
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 95
7246: PUSH
7247: LD_VAR 0 2
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PPUSH
7260: CALL_OW 69
7264: IFFALSE 7488
// begin seeEnemy = 1 ;
7266: LD_ADDR_VAR 0 11
7270: PUSH
7271: LD_INT 1
7273: ST_TO_ADDR
// for j in vehiclesOK do
7274: LD_ADDR_VAR 0 7
7278: PUSH
7279: LD_VAR 0 8
7283: PUSH
7284: FOR_IN
7285: IFFALSE 7486
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7287: LD_ADDR_VAR 0 9
7291: PUSH
7292: LD_INT 81
7294: PUSH
7295: LD_VAR 0 1
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: LD_INT 101
7306: PUSH
7307: LD_INT 1
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PPUSH
7318: CALL_OW 69
7322: PPUSH
7323: LD_VAR 0 7
7327: PPUSH
7328: CALL_OW 74
7332: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7333: LD_ADDR_VAR 0 10
7337: PUSH
7338: LD_INT 81
7340: PUSH
7341: LD_VAR 0 1
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 101
7352: PUSH
7353: LD_INT 1
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: PUSH
7360: LD_INT 2
7362: PUSH
7363: LD_INT 59
7365: PUSH
7366: EMPTY
7367: LIST
7368: PUSH
7369: LD_INT 21
7371: PUSH
7372: LD_INT 1
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 21
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: LIST
7399: PUSH
7400: EMPTY
7401: LIST
7402: PPUSH
7403: CALL_OW 69
7407: PPUSH
7408: LD_VAR 0 7
7412: PPUSH
7413: CALL_OW 74
7417: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7418: LD_VAR 0 7
7422: PPUSH
7423: LD_VAR 0 9
7427: PPUSH
7428: CALL_OW 296
7432: PUSH
7433: LD_INT 8
7435: PLUS
7436: PUSH
7437: LD_VAR 0 7
7441: PPUSH
7442: LD_VAR 0 10
7446: PPUSH
7447: CALL_OW 296
7451: LESS
7452: IFFALSE 7470
// ComAttackUnit ( j , target1 ) else
7454: LD_VAR 0 7
7458: PPUSH
7459: LD_VAR 0 9
7463: PPUSH
7464: CALL_OW 115
7468: GO 7484
// ComAttackUnit ( j , target2 ) ;
7470: LD_VAR 0 7
7474: PPUSH
7475: LD_VAR 0 10
7479: PPUSH
7480: CALL_OW 115
// end ;
7484: GO 7284
7486: POP
7487: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7488: LD_INT 22
7490: PUSH
7491: LD_VAR 0 1
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 21
7502: PUSH
7503: LD_INT 2
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 24
7512: PUSH
7513: LD_INT 1000
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: LIST
7524: PPUSH
7525: CALL_OW 69
7529: PUSH
7530: LD_INT 0
7532: EQUAL
7533: IFFALSE 7040
// seeEnemy = 0 ;
7535: LD_ADDR_VAR 0 11
7539: PUSH
7540: LD_INT 0
7542: ST_TO_ADDR
// end ;
7543: LD_VAR 0 5
7547: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7548: LD_INT 0
7550: PPUSH
7551: PPUSH
7552: PPUSH
7553: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7554: LD_ADDR_VAR 0 8
7558: PUSH
7559: LD_INT 22
7561: PUSH
7562: LD_VAR 0 1
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 21
7573: PUSH
7574: LD_INT 2
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_INT 3
7583: PUSH
7584: LD_INT 34
7586: PUSH
7587: LD_INT 51
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 34
7596: PUSH
7597: LD_INT 53
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: PUSH
7604: LD_INT 34
7606: PUSH
7607: LD_INT 52
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 3
7622: PUSH
7623: LD_INT 24
7625: PUSH
7626: LD_INT 650
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: PPUSH
7643: CALL_OW 69
7647: ST_TO_ADDR
// if damageVehicles > 0 then
7648: LD_VAR 0 8
7652: PUSH
7653: LD_INT 0
7655: GREATER
7656: IFFALSE 7677
// ComMoveXY ( damageVehicles , repX , repY ) ;
7658: LD_VAR 0 8
7662: PPUSH
7663: LD_VAR 0 3
7667: PPUSH
7668: LD_VAR 0 4
7672: PPUSH
7673: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7677: LD_VAR 0 8
7681: PPUSH
7682: LD_INT 95
7684: PUSH
7685: LD_VAR 0 2
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 3
7696: PUSH
7697: LD_INT 58
7699: PUSH
7700: EMPTY
7701: LIST
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PPUSH
7711: CALL_OW 72
7715: PUSH
7716: LD_INT 0
7718: GREATER
7719: IFFALSE 7786
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7721: LD_ADDR_VAR 0 6
7725: PUSH
7726: LD_VAR 0 8
7730: PPUSH
7731: LD_INT 95
7733: PUSH
7734: LD_VAR 0 2
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PUSH
7743: LD_INT 3
7745: PUSH
7746: LD_INT 58
7748: PUSH
7749: EMPTY
7750: LIST
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PPUSH
7760: CALL_OW 72
7764: PUSH
7765: FOR_IN
7766: IFFALSE 7784
// ComExitVehicle ( UnitsInside ( i ) ) ;
7768: LD_VAR 0 6
7772: PPUSH
7773: CALL_OW 313
7777: PPUSH
7778: CALL_OW 121
7782: GO 7765
7784: POP
7785: POP
// end ;
7786: LD_VAR 0 5
7790: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7791: LD_INT 0
7793: PPUSH
7794: PPUSH
7795: PPUSH
7796: PPUSH
7797: PPUSH
7798: PPUSH
7799: PPUSH
7800: PPUSH
7801: PPUSH
7802: PPUSH
7803: PPUSH
// for i = 1 to medicCount do
7804: LD_ADDR_VAR 0 14
7808: PUSH
7809: DOUBLE
7810: LD_INT 1
7812: DEC
7813: ST_TO_ADDR
7814: LD_VAR 0 7
7818: PUSH
7819: FOR_TO
7820: IFFALSE 7902
// begin uc_side = side ;
7822: LD_ADDR_OWVAR 20
7826: PUSH
7827: LD_VAR 0 1
7831: ST_TO_ADDR
// uc_nation = nation ;
7832: LD_ADDR_OWVAR 21
7836: PUSH
7837: LD_VAR 0 2
7841: ST_TO_ADDR
// hc_name =  ;
7842: LD_ADDR_OWVAR 26
7846: PUSH
7847: LD_STRING 
7849: ST_TO_ADDR
// hc_gallery =  ;
7850: LD_ADDR_OWVAR 33
7854: PUSH
7855: LD_STRING 
7857: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7858: LD_INT 0
7860: PPUSH
7861: LD_INT 4
7863: PPUSH
7864: LD_VAR 0 8
7868: PPUSH
7869: CALL_OW 380
// un = CreateHuman ;
7873: LD_ADDR_VAR 0 16
7877: PUSH
7878: CALL_OW 44
7882: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7883: LD_VAR 0 16
7887: PPUSH
7888: LD_VAR 0 9
7892: PPUSH
7893: LD_INT 0
7895: PPUSH
7896: CALL_OW 49
// end ;
7900: GO 7819
7902: POP
7903: POP
// for i = 1 to soldierCount do
7904: LD_ADDR_VAR 0 14
7908: PUSH
7909: DOUBLE
7910: LD_INT 1
7912: DEC
7913: ST_TO_ADDR
7914: LD_VAR 0 3
7918: PUSH
7919: FOR_TO
7920: IFFALSE 8002
// begin uc_side = side ;
7922: LD_ADDR_OWVAR 20
7926: PUSH
7927: LD_VAR 0 1
7931: ST_TO_ADDR
// uc_nation = nation ;
7932: LD_ADDR_OWVAR 21
7936: PUSH
7937: LD_VAR 0 2
7941: ST_TO_ADDR
// hc_name =  ;
7942: LD_ADDR_OWVAR 26
7946: PUSH
7947: LD_STRING 
7949: ST_TO_ADDR
// hc_gallery =  ;
7950: LD_ADDR_OWVAR 33
7954: PUSH
7955: LD_STRING 
7957: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7958: LD_INT 0
7960: PPUSH
7961: LD_INT 1
7963: PPUSH
7964: LD_VAR 0 8
7968: PPUSH
7969: CALL_OW 380
// un = CreateHuman ;
7973: LD_ADDR_VAR 0 16
7977: PUSH
7978: CALL_OW 44
7982: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7983: LD_VAR 0 16
7987: PPUSH
7988: LD_VAR 0 9
7992: PPUSH
7993: LD_INT 0
7995: PPUSH
7996: CALL_OW 49
// end ;
8000: GO 7919
8002: POP
8003: POP
// for i = 1 to sniperCount do
8004: LD_ADDR_VAR 0 14
8008: PUSH
8009: DOUBLE
8010: LD_INT 1
8012: DEC
8013: ST_TO_ADDR
8014: LD_VAR 0 4
8018: PUSH
8019: FOR_TO
8020: IFFALSE 8102
// begin uc_side = side ;
8022: LD_ADDR_OWVAR 20
8026: PUSH
8027: LD_VAR 0 1
8031: ST_TO_ADDR
// uc_nation = nation ;
8032: LD_ADDR_OWVAR 21
8036: PUSH
8037: LD_VAR 0 2
8041: ST_TO_ADDR
// hc_name =  ;
8042: LD_ADDR_OWVAR 26
8046: PUSH
8047: LD_STRING 
8049: ST_TO_ADDR
// hc_gallery =  ;
8050: LD_ADDR_OWVAR 33
8054: PUSH
8055: LD_STRING 
8057: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8058: LD_INT 0
8060: PPUSH
8061: LD_INT 5
8063: PPUSH
8064: LD_VAR 0 8
8068: PPUSH
8069: CALL_OW 380
// un = CreateHuman ;
8073: LD_ADDR_VAR 0 16
8077: PUSH
8078: CALL_OW 44
8082: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8083: LD_VAR 0 16
8087: PPUSH
8088: LD_VAR 0 9
8092: PPUSH
8093: LD_INT 0
8095: PPUSH
8096: CALL_OW 49
// end ;
8100: GO 8019
8102: POP
8103: POP
// for i = 1 to bazookCount do
8104: LD_ADDR_VAR 0 14
8108: PUSH
8109: DOUBLE
8110: LD_INT 1
8112: DEC
8113: ST_TO_ADDR
8114: LD_VAR 0 5
8118: PUSH
8119: FOR_TO
8120: IFFALSE 8202
// begin uc_side = side ;
8122: LD_ADDR_OWVAR 20
8126: PUSH
8127: LD_VAR 0 1
8131: ST_TO_ADDR
// uc_nation = nation ;
8132: LD_ADDR_OWVAR 21
8136: PUSH
8137: LD_VAR 0 2
8141: ST_TO_ADDR
// hc_name =  ;
8142: LD_ADDR_OWVAR 26
8146: PUSH
8147: LD_STRING 
8149: ST_TO_ADDR
// hc_gallery =  ;
8150: LD_ADDR_OWVAR 33
8154: PUSH
8155: LD_STRING 
8157: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8158: LD_INT 0
8160: PPUSH
8161: LD_INT 9
8163: PPUSH
8164: LD_VAR 0 8
8168: PPUSH
8169: CALL_OW 380
// un = CreateHuman ;
8173: LD_ADDR_VAR 0 16
8177: PUSH
8178: CALL_OW 44
8182: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8183: LD_VAR 0 16
8187: PPUSH
8188: LD_VAR 0 9
8192: PPUSH
8193: LD_INT 0
8195: PPUSH
8196: CALL_OW 49
// end ;
8200: GO 8119
8202: POP
8203: POP
// for i = 1 to mortalCount do
8204: LD_ADDR_VAR 0 14
8208: PUSH
8209: DOUBLE
8210: LD_INT 1
8212: DEC
8213: ST_TO_ADDR
8214: LD_VAR 0 6
8218: PUSH
8219: FOR_TO
8220: IFFALSE 8302
// begin uc_side = side ;
8222: LD_ADDR_OWVAR 20
8226: PUSH
8227: LD_VAR 0 1
8231: ST_TO_ADDR
// uc_nation = nation ;
8232: LD_ADDR_OWVAR 21
8236: PUSH
8237: LD_VAR 0 2
8241: ST_TO_ADDR
// hc_name =  ;
8242: LD_ADDR_OWVAR 26
8246: PUSH
8247: LD_STRING 
8249: ST_TO_ADDR
// hc_gallery =  ;
8250: LD_ADDR_OWVAR 33
8254: PUSH
8255: LD_STRING 
8257: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8258: LD_INT 0
8260: PPUSH
8261: LD_INT 8
8263: PPUSH
8264: LD_VAR 0 8
8268: PPUSH
8269: CALL_OW 380
// un = CreateHuman ;
8273: LD_ADDR_VAR 0 16
8277: PUSH
8278: CALL_OW 44
8282: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8283: LD_VAR 0 16
8287: PPUSH
8288: LD_VAR 0 9
8292: PPUSH
8293: LD_INT 0
8295: PPUSH
8296: CALL_OW 49
// end ;
8300: GO 8219
8302: POP
8303: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8304: LD_ADDR_VAR 0 19
8308: PUSH
8309: LD_INT 22
8311: PUSH
8312: LD_VAR 0 1
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PUSH
8321: LD_INT 2
8323: PUSH
8324: LD_INT 25
8326: PUSH
8327: LD_INT 1
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: LD_INT 25
8336: PUSH
8337: LD_INT 5
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: LD_INT 25
8346: PUSH
8347: LD_INT 8
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: PUSH
8354: LD_INT 25
8356: PUSH
8357: LD_INT 9
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: PPUSH
8375: CALL_OW 69
8379: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8380: LD_ADDR_VAR 0 18
8384: PUSH
8385: LD_INT 22
8387: PUSH
8388: LD_VAR 0 1
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: LD_INT 25
8399: PUSH
8400: LD_INT 4
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PPUSH
8411: CALL_OW 69
8415: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8416: LD_VAR 0 18
8420: PPUSH
8421: LD_VAR 0 10
8425: PPUSH
8426: CALL_OW 113
// if strategy = 1 then
8430: LD_VAR 0 12
8434: PUSH
8435: LD_INT 1
8437: EQUAL
8438: IFFALSE 8929
// begin for i in soldiersOK_list do
8440: LD_ADDR_VAR 0 14
8444: PUSH
8445: LD_VAR 0 19
8449: PUSH
8450: FOR_IN
8451: IFFALSE 8515
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8453: LD_VAR 0 14
8457: PPUSH
8458: LD_INT 91
8460: PPUSH
8461: LD_INT 63
8463: PPUSH
8464: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8468: LD_VAR 0 14
8472: PPUSH
8473: LD_INT 101
8475: PPUSH
8476: LD_INT 53
8478: PPUSH
8479: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8483: LD_VAR 0 14
8487: PPUSH
8488: LD_INT 75
8490: PPUSH
8491: LD_INT 23
8493: PPUSH
8494: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8498: LD_VAR 0 14
8502: PPUSH
8503: LD_INT 78
8505: PPUSH
8506: LD_INT 8
8508: PPUSH
8509: CALL_OW 174
// end ;
8513: GO 8450
8515: POP
8516: POP
// wait ( 0 0$30 ) ;
8517: LD_INT 1050
8519: PPUSH
8520: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8524: LD_INT 35
8526: PPUSH
8527: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8531: LD_ADDR_VAR 0 17
8535: PUSH
8536: LD_INT 22
8538: PUSH
8539: LD_VAR 0 1
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: LD_INT 1
8550: PUSH
8551: LD_INT 3
8553: PUSH
8554: LD_INT 24
8556: PUSH
8557: LD_INT 550
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_INT 24
8570: PUSH
8571: LD_INT 250
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: LIST
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PPUSH
8587: CALL_OW 69
8591: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8592: LD_ADDR_VAR 0 19
8596: PUSH
8597: LD_INT 22
8599: PUSH
8600: LD_VAR 0 1
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: LD_INT 2
8611: PUSH
8612: LD_INT 25
8614: PUSH
8615: LD_INT 1
8617: PUSH
8618: EMPTY
8619: LIST
8620: LIST
8621: PUSH
8622: LD_INT 25
8624: PUSH
8625: LD_INT 5
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: LD_INT 25
8634: PUSH
8635: LD_INT 8
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: LD_INT 25
8644: PUSH
8645: LD_INT 9
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: PUSH
8659: LD_INT 24
8661: PUSH
8662: LD_INT 1000
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: LIST
8673: PPUSH
8674: CALL_OW 69
8678: ST_TO_ADDR
// if medicCount > 0 then
8679: LD_VAR 0 7
8683: PUSH
8684: LD_INT 0
8686: GREATER
8687: IFFALSE 8731
// begin if damageUnit_list > 0 then
8689: LD_VAR 0 17
8693: PUSH
8694: LD_INT 0
8696: GREATER
8697: IFFALSE 8731
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8699: LD_VAR 0 17
8703: PPUSH
8704: LD_VAR 0 10
8708: PPUSH
8709: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8713: LD_VAR 0 7
8717: PPUSH
8718: LD_VAR 0 17
8722: PUSH
8723: LD_INT 1
8725: ARRAY
8726: PPUSH
8727: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8731: LD_ADDR_VAR 0 14
8735: PUSH
8736: LD_VAR 0 19
8740: PUSH
8741: FOR_IN
8742: IFFALSE 8918
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8744: LD_ADDR_VAR 0 22
8748: PUSH
8749: LD_INT 22
8751: PUSH
8752: LD_VAR 0 11
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PPUSH
8761: CALL_OW 69
8765: PPUSH
8766: LD_VAR 0 14
8770: PPUSH
8771: CALL_OW 74
8775: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8776: LD_ADDR_VAR 0 23
8780: PUSH
8781: LD_INT 22
8783: PUSH
8784: LD_VAR 0 11
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 2
8795: PUSH
8796: LD_INT 59
8798: PUSH
8799: EMPTY
8800: LIST
8801: PUSH
8802: LD_INT 21
8804: PUSH
8805: LD_INT 1
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 21
8814: PUSH
8815: LD_INT 2
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: EMPTY
8833: LIST
8834: PPUSH
8835: CALL_OW 69
8839: PPUSH
8840: LD_VAR 0 14
8844: PPUSH
8845: CALL_OW 74
8849: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8850: LD_VAR 0 14
8854: PPUSH
8855: LD_VAR 0 22
8859: PPUSH
8860: CALL_OW 296
8864: PUSH
8865: LD_INT 8
8867: PLUS
8868: PUSH
8869: LD_VAR 0 14
8873: PPUSH
8874: LD_VAR 0 23
8878: PPUSH
8879: CALL_OW 296
8883: LESS
8884: IFFALSE 8902
// begin ComAttackUnit ( i , target1 ) ;
8886: LD_VAR 0 14
8890: PPUSH
8891: LD_VAR 0 22
8895: PPUSH
8896: CALL_OW 115
// end else
8900: GO 8916
// begin ComAttackUnit ( i , target2 ) ;
8902: LD_VAR 0 14
8906: PPUSH
8907: LD_VAR 0 23
8911: PPUSH
8912: CALL_OW 115
// end ; end ;
8916: GO 8741
8918: POP
8919: POP
// until soldiersOK_list = [ ] ;
8920: LD_VAR 0 19
8924: PUSH
8925: EMPTY
8926: EQUAL
8927: IFFALSE 8524
// end ; if strategy = 2 then
8929: LD_VAR 0 12
8933: PUSH
8934: LD_INT 2
8936: EQUAL
8937: IFFALSE 9391
// begin for i in soldiersOK_list do
8939: LD_ADDR_VAR 0 14
8943: PUSH
8944: LD_VAR 0 19
8948: PUSH
8949: FOR_IN
8950: IFFALSE 8984
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8952: LD_VAR 0 14
8956: PPUSH
8957: LD_INT 91
8959: PPUSH
8960: LD_INT 63
8962: PPUSH
8963: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8967: LD_VAR 0 14
8971: PPUSH
8972: LD_INT 75
8974: PPUSH
8975: LD_INT 33
8977: PPUSH
8978: CALL_OW 174
// end ;
8982: GO 8949
8984: POP
8985: POP
// repeat wait ( 0 0$3 ) ;
8986: LD_INT 105
8988: PPUSH
8989: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8993: LD_ADDR_VAR 0 17
8997: PUSH
8998: LD_INT 22
9000: PUSH
9001: LD_VAR 0 1
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: PUSH
9010: LD_INT 1
9012: PUSH
9013: LD_INT 3
9015: PUSH
9016: LD_INT 24
9018: PUSH
9019: LD_INT 550
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: LD_INT 24
9032: PUSH
9033: LD_INT 250
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: LIST
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PPUSH
9049: CALL_OW 69
9053: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9054: LD_ADDR_VAR 0 19
9058: PUSH
9059: LD_INT 22
9061: PUSH
9062: LD_VAR 0 1
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PUSH
9071: LD_INT 2
9073: PUSH
9074: LD_INT 25
9076: PUSH
9077: LD_INT 1
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: LD_INT 25
9086: PUSH
9087: LD_INT 5
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PUSH
9094: LD_INT 25
9096: PUSH
9097: LD_INT 8
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PUSH
9104: LD_INT 25
9106: PUSH
9107: LD_INT 9
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: PUSH
9121: LD_INT 24
9123: PUSH
9124: LD_INT 1000
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: PPUSH
9136: CALL_OW 69
9140: ST_TO_ADDR
// if medicCount > 0 then
9141: LD_VAR 0 7
9145: PUSH
9146: LD_INT 0
9148: GREATER
9149: IFFALSE 9193
// begin if damageUnit_list > 0 then
9151: LD_VAR 0 17
9155: PUSH
9156: LD_INT 0
9158: GREATER
9159: IFFALSE 9193
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
9161: LD_VAR 0 17
9165: PPUSH
9166: LD_VAR 0 10
9170: PPUSH
9171: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
9175: LD_VAR 0 7
9179: PPUSH
9180: LD_VAR 0 17
9184: PUSH
9185: LD_INT 1
9187: ARRAY
9188: PPUSH
9189: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
9193: LD_ADDR_VAR 0 14
9197: PUSH
9198: LD_VAR 0 19
9202: PUSH
9203: FOR_IN
9204: IFFALSE 9380
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9206: LD_ADDR_VAR 0 22
9210: PUSH
9211: LD_INT 22
9213: PUSH
9214: LD_VAR 0 11
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: PPUSH
9223: CALL_OW 69
9227: PPUSH
9228: LD_VAR 0 14
9232: PPUSH
9233: CALL_OW 74
9237: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9238: LD_ADDR_VAR 0 23
9242: PUSH
9243: LD_INT 22
9245: PUSH
9246: LD_VAR 0 11
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_INT 2
9257: PUSH
9258: LD_INT 59
9260: PUSH
9261: EMPTY
9262: LIST
9263: PUSH
9264: LD_INT 21
9266: PUSH
9267: LD_INT 1
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 21
9276: PUSH
9277: LD_INT 2
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: PPUSH
9297: CALL_OW 69
9301: PPUSH
9302: LD_VAR 0 14
9306: PPUSH
9307: CALL_OW 74
9311: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9312: LD_VAR 0 14
9316: PPUSH
9317: LD_VAR 0 22
9321: PPUSH
9322: CALL_OW 296
9326: PUSH
9327: LD_INT 8
9329: PLUS
9330: PUSH
9331: LD_VAR 0 14
9335: PPUSH
9336: LD_VAR 0 23
9340: PPUSH
9341: CALL_OW 296
9345: LESS
9346: IFFALSE 9364
// begin ComAttackUnit ( i , target1 ) ;
9348: LD_VAR 0 14
9352: PPUSH
9353: LD_VAR 0 22
9357: PPUSH
9358: CALL_OW 115
// end else
9362: GO 9378
// begin ComAttackUnit ( i , target2 ) ;
9364: LD_VAR 0 14
9368: PPUSH
9369: LD_VAR 0 23
9373: PPUSH
9374: CALL_OW 115
// end ; end ;
9378: GO 9203
9380: POP
9381: POP
// until soldiersOK_list = [ ] ;
9382: LD_VAR 0 19
9386: PUSH
9387: EMPTY
9388: EQUAL
9389: IFFALSE 8986
// end ; if not soldiersOK_list and medic_list then
9391: LD_VAR 0 19
9395: NOT
9396: PUSH
9397: LD_VAR 0 18
9401: AND
9402: IFFALSE 9542
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
9404: LD_ADDR_VAR 0 18
9408: PUSH
9409: LD_INT 22
9411: PUSH
9412: LD_VAR 0 1
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: LD_INT 25
9423: PUSH
9424: LD_INT 4
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 50
9433: PUSH
9434: EMPTY
9435: LIST
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: LIST
9441: PPUSH
9442: CALL_OW 69
9446: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9447: LD_INT 35
9449: PPUSH
9450: CALL_OW 67
// for i in medic_list do
9454: LD_ADDR_VAR 0 14
9458: PUSH
9459: LD_VAR 0 18
9463: PUSH
9464: FOR_IN
9465: IFFALSE 9533
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
9467: LD_VAR 0 14
9471: PPUSH
9472: CALL_OW 314
9476: NOT
9477: PUSH
9478: LD_VAR 0 14
9482: PPUSH
9483: LD_INT 4
9485: PPUSH
9486: CALL_OW 308
9490: NOT
9491: AND
9492: IFFALSE 9508
// ComMoveToArea ( i , RussianAttack ) else
9494: LD_VAR 0 14
9498: PPUSH
9499: LD_INT 4
9501: PPUSH
9502: CALL_OW 113
9506: GO 9531
// if IsInArea ( i , RussianAttack ) then
9508: LD_VAR 0 14
9512: PPUSH
9513: LD_INT 4
9515: PPUSH
9516: CALL_OW 308
9520: IFFALSE 9531
// RemoveUnit ( i ) ;
9522: LD_VAR 0 14
9526: PPUSH
9527: CALL_OW 64
9531: GO 9464
9533: POP
9534: POP
// until not medic_list ;
9535: LD_VAR 0 18
9539: NOT
9540: IFFALSE 9404
// end ; end ;
9542: LD_VAR 0 13
9546: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9547: LD_INT 0
9549: PPUSH
9550: PPUSH
9551: PPUSH
9552: PPUSH
9553: PPUSH
9554: PPUSH
9555: PPUSH
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
// amChassisTab = [ ] ;
9560: LD_ADDR_VAR 0 19
9564: PUSH
9565: EMPTY
9566: ST_TO_ADDR
// arChassisTab = [ ] ;
9567: LD_ADDR_VAR 0 18
9571: PUSH
9572: EMPTY
9573: ST_TO_ADDR
// ruChassisTab = [ ] ;
9574: LD_ADDR_VAR 0 17
9578: PUSH
9579: EMPTY
9580: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9581: LD_INT 35
9583: PPUSH
9584: CALL_OW 67
// if nation = 1 then
9588: LD_VAR 0 5
9592: PUSH
9593: LD_INT 1
9595: EQUAL
9596: IFFALSE 10087
// begin uc_side = side ;
9598: LD_ADDR_OWVAR 20
9602: PUSH
9603: LD_VAR 0 2
9607: ST_TO_ADDR
// uc_nation = nation ;
9608: LD_ADDR_OWVAR 21
9612: PUSH
9613: LD_VAR 0 5
9617: ST_TO_ADDR
// vc_engine = vehengine ;
9618: LD_ADDR_OWVAR 39
9622: PUSH
9623: LD_VAR 0 6
9627: ST_TO_ADDR
// vc_control = vehcontrol ;
9628: LD_ADDR_OWVAR 38
9632: PUSH
9633: LD_VAR 0 7
9637: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9638: LD_ADDR_OWVAR 40
9642: PUSH
9643: LD_VAR 0 10
9647: PUSH
9648: LD_INT 1
9650: PPUSH
9651: LD_VAR 0 10
9655: PPUSH
9656: CALL_OW 12
9660: ARRAY
9661: ST_TO_ADDR
// for j = 1 to AMWeapon do
9662: LD_ADDR_VAR 0 14
9666: PUSH
9667: DOUBLE
9668: LD_INT 1
9670: DEC
9671: ST_TO_ADDR
9672: LD_VAR 0 10
9676: PUSH
9677: FOR_TO
9678: IFFALSE 9979
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9680: LD_VAR 0 10
9684: PUSH
9685: LD_VAR 0 14
9689: ARRAY
9690: PUSH
9691: LD_INT 2
9693: EQUAL
9694: PUSH
9695: LD_VAR 0 10
9699: PUSH
9700: LD_VAR 0 14
9704: ARRAY
9705: PUSH
9706: LD_INT 3
9708: EQUAL
9709: OR
9710: IFFALSE 9763
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9712: LD_ADDR_VAR 0 19
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: LD_INT 2
9722: PUSH
9723: LD_INT 3
9725: PUSH
9726: LD_INT 4
9728: PUSH
9729: LD_INT 5
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9739: LD_ADDR_OWVAR 37
9743: PUSH
9744: LD_VAR 0 19
9748: PUSH
9749: LD_INT 1
9751: PPUSH
9752: LD_VAR 0 19
9756: PPUSH
9757: CALL_OW 12
9761: ARRAY
9762: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9763: LD_VAR 0 10
9767: PUSH
9768: LD_VAR 0 14
9772: ARRAY
9773: PUSH
9774: LD_INT 4
9776: EQUAL
9777: PUSH
9778: LD_VAR 0 10
9782: PUSH
9783: LD_VAR 0 14
9787: ARRAY
9788: PUSH
9789: LD_INT 5
9791: EQUAL
9792: OR
9793: PUSH
9794: LD_VAR 0 10
9798: PUSH
9799: LD_VAR 0 14
9803: ARRAY
9804: PUSH
9805: LD_INT 9
9807: EQUAL
9808: OR
9809: PUSH
9810: LD_VAR 0 10
9814: PUSH
9815: LD_VAR 0 14
9819: ARRAY
9820: PUSH
9821: LD_INT 11
9823: EQUAL
9824: OR
9825: PUSH
9826: LD_VAR 0 10
9830: PUSH
9831: LD_VAR 0 14
9835: ARRAY
9836: PUSH
9837: LD_INT 7
9839: EQUAL
9840: OR
9841: IFFALSE 9890
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9843: LD_ADDR_VAR 0 19
9847: PUSH
9848: LD_INT 2
9850: PUSH
9851: LD_INT 3
9853: PUSH
9854: LD_INT 4
9856: PUSH
9857: LD_INT 5
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9866: LD_ADDR_OWVAR 37
9870: PUSH
9871: LD_VAR 0 19
9875: PUSH
9876: LD_INT 1
9878: PPUSH
9879: LD_VAR 0 19
9883: PPUSH
9884: CALL_OW 12
9888: ARRAY
9889: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9890: LD_VAR 0 10
9894: PUSH
9895: LD_VAR 0 14
9899: ARRAY
9900: PUSH
9901: LD_INT 8
9903: EQUAL
9904: PUSH
9905: LD_VAR 0 10
9909: PUSH
9910: LD_VAR 0 14
9914: ARRAY
9915: PUSH
9916: LD_INT 6
9918: EQUAL
9919: OR
9920: PUSH
9921: LD_VAR 0 10
9925: PUSH
9926: LD_VAR 0 14
9930: ARRAY
9931: PUSH
9932: LD_INT 10
9934: EQUAL
9935: OR
9936: IFFALSE 9977
// begin amChassisTab = [ 4 , 5 ] ;
9938: LD_ADDR_VAR 0 19
9942: PUSH
9943: LD_INT 4
9945: PUSH
9946: LD_INT 5
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9953: LD_ADDR_OWVAR 37
9957: PUSH
9958: LD_VAR 0 19
9962: PUSH
9963: LD_INT 1
9965: PPUSH
9966: LD_VAR 0 19
9970: PPUSH
9971: CALL_OW 12
9975: ARRAY
9976: ST_TO_ADDR
// end ; end ;
9977: GO 9677
9979: POP
9980: POP
// veh = CreateVehicle ;
9981: LD_ADDR_VAR 0 16
9985: PUSH
9986: CALL_OW 45
9990: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9991: LD_VAR 0 16
9995: PPUSH
9996: LD_VAR 0 1
10000: PPUSH
10001: LD_INT 0
10003: PPUSH
10004: CALL_OW 49
// if vehControl = 1 then
10008: LD_VAR 0 7
10012: PUSH
10013: LD_INT 1
10015: EQUAL
10016: IFFALSE 10073
// begin hc_gallery =  ;
10018: LD_ADDR_OWVAR 33
10022: PUSH
10023: LD_STRING 
10025: ST_TO_ADDR
// hc_name =  ;
10026: LD_ADDR_OWVAR 26
10030: PUSH
10031: LD_STRING 
10033: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10034: LD_INT 0
10036: PPUSH
10037: LD_INT 3
10039: PPUSH
10040: LD_VAR 0 4
10044: PPUSH
10045: CALL_OW 380
// un = CreateHuman ;
10049: LD_ADDR_VAR 0 15
10053: PUSH
10054: CALL_OW 44
10058: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10059: LD_VAR 0 15
10063: PPUSH
10064: LD_VAR 0 16
10068: PPUSH
10069: CALL_OW 52
// end ; i = i + 1 ;
10073: LD_ADDR_VAR 0 13
10077: PUSH
10078: LD_VAR 0 13
10082: PUSH
10083: LD_INT 1
10085: PLUS
10086: ST_TO_ADDR
// end ; if nation = 2 then
10087: LD_VAR 0 5
10091: PUSH
10092: LD_INT 2
10094: EQUAL
10095: IFFALSE 10519
// begin uc_side = side ;
10097: LD_ADDR_OWVAR 20
10101: PUSH
10102: LD_VAR 0 2
10106: ST_TO_ADDR
// uc_nation = nation ;
10107: LD_ADDR_OWVAR 21
10111: PUSH
10112: LD_VAR 0 5
10116: ST_TO_ADDR
// vc_engine = vehengine ;
10117: LD_ADDR_OWVAR 39
10121: PUSH
10122: LD_VAR 0 6
10126: ST_TO_ADDR
// vc_control = vehcontrol ;
10127: LD_ADDR_OWVAR 38
10131: PUSH
10132: LD_VAR 0 7
10136: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10137: LD_ADDR_OWVAR 40
10141: PUSH
10142: LD_VAR 0 9
10146: PUSH
10147: LD_INT 1
10149: PPUSH
10150: LD_VAR 0 9
10154: PPUSH
10155: CALL_OW 12
10159: ARRAY
10160: ST_TO_ADDR
// for j = 1 to ARWeapons do
10161: LD_ADDR_VAR 0 14
10165: PUSH
10166: DOUBLE
10167: LD_INT 1
10169: DEC
10170: ST_TO_ADDR
10171: LD_VAR 0 9
10175: PUSH
10176: FOR_TO
10177: IFFALSE 10411
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10179: LD_VAR 0 9
10183: PUSH
10184: LD_VAR 0 14
10188: ARRAY
10189: PUSH
10190: LD_INT 24
10192: EQUAL
10193: PUSH
10194: LD_VAR 0 9
10198: PUSH
10199: LD_VAR 0 14
10203: ARRAY
10204: PUSH
10205: LD_INT 22
10207: EQUAL
10208: OR
10209: PUSH
10210: LD_VAR 0 9
10214: PUSH
10215: LD_VAR 0 14
10219: ARRAY
10220: PUSH
10221: LD_INT 23
10223: EQUAL
10224: OR
10225: PUSH
10226: LD_VAR 0 9
10230: PUSH
10231: LD_VAR 0 14
10235: ARRAY
10236: PUSH
10237: LD_INT 30
10239: EQUAL
10240: OR
10241: IFFALSE 10290
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10243: LD_ADDR_VAR 0 18
10247: PUSH
10248: LD_INT 11
10250: PUSH
10251: LD_INT 12
10253: PUSH
10254: LD_INT 13
10256: PUSH
10257: LD_INT 14
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10266: LD_ADDR_OWVAR 37
10270: PUSH
10271: LD_VAR 0 18
10275: PUSH
10276: LD_INT 1
10278: PPUSH
10279: LD_VAR 0 18
10283: PPUSH
10284: CALL_OW 12
10288: ARRAY
10289: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10290: LD_VAR 0 9
10294: PUSH
10295: LD_VAR 0 14
10299: ARRAY
10300: PUSH
10301: LD_INT 29
10303: EQUAL
10304: PUSH
10305: LD_VAR 0 9
10309: PUSH
10310: LD_VAR 0 14
10314: ARRAY
10315: PUSH
10316: LD_INT 28
10318: EQUAL
10319: OR
10320: PUSH
10321: LD_VAR 0 9
10325: PUSH
10326: LD_VAR 0 14
10330: ARRAY
10331: PUSH
10332: LD_INT 27
10334: EQUAL
10335: OR
10336: PUSH
10337: LD_VAR 0 9
10341: PUSH
10342: LD_VAR 0 14
10346: ARRAY
10347: PUSH
10348: LD_INT 26
10350: EQUAL
10351: OR
10352: PUSH
10353: LD_VAR 0 9
10357: PUSH
10358: LD_VAR 0 14
10362: ARRAY
10363: PUSH
10364: LD_INT 25
10366: EQUAL
10367: OR
10368: IFFALSE 10409
// begin arChassisTab = [ 13 , 14 ] ;
10370: LD_ADDR_VAR 0 18
10374: PUSH
10375: LD_INT 13
10377: PUSH
10378: LD_INT 14
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10385: LD_ADDR_OWVAR 37
10389: PUSH
10390: LD_VAR 0 18
10394: PUSH
10395: LD_INT 1
10397: PPUSH
10398: LD_VAR 0 18
10402: PPUSH
10403: CALL_OW 12
10407: ARRAY
10408: ST_TO_ADDR
// end ; end ;
10409: GO 10176
10411: POP
10412: POP
// veh = CreateVehicle ;
10413: LD_ADDR_VAR 0 16
10417: PUSH
10418: CALL_OW 45
10422: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10423: LD_VAR 0 16
10427: PPUSH
10428: LD_VAR 0 1
10432: PPUSH
10433: LD_INT 0
10435: PPUSH
10436: CALL_OW 49
// if vehcontrol = 1 then
10440: LD_VAR 0 7
10444: PUSH
10445: LD_INT 1
10447: EQUAL
10448: IFFALSE 10505
// begin hc_gallery =  ;
10450: LD_ADDR_OWVAR 33
10454: PUSH
10455: LD_STRING 
10457: ST_TO_ADDR
// hc_name =  ;
10458: LD_ADDR_OWVAR 26
10462: PUSH
10463: LD_STRING 
10465: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10466: LD_INT 0
10468: PPUSH
10469: LD_INT 3
10471: PPUSH
10472: LD_VAR 0 4
10476: PPUSH
10477: CALL_OW 380
// un = CreateHuman ;
10481: LD_ADDR_VAR 0 15
10485: PUSH
10486: CALL_OW 44
10490: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10491: LD_VAR 0 15
10495: PPUSH
10496: LD_VAR 0 16
10500: PPUSH
10501: CALL_OW 52
// end ; i = i + 1 ;
10505: LD_ADDR_VAR 0 13
10509: PUSH
10510: LD_VAR 0 13
10514: PUSH
10515: LD_INT 1
10517: PLUS
10518: ST_TO_ADDR
// end ; if nation = 3 then
10519: LD_VAR 0 5
10523: PUSH
10524: LD_INT 3
10526: EQUAL
10527: IFFALSE 10919
// begin uc_side = side ;
10529: LD_ADDR_OWVAR 20
10533: PUSH
10534: LD_VAR 0 2
10538: ST_TO_ADDR
// uc_nation = nation ;
10539: LD_ADDR_OWVAR 21
10543: PUSH
10544: LD_VAR 0 5
10548: ST_TO_ADDR
// vc_engine = vehengine ;
10549: LD_ADDR_OWVAR 39
10553: PUSH
10554: LD_VAR 0 6
10558: ST_TO_ADDR
// vc_control = vehcontrol ;
10559: LD_ADDR_OWVAR 38
10563: PUSH
10564: LD_VAR 0 7
10568: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10569: LD_ADDR_OWVAR 40
10573: PUSH
10574: LD_VAR 0 8
10578: PUSH
10579: LD_INT 1
10581: PPUSH
10582: LD_VAR 0 8
10586: PPUSH
10587: CALL_OW 12
10591: ARRAY
10592: ST_TO_ADDR
// for j = 1 to RuWeapons do
10593: LD_ADDR_VAR 0 14
10597: PUSH
10598: DOUBLE
10599: LD_INT 1
10601: DEC
10602: ST_TO_ADDR
10603: LD_VAR 0 8
10607: PUSH
10608: FOR_TO
10609: IFFALSE 10811
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10611: LD_VAR 0 8
10615: PUSH
10616: LD_VAR 0 14
10620: ARRAY
10621: PUSH
10622: LD_INT 42
10624: EQUAL
10625: PUSH
10626: LD_VAR 0 8
10630: PUSH
10631: LD_VAR 0 14
10635: ARRAY
10636: PUSH
10637: LD_INT 43
10639: EQUAL
10640: OR
10641: PUSH
10642: LD_VAR 0 8
10646: PUSH
10647: LD_VAR 0 14
10651: ARRAY
10652: PUSH
10653: LD_INT 44
10655: EQUAL
10656: OR
10657: PUSH
10658: LD_VAR 0 8
10662: PUSH
10663: LD_VAR 0 14
10667: ARRAY
10668: PUSH
10669: LD_INT 45
10671: EQUAL
10672: OR
10673: PUSH
10674: LD_VAR 0 8
10678: PUSH
10679: LD_VAR 0 14
10683: ARRAY
10684: PUSH
10685: LD_INT 49
10687: EQUAL
10688: OR
10689: IFFALSE 10738
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10691: LD_ADDR_VAR 0 17
10695: PUSH
10696: LD_INT 21
10698: PUSH
10699: LD_INT 22
10701: PUSH
10702: LD_INT 23
10704: PUSH
10705: LD_INT 24
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10714: LD_ADDR_OWVAR 37
10718: PUSH
10719: LD_VAR 0 17
10723: PUSH
10724: LD_INT 1
10726: PPUSH
10727: LD_VAR 0 17
10731: PPUSH
10732: CALL_OW 12
10736: ARRAY
10737: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10738: LD_VAR 0 8
10742: PUSH
10743: LD_VAR 0 14
10747: ARRAY
10748: PUSH
10749: LD_INT 46
10751: EQUAL
10752: PUSH
10753: LD_VAR 0 8
10757: PUSH
10758: LD_VAR 0 14
10762: ARRAY
10763: PUSH
10764: LD_INT 47
10766: EQUAL
10767: OR
10768: IFFALSE 10809
// begin ruChassisTab = [ 23 , 24 ] ;
10770: LD_ADDR_VAR 0 17
10774: PUSH
10775: LD_INT 23
10777: PUSH
10778: LD_INT 24
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10785: LD_ADDR_OWVAR 37
10789: PUSH
10790: LD_VAR 0 17
10794: PUSH
10795: LD_INT 1
10797: PPUSH
10798: LD_VAR 0 17
10802: PPUSH
10803: CALL_OW 12
10807: ARRAY
10808: ST_TO_ADDR
// end ; end ;
10809: GO 10608
10811: POP
10812: POP
// veh = CreateVehicle ;
10813: LD_ADDR_VAR 0 16
10817: PUSH
10818: CALL_OW 45
10822: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10823: LD_VAR 0 16
10827: PPUSH
10828: LD_VAR 0 1
10832: PPUSH
10833: LD_INT 0
10835: PPUSH
10836: CALL_OW 49
// if vehcontrol = 1 then
10840: LD_VAR 0 7
10844: PUSH
10845: LD_INT 1
10847: EQUAL
10848: IFFALSE 10905
// begin hc_gallery =  ;
10850: LD_ADDR_OWVAR 33
10854: PUSH
10855: LD_STRING 
10857: ST_TO_ADDR
// hc_name =  ;
10858: LD_ADDR_OWVAR 26
10862: PUSH
10863: LD_STRING 
10865: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10866: LD_INT 0
10868: PPUSH
10869: LD_INT 3
10871: PPUSH
10872: LD_VAR 0 4
10876: PPUSH
10877: CALL_OW 380
// un = CreateHuman ;
10881: LD_ADDR_VAR 0 15
10885: PUSH
10886: CALL_OW 44
10890: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10891: LD_VAR 0 15
10895: PPUSH
10896: LD_VAR 0 16
10900: PPUSH
10901: CALL_OW 52
// end ; i = i + 1 ;
10905: LD_ADDR_VAR 0 13
10909: PUSH
10910: LD_VAR 0 13
10914: PUSH
10915: LD_INT 1
10917: PLUS
10918: ST_TO_ADDR
// end ; until i = vehCount ;
10919: LD_VAR 0 13
10923: PUSH
10924: LD_VAR 0 3
10928: EQUAL
10929: IFFALSE 9581
// repeat wait ( 0 0$1 ) ;
10931: LD_INT 35
10933: PPUSH
10934: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10938: LD_INT 22
10940: PUSH
10941: LD_VAR 0 2
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: LD_INT 21
10952: PUSH
10953: LD_INT 2
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PUSH
10960: LD_INT 24
10962: PUSH
10963: LD_INT 250
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: LD_INT 3
10972: PUSH
10973: LD_INT 58
10975: PUSH
10976: EMPTY
10977: LIST
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: PPUSH
10989: CALL_OW 69
10993: PUSH
10994: LD_INT 0
10996: GREATER
10997: IFFALSE 11239
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
10999: LD_ADDR_VAR 0 13
11003: PUSH
11004: LD_INT 22
11006: PUSH
11007: LD_VAR 0 2
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PUSH
11016: LD_INT 21
11018: PUSH
11019: LD_INT 2
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 24
11028: PUSH
11029: LD_INT 250
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PUSH
11036: LD_INT 3
11038: PUSH
11039: LD_INT 58
11041: PUSH
11042: EMPTY
11043: LIST
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: PPUSH
11055: CALL_OW 69
11059: PUSH
11060: FOR_IN
11061: IFFALSE 11237
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11063: LD_ADDR_VAR 0 21
11067: PUSH
11068: LD_INT 22
11070: PUSH
11071: LD_VAR 0 11
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PPUSH
11080: CALL_OW 69
11084: PPUSH
11085: LD_VAR 0 13
11089: PPUSH
11090: CALL_OW 74
11094: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11095: LD_ADDR_VAR 0 22
11099: PUSH
11100: LD_INT 22
11102: PUSH
11103: LD_VAR 0 11
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: LD_INT 2
11114: PUSH
11115: LD_INT 59
11117: PUSH
11118: EMPTY
11119: LIST
11120: PUSH
11121: LD_INT 21
11123: PUSH
11124: LD_INT 1
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 21
11133: PUSH
11134: LD_INT 2
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: EMPTY
11152: LIST
11153: PPUSH
11154: CALL_OW 69
11158: PPUSH
11159: LD_VAR 0 13
11163: PPUSH
11164: CALL_OW 74
11168: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11169: LD_VAR 0 13
11173: PPUSH
11174: LD_VAR 0 21
11178: PPUSH
11179: CALL_OW 296
11183: PUSH
11184: LD_INT 8
11186: PLUS
11187: PUSH
11188: LD_VAR 0 13
11192: PPUSH
11193: LD_VAR 0 22
11197: PPUSH
11198: CALL_OW 296
11202: LESS
11203: IFFALSE 11221
// begin ComAttackUnit ( i , target1 ) ;
11205: LD_VAR 0 13
11209: PPUSH
11210: LD_VAR 0 21
11214: PPUSH
11215: CALL_OW 115
// end else
11219: GO 11235
// begin ComAttackUnit ( i , target2 ) ;
11221: LD_VAR 0 13
11225: PPUSH
11226: LD_VAR 0 22
11230: PPUSH
11231: CALL_OW 115
// end ; end ;
11235: GO 11060
11237: POP
11238: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11239: LD_INT 22
11241: PUSH
11242: LD_VAR 0 2
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 21
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: LD_INT 24
11263: PUSH
11264: LD_INT 250
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 3
11273: PUSH
11274: LD_INT 58
11276: PUSH
11277: EMPTY
11278: LIST
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: PPUSH
11290: CALL_OW 69
11294: PUSH
11295: LD_INT 0
11297: EQUAL
11298: IFFALSE 10931
// end ; end_of_file
11300: LD_VAR 0 12
11304: RET
// every 1 do var i , gammaSquad , startX , startY ;
11305: GO 11307
11307: DISABLE
11308: LD_INT 0
11310: PPUSH
11311: PPUSH
11312: PPUSH
11313: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11314: LD_ADDR_VAR 0 2
11318: PUSH
11319: LD_EXP 8
11323: PUSH
11324: LD_EXP 9
11328: PUSH
11329: LD_EXP 10
11333: PUSH
11334: LD_EXP 11
11338: PUSH
11339: LD_EXP 12
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11351: LD_ADDR_VAR 0 3
11355: PUSH
11356: LD_INT 46
11358: PUSH
11359: LD_INT 45
11361: PUSH
11362: LD_INT 44
11364: PUSH
11365: LD_INT 43
11367: PUSH
11368: LD_INT 42
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11378: LD_ADDR_VAR 0 4
11382: PUSH
11383: LD_INT 14
11385: PUSH
11386: LD_INT 12
11388: PUSH
11389: LD_INT 10
11391: PUSH
11392: LD_INT 8
11394: PUSH
11395: LD_INT 6
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
11405: LD_EXP 11
11409: PPUSH
11410: LD_INT 31
11412: PPUSH
11413: LD_INT 59
11415: PPUSH
11416: LD_INT 19
11418: PPUSH
11419: LD_INT 5
11421: PPUSH
11422: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
11426: LD_INT 32
11428: PPUSH
11429: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11433: LD_INT 32
11435: PPUSH
11436: LD_INT 51
11438: PPUSH
11439: LD_INT 26
11441: PPUSH
11442: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11446: LD_INT 32
11448: PPUSH
11449: LD_INT 53
11451: PPUSH
11452: LD_INT 23
11454: PPUSH
11455: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11459: LD_INT 32
11461: PPUSH
11462: LD_INT 52
11464: PPUSH
11465: LD_INT 19
11467: PPUSH
11468: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11472: LD_INT 35
11474: PPUSH
11475: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11479: LD_INT 32
11481: PPUSH
11482: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11486: LD_INT 32
11488: PPUSH
11489: CALL_OW 250
11493: PUSH
11494: LD_INT 52
11496: EQUAL
11497: PUSH
11498: LD_INT 32
11500: PPUSH
11501: CALL_OW 251
11505: PUSH
11506: LD_INT 19
11508: EQUAL
11509: AND
11510: IFFALSE 11472
// ComExitVehicle ( JMM ) ;
11512: LD_EXP 1
11516: PPUSH
11517: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11521: LD_EXP 7
11525: PPUSH
11526: LD_EXP 1
11530: PPUSH
11531: CALL_OW 119
// wait ( 0 0$01 ) ;
11535: LD_INT 35
11537: PPUSH
11538: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11542: LD_EXP 1
11546: PPUSH
11547: LD_INT 46
11549: PPUSH
11550: LD_INT 10
11552: PPUSH
11553: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11557: LD_EXP 1
11561: PPUSH
11562: LD_EXP 7
11566: PPUSH
11567: CALL_OW 179
// wait ( 0 0$4 ) ;
11571: LD_INT 140
11573: PPUSH
11574: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11578: LD_EXP 1
11582: PPUSH
11583: LD_STRING D1-JMM-1
11585: PPUSH
11586: CALL_OW 88
// if not dialogue_skipped then
11590: LD_OWVAR 59
11594: NOT
11595: IFFALSE 12252
// begin for i := 1 to gammaSquad do
11597: LD_ADDR_VAR 0 1
11601: PUSH
11602: DOUBLE
11603: LD_INT 1
11605: DEC
11606: ST_TO_ADDR
11607: LD_VAR 0 2
11611: PUSH
11612: FOR_TO
11613: IFFALSE 11674
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11615: LD_VAR 0 2
11619: PUSH
11620: LD_VAR 0 1
11624: ARRAY
11625: PPUSH
11626: LD_VAR 0 3
11630: PUSH
11631: LD_VAR 0 1
11635: ARRAY
11636: PPUSH
11637: LD_VAR 0 4
11641: PUSH
11642: LD_VAR 0 1
11646: ARRAY
11647: PPUSH
11648: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11652: LD_VAR 0 2
11656: PUSH
11657: LD_VAR 0 1
11661: ARRAY
11662: PPUSH
11663: LD_EXP 1
11667: PPUSH
11668: CALL_OW 179
// end ;
11672: GO 11612
11674: POP
11675: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11676: LD_EXP 4
11680: PPUSH
11681: LD_INT 41
11683: PPUSH
11684: LD_INT 4
11686: PPUSH
11687: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11691: LD_EXP 4
11695: PPUSH
11696: LD_EXP 1
11700: PPUSH
11701: CALL_OW 179
// if Lisa = false and Bobby then
11705: LD_EXP 4
11709: PUSH
11710: LD_INT 0
11712: EQUAL
11713: PUSH
11714: LD_EXP 2
11718: AND
11719: IFFALSE 11750
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11721: LD_EXP 2
11725: PPUSH
11726: LD_INT 41
11728: PPUSH
11729: LD_INT 4
11731: PPUSH
11732: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11736: LD_EXP 2
11740: PPUSH
11741: LD_EXP 1
11745: PPUSH
11746: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11750: LD_EXP 4
11754: PUSH
11755: LD_INT 0
11757: EQUAL
11758: PUSH
11759: LD_EXP 2
11763: PUSH
11764: LD_INT 0
11766: EQUAL
11767: AND
11768: PUSH
11769: LD_EXP 3
11773: AND
11774: IFFALSE 11805
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11776: LD_EXP 3
11780: PPUSH
11781: LD_INT 41
11783: PPUSH
11784: LD_INT 4
11786: PPUSH
11787: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11791: LD_EXP 3
11795: PPUSH
11796: LD_EXP 1
11800: PPUSH
11801: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11805: LD_EXP 4
11809: PUSH
11810: LD_INT 0
11812: EQUAL
11813: PUSH
11814: LD_EXP 2
11818: PUSH
11819: LD_INT 0
11821: EQUAL
11822: AND
11823: PUSH
11824: LD_EXP 3
11828: PUSH
11829: LD_INT 0
11831: EQUAL
11832: AND
11833: IFFALSE 11864
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11835: LD_EXP 6
11839: PPUSH
11840: LD_INT 41
11842: PPUSH
11843: LD_INT 4
11845: PPUSH
11846: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11850: LD_EXP 6
11854: PPUSH
11855: LD_EXP 1
11859: PPUSH
11860: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11864: LD_EXP 7
11868: PPUSH
11869: LD_STRING D1-Brown-1
11871: PPUSH
11872: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11876: LD_EXP 1
11880: PPUSH
11881: LD_STRING D1-JMM-2
11883: PPUSH
11884: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11888: LD_EXP 7
11892: PPUSH
11893: LD_STRING D1-Brown-2
11895: PPUSH
11896: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11900: LD_EXP 1
11904: PPUSH
11905: LD_EXP 9
11909: PPUSH
11910: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11914: LD_EXP 9
11918: PPUSH
11919: LD_STRING D1-FSol1-2
11921: PPUSH
11922: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11926: LD_EXP 1
11930: PPUSH
11931: LD_EXP 8
11935: PPUSH
11936: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11940: LD_EXP 8
11944: PPUSH
11945: LD_STRING D1-Sol2-2
11947: PPUSH
11948: CALL_OW 88
// if Lisa then
11952: LD_EXP 4
11956: IFFALSE 11996
// begin ComTurnUnit ( JMM , Lisa ) ;
11958: LD_EXP 1
11962: PPUSH
11963: LD_EXP 4
11967: PPUSH
11968: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11972: LD_EXP 4
11976: PPUSH
11977: LD_STRING D1-Lisa-2
11979: PPUSH
11980: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11984: LD_EXP 1
11988: PPUSH
11989: LD_STRING D1-JMM-3
11991: PPUSH
11992: CALL_OW 88
// end ; if Bobby then
11996: LD_EXP 2
12000: IFFALSE 12040
// begin ComTurnUnit ( JMM , Bobby ) ;
12002: LD_EXP 1
12006: PPUSH
12007: LD_EXP 2
12011: PPUSH
12012: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
12016: LD_EXP 2
12020: PPUSH
12021: LD_STRING D1-Bobby-2
12023: PPUSH
12024: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12028: LD_EXP 1
12032: PPUSH
12033: LD_STRING D1-JMM-3
12035: PPUSH
12036: CALL_OW 88
// end ; if Cyrus then
12040: LD_EXP 3
12044: IFFALSE 12084
// begin ComTurnUnit ( JMM , Cyrus ) ;
12046: LD_EXP 1
12050: PPUSH
12051: LD_EXP 3
12055: PPUSH
12056: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
12060: LD_EXP 3
12064: PPUSH
12065: LD_STRING D1-Cyrus-2
12067: PPUSH
12068: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12072: LD_EXP 1
12076: PPUSH
12077: LD_STRING D1-JMM-3
12079: PPUSH
12080: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
12084: LD_EXP 1
12088: PPUSH
12089: LD_EXP 7
12093: PPUSH
12094: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
12098: LD_EXP 1
12102: PPUSH
12103: LD_STRING D1-JMM-3a
12105: PPUSH
12106: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
12110: LD_EXP 7
12114: PPUSH
12115: LD_INT 38
12117: PPUSH
12118: LD_INT 5
12120: PPUSH
12121: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
12125: LD_EXP 7
12129: PPUSH
12130: LD_EXP 1
12134: PPUSH
12135: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
12139: LD_EXP 1
12143: PPUSH
12144: LD_INT 40
12146: PPUSH
12147: LD_INT 7
12149: PPUSH
12150: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12154: LD_EXP 1
12158: PPUSH
12159: LD_EXP 7
12163: PPUSH
12164: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12168: LD_EXP 7
12172: PPUSH
12173: LD_STRING D1-Brown-3
12175: PPUSH
12176: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12180: LD_EXP 14
12184: PPUSH
12185: LD_STRING D1-Har-3
12187: PPUSH
12188: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12192: LD_EXP 1
12196: PPUSH
12197: LD_STRING D1-JMM-4
12199: PPUSH
12200: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12204: LD_EXP 14
12208: PPUSH
12209: LD_STRING D1-Har-4
12211: PPUSH
12212: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12216: LD_EXP 1
12220: PPUSH
12221: LD_STRING D1-JMM-5
12223: PPUSH
12224: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12228: LD_EXP 14
12232: PPUSH
12233: LD_STRING D1-Har-5
12235: PPUSH
12236: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12240: LD_EXP 1
12244: PPUSH
12245: LD_STRING D1-JMM-6
12247: PPUSH
12248: CALL_OW 88
// end ; InGameOff ;
12252: CALL_OW 9
// PrepareRussianConvoy ;
12256: CALL 3209 0 0
// ChangeMissionObjectives ( M1 ) ;
12260: LD_STRING M1
12262: PPUSH
12263: CALL_OW 337
// SaveForQuickRestart ;
12267: CALL_OW 22
// timerStatus = 1 ;
12271: LD_ADDR_EXP 29
12275: PUSH
12276: LD_INT 1
12278: ST_TO_ADDR
// startTimer = 1 ;
12279: LD_ADDR_EXP 30
12283: PUSH
12284: LD_INT 1
12286: ST_TO_ADDR
// bonusAvalaible = 1 ;
12287: LD_ADDR_EXP 43
12291: PUSH
12292: LD_INT 1
12294: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12295: LD_INT 105
12297: PPUSH
12298: CALL_OW 67
// DialogueOn ;
12302: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12306: LD_EXP 12
12310: PPUSH
12311: LD_STRING D9-Mech1-1
12313: PPUSH
12314: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12318: LD_EXP 1
12322: PPUSH
12323: LD_STRING D9-JMM-1
12325: PPUSH
12326: CALL_OW 88
// DialogueOff ;
12330: CALL_OW 7
// end ;
12334: PPOPN 4
12336: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
12337: LD_INT 47
12339: PPUSH
12340: LD_INT 1
12342: PPUSH
12343: CALL_OW 321
12347: PUSH
12348: LD_INT 2
12350: EQUAL
12351: PUSH
12352: LD_INT 22
12354: PUSH
12355: LD_INT 1
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PUSH
12362: LD_INT 21
12364: PUSH
12365: LD_INT 3
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: LD_INT 30
12374: PUSH
12375: LD_INT 3
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: LIST
12386: PPUSH
12387: CALL_OW 69
12391: PUSH
12392: LD_INT 0
12394: GREATER
12395: AND
12396: IFFALSE 12626
12398: GO 12400
12400: DISABLE
// begin if IsOk ( Campell ) then
12401: LD_EXP 12
12405: PPUSH
12406: CALL_OW 302
12410: IFFALSE 12426
// begin Say ( Campell , D10-Mech1-1 ) ;
12412: LD_EXP 12
12416: PPUSH
12417: LD_STRING D10-Mech1-1
12419: PPUSH
12420: CALL_OW 88
// end else
12424: GO 12626
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12426: LD_INT 22
12428: PUSH
12429: LD_INT 1
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 21
12438: PUSH
12439: LD_INT 1
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: LD_INT 25
12448: PUSH
12449: LD_INT 3
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 26
12458: PUSH
12459: LD_INT 1
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: PPUSH
12472: CALL_OW 69
12476: PUSH
12477: LD_EXP 1
12481: PUSH
12482: EMPTY
12483: LIST
12484: PUSH
12485: LD_INT 0
12487: GREATER
12488: DIFF
12489: IFFALSE 12563
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12491: LD_INT 22
12493: PUSH
12494: LD_INT 1
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 21
12503: PUSH
12504: LD_INT 1
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 25
12513: PUSH
12514: LD_INT 3
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 26
12523: PUSH
12524: LD_INT 1
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: PPUSH
12537: CALL_OW 69
12541: PUSH
12542: LD_EXP 1
12546: PUSH
12547: EMPTY
12548: LIST
12549: DIFF
12550: PPUSH
12551: LD_STRING D10-Mech1-1
12553: PPUSH
12554: LD_STRING D10-Mech1-1
12556: PPUSH
12557: CALL 4467 0 3
// end else
12561: GO 12626
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12563: LD_INT 22
12565: PUSH
12566: LD_INT 1
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 21
12575: PUSH
12576: LD_INT 1
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PUSH
12583: LD_INT 26
12585: PUSH
12586: LD_INT 1
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: LIST
12597: PUSH
12598: LD_INT 1
12600: ARRAY
12601: PPUSH
12602: CALL_OW 69
12606: PUSH
12607: LD_EXP 1
12611: PUSH
12612: EMPTY
12613: LIST
12614: DIFF
12615: PPUSH
12616: LD_STRING D10-Mech1-1
12618: PPUSH
12619: LD_STRING D10-Mech1-1
12621: PPUSH
12622: CALL 4467 0 3
// end ; end ; end ;
12626: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12627: LD_INT 22
12629: PUSH
12630: LD_INT 1
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PUSH
12637: LD_INT 30
12639: PUSH
12640: LD_INT 32
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PPUSH
12651: CALL_OW 69
12655: PUSH
12656: LD_INT 0
12658: GREATER
12659: PUSH
12660: LD_EXP 32
12664: PUSH
12665: LD_INT 0
12667: EQUAL
12668: AND
12669: IFFALSE 12909
12671: GO 12673
12673: DISABLE
// begin if IsOK ( Claptopn ) then
12674: LD_EXP 11
12678: PPUSH
12679: CALL_OW 302
12683: IFFALSE 12699
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12685: LD_EXP 11
12689: PPUSH
12690: LD_STRING D9b-Eng1-1
12692: PPUSH
12693: CALL_OW 88
// end else
12697: GO 12895
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12699: LD_INT 22
12701: PUSH
12702: LD_INT 1
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 21
12711: PUSH
12712: LD_INT 1
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 25
12721: PUSH
12722: LD_INT 3
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 26
12731: PUSH
12732: LD_INT 1
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: PPUSH
12745: CALL_OW 69
12749: PUSH
12750: LD_EXP 1
12754: PUSH
12755: EMPTY
12756: LIST
12757: PUSH
12758: LD_INT 0
12760: GREATER
12761: DIFF
12762: IFFALSE 12836
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12764: LD_INT 22
12766: PUSH
12767: LD_INT 1
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: LD_INT 21
12776: PUSH
12777: LD_INT 1
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: LD_INT 25
12786: PUSH
12787: LD_INT 2
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: LD_INT 26
12796: PUSH
12797: LD_INT 1
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: PPUSH
12810: CALL_OW 69
12814: PUSH
12815: LD_EXP 1
12819: PUSH
12820: EMPTY
12821: LIST
12822: DIFF
12823: PPUSH
12824: LD_STRING D9b-Eng1-1
12826: PPUSH
12827: LD_STRING D9b-Eng1-11
12829: PPUSH
12830: CALL 4467 0 3
// end else
12834: GO 12895
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12836: LD_INT 22
12838: PUSH
12839: LD_INT 1
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 21
12848: PUSH
12849: LD_INT 1
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 26
12858: PUSH
12859: LD_INT 1
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: PPUSH
12871: CALL_OW 69
12875: PUSH
12876: LD_EXP 1
12880: PUSH
12881: EMPTY
12882: LIST
12883: DIFF
12884: PPUSH
12885: LD_STRING D9b-Eng1-1
12887: PPUSH
12888: LD_STRING D9b-Eng1-1
12890: PPUSH
12891: CALL 4467 0 3
// end ; end ; if energyVDialog = 0 then
12895: LD_EXP 33
12899: PUSH
12900: LD_INT 0
12902: EQUAL
12903: IFFALSE 12909
// EnergyDialog ;
12905: CALL 4870 0 0
// end ;
12909: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12910: LD_EXP 34
12914: PUSH
12915: LD_INT 1
12917: EQUAL
12918: PUSH
12919: LD_EXP 35
12923: PUSH
12924: LD_INT 1
12926: EQUAL
12927: AND
12928: IFFALSE 12940
12930: GO 12932
12932: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12933: LD_STRING M1a
12935: PPUSH
12936: CALL_OW 337
12940: END
// every 3 3$0 do
12941: GO 12943
12943: DISABLE
// begin PrepareFirstAttack ;
12944: CALL 4009 0 0
// end ;
12948: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
12949: LD_INT 22
12951: PUSH
12952: LD_INT 5
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 21
12961: PUSH
12962: LD_INT 1
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: LD_INT 3
12971: PUSH
12972: LD_INT 24
12974: PUSH
12975: LD_INT 250
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: PPUSH
12991: CALL_OW 69
12995: PUSH
12996: LD_INT 0
12998: GREATER
12999: PUSH
13000: LD_EXP 23
13004: PUSH
13005: LD_INT 1
13007: EQUAL
13008: AND
13009: IFFALSE 13310
13011: GO 13013
13013: DISABLE
13014: LD_INT 0
13016: PPUSH
// begin firstRussianAttack = 2 ;
13017: LD_ADDR_EXP 23
13021: PUSH
13022: LD_INT 2
13024: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
13025: LD_INT 22
13027: PUSH
13028: LD_INT 5
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: LD_INT 21
13037: PUSH
13038: LD_INT 1
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PPUSH
13049: CALL_OW 69
13053: PPUSH
13054: LD_INT 125
13056: PPUSH
13057: LD_INT 98
13059: PPUSH
13060: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
13064: LD_INT 22
13066: PUSH
13067: LD_INT 1
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: LD_INT 21
13076: PUSH
13077: LD_INT 1
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PPUSH
13088: CALL_OW 69
13092: PUSH
13093: LD_EXP 1
13097: PUSH
13098: LD_EXP 7
13102: PUSH
13103: LD_EXP 4
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: LIST
13112: DIFF
13113: PPUSH
13114: LD_STRING DAtt1-Sol1-1
13116: PPUSH
13117: LD_STRING DAtt1-FSol1-1
13119: PPUSH
13120: CALL 4467 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
13124: LD_EXP 1
13128: PPUSH
13129: LD_STRING DAtt1-JMM-1
13131: PPUSH
13132: CALL_OW 88
// if Lisa then
13136: LD_EXP 4
13140: IFFALSE 13156
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
13142: LD_EXP 4
13146: PPUSH
13147: LD_STRING DAtt1a-Lisa-1
13149: PPUSH
13150: CALL_OW 88
// end else
13154: GO 13227
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13156: LD_INT 22
13158: PUSH
13159: LD_INT 1
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: LD_INT 21
13168: PUSH
13169: LD_INT 1
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 26
13178: PUSH
13179: LD_INT 1
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: LIST
13190: PPUSH
13191: CALL_OW 69
13195: PUSH
13196: LD_EXP 1
13200: PUSH
13201: LD_EXP 7
13205: PUSH
13206: LD_EXP 4
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: LIST
13215: DIFF
13216: PPUSH
13217: LD_STRING DAtt1a-Sol1-1
13219: PPUSH
13220: LD_STRING DAtt1-FSol1-1
13222: PPUSH
13223: CALL 4467 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13227: LD_EXP 1
13231: PPUSH
13232: LD_STRING DAtt1a-JMM-1
13234: PPUSH
13235: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13239: LD_INT 22
13241: PUSH
13242: LD_INT 1
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: LD_INT 21
13251: PUSH
13252: LD_INT 1
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 26
13261: PUSH
13262: LD_INT 1
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: LIST
13273: PPUSH
13274: CALL_OW 69
13278: PUSH
13279: LD_EXP 1
13283: PUSH
13284: LD_EXP 7
13288: PUSH
13289: LD_EXP 4
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: LIST
13298: DIFF
13299: PPUSH
13300: LD_STRING DAtt1b-Sol1-1
13302: PPUSH
13303: LD_STRING DAtt1a-Sol1-1
13305: PPUSH
13306: CALL 4467 0 3
// end ;
13310: PPOPN 1
13312: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13313: LD_EXP 23
13317: PUSH
13318: LD_INT 2
13320: EQUAL
13321: IFFALSE 13383
13323: GO 13325
13325: DISABLE
13326: LD_INT 0
13328: PPUSH
// begin enable ;
13329: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13330: LD_ADDR_VAR 0 1
13334: PUSH
13335: LD_INT 5
13337: PPUSH
13338: LD_INT 22
13340: PUSH
13341: LD_INT 5
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 21
13350: PUSH
13351: LD_INT 1
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PPUSH
13362: CALL_OW 70
13366: PUSH
13367: FOR_IN
13368: IFFALSE 13381
// RemoveUnit ( i ) ;
13370: LD_VAR 0 1
13374: PPUSH
13375: CALL_OW 64
13379: GO 13367
13381: POP
13382: POP
// end ;
13383: PPOPN 1
13385: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13386: LD_INT 22
13388: PUSH
13389: LD_INT 5
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: EMPTY
13397: LIST
13398: PPUSH
13399: CALL_OW 69
13403: PUSH
13404: LD_INT 0
13406: EQUAL
13407: PUSH
13408: LD_EXP 23
13412: PUSH
13413: LD_INT 2
13415: EQUAL
13416: AND
13417: IFFALSE 13430
13419: GO 13421
13421: DISABLE
// firstRussianAttack = 3 ;
13422: LD_ADDR_EXP 23
13426: PUSH
13427: LD_INT 3
13429: ST_TO_ADDR
13430: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13431: LD_EXP 28
13435: PUSH
13436: LD_INT 0
13438: EQUAL
13439: IFFALSE 13520
13441: GO 13443
13443: DISABLE
// begin timerStatus = 4 ;
13444: LD_ADDR_EXP 29
13448: PUSH
13449: LD_INT 4
13451: ST_TO_ADDR
// DialogueOn ;
13452: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13456: LD_EXP 13
13460: PPUSH
13461: LD_STRING D2-Don-1
13463: PPUSH
13464: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13468: LD_EXP 1
13472: PPUSH
13473: LD_STRING D2-JMM-1
13475: PPUSH
13476: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13480: LD_EXP 13
13484: PPUSH
13485: LD_STRING D2-Don-2
13487: PPUSH
13488: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13492: LD_EXP 1
13496: PPUSH
13497: LD_STRING D2-JMM-2
13499: PPUSH
13500: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13504: LD_EXP 13
13508: PPUSH
13509: LD_STRING D2-Don-3
13511: PPUSH
13512: CALL_OW 94
// DialogueOff ;
13516: CALL_OW 7
// end ;
13520: END
// every 12 12$0 do var tmp ;
13521: GO 13523
13523: DISABLE
13524: LD_INT 0
13526: PPUSH
// begin PrepareDonaldsonArmy ;
13527: CALL 1126 0 0
// CenterNowOnUnits ( Donaldson ) ;
13531: LD_EXP 13
13535: PPUSH
13536: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
13540: LD_INT 22
13542: PUSH
13543: LD_INT 6
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PPUSH
13550: CALL_OW 69
13554: NOT
13555: IFFALSE 13571
// begin wait ( 3 ) ;
13557: LD_INT 3
13559: PPUSH
13560: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
13564: LD_STRING ACH_BASE
13566: PPUSH
13567: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13571: LD_ADDR_VAR 0 1
13575: PUSH
13576: LD_INT 22
13578: PUSH
13579: LD_INT 4
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PUSH
13586: LD_INT 21
13588: PUSH
13589: LD_INT 1
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: LD_INT 26
13598: PUSH
13599: LD_INT 1
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 25
13608: PUSH
13609: LD_INT 1
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: PPUSH
13622: CALL_OW 69
13626: PUSH
13627: LD_EXP 5
13631: PUSH
13632: EMPTY
13633: LIST
13634: DIFF
13635: ST_TO_ADDR
// DialogueOn ;
13636: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13640: LD_VAR 0 1
13644: PPUSH
13645: LD_STRING D3-Sol1-1
13647: PPUSH
13648: LD_STRING D3-Sol1-1
13650: PPUSH
13651: CALL 4467 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13655: LD_INT 22
13657: PUSH
13658: LD_INT 4
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 21
13667: PUSH
13668: LD_INT 1
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 26
13677: PUSH
13678: LD_INT 1
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 25
13687: PUSH
13688: LD_INT 3
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: PPUSH
13701: CALL_OW 69
13705: PPUSH
13706: LD_STRING D3-Sol2-1
13708: PPUSH
13709: LD_STRING D3-Sol2-1
13711: PPUSH
13712: CALL 4467 0 3
// if Frank then
13716: LD_EXP 5
13720: IFFALSE 13734
// Say ( Frank , D3-Frank-1 ) ;
13722: LD_EXP 5
13726: PPUSH
13727: LD_STRING D3-Frank-1
13729: PPUSH
13730: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13734: LD_EXP 13
13738: PPUSH
13739: LD_STRING D3-Don-1
13741: PPUSH
13742: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13746: LD_EXP 13
13750: PPUSH
13751: LD_STRING D3-Don-1a
13753: PPUSH
13754: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13758: LD_EXP 1
13762: PPUSH
13763: LD_STRING D3-JMM-1
13765: PPUSH
13766: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13770: LD_EXP 13
13774: PPUSH
13775: LD_STRING D3-Don-2
13777: PPUSH
13778: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13782: LD_INT 22
13784: PUSH
13785: LD_INT 6
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PUSH
13792: LD_INT 21
13794: PUSH
13795: LD_INT 1
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PPUSH
13806: CALL_OW 69
13810: PUSH
13811: LD_INT 0
13813: GREATER
13814: IFFALSE 13952
// begin Say ( JMM , D3-JMM-2 ) ;
13816: LD_EXP 1
13820: PPUSH
13821: LD_STRING D3-JMM-2
13823: PPUSH
13824: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13828: LD_EXP 13
13832: PPUSH
13833: LD_STRING D3-Don-3
13835: PPUSH
13836: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13840: LD_EXP 1
13844: PPUSH
13845: LD_STRING D3-JMM-3
13847: PPUSH
13848: CALL_OW 88
// if IsOK ( Frank ) then
13852: LD_EXP 5
13856: PPUSH
13857: CALL_OW 302
13861: IFFALSE 13875
// Say ( Frank , D3-Frank-3 ) ;
13863: LD_EXP 5
13867: PPUSH
13868: LD_STRING D3-Frank-3
13870: PPUSH
13871: CALL_OW 88
// DialogueOff ;
13875: CALL_OW 7
// if IsOK ( Frank ) then
13879: LD_EXP 5
13883: PPUSH
13884: CALL_OW 302
13888: IFFALSE 13950
// begin SetSide ( Frank , 0 ) ;
13890: LD_EXP 5
13894: PPUSH
13895: LD_INT 0
13897: PPUSH
13898: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13902: LD_EXP 5
13906: PPUSH
13907: LD_INT 12
13909: PPUSH
13910: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
13914: LD_EXP 5
13918: PPUSH
13919: LD_STRING 04t_Frank
13921: PPUSH
13922: CALL_OW 38
// Wait ( 0 0$3 ) ;
13926: LD_INT 105
13928: PPUSH
13929: CALL_OW 67
// frankScoutBase = 1 ;
13933: LD_ADDR_EXP 25
13937: PUSH
13938: LD_INT 1
13940: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13941: LD_EXP 5
13945: PPUSH
13946: CALL_OW 64
// end ; end else
13950: GO 14039
// begin Say ( JMM , D3-JMM-4 ) ;
13952: LD_EXP 1
13956: PPUSH
13957: LD_STRING D3-JMM-4
13959: PPUSH
13960: CALL_OW 88
// DialogueOff ;
13964: CALL_OW 7
// if IsOK ( Frank ) then
13968: LD_EXP 5
13972: PPUSH
13973: CALL_OW 302
13977: IFFALSE 14039
// begin SetSide ( Frank , 0 ) ;
13979: LD_EXP 5
13983: PPUSH
13984: LD_INT 0
13986: PPUSH
13987: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13991: LD_EXP 5
13995: PPUSH
13996: LD_INT 12
13998: PPUSH
13999: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
14003: LD_EXP 5
14007: PPUSH
14008: LD_STRING 04t_Frank
14010: PPUSH
14011: CALL_OW 38
// Wait ( 0 0$3 ) ;
14015: LD_INT 105
14017: PPUSH
14018: CALL_OW 67
// frankScoutBase = 1 ;
14022: LD_ADDR_EXP 25
14026: PUSH
14027: LD_INT 1
14029: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14030: LD_EXP 5
14034: PPUSH
14035: CALL_OW 64
// end ; end ; end ;
14039: PPOPN 1
14041: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
14042: LD_EXP 13
14046: PPUSH
14047: CALL_OW 255
14051: PUSH
14052: LD_INT 4
14054: EQUAL
14055: PUSH
14056: LD_EXP 13
14060: PPUSH
14061: CALL_OW 302
14065: AND
14066: IFFALSE 14091
14068: GO 14070
14070: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
14071: LD_EXP 13
14075: PPUSH
14076: LD_STRING D3b-Don-1
14078: PPUSH
14079: CALL_OW 94
// donaldsonCoopAttack = 1 ;
14083: LD_ADDR_EXP 41
14087: PUSH
14088: LD_INT 1
14090: ST_TO_ADDR
// end ;
14091: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
14092: LD_EXP 24
14096: PUSH
14097: LD_INT 0
14099: EQUAL
14100: IFFALSE 14256
14102: GO 14104
14104: DISABLE
14105: LD_INT 0
14107: PPUSH
14108: PPUSH
// begin enable ;
14109: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
14110: LD_ADDR_VAR 0 1
14114: PUSH
14115: LD_INT 22
14117: PUSH
14118: LD_INT 4
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 21
14127: PUSH
14128: LD_INT 1
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PPUSH
14139: CALL_OW 69
14143: PUSH
14144: FOR_IN
14145: IFFALSE 14254
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
14147: LD_ADDR_VAR 0 2
14151: PUSH
14152: LD_INT 22
14154: PUSH
14155: LD_INT 1
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: LD_INT 21
14164: PUSH
14165: LD_INT 1
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PPUSH
14176: CALL_OW 69
14180: PUSH
14181: FOR_IN
14182: IFFALSE 14250
// begin if GetDistUnits ( i , j ) < 7 then
14184: LD_VAR 0 1
14188: PPUSH
14189: LD_VAR 0 2
14193: PPUSH
14194: CALL_OW 296
14198: PUSH
14199: LD_INT 7
14201: LESS
14202: IFFALSE 14248
// begin saveDonaldson = 1 ;
14204: LD_ADDR_EXP 24
14208: PUSH
14209: LD_INT 1
14211: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
14212: LD_INT 22
14214: PUSH
14215: LD_INT 4
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: PUSH
14222: LD_INT 21
14224: PUSH
14225: LD_INT 1
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PPUSH
14236: CALL_OW 69
14240: PPUSH
14241: LD_INT 1
14243: PPUSH
14244: CALL_OW 235
// end ; end ;
14248: GO 14181
14250: POP
14251: POP
// end ;
14252: GO 14144
14254: POP
14255: POP
// end ;
14256: PPOPN 2
14258: END
// every 0 0$1 trigger frankScoutBase do
14259: LD_EXP 25
14263: IFFALSE 14628
14265: GO 14267
14267: DISABLE
// begin wait ( 2 2$30 ) ;
14268: LD_INT 5250
14270: PPUSH
14271: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14275: LD_INT 35
14277: PPUSH
14278: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
14282: LD_INT 81
14284: PUSH
14285: LD_INT 4
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 92
14294: PUSH
14295: LD_INT 84
14297: PUSH
14298: LD_INT 28
14300: PUSH
14301: LD_INT 22
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PPUSH
14314: CALL_OW 69
14318: NOT
14319: IFFALSE 14275
// uc_side = 4 ;
14321: LD_ADDR_OWVAR 20
14325: PUSH
14326: LD_INT 4
14328: ST_TO_ADDR
// uc_nation = 1 ;
14329: LD_ADDR_OWVAR 21
14333: PUSH
14334: LD_INT 1
14336: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
14337: LD_ADDR_EXP 5
14341: PUSH
14342: LD_STRING 04t_Frank
14344: PPUSH
14345: CALL_OW 34
14349: ST_TO_ADDR
// if not Frank then
14350: LD_EXP 5
14354: NOT
14355: IFFALSE 14359
// exit ;
14357: GO 14628
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14359: LD_EXP 5
14363: PPUSH
14364: LD_INT 13
14366: PPUSH
14367: LD_INT 0
14369: PPUSH
14370: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14374: LD_INT 35
14376: PPUSH
14377: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
14381: LD_EXP 1
14385: PPUSH
14386: CALL_OW 310
14390: NOT
14391: PUSH
14392: LD_EXP 1
14396: PPUSH
14397: LD_INT 4
14399: PPUSH
14400: CALL_OW 296
14404: PUSH
14405: LD_INT 20
14407: LESS
14408: AND
14409: IFFALSE 14442
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14411: LD_EXP 5
14415: PPUSH
14416: LD_EXP 1
14420: PPUSH
14421: CALL_OW 250
14425: PPUSH
14426: LD_EXP 1
14430: PPUSH
14431: CALL_OW 251
14435: PPUSH
14436: CALL_OW 111
14440: GO 14457
// ComMoveXY ( Frank , 51 , 15 ) ;
14442: LD_EXP 5
14446: PPUSH
14447: LD_INT 51
14449: PPUSH
14450: LD_INT 15
14452: PPUSH
14453: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14457: LD_EXP 5
14461: PPUSH
14462: LD_EXP 1
14466: PPUSH
14467: CALL_OW 296
14471: PUSH
14472: LD_INT 10
14474: LESS
14475: IFFALSE 14374
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14477: LD_EXP 1
14481: PUSH
14482: LD_EXP 5
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PPUSH
14491: CALL_OW 87
// DialogueOn ;
14495: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14499: LD_EXP 5
14503: PPUSH
14504: LD_STRING D3a-Frank-1
14506: PPUSH
14507: CALL_OW 88
// if Lisa then
14511: LD_EXP 4
14515: IFFALSE 14565
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14517: LD_EXP 4
14521: PPUSH
14522: LD_STRING D3a-Lisa-1
14524: PPUSH
14525: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14529: LD_EXP 5
14533: PPUSH
14534: LD_STRING D3a-Frank-2
14536: PPUSH
14537: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14541: LD_EXP 4
14545: PPUSH
14546: LD_STRING D3a-Lisa-2
14548: PPUSH
14549: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14553: LD_EXP 5
14557: PPUSH
14558: LD_STRING D3a-Frank-3
14560: PPUSH
14561: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14565: LD_EXP 1
14569: PPUSH
14570: LD_STRING D3a-JMM-3
14572: PPUSH
14573: CALL_OW 88
// DialogueOff ;
14577: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14581: LD_EXP 5
14585: PPUSH
14586: LD_INT 1
14588: PPUSH
14589: CALL_OW 235
// InGameOn ;
14593: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14597: LD_INT 1
14599: PPUSH
14600: LD_INT 7
14602: PPUSH
14603: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14607: LD_INT 93
14609: PPUSH
14610: LD_INT 91
14612: PPUSH
14613: CALL_OW 84
// wait ( 0 0$5 ) ;
14617: LD_INT 175
14619: PPUSH
14620: CALL_OW 67
// InGameOff ;
14624: CALL_OW 9
// end ;
14628: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
14629: LD_OWVAR 67
14633: PUSH
14634: LD_INT 2
14636: EQUAL
14637: PUSH
14638: LD_OWVAR 67
14642: PUSH
14643: LD_INT 3
14645: EQUAL
14646: OR
14647: IFFALSE 14671
14649: GO 14651
14651: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14652: LD_INT 24
14654: PPUSH
14655: LD_INT 24
14657: PPUSH
14658: LD_INT 1
14660: PPUSH
14661: LD_INT 1
14663: PPUSH
14664: LD_INT 53
14666: PPUSH
14667: CALL_OW 185
14671: END
// every 18 18$0 do
14672: GO 14674
14674: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14675: LD_EXP 14
14679: PPUSH
14680: LD_STRING D4-Har-1
14682: PPUSH
14683: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14687: LD_EXP 1
14691: PPUSH
14692: LD_STRING D4-JMM-1
14694: PPUSH
14695: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14699: LD_EXP 14
14703: PPUSH
14704: LD_STRING D4-Har-2
14706: PPUSH
14707: CALL_OW 94
// case query ( Q1 ) of 1 :
14711: LD_STRING Q1
14713: PPUSH
14714: CALL_OW 97
14718: PUSH
14719: LD_INT 1
14721: DOUBLE
14722: EQUAL
14723: IFTRUE 14727
14725: GO 14786
14727: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14728: LD_EXP 1
14732: PPUSH
14733: LD_STRING D5-JMM-1
14735: PPUSH
14736: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14740: LD_EXP 14
14744: PPUSH
14745: LD_STRING D5-Har-1
14747: PPUSH
14748: CALL_OW 94
// timeToSupport = 10 10$0 ;
14752: LD_ADDR_EXP 28
14756: PUSH
14757: LD_INT 21000
14759: ST_TO_ADDR
// timerStatus = 2 ;
14760: LD_ADDR_EXP 29
14764: PUSH
14765: LD_INT 2
14767: ST_TO_ADDR
// startTimer = 1 ;
14768: LD_ADDR_EXP 30
14772: PUSH
14773: LD_INT 1
14775: ST_TO_ADDR
// harrAnswer = 1 ;
14776: LD_ADDR_EXP 26
14780: PUSH
14781: LD_INT 1
14783: ST_TO_ADDR
// end ; 2 :
14784: GO 14921
14786: LD_INT 2
14788: DOUBLE
14789: EQUAL
14790: IFTRUE 14794
14792: GO 14853
14794: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14795: LD_EXP 1
14799: PPUSH
14800: LD_STRING D5-JMM-2
14802: PPUSH
14803: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14807: LD_EXP 14
14811: PPUSH
14812: LD_STRING D5-Har-2
14814: PPUSH
14815: CALL_OW 94
// timeToSupport = 5 5$0 ;
14819: LD_ADDR_EXP 28
14823: PUSH
14824: LD_INT 10500
14826: ST_TO_ADDR
// timerStatus = 2 ;
14827: LD_ADDR_EXP 29
14831: PUSH
14832: LD_INT 2
14834: ST_TO_ADDR
// startTimer = 1 ;
14835: LD_ADDR_EXP 30
14839: PUSH
14840: LD_INT 1
14842: ST_TO_ADDR
// harrAnswer = 2 ;
14843: LD_ADDR_EXP 26
14847: PUSH
14848: LD_INT 2
14850: ST_TO_ADDR
// end ; 3 :
14851: GO 14921
14853: LD_INT 3
14855: DOUBLE
14856: EQUAL
14857: IFTRUE 14861
14859: GO 14920
14861: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14862: LD_EXP 1
14866: PPUSH
14867: LD_STRING D5-JMM-3
14869: PPUSH
14870: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14874: LD_EXP 14
14878: PPUSH
14879: LD_STRING D5-Har-3
14881: PPUSH
14882: CALL_OW 94
// timeToSupport = 5 5$0 ;
14886: LD_ADDR_EXP 28
14890: PUSH
14891: LD_INT 10500
14893: ST_TO_ADDR
// timerStatus = 2 ;
14894: LD_ADDR_EXP 29
14898: PUSH
14899: LD_INT 2
14901: ST_TO_ADDR
// startTimer = 1 ;
14902: LD_ADDR_EXP 30
14906: PUSH
14907: LD_INT 1
14909: ST_TO_ADDR
// harrAnswer = 3 ;
14910: LD_ADDR_EXP 26
14914: PUSH
14915: LD_INT 3
14917: ST_TO_ADDR
// end ; end ;
14918: GO 14921
14920: POP
// end ;
14921: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14922: LD_EXP 29
14926: PUSH
14927: LD_INT 2
14929: EQUAL
14930: PUSH
14931: LD_EXP 28
14935: PUSH
14936: LD_INT 0
14938: EQUAL
14939: AND
14940: IFFALSE 15217
14942: GO 14944
14944: DISABLE
// begin timerStatus = 4 ;
14945: LD_ADDR_EXP 29
14949: PUSH
14950: LD_INT 4
14952: ST_TO_ADDR
// if harrAnswer = 1 then
14953: LD_EXP 26
14957: PUSH
14958: LD_INT 1
14960: EQUAL
14961: IFFALSE 15041
// begin PrepareHarrisonSupport ( 3 ) ;
14963: LD_INT 3
14965: PPUSH
14966: CALL 1696 0 1
// wait ( 1 1$0 ) ;
14970: LD_INT 2100
14972: PPUSH
14973: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14977: LD_EXP 14
14981: PPUSH
14982: LD_STRING D7-Har-1
14984: PPUSH
14985: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14989: LD_STRING M2
14991: PPUSH
14992: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14996: LD_ADDR_EXP 27
15000: PUSH
15001: LD_INT 31500
15003: PUSH
15004: LD_INT 10500
15006: PUSH
15007: LD_INT 8400
15009: PUSH
15010: LD_INT 6300
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: LIST
15017: PUSH
15018: LD_OWVAR 67
15022: ARRAY
15023: PLUS
15024: ST_TO_ADDR
// startTimer = 1 ;
15025: LD_ADDR_EXP 30
15029: PUSH
15030: LD_INT 1
15032: ST_TO_ADDR
// timerStatus = 3 ;
15033: LD_ADDR_EXP 29
15037: PUSH
15038: LD_INT 3
15040: ST_TO_ADDR
// end ; if harrAnswer = 2 then
15041: LD_EXP 26
15045: PUSH
15046: LD_INT 2
15048: EQUAL
15049: IFFALSE 15129
// begin PrepareHarrisonSupport ( 4 ) ;
15051: LD_INT 4
15053: PPUSH
15054: CALL 1696 0 1
// wait ( 1 1$0 ) ;
15058: LD_INT 2100
15060: PPUSH
15061: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15065: LD_EXP 14
15069: PPUSH
15070: LD_STRING D7-Har-1
15072: PPUSH
15073: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15077: LD_STRING M2
15079: PPUSH
15080: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15084: LD_ADDR_EXP 27
15088: PUSH
15089: LD_INT 27300
15091: PUSH
15092: LD_INT 8400
15094: PUSH
15095: LD_INT 8400
15097: PUSH
15098: LD_INT 6300
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: LIST
15105: PUSH
15106: LD_OWVAR 67
15110: ARRAY
15111: PLUS
15112: ST_TO_ADDR
// startTimer = 1 ;
15113: LD_ADDR_EXP 30
15117: PUSH
15118: LD_INT 1
15120: ST_TO_ADDR
// timerStatus = 3 ;
15121: LD_ADDR_EXP 29
15125: PUSH
15126: LD_INT 3
15128: ST_TO_ADDR
// end ; if harrAnswer = 3 then
15129: LD_EXP 26
15133: PUSH
15134: LD_INT 3
15136: EQUAL
15137: IFFALSE 15217
// begin PrepareHarrisonSupport ( 5 ) ;
15139: LD_INT 5
15141: PPUSH
15142: CALL 1696 0 1
// wait ( 1 1$0 ) ;
15146: LD_INT 2100
15148: PPUSH
15149: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15153: LD_EXP 14
15157: PPUSH
15158: LD_STRING D7-Har-1
15160: PPUSH
15161: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15165: LD_STRING M2
15167: PPUSH
15168: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
15172: LD_ADDR_EXP 27
15176: PUSH
15177: LD_INT 21000
15179: PUSH
15180: LD_INT 8400
15182: PUSH
15183: LD_INT 6300
15185: PUSH
15186: LD_INT 4200
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: LIST
15193: PUSH
15194: LD_OWVAR 67
15198: ARRAY
15199: PLUS
15200: ST_TO_ADDR
// startTimer = 1 ;
15201: LD_ADDR_EXP 30
15205: PUSH
15206: LD_INT 1
15208: ST_TO_ADDR
// timerStatus = 3 ;
15209: LD_ADDR_EXP 29
15213: PUSH
15214: LD_INT 3
15216: ST_TO_ADDR
// end ; end ;
15217: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
15218: LD_EXP 27
15222: PUSH
15223: LD_INT 8400
15225: LESSEQUAL
15226: PUSH
15227: LD_EXP 29
15231: PUSH
15232: LD_INT 3
15234: EQUAL
15235: AND
15236: IFFALSE 15268
15238: GO 15240
15240: DISABLE
// begin DialogueOn ;
15241: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15245: LD_EXP 14
15249: PPUSH
15250: LD_STRING D7a-Har-1
15252: PPUSH
15253: CALL_OW 94
// DialogueOff ;
15257: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15261: LD_STRING M2a
15263: PPUSH
15264: CALL_OW 337
// end ;
15268: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
15269: LD_EXP 27
15273: PUSH
15274: LD_INT 0
15276: LESSEQUAL
15277: PUSH
15278: LD_EXP 29
15282: PUSH
15283: LD_INT 3
15285: EQUAL
15286: AND
15287: PUSH
15288: LD_EXP 40
15292: NOT
15293: AND
15294: IFFALSE 15433
15296: GO 15298
15298: DISABLE
15299: LD_INT 0
15301: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15302: LD_ADDR_VAR 0 1
15306: PUSH
15307: LD_INT 22
15309: PUSH
15310: LD_INT 1
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PPUSH
15317: CALL_OW 69
15321: PUSH
15322: LD_EXP 1
15326: PUSH
15327: EMPTY
15328: LIST
15329: DIFF
15330: ST_TO_ADDR
// saveDonaldson = 2 ;
15331: LD_ADDR_EXP 24
15335: PUSH
15336: LD_INT 2
15338: ST_TO_ADDR
// DialogueOn ;
15339: CALL_OW 6
// if IsOK ( Donaldson ) then
15343: LD_EXP 13
15347: PPUSH
15348: CALL_OW 302
15352: IFFALSE 15368
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15354: LD_EXP 14
15358: PPUSH
15359: LD_STRING D8-Har-1
15361: PPUSH
15362: CALL_OW 94
// end else
15366: GO 15380
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15368: LD_EXP 14
15372: PPUSH
15373: LD_STRING D8-Har-1a
15375: PPUSH
15376: CALL_OW 94
// end ; DialogueOff ;
15380: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15384: LD_VAR 0 1
15388: PPUSH
15389: LD_INT 4
15391: PPUSH
15392: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15396: LD_VAR 0 1
15400: PPUSH
15401: LD_INT 88
15403: PPUSH
15404: LD_INT 89
15406: PPUSH
15407: CALL_OW 114
// honor = 0 ;
15411: LD_ADDR_EXP 39
15415: PUSH
15416: LD_INT 0
15418: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15419: LD_INT 350
15421: PPUSH
15422: CALL_OW 67
// YouLost ( LostCommand ) ;
15426: LD_STRING LostCommand
15428: PPUSH
15429: CALL_OW 104
// end ;
15433: PPOPN 1
15435: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15436: LD_INT 22
15438: PUSH
15439: LD_INT 6
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: LD_INT 21
15448: PUSH
15449: LD_INT 1
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PPUSH
15460: CALL_OW 69
15464: PUSH
15465: LD_INT 0
15467: EQUAL
15468: PUSH
15469: LD_EXP 20
15473: PUSH
15474: LD_INT 0
15476: EQUAL
15477: AND
15478: PUSH
15479: LD_EXP 43
15483: PUSH
15484: LD_INT 1
15486: EQUAL
15487: AND
15488: IFFALSE 15582
15490: GO 15492
15492: DISABLE
15493: LD_INT 0
15495: PPUSH
15496: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15497: LD_ADDR_VAR 0 2
15501: PUSH
15502: LD_INT 22
15504: PUSH
15505: LD_INT 1
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 21
15514: PUSH
15515: LD_INT 1
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 23
15524: PUSH
15525: LD_INT 1
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: LIST
15536: PPUSH
15537: CALL_OW 69
15541: ST_TO_ADDR
// for i in tmp do
15542: LD_ADDR_VAR 0 1
15546: PUSH
15547: LD_VAR 0 2
15551: PUSH
15552: FOR_IN
15553: IFFALSE 15580
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15555: LD_VAR 0 1
15559: PPUSH
15560: LD_INT 1
15562: PPUSH
15563: LD_INT 4
15565: PPUSH
15566: CALL_OW 12
15570: PPUSH
15571: LD_INT 500
15573: PPUSH
15574: CALL_OW 492
// end ;
15578: GO 15552
15580: POP
15581: POP
// end ; end_of_file
15582: PPOPN 2
15584: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15585: GO 15587
15587: DISABLE
15588: LD_INT 0
15590: PPUSH
// begin enemyWayX = [ ] ;
15591: LD_ADDR_EXP 49
15595: PUSH
15596: EMPTY
15597: ST_TO_ADDR
// enemyWayY = [ ] ;
15598: LD_ADDR_EXP 50
15602: PUSH
15603: EMPTY
15604: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15605: LD_ADDR_VAR 0 1
15609: PUSH
15610: LD_INT 1
15612: PPUSH
15613: LD_INT 3
15615: PPUSH
15616: CALL_OW 12
15620: ST_TO_ADDR
// if rnd = 1 then
15621: LD_VAR 0 1
15625: PUSH
15626: LD_INT 1
15628: EQUAL
15629: IFFALSE 15669
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15631: LD_ADDR_EXP 49
15635: PUSH
15636: LD_INT 73
15638: PUSH
15639: LD_INT 46
15641: PUSH
15642: LD_INT 29
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: LIST
15649: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15650: LD_ADDR_EXP 50
15654: PUSH
15655: LD_INT 71
15657: PUSH
15658: LD_INT 43
15660: PUSH
15661: LD_INT 29
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: LIST
15668: ST_TO_ADDR
// end ; if rnd = 2 then
15669: LD_VAR 0 1
15673: PUSH
15674: LD_INT 2
15676: EQUAL
15677: IFFALSE 15701
// begin enemyWayX = [ 64 ] ;
15679: LD_ADDR_EXP 49
15683: PUSH
15684: LD_INT 64
15686: PUSH
15687: EMPTY
15688: LIST
15689: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15690: LD_ADDR_EXP 50
15694: PUSH
15695: LD_INT 43
15697: PUSH
15698: EMPTY
15699: LIST
15700: ST_TO_ADDR
// end ; if rnd = 3 then
15701: LD_VAR 0 1
15705: PUSH
15706: LD_INT 3
15708: EQUAL
15709: IFFALSE 15733
// begin enemyWayX = [ 80 ] ;
15711: LD_ADDR_EXP 49
15715: PUSH
15716: LD_INT 80
15718: PUSH
15719: EMPTY
15720: LIST
15721: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15722: LD_ADDR_EXP 50
15726: PUSH
15727: LD_INT 28
15729: PUSH
15730: EMPTY
15731: LIST
15732: ST_TO_ADDR
// end ; enable ;
15733: ENABLE
// end ;
15734: PPOPN 1
15736: END
// every 0 0$1 trigger AIEnable = 1 do
15737: LD_EXP 37
15741: PUSH
15742: LD_INT 1
15744: EQUAL
15745: IFFALSE 15859
15747: GO 15749
15749: DISABLE
// begin enable ;
15750: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15751: LD_INT 3
15753: PPUSH
15754: LD_INT 21
15756: PPUSH
15757: LD_INT 7
15759: PPUSH
15760: CALL 5903 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15764: LD_INT 3
15766: PPUSH
15767: LD_INT 8
15769: PPUSH
15770: LD_INT 7
15772: PPUSH
15773: LD_INT 1
15775: PPUSH
15776: CALL 6224 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15780: LD_INT 3
15782: PPUSH
15783: LD_INT 17
15785: PPUSH
15786: LD_INT 108
15788: PPUSH
15789: LD_INT 95
15791: PPUSH
15792: CALL 7548 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15796: LD_INT 3
15798: PPUSH
15799: LD_INT 23
15801: PPUSH
15802: LD_EXP 49
15806: PPUSH
15807: LD_EXP 50
15811: PPUSH
15812: CALL 6880 0 4
// if baseReadyToBuild = 2 then
15816: LD_EXP 20
15820: PUSH
15821: LD_INT 2
15823: EQUAL
15824: IFFALSE 15859
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
15826: LD_INT 6
15828: PPUSH
15829: LD_EXP 21
15833: PPUSH
15834: LD_INT 6
15836: PPUSH
15837: CALL 5903 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15841: LD_INT 6
15843: PPUSH
15844: LD_INT 9
15846: PPUSH
15847: LD_INT 6
15849: PPUSH
15850: LD_EXP 22
15854: PPUSH
15855: CALL 6224 0 4
// end ; end ;
15859: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
15860: LD_EXP 15
15864: PPUSH
15865: CALL_OW 310
15869: NOT
15870: PUSH
15871: LD_INT 21
15873: PPUSH
15874: CALL_OW 302
15878: AND
15879: PUSH
15880: LD_INT 21
15882: PPUSH
15883: CALL_OW 255
15887: PUSH
15888: LD_INT 3
15890: EQUAL
15891: AND
15892: IFFALSE 15910
15894: GO 15896
15896: DISABLE
// begin enable ;
15897: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
15898: LD_EXP 15
15902: PPUSH
15903: LD_INT 21
15905: PPUSH
15906: CALL_OW 120
// end ;
15910: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15911: LD_INT 22
15913: PUSH
15914: LD_INT 3
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PUSH
15921: LD_INT 21
15923: PUSH
15924: LD_INT 2
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: LD_INT 55
15933: PUSH
15934: EMPTY
15935: LIST
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 69
15946: PUSH
15947: LD_INT 0
15949: EQUAL
15950: PUSH
15951: LD_INT 1
15953: PPUSH
15954: CALL_OW 255
15958: PUSH
15959: LD_INT 3
15961: EQUAL
15962: AND
15963: PUSH
15964: LD_INT 21
15966: PPUSH
15967: CALL_OW 302
15971: AND
15972: PUSH
15973: LD_INT 21
15975: PPUSH
15976: CALL_OW 255
15980: PUSH
15981: LD_INT 3
15983: EQUAL
15984: AND
15985: PUSH
15986: LD_INT 21
15988: PPUSH
15989: CALL_OW 302
15993: AND
15994: IFFALSE 16206
15996: GO 15998
15998: DISABLE
// begin enable ;
15999: ENABLE
// if Difficulty = 1 then
16000: LD_OWVAR 67
16004: PUSH
16005: LD_INT 1
16007: EQUAL
16008: IFFALSE 16052
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
16010: LD_INT 3
16012: PPUSH
16013: LD_INT 24
16015: PPUSH
16016: LD_OWVAR 67
16020: PUSH
16021: LD_INT 2
16023: PLUS
16024: PPUSH
16025: LD_INT 42
16027: PUSH
16028: LD_INT 44
16030: PUSH
16031: LD_INT 43
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: LIST
16038: PPUSH
16039: LD_INT 1
16041: PPUSH
16042: LD_INT 1
16044: PPUSH
16045: LD_INT 21
16047: PPUSH
16048: CALL 6768 0 7
// if Difficulty = 2 then
16052: LD_OWVAR 67
16056: PUSH
16057: LD_INT 2
16059: EQUAL
16060: IFFALSE 16127
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
16062: LD_INT 3
16064: PPUSH
16065: LD_INT 24
16067: PPUSH
16068: LD_OWVAR 67
16072: PUSH
16073: LD_INT 2
16075: PLUS
16076: PPUSH
16077: LD_INT 44
16079: PUSH
16080: LD_INT 44
16082: PUSH
16083: LD_INT 43
16085: PUSH
16086: LD_INT 43
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: PPUSH
16095: LD_INT 1
16097: PPUSH
16098: LD_INT 1
16100: PPUSH
16101: LD_INT 21
16103: PUSH
16104: LD_INT 22
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 1
16113: PPUSH
16114: LD_INT 2
16116: PPUSH
16117: CALL_OW 12
16121: ARRAY
16122: PPUSH
16123: CALL 6768 0 7
// if Difficulty = 3 then
16127: LD_OWVAR 67
16131: PUSH
16132: LD_INT 3
16134: EQUAL
16135: IFFALSE 16206
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
16137: LD_INT 3
16139: PPUSH
16140: LD_INT 24
16142: PPUSH
16143: LD_OWVAR 67
16147: PUSH
16148: LD_INT 2
16150: PPUSH
16151: LD_INT 3
16153: PPUSH
16154: CALL_OW 12
16158: PLUS
16159: PPUSH
16160: LD_INT 44
16162: PUSH
16163: LD_INT 44
16165: PUSH
16166: LD_INT 43
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: LIST
16173: PPUSH
16174: LD_INT 1
16176: PPUSH
16177: LD_INT 1
16179: PPUSH
16180: LD_INT 22
16182: PUSH
16183: LD_INT 23
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 1
16192: PPUSH
16193: LD_INT 2
16195: PPUSH
16196: CALL_OW 12
16200: ARRAY
16201: PPUSH
16202: CALL 6768 0 7
// end ;
16206: END
// every 0 0$1 do
16207: GO 16209
16209: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
16210: LD_INT 3
16212: PPUSH
16213: LD_INT 1
16215: PPUSH
16216: LD_INT 3
16218: PPUSH
16219: CALL 5818 0 3
16223: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
16224: LD_EXP 20
16228: PUSH
16229: LD_INT 1
16231: EQUAL
16232: IFFALSE 16379
16234: GO 16236
16236: DISABLE
16237: LD_INT 0
16239: PPUSH
16240: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16241: LD_ADDR_VAR 0 2
16245: PUSH
16246: LD_INT 22
16248: PUSH
16249: LD_INT 6
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: LD_INT 21
16258: PUSH
16259: LD_INT 2
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 34
16268: PUSH
16269: LD_INT 51
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: LIST
16280: PPUSH
16281: CALL_OW 69
16285: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16286: LD_VAR 0 2
16290: PUSH
16291: LD_INT 1
16293: ARRAY
16294: PPUSH
16295: LD_EXP 21
16299: PPUSH
16300: CALL_OW 250
16304: PUSH
16305: LD_INT 5
16307: MINUS
16308: PPUSH
16309: LD_EXP 21
16313: PPUSH
16314: CALL_OW 251
16318: PUSH
16319: LD_INT 5
16321: MINUS
16322: PPUSH
16323: CALL_OW 111
// wait ( 0 0$5 ) ;
16327: LD_INT 175
16329: PPUSH
16330: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16334: LD_VAR 0 2
16338: PUSH
16339: LD_INT 1
16341: ARRAY
16342: PPUSH
16343: LD_INT 41
16345: PPUSH
16346: LD_INT 52
16348: PPUSH
16349: CALL_OW 177
// wait ( 0 0$40 ) ;
16353: LD_INT 1400
16355: PPUSH
16356: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16360: LD_VAR 0 2
16364: PUSH
16365: LD_INT 1
16367: ARRAY
16368: PPUSH
16369: LD_INT 41
16371: PPUSH
16372: LD_INT 44
16374: PPUSH
16375: CALL_OW 111
// end ;
16379: PPOPN 2
16381: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16382: LD_EXP 21
16386: PPUSH
16387: CALL_OW 274
16391: PPUSH
16392: LD_INT 1
16394: PPUSH
16395: CALL_OW 275
16399: PUSH
16400: LD_INT 100
16402: GREATEREQUAL
16403: IFFALSE 16631
16405: GO 16407
16407: DISABLE
16408: LD_INT 0
16410: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16411: LD_ADDR_VAR 0 1
16415: PUSH
16416: LD_INT 22
16418: PUSH
16419: LD_INT 6
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 21
16428: PUSH
16429: LD_INT 1
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 25
16438: PUSH
16439: LD_INT 2
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: LIST
16450: PPUSH
16451: CALL_OW 69
16455: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16456: LD_VAR 0 1
16460: PUSH
16461: LD_INT 1
16463: ARRAY
16464: PPUSH
16465: LD_INT 4
16467: PPUSH
16468: LD_INT 39
16470: PPUSH
16471: LD_INT 37
16473: PPUSH
16474: LD_INT 3
16476: PPUSH
16477: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16481: LD_VAR 0 1
16485: PUSH
16486: LD_INT 1
16488: ARRAY
16489: PPUSH
16490: LD_INT 29
16492: PPUSH
16493: LD_INT 42
16495: PPUSH
16496: LD_INT 54
16498: PPUSH
16499: LD_INT 3
16501: PPUSH
16502: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16506: LD_VAR 0 1
16510: PUSH
16511: LD_INT 1
16513: ARRAY
16514: PPUSH
16515: LD_INT 6
16517: PPUSH
16518: LD_INT 38
16520: PPUSH
16521: LD_INT 48
16523: PPUSH
16524: LD_INT 0
16526: PPUSH
16527: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16531: LD_VAR 0 1
16535: PUSH
16536: LD_INT 1
16538: ARRAY
16539: PPUSH
16540: LD_INT 2
16542: PPUSH
16543: LD_INT 32
16545: PPUSH
16546: LD_INT 38
16548: PPUSH
16549: LD_INT 2
16551: PPUSH
16552: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16556: LD_VAR 0 1
16560: PUSH
16561: LD_INT 1
16563: ARRAY
16564: PPUSH
16565: LD_INT 26
16567: PPUSH
16568: LD_INT 39
16570: PPUSH
16571: LD_INT 55
16573: PPUSH
16574: LD_INT 3
16576: PPUSH
16577: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16581: LD_VAR 0 1
16585: PUSH
16586: LD_INT 1
16588: ARRAY
16589: PPUSH
16590: LD_INT 32
16592: PPUSH
16593: LD_INT 31
16595: PPUSH
16596: LD_INT 31
16598: PPUSH
16599: LD_INT 3
16601: PPUSH
16602: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16606: LD_VAR 0 1
16610: PUSH
16611: LD_INT 1
16613: ARRAY
16614: PPUSH
16615: LD_INT 31
16617: PPUSH
16618: LD_INT 50
16620: PPUSH
16621: LD_INT 51
16623: PPUSH
16624: LD_INT 4
16626: PPUSH
16627: CALL_OW 205
// end ;
16631: PPOPN 1
16633: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
16634: LD_EXP 45
16638: IFFALSE 17195
16640: GO 16642
16642: DISABLE
16643: LD_INT 0
16645: PPUSH
16646: PPUSH
16647: PPUSH
// begin enable ;
16648: ENABLE
// if not ruMobile then
16649: LD_EXP 45
16653: NOT
16654: IFFALSE 16658
// exit ;
16656: GO 17195
// for i in ruMobile do
16658: LD_ADDR_VAR 0 1
16662: PUSH
16663: LD_EXP 45
16667: PUSH
16668: FOR_IN
16669: IFFALSE 17193
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
16671: LD_VAR 0 1
16675: PPUSH
16676: CALL_OW 302
16680: NOT
16681: PUSH
16682: LD_VAR 0 1
16686: PPUSH
16687: CALL_OW 255
16691: PUSH
16692: LD_INT 3
16694: NONEQUAL
16695: OR
16696: IFFALSE 16716
// begin ruMobile := ruMobile diff i ;
16698: LD_ADDR_EXP 45
16702: PUSH
16703: LD_EXP 45
16707: PUSH
16708: LD_VAR 0 1
16712: DIFF
16713: ST_TO_ADDR
// continue ;
16714: GO 16668
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
16716: LD_VAR 0 1
16720: PPUSH
16721: CALL_OW 110
16725: NOT
16726: PUSH
16727: LD_VAR 0 1
16731: PPUSH
16732: CALL_OW 110
16736: PUSH
16737: LD_INT 0
16739: EQUAL
16740: OR
16741: IFFALSE 16856
// begin if GetFuel ( i ) < 50 then
16743: LD_VAR 0 1
16747: PPUSH
16748: CALL_OW 261
16752: PUSH
16753: LD_INT 50
16755: LESS
16756: IFFALSE 16815
// begin ComMoveXY ( i , 106 , 88 ) ;
16758: LD_VAR 0 1
16762: PPUSH
16763: LD_INT 106
16765: PPUSH
16766: LD_INT 88
16768: PPUSH
16769: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16773: LD_INT 35
16775: PPUSH
16776: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
16780: LD_VAR 0 1
16784: PPUSH
16785: LD_INT 106
16787: PPUSH
16788: LD_INT 88
16790: PPUSH
16791: CALL_OW 297
16795: PUSH
16796: LD_INT 4
16798: LESS
16799: IFFALSE 16773
// SetFuel ( i , 100 ) ;
16801: LD_VAR 0 1
16805: PPUSH
16806: LD_INT 100
16808: PPUSH
16809: CALL_OW 240
// end else
16813: GO 16856
// if not IsInArea ( i , ruParking ) then
16815: LD_VAR 0 1
16819: PPUSH
16820: LD_INT 25
16822: PPUSH
16823: CALL_OW 308
16827: NOT
16828: IFFALSE 16844
// ComMoveToArea ( i , ruParking ) else
16830: LD_VAR 0 1
16834: PPUSH
16835: LD_INT 25
16837: PPUSH
16838: CALL_OW 113
16842: GO 16856
// SetTag ( i , 1 ) ;
16844: LD_VAR 0 1
16848: PPUSH
16849: LD_INT 1
16851: PPUSH
16852: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
16856: LD_VAR 0 1
16860: PPUSH
16861: CALL_OW 110
16865: PUSH
16866: LD_INT 1
16868: EQUAL
16869: IFFALSE 16999
// begin if GetLives ( i ) < 1000 then
16871: LD_VAR 0 1
16875: PPUSH
16876: CALL_OW 256
16880: PUSH
16881: LD_INT 1000
16883: LESS
16884: IFFALSE 16976
// begin if not IsDrivenBy ( i ) then
16886: LD_VAR 0 1
16890: PPUSH
16891: CALL_OW 311
16895: NOT
16896: IFFALSE 16900
// continue ;
16898: GO 16668
// mech := IsDrivenBy ( i ) ;
16900: LD_ADDR_VAR 0 2
16904: PUSH
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL_OW 311
16914: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
16915: LD_VAR 0 2
16919: PPUSH
16920: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
16924: LD_VAR 0 2
16928: PPUSH
16929: LD_VAR 0 1
16933: PPUSH
16934: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
16938: LD_INT 35
16940: PPUSH
16941: CALL_OW 67
// until GetLives ( i ) = 1000 ;
16945: LD_VAR 0 1
16949: PPUSH
16950: CALL_OW 256
16954: PUSH
16955: LD_INT 1000
16957: EQUAL
16958: IFFALSE 16938
// ComEnterUnit ( mech , i ) ;
16960: LD_VAR 0 2
16964: PPUSH
16965: LD_VAR 0 1
16969: PPUSH
16970: CALL_OW 120
// end else
16974: GO 16999
// if IsDrivenBy ( i ) then
16976: LD_VAR 0 1
16980: PPUSH
16981: CALL_OW 311
16985: IFFALSE 16999
// SetTag ( i , 2 ) ;
16987: LD_VAR 0 1
16991: PPUSH
16992: LD_INT 2
16994: PPUSH
16995: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
16999: LD_VAR 0 1
17003: PPUSH
17004: CALL_OW 110
17008: PUSH
17009: LD_INT 2
17011: EQUAL
17012: IFFALSE 17191
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
17014: LD_ADDR_VAR 0 3
17018: PUSH
17019: LD_INT 24
17021: PPUSH
17022: LD_INT 81
17024: PUSH
17025: LD_INT 3
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PPUSH
17032: CALL_OW 70
17036: ST_TO_ADDR
// if GetLives ( i ) < 650 then
17037: LD_VAR 0 1
17041: PPUSH
17042: CALL_OW 256
17046: PUSH
17047: LD_INT 650
17049: LESS
17050: IFFALSE 17075
// begin ComStop ( i ) ;
17052: LD_VAR 0 1
17056: PPUSH
17057: CALL_OW 141
// SetTag ( i , 0 ) ;
17061: LD_VAR 0 1
17065: PPUSH
17066: LD_INT 0
17068: PPUSH
17069: CALL_OW 109
// continue ;
17073: GO 16668
// end ; if enemy then
17075: LD_VAR 0 3
17079: IFFALSE 17119
// begin if not HasTask ( i ) then
17081: LD_VAR 0 1
17085: PPUSH
17086: CALL_OW 314
17090: NOT
17091: IFFALSE 17117
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17093: LD_VAR 0 1
17097: PPUSH
17098: LD_VAR 0 3
17102: PPUSH
17103: LD_VAR 0 1
17107: PPUSH
17108: CALL_OW 74
17112: PPUSH
17113: CALL_OW 115
// end else
17117: GO 17191
// if ruMobile > 2 then
17119: LD_EXP 45
17123: PUSH
17124: LD_INT 2
17126: GREATER
17127: IFFALSE 17191
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
17129: LD_ADDR_VAR 0 3
17133: PUSH
17134: LD_INT 81
17136: PUSH
17137: LD_INT 3
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: PPUSH
17144: CALL_OW 69
17148: ST_TO_ADDR
// if enemy then
17149: LD_VAR 0 3
17153: IFFALSE 17191
// if not HasTask ( i ) then
17155: LD_VAR 0 1
17159: PPUSH
17160: CALL_OW 314
17164: NOT
17165: IFFALSE 17191
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17167: LD_VAR 0 1
17171: PPUSH
17172: LD_VAR 0 3
17176: PPUSH
17177: LD_VAR 0 1
17181: PPUSH
17182: CALL_OW 74
17186: PPUSH
17187: CALL_OW 115
// end ; end ; end ;
17191: GO 16668
17193: POP
17194: POP
// end ; end_of_file
17195: PPOPN 3
17197: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
17198: LD_INT 0
17200: PPUSH
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
17205: PPUSH
17206: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
17207: LD_ADDR_VAR 0 3
17211: PUSH
17212: LD_INT 22
17214: PUSH
17215: LD_INT 6
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 21
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 25
17234: PUSH
17235: LD_INT 1
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 3
17244: PUSH
17245: LD_INT 54
17247: PUSH
17248: EMPTY
17249: LIST
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: PPUSH
17261: CALL_OW 69
17265: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
17266: LD_ADDR_VAR 0 7
17270: PUSH
17271: LD_INT 22
17273: PUSH
17274: LD_INT 6
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 21
17283: PUSH
17284: LD_INT 1
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 25
17293: PUSH
17294: LD_INT 1
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 54
17303: PUSH
17304: EMPTY
17305: LIST
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: PPUSH
17313: CALL_OW 69
17317: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
17318: LD_ADDR_VAR 0 4
17322: PUSH
17323: LD_INT 22
17325: PUSH
17326: LD_INT 6
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 21
17335: PUSH
17336: LD_INT 1
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 25
17345: PUSH
17346: LD_INT 2
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: LIST
17357: PPUSH
17358: CALL_OW 69
17362: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
17363: LD_ADDR_VAR 0 6
17367: PUSH
17368: LD_INT 22
17370: PUSH
17371: LD_INT 6
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 21
17380: PUSH
17381: LD_INT 1
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 25
17390: PUSH
17391: LD_INT 4
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: LIST
17402: PPUSH
17403: CALL_OW 69
17407: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
17408: LD_ADDR_VAR 0 8
17412: PUSH
17413: LD_INT 22
17415: PUSH
17416: LD_INT 6
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 21
17425: PUSH
17426: LD_INT 2
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 34
17435: PUSH
17436: LD_INT 51
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: PPUSH
17448: CALL_OW 69
17452: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
17453: LD_VAR 0 1
17457: PPUSH
17458: CALL_OW 255
17462: PUSH
17463: LD_INT 6
17465: EQUAL
17466: PUSH
17467: LD_VAR 0 1
17471: PPUSH
17472: CALL_OW 266
17476: PUSH
17477: LD_INT 0
17479: EQUAL
17480: AND
17481: IFFALSE 17501
// begin ruPDepot = building ;
17483: LD_ADDR_EXP 21
17487: PUSH
17488: LD_VAR 0 1
17492: ST_TO_ADDR
// baseReadyToBuild = 1 ;
17493: LD_ADDR_EXP 20
17497: PUSH
17498: LD_INT 1
17500: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
17501: LD_VAR 0 1
17505: PPUSH
17506: CALL_OW 266
17510: PUSH
17511: LD_INT 4
17513: EQUAL
17514: PUSH
17515: LD_VAR 0 1
17519: PPUSH
17520: CALL_OW 255
17524: PUSH
17525: LD_INT 6
17527: EQUAL
17528: AND
17529: IFFALSE 17562
// for i in tmpSold do
17531: LD_ADDR_VAR 0 2
17535: PUSH
17536: LD_VAR 0 3
17540: PUSH
17541: FOR_IN
17542: IFFALSE 17560
// ComEnterUnit ( i , building ) ;
17544: LD_VAR 0 2
17548: PPUSH
17549: LD_VAR 0 1
17553: PPUSH
17554: CALL_OW 120
17558: GO 17541
17560: POP
17561: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
17562: LD_VAR 0 1
17566: PPUSH
17567: CALL_OW 266
17571: PUSH
17572: LD_INT 6
17574: EQUAL
17575: PUSH
17576: LD_VAR 0 1
17580: PPUSH
17581: CALL_OW 255
17585: PUSH
17586: LD_INT 6
17588: EQUAL
17589: AND
17590: IFFALSE 17648
// begin for i in tmpSci do
17592: LD_ADDR_VAR 0 2
17596: PUSH
17597: LD_VAR 0 6
17601: PUSH
17602: FOR_IN
17603: IFFALSE 17621
// ComEnterUnit ( i , building ) ;
17605: LD_VAR 0 2
17609: PPUSH
17610: LD_VAR 0 1
17614: PPUSH
17615: CALL_OW 120
17619: GO 17602
17621: POP
17622: POP
// ResAllTechs ( 6 , building , 3 ) ;
17623: LD_INT 6
17625: PPUSH
17626: LD_VAR 0 1
17630: PPUSH
17631: LD_INT 3
17633: PPUSH
17634: CALL 5818 0 3
// ruPLab = building ;
17638: LD_ADDR_EXP 22
17642: PUSH
17643: LD_VAR 0 1
17647: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
17648: LD_VAR 0 1
17652: PPUSH
17653: CALL_OW 266
17657: PUSH
17658: LD_INT 2
17660: EQUAL
17661: PUSH
17662: LD_VAR 0 1
17666: PPUSH
17667: CALL_OW 255
17671: PUSH
17672: LD_INT 6
17674: EQUAL
17675: AND
17676: IFFALSE 17727
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
17678: LD_ADDR_VAR 0 5
17682: PUSH
17683: LD_VAR 0 8
17687: PUSH
17688: LD_INT 1
17690: ARRAY
17691: PPUSH
17692: CALL_OW 313
17696: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
17697: LD_VAR 0 5
17701: PPUSH
17702: CALL_OW 121
// wait ( 0 0$1 ) ;
17706: LD_INT 35
17708: PPUSH
17709: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
17713: LD_VAR 0 5
17717: PPUSH
17718: LD_VAR 0 1
17722: PPUSH
17723: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
17727: LD_VAR 0 1
17731: PPUSH
17732: CALL_OW 266
17736: PUSH
17737: LD_INT 32
17739: EQUAL
17740: PUSH
17741: LD_VAR 0 1
17745: PPUSH
17746: CALL_OW 255
17750: PUSH
17751: LD_INT 6
17753: EQUAL
17754: AND
17755: IFFALSE 17807
// begin ComPlaceWeapon ( building , 42 ) ;
17757: LD_VAR 0 1
17761: PPUSH
17762: LD_INT 42
17764: PPUSH
17765: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
17769: LD_VAR 0 7
17773: PUSH
17774: LD_INT 1
17776: ARRAY
17777: PPUSH
17778: CALL_OW 122
// wait ( 0 0$1 ) ;
17782: LD_INT 35
17784: PPUSH
17785: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
17789: LD_VAR 0 7
17793: PUSH
17794: LD_INT 1
17796: ARRAY
17797: PPUSH
17798: LD_VAR 0 1
17802: PPUSH
17803: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
17807: LD_VAR 0 1
17811: PPUSH
17812: CALL_OW 266
17816: PUSH
17817: LD_INT 31
17819: EQUAL
17820: PUSH
17821: LD_VAR 0 1
17825: PPUSH
17826: CALL_OW 255
17830: PUSH
17831: LD_INT 6
17833: EQUAL
17834: AND
17835: IFFALSE 17901
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
17837: LD_VAR 0 7
17841: PUSH
17842: LD_INT 2
17844: ARRAY
17845: PPUSH
17846: CALL_OW 122
// wait ( 0 0$1 ) ;
17850: LD_INT 35
17852: PPUSH
17853: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
17857: LD_VAR 0 7
17861: PUSH
17862: LD_INT 2
17864: ARRAY
17865: PPUSH
17866: LD_VAR 0 1
17870: PPUSH
17871: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
17875: LD_VAR 0 4
17879: PUSH
17880: LD_INT 1
17882: ARRAY
17883: PPUSH
17884: LD_EXP 21
17888: PPUSH
17889: CALL_OW 120
// baseReadyToBuild = 2 ;
17893: LD_ADDR_EXP 20
17897: PUSH
17898: LD_INT 2
17900: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
17901: LD_VAR 0 1
17905: PPUSH
17906: CALL_OW 266
17910: PUSH
17911: LD_INT 32
17913: EQUAL
17914: PUSH
17915: LD_VAR 0 1
17919: PPUSH
17920: CALL_OW 255
17924: PUSH
17925: LD_INT 1
17927: EQUAL
17928: AND
17929: PUSH
17930: LD_EXP 32
17934: PUSH
17935: LD_INT 0
17937: EQUAL
17938: AND
17939: IFFALSE 18184
// begin bunkerDialog = 1 ;
17941: LD_ADDR_EXP 32
17945: PUSH
17946: LD_INT 1
17948: ST_TO_ADDR
// if IsOK ( Claptopn ) then
17949: LD_EXP 11
17953: PPUSH
17954: CALL_OW 302
17958: IFFALSE 17974
// begin Say ( Claptopn , D11-Eng1-1 ) ;
17960: LD_EXP 11
17964: PPUSH
17965: LD_STRING D11-Eng1-1
17967: PPUSH
17968: CALL_OW 88
// end else
17972: GO 18170
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17974: LD_INT 22
17976: PUSH
17977: LD_INT 1
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 21
17986: PUSH
17987: LD_INT 1
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 25
17996: PUSH
17997: LD_INT 3
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 26
18006: PUSH
18007: LD_INT 1
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: PPUSH
18020: CALL_OW 69
18024: PUSH
18025: LD_EXP 1
18029: PUSH
18030: EMPTY
18031: LIST
18032: PUSH
18033: LD_INT 0
18035: GREATER
18036: DIFF
18037: IFFALSE 18111
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18039: LD_INT 22
18041: PUSH
18042: LD_INT 1
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 21
18051: PUSH
18052: LD_INT 1
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 25
18061: PUSH
18062: LD_INT 2
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 26
18071: PUSH
18072: LD_INT 1
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: PPUSH
18085: CALL_OW 69
18089: PUSH
18090: LD_EXP 1
18094: PUSH
18095: EMPTY
18096: LIST
18097: DIFF
18098: PPUSH
18099: LD_STRING D11-Eng1-1
18101: PPUSH
18102: LD_STRING D11-Eng1-1
18104: PPUSH
18105: CALL 4467 0 3
// end else
18109: GO 18170
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
18111: LD_INT 22
18113: PUSH
18114: LD_INT 1
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 21
18123: PUSH
18124: LD_INT 1
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 26
18133: PUSH
18134: LD_INT 1
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: LIST
18145: PPUSH
18146: CALL_OW 69
18150: PUSH
18151: LD_EXP 1
18155: PUSH
18156: EMPTY
18157: LIST
18158: DIFF
18159: PPUSH
18160: LD_STRING D11-Eng1-1
18162: PPUSH
18163: LD_STRING D11-Eng1-1
18165: PPUSH
18166: CALL 4467 0 3
// end ; end ; if energyVDialog = 0 then
18170: LD_EXP 33
18174: PUSH
18175: LD_INT 0
18177: EQUAL
18178: IFFALSE 18184
// EnergyDialog ;
18180: CALL 4870 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
18184: LD_VAR 0 1
18188: PPUSH
18189: CALL_OW 266
18193: PUSH
18194: LD_INT 29
18196: EQUAL
18197: PUSH
18198: LD_VAR 0 1
18202: PPUSH
18203: CALL_OW 255
18207: PUSH
18208: LD_INT 1
18210: EQUAL
18211: AND
18212: IFFALSE 18222
// buildOil = 1 ;
18214: LD_ADDR_EXP 34
18218: PUSH
18219: LD_INT 1
18221: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
18222: LD_VAR 0 1
18226: PPUSH
18227: CALL_OW 266
18231: PUSH
18232: LD_INT 26
18234: EQUAL
18235: PUSH
18236: LD_VAR 0 1
18240: PPUSH
18241: CALL_OW 255
18245: PUSH
18246: LD_INT 1
18248: EQUAL
18249: AND
18250: IFFALSE 18260
// buildPower = 1 ;
18252: LD_ADDR_EXP 35
18256: PUSH
18257: LD_INT 1
18259: ST_TO_ADDR
// end ;
18260: PPOPN 8
18262: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
18263: LD_VAR 0 1
18267: PPUSH
18268: CALL_OW 266
18272: PUSH
18273: LD_INT 3
18275: EQUAL
18276: PUSH
18277: LD_VAR 0 1
18281: PPUSH
18282: CALL_OW 255
18286: PUSH
18287: LD_INT 1
18289: EQUAL
18290: AND
18291: PUSH
18292: LD_EXP 31
18296: PUSH
18297: LD_INT 0
18299: EQUAL
18300: AND
18301: IFFALSE 18649
// begin factoryDialog = 1 ;
18303: LD_ADDR_EXP 31
18307: PUSH
18308: LD_INT 1
18310: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
18311: LD_INT 22
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 21
18323: PUSH
18324: LD_INT 3
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 30
18333: PUSH
18334: LD_INT 3
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 24
18343: PUSH
18344: LD_INT 1000
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: PPUSH
18357: CALL_OW 69
18361: PUSH
18362: LD_INT 1
18364: ARRAY
18365: PPUSH
18366: CALL_OW 87
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
18370: LD_INT 47
18372: PPUSH
18373: LD_INT 1
18375: PPUSH
18376: CALL_OW 321
18380: PUSH
18381: LD_INT 1
18383: EQUAL
18384: PUSH
18385: LD_INT 45
18387: PPUSH
18388: LD_INT 1
18390: PPUSH
18391: CALL_OW 321
18395: PUSH
18396: LD_INT 1
18398: EQUAL
18399: AND
18400: IFFALSE 18649
// begin Say ( JMM , D9a-JMM-1 ) ;
18402: LD_EXP 1
18406: PPUSH
18407: LD_STRING D9a-JMM-1
18409: PPUSH
18410: CALL_OW 88
// if IsOK ( Campell ) then
18414: LD_EXP 12
18418: PPUSH
18419: CALL_OW 302
18423: IFFALSE 18439
// begin Say ( Campell , D9a-Mech1-1 ) ;
18425: LD_EXP 12
18429: PPUSH
18430: LD_STRING D9a-Mech1-1
18432: PPUSH
18433: CALL_OW 88
// end else
18437: GO 18635
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
18439: LD_INT 22
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 21
18451: PUSH
18452: LD_INT 1
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 25
18461: PUSH
18462: LD_INT 3
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 26
18471: PUSH
18472: LD_INT 1
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: PPUSH
18485: CALL_OW 69
18489: PUSH
18490: LD_EXP 1
18494: PUSH
18495: EMPTY
18496: LIST
18497: PUSH
18498: LD_INT 0
18500: GREATER
18501: DIFF
18502: IFFALSE 18576
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18504: LD_INT 22
18506: PUSH
18507: LD_INT 1
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 21
18516: PUSH
18517: LD_INT 1
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 25
18526: PUSH
18527: LD_INT 3
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 26
18536: PUSH
18537: LD_INT 1
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: PPUSH
18550: CALL_OW 69
18554: PUSH
18555: LD_EXP 1
18559: PUSH
18560: EMPTY
18561: LIST
18562: DIFF
18563: PPUSH
18564: LD_STRING D9a-Mech1-1
18566: PPUSH
18567: LD_STRING D9a-Mech1-1
18569: PPUSH
18570: CALL 4467 0 3
// end else
18574: GO 18635
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
18576: LD_INT 22
18578: PUSH
18579: LD_INT 1
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 21
18588: PUSH
18589: LD_INT 1
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 26
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: LIST
18610: PPUSH
18611: CALL_OW 69
18615: PUSH
18616: LD_EXP 1
18620: PUSH
18621: EMPTY
18622: LIST
18623: DIFF
18624: PPUSH
18625: LD_STRING D9a-Mech1-1
18627: PPUSH
18628: LD_STRING D9a-Mech1-1
18630: PPUSH
18631: CALL 4467 0 3
// end ; end ; if energyVDialog = 0 then
18635: LD_EXP 33
18639: PUSH
18640: LD_INT 0
18642: EQUAL
18643: IFFALSE 18649
// EnergyDialog ;
18645: CALL 4870 0 0
// end ; end ; end ;
18649: PPOPN 1
18651: END
// on UnitDestroyed ( unit ) do var mech ;
18652: LD_INT 0
18654: PPUSH
// begin if unit = JMM then
18655: LD_VAR 0 1
18659: PUSH
18660: LD_EXP 1
18664: EQUAL
18665: IFFALSE 18674
// YouLost ( JMM ) ;
18667: LD_STRING JMM
18669: PPUSH
18670: CALL_OW 104
// if unit in ruMobile then
18674: LD_VAR 0 1
18678: PUSH
18679: LD_EXP 45
18683: IN
18684: IFFALSE 18702
// ruMobile = ruMobile diff ruMobile ;
18686: LD_ADDR_EXP 45
18690: PUSH
18691: LD_EXP 45
18695: PUSH
18696: LD_EXP 45
18700: DIFF
18701: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
18702: LD_VAR 0 1
18706: PPUSH
18707: CALL_OW 247
18711: PUSH
18712: LD_INT 1
18714: EQUAL
18715: PUSH
18716: LD_VAR 0 1
18720: PPUSH
18721: CALL_OW 255
18725: PUSH
18726: LD_INT 1
18728: EQUAL
18729: AND
18730: IFFALSE 18746
// lostCounter = lostCounter + 1 ;
18732: LD_ADDR_EXP 38
18736: PUSH
18737: LD_EXP 38
18741: PUSH
18742: LD_INT 1
18744: PLUS
18745: ST_TO_ADDR
// if UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
18746: LD_INT 24
18748: PPUSH
18749: CALL_OW 313
18753: PUSH
18754: LD_INT 6
18756: LESS
18757: PUSH
18758: LD_VAR 0 1
18762: PPUSH
18763: CALL_OW 257
18767: PUSH
18768: LD_INT 3
18770: EQUAL
18771: AND
18772: PUSH
18773: LD_VAR 0 1
18777: PPUSH
18778: CALL_OW 255
18782: PUSH
18783: LD_INT 3
18785: EQUAL
18786: AND
18787: PUSH
18788: LD_INT 24
18790: PPUSH
18791: CALL_OW 302
18795: AND
18796: PUSH
18797: LD_INT 24
18799: PPUSH
18800: CALL_OW 255
18804: PUSH
18805: LD_INT 3
18807: EQUAL
18808: AND
18809: IFFALSE 18905
// begin uc_side = 3 ;
18811: LD_ADDR_OWVAR 20
18815: PUSH
18816: LD_INT 3
18818: ST_TO_ADDR
// uc_nation = 3 ;
18819: LD_ADDR_OWVAR 21
18823: PUSH
18824: LD_INT 3
18826: ST_TO_ADDR
// hc_gallery :=  ;
18827: LD_ADDR_OWVAR 33
18831: PUSH
18832: LD_STRING 
18834: ST_TO_ADDR
// hc_name :=  ;
18835: LD_ADDR_OWVAR 26
18839: PUSH
18840: LD_STRING 
18842: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
18843: LD_INT 0
18845: PPUSH
18846: LD_EXP 16
18850: PPUSH
18851: LD_EXP 17
18855: PPUSH
18856: CALL_OW 12
18860: PPUSH
18861: CALL_OW 383
// mech := CreateHuman ;
18865: LD_ADDR_VAR 0 2
18869: PUSH
18870: CALL_OW 44
18874: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
18875: LD_VAR 0 2
18879: PPUSH
18880: LD_INT 124
18882: PPUSH
18883: LD_INT 97
18885: PPUSH
18886: LD_INT 0
18888: PPUSH
18889: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
18893: LD_VAR 0 2
18897: PPUSH
18898: LD_INT 24
18900: PPUSH
18901: CALL_OW 120
// end ; end ;
18905: PPOPN 2
18907: END
// on Contact ( side1 , side2 ) do var i , tmp ;
18908: LD_INT 0
18910: PPUSH
18911: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
18912: LD_ADDR_VAR 0 4
18916: PUSH
18917: LD_INT 22
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PPUSH
18927: CALL_OW 69
18931: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
18932: LD_VAR 0 1
18936: PUSH
18937: LD_INT 1
18939: EQUAL
18940: PUSH
18941: LD_VAR 0 2
18945: PUSH
18946: LD_INT 6
18948: EQUAL
18949: AND
18950: PUSH
18951: LD_EXP 41
18955: PUSH
18956: LD_INT 1
18958: EQUAL
18959: AND
18960: IFFALSE 19015
// begin donaldsonCoopAttack = 0 ;
18962: LD_ADDR_EXP 41
18966: PUSH
18967: LD_INT 0
18969: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
18970: LD_ADDR_VAR 0 3
18974: PUSH
18975: LD_INT 22
18977: PUSH
18978: LD_INT 4
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: EMPTY
18986: LIST
18987: PPUSH
18988: CALL_OW 69
18992: PUSH
18993: FOR_IN
18994: IFFALSE 19013
// ComAgressiveMove ( i , 52 , 64 ) ;
18996: LD_VAR 0 3
19000: PPUSH
19001: LD_INT 52
19003: PPUSH
19004: LD_INT 64
19006: PPUSH
19007: CALL_OW 114
19011: GO 18993
19013: POP
19014: POP
// end ; end ;
19015: PPOPN 4
19017: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
19018: LD_INT 0
19020: PPUSH
// begin if GetSide ( vehicle ) = 1 then
19021: LD_VAR 0 1
19025: PPUSH
19026: CALL_OW 255
19030: PUSH
19031: LD_INT 1
19033: EQUAL
19034: IFFALSE 19050
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
19036: LD_ADDR_EXP 42
19040: PUSH
19041: LD_EXP 42
19045: PUSH
19046: LD_INT 1
19048: PLUS
19049: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
19050: LD_VAR 0 1
19054: PPUSH
19055: CALL_OW 255
19059: PUSH
19060: LD_INT 3
19062: EQUAL
19063: PUSH
19064: LD_VAR 0 1
19068: PPUSH
19069: CALL_OW 264
19073: PUSH
19074: LD_INT 42
19076: PUSH
19077: LD_INT 43
19079: PUSH
19080: LD_INT 44
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: LIST
19087: IN
19088: AND
19089: IFFALSE 19107
// ruMobile := ruMobile union vehicle ;
19091: LD_ADDR_EXP 45
19095: PUSH
19096: LD_EXP 45
19100: PUSH
19101: LD_VAR 0 1
19105: UNION
19106: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 53 then
19107: LD_VAR 0 1
19111: PPUSH
19112: CALL_OW 264
19116: PUSH
19117: LD_INT 53
19119: EQUAL
19120: IFFALSE 19256
// begin uc_side = 3 ;
19122: LD_ADDR_OWVAR 20
19126: PUSH
19127: LD_INT 3
19129: ST_TO_ADDR
// uc_nation = 3 ;
19130: LD_ADDR_OWVAR 21
19134: PUSH
19135: LD_INT 3
19137: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
19138: LD_INT 0
19140: PPUSH
19141: LD_EXP 17
19145: PPUSH
19146: CALL_OW 383
// driver := CreateHuman ;
19150: LD_ADDR_VAR 0 3
19154: PUSH
19155: CALL_OW 44
19159: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
19160: LD_VAR 0 3
19164: PPUSH
19165: LD_VAR 0 2
19169: PPUSH
19170: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
19174: LD_VAR 0 1
19178: PPUSH
19179: LD_INT 21
19181: PPUSH
19182: CALL 5086 0 2
// repeat wait ( 0 0$1 ) ;
19186: LD_INT 35
19188: PPUSH
19189: CALL_OW 67
// until not HasTask ( vehicle ) ;
19193: LD_VAR 0 1
19197: PPUSH
19198: CALL_OW 314
19202: NOT
19203: IFFALSE 19186
// driver := IsDrivenBy ( vehicle ) ;
19205: LD_ADDR_VAR 0 3
19209: PUSH
19210: LD_VAR 0 1
19214: PPUSH
19215: CALL_OW 311
19219: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
19220: LD_VAR 0 3
19224: PPUSH
19225: LD_INT 104
19227: PPUSH
19228: LD_INT 73
19230: PPUSH
19231: CALL_OW 171
// AddComExitVehicle ( driver ) ;
19235: LD_VAR 0 3
19239: PPUSH
19240: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
19244: LD_VAR 0 3
19248: PPUSH
19249: LD_INT 24
19251: PPUSH
19252: CALL_OW 180
// end ; end ;
19256: PPOPN 3
19258: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
19259: LD_INT 0
19261: PPUSH
19262: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
19263: LD_VAR 0 1
19267: PPUSH
19268: CALL_OW 255
19272: PUSH
19273: LD_INT 3
19275: EQUAL
19276: PUSH
19277: LD_VAR 0 1
19281: PPUSH
19282: CALL_OW 247
19286: PUSH
19287: LD_INT 2
19289: EQUAL
19290: AND
19291: IFFALSE 19385
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
19293: LD_VAR 0 1
19297: PPUSH
19298: CALL_OW 264
19302: PUSH
19303: LD_INT 42
19305: EQUAL
19306: PUSH
19307: LD_VAR 0 1
19311: PPUSH
19312: CALL_OW 264
19316: PUSH
19317: LD_INT 43
19319: EQUAL
19320: OR
19321: PUSH
19322: LD_VAR 0 1
19326: PPUSH
19327: CALL_OW 264
19331: PUSH
19332: LD_INT 44
19334: EQUAL
19335: OR
19336: IFFALSE 19385
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
19338: LD_INT 24
19340: PPUSH
19341: LD_VAR 0 1
19345: PPUSH
19346: CALL_OW 265
19350: PPUSH
19351: LD_VAR 0 1
19355: PPUSH
19356: CALL_OW 262
19360: PPUSH
19361: LD_VAR 0 1
19365: PPUSH
19366: CALL_OW 263
19370: PPUSH
19371: LD_VAR 0 1
19375: PPUSH
19376: CALL_OW 264
19380: PPUSH
19381: CALL_OW 185
// end ;
19385: PPOPN 3
19387: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
19388: LD_VAR 0 1
19392: PPUSH
19393: CALL_OW 255
19397: PUSH
19398: LD_INT 3
19400: EQUAL
19401: PUSH
19402: LD_VAR 0 2
19406: PPUSH
19407: CALL_OW 255
19411: PUSH
19412: LD_INT 3
19414: EQUAL
19415: AND
19416: PUSH
19417: LD_INT 24
19419: PPUSH
19420: CALL_OW 302
19424: AND
19425: PUSH
19426: LD_VAR 0 1
19430: PPUSH
19431: CALL_OW 302
19435: NOT
19436: AND
19437: IFFALSE 19451
// ComEnterUnit ( human , rubfact0 ) ;
19439: LD_VAR 0 2
19443: PPUSH
19444: LD_INT 24
19446: PPUSH
19447: CALL_OW 120
// end ;
19451: PPOPN 2
19453: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
19454: LD_VAR 0 1
19458: PUSH
19459: LD_INT 24
19461: EQUAL
19462: PUSH
19463: LD_VAR 0 2
19467: PPUSH
19468: CALL_OW 256
19472: PUSH
19473: LD_INT 1000
19475: LESS
19476: AND
19477: IFFALSE 19491
// SetLives ( un , 1000 ) ;
19479: LD_VAR 0 2
19483: PPUSH
19484: LD_INT 1000
19486: PPUSH
19487: CALL_OW 234
// end ;
19491: PPOPN 2
19493: END
// on Command ( comandid ) do var i , j , tmp ;
19494: LD_INT 0
19496: PPUSH
19497: PPUSH
19498: PPUSH
// begin SOS_Command ( comandid ) ;
19499: LD_VAR 0 1
19503: PPUSH
19504: CALL 22527 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
19508: LD_INT 22
19510: PUSH
19511: LD_INT 4
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PPUSH
19518: CALL_OW 69
19522: NOT
19523: IFFALSE 19527
// exit ;
19525: GO 19692
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
19527: LD_ADDR_VAR 0 2
19531: PUSH
19532: LD_INT 22
19534: PUSH
19535: LD_INT 1
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 2
19544: PUSH
19545: LD_INT 21
19547: PUSH
19548: LD_INT 1
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 21
19557: PUSH
19558: LD_INT 2
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: LIST
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PPUSH
19574: CALL_OW 69
19578: PUSH
19579: FOR_IN
19580: IFFALSE 19690
// begin if GetTaskList ( i ) > 0 then
19582: LD_VAR 0 2
19586: PPUSH
19587: CALL_OW 437
19591: PUSH
19592: LD_INT 0
19594: GREATER
19595: IFFALSE 19688
// begin for j = 1 to GetTaskList ( i ) do
19597: LD_ADDR_VAR 0 3
19601: PUSH
19602: DOUBLE
19603: LD_INT 1
19605: DEC
19606: ST_TO_ADDR
19607: LD_VAR 0 2
19611: PPUSH
19612: CALL_OW 437
19616: PUSH
19617: FOR_TO
19618: IFFALSE 19686
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
19620: LD_ADDR_VAR 0 4
19624: PUSH
19625: LD_VAR 0 2
19629: PPUSH
19630: CALL_OW 437
19634: PUSH
19635: LD_VAR 0 3
19639: ARRAY
19640: PUSH
19641: LD_INT 4
19643: ARRAY
19644: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
19645: LD_VAR 0 4
19649: PPUSH
19650: CALL_OW 255
19654: PUSH
19655: LD_INT 4
19657: EQUAL
19658: PUSH
19659: LD_VAR 0 4
19663: PPUSH
19664: CALL_OW 255
19668: PUSH
19669: LD_INT 0
19671: EQUAL
19672: OR
19673: IFFALSE 19684
// ComStop ( i ) ;
19675: LD_VAR 0 2
19679: PPUSH
19680: CALL_OW 141
// end ;
19684: GO 19617
19686: POP
19687: POP
// end ; end ;
19688: GO 19579
19690: POP
19691: POP
// end ; end_of_file
19692: PPOPN 4
19694: END
// every 10 10$0 do
19695: GO 19697
19697: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
19698: LD_INT 5
19700: PPUSH
19701: LD_INT 3
19703: PPUSH
19704: LD_INT 2
19706: PUSH
19707: LD_INT 2
19709: PUSH
19710: LD_INT 3
19712: PUSH
19713: LD_INT 4
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: LIST
19720: PUSH
19721: LD_OWVAR 67
19725: ARRAY
19726: PLUS
19727: PPUSH
19728: LD_INT 0
19730: PPUSH
19731: LD_INT 0
19733: PPUSH
19734: LD_INT 0
19736: PPUSH
19737: LD_INT 0
19739: PPUSH
19740: LD_EXP 16
19744: PPUSH
19745: LD_EXP 17
19749: PPUSH
19750: CALL_OW 12
19754: PPUSH
19755: LD_INT 4
19757: PPUSH
19758: LD_INT 14
19760: PPUSH
19761: LD_INT 1
19763: PPUSH
19764: LD_INT 2
19766: PPUSH
19767: CALL 7791 0 12
// end ;
19771: END
// every 20 20$0 do
19772: GO 19774
19774: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
19775: LD_INT 5
19777: PPUSH
19778: LD_INT 3
19780: PPUSH
19781: LD_INT 4
19783: PUSH
19784: LD_INT 2
19786: PUSH
19787: LD_INT 3
19789: PUSH
19790: LD_INT 4
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: LIST
19797: PUSH
19798: LD_OWVAR 67
19802: ARRAY
19803: PLUS
19804: PPUSH
19805: LD_INT 0
19807: PPUSH
19808: LD_INT 0
19810: PPUSH
19811: LD_INT 0
19813: PPUSH
19814: LD_INT 2
19816: PPUSH
19817: LD_EXP 16
19821: PPUSH
19822: LD_EXP 17
19826: PPUSH
19827: CALL_OW 12
19831: PPUSH
19832: LD_INT 4
19834: PPUSH
19835: LD_INT 14
19837: PPUSH
19838: LD_INT 1
19840: PPUSH
19841: LD_INT 1
19843: PPUSH
19844: CALL 7791 0 12
// end ;
19848: END
// every 25 25$0 do
19849: GO 19851
19851: DISABLE
// begin if Difficulty > 1 then
19852: LD_OWVAR 67
19856: PUSH
19857: LD_INT 1
19859: GREATER
19860: IFFALSE 19870
// specAttack := true ;
19862: LD_ADDR_EXP 46
19866: PUSH
19867: LD_INT 1
19869: ST_TO_ADDR
// RespawnAttackVehicle ( RussianAttack , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
19870: LD_INT 4
19872: PPUSH
19873: LD_INT 5
19875: PPUSH
19876: LD_INT 4
19878: PUSH
19879: LD_INT 5
19881: PUSH
19882: LD_INT 6
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: LIST
19889: PUSH
19890: LD_OWVAR 67
19894: ARRAY
19895: PPUSH
19896: LD_EXP 16
19900: PPUSH
19901: LD_EXP 17
19905: PPUSH
19906: CALL_OW 12
19910: PPUSH
19911: LD_INT 3
19913: PPUSH
19914: LD_INT 1
19916: PPUSH
19917: LD_INT 1
19919: PPUSH
19920: LD_INT 42
19922: PUSH
19923: LD_INT 42
19925: PUSH
19926: LD_INT 43
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 42
19936: PUSH
19937: LD_INT 43
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 43
19946: PUSH
19947: LD_INT 43
19949: PUSH
19950: LD_INT 43
19952: PUSH
19953: LD_INT 44
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: LIST
19966: PUSH
19967: LD_OWVAR 67
19971: ARRAY
19972: PPUSH
19973: EMPTY
19974: PPUSH
19975: EMPTY
19976: PPUSH
19977: LD_INT 1
19979: PPUSH
19980: CALL 9547 0 11
// end ;
19984: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
19985: LD_EXP 46
19989: IFFALSE 20352
19991: GO 19993
19993: DISABLE
19994: LD_INT 0
19996: PPUSH
19997: PPUSH
19998: PPUSH
19999: PPUSH
// begin wait ( 0 0$20 ) ;
20000: LD_INT 700
20002: PPUSH
20003: CALL_OW 67
// uc_side := 5 ;
20007: LD_ADDR_OWVAR 20
20011: PUSH
20012: LD_INT 5
20014: ST_TO_ADDR
// uc_nation := 3 ;
20015: LD_ADDR_OWVAR 21
20019: PUSH
20020: LD_INT 3
20022: ST_TO_ADDR
// InitHc ;
20023: CALL_OW 19
// hc_importance := 0 ;
20027: LD_ADDR_OWVAR 32
20031: PUSH
20032: LD_INT 0
20034: ST_TO_ADDR
// tmp := [ ] ;
20035: LD_ADDR_VAR 0 2
20039: PUSH
20040: EMPTY
20041: ST_TO_ADDR
// PrepareHuman ( false , 2 , 6 ) ;
20042: LD_INT 0
20044: PPUSH
20045: LD_INT 2
20047: PPUSH
20048: LD_INT 6
20050: PPUSH
20051: CALL_OW 380
// eng := CreateHuman ;
20055: LD_ADDR_VAR 0 4
20059: PUSH
20060: CALL_OW 44
20064: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
20065: LD_VAR 0 4
20069: PPUSH
20070: LD_INT 78
20072: PPUSH
20073: LD_INT 2
20075: PPUSH
20076: LD_INT 4
20078: PPUSH
20079: LD_INT 0
20081: PPUSH
20082: CALL_OW 50
// for i = 1 to 2 + Difficulty do
20086: LD_ADDR_VAR 0 3
20090: PUSH
20091: DOUBLE
20092: LD_INT 1
20094: DEC
20095: ST_TO_ADDR
20096: LD_INT 2
20098: PUSH
20099: LD_OWVAR 67
20103: PLUS
20104: PUSH
20105: FOR_TO
20106: IFFALSE 20187
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
20108: LD_INT 0
20110: PPUSH
20111: LD_INT 1
20113: PPUSH
20114: LD_INT 4
20116: PUSH
20117: LD_INT 5
20119: PUSH
20120: LD_INT 6
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: LIST
20127: PUSH
20128: LD_OWVAR 67
20132: ARRAY
20133: PPUSH
20134: CALL_OW 380
// un := CreateHuman ;
20138: LD_ADDR_VAR 0 1
20142: PUSH
20143: CALL_OW 44
20147: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
20148: LD_VAR 0 1
20152: PPUSH
20153: LD_INT 78
20155: PPUSH
20156: LD_INT 2
20158: PPUSH
20159: LD_INT 4
20161: PPUSH
20162: LD_INT 0
20164: PPUSH
20165: CALL_OW 50
// tmp := tmp ^ un ;
20169: LD_ADDR_VAR 0 2
20173: PUSH
20174: LD_VAR 0 2
20178: PUSH
20179: LD_VAR 0 1
20183: ADD
20184: ST_TO_ADDR
// end ;
20185: GO 20105
20187: POP
20188: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
20189: LD_VAR 0 2
20193: PPUSH
20194: LD_INT 49
20196: PPUSH
20197: LD_INT 3
20199: PPUSH
20200: CALL_OW 111
// wait ( 0 0$2 ) ;
20204: LD_INT 70
20206: PPUSH
20207: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
20211: LD_VAR 0 4
20215: PPUSH
20216: LD_INT 49
20218: PPUSH
20219: LD_INT 3
20221: PPUSH
20222: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
20226: LD_VAR 0 4
20230: PPUSH
20231: LD_INT 4
20233: PPUSH
20234: CALL_OW 227
// wait ( 0 0$10 ) ;
20238: LD_INT 350
20240: PPUSH
20241: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20245: LD_INT 35
20247: PPUSH
20248: CALL_OW 67
// for i in tmp do
20252: LD_ADDR_VAR 0 3
20256: PUSH
20257: LD_VAR 0 2
20261: PUSH
20262: FOR_IN
20263: IFFALSE 20343
// if not IsOk ( i ) then
20265: LD_VAR 0 3
20269: PPUSH
20270: CALL_OW 302
20274: NOT
20275: IFFALSE 20295
// tmp := tmp diff i else
20277: LD_ADDR_VAR 0 2
20281: PUSH
20282: LD_VAR 0 2
20286: PUSH
20287: LD_VAR 0 3
20291: DIFF
20292: ST_TO_ADDR
20293: GO 20341
// if not HasTask ( i ) then
20295: LD_VAR 0 3
20299: PPUSH
20300: CALL_OW 314
20304: NOT
20305: IFFALSE 20341
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
20307: LD_VAR 0 3
20311: PPUSH
20312: LD_INT 22
20314: PUSH
20315: LD_INT 1
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PPUSH
20322: CALL_OW 69
20326: PPUSH
20327: LD_VAR 0 3
20331: PPUSH
20332: CALL_OW 74
20336: PPUSH
20337: CALL_OW 115
20341: GO 20262
20343: POP
20344: POP
// until not tmp ;
20345: LD_VAR 0 2
20349: NOT
20350: IFFALSE 20245
// end ; end_of_file
20352: PPOPN 4
20354: END
// every 0 0$1 trigger startTimer = 1 do
20355: LD_EXP 30
20359: PUSH
20360: LD_INT 1
20362: EQUAL
20363: IFFALSE 20493
20365: GO 20367
20367: DISABLE
// begin enable ;
20368: ENABLE
// if timerStatus = 1 then
20369: LD_EXP 29
20373: PUSH
20374: LD_INT 1
20376: EQUAL
20377: IFFALSE 20410
// begin timeToSupport = timeToSupport - 0 0$01 ;
20379: LD_ADDR_EXP 28
20383: PUSH
20384: LD_EXP 28
20388: PUSH
20389: LD_INT 35
20391: MINUS
20392: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
20393: LD_ADDR_OWVAR 47
20397: PUSH
20398: LD_STRING #Am04-1
20400: PUSH
20401: LD_EXP 28
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: ST_TO_ADDR
// end ; if timerStatus = 2 then
20410: LD_EXP 29
20414: PUSH
20415: LD_INT 2
20417: EQUAL
20418: IFFALSE 20451
// begin timeToSupport = timeToSupport - 0 0$01 ;
20420: LD_ADDR_EXP 28
20424: PUSH
20425: LD_EXP 28
20429: PUSH
20430: LD_INT 35
20432: MINUS
20433: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
20434: LD_ADDR_OWVAR 47
20438: PUSH
20439: LD_STRING #Am04-2
20441: PUSH
20442: LD_EXP 28
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: ST_TO_ADDR
// end ; if timerStatus = 3 then
20451: LD_EXP 29
20455: PUSH
20456: LD_INT 3
20458: EQUAL
20459: IFFALSE 20475
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
20461: LD_ADDR_EXP 27
20465: PUSH
20466: LD_EXP 27
20470: PUSH
20471: LD_INT 35
20473: MINUS
20474: ST_TO_ADDR
// end ; if timerStatus = 4 then
20475: LD_EXP 29
20479: PUSH
20480: LD_INT 4
20482: EQUAL
20483: IFFALSE 20493
// begin display_strings =  ;
20485: LD_ADDR_OWVAR 47
20489: PUSH
20490: LD_STRING 
20492: ST_TO_ADDR
// end ; end ; end_of_file
20493: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
20494: LD_INT 4
20496: PPUSH
20497: CALL_OW 301
20501: IFFALSE 20513
20503: GO 20505
20505: DISABLE
// YouLost ( Base ) ; end_of_file
20506: LD_STRING Base
20508: PPUSH
20509: CALL_OW 104
20513: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , p ;
20514: LD_EXP 15
20518: PPUSH
20519: CALL_OW 301
20523: PUSH
20524: LD_INT 22
20526: PUSH
20527: LD_INT 3
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 21
20536: PUSH
20537: LD_INT 1
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PPUSH
20548: CALL_OW 69
20552: PUSH
20553: LD_INT 14
20555: PUSH
20556: LD_INT 13
20558: PUSH
20559: LD_INT 12
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: LIST
20566: PUSH
20567: LD_OWVAR 67
20571: ARRAY
20572: LESS
20573: AND
20574: IFFALSE 21045
20576: GO 20578
20578: DISABLE
20579: LD_INT 0
20581: PPUSH
20582: PPUSH
// begin AIEnable = 0 ;
20583: LD_ADDR_EXP 37
20587: PUSH
20588: LD_INT 0
20590: ST_TO_ADDR
// escapeAvalaible = 1 ;
20591: LD_ADDR_EXP 40
20595: PUSH
20596: LD_INT 1
20598: ST_TO_ADDR
// InGameOn ;
20599: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
20603: LD_INT 3
20605: PPUSH
20606: LD_INT 1
20608: PPUSH
20609: LD_INT 1
20611: PPUSH
20612: LD_INT 0
20614: PPUSH
20615: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
20619: LD_INT 6
20621: PPUSH
20622: LD_INT 1
20624: PPUSH
20625: LD_INT 1
20627: PPUSH
20628: LD_INT 0
20630: PPUSH
20631: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
20635: LD_INT 5
20637: PPUSH
20638: LD_INT 1
20640: PPUSH
20641: LD_INT 1
20643: PPUSH
20644: LD_INT 0
20646: PPUSH
20647: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
20651: LD_INT 3
20653: PPUSH
20654: LD_INT 1
20656: PPUSH
20657: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
20661: LD_INT 97
20663: PPUSH
20664: LD_INT 91
20666: PPUSH
20667: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
20671: LD_INT 22
20673: PUSH
20674: LD_INT 3
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 21
20683: PUSH
20684: LD_INT 1
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PPUSH
20695: CALL_OW 69
20699: PPUSH
20700: CALL_OW 121
// wait ( 0 0$01 ) ;
20704: LD_INT 35
20706: PPUSH
20707: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20711: LD_INT 22
20713: PUSH
20714: LD_INT 3
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 21
20723: PUSH
20724: LD_INT 1
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PPUSH
20735: CALL_OW 69
20739: PPUSH
20740: LD_INT 124
20742: PPUSH
20743: LD_INT 98
20745: PPUSH
20746: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
20750: LD_INT 22
20752: PUSH
20753: LD_INT 5
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 21
20762: PUSH
20763: LD_INT 1
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PPUSH
20774: CALL_OW 69
20778: PPUSH
20779: CALL_OW 121
// wait ( 0 0$01 ) ;
20783: LD_INT 35
20785: PPUSH
20786: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20790: LD_INT 22
20792: PUSH
20793: LD_INT 5
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 21
20802: PUSH
20803: LD_INT 1
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PPUSH
20814: CALL_OW 69
20818: PPUSH
20819: LD_INT 124
20821: PPUSH
20822: LD_INT 98
20824: PPUSH
20825: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
20829: LD_INT 22
20831: PUSH
20832: LD_INT 6
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 21
20841: PUSH
20842: LD_INT 1
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PPUSH
20853: CALL_OW 69
20857: PPUSH
20858: CALL_OW 121
// wait ( 0 0$01 ) ;
20862: LD_INT 35
20864: PPUSH
20865: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20869: LD_INT 22
20871: PUSH
20872: LD_INT 6
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 21
20881: PUSH
20882: LD_INT 1
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PPUSH
20893: CALL_OW 69
20897: PPUSH
20898: LD_INT 124
20900: PPUSH
20901: LD_INT 98
20903: PPUSH
20904: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
20908: LD_INT 22
20910: PUSH
20911: LD_INT 1
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 21
20920: PUSH
20921: LD_INT 1
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PPUSH
20932: CALL_OW 69
20936: PPUSH
20937: LD_INT 124
20939: PPUSH
20940: LD_INT 98
20942: PPUSH
20943: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
20947: LD_INT 124
20949: PPUSH
20950: LD_INT 98
20952: PPUSH
20953: CALL_OW 84
// p := 0 0$0 ;
20957: LD_ADDR_VAR 0 2
20961: PUSH
20962: LD_INT 0
20964: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20965: LD_INT 35
20967: PPUSH
20968: CALL_OW 67
// p := p + 0 0$1 ;
20972: LD_ADDR_VAR 0 2
20976: PUSH
20977: LD_VAR 0 2
20981: PUSH
20982: LD_INT 35
20984: PLUS
20985: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
20986: LD_INT 23
20988: PUSH
20989: LD_INT 3
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 21
20998: PUSH
20999: LD_INT 1
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 24
21008: PUSH
21009: LD_INT 250
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: LIST
21020: PPUSH
21021: CALL_OW 69
21025: PUSH
21026: LD_INT 0
21028: EQUAL
21029: PUSH
21030: LD_VAR 0 2
21034: PUSH
21035: LD_INT 245
21037: GREATEREQUAL
21038: OR
21039: IFFALSE 20965
// FinishMission ;
21041: CALL 21127 0 0
// end ;
21045: PPOPN 2
21047: END
// every 0 0$01 trigger escapeAvalaible do var i ;
21048: LD_EXP 40
21052: IFFALSE 21124
21054: GO 21056
21056: DISABLE
21057: LD_INT 0
21059: PPUSH
// begin enable ;
21060: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_not , [ f_side , 1 ] ] , [ f_not , [ f_empty ] ] ] ) do
21061: LD_ADDR_VAR 0 1
21065: PUSH
21066: LD_INT 5
21068: PPUSH
21069: LD_INT 3
21071: PUSH
21072: LD_INT 22
21074: PUSH
21075: LD_INT 1
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 3
21088: PUSH
21089: LD_INT 58
21091: PUSH
21092: EMPTY
21093: LIST
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PPUSH
21103: CALL_OW 70
21107: PUSH
21108: FOR_IN
21109: IFFALSE 21122
// RemoveUnit ( i ) ;
21111: LD_VAR 0 1
21115: PPUSH
21116: CALL_OW 64
21120: GO 21108
21122: POP
21123: POP
// end ;
21124: PPOPN 1
21126: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
21127: LD_INT 0
21129: PPUSH
21130: PPUSH
21131: PPUSH
21132: PPUSH
21133: PPUSH
// if not vehicleProduceCounter then
21134: LD_EXP 42
21138: NOT
21139: IFFALSE 21148
// SetAchievement ( ACH_INFANTRY ) ;
21141: LD_STRING ACH_INFANTRY
21143: PPUSH
21144: CALL_OW 543
// if tick <= 15 15$00 then
21148: LD_OWVAR 1
21152: PUSH
21153: LD_INT 31500
21155: LESSEQUAL
21156: IFFALSE 21172
// begin wait ( 3 ) ;
21158: LD_INT 3
21160: PPUSH
21161: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
21165: LD_STRING ACH_ASPEED_4
21167: PPUSH
21168: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
21172: LD_INT 22
21174: PPUSH
21175: CALL 21814 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
21179: LD_INT 69
21181: PPUSH
21182: LD_INT 1
21184: PPUSH
21185: CALL_OW 321
21189: PPUSH
21190: LD_STRING GatlingInGamma
21192: PPUSH
21193: CALL_OW 39
// m1 := false ;
21197: LD_ADDR_VAR 0 3
21201: PUSH
21202: LD_INT 0
21204: ST_TO_ADDR
// m2 := false ;
21205: LD_ADDR_VAR 0 4
21209: PUSH
21210: LD_INT 0
21212: ST_TO_ADDR
// m3 := false ;
21213: LD_ADDR_VAR 0 5
21217: PUSH
21218: LD_INT 0
21220: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
21221: LD_EXP 34
21225: PUSH
21226: LD_INT 1
21228: EQUAL
21229: PUSH
21230: LD_EXP 35
21234: PUSH
21235: LD_INT 1
21237: EQUAL
21238: AND
21239: IFFALSE 21261
// begin AddMedal ( oil , 1 ) ;
21241: LD_STRING oil
21243: PPUSH
21244: LD_INT 1
21246: PPUSH
21247: CALL_OW 101
// m1 := true ;
21251: LD_ADDR_VAR 0 3
21255: PUSH
21256: LD_INT 1
21258: ST_TO_ADDR
// end else
21259: GO 21354
// begin if buildOil = 1 and buildPower = 0 then
21261: LD_EXP 34
21265: PUSH
21266: LD_INT 1
21268: EQUAL
21269: PUSH
21270: LD_EXP 35
21274: PUSH
21275: LD_INT 0
21277: EQUAL
21278: AND
21279: IFFALSE 21292
// AddMedal ( oil , - 1 ) ;
21281: LD_STRING oil
21283: PPUSH
21284: LD_INT 1
21286: NEG
21287: PPUSH
21288: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
21292: LD_EXP 34
21296: PUSH
21297: LD_INT 0
21299: EQUAL
21300: PUSH
21301: LD_EXP 35
21305: PUSH
21306: LD_INT 1
21308: EQUAL
21309: AND
21310: IFFALSE 21323
// AddMedal ( oil , - 2 ) ;
21312: LD_STRING oil
21314: PPUSH
21315: LD_INT 2
21317: NEG
21318: PPUSH
21319: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
21323: LD_EXP 34
21327: PUSH
21328: LD_INT 0
21330: EQUAL
21331: PUSH
21332: LD_EXP 35
21336: PUSH
21337: LD_INT 0
21339: EQUAL
21340: AND
21341: IFFALSE 21354
// AddMedal ( oil , - 3 ) ;
21343: LD_STRING oil
21345: PPUSH
21346: LD_INT 3
21348: NEG
21349: PPUSH
21350: CALL_OW 101
// end ; if lostCounter > 3 then
21354: LD_EXP 38
21358: PUSH
21359: LD_INT 3
21361: GREATER
21362: IFFALSE 21377
// AddMedal ( deaths , - 1 ) else
21364: LD_STRING deaths
21366: PPUSH
21367: LD_INT 1
21369: NEG
21370: PPUSH
21371: CALL_OW 101
21375: GO 21395
// begin AddMedal ( deaths , 1 ) ;
21377: LD_STRING deaths
21379: PPUSH
21380: LD_INT 1
21382: PPUSH
21383: CALL_OW 101
// m2 := true ;
21387: LD_ADDR_VAR 0 4
21391: PUSH
21392: LD_INT 1
21394: ST_TO_ADDR
// end ; if honor = 1 then
21395: LD_EXP 39
21399: PUSH
21400: LD_INT 1
21402: EQUAL
21403: IFFALSE 21425
// begin AddMedal ( honour , 1 ) ;
21405: LD_STRING honour
21407: PPUSH
21408: LD_INT 1
21410: PPUSH
21411: CALL_OW 101
// m3 := true ;
21415: LD_ADDR_VAR 0 5
21419: PUSH
21420: LD_INT 1
21422: ST_TO_ADDR
// end else
21423: GO 21436
// begin AddMedal ( honour , - 1 ) ;
21425: LD_STRING honour
21427: PPUSH
21428: LD_INT 1
21430: NEG
21431: PPUSH
21432: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
21436: LD_VAR 0 3
21440: PUSH
21441: LD_VAR 0 4
21445: AND
21446: PUSH
21447: LD_VAR 0 5
21451: AND
21452: PUSH
21453: LD_OWVAR 67
21457: PUSH
21458: LD_INT 3
21460: EQUAL
21461: AND
21462: IFFALSE 21474
// SetAchievementEX ( ACH_AMER , 4 ) ;
21464: LD_STRING ACH_AMER
21466: PPUSH
21467: LD_INT 4
21469: PPUSH
21470: CALL_OW 564
// GiveMedals ( Main ) ;
21474: LD_STRING Main
21476: PPUSH
21477: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
21481: LD_INT 22
21483: PUSH
21484: LD_INT 1
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 23
21493: PUSH
21494: LD_INT 1
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 21
21503: PUSH
21504: LD_INT 1
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: PPUSH
21516: CALL_OW 69
21520: PPUSH
21521: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21525: LD_EXP 1
21529: PPUSH
21530: LD_EXP 47
21534: PUSH
21535: LD_STRING JMM
21537: STR
21538: PPUSH
21539: CALL_OW 38
// if IsOK ( Bobby ) then
21543: LD_EXP 2
21547: PPUSH
21548: CALL_OW 302
21552: IFFALSE 21572
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21554: LD_EXP 2
21558: PPUSH
21559: LD_EXP 47
21563: PUSH
21564: LD_STRING Bobby
21566: STR
21567: PPUSH
21568: CALL_OW 38
// if IsOK ( Cyrus ) then
21572: LD_EXP 3
21576: PPUSH
21577: CALL_OW 302
21581: IFFALSE 21601
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21583: LD_EXP 3
21587: PPUSH
21588: LD_EXP 47
21592: PUSH
21593: LD_STRING Cyrus
21595: STR
21596: PPUSH
21597: CALL_OW 38
// if IsOK ( Lisa ) then
21601: LD_EXP 4
21605: PPUSH
21606: CALL_OW 302
21610: IFFALSE 21630
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21612: LD_EXP 4
21616: PPUSH
21617: LD_EXP 47
21621: PUSH
21622: LD_STRING Lisa
21624: STR
21625: PPUSH
21626: CALL_OW 38
// if IsOK ( Brown ) then
21630: LD_EXP 7
21634: PPUSH
21635: CALL_OW 302
21639: IFFALSE 21659
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
21641: LD_EXP 7
21645: PPUSH
21646: LD_EXP 47
21650: PUSH
21651: LD_STRING Brown
21653: STR
21654: PPUSH
21655: CALL_OW 38
// if IsOK ( Donaldson ) then
21659: LD_EXP 13
21663: PPUSH
21664: CALL_OW 302
21668: IFFALSE 21688
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21670: LD_EXP 13
21674: PPUSH
21675: LD_EXP 47
21679: PUSH
21680: LD_STRING Donaldson
21682: STR
21683: PPUSH
21684: CALL_OW 38
// if IsOK ( Frank ) then
21688: LD_EXP 5
21692: PPUSH
21693: CALL_OW 302
21697: IFFALSE 21717
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
21699: LD_EXP 5
21703: PPUSH
21704: LD_EXP 47
21708: PUSH
21709: LD_STRING Frank
21711: STR
21712: PPUSH
21713: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
21717: LD_INT 50
21719: PUSH
21720: EMPTY
21721: LIST
21722: PUSH
21723: LD_INT 22
21725: PUSH
21726: LD_INT 1
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 21
21735: PUSH
21736: LD_INT 1
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: LIST
21747: PPUSH
21748: CALL_OW 69
21752: PUSH
21753: LD_EXP 1
21757: PUSH
21758: LD_EXP 2
21762: PUSH
21763: LD_EXP 3
21767: PUSH
21768: LD_EXP 4
21772: PUSH
21773: LD_EXP 7
21777: PUSH
21778: LD_EXP 13
21782: PUSH
21783: LD_EXP 5
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: DIFF
21797: PPUSH
21798: LD_STRING 04_other_survivors
21800: PPUSH
21801: CALL_OW 38
// YouWin ;
21805: CALL_OW 103
// end ;
21809: LD_VAR 0 1
21813: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
21814: LD_INT 0
21816: PPUSH
21817: PPUSH
21818: PPUSH
21819: PPUSH
// gammaBase = [ ] ;
21820: LD_ADDR_VAR 0 4
21824: PUSH
21825: EMPTY
21826: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
21827: LD_ADDR_VAR 0 5
21831: PUSH
21832: LD_VAR 0 1
21836: PPUSH
21837: LD_INT 22
21839: PUSH
21840: LD_INT 1
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 21
21849: PUSH
21850: LD_INT 3
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PPUSH
21861: CALL_OW 70
21865: ST_TO_ADDR
// for i in buildings do
21866: LD_ADDR_VAR 0 3
21870: PUSH
21871: LD_VAR 0 5
21875: PUSH
21876: FOR_IN
21877: IFFALSE 22214
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
21879: LD_VAR 0 3
21883: PPUSH
21884: CALL_OW 266
21888: PUSH
21889: LD_INT 6
21891: PUSH
21892: LD_INT 7
21894: PUSH
21895: LD_INT 8
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: LIST
21902: IN
21903: IFFALSE 22017
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
21905: LD_ADDR_VAR 0 4
21909: PUSH
21910: LD_VAR 0 4
21914: PUSH
21915: LD_VAR 0 3
21919: PPUSH
21920: CALL_OW 266
21924: PUSH
21925: LD_VAR 0 3
21929: PPUSH
21930: CALL_OW 250
21934: PUSH
21935: LD_VAR 0 3
21939: PPUSH
21940: CALL_OW 251
21944: PUSH
21945: LD_VAR 0 3
21949: PPUSH
21950: CALL_OW 254
21954: PUSH
21955: LD_VAR 0 3
21959: PPUSH
21960: CALL_OW 267
21964: PUSH
21965: LD_VAR 0 3
21969: PPUSH
21970: CALL_OW 248
21974: PUSH
21975: LD_VAR 0 3
21979: PPUSH
21980: LD_INT 1
21982: PPUSH
21983: CALL_OW 268
21987: PUSH
21988: LD_VAR 0 3
21992: PPUSH
21993: LD_INT 2
21995: PPUSH
21996: CALL_OW 268
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: PUSH
22011: EMPTY
22012: LIST
22013: ADD
22014: ST_TO_ADDR
22015: GO 22212
// if GetBType ( i ) in [ b_bunker ] then
22017: LD_VAR 0 3
22021: PPUSH
22022: CALL_OW 266
22026: PUSH
22027: LD_INT 32
22029: PUSH
22030: EMPTY
22031: LIST
22032: IN
22033: IFFALSE 22130
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22035: LD_ADDR_VAR 0 4
22039: PUSH
22040: LD_VAR 0 4
22044: PUSH
22045: LD_VAR 0 3
22049: PPUSH
22050: CALL_OW 266
22054: PUSH
22055: LD_VAR 0 3
22059: PPUSH
22060: CALL_OW 250
22064: PUSH
22065: LD_VAR 0 3
22069: PPUSH
22070: CALL_OW 251
22074: PUSH
22075: LD_VAR 0 3
22079: PPUSH
22080: CALL_OW 254
22084: PUSH
22085: LD_VAR 0 3
22089: PPUSH
22090: CALL_OW 267
22094: PUSH
22095: LD_VAR 0 3
22099: PPUSH
22100: CALL_OW 248
22104: PUSH
22105: LD_VAR 0 3
22109: PPUSH
22110: CALL_OW 269
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: PUSH
22124: EMPTY
22125: LIST
22126: ADD
22127: ST_TO_ADDR
22128: GO 22212
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
22130: LD_ADDR_VAR 0 4
22134: PUSH
22135: LD_VAR 0 4
22139: PUSH
22140: LD_VAR 0 3
22144: PPUSH
22145: CALL_OW 266
22149: PUSH
22150: LD_VAR 0 3
22154: PPUSH
22155: CALL_OW 250
22159: PUSH
22160: LD_VAR 0 3
22164: PPUSH
22165: CALL_OW 251
22169: PUSH
22170: LD_VAR 0 3
22174: PPUSH
22175: CALL_OW 254
22179: PUSH
22180: LD_VAR 0 3
22184: PPUSH
22185: CALL_OW 267
22189: PUSH
22190: LD_VAR 0 3
22194: PPUSH
22195: CALL_OW 248
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: PUSH
22208: EMPTY
22209: LIST
22210: ADD
22211: ST_TO_ADDR
// end ;
22212: GO 21876
22214: POP
22215: POP
// SaveVariable ( gammaBase , GammaBase ) ;
22216: LD_VAR 0 4
22220: PPUSH
22221: LD_STRING GammaBase
22223: PPUSH
22224: CALL_OW 39
// end ; end_of_file
22228: LD_VAR 0 2
22232: RET
// every 1 1$15 do
22233: GO 22235
22235: DISABLE
// begin if supply <= 13 and supply > 7 then
22236: LD_EXP 36
22240: PUSH
22241: LD_INT 13
22243: LESSEQUAL
22244: PUSH
22245: LD_EXP 36
22249: PUSH
22250: LD_INT 7
22252: GREATER
22253: AND
22254: IFFALSE 22277
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
22256: LD_INT 3
22258: PPUSH
22259: LD_INT 5
22261: PPUSH
22262: CALL_OW 12
22266: PPUSH
22267: LD_INT 18
22269: PPUSH
22270: LD_INT 1
22272: PPUSH
22273: CALL_OW 55
// if supply <= 7 and supply > 4 then
22277: LD_EXP 36
22281: PUSH
22282: LD_INT 7
22284: LESSEQUAL
22285: PUSH
22286: LD_EXP 36
22290: PUSH
22291: LD_INT 4
22293: GREATER
22294: AND
22295: IFFALSE 22318
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
22297: LD_INT 3
22299: PPUSH
22300: LD_INT 5
22302: PPUSH
22303: CALL_OW 12
22307: PPUSH
22308: LD_INT 19
22310: PPUSH
22311: LD_INT 1
22313: PPUSH
22314: CALL_OW 55
// if supply <= 4 and supply > 0 then
22318: LD_EXP 36
22322: PUSH
22323: LD_INT 4
22325: LESSEQUAL
22326: PUSH
22327: LD_EXP 36
22331: PUSH
22332: LD_INT 0
22334: GREATER
22335: AND
22336: IFFALSE 22359
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
22338: LD_INT 3
22340: PPUSH
22341: LD_INT 5
22343: PPUSH
22344: CALL_OW 12
22348: PPUSH
22349: LD_INT 20
22351: PPUSH
22352: LD_INT 1
22354: PPUSH
22355: CALL_OW 55
// if supply > 0 then
22359: LD_EXP 36
22363: PUSH
22364: LD_INT 0
22366: GREATER
22367: IFFALSE 22384
// begin supply = supply - 1 ;
22369: LD_ADDR_EXP 36
22373: PUSH
22374: LD_EXP 36
22378: PUSH
22379: LD_INT 1
22381: MINUS
22382: ST_TO_ADDR
// enable ;
22383: ENABLE
// end ; end ; end_of_file
22384: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
22385: GO 22387
22387: DISABLE
// begin ru_radar := 98 ;
22388: LD_ADDR_EXP 51
22392: PUSH
22393: LD_INT 98
22395: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22396: LD_ADDR_EXP 52
22400: PUSH
22401: LD_INT 89
22403: ST_TO_ADDR
// us_hack := 99 ;
22404: LD_ADDR_EXP 53
22408: PUSH
22409: LD_INT 99
22411: ST_TO_ADDR
// us_artillery := 97 ;
22412: LD_ADDR_EXP 54
22416: PUSH
22417: LD_INT 97
22419: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22420: LD_ADDR_EXP 55
22424: PUSH
22425: LD_INT 91
22427: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
22428: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
22429: LD_INT 0
22431: PPUSH
22432: PPUSH
22433: PPUSH
22434: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22435: LD_VAR 0 1
22439: PPUSH
22440: CALL_OW 264
22444: PUSH
22445: LD_EXP 55
22449: EQUAL
22450: IFFALSE 22522
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22452: LD_INT 68
22454: PPUSH
22455: LD_VAR 0 1
22459: PPUSH
22460: CALL_OW 255
22464: PPUSH
22465: CALL_OW 321
22469: PUSH
22470: LD_INT 2
22472: EQUAL
22473: IFFALSE 22485
// eff := 70 else
22475: LD_ADDR_VAR 0 6
22479: PUSH
22480: LD_INT 70
22482: ST_TO_ADDR
22483: GO 22493
// eff := 30 ;
22485: LD_ADDR_VAR 0 6
22489: PUSH
22490: LD_INT 30
22492: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22493: LD_VAR 0 1
22497: PPUSH
22498: CALL_OW 250
22502: PPUSH
22503: LD_VAR 0 1
22507: PPUSH
22508: CALL_OW 251
22512: PPUSH
22513: LD_VAR 0 6
22517: PPUSH
22518: CALL_OW 495
// end ; end ;
22522: LD_VAR 0 4
22526: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
22527: LD_INT 0
22529: PPUSH
22530: PPUSH
22531: PPUSH
22532: PPUSH
22533: PPUSH
22534: PPUSH
// if cmd = 124 then
22535: LD_VAR 0 1
22539: PUSH
22540: LD_INT 124
22542: EQUAL
22543: IFFALSE 22749
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
22545: LD_ADDR_VAR 0 5
22549: PUSH
22550: LD_INT 2
22552: PUSH
22553: LD_INT 34
22555: PUSH
22556: LD_INT 53
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 34
22565: PUSH
22566: LD_INT 14
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: LIST
22577: PPUSH
22578: CALL_OW 69
22582: ST_TO_ADDR
// if not tmp then
22583: LD_VAR 0 5
22587: NOT
22588: IFFALSE 22592
// exit ;
22590: GO 22749
// for i in tmp do
22592: LD_ADDR_VAR 0 3
22596: PUSH
22597: LD_VAR 0 5
22601: PUSH
22602: FOR_IN
22603: IFFALSE 22747
// begin taskList := GetTaskList ( i ) ;
22605: LD_ADDR_VAR 0 6
22609: PUSH
22610: LD_VAR 0 3
22614: PPUSH
22615: CALL_OW 437
22619: ST_TO_ADDR
// if not taskList then
22620: LD_VAR 0 6
22624: NOT
22625: IFFALSE 22629
// continue ;
22627: GO 22602
// for j = 1 to taskList do
22629: LD_ADDR_VAR 0 4
22633: PUSH
22634: DOUBLE
22635: LD_INT 1
22637: DEC
22638: ST_TO_ADDR
22639: LD_VAR 0 6
22643: PUSH
22644: FOR_TO
22645: IFFALSE 22743
// if taskList [ j ] [ 1 ] = | then
22647: LD_VAR 0 6
22651: PUSH
22652: LD_VAR 0 4
22656: ARRAY
22657: PUSH
22658: LD_INT 1
22660: ARRAY
22661: PUSH
22662: LD_STRING |
22664: EQUAL
22665: IFFALSE 22741
// begin _taskList := Delete ( taskList , 1 ) ;
22667: LD_ADDR_VAR 0 7
22671: PUSH
22672: LD_VAR 0 6
22676: PPUSH
22677: LD_INT 1
22679: PPUSH
22680: CALL_OW 3
22684: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
22685: LD_VAR 0 3
22689: PPUSH
22690: LD_VAR 0 7
22694: PPUSH
22695: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
22699: LD_VAR 0 3
22703: PPUSH
22704: LD_VAR 0 6
22708: PUSH
22709: LD_VAR 0 4
22713: ARRAY
22714: PUSH
22715: LD_INT 2
22717: ARRAY
22718: PPUSH
22719: LD_VAR 0 6
22723: PUSH
22724: LD_VAR 0 4
22728: ARRAY
22729: PUSH
22730: LD_INT 3
22732: ARRAY
22733: PPUSH
22734: LD_INT 8
22736: PPUSH
22737: CALL 22754 0 4
// end ;
22741: GO 22644
22743: POP
22744: POP
// end ;
22745: GO 22602
22747: POP
22748: POP
// end ; end ;
22749: LD_VAR 0 2
22753: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22754: LD_INT 0
22756: PPUSH
22757: PPUSH
22758: PPUSH
22759: PPUSH
22760: PPUSH
22761: PPUSH
22762: PPUSH
22763: PPUSH
22764: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22765: LD_VAR 0 1
22769: NOT
22770: PUSH
22771: LD_VAR 0 2
22775: PPUSH
22776: LD_VAR 0 3
22780: PPUSH
22781: CALL_OW 488
22785: NOT
22786: OR
22787: PUSH
22788: LD_VAR 0 4
22792: NOT
22793: OR
22794: IFFALSE 22798
// exit ;
22796: GO 23138
// list := [ ] ;
22798: LD_ADDR_VAR 0 13
22802: PUSH
22803: EMPTY
22804: ST_TO_ADDR
// if x - r < 0 then
22805: LD_VAR 0 2
22809: PUSH
22810: LD_VAR 0 4
22814: MINUS
22815: PUSH
22816: LD_INT 0
22818: LESS
22819: IFFALSE 22831
// min_x := 0 else
22821: LD_ADDR_VAR 0 7
22825: PUSH
22826: LD_INT 0
22828: ST_TO_ADDR
22829: GO 22847
// min_x := x - r ;
22831: LD_ADDR_VAR 0 7
22835: PUSH
22836: LD_VAR 0 2
22840: PUSH
22841: LD_VAR 0 4
22845: MINUS
22846: ST_TO_ADDR
// if y - r < 0 then
22847: LD_VAR 0 3
22851: PUSH
22852: LD_VAR 0 4
22856: MINUS
22857: PUSH
22858: LD_INT 0
22860: LESS
22861: IFFALSE 22873
// min_y := 0 else
22863: LD_ADDR_VAR 0 8
22867: PUSH
22868: LD_INT 0
22870: ST_TO_ADDR
22871: GO 22889
// min_y := y - r ;
22873: LD_ADDR_VAR 0 8
22877: PUSH
22878: LD_VAR 0 3
22882: PUSH
22883: LD_VAR 0 4
22887: MINUS
22888: ST_TO_ADDR
// max_x := x + r ;
22889: LD_ADDR_VAR 0 9
22893: PUSH
22894: LD_VAR 0 2
22898: PUSH
22899: LD_VAR 0 4
22903: PLUS
22904: ST_TO_ADDR
// max_y := y + r ;
22905: LD_ADDR_VAR 0 10
22909: PUSH
22910: LD_VAR 0 3
22914: PUSH
22915: LD_VAR 0 4
22919: PLUS
22920: ST_TO_ADDR
// for _x = min_x to max_x do
22921: LD_ADDR_VAR 0 11
22925: PUSH
22926: DOUBLE
22927: LD_VAR 0 7
22931: DEC
22932: ST_TO_ADDR
22933: LD_VAR 0 9
22937: PUSH
22938: FOR_TO
22939: IFFALSE 23056
// for _y = min_y to max_y do
22941: LD_ADDR_VAR 0 12
22945: PUSH
22946: DOUBLE
22947: LD_VAR 0 8
22951: DEC
22952: ST_TO_ADDR
22953: LD_VAR 0 10
22957: PUSH
22958: FOR_TO
22959: IFFALSE 23052
// begin if not ValidHex ( _x , _y ) then
22961: LD_VAR 0 11
22965: PPUSH
22966: LD_VAR 0 12
22970: PPUSH
22971: CALL_OW 488
22975: NOT
22976: IFFALSE 22980
// continue ;
22978: GO 22958
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22980: LD_VAR 0 11
22984: PPUSH
22985: LD_VAR 0 12
22989: PPUSH
22990: CALL_OW 351
22994: PUSH
22995: LD_VAR 0 11
22999: PPUSH
23000: LD_VAR 0 12
23004: PPUSH
23005: CALL_OW 554
23009: AND
23010: IFFALSE 23050
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23012: LD_ADDR_VAR 0 13
23016: PUSH
23017: LD_VAR 0 13
23021: PPUSH
23022: LD_VAR 0 13
23026: PUSH
23027: LD_INT 1
23029: PLUS
23030: PPUSH
23031: LD_VAR 0 11
23035: PUSH
23036: LD_VAR 0 12
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PPUSH
23045: CALL_OW 2
23049: ST_TO_ADDR
// end ;
23050: GO 22958
23052: POP
23053: POP
23054: GO 22938
23056: POP
23057: POP
// if not list then
23058: LD_VAR 0 13
23062: NOT
23063: IFFALSE 23067
// exit ;
23065: GO 23138
// for i in list do
23067: LD_ADDR_VAR 0 6
23071: PUSH
23072: LD_VAR 0 13
23076: PUSH
23077: FOR_IN
23078: IFFALSE 23136
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23080: LD_VAR 0 1
23084: PPUSH
23085: LD_STRING M
23087: PUSH
23088: LD_VAR 0 6
23092: PUSH
23093: LD_INT 1
23095: ARRAY
23096: PUSH
23097: LD_VAR 0 6
23101: PUSH
23102: LD_INT 2
23104: ARRAY
23105: PUSH
23106: LD_INT 0
23108: PUSH
23109: LD_INT 0
23111: PUSH
23112: LD_INT 0
23114: PUSH
23115: LD_INT 0
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: PUSH
23127: EMPTY
23128: LIST
23129: PPUSH
23130: CALL_OW 447
23134: GO 23077
23136: POP
23137: POP
// end ;
23138: LD_VAR 0 5
23142: RET
