// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4687 0 0
// PrepareRussianBase ;
  29: CALL 2976 0 0
// PrepareRussianCommander ;
  33: CALL 2927 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8306 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild = 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode = 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible = 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack = 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson = 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase = 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer = 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus = 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer = 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog = 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog = 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog = 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil = 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower = 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable = 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter = 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor = 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 39821 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 39821 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: LD_EXP 49
 585: PPUSH
 586: CALL 39821 0 3
 590: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 591: LD_ADDR_EXP 8
 595: PUSH
 596: LD_STRING Dickens
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: LD_EXP 49
 606: PPUSH
 607: CALL 39821 0 3
 611: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 612: LD_ADDR_EXP 9
 616: PUSH
 617: LD_STRING Woodruff
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_EXP 49
 627: PPUSH
 628: CALL 39821 0 3
 632: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 633: LD_ADDR_EXP 12
 637: PUSH
 638: LD_STRING Campell
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_EXP 49
 648: PPUSH
 649: CALL 39821 0 3
 653: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING Knight
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: LD_EXP 49
 669: PPUSH
 670: CALL 39821 0 3
 674: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 675: LD_ADDR_EXP 11
 679: PUSH
 680: LD_STRING Claptopn
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_EXP 49
 690: PPUSH
 691: CALL 39821 0 3
 695: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING Harisson
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: LD_EXP 49
 711: PPUSH
 712: CALL 39821 0 3
 716: ST_TO_ADDR
// if not Lisa then
 717: LD_EXP 4
 721: NOT
 722: IFFALSE 745
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 724: LD_ADDR_EXP 2
 728: PUSH
 729: LD_STRING Bobby
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_EXP 49
 739: PPUSH
 740: CALL 39821 0 3
 744: ST_TO_ADDR
// if not Lisa and not Bobby then
 745: LD_EXP 4
 749: NOT
 750: PUSH
 751: LD_EXP 2
 755: NOT
 756: AND
 757: IFFALSE 780
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 759: LD_ADDR_EXP 3
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_EXP 49
 774: PPUSH
 775: CALL 39821 0 3
 779: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 780: LD_EXP 4
 784: NOT
 785: PUSH
 786: LD_EXP 2
 790: NOT
 791: AND
 792: PUSH
 793: LD_EXP 3
 797: NOT
 798: AND
 799: IFFALSE 898
// begin tmp = CreateCharacterSet ( 03_others ) ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 31
 813: ST_TO_ADDR
// if tmp then
 814: LD_VAR 0 3
 818: IFFALSE 875
// begin RandomBeforeMission = tmp [ 1 ] ;
 820: LD_ADDR_EXP 6
 824: PUSH
 825: LD_VAR 0 3
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 834: LD_STRING 03_others
 836: PPUSH
 837: CALL_OW 40
// if tmp > 1 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: GREATER
 849: IFFALSE 873
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: DIFF
 865: PPUSH
 866: LD_STRING 03_others
 868: PPUSH
 869: CALL_OW 38
// end else
 873: GO 898
// begin PrepareHuman ( false , 1 , 3 ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: LD_INT 3
 883: PPUSH
 884: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 888: LD_ADDR_EXP 6
 892: PUSH
 893: CALL_OW 44
 897: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 4
 905: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 906: LD_ADDR_EXP 13
 910: PUSH
 911: LD_STRING Donaldson
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: LD_EXP 49
 921: PPUSH
 922: CALL 39821 0 3
 926: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Frank
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 39821 0 3
 947: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 32
 955: PPUSH
 956: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 960: LD_EXP 7
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 975: LD_EXP 7
 979: PPUSH
 980: LD_INT 32
 982: PPUSH
 983: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 987: LD_EXP 8
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1002: LD_EXP 9
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1017: LD_EXP 12
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1032: LD_EXP 10
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1047: LD_EXP 11
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 49
// if Lisa = false then
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1087: LD_EXP 2
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// if Lisa = false and Bobby = false then
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: PUSH
1111: LD_EXP 2
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1137: LD_EXP 4
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: PUSH
1146: LD_EXP 2
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: PUSH
1156: LD_EXP 3
1160: PUSH
1161: LD_INT 0
1163: EQUAL
1164: AND
1165: IFFALSE 1182
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1167: LD_EXP 6
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 49
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1187: LD_INT 0
1189: PPUSH
1190: PPUSH
1191: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1192: LD_EXP 13
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// if Frank then
1207: LD_EXP 5
1211: IFFALSE 1228
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1213: LD_EXP 5
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// uc_nation = 1 ;
1228: LD_ADDR_OWVAR 21
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// uc_side = 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// hc_class := 3 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING SecondCharsGal
1267: ST_TO_ADDR
// hc_face_number := 53 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 53
1275: ST_TO_ADDR
// hc_name := Freddie Warner ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Freddie Warner
1283: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 8
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 2
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 56 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 56
1401: ST_TO_ADDR
// hc_name := Mel Brennan ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Mel Brennan
1409: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 12
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// hc_class := 1 ;
1496: LD_ADDR_OWVAR 28
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_sex := sex_male ;
1504: LD_ADDR_OWVAR 27
1508: PUSH
1509: LD_INT 1
1511: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING AmGalRemake
1519: ST_TO_ADDR
// hc_face_number := 5 ;
1520: LD_ADDR_OWVAR 34
1524: PUSH
1525: LD_INT 5
1527: ST_TO_ADDR
// hc_name := Bob Joplin ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Bob Joplin
1535: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1536: LD_ADDR_OWVAR 29
1540: PUSH
1541: LD_INT 10
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1551: LD_ADDR_OWVAR 30
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1574: LD_ADDR_OWVAR 31
1578: PUSH
1579: LD_INT 3
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// un = CreateHuman ;
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: CALL_OW 44
1606: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1607: LD_VAR 0 3
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// hc_class := 3 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// hc_sex := sex_female ;
1630: LD_ADDR_OWVAR 27
1634: PUSH
1635: LD_INT 2
1637: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING AmGalRemake
1645: ST_TO_ADDR
// hc_face_number := 8 ;
1646: LD_ADDR_OWVAR 34
1650: PUSH
1651: LD_INT 8
1653: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1654: LD_ADDR_OWVAR 26
1658: PUSH
1659: LD_STRING Elizabeth Whitney
1661: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1662: LD_ADDR_OWVAR 29
1666: PUSH
1667: LD_INT 9
1669: PUSH
1670: LD_INT 11
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1677: LD_ADDR_OWVAR 30
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1700: LD_ADDR_OWVAR 31
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: LD_INT 4
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// un = CreateHuman ;
1723: LD_ADDR_VAR 0 3
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// InitHc ;
1748: CALL_OW 19
// end ;
1752: LD_VAR 0 1
1756: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
1761: PPUSH
1762: PPUSH
// uc_nation = 1 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// uc_side = 1 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 2
1786: ST_TO_ADDR
// vc_engine := engine_combustion ;
1787: LD_ADDR_OWVAR 39
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_control := control_manual ;
1795: LD_ADDR_OWVAR 38
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1803: LD_ADDR_OWVAR 41
1807: PUSH
1808: LD_INT 65
1810: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_OWVAR 67
1838: ARRAY
1839: ST_TO_ADDR
// veh := CreateVehicle ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 2
1857: PPUSH
1858: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: CALL_OW 428
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: IFFALSE 1898
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1878: LD_VAR 0 5
1882: PPUSH
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 48
1896: GO 1916
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1898: LD_VAR 0 5
1902: PPUSH
1903: LD_INT 23
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 48
// hc_class := 1 ;
1916: LD_ADDR_OWVAR 28
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_sex := sex_male ;
1924: LD_ADDR_OWVAR 27
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1932: LD_ADDR_OWVAR 33
1936: PUSH
1937: LD_STRING SecondCharsGal
1939: ST_TO_ADDR
// hc_face_number := 59 ;
1940: LD_ADDR_OWVAR 34
1944: PUSH
1945: LD_INT 59
1947: ST_TO_ADDR
// hc_name := Max Gray ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING Max Gray
1955: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 9
1963: PUSH
1964: LD_INT 11
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1971: LD_ADDR_OWVAR 30
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1994: LD_ADDR_OWVAR 31
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 0
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: ST_TO_ADDR
// un = CreateHuman ;
2017: LD_ADDR_VAR 0 4
2021: PUSH
2022: CALL_OW 44
2026: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_INT 11
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// hc_class := 2 ;
2042: LD_ADDR_OWVAR 28
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_sex := sex_male ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2058: LD_ADDR_OWVAR 33
2062: PUSH
2063: LD_STRING SecondCharsGal
2065: ST_TO_ADDR
// hc_face_number := 50 ;
2066: LD_ADDR_OWVAR 34
2070: PUSH
2071: LD_INT 50
2073: ST_TO_ADDR
// hc_name := Frank Hughes ;
2074: LD_ADDR_OWVAR 26
2078: PUSH
2079: LD_STRING Frank Hughes
2081: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2082: LD_ADDR_OWVAR 29
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: LD_INT 10
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2097: LD_ADDR_OWVAR 30
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 11
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// hc_class := 1 ;
2168: LD_ADDR_OWVAR 28
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_sex := sex_male ;
2176: LD_ADDR_OWVAR 27
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2184: LD_ADDR_OWVAR 33
2188: PUSH
2189: LD_STRING SecondCharsGal
2191: ST_TO_ADDR
// hc_face_number := 54 ;
2192: LD_ADDR_OWVAR 34
2196: PUSH
2197: LD_INT 54
2199: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_STRING Luigi Ghbellin
2207: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2208: LD_ADDR_OWVAR 29
2212: PUSH
2213: LD_INT 11
2215: PUSH
2216: LD_INT 11
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2223: LD_ADDR_OWVAR 30
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2246: LD_ADDR_OWVAR 31
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// un = CreateHuman ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: CALL_OW 44
2278: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2279: LD_VAR 0 4
2283: PPUSH
2284: LD_INT 11
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL_OW 49
// hc_class := 3 ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 3
2301: ST_TO_ADDR
// hc_sex := sex_male ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2310: LD_ADDR_OWVAR 33
2314: PUSH
2315: LD_STRING AmGalRemake
2317: ST_TO_ADDR
// hc_face_number := 6 ;
2318: LD_ADDR_OWVAR 34
2322: PUSH
2323: LD_INT 6
2325: ST_TO_ADDR
// hc_name := Leon Carter ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Leon Carter
2333: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2334: LD_ADDR_OWVAR 29
2338: PUSH
2339: LD_INT 10
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2349: LD_ADDR_OWVAR 30
2353: PUSH
2354: LD_INT 0
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2372: LD_ADDR_OWVAR 31
2376: PUSH
2377: LD_INT 0
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: ST_TO_ADDR
// un = CreateHuman ;
2395: LD_ADDR_VAR 0 4
2399: PUSH
2400: CALL_OW 44
2404: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2405: LD_VAR 0 4
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 52
// if count = 4 then
2419: LD_VAR 0 1
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2555
// begin hc_class := 1 ;
2429: LD_ADDR_OWVAR 28
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_sex := sex_male ;
2437: LD_ADDR_OWVAR 27
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING SecondCharsGal
2452: ST_TO_ADDR
// hc_face_number := 34 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 34
2460: ST_TO_ADDR
// hc_name := Ian Hill ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING Ian Hill
2468: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2469: LD_ADDR_OWVAR 29
2473: PUSH
2474: LD_INT 10
2476: PUSH
2477: LD_INT 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2484: LD_ADDR_OWVAR 30
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: LD_INT 0
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2507: LD_ADDR_OWVAR 31
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: ST_TO_ADDR
// un = CreateHuman ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: CALL_OW 44
2539: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2540: LD_VAR 0 4
2544: PPUSH
2545: LD_INT 11
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 49
// end ; if count = 5 then
2555: LD_VAR 0 1
2559: PUSH
2560: LD_INT 5
2562: EQUAL
2563: IFFALSE 2817
// begin hc_class := 1 ;
2565: LD_ADDR_OWVAR 28
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_sex := sex_male ;
2573: LD_ADDR_OWVAR 27
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2581: LD_ADDR_OWVAR 33
2585: PUSH
2586: LD_STRING SecondCharsGal
2588: ST_TO_ADDR
// hc_face_number := 34 ;
2589: LD_ADDR_OWVAR 34
2593: PUSH
2594: LD_INT 34
2596: ST_TO_ADDR
// hc_name := Ian Hill ;
2597: LD_ADDR_OWVAR 26
2601: PUSH
2602: LD_STRING Ian Hill
2604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2605: LD_ADDR_OWVAR 29
2609: PUSH
2610: LD_INT 10
2612: PUSH
2613: LD_INT 12
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2620: LD_ADDR_OWVAR 30
2624: PUSH
2625: LD_INT 1
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 0
2633: PUSH
2634: LD_INT 0
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2643: LD_ADDR_OWVAR 31
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: ST_TO_ADDR
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// hc_class := 1 ;
2691: LD_ADDR_OWVAR 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// hc_sex := sex_female ;
2699: LD_ADDR_OWVAR 27
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2707: LD_ADDR_OWVAR 33
2711: PUSH
2712: LD_STRING SecondCharsGal
2714: ST_TO_ADDR
// hc_face_number := 41 ;
2715: LD_ADDR_OWVAR 34
2719: PUSH
2720: LD_INT 41
2722: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2723: LD_ADDR_OWVAR 26
2727: PUSH
2728: LD_STRING Kate Wadsworth
2730: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2731: LD_ADDR_OWVAR 29
2735: PUSH
2736: LD_INT 9
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2746: LD_ADDR_OWVAR 30
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2769: LD_ADDR_OWVAR 31
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// un = CreateHuman ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 11
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2817: LD_INT 11
2819: PPUSH
2820: LD_INT 22
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 21
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 26
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 70
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2868: LD_INT 11
2870: PPUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 26
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 70
2910: PUSH
2911: LD_INT 1
2913: ARRAY
2914: PPUSH
2915: LD_STRING D6-Sol3-1
2917: PPUSH
2918: CALL_OW 88
// end ; end_of_file
2922: LD_VAR 0 2
2926: RET
// export function PrepareRussianCommander ; begin
2927: LD_INT 0
2929: PPUSH
// uc_side = 3 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// uc_nation = 3 ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Stolypin
2953: PPUSH
2954: CALL_OW 25
2958: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2959: LD_EXP 15
2963: PPUSH
2964: LD_INT 21
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: LD_VAR 0 1
2975: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// if Difficulty > 1 then
2982: LD_OWVAR 67
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3100
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := 3 ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// InitHc_All ( ) ;
3008: CALL_OW 584
// InitBc ;
3012: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3016: LD_INT 0
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL_OW 380
// bc_type := b_breastwork ;
3029: LD_ADDR_OWVAR 42
3033: PUSH
3034: LD_INT 31
3036: ST_TO_ADDR
// bc_level := 4 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 4
3044: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3045: LD_ADDR_VAR 0 3
3049: PUSH
3050: LD_INT 100
3052: PPUSH
3053: LD_INT 58
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 5
3081: PPUSH
3082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3086: LD_VAR 0 4
3090: PPUSH
3091: LD_VAR 0 3
3095: PPUSH
3096: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3100: LD_INT 3
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 22
3108: PPUSH
3109: LD_EXP 16
3113: PPUSH
3114: LD_EXP 17
3118: PPUSH
3119: CALL_OW 12
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 4
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 6
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_OWVAR 67
3149: ARRAY
3150: PPUSH
3151: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 21
3163: PPUSH
3164: LD_EXP 16
3168: PPUSH
3169: LD_EXP 17
3173: PPUSH
3174: CALL_OW 12
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: LD_EXP 16
3202: PPUSH
3203: LD_EXP 17
3207: PPUSH
3208: CALL_OW 12
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 24
3231: PPUSH
3232: LD_EXP 16
3236: PPUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 5
3252: PPUSH
3253: CALL 4353 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3332
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3294: LD_INT 3
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: LD_EXP 17
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL 4353 0 6
3330: GO 3291
3332: POP
3333: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 30
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: FOR_IN
3369: IFFALSE 3397
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL 4462 0 2
3395: GO 3368
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 1
3403: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 6 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 6
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// InitHC_All ( ) ;
3426: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: DOUBLE
3436: LD_INT 1
3438: DEC
3439: ST_TO_ADDR
3440: LD_INT 1
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: LD_INT 2
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_OWVAR 67
3462: ARRAY
3463: PUSH
3464: FOR_TO
3465: IFFALSE 3633
// begin vc_engine = 1 ;
3467: LD_ADDR_OWVAR 39
3471: PUSH
3472: LD_INT 1
3474: ST_TO_ADDR
// vc_control = 1 ;
3475: LD_ADDR_OWVAR 38
3479: PUSH
3480: LD_INT 1
3482: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3483: LD_ADDR_OWVAR 40
3487: PUSH
3488: LD_INT 42
3490: PUSH
3491: LD_INT 42
3493: PUSH
3494: LD_INT 43
3496: PUSH
3497: LD_INT 43
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: LD_OWVAR 67
3510: ARRAY
3511: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3512: LD_ADDR_OWVAR 37
3516: PUSH
3517: LD_INT 21
3519: PUSH
3520: LD_INT 22
3522: PUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 22
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_OWVAR 67
3539: ARRAY
3540: ST_TO_ADDR
// veh = CreateVehicle ;
3541: LD_ADDR_VAR 0 3
3545: PUSH
3546: CALL_OW 45
3550: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_INT 3
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// hc_gallery =  ;
3566: LD_ADDR_OWVAR 33
3570: PUSH
3571: LD_STRING 
3573: ST_TO_ADDR
// hc_name =  ;
3574: LD_ADDR_OWVAR 26
3578: PUSH
3579: LD_STRING 
3581: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3582: LD_INT 0
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: LD_EXP 16
3592: PPUSH
3593: LD_EXP 17
3597: PPUSH
3598: CALL_OW 12
3602: PPUSH
3603: CALL_OW 380
// un = CreateHuman ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: CALL_OW 44
3616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3617: LD_VAR 0 4
3621: PPUSH
3622: LD_VAR 0 3
3626: PPUSH
3627: CALL_OW 52
// end ;
3631: GO 3464
3633: POP
3634: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3635: LD_INT 0
3637: PPUSH
3638: LD_INT 2
3640: PPUSH
3641: LD_EXP 16
3645: PPUSH
3646: LD_EXP 17
3650: PPUSH
3651: CALL_OW 12
3655: PUSH
3656: LD_INT 2
3658: PLUS
3659: PPUSH
3660: CALL_OW 380
// un = CreateHuman ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3689: LD_INT 0
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_EXP 16
3699: PPUSH
3700: LD_EXP 17
3704: PPUSH
3705: CALL_OW 12
3709: PUSH
3710: LD_INT 2
3712: PLUS
3713: PPUSH
3714: CALL_OW 380
// un = CreateHuman ;
3718: LD_ADDR_VAR 0 4
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3728: LD_VAR 0 4
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 2
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_OWVAR 67
3775: ARRAY
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 3
3782: PPUSH
3783: CALL_OW 12
3787: PLUS
3788: PUSH
3789: FOR_TO
3790: IFFALSE 3860
// begin hc_gallery =  ;
3792: LD_ADDR_OWVAR 33
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// hc_name =  ;
3800: LD_ADDR_OWVAR 26
3804: PUSH
3805: LD_STRING 
3807: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_EXP 16
3818: PPUSH
3819: LD_EXP 17
3823: PPUSH
3824: CALL_OW 12
3828: PPUSH
3829: CALL_OW 380
// un = CreateHuman ;
3833: LD_ADDR_VAR 0 4
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3843: LD_VAR 0 4
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 49
// end ;
3858: GO 3789
3860: POP
3861: POP
// vc_engine = 1 ;
3862: LD_ADDR_OWVAR 39
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// vc_control = 1 ;
3870: LD_ADDR_OWVAR 38
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// vc_weapon = 51 ;
3878: LD_ADDR_OWVAR 40
3882: PUSH
3883: LD_INT 51
3885: ST_TO_ADDR
// vc_chassis = 22 ;
3886: LD_ADDR_OWVAR 37
3890: PUSH
3891: LD_INT 22
3893: ST_TO_ADDR
// veh = CreateVehicle ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 100
3929: PPUSH
3930: CALL_OW 290
// hc_gallery =  ;
3934: LD_ADDR_OWVAR 33
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// hc_name =  ;
3942: LD_ADDR_OWVAR 26
3946: PUSH
3947: LD_STRING 
3949: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: LD_EXP 16
3960: PPUSH
3961: LD_EXP 17
3965: PPUSH
3966: CALL_OW 12
3970: PPUSH
3971: CALL_OW 380
// un = CreateHuman ;
3975: LD_ADDR_VAR 0 4
3979: PUSH
3980: CALL_OW 44
3984: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3985: LD_VAR 0 4
3989: PPUSH
3990: LD_VAR 0 3
3994: PPUSH
3995: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3999: LD_ADDR_VAR 0 2
4003: PUSH
4004: LD_INT 22
4006: PUSH
4007: LD_INT 6
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: LD_INT 25
4022: PUSH
4023: LD_INT 2
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 69
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4085
// ComAgressiveMove ( i , 45 , 46 ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_INT 45
4075: PPUSH
4076: LD_INT 46
4078: PPUSH
4079: CALL_OW 114
4083: GO 4065
4085: POP
4086: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_INT 22
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 25
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 69
4120: PUSH
4121: FOR_IN
4122: IFFALSE 4153
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4124: LD_ADDR_EXP 21
4128: PUSH
4129: LD_VAR 0 2
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: LD_INT 48
4139: PPUSH
4140: LD_INT 55
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: CALL_OW 145
4150: ST_TO_ADDR
4151: GO 4121
4153: POP
4154: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4155: LD_ADDR_VAR 0 2
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 6
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 69
4188: PUSH
4189: FOR_IN
4190: IFFALSE 4209
// ComMoveXY ( i , 39 , 55 ) ;
4192: LD_VAR 0 2
4196: PPUSH
4197: LD_INT 39
4199: PPUSH
4200: LD_INT 55
4202: PPUSH
4203: CALL_OW 111
4207: GO 4189
4209: POP
4210: POP
// end ;
4211: LD_VAR 0 1
4215: RET
// export function PrepareFirstAttack ; var i , un ; begin
4216: LD_INT 0
4218: PPUSH
4219: PPUSH
4220: PPUSH
// uc_side = 5 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 5
4228: ST_TO_ADDR
// uc_nation = 3 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 3
4236: ST_TO_ADDR
// for i := 1 to 4 do
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: DOUBLE
4243: LD_INT 1
4245: DEC
4246: ST_TO_ADDR
4247: LD_INT 4
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4338
// begin InitHC_All ( ) ;
4253: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4257: LD_INT 0
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_EXP 16
4267: PPUSH
4268: LD_EXP 17
4272: PPUSH
4273: CALL_OW 12
4277: PPUSH
4278: CALL_OW 380
// un = CreateHuman ;
4282: LD_ADDR_VAR 0 3
4286: PUSH
4287: CALL_OW 44
4291: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4292: LD_VAR 0 3
4296: PPUSH
4297: LD_INT 4
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_EXP 1
4316: PPUSH
4317: CALL_OW 250
4321: PPUSH
4322: LD_EXP 1
4326: PPUSH
4327: CALL_OW 251
4331: PPUSH
4332: CALL_OW 114
// end ;
4336: GO 4250
4338: POP
4339: POP
// firstRussianAttack = 1 ;
4340: LD_ADDR_EXP 23
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// end ; end_of_file
4348: LD_VAR 0 1
4352: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4353: LD_INT 0
4355: PPUSH
4356: PPUSH
4357: PPUSH
// for i = 1 to count do
4358: LD_ADDR_VAR 0 8
4362: PUSH
4363: DOUBLE
4364: LD_INT 1
4366: DEC
4367: ST_TO_ADDR
4368: LD_VAR 0 6
4372: PUSH
4373: FOR_TO
4374: IFFALSE 4455
// begin uc_side = side ;
4376: LD_ADDR_OWVAR 20
4380: PUSH
4381: LD_VAR 0 1
4385: ST_TO_ADDR
// uc_nation = nation ;
4386: LD_ADDR_OWVAR 21
4390: PUSH
4391: LD_VAR 0 2
4395: ST_TO_ADDR
// hc_gallery =  ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING 
4403: ST_TO_ADDR
// hc_name =  ;
4404: LD_ADDR_OWVAR 26
4408: PUSH
4409: LD_STRING 
4411: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4412: LD_INT 0
4414: PPUSH
4415: LD_VAR 0 5
4419: PPUSH
4420: LD_VAR 0 4
4424: PPUSH
4425: CALL_OW 380
// un = CreateHuman ;
4429: LD_ADDR_VAR 0 9
4433: PUSH
4434: CALL_OW 44
4438: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4439: LD_VAR 0 9
4443: PPUSH
4444: LD_VAR 0 3
4448: PPUSH
4449: CALL_OW 52
// end ;
4453: GO 4373
4455: POP
4456: POP
// end ;
4457: LD_VAR 0 7
4461: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4462: LD_INT 0
4464: PPUSH
4465: PPUSH
4466: PPUSH
// uc_side := GetSide ( b ) ;
4467: LD_ADDR_OWVAR 20
4471: PUSH
4472: LD_VAR 0 2
4476: PPUSH
4477: CALL_OW 255
4481: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4482: LD_ADDR_OWVAR 21
4486: PUSH
4487: LD_VAR 0 2
4491: PPUSH
4492: CALL_OW 248
4496: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4497: LD_INT 0
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 380
// un = CreateHuman ;
4512: LD_ADDR_VAR 0 4
4516: PUSH
4517: CALL_OW 44
4521: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4522: LD_ADDR_VAR 0 5
4526: PUSH
4527: LD_VAR 0 2
4531: PPUSH
4532: CALL_OW 254
4536: PUSH
4537: LD_INT 3
4539: MINUS
4540: ST_TO_ADDR
// if dir < 0 then
4541: LD_VAR 0 5
4545: PUSH
4546: LD_INT 0
4548: LESS
4549: IFFALSE 4565
// dir := 6 + dir ;
4551: LD_ADDR_VAR 0 5
4555: PUSH
4556: LD_INT 6
4558: PUSH
4559: LD_VAR 0 5
4563: PLUS
4564: ST_TO_ADDR
// SetDir ( un , dir ) ;
4565: LD_VAR 0 4
4569: PPUSH
4570: LD_VAR 0 5
4574: PPUSH
4575: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: LD_VAR 0 2
4588: PPUSH
4589: CALL_OW 52
// end ;
4593: LD_VAR 0 3
4597: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4598: LD_INT 0
4600: PPUSH
4601: PPUSH
4602: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4603: LD_ADDR_VAR 0 6
4607: PUSH
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: PPUSH
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 12
4625: ARRAY
4626: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4627: LD_VAR 0 6
4631: PPUSH
4632: CALL_OW 258
4636: PUSH
4637: LD_INT 1
4639: EQUAL
4640: IFFALSE 4658
// Say ( speaker , dialogMID ) else
4642: LD_VAR 0 6
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: CALL_OW 88
4656: GO 4672
// Say ( speaker , dialogFID ) ;
4658: LD_VAR 0 6
4662: PPUSH
4663: LD_VAR 0 3
4667: PPUSH
4668: CALL_OW 88
// result := speaker ;
4672: LD_ADDR_VAR 0 4
4676: PUSH
4677: LD_VAR 0 6
4681: ST_TO_ADDR
// end ;
4682: LD_VAR 0 4
4686: RET
// export function PrepareDifficulty ; var tmp ; begin
4687: LD_INT 0
4689: PPUSH
4690: PPUSH
// if Difficulty = 1 then
4691: LD_OWVAR 67
4695: PUSH
4696: LD_INT 1
4698: EQUAL
4699: IFFALSE 4717
// begin RuSoldMinLevel = 1 ;
4701: LD_ADDR_EXP 16
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4709: LD_ADDR_EXP 17
4713: PUSH
4714: LD_INT 2
4716: ST_TO_ADDR
// end ; if Difficulty = 2 then
4717: LD_OWVAR 67
4721: PUSH
4722: LD_INT 2
4724: EQUAL
4725: IFFALSE 4826
// begin RuSoldMinLevel = 2 ;
4727: LD_ADDR_EXP 16
4731: PUSH
4732: LD_INT 2
4734: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4735: LD_ADDR_EXP 17
4739: PUSH
4740: LD_INT 3
4742: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4743: LD_INT 23
4745: PPUSH
4746: CALL_OW 64
// uc_nation = 3 ;
4750: LD_ADDR_OWVAR 21
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// uc_side = 3 ;
4758: LD_ADDR_OWVAR 20
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// bc_level = 5 ;
4766: LD_ADDR_OWVAR 43
4770: PUSH
4771: LD_INT 5
4773: ST_TO_ADDR
// bc_type = 32 ;
4774: LD_ADDR_OWVAR 42
4778: PUSH
4779: LD_INT 32
4781: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: LD_INT 76
4789: PPUSH
4790: LD_INT 91
4792: PPUSH
4793: LD_INT 2
4795: PPUSH
4796: CALL_OW 47
4800: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4801: LD_VAR 0 2
4805: PPUSH
4806: LD_INT 43
4808: PPUSH
4809: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4813: LD_INT 51
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 322
// end ; if Difficulty >= 3 then
4826: LD_OWVAR 67
4830: PUSH
4831: LD_INT 3
4833: GREATEREQUAL
4834: IFFALSE 4998
// begin RuSoldMinLevel = Difficulty ;
4836: LD_ADDR_EXP 16
4840: PUSH
4841: LD_OWVAR 67
4845: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4846: LD_ADDR_EXP 17
4850: PUSH
4851: LD_INT 4
4853: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4854: LD_INT 26
4856: PPUSH
4857: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4861: LD_INT 23
4863: PPUSH
4864: CALL_OW 64
// uc_nation = 3 ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// uc_side = 3 ;
4876: LD_ADDR_OWVAR 20
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// bc_level = 5 ;
4884: LD_ADDR_OWVAR 43
4888: PUSH
4889: LD_INT 5
4891: ST_TO_ADDR
// bc_type = 32 ;
4892: LD_ADDR_OWVAR 42
4896: PUSH
4897: LD_INT 32
4899: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4900: LD_ADDR_VAR 0 2
4904: PUSH
4905: LD_INT 76
4907: PPUSH
4908: LD_INT 91
4910: PPUSH
4911: LD_INT 2
4913: PPUSH
4914: CALL_OW 47
4918: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_INT 44
4926: PPUSH
4927: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4931: LD_ADDR_VAR 0 2
4935: PUSH
4936: LD_INT 83
4938: PPUSH
4939: LD_INT 84
4941: PPUSH
4942: LD_INT 2
4944: PPUSH
4945: CALL_OW 47
4949: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4950: LD_VAR 0 2
4954: PPUSH
4955: LD_INT 43
4957: PPUSH
4958: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4962: LD_INT 51
4964: PPUSH
4965: LD_INT 3
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4975: LD_INT 52
4977: PPUSH
4978: LD_INT 3
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4988: LD_INT 25
4990: PPUSH
4991: LD_INT 44
4993: PPUSH
4994: CALL_OW 431
// end ; end ;
4998: LD_VAR 0 1
5002: RET
// export function EnergyDialog ; begin
5003: LD_INT 0
5005: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5006: LD_INT 46
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: CALL_OW 321
5016: PUSH
5017: LD_INT 1
5019: EQUAL
5020: PUSH
5021: LD_INT 35
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 321
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: AND
5036: IFFALSE 5060
// begin Say ( JMM , D9c-JMM-1 ) ;
5038: LD_EXP 1
5042: PPUSH
5043: LD_STRING D9c-JMM-1
5045: PPUSH
5046: CALL_OW 88
// energyVDialog = 1 ;
5050: LD_ADDR_EXP 33
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// end else
5058: GO 5214
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5060: LD_INT 35
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 321
5070: PUSH
5071: LD_INT 2
5073: EQUAL
5074: PUSH
5075: LD_EXP 33
5079: PUSH
5080: LD_INT 0
5082: EQUAL
5083: AND
5084: IFFALSE 5106
// begin Say ( JMM , D9c-JMM-1a ) ;
5086: LD_EXP 1
5090: PPUSH
5091: LD_STRING D9c-JMM-1a
5093: PPUSH
5094: CALL_OW 88
// energyVDialog = 1 ;
5098: LD_ADDR_EXP 33
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5106: LD_INT 46
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: CALL_OW 321
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: PUSH
5121: LD_EXP 33
5125: PUSH
5126: LD_INT 0
5128: EQUAL
5129: AND
5130: IFFALSE 5152
// begin Say ( JMM , D9c-JMM-1b ) ;
5132: LD_EXP 1
5136: PPUSH
5137: LD_STRING D9c-JMM-1b
5139: PPUSH
5140: CALL_OW 88
// energyVDialog = 1 ;
5144: LD_ADDR_EXP 33
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5152: LD_INT 46
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 321
5162: PUSH
5163: LD_INT 2
5165: EQUAL
5166: PUSH
5167: LD_INT 21
5169: PPUSH
5170: LD_INT 1
5172: PPUSH
5173: CALL_OW 321
5177: PUSH
5178: LD_INT 2
5180: EQUAL
5181: AND
5182: PUSH
5183: LD_EXP 33
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: AND
5192: IFFALSE 5214
// begin Say ( JMM , D9c-JMM-1c ) ;
5194: LD_EXP 1
5198: PPUSH
5199: LD_STRING D9c-JMM-1c
5201: PPUSH
5202: CALL_OW 88
// energyVDialog = 1 ;
5206: LD_ADDR_EXP 33
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ; end ; end ;
5214: LD_VAR 0 1
5218: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5226: LD_VAR 0 1
5230: NOT
5231: PUSH
5232: LD_VAR 0 1
5236: PPUSH
5237: CALL_OW 256
5241: PUSH
5242: LD_INT 250
5244: LESS
5245: OR
5246: PUSH
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 314
5256: PUSH
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 261
5266: PUSH
5267: LD_INT 20
5269: GREATER
5270: AND
5271: OR
5272: IFFALSE 5276
// exit ;
5274: GO 5641
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5276: LD_VAR 0 1
5280: PPUSH
5281: CALL_OW 261
5285: PUSH
5286: LD_INT 20
5288: LESS
5289: PUSH
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 110
5299: PUSH
5300: LD_INT 21
5302: EQUAL
5303: NOT
5304: AND
5305: IFFALSE 5332
// begin ComStop ( bulldozer ) ;
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_INT 21
5323: PPUSH
5324: CALL_OW 109
// exit ;
5328: GO 5641
// end else
5330: GO 5359
// if GetFuel ( bulldozer ) > 20 then
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 261
5341: PUSH
5342: LD_INT 20
5344: GREATER
5345: IFFALSE 5359
// SetTag ( bulldozer , 0 ) ;
5347: LD_VAR 0 1
5351: PPUSH
5352: LD_INT 0
5354: PPUSH
5355: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5359: LD_ADDR_VAR 0 5
5363: PUSH
5364: LD_VAR 0 2
5368: PPUSH
5369: CALL_OW 353
5373: ST_TO_ADDR
// tmp := [ ] ;
5374: LD_ADDR_VAR 0 6
5378: PUSH
5379: EMPTY
5380: ST_TO_ADDR
// for i = 1 to list do
5381: LD_ADDR_VAR 0 4
5385: PUSH
5386: DOUBLE
5387: LD_INT 1
5389: DEC
5390: ST_TO_ADDR
5391: LD_VAR 0 5
5395: PUSH
5396: FOR_TO
5397: IFFALSE 5495
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5399: LD_VAR 0 5
5403: PUSH
5404: LD_VAR 0 4
5408: ARRAY
5409: PUSH
5410: LD_INT 1
5412: ARRAY
5413: PPUSH
5414: LD_VAR 0 5
5418: PUSH
5419: LD_VAR 0 4
5423: ARRAY
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: PPUSH
5429: CALL_OW 554
5433: IFFALSE 5493
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5435: LD_ADDR_VAR 0 6
5439: PUSH
5440: LD_VAR 0 6
5444: PPUSH
5445: LD_VAR 0 6
5449: PUSH
5450: LD_INT 1
5452: PLUS
5453: PPUSH
5454: LD_VAR 0 5
5458: PUSH
5459: LD_VAR 0 4
5463: ARRAY
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PUSH
5469: LD_VAR 0 5
5473: PUSH
5474: LD_VAR 0 4
5478: ARRAY
5479: PUSH
5480: LD_INT 2
5482: ARRAY
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PPUSH
5488: CALL_OW 1
5492: ST_TO_ADDR
// end ;
5493: GO 5396
5495: POP
5496: POP
// ComStop ( bulldozer ) ;
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5506: LD_ADDR_VAR 0 7
5510: PUSH
5511: LD_VAR 0 1
5515: PPUSH
5516: CALL_OW 250
5520: PUSH
5521: LD_VAR 0 1
5525: PPUSH
5526: CALL_OW 251
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: ST_TO_ADDR
// for i = tmp downto 1 do
5535: LD_ADDR_VAR 0 4
5539: PUSH
5540: DOUBLE
5541: LD_VAR 0 6
5545: INC
5546: ST_TO_ADDR
5547: LD_INT 1
5549: PUSH
5550: FOR_DOWNTO
5551: IFFALSE 5639
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5553: LD_ADDR_VAR 0 7
5557: PUSH
5558: LD_VAR 0 7
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: PPUSH
5567: LD_VAR 0 7
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: LD_VAR 0 6
5580: PPUSH
5581: CALL 5742 0 3
5585: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5586: LD_VAR 0 1
5590: PPUSH
5591: LD_VAR 0 7
5595: PUSH
5596: LD_INT 1
5598: ARRAY
5599: PPUSH
5600: LD_VAR 0 7
5604: PUSH
5605: LD_INT 2
5607: ARRAY
5608: PPUSH
5609: CALL 5646 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: LD_VAR 0 6
5622: PPUSH
5623: LD_VAR 0 7
5627: PUSH
5628: LD_INT 3
5630: ARRAY
5631: PPUSH
5632: CALL_OW 3
5636: ST_TO_ADDR
// end ;
5637: GO 5550
5639: POP
5640: POP
// end ;
5641: LD_VAR 0 3
5645: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5646: LD_INT 0
5648: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5649: LD_VAR 0 2
5653: PPUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: CALL_OW 351
5663: PUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: CALL_OW 554
5678: AND
5679: PUSH
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: CALL_OW 488
5694: AND
5695: PUSH
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 428
5710: PUSH
5711: LD_INT 1
5713: NEG
5714: EQUAL
5715: AND
5716: IFFALSE 5737
// AddComMoveXY ( bulldozer , x , y ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_VAR 0 3
5732: PPUSH
5733: CALL_OW 171
// end ;
5737: LD_VAR 0 4
5741: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
5749: PPUSH
5750: PPUSH
// dist := 99999 ;
5751: LD_ADDR_VAR 0 6
5755: PUSH
5756: LD_INT 99999
5758: ST_TO_ADDR
// for i = 1 to list do
5759: LD_ADDR_VAR 0 5
5763: PUSH
5764: DOUBLE
5765: LD_INT 1
5767: DEC
5768: ST_TO_ADDR
5769: LD_VAR 0 3
5773: PUSH
5774: FOR_TO
5775: IFFALSE 5913
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5777: LD_ADDR_VAR 0 7
5781: PUSH
5782: LD_VAR 0 1
5786: PPUSH
5787: LD_VAR 0 2
5791: PPUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_VAR 0 5
5801: ARRAY
5802: PUSH
5803: LD_INT 1
5805: ARRAY
5806: PPUSH
5807: LD_VAR 0 3
5811: PUSH
5812: LD_VAR 0 5
5816: ARRAY
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PPUSH
5822: CALL_OW 298
5826: ST_TO_ADDR
// if d = 0 then
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 0
5834: EQUAL
5835: IFFALSE 5839
// continue ;
5837: GO 5774
// if d < dist then
5839: LD_VAR 0 7
5843: PUSH
5844: LD_VAR 0 6
5848: LESS
5849: IFFALSE 5911
// begin _x := list [ i ] [ 1 ] ;
5851: LD_ADDR_VAR 0 8
5855: PUSH
5856: LD_VAR 0 3
5860: PUSH
5861: LD_VAR 0 5
5865: ARRAY
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5871: LD_ADDR_VAR 0 9
5875: PUSH
5876: LD_VAR 0 3
5880: PUSH
5881: LD_VAR 0 5
5885: ARRAY
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: ST_TO_ADDR
// _i := i ;
5891: LD_ADDR_VAR 0 10
5895: PUSH
5896: LD_VAR 0 5
5900: ST_TO_ADDR
// dist := d ;
5901: LD_ADDR_VAR 0 6
5905: PUSH
5906: LD_VAR 0 7
5910: ST_TO_ADDR
// end ; end ;
5911: GO 5774
5913: POP
5914: POP
// result := [ _x , _y , _i , dist ] ;
5915: LD_ADDR_VAR 0 4
5919: PUSH
5920: LD_VAR 0 8
5924: PUSH
5925: LD_VAR 0 9
5929: PUSH
5930: LD_VAR 0 10
5934: PUSH
5935: LD_VAR 0 6
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: ST_TO_ADDR
// end ;
5946: LD_VAR 0 4
5950: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// for i = 1 to 72 do
5955: LD_ADDR_VAR 0 5
5959: PUSH
5960: DOUBLE
5961: LD_INT 1
5963: DEC
5964: ST_TO_ADDR
5965: LD_INT 72
5967: PUSH
5968: FOR_TO
5969: IFFALSE 6023
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5971: LD_VAR 0 5
5975: PPUSH
5976: LD_VAR 0 1
5980: PPUSH
5981: CALL_OW 321
5985: PUSH
5986: LD_INT 1
5988: EQUAL
5989: PUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: LD_VAR 0 3
5999: PPUSH
6000: CALL_OW 482
6004: AND
6005: IFFALSE 6021
// AddComResearch ( lab , i ) ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 5
6016: PPUSH
6017: CALL_OW 184
6021: GO 5968
6023: POP
6024: POP
// end ;
6025: LD_VAR 0 4
6029: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
6036: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6037: LD_ADDR_VAR 0 7
6041: PUSH
6042: LD_VAR 0 2
6046: PPUSH
6047: CALL_OW 313
6051: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6052: LD_ADDR_VAR 0 8
6056: PUSH
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_INT 22
6064: PUSH
6065: LD_VAR 0 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 2
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 24
6086: PUSH
6087: LD_INT 750
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: LD_INT 54
6099: PUSH
6100: EMPTY
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 70
6117: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6118: LD_ADDR_VAR 0 5
6122: PUSH
6123: LD_VAR 0 3
6127: PPUSH
6128: LD_INT 22
6130: PUSH
6131: LD_VAR 0 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 21
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: LD_INT 24
6155: PUSH
6156: LD_INT 1000
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: EMPTY
6173: LIST
6174: PPUSH
6175: CALL_OW 70
6179: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6180: LD_VAR 0 5
6184: NOT
6185: PUSH
6186: LD_INT 22
6188: PUSH
6189: LD_VAR 0 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 24
6210: PUSH
6211: LD_INT 250
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: PPUSH
6223: CALL_OW 69
6227: NOT
6228: AND
6229: IFFALSE 6233
// exit ;
6231: GO 6329
// if buildingsList and engineerOkInside then
6233: LD_VAR 0 5
6237: PUSH
6238: LD_VAR 0 7
6242: AND
6243: IFFALSE 6269
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6245: LD_VAR 0 7
6249: PPUSH
6250: LD_INT 25
6252: PUSH
6253: LD_INT 2
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 72
6264: PPUSH
6265: CALL_OW 122
// if buildingsList and engineerOkOutside then
6269: LD_VAR 0 5
6273: PUSH
6274: LD_VAR 0 8
6278: AND
6279: IFFALSE 6299
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6299: LD_VAR 0 5
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: PUSH
6308: LD_VAR 0 8
6312: AND
6313: IFFALSE 6329
// ComEnterUnit ( engineerOkOutside , building ) ;
6315: LD_VAR 0 8
6319: PPUSH
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL_OW 120
// end ;
6329: LD_VAR 0 4
6333: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6343: LD_ADDR_VAR 0 6
6347: PUSH
6348: LD_INT 22
6350: PUSH
6351: LD_VAR 0 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 23
6372: PUSH
6373: LD_INT 2
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 251
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6401: LD_ADDR_VAR 0 7
6405: PUSH
6406: LD_VAR 0 3
6410: PPUSH
6411: LD_INT 22
6413: PUSH
6414: LD_VAR 0 1
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 23
6425: PUSH
6426: LD_INT 2
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 25
6435: PUSH
6436: LD_INT 4
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 50
6445: PUSH
6446: EMPTY
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PPUSH
6455: CALL_OW 70
6459: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6460: LD_ADDR_VAR 0 8
6464: PUSH
6465: LD_VAR 0 3
6469: PPUSH
6470: LD_INT 22
6472: PUSH
6473: LD_VAR 0 1
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 21
6484: PUSH
6485: LD_INT 1
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 3
6494: PUSH
6495: LD_INT 25
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 24
6514: PUSH
6515: LD_INT 750
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: PPUSH
6532: CALL_OW 70
6536: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6537: LD_ADDR_VAR 0 9
6541: PUSH
6542: LD_VAR 0 2
6546: PPUSH
6547: LD_INT 22
6549: PUSH
6550: LD_VAR 0 1
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 21
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 25
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 3
6588: PUSH
6589: LD_INT 24
6591: PUSH
6592: LD_INT 1000
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: PPUSH
6609: CALL_OW 70
6613: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6614: LD_VAR 0 8
6618: NOT
6619: PUSH
6620: LD_VAR 0 9
6624: NOT
6625: AND
6626: PUSH
6627: LD_VAR 0 6
6631: NOT
6632: AND
6633: IFFALSE 6637
// exit ;
6635: GO 6843
// if damageUnits and sciList then
6637: LD_VAR 0 8
6641: PUSH
6642: LD_VAR 0 6
6646: AND
6647: IFFALSE 6663
// ComMoveToArea ( damageUnits , healArea ) ;
6649: LD_VAR 0 8
6653: PPUSH
6654: LD_VAR 0 2
6658: PPUSH
6659: CALL_OW 113
// if unitsToHeal and sciList then
6663: LD_VAR 0 9
6667: PUSH
6668: LD_VAR 0 6
6672: AND
6673: IFFALSE 6684
// ComExitBuilding ( sciList ) ;
6675: LD_VAR 0 6
6679: PPUSH
6680: CALL_OW 122
// if unitsToHeal and sciListOutside then
6684: LD_VAR 0 9
6688: PUSH
6689: LD_VAR 0 7
6693: AND
6694: IFFALSE 6714
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6696: LD_VAR 0 7
6700: PPUSH
6701: LD_VAR 0 9
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: PPUSH
6710: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6714: LD_VAR 0 8
6718: PUSH
6719: LD_INT 0
6721: EQUAL
6722: PUSH
6723: LD_VAR 0 9
6727: PUSH
6728: LD_INT 0
6730: EQUAL
6731: AND
6732: PUSH
6733: LD_VAR 0 7
6737: AND
6738: IFFALSE 6843
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6740: LD_ADDR_VAR 0 10
6744: PUSH
6745: LD_INT 22
6747: PUSH
6748: LD_VAR 0 1
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 21
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 8
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 69
6786: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6787: LD_ADDR_VAR 0 11
6791: PUSH
6792: LD_INT 1
6794: PPUSH
6795: LD_VAR 0 10
6799: PPUSH
6800: CALL_OW 12
6804: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6805: LD_VAR 0 7
6809: PPUSH
6810: LD_INT 3
6812: PUSH
6813: LD_INT 60
6815: PUSH
6816: EMPTY
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PPUSH
6823: CALL_OW 72
6827: PPUSH
6828: LD_VAR 0 10
6832: PUSH
6833: LD_VAR 0 11
6837: ARRAY
6838: PPUSH
6839: CALL_OW 120
// end ; end ;
6843: LD_VAR 0 5
6847: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6852: LD_INT 22
6854: PUSH
6855: LD_VAR 0 1
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 21
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 69
6882: PUSH
6883: LD_VAR 0 3
6887: LESSEQUAL
6888: IFFALSE 6955
// for i = 1 to vehCount do
6890: LD_ADDR_VAR 0 9
6894: PUSH
6895: DOUBLE
6896: LD_INT 1
6898: DEC
6899: ST_TO_ADDR
6900: LD_VAR 0 3
6904: PUSH
6905: FOR_TO
6906: IFFALSE 6953
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6908: LD_VAR 0 2
6912: PPUSH
6913: LD_VAR 0 7
6917: PPUSH
6918: LD_VAR 0 5
6922: PPUSH
6923: LD_VAR 0 6
6927: PPUSH
6928: LD_VAR 0 4
6932: PUSH
6933: LD_INT 1
6935: PPUSH
6936: LD_VAR 0 4
6940: PPUSH
6941: CALL_OW 12
6945: ARRAY
6946: PPUSH
6947: CALL_OW 185
6951: GO 6905
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 8
6959: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
// for i = 1 to medicCount do
6973: LD_ADDR_VAR 0 11
6977: PUSH
6978: DOUBLE
6979: LD_INT 1
6981: DEC
6982: ST_TO_ADDR
6983: LD_VAR 0 4
6987: PUSH
6988: FOR_TO
6989: IFFALSE 7059
// begin uc_side = side ;
6991: LD_ADDR_OWVAR 20
6995: PUSH
6996: LD_VAR 0 1
7000: ST_TO_ADDR
// uc_nation = nation ;
7001: LD_ADDR_OWVAR 21
7005: PUSH
7006: LD_VAR 0 2
7010: ST_TO_ADDR
// InitHC_All ( ) ;
7011: CALL_OW 584
// PrepareHuman ( false , 4 , skil ) ;
7015: LD_INT 0
7017: PPUSH
7018: LD_INT 4
7020: PPUSH
7021: LD_VAR 0 5
7025: PPUSH
7026: CALL_OW 380
// un = CreateHuman ;
7030: LD_ADDR_VAR 0 13
7034: PUSH
7035: CALL_OW 44
7039: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7040: LD_VAR 0 13
7044: PPUSH
7045: LD_VAR 0 6
7049: PPUSH
7050: LD_INT 0
7052: PPUSH
7053: CALL_OW 49
// end ;
7057: GO 6988
7059: POP
7060: POP
// for i = 1 to soldierCount do
7061: LD_ADDR_VAR 0 11
7065: PUSH
7066: DOUBLE
7067: LD_INT 1
7069: DEC
7070: ST_TO_ADDR
7071: LD_VAR 0 3
7075: PUSH
7076: FOR_TO
7077: IFFALSE 7147
// begin uc_side = side ;
7079: LD_ADDR_OWVAR 20
7083: PUSH
7084: LD_VAR 0 1
7088: ST_TO_ADDR
// uc_nation = nation ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_VAR 0 2
7098: ST_TO_ADDR
// InitHC_All ( ) ;
7099: CALL_OW 584
// PrepareHuman ( false , 1 , skil ) ;
7103: LD_INT 0
7105: PPUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_VAR 0 5
7113: PPUSH
7114: CALL_OW 380
// un = CreateHuman ;
7118: LD_ADDR_VAR 0 13
7122: PUSH
7123: CALL_OW 44
7127: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7128: LD_VAR 0 13
7132: PPUSH
7133: LD_VAR 0 6
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7076
7147: POP
7148: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7149: LD_ADDR_VAR 0 16
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 1
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 25
7201: PUSH
7202: LD_INT 9
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7225: LD_ADDR_VAR 0 15
7229: PUSH
7230: LD_INT 22
7232: PUSH
7233: LD_VAR 0 1
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 4
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 69
7260: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7261: LD_VAR 0 15
7265: PPUSH
7266: LD_VAR 0 7
7270: PPUSH
7271: CALL_OW 113
// if strategy = 1 then
7275: LD_VAR 0 9
7279: PUSH
7280: LD_INT 1
7282: EQUAL
7283: IFFALSE 7731
// begin for i in soldiersOK_list do
7285: LD_ADDR_VAR 0 11
7289: PUSH
7290: LD_VAR 0 16
7294: PUSH
7295: FOR_IN
7296: IFFALSE 7360
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7298: LD_VAR 0 11
7302: PPUSH
7303: LD_INT 91
7305: PPUSH
7306: LD_INT 63
7308: PPUSH
7309: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7313: LD_VAR 0 11
7317: PPUSH
7318: LD_INT 101
7320: PPUSH
7321: LD_INT 53
7323: PPUSH
7324: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7328: LD_VAR 0 11
7332: PPUSH
7333: LD_INT 75
7335: PPUSH
7336: LD_INT 23
7338: PPUSH
7339: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7343: LD_VAR 0 11
7347: PPUSH
7348: LD_INT 78
7350: PPUSH
7351: LD_INT 8
7353: PPUSH
7354: CALL_OW 174
// end ;
7358: GO 7295
7360: POP
7361: POP
// wait ( 0 0$30 ) ;
7362: LD_INT 1050
7364: PPUSH
7365: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7369: LD_INT 35
7371: PPUSH
7372: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7376: LD_ADDR_VAR 0 14
7380: PUSH
7381: LD_INT 22
7383: PUSH
7384: LD_VAR 0 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: LD_INT 24
7401: PUSH
7402: LD_INT 550
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 24
7415: PUSH
7416: LD_INT 250
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7437: LD_ADDR_VAR 0 16
7441: PUSH
7442: LD_INT 22
7444: PUSH
7445: LD_VAR 0 1
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 25
7456: PUSH
7457: LD_INT 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 24
7466: PUSH
7467: LD_INT 1000
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: PPUSH
7479: CALL_OW 69
7483: ST_TO_ADDR
// if medicCount then
7484: LD_VAR 0 4
7488: IFFALSE 7528
// begin if damageUnit_list then
7490: LD_VAR 0 14
7494: IFFALSE 7528
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7496: LD_VAR 0 14
7500: PPUSH
7501: LD_VAR 0 7
7505: PPUSH
7506: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_VAR 0 14
7519: PUSH
7520: LD_INT 1
7522: ARRAY
7523: PPUSH
7524: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7528: LD_ADDR_VAR 0 11
7532: PUSH
7533: LD_VAR 0 16
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7715
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7541: LD_ADDR_VAR 0 19
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_VAR 0 8
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 69
7562: PPUSH
7563: LD_VAR 0 11
7567: PPUSH
7568: CALL_OW 74
7572: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7573: LD_ADDR_VAR 0 20
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 2
7592: PUSH
7593: LD_INT 59
7595: PUSH
7596: EMPTY
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 1
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 21
7611: PUSH
7612: LD_INT 2
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: PPUSH
7632: CALL_OW 69
7636: PPUSH
7637: LD_VAR 0 11
7641: PPUSH
7642: CALL_OW 74
7646: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7647: LD_VAR 0 11
7651: PPUSH
7652: LD_VAR 0 19
7656: PPUSH
7657: CALL_OW 296
7661: PUSH
7662: LD_INT 8
7664: PLUS
7665: PUSH
7666: LD_VAR 0 11
7670: PPUSH
7671: LD_VAR 0 20
7675: PPUSH
7676: CALL_OW 296
7680: LESS
7681: IFFALSE 7699
// ComAttackUnit ( i , target1 ) else
7683: LD_VAR 0 11
7687: PPUSH
7688: LD_VAR 0 19
7692: PPUSH
7693: CALL_OW 115
7697: GO 7713
// ComAttackUnit ( i , target2 ) ;
7699: LD_VAR 0 11
7703: PPUSH
7704: LD_VAR 0 20
7708: PPUSH
7709: CALL_OW 115
// end ;
7713: GO 7538
7715: POP
7716: POP
// until not soldiersOK_list and not damageUnit_list ;
7717: LD_VAR 0 16
7721: NOT
7722: PUSH
7723: LD_VAR 0 14
7727: NOT
7728: AND
7729: IFFALSE 7369
// end ; if strategy = 2 then
7731: LD_VAR 0 9
7735: PUSH
7736: LD_INT 2
7738: EQUAL
7739: IFFALSE 8157
// begin for i in soldiersOK_list do
7741: LD_ADDR_VAR 0 11
7745: PUSH
7746: LD_VAR 0 16
7750: PUSH
7751: FOR_IN
7752: IFFALSE 7786
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7754: LD_VAR 0 11
7758: PPUSH
7759: LD_INT 91
7761: PPUSH
7762: LD_INT 63
7764: PPUSH
7765: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7769: LD_VAR 0 11
7773: PPUSH
7774: LD_INT 75
7776: PPUSH
7777: LD_INT 33
7779: PPUSH
7780: CALL_OW 174
// end ;
7784: GO 7751
7786: POP
7787: POP
// wait ( 0 0$10 ) ;
7788: LD_INT 350
7790: PPUSH
7791: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7795: LD_INT 105
7797: PPUSH
7798: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7802: LD_ADDR_VAR 0 14
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: LD_INT 24
7827: PUSH
7828: LD_INT 550
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 24
7841: PUSH
7842: LD_INT 250
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 69
7862: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7863: LD_ADDR_VAR 0 16
7867: PUSH
7868: LD_INT 22
7870: PUSH
7871: LD_VAR 0 1
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 25
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 24
7892: PUSH
7893: LD_INT 1000
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: PPUSH
7905: CALL_OW 69
7909: ST_TO_ADDR
// if medicCount then
7910: LD_VAR 0 4
7914: IFFALSE 7954
// begin if damageUnit_list then
7916: LD_VAR 0 14
7920: IFFALSE 7954
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7922: LD_VAR 0 14
7926: PPUSH
7927: LD_VAR 0 7
7931: PPUSH
7932: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7936: LD_VAR 0 4
7940: PPUSH
7941: LD_VAR 0 14
7945: PUSH
7946: LD_INT 1
7948: ARRAY
7949: PPUSH
7950: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7954: LD_ADDR_VAR 0 11
7958: PUSH
7959: LD_VAR 0 16
7963: PUSH
7964: FOR_IN
7965: IFFALSE 8141
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7967: LD_ADDR_VAR 0 19
7971: PUSH
7972: LD_INT 22
7974: PUSH
7975: LD_VAR 0 8
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PPUSH
7984: CALL_OW 69
7988: PPUSH
7989: LD_VAR 0 11
7993: PPUSH
7994: CALL_OW 74
7998: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7999: LD_ADDR_VAR 0 20
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 8
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: LD_INT 59
8021: PUSH
8022: EMPTY
8023: LIST
8024: PUSH
8025: LD_INT 21
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: LD_INT 21
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: PPUSH
8058: CALL_OW 69
8062: PPUSH
8063: LD_VAR 0 11
8067: PPUSH
8068: CALL_OW 74
8072: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8073: LD_VAR 0 11
8077: PPUSH
8078: LD_VAR 0 19
8082: PPUSH
8083: CALL_OW 296
8087: PUSH
8088: LD_INT 8
8090: PLUS
8091: PUSH
8092: LD_VAR 0 11
8096: PPUSH
8097: LD_VAR 0 20
8101: PPUSH
8102: CALL_OW 296
8106: LESS
8107: IFFALSE 8125
// ComAttackUnit ( i , target1 ) else
8109: LD_VAR 0 11
8113: PPUSH
8114: LD_VAR 0 19
8118: PPUSH
8119: CALL_OW 115
8123: GO 8139
// ComAttackUnit ( i , target2 ) ;
8125: LD_VAR 0 11
8129: PPUSH
8130: LD_VAR 0 20
8134: PPUSH
8135: CALL_OW 115
// end ;
8139: GO 7964
8141: POP
8142: POP
// until not soldiersOK_list and not damageUnit_list ;
8143: LD_VAR 0 16
8147: NOT
8148: PUSH
8149: LD_VAR 0 14
8153: NOT
8154: AND
8155: IFFALSE 7795
// end ; if medic_list then
8157: LD_VAR 0 15
8161: IFFALSE 8301
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8163: LD_ADDR_VAR 0 15
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_VAR 0 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 25
8182: PUSH
8183: LD_INT 4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 50
8192: PUSH
8193: EMPTY
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8206: LD_INT 35
8208: PPUSH
8209: CALL_OW 67
// for i in medic_list do
8213: LD_ADDR_VAR 0 11
8217: PUSH
8218: LD_VAR 0 15
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8292
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8226: LD_VAR 0 11
8230: PPUSH
8231: CALL_OW 314
8235: NOT
8236: PUSH
8237: LD_VAR 0 11
8241: PPUSH
8242: LD_INT 4
8244: PPUSH
8245: CALL_OW 308
8249: NOT
8250: AND
8251: IFFALSE 8267
// ComMoveToArea ( i , RussianAttack ) else
8253: LD_VAR 0 11
8257: PPUSH
8258: LD_INT 4
8260: PPUSH
8261: CALL_OW 113
8265: GO 8290
// if IsInArea ( i , RussianAttack ) then
8267: LD_VAR 0 11
8271: PPUSH
8272: LD_INT 4
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8290
// RemoveUnit ( i ) ;
8281: LD_VAR 0 11
8285: PPUSH
8286: CALL_OW 64
8290: GO 8223
8292: POP
8293: POP
// until not medic_list ;
8294: LD_VAR 0 15
8298: NOT
8299: IFFALSE 8163
// end ; end ; end_of_file
8301: LD_VAR 0 10
8305: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8306: LD_INT 0
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
// InGameOn ;
8313: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8317: LD_ADDR_VAR 0 3
8321: PUSH
8322: LD_EXP 8
8326: PUSH
8327: LD_EXP 9
8331: PUSH
8332: LD_EXP 10
8336: PUSH
8337: LD_EXP 11
8341: PUSH
8342: LD_EXP 12
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8354: LD_ADDR_VAR 0 4
8358: PUSH
8359: LD_INT 46
8361: PUSH
8362: LD_INT 45
8364: PUSH
8365: LD_INT 44
8367: PUSH
8368: LD_INT 43
8370: PUSH
8371: LD_INT 42
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8381: LD_ADDR_VAR 0 5
8385: PUSH
8386: LD_INT 14
8388: PUSH
8389: LD_INT 12
8391: PUSH
8392: LD_INT 10
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 6
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8408: LD_EXP 11
8412: PPUSH
8413: LD_INT 31
8415: PPUSH
8416: LD_INT 59
8418: PPUSH
8419: LD_INT 19
8421: PPUSH
8422: LD_INT 5
8424: PPUSH
8425: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8429: LD_INT 32
8431: PPUSH
8432: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8436: LD_INT 32
8438: PPUSH
8439: LD_INT 51
8441: PPUSH
8442: LD_INT 26
8444: PPUSH
8445: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8449: LD_INT 32
8451: PPUSH
8452: LD_INT 53
8454: PPUSH
8455: LD_INT 23
8457: PPUSH
8458: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8462: LD_INT 32
8464: PPUSH
8465: LD_INT 52
8467: PPUSH
8468: LD_INT 19
8470: PPUSH
8471: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8475: LD_INT 35
8477: PPUSH
8478: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8482: LD_INT 32
8484: PPUSH
8485: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8489: LD_INT 32
8491: PPUSH
8492: CALL_OW 250
8496: PUSH
8497: LD_INT 52
8499: EQUAL
8500: PUSH
8501: LD_INT 32
8503: PPUSH
8504: CALL_OW 251
8508: PUSH
8509: LD_INT 19
8511: EQUAL
8512: AND
8513: IFFALSE 8475
// ComExitVehicle ( JMM ) ;
8515: LD_EXP 1
8519: PPUSH
8520: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8524: LD_EXP 7
8528: PPUSH
8529: LD_EXP 1
8533: PPUSH
8534: CALL_OW 119
// wait ( 0 0$01 ) ;
8538: LD_INT 35
8540: PPUSH
8541: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8545: LD_EXP 1
8549: PPUSH
8550: LD_INT 46
8552: PPUSH
8553: LD_INT 10
8555: PPUSH
8556: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8560: LD_EXP 1
8564: PPUSH
8565: LD_EXP 7
8569: PPUSH
8570: CALL_OW 179
// wait ( 0 0$4 ) ;
8574: LD_INT 140
8576: PPUSH
8577: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8581: LD_EXP 1
8585: PPUSH
8586: LD_STRING D1-JMM-1
8588: PPUSH
8589: CALL_OW 88
// if not dialogue_skipped then
8593: LD_OWVAR 59
8597: NOT
8598: IFFALSE 9255
// begin for i := 1 to gammaSquad do
8600: LD_ADDR_VAR 0 2
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 3
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8677
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8618: LD_VAR 0 3
8622: PUSH
8623: LD_VAR 0 2
8627: ARRAY
8628: PPUSH
8629: LD_VAR 0 4
8633: PUSH
8634: LD_VAR 0 2
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 5
8644: PUSH
8645: LD_VAR 0 2
8649: ARRAY
8650: PPUSH
8651: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8655: LD_VAR 0 3
8659: PUSH
8660: LD_VAR 0 2
8664: ARRAY
8665: PPUSH
8666: LD_EXP 1
8670: PPUSH
8671: CALL_OW 179
// end ;
8675: GO 8615
8677: POP
8678: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8679: LD_EXP 4
8683: PPUSH
8684: LD_INT 41
8686: PPUSH
8687: LD_INT 4
8689: PPUSH
8690: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8694: LD_EXP 4
8698: PPUSH
8699: LD_EXP 1
8703: PPUSH
8704: CALL_OW 179
// if Lisa = false and Bobby then
8708: LD_EXP 4
8712: PUSH
8713: LD_INT 0
8715: EQUAL
8716: PUSH
8717: LD_EXP 2
8721: AND
8722: IFFALSE 8753
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8724: LD_EXP 2
8728: PPUSH
8729: LD_INT 41
8731: PPUSH
8732: LD_INT 4
8734: PPUSH
8735: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8739: LD_EXP 2
8743: PPUSH
8744: LD_EXP 1
8748: PPUSH
8749: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8753: LD_EXP 4
8757: PUSH
8758: LD_INT 0
8760: EQUAL
8761: PUSH
8762: LD_EXP 2
8766: PUSH
8767: LD_INT 0
8769: EQUAL
8770: AND
8771: PUSH
8772: LD_EXP 3
8776: AND
8777: IFFALSE 8808
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8779: LD_EXP 3
8783: PPUSH
8784: LD_INT 41
8786: PPUSH
8787: LD_INT 4
8789: PPUSH
8790: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8794: LD_EXP 3
8798: PPUSH
8799: LD_EXP 1
8803: PPUSH
8804: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8808: LD_EXP 4
8812: PUSH
8813: LD_INT 0
8815: EQUAL
8816: PUSH
8817: LD_EXP 2
8821: PUSH
8822: LD_INT 0
8824: EQUAL
8825: AND
8826: PUSH
8827: LD_EXP 3
8831: PUSH
8832: LD_INT 0
8834: EQUAL
8835: AND
8836: IFFALSE 8867
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8838: LD_EXP 6
8842: PPUSH
8843: LD_INT 41
8845: PPUSH
8846: LD_INT 4
8848: PPUSH
8849: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8853: LD_EXP 6
8857: PPUSH
8858: LD_EXP 1
8862: PPUSH
8863: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8867: LD_EXP 7
8871: PPUSH
8872: LD_STRING D1-Brown-1
8874: PPUSH
8875: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8879: LD_EXP 1
8883: PPUSH
8884: LD_STRING D1-JMM-2
8886: PPUSH
8887: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8891: LD_EXP 7
8895: PPUSH
8896: LD_STRING D1-Brown-2
8898: PPUSH
8899: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8903: LD_EXP 1
8907: PPUSH
8908: LD_EXP 9
8912: PPUSH
8913: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8917: LD_EXP 9
8921: PPUSH
8922: LD_STRING D1-FSol1-2
8924: PPUSH
8925: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8929: LD_EXP 1
8933: PPUSH
8934: LD_EXP 8
8938: PPUSH
8939: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8943: LD_EXP 8
8947: PPUSH
8948: LD_STRING D1-Sol2-2
8950: PPUSH
8951: CALL_OW 88
// if Lisa then
8955: LD_EXP 4
8959: IFFALSE 8999
// begin ComTurnUnit ( JMM , Lisa ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_EXP 4
8970: PPUSH
8971: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8975: LD_EXP 4
8979: PPUSH
8980: LD_STRING D1-Lisa-2
8982: PPUSH
8983: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8987: LD_EXP 1
8991: PPUSH
8992: LD_STRING D1-JMM-3
8994: PPUSH
8995: CALL_OW 88
// end ; if Bobby then
8999: LD_EXP 2
9003: IFFALSE 9043
// begin ComTurnUnit ( JMM , Bobby ) ;
9005: LD_EXP 1
9009: PPUSH
9010: LD_EXP 2
9014: PPUSH
9015: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9019: LD_EXP 2
9023: PPUSH
9024: LD_STRING D1-Bobby-2
9026: PPUSH
9027: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9031: LD_EXP 1
9035: PPUSH
9036: LD_STRING D1-JMM-3
9038: PPUSH
9039: CALL_OW 88
// end ; if Cyrus then
9043: LD_EXP 3
9047: IFFALSE 9087
// begin ComTurnUnit ( JMM , Cyrus ) ;
9049: LD_EXP 1
9053: PPUSH
9054: LD_EXP 3
9058: PPUSH
9059: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9063: LD_EXP 3
9067: PPUSH
9068: LD_STRING D1-Cyrus-2
9070: PPUSH
9071: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9075: LD_EXP 1
9079: PPUSH
9080: LD_STRING D1-JMM-3
9082: PPUSH
9083: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9087: LD_EXP 1
9091: PPUSH
9092: LD_EXP 7
9096: PPUSH
9097: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9101: LD_EXP 1
9105: PPUSH
9106: LD_STRING D1-JMM-3a
9108: PPUSH
9109: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9113: LD_EXP 7
9117: PPUSH
9118: LD_INT 38
9120: PPUSH
9121: LD_INT 5
9123: PPUSH
9124: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9128: LD_EXP 7
9132: PPUSH
9133: LD_EXP 1
9137: PPUSH
9138: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9142: LD_EXP 1
9146: PPUSH
9147: LD_INT 40
9149: PPUSH
9150: LD_INT 7
9152: PPUSH
9153: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_EXP 7
9166: PPUSH
9167: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9171: LD_EXP 7
9175: PPUSH
9176: LD_STRING D1-Brown-3
9178: PPUSH
9179: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9183: LD_EXP 14
9187: PPUSH
9188: LD_STRING D1-Har-3
9190: PPUSH
9191: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9195: LD_EXP 1
9199: PPUSH
9200: LD_STRING D1-JMM-4
9202: PPUSH
9203: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9207: LD_EXP 14
9211: PPUSH
9212: LD_STRING D1-Har-4
9214: PPUSH
9215: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9219: LD_EXP 1
9223: PPUSH
9224: LD_STRING D1-JMM-5
9226: PPUSH
9227: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9231: LD_EXP 14
9235: PPUSH
9236: LD_STRING D1-Har-5
9238: PPUSH
9239: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9243: LD_EXP 1
9247: PPUSH
9248: LD_STRING D1-JMM-6
9250: PPUSH
9251: CALL_OW 88
// end ; InGameOff ;
9255: CALL_OW 9
// PrepareRussianConvoy ;
9259: CALL 3404 0 0
// ChangeMissionObjectives ( M1 ) ;
9263: LD_STRING M1
9265: PPUSH
9266: CALL_OW 337
// SaveForQuickRestart ;
9270: CALL_OW 22
// timerStatus = 1 ;
9274: LD_ADDR_EXP 29
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// startTimer = 1 ;
9282: LD_ADDR_EXP 30
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// bonusAvalaible = 1 ;
9290: LD_ADDR_EXP 44
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9298: LD_INT 105
9300: PPUSH
9301: CALL_OW 67
// DialogueOn ;
9305: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9309: LD_EXP 12
9313: PPUSH
9314: LD_STRING D9-Mech1-1
9316: PPUSH
9317: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9321: LD_EXP 1
9325: PPUSH
9326: LD_STRING D9-JMM-1
9328: PPUSH
9329: CALL_OW 88
// DialogueOff ;
9333: CALL_OW 7
// end ;
9337: LD_VAR 0 1
9341: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9342: LD_INT 47
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 321
9352: PUSH
9353: LD_INT 2
9355: EQUAL
9356: PUSH
9357: LD_EXP 31
9361: NOT
9362: AND
9363: PUSH
9364: LD_INT 22
9366: PUSH
9367: LD_INT 1
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 21
9376: PUSH
9377: LD_INT 3
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 30
9386: PUSH
9387: LD_INT 3
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 57
9396: PUSH
9397: EMPTY
9398: LIST
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 69
9410: AND
9411: IFFALSE 9645
9413: GO 9415
9415: DISABLE
// begin factoryDialog := true ;
9416: LD_ADDR_EXP 31
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// if IsOk ( Campell ) then
9424: LD_EXP 12
9428: PPUSH
9429: CALL_OW 302
9433: IFFALSE 9449
// Say ( Campell , D10-Mech1-1 ) else
9435: LD_EXP 12
9439: PPUSH
9440: LD_STRING D10-Mech1-1
9442: PPUSH
9443: CALL_OW 88
9447: GO 9645
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9449: LD_INT 22
9451: PUSH
9452: LD_INT 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 21
9461: PUSH
9462: LD_INT 1
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 25
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 26
9481: PUSH
9482: LD_INT 1
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: PUSH
9500: LD_EXP 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: DIFF
9508: IFFALSE 9582
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9510: LD_INT 22
9512: PUSH
9513: LD_INT 1
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 21
9522: PUSH
9523: LD_INT 1
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 25
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 26
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: PUSH
9561: LD_EXP 1
9565: PUSH
9566: EMPTY
9567: LIST
9568: DIFF
9569: PPUSH
9570: LD_STRING D10-Mech1-1
9572: PPUSH
9573: LD_STRING D10-Mech1-1
9575: PPUSH
9576: CALL 4598 0 3
9580: GO 9645
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9582: LD_INT 22
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 26
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 1
9619: ARRAY
9620: PPUSH
9621: CALL_OW 69
9625: PUSH
9626: LD_EXP 1
9630: PUSH
9631: EMPTY
9632: LIST
9633: DIFF
9634: PPUSH
9635: LD_STRING D10-Mech1-1
9637: PPUSH
9638: LD_STRING D10-Mech1-1
9640: PPUSH
9641: CALL 4598 0 3
// end ; end ;
9645: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9646: LD_INT 22
9648: PUSH
9649: LD_INT 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 30
9658: PUSH
9659: LD_INT 32
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 69
9674: PUSH
9675: LD_EXP 32
9679: PUSH
9680: LD_INT 0
9682: EQUAL
9683: AND
9684: IFFALSE 9920
9686: GO 9688
9688: DISABLE
// begin if IsOk ( Claptopn ) then
9689: LD_EXP 11
9693: PPUSH
9694: CALL_OW 302
9698: IFFALSE 9714
// Say ( Claptopn , D9b-Eng1-1 ) else
9700: LD_EXP 11
9704: PPUSH
9705: LD_STRING D9b-Eng1-1
9707: PPUSH
9708: CALL_OW 88
9712: GO 9906
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9714: LD_INT 22
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 21
9726: PUSH
9727: LD_INT 1
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 25
9736: PUSH
9737: LD_INT 3
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 26
9746: PUSH
9747: LD_INT 1
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PPUSH
9760: CALL_OW 69
9764: PUSH
9765: LD_EXP 1
9769: PUSH
9770: EMPTY
9771: LIST
9772: DIFF
9773: IFFALSE 9847
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9775: LD_INT 22
9777: PUSH
9778: LD_INT 1
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 21
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 25
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 26
9807: PUSH
9808: LD_INT 1
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 69
9825: PUSH
9826: LD_EXP 1
9830: PUSH
9831: EMPTY
9832: LIST
9833: DIFF
9834: PPUSH
9835: LD_STRING D9b-Eng1-1
9837: PPUSH
9838: LD_STRING D9b-Eng1-11
9840: PPUSH
9841: CALL 4598 0 3
9845: GO 9906
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9847: LD_INT 22
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 21
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 26
9869: PUSH
9870: LD_INT 1
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 69
9886: PUSH
9887: LD_EXP 1
9891: PUSH
9892: EMPTY
9893: LIST
9894: DIFF
9895: PPUSH
9896: LD_STRING D9b-Eng1-1
9898: PPUSH
9899: LD_STRING D9b-Eng1-1
9901: PPUSH
9902: CALL 4598 0 3
// end ; if energyVDialog = 0 then
9906: LD_EXP 33
9910: PUSH
9911: LD_INT 0
9913: EQUAL
9914: IFFALSE 9920
// EnergyDialog ;
9916: CALL 5003 0 0
// end ;
9920: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9921: LD_EXP 34
9925: PUSH
9926: LD_INT 1
9928: EQUAL
9929: PUSH
9930: LD_EXP 35
9934: PUSH
9935: LD_INT 1
9937: EQUAL
9938: AND
9939: IFFALSE 9951
9941: GO 9943
9943: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9944: LD_STRING M1a
9946: PPUSH
9947: CALL_OW 337
9951: END
// every 3 3$0 do
9952: GO 9954
9954: DISABLE
// PrepareFirstAttack ;
9955: CALL 4216 0 0
9959: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9960: LD_INT 22
9962: PUSH
9963: LD_INT 5
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 21
9972: PUSH
9973: LD_INT 1
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 3
9982: PUSH
9983: LD_INT 24
9985: PUSH
9986: LD_INT 250
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 69
10006: PUSH
10007: LD_INT 0
10009: GREATER
10010: PUSH
10011: LD_EXP 23
10015: PUSH
10016: LD_INT 1
10018: EQUAL
10019: AND
10020: IFFALSE 10321
10022: GO 10024
10024: DISABLE
10025: LD_INT 0
10027: PPUSH
// begin firstRussianAttack = 2 ;
10028: LD_ADDR_EXP 23
10032: PUSH
10033: LD_INT 2
10035: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10036: LD_INT 22
10038: PUSH
10039: LD_INT 5
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 21
10048: PUSH
10049: LD_INT 1
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 69
10064: PPUSH
10065: LD_INT 125
10067: PPUSH
10068: LD_INT 98
10070: PPUSH
10071: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10075: LD_INT 22
10077: PUSH
10078: LD_INT 1
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 21
10087: PUSH
10088: LD_INT 1
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: LD_EXP 1
10108: PUSH
10109: LD_EXP 7
10113: PUSH
10114: LD_EXP 4
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: DIFF
10124: PPUSH
10125: LD_STRING DAtt1-Sol1-1
10127: PPUSH
10128: LD_STRING DAtt1-FSol1-1
10130: PPUSH
10131: CALL 4598 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10135: LD_EXP 1
10139: PPUSH
10140: LD_STRING DAtt1-JMM-1
10142: PPUSH
10143: CALL_OW 88
// if Lisa then
10147: LD_EXP 4
10151: IFFALSE 10167
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10153: LD_EXP 4
10157: PPUSH
10158: LD_STRING DAtt1a-Lisa-1
10160: PPUSH
10161: CALL_OW 88
10165: GO 10238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10167: LD_INT 22
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 1
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 26
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PUSH
10207: LD_EXP 1
10211: PUSH
10212: LD_EXP 7
10216: PUSH
10217: LD_EXP 4
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: DIFF
10227: PPUSH
10228: LD_STRING DAtt1a-Sol1-1
10230: PPUSH
10231: LD_STRING DAtt1-FSol1-1
10233: PPUSH
10234: CALL 4598 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10238: LD_EXP 1
10242: PPUSH
10243: LD_STRING DAtt1a-JMM-1
10245: PPUSH
10246: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10250: LD_INT 22
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 26
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 69
10289: PUSH
10290: LD_EXP 1
10294: PUSH
10295: LD_EXP 7
10299: PUSH
10300: LD_EXP 4
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: DIFF
10310: PPUSH
10311: LD_STRING DAtt1b-Sol1-1
10313: PPUSH
10314: LD_STRING DAtt1a-Sol1-1
10316: PPUSH
10317: CALL 4598 0 3
// end ;
10321: PPOPN 1
10323: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10324: LD_EXP 23
10328: PUSH
10329: LD_INT 2
10331: EQUAL
10332: PUSH
10333: LD_INT 5
10335: PPUSH
10336: LD_INT 22
10338: PUSH
10339: LD_INT 5
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 21
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PPUSH
10360: CALL_OW 70
10364: AND
10365: IFFALSE 10423
10367: GO 10369
10369: DISABLE
10370: LD_INT 0
10372: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10373: LD_ADDR_VAR 0 1
10377: PUSH
10378: LD_INT 22
10380: PUSH
10381: LD_INT 5
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 21
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PPUSH
10402: CALL_OW 69
10406: PUSH
10407: FOR_IN
10408: IFFALSE 10421
// RemoveUnit ( i ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL_OW 64
10419: GO 10407
10421: POP
10422: POP
// end ;
10423: PPOPN 1
10425: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10426: LD_INT 22
10428: PUSH
10429: LD_INT 5
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: PPUSH
10439: CALL_OW 69
10443: PUSH
10444: LD_INT 0
10446: EQUAL
10447: PUSH
10448: LD_EXP 23
10452: PUSH
10453: LD_INT 2
10455: EQUAL
10456: AND
10457: IFFALSE 10470
10459: GO 10461
10461: DISABLE
// firstRussianAttack = 3 ;
10462: LD_ADDR_EXP 23
10466: PUSH
10467: LD_INT 3
10469: ST_TO_ADDR
10470: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10471: LD_EXP 28
10475: PUSH
10476: LD_INT 0
10478: EQUAL
10479: IFFALSE 10560
10481: GO 10483
10483: DISABLE
// begin timerStatus = 4 ;
10484: LD_ADDR_EXP 29
10488: PUSH
10489: LD_INT 4
10491: ST_TO_ADDR
// DialogueOn ;
10492: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10496: LD_EXP 13
10500: PPUSH
10501: LD_STRING D2-Don-1
10503: PPUSH
10504: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10508: LD_EXP 1
10512: PPUSH
10513: LD_STRING D2-JMM-1
10515: PPUSH
10516: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10520: LD_EXP 13
10524: PPUSH
10525: LD_STRING D2-Don-2
10527: PPUSH
10528: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10532: LD_EXP 1
10536: PPUSH
10537: LD_STRING D2-JMM-2
10539: PPUSH
10540: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10544: LD_EXP 13
10548: PPUSH
10549: LD_STRING D2-Don-3
10551: PPUSH
10552: CALL_OW 94
// DialogueOff ;
10556: CALL_OW 7
// end ;
10560: END
// every 12 12$0 do var tmp ;
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
// begin PrepareDonaldsonArmy ;
10567: CALL 1187 0 0
// CenterNowOnUnits ( Donaldson ) ;
10571: LD_EXP 13
10575: PPUSH
10576: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10580: LD_INT 22
10582: PUSH
10583: LD_INT 6
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: NOT
10595: IFFALSE 10611
// begin wait ( 3 ) ;
10597: LD_INT 3
10599: PPUSH
10600: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10604: LD_STRING ACH_BASE
10606: PPUSH
10607: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
10611: LD_ADDR_VAR 0 1
10615: PUSH
10616: LD_INT 22
10618: PUSH
10619: LD_INT 4
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 26
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 25
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: PPUSH
10662: CALL_OW 69
10666: PUSH
10667: LD_EXP 5
10671: PUSH
10672: EMPTY
10673: LIST
10674: DIFF
10675: ST_TO_ADDR
// DialogueOn ;
10676: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10680: LD_VAR 0 1
10684: PPUSH
10685: LD_STRING D3-Sol1-1
10687: PPUSH
10688: LD_STRING D3-Sol1-1
10690: PPUSH
10691: CALL 4598 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
10695: LD_INT 22
10697: PUSH
10698: LD_INT 4
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 21
10707: PUSH
10708: LD_INT 1
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: LD_INT 26
10717: PUSH
10718: LD_INT 1
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 25
10727: PUSH
10728: LD_INT 3
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: PPUSH
10741: CALL_OW 69
10745: PPUSH
10746: LD_STRING D3-Sol2-1
10748: PPUSH
10749: LD_STRING D3-Sol2-1
10751: PPUSH
10752: CALL 4598 0 3
// if Frank then
10756: LD_EXP 5
10760: IFFALSE 10774
// Say ( Frank , D3-Frank-1 ) ;
10762: LD_EXP 5
10766: PPUSH
10767: LD_STRING D3-Frank-1
10769: PPUSH
10770: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10774: LD_EXP 13
10778: PPUSH
10779: LD_STRING D3-Don-1
10781: PPUSH
10782: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10786: LD_EXP 13
10790: PPUSH
10791: LD_STRING D3-Don-1a
10793: PPUSH
10794: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10798: LD_EXP 1
10802: PPUSH
10803: LD_STRING D3-JMM-1
10805: PPUSH
10806: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10810: LD_EXP 13
10814: PPUSH
10815: LD_STRING D3-Don-2
10817: PPUSH
10818: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10822: LD_INT 22
10824: PUSH
10825: LD_INT 6
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 21
10834: PUSH
10835: LD_INT 1
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PPUSH
10846: CALL_OW 69
10850: IFFALSE 10988
// begin Say ( JMM , D3-JMM-2 ) ;
10852: LD_EXP 1
10856: PPUSH
10857: LD_STRING D3-JMM-2
10859: PPUSH
10860: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10864: LD_EXP 13
10868: PPUSH
10869: LD_STRING D3-Don-3
10871: PPUSH
10872: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10876: LD_EXP 1
10880: PPUSH
10881: LD_STRING D3-JMM-3
10883: PPUSH
10884: CALL_OW 88
// if IsOK ( Frank ) then
10888: LD_EXP 5
10892: PPUSH
10893: CALL_OW 302
10897: IFFALSE 10911
// Say ( Frank , D3-Frank-3 ) ;
10899: LD_EXP 5
10903: PPUSH
10904: LD_STRING D3-Frank-3
10906: PPUSH
10907: CALL_OW 88
// DialogueOff ;
10911: CALL_OW 7
// if IsOk ( Frank ) then
10915: LD_EXP 5
10919: PPUSH
10920: CALL_OW 302
10924: IFFALSE 10986
// begin SetSide ( Frank , 0 ) ;
10926: LD_EXP 5
10930: PPUSH
10931: LD_INT 0
10933: PPUSH
10934: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10938: LD_EXP 5
10942: PPUSH
10943: LD_INT 12
10945: PPUSH
10946: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10950: LD_EXP 5
10954: PPUSH
10955: LD_STRING 04t_Frank
10957: PPUSH
10958: CALL_OW 38
// wait ( 0 0$3 ) ;
10962: LD_INT 105
10964: PPUSH
10965: CALL_OW 67
// frankScoutBase = 1 ;
10969: LD_ADDR_EXP 25
10973: PUSH
10974: LD_INT 1
10976: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10977: LD_EXP 5
10981: PPUSH
10982: CALL_OW 64
// end ; end else
10986: GO 11075
// begin Say ( JMM , D3-JMM-4 ) ;
10988: LD_EXP 1
10992: PPUSH
10993: LD_STRING D3-JMM-4
10995: PPUSH
10996: CALL_OW 88
// DialogueOff ;
11000: CALL_OW 7
// if IsOk ( Frank ) then
11004: LD_EXP 5
11008: PPUSH
11009: CALL_OW 302
11013: IFFALSE 11075
// begin SetSide ( Frank , 0 ) ;
11015: LD_EXP 5
11019: PPUSH
11020: LD_INT 0
11022: PPUSH
11023: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11027: LD_EXP 5
11031: PPUSH
11032: LD_INT 12
11034: PPUSH
11035: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
11039: LD_EXP 5
11043: PPUSH
11044: LD_STRING 04t_Frank
11046: PPUSH
11047: CALL_OW 38
// wait ( 0 0$3 ) ;
11051: LD_INT 105
11053: PPUSH
11054: CALL_OW 67
// frankScoutBase = 1 ;
11058: LD_ADDR_EXP 25
11062: PUSH
11063: LD_INT 1
11065: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11066: LD_EXP 5
11070: PPUSH
11071: CALL_OW 64
// end ; end ; end ;
11075: PPOPN 1
11077: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11078: LD_EXP 13
11082: PPUSH
11083: CALL_OW 255
11087: PUSH
11088: LD_INT 4
11090: EQUAL
11091: PUSH
11092: LD_EXP 13
11096: PPUSH
11097: CALL_OW 302
11101: AND
11102: IFFALSE 11342
11104: GO 11106
11106: DISABLE
11107: LD_INT 0
11109: PPUSH
11110: PPUSH
// begin wait ( 5 5$00 ) ;
11111: LD_INT 10500
11113: PPUSH
11114: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11118: LD_EXP 13
11122: PPUSH
11123: CALL_OW 255
11127: PUSH
11128: LD_INT 1
11130: EQUAL
11131: PUSH
11132: LD_EXP 13
11136: PPUSH
11137: CALL_OW 301
11141: OR
11142: IFFALSE 11146
// exit ;
11144: GO 11342
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11146: LD_EXP 13
11150: PPUSH
11151: LD_STRING D3b-Don-1
11153: PPUSH
11154: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11158: LD_ADDR_EXP 41
11162: PUSH
11163: LD_INT 1
11165: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11166: LD_ADDR_VAR 0 2
11170: PUSH
11171: LD_INT 22
11173: PUSH
11174: LD_INT 4
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PPUSH
11181: CALL_OW 69
11185: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11186: LD_INT 35
11188: PPUSH
11189: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11193: LD_VAR 0 2
11197: NOT
11198: PUSH
11199: LD_INT 22
11201: PUSH
11202: LD_INT 6
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 101
11211: PUSH
11212: LD_INT 1
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PPUSH
11223: CALL_OW 69
11227: OR
11228: IFFALSE 11186
// if not tmp then
11230: LD_VAR 0 2
11234: NOT
11235: IFFALSE 11239
// exit ;
11237: GO 11342
// for i in tmp do
11239: LD_ADDR_VAR 0 1
11243: PUSH
11244: LD_VAR 0 2
11248: PUSH
11249: FOR_IN
11250: IFFALSE 11269
// ComAgressiveMove ( i , 52 , 64 ) ;
11252: LD_VAR 0 1
11256: PPUSH
11257: LD_INT 52
11259: PPUSH
11260: LD_INT 64
11262: PPUSH
11263: CALL_OW 114
11267: GO 11249
11269: POP
11270: POP
// wait ( 0 0$10 ) ;
11271: LD_INT 350
11273: PPUSH
11274: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11278: LD_ADDR_VAR 0 1
11282: PUSH
11283: LD_INT 22
11285: PUSH
11286: LD_INT 4
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 69
11297: PUSH
11298: LD_EXP 5
11302: DIFF
11303: PUSH
11304: FOR_IN
11305: IFFALSE 11321
// SetSide ( i , 1 ) ;
11307: LD_VAR 0 1
11311: PPUSH
11312: LD_INT 1
11314: PPUSH
11315: CALL_OW 235
11319: GO 11304
11321: POP
11322: POP
// if IsLive ( Donaldson ) then
11323: LD_EXP 13
11327: PPUSH
11328: CALL_OW 300
11332: IFFALSE 11342
// saveDonaldson := 1 ;
11334: LD_ADDR_EXP 24
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// end ;
11342: PPOPN 2
11344: END
// every 0 0$1 trigger not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11345: LD_EXP 24
11349: NOT
11350: PUSH
11351: LD_EXP 41
11355: NOT
11356: AND
11357: PUSH
11358: LD_INT 26
11360: PPUSH
11361: LD_INT 22
11363: PUSH
11364: LD_INT 1
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PPUSH
11371: CALL_OW 70
11375: PUSH
11376: LD_EXP 13
11380: PPUSH
11381: LD_EXP 1
11385: PPUSH
11386: CALL_OW 296
11390: PUSH
11391: LD_INT 6
11393: LESS
11394: OR
11395: AND
11396: IFFALSE 11451
11398: GO 11400
11400: DISABLE
11401: LD_INT 0
11403: PPUSH
// begin saveDonaldson := 1 ;
11404: LD_ADDR_EXP 24
11408: PUSH
11409: LD_INT 1
11411: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11412: LD_ADDR_VAR 0 1
11416: PUSH
11417: LD_INT 22
11419: PUSH
11420: LD_INT 4
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PPUSH
11427: CALL_OW 69
11431: PUSH
11432: FOR_IN
11433: IFFALSE 11449
// SetSide ( i , 1 ) ;
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_INT 1
11442: PPUSH
11443: CALL_OW 235
11447: GO 11432
11449: POP
11450: POP
// end ;
11451: PPOPN 1
11453: END
// every 0 0$1 trigger frankScoutBase do
11454: LD_EXP 25
11458: IFFALSE 11823
11460: GO 11462
11462: DISABLE
// begin wait ( 2 2$30 ) ;
11463: LD_INT 5250
11465: PPUSH
11466: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11470: LD_INT 35
11472: PPUSH
11473: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11477: LD_INT 81
11479: PUSH
11480: LD_INT 4
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: LD_INT 92
11489: PUSH
11490: LD_INT 84
11492: PUSH
11493: LD_INT 28
11495: PUSH
11496: LD_INT 22
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PPUSH
11509: CALL_OW 69
11513: NOT
11514: IFFALSE 11470
// uc_side = 4 ;
11516: LD_ADDR_OWVAR 20
11520: PUSH
11521: LD_INT 4
11523: ST_TO_ADDR
// uc_nation = 1 ;
11524: LD_ADDR_OWVAR 21
11528: PUSH
11529: LD_INT 1
11531: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11532: LD_ADDR_EXP 5
11536: PUSH
11537: LD_STRING 04t_Frank
11539: PPUSH
11540: CALL_OW 34
11544: ST_TO_ADDR
// if not Frank then
11545: LD_EXP 5
11549: NOT
11550: IFFALSE 11554
// exit ;
11552: GO 11823
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11554: LD_EXP 5
11558: PPUSH
11559: LD_INT 13
11561: PPUSH
11562: LD_INT 0
11564: PPUSH
11565: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11569: LD_INT 35
11571: PPUSH
11572: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11576: LD_EXP 1
11580: PPUSH
11581: CALL_OW 310
11585: NOT
11586: PUSH
11587: LD_EXP 1
11591: PPUSH
11592: LD_INT 4
11594: PPUSH
11595: CALL_OW 296
11599: PUSH
11600: LD_INT 20
11602: LESS
11603: AND
11604: IFFALSE 11637
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11606: LD_EXP 5
11610: PPUSH
11611: LD_EXP 1
11615: PPUSH
11616: CALL_OW 250
11620: PPUSH
11621: LD_EXP 1
11625: PPUSH
11626: CALL_OW 251
11630: PPUSH
11631: CALL_OW 111
11635: GO 11652
// ComMoveXY ( Frank , 51 , 15 ) ;
11637: LD_EXP 5
11641: PPUSH
11642: LD_INT 51
11644: PPUSH
11645: LD_INT 15
11647: PPUSH
11648: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11652: LD_EXP 5
11656: PPUSH
11657: LD_EXP 1
11661: PPUSH
11662: CALL_OW 296
11666: PUSH
11667: LD_INT 10
11669: LESS
11670: IFFALSE 11569
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11672: LD_EXP 1
11676: PUSH
11677: LD_EXP 5
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PPUSH
11686: CALL_OW 87
// DialogueOn ;
11690: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11694: LD_EXP 5
11698: PPUSH
11699: LD_STRING D3a-Frank-1
11701: PPUSH
11702: CALL_OW 88
// if Lisa then
11706: LD_EXP 4
11710: IFFALSE 11760
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11712: LD_EXP 4
11716: PPUSH
11717: LD_STRING D3a-Lisa-1
11719: PPUSH
11720: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11724: LD_EXP 5
11728: PPUSH
11729: LD_STRING D3a-Frank-2
11731: PPUSH
11732: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11736: LD_EXP 4
11740: PPUSH
11741: LD_STRING D3a-Lisa-2
11743: PPUSH
11744: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11748: LD_EXP 5
11752: PPUSH
11753: LD_STRING D3a-Frank-3
11755: PPUSH
11756: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11760: LD_EXP 1
11764: PPUSH
11765: LD_STRING D3a-JMM-3
11767: PPUSH
11768: CALL_OW 88
// DialogueOff ;
11772: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11776: LD_EXP 5
11780: PPUSH
11781: LD_INT 1
11783: PPUSH
11784: CALL_OW 235
// InGameOn ;
11788: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11792: LD_INT 1
11794: PPUSH
11795: LD_INT 7
11797: PPUSH
11798: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11802: LD_INT 93
11804: PPUSH
11805: LD_INT 91
11807: PPUSH
11808: CALL_OW 84
// wait ( 0 0$5 ) ;
11812: LD_INT 175
11814: PPUSH
11815: CALL_OW 67
// InGameOff ;
11819: CALL_OW 9
// end ;
11823: END
// every 12 12$0 trigger Difficulty > 1 do
11824: LD_OWVAR 67
11828: PUSH
11829: LD_INT 1
11831: GREATER
11832: IFFALSE 11856
11834: GO 11836
11836: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11837: LD_INT 24
11839: PPUSH
11840: LD_INT 24
11842: PPUSH
11843: LD_INT 1
11845: PPUSH
11846: LD_INT 1
11848: PPUSH
11849: LD_INT 53
11851: PPUSH
11852: CALL_OW 185
11856: END
// every 18 18$0 do
11857: GO 11859
11859: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11860: LD_EXP 14
11864: PPUSH
11865: LD_STRING D4-Har-1
11867: PPUSH
11868: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11872: LD_EXP 1
11876: PPUSH
11877: LD_STRING D4-JMM-1
11879: PPUSH
11880: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11884: LD_EXP 14
11888: PPUSH
11889: LD_STRING D4-Har-2
11891: PPUSH
11892: CALL_OW 94
// case Query ( Q1 ) of 1 :
11896: LD_STRING Q1
11898: PPUSH
11899: CALL_OW 97
11903: PUSH
11904: LD_INT 1
11906: DOUBLE
11907: EQUAL
11908: IFTRUE 11912
11910: GO 11971
11912: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11913: LD_EXP 1
11917: PPUSH
11918: LD_STRING D5-JMM-1
11920: PPUSH
11921: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11925: LD_EXP 14
11929: PPUSH
11930: LD_STRING D5-Har-1
11932: PPUSH
11933: CALL_OW 94
// timeToSupport = 10 10$0 ;
11937: LD_ADDR_EXP 28
11941: PUSH
11942: LD_INT 21000
11944: ST_TO_ADDR
// timerStatus = 2 ;
11945: LD_ADDR_EXP 29
11949: PUSH
11950: LD_INT 2
11952: ST_TO_ADDR
// startTimer = 1 ;
11953: LD_ADDR_EXP 30
11957: PUSH
11958: LD_INT 1
11960: ST_TO_ADDR
// harrAnswer = 1 ;
11961: LD_ADDR_EXP 26
11965: PUSH
11966: LD_INT 1
11968: ST_TO_ADDR
// end ; 2 :
11969: GO 12106
11971: LD_INT 2
11973: DOUBLE
11974: EQUAL
11975: IFTRUE 11979
11977: GO 12038
11979: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11980: LD_EXP 1
11984: PPUSH
11985: LD_STRING D5-JMM-2
11987: PPUSH
11988: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11992: LD_EXP 14
11996: PPUSH
11997: LD_STRING D5-Har-2
11999: PPUSH
12000: CALL_OW 94
// timeToSupport = 5 5$0 ;
12004: LD_ADDR_EXP 28
12008: PUSH
12009: LD_INT 10500
12011: ST_TO_ADDR
// timerStatus = 2 ;
12012: LD_ADDR_EXP 29
12016: PUSH
12017: LD_INT 2
12019: ST_TO_ADDR
// startTimer = 1 ;
12020: LD_ADDR_EXP 30
12024: PUSH
12025: LD_INT 1
12027: ST_TO_ADDR
// harrAnswer = 2 ;
12028: LD_ADDR_EXP 26
12032: PUSH
12033: LD_INT 2
12035: ST_TO_ADDR
// end ; 3 :
12036: GO 12106
12038: LD_INT 3
12040: DOUBLE
12041: EQUAL
12042: IFTRUE 12046
12044: GO 12105
12046: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12047: LD_EXP 1
12051: PPUSH
12052: LD_STRING D5-JMM-3
12054: PPUSH
12055: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12059: LD_EXP 14
12063: PPUSH
12064: LD_STRING D5-Har-3
12066: PPUSH
12067: CALL_OW 94
// timeToSupport = 5 5$0 ;
12071: LD_ADDR_EXP 28
12075: PUSH
12076: LD_INT 10500
12078: ST_TO_ADDR
// timerStatus = 2 ;
12079: LD_ADDR_EXP 29
12083: PUSH
12084: LD_INT 2
12086: ST_TO_ADDR
// startTimer = 1 ;
12087: LD_ADDR_EXP 30
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// harrAnswer = 3 ;
12095: LD_ADDR_EXP 26
12099: PUSH
12100: LD_INT 3
12102: ST_TO_ADDR
// end ; end ;
12103: GO 12106
12105: POP
// end ;
12106: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12107: LD_EXP 29
12111: PUSH
12112: LD_INT 2
12114: EQUAL
12115: PUSH
12116: LD_EXP 28
12120: PUSH
12121: LD_INT 0
12123: EQUAL
12124: AND
12125: IFFALSE 12414
12127: GO 12129
12129: DISABLE
// begin timerStatus = 4 ;
12130: LD_ADDR_EXP 29
12134: PUSH
12135: LD_INT 4
12137: ST_TO_ADDR
// if harrAnswer = 1 then
12138: LD_EXP 26
12142: PUSH
12143: LD_INT 1
12145: EQUAL
12146: IFFALSE 12230
// begin PrepareHarrisonSupport ( 3 ) ;
12148: LD_INT 3
12150: PPUSH
12151: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12155: LD_INT 2100
12157: PPUSH
12158: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12162: LD_EXP 14
12166: PPUSH
12167: LD_STRING D7-Har-1
12169: PPUSH
12170: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12174: LD_STRING M2
12176: PPUSH
12177: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12181: LD_ADDR_EXP 27
12185: PUSH
12186: LD_INT 31500
12188: PUSH
12189: LD_INT 10500
12191: PUSH
12192: LD_INT 8400
12194: PUSH
12195: LD_INT 6300
12197: PUSH
12198: LD_INT 6300
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: LD_OWVAR 67
12211: ARRAY
12212: PLUS
12213: ST_TO_ADDR
// startTimer = 1 ;
12214: LD_ADDR_EXP 30
12218: PUSH
12219: LD_INT 1
12221: ST_TO_ADDR
// timerStatus = 3 ;
12222: LD_ADDR_EXP 29
12226: PUSH
12227: LD_INT 3
12229: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12230: LD_EXP 26
12234: PUSH
12235: LD_INT 2
12237: EQUAL
12238: IFFALSE 12322
// begin PrepareHarrisonSupport ( 4 ) ;
12240: LD_INT 4
12242: PPUSH
12243: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12247: LD_INT 2100
12249: PPUSH
12250: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12254: LD_EXP 14
12258: PPUSH
12259: LD_STRING D7-Har-1
12261: PPUSH
12262: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12266: LD_STRING M2
12268: PPUSH
12269: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12273: LD_ADDR_EXP 27
12277: PUSH
12278: LD_INT 33600
12280: PUSH
12281: LD_INT 10500
12283: PUSH
12284: LD_INT 8400
12286: PUSH
12287: LD_INT 6300
12289: PUSH
12290: LD_INT 5250
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: PUSH
12299: LD_OWVAR 67
12303: ARRAY
12304: PLUS
12305: ST_TO_ADDR
// startTimer = 1 ;
12306: LD_ADDR_EXP 30
12310: PUSH
12311: LD_INT 1
12313: ST_TO_ADDR
// timerStatus = 3 ;
12314: LD_ADDR_EXP 29
12318: PUSH
12319: LD_INT 3
12321: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12322: LD_EXP 26
12326: PUSH
12327: LD_INT 3
12329: EQUAL
12330: IFFALSE 12414
// begin PrepareHarrisonSupport ( 5 ) ;
12332: LD_INT 5
12334: PPUSH
12335: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12339: LD_INT 2100
12341: PPUSH
12342: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12346: LD_EXP 14
12350: PPUSH
12351: LD_STRING D7-Har-1
12353: PPUSH
12354: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12358: LD_STRING M2
12360: PPUSH
12361: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12365: LD_ADDR_EXP 27
12369: PUSH
12370: LD_INT 35700
12372: PUSH
12373: LD_INT 10500
12375: PUSH
12376: LD_INT 6300
12378: PUSH
12379: LD_INT 4200
12381: PUSH
12382: LD_INT 3150
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: LD_OWVAR 67
12395: ARRAY
12396: PLUS
12397: ST_TO_ADDR
// startTimer = 1 ;
12398: LD_ADDR_EXP 30
12402: PUSH
12403: LD_INT 1
12405: ST_TO_ADDR
// timerStatus = 3 ;
12406: LD_ADDR_EXP 29
12410: PUSH
12411: LD_INT 3
12413: ST_TO_ADDR
// end ; end ;
12414: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12415: LD_EXP 27
12419: PUSH
12420: LD_INT 8400
12422: LESSEQUAL
12423: PUSH
12424: LD_EXP 29
12428: PUSH
12429: LD_INT 3
12431: EQUAL
12432: AND
12433: IFFALSE 12465
12435: GO 12437
12437: DISABLE
// begin DialogueOn ;
12438: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12442: LD_EXP 14
12446: PPUSH
12447: LD_STRING D7a-Har-1
12449: PPUSH
12450: CALL_OW 94
// DialogueOff ;
12454: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12458: LD_STRING M2a
12460: PPUSH
12461: CALL_OW 337
// end ;
12465: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12466: LD_EXP 27
12470: PUSH
12471: LD_INT 0
12473: LESSEQUAL
12474: PUSH
12475: LD_EXP 29
12479: PUSH
12480: LD_INT 3
12482: EQUAL
12483: AND
12484: PUSH
12485: LD_EXP 40
12489: NOT
12490: AND
12491: IFFALSE 12630
12493: GO 12495
12495: DISABLE
12496: LD_INT 0
12498: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12499: LD_ADDR_VAR 0 1
12503: PUSH
12504: LD_INT 22
12506: PUSH
12507: LD_INT 1
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: PUSH
12519: LD_EXP 1
12523: PUSH
12524: EMPTY
12525: LIST
12526: DIFF
12527: ST_TO_ADDR
// saveDonaldson = 2 ;
12528: LD_ADDR_EXP 24
12532: PUSH
12533: LD_INT 2
12535: ST_TO_ADDR
// DialogueOn ;
12536: CALL_OW 6
// if IsOk ( Donaldson ) then
12540: LD_EXP 13
12544: PPUSH
12545: CALL_OW 302
12549: IFFALSE 12565
// SayRadio ( Harisson , D8-Har-1 ) else
12551: LD_EXP 14
12555: PPUSH
12556: LD_STRING D8-Har-1
12558: PPUSH
12559: CALL_OW 94
12563: GO 12577
// SayRadio ( Harisson , D8-Har-1a ) ;
12565: LD_EXP 14
12569: PPUSH
12570: LD_STRING D8-Har-1a
12572: PPUSH
12573: CALL_OW 94
// DialogueOff ;
12577: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12581: LD_VAR 0 1
12585: PPUSH
12586: LD_INT 4
12588: PPUSH
12589: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12593: LD_VAR 0 1
12597: PPUSH
12598: LD_INT 88
12600: PPUSH
12601: LD_INT 89
12603: PPUSH
12604: CALL_OW 114
// honor = 0 ;
12608: LD_ADDR_EXP 39
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12616: LD_INT 350
12618: PPUSH
12619: CALL_OW 67
// YouLost ( LostCommand ) ;
12623: LD_STRING LostCommand
12625: PPUSH
12626: CALL_OW 104
// end ;
12630: PPOPN 1
12632: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12633: LD_INT 22
12635: PUSH
12636: LD_INT 6
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 21
12645: PUSH
12646: LD_INT 1
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PPUSH
12657: CALL_OW 69
12661: PUSH
12662: LD_INT 0
12664: EQUAL
12665: PUSH
12666: LD_EXP 20
12670: PUSH
12671: LD_INT 0
12673: EQUAL
12674: AND
12675: PUSH
12676: LD_EXP 44
12680: PUSH
12681: LD_INT 1
12683: EQUAL
12684: AND
12685: IFFALSE 12779
12687: GO 12689
12689: DISABLE
12690: LD_INT 0
12692: PPUSH
12693: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12694: LD_ADDR_VAR 0 2
12698: PUSH
12699: LD_INT 22
12701: PUSH
12702: LD_INT 1
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 21
12711: PUSH
12712: LD_INT 1
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 23
12721: PUSH
12722: LD_INT 1
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: PPUSH
12734: CALL_OW 69
12738: ST_TO_ADDR
// for i in tmp do
12739: LD_ADDR_VAR 0 1
12743: PUSH
12744: LD_VAR 0 2
12748: PUSH
12749: FOR_IN
12750: IFFALSE 12777
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12752: LD_VAR 0 1
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: LD_INT 4
12762: PPUSH
12763: CALL_OW 12
12767: PPUSH
12768: LD_INT 500
12770: PPUSH
12771: CALL_OW 492
12775: GO 12749
12777: POP
12778: POP
// end ; end_of_file
12779: PPOPN 2
12781: END
// every 0 0$1 trigger AIEnable do
12782: LD_EXP 37
12786: IFFALSE 12880
12788: GO 12790
12790: DISABLE
// begin enable ;
12791: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12792: LD_INT 3
12794: PPUSH
12795: LD_INT 21
12797: PPUSH
12798: LD_INT 7
12800: PPUSH
12801: CALL 6030 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12805: LD_INT 3
12807: PPUSH
12808: LD_INT 8
12810: PPUSH
12811: LD_INT 7
12813: PPUSH
12814: LD_INT 1
12816: PPUSH
12817: CALL 6334 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12821: LD_EXP 20
12825: PUSH
12826: LD_INT 2
12828: EQUAL
12829: PUSH
12830: LD_INT 22
12832: PUSH
12833: LD_INT 6
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PPUSH
12840: CALL_OW 69
12844: AND
12845: IFFALSE 12880
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12847: LD_INT 6
12849: PPUSH
12850: LD_EXP 21
12854: PPUSH
12855: LD_INT 6
12857: PPUSH
12858: CALL 6030 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12862: LD_INT 6
12864: PPUSH
12865: LD_INT 9
12867: PPUSH
12868: LD_INT 6
12870: PPUSH
12871: LD_EXP 22
12875: PPUSH
12876: CALL 6334 0 4
// end ; end ;
12880: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12881: LD_EXP 15
12885: PPUSH
12886: CALL_OW 310
12890: NOT
12891: PUSH
12892: LD_INT 21
12894: PPUSH
12895: CALL_OW 302
12899: AND
12900: PUSH
12901: LD_INT 21
12903: PPUSH
12904: CALL_OW 255
12908: PUSH
12909: LD_INT 3
12911: EQUAL
12912: AND
12913: IFFALSE 12930
12915: GO 12917
12917: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12918: LD_EXP 15
12922: PPUSH
12923: LD_INT 21
12925: PPUSH
12926: CALL_OW 120
12930: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12931: LD_INT 22
12933: PUSH
12934: LD_INT 3
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 21
12943: PUSH
12944: LD_INT 2
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 55
12953: PUSH
12954: EMPTY
12955: LIST
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: LIST
12961: PPUSH
12962: CALL_OW 69
12966: PUSH
12967: LD_INT 0
12969: EQUAL
12970: PUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 255
12978: PUSH
12979: LD_INT 3
12981: EQUAL
12982: AND
12983: PUSH
12984: LD_INT 21
12986: PPUSH
12987: CALL_OW 302
12991: AND
12992: PUSH
12993: LD_INT 21
12995: PPUSH
12996: CALL_OW 255
13000: PUSH
13001: LD_INT 3
13003: EQUAL
13004: AND
13005: PUSH
13006: LD_INT 21
13008: PPUSH
13009: CALL_OW 302
13013: AND
13014: IFFALSE 13226
13016: GO 13018
13018: DISABLE
// begin enable ;
13019: ENABLE
// if Difficulty = 1 then
13020: LD_OWVAR 67
13024: PUSH
13025: LD_INT 1
13027: EQUAL
13028: IFFALSE 13072
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
13030: LD_INT 3
13032: PPUSH
13033: LD_INT 24
13035: PPUSH
13036: LD_OWVAR 67
13040: PUSH
13041: LD_INT 2
13043: PLUS
13044: PPUSH
13045: LD_INT 42
13047: PUSH
13048: LD_INT 44
13050: PUSH
13051: LD_INT 43
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: PPUSH
13059: LD_INT 1
13061: PPUSH
13062: LD_INT 1
13064: PPUSH
13065: LD_INT 21
13067: PPUSH
13068: CALL 6848 0 7
// if Difficulty = 2 then
13072: LD_OWVAR 67
13076: PUSH
13077: LD_INT 2
13079: EQUAL
13080: IFFALSE 13147
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13082: LD_INT 3
13084: PPUSH
13085: LD_INT 24
13087: PPUSH
13088: LD_OWVAR 67
13092: PUSH
13093: LD_INT 2
13095: PLUS
13096: PPUSH
13097: LD_INT 44
13099: PUSH
13100: LD_INT 44
13102: PUSH
13103: LD_INT 43
13105: PUSH
13106: LD_INT 43
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: PPUSH
13115: LD_INT 1
13117: PPUSH
13118: LD_INT 1
13120: PPUSH
13121: LD_INT 21
13123: PUSH
13124: LD_INT 22
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 1
13133: PPUSH
13134: LD_INT 2
13136: PPUSH
13137: CALL_OW 12
13141: ARRAY
13142: PPUSH
13143: CALL 6848 0 7
// if Difficulty >= 3 then
13147: LD_OWVAR 67
13151: PUSH
13152: LD_INT 3
13154: GREATEREQUAL
13155: IFFALSE 13226
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13157: LD_INT 3
13159: PPUSH
13160: LD_INT 24
13162: PPUSH
13163: LD_OWVAR 67
13167: PUSH
13168: LD_INT 2
13170: PPUSH
13171: LD_INT 3
13173: PPUSH
13174: CALL_OW 12
13178: PLUS
13179: PPUSH
13180: LD_INT 44
13182: PUSH
13183: LD_INT 44
13185: PUSH
13186: LD_INT 43
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: PPUSH
13194: LD_INT 1
13196: PPUSH
13197: LD_INT 1
13199: PPUSH
13200: LD_INT 22
13202: PUSH
13203: LD_INT 23
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 1
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: CALL_OW 12
13220: ARRAY
13221: PPUSH
13222: CALL 6848 0 7
// end ;
13226: END
// every 0 0$1 do
13227: GO 13229
13229: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13230: LD_INT 3
13232: PPUSH
13233: LD_INT 1
13235: PPUSH
13236: LD_INT 3
13238: PPUSH
13239: CALL 5951 0 3
13243: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13244: LD_EXP 20
13248: PUSH
13249: LD_INT 1
13251: EQUAL
13252: IFFALSE 13399
13254: GO 13256
13256: DISABLE
13257: LD_INT 0
13259: PPUSH
13260: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13261: LD_ADDR_VAR 0 2
13265: PUSH
13266: LD_INT 22
13268: PUSH
13269: LD_INT 6
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 21
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 34
13288: PUSH
13289: LD_INT 51
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: LIST
13300: PPUSH
13301: CALL_OW 69
13305: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13306: LD_VAR 0 2
13310: PUSH
13311: LD_INT 1
13313: ARRAY
13314: PPUSH
13315: LD_EXP 21
13319: PPUSH
13320: CALL_OW 250
13324: PUSH
13325: LD_INT 5
13327: MINUS
13328: PPUSH
13329: LD_EXP 21
13333: PPUSH
13334: CALL_OW 251
13338: PUSH
13339: LD_INT 5
13341: MINUS
13342: PPUSH
13343: CALL_OW 111
// wait ( 0 0$5 ) ;
13347: LD_INT 175
13349: PPUSH
13350: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13354: LD_VAR 0 2
13358: PUSH
13359: LD_INT 1
13361: ARRAY
13362: PPUSH
13363: LD_INT 41
13365: PPUSH
13366: LD_INT 52
13368: PPUSH
13369: CALL_OW 177
// wait ( 0 0$40 ) ;
13373: LD_INT 1400
13375: PPUSH
13376: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13380: LD_VAR 0 2
13384: PUSH
13385: LD_INT 1
13387: ARRAY
13388: PPUSH
13389: LD_INT 41
13391: PPUSH
13392: LD_INT 44
13394: PPUSH
13395: CALL_OW 111
// end ;
13399: PPOPN 2
13401: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13402: LD_EXP 21
13406: PPUSH
13407: CALL_OW 274
13411: PPUSH
13412: LD_INT 1
13414: PPUSH
13415: CALL_OW 275
13419: PUSH
13420: LD_INT 100
13422: GREATEREQUAL
13423: IFFALSE 13651
13425: GO 13427
13427: DISABLE
13428: LD_INT 0
13430: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13431: LD_ADDR_VAR 0 1
13435: PUSH
13436: LD_INT 22
13438: PUSH
13439: LD_INT 6
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 21
13448: PUSH
13449: LD_INT 1
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 25
13458: PUSH
13459: LD_INT 2
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: LIST
13470: PPUSH
13471: CALL_OW 69
13475: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13476: LD_VAR 0 1
13480: PUSH
13481: LD_INT 1
13483: ARRAY
13484: PPUSH
13485: LD_INT 4
13487: PPUSH
13488: LD_INT 39
13490: PPUSH
13491: LD_INT 37
13493: PPUSH
13494: LD_INT 3
13496: PPUSH
13497: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13501: LD_VAR 0 1
13505: PUSH
13506: LD_INT 1
13508: ARRAY
13509: PPUSH
13510: LD_INT 29
13512: PPUSH
13513: LD_INT 42
13515: PPUSH
13516: LD_INT 54
13518: PPUSH
13519: LD_INT 3
13521: PPUSH
13522: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13526: LD_VAR 0 1
13530: PUSH
13531: LD_INT 1
13533: ARRAY
13534: PPUSH
13535: LD_INT 6
13537: PPUSH
13538: LD_INT 38
13540: PPUSH
13541: LD_INT 48
13543: PPUSH
13544: LD_INT 0
13546: PPUSH
13547: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13551: LD_VAR 0 1
13555: PUSH
13556: LD_INT 1
13558: ARRAY
13559: PPUSH
13560: LD_INT 2
13562: PPUSH
13563: LD_INT 32
13565: PPUSH
13566: LD_INT 38
13568: PPUSH
13569: LD_INT 2
13571: PPUSH
13572: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13576: LD_VAR 0 1
13580: PUSH
13581: LD_INT 1
13583: ARRAY
13584: PPUSH
13585: LD_INT 26
13587: PPUSH
13588: LD_INT 39
13590: PPUSH
13591: LD_INT 55
13593: PPUSH
13594: LD_INT 3
13596: PPUSH
13597: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13601: LD_VAR 0 1
13605: PUSH
13606: LD_INT 1
13608: ARRAY
13609: PPUSH
13610: LD_INT 32
13612: PPUSH
13613: LD_INT 31
13615: PPUSH
13616: LD_INT 31
13618: PPUSH
13619: LD_INT 3
13621: PPUSH
13622: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13626: LD_VAR 0 1
13630: PUSH
13631: LD_INT 1
13633: ARRAY
13634: PPUSH
13635: LD_INT 31
13637: PPUSH
13638: LD_INT 50
13640: PPUSH
13641: LD_INT 51
13643: PPUSH
13644: LD_INT 4
13646: PPUSH
13647: CALL_OW 205
// end ;
13651: PPOPN 1
13653: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13654: LD_EXP 46
13658: IFFALSE 14223
13660: GO 13662
13662: DISABLE
13663: LD_INT 0
13665: PPUSH
13666: PPUSH
13667: PPUSH
// begin enable ;
13668: ENABLE
// if not ruMobile then
13669: LD_EXP 46
13673: NOT
13674: IFFALSE 13678
// exit ;
13676: GO 14223
// for i in ruMobile do
13678: LD_ADDR_VAR 0 1
13682: PUSH
13683: LD_EXP 46
13687: PUSH
13688: FOR_IN
13689: IFFALSE 14221
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13691: LD_VAR 0 1
13695: PPUSH
13696: CALL_OW 302
13700: NOT
13701: PUSH
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 255
13711: PUSH
13712: LD_INT 3
13714: NONEQUAL
13715: OR
13716: IFFALSE 13736
// begin ruMobile := ruMobile diff i ;
13718: LD_ADDR_EXP 46
13722: PUSH
13723: LD_EXP 46
13727: PUSH
13728: LD_VAR 0 1
13732: DIFF
13733: ST_TO_ADDR
// continue ;
13734: GO 13688
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13736: LD_VAR 0 1
13740: PPUSH
13741: CALL_OW 110
13745: NOT
13746: PUSH
13747: LD_VAR 0 1
13751: PPUSH
13752: CALL_OW 110
13756: PUSH
13757: LD_INT 0
13759: EQUAL
13760: OR
13761: IFFALSE 13876
// begin if GetFuel ( i ) < 50 then
13763: LD_VAR 0 1
13767: PPUSH
13768: CALL_OW 261
13772: PUSH
13773: LD_INT 50
13775: LESS
13776: IFFALSE 13835
// begin ComMoveXY ( i , 106 , 88 ) ;
13778: LD_VAR 0 1
13782: PPUSH
13783: LD_INT 106
13785: PPUSH
13786: LD_INT 88
13788: PPUSH
13789: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13793: LD_INT 35
13795: PPUSH
13796: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13800: LD_VAR 0 1
13804: PPUSH
13805: LD_INT 106
13807: PPUSH
13808: LD_INT 88
13810: PPUSH
13811: CALL_OW 297
13815: PUSH
13816: LD_INT 4
13818: LESS
13819: IFFALSE 13793
// SetFuel ( i , 100 ) ;
13821: LD_VAR 0 1
13825: PPUSH
13826: LD_INT 100
13828: PPUSH
13829: CALL_OW 240
// end else
13833: GO 13876
// if not IsInArea ( i , ruParking ) then
13835: LD_VAR 0 1
13839: PPUSH
13840: LD_INT 25
13842: PPUSH
13843: CALL_OW 308
13847: NOT
13848: IFFALSE 13864
// ComMoveToArea ( i , ruParking ) else
13850: LD_VAR 0 1
13854: PPUSH
13855: LD_INT 25
13857: PPUSH
13858: CALL_OW 113
13862: GO 13876
// SetTag ( i , 1 ) ;
13864: LD_VAR 0 1
13868: PPUSH
13869: LD_INT 1
13871: PPUSH
13872: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13876: LD_VAR 0 1
13880: PPUSH
13881: CALL_OW 110
13885: PUSH
13886: LD_INT 1
13888: EQUAL
13889: IFFALSE 14019
// begin if GetLives ( i ) < 1000 then
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 256
13900: PUSH
13901: LD_INT 1000
13903: LESS
13904: IFFALSE 13996
// begin if not IsDrivenBy ( i ) then
13906: LD_VAR 0 1
13910: PPUSH
13911: CALL_OW 311
13915: NOT
13916: IFFALSE 13920
// continue ;
13918: GO 13688
// mech := IsDrivenBy ( i ) ;
13920: LD_ADDR_VAR 0 2
13924: PUSH
13925: LD_VAR 0 1
13929: PPUSH
13930: CALL_OW 311
13934: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13935: LD_VAR 0 2
13939: PPUSH
13940: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13944: LD_VAR 0 2
13948: PPUSH
13949: LD_VAR 0 1
13953: PPUSH
13954: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13958: LD_INT 35
13960: PPUSH
13961: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13965: LD_VAR 0 1
13969: PPUSH
13970: CALL_OW 256
13974: PUSH
13975: LD_INT 1000
13977: EQUAL
13978: IFFALSE 13958
// ComEnterUnit ( mech , i ) ;
13980: LD_VAR 0 2
13984: PPUSH
13985: LD_VAR 0 1
13989: PPUSH
13990: CALL_OW 120
// end else
13994: GO 14019
// if IsDrivenBy ( i ) then
13996: LD_VAR 0 1
14000: PPUSH
14001: CALL_OW 311
14005: IFFALSE 14019
// SetTag ( i , 2 ) ;
14007: LD_VAR 0 1
14011: PPUSH
14012: LD_INT 2
14014: PPUSH
14015: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
14019: LD_VAR 0 1
14023: PPUSH
14024: CALL_OW 110
14028: PUSH
14029: LD_INT 2
14031: EQUAL
14032: IFFALSE 14219
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14034: LD_ADDR_VAR 0 3
14038: PUSH
14039: LD_INT 24
14041: PPUSH
14042: LD_INT 81
14044: PUSH
14045: LD_INT 3
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PPUSH
14052: CALL_OW 70
14056: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14057: LD_VAR 0 1
14061: PPUSH
14062: CALL_OW 256
14066: PUSH
14067: LD_INT 650
14069: LESS
14070: IFFALSE 14095
// begin ComStop ( i ) ;
14072: LD_VAR 0 1
14076: PPUSH
14077: CALL_OW 141
// SetTag ( i , 0 ) ;
14081: LD_VAR 0 1
14085: PPUSH
14086: LD_INT 0
14088: PPUSH
14089: CALL_OW 109
// continue ;
14093: GO 13688
// end ; if enemy then
14095: LD_VAR 0 3
14099: IFFALSE 14139
// begin if not HasTask ( i ) then
14101: LD_VAR 0 1
14105: PPUSH
14106: CALL_OW 314
14110: NOT
14111: IFFALSE 14137
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14113: LD_VAR 0 1
14117: PPUSH
14118: LD_VAR 0 3
14122: PPUSH
14123: LD_VAR 0 1
14127: PPUSH
14128: CALL_OW 74
14132: PPUSH
14133: CALL_OW 115
// end else
14137: GO 14219
// if ruMobile > 2 then
14139: LD_EXP 46
14143: PUSH
14144: LD_INT 2
14146: GREATER
14147: IFFALSE 14219
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14149: LD_ADDR_VAR 0 3
14153: PUSH
14154: LD_INT 81
14156: PUSH
14157: LD_INT 3
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PPUSH
14164: CALL_OW 69
14168: ST_TO_ADDR
// if enemy then
14169: LD_VAR 0 3
14173: IFFALSE 14219
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
14175: LD_VAR 0 1
14179: PPUSH
14180: LD_INT 95
14182: PUSH
14183: LD_INT 74
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 67
14192: PUSH
14193: LD_INT 59
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PUSH
14200: LD_INT 55
14202: PUSH
14203: LD_INT 41
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: LIST
14214: PPUSH
14215: CALL 79893 0 2
// end ; end ; end ;
14219: GO 13688
14221: POP
14222: POP
// end ; end_of_file
14223: PPOPN 3
14225: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14226: LD_INT 0
14228: PPUSH
14229: PPUSH
14230: PPUSH
14231: PPUSH
14232: PPUSH
14233: PPUSH
14234: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14235: LD_ADDR_VAR 0 3
14239: PUSH
14240: LD_INT 22
14242: PUSH
14243: LD_INT 6
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 21
14252: PUSH
14253: LD_INT 1
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 1
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 54
14275: PUSH
14276: EMPTY
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: PPUSH
14289: CALL_OW 69
14293: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14294: LD_ADDR_VAR 0 7
14298: PUSH
14299: LD_INT 22
14301: PUSH
14302: LD_INT 6
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 21
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 25
14321: PUSH
14322: LD_INT 1
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 54
14331: PUSH
14332: EMPTY
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: PPUSH
14341: CALL_OW 69
14345: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14346: LD_ADDR_VAR 0 4
14350: PUSH
14351: LD_INT 22
14353: PUSH
14354: LD_INT 6
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 21
14363: PUSH
14364: LD_INT 1
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 25
14373: PUSH
14374: LD_INT 2
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: LIST
14385: PPUSH
14386: CALL_OW 69
14390: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14391: LD_ADDR_VAR 0 6
14395: PUSH
14396: LD_INT 22
14398: PUSH
14399: LD_INT 6
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 21
14408: PUSH
14409: LD_INT 1
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 25
14418: PUSH
14419: LD_INT 4
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: PPUSH
14431: CALL_OW 69
14435: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14436: LD_ADDR_VAR 0 8
14440: PUSH
14441: LD_INT 22
14443: PUSH
14444: LD_INT 6
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 21
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 34
14463: PUSH
14464: LD_INT 51
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: LIST
14475: PPUSH
14476: CALL_OW 69
14480: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14481: LD_VAR 0 1
14485: PPUSH
14486: CALL_OW 255
14490: PUSH
14491: LD_INT 6
14493: EQUAL
14494: PUSH
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 266
14504: PUSH
14505: LD_INT 0
14507: EQUAL
14508: AND
14509: IFFALSE 14529
// begin ruPDepot = building ;
14511: LD_ADDR_EXP 21
14515: PUSH
14516: LD_VAR 0 1
14520: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14521: LD_ADDR_EXP 20
14525: PUSH
14526: LD_INT 1
14528: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14529: LD_VAR 0 1
14533: PPUSH
14534: CALL_OW 266
14538: PUSH
14539: LD_INT 4
14541: EQUAL
14542: PUSH
14543: LD_VAR 0 1
14547: PPUSH
14548: CALL_OW 255
14552: PUSH
14553: LD_INT 6
14555: EQUAL
14556: AND
14557: IFFALSE 14590
// for i in tmpSold do
14559: LD_ADDR_VAR 0 2
14563: PUSH
14564: LD_VAR 0 3
14568: PUSH
14569: FOR_IN
14570: IFFALSE 14588
// ComEnterUnit ( i , building ) ;
14572: LD_VAR 0 2
14576: PPUSH
14577: LD_VAR 0 1
14581: PPUSH
14582: CALL_OW 120
14586: GO 14569
14588: POP
14589: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14590: LD_VAR 0 1
14594: PPUSH
14595: CALL_OW 266
14599: PUSH
14600: LD_INT 6
14602: EQUAL
14603: PUSH
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 6
14616: EQUAL
14617: AND
14618: IFFALSE 14676
// begin for i in tmpSci do
14620: LD_ADDR_VAR 0 2
14624: PUSH
14625: LD_VAR 0 6
14629: PUSH
14630: FOR_IN
14631: IFFALSE 14649
// ComEnterUnit ( i , building ) ;
14633: LD_VAR 0 2
14637: PPUSH
14638: LD_VAR 0 1
14642: PPUSH
14643: CALL_OW 120
14647: GO 14630
14649: POP
14650: POP
// ResAllTechs ( 6 , building , 3 ) ;
14651: LD_INT 6
14653: PPUSH
14654: LD_VAR 0 1
14658: PPUSH
14659: LD_INT 3
14661: PPUSH
14662: CALL 5951 0 3
// ruPLab = building ;
14666: LD_ADDR_EXP 22
14670: PUSH
14671: LD_VAR 0 1
14675: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14676: LD_VAR 0 1
14680: PPUSH
14681: CALL_OW 266
14685: PUSH
14686: LD_INT 2
14688: EQUAL
14689: PUSH
14690: LD_VAR 0 1
14694: PPUSH
14695: CALL_OW 255
14699: PUSH
14700: LD_INT 6
14702: EQUAL
14703: AND
14704: IFFALSE 14755
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14706: LD_ADDR_VAR 0 5
14710: PUSH
14711: LD_VAR 0 8
14715: PUSH
14716: LD_INT 1
14718: ARRAY
14719: PPUSH
14720: CALL_OW 313
14724: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14725: LD_VAR 0 5
14729: PPUSH
14730: CALL_OW 121
// wait ( 0 0$1 ) ;
14734: LD_INT 35
14736: PPUSH
14737: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14741: LD_VAR 0 5
14745: PPUSH
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14755: LD_VAR 0 1
14759: PPUSH
14760: CALL_OW 266
14764: PUSH
14765: LD_INT 32
14767: EQUAL
14768: PUSH
14769: LD_VAR 0 1
14773: PPUSH
14774: CALL_OW 255
14778: PUSH
14779: LD_INT 6
14781: EQUAL
14782: AND
14783: IFFALSE 14835
// begin ComPlaceWeapon ( building , 42 ) ;
14785: LD_VAR 0 1
14789: PPUSH
14790: LD_INT 42
14792: PPUSH
14793: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14797: LD_VAR 0 7
14801: PUSH
14802: LD_INT 1
14804: ARRAY
14805: PPUSH
14806: CALL_OW 122
// wait ( 0 0$1 ) ;
14810: LD_INT 35
14812: PPUSH
14813: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14817: LD_VAR 0 7
14821: PUSH
14822: LD_INT 1
14824: ARRAY
14825: PPUSH
14826: LD_VAR 0 1
14830: PPUSH
14831: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 266
14844: PUSH
14845: LD_INT 31
14847: EQUAL
14848: PUSH
14849: LD_VAR 0 1
14853: PPUSH
14854: CALL_OW 255
14858: PUSH
14859: LD_INT 6
14861: EQUAL
14862: AND
14863: IFFALSE 14929
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14865: LD_VAR 0 7
14869: PUSH
14870: LD_INT 2
14872: ARRAY
14873: PPUSH
14874: CALL_OW 122
// wait ( 0 0$1 ) ;
14878: LD_INT 35
14880: PPUSH
14881: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14885: LD_VAR 0 7
14889: PUSH
14890: LD_INT 2
14892: ARRAY
14893: PPUSH
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14903: LD_VAR 0 4
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: PPUSH
14912: LD_EXP 21
14916: PPUSH
14917: CALL_OW 120
// baseReadyToBuild = 2 ;
14921: LD_ADDR_EXP 20
14925: PUSH
14926: LD_INT 2
14928: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14929: LD_VAR 0 1
14933: PPUSH
14934: CALL_OW 266
14938: PUSH
14939: LD_INT 32
14941: EQUAL
14942: PUSH
14943: LD_VAR 0 1
14947: PPUSH
14948: CALL_OW 255
14952: PUSH
14953: LD_INT 1
14955: EQUAL
14956: AND
14957: PUSH
14958: LD_EXP 32
14962: PUSH
14963: LD_INT 0
14965: EQUAL
14966: AND
14967: IFFALSE 15212
// begin bunkerDialog = 1 ;
14969: LD_ADDR_EXP 32
14973: PUSH
14974: LD_INT 1
14976: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14977: LD_EXP 11
14981: PPUSH
14982: CALL_OW 302
14986: IFFALSE 15002
// Say ( Claptopn , D11-Eng1-1 ) else
14988: LD_EXP 11
14992: PPUSH
14993: LD_STRING D11-Eng1-1
14995: PPUSH
14996: CALL_OW 88
15000: GO 15198
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15002: LD_INT 22
15004: PUSH
15005: LD_INT 1
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 21
15014: PUSH
15015: LD_INT 1
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: LD_INT 25
15024: PUSH
15025: LD_INT 3
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 26
15034: PUSH
15035: LD_INT 1
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: PPUSH
15048: CALL_OW 69
15052: PUSH
15053: LD_EXP 1
15057: PUSH
15058: EMPTY
15059: LIST
15060: PUSH
15061: LD_INT 0
15063: GREATER
15064: DIFF
15065: IFFALSE 15139
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15067: LD_INT 22
15069: PUSH
15070: LD_INT 1
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: LD_INT 21
15079: PUSH
15080: LD_INT 1
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 25
15089: PUSH
15090: LD_INT 2
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 26
15099: PUSH
15100: LD_INT 1
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: PPUSH
15113: CALL_OW 69
15117: PUSH
15118: LD_EXP 1
15122: PUSH
15123: EMPTY
15124: LIST
15125: DIFF
15126: PPUSH
15127: LD_STRING D11-Eng1-1
15129: PPUSH
15130: LD_STRING D11-Eng1-1
15132: PPUSH
15133: CALL 4598 0 3
15137: GO 15198
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15139: LD_INT 22
15141: PUSH
15142: LD_INT 1
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 21
15151: PUSH
15152: LD_INT 1
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: LD_INT 26
15161: PUSH
15162: LD_INT 1
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: LIST
15173: PPUSH
15174: CALL_OW 69
15178: PUSH
15179: LD_EXP 1
15183: PUSH
15184: EMPTY
15185: LIST
15186: DIFF
15187: PPUSH
15188: LD_STRING D11-Eng1-1
15190: PPUSH
15191: LD_STRING D11-Eng1-1
15193: PPUSH
15194: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15198: LD_EXP 33
15202: PUSH
15203: LD_INT 0
15205: EQUAL
15206: IFFALSE 15212
// EnergyDialog ;
15208: CALL 5003 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15212: LD_VAR 0 1
15216: PPUSH
15217: CALL_OW 266
15221: PUSH
15222: LD_INT 29
15224: EQUAL
15225: PUSH
15226: LD_VAR 0 1
15230: PPUSH
15231: CALL_OW 255
15235: PUSH
15236: LD_INT 1
15238: EQUAL
15239: AND
15240: IFFALSE 15250
// buildOil = 1 ;
15242: LD_ADDR_EXP 34
15246: PUSH
15247: LD_INT 1
15249: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 266
15259: PUSH
15260: LD_INT 26
15262: EQUAL
15263: PUSH
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 255
15273: PUSH
15274: LD_INT 1
15276: EQUAL
15277: AND
15278: IFFALSE 15288
// buildPower = 1 ;
15280: LD_ADDR_EXP 35
15284: PUSH
15285: LD_INT 1
15287: ST_TO_ADDR
// end ;
15288: PPOPN 8
15290: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15291: LD_VAR 0 1
15295: PPUSH
15296: CALL_OW 266
15300: PUSH
15301: LD_INT 3
15303: EQUAL
15304: PUSH
15305: LD_VAR 0 1
15309: PPUSH
15310: CALL_OW 255
15314: PUSH
15315: LD_INT 1
15317: EQUAL
15318: AND
15319: PUSH
15320: LD_EXP 31
15324: PUSH
15325: LD_INT 0
15327: EQUAL
15328: AND
15329: IFFALSE 15677
// begin factoryDialog = 1 ;
15331: LD_ADDR_EXP 31
15335: PUSH
15336: LD_INT 1
15338: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15339: LD_INT 47
15341: PPUSH
15342: LD_INT 1
15344: PPUSH
15345: CALL_OW 321
15349: PUSH
15350: LD_INT 1
15352: EQUAL
15353: PUSH
15354: LD_INT 45
15356: PPUSH
15357: LD_INT 1
15359: PPUSH
15360: CALL_OW 321
15364: PUSH
15365: LD_INT 1
15367: EQUAL
15368: AND
15369: IFFALSE 15677
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15371: LD_INT 22
15373: PUSH
15374: LD_INT 1
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 21
15383: PUSH
15384: LD_INT 3
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 30
15393: PUSH
15394: LD_INT 3
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 24
15403: PUSH
15404: LD_INT 1000
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: PPUSH
15417: CALL_OW 69
15421: PUSH
15422: LD_INT 1
15424: ARRAY
15425: PPUSH
15426: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15430: LD_EXP 1
15434: PPUSH
15435: LD_STRING D9a-JMM-1
15437: PPUSH
15438: CALL_OW 88
// if IsOK ( Campell ) then
15442: LD_EXP 12
15446: PPUSH
15447: CALL_OW 302
15451: IFFALSE 15467
// Say ( Campell , D9a-Mech1-1 ) else
15453: LD_EXP 12
15457: PPUSH
15458: LD_STRING D9a-Mech1-1
15460: PPUSH
15461: CALL_OW 88
15465: GO 15663
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15467: LD_INT 22
15469: PUSH
15470: LD_INT 1
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 21
15479: PUSH
15480: LD_INT 1
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 25
15489: PUSH
15490: LD_INT 3
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 26
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: PPUSH
15513: CALL_OW 69
15517: PUSH
15518: LD_EXP 1
15522: PUSH
15523: EMPTY
15524: LIST
15525: PUSH
15526: LD_INT 0
15528: GREATER
15529: DIFF
15530: IFFALSE 15604
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15532: LD_INT 22
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 21
15544: PUSH
15545: LD_INT 1
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 25
15554: PUSH
15555: LD_INT 3
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 26
15564: PUSH
15565: LD_INT 1
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 69
15582: PUSH
15583: LD_EXP 1
15587: PUSH
15588: EMPTY
15589: LIST
15590: DIFF
15591: PPUSH
15592: LD_STRING D9a-Mech1-1
15594: PPUSH
15595: LD_STRING D9a-Mech1-1
15597: PPUSH
15598: CALL 4598 0 3
15602: GO 15663
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15604: LD_INT 22
15606: PUSH
15607: LD_INT 1
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 21
15616: PUSH
15617: LD_INT 1
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: LD_INT 26
15626: PUSH
15627: LD_INT 1
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: LIST
15638: PPUSH
15639: CALL_OW 69
15643: PUSH
15644: LD_EXP 1
15648: PUSH
15649: EMPTY
15650: LIST
15651: DIFF
15652: PPUSH
15653: LD_STRING D9a-Mech1-1
15655: PPUSH
15656: LD_STRING D9a-Mech1-1
15658: PPUSH
15659: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15663: LD_EXP 33
15667: PUSH
15668: LD_INT 0
15670: EQUAL
15671: IFFALSE 15677
// EnergyDialog ;
15673: CALL 5003 0 0
// end ; end ; end ;
15677: PPOPN 1
15679: END
// on UnitDestroyed ( unit ) do var mech ;
15680: LD_INT 0
15682: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15683: LD_VAR 0 1
15687: PPUSH
15688: CALL 35532 0 1
// if unit = JMM then
15692: LD_VAR 0 1
15696: PUSH
15697: LD_EXP 1
15701: EQUAL
15702: IFFALSE 15711
// YouLost ( JMM ) ;
15704: LD_STRING JMM
15706: PPUSH
15707: CALL_OW 104
// if unit = ambdept0 then
15711: LD_VAR 0 1
15715: PUSH
15716: LD_INT 4
15718: EQUAL
15719: IFFALSE 15728
// YouLost ( Base ) ;
15721: LD_STRING Base
15723: PPUSH
15724: CALL_OW 104
// if unit in ruMobile then
15728: LD_VAR 0 1
15732: PUSH
15733: LD_EXP 46
15737: IN
15738: IFFALSE 15756
// ruMobile = ruMobile diff ruMobile ;
15740: LD_ADDR_EXP 46
15744: PUSH
15745: LD_EXP 46
15749: PUSH
15750: LD_EXP 46
15754: DIFF
15755: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15756: LD_VAR 0 1
15760: PPUSH
15761: CALL_OW 247
15765: PUSH
15766: LD_INT 1
15768: EQUAL
15769: PUSH
15770: LD_VAR 0 1
15774: PPUSH
15775: CALL_OW 255
15779: PUSH
15780: LD_INT 1
15782: EQUAL
15783: AND
15784: IFFALSE 15800
// lostCounter = lostCounter + 1 ;
15786: LD_ADDR_EXP 38
15790: PUSH
15791: LD_EXP 38
15795: PUSH
15796: LD_INT 1
15798: PLUS
15799: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15800: LD_EXP 43
15804: PUSH
15805: LD_INT 24
15807: PPUSH
15808: CALL_OW 313
15812: PUSH
15813: LD_INT 6
15815: LESS
15816: AND
15817: PUSH
15818: LD_VAR 0 1
15822: PPUSH
15823: CALL_OW 257
15827: PUSH
15828: LD_INT 3
15830: EQUAL
15831: AND
15832: PUSH
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 255
15842: PUSH
15843: LD_INT 3
15845: EQUAL
15846: AND
15847: PUSH
15848: LD_INT 24
15850: PPUSH
15851: CALL_OW 302
15855: AND
15856: PUSH
15857: LD_INT 24
15859: PPUSH
15860: CALL_OW 255
15864: PUSH
15865: LD_INT 3
15867: EQUAL
15868: AND
15869: IFFALSE 15998
// begin ruMech := ruMech - 1 ;
15871: LD_ADDR_EXP 43
15875: PUSH
15876: LD_EXP 43
15880: PUSH
15881: LD_INT 1
15883: MINUS
15884: ST_TO_ADDR
// if ruMech = 0 then
15885: LD_EXP 43
15889: PUSH
15890: LD_INT 0
15892: EQUAL
15893: IFFALSE 15897
// exit ;
15895: GO 15998
// wait ( 0 0$40 ) ;
15897: LD_INT 1400
15899: PPUSH
15900: CALL_OW 67
// uc_side = 3 ;
15904: LD_ADDR_OWVAR 20
15908: PUSH
15909: LD_INT 3
15911: ST_TO_ADDR
// uc_nation = 3 ;
15912: LD_ADDR_OWVAR 21
15916: PUSH
15917: LD_INT 3
15919: ST_TO_ADDR
// hc_gallery :=  ;
15920: LD_ADDR_OWVAR 33
15924: PUSH
15925: LD_STRING 
15927: ST_TO_ADDR
// hc_name :=  ;
15928: LD_ADDR_OWVAR 26
15932: PUSH
15933: LD_STRING 
15935: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15936: LD_INT 0
15938: PPUSH
15939: LD_EXP 16
15943: PPUSH
15944: LD_EXP 17
15948: PPUSH
15949: CALL_OW 12
15953: PPUSH
15954: CALL_OW 383
// mech := CreateHuman ;
15958: LD_ADDR_VAR 0 2
15962: PUSH
15963: CALL_OW 44
15967: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15968: LD_VAR 0 2
15972: PPUSH
15973: LD_INT 124
15975: PPUSH
15976: LD_INT 97
15978: PPUSH
15979: LD_INT 0
15981: PPUSH
15982: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
15986: LD_VAR 0 2
15990: PPUSH
15991: LD_INT 24
15993: PPUSH
15994: CALL_OW 120
// end ; end ;
15998: PPOPN 2
16000: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
16001: LD_INT 0
16003: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
16004: LD_VAR 0 1
16008: PPUSH
16009: LD_VAR 0 2
16013: PPUSH
16014: CALL 35652 0 2
// if GetSide ( vehicle ) = 1 then
16018: LD_VAR 0 1
16022: PPUSH
16023: CALL_OW 255
16027: PUSH
16028: LD_INT 1
16030: EQUAL
16031: IFFALSE 16047
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
16033: LD_ADDR_EXP 42
16037: PUSH
16038: LD_EXP 42
16042: PUSH
16043: LD_INT 1
16045: PLUS
16046: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 255
16056: PUSH
16057: LD_INT 3
16059: EQUAL
16060: PUSH
16061: LD_VAR 0 1
16065: PPUSH
16066: CALL_OW 264
16070: PUSH
16071: LD_INT 42
16073: PUSH
16074: LD_INT 43
16076: PUSH
16077: LD_INT 44
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: LIST
16084: IN
16085: AND
16086: IFFALSE 16104
// ruMobile := ruMobile union vehicle ;
16088: LD_ADDR_EXP 46
16092: PUSH
16093: LD_EXP 46
16097: PUSH
16098: LD_VAR 0 1
16102: UNION
16103: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16104: LD_VAR 0 1
16108: PPUSH
16109: CALL_OW 264
16113: PUSH
16114: LD_INT 53
16116: EQUAL
16117: IFFALSE 16253
// begin uc_side = 3 ;
16119: LD_ADDR_OWVAR 20
16123: PUSH
16124: LD_INT 3
16126: ST_TO_ADDR
// uc_nation = 3 ;
16127: LD_ADDR_OWVAR 21
16131: PUSH
16132: LD_INT 3
16134: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16135: LD_INT 0
16137: PPUSH
16138: LD_EXP 17
16142: PPUSH
16143: CALL_OW 383
// driver := CreateHuman ;
16147: LD_ADDR_VAR 0 3
16151: PUSH
16152: CALL_OW 44
16156: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16157: LD_VAR 0 3
16161: PPUSH
16162: LD_VAR 0 2
16166: PPUSH
16167: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16171: LD_VAR 0 1
16175: PPUSH
16176: LD_INT 21
16178: PPUSH
16179: CALL 5219 0 2
// repeat wait ( 0 0$1 ) ;
16183: LD_INT 35
16185: PPUSH
16186: CALL_OW 67
// until not HasTask ( vehicle ) ;
16190: LD_VAR 0 1
16194: PPUSH
16195: CALL_OW 314
16199: NOT
16200: IFFALSE 16183
// driver := IsDrivenBy ( vehicle ) ;
16202: LD_ADDR_VAR 0 3
16206: PUSH
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL_OW 311
16216: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16217: LD_VAR 0 3
16221: PPUSH
16222: LD_INT 104
16224: PPUSH
16225: LD_INT 73
16227: PPUSH
16228: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16232: LD_VAR 0 3
16236: PPUSH
16237: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16241: LD_VAR 0 3
16245: PPUSH
16246: LD_INT 24
16248: PPUSH
16249: CALL_OW 180
// end ; end ;
16253: PPOPN 3
16255: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 255
16265: PUSH
16266: LD_INT 3
16268: EQUAL
16269: PUSH
16270: LD_VAR 0 1
16274: PPUSH
16275: CALL_OW 247
16279: PUSH
16280: LD_INT 2
16282: EQUAL
16283: AND
16284: PUSH
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 264
16294: PUSH
16295: LD_INT 42
16297: PUSH
16298: LD_INT 43
16300: PUSH
16301: LD_INT 44
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: LIST
16308: IN
16309: AND
16310: IFFALSE 16359
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16312: LD_INT 24
16314: PPUSH
16315: LD_VAR 0 1
16319: PPUSH
16320: CALL_OW 265
16324: PPUSH
16325: LD_VAR 0 1
16329: PPUSH
16330: CALL_OW 262
16334: PPUSH
16335: LD_VAR 0 1
16339: PPUSH
16340: CALL_OW 263
16344: PPUSH
16345: LD_VAR 0 1
16349: PPUSH
16350: CALL_OW 264
16354: PPUSH
16355: CALL_OW 185
// end ;
16359: PPOPN 1
16361: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16362: LD_VAR 0 1
16366: PPUSH
16367: CALL_OW 255
16371: PUSH
16372: LD_INT 3
16374: EQUAL
16375: PUSH
16376: LD_VAR 0 2
16380: PPUSH
16381: CALL_OW 255
16385: PUSH
16386: LD_INT 3
16388: EQUAL
16389: AND
16390: PUSH
16391: LD_INT 24
16393: PPUSH
16394: CALL_OW 302
16398: AND
16399: PUSH
16400: LD_VAR 0 1
16404: PPUSH
16405: CALL_OW 302
16409: NOT
16410: AND
16411: IFFALSE 16425
// ComEnterUnit ( human , rubfact0 ) ;
16413: LD_VAR 0 2
16417: PPUSH
16418: LD_INT 24
16420: PPUSH
16421: CALL_OW 120
// end ;
16425: PPOPN 2
16427: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16428: LD_VAR 0 1
16432: PUSH
16433: LD_INT 24
16435: EQUAL
16436: PUSH
16437: LD_VAR 0 2
16441: PPUSH
16442: CALL_OW 256
16446: PUSH
16447: LD_INT 1000
16449: LESS
16450: AND
16451: IFFALSE 16465
// SetLives ( un , 1000 ) ;
16453: LD_VAR 0 2
16457: PPUSH
16458: LD_INT 1000
16460: PPUSH
16461: CALL_OW 234
// end ;
16465: PPOPN 2
16467: END
// on Command ( comandid ) do var i , j , tmp ;
16468: LD_INT 0
16470: PPUSH
16471: PPUSH
16472: PPUSH
// begin SOS_Command ( comandid ) ;
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL 35636 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16482: LD_INT 22
16484: PUSH
16485: LD_INT 4
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PPUSH
16492: CALL_OW 69
16496: NOT
16497: IFFALSE 16501
// exit ;
16499: GO 16666
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16501: LD_ADDR_VAR 0 2
16505: PUSH
16506: LD_INT 22
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 2
16518: PUSH
16519: LD_INT 21
16521: PUSH
16522: LD_INT 1
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 21
16531: PUSH
16532: LD_INT 2
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PPUSH
16548: CALL_OW 69
16552: PUSH
16553: FOR_IN
16554: IFFALSE 16664
// begin if GetTaskList ( i ) > 0 then
16556: LD_VAR 0 2
16560: PPUSH
16561: CALL_OW 437
16565: PUSH
16566: LD_INT 0
16568: GREATER
16569: IFFALSE 16662
// begin for j = 1 to GetTaskList ( i ) do
16571: LD_ADDR_VAR 0 3
16575: PUSH
16576: DOUBLE
16577: LD_INT 1
16579: DEC
16580: ST_TO_ADDR
16581: LD_VAR 0 2
16585: PPUSH
16586: CALL_OW 437
16590: PUSH
16591: FOR_TO
16592: IFFALSE 16660
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16594: LD_ADDR_VAR 0 4
16598: PUSH
16599: LD_VAR 0 2
16603: PPUSH
16604: CALL_OW 437
16608: PUSH
16609: LD_VAR 0 3
16613: ARRAY
16614: PUSH
16615: LD_INT 4
16617: ARRAY
16618: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16619: LD_VAR 0 4
16623: PPUSH
16624: CALL_OW 255
16628: PUSH
16629: LD_INT 4
16631: EQUAL
16632: PUSH
16633: LD_VAR 0 4
16637: PPUSH
16638: CALL_OW 255
16642: PUSH
16643: LD_INT 0
16645: EQUAL
16646: OR
16647: IFFALSE 16658
// ComStop ( i ) ;
16649: LD_VAR 0 2
16653: PPUSH
16654: CALL_OW 141
// end ;
16658: GO 16591
16660: POP
16661: POP
// end ; end ;
16662: GO 16553
16664: POP
16665: POP
// end ; end_of_file
16666: PPOPN 4
16668: END
// every 10 10$0 do
16669: GO 16671
16671: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16672: LD_INT 5
16674: PPUSH
16675: LD_INT 3
16677: PPUSH
16678: LD_INT 2
16680: PUSH
16681: LD_INT 2
16683: PUSH
16684: LD_INT 3
16686: PUSH
16687: LD_INT 4
16689: PUSH
16690: LD_INT 4
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: PUSH
16699: LD_OWVAR 67
16703: ARRAY
16704: PLUS
16705: PPUSH
16706: LD_INT 0
16708: PPUSH
16709: LD_EXP 16
16713: PPUSH
16714: LD_EXP 17
16718: PPUSH
16719: CALL_OW 12
16723: PPUSH
16724: LD_INT 4
16726: PPUSH
16727: LD_INT 14
16729: PPUSH
16730: LD_INT 1
16732: PPUSH
16733: LD_INT 2
16735: PPUSH
16736: CALL 6960 0 9
16740: END
// every 20 20$0 do
16741: GO 16743
16743: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16744: LD_INT 5
16746: PPUSH
16747: LD_INT 3
16749: PPUSH
16750: LD_INT 4
16752: PUSH
16753: LD_INT 2
16755: PUSH
16756: LD_INT 3
16758: PUSH
16759: LD_INT 4
16761: PUSH
16762: LD_INT 5
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: PUSH
16771: LD_OWVAR 67
16775: ARRAY
16776: PLUS
16777: PPUSH
16778: LD_INT 2
16780: PPUSH
16781: LD_EXP 16
16785: PPUSH
16786: LD_EXP 17
16790: PPUSH
16791: CALL_OW 12
16795: PPUSH
16796: LD_INT 4
16798: PPUSH
16799: LD_INT 14
16801: PPUSH
16802: LD_INT 1
16804: PPUSH
16805: LD_INT 1
16807: PPUSH
16808: CALL 6960 0 9
16812: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16813: GO 16815
16815: DISABLE
16816: LD_INT 0
16818: PPUSH
16819: PPUSH
16820: PPUSH
16821: PPUSH
16822: PPUSH
// begin hex := [ 123 , 95 ] ;
16823: LD_ADDR_VAR 0 4
16827: PUSH
16828: LD_INT 123
16830: PUSH
16831: LD_INT 95
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: ST_TO_ADDR
// tmp := [ ] ;
16838: LD_ADDR_VAR 0 5
16842: PUSH
16843: EMPTY
16844: ST_TO_ADDR
// if Difficulty > 1 then
16845: LD_OWVAR 67
16849: PUSH
16850: LD_INT 1
16852: GREATER
16853: IFFALSE 16863
// specAttack := true ;
16855: LD_ADDR_EXP 47
16859: PUSH
16860: LD_INT 1
16862: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16863: LD_ADDR_VAR 0 1
16867: PUSH
16868: DOUBLE
16869: LD_INT 1
16871: DEC
16872: ST_TO_ADDR
16873: LD_INT 4
16875: PUSH
16876: LD_INT 5
16878: PUSH
16879: LD_INT 6
16881: PUSH
16882: LD_INT 7
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: PUSH
16891: LD_OWVAR 67
16895: ARRAY
16896: PUSH
16897: FOR_TO
16898: IFFALSE 17200
// begin uc_side := 5 ;
16900: LD_ADDR_OWVAR 20
16904: PUSH
16905: LD_INT 5
16907: ST_TO_ADDR
// uc_nation := 3 ;
16908: LD_ADDR_OWVAR 21
16912: PUSH
16913: LD_INT 3
16915: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16916: LD_ADDR_OWVAR 37
16920: PUSH
16921: LD_INT 21
16923: PUSH
16924: LD_INT 22
16926: PUSH
16927: LD_INT 23
16929: PUSH
16930: LD_INT 24
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: PUSH
16939: LD_VAR 0 1
16943: PUSH
16944: LD_OWVAR 67
16948: MOD
16949: PUSH
16950: LD_INT 1
16952: PLUS
16953: ARRAY
16954: ST_TO_ADDR
// vc_engine := engine_combustion ;
16955: LD_ADDR_OWVAR 39
16959: PUSH
16960: LD_INT 1
16962: ST_TO_ADDR
// vc_control := control_manual ;
16963: LD_ADDR_OWVAR 38
16967: PUSH
16968: LD_INT 1
16970: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16971: LD_ADDR_OWVAR 40
16975: PUSH
16976: LD_INT 42
16978: PUSH
16979: LD_INT 43
16981: PUSH
16982: LD_INT 44
16984: PUSH
16985: LD_INT 44
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: PUSH
16994: LD_VAR 0 1
16998: PUSH
16999: LD_OWVAR 67
17003: MOD
17004: PUSH
17005: LD_INT 1
17007: PLUS
17008: ARRAY
17009: ST_TO_ADDR
// veh := CreateVehicle ;
17010: LD_ADDR_VAR 0 3
17014: PUSH
17015: CALL_OW 45
17019: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17020: LD_VAR 0 3
17024: PPUSH
17025: LD_INT 5
17027: PPUSH
17028: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
17032: LD_INT 35
17034: PPUSH
17035: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17039: LD_VAR 0 4
17043: PUSH
17044: LD_INT 1
17046: ARRAY
17047: PPUSH
17048: LD_VAR 0 4
17052: PUSH
17053: LD_INT 2
17055: ARRAY
17056: PPUSH
17057: CALL_OW 428
17061: PUSH
17062: LD_INT 0
17064: EQUAL
17065: IFFALSE 17032
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17067: LD_VAR 0 3
17071: PPUSH
17072: LD_VAR 0 4
17076: PUSH
17077: LD_INT 1
17079: ARRAY
17080: PPUSH
17081: LD_VAR 0 4
17085: PUSH
17086: LD_INT 2
17088: ARRAY
17089: PPUSH
17090: LD_INT 0
17092: PPUSH
17093: CALL_OW 48
// uc_side := 5 ;
17097: LD_ADDR_OWVAR 20
17101: PUSH
17102: LD_INT 5
17104: ST_TO_ADDR
// uc_nation := 3 ;
17105: LD_ADDR_OWVAR 21
17109: PUSH
17110: LD_INT 3
17112: ST_TO_ADDR
// InitHC_All ( ) ;
17113: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
17117: LD_INT 0
17119: PPUSH
17120: LD_INT 2
17122: PUSH
17123: LD_OWVAR 67
17127: PLUS
17128: PPUSH
17129: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17133: CALL_OW 44
17137: PPUSH
17138: LD_VAR 0 3
17142: PPUSH
17143: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17147: LD_VAR 0 3
17151: PPUSH
17152: LD_INT 101
17154: PPUSH
17155: LD_INT 77
17157: PPUSH
17158: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17162: LD_ADDR_VAR 0 5
17166: PUSH
17167: LD_VAR 0 5
17171: PPUSH
17172: LD_VAR 0 5
17176: PUSH
17177: LD_INT 1
17179: PLUS
17180: PPUSH
17181: LD_VAR 0 3
17185: PPUSH
17186: CALL_OW 1
17190: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17191: LD_INT 105
17193: PPUSH
17194: CALL_OW 67
// end ;
17198: GO 16897
17200: POP
17201: POP
// repeat wait ( 0 0$1 ) ;
17202: LD_INT 35
17204: PPUSH
17205: CALL_OW 67
// for i in tmp do
17209: LD_ADDR_VAR 0 1
17213: PUSH
17214: LD_VAR 0 5
17218: PUSH
17219: FOR_IN
17220: IFFALSE 17288
// if not IsOk ( i ) then
17222: LD_VAR 0 1
17226: PPUSH
17227: CALL_OW 302
17231: NOT
17232: IFFALSE 17252
// tmp := tmp diff i else
17234: LD_ADDR_VAR 0 5
17238: PUSH
17239: LD_VAR 0 5
17243: PUSH
17244: LD_VAR 0 1
17248: DIFF
17249: ST_TO_ADDR
17250: GO 17286
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17252: LD_VAR 0 1
17256: PPUSH
17257: LD_INT 22
17259: PUSH
17260: LD_INT 1
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PPUSH
17267: CALL_OW 69
17271: PPUSH
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 74
17281: PPUSH
17282: CALL_OW 115
17286: GO 17219
17288: POP
17289: POP
// until not tmp ;
17290: LD_VAR 0 5
17294: NOT
17295: IFFALSE 17202
// end ;
17297: PPOPN 5
17299: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17300: LD_EXP 47
17304: IFFALSE 17682
17306: GO 17308
17308: DISABLE
17309: LD_INT 0
17311: PPUSH
17312: PPUSH
17313: PPUSH
17314: PPUSH
// begin wait ( 0 0$20 ) ;
17315: LD_INT 700
17317: PPUSH
17318: CALL_OW 67
// uc_side := 5 ;
17322: LD_ADDR_OWVAR 20
17326: PUSH
17327: LD_INT 5
17329: ST_TO_ADDR
// uc_nation := 3 ;
17330: LD_ADDR_OWVAR 21
17334: PUSH
17335: LD_INT 3
17337: ST_TO_ADDR
// InitHc ;
17338: CALL_OW 19
// hc_importance := 0 ;
17342: LD_ADDR_OWVAR 32
17346: PUSH
17347: LD_INT 0
17349: ST_TO_ADDR
// tmp := [ ] ;
17350: LD_ADDR_VAR 0 2
17354: PUSH
17355: EMPTY
17356: ST_TO_ADDR
// InitHC_All ( ) ;
17357: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17361: LD_INT 0
17363: PPUSH
17364: LD_INT 2
17366: PPUSH
17367: LD_INT 6
17369: PPUSH
17370: CALL_OW 380
// eng := CreateHuman ;
17374: LD_ADDR_VAR 0 4
17378: PUSH
17379: CALL_OW 44
17383: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17384: LD_VAR 0 4
17388: PPUSH
17389: LD_INT 78
17391: PPUSH
17392: LD_INT 2
17394: PPUSH
17395: LD_INT 4
17397: PPUSH
17398: LD_INT 0
17400: PPUSH
17401: CALL_OW 50
// for i = 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
17405: LD_ADDR_VAR 0 3
17409: PUSH
17410: DOUBLE
17411: LD_INT 1
17413: DEC
17414: ST_TO_ADDR
17415: LD_INT 3
17417: PUSH
17418: LD_INT 3
17420: PUSH
17421: LD_INT 4
17423: PUSH
17424: LD_INT 5
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: PUSH
17433: LD_OWVAR 67
17437: ARRAY
17438: PUSH
17439: FOR_TO
17440: IFFALSE 17529
// begin InitHC_All ( ) ;
17442: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17446: LD_INT 0
17448: PPUSH
17449: LD_INT 1
17451: PPUSH
17452: LD_INT 4
17454: PUSH
17455: LD_INT 5
17457: PUSH
17458: LD_INT 6
17460: PUSH
17461: LD_INT 6
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: PUSH
17470: LD_OWVAR 67
17474: ARRAY
17475: PPUSH
17476: CALL_OW 380
// un := CreateHuman ;
17480: LD_ADDR_VAR 0 1
17484: PUSH
17485: CALL_OW 44
17489: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17490: LD_VAR 0 1
17494: PPUSH
17495: LD_INT 78
17497: PPUSH
17498: LD_INT 2
17500: PPUSH
17501: LD_INT 4
17503: PPUSH
17504: LD_INT 0
17506: PPUSH
17507: CALL_OW 50
// tmp := tmp ^ un ;
17511: LD_ADDR_VAR 0 2
17515: PUSH
17516: LD_VAR 0 2
17520: PUSH
17521: LD_VAR 0 1
17525: ADD
17526: ST_TO_ADDR
// end ;
17527: GO 17439
17529: POP
17530: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17531: LD_VAR 0 2
17535: PPUSH
17536: LD_INT 49
17538: PPUSH
17539: LD_INT 3
17541: PPUSH
17542: CALL_OW 111
// wait ( 0 0$2 ) ;
17546: LD_INT 70
17548: PPUSH
17549: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17553: LD_VAR 0 4
17557: PPUSH
17558: LD_INT 49
17560: PPUSH
17561: LD_INT 3
17563: PPUSH
17564: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17568: LD_VAR 0 4
17572: PPUSH
17573: LD_INT 4
17575: PPUSH
17576: CALL_OW 227
// wait ( 0 0$10 ) ;
17580: LD_INT 350
17582: PPUSH
17583: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17587: LD_INT 35
17589: PPUSH
17590: CALL_OW 67
// for i in tmp do
17594: LD_ADDR_VAR 0 3
17598: PUSH
17599: LD_VAR 0 2
17603: PUSH
17604: FOR_IN
17605: IFFALSE 17673
// if not IsOk ( i ) then
17607: LD_VAR 0 3
17611: PPUSH
17612: CALL_OW 302
17616: NOT
17617: IFFALSE 17637
// tmp := tmp diff i else
17619: LD_ADDR_VAR 0 2
17623: PUSH
17624: LD_VAR 0 2
17628: PUSH
17629: LD_VAR 0 3
17633: DIFF
17634: ST_TO_ADDR
17635: GO 17671
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17637: LD_VAR 0 3
17641: PPUSH
17642: LD_INT 22
17644: PUSH
17645: LD_INT 1
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PPUSH
17652: CALL_OW 69
17656: PPUSH
17657: LD_VAR 0 3
17661: PPUSH
17662: CALL_OW 74
17666: PPUSH
17667: CALL_OW 115
17671: GO 17604
17673: POP
17674: POP
// until not tmp ;
17675: LD_VAR 0 2
17679: NOT
17680: IFFALSE 17587
// end ; end_of_file
17682: PPOPN 4
17684: END
// every 0 0$1 trigger startTimer = 1 do
17685: LD_EXP 30
17689: PUSH
17690: LD_INT 1
17692: EQUAL
17693: IFFALSE 17823
17695: GO 17697
17697: DISABLE
// begin enable ;
17698: ENABLE
// if timerStatus = 1 then
17699: LD_EXP 29
17703: PUSH
17704: LD_INT 1
17706: EQUAL
17707: IFFALSE 17740
// begin timeToSupport = timeToSupport - 0 0$01 ;
17709: LD_ADDR_EXP 28
17713: PUSH
17714: LD_EXP 28
17718: PUSH
17719: LD_INT 35
17721: MINUS
17722: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17723: LD_ADDR_OWVAR 47
17727: PUSH
17728: LD_STRING #Am04-1
17730: PUSH
17731: LD_EXP 28
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: ST_TO_ADDR
// end ; if timerStatus = 2 then
17740: LD_EXP 29
17744: PUSH
17745: LD_INT 2
17747: EQUAL
17748: IFFALSE 17781
// begin timeToSupport = timeToSupport - 0 0$01 ;
17750: LD_ADDR_EXP 28
17754: PUSH
17755: LD_EXP 28
17759: PUSH
17760: LD_INT 35
17762: MINUS
17763: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17764: LD_ADDR_OWVAR 47
17768: PUSH
17769: LD_STRING #Am04-2
17771: PUSH
17772: LD_EXP 28
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: ST_TO_ADDR
// end ; if timerStatus = 3 then
17781: LD_EXP 29
17785: PUSH
17786: LD_INT 3
17788: EQUAL
17789: IFFALSE 17805
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17791: LD_ADDR_EXP 27
17795: PUSH
17796: LD_EXP 27
17800: PUSH
17801: LD_INT 35
17803: MINUS
17804: ST_TO_ADDR
// if timerStatus = 4 then
17805: LD_EXP 29
17809: PUSH
17810: LD_INT 4
17812: EQUAL
17813: IFFALSE 17823
// display_strings =  ;
17815: LD_ADDR_OWVAR 47
17819: PUSH
17820: LD_STRING 
17822: ST_TO_ADDR
// end ; end_of_file
17823: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17824: LD_EXP 15
17828: PPUSH
17829: CALL_OW 301
17833: PUSH
17834: LD_INT 22
17836: PUSH
17837: LD_INT 3
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 21
17846: PUSH
17847: LD_INT 1
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PPUSH
17858: CALL_OW 69
17862: PUSH
17863: LD_INT 14
17865: PUSH
17866: LD_INT 13
17868: PUSH
17869: LD_INT 12
17871: PUSH
17872: LD_INT 11
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: PUSH
17881: LD_OWVAR 67
17885: ARRAY
17886: LESS
17887: AND
17888: IFFALSE 18474
17890: GO 17892
17892: DISABLE
17893: LD_INT 0
17895: PPUSH
17896: PPUSH
17897: PPUSH
// begin AIEnable = 0 ;
17898: LD_ADDR_EXP 37
17902: PUSH
17903: LD_INT 0
17905: ST_TO_ADDR
// escapeAvalaible = 1 ;
17906: LD_ADDR_EXP 40
17910: PUSH
17911: LD_INT 1
17913: ST_TO_ADDR
// Video ( true ) ;
17914: LD_INT 1
17916: PPUSH
17917: CALL 77261 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17921: LD_INT 3
17923: PPUSH
17924: LD_INT 1
17926: PPUSH
17927: LD_INT 1
17929: PPUSH
17930: LD_INT 0
17932: PPUSH
17933: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17937: LD_INT 6
17939: PPUSH
17940: LD_INT 1
17942: PPUSH
17943: LD_INT 1
17945: PPUSH
17946: LD_INT 0
17948: PPUSH
17949: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17953: LD_INT 5
17955: PPUSH
17956: LD_INT 1
17958: PPUSH
17959: LD_INT 1
17961: PPUSH
17962: LD_INT 0
17964: PPUSH
17965: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17969: LD_INT 3
17971: PPUSH
17972: LD_INT 1
17974: PPUSH
17975: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17979: LD_INT 97
17981: PPUSH
17982: LD_INT 91
17984: PPUSH
17985: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17989: LD_INT 22
17991: PUSH
17992: LD_INT 3
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 21
18001: PUSH
18002: LD_INT 1
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PPUSH
18013: CALL_OW 69
18017: PPUSH
18018: CALL_OW 121
// wait ( 0 0$01 ) ;
18022: LD_INT 35
18024: PPUSH
18025: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18029: LD_INT 22
18031: PUSH
18032: LD_INT 3
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 21
18041: PUSH
18042: LD_INT 1
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PPUSH
18053: CALL_OW 69
18057: PPUSH
18058: LD_INT 124
18060: PPUSH
18061: LD_INT 98
18063: PPUSH
18064: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18068: LD_INT 22
18070: PUSH
18071: LD_INT 5
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 21
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PPUSH
18092: CALL_OW 69
18096: PPUSH
18097: CALL_OW 121
// wait ( 0 0$01 ) ;
18101: LD_INT 35
18103: PPUSH
18104: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18108: LD_INT 22
18110: PUSH
18111: LD_INT 5
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 21
18120: PUSH
18121: LD_INT 1
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PPUSH
18132: CALL_OW 69
18136: PPUSH
18137: LD_INT 124
18139: PPUSH
18140: LD_INT 98
18142: PPUSH
18143: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18147: LD_INT 22
18149: PUSH
18150: LD_INT 6
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 21
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PPUSH
18171: CALL_OW 69
18175: PPUSH
18176: CALL_OW 121
// wait ( 0 0$01 ) ;
18180: LD_INT 35
18182: PPUSH
18183: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18187: LD_INT 22
18189: PUSH
18190: LD_INT 6
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 21
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PPUSH
18211: CALL_OW 69
18215: PPUSH
18216: LD_INT 124
18218: PPUSH
18219: LD_INT 98
18221: PPUSH
18222: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18226: LD_INT 22
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 21
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PPUSH
18250: CALL_OW 69
18254: PPUSH
18255: LD_INT 124
18257: PPUSH
18258: LD_INT 96
18260: PPUSH
18261: CALL_OW 114
// wait ( 0 0$1 ) ;
18265: LD_INT 35
18267: PPUSH
18268: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18272: LD_INT 124
18274: PPUSH
18275: LD_INT 96
18277: PPUSH
18278: CALL_OW 84
// p := 0 0$0 ;
18282: LD_ADDR_VAR 0 3
18286: PUSH
18287: LD_INT 0
18289: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18290: LD_ADDR_VAR 0 2
18294: PUSH
18295: LD_INT 2
18297: PUSH
18298: LD_INT 22
18300: PUSH
18301: LD_INT 3
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 22
18310: PUSH
18311: LD_INT 6
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 21
18325: PUSH
18326: LD_INT 1
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PPUSH
18337: CALL_OW 69
18341: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18342: LD_INT 35
18344: PPUSH
18345: CALL_OW 67
// p := p + 0 0$1 ;
18349: LD_ADDR_VAR 0 3
18353: PUSH
18354: LD_VAR 0 3
18358: PUSH
18359: LD_INT 35
18361: PLUS
18362: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18363: LD_VAR 0 2
18367: PPUSH
18368: LD_INT 5
18370: PPUSH
18371: CALL_OW 113
// for i in tmp do
18375: LD_ADDR_VAR 0 1
18379: PUSH
18380: LD_VAR 0 2
18384: PUSH
18385: FOR_IN
18386: IFFALSE 18413
// if IsInArea ( tmp , RussianEscape ) then
18388: LD_VAR 0 2
18392: PPUSH
18393: LD_INT 5
18395: PPUSH
18396: CALL_OW 308
18400: IFFALSE 18411
// RemoveUnit ( i ) ;
18402: LD_VAR 0 1
18406: PPUSH
18407: CALL_OW 64
18411: GO 18385
18413: POP
18414: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18415: LD_INT 23
18417: PUSH
18418: LD_INT 3
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 21
18427: PUSH
18428: LD_INT 1
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 24
18437: PUSH
18438: LD_INT 250
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: LIST
18449: PPUSH
18450: CALL_OW 69
18454: PUSH
18455: LD_INT 0
18457: EQUAL
18458: PUSH
18459: LD_VAR 0 3
18463: PUSH
18464: LD_INT 245
18466: GREATEREQUAL
18467: OR
18468: IFFALSE 18342
// FinishMission ;
18470: CALL 18477 0 0
// end ;
18474: PPOPN 3
18476: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18477: LD_INT 0
18479: PPUSH
18480: PPUSH
18481: PPUSH
18482: PPUSH
18483: PPUSH
// if not vehicleProduceCounter then
18484: LD_EXP 42
18488: NOT
18489: IFFALSE 18498
// SetAchievement ( ACH_INFANTRY ) ;
18491: LD_STRING ACH_INFANTRY
18493: PPUSH
18494: CALL_OW 543
// if tick <= 20 20$00 then
18498: LD_OWVAR 1
18502: PUSH
18503: LD_INT 42000
18505: LESSEQUAL
18506: IFFALSE 18522
// begin wait ( 3 ) ;
18508: LD_INT 3
18510: PPUSH
18511: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18515: LD_STRING ACH_ASPEED_4
18517: PPUSH
18518: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18522: LD_INT 22
18524: PPUSH
18525: CALL 19166 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18529: LD_INT 69
18531: PPUSH
18532: LD_INT 1
18534: PPUSH
18535: CALL_OW 321
18539: PPUSH
18540: LD_STRING GatlingInGamma
18542: PPUSH
18543: CALL_OW 39
// m1 := false ;
18547: LD_ADDR_VAR 0 3
18551: PUSH
18552: LD_INT 0
18554: ST_TO_ADDR
// m2 := false ;
18555: LD_ADDR_VAR 0 4
18559: PUSH
18560: LD_INT 0
18562: ST_TO_ADDR
// m3 := false ;
18563: LD_ADDR_VAR 0 5
18567: PUSH
18568: LD_INT 0
18570: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18571: LD_EXP 34
18575: PUSH
18576: LD_INT 1
18578: EQUAL
18579: PUSH
18580: LD_EXP 35
18584: PUSH
18585: LD_INT 1
18587: EQUAL
18588: AND
18589: IFFALSE 18611
// begin AddMedal ( oil , 1 ) ;
18591: LD_STRING oil
18593: PPUSH
18594: LD_INT 1
18596: PPUSH
18597: CALL_OW 101
// m1 := true ;
18601: LD_ADDR_VAR 0 3
18605: PUSH
18606: LD_INT 1
18608: ST_TO_ADDR
// end else
18609: GO 18704
// begin if buildOil = 1 and buildPower = 0 then
18611: LD_EXP 34
18615: PUSH
18616: LD_INT 1
18618: EQUAL
18619: PUSH
18620: LD_EXP 35
18624: PUSH
18625: LD_INT 0
18627: EQUAL
18628: AND
18629: IFFALSE 18642
// AddMedal ( oil , - 1 ) ;
18631: LD_STRING oil
18633: PPUSH
18634: LD_INT 1
18636: NEG
18637: PPUSH
18638: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18642: LD_EXP 34
18646: PUSH
18647: LD_INT 0
18649: EQUAL
18650: PUSH
18651: LD_EXP 35
18655: PUSH
18656: LD_INT 1
18658: EQUAL
18659: AND
18660: IFFALSE 18673
// AddMedal ( oil , - 2 ) ;
18662: LD_STRING oil
18664: PPUSH
18665: LD_INT 2
18667: NEG
18668: PPUSH
18669: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18673: LD_EXP 34
18677: PUSH
18678: LD_INT 0
18680: EQUAL
18681: PUSH
18682: LD_EXP 35
18686: PUSH
18687: LD_INT 0
18689: EQUAL
18690: AND
18691: IFFALSE 18704
// AddMedal ( oil , - 3 ) ;
18693: LD_STRING oil
18695: PPUSH
18696: LD_INT 3
18698: NEG
18699: PPUSH
18700: CALL_OW 101
// end ; if lostCounter > 3 then
18704: LD_EXP 38
18708: PUSH
18709: LD_INT 3
18711: GREATER
18712: IFFALSE 18727
// AddMedal ( deaths , - 1 ) else
18714: LD_STRING deaths
18716: PPUSH
18717: LD_INT 1
18719: NEG
18720: PPUSH
18721: CALL_OW 101
18725: GO 18745
// begin AddMedal ( deaths , 1 ) ;
18727: LD_STRING deaths
18729: PPUSH
18730: LD_INT 1
18732: PPUSH
18733: CALL_OW 101
// m2 := true ;
18737: LD_ADDR_VAR 0 4
18741: PUSH
18742: LD_INT 1
18744: ST_TO_ADDR
// end ; if honor = 1 then
18745: LD_EXP 39
18749: PUSH
18750: LD_INT 1
18752: EQUAL
18753: IFFALSE 18775
// begin AddMedal ( honour , 1 ) ;
18755: LD_STRING honour
18757: PPUSH
18758: LD_INT 1
18760: PPUSH
18761: CALL_OW 101
// m3 := true ;
18765: LD_ADDR_VAR 0 5
18769: PUSH
18770: LD_INT 1
18772: ST_TO_ADDR
// end else
18773: GO 18786
// AddMedal ( honour , - 1 ) ;
18775: LD_STRING honour
18777: PPUSH
18778: LD_INT 1
18780: NEG
18781: PPUSH
18782: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18786: LD_VAR 0 3
18790: PUSH
18791: LD_VAR 0 4
18795: AND
18796: PUSH
18797: LD_VAR 0 5
18801: AND
18802: PUSH
18803: LD_OWVAR 67
18807: PUSH
18808: LD_INT 3
18810: GREATEREQUAL
18811: AND
18812: IFFALSE 18824
// SetAchievementEX ( ACH_AMER , 4 ) ;
18814: LD_STRING ACH_AMER
18816: PPUSH
18817: LD_INT 4
18819: PPUSH
18820: CALL_OW 564
// GiveMedals ( Main ) ;
18824: LD_STRING Main
18826: PPUSH
18827: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18831: LD_INT 22
18833: PUSH
18834: LD_INT 1
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 23
18843: PUSH
18844: LD_INT 1
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 21
18853: PUSH
18854: LD_INT 1
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: LIST
18865: PPUSH
18866: CALL_OW 69
18870: PPUSH
18871: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18875: LD_EXP 1
18879: PPUSH
18880: LD_EXP 48
18884: PUSH
18885: LD_STRING JMM
18887: STR
18888: PPUSH
18889: CALL_OW 38
// if IsOK ( Bobby ) then
18893: LD_EXP 2
18897: PPUSH
18898: CALL_OW 302
18902: IFFALSE 18922
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18904: LD_EXP 2
18908: PPUSH
18909: LD_EXP 48
18913: PUSH
18914: LD_STRING Bobby
18916: STR
18917: PPUSH
18918: CALL_OW 38
// if IsOK ( Cyrus ) then
18922: LD_EXP 3
18926: PPUSH
18927: CALL_OW 302
18931: IFFALSE 18951
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18933: LD_EXP 3
18937: PPUSH
18938: LD_EXP 48
18942: PUSH
18943: LD_STRING Cyrus
18945: STR
18946: PPUSH
18947: CALL_OW 38
// if IsOK ( Lisa ) then
18951: LD_EXP 4
18955: PPUSH
18956: CALL_OW 302
18960: IFFALSE 18980
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18962: LD_EXP 4
18966: PPUSH
18967: LD_EXP 48
18971: PUSH
18972: LD_STRING Lisa
18974: STR
18975: PPUSH
18976: CALL_OW 38
// if IsOK ( Brown ) then
18980: LD_EXP 7
18984: PPUSH
18985: CALL_OW 302
18989: IFFALSE 19009
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18991: LD_EXP 7
18995: PPUSH
18996: LD_EXP 48
19000: PUSH
19001: LD_STRING Brown
19003: STR
19004: PPUSH
19005: CALL_OW 38
// if not IsDead ( Donaldson ) then
19009: LD_EXP 13
19013: PPUSH
19014: CALL_OW 301
19018: NOT
19019: IFFALSE 19039
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19021: LD_EXP 13
19025: PPUSH
19026: LD_EXP 48
19030: PUSH
19031: LD_STRING Donaldson
19033: STR
19034: PPUSH
19035: CALL_OW 38
// if not IsDead ( Frank ) then
19039: LD_EXP 5
19043: PPUSH
19044: CALL_OW 301
19048: NOT
19049: IFFALSE 19069
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19051: LD_EXP 5
19055: PPUSH
19056: LD_EXP 48
19060: PUSH
19061: LD_STRING Frank
19063: STR
19064: PPUSH
19065: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19069: LD_INT 50
19071: PUSH
19072: EMPTY
19073: LIST
19074: PUSH
19075: LD_INT 22
19077: PUSH
19078: LD_INT 1
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 21
19087: PUSH
19088: LD_INT 1
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: PPUSH
19100: CALL_OW 69
19104: PUSH
19105: LD_EXP 1
19109: PUSH
19110: LD_EXP 2
19114: PUSH
19115: LD_EXP 3
19119: PUSH
19120: LD_EXP 4
19124: PUSH
19125: LD_EXP 7
19129: PUSH
19130: LD_EXP 13
19134: PUSH
19135: LD_EXP 5
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: DIFF
19149: PPUSH
19150: LD_STRING 04_other_survivors
19152: PPUSH
19153: CALL_OW 38
// YouWin ;
19157: CALL_OW 103
// end ;
19161: LD_VAR 0 1
19165: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19166: LD_INT 0
19168: PPUSH
19169: PPUSH
19170: PPUSH
19171: PPUSH
// gammaBase = [ ] ;
19172: LD_ADDR_VAR 0 4
19176: PUSH
19177: EMPTY
19178: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19179: LD_ADDR_VAR 0 5
19183: PUSH
19184: LD_VAR 0 1
19188: PPUSH
19189: LD_INT 22
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 21
19201: PUSH
19202: LD_INT 3
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PPUSH
19213: CALL_OW 70
19217: ST_TO_ADDR
// for i in buildings do
19218: LD_ADDR_VAR 0 3
19222: PUSH
19223: LD_VAR 0 5
19227: PUSH
19228: FOR_IN
19229: IFFALSE 19566
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19231: LD_VAR 0 3
19235: PPUSH
19236: CALL_OW 266
19240: PUSH
19241: LD_INT 6
19243: PUSH
19244: LD_INT 7
19246: PUSH
19247: LD_INT 8
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: LIST
19254: IN
19255: IFFALSE 19369
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19257: LD_ADDR_VAR 0 4
19261: PUSH
19262: LD_VAR 0 4
19266: PUSH
19267: LD_VAR 0 3
19271: PPUSH
19272: CALL_OW 266
19276: PUSH
19277: LD_VAR 0 3
19281: PPUSH
19282: CALL_OW 250
19286: PUSH
19287: LD_VAR 0 3
19291: PPUSH
19292: CALL_OW 251
19296: PUSH
19297: LD_VAR 0 3
19301: PPUSH
19302: CALL_OW 254
19306: PUSH
19307: LD_VAR 0 3
19311: PPUSH
19312: CALL_OW 267
19316: PUSH
19317: LD_VAR 0 3
19321: PPUSH
19322: CALL_OW 248
19326: PUSH
19327: LD_VAR 0 3
19331: PPUSH
19332: LD_INT 1
19334: PPUSH
19335: CALL_OW 268
19339: PUSH
19340: LD_VAR 0 3
19344: PPUSH
19345: LD_INT 2
19347: PPUSH
19348: CALL_OW 268
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: PUSH
19363: EMPTY
19364: LIST
19365: ADD
19366: ST_TO_ADDR
19367: GO 19564
// if GetBType ( i ) in [ b_bunker ] then
19369: LD_VAR 0 3
19373: PPUSH
19374: CALL_OW 266
19378: PUSH
19379: LD_INT 32
19381: PUSH
19382: EMPTY
19383: LIST
19384: IN
19385: IFFALSE 19482
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19387: LD_ADDR_VAR 0 4
19391: PUSH
19392: LD_VAR 0 4
19396: PUSH
19397: LD_VAR 0 3
19401: PPUSH
19402: CALL_OW 266
19406: PUSH
19407: LD_VAR 0 3
19411: PPUSH
19412: CALL_OW 250
19416: PUSH
19417: LD_VAR 0 3
19421: PPUSH
19422: CALL_OW 251
19426: PUSH
19427: LD_VAR 0 3
19431: PPUSH
19432: CALL_OW 254
19436: PUSH
19437: LD_VAR 0 3
19441: PPUSH
19442: CALL_OW 267
19446: PUSH
19447: LD_VAR 0 3
19451: PPUSH
19452: CALL_OW 248
19456: PUSH
19457: LD_VAR 0 3
19461: PPUSH
19462: CALL_OW 269
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: PUSH
19476: EMPTY
19477: LIST
19478: ADD
19479: ST_TO_ADDR
19480: GO 19564
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19482: LD_ADDR_VAR 0 4
19486: PUSH
19487: LD_VAR 0 4
19491: PUSH
19492: LD_VAR 0 3
19496: PPUSH
19497: CALL_OW 266
19501: PUSH
19502: LD_VAR 0 3
19506: PPUSH
19507: CALL_OW 250
19511: PUSH
19512: LD_VAR 0 3
19516: PPUSH
19517: CALL_OW 251
19521: PUSH
19522: LD_VAR 0 3
19526: PPUSH
19527: CALL_OW 254
19531: PUSH
19532: LD_VAR 0 3
19536: PPUSH
19537: CALL_OW 267
19541: PUSH
19542: LD_VAR 0 3
19546: PPUSH
19547: CALL_OW 248
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: PUSH
19560: EMPTY
19561: LIST
19562: ADD
19563: ST_TO_ADDR
// end ;
19564: GO 19228
19566: POP
19567: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19568: LD_VAR 0 4
19572: PPUSH
19573: LD_STRING GammaBase
19575: PPUSH
19576: CALL_OW 39
// end ; end_of_file
19580: LD_VAR 0 2
19584: RET
// every 1 1$15 do
19585: GO 19587
19587: DISABLE
// begin if supply <= 13 and supply > 7 then
19588: LD_EXP 36
19592: PUSH
19593: LD_INT 13
19595: LESSEQUAL
19596: PUSH
19597: LD_EXP 36
19601: PUSH
19602: LD_INT 7
19604: GREATER
19605: AND
19606: IFFALSE 19629
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19608: LD_INT 3
19610: PPUSH
19611: LD_INT 5
19613: PPUSH
19614: CALL_OW 12
19618: PPUSH
19619: LD_INT 18
19621: PPUSH
19622: LD_INT 1
19624: PPUSH
19625: CALL_OW 55
// if supply <= 7 and supply > 4 then
19629: LD_EXP 36
19633: PUSH
19634: LD_INT 7
19636: LESSEQUAL
19637: PUSH
19638: LD_EXP 36
19642: PUSH
19643: LD_INT 4
19645: GREATER
19646: AND
19647: IFFALSE 19670
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19649: LD_INT 3
19651: PPUSH
19652: LD_INT 5
19654: PPUSH
19655: CALL_OW 12
19659: PPUSH
19660: LD_INT 19
19662: PPUSH
19663: LD_INT 1
19665: PPUSH
19666: CALL_OW 55
// if supply <= 4 and supply > 0 then
19670: LD_EXP 36
19674: PUSH
19675: LD_INT 4
19677: LESSEQUAL
19678: PUSH
19679: LD_EXP 36
19683: PUSH
19684: LD_INT 0
19686: GREATER
19687: AND
19688: IFFALSE 19711
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19690: LD_INT 3
19692: PPUSH
19693: LD_INT 5
19695: PPUSH
19696: CALL_OW 12
19700: PPUSH
19701: LD_INT 20
19703: PPUSH
19704: LD_INT 1
19706: PPUSH
19707: CALL_OW 55
// if supply then
19711: LD_EXP 36
19715: IFFALSE 19732
// begin supply = supply - 1 ;
19717: LD_ADDR_EXP 36
19721: PUSH
19722: LD_EXP 36
19726: PUSH
19727: LD_INT 1
19729: MINUS
19730: ST_TO_ADDR
// enable ;
19731: ENABLE
// end ; end ; end_of_file end_of_file
19732: END
// every 0 0$1 do
19733: GO 19735
19735: DISABLE
// begin enable ;
19736: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19737: LD_STRING updateTimer(
19739: PUSH
19740: LD_OWVAR 1
19744: STR
19745: PUSH
19746: LD_STRING );
19748: STR
19749: PPUSH
19750: CALL_OW 559
// end ;
19754: END
// export function SOS_MapStart ( ) ; begin
19755: LD_INT 0
19757: PPUSH
// if streamModeActive then
19758: LD_EXP 51
19762: IFFALSE 19771
// DefineStreamItems ( true ) ;
19764: LD_INT 1
19766: PPUSH
19767: CALL 21575 0 1
// UpdateLuaVariables ( ) ;
19771: CALL 19788 0 0
// UpdateFactoryWaypoints ( ) ;
19775: CALL 34436 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19779: CALL 34693 0 0
// end ;
19783: LD_VAR 0 1
19787: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
19788: LD_INT 0
19790: PPUSH
// if not globalGameSaveCounter then
19791: LD_EXP 50
19795: NOT
19796: IFFALSE 19807
// ToLua ( setGameSaveCounter(0) ) else
19798: LD_STRING setGameSaveCounter(0)
19800: PPUSH
19801: CALL_OW 559
19805: GO 19839
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19807: LD_ADDR_EXP 50
19811: PUSH
19812: LD_EXP 50
19816: PPUSH
19817: CALL 78650 0 1
19821: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19822: LD_STRING setGameSaveCounter(
19824: PUSH
19825: LD_EXP 50
19829: STR
19830: PUSH
19831: LD_STRING )
19833: STR
19834: PPUSH
19835: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19839: LD_STRING setGameDifficulty(
19841: PUSH
19842: LD_OWVAR 67
19846: STR
19847: PUSH
19848: LD_STRING )
19850: STR
19851: PPUSH
19852: CALL_OW 559
// end ;
19856: LD_VAR 0 1
19860: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19861: LD_INT 0
19863: PPUSH
// if p2 = stream_mode then
19864: LD_VAR 0 2
19868: PUSH
19869: LD_INT 100
19871: EQUAL
19872: IFFALSE 20875
// begin if not StreamModeActive then
19874: LD_EXP 51
19878: NOT
19879: IFFALSE 19889
// StreamModeActive := true ;
19881: LD_ADDR_EXP 51
19885: PUSH
19886: LD_INT 1
19888: ST_TO_ADDR
// if p3 = 0 then
19889: LD_VAR 0 3
19893: PUSH
19894: LD_INT 0
19896: EQUAL
19897: IFFALSE 19903
// InitStreamMode ;
19899: CALL 21111 0 0
// if p3 = 1 then
19903: LD_VAR 0 3
19907: PUSH
19908: LD_INT 1
19910: EQUAL
19911: IFFALSE 19921
// sRocket := true ;
19913: LD_ADDR_EXP 56
19917: PUSH
19918: LD_INT 1
19920: ST_TO_ADDR
// if p3 = 2 then
19921: LD_VAR 0 3
19925: PUSH
19926: LD_INT 2
19928: EQUAL
19929: IFFALSE 19939
// sSpeed := true ;
19931: LD_ADDR_EXP 55
19935: PUSH
19936: LD_INT 1
19938: ST_TO_ADDR
// if p3 = 3 then
19939: LD_VAR 0 3
19943: PUSH
19944: LD_INT 3
19946: EQUAL
19947: IFFALSE 19957
// sEngine := true ;
19949: LD_ADDR_EXP 57
19953: PUSH
19954: LD_INT 1
19956: ST_TO_ADDR
// if p3 = 4 then
19957: LD_VAR 0 3
19961: PUSH
19962: LD_INT 4
19964: EQUAL
19965: IFFALSE 19975
// sSpec := true ;
19967: LD_ADDR_EXP 54
19971: PUSH
19972: LD_INT 1
19974: ST_TO_ADDR
// if p3 = 5 then
19975: LD_VAR 0 3
19979: PUSH
19980: LD_INT 5
19982: EQUAL
19983: IFFALSE 19993
// sLevel := true ;
19985: LD_ADDR_EXP 58
19989: PUSH
19990: LD_INT 1
19992: ST_TO_ADDR
// if p3 = 6 then
19993: LD_VAR 0 3
19997: PUSH
19998: LD_INT 6
20000: EQUAL
20001: IFFALSE 20011
// sArmoury := true ;
20003: LD_ADDR_EXP 59
20007: PUSH
20008: LD_INT 1
20010: ST_TO_ADDR
// if p3 = 7 then
20011: LD_VAR 0 3
20015: PUSH
20016: LD_INT 7
20018: EQUAL
20019: IFFALSE 20029
// sRadar := true ;
20021: LD_ADDR_EXP 60
20025: PUSH
20026: LD_INT 1
20028: ST_TO_ADDR
// if p3 = 8 then
20029: LD_VAR 0 3
20033: PUSH
20034: LD_INT 8
20036: EQUAL
20037: IFFALSE 20047
// sBunker := true ;
20039: LD_ADDR_EXP 61
20043: PUSH
20044: LD_INT 1
20046: ST_TO_ADDR
// if p3 = 9 then
20047: LD_VAR 0 3
20051: PUSH
20052: LD_INT 9
20054: EQUAL
20055: IFFALSE 20065
// sHack := true ;
20057: LD_ADDR_EXP 62
20061: PUSH
20062: LD_INT 1
20064: ST_TO_ADDR
// if p3 = 10 then
20065: LD_VAR 0 3
20069: PUSH
20070: LD_INT 10
20072: EQUAL
20073: IFFALSE 20083
// sFire := true ;
20075: LD_ADDR_EXP 63
20079: PUSH
20080: LD_INT 1
20082: ST_TO_ADDR
// if p3 = 11 then
20083: LD_VAR 0 3
20087: PUSH
20088: LD_INT 11
20090: EQUAL
20091: IFFALSE 20101
// sRefresh := true ;
20093: LD_ADDR_EXP 64
20097: PUSH
20098: LD_INT 1
20100: ST_TO_ADDR
// if p3 = 12 then
20101: LD_VAR 0 3
20105: PUSH
20106: LD_INT 12
20108: EQUAL
20109: IFFALSE 20119
// sExp := true ;
20111: LD_ADDR_EXP 65
20115: PUSH
20116: LD_INT 1
20118: ST_TO_ADDR
// if p3 = 13 then
20119: LD_VAR 0 3
20123: PUSH
20124: LD_INT 13
20126: EQUAL
20127: IFFALSE 20137
// sDepot := true ;
20129: LD_ADDR_EXP 66
20133: PUSH
20134: LD_INT 1
20136: ST_TO_ADDR
// if p3 = 14 then
20137: LD_VAR 0 3
20141: PUSH
20142: LD_INT 14
20144: EQUAL
20145: IFFALSE 20155
// sFlag := true ;
20147: LD_ADDR_EXP 67
20151: PUSH
20152: LD_INT 1
20154: ST_TO_ADDR
// if p3 = 15 then
20155: LD_VAR 0 3
20159: PUSH
20160: LD_INT 15
20162: EQUAL
20163: IFFALSE 20173
// sKamikadze := true ;
20165: LD_ADDR_EXP 75
20169: PUSH
20170: LD_INT 1
20172: ST_TO_ADDR
// if p3 = 16 then
20173: LD_VAR 0 3
20177: PUSH
20178: LD_INT 16
20180: EQUAL
20181: IFFALSE 20191
// sTroll := true ;
20183: LD_ADDR_EXP 76
20187: PUSH
20188: LD_INT 1
20190: ST_TO_ADDR
// if p3 = 17 then
20191: LD_VAR 0 3
20195: PUSH
20196: LD_INT 17
20198: EQUAL
20199: IFFALSE 20209
// sSlow := true ;
20201: LD_ADDR_EXP 77
20205: PUSH
20206: LD_INT 1
20208: ST_TO_ADDR
// if p3 = 18 then
20209: LD_VAR 0 3
20213: PUSH
20214: LD_INT 18
20216: EQUAL
20217: IFFALSE 20227
// sLack := true ;
20219: LD_ADDR_EXP 78
20223: PUSH
20224: LD_INT 1
20226: ST_TO_ADDR
// if p3 = 19 then
20227: LD_VAR 0 3
20231: PUSH
20232: LD_INT 19
20234: EQUAL
20235: IFFALSE 20245
// sTank := true ;
20237: LD_ADDR_EXP 80
20241: PUSH
20242: LD_INT 1
20244: ST_TO_ADDR
// if p3 = 20 then
20245: LD_VAR 0 3
20249: PUSH
20250: LD_INT 20
20252: EQUAL
20253: IFFALSE 20263
// sRemote := true ;
20255: LD_ADDR_EXP 81
20259: PUSH
20260: LD_INT 1
20262: ST_TO_ADDR
// if p3 = 21 then
20263: LD_VAR 0 3
20267: PUSH
20268: LD_INT 21
20270: EQUAL
20271: IFFALSE 20281
// sPowell := true ;
20273: LD_ADDR_EXP 82
20277: PUSH
20278: LD_INT 1
20280: ST_TO_ADDR
// if p3 = 22 then
20281: LD_VAR 0 3
20285: PUSH
20286: LD_INT 22
20288: EQUAL
20289: IFFALSE 20299
// sTeleport := true ;
20291: LD_ADDR_EXP 85
20295: PUSH
20296: LD_INT 1
20298: ST_TO_ADDR
// if p3 = 23 then
20299: LD_VAR 0 3
20303: PUSH
20304: LD_INT 23
20306: EQUAL
20307: IFFALSE 20317
// sOilTower := true ;
20309: LD_ADDR_EXP 87
20313: PUSH
20314: LD_INT 1
20316: ST_TO_ADDR
// if p3 = 24 then
20317: LD_VAR 0 3
20321: PUSH
20322: LD_INT 24
20324: EQUAL
20325: IFFALSE 20335
// sShovel := true ;
20327: LD_ADDR_EXP 88
20331: PUSH
20332: LD_INT 1
20334: ST_TO_ADDR
// if p3 = 25 then
20335: LD_VAR 0 3
20339: PUSH
20340: LD_INT 25
20342: EQUAL
20343: IFFALSE 20353
// sSheik := true ;
20345: LD_ADDR_EXP 89
20349: PUSH
20350: LD_INT 1
20352: ST_TO_ADDR
// if p3 = 26 then
20353: LD_VAR 0 3
20357: PUSH
20358: LD_INT 26
20360: EQUAL
20361: IFFALSE 20371
// sEarthquake := true ;
20363: LD_ADDR_EXP 91
20367: PUSH
20368: LD_INT 1
20370: ST_TO_ADDR
// if p3 = 27 then
20371: LD_VAR 0 3
20375: PUSH
20376: LD_INT 27
20378: EQUAL
20379: IFFALSE 20389
// sAI := true ;
20381: LD_ADDR_EXP 92
20385: PUSH
20386: LD_INT 1
20388: ST_TO_ADDR
// if p3 = 28 then
20389: LD_VAR 0 3
20393: PUSH
20394: LD_INT 28
20396: EQUAL
20397: IFFALSE 20407
// sCargo := true ;
20399: LD_ADDR_EXP 95
20403: PUSH
20404: LD_INT 1
20406: ST_TO_ADDR
// if p3 = 29 then
20407: LD_VAR 0 3
20411: PUSH
20412: LD_INT 29
20414: EQUAL
20415: IFFALSE 20425
// sDLaser := true ;
20417: LD_ADDR_EXP 96
20421: PUSH
20422: LD_INT 1
20424: ST_TO_ADDR
// if p3 = 30 then
20425: LD_VAR 0 3
20429: PUSH
20430: LD_INT 30
20432: EQUAL
20433: IFFALSE 20443
// sExchange := true ;
20435: LD_ADDR_EXP 97
20439: PUSH
20440: LD_INT 1
20442: ST_TO_ADDR
// if p3 = 31 then
20443: LD_VAR 0 3
20447: PUSH
20448: LD_INT 31
20450: EQUAL
20451: IFFALSE 20461
// sFac := true ;
20453: LD_ADDR_EXP 98
20457: PUSH
20458: LD_INT 1
20460: ST_TO_ADDR
// if p3 = 32 then
20461: LD_VAR 0 3
20465: PUSH
20466: LD_INT 32
20468: EQUAL
20469: IFFALSE 20479
// sPower := true ;
20471: LD_ADDR_EXP 99
20475: PUSH
20476: LD_INT 1
20478: ST_TO_ADDR
// if p3 = 33 then
20479: LD_VAR 0 3
20483: PUSH
20484: LD_INT 33
20486: EQUAL
20487: IFFALSE 20497
// sRandom := true ;
20489: LD_ADDR_EXP 100
20493: PUSH
20494: LD_INT 1
20496: ST_TO_ADDR
// if p3 = 34 then
20497: LD_VAR 0 3
20501: PUSH
20502: LD_INT 34
20504: EQUAL
20505: IFFALSE 20515
// sShield := true ;
20507: LD_ADDR_EXP 101
20511: PUSH
20512: LD_INT 1
20514: ST_TO_ADDR
// if p3 = 35 then
20515: LD_VAR 0 3
20519: PUSH
20520: LD_INT 35
20522: EQUAL
20523: IFFALSE 20533
// sTime := true ;
20525: LD_ADDR_EXP 102
20529: PUSH
20530: LD_INT 1
20532: ST_TO_ADDR
// if p3 = 36 then
20533: LD_VAR 0 3
20537: PUSH
20538: LD_INT 36
20540: EQUAL
20541: IFFALSE 20551
// sTools := true ;
20543: LD_ADDR_EXP 103
20547: PUSH
20548: LD_INT 1
20550: ST_TO_ADDR
// if p3 = 101 then
20551: LD_VAR 0 3
20555: PUSH
20556: LD_INT 101
20558: EQUAL
20559: IFFALSE 20569
// sSold := true ;
20561: LD_ADDR_EXP 68
20565: PUSH
20566: LD_INT 1
20568: ST_TO_ADDR
// if p3 = 102 then
20569: LD_VAR 0 3
20573: PUSH
20574: LD_INT 102
20576: EQUAL
20577: IFFALSE 20587
// sDiff := true ;
20579: LD_ADDR_EXP 69
20583: PUSH
20584: LD_INT 1
20586: ST_TO_ADDR
// if p3 = 103 then
20587: LD_VAR 0 3
20591: PUSH
20592: LD_INT 103
20594: EQUAL
20595: IFFALSE 20605
// sFog := true ;
20597: LD_ADDR_EXP 72
20601: PUSH
20602: LD_INT 1
20604: ST_TO_ADDR
// if p3 = 104 then
20605: LD_VAR 0 3
20609: PUSH
20610: LD_INT 104
20612: EQUAL
20613: IFFALSE 20623
// sReset := true ;
20615: LD_ADDR_EXP 73
20619: PUSH
20620: LD_INT 1
20622: ST_TO_ADDR
// if p3 = 105 then
20623: LD_VAR 0 3
20627: PUSH
20628: LD_INT 105
20630: EQUAL
20631: IFFALSE 20641
// sSun := true ;
20633: LD_ADDR_EXP 74
20637: PUSH
20638: LD_INT 1
20640: ST_TO_ADDR
// if p3 = 106 then
20641: LD_VAR 0 3
20645: PUSH
20646: LD_INT 106
20648: EQUAL
20649: IFFALSE 20659
// sTiger := true ;
20651: LD_ADDR_EXP 70
20655: PUSH
20656: LD_INT 1
20658: ST_TO_ADDR
// if p3 = 107 then
20659: LD_VAR 0 3
20663: PUSH
20664: LD_INT 107
20666: EQUAL
20667: IFFALSE 20677
// sBomb := true ;
20669: LD_ADDR_EXP 71
20673: PUSH
20674: LD_INT 1
20676: ST_TO_ADDR
// if p3 = 108 then
20677: LD_VAR 0 3
20681: PUSH
20682: LD_INT 108
20684: EQUAL
20685: IFFALSE 20695
// sWound := true ;
20687: LD_ADDR_EXP 79
20691: PUSH
20692: LD_INT 1
20694: ST_TO_ADDR
// if p3 = 109 then
20695: LD_VAR 0 3
20699: PUSH
20700: LD_INT 109
20702: EQUAL
20703: IFFALSE 20713
// sBetray := true ;
20705: LD_ADDR_EXP 83
20709: PUSH
20710: LD_INT 1
20712: ST_TO_ADDR
// if p3 = 110 then
20713: LD_VAR 0 3
20717: PUSH
20718: LD_INT 110
20720: EQUAL
20721: IFFALSE 20731
// sContamin := true ;
20723: LD_ADDR_EXP 84
20727: PUSH
20728: LD_INT 1
20730: ST_TO_ADDR
// if p3 = 111 then
20731: LD_VAR 0 3
20735: PUSH
20736: LD_INT 111
20738: EQUAL
20739: IFFALSE 20749
// sOil := true ;
20741: LD_ADDR_EXP 86
20745: PUSH
20746: LD_INT 1
20748: ST_TO_ADDR
// if p3 = 112 then
20749: LD_VAR 0 3
20753: PUSH
20754: LD_INT 112
20756: EQUAL
20757: IFFALSE 20767
// sStu := true ;
20759: LD_ADDR_EXP 90
20763: PUSH
20764: LD_INT 1
20766: ST_TO_ADDR
// if p3 = 113 then
20767: LD_VAR 0 3
20771: PUSH
20772: LD_INT 113
20774: EQUAL
20775: IFFALSE 20785
// sBazooka := true ;
20777: LD_ADDR_EXP 93
20781: PUSH
20782: LD_INT 1
20784: ST_TO_ADDR
// if p3 = 114 then
20785: LD_VAR 0 3
20789: PUSH
20790: LD_INT 114
20792: EQUAL
20793: IFFALSE 20803
// sMortar := true ;
20795: LD_ADDR_EXP 94
20799: PUSH
20800: LD_INT 1
20802: ST_TO_ADDR
// if p3 = 115 then
20803: LD_VAR 0 3
20807: PUSH
20808: LD_INT 115
20810: EQUAL
20811: IFFALSE 20821
// sRanger := true ;
20813: LD_ADDR_EXP 104
20817: PUSH
20818: LD_INT 1
20820: ST_TO_ADDR
// if p3 = 116 then
20821: LD_VAR 0 3
20825: PUSH
20826: LD_INT 116
20828: EQUAL
20829: IFFALSE 20839
// sComputer := true ;
20831: LD_ADDR_EXP 105
20835: PUSH
20836: LD_INT 1
20838: ST_TO_ADDR
// if p3 = 117 then
20839: LD_VAR 0 3
20843: PUSH
20844: LD_INT 117
20846: EQUAL
20847: IFFALSE 20857
// s30 := true ;
20849: LD_ADDR_EXP 106
20853: PUSH
20854: LD_INT 1
20856: ST_TO_ADDR
// if p3 = 118 then
20857: LD_VAR 0 3
20861: PUSH
20862: LD_INT 118
20864: EQUAL
20865: IFFALSE 20875
// s60 := true ;
20867: LD_ADDR_EXP 107
20871: PUSH
20872: LD_INT 1
20874: ST_TO_ADDR
// end ; if p2 = hack_mode then
20875: LD_VAR 0 2
20879: PUSH
20880: LD_INT 101
20882: EQUAL
20883: IFFALSE 21011
// begin case p3 of 1 :
20885: LD_VAR 0 3
20889: PUSH
20890: LD_INT 1
20892: DOUBLE
20893: EQUAL
20894: IFTRUE 20898
20896: GO 20905
20898: POP
// hHackUnlimitedResources ; 2 :
20899: CALL 33182 0 0
20903: GO 21011
20905: LD_INT 2
20907: DOUBLE
20908: EQUAL
20909: IFTRUE 20913
20911: GO 20920
20913: POP
// hHackSetLevel10 ; 3 :
20914: CALL 33315 0 0
20918: GO 21011
20920: LD_INT 3
20922: DOUBLE
20923: EQUAL
20924: IFTRUE 20928
20926: GO 20935
20928: POP
// hHackSetLevel10YourUnits ; 4 :
20929: CALL 33400 0 0
20933: GO 21011
20935: LD_INT 4
20937: DOUBLE
20938: EQUAL
20939: IFTRUE 20943
20941: GO 20950
20943: POP
// hHackInvincible ; 5 :
20944: CALL 33848 0 0
20948: GO 21011
20950: LD_INT 5
20952: DOUBLE
20953: EQUAL
20954: IFTRUE 20958
20956: GO 20965
20958: POP
// hHackInvisible ; 6 :
20959: CALL 33959 0 0
20963: GO 21011
20965: LD_INT 6
20967: DOUBLE
20968: EQUAL
20969: IFTRUE 20973
20971: GO 20980
20973: POP
// hHackChangeYourSide ; 7 :
20974: CALL 34016 0 0
20978: GO 21011
20980: LD_INT 7
20982: DOUBLE
20983: EQUAL
20984: IFTRUE 20988
20986: GO 20995
20988: POP
// hHackChangeUnitSide ; 8 :
20989: CALL 34058 0 0
20993: GO 21011
20995: LD_INT 8
20997: DOUBLE
20998: EQUAL
20999: IFTRUE 21003
21001: GO 21010
21003: POP
// hHackFog ; end ;
21004: CALL 34159 0 0
21008: GO 21011
21010: POP
// end ; if p2 = game_save_mode then
21011: LD_VAR 0 2
21015: PUSH
21016: LD_INT 102
21018: EQUAL
21019: IFFALSE 21084
// begin if p3 = 1 then
21021: LD_VAR 0 3
21025: PUSH
21026: LD_INT 1
21028: EQUAL
21029: IFFALSE 21041
// globalGameSaveCounter := p4 ;
21031: LD_ADDR_EXP 50
21035: PUSH
21036: LD_VAR 0 4
21040: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21041: LD_VAR 0 3
21045: PUSH
21046: LD_INT 2
21048: EQUAL
21049: PUSH
21050: LD_EXP 50
21054: AND
21055: IFFALSE 21074
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21057: LD_STRING setGameSaveCounter(
21059: PUSH
21060: LD_EXP 50
21064: STR
21065: PUSH
21066: LD_STRING )
21068: STR
21069: PPUSH
21070: CALL_OW 559
// display_strings := globalGameSaveCounter ;
21074: LD_ADDR_OWVAR 47
21078: PUSH
21079: LD_EXP 50
21083: ST_TO_ADDR
// end ; end ;
21084: LD_VAR 0 7
21088: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21089: GO 21091
21091: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21092: LD_STRING initStreamRollete();
21094: PPUSH
21095: CALL_OW 559
// InitStreamMode ;
21099: CALL 21111 0 0
// DefineStreamItems ( false ) ;
21103: LD_INT 0
21105: PPUSH
21106: CALL 21575 0 1
// end ;
21110: END
// function InitStreamMode ; begin
21111: LD_INT 0
21113: PPUSH
// streamModeActive := false ;
21114: LD_ADDR_EXP 51
21118: PUSH
21119: LD_INT 0
21121: ST_TO_ADDR
// normalCounter := 36 ;
21122: LD_ADDR_EXP 52
21126: PUSH
21127: LD_INT 36
21129: ST_TO_ADDR
// hardcoreCounter := 18 ;
21130: LD_ADDR_EXP 53
21134: PUSH
21135: LD_INT 18
21137: ST_TO_ADDR
// sRocket := false ;
21138: LD_ADDR_EXP 56
21142: PUSH
21143: LD_INT 0
21145: ST_TO_ADDR
// sSpeed := false ;
21146: LD_ADDR_EXP 55
21150: PUSH
21151: LD_INT 0
21153: ST_TO_ADDR
// sEngine := false ;
21154: LD_ADDR_EXP 57
21158: PUSH
21159: LD_INT 0
21161: ST_TO_ADDR
// sSpec := false ;
21162: LD_ADDR_EXP 54
21166: PUSH
21167: LD_INT 0
21169: ST_TO_ADDR
// sLevel := false ;
21170: LD_ADDR_EXP 58
21174: PUSH
21175: LD_INT 0
21177: ST_TO_ADDR
// sArmoury := false ;
21178: LD_ADDR_EXP 59
21182: PUSH
21183: LD_INT 0
21185: ST_TO_ADDR
// sRadar := false ;
21186: LD_ADDR_EXP 60
21190: PUSH
21191: LD_INT 0
21193: ST_TO_ADDR
// sBunker := false ;
21194: LD_ADDR_EXP 61
21198: PUSH
21199: LD_INT 0
21201: ST_TO_ADDR
// sHack := false ;
21202: LD_ADDR_EXP 62
21206: PUSH
21207: LD_INT 0
21209: ST_TO_ADDR
// sFire := false ;
21210: LD_ADDR_EXP 63
21214: PUSH
21215: LD_INT 0
21217: ST_TO_ADDR
// sRefresh := false ;
21218: LD_ADDR_EXP 64
21222: PUSH
21223: LD_INT 0
21225: ST_TO_ADDR
// sExp := false ;
21226: LD_ADDR_EXP 65
21230: PUSH
21231: LD_INT 0
21233: ST_TO_ADDR
// sDepot := false ;
21234: LD_ADDR_EXP 66
21238: PUSH
21239: LD_INT 0
21241: ST_TO_ADDR
// sFlag := false ;
21242: LD_ADDR_EXP 67
21246: PUSH
21247: LD_INT 0
21249: ST_TO_ADDR
// sKamikadze := false ;
21250: LD_ADDR_EXP 75
21254: PUSH
21255: LD_INT 0
21257: ST_TO_ADDR
// sTroll := false ;
21258: LD_ADDR_EXP 76
21262: PUSH
21263: LD_INT 0
21265: ST_TO_ADDR
// sSlow := false ;
21266: LD_ADDR_EXP 77
21270: PUSH
21271: LD_INT 0
21273: ST_TO_ADDR
// sLack := false ;
21274: LD_ADDR_EXP 78
21278: PUSH
21279: LD_INT 0
21281: ST_TO_ADDR
// sTank := false ;
21282: LD_ADDR_EXP 80
21286: PUSH
21287: LD_INT 0
21289: ST_TO_ADDR
// sRemote := false ;
21290: LD_ADDR_EXP 81
21294: PUSH
21295: LD_INT 0
21297: ST_TO_ADDR
// sPowell := false ;
21298: LD_ADDR_EXP 82
21302: PUSH
21303: LD_INT 0
21305: ST_TO_ADDR
// sTeleport := false ;
21306: LD_ADDR_EXP 85
21310: PUSH
21311: LD_INT 0
21313: ST_TO_ADDR
// sOilTower := false ;
21314: LD_ADDR_EXP 87
21318: PUSH
21319: LD_INT 0
21321: ST_TO_ADDR
// sShovel := false ;
21322: LD_ADDR_EXP 88
21326: PUSH
21327: LD_INT 0
21329: ST_TO_ADDR
// sSheik := false ;
21330: LD_ADDR_EXP 89
21334: PUSH
21335: LD_INT 0
21337: ST_TO_ADDR
// sEarthquake := false ;
21338: LD_ADDR_EXP 91
21342: PUSH
21343: LD_INT 0
21345: ST_TO_ADDR
// sAI := false ;
21346: LD_ADDR_EXP 92
21350: PUSH
21351: LD_INT 0
21353: ST_TO_ADDR
// sCargo := false ;
21354: LD_ADDR_EXP 95
21358: PUSH
21359: LD_INT 0
21361: ST_TO_ADDR
// sDLaser := false ;
21362: LD_ADDR_EXP 96
21366: PUSH
21367: LD_INT 0
21369: ST_TO_ADDR
// sExchange := false ;
21370: LD_ADDR_EXP 97
21374: PUSH
21375: LD_INT 0
21377: ST_TO_ADDR
// sFac := false ;
21378: LD_ADDR_EXP 98
21382: PUSH
21383: LD_INT 0
21385: ST_TO_ADDR
// sPower := false ;
21386: LD_ADDR_EXP 99
21390: PUSH
21391: LD_INT 0
21393: ST_TO_ADDR
// sRandom := false ;
21394: LD_ADDR_EXP 100
21398: PUSH
21399: LD_INT 0
21401: ST_TO_ADDR
// sShield := false ;
21402: LD_ADDR_EXP 101
21406: PUSH
21407: LD_INT 0
21409: ST_TO_ADDR
// sTime := false ;
21410: LD_ADDR_EXP 102
21414: PUSH
21415: LD_INT 0
21417: ST_TO_ADDR
// sTools := false ;
21418: LD_ADDR_EXP 103
21422: PUSH
21423: LD_INT 0
21425: ST_TO_ADDR
// sSold := false ;
21426: LD_ADDR_EXP 68
21430: PUSH
21431: LD_INT 0
21433: ST_TO_ADDR
// sDiff := false ;
21434: LD_ADDR_EXP 69
21438: PUSH
21439: LD_INT 0
21441: ST_TO_ADDR
// sFog := false ;
21442: LD_ADDR_EXP 72
21446: PUSH
21447: LD_INT 0
21449: ST_TO_ADDR
// sReset := false ;
21450: LD_ADDR_EXP 73
21454: PUSH
21455: LD_INT 0
21457: ST_TO_ADDR
// sSun := false ;
21458: LD_ADDR_EXP 74
21462: PUSH
21463: LD_INT 0
21465: ST_TO_ADDR
// sTiger := false ;
21466: LD_ADDR_EXP 70
21470: PUSH
21471: LD_INT 0
21473: ST_TO_ADDR
// sBomb := false ;
21474: LD_ADDR_EXP 71
21478: PUSH
21479: LD_INT 0
21481: ST_TO_ADDR
// sWound := false ;
21482: LD_ADDR_EXP 79
21486: PUSH
21487: LD_INT 0
21489: ST_TO_ADDR
// sBetray := false ;
21490: LD_ADDR_EXP 83
21494: PUSH
21495: LD_INT 0
21497: ST_TO_ADDR
// sContamin := false ;
21498: LD_ADDR_EXP 84
21502: PUSH
21503: LD_INT 0
21505: ST_TO_ADDR
// sOil := false ;
21506: LD_ADDR_EXP 86
21510: PUSH
21511: LD_INT 0
21513: ST_TO_ADDR
// sStu := false ;
21514: LD_ADDR_EXP 90
21518: PUSH
21519: LD_INT 0
21521: ST_TO_ADDR
// sBazooka := false ;
21522: LD_ADDR_EXP 93
21526: PUSH
21527: LD_INT 0
21529: ST_TO_ADDR
// sMortar := false ;
21530: LD_ADDR_EXP 94
21534: PUSH
21535: LD_INT 0
21537: ST_TO_ADDR
// sRanger := false ;
21538: LD_ADDR_EXP 104
21542: PUSH
21543: LD_INT 0
21545: ST_TO_ADDR
// sComputer := false ;
21546: LD_ADDR_EXP 105
21550: PUSH
21551: LD_INT 0
21553: ST_TO_ADDR
// s30 := false ;
21554: LD_ADDR_EXP 106
21558: PUSH
21559: LD_INT 0
21561: ST_TO_ADDR
// s60 := false ;
21562: LD_ADDR_EXP 107
21566: PUSH
21567: LD_INT 0
21569: ST_TO_ADDR
// end ;
21570: LD_VAR 0 1
21574: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21575: LD_INT 0
21577: PPUSH
21578: PPUSH
21579: PPUSH
21580: PPUSH
21581: PPUSH
21582: PPUSH
21583: PPUSH
// result := [ ] ;
21584: LD_ADDR_VAR 0 2
21588: PUSH
21589: EMPTY
21590: ST_TO_ADDR
// if campaign_id = 1 then
21591: LD_OWVAR 69
21595: PUSH
21596: LD_INT 1
21598: EQUAL
21599: IFFALSE 24765
// begin case mission_number of 1 :
21601: LD_OWVAR 70
21605: PUSH
21606: LD_INT 1
21608: DOUBLE
21609: EQUAL
21610: IFTRUE 21614
21612: GO 21690
21614: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21615: LD_ADDR_VAR 0 2
21619: PUSH
21620: LD_INT 2
21622: PUSH
21623: LD_INT 4
21625: PUSH
21626: LD_INT 11
21628: PUSH
21629: LD_INT 12
21631: PUSH
21632: LD_INT 15
21634: PUSH
21635: LD_INT 16
21637: PUSH
21638: LD_INT 22
21640: PUSH
21641: LD_INT 23
21643: PUSH
21644: LD_INT 26
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 101
21660: PUSH
21661: LD_INT 102
21663: PUSH
21664: LD_INT 106
21666: PUSH
21667: LD_INT 116
21669: PUSH
21670: LD_INT 117
21672: PUSH
21673: LD_INT 118
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: ST_TO_ADDR
21688: GO 24763
21690: LD_INT 2
21692: DOUBLE
21693: EQUAL
21694: IFTRUE 21698
21696: GO 21782
21698: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21699: LD_ADDR_VAR 0 2
21703: PUSH
21704: LD_INT 2
21706: PUSH
21707: LD_INT 4
21709: PUSH
21710: LD_INT 11
21712: PUSH
21713: LD_INT 12
21715: PUSH
21716: LD_INT 15
21718: PUSH
21719: LD_INT 16
21721: PUSH
21722: LD_INT 22
21724: PUSH
21725: LD_INT 23
21727: PUSH
21728: LD_INT 26
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 101
21744: PUSH
21745: LD_INT 102
21747: PUSH
21748: LD_INT 105
21750: PUSH
21751: LD_INT 106
21753: PUSH
21754: LD_INT 108
21756: PUSH
21757: LD_INT 116
21759: PUSH
21760: LD_INT 117
21762: PUSH
21763: LD_INT 118
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: ST_TO_ADDR
21780: GO 24763
21782: LD_INT 3
21784: DOUBLE
21785: EQUAL
21786: IFTRUE 21790
21788: GO 21878
21790: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21791: LD_ADDR_VAR 0 2
21795: PUSH
21796: LD_INT 2
21798: PUSH
21799: LD_INT 4
21801: PUSH
21802: LD_INT 5
21804: PUSH
21805: LD_INT 11
21807: PUSH
21808: LD_INT 12
21810: PUSH
21811: LD_INT 15
21813: PUSH
21814: LD_INT 16
21816: PUSH
21817: LD_INT 22
21819: PUSH
21820: LD_INT 26
21822: PUSH
21823: LD_INT 36
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 101
21840: PUSH
21841: LD_INT 102
21843: PUSH
21844: LD_INT 105
21846: PUSH
21847: LD_INT 106
21849: PUSH
21850: LD_INT 108
21852: PUSH
21853: LD_INT 116
21855: PUSH
21856: LD_INT 117
21858: PUSH
21859: LD_INT 118
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: ST_TO_ADDR
21876: GO 24763
21878: LD_INT 4
21880: DOUBLE
21881: EQUAL
21882: IFTRUE 21886
21884: GO 21982
21886: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21887: LD_ADDR_VAR 0 2
21891: PUSH
21892: LD_INT 2
21894: PUSH
21895: LD_INT 4
21897: PUSH
21898: LD_INT 5
21900: PUSH
21901: LD_INT 8
21903: PUSH
21904: LD_INT 11
21906: PUSH
21907: LD_INT 12
21909: PUSH
21910: LD_INT 15
21912: PUSH
21913: LD_INT 16
21915: PUSH
21916: LD_INT 22
21918: PUSH
21919: LD_INT 23
21921: PUSH
21922: LD_INT 26
21924: PUSH
21925: LD_INT 36
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 101
21944: PUSH
21945: LD_INT 102
21947: PUSH
21948: LD_INT 105
21950: PUSH
21951: LD_INT 106
21953: PUSH
21954: LD_INT 108
21956: PUSH
21957: LD_INT 116
21959: PUSH
21960: LD_INT 117
21962: PUSH
21963: LD_INT 118
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: ST_TO_ADDR
21980: GO 24763
21982: LD_INT 5
21984: DOUBLE
21985: EQUAL
21986: IFTRUE 21990
21988: GO 22102
21990: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21991: LD_ADDR_VAR 0 2
21995: PUSH
21996: LD_INT 2
21998: PUSH
21999: LD_INT 4
22001: PUSH
22002: LD_INT 5
22004: PUSH
22005: LD_INT 6
22007: PUSH
22008: LD_INT 8
22010: PUSH
22011: LD_INT 11
22013: PUSH
22014: LD_INT 12
22016: PUSH
22017: LD_INT 15
22019: PUSH
22020: LD_INT 16
22022: PUSH
22023: LD_INT 22
22025: PUSH
22026: LD_INT 23
22028: PUSH
22029: LD_INT 25
22031: PUSH
22032: LD_INT 26
22034: PUSH
22035: LD_INT 36
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 101
22056: PUSH
22057: LD_INT 102
22059: PUSH
22060: LD_INT 105
22062: PUSH
22063: LD_INT 106
22065: PUSH
22066: LD_INT 108
22068: PUSH
22069: LD_INT 109
22071: PUSH
22072: LD_INT 112
22074: PUSH
22075: LD_INT 116
22077: PUSH
22078: LD_INT 117
22080: PUSH
22081: LD_INT 118
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: ST_TO_ADDR
22100: GO 24763
22102: LD_INT 6
22104: DOUBLE
22105: EQUAL
22106: IFTRUE 22110
22108: GO 22242
22110: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22111: LD_ADDR_VAR 0 2
22115: PUSH
22116: LD_INT 2
22118: PUSH
22119: LD_INT 4
22121: PUSH
22122: LD_INT 5
22124: PUSH
22125: LD_INT 6
22127: PUSH
22128: LD_INT 8
22130: PUSH
22131: LD_INT 11
22133: PUSH
22134: LD_INT 12
22136: PUSH
22137: LD_INT 15
22139: PUSH
22140: LD_INT 16
22142: PUSH
22143: LD_INT 20
22145: PUSH
22146: LD_INT 21
22148: PUSH
22149: LD_INT 22
22151: PUSH
22152: LD_INT 23
22154: PUSH
22155: LD_INT 25
22157: PUSH
22158: LD_INT 26
22160: PUSH
22161: LD_INT 30
22163: PUSH
22164: LD_INT 31
22166: PUSH
22167: LD_INT 32
22169: PUSH
22170: LD_INT 36
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 101
22196: PUSH
22197: LD_INT 102
22199: PUSH
22200: LD_INT 105
22202: PUSH
22203: LD_INT 106
22205: PUSH
22206: LD_INT 108
22208: PUSH
22209: LD_INT 109
22211: PUSH
22212: LD_INT 112
22214: PUSH
22215: LD_INT 116
22217: PUSH
22218: LD_INT 117
22220: PUSH
22221: LD_INT 118
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: ST_TO_ADDR
22240: GO 24763
22242: LD_INT 7
22244: DOUBLE
22245: EQUAL
22246: IFTRUE 22250
22248: GO 22362
22250: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22251: LD_ADDR_VAR 0 2
22255: PUSH
22256: LD_INT 2
22258: PUSH
22259: LD_INT 4
22261: PUSH
22262: LD_INT 5
22264: PUSH
22265: LD_INT 7
22267: PUSH
22268: LD_INT 11
22270: PUSH
22271: LD_INT 12
22273: PUSH
22274: LD_INT 15
22276: PUSH
22277: LD_INT 16
22279: PUSH
22280: LD_INT 20
22282: PUSH
22283: LD_INT 21
22285: PUSH
22286: LD_INT 22
22288: PUSH
22289: LD_INT 23
22291: PUSH
22292: LD_INT 25
22294: PUSH
22295: LD_INT 26
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 101
22316: PUSH
22317: LD_INT 102
22319: PUSH
22320: LD_INT 103
22322: PUSH
22323: LD_INT 105
22325: PUSH
22326: LD_INT 106
22328: PUSH
22329: LD_INT 108
22331: PUSH
22332: LD_INT 112
22334: PUSH
22335: LD_INT 116
22337: PUSH
22338: LD_INT 117
22340: PUSH
22341: LD_INT 118
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: ST_TO_ADDR
22360: GO 24763
22362: LD_INT 8
22364: DOUBLE
22365: EQUAL
22366: IFTRUE 22370
22368: GO 22510
22370: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22371: LD_ADDR_VAR 0 2
22375: PUSH
22376: LD_INT 2
22378: PUSH
22379: LD_INT 4
22381: PUSH
22382: LD_INT 5
22384: PUSH
22385: LD_INT 6
22387: PUSH
22388: LD_INT 7
22390: PUSH
22391: LD_INT 8
22393: PUSH
22394: LD_INT 11
22396: PUSH
22397: LD_INT 12
22399: PUSH
22400: LD_INT 15
22402: PUSH
22403: LD_INT 16
22405: PUSH
22406: LD_INT 20
22408: PUSH
22409: LD_INT 21
22411: PUSH
22412: LD_INT 22
22414: PUSH
22415: LD_INT 23
22417: PUSH
22418: LD_INT 25
22420: PUSH
22421: LD_INT 26
22423: PUSH
22424: LD_INT 30
22426: PUSH
22427: LD_INT 31
22429: PUSH
22430: LD_INT 32
22432: PUSH
22433: LD_INT 36
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 101
22460: PUSH
22461: LD_INT 102
22463: PUSH
22464: LD_INT 103
22466: PUSH
22467: LD_INT 105
22469: PUSH
22470: LD_INT 106
22472: PUSH
22473: LD_INT 108
22475: PUSH
22476: LD_INT 109
22478: PUSH
22479: LD_INT 112
22481: PUSH
22482: LD_INT 116
22484: PUSH
22485: LD_INT 117
22487: PUSH
22488: LD_INT 118
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: ST_TO_ADDR
22508: GO 24763
22510: LD_INT 9
22512: DOUBLE
22513: EQUAL
22514: IFTRUE 22518
22516: GO 22666
22518: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22519: LD_ADDR_VAR 0 2
22523: PUSH
22524: LD_INT 2
22526: PUSH
22527: LD_INT 4
22529: PUSH
22530: LD_INT 5
22532: PUSH
22533: LD_INT 6
22535: PUSH
22536: LD_INT 7
22538: PUSH
22539: LD_INT 8
22541: PUSH
22542: LD_INT 11
22544: PUSH
22545: LD_INT 12
22547: PUSH
22548: LD_INT 15
22550: PUSH
22551: LD_INT 16
22553: PUSH
22554: LD_INT 20
22556: PUSH
22557: LD_INT 21
22559: PUSH
22560: LD_INT 22
22562: PUSH
22563: LD_INT 23
22565: PUSH
22566: LD_INT 25
22568: PUSH
22569: LD_INT 26
22571: PUSH
22572: LD_INT 28
22574: PUSH
22575: LD_INT 30
22577: PUSH
22578: LD_INT 31
22580: PUSH
22581: LD_INT 32
22583: PUSH
22584: LD_INT 36
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 101
22612: PUSH
22613: LD_INT 102
22615: PUSH
22616: LD_INT 103
22618: PUSH
22619: LD_INT 105
22621: PUSH
22622: LD_INT 106
22624: PUSH
22625: LD_INT 108
22627: PUSH
22628: LD_INT 109
22630: PUSH
22631: LD_INT 112
22633: PUSH
22634: LD_INT 114
22636: PUSH
22637: LD_INT 116
22639: PUSH
22640: LD_INT 117
22642: PUSH
22643: LD_INT 118
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: ST_TO_ADDR
22664: GO 24763
22666: LD_INT 10
22668: DOUBLE
22669: EQUAL
22670: IFTRUE 22674
22672: GO 22870
22674: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22675: LD_ADDR_VAR 0 2
22679: PUSH
22680: LD_INT 2
22682: PUSH
22683: LD_INT 4
22685: PUSH
22686: LD_INT 5
22688: PUSH
22689: LD_INT 6
22691: PUSH
22692: LD_INT 7
22694: PUSH
22695: LD_INT 8
22697: PUSH
22698: LD_INT 9
22700: PUSH
22701: LD_INT 10
22703: PUSH
22704: LD_INT 11
22706: PUSH
22707: LD_INT 12
22709: PUSH
22710: LD_INT 13
22712: PUSH
22713: LD_INT 14
22715: PUSH
22716: LD_INT 15
22718: PUSH
22719: LD_INT 16
22721: PUSH
22722: LD_INT 17
22724: PUSH
22725: LD_INT 18
22727: PUSH
22728: LD_INT 19
22730: PUSH
22731: LD_INT 20
22733: PUSH
22734: LD_INT 21
22736: PUSH
22737: LD_INT 22
22739: PUSH
22740: LD_INT 23
22742: PUSH
22743: LD_INT 24
22745: PUSH
22746: LD_INT 25
22748: PUSH
22749: LD_INT 26
22751: PUSH
22752: LD_INT 28
22754: PUSH
22755: LD_INT 30
22757: PUSH
22758: LD_INT 31
22760: PUSH
22761: LD_INT 32
22763: PUSH
22764: LD_INT 36
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 101
22800: PUSH
22801: LD_INT 102
22803: PUSH
22804: LD_INT 103
22806: PUSH
22807: LD_INT 104
22809: PUSH
22810: LD_INT 105
22812: PUSH
22813: LD_INT 106
22815: PUSH
22816: LD_INT 107
22818: PUSH
22819: LD_INT 108
22821: PUSH
22822: LD_INT 109
22824: PUSH
22825: LD_INT 110
22827: PUSH
22828: LD_INT 111
22830: PUSH
22831: LD_INT 112
22833: PUSH
22834: LD_INT 114
22836: PUSH
22837: LD_INT 116
22839: PUSH
22840: LD_INT 117
22842: PUSH
22843: LD_INT 118
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: ST_TO_ADDR
22868: GO 24763
22870: LD_INT 11
22872: DOUBLE
22873: EQUAL
22874: IFTRUE 22878
22876: GO 23082
22878: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22879: LD_ADDR_VAR 0 2
22883: PUSH
22884: LD_INT 2
22886: PUSH
22887: LD_INT 3
22889: PUSH
22890: LD_INT 4
22892: PUSH
22893: LD_INT 5
22895: PUSH
22896: LD_INT 6
22898: PUSH
22899: LD_INT 7
22901: PUSH
22902: LD_INT 8
22904: PUSH
22905: LD_INT 9
22907: PUSH
22908: LD_INT 10
22910: PUSH
22911: LD_INT 11
22913: PUSH
22914: LD_INT 12
22916: PUSH
22917: LD_INT 13
22919: PUSH
22920: LD_INT 14
22922: PUSH
22923: LD_INT 15
22925: PUSH
22926: LD_INT 16
22928: PUSH
22929: LD_INT 17
22931: PUSH
22932: LD_INT 18
22934: PUSH
22935: LD_INT 19
22937: PUSH
22938: LD_INT 20
22940: PUSH
22941: LD_INT 21
22943: PUSH
22944: LD_INT 22
22946: PUSH
22947: LD_INT 23
22949: PUSH
22950: LD_INT 24
22952: PUSH
22953: LD_INT 25
22955: PUSH
22956: LD_INT 26
22958: PUSH
22959: LD_INT 28
22961: PUSH
22962: LD_INT 30
22964: PUSH
22965: LD_INT 31
22967: PUSH
22968: LD_INT 32
22970: PUSH
22971: LD_INT 34
22973: PUSH
22974: LD_INT 36
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 101
23012: PUSH
23013: LD_INT 102
23015: PUSH
23016: LD_INT 103
23018: PUSH
23019: LD_INT 104
23021: PUSH
23022: LD_INT 105
23024: PUSH
23025: LD_INT 106
23027: PUSH
23028: LD_INT 107
23030: PUSH
23031: LD_INT 108
23033: PUSH
23034: LD_INT 109
23036: PUSH
23037: LD_INT 110
23039: PUSH
23040: LD_INT 111
23042: PUSH
23043: LD_INT 112
23045: PUSH
23046: LD_INT 114
23048: PUSH
23049: LD_INT 116
23051: PUSH
23052: LD_INT 117
23054: PUSH
23055: LD_INT 118
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: ST_TO_ADDR
23080: GO 24763
23082: LD_INT 12
23084: DOUBLE
23085: EQUAL
23086: IFTRUE 23090
23088: GO 23310
23090: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23091: LD_ADDR_VAR 0 2
23095: PUSH
23096: LD_INT 1
23098: PUSH
23099: LD_INT 2
23101: PUSH
23102: LD_INT 3
23104: PUSH
23105: LD_INT 4
23107: PUSH
23108: LD_INT 5
23110: PUSH
23111: LD_INT 6
23113: PUSH
23114: LD_INT 7
23116: PUSH
23117: LD_INT 8
23119: PUSH
23120: LD_INT 9
23122: PUSH
23123: LD_INT 10
23125: PUSH
23126: LD_INT 11
23128: PUSH
23129: LD_INT 12
23131: PUSH
23132: LD_INT 13
23134: PUSH
23135: LD_INT 14
23137: PUSH
23138: LD_INT 15
23140: PUSH
23141: LD_INT 16
23143: PUSH
23144: LD_INT 17
23146: PUSH
23147: LD_INT 18
23149: PUSH
23150: LD_INT 19
23152: PUSH
23153: LD_INT 20
23155: PUSH
23156: LD_INT 21
23158: PUSH
23159: LD_INT 22
23161: PUSH
23162: LD_INT 23
23164: PUSH
23165: LD_INT 24
23167: PUSH
23168: LD_INT 25
23170: PUSH
23171: LD_INT 26
23173: PUSH
23174: LD_INT 27
23176: PUSH
23177: LD_INT 28
23179: PUSH
23180: LD_INT 30
23182: PUSH
23183: LD_INT 31
23185: PUSH
23186: LD_INT 32
23188: PUSH
23189: LD_INT 33
23191: PUSH
23192: LD_INT 34
23194: PUSH
23195: LD_INT 36
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 101
23236: PUSH
23237: LD_INT 102
23239: PUSH
23240: LD_INT 103
23242: PUSH
23243: LD_INT 104
23245: PUSH
23246: LD_INT 105
23248: PUSH
23249: LD_INT 106
23251: PUSH
23252: LD_INT 107
23254: PUSH
23255: LD_INT 108
23257: PUSH
23258: LD_INT 109
23260: PUSH
23261: LD_INT 110
23263: PUSH
23264: LD_INT 111
23266: PUSH
23267: LD_INT 112
23269: PUSH
23270: LD_INT 113
23272: PUSH
23273: LD_INT 114
23275: PUSH
23276: LD_INT 116
23278: PUSH
23279: LD_INT 117
23281: PUSH
23282: LD_INT 118
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: ST_TO_ADDR
23308: GO 24763
23310: LD_INT 13
23312: DOUBLE
23313: EQUAL
23314: IFTRUE 23318
23316: GO 23526
23318: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23319: LD_ADDR_VAR 0 2
23323: PUSH
23324: LD_INT 1
23326: PUSH
23327: LD_INT 2
23329: PUSH
23330: LD_INT 3
23332: PUSH
23333: LD_INT 4
23335: PUSH
23336: LD_INT 5
23338: PUSH
23339: LD_INT 8
23341: PUSH
23342: LD_INT 9
23344: PUSH
23345: LD_INT 10
23347: PUSH
23348: LD_INT 11
23350: PUSH
23351: LD_INT 12
23353: PUSH
23354: LD_INT 14
23356: PUSH
23357: LD_INT 15
23359: PUSH
23360: LD_INT 16
23362: PUSH
23363: LD_INT 17
23365: PUSH
23366: LD_INT 18
23368: PUSH
23369: LD_INT 19
23371: PUSH
23372: LD_INT 20
23374: PUSH
23375: LD_INT 21
23377: PUSH
23378: LD_INT 22
23380: PUSH
23381: LD_INT 23
23383: PUSH
23384: LD_INT 24
23386: PUSH
23387: LD_INT 25
23389: PUSH
23390: LD_INT 26
23392: PUSH
23393: LD_INT 27
23395: PUSH
23396: LD_INT 28
23398: PUSH
23399: LD_INT 30
23401: PUSH
23402: LD_INT 31
23404: PUSH
23405: LD_INT 32
23407: PUSH
23408: LD_INT 33
23410: PUSH
23411: LD_INT 34
23413: PUSH
23414: LD_INT 36
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 101
23452: PUSH
23453: LD_INT 102
23455: PUSH
23456: LD_INT 103
23458: PUSH
23459: LD_INT 104
23461: PUSH
23462: LD_INT 105
23464: PUSH
23465: LD_INT 106
23467: PUSH
23468: LD_INT 107
23470: PUSH
23471: LD_INT 108
23473: PUSH
23474: LD_INT 109
23476: PUSH
23477: LD_INT 110
23479: PUSH
23480: LD_INT 111
23482: PUSH
23483: LD_INT 112
23485: PUSH
23486: LD_INT 113
23488: PUSH
23489: LD_INT 114
23491: PUSH
23492: LD_INT 116
23494: PUSH
23495: LD_INT 117
23497: PUSH
23498: LD_INT 118
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: ST_TO_ADDR
23524: GO 24763
23526: LD_INT 14
23528: DOUBLE
23529: EQUAL
23530: IFTRUE 23534
23532: GO 23758
23534: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23535: LD_ADDR_VAR 0 2
23539: PUSH
23540: LD_INT 1
23542: PUSH
23543: LD_INT 2
23545: PUSH
23546: LD_INT 3
23548: PUSH
23549: LD_INT 4
23551: PUSH
23552: LD_INT 5
23554: PUSH
23555: LD_INT 6
23557: PUSH
23558: LD_INT 7
23560: PUSH
23561: LD_INT 8
23563: PUSH
23564: LD_INT 9
23566: PUSH
23567: LD_INT 10
23569: PUSH
23570: LD_INT 11
23572: PUSH
23573: LD_INT 12
23575: PUSH
23576: LD_INT 13
23578: PUSH
23579: LD_INT 14
23581: PUSH
23582: LD_INT 15
23584: PUSH
23585: LD_INT 16
23587: PUSH
23588: LD_INT 17
23590: PUSH
23591: LD_INT 18
23593: PUSH
23594: LD_INT 19
23596: PUSH
23597: LD_INT 20
23599: PUSH
23600: LD_INT 21
23602: PUSH
23603: LD_INT 22
23605: PUSH
23606: LD_INT 23
23608: PUSH
23609: LD_INT 24
23611: PUSH
23612: LD_INT 25
23614: PUSH
23615: LD_INT 26
23617: PUSH
23618: LD_INT 27
23620: PUSH
23621: LD_INT 28
23623: PUSH
23624: LD_INT 29
23626: PUSH
23627: LD_INT 30
23629: PUSH
23630: LD_INT 31
23632: PUSH
23633: LD_INT 32
23635: PUSH
23636: LD_INT 33
23638: PUSH
23639: LD_INT 34
23641: PUSH
23642: LD_INT 36
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 101
23684: PUSH
23685: LD_INT 102
23687: PUSH
23688: LD_INT 103
23690: PUSH
23691: LD_INT 104
23693: PUSH
23694: LD_INT 105
23696: PUSH
23697: LD_INT 106
23699: PUSH
23700: LD_INT 107
23702: PUSH
23703: LD_INT 108
23705: PUSH
23706: LD_INT 109
23708: PUSH
23709: LD_INT 110
23711: PUSH
23712: LD_INT 111
23714: PUSH
23715: LD_INT 112
23717: PUSH
23718: LD_INT 113
23720: PUSH
23721: LD_INT 114
23723: PUSH
23724: LD_INT 116
23726: PUSH
23727: LD_INT 117
23729: PUSH
23730: LD_INT 118
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: ST_TO_ADDR
23756: GO 24763
23758: LD_INT 15
23760: DOUBLE
23761: EQUAL
23762: IFTRUE 23766
23764: GO 23990
23766: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23767: LD_ADDR_VAR 0 2
23771: PUSH
23772: LD_INT 1
23774: PUSH
23775: LD_INT 2
23777: PUSH
23778: LD_INT 3
23780: PUSH
23781: LD_INT 4
23783: PUSH
23784: LD_INT 5
23786: PUSH
23787: LD_INT 6
23789: PUSH
23790: LD_INT 7
23792: PUSH
23793: LD_INT 8
23795: PUSH
23796: LD_INT 9
23798: PUSH
23799: LD_INT 10
23801: PUSH
23802: LD_INT 11
23804: PUSH
23805: LD_INT 12
23807: PUSH
23808: LD_INT 13
23810: PUSH
23811: LD_INT 14
23813: PUSH
23814: LD_INT 15
23816: PUSH
23817: LD_INT 16
23819: PUSH
23820: LD_INT 17
23822: PUSH
23823: LD_INT 18
23825: PUSH
23826: LD_INT 19
23828: PUSH
23829: LD_INT 20
23831: PUSH
23832: LD_INT 21
23834: PUSH
23835: LD_INT 22
23837: PUSH
23838: LD_INT 23
23840: PUSH
23841: LD_INT 24
23843: PUSH
23844: LD_INT 25
23846: PUSH
23847: LD_INT 26
23849: PUSH
23850: LD_INT 27
23852: PUSH
23853: LD_INT 28
23855: PUSH
23856: LD_INT 29
23858: PUSH
23859: LD_INT 30
23861: PUSH
23862: LD_INT 31
23864: PUSH
23865: LD_INT 32
23867: PUSH
23868: LD_INT 33
23870: PUSH
23871: LD_INT 34
23873: PUSH
23874: LD_INT 36
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 101
23916: PUSH
23917: LD_INT 102
23919: PUSH
23920: LD_INT 103
23922: PUSH
23923: LD_INT 104
23925: PUSH
23926: LD_INT 105
23928: PUSH
23929: LD_INT 106
23931: PUSH
23932: LD_INT 107
23934: PUSH
23935: LD_INT 108
23937: PUSH
23938: LD_INT 109
23940: PUSH
23941: LD_INT 110
23943: PUSH
23944: LD_INT 111
23946: PUSH
23947: LD_INT 112
23949: PUSH
23950: LD_INT 113
23952: PUSH
23953: LD_INT 114
23955: PUSH
23956: LD_INT 116
23958: PUSH
23959: LD_INT 117
23961: PUSH
23962: LD_INT 118
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: ST_TO_ADDR
23988: GO 24763
23990: LD_INT 16
23992: DOUBLE
23993: EQUAL
23994: IFTRUE 23998
23996: GO 24134
23998: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23999: LD_ADDR_VAR 0 2
24003: PUSH
24004: LD_INT 2
24006: PUSH
24007: LD_INT 4
24009: PUSH
24010: LD_INT 5
24012: PUSH
24013: LD_INT 7
24015: PUSH
24016: LD_INT 11
24018: PUSH
24019: LD_INT 12
24021: PUSH
24022: LD_INT 15
24024: PUSH
24025: LD_INT 16
24027: PUSH
24028: LD_INT 20
24030: PUSH
24031: LD_INT 21
24033: PUSH
24034: LD_INT 22
24036: PUSH
24037: LD_INT 23
24039: PUSH
24040: LD_INT 25
24042: PUSH
24043: LD_INT 26
24045: PUSH
24046: LD_INT 30
24048: PUSH
24049: LD_INT 31
24051: PUSH
24052: LD_INT 32
24054: PUSH
24055: LD_INT 33
24057: PUSH
24058: LD_INT 34
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 101
24084: PUSH
24085: LD_INT 102
24087: PUSH
24088: LD_INT 103
24090: PUSH
24091: LD_INT 106
24093: PUSH
24094: LD_INT 108
24096: PUSH
24097: LD_INT 112
24099: PUSH
24100: LD_INT 113
24102: PUSH
24103: LD_INT 114
24105: PUSH
24106: LD_INT 116
24108: PUSH
24109: LD_INT 117
24111: PUSH
24112: LD_INT 118
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: ST_TO_ADDR
24132: GO 24763
24134: LD_INT 17
24136: DOUBLE
24137: EQUAL
24138: IFTRUE 24142
24140: GO 24366
24142: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24143: LD_ADDR_VAR 0 2
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: LD_INT 2
24153: PUSH
24154: LD_INT 3
24156: PUSH
24157: LD_INT 4
24159: PUSH
24160: LD_INT 5
24162: PUSH
24163: LD_INT 6
24165: PUSH
24166: LD_INT 7
24168: PUSH
24169: LD_INT 8
24171: PUSH
24172: LD_INT 9
24174: PUSH
24175: LD_INT 10
24177: PUSH
24178: LD_INT 11
24180: PUSH
24181: LD_INT 12
24183: PUSH
24184: LD_INT 13
24186: PUSH
24187: LD_INT 14
24189: PUSH
24190: LD_INT 15
24192: PUSH
24193: LD_INT 16
24195: PUSH
24196: LD_INT 17
24198: PUSH
24199: LD_INT 18
24201: PUSH
24202: LD_INT 19
24204: PUSH
24205: LD_INT 20
24207: PUSH
24208: LD_INT 21
24210: PUSH
24211: LD_INT 22
24213: PUSH
24214: LD_INT 23
24216: PUSH
24217: LD_INT 24
24219: PUSH
24220: LD_INT 25
24222: PUSH
24223: LD_INT 26
24225: PUSH
24226: LD_INT 27
24228: PUSH
24229: LD_INT 28
24231: PUSH
24232: LD_INT 29
24234: PUSH
24235: LD_INT 30
24237: PUSH
24238: LD_INT 31
24240: PUSH
24241: LD_INT 32
24243: PUSH
24244: LD_INT 33
24246: PUSH
24247: LD_INT 34
24249: PUSH
24250: LD_INT 36
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 101
24292: PUSH
24293: LD_INT 102
24295: PUSH
24296: LD_INT 103
24298: PUSH
24299: LD_INT 104
24301: PUSH
24302: LD_INT 105
24304: PUSH
24305: LD_INT 106
24307: PUSH
24308: LD_INT 107
24310: PUSH
24311: LD_INT 108
24313: PUSH
24314: LD_INT 109
24316: PUSH
24317: LD_INT 110
24319: PUSH
24320: LD_INT 111
24322: PUSH
24323: LD_INT 112
24325: PUSH
24326: LD_INT 113
24328: PUSH
24329: LD_INT 114
24331: PUSH
24332: LD_INT 116
24334: PUSH
24335: LD_INT 117
24337: PUSH
24338: LD_INT 118
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: ST_TO_ADDR
24364: GO 24763
24366: LD_INT 18
24368: DOUBLE
24369: EQUAL
24370: IFTRUE 24374
24372: GO 24522
24374: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24375: LD_ADDR_VAR 0 2
24379: PUSH
24380: LD_INT 2
24382: PUSH
24383: LD_INT 4
24385: PUSH
24386: LD_INT 5
24388: PUSH
24389: LD_INT 7
24391: PUSH
24392: LD_INT 11
24394: PUSH
24395: LD_INT 12
24397: PUSH
24398: LD_INT 15
24400: PUSH
24401: LD_INT 16
24403: PUSH
24404: LD_INT 20
24406: PUSH
24407: LD_INT 21
24409: PUSH
24410: LD_INT 22
24412: PUSH
24413: LD_INT 23
24415: PUSH
24416: LD_INT 25
24418: PUSH
24419: LD_INT 26
24421: PUSH
24422: LD_INT 30
24424: PUSH
24425: LD_INT 31
24427: PUSH
24428: LD_INT 32
24430: PUSH
24431: LD_INT 33
24433: PUSH
24434: LD_INT 34
24436: PUSH
24437: LD_INT 35
24439: PUSH
24440: LD_INT 36
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 101
24468: PUSH
24469: LD_INT 102
24471: PUSH
24472: LD_INT 103
24474: PUSH
24475: LD_INT 106
24477: PUSH
24478: LD_INT 108
24480: PUSH
24481: LD_INT 112
24483: PUSH
24484: LD_INT 113
24486: PUSH
24487: LD_INT 114
24489: PUSH
24490: LD_INT 115
24492: PUSH
24493: LD_INT 116
24495: PUSH
24496: LD_INT 117
24498: PUSH
24499: LD_INT 118
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: ST_TO_ADDR
24520: GO 24763
24522: LD_INT 19
24524: DOUBLE
24525: EQUAL
24526: IFTRUE 24530
24528: GO 24762
24530: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24531: LD_ADDR_VAR 0 2
24535: PUSH
24536: LD_INT 1
24538: PUSH
24539: LD_INT 2
24541: PUSH
24542: LD_INT 3
24544: PUSH
24545: LD_INT 4
24547: PUSH
24548: LD_INT 5
24550: PUSH
24551: LD_INT 6
24553: PUSH
24554: LD_INT 7
24556: PUSH
24557: LD_INT 8
24559: PUSH
24560: LD_INT 9
24562: PUSH
24563: LD_INT 10
24565: PUSH
24566: LD_INT 11
24568: PUSH
24569: LD_INT 12
24571: PUSH
24572: LD_INT 13
24574: PUSH
24575: LD_INT 14
24577: PUSH
24578: LD_INT 15
24580: PUSH
24581: LD_INT 16
24583: PUSH
24584: LD_INT 17
24586: PUSH
24587: LD_INT 18
24589: PUSH
24590: LD_INT 19
24592: PUSH
24593: LD_INT 20
24595: PUSH
24596: LD_INT 21
24598: PUSH
24599: LD_INT 22
24601: PUSH
24602: LD_INT 23
24604: PUSH
24605: LD_INT 24
24607: PUSH
24608: LD_INT 25
24610: PUSH
24611: LD_INT 26
24613: PUSH
24614: LD_INT 27
24616: PUSH
24617: LD_INT 28
24619: PUSH
24620: LD_INT 29
24622: PUSH
24623: LD_INT 30
24625: PUSH
24626: LD_INT 31
24628: PUSH
24629: LD_INT 32
24631: PUSH
24632: LD_INT 33
24634: PUSH
24635: LD_INT 34
24637: PUSH
24638: LD_INT 35
24640: PUSH
24641: LD_INT 36
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 101
24684: PUSH
24685: LD_INT 102
24687: PUSH
24688: LD_INT 103
24690: PUSH
24691: LD_INT 104
24693: PUSH
24694: LD_INT 105
24696: PUSH
24697: LD_INT 106
24699: PUSH
24700: LD_INT 107
24702: PUSH
24703: LD_INT 108
24705: PUSH
24706: LD_INT 109
24708: PUSH
24709: LD_INT 110
24711: PUSH
24712: LD_INT 111
24714: PUSH
24715: LD_INT 112
24717: PUSH
24718: LD_INT 113
24720: PUSH
24721: LD_INT 114
24723: PUSH
24724: LD_INT 115
24726: PUSH
24727: LD_INT 116
24729: PUSH
24730: LD_INT 117
24732: PUSH
24733: LD_INT 118
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: ST_TO_ADDR
24760: GO 24763
24762: POP
// end else
24763: GO 24994
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24765: LD_ADDR_VAR 0 2
24769: PUSH
24770: LD_INT 1
24772: PUSH
24773: LD_INT 2
24775: PUSH
24776: LD_INT 3
24778: PUSH
24779: LD_INT 4
24781: PUSH
24782: LD_INT 5
24784: PUSH
24785: LD_INT 6
24787: PUSH
24788: LD_INT 7
24790: PUSH
24791: LD_INT 8
24793: PUSH
24794: LD_INT 9
24796: PUSH
24797: LD_INT 10
24799: PUSH
24800: LD_INT 11
24802: PUSH
24803: LD_INT 12
24805: PUSH
24806: LD_INT 13
24808: PUSH
24809: LD_INT 14
24811: PUSH
24812: LD_INT 15
24814: PUSH
24815: LD_INT 16
24817: PUSH
24818: LD_INT 17
24820: PUSH
24821: LD_INT 18
24823: PUSH
24824: LD_INT 19
24826: PUSH
24827: LD_INT 20
24829: PUSH
24830: LD_INT 21
24832: PUSH
24833: LD_INT 22
24835: PUSH
24836: LD_INT 23
24838: PUSH
24839: LD_INT 24
24841: PUSH
24842: LD_INT 25
24844: PUSH
24845: LD_INT 26
24847: PUSH
24848: LD_INT 27
24850: PUSH
24851: LD_INT 28
24853: PUSH
24854: LD_INT 29
24856: PUSH
24857: LD_INT 30
24859: PUSH
24860: LD_INT 31
24862: PUSH
24863: LD_INT 32
24865: PUSH
24866: LD_INT 33
24868: PUSH
24869: LD_INT 34
24871: PUSH
24872: LD_INT 35
24874: PUSH
24875: LD_INT 36
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 101
24918: PUSH
24919: LD_INT 102
24921: PUSH
24922: LD_INT 103
24924: PUSH
24925: LD_INT 104
24927: PUSH
24928: LD_INT 105
24930: PUSH
24931: LD_INT 106
24933: PUSH
24934: LD_INT 107
24936: PUSH
24937: LD_INT 108
24939: PUSH
24940: LD_INT 109
24942: PUSH
24943: LD_INT 110
24945: PUSH
24946: LD_INT 111
24948: PUSH
24949: LD_INT 112
24951: PUSH
24952: LD_INT 113
24954: PUSH
24955: LD_INT 114
24957: PUSH
24958: LD_INT 115
24960: PUSH
24961: LD_INT 116
24963: PUSH
24964: LD_INT 117
24966: PUSH
24967: LD_INT 118
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: ST_TO_ADDR
// if result then
24994: LD_VAR 0 2
24998: IFFALSE 25784
// begin normal :=  ;
25000: LD_ADDR_VAR 0 5
25004: PUSH
25005: LD_STRING 
25007: ST_TO_ADDR
// hardcore :=  ;
25008: LD_ADDR_VAR 0 6
25012: PUSH
25013: LD_STRING 
25015: ST_TO_ADDR
// active :=  ;
25016: LD_ADDR_VAR 0 7
25020: PUSH
25021: LD_STRING 
25023: ST_TO_ADDR
// for i = 1 to normalCounter do
25024: LD_ADDR_VAR 0 8
25028: PUSH
25029: DOUBLE
25030: LD_INT 1
25032: DEC
25033: ST_TO_ADDR
25034: LD_EXP 52
25038: PUSH
25039: FOR_TO
25040: IFFALSE 25141
// begin tmp := 0 ;
25042: LD_ADDR_VAR 0 3
25046: PUSH
25047: LD_STRING 0
25049: ST_TO_ADDR
// if result [ 1 ] then
25050: LD_VAR 0 2
25054: PUSH
25055: LD_INT 1
25057: ARRAY
25058: IFFALSE 25123
// if result [ 1 ] [ 1 ] = i then
25060: LD_VAR 0 2
25064: PUSH
25065: LD_INT 1
25067: ARRAY
25068: PUSH
25069: LD_INT 1
25071: ARRAY
25072: PUSH
25073: LD_VAR 0 8
25077: EQUAL
25078: IFFALSE 25123
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25080: LD_ADDR_VAR 0 2
25084: PUSH
25085: LD_VAR 0 2
25089: PPUSH
25090: LD_INT 1
25092: PPUSH
25093: LD_VAR 0 2
25097: PUSH
25098: LD_INT 1
25100: ARRAY
25101: PPUSH
25102: LD_INT 1
25104: PPUSH
25105: CALL_OW 3
25109: PPUSH
25110: CALL_OW 1
25114: ST_TO_ADDR
// tmp := 1 ;
25115: LD_ADDR_VAR 0 3
25119: PUSH
25120: LD_STRING 1
25122: ST_TO_ADDR
// end ; normal := normal & tmp ;
25123: LD_ADDR_VAR 0 5
25127: PUSH
25128: LD_VAR 0 5
25132: PUSH
25133: LD_VAR 0 3
25137: STR
25138: ST_TO_ADDR
// end ;
25139: GO 25039
25141: POP
25142: POP
// for i = 1 to hardcoreCounter do
25143: LD_ADDR_VAR 0 8
25147: PUSH
25148: DOUBLE
25149: LD_INT 1
25151: DEC
25152: ST_TO_ADDR
25153: LD_EXP 53
25157: PUSH
25158: FOR_TO
25159: IFFALSE 25264
// begin tmp := 0 ;
25161: LD_ADDR_VAR 0 3
25165: PUSH
25166: LD_STRING 0
25168: ST_TO_ADDR
// if result [ 2 ] then
25169: LD_VAR 0 2
25173: PUSH
25174: LD_INT 2
25176: ARRAY
25177: IFFALSE 25246
// if result [ 2 ] [ 1 ] = 100 + i then
25179: LD_VAR 0 2
25183: PUSH
25184: LD_INT 2
25186: ARRAY
25187: PUSH
25188: LD_INT 1
25190: ARRAY
25191: PUSH
25192: LD_INT 100
25194: PUSH
25195: LD_VAR 0 8
25199: PLUS
25200: EQUAL
25201: IFFALSE 25246
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25203: LD_ADDR_VAR 0 2
25207: PUSH
25208: LD_VAR 0 2
25212: PPUSH
25213: LD_INT 2
25215: PPUSH
25216: LD_VAR 0 2
25220: PUSH
25221: LD_INT 2
25223: ARRAY
25224: PPUSH
25225: LD_INT 1
25227: PPUSH
25228: CALL_OW 3
25232: PPUSH
25233: CALL_OW 1
25237: ST_TO_ADDR
// tmp := 1 ;
25238: LD_ADDR_VAR 0 3
25242: PUSH
25243: LD_STRING 1
25245: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25246: LD_ADDR_VAR 0 6
25250: PUSH
25251: LD_VAR 0 6
25255: PUSH
25256: LD_VAR 0 3
25260: STR
25261: ST_TO_ADDR
// end ;
25262: GO 25158
25264: POP
25265: POP
// if isGameLoad then
25266: LD_VAR 0 1
25270: IFFALSE 25745
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25272: LD_ADDR_VAR 0 4
25276: PUSH
25277: LD_EXP 56
25281: PUSH
25282: LD_EXP 55
25286: PUSH
25287: LD_EXP 57
25291: PUSH
25292: LD_EXP 54
25296: PUSH
25297: LD_EXP 58
25301: PUSH
25302: LD_EXP 59
25306: PUSH
25307: LD_EXP 60
25311: PUSH
25312: LD_EXP 61
25316: PUSH
25317: LD_EXP 62
25321: PUSH
25322: LD_EXP 63
25326: PUSH
25327: LD_EXP 64
25331: PUSH
25332: LD_EXP 65
25336: PUSH
25337: LD_EXP 66
25341: PUSH
25342: LD_EXP 67
25346: PUSH
25347: LD_EXP 75
25351: PUSH
25352: LD_EXP 76
25356: PUSH
25357: LD_EXP 77
25361: PUSH
25362: LD_EXP 78
25366: PUSH
25367: LD_EXP 80
25371: PUSH
25372: LD_EXP 81
25376: PUSH
25377: LD_EXP 82
25381: PUSH
25382: LD_EXP 85
25386: PUSH
25387: LD_EXP 87
25391: PUSH
25392: LD_EXP 88
25396: PUSH
25397: LD_EXP 89
25401: PUSH
25402: LD_EXP 91
25406: PUSH
25407: LD_EXP 92
25411: PUSH
25412: LD_EXP 95
25416: PUSH
25417: LD_EXP 96
25421: PUSH
25422: LD_EXP 97
25426: PUSH
25427: LD_EXP 98
25431: PUSH
25432: LD_EXP 99
25436: PUSH
25437: LD_EXP 100
25441: PUSH
25442: LD_EXP 101
25446: PUSH
25447: LD_EXP 102
25451: PUSH
25452: LD_EXP 103
25456: PUSH
25457: LD_EXP 68
25461: PUSH
25462: LD_EXP 69
25466: PUSH
25467: LD_EXP 72
25471: PUSH
25472: LD_EXP 73
25476: PUSH
25477: LD_EXP 74
25481: PUSH
25482: LD_EXP 70
25486: PUSH
25487: LD_EXP 71
25491: PUSH
25492: LD_EXP 79
25496: PUSH
25497: LD_EXP 83
25501: PUSH
25502: LD_EXP 84
25506: PUSH
25507: LD_EXP 86
25511: PUSH
25512: LD_EXP 90
25516: PUSH
25517: LD_EXP 93
25521: PUSH
25522: LD_EXP 94
25526: PUSH
25527: LD_EXP 104
25531: PUSH
25532: LD_EXP 105
25536: PUSH
25537: LD_EXP 106
25541: PUSH
25542: LD_EXP 107
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: ST_TO_ADDR
// tmp :=  ;
25603: LD_ADDR_VAR 0 3
25607: PUSH
25608: LD_STRING 
25610: ST_TO_ADDR
// for i = 1 to normalCounter do
25611: LD_ADDR_VAR 0 8
25615: PUSH
25616: DOUBLE
25617: LD_INT 1
25619: DEC
25620: ST_TO_ADDR
25621: LD_EXP 52
25625: PUSH
25626: FOR_TO
25627: IFFALSE 25663
// begin if flags [ i ] then
25629: LD_VAR 0 4
25633: PUSH
25634: LD_VAR 0 8
25638: ARRAY
25639: IFFALSE 25661
// tmp := tmp & i & ; ;
25641: LD_ADDR_VAR 0 3
25645: PUSH
25646: LD_VAR 0 3
25650: PUSH
25651: LD_VAR 0 8
25655: STR
25656: PUSH
25657: LD_STRING ;
25659: STR
25660: ST_TO_ADDR
// end ;
25661: GO 25626
25663: POP
25664: POP
// for i = 1 to hardcoreCounter do
25665: LD_ADDR_VAR 0 8
25669: PUSH
25670: DOUBLE
25671: LD_INT 1
25673: DEC
25674: ST_TO_ADDR
25675: LD_EXP 53
25679: PUSH
25680: FOR_TO
25681: IFFALSE 25727
// begin if flags [ normalCounter + i ] then
25683: LD_VAR 0 4
25687: PUSH
25688: LD_EXP 52
25692: PUSH
25693: LD_VAR 0 8
25697: PLUS
25698: ARRAY
25699: IFFALSE 25725
// tmp := tmp & ( 100 + i ) & ; ;
25701: LD_ADDR_VAR 0 3
25705: PUSH
25706: LD_VAR 0 3
25710: PUSH
25711: LD_INT 100
25713: PUSH
25714: LD_VAR 0 8
25718: PLUS
25719: STR
25720: PUSH
25721: LD_STRING ;
25723: STR
25724: ST_TO_ADDR
// end ;
25725: GO 25680
25727: POP
25728: POP
// if tmp then
25729: LD_VAR 0 3
25733: IFFALSE 25745
// active := tmp ;
25735: LD_ADDR_VAR 0 7
25739: PUSH
25740: LD_VAR 0 3
25744: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25745: LD_STRING getStreamItemsFromMission("
25747: PUSH
25748: LD_VAR 0 5
25752: STR
25753: PUSH
25754: LD_STRING ","
25756: STR
25757: PUSH
25758: LD_VAR 0 6
25762: STR
25763: PUSH
25764: LD_STRING ","
25766: STR
25767: PUSH
25768: LD_VAR 0 7
25772: STR
25773: PUSH
25774: LD_STRING ")
25776: STR
25777: PPUSH
25778: CALL_OW 559
// end else
25782: GO 25791
// ToLua ( getStreamItemsFromMission("","","") ) ;
25784: LD_STRING getStreamItemsFromMission("","","")
25786: PPUSH
25787: CALL_OW 559
// end ;
25791: LD_VAR 0 2
25795: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25796: LD_EXP 51
25800: PUSH
25801: LD_EXP 56
25805: AND
25806: IFFALSE 25930
25808: GO 25810
25810: DISABLE
25811: LD_INT 0
25813: PPUSH
25814: PPUSH
// begin enable ;
25815: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25816: LD_ADDR_VAR 0 2
25820: PUSH
25821: LD_INT 22
25823: PUSH
25824: LD_OWVAR 2
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 2
25835: PUSH
25836: LD_INT 34
25838: PUSH
25839: LD_INT 7
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 34
25848: PUSH
25849: LD_INT 45
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 34
25858: PUSH
25859: LD_INT 28
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 34
25868: PUSH
25869: LD_INT 47
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PPUSH
25887: CALL_OW 69
25891: ST_TO_ADDR
// if not tmp then
25892: LD_VAR 0 2
25896: NOT
25897: IFFALSE 25901
// exit ;
25899: GO 25930
// for i in tmp do
25901: LD_ADDR_VAR 0 1
25905: PUSH
25906: LD_VAR 0 2
25910: PUSH
25911: FOR_IN
25912: IFFALSE 25928
// begin SetLives ( i , 0 ) ;
25914: LD_VAR 0 1
25918: PPUSH
25919: LD_INT 0
25921: PPUSH
25922: CALL_OW 234
// end ;
25926: GO 25911
25928: POP
25929: POP
// end ;
25930: PPOPN 2
25932: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25933: LD_EXP 51
25937: PUSH
25938: LD_EXP 57
25942: AND
25943: IFFALSE 26027
25945: GO 25947
25947: DISABLE
25948: LD_INT 0
25950: PPUSH
25951: PPUSH
// begin enable ;
25952: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25953: LD_ADDR_VAR 0 2
25957: PUSH
25958: LD_INT 22
25960: PUSH
25961: LD_OWVAR 2
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 32
25972: PUSH
25973: LD_INT 3
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PPUSH
25984: CALL_OW 69
25988: ST_TO_ADDR
// if not tmp then
25989: LD_VAR 0 2
25993: NOT
25994: IFFALSE 25998
// exit ;
25996: GO 26027
// for i in tmp do
25998: LD_ADDR_VAR 0 1
26002: PUSH
26003: LD_VAR 0 2
26007: PUSH
26008: FOR_IN
26009: IFFALSE 26025
// begin SetLives ( i , 0 ) ;
26011: LD_VAR 0 1
26015: PPUSH
26016: LD_INT 0
26018: PPUSH
26019: CALL_OW 234
// end ;
26023: GO 26008
26025: POP
26026: POP
// end ;
26027: PPOPN 2
26029: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26030: LD_EXP 51
26034: PUSH
26035: LD_EXP 54
26039: AND
26040: IFFALSE 26133
26042: GO 26044
26044: DISABLE
26045: LD_INT 0
26047: PPUSH
// begin enable ;
26048: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26049: LD_ADDR_VAR 0 1
26053: PUSH
26054: LD_INT 22
26056: PUSH
26057: LD_OWVAR 2
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 2
26068: PUSH
26069: LD_INT 25
26071: PUSH
26072: LD_INT 5
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 25
26081: PUSH
26082: LD_INT 9
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 25
26091: PUSH
26092: LD_INT 8
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PPUSH
26109: CALL_OW 69
26113: PUSH
26114: FOR_IN
26115: IFFALSE 26131
// begin SetClass ( i , 1 ) ;
26117: LD_VAR 0 1
26121: PPUSH
26122: LD_INT 1
26124: PPUSH
26125: CALL_OW 336
// end ;
26129: GO 26114
26131: POP
26132: POP
// end ;
26133: PPOPN 1
26135: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26136: LD_EXP 51
26140: PUSH
26141: LD_EXP 55
26145: AND
26146: PUSH
26147: LD_OWVAR 65
26151: PUSH
26152: LD_INT 7
26154: LESS
26155: AND
26156: IFFALSE 26170
26158: GO 26160
26160: DISABLE
// begin enable ;
26161: ENABLE
// game_speed := 7 ;
26162: LD_ADDR_OWVAR 65
26166: PUSH
26167: LD_INT 7
26169: ST_TO_ADDR
// end ;
26170: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26171: LD_EXP 51
26175: PUSH
26176: LD_EXP 58
26180: AND
26181: IFFALSE 26383
26183: GO 26185
26185: DISABLE
26186: LD_INT 0
26188: PPUSH
26189: PPUSH
26190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26191: LD_ADDR_VAR 0 3
26195: PUSH
26196: LD_INT 81
26198: PUSH
26199: LD_OWVAR 2
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 21
26210: PUSH
26211: LD_INT 1
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PPUSH
26222: CALL_OW 69
26226: ST_TO_ADDR
// if not tmp then
26227: LD_VAR 0 3
26231: NOT
26232: IFFALSE 26236
// exit ;
26234: GO 26383
// if tmp > 5 then
26236: LD_VAR 0 3
26240: PUSH
26241: LD_INT 5
26243: GREATER
26244: IFFALSE 26256
// k := 5 else
26246: LD_ADDR_VAR 0 2
26250: PUSH
26251: LD_INT 5
26253: ST_TO_ADDR
26254: GO 26266
// k := tmp ;
26256: LD_ADDR_VAR 0 2
26260: PUSH
26261: LD_VAR 0 3
26265: ST_TO_ADDR
// for i := 1 to k do
26266: LD_ADDR_VAR 0 1
26270: PUSH
26271: DOUBLE
26272: LD_INT 1
26274: DEC
26275: ST_TO_ADDR
26276: LD_VAR 0 2
26280: PUSH
26281: FOR_TO
26282: IFFALSE 26381
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26284: LD_VAR 0 3
26288: PUSH
26289: LD_VAR 0 1
26293: ARRAY
26294: PPUSH
26295: LD_VAR 0 1
26299: PUSH
26300: LD_INT 4
26302: MOD
26303: PUSH
26304: LD_INT 1
26306: PLUS
26307: PPUSH
26308: CALL_OW 259
26312: PUSH
26313: LD_INT 10
26315: LESS
26316: IFFALSE 26379
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26318: LD_VAR 0 3
26322: PUSH
26323: LD_VAR 0 1
26327: ARRAY
26328: PPUSH
26329: LD_VAR 0 1
26333: PUSH
26334: LD_INT 4
26336: MOD
26337: PUSH
26338: LD_INT 1
26340: PLUS
26341: PPUSH
26342: LD_VAR 0 3
26346: PUSH
26347: LD_VAR 0 1
26351: ARRAY
26352: PPUSH
26353: LD_VAR 0 1
26357: PUSH
26358: LD_INT 4
26360: MOD
26361: PUSH
26362: LD_INT 1
26364: PLUS
26365: PPUSH
26366: CALL_OW 259
26370: PUSH
26371: LD_INT 1
26373: PLUS
26374: PPUSH
26375: CALL_OW 237
26379: GO 26281
26381: POP
26382: POP
// end ;
26383: PPOPN 3
26385: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26386: LD_EXP 51
26390: PUSH
26391: LD_EXP 59
26395: AND
26396: IFFALSE 26416
26398: GO 26400
26400: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26401: LD_INT 4
26403: PPUSH
26404: LD_OWVAR 2
26408: PPUSH
26409: LD_INT 0
26411: PPUSH
26412: CALL_OW 324
26416: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26417: LD_EXP 51
26421: PUSH
26422: LD_EXP 88
26426: AND
26427: IFFALSE 26447
26429: GO 26431
26431: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26432: LD_INT 19
26434: PPUSH
26435: LD_OWVAR 2
26439: PPUSH
26440: LD_INT 0
26442: PPUSH
26443: CALL_OW 324
26447: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26448: LD_EXP 51
26452: PUSH
26453: LD_EXP 60
26457: AND
26458: IFFALSE 26560
26460: GO 26462
26462: DISABLE
26463: LD_INT 0
26465: PPUSH
26466: PPUSH
// begin enable ;
26467: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26468: LD_ADDR_VAR 0 2
26472: PUSH
26473: LD_INT 22
26475: PUSH
26476: LD_OWVAR 2
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 2
26487: PUSH
26488: LD_INT 34
26490: PUSH
26491: LD_INT 11
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 34
26500: PUSH
26501: LD_INT 30
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: LIST
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PPUSH
26517: CALL_OW 69
26521: ST_TO_ADDR
// if not tmp then
26522: LD_VAR 0 2
26526: NOT
26527: IFFALSE 26531
// exit ;
26529: GO 26560
// for i in tmp do
26531: LD_ADDR_VAR 0 1
26535: PUSH
26536: LD_VAR 0 2
26540: PUSH
26541: FOR_IN
26542: IFFALSE 26558
// begin SetLives ( i , 0 ) ;
26544: LD_VAR 0 1
26548: PPUSH
26549: LD_INT 0
26551: PPUSH
26552: CALL_OW 234
// end ;
26556: GO 26541
26558: POP
26559: POP
// end ;
26560: PPOPN 2
26562: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26563: LD_EXP 51
26567: PUSH
26568: LD_EXP 61
26572: AND
26573: IFFALSE 26593
26575: GO 26577
26577: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26578: LD_INT 32
26580: PPUSH
26581: LD_OWVAR 2
26585: PPUSH
26586: LD_INT 0
26588: PPUSH
26589: CALL_OW 324
26593: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26594: LD_EXP 51
26598: PUSH
26599: LD_EXP 62
26603: AND
26604: IFFALSE 26785
26606: GO 26608
26608: DISABLE
26609: LD_INT 0
26611: PPUSH
26612: PPUSH
26613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26614: LD_ADDR_VAR 0 2
26618: PUSH
26619: LD_INT 22
26621: PUSH
26622: LD_OWVAR 2
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 33
26633: PUSH
26634: LD_INT 3
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PPUSH
26645: CALL_OW 69
26649: ST_TO_ADDR
// if not tmp then
26650: LD_VAR 0 2
26654: NOT
26655: IFFALSE 26659
// exit ;
26657: GO 26785
// side := 0 ;
26659: LD_ADDR_VAR 0 3
26663: PUSH
26664: LD_INT 0
26666: ST_TO_ADDR
// for i := 1 to 8 do
26667: LD_ADDR_VAR 0 1
26671: PUSH
26672: DOUBLE
26673: LD_INT 1
26675: DEC
26676: ST_TO_ADDR
26677: LD_INT 8
26679: PUSH
26680: FOR_TO
26681: IFFALSE 26729
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26683: LD_OWVAR 2
26687: PUSH
26688: LD_VAR 0 1
26692: NONEQUAL
26693: PUSH
26694: LD_OWVAR 2
26698: PPUSH
26699: LD_VAR 0 1
26703: PPUSH
26704: CALL_OW 81
26708: PUSH
26709: LD_INT 2
26711: EQUAL
26712: AND
26713: IFFALSE 26727
// begin side := i ;
26715: LD_ADDR_VAR 0 3
26719: PUSH
26720: LD_VAR 0 1
26724: ST_TO_ADDR
// break ;
26725: GO 26729
// end ;
26727: GO 26680
26729: POP
26730: POP
// if not side then
26731: LD_VAR 0 3
26735: NOT
26736: IFFALSE 26740
// exit ;
26738: GO 26785
// for i := 1 to tmp do
26740: LD_ADDR_VAR 0 1
26744: PUSH
26745: DOUBLE
26746: LD_INT 1
26748: DEC
26749: ST_TO_ADDR
26750: LD_VAR 0 2
26754: PUSH
26755: FOR_TO
26756: IFFALSE 26783
// if Prob ( 60 ) then
26758: LD_INT 60
26760: PPUSH
26761: CALL_OW 13
26765: IFFALSE 26781
// SetSide ( i , side ) ;
26767: LD_VAR 0 1
26771: PPUSH
26772: LD_VAR 0 3
26776: PPUSH
26777: CALL_OW 235
26781: GO 26755
26783: POP
26784: POP
// end ;
26785: PPOPN 3
26787: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26788: LD_EXP 51
26792: PUSH
26793: LD_EXP 64
26797: AND
26798: IFFALSE 26917
26800: GO 26802
26802: DISABLE
26803: LD_INT 0
26805: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26806: LD_ADDR_VAR 0 1
26810: PUSH
26811: LD_INT 22
26813: PUSH
26814: LD_OWVAR 2
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 21
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 3
26835: PUSH
26836: LD_INT 23
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: LIST
26854: PPUSH
26855: CALL_OW 69
26859: PUSH
26860: FOR_IN
26861: IFFALSE 26915
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26863: LD_VAR 0 1
26867: PPUSH
26868: CALL_OW 257
26872: PUSH
26873: LD_INT 1
26875: PUSH
26876: LD_INT 2
26878: PUSH
26879: LD_INT 3
26881: PUSH
26882: LD_INT 4
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: IN
26891: IFFALSE 26913
// SetClass ( un , rand ( 1 , 4 ) ) ;
26893: LD_VAR 0 1
26897: PPUSH
26898: LD_INT 1
26900: PPUSH
26901: LD_INT 4
26903: PPUSH
26904: CALL_OW 12
26908: PPUSH
26909: CALL_OW 336
26913: GO 26860
26915: POP
26916: POP
// end ;
26917: PPOPN 1
26919: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26920: LD_EXP 51
26924: PUSH
26925: LD_EXP 63
26929: AND
26930: IFFALSE 27009
26932: GO 26934
26934: DISABLE
26935: LD_INT 0
26937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26938: LD_ADDR_VAR 0 1
26942: PUSH
26943: LD_INT 22
26945: PUSH
26946: LD_OWVAR 2
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 21
26957: PUSH
26958: LD_INT 3
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PPUSH
26969: CALL_OW 69
26973: ST_TO_ADDR
// if not tmp then
26974: LD_VAR 0 1
26978: NOT
26979: IFFALSE 26983
// exit ;
26981: GO 27009
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26983: LD_VAR 0 1
26987: PUSH
26988: LD_INT 1
26990: PPUSH
26991: LD_VAR 0 1
26995: PPUSH
26996: CALL_OW 12
27000: ARRAY
27001: PPUSH
27002: LD_INT 100
27004: PPUSH
27005: CALL_OW 234
// end ;
27009: PPOPN 1
27011: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27012: LD_EXP 51
27016: PUSH
27017: LD_EXP 65
27021: AND
27022: IFFALSE 27120
27024: GO 27026
27026: DISABLE
27027: LD_INT 0
27029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27030: LD_ADDR_VAR 0 1
27034: PUSH
27035: LD_INT 22
27037: PUSH
27038: LD_OWVAR 2
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 21
27049: PUSH
27050: LD_INT 1
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PPUSH
27061: CALL_OW 69
27065: ST_TO_ADDR
// if not tmp then
27066: LD_VAR 0 1
27070: NOT
27071: IFFALSE 27075
// exit ;
27073: GO 27120
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27075: LD_VAR 0 1
27079: PUSH
27080: LD_INT 1
27082: PPUSH
27083: LD_VAR 0 1
27087: PPUSH
27088: CALL_OW 12
27092: ARRAY
27093: PPUSH
27094: LD_INT 1
27096: PPUSH
27097: LD_INT 4
27099: PPUSH
27100: CALL_OW 12
27104: PPUSH
27105: LD_INT 3000
27107: PPUSH
27108: LD_INT 9000
27110: PPUSH
27111: CALL_OW 12
27115: PPUSH
27116: CALL_OW 492
// end ;
27120: PPOPN 1
27122: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27123: LD_EXP 51
27127: PUSH
27128: LD_EXP 66
27132: AND
27133: IFFALSE 27153
27135: GO 27137
27137: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27138: LD_INT 1
27140: PPUSH
27141: LD_OWVAR 2
27145: PPUSH
27146: LD_INT 0
27148: PPUSH
27149: CALL_OW 324
27153: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27154: LD_EXP 51
27158: PUSH
27159: LD_EXP 67
27163: AND
27164: IFFALSE 27247
27166: GO 27168
27168: DISABLE
27169: LD_INT 0
27171: PPUSH
27172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27173: LD_ADDR_VAR 0 2
27177: PUSH
27178: LD_INT 22
27180: PUSH
27181: LD_OWVAR 2
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 21
27192: PUSH
27193: LD_INT 3
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PPUSH
27204: CALL_OW 69
27208: ST_TO_ADDR
// if not tmp then
27209: LD_VAR 0 2
27213: NOT
27214: IFFALSE 27218
// exit ;
27216: GO 27247
// for i in tmp do
27218: LD_ADDR_VAR 0 1
27222: PUSH
27223: LD_VAR 0 2
27227: PUSH
27228: FOR_IN
27229: IFFALSE 27245
// SetBLevel ( i , 10 ) ;
27231: LD_VAR 0 1
27235: PPUSH
27236: LD_INT 10
27238: PPUSH
27239: CALL_OW 241
27243: GO 27228
27245: POP
27246: POP
// end ;
27247: PPOPN 2
27249: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27250: LD_EXP 51
27254: PUSH
27255: LD_EXP 68
27259: AND
27260: IFFALSE 27371
27262: GO 27264
27264: DISABLE
27265: LD_INT 0
27267: PPUSH
27268: PPUSH
27269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27270: LD_ADDR_VAR 0 3
27274: PUSH
27275: LD_INT 22
27277: PUSH
27278: LD_OWVAR 2
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 25
27289: PUSH
27290: LD_INT 1
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PPUSH
27301: CALL_OW 69
27305: ST_TO_ADDR
// if not tmp then
27306: LD_VAR 0 3
27310: NOT
27311: IFFALSE 27315
// exit ;
27313: GO 27371
// un := tmp [ rand ( 1 , tmp ) ] ;
27315: LD_ADDR_VAR 0 2
27319: PUSH
27320: LD_VAR 0 3
27324: PUSH
27325: LD_INT 1
27327: PPUSH
27328: LD_VAR 0 3
27332: PPUSH
27333: CALL_OW 12
27337: ARRAY
27338: ST_TO_ADDR
// if Crawls ( un ) then
27339: LD_VAR 0 2
27343: PPUSH
27344: CALL_OW 318
27348: IFFALSE 27359
// ComWalk ( un ) ;
27350: LD_VAR 0 2
27354: PPUSH
27355: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27359: LD_VAR 0 2
27363: PPUSH
27364: LD_INT 5
27366: PPUSH
27367: CALL_OW 336
// end ;
27371: PPOPN 3
27373: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27374: LD_EXP 51
27378: PUSH
27379: LD_EXP 69
27383: AND
27384: PUSH
27385: LD_OWVAR 67
27389: PUSH
27390: LD_INT 4
27392: LESS
27393: AND
27394: IFFALSE 27413
27396: GO 27398
27398: DISABLE
// begin Difficulty := Difficulty + 1 ;
27399: LD_ADDR_OWVAR 67
27403: PUSH
27404: LD_OWVAR 67
27408: PUSH
27409: LD_INT 1
27411: PLUS
27412: ST_TO_ADDR
// end ;
27413: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27414: LD_EXP 51
27418: PUSH
27419: LD_EXP 70
27423: AND
27424: IFFALSE 27527
27426: GO 27428
27428: DISABLE
27429: LD_INT 0
27431: PPUSH
// begin for i := 1 to 5 do
27432: LD_ADDR_VAR 0 1
27436: PUSH
27437: DOUBLE
27438: LD_INT 1
27440: DEC
27441: ST_TO_ADDR
27442: LD_INT 5
27444: PUSH
27445: FOR_TO
27446: IFFALSE 27525
// begin uc_nation := nation_nature ;
27448: LD_ADDR_OWVAR 21
27452: PUSH
27453: LD_INT 0
27455: ST_TO_ADDR
// uc_side := 0 ;
27456: LD_ADDR_OWVAR 20
27460: PUSH
27461: LD_INT 0
27463: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27464: LD_ADDR_OWVAR 29
27468: PUSH
27469: LD_INT 12
27471: PUSH
27472: LD_INT 12
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: ST_TO_ADDR
// hc_agressivity := 20 ;
27479: LD_ADDR_OWVAR 35
27483: PUSH
27484: LD_INT 20
27486: ST_TO_ADDR
// hc_class := class_tiger ;
27487: LD_ADDR_OWVAR 28
27491: PUSH
27492: LD_INT 14
27494: ST_TO_ADDR
// hc_gallery :=  ;
27495: LD_ADDR_OWVAR 33
27499: PUSH
27500: LD_STRING 
27502: ST_TO_ADDR
// hc_name :=  ;
27503: LD_ADDR_OWVAR 26
27507: PUSH
27508: LD_STRING 
27510: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27511: CALL_OW 44
27515: PPUSH
27516: LD_INT 0
27518: PPUSH
27519: CALL_OW 51
// end ;
27523: GO 27445
27525: POP
27526: POP
// end ;
27527: PPOPN 1
27529: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27530: LD_EXP 51
27534: PUSH
27535: LD_EXP 71
27539: AND
27540: IFFALSE 27549
27542: GO 27544
27544: DISABLE
// StreamSibBomb ;
27545: CALL 27550 0 0
27549: END
// export function StreamSibBomb ; var i , x , y ; begin
27550: LD_INT 0
27552: PPUSH
27553: PPUSH
27554: PPUSH
27555: PPUSH
// result := false ;
27556: LD_ADDR_VAR 0 1
27560: PUSH
27561: LD_INT 0
27563: ST_TO_ADDR
// for i := 1 to 16 do
27564: LD_ADDR_VAR 0 2
27568: PUSH
27569: DOUBLE
27570: LD_INT 1
27572: DEC
27573: ST_TO_ADDR
27574: LD_INT 16
27576: PUSH
27577: FOR_TO
27578: IFFALSE 27777
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27580: LD_ADDR_VAR 0 3
27584: PUSH
27585: LD_INT 10
27587: PUSH
27588: LD_INT 20
27590: PUSH
27591: LD_INT 30
27593: PUSH
27594: LD_INT 40
27596: PUSH
27597: LD_INT 50
27599: PUSH
27600: LD_INT 60
27602: PUSH
27603: LD_INT 70
27605: PUSH
27606: LD_INT 80
27608: PUSH
27609: LD_INT 90
27611: PUSH
27612: LD_INT 100
27614: PUSH
27615: LD_INT 110
27617: PUSH
27618: LD_INT 120
27620: PUSH
27621: LD_INT 130
27623: PUSH
27624: LD_INT 140
27626: PUSH
27627: LD_INT 150
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 1
27649: PPUSH
27650: LD_INT 15
27652: PPUSH
27653: CALL_OW 12
27657: ARRAY
27658: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27659: LD_ADDR_VAR 0 4
27663: PUSH
27664: LD_INT 10
27666: PUSH
27667: LD_INT 20
27669: PUSH
27670: LD_INT 30
27672: PUSH
27673: LD_INT 40
27675: PUSH
27676: LD_INT 50
27678: PUSH
27679: LD_INT 60
27681: PUSH
27682: LD_INT 70
27684: PUSH
27685: LD_INT 80
27687: PUSH
27688: LD_INT 90
27690: PUSH
27691: LD_INT 100
27693: PUSH
27694: LD_INT 110
27696: PUSH
27697: LD_INT 120
27699: PUSH
27700: LD_INT 130
27702: PUSH
27703: LD_INT 140
27705: PUSH
27706: LD_INT 150
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 1
27728: PPUSH
27729: LD_INT 15
27731: PPUSH
27732: CALL_OW 12
27736: ARRAY
27737: ST_TO_ADDR
// if ValidHex ( x , y ) then
27738: LD_VAR 0 3
27742: PPUSH
27743: LD_VAR 0 4
27747: PPUSH
27748: CALL_OW 488
27752: IFFALSE 27775
// begin result := [ x , y ] ;
27754: LD_ADDR_VAR 0 1
27758: PUSH
27759: LD_VAR 0 3
27763: PUSH
27764: LD_VAR 0 4
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: ST_TO_ADDR
// break ;
27773: GO 27777
// end ; end ;
27775: GO 27577
27777: POP
27778: POP
// if result then
27779: LD_VAR 0 1
27783: IFFALSE 27843
// begin ToLua ( playSibBomb() ) ;
27785: LD_STRING playSibBomb()
27787: PPUSH
27788: CALL_OW 559
// wait ( 0 0$14 ) ;
27792: LD_INT 490
27794: PPUSH
27795: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27799: LD_VAR 0 1
27803: PUSH
27804: LD_INT 1
27806: ARRAY
27807: PPUSH
27808: LD_VAR 0 1
27812: PUSH
27813: LD_INT 2
27815: ARRAY
27816: PPUSH
27817: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27821: LD_VAR 0 1
27825: PUSH
27826: LD_INT 1
27828: ARRAY
27829: PPUSH
27830: LD_VAR 0 1
27834: PUSH
27835: LD_INT 2
27837: ARRAY
27838: PPUSH
27839: CALL_OW 429
// end ; end ;
27843: LD_VAR 0 1
27847: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27848: LD_EXP 51
27852: PUSH
27853: LD_EXP 73
27857: AND
27858: IFFALSE 27870
27860: GO 27862
27862: DISABLE
// YouLost (  ) ;
27863: LD_STRING 
27865: PPUSH
27866: CALL_OW 104
27870: END
// every 0 0$1 trigger StreamModeActive and sFog do
27871: LD_EXP 51
27875: PUSH
27876: LD_EXP 72
27880: AND
27881: IFFALSE 27895
27883: GO 27885
27885: DISABLE
// FogOff ( your_side ) ;
27886: LD_OWVAR 2
27890: PPUSH
27891: CALL_OW 344
27895: END
// every 0 0$1 trigger StreamModeActive and sSun do
27896: LD_EXP 51
27900: PUSH
27901: LD_EXP 74
27905: AND
27906: IFFALSE 27934
27908: GO 27910
27910: DISABLE
// begin solar_recharge_percent := 0 ;
27911: LD_ADDR_OWVAR 79
27915: PUSH
27916: LD_INT 0
27918: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27919: LD_INT 10500
27921: PPUSH
27922: CALL_OW 67
// solar_recharge_percent := 100 ;
27926: LD_ADDR_OWVAR 79
27930: PUSH
27931: LD_INT 100
27933: ST_TO_ADDR
// end ;
27934: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27935: LD_EXP 51
27939: PUSH
27940: LD_EXP 75
27944: AND
27945: IFFALSE 28184
27947: GO 27949
27949: DISABLE
27950: LD_INT 0
27952: PPUSH
27953: PPUSH
27954: PPUSH
// begin tmp := [ ] ;
27955: LD_ADDR_VAR 0 3
27959: PUSH
27960: EMPTY
27961: ST_TO_ADDR
// for i := 1 to 6 do
27962: LD_ADDR_VAR 0 1
27966: PUSH
27967: DOUBLE
27968: LD_INT 1
27970: DEC
27971: ST_TO_ADDR
27972: LD_INT 6
27974: PUSH
27975: FOR_TO
27976: IFFALSE 28081
// begin uc_nation := nation_nature ;
27978: LD_ADDR_OWVAR 21
27982: PUSH
27983: LD_INT 0
27985: ST_TO_ADDR
// uc_side := 0 ;
27986: LD_ADDR_OWVAR 20
27990: PUSH
27991: LD_INT 0
27993: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27994: LD_ADDR_OWVAR 29
27998: PUSH
27999: LD_INT 12
28001: PUSH
28002: LD_INT 12
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: ST_TO_ADDR
// hc_agressivity := 20 ;
28009: LD_ADDR_OWVAR 35
28013: PUSH
28014: LD_INT 20
28016: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28017: LD_ADDR_OWVAR 28
28021: PUSH
28022: LD_INT 17
28024: ST_TO_ADDR
// hc_gallery :=  ;
28025: LD_ADDR_OWVAR 33
28029: PUSH
28030: LD_STRING 
28032: ST_TO_ADDR
// hc_name :=  ;
28033: LD_ADDR_OWVAR 26
28037: PUSH
28038: LD_STRING 
28040: ST_TO_ADDR
// un := CreateHuman ;
28041: LD_ADDR_VAR 0 2
28045: PUSH
28046: CALL_OW 44
28050: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28051: LD_VAR 0 2
28055: PPUSH
28056: LD_INT 1
28058: PPUSH
28059: CALL_OW 51
// tmp := tmp ^ un ;
28063: LD_ADDR_VAR 0 3
28067: PUSH
28068: LD_VAR 0 3
28072: PUSH
28073: LD_VAR 0 2
28077: ADD
28078: ST_TO_ADDR
// end ;
28079: GO 27975
28081: POP
28082: POP
// repeat wait ( 0 0$1 ) ;
28083: LD_INT 35
28085: PPUSH
28086: CALL_OW 67
// for un in tmp do
28090: LD_ADDR_VAR 0 2
28094: PUSH
28095: LD_VAR 0 3
28099: PUSH
28100: FOR_IN
28101: IFFALSE 28175
// begin if IsDead ( un ) then
28103: LD_VAR 0 2
28107: PPUSH
28108: CALL_OW 301
28112: IFFALSE 28132
// begin tmp := tmp diff un ;
28114: LD_ADDR_VAR 0 3
28118: PUSH
28119: LD_VAR 0 3
28123: PUSH
28124: LD_VAR 0 2
28128: DIFF
28129: ST_TO_ADDR
// continue ;
28130: GO 28100
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28132: LD_VAR 0 2
28136: PPUSH
28137: LD_INT 3
28139: PUSH
28140: LD_INT 22
28142: PUSH
28143: LD_INT 0
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PPUSH
28154: CALL_OW 69
28158: PPUSH
28159: LD_VAR 0 2
28163: PPUSH
28164: CALL_OW 74
28168: PPUSH
28169: CALL_OW 115
// end ;
28173: GO 28100
28175: POP
28176: POP
// until not tmp ;
28177: LD_VAR 0 3
28181: NOT
28182: IFFALSE 28083
// end ;
28184: PPOPN 3
28186: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28187: LD_EXP 51
28191: PUSH
28192: LD_EXP 76
28196: AND
28197: IFFALSE 28251
28199: GO 28201
28201: DISABLE
// begin ToLua ( displayTroll(); ) ;
28202: LD_STRING displayTroll();
28204: PPUSH
28205: CALL_OW 559
// wait ( 3 3$00 ) ;
28209: LD_INT 6300
28211: PPUSH
28212: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28216: LD_STRING hideTroll();
28218: PPUSH
28219: CALL_OW 559
// wait ( 1 1$00 ) ;
28223: LD_INT 2100
28225: PPUSH
28226: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28230: LD_STRING displayTroll();
28232: PPUSH
28233: CALL_OW 559
// wait ( 1 1$00 ) ;
28237: LD_INT 2100
28239: PPUSH
28240: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28244: LD_STRING hideTroll();
28246: PPUSH
28247: CALL_OW 559
// end ;
28251: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28252: LD_EXP 51
28256: PUSH
28257: LD_EXP 77
28261: AND
28262: IFFALSE 28325
28264: GO 28266
28266: DISABLE
28267: LD_INT 0
28269: PPUSH
// begin p := 0 ;
28270: LD_ADDR_VAR 0 1
28274: PUSH
28275: LD_INT 0
28277: ST_TO_ADDR
// repeat game_speed := 1 ;
28278: LD_ADDR_OWVAR 65
28282: PUSH
28283: LD_INT 1
28285: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28286: LD_INT 35
28288: PPUSH
28289: CALL_OW 67
// p := p + 1 ;
28293: LD_ADDR_VAR 0 1
28297: PUSH
28298: LD_VAR 0 1
28302: PUSH
28303: LD_INT 1
28305: PLUS
28306: ST_TO_ADDR
// until p >= 60 ;
28307: LD_VAR 0 1
28311: PUSH
28312: LD_INT 60
28314: GREATEREQUAL
28315: IFFALSE 28278
// game_speed := 4 ;
28317: LD_ADDR_OWVAR 65
28321: PUSH
28322: LD_INT 4
28324: ST_TO_ADDR
// end ;
28325: PPOPN 1
28327: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28328: LD_EXP 51
28332: PUSH
28333: LD_EXP 78
28337: AND
28338: IFFALSE 28484
28340: GO 28342
28342: DISABLE
28343: LD_INT 0
28345: PPUSH
28346: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28347: LD_ADDR_VAR 0 1
28351: PUSH
28352: LD_INT 22
28354: PUSH
28355: LD_OWVAR 2
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 2
28366: PUSH
28367: LD_INT 30
28369: PUSH
28370: LD_INT 0
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 30
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: LIST
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PPUSH
28396: CALL_OW 69
28400: ST_TO_ADDR
// if not depot then
28401: LD_VAR 0 1
28405: NOT
28406: IFFALSE 28410
// exit ;
28408: GO 28484
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28410: LD_ADDR_VAR 0 2
28414: PUSH
28415: LD_VAR 0 1
28419: PUSH
28420: LD_INT 1
28422: PPUSH
28423: LD_VAR 0 1
28427: PPUSH
28428: CALL_OW 12
28432: ARRAY
28433: PPUSH
28434: CALL_OW 274
28438: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28439: LD_VAR 0 2
28443: PPUSH
28444: LD_INT 1
28446: PPUSH
28447: LD_INT 0
28449: PPUSH
28450: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28454: LD_VAR 0 2
28458: PPUSH
28459: LD_INT 2
28461: PPUSH
28462: LD_INT 0
28464: PPUSH
28465: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28469: LD_VAR 0 2
28473: PPUSH
28474: LD_INT 3
28476: PPUSH
28477: LD_INT 0
28479: PPUSH
28480: CALL_OW 277
// end ;
28484: PPOPN 2
28486: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28487: LD_EXP 51
28491: PUSH
28492: LD_EXP 79
28496: AND
28497: IFFALSE 28594
28499: GO 28501
28501: DISABLE
28502: LD_INT 0
28504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28505: LD_ADDR_VAR 0 1
28509: PUSH
28510: LD_INT 22
28512: PUSH
28513: LD_OWVAR 2
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 21
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 3
28534: PUSH
28535: LD_INT 23
28537: PUSH
28538: LD_INT 0
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: LIST
28553: PPUSH
28554: CALL_OW 69
28558: ST_TO_ADDR
// if not tmp then
28559: LD_VAR 0 1
28563: NOT
28564: IFFALSE 28568
// exit ;
28566: GO 28594
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28568: LD_VAR 0 1
28572: PUSH
28573: LD_INT 1
28575: PPUSH
28576: LD_VAR 0 1
28580: PPUSH
28581: CALL_OW 12
28585: ARRAY
28586: PPUSH
28587: LD_INT 200
28589: PPUSH
28590: CALL_OW 234
// end ;
28594: PPOPN 1
28596: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28597: LD_EXP 51
28601: PUSH
28602: LD_EXP 80
28606: AND
28607: IFFALSE 28686
28609: GO 28611
28611: DISABLE
28612: LD_INT 0
28614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28615: LD_ADDR_VAR 0 1
28619: PUSH
28620: LD_INT 22
28622: PUSH
28623: LD_OWVAR 2
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 21
28634: PUSH
28635: LD_INT 2
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PPUSH
28646: CALL_OW 69
28650: ST_TO_ADDR
// if not tmp then
28651: LD_VAR 0 1
28655: NOT
28656: IFFALSE 28660
// exit ;
28658: GO 28686
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28660: LD_VAR 0 1
28664: PUSH
28665: LD_INT 1
28667: PPUSH
28668: LD_VAR 0 1
28672: PPUSH
28673: CALL_OW 12
28677: ARRAY
28678: PPUSH
28679: LD_INT 60
28681: PPUSH
28682: CALL_OW 234
// end ;
28686: PPOPN 1
28688: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28689: LD_EXP 51
28693: PUSH
28694: LD_EXP 81
28698: AND
28699: IFFALSE 28798
28701: GO 28703
28703: DISABLE
28704: LD_INT 0
28706: PPUSH
28707: PPUSH
// begin enable ;
28708: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28709: LD_ADDR_VAR 0 1
28713: PUSH
28714: LD_INT 22
28716: PUSH
28717: LD_OWVAR 2
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 61
28728: PUSH
28729: EMPTY
28730: LIST
28731: PUSH
28732: LD_INT 33
28734: PUSH
28735: LD_INT 2
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: LIST
28746: PPUSH
28747: CALL_OW 69
28751: ST_TO_ADDR
// if not tmp then
28752: LD_VAR 0 1
28756: NOT
28757: IFFALSE 28761
// exit ;
28759: GO 28798
// for i in tmp do
28761: LD_ADDR_VAR 0 2
28765: PUSH
28766: LD_VAR 0 1
28770: PUSH
28771: FOR_IN
28772: IFFALSE 28796
// if IsControledBy ( i ) then
28774: LD_VAR 0 2
28778: PPUSH
28779: CALL_OW 312
28783: IFFALSE 28794
// ComUnlink ( i ) ;
28785: LD_VAR 0 2
28789: PPUSH
28790: CALL_OW 136
28794: GO 28771
28796: POP
28797: POP
// end ;
28798: PPOPN 2
28800: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28801: LD_EXP 51
28805: PUSH
28806: LD_EXP 82
28810: AND
28811: IFFALSE 28951
28813: GO 28815
28815: DISABLE
28816: LD_INT 0
28818: PPUSH
28819: PPUSH
// begin ToLua ( displayPowell(); ) ;
28820: LD_STRING displayPowell();
28822: PPUSH
28823: CALL_OW 559
// uc_side := 0 ;
28827: LD_ADDR_OWVAR 20
28831: PUSH
28832: LD_INT 0
28834: ST_TO_ADDR
// uc_nation := 2 ;
28835: LD_ADDR_OWVAR 21
28839: PUSH
28840: LD_INT 2
28842: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28843: LD_ADDR_OWVAR 37
28847: PUSH
28848: LD_INT 14
28850: ST_TO_ADDR
// vc_engine := engine_siberite ;
28851: LD_ADDR_OWVAR 39
28855: PUSH
28856: LD_INT 3
28858: ST_TO_ADDR
// vc_control := control_apeman ;
28859: LD_ADDR_OWVAR 38
28863: PUSH
28864: LD_INT 5
28866: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28867: LD_ADDR_OWVAR 40
28871: PUSH
28872: LD_INT 29
28874: ST_TO_ADDR
// un := CreateVehicle ;
28875: LD_ADDR_VAR 0 2
28879: PUSH
28880: CALL_OW 45
28884: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28885: LD_VAR 0 2
28889: PPUSH
28890: LD_INT 1
28892: PPUSH
28893: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28897: LD_INT 35
28899: PPUSH
28900: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28904: LD_VAR 0 2
28908: PPUSH
28909: LD_INT 22
28911: PUSH
28912: LD_OWVAR 2
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PPUSH
28921: CALL_OW 69
28925: PPUSH
28926: LD_VAR 0 2
28930: PPUSH
28931: CALL_OW 74
28935: PPUSH
28936: CALL_OW 115
// until IsDead ( un ) ;
28940: LD_VAR 0 2
28944: PPUSH
28945: CALL_OW 301
28949: IFFALSE 28897
// end ;
28951: PPOPN 2
28953: END
// every 0 0$1 trigger StreamModeActive and sStu do
28954: LD_EXP 51
28958: PUSH
28959: LD_EXP 90
28963: AND
28964: IFFALSE 28980
28966: GO 28968
28968: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28969: LD_STRING displayStucuk();
28971: PPUSH
28972: CALL_OW 559
// ResetFog ;
28976: CALL_OW 335
// end ;
28980: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28981: LD_EXP 51
28985: PUSH
28986: LD_EXP 83
28990: AND
28991: IFFALSE 29132
28993: GO 28995
28995: DISABLE
28996: LD_INT 0
28998: PPUSH
28999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29000: LD_ADDR_VAR 0 2
29004: PUSH
29005: LD_INT 22
29007: PUSH
29008: LD_OWVAR 2
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 21
29019: PUSH
29020: LD_INT 1
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PPUSH
29031: CALL_OW 69
29035: ST_TO_ADDR
// if not tmp then
29036: LD_VAR 0 2
29040: NOT
29041: IFFALSE 29045
// exit ;
29043: GO 29132
// un := tmp [ rand ( 1 , tmp ) ] ;
29045: LD_ADDR_VAR 0 1
29049: PUSH
29050: LD_VAR 0 2
29054: PUSH
29055: LD_INT 1
29057: PPUSH
29058: LD_VAR 0 2
29062: PPUSH
29063: CALL_OW 12
29067: ARRAY
29068: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29069: LD_VAR 0 1
29073: PPUSH
29074: LD_INT 0
29076: PPUSH
29077: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29081: LD_VAR 0 1
29085: PPUSH
29086: LD_OWVAR 3
29090: PUSH
29091: LD_VAR 0 1
29095: DIFF
29096: PPUSH
29097: LD_VAR 0 1
29101: PPUSH
29102: CALL_OW 74
29106: PPUSH
29107: CALL_OW 115
// wait ( 0 0$20 ) ;
29111: LD_INT 700
29113: PPUSH
29114: CALL_OW 67
// SetSide ( un , your_side ) ;
29118: LD_VAR 0 1
29122: PPUSH
29123: LD_OWVAR 2
29127: PPUSH
29128: CALL_OW 235
// end ;
29132: PPOPN 2
29134: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29135: LD_EXP 51
29139: PUSH
29140: LD_EXP 84
29144: AND
29145: IFFALSE 29251
29147: GO 29149
29149: DISABLE
29150: LD_INT 0
29152: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29153: LD_ADDR_VAR 0 1
29157: PUSH
29158: LD_INT 22
29160: PUSH
29161: LD_OWVAR 2
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 2
29172: PUSH
29173: LD_INT 30
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 30
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: LIST
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PPUSH
29202: CALL_OW 69
29206: ST_TO_ADDR
// if not depot then
29207: LD_VAR 0 1
29211: NOT
29212: IFFALSE 29216
// exit ;
29214: GO 29251
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29216: LD_VAR 0 1
29220: PUSH
29221: LD_INT 1
29223: ARRAY
29224: PPUSH
29225: CALL_OW 250
29229: PPUSH
29230: LD_VAR 0 1
29234: PUSH
29235: LD_INT 1
29237: ARRAY
29238: PPUSH
29239: CALL_OW 251
29243: PPUSH
29244: LD_INT 70
29246: PPUSH
29247: CALL_OW 495
// end ;
29251: PPOPN 1
29253: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29254: LD_EXP 51
29258: PUSH
29259: LD_EXP 85
29263: AND
29264: IFFALSE 29475
29266: GO 29268
29268: DISABLE
29269: LD_INT 0
29271: PPUSH
29272: PPUSH
29273: PPUSH
29274: PPUSH
29275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29276: LD_ADDR_VAR 0 5
29280: PUSH
29281: LD_INT 22
29283: PUSH
29284: LD_OWVAR 2
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 21
29295: PUSH
29296: LD_INT 1
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PPUSH
29307: CALL_OW 69
29311: ST_TO_ADDR
// if not tmp then
29312: LD_VAR 0 5
29316: NOT
29317: IFFALSE 29321
// exit ;
29319: GO 29475
// for i in tmp do
29321: LD_ADDR_VAR 0 1
29325: PUSH
29326: LD_VAR 0 5
29330: PUSH
29331: FOR_IN
29332: IFFALSE 29473
// begin d := rand ( 0 , 5 ) ;
29334: LD_ADDR_VAR 0 4
29338: PUSH
29339: LD_INT 0
29341: PPUSH
29342: LD_INT 5
29344: PPUSH
29345: CALL_OW 12
29349: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29350: LD_ADDR_VAR 0 2
29354: PUSH
29355: LD_VAR 0 1
29359: PPUSH
29360: CALL_OW 250
29364: PPUSH
29365: LD_VAR 0 4
29369: PPUSH
29370: LD_INT 3
29372: PPUSH
29373: LD_INT 12
29375: PPUSH
29376: CALL_OW 12
29380: PPUSH
29381: CALL_OW 272
29385: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29386: LD_ADDR_VAR 0 3
29390: PUSH
29391: LD_VAR 0 1
29395: PPUSH
29396: CALL_OW 251
29400: PPUSH
29401: LD_VAR 0 4
29405: PPUSH
29406: LD_INT 3
29408: PPUSH
29409: LD_INT 12
29411: PPUSH
29412: CALL_OW 12
29416: PPUSH
29417: CALL_OW 273
29421: ST_TO_ADDR
// if ValidHex ( x , y ) then
29422: LD_VAR 0 2
29426: PPUSH
29427: LD_VAR 0 3
29431: PPUSH
29432: CALL_OW 488
29436: IFFALSE 29471
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29438: LD_VAR 0 1
29442: PPUSH
29443: LD_VAR 0 2
29447: PPUSH
29448: LD_VAR 0 3
29452: PPUSH
29453: LD_INT 3
29455: PPUSH
29456: LD_INT 6
29458: PPUSH
29459: CALL_OW 12
29463: PPUSH
29464: LD_INT 1
29466: PPUSH
29467: CALL_OW 483
// end ;
29471: GO 29331
29473: POP
29474: POP
// end ;
29475: PPOPN 5
29477: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29478: LD_EXP 51
29482: PUSH
29483: LD_EXP 86
29487: AND
29488: IFFALSE 29582
29490: GO 29492
29492: DISABLE
29493: LD_INT 0
29495: PPUSH
29496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29497: LD_ADDR_VAR 0 2
29501: PUSH
29502: LD_INT 22
29504: PUSH
29505: LD_OWVAR 2
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 32
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 21
29526: PUSH
29527: LD_INT 2
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: LIST
29538: PPUSH
29539: CALL_OW 69
29543: ST_TO_ADDR
// if not tmp then
29544: LD_VAR 0 2
29548: NOT
29549: IFFALSE 29553
// exit ;
29551: GO 29582
// for i in tmp do
29553: LD_ADDR_VAR 0 1
29557: PUSH
29558: LD_VAR 0 2
29562: PUSH
29563: FOR_IN
29564: IFFALSE 29580
// SetFuel ( i , 0 ) ;
29566: LD_VAR 0 1
29570: PPUSH
29571: LD_INT 0
29573: PPUSH
29574: CALL_OW 240
29578: GO 29563
29580: POP
29581: POP
// end ;
29582: PPOPN 2
29584: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29585: LD_EXP 51
29589: PUSH
29590: LD_EXP 87
29594: AND
29595: IFFALSE 29661
29597: GO 29599
29599: DISABLE
29600: LD_INT 0
29602: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29603: LD_ADDR_VAR 0 1
29607: PUSH
29608: LD_INT 22
29610: PUSH
29611: LD_OWVAR 2
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 30
29622: PUSH
29623: LD_INT 29
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PPUSH
29634: CALL_OW 69
29638: ST_TO_ADDR
// if not tmp then
29639: LD_VAR 0 1
29643: NOT
29644: IFFALSE 29648
// exit ;
29646: GO 29661
// DestroyUnit ( tmp [ 1 ] ) ;
29648: LD_VAR 0 1
29652: PUSH
29653: LD_INT 1
29655: ARRAY
29656: PPUSH
29657: CALL_OW 65
// end ;
29661: PPOPN 1
29663: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29664: LD_EXP 51
29668: PUSH
29669: LD_EXP 89
29673: AND
29674: IFFALSE 29803
29676: GO 29678
29678: DISABLE
29679: LD_INT 0
29681: PPUSH
// begin uc_side := 0 ;
29682: LD_ADDR_OWVAR 20
29686: PUSH
29687: LD_INT 0
29689: ST_TO_ADDR
// uc_nation := nation_arabian ;
29690: LD_ADDR_OWVAR 21
29694: PUSH
29695: LD_INT 2
29697: ST_TO_ADDR
// hc_gallery :=  ;
29698: LD_ADDR_OWVAR 33
29702: PUSH
29703: LD_STRING 
29705: ST_TO_ADDR
// hc_name :=  ;
29706: LD_ADDR_OWVAR 26
29710: PUSH
29711: LD_STRING 
29713: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29714: LD_INT 1
29716: PPUSH
29717: LD_INT 11
29719: PPUSH
29720: LD_INT 10
29722: PPUSH
29723: CALL_OW 380
// un := CreateHuman ;
29727: LD_ADDR_VAR 0 1
29731: PUSH
29732: CALL_OW 44
29736: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29737: LD_VAR 0 1
29741: PPUSH
29742: LD_INT 1
29744: PPUSH
29745: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29749: LD_INT 35
29751: PPUSH
29752: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29756: LD_VAR 0 1
29760: PPUSH
29761: LD_INT 22
29763: PUSH
29764: LD_OWVAR 2
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PPUSH
29773: CALL_OW 69
29777: PPUSH
29778: LD_VAR 0 1
29782: PPUSH
29783: CALL_OW 74
29787: PPUSH
29788: CALL_OW 115
// until IsDead ( un ) ;
29792: LD_VAR 0 1
29796: PPUSH
29797: CALL_OW 301
29801: IFFALSE 29749
// end ;
29803: PPOPN 1
29805: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29806: LD_EXP 51
29810: PUSH
29811: LD_EXP 91
29815: AND
29816: IFFALSE 29828
29818: GO 29820
29820: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29821: LD_STRING earthquake(getX(game), 0, 32)
29823: PPUSH
29824: CALL_OW 559
29828: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29829: LD_EXP 51
29833: PUSH
29834: LD_EXP 92
29838: AND
29839: IFFALSE 29930
29841: GO 29843
29843: DISABLE
29844: LD_INT 0
29846: PPUSH
// begin enable ;
29847: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29848: LD_ADDR_VAR 0 1
29852: PUSH
29853: LD_INT 22
29855: PUSH
29856: LD_OWVAR 2
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 21
29867: PUSH
29868: LD_INT 2
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 33
29877: PUSH
29878: LD_INT 3
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: LIST
29889: PPUSH
29890: CALL_OW 69
29894: ST_TO_ADDR
// if not tmp then
29895: LD_VAR 0 1
29899: NOT
29900: IFFALSE 29904
// exit ;
29902: GO 29930
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29904: LD_VAR 0 1
29908: PUSH
29909: LD_INT 1
29911: PPUSH
29912: LD_VAR 0 1
29916: PPUSH
29917: CALL_OW 12
29921: ARRAY
29922: PPUSH
29923: LD_INT 1
29925: PPUSH
29926: CALL_OW 234
// end ;
29930: PPOPN 1
29932: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29933: LD_EXP 51
29937: PUSH
29938: LD_EXP 93
29942: AND
29943: IFFALSE 30084
29945: GO 29947
29947: DISABLE
29948: LD_INT 0
29950: PPUSH
29951: PPUSH
29952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29953: LD_ADDR_VAR 0 3
29957: PUSH
29958: LD_INT 22
29960: PUSH
29961: LD_OWVAR 2
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 25
29972: PUSH
29973: LD_INT 1
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PPUSH
29984: CALL_OW 69
29988: ST_TO_ADDR
// if not tmp then
29989: LD_VAR 0 3
29993: NOT
29994: IFFALSE 29998
// exit ;
29996: GO 30084
// un := tmp [ rand ( 1 , tmp ) ] ;
29998: LD_ADDR_VAR 0 2
30002: PUSH
30003: LD_VAR 0 3
30007: PUSH
30008: LD_INT 1
30010: PPUSH
30011: LD_VAR 0 3
30015: PPUSH
30016: CALL_OW 12
30020: ARRAY
30021: ST_TO_ADDR
// if Crawls ( un ) then
30022: LD_VAR 0 2
30026: PPUSH
30027: CALL_OW 318
30031: IFFALSE 30042
// ComWalk ( un ) ;
30033: LD_VAR 0 2
30037: PPUSH
30038: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30042: LD_VAR 0 2
30046: PPUSH
30047: LD_INT 9
30049: PPUSH
30050: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30054: LD_INT 28
30056: PPUSH
30057: LD_OWVAR 2
30061: PPUSH
30062: LD_INT 2
30064: PPUSH
30065: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30069: LD_INT 29
30071: PPUSH
30072: LD_OWVAR 2
30076: PPUSH
30077: LD_INT 2
30079: PPUSH
30080: CALL_OW 322
// end ;
30084: PPOPN 3
30086: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30087: LD_EXP 51
30091: PUSH
30092: LD_EXP 94
30096: AND
30097: IFFALSE 30208
30099: GO 30101
30101: DISABLE
30102: LD_INT 0
30104: PPUSH
30105: PPUSH
30106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30107: LD_ADDR_VAR 0 3
30111: PUSH
30112: LD_INT 22
30114: PUSH
30115: LD_OWVAR 2
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 25
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PPUSH
30138: CALL_OW 69
30142: ST_TO_ADDR
// if not tmp then
30143: LD_VAR 0 3
30147: NOT
30148: IFFALSE 30152
// exit ;
30150: GO 30208
// un := tmp [ rand ( 1 , tmp ) ] ;
30152: LD_ADDR_VAR 0 2
30156: PUSH
30157: LD_VAR 0 3
30161: PUSH
30162: LD_INT 1
30164: PPUSH
30165: LD_VAR 0 3
30169: PPUSH
30170: CALL_OW 12
30174: ARRAY
30175: ST_TO_ADDR
// if Crawls ( un ) then
30176: LD_VAR 0 2
30180: PPUSH
30181: CALL_OW 318
30185: IFFALSE 30196
// ComWalk ( un ) ;
30187: LD_VAR 0 2
30191: PPUSH
30192: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30196: LD_VAR 0 2
30200: PPUSH
30201: LD_INT 8
30203: PPUSH
30204: CALL_OW 336
// end ;
30208: PPOPN 3
30210: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30211: LD_EXP 51
30215: PUSH
30216: LD_EXP 95
30220: AND
30221: IFFALSE 30365
30223: GO 30225
30225: DISABLE
30226: LD_INT 0
30228: PPUSH
30229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30230: LD_ADDR_VAR 0 2
30234: PUSH
30235: LD_INT 22
30237: PUSH
30238: LD_OWVAR 2
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 21
30249: PUSH
30250: LD_INT 2
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 2
30259: PUSH
30260: LD_INT 34
30262: PUSH
30263: LD_INT 12
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 34
30272: PUSH
30273: LD_INT 51
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 34
30282: PUSH
30283: LD_INT 32
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: LIST
30300: PPUSH
30301: CALL_OW 69
30305: ST_TO_ADDR
// if not tmp then
30306: LD_VAR 0 2
30310: NOT
30311: IFFALSE 30315
// exit ;
30313: GO 30365
// for i in tmp do
30315: LD_ADDR_VAR 0 1
30319: PUSH
30320: LD_VAR 0 2
30324: PUSH
30325: FOR_IN
30326: IFFALSE 30363
// if GetCargo ( i , mat_artifact ) = 0 then
30328: LD_VAR 0 1
30332: PPUSH
30333: LD_INT 4
30335: PPUSH
30336: CALL_OW 289
30340: PUSH
30341: LD_INT 0
30343: EQUAL
30344: IFFALSE 30361
// SetCargo ( i , mat_siberit , 100 ) ;
30346: LD_VAR 0 1
30350: PPUSH
30351: LD_INT 3
30353: PPUSH
30354: LD_INT 100
30356: PPUSH
30357: CALL_OW 290
30361: GO 30325
30363: POP
30364: POP
// end ;
30365: PPOPN 2
30367: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30368: LD_EXP 51
30372: PUSH
30373: LD_EXP 96
30377: AND
30378: IFFALSE 30561
30380: GO 30382
30382: DISABLE
30383: LD_INT 0
30385: PPUSH
30386: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30387: LD_ADDR_VAR 0 2
30391: PUSH
30392: LD_INT 22
30394: PUSH
30395: LD_OWVAR 2
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PPUSH
30404: CALL_OW 69
30408: ST_TO_ADDR
// if not tmp then
30409: LD_VAR 0 2
30413: NOT
30414: IFFALSE 30418
// exit ;
30416: GO 30561
// for i := 1 to 2 do
30418: LD_ADDR_VAR 0 1
30422: PUSH
30423: DOUBLE
30424: LD_INT 1
30426: DEC
30427: ST_TO_ADDR
30428: LD_INT 2
30430: PUSH
30431: FOR_TO
30432: IFFALSE 30559
// begin uc_side := your_side ;
30434: LD_ADDR_OWVAR 20
30438: PUSH
30439: LD_OWVAR 2
30443: ST_TO_ADDR
// uc_nation := nation_american ;
30444: LD_ADDR_OWVAR 21
30448: PUSH
30449: LD_INT 1
30451: ST_TO_ADDR
// vc_chassis := us_morphling ;
30452: LD_ADDR_OWVAR 37
30456: PUSH
30457: LD_INT 5
30459: ST_TO_ADDR
// vc_engine := engine_siberite ;
30460: LD_ADDR_OWVAR 39
30464: PUSH
30465: LD_INT 3
30467: ST_TO_ADDR
// vc_control := control_computer ;
30468: LD_ADDR_OWVAR 38
30472: PUSH
30473: LD_INT 3
30475: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30476: LD_ADDR_OWVAR 40
30480: PUSH
30481: LD_INT 10
30483: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30484: LD_VAR 0 2
30488: PUSH
30489: LD_INT 1
30491: ARRAY
30492: PPUSH
30493: CALL_OW 310
30497: NOT
30498: IFFALSE 30545
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30500: CALL_OW 45
30504: PPUSH
30505: LD_VAR 0 2
30509: PUSH
30510: LD_INT 1
30512: ARRAY
30513: PPUSH
30514: CALL_OW 250
30518: PPUSH
30519: LD_VAR 0 2
30523: PUSH
30524: LD_INT 1
30526: ARRAY
30527: PPUSH
30528: CALL_OW 251
30532: PPUSH
30533: LD_INT 12
30535: PPUSH
30536: LD_INT 1
30538: PPUSH
30539: CALL_OW 50
30543: GO 30557
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30545: CALL_OW 45
30549: PPUSH
30550: LD_INT 1
30552: PPUSH
30553: CALL_OW 51
// end ;
30557: GO 30431
30559: POP
30560: POP
// end ;
30561: PPOPN 2
30563: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30564: LD_EXP 51
30568: PUSH
30569: LD_EXP 97
30573: AND
30574: IFFALSE 30796
30576: GO 30578
30578: DISABLE
30579: LD_INT 0
30581: PPUSH
30582: PPUSH
30583: PPUSH
30584: PPUSH
30585: PPUSH
30586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30587: LD_ADDR_VAR 0 6
30591: PUSH
30592: LD_INT 22
30594: PUSH
30595: LD_OWVAR 2
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 21
30606: PUSH
30607: LD_INT 1
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 3
30616: PUSH
30617: LD_INT 23
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: LIST
30635: PPUSH
30636: CALL_OW 69
30640: ST_TO_ADDR
// if not tmp then
30641: LD_VAR 0 6
30645: NOT
30646: IFFALSE 30650
// exit ;
30648: GO 30796
// s1 := rand ( 1 , 4 ) ;
30650: LD_ADDR_VAR 0 2
30654: PUSH
30655: LD_INT 1
30657: PPUSH
30658: LD_INT 4
30660: PPUSH
30661: CALL_OW 12
30665: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30666: LD_ADDR_VAR 0 4
30670: PUSH
30671: LD_VAR 0 6
30675: PUSH
30676: LD_INT 1
30678: ARRAY
30679: PPUSH
30680: LD_VAR 0 2
30684: PPUSH
30685: CALL_OW 259
30689: ST_TO_ADDR
// if s1 = 1 then
30690: LD_VAR 0 2
30694: PUSH
30695: LD_INT 1
30697: EQUAL
30698: IFFALSE 30718
// s2 := rand ( 2 , 4 ) else
30700: LD_ADDR_VAR 0 3
30704: PUSH
30705: LD_INT 2
30707: PPUSH
30708: LD_INT 4
30710: PPUSH
30711: CALL_OW 12
30715: ST_TO_ADDR
30716: GO 30726
// s2 := 1 ;
30718: LD_ADDR_VAR 0 3
30722: PUSH
30723: LD_INT 1
30725: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30726: LD_ADDR_VAR 0 5
30730: PUSH
30731: LD_VAR 0 6
30735: PUSH
30736: LD_INT 1
30738: ARRAY
30739: PPUSH
30740: LD_VAR 0 3
30744: PPUSH
30745: CALL_OW 259
30749: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30750: LD_VAR 0 6
30754: PUSH
30755: LD_INT 1
30757: ARRAY
30758: PPUSH
30759: LD_VAR 0 2
30763: PPUSH
30764: LD_VAR 0 5
30768: PPUSH
30769: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30773: LD_VAR 0 6
30777: PUSH
30778: LD_INT 1
30780: ARRAY
30781: PPUSH
30782: LD_VAR 0 3
30786: PPUSH
30787: LD_VAR 0 4
30791: PPUSH
30792: CALL_OW 237
// end ;
30796: PPOPN 6
30798: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30799: LD_EXP 51
30803: PUSH
30804: LD_EXP 98
30808: AND
30809: IFFALSE 30888
30811: GO 30813
30813: DISABLE
30814: LD_INT 0
30816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30817: LD_ADDR_VAR 0 1
30821: PUSH
30822: LD_INT 22
30824: PUSH
30825: LD_OWVAR 2
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 30
30836: PUSH
30837: LD_INT 3
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PPUSH
30848: CALL_OW 69
30852: ST_TO_ADDR
// if not tmp then
30853: LD_VAR 0 1
30857: NOT
30858: IFFALSE 30862
// exit ;
30860: GO 30888
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30862: LD_VAR 0 1
30866: PUSH
30867: LD_INT 1
30869: PPUSH
30870: LD_VAR 0 1
30874: PPUSH
30875: CALL_OW 12
30879: ARRAY
30880: PPUSH
30881: LD_INT 1
30883: PPUSH
30884: CALL_OW 234
// end ;
30888: PPOPN 1
30890: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30891: LD_EXP 51
30895: PUSH
30896: LD_EXP 99
30900: AND
30901: IFFALSE 31013
30903: GO 30905
30905: DISABLE
30906: LD_INT 0
30908: PPUSH
30909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30910: LD_ADDR_VAR 0 2
30914: PUSH
30915: LD_INT 22
30917: PUSH
30918: LD_OWVAR 2
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: LD_INT 30
30932: PUSH
30933: LD_INT 27
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 30
30942: PUSH
30943: LD_INT 26
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 30
30952: PUSH
30953: LD_INT 28
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PPUSH
30970: CALL_OW 69
30974: ST_TO_ADDR
// if not tmp then
30975: LD_VAR 0 2
30979: NOT
30980: IFFALSE 30984
// exit ;
30982: GO 31013
// for i in tmp do
30984: LD_ADDR_VAR 0 1
30988: PUSH
30989: LD_VAR 0 2
30993: PUSH
30994: FOR_IN
30995: IFFALSE 31011
// SetLives ( i , 1 ) ;
30997: LD_VAR 0 1
31001: PPUSH
31002: LD_INT 1
31004: PPUSH
31005: CALL_OW 234
31009: GO 30994
31011: POP
31012: POP
// end ;
31013: PPOPN 2
31015: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31016: LD_EXP 51
31020: PUSH
31021: LD_EXP 100
31025: AND
31026: IFFALSE 31313
31028: GO 31030
31030: DISABLE
31031: LD_INT 0
31033: PPUSH
31034: PPUSH
31035: PPUSH
// begin i := rand ( 1 , 7 ) ;
31036: LD_ADDR_VAR 0 1
31040: PUSH
31041: LD_INT 1
31043: PPUSH
31044: LD_INT 7
31046: PPUSH
31047: CALL_OW 12
31051: ST_TO_ADDR
// case i of 1 :
31052: LD_VAR 0 1
31056: PUSH
31057: LD_INT 1
31059: DOUBLE
31060: EQUAL
31061: IFTRUE 31065
31063: GO 31075
31065: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31066: LD_STRING earthquake(getX(game), 0, 32)
31068: PPUSH
31069: CALL_OW 559
31073: GO 31313
31075: LD_INT 2
31077: DOUBLE
31078: EQUAL
31079: IFTRUE 31083
31081: GO 31097
31083: POP
// begin ToLua ( displayStucuk(); ) ;
31084: LD_STRING displayStucuk();
31086: PPUSH
31087: CALL_OW 559
// ResetFog ;
31091: CALL_OW 335
// end ; 3 :
31095: GO 31313
31097: LD_INT 3
31099: DOUBLE
31100: EQUAL
31101: IFTRUE 31105
31103: GO 31209
31105: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31106: LD_ADDR_VAR 0 2
31110: PUSH
31111: LD_INT 22
31113: PUSH
31114: LD_OWVAR 2
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 25
31125: PUSH
31126: LD_INT 1
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PPUSH
31137: CALL_OW 69
31141: ST_TO_ADDR
// if not tmp then
31142: LD_VAR 0 2
31146: NOT
31147: IFFALSE 31151
// exit ;
31149: GO 31313
// un := tmp [ rand ( 1 , tmp ) ] ;
31151: LD_ADDR_VAR 0 3
31155: PUSH
31156: LD_VAR 0 2
31160: PUSH
31161: LD_INT 1
31163: PPUSH
31164: LD_VAR 0 2
31168: PPUSH
31169: CALL_OW 12
31173: ARRAY
31174: ST_TO_ADDR
// if Crawls ( un ) then
31175: LD_VAR 0 3
31179: PPUSH
31180: CALL_OW 318
31184: IFFALSE 31195
// ComWalk ( un ) ;
31186: LD_VAR 0 3
31190: PPUSH
31191: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31195: LD_VAR 0 3
31199: PPUSH
31200: LD_INT 8
31202: PPUSH
31203: CALL_OW 336
// end ; 4 :
31207: GO 31313
31209: LD_INT 4
31211: DOUBLE
31212: EQUAL
31213: IFTRUE 31217
31215: GO 31291
31217: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31218: LD_ADDR_VAR 0 2
31222: PUSH
31223: LD_INT 22
31225: PUSH
31226: LD_OWVAR 2
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 30
31237: PUSH
31238: LD_INT 29
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PPUSH
31249: CALL_OW 69
31253: ST_TO_ADDR
// if not tmp then
31254: LD_VAR 0 2
31258: NOT
31259: IFFALSE 31263
// exit ;
31261: GO 31313
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31263: LD_VAR 0 2
31267: PUSH
31268: LD_INT 1
31270: ARRAY
31271: PPUSH
31272: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31276: LD_VAR 0 2
31280: PUSH
31281: LD_INT 1
31283: ARRAY
31284: PPUSH
31285: CALL_OW 65
// end ; 5 .. 7 :
31289: GO 31313
31291: LD_INT 5
31293: DOUBLE
31294: GREATEREQUAL
31295: IFFALSE 31303
31297: LD_INT 7
31299: DOUBLE
31300: LESSEQUAL
31301: IFTRUE 31305
31303: GO 31312
31305: POP
// StreamSibBomb ; end ;
31306: CALL 27550 0 0
31310: GO 31313
31312: POP
// end ;
31313: PPOPN 3
31315: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31316: LD_EXP 51
31320: PUSH
31321: LD_EXP 101
31325: AND
31326: IFFALSE 31482
31328: GO 31330
31330: DISABLE
31331: LD_INT 0
31333: PPUSH
31334: PPUSH
31335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31336: LD_ADDR_VAR 0 2
31340: PUSH
31341: LD_INT 81
31343: PUSH
31344: LD_OWVAR 2
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 2
31355: PUSH
31356: LD_INT 21
31358: PUSH
31359: LD_INT 1
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 21
31368: PUSH
31369: LD_INT 2
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: LIST
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PPUSH
31385: CALL_OW 69
31389: ST_TO_ADDR
// if not tmp then
31390: LD_VAR 0 2
31394: NOT
31395: IFFALSE 31399
// exit ;
31397: GO 31482
// p := 0 ;
31399: LD_ADDR_VAR 0 3
31403: PUSH
31404: LD_INT 0
31406: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31407: LD_INT 35
31409: PPUSH
31410: CALL_OW 67
// p := p + 1 ;
31414: LD_ADDR_VAR 0 3
31418: PUSH
31419: LD_VAR 0 3
31423: PUSH
31424: LD_INT 1
31426: PLUS
31427: ST_TO_ADDR
// for i in tmp do
31428: LD_ADDR_VAR 0 1
31432: PUSH
31433: LD_VAR 0 2
31437: PUSH
31438: FOR_IN
31439: IFFALSE 31470
// if GetLives ( i ) < 1000 then
31441: LD_VAR 0 1
31445: PPUSH
31446: CALL_OW 256
31450: PUSH
31451: LD_INT 1000
31453: LESS
31454: IFFALSE 31468
// SetLives ( i , 1000 ) ;
31456: LD_VAR 0 1
31460: PPUSH
31461: LD_INT 1000
31463: PPUSH
31464: CALL_OW 234
31468: GO 31438
31470: POP
31471: POP
// until p > 20 ;
31472: LD_VAR 0 3
31476: PUSH
31477: LD_INT 20
31479: GREATER
31480: IFFALSE 31407
// end ;
31482: PPOPN 3
31484: END
// every 0 0$1 trigger StreamModeActive and sTime do
31485: LD_EXP 51
31489: PUSH
31490: LD_EXP 102
31494: AND
31495: IFFALSE 31530
31497: GO 31499
31499: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31500: LD_INT 28
31502: PPUSH
31503: LD_OWVAR 2
31507: PPUSH
31508: LD_INT 2
31510: PPUSH
31511: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31515: LD_INT 30
31517: PPUSH
31518: LD_OWVAR 2
31522: PPUSH
31523: LD_INT 2
31525: PPUSH
31526: CALL_OW 322
// end ;
31530: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31531: LD_EXP 51
31535: PUSH
31536: LD_EXP 103
31540: AND
31541: IFFALSE 31662
31543: GO 31545
31545: DISABLE
31546: LD_INT 0
31548: PPUSH
31549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31550: LD_ADDR_VAR 0 2
31554: PUSH
31555: LD_INT 22
31557: PUSH
31558: LD_OWVAR 2
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 21
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 3
31579: PUSH
31580: LD_INT 23
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: PPUSH
31599: CALL_OW 69
31603: ST_TO_ADDR
// if not tmp then
31604: LD_VAR 0 2
31608: NOT
31609: IFFALSE 31613
// exit ;
31611: GO 31662
// for i in tmp do
31613: LD_ADDR_VAR 0 1
31617: PUSH
31618: LD_VAR 0 2
31622: PUSH
31623: FOR_IN
31624: IFFALSE 31660
// begin if Crawls ( i ) then
31626: LD_VAR 0 1
31630: PPUSH
31631: CALL_OW 318
31635: IFFALSE 31646
// ComWalk ( i ) ;
31637: LD_VAR 0 1
31641: PPUSH
31642: CALL_OW 138
// SetClass ( i , 2 ) ;
31646: LD_VAR 0 1
31650: PPUSH
31651: LD_INT 2
31653: PPUSH
31654: CALL_OW 336
// end ;
31658: GO 31623
31660: POP
31661: POP
// end ;
31662: PPOPN 2
31664: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31665: LD_EXP 51
31669: PUSH
31670: LD_EXP 104
31674: AND
31675: IFFALSE 31963
31677: GO 31679
31679: DISABLE
31680: LD_INT 0
31682: PPUSH
31683: PPUSH
31684: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31685: LD_OWVAR 2
31689: PPUSH
31690: LD_INT 9
31692: PPUSH
31693: LD_INT 1
31695: PPUSH
31696: LD_INT 1
31698: PPUSH
31699: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31703: LD_INT 9
31705: PPUSH
31706: LD_OWVAR 2
31710: PPUSH
31711: CALL_OW 343
// uc_side := 9 ;
31715: LD_ADDR_OWVAR 20
31719: PUSH
31720: LD_INT 9
31722: ST_TO_ADDR
// uc_nation := 2 ;
31723: LD_ADDR_OWVAR 21
31727: PUSH
31728: LD_INT 2
31730: ST_TO_ADDR
// hc_name := Dark Warrior ;
31731: LD_ADDR_OWVAR 26
31735: PUSH
31736: LD_STRING Dark Warrior
31738: ST_TO_ADDR
// hc_gallery :=  ;
31739: LD_ADDR_OWVAR 33
31743: PUSH
31744: LD_STRING 
31746: ST_TO_ADDR
// hc_noskilllimit := true ;
31747: LD_ADDR_OWVAR 76
31751: PUSH
31752: LD_INT 1
31754: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31755: LD_ADDR_OWVAR 31
31759: PUSH
31760: LD_INT 30
31762: PUSH
31763: LD_INT 30
31765: PUSH
31766: LD_INT 30
31768: PUSH
31769: LD_INT 30
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: ST_TO_ADDR
// un := CreateHuman ;
31778: LD_ADDR_VAR 0 3
31782: PUSH
31783: CALL_OW 44
31787: ST_TO_ADDR
// hc_noskilllimit := false ;
31788: LD_ADDR_OWVAR 76
31792: PUSH
31793: LD_INT 0
31795: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31796: LD_VAR 0 3
31800: PPUSH
31801: LD_INT 1
31803: PPUSH
31804: CALL_OW 51
// ToLua ( playRanger() ) ;
31808: LD_STRING playRanger()
31810: PPUSH
31811: CALL_OW 559
// p := 0 ;
31815: LD_ADDR_VAR 0 2
31819: PUSH
31820: LD_INT 0
31822: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31823: LD_INT 35
31825: PPUSH
31826: CALL_OW 67
// p := p + 1 ;
31830: LD_ADDR_VAR 0 2
31834: PUSH
31835: LD_VAR 0 2
31839: PUSH
31840: LD_INT 1
31842: PLUS
31843: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31844: LD_VAR 0 3
31848: PPUSH
31849: CALL_OW 256
31853: PUSH
31854: LD_INT 1000
31856: LESS
31857: IFFALSE 31871
// SetLives ( un , 1000 ) ;
31859: LD_VAR 0 3
31863: PPUSH
31864: LD_INT 1000
31866: PPUSH
31867: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31871: LD_VAR 0 3
31875: PPUSH
31876: LD_INT 81
31878: PUSH
31879: LD_OWVAR 2
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 91
31890: PUSH
31891: LD_VAR 0 3
31895: PUSH
31896: LD_INT 30
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: LIST
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PPUSH
31908: CALL_OW 69
31912: PPUSH
31913: LD_VAR 0 3
31917: PPUSH
31918: CALL_OW 74
31922: PPUSH
31923: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31927: LD_VAR 0 2
31931: PUSH
31932: LD_INT 80
31934: GREATER
31935: PUSH
31936: LD_VAR 0 3
31940: PPUSH
31941: CALL_OW 301
31945: OR
31946: IFFALSE 31823
// if un then
31948: LD_VAR 0 3
31952: IFFALSE 31963
// RemoveUnit ( un ) ;
31954: LD_VAR 0 3
31958: PPUSH
31959: CALL_OW 64
// end ;
31963: PPOPN 3
31965: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31966: LD_EXP 105
31970: IFFALSE 32086
31972: GO 31974
31974: DISABLE
31975: LD_INT 0
31977: PPUSH
31978: PPUSH
31979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31980: LD_ADDR_VAR 0 2
31984: PUSH
31985: LD_INT 81
31987: PUSH
31988: LD_OWVAR 2
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 21
31999: PUSH
32000: LD_INT 1
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PPUSH
32011: CALL_OW 69
32015: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32016: LD_STRING playComputer()
32018: PPUSH
32019: CALL_OW 559
// if not tmp then
32023: LD_VAR 0 2
32027: NOT
32028: IFFALSE 32032
// exit ;
32030: GO 32086
// for i in tmp do
32032: LD_ADDR_VAR 0 1
32036: PUSH
32037: LD_VAR 0 2
32041: PUSH
32042: FOR_IN
32043: IFFALSE 32084
// for j := 1 to 4 do
32045: LD_ADDR_VAR 0 3
32049: PUSH
32050: DOUBLE
32051: LD_INT 1
32053: DEC
32054: ST_TO_ADDR
32055: LD_INT 4
32057: PUSH
32058: FOR_TO
32059: IFFALSE 32080
// SetSkill ( i , j , 10 ) ;
32061: LD_VAR 0 1
32065: PPUSH
32066: LD_VAR 0 3
32070: PPUSH
32071: LD_INT 10
32073: PPUSH
32074: CALL_OW 237
32078: GO 32058
32080: POP
32081: POP
32082: GO 32042
32084: POP
32085: POP
// end ;
32086: PPOPN 3
32088: END
// every 0 0$1 trigger s30 do var i , tmp ;
32089: LD_EXP 106
32093: IFFALSE 32162
32095: GO 32097
32097: DISABLE
32098: LD_INT 0
32100: PPUSH
32101: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32102: LD_ADDR_VAR 0 2
32106: PUSH
32107: LD_INT 22
32109: PUSH
32110: LD_OWVAR 2
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PPUSH
32119: CALL_OW 69
32123: ST_TO_ADDR
// if not tmp then
32124: LD_VAR 0 2
32128: NOT
32129: IFFALSE 32133
// exit ;
32131: GO 32162
// for i in tmp do
32133: LD_ADDR_VAR 0 1
32137: PUSH
32138: LD_VAR 0 2
32142: PUSH
32143: FOR_IN
32144: IFFALSE 32160
// SetLives ( i , 300 ) ;
32146: LD_VAR 0 1
32150: PPUSH
32151: LD_INT 300
32153: PPUSH
32154: CALL_OW 234
32158: GO 32143
32160: POP
32161: POP
// end ;
32162: PPOPN 2
32164: END
// every 0 0$1 trigger s60 do var i , tmp ;
32165: LD_EXP 107
32169: IFFALSE 32238
32171: GO 32173
32173: DISABLE
32174: LD_INT 0
32176: PPUSH
32177: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32178: LD_ADDR_VAR 0 2
32182: PUSH
32183: LD_INT 22
32185: PUSH
32186: LD_OWVAR 2
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PPUSH
32195: CALL_OW 69
32199: ST_TO_ADDR
// if not tmp then
32200: LD_VAR 0 2
32204: NOT
32205: IFFALSE 32209
// exit ;
32207: GO 32238
// for i in tmp do
32209: LD_ADDR_VAR 0 1
32213: PUSH
32214: LD_VAR 0 2
32218: PUSH
32219: FOR_IN
32220: IFFALSE 32236
// SetLives ( i , 600 ) ;
32222: LD_VAR 0 1
32226: PPUSH
32227: LD_INT 600
32229: PPUSH
32230: CALL_OW 234
32234: GO 32219
32236: POP
32237: POP
// end ;
32238: PPOPN 2
32240: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32241: LD_INT 0
32243: PPUSH
// case cmd of 301 :
32244: LD_VAR 0 1
32248: PUSH
32249: LD_INT 301
32251: DOUBLE
32252: EQUAL
32253: IFTRUE 32257
32255: GO 32289
32257: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32258: LD_VAR 0 6
32262: PPUSH
32263: LD_VAR 0 7
32267: PPUSH
32268: LD_VAR 0 8
32272: PPUSH
32273: LD_VAR 0 4
32277: PPUSH
32278: LD_VAR 0 5
32282: PPUSH
32283: CALL 33490 0 5
32287: GO 32410
32289: LD_INT 302
32291: DOUBLE
32292: EQUAL
32293: IFTRUE 32297
32295: GO 32334
32297: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32298: LD_VAR 0 6
32302: PPUSH
32303: LD_VAR 0 7
32307: PPUSH
32308: LD_VAR 0 8
32312: PPUSH
32313: LD_VAR 0 9
32317: PPUSH
32318: LD_VAR 0 4
32322: PPUSH
32323: LD_VAR 0 5
32327: PPUSH
32328: CALL 33581 0 6
32332: GO 32410
32334: LD_INT 303
32336: DOUBLE
32337: EQUAL
32338: IFTRUE 32342
32340: GO 32379
32342: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32343: LD_VAR 0 6
32347: PPUSH
32348: LD_VAR 0 7
32352: PPUSH
32353: LD_VAR 0 8
32357: PPUSH
32358: LD_VAR 0 9
32362: PPUSH
32363: LD_VAR 0 4
32367: PPUSH
32368: LD_VAR 0 5
32372: PPUSH
32373: CALL 32415 0 6
32377: GO 32410
32379: LD_INT 304
32381: DOUBLE
32382: EQUAL
32383: IFTRUE 32387
32385: GO 32409
32387: POP
// hHackTeleport ( unit , x , y ) ; end ;
32388: LD_VAR 0 2
32392: PPUSH
32393: LD_VAR 0 4
32397: PPUSH
32398: LD_VAR 0 5
32402: PPUSH
32403: CALL 34174 0 3
32407: GO 32410
32409: POP
// end ;
32410: LD_VAR 0 12
32414: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32415: LD_INT 0
32417: PPUSH
32418: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32419: LD_VAR 0 1
32423: PUSH
32424: LD_INT 1
32426: LESS
32427: PUSH
32428: LD_VAR 0 1
32432: PUSH
32433: LD_INT 3
32435: GREATER
32436: OR
32437: PUSH
32438: LD_VAR 0 5
32442: PPUSH
32443: LD_VAR 0 6
32447: PPUSH
32448: CALL_OW 428
32452: OR
32453: IFFALSE 32457
// exit ;
32455: GO 33177
// uc_side := your_side ;
32457: LD_ADDR_OWVAR 20
32461: PUSH
32462: LD_OWVAR 2
32466: ST_TO_ADDR
// uc_nation := nation ;
32467: LD_ADDR_OWVAR 21
32471: PUSH
32472: LD_VAR 0 1
32476: ST_TO_ADDR
// bc_level = 1 ;
32477: LD_ADDR_OWVAR 43
32481: PUSH
32482: LD_INT 1
32484: ST_TO_ADDR
// case btype of 1 :
32485: LD_VAR 0 2
32489: PUSH
32490: LD_INT 1
32492: DOUBLE
32493: EQUAL
32494: IFTRUE 32498
32496: GO 32509
32498: POP
// bc_type := b_depot ; 2 :
32499: LD_ADDR_OWVAR 42
32503: PUSH
32504: LD_INT 0
32506: ST_TO_ADDR
32507: GO 33121
32509: LD_INT 2
32511: DOUBLE
32512: EQUAL
32513: IFTRUE 32517
32515: GO 32528
32517: POP
// bc_type := b_warehouse ; 3 :
32518: LD_ADDR_OWVAR 42
32522: PUSH
32523: LD_INT 1
32525: ST_TO_ADDR
32526: GO 33121
32528: LD_INT 3
32530: DOUBLE
32531: EQUAL
32532: IFTRUE 32536
32534: GO 32547
32536: POP
// bc_type := b_lab ; 4 .. 9 :
32537: LD_ADDR_OWVAR 42
32541: PUSH
32542: LD_INT 6
32544: ST_TO_ADDR
32545: GO 33121
32547: LD_INT 4
32549: DOUBLE
32550: GREATEREQUAL
32551: IFFALSE 32559
32553: LD_INT 9
32555: DOUBLE
32556: LESSEQUAL
32557: IFTRUE 32561
32559: GO 32613
32561: POP
// begin bc_type := b_lab_half ;
32562: LD_ADDR_OWVAR 42
32566: PUSH
32567: LD_INT 7
32569: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32570: LD_ADDR_OWVAR 44
32574: PUSH
32575: LD_INT 10
32577: PUSH
32578: LD_INT 11
32580: PUSH
32581: LD_INT 12
32583: PUSH
32584: LD_INT 15
32586: PUSH
32587: LD_INT 14
32589: PUSH
32590: LD_INT 13
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: PUSH
32601: LD_VAR 0 2
32605: PUSH
32606: LD_INT 3
32608: MINUS
32609: ARRAY
32610: ST_TO_ADDR
// end ; 10 .. 13 :
32611: GO 33121
32613: LD_INT 10
32615: DOUBLE
32616: GREATEREQUAL
32617: IFFALSE 32625
32619: LD_INT 13
32621: DOUBLE
32622: LESSEQUAL
32623: IFTRUE 32627
32625: GO 32704
32627: POP
// begin bc_type := b_lab_full ;
32628: LD_ADDR_OWVAR 42
32632: PUSH
32633: LD_INT 8
32635: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32636: LD_ADDR_OWVAR 44
32640: PUSH
32641: LD_INT 10
32643: PUSH
32644: LD_INT 12
32646: PUSH
32647: LD_INT 14
32649: PUSH
32650: LD_INT 13
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: PUSH
32659: LD_VAR 0 2
32663: PUSH
32664: LD_INT 9
32666: MINUS
32667: ARRAY
32668: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32669: LD_ADDR_OWVAR 45
32673: PUSH
32674: LD_INT 11
32676: PUSH
32677: LD_INT 15
32679: PUSH
32680: LD_INT 12
32682: PUSH
32683: LD_INT 15
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: PUSH
32692: LD_VAR 0 2
32696: PUSH
32697: LD_INT 9
32699: MINUS
32700: ARRAY
32701: ST_TO_ADDR
// end ; 14 :
32702: GO 33121
32704: LD_INT 14
32706: DOUBLE
32707: EQUAL
32708: IFTRUE 32712
32710: GO 32723
32712: POP
// bc_type := b_workshop ; 15 :
32713: LD_ADDR_OWVAR 42
32717: PUSH
32718: LD_INT 2
32720: ST_TO_ADDR
32721: GO 33121
32723: LD_INT 15
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32731
32729: GO 32742
32731: POP
// bc_type := b_factory ; 16 :
32732: LD_ADDR_OWVAR 42
32736: PUSH
32737: LD_INT 3
32739: ST_TO_ADDR
32740: GO 33121
32742: LD_INT 16
32744: DOUBLE
32745: EQUAL
32746: IFTRUE 32750
32748: GO 32761
32750: POP
// bc_type := b_ext_gun ; 17 :
32751: LD_ADDR_OWVAR 42
32755: PUSH
32756: LD_INT 17
32758: ST_TO_ADDR
32759: GO 33121
32761: LD_INT 17
32763: DOUBLE
32764: EQUAL
32765: IFTRUE 32769
32767: GO 32797
32769: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32770: LD_ADDR_OWVAR 42
32774: PUSH
32775: LD_INT 19
32777: PUSH
32778: LD_INT 23
32780: PUSH
32781: LD_INT 19
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: LIST
32788: PUSH
32789: LD_VAR 0 1
32793: ARRAY
32794: ST_TO_ADDR
32795: GO 33121
32797: LD_INT 18
32799: DOUBLE
32800: EQUAL
32801: IFTRUE 32805
32803: GO 32816
32805: POP
// bc_type := b_ext_radar ; 19 :
32806: LD_ADDR_OWVAR 42
32810: PUSH
32811: LD_INT 20
32813: ST_TO_ADDR
32814: GO 33121
32816: LD_INT 19
32818: DOUBLE
32819: EQUAL
32820: IFTRUE 32824
32822: GO 32835
32824: POP
// bc_type := b_ext_radio ; 20 :
32825: LD_ADDR_OWVAR 42
32829: PUSH
32830: LD_INT 22
32832: ST_TO_ADDR
32833: GO 33121
32835: LD_INT 20
32837: DOUBLE
32838: EQUAL
32839: IFTRUE 32843
32841: GO 32854
32843: POP
// bc_type := b_ext_siberium ; 21 :
32844: LD_ADDR_OWVAR 42
32848: PUSH
32849: LD_INT 21
32851: ST_TO_ADDR
32852: GO 33121
32854: LD_INT 21
32856: DOUBLE
32857: EQUAL
32858: IFTRUE 32862
32860: GO 32873
32862: POP
// bc_type := b_ext_computer ; 22 :
32863: LD_ADDR_OWVAR 42
32867: PUSH
32868: LD_INT 24
32870: ST_TO_ADDR
32871: GO 33121
32873: LD_INT 22
32875: DOUBLE
32876: EQUAL
32877: IFTRUE 32881
32879: GO 32892
32881: POP
// bc_type := b_ext_track ; 23 :
32882: LD_ADDR_OWVAR 42
32886: PUSH
32887: LD_INT 16
32889: ST_TO_ADDR
32890: GO 33121
32892: LD_INT 23
32894: DOUBLE
32895: EQUAL
32896: IFTRUE 32900
32898: GO 32911
32900: POP
// bc_type := b_ext_laser ; 24 :
32901: LD_ADDR_OWVAR 42
32905: PUSH
32906: LD_INT 25
32908: ST_TO_ADDR
32909: GO 33121
32911: LD_INT 24
32913: DOUBLE
32914: EQUAL
32915: IFTRUE 32919
32917: GO 32930
32919: POP
// bc_type := b_control_tower ; 25 :
32920: LD_ADDR_OWVAR 42
32924: PUSH
32925: LD_INT 36
32927: ST_TO_ADDR
32928: GO 33121
32930: LD_INT 25
32932: DOUBLE
32933: EQUAL
32934: IFTRUE 32938
32936: GO 32949
32938: POP
// bc_type := b_breastwork ; 26 :
32939: LD_ADDR_OWVAR 42
32943: PUSH
32944: LD_INT 31
32946: ST_TO_ADDR
32947: GO 33121
32949: LD_INT 26
32951: DOUBLE
32952: EQUAL
32953: IFTRUE 32957
32955: GO 32968
32957: POP
// bc_type := b_bunker ; 27 :
32958: LD_ADDR_OWVAR 42
32962: PUSH
32963: LD_INT 32
32965: ST_TO_ADDR
32966: GO 33121
32968: LD_INT 27
32970: DOUBLE
32971: EQUAL
32972: IFTRUE 32976
32974: GO 32987
32976: POP
// bc_type := b_turret ; 28 :
32977: LD_ADDR_OWVAR 42
32981: PUSH
32982: LD_INT 33
32984: ST_TO_ADDR
32985: GO 33121
32987: LD_INT 28
32989: DOUBLE
32990: EQUAL
32991: IFTRUE 32995
32993: GO 33006
32995: POP
// bc_type := b_armoury ; 29 :
32996: LD_ADDR_OWVAR 42
33000: PUSH
33001: LD_INT 4
33003: ST_TO_ADDR
33004: GO 33121
33006: LD_INT 29
33008: DOUBLE
33009: EQUAL
33010: IFTRUE 33014
33012: GO 33025
33014: POP
// bc_type := b_barracks ; 30 :
33015: LD_ADDR_OWVAR 42
33019: PUSH
33020: LD_INT 5
33022: ST_TO_ADDR
33023: GO 33121
33025: LD_INT 30
33027: DOUBLE
33028: EQUAL
33029: IFTRUE 33033
33031: GO 33044
33033: POP
// bc_type := b_solar_power ; 31 :
33034: LD_ADDR_OWVAR 42
33038: PUSH
33039: LD_INT 27
33041: ST_TO_ADDR
33042: GO 33121
33044: LD_INT 31
33046: DOUBLE
33047: EQUAL
33048: IFTRUE 33052
33050: GO 33063
33052: POP
// bc_type := b_oil_power ; 32 :
33053: LD_ADDR_OWVAR 42
33057: PUSH
33058: LD_INT 26
33060: ST_TO_ADDR
33061: GO 33121
33063: LD_INT 32
33065: DOUBLE
33066: EQUAL
33067: IFTRUE 33071
33069: GO 33082
33071: POP
// bc_type := b_siberite_power ; 33 :
33072: LD_ADDR_OWVAR 42
33076: PUSH
33077: LD_INT 28
33079: ST_TO_ADDR
33080: GO 33121
33082: LD_INT 33
33084: DOUBLE
33085: EQUAL
33086: IFTRUE 33090
33088: GO 33101
33090: POP
// bc_type := b_oil_mine ; 34 :
33091: LD_ADDR_OWVAR 42
33095: PUSH
33096: LD_INT 29
33098: ST_TO_ADDR
33099: GO 33121
33101: LD_INT 34
33103: DOUBLE
33104: EQUAL
33105: IFTRUE 33109
33107: GO 33120
33109: POP
// bc_type := b_siberite_mine ; end ;
33110: LD_ADDR_OWVAR 42
33114: PUSH
33115: LD_INT 30
33117: ST_TO_ADDR
33118: GO 33121
33120: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33121: LD_ADDR_VAR 0 8
33125: PUSH
33126: LD_VAR 0 5
33130: PPUSH
33131: LD_VAR 0 6
33135: PPUSH
33136: LD_VAR 0 3
33140: PPUSH
33141: CALL_OW 47
33145: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33146: LD_OWVAR 42
33150: PUSH
33151: LD_INT 32
33153: PUSH
33154: LD_INT 33
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: IN
33161: IFFALSE 33177
// PlaceWeaponTurret ( b , weapon ) ;
33163: LD_VAR 0 8
33167: PPUSH
33168: LD_VAR 0 4
33172: PPUSH
33173: CALL_OW 431
// end ;
33177: LD_VAR 0 7
33181: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33182: LD_INT 0
33184: PPUSH
33185: PPUSH
33186: PPUSH
33187: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33188: LD_ADDR_VAR 0 4
33192: PUSH
33193: LD_INT 22
33195: PUSH
33196: LD_OWVAR 2
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 2
33207: PUSH
33208: LD_INT 30
33210: PUSH
33211: LD_INT 0
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 30
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: LIST
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PPUSH
33237: CALL_OW 69
33241: ST_TO_ADDR
// if not tmp then
33242: LD_VAR 0 4
33246: NOT
33247: IFFALSE 33251
// exit ;
33249: GO 33310
// for i in tmp do
33251: LD_ADDR_VAR 0 2
33255: PUSH
33256: LD_VAR 0 4
33260: PUSH
33261: FOR_IN
33262: IFFALSE 33308
// for j = 1 to 3 do
33264: LD_ADDR_VAR 0 3
33268: PUSH
33269: DOUBLE
33270: LD_INT 1
33272: DEC
33273: ST_TO_ADDR
33274: LD_INT 3
33276: PUSH
33277: FOR_TO
33278: IFFALSE 33304
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33280: LD_VAR 0 2
33284: PPUSH
33285: CALL_OW 274
33289: PPUSH
33290: LD_VAR 0 3
33294: PPUSH
33295: LD_INT 99999
33297: PPUSH
33298: CALL_OW 277
33302: GO 33277
33304: POP
33305: POP
33306: GO 33261
33308: POP
33309: POP
// end ;
33310: LD_VAR 0 1
33314: RET
// export function hHackSetLevel10 ; var i , j ; begin
33315: LD_INT 0
33317: PPUSH
33318: PPUSH
33319: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33320: LD_ADDR_VAR 0 2
33324: PUSH
33325: LD_INT 21
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PPUSH
33335: CALL_OW 69
33339: PUSH
33340: FOR_IN
33341: IFFALSE 33393
// if IsSelected ( i ) then
33343: LD_VAR 0 2
33347: PPUSH
33348: CALL_OW 306
33352: IFFALSE 33391
// begin for j := 1 to 4 do
33354: LD_ADDR_VAR 0 3
33358: PUSH
33359: DOUBLE
33360: LD_INT 1
33362: DEC
33363: ST_TO_ADDR
33364: LD_INT 4
33366: PUSH
33367: FOR_TO
33368: IFFALSE 33389
// SetSkill ( i , j , 10 ) ;
33370: LD_VAR 0 2
33374: PPUSH
33375: LD_VAR 0 3
33379: PPUSH
33380: LD_INT 10
33382: PPUSH
33383: CALL_OW 237
33387: GO 33367
33389: POP
33390: POP
// end ;
33391: GO 33340
33393: POP
33394: POP
// end ;
33395: LD_VAR 0 1
33399: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33400: LD_INT 0
33402: PPUSH
33403: PPUSH
33404: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33405: LD_ADDR_VAR 0 2
33409: PUSH
33410: LD_INT 22
33412: PUSH
33413: LD_OWVAR 2
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 21
33424: PUSH
33425: LD_INT 1
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PPUSH
33436: CALL_OW 69
33440: PUSH
33441: FOR_IN
33442: IFFALSE 33483
// begin for j := 1 to 4 do
33444: LD_ADDR_VAR 0 3
33448: PUSH
33449: DOUBLE
33450: LD_INT 1
33452: DEC
33453: ST_TO_ADDR
33454: LD_INT 4
33456: PUSH
33457: FOR_TO
33458: IFFALSE 33479
// SetSkill ( i , j , 10 ) ;
33460: LD_VAR 0 2
33464: PPUSH
33465: LD_VAR 0 3
33469: PPUSH
33470: LD_INT 10
33472: PPUSH
33473: CALL_OW 237
33477: GO 33457
33479: POP
33480: POP
// end ;
33481: GO 33441
33483: POP
33484: POP
// end ;
33485: LD_VAR 0 1
33489: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33490: LD_INT 0
33492: PPUSH
// uc_side := your_side ;
33493: LD_ADDR_OWVAR 20
33497: PUSH
33498: LD_OWVAR 2
33502: ST_TO_ADDR
// uc_nation := nation ;
33503: LD_ADDR_OWVAR 21
33507: PUSH
33508: LD_VAR 0 1
33512: ST_TO_ADDR
// InitHc ;
33513: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33517: LD_INT 0
33519: PPUSH
33520: LD_VAR 0 2
33524: PPUSH
33525: LD_VAR 0 3
33529: PPUSH
33530: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33534: LD_VAR 0 4
33538: PPUSH
33539: LD_VAR 0 5
33543: PPUSH
33544: CALL_OW 428
33548: PUSH
33549: LD_INT 0
33551: EQUAL
33552: IFFALSE 33576
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33554: CALL_OW 44
33558: PPUSH
33559: LD_VAR 0 4
33563: PPUSH
33564: LD_VAR 0 5
33568: PPUSH
33569: LD_INT 1
33571: PPUSH
33572: CALL_OW 48
// end ;
33576: LD_VAR 0 6
33580: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33581: LD_INT 0
33583: PPUSH
33584: PPUSH
// uc_side := your_side ;
33585: LD_ADDR_OWVAR 20
33589: PUSH
33590: LD_OWVAR 2
33594: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33595: LD_VAR 0 1
33599: PUSH
33600: LD_INT 1
33602: PUSH
33603: LD_INT 2
33605: PUSH
33606: LD_INT 3
33608: PUSH
33609: LD_INT 4
33611: PUSH
33612: LD_INT 5
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: IN
33622: IFFALSE 33634
// uc_nation := nation_american else
33624: LD_ADDR_OWVAR 21
33628: PUSH
33629: LD_INT 1
33631: ST_TO_ADDR
33632: GO 33677
// if chassis in [ 11 , 12 , 13 , 14 ] then
33634: LD_VAR 0 1
33638: PUSH
33639: LD_INT 11
33641: PUSH
33642: LD_INT 12
33644: PUSH
33645: LD_INT 13
33647: PUSH
33648: LD_INT 14
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: IN
33657: IFFALSE 33669
// uc_nation := nation_arabian else
33659: LD_ADDR_OWVAR 21
33663: PUSH
33664: LD_INT 2
33666: ST_TO_ADDR
33667: GO 33677
// uc_nation := nation_russian ;
33669: LD_ADDR_OWVAR 21
33673: PUSH
33674: LD_INT 3
33676: ST_TO_ADDR
// vc_chassis := chassis ;
33677: LD_ADDR_OWVAR 37
33681: PUSH
33682: LD_VAR 0 1
33686: ST_TO_ADDR
// vc_engine := engine ;
33687: LD_ADDR_OWVAR 39
33691: PUSH
33692: LD_VAR 0 2
33696: ST_TO_ADDR
// vc_control := control ;
33697: LD_ADDR_OWVAR 38
33701: PUSH
33702: LD_VAR 0 3
33706: ST_TO_ADDR
// vc_weapon := weapon ;
33707: LD_ADDR_OWVAR 40
33711: PUSH
33712: LD_VAR 0 4
33716: ST_TO_ADDR
// un := CreateVehicle ;
33717: LD_ADDR_VAR 0 8
33721: PUSH
33722: CALL_OW 45
33726: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33727: LD_VAR 0 8
33731: PPUSH
33732: LD_INT 0
33734: PPUSH
33735: LD_INT 5
33737: PPUSH
33738: CALL_OW 12
33742: PPUSH
33743: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33747: LD_VAR 0 8
33751: PPUSH
33752: LD_VAR 0 5
33756: PPUSH
33757: LD_VAR 0 6
33761: PPUSH
33762: LD_INT 1
33764: PPUSH
33765: CALL_OW 48
// end ;
33769: LD_VAR 0 7
33773: RET
// export hInvincible ; every 1 do
33774: GO 33776
33776: DISABLE
// hInvincible := [ ] ;
33777: LD_ADDR_EXP 108
33781: PUSH
33782: EMPTY
33783: ST_TO_ADDR
33784: END
// every 10 do var i ;
33785: GO 33787
33787: DISABLE
33788: LD_INT 0
33790: PPUSH
// begin enable ;
33791: ENABLE
// if not hInvincible then
33792: LD_EXP 108
33796: NOT
33797: IFFALSE 33801
// exit ;
33799: GO 33845
// for i in hInvincible do
33801: LD_ADDR_VAR 0 1
33805: PUSH
33806: LD_EXP 108
33810: PUSH
33811: FOR_IN
33812: IFFALSE 33843
// if GetLives ( i ) < 1000 then
33814: LD_VAR 0 1
33818: PPUSH
33819: CALL_OW 256
33823: PUSH
33824: LD_INT 1000
33826: LESS
33827: IFFALSE 33841
// SetLives ( i , 1000 ) ;
33829: LD_VAR 0 1
33833: PPUSH
33834: LD_INT 1000
33836: PPUSH
33837: CALL_OW 234
33841: GO 33811
33843: POP
33844: POP
// end ;
33845: PPOPN 1
33847: END
// export function hHackInvincible ; var i ; begin
33848: LD_INT 0
33850: PPUSH
33851: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33852: LD_ADDR_VAR 0 2
33856: PUSH
33857: LD_INT 2
33859: PUSH
33860: LD_INT 21
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 21
33872: PUSH
33873: LD_INT 2
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: LIST
33884: PPUSH
33885: CALL_OW 69
33889: PUSH
33890: FOR_IN
33891: IFFALSE 33952
// if IsSelected ( i ) then
33893: LD_VAR 0 2
33897: PPUSH
33898: CALL_OW 306
33902: IFFALSE 33950
// begin if i in hInvincible then
33904: LD_VAR 0 2
33908: PUSH
33909: LD_EXP 108
33913: IN
33914: IFFALSE 33934
// hInvincible := hInvincible diff i else
33916: LD_ADDR_EXP 108
33920: PUSH
33921: LD_EXP 108
33925: PUSH
33926: LD_VAR 0 2
33930: DIFF
33931: ST_TO_ADDR
33932: GO 33950
// hInvincible := hInvincible union i ;
33934: LD_ADDR_EXP 108
33938: PUSH
33939: LD_EXP 108
33943: PUSH
33944: LD_VAR 0 2
33948: UNION
33949: ST_TO_ADDR
// end ;
33950: GO 33890
33952: POP
33953: POP
// end ;
33954: LD_VAR 0 1
33958: RET
// export function hHackInvisible ; var i , j ; begin
33959: LD_INT 0
33961: PPUSH
33962: PPUSH
33963: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33964: LD_ADDR_VAR 0 2
33968: PUSH
33969: LD_INT 21
33971: PUSH
33972: LD_INT 1
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PPUSH
33979: CALL_OW 69
33983: PUSH
33984: FOR_IN
33985: IFFALSE 34009
// if IsSelected ( i ) then
33987: LD_VAR 0 2
33991: PPUSH
33992: CALL_OW 306
33996: IFFALSE 34007
// ComForceInvisible ( i ) ;
33998: LD_VAR 0 2
34002: PPUSH
34003: CALL_OW 496
34007: GO 33984
34009: POP
34010: POP
// end ;
34011: LD_VAR 0 1
34015: RET
// export function hHackChangeYourSide ; begin
34016: LD_INT 0
34018: PPUSH
// if your_side = 8 then
34019: LD_OWVAR 2
34023: PUSH
34024: LD_INT 8
34026: EQUAL
34027: IFFALSE 34039
// your_side := 0 else
34029: LD_ADDR_OWVAR 2
34033: PUSH
34034: LD_INT 0
34036: ST_TO_ADDR
34037: GO 34053
// your_side := your_side + 1 ;
34039: LD_ADDR_OWVAR 2
34043: PUSH
34044: LD_OWVAR 2
34048: PUSH
34049: LD_INT 1
34051: PLUS
34052: ST_TO_ADDR
// end ;
34053: LD_VAR 0 1
34057: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34058: LD_INT 0
34060: PPUSH
34061: PPUSH
34062: PPUSH
// for i in all_units do
34063: LD_ADDR_VAR 0 2
34067: PUSH
34068: LD_OWVAR 3
34072: PUSH
34073: FOR_IN
34074: IFFALSE 34152
// if IsSelected ( i ) then
34076: LD_VAR 0 2
34080: PPUSH
34081: CALL_OW 306
34085: IFFALSE 34150
// begin j := GetSide ( i ) ;
34087: LD_ADDR_VAR 0 3
34091: PUSH
34092: LD_VAR 0 2
34096: PPUSH
34097: CALL_OW 255
34101: ST_TO_ADDR
// if j = 8 then
34102: LD_VAR 0 3
34106: PUSH
34107: LD_INT 8
34109: EQUAL
34110: IFFALSE 34122
// j := 0 else
34112: LD_ADDR_VAR 0 3
34116: PUSH
34117: LD_INT 0
34119: ST_TO_ADDR
34120: GO 34136
// j := j + 1 ;
34122: LD_ADDR_VAR 0 3
34126: PUSH
34127: LD_VAR 0 3
34131: PUSH
34132: LD_INT 1
34134: PLUS
34135: ST_TO_ADDR
// SetSide ( i , j ) ;
34136: LD_VAR 0 2
34140: PPUSH
34141: LD_VAR 0 3
34145: PPUSH
34146: CALL_OW 235
// end ;
34150: GO 34073
34152: POP
34153: POP
// end ;
34154: LD_VAR 0 1
34158: RET
// export function hHackFog ; begin
34159: LD_INT 0
34161: PPUSH
// FogOff ( true ) ;
34162: LD_INT 1
34164: PPUSH
34165: CALL_OW 344
// end ;
34169: LD_VAR 0 1
34173: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34174: LD_INT 0
34176: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34177: LD_VAR 0 1
34181: PPUSH
34182: LD_VAR 0 2
34186: PPUSH
34187: LD_VAR 0 3
34191: PPUSH
34192: LD_INT 1
34194: PPUSH
34195: LD_INT 1
34197: PPUSH
34198: CALL_OW 483
// CenterOnXY ( x , y ) ;
34202: LD_VAR 0 2
34206: PPUSH
34207: LD_VAR 0 3
34211: PPUSH
34212: CALL_OW 84
// end ;
34216: LD_VAR 0 4
34220: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34221: LD_INT 0
34223: PPUSH
34224: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34225: LD_VAR 0 1
34229: NOT
34230: PUSH
34231: LD_VAR 0 2
34235: PPUSH
34236: LD_VAR 0 3
34240: PPUSH
34241: CALL_OW 488
34245: NOT
34246: OR
34247: PUSH
34248: LD_VAR 0 1
34252: PPUSH
34253: CALL_OW 266
34257: PUSH
34258: LD_INT 3
34260: NONEQUAL
34261: PUSH
34262: LD_VAR 0 1
34266: PPUSH
34267: CALL_OW 247
34271: PUSH
34272: LD_INT 1
34274: EQUAL
34275: NOT
34276: AND
34277: OR
34278: IFFALSE 34282
// exit ;
34280: GO 34431
// if GetType ( factory ) = unit_human then
34282: LD_VAR 0 1
34286: PPUSH
34287: CALL_OW 247
34291: PUSH
34292: LD_INT 1
34294: EQUAL
34295: IFFALSE 34312
// factory := IsInUnit ( factory ) ;
34297: LD_ADDR_VAR 0 1
34301: PUSH
34302: LD_VAR 0 1
34306: PPUSH
34307: CALL_OW 310
34311: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34312: LD_VAR 0 1
34316: PPUSH
34317: CALL_OW 266
34321: PUSH
34322: LD_INT 3
34324: NONEQUAL
34325: IFFALSE 34329
// exit ;
34327: GO 34431
// if HexInfo ( x , y ) = factory then
34329: LD_VAR 0 2
34333: PPUSH
34334: LD_VAR 0 3
34338: PPUSH
34339: CALL_OW 428
34343: PUSH
34344: LD_VAR 0 1
34348: EQUAL
34349: IFFALSE 34376
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34351: LD_ADDR_EXP 109
34355: PUSH
34356: LD_EXP 109
34360: PPUSH
34361: LD_VAR 0 1
34365: PPUSH
34366: LD_INT 0
34368: PPUSH
34369: CALL_OW 1
34373: ST_TO_ADDR
34374: GO 34427
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34376: LD_ADDR_EXP 109
34380: PUSH
34381: LD_EXP 109
34385: PPUSH
34386: LD_VAR 0 1
34390: PPUSH
34391: LD_VAR 0 1
34395: PPUSH
34396: CALL_OW 255
34400: PUSH
34401: LD_VAR 0 1
34405: PUSH
34406: LD_VAR 0 2
34410: PUSH
34411: LD_VAR 0 3
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: PPUSH
34422: CALL_OW 1
34426: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34427: CALL 34436 0 0
// end ;
34431: LD_VAR 0 4
34435: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34436: LD_INT 0
34438: PPUSH
34439: PPUSH
34440: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34441: LD_STRING resetFactoryWaypoint();
34443: PPUSH
34444: CALL_OW 559
// if factoryWaypoints then
34448: LD_EXP 109
34452: IFFALSE 34578
// begin list := PrepareArray ( factoryWaypoints ) ;
34454: LD_ADDR_VAR 0 3
34458: PUSH
34459: LD_EXP 109
34463: PPUSH
34464: CALL 81047 0 1
34468: ST_TO_ADDR
// for i := 1 to list do
34469: LD_ADDR_VAR 0 2
34473: PUSH
34474: DOUBLE
34475: LD_INT 1
34477: DEC
34478: ST_TO_ADDR
34479: LD_VAR 0 3
34483: PUSH
34484: FOR_TO
34485: IFFALSE 34576
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34487: LD_STRING setFactoryWaypointXY(
34489: PUSH
34490: LD_VAR 0 3
34494: PUSH
34495: LD_VAR 0 2
34499: ARRAY
34500: PUSH
34501: LD_INT 1
34503: ARRAY
34504: STR
34505: PUSH
34506: LD_STRING ,
34508: STR
34509: PUSH
34510: LD_VAR 0 3
34514: PUSH
34515: LD_VAR 0 2
34519: ARRAY
34520: PUSH
34521: LD_INT 2
34523: ARRAY
34524: STR
34525: PUSH
34526: LD_STRING ,
34528: STR
34529: PUSH
34530: LD_VAR 0 3
34534: PUSH
34535: LD_VAR 0 2
34539: ARRAY
34540: PUSH
34541: LD_INT 3
34543: ARRAY
34544: STR
34545: PUSH
34546: LD_STRING ,
34548: STR
34549: PUSH
34550: LD_VAR 0 3
34554: PUSH
34555: LD_VAR 0 2
34559: ARRAY
34560: PUSH
34561: LD_INT 4
34563: ARRAY
34564: STR
34565: PUSH
34566: LD_STRING )
34568: STR
34569: PPUSH
34570: CALL_OW 559
34574: GO 34484
34576: POP
34577: POP
// end ; end ;
34578: LD_VAR 0 1
34582: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34583: LD_INT 0
34585: PPUSH
// if HexInfo ( x , y ) = warehouse then
34586: LD_VAR 0 2
34590: PPUSH
34591: LD_VAR 0 3
34595: PPUSH
34596: CALL_OW 428
34600: PUSH
34601: LD_VAR 0 1
34605: EQUAL
34606: IFFALSE 34633
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34608: LD_ADDR_EXP 110
34612: PUSH
34613: LD_EXP 110
34617: PPUSH
34618: LD_VAR 0 1
34622: PPUSH
34623: LD_INT 0
34625: PPUSH
34626: CALL_OW 1
34630: ST_TO_ADDR
34631: GO 34684
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34633: LD_ADDR_EXP 110
34637: PUSH
34638: LD_EXP 110
34642: PPUSH
34643: LD_VAR 0 1
34647: PPUSH
34648: LD_VAR 0 1
34652: PPUSH
34653: CALL_OW 255
34657: PUSH
34658: LD_VAR 0 1
34662: PUSH
34663: LD_VAR 0 2
34667: PUSH
34668: LD_VAR 0 3
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: PPUSH
34679: CALL_OW 1
34683: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34684: CALL 34693 0 0
// end ;
34688: LD_VAR 0 4
34692: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34693: LD_INT 0
34695: PPUSH
34696: PPUSH
34697: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34698: LD_STRING resetWarehouseGatheringPoints();
34700: PPUSH
34701: CALL_OW 559
// if warehouseGatheringPoints then
34705: LD_EXP 110
34709: IFFALSE 34835
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34711: LD_ADDR_VAR 0 3
34715: PUSH
34716: LD_EXP 110
34720: PPUSH
34721: CALL 81047 0 1
34725: ST_TO_ADDR
// for i := 1 to list do
34726: LD_ADDR_VAR 0 2
34730: PUSH
34731: DOUBLE
34732: LD_INT 1
34734: DEC
34735: ST_TO_ADDR
34736: LD_VAR 0 3
34740: PUSH
34741: FOR_TO
34742: IFFALSE 34833
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34744: LD_STRING setWarehouseGatheringPointXY(
34746: PUSH
34747: LD_VAR 0 3
34751: PUSH
34752: LD_VAR 0 2
34756: ARRAY
34757: PUSH
34758: LD_INT 1
34760: ARRAY
34761: STR
34762: PUSH
34763: LD_STRING ,
34765: STR
34766: PUSH
34767: LD_VAR 0 3
34771: PUSH
34772: LD_VAR 0 2
34776: ARRAY
34777: PUSH
34778: LD_INT 2
34780: ARRAY
34781: STR
34782: PUSH
34783: LD_STRING ,
34785: STR
34786: PUSH
34787: LD_VAR 0 3
34791: PUSH
34792: LD_VAR 0 2
34796: ARRAY
34797: PUSH
34798: LD_INT 3
34800: ARRAY
34801: STR
34802: PUSH
34803: LD_STRING ,
34805: STR
34806: PUSH
34807: LD_VAR 0 3
34811: PUSH
34812: LD_VAR 0 2
34816: ARRAY
34817: PUSH
34818: LD_INT 4
34820: ARRAY
34821: STR
34822: PUSH
34823: LD_STRING )
34825: STR
34826: PPUSH
34827: CALL_OW 559
34831: GO 34741
34833: POP
34834: POP
// end ; end ;
34835: LD_VAR 0 1
34839: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34840: LD_EXP 110
34844: IFFALSE 35529
34846: GO 34848
34848: DISABLE
34849: LD_INT 0
34851: PPUSH
34852: PPUSH
34853: PPUSH
34854: PPUSH
34855: PPUSH
34856: PPUSH
34857: PPUSH
34858: PPUSH
34859: PPUSH
// begin enable ;
34860: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34861: LD_ADDR_VAR 0 3
34865: PUSH
34866: LD_EXP 110
34870: PPUSH
34871: CALL 81047 0 1
34875: ST_TO_ADDR
// if not list then
34876: LD_VAR 0 3
34880: NOT
34881: IFFALSE 34885
// exit ;
34883: GO 35529
// for i := 1 to list do
34885: LD_ADDR_VAR 0 1
34889: PUSH
34890: DOUBLE
34891: LD_INT 1
34893: DEC
34894: ST_TO_ADDR
34895: LD_VAR 0 3
34899: PUSH
34900: FOR_TO
34901: IFFALSE 35527
// begin depot := list [ i ] [ 2 ] ;
34903: LD_ADDR_VAR 0 8
34907: PUSH
34908: LD_VAR 0 3
34912: PUSH
34913: LD_VAR 0 1
34917: ARRAY
34918: PUSH
34919: LD_INT 2
34921: ARRAY
34922: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34923: LD_ADDR_VAR 0 5
34927: PUSH
34928: LD_VAR 0 3
34932: PUSH
34933: LD_VAR 0 1
34937: ARRAY
34938: PUSH
34939: LD_INT 1
34941: ARRAY
34942: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34943: LD_VAR 0 8
34947: PPUSH
34948: CALL_OW 301
34952: PUSH
34953: LD_VAR 0 5
34957: PUSH
34958: LD_VAR 0 8
34962: PPUSH
34963: CALL_OW 255
34967: NONEQUAL
34968: OR
34969: IFFALSE 34998
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34971: LD_ADDR_EXP 110
34975: PUSH
34976: LD_EXP 110
34980: PPUSH
34981: LD_VAR 0 8
34985: PPUSH
34986: LD_INT 0
34988: PPUSH
34989: CALL_OW 1
34993: ST_TO_ADDR
// exit ;
34994: POP
34995: POP
34996: GO 35529
// end ; x := list [ i ] [ 3 ] ;
34998: LD_ADDR_VAR 0 6
35002: PUSH
35003: LD_VAR 0 3
35007: PUSH
35008: LD_VAR 0 1
35012: ARRAY
35013: PUSH
35014: LD_INT 3
35016: ARRAY
35017: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35018: LD_ADDR_VAR 0 7
35022: PUSH
35023: LD_VAR 0 3
35027: PUSH
35028: LD_VAR 0 1
35032: ARRAY
35033: PUSH
35034: LD_INT 4
35036: ARRAY
35037: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35038: LD_ADDR_VAR 0 9
35042: PUSH
35043: LD_VAR 0 6
35047: PPUSH
35048: LD_VAR 0 7
35052: PPUSH
35053: LD_INT 16
35055: PPUSH
35056: CALL 79635 0 3
35060: ST_TO_ADDR
// if not cratesNearbyPoint then
35061: LD_VAR 0 9
35065: NOT
35066: IFFALSE 35072
// exit ;
35068: POP
35069: POP
35070: GO 35529
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35072: LD_ADDR_VAR 0 4
35076: PUSH
35077: LD_INT 22
35079: PUSH
35080: LD_VAR 0 5
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 3
35091: PUSH
35092: LD_INT 60
35094: PUSH
35095: EMPTY
35096: LIST
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 91
35104: PUSH
35105: LD_VAR 0 8
35109: PUSH
35110: LD_INT 6
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 2
35120: PUSH
35121: LD_INT 25
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 25
35133: PUSH
35134: LD_INT 16
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: LIST
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: PPUSH
35152: CALL_OW 69
35156: PUSH
35157: LD_VAR 0 8
35161: PPUSH
35162: CALL_OW 313
35166: PPUSH
35167: LD_INT 3
35169: PUSH
35170: LD_INT 60
35172: PUSH
35173: EMPTY
35174: LIST
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 2
35182: PUSH
35183: LD_INT 25
35185: PUSH
35186: LD_INT 2
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 25
35195: PUSH
35196: LD_INT 16
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: LIST
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PPUSH
35212: CALL_OW 72
35216: UNION
35217: ST_TO_ADDR
// if tmp then
35218: LD_VAR 0 4
35222: IFFALSE 35302
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35224: LD_ADDR_VAR 0 4
35228: PUSH
35229: LD_VAR 0 4
35233: PPUSH
35234: LD_INT 3
35236: PPUSH
35237: CALL 77604 0 2
35241: ST_TO_ADDR
// for j in tmp do
35242: LD_ADDR_VAR 0 2
35246: PUSH
35247: LD_VAR 0 4
35251: PUSH
35252: FOR_IN
35253: IFFALSE 35296
// begin if IsInUnit ( j ) then
35255: LD_VAR 0 2
35259: PPUSH
35260: CALL_OW 310
35264: IFFALSE 35275
// ComExit ( j ) ;
35266: LD_VAR 0 2
35270: PPUSH
35271: CALL 77687 0 1
// AddComCollect ( j , x , y ) ;
35275: LD_VAR 0 2
35279: PPUSH
35280: LD_VAR 0 6
35284: PPUSH
35285: LD_VAR 0 7
35289: PPUSH
35290: CALL_OW 177
// end ;
35294: GO 35252
35296: POP
35297: POP
// exit ;
35298: POP
35299: POP
35300: GO 35529
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35302: LD_ADDR_VAR 0 4
35306: PUSH
35307: LD_INT 22
35309: PUSH
35310: LD_VAR 0 5
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 91
35321: PUSH
35322: LD_VAR 0 8
35326: PUSH
35327: LD_INT 8
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 2
35337: PUSH
35338: LD_INT 34
35340: PUSH
35341: LD_INT 12
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 34
35350: PUSH
35351: LD_INT 51
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 34
35360: PUSH
35361: LD_INT 32
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 34
35370: PUSH
35371: LD_INT 89
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: LIST
35389: PPUSH
35390: CALL_OW 69
35394: ST_TO_ADDR
// if tmp then
35395: LD_VAR 0 4
35399: IFFALSE 35525
// begin for j in tmp do
35401: LD_ADDR_VAR 0 2
35405: PUSH
35406: LD_VAR 0 4
35410: PUSH
35411: FOR_IN
35412: IFFALSE 35523
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35414: LD_VAR 0 2
35418: PPUSH
35419: CALL_OW 262
35423: PUSH
35424: LD_INT 3
35426: EQUAL
35427: PUSH
35428: LD_VAR 0 2
35432: PPUSH
35433: CALL_OW 261
35437: PUSH
35438: LD_INT 20
35440: GREATER
35441: OR
35442: PUSH
35443: LD_VAR 0 2
35447: PPUSH
35448: CALL_OW 314
35452: NOT
35453: AND
35454: PUSH
35455: LD_VAR 0 2
35459: PPUSH
35460: CALL_OW 263
35464: PUSH
35465: LD_INT 1
35467: NONEQUAL
35468: PUSH
35469: LD_VAR 0 2
35473: PPUSH
35474: CALL_OW 311
35478: OR
35479: AND
35480: IFFALSE 35521
// begin ComCollect ( j , x , y ) ;
35482: LD_VAR 0 2
35486: PPUSH
35487: LD_VAR 0 6
35491: PPUSH
35492: LD_VAR 0 7
35496: PPUSH
35497: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35501: LD_VAR 0 2
35505: PPUSH
35506: LD_VAR 0 8
35510: PPUSH
35511: CALL_OW 172
// exit ;
35515: POP
35516: POP
35517: POP
35518: POP
35519: GO 35529
// end ;
35521: GO 35411
35523: POP
35524: POP
// end ; end ;
35525: GO 34900
35527: POP
35528: POP
// end ; end_of_file
35529: PPOPN 9
35531: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35532: LD_INT 0
35534: PPUSH
35535: PPUSH
35536: PPUSH
35537: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35538: LD_VAR 0 1
35542: PPUSH
35543: CALL_OW 264
35547: PUSH
35548: LD_INT 91
35550: EQUAL
35551: IFFALSE 35623
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35553: LD_INT 68
35555: PPUSH
35556: LD_VAR 0 1
35560: PPUSH
35561: CALL_OW 255
35565: PPUSH
35566: CALL_OW 321
35570: PUSH
35571: LD_INT 2
35573: EQUAL
35574: IFFALSE 35586
// eff := 70 else
35576: LD_ADDR_VAR 0 4
35580: PUSH
35581: LD_INT 70
35583: ST_TO_ADDR
35584: GO 35594
// eff := 30 ;
35586: LD_ADDR_VAR 0 4
35590: PUSH
35591: LD_INT 30
35593: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35594: LD_VAR 0 1
35598: PPUSH
35599: CALL_OW 250
35603: PPUSH
35604: LD_VAR 0 1
35608: PPUSH
35609: CALL_OW 251
35613: PPUSH
35614: LD_VAR 0 4
35618: PPUSH
35619: CALL_OW 495
// end ; end ;
35623: LD_VAR 0 2
35627: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35628: LD_INT 0
35630: PPUSH
// end ;
35631: LD_VAR 0 4
35635: RET
// export function SOS_Command ( cmd ) ; begin
35636: LD_INT 0
35638: PPUSH
// end ;
35639: LD_VAR 0 2
35643: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35644: LD_INT 0
35646: PPUSH
// end ;
35647: LD_VAR 0 6
35651: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35652: LD_INT 0
35654: PPUSH
35655: PPUSH
// if not vehicle or not factory then
35656: LD_VAR 0 1
35660: NOT
35661: PUSH
35662: LD_VAR 0 2
35666: NOT
35667: OR
35668: IFFALSE 35672
// exit ;
35670: GO 35903
// if factoryWaypoints >= factory then
35672: LD_EXP 109
35676: PUSH
35677: LD_VAR 0 2
35681: GREATEREQUAL
35682: IFFALSE 35903
// if factoryWaypoints [ factory ] then
35684: LD_EXP 109
35688: PUSH
35689: LD_VAR 0 2
35693: ARRAY
35694: IFFALSE 35903
// begin if GetControl ( vehicle ) = control_manual then
35696: LD_VAR 0 1
35700: PPUSH
35701: CALL_OW 263
35705: PUSH
35706: LD_INT 1
35708: EQUAL
35709: IFFALSE 35790
// begin driver := IsDrivenBy ( vehicle ) ;
35711: LD_ADDR_VAR 0 4
35715: PUSH
35716: LD_VAR 0 1
35720: PPUSH
35721: CALL_OW 311
35725: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35726: LD_VAR 0 4
35730: PPUSH
35731: LD_EXP 109
35735: PUSH
35736: LD_VAR 0 2
35740: ARRAY
35741: PUSH
35742: LD_INT 3
35744: ARRAY
35745: PPUSH
35746: LD_EXP 109
35750: PUSH
35751: LD_VAR 0 2
35755: ARRAY
35756: PUSH
35757: LD_INT 4
35759: ARRAY
35760: PPUSH
35761: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35765: LD_VAR 0 4
35769: PPUSH
35770: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35774: LD_VAR 0 4
35778: PPUSH
35779: LD_VAR 0 2
35783: PPUSH
35784: CALL_OW 180
// end else
35788: GO 35903
// if GetControl ( vehicle ) = control_remote then
35790: LD_VAR 0 1
35794: PPUSH
35795: CALL_OW 263
35799: PUSH
35800: LD_INT 2
35802: EQUAL
35803: IFFALSE 35864
// begin wait ( 0 0$2 ) ;
35805: LD_INT 70
35807: PPUSH
35808: CALL_OW 67
// if Connect ( vehicle ) then
35812: LD_VAR 0 1
35816: PPUSH
35817: CALL 47927 0 1
35821: IFFALSE 35862
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35823: LD_VAR 0 1
35827: PPUSH
35828: LD_EXP 109
35832: PUSH
35833: LD_VAR 0 2
35837: ARRAY
35838: PUSH
35839: LD_INT 3
35841: ARRAY
35842: PPUSH
35843: LD_EXP 109
35847: PUSH
35848: LD_VAR 0 2
35852: ARRAY
35853: PUSH
35854: LD_INT 4
35856: ARRAY
35857: PPUSH
35858: CALL_OW 171
// end else
35862: GO 35903
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35864: LD_VAR 0 1
35868: PPUSH
35869: LD_EXP 109
35873: PUSH
35874: LD_VAR 0 2
35878: ARRAY
35879: PUSH
35880: LD_INT 3
35882: ARRAY
35883: PPUSH
35884: LD_EXP 109
35888: PUSH
35889: LD_VAR 0 2
35893: ARRAY
35894: PUSH
35895: LD_INT 4
35897: ARRAY
35898: PPUSH
35899: CALL_OW 171
// end ; end ;
35903: LD_VAR 0 3
35907: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35908: LD_INT 0
35910: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35911: LD_VAR 0 1
35915: PUSH
35916: LD_INT 250
35918: EQUAL
35919: PUSH
35920: LD_VAR 0 2
35924: PPUSH
35925: CALL_OW 264
35929: PUSH
35930: LD_INT 81
35932: EQUAL
35933: AND
35934: IFFALSE 35955
// MinerPlaceMine ( unit , x , y ) ;
35936: LD_VAR 0 2
35940: PPUSH
35941: LD_VAR 0 4
35945: PPUSH
35946: LD_VAR 0 5
35950: PPUSH
35951: CALL 38340 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35955: LD_VAR 0 1
35959: PUSH
35960: LD_INT 251
35962: EQUAL
35963: PUSH
35964: LD_VAR 0 2
35968: PPUSH
35969: CALL_OW 264
35973: PUSH
35974: LD_INT 81
35976: EQUAL
35977: AND
35978: IFFALSE 35999
// MinerDetonateMine ( unit , x , y ) ;
35980: LD_VAR 0 2
35984: PPUSH
35985: LD_VAR 0 4
35989: PPUSH
35990: LD_VAR 0 5
35994: PPUSH
35995: CALL 38615 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35999: LD_VAR 0 1
36003: PUSH
36004: LD_INT 252
36006: EQUAL
36007: PUSH
36008: LD_VAR 0 2
36012: PPUSH
36013: CALL_OW 264
36017: PUSH
36018: LD_INT 81
36020: EQUAL
36021: AND
36022: IFFALSE 36043
// MinerCreateMinefield ( unit , x , y ) ;
36024: LD_VAR 0 2
36028: PPUSH
36029: LD_VAR 0 4
36033: PPUSH
36034: LD_VAR 0 5
36038: PPUSH
36039: CALL 39032 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36043: LD_VAR 0 1
36047: PUSH
36048: LD_INT 253
36050: EQUAL
36051: PUSH
36052: LD_VAR 0 2
36056: PPUSH
36057: CALL_OW 257
36061: PUSH
36062: LD_INT 5
36064: EQUAL
36065: AND
36066: IFFALSE 36087
// ComBinocular ( unit , x , y ) ;
36068: LD_VAR 0 2
36072: PPUSH
36073: LD_VAR 0 4
36077: PPUSH
36078: LD_VAR 0 5
36082: PPUSH
36083: CALL 39401 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36087: LD_VAR 0 1
36091: PUSH
36092: LD_INT 254
36094: EQUAL
36095: PUSH
36096: LD_VAR 0 2
36100: PPUSH
36101: CALL_OW 264
36105: PUSH
36106: LD_INT 99
36108: EQUAL
36109: AND
36110: PUSH
36111: LD_VAR 0 3
36115: PPUSH
36116: CALL_OW 263
36120: PUSH
36121: LD_INT 3
36123: EQUAL
36124: AND
36125: IFFALSE 36141
// HackDestroyVehicle ( unit , selectedUnit ) ;
36127: LD_VAR 0 2
36131: PPUSH
36132: LD_VAR 0 3
36136: PPUSH
36137: CALL 37704 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36141: LD_VAR 0 1
36145: PUSH
36146: LD_INT 255
36148: EQUAL
36149: PUSH
36150: LD_VAR 0 2
36154: PPUSH
36155: CALL_OW 264
36159: PUSH
36160: LD_INT 14
36162: PUSH
36163: LD_INT 53
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: IN
36170: AND
36171: PUSH
36172: LD_VAR 0 4
36176: PPUSH
36177: LD_VAR 0 5
36181: PPUSH
36182: CALL_OW 488
36186: AND
36187: IFFALSE 36211
// CutTreeXYR ( unit , x , y , 12 ) ;
36189: LD_VAR 0 2
36193: PPUSH
36194: LD_VAR 0 4
36198: PPUSH
36199: LD_VAR 0 5
36203: PPUSH
36204: LD_INT 12
36206: PPUSH
36207: CALL 36274 0 4
// if cmd = 256 then
36211: LD_VAR 0 1
36215: PUSH
36216: LD_INT 256
36218: EQUAL
36219: IFFALSE 36240
// SetFactoryWaypoint ( unit , x , y ) ;
36221: LD_VAR 0 2
36225: PPUSH
36226: LD_VAR 0 4
36230: PPUSH
36231: LD_VAR 0 5
36235: PPUSH
36236: CALL 34221 0 3
// if cmd = 257 then
36240: LD_VAR 0 1
36244: PUSH
36245: LD_INT 257
36247: EQUAL
36248: IFFALSE 36269
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36250: LD_VAR 0 2
36254: PPUSH
36255: LD_VAR 0 4
36259: PPUSH
36260: LD_VAR 0 5
36264: PPUSH
36265: CALL 34583 0 3
// end ;
36269: LD_VAR 0 6
36273: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36274: LD_INT 0
36276: PPUSH
36277: PPUSH
36278: PPUSH
36279: PPUSH
36280: PPUSH
36281: PPUSH
36282: PPUSH
36283: PPUSH
36284: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
36285: LD_VAR 0 1
36289: NOT
36290: PUSH
36291: LD_VAR 0 2
36295: PPUSH
36296: LD_VAR 0 3
36300: PPUSH
36301: CALL_OW 488
36305: NOT
36306: OR
36307: PUSH
36308: LD_VAR 0 4
36312: NOT
36313: OR
36314: IFFALSE 36318
// exit ;
36316: GO 36658
// list := [ ] ;
36318: LD_ADDR_VAR 0 13
36322: PUSH
36323: EMPTY
36324: ST_TO_ADDR
// if x - r < 0 then
36325: LD_VAR 0 2
36329: PUSH
36330: LD_VAR 0 4
36334: MINUS
36335: PUSH
36336: LD_INT 0
36338: LESS
36339: IFFALSE 36351
// min_x := 0 else
36341: LD_ADDR_VAR 0 7
36345: PUSH
36346: LD_INT 0
36348: ST_TO_ADDR
36349: GO 36367
// min_x := x - r ;
36351: LD_ADDR_VAR 0 7
36355: PUSH
36356: LD_VAR 0 2
36360: PUSH
36361: LD_VAR 0 4
36365: MINUS
36366: ST_TO_ADDR
// if y - r < 0 then
36367: LD_VAR 0 3
36371: PUSH
36372: LD_VAR 0 4
36376: MINUS
36377: PUSH
36378: LD_INT 0
36380: LESS
36381: IFFALSE 36393
// min_y := 0 else
36383: LD_ADDR_VAR 0 8
36387: PUSH
36388: LD_INT 0
36390: ST_TO_ADDR
36391: GO 36409
// min_y := y - r ;
36393: LD_ADDR_VAR 0 8
36397: PUSH
36398: LD_VAR 0 3
36402: PUSH
36403: LD_VAR 0 4
36407: MINUS
36408: ST_TO_ADDR
// max_x := x + r ;
36409: LD_ADDR_VAR 0 9
36413: PUSH
36414: LD_VAR 0 2
36418: PUSH
36419: LD_VAR 0 4
36423: PLUS
36424: ST_TO_ADDR
// max_y := y + r ;
36425: LD_ADDR_VAR 0 10
36429: PUSH
36430: LD_VAR 0 3
36434: PUSH
36435: LD_VAR 0 4
36439: PLUS
36440: ST_TO_ADDR
// for _x = min_x to max_x do
36441: LD_ADDR_VAR 0 11
36445: PUSH
36446: DOUBLE
36447: LD_VAR 0 7
36451: DEC
36452: ST_TO_ADDR
36453: LD_VAR 0 9
36457: PUSH
36458: FOR_TO
36459: IFFALSE 36576
// for _y = min_y to max_y do
36461: LD_ADDR_VAR 0 12
36465: PUSH
36466: DOUBLE
36467: LD_VAR 0 8
36471: DEC
36472: ST_TO_ADDR
36473: LD_VAR 0 10
36477: PUSH
36478: FOR_TO
36479: IFFALSE 36572
// begin if not ValidHex ( _x , _y ) then
36481: LD_VAR 0 11
36485: PPUSH
36486: LD_VAR 0 12
36490: PPUSH
36491: CALL_OW 488
36495: NOT
36496: IFFALSE 36500
// continue ;
36498: GO 36478
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36500: LD_VAR 0 11
36504: PPUSH
36505: LD_VAR 0 12
36509: PPUSH
36510: CALL_OW 351
36514: PUSH
36515: LD_VAR 0 11
36519: PPUSH
36520: LD_VAR 0 12
36524: PPUSH
36525: CALL_OW 554
36529: AND
36530: IFFALSE 36570
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36532: LD_ADDR_VAR 0 13
36536: PUSH
36537: LD_VAR 0 13
36541: PPUSH
36542: LD_VAR 0 13
36546: PUSH
36547: LD_INT 1
36549: PLUS
36550: PPUSH
36551: LD_VAR 0 11
36555: PUSH
36556: LD_VAR 0 12
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PPUSH
36565: CALL_OW 2
36569: ST_TO_ADDR
// end ;
36570: GO 36478
36572: POP
36573: POP
36574: GO 36458
36576: POP
36577: POP
// if not list then
36578: LD_VAR 0 13
36582: NOT
36583: IFFALSE 36587
// exit ;
36585: GO 36658
// for i in list do
36587: LD_ADDR_VAR 0 6
36591: PUSH
36592: LD_VAR 0 13
36596: PUSH
36597: FOR_IN
36598: IFFALSE 36656
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36600: LD_VAR 0 1
36604: PPUSH
36605: LD_STRING M
36607: PUSH
36608: LD_VAR 0 6
36612: PUSH
36613: LD_INT 1
36615: ARRAY
36616: PUSH
36617: LD_VAR 0 6
36621: PUSH
36622: LD_INT 2
36624: ARRAY
36625: PUSH
36626: LD_INT 0
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: LD_INT 0
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: PUSH
36647: EMPTY
36648: LIST
36649: PPUSH
36650: CALL_OW 447
36654: GO 36597
36656: POP
36657: POP
// end ;
36658: LD_VAR 0 5
36662: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36663: LD_EXP 112
36667: NOT
36668: IFFALSE 36718
36670: GO 36672
36672: DISABLE
// begin initHack := true ;
36673: LD_ADDR_EXP 112
36677: PUSH
36678: LD_INT 1
36680: ST_TO_ADDR
// hackTanks := [ ] ;
36681: LD_ADDR_EXP 113
36685: PUSH
36686: EMPTY
36687: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36688: LD_ADDR_EXP 114
36692: PUSH
36693: EMPTY
36694: ST_TO_ADDR
// hackLimit := 3 ;
36695: LD_ADDR_EXP 115
36699: PUSH
36700: LD_INT 3
36702: ST_TO_ADDR
// hackDist := 12 ;
36703: LD_ADDR_EXP 116
36707: PUSH
36708: LD_INT 12
36710: ST_TO_ADDR
// hackCounter := [ ] ;
36711: LD_ADDR_EXP 117
36715: PUSH
36716: EMPTY
36717: ST_TO_ADDR
// end ;
36718: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36719: LD_EXP 112
36723: PUSH
36724: LD_INT 34
36726: PUSH
36727: LD_INT 99
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PPUSH
36734: CALL_OW 69
36738: AND
36739: IFFALSE 36992
36741: GO 36743
36743: DISABLE
36744: LD_INT 0
36746: PPUSH
36747: PPUSH
// begin enable ;
36748: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36749: LD_ADDR_VAR 0 1
36753: PUSH
36754: LD_INT 34
36756: PUSH
36757: LD_INT 99
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PPUSH
36764: CALL_OW 69
36768: PUSH
36769: FOR_IN
36770: IFFALSE 36990
// begin if not i in hackTanks then
36772: LD_VAR 0 1
36776: PUSH
36777: LD_EXP 113
36781: IN
36782: NOT
36783: IFFALSE 36866
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36785: LD_ADDR_EXP 113
36789: PUSH
36790: LD_EXP 113
36794: PPUSH
36795: LD_EXP 113
36799: PUSH
36800: LD_INT 1
36802: PLUS
36803: PPUSH
36804: LD_VAR 0 1
36808: PPUSH
36809: CALL_OW 1
36813: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36814: LD_ADDR_EXP 114
36818: PUSH
36819: LD_EXP 114
36823: PPUSH
36824: LD_EXP 114
36828: PUSH
36829: LD_INT 1
36831: PLUS
36832: PPUSH
36833: EMPTY
36834: PPUSH
36835: CALL_OW 1
36839: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36840: LD_ADDR_EXP 117
36844: PUSH
36845: LD_EXP 117
36849: PPUSH
36850: LD_EXP 117
36854: PUSH
36855: LD_INT 1
36857: PLUS
36858: PPUSH
36859: EMPTY
36860: PPUSH
36861: CALL_OW 1
36865: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36866: LD_VAR 0 1
36870: PPUSH
36871: CALL_OW 302
36875: NOT
36876: IFFALSE 36889
// begin HackUnlinkAll ( i ) ;
36878: LD_VAR 0 1
36882: PPUSH
36883: CALL 36995 0 1
// continue ;
36887: GO 36769
// end ; HackCheckCapturedStatus ( i ) ;
36889: LD_VAR 0 1
36893: PPUSH
36894: CALL 37438 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36898: LD_ADDR_VAR 0 2
36902: PUSH
36903: LD_INT 81
36905: PUSH
36906: LD_VAR 0 1
36910: PPUSH
36911: CALL_OW 255
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 33
36922: PUSH
36923: LD_INT 3
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 91
36932: PUSH
36933: LD_VAR 0 1
36937: PUSH
36938: LD_EXP 116
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 50
36950: PUSH
36951: EMPTY
36952: LIST
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: PPUSH
36960: CALL_OW 69
36964: ST_TO_ADDR
// if not tmp then
36965: LD_VAR 0 2
36969: NOT
36970: IFFALSE 36974
// continue ;
36972: GO 36769
// HackLink ( i , tmp ) ;
36974: LD_VAR 0 1
36978: PPUSH
36979: LD_VAR 0 2
36983: PPUSH
36984: CALL 37131 0 2
// end ;
36988: GO 36769
36990: POP
36991: POP
// end ;
36992: PPOPN 2
36994: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36995: LD_INT 0
36997: PPUSH
36998: PPUSH
36999: PPUSH
// if not hack in hackTanks then
37000: LD_VAR 0 1
37004: PUSH
37005: LD_EXP 113
37009: IN
37010: NOT
37011: IFFALSE 37015
// exit ;
37013: GO 37126
// index := GetElementIndex ( hackTanks , hack ) ;
37015: LD_ADDR_VAR 0 4
37019: PUSH
37020: LD_EXP 113
37024: PPUSH
37025: LD_VAR 0 1
37029: PPUSH
37030: CALL 44743 0 2
37034: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37035: LD_EXP 114
37039: PUSH
37040: LD_VAR 0 4
37044: ARRAY
37045: IFFALSE 37126
// begin for i in hackTanksCaptured [ index ] do
37047: LD_ADDR_VAR 0 3
37051: PUSH
37052: LD_EXP 114
37056: PUSH
37057: LD_VAR 0 4
37061: ARRAY
37062: PUSH
37063: FOR_IN
37064: IFFALSE 37090
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37066: LD_VAR 0 3
37070: PUSH
37071: LD_INT 1
37073: ARRAY
37074: PPUSH
37075: LD_VAR 0 3
37079: PUSH
37080: LD_INT 2
37082: ARRAY
37083: PPUSH
37084: CALL_OW 235
37088: GO 37063
37090: POP
37091: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37092: LD_ADDR_EXP 114
37096: PUSH
37097: LD_EXP 114
37101: PPUSH
37102: LD_VAR 0 4
37106: PPUSH
37107: EMPTY
37108: PPUSH
37109: CALL_OW 1
37113: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37114: LD_VAR 0 1
37118: PPUSH
37119: LD_INT 0
37121: PPUSH
37122: CALL_OW 505
// end ; end ;
37126: LD_VAR 0 2
37130: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37131: LD_INT 0
37133: PPUSH
37134: PPUSH
37135: PPUSH
// if not hack in hackTanks or not vehicles then
37136: LD_VAR 0 1
37140: PUSH
37141: LD_EXP 113
37145: IN
37146: NOT
37147: PUSH
37148: LD_VAR 0 2
37152: NOT
37153: OR
37154: IFFALSE 37158
// exit ;
37156: GO 37433
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37158: LD_ADDR_VAR 0 2
37162: PUSH
37163: LD_VAR 0 1
37167: PPUSH
37168: LD_VAR 0 2
37172: PPUSH
37173: LD_INT 1
37175: PPUSH
37176: LD_INT 1
37178: PPUSH
37179: CALL 45393 0 4
37183: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37184: LD_ADDR_VAR 0 5
37188: PUSH
37189: LD_EXP 113
37193: PPUSH
37194: LD_VAR 0 1
37198: PPUSH
37199: CALL 44743 0 2
37203: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37204: LD_EXP 114
37208: PUSH
37209: LD_VAR 0 5
37213: ARRAY
37214: PUSH
37215: LD_EXP 115
37219: LESS
37220: IFFALSE 37409
// begin for i := 1 to vehicles do
37222: LD_ADDR_VAR 0 4
37226: PUSH
37227: DOUBLE
37228: LD_INT 1
37230: DEC
37231: ST_TO_ADDR
37232: LD_VAR 0 2
37236: PUSH
37237: FOR_TO
37238: IFFALSE 37407
// begin if hackTanksCaptured [ index ] = hackLimit then
37240: LD_EXP 114
37244: PUSH
37245: LD_VAR 0 5
37249: ARRAY
37250: PUSH
37251: LD_EXP 115
37255: EQUAL
37256: IFFALSE 37260
// break ;
37258: GO 37407
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37260: LD_ADDR_EXP 117
37264: PUSH
37265: LD_EXP 117
37269: PPUSH
37270: LD_VAR 0 5
37274: PPUSH
37275: LD_EXP 117
37279: PUSH
37280: LD_VAR 0 5
37284: ARRAY
37285: PUSH
37286: LD_INT 1
37288: PLUS
37289: PPUSH
37290: CALL_OW 1
37294: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37295: LD_ADDR_EXP 114
37299: PUSH
37300: LD_EXP 114
37304: PPUSH
37305: LD_VAR 0 5
37309: PUSH
37310: LD_EXP 114
37314: PUSH
37315: LD_VAR 0 5
37319: ARRAY
37320: PUSH
37321: LD_INT 1
37323: PLUS
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PPUSH
37329: LD_VAR 0 2
37333: PUSH
37334: LD_VAR 0 4
37338: ARRAY
37339: PUSH
37340: LD_VAR 0 2
37344: PUSH
37345: LD_VAR 0 4
37349: ARRAY
37350: PPUSH
37351: CALL_OW 255
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PPUSH
37360: CALL 44958 0 3
37364: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37365: LD_VAR 0 2
37369: PUSH
37370: LD_VAR 0 4
37374: ARRAY
37375: PPUSH
37376: LD_VAR 0 1
37380: PPUSH
37381: CALL_OW 255
37385: PPUSH
37386: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37390: LD_VAR 0 2
37394: PUSH
37395: LD_VAR 0 4
37399: ARRAY
37400: PPUSH
37401: CALL_OW 141
// end ;
37405: GO 37237
37407: POP
37408: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37409: LD_VAR 0 1
37413: PPUSH
37414: LD_EXP 114
37418: PUSH
37419: LD_VAR 0 5
37423: ARRAY
37424: PUSH
37425: LD_INT 0
37427: PLUS
37428: PPUSH
37429: CALL_OW 505
// end ;
37433: LD_VAR 0 3
37437: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37438: LD_INT 0
37440: PPUSH
37441: PPUSH
37442: PPUSH
37443: PPUSH
// if not hack in hackTanks then
37444: LD_VAR 0 1
37448: PUSH
37449: LD_EXP 113
37453: IN
37454: NOT
37455: IFFALSE 37459
// exit ;
37457: GO 37699
// index := GetElementIndex ( hackTanks , hack ) ;
37459: LD_ADDR_VAR 0 4
37463: PUSH
37464: LD_EXP 113
37468: PPUSH
37469: LD_VAR 0 1
37473: PPUSH
37474: CALL 44743 0 2
37478: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37479: LD_ADDR_VAR 0 3
37483: PUSH
37484: DOUBLE
37485: LD_EXP 114
37489: PUSH
37490: LD_VAR 0 4
37494: ARRAY
37495: INC
37496: ST_TO_ADDR
37497: LD_INT 1
37499: PUSH
37500: FOR_DOWNTO
37501: IFFALSE 37673
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37503: LD_ADDR_VAR 0 5
37507: PUSH
37508: LD_EXP 114
37512: PUSH
37513: LD_VAR 0 4
37517: ARRAY
37518: PUSH
37519: LD_VAR 0 3
37523: ARRAY
37524: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37525: LD_VAR 0 5
37529: PUSH
37530: LD_INT 1
37532: ARRAY
37533: PPUSH
37534: CALL_OW 302
37538: NOT
37539: PUSH
37540: LD_VAR 0 5
37544: PUSH
37545: LD_INT 1
37547: ARRAY
37548: PPUSH
37549: CALL_OW 255
37553: PUSH
37554: LD_VAR 0 1
37558: PPUSH
37559: CALL_OW 255
37563: NONEQUAL
37564: OR
37565: IFFALSE 37671
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37567: LD_VAR 0 5
37571: PUSH
37572: LD_INT 1
37574: ARRAY
37575: PPUSH
37576: CALL_OW 305
37580: PUSH
37581: LD_VAR 0 5
37585: PUSH
37586: LD_INT 1
37588: ARRAY
37589: PPUSH
37590: CALL_OW 255
37594: PUSH
37595: LD_VAR 0 1
37599: PPUSH
37600: CALL_OW 255
37604: EQUAL
37605: AND
37606: IFFALSE 37630
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37608: LD_VAR 0 5
37612: PUSH
37613: LD_INT 1
37615: ARRAY
37616: PPUSH
37617: LD_VAR 0 5
37621: PUSH
37622: LD_INT 2
37624: ARRAY
37625: PPUSH
37626: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37630: LD_ADDR_EXP 114
37634: PUSH
37635: LD_EXP 114
37639: PPUSH
37640: LD_VAR 0 4
37644: PPUSH
37645: LD_EXP 114
37649: PUSH
37650: LD_VAR 0 4
37654: ARRAY
37655: PPUSH
37656: LD_VAR 0 3
37660: PPUSH
37661: CALL_OW 3
37665: PPUSH
37666: CALL_OW 1
37670: ST_TO_ADDR
// end ; end ;
37671: GO 37500
37673: POP
37674: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37675: LD_VAR 0 1
37679: PPUSH
37680: LD_EXP 114
37684: PUSH
37685: LD_VAR 0 4
37689: ARRAY
37690: PUSH
37691: LD_INT 0
37693: PLUS
37694: PPUSH
37695: CALL_OW 505
// end ;
37699: LD_VAR 0 2
37703: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37704: LD_INT 0
37706: PPUSH
37707: PPUSH
37708: PPUSH
37709: PPUSH
// if not hack in hackTanks then
37710: LD_VAR 0 1
37714: PUSH
37715: LD_EXP 113
37719: IN
37720: NOT
37721: IFFALSE 37725
// exit ;
37723: GO 37810
// index := GetElementIndex ( hackTanks , hack ) ;
37725: LD_ADDR_VAR 0 5
37729: PUSH
37730: LD_EXP 113
37734: PPUSH
37735: LD_VAR 0 1
37739: PPUSH
37740: CALL 44743 0 2
37744: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37745: LD_ADDR_VAR 0 4
37749: PUSH
37750: DOUBLE
37751: LD_INT 1
37753: DEC
37754: ST_TO_ADDR
37755: LD_EXP 114
37759: PUSH
37760: LD_VAR 0 5
37764: ARRAY
37765: PUSH
37766: FOR_TO
37767: IFFALSE 37808
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37769: LD_EXP 114
37773: PUSH
37774: LD_VAR 0 5
37778: ARRAY
37779: PUSH
37780: LD_VAR 0 4
37784: ARRAY
37785: PUSH
37786: LD_INT 1
37788: ARRAY
37789: PUSH
37790: LD_VAR 0 2
37794: EQUAL
37795: IFFALSE 37806
// KillUnit ( vehicle ) ;
37797: LD_VAR 0 2
37801: PPUSH
37802: CALL_OW 66
37806: GO 37766
37808: POP
37809: POP
// end ;
37810: LD_VAR 0 3
37814: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37815: LD_EXP 118
37819: NOT
37820: IFFALSE 37855
37822: GO 37824
37824: DISABLE
// begin initMiner := true ;
37825: LD_ADDR_EXP 118
37829: PUSH
37830: LD_INT 1
37832: ST_TO_ADDR
// minersList := [ ] ;
37833: LD_ADDR_EXP 119
37837: PUSH
37838: EMPTY
37839: ST_TO_ADDR
// minerMinesList := [ ] ;
37840: LD_ADDR_EXP 120
37844: PUSH
37845: EMPTY
37846: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37847: LD_ADDR_EXP 121
37851: PUSH
37852: LD_INT 5
37854: ST_TO_ADDR
// end ;
37855: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37856: LD_EXP 118
37860: PUSH
37861: LD_INT 34
37863: PUSH
37864: LD_INT 81
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PPUSH
37871: CALL_OW 69
37875: AND
37876: IFFALSE 38337
37878: GO 37880
37880: DISABLE
37881: LD_INT 0
37883: PPUSH
37884: PPUSH
37885: PPUSH
37886: PPUSH
// begin enable ;
37887: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37888: LD_ADDR_VAR 0 1
37892: PUSH
37893: LD_INT 34
37895: PUSH
37896: LD_INT 81
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PPUSH
37903: CALL_OW 69
37907: PUSH
37908: FOR_IN
37909: IFFALSE 37981
// begin if not i in minersList then
37911: LD_VAR 0 1
37915: PUSH
37916: LD_EXP 119
37920: IN
37921: NOT
37922: IFFALSE 37979
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37924: LD_ADDR_EXP 119
37928: PUSH
37929: LD_EXP 119
37933: PPUSH
37934: LD_EXP 119
37938: PUSH
37939: LD_INT 1
37941: PLUS
37942: PPUSH
37943: LD_VAR 0 1
37947: PPUSH
37948: CALL_OW 1
37952: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37953: LD_ADDR_EXP 120
37957: PUSH
37958: LD_EXP 120
37962: PPUSH
37963: LD_EXP 120
37967: PUSH
37968: LD_INT 1
37970: PLUS
37971: PPUSH
37972: EMPTY
37973: PPUSH
37974: CALL_OW 1
37978: ST_TO_ADDR
// end end ;
37979: GO 37908
37981: POP
37982: POP
// for i := minerMinesList downto 1 do
37983: LD_ADDR_VAR 0 1
37987: PUSH
37988: DOUBLE
37989: LD_EXP 120
37993: INC
37994: ST_TO_ADDR
37995: LD_INT 1
37997: PUSH
37998: FOR_DOWNTO
37999: IFFALSE 38335
// begin if IsLive ( minersList [ i ] ) then
38001: LD_EXP 119
38005: PUSH
38006: LD_VAR 0 1
38010: ARRAY
38011: PPUSH
38012: CALL_OW 300
38016: IFFALSE 38044
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38018: LD_EXP 119
38022: PUSH
38023: LD_VAR 0 1
38027: ARRAY
38028: PPUSH
38029: LD_EXP 120
38033: PUSH
38034: LD_VAR 0 1
38038: ARRAY
38039: PPUSH
38040: CALL_OW 505
// if not minerMinesList [ i ] then
38044: LD_EXP 120
38048: PUSH
38049: LD_VAR 0 1
38053: ARRAY
38054: NOT
38055: IFFALSE 38059
// continue ;
38057: GO 37998
// for j := minerMinesList [ i ] downto 1 do
38059: LD_ADDR_VAR 0 2
38063: PUSH
38064: DOUBLE
38065: LD_EXP 120
38069: PUSH
38070: LD_VAR 0 1
38074: ARRAY
38075: INC
38076: ST_TO_ADDR
38077: LD_INT 1
38079: PUSH
38080: FOR_DOWNTO
38081: IFFALSE 38331
// begin side := GetSide ( minersList [ i ] ) ;
38083: LD_ADDR_VAR 0 3
38087: PUSH
38088: LD_EXP 119
38092: PUSH
38093: LD_VAR 0 1
38097: ARRAY
38098: PPUSH
38099: CALL_OW 255
38103: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38104: LD_ADDR_VAR 0 4
38108: PUSH
38109: LD_EXP 120
38113: PUSH
38114: LD_VAR 0 1
38118: ARRAY
38119: PUSH
38120: LD_VAR 0 2
38124: ARRAY
38125: PUSH
38126: LD_INT 1
38128: ARRAY
38129: PPUSH
38130: LD_EXP 120
38134: PUSH
38135: LD_VAR 0 1
38139: ARRAY
38140: PUSH
38141: LD_VAR 0 2
38145: ARRAY
38146: PUSH
38147: LD_INT 2
38149: ARRAY
38150: PPUSH
38151: CALL_OW 428
38155: ST_TO_ADDR
// if not tmp then
38156: LD_VAR 0 4
38160: NOT
38161: IFFALSE 38165
// continue ;
38163: GO 38080
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38165: LD_VAR 0 4
38169: PUSH
38170: LD_INT 81
38172: PUSH
38173: LD_VAR 0 3
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PPUSH
38182: CALL_OW 69
38186: IN
38187: PUSH
38188: LD_EXP 120
38192: PUSH
38193: LD_VAR 0 1
38197: ARRAY
38198: PUSH
38199: LD_VAR 0 2
38203: ARRAY
38204: PUSH
38205: LD_INT 1
38207: ARRAY
38208: PPUSH
38209: LD_EXP 120
38213: PUSH
38214: LD_VAR 0 1
38218: ARRAY
38219: PUSH
38220: LD_VAR 0 2
38224: ARRAY
38225: PUSH
38226: LD_INT 2
38228: ARRAY
38229: PPUSH
38230: CALL_OW 458
38234: AND
38235: IFFALSE 38329
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38237: LD_EXP 120
38241: PUSH
38242: LD_VAR 0 1
38246: ARRAY
38247: PUSH
38248: LD_VAR 0 2
38252: ARRAY
38253: PUSH
38254: LD_INT 1
38256: ARRAY
38257: PPUSH
38258: LD_EXP 120
38262: PUSH
38263: LD_VAR 0 1
38267: ARRAY
38268: PUSH
38269: LD_VAR 0 2
38273: ARRAY
38274: PUSH
38275: LD_INT 2
38277: ARRAY
38278: PPUSH
38279: LD_VAR 0 3
38283: PPUSH
38284: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38288: LD_ADDR_EXP 120
38292: PUSH
38293: LD_EXP 120
38297: PPUSH
38298: LD_VAR 0 1
38302: PPUSH
38303: LD_EXP 120
38307: PUSH
38308: LD_VAR 0 1
38312: ARRAY
38313: PPUSH
38314: LD_VAR 0 2
38318: PPUSH
38319: CALL_OW 3
38323: PPUSH
38324: CALL_OW 1
38328: ST_TO_ADDR
// end ; end ;
38329: GO 38080
38331: POP
38332: POP
// end ;
38333: GO 37998
38335: POP
38336: POP
// end ;
38337: PPOPN 4
38339: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38340: LD_INT 0
38342: PPUSH
38343: PPUSH
// result := false ;
38344: LD_ADDR_VAR 0 4
38348: PUSH
38349: LD_INT 0
38351: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38352: LD_VAR 0 1
38356: PPUSH
38357: CALL_OW 264
38361: PUSH
38362: LD_INT 81
38364: EQUAL
38365: NOT
38366: IFFALSE 38370
// exit ;
38368: GO 38610
// index := GetElementIndex ( minersList , unit ) ;
38370: LD_ADDR_VAR 0 5
38374: PUSH
38375: LD_EXP 119
38379: PPUSH
38380: LD_VAR 0 1
38384: PPUSH
38385: CALL 44743 0 2
38389: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38390: LD_EXP 120
38394: PUSH
38395: LD_VAR 0 5
38399: ARRAY
38400: PUSH
38401: LD_EXP 121
38405: GREATEREQUAL
38406: IFFALSE 38410
// exit ;
38408: GO 38610
// ComMoveXY ( unit , x , y ) ;
38410: LD_VAR 0 1
38414: PPUSH
38415: LD_VAR 0 2
38419: PPUSH
38420: LD_VAR 0 3
38424: PPUSH
38425: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38429: LD_INT 35
38431: PPUSH
38432: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38436: LD_VAR 0 1
38440: PPUSH
38441: LD_VAR 0 2
38445: PPUSH
38446: LD_VAR 0 3
38450: PPUSH
38451: CALL 76098 0 3
38455: NOT
38456: PUSH
38457: LD_VAR 0 1
38461: PPUSH
38462: CALL_OW 314
38466: AND
38467: IFFALSE 38471
// exit ;
38469: GO 38610
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38471: LD_VAR 0 2
38475: PPUSH
38476: LD_VAR 0 3
38480: PPUSH
38481: CALL_OW 428
38485: PUSH
38486: LD_VAR 0 1
38490: EQUAL
38491: PUSH
38492: LD_VAR 0 1
38496: PPUSH
38497: CALL_OW 314
38501: NOT
38502: AND
38503: IFFALSE 38429
// PlaySoundXY ( x , y , PlantMine ) ;
38505: LD_VAR 0 2
38509: PPUSH
38510: LD_VAR 0 3
38514: PPUSH
38515: LD_STRING PlantMine
38517: PPUSH
38518: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38522: LD_VAR 0 2
38526: PPUSH
38527: LD_VAR 0 3
38531: PPUSH
38532: LD_VAR 0 1
38536: PPUSH
38537: CALL_OW 255
38541: PPUSH
38542: LD_INT 0
38544: PPUSH
38545: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38549: LD_ADDR_EXP 120
38553: PUSH
38554: LD_EXP 120
38558: PPUSH
38559: LD_VAR 0 5
38563: PUSH
38564: LD_EXP 120
38568: PUSH
38569: LD_VAR 0 5
38573: ARRAY
38574: PUSH
38575: LD_INT 1
38577: PLUS
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PPUSH
38583: LD_VAR 0 2
38587: PUSH
38588: LD_VAR 0 3
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PPUSH
38597: CALL 44958 0 3
38601: ST_TO_ADDR
// result := true ;
38602: LD_ADDR_VAR 0 4
38606: PUSH
38607: LD_INT 1
38609: ST_TO_ADDR
// end ;
38610: LD_VAR 0 4
38614: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38615: LD_INT 0
38617: PPUSH
38618: PPUSH
38619: PPUSH
// if not unit in minersList then
38620: LD_VAR 0 1
38624: PUSH
38625: LD_EXP 119
38629: IN
38630: NOT
38631: IFFALSE 38635
// exit ;
38633: GO 39027
// index := GetElementIndex ( minersList , unit ) ;
38635: LD_ADDR_VAR 0 6
38639: PUSH
38640: LD_EXP 119
38644: PPUSH
38645: LD_VAR 0 1
38649: PPUSH
38650: CALL 44743 0 2
38654: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38655: LD_ADDR_VAR 0 5
38659: PUSH
38660: DOUBLE
38661: LD_EXP 120
38665: PUSH
38666: LD_VAR 0 6
38670: ARRAY
38671: INC
38672: ST_TO_ADDR
38673: LD_INT 1
38675: PUSH
38676: FOR_DOWNTO
38677: IFFALSE 38838
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38679: LD_EXP 120
38683: PUSH
38684: LD_VAR 0 6
38688: ARRAY
38689: PUSH
38690: LD_VAR 0 5
38694: ARRAY
38695: PUSH
38696: LD_INT 1
38698: ARRAY
38699: PUSH
38700: LD_VAR 0 2
38704: EQUAL
38705: PUSH
38706: LD_EXP 120
38710: PUSH
38711: LD_VAR 0 6
38715: ARRAY
38716: PUSH
38717: LD_VAR 0 5
38721: ARRAY
38722: PUSH
38723: LD_INT 2
38725: ARRAY
38726: PUSH
38727: LD_VAR 0 3
38731: EQUAL
38732: AND
38733: IFFALSE 38836
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38735: LD_EXP 120
38739: PUSH
38740: LD_VAR 0 6
38744: ARRAY
38745: PUSH
38746: LD_VAR 0 5
38750: ARRAY
38751: PUSH
38752: LD_INT 1
38754: ARRAY
38755: PPUSH
38756: LD_EXP 120
38760: PUSH
38761: LD_VAR 0 6
38765: ARRAY
38766: PUSH
38767: LD_VAR 0 5
38771: ARRAY
38772: PUSH
38773: LD_INT 2
38775: ARRAY
38776: PPUSH
38777: LD_VAR 0 1
38781: PPUSH
38782: CALL_OW 255
38786: PPUSH
38787: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38791: LD_ADDR_EXP 120
38795: PUSH
38796: LD_EXP 120
38800: PPUSH
38801: LD_VAR 0 6
38805: PPUSH
38806: LD_EXP 120
38810: PUSH
38811: LD_VAR 0 6
38815: ARRAY
38816: PPUSH
38817: LD_VAR 0 5
38821: PPUSH
38822: CALL_OW 3
38826: PPUSH
38827: CALL_OW 1
38831: ST_TO_ADDR
// exit ;
38832: POP
38833: POP
38834: GO 39027
// end ; end ;
38836: GO 38676
38838: POP
38839: POP
// for i := minerMinesList [ index ] downto 1 do
38840: LD_ADDR_VAR 0 5
38844: PUSH
38845: DOUBLE
38846: LD_EXP 120
38850: PUSH
38851: LD_VAR 0 6
38855: ARRAY
38856: INC
38857: ST_TO_ADDR
38858: LD_INT 1
38860: PUSH
38861: FOR_DOWNTO
38862: IFFALSE 39025
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38864: LD_EXP 120
38868: PUSH
38869: LD_VAR 0 6
38873: ARRAY
38874: PUSH
38875: LD_VAR 0 5
38879: ARRAY
38880: PUSH
38881: LD_INT 1
38883: ARRAY
38884: PPUSH
38885: LD_EXP 120
38889: PUSH
38890: LD_VAR 0 6
38894: ARRAY
38895: PUSH
38896: LD_VAR 0 5
38900: ARRAY
38901: PUSH
38902: LD_INT 2
38904: ARRAY
38905: PPUSH
38906: LD_VAR 0 2
38910: PPUSH
38911: LD_VAR 0 3
38915: PPUSH
38916: CALL_OW 298
38920: PUSH
38921: LD_INT 6
38923: LESS
38924: IFFALSE 39023
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38926: LD_EXP 120
38930: PUSH
38931: LD_VAR 0 6
38935: ARRAY
38936: PUSH
38937: LD_VAR 0 5
38941: ARRAY
38942: PUSH
38943: LD_INT 1
38945: ARRAY
38946: PPUSH
38947: LD_EXP 120
38951: PUSH
38952: LD_VAR 0 6
38956: ARRAY
38957: PUSH
38958: LD_VAR 0 5
38962: ARRAY
38963: PUSH
38964: LD_INT 2
38966: ARRAY
38967: PPUSH
38968: LD_VAR 0 1
38972: PPUSH
38973: CALL_OW 255
38977: PPUSH
38978: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38982: LD_ADDR_EXP 120
38986: PUSH
38987: LD_EXP 120
38991: PPUSH
38992: LD_VAR 0 6
38996: PPUSH
38997: LD_EXP 120
39001: PUSH
39002: LD_VAR 0 6
39006: ARRAY
39007: PPUSH
39008: LD_VAR 0 5
39012: PPUSH
39013: CALL_OW 3
39017: PPUSH
39018: CALL_OW 1
39022: ST_TO_ADDR
// end ; end ;
39023: GO 38861
39025: POP
39026: POP
// end ;
39027: LD_VAR 0 4
39031: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39032: LD_INT 0
39034: PPUSH
39035: PPUSH
39036: PPUSH
39037: PPUSH
39038: PPUSH
39039: PPUSH
39040: PPUSH
39041: PPUSH
39042: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39043: LD_VAR 0 1
39047: PPUSH
39048: CALL_OW 264
39052: PUSH
39053: LD_INT 81
39055: EQUAL
39056: NOT
39057: PUSH
39058: LD_VAR 0 1
39062: PUSH
39063: LD_EXP 119
39067: IN
39068: NOT
39069: OR
39070: IFFALSE 39074
// exit ;
39072: GO 39396
// index := GetElementIndex ( minersList , unit ) ;
39074: LD_ADDR_VAR 0 6
39078: PUSH
39079: LD_EXP 119
39083: PPUSH
39084: LD_VAR 0 1
39088: PPUSH
39089: CALL 44743 0 2
39093: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39094: LD_ADDR_VAR 0 8
39098: PUSH
39099: LD_EXP 121
39103: PUSH
39104: LD_EXP 120
39108: PUSH
39109: LD_VAR 0 6
39113: ARRAY
39114: MINUS
39115: ST_TO_ADDR
// if not minesFreeAmount then
39116: LD_VAR 0 8
39120: NOT
39121: IFFALSE 39125
// exit ;
39123: GO 39396
// tmp := [ ] ;
39125: LD_ADDR_VAR 0 7
39129: PUSH
39130: EMPTY
39131: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39132: LD_ADDR_VAR 0 5
39136: PUSH
39137: DOUBLE
39138: LD_INT 1
39140: DEC
39141: ST_TO_ADDR
39142: LD_VAR 0 8
39146: PUSH
39147: FOR_TO
39148: IFFALSE 39343
// begin _d := rand ( 0 , 5 ) ;
39150: LD_ADDR_VAR 0 11
39154: PUSH
39155: LD_INT 0
39157: PPUSH
39158: LD_INT 5
39160: PPUSH
39161: CALL_OW 12
39165: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39166: LD_ADDR_VAR 0 12
39170: PUSH
39171: LD_INT 2
39173: PPUSH
39174: LD_INT 6
39176: PPUSH
39177: CALL_OW 12
39181: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39182: LD_ADDR_VAR 0 9
39186: PUSH
39187: LD_VAR 0 2
39191: PPUSH
39192: LD_VAR 0 11
39196: PPUSH
39197: LD_VAR 0 12
39201: PPUSH
39202: CALL_OW 272
39206: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39207: LD_ADDR_VAR 0 10
39211: PUSH
39212: LD_VAR 0 3
39216: PPUSH
39217: LD_VAR 0 11
39221: PPUSH
39222: LD_VAR 0 12
39226: PPUSH
39227: CALL_OW 273
39231: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39232: LD_VAR 0 9
39236: PPUSH
39237: LD_VAR 0 10
39241: PPUSH
39242: CALL_OW 488
39246: PUSH
39247: LD_VAR 0 9
39251: PUSH
39252: LD_VAR 0 10
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_VAR 0 7
39265: IN
39266: NOT
39267: AND
39268: PUSH
39269: LD_VAR 0 9
39273: PPUSH
39274: LD_VAR 0 10
39278: PPUSH
39279: CALL_OW 458
39283: NOT
39284: AND
39285: IFFALSE 39327
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39287: LD_ADDR_VAR 0 7
39291: PUSH
39292: LD_VAR 0 7
39296: PPUSH
39297: LD_VAR 0 7
39301: PUSH
39302: LD_INT 1
39304: PLUS
39305: PPUSH
39306: LD_VAR 0 9
39310: PUSH
39311: LD_VAR 0 10
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PPUSH
39320: CALL_OW 1
39324: ST_TO_ADDR
39325: GO 39341
// i := i - 1 ;
39327: LD_ADDR_VAR 0 5
39331: PUSH
39332: LD_VAR 0 5
39336: PUSH
39337: LD_INT 1
39339: MINUS
39340: ST_TO_ADDR
// end ;
39341: GO 39147
39343: POP
39344: POP
// for i in tmp do
39345: LD_ADDR_VAR 0 5
39349: PUSH
39350: LD_VAR 0 7
39354: PUSH
39355: FOR_IN
39356: IFFALSE 39394
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39358: LD_VAR 0 1
39362: PPUSH
39363: LD_VAR 0 5
39367: PUSH
39368: LD_INT 1
39370: ARRAY
39371: PPUSH
39372: LD_VAR 0 5
39376: PUSH
39377: LD_INT 2
39379: ARRAY
39380: PPUSH
39381: CALL 38340 0 3
39385: NOT
39386: IFFALSE 39392
// exit ;
39388: POP
39389: POP
39390: GO 39396
39392: GO 39355
39394: POP
39395: POP
// end ;
39396: LD_VAR 0 4
39400: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39401: LD_INT 0
39403: PPUSH
39404: PPUSH
39405: PPUSH
39406: PPUSH
39407: PPUSH
39408: PPUSH
39409: PPUSH
// if not GetClass ( unit ) = class_sniper then
39410: LD_VAR 0 1
39414: PPUSH
39415: CALL_OW 257
39419: PUSH
39420: LD_INT 5
39422: EQUAL
39423: NOT
39424: IFFALSE 39428
// exit ;
39426: GO 39816
// dist := 8 ;
39428: LD_ADDR_VAR 0 5
39432: PUSH
39433: LD_INT 8
39435: ST_TO_ADDR
// viewRange := 12 ;
39436: LD_ADDR_VAR 0 7
39440: PUSH
39441: LD_INT 12
39443: ST_TO_ADDR
// side := GetSide ( unit ) ;
39444: LD_ADDR_VAR 0 6
39448: PUSH
39449: LD_VAR 0 1
39453: PPUSH
39454: CALL_OW 255
39458: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39459: LD_INT 61
39461: PPUSH
39462: LD_VAR 0 6
39466: PPUSH
39467: CALL_OW 321
39471: PUSH
39472: LD_INT 2
39474: EQUAL
39475: IFFALSE 39485
// viewRange := 16 ;
39477: LD_ADDR_VAR 0 7
39481: PUSH
39482: LD_INT 16
39484: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39485: LD_VAR 0 1
39489: PPUSH
39490: LD_VAR 0 2
39494: PPUSH
39495: LD_VAR 0 3
39499: PPUSH
39500: CALL_OW 297
39504: PUSH
39505: LD_VAR 0 5
39509: GREATER
39510: IFFALSE 39589
// begin ComMoveXY ( unit , x , y ) ;
39512: LD_VAR 0 1
39516: PPUSH
39517: LD_VAR 0 2
39521: PPUSH
39522: LD_VAR 0 3
39526: PPUSH
39527: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39531: LD_INT 35
39533: PPUSH
39534: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39538: LD_VAR 0 1
39542: PPUSH
39543: LD_VAR 0 2
39547: PPUSH
39548: LD_VAR 0 3
39552: PPUSH
39553: CALL 76098 0 3
39557: NOT
39558: IFFALSE 39562
// exit ;
39560: GO 39816
// until GetDistUnitXY ( unit , x , y ) < dist ;
39562: LD_VAR 0 1
39566: PPUSH
39567: LD_VAR 0 2
39571: PPUSH
39572: LD_VAR 0 3
39576: PPUSH
39577: CALL_OW 297
39581: PUSH
39582: LD_VAR 0 5
39586: LESS
39587: IFFALSE 39531
// end ; ComTurnXY ( unit , x , y ) ;
39589: LD_VAR 0 1
39593: PPUSH
39594: LD_VAR 0 2
39598: PPUSH
39599: LD_VAR 0 3
39603: PPUSH
39604: CALL_OW 118
// wait ( 5 ) ;
39608: LD_INT 5
39610: PPUSH
39611: CALL_OW 67
// _d := GetDir ( unit ) ;
39615: LD_ADDR_VAR 0 10
39619: PUSH
39620: LD_VAR 0 1
39624: PPUSH
39625: CALL_OW 254
39629: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39630: LD_ADDR_VAR 0 8
39634: PUSH
39635: LD_VAR 0 1
39639: PPUSH
39640: CALL_OW 250
39644: PPUSH
39645: LD_VAR 0 10
39649: PPUSH
39650: LD_VAR 0 5
39654: PPUSH
39655: CALL_OW 272
39659: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39660: LD_ADDR_VAR 0 9
39664: PUSH
39665: LD_VAR 0 1
39669: PPUSH
39670: CALL_OW 251
39674: PPUSH
39675: LD_VAR 0 10
39679: PPUSH
39680: LD_VAR 0 5
39684: PPUSH
39685: CALL_OW 273
39689: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39690: LD_VAR 0 8
39694: PPUSH
39695: LD_VAR 0 9
39699: PPUSH
39700: CALL_OW 488
39704: NOT
39705: IFFALSE 39709
// exit ;
39707: GO 39816
// ComAnimCustom ( unit , 1 ) ;
39709: LD_VAR 0 1
39713: PPUSH
39714: LD_INT 1
39716: PPUSH
39717: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39721: LD_VAR 0 8
39725: PPUSH
39726: LD_VAR 0 9
39730: PPUSH
39731: LD_VAR 0 6
39735: PPUSH
39736: LD_VAR 0 7
39740: PPUSH
39741: CALL_OW 330
// repeat wait ( 1 ) ;
39745: LD_INT 1
39747: PPUSH
39748: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39752: LD_VAR 0 1
39756: PPUSH
39757: CALL_OW 316
39761: PUSH
39762: LD_VAR 0 1
39766: PPUSH
39767: CALL_OW 314
39771: OR
39772: PUSH
39773: LD_VAR 0 1
39777: PPUSH
39778: CALL_OW 302
39782: NOT
39783: OR
39784: PUSH
39785: LD_VAR 0 1
39789: PPUSH
39790: CALL_OW 301
39794: OR
39795: IFFALSE 39745
// RemoveSeeing ( _x , _y , side ) ;
39797: LD_VAR 0 8
39801: PPUSH
39802: LD_VAR 0 9
39806: PPUSH
39807: LD_VAR 0 6
39811: PPUSH
39812: CALL_OW 331
// end ; end_of_file
39816: LD_VAR 0 4
39820: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39821: LD_INT 0
39823: PPUSH
39824: PPUSH
// if exist_mode then
39825: LD_VAR 0 2
39829: IFFALSE 39854
// unit := CreateCharacter ( prefix & ident ) else
39831: LD_ADDR_VAR 0 5
39835: PUSH
39836: LD_VAR 0 3
39840: PUSH
39841: LD_VAR 0 1
39845: STR
39846: PPUSH
39847: CALL_OW 34
39851: ST_TO_ADDR
39852: GO 39869
// unit := NewCharacter ( ident ) ;
39854: LD_ADDR_VAR 0 5
39858: PUSH
39859: LD_VAR 0 1
39863: PPUSH
39864: CALL_OW 25
39868: ST_TO_ADDR
// result := unit ;
39869: LD_ADDR_VAR 0 4
39873: PUSH
39874: LD_VAR 0 5
39878: ST_TO_ADDR
// end ;
39879: LD_VAR 0 4
39883: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39884: LD_INT 0
39886: PPUSH
39887: PPUSH
// if not side or not nation then
39888: LD_VAR 0 1
39892: NOT
39893: PUSH
39894: LD_VAR 0 2
39898: NOT
39899: OR
39900: IFFALSE 39904
// exit ;
39902: GO 40672
// case nation of nation_american :
39904: LD_VAR 0 2
39908: PUSH
39909: LD_INT 1
39911: DOUBLE
39912: EQUAL
39913: IFTRUE 39917
39915: GO 40131
39917: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39918: LD_ADDR_VAR 0 4
39922: PUSH
39923: LD_INT 35
39925: PUSH
39926: LD_INT 45
39928: PUSH
39929: LD_INT 46
39931: PUSH
39932: LD_INT 47
39934: PUSH
39935: LD_INT 82
39937: PUSH
39938: LD_INT 83
39940: PUSH
39941: LD_INT 84
39943: PUSH
39944: LD_INT 85
39946: PUSH
39947: LD_INT 86
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 2
39955: PUSH
39956: LD_INT 6
39958: PUSH
39959: LD_INT 15
39961: PUSH
39962: LD_INT 16
39964: PUSH
39965: LD_INT 7
39967: PUSH
39968: LD_INT 12
39970: PUSH
39971: LD_INT 13
39973: PUSH
39974: LD_INT 10
39976: PUSH
39977: LD_INT 14
39979: PUSH
39980: LD_INT 20
39982: PUSH
39983: LD_INT 21
39985: PUSH
39986: LD_INT 22
39988: PUSH
39989: LD_INT 25
39991: PUSH
39992: LD_INT 32
39994: PUSH
39995: LD_INT 27
39997: PUSH
39998: LD_INT 36
40000: PUSH
40001: LD_INT 69
40003: PUSH
40004: LD_INT 39
40006: PUSH
40007: LD_INT 34
40009: PUSH
40010: LD_INT 40
40012: PUSH
40013: LD_INT 48
40015: PUSH
40016: LD_INT 49
40018: PUSH
40019: LD_INT 50
40021: PUSH
40022: LD_INT 51
40024: PUSH
40025: LD_INT 52
40027: PUSH
40028: LD_INT 53
40030: PUSH
40031: LD_INT 54
40033: PUSH
40034: LD_INT 55
40036: PUSH
40037: LD_INT 56
40039: PUSH
40040: LD_INT 57
40042: PUSH
40043: LD_INT 58
40045: PUSH
40046: LD_INT 59
40048: PUSH
40049: LD_INT 60
40051: PUSH
40052: LD_INT 61
40054: PUSH
40055: LD_INT 62
40057: PUSH
40058: LD_INT 80
40060: PUSH
40061: LD_INT 82
40063: PUSH
40064: LD_INT 83
40066: PUSH
40067: LD_INT 84
40069: PUSH
40070: LD_INT 85
40072: PUSH
40073: LD_INT 86
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: ST_TO_ADDR
40129: GO 40596
40131: LD_INT 2
40133: DOUBLE
40134: EQUAL
40135: IFTRUE 40139
40137: GO 40365
40139: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40140: LD_ADDR_VAR 0 4
40144: PUSH
40145: LD_INT 35
40147: PUSH
40148: LD_INT 45
40150: PUSH
40151: LD_INT 46
40153: PUSH
40154: LD_INT 47
40156: PUSH
40157: LD_INT 82
40159: PUSH
40160: LD_INT 83
40162: PUSH
40163: LD_INT 84
40165: PUSH
40166: LD_INT 85
40168: PUSH
40169: LD_INT 87
40171: PUSH
40172: LD_INT 70
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: LD_INT 11
40180: PUSH
40181: LD_INT 3
40183: PUSH
40184: LD_INT 4
40186: PUSH
40187: LD_INT 5
40189: PUSH
40190: LD_INT 6
40192: PUSH
40193: LD_INT 15
40195: PUSH
40196: LD_INT 18
40198: PUSH
40199: LD_INT 7
40201: PUSH
40202: LD_INT 17
40204: PUSH
40205: LD_INT 8
40207: PUSH
40208: LD_INT 20
40210: PUSH
40211: LD_INT 21
40213: PUSH
40214: LD_INT 22
40216: PUSH
40217: LD_INT 72
40219: PUSH
40220: LD_INT 26
40222: PUSH
40223: LD_INT 69
40225: PUSH
40226: LD_INT 39
40228: PUSH
40229: LD_INT 40
40231: PUSH
40232: LD_INT 41
40234: PUSH
40235: LD_INT 42
40237: PUSH
40238: LD_INT 43
40240: PUSH
40241: LD_INT 48
40243: PUSH
40244: LD_INT 49
40246: PUSH
40247: LD_INT 50
40249: PUSH
40250: LD_INT 51
40252: PUSH
40253: LD_INT 52
40255: PUSH
40256: LD_INT 53
40258: PUSH
40259: LD_INT 54
40261: PUSH
40262: LD_INT 55
40264: PUSH
40265: LD_INT 56
40267: PUSH
40268: LD_INT 60
40270: PUSH
40271: LD_INT 61
40273: PUSH
40274: LD_INT 62
40276: PUSH
40277: LD_INT 66
40279: PUSH
40280: LD_INT 67
40282: PUSH
40283: LD_INT 68
40285: PUSH
40286: LD_INT 81
40288: PUSH
40289: LD_INT 82
40291: PUSH
40292: LD_INT 83
40294: PUSH
40295: LD_INT 84
40297: PUSH
40298: LD_INT 85
40300: PUSH
40301: LD_INT 87
40303: PUSH
40304: LD_INT 88
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: ST_TO_ADDR
40363: GO 40596
40365: LD_INT 3
40367: DOUBLE
40368: EQUAL
40369: IFTRUE 40373
40371: GO 40595
40373: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40374: LD_ADDR_VAR 0 4
40378: PUSH
40379: LD_INT 46
40381: PUSH
40382: LD_INT 47
40384: PUSH
40385: LD_INT 1
40387: PUSH
40388: LD_INT 2
40390: PUSH
40391: LD_INT 82
40393: PUSH
40394: LD_INT 83
40396: PUSH
40397: LD_INT 84
40399: PUSH
40400: LD_INT 85
40402: PUSH
40403: LD_INT 86
40405: PUSH
40406: LD_INT 11
40408: PUSH
40409: LD_INT 9
40411: PUSH
40412: LD_INT 20
40414: PUSH
40415: LD_INT 19
40417: PUSH
40418: LD_INT 21
40420: PUSH
40421: LD_INT 24
40423: PUSH
40424: LD_INT 22
40426: PUSH
40427: LD_INT 25
40429: PUSH
40430: LD_INT 28
40432: PUSH
40433: LD_INT 29
40435: PUSH
40436: LD_INT 30
40438: PUSH
40439: LD_INT 31
40441: PUSH
40442: LD_INT 37
40444: PUSH
40445: LD_INT 38
40447: PUSH
40448: LD_INT 32
40450: PUSH
40451: LD_INT 27
40453: PUSH
40454: LD_INT 33
40456: PUSH
40457: LD_INT 69
40459: PUSH
40460: LD_INT 39
40462: PUSH
40463: LD_INT 34
40465: PUSH
40466: LD_INT 40
40468: PUSH
40469: LD_INT 71
40471: PUSH
40472: LD_INT 23
40474: PUSH
40475: LD_INT 44
40477: PUSH
40478: LD_INT 48
40480: PUSH
40481: LD_INT 49
40483: PUSH
40484: LD_INT 50
40486: PUSH
40487: LD_INT 51
40489: PUSH
40490: LD_INT 52
40492: PUSH
40493: LD_INT 53
40495: PUSH
40496: LD_INT 54
40498: PUSH
40499: LD_INT 55
40501: PUSH
40502: LD_INT 56
40504: PUSH
40505: LD_INT 57
40507: PUSH
40508: LD_INT 58
40510: PUSH
40511: LD_INT 59
40513: PUSH
40514: LD_INT 63
40516: PUSH
40517: LD_INT 64
40519: PUSH
40520: LD_INT 65
40522: PUSH
40523: LD_INT 82
40525: PUSH
40526: LD_INT 83
40528: PUSH
40529: LD_INT 84
40531: PUSH
40532: LD_INT 85
40534: PUSH
40535: LD_INT 86
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: ST_TO_ADDR
40593: GO 40596
40595: POP
// if state > - 1 and state < 3 then
40596: LD_VAR 0 3
40600: PUSH
40601: LD_INT 1
40603: NEG
40604: GREATER
40605: PUSH
40606: LD_VAR 0 3
40610: PUSH
40611: LD_INT 3
40613: LESS
40614: AND
40615: IFFALSE 40672
// for i in result do
40617: LD_ADDR_VAR 0 5
40621: PUSH
40622: LD_VAR 0 4
40626: PUSH
40627: FOR_IN
40628: IFFALSE 40670
// if GetTech ( i , side ) <> state then
40630: LD_VAR 0 5
40634: PPUSH
40635: LD_VAR 0 1
40639: PPUSH
40640: CALL_OW 321
40644: PUSH
40645: LD_VAR 0 3
40649: NONEQUAL
40650: IFFALSE 40668
// result := result diff i ;
40652: LD_ADDR_VAR 0 4
40656: PUSH
40657: LD_VAR 0 4
40661: PUSH
40662: LD_VAR 0 5
40666: DIFF
40667: ST_TO_ADDR
40668: GO 40627
40670: POP
40671: POP
// end ;
40672: LD_VAR 0 4
40676: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40677: LD_INT 0
40679: PPUSH
40680: PPUSH
40681: PPUSH
// result := true ;
40682: LD_ADDR_VAR 0 3
40686: PUSH
40687: LD_INT 1
40689: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40690: LD_ADDR_VAR 0 5
40694: PUSH
40695: LD_VAR 0 2
40699: PPUSH
40700: CALL_OW 480
40704: ST_TO_ADDR
// if not tmp then
40705: LD_VAR 0 5
40709: NOT
40710: IFFALSE 40714
// exit ;
40712: GO 40763
// for i in tmp do
40714: LD_ADDR_VAR 0 4
40718: PUSH
40719: LD_VAR 0 5
40723: PUSH
40724: FOR_IN
40725: IFFALSE 40761
// if GetTech ( i , side ) <> state_researched then
40727: LD_VAR 0 4
40731: PPUSH
40732: LD_VAR 0 1
40736: PPUSH
40737: CALL_OW 321
40741: PUSH
40742: LD_INT 2
40744: NONEQUAL
40745: IFFALSE 40759
// begin result := false ;
40747: LD_ADDR_VAR 0 3
40751: PUSH
40752: LD_INT 0
40754: ST_TO_ADDR
// exit ;
40755: POP
40756: POP
40757: GO 40763
// end ;
40759: GO 40724
40761: POP
40762: POP
// end ;
40763: LD_VAR 0 3
40767: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40768: LD_INT 0
40770: PPUSH
40771: PPUSH
40772: PPUSH
40773: PPUSH
40774: PPUSH
40775: PPUSH
40776: PPUSH
40777: PPUSH
40778: PPUSH
40779: PPUSH
40780: PPUSH
40781: PPUSH
40782: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40783: LD_VAR 0 1
40787: NOT
40788: PUSH
40789: LD_VAR 0 1
40793: PPUSH
40794: CALL_OW 257
40798: PUSH
40799: LD_INT 9
40801: NONEQUAL
40802: OR
40803: IFFALSE 40807
// exit ;
40805: GO 41380
// side := GetSide ( unit ) ;
40807: LD_ADDR_VAR 0 9
40811: PUSH
40812: LD_VAR 0 1
40816: PPUSH
40817: CALL_OW 255
40821: ST_TO_ADDR
// tech_space := tech_spacanom ;
40822: LD_ADDR_VAR 0 12
40826: PUSH
40827: LD_INT 29
40829: ST_TO_ADDR
// tech_time := tech_taurad ;
40830: LD_ADDR_VAR 0 13
40834: PUSH
40835: LD_INT 28
40837: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40838: LD_ADDR_VAR 0 11
40842: PUSH
40843: LD_VAR 0 1
40847: PPUSH
40848: CALL_OW 310
40852: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40853: LD_VAR 0 11
40857: PPUSH
40858: CALL_OW 247
40862: PUSH
40863: LD_INT 2
40865: EQUAL
40866: IFFALSE 40870
// exit ;
40868: GO 41380
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40870: LD_ADDR_VAR 0 8
40874: PUSH
40875: LD_INT 81
40877: PUSH
40878: LD_VAR 0 9
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 3
40889: PUSH
40890: LD_INT 21
40892: PUSH
40893: LD_INT 3
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PPUSH
40908: CALL_OW 69
40912: ST_TO_ADDR
// if not tmp then
40913: LD_VAR 0 8
40917: NOT
40918: IFFALSE 40922
// exit ;
40920: GO 41380
// if in_unit then
40922: LD_VAR 0 11
40926: IFFALSE 40950
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40928: LD_ADDR_VAR 0 10
40932: PUSH
40933: LD_VAR 0 8
40937: PPUSH
40938: LD_VAR 0 11
40942: PPUSH
40943: CALL_OW 74
40947: ST_TO_ADDR
40948: GO 40970
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40950: LD_ADDR_VAR 0 10
40954: PUSH
40955: LD_VAR 0 8
40959: PPUSH
40960: LD_VAR 0 1
40964: PPUSH
40965: CALL_OW 74
40969: ST_TO_ADDR
// if not enemy then
40970: LD_VAR 0 10
40974: NOT
40975: IFFALSE 40979
// exit ;
40977: GO 41380
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40979: LD_VAR 0 11
40983: PUSH
40984: LD_VAR 0 11
40988: PPUSH
40989: LD_VAR 0 10
40993: PPUSH
40994: CALL_OW 296
40998: PUSH
40999: LD_INT 13
41001: GREATER
41002: AND
41003: PUSH
41004: LD_VAR 0 1
41008: PPUSH
41009: LD_VAR 0 10
41013: PPUSH
41014: CALL_OW 296
41018: PUSH
41019: LD_INT 12
41021: GREATER
41022: OR
41023: IFFALSE 41027
// exit ;
41025: GO 41380
// missile := [ 1 ] ;
41027: LD_ADDR_VAR 0 14
41031: PUSH
41032: LD_INT 1
41034: PUSH
41035: EMPTY
41036: LIST
41037: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41038: LD_VAR 0 9
41042: PPUSH
41043: LD_VAR 0 12
41047: PPUSH
41048: CALL_OW 325
41052: IFFALSE 41081
// missile := Replace ( missile , missile + 1 , 2 ) ;
41054: LD_ADDR_VAR 0 14
41058: PUSH
41059: LD_VAR 0 14
41063: PPUSH
41064: LD_VAR 0 14
41068: PUSH
41069: LD_INT 1
41071: PLUS
41072: PPUSH
41073: LD_INT 2
41075: PPUSH
41076: CALL_OW 1
41080: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41081: LD_VAR 0 9
41085: PPUSH
41086: LD_VAR 0 13
41090: PPUSH
41091: CALL_OW 325
41095: PUSH
41096: LD_VAR 0 10
41100: PPUSH
41101: CALL_OW 255
41105: PPUSH
41106: LD_VAR 0 13
41110: PPUSH
41111: CALL_OW 325
41115: NOT
41116: AND
41117: IFFALSE 41146
// missile := Replace ( missile , missile + 1 , 3 ) ;
41119: LD_ADDR_VAR 0 14
41123: PUSH
41124: LD_VAR 0 14
41128: PPUSH
41129: LD_VAR 0 14
41133: PUSH
41134: LD_INT 1
41136: PLUS
41137: PPUSH
41138: LD_INT 3
41140: PPUSH
41141: CALL_OW 1
41145: ST_TO_ADDR
// if missile < 2 then
41146: LD_VAR 0 14
41150: PUSH
41151: LD_INT 2
41153: LESS
41154: IFFALSE 41158
// exit ;
41156: GO 41380
// x := GetX ( enemy ) ;
41158: LD_ADDR_VAR 0 4
41162: PUSH
41163: LD_VAR 0 10
41167: PPUSH
41168: CALL_OW 250
41172: ST_TO_ADDR
// y := GetY ( enemy ) ;
41173: LD_ADDR_VAR 0 5
41177: PUSH
41178: LD_VAR 0 10
41182: PPUSH
41183: CALL_OW 251
41187: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41188: LD_ADDR_VAR 0 6
41192: PUSH
41193: LD_VAR 0 4
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PPUSH
41202: LD_INT 1
41204: PPUSH
41205: CALL_OW 12
41209: PLUS
41210: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41211: LD_ADDR_VAR 0 7
41215: PUSH
41216: LD_VAR 0 5
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PPUSH
41225: LD_INT 1
41227: PPUSH
41228: CALL_OW 12
41232: PLUS
41233: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41234: LD_VAR 0 6
41238: PPUSH
41239: LD_VAR 0 7
41243: PPUSH
41244: CALL_OW 488
41248: NOT
41249: IFFALSE 41271
// begin _x := x ;
41251: LD_ADDR_VAR 0 6
41255: PUSH
41256: LD_VAR 0 4
41260: ST_TO_ADDR
// _y := y ;
41261: LD_ADDR_VAR 0 7
41265: PUSH
41266: LD_VAR 0 5
41270: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41271: LD_ADDR_VAR 0 3
41275: PUSH
41276: LD_INT 1
41278: PPUSH
41279: LD_VAR 0 14
41283: PPUSH
41284: CALL_OW 12
41288: ST_TO_ADDR
// case i of 1 :
41289: LD_VAR 0 3
41293: PUSH
41294: LD_INT 1
41296: DOUBLE
41297: EQUAL
41298: IFTRUE 41302
41300: GO 41319
41302: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41303: LD_VAR 0 1
41307: PPUSH
41308: LD_VAR 0 10
41312: PPUSH
41313: CALL_OW 115
41317: GO 41380
41319: LD_INT 2
41321: DOUBLE
41322: EQUAL
41323: IFTRUE 41327
41325: GO 41349
41327: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41328: LD_VAR 0 1
41332: PPUSH
41333: LD_VAR 0 6
41337: PPUSH
41338: LD_VAR 0 7
41342: PPUSH
41343: CALL_OW 153
41347: GO 41380
41349: LD_INT 3
41351: DOUBLE
41352: EQUAL
41353: IFTRUE 41357
41355: GO 41379
41357: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41358: LD_VAR 0 1
41362: PPUSH
41363: LD_VAR 0 6
41367: PPUSH
41368: LD_VAR 0 7
41372: PPUSH
41373: CALL_OW 154
41377: GO 41380
41379: POP
// end ;
41380: LD_VAR 0 2
41384: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41385: LD_INT 0
41387: PPUSH
41388: PPUSH
41389: PPUSH
41390: PPUSH
41391: PPUSH
41392: PPUSH
// if not unit or not building then
41393: LD_VAR 0 1
41397: NOT
41398: PUSH
41399: LD_VAR 0 2
41403: NOT
41404: OR
41405: IFFALSE 41409
// exit ;
41407: GO 41567
// x := GetX ( building ) ;
41409: LD_ADDR_VAR 0 5
41413: PUSH
41414: LD_VAR 0 2
41418: PPUSH
41419: CALL_OW 250
41423: ST_TO_ADDR
// y := GetY ( building ) ;
41424: LD_ADDR_VAR 0 6
41428: PUSH
41429: LD_VAR 0 2
41433: PPUSH
41434: CALL_OW 251
41438: ST_TO_ADDR
// for i = 0 to 5 do
41439: LD_ADDR_VAR 0 4
41443: PUSH
41444: DOUBLE
41445: LD_INT 0
41447: DEC
41448: ST_TO_ADDR
41449: LD_INT 5
41451: PUSH
41452: FOR_TO
41453: IFFALSE 41565
// begin _x := ShiftX ( x , i , 3 ) ;
41455: LD_ADDR_VAR 0 7
41459: PUSH
41460: LD_VAR 0 5
41464: PPUSH
41465: LD_VAR 0 4
41469: PPUSH
41470: LD_INT 3
41472: PPUSH
41473: CALL_OW 272
41477: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41478: LD_ADDR_VAR 0 8
41482: PUSH
41483: LD_VAR 0 6
41487: PPUSH
41488: LD_VAR 0 4
41492: PPUSH
41493: LD_INT 3
41495: PPUSH
41496: CALL_OW 273
41500: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41501: LD_VAR 0 7
41505: PPUSH
41506: LD_VAR 0 8
41510: PPUSH
41511: CALL_OW 488
41515: NOT
41516: IFFALSE 41520
// continue ;
41518: GO 41452
// if HexInfo ( _x , _y ) = 0 then
41520: LD_VAR 0 7
41524: PPUSH
41525: LD_VAR 0 8
41529: PPUSH
41530: CALL_OW 428
41534: PUSH
41535: LD_INT 0
41537: EQUAL
41538: IFFALSE 41563
// begin ComMoveXY ( unit , _x , _y ) ;
41540: LD_VAR 0 1
41544: PPUSH
41545: LD_VAR 0 7
41549: PPUSH
41550: LD_VAR 0 8
41554: PPUSH
41555: CALL_OW 111
// exit ;
41559: POP
41560: POP
41561: GO 41567
// end ; end ;
41563: GO 41452
41565: POP
41566: POP
// end ;
41567: LD_VAR 0 3
41571: RET
// export function ScanBase ( side , base_area ) ; begin
41572: LD_INT 0
41574: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41575: LD_ADDR_VAR 0 3
41579: PUSH
41580: LD_VAR 0 2
41584: PPUSH
41585: LD_INT 81
41587: PUSH
41588: LD_VAR 0 1
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PPUSH
41597: CALL_OW 70
41601: ST_TO_ADDR
// end ;
41602: LD_VAR 0 3
41606: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41607: LD_INT 0
41609: PPUSH
41610: PPUSH
41611: PPUSH
41612: PPUSH
// result := false ;
41613: LD_ADDR_VAR 0 2
41617: PUSH
41618: LD_INT 0
41620: ST_TO_ADDR
// side := GetSide ( unit ) ;
41621: LD_ADDR_VAR 0 3
41625: PUSH
41626: LD_VAR 0 1
41630: PPUSH
41631: CALL_OW 255
41635: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41636: LD_ADDR_VAR 0 4
41640: PUSH
41641: LD_VAR 0 1
41645: PPUSH
41646: CALL_OW 248
41650: ST_TO_ADDR
// case nat of 1 :
41651: LD_VAR 0 4
41655: PUSH
41656: LD_INT 1
41658: DOUBLE
41659: EQUAL
41660: IFTRUE 41664
41662: GO 41675
41664: POP
// tech := tech_lassight ; 2 :
41665: LD_ADDR_VAR 0 5
41669: PUSH
41670: LD_INT 12
41672: ST_TO_ADDR
41673: GO 41714
41675: LD_INT 2
41677: DOUBLE
41678: EQUAL
41679: IFTRUE 41683
41681: GO 41694
41683: POP
// tech := tech_mortar ; 3 :
41684: LD_ADDR_VAR 0 5
41688: PUSH
41689: LD_INT 41
41691: ST_TO_ADDR
41692: GO 41714
41694: LD_INT 3
41696: DOUBLE
41697: EQUAL
41698: IFTRUE 41702
41700: GO 41713
41702: POP
// tech := tech_bazooka ; end ;
41703: LD_ADDR_VAR 0 5
41707: PUSH
41708: LD_INT 44
41710: ST_TO_ADDR
41711: GO 41714
41713: POP
// if Researched ( side , tech ) then
41714: LD_VAR 0 3
41718: PPUSH
41719: LD_VAR 0 5
41723: PPUSH
41724: CALL_OW 325
41728: IFFALSE 41755
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41730: LD_ADDR_VAR 0 2
41734: PUSH
41735: LD_INT 5
41737: PUSH
41738: LD_INT 8
41740: PUSH
41741: LD_INT 9
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: LIST
41748: PUSH
41749: LD_VAR 0 4
41753: ARRAY
41754: ST_TO_ADDR
// end ;
41755: LD_VAR 0 2
41759: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41760: LD_INT 0
41762: PPUSH
41763: PPUSH
41764: PPUSH
// if not mines then
41765: LD_VAR 0 2
41769: NOT
41770: IFFALSE 41774
// exit ;
41772: GO 41918
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41774: LD_ADDR_VAR 0 5
41778: PUSH
41779: LD_INT 81
41781: PUSH
41782: LD_VAR 0 1
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 3
41793: PUSH
41794: LD_INT 21
41796: PUSH
41797: LD_INT 3
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PPUSH
41812: CALL_OW 69
41816: ST_TO_ADDR
// for i in mines do
41817: LD_ADDR_VAR 0 4
41821: PUSH
41822: LD_VAR 0 2
41826: PUSH
41827: FOR_IN
41828: IFFALSE 41916
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41830: LD_VAR 0 4
41834: PUSH
41835: LD_INT 1
41837: ARRAY
41838: PPUSH
41839: LD_VAR 0 4
41843: PUSH
41844: LD_INT 2
41846: ARRAY
41847: PPUSH
41848: CALL_OW 458
41852: NOT
41853: IFFALSE 41857
// continue ;
41855: GO 41827
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41857: LD_VAR 0 4
41861: PUSH
41862: LD_INT 1
41864: ARRAY
41865: PPUSH
41866: LD_VAR 0 4
41870: PUSH
41871: LD_INT 2
41873: ARRAY
41874: PPUSH
41875: CALL_OW 428
41879: PUSH
41880: LD_VAR 0 5
41884: IN
41885: IFFALSE 41914
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41887: LD_VAR 0 4
41891: PUSH
41892: LD_INT 1
41894: ARRAY
41895: PPUSH
41896: LD_VAR 0 4
41900: PUSH
41901: LD_INT 2
41903: ARRAY
41904: PPUSH
41905: LD_VAR 0 1
41909: PPUSH
41910: CALL_OW 456
// end ;
41914: GO 41827
41916: POP
41917: POP
// end ;
41918: LD_VAR 0 3
41922: RET
// export function Count ( array ) ; var i ; begin
41923: LD_INT 0
41925: PPUSH
41926: PPUSH
// result := 0 ;
41927: LD_ADDR_VAR 0 2
41931: PUSH
41932: LD_INT 0
41934: ST_TO_ADDR
// for i in array do
41935: LD_ADDR_VAR 0 3
41939: PUSH
41940: LD_VAR 0 1
41944: PUSH
41945: FOR_IN
41946: IFFALSE 41970
// if i then
41948: LD_VAR 0 3
41952: IFFALSE 41968
// result := result + 1 ;
41954: LD_ADDR_VAR 0 2
41958: PUSH
41959: LD_VAR 0 2
41963: PUSH
41964: LD_INT 1
41966: PLUS
41967: ST_TO_ADDR
41968: GO 41945
41970: POP
41971: POP
// end ;
41972: LD_VAR 0 2
41976: RET
// export function IsEmpty ( building ) ; begin
41977: LD_INT 0
41979: PPUSH
// if not building then
41980: LD_VAR 0 1
41984: NOT
41985: IFFALSE 41989
// exit ;
41987: GO 42032
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41989: LD_ADDR_VAR 0 2
41993: PUSH
41994: LD_VAR 0 1
41998: PUSH
41999: LD_INT 22
42001: PUSH
42002: LD_VAR 0 1
42006: PPUSH
42007: CALL_OW 255
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 58
42018: PUSH
42019: EMPTY
42020: LIST
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PPUSH
42026: CALL_OW 69
42030: IN
42031: ST_TO_ADDR
// end ;
42032: LD_VAR 0 2
42036: RET
// export function IsNotFull ( building ) ; var places ; begin
42037: LD_INT 0
42039: PPUSH
42040: PPUSH
// if not building then
42041: LD_VAR 0 1
42045: NOT
42046: IFFALSE 42050
// exit ;
42048: GO 42221
// result := false ;
42050: LD_ADDR_VAR 0 2
42054: PUSH
42055: LD_INT 0
42057: ST_TO_ADDR
// places := 0 ;
42058: LD_ADDR_VAR 0 3
42062: PUSH
42063: LD_INT 0
42065: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
42066: LD_VAR 0 1
42070: PPUSH
42071: CALL_OW 266
42075: PUSH
42076: LD_INT 0
42078: DOUBLE
42079: EQUAL
42080: IFTRUE 42138
42082: LD_INT 1
42084: DOUBLE
42085: EQUAL
42086: IFTRUE 42138
42088: LD_INT 6
42090: DOUBLE
42091: EQUAL
42092: IFTRUE 42138
42094: LD_INT 7
42096: DOUBLE
42097: EQUAL
42098: IFTRUE 42138
42100: LD_INT 8
42102: DOUBLE
42103: EQUAL
42104: IFTRUE 42138
42106: LD_INT 4
42108: DOUBLE
42109: EQUAL
42110: IFTRUE 42138
42112: LD_INT 5
42114: DOUBLE
42115: EQUAL
42116: IFTRUE 42138
42118: LD_INT 2
42120: DOUBLE
42121: EQUAL
42122: IFTRUE 42138
42124: LD_INT 3
42126: DOUBLE
42127: EQUAL
42128: IFTRUE 42138
42130: LD_INT 35
42132: DOUBLE
42133: EQUAL
42134: IFTRUE 42138
42136: GO 42149
42138: POP
// places := 6 ; b_bunker , b_breastwork :
42139: LD_ADDR_VAR 0 3
42143: PUSH
42144: LD_INT 6
42146: ST_TO_ADDR
42147: GO 42194
42149: LD_INT 32
42151: DOUBLE
42152: EQUAL
42153: IFTRUE 42163
42155: LD_INT 31
42157: DOUBLE
42158: EQUAL
42159: IFTRUE 42163
42161: GO 42174
42163: POP
// places := 1 ; b_control_tower :
42164: LD_ADDR_VAR 0 3
42168: PUSH
42169: LD_INT 1
42171: ST_TO_ADDR
42172: GO 42194
42174: LD_INT 36
42176: DOUBLE
42177: EQUAL
42178: IFTRUE 42182
42180: GO 42193
42182: POP
// places := 3 ; end ;
42183: LD_ADDR_VAR 0 3
42187: PUSH
42188: LD_INT 3
42190: ST_TO_ADDR
42191: GO 42194
42193: POP
// if places then
42194: LD_VAR 0 3
42198: IFFALSE 42221
// result := UnitsInside ( building ) < places ;
42200: LD_ADDR_VAR 0 2
42204: PUSH
42205: LD_VAR 0 1
42209: PPUSH
42210: CALL_OW 313
42214: PUSH
42215: LD_VAR 0 3
42219: LESS
42220: ST_TO_ADDR
// end ;
42221: LD_VAR 0 2
42225: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42226: LD_INT 0
42228: PPUSH
42229: PPUSH
42230: PPUSH
42231: PPUSH
// tmp := [ ] ;
42232: LD_ADDR_VAR 0 3
42236: PUSH
42237: EMPTY
42238: ST_TO_ADDR
// list := [ ] ;
42239: LD_ADDR_VAR 0 5
42243: PUSH
42244: EMPTY
42245: ST_TO_ADDR
// for i = 16 to 25 do
42246: LD_ADDR_VAR 0 4
42250: PUSH
42251: DOUBLE
42252: LD_INT 16
42254: DEC
42255: ST_TO_ADDR
42256: LD_INT 25
42258: PUSH
42259: FOR_TO
42260: IFFALSE 42333
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42262: LD_ADDR_VAR 0 3
42266: PUSH
42267: LD_VAR 0 3
42271: PUSH
42272: LD_INT 22
42274: PUSH
42275: LD_VAR 0 1
42279: PPUSH
42280: CALL_OW 255
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 91
42291: PUSH
42292: LD_VAR 0 1
42296: PUSH
42297: LD_INT 6
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 30
42307: PUSH
42308: LD_VAR 0 4
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: LIST
42321: PUSH
42322: EMPTY
42323: LIST
42324: PPUSH
42325: CALL_OW 69
42329: ADD
42330: ST_TO_ADDR
42331: GO 42259
42333: POP
42334: POP
// for i = 1 to tmp do
42335: LD_ADDR_VAR 0 4
42339: PUSH
42340: DOUBLE
42341: LD_INT 1
42343: DEC
42344: ST_TO_ADDR
42345: LD_VAR 0 3
42349: PUSH
42350: FOR_TO
42351: IFFALSE 42439
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42353: LD_ADDR_VAR 0 5
42357: PUSH
42358: LD_VAR 0 5
42362: PUSH
42363: LD_VAR 0 3
42367: PUSH
42368: LD_VAR 0 4
42372: ARRAY
42373: PPUSH
42374: CALL_OW 266
42378: PUSH
42379: LD_VAR 0 3
42383: PUSH
42384: LD_VAR 0 4
42388: ARRAY
42389: PPUSH
42390: CALL_OW 250
42394: PUSH
42395: LD_VAR 0 3
42399: PUSH
42400: LD_VAR 0 4
42404: ARRAY
42405: PPUSH
42406: CALL_OW 251
42410: PUSH
42411: LD_VAR 0 3
42415: PUSH
42416: LD_VAR 0 4
42420: ARRAY
42421: PPUSH
42422: CALL_OW 254
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: PUSH
42433: EMPTY
42434: LIST
42435: ADD
42436: ST_TO_ADDR
42437: GO 42350
42439: POP
42440: POP
// result := list ;
42441: LD_ADDR_VAR 0 2
42445: PUSH
42446: LD_VAR 0 5
42450: ST_TO_ADDR
// end ;
42451: LD_VAR 0 2
42455: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42456: LD_INT 0
42458: PPUSH
42459: PPUSH
42460: PPUSH
42461: PPUSH
42462: PPUSH
42463: PPUSH
42464: PPUSH
// if not factory then
42465: LD_VAR 0 1
42469: NOT
42470: IFFALSE 42474
// exit ;
42472: GO 43067
// if control = control_apeman then
42474: LD_VAR 0 4
42478: PUSH
42479: LD_INT 5
42481: EQUAL
42482: IFFALSE 42591
// begin tmp := UnitsInside ( factory ) ;
42484: LD_ADDR_VAR 0 8
42488: PUSH
42489: LD_VAR 0 1
42493: PPUSH
42494: CALL_OW 313
42498: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42499: LD_VAR 0 8
42503: PPUSH
42504: LD_INT 25
42506: PUSH
42507: LD_INT 12
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PPUSH
42514: CALL_OW 72
42518: NOT
42519: IFFALSE 42529
// control := control_manual ;
42521: LD_ADDR_VAR 0 4
42525: PUSH
42526: LD_INT 1
42528: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42529: LD_ADDR_VAR 0 8
42533: PUSH
42534: LD_VAR 0 1
42538: PPUSH
42539: CALL 42226 0 1
42543: ST_TO_ADDR
// if tmp then
42544: LD_VAR 0 8
42548: IFFALSE 42591
// begin for i in tmp do
42550: LD_ADDR_VAR 0 7
42554: PUSH
42555: LD_VAR 0 8
42559: PUSH
42560: FOR_IN
42561: IFFALSE 42589
// if i [ 1 ] = b_ext_radio then
42563: LD_VAR 0 7
42567: PUSH
42568: LD_INT 1
42570: ARRAY
42571: PUSH
42572: LD_INT 22
42574: EQUAL
42575: IFFALSE 42587
// begin control := control_remote ;
42577: LD_ADDR_VAR 0 4
42581: PUSH
42582: LD_INT 2
42584: ST_TO_ADDR
// break ;
42585: GO 42589
// end ;
42587: GO 42560
42589: POP
42590: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42591: LD_VAR 0 1
42595: PPUSH
42596: LD_VAR 0 2
42600: PPUSH
42601: LD_VAR 0 3
42605: PPUSH
42606: LD_VAR 0 4
42610: PPUSH
42611: LD_VAR 0 5
42615: PPUSH
42616: CALL_OW 448
42620: IFFALSE 42655
// begin result := [ chassis , engine , control , weapon ] ;
42622: LD_ADDR_VAR 0 6
42626: PUSH
42627: LD_VAR 0 2
42631: PUSH
42632: LD_VAR 0 3
42636: PUSH
42637: LD_VAR 0 4
42641: PUSH
42642: LD_VAR 0 5
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: ST_TO_ADDR
// exit ;
42653: GO 43067
// end ; _chassis := AvailableChassisList ( factory ) ;
42655: LD_ADDR_VAR 0 9
42659: PUSH
42660: LD_VAR 0 1
42664: PPUSH
42665: CALL_OW 475
42669: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42670: LD_ADDR_VAR 0 11
42674: PUSH
42675: LD_VAR 0 1
42679: PPUSH
42680: CALL_OW 476
42684: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42685: LD_ADDR_VAR 0 12
42689: PUSH
42690: LD_VAR 0 1
42694: PPUSH
42695: CALL_OW 477
42699: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42700: LD_ADDR_VAR 0 10
42704: PUSH
42705: LD_VAR 0 1
42709: PPUSH
42710: CALL_OW 478
42714: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42715: LD_VAR 0 9
42719: NOT
42720: PUSH
42721: LD_VAR 0 11
42725: NOT
42726: OR
42727: PUSH
42728: LD_VAR 0 12
42732: NOT
42733: OR
42734: PUSH
42735: LD_VAR 0 10
42739: NOT
42740: OR
42741: IFFALSE 42776
// begin result := [ chassis , engine , control , weapon ] ;
42743: LD_ADDR_VAR 0 6
42747: PUSH
42748: LD_VAR 0 2
42752: PUSH
42753: LD_VAR 0 3
42757: PUSH
42758: LD_VAR 0 4
42762: PUSH
42763: LD_VAR 0 5
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: ST_TO_ADDR
// exit ;
42774: GO 43067
// end ; if not chassis in _chassis then
42776: LD_VAR 0 2
42780: PUSH
42781: LD_VAR 0 9
42785: IN
42786: NOT
42787: IFFALSE 42813
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42789: LD_ADDR_VAR 0 2
42793: PUSH
42794: LD_VAR 0 9
42798: PUSH
42799: LD_INT 1
42801: PPUSH
42802: LD_VAR 0 9
42806: PPUSH
42807: CALL_OW 12
42811: ARRAY
42812: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42813: LD_VAR 0 2
42817: PPUSH
42818: LD_VAR 0 3
42822: PPUSH
42823: CALL 43072 0 2
42827: NOT
42828: IFFALSE 42887
// repeat engine := _engine [ 1 ] ;
42830: LD_ADDR_VAR 0 3
42834: PUSH
42835: LD_VAR 0 11
42839: PUSH
42840: LD_INT 1
42842: ARRAY
42843: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42844: LD_ADDR_VAR 0 11
42848: PUSH
42849: LD_VAR 0 11
42853: PPUSH
42854: LD_INT 1
42856: PPUSH
42857: CALL_OW 3
42861: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42862: LD_VAR 0 2
42866: PPUSH
42867: LD_VAR 0 3
42871: PPUSH
42872: CALL 43072 0 2
42876: PUSH
42877: LD_VAR 0 11
42881: PUSH
42882: EMPTY
42883: EQUAL
42884: OR
42885: IFFALSE 42830
// if not control in _control then
42887: LD_VAR 0 4
42891: PUSH
42892: LD_VAR 0 12
42896: IN
42897: NOT
42898: IFFALSE 42924
// control := _control [ rand ( 1 , _control ) ] ;
42900: LD_ADDR_VAR 0 4
42904: PUSH
42905: LD_VAR 0 12
42909: PUSH
42910: LD_INT 1
42912: PPUSH
42913: LD_VAR 0 12
42917: PPUSH
42918: CALL_OW 12
42922: ARRAY
42923: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42924: LD_VAR 0 2
42928: PPUSH
42929: LD_VAR 0 5
42933: PPUSH
42934: CALL 43292 0 2
42938: NOT
42939: IFFALSE 42998
// repeat weapon := _weapon [ 1 ] ;
42941: LD_ADDR_VAR 0 5
42945: PUSH
42946: LD_VAR 0 10
42950: PUSH
42951: LD_INT 1
42953: ARRAY
42954: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42955: LD_ADDR_VAR 0 10
42959: PUSH
42960: LD_VAR 0 10
42964: PPUSH
42965: LD_INT 1
42967: PPUSH
42968: CALL_OW 3
42972: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42973: LD_VAR 0 2
42977: PPUSH
42978: LD_VAR 0 5
42982: PPUSH
42983: CALL 43292 0 2
42987: PUSH
42988: LD_VAR 0 10
42992: PUSH
42993: EMPTY
42994: EQUAL
42995: OR
42996: IFFALSE 42941
// result := [ ] ;
42998: LD_ADDR_VAR 0 6
43002: PUSH
43003: EMPTY
43004: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43005: LD_VAR 0 1
43009: PPUSH
43010: LD_VAR 0 2
43014: PPUSH
43015: LD_VAR 0 3
43019: PPUSH
43020: LD_VAR 0 4
43024: PPUSH
43025: LD_VAR 0 5
43029: PPUSH
43030: CALL_OW 448
43034: IFFALSE 43067
// result := [ chassis , engine , control , weapon ] ;
43036: LD_ADDR_VAR 0 6
43040: PUSH
43041: LD_VAR 0 2
43045: PUSH
43046: LD_VAR 0 3
43050: PUSH
43051: LD_VAR 0 4
43055: PUSH
43056: LD_VAR 0 5
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: ST_TO_ADDR
// end ;
43067: LD_VAR 0 6
43071: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43072: LD_INT 0
43074: PPUSH
// if not chassis or not engine then
43075: LD_VAR 0 1
43079: NOT
43080: PUSH
43081: LD_VAR 0 2
43085: NOT
43086: OR
43087: IFFALSE 43091
// exit ;
43089: GO 43287
// case engine of engine_solar :
43091: LD_VAR 0 2
43095: PUSH
43096: LD_INT 2
43098: DOUBLE
43099: EQUAL
43100: IFTRUE 43104
43102: GO 43142
43104: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43105: LD_ADDR_VAR 0 3
43109: PUSH
43110: LD_INT 11
43112: PUSH
43113: LD_INT 12
43115: PUSH
43116: LD_INT 13
43118: PUSH
43119: LD_INT 14
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: LD_INT 2
43127: PUSH
43128: LD_INT 3
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: ST_TO_ADDR
43140: GO 43271
43142: LD_INT 1
43144: DOUBLE
43145: EQUAL
43146: IFTRUE 43150
43148: GO 43212
43150: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43151: LD_ADDR_VAR 0 3
43155: PUSH
43156: LD_INT 11
43158: PUSH
43159: LD_INT 12
43161: PUSH
43162: LD_INT 13
43164: PUSH
43165: LD_INT 14
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: LD_INT 2
43173: PUSH
43174: LD_INT 3
43176: PUSH
43177: LD_INT 4
43179: PUSH
43180: LD_INT 5
43182: PUSH
43183: LD_INT 21
43185: PUSH
43186: LD_INT 23
43188: PUSH
43189: LD_INT 22
43191: PUSH
43192: LD_INT 24
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: ST_TO_ADDR
43210: GO 43271
43212: LD_INT 3
43214: DOUBLE
43215: EQUAL
43216: IFTRUE 43220
43218: GO 43270
43220: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43221: LD_ADDR_VAR 0 3
43225: PUSH
43226: LD_INT 13
43228: PUSH
43229: LD_INT 14
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: LD_INT 3
43237: PUSH
43238: LD_INT 4
43240: PUSH
43241: LD_INT 5
43243: PUSH
43244: LD_INT 21
43246: PUSH
43247: LD_INT 22
43249: PUSH
43250: LD_INT 23
43252: PUSH
43253: LD_INT 24
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: ST_TO_ADDR
43268: GO 43271
43270: POP
// result := ( chassis in result ) ;
43271: LD_ADDR_VAR 0 3
43275: PUSH
43276: LD_VAR 0 1
43280: PUSH
43281: LD_VAR 0 3
43285: IN
43286: ST_TO_ADDR
// end ;
43287: LD_VAR 0 3
43291: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43292: LD_INT 0
43294: PPUSH
// if not chassis or not weapon then
43295: LD_VAR 0 1
43299: NOT
43300: PUSH
43301: LD_VAR 0 2
43305: NOT
43306: OR
43307: IFFALSE 43311
// exit ;
43309: GO 44371
// case weapon of us_machine_gun :
43311: LD_VAR 0 2
43315: PUSH
43316: LD_INT 2
43318: DOUBLE
43319: EQUAL
43320: IFTRUE 43324
43322: GO 43354
43324: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43325: LD_ADDR_VAR 0 3
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: LD_INT 3
43338: PUSH
43339: LD_INT 4
43341: PUSH
43342: LD_INT 5
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: ST_TO_ADDR
43352: GO 44355
43354: LD_INT 3
43356: DOUBLE
43357: EQUAL
43358: IFTRUE 43362
43360: GO 43392
43362: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43363: LD_ADDR_VAR 0 3
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: LD_INT 2
43373: PUSH
43374: LD_INT 3
43376: PUSH
43377: LD_INT 4
43379: PUSH
43380: LD_INT 5
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: ST_TO_ADDR
43390: GO 44355
43392: LD_INT 11
43394: DOUBLE
43395: EQUAL
43396: IFTRUE 43400
43398: GO 43430
43400: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43401: LD_ADDR_VAR 0 3
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: LD_INT 3
43414: PUSH
43415: LD_INT 4
43417: PUSH
43418: LD_INT 5
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: ST_TO_ADDR
43428: GO 44355
43430: LD_INT 4
43432: DOUBLE
43433: EQUAL
43434: IFTRUE 43438
43436: GO 43464
43438: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43439: LD_ADDR_VAR 0 3
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: LD_INT 3
43449: PUSH
43450: LD_INT 4
43452: PUSH
43453: LD_INT 5
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: ST_TO_ADDR
43462: GO 44355
43464: LD_INT 5
43466: DOUBLE
43467: EQUAL
43468: IFTRUE 43472
43470: GO 43498
43472: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43473: LD_ADDR_VAR 0 3
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: LD_INT 3
43483: PUSH
43484: LD_INT 4
43486: PUSH
43487: LD_INT 5
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: ST_TO_ADDR
43496: GO 44355
43498: LD_INT 9
43500: DOUBLE
43501: EQUAL
43502: IFTRUE 43506
43504: GO 43532
43506: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43507: LD_ADDR_VAR 0 3
43511: PUSH
43512: LD_INT 2
43514: PUSH
43515: LD_INT 3
43517: PUSH
43518: LD_INT 4
43520: PUSH
43521: LD_INT 5
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: ST_TO_ADDR
43530: GO 44355
43532: LD_INT 7
43534: DOUBLE
43535: EQUAL
43536: IFTRUE 43540
43538: GO 43566
43540: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43541: LD_ADDR_VAR 0 3
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: LD_INT 3
43551: PUSH
43552: LD_INT 4
43554: PUSH
43555: LD_INT 5
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: ST_TO_ADDR
43564: GO 44355
43566: LD_INT 12
43568: DOUBLE
43569: EQUAL
43570: IFTRUE 43574
43572: GO 43600
43574: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43575: LD_ADDR_VAR 0 3
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: LD_INT 3
43585: PUSH
43586: LD_INT 4
43588: PUSH
43589: LD_INT 5
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: ST_TO_ADDR
43598: GO 44355
43600: LD_INT 13
43602: DOUBLE
43603: EQUAL
43604: IFTRUE 43608
43606: GO 43634
43608: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43609: LD_ADDR_VAR 0 3
43613: PUSH
43614: LD_INT 2
43616: PUSH
43617: LD_INT 3
43619: PUSH
43620: LD_INT 4
43622: PUSH
43623: LD_INT 5
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: ST_TO_ADDR
43632: GO 44355
43634: LD_INT 14
43636: DOUBLE
43637: EQUAL
43638: IFTRUE 43642
43640: GO 43660
43642: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43643: LD_ADDR_VAR 0 3
43647: PUSH
43648: LD_INT 4
43650: PUSH
43651: LD_INT 5
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: ST_TO_ADDR
43658: GO 44355
43660: LD_INT 6
43662: DOUBLE
43663: EQUAL
43664: IFTRUE 43668
43666: GO 43686
43668: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43669: LD_ADDR_VAR 0 3
43673: PUSH
43674: LD_INT 4
43676: PUSH
43677: LD_INT 5
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: ST_TO_ADDR
43684: GO 44355
43686: LD_INT 10
43688: DOUBLE
43689: EQUAL
43690: IFTRUE 43694
43692: GO 43712
43694: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43695: LD_ADDR_VAR 0 3
43699: PUSH
43700: LD_INT 4
43702: PUSH
43703: LD_INT 5
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: ST_TO_ADDR
43710: GO 44355
43712: LD_INT 22
43714: DOUBLE
43715: EQUAL
43716: IFTRUE 43720
43718: GO 43746
43720: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43721: LD_ADDR_VAR 0 3
43725: PUSH
43726: LD_INT 11
43728: PUSH
43729: LD_INT 12
43731: PUSH
43732: LD_INT 13
43734: PUSH
43735: LD_INT 14
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: ST_TO_ADDR
43744: GO 44355
43746: LD_INT 23
43748: DOUBLE
43749: EQUAL
43750: IFTRUE 43754
43752: GO 43780
43754: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43755: LD_ADDR_VAR 0 3
43759: PUSH
43760: LD_INT 11
43762: PUSH
43763: LD_INT 12
43765: PUSH
43766: LD_INT 13
43768: PUSH
43769: LD_INT 14
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: ST_TO_ADDR
43778: GO 44355
43780: LD_INT 24
43782: DOUBLE
43783: EQUAL
43784: IFTRUE 43788
43786: GO 43814
43788: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43789: LD_ADDR_VAR 0 3
43793: PUSH
43794: LD_INT 11
43796: PUSH
43797: LD_INT 12
43799: PUSH
43800: LD_INT 13
43802: PUSH
43803: LD_INT 14
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: ST_TO_ADDR
43812: GO 44355
43814: LD_INT 30
43816: DOUBLE
43817: EQUAL
43818: IFTRUE 43822
43820: GO 43848
43822: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43823: LD_ADDR_VAR 0 3
43827: PUSH
43828: LD_INT 11
43830: PUSH
43831: LD_INT 12
43833: PUSH
43834: LD_INT 13
43836: PUSH
43837: LD_INT 14
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: ST_TO_ADDR
43846: GO 44355
43848: LD_INT 25
43850: DOUBLE
43851: EQUAL
43852: IFTRUE 43856
43854: GO 43874
43856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43857: LD_ADDR_VAR 0 3
43861: PUSH
43862: LD_INT 13
43864: PUSH
43865: LD_INT 14
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: ST_TO_ADDR
43872: GO 44355
43874: LD_INT 27
43876: DOUBLE
43877: EQUAL
43878: IFTRUE 43882
43880: GO 43900
43882: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43883: LD_ADDR_VAR 0 3
43887: PUSH
43888: LD_INT 13
43890: PUSH
43891: LD_INT 14
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: ST_TO_ADDR
43898: GO 44355
43900: LD_INT 92
43902: DOUBLE
43903: EQUAL
43904: IFTRUE 43908
43906: GO 43934
43908: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43909: LD_ADDR_VAR 0 3
43913: PUSH
43914: LD_INT 11
43916: PUSH
43917: LD_INT 12
43919: PUSH
43920: LD_INT 13
43922: PUSH
43923: LD_INT 14
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: ST_TO_ADDR
43932: GO 44355
43934: LD_INT 28
43936: DOUBLE
43937: EQUAL
43938: IFTRUE 43942
43940: GO 43960
43942: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43943: LD_ADDR_VAR 0 3
43947: PUSH
43948: LD_INT 13
43950: PUSH
43951: LD_INT 14
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: ST_TO_ADDR
43958: GO 44355
43960: LD_INT 29
43962: DOUBLE
43963: EQUAL
43964: IFTRUE 43968
43966: GO 43986
43968: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43969: LD_ADDR_VAR 0 3
43973: PUSH
43974: LD_INT 13
43976: PUSH
43977: LD_INT 14
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: ST_TO_ADDR
43984: GO 44355
43986: LD_INT 31
43988: DOUBLE
43989: EQUAL
43990: IFTRUE 43994
43992: GO 44012
43994: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43995: LD_ADDR_VAR 0 3
43999: PUSH
44000: LD_INT 13
44002: PUSH
44003: LD_INT 14
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: ST_TO_ADDR
44010: GO 44355
44012: LD_INT 26
44014: DOUBLE
44015: EQUAL
44016: IFTRUE 44020
44018: GO 44038
44020: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44021: LD_ADDR_VAR 0 3
44025: PUSH
44026: LD_INT 13
44028: PUSH
44029: LD_INT 14
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: ST_TO_ADDR
44036: GO 44355
44038: LD_INT 42
44040: DOUBLE
44041: EQUAL
44042: IFTRUE 44046
44044: GO 44072
44046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44047: LD_ADDR_VAR 0 3
44051: PUSH
44052: LD_INT 21
44054: PUSH
44055: LD_INT 22
44057: PUSH
44058: LD_INT 23
44060: PUSH
44061: LD_INT 24
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: ST_TO_ADDR
44070: GO 44355
44072: LD_INT 43
44074: DOUBLE
44075: EQUAL
44076: IFTRUE 44080
44078: GO 44106
44080: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44081: LD_ADDR_VAR 0 3
44085: PUSH
44086: LD_INT 21
44088: PUSH
44089: LD_INT 22
44091: PUSH
44092: LD_INT 23
44094: PUSH
44095: LD_INT 24
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: ST_TO_ADDR
44104: GO 44355
44106: LD_INT 44
44108: DOUBLE
44109: EQUAL
44110: IFTRUE 44114
44112: GO 44140
44114: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44115: LD_ADDR_VAR 0 3
44119: PUSH
44120: LD_INT 21
44122: PUSH
44123: LD_INT 22
44125: PUSH
44126: LD_INT 23
44128: PUSH
44129: LD_INT 24
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: ST_TO_ADDR
44138: GO 44355
44140: LD_INT 45
44142: DOUBLE
44143: EQUAL
44144: IFTRUE 44148
44146: GO 44174
44148: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44149: LD_ADDR_VAR 0 3
44153: PUSH
44154: LD_INT 21
44156: PUSH
44157: LD_INT 22
44159: PUSH
44160: LD_INT 23
44162: PUSH
44163: LD_INT 24
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: ST_TO_ADDR
44172: GO 44355
44174: LD_INT 49
44176: DOUBLE
44177: EQUAL
44178: IFTRUE 44182
44180: GO 44208
44182: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44183: LD_ADDR_VAR 0 3
44187: PUSH
44188: LD_INT 21
44190: PUSH
44191: LD_INT 22
44193: PUSH
44194: LD_INT 23
44196: PUSH
44197: LD_INT 24
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: ST_TO_ADDR
44206: GO 44355
44208: LD_INT 51
44210: DOUBLE
44211: EQUAL
44212: IFTRUE 44216
44214: GO 44242
44216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44217: LD_ADDR_VAR 0 3
44221: PUSH
44222: LD_INT 21
44224: PUSH
44225: LD_INT 22
44227: PUSH
44228: LD_INT 23
44230: PUSH
44231: LD_INT 24
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: ST_TO_ADDR
44240: GO 44355
44242: LD_INT 52
44244: DOUBLE
44245: EQUAL
44246: IFTRUE 44250
44248: GO 44276
44250: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44251: LD_ADDR_VAR 0 3
44255: PUSH
44256: LD_INT 21
44258: PUSH
44259: LD_INT 22
44261: PUSH
44262: LD_INT 23
44264: PUSH
44265: LD_INT 24
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: ST_TO_ADDR
44274: GO 44355
44276: LD_INT 53
44278: DOUBLE
44279: EQUAL
44280: IFTRUE 44284
44282: GO 44302
44284: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44285: LD_ADDR_VAR 0 3
44289: PUSH
44290: LD_INT 23
44292: PUSH
44293: LD_INT 24
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: ST_TO_ADDR
44300: GO 44355
44302: LD_INT 46
44304: DOUBLE
44305: EQUAL
44306: IFTRUE 44310
44308: GO 44328
44310: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44311: LD_ADDR_VAR 0 3
44315: PUSH
44316: LD_INT 23
44318: PUSH
44319: LD_INT 24
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: ST_TO_ADDR
44326: GO 44355
44328: LD_INT 47
44330: DOUBLE
44331: EQUAL
44332: IFTRUE 44336
44334: GO 44354
44336: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44337: LD_ADDR_VAR 0 3
44341: PUSH
44342: LD_INT 23
44344: PUSH
44345: LD_INT 24
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: ST_TO_ADDR
44352: GO 44355
44354: POP
// result := ( chassis in result ) ;
44355: LD_ADDR_VAR 0 3
44359: PUSH
44360: LD_VAR 0 1
44364: PUSH
44365: LD_VAR 0 3
44369: IN
44370: ST_TO_ADDR
// end ;
44371: LD_VAR 0 3
44375: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44376: LD_INT 0
44378: PPUSH
44379: PPUSH
44380: PPUSH
44381: PPUSH
44382: PPUSH
44383: PPUSH
44384: PPUSH
// result := array ;
44385: LD_ADDR_VAR 0 5
44389: PUSH
44390: LD_VAR 0 1
44394: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44395: LD_VAR 0 1
44399: NOT
44400: PUSH
44401: LD_VAR 0 2
44405: NOT
44406: OR
44407: PUSH
44408: LD_VAR 0 3
44412: NOT
44413: OR
44414: PUSH
44415: LD_VAR 0 2
44419: PUSH
44420: LD_VAR 0 1
44424: GREATER
44425: OR
44426: PUSH
44427: LD_VAR 0 3
44431: PUSH
44432: LD_VAR 0 1
44436: GREATER
44437: OR
44438: IFFALSE 44442
// exit ;
44440: GO 44738
// if direction then
44442: LD_VAR 0 4
44446: IFFALSE 44510
// begin d := 1 ;
44448: LD_ADDR_VAR 0 9
44452: PUSH
44453: LD_INT 1
44455: ST_TO_ADDR
// if i_from > i_to then
44456: LD_VAR 0 2
44460: PUSH
44461: LD_VAR 0 3
44465: GREATER
44466: IFFALSE 44492
// length := ( array - i_from ) + i_to else
44468: LD_ADDR_VAR 0 11
44472: PUSH
44473: LD_VAR 0 1
44477: PUSH
44478: LD_VAR 0 2
44482: MINUS
44483: PUSH
44484: LD_VAR 0 3
44488: PLUS
44489: ST_TO_ADDR
44490: GO 44508
// length := i_to - i_from ;
44492: LD_ADDR_VAR 0 11
44496: PUSH
44497: LD_VAR 0 3
44501: PUSH
44502: LD_VAR 0 2
44506: MINUS
44507: ST_TO_ADDR
// end else
44508: GO 44571
// begin d := - 1 ;
44510: LD_ADDR_VAR 0 9
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: ST_TO_ADDR
// if i_from > i_to then
44519: LD_VAR 0 2
44523: PUSH
44524: LD_VAR 0 3
44528: GREATER
44529: IFFALSE 44549
// length := i_from - i_to else
44531: LD_ADDR_VAR 0 11
44535: PUSH
44536: LD_VAR 0 2
44540: PUSH
44541: LD_VAR 0 3
44545: MINUS
44546: ST_TO_ADDR
44547: GO 44571
// length := ( array - i_to ) + i_from ;
44549: LD_ADDR_VAR 0 11
44553: PUSH
44554: LD_VAR 0 1
44558: PUSH
44559: LD_VAR 0 3
44563: MINUS
44564: PUSH
44565: LD_VAR 0 2
44569: PLUS
44570: ST_TO_ADDR
// end ; if not length then
44571: LD_VAR 0 11
44575: NOT
44576: IFFALSE 44580
// exit ;
44578: GO 44738
// tmp := array ;
44580: LD_ADDR_VAR 0 10
44584: PUSH
44585: LD_VAR 0 1
44589: ST_TO_ADDR
// for i = 1 to length do
44590: LD_ADDR_VAR 0 6
44594: PUSH
44595: DOUBLE
44596: LD_INT 1
44598: DEC
44599: ST_TO_ADDR
44600: LD_VAR 0 11
44604: PUSH
44605: FOR_TO
44606: IFFALSE 44726
// begin for j = 1 to array do
44608: LD_ADDR_VAR 0 7
44612: PUSH
44613: DOUBLE
44614: LD_INT 1
44616: DEC
44617: ST_TO_ADDR
44618: LD_VAR 0 1
44622: PUSH
44623: FOR_TO
44624: IFFALSE 44712
// begin k := j + d ;
44626: LD_ADDR_VAR 0 8
44630: PUSH
44631: LD_VAR 0 7
44635: PUSH
44636: LD_VAR 0 9
44640: PLUS
44641: ST_TO_ADDR
// if k > array then
44642: LD_VAR 0 8
44646: PUSH
44647: LD_VAR 0 1
44651: GREATER
44652: IFFALSE 44662
// k := 1 ;
44654: LD_ADDR_VAR 0 8
44658: PUSH
44659: LD_INT 1
44661: ST_TO_ADDR
// if not k then
44662: LD_VAR 0 8
44666: NOT
44667: IFFALSE 44679
// k := array ;
44669: LD_ADDR_VAR 0 8
44673: PUSH
44674: LD_VAR 0 1
44678: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44679: LD_ADDR_VAR 0 10
44683: PUSH
44684: LD_VAR 0 10
44688: PPUSH
44689: LD_VAR 0 8
44693: PPUSH
44694: LD_VAR 0 1
44698: PUSH
44699: LD_VAR 0 7
44703: ARRAY
44704: PPUSH
44705: CALL_OW 1
44709: ST_TO_ADDR
// end ;
44710: GO 44623
44712: POP
44713: POP
// array := tmp ;
44714: LD_ADDR_VAR 0 1
44718: PUSH
44719: LD_VAR 0 10
44723: ST_TO_ADDR
// end ;
44724: GO 44605
44726: POP
44727: POP
// result := array ;
44728: LD_ADDR_VAR 0 5
44732: PUSH
44733: LD_VAR 0 1
44737: ST_TO_ADDR
// end ;
44738: LD_VAR 0 5
44742: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44743: LD_INT 0
44745: PPUSH
44746: PPUSH
// result := 0 ;
44747: LD_ADDR_VAR 0 3
44751: PUSH
44752: LD_INT 0
44754: ST_TO_ADDR
// if not array or not value in array then
44755: LD_VAR 0 1
44759: NOT
44760: PUSH
44761: LD_VAR 0 2
44765: PUSH
44766: LD_VAR 0 1
44770: IN
44771: NOT
44772: OR
44773: IFFALSE 44777
// exit ;
44775: GO 44831
// for i = 1 to array do
44777: LD_ADDR_VAR 0 4
44781: PUSH
44782: DOUBLE
44783: LD_INT 1
44785: DEC
44786: ST_TO_ADDR
44787: LD_VAR 0 1
44791: PUSH
44792: FOR_TO
44793: IFFALSE 44829
// if value = array [ i ] then
44795: LD_VAR 0 2
44799: PUSH
44800: LD_VAR 0 1
44804: PUSH
44805: LD_VAR 0 4
44809: ARRAY
44810: EQUAL
44811: IFFALSE 44827
// begin result := i ;
44813: LD_ADDR_VAR 0 3
44817: PUSH
44818: LD_VAR 0 4
44822: ST_TO_ADDR
// exit ;
44823: POP
44824: POP
44825: GO 44831
// end ;
44827: GO 44792
44829: POP
44830: POP
// end ;
44831: LD_VAR 0 3
44835: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44836: LD_INT 0
44838: PPUSH
// vc_chassis := chassis ;
44839: LD_ADDR_OWVAR 37
44843: PUSH
44844: LD_VAR 0 1
44848: ST_TO_ADDR
// vc_engine := engine ;
44849: LD_ADDR_OWVAR 39
44853: PUSH
44854: LD_VAR 0 2
44858: ST_TO_ADDR
// vc_control := control ;
44859: LD_ADDR_OWVAR 38
44863: PUSH
44864: LD_VAR 0 3
44868: ST_TO_ADDR
// vc_weapon := weapon ;
44869: LD_ADDR_OWVAR 40
44873: PUSH
44874: LD_VAR 0 4
44878: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44879: LD_ADDR_OWVAR 41
44883: PUSH
44884: LD_VAR 0 5
44888: ST_TO_ADDR
// end ;
44889: LD_VAR 0 6
44893: RET
// export function WantPlant ( unit ) ; var task ; begin
44894: LD_INT 0
44896: PPUSH
44897: PPUSH
// result := false ;
44898: LD_ADDR_VAR 0 2
44902: PUSH
44903: LD_INT 0
44905: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44906: LD_ADDR_VAR 0 3
44910: PUSH
44911: LD_VAR 0 1
44915: PPUSH
44916: CALL_OW 437
44920: ST_TO_ADDR
// if task then
44921: LD_VAR 0 3
44925: IFFALSE 44953
// if task [ 1 ] [ 1 ] = p then
44927: LD_VAR 0 3
44931: PUSH
44932: LD_INT 1
44934: ARRAY
44935: PUSH
44936: LD_INT 1
44938: ARRAY
44939: PUSH
44940: LD_STRING p
44942: EQUAL
44943: IFFALSE 44953
// result := true ;
44945: LD_ADDR_VAR 0 2
44949: PUSH
44950: LD_INT 1
44952: ST_TO_ADDR
// end ;
44953: LD_VAR 0 2
44957: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44958: LD_INT 0
44960: PPUSH
44961: PPUSH
44962: PPUSH
44963: PPUSH
// if pos < 1 then
44964: LD_VAR 0 2
44968: PUSH
44969: LD_INT 1
44971: LESS
44972: IFFALSE 44976
// exit ;
44974: GO 45279
// if pos = 1 then
44976: LD_VAR 0 2
44980: PUSH
44981: LD_INT 1
44983: EQUAL
44984: IFFALSE 45017
// result := Replace ( arr , pos [ 1 ] , value ) else
44986: LD_ADDR_VAR 0 4
44990: PUSH
44991: LD_VAR 0 1
44995: PPUSH
44996: LD_VAR 0 2
45000: PUSH
45001: LD_INT 1
45003: ARRAY
45004: PPUSH
45005: LD_VAR 0 3
45009: PPUSH
45010: CALL_OW 1
45014: ST_TO_ADDR
45015: GO 45279
// begin tmp := arr ;
45017: LD_ADDR_VAR 0 6
45021: PUSH
45022: LD_VAR 0 1
45026: ST_TO_ADDR
// s_arr := [ tmp ] ;
45027: LD_ADDR_VAR 0 7
45031: PUSH
45032: LD_VAR 0 6
45036: PUSH
45037: EMPTY
45038: LIST
45039: ST_TO_ADDR
// for i = 1 to pos - 1 do
45040: LD_ADDR_VAR 0 5
45044: PUSH
45045: DOUBLE
45046: LD_INT 1
45048: DEC
45049: ST_TO_ADDR
45050: LD_VAR 0 2
45054: PUSH
45055: LD_INT 1
45057: MINUS
45058: PUSH
45059: FOR_TO
45060: IFFALSE 45105
// begin tmp := tmp [ pos [ i ] ] ;
45062: LD_ADDR_VAR 0 6
45066: PUSH
45067: LD_VAR 0 6
45071: PUSH
45072: LD_VAR 0 2
45076: PUSH
45077: LD_VAR 0 5
45081: ARRAY
45082: ARRAY
45083: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45084: LD_ADDR_VAR 0 7
45088: PUSH
45089: LD_VAR 0 7
45093: PUSH
45094: LD_VAR 0 6
45098: PUSH
45099: EMPTY
45100: LIST
45101: ADD
45102: ST_TO_ADDR
// end ;
45103: GO 45059
45105: POP
45106: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45107: LD_ADDR_VAR 0 6
45111: PUSH
45112: LD_VAR 0 6
45116: PPUSH
45117: LD_VAR 0 2
45121: PUSH
45122: LD_VAR 0 2
45126: ARRAY
45127: PPUSH
45128: LD_VAR 0 3
45132: PPUSH
45133: CALL_OW 1
45137: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45138: LD_ADDR_VAR 0 7
45142: PUSH
45143: LD_VAR 0 7
45147: PPUSH
45148: LD_VAR 0 7
45152: PPUSH
45153: LD_VAR 0 6
45157: PPUSH
45158: CALL_OW 1
45162: ST_TO_ADDR
// for i = s_arr downto 2 do
45163: LD_ADDR_VAR 0 5
45167: PUSH
45168: DOUBLE
45169: LD_VAR 0 7
45173: INC
45174: ST_TO_ADDR
45175: LD_INT 2
45177: PUSH
45178: FOR_DOWNTO
45179: IFFALSE 45263
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45181: LD_ADDR_VAR 0 6
45185: PUSH
45186: LD_VAR 0 7
45190: PUSH
45191: LD_VAR 0 5
45195: PUSH
45196: LD_INT 1
45198: MINUS
45199: ARRAY
45200: PPUSH
45201: LD_VAR 0 2
45205: PUSH
45206: LD_VAR 0 5
45210: PUSH
45211: LD_INT 1
45213: MINUS
45214: ARRAY
45215: PPUSH
45216: LD_VAR 0 7
45220: PUSH
45221: LD_VAR 0 5
45225: ARRAY
45226: PPUSH
45227: CALL_OW 1
45231: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45232: LD_ADDR_VAR 0 7
45236: PUSH
45237: LD_VAR 0 7
45241: PPUSH
45242: LD_VAR 0 5
45246: PUSH
45247: LD_INT 1
45249: MINUS
45250: PPUSH
45251: LD_VAR 0 6
45255: PPUSH
45256: CALL_OW 1
45260: ST_TO_ADDR
// end ;
45261: GO 45178
45263: POP
45264: POP
// result := s_arr [ 1 ] ;
45265: LD_ADDR_VAR 0 4
45269: PUSH
45270: LD_VAR 0 7
45274: PUSH
45275: LD_INT 1
45277: ARRAY
45278: ST_TO_ADDR
// end ; end ;
45279: LD_VAR 0 4
45283: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45284: LD_INT 0
45286: PPUSH
45287: PPUSH
// if not list then
45288: LD_VAR 0 1
45292: NOT
45293: IFFALSE 45297
// exit ;
45295: GO 45388
// i := list [ pos1 ] ;
45297: LD_ADDR_VAR 0 5
45301: PUSH
45302: LD_VAR 0 1
45306: PUSH
45307: LD_VAR 0 2
45311: ARRAY
45312: ST_TO_ADDR
// if not i then
45313: LD_VAR 0 5
45317: NOT
45318: IFFALSE 45322
// exit ;
45320: GO 45388
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45322: LD_ADDR_VAR 0 1
45326: PUSH
45327: LD_VAR 0 1
45331: PPUSH
45332: LD_VAR 0 2
45336: PPUSH
45337: LD_VAR 0 1
45341: PUSH
45342: LD_VAR 0 3
45346: ARRAY
45347: PPUSH
45348: CALL_OW 1
45352: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45353: LD_ADDR_VAR 0 1
45357: PUSH
45358: LD_VAR 0 1
45362: PPUSH
45363: LD_VAR 0 3
45367: PPUSH
45368: LD_VAR 0 5
45372: PPUSH
45373: CALL_OW 1
45377: ST_TO_ADDR
// result := list ;
45378: LD_ADDR_VAR 0 4
45382: PUSH
45383: LD_VAR 0 1
45387: ST_TO_ADDR
// end ;
45388: LD_VAR 0 4
45392: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45393: LD_INT 0
45395: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45396: LD_ADDR_VAR 0 5
45400: PUSH
45401: LD_VAR 0 1
45405: PPUSH
45406: CALL_OW 250
45410: PPUSH
45411: LD_VAR 0 1
45415: PPUSH
45416: CALL_OW 251
45420: PPUSH
45421: LD_VAR 0 2
45425: PPUSH
45426: LD_VAR 0 3
45430: PPUSH
45431: LD_VAR 0 4
45435: PPUSH
45436: CALL 45446 0 5
45440: ST_TO_ADDR
// end ;
45441: LD_VAR 0 5
45445: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45446: LD_INT 0
45448: PPUSH
45449: PPUSH
45450: PPUSH
45451: PPUSH
// if not list then
45452: LD_VAR 0 3
45456: NOT
45457: IFFALSE 45461
// exit ;
45459: GO 45849
// result := [ ] ;
45461: LD_ADDR_VAR 0 6
45465: PUSH
45466: EMPTY
45467: ST_TO_ADDR
// for i in list do
45468: LD_ADDR_VAR 0 7
45472: PUSH
45473: LD_VAR 0 3
45477: PUSH
45478: FOR_IN
45479: IFFALSE 45681
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45481: LD_ADDR_VAR 0 9
45485: PUSH
45486: LD_VAR 0 7
45490: PPUSH
45491: LD_VAR 0 1
45495: PPUSH
45496: LD_VAR 0 2
45500: PPUSH
45501: CALL_OW 297
45505: ST_TO_ADDR
// if not result then
45506: LD_VAR 0 6
45510: NOT
45511: IFFALSE 45537
// result := [ [ i , tmp ] ] else
45513: LD_ADDR_VAR 0 6
45517: PUSH
45518: LD_VAR 0 7
45522: PUSH
45523: LD_VAR 0 9
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: EMPTY
45533: LIST
45534: ST_TO_ADDR
45535: GO 45679
// begin if result [ result ] [ 2 ] < tmp then
45537: LD_VAR 0 6
45541: PUSH
45542: LD_VAR 0 6
45546: ARRAY
45547: PUSH
45548: LD_INT 2
45550: ARRAY
45551: PUSH
45552: LD_VAR 0 9
45556: LESS
45557: IFFALSE 45599
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45559: LD_ADDR_VAR 0 6
45563: PUSH
45564: LD_VAR 0 6
45568: PPUSH
45569: LD_VAR 0 6
45573: PUSH
45574: LD_INT 1
45576: PLUS
45577: PPUSH
45578: LD_VAR 0 7
45582: PUSH
45583: LD_VAR 0 9
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PPUSH
45592: CALL_OW 2
45596: ST_TO_ADDR
45597: GO 45679
// for j = 1 to result do
45599: LD_ADDR_VAR 0 8
45603: PUSH
45604: DOUBLE
45605: LD_INT 1
45607: DEC
45608: ST_TO_ADDR
45609: LD_VAR 0 6
45613: PUSH
45614: FOR_TO
45615: IFFALSE 45677
// begin if tmp < result [ j ] [ 2 ] then
45617: LD_VAR 0 9
45621: PUSH
45622: LD_VAR 0 6
45626: PUSH
45627: LD_VAR 0 8
45631: ARRAY
45632: PUSH
45633: LD_INT 2
45635: ARRAY
45636: LESS
45637: IFFALSE 45675
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45639: LD_ADDR_VAR 0 6
45643: PUSH
45644: LD_VAR 0 6
45648: PPUSH
45649: LD_VAR 0 8
45653: PPUSH
45654: LD_VAR 0 7
45658: PUSH
45659: LD_VAR 0 9
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PPUSH
45668: CALL_OW 2
45672: ST_TO_ADDR
// break ;
45673: GO 45677
// end ; end ;
45675: GO 45614
45677: POP
45678: POP
// end ; end ;
45679: GO 45478
45681: POP
45682: POP
// if result and not asc then
45683: LD_VAR 0 6
45687: PUSH
45688: LD_VAR 0 4
45692: NOT
45693: AND
45694: IFFALSE 45769
// begin tmp := result ;
45696: LD_ADDR_VAR 0 9
45700: PUSH
45701: LD_VAR 0 6
45705: ST_TO_ADDR
// for i = tmp downto 1 do
45706: LD_ADDR_VAR 0 7
45710: PUSH
45711: DOUBLE
45712: LD_VAR 0 9
45716: INC
45717: ST_TO_ADDR
45718: LD_INT 1
45720: PUSH
45721: FOR_DOWNTO
45722: IFFALSE 45767
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45724: LD_ADDR_VAR 0 6
45728: PUSH
45729: LD_VAR 0 6
45733: PPUSH
45734: LD_VAR 0 9
45738: PUSH
45739: LD_VAR 0 7
45743: MINUS
45744: PUSH
45745: LD_INT 1
45747: PLUS
45748: PPUSH
45749: LD_VAR 0 9
45753: PUSH
45754: LD_VAR 0 7
45758: ARRAY
45759: PPUSH
45760: CALL_OW 1
45764: ST_TO_ADDR
45765: GO 45721
45767: POP
45768: POP
// end ; tmp := [ ] ;
45769: LD_ADDR_VAR 0 9
45773: PUSH
45774: EMPTY
45775: ST_TO_ADDR
// if mode then
45776: LD_VAR 0 5
45780: IFFALSE 45849
// begin for i = 1 to result do
45782: LD_ADDR_VAR 0 7
45786: PUSH
45787: DOUBLE
45788: LD_INT 1
45790: DEC
45791: ST_TO_ADDR
45792: LD_VAR 0 6
45796: PUSH
45797: FOR_TO
45798: IFFALSE 45837
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45800: LD_ADDR_VAR 0 9
45804: PUSH
45805: LD_VAR 0 9
45809: PPUSH
45810: LD_VAR 0 7
45814: PPUSH
45815: LD_VAR 0 6
45819: PUSH
45820: LD_VAR 0 7
45824: ARRAY
45825: PUSH
45826: LD_INT 1
45828: ARRAY
45829: PPUSH
45830: CALL_OW 1
45834: ST_TO_ADDR
45835: GO 45797
45837: POP
45838: POP
// result := tmp ;
45839: LD_ADDR_VAR 0 6
45843: PUSH
45844: LD_VAR 0 9
45848: ST_TO_ADDR
// end ; end ;
45849: LD_VAR 0 6
45853: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45854: LD_INT 0
45856: PPUSH
45857: PPUSH
45858: PPUSH
45859: PPUSH
45860: PPUSH
45861: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45862: LD_ADDR_VAR 0 5
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: EMPTY
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: ST_TO_ADDR
// if not x or not y then
45884: LD_VAR 0 2
45888: NOT
45889: PUSH
45890: LD_VAR 0 3
45894: NOT
45895: OR
45896: IFFALSE 45900
// exit ;
45898: GO 47550
// if not range then
45900: LD_VAR 0 4
45904: NOT
45905: IFFALSE 45915
// range := 10 ;
45907: LD_ADDR_VAR 0 4
45911: PUSH
45912: LD_INT 10
45914: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45915: LD_ADDR_VAR 0 8
45919: PUSH
45920: LD_INT 81
45922: PUSH
45923: LD_VAR 0 1
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 92
45934: PUSH
45935: LD_VAR 0 2
45939: PUSH
45940: LD_VAR 0 3
45944: PUSH
45945: LD_VAR 0 4
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 3
45958: PUSH
45959: LD_INT 21
45961: PUSH
45962: LD_INT 3
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: LIST
45977: PPUSH
45978: CALL_OW 69
45982: ST_TO_ADDR
// if not tmp then
45983: LD_VAR 0 8
45987: NOT
45988: IFFALSE 45992
// exit ;
45990: GO 47550
// for i in tmp do
45992: LD_ADDR_VAR 0 6
45996: PUSH
45997: LD_VAR 0 8
46001: PUSH
46002: FOR_IN
46003: IFFALSE 47525
// begin points := [ 0 , 0 , 0 ] ;
46005: LD_ADDR_VAR 0 9
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: LIST
46023: ST_TO_ADDR
// bpoints := 1 ;
46024: LD_ADDR_VAR 0 10
46028: PUSH
46029: LD_INT 1
46031: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46032: LD_VAR 0 6
46036: PPUSH
46037: CALL_OW 247
46041: PUSH
46042: LD_INT 1
46044: DOUBLE
46045: EQUAL
46046: IFTRUE 46050
46048: GO 46628
46050: POP
// begin if GetClass ( i ) = 1 then
46051: LD_VAR 0 6
46055: PPUSH
46056: CALL_OW 257
46060: PUSH
46061: LD_INT 1
46063: EQUAL
46064: IFFALSE 46085
// points := [ 10 , 5 , 3 ] ;
46066: LD_ADDR_VAR 0 9
46070: PUSH
46071: LD_INT 10
46073: PUSH
46074: LD_INT 5
46076: PUSH
46077: LD_INT 3
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46085: LD_VAR 0 6
46089: PPUSH
46090: CALL_OW 257
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: LD_INT 3
46100: PUSH
46101: LD_INT 4
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: LIST
46108: IN
46109: IFFALSE 46130
// points := [ 3 , 2 , 1 ] ;
46111: LD_ADDR_VAR 0 9
46115: PUSH
46116: LD_INT 3
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: LIST
46129: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46130: LD_VAR 0 6
46134: PPUSH
46135: CALL_OW 257
46139: PUSH
46140: LD_INT 5
46142: EQUAL
46143: IFFALSE 46164
// points := [ 130 , 5 , 2 ] ;
46145: LD_ADDR_VAR 0 9
46149: PUSH
46150: LD_INT 130
46152: PUSH
46153: LD_INT 5
46155: PUSH
46156: LD_INT 2
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: LIST
46163: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46164: LD_VAR 0 6
46168: PPUSH
46169: CALL_OW 257
46173: PUSH
46174: LD_INT 8
46176: EQUAL
46177: IFFALSE 46198
// points := [ 35 , 35 , 30 ] ;
46179: LD_ADDR_VAR 0 9
46183: PUSH
46184: LD_INT 35
46186: PUSH
46187: LD_INT 35
46189: PUSH
46190: LD_INT 30
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: LIST
46197: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46198: LD_VAR 0 6
46202: PPUSH
46203: CALL_OW 257
46207: PUSH
46208: LD_INT 9
46210: EQUAL
46211: IFFALSE 46232
// points := [ 20 , 55 , 40 ] ;
46213: LD_ADDR_VAR 0 9
46217: PUSH
46218: LD_INT 20
46220: PUSH
46221: LD_INT 55
46223: PUSH
46224: LD_INT 40
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: LIST
46231: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46232: LD_VAR 0 6
46236: PPUSH
46237: CALL_OW 257
46241: PUSH
46242: LD_INT 12
46244: PUSH
46245: LD_INT 16
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: IN
46252: IFFALSE 46273
// points := [ 5 , 3 , 2 ] ;
46254: LD_ADDR_VAR 0 9
46258: PUSH
46259: LD_INT 5
46261: PUSH
46262: LD_INT 3
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: LIST
46272: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46273: LD_VAR 0 6
46277: PPUSH
46278: CALL_OW 257
46282: PUSH
46283: LD_INT 17
46285: EQUAL
46286: IFFALSE 46307
// points := [ 100 , 50 , 75 ] ;
46288: LD_ADDR_VAR 0 9
46292: PUSH
46293: LD_INT 100
46295: PUSH
46296: LD_INT 50
46298: PUSH
46299: LD_INT 75
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: LIST
46306: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46307: LD_VAR 0 6
46311: PPUSH
46312: CALL_OW 257
46316: PUSH
46317: LD_INT 15
46319: EQUAL
46320: IFFALSE 46341
// points := [ 10 , 5 , 3 ] ;
46322: LD_ADDR_VAR 0 9
46326: PUSH
46327: LD_INT 10
46329: PUSH
46330: LD_INT 5
46332: PUSH
46333: LD_INT 3
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: LIST
46340: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46341: LD_VAR 0 6
46345: PPUSH
46346: CALL_OW 257
46350: PUSH
46351: LD_INT 14
46353: EQUAL
46354: IFFALSE 46375
// points := [ 10 , 0 , 0 ] ;
46356: LD_ADDR_VAR 0 9
46360: PUSH
46361: LD_INT 10
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: LIST
46374: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46375: LD_VAR 0 6
46379: PPUSH
46380: CALL_OW 257
46384: PUSH
46385: LD_INT 11
46387: EQUAL
46388: IFFALSE 46409
// points := [ 30 , 10 , 5 ] ;
46390: LD_ADDR_VAR 0 9
46394: PUSH
46395: LD_INT 30
46397: PUSH
46398: LD_INT 10
46400: PUSH
46401: LD_INT 5
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: LIST
46408: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46409: LD_VAR 0 1
46413: PPUSH
46414: LD_INT 5
46416: PPUSH
46417: CALL_OW 321
46421: PUSH
46422: LD_INT 2
46424: EQUAL
46425: IFFALSE 46442
// bpoints := bpoints * 1.8 ;
46427: LD_ADDR_VAR 0 10
46431: PUSH
46432: LD_VAR 0 10
46436: PUSH
46437: LD_REAL  1.80000000000000E+0000
46440: MUL
46441: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46442: LD_VAR 0 6
46446: PPUSH
46447: CALL_OW 257
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: LD_INT 3
46460: PUSH
46461: LD_INT 4
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: IN
46470: PUSH
46471: LD_VAR 0 1
46475: PPUSH
46476: LD_INT 51
46478: PPUSH
46479: CALL_OW 321
46483: PUSH
46484: LD_INT 2
46486: EQUAL
46487: AND
46488: IFFALSE 46505
// bpoints := bpoints * 1.2 ;
46490: LD_ADDR_VAR 0 10
46494: PUSH
46495: LD_VAR 0 10
46499: PUSH
46500: LD_REAL  1.20000000000000E+0000
46503: MUL
46504: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46505: LD_VAR 0 6
46509: PPUSH
46510: CALL_OW 257
46514: PUSH
46515: LD_INT 5
46517: PUSH
46518: LD_INT 7
46520: PUSH
46521: LD_INT 9
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: LIST
46528: IN
46529: PUSH
46530: LD_VAR 0 1
46534: PPUSH
46535: LD_INT 52
46537: PPUSH
46538: CALL_OW 321
46542: PUSH
46543: LD_INT 2
46545: EQUAL
46546: AND
46547: IFFALSE 46564
// bpoints := bpoints * 1.5 ;
46549: LD_ADDR_VAR 0 10
46553: PUSH
46554: LD_VAR 0 10
46558: PUSH
46559: LD_REAL  1.50000000000000E+0000
46562: MUL
46563: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46564: LD_VAR 0 1
46568: PPUSH
46569: LD_INT 66
46571: PPUSH
46572: CALL_OW 321
46576: PUSH
46577: LD_INT 2
46579: EQUAL
46580: IFFALSE 46597
// bpoints := bpoints * 1.1 ;
46582: LD_ADDR_VAR 0 10
46586: PUSH
46587: LD_VAR 0 10
46591: PUSH
46592: LD_REAL  1.10000000000000E+0000
46595: MUL
46596: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46597: LD_ADDR_VAR 0 10
46601: PUSH
46602: LD_VAR 0 10
46606: PUSH
46607: LD_VAR 0 6
46611: PPUSH
46612: LD_INT 1
46614: PPUSH
46615: CALL_OW 259
46619: PUSH
46620: LD_REAL  1.15000000000000E+0000
46623: MUL
46624: MUL
46625: ST_TO_ADDR
// end ; unit_vehicle :
46626: GO 47454
46628: LD_INT 2
46630: DOUBLE
46631: EQUAL
46632: IFTRUE 46636
46634: GO 47442
46636: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46637: LD_VAR 0 6
46641: PPUSH
46642: CALL_OW 264
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: LD_INT 42
46652: PUSH
46653: LD_INT 24
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: LIST
46660: IN
46661: IFFALSE 46682
// points := [ 25 , 5 , 3 ] ;
46663: LD_ADDR_VAR 0 9
46667: PUSH
46668: LD_INT 25
46670: PUSH
46671: LD_INT 5
46673: PUSH
46674: LD_INT 3
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: LIST
46681: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46682: LD_VAR 0 6
46686: PPUSH
46687: CALL_OW 264
46691: PUSH
46692: LD_INT 4
46694: PUSH
46695: LD_INT 43
46697: PUSH
46698: LD_INT 25
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: LIST
46705: IN
46706: IFFALSE 46727
// points := [ 40 , 15 , 5 ] ;
46708: LD_ADDR_VAR 0 9
46712: PUSH
46713: LD_INT 40
46715: PUSH
46716: LD_INT 15
46718: PUSH
46719: LD_INT 5
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: LIST
46726: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46727: LD_VAR 0 6
46731: PPUSH
46732: CALL_OW 264
46736: PUSH
46737: LD_INT 3
46739: PUSH
46740: LD_INT 23
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: IN
46747: IFFALSE 46768
// points := [ 7 , 25 , 8 ] ;
46749: LD_ADDR_VAR 0 9
46753: PUSH
46754: LD_INT 7
46756: PUSH
46757: LD_INT 25
46759: PUSH
46760: LD_INT 8
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: LIST
46767: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46768: LD_VAR 0 6
46772: PPUSH
46773: CALL_OW 264
46777: PUSH
46778: LD_INT 5
46780: PUSH
46781: LD_INT 27
46783: PUSH
46784: LD_INT 44
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: LIST
46791: IN
46792: IFFALSE 46813
// points := [ 14 , 50 , 16 ] ;
46794: LD_ADDR_VAR 0 9
46798: PUSH
46799: LD_INT 14
46801: PUSH
46802: LD_INT 50
46804: PUSH
46805: LD_INT 16
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: LIST
46812: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46813: LD_VAR 0 6
46817: PPUSH
46818: CALL_OW 264
46822: PUSH
46823: LD_INT 6
46825: PUSH
46826: LD_INT 46
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: IN
46833: IFFALSE 46854
// points := [ 32 , 120 , 70 ] ;
46835: LD_ADDR_VAR 0 9
46839: PUSH
46840: LD_INT 32
46842: PUSH
46843: LD_INT 120
46845: PUSH
46846: LD_INT 70
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: LIST
46853: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46854: LD_VAR 0 6
46858: PPUSH
46859: CALL_OW 264
46863: PUSH
46864: LD_INT 7
46866: PUSH
46867: LD_INT 28
46869: PUSH
46870: LD_INT 45
46872: PUSH
46873: LD_INT 92
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: IN
46882: IFFALSE 46903
// points := [ 35 , 20 , 45 ] ;
46884: LD_ADDR_VAR 0 9
46888: PUSH
46889: LD_INT 35
46891: PUSH
46892: LD_INT 20
46894: PUSH
46895: LD_INT 45
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: LIST
46902: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46903: LD_VAR 0 6
46907: PPUSH
46908: CALL_OW 264
46912: PUSH
46913: LD_INT 47
46915: PUSH
46916: EMPTY
46917: LIST
46918: IN
46919: IFFALSE 46940
// points := [ 67 , 45 , 75 ] ;
46921: LD_ADDR_VAR 0 9
46925: PUSH
46926: LD_INT 67
46928: PUSH
46929: LD_INT 45
46931: PUSH
46932: LD_INT 75
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: LIST
46939: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46940: LD_VAR 0 6
46944: PPUSH
46945: CALL_OW 264
46949: PUSH
46950: LD_INT 26
46952: PUSH
46953: EMPTY
46954: LIST
46955: IN
46956: IFFALSE 46977
// points := [ 120 , 30 , 80 ] ;
46958: LD_ADDR_VAR 0 9
46962: PUSH
46963: LD_INT 120
46965: PUSH
46966: LD_INT 30
46968: PUSH
46969: LD_INT 80
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: LIST
46976: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46977: LD_VAR 0 6
46981: PPUSH
46982: CALL_OW 264
46986: PUSH
46987: LD_INT 22
46989: PUSH
46990: EMPTY
46991: LIST
46992: IN
46993: IFFALSE 47014
// points := [ 40 , 1 , 1 ] ;
46995: LD_ADDR_VAR 0 9
46999: PUSH
47000: LD_INT 40
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: LIST
47013: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47014: LD_VAR 0 6
47018: PPUSH
47019: CALL_OW 264
47023: PUSH
47024: LD_INT 29
47026: PUSH
47027: EMPTY
47028: LIST
47029: IN
47030: IFFALSE 47051
// points := [ 70 , 200 , 400 ] ;
47032: LD_ADDR_VAR 0 9
47036: PUSH
47037: LD_INT 70
47039: PUSH
47040: LD_INT 200
47042: PUSH
47043: LD_INT 400
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: LIST
47050: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47051: LD_VAR 0 6
47055: PPUSH
47056: CALL_OW 264
47060: PUSH
47061: LD_INT 14
47063: PUSH
47064: LD_INT 53
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: IN
47071: IFFALSE 47092
// points := [ 40 , 10 , 20 ] ;
47073: LD_ADDR_VAR 0 9
47077: PUSH
47078: LD_INT 40
47080: PUSH
47081: LD_INT 10
47083: PUSH
47084: LD_INT 20
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: LIST
47091: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47092: LD_VAR 0 6
47096: PPUSH
47097: CALL_OW 264
47101: PUSH
47102: LD_INT 9
47104: PUSH
47105: EMPTY
47106: LIST
47107: IN
47108: IFFALSE 47129
// points := [ 5 , 70 , 20 ] ;
47110: LD_ADDR_VAR 0 9
47114: PUSH
47115: LD_INT 5
47117: PUSH
47118: LD_INT 70
47120: PUSH
47121: LD_INT 20
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: LIST
47128: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47129: LD_VAR 0 6
47133: PPUSH
47134: CALL_OW 264
47138: PUSH
47139: LD_INT 10
47141: PUSH
47142: EMPTY
47143: LIST
47144: IN
47145: IFFALSE 47166
// points := [ 35 , 110 , 70 ] ;
47147: LD_ADDR_VAR 0 9
47151: PUSH
47152: LD_INT 35
47154: PUSH
47155: LD_INT 110
47157: PUSH
47158: LD_INT 70
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: LIST
47165: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47166: LD_VAR 0 6
47170: PPUSH
47171: CALL_OW 265
47175: PUSH
47176: LD_INT 25
47178: EQUAL
47179: IFFALSE 47200
// points := [ 80 , 65 , 100 ] ;
47181: LD_ADDR_VAR 0 9
47185: PUSH
47186: LD_INT 80
47188: PUSH
47189: LD_INT 65
47191: PUSH
47192: LD_INT 100
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: LIST
47199: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47200: LD_VAR 0 6
47204: PPUSH
47205: CALL_OW 263
47209: PUSH
47210: LD_INT 1
47212: EQUAL
47213: IFFALSE 47248
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47215: LD_ADDR_VAR 0 10
47219: PUSH
47220: LD_VAR 0 10
47224: PUSH
47225: LD_VAR 0 6
47229: PPUSH
47230: CALL_OW 311
47234: PPUSH
47235: LD_INT 3
47237: PPUSH
47238: CALL_OW 259
47242: PUSH
47243: LD_INT 4
47245: MUL
47246: MUL
47247: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47248: LD_VAR 0 6
47252: PPUSH
47253: CALL_OW 263
47257: PUSH
47258: LD_INT 2
47260: EQUAL
47261: IFFALSE 47312
// begin j := IsControledBy ( i ) ;
47263: LD_ADDR_VAR 0 7
47267: PUSH
47268: LD_VAR 0 6
47272: PPUSH
47273: CALL_OW 312
47277: ST_TO_ADDR
// if j then
47278: LD_VAR 0 7
47282: IFFALSE 47312
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47284: LD_ADDR_VAR 0 10
47288: PUSH
47289: LD_VAR 0 10
47293: PUSH
47294: LD_VAR 0 7
47298: PPUSH
47299: LD_INT 3
47301: PPUSH
47302: CALL_OW 259
47306: PUSH
47307: LD_INT 3
47309: MUL
47310: MUL
47311: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47312: LD_VAR 0 6
47316: PPUSH
47317: CALL_OW 264
47321: PUSH
47322: LD_INT 5
47324: PUSH
47325: LD_INT 6
47327: PUSH
47328: LD_INT 46
47330: PUSH
47331: LD_INT 44
47333: PUSH
47334: LD_INT 47
47336: PUSH
47337: LD_INT 45
47339: PUSH
47340: LD_INT 28
47342: PUSH
47343: LD_INT 7
47345: PUSH
47346: LD_INT 27
47348: PUSH
47349: LD_INT 29
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: IN
47364: PUSH
47365: LD_VAR 0 1
47369: PPUSH
47370: LD_INT 52
47372: PPUSH
47373: CALL_OW 321
47377: PUSH
47378: LD_INT 2
47380: EQUAL
47381: AND
47382: IFFALSE 47399
// bpoints := bpoints * 1.2 ;
47384: LD_ADDR_VAR 0 10
47388: PUSH
47389: LD_VAR 0 10
47393: PUSH
47394: LD_REAL  1.20000000000000E+0000
47397: MUL
47398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47399: LD_VAR 0 6
47403: PPUSH
47404: CALL_OW 264
47408: PUSH
47409: LD_INT 6
47411: PUSH
47412: LD_INT 46
47414: PUSH
47415: LD_INT 47
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: LIST
47422: IN
47423: IFFALSE 47440
// bpoints := bpoints * 1.2 ;
47425: LD_ADDR_VAR 0 10
47429: PUSH
47430: LD_VAR 0 10
47434: PUSH
47435: LD_REAL  1.20000000000000E+0000
47438: MUL
47439: ST_TO_ADDR
// end ; unit_building :
47440: GO 47454
47442: LD_INT 3
47444: DOUBLE
47445: EQUAL
47446: IFTRUE 47450
47448: GO 47453
47450: POP
// ; end ;
47451: GO 47454
47453: POP
// for j = 1 to 3 do
47454: LD_ADDR_VAR 0 7
47458: PUSH
47459: DOUBLE
47460: LD_INT 1
47462: DEC
47463: ST_TO_ADDR
47464: LD_INT 3
47466: PUSH
47467: FOR_TO
47468: IFFALSE 47521
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47470: LD_ADDR_VAR 0 5
47474: PUSH
47475: LD_VAR 0 5
47479: PPUSH
47480: LD_VAR 0 7
47484: PPUSH
47485: LD_VAR 0 5
47489: PUSH
47490: LD_VAR 0 7
47494: ARRAY
47495: PUSH
47496: LD_VAR 0 9
47500: PUSH
47501: LD_VAR 0 7
47505: ARRAY
47506: PUSH
47507: LD_VAR 0 10
47511: MUL
47512: PLUS
47513: PPUSH
47514: CALL_OW 1
47518: ST_TO_ADDR
47519: GO 47467
47521: POP
47522: POP
// end ;
47523: GO 46002
47525: POP
47526: POP
// result := Replace ( result , 4 , tmp ) ;
47527: LD_ADDR_VAR 0 5
47531: PUSH
47532: LD_VAR 0 5
47536: PPUSH
47537: LD_INT 4
47539: PPUSH
47540: LD_VAR 0 8
47544: PPUSH
47545: CALL_OW 1
47549: ST_TO_ADDR
// end ;
47550: LD_VAR 0 5
47554: RET
// export function DangerAtRange ( unit , range ) ; begin
47555: LD_INT 0
47557: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47558: LD_ADDR_VAR 0 3
47562: PUSH
47563: LD_VAR 0 1
47567: PPUSH
47568: CALL_OW 255
47572: PPUSH
47573: LD_VAR 0 1
47577: PPUSH
47578: CALL_OW 250
47582: PPUSH
47583: LD_VAR 0 1
47587: PPUSH
47588: CALL_OW 251
47592: PPUSH
47593: LD_VAR 0 2
47597: PPUSH
47598: CALL 45854 0 4
47602: ST_TO_ADDR
// end ;
47603: LD_VAR 0 3
47607: RET
// export function DangerInArea ( side , area ) ; begin
47608: LD_INT 0
47610: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47611: LD_ADDR_VAR 0 3
47615: PUSH
47616: LD_VAR 0 2
47620: PPUSH
47621: LD_INT 81
47623: PUSH
47624: LD_VAR 0 1
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PPUSH
47633: CALL_OW 70
47637: ST_TO_ADDR
// end ;
47638: LD_VAR 0 3
47642: RET
// export function IsExtension ( b ) ; begin
47643: LD_INT 0
47645: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47646: LD_ADDR_VAR 0 2
47650: PUSH
47651: LD_VAR 0 1
47655: PUSH
47656: LD_INT 23
47658: PUSH
47659: LD_INT 20
47661: PUSH
47662: LD_INT 22
47664: PUSH
47665: LD_INT 17
47667: PUSH
47668: LD_INT 24
47670: PUSH
47671: LD_INT 21
47673: PUSH
47674: LD_INT 19
47676: PUSH
47677: LD_INT 16
47679: PUSH
47680: LD_INT 25
47682: PUSH
47683: LD_INT 18
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: IN
47698: ST_TO_ADDR
// end ;
47699: LD_VAR 0 2
47703: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47704: LD_INT 0
47706: PPUSH
47707: PPUSH
47708: PPUSH
// result := [ ] ;
47709: LD_ADDR_VAR 0 4
47713: PUSH
47714: EMPTY
47715: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47716: LD_ADDR_VAR 0 5
47720: PUSH
47721: LD_VAR 0 2
47725: PPUSH
47726: LD_INT 21
47728: PUSH
47729: LD_INT 3
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PPUSH
47736: CALL_OW 70
47740: ST_TO_ADDR
// if not tmp then
47741: LD_VAR 0 5
47745: NOT
47746: IFFALSE 47750
// exit ;
47748: GO 47814
// if checkLink then
47750: LD_VAR 0 3
47754: IFFALSE 47804
// begin for i in tmp do
47756: LD_ADDR_VAR 0 6
47760: PUSH
47761: LD_VAR 0 5
47765: PUSH
47766: FOR_IN
47767: IFFALSE 47802
// if GetBase ( i ) <> base then
47769: LD_VAR 0 6
47773: PPUSH
47774: CALL_OW 274
47778: PUSH
47779: LD_VAR 0 1
47783: NONEQUAL
47784: IFFALSE 47800
// ComLinkToBase ( base , i ) ;
47786: LD_VAR 0 1
47790: PPUSH
47791: LD_VAR 0 6
47795: PPUSH
47796: CALL_OW 169
47800: GO 47766
47802: POP
47803: POP
// end ; result := tmp ;
47804: LD_ADDR_VAR 0 4
47808: PUSH
47809: LD_VAR 0 5
47813: ST_TO_ADDR
// end ;
47814: LD_VAR 0 4
47818: RET
// export function ComComplete ( units , b ) ; var i ; begin
47819: LD_INT 0
47821: PPUSH
47822: PPUSH
// if not units then
47823: LD_VAR 0 1
47827: NOT
47828: IFFALSE 47832
// exit ;
47830: GO 47922
// for i in units do
47832: LD_ADDR_VAR 0 4
47836: PUSH
47837: LD_VAR 0 1
47841: PUSH
47842: FOR_IN
47843: IFFALSE 47920
// if BuildingStatus ( b ) = bs_build then
47845: LD_VAR 0 2
47849: PPUSH
47850: CALL_OW 461
47854: PUSH
47855: LD_INT 1
47857: EQUAL
47858: IFFALSE 47918
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47860: LD_VAR 0 4
47864: PPUSH
47865: LD_STRING h
47867: PUSH
47868: LD_VAR 0 2
47872: PPUSH
47873: CALL_OW 250
47877: PUSH
47878: LD_VAR 0 2
47882: PPUSH
47883: CALL_OW 251
47887: PUSH
47888: LD_VAR 0 2
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: PUSH
47911: EMPTY
47912: LIST
47913: PPUSH
47914: CALL_OW 446
47918: GO 47842
47920: POP
47921: POP
// end ;
47922: LD_VAR 0 3
47926: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47927: LD_INT 0
47929: PPUSH
47930: PPUSH
47931: PPUSH
47932: PPUSH
47933: PPUSH
47934: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47935: LD_VAR 0 1
47939: NOT
47940: PUSH
47941: LD_VAR 0 1
47945: PPUSH
47946: CALL_OW 263
47950: PUSH
47951: LD_INT 2
47953: NONEQUAL
47954: OR
47955: IFFALSE 47959
// exit ;
47957: GO 48275
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47959: LD_ADDR_VAR 0 6
47963: PUSH
47964: LD_INT 22
47966: PUSH
47967: LD_VAR 0 1
47971: PPUSH
47972: CALL_OW 255
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: LD_INT 30
47986: PUSH
47987: LD_INT 36
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 34
47996: PUSH
47997: LD_INT 31
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: LIST
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PPUSH
48013: CALL_OW 69
48017: ST_TO_ADDR
// if not tmp then
48018: LD_VAR 0 6
48022: NOT
48023: IFFALSE 48027
// exit ;
48025: GO 48275
// result := [ ] ;
48027: LD_ADDR_VAR 0 2
48031: PUSH
48032: EMPTY
48033: ST_TO_ADDR
// for i in tmp do
48034: LD_ADDR_VAR 0 3
48038: PUSH
48039: LD_VAR 0 6
48043: PUSH
48044: FOR_IN
48045: IFFALSE 48116
// begin t := UnitsInside ( i ) ;
48047: LD_ADDR_VAR 0 4
48051: PUSH
48052: LD_VAR 0 3
48056: PPUSH
48057: CALL_OW 313
48061: ST_TO_ADDR
// if t then
48062: LD_VAR 0 4
48066: IFFALSE 48114
// for j in t do
48068: LD_ADDR_VAR 0 7
48072: PUSH
48073: LD_VAR 0 4
48077: PUSH
48078: FOR_IN
48079: IFFALSE 48112
// result := Replace ( result , result + 1 , j ) ;
48081: LD_ADDR_VAR 0 2
48085: PUSH
48086: LD_VAR 0 2
48090: PPUSH
48091: LD_VAR 0 2
48095: PUSH
48096: LD_INT 1
48098: PLUS
48099: PPUSH
48100: LD_VAR 0 7
48104: PPUSH
48105: CALL_OW 1
48109: ST_TO_ADDR
48110: GO 48078
48112: POP
48113: POP
// end ;
48114: GO 48044
48116: POP
48117: POP
// if not result then
48118: LD_VAR 0 2
48122: NOT
48123: IFFALSE 48127
// exit ;
48125: GO 48275
// mech := result [ 1 ] ;
48127: LD_ADDR_VAR 0 5
48131: PUSH
48132: LD_VAR 0 2
48136: PUSH
48137: LD_INT 1
48139: ARRAY
48140: ST_TO_ADDR
// if result > 1 then
48141: LD_VAR 0 2
48145: PUSH
48146: LD_INT 1
48148: GREATER
48149: IFFALSE 48261
// begin for i = 2 to result do
48151: LD_ADDR_VAR 0 3
48155: PUSH
48156: DOUBLE
48157: LD_INT 2
48159: DEC
48160: ST_TO_ADDR
48161: LD_VAR 0 2
48165: PUSH
48166: FOR_TO
48167: IFFALSE 48259
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48169: LD_ADDR_VAR 0 4
48173: PUSH
48174: LD_VAR 0 2
48178: PUSH
48179: LD_VAR 0 3
48183: ARRAY
48184: PPUSH
48185: LD_INT 3
48187: PPUSH
48188: CALL_OW 259
48192: PUSH
48193: LD_VAR 0 2
48197: PUSH
48198: LD_VAR 0 3
48202: ARRAY
48203: PPUSH
48204: CALL_OW 432
48208: MINUS
48209: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48210: LD_VAR 0 4
48214: PUSH
48215: LD_VAR 0 5
48219: PPUSH
48220: LD_INT 3
48222: PPUSH
48223: CALL_OW 259
48227: PUSH
48228: LD_VAR 0 5
48232: PPUSH
48233: CALL_OW 432
48237: MINUS
48238: GREATEREQUAL
48239: IFFALSE 48257
// mech := result [ i ] ;
48241: LD_ADDR_VAR 0 5
48245: PUSH
48246: LD_VAR 0 2
48250: PUSH
48251: LD_VAR 0 3
48255: ARRAY
48256: ST_TO_ADDR
// end ;
48257: GO 48166
48259: POP
48260: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48261: LD_VAR 0 1
48265: PPUSH
48266: LD_VAR 0 5
48270: PPUSH
48271: CALL_OW 135
// end ;
48275: LD_VAR 0 2
48279: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48280: LD_INT 0
48282: PPUSH
48283: PPUSH
48284: PPUSH
48285: PPUSH
48286: PPUSH
48287: PPUSH
48288: PPUSH
48289: PPUSH
48290: PPUSH
48291: PPUSH
48292: PPUSH
48293: PPUSH
48294: PPUSH
// result := [ ] ;
48295: LD_ADDR_VAR 0 7
48299: PUSH
48300: EMPTY
48301: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48302: LD_VAR 0 1
48306: PPUSH
48307: CALL_OW 266
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: IN
48322: NOT
48323: IFFALSE 48327
// exit ;
48325: GO 49961
// if name then
48327: LD_VAR 0 3
48331: IFFALSE 48347
// SetBName ( base_dep , name ) ;
48333: LD_VAR 0 1
48337: PPUSH
48338: LD_VAR 0 3
48342: PPUSH
48343: CALL_OW 500
// base := GetBase ( base_dep ) ;
48347: LD_ADDR_VAR 0 15
48351: PUSH
48352: LD_VAR 0 1
48356: PPUSH
48357: CALL_OW 274
48361: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48362: LD_ADDR_VAR 0 16
48366: PUSH
48367: LD_VAR 0 1
48371: PPUSH
48372: CALL_OW 255
48376: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48377: LD_ADDR_VAR 0 17
48381: PUSH
48382: LD_VAR 0 1
48386: PPUSH
48387: CALL_OW 248
48391: ST_TO_ADDR
// if sources then
48392: LD_VAR 0 5
48396: IFFALSE 48443
// for i = 1 to 3 do
48398: LD_ADDR_VAR 0 8
48402: PUSH
48403: DOUBLE
48404: LD_INT 1
48406: DEC
48407: ST_TO_ADDR
48408: LD_INT 3
48410: PUSH
48411: FOR_TO
48412: IFFALSE 48441
// AddResourceType ( base , i , sources [ i ] ) ;
48414: LD_VAR 0 15
48418: PPUSH
48419: LD_VAR 0 8
48423: PPUSH
48424: LD_VAR 0 5
48428: PUSH
48429: LD_VAR 0 8
48433: ARRAY
48434: PPUSH
48435: CALL_OW 276
48439: GO 48411
48441: POP
48442: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48443: LD_ADDR_VAR 0 18
48447: PUSH
48448: LD_VAR 0 15
48452: PPUSH
48453: LD_VAR 0 2
48457: PPUSH
48458: LD_INT 1
48460: PPUSH
48461: CALL 47704 0 3
48465: ST_TO_ADDR
// InitHc ;
48466: CALL_OW 19
// InitUc ;
48470: CALL_OW 18
// uc_side := side ;
48474: LD_ADDR_OWVAR 20
48478: PUSH
48479: LD_VAR 0 16
48483: ST_TO_ADDR
// uc_nation := nation ;
48484: LD_ADDR_OWVAR 21
48488: PUSH
48489: LD_VAR 0 17
48493: ST_TO_ADDR
// if buildings then
48494: LD_VAR 0 18
48498: IFFALSE 49820
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48500: LD_ADDR_VAR 0 19
48504: PUSH
48505: LD_VAR 0 18
48509: PPUSH
48510: LD_INT 2
48512: PUSH
48513: LD_INT 30
48515: PUSH
48516: LD_INT 29
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 30
48525: PUSH
48526: LD_INT 30
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: LIST
48537: PPUSH
48538: CALL_OW 72
48542: ST_TO_ADDR
// if tmp then
48543: LD_VAR 0 19
48547: IFFALSE 48595
// for i in tmp do
48549: LD_ADDR_VAR 0 8
48553: PUSH
48554: LD_VAR 0 19
48558: PUSH
48559: FOR_IN
48560: IFFALSE 48593
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48562: LD_VAR 0 8
48566: PPUSH
48567: CALL_OW 250
48571: PPUSH
48572: LD_VAR 0 8
48576: PPUSH
48577: CALL_OW 251
48581: PPUSH
48582: LD_VAR 0 16
48586: PPUSH
48587: CALL_OW 441
48591: GO 48559
48593: POP
48594: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48595: LD_VAR 0 18
48599: PPUSH
48600: LD_INT 2
48602: PUSH
48603: LD_INT 30
48605: PUSH
48606: LD_INT 32
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 30
48615: PUSH
48616: LD_INT 33
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: LIST
48627: PPUSH
48628: CALL_OW 72
48632: IFFALSE 48720
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48634: LD_ADDR_VAR 0 8
48638: PUSH
48639: LD_VAR 0 18
48643: PPUSH
48644: LD_INT 2
48646: PUSH
48647: LD_INT 30
48649: PUSH
48650: LD_INT 32
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 30
48659: PUSH
48660: LD_INT 33
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: LIST
48671: PPUSH
48672: CALL_OW 72
48676: PUSH
48677: FOR_IN
48678: IFFALSE 48718
// begin if not GetBWeapon ( i ) then
48680: LD_VAR 0 8
48684: PPUSH
48685: CALL_OW 269
48689: NOT
48690: IFFALSE 48716
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48692: LD_VAR 0 8
48696: PPUSH
48697: LD_VAR 0 8
48701: PPUSH
48702: LD_VAR 0 2
48706: PPUSH
48707: CALL 49966 0 2
48711: PPUSH
48712: CALL_OW 431
// end ;
48716: GO 48677
48718: POP
48719: POP
// end ; for i = 1 to personel do
48720: LD_ADDR_VAR 0 8
48724: PUSH
48725: DOUBLE
48726: LD_INT 1
48728: DEC
48729: ST_TO_ADDR
48730: LD_VAR 0 6
48734: PUSH
48735: FOR_TO
48736: IFFALSE 49800
// begin if i > 4 then
48738: LD_VAR 0 8
48742: PUSH
48743: LD_INT 4
48745: GREATER
48746: IFFALSE 48750
// break ;
48748: GO 49800
// case i of 1 :
48750: LD_VAR 0 8
48754: PUSH
48755: LD_INT 1
48757: DOUBLE
48758: EQUAL
48759: IFTRUE 48763
48761: GO 48843
48763: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48764: LD_ADDR_VAR 0 12
48768: PUSH
48769: LD_VAR 0 18
48773: PPUSH
48774: LD_INT 22
48776: PUSH
48777: LD_VAR 0 16
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 58
48788: PUSH
48789: EMPTY
48790: LIST
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: LD_INT 30
48797: PUSH
48798: LD_INT 32
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 30
48807: PUSH
48808: LD_INT 4
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 30
48817: PUSH
48818: LD_INT 5
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: LIST
48835: PPUSH
48836: CALL_OW 72
48840: ST_TO_ADDR
48841: GO 49065
48843: LD_INT 2
48845: DOUBLE
48846: EQUAL
48847: IFTRUE 48851
48849: GO 48913
48851: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48852: LD_ADDR_VAR 0 12
48856: PUSH
48857: LD_VAR 0 18
48861: PPUSH
48862: LD_INT 22
48864: PUSH
48865: LD_VAR 0 16
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: LD_INT 30
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 30
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: LIST
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PPUSH
48906: CALL_OW 72
48910: ST_TO_ADDR
48911: GO 49065
48913: LD_INT 3
48915: DOUBLE
48916: EQUAL
48917: IFTRUE 48921
48919: GO 48983
48921: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48922: LD_ADDR_VAR 0 12
48926: PUSH
48927: LD_VAR 0 18
48931: PPUSH
48932: LD_INT 22
48934: PUSH
48935: LD_VAR 0 16
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 2
48946: PUSH
48947: LD_INT 30
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 30
48959: PUSH
48960: LD_INT 3
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: LIST
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PPUSH
48976: CALL_OW 72
48980: ST_TO_ADDR
48981: GO 49065
48983: LD_INT 4
48985: DOUBLE
48986: EQUAL
48987: IFTRUE 48991
48989: GO 49064
48991: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48992: LD_ADDR_VAR 0 12
48996: PUSH
48997: LD_VAR 0 18
49001: PPUSH
49002: LD_INT 22
49004: PUSH
49005: LD_VAR 0 16
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: LD_INT 30
49019: PUSH
49020: LD_INT 6
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 30
49029: PUSH
49030: LD_INT 7
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 30
49039: PUSH
49040: LD_INT 8
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PPUSH
49057: CALL_OW 72
49061: ST_TO_ADDR
49062: GO 49065
49064: POP
// if i = 1 then
49065: LD_VAR 0 8
49069: PUSH
49070: LD_INT 1
49072: EQUAL
49073: IFFALSE 49184
// begin tmp := [ ] ;
49075: LD_ADDR_VAR 0 19
49079: PUSH
49080: EMPTY
49081: ST_TO_ADDR
// for j in f do
49082: LD_ADDR_VAR 0 9
49086: PUSH
49087: LD_VAR 0 12
49091: PUSH
49092: FOR_IN
49093: IFFALSE 49166
// if GetBType ( j ) = b_bunker then
49095: LD_VAR 0 9
49099: PPUSH
49100: CALL_OW 266
49104: PUSH
49105: LD_INT 32
49107: EQUAL
49108: IFFALSE 49135
// tmp := Insert ( tmp , 1 , j ) else
49110: LD_ADDR_VAR 0 19
49114: PUSH
49115: LD_VAR 0 19
49119: PPUSH
49120: LD_INT 1
49122: PPUSH
49123: LD_VAR 0 9
49127: PPUSH
49128: CALL_OW 2
49132: ST_TO_ADDR
49133: GO 49164
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49135: LD_ADDR_VAR 0 19
49139: PUSH
49140: LD_VAR 0 19
49144: PPUSH
49145: LD_VAR 0 19
49149: PUSH
49150: LD_INT 1
49152: PLUS
49153: PPUSH
49154: LD_VAR 0 9
49158: PPUSH
49159: CALL_OW 2
49163: ST_TO_ADDR
49164: GO 49092
49166: POP
49167: POP
// if tmp then
49168: LD_VAR 0 19
49172: IFFALSE 49184
// f := tmp ;
49174: LD_ADDR_VAR 0 12
49178: PUSH
49179: LD_VAR 0 19
49183: ST_TO_ADDR
// end ; x := personel [ i ] ;
49184: LD_ADDR_VAR 0 13
49188: PUSH
49189: LD_VAR 0 6
49193: PUSH
49194: LD_VAR 0 8
49198: ARRAY
49199: ST_TO_ADDR
// if x = - 1 then
49200: LD_VAR 0 13
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: EQUAL
49209: IFFALSE 49418
// begin for j in f do
49211: LD_ADDR_VAR 0 9
49215: PUSH
49216: LD_VAR 0 12
49220: PUSH
49221: FOR_IN
49222: IFFALSE 49414
// repeat InitHc ;
49224: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49228: LD_VAR 0 9
49232: PPUSH
49233: CALL_OW 266
49237: PUSH
49238: LD_INT 5
49240: EQUAL
49241: IFFALSE 49311
// begin if UnitsInside ( j ) < 3 then
49243: LD_VAR 0 9
49247: PPUSH
49248: CALL_OW 313
49252: PUSH
49253: LD_INT 3
49255: LESS
49256: IFFALSE 49292
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49258: LD_INT 0
49260: PPUSH
49261: LD_INT 5
49263: PUSH
49264: LD_INT 8
49266: PUSH
49267: LD_INT 9
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: LIST
49274: PUSH
49275: LD_VAR 0 17
49279: ARRAY
49280: PPUSH
49281: LD_VAR 0 4
49285: PPUSH
49286: CALL_OW 380
49290: GO 49309
// PrepareHuman ( false , i , skill ) ;
49292: LD_INT 0
49294: PPUSH
49295: LD_VAR 0 8
49299: PPUSH
49300: LD_VAR 0 4
49304: PPUSH
49305: CALL_OW 380
// end else
49309: GO 49328
// PrepareHuman ( false , i , skill ) ;
49311: LD_INT 0
49313: PPUSH
49314: LD_VAR 0 8
49318: PPUSH
49319: LD_VAR 0 4
49323: PPUSH
49324: CALL_OW 380
// un := CreateHuman ;
49328: LD_ADDR_VAR 0 14
49332: PUSH
49333: CALL_OW 44
49337: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49338: LD_ADDR_VAR 0 7
49342: PUSH
49343: LD_VAR 0 7
49347: PPUSH
49348: LD_INT 1
49350: PPUSH
49351: LD_VAR 0 14
49355: PPUSH
49356: CALL_OW 2
49360: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49361: LD_VAR 0 14
49365: PPUSH
49366: LD_VAR 0 9
49370: PPUSH
49371: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49375: LD_VAR 0 9
49379: PPUSH
49380: CALL_OW 313
49384: PUSH
49385: LD_INT 6
49387: EQUAL
49388: PUSH
49389: LD_VAR 0 9
49393: PPUSH
49394: CALL_OW 266
49398: PUSH
49399: LD_INT 32
49401: PUSH
49402: LD_INT 31
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: IN
49409: OR
49410: IFFALSE 49224
49412: GO 49221
49414: POP
49415: POP
// end else
49416: GO 49798
// for j = 1 to x do
49418: LD_ADDR_VAR 0 9
49422: PUSH
49423: DOUBLE
49424: LD_INT 1
49426: DEC
49427: ST_TO_ADDR
49428: LD_VAR 0 13
49432: PUSH
49433: FOR_TO
49434: IFFALSE 49796
// begin InitHc ;
49436: CALL_OW 19
// if not f then
49440: LD_VAR 0 12
49444: NOT
49445: IFFALSE 49534
// begin PrepareHuman ( false , i , skill ) ;
49447: LD_INT 0
49449: PPUSH
49450: LD_VAR 0 8
49454: PPUSH
49455: LD_VAR 0 4
49459: PPUSH
49460: CALL_OW 380
// un := CreateHuman ;
49464: LD_ADDR_VAR 0 14
49468: PUSH
49469: CALL_OW 44
49473: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49474: LD_ADDR_VAR 0 7
49478: PUSH
49479: LD_VAR 0 7
49483: PPUSH
49484: LD_INT 1
49486: PPUSH
49487: LD_VAR 0 14
49491: PPUSH
49492: CALL_OW 2
49496: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49497: LD_VAR 0 14
49501: PPUSH
49502: LD_VAR 0 1
49506: PPUSH
49507: CALL_OW 250
49511: PPUSH
49512: LD_VAR 0 1
49516: PPUSH
49517: CALL_OW 251
49521: PPUSH
49522: LD_INT 10
49524: PPUSH
49525: LD_INT 0
49527: PPUSH
49528: CALL_OW 50
// continue ;
49532: GO 49433
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49534: LD_VAR 0 12
49538: PUSH
49539: LD_INT 1
49541: ARRAY
49542: PPUSH
49543: CALL_OW 313
49547: PUSH
49548: LD_VAR 0 12
49552: PUSH
49553: LD_INT 1
49555: ARRAY
49556: PPUSH
49557: CALL_OW 266
49561: PUSH
49562: LD_INT 32
49564: PUSH
49565: LD_INT 31
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: IN
49572: AND
49573: PUSH
49574: LD_VAR 0 12
49578: PUSH
49579: LD_INT 1
49581: ARRAY
49582: PPUSH
49583: CALL_OW 313
49587: PUSH
49588: LD_INT 6
49590: EQUAL
49591: OR
49592: IFFALSE 49612
// f := Delete ( f , 1 ) ;
49594: LD_ADDR_VAR 0 12
49598: PUSH
49599: LD_VAR 0 12
49603: PPUSH
49604: LD_INT 1
49606: PPUSH
49607: CALL_OW 3
49611: ST_TO_ADDR
// if not f then
49612: LD_VAR 0 12
49616: NOT
49617: IFFALSE 49635
// begin x := x + 2 ;
49619: LD_ADDR_VAR 0 13
49623: PUSH
49624: LD_VAR 0 13
49628: PUSH
49629: LD_INT 2
49631: PLUS
49632: ST_TO_ADDR
// continue ;
49633: GO 49433
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49635: LD_VAR 0 12
49639: PUSH
49640: LD_INT 1
49642: ARRAY
49643: PPUSH
49644: CALL_OW 266
49648: PUSH
49649: LD_INT 5
49651: EQUAL
49652: IFFALSE 49726
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49654: LD_VAR 0 12
49658: PUSH
49659: LD_INT 1
49661: ARRAY
49662: PPUSH
49663: CALL_OW 313
49667: PUSH
49668: LD_INT 3
49670: LESS
49671: IFFALSE 49707
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49673: LD_INT 0
49675: PPUSH
49676: LD_INT 5
49678: PUSH
49679: LD_INT 8
49681: PUSH
49682: LD_INT 9
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: LIST
49689: PUSH
49690: LD_VAR 0 17
49694: ARRAY
49695: PPUSH
49696: LD_VAR 0 4
49700: PPUSH
49701: CALL_OW 380
49705: GO 49724
// PrepareHuman ( false , i , skill ) ;
49707: LD_INT 0
49709: PPUSH
49710: LD_VAR 0 8
49714: PPUSH
49715: LD_VAR 0 4
49719: PPUSH
49720: CALL_OW 380
// end else
49724: GO 49743
// PrepareHuman ( false , i , skill ) ;
49726: LD_INT 0
49728: PPUSH
49729: LD_VAR 0 8
49733: PPUSH
49734: LD_VAR 0 4
49738: PPUSH
49739: CALL_OW 380
// un := CreateHuman ;
49743: LD_ADDR_VAR 0 14
49747: PUSH
49748: CALL_OW 44
49752: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49753: LD_ADDR_VAR 0 7
49757: PUSH
49758: LD_VAR 0 7
49762: PPUSH
49763: LD_INT 1
49765: PPUSH
49766: LD_VAR 0 14
49770: PPUSH
49771: CALL_OW 2
49775: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49776: LD_VAR 0 14
49780: PPUSH
49781: LD_VAR 0 12
49785: PUSH
49786: LD_INT 1
49788: ARRAY
49789: PPUSH
49790: CALL_OW 52
// end ;
49794: GO 49433
49796: POP
49797: POP
// end ;
49798: GO 48735
49800: POP
49801: POP
// result := result ^ buildings ;
49802: LD_ADDR_VAR 0 7
49806: PUSH
49807: LD_VAR 0 7
49811: PUSH
49812: LD_VAR 0 18
49816: ADD
49817: ST_TO_ADDR
// end else
49818: GO 49961
// begin for i = 1 to personel do
49820: LD_ADDR_VAR 0 8
49824: PUSH
49825: DOUBLE
49826: LD_INT 1
49828: DEC
49829: ST_TO_ADDR
49830: LD_VAR 0 6
49834: PUSH
49835: FOR_TO
49836: IFFALSE 49959
// begin if i > 4 then
49838: LD_VAR 0 8
49842: PUSH
49843: LD_INT 4
49845: GREATER
49846: IFFALSE 49850
// break ;
49848: GO 49959
// x := personel [ i ] ;
49850: LD_ADDR_VAR 0 13
49854: PUSH
49855: LD_VAR 0 6
49859: PUSH
49860: LD_VAR 0 8
49864: ARRAY
49865: ST_TO_ADDR
// if x = - 1 then
49866: LD_VAR 0 13
49870: PUSH
49871: LD_INT 1
49873: NEG
49874: EQUAL
49875: IFFALSE 49879
// continue ;
49877: GO 49835
// PrepareHuman ( false , i , skill ) ;
49879: LD_INT 0
49881: PPUSH
49882: LD_VAR 0 8
49886: PPUSH
49887: LD_VAR 0 4
49891: PPUSH
49892: CALL_OW 380
// un := CreateHuman ;
49896: LD_ADDR_VAR 0 14
49900: PUSH
49901: CALL_OW 44
49905: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49906: LD_VAR 0 14
49910: PPUSH
49911: LD_VAR 0 1
49915: PPUSH
49916: CALL_OW 250
49920: PPUSH
49921: LD_VAR 0 1
49925: PPUSH
49926: CALL_OW 251
49930: PPUSH
49931: LD_INT 10
49933: PPUSH
49934: LD_INT 0
49936: PPUSH
49937: CALL_OW 50
// result := result ^ un ;
49941: LD_ADDR_VAR 0 7
49945: PUSH
49946: LD_VAR 0 7
49950: PUSH
49951: LD_VAR 0 14
49955: ADD
49956: ST_TO_ADDR
// end ;
49957: GO 49835
49959: POP
49960: POP
// end ; end ;
49961: LD_VAR 0 7
49965: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49966: LD_INT 0
49968: PPUSH
49969: PPUSH
49970: PPUSH
49971: PPUSH
49972: PPUSH
49973: PPUSH
49974: PPUSH
49975: PPUSH
49976: PPUSH
49977: PPUSH
49978: PPUSH
49979: PPUSH
49980: PPUSH
49981: PPUSH
49982: PPUSH
49983: PPUSH
// result := false ;
49984: LD_ADDR_VAR 0 3
49988: PUSH
49989: LD_INT 0
49991: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49992: LD_VAR 0 1
49996: NOT
49997: PUSH
49998: LD_VAR 0 1
50002: PPUSH
50003: CALL_OW 266
50007: PUSH
50008: LD_INT 32
50010: PUSH
50011: LD_INT 33
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: IN
50018: NOT
50019: OR
50020: IFFALSE 50024
// exit ;
50022: GO 51133
// nat := GetNation ( tower ) ;
50024: LD_ADDR_VAR 0 12
50028: PUSH
50029: LD_VAR 0 1
50033: PPUSH
50034: CALL_OW 248
50038: ST_TO_ADDR
// side := GetSide ( tower ) ;
50039: LD_ADDR_VAR 0 16
50043: PUSH
50044: LD_VAR 0 1
50048: PPUSH
50049: CALL_OW 255
50053: ST_TO_ADDR
// x := GetX ( tower ) ;
50054: LD_ADDR_VAR 0 10
50058: PUSH
50059: LD_VAR 0 1
50063: PPUSH
50064: CALL_OW 250
50068: ST_TO_ADDR
// y := GetY ( tower ) ;
50069: LD_ADDR_VAR 0 11
50073: PUSH
50074: LD_VAR 0 1
50078: PPUSH
50079: CALL_OW 251
50083: ST_TO_ADDR
// if not x or not y then
50084: LD_VAR 0 10
50088: NOT
50089: PUSH
50090: LD_VAR 0 11
50094: NOT
50095: OR
50096: IFFALSE 50100
// exit ;
50098: GO 51133
// weapon := 0 ;
50100: LD_ADDR_VAR 0 18
50104: PUSH
50105: LD_INT 0
50107: ST_TO_ADDR
// fac_list := [ ] ;
50108: LD_ADDR_VAR 0 17
50112: PUSH
50113: EMPTY
50114: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50115: LD_ADDR_VAR 0 6
50119: PUSH
50120: LD_VAR 0 1
50124: PPUSH
50125: CALL_OW 274
50129: PPUSH
50130: LD_VAR 0 2
50134: PPUSH
50135: LD_INT 0
50137: PPUSH
50138: CALL 47704 0 3
50142: PPUSH
50143: LD_INT 30
50145: PUSH
50146: LD_INT 3
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PPUSH
50153: CALL_OW 72
50157: ST_TO_ADDR
// if not factories then
50158: LD_VAR 0 6
50162: NOT
50163: IFFALSE 50167
// exit ;
50165: GO 51133
// for i in factories do
50167: LD_ADDR_VAR 0 8
50171: PUSH
50172: LD_VAR 0 6
50176: PUSH
50177: FOR_IN
50178: IFFALSE 50203
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50180: LD_ADDR_VAR 0 17
50184: PUSH
50185: LD_VAR 0 17
50189: PUSH
50190: LD_VAR 0 8
50194: PPUSH
50195: CALL_OW 478
50199: UNION
50200: ST_TO_ADDR
50201: GO 50177
50203: POP
50204: POP
// if not fac_list then
50205: LD_VAR 0 17
50209: NOT
50210: IFFALSE 50214
// exit ;
50212: GO 51133
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50214: LD_ADDR_VAR 0 5
50218: PUSH
50219: LD_INT 4
50221: PUSH
50222: LD_INT 5
50224: PUSH
50225: LD_INT 9
50227: PUSH
50228: LD_INT 10
50230: PUSH
50231: LD_INT 6
50233: PUSH
50234: LD_INT 7
50236: PUSH
50237: LD_INT 11
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 27
50251: PUSH
50252: LD_INT 28
50254: PUSH
50255: LD_INT 26
50257: PUSH
50258: LD_INT 30
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 43
50269: PUSH
50270: LD_INT 44
50272: PUSH
50273: LD_INT 46
50275: PUSH
50276: LD_INT 45
50278: PUSH
50279: LD_INT 47
50281: PUSH
50282: LD_INT 49
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: LIST
50297: PUSH
50298: LD_VAR 0 12
50302: ARRAY
50303: ST_TO_ADDR
// list := list isect fac_list ;
50304: LD_ADDR_VAR 0 5
50308: PUSH
50309: LD_VAR 0 5
50313: PUSH
50314: LD_VAR 0 17
50318: ISECT
50319: ST_TO_ADDR
// if not list then
50320: LD_VAR 0 5
50324: NOT
50325: IFFALSE 50329
// exit ;
50327: GO 51133
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50329: LD_VAR 0 12
50333: PUSH
50334: LD_INT 3
50336: EQUAL
50337: PUSH
50338: LD_INT 49
50340: PUSH
50341: LD_VAR 0 5
50345: IN
50346: AND
50347: PUSH
50348: LD_INT 31
50350: PPUSH
50351: LD_VAR 0 16
50355: PPUSH
50356: CALL_OW 321
50360: PUSH
50361: LD_INT 2
50363: EQUAL
50364: AND
50365: IFFALSE 50425
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50367: LD_INT 22
50369: PUSH
50370: LD_VAR 0 16
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 35
50381: PUSH
50382: LD_INT 49
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 91
50391: PUSH
50392: LD_VAR 0 1
50396: PUSH
50397: LD_INT 10
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: LIST
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: LIST
50409: PPUSH
50410: CALL_OW 69
50414: NOT
50415: IFFALSE 50425
// weapon := ru_time_lapser ;
50417: LD_ADDR_VAR 0 18
50421: PUSH
50422: LD_INT 49
50424: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50425: LD_VAR 0 12
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: IN
50440: PUSH
50441: LD_INT 11
50443: PUSH
50444: LD_VAR 0 5
50448: IN
50449: PUSH
50450: LD_INT 30
50452: PUSH
50453: LD_VAR 0 5
50457: IN
50458: OR
50459: AND
50460: PUSH
50461: LD_INT 6
50463: PPUSH
50464: LD_VAR 0 16
50468: PPUSH
50469: CALL_OW 321
50473: PUSH
50474: LD_INT 2
50476: EQUAL
50477: AND
50478: IFFALSE 50643
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50480: LD_INT 22
50482: PUSH
50483: LD_VAR 0 16
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 2
50494: PUSH
50495: LD_INT 35
50497: PUSH
50498: LD_INT 11
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 35
50507: PUSH
50508: LD_INT 30
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 91
50522: PUSH
50523: LD_VAR 0 1
50527: PUSH
50528: LD_INT 18
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: LIST
50540: PPUSH
50541: CALL_OW 69
50545: NOT
50546: PUSH
50547: LD_INT 22
50549: PUSH
50550: LD_VAR 0 16
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: PUSH
50562: LD_INT 30
50564: PUSH
50565: LD_INT 32
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 30
50574: PUSH
50575: LD_INT 33
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 91
50589: PUSH
50590: LD_VAR 0 1
50594: PUSH
50595: LD_INT 12
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: LIST
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: LIST
50607: PUSH
50608: EMPTY
50609: LIST
50610: PPUSH
50611: CALL_OW 69
50615: PUSH
50616: LD_INT 2
50618: GREATER
50619: AND
50620: IFFALSE 50643
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50622: LD_ADDR_VAR 0 18
50626: PUSH
50627: LD_INT 11
50629: PUSH
50630: LD_INT 30
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_VAR 0 12
50641: ARRAY
50642: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50643: LD_VAR 0 18
50647: NOT
50648: PUSH
50649: LD_INT 40
50651: PPUSH
50652: LD_VAR 0 16
50656: PPUSH
50657: CALL_OW 321
50661: PUSH
50662: LD_INT 2
50664: EQUAL
50665: AND
50666: PUSH
50667: LD_INT 7
50669: PUSH
50670: LD_VAR 0 5
50674: IN
50675: PUSH
50676: LD_INT 28
50678: PUSH
50679: LD_VAR 0 5
50683: IN
50684: OR
50685: PUSH
50686: LD_INT 45
50688: PUSH
50689: LD_VAR 0 5
50693: IN
50694: OR
50695: AND
50696: IFFALSE 50950
// begin hex := GetHexInfo ( x , y ) ;
50698: LD_ADDR_VAR 0 4
50702: PUSH
50703: LD_VAR 0 10
50707: PPUSH
50708: LD_VAR 0 11
50712: PPUSH
50713: CALL_OW 546
50717: ST_TO_ADDR
// if hex [ 1 ] then
50718: LD_VAR 0 4
50722: PUSH
50723: LD_INT 1
50725: ARRAY
50726: IFFALSE 50730
// exit ;
50728: GO 51133
// height := hex [ 2 ] ;
50730: LD_ADDR_VAR 0 15
50734: PUSH
50735: LD_VAR 0 4
50739: PUSH
50740: LD_INT 2
50742: ARRAY
50743: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50744: LD_ADDR_VAR 0 14
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: LD_INT 3
50757: PUSH
50758: LD_INT 5
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: ST_TO_ADDR
// for i in tmp do
50767: LD_ADDR_VAR 0 8
50771: PUSH
50772: LD_VAR 0 14
50776: PUSH
50777: FOR_IN
50778: IFFALSE 50948
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50780: LD_ADDR_VAR 0 9
50784: PUSH
50785: LD_VAR 0 10
50789: PPUSH
50790: LD_VAR 0 8
50794: PPUSH
50795: LD_INT 5
50797: PPUSH
50798: CALL_OW 272
50802: PUSH
50803: LD_VAR 0 11
50807: PPUSH
50808: LD_VAR 0 8
50812: PPUSH
50813: LD_INT 5
50815: PPUSH
50816: CALL_OW 273
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50825: LD_VAR 0 9
50829: PUSH
50830: LD_INT 1
50832: ARRAY
50833: PPUSH
50834: LD_VAR 0 9
50838: PUSH
50839: LD_INT 2
50841: ARRAY
50842: PPUSH
50843: CALL_OW 488
50847: IFFALSE 50946
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50849: LD_ADDR_VAR 0 4
50853: PUSH
50854: LD_VAR 0 9
50858: PUSH
50859: LD_INT 1
50861: ARRAY
50862: PPUSH
50863: LD_VAR 0 9
50867: PUSH
50868: LD_INT 2
50870: ARRAY
50871: PPUSH
50872: CALL_OW 546
50876: ST_TO_ADDR
// if hex [ 1 ] then
50877: LD_VAR 0 4
50881: PUSH
50882: LD_INT 1
50884: ARRAY
50885: IFFALSE 50889
// continue ;
50887: GO 50777
// h := hex [ 2 ] ;
50889: LD_ADDR_VAR 0 13
50893: PUSH
50894: LD_VAR 0 4
50898: PUSH
50899: LD_INT 2
50901: ARRAY
50902: ST_TO_ADDR
// if h + 7 < height then
50903: LD_VAR 0 13
50907: PUSH
50908: LD_INT 7
50910: PLUS
50911: PUSH
50912: LD_VAR 0 15
50916: LESS
50917: IFFALSE 50946
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50919: LD_ADDR_VAR 0 18
50923: PUSH
50924: LD_INT 7
50926: PUSH
50927: LD_INT 28
50929: PUSH
50930: LD_INT 45
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: LIST
50937: PUSH
50938: LD_VAR 0 12
50942: ARRAY
50943: ST_TO_ADDR
// break ;
50944: GO 50948
// end ; end ; end ;
50946: GO 50777
50948: POP
50949: POP
// end ; if not weapon then
50950: LD_VAR 0 18
50954: NOT
50955: IFFALSE 51015
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50957: LD_ADDR_VAR 0 5
50961: PUSH
50962: LD_VAR 0 5
50966: PUSH
50967: LD_INT 11
50969: PUSH
50970: LD_INT 30
50972: PUSH
50973: LD_INT 49
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: LIST
50980: DIFF
50981: ST_TO_ADDR
// if not list then
50982: LD_VAR 0 5
50986: NOT
50987: IFFALSE 50991
// exit ;
50989: GO 51133
// weapon := list [ rand ( 1 , list ) ] ;
50991: LD_ADDR_VAR 0 18
50995: PUSH
50996: LD_VAR 0 5
51000: PUSH
51001: LD_INT 1
51003: PPUSH
51004: LD_VAR 0 5
51008: PPUSH
51009: CALL_OW 12
51013: ARRAY
51014: ST_TO_ADDR
// end ; if weapon then
51015: LD_VAR 0 18
51019: IFFALSE 51133
// begin tmp := CostOfWeapon ( weapon ) ;
51021: LD_ADDR_VAR 0 14
51025: PUSH
51026: LD_VAR 0 18
51030: PPUSH
51031: CALL_OW 451
51035: ST_TO_ADDR
// j := GetBase ( tower ) ;
51036: LD_ADDR_VAR 0 9
51040: PUSH
51041: LD_VAR 0 1
51045: PPUSH
51046: CALL_OW 274
51050: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51051: LD_VAR 0 9
51055: PPUSH
51056: LD_INT 1
51058: PPUSH
51059: CALL_OW 275
51063: PUSH
51064: LD_VAR 0 14
51068: PUSH
51069: LD_INT 1
51071: ARRAY
51072: GREATEREQUAL
51073: PUSH
51074: LD_VAR 0 9
51078: PPUSH
51079: LD_INT 2
51081: PPUSH
51082: CALL_OW 275
51086: PUSH
51087: LD_VAR 0 14
51091: PUSH
51092: LD_INT 2
51094: ARRAY
51095: GREATEREQUAL
51096: AND
51097: PUSH
51098: LD_VAR 0 9
51102: PPUSH
51103: LD_INT 3
51105: PPUSH
51106: CALL_OW 275
51110: PUSH
51111: LD_VAR 0 14
51115: PUSH
51116: LD_INT 3
51118: ARRAY
51119: GREATEREQUAL
51120: AND
51121: IFFALSE 51133
// result := weapon ;
51123: LD_ADDR_VAR 0 3
51127: PUSH
51128: LD_VAR 0 18
51132: ST_TO_ADDR
// end ; end ;
51133: LD_VAR 0 3
51137: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51138: LD_INT 0
51140: PPUSH
51141: PPUSH
// result := true ;
51142: LD_ADDR_VAR 0 3
51146: PUSH
51147: LD_INT 1
51149: ST_TO_ADDR
// if array1 = array2 then
51150: LD_VAR 0 1
51154: PUSH
51155: LD_VAR 0 2
51159: EQUAL
51160: IFFALSE 51220
// begin for i = 1 to array1 do
51162: LD_ADDR_VAR 0 4
51166: PUSH
51167: DOUBLE
51168: LD_INT 1
51170: DEC
51171: ST_TO_ADDR
51172: LD_VAR 0 1
51176: PUSH
51177: FOR_TO
51178: IFFALSE 51216
// if array1 [ i ] <> array2 [ i ] then
51180: LD_VAR 0 1
51184: PUSH
51185: LD_VAR 0 4
51189: ARRAY
51190: PUSH
51191: LD_VAR 0 2
51195: PUSH
51196: LD_VAR 0 4
51200: ARRAY
51201: NONEQUAL
51202: IFFALSE 51214
// begin result := false ;
51204: LD_ADDR_VAR 0 3
51208: PUSH
51209: LD_INT 0
51211: ST_TO_ADDR
// break ;
51212: GO 51216
// end ;
51214: GO 51177
51216: POP
51217: POP
// end else
51218: GO 51228
// result := false ;
51220: LD_ADDR_VAR 0 3
51224: PUSH
51225: LD_INT 0
51227: ST_TO_ADDR
// end ;
51228: LD_VAR 0 3
51232: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51233: LD_INT 0
51235: PPUSH
51236: PPUSH
// if not array1 or not array2 then
51237: LD_VAR 0 1
51241: NOT
51242: PUSH
51243: LD_VAR 0 2
51247: NOT
51248: OR
51249: IFFALSE 51253
// exit ;
51251: GO 51317
// result := true ;
51253: LD_ADDR_VAR 0 3
51257: PUSH
51258: LD_INT 1
51260: ST_TO_ADDR
// for i = 1 to array1 do
51261: LD_ADDR_VAR 0 4
51265: PUSH
51266: DOUBLE
51267: LD_INT 1
51269: DEC
51270: ST_TO_ADDR
51271: LD_VAR 0 1
51275: PUSH
51276: FOR_TO
51277: IFFALSE 51315
// if array1 [ i ] <> array2 [ i ] then
51279: LD_VAR 0 1
51283: PUSH
51284: LD_VAR 0 4
51288: ARRAY
51289: PUSH
51290: LD_VAR 0 2
51294: PUSH
51295: LD_VAR 0 4
51299: ARRAY
51300: NONEQUAL
51301: IFFALSE 51313
// begin result := false ;
51303: LD_ADDR_VAR 0 3
51307: PUSH
51308: LD_INT 0
51310: ST_TO_ADDR
// break ;
51311: GO 51315
// end ;
51313: GO 51276
51315: POP
51316: POP
// end ;
51317: LD_VAR 0 3
51321: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51322: LD_INT 0
51324: PPUSH
51325: PPUSH
51326: PPUSH
// pom := GetBase ( fac ) ;
51327: LD_ADDR_VAR 0 5
51331: PUSH
51332: LD_VAR 0 1
51336: PPUSH
51337: CALL_OW 274
51341: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51342: LD_ADDR_VAR 0 4
51346: PUSH
51347: LD_VAR 0 2
51351: PUSH
51352: LD_INT 1
51354: ARRAY
51355: PPUSH
51356: LD_VAR 0 2
51360: PUSH
51361: LD_INT 2
51363: ARRAY
51364: PPUSH
51365: LD_VAR 0 2
51369: PUSH
51370: LD_INT 3
51372: ARRAY
51373: PPUSH
51374: LD_VAR 0 2
51378: PUSH
51379: LD_INT 4
51381: ARRAY
51382: PPUSH
51383: CALL_OW 449
51387: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51388: LD_ADDR_VAR 0 3
51392: PUSH
51393: LD_VAR 0 5
51397: PPUSH
51398: LD_INT 1
51400: PPUSH
51401: CALL_OW 275
51405: PUSH
51406: LD_VAR 0 4
51410: PUSH
51411: LD_INT 1
51413: ARRAY
51414: GREATEREQUAL
51415: PUSH
51416: LD_VAR 0 5
51420: PPUSH
51421: LD_INT 2
51423: PPUSH
51424: CALL_OW 275
51428: PUSH
51429: LD_VAR 0 4
51433: PUSH
51434: LD_INT 2
51436: ARRAY
51437: GREATEREQUAL
51438: AND
51439: PUSH
51440: LD_VAR 0 5
51444: PPUSH
51445: LD_INT 3
51447: PPUSH
51448: CALL_OW 275
51452: PUSH
51453: LD_VAR 0 4
51457: PUSH
51458: LD_INT 3
51460: ARRAY
51461: GREATEREQUAL
51462: AND
51463: ST_TO_ADDR
// end ;
51464: LD_VAR 0 3
51468: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51469: LD_INT 0
51471: PPUSH
51472: PPUSH
51473: PPUSH
51474: PPUSH
// pom := GetBase ( building ) ;
51475: LD_ADDR_VAR 0 3
51479: PUSH
51480: LD_VAR 0 1
51484: PPUSH
51485: CALL_OW 274
51489: ST_TO_ADDR
// if not pom then
51490: LD_VAR 0 3
51494: NOT
51495: IFFALSE 51499
// exit ;
51497: GO 51669
// btype := GetBType ( building ) ;
51499: LD_ADDR_VAR 0 5
51503: PUSH
51504: LD_VAR 0 1
51508: PPUSH
51509: CALL_OW 266
51513: ST_TO_ADDR
// if btype = b_armoury then
51514: LD_VAR 0 5
51518: PUSH
51519: LD_INT 4
51521: EQUAL
51522: IFFALSE 51532
// btype := b_barracks ;
51524: LD_ADDR_VAR 0 5
51528: PUSH
51529: LD_INT 5
51531: ST_TO_ADDR
// if btype = b_depot then
51532: LD_VAR 0 5
51536: PUSH
51537: LD_INT 0
51539: EQUAL
51540: IFFALSE 51550
// btype := b_warehouse ;
51542: LD_ADDR_VAR 0 5
51546: PUSH
51547: LD_INT 1
51549: ST_TO_ADDR
// if btype = b_workshop then
51550: LD_VAR 0 5
51554: PUSH
51555: LD_INT 2
51557: EQUAL
51558: IFFALSE 51568
// btype := b_factory ;
51560: LD_ADDR_VAR 0 5
51564: PUSH
51565: LD_INT 3
51567: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51568: LD_ADDR_VAR 0 4
51572: PUSH
51573: LD_VAR 0 5
51577: PPUSH
51578: LD_VAR 0 1
51582: PPUSH
51583: CALL_OW 248
51587: PPUSH
51588: CALL_OW 450
51592: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51593: LD_ADDR_VAR 0 2
51597: PUSH
51598: LD_VAR 0 3
51602: PPUSH
51603: LD_INT 1
51605: PPUSH
51606: CALL_OW 275
51610: PUSH
51611: LD_VAR 0 4
51615: PUSH
51616: LD_INT 1
51618: ARRAY
51619: GREATEREQUAL
51620: PUSH
51621: LD_VAR 0 3
51625: PPUSH
51626: LD_INT 2
51628: PPUSH
51629: CALL_OW 275
51633: PUSH
51634: LD_VAR 0 4
51638: PUSH
51639: LD_INT 2
51641: ARRAY
51642: GREATEREQUAL
51643: AND
51644: PUSH
51645: LD_VAR 0 3
51649: PPUSH
51650: LD_INT 3
51652: PPUSH
51653: CALL_OW 275
51657: PUSH
51658: LD_VAR 0 4
51662: PUSH
51663: LD_INT 3
51665: ARRAY
51666: GREATEREQUAL
51667: AND
51668: ST_TO_ADDR
// end ;
51669: LD_VAR 0 2
51673: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51674: LD_INT 0
51676: PPUSH
51677: PPUSH
51678: PPUSH
// pom := GetBase ( building ) ;
51679: LD_ADDR_VAR 0 4
51683: PUSH
51684: LD_VAR 0 1
51688: PPUSH
51689: CALL_OW 274
51693: ST_TO_ADDR
// if not pom then
51694: LD_VAR 0 4
51698: NOT
51699: IFFALSE 51703
// exit ;
51701: GO 51804
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51703: LD_ADDR_VAR 0 5
51707: PUSH
51708: LD_VAR 0 2
51712: PPUSH
51713: LD_VAR 0 1
51717: PPUSH
51718: CALL_OW 248
51722: PPUSH
51723: CALL_OW 450
51727: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51728: LD_ADDR_VAR 0 3
51732: PUSH
51733: LD_VAR 0 4
51737: PPUSH
51738: LD_INT 1
51740: PPUSH
51741: CALL_OW 275
51745: PUSH
51746: LD_VAR 0 5
51750: PUSH
51751: LD_INT 1
51753: ARRAY
51754: GREATEREQUAL
51755: PUSH
51756: LD_VAR 0 4
51760: PPUSH
51761: LD_INT 2
51763: PPUSH
51764: CALL_OW 275
51768: PUSH
51769: LD_VAR 0 5
51773: PUSH
51774: LD_INT 2
51776: ARRAY
51777: GREATEREQUAL
51778: AND
51779: PUSH
51780: LD_VAR 0 4
51784: PPUSH
51785: LD_INT 3
51787: PPUSH
51788: CALL_OW 275
51792: PUSH
51793: LD_VAR 0 5
51797: PUSH
51798: LD_INT 3
51800: ARRAY
51801: GREATEREQUAL
51802: AND
51803: ST_TO_ADDR
// end ;
51804: LD_VAR 0 3
51808: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51809: LD_INT 0
51811: PPUSH
51812: PPUSH
51813: PPUSH
51814: PPUSH
51815: PPUSH
51816: PPUSH
51817: PPUSH
51818: PPUSH
51819: PPUSH
51820: PPUSH
51821: PPUSH
// result := false ;
51822: LD_ADDR_VAR 0 8
51826: PUSH
51827: LD_INT 0
51829: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51830: LD_VAR 0 5
51834: NOT
51835: PUSH
51836: LD_VAR 0 1
51840: NOT
51841: OR
51842: PUSH
51843: LD_VAR 0 2
51847: NOT
51848: OR
51849: PUSH
51850: LD_VAR 0 3
51854: NOT
51855: OR
51856: IFFALSE 51860
// exit ;
51858: GO 52674
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51860: LD_ADDR_VAR 0 14
51864: PUSH
51865: LD_VAR 0 1
51869: PPUSH
51870: LD_VAR 0 2
51874: PPUSH
51875: LD_VAR 0 3
51879: PPUSH
51880: LD_VAR 0 4
51884: PPUSH
51885: LD_VAR 0 5
51889: PUSH
51890: LD_INT 1
51892: ARRAY
51893: PPUSH
51894: CALL_OW 248
51898: PPUSH
51899: LD_INT 0
51901: PPUSH
51902: CALL 53907 0 6
51906: ST_TO_ADDR
// if not hexes then
51907: LD_VAR 0 14
51911: NOT
51912: IFFALSE 51916
// exit ;
51914: GO 52674
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51916: LD_ADDR_VAR 0 17
51920: PUSH
51921: LD_VAR 0 5
51925: PPUSH
51926: LD_INT 22
51928: PUSH
51929: LD_VAR 0 13
51933: PPUSH
51934: CALL_OW 255
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: LD_INT 30
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 30
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: LIST
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PPUSH
51975: CALL_OW 72
51979: ST_TO_ADDR
// for i = 1 to hexes do
51980: LD_ADDR_VAR 0 9
51984: PUSH
51985: DOUBLE
51986: LD_INT 1
51988: DEC
51989: ST_TO_ADDR
51990: LD_VAR 0 14
51994: PUSH
51995: FOR_TO
51996: IFFALSE 52672
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51998: LD_ADDR_VAR 0 13
52002: PUSH
52003: LD_VAR 0 14
52007: PUSH
52008: LD_VAR 0 9
52012: ARRAY
52013: PUSH
52014: LD_INT 1
52016: ARRAY
52017: PPUSH
52018: LD_VAR 0 14
52022: PUSH
52023: LD_VAR 0 9
52027: ARRAY
52028: PUSH
52029: LD_INT 2
52031: ARRAY
52032: PPUSH
52033: CALL_OW 428
52037: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52038: LD_VAR 0 14
52042: PUSH
52043: LD_VAR 0 9
52047: ARRAY
52048: PUSH
52049: LD_INT 1
52051: ARRAY
52052: PPUSH
52053: LD_VAR 0 14
52057: PUSH
52058: LD_VAR 0 9
52062: ARRAY
52063: PUSH
52064: LD_INT 2
52066: ARRAY
52067: PPUSH
52068: CALL_OW 351
52072: PUSH
52073: LD_VAR 0 14
52077: PUSH
52078: LD_VAR 0 9
52082: ARRAY
52083: PUSH
52084: LD_INT 1
52086: ARRAY
52087: PPUSH
52088: LD_VAR 0 14
52092: PUSH
52093: LD_VAR 0 9
52097: ARRAY
52098: PUSH
52099: LD_INT 2
52101: ARRAY
52102: PPUSH
52103: CALL_OW 488
52107: NOT
52108: OR
52109: PUSH
52110: LD_VAR 0 13
52114: PPUSH
52115: CALL_OW 247
52119: PUSH
52120: LD_INT 3
52122: EQUAL
52123: OR
52124: IFFALSE 52130
// exit ;
52126: POP
52127: POP
52128: GO 52674
// if not tmp then
52130: LD_VAR 0 13
52134: NOT
52135: IFFALSE 52139
// continue ;
52137: GO 51995
// result := true ;
52139: LD_ADDR_VAR 0 8
52143: PUSH
52144: LD_INT 1
52146: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52147: LD_VAR 0 6
52151: PUSH
52152: LD_VAR 0 13
52156: PPUSH
52157: CALL_OW 247
52161: PUSH
52162: LD_INT 2
52164: EQUAL
52165: AND
52166: PUSH
52167: LD_VAR 0 13
52171: PPUSH
52172: CALL_OW 263
52176: PUSH
52177: LD_INT 1
52179: EQUAL
52180: AND
52181: IFFALSE 52345
// begin if IsDrivenBy ( tmp ) then
52183: LD_VAR 0 13
52187: PPUSH
52188: CALL_OW 311
52192: IFFALSE 52196
// continue ;
52194: GO 51995
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52196: LD_VAR 0 6
52200: PPUSH
52201: LD_INT 3
52203: PUSH
52204: LD_INT 60
52206: PUSH
52207: EMPTY
52208: LIST
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 3
52216: PUSH
52217: LD_INT 55
52219: PUSH
52220: EMPTY
52221: LIST
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PPUSH
52231: CALL_OW 72
52235: IFFALSE 52343
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52237: LD_ADDR_VAR 0 18
52241: PUSH
52242: LD_VAR 0 6
52246: PPUSH
52247: LD_INT 3
52249: PUSH
52250: LD_INT 60
52252: PUSH
52253: EMPTY
52254: LIST
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 3
52262: PUSH
52263: LD_INT 55
52265: PUSH
52266: EMPTY
52267: LIST
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PPUSH
52277: CALL_OW 72
52281: PUSH
52282: LD_INT 1
52284: ARRAY
52285: ST_TO_ADDR
// if IsInUnit ( driver ) then
52286: LD_VAR 0 18
52290: PPUSH
52291: CALL_OW 310
52295: IFFALSE 52306
// ComExit ( driver ) ;
52297: LD_VAR 0 18
52301: PPUSH
52302: CALL 77687 0 1
// AddComEnterUnit ( driver , tmp ) ;
52306: LD_VAR 0 18
52310: PPUSH
52311: LD_VAR 0 13
52315: PPUSH
52316: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52320: LD_VAR 0 18
52324: PPUSH
52325: LD_VAR 0 7
52329: PPUSH
52330: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52334: LD_VAR 0 18
52338: PPUSH
52339: CALL_OW 181
// end ; continue ;
52343: GO 51995
// end ; if not cleaners or not tmp in cleaners then
52345: LD_VAR 0 6
52349: NOT
52350: PUSH
52351: LD_VAR 0 13
52355: PUSH
52356: LD_VAR 0 6
52360: IN
52361: NOT
52362: OR
52363: IFFALSE 52670
// begin if dep then
52365: LD_VAR 0 17
52369: IFFALSE 52505
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52371: LD_ADDR_VAR 0 16
52375: PUSH
52376: LD_VAR 0 17
52380: PUSH
52381: LD_INT 1
52383: ARRAY
52384: PPUSH
52385: CALL_OW 250
52389: PPUSH
52390: LD_VAR 0 17
52394: PUSH
52395: LD_INT 1
52397: ARRAY
52398: PPUSH
52399: CALL_OW 254
52403: PPUSH
52404: LD_INT 5
52406: PPUSH
52407: CALL_OW 272
52411: PUSH
52412: LD_VAR 0 17
52416: PUSH
52417: LD_INT 1
52419: ARRAY
52420: PPUSH
52421: CALL_OW 251
52425: PPUSH
52426: LD_VAR 0 17
52430: PUSH
52431: LD_INT 1
52433: ARRAY
52434: PPUSH
52435: CALL_OW 254
52439: PPUSH
52440: LD_INT 5
52442: PPUSH
52443: CALL_OW 273
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52452: LD_VAR 0 16
52456: PUSH
52457: LD_INT 1
52459: ARRAY
52460: PPUSH
52461: LD_VAR 0 16
52465: PUSH
52466: LD_INT 2
52468: ARRAY
52469: PPUSH
52470: CALL_OW 488
52474: IFFALSE 52505
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52476: LD_VAR 0 13
52480: PPUSH
52481: LD_VAR 0 16
52485: PUSH
52486: LD_INT 1
52488: ARRAY
52489: PPUSH
52490: LD_VAR 0 16
52494: PUSH
52495: LD_INT 2
52497: ARRAY
52498: PPUSH
52499: CALL_OW 111
// continue ;
52503: GO 51995
// end ; end ; r := GetDir ( tmp ) ;
52505: LD_ADDR_VAR 0 15
52509: PUSH
52510: LD_VAR 0 13
52514: PPUSH
52515: CALL_OW 254
52519: ST_TO_ADDR
// if r = 5 then
52520: LD_VAR 0 15
52524: PUSH
52525: LD_INT 5
52527: EQUAL
52528: IFFALSE 52538
// r := 0 ;
52530: LD_ADDR_VAR 0 15
52534: PUSH
52535: LD_INT 0
52537: ST_TO_ADDR
// for j = r to 5 do
52538: LD_ADDR_VAR 0 10
52542: PUSH
52543: DOUBLE
52544: LD_VAR 0 15
52548: DEC
52549: ST_TO_ADDR
52550: LD_INT 5
52552: PUSH
52553: FOR_TO
52554: IFFALSE 52668
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52556: LD_ADDR_VAR 0 11
52560: PUSH
52561: LD_VAR 0 13
52565: PPUSH
52566: CALL_OW 250
52570: PPUSH
52571: LD_VAR 0 10
52575: PPUSH
52576: LD_INT 2
52578: PPUSH
52579: CALL_OW 272
52583: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52584: LD_ADDR_VAR 0 12
52588: PUSH
52589: LD_VAR 0 13
52593: PPUSH
52594: CALL_OW 251
52598: PPUSH
52599: LD_VAR 0 10
52603: PPUSH
52604: LD_INT 2
52606: PPUSH
52607: CALL_OW 273
52611: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52612: LD_VAR 0 11
52616: PPUSH
52617: LD_VAR 0 12
52621: PPUSH
52622: CALL_OW 488
52626: PUSH
52627: LD_VAR 0 11
52631: PPUSH
52632: LD_VAR 0 12
52636: PPUSH
52637: CALL_OW 428
52641: NOT
52642: AND
52643: IFFALSE 52666
// begin ComMoveXY ( tmp , _x , _y ) ;
52645: LD_VAR 0 13
52649: PPUSH
52650: LD_VAR 0 11
52654: PPUSH
52655: LD_VAR 0 12
52659: PPUSH
52660: CALL_OW 111
// break ;
52664: GO 52668
// end ; end ;
52666: GO 52553
52668: POP
52669: POP
// end ; end ;
52670: GO 51995
52672: POP
52673: POP
// end ;
52674: LD_VAR 0 8
52678: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52679: LD_INT 0
52681: PPUSH
// result := true ;
52682: LD_ADDR_VAR 0 3
52686: PUSH
52687: LD_INT 1
52689: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52690: LD_VAR 0 2
52694: PUSH
52695: LD_INT 24
52697: DOUBLE
52698: EQUAL
52699: IFTRUE 52709
52701: LD_INT 33
52703: DOUBLE
52704: EQUAL
52705: IFTRUE 52709
52707: GO 52734
52709: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52710: LD_ADDR_VAR 0 3
52714: PUSH
52715: LD_INT 32
52717: PPUSH
52718: LD_VAR 0 1
52722: PPUSH
52723: CALL_OW 321
52727: PUSH
52728: LD_INT 2
52730: EQUAL
52731: ST_TO_ADDR
52732: GO 53050
52734: LD_INT 20
52736: DOUBLE
52737: EQUAL
52738: IFTRUE 52742
52740: GO 52767
52742: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52743: LD_ADDR_VAR 0 3
52747: PUSH
52748: LD_INT 6
52750: PPUSH
52751: LD_VAR 0 1
52755: PPUSH
52756: CALL_OW 321
52760: PUSH
52761: LD_INT 2
52763: EQUAL
52764: ST_TO_ADDR
52765: GO 53050
52767: LD_INT 22
52769: DOUBLE
52770: EQUAL
52771: IFTRUE 52781
52773: LD_INT 36
52775: DOUBLE
52776: EQUAL
52777: IFTRUE 52781
52779: GO 52806
52781: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52782: LD_ADDR_VAR 0 3
52786: PUSH
52787: LD_INT 15
52789: PPUSH
52790: LD_VAR 0 1
52794: PPUSH
52795: CALL_OW 321
52799: PUSH
52800: LD_INT 2
52802: EQUAL
52803: ST_TO_ADDR
52804: GO 53050
52806: LD_INT 30
52808: DOUBLE
52809: EQUAL
52810: IFTRUE 52814
52812: GO 52839
52814: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52815: LD_ADDR_VAR 0 3
52819: PUSH
52820: LD_INT 20
52822: PPUSH
52823: LD_VAR 0 1
52827: PPUSH
52828: CALL_OW 321
52832: PUSH
52833: LD_INT 2
52835: EQUAL
52836: ST_TO_ADDR
52837: GO 53050
52839: LD_INT 28
52841: DOUBLE
52842: EQUAL
52843: IFTRUE 52853
52845: LD_INT 21
52847: DOUBLE
52848: EQUAL
52849: IFTRUE 52853
52851: GO 52878
52853: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52854: LD_ADDR_VAR 0 3
52858: PUSH
52859: LD_INT 21
52861: PPUSH
52862: LD_VAR 0 1
52866: PPUSH
52867: CALL_OW 321
52871: PUSH
52872: LD_INT 2
52874: EQUAL
52875: ST_TO_ADDR
52876: GO 53050
52878: LD_INT 16
52880: DOUBLE
52881: EQUAL
52882: IFTRUE 52886
52884: GO 52911
52886: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52887: LD_ADDR_VAR 0 3
52891: PUSH
52892: LD_INT 84
52894: PPUSH
52895: LD_VAR 0 1
52899: PPUSH
52900: CALL_OW 321
52904: PUSH
52905: LD_INT 2
52907: EQUAL
52908: ST_TO_ADDR
52909: GO 53050
52911: LD_INT 19
52913: DOUBLE
52914: EQUAL
52915: IFTRUE 52925
52917: LD_INT 23
52919: DOUBLE
52920: EQUAL
52921: IFTRUE 52925
52923: GO 52950
52925: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52926: LD_ADDR_VAR 0 3
52930: PUSH
52931: LD_INT 83
52933: PPUSH
52934: LD_VAR 0 1
52938: PPUSH
52939: CALL_OW 321
52943: PUSH
52944: LD_INT 2
52946: EQUAL
52947: ST_TO_ADDR
52948: GO 53050
52950: LD_INT 17
52952: DOUBLE
52953: EQUAL
52954: IFTRUE 52958
52956: GO 52983
52958: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52959: LD_ADDR_VAR 0 3
52963: PUSH
52964: LD_INT 39
52966: PPUSH
52967: LD_VAR 0 1
52971: PPUSH
52972: CALL_OW 321
52976: PUSH
52977: LD_INT 2
52979: EQUAL
52980: ST_TO_ADDR
52981: GO 53050
52983: LD_INT 18
52985: DOUBLE
52986: EQUAL
52987: IFTRUE 52991
52989: GO 53016
52991: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52992: LD_ADDR_VAR 0 3
52996: PUSH
52997: LD_INT 40
52999: PPUSH
53000: LD_VAR 0 1
53004: PPUSH
53005: CALL_OW 321
53009: PUSH
53010: LD_INT 2
53012: EQUAL
53013: ST_TO_ADDR
53014: GO 53050
53016: LD_INT 27
53018: DOUBLE
53019: EQUAL
53020: IFTRUE 53024
53022: GO 53049
53024: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53025: LD_ADDR_VAR 0 3
53029: PUSH
53030: LD_INT 35
53032: PPUSH
53033: LD_VAR 0 1
53037: PPUSH
53038: CALL_OW 321
53042: PUSH
53043: LD_INT 2
53045: EQUAL
53046: ST_TO_ADDR
53047: GO 53050
53049: POP
// end ;
53050: LD_VAR 0 3
53054: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53055: LD_INT 0
53057: PPUSH
53058: PPUSH
53059: PPUSH
53060: PPUSH
53061: PPUSH
53062: PPUSH
53063: PPUSH
53064: PPUSH
53065: PPUSH
53066: PPUSH
53067: PPUSH
// result := false ;
53068: LD_ADDR_VAR 0 6
53072: PUSH
53073: LD_INT 0
53075: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53076: LD_VAR 0 1
53080: NOT
53081: PUSH
53082: LD_VAR 0 1
53086: PPUSH
53087: CALL_OW 266
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: IN
53102: NOT
53103: OR
53104: PUSH
53105: LD_VAR 0 2
53109: NOT
53110: OR
53111: PUSH
53112: LD_VAR 0 5
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: LD_INT 2
53125: PUSH
53126: LD_INT 3
53128: PUSH
53129: LD_INT 4
53131: PUSH
53132: LD_INT 5
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: IN
53143: NOT
53144: OR
53145: PUSH
53146: LD_VAR 0 3
53150: PPUSH
53151: LD_VAR 0 4
53155: PPUSH
53156: CALL_OW 488
53160: NOT
53161: OR
53162: IFFALSE 53166
// exit ;
53164: GO 53902
// side := GetSide ( depot ) ;
53166: LD_ADDR_VAR 0 9
53170: PUSH
53171: LD_VAR 0 1
53175: PPUSH
53176: CALL_OW 255
53180: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53181: LD_VAR 0 9
53185: PPUSH
53186: LD_VAR 0 2
53190: PPUSH
53191: CALL 52679 0 2
53195: NOT
53196: IFFALSE 53200
// exit ;
53198: GO 53902
// pom := GetBase ( depot ) ;
53200: LD_ADDR_VAR 0 10
53204: PUSH
53205: LD_VAR 0 1
53209: PPUSH
53210: CALL_OW 274
53214: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53215: LD_ADDR_VAR 0 11
53219: PUSH
53220: LD_VAR 0 2
53224: PPUSH
53225: LD_VAR 0 1
53229: PPUSH
53230: CALL_OW 248
53234: PPUSH
53235: CALL_OW 450
53239: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53240: LD_VAR 0 10
53244: PPUSH
53245: LD_INT 1
53247: PPUSH
53248: CALL_OW 275
53252: PUSH
53253: LD_VAR 0 11
53257: PUSH
53258: LD_INT 1
53260: ARRAY
53261: GREATEREQUAL
53262: PUSH
53263: LD_VAR 0 10
53267: PPUSH
53268: LD_INT 2
53270: PPUSH
53271: CALL_OW 275
53275: PUSH
53276: LD_VAR 0 11
53280: PUSH
53281: LD_INT 2
53283: ARRAY
53284: GREATEREQUAL
53285: AND
53286: PUSH
53287: LD_VAR 0 10
53291: PPUSH
53292: LD_INT 3
53294: PPUSH
53295: CALL_OW 275
53299: PUSH
53300: LD_VAR 0 11
53304: PUSH
53305: LD_INT 3
53307: ARRAY
53308: GREATEREQUAL
53309: AND
53310: NOT
53311: IFFALSE 53315
// exit ;
53313: GO 53902
// if GetBType ( depot ) = b_depot then
53315: LD_VAR 0 1
53319: PPUSH
53320: CALL_OW 266
53324: PUSH
53325: LD_INT 0
53327: EQUAL
53328: IFFALSE 53340
// dist := 28 else
53330: LD_ADDR_VAR 0 14
53334: PUSH
53335: LD_INT 28
53337: ST_TO_ADDR
53338: GO 53348
// dist := 36 ;
53340: LD_ADDR_VAR 0 14
53344: PUSH
53345: LD_INT 36
53347: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53348: LD_VAR 0 1
53352: PPUSH
53353: LD_VAR 0 3
53357: PPUSH
53358: LD_VAR 0 4
53362: PPUSH
53363: CALL_OW 297
53367: PUSH
53368: LD_VAR 0 14
53372: GREATER
53373: IFFALSE 53377
// exit ;
53375: GO 53902
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53377: LD_ADDR_VAR 0 12
53381: PUSH
53382: LD_VAR 0 2
53386: PPUSH
53387: LD_VAR 0 3
53391: PPUSH
53392: LD_VAR 0 4
53396: PPUSH
53397: LD_VAR 0 5
53401: PPUSH
53402: LD_VAR 0 1
53406: PPUSH
53407: CALL_OW 248
53411: PPUSH
53412: LD_INT 0
53414: PPUSH
53415: CALL 53907 0 6
53419: ST_TO_ADDR
// if not hexes then
53420: LD_VAR 0 12
53424: NOT
53425: IFFALSE 53429
// exit ;
53427: GO 53902
// hex := GetHexInfo ( x , y ) ;
53429: LD_ADDR_VAR 0 15
53433: PUSH
53434: LD_VAR 0 3
53438: PPUSH
53439: LD_VAR 0 4
53443: PPUSH
53444: CALL_OW 546
53448: ST_TO_ADDR
// if hex [ 1 ] then
53449: LD_VAR 0 15
53453: PUSH
53454: LD_INT 1
53456: ARRAY
53457: IFFALSE 53461
// exit ;
53459: GO 53902
// height := hex [ 2 ] ;
53461: LD_ADDR_VAR 0 13
53465: PUSH
53466: LD_VAR 0 15
53470: PUSH
53471: LD_INT 2
53473: ARRAY
53474: ST_TO_ADDR
// for i = 1 to hexes do
53475: LD_ADDR_VAR 0 7
53479: PUSH
53480: DOUBLE
53481: LD_INT 1
53483: DEC
53484: ST_TO_ADDR
53485: LD_VAR 0 12
53489: PUSH
53490: FOR_TO
53491: IFFALSE 53821
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53493: LD_VAR 0 12
53497: PUSH
53498: LD_VAR 0 7
53502: ARRAY
53503: PUSH
53504: LD_INT 1
53506: ARRAY
53507: PPUSH
53508: LD_VAR 0 12
53512: PUSH
53513: LD_VAR 0 7
53517: ARRAY
53518: PUSH
53519: LD_INT 2
53521: ARRAY
53522: PPUSH
53523: CALL_OW 488
53527: NOT
53528: PUSH
53529: LD_VAR 0 12
53533: PUSH
53534: LD_VAR 0 7
53538: ARRAY
53539: PUSH
53540: LD_INT 1
53542: ARRAY
53543: PPUSH
53544: LD_VAR 0 12
53548: PUSH
53549: LD_VAR 0 7
53553: ARRAY
53554: PUSH
53555: LD_INT 2
53557: ARRAY
53558: PPUSH
53559: CALL_OW 428
53563: PUSH
53564: LD_INT 0
53566: GREATER
53567: OR
53568: PUSH
53569: LD_VAR 0 12
53573: PUSH
53574: LD_VAR 0 7
53578: ARRAY
53579: PUSH
53580: LD_INT 1
53582: ARRAY
53583: PPUSH
53584: LD_VAR 0 12
53588: PUSH
53589: LD_VAR 0 7
53593: ARRAY
53594: PUSH
53595: LD_INT 2
53597: ARRAY
53598: PPUSH
53599: CALL_OW 351
53603: OR
53604: IFFALSE 53610
// exit ;
53606: POP
53607: POP
53608: GO 53902
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53610: LD_ADDR_VAR 0 8
53614: PUSH
53615: LD_VAR 0 12
53619: PUSH
53620: LD_VAR 0 7
53624: ARRAY
53625: PUSH
53626: LD_INT 1
53628: ARRAY
53629: PPUSH
53630: LD_VAR 0 12
53634: PUSH
53635: LD_VAR 0 7
53639: ARRAY
53640: PUSH
53641: LD_INT 2
53643: ARRAY
53644: PPUSH
53645: CALL_OW 546
53649: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53650: LD_VAR 0 8
53654: PUSH
53655: LD_INT 1
53657: ARRAY
53658: PUSH
53659: LD_VAR 0 8
53663: PUSH
53664: LD_INT 2
53666: ARRAY
53667: PUSH
53668: LD_VAR 0 13
53672: PUSH
53673: LD_INT 2
53675: PLUS
53676: GREATER
53677: OR
53678: PUSH
53679: LD_VAR 0 8
53683: PUSH
53684: LD_INT 2
53686: ARRAY
53687: PUSH
53688: LD_VAR 0 13
53692: PUSH
53693: LD_INT 2
53695: MINUS
53696: LESS
53697: OR
53698: PUSH
53699: LD_VAR 0 8
53703: PUSH
53704: LD_INT 3
53706: ARRAY
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 8
53713: PUSH
53714: LD_INT 9
53716: PUSH
53717: LD_INT 10
53719: PUSH
53720: LD_INT 11
53722: PUSH
53723: LD_INT 12
53725: PUSH
53726: LD_INT 13
53728: PUSH
53729: LD_INT 16
53731: PUSH
53732: LD_INT 17
53734: PUSH
53735: LD_INT 18
53737: PUSH
53738: LD_INT 19
53740: PUSH
53741: LD_INT 20
53743: PUSH
53744: LD_INT 21
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: IN
53762: NOT
53763: OR
53764: PUSH
53765: LD_VAR 0 8
53769: PUSH
53770: LD_INT 5
53772: ARRAY
53773: NOT
53774: OR
53775: PUSH
53776: LD_VAR 0 8
53780: PUSH
53781: LD_INT 6
53783: ARRAY
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: LD_INT 7
53793: PUSH
53794: LD_INT 9
53796: PUSH
53797: LD_INT 10
53799: PUSH
53800: LD_INT 11
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: IN
53811: NOT
53812: OR
53813: IFFALSE 53819
// exit ;
53815: POP
53816: POP
53817: GO 53902
// end ;
53819: GO 53490
53821: POP
53822: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53823: LD_VAR 0 9
53827: PPUSH
53828: LD_VAR 0 3
53832: PPUSH
53833: LD_VAR 0 4
53837: PPUSH
53838: LD_INT 20
53840: PPUSH
53841: CALL 45854 0 4
53845: PUSH
53846: LD_INT 4
53848: ARRAY
53849: IFFALSE 53853
// exit ;
53851: GO 53902
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53853: LD_VAR 0 2
53857: PUSH
53858: LD_INT 29
53860: PUSH
53861: LD_INT 30
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: IN
53868: PUSH
53869: LD_VAR 0 3
53873: PPUSH
53874: LD_VAR 0 4
53878: PPUSH
53879: LD_VAR 0 9
53883: PPUSH
53884: CALL_OW 440
53888: NOT
53889: AND
53890: IFFALSE 53894
// exit ;
53892: GO 53902
// result := true ;
53894: LD_ADDR_VAR 0 6
53898: PUSH
53899: LD_INT 1
53901: ST_TO_ADDR
// end ;
53902: LD_VAR 0 6
53906: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53907: LD_INT 0
53909: PPUSH
53910: PPUSH
53911: PPUSH
53912: PPUSH
53913: PPUSH
53914: PPUSH
53915: PPUSH
53916: PPUSH
53917: PPUSH
53918: PPUSH
53919: PPUSH
53920: PPUSH
53921: PPUSH
53922: PPUSH
53923: PPUSH
53924: PPUSH
53925: PPUSH
53926: PPUSH
53927: PPUSH
53928: PPUSH
53929: PPUSH
53930: PPUSH
53931: PPUSH
53932: PPUSH
53933: PPUSH
53934: PPUSH
53935: PPUSH
53936: PPUSH
53937: PPUSH
53938: PPUSH
53939: PPUSH
53940: PPUSH
53941: PPUSH
53942: PPUSH
53943: PPUSH
53944: PPUSH
53945: PPUSH
53946: PPUSH
53947: PPUSH
53948: PPUSH
53949: PPUSH
53950: PPUSH
53951: PPUSH
53952: PPUSH
53953: PPUSH
53954: PPUSH
53955: PPUSH
53956: PPUSH
53957: PPUSH
53958: PPUSH
53959: PPUSH
53960: PPUSH
53961: PPUSH
53962: PPUSH
53963: PPUSH
53964: PPUSH
53965: PPUSH
53966: PPUSH
// result = [ ] ;
53967: LD_ADDR_VAR 0 7
53971: PUSH
53972: EMPTY
53973: ST_TO_ADDR
// temp_list = [ ] ;
53974: LD_ADDR_VAR 0 9
53978: PUSH
53979: EMPTY
53980: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53981: LD_VAR 0 4
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: LD_INT 1
53991: PUSH
53992: LD_INT 2
53994: PUSH
53995: LD_INT 3
53997: PUSH
53998: LD_INT 4
54000: PUSH
54001: LD_INT 5
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: IN
54012: NOT
54013: PUSH
54014: LD_VAR 0 1
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: IN
54029: PUSH
54030: LD_VAR 0 5
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: LD_INT 2
54040: PUSH
54041: LD_INT 3
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: LIST
54048: IN
54049: NOT
54050: AND
54051: OR
54052: IFFALSE 54056
// exit ;
54054: GO 72447
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54056: LD_VAR 0 1
54060: PUSH
54061: LD_INT 6
54063: PUSH
54064: LD_INT 7
54066: PUSH
54067: LD_INT 8
54069: PUSH
54070: LD_INT 13
54072: PUSH
54073: LD_INT 12
54075: PUSH
54076: LD_INT 15
54078: PUSH
54079: LD_INT 11
54081: PUSH
54082: LD_INT 14
54084: PUSH
54085: LD_INT 10
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: IN
54099: IFFALSE 54109
// btype = b_lab ;
54101: LD_ADDR_VAR 0 1
54105: PUSH
54106: LD_INT 6
54108: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54109: LD_VAR 0 6
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: LIST
54127: IN
54128: NOT
54129: PUSH
54130: LD_VAR 0 1
54134: PUSH
54135: LD_INT 0
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: LD_INT 2
54143: PUSH
54144: LD_INT 3
54146: PUSH
54147: LD_INT 6
54149: PUSH
54150: LD_INT 36
54152: PUSH
54153: LD_INT 4
54155: PUSH
54156: LD_INT 5
54158: PUSH
54159: LD_INT 31
54161: PUSH
54162: LD_INT 32
54164: PUSH
54165: LD_INT 33
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: IN
54181: NOT
54182: PUSH
54183: LD_VAR 0 6
54187: PUSH
54188: LD_INT 1
54190: EQUAL
54191: AND
54192: OR
54193: PUSH
54194: LD_VAR 0 1
54198: PUSH
54199: LD_INT 2
54201: PUSH
54202: LD_INT 3
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: IN
54209: NOT
54210: PUSH
54211: LD_VAR 0 6
54215: PUSH
54216: LD_INT 2
54218: EQUAL
54219: AND
54220: OR
54221: IFFALSE 54231
// mode = 0 ;
54223: LD_ADDR_VAR 0 6
54227: PUSH
54228: LD_INT 0
54230: ST_TO_ADDR
// case mode of 0 :
54231: LD_VAR 0 6
54235: PUSH
54236: LD_INT 0
54238: DOUBLE
54239: EQUAL
54240: IFTRUE 54244
54242: GO 65697
54244: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54245: LD_ADDR_VAR 0 11
54249: PUSH
54250: LD_INT 0
54252: PUSH
54253: LD_INT 0
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: LD_INT 2
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: LD_INT 1
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: PUSH
54392: LD_INT 3
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: LD_INT 2
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54438: LD_ADDR_VAR 0 12
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 2
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: NEG
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 2
54561: NEG
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 3
54595: NEG
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 3
54606: NEG
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54634: LD_ADDR_VAR 0 13
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 0
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: LD_INT 2
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: NEG
54782: PUSH
54783: LD_INT 3
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 3
54793: NEG
54794: PUSH
54795: LD_INT 2
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 3
54805: NEG
54806: PUSH
54807: LD_INT 3
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54833: LD_ADDR_VAR 0 14
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: LD_INT 2
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: LD_INT 2
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: LD_INT 2
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: NEG
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: LD_INT 3
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: LD_INT 3
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55029: LD_ADDR_VAR 0 15
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: NEG
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 2
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 2
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: NEG
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: LD_INT 1
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 3
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 3
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55222: LD_ADDR_VAR 0 16
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: LD_INT 2
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: PUSH
55336: LD_INT 2
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 2
55357: NEG
55358: PUSH
55359: LD_INT 2
55361: NEG
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 3
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 3
55379: PUSH
55380: LD_INT 3
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: LD_INT 3
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55415: LD_ADDR_VAR 0 17
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: LD_INT 1
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 2
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: LD_INT 2
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 2
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 2
55550: PUSH
55551: LD_INT 2
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: LD_INT 2
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 2
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 2
55591: NEG
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 2
55602: NEG
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: LD_INT 2
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55645: LD_ADDR_VAR 0 18
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: LD_INT 0
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: NEG
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 2
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: LD_INT 2
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 2
55821: NEG
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 2
55832: NEG
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: LD_INT 2
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55875: LD_ADDR_VAR 0 19
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: LD_INT 1
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: LD_INT 2
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 2
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 2
56010: PUSH
56011: LD_INT 2
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: LD_INT 2
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: LD_INT 2
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: LD_INT 1
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: LD_INT 1
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: NEG
56075: PUSH
56076: LD_INT 2
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56105: LD_ADDR_VAR 0 20
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: NEG
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: LD_INT 1
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 2
56292: NEG
56293: PUSH
56294: LD_INT 1
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: LD_INT 2
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56335: LD_ADDR_VAR 0 21
56339: PUSH
56340: LD_INT 0
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 2
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: LD_INT 2
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: LD_INT 2
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56565: LD_ADDR_VAR 0 22
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: LD_INT 2
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 2
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: LD_INT 2
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56795: LD_ADDR_VAR 0 23
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: LD_INT 2
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 2
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 2
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: LD_INT 2
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: LD_INT 2
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: NEG
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 2
56982: NEG
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: LD_INT 2
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 2
57006: NEG
57007: PUSH
57008: LD_INT 3
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: LD_INT 3
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: PUSH
57031: LD_INT 2
57033: NEG
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 2
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57075: LD_ADDR_VAR 0 24
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: LD_INT 2
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 1
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 2
57251: NEG
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 2
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 2
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 3
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 3
57318: PUSH
57319: LD_INT 2
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57351: LD_ADDR_VAR 0 25
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: LD_INT 2
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: LD_INT 2
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 2
57466: PUSH
57467: LD_INT 0
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: LD_INT 1
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: LD_INT 2
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: LD_INT 2
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: LD_INT 2
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: LD_INT 1
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 2
57527: NEG
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 2
57550: NEG
57551: PUSH
57552: LD_INT 2
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 3
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 3
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: LD_INT 3
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: LD_INT 3
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57625: LD_ADDR_VAR 0 26
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: LD_INT 1
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: LD_INT 2
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 2
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 2
57812: NEG
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: NEG
57825: PUSH
57826: LD_INT 2
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: LD_INT 3
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: LD_INT 3
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: LD_INT 2
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 2
57867: NEG
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57901: LD_ADDR_VAR 0 27
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: LD_INT 2
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: LD_INT 2
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: LD_INT 1
58008: NEG
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 2
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 2
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: LD_INT 2
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: LD_INT 2
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 2
58077: NEG
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 2
58088: NEG
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 2
58100: NEG
58101: PUSH
58102: LD_INT 2
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: LD_INT 2
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 3
58134: NEG
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: NEG
58147: PUSH
58148: LD_INT 2
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58181: LD_ADDR_VAR 0 28
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: LD_INT 2
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: LD_INT 2
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: NEG
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 2
58392: NEG
58393: PUSH
58394: LD_INT 3
58396: NEG
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: LD_INT 3
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 3
58416: NEG
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 3
58428: NEG
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58463: LD_ADDR_VAR 0 29
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: LD_INT 2
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: LD_INT 2
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 2
58629: NEG
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 2
58641: NEG
58642: PUSH
58643: LD_INT 2
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: LD_INT 3
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 2
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 3
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: LD_INT 3
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 3
58707: NEG
58708: PUSH
58709: LD_INT 2
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58742: LD_ADDR_VAR 0 30
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: LD_INT 0
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: LD_INT 1
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: LD_INT 2
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: LD_INT 2
58838: NEG
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: LD_INT 1
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 2
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 2
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 2
58877: PUSH
58878: LD_INT 2
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 2
58908: NEG
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: LD_INT 3
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 1
58943: PUSH
58944: LD_INT 2
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 3
58954: PUSH
58955: LD_INT 2
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 2
58964: PUSH
58965: LD_INT 3
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 2
58974: NEG
58975: PUSH
58976: LD_INT 1
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 3
58985: NEG
58986: PUSH
58987: LD_INT 1
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59020: LD_ADDR_VAR 0 31
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: LD_INT 1
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 1
59089: NEG
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 1
59101: NEG
59102: PUSH
59103: LD_INT 2
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 2
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: LD_INT 1
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 2
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: LD_INT 2
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: LD_INT 2
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: LD_INT 1
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 2
59197: NEG
59198: PUSH
59199: LD_INT 2
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 2
59209: NEG
59210: PUSH
59211: LD_INT 3
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 3
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: LD_INT 3
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: LD_INT 2
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: NEG
59264: PUSH
59265: LD_INT 2
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59298: LD_ADDR_VAR 0 32
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: LD_INT 1
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: LD_INT 2
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: LD_INT 2
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 2
59413: PUSH
59414: LD_INT 1
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 2
59423: PUSH
59424: LD_INT 2
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: LD_INT 2
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 2
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: LD_INT 1
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 2
59464: NEG
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 2
59475: NEG
59476: PUSH
59477: LD_INT 1
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: LD_INT 3
59491: NEG
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 1
59499: PUSH
59500: LD_INT 2
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 3
59510: PUSH
59511: LD_INT 2
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: PUSH
59521: LD_INT 3
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 2
59530: NEG
59531: PUSH
59532: LD_INT 1
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 3
59541: NEG
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59576: LD_ADDR_VAR 0 33
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: LD_INT 0
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 1
59634: NEG
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: NEG
59658: PUSH
59659: LD_INT 2
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: LD_INT 1
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 2
59680: PUSH
59681: LD_INT 0
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: LD_INT 2
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: LD_INT 2
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: LD_INT 1
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 2
59731: NEG
59732: PUSH
59733: LD_INT 0
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 2
59742: NEG
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 2
59754: NEG
59755: PUSH
59756: LD_INT 2
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 2
59766: NEG
59767: PUSH
59768: LD_INT 3
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: LD_INT 1
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 3
59789: PUSH
59790: LD_INT 1
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: LD_INT 3
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 3
59820: NEG
59821: PUSH
59822: LD_INT 2
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59855: LD_ADDR_VAR 0 34
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 0
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: NEG
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: NEG
59937: PUSH
59938: LD_INT 2
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 0
59948: PUSH
59949: LD_INT 2
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 2
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: LD_INT 2
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 2
60011: NEG
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 2
60022: NEG
60023: PUSH
60024: LD_INT 1
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 2
60034: NEG
60035: PUSH
60036: LD_INT 2
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 1
60046: NEG
60047: PUSH
60048: LD_INT 3
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: PUSH
60059: LD_INT 2
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 3
60069: PUSH
60070: LD_INT 2
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 2
60079: PUSH
60080: LD_INT 3
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 2
60089: NEG
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 3
60100: NEG
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60135: LD_ADDR_VAR 0 35
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: LD_INT 1
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 1
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 1
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 0
60183: PUSH
60184: LD_INT 1
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: LD_INT 1
60208: NEG
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 2
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 2
60226: NEG
60227: PUSH
60228: LD_INT 1
60230: NEG
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60247: LD_ADDR_VAR 0 36
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 1
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: LD_INT 1
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 1
60305: NEG
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: NEG
60317: PUSH
60318: LD_INT 1
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: LD_INT 2
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: LD_INT 2
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60359: LD_ADDR_VAR 0 37
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: LD_INT 0
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 1
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 1
60428: NEG
60429: PUSH
60430: LD_INT 1
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 1
60451: NEG
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60471: LD_ADDR_VAR 0 38
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: LD_INT 1
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: LD_INT 1
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: NEG
60530: PUSH
60531: LD_INT 0
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: LD_INT 1
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 2
60552: PUSH
60553: LD_INT 1
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 2
60562: NEG
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60583: LD_ADDR_VAR 0 39
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: NEG
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: LD_INT 2
60668: NEG
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60695: LD_ADDR_VAR 0 40
60699: PUSH
60700: LD_INT 0
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: LD_INT 1
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 1
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: PUSH
60734: LD_INT 1
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: LD_INT 1
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: LD_INT 1
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60807: LD_ADDR_VAR 0 41
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 1
60845: PUSH
60846: LD_INT 1
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 1
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: NEG
60866: PUSH
60867: LD_INT 0
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: NEG
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: LD_INT 2
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 2
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 2
60931: PUSH
60932: LD_INT 2
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: LD_INT 2
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 1
60951: NEG
60952: PUSH
60953: LD_INT 1
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 2
60962: NEG
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 2
60973: NEG
60974: PUSH
60975: LD_INT 1
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 2
60985: NEG
60986: PUSH
60987: LD_INT 2
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 2
60997: NEG
60998: PUSH
60999: LD_INT 3
61001: NEG
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 2
61009: PUSH
61010: LD_INT 1
61012: NEG
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 3
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 3
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 3
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 3
61050: PUSH
61051: LD_INT 3
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 2
61060: PUSH
61061: LD_INT 3
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 2
61070: NEG
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 3
61081: NEG
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 3
61092: NEG
61093: PUSH
61094: LD_INT 1
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 3
61104: NEG
61105: PUSH
61106: LD_INT 2
61108: NEG
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 3
61116: NEG
61117: PUSH
61118: LD_INT 3
61120: NEG
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61157: LD_ADDR_VAR 0 42
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: LD_INT 1
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 1
61215: NEG
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: LD_INT 2
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 0
61250: PUSH
61251: LD_INT 2
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: LD_INT 1
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 2
61272: PUSH
61273: LD_INT 1
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 2
61282: PUSH
61283: LD_INT 2
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: LD_INT 2
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: LD_INT 2
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 1
61312: NEG
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 2
61323: NEG
61324: PUSH
61325: LD_INT 1
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 2
61335: NEG
61336: PUSH
61337: LD_INT 2
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 2
61347: NEG
61348: PUSH
61349: LD_INT 3
61351: NEG
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: LD_INT 3
61363: NEG
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: LD_INT 3
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: LD_INT 2
61385: NEG
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 3
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 3
61403: PUSH
61404: LD_INT 3
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 2
61413: PUSH
61414: LD_INT 3
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: LD_INT 3
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: LD_INT 3
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: LD_INT 2
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 3
61454: NEG
61455: PUSH
61456: LD_INT 2
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 3
61466: NEG
61467: PUSH
61468: LD_INT 3
61470: NEG
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61507: LD_ADDR_VAR 0 43
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 1
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: LD_INT 1
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 0
61555: PUSH
61556: LD_INT 1
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 1
61565: NEG
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 1
61576: NEG
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: LD_INT 2
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: LD_INT 2
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: LD_INT 1
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 2
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 2
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: LD_INT 2
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: LD_INT 2
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 2
61673: NEG
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 2
61684: NEG
61685: PUSH
61686: LD_INT 1
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: LD_INT 3
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: LD_INT 3
61711: NEG
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 1
61719: PUSH
61720: LD_INT 2
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 2
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 3
61741: PUSH
61742: LD_INT 0
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 3
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: LD_INT 3
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: LD_INT 3
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 1
61781: NEG
61782: PUSH
61783: LD_INT 2
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 2
61792: NEG
61793: PUSH
61794: LD_INT 1
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 3
61803: NEG
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 3
61814: NEG
61815: PUSH
61816: LD_INT 1
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61855: LD_ADDR_VAR 0 44
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 1
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: LD_INT 1
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 1
61913: NEG
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 1
61936: NEG
61937: PUSH
61938: LD_INT 2
61940: NEG
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 1
61948: PUSH
61949: LD_INT 1
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 2
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 2
61979: PUSH
61980: LD_INT 2
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: PUSH
61990: LD_INT 2
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: NEG
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 2
62010: NEG
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 2
62021: NEG
62022: PUSH
62023: LD_INT 1
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 2
62033: NEG
62034: PUSH
62035: LD_INT 2
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 2
62045: NEG
62046: PUSH
62047: LD_INT 3
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 2
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 3
62068: PUSH
62069: LD_INT 0
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 3
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 3
62088: PUSH
62089: LD_INT 2
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 3
62098: PUSH
62099: LD_INT 3
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 2
62108: PUSH
62109: LD_INT 3
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 2
62118: NEG
62119: PUSH
62120: LD_INT 1
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 3
62129: NEG
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 3
62140: NEG
62141: PUSH
62142: LD_INT 1
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 3
62152: NEG
62153: PUSH
62154: LD_INT 2
62156: NEG
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 3
62164: NEG
62165: PUSH
62166: LD_INT 3
62168: NEG
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62205: LD_ADDR_VAR 0 45
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: LD_INT 1
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 1
62263: NEG
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 1
62274: NEG
62275: PUSH
62276: LD_INT 1
62278: NEG
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 1
62286: NEG
62287: PUSH
62288: LD_INT 2
62290: NEG
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 1
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 2
62320: PUSH
62321: LD_INT 1
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 2
62330: PUSH
62331: LD_INT 2
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: LD_INT 2
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: LD_INT 2
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: LD_INT 1
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 2
62371: NEG
62372: PUSH
62373: LD_INT 1
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 2
62383: NEG
62384: PUSH
62385: LD_INT 2
62387: NEG
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 2
62395: NEG
62396: PUSH
62397: LD_INT 3
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: LD_INT 3
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: LD_INT 3
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: LD_INT 2
62433: NEG
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 3
62441: PUSH
62442: LD_INT 2
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 3
62451: PUSH
62452: LD_INT 3
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 2
62461: PUSH
62462: LD_INT 3
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: LD_INT 3
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 0
62481: PUSH
62482: LD_INT 3
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: LD_INT 2
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 3
62502: NEG
62503: PUSH
62504: LD_INT 2
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 3
62514: NEG
62515: PUSH
62516: LD_INT 3
62518: NEG
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62555: LD_ADDR_VAR 0 46
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: LD_INT 0
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 1
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 1
62613: NEG
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 1
62624: NEG
62625: PUSH
62626: LD_INT 1
62628: NEG
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 1
62636: NEG
62637: PUSH
62638: LD_INT 2
62640: NEG
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: LD_INT 2
62651: NEG
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 1
62659: PUSH
62660: LD_INT 1
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 2
62680: PUSH
62681: LD_INT 1
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: LD_INT 2
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: LD_INT 2
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: LD_INT 1
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 2
62721: NEG
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 2
62732: NEG
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 1
62744: NEG
62745: PUSH
62746: LD_INT 3
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: LD_INT 3
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 1
62767: PUSH
62768: LD_INT 2
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 2
62778: PUSH
62779: LD_INT 1
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 3
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 3
62799: PUSH
62800: LD_INT 1
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 1
62809: PUSH
62810: LD_INT 3
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: LD_INT 3
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 1
62829: NEG
62830: PUSH
62831: LD_INT 2
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 2
62840: NEG
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 3
62851: NEG
62852: PUSH
62853: LD_INT 0
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 3
62862: NEG
62863: PUSH
62864: LD_INT 1
62866: NEG
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62903: LD_ADDR_VAR 0 47
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 0
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 1
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 1
62941: PUSH
62942: LD_INT 1
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 0
62951: PUSH
62952: LD_INT 1
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 1
62961: NEG
62962: PUSH
62963: LD_INT 0
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: LD_INT 1
62976: NEG
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: PUSH
62986: LD_INT 2
62988: NEG
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: LD_INT 2
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 1
63007: PUSH
63008: LD_INT 1
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 2
63018: NEG
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 2
63030: NEG
63031: PUSH
63032: LD_INT 2
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63054: LD_ADDR_VAR 0 48
63058: PUSH
63059: LD_INT 0
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: LD_INT 1
63074: NEG
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: LD_INT 0
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 1
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 0
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 1
63112: NEG
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 1
63123: NEG
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 1
63135: NEG
63136: PUSH
63137: LD_INT 2
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: LD_INT 2
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: LD_INT 1
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 2
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 2
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63201: LD_ADDR_VAR 0 49
63205: PUSH
63206: LD_INT 0
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: LD_INT 1
63221: NEG
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 1
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 1
63239: PUSH
63240: LD_INT 1
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 0
63249: PUSH
63250: LD_INT 1
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 1
63259: NEG
63260: PUSH
63261: LD_INT 0
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 1
63270: NEG
63271: PUSH
63272: LD_INT 1
63274: NEG
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 1
63282: PUSH
63283: LD_INT 1
63285: NEG
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 2
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 2
63303: PUSH
63304: LD_INT 1
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 2
63313: PUSH
63314: LD_INT 2
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: LD_INT 2
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63345: LD_ADDR_VAR 0 50
63349: PUSH
63350: LD_INT 0
63352: PUSH
63353: LD_INT 0
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 0
63362: PUSH
63363: LD_INT 1
63365: NEG
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 1
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 1
63383: PUSH
63384: LD_INT 1
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 0
63393: PUSH
63394: LD_INT 1
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 1
63403: NEG
63404: PUSH
63405: LD_INT 0
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 1
63414: NEG
63415: PUSH
63416: LD_INT 1
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 2
63426: PUSH
63427: LD_INT 1
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 2
63436: PUSH
63437: LD_INT 2
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 1
63446: PUSH
63447: LD_INT 2
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 0
63456: PUSH
63457: LD_INT 2
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 1
63466: NEG
63467: PUSH
63468: LD_INT 1
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63489: LD_ADDR_VAR 0 51
63493: PUSH
63494: LD_INT 0
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 1
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 1
63527: PUSH
63528: LD_INT 1
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 1
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 1
63547: NEG
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 1
63558: NEG
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 1
63570: PUSH
63571: LD_INT 2
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: LD_INT 2
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 1
63590: NEG
63591: PUSH
63592: LD_INT 1
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 2
63601: NEG
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 2
63612: NEG
63613: PUSH
63614: LD_INT 1
63616: NEG
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63636: LD_ADDR_VAR 0 52
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 0
63653: PUSH
63654: LD_INT 1
63656: NEG
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 1
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 1
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 0
63684: PUSH
63685: LD_INT 1
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 1
63694: NEG
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 1
63705: NEG
63706: PUSH
63707: LD_INT 1
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: LD_INT 2
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 1
63729: NEG
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 2
63740: NEG
63741: PUSH
63742: LD_INT 0
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 2
63751: NEG
63752: PUSH
63753: LD_INT 1
63755: NEG
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 2
63763: NEG
63764: PUSH
63765: LD_INT 2
63767: NEG
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63787: LD_ADDR_VAR 0 53
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: LD_INT 0
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: LD_INT 1
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: LD_INT 1
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 1
63845: NEG
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 1
63856: NEG
63857: PUSH
63858: LD_INT 1
63860: NEG
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 1
63868: NEG
63869: PUSH
63870: LD_INT 2
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: LD_INT 2
63883: NEG
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 1
63891: PUSH
63892: LD_INT 1
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 2
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 2
63912: PUSH
63913: LD_INT 1
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 2
63922: PUSH
63923: LD_INT 2
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 1
63932: PUSH
63933: LD_INT 2
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 0
63942: PUSH
63943: LD_INT 2
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 1
63952: NEG
63953: PUSH
63954: LD_INT 1
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 2
63963: NEG
63964: PUSH
63965: LD_INT 0
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 2
63974: NEG
63975: PUSH
63976: LD_INT 1
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 2
63986: NEG
63987: PUSH
63988: LD_INT 2
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64017: LD_ADDR_VAR 0 54
64021: PUSH
64022: LD_INT 0
64024: PUSH
64025: LD_INT 0
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: LD_INT 1
64037: NEG
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 1
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: PUSH
64056: LD_INT 1
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 1
64086: NEG
64087: PUSH
64088: LD_INT 1
64090: NEG
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: LD_INT 2
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: LD_INT 2
64113: NEG
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 1
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 2
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 2
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 2
64152: PUSH
64153: LD_INT 2
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 1
64162: PUSH
64163: LD_INT 2
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: LD_INT 2
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: LD_INT 1
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 2
64193: NEG
64194: PUSH
64195: LD_INT 0
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 2
64204: NEG
64205: PUSH
64206: LD_INT 1
64208: NEG
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 2
64216: NEG
64217: PUSH
64218: LD_INT 2
64220: NEG
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64247: LD_ADDR_VAR 0 55
64251: PUSH
64252: LD_INT 0
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 0
64264: PUSH
64265: LD_INT 1
64267: NEG
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 1
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 1
64285: PUSH
64286: LD_INT 1
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 0
64295: PUSH
64296: LD_INT 1
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 1
64305: NEG
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: LD_INT 1
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 1
64328: NEG
64329: PUSH
64330: LD_INT 2
64332: NEG
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: LD_INT 2
64343: NEG
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: LD_INT 1
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 2
64362: PUSH
64363: LD_INT 0
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 2
64372: PUSH
64373: LD_INT 1
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 2
64382: PUSH
64383: LD_INT 2
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 1
64392: PUSH
64393: LD_INT 2
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 0
64402: PUSH
64403: LD_INT 2
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 1
64412: NEG
64413: PUSH
64414: LD_INT 1
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 2
64423: NEG
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 2
64434: NEG
64435: PUSH
64436: LD_INT 1
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 2
64446: NEG
64447: PUSH
64448: LD_INT 2
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64477: LD_ADDR_VAR 0 56
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: LD_INT 0
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: LD_INT 1
64497: NEG
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 1
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 1
64515: PUSH
64516: LD_INT 1
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 0
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 1
64535: NEG
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: NEG
64547: PUSH
64548: LD_INT 1
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: LD_INT 2
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: LD_INT 0
64570: PUSH
64571: LD_INT 2
64573: NEG
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: LD_INT 1
64584: NEG
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 2
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 2
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 2
64612: PUSH
64613: LD_INT 2
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 1
64622: PUSH
64623: LD_INT 2
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 0
64632: PUSH
64633: LD_INT 2
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 1
64642: NEG
64643: PUSH
64644: LD_INT 1
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 2
64653: NEG
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 2
64664: NEG
64665: PUSH
64666: LD_INT 1
64668: NEG
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 2
64676: NEG
64677: PUSH
64678: LD_INT 2
64680: NEG
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64707: LD_ADDR_VAR 0 57
64711: PUSH
64712: LD_INT 0
64714: PUSH
64715: LD_INT 0
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: LD_INT 1
64727: NEG
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 1
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 0
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 1
64765: NEG
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 1
64776: NEG
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: LD_INT 2
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: LD_INT 2
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: LD_INT 1
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 2
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 2
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 2
64842: PUSH
64843: LD_INT 2
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 1
64852: PUSH
64853: LD_INT 2
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: LD_INT 2
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 1
64872: NEG
64873: PUSH
64874: LD_INT 1
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 2
64883: NEG
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 2
64894: NEG
64895: PUSH
64896: LD_INT 1
64898: NEG
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 2
64906: NEG
64907: PUSH
64908: LD_INT 2
64910: NEG
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64937: LD_ADDR_VAR 0 58
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: LD_INT 0
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: LD_INT 1
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 1
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 1
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: LD_INT 1
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 1
64995: NEG
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: PUSH
65008: LD_INT 1
65010: NEG
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 1
65018: NEG
65019: PUSH
65020: LD_INT 2
65022: NEG
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 0
65030: PUSH
65031: LD_INT 2
65033: NEG
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: LD_INT 1
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 2
65052: PUSH
65053: LD_INT 0
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 2
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 2
65072: PUSH
65073: LD_INT 2
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 1
65082: PUSH
65083: LD_INT 2
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: LD_INT 2
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 1
65102: NEG
65103: PUSH
65104: LD_INT 1
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 2
65113: NEG
65114: PUSH
65115: LD_INT 0
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 2
65124: NEG
65125: PUSH
65126: LD_INT 1
65128: NEG
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: LD_INT 2
65136: NEG
65137: PUSH
65138: LD_INT 2
65140: NEG
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65167: LD_ADDR_VAR 0 59
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: LD_INT 0
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 0
65184: PUSH
65185: LD_INT 1
65187: NEG
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 1
65195: PUSH
65196: LD_INT 0
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 1
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 0
65215: PUSH
65216: LD_INT 1
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 1
65225: NEG
65226: PUSH
65227: LD_INT 0
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 1
65236: NEG
65237: PUSH
65238: LD_INT 1
65240: NEG
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65255: LD_ADDR_VAR 0 60
65259: PUSH
65260: LD_INT 0
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 0
65272: PUSH
65273: LD_INT 1
65275: NEG
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 1
65283: PUSH
65284: LD_INT 0
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 1
65293: PUSH
65294: LD_INT 1
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 0
65303: PUSH
65304: LD_INT 1
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 1
65313: NEG
65314: PUSH
65315: LD_INT 0
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 1
65324: NEG
65325: PUSH
65326: LD_INT 1
65328: NEG
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: LIST
65341: LIST
65342: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65343: LD_ADDR_VAR 0 61
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: LD_INT 0
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 0
65360: PUSH
65361: LD_INT 1
65363: NEG
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: PUSH
65372: LD_INT 0
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 1
65381: PUSH
65382: LD_INT 1
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 0
65391: PUSH
65392: LD_INT 1
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: LD_INT 1
65401: NEG
65402: PUSH
65403: LD_INT 0
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 1
65412: NEG
65413: PUSH
65414: LD_INT 1
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65431: LD_ADDR_VAR 0 62
65435: PUSH
65436: LD_INT 0
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 1
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 1
65469: PUSH
65470: LD_INT 1
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 0
65479: PUSH
65480: LD_INT 1
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 1
65489: NEG
65490: PUSH
65491: LD_INT 0
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 1
65500: NEG
65501: PUSH
65502: LD_INT 1
65504: NEG
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65519: LD_ADDR_VAR 0 63
65523: PUSH
65524: LD_INT 0
65526: PUSH
65527: LD_INT 0
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 0
65536: PUSH
65537: LD_INT 1
65539: NEG
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: LD_INT 0
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 1
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 0
65567: PUSH
65568: LD_INT 1
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 1
65577: NEG
65578: PUSH
65579: LD_INT 0
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 1
65588: NEG
65589: PUSH
65590: LD_INT 1
65592: NEG
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65607: LD_ADDR_VAR 0 64
65611: PUSH
65612: LD_INT 0
65614: PUSH
65615: LD_INT 0
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 0
65624: PUSH
65625: LD_INT 1
65627: NEG
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 1
65635: PUSH
65636: LD_INT 0
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 1
65645: PUSH
65646: LD_INT 1
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 0
65655: PUSH
65656: LD_INT 1
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 1
65665: NEG
65666: PUSH
65667: LD_INT 0
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 1
65676: NEG
65677: PUSH
65678: LD_INT 1
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: ST_TO_ADDR
// end ; 1 :
65695: GO 71592
65697: LD_INT 1
65699: DOUBLE
65700: EQUAL
65701: IFTRUE 65705
65703: GO 68328
65705: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65706: LD_ADDR_VAR 0 11
65710: PUSH
65711: LD_INT 1
65713: NEG
65714: PUSH
65715: LD_INT 3
65717: NEG
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 0
65725: PUSH
65726: LD_INT 3
65728: NEG
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 1
65736: PUSH
65737: LD_INT 2
65739: NEG
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: LIST
65749: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65750: LD_ADDR_VAR 0 12
65754: PUSH
65755: LD_INT 2
65757: PUSH
65758: LD_INT 1
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 3
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 3
65778: PUSH
65779: LD_INT 1
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: LIST
65790: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65791: LD_ADDR_VAR 0 13
65795: PUSH
65796: LD_INT 3
65798: PUSH
65799: LD_INT 2
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 3
65808: PUSH
65809: LD_INT 3
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 2
65818: PUSH
65819: LD_INT 3
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: LIST
65830: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65831: LD_ADDR_VAR 0 14
65835: PUSH
65836: LD_INT 1
65838: PUSH
65839: LD_INT 3
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 0
65848: PUSH
65849: LD_INT 3
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 1
65858: NEG
65859: PUSH
65860: LD_INT 2
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: LIST
65871: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65872: LD_ADDR_VAR 0 15
65876: PUSH
65877: LD_INT 2
65879: NEG
65880: PUSH
65881: LD_INT 1
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 3
65890: NEG
65891: PUSH
65892: LD_INT 0
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 3
65901: NEG
65902: PUSH
65903: LD_INT 1
65905: NEG
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: LIST
65915: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65916: LD_ADDR_VAR 0 16
65920: PUSH
65921: LD_INT 2
65923: NEG
65924: PUSH
65925: LD_INT 3
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 3
65935: NEG
65936: PUSH
65937: LD_INT 2
65939: NEG
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 3
65947: NEG
65948: PUSH
65949: LD_INT 3
65951: NEG
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: LIST
65961: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65962: LD_ADDR_VAR 0 17
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: LD_INT 3
65973: NEG
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 0
65981: PUSH
65982: LD_INT 3
65984: NEG
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 1
65992: PUSH
65993: LD_INT 2
65995: NEG
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: LIST
66005: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66006: LD_ADDR_VAR 0 18
66010: PUSH
66011: LD_INT 2
66013: PUSH
66014: LD_INT 1
66016: NEG
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_INT 3
66024: PUSH
66025: LD_INT 0
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: PUSH
66032: LD_INT 3
66034: PUSH
66035: LD_INT 1
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: LIST
66046: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66047: LD_ADDR_VAR 0 19
66051: PUSH
66052: LD_INT 3
66054: PUSH
66055: LD_INT 2
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 3
66064: PUSH
66065: LD_INT 3
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 2
66074: PUSH
66075: LD_INT 3
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: LIST
66086: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66087: LD_ADDR_VAR 0 20
66091: PUSH
66092: LD_INT 1
66094: PUSH
66095: LD_INT 3
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 0
66104: PUSH
66105: LD_INT 3
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 1
66114: NEG
66115: PUSH
66116: LD_INT 2
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: LIST
66127: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66128: LD_ADDR_VAR 0 21
66132: PUSH
66133: LD_INT 2
66135: NEG
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 3
66146: NEG
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 3
66157: NEG
66158: PUSH
66159: LD_INT 1
66161: NEG
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: LIST
66171: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66172: LD_ADDR_VAR 0 22
66176: PUSH
66177: LD_INT 2
66179: NEG
66180: PUSH
66181: LD_INT 3
66183: NEG
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 3
66191: NEG
66192: PUSH
66193: LD_INT 2
66195: NEG
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 3
66203: NEG
66204: PUSH
66205: LD_INT 3
66207: NEG
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: LIST
66217: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66218: LD_ADDR_VAR 0 23
66222: PUSH
66223: LD_INT 0
66225: PUSH
66226: LD_INT 3
66228: NEG
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 1
66236: NEG
66237: PUSH
66238: LD_INT 4
66240: NEG
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 1
66248: PUSH
66249: LD_INT 3
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: LIST
66261: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66262: LD_ADDR_VAR 0 24
66266: PUSH
66267: LD_INT 3
66269: PUSH
66270: LD_INT 0
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 3
66279: PUSH
66280: LD_INT 1
66282: NEG
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 4
66290: PUSH
66291: LD_INT 1
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: LIST
66302: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66303: LD_ADDR_VAR 0 25
66307: PUSH
66308: LD_INT 3
66310: PUSH
66311: LD_INT 3
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 4
66320: PUSH
66321: LD_INT 3
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 3
66330: PUSH
66331: LD_INT 4
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: LIST
66342: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66343: LD_ADDR_VAR 0 26
66347: PUSH
66348: LD_INT 0
66350: PUSH
66351: LD_INT 3
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 1
66360: PUSH
66361: LD_INT 4
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 1
66370: NEG
66371: PUSH
66372: LD_INT 3
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: LIST
66383: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66384: LD_ADDR_VAR 0 27
66388: PUSH
66389: LD_INT 3
66391: NEG
66392: PUSH
66393: LD_INT 0
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 3
66402: NEG
66403: PUSH
66404: LD_INT 1
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 4
66413: NEG
66414: PUSH
66415: LD_INT 1
66417: NEG
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: LIST
66427: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66428: LD_ADDR_VAR 0 28
66432: PUSH
66433: LD_INT 3
66435: NEG
66436: PUSH
66437: LD_INT 3
66439: NEG
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 3
66447: NEG
66448: PUSH
66449: LD_INT 4
66451: NEG
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 4
66459: NEG
66460: PUSH
66461: LD_INT 3
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: LIST
66473: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66474: LD_ADDR_VAR 0 29
66478: PUSH
66479: LD_INT 1
66481: NEG
66482: PUSH
66483: LD_INT 3
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: LD_INT 3
66496: NEG
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 1
66504: PUSH
66505: LD_INT 2
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 1
66515: NEG
66516: PUSH
66517: LD_INT 4
66519: NEG
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 0
66527: PUSH
66528: LD_INT 4
66530: NEG
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 1
66538: PUSH
66539: LD_INT 3
66541: NEG
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 1
66549: NEG
66550: PUSH
66551: LD_INT 5
66553: NEG
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: LD_INT 5
66564: NEG
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 1
66572: PUSH
66573: LD_INT 4
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 1
66583: NEG
66584: PUSH
66585: LD_INT 6
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 0
66595: PUSH
66596: LD_INT 6
66598: NEG
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 1
66606: PUSH
66607: LD_INT 5
66609: NEG
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66629: LD_ADDR_VAR 0 30
66633: PUSH
66634: LD_INT 2
66636: PUSH
66637: LD_INT 1
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 3
66647: PUSH
66648: LD_INT 0
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 3
66657: PUSH
66658: LD_INT 1
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 3
66667: PUSH
66668: LD_INT 1
66670: NEG
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 4
66678: PUSH
66679: LD_INT 0
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 4
66688: PUSH
66689: LD_INT 1
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 4
66698: PUSH
66699: LD_INT 1
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 5
66709: PUSH
66710: LD_INT 0
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 5
66719: PUSH
66720: LD_INT 1
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 5
66729: PUSH
66730: LD_INT 1
66732: NEG
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 6
66740: PUSH
66741: LD_INT 0
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 6
66750: PUSH
66751: LD_INT 1
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66772: LD_ADDR_VAR 0 31
66776: PUSH
66777: LD_INT 3
66779: PUSH
66780: LD_INT 2
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 3
66789: PUSH
66790: LD_INT 3
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 2
66799: PUSH
66800: LD_INT 3
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 4
66809: PUSH
66810: LD_INT 3
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 4
66819: PUSH
66820: LD_INT 4
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 3
66829: PUSH
66830: LD_INT 4
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 5
66839: PUSH
66840: LD_INT 4
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 5
66849: PUSH
66850: LD_INT 5
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 4
66859: PUSH
66860: LD_INT 5
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 6
66869: PUSH
66870: LD_INT 5
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 6
66879: PUSH
66880: LD_INT 6
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 5
66889: PUSH
66890: LD_INT 6
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: LIST
66907: LIST
66908: LIST
66909: LIST
66910: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66911: LD_ADDR_VAR 0 32
66915: PUSH
66916: LD_INT 1
66918: PUSH
66919: LD_INT 3
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 0
66928: PUSH
66929: LD_INT 3
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 1
66938: NEG
66939: PUSH
66940: LD_INT 2
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 1
66949: PUSH
66950: LD_INT 4
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 0
66959: PUSH
66960: LD_INT 4
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 1
66969: NEG
66970: PUSH
66971: LD_INT 3
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 1
66980: PUSH
66981: LD_INT 5
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 0
66990: PUSH
66991: LD_INT 5
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 1
67000: NEG
67001: PUSH
67002: LD_INT 4
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 1
67011: PUSH
67012: LD_INT 6
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 0
67021: PUSH
67022: LD_INT 6
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 1
67031: NEG
67032: PUSH
67033: LD_INT 5
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67054: LD_ADDR_VAR 0 33
67058: PUSH
67059: LD_INT 2
67061: NEG
67062: PUSH
67063: LD_INT 1
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 3
67072: NEG
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 3
67083: NEG
67084: PUSH
67085: LD_INT 1
67087: NEG
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 3
67095: NEG
67096: PUSH
67097: LD_INT 1
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 4
67106: NEG
67107: PUSH
67108: LD_INT 0
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 4
67117: NEG
67118: PUSH
67119: LD_INT 1
67121: NEG
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 4
67129: NEG
67130: PUSH
67131: LD_INT 1
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 5
67140: NEG
67141: PUSH
67142: LD_INT 0
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 5
67151: NEG
67152: PUSH
67153: LD_INT 1
67155: NEG
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 5
67163: NEG
67164: PUSH
67165: LD_INT 1
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 6
67174: NEG
67175: PUSH
67176: LD_INT 0
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 6
67185: NEG
67186: PUSH
67187: LD_INT 1
67189: NEG
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67209: LD_ADDR_VAR 0 34
67213: PUSH
67214: LD_INT 2
67216: NEG
67217: PUSH
67218: LD_INT 3
67220: NEG
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 3
67228: NEG
67229: PUSH
67230: LD_INT 2
67232: NEG
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 3
67240: NEG
67241: PUSH
67242: LD_INT 3
67244: NEG
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 3
67252: NEG
67253: PUSH
67254: LD_INT 4
67256: NEG
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 4
67264: NEG
67265: PUSH
67266: LD_INT 3
67268: NEG
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 4
67276: NEG
67277: PUSH
67278: LD_INT 4
67280: NEG
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 4
67288: NEG
67289: PUSH
67290: LD_INT 5
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 5
67300: NEG
67301: PUSH
67302: LD_INT 4
67304: NEG
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 5
67312: NEG
67313: PUSH
67314: LD_INT 5
67316: NEG
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 5
67324: NEG
67325: PUSH
67326: LD_INT 6
67328: NEG
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 6
67336: NEG
67337: PUSH
67338: LD_INT 5
67340: NEG
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 6
67348: NEG
67349: PUSH
67350: LD_INT 6
67352: NEG
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67372: LD_ADDR_VAR 0 41
67376: PUSH
67377: LD_INT 0
67379: PUSH
67380: LD_INT 2
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 1
67390: NEG
67391: PUSH
67392: LD_INT 3
67394: NEG
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 1
67402: PUSH
67403: LD_INT 2
67405: NEG
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: LIST
67415: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67416: LD_ADDR_VAR 0 42
67420: PUSH
67421: LD_INT 2
67423: PUSH
67424: LD_INT 0
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 2
67433: PUSH
67434: LD_INT 1
67436: NEG
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 3
67444: PUSH
67445: LD_INT 1
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: LIST
67456: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67457: LD_ADDR_VAR 0 43
67461: PUSH
67462: LD_INT 2
67464: PUSH
67465: LD_INT 2
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 3
67474: PUSH
67475: LD_INT 2
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 2
67484: PUSH
67485: LD_INT 3
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: LIST
67496: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67497: LD_ADDR_VAR 0 44
67501: PUSH
67502: LD_INT 0
67504: PUSH
67505: LD_INT 2
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 1
67514: PUSH
67515: LD_INT 3
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 1
67524: NEG
67525: PUSH
67526: LD_INT 2
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: LIST
67537: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67538: LD_ADDR_VAR 0 45
67542: PUSH
67543: LD_INT 2
67545: NEG
67546: PUSH
67547: LD_INT 0
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 2
67556: NEG
67557: PUSH
67558: LD_INT 1
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 3
67567: NEG
67568: PUSH
67569: LD_INT 1
67571: NEG
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: LIST
67581: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67582: LD_ADDR_VAR 0 46
67586: PUSH
67587: LD_INT 2
67589: NEG
67590: PUSH
67591: LD_INT 2
67593: NEG
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 2
67601: NEG
67602: PUSH
67603: LD_INT 3
67605: NEG
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 3
67613: NEG
67614: PUSH
67615: LD_INT 2
67617: NEG
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: LIST
67627: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67628: LD_ADDR_VAR 0 47
67632: PUSH
67633: LD_INT 2
67635: NEG
67636: PUSH
67637: LD_INT 3
67639: NEG
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 1
67647: NEG
67648: PUSH
67649: LD_INT 3
67651: NEG
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67661: LD_ADDR_VAR 0 48
67665: PUSH
67666: LD_INT 1
67668: PUSH
67669: LD_INT 2
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 2
67679: PUSH
67680: LD_INT 1
67682: NEG
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67692: LD_ADDR_VAR 0 49
67696: PUSH
67697: LD_INT 3
67699: PUSH
67700: LD_INT 1
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 3
67709: PUSH
67710: LD_INT 2
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67721: LD_ADDR_VAR 0 50
67725: PUSH
67726: LD_INT 2
67728: PUSH
67729: LD_INT 3
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 1
67738: PUSH
67739: LD_INT 3
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67750: LD_ADDR_VAR 0 51
67754: PUSH
67755: LD_INT 1
67757: NEG
67758: PUSH
67759: LD_INT 2
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 2
67768: NEG
67769: PUSH
67770: LD_INT 1
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67781: LD_ADDR_VAR 0 52
67785: PUSH
67786: LD_INT 3
67788: NEG
67789: PUSH
67790: LD_INT 1
67792: NEG
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 3
67800: NEG
67801: PUSH
67802: LD_INT 2
67804: NEG
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67814: LD_ADDR_VAR 0 53
67818: PUSH
67819: LD_INT 1
67821: NEG
67822: PUSH
67823: LD_INT 3
67825: NEG
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 0
67833: PUSH
67834: LD_INT 3
67836: NEG
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 1
67844: PUSH
67845: LD_INT 2
67847: NEG
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: LIST
67857: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67858: LD_ADDR_VAR 0 54
67862: PUSH
67863: LD_INT 2
67865: PUSH
67866: LD_INT 1
67868: NEG
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 3
67876: PUSH
67877: LD_INT 0
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 3
67886: PUSH
67887: LD_INT 1
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: LIST
67898: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67899: LD_ADDR_VAR 0 55
67903: PUSH
67904: LD_INT 3
67906: PUSH
67907: LD_INT 2
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 3
67916: PUSH
67917: LD_INT 3
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 2
67926: PUSH
67927: LD_INT 3
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: LIST
67938: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67939: LD_ADDR_VAR 0 56
67943: PUSH
67944: LD_INT 1
67946: PUSH
67947: LD_INT 3
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 0
67956: PUSH
67957: LD_INT 3
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 1
67966: NEG
67967: PUSH
67968: LD_INT 2
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: LIST
67979: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67980: LD_ADDR_VAR 0 57
67984: PUSH
67985: LD_INT 2
67987: NEG
67988: PUSH
67989: LD_INT 1
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 3
67998: NEG
67999: PUSH
68000: LD_INT 0
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 3
68009: NEG
68010: PUSH
68011: LD_INT 1
68013: NEG
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: LIST
68023: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68024: LD_ADDR_VAR 0 58
68028: PUSH
68029: LD_INT 2
68031: NEG
68032: PUSH
68033: LD_INT 3
68035: NEG
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 3
68043: NEG
68044: PUSH
68045: LD_INT 2
68047: NEG
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 3
68055: NEG
68056: PUSH
68057: LD_INT 3
68059: NEG
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: LIST
68069: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68070: LD_ADDR_VAR 0 59
68074: PUSH
68075: LD_INT 1
68077: NEG
68078: PUSH
68079: LD_INT 2
68081: NEG
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 0
68089: PUSH
68090: LD_INT 2
68092: NEG
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 1
68100: PUSH
68101: LD_INT 1
68103: NEG
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: LIST
68113: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68114: LD_ADDR_VAR 0 60
68118: PUSH
68119: LD_INT 1
68121: PUSH
68122: LD_INT 1
68124: NEG
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 2
68132: PUSH
68133: LD_INT 0
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 2
68142: PUSH
68143: LD_INT 1
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: LIST
68154: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68155: LD_ADDR_VAR 0 61
68159: PUSH
68160: LD_INT 2
68162: PUSH
68163: LD_INT 1
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 2
68172: PUSH
68173: LD_INT 2
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 1
68182: PUSH
68183: LD_INT 2
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: LIST
68194: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68195: LD_ADDR_VAR 0 62
68199: PUSH
68200: LD_INT 1
68202: PUSH
68203: LD_INT 2
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 0
68212: PUSH
68213: LD_INT 2
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 1
68222: NEG
68223: PUSH
68224: LD_INT 1
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: LIST
68235: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68236: LD_ADDR_VAR 0 63
68240: PUSH
68241: LD_INT 1
68243: NEG
68244: PUSH
68245: LD_INT 1
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 2
68254: NEG
68255: PUSH
68256: LD_INT 0
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 2
68265: NEG
68266: PUSH
68267: LD_INT 1
68269: NEG
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: LIST
68279: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68280: LD_ADDR_VAR 0 64
68284: PUSH
68285: LD_INT 1
68287: NEG
68288: PUSH
68289: LD_INT 2
68291: NEG
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 2
68299: NEG
68300: PUSH
68301: LD_INT 1
68303: NEG
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 2
68311: NEG
68312: PUSH
68313: LD_INT 2
68315: NEG
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: LIST
68325: ST_TO_ADDR
// end ; 2 :
68326: GO 71592
68328: LD_INT 2
68330: DOUBLE
68331: EQUAL
68332: IFTRUE 68336
68334: GO 71591
68336: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68337: LD_ADDR_VAR 0 29
68341: PUSH
68342: LD_INT 4
68344: PUSH
68345: LD_INT 0
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 4
68354: PUSH
68355: LD_INT 1
68357: NEG
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 5
68365: PUSH
68366: LD_INT 0
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 5
68375: PUSH
68376: LD_INT 1
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 4
68385: PUSH
68386: LD_INT 1
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 3
68395: PUSH
68396: LD_INT 0
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 3
68405: PUSH
68406: LD_INT 1
68408: NEG
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 3
68416: PUSH
68417: LD_INT 2
68419: NEG
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 5
68427: PUSH
68428: LD_INT 2
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 3
68437: PUSH
68438: LD_INT 3
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 3
68447: PUSH
68448: LD_INT 2
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 4
68457: PUSH
68458: LD_INT 3
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 4
68467: PUSH
68468: LD_INT 4
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 3
68477: PUSH
68478: LD_INT 4
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 2
68487: PUSH
68488: LD_INT 3
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 2
68497: PUSH
68498: LD_INT 2
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 4
68507: PUSH
68508: LD_INT 2
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 2
68517: PUSH
68518: LD_INT 4
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 0
68527: PUSH
68528: LD_INT 4
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 0
68537: PUSH
68538: LD_INT 3
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 1
68547: PUSH
68548: LD_INT 4
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 1
68557: PUSH
68558: LD_INT 5
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: LD_INT 0
68567: PUSH
68568: LD_INT 5
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 1
68577: NEG
68578: PUSH
68579: LD_INT 4
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 1
68588: NEG
68589: PUSH
68590: LD_INT 3
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 2
68599: PUSH
68600: LD_INT 5
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 2
68609: NEG
68610: PUSH
68611: LD_INT 3
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 3
68620: NEG
68621: PUSH
68622: LD_INT 0
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 3
68631: NEG
68632: PUSH
68633: LD_INT 1
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 2
68643: NEG
68644: PUSH
68645: LD_INT 0
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 2
68654: NEG
68655: PUSH
68656: LD_INT 1
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 3
68665: NEG
68666: PUSH
68667: LD_INT 1
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 4
68676: NEG
68677: PUSH
68678: LD_INT 0
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 4
68687: NEG
68688: PUSH
68689: LD_INT 1
68691: NEG
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 4
68699: NEG
68700: PUSH
68701: LD_INT 2
68703: NEG
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 2
68711: NEG
68712: PUSH
68713: LD_INT 2
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 4
68722: NEG
68723: PUSH
68724: LD_INT 4
68726: NEG
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 4
68734: NEG
68735: PUSH
68736: LD_INT 5
68738: NEG
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 3
68746: NEG
68747: PUSH
68748: LD_INT 4
68750: NEG
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 3
68758: NEG
68759: PUSH
68760: LD_INT 3
68762: NEG
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 4
68770: NEG
68771: PUSH
68772: LD_INT 3
68774: NEG
68775: PUSH
68776: EMPTY
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 5
68782: NEG
68783: PUSH
68784: LD_INT 4
68786: NEG
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 5
68794: NEG
68795: PUSH
68796: LD_INT 5
68798: NEG
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 3
68806: NEG
68807: PUSH
68808: LD_INT 5
68810: NEG
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 5
68818: NEG
68819: PUSH
68820: LD_INT 3
68822: NEG
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68875: LD_ADDR_VAR 0 30
68879: PUSH
68880: LD_INT 4
68882: PUSH
68883: LD_INT 4
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 4
68892: PUSH
68893: LD_INT 3
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 5
68902: PUSH
68903: LD_INT 4
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 5
68912: PUSH
68913: LD_INT 5
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 4
68922: PUSH
68923: LD_INT 5
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 3
68932: PUSH
68933: LD_INT 4
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 3
68942: PUSH
68943: LD_INT 3
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 5
68952: PUSH
68953: LD_INT 3
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 3
68962: PUSH
68963: LD_INT 5
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 0
68972: PUSH
68973: LD_INT 3
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 0
68982: PUSH
68983: LD_INT 2
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 1
68992: PUSH
68993: LD_INT 3
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: LD_INT 1
69002: PUSH
69003: LD_INT 4
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 0
69012: PUSH
69013: LD_INT 4
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 1
69022: NEG
69023: PUSH
69024: LD_INT 3
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 1
69033: NEG
69034: PUSH
69035: LD_INT 2
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 2
69044: PUSH
69045: LD_INT 4
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 2
69054: NEG
69055: PUSH
69056: LD_INT 2
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 4
69065: NEG
69066: PUSH
69067: LD_INT 0
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 4
69076: NEG
69077: PUSH
69078: LD_INT 1
69080: NEG
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 3
69088: NEG
69089: PUSH
69090: LD_INT 0
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 3
69099: NEG
69100: PUSH
69101: LD_INT 1
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 4
69110: NEG
69111: PUSH
69112: LD_INT 1
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 5
69121: NEG
69122: PUSH
69123: LD_INT 0
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 5
69132: NEG
69133: PUSH
69134: LD_INT 1
69136: NEG
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 5
69144: NEG
69145: PUSH
69146: LD_INT 2
69148: NEG
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 3
69156: NEG
69157: PUSH
69158: LD_INT 2
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 3
69167: NEG
69168: PUSH
69169: LD_INT 3
69171: NEG
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 3
69179: NEG
69180: PUSH
69181: LD_INT 4
69183: NEG
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 2
69191: NEG
69192: PUSH
69193: LD_INT 3
69195: NEG
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 2
69203: NEG
69204: PUSH
69205: LD_INT 2
69207: NEG
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 3
69215: NEG
69216: PUSH
69217: LD_INT 2
69219: NEG
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 4
69227: NEG
69228: PUSH
69229: LD_INT 3
69231: NEG
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 4
69239: NEG
69240: PUSH
69241: LD_INT 4
69243: NEG
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 2
69251: NEG
69252: PUSH
69253: LD_INT 4
69255: NEG
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: LD_INT 4
69263: NEG
69264: PUSH
69265: LD_INT 2
69267: NEG
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 0
69275: PUSH
69276: LD_INT 4
69278: NEG
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 0
69286: PUSH
69287: LD_INT 5
69289: NEG
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 1
69297: PUSH
69298: LD_INT 4
69300: NEG
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 1
69308: PUSH
69309: LD_INT 3
69311: NEG
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 0
69319: PUSH
69320: LD_INT 3
69322: NEG
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: PUSH
69328: LD_INT 1
69330: NEG
69331: PUSH
69332: LD_INT 4
69334: NEG
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 1
69342: NEG
69343: PUSH
69344: LD_INT 5
69346: NEG
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 2
69354: PUSH
69355: LD_INT 3
69357: NEG
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PUSH
69363: LD_INT 2
69365: NEG
69366: PUSH
69367: LD_INT 5
69369: NEG
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69422: LD_ADDR_VAR 0 31
69426: PUSH
69427: LD_INT 0
69429: PUSH
69430: LD_INT 4
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 0
69439: PUSH
69440: LD_INT 3
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 1
69449: PUSH
69450: LD_INT 4
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 1
69459: PUSH
69460: LD_INT 5
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 0
69469: PUSH
69470: LD_INT 5
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 1
69479: NEG
69480: PUSH
69481: LD_INT 4
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 1
69490: NEG
69491: PUSH
69492: LD_INT 3
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 2
69501: PUSH
69502: LD_INT 5
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 2
69511: NEG
69512: PUSH
69513: LD_INT 3
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 3
69522: NEG
69523: PUSH
69524: LD_INT 0
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 3
69533: NEG
69534: PUSH
69535: LD_INT 1
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 2
69545: NEG
69546: PUSH
69547: LD_INT 0
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 2
69556: NEG
69557: PUSH
69558: LD_INT 1
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 3
69567: NEG
69568: PUSH
69569: LD_INT 1
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 4
69578: NEG
69579: PUSH
69580: LD_INT 0
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 4
69589: NEG
69590: PUSH
69591: LD_INT 1
69593: NEG
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 4
69601: NEG
69602: PUSH
69603: LD_INT 2
69605: NEG
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: LD_INT 2
69613: NEG
69614: PUSH
69615: LD_INT 2
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 4
69624: NEG
69625: PUSH
69626: LD_INT 4
69628: NEG
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: LD_INT 4
69636: NEG
69637: PUSH
69638: LD_INT 5
69640: NEG
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 3
69648: NEG
69649: PUSH
69650: LD_INT 4
69652: NEG
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 3
69660: NEG
69661: PUSH
69662: LD_INT 3
69664: NEG
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 4
69672: NEG
69673: PUSH
69674: LD_INT 3
69676: NEG
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 5
69684: NEG
69685: PUSH
69686: LD_INT 4
69688: NEG
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 5
69696: NEG
69697: PUSH
69698: LD_INT 5
69700: NEG
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 3
69708: NEG
69709: PUSH
69710: LD_INT 5
69712: NEG
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 5
69720: NEG
69721: PUSH
69722: LD_INT 3
69724: NEG
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 0
69732: PUSH
69733: LD_INT 3
69735: NEG
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 0
69743: PUSH
69744: LD_INT 4
69746: NEG
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 1
69754: PUSH
69755: LD_INT 3
69757: NEG
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: LD_INT 1
69765: PUSH
69766: LD_INT 2
69768: NEG
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PUSH
69774: LD_INT 0
69776: PUSH
69777: LD_INT 2
69779: NEG
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: LD_INT 1
69787: NEG
69788: PUSH
69789: LD_INT 3
69791: NEG
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 1
69799: NEG
69800: PUSH
69801: LD_INT 4
69803: NEG
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 2
69811: PUSH
69812: LD_INT 2
69814: NEG
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 2
69822: NEG
69823: PUSH
69824: LD_INT 4
69826: NEG
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 4
69834: PUSH
69835: LD_INT 0
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 4
69844: PUSH
69845: LD_INT 1
69847: NEG
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 5
69855: PUSH
69856: LD_INT 0
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 5
69865: PUSH
69866: LD_INT 1
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 4
69875: PUSH
69876: LD_INT 1
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 3
69885: PUSH
69886: LD_INT 0
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 3
69895: PUSH
69896: LD_INT 1
69898: NEG
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_INT 3
69906: PUSH
69907: LD_INT 2
69909: NEG
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 5
69917: PUSH
69918: LD_INT 2
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: LIST
69971: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69972: LD_ADDR_VAR 0 32
69976: PUSH
69977: LD_INT 4
69979: NEG
69980: PUSH
69981: LD_INT 0
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 4
69990: NEG
69991: PUSH
69992: LD_INT 1
69994: NEG
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 3
70002: NEG
70003: PUSH
70004: LD_INT 0
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 3
70013: NEG
70014: PUSH
70015: LD_INT 1
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 4
70024: NEG
70025: PUSH
70026: LD_INT 1
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 5
70035: NEG
70036: PUSH
70037: LD_INT 0
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 5
70046: NEG
70047: PUSH
70048: LD_INT 1
70050: NEG
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 5
70058: NEG
70059: PUSH
70060: LD_INT 2
70062: NEG
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 3
70070: NEG
70071: PUSH
70072: LD_INT 2
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 3
70081: NEG
70082: PUSH
70083: LD_INT 3
70085: NEG
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 3
70093: NEG
70094: PUSH
70095: LD_INT 4
70097: NEG
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 2
70105: NEG
70106: PUSH
70107: LD_INT 3
70109: NEG
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 2
70117: NEG
70118: PUSH
70119: LD_INT 2
70121: NEG
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 3
70129: NEG
70130: PUSH
70131: LD_INT 2
70133: NEG
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 4
70141: NEG
70142: PUSH
70143: LD_INT 3
70145: NEG
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 4
70153: NEG
70154: PUSH
70155: LD_INT 4
70157: NEG
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 2
70165: NEG
70166: PUSH
70167: LD_INT 4
70169: NEG
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 4
70177: NEG
70178: PUSH
70179: LD_INT 2
70181: NEG
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 0
70189: PUSH
70190: LD_INT 4
70192: NEG
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 0
70200: PUSH
70201: LD_INT 5
70203: NEG
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 1
70211: PUSH
70212: LD_INT 4
70214: NEG
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 1
70222: PUSH
70223: LD_INT 3
70225: NEG
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 0
70233: PUSH
70234: LD_INT 3
70236: NEG
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 1
70244: NEG
70245: PUSH
70246: LD_INT 4
70248: NEG
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: LD_INT 1
70256: NEG
70257: PUSH
70258: LD_INT 5
70260: NEG
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 2
70268: PUSH
70269: LD_INT 3
70271: NEG
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 2
70279: NEG
70280: PUSH
70281: LD_INT 5
70283: NEG
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 3
70291: PUSH
70292: LD_INT 0
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 3
70301: PUSH
70302: LD_INT 1
70304: NEG
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: LD_INT 4
70312: PUSH
70313: LD_INT 0
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 4
70322: PUSH
70323: LD_INT 1
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 3
70332: PUSH
70333: LD_INT 1
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 2
70342: PUSH
70343: LD_INT 0
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 2
70352: PUSH
70353: LD_INT 1
70355: NEG
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 2
70363: PUSH
70364: LD_INT 2
70366: NEG
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 4
70374: PUSH
70375: LD_INT 2
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 4
70384: PUSH
70385: LD_INT 4
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 4
70394: PUSH
70395: LD_INT 3
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 5
70404: PUSH
70405: LD_INT 4
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: PUSH
70412: LD_INT 5
70414: PUSH
70415: LD_INT 5
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 4
70424: PUSH
70425: LD_INT 5
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: PUSH
70432: LD_INT 3
70434: PUSH
70435: LD_INT 4
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 3
70444: PUSH
70445: LD_INT 3
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 5
70454: PUSH
70455: LD_INT 3
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 3
70464: PUSH
70465: LD_INT 5
70467: PUSH
70468: EMPTY
70469: LIST
70470: LIST
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: LIST
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70519: LD_ADDR_VAR 0 33
70523: PUSH
70524: LD_INT 4
70526: NEG
70527: PUSH
70528: LD_INT 4
70530: NEG
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 4
70538: NEG
70539: PUSH
70540: LD_INT 5
70542: NEG
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: PUSH
70548: LD_INT 3
70550: NEG
70551: PUSH
70552: LD_INT 4
70554: NEG
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 3
70562: NEG
70563: PUSH
70564: LD_INT 3
70566: NEG
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: LD_INT 4
70574: NEG
70575: PUSH
70576: LD_INT 3
70578: NEG
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 5
70586: NEG
70587: PUSH
70588: LD_INT 4
70590: NEG
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 5
70598: NEG
70599: PUSH
70600: LD_INT 5
70602: NEG
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PUSH
70608: LD_INT 3
70610: NEG
70611: PUSH
70612: LD_INT 5
70614: NEG
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 5
70622: NEG
70623: PUSH
70624: LD_INT 3
70626: NEG
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 0
70634: PUSH
70635: LD_INT 3
70637: NEG
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 0
70645: PUSH
70646: LD_INT 4
70648: NEG
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: PUSH
70654: LD_INT 1
70656: PUSH
70657: LD_INT 3
70659: NEG
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: PUSH
70665: LD_INT 1
70667: PUSH
70668: LD_INT 2
70670: NEG
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: LD_INT 0
70678: PUSH
70679: LD_INT 2
70681: NEG
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 1
70689: NEG
70690: PUSH
70691: LD_INT 3
70693: NEG
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 1
70701: NEG
70702: PUSH
70703: LD_INT 4
70705: NEG
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: LD_INT 2
70713: PUSH
70714: LD_INT 2
70716: NEG
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 2
70724: NEG
70725: PUSH
70726: LD_INT 4
70728: NEG
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 4
70736: PUSH
70737: LD_INT 0
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 4
70746: PUSH
70747: LD_INT 1
70749: NEG
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 5
70757: PUSH
70758: LD_INT 0
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 5
70767: PUSH
70768: LD_INT 1
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 4
70777: PUSH
70778: LD_INT 1
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 3
70787: PUSH
70788: LD_INT 0
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: LD_INT 3
70797: PUSH
70798: LD_INT 1
70800: NEG
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: PUSH
70806: LD_INT 3
70808: PUSH
70809: LD_INT 2
70811: NEG
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 5
70819: PUSH
70820: LD_INT 2
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 3
70829: PUSH
70830: LD_INT 3
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 3
70839: PUSH
70840: LD_INT 2
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PUSH
70847: LD_INT 4
70849: PUSH
70850: LD_INT 3
70852: PUSH
70853: EMPTY
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 4
70859: PUSH
70860: LD_INT 4
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: LD_INT 3
70869: PUSH
70870: LD_INT 4
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: PUSH
70877: LD_INT 2
70879: PUSH
70880: LD_INT 3
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: PUSH
70887: LD_INT 2
70889: PUSH
70890: LD_INT 2
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 4
70899: PUSH
70900: LD_INT 2
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: LD_INT 2
70909: PUSH
70910: LD_INT 4
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: LD_INT 0
70919: PUSH
70920: LD_INT 4
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 0
70929: PUSH
70930: LD_INT 3
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PUSH
70937: LD_INT 1
70939: PUSH
70940: LD_INT 4
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 1
70949: PUSH
70950: LD_INT 5
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 0
70959: PUSH
70960: LD_INT 5
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 1
70969: NEG
70970: PUSH
70971: LD_INT 4
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 1
70980: NEG
70981: PUSH
70982: LD_INT 3
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 2
70991: PUSH
70992: LD_INT 5
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 2
71001: NEG
71002: PUSH
71003: LD_INT 3
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71057: LD_ADDR_VAR 0 34
71061: PUSH
71062: LD_INT 0
71064: PUSH
71065: LD_INT 4
71067: NEG
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PUSH
71073: LD_INT 0
71075: PUSH
71076: LD_INT 5
71078: NEG
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 1
71086: PUSH
71087: LD_INT 4
71089: NEG
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 1
71097: PUSH
71098: LD_INT 3
71100: NEG
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 0
71108: PUSH
71109: LD_INT 3
71111: NEG
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 1
71119: NEG
71120: PUSH
71121: LD_INT 4
71123: NEG
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_INT 1
71131: NEG
71132: PUSH
71133: LD_INT 5
71135: NEG
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: LD_INT 2
71143: PUSH
71144: LD_INT 3
71146: NEG
71147: PUSH
71148: EMPTY
71149: LIST
71150: LIST
71151: PUSH
71152: LD_INT 2
71154: NEG
71155: PUSH
71156: LD_INT 5
71158: NEG
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 3
71166: PUSH
71167: LD_INT 0
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 3
71176: PUSH
71177: LD_INT 1
71179: NEG
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: LD_INT 4
71187: PUSH
71188: LD_INT 0
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: PUSH
71195: LD_INT 4
71197: PUSH
71198: LD_INT 1
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: LD_INT 3
71207: PUSH
71208: LD_INT 1
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 2
71217: PUSH
71218: LD_INT 0
71220: PUSH
71221: EMPTY
71222: LIST
71223: LIST
71224: PUSH
71225: LD_INT 2
71227: PUSH
71228: LD_INT 1
71230: NEG
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 2
71238: PUSH
71239: LD_INT 2
71241: NEG
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 4
71249: PUSH
71250: LD_INT 2
71252: PUSH
71253: EMPTY
71254: LIST
71255: LIST
71256: PUSH
71257: LD_INT 4
71259: PUSH
71260: LD_INT 4
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 4
71269: PUSH
71270: LD_INT 3
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 5
71279: PUSH
71280: LD_INT 4
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 5
71289: PUSH
71290: LD_INT 5
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: LD_INT 4
71299: PUSH
71300: LD_INT 5
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 3
71309: PUSH
71310: LD_INT 4
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 3
71319: PUSH
71320: LD_INT 3
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: PUSH
71327: LD_INT 5
71329: PUSH
71330: LD_INT 3
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: LD_INT 3
71339: PUSH
71340: LD_INT 5
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: PUSH
71347: LD_INT 0
71349: PUSH
71350: LD_INT 3
71352: PUSH
71353: EMPTY
71354: LIST
71355: LIST
71356: PUSH
71357: LD_INT 0
71359: PUSH
71360: LD_INT 2
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 1
71369: PUSH
71370: LD_INT 3
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 1
71379: PUSH
71380: LD_INT 4
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 0
71389: PUSH
71390: LD_INT 4
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: LD_INT 1
71399: NEG
71400: PUSH
71401: LD_INT 3
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 1
71410: NEG
71411: PUSH
71412: LD_INT 2
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 2
71421: PUSH
71422: LD_INT 4
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 2
71431: NEG
71432: PUSH
71433: LD_INT 2
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 4
71442: NEG
71443: PUSH
71444: LD_INT 0
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 4
71453: NEG
71454: PUSH
71455: LD_INT 1
71457: NEG
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 3
71465: NEG
71466: PUSH
71467: LD_INT 0
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: PUSH
71474: LD_INT 3
71476: NEG
71477: PUSH
71478: LD_INT 1
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 4
71487: NEG
71488: PUSH
71489: LD_INT 1
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: LD_INT 5
71498: NEG
71499: PUSH
71500: LD_INT 0
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: LD_INT 5
71509: NEG
71510: PUSH
71511: LD_INT 1
71513: NEG
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: LD_INT 5
71521: NEG
71522: PUSH
71523: LD_INT 2
71525: NEG
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 3
71533: NEG
71534: PUSH
71535: LD_INT 2
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: ST_TO_ADDR
// end ; end ;
71589: GO 71592
71591: POP
// case btype of b_depot , b_warehouse :
71592: LD_VAR 0 1
71596: PUSH
71597: LD_INT 0
71599: DOUBLE
71600: EQUAL
71601: IFTRUE 71611
71603: LD_INT 1
71605: DOUBLE
71606: EQUAL
71607: IFTRUE 71611
71609: GO 71812
71611: POP
// case nation of nation_american :
71612: LD_VAR 0 5
71616: PUSH
71617: LD_INT 1
71619: DOUBLE
71620: EQUAL
71621: IFTRUE 71625
71623: GO 71681
71625: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71626: LD_ADDR_VAR 0 9
71630: PUSH
71631: LD_VAR 0 11
71635: PUSH
71636: LD_VAR 0 12
71640: PUSH
71641: LD_VAR 0 13
71645: PUSH
71646: LD_VAR 0 14
71650: PUSH
71651: LD_VAR 0 15
71655: PUSH
71656: LD_VAR 0 16
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: PUSH
71669: LD_VAR 0 4
71673: PUSH
71674: LD_INT 1
71676: PLUS
71677: ARRAY
71678: ST_TO_ADDR
71679: GO 71810
71681: LD_INT 2
71683: DOUBLE
71684: EQUAL
71685: IFTRUE 71689
71687: GO 71745
71689: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71690: LD_ADDR_VAR 0 9
71694: PUSH
71695: LD_VAR 0 17
71699: PUSH
71700: LD_VAR 0 18
71704: PUSH
71705: LD_VAR 0 19
71709: PUSH
71710: LD_VAR 0 20
71714: PUSH
71715: LD_VAR 0 21
71719: PUSH
71720: LD_VAR 0 22
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: PUSH
71733: LD_VAR 0 4
71737: PUSH
71738: LD_INT 1
71740: PLUS
71741: ARRAY
71742: ST_TO_ADDR
71743: GO 71810
71745: LD_INT 3
71747: DOUBLE
71748: EQUAL
71749: IFTRUE 71753
71751: GO 71809
71753: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71754: LD_ADDR_VAR 0 9
71758: PUSH
71759: LD_VAR 0 23
71763: PUSH
71764: LD_VAR 0 24
71768: PUSH
71769: LD_VAR 0 25
71773: PUSH
71774: LD_VAR 0 26
71778: PUSH
71779: LD_VAR 0 27
71783: PUSH
71784: LD_VAR 0 28
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: LIST
71793: LIST
71794: LIST
71795: LIST
71796: PUSH
71797: LD_VAR 0 4
71801: PUSH
71802: LD_INT 1
71804: PLUS
71805: ARRAY
71806: ST_TO_ADDR
71807: GO 71810
71809: POP
71810: GO 72365
71812: LD_INT 2
71814: DOUBLE
71815: EQUAL
71816: IFTRUE 71826
71818: LD_INT 3
71820: DOUBLE
71821: EQUAL
71822: IFTRUE 71826
71824: GO 71882
71826: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71827: LD_ADDR_VAR 0 9
71831: PUSH
71832: LD_VAR 0 29
71836: PUSH
71837: LD_VAR 0 30
71841: PUSH
71842: LD_VAR 0 31
71846: PUSH
71847: LD_VAR 0 32
71851: PUSH
71852: LD_VAR 0 33
71856: PUSH
71857: LD_VAR 0 34
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: PUSH
71870: LD_VAR 0 4
71874: PUSH
71875: LD_INT 1
71877: PLUS
71878: ARRAY
71879: ST_TO_ADDR
71880: GO 72365
71882: LD_INT 16
71884: DOUBLE
71885: EQUAL
71886: IFTRUE 71944
71888: LD_INT 17
71890: DOUBLE
71891: EQUAL
71892: IFTRUE 71944
71894: LD_INT 18
71896: DOUBLE
71897: EQUAL
71898: IFTRUE 71944
71900: LD_INT 19
71902: DOUBLE
71903: EQUAL
71904: IFTRUE 71944
71906: LD_INT 22
71908: DOUBLE
71909: EQUAL
71910: IFTRUE 71944
71912: LD_INT 20
71914: DOUBLE
71915: EQUAL
71916: IFTRUE 71944
71918: LD_INT 21
71920: DOUBLE
71921: EQUAL
71922: IFTRUE 71944
71924: LD_INT 23
71926: DOUBLE
71927: EQUAL
71928: IFTRUE 71944
71930: LD_INT 24
71932: DOUBLE
71933: EQUAL
71934: IFTRUE 71944
71936: LD_INT 25
71938: DOUBLE
71939: EQUAL
71940: IFTRUE 71944
71942: GO 72000
71944: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71945: LD_ADDR_VAR 0 9
71949: PUSH
71950: LD_VAR 0 35
71954: PUSH
71955: LD_VAR 0 36
71959: PUSH
71960: LD_VAR 0 37
71964: PUSH
71965: LD_VAR 0 38
71969: PUSH
71970: LD_VAR 0 39
71974: PUSH
71975: LD_VAR 0 40
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: PUSH
71988: LD_VAR 0 4
71992: PUSH
71993: LD_INT 1
71995: PLUS
71996: ARRAY
71997: ST_TO_ADDR
71998: GO 72365
72000: LD_INT 6
72002: DOUBLE
72003: EQUAL
72004: IFTRUE 72056
72006: LD_INT 7
72008: DOUBLE
72009: EQUAL
72010: IFTRUE 72056
72012: LD_INT 8
72014: DOUBLE
72015: EQUAL
72016: IFTRUE 72056
72018: LD_INT 13
72020: DOUBLE
72021: EQUAL
72022: IFTRUE 72056
72024: LD_INT 12
72026: DOUBLE
72027: EQUAL
72028: IFTRUE 72056
72030: LD_INT 15
72032: DOUBLE
72033: EQUAL
72034: IFTRUE 72056
72036: LD_INT 11
72038: DOUBLE
72039: EQUAL
72040: IFTRUE 72056
72042: LD_INT 14
72044: DOUBLE
72045: EQUAL
72046: IFTRUE 72056
72048: LD_INT 10
72050: DOUBLE
72051: EQUAL
72052: IFTRUE 72056
72054: GO 72112
72056: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72057: LD_ADDR_VAR 0 9
72061: PUSH
72062: LD_VAR 0 41
72066: PUSH
72067: LD_VAR 0 42
72071: PUSH
72072: LD_VAR 0 43
72076: PUSH
72077: LD_VAR 0 44
72081: PUSH
72082: LD_VAR 0 45
72086: PUSH
72087: LD_VAR 0 46
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: PUSH
72100: LD_VAR 0 4
72104: PUSH
72105: LD_INT 1
72107: PLUS
72108: ARRAY
72109: ST_TO_ADDR
72110: GO 72365
72112: LD_INT 36
72114: DOUBLE
72115: EQUAL
72116: IFTRUE 72120
72118: GO 72176
72120: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72121: LD_ADDR_VAR 0 9
72125: PUSH
72126: LD_VAR 0 47
72130: PUSH
72131: LD_VAR 0 48
72135: PUSH
72136: LD_VAR 0 49
72140: PUSH
72141: LD_VAR 0 50
72145: PUSH
72146: LD_VAR 0 51
72150: PUSH
72151: LD_VAR 0 52
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: PUSH
72164: LD_VAR 0 4
72168: PUSH
72169: LD_INT 1
72171: PLUS
72172: ARRAY
72173: ST_TO_ADDR
72174: GO 72365
72176: LD_INT 4
72178: DOUBLE
72179: EQUAL
72180: IFTRUE 72202
72182: LD_INT 5
72184: DOUBLE
72185: EQUAL
72186: IFTRUE 72202
72188: LD_INT 34
72190: DOUBLE
72191: EQUAL
72192: IFTRUE 72202
72194: LD_INT 37
72196: DOUBLE
72197: EQUAL
72198: IFTRUE 72202
72200: GO 72258
72202: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72203: LD_ADDR_VAR 0 9
72207: PUSH
72208: LD_VAR 0 53
72212: PUSH
72213: LD_VAR 0 54
72217: PUSH
72218: LD_VAR 0 55
72222: PUSH
72223: LD_VAR 0 56
72227: PUSH
72228: LD_VAR 0 57
72232: PUSH
72233: LD_VAR 0 58
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: PUSH
72246: LD_VAR 0 4
72250: PUSH
72251: LD_INT 1
72253: PLUS
72254: ARRAY
72255: ST_TO_ADDR
72256: GO 72365
72258: LD_INT 31
72260: DOUBLE
72261: EQUAL
72262: IFTRUE 72308
72264: LD_INT 32
72266: DOUBLE
72267: EQUAL
72268: IFTRUE 72308
72270: LD_INT 33
72272: DOUBLE
72273: EQUAL
72274: IFTRUE 72308
72276: LD_INT 27
72278: DOUBLE
72279: EQUAL
72280: IFTRUE 72308
72282: LD_INT 26
72284: DOUBLE
72285: EQUAL
72286: IFTRUE 72308
72288: LD_INT 28
72290: DOUBLE
72291: EQUAL
72292: IFTRUE 72308
72294: LD_INT 29
72296: DOUBLE
72297: EQUAL
72298: IFTRUE 72308
72300: LD_INT 30
72302: DOUBLE
72303: EQUAL
72304: IFTRUE 72308
72306: GO 72364
72308: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72309: LD_ADDR_VAR 0 9
72313: PUSH
72314: LD_VAR 0 59
72318: PUSH
72319: LD_VAR 0 60
72323: PUSH
72324: LD_VAR 0 61
72328: PUSH
72329: LD_VAR 0 62
72333: PUSH
72334: LD_VAR 0 63
72338: PUSH
72339: LD_VAR 0 64
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: LIST
72351: PUSH
72352: LD_VAR 0 4
72356: PUSH
72357: LD_INT 1
72359: PLUS
72360: ARRAY
72361: ST_TO_ADDR
72362: GO 72365
72364: POP
// temp_list2 = [ ] ;
72365: LD_ADDR_VAR 0 10
72369: PUSH
72370: EMPTY
72371: ST_TO_ADDR
// for i in temp_list do
72372: LD_ADDR_VAR 0 8
72376: PUSH
72377: LD_VAR 0 9
72381: PUSH
72382: FOR_IN
72383: IFFALSE 72435
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72385: LD_ADDR_VAR 0 10
72389: PUSH
72390: LD_VAR 0 10
72394: PUSH
72395: LD_VAR 0 8
72399: PUSH
72400: LD_INT 1
72402: ARRAY
72403: PUSH
72404: LD_VAR 0 2
72408: PLUS
72409: PUSH
72410: LD_VAR 0 8
72414: PUSH
72415: LD_INT 2
72417: ARRAY
72418: PUSH
72419: LD_VAR 0 3
72423: PLUS
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: EMPTY
72430: LIST
72431: ADD
72432: ST_TO_ADDR
72433: GO 72382
72435: POP
72436: POP
// result = temp_list2 ;
72437: LD_ADDR_VAR 0 7
72441: PUSH
72442: LD_VAR 0 10
72446: ST_TO_ADDR
// end ;
72447: LD_VAR 0 7
72451: RET
// export function EnemyInRange ( unit , dist ) ; begin
72452: LD_INT 0
72454: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72455: LD_ADDR_VAR 0 3
72459: PUSH
72460: LD_VAR 0 1
72464: PPUSH
72465: CALL_OW 255
72469: PPUSH
72470: LD_VAR 0 1
72474: PPUSH
72475: CALL_OW 250
72479: PPUSH
72480: LD_VAR 0 1
72484: PPUSH
72485: CALL_OW 251
72489: PPUSH
72490: LD_VAR 0 2
72494: PPUSH
72495: CALL 45854 0 4
72499: PUSH
72500: LD_INT 4
72502: ARRAY
72503: ST_TO_ADDR
// end ;
72504: LD_VAR 0 3
72508: RET
// export function PlayerSeeMe ( unit ) ; begin
72509: LD_INT 0
72511: PPUSH
// result := See ( your_side , unit ) ;
72512: LD_ADDR_VAR 0 2
72516: PUSH
72517: LD_OWVAR 2
72521: PPUSH
72522: LD_VAR 0 1
72526: PPUSH
72527: CALL_OW 292
72531: ST_TO_ADDR
// end ;
72532: LD_VAR 0 2
72536: RET
// export function ReverseDir ( unit ) ; begin
72537: LD_INT 0
72539: PPUSH
// if not unit then
72540: LD_VAR 0 1
72544: NOT
72545: IFFALSE 72549
// exit ;
72547: GO 72572
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72549: LD_ADDR_VAR 0 2
72553: PUSH
72554: LD_VAR 0 1
72558: PPUSH
72559: CALL_OW 254
72563: PUSH
72564: LD_INT 3
72566: PLUS
72567: PUSH
72568: LD_INT 6
72570: MOD
72571: ST_TO_ADDR
// end ;
72572: LD_VAR 0 2
72576: RET
// export function ReverseArray ( array ) ; var i ; begin
72577: LD_INT 0
72579: PPUSH
72580: PPUSH
// if not array then
72581: LD_VAR 0 1
72585: NOT
72586: IFFALSE 72590
// exit ;
72588: GO 72645
// result := [ ] ;
72590: LD_ADDR_VAR 0 2
72594: PUSH
72595: EMPTY
72596: ST_TO_ADDR
// for i := array downto 1 do
72597: LD_ADDR_VAR 0 3
72601: PUSH
72602: DOUBLE
72603: LD_VAR 0 1
72607: INC
72608: ST_TO_ADDR
72609: LD_INT 1
72611: PUSH
72612: FOR_DOWNTO
72613: IFFALSE 72643
// result := Join ( result , array [ i ] ) ;
72615: LD_ADDR_VAR 0 2
72619: PUSH
72620: LD_VAR 0 2
72624: PPUSH
72625: LD_VAR 0 1
72629: PUSH
72630: LD_VAR 0 3
72634: ARRAY
72635: PPUSH
72636: CALL 77289 0 2
72640: ST_TO_ADDR
72641: GO 72612
72643: POP
72644: POP
// end ;
72645: LD_VAR 0 2
72649: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72650: LD_INT 0
72652: PPUSH
72653: PPUSH
72654: PPUSH
72655: PPUSH
72656: PPUSH
72657: PPUSH
// if not unit or not hexes then
72658: LD_VAR 0 1
72662: NOT
72663: PUSH
72664: LD_VAR 0 2
72668: NOT
72669: OR
72670: IFFALSE 72674
// exit ;
72672: GO 72797
// dist := 9999 ;
72674: LD_ADDR_VAR 0 5
72678: PUSH
72679: LD_INT 9999
72681: ST_TO_ADDR
// for i = 1 to hexes do
72682: LD_ADDR_VAR 0 4
72686: PUSH
72687: DOUBLE
72688: LD_INT 1
72690: DEC
72691: ST_TO_ADDR
72692: LD_VAR 0 2
72696: PUSH
72697: FOR_TO
72698: IFFALSE 72785
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72700: LD_ADDR_VAR 0 6
72704: PUSH
72705: LD_VAR 0 1
72709: PPUSH
72710: LD_VAR 0 2
72714: PUSH
72715: LD_VAR 0 4
72719: ARRAY
72720: PUSH
72721: LD_INT 1
72723: ARRAY
72724: PPUSH
72725: LD_VAR 0 2
72729: PUSH
72730: LD_VAR 0 4
72734: ARRAY
72735: PUSH
72736: LD_INT 2
72738: ARRAY
72739: PPUSH
72740: CALL_OW 297
72744: ST_TO_ADDR
// if tdist < dist then
72745: LD_VAR 0 6
72749: PUSH
72750: LD_VAR 0 5
72754: LESS
72755: IFFALSE 72783
// begin hex := hexes [ i ] ;
72757: LD_ADDR_VAR 0 8
72761: PUSH
72762: LD_VAR 0 2
72766: PUSH
72767: LD_VAR 0 4
72771: ARRAY
72772: ST_TO_ADDR
// dist := tdist ;
72773: LD_ADDR_VAR 0 5
72777: PUSH
72778: LD_VAR 0 6
72782: ST_TO_ADDR
// end ; end ;
72783: GO 72697
72785: POP
72786: POP
// result := hex ;
72787: LD_ADDR_VAR 0 3
72791: PUSH
72792: LD_VAR 0 8
72796: ST_TO_ADDR
// end ;
72797: LD_VAR 0 3
72801: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72802: LD_INT 0
72804: PPUSH
72805: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72806: LD_VAR 0 1
72810: NOT
72811: PUSH
72812: LD_VAR 0 1
72816: PUSH
72817: LD_INT 21
72819: PUSH
72820: LD_INT 2
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PUSH
72827: LD_INT 23
72829: PUSH
72830: LD_INT 2
72832: PUSH
72833: EMPTY
72834: LIST
72835: LIST
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: PPUSH
72841: CALL_OW 69
72845: IN
72846: NOT
72847: OR
72848: IFFALSE 72852
// exit ;
72850: GO 72899
// for i = 1 to 3 do
72852: LD_ADDR_VAR 0 3
72856: PUSH
72857: DOUBLE
72858: LD_INT 1
72860: DEC
72861: ST_TO_ADDR
72862: LD_INT 3
72864: PUSH
72865: FOR_TO
72866: IFFALSE 72897
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72868: LD_VAR 0 1
72872: PPUSH
72873: CALL_OW 250
72877: PPUSH
72878: LD_VAR 0 1
72882: PPUSH
72883: CALL_OW 251
72887: PPUSH
72888: LD_INT 1
72890: PPUSH
72891: CALL_OW 453
72895: GO 72865
72897: POP
72898: POP
// end ;
72899: LD_VAR 0 2
72903: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72904: LD_INT 0
72906: PPUSH
72907: PPUSH
72908: PPUSH
72909: PPUSH
72910: PPUSH
72911: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72912: LD_VAR 0 1
72916: NOT
72917: PUSH
72918: LD_VAR 0 2
72922: NOT
72923: OR
72924: PUSH
72925: LD_VAR 0 1
72929: PPUSH
72930: CALL_OW 314
72934: OR
72935: IFFALSE 72939
// exit ;
72937: GO 73406
// if GetLives ( i ) < 250 then
72939: LD_VAR 0 4
72943: PPUSH
72944: CALL_OW 256
72948: PUSH
72949: LD_INT 250
72951: LESS
72952: IFFALSE 72965
// begin ComAutodestruct ( i ) ;
72954: LD_VAR 0 4
72958: PPUSH
72959: CALL 72802 0 1
// exit ;
72963: GO 73406
// end ; x := GetX ( enemy_unit ) ;
72965: LD_ADDR_VAR 0 7
72969: PUSH
72970: LD_VAR 0 2
72974: PPUSH
72975: CALL_OW 250
72979: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72980: LD_ADDR_VAR 0 8
72984: PUSH
72985: LD_VAR 0 2
72989: PPUSH
72990: CALL_OW 251
72994: ST_TO_ADDR
// if not x or not y then
72995: LD_VAR 0 7
72999: NOT
73000: PUSH
73001: LD_VAR 0 8
73005: NOT
73006: OR
73007: IFFALSE 73011
// exit ;
73009: GO 73406
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73011: LD_ADDR_VAR 0 6
73015: PUSH
73016: LD_VAR 0 7
73020: PPUSH
73021: LD_INT 0
73023: PPUSH
73024: LD_INT 4
73026: PPUSH
73027: CALL_OW 272
73031: PUSH
73032: LD_VAR 0 8
73036: PPUSH
73037: LD_INT 0
73039: PPUSH
73040: LD_INT 4
73042: PPUSH
73043: CALL_OW 273
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: PUSH
73052: LD_VAR 0 7
73056: PPUSH
73057: LD_INT 1
73059: PPUSH
73060: LD_INT 4
73062: PPUSH
73063: CALL_OW 272
73067: PUSH
73068: LD_VAR 0 8
73072: PPUSH
73073: LD_INT 1
73075: PPUSH
73076: LD_INT 4
73078: PPUSH
73079: CALL_OW 273
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: PUSH
73088: LD_VAR 0 7
73092: PPUSH
73093: LD_INT 2
73095: PPUSH
73096: LD_INT 4
73098: PPUSH
73099: CALL_OW 272
73103: PUSH
73104: LD_VAR 0 8
73108: PPUSH
73109: LD_INT 2
73111: PPUSH
73112: LD_INT 4
73114: PPUSH
73115: CALL_OW 273
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PUSH
73124: LD_VAR 0 7
73128: PPUSH
73129: LD_INT 3
73131: PPUSH
73132: LD_INT 4
73134: PPUSH
73135: CALL_OW 272
73139: PUSH
73140: LD_VAR 0 8
73144: PPUSH
73145: LD_INT 3
73147: PPUSH
73148: LD_INT 4
73150: PPUSH
73151: CALL_OW 273
73155: PUSH
73156: EMPTY
73157: LIST
73158: LIST
73159: PUSH
73160: LD_VAR 0 7
73164: PPUSH
73165: LD_INT 4
73167: PPUSH
73168: LD_INT 4
73170: PPUSH
73171: CALL_OW 272
73175: PUSH
73176: LD_VAR 0 8
73180: PPUSH
73181: LD_INT 4
73183: PPUSH
73184: LD_INT 4
73186: PPUSH
73187: CALL_OW 273
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: PUSH
73196: LD_VAR 0 7
73200: PPUSH
73201: LD_INT 5
73203: PPUSH
73204: LD_INT 4
73206: PPUSH
73207: CALL_OW 272
73211: PUSH
73212: LD_VAR 0 8
73216: PPUSH
73217: LD_INT 5
73219: PPUSH
73220: LD_INT 4
73222: PPUSH
73223: CALL_OW 273
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: ST_TO_ADDR
// for i = tmp downto 1 do
73240: LD_ADDR_VAR 0 4
73244: PUSH
73245: DOUBLE
73246: LD_VAR 0 6
73250: INC
73251: ST_TO_ADDR
73252: LD_INT 1
73254: PUSH
73255: FOR_DOWNTO
73256: IFFALSE 73357
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73258: LD_VAR 0 6
73262: PUSH
73263: LD_VAR 0 4
73267: ARRAY
73268: PUSH
73269: LD_INT 1
73271: ARRAY
73272: PPUSH
73273: LD_VAR 0 6
73277: PUSH
73278: LD_VAR 0 4
73282: ARRAY
73283: PUSH
73284: LD_INT 2
73286: ARRAY
73287: PPUSH
73288: CALL_OW 488
73292: NOT
73293: PUSH
73294: LD_VAR 0 6
73298: PUSH
73299: LD_VAR 0 4
73303: ARRAY
73304: PUSH
73305: LD_INT 1
73307: ARRAY
73308: PPUSH
73309: LD_VAR 0 6
73313: PUSH
73314: LD_VAR 0 4
73318: ARRAY
73319: PUSH
73320: LD_INT 2
73322: ARRAY
73323: PPUSH
73324: CALL_OW 428
73328: PUSH
73329: LD_INT 0
73331: NONEQUAL
73332: OR
73333: IFFALSE 73355
// tmp := Delete ( tmp , i ) ;
73335: LD_ADDR_VAR 0 6
73339: PUSH
73340: LD_VAR 0 6
73344: PPUSH
73345: LD_VAR 0 4
73349: PPUSH
73350: CALL_OW 3
73354: ST_TO_ADDR
73355: GO 73255
73357: POP
73358: POP
// j := GetClosestHex ( unit , tmp ) ;
73359: LD_ADDR_VAR 0 5
73363: PUSH
73364: LD_VAR 0 1
73368: PPUSH
73369: LD_VAR 0 6
73373: PPUSH
73374: CALL 72650 0 2
73378: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73379: LD_VAR 0 1
73383: PPUSH
73384: LD_VAR 0 5
73388: PUSH
73389: LD_INT 1
73391: ARRAY
73392: PPUSH
73393: LD_VAR 0 5
73397: PUSH
73398: LD_INT 2
73400: ARRAY
73401: PPUSH
73402: CALL_OW 111
// end ;
73406: LD_VAR 0 3
73410: RET
// export function PrepareApemanSoldier ( ) ; begin
73411: LD_INT 0
73413: PPUSH
// uc_nation := 0 ;
73414: LD_ADDR_OWVAR 21
73418: PUSH
73419: LD_INT 0
73421: ST_TO_ADDR
// hc_sex := sex_male ;
73422: LD_ADDR_OWVAR 27
73426: PUSH
73427: LD_INT 1
73429: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73430: LD_ADDR_OWVAR 28
73434: PUSH
73435: LD_INT 15
73437: ST_TO_ADDR
// hc_gallery :=  ;
73438: LD_ADDR_OWVAR 33
73442: PUSH
73443: LD_STRING 
73445: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73446: LD_ADDR_OWVAR 31
73450: PUSH
73451: LD_INT 0
73453: PPUSH
73454: LD_INT 3
73456: PPUSH
73457: CALL_OW 12
73461: PUSH
73462: LD_INT 0
73464: PPUSH
73465: LD_INT 3
73467: PPUSH
73468: CALL_OW 12
73472: PUSH
73473: LD_INT 0
73475: PUSH
73476: LD_INT 0
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: LIST
73483: LIST
73484: ST_TO_ADDR
// end ;
73485: LD_VAR 0 1
73489: RET
// export function PrepareApemanEngineer ( ) ; begin
73490: LD_INT 0
73492: PPUSH
// uc_nation := 0 ;
73493: LD_ADDR_OWVAR 21
73497: PUSH
73498: LD_INT 0
73500: ST_TO_ADDR
// hc_sex := sex_male ;
73501: LD_ADDR_OWVAR 27
73505: PUSH
73506: LD_INT 1
73508: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73509: LD_ADDR_OWVAR 28
73513: PUSH
73514: LD_INT 16
73516: ST_TO_ADDR
// hc_gallery :=  ;
73517: LD_ADDR_OWVAR 33
73521: PUSH
73522: LD_STRING 
73524: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73525: LD_ADDR_OWVAR 31
73529: PUSH
73530: LD_INT 0
73532: PPUSH
73533: LD_INT 3
73535: PPUSH
73536: CALL_OW 12
73540: PUSH
73541: LD_INT 0
73543: PPUSH
73544: LD_INT 3
73546: PPUSH
73547: CALL_OW 12
73551: PUSH
73552: LD_INT 0
73554: PUSH
73555: LD_INT 0
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: ST_TO_ADDR
// end ;
73564: LD_VAR 0 1
73568: RET
// export function PrepareApeman ( agressivity ) ; begin
73569: LD_INT 0
73571: PPUSH
// uc_side := 0 ;
73572: LD_ADDR_OWVAR 20
73576: PUSH
73577: LD_INT 0
73579: ST_TO_ADDR
// uc_nation := 0 ;
73580: LD_ADDR_OWVAR 21
73584: PUSH
73585: LD_INT 0
73587: ST_TO_ADDR
// hc_sex := sex_male ;
73588: LD_ADDR_OWVAR 27
73592: PUSH
73593: LD_INT 1
73595: ST_TO_ADDR
// hc_class := class_apeman ;
73596: LD_ADDR_OWVAR 28
73600: PUSH
73601: LD_INT 12
73603: ST_TO_ADDR
// hc_gallery :=  ;
73604: LD_ADDR_OWVAR 33
73608: PUSH
73609: LD_STRING 
73611: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73612: LD_ADDR_OWVAR 35
73616: PUSH
73617: LD_VAR 0 1
73621: NEG
73622: PPUSH
73623: LD_VAR 0 1
73627: PPUSH
73628: CALL_OW 12
73632: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73633: LD_ADDR_OWVAR 31
73637: PUSH
73638: LD_INT 0
73640: PPUSH
73641: LD_INT 3
73643: PPUSH
73644: CALL_OW 12
73648: PUSH
73649: LD_INT 0
73651: PPUSH
73652: LD_INT 3
73654: PPUSH
73655: CALL_OW 12
73659: PUSH
73660: LD_INT 0
73662: PUSH
73663: LD_INT 0
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: ST_TO_ADDR
// end ;
73672: LD_VAR 0 2
73676: RET
// export function PrepareTiger ( agressivity ) ; begin
73677: LD_INT 0
73679: PPUSH
// uc_side := 0 ;
73680: LD_ADDR_OWVAR 20
73684: PUSH
73685: LD_INT 0
73687: ST_TO_ADDR
// uc_nation := 0 ;
73688: LD_ADDR_OWVAR 21
73692: PUSH
73693: LD_INT 0
73695: ST_TO_ADDR
// hc_class := class_tiger ;
73696: LD_ADDR_OWVAR 28
73700: PUSH
73701: LD_INT 14
73703: ST_TO_ADDR
// hc_gallery :=  ;
73704: LD_ADDR_OWVAR 33
73708: PUSH
73709: LD_STRING 
73711: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73712: LD_ADDR_OWVAR 35
73716: PUSH
73717: LD_VAR 0 1
73721: NEG
73722: PPUSH
73723: LD_VAR 0 1
73727: PPUSH
73728: CALL_OW 12
73732: ST_TO_ADDR
// end ;
73733: LD_VAR 0 2
73737: RET
// export function PrepareEnchidna ( ) ; begin
73738: LD_INT 0
73740: PPUSH
// uc_side := 0 ;
73741: LD_ADDR_OWVAR 20
73745: PUSH
73746: LD_INT 0
73748: ST_TO_ADDR
// uc_nation := 0 ;
73749: LD_ADDR_OWVAR 21
73753: PUSH
73754: LD_INT 0
73756: ST_TO_ADDR
// hc_class := class_baggie ;
73757: LD_ADDR_OWVAR 28
73761: PUSH
73762: LD_INT 13
73764: ST_TO_ADDR
// hc_gallery :=  ;
73765: LD_ADDR_OWVAR 33
73769: PUSH
73770: LD_STRING 
73772: ST_TO_ADDR
// end ;
73773: LD_VAR 0 1
73777: RET
// export function PrepareFrog ( ) ; begin
73778: LD_INT 0
73780: PPUSH
// uc_side := 0 ;
73781: LD_ADDR_OWVAR 20
73785: PUSH
73786: LD_INT 0
73788: ST_TO_ADDR
// uc_nation := 0 ;
73789: LD_ADDR_OWVAR 21
73793: PUSH
73794: LD_INT 0
73796: ST_TO_ADDR
// hc_class := class_frog ;
73797: LD_ADDR_OWVAR 28
73801: PUSH
73802: LD_INT 19
73804: ST_TO_ADDR
// hc_gallery :=  ;
73805: LD_ADDR_OWVAR 33
73809: PUSH
73810: LD_STRING 
73812: ST_TO_ADDR
// end ;
73813: LD_VAR 0 1
73817: RET
// export function PrepareFish ( ) ; begin
73818: LD_INT 0
73820: PPUSH
// uc_side := 0 ;
73821: LD_ADDR_OWVAR 20
73825: PUSH
73826: LD_INT 0
73828: ST_TO_ADDR
// uc_nation := 0 ;
73829: LD_ADDR_OWVAR 21
73833: PUSH
73834: LD_INT 0
73836: ST_TO_ADDR
// hc_class := class_fish ;
73837: LD_ADDR_OWVAR 28
73841: PUSH
73842: LD_INT 20
73844: ST_TO_ADDR
// hc_gallery :=  ;
73845: LD_ADDR_OWVAR 33
73849: PUSH
73850: LD_STRING 
73852: ST_TO_ADDR
// end ;
73853: LD_VAR 0 1
73857: RET
// export function PrepareBird ( ) ; begin
73858: LD_INT 0
73860: PPUSH
// uc_side := 0 ;
73861: LD_ADDR_OWVAR 20
73865: PUSH
73866: LD_INT 0
73868: ST_TO_ADDR
// uc_nation := 0 ;
73869: LD_ADDR_OWVAR 21
73873: PUSH
73874: LD_INT 0
73876: ST_TO_ADDR
// hc_class := class_phororhacos ;
73877: LD_ADDR_OWVAR 28
73881: PUSH
73882: LD_INT 18
73884: ST_TO_ADDR
// hc_gallery :=  ;
73885: LD_ADDR_OWVAR 33
73889: PUSH
73890: LD_STRING 
73892: ST_TO_ADDR
// end ;
73893: LD_VAR 0 1
73897: RET
// export function PrepareHorse ( ) ; begin
73898: LD_INT 0
73900: PPUSH
// uc_side := 0 ;
73901: LD_ADDR_OWVAR 20
73905: PUSH
73906: LD_INT 0
73908: ST_TO_ADDR
// uc_nation := 0 ;
73909: LD_ADDR_OWVAR 21
73913: PUSH
73914: LD_INT 0
73916: ST_TO_ADDR
// hc_class := class_horse ;
73917: LD_ADDR_OWVAR 28
73921: PUSH
73922: LD_INT 21
73924: ST_TO_ADDR
// hc_gallery :=  ;
73925: LD_ADDR_OWVAR 33
73929: PUSH
73930: LD_STRING 
73932: ST_TO_ADDR
// end ;
73933: LD_VAR 0 1
73937: RET
// export function PrepareMastodont ( ) ; begin
73938: LD_INT 0
73940: PPUSH
// uc_side := 0 ;
73941: LD_ADDR_OWVAR 20
73945: PUSH
73946: LD_INT 0
73948: ST_TO_ADDR
// uc_nation := 0 ;
73949: LD_ADDR_OWVAR 21
73953: PUSH
73954: LD_INT 0
73956: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73957: LD_ADDR_OWVAR 37
73961: PUSH
73962: LD_INT 31
73964: ST_TO_ADDR
// vc_control := control_rider ;
73965: LD_ADDR_OWVAR 38
73969: PUSH
73970: LD_INT 4
73972: ST_TO_ADDR
// end ;
73973: LD_VAR 0 1
73977: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73978: LD_INT 0
73980: PPUSH
73981: PPUSH
73982: PPUSH
// uc_side = 0 ;
73983: LD_ADDR_OWVAR 20
73987: PUSH
73988: LD_INT 0
73990: ST_TO_ADDR
// uc_nation = 0 ;
73991: LD_ADDR_OWVAR 21
73995: PUSH
73996: LD_INT 0
73998: ST_TO_ADDR
// InitHc_All ( ) ;
73999: CALL_OW 584
// InitVc ;
74003: CALL_OW 20
// if mastodonts then
74007: LD_VAR 0 6
74011: IFFALSE 74078
// for i = 1 to mastodonts do
74013: LD_ADDR_VAR 0 11
74017: PUSH
74018: DOUBLE
74019: LD_INT 1
74021: DEC
74022: ST_TO_ADDR
74023: LD_VAR 0 6
74027: PUSH
74028: FOR_TO
74029: IFFALSE 74076
// begin vc_chassis := 31 ;
74031: LD_ADDR_OWVAR 37
74035: PUSH
74036: LD_INT 31
74038: ST_TO_ADDR
// vc_control := control_rider ;
74039: LD_ADDR_OWVAR 38
74043: PUSH
74044: LD_INT 4
74046: ST_TO_ADDR
// animal := CreateVehicle ;
74047: LD_ADDR_VAR 0 12
74051: PUSH
74052: CALL_OW 45
74056: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74057: LD_VAR 0 12
74061: PPUSH
74062: LD_VAR 0 8
74066: PPUSH
74067: LD_INT 0
74069: PPUSH
74070: CALL 76206 0 3
// end ;
74074: GO 74028
74076: POP
74077: POP
// if horses then
74078: LD_VAR 0 5
74082: IFFALSE 74149
// for i = 1 to horses do
74084: LD_ADDR_VAR 0 11
74088: PUSH
74089: DOUBLE
74090: LD_INT 1
74092: DEC
74093: ST_TO_ADDR
74094: LD_VAR 0 5
74098: PUSH
74099: FOR_TO
74100: IFFALSE 74147
// begin hc_class := 21 ;
74102: LD_ADDR_OWVAR 28
74106: PUSH
74107: LD_INT 21
74109: ST_TO_ADDR
// hc_gallery :=  ;
74110: LD_ADDR_OWVAR 33
74114: PUSH
74115: LD_STRING 
74117: ST_TO_ADDR
// animal := CreateHuman ;
74118: LD_ADDR_VAR 0 12
74122: PUSH
74123: CALL_OW 44
74127: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74128: LD_VAR 0 12
74132: PPUSH
74133: LD_VAR 0 8
74137: PPUSH
74138: LD_INT 0
74140: PPUSH
74141: CALL 76206 0 3
// end ;
74145: GO 74099
74147: POP
74148: POP
// if birds then
74149: LD_VAR 0 1
74153: IFFALSE 74220
// for i = 1 to birds do
74155: LD_ADDR_VAR 0 11
74159: PUSH
74160: DOUBLE
74161: LD_INT 1
74163: DEC
74164: ST_TO_ADDR
74165: LD_VAR 0 1
74169: PUSH
74170: FOR_TO
74171: IFFALSE 74218
// begin hc_class = 18 ;
74173: LD_ADDR_OWVAR 28
74177: PUSH
74178: LD_INT 18
74180: ST_TO_ADDR
// hc_gallery =  ;
74181: LD_ADDR_OWVAR 33
74185: PUSH
74186: LD_STRING 
74188: ST_TO_ADDR
// animal := CreateHuman ;
74189: LD_ADDR_VAR 0 12
74193: PUSH
74194: CALL_OW 44
74198: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74199: LD_VAR 0 12
74203: PPUSH
74204: LD_VAR 0 8
74208: PPUSH
74209: LD_INT 0
74211: PPUSH
74212: CALL 76206 0 3
// end ;
74216: GO 74170
74218: POP
74219: POP
// if tigers then
74220: LD_VAR 0 2
74224: IFFALSE 74308
// for i = 1 to tigers do
74226: LD_ADDR_VAR 0 11
74230: PUSH
74231: DOUBLE
74232: LD_INT 1
74234: DEC
74235: ST_TO_ADDR
74236: LD_VAR 0 2
74240: PUSH
74241: FOR_TO
74242: IFFALSE 74306
// begin hc_class = class_tiger ;
74244: LD_ADDR_OWVAR 28
74248: PUSH
74249: LD_INT 14
74251: ST_TO_ADDR
// hc_gallery =  ;
74252: LD_ADDR_OWVAR 33
74256: PUSH
74257: LD_STRING 
74259: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74260: LD_ADDR_OWVAR 35
74264: PUSH
74265: LD_INT 7
74267: NEG
74268: PPUSH
74269: LD_INT 7
74271: PPUSH
74272: CALL_OW 12
74276: ST_TO_ADDR
// animal := CreateHuman ;
74277: LD_ADDR_VAR 0 12
74281: PUSH
74282: CALL_OW 44
74286: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74287: LD_VAR 0 12
74291: PPUSH
74292: LD_VAR 0 8
74296: PPUSH
74297: LD_INT 0
74299: PPUSH
74300: CALL 76206 0 3
// end ;
74304: GO 74241
74306: POP
74307: POP
// if apemans then
74308: LD_VAR 0 3
74312: IFFALSE 74435
// for i = 1 to apemans do
74314: LD_ADDR_VAR 0 11
74318: PUSH
74319: DOUBLE
74320: LD_INT 1
74322: DEC
74323: ST_TO_ADDR
74324: LD_VAR 0 3
74328: PUSH
74329: FOR_TO
74330: IFFALSE 74433
// begin hc_class = class_apeman ;
74332: LD_ADDR_OWVAR 28
74336: PUSH
74337: LD_INT 12
74339: ST_TO_ADDR
// hc_gallery =  ;
74340: LD_ADDR_OWVAR 33
74344: PUSH
74345: LD_STRING 
74347: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74348: LD_ADDR_OWVAR 35
74352: PUSH
74353: LD_INT 2
74355: NEG
74356: PPUSH
74357: LD_INT 2
74359: PPUSH
74360: CALL_OW 12
74364: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74365: LD_ADDR_OWVAR 31
74369: PUSH
74370: LD_INT 1
74372: PPUSH
74373: LD_INT 3
74375: PPUSH
74376: CALL_OW 12
74380: PUSH
74381: LD_INT 1
74383: PPUSH
74384: LD_INT 3
74386: PPUSH
74387: CALL_OW 12
74391: PUSH
74392: LD_INT 0
74394: PUSH
74395: LD_INT 0
74397: PUSH
74398: EMPTY
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: ST_TO_ADDR
// animal := CreateHuman ;
74404: LD_ADDR_VAR 0 12
74408: PUSH
74409: CALL_OW 44
74413: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74414: LD_VAR 0 12
74418: PPUSH
74419: LD_VAR 0 8
74423: PPUSH
74424: LD_INT 0
74426: PPUSH
74427: CALL 76206 0 3
// end ;
74431: GO 74329
74433: POP
74434: POP
// if enchidnas then
74435: LD_VAR 0 4
74439: IFFALSE 74506
// for i = 1 to enchidnas do
74441: LD_ADDR_VAR 0 11
74445: PUSH
74446: DOUBLE
74447: LD_INT 1
74449: DEC
74450: ST_TO_ADDR
74451: LD_VAR 0 4
74455: PUSH
74456: FOR_TO
74457: IFFALSE 74504
// begin hc_class = 13 ;
74459: LD_ADDR_OWVAR 28
74463: PUSH
74464: LD_INT 13
74466: ST_TO_ADDR
// hc_gallery =  ;
74467: LD_ADDR_OWVAR 33
74471: PUSH
74472: LD_STRING 
74474: ST_TO_ADDR
// animal := CreateHuman ;
74475: LD_ADDR_VAR 0 12
74479: PUSH
74480: CALL_OW 44
74484: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74485: LD_VAR 0 12
74489: PPUSH
74490: LD_VAR 0 8
74494: PPUSH
74495: LD_INT 0
74497: PPUSH
74498: CALL 76206 0 3
// end ;
74502: GO 74456
74504: POP
74505: POP
// if fishes then
74506: LD_VAR 0 7
74510: IFFALSE 74577
// for i = 1 to fishes do
74512: LD_ADDR_VAR 0 11
74516: PUSH
74517: DOUBLE
74518: LD_INT 1
74520: DEC
74521: ST_TO_ADDR
74522: LD_VAR 0 7
74526: PUSH
74527: FOR_TO
74528: IFFALSE 74575
// begin hc_class = 20 ;
74530: LD_ADDR_OWVAR 28
74534: PUSH
74535: LD_INT 20
74537: ST_TO_ADDR
// hc_gallery =  ;
74538: LD_ADDR_OWVAR 33
74542: PUSH
74543: LD_STRING 
74545: ST_TO_ADDR
// animal := CreateHuman ;
74546: LD_ADDR_VAR 0 12
74550: PUSH
74551: CALL_OW 44
74555: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74556: LD_VAR 0 12
74560: PPUSH
74561: LD_VAR 0 9
74565: PPUSH
74566: LD_INT 0
74568: PPUSH
74569: CALL 76206 0 3
// end ;
74573: GO 74527
74575: POP
74576: POP
// end ;
74577: LD_VAR 0 10
74581: RET
// export function WantHeal ( sci , unit ) ; begin
74582: LD_INT 0
74584: PPUSH
// if GetTaskList ( sci ) > 0 then
74585: LD_VAR 0 1
74589: PPUSH
74590: CALL_OW 437
74594: PUSH
74595: LD_INT 0
74597: GREATER
74598: IFFALSE 74668
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74600: LD_VAR 0 1
74604: PPUSH
74605: CALL_OW 437
74609: PUSH
74610: LD_INT 1
74612: ARRAY
74613: PUSH
74614: LD_INT 1
74616: ARRAY
74617: PUSH
74618: LD_STRING l
74620: EQUAL
74621: PUSH
74622: LD_VAR 0 1
74626: PPUSH
74627: CALL_OW 437
74631: PUSH
74632: LD_INT 1
74634: ARRAY
74635: PUSH
74636: LD_INT 4
74638: ARRAY
74639: PUSH
74640: LD_VAR 0 2
74644: EQUAL
74645: AND
74646: IFFALSE 74658
// result := true else
74648: LD_ADDR_VAR 0 3
74652: PUSH
74653: LD_INT 1
74655: ST_TO_ADDR
74656: GO 74666
// result := false ;
74658: LD_ADDR_VAR 0 3
74662: PUSH
74663: LD_INT 0
74665: ST_TO_ADDR
// end else
74666: GO 74676
// result := false ;
74668: LD_ADDR_VAR 0 3
74672: PUSH
74673: LD_INT 0
74675: ST_TO_ADDR
// end ;
74676: LD_VAR 0 3
74680: RET
// export function HealTarget ( sci ) ; begin
74681: LD_INT 0
74683: PPUSH
// if not sci then
74684: LD_VAR 0 1
74688: NOT
74689: IFFALSE 74693
// exit ;
74691: GO 74758
// result := 0 ;
74693: LD_ADDR_VAR 0 2
74697: PUSH
74698: LD_INT 0
74700: ST_TO_ADDR
// if GetTaskList ( sci ) then
74701: LD_VAR 0 1
74705: PPUSH
74706: CALL_OW 437
74710: IFFALSE 74758
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74712: LD_VAR 0 1
74716: PPUSH
74717: CALL_OW 437
74721: PUSH
74722: LD_INT 1
74724: ARRAY
74725: PUSH
74726: LD_INT 1
74728: ARRAY
74729: PUSH
74730: LD_STRING l
74732: EQUAL
74733: IFFALSE 74758
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74735: LD_ADDR_VAR 0 2
74739: PUSH
74740: LD_VAR 0 1
74744: PPUSH
74745: CALL_OW 437
74749: PUSH
74750: LD_INT 1
74752: ARRAY
74753: PUSH
74754: LD_INT 4
74756: ARRAY
74757: ST_TO_ADDR
// end ;
74758: LD_VAR 0 2
74762: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74763: LD_INT 0
74765: PPUSH
74766: PPUSH
74767: PPUSH
74768: PPUSH
// if not base_units then
74769: LD_VAR 0 1
74773: NOT
74774: IFFALSE 74778
// exit ;
74776: GO 74865
// result := false ;
74778: LD_ADDR_VAR 0 2
74782: PUSH
74783: LD_INT 0
74785: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74786: LD_ADDR_VAR 0 5
74790: PUSH
74791: LD_VAR 0 1
74795: PPUSH
74796: LD_INT 21
74798: PUSH
74799: LD_INT 3
74801: PUSH
74802: EMPTY
74803: LIST
74804: LIST
74805: PPUSH
74806: CALL_OW 72
74810: ST_TO_ADDR
// if not tmp then
74811: LD_VAR 0 5
74815: NOT
74816: IFFALSE 74820
// exit ;
74818: GO 74865
// for i in tmp do
74820: LD_ADDR_VAR 0 3
74824: PUSH
74825: LD_VAR 0 5
74829: PUSH
74830: FOR_IN
74831: IFFALSE 74863
// begin result := EnemyInRange ( i , 22 ) ;
74833: LD_ADDR_VAR 0 2
74837: PUSH
74838: LD_VAR 0 3
74842: PPUSH
74843: LD_INT 22
74845: PPUSH
74846: CALL 72452 0 2
74850: ST_TO_ADDR
// if result then
74851: LD_VAR 0 2
74855: IFFALSE 74861
// exit ;
74857: POP
74858: POP
74859: GO 74865
// end ;
74861: GO 74830
74863: POP
74864: POP
// end ;
74865: LD_VAR 0 2
74869: RET
// export function FilterByTag ( units , tag ) ; begin
74870: LD_INT 0
74872: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74873: LD_ADDR_VAR 0 3
74877: PUSH
74878: LD_VAR 0 1
74882: PPUSH
74883: LD_INT 120
74885: PUSH
74886: LD_VAR 0 2
74890: PUSH
74891: EMPTY
74892: LIST
74893: LIST
74894: PPUSH
74895: CALL_OW 72
74899: ST_TO_ADDR
// end ;
74900: LD_VAR 0 3
74904: RET
// export function IsDriver ( un ) ; begin
74905: LD_INT 0
74907: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74908: LD_ADDR_VAR 0 2
74912: PUSH
74913: LD_VAR 0 1
74917: PUSH
74918: LD_INT 55
74920: PUSH
74921: EMPTY
74922: LIST
74923: PPUSH
74924: CALL_OW 69
74928: IN
74929: ST_TO_ADDR
// end ;
74930: LD_VAR 0 2
74934: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74935: LD_INT 0
74937: PPUSH
74938: PPUSH
// list := [ ] ;
74939: LD_ADDR_VAR 0 5
74943: PUSH
74944: EMPTY
74945: ST_TO_ADDR
// case d of 0 :
74946: LD_VAR 0 3
74950: PUSH
74951: LD_INT 0
74953: DOUBLE
74954: EQUAL
74955: IFTRUE 74959
74957: GO 75092
74959: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74960: LD_ADDR_VAR 0 5
74964: PUSH
74965: LD_VAR 0 1
74969: PUSH
74970: LD_INT 4
74972: MINUS
74973: PUSH
74974: LD_VAR 0 2
74978: PUSH
74979: LD_INT 4
74981: MINUS
74982: PUSH
74983: LD_INT 2
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: LIST
74990: PUSH
74991: LD_VAR 0 1
74995: PUSH
74996: LD_INT 3
74998: MINUS
74999: PUSH
75000: LD_VAR 0 2
75004: PUSH
75005: LD_INT 1
75007: PUSH
75008: EMPTY
75009: LIST
75010: LIST
75011: LIST
75012: PUSH
75013: LD_VAR 0 1
75017: PUSH
75018: LD_INT 4
75020: PLUS
75021: PUSH
75022: LD_VAR 0 2
75026: PUSH
75027: LD_INT 4
75029: PUSH
75030: EMPTY
75031: LIST
75032: LIST
75033: LIST
75034: PUSH
75035: LD_VAR 0 1
75039: PUSH
75040: LD_INT 3
75042: PLUS
75043: PUSH
75044: LD_VAR 0 2
75048: PUSH
75049: LD_INT 3
75051: PLUS
75052: PUSH
75053: LD_INT 5
75055: PUSH
75056: EMPTY
75057: LIST
75058: LIST
75059: LIST
75060: PUSH
75061: LD_VAR 0 1
75065: PUSH
75066: LD_VAR 0 2
75070: PUSH
75071: LD_INT 4
75073: PLUS
75074: PUSH
75075: LD_INT 0
75077: PUSH
75078: EMPTY
75079: LIST
75080: LIST
75081: LIST
75082: PUSH
75083: EMPTY
75084: LIST
75085: LIST
75086: LIST
75087: LIST
75088: LIST
75089: ST_TO_ADDR
// end ; 1 :
75090: GO 75790
75092: LD_INT 1
75094: DOUBLE
75095: EQUAL
75096: IFTRUE 75100
75098: GO 75233
75100: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75101: LD_ADDR_VAR 0 5
75105: PUSH
75106: LD_VAR 0 1
75110: PUSH
75111: LD_VAR 0 2
75115: PUSH
75116: LD_INT 4
75118: MINUS
75119: PUSH
75120: LD_INT 3
75122: PUSH
75123: EMPTY
75124: LIST
75125: LIST
75126: LIST
75127: PUSH
75128: LD_VAR 0 1
75132: PUSH
75133: LD_INT 3
75135: MINUS
75136: PUSH
75137: LD_VAR 0 2
75141: PUSH
75142: LD_INT 3
75144: MINUS
75145: PUSH
75146: LD_INT 2
75148: PUSH
75149: EMPTY
75150: LIST
75151: LIST
75152: LIST
75153: PUSH
75154: LD_VAR 0 1
75158: PUSH
75159: LD_INT 4
75161: MINUS
75162: PUSH
75163: LD_VAR 0 2
75167: PUSH
75168: LD_INT 1
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: LIST
75175: PUSH
75176: LD_VAR 0 1
75180: PUSH
75181: LD_VAR 0 2
75185: PUSH
75186: LD_INT 3
75188: PLUS
75189: PUSH
75190: LD_INT 0
75192: PUSH
75193: EMPTY
75194: LIST
75195: LIST
75196: LIST
75197: PUSH
75198: LD_VAR 0 1
75202: PUSH
75203: LD_INT 4
75205: PLUS
75206: PUSH
75207: LD_VAR 0 2
75211: PUSH
75212: LD_INT 4
75214: PLUS
75215: PUSH
75216: LD_INT 5
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: LIST
75223: PUSH
75224: EMPTY
75225: LIST
75226: LIST
75227: LIST
75228: LIST
75229: LIST
75230: ST_TO_ADDR
// end ; 2 :
75231: GO 75790
75233: LD_INT 2
75235: DOUBLE
75236: EQUAL
75237: IFTRUE 75241
75239: GO 75370
75241: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75242: LD_ADDR_VAR 0 5
75246: PUSH
75247: LD_VAR 0 1
75251: PUSH
75252: LD_VAR 0 2
75256: PUSH
75257: LD_INT 3
75259: MINUS
75260: PUSH
75261: LD_INT 3
75263: PUSH
75264: EMPTY
75265: LIST
75266: LIST
75267: LIST
75268: PUSH
75269: LD_VAR 0 1
75273: PUSH
75274: LD_INT 4
75276: PLUS
75277: PUSH
75278: LD_VAR 0 2
75282: PUSH
75283: LD_INT 4
75285: PUSH
75286: EMPTY
75287: LIST
75288: LIST
75289: LIST
75290: PUSH
75291: LD_VAR 0 1
75295: PUSH
75296: LD_VAR 0 2
75300: PUSH
75301: LD_INT 4
75303: PLUS
75304: PUSH
75305: LD_INT 0
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: LIST
75312: PUSH
75313: LD_VAR 0 1
75317: PUSH
75318: LD_INT 3
75320: MINUS
75321: PUSH
75322: LD_VAR 0 2
75326: PUSH
75327: LD_INT 1
75329: PUSH
75330: EMPTY
75331: LIST
75332: LIST
75333: LIST
75334: PUSH
75335: LD_VAR 0 1
75339: PUSH
75340: LD_INT 4
75342: MINUS
75343: PUSH
75344: LD_VAR 0 2
75348: PUSH
75349: LD_INT 4
75351: MINUS
75352: PUSH
75353: LD_INT 2
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: LIST
75360: PUSH
75361: EMPTY
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: ST_TO_ADDR
// end ; 3 :
75368: GO 75790
75370: LD_INT 3
75372: DOUBLE
75373: EQUAL
75374: IFTRUE 75378
75376: GO 75511
75378: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75379: LD_ADDR_VAR 0 5
75383: PUSH
75384: LD_VAR 0 1
75388: PUSH
75389: LD_INT 3
75391: PLUS
75392: PUSH
75393: LD_VAR 0 2
75397: PUSH
75398: LD_INT 4
75400: PUSH
75401: EMPTY
75402: LIST
75403: LIST
75404: LIST
75405: PUSH
75406: LD_VAR 0 1
75410: PUSH
75411: LD_INT 4
75413: PLUS
75414: PUSH
75415: LD_VAR 0 2
75419: PUSH
75420: LD_INT 4
75422: PLUS
75423: PUSH
75424: LD_INT 5
75426: PUSH
75427: EMPTY
75428: LIST
75429: LIST
75430: LIST
75431: PUSH
75432: LD_VAR 0 1
75436: PUSH
75437: LD_INT 4
75439: MINUS
75440: PUSH
75441: LD_VAR 0 2
75445: PUSH
75446: LD_INT 1
75448: PUSH
75449: EMPTY
75450: LIST
75451: LIST
75452: LIST
75453: PUSH
75454: LD_VAR 0 1
75458: PUSH
75459: LD_VAR 0 2
75463: PUSH
75464: LD_INT 4
75466: MINUS
75467: PUSH
75468: LD_INT 3
75470: PUSH
75471: EMPTY
75472: LIST
75473: LIST
75474: LIST
75475: PUSH
75476: LD_VAR 0 1
75480: PUSH
75481: LD_INT 3
75483: MINUS
75484: PUSH
75485: LD_VAR 0 2
75489: PUSH
75490: LD_INT 3
75492: MINUS
75493: PUSH
75494: LD_INT 2
75496: PUSH
75497: EMPTY
75498: LIST
75499: LIST
75500: LIST
75501: PUSH
75502: EMPTY
75503: LIST
75504: LIST
75505: LIST
75506: LIST
75507: LIST
75508: ST_TO_ADDR
// end ; 4 :
75509: GO 75790
75511: LD_INT 4
75513: DOUBLE
75514: EQUAL
75515: IFTRUE 75519
75517: GO 75652
75519: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75520: LD_ADDR_VAR 0 5
75524: PUSH
75525: LD_VAR 0 1
75529: PUSH
75530: LD_VAR 0 2
75534: PUSH
75535: LD_INT 4
75537: PLUS
75538: PUSH
75539: LD_INT 0
75541: PUSH
75542: EMPTY
75543: LIST
75544: LIST
75545: LIST
75546: PUSH
75547: LD_VAR 0 1
75551: PUSH
75552: LD_INT 3
75554: PLUS
75555: PUSH
75556: LD_VAR 0 2
75560: PUSH
75561: LD_INT 3
75563: PLUS
75564: PUSH
75565: LD_INT 5
75567: PUSH
75568: EMPTY
75569: LIST
75570: LIST
75571: LIST
75572: PUSH
75573: LD_VAR 0 1
75577: PUSH
75578: LD_INT 4
75580: PLUS
75581: PUSH
75582: LD_VAR 0 2
75586: PUSH
75587: LD_INT 4
75589: PUSH
75590: EMPTY
75591: LIST
75592: LIST
75593: LIST
75594: PUSH
75595: LD_VAR 0 1
75599: PUSH
75600: LD_VAR 0 2
75604: PUSH
75605: LD_INT 3
75607: MINUS
75608: PUSH
75609: LD_INT 3
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: LIST
75616: PUSH
75617: LD_VAR 0 1
75621: PUSH
75622: LD_INT 4
75624: MINUS
75625: PUSH
75626: LD_VAR 0 2
75630: PUSH
75631: LD_INT 4
75633: MINUS
75634: PUSH
75635: LD_INT 2
75637: PUSH
75638: EMPTY
75639: LIST
75640: LIST
75641: LIST
75642: PUSH
75643: EMPTY
75644: LIST
75645: LIST
75646: LIST
75647: LIST
75648: LIST
75649: ST_TO_ADDR
// end ; 5 :
75650: GO 75790
75652: LD_INT 5
75654: DOUBLE
75655: EQUAL
75656: IFTRUE 75660
75658: GO 75789
75660: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75661: LD_ADDR_VAR 0 5
75665: PUSH
75666: LD_VAR 0 1
75670: PUSH
75671: LD_INT 4
75673: MINUS
75674: PUSH
75675: LD_VAR 0 2
75679: PUSH
75680: LD_INT 1
75682: PUSH
75683: EMPTY
75684: LIST
75685: LIST
75686: LIST
75687: PUSH
75688: LD_VAR 0 1
75692: PUSH
75693: LD_VAR 0 2
75697: PUSH
75698: LD_INT 4
75700: MINUS
75701: PUSH
75702: LD_INT 3
75704: PUSH
75705: EMPTY
75706: LIST
75707: LIST
75708: LIST
75709: PUSH
75710: LD_VAR 0 1
75714: PUSH
75715: LD_INT 4
75717: PLUS
75718: PUSH
75719: LD_VAR 0 2
75723: PUSH
75724: LD_INT 4
75726: PLUS
75727: PUSH
75728: LD_INT 5
75730: PUSH
75731: EMPTY
75732: LIST
75733: LIST
75734: LIST
75735: PUSH
75736: LD_VAR 0 1
75740: PUSH
75741: LD_INT 3
75743: PLUS
75744: PUSH
75745: LD_VAR 0 2
75749: PUSH
75750: LD_INT 4
75752: PUSH
75753: EMPTY
75754: LIST
75755: LIST
75756: LIST
75757: PUSH
75758: LD_VAR 0 1
75762: PUSH
75763: LD_VAR 0 2
75767: PUSH
75768: LD_INT 3
75770: PLUS
75771: PUSH
75772: LD_INT 0
75774: PUSH
75775: EMPTY
75776: LIST
75777: LIST
75778: LIST
75779: PUSH
75780: EMPTY
75781: LIST
75782: LIST
75783: LIST
75784: LIST
75785: LIST
75786: ST_TO_ADDR
// end ; end ;
75787: GO 75790
75789: POP
// result := list ;
75790: LD_ADDR_VAR 0 4
75794: PUSH
75795: LD_VAR 0 5
75799: ST_TO_ADDR
// end ;
75800: LD_VAR 0 4
75804: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75805: LD_INT 0
75807: PPUSH
75808: PPUSH
75809: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75810: LD_VAR 0 1
75814: NOT
75815: PUSH
75816: LD_VAR 0 2
75820: PUSH
75821: LD_INT 1
75823: PUSH
75824: LD_INT 2
75826: PUSH
75827: LD_INT 3
75829: PUSH
75830: LD_INT 4
75832: PUSH
75833: EMPTY
75834: LIST
75835: LIST
75836: LIST
75837: LIST
75838: IN
75839: NOT
75840: OR
75841: IFFALSE 75845
// exit ;
75843: GO 75928
// tmp := [ ] ;
75845: LD_ADDR_VAR 0 5
75849: PUSH
75850: EMPTY
75851: ST_TO_ADDR
// for i in units do
75852: LD_ADDR_VAR 0 4
75856: PUSH
75857: LD_VAR 0 1
75861: PUSH
75862: FOR_IN
75863: IFFALSE 75897
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75865: LD_ADDR_VAR 0 5
75869: PUSH
75870: LD_VAR 0 5
75874: PPUSH
75875: LD_VAR 0 4
75879: PPUSH
75880: LD_VAR 0 2
75884: PPUSH
75885: CALL_OW 259
75889: PPUSH
75890: CALL 77289 0 2
75894: ST_TO_ADDR
75895: GO 75862
75897: POP
75898: POP
// if not tmp then
75899: LD_VAR 0 5
75903: NOT
75904: IFFALSE 75908
// exit ;
75906: GO 75928
// result := SortListByListDesc ( units , tmp ) ;
75908: LD_ADDR_VAR 0 3
75912: PUSH
75913: LD_VAR 0 1
75917: PPUSH
75918: LD_VAR 0 5
75922: PPUSH
75923: CALL_OW 77
75927: ST_TO_ADDR
// end ;
75928: LD_VAR 0 3
75932: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75933: LD_INT 0
75935: PPUSH
75936: PPUSH
75937: PPUSH
// result := false ;
75938: LD_ADDR_VAR 0 3
75942: PUSH
75943: LD_INT 0
75945: ST_TO_ADDR
// if not building then
75946: LD_VAR 0 2
75950: NOT
75951: IFFALSE 75955
// exit ;
75953: GO 76093
// x := GetX ( building ) ;
75955: LD_ADDR_VAR 0 4
75959: PUSH
75960: LD_VAR 0 2
75964: PPUSH
75965: CALL_OW 250
75969: ST_TO_ADDR
// y := GetY ( building ) ;
75970: LD_ADDR_VAR 0 5
75974: PUSH
75975: LD_VAR 0 2
75979: PPUSH
75980: CALL_OW 251
75984: ST_TO_ADDR
// if not x or not y then
75985: LD_VAR 0 4
75989: NOT
75990: PUSH
75991: LD_VAR 0 5
75995: NOT
75996: OR
75997: IFFALSE 76001
// exit ;
75999: GO 76093
// if GetTaskList ( unit ) then
76001: LD_VAR 0 1
76005: PPUSH
76006: CALL_OW 437
76010: IFFALSE 76093
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76012: LD_STRING e
76014: PUSH
76015: LD_VAR 0 1
76019: PPUSH
76020: CALL_OW 437
76024: PUSH
76025: LD_INT 1
76027: ARRAY
76028: PUSH
76029: LD_INT 1
76031: ARRAY
76032: EQUAL
76033: PUSH
76034: LD_VAR 0 4
76038: PUSH
76039: LD_VAR 0 1
76043: PPUSH
76044: CALL_OW 437
76048: PUSH
76049: LD_INT 1
76051: ARRAY
76052: PUSH
76053: LD_INT 2
76055: ARRAY
76056: EQUAL
76057: AND
76058: PUSH
76059: LD_VAR 0 5
76063: PUSH
76064: LD_VAR 0 1
76068: PPUSH
76069: CALL_OW 437
76073: PUSH
76074: LD_INT 1
76076: ARRAY
76077: PUSH
76078: LD_INT 3
76080: ARRAY
76081: EQUAL
76082: AND
76083: IFFALSE 76093
// result := true end ;
76085: LD_ADDR_VAR 0 3
76089: PUSH
76090: LD_INT 1
76092: ST_TO_ADDR
// end ;
76093: LD_VAR 0 3
76097: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76098: LD_INT 0
76100: PPUSH
// result := false ;
76101: LD_ADDR_VAR 0 4
76105: PUSH
76106: LD_INT 0
76108: ST_TO_ADDR
// if GetTaskList ( unit ) then
76109: LD_VAR 0 1
76113: PPUSH
76114: CALL_OW 437
76118: IFFALSE 76201
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76120: LD_STRING M
76122: PUSH
76123: LD_VAR 0 1
76127: PPUSH
76128: CALL_OW 437
76132: PUSH
76133: LD_INT 1
76135: ARRAY
76136: PUSH
76137: LD_INT 1
76139: ARRAY
76140: EQUAL
76141: PUSH
76142: LD_VAR 0 2
76146: PUSH
76147: LD_VAR 0 1
76151: PPUSH
76152: CALL_OW 437
76156: PUSH
76157: LD_INT 1
76159: ARRAY
76160: PUSH
76161: LD_INT 2
76163: ARRAY
76164: EQUAL
76165: AND
76166: PUSH
76167: LD_VAR 0 3
76171: PUSH
76172: LD_VAR 0 1
76176: PPUSH
76177: CALL_OW 437
76181: PUSH
76182: LD_INT 1
76184: ARRAY
76185: PUSH
76186: LD_INT 3
76188: ARRAY
76189: EQUAL
76190: AND
76191: IFFALSE 76201
// result := true ;
76193: LD_ADDR_VAR 0 4
76197: PUSH
76198: LD_INT 1
76200: ST_TO_ADDR
// end ; end ;
76201: LD_VAR 0 4
76205: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76206: LD_INT 0
76208: PPUSH
76209: PPUSH
76210: PPUSH
76211: PPUSH
// if not unit or not area then
76212: LD_VAR 0 1
76216: NOT
76217: PUSH
76218: LD_VAR 0 2
76222: NOT
76223: OR
76224: IFFALSE 76228
// exit ;
76226: GO 76392
// tmp := AreaToList ( area , i ) ;
76228: LD_ADDR_VAR 0 6
76232: PUSH
76233: LD_VAR 0 2
76237: PPUSH
76238: LD_VAR 0 5
76242: PPUSH
76243: CALL_OW 517
76247: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76248: LD_ADDR_VAR 0 5
76252: PUSH
76253: DOUBLE
76254: LD_INT 1
76256: DEC
76257: ST_TO_ADDR
76258: LD_VAR 0 6
76262: PUSH
76263: LD_INT 1
76265: ARRAY
76266: PUSH
76267: FOR_TO
76268: IFFALSE 76390
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76270: LD_ADDR_VAR 0 7
76274: PUSH
76275: LD_VAR 0 6
76279: PUSH
76280: LD_INT 1
76282: ARRAY
76283: PUSH
76284: LD_VAR 0 5
76288: ARRAY
76289: PUSH
76290: LD_VAR 0 6
76294: PUSH
76295: LD_INT 2
76297: ARRAY
76298: PUSH
76299: LD_VAR 0 5
76303: ARRAY
76304: PUSH
76305: EMPTY
76306: LIST
76307: LIST
76308: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76309: LD_VAR 0 7
76313: PUSH
76314: LD_INT 1
76316: ARRAY
76317: PPUSH
76318: LD_VAR 0 7
76322: PUSH
76323: LD_INT 2
76325: ARRAY
76326: PPUSH
76327: CALL_OW 428
76331: PUSH
76332: LD_INT 0
76334: EQUAL
76335: IFFALSE 76388
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76337: LD_VAR 0 1
76341: PPUSH
76342: LD_VAR 0 7
76346: PUSH
76347: LD_INT 1
76349: ARRAY
76350: PPUSH
76351: LD_VAR 0 7
76355: PUSH
76356: LD_INT 2
76358: ARRAY
76359: PPUSH
76360: LD_VAR 0 3
76364: PPUSH
76365: CALL_OW 48
// result := IsPlaced ( unit ) ;
76369: LD_ADDR_VAR 0 4
76373: PUSH
76374: LD_VAR 0 1
76378: PPUSH
76379: CALL_OW 305
76383: ST_TO_ADDR
// exit ;
76384: POP
76385: POP
76386: GO 76392
// end ; end ;
76388: GO 76267
76390: POP
76391: POP
// end ;
76392: LD_VAR 0 4
76396: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76397: LD_INT 0
76399: PPUSH
76400: PPUSH
76401: PPUSH
// if not side or side > 8 then
76402: LD_VAR 0 1
76406: NOT
76407: PUSH
76408: LD_VAR 0 1
76412: PUSH
76413: LD_INT 8
76415: GREATER
76416: OR
76417: IFFALSE 76421
// exit ;
76419: GO 76608
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76421: LD_ADDR_VAR 0 4
76425: PUSH
76426: LD_INT 22
76428: PUSH
76429: LD_VAR 0 1
76433: PUSH
76434: EMPTY
76435: LIST
76436: LIST
76437: PUSH
76438: LD_INT 21
76440: PUSH
76441: LD_INT 3
76443: PUSH
76444: EMPTY
76445: LIST
76446: LIST
76447: PUSH
76448: EMPTY
76449: LIST
76450: LIST
76451: PPUSH
76452: CALL_OW 69
76456: ST_TO_ADDR
// if not tmp then
76457: LD_VAR 0 4
76461: NOT
76462: IFFALSE 76466
// exit ;
76464: GO 76608
// enable_addtolog := true ;
76466: LD_ADDR_OWVAR 81
76470: PUSH
76471: LD_INT 1
76473: ST_TO_ADDR
// AddToLog ( [ ) ;
76474: LD_STRING [
76476: PPUSH
76477: CALL_OW 561
// for i in tmp do
76481: LD_ADDR_VAR 0 3
76485: PUSH
76486: LD_VAR 0 4
76490: PUSH
76491: FOR_IN
76492: IFFALSE 76599
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76494: LD_STRING [
76496: PUSH
76497: LD_VAR 0 3
76501: PPUSH
76502: CALL_OW 266
76506: STR
76507: PUSH
76508: LD_STRING , 
76510: STR
76511: PUSH
76512: LD_VAR 0 3
76516: PPUSH
76517: CALL_OW 250
76521: STR
76522: PUSH
76523: LD_STRING , 
76525: STR
76526: PUSH
76527: LD_VAR 0 3
76531: PPUSH
76532: CALL_OW 251
76536: STR
76537: PUSH
76538: LD_STRING , 
76540: STR
76541: PUSH
76542: LD_VAR 0 3
76546: PPUSH
76547: CALL_OW 254
76551: STR
76552: PUSH
76553: LD_STRING , 
76555: STR
76556: PUSH
76557: LD_VAR 0 3
76561: PPUSH
76562: LD_INT 1
76564: PPUSH
76565: CALL_OW 268
76569: STR
76570: PUSH
76571: LD_STRING , 
76573: STR
76574: PUSH
76575: LD_VAR 0 3
76579: PPUSH
76580: LD_INT 2
76582: PPUSH
76583: CALL_OW 268
76587: STR
76588: PUSH
76589: LD_STRING ],
76591: STR
76592: PPUSH
76593: CALL_OW 561
// end ;
76597: GO 76491
76599: POP
76600: POP
// AddToLog ( ]; ) ;
76601: LD_STRING ];
76603: PPUSH
76604: CALL_OW 561
// end ;
76608: LD_VAR 0 2
76612: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76613: LD_INT 0
76615: PPUSH
76616: PPUSH
76617: PPUSH
76618: PPUSH
76619: PPUSH
// if not area or not rate or not max then
76620: LD_VAR 0 1
76624: NOT
76625: PUSH
76626: LD_VAR 0 2
76630: NOT
76631: OR
76632: PUSH
76633: LD_VAR 0 4
76637: NOT
76638: OR
76639: IFFALSE 76643
// exit ;
76641: GO 76832
// while 1 do
76643: LD_INT 1
76645: IFFALSE 76832
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76647: LD_ADDR_VAR 0 9
76651: PUSH
76652: LD_VAR 0 1
76656: PPUSH
76657: LD_INT 1
76659: PPUSH
76660: CALL_OW 287
76664: PUSH
76665: LD_INT 10
76667: MUL
76668: ST_TO_ADDR
// r := rate / 10 ;
76669: LD_ADDR_VAR 0 7
76673: PUSH
76674: LD_VAR 0 2
76678: PUSH
76679: LD_INT 10
76681: DIVREAL
76682: ST_TO_ADDR
// time := 1 1$00 ;
76683: LD_ADDR_VAR 0 8
76687: PUSH
76688: LD_INT 2100
76690: ST_TO_ADDR
// if amount < min then
76691: LD_VAR 0 9
76695: PUSH
76696: LD_VAR 0 3
76700: LESS
76701: IFFALSE 76719
// r := r * 2 else
76703: LD_ADDR_VAR 0 7
76707: PUSH
76708: LD_VAR 0 7
76712: PUSH
76713: LD_INT 2
76715: MUL
76716: ST_TO_ADDR
76717: GO 76745
// if amount > max then
76719: LD_VAR 0 9
76723: PUSH
76724: LD_VAR 0 4
76728: GREATER
76729: IFFALSE 76745
// r := r / 2 ;
76731: LD_ADDR_VAR 0 7
76735: PUSH
76736: LD_VAR 0 7
76740: PUSH
76741: LD_INT 2
76743: DIVREAL
76744: ST_TO_ADDR
// time := time / r ;
76745: LD_ADDR_VAR 0 8
76749: PUSH
76750: LD_VAR 0 8
76754: PUSH
76755: LD_VAR 0 7
76759: DIVREAL
76760: ST_TO_ADDR
// if time < 0 then
76761: LD_VAR 0 8
76765: PUSH
76766: LD_INT 0
76768: LESS
76769: IFFALSE 76786
// time := time * - 1 ;
76771: LD_ADDR_VAR 0 8
76775: PUSH
76776: LD_VAR 0 8
76780: PUSH
76781: LD_INT 1
76783: NEG
76784: MUL
76785: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76786: LD_VAR 0 8
76790: PUSH
76791: LD_INT 35
76793: PPUSH
76794: LD_INT 875
76796: PPUSH
76797: CALL_OW 12
76801: PLUS
76802: PPUSH
76803: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76807: LD_INT 1
76809: PPUSH
76810: LD_INT 5
76812: PPUSH
76813: CALL_OW 12
76817: PPUSH
76818: LD_VAR 0 1
76822: PPUSH
76823: LD_INT 1
76825: PPUSH
76826: CALL_OW 55
// end ;
76830: GO 76643
// end ;
76832: LD_VAR 0 5
76836: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76837: LD_INT 0
76839: PPUSH
76840: PPUSH
76841: PPUSH
76842: PPUSH
76843: PPUSH
76844: PPUSH
76845: PPUSH
76846: PPUSH
// if not turrets or not factories then
76847: LD_VAR 0 1
76851: NOT
76852: PUSH
76853: LD_VAR 0 2
76857: NOT
76858: OR
76859: IFFALSE 76863
// exit ;
76861: GO 77170
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76863: LD_ADDR_VAR 0 10
76867: PUSH
76868: LD_INT 5
76870: PUSH
76871: LD_INT 6
76873: PUSH
76874: EMPTY
76875: LIST
76876: LIST
76877: PUSH
76878: LD_INT 2
76880: PUSH
76881: LD_INT 4
76883: PUSH
76884: EMPTY
76885: LIST
76886: LIST
76887: PUSH
76888: LD_INT 3
76890: PUSH
76891: LD_INT 5
76893: PUSH
76894: EMPTY
76895: LIST
76896: LIST
76897: PUSH
76898: EMPTY
76899: LIST
76900: LIST
76901: LIST
76902: PUSH
76903: LD_INT 24
76905: PUSH
76906: LD_INT 25
76908: PUSH
76909: EMPTY
76910: LIST
76911: LIST
76912: PUSH
76913: LD_INT 23
76915: PUSH
76916: LD_INT 27
76918: PUSH
76919: EMPTY
76920: LIST
76921: LIST
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: PUSH
76927: LD_INT 42
76929: PUSH
76930: LD_INT 43
76932: PUSH
76933: EMPTY
76934: LIST
76935: LIST
76936: PUSH
76937: LD_INT 44
76939: PUSH
76940: LD_INT 46
76942: PUSH
76943: EMPTY
76944: LIST
76945: LIST
76946: PUSH
76947: LD_INT 45
76949: PUSH
76950: LD_INT 47
76952: PUSH
76953: EMPTY
76954: LIST
76955: LIST
76956: PUSH
76957: EMPTY
76958: LIST
76959: LIST
76960: LIST
76961: PUSH
76962: EMPTY
76963: LIST
76964: LIST
76965: LIST
76966: ST_TO_ADDR
// result := [ ] ;
76967: LD_ADDR_VAR 0 3
76971: PUSH
76972: EMPTY
76973: ST_TO_ADDR
// for i in turrets do
76974: LD_ADDR_VAR 0 4
76978: PUSH
76979: LD_VAR 0 1
76983: PUSH
76984: FOR_IN
76985: IFFALSE 77168
// begin nat := GetNation ( i ) ;
76987: LD_ADDR_VAR 0 7
76991: PUSH
76992: LD_VAR 0 4
76996: PPUSH
76997: CALL_OW 248
77001: ST_TO_ADDR
// weapon := 0 ;
77002: LD_ADDR_VAR 0 8
77006: PUSH
77007: LD_INT 0
77009: ST_TO_ADDR
// if not nat then
77010: LD_VAR 0 7
77014: NOT
77015: IFFALSE 77019
// continue ;
77017: GO 76984
// for j in list [ nat ] do
77019: LD_ADDR_VAR 0 5
77023: PUSH
77024: LD_VAR 0 10
77028: PUSH
77029: LD_VAR 0 7
77033: ARRAY
77034: PUSH
77035: FOR_IN
77036: IFFALSE 77077
// if GetBWeapon ( i ) = j [ 1 ] then
77038: LD_VAR 0 4
77042: PPUSH
77043: CALL_OW 269
77047: PUSH
77048: LD_VAR 0 5
77052: PUSH
77053: LD_INT 1
77055: ARRAY
77056: EQUAL
77057: IFFALSE 77075
// begin weapon := j [ 2 ] ;
77059: LD_ADDR_VAR 0 8
77063: PUSH
77064: LD_VAR 0 5
77068: PUSH
77069: LD_INT 2
77071: ARRAY
77072: ST_TO_ADDR
// break ;
77073: GO 77077
// end ;
77075: GO 77035
77077: POP
77078: POP
// if not weapon then
77079: LD_VAR 0 8
77083: NOT
77084: IFFALSE 77088
// continue ;
77086: GO 76984
// for k in factories do
77088: LD_ADDR_VAR 0 6
77092: PUSH
77093: LD_VAR 0 2
77097: PUSH
77098: FOR_IN
77099: IFFALSE 77164
// begin weapons := AvailableWeaponList ( k ) ;
77101: LD_ADDR_VAR 0 9
77105: PUSH
77106: LD_VAR 0 6
77110: PPUSH
77111: CALL_OW 478
77115: ST_TO_ADDR
// if not weapons then
77116: LD_VAR 0 9
77120: NOT
77121: IFFALSE 77125
// continue ;
77123: GO 77098
// if weapon in weapons then
77125: LD_VAR 0 8
77129: PUSH
77130: LD_VAR 0 9
77134: IN
77135: IFFALSE 77162
// begin result := [ i , weapon ] ;
77137: LD_ADDR_VAR 0 3
77141: PUSH
77142: LD_VAR 0 4
77146: PUSH
77147: LD_VAR 0 8
77151: PUSH
77152: EMPTY
77153: LIST
77154: LIST
77155: ST_TO_ADDR
// exit ;
77156: POP
77157: POP
77158: POP
77159: POP
77160: GO 77170
// end ; end ;
77162: GO 77098
77164: POP
77165: POP
// end ;
77166: GO 76984
77168: POP
77169: POP
// end ;
77170: LD_VAR 0 3
77174: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77175: LD_INT 0
77177: PPUSH
// if not side or side > 8 then
77178: LD_VAR 0 3
77182: NOT
77183: PUSH
77184: LD_VAR 0 3
77188: PUSH
77189: LD_INT 8
77191: GREATER
77192: OR
77193: IFFALSE 77197
// exit ;
77195: GO 77256
// if not range then
77197: LD_VAR 0 4
77201: NOT
77202: IFFALSE 77213
// range := - 12 ;
77204: LD_ADDR_VAR 0 4
77208: PUSH
77209: LD_INT 12
77211: NEG
77212: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77213: LD_VAR 0 1
77217: PPUSH
77218: LD_VAR 0 2
77222: PPUSH
77223: LD_VAR 0 3
77227: PPUSH
77228: LD_VAR 0 4
77232: PPUSH
77233: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77237: LD_VAR 0 1
77241: PPUSH
77242: LD_VAR 0 2
77246: PPUSH
77247: LD_VAR 0 3
77251: PPUSH
77252: CALL_OW 331
// end ;
77256: LD_VAR 0 5
77260: RET
// export function Video ( mode ) ; begin
77261: LD_INT 0
77263: PPUSH
// ingame_video = mode ;
77264: LD_ADDR_OWVAR 52
77268: PUSH
77269: LD_VAR 0 1
77273: ST_TO_ADDR
// interface_hidden = mode ;
77274: LD_ADDR_OWVAR 54
77278: PUSH
77279: LD_VAR 0 1
77283: ST_TO_ADDR
// end ;
77284: LD_VAR 0 2
77288: RET
// export function Join ( array , element ) ; begin
77289: LD_INT 0
77291: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77292: LD_ADDR_VAR 0 3
77296: PUSH
77297: LD_VAR 0 1
77301: PPUSH
77302: LD_VAR 0 1
77306: PUSH
77307: LD_INT 1
77309: PLUS
77310: PPUSH
77311: LD_VAR 0 2
77315: PPUSH
77316: CALL_OW 1
77320: ST_TO_ADDR
// end ;
77321: LD_VAR 0 3
77325: RET
// export function JoinUnion ( array , element ) ; begin
77326: LD_INT 0
77328: PPUSH
// result := array union element ;
77329: LD_ADDR_VAR 0 3
77333: PUSH
77334: LD_VAR 0 1
77338: PUSH
77339: LD_VAR 0 2
77343: UNION
77344: ST_TO_ADDR
// end ;
77345: LD_VAR 0 3
77349: RET
// export function GetBehemoths ( side ) ; begin
77350: LD_INT 0
77352: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77353: LD_ADDR_VAR 0 2
77357: PUSH
77358: LD_INT 22
77360: PUSH
77361: LD_VAR 0 1
77365: PUSH
77366: EMPTY
77367: LIST
77368: LIST
77369: PUSH
77370: LD_INT 31
77372: PUSH
77373: LD_INT 25
77375: PUSH
77376: EMPTY
77377: LIST
77378: LIST
77379: PUSH
77380: EMPTY
77381: LIST
77382: LIST
77383: PPUSH
77384: CALL_OW 69
77388: ST_TO_ADDR
// end ;
77389: LD_VAR 0 2
77393: RET
// export function Shuffle ( array ) ; var i , index ; begin
77394: LD_INT 0
77396: PPUSH
77397: PPUSH
77398: PPUSH
// result := [ ] ;
77399: LD_ADDR_VAR 0 2
77403: PUSH
77404: EMPTY
77405: ST_TO_ADDR
// if not array then
77406: LD_VAR 0 1
77410: NOT
77411: IFFALSE 77415
// exit ;
77413: GO 77514
// Randomize ;
77415: CALL_OW 10
// for i = array downto 1 do
77419: LD_ADDR_VAR 0 3
77423: PUSH
77424: DOUBLE
77425: LD_VAR 0 1
77429: INC
77430: ST_TO_ADDR
77431: LD_INT 1
77433: PUSH
77434: FOR_DOWNTO
77435: IFFALSE 77512
// begin index := rand ( 1 , array ) ;
77437: LD_ADDR_VAR 0 4
77441: PUSH
77442: LD_INT 1
77444: PPUSH
77445: LD_VAR 0 1
77449: PPUSH
77450: CALL_OW 12
77454: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77455: LD_ADDR_VAR 0 2
77459: PUSH
77460: LD_VAR 0 2
77464: PPUSH
77465: LD_VAR 0 2
77469: PUSH
77470: LD_INT 1
77472: PLUS
77473: PPUSH
77474: LD_VAR 0 1
77478: PUSH
77479: LD_VAR 0 4
77483: ARRAY
77484: PPUSH
77485: CALL_OW 2
77489: ST_TO_ADDR
// array := Delete ( array , index ) ;
77490: LD_ADDR_VAR 0 1
77494: PUSH
77495: LD_VAR 0 1
77499: PPUSH
77500: LD_VAR 0 4
77504: PPUSH
77505: CALL_OW 3
77509: ST_TO_ADDR
// end ;
77510: GO 77434
77512: POP
77513: POP
// end ;
77514: LD_VAR 0 2
77518: RET
// export function GetBaseMaterials ( base ) ; begin
77519: LD_INT 0
77521: PPUSH
// result := [ 0 , 0 , 0 ] ;
77522: LD_ADDR_VAR 0 2
77526: PUSH
77527: LD_INT 0
77529: PUSH
77530: LD_INT 0
77532: PUSH
77533: LD_INT 0
77535: PUSH
77536: EMPTY
77537: LIST
77538: LIST
77539: LIST
77540: ST_TO_ADDR
// if not base then
77541: LD_VAR 0 1
77545: NOT
77546: IFFALSE 77550
// exit ;
77548: GO 77599
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77550: LD_ADDR_VAR 0 2
77554: PUSH
77555: LD_VAR 0 1
77559: PPUSH
77560: LD_INT 1
77562: PPUSH
77563: CALL_OW 275
77567: PUSH
77568: LD_VAR 0 1
77572: PPUSH
77573: LD_INT 2
77575: PPUSH
77576: CALL_OW 275
77580: PUSH
77581: LD_VAR 0 1
77585: PPUSH
77586: LD_INT 3
77588: PPUSH
77589: CALL_OW 275
77593: PUSH
77594: EMPTY
77595: LIST
77596: LIST
77597: LIST
77598: ST_TO_ADDR
// end ;
77599: LD_VAR 0 2
77603: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77604: LD_INT 0
77606: PPUSH
77607: PPUSH
// result := array ;
77608: LD_ADDR_VAR 0 3
77612: PUSH
77613: LD_VAR 0 1
77617: ST_TO_ADDR
// if size >= result then
77618: LD_VAR 0 2
77622: PUSH
77623: LD_VAR 0 3
77627: GREATEREQUAL
77628: IFFALSE 77632
// exit ;
77630: GO 77682
// if size then
77632: LD_VAR 0 2
77636: IFFALSE 77682
// for i := array downto size do
77638: LD_ADDR_VAR 0 4
77642: PUSH
77643: DOUBLE
77644: LD_VAR 0 1
77648: INC
77649: ST_TO_ADDR
77650: LD_VAR 0 2
77654: PUSH
77655: FOR_DOWNTO
77656: IFFALSE 77680
// result := Delete ( result , result ) ;
77658: LD_ADDR_VAR 0 3
77662: PUSH
77663: LD_VAR 0 3
77667: PPUSH
77668: LD_VAR 0 3
77672: PPUSH
77673: CALL_OW 3
77677: ST_TO_ADDR
77678: GO 77655
77680: POP
77681: POP
// end ;
77682: LD_VAR 0 3
77686: RET
// export function ComExit ( unit ) ; var tmp ; begin
77687: LD_INT 0
77689: PPUSH
77690: PPUSH
// if not IsInUnit ( unit ) then
77691: LD_VAR 0 1
77695: PPUSH
77696: CALL_OW 310
77700: NOT
77701: IFFALSE 77705
// exit ;
77703: GO 77765
// tmp := IsInUnit ( unit ) ;
77705: LD_ADDR_VAR 0 3
77709: PUSH
77710: LD_VAR 0 1
77714: PPUSH
77715: CALL_OW 310
77719: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77720: LD_VAR 0 3
77724: PPUSH
77725: CALL_OW 247
77729: PUSH
77730: LD_INT 2
77732: EQUAL
77733: IFFALSE 77746
// ComExitVehicle ( unit ) else
77735: LD_VAR 0 1
77739: PPUSH
77740: CALL_OW 121
77744: GO 77755
// ComExitBuilding ( unit ) ;
77746: LD_VAR 0 1
77750: PPUSH
77751: CALL_OW 122
// result := tmp ;
77755: LD_ADDR_VAR 0 2
77759: PUSH
77760: LD_VAR 0 3
77764: ST_TO_ADDR
// end ;
77765: LD_VAR 0 2
77769: RET
// export function ComExitAll ( units ) ; var i ; begin
77770: LD_INT 0
77772: PPUSH
77773: PPUSH
// if not units then
77774: LD_VAR 0 1
77778: NOT
77779: IFFALSE 77783
// exit ;
77781: GO 77809
// for i in units do
77783: LD_ADDR_VAR 0 3
77787: PUSH
77788: LD_VAR 0 1
77792: PUSH
77793: FOR_IN
77794: IFFALSE 77807
// ComExit ( i ) ;
77796: LD_VAR 0 3
77800: PPUSH
77801: CALL 77687 0 1
77805: GO 77793
77807: POP
77808: POP
// end ;
77809: LD_VAR 0 2
77813: RET
// export function ResetHc ; begin
77814: LD_INT 0
77816: PPUSH
// InitHc ;
77817: CALL_OW 19
// hc_importance := 0 ;
77821: LD_ADDR_OWVAR 32
77825: PUSH
77826: LD_INT 0
77828: ST_TO_ADDR
// end ;
77829: LD_VAR 0 1
77833: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77834: LD_INT 0
77836: PPUSH
77837: PPUSH
77838: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77839: LD_ADDR_VAR 0 6
77843: PUSH
77844: LD_VAR 0 1
77848: PUSH
77849: LD_VAR 0 3
77853: PLUS
77854: PUSH
77855: LD_INT 2
77857: DIV
77858: ST_TO_ADDR
// if _x < 0 then
77859: LD_VAR 0 6
77863: PUSH
77864: LD_INT 0
77866: LESS
77867: IFFALSE 77884
// _x := _x * - 1 ;
77869: LD_ADDR_VAR 0 6
77873: PUSH
77874: LD_VAR 0 6
77878: PUSH
77879: LD_INT 1
77881: NEG
77882: MUL
77883: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77884: LD_ADDR_VAR 0 7
77888: PUSH
77889: LD_VAR 0 2
77893: PUSH
77894: LD_VAR 0 4
77898: PLUS
77899: PUSH
77900: LD_INT 2
77902: DIV
77903: ST_TO_ADDR
// if _y < 0 then
77904: LD_VAR 0 7
77908: PUSH
77909: LD_INT 0
77911: LESS
77912: IFFALSE 77929
// _y := _y * - 1 ;
77914: LD_ADDR_VAR 0 7
77918: PUSH
77919: LD_VAR 0 7
77923: PUSH
77924: LD_INT 1
77926: NEG
77927: MUL
77928: ST_TO_ADDR
// result := [ _x , _y ] ;
77929: LD_ADDR_VAR 0 5
77933: PUSH
77934: LD_VAR 0 6
77938: PUSH
77939: LD_VAR 0 7
77943: PUSH
77944: EMPTY
77945: LIST
77946: LIST
77947: ST_TO_ADDR
// end ;
77948: LD_VAR 0 5
77952: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77953: LD_INT 0
77955: PPUSH
77956: PPUSH
77957: PPUSH
77958: PPUSH
// task := GetTaskList ( unit ) ;
77959: LD_ADDR_VAR 0 7
77963: PUSH
77964: LD_VAR 0 1
77968: PPUSH
77969: CALL_OW 437
77973: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77974: LD_VAR 0 7
77978: NOT
77979: PUSH
77980: LD_VAR 0 1
77984: PPUSH
77985: LD_VAR 0 2
77989: PPUSH
77990: CALL_OW 308
77994: NOT
77995: AND
77996: IFFALSE 78000
// exit ;
77998: GO 78118
// if IsInArea ( unit , area ) then
78000: LD_VAR 0 1
78004: PPUSH
78005: LD_VAR 0 2
78009: PPUSH
78010: CALL_OW 308
78014: IFFALSE 78032
// begin ComMoveToArea ( unit , goAway ) ;
78016: LD_VAR 0 1
78020: PPUSH
78021: LD_VAR 0 3
78025: PPUSH
78026: CALL_OW 113
// exit ;
78030: GO 78118
// end ; if task [ 1 ] [ 1 ] <> M then
78032: LD_VAR 0 7
78036: PUSH
78037: LD_INT 1
78039: ARRAY
78040: PUSH
78041: LD_INT 1
78043: ARRAY
78044: PUSH
78045: LD_STRING M
78047: NONEQUAL
78048: IFFALSE 78052
// exit ;
78050: GO 78118
// x := task [ 1 ] [ 2 ] ;
78052: LD_ADDR_VAR 0 5
78056: PUSH
78057: LD_VAR 0 7
78061: PUSH
78062: LD_INT 1
78064: ARRAY
78065: PUSH
78066: LD_INT 2
78068: ARRAY
78069: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78070: LD_ADDR_VAR 0 6
78074: PUSH
78075: LD_VAR 0 7
78079: PUSH
78080: LD_INT 1
78082: ARRAY
78083: PUSH
78084: LD_INT 3
78086: ARRAY
78087: ST_TO_ADDR
// if InArea ( x , y , area ) then
78088: LD_VAR 0 5
78092: PPUSH
78093: LD_VAR 0 6
78097: PPUSH
78098: LD_VAR 0 2
78102: PPUSH
78103: CALL_OW 309
78107: IFFALSE 78118
// ComStop ( unit ) ;
78109: LD_VAR 0 1
78113: PPUSH
78114: CALL_OW 141
// end ;
78118: LD_VAR 0 4
78122: RET
// export function Abs ( value ) ; begin
78123: LD_INT 0
78125: PPUSH
// result := value ;
78126: LD_ADDR_VAR 0 2
78130: PUSH
78131: LD_VAR 0 1
78135: ST_TO_ADDR
// if value < 0 then
78136: LD_VAR 0 1
78140: PUSH
78141: LD_INT 0
78143: LESS
78144: IFFALSE 78161
// result := value * - 1 ;
78146: LD_ADDR_VAR 0 2
78150: PUSH
78151: LD_VAR 0 1
78155: PUSH
78156: LD_INT 1
78158: NEG
78159: MUL
78160: ST_TO_ADDR
// end ;
78161: LD_VAR 0 2
78165: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78166: LD_INT 0
78168: PPUSH
78169: PPUSH
78170: PPUSH
78171: PPUSH
78172: PPUSH
78173: PPUSH
78174: PPUSH
78175: PPUSH
// if not unit or not building then
78176: LD_VAR 0 1
78180: NOT
78181: PUSH
78182: LD_VAR 0 2
78186: NOT
78187: OR
78188: IFFALSE 78192
// exit ;
78190: GO 78418
// x := GetX ( building ) ;
78192: LD_ADDR_VAR 0 4
78196: PUSH
78197: LD_VAR 0 2
78201: PPUSH
78202: CALL_OW 250
78206: ST_TO_ADDR
// y := GetY ( building ) ;
78207: LD_ADDR_VAR 0 6
78211: PUSH
78212: LD_VAR 0 2
78216: PPUSH
78217: CALL_OW 251
78221: ST_TO_ADDR
// d := GetDir ( building ) ;
78222: LD_ADDR_VAR 0 8
78226: PUSH
78227: LD_VAR 0 2
78231: PPUSH
78232: CALL_OW 254
78236: ST_TO_ADDR
// r := 4 ;
78237: LD_ADDR_VAR 0 9
78241: PUSH
78242: LD_INT 4
78244: ST_TO_ADDR
// for i := 1 to 5 do
78245: LD_ADDR_VAR 0 10
78249: PUSH
78250: DOUBLE
78251: LD_INT 1
78253: DEC
78254: ST_TO_ADDR
78255: LD_INT 5
78257: PUSH
78258: FOR_TO
78259: IFFALSE 78416
// begin _x := ShiftX ( x , d , r + i ) ;
78261: LD_ADDR_VAR 0 5
78265: PUSH
78266: LD_VAR 0 4
78270: PPUSH
78271: LD_VAR 0 8
78275: PPUSH
78276: LD_VAR 0 9
78280: PUSH
78281: LD_VAR 0 10
78285: PLUS
78286: PPUSH
78287: CALL_OW 272
78291: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78292: LD_ADDR_VAR 0 7
78296: PUSH
78297: LD_VAR 0 6
78301: PPUSH
78302: LD_VAR 0 8
78306: PPUSH
78307: LD_VAR 0 9
78311: PUSH
78312: LD_VAR 0 10
78316: PLUS
78317: PPUSH
78318: CALL_OW 273
78322: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78323: LD_VAR 0 5
78327: PPUSH
78328: LD_VAR 0 7
78332: PPUSH
78333: CALL_OW 488
78337: PUSH
78338: LD_VAR 0 5
78342: PPUSH
78343: LD_VAR 0 7
78347: PPUSH
78348: CALL_OW 428
78352: PPUSH
78353: CALL_OW 247
78357: PUSH
78358: LD_INT 3
78360: PUSH
78361: LD_INT 2
78363: PUSH
78364: EMPTY
78365: LIST
78366: LIST
78367: IN
78368: NOT
78369: AND
78370: IFFALSE 78414
// begin ComMoveXY ( unit , _x , _y ) ;
78372: LD_VAR 0 1
78376: PPUSH
78377: LD_VAR 0 5
78381: PPUSH
78382: LD_VAR 0 7
78386: PPUSH
78387: CALL_OW 111
// result := [ _x , _y ] ;
78391: LD_ADDR_VAR 0 3
78395: PUSH
78396: LD_VAR 0 5
78400: PUSH
78401: LD_VAR 0 7
78405: PUSH
78406: EMPTY
78407: LIST
78408: LIST
78409: ST_TO_ADDR
// exit ;
78410: POP
78411: POP
78412: GO 78418
// end ; end ;
78414: GO 78258
78416: POP
78417: POP
// end ;
78418: LD_VAR 0 3
78422: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78423: LD_INT 0
78425: PPUSH
78426: PPUSH
78427: PPUSH
// result := 0 ;
78428: LD_ADDR_VAR 0 3
78432: PUSH
78433: LD_INT 0
78435: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78436: LD_VAR 0 1
78440: PUSH
78441: LD_INT 0
78443: LESS
78444: PUSH
78445: LD_VAR 0 1
78449: PUSH
78450: LD_INT 8
78452: GREATER
78453: OR
78454: PUSH
78455: LD_VAR 0 2
78459: PUSH
78460: LD_INT 0
78462: LESS
78463: OR
78464: PUSH
78465: LD_VAR 0 2
78469: PUSH
78470: LD_INT 8
78472: GREATER
78473: OR
78474: IFFALSE 78478
// exit ;
78476: GO 78553
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78478: LD_ADDR_VAR 0 4
78482: PUSH
78483: LD_INT 22
78485: PUSH
78486: LD_VAR 0 2
78490: PUSH
78491: EMPTY
78492: LIST
78493: LIST
78494: PPUSH
78495: CALL_OW 69
78499: PUSH
78500: FOR_IN
78501: IFFALSE 78551
// begin un := UnitShoot ( i ) ;
78503: LD_ADDR_VAR 0 5
78507: PUSH
78508: LD_VAR 0 4
78512: PPUSH
78513: CALL_OW 504
78517: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78518: LD_VAR 0 5
78522: PPUSH
78523: CALL_OW 255
78527: PUSH
78528: LD_VAR 0 1
78532: EQUAL
78533: IFFALSE 78549
// begin result := un ;
78535: LD_ADDR_VAR 0 3
78539: PUSH
78540: LD_VAR 0 5
78544: ST_TO_ADDR
// exit ;
78545: POP
78546: POP
78547: GO 78553
// end ; end ;
78549: GO 78500
78551: POP
78552: POP
// end ;
78553: LD_VAR 0 3
78557: RET
// export function GetCargoBay ( units ) ; begin
78558: LD_INT 0
78560: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78561: LD_ADDR_VAR 0 2
78565: PUSH
78566: LD_VAR 0 1
78570: PPUSH
78571: LD_INT 2
78573: PUSH
78574: LD_INT 34
78576: PUSH
78577: LD_INT 12
78579: PUSH
78580: EMPTY
78581: LIST
78582: LIST
78583: PUSH
78584: LD_INT 34
78586: PUSH
78587: LD_INT 51
78589: PUSH
78590: EMPTY
78591: LIST
78592: LIST
78593: PUSH
78594: LD_INT 34
78596: PUSH
78597: LD_INT 32
78599: PUSH
78600: EMPTY
78601: LIST
78602: LIST
78603: PUSH
78604: LD_INT 34
78606: PUSH
78607: LD_INT 89
78609: PUSH
78610: EMPTY
78611: LIST
78612: LIST
78613: PUSH
78614: EMPTY
78615: LIST
78616: LIST
78617: LIST
78618: LIST
78619: LIST
78620: PPUSH
78621: CALL_OW 72
78625: ST_TO_ADDR
// end ;
78626: LD_VAR 0 2
78630: RET
// export function Negate ( value ) ; begin
78631: LD_INT 0
78633: PPUSH
// result := not value ;
78634: LD_ADDR_VAR 0 2
78638: PUSH
78639: LD_VAR 0 1
78643: NOT
78644: ST_TO_ADDR
// end ;
78645: LD_VAR 0 2
78649: RET
// export function Inc ( value ) ; begin
78650: LD_INT 0
78652: PPUSH
// result := value + 1 ;
78653: LD_ADDR_VAR 0 2
78657: PUSH
78658: LD_VAR 0 1
78662: PUSH
78663: LD_INT 1
78665: PLUS
78666: ST_TO_ADDR
// end ;
78667: LD_VAR 0 2
78671: RET
// export function Dec ( value ) ; begin
78672: LD_INT 0
78674: PPUSH
// result := value - 1 ;
78675: LD_ADDR_VAR 0 2
78679: PUSH
78680: LD_VAR 0 1
78684: PUSH
78685: LD_INT 1
78687: MINUS
78688: ST_TO_ADDR
// end ;
78689: LD_VAR 0 2
78693: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78694: LD_INT 0
78696: PPUSH
78697: PPUSH
78698: PPUSH
78699: PPUSH
78700: PPUSH
78701: PPUSH
78702: PPUSH
78703: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78704: LD_VAR 0 1
78708: PPUSH
78709: LD_VAR 0 2
78713: PPUSH
78714: CALL_OW 488
78718: NOT
78719: PUSH
78720: LD_VAR 0 3
78724: PPUSH
78725: LD_VAR 0 4
78729: PPUSH
78730: CALL_OW 488
78734: NOT
78735: OR
78736: IFFALSE 78749
// begin result := - 1 ;
78738: LD_ADDR_VAR 0 5
78742: PUSH
78743: LD_INT 1
78745: NEG
78746: ST_TO_ADDR
// exit ;
78747: GO 78984
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78749: LD_ADDR_VAR 0 12
78753: PUSH
78754: LD_VAR 0 1
78758: PPUSH
78759: LD_VAR 0 2
78763: PPUSH
78764: LD_VAR 0 3
78768: PPUSH
78769: LD_VAR 0 4
78773: PPUSH
78774: CALL 77834 0 4
78778: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78779: LD_ADDR_VAR 0 11
78783: PUSH
78784: LD_VAR 0 1
78788: PPUSH
78789: LD_VAR 0 2
78793: PPUSH
78794: LD_VAR 0 12
78798: PUSH
78799: LD_INT 1
78801: ARRAY
78802: PPUSH
78803: LD_VAR 0 12
78807: PUSH
78808: LD_INT 2
78810: ARRAY
78811: PPUSH
78812: CALL_OW 298
78816: ST_TO_ADDR
// distance := 9999 ;
78817: LD_ADDR_VAR 0 10
78821: PUSH
78822: LD_INT 9999
78824: ST_TO_ADDR
// for i := 0 to 5 do
78825: LD_ADDR_VAR 0 6
78829: PUSH
78830: DOUBLE
78831: LD_INT 0
78833: DEC
78834: ST_TO_ADDR
78835: LD_INT 5
78837: PUSH
78838: FOR_TO
78839: IFFALSE 78982
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78841: LD_ADDR_VAR 0 7
78845: PUSH
78846: LD_VAR 0 1
78850: PPUSH
78851: LD_VAR 0 6
78855: PPUSH
78856: LD_VAR 0 11
78860: PPUSH
78861: CALL_OW 272
78865: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78866: LD_ADDR_VAR 0 8
78870: PUSH
78871: LD_VAR 0 2
78875: PPUSH
78876: LD_VAR 0 6
78880: PPUSH
78881: LD_VAR 0 11
78885: PPUSH
78886: CALL_OW 273
78890: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78891: LD_VAR 0 7
78895: PPUSH
78896: LD_VAR 0 8
78900: PPUSH
78901: CALL_OW 488
78905: NOT
78906: IFFALSE 78910
// continue ;
78908: GO 78838
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78910: LD_ADDR_VAR 0 9
78914: PUSH
78915: LD_VAR 0 12
78919: PUSH
78920: LD_INT 1
78922: ARRAY
78923: PPUSH
78924: LD_VAR 0 12
78928: PUSH
78929: LD_INT 2
78931: ARRAY
78932: PPUSH
78933: LD_VAR 0 7
78937: PPUSH
78938: LD_VAR 0 8
78942: PPUSH
78943: CALL_OW 298
78947: ST_TO_ADDR
// if tmp < distance then
78948: LD_VAR 0 9
78952: PUSH
78953: LD_VAR 0 10
78957: LESS
78958: IFFALSE 78980
// begin result := i ;
78960: LD_ADDR_VAR 0 5
78964: PUSH
78965: LD_VAR 0 6
78969: ST_TO_ADDR
// distance := tmp ;
78970: LD_ADDR_VAR 0 10
78974: PUSH
78975: LD_VAR 0 9
78979: ST_TO_ADDR
// end ; end ;
78980: GO 78838
78982: POP
78983: POP
// end ;
78984: LD_VAR 0 5
78988: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78989: LD_INT 0
78991: PPUSH
78992: PPUSH
// if not driver or not IsInUnit ( driver ) then
78993: LD_VAR 0 1
78997: NOT
78998: PUSH
78999: LD_VAR 0 1
79003: PPUSH
79004: CALL_OW 310
79008: NOT
79009: OR
79010: IFFALSE 79014
// exit ;
79012: GO 79104
// vehicle := IsInUnit ( driver ) ;
79014: LD_ADDR_VAR 0 3
79018: PUSH
79019: LD_VAR 0 1
79023: PPUSH
79024: CALL_OW 310
79028: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79029: LD_VAR 0 1
79033: PPUSH
79034: LD_STRING \
79036: PUSH
79037: LD_INT 0
79039: PUSH
79040: LD_INT 0
79042: PUSH
79043: LD_INT 0
79045: PUSH
79046: LD_INT 0
79048: PUSH
79049: LD_INT 0
79051: PUSH
79052: LD_INT 0
79054: PUSH
79055: EMPTY
79056: LIST
79057: LIST
79058: LIST
79059: LIST
79060: LIST
79061: LIST
79062: LIST
79063: PUSH
79064: LD_STRING E
79066: PUSH
79067: LD_INT 0
79069: PUSH
79070: LD_INT 0
79072: PUSH
79073: LD_VAR 0 3
79077: PUSH
79078: LD_INT 0
79080: PUSH
79081: LD_INT 0
79083: PUSH
79084: LD_INT 0
79086: PUSH
79087: EMPTY
79088: LIST
79089: LIST
79090: LIST
79091: LIST
79092: LIST
79093: LIST
79094: LIST
79095: PUSH
79096: EMPTY
79097: LIST
79098: LIST
79099: PPUSH
79100: CALL_OW 446
// end ;
79104: LD_VAR 0 2
79108: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79109: LD_INT 0
79111: PPUSH
79112: PPUSH
// if not driver or not IsInUnit ( driver ) then
79113: LD_VAR 0 1
79117: NOT
79118: PUSH
79119: LD_VAR 0 1
79123: PPUSH
79124: CALL_OW 310
79128: NOT
79129: OR
79130: IFFALSE 79134
// exit ;
79132: GO 79224
// vehicle := IsInUnit ( driver ) ;
79134: LD_ADDR_VAR 0 3
79138: PUSH
79139: LD_VAR 0 1
79143: PPUSH
79144: CALL_OW 310
79148: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79149: LD_VAR 0 1
79153: PPUSH
79154: LD_STRING \
79156: PUSH
79157: LD_INT 0
79159: PUSH
79160: LD_INT 0
79162: PUSH
79163: LD_INT 0
79165: PUSH
79166: LD_INT 0
79168: PUSH
79169: LD_INT 0
79171: PUSH
79172: LD_INT 0
79174: PUSH
79175: EMPTY
79176: LIST
79177: LIST
79178: LIST
79179: LIST
79180: LIST
79181: LIST
79182: LIST
79183: PUSH
79184: LD_STRING E
79186: PUSH
79187: LD_INT 0
79189: PUSH
79190: LD_INT 0
79192: PUSH
79193: LD_VAR 0 3
79197: PUSH
79198: LD_INT 0
79200: PUSH
79201: LD_INT 0
79203: PUSH
79204: LD_INT 0
79206: PUSH
79207: EMPTY
79208: LIST
79209: LIST
79210: LIST
79211: LIST
79212: LIST
79213: LIST
79214: LIST
79215: PUSH
79216: EMPTY
79217: LIST
79218: LIST
79219: PPUSH
79220: CALL_OW 447
// end ;
79224: LD_VAR 0 2
79228: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79229: LD_INT 0
79231: PPUSH
79232: PPUSH
79233: PPUSH
// tmp := [ ] ;
79234: LD_ADDR_VAR 0 5
79238: PUSH
79239: EMPTY
79240: ST_TO_ADDR
// for i in units do
79241: LD_ADDR_VAR 0 4
79245: PUSH
79246: LD_VAR 0 1
79250: PUSH
79251: FOR_IN
79252: IFFALSE 79290
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79254: LD_ADDR_VAR 0 5
79258: PUSH
79259: LD_VAR 0 5
79263: PPUSH
79264: LD_VAR 0 5
79268: PUSH
79269: LD_INT 1
79271: PLUS
79272: PPUSH
79273: LD_VAR 0 4
79277: PPUSH
79278: CALL_OW 256
79282: PPUSH
79283: CALL_OW 2
79287: ST_TO_ADDR
79288: GO 79251
79290: POP
79291: POP
// if not tmp then
79292: LD_VAR 0 5
79296: NOT
79297: IFFALSE 79301
// exit ;
79299: GO 79349
// if asc then
79301: LD_VAR 0 2
79305: IFFALSE 79329
// result := SortListByListAsc ( units , tmp ) else
79307: LD_ADDR_VAR 0 3
79311: PUSH
79312: LD_VAR 0 1
79316: PPUSH
79317: LD_VAR 0 5
79321: PPUSH
79322: CALL_OW 76
79326: ST_TO_ADDR
79327: GO 79349
// result := SortListByListDesc ( units , tmp ) ;
79329: LD_ADDR_VAR 0 3
79333: PUSH
79334: LD_VAR 0 1
79338: PPUSH
79339: LD_VAR 0 5
79343: PPUSH
79344: CALL_OW 77
79348: ST_TO_ADDR
// end ;
79349: LD_VAR 0 3
79353: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79354: LD_INT 0
79356: PPUSH
79357: PPUSH
// task := GetTaskList ( mech ) ;
79358: LD_ADDR_VAR 0 4
79362: PUSH
79363: LD_VAR 0 1
79367: PPUSH
79368: CALL_OW 437
79372: ST_TO_ADDR
// if not task then
79373: LD_VAR 0 4
79377: NOT
79378: IFFALSE 79382
// exit ;
79380: GO 79424
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79382: LD_ADDR_VAR 0 3
79386: PUSH
79387: LD_VAR 0 4
79391: PUSH
79392: LD_INT 1
79394: ARRAY
79395: PUSH
79396: LD_INT 1
79398: ARRAY
79399: PUSH
79400: LD_STRING r
79402: EQUAL
79403: PUSH
79404: LD_VAR 0 4
79408: PUSH
79409: LD_INT 1
79411: ARRAY
79412: PUSH
79413: LD_INT 4
79415: ARRAY
79416: PUSH
79417: LD_VAR 0 2
79421: EQUAL
79422: AND
79423: ST_TO_ADDR
// end ;
79424: LD_VAR 0 3
79428: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79429: LD_INT 0
79431: PPUSH
// SetDir ( unit , d ) ;
79432: LD_VAR 0 1
79436: PPUSH
79437: LD_VAR 0 4
79441: PPUSH
79442: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79446: LD_VAR 0 1
79450: PPUSH
79451: LD_VAR 0 2
79455: PPUSH
79456: LD_VAR 0 3
79460: PPUSH
79461: LD_VAR 0 5
79465: PPUSH
79466: CALL_OW 48
// end ;
79470: LD_VAR 0 6
79474: RET
// export function ToNaturalNumber ( number ) ; begin
79475: LD_INT 0
79477: PPUSH
// result := number div 1 ;
79478: LD_ADDR_VAR 0 2
79482: PUSH
79483: LD_VAR 0 1
79487: PUSH
79488: LD_INT 1
79490: DIV
79491: ST_TO_ADDR
// if number < 0 then
79492: LD_VAR 0 1
79496: PUSH
79497: LD_INT 0
79499: LESS
79500: IFFALSE 79510
// result := 0 ;
79502: LD_ADDR_VAR 0 2
79506: PUSH
79507: LD_INT 0
79509: ST_TO_ADDR
// end ;
79510: LD_VAR 0 2
79514: RET
// export function SortByClass ( units , class ) ; var un ; begin
79515: LD_INT 0
79517: PPUSH
79518: PPUSH
// if not units or not class then
79519: LD_VAR 0 1
79523: NOT
79524: PUSH
79525: LD_VAR 0 2
79529: NOT
79530: OR
79531: IFFALSE 79535
// exit ;
79533: GO 79630
// result := [ ] ;
79535: LD_ADDR_VAR 0 3
79539: PUSH
79540: EMPTY
79541: ST_TO_ADDR
// for un in units do
79542: LD_ADDR_VAR 0 4
79546: PUSH
79547: LD_VAR 0 1
79551: PUSH
79552: FOR_IN
79553: IFFALSE 79628
// if GetClass ( un ) = class then
79555: LD_VAR 0 4
79559: PPUSH
79560: CALL_OW 257
79564: PUSH
79565: LD_VAR 0 2
79569: EQUAL
79570: IFFALSE 79597
// result := Insert ( result , 1 , un ) else
79572: LD_ADDR_VAR 0 3
79576: PUSH
79577: LD_VAR 0 3
79581: PPUSH
79582: LD_INT 1
79584: PPUSH
79585: LD_VAR 0 4
79589: PPUSH
79590: CALL_OW 2
79594: ST_TO_ADDR
79595: GO 79626
// result := Replace ( result , result + 1 , un ) ;
79597: LD_ADDR_VAR 0 3
79601: PUSH
79602: LD_VAR 0 3
79606: PPUSH
79607: LD_VAR 0 3
79611: PUSH
79612: LD_INT 1
79614: PLUS
79615: PPUSH
79616: LD_VAR 0 4
79620: PPUSH
79621: CALL_OW 1
79625: ST_TO_ADDR
79626: GO 79552
79628: POP
79629: POP
// end ;
79630: LD_VAR 0 3
79634: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79635: LD_INT 0
79637: PPUSH
79638: PPUSH
79639: PPUSH
79640: PPUSH
79641: PPUSH
79642: PPUSH
79643: PPUSH
// result := [ ] ;
79644: LD_ADDR_VAR 0 4
79648: PUSH
79649: EMPTY
79650: ST_TO_ADDR
// if x - r < 0 then
79651: LD_VAR 0 1
79655: PUSH
79656: LD_VAR 0 3
79660: MINUS
79661: PUSH
79662: LD_INT 0
79664: LESS
79665: IFFALSE 79677
// min_x := 0 else
79667: LD_ADDR_VAR 0 8
79671: PUSH
79672: LD_INT 0
79674: ST_TO_ADDR
79675: GO 79693
// min_x := x - r ;
79677: LD_ADDR_VAR 0 8
79681: PUSH
79682: LD_VAR 0 1
79686: PUSH
79687: LD_VAR 0 3
79691: MINUS
79692: ST_TO_ADDR
// if y - r < 0 then
79693: LD_VAR 0 2
79697: PUSH
79698: LD_VAR 0 3
79702: MINUS
79703: PUSH
79704: LD_INT 0
79706: LESS
79707: IFFALSE 79719
// min_y := 0 else
79709: LD_ADDR_VAR 0 7
79713: PUSH
79714: LD_INT 0
79716: ST_TO_ADDR
79717: GO 79735
// min_y := y - r ;
79719: LD_ADDR_VAR 0 7
79723: PUSH
79724: LD_VAR 0 2
79728: PUSH
79729: LD_VAR 0 3
79733: MINUS
79734: ST_TO_ADDR
// max_x := x + r ;
79735: LD_ADDR_VAR 0 9
79739: PUSH
79740: LD_VAR 0 1
79744: PUSH
79745: LD_VAR 0 3
79749: PLUS
79750: ST_TO_ADDR
// max_y := y + r ;
79751: LD_ADDR_VAR 0 10
79755: PUSH
79756: LD_VAR 0 2
79760: PUSH
79761: LD_VAR 0 3
79765: PLUS
79766: ST_TO_ADDR
// for _x = min_x to max_x do
79767: LD_ADDR_VAR 0 5
79771: PUSH
79772: DOUBLE
79773: LD_VAR 0 8
79777: DEC
79778: ST_TO_ADDR
79779: LD_VAR 0 9
79783: PUSH
79784: FOR_TO
79785: IFFALSE 79886
// for _y = min_y to max_y do
79787: LD_ADDR_VAR 0 6
79791: PUSH
79792: DOUBLE
79793: LD_VAR 0 7
79797: DEC
79798: ST_TO_ADDR
79799: LD_VAR 0 10
79803: PUSH
79804: FOR_TO
79805: IFFALSE 79882
// begin if not ValidHex ( _x , _y ) then
79807: LD_VAR 0 5
79811: PPUSH
79812: LD_VAR 0 6
79816: PPUSH
79817: CALL_OW 488
79821: NOT
79822: IFFALSE 79826
// continue ;
79824: GO 79804
// if GetResourceTypeXY ( _x , _y ) then
79826: LD_VAR 0 5
79830: PPUSH
79831: LD_VAR 0 6
79835: PPUSH
79836: CALL_OW 283
79840: IFFALSE 79880
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79842: LD_ADDR_VAR 0 4
79846: PUSH
79847: LD_VAR 0 4
79851: PPUSH
79852: LD_VAR 0 4
79856: PUSH
79857: LD_INT 1
79859: PLUS
79860: PPUSH
79861: LD_VAR 0 5
79865: PUSH
79866: LD_VAR 0 6
79870: PUSH
79871: EMPTY
79872: LIST
79873: LIST
79874: PPUSH
79875: CALL_OW 1
79879: ST_TO_ADDR
// end ;
79880: GO 79804
79882: POP
79883: POP
79884: GO 79784
79886: POP
79887: POP
// end ;
79888: LD_VAR 0 4
79892: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79893: LD_INT 0
79895: PPUSH
79896: PPUSH
79897: PPUSH
79898: PPUSH
79899: PPUSH
79900: PPUSH
79901: PPUSH
79902: PPUSH
// if not units then
79903: LD_VAR 0 1
79907: NOT
79908: IFFALSE 79912
// exit ;
79910: GO 80436
// result := UnitFilter ( units , [ f_ok ] ) ;
79912: LD_ADDR_VAR 0 3
79916: PUSH
79917: LD_VAR 0 1
79921: PPUSH
79922: LD_INT 50
79924: PUSH
79925: EMPTY
79926: LIST
79927: PPUSH
79928: CALL_OW 72
79932: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79933: LD_ADDR_VAR 0 8
79937: PUSH
79938: LD_VAR 0 1
79942: PUSH
79943: LD_INT 1
79945: ARRAY
79946: PPUSH
79947: CALL_OW 255
79951: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79952: LD_ADDR_VAR 0 10
79956: PUSH
79957: LD_INT 29
79959: PUSH
79960: LD_INT 91
79962: PUSH
79963: LD_INT 49
79965: PUSH
79966: EMPTY
79967: LIST
79968: LIST
79969: LIST
79970: ST_TO_ADDR
// if not result then
79971: LD_VAR 0 3
79975: NOT
79976: IFFALSE 79980
// exit ;
79978: GO 80436
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79980: LD_ADDR_VAR 0 5
79984: PUSH
79985: LD_INT 81
79987: PUSH
79988: LD_VAR 0 8
79992: PUSH
79993: EMPTY
79994: LIST
79995: LIST
79996: PPUSH
79997: CALL_OW 69
80001: ST_TO_ADDR
// for i in result do
80002: LD_ADDR_VAR 0 4
80006: PUSH
80007: LD_VAR 0 3
80011: PUSH
80012: FOR_IN
80013: IFFALSE 80434
// begin tag := GetTag ( i ) + 1 ;
80015: LD_ADDR_VAR 0 9
80019: PUSH
80020: LD_VAR 0 4
80024: PPUSH
80025: CALL_OW 110
80029: PUSH
80030: LD_INT 1
80032: PLUS
80033: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80034: LD_ADDR_VAR 0 7
80038: PUSH
80039: LD_VAR 0 4
80043: PPUSH
80044: CALL_OW 250
80048: PPUSH
80049: LD_VAR 0 4
80053: PPUSH
80054: CALL_OW 251
80058: PPUSH
80059: LD_INT 6
80061: PPUSH
80062: CALL 79635 0 3
80066: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80067: LD_VAR 0 4
80071: PPUSH
80072: CALL_OW 247
80076: PUSH
80077: LD_INT 2
80079: EQUAL
80080: PUSH
80081: LD_VAR 0 7
80085: AND
80086: PUSH
80087: LD_VAR 0 4
80091: PPUSH
80092: CALL_OW 264
80096: PUSH
80097: LD_VAR 0 10
80101: IN
80102: NOT
80103: AND
80104: IFFALSE 80143
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80106: LD_VAR 0 4
80110: PPUSH
80111: LD_VAR 0 7
80115: PUSH
80116: LD_INT 1
80118: ARRAY
80119: PUSH
80120: LD_INT 1
80122: ARRAY
80123: PPUSH
80124: LD_VAR 0 7
80128: PUSH
80129: LD_INT 1
80131: ARRAY
80132: PUSH
80133: LD_INT 2
80135: ARRAY
80136: PPUSH
80137: CALL_OW 116
80141: GO 80432
// if path > tag then
80143: LD_VAR 0 2
80147: PUSH
80148: LD_VAR 0 9
80152: GREATER
80153: IFFALSE 80361
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80155: LD_ADDR_VAR 0 6
80159: PUSH
80160: LD_VAR 0 5
80164: PPUSH
80165: LD_INT 91
80167: PUSH
80168: LD_VAR 0 4
80172: PUSH
80173: LD_INT 8
80175: PUSH
80176: EMPTY
80177: LIST
80178: LIST
80179: LIST
80180: PPUSH
80181: CALL_OW 72
80185: ST_TO_ADDR
// if nearEnemy then
80186: LD_VAR 0 6
80190: IFFALSE 80259
// begin if GetWeapon ( i ) = ru_time_lapser then
80192: LD_VAR 0 4
80196: PPUSH
80197: CALL_OW 264
80201: PUSH
80202: LD_INT 49
80204: EQUAL
80205: IFFALSE 80233
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80207: LD_VAR 0 4
80211: PPUSH
80212: LD_VAR 0 6
80216: PPUSH
80217: LD_VAR 0 4
80221: PPUSH
80222: CALL_OW 74
80226: PPUSH
80227: CALL_OW 112
80231: GO 80257
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80233: LD_VAR 0 4
80237: PPUSH
80238: LD_VAR 0 6
80242: PPUSH
80243: LD_VAR 0 4
80247: PPUSH
80248: CALL_OW 74
80252: PPUSH
80253: CALL_OW 115
// end else
80257: GO 80359
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80259: LD_VAR 0 4
80263: PPUSH
80264: LD_VAR 0 2
80268: PUSH
80269: LD_VAR 0 9
80273: ARRAY
80274: PUSH
80275: LD_INT 1
80277: ARRAY
80278: PPUSH
80279: LD_VAR 0 2
80283: PUSH
80284: LD_VAR 0 9
80288: ARRAY
80289: PUSH
80290: LD_INT 2
80292: ARRAY
80293: PPUSH
80294: CALL_OW 297
80298: PUSH
80299: LD_INT 6
80301: GREATER
80302: IFFALSE 80345
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80304: LD_VAR 0 4
80308: PPUSH
80309: LD_VAR 0 2
80313: PUSH
80314: LD_VAR 0 9
80318: ARRAY
80319: PUSH
80320: LD_INT 1
80322: ARRAY
80323: PPUSH
80324: LD_VAR 0 2
80328: PUSH
80329: LD_VAR 0 9
80333: ARRAY
80334: PUSH
80335: LD_INT 2
80337: ARRAY
80338: PPUSH
80339: CALL_OW 114
80343: GO 80359
// SetTag ( i , tag ) ;
80345: LD_VAR 0 4
80349: PPUSH
80350: LD_VAR 0 9
80354: PPUSH
80355: CALL_OW 109
// end else
80359: GO 80432
// if enemy then
80361: LD_VAR 0 5
80365: IFFALSE 80432
// begin if GetWeapon ( i ) = ru_time_lapser then
80367: LD_VAR 0 4
80371: PPUSH
80372: CALL_OW 264
80376: PUSH
80377: LD_INT 49
80379: EQUAL
80380: IFFALSE 80408
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80382: LD_VAR 0 4
80386: PPUSH
80387: LD_VAR 0 5
80391: PPUSH
80392: LD_VAR 0 4
80396: PPUSH
80397: CALL_OW 74
80401: PPUSH
80402: CALL_OW 112
80406: GO 80432
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80408: LD_VAR 0 4
80412: PPUSH
80413: LD_VAR 0 5
80417: PPUSH
80418: LD_VAR 0 4
80422: PPUSH
80423: CALL_OW 74
80427: PPUSH
80428: CALL_OW 115
// end ; end ;
80432: GO 80012
80434: POP
80435: POP
// end ;
80436: LD_VAR 0 3
80440: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80441: LD_INT 0
80443: PPUSH
80444: PPUSH
80445: PPUSH
// if not unit or IsInUnit ( unit ) then
80446: LD_VAR 0 1
80450: NOT
80451: PUSH
80452: LD_VAR 0 1
80456: PPUSH
80457: CALL_OW 310
80461: OR
80462: IFFALSE 80466
// exit ;
80464: GO 80557
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80466: LD_ADDR_VAR 0 4
80470: PUSH
80471: LD_VAR 0 1
80475: PPUSH
80476: CALL_OW 250
80480: PPUSH
80481: LD_VAR 0 2
80485: PPUSH
80486: LD_INT 1
80488: PPUSH
80489: CALL_OW 272
80493: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80494: LD_ADDR_VAR 0 5
80498: PUSH
80499: LD_VAR 0 1
80503: PPUSH
80504: CALL_OW 251
80508: PPUSH
80509: LD_VAR 0 2
80513: PPUSH
80514: LD_INT 1
80516: PPUSH
80517: CALL_OW 273
80521: ST_TO_ADDR
// if ValidHex ( x , y ) then
80522: LD_VAR 0 4
80526: PPUSH
80527: LD_VAR 0 5
80531: PPUSH
80532: CALL_OW 488
80536: IFFALSE 80557
// ComTurnXY ( unit , x , y ) ;
80538: LD_VAR 0 1
80542: PPUSH
80543: LD_VAR 0 4
80547: PPUSH
80548: LD_VAR 0 5
80552: PPUSH
80553: CALL_OW 118
// end ;
80557: LD_VAR 0 3
80561: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80562: LD_INT 0
80564: PPUSH
80565: PPUSH
// result := false ;
80566: LD_ADDR_VAR 0 3
80570: PUSH
80571: LD_INT 0
80573: ST_TO_ADDR
// if not units then
80574: LD_VAR 0 2
80578: NOT
80579: IFFALSE 80583
// exit ;
80581: GO 80628
// for i in units do
80583: LD_ADDR_VAR 0 4
80587: PUSH
80588: LD_VAR 0 2
80592: PUSH
80593: FOR_IN
80594: IFFALSE 80626
// if See ( side , i ) then
80596: LD_VAR 0 1
80600: PPUSH
80601: LD_VAR 0 4
80605: PPUSH
80606: CALL_OW 292
80610: IFFALSE 80624
// begin result := true ;
80612: LD_ADDR_VAR 0 3
80616: PUSH
80617: LD_INT 1
80619: ST_TO_ADDR
// exit ;
80620: POP
80621: POP
80622: GO 80628
// end ;
80624: GO 80593
80626: POP
80627: POP
// end ;
80628: LD_VAR 0 3
80632: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80633: LD_INT 0
80635: PPUSH
80636: PPUSH
80637: PPUSH
80638: PPUSH
// if not unit or not points then
80639: LD_VAR 0 1
80643: NOT
80644: PUSH
80645: LD_VAR 0 2
80649: NOT
80650: OR
80651: IFFALSE 80655
// exit ;
80653: GO 80745
// dist := 99999 ;
80655: LD_ADDR_VAR 0 5
80659: PUSH
80660: LD_INT 99999
80662: ST_TO_ADDR
// for i in points do
80663: LD_ADDR_VAR 0 4
80667: PUSH
80668: LD_VAR 0 2
80672: PUSH
80673: FOR_IN
80674: IFFALSE 80743
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80676: LD_ADDR_VAR 0 6
80680: PUSH
80681: LD_VAR 0 1
80685: PPUSH
80686: LD_VAR 0 4
80690: PUSH
80691: LD_INT 1
80693: ARRAY
80694: PPUSH
80695: LD_VAR 0 4
80699: PUSH
80700: LD_INT 2
80702: ARRAY
80703: PPUSH
80704: CALL_OW 297
80708: ST_TO_ADDR
// if tmpDist < dist then
80709: LD_VAR 0 6
80713: PUSH
80714: LD_VAR 0 5
80718: LESS
80719: IFFALSE 80741
// begin result := i ;
80721: LD_ADDR_VAR 0 3
80725: PUSH
80726: LD_VAR 0 4
80730: ST_TO_ADDR
// dist := tmpDist ;
80731: LD_ADDR_VAR 0 5
80735: PUSH
80736: LD_VAR 0 6
80740: ST_TO_ADDR
// end ; end ;
80741: GO 80673
80743: POP
80744: POP
// end ;
80745: LD_VAR 0 3
80749: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80750: LD_INT 0
80752: PPUSH
// uc_side := side ;
80753: LD_ADDR_OWVAR 20
80757: PUSH
80758: LD_VAR 0 1
80762: ST_TO_ADDR
// uc_nation := 3 ;
80763: LD_ADDR_OWVAR 21
80767: PUSH
80768: LD_INT 3
80770: ST_TO_ADDR
// vc_chassis := 25 ;
80771: LD_ADDR_OWVAR 37
80775: PUSH
80776: LD_INT 25
80778: ST_TO_ADDR
// vc_engine := engine_siberite ;
80779: LD_ADDR_OWVAR 39
80783: PUSH
80784: LD_INT 3
80786: ST_TO_ADDR
// vc_control := control_computer ;
80787: LD_ADDR_OWVAR 38
80791: PUSH
80792: LD_INT 3
80794: ST_TO_ADDR
// vc_weapon := 59 ;
80795: LD_ADDR_OWVAR 40
80799: PUSH
80800: LD_INT 59
80802: ST_TO_ADDR
// result := CreateVehicle ;
80803: LD_ADDR_VAR 0 5
80807: PUSH
80808: CALL_OW 45
80812: ST_TO_ADDR
// SetDir ( result , d ) ;
80813: LD_VAR 0 5
80817: PPUSH
80818: LD_VAR 0 4
80822: PPUSH
80823: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80827: LD_VAR 0 5
80831: PPUSH
80832: LD_VAR 0 2
80836: PPUSH
80837: LD_VAR 0 3
80841: PPUSH
80842: LD_INT 0
80844: PPUSH
80845: CALL_OW 48
// end ;
80849: LD_VAR 0 5
80853: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80854: LD_INT 0
80856: PPUSH
80857: PPUSH
80858: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80859: LD_ADDR_VAR 0 2
80863: PUSH
80864: LD_INT 0
80866: PUSH
80867: LD_INT 0
80869: PUSH
80870: LD_INT 0
80872: PUSH
80873: LD_INT 0
80875: PUSH
80876: EMPTY
80877: LIST
80878: LIST
80879: LIST
80880: LIST
80881: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80882: LD_VAR 0 1
80886: NOT
80887: PUSH
80888: LD_VAR 0 1
80892: PPUSH
80893: CALL_OW 264
80897: PUSH
80898: LD_INT 12
80900: PUSH
80901: LD_INT 51
80903: PUSH
80904: LD_INT 32
80906: PUSH
80907: LD_INT 89
80909: PUSH
80910: EMPTY
80911: LIST
80912: LIST
80913: LIST
80914: LIST
80915: IN
80916: NOT
80917: OR
80918: IFFALSE 80922
// exit ;
80920: GO 81020
// for i := 1 to 3 do
80922: LD_ADDR_VAR 0 3
80926: PUSH
80927: DOUBLE
80928: LD_INT 1
80930: DEC
80931: ST_TO_ADDR
80932: LD_INT 3
80934: PUSH
80935: FOR_TO
80936: IFFALSE 81018
// begin tmp := GetCargo ( cargo , i ) ;
80938: LD_ADDR_VAR 0 4
80942: PUSH
80943: LD_VAR 0 1
80947: PPUSH
80948: LD_VAR 0 3
80952: PPUSH
80953: CALL_OW 289
80957: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80958: LD_ADDR_VAR 0 2
80962: PUSH
80963: LD_VAR 0 2
80967: PPUSH
80968: LD_VAR 0 3
80972: PPUSH
80973: LD_VAR 0 4
80977: PPUSH
80978: CALL_OW 1
80982: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80983: LD_ADDR_VAR 0 2
80987: PUSH
80988: LD_VAR 0 2
80992: PPUSH
80993: LD_INT 4
80995: PPUSH
80996: LD_VAR 0 2
81000: PUSH
81001: LD_INT 4
81003: ARRAY
81004: PUSH
81005: LD_VAR 0 4
81009: PLUS
81010: PPUSH
81011: CALL_OW 1
81015: ST_TO_ADDR
// end ;
81016: GO 80935
81018: POP
81019: POP
// end ;
81020: LD_VAR 0 2
81024: RET
// export function Length ( array ) ; begin
81025: LD_INT 0
81027: PPUSH
// result := array + 0 ;
81028: LD_ADDR_VAR 0 2
81032: PUSH
81033: LD_VAR 0 1
81037: PUSH
81038: LD_INT 0
81040: PLUS
81041: ST_TO_ADDR
// end ;
81042: LD_VAR 0 2
81046: RET
// export function PrepareArray ( array ) ; begin
81047: LD_INT 0
81049: PPUSH
// result := array diff 0 ;
81050: LD_ADDR_VAR 0 2
81054: PUSH
81055: LD_VAR 0 1
81059: PUSH
81060: LD_INT 0
81062: DIFF
81063: ST_TO_ADDR
// if not result [ 1 ] then
81064: LD_VAR 0 2
81068: PUSH
81069: LD_INT 1
81071: ARRAY
81072: NOT
81073: IFFALSE 81093
// result := Delete ( result , 1 ) ;
81075: LD_ADDR_VAR 0 2
81079: PUSH
81080: LD_VAR 0 2
81084: PPUSH
81085: LD_INT 1
81087: PPUSH
81088: CALL_OW 3
81092: ST_TO_ADDR
// end ;
81093: LD_VAR 0 2
81097: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81098: LD_INT 0
81100: PPUSH
81101: PPUSH
81102: PPUSH
81103: PPUSH
// sibRocketRange := 25 ;
81104: LD_ADDR_VAR 0 6
81108: PUSH
81109: LD_INT 25
81111: ST_TO_ADDR
// result := false ;
81112: LD_ADDR_VAR 0 4
81116: PUSH
81117: LD_INT 0
81119: ST_TO_ADDR
// for i := 0 to 5 do
81120: LD_ADDR_VAR 0 5
81124: PUSH
81125: DOUBLE
81126: LD_INT 0
81128: DEC
81129: ST_TO_ADDR
81130: LD_INT 5
81132: PUSH
81133: FOR_TO
81134: IFFALSE 81201
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81136: LD_VAR 0 1
81140: PPUSH
81141: LD_VAR 0 5
81145: PPUSH
81146: LD_VAR 0 6
81150: PPUSH
81151: CALL_OW 272
81155: PPUSH
81156: LD_VAR 0 2
81160: PPUSH
81161: LD_VAR 0 5
81165: PPUSH
81166: LD_VAR 0 6
81170: PPUSH
81171: CALL_OW 273
81175: PPUSH
81176: LD_VAR 0 3
81180: PPUSH
81181: CALL_OW 309
81185: IFFALSE 81199
// begin result := true ;
81187: LD_ADDR_VAR 0 4
81191: PUSH
81192: LD_INT 1
81194: ST_TO_ADDR
// exit ;
81195: POP
81196: POP
81197: GO 81203
// end ;
81199: GO 81133
81201: POP
81202: POP
// end ;
81203: LD_VAR 0 4
81207: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81208: LD_INT 0
81210: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81211: LD_VAR 0 1
81215: PPUSH
81216: LD_VAR 0 2
81220: PPUSH
81221: LD_INT 0
81223: PPUSH
81224: LD_INT 0
81226: PPUSH
81227: LD_INT 1
81229: PPUSH
81230: LD_INT 0
81232: PPUSH
81233: CALL_OW 587
// end ; end_of_file
81237: LD_VAR 0 3
81241: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81242: LD_VAR 0 1
81246: PUSH
81247: LD_INT 200
81249: DOUBLE
81250: GREATEREQUAL
81251: IFFALSE 81259
81253: LD_INT 299
81255: DOUBLE
81256: LESSEQUAL
81257: IFTRUE 81261
81259: GO 81293
81261: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81262: LD_VAR 0 1
81266: PPUSH
81267: LD_VAR 0 2
81271: PPUSH
81272: LD_VAR 0 3
81276: PPUSH
81277: LD_VAR 0 4
81281: PPUSH
81282: LD_VAR 0 5
81286: PPUSH
81287: CALL 35908 0 5
81291: GO 81370
81293: LD_INT 300
81295: DOUBLE
81296: GREATEREQUAL
81297: IFFALSE 81305
81299: LD_INT 399
81301: DOUBLE
81302: LESSEQUAL
81303: IFTRUE 81307
81305: GO 81369
81307: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81308: LD_VAR 0 1
81312: PPUSH
81313: LD_VAR 0 2
81317: PPUSH
81318: LD_VAR 0 3
81322: PPUSH
81323: LD_VAR 0 4
81327: PPUSH
81328: LD_VAR 0 5
81332: PPUSH
81333: LD_VAR 0 6
81337: PPUSH
81338: LD_VAR 0 7
81342: PPUSH
81343: LD_VAR 0 8
81347: PPUSH
81348: LD_VAR 0 9
81352: PPUSH
81353: LD_VAR 0 10
81357: PPUSH
81358: LD_VAR 0 11
81362: PPUSH
81363: CALL 32241 0 11
81367: GO 81370
81369: POP
// end ;
81370: PPOPN 11
81372: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81373: LD_VAR 0 1
81377: PPUSH
81378: LD_VAR 0 2
81382: PPUSH
81383: LD_VAR 0 3
81387: PPUSH
81388: LD_VAR 0 4
81392: PPUSH
81393: LD_VAR 0 5
81397: PPUSH
81398: CALL 35644 0 5
// end ; end_of_file
81402: PPOPN 5
81404: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81405: LD_VAR 0 1
81409: PPUSH
81410: LD_VAR 0 2
81414: PPUSH
81415: LD_VAR 0 3
81419: PPUSH
81420: LD_VAR 0 4
81424: PPUSH
81425: LD_VAR 0 5
81429: PPUSH
81430: LD_VAR 0 6
81434: PPUSH
81435: CALL 19861 0 6
// end ;
81439: PPOPN 6
81441: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81442: LD_INT 0
81444: PPUSH
// begin if not units then
81445: LD_VAR 0 1
81449: NOT
81450: IFFALSE 81454
// exit ;
81452: GO 81454
// end ;
81454: PPOPN 7
81456: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81457: CALL 19755 0 0
// end ;
81461: PPOPN 1
81463: END
