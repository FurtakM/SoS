// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4687 0 0
// PrepareRussianBase ;
  29: CALL 2976 0 0
// PrepareRussianCommander ;
  33: CALL 2927 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8306 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild = 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode = 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible = 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack = 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson = 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase = 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer = 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus = 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer = 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog = 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog = 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog = 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil = 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower = 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable = 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter = 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor = 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 38880 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 38880 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: LD_EXP 49
 585: PPUSH
 586: CALL 38880 0 3
 590: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 591: LD_ADDR_EXP 8
 595: PUSH
 596: LD_STRING Dickens
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: LD_EXP 49
 606: PPUSH
 607: CALL 38880 0 3
 611: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 612: LD_ADDR_EXP 9
 616: PUSH
 617: LD_STRING Woodruff
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_EXP 49
 627: PPUSH
 628: CALL 38880 0 3
 632: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 633: LD_ADDR_EXP 12
 637: PUSH
 638: LD_STRING Campell
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_EXP 49
 648: PPUSH
 649: CALL 38880 0 3
 653: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING Knight
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: LD_EXP 49
 669: PPUSH
 670: CALL 38880 0 3
 674: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 675: LD_ADDR_EXP 11
 679: PUSH
 680: LD_STRING Claptopn
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_EXP 49
 690: PPUSH
 691: CALL 38880 0 3
 695: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING Harisson
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: LD_EXP 49
 711: PPUSH
 712: CALL 38880 0 3
 716: ST_TO_ADDR
// if not Lisa then
 717: LD_EXP 4
 721: NOT
 722: IFFALSE 745
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 724: LD_ADDR_EXP 2
 728: PUSH
 729: LD_STRING Bobby
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_EXP 49
 739: PPUSH
 740: CALL 38880 0 3
 744: ST_TO_ADDR
// if not Lisa and not Bobby then
 745: LD_EXP 4
 749: NOT
 750: PUSH
 751: LD_EXP 2
 755: NOT
 756: AND
 757: IFFALSE 780
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 759: LD_ADDR_EXP 3
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_EXP 49
 774: PPUSH
 775: CALL 38880 0 3
 779: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 780: LD_EXP 4
 784: NOT
 785: PUSH
 786: LD_EXP 2
 790: NOT
 791: AND
 792: PUSH
 793: LD_EXP 3
 797: NOT
 798: AND
 799: IFFALSE 898
// begin tmp = CreateCharacterSet ( 03_others ) ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 31
 813: ST_TO_ADDR
// if tmp then
 814: LD_VAR 0 3
 818: IFFALSE 875
// begin RandomBeforeMission = tmp [ 1 ] ;
 820: LD_ADDR_EXP 6
 824: PUSH
 825: LD_VAR 0 3
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 834: LD_STRING 03_others
 836: PPUSH
 837: CALL_OW 40
// if tmp > 1 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: GREATER
 849: IFFALSE 873
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: DIFF
 865: PPUSH
 866: LD_STRING 03_others
 868: PPUSH
 869: CALL_OW 38
// end else
 873: GO 898
// begin PrepareHuman ( false , 1 , 3 ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: LD_INT 3
 883: PPUSH
 884: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 888: LD_ADDR_EXP 6
 892: PUSH
 893: CALL_OW 44
 897: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 4
 905: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 906: LD_ADDR_EXP 13
 910: PUSH
 911: LD_STRING Donaldson
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: LD_EXP 49
 921: PPUSH
 922: CALL 38880 0 3
 926: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Frank
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 38880 0 3
 947: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 32
 955: PPUSH
 956: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 960: LD_EXP 7
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 975: LD_EXP 7
 979: PPUSH
 980: LD_INT 32
 982: PPUSH
 983: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 987: LD_EXP 8
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1002: LD_EXP 9
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1017: LD_EXP 12
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1032: LD_EXP 10
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1047: LD_EXP 11
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 49
// if Lisa = false then
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1087: LD_EXP 2
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// if Lisa = false and Bobby = false then
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: PUSH
1111: LD_EXP 2
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1137: LD_EXP 4
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: PUSH
1146: LD_EXP 2
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: PUSH
1156: LD_EXP 3
1160: PUSH
1161: LD_INT 0
1163: EQUAL
1164: AND
1165: IFFALSE 1182
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1167: LD_EXP 6
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 49
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1187: LD_INT 0
1189: PPUSH
1190: PPUSH
1191: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1192: LD_EXP 13
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// if Frank then
1207: LD_EXP 5
1211: IFFALSE 1228
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1213: LD_EXP 5
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// uc_nation = 1 ;
1228: LD_ADDR_OWVAR 21
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// uc_side = 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// hc_class := 3 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING SecondCharsGal
1267: ST_TO_ADDR
// hc_face_number := 53 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 53
1275: ST_TO_ADDR
// hc_name := Freddie Warner ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Freddie Warner
1283: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 8
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 2
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 56 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 56
1401: ST_TO_ADDR
// hc_name := Mel Brennan ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Mel Brennan
1409: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 12
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// hc_class := 1 ;
1496: LD_ADDR_OWVAR 28
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_sex := sex_male ;
1504: LD_ADDR_OWVAR 27
1508: PUSH
1509: LD_INT 1
1511: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING AmGalRemake
1519: ST_TO_ADDR
// hc_face_number := 5 ;
1520: LD_ADDR_OWVAR 34
1524: PUSH
1525: LD_INT 5
1527: ST_TO_ADDR
// hc_name := Bob Joplin ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Bob Joplin
1535: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1536: LD_ADDR_OWVAR 29
1540: PUSH
1541: LD_INT 10
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1551: LD_ADDR_OWVAR 30
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1574: LD_ADDR_OWVAR 31
1578: PUSH
1579: LD_INT 3
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// un = CreateHuman ;
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: CALL_OW 44
1606: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1607: LD_VAR 0 3
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// hc_class := 3 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// hc_sex := sex_female ;
1630: LD_ADDR_OWVAR 27
1634: PUSH
1635: LD_INT 2
1637: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING AmGalRemake
1645: ST_TO_ADDR
// hc_face_number := 8 ;
1646: LD_ADDR_OWVAR 34
1650: PUSH
1651: LD_INT 8
1653: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1654: LD_ADDR_OWVAR 26
1658: PUSH
1659: LD_STRING Elizabeth Whitney
1661: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1662: LD_ADDR_OWVAR 29
1666: PUSH
1667: LD_INT 9
1669: PUSH
1670: LD_INT 11
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1677: LD_ADDR_OWVAR 30
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1700: LD_ADDR_OWVAR 31
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: LD_INT 4
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// un = CreateHuman ;
1723: LD_ADDR_VAR 0 3
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// InitHc ;
1748: CALL_OW 19
// end ;
1752: LD_VAR 0 1
1756: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
1761: PPUSH
1762: PPUSH
// uc_nation = 1 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// uc_side = 1 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 2
1786: ST_TO_ADDR
// vc_engine := engine_combustion ;
1787: LD_ADDR_OWVAR 39
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_control := control_manual ;
1795: LD_ADDR_OWVAR 38
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1803: LD_ADDR_OWVAR 41
1807: PUSH
1808: LD_INT 65
1810: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_OWVAR 67
1838: ARRAY
1839: ST_TO_ADDR
// veh := CreateVehicle ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 2
1857: PPUSH
1858: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: CALL_OW 428
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: IFFALSE 1898
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1878: LD_VAR 0 5
1882: PPUSH
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 48
1896: GO 1916
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1898: LD_VAR 0 5
1902: PPUSH
1903: LD_INT 23
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 48
// hc_class := 1 ;
1916: LD_ADDR_OWVAR 28
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_sex := sex_male ;
1924: LD_ADDR_OWVAR 27
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1932: LD_ADDR_OWVAR 33
1936: PUSH
1937: LD_STRING SecondCharsGal
1939: ST_TO_ADDR
// hc_face_number := 59 ;
1940: LD_ADDR_OWVAR 34
1944: PUSH
1945: LD_INT 59
1947: ST_TO_ADDR
// hc_name := Max Gray ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING Max Gray
1955: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 9
1963: PUSH
1964: LD_INT 11
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1971: LD_ADDR_OWVAR 30
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1994: LD_ADDR_OWVAR 31
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 0
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: ST_TO_ADDR
// un = CreateHuman ;
2017: LD_ADDR_VAR 0 4
2021: PUSH
2022: CALL_OW 44
2026: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_INT 11
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// hc_class := 2 ;
2042: LD_ADDR_OWVAR 28
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_sex := sex_male ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2058: LD_ADDR_OWVAR 33
2062: PUSH
2063: LD_STRING SecondCharsGal
2065: ST_TO_ADDR
// hc_face_number := 50 ;
2066: LD_ADDR_OWVAR 34
2070: PUSH
2071: LD_INT 50
2073: ST_TO_ADDR
// hc_name := Frank Hughes ;
2074: LD_ADDR_OWVAR 26
2078: PUSH
2079: LD_STRING Frank Hughes
2081: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2082: LD_ADDR_OWVAR 29
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: LD_INT 10
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2097: LD_ADDR_OWVAR 30
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 11
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// hc_class := 1 ;
2168: LD_ADDR_OWVAR 28
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_sex := sex_male ;
2176: LD_ADDR_OWVAR 27
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2184: LD_ADDR_OWVAR 33
2188: PUSH
2189: LD_STRING SecondCharsGal
2191: ST_TO_ADDR
// hc_face_number := 54 ;
2192: LD_ADDR_OWVAR 34
2196: PUSH
2197: LD_INT 54
2199: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_STRING Luigi Ghbellin
2207: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2208: LD_ADDR_OWVAR 29
2212: PUSH
2213: LD_INT 11
2215: PUSH
2216: LD_INT 11
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2223: LD_ADDR_OWVAR 30
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2246: LD_ADDR_OWVAR 31
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// un = CreateHuman ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: CALL_OW 44
2278: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2279: LD_VAR 0 4
2283: PPUSH
2284: LD_INT 11
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL_OW 49
// hc_class := 3 ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 3
2301: ST_TO_ADDR
// hc_sex := sex_male ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2310: LD_ADDR_OWVAR 33
2314: PUSH
2315: LD_STRING AmGalRemake
2317: ST_TO_ADDR
// hc_face_number := 6 ;
2318: LD_ADDR_OWVAR 34
2322: PUSH
2323: LD_INT 6
2325: ST_TO_ADDR
// hc_name := Leon Carter ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Leon Carter
2333: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2334: LD_ADDR_OWVAR 29
2338: PUSH
2339: LD_INT 10
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2349: LD_ADDR_OWVAR 30
2353: PUSH
2354: LD_INT 0
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2372: LD_ADDR_OWVAR 31
2376: PUSH
2377: LD_INT 0
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: ST_TO_ADDR
// un = CreateHuman ;
2395: LD_ADDR_VAR 0 4
2399: PUSH
2400: CALL_OW 44
2404: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2405: LD_VAR 0 4
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 52
// if count = 4 then
2419: LD_VAR 0 1
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2555
// begin hc_class := 1 ;
2429: LD_ADDR_OWVAR 28
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_sex := sex_male ;
2437: LD_ADDR_OWVAR 27
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING SecondCharsGal
2452: ST_TO_ADDR
// hc_face_number := 34 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 34
2460: ST_TO_ADDR
// hc_name := Ian Hill ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING Ian Hill
2468: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2469: LD_ADDR_OWVAR 29
2473: PUSH
2474: LD_INT 10
2476: PUSH
2477: LD_INT 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2484: LD_ADDR_OWVAR 30
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: LD_INT 0
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2507: LD_ADDR_OWVAR 31
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: ST_TO_ADDR
// un = CreateHuman ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: CALL_OW 44
2539: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2540: LD_VAR 0 4
2544: PPUSH
2545: LD_INT 11
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 49
// end ; if count = 5 then
2555: LD_VAR 0 1
2559: PUSH
2560: LD_INT 5
2562: EQUAL
2563: IFFALSE 2817
// begin hc_class := 1 ;
2565: LD_ADDR_OWVAR 28
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_sex := sex_male ;
2573: LD_ADDR_OWVAR 27
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2581: LD_ADDR_OWVAR 33
2585: PUSH
2586: LD_STRING SecondCharsGal
2588: ST_TO_ADDR
// hc_face_number := 34 ;
2589: LD_ADDR_OWVAR 34
2593: PUSH
2594: LD_INT 34
2596: ST_TO_ADDR
// hc_name := Ian Hill ;
2597: LD_ADDR_OWVAR 26
2601: PUSH
2602: LD_STRING Ian Hill
2604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2605: LD_ADDR_OWVAR 29
2609: PUSH
2610: LD_INT 10
2612: PUSH
2613: LD_INT 12
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2620: LD_ADDR_OWVAR 30
2624: PUSH
2625: LD_INT 1
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 0
2633: PUSH
2634: LD_INT 0
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2643: LD_ADDR_OWVAR 31
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: ST_TO_ADDR
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// hc_class := 1 ;
2691: LD_ADDR_OWVAR 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// hc_sex := sex_female ;
2699: LD_ADDR_OWVAR 27
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2707: LD_ADDR_OWVAR 33
2711: PUSH
2712: LD_STRING SecondCharsGal
2714: ST_TO_ADDR
// hc_face_number := 41 ;
2715: LD_ADDR_OWVAR 34
2719: PUSH
2720: LD_INT 41
2722: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2723: LD_ADDR_OWVAR 26
2727: PUSH
2728: LD_STRING Kate Wadsworth
2730: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2731: LD_ADDR_OWVAR 29
2735: PUSH
2736: LD_INT 9
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2746: LD_ADDR_OWVAR 30
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2769: LD_ADDR_OWVAR 31
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// un = CreateHuman ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 11
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2817: LD_INT 11
2819: PPUSH
2820: LD_INT 22
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 21
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 26
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 70
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2868: LD_INT 11
2870: PPUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 26
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 70
2910: PUSH
2911: LD_INT 1
2913: ARRAY
2914: PPUSH
2915: LD_STRING D6-Sol3-1
2917: PPUSH
2918: CALL_OW 88
// end ; end_of_file
2922: LD_VAR 0 2
2926: RET
// export function PrepareRussianCommander ; begin
2927: LD_INT 0
2929: PPUSH
// uc_side = 3 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// uc_nation = 3 ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Stolypin
2953: PPUSH
2954: CALL_OW 25
2958: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2959: LD_EXP 15
2963: PPUSH
2964: LD_INT 21
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: LD_VAR 0 1
2975: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// if Difficulty > 1 then
2982: LD_OWVAR 67
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3100
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := 3 ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// InitHc_All ( ) ;
3008: CALL_OW 584
// InitBc ;
3012: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3016: LD_INT 0
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL_OW 380
// bc_type := b_breastwork ;
3029: LD_ADDR_OWVAR 42
3033: PUSH
3034: LD_INT 31
3036: ST_TO_ADDR
// bc_level := 4 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 4
3044: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3045: LD_ADDR_VAR 0 3
3049: PUSH
3050: LD_INT 100
3052: PPUSH
3053: LD_INT 58
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 5
3081: PPUSH
3082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3086: LD_VAR 0 4
3090: PPUSH
3091: LD_VAR 0 3
3095: PPUSH
3096: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3100: LD_INT 3
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 22
3108: PPUSH
3109: LD_EXP 16
3113: PPUSH
3114: LD_EXP 17
3118: PPUSH
3119: CALL_OW 12
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 4
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 6
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_OWVAR 67
3149: ARRAY
3150: PPUSH
3151: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 21
3163: PPUSH
3164: LD_EXP 16
3168: PPUSH
3169: LD_EXP 17
3173: PPUSH
3174: CALL_OW 12
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: LD_EXP 16
3202: PPUSH
3203: LD_EXP 17
3207: PPUSH
3208: CALL_OW 12
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL 4353 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 24
3231: PPUSH
3232: LD_EXP 16
3236: PPUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 5
3252: PPUSH
3253: CALL 4353 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3332
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3294: LD_INT 3
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: LD_EXP 17
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL 4353 0 6
3330: GO 3291
3332: POP
3333: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 30
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: FOR_IN
3369: IFFALSE 3397
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL 4462 0 2
3395: GO 3368
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 1
3403: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 6 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 6
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// InitHC_All ( ) ;
3426: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: DOUBLE
3436: LD_INT 1
3438: DEC
3439: ST_TO_ADDR
3440: LD_INT 1
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: LD_INT 2
3448: PUSH
3449: LD_INT 3
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: PUSH
3458: LD_OWVAR 67
3462: ARRAY
3463: PUSH
3464: FOR_TO
3465: IFFALSE 3633
// begin vc_engine = 1 ;
3467: LD_ADDR_OWVAR 39
3471: PUSH
3472: LD_INT 1
3474: ST_TO_ADDR
// vc_control = 1 ;
3475: LD_ADDR_OWVAR 38
3479: PUSH
3480: LD_INT 1
3482: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3483: LD_ADDR_OWVAR 40
3487: PUSH
3488: LD_INT 42
3490: PUSH
3491: LD_INT 42
3493: PUSH
3494: LD_INT 43
3496: PUSH
3497: LD_INT 43
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: PUSH
3506: LD_OWVAR 67
3510: ARRAY
3511: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3512: LD_ADDR_OWVAR 37
3516: PUSH
3517: LD_INT 21
3519: PUSH
3520: LD_INT 22
3522: PUSH
3523: LD_INT 22
3525: PUSH
3526: LD_INT 22
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_OWVAR 67
3539: ARRAY
3540: ST_TO_ADDR
// veh = CreateVehicle ;
3541: LD_ADDR_VAR 0 3
3545: PUSH
3546: CALL_OW 45
3550: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_INT 3
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 49
// hc_gallery =  ;
3566: LD_ADDR_OWVAR 33
3570: PUSH
3571: LD_STRING 
3573: ST_TO_ADDR
// hc_name =  ;
3574: LD_ADDR_OWVAR 26
3578: PUSH
3579: LD_STRING 
3581: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3582: LD_INT 0
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: LD_EXP 16
3592: PPUSH
3593: LD_EXP 17
3597: PPUSH
3598: CALL_OW 12
3602: PPUSH
3603: CALL_OW 380
// un = CreateHuman ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: CALL_OW 44
3616: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3617: LD_VAR 0 4
3621: PPUSH
3622: LD_VAR 0 3
3626: PPUSH
3627: CALL_OW 52
// end ;
3631: GO 3464
3633: POP
3634: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3635: LD_INT 0
3637: PPUSH
3638: LD_INT 2
3640: PPUSH
3641: LD_EXP 16
3645: PPUSH
3646: LD_EXP 17
3650: PPUSH
3651: CALL_OW 12
3655: PUSH
3656: LD_INT 2
3658: PLUS
3659: PPUSH
3660: CALL_OW 380
// un = CreateHuman ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3674: LD_VAR 0 4
3678: PPUSH
3679: LD_INT 3
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3689: LD_INT 0
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_EXP 16
3699: PPUSH
3700: LD_EXP 17
3704: PPUSH
3705: CALL_OW 12
3709: PUSH
3710: LD_INT 2
3712: PLUS
3713: PPUSH
3714: CALL_OW 380
// un = CreateHuman ;
3718: LD_ADDR_VAR 0 4
3722: PUSH
3723: CALL_OW 44
3727: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3728: LD_VAR 0 4
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_INT 0
3738: PPUSH
3739: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: DOUBLE
3749: LD_INT 1
3751: DEC
3752: ST_TO_ADDR
3753: LD_INT 2
3755: PUSH
3756: LD_INT 3
3758: PUSH
3759: LD_INT 3
3761: PUSH
3762: LD_INT 4
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_OWVAR 67
3775: ARRAY
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 3
3782: PPUSH
3783: CALL_OW 12
3787: PLUS
3788: PUSH
3789: FOR_TO
3790: IFFALSE 3860
// begin hc_gallery =  ;
3792: LD_ADDR_OWVAR 33
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// hc_name =  ;
3800: LD_ADDR_OWVAR 26
3804: PUSH
3805: LD_STRING 
3807: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_EXP 16
3818: PPUSH
3819: LD_EXP 17
3823: PPUSH
3824: CALL_OW 12
3828: PPUSH
3829: CALL_OW 380
// un = CreateHuman ;
3833: LD_ADDR_VAR 0 4
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3843: LD_VAR 0 4
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 49
// end ;
3858: GO 3789
3860: POP
3861: POP
// vc_engine = 1 ;
3862: LD_ADDR_OWVAR 39
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// vc_control = 1 ;
3870: LD_ADDR_OWVAR 38
3874: PUSH
3875: LD_INT 1
3877: ST_TO_ADDR
// vc_weapon = 51 ;
3878: LD_ADDR_OWVAR 40
3882: PUSH
3883: LD_INT 51
3885: ST_TO_ADDR
// vc_chassis = 22 ;
3886: LD_ADDR_OWVAR 37
3890: PUSH
3891: LD_INT 22
3893: ST_TO_ADDR
// veh = CreateVehicle ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 100
3929: PPUSH
3930: CALL_OW 290
// hc_gallery =  ;
3934: LD_ADDR_OWVAR 33
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// hc_name =  ;
3942: LD_ADDR_OWVAR 26
3946: PUSH
3947: LD_STRING 
3949: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 3
3955: PPUSH
3956: LD_EXP 16
3960: PPUSH
3961: LD_EXP 17
3965: PPUSH
3966: CALL_OW 12
3970: PPUSH
3971: CALL_OW 380
// un = CreateHuman ;
3975: LD_ADDR_VAR 0 4
3979: PUSH
3980: CALL_OW 44
3984: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3985: LD_VAR 0 4
3989: PPUSH
3990: LD_VAR 0 3
3994: PPUSH
3995: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3999: LD_ADDR_VAR 0 2
4003: PUSH
4004: LD_INT 22
4006: PUSH
4007: LD_INT 6
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: LD_INT 3
4019: PUSH
4020: LD_INT 25
4022: PUSH
4023: LD_INT 2
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 25
4039: PUSH
4040: LD_INT 4
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PPUSH
4060: CALL_OW 69
4064: PUSH
4065: FOR_IN
4066: IFFALSE 4085
// ComAgressiveMove ( i , 45 , 46 ) ;
4068: LD_VAR 0 2
4072: PPUSH
4073: LD_INT 45
4075: PPUSH
4076: LD_INT 46
4078: PPUSH
4079: CALL_OW 114
4083: GO 4065
4085: POP
4086: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4087: LD_ADDR_VAR 0 2
4091: PUSH
4092: LD_INT 22
4094: PUSH
4095: LD_INT 6
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 25
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PPUSH
4116: CALL_OW 69
4120: PUSH
4121: FOR_IN
4122: IFFALSE 4153
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4124: LD_ADDR_EXP 21
4128: PUSH
4129: LD_VAR 0 2
4133: PPUSH
4134: LD_INT 0
4136: PPUSH
4137: LD_INT 48
4139: PPUSH
4140: LD_INT 55
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: CALL_OW 145
4150: ST_TO_ADDR
4151: GO 4121
4153: POP
4154: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4155: LD_ADDR_VAR 0 2
4159: PUSH
4160: LD_INT 22
4162: PUSH
4163: LD_INT 6
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 69
4188: PUSH
4189: FOR_IN
4190: IFFALSE 4209
// ComMoveXY ( i , 39 , 55 ) ;
4192: LD_VAR 0 2
4196: PPUSH
4197: LD_INT 39
4199: PPUSH
4200: LD_INT 55
4202: PPUSH
4203: CALL_OW 111
4207: GO 4189
4209: POP
4210: POP
// end ;
4211: LD_VAR 0 1
4215: RET
// export function PrepareFirstAttack ; var i , un ; begin
4216: LD_INT 0
4218: PPUSH
4219: PPUSH
4220: PPUSH
// uc_side = 5 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 5
4228: ST_TO_ADDR
// uc_nation = 3 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 3
4236: ST_TO_ADDR
// for i := 1 to 4 do
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: DOUBLE
4243: LD_INT 1
4245: DEC
4246: ST_TO_ADDR
4247: LD_INT 4
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4338
// begin InitHC_All ( ) ;
4253: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4257: LD_INT 0
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_EXP 16
4267: PPUSH
4268: LD_EXP 17
4272: PPUSH
4273: CALL_OW 12
4277: PPUSH
4278: CALL_OW 380
// un = CreateHuman ;
4282: LD_ADDR_VAR 0 3
4286: PUSH
4287: CALL_OW 44
4291: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4292: LD_VAR 0 3
4296: PPUSH
4297: LD_INT 4
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4307: LD_VAR 0 3
4311: PPUSH
4312: LD_EXP 1
4316: PPUSH
4317: CALL_OW 250
4321: PPUSH
4322: LD_EXP 1
4326: PPUSH
4327: CALL_OW 251
4331: PPUSH
4332: CALL_OW 114
// end ;
4336: GO 4250
4338: POP
4339: POP
// firstRussianAttack = 1 ;
4340: LD_ADDR_EXP 23
4344: PUSH
4345: LD_INT 1
4347: ST_TO_ADDR
// end ; end_of_file
4348: LD_VAR 0 1
4352: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4353: LD_INT 0
4355: PPUSH
4356: PPUSH
4357: PPUSH
// for i = 1 to count do
4358: LD_ADDR_VAR 0 8
4362: PUSH
4363: DOUBLE
4364: LD_INT 1
4366: DEC
4367: ST_TO_ADDR
4368: LD_VAR 0 6
4372: PUSH
4373: FOR_TO
4374: IFFALSE 4455
// begin uc_side = side ;
4376: LD_ADDR_OWVAR 20
4380: PUSH
4381: LD_VAR 0 1
4385: ST_TO_ADDR
// uc_nation = nation ;
4386: LD_ADDR_OWVAR 21
4390: PUSH
4391: LD_VAR 0 2
4395: ST_TO_ADDR
// hc_gallery =  ;
4396: LD_ADDR_OWVAR 33
4400: PUSH
4401: LD_STRING 
4403: ST_TO_ADDR
// hc_name =  ;
4404: LD_ADDR_OWVAR 26
4408: PUSH
4409: LD_STRING 
4411: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4412: LD_INT 0
4414: PPUSH
4415: LD_VAR 0 5
4419: PPUSH
4420: LD_VAR 0 4
4424: PPUSH
4425: CALL_OW 380
// un = CreateHuman ;
4429: LD_ADDR_VAR 0 9
4433: PUSH
4434: CALL_OW 44
4438: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4439: LD_VAR 0 9
4443: PPUSH
4444: LD_VAR 0 3
4448: PPUSH
4449: CALL_OW 52
// end ;
4453: GO 4373
4455: POP
4456: POP
// end ;
4457: LD_VAR 0 7
4461: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4462: LD_INT 0
4464: PPUSH
4465: PPUSH
4466: PPUSH
// uc_side := GetSide ( b ) ;
4467: LD_ADDR_OWVAR 20
4471: PUSH
4472: LD_VAR 0 2
4476: PPUSH
4477: CALL_OW 255
4481: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4482: LD_ADDR_OWVAR 21
4486: PUSH
4487: LD_VAR 0 2
4491: PPUSH
4492: CALL_OW 248
4496: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4497: LD_INT 0
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 380
// un = CreateHuman ;
4512: LD_ADDR_VAR 0 4
4516: PUSH
4517: CALL_OW 44
4521: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4522: LD_ADDR_VAR 0 5
4526: PUSH
4527: LD_VAR 0 2
4531: PPUSH
4532: CALL_OW 254
4536: PUSH
4537: LD_INT 3
4539: MINUS
4540: ST_TO_ADDR
// if dir < 0 then
4541: LD_VAR 0 5
4545: PUSH
4546: LD_INT 0
4548: LESS
4549: IFFALSE 4565
// dir := 6 + dir ;
4551: LD_ADDR_VAR 0 5
4555: PUSH
4556: LD_INT 6
4558: PUSH
4559: LD_VAR 0 5
4563: PLUS
4564: ST_TO_ADDR
// SetDir ( un , dir ) ;
4565: LD_VAR 0 4
4569: PPUSH
4570: LD_VAR 0 5
4574: PPUSH
4575: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: LD_VAR 0 2
4588: PPUSH
4589: CALL_OW 52
// end ;
4593: LD_VAR 0 3
4597: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4598: LD_INT 0
4600: PPUSH
4601: PPUSH
4602: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4603: LD_ADDR_VAR 0 6
4607: PUSH
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: PPUSH
4616: LD_VAR 0 1
4620: PPUSH
4621: CALL_OW 12
4625: ARRAY
4626: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4627: LD_VAR 0 6
4631: PPUSH
4632: CALL_OW 258
4636: PUSH
4637: LD_INT 1
4639: EQUAL
4640: IFFALSE 4658
// Say ( speaker , dialogMID ) else
4642: LD_VAR 0 6
4646: PPUSH
4647: LD_VAR 0 2
4651: PPUSH
4652: CALL_OW 88
4656: GO 4672
// Say ( speaker , dialogFID ) ;
4658: LD_VAR 0 6
4662: PPUSH
4663: LD_VAR 0 3
4667: PPUSH
4668: CALL_OW 88
// result := speaker ;
4672: LD_ADDR_VAR 0 4
4676: PUSH
4677: LD_VAR 0 6
4681: ST_TO_ADDR
// end ;
4682: LD_VAR 0 4
4686: RET
// export function PrepareDifficulty ; var tmp ; begin
4687: LD_INT 0
4689: PPUSH
4690: PPUSH
// if Difficulty = 1 then
4691: LD_OWVAR 67
4695: PUSH
4696: LD_INT 1
4698: EQUAL
4699: IFFALSE 4717
// begin RuSoldMinLevel = 1 ;
4701: LD_ADDR_EXP 16
4705: PUSH
4706: LD_INT 1
4708: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4709: LD_ADDR_EXP 17
4713: PUSH
4714: LD_INT 2
4716: ST_TO_ADDR
// end ; if Difficulty = 2 then
4717: LD_OWVAR 67
4721: PUSH
4722: LD_INT 2
4724: EQUAL
4725: IFFALSE 4826
// begin RuSoldMinLevel = 2 ;
4727: LD_ADDR_EXP 16
4731: PUSH
4732: LD_INT 2
4734: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4735: LD_ADDR_EXP 17
4739: PUSH
4740: LD_INT 3
4742: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4743: LD_INT 23
4745: PPUSH
4746: CALL_OW 64
// uc_nation = 3 ;
4750: LD_ADDR_OWVAR 21
4754: PUSH
4755: LD_INT 3
4757: ST_TO_ADDR
// uc_side = 3 ;
4758: LD_ADDR_OWVAR 20
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// bc_level = 5 ;
4766: LD_ADDR_OWVAR 43
4770: PUSH
4771: LD_INT 5
4773: ST_TO_ADDR
// bc_type = 32 ;
4774: LD_ADDR_OWVAR 42
4778: PUSH
4779: LD_INT 32
4781: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: LD_INT 76
4789: PPUSH
4790: LD_INT 91
4792: PPUSH
4793: LD_INT 2
4795: PPUSH
4796: CALL_OW 47
4800: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4801: LD_VAR 0 2
4805: PPUSH
4806: LD_INT 43
4808: PPUSH
4809: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4813: LD_INT 51
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 322
// end ; if Difficulty >= 3 then
4826: LD_OWVAR 67
4830: PUSH
4831: LD_INT 3
4833: GREATEREQUAL
4834: IFFALSE 4998
// begin RuSoldMinLevel = Difficulty ;
4836: LD_ADDR_EXP 16
4840: PUSH
4841: LD_OWVAR 67
4845: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4846: LD_ADDR_EXP 17
4850: PUSH
4851: LD_INT 4
4853: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4854: LD_INT 26
4856: PPUSH
4857: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4861: LD_INT 23
4863: PPUSH
4864: CALL_OW 64
// uc_nation = 3 ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_INT 3
4875: ST_TO_ADDR
// uc_side = 3 ;
4876: LD_ADDR_OWVAR 20
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// bc_level = 5 ;
4884: LD_ADDR_OWVAR 43
4888: PUSH
4889: LD_INT 5
4891: ST_TO_ADDR
// bc_type = 32 ;
4892: LD_ADDR_OWVAR 42
4896: PUSH
4897: LD_INT 32
4899: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4900: LD_ADDR_VAR 0 2
4904: PUSH
4905: LD_INT 76
4907: PPUSH
4908: LD_INT 91
4910: PPUSH
4911: LD_INT 2
4913: PPUSH
4914: CALL_OW 47
4918: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_INT 44
4926: PPUSH
4927: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4931: LD_ADDR_VAR 0 2
4935: PUSH
4936: LD_INT 83
4938: PPUSH
4939: LD_INT 84
4941: PPUSH
4942: LD_INT 2
4944: PPUSH
4945: CALL_OW 47
4949: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4950: LD_VAR 0 2
4954: PPUSH
4955: LD_INT 43
4957: PPUSH
4958: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4962: LD_INT 51
4964: PPUSH
4965: LD_INT 3
4967: PPUSH
4968: LD_INT 1
4970: PPUSH
4971: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4975: LD_INT 52
4977: PPUSH
4978: LD_INT 3
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4988: LD_INT 25
4990: PPUSH
4991: LD_INT 44
4993: PPUSH
4994: CALL_OW 431
// end ; end ;
4998: LD_VAR 0 1
5002: RET
// export function EnergyDialog ; begin
5003: LD_INT 0
5005: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5006: LD_INT 46
5008: PPUSH
5009: LD_INT 1
5011: PPUSH
5012: CALL_OW 321
5016: PUSH
5017: LD_INT 1
5019: EQUAL
5020: PUSH
5021: LD_INT 35
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 321
5031: PUSH
5032: LD_INT 1
5034: EQUAL
5035: AND
5036: IFFALSE 5060
// begin Say ( JMM , D9c-JMM-1 ) ;
5038: LD_EXP 1
5042: PPUSH
5043: LD_STRING D9c-JMM-1
5045: PPUSH
5046: CALL_OW 88
// energyVDialog = 1 ;
5050: LD_ADDR_EXP 33
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// end else
5058: GO 5214
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5060: LD_INT 35
5062: PPUSH
5063: LD_INT 1
5065: PPUSH
5066: CALL_OW 321
5070: PUSH
5071: LD_INT 2
5073: EQUAL
5074: PUSH
5075: LD_EXP 33
5079: PUSH
5080: LD_INT 0
5082: EQUAL
5083: AND
5084: IFFALSE 5106
// begin Say ( JMM , D9c-JMM-1a ) ;
5086: LD_EXP 1
5090: PPUSH
5091: LD_STRING D9c-JMM-1a
5093: PPUSH
5094: CALL_OW 88
// energyVDialog = 1 ;
5098: LD_ADDR_EXP 33
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5106: LD_INT 46
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: CALL_OW 321
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: PUSH
5121: LD_EXP 33
5125: PUSH
5126: LD_INT 0
5128: EQUAL
5129: AND
5130: IFFALSE 5152
// begin Say ( JMM , D9c-JMM-1b ) ;
5132: LD_EXP 1
5136: PPUSH
5137: LD_STRING D9c-JMM-1b
5139: PPUSH
5140: CALL_OW 88
// energyVDialog = 1 ;
5144: LD_ADDR_EXP 33
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5152: LD_INT 46
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 321
5162: PUSH
5163: LD_INT 2
5165: EQUAL
5166: PUSH
5167: LD_INT 21
5169: PPUSH
5170: LD_INT 1
5172: PPUSH
5173: CALL_OW 321
5177: PUSH
5178: LD_INT 2
5180: EQUAL
5181: AND
5182: PUSH
5183: LD_EXP 33
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: AND
5192: IFFALSE 5214
// begin Say ( JMM , D9c-JMM-1c ) ;
5194: LD_EXP 1
5198: PPUSH
5199: LD_STRING D9c-JMM-1c
5201: PPUSH
5202: CALL_OW 88
// energyVDialog = 1 ;
5206: LD_ADDR_EXP 33
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// end ; end ; end ;
5214: LD_VAR 0 1
5218: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5226: LD_VAR 0 1
5230: NOT
5231: PUSH
5232: LD_VAR 0 1
5236: PPUSH
5237: CALL_OW 256
5241: PUSH
5242: LD_INT 250
5244: LESS
5245: OR
5246: PUSH
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 314
5256: PUSH
5257: LD_VAR 0 1
5261: PPUSH
5262: CALL_OW 261
5266: PUSH
5267: LD_INT 20
5269: GREATER
5270: AND
5271: OR
5272: IFFALSE 5276
// exit ;
5274: GO 5641
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5276: LD_VAR 0 1
5280: PPUSH
5281: CALL_OW 261
5285: PUSH
5286: LD_INT 20
5288: LESS
5289: PUSH
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 110
5299: PUSH
5300: LD_INT 21
5302: EQUAL
5303: NOT
5304: AND
5305: IFFALSE 5332
// begin ComStop ( bulldozer ) ;
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_INT 21
5323: PPUSH
5324: CALL_OW 109
// exit ;
5328: GO 5641
// end else
5330: GO 5359
// if GetFuel ( bulldozer ) > 20 then
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 261
5341: PUSH
5342: LD_INT 20
5344: GREATER
5345: IFFALSE 5359
// SetTag ( bulldozer , 0 ) ;
5347: LD_VAR 0 1
5351: PPUSH
5352: LD_INT 0
5354: PPUSH
5355: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5359: LD_ADDR_VAR 0 5
5363: PUSH
5364: LD_VAR 0 2
5368: PPUSH
5369: CALL_OW 353
5373: ST_TO_ADDR
// tmp := [ ] ;
5374: LD_ADDR_VAR 0 6
5378: PUSH
5379: EMPTY
5380: ST_TO_ADDR
// for i = 1 to list do
5381: LD_ADDR_VAR 0 4
5385: PUSH
5386: DOUBLE
5387: LD_INT 1
5389: DEC
5390: ST_TO_ADDR
5391: LD_VAR 0 5
5395: PUSH
5396: FOR_TO
5397: IFFALSE 5495
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5399: LD_VAR 0 5
5403: PUSH
5404: LD_VAR 0 4
5408: ARRAY
5409: PUSH
5410: LD_INT 1
5412: ARRAY
5413: PPUSH
5414: LD_VAR 0 5
5418: PUSH
5419: LD_VAR 0 4
5423: ARRAY
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: PPUSH
5429: CALL_OW 554
5433: IFFALSE 5493
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5435: LD_ADDR_VAR 0 6
5439: PUSH
5440: LD_VAR 0 6
5444: PPUSH
5445: LD_VAR 0 6
5449: PUSH
5450: LD_INT 1
5452: PLUS
5453: PPUSH
5454: LD_VAR 0 5
5458: PUSH
5459: LD_VAR 0 4
5463: ARRAY
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PUSH
5469: LD_VAR 0 5
5473: PUSH
5474: LD_VAR 0 4
5478: ARRAY
5479: PUSH
5480: LD_INT 2
5482: ARRAY
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PPUSH
5488: CALL_OW 1
5492: ST_TO_ADDR
// end ;
5493: GO 5396
5495: POP
5496: POP
// ComStop ( bulldozer ) ;
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5506: LD_ADDR_VAR 0 7
5510: PUSH
5511: LD_VAR 0 1
5515: PPUSH
5516: CALL_OW 250
5520: PUSH
5521: LD_VAR 0 1
5525: PPUSH
5526: CALL_OW 251
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: ST_TO_ADDR
// for i = tmp downto 1 do
5535: LD_ADDR_VAR 0 4
5539: PUSH
5540: DOUBLE
5541: LD_VAR 0 6
5545: INC
5546: ST_TO_ADDR
5547: LD_INT 1
5549: PUSH
5550: FOR_DOWNTO
5551: IFFALSE 5639
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5553: LD_ADDR_VAR 0 7
5557: PUSH
5558: LD_VAR 0 7
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: PPUSH
5567: LD_VAR 0 7
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: LD_VAR 0 6
5580: PPUSH
5581: CALL 5742 0 3
5585: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5586: LD_VAR 0 1
5590: PPUSH
5591: LD_VAR 0 7
5595: PUSH
5596: LD_INT 1
5598: ARRAY
5599: PPUSH
5600: LD_VAR 0 7
5604: PUSH
5605: LD_INT 2
5607: ARRAY
5608: PPUSH
5609: CALL 5646 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5613: LD_ADDR_VAR 0 6
5617: PUSH
5618: LD_VAR 0 6
5622: PPUSH
5623: LD_VAR 0 7
5627: PUSH
5628: LD_INT 3
5630: ARRAY
5631: PPUSH
5632: CALL_OW 3
5636: ST_TO_ADDR
// end ;
5637: GO 5550
5639: POP
5640: POP
// end ;
5641: LD_VAR 0 3
5645: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5646: LD_INT 0
5648: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5649: LD_VAR 0 2
5653: PPUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: CALL_OW 351
5663: PUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: CALL_OW 554
5678: AND
5679: PUSH
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: CALL_OW 488
5694: AND
5695: PUSH
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_VAR 0 3
5705: PPUSH
5706: CALL_OW 428
5710: PUSH
5711: LD_INT 1
5713: NEG
5714: EQUAL
5715: AND
5716: IFFALSE 5737
// AddComMoveXY ( bulldozer , x , y ) ;
5718: LD_VAR 0 1
5722: PPUSH
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_VAR 0 3
5732: PPUSH
5733: CALL_OW 171
// end ;
5737: LD_VAR 0 4
5741: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5742: LD_INT 0
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
5749: PPUSH
5750: PPUSH
// dist := 99999 ;
5751: LD_ADDR_VAR 0 6
5755: PUSH
5756: LD_INT 99999
5758: ST_TO_ADDR
// for i = 1 to list do
5759: LD_ADDR_VAR 0 5
5763: PUSH
5764: DOUBLE
5765: LD_INT 1
5767: DEC
5768: ST_TO_ADDR
5769: LD_VAR 0 3
5773: PUSH
5774: FOR_TO
5775: IFFALSE 5913
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5777: LD_ADDR_VAR 0 7
5781: PUSH
5782: LD_VAR 0 1
5786: PPUSH
5787: LD_VAR 0 2
5791: PPUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_VAR 0 5
5801: ARRAY
5802: PUSH
5803: LD_INT 1
5805: ARRAY
5806: PPUSH
5807: LD_VAR 0 3
5811: PUSH
5812: LD_VAR 0 5
5816: ARRAY
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PPUSH
5822: CALL_OW 298
5826: ST_TO_ADDR
// if d = 0 then
5827: LD_VAR 0 7
5831: PUSH
5832: LD_INT 0
5834: EQUAL
5835: IFFALSE 5839
// continue ;
5837: GO 5774
// if d < dist then
5839: LD_VAR 0 7
5843: PUSH
5844: LD_VAR 0 6
5848: LESS
5849: IFFALSE 5911
// begin _x := list [ i ] [ 1 ] ;
5851: LD_ADDR_VAR 0 8
5855: PUSH
5856: LD_VAR 0 3
5860: PUSH
5861: LD_VAR 0 5
5865: ARRAY
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5871: LD_ADDR_VAR 0 9
5875: PUSH
5876: LD_VAR 0 3
5880: PUSH
5881: LD_VAR 0 5
5885: ARRAY
5886: PUSH
5887: LD_INT 2
5889: ARRAY
5890: ST_TO_ADDR
// _i := i ;
5891: LD_ADDR_VAR 0 10
5895: PUSH
5896: LD_VAR 0 5
5900: ST_TO_ADDR
// dist := d ;
5901: LD_ADDR_VAR 0 6
5905: PUSH
5906: LD_VAR 0 7
5910: ST_TO_ADDR
// end ; end ;
5911: GO 5774
5913: POP
5914: POP
// result := [ _x , _y , _i , dist ] ;
5915: LD_ADDR_VAR 0 4
5919: PUSH
5920: LD_VAR 0 8
5924: PUSH
5925: LD_VAR 0 9
5929: PUSH
5930: LD_VAR 0 10
5934: PUSH
5935: LD_VAR 0 6
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: ST_TO_ADDR
// end ;
5946: LD_VAR 0 4
5950: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// for i = 1 to 72 do
5955: LD_ADDR_VAR 0 5
5959: PUSH
5960: DOUBLE
5961: LD_INT 1
5963: DEC
5964: ST_TO_ADDR
5965: LD_INT 72
5967: PUSH
5968: FOR_TO
5969: IFFALSE 6023
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5971: LD_VAR 0 5
5975: PPUSH
5976: LD_VAR 0 1
5980: PPUSH
5981: CALL_OW 321
5985: PUSH
5986: LD_INT 1
5988: EQUAL
5989: PUSH
5990: LD_VAR 0 5
5994: PPUSH
5995: LD_VAR 0 3
5999: PPUSH
6000: CALL_OW 482
6004: AND
6005: IFFALSE 6021
// AddComResearch ( lab , i ) ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 5
6016: PPUSH
6017: CALL_OW 184
6021: GO 5968
6023: POP
6024: POP
// end ;
6025: LD_VAR 0 4
6029: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
6036: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6037: LD_ADDR_VAR 0 7
6041: PUSH
6042: LD_VAR 0 2
6046: PPUSH
6047: CALL_OW 313
6051: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6052: LD_ADDR_VAR 0 8
6056: PUSH
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_INT 22
6064: PUSH
6065: LD_VAR 0 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 2
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 24
6086: PUSH
6087: LD_INT 750
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: LD_INT 54
6099: PUSH
6100: EMPTY
6101: LIST
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 70
6117: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6118: LD_ADDR_VAR 0 5
6122: PUSH
6123: LD_VAR 0 3
6127: PPUSH
6128: LD_INT 22
6130: PUSH
6131: LD_VAR 0 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 21
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: LD_INT 24
6155: PUSH
6156: LD_INT 1000
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: PUSH
6172: EMPTY
6173: LIST
6174: PPUSH
6175: CALL_OW 70
6179: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6180: LD_VAR 0 5
6184: NOT
6185: PUSH
6186: LD_INT 22
6188: PUSH
6189: LD_VAR 0 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 24
6210: PUSH
6211: LD_INT 250
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: PPUSH
6223: CALL_OW 69
6227: NOT
6228: AND
6229: IFFALSE 6233
// exit ;
6231: GO 6329
// if buildingsList and engineerOkInside then
6233: LD_VAR 0 5
6237: PUSH
6238: LD_VAR 0 7
6242: AND
6243: IFFALSE 6269
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6245: LD_VAR 0 7
6249: PPUSH
6250: LD_INT 25
6252: PUSH
6253: LD_INT 2
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PPUSH
6260: CALL_OW 72
6264: PPUSH
6265: CALL_OW 122
// if buildingsList and engineerOkOutside then
6269: LD_VAR 0 5
6273: PUSH
6274: LD_VAR 0 8
6278: AND
6279: IFFALSE 6299
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6281: LD_VAR 0 8
6285: PPUSH
6286: LD_VAR 0 5
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6299: LD_VAR 0 5
6303: PUSH
6304: LD_INT 0
6306: EQUAL
6307: PUSH
6308: LD_VAR 0 8
6312: AND
6313: IFFALSE 6329
// ComEnterUnit ( engineerOkOutside , building ) ;
6315: LD_VAR 0 8
6319: PPUSH
6320: LD_VAR 0 2
6324: PPUSH
6325: CALL_OW 120
// end ;
6329: LD_VAR 0 4
6333: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6334: LD_INT 0
6336: PPUSH
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6343: LD_ADDR_VAR 0 6
6347: PUSH
6348: LD_INT 22
6350: PUSH
6351: LD_VAR 0 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 4
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 23
6372: PUSH
6373: LD_INT 2
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 251
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 69
6400: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6401: LD_ADDR_VAR 0 7
6405: PUSH
6406: LD_VAR 0 3
6410: PPUSH
6411: LD_INT 22
6413: PUSH
6414: LD_VAR 0 1
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 23
6425: PUSH
6426: LD_INT 2
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 25
6435: PUSH
6436: LD_INT 4
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 50
6445: PUSH
6446: EMPTY
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PPUSH
6455: CALL_OW 70
6459: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6460: LD_ADDR_VAR 0 8
6464: PUSH
6465: LD_VAR 0 3
6469: PPUSH
6470: LD_INT 22
6472: PUSH
6473: LD_VAR 0 1
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 21
6484: PUSH
6485: LD_INT 1
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PUSH
6492: LD_INT 3
6494: PUSH
6495: LD_INT 25
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 24
6514: PUSH
6515: LD_INT 750
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: PPUSH
6532: CALL_OW 70
6536: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6537: LD_ADDR_VAR 0 9
6541: PUSH
6542: LD_VAR 0 2
6546: PPUSH
6547: LD_INT 22
6549: PUSH
6550: LD_VAR 0 1
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 21
6561: PUSH
6562: LD_INT 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 3
6571: PUSH
6572: LD_INT 25
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 3
6588: PUSH
6589: LD_INT 24
6591: PUSH
6592: LD_INT 1000
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: PPUSH
6609: CALL_OW 70
6613: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6614: LD_VAR 0 8
6618: NOT
6619: PUSH
6620: LD_VAR 0 9
6624: NOT
6625: AND
6626: PUSH
6627: LD_VAR 0 6
6631: NOT
6632: AND
6633: IFFALSE 6637
// exit ;
6635: GO 6843
// if damageUnits and sciList then
6637: LD_VAR 0 8
6641: PUSH
6642: LD_VAR 0 6
6646: AND
6647: IFFALSE 6663
// ComMoveToArea ( damageUnits , healArea ) ;
6649: LD_VAR 0 8
6653: PPUSH
6654: LD_VAR 0 2
6658: PPUSH
6659: CALL_OW 113
// if unitsToHeal and sciList then
6663: LD_VAR 0 9
6667: PUSH
6668: LD_VAR 0 6
6672: AND
6673: IFFALSE 6684
// ComExitBuilding ( sciList ) ;
6675: LD_VAR 0 6
6679: PPUSH
6680: CALL_OW 122
// if unitsToHeal and sciListOutside then
6684: LD_VAR 0 9
6688: PUSH
6689: LD_VAR 0 7
6693: AND
6694: IFFALSE 6714
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6696: LD_VAR 0 7
6700: PPUSH
6701: LD_VAR 0 9
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: PPUSH
6710: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6714: LD_VAR 0 8
6718: PUSH
6719: LD_INT 0
6721: EQUAL
6722: PUSH
6723: LD_VAR 0 9
6727: PUSH
6728: LD_INT 0
6730: EQUAL
6731: AND
6732: PUSH
6733: LD_VAR 0 7
6737: AND
6738: IFFALSE 6843
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6740: LD_ADDR_VAR 0 10
6744: PUSH
6745: LD_INT 22
6747: PUSH
6748: LD_VAR 0 1
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 21
6759: PUSH
6760: LD_INT 3
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 8
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 69
6786: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6787: LD_ADDR_VAR 0 11
6791: PUSH
6792: LD_INT 1
6794: PPUSH
6795: LD_VAR 0 10
6799: PPUSH
6800: CALL_OW 12
6804: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6805: LD_VAR 0 7
6809: PPUSH
6810: LD_INT 3
6812: PUSH
6813: LD_INT 60
6815: PUSH
6816: EMPTY
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PPUSH
6823: CALL_OW 72
6827: PPUSH
6828: LD_VAR 0 10
6832: PUSH
6833: LD_VAR 0 11
6837: ARRAY
6838: PPUSH
6839: CALL_OW 120
// end ; end ;
6843: LD_VAR 0 5
6847: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6852: LD_INT 22
6854: PUSH
6855: LD_VAR 0 1
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 21
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 69
6882: PUSH
6883: LD_VAR 0 3
6887: LESSEQUAL
6888: IFFALSE 6955
// for i = 1 to vehCount do
6890: LD_ADDR_VAR 0 9
6894: PUSH
6895: DOUBLE
6896: LD_INT 1
6898: DEC
6899: ST_TO_ADDR
6900: LD_VAR 0 3
6904: PUSH
6905: FOR_TO
6906: IFFALSE 6953
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6908: LD_VAR 0 2
6912: PPUSH
6913: LD_VAR 0 7
6917: PPUSH
6918: LD_VAR 0 5
6922: PPUSH
6923: LD_VAR 0 6
6927: PPUSH
6928: LD_VAR 0 4
6932: PUSH
6933: LD_INT 1
6935: PPUSH
6936: LD_VAR 0 4
6940: PPUSH
6941: CALL_OW 12
6945: ARRAY
6946: PPUSH
6947: CALL_OW 185
6951: GO 6905
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 8
6959: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
// for i = 1 to medicCount do
6973: LD_ADDR_VAR 0 11
6977: PUSH
6978: DOUBLE
6979: LD_INT 1
6981: DEC
6982: ST_TO_ADDR
6983: LD_VAR 0 4
6987: PUSH
6988: FOR_TO
6989: IFFALSE 7059
// begin uc_side = side ;
6991: LD_ADDR_OWVAR 20
6995: PUSH
6996: LD_VAR 0 1
7000: ST_TO_ADDR
// uc_nation = nation ;
7001: LD_ADDR_OWVAR 21
7005: PUSH
7006: LD_VAR 0 2
7010: ST_TO_ADDR
// InitHC_All ( ) ;
7011: CALL_OW 584
// PrepareHuman ( false , 4 , skil ) ;
7015: LD_INT 0
7017: PPUSH
7018: LD_INT 4
7020: PPUSH
7021: LD_VAR 0 5
7025: PPUSH
7026: CALL_OW 380
// un = CreateHuman ;
7030: LD_ADDR_VAR 0 13
7034: PUSH
7035: CALL_OW 44
7039: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7040: LD_VAR 0 13
7044: PPUSH
7045: LD_VAR 0 6
7049: PPUSH
7050: LD_INT 0
7052: PPUSH
7053: CALL_OW 49
// end ;
7057: GO 6988
7059: POP
7060: POP
// for i = 1 to soldierCount do
7061: LD_ADDR_VAR 0 11
7065: PUSH
7066: DOUBLE
7067: LD_INT 1
7069: DEC
7070: ST_TO_ADDR
7071: LD_VAR 0 3
7075: PUSH
7076: FOR_TO
7077: IFFALSE 7147
// begin uc_side = side ;
7079: LD_ADDR_OWVAR 20
7083: PUSH
7084: LD_VAR 0 1
7088: ST_TO_ADDR
// uc_nation = nation ;
7089: LD_ADDR_OWVAR 21
7093: PUSH
7094: LD_VAR 0 2
7098: ST_TO_ADDR
// InitHC_All ( ) ;
7099: CALL_OW 584
// PrepareHuman ( false , 1 , skil ) ;
7103: LD_INT 0
7105: PPUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_VAR 0 5
7113: PPUSH
7114: CALL_OW 380
// un = CreateHuman ;
7118: LD_ADDR_VAR 0 13
7122: PUSH
7123: CALL_OW 44
7127: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7128: LD_VAR 0 13
7132: PPUSH
7133: LD_VAR 0 6
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7076
7147: POP
7148: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7149: LD_ADDR_VAR 0 16
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 1
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 25
7201: PUSH
7202: LD_INT 9
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7225: LD_ADDR_VAR 0 15
7229: PUSH
7230: LD_INT 22
7232: PUSH
7233: LD_VAR 0 1
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 25
7244: PUSH
7245: LD_INT 4
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 69
7260: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7261: LD_VAR 0 15
7265: PPUSH
7266: LD_VAR 0 7
7270: PPUSH
7271: CALL_OW 113
// if strategy = 1 then
7275: LD_VAR 0 9
7279: PUSH
7280: LD_INT 1
7282: EQUAL
7283: IFFALSE 7731
// begin for i in soldiersOK_list do
7285: LD_ADDR_VAR 0 11
7289: PUSH
7290: LD_VAR 0 16
7294: PUSH
7295: FOR_IN
7296: IFFALSE 7360
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7298: LD_VAR 0 11
7302: PPUSH
7303: LD_INT 91
7305: PPUSH
7306: LD_INT 63
7308: PPUSH
7309: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7313: LD_VAR 0 11
7317: PPUSH
7318: LD_INT 101
7320: PPUSH
7321: LD_INT 53
7323: PPUSH
7324: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7328: LD_VAR 0 11
7332: PPUSH
7333: LD_INT 75
7335: PPUSH
7336: LD_INT 23
7338: PPUSH
7339: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7343: LD_VAR 0 11
7347: PPUSH
7348: LD_INT 78
7350: PPUSH
7351: LD_INT 8
7353: PPUSH
7354: CALL_OW 174
// end ;
7358: GO 7295
7360: POP
7361: POP
// wait ( 0 0$30 ) ;
7362: LD_INT 1050
7364: PPUSH
7365: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7369: LD_INT 35
7371: PPUSH
7372: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7376: LD_ADDR_VAR 0 14
7380: PUSH
7381: LD_INT 22
7383: PUSH
7384: LD_VAR 0 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: LD_INT 24
7401: PUSH
7402: LD_INT 550
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 24
7415: PUSH
7416: LD_INT 250
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7437: LD_ADDR_VAR 0 16
7441: PUSH
7442: LD_INT 22
7444: PUSH
7445: LD_VAR 0 1
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 25
7456: PUSH
7457: LD_INT 1
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 24
7466: PUSH
7467: LD_INT 1000
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: PPUSH
7479: CALL_OW 69
7483: ST_TO_ADDR
// if medicCount then
7484: LD_VAR 0 4
7488: IFFALSE 7528
// begin if damageUnit_list then
7490: LD_VAR 0 14
7494: IFFALSE 7528
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7496: LD_VAR 0 14
7500: PPUSH
7501: LD_VAR 0 7
7505: PPUSH
7506: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_VAR 0 14
7519: PUSH
7520: LD_INT 1
7522: ARRAY
7523: PPUSH
7524: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7528: LD_ADDR_VAR 0 11
7532: PUSH
7533: LD_VAR 0 16
7537: PUSH
7538: FOR_IN
7539: IFFALSE 7715
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7541: LD_ADDR_VAR 0 19
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_VAR 0 8
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 69
7562: PPUSH
7563: LD_VAR 0 11
7567: PPUSH
7568: CALL_OW 74
7572: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7573: LD_ADDR_VAR 0 20
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 2
7592: PUSH
7593: LD_INT 59
7595: PUSH
7596: EMPTY
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 1
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 21
7611: PUSH
7612: LD_INT 2
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: PPUSH
7632: CALL_OW 69
7636: PPUSH
7637: LD_VAR 0 11
7641: PPUSH
7642: CALL_OW 74
7646: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7647: LD_VAR 0 11
7651: PPUSH
7652: LD_VAR 0 19
7656: PPUSH
7657: CALL_OW 296
7661: PUSH
7662: LD_INT 8
7664: PLUS
7665: PUSH
7666: LD_VAR 0 11
7670: PPUSH
7671: LD_VAR 0 20
7675: PPUSH
7676: CALL_OW 296
7680: LESS
7681: IFFALSE 7699
// ComAttackUnit ( i , target1 ) else
7683: LD_VAR 0 11
7687: PPUSH
7688: LD_VAR 0 19
7692: PPUSH
7693: CALL_OW 115
7697: GO 7713
// ComAttackUnit ( i , target2 ) ;
7699: LD_VAR 0 11
7703: PPUSH
7704: LD_VAR 0 20
7708: PPUSH
7709: CALL_OW 115
// end ;
7713: GO 7538
7715: POP
7716: POP
// until not soldiersOK_list and not damageUnit_list ;
7717: LD_VAR 0 16
7721: NOT
7722: PUSH
7723: LD_VAR 0 14
7727: NOT
7728: AND
7729: IFFALSE 7369
// end ; if strategy = 2 then
7731: LD_VAR 0 9
7735: PUSH
7736: LD_INT 2
7738: EQUAL
7739: IFFALSE 8157
// begin for i in soldiersOK_list do
7741: LD_ADDR_VAR 0 11
7745: PUSH
7746: LD_VAR 0 16
7750: PUSH
7751: FOR_IN
7752: IFFALSE 7786
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7754: LD_VAR 0 11
7758: PPUSH
7759: LD_INT 91
7761: PPUSH
7762: LD_INT 63
7764: PPUSH
7765: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7769: LD_VAR 0 11
7773: PPUSH
7774: LD_INT 75
7776: PPUSH
7777: LD_INT 33
7779: PPUSH
7780: CALL_OW 174
// end ;
7784: GO 7751
7786: POP
7787: POP
// wait ( 0 0$10 ) ;
7788: LD_INT 350
7790: PPUSH
7791: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7795: LD_INT 105
7797: PPUSH
7798: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7802: LD_ADDR_VAR 0 14
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: LD_INT 24
7827: PUSH
7828: LD_INT 550
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 24
7841: PUSH
7842: LD_INT 250
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 69
7862: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7863: LD_ADDR_VAR 0 16
7867: PUSH
7868: LD_INT 22
7870: PUSH
7871: LD_VAR 0 1
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 25
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 24
7892: PUSH
7893: LD_INT 1000
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: PPUSH
7905: CALL_OW 69
7909: ST_TO_ADDR
// if medicCount then
7910: LD_VAR 0 4
7914: IFFALSE 7954
// begin if damageUnit_list then
7916: LD_VAR 0 14
7920: IFFALSE 7954
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7922: LD_VAR 0 14
7926: PPUSH
7927: LD_VAR 0 7
7931: PPUSH
7932: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7936: LD_VAR 0 4
7940: PPUSH
7941: LD_VAR 0 14
7945: PUSH
7946: LD_INT 1
7948: ARRAY
7949: PPUSH
7950: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7954: LD_ADDR_VAR 0 11
7958: PUSH
7959: LD_VAR 0 16
7963: PUSH
7964: FOR_IN
7965: IFFALSE 8141
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7967: LD_ADDR_VAR 0 19
7971: PUSH
7972: LD_INT 22
7974: PUSH
7975: LD_VAR 0 8
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PPUSH
7984: CALL_OW 69
7988: PPUSH
7989: LD_VAR 0 11
7993: PPUSH
7994: CALL_OW 74
7998: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7999: LD_ADDR_VAR 0 20
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 8
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: LD_INT 59
8021: PUSH
8022: EMPTY
8023: LIST
8024: PUSH
8025: LD_INT 21
8027: PUSH
8028: LD_INT 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: LD_INT 21
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: PPUSH
8058: CALL_OW 69
8062: PPUSH
8063: LD_VAR 0 11
8067: PPUSH
8068: CALL_OW 74
8072: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8073: LD_VAR 0 11
8077: PPUSH
8078: LD_VAR 0 19
8082: PPUSH
8083: CALL_OW 296
8087: PUSH
8088: LD_INT 8
8090: PLUS
8091: PUSH
8092: LD_VAR 0 11
8096: PPUSH
8097: LD_VAR 0 20
8101: PPUSH
8102: CALL_OW 296
8106: LESS
8107: IFFALSE 8125
// ComAttackUnit ( i , target1 ) else
8109: LD_VAR 0 11
8113: PPUSH
8114: LD_VAR 0 19
8118: PPUSH
8119: CALL_OW 115
8123: GO 8139
// ComAttackUnit ( i , target2 ) ;
8125: LD_VAR 0 11
8129: PPUSH
8130: LD_VAR 0 20
8134: PPUSH
8135: CALL_OW 115
// end ;
8139: GO 7964
8141: POP
8142: POP
// until not soldiersOK_list and not damageUnit_list ;
8143: LD_VAR 0 16
8147: NOT
8148: PUSH
8149: LD_VAR 0 14
8153: NOT
8154: AND
8155: IFFALSE 7795
// end ; if medic_list then
8157: LD_VAR 0 15
8161: IFFALSE 8301
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8163: LD_ADDR_VAR 0 15
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_VAR 0 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 25
8182: PUSH
8183: LD_INT 4
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 50
8192: PUSH
8193: EMPTY
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8206: LD_INT 35
8208: PPUSH
8209: CALL_OW 67
// for i in medic_list do
8213: LD_ADDR_VAR 0 11
8217: PUSH
8218: LD_VAR 0 15
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8292
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8226: LD_VAR 0 11
8230: PPUSH
8231: CALL_OW 314
8235: NOT
8236: PUSH
8237: LD_VAR 0 11
8241: PPUSH
8242: LD_INT 4
8244: PPUSH
8245: CALL_OW 308
8249: NOT
8250: AND
8251: IFFALSE 8267
// ComMoveToArea ( i , RussianAttack ) else
8253: LD_VAR 0 11
8257: PPUSH
8258: LD_INT 4
8260: PPUSH
8261: CALL_OW 113
8265: GO 8290
// if IsInArea ( i , RussianAttack ) then
8267: LD_VAR 0 11
8271: PPUSH
8272: LD_INT 4
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8290
// RemoveUnit ( i ) ;
8281: LD_VAR 0 11
8285: PPUSH
8286: CALL_OW 64
8290: GO 8223
8292: POP
8293: POP
// until not medic_list ;
8294: LD_VAR 0 15
8298: NOT
8299: IFFALSE 8163
// end ; end ; end_of_file
8301: LD_VAR 0 10
8305: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8306: LD_INT 0
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
// InGameOn ;
8313: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8317: LD_ADDR_VAR 0 3
8321: PUSH
8322: LD_EXP 8
8326: PUSH
8327: LD_EXP 9
8331: PUSH
8332: LD_EXP 10
8336: PUSH
8337: LD_EXP 11
8341: PUSH
8342: LD_EXP 12
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8354: LD_ADDR_VAR 0 4
8358: PUSH
8359: LD_INT 46
8361: PUSH
8362: LD_INT 45
8364: PUSH
8365: LD_INT 44
8367: PUSH
8368: LD_INT 43
8370: PUSH
8371: LD_INT 42
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8381: LD_ADDR_VAR 0 5
8385: PUSH
8386: LD_INT 14
8388: PUSH
8389: LD_INT 12
8391: PUSH
8392: LD_INT 10
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 6
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8408: LD_EXP 11
8412: PPUSH
8413: LD_INT 31
8415: PPUSH
8416: LD_INT 59
8418: PPUSH
8419: LD_INT 19
8421: PPUSH
8422: LD_INT 5
8424: PPUSH
8425: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8429: LD_INT 32
8431: PPUSH
8432: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8436: LD_INT 32
8438: PPUSH
8439: LD_INT 51
8441: PPUSH
8442: LD_INT 26
8444: PPUSH
8445: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8449: LD_INT 32
8451: PPUSH
8452: LD_INT 53
8454: PPUSH
8455: LD_INT 23
8457: PPUSH
8458: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8462: LD_INT 32
8464: PPUSH
8465: LD_INT 52
8467: PPUSH
8468: LD_INT 19
8470: PPUSH
8471: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8475: LD_INT 35
8477: PPUSH
8478: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8482: LD_INT 32
8484: PPUSH
8485: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8489: LD_INT 32
8491: PPUSH
8492: CALL_OW 250
8496: PUSH
8497: LD_INT 52
8499: EQUAL
8500: PUSH
8501: LD_INT 32
8503: PPUSH
8504: CALL_OW 251
8508: PUSH
8509: LD_INT 19
8511: EQUAL
8512: AND
8513: IFFALSE 8475
// ComExitVehicle ( JMM ) ;
8515: LD_EXP 1
8519: PPUSH
8520: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8524: LD_EXP 7
8528: PPUSH
8529: LD_EXP 1
8533: PPUSH
8534: CALL_OW 119
// wait ( 0 0$01 ) ;
8538: LD_INT 35
8540: PPUSH
8541: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8545: LD_EXP 1
8549: PPUSH
8550: LD_INT 46
8552: PPUSH
8553: LD_INT 10
8555: PPUSH
8556: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8560: LD_EXP 1
8564: PPUSH
8565: LD_EXP 7
8569: PPUSH
8570: CALL_OW 179
// wait ( 0 0$4 ) ;
8574: LD_INT 140
8576: PPUSH
8577: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8581: LD_EXP 1
8585: PPUSH
8586: LD_STRING D1-JMM-1
8588: PPUSH
8589: CALL_OW 88
// if not dialogue_skipped then
8593: LD_OWVAR 59
8597: NOT
8598: IFFALSE 9255
// begin for i := 1 to gammaSquad do
8600: LD_ADDR_VAR 0 2
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 3
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8677
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8618: LD_VAR 0 3
8622: PUSH
8623: LD_VAR 0 2
8627: ARRAY
8628: PPUSH
8629: LD_VAR 0 4
8633: PUSH
8634: LD_VAR 0 2
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 5
8644: PUSH
8645: LD_VAR 0 2
8649: ARRAY
8650: PPUSH
8651: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8655: LD_VAR 0 3
8659: PUSH
8660: LD_VAR 0 2
8664: ARRAY
8665: PPUSH
8666: LD_EXP 1
8670: PPUSH
8671: CALL_OW 179
// end ;
8675: GO 8615
8677: POP
8678: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8679: LD_EXP 4
8683: PPUSH
8684: LD_INT 41
8686: PPUSH
8687: LD_INT 4
8689: PPUSH
8690: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8694: LD_EXP 4
8698: PPUSH
8699: LD_EXP 1
8703: PPUSH
8704: CALL_OW 179
// if Lisa = false and Bobby then
8708: LD_EXP 4
8712: PUSH
8713: LD_INT 0
8715: EQUAL
8716: PUSH
8717: LD_EXP 2
8721: AND
8722: IFFALSE 8753
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8724: LD_EXP 2
8728: PPUSH
8729: LD_INT 41
8731: PPUSH
8732: LD_INT 4
8734: PPUSH
8735: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8739: LD_EXP 2
8743: PPUSH
8744: LD_EXP 1
8748: PPUSH
8749: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8753: LD_EXP 4
8757: PUSH
8758: LD_INT 0
8760: EQUAL
8761: PUSH
8762: LD_EXP 2
8766: PUSH
8767: LD_INT 0
8769: EQUAL
8770: AND
8771: PUSH
8772: LD_EXP 3
8776: AND
8777: IFFALSE 8808
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8779: LD_EXP 3
8783: PPUSH
8784: LD_INT 41
8786: PPUSH
8787: LD_INT 4
8789: PPUSH
8790: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8794: LD_EXP 3
8798: PPUSH
8799: LD_EXP 1
8803: PPUSH
8804: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8808: LD_EXP 4
8812: PUSH
8813: LD_INT 0
8815: EQUAL
8816: PUSH
8817: LD_EXP 2
8821: PUSH
8822: LD_INT 0
8824: EQUAL
8825: AND
8826: PUSH
8827: LD_EXP 3
8831: PUSH
8832: LD_INT 0
8834: EQUAL
8835: AND
8836: IFFALSE 8867
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8838: LD_EXP 6
8842: PPUSH
8843: LD_INT 41
8845: PPUSH
8846: LD_INT 4
8848: PPUSH
8849: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8853: LD_EXP 6
8857: PPUSH
8858: LD_EXP 1
8862: PPUSH
8863: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8867: LD_EXP 7
8871: PPUSH
8872: LD_STRING D1-Brown-1
8874: PPUSH
8875: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8879: LD_EXP 1
8883: PPUSH
8884: LD_STRING D1-JMM-2
8886: PPUSH
8887: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8891: LD_EXP 7
8895: PPUSH
8896: LD_STRING D1-Brown-2
8898: PPUSH
8899: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8903: LD_EXP 1
8907: PPUSH
8908: LD_EXP 9
8912: PPUSH
8913: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8917: LD_EXP 9
8921: PPUSH
8922: LD_STRING D1-FSol1-2
8924: PPUSH
8925: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8929: LD_EXP 1
8933: PPUSH
8934: LD_EXP 8
8938: PPUSH
8939: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8943: LD_EXP 8
8947: PPUSH
8948: LD_STRING D1-Sol2-2
8950: PPUSH
8951: CALL_OW 88
// if Lisa then
8955: LD_EXP 4
8959: IFFALSE 8999
// begin ComTurnUnit ( JMM , Lisa ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_EXP 4
8970: PPUSH
8971: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8975: LD_EXP 4
8979: PPUSH
8980: LD_STRING D1-Lisa-2
8982: PPUSH
8983: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8987: LD_EXP 1
8991: PPUSH
8992: LD_STRING D1-JMM-3
8994: PPUSH
8995: CALL_OW 88
// end ; if Bobby then
8999: LD_EXP 2
9003: IFFALSE 9043
// begin ComTurnUnit ( JMM , Bobby ) ;
9005: LD_EXP 1
9009: PPUSH
9010: LD_EXP 2
9014: PPUSH
9015: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9019: LD_EXP 2
9023: PPUSH
9024: LD_STRING D1-Bobby-2
9026: PPUSH
9027: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9031: LD_EXP 1
9035: PPUSH
9036: LD_STRING D1-JMM-3
9038: PPUSH
9039: CALL_OW 88
// end ; if Cyrus then
9043: LD_EXP 3
9047: IFFALSE 9087
// begin ComTurnUnit ( JMM , Cyrus ) ;
9049: LD_EXP 1
9053: PPUSH
9054: LD_EXP 3
9058: PPUSH
9059: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9063: LD_EXP 3
9067: PPUSH
9068: LD_STRING D1-Cyrus-2
9070: PPUSH
9071: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9075: LD_EXP 1
9079: PPUSH
9080: LD_STRING D1-JMM-3
9082: PPUSH
9083: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9087: LD_EXP 1
9091: PPUSH
9092: LD_EXP 7
9096: PPUSH
9097: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9101: LD_EXP 1
9105: PPUSH
9106: LD_STRING D1-JMM-3a
9108: PPUSH
9109: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9113: LD_EXP 7
9117: PPUSH
9118: LD_INT 38
9120: PPUSH
9121: LD_INT 5
9123: PPUSH
9124: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9128: LD_EXP 7
9132: PPUSH
9133: LD_EXP 1
9137: PPUSH
9138: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9142: LD_EXP 1
9146: PPUSH
9147: LD_INT 40
9149: PPUSH
9150: LD_INT 7
9152: PPUSH
9153: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_EXP 7
9166: PPUSH
9167: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9171: LD_EXP 7
9175: PPUSH
9176: LD_STRING D1-Brown-3
9178: PPUSH
9179: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9183: LD_EXP 14
9187: PPUSH
9188: LD_STRING D1-Har-3
9190: PPUSH
9191: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9195: LD_EXP 1
9199: PPUSH
9200: LD_STRING D1-JMM-4
9202: PPUSH
9203: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9207: LD_EXP 14
9211: PPUSH
9212: LD_STRING D1-Har-4
9214: PPUSH
9215: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9219: LD_EXP 1
9223: PPUSH
9224: LD_STRING D1-JMM-5
9226: PPUSH
9227: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9231: LD_EXP 14
9235: PPUSH
9236: LD_STRING D1-Har-5
9238: PPUSH
9239: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9243: LD_EXP 1
9247: PPUSH
9248: LD_STRING D1-JMM-6
9250: PPUSH
9251: CALL_OW 88
// end ; InGameOff ;
9255: CALL_OW 9
// PrepareRussianConvoy ;
9259: CALL 3404 0 0
// ChangeMissionObjectives ( M1 ) ;
9263: LD_STRING M1
9265: PPUSH
9266: CALL_OW 337
// SaveForQuickRestart ;
9270: CALL_OW 22
// timerStatus = 1 ;
9274: LD_ADDR_EXP 29
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// startTimer = 1 ;
9282: LD_ADDR_EXP 30
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// bonusAvalaible = 1 ;
9290: LD_ADDR_EXP 44
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9298: LD_INT 105
9300: PPUSH
9301: CALL_OW 67
// DialogueOn ;
9305: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9309: LD_EXP 12
9313: PPUSH
9314: LD_STRING D9-Mech1-1
9316: PPUSH
9317: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9321: LD_EXP 1
9325: PPUSH
9326: LD_STRING D9-JMM-1
9328: PPUSH
9329: CALL_OW 88
// DialogueOff ;
9333: CALL_OW 7
// end ;
9337: LD_VAR 0 1
9341: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9342: LD_INT 47
9344: PPUSH
9345: LD_INT 1
9347: PPUSH
9348: CALL_OW 321
9352: PUSH
9353: LD_INT 2
9355: EQUAL
9356: PUSH
9357: LD_EXP 31
9361: NOT
9362: AND
9363: PUSH
9364: LD_INT 22
9366: PUSH
9367: LD_INT 1
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 21
9376: PUSH
9377: LD_INT 3
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 30
9386: PUSH
9387: LD_INT 3
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 57
9396: PUSH
9397: EMPTY
9398: LIST
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 69
9410: AND
9411: IFFALSE 9645
9413: GO 9415
9415: DISABLE
// begin factoryDialog := true ;
9416: LD_ADDR_EXP 31
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// if IsOk ( Campell ) then
9424: LD_EXP 12
9428: PPUSH
9429: CALL_OW 302
9433: IFFALSE 9449
// Say ( Campell , D10-Mech1-1 ) else
9435: LD_EXP 12
9439: PPUSH
9440: LD_STRING D10-Mech1-1
9442: PPUSH
9443: CALL_OW 88
9447: GO 9645
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9449: LD_INT 22
9451: PUSH
9452: LD_INT 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 21
9461: PUSH
9462: LD_INT 1
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 25
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 26
9481: PUSH
9482: LD_INT 1
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 69
9499: PUSH
9500: LD_EXP 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: DIFF
9508: IFFALSE 9582
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9510: LD_INT 22
9512: PUSH
9513: LD_INT 1
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 21
9522: PUSH
9523: LD_INT 1
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: LD_INT 25
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 26
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: PUSH
9561: LD_EXP 1
9565: PUSH
9566: EMPTY
9567: LIST
9568: DIFF
9569: PPUSH
9570: LD_STRING D10-Mech1-1
9572: PPUSH
9573: LD_STRING D10-Mech1-1
9575: PPUSH
9576: CALL 4598 0 3
9580: GO 9645
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9582: LD_INT 22
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 26
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 1
9619: ARRAY
9620: PPUSH
9621: CALL_OW 69
9625: PUSH
9626: LD_EXP 1
9630: PUSH
9631: EMPTY
9632: LIST
9633: DIFF
9634: PPUSH
9635: LD_STRING D10-Mech1-1
9637: PPUSH
9638: LD_STRING D10-Mech1-1
9640: PPUSH
9641: CALL 4598 0 3
// end ; end ;
9645: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9646: LD_INT 22
9648: PUSH
9649: LD_INT 1
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 30
9658: PUSH
9659: LD_INT 32
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 69
9674: PUSH
9675: LD_EXP 32
9679: PUSH
9680: LD_INT 0
9682: EQUAL
9683: AND
9684: IFFALSE 9920
9686: GO 9688
9688: DISABLE
// begin if IsOk ( Claptopn ) then
9689: LD_EXP 11
9693: PPUSH
9694: CALL_OW 302
9698: IFFALSE 9714
// Say ( Claptopn , D9b-Eng1-1 ) else
9700: LD_EXP 11
9704: PPUSH
9705: LD_STRING D9b-Eng1-1
9707: PPUSH
9708: CALL_OW 88
9712: GO 9906
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9714: LD_INT 22
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 21
9726: PUSH
9727: LD_INT 1
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 25
9736: PUSH
9737: LD_INT 3
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 26
9746: PUSH
9747: LD_INT 1
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PPUSH
9760: CALL_OW 69
9764: PUSH
9765: LD_EXP 1
9769: PUSH
9770: EMPTY
9771: LIST
9772: DIFF
9773: IFFALSE 9847
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9775: LD_INT 22
9777: PUSH
9778: LD_INT 1
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 21
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 25
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 26
9807: PUSH
9808: LD_INT 1
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PPUSH
9821: CALL_OW 69
9825: PUSH
9826: LD_EXP 1
9830: PUSH
9831: EMPTY
9832: LIST
9833: DIFF
9834: PPUSH
9835: LD_STRING D9b-Eng1-1
9837: PPUSH
9838: LD_STRING D9b-Eng1-11
9840: PPUSH
9841: CALL 4598 0 3
9845: GO 9906
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9847: LD_INT 22
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 21
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 26
9869: PUSH
9870: LD_INT 1
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: PPUSH
9882: CALL_OW 69
9886: PUSH
9887: LD_EXP 1
9891: PUSH
9892: EMPTY
9893: LIST
9894: DIFF
9895: PPUSH
9896: LD_STRING D9b-Eng1-1
9898: PPUSH
9899: LD_STRING D9b-Eng1-1
9901: PPUSH
9902: CALL 4598 0 3
// end ; if energyVDialog = 0 then
9906: LD_EXP 33
9910: PUSH
9911: LD_INT 0
9913: EQUAL
9914: IFFALSE 9920
// EnergyDialog ;
9916: CALL 5003 0 0
// end ;
9920: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9921: LD_EXP 34
9925: PUSH
9926: LD_INT 1
9928: EQUAL
9929: PUSH
9930: LD_EXP 35
9934: PUSH
9935: LD_INT 1
9937: EQUAL
9938: AND
9939: IFFALSE 9951
9941: GO 9943
9943: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9944: LD_STRING M1a
9946: PPUSH
9947: CALL_OW 337
9951: END
// every 3 3$0 do
9952: GO 9954
9954: DISABLE
// PrepareFirstAttack ;
9955: CALL 4216 0 0
9959: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9960: LD_INT 22
9962: PUSH
9963: LD_INT 5
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 21
9972: PUSH
9973: LD_INT 1
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 3
9982: PUSH
9983: LD_INT 24
9985: PUSH
9986: LD_INT 250
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 69
10006: PUSH
10007: LD_INT 0
10009: GREATER
10010: PUSH
10011: LD_EXP 23
10015: PUSH
10016: LD_INT 1
10018: EQUAL
10019: AND
10020: IFFALSE 10321
10022: GO 10024
10024: DISABLE
10025: LD_INT 0
10027: PPUSH
// begin firstRussianAttack = 2 ;
10028: LD_ADDR_EXP 23
10032: PUSH
10033: LD_INT 2
10035: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10036: LD_INT 22
10038: PUSH
10039: LD_INT 5
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 21
10048: PUSH
10049: LD_INT 1
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 69
10064: PPUSH
10065: LD_INT 125
10067: PPUSH
10068: LD_INT 98
10070: PPUSH
10071: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10075: LD_INT 22
10077: PUSH
10078: LD_INT 1
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 21
10087: PUSH
10088: LD_INT 1
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PUSH
10104: LD_EXP 1
10108: PUSH
10109: LD_EXP 7
10113: PUSH
10114: LD_EXP 4
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: DIFF
10124: PPUSH
10125: LD_STRING DAtt1-Sol1-1
10127: PPUSH
10128: LD_STRING DAtt1-FSol1-1
10130: PPUSH
10131: CALL 4598 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10135: LD_EXP 1
10139: PPUSH
10140: LD_STRING DAtt1-JMM-1
10142: PPUSH
10143: CALL_OW 88
// if Lisa then
10147: LD_EXP 4
10151: IFFALSE 10167
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10153: LD_EXP 4
10157: PPUSH
10158: LD_STRING DAtt1a-Lisa-1
10160: PPUSH
10161: CALL_OW 88
10165: GO 10238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10167: LD_INT 22
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 1
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 26
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PUSH
10207: LD_EXP 1
10211: PUSH
10212: LD_EXP 7
10216: PUSH
10217: LD_EXP 4
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: DIFF
10227: PPUSH
10228: LD_STRING DAtt1a-Sol1-1
10230: PPUSH
10231: LD_STRING DAtt1-FSol1-1
10233: PPUSH
10234: CALL 4598 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10238: LD_EXP 1
10242: PPUSH
10243: LD_STRING DAtt1a-JMM-1
10245: PPUSH
10246: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10250: LD_INT 22
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 26
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 69
10289: PUSH
10290: LD_EXP 1
10294: PUSH
10295: LD_EXP 7
10299: PUSH
10300: LD_EXP 4
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: DIFF
10310: PPUSH
10311: LD_STRING DAtt1b-Sol1-1
10313: PPUSH
10314: LD_STRING DAtt1a-Sol1-1
10316: PPUSH
10317: CALL 4598 0 3
// end ;
10321: PPOPN 1
10323: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10324: LD_EXP 23
10328: PUSH
10329: LD_INT 2
10331: EQUAL
10332: PUSH
10333: LD_INT 5
10335: PPUSH
10336: LD_INT 22
10338: PUSH
10339: LD_INT 5
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 21
10348: PUSH
10349: LD_INT 1
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PPUSH
10360: CALL_OW 70
10364: AND
10365: IFFALSE 10423
10367: GO 10369
10369: DISABLE
10370: LD_INT 0
10372: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10373: LD_ADDR_VAR 0 1
10377: PUSH
10378: LD_INT 22
10380: PUSH
10381: LD_INT 5
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 21
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PPUSH
10402: CALL_OW 69
10406: PUSH
10407: FOR_IN
10408: IFFALSE 10421
// RemoveUnit ( i ) ;
10410: LD_VAR 0 1
10414: PPUSH
10415: CALL_OW 64
10419: GO 10407
10421: POP
10422: POP
// end ;
10423: PPOPN 1
10425: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10426: LD_INT 22
10428: PUSH
10429: LD_INT 5
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: PPUSH
10439: CALL_OW 69
10443: PUSH
10444: LD_INT 0
10446: EQUAL
10447: PUSH
10448: LD_EXP 23
10452: PUSH
10453: LD_INT 2
10455: EQUAL
10456: AND
10457: IFFALSE 10470
10459: GO 10461
10461: DISABLE
// firstRussianAttack = 3 ;
10462: LD_ADDR_EXP 23
10466: PUSH
10467: LD_INT 3
10469: ST_TO_ADDR
10470: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10471: LD_EXP 28
10475: PUSH
10476: LD_INT 0
10478: EQUAL
10479: IFFALSE 10560
10481: GO 10483
10483: DISABLE
// begin timerStatus = 4 ;
10484: LD_ADDR_EXP 29
10488: PUSH
10489: LD_INT 4
10491: ST_TO_ADDR
// DialogueOn ;
10492: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10496: LD_EXP 13
10500: PPUSH
10501: LD_STRING D2-Don-1
10503: PPUSH
10504: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10508: LD_EXP 1
10512: PPUSH
10513: LD_STRING D2-JMM-1
10515: PPUSH
10516: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10520: LD_EXP 13
10524: PPUSH
10525: LD_STRING D2-Don-2
10527: PPUSH
10528: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10532: LD_EXP 1
10536: PPUSH
10537: LD_STRING D2-JMM-2
10539: PPUSH
10540: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10544: LD_EXP 13
10548: PPUSH
10549: LD_STRING D2-Don-3
10551: PPUSH
10552: CALL_OW 94
// DialogueOff ;
10556: CALL_OW 7
// end ;
10560: END
// every 12 12$0 do var tmp ;
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
// begin PrepareDonaldsonArmy ;
10567: CALL 1187 0 0
// CenterNowOnUnits ( Donaldson ) ;
10571: LD_EXP 13
10575: PPUSH
10576: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10580: LD_INT 22
10582: PUSH
10583: LD_INT 6
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: NOT
10595: IFFALSE 10611
// begin wait ( 3 ) ;
10597: LD_INT 3
10599: PPUSH
10600: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10604: LD_STRING ACH_BASE
10606: PPUSH
10607: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
10611: LD_ADDR_VAR 0 1
10615: PUSH
10616: LD_INT 22
10618: PUSH
10619: LD_INT 4
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 26
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 25
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: PPUSH
10662: CALL_OW 69
10666: PUSH
10667: LD_EXP 5
10671: PUSH
10672: EMPTY
10673: LIST
10674: DIFF
10675: ST_TO_ADDR
// DialogueOn ;
10676: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10680: LD_VAR 0 1
10684: PPUSH
10685: LD_STRING D3-Sol1-1
10687: PPUSH
10688: LD_STRING D3-Sol1-1
10690: PPUSH
10691: CALL 4598 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
10695: LD_INT 22
10697: PUSH
10698: LD_INT 4
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 21
10707: PUSH
10708: LD_INT 1
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: LD_INT 26
10717: PUSH
10718: LD_INT 1
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 25
10727: PUSH
10728: LD_INT 3
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: PPUSH
10741: CALL_OW 69
10745: PPUSH
10746: LD_STRING D3-Sol2-1
10748: PPUSH
10749: LD_STRING D3-Sol2-1
10751: PPUSH
10752: CALL 4598 0 3
// if Frank then
10756: LD_EXP 5
10760: IFFALSE 10774
// Say ( Frank , D3-Frank-1 ) ;
10762: LD_EXP 5
10766: PPUSH
10767: LD_STRING D3-Frank-1
10769: PPUSH
10770: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10774: LD_EXP 13
10778: PPUSH
10779: LD_STRING D3-Don-1
10781: PPUSH
10782: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10786: LD_EXP 13
10790: PPUSH
10791: LD_STRING D3-Don-1a
10793: PPUSH
10794: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10798: LD_EXP 1
10802: PPUSH
10803: LD_STRING D3-JMM-1
10805: PPUSH
10806: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10810: LD_EXP 13
10814: PPUSH
10815: LD_STRING D3-Don-2
10817: PPUSH
10818: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10822: LD_INT 22
10824: PUSH
10825: LD_INT 6
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 21
10834: PUSH
10835: LD_INT 1
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PPUSH
10846: CALL_OW 69
10850: IFFALSE 10988
// begin Say ( JMM , D3-JMM-2 ) ;
10852: LD_EXP 1
10856: PPUSH
10857: LD_STRING D3-JMM-2
10859: PPUSH
10860: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10864: LD_EXP 13
10868: PPUSH
10869: LD_STRING D3-Don-3
10871: PPUSH
10872: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10876: LD_EXP 1
10880: PPUSH
10881: LD_STRING D3-JMM-3
10883: PPUSH
10884: CALL_OW 88
// if IsOK ( Frank ) then
10888: LD_EXP 5
10892: PPUSH
10893: CALL_OW 302
10897: IFFALSE 10911
// Say ( Frank , D3-Frank-3 ) ;
10899: LD_EXP 5
10903: PPUSH
10904: LD_STRING D3-Frank-3
10906: PPUSH
10907: CALL_OW 88
// DialogueOff ;
10911: CALL_OW 7
// if IsOk ( Frank ) then
10915: LD_EXP 5
10919: PPUSH
10920: CALL_OW 302
10924: IFFALSE 10986
// begin SetSide ( Frank , 0 ) ;
10926: LD_EXP 5
10930: PPUSH
10931: LD_INT 0
10933: PPUSH
10934: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10938: LD_EXP 5
10942: PPUSH
10943: LD_INT 12
10945: PPUSH
10946: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10950: LD_EXP 5
10954: PPUSH
10955: LD_STRING 04t_Frank
10957: PPUSH
10958: CALL_OW 38
// wait ( 0 0$3 ) ;
10962: LD_INT 105
10964: PPUSH
10965: CALL_OW 67
// frankScoutBase = 1 ;
10969: LD_ADDR_EXP 25
10973: PUSH
10974: LD_INT 1
10976: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10977: LD_EXP 5
10981: PPUSH
10982: CALL_OW 64
// end ; end else
10986: GO 11075
// begin Say ( JMM , D3-JMM-4 ) ;
10988: LD_EXP 1
10992: PPUSH
10993: LD_STRING D3-JMM-4
10995: PPUSH
10996: CALL_OW 88
// DialogueOff ;
11000: CALL_OW 7
// if IsOk ( Frank ) then
11004: LD_EXP 5
11008: PPUSH
11009: CALL_OW 302
11013: IFFALSE 11075
// begin SetSide ( Frank , 0 ) ;
11015: LD_EXP 5
11019: PPUSH
11020: LD_INT 0
11022: PPUSH
11023: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11027: LD_EXP 5
11031: PPUSH
11032: LD_INT 12
11034: PPUSH
11035: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
11039: LD_EXP 5
11043: PPUSH
11044: LD_STRING 04t_Frank
11046: PPUSH
11047: CALL_OW 38
// wait ( 0 0$3 ) ;
11051: LD_INT 105
11053: PPUSH
11054: CALL_OW 67
// frankScoutBase = 1 ;
11058: LD_ADDR_EXP 25
11062: PUSH
11063: LD_INT 1
11065: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11066: LD_EXP 5
11070: PPUSH
11071: CALL_OW 64
// end ; end ; end ;
11075: PPOPN 1
11077: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11078: LD_EXP 13
11082: PPUSH
11083: CALL_OW 255
11087: PUSH
11088: LD_INT 4
11090: EQUAL
11091: PUSH
11092: LD_EXP 13
11096: PPUSH
11097: CALL_OW 302
11101: AND
11102: IFFALSE 11342
11104: GO 11106
11106: DISABLE
11107: LD_INT 0
11109: PPUSH
11110: PPUSH
// begin wait ( 5 5$00 ) ;
11111: LD_INT 10500
11113: PPUSH
11114: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11118: LD_EXP 13
11122: PPUSH
11123: CALL_OW 255
11127: PUSH
11128: LD_INT 1
11130: EQUAL
11131: PUSH
11132: LD_EXP 13
11136: PPUSH
11137: CALL_OW 301
11141: OR
11142: IFFALSE 11146
// exit ;
11144: GO 11342
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11146: LD_EXP 13
11150: PPUSH
11151: LD_STRING D3b-Don-1
11153: PPUSH
11154: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11158: LD_ADDR_EXP 41
11162: PUSH
11163: LD_INT 1
11165: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11166: LD_ADDR_VAR 0 2
11170: PUSH
11171: LD_INT 22
11173: PUSH
11174: LD_INT 4
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PPUSH
11181: CALL_OW 69
11185: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11186: LD_INT 35
11188: PPUSH
11189: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11193: LD_VAR 0 2
11197: NOT
11198: PUSH
11199: LD_INT 22
11201: PUSH
11202: LD_INT 6
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 101
11211: PUSH
11212: LD_INT 1
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PPUSH
11223: CALL_OW 69
11227: OR
11228: IFFALSE 11186
// if not tmp then
11230: LD_VAR 0 2
11234: NOT
11235: IFFALSE 11239
// exit ;
11237: GO 11342
// for i in tmp do
11239: LD_ADDR_VAR 0 1
11243: PUSH
11244: LD_VAR 0 2
11248: PUSH
11249: FOR_IN
11250: IFFALSE 11269
// ComAgressiveMove ( i , 52 , 64 ) ;
11252: LD_VAR 0 1
11256: PPUSH
11257: LD_INT 52
11259: PPUSH
11260: LD_INT 64
11262: PPUSH
11263: CALL_OW 114
11267: GO 11249
11269: POP
11270: POP
// wait ( 0 0$10 ) ;
11271: LD_INT 350
11273: PPUSH
11274: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11278: LD_ADDR_VAR 0 1
11282: PUSH
11283: LD_INT 22
11285: PUSH
11286: LD_INT 4
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 69
11297: PUSH
11298: LD_EXP 5
11302: DIFF
11303: PUSH
11304: FOR_IN
11305: IFFALSE 11321
// SetSide ( i , 1 ) ;
11307: LD_VAR 0 1
11311: PPUSH
11312: LD_INT 1
11314: PPUSH
11315: CALL_OW 235
11319: GO 11304
11321: POP
11322: POP
// if IsLive ( Donaldson ) then
11323: LD_EXP 13
11327: PPUSH
11328: CALL_OW 300
11332: IFFALSE 11342
// saveDonaldson := 1 ;
11334: LD_ADDR_EXP 24
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// end ;
11342: PPOPN 2
11344: END
// every 0 0$1 trigger not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11345: LD_EXP 24
11349: NOT
11350: PUSH
11351: LD_EXP 41
11355: NOT
11356: AND
11357: PUSH
11358: LD_INT 26
11360: PPUSH
11361: LD_INT 22
11363: PUSH
11364: LD_INT 1
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PPUSH
11371: CALL_OW 70
11375: PUSH
11376: LD_EXP 13
11380: PPUSH
11381: LD_EXP 1
11385: PPUSH
11386: CALL_OW 296
11390: PUSH
11391: LD_INT 6
11393: LESS
11394: OR
11395: AND
11396: IFFALSE 11451
11398: GO 11400
11400: DISABLE
11401: LD_INT 0
11403: PPUSH
// begin saveDonaldson := 1 ;
11404: LD_ADDR_EXP 24
11408: PUSH
11409: LD_INT 1
11411: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11412: LD_ADDR_VAR 0 1
11416: PUSH
11417: LD_INT 22
11419: PUSH
11420: LD_INT 4
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PPUSH
11427: CALL_OW 69
11431: PUSH
11432: FOR_IN
11433: IFFALSE 11449
// SetSide ( i , 1 ) ;
11435: LD_VAR 0 1
11439: PPUSH
11440: LD_INT 1
11442: PPUSH
11443: CALL_OW 235
11447: GO 11432
11449: POP
11450: POP
// end ;
11451: PPOPN 1
11453: END
// every 0 0$1 trigger frankScoutBase do
11454: LD_EXP 25
11458: IFFALSE 11823
11460: GO 11462
11462: DISABLE
// begin wait ( 2 2$30 ) ;
11463: LD_INT 5250
11465: PPUSH
11466: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11470: LD_INT 35
11472: PPUSH
11473: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11477: LD_INT 81
11479: PUSH
11480: LD_INT 4
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: PUSH
11487: LD_INT 92
11489: PUSH
11490: LD_INT 84
11492: PUSH
11493: LD_INT 28
11495: PUSH
11496: LD_INT 22
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PPUSH
11509: CALL_OW 69
11513: NOT
11514: IFFALSE 11470
// uc_side = 4 ;
11516: LD_ADDR_OWVAR 20
11520: PUSH
11521: LD_INT 4
11523: ST_TO_ADDR
// uc_nation = 1 ;
11524: LD_ADDR_OWVAR 21
11528: PUSH
11529: LD_INT 1
11531: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11532: LD_ADDR_EXP 5
11536: PUSH
11537: LD_STRING 04t_Frank
11539: PPUSH
11540: CALL_OW 34
11544: ST_TO_ADDR
// if not Frank then
11545: LD_EXP 5
11549: NOT
11550: IFFALSE 11554
// exit ;
11552: GO 11823
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11554: LD_EXP 5
11558: PPUSH
11559: LD_INT 13
11561: PPUSH
11562: LD_INT 0
11564: PPUSH
11565: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11569: LD_INT 35
11571: PPUSH
11572: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11576: LD_EXP 1
11580: PPUSH
11581: CALL_OW 310
11585: NOT
11586: PUSH
11587: LD_EXP 1
11591: PPUSH
11592: LD_INT 4
11594: PPUSH
11595: CALL_OW 296
11599: PUSH
11600: LD_INT 20
11602: LESS
11603: AND
11604: IFFALSE 11637
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11606: LD_EXP 5
11610: PPUSH
11611: LD_EXP 1
11615: PPUSH
11616: CALL_OW 250
11620: PPUSH
11621: LD_EXP 1
11625: PPUSH
11626: CALL_OW 251
11630: PPUSH
11631: CALL_OW 111
11635: GO 11652
// ComMoveXY ( Frank , 51 , 15 ) ;
11637: LD_EXP 5
11641: PPUSH
11642: LD_INT 51
11644: PPUSH
11645: LD_INT 15
11647: PPUSH
11648: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11652: LD_EXP 5
11656: PPUSH
11657: LD_EXP 1
11661: PPUSH
11662: CALL_OW 296
11666: PUSH
11667: LD_INT 10
11669: LESS
11670: IFFALSE 11569
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11672: LD_EXP 1
11676: PUSH
11677: LD_EXP 5
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PPUSH
11686: CALL_OW 87
// DialogueOn ;
11690: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11694: LD_EXP 5
11698: PPUSH
11699: LD_STRING D3a-Frank-1
11701: PPUSH
11702: CALL_OW 88
// if Lisa then
11706: LD_EXP 4
11710: IFFALSE 11760
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11712: LD_EXP 4
11716: PPUSH
11717: LD_STRING D3a-Lisa-1
11719: PPUSH
11720: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11724: LD_EXP 5
11728: PPUSH
11729: LD_STRING D3a-Frank-2
11731: PPUSH
11732: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11736: LD_EXP 4
11740: PPUSH
11741: LD_STRING D3a-Lisa-2
11743: PPUSH
11744: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11748: LD_EXP 5
11752: PPUSH
11753: LD_STRING D3a-Frank-3
11755: PPUSH
11756: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11760: LD_EXP 1
11764: PPUSH
11765: LD_STRING D3a-JMM-3
11767: PPUSH
11768: CALL_OW 88
// DialogueOff ;
11772: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11776: LD_EXP 5
11780: PPUSH
11781: LD_INT 1
11783: PPUSH
11784: CALL_OW 235
// InGameOn ;
11788: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11792: LD_INT 1
11794: PPUSH
11795: LD_INT 7
11797: PPUSH
11798: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11802: LD_INT 93
11804: PPUSH
11805: LD_INT 91
11807: PPUSH
11808: CALL_OW 84
// wait ( 0 0$5 ) ;
11812: LD_INT 175
11814: PPUSH
11815: CALL_OW 67
// InGameOff ;
11819: CALL_OW 9
// end ;
11823: END
// every 12 12$0 trigger Difficulty > 1 do
11824: LD_OWVAR 67
11828: PUSH
11829: LD_INT 1
11831: GREATER
11832: IFFALSE 11856
11834: GO 11836
11836: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11837: LD_INT 24
11839: PPUSH
11840: LD_INT 24
11842: PPUSH
11843: LD_INT 1
11845: PPUSH
11846: LD_INT 1
11848: PPUSH
11849: LD_INT 53
11851: PPUSH
11852: CALL_OW 185
11856: END
// every 18 18$0 do
11857: GO 11859
11859: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11860: LD_EXP 14
11864: PPUSH
11865: LD_STRING D4-Har-1
11867: PPUSH
11868: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11872: LD_EXP 1
11876: PPUSH
11877: LD_STRING D4-JMM-1
11879: PPUSH
11880: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11884: LD_EXP 14
11888: PPUSH
11889: LD_STRING D4-Har-2
11891: PPUSH
11892: CALL_OW 94
// case Query ( Q1 ) of 1 :
11896: LD_STRING Q1
11898: PPUSH
11899: CALL_OW 97
11903: PUSH
11904: LD_INT 1
11906: DOUBLE
11907: EQUAL
11908: IFTRUE 11912
11910: GO 11971
11912: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11913: LD_EXP 1
11917: PPUSH
11918: LD_STRING D5-JMM-1
11920: PPUSH
11921: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11925: LD_EXP 14
11929: PPUSH
11930: LD_STRING D5-Har-1
11932: PPUSH
11933: CALL_OW 94
// timeToSupport = 10 10$0 ;
11937: LD_ADDR_EXP 28
11941: PUSH
11942: LD_INT 21000
11944: ST_TO_ADDR
// timerStatus = 2 ;
11945: LD_ADDR_EXP 29
11949: PUSH
11950: LD_INT 2
11952: ST_TO_ADDR
// startTimer = 1 ;
11953: LD_ADDR_EXP 30
11957: PUSH
11958: LD_INT 1
11960: ST_TO_ADDR
// harrAnswer = 1 ;
11961: LD_ADDR_EXP 26
11965: PUSH
11966: LD_INT 1
11968: ST_TO_ADDR
// end ; 2 :
11969: GO 12106
11971: LD_INT 2
11973: DOUBLE
11974: EQUAL
11975: IFTRUE 11979
11977: GO 12038
11979: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11980: LD_EXP 1
11984: PPUSH
11985: LD_STRING D5-JMM-2
11987: PPUSH
11988: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11992: LD_EXP 14
11996: PPUSH
11997: LD_STRING D5-Har-2
11999: PPUSH
12000: CALL_OW 94
// timeToSupport = 5 5$0 ;
12004: LD_ADDR_EXP 28
12008: PUSH
12009: LD_INT 10500
12011: ST_TO_ADDR
// timerStatus = 2 ;
12012: LD_ADDR_EXP 29
12016: PUSH
12017: LD_INT 2
12019: ST_TO_ADDR
// startTimer = 1 ;
12020: LD_ADDR_EXP 30
12024: PUSH
12025: LD_INT 1
12027: ST_TO_ADDR
// harrAnswer = 2 ;
12028: LD_ADDR_EXP 26
12032: PUSH
12033: LD_INT 2
12035: ST_TO_ADDR
// end ; 3 :
12036: GO 12106
12038: LD_INT 3
12040: DOUBLE
12041: EQUAL
12042: IFTRUE 12046
12044: GO 12105
12046: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12047: LD_EXP 1
12051: PPUSH
12052: LD_STRING D5-JMM-3
12054: PPUSH
12055: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12059: LD_EXP 14
12063: PPUSH
12064: LD_STRING D5-Har-3
12066: PPUSH
12067: CALL_OW 94
// timeToSupport = 5 5$0 ;
12071: LD_ADDR_EXP 28
12075: PUSH
12076: LD_INT 10500
12078: ST_TO_ADDR
// timerStatus = 2 ;
12079: LD_ADDR_EXP 29
12083: PUSH
12084: LD_INT 2
12086: ST_TO_ADDR
// startTimer = 1 ;
12087: LD_ADDR_EXP 30
12091: PUSH
12092: LD_INT 1
12094: ST_TO_ADDR
// harrAnswer = 3 ;
12095: LD_ADDR_EXP 26
12099: PUSH
12100: LD_INT 3
12102: ST_TO_ADDR
// end ; end ;
12103: GO 12106
12105: POP
// end ;
12106: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12107: LD_EXP 29
12111: PUSH
12112: LD_INT 2
12114: EQUAL
12115: PUSH
12116: LD_EXP 28
12120: PUSH
12121: LD_INT 0
12123: EQUAL
12124: AND
12125: IFFALSE 12414
12127: GO 12129
12129: DISABLE
// begin timerStatus = 4 ;
12130: LD_ADDR_EXP 29
12134: PUSH
12135: LD_INT 4
12137: ST_TO_ADDR
// if harrAnswer = 1 then
12138: LD_EXP 26
12142: PUSH
12143: LD_INT 1
12145: EQUAL
12146: IFFALSE 12230
// begin PrepareHarrisonSupport ( 3 ) ;
12148: LD_INT 3
12150: PPUSH
12151: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12155: LD_INT 2100
12157: PPUSH
12158: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12162: LD_EXP 14
12166: PPUSH
12167: LD_STRING D7-Har-1
12169: PPUSH
12170: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12174: LD_STRING M2
12176: PPUSH
12177: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12181: LD_ADDR_EXP 27
12185: PUSH
12186: LD_INT 31500
12188: PUSH
12189: LD_INT 10500
12191: PUSH
12192: LD_INT 8400
12194: PUSH
12195: LD_INT 6300
12197: PUSH
12198: LD_INT 6300
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: LD_OWVAR 67
12211: ARRAY
12212: PLUS
12213: ST_TO_ADDR
// startTimer = 1 ;
12214: LD_ADDR_EXP 30
12218: PUSH
12219: LD_INT 1
12221: ST_TO_ADDR
// timerStatus = 3 ;
12222: LD_ADDR_EXP 29
12226: PUSH
12227: LD_INT 3
12229: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12230: LD_EXP 26
12234: PUSH
12235: LD_INT 2
12237: EQUAL
12238: IFFALSE 12322
// begin PrepareHarrisonSupport ( 4 ) ;
12240: LD_INT 4
12242: PPUSH
12243: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12247: LD_INT 2100
12249: PPUSH
12250: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12254: LD_EXP 14
12258: PPUSH
12259: LD_STRING D7-Har-1
12261: PPUSH
12262: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12266: LD_STRING M2
12268: PPUSH
12269: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12273: LD_ADDR_EXP 27
12277: PUSH
12278: LD_INT 33600
12280: PUSH
12281: LD_INT 10500
12283: PUSH
12284: LD_INT 8400
12286: PUSH
12287: LD_INT 6300
12289: PUSH
12290: LD_INT 5250
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: PUSH
12299: LD_OWVAR 67
12303: ARRAY
12304: PLUS
12305: ST_TO_ADDR
// startTimer = 1 ;
12306: LD_ADDR_EXP 30
12310: PUSH
12311: LD_INT 1
12313: ST_TO_ADDR
// timerStatus = 3 ;
12314: LD_ADDR_EXP 29
12318: PUSH
12319: LD_INT 3
12321: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12322: LD_EXP 26
12326: PUSH
12327: LD_INT 3
12329: EQUAL
12330: IFFALSE 12414
// begin PrepareHarrisonSupport ( 5 ) ;
12332: LD_INT 5
12334: PPUSH
12335: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12339: LD_INT 2100
12341: PPUSH
12342: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12346: LD_EXP 14
12350: PPUSH
12351: LD_STRING D7-Har-1
12353: PPUSH
12354: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12358: LD_STRING M2
12360: PPUSH
12361: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12365: LD_ADDR_EXP 27
12369: PUSH
12370: LD_INT 35700
12372: PUSH
12373: LD_INT 10500
12375: PUSH
12376: LD_INT 6300
12378: PUSH
12379: LD_INT 4200
12381: PUSH
12382: LD_INT 3150
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: LD_OWVAR 67
12395: ARRAY
12396: PLUS
12397: ST_TO_ADDR
// startTimer = 1 ;
12398: LD_ADDR_EXP 30
12402: PUSH
12403: LD_INT 1
12405: ST_TO_ADDR
// timerStatus = 3 ;
12406: LD_ADDR_EXP 29
12410: PUSH
12411: LD_INT 3
12413: ST_TO_ADDR
// end ; end ;
12414: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12415: LD_EXP 27
12419: PUSH
12420: LD_INT 8400
12422: LESSEQUAL
12423: PUSH
12424: LD_EXP 29
12428: PUSH
12429: LD_INT 3
12431: EQUAL
12432: AND
12433: IFFALSE 12465
12435: GO 12437
12437: DISABLE
// begin DialogueOn ;
12438: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12442: LD_EXP 14
12446: PPUSH
12447: LD_STRING D7a-Har-1
12449: PPUSH
12450: CALL_OW 94
// DialogueOff ;
12454: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12458: LD_STRING M2a
12460: PPUSH
12461: CALL_OW 337
// end ;
12465: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12466: LD_EXP 27
12470: PUSH
12471: LD_INT 0
12473: LESSEQUAL
12474: PUSH
12475: LD_EXP 29
12479: PUSH
12480: LD_INT 3
12482: EQUAL
12483: AND
12484: PUSH
12485: LD_EXP 40
12489: NOT
12490: AND
12491: IFFALSE 12630
12493: GO 12495
12495: DISABLE
12496: LD_INT 0
12498: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12499: LD_ADDR_VAR 0 1
12503: PUSH
12504: LD_INT 22
12506: PUSH
12507: LD_INT 1
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: PUSH
12519: LD_EXP 1
12523: PUSH
12524: EMPTY
12525: LIST
12526: DIFF
12527: ST_TO_ADDR
// saveDonaldson = 2 ;
12528: LD_ADDR_EXP 24
12532: PUSH
12533: LD_INT 2
12535: ST_TO_ADDR
// DialogueOn ;
12536: CALL_OW 6
// if IsOk ( Donaldson ) then
12540: LD_EXP 13
12544: PPUSH
12545: CALL_OW 302
12549: IFFALSE 12565
// SayRadio ( Harisson , D8-Har-1 ) else
12551: LD_EXP 14
12555: PPUSH
12556: LD_STRING D8-Har-1
12558: PPUSH
12559: CALL_OW 94
12563: GO 12577
// SayRadio ( Harisson , D8-Har-1a ) ;
12565: LD_EXP 14
12569: PPUSH
12570: LD_STRING D8-Har-1a
12572: PPUSH
12573: CALL_OW 94
// DialogueOff ;
12577: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12581: LD_VAR 0 1
12585: PPUSH
12586: LD_INT 4
12588: PPUSH
12589: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12593: LD_VAR 0 1
12597: PPUSH
12598: LD_INT 88
12600: PPUSH
12601: LD_INT 89
12603: PPUSH
12604: CALL_OW 114
// honor = 0 ;
12608: LD_ADDR_EXP 39
12612: PUSH
12613: LD_INT 0
12615: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12616: LD_INT 350
12618: PPUSH
12619: CALL_OW 67
// YouLost ( LostCommand ) ;
12623: LD_STRING LostCommand
12625: PPUSH
12626: CALL_OW 104
// end ;
12630: PPOPN 1
12632: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12633: LD_INT 22
12635: PUSH
12636: LD_INT 6
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: LD_INT 21
12645: PUSH
12646: LD_INT 1
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PPUSH
12657: CALL_OW 69
12661: PUSH
12662: LD_INT 0
12664: EQUAL
12665: PUSH
12666: LD_EXP 20
12670: PUSH
12671: LD_INT 0
12673: EQUAL
12674: AND
12675: PUSH
12676: LD_EXP 44
12680: PUSH
12681: LD_INT 1
12683: EQUAL
12684: AND
12685: IFFALSE 12779
12687: GO 12689
12689: DISABLE
12690: LD_INT 0
12692: PPUSH
12693: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12694: LD_ADDR_VAR 0 2
12698: PUSH
12699: LD_INT 22
12701: PUSH
12702: LD_INT 1
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 21
12711: PUSH
12712: LD_INT 1
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 23
12721: PUSH
12722: LD_INT 1
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: PPUSH
12734: CALL_OW 69
12738: ST_TO_ADDR
// for i in tmp do
12739: LD_ADDR_VAR 0 1
12743: PUSH
12744: LD_VAR 0 2
12748: PUSH
12749: FOR_IN
12750: IFFALSE 12777
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12752: LD_VAR 0 1
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: LD_INT 4
12762: PPUSH
12763: CALL_OW 12
12767: PPUSH
12768: LD_INT 500
12770: PPUSH
12771: CALL_OW 492
12775: GO 12749
12777: POP
12778: POP
// end ; end_of_file
12779: PPOPN 2
12781: END
// every 0 0$1 trigger AIEnable do
12782: LD_EXP 37
12786: IFFALSE 12880
12788: GO 12790
12790: DISABLE
// begin enable ;
12791: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12792: LD_INT 3
12794: PPUSH
12795: LD_INT 21
12797: PPUSH
12798: LD_INT 7
12800: PPUSH
12801: CALL 6030 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12805: LD_INT 3
12807: PPUSH
12808: LD_INT 8
12810: PPUSH
12811: LD_INT 7
12813: PPUSH
12814: LD_INT 1
12816: PPUSH
12817: CALL 6334 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12821: LD_EXP 20
12825: PUSH
12826: LD_INT 2
12828: EQUAL
12829: PUSH
12830: LD_INT 22
12832: PUSH
12833: LD_INT 6
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PPUSH
12840: CALL_OW 69
12844: AND
12845: IFFALSE 12880
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12847: LD_INT 6
12849: PPUSH
12850: LD_EXP 21
12854: PPUSH
12855: LD_INT 6
12857: PPUSH
12858: CALL 6030 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12862: LD_INT 6
12864: PPUSH
12865: LD_INT 9
12867: PPUSH
12868: LD_INT 6
12870: PPUSH
12871: LD_EXP 22
12875: PPUSH
12876: CALL 6334 0 4
// end ; end ;
12880: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12881: LD_EXP 15
12885: PPUSH
12886: CALL_OW 310
12890: NOT
12891: PUSH
12892: LD_INT 21
12894: PPUSH
12895: CALL_OW 302
12899: AND
12900: PUSH
12901: LD_INT 21
12903: PPUSH
12904: CALL_OW 255
12908: PUSH
12909: LD_INT 3
12911: EQUAL
12912: AND
12913: IFFALSE 12930
12915: GO 12917
12917: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12918: LD_EXP 15
12922: PPUSH
12923: LD_INT 21
12925: PPUSH
12926: CALL_OW 120
12930: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12931: LD_INT 22
12933: PUSH
12934: LD_INT 3
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 21
12943: PUSH
12944: LD_INT 2
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 55
12953: PUSH
12954: EMPTY
12955: LIST
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: LIST
12961: PPUSH
12962: CALL_OW 69
12966: PUSH
12967: LD_INT 0
12969: EQUAL
12970: PUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 255
12978: PUSH
12979: LD_INT 3
12981: EQUAL
12982: AND
12983: PUSH
12984: LD_INT 21
12986: PPUSH
12987: CALL_OW 302
12991: AND
12992: PUSH
12993: LD_INT 21
12995: PPUSH
12996: CALL_OW 255
13000: PUSH
13001: LD_INT 3
13003: EQUAL
13004: AND
13005: PUSH
13006: LD_INT 21
13008: PPUSH
13009: CALL_OW 302
13013: AND
13014: IFFALSE 13226
13016: GO 13018
13018: DISABLE
// begin enable ;
13019: ENABLE
// if Difficulty = 1 then
13020: LD_OWVAR 67
13024: PUSH
13025: LD_INT 1
13027: EQUAL
13028: IFFALSE 13072
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
13030: LD_INT 3
13032: PPUSH
13033: LD_INT 24
13035: PPUSH
13036: LD_OWVAR 67
13040: PUSH
13041: LD_INT 2
13043: PLUS
13044: PPUSH
13045: LD_INT 42
13047: PUSH
13048: LD_INT 44
13050: PUSH
13051: LD_INT 43
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: PPUSH
13059: LD_INT 1
13061: PPUSH
13062: LD_INT 1
13064: PPUSH
13065: LD_INT 21
13067: PPUSH
13068: CALL 6848 0 7
// if Difficulty = 2 then
13072: LD_OWVAR 67
13076: PUSH
13077: LD_INT 2
13079: EQUAL
13080: IFFALSE 13147
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13082: LD_INT 3
13084: PPUSH
13085: LD_INT 24
13087: PPUSH
13088: LD_OWVAR 67
13092: PUSH
13093: LD_INT 2
13095: PLUS
13096: PPUSH
13097: LD_INT 44
13099: PUSH
13100: LD_INT 44
13102: PUSH
13103: LD_INT 43
13105: PUSH
13106: LD_INT 43
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: PPUSH
13115: LD_INT 1
13117: PPUSH
13118: LD_INT 1
13120: PPUSH
13121: LD_INT 21
13123: PUSH
13124: LD_INT 22
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 1
13133: PPUSH
13134: LD_INT 2
13136: PPUSH
13137: CALL_OW 12
13141: ARRAY
13142: PPUSH
13143: CALL 6848 0 7
// if Difficulty >= 3 then
13147: LD_OWVAR 67
13151: PUSH
13152: LD_INT 3
13154: GREATEREQUAL
13155: IFFALSE 13226
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13157: LD_INT 3
13159: PPUSH
13160: LD_INT 24
13162: PPUSH
13163: LD_OWVAR 67
13167: PUSH
13168: LD_INT 2
13170: PPUSH
13171: LD_INT 3
13173: PPUSH
13174: CALL_OW 12
13178: PLUS
13179: PPUSH
13180: LD_INT 44
13182: PUSH
13183: LD_INT 44
13185: PUSH
13186: LD_INT 43
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: PPUSH
13194: LD_INT 1
13196: PPUSH
13197: LD_INT 1
13199: PPUSH
13200: LD_INT 22
13202: PUSH
13203: LD_INT 23
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 1
13212: PPUSH
13213: LD_INT 2
13215: PPUSH
13216: CALL_OW 12
13220: ARRAY
13221: PPUSH
13222: CALL 6848 0 7
// end ;
13226: END
// every 0 0$1 do
13227: GO 13229
13229: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13230: LD_INT 3
13232: PPUSH
13233: LD_INT 1
13235: PPUSH
13236: LD_INT 3
13238: PPUSH
13239: CALL 5951 0 3
13243: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13244: LD_EXP 20
13248: PUSH
13249: LD_INT 1
13251: EQUAL
13252: IFFALSE 13399
13254: GO 13256
13256: DISABLE
13257: LD_INT 0
13259: PPUSH
13260: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13261: LD_ADDR_VAR 0 2
13265: PUSH
13266: LD_INT 22
13268: PUSH
13269: LD_INT 6
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 21
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 34
13288: PUSH
13289: LD_INT 51
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: LIST
13300: PPUSH
13301: CALL_OW 69
13305: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13306: LD_VAR 0 2
13310: PUSH
13311: LD_INT 1
13313: ARRAY
13314: PPUSH
13315: LD_EXP 21
13319: PPUSH
13320: CALL_OW 250
13324: PUSH
13325: LD_INT 5
13327: MINUS
13328: PPUSH
13329: LD_EXP 21
13333: PPUSH
13334: CALL_OW 251
13338: PUSH
13339: LD_INT 5
13341: MINUS
13342: PPUSH
13343: CALL_OW 111
// wait ( 0 0$5 ) ;
13347: LD_INT 175
13349: PPUSH
13350: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13354: LD_VAR 0 2
13358: PUSH
13359: LD_INT 1
13361: ARRAY
13362: PPUSH
13363: LD_INT 41
13365: PPUSH
13366: LD_INT 52
13368: PPUSH
13369: CALL_OW 177
// wait ( 0 0$40 ) ;
13373: LD_INT 1400
13375: PPUSH
13376: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13380: LD_VAR 0 2
13384: PUSH
13385: LD_INT 1
13387: ARRAY
13388: PPUSH
13389: LD_INT 41
13391: PPUSH
13392: LD_INT 44
13394: PPUSH
13395: CALL_OW 111
// end ;
13399: PPOPN 2
13401: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13402: LD_EXP 21
13406: PPUSH
13407: CALL_OW 274
13411: PPUSH
13412: LD_INT 1
13414: PPUSH
13415: CALL_OW 275
13419: PUSH
13420: LD_INT 100
13422: GREATEREQUAL
13423: IFFALSE 13651
13425: GO 13427
13427: DISABLE
13428: LD_INT 0
13430: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13431: LD_ADDR_VAR 0 1
13435: PUSH
13436: LD_INT 22
13438: PUSH
13439: LD_INT 6
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 21
13448: PUSH
13449: LD_INT 1
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 25
13458: PUSH
13459: LD_INT 2
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: LIST
13470: PPUSH
13471: CALL_OW 69
13475: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13476: LD_VAR 0 1
13480: PUSH
13481: LD_INT 1
13483: ARRAY
13484: PPUSH
13485: LD_INT 4
13487: PPUSH
13488: LD_INT 39
13490: PPUSH
13491: LD_INT 37
13493: PPUSH
13494: LD_INT 3
13496: PPUSH
13497: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13501: LD_VAR 0 1
13505: PUSH
13506: LD_INT 1
13508: ARRAY
13509: PPUSH
13510: LD_INT 29
13512: PPUSH
13513: LD_INT 42
13515: PPUSH
13516: LD_INT 54
13518: PPUSH
13519: LD_INT 3
13521: PPUSH
13522: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13526: LD_VAR 0 1
13530: PUSH
13531: LD_INT 1
13533: ARRAY
13534: PPUSH
13535: LD_INT 6
13537: PPUSH
13538: LD_INT 38
13540: PPUSH
13541: LD_INT 48
13543: PPUSH
13544: LD_INT 0
13546: PPUSH
13547: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13551: LD_VAR 0 1
13555: PUSH
13556: LD_INT 1
13558: ARRAY
13559: PPUSH
13560: LD_INT 2
13562: PPUSH
13563: LD_INT 32
13565: PPUSH
13566: LD_INT 38
13568: PPUSH
13569: LD_INT 2
13571: PPUSH
13572: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13576: LD_VAR 0 1
13580: PUSH
13581: LD_INT 1
13583: ARRAY
13584: PPUSH
13585: LD_INT 26
13587: PPUSH
13588: LD_INT 39
13590: PPUSH
13591: LD_INT 55
13593: PPUSH
13594: LD_INT 3
13596: PPUSH
13597: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13601: LD_VAR 0 1
13605: PUSH
13606: LD_INT 1
13608: ARRAY
13609: PPUSH
13610: LD_INT 32
13612: PPUSH
13613: LD_INT 31
13615: PPUSH
13616: LD_INT 31
13618: PPUSH
13619: LD_INT 3
13621: PPUSH
13622: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13626: LD_VAR 0 1
13630: PUSH
13631: LD_INT 1
13633: ARRAY
13634: PPUSH
13635: LD_INT 31
13637: PPUSH
13638: LD_INT 50
13640: PPUSH
13641: LD_INT 51
13643: PPUSH
13644: LD_INT 4
13646: PPUSH
13647: CALL_OW 205
// end ;
13651: PPOPN 1
13653: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13654: LD_EXP 46
13658: IFFALSE 14223
13660: GO 13662
13662: DISABLE
13663: LD_INT 0
13665: PPUSH
13666: PPUSH
13667: PPUSH
// begin enable ;
13668: ENABLE
// if not ruMobile then
13669: LD_EXP 46
13673: NOT
13674: IFFALSE 13678
// exit ;
13676: GO 14223
// for i in ruMobile do
13678: LD_ADDR_VAR 0 1
13682: PUSH
13683: LD_EXP 46
13687: PUSH
13688: FOR_IN
13689: IFFALSE 14221
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13691: LD_VAR 0 1
13695: PPUSH
13696: CALL_OW 302
13700: NOT
13701: PUSH
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 255
13711: PUSH
13712: LD_INT 3
13714: NONEQUAL
13715: OR
13716: IFFALSE 13736
// begin ruMobile := ruMobile diff i ;
13718: LD_ADDR_EXP 46
13722: PUSH
13723: LD_EXP 46
13727: PUSH
13728: LD_VAR 0 1
13732: DIFF
13733: ST_TO_ADDR
// continue ;
13734: GO 13688
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13736: LD_VAR 0 1
13740: PPUSH
13741: CALL_OW 110
13745: NOT
13746: PUSH
13747: LD_VAR 0 1
13751: PPUSH
13752: CALL_OW 110
13756: PUSH
13757: LD_INT 0
13759: EQUAL
13760: OR
13761: IFFALSE 13876
// begin if GetFuel ( i ) < 50 then
13763: LD_VAR 0 1
13767: PPUSH
13768: CALL_OW 261
13772: PUSH
13773: LD_INT 50
13775: LESS
13776: IFFALSE 13835
// begin ComMoveXY ( i , 106 , 88 ) ;
13778: LD_VAR 0 1
13782: PPUSH
13783: LD_INT 106
13785: PPUSH
13786: LD_INT 88
13788: PPUSH
13789: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13793: LD_INT 35
13795: PPUSH
13796: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13800: LD_VAR 0 1
13804: PPUSH
13805: LD_INT 106
13807: PPUSH
13808: LD_INT 88
13810: PPUSH
13811: CALL_OW 297
13815: PUSH
13816: LD_INT 4
13818: LESS
13819: IFFALSE 13793
// SetFuel ( i , 100 ) ;
13821: LD_VAR 0 1
13825: PPUSH
13826: LD_INT 100
13828: PPUSH
13829: CALL_OW 240
// end else
13833: GO 13876
// if not IsInArea ( i , ruParking ) then
13835: LD_VAR 0 1
13839: PPUSH
13840: LD_INT 25
13842: PPUSH
13843: CALL_OW 308
13847: NOT
13848: IFFALSE 13864
// ComMoveToArea ( i , ruParking ) else
13850: LD_VAR 0 1
13854: PPUSH
13855: LD_INT 25
13857: PPUSH
13858: CALL_OW 113
13862: GO 13876
// SetTag ( i , 1 ) ;
13864: LD_VAR 0 1
13868: PPUSH
13869: LD_INT 1
13871: PPUSH
13872: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13876: LD_VAR 0 1
13880: PPUSH
13881: CALL_OW 110
13885: PUSH
13886: LD_INT 1
13888: EQUAL
13889: IFFALSE 14019
// begin if GetLives ( i ) < 1000 then
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 256
13900: PUSH
13901: LD_INT 1000
13903: LESS
13904: IFFALSE 13996
// begin if not IsDrivenBy ( i ) then
13906: LD_VAR 0 1
13910: PPUSH
13911: CALL_OW 311
13915: NOT
13916: IFFALSE 13920
// continue ;
13918: GO 13688
// mech := IsDrivenBy ( i ) ;
13920: LD_ADDR_VAR 0 2
13924: PUSH
13925: LD_VAR 0 1
13929: PPUSH
13930: CALL_OW 311
13934: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13935: LD_VAR 0 2
13939: PPUSH
13940: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13944: LD_VAR 0 2
13948: PPUSH
13949: LD_VAR 0 1
13953: PPUSH
13954: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13958: LD_INT 35
13960: PPUSH
13961: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13965: LD_VAR 0 1
13969: PPUSH
13970: CALL_OW 256
13974: PUSH
13975: LD_INT 1000
13977: EQUAL
13978: IFFALSE 13958
// ComEnterUnit ( mech , i ) ;
13980: LD_VAR 0 2
13984: PPUSH
13985: LD_VAR 0 1
13989: PPUSH
13990: CALL_OW 120
// end else
13994: GO 14019
// if IsDrivenBy ( i ) then
13996: LD_VAR 0 1
14000: PPUSH
14001: CALL_OW 311
14005: IFFALSE 14019
// SetTag ( i , 2 ) ;
14007: LD_VAR 0 1
14011: PPUSH
14012: LD_INT 2
14014: PPUSH
14015: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
14019: LD_VAR 0 1
14023: PPUSH
14024: CALL_OW 110
14028: PUSH
14029: LD_INT 2
14031: EQUAL
14032: IFFALSE 14219
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14034: LD_ADDR_VAR 0 3
14038: PUSH
14039: LD_INT 24
14041: PPUSH
14042: LD_INT 81
14044: PUSH
14045: LD_INT 3
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PPUSH
14052: CALL_OW 70
14056: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14057: LD_VAR 0 1
14061: PPUSH
14062: CALL_OW 256
14066: PUSH
14067: LD_INT 650
14069: LESS
14070: IFFALSE 14095
// begin ComStop ( i ) ;
14072: LD_VAR 0 1
14076: PPUSH
14077: CALL_OW 141
// SetTag ( i , 0 ) ;
14081: LD_VAR 0 1
14085: PPUSH
14086: LD_INT 0
14088: PPUSH
14089: CALL_OW 109
// continue ;
14093: GO 13688
// end ; if enemy then
14095: LD_VAR 0 3
14099: IFFALSE 14139
// begin if not HasTask ( i ) then
14101: LD_VAR 0 1
14105: PPUSH
14106: CALL_OW 314
14110: NOT
14111: IFFALSE 14137
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14113: LD_VAR 0 1
14117: PPUSH
14118: LD_VAR 0 3
14122: PPUSH
14123: LD_VAR 0 1
14127: PPUSH
14128: CALL_OW 74
14132: PPUSH
14133: CALL_OW 115
// end else
14137: GO 14219
// if ruMobile > 2 then
14139: LD_EXP 46
14143: PUSH
14144: LD_INT 2
14146: GREATER
14147: IFFALSE 14219
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14149: LD_ADDR_VAR 0 3
14153: PUSH
14154: LD_INT 81
14156: PUSH
14157: LD_INT 3
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PPUSH
14164: CALL_OW 69
14168: ST_TO_ADDR
// if enemy then
14169: LD_VAR 0 3
14173: IFFALSE 14219
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
14175: LD_VAR 0 1
14179: PPUSH
14180: LD_INT 95
14182: PUSH
14183: LD_INT 74
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 67
14192: PUSH
14193: LD_INT 59
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PUSH
14200: LD_INT 55
14202: PUSH
14203: LD_INT 41
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: LIST
14214: PPUSH
14215: CALL 78157 0 2
// end ; end ; end ;
14219: GO 13688
14221: POP
14222: POP
// end ; end_of_file
14223: PPOPN 3
14225: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14226: LD_INT 0
14228: PPUSH
14229: PPUSH
14230: PPUSH
14231: PPUSH
14232: PPUSH
14233: PPUSH
14234: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14235: LD_ADDR_VAR 0 3
14239: PUSH
14240: LD_INT 22
14242: PUSH
14243: LD_INT 6
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 21
14252: PUSH
14253: LD_INT 1
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 1
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 54
14275: PUSH
14276: EMPTY
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: PPUSH
14289: CALL_OW 69
14293: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14294: LD_ADDR_VAR 0 7
14298: PUSH
14299: LD_INT 22
14301: PUSH
14302: LD_INT 6
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 21
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 25
14321: PUSH
14322: LD_INT 1
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 54
14331: PUSH
14332: EMPTY
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: PPUSH
14341: CALL_OW 69
14345: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14346: LD_ADDR_VAR 0 4
14350: PUSH
14351: LD_INT 22
14353: PUSH
14354: LD_INT 6
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 21
14363: PUSH
14364: LD_INT 1
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 25
14373: PUSH
14374: LD_INT 2
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: LIST
14385: PPUSH
14386: CALL_OW 69
14390: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14391: LD_ADDR_VAR 0 6
14395: PUSH
14396: LD_INT 22
14398: PUSH
14399: LD_INT 6
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 21
14408: PUSH
14409: LD_INT 1
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 25
14418: PUSH
14419: LD_INT 4
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: PPUSH
14431: CALL_OW 69
14435: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14436: LD_ADDR_VAR 0 8
14440: PUSH
14441: LD_INT 22
14443: PUSH
14444: LD_INT 6
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 21
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 34
14463: PUSH
14464: LD_INT 51
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: LIST
14475: PPUSH
14476: CALL_OW 69
14480: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14481: LD_VAR 0 1
14485: PPUSH
14486: CALL_OW 255
14490: PUSH
14491: LD_INT 6
14493: EQUAL
14494: PUSH
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 266
14504: PUSH
14505: LD_INT 0
14507: EQUAL
14508: AND
14509: IFFALSE 14529
// begin ruPDepot = building ;
14511: LD_ADDR_EXP 21
14515: PUSH
14516: LD_VAR 0 1
14520: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14521: LD_ADDR_EXP 20
14525: PUSH
14526: LD_INT 1
14528: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14529: LD_VAR 0 1
14533: PPUSH
14534: CALL_OW 266
14538: PUSH
14539: LD_INT 4
14541: EQUAL
14542: PUSH
14543: LD_VAR 0 1
14547: PPUSH
14548: CALL_OW 255
14552: PUSH
14553: LD_INT 6
14555: EQUAL
14556: AND
14557: IFFALSE 14590
// for i in tmpSold do
14559: LD_ADDR_VAR 0 2
14563: PUSH
14564: LD_VAR 0 3
14568: PUSH
14569: FOR_IN
14570: IFFALSE 14588
// ComEnterUnit ( i , building ) ;
14572: LD_VAR 0 2
14576: PPUSH
14577: LD_VAR 0 1
14581: PPUSH
14582: CALL_OW 120
14586: GO 14569
14588: POP
14589: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14590: LD_VAR 0 1
14594: PPUSH
14595: CALL_OW 266
14599: PUSH
14600: LD_INT 6
14602: EQUAL
14603: PUSH
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 255
14613: PUSH
14614: LD_INT 6
14616: EQUAL
14617: AND
14618: IFFALSE 14676
// begin for i in tmpSci do
14620: LD_ADDR_VAR 0 2
14624: PUSH
14625: LD_VAR 0 6
14629: PUSH
14630: FOR_IN
14631: IFFALSE 14649
// ComEnterUnit ( i , building ) ;
14633: LD_VAR 0 2
14637: PPUSH
14638: LD_VAR 0 1
14642: PPUSH
14643: CALL_OW 120
14647: GO 14630
14649: POP
14650: POP
// ResAllTechs ( 6 , building , 3 ) ;
14651: LD_INT 6
14653: PPUSH
14654: LD_VAR 0 1
14658: PPUSH
14659: LD_INT 3
14661: PPUSH
14662: CALL 5951 0 3
// ruPLab = building ;
14666: LD_ADDR_EXP 22
14670: PUSH
14671: LD_VAR 0 1
14675: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14676: LD_VAR 0 1
14680: PPUSH
14681: CALL_OW 266
14685: PUSH
14686: LD_INT 2
14688: EQUAL
14689: PUSH
14690: LD_VAR 0 1
14694: PPUSH
14695: CALL_OW 255
14699: PUSH
14700: LD_INT 6
14702: EQUAL
14703: AND
14704: IFFALSE 14755
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14706: LD_ADDR_VAR 0 5
14710: PUSH
14711: LD_VAR 0 8
14715: PUSH
14716: LD_INT 1
14718: ARRAY
14719: PPUSH
14720: CALL_OW 313
14724: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14725: LD_VAR 0 5
14729: PPUSH
14730: CALL_OW 121
// wait ( 0 0$1 ) ;
14734: LD_INT 35
14736: PPUSH
14737: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14741: LD_VAR 0 5
14745: PPUSH
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14755: LD_VAR 0 1
14759: PPUSH
14760: CALL_OW 266
14764: PUSH
14765: LD_INT 32
14767: EQUAL
14768: PUSH
14769: LD_VAR 0 1
14773: PPUSH
14774: CALL_OW 255
14778: PUSH
14779: LD_INT 6
14781: EQUAL
14782: AND
14783: IFFALSE 14835
// begin ComPlaceWeapon ( building , 42 ) ;
14785: LD_VAR 0 1
14789: PPUSH
14790: LD_INT 42
14792: PPUSH
14793: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14797: LD_VAR 0 7
14801: PUSH
14802: LD_INT 1
14804: ARRAY
14805: PPUSH
14806: CALL_OW 122
// wait ( 0 0$1 ) ;
14810: LD_INT 35
14812: PPUSH
14813: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14817: LD_VAR 0 7
14821: PUSH
14822: LD_INT 1
14824: ARRAY
14825: PPUSH
14826: LD_VAR 0 1
14830: PPUSH
14831: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 266
14844: PUSH
14845: LD_INT 31
14847: EQUAL
14848: PUSH
14849: LD_VAR 0 1
14853: PPUSH
14854: CALL_OW 255
14858: PUSH
14859: LD_INT 6
14861: EQUAL
14862: AND
14863: IFFALSE 14929
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14865: LD_VAR 0 7
14869: PUSH
14870: LD_INT 2
14872: ARRAY
14873: PPUSH
14874: CALL_OW 122
// wait ( 0 0$1 ) ;
14878: LD_INT 35
14880: PPUSH
14881: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14885: LD_VAR 0 7
14889: PUSH
14890: LD_INT 2
14892: ARRAY
14893: PPUSH
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14903: LD_VAR 0 4
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: PPUSH
14912: LD_EXP 21
14916: PPUSH
14917: CALL_OW 120
// baseReadyToBuild = 2 ;
14921: LD_ADDR_EXP 20
14925: PUSH
14926: LD_INT 2
14928: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14929: LD_VAR 0 1
14933: PPUSH
14934: CALL_OW 266
14938: PUSH
14939: LD_INT 32
14941: EQUAL
14942: PUSH
14943: LD_VAR 0 1
14947: PPUSH
14948: CALL_OW 255
14952: PUSH
14953: LD_INT 1
14955: EQUAL
14956: AND
14957: PUSH
14958: LD_EXP 32
14962: PUSH
14963: LD_INT 0
14965: EQUAL
14966: AND
14967: IFFALSE 15212
// begin bunkerDialog = 1 ;
14969: LD_ADDR_EXP 32
14973: PUSH
14974: LD_INT 1
14976: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14977: LD_EXP 11
14981: PPUSH
14982: CALL_OW 302
14986: IFFALSE 15002
// Say ( Claptopn , D11-Eng1-1 ) else
14988: LD_EXP 11
14992: PPUSH
14993: LD_STRING D11-Eng1-1
14995: PPUSH
14996: CALL_OW 88
15000: GO 15198
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15002: LD_INT 22
15004: PUSH
15005: LD_INT 1
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 21
15014: PUSH
15015: LD_INT 1
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: LD_INT 25
15024: PUSH
15025: LD_INT 3
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 26
15034: PUSH
15035: LD_INT 1
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: PPUSH
15048: CALL_OW 69
15052: PUSH
15053: LD_EXP 1
15057: PUSH
15058: EMPTY
15059: LIST
15060: PUSH
15061: LD_INT 0
15063: GREATER
15064: DIFF
15065: IFFALSE 15139
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15067: LD_INT 22
15069: PUSH
15070: LD_INT 1
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: LD_INT 21
15079: PUSH
15080: LD_INT 1
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 25
15089: PUSH
15090: LD_INT 2
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 26
15099: PUSH
15100: LD_INT 1
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: PPUSH
15113: CALL_OW 69
15117: PUSH
15118: LD_EXP 1
15122: PUSH
15123: EMPTY
15124: LIST
15125: DIFF
15126: PPUSH
15127: LD_STRING D11-Eng1-1
15129: PPUSH
15130: LD_STRING D11-Eng1-1
15132: PPUSH
15133: CALL 4598 0 3
15137: GO 15198
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15139: LD_INT 22
15141: PUSH
15142: LD_INT 1
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 21
15151: PUSH
15152: LD_INT 1
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: LD_INT 26
15161: PUSH
15162: LD_INT 1
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: LIST
15173: PPUSH
15174: CALL_OW 69
15178: PUSH
15179: LD_EXP 1
15183: PUSH
15184: EMPTY
15185: LIST
15186: DIFF
15187: PPUSH
15188: LD_STRING D11-Eng1-1
15190: PPUSH
15191: LD_STRING D11-Eng1-1
15193: PPUSH
15194: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15198: LD_EXP 33
15202: PUSH
15203: LD_INT 0
15205: EQUAL
15206: IFFALSE 15212
// EnergyDialog ;
15208: CALL 5003 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15212: LD_VAR 0 1
15216: PPUSH
15217: CALL_OW 266
15221: PUSH
15222: LD_INT 29
15224: EQUAL
15225: PUSH
15226: LD_VAR 0 1
15230: PPUSH
15231: CALL_OW 255
15235: PUSH
15236: LD_INT 1
15238: EQUAL
15239: AND
15240: IFFALSE 15250
// buildOil = 1 ;
15242: LD_ADDR_EXP 34
15246: PUSH
15247: LD_INT 1
15249: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 266
15259: PUSH
15260: LD_INT 26
15262: EQUAL
15263: PUSH
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 255
15273: PUSH
15274: LD_INT 1
15276: EQUAL
15277: AND
15278: IFFALSE 15288
// buildPower = 1 ;
15280: LD_ADDR_EXP 35
15284: PUSH
15285: LD_INT 1
15287: ST_TO_ADDR
// end ;
15288: PPOPN 8
15290: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15291: LD_VAR 0 1
15295: PPUSH
15296: CALL_OW 266
15300: PUSH
15301: LD_INT 3
15303: EQUAL
15304: PUSH
15305: LD_VAR 0 1
15309: PPUSH
15310: CALL_OW 255
15314: PUSH
15315: LD_INT 1
15317: EQUAL
15318: AND
15319: PUSH
15320: LD_EXP 31
15324: PUSH
15325: LD_INT 0
15327: EQUAL
15328: AND
15329: IFFALSE 15677
// begin factoryDialog = 1 ;
15331: LD_ADDR_EXP 31
15335: PUSH
15336: LD_INT 1
15338: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15339: LD_INT 47
15341: PPUSH
15342: LD_INT 1
15344: PPUSH
15345: CALL_OW 321
15349: PUSH
15350: LD_INT 1
15352: EQUAL
15353: PUSH
15354: LD_INT 45
15356: PPUSH
15357: LD_INT 1
15359: PPUSH
15360: CALL_OW 321
15364: PUSH
15365: LD_INT 1
15367: EQUAL
15368: AND
15369: IFFALSE 15677
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15371: LD_INT 22
15373: PUSH
15374: LD_INT 1
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 21
15383: PUSH
15384: LD_INT 3
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 30
15393: PUSH
15394: LD_INT 3
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 24
15403: PUSH
15404: LD_INT 1000
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: PPUSH
15417: CALL_OW 69
15421: PUSH
15422: LD_INT 1
15424: ARRAY
15425: PPUSH
15426: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15430: LD_EXP 1
15434: PPUSH
15435: LD_STRING D9a-JMM-1
15437: PPUSH
15438: CALL_OW 88
// if IsOK ( Campell ) then
15442: LD_EXP 12
15446: PPUSH
15447: CALL_OW 302
15451: IFFALSE 15467
// Say ( Campell , D9a-Mech1-1 ) else
15453: LD_EXP 12
15457: PPUSH
15458: LD_STRING D9a-Mech1-1
15460: PPUSH
15461: CALL_OW 88
15465: GO 15663
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15467: LD_INT 22
15469: PUSH
15470: LD_INT 1
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 21
15479: PUSH
15480: LD_INT 1
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 25
15489: PUSH
15490: LD_INT 3
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 26
15499: PUSH
15500: LD_INT 1
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: PPUSH
15513: CALL_OW 69
15517: PUSH
15518: LD_EXP 1
15522: PUSH
15523: EMPTY
15524: LIST
15525: PUSH
15526: LD_INT 0
15528: GREATER
15529: DIFF
15530: IFFALSE 15604
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15532: LD_INT 22
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 21
15544: PUSH
15545: LD_INT 1
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 25
15554: PUSH
15555: LD_INT 3
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 26
15564: PUSH
15565: LD_INT 1
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 69
15582: PUSH
15583: LD_EXP 1
15587: PUSH
15588: EMPTY
15589: LIST
15590: DIFF
15591: PPUSH
15592: LD_STRING D9a-Mech1-1
15594: PPUSH
15595: LD_STRING D9a-Mech1-1
15597: PPUSH
15598: CALL 4598 0 3
15602: GO 15663
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15604: LD_INT 22
15606: PUSH
15607: LD_INT 1
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 21
15616: PUSH
15617: LD_INT 1
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: LD_INT 26
15626: PUSH
15627: LD_INT 1
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: LIST
15638: PPUSH
15639: CALL_OW 69
15643: PUSH
15644: LD_EXP 1
15648: PUSH
15649: EMPTY
15650: LIST
15651: DIFF
15652: PPUSH
15653: LD_STRING D9a-Mech1-1
15655: PPUSH
15656: LD_STRING D9a-Mech1-1
15658: PPUSH
15659: CALL 4598 0 3
// end ; if energyVDialog = 0 then
15663: LD_EXP 33
15667: PUSH
15668: LD_INT 0
15670: EQUAL
15671: IFFALSE 15677
// EnergyDialog ;
15673: CALL 5003 0 0
// end ; end ; end ;
15677: PPOPN 1
15679: END
// on UnitDestroyed ( unit ) do var mech ;
15680: LD_INT 0
15682: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15683: LD_VAR 0 1
15687: PPUSH
15688: CALL 34240 0 1
// if unit = JMM then
15692: LD_VAR 0 1
15696: PUSH
15697: LD_EXP 1
15701: EQUAL
15702: IFFALSE 15711
// YouLost ( JMM ) ;
15704: LD_STRING JMM
15706: PPUSH
15707: CALL_OW 104
// if unit = ambdept0 then
15711: LD_VAR 0 1
15715: PUSH
15716: LD_INT 4
15718: EQUAL
15719: IFFALSE 15728
// YouLost ( Base ) ;
15721: LD_STRING Base
15723: PPUSH
15724: CALL_OW 104
// if unit in ruMobile then
15728: LD_VAR 0 1
15732: PUSH
15733: LD_EXP 46
15737: IN
15738: IFFALSE 15756
// ruMobile = ruMobile diff ruMobile ;
15740: LD_ADDR_EXP 46
15744: PUSH
15745: LD_EXP 46
15749: PUSH
15750: LD_EXP 46
15754: DIFF
15755: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15756: LD_VAR 0 1
15760: PPUSH
15761: CALL_OW 247
15765: PUSH
15766: LD_INT 1
15768: EQUAL
15769: PUSH
15770: LD_VAR 0 1
15774: PPUSH
15775: CALL_OW 255
15779: PUSH
15780: LD_INT 1
15782: EQUAL
15783: AND
15784: IFFALSE 15800
// lostCounter = lostCounter + 1 ;
15786: LD_ADDR_EXP 38
15790: PUSH
15791: LD_EXP 38
15795: PUSH
15796: LD_INT 1
15798: PLUS
15799: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15800: LD_EXP 43
15804: PUSH
15805: LD_INT 24
15807: PPUSH
15808: CALL_OW 313
15812: PUSH
15813: LD_INT 6
15815: LESS
15816: AND
15817: PUSH
15818: LD_VAR 0 1
15822: PPUSH
15823: CALL_OW 257
15827: PUSH
15828: LD_INT 3
15830: EQUAL
15831: AND
15832: PUSH
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 255
15842: PUSH
15843: LD_INT 3
15845: EQUAL
15846: AND
15847: PUSH
15848: LD_INT 24
15850: PPUSH
15851: CALL_OW 302
15855: AND
15856: PUSH
15857: LD_INT 24
15859: PPUSH
15860: CALL_OW 255
15864: PUSH
15865: LD_INT 3
15867: EQUAL
15868: AND
15869: IFFALSE 15998
// begin ruMech := ruMech - 1 ;
15871: LD_ADDR_EXP 43
15875: PUSH
15876: LD_EXP 43
15880: PUSH
15881: LD_INT 1
15883: MINUS
15884: ST_TO_ADDR
// if ruMech = 0 then
15885: LD_EXP 43
15889: PUSH
15890: LD_INT 0
15892: EQUAL
15893: IFFALSE 15897
// exit ;
15895: GO 15998
// wait ( 0 0$40 ) ;
15897: LD_INT 1400
15899: PPUSH
15900: CALL_OW 67
// uc_side = 3 ;
15904: LD_ADDR_OWVAR 20
15908: PUSH
15909: LD_INT 3
15911: ST_TO_ADDR
// uc_nation = 3 ;
15912: LD_ADDR_OWVAR 21
15916: PUSH
15917: LD_INT 3
15919: ST_TO_ADDR
// hc_gallery :=  ;
15920: LD_ADDR_OWVAR 33
15924: PUSH
15925: LD_STRING 
15927: ST_TO_ADDR
// hc_name :=  ;
15928: LD_ADDR_OWVAR 26
15932: PUSH
15933: LD_STRING 
15935: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15936: LD_INT 0
15938: PPUSH
15939: LD_EXP 16
15943: PPUSH
15944: LD_EXP 17
15948: PPUSH
15949: CALL_OW 12
15953: PPUSH
15954: CALL_OW 383
// mech := CreateHuman ;
15958: LD_ADDR_VAR 0 2
15962: PUSH
15963: CALL_OW 44
15967: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15968: LD_VAR 0 2
15972: PPUSH
15973: LD_INT 124
15975: PPUSH
15976: LD_INT 97
15978: PPUSH
15979: LD_INT 0
15981: PPUSH
15982: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
15986: LD_VAR 0 2
15990: PPUSH
15991: LD_INT 24
15993: PPUSH
15994: CALL_OW 120
// end ; end ;
15998: PPOPN 2
16000: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
16001: LD_INT 0
16003: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
16004: LD_VAR 0 1
16008: PPUSH
16009: LD_VAR 0 2
16013: PPUSH
16014: CALL 34362 0 2
// if GetSide ( vehicle ) = 1 then
16018: LD_VAR 0 1
16022: PPUSH
16023: CALL_OW 255
16027: PUSH
16028: LD_INT 1
16030: EQUAL
16031: IFFALSE 16047
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
16033: LD_ADDR_EXP 42
16037: PUSH
16038: LD_EXP 42
16042: PUSH
16043: LD_INT 1
16045: PLUS
16046: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 255
16056: PUSH
16057: LD_INT 3
16059: EQUAL
16060: PUSH
16061: LD_VAR 0 1
16065: PPUSH
16066: CALL_OW 264
16070: PUSH
16071: LD_INT 42
16073: PUSH
16074: LD_INT 43
16076: PUSH
16077: LD_INT 44
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: LIST
16084: IN
16085: AND
16086: IFFALSE 16104
// ruMobile := ruMobile union vehicle ;
16088: LD_ADDR_EXP 46
16092: PUSH
16093: LD_EXP 46
16097: PUSH
16098: LD_VAR 0 1
16102: UNION
16103: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16104: LD_VAR 0 1
16108: PPUSH
16109: CALL_OW 264
16113: PUSH
16114: LD_INT 53
16116: EQUAL
16117: IFFALSE 16253
// begin uc_side = 3 ;
16119: LD_ADDR_OWVAR 20
16123: PUSH
16124: LD_INT 3
16126: ST_TO_ADDR
// uc_nation = 3 ;
16127: LD_ADDR_OWVAR 21
16131: PUSH
16132: LD_INT 3
16134: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16135: LD_INT 0
16137: PPUSH
16138: LD_EXP 17
16142: PPUSH
16143: CALL_OW 383
// driver := CreateHuman ;
16147: LD_ADDR_VAR 0 3
16151: PUSH
16152: CALL_OW 44
16156: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16157: LD_VAR 0 3
16161: PPUSH
16162: LD_VAR 0 2
16166: PPUSH
16167: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16171: LD_VAR 0 1
16175: PPUSH
16176: LD_INT 21
16178: PPUSH
16179: CALL 5219 0 2
// repeat wait ( 0 0$1 ) ;
16183: LD_INT 35
16185: PPUSH
16186: CALL_OW 67
// until not HasTask ( vehicle ) ;
16190: LD_VAR 0 1
16194: PPUSH
16195: CALL_OW 314
16199: NOT
16200: IFFALSE 16183
// driver := IsDrivenBy ( vehicle ) ;
16202: LD_ADDR_VAR 0 3
16206: PUSH
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL_OW 311
16216: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16217: LD_VAR 0 3
16221: PPUSH
16222: LD_INT 104
16224: PPUSH
16225: LD_INT 73
16227: PPUSH
16228: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16232: LD_VAR 0 3
16236: PPUSH
16237: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16241: LD_VAR 0 3
16245: PPUSH
16246: LD_INT 24
16248: PPUSH
16249: CALL_OW 180
// end ; end ;
16253: PPOPN 3
16255: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 255
16265: PUSH
16266: LD_INT 3
16268: EQUAL
16269: PUSH
16270: LD_VAR 0 1
16274: PPUSH
16275: CALL_OW 247
16279: PUSH
16280: LD_INT 2
16282: EQUAL
16283: AND
16284: PUSH
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 264
16294: PUSH
16295: LD_INT 42
16297: PUSH
16298: LD_INT 43
16300: PUSH
16301: LD_INT 44
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: LIST
16308: IN
16309: AND
16310: IFFALSE 16359
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16312: LD_INT 24
16314: PPUSH
16315: LD_VAR 0 1
16319: PPUSH
16320: CALL_OW 265
16324: PPUSH
16325: LD_VAR 0 1
16329: PPUSH
16330: CALL_OW 262
16334: PPUSH
16335: LD_VAR 0 1
16339: PPUSH
16340: CALL_OW 263
16344: PPUSH
16345: LD_VAR 0 1
16349: PPUSH
16350: CALL_OW 264
16354: PPUSH
16355: CALL_OW 185
// end ;
16359: PPOPN 1
16361: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16362: LD_VAR 0 1
16366: PPUSH
16367: CALL_OW 255
16371: PUSH
16372: LD_INT 3
16374: EQUAL
16375: PUSH
16376: LD_VAR 0 2
16380: PPUSH
16381: CALL_OW 255
16385: PUSH
16386: LD_INT 3
16388: EQUAL
16389: AND
16390: PUSH
16391: LD_INT 24
16393: PPUSH
16394: CALL_OW 302
16398: AND
16399: PUSH
16400: LD_VAR 0 1
16404: PPUSH
16405: CALL_OW 302
16409: NOT
16410: AND
16411: IFFALSE 16425
// ComEnterUnit ( human , rubfact0 ) ;
16413: LD_VAR 0 2
16417: PPUSH
16418: LD_INT 24
16420: PPUSH
16421: CALL_OW 120
// end ;
16425: PPOPN 2
16427: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16428: LD_VAR 0 1
16432: PUSH
16433: LD_INT 24
16435: EQUAL
16436: PUSH
16437: LD_VAR 0 2
16441: PPUSH
16442: CALL_OW 256
16446: PUSH
16447: LD_INT 1000
16449: LESS
16450: AND
16451: IFFALSE 16465
// SetLives ( un , 1000 ) ;
16453: LD_VAR 0 2
16457: PPUSH
16458: LD_INT 1000
16460: PPUSH
16461: CALL_OW 234
// end ;
16465: PPOPN 2
16467: END
// on Command ( comandid ) do var i , j , tmp ;
16468: LD_INT 0
16470: PPUSH
16471: PPUSH
16472: PPUSH
// begin SOS_Command ( comandid ) ;
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL 34346 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16482: LD_INT 22
16484: PUSH
16485: LD_INT 4
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PPUSH
16492: CALL_OW 69
16496: NOT
16497: IFFALSE 16501
// exit ;
16499: GO 16666
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16501: LD_ADDR_VAR 0 2
16505: PUSH
16506: LD_INT 22
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 2
16518: PUSH
16519: LD_INT 21
16521: PUSH
16522: LD_INT 1
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 21
16531: PUSH
16532: LD_INT 2
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PPUSH
16548: CALL_OW 69
16552: PUSH
16553: FOR_IN
16554: IFFALSE 16664
// begin if GetTaskList ( i ) > 0 then
16556: LD_VAR 0 2
16560: PPUSH
16561: CALL_OW 437
16565: PUSH
16566: LD_INT 0
16568: GREATER
16569: IFFALSE 16662
// begin for j = 1 to GetTaskList ( i ) do
16571: LD_ADDR_VAR 0 3
16575: PUSH
16576: DOUBLE
16577: LD_INT 1
16579: DEC
16580: ST_TO_ADDR
16581: LD_VAR 0 2
16585: PPUSH
16586: CALL_OW 437
16590: PUSH
16591: FOR_TO
16592: IFFALSE 16660
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16594: LD_ADDR_VAR 0 4
16598: PUSH
16599: LD_VAR 0 2
16603: PPUSH
16604: CALL_OW 437
16608: PUSH
16609: LD_VAR 0 3
16613: ARRAY
16614: PUSH
16615: LD_INT 4
16617: ARRAY
16618: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16619: LD_VAR 0 4
16623: PPUSH
16624: CALL_OW 255
16628: PUSH
16629: LD_INT 4
16631: EQUAL
16632: PUSH
16633: LD_VAR 0 4
16637: PPUSH
16638: CALL_OW 255
16642: PUSH
16643: LD_INT 0
16645: EQUAL
16646: OR
16647: IFFALSE 16658
// ComStop ( i ) ;
16649: LD_VAR 0 2
16653: PPUSH
16654: CALL_OW 141
// end ;
16658: GO 16591
16660: POP
16661: POP
// end ; end ;
16662: GO 16553
16664: POP
16665: POP
// end ; end_of_file
16666: PPOPN 4
16668: END
// every 10 10$0 do
16669: GO 16671
16671: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16672: LD_INT 5
16674: PPUSH
16675: LD_INT 3
16677: PPUSH
16678: LD_INT 2
16680: PUSH
16681: LD_INT 2
16683: PUSH
16684: LD_INT 3
16686: PUSH
16687: LD_INT 4
16689: PUSH
16690: LD_INT 4
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: PUSH
16699: LD_OWVAR 67
16703: ARRAY
16704: PLUS
16705: PPUSH
16706: LD_INT 0
16708: PPUSH
16709: LD_EXP 16
16713: PPUSH
16714: LD_EXP 17
16718: PPUSH
16719: CALL_OW 12
16723: PPUSH
16724: LD_INT 4
16726: PPUSH
16727: LD_INT 14
16729: PPUSH
16730: LD_INT 1
16732: PPUSH
16733: LD_INT 2
16735: PPUSH
16736: CALL 6960 0 9
16740: END
// every 20 20$0 do
16741: GO 16743
16743: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16744: LD_INT 5
16746: PPUSH
16747: LD_INT 3
16749: PPUSH
16750: LD_INT 4
16752: PUSH
16753: LD_INT 2
16755: PUSH
16756: LD_INT 3
16758: PUSH
16759: LD_INT 4
16761: PUSH
16762: LD_INT 5
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: PUSH
16771: LD_OWVAR 67
16775: ARRAY
16776: PLUS
16777: PPUSH
16778: LD_INT 2
16780: PPUSH
16781: LD_EXP 16
16785: PPUSH
16786: LD_EXP 17
16790: PPUSH
16791: CALL_OW 12
16795: PPUSH
16796: LD_INT 4
16798: PPUSH
16799: LD_INT 14
16801: PPUSH
16802: LD_INT 1
16804: PPUSH
16805: LD_INT 1
16807: PPUSH
16808: CALL 6960 0 9
16812: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16813: GO 16815
16815: DISABLE
16816: LD_INT 0
16818: PPUSH
16819: PPUSH
16820: PPUSH
16821: PPUSH
16822: PPUSH
// begin hex := [ 123 , 95 ] ;
16823: LD_ADDR_VAR 0 4
16827: PUSH
16828: LD_INT 123
16830: PUSH
16831: LD_INT 95
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: ST_TO_ADDR
// tmp := [ ] ;
16838: LD_ADDR_VAR 0 5
16842: PUSH
16843: EMPTY
16844: ST_TO_ADDR
// if Difficulty > 1 then
16845: LD_OWVAR 67
16849: PUSH
16850: LD_INT 1
16852: GREATER
16853: IFFALSE 16863
// specAttack := true ;
16855: LD_ADDR_EXP 47
16859: PUSH
16860: LD_INT 1
16862: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16863: LD_ADDR_VAR 0 1
16867: PUSH
16868: DOUBLE
16869: LD_INT 1
16871: DEC
16872: ST_TO_ADDR
16873: LD_INT 4
16875: PUSH
16876: LD_INT 5
16878: PUSH
16879: LD_INT 6
16881: PUSH
16882: LD_INT 7
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: PUSH
16891: LD_OWVAR 67
16895: ARRAY
16896: PUSH
16897: FOR_TO
16898: IFFALSE 17200
// begin uc_side := 5 ;
16900: LD_ADDR_OWVAR 20
16904: PUSH
16905: LD_INT 5
16907: ST_TO_ADDR
// uc_nation := 3 ;
16908: LD_ADDR_OWVAR 21
16912: PUSH
16913: LD_INT 3
16915: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16916: LD_ADDR_OWVAR 37
16920: PUSH
16921: LD_INT 21
16923: PUSH
16924: LD_INT 22
16926: PUSH
16927: LD_INT 23
16929: PUSH
16930: LD_INT 24
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: PUSH
16939: LD_VAR 0 1
16943: PUSH
16944: LD_OWVAR 67
16948: MOD
16949: PUSH
16950: LD_INT 1
16952: PLUS
16953: ARRAY
16954: ST_TO_ADDR
// vc_engine := engine_combustion ;
16955: LD_ADDR_OWVAR 39
16959: PUSH
16960: LD_INT 1
16962: ST_TO_ADDR
// vc_control := control_manual ;
16963: LD_ADDR_OWVAR 38
16967: PUSH
16968: LD_INT 1
16970: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16971: LD_ADDR_OWVAR 40
16975: PUSH
16976: LD_INT 42
16978: PUSH
16979: LD_INT 43
16981: PUSH
16982: LD_INT 44
16984: PUSH
16985: LD_INT 44
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: PUSH
16994: LD_VAR 0 1
16998: PUSH
16999: LD_OWVAR 67
17003: MOD
17004: PUSH
17005: LD_INT 1
17007: PLUS
17008: ARRAY
17009: ST_TO_ADDR
// veh := CreateVehicle ;
17010: LD_ADDR_VAR 0 3
17014: PUSH
17015: CALL_OW 45
17019: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17020: LD_VAR 0 3
17024: PPUSH
17025: LD_INT 5
17027: PPUSH
17028: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
17032: LD_INT 35
17034: PPUSH
17035: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17039: LD_VAR 0 4
17043: PUSH
17044: LD_INT 1
17046: ARRAY
17047: PPUSH
17048: LD_VAR 0 4
17052: PUSH
17053: LD_INT 2
17055: ARRAY
17056: PPUSH
17057: CALL_OW 428
17061: PUSH
17062: LD_INT 0
17064: EQUAL
17065: IFFALSE 17032
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17067: LD_VAR 0 3
17071: PPUSH
17072: LD_VAR 0 4
17076: PUSH
17077: LD_INT 1
17079: ARRAY
17080: PPUSH
17081: LD_VAR 0 4
17085: PUSH
17086: LD_INT 2
17088: ARRAY
17089: PPUSH
17090: LD_INT 0
17092: PPUSH
17093: CALL_OW 48
// uc_side := 5 ;
17097: LD_ADDR_OWVAR 20
17101: PUSH
17102: LD_INT 5
17104: ST_TO_ADDR
// uc_nation := 3 ;
17105: LD_ADDR_OWVAR 21
17109: PUSH
17110: LD_INT 3
17112: ST_TO_ADDR
// InitHC_All ( ) ;
17113: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
17117: LD_INT 0
17119: PPUSH
17120: LD_INT 2
17122: PUSH
17123: LD_OWVAR 67
17127: PLUS
17128: PPUSH
17129: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17133: CALL_OW 44
17137: PPUSH
17138: LD_VAR 0 3
17142: PPUSH
17143: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17147: LD_VAR 0 3
17151: PPUSH
17152: LD_INT 101
17154: PPUSH
17155: LD_INT 77
17157: PPUSH
17158: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17162: LD_ADDR_VAR 0 5
17166: PUSH
17167: LD_VAR 0 5
17171: PPUSH
17172: LD_VAR 0 5
17176: PUSH
17177: LD_INT 1
17179: PLUS
17180: PPUSH
17181: LD_VAR 0 3
17185: PPUSH
17186: CALL_OW 1
17190: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17191: LD_INT 105
17193: PPUSH
17194: CALL_OW 67
// end ;
17198: GO 16897
17200: POP
17201: POP
// repeat wait ( 0 0$1 ) ;
17202: LD_INT 35
17204: PPUSH
17205: CALL_OW 67
// for i in tmp do
17209: LD_ADDR_VAR 0 1
17213: PUSH
17214: LD_VAR 0 5
17218: PUSH
17219: FOR_IN
17220: IFFALSE 17288
// if not IsOk ( i ) then
17222: LD_VAR 0 1
17226: PPUSH
17227: CALL_OW 302
17231: NOT
17232: IFFALSE 17252
// tmp := tmp diff i else
17234: LD_ADDR_VAR 0 5
17238: PUSH
17239: LD_VAR 0 5
17243: PUSH
17244: LD_VAR 0 1
17248: DIFF
17249: ST_TO_ADDR
17250: GO 17286
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17252: LD_VAR 0 1
17256: PPUSH
17257: LD_INT 22
17259: PUSH
17260: LD_INT 1
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PPUSH
17267: CALL_OW 69
17271: PPUSH
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 74
17281: PPUSH
17282: CALL_OW 115
17286: GO 17219
17288: POP
17289: POP
// until not tmp ;
17290: LD_VAR 0 5
17294: NOT
17295: IFFALSE 17202
// end ;
17297: PPOPN 5
17299: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17300: LD_EXP 47
17304: IFFALSE 17679
17306: GO 17308
17308: DISABLE
17309: LD_INT 0
17311: PPUSH
17312: PPUSH
17313: PPUSH
17314: PPUSH
// begin wait ( 0 0$20 ) ;
17315: LD_INT 700
17317: PPUSH
17318: CALL_OW 67
// uc_side := 5 ;
17322: LD_ADDR_OWVAR 20
17326: PUSH
17327: LD_INT 5
17329: ST_TO_ADDR
// uc_nation := 3 ;
17330: LD_ADDR_OWVAR 21
17334: PUSH
17335: LD_INT 3
17337: ST_TO_ADDR
// InitHc ;
17338: CALL_OW 19
// hc_importance := 0 ;
17342: LD_ADDR_OWVAR 32
17346: PUSH
17347: LD_INT 0
17349: ST_TO_ADDR
// tmp := [ ] ;
17350: LD_ADDR_VAR 0 2
17354: PUSH
17355: EMPTY
17356: ST_TO_ADDR
// InitHC_All ( ) ;
17357: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17361: LD_INT 0
17363: PPUSH
17364: LD_INT 2
17366: PPUSH
17367: LD_INT 6
17369: PPUSH
17370: CALL_OW 380
// eng := CreateHuman ;
17374: LD_ADDR_VAR 0 4
17378: PUSH
17379: CALL_OW 44
17383: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17384: LD_VAR 0 4
17388: PPUSH
17389: LD_INT 78
17391: PPUSH
17392: LD_INT 2
17394: PPUSH
17395: LD_INT 4
17397: PPUSH
17398: LD_INT 0
17400: PPUSH
17401: CALL_OW 50
// for i = 1 to 2 + Difficulty do
17405: LD_ADDR_VAR 0 3
17409: PUSH
17410: DOUBLE
17411: LD_INT 1
17413: DEC
17414: ST_TO_ADDR
17415: LD_INT 2
17417: PUSH
17418: LD_OWVAR 67
17422: PLUS
17423: PUSH
17424: FOR_TO
17425: IFFALSE 17514
// begin InitHC_All ( ) ;
17427: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17431: LD_INT 0
17433: PPUSH
17434: LD_INT 1
17436: PPUSH
17437: LD_INT 4
17439: PUSH
17440: LD_INT 5
17442: PUSH
17443: LD_INT 6
17445: PUSH
17446: LD_INT 6
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: PUSH
17455: LD_OWVAR 67
17459: ARRAY
17460: PPUSH
17461: CALL_OW 380
// un := CreateHuman ;
17465: LD_ADDR_VAR 0 1
17469: PUSH
17470: CALL_OW 44
17474: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17475: LD_VAR 0 1
17479: PPUSH
17480: LD_INT 78
17482: PPUSH
17483: LD_INT 2
17485: PPUSH
17486: LD_INT 4
17488: PPUSH
17489: LD_INT 0
17491: PPUSH
17492: CALL_OW 50
// tmp := tmp ^ un ;
17496: LD_ADDR_VAR 0 2
17500: PUSH
17501: LD_VAR 0 2
17505: PUSH
17506: LD_VAR 0 1
17510: ADD
17511: ST_TO_ADDR
// end ;
17512: GO 17424
17514: POP
17515: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17516: LD_VAR 0 2
17520: PPUSH
17521: LD_INT 49
17523: PPUSH
17524: LD_INT 3
17526: PPUSH
17527: CALL_OW 111
// wait ( 0 0$2 ) ;
17531: LD_INT 70
17533: PPUSH
17534: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17538: LD_VAR 0 4
17542: PPUSH
17543: LD_INT 49
17545: PPUSH
17546: LD_INT 3
17548: PPUSH
17549: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17553: LD_VAR 0 4
17557: PPUSH
17558: LD_INT 4
17560: PPUSH
17561: CALL_OW 227
// wait ( 0 0$10 ) ;
17565: LD_INT 350
17567: PPUSH
17568: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17572: LD_INT 35
17574: PPUSH
17575: CALL_OW 67
// for i in tmp do
17579: LD_ADDR_VAR 0 3
17583: PUSH
17584: LD_VAR 0 2
17588: PUSH
17589: FOR_IN
17590: IFFALSE 17670
// if not IsOk ( i ) then
17592: LD_VAR 0 3
17596: PPUSH
17597: CALL_OW 302
17601: NOT
17602: IFFALSE 17622
// tmp := tmp diff i else
17604: LD_ADDR_VAR 0 2
17608: PUSH
17609: LD_VAR 0 2
17613: PUSH
17614: LD_VAR 0 3
17618: DIFF
17619: ST_TO_ADDR
17620: GO 17668
// if not HasTask ( i ) then
17622: LD_VAR 0 3
17626: PPUSH
17627: CALL_OW 314
17631: NOT
17632: IFFALSE 17668
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17634: LD_VAR 0 3
17638: PPUSH
17639: LD_INT 22
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PPUSH
17649: CALL_OW 69
17653: PPUSH
17654: LD_VAR 0 3
17658: PPUSH
17659: CALL_OW 74
17663: PPUSH
17664: CALL_OW 115
17668: GO 17589
17670: POP
17671: POP
// until not tmp ;
17672: LD_VAR 0 2
17676: NOT
17677: IFFALSE 17572
// end ; end_of_file
17679: PPOPN 4
17681: END
// every 0 0$1 trigger startTimer = 1 do
17682: LD_EXP 30
17686: PUSH
17687: LD_INT 1
17689: EQUAL
17690: IFFALSE 17820
17692: GO 17694
17694: DISABLE
// begin enable ;
17695: ENABLE
// if timerStatus = 1 then
17696: LD_EXP 29
17700: PUSH
17701: LD_INT 1
17703: EQUAL
17704: IFFALSE 17737
// begin timeToSupport = timeToSupport - 0 0$01 ;
17706: LD_ADDR_EXP 28
17710: PUSH
17711: LD_EXP 28
17715: PUSH
17716: LD_INT 35
17718: MINUS
17719: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17720: LD_ADDR_OWVAR 47
17724: PUSH
17725: LD_STRING #Am04-1
17727: PUSH
17728: LD_EXP 28
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: ST_TO_ADDR
// end ; if timerStatus = 2 then
17737: LD_EXP 29
17741: PUSH
17742: LD_INT 2
17744: EQUAL
17745: IFFALSE 17778
// begin timeToSupport = timeToSupport - 0 0$01 ;
17747: LD_ADDR_EXP 28
17751: PUSH
17752: LD_EXP 28
17756: PUSH
17757: LD_INT 35
17759: MINUS
17760: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17761: LD_ADDR_OWVAR 47
17765: PUSH
17766: LD_STRING #Am04-2
17768: PUSH
17769: LD_EXP 28
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: ST_TO_ADDR
// end ; if timerStatus = 3 then
17778: LD_EXP 29
17782: PUSH
17783: LD_INT 3
17785: EQUAL
17786: IFFALSE 17802
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17788: LD_ADDR_EXP 27
17792: PUSH
17793: LD_EXP 27
17797: PUSH
17798: LD_INT 35
17800: MINUS
17801: ST_TO_ADDR
// if timerStatus = 4 then
17802: LD_EXP 29
17806: PUSH
17807: LD_INT 4
17809: EQUAL
17810: IFFALSE 17820
// display_strings =  ;
17812: LD_ADDR_OWVAR 47
17816: PUSH
17817: LD_STRING 
17819: ST_TO_ADDR
// end ; end_of_file
17820: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17821: LD_EXP 15
17825: PPUSH
17826: CALL_OW 301
17830: PUSH
17831: LD_INT 22
17833: PUSH
17834: LD_INT 3
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 21
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PPUSH
17855: CALL_OW 69
17859: PUSH
17860: LD_INT 14
17862: PUSH
17863: LD_INT 13
17865: PUSH
17866: LD_INT 12
17868: PUSH
17869: LD_INT 11
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: PUSH
17878: LD_OWVAR 67
17882: ARRAY
17883: LESS
17884: AND
17885: IFFALSE 18471
17887: GO 17889
17889: DISABLE
17890: LD_INT 0
17892: PPUSH
17893: PPUSH
17894: PPUSH
// begin AIEnable = 0 ;
17895: LD_ADDR_EXP 37
17899: PUSH
17900: LD_INT 0
17902: ST_TO_ADDR
// escapeAvalaible = 1 ;
17903: LD_ADDR_EXP 40
17907: PUSH
17908: LD_INT 1
17910: ST_TO_ADDR
// Video ( true ) ;
17911: LD_INT 1
17913: PPUSH
17914: CALL 75533 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17918: LD_INT 3
17920: PPUSH
17921: LD_INT 1
17923: PPUSH
17924: LD_INT 1
17926: PPUSH
17927: LD_INT 0
17929: PPUSH
17930: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17934: LD_INT 6
17936: PPUSH
17937: LD_INT 1
17939: PPUSH
17940: LD_INT 1
17942: PPUSH
17943: LD_INT 0
17945: PPUSH
17946: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17950: LD_INT 5
17952: PPUSH
17953: LD_INT 1
17955: PPUSH
17956: LD_INT 1
17958: PPUSH
17959: LD_INT 0
17961: PPUSH
17962: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17966: LD_INT 3
17968: PPUSH
17969: LD_INT 1
17971: PPUSH
17972: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17976: LD_INT 97
17978: PPUSH
17979: LD_INT 91
17981: PPUSH
17982: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17986: LD_INT 22
17988: PUSH
17989: LD_INT 3
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 21
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PPUSH
18010: CALL_OW 69
18014: PPUSH
18015: CALL_OW 121
// wait ( 0 0$01 ) ;
18019: LD_INT 35
18021: PPUSH
18022: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18026: LD_INT 22
18028: PUSH
18029: LD_INT 3
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: LD_INT 21
18038: PUSH
18039: LD_INT 1
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PPUSH
18050: CALL_OW 69
18054: PPUSH
18055: LD_INT 124
18057: PPUSH
18058: LD_INT 98
18060: PPUSH
18061: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18065: LD_INT 22
18067: PUSH
18068: LD_INT 5
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 21
18077: PUSH
18078: LD_INT 1
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PPUSH
18089: CALL_OW 69
18093: PPUSH
18094: CALL_OW 121
// wait ( 0 0$01 ) ;
18098: LD_INT 35
18100: PPUSH
18101: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18105: LD_INT 22
18107: PUSH
18108: LD_INT 5
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 21
18117: PUSH
18118: LD_INT 1
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PPUSH
18129: CALL_OW 69
18133: PPUSH
18134: LD_INT 124
18136: PPUSH
18137: LD_INT 98
18139: PPUSH
18140: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18144: LD_INT 22
18146: PUSH
18147: LD_INT 6
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 21
18156: PUSH
18157: LD_INT 1
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PPUSH
18168: CALL_OW 69
18172: PPUSH
18173: CALL_OW 121
// wait ( 0 0$01 ) ;
18177: LD_INT 35
18179: PPUSH
18180: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18184: LD_INT 22
18186: PUSH
18187: LD_INT 6
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 21
18196: PUSH
18197: LD_INT 1
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PPUSH
18208: CALL_OW 69
18212: PPUSH
18213: LD_INT 124
18215: PPUSH
18216: LD_INT 98
18218: PPUSH
18219: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18223: LD_INT 22
18225: PUSH
18226: LD_INT 1
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 21
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PPUSH
18247: CALL_OW 69
18251: PPUSH
18252: LD_INT 124
18254: PPUSH
18255: LD_INT 96
18257: PPUSH
18258: CALL_OW 114
// wait ( 0 0$1 ) ;
18262: LD_INT 35
18264: PPUSH
18265: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18269: LD_INT 124
18271: PPUSH
18272: LD_INT 96
18274: PPUSH
18275: CALL_OW 84
// p := 0 0$0 ;
18279: LD_ADDR_VAR 0 3
18283: PUSH
18284: LD_INT 0
18286: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18287: LD_ADDR_VAR 0 2
18291: PUSH
18292: LD_INT 2
18294: PUSH
18295: LD_INT 22
18297: PUSH
18298: LD_INT 3
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 22
18307: PUSH
18308: LD_INT 6
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 21
18322: PUSH
18323: LD_INT 1
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PPUSH
18334: CALL_OW 69
18338: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18339: LD_INT 35
18341: PPUSH
18342: CALL_OW 67
// p := p + 0 0$1 ;
18346: LD_ADDR_VAR 0 3
18350: PUSH
18351: LD_VAR 0 3
18355: PUSH
18356: LD_INT 35
18358: PLUS
18359: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18360: LD_VAR 0 2
18364: PPUSH
18365: LD_INT 5
18367: PPUSH
18368: CALL_OW 113
// for i in tmp do
18372: LD_ADDR_VAR 0 1
18376: PUSH
18377: LD_VAR 0 2
18381: PUSH
18382: FOR_IN
18383: IFFALSE 18410
// if IsInArea ( tmp , RussianEscape ) then
18385: LD_VAR 0 2
18389: PPUSH
18390: LD_INT 5
18392: PPUSH
18393: CALL_OW 308
18397: IFFALSE 18408
// RemoveUnit ( i ) ;
18399: LD_VAR 0 1
18403: PPUSH
18404: CALL_OW 64
18408: GO 18382
18410: POP
18411: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18412: LD_INT 23
18414: PUSH
18415: LD_INT 3
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 21
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 24
18434: PUSH
18435: LD_INT 250
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: LIST
18446: PPUSH
18447: CALL_OW 69
18451: PUSH
18452: LD_INT 0
18454: EQUAL
18455: PUSH
18456: LD_VAR 0 3
18460: PUSH
18461: LD_INT 245
18463: GREATEREQUAL
18464: OR
18465: IFFALSE 18339
// FinishMission ;
18467: CALL 18474 0 0
// end ;
18471: PPOPN 3
18473: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18474: LD_INT 0
18476: PPUSH
18477: PPUSH
18478: PPUSH
18479: PPUSH
18480: PPUSH
// if not vehicleProduceCounter then
18481: LD_EXP 42
18485: NOT
18486: IFFALSE 18495
// SetAchievement ( ACH_INFANTRY ) ;
18488: LD_STRING ACH_INFANTRY
18490: PPUSH
18491: CALL_OW 543
// if tick <= 20 20$00 then
18495: LD_OWVAR 1
18499: PUSH
18500: LD_INT 42000
18502: LESSEQUAL
18503: IFFALSE 18519
// begin wait ( 3 ) ;
18505: LD_INT 3
18507: PPUSH
18508: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18512: LD_STRING ACH_ASPEED_4
18514: PPUSH
18515: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18519: LD_INT 22
18521: PPUSH
18522: CALL 19163 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18526: LD_INT 69
18528: PPUSH
18529: LD_INT 1
18531: PPUSH
18532: CALL_OW 321
18536: PPUSH
18537: LD_STRING GatlingInGamma
18539: PPUSH
18540: CALL_OW 39
// m1 := false ;
18544: LD_ADDR_VAR 0 3
18548: PUSH
18549: LD_INT 0
18551: ST_TO_ADDR
// m2 := false ;
18552: LD_ADDR_VAR 0 4
18556: PUSH
18557: LD_INT 0
18559: ST_TO_ADDR
// m3 := false ;
18560: LD_ADDR_VAR 0 5
18564: PUSH
18565: LD_INT 0
18567: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18568: LD_EXP 34
18572: PUSH
18573: LD_INT 1
18575: EQUAL
18576: PUSH
18577: LD_EXP 35
18581: PUSH
18582: LD_INT 1
18584: EQUAL
18585: AND
18586: IFFALSE 18608
// begin AddMedal ( oil , 1 ) ;
18588: LD_STRING oil
18590: PPUSH
18591: LD_INT 1
18593: PPUSH
18594: CALL_OW 101
// m1 := true ;
18598: LD_ADDR_VAR 0 3
18602: PUSH
18603: LD_INT 1
18605: ST_TO_ADDR
// end else
18606: GO 18701
// begin if buildOil = 1 and buildPower = 0 then
18608: LD_EXP 34
18612: PUSH
18613: LD_INT 1
18615: EQUAL
18616: PUSH
18617: LD_EXP 35
18621: PUSH
18622: LD_INT 0
18624: EQUAL
18625: AND
18626: IFFALSE 18639
// AddMedal ( oil , - 1 ) ;
18628: LD_STRING oil
18630: PPUSH
18631: LD_INT 1
18633: NEG
18634: PPUSH
18635: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18639: LD_EXP 34
18643: PUSH
18644: LD_INT 0
18646: EQUAL
18647: PUSH
18648: LD_EXP 35
18652: PUSH
18653: LD_INT 1
18655: EQUAL
18656: AND
18657: IFFALSE 18670
// AddMedal ( oil , - 2 ) ;
18659: LD_STRING oil
18661: PPUSH
18662: LD_INT 2
18664: NEG
18665: PPUSH
18666: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18670: LD_EXP 34
18674: PUSH
18675: LD_INT 0
18677: EQUAL
18678: PUSH
18679: LD_EXP 35
18683: PUSH
18684: LD_INT 0
18686: EQUAL
18687: AND
18688: IFFALSE 18701
// AddMedal ( oil , - 3 ) ;
18690: LD_STRING oil
18692: PPUSH
18693: LD_INT 3
18695: NEG
18696: PPUSH
18697: CALL_OW 101
// end ; if lostCounter > 3 then
18701: LD_EXP 38
18705: PUSH
18706: LD_INT 3
18708: GREATER
18709: IFFALSE 18724
// AddMedal ( deaths , - 1 ) else
18711: LD_STRING deaths
18713: PPUSH
18714: LD_INT 1
18716: NEG
18717: PPUSH
18718: CALL_OW 101
18722: GO 18742
// begin AddMedal ( deaths , 1 ) ;
18724: LD_STRING deaths
18726: PPUSH
18727: LD_INT 1
18729: PPUSH
18730: CALL_OW 101
// m2 := true ;
18734: LD_ADDR_VAR 0 4
18738: PUSH
18739: LD_INT 1
18741: ST_TO_ADDR
// end ; if honor = 1 then
18742: LD_EXP 39
18746: PUSH
18747: LD_INT 1
18749: EQUAL
18750: IFFALSE 18772
// begin AddMedal ( honour , 1 ) ;
18752: LD_STRING honour
18754: PPUSH
18755: LD_INT 1
18757: PPUSH
18758: CALL_OW 101
// m3 := true ;
18762: LD_ADDR_VAR 0 5
18766: PUSH
18767: LD_INT 1
18769: ST_TO_ADDR
// end else
18770: GO 18783
// AddMedal ( honour , - 1 ) ;
18772: LD_STRING honour
18774: PPUSH
18775: LD_INT 1
18777: NEG
18778: PPUSH
18779: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18783: LD_VAR 0 3
18787: PUSH
18788: LD_VAR 0 4
18792: AND
18793: PUSH
18794: LD_VAR 0 5
18798: AND
18799: PUSH
18800: LD_OWVAR 67
18804: PUSH
18805: LD_INT 3
18807: GREATEREQUAL
18808: AND
18809: IFFALSE 18821
// SetAchievementEX ( ACH_AMER , 4 ) ;
18811: LD_STRING ACH_AMER
18813: PPUSH
18814: LD_INT 4
18816: PPUSH
18817: CALL_OW 564
// GiveMedals ( Main ) ;
18821: LD_STRING Main
18823: PPUSH
18824: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18828: LD_INT 22
18830: PUSH
18831: LD_INT 1
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 23
18840: PUSH
18841: LD_INT 1
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 21
18850: PUSH
18851: LD_INT 1
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: LIST
18862: PPUSH
18863: CALL_OW 69
18867: PPUSH
18868: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18872: LD_EXP 1
18876: PPUSH
18877: LD_EXP 48
18881: PUSH
18882: LD_STRING JMM
18884: STR
18885: PPUSH
18886: CALL_OW 38
// if IsOK ( Bobby ) then
18890: LD_EXP 2
18894: PPUSH
18895: CALL_OW 302
18899: IFFALSE 18919
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18901: LD_EXP 2
18905: PPUSH
18906: LD_EXP 48
18910: PUSH
18911: LD_STRING Bobby
18913: STR
18914: PPUSH
18915: CALL_OW 38
// if IsOK ( Cyrus ) then
18919: LD_EXP 3
18923: PPUSH
18924: CALL_OW 302
18928: IFFALSE 18948
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18930: LD_EXP 3
18934: PPUSH
18935: LD_EXP 48
18939: PUSH
18940: LD_STRING Cyrus
18942: STR
18943: PPUSH
18944: CALL_OW 38
// if IsOK ( Lisa ) then
18948: LD_EXP 4
18952: PPUSH
18953: CALL_OW 302
18957: IFFALSE 18977
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18959: LD_EXP 4
18963: PPUSH
18964: LD_EXP 48
18968: PUSH
18969: LD_STRING Lisa
18971: STR
18972: PPUSH
18973: CALL_OW 38
// if IsOK ( Brown ) then
18977: LD_EXP 7
18981: PPUSH
18982: CALL_OW 302
18986: IFFALSE 19006
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18988: LD_EXP 7
18992: PPUSH
18993: LD_EXP 48
18997: PUSH
18998: LD_STRING Brown
19000: STR
19001: PPUSH
19002: CALL_OW 38
// if not IsDead ( Donaldson ) then
19006: LD_EXP 13
19010: PPUSH
19011: CALL_OW 301
19015: NOT
19016: IFFALSE 19036
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19018: LD_EXP 13
19022: PPUSH
19023: LD_EXP 48
19027: PUSH
19028: LD_STRING Donaldson
19030: STR
19031: PPUSH
19032: CALL_OW 38
// if not IsDead ( Frank ) then
19036: LD_EXP 5
19040: PPUSH
19041: CALL_OW 301
19045: NOT
19046: IFFALSE 19066
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19048: LD_EXP 5
19052: PPUSH
19053: LD_EXP 48
19057: PUSH
19058: LD_STRING Frank
19060: STR
19061: PPUSH
19062: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19066: LD_INT 50
19068: PUSH
19069: EMPTY
19070: LIST
19071: PUSH
19072: LD_INT 22
19074: PUSH
19075: LD_INT 1
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 21
19084: PUSH
19085: LD_INT 1
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: LIST
19096: PPUSH
19097: CALL_OW 69
19101: PUSH
19102: LD_EXP 1
19106: PUSH
19107: LD_EXP 2
19111: PUSH
19112: LD_EXP 3
19116: PUSH
19117: LD_EXP 4
19121: PUSH
19122: LD_EXP 7
19126: PUSH
19127: LD_EXP 13
19131: PUSH
19132: LD_EXP 5
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: DIFF
19146: PPUSH
19147: LD_STRING 04_other_survivors
19149: PPUSH
19150: CALL_OW 38
// YouWin ;
19154: CALL_OW 103
// end ;
19158: LD_VAR 0 1
19162: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19163: LD_INT 0
19165: PPUSH
19166: PPUSH
19167: PPUSH
19168: PPUSH
// gammaBase = [ ] ;
19169: LD_ADDR_VAR 0 4
19173: PUSH
19174: EMPTY
19175: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19176: LD_ADDR_VAR 0 5
19180: PUSH
19181: LD_VAR 0 1
19185: PPUSH
19186: LD_INT 22
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 21
19198: PUSH
19199: LD_INT 3
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PPUSH
19210: CALL_OW 70
19214: ST_TO_ADDR
// for i in buildings do
19215: LD_ADDR_VAR 0 3
19219: PUSH
19220: LD_VAR 0 5
19224: PUSH
19225: FOR_IN
19226: IFFALSE 19563
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19228: LD_VAR 0 3
19232: PPUSH
19233: CALL_OW 266
19237: PUSH
19238: LD_INT 6
19240: PUSH
19241: LD_INT 7
19243: PUSH
19244: LD_INT 8
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: LIST
19251: IN
19252: IFFALSE 19366
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19254: LD_ADDR_VAR 0 4
19258: PUSH
19259: LD_VAR 0 4
19263: PUSH
19264: LD_VAR 0 3
19268: PPUSH
19269: CALL_OW 266
19273: PUSH
19274: LD_VAR 0 3
19278: PPUSH
19279: CALL_OW 250
19283: PUSH
19284: LD_VAR 0 3
19288: PPUSH
19289: CALL_OW 251
19293: PUSH
19294: LD_VAR 0 3
19298: PPUSH
19299: CALL_OW 254
19303: PUSH
19304: LD_VAR 0 3
19308: PPUSH
19309: CALL_OW 267
19313: PUSH
19314: LD_VAR 0 3
19318: PPUSH
19319: CALL_OW 248
19323: PUSH
19324: LD_VAR 0 3
19328: PPUSH
19329: LD_INT 1
19331: PPUSH
19332: CALL_OW 268
19336: PUSH
19337: LD_VAR 0 3
19341: PPUSH
19342: LD_INT 2
19344: PPUSH
19345: CALL_OW 268
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: PUSH
19360: EMPTY
19361: LIST
19362: ADD
19363: ST_TO_ADDR
19364: GO 19561
// if GetBType ( i ) in [ b_bunker ] then
19366: LD_VAR 0 3
19370: PPUSH
19371: CALL_OW 266
19375: PUSH
19376: LD_INT 32
19378: PUSH
19379: EMPTY
19380: LIST
19381: IN
19382: IFFALSE 19479
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19384: LD_ADDR_VAR 0 4
19388: PUSH
19389: LD_VAR 0 4
19393: PUSH
19394: LD_VAR 0 3
19398: PPUSH
19399: CALL_OW 266
19403: PUSH
19404: LD_VAR 0 3
19408: PPUSH
19409: CALL_OW 250
19413: PUSH
19414: LD_VAR 0 3
19418: PPUSH
19419: CALL_OW 251
19423: PUSH
19424: LD_VAR 0 3
19428: PPUSH
19429: CALL_OW 254
19433: PUSH
19434: LD_VAR 0 3
19438: PPUSH
19439: CALL_OW 267
19443: PUSH
19444: LD_VAR 0 3
19448: PPUSH
19449: CALL_OW 248
19453: PUSH
19454: LD_VAR 0 3
19458: PPUSH
19459: CALL_OW 269
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: PUSH
19473: EMPTY
19474: LIST
19475: ADD
19476: ST_TO_ADDR
19477: GO 19561
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19479: LD_ADDR_VAR 0 4
19483: PUSH
19484: LD_VAR 0 4
19488: PUSH
19489: LD_VAR 0 3
19493: PPUSH
19494: CALL_OW 266
19498: PUSH
19499: LD_VAR 0 3
19503: PPUSH
19504: CALL_OW 250
19508: PUSH
19509: LD_VAR 0 3
19513: PPUSH
19514: CALL_OW 251
19518: PUSH
19519: LD_VAR 0 3
19523: PPUSH
19524: CALL_OW 254
19528: PUSH
19529: LD_VAR 0 3
19533: PPUSH
19534: CALL_OW 267
19538: PUSH
19539: LD_VAR 0 3
19543: PPUSH
19544: CALL_OW 248
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: PUSH
19557: EMPTY
19558: LIST
19559: ADD
19560: ST_TO_ADDR
// end ;
19561: GO 19225
19563: POP
19564: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19565: LD_VAR 0 4
19569: PPUSH
19570: LD_STRING GammaBase
19572: PPUSH
19573: CALL_OW 39
// end ; end_of_file
19577: LD_VAR 0 2
19581: RET
// every 1 1$15 do
19582: GO 19584
19584: DISABLE
// begin if supply <= 13 and supply > 7 then
19585: LD_EXP 36
19589: PUSH
19590: LD_INT 13
19592: LESSEQUAL
19593: PUSH
19594: LD_EXP 36
19598: PUSH
19599: LD_INT 7
19601: GREATER
19602: AND
19603: IFFALSE 19626
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19605: LD_INT 3
19607: PPUSH
19608: LD_INT 5
19610: PPUSH
19611: CALL_OW 12
19615: PPUSH
19616: LD_INT 18
19618: PPUSH
19619: LD_INT 1
19621: PPUSH
19622: CALL_OW 55
// if supply <= 7 and supply > 4 then
19626: LD_EXP 36
19630: PUSH
19631: LD_INT 7
19633: LESSEQUAL
19634: PUSH
19635: LD_EXP 36
19639: PUSH
19640: LD_INT 4
19642: GREATER
19643: AND
19644: IFFALSE 19667
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19646: LD_INT 3
19648: PPUSH
19649: LD_INT 5
19651: PPUSH
19652: CALL_OW 12
19656: PPUSH
19657: LD_INT 19
19659: PPUSH
19660: LD_INT 1
19662: PPUSH
19663: CALL_OW 55
// if supply <= 4 and supply > 0 then
19667: LD_EXP 36
19671: PUSH
19672: LD_INT 4
19674: LESSEQUAL
19675: PUSH
19676: LD_EXP 36
19680: PUSH
19681: LD_INT 0
19683: GREATER
19684: AND
19685: IFFALSE 19708
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19687: LD_INT 3
19689: PPUSH
19690: LD_INT 5
19692: PPUSH
19693: CALL_OW 12
19697: PPUSH
19698: LD_INT 20
19700: PPUSH
19701: LD_INT 1
19703: PPUSH
19704: CALL_OW 55
// if supply then
19708: LD_EXP 36
19712: IFFALSE 19729
// begin supply = supply - 1 ;
19714: LD_ADDR_EXP 36
19718: PUSH
19719: LD_EXP 36
19723: PUSH
19724: LD_INT 1
19726: MINUS
19727: ST_TO_ADDR
// enable ;
19728: ENABLE
// end ; end ; end_of_file
19729: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19730: LD_INT 0
19732: PPUSH
// ar_miner := 81 ;
19733: LD_ADDR_EXP 57
19737: PUSH
19738: LD_INT 81
19740: ST_TO_ADDR
// ar_crane := 88 ;
19741: LD_ADDR_EXP 56
19745: PUSH
19746: LD_INT 88
19748: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19749: LD_ADDR_EXP 51
19753: PUSH
19754: LD_INT 89
19756: ST_TO_ADDR
// us_hack := 99 ;
19757: LD_ADDR_EXP 52
19761: PUSH
19762: LD_INT 99
19764: ST_TO_ADDR
// us_artillery := 97 ;
19765: LD_ADDR_EXP 53
19769: PUSH
19770: LD_INT 97
19772: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19773: LD_ADDR_EXP 54
19777: PUSH
19778: LD_INT 91
19780: ST_TO_ADDR
// ar_mortar := 92 ;
19781: LD_ADDR_EXP 55
19785: PUSH
19786: LD_INT 92
19788: ST_TO_ADDR
// ru_flamethrower := 93 ;
19789: LD_ADDR_EXP 58
19793: PUSH
19794: LD_INT 93
19796: ST_TO_ADDR
// ru_radar := 98 ;
19797: LD_ADDR_EXP 50
19801: PUSH
19802: LD_INT 98
19804: ST_TO_ADDR
// tech_Artillery := 80 ;
19805: LD_ADDR_EXP 59
19809: PUSH
19810: LD_INT 80
19812: ST_TO_ADDR
// tech_RadMat := 81 ;
19813: LD_ADDR_EXP 60
19817: PUSH
19818: LD_INT 81
19820: ST_TO_ADDR
// tech_BasicTools := 82 ;
19821: LD_ADDR_EXP 61
19825: PUSH
19826: LD_INT 82
19828: ST_TO_ADDR
// tech_Cargo := 83 ;
19829: LD_ADDR_EXP 62
19833: PUSH
19834: LD_INT 83
19836: ST_TO_ADDR
// tech_Track := 84 ;
19837: LD_ADDR_EXP 63
19841: PUSH
19842: LD_INT 84
19844: ST_TO_ADDR
// tech_Crane := 85 ;
19845: LD_ADDR_EXP 64
19849: PUSH
19850: LD_INT 85
19852: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19853: LD_ADDR_EXP 65
19857: PUSH
19858: LD_INT 86
19860: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19861: LD_ADDR_EXP 66
19865: PUSH
19866: LD_INT 87
19868: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19869: LD_ADDR_EXP 67
19873: PUSH
19874: LD_INT 88
19876: ST_TO_ADDR
// class_mastodont := 31 ;
19877: LD_ADDR_EXP 68
19881: PUSH
19882: LD_INT 31
19884: ST_TO_ADDR
// class_horse := 21 ;
19885: LD_ADDR_EXP 69
19889: PUSH
19890: LD_INT 21
19892: ST_TO_ADDR
// end ;
19893: LD_VAR 0 1
19897: RET
// every 1 do
19898: GO 19900
19900: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19901: CALL 19730 0 0
19905: END
// every 0 0$1 do
19906: GO 19908
19908: DISABLE
// begin enable ;
19909: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19910: LD_STRING updateTimer(
19912: PUSH
19913: LD_OWVAR 1
19917: STR
19918: PUSH
19919: LD_STRING );
19921: STR
19922: PPUSH
19923: CALL_OW 559
// end ;
19927: END
// export function SOS_MapStart ( ) ; begin
19928: LD_INT 0
19930: PPUSH
// if streamModeActive then
19931: LD_EXP 70
19935: IFFALSE 19944
// DefineStreamItems ( true ) ;
19937: LD_INT 1
19939: PPUSH
19940: CALL 21594 0 1
// UpdateFactoryWaypoints ( ) ;
19944: CALL 35178 0 0
// end ;
19948: LD_VAR 0 1
19952: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19953: LD_INT 0
19955: PPUSH
// if p2 = 100 then
19956: LD_VAR 0 2
19960: PUSH
19961: LD_INT 100
19963: EQUAL
19964: IFFALSE 20967
// begin if not StreamModeActive then
19966: LD_EXP 70
19970: NOT
19971: IFFALSE 19981
// StreamModeActive := true ;
19973: LD_ADDR_EXP 70
19977: PUSH
19978: LD_INT 1
19980: ST_TO_ADDR
// if p3 = 0 then
19981: LD_VAR 0 3
19985: PUSH
19986: LD_INT 0
19988: EQUAL
19989: IFFALSE 19995
// InitStreamMode ;
19991: CALL 21130 0 0
// if p3 = 1 then
19995: LD_VAR 0 3
19999: PUSH
20000: LD_INT 1
20002: EQUAL
20003: IFFALSE 20013
// sRocket := true ;
20005: LD_ADDR_EXP 75
20009: PUSH
20010: LD_INT 1
20012: ST_TO_ADDR
// if p3 = 2 then
20013: LD_VAR 0 3
20017: PUSH
20018: LD_INT 2
20020: EQUAL
20021: IFFALSE 20031
// sSpeed := true ;
20023: LD_ADDR_EXP 74
20027: PUSH
20028: LD_INT 1
20030: ST_TO_ADDR
// if p3 = 3 then
20031: LD_VAR 0 3
20035: PUSH
20036: LD_INT 3
20038: EQUAL
20039: IFFALSE 20049
// sEngine := true ;
20041: LD_ADDR_EXP 76
20045: PUSH
20046: LD_INT 1
20048: ST_TO_ADDR
// if p3 = 4 then
20049: LD_VAR 0 3
20053: PUSH
20054: LD_INT 4
20056: EQUAL
20057: IFFALSE 20067
// sSpec := true ;
20059: LD_ADDR_EXP 73
20063: PUSH
20064: LD_INT 1
20066: ST_TO_ADDR
// if p3 = 5 then
20067: LD_VAR 0 3
20071: PUSH
20072: LD_INT 5
20074: EQUAL
20075: IFFALSE 20085
// sLevel := true ;
20077: LD_ADDR_EXP 77
20081: PUSH
20082: LD_INT 1
20084: ST_TO_ADDR
// if p3 = 6 then
20085: LD_VAR 0 3
20089: PUSH
20090: LD_INT 6
20092: EQUAL
20093: IFFALSE 20103
// sArmoury := true ;
20095: LD_ADDR_EXP 78
20099: PUSH
20100: LD_INT 1
20102: ST_TO_ADDR
// if p3 = 7 then
20103: LD_VAR 0 3
20107: PUSH
20108: LD_INT 7
20110: EQUAL
20111: IFFALSE 20121
// sRadar := true ;
20113: LD_ADDR_EXP 79
20117: PUSH
20118: LD_INT 1
20120: ST_TO_ADDR
// if p3 = 8 then
20121: LD_VAR 0 3
20125: PUSH
20126: LD_INT 8
20128: EQUAL
20129: IFFALSE 20139
// sBunker := true ;
20131: LD_ADDR_EXP 80
20135: PUSH
20136: LD_INT 1
20138: ST_TO_ADDR
// if p3 = 9 then
20139: LD_VAR 0 3
20143: PUSH
20144: LD_INT 9
20146: EQUAL
20147: IFFALSE 20157
// sHack := true ;
20149: LD_ADDR_EXP 81
20153: PUSH
20154: LD_INT 1
20156: ST_TO_ADDR
// if p3 = 10 then
20157: LD_VAR 0 3
20161: PUSH
20162: LD_INT 10
20164: EQUAL
20165: IFFALSE 20175
// sFire := true ;
20167: LD_ADDR_EXP 82
20171: PUSH
20172: LD_INT 1
20174: ST_TO_ADDR
// if p3 = 11 then
20175: LD_VAR 0 3
20179: PUSH
20180: LD_INT 11
20182: EQUAL
20183: IFFALSE 20193
// sRefresh := true ;
20185: LD_ADDR_EXP 83
20189: PUSH
20190: LD_INT 1
20192: ST_TO_ADDR
// if p3 = 12 then
20193: LD_VAR 0 3
20197: PUSH
20198: LD_INT 12
20200: EQUAL
20201: IFFALSE 20211
// sExp := true ;
20203: LD_ADDR_EXP 84
20207: PUSH
20208: LD_INT 1
20210: ST_TO_ADDR
// if p3 = 13 then
20211: LD_VAR 0 3
20215: PUSH
20216: LD_INT 13
20218: EQUAL
20219: IFFALSE 20229
// sDepot := true ;
20221: LD_ADDR_EXP 85
20225: PUSH
20226: LD_INT 1
20228: ST_TO_ADDR
// if p3 = 14 then
20229: LD_VAR 0 3
20233: PUSH
20234: LD_INT 14
20236: EQUAL
20237: IFFALSE 20247
// sFlag := true ;
20239: LD_ADDR_EXP 86
20243: PUSH
20244: LD_INT 1
20246: ST_TO_ADDR
// if p3 = 15 then
20247: LD_VAR 0 3
20251: PUSH
20252: LD_INT 15
20254: EQUAL
20255: IFFALSE 20265
// sKamikadze := true ;
20257: LD_ADDR_EXP 94
20261: PUSH
20262: LD_INT 1
20264: ST_TO_ADDR
// if p3 = 16 then
20265: LD_VAR 0 3
20269: PUSH
20270: LD_INT 16
20272: EQUAL
20273: IFFALSE 20283
// sTroll := true ;
20275: LD_ADDR_EXP 95
20279: PUSH
20280: LD_INT 1
20282: ST_TO_ADDR
// if p3 = 17 then
20283: LD_VAR 0 3
20287: PUSH
20288: LD_INT 17
20290: EQUAL
20291: IFFALSE 20301
// sSlow := true ;
20293: LD_ADDR_EXP 96
20297: PUSH
20298: LD_INT 1
20300: ST_TO_ADDR
// if p3 = 18 then
20301: LD_VAR 0 3
20305: PUSH
20306: LD_INT 18
20308: EQUAL
20309: IFFALSE 20319
// sLack := true ;
20311: LD_ADDR_EXP 97
20315: PUSH
20316: LD_INT 1
20318: ST_TO_ADDR
// if p3 = 19 then
20319: LD_VAR 0 3
20323: PUSH
20324: LD_INT 19
20326: EQUAL
20327: IFFALSE 20337
// sTank := true ;
20329: LD_ADDR_EXP 99
20333: PUSH
20334: LD_INT 1
20336: ST_TO_ADDR
// if p3 = 20 then
20337: LD_VAR 0 3
20341: PUSH
20342: LD_INT 20
20344: EQUAL
20345: IFFALSE 20355
// sRemote := true ;
20347: LD_ADDR_EXP 100
20351: PUSH
20352: LD_INT 1
20354: ST_TO_ADDR
// if p3 = 21 then
20355: LD_VAR 0 3
20359: PUSH
20360: LD_INT 21
20362: EQUAL
20363: IFFALSE 20373
// sPowell := true ;
20365: LD_ADDR_EXP 101
20369: PUSH
20370: LD_INT 1
20372: ST_TO_ADDR
// if p3 = 22 then
20373: LD_VAR 0 3
20377: PUSH
20378: LD_INT 22
20380: EQUAL
20381: IFFALSE 20391
// sTeleport := true ;
20383: LD_ADDR_EXP 104
20387: PUSH
20388: LD_INT 1
20390: ST_TO_ADDR
// if p3 = 23 then
20391: LD_VAR 0 3
20395: PUSH
20396: LD_INT 23
20398: EQUAL
20399: IFFALSE 20409
// sOilTower := true ;
20401: LD_ADDR_EXP 106
20405: PUSH
20406: LD_INT 1
20408: ST_TO_ADDR
// if p3 = 24 then
20409: LD_VAR 0 3
20413: PUSH
20414: LD_INT 24
20416: EQUAL
20417: IFFALSE 20427
// sShovel := true ;
20419: LD_ADDR_EXP 107
20423: PUSH
20424: LD_INT 1
20426: ST_TO_ADDR
// if p3 = 25 then
20427: LD_VAR 0 3
20431: PUSH
20432: LD_INT 25
20434: EQUAL
20435: IFFALSE 20445
// sSheik := true ;
20437: LD_ADDR_EXP 108
20441: PUSH
20442: LD_INT 1
20444: ST_TO_ADDR
// if p3 = 26 then
20445: LD_VAR 0 3
20449: PUSH
20450: LD_INT 26
20452: EQUAL
20453: IFFALSE 20463
// sEarthquake := true ;
20455: LD_ADDR_EXP 110
20459: PUSH
20460: LD_INT 1
20462: ST_TO_ADDR
// if p3 = 27 then
20463: LD_VAR 0 3
20467: PUSH
20468: LD_INT 27
20470: EQUAL
20471: IFFALSE 20481
// sAI := true ;
20473: LD_ADDR_EXP 111
20477: PUSH
20478: LD_INT 1
20480: ST_TO_ADDR
// if p3 = 28 then
20481: LD_VAR 0 3
20485: PUSH
20486: LD_INT 28
20488: EQUAL
20489: IFFALSE 20499
// sCargo := true ;
20491: LD_ADDR_EXP 114
20495: PUSH
20496: LD_INT 1
20498: ST_TO_ADDR
// if p3 = 29 then
20499: LD_VAR 0 3
20503: PUSH
20504: LD_INT 29
20506: EQUAL
20507: IFFALSE 20517
// sDLaser := true ;
20509: LD_ADDR_EXP 115
20513: PUSH
20514: LD_INT 1
20516: ST_TO_ADDR
// if p3 = 30 then
20517: LD_VAR 0 3
20521: PUSH
20522: LD_INT 30
20524: EQUAL
20525: IFFALSE 20535
// sExchange := true ;
20527: LD_ADDR_EXP 116
20531: PUSH
20532: LD_INT 1
20534: ST_TO_ADDR
// if p3 = 31 then
20535: LD_VAR 0 3
20539: PUSH
20540: LD_INT 31
20542: EQUAL
20543: IFFALSE 20553
// sFac := true ;
20545: LD_ADDR_EXP 117
20549: PUSH
20550: LD_INT 1
20552: ST_TO_ADDR
// if p3 = 32 then
20553: LD_VAR 0 3
20557: PUSH
20558: LD_INT 32
20560: EQUAL
20561: IFFALSE 20571
// sPower := true ;
20563: LD_ADDR_EXP 118
20567: PUSH
20568: LD_INT 1
20570: ST_TO_ADDR
// if p3 = 33 then
20571: LD_VAR 0 3
20575: PUSH
20576: LD_INT 33
20578: EQUAL
20579: IFFALSE 20589
// sRandom := true ;
20581: LD_ADDR_EXP 119
20585: PUSH
20586: LD_INT 1
20588: ST_TO_ADDR
// if p3 = 34 then
20589: LD_VAR 0 3
20593: PUSH
20594: LD_INT 34
20596: EQUAL
20597: IFFALSE 20607
// sShield := true ;
20599: LD_ADDR_EXP 120
20603: PUSH
20604: LD_INT 1
20606: ST_TO_ADDR
// if p3 = 35 then
20607: LD_VAR 0 3
20611: PUSH
20612: LD_INT 35
20614: EQUAL
20615: IFFALSE 20625
// sTime := true ;
20617: LD_ADDR_EXP 121
20621: PUSH
20622: LD_INT 1
20624: ST_TO_ADDR
// if p3 = 36 then
20625: LD_VAR 0 3
20629: PUSH
20630: LD_INT 36
20632: EQUAL
20633: IFFALSE 20643
// sTools := true ;
20635: LD_ADDR_EXP 122
20639: PUSH
20640: LD_INT 1
20642: ST_TO_ADDR
// if p3 = 101 then
20643: LD_VAR 0 3
20647: PUSH
20648: LD_INT 101
20650: EQUAL
20651: IFFALSE 20661
// sSold := true ;
20653: LD_ADDR_EXP 87
20657: PUSH
20658: LD_INT 1
20660: ST_TO_ADDR
// if p3 = 102 then
20661: LD_VAR 0 3
20665: PUSH
20666: LD_INT 102
20668: EQUAL
20669: IFFALSE 20679
// sDiff := true ;
20671: LD_ADDR_EXP 88
20675: PUSH
20676: LD_INT 1
20678: ST_TO_ADDR
// if p3 = 103 then
20679: LD_VAR 0 3
20683: PUSH
20684: LD_INT 103
20686: EQUAL
20687: IFFALSE 20697
// sFog := true ;
20689: LD_ADDR_EXP 91
20693: PUSH
20694: LD_INT 1
20696: ST_TO_ADDR
// if p3 = 104 then
20697: LD_VAR 0 3
20701: PUSH
20702: LD_INT 104
20704: EQUAL
20705: IFFALSE 20715
// sReset := true ;
20707: LD_ADDR_EXP 92
20711: PUSH
20712: LD_INT 1
20714: ST_TO_ADDR
// if p3 = 105 then
20715: LD_VAR 0 3
20719: PUSH
20720: LD_INT 105
20722: EQUAL
20723: IFFALSE 20733
// sSun := true ;
20725: LD_ADDR_EXP 93
20729: PUSH
20730: LD_INT 1
20732: ST_TO_ADDR
// if p3 = 106 then
20733: LD_VAR 0 3
20737: PUSH
20738: LD_INT 106
20740: EQUAL
20741: IFFALSE 20751
// sTiger := true ;
20743: LD_ADDR_EXP 89
20747: PUSH
20748: LD_INT 1
20750: ST_TO_ADDR
// if p3 = 107 then
20751: LD_VAR 0 3
20755: PUSH
20756: LD_INT 107
20758: EQUAL
20759: IFFALSE 20769
// sBomb := true ;
20761: LD_ADDR_EXP 90
20765: PUSH
20766: LD_INT 1
20768: ST_TO_ADDR
// if p3 = 108 then
20769: LD_VAR 0 3
20773: PUSH
20774: LD_INT 108
20776: EQUAL
20777: IFFALSE 20787
// sWound := true ;
20779: LD_ADDR_EXP 98
20783: PUSH
20784: LD_INT 1
20786: ST_TO_ADDR
// if p3 = 109 then
20787: LD_VAR 0 3
20791: PUSH
20792: LD_INT 109
20794: EQUAL
20795: IFFALSE 20805
// sBetray := true ;
20797: LD_ADDR_EXP 102
20801: PUSH
20802: LD_INT 1
20804: ST_TO_ADDR
// if p3 = 110 then
20805: LD_VAR 0 3
20809: PUSH
20810: LD_INT 110
20812: EQUAL
20813: IFFALSE 20823
// sContamin := true ;
20815: LD_ADDR_EXP 103
20819: PUSH
20820: LD_INT 1
20822: ST_TO_ADDR
// if p3 = 111 then
20823: LD_VAR 0 3
20827: PUSH
20828: LD_INT 111
20830: EQUAL
20831: IFFALSE 20841
// sOil := true ;
20833: LD_ADDR_EXP 105
20837: PUSH
20838: LD_INT 1
20840: ST_TO_ADDR
// if p3 = 112 then
20841: LD_VAR 0 3
20845: PUSH
20846: LD_INT 112
20848: EQUAL
20849: IFFALSE 20859
// sStu := true ;
20851: LD_ADDR_EXP 109
20855: PUSH
20856: LD_INT 1
20858: ST_TO_ADDR
// if p3 = 113 then
20859: LD_VAR 0 3
20863: PUSH
20864: LD_INT 113
20866: EQUAL
20867: IFFALSE 20877
// sBazooka := true ;
20869: LD_ADDR_EXP 112
20873: PUSH
20874: LD_INT 1
20876: ST_TO_ADDR
// if p3 = 114 then
20877: LD_VAR 0 3
20881: PUSH
20882: LD_INT 114
20884: EQUAL
20885: IFFALSE 20895
// sMortar := true ;
20887: LD_ADDR_EXP 113
20891: PUSH
20892: LD_INT 1
20894: ST_TO_ADDR
// if p3 = 115 then
20895: LD_VAR 0 3
20899: PUSH
20900: LD_INT 115
20902: EQUAL
20903: IFFALSE 20913
// sRanger := true ;
20905: LD_ADDR_EXP 123
20909: PUSH
20910: LD_INT 1
20912: ST_TO_ADDR
// if p3 = 116 then
20913: LD_VAR 0 3
20917: PUSH
20918: LD_INT 116
20920: EQUAL
20921: IFFALSE 20931
// sComputer := true ;
20923: LD_ADDR_EXP 124
20927: PUSH
20928: LD_INT 1
20930: ST_TO_ADDR
// if p3 = 117 then
20931: LD_VAR 0 3
20935: PUSH
20936: LD_INT 117
20938: EQUAL
20939: IFFALSE 20949
// s30 := true ;
20941: LD_ADDR_EXP 125
20945: PUSH
20946: LD_INT 1
20948: ST_TO_ADDR
// if p3 = 118 then
20949: LD_VAR 0 3
20953: PUSH
20954: LD_INT 118
20956: EQUAL
20957: IFFALSE 20967
// s60 := true ;
20959: LD_ADDR_EXP 126
20963: PUSH
20964: LD_INT 1
20966: ST_TO_ADDR
// end ; if p2 = 101 then
20967: LD_VAR 0 2
20971: PUSH
20972: LD_INT 101
20974: EQUAL
20975: IFFALSE 21103
// begin case p3 of 1 :
20977: LD_VAR 0 3
20981: PUSH
20982: LD_INT 1
20984: DOUBLE
20985: EQUAL
20986: IFTRUE 20990
20988: GO 20997
20990: POP
// hHackUnlimitedResources ; 2 :
20991: CALL 33201 0 0
20995: GO 21103
20997: LD_INT 2
20999: DOUBLE
21000: EQUAL
21001: IFTRUE 21005
21003: GO 21012
21005: POP
// hHackSetLevel10 ; 3 :
21006: CALL 33334 0 0
21010: GO 21103
21012: LD_INT 3
21014: DOUBLE
21015: EQUAL
21016: IFTRUE 21020
21018: GO 21027
21020: POP
// hHackSetLevel10YourUnits ; 4 :
21021: CALL 33419 0 0
21025: GO 21103
21027: LD_INT 4
21029: DOUBLE
21030: EQUAL
21031: IFTRUE 21035
21033: GO 21042
21035: POP
// hHackInvincible ; 5 :
21036: CALL 33867 0 0
21040: GO 21103
21042: LD_INT 5
21044: DOUBLE
21045: EQUAL
21046: IFTRUE 21050
21048: GO 21057
21050: POP
// hHackInvisible ; 6 :
21051: CALL 33978 0 0
21055: GO 21103
21057: LD_INT 6
21059: DOUBLE
21060: EQUAL
21061: IFTRUE 21065
21063: GO 21072
21065: POP
// hHackChangeYourSide ; 7 :
21066: CALL 34035 0 0
21070: GO 21103
21072: LD_INT 7
21074: DOUBLE
21075: EQUAL
21076: IFTRUE 21080
21078: GO 21087
21080: POP
// hHackChangeUnitSide ; 8 :
21081: CALL 34077 0 0
21085: GO 21103
21087: LD_INT 8
21089: DOUBLE
21090: EQUAL
21091: IFTRUE 21095
21093: GO 21102
21095: POP
// hHackFog ; end ;
21096: CALL 34178 0 0
21100: GO 21103
21102: POP
// end ; end ;
21103: LD_VAR 0 7
21107: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21108: GO 21110
21110: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21111: LD_STRING initStreamRollete();
21113: PPUSH
21114: CALL_OW 559
// InitStreamMode ;
21118: CALL 21130 0 0
// DefineStreamItems ( false ) ;
21122: LD_INT 0
21124: PPUSH
21125: CALL 21594 0 1
// end ;
21129: END
// function InitStreamMode ; begin
21130: LD_INT 0
21132: PPUSH
// streamModeActive := false ;
21133: LD_ADDR_EXP 70
21137: PUSH
21138: LD_INT 0
21140: ST_TO_ADDR
// normalCounter := 36 ;
21141: LD_ADDR_EXP 71
21145: PUSH
21146: LD_INT 36
21148: ST_TO_ADDR
// hardcoreCounter := 18 ;
21149: LD_ADDR_EXP 72
21153: PUSH
21154: LD_INT 18
21156: ST_TO_ADDR
// sRocket := false ;
21157: LD_ADDR_EXP 75
21161: PUSH
21162: LD_INT 0
21164: ST_TO_ADDR
// sSpeed := false ;
21165: LD_ADDR_EXP 74
21169: PUSH
21170: LD_INT 0
21172: ST_TO_ADDR
// sEngine := false ;
21173: LD_ADDR_EXP 76
21177: PUSH
21178: LD_INT 0
21180: ST_TO_ADDR
// sSpec := false ;
21181: LD_ADDR_EXP 73
21185: PUSH
21186: LD_INT 0
21188: ST_TO_ADDR
// sLevel := false ;
21189: LD_ADDR_EXP 77
21193: PUSH
21194: LD_INT 0
21196: ST_TO_ADDR
// sArmoury := false ;
21197: LD_ADDR_EXP 78
21201: PUSH
21202: LD_INT 0
21204: ST_TO_ADDR
// sRadar := false ;
21205: LD_ADDR_EXP 79
21209: PUSH
21210: LD_INT 0
21212: ST_TO_ADDR
// sBunker := false ;
21213: LD_ADDR_EXP 80
21217: PUSH
21218: LD_INT 0
21220: ST_TO_ADDR
// sHack := false ;
21221: LD_ADDR_EXP 81
21225: PUSH
21226: LD_INT 0
21228: ST_TO_ADDR
// sFire := false ;
21229: LD_ADDR_EXP 82
21233: PUSH
21234: LD_INT 0
21236: ST_TO_ADDR
// sRefresh := false ;
21237: LD_ADDR_EXP 83
21241: PUSH
21242: LD_INT 0
21244: ST_TO_ADDR
// sExp := false ;
21245: LD_ADDR_EXP 84
21249: PUSH
21250: LD_INT 0
21252: ST_TO_ADDR
// sDepot := false ;
21253: LD_ADDR_EXP 85
21257: PUSH
21258: LD_INT 0
21260: ST_TO_ADDR
// sFlag := false ;
21261: LD_ADDR_EXP 86
21265: PUSH
21266: LD_INT 0
21268: ST_TO_ADDR
// sKamikadze := false ;
21269: LD_ADDR_EXP 94
21273: PUSH
21274: LD_INT 0
21276: ST_TO_ADDR
// sTroll := false ;
21277: LD_ADDR_EXP 95
21281: PUSH
21282: LD_INT 0
21284: ST_TO_ADDR
// sSlow := false ;
21285: LD_ADDR_EXP 96
21289: PUSH
21290: LD_INT 0
21292: ST_TO_ADDR
// sLack := false ;
21293: LD_ADDR_EXP 97
21297: PUSH
21298: LD_INT 0
21300: ST_TO_ADDR
// sTank := false ;
21301: LD_ADDR_EXP 99
21305: PUSH
21306: LD_INT 0
21308: ST_TO_ADDR
// sRemote := false ;
21309: LD_ADDR_EXP 100
21313: PUSH
21314: LD_INT 0
21316: ST_TO_ADDR
// sPowell := false ;
21317: LD_ADDR_EXP 101
21321: PUSH
21322: LD_INT 0
21324: ST_TO_ADDR
// sTeleport := false ;
21325: LD_ADDR_EXP 104
21329: PUSH
21330: LD_INT 0
21332: ST_TO_ADDR
// sOilTower := false ;
21333: LD_ADDR_EXP 106
21337: PUSH
21338: LD_INT 0
21340: ST_TO_ADDR
// sShovel := false ;
21341: LD_ADDR_EXP 107
21345: PUSH
21346: LD_INT 0
21348: ST_TO_ADDR
// sSheik := false ;
21349: LD_ADDR_EXP 108
21353: PUSH
21354: LD_INT 0
21356: ST_TO_ADDR
// sEarthquake := false ;
21357: LD_ADDR_EXP 110
21361: PUSH
21362: LD_INT 0
21364: ST_TO_ADDR
// sAI := false ;
21365: LD_ADDR_EXP 111
21369: PUSH
21370: LD_INT 0
21372: ST_TO_ADDR
// sCargo := false ;
21373: LD_ADDR_EXP 114
21377: PUSH
21378: LD_INT 0
21380: ST_TO_ADDR
// sDLaser := false ;
21381: LD_ADDR_EXP 115
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// sExchange := false ;
21389: LD_ADDR_EXP 116
21393: PUSH
21394: LD_INT 0
21396: ST_TO_ADDR
// sFac := false ;
21397: LD_ADDR_EXP 117
21401: PUSH
21402: LD_INT 0
21404: ST_TO_ADDR
// sPower := false ;
21405: LD_ADDR_EXP 118
21409: PUSH
21410: LD_INT 0
21412: ST_TO_ADDR
// sRandom := false ;
21413: LD_ADDR_EXP 119
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// sShield := false ;
21421: LD_ADDR_EXP 120
21425: PUSH
21426: LD_INT 0
21428: ST_TO_ADDR
// sTime := false ;
21429: LD_ADDR_EXP 121
21433: PUSH
21434: LD_INT 0
21436: ST_TO_ADDR
// sTools := false ;
21437: LD_ADDR_EXP 122
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
// sSold := false ;
21445: LD_ADDR_EXP 87
21449: PUSH
21450: LD_INT 0
21452: ST_TO_ADDR
// sDiff := false ;
21453: LD_ADDR_EXP 88
21457: PUSH
21458: LD_INT 0
21460: ST_TO_ADDR
// sFog := false ;
21461: LD_ADDR_EXP 91
21465: PUSH
21466: LD_INT 0
21468: ST_TO_ADDR
// sReset := false ;
21469: LD_ADDR_EXP 92
21473: PUSH
21474: LD_INT 0
21476: ST_TO_ADDR
// sSun := false ;
21477: LD_ADDR_EXP 93
21481: PUSH
21482: LD_INT 0
21484: ST_TO_ADDR
// sTiger := false ;
21485: LD_ADDR_EXP 89
21489: PUSH
21490: LD_INT 0
21492: ST_TO_ADDR
// sBomb := false ;
21493: LD_ADDR_EXP 90
21497: PUSH
21498: LD_INT 0
21500: ST_TO_ADDR
// sWound := false ;
21501: LD_ADDR_EXP 98
21505: PUSH
21506: LD_INT 0
21508: ST_TO_ADDR
// sBetray := false ;
21509: LD_ADDR_EXP 102
21513: PUSH
21514: LD_INT 0
21516: ST_TO_ADDR
// sContamin := false ;
21517: LD_ADDR_EXP 103
21521: PUSH
21522: LD_INT 0
21524: ST_TO_ADDR
// sOil := false ;
21525: LD_ADDR_EXP 105
21529: PUSH
21530: LD_INT 0
21532: ST_TO_ADDR
// sStu := false ;
21533: LD_ADDR_EXP 109
21537: PUSH
21538: LD_INT 0
21540: ST_TO_ADDR
// sBazooka := false ;
21541: LD_ADDR_EXP 112
21545: PUSH
21546: LD_INT 0
21548: ST_TO_ADDR
// sMortar := false ;
21549: LD_ADDR_EXP 113
21553: PUSH
21554: LD_INT 0
21556: ST_TO_ADDR
// sRanger := false ;
21557: LD_ADDR_EXP 123
21561: PUSH
21562: LD_INT 0
21564: ST_TO_ADDR
// sComputer := false ;
21565: LD_ADDR_EXP 124
21569: PUSH
21570: LD_INT 0
21572: ST_TO_ADDR
// s30 := false ;
21573: LD_ADDR_EXP 125
21577: PUSH
21578: LD_INT 0
21580: ST_TO_ADDR
// s60 := false ;
21581: LD_ADDR_EXP 126
21585: PUSH
21586: LD_INT 0
21588: ST_TO_ADDR
// end ;
21589: LD_VAR 0 1
21593: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21594: LD_INT 0
21596: PPUSH
21597: PPUSH
21598: PPUSH
21599: PPUSH
21600: PPUSH
21601: PPUSH
21602: PPUSH
// result := [ ] ;
21603: LD_ADDR_VAR 0 2
21607: PUSH
21608: EMPTY
21609: ST_TO_ADDR
// if campaign_id = 1 then
21610: LD_OWVAR 69
21614: PUSH
21615: LD_INT 1
21617: EQUAL
21618: IFFALSE 24784
// begin case mission_number of 1 :
21620: LD_OWVAR 70
21624: PUSH
21625: LD_INT 1
21627: DOUBLE
21628: EQUAL
21629: IFTRUE 21633
21631: GO 21709
21633: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21634: LD_ADDR_VAR 0 2
21638: PUSH
21639: LD_INT 2
21641: PUSH
21642: LD_INT 4
21644: PUSH
21645: LD_INT 11
21647: PUSH
21648: LD_INT 12
21650: PUSH
21651: LD_INT 15
21653: PUSH
21654: LD_INT 16
21656: PUSH
21657: LD_INT 22
21659: PUSH
21660: LD_INT 23
21662: PUSH
21663: LD_INT 26
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 101
21679: PUSH
21680: LD_INT 102
21682: PUSH
21683: LD_INT 106
21685: PUSH
21686: LD_INT 116
21688: PUSH
21689: LD_INT 117
21691: PUSH
21692: LD_INT 118
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: ST_TO_ADDR
21707: GO 24782
21709: LD_INT 2
21711: DOUBLE
21712: EQUAL
21713: IFTRUE 21717
21715: GO 21801
21717: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21718: LD_ADDR_VAR 0 2
21722: PUSH
21723: LD_INT 2
21725: PUSH
21726: LD_INT 4
21728: PUSH
21729: LD_INT 11
21731: PUSH
21732: LD_INT 12
21734: PUSH
21735: LD_INT 15
21737: PUSH
21738: LD_INT 16
21740: PUSH
21741: LD_INT 22
21743: PUSH
21744: LD_INT 23
21746: PUSH
21747: LD_INT 26
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 101
21763: PUSH
21764: LD_INT 102
21766: PUSH
21767: LD_INT 105
21769: PUSH
21770: LD_INT 106
21772: PUSH
21773: LD_INT 108
21775: PUSH
21776: LD_INT 116
21778: PUSH
21779: LD_INT 117
21781: PUSH
21782: LD_INT 118
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: ST_TO_ADDR
21799: GO 24782
21801: LD_INT 3
21803: DOUBLE
21804: EQUAL
21805: IFTRUE 21809
21807: GO 21897
21809: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21810: LD_ADDR_VAR 0 2
21814: PUSH
21815: LD_INT 2
21817: PUSH
21818: LD_INT 4
21820: PUSH
21821: LD_INT 5
21823: PUSH
21824: LD_INT 11
21826: PUSH
21827: LD_INT 12
21829: PUSH
21830: LD_INT 15
21832: PUSH
21833: LD_INT 16
21835: PUSH
21836: LD_INT 22
21838: PUSH
21839: LD_INT 26
21841: PUSH
21842: LD_INT 36
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 101
21859: PUSH
21860: LD_INT 102
21862: PUSH
21863: LD_INT 105
21865: PUSH
21866: LD_INT 106
21868: PUSH
21869: LD_INT 108
21871: PUSH
21872: LD_INT 116
21874: PUSH
21875: LD_INT 117
21877: PUSH
21878: LD_INT 118
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: ST_TO_ADDR
21895: GO 24782
21897: LD_INT 4
21899: DOUBLE
21900: EQUAL
21901: IFTRUE 21905
21903: GO 22001
21905: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21906: LD_ADDR_VAR 0 2
21910: PUSH
21911: LD_INT 2
21913: PUSH
21914: LD_INT 4
21916: PUSH
21917: LD_INT 5
21919: PUSH
21920: LD_INT 8
21922: PUSH
21923: LD_INT 11
21925: PUSH
21926: LD_INT 12
21928: PUSH
21929: LD_INT 15
21931: PUSH
21932: LD_INT 16
21934: PUSH
21935: LD_INT 22
21937: PUSH
21938: LD_INT 23
21940: PUSH
21941: LD_INT 26
21943: PUSH
21944: LD_INT 36
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 101
21963: PUSH
21964: LD_INT 102
21966: PUSH
21967: LD_INT 105
21969: PUSH
21970: LD_INT 106
21972: PUSH
21973: LD_INT 108
21975: PUSH
21976: LD_INT 116
21978: PUSH
21979: LD_INT 117
21981: PUSH
21982: LD_INT 118
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: ST_TO_ADDR
21999: GO 24782
22001: LD_INT 5
22003: DOUBLE
22004: EQUAL
22005: IFTRUE 22009
22007: GO 22121
22009: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22010: LD_ADDR_VAR 0 2
22014: PUSH
22015: LD_INT 2
22017: PUSH
22018: LD_INT 4
22020: PUSH
22021: LD_INT 5
22023: PUSH
22024: LD_INT 6
22026: PUSH
22027: LD_INT 8
22029: PUSH
22030: LD_INT 11
22032: PUSH
22033: LD_INT 12
22035: PUSH
22036: LD_INT 15
22038: PUSH
22039: LD_INT 16
22041: PUSH
22042: LD_INT 22
22044: PUSH
22045: LD_INT 23
22047: PUSH
22048: LD_INT 25
22050: PUSH
22051: LD_INT 26
22053: PUSH
22054: LD_INT 36
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 101
22075: PUSH
22076: LD_INT 102
22078: PUSH
22079: LD_INT 105
22081: PUSH
22082: LD_INT 106
22084: PUSH
22085: LD_INT 108
22087: PUSH
22088: LD_INT 109
22090: PUSH
22091: LD_INT 112
22093: PUSH
22094: LD_INT 116
22096: PUSH
22097: LD_INT 117
22099: PUSH
22100: LD_INT 118
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: ST_TO_ADDR
22119: GO 24782
22121: LD_INT 6
22123: DOUBLE
22124: EQUAL
22125: IFTRUE 22129
22127: GO 22261
22129: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22130: LD_ADDR_VAR 0 2
22134: PUSH
22135: LD_INT 2
22137: PUSH
22138: LD_INT 4
22140: PUSH
22141: LD_INT 5
22143: PUSH
22144: LD_INT 6
22146: PUSH
22147: LD_INT 8
22149: PUSH
22150: LD_INT 11
22152: PUSH
22153: LD_INT 12
22155: PUSH
22156: LD_INT 15
22158: PUSH
22159: LD_INT 16
22161: PUSH
22162: LD_INT 20
22164: PUSH
22165: LD_INT 21
22167: PUSH
22168: LD_INT 22
22170: PUSH
22171: LD_INT 23
22173: PUSH
22174: LD_INT 25
22176: PUSH
22177: LD_INT 26
22179: PUSH
22180: LD_INT 30
22182: PUSH
22183: LD_INT 31
22185: PUSH
22186: LD_INT 32
22188: PUSH
22189: LD_INT 36
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 101
22215: PUSH
22216: LD_INT 102
22218: PUSH
22219: LD_INT 105
22221: PUSH
22222: LD_INT 106
22224: PUSH
22225: LD_INT 108
22227: PUSH
22228: LD_INT 109
22230: PUSH
22231: LD_INT 112
22233: PUSH
22234: LD_INT 116
22236: PUSH
22237: LD_INT 117
22239: PUSH
22240: LD_INT 118
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: ST_TO_ADDR
22259: GO 24782
22261: LD_INT 7
22263: DOUBLE
22264: EQUAL
22265: IFTRUE 22269
22267: GO 22381
22269: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22270: LD_ADDR_VAR 0 2
22274: PUSH
22275: LD_INT 2
22277: PUSH
22278: LD_INT 4
22280: PUSH
22281: LD_INT 5
22283: PUSH
22284: LD_INT 7
22286: PUSH
22287: LD_INT 11
22289: PUSH
22290: LD_INT 12
22292: PUSH
22293: LD_INT 15
22295: PUSH
22296: LD_INT 16
22298: PUSH
22299: LD_INT 20
22301: PUSH
22302: LD_INT 21
22304: PUSH
22305: LD_INT 22
22307: PUSH
22308: LD_INT 23
22310: PUSH
22311: LD_INT 25
22313: PUSH
22314: LD_INT 26
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 101
22335: PUSH
22336: LD_INT 102
22338: PUSH
22339: LD_INT 103
22341: PUSH
22342: LD_INT 105
22344: PUSH
22345: LD_INT 106
22347: PUSH
22348: LD_INT 108
22350: PUSH
22351: LD_INT 112
22353: PUSH
22354: LD_INT 116
22356: PUSH
22357: LD_INT 117
22359: PUSH
22360: LD_INT 118
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: ST_TO_ADDR
22379: GO 24782
22381: LD_INT 8
22383: DOUBLE
22384: EQUAL
22385: IFTRUE 22389
22387: GO 22529
22389: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22390: LD_ADDR_VAR 0 2
22394: PUSH
22395: LD_INT 2
22397: PUSH
22398: LD_INT 4
22400: PUSH
22401: LD_INT 5
22403: PUSH
22404: LD_INT 6
22406: PUSH
22407: LD_INT 7
22409: PUSH
22410: LD_INT 8
22412: PUSH
22413: LD_INT 11
22415: PUSH
22416: LD_INT 12
22418: PUSH
22419: LD_INT 15
22421: PUSH
22422: LD_INT 16
22424: PUSH
22425: LD_INT 20
22427: PUSH
22428: LD_INT 21
22430: PUSH
22431: LD_INT 22
22433: PUSH
22434: LD_INT 23
22436: PUSH
22437: LD_INT 25
22439: PUSH
22440: LD_INT 26
22442: PUSH
22443: LD_INT 30
22445: PUSH
22446: LD_INT 31
22448: PUSH
22449: LD_INT 32
22451: PUSH
22452: LD_INT 36
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 101
22479: PUSH
22480: LD_INT 102
22482: PUSH
22483: LD_INT 103
22485: PUSH
22486: LD_INT 105
22488: PUSH
22489: LD_INT 106
22491: PUSH
22492: LD_INT 108
22494: PUSH
22495: LD_INT 109
22497: PUSH
22498: LD_INT 112
22500: PUSH
22501: LD_INT 116
22503: PUSH
22504: LD_INT 117
22506: PUSH
22507: LD_INT 118
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: ST_TO_ADDR
22527: GO 24782
22529: LD_INT 9
22531: DOUBLE
22532: EQUAL
22533: IFTRUE 22537
22535: GO 22685
22537: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22538: LD_ADDR_VAR 0 2
22542: PUSH
22543: LD_INT 2
22545: PUSH
22546: LD_INT 4
22548: PUSH
22549: LD_INT 5
22551: PUSH
22552: LD_INT 6
22554: PUSH
22555: LD_INT 7
22557: PUSH
22558: LD_INT 8
22560: PUSH
22561: LD_INT 11
22563: PUSH
22564: LD_INT 12
22566: PUSH
22567: LD_INT 15
22569: PUSH
22570: LD_INT 16
22572: PUSH
22573: LD_INT 20
22575: PUSH
22576: LD_INT 21
22578: PUSH
22579: LD_INT 22
22581: PUSH
22582: LD_INT 23
22584: PUSH
22585: LD_INT 25
22587: PUSH
22588: LD_INT 26
22590: PUSH
22591: LD_INT 28
22593: PUSH
22594: LD_INT 30
22596: PUSH
22597: LD_INT 31
22599: PUSH
22600: LD_INT 32
22602: PUSH
22603: LD_INT 36
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 101
22631: PUSH
22632: LD_INT 102
22634: PUSH
22635: LD_INT 103
22637: PUSH
22638: LD_INT 105
22640: PUSH
22641: LD_INT 106
22643: PUSH
22644: LD_INT 108
22646: PUSH
22647: LD_INT 109
22649: PUSH
22650: LD_INT 112
22652: PUSH
22653: LD_INT 114
22655: PUSH
22656: LD_INT 116
22658: PUSH
22659: LD_INT 117
22661: PUSH
22662: LD_INT 118
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: ST_TO_ADDR
22683: GO 24782
22685: LD_INT 10
22687: DOUBLE
22688: EQUAL
22689: IFTRUE 22693
22691: GO 22889
22693: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22694: LD_ADDR_VAR 0 2
22698: PUSH
22699: LD_INT 2
22701: PUSH
22702: LD_INT 4
22704: PUSH
22705: LD_INT 5
22707: PUSH
22708: LD_INT 6
22710: PUSH
22711: LD_INT 7
22713: PUSH
22714: LD_INT 8
22716: PUSH
22717: LD_INT 9
22719: PUSH
22720: LD_INT 10
22722: PUSH
22723: LD_INT 11
22725: PUSH
22726: LD_INT 12
22728: PUSH
22729: LD_INT 13
22731: PUSH
22732: LD_INT 14
22734: PUSH
22735: LD_INT 15
22737: PUSH
22738: LD_INT 16
22740: PUSH
22741: LD_INT 17
22743: PUSH
22744: LD_INT 18
22746: PUSH
22747: LD_INT 19
22749: PUSH
22750: LD_INT 20
22752: PUSH
22753: LD_INT 21
22755: PUSH
22756: LD_INT 22
22758: PUSH
22759: LD_INT 23
22761: PUSH
22762: LD_INT 24
22764: PUSH
22765: LD_INT 25
22767: PUSH
22768: LD_INT 26
22770: PUSH
22771: LD_INT 28
22773: PUSH
22774: LD_INT 30
22776: PUSH
22777: LD_INT 31
22779: PUSH
22780: LD_INT 32
22782: PUSH
22783: LD_INT 36
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 101
22819: PUSH
22820: LD_INT 102
22822: PUSH
22823: LD_INT 103
22825: PUSH
22826: LD_INT 104
22828: PUSH
22829: LD_INT 105
22831: PUSH
22832: LD_INT 106
22834: PUSH
22835: LD_INT 107
22837: PUSH
22838: LD_INT 108
22840: PUSH
22841: LD_INT 109
22843: PUSH
22844: LD_INT 110
22846: PUSH
22847: LD_INT 111
22849: PUSH
22850: LD_INT 112
22852: PUSH
22853: LD_INT 114
22855: PUSH
22856: LD_INT 116
22858: PUSH
22859: LD_INT 117
22861: PUSH
22862: LD_INT 118
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: ST_TO_ADDR
22887: GO 24782
22889: LD_INT 11
22891: DOUBLE
22892: EQUAL
22893: IFTRUE 22897
22895: GO 23101
22897: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22898: LD_ADDR_VAR 0 2
22902: PUSH
22903: LD_INT 2
22905: PUSH
22906: LD_INT 3
22908: PUSH
22909: LD_INT 4
22911: PUSH
22912: LD_INT 5
22914: PUSH
22915: LD_INT 6
22917: PUSH
22918: LD_INT 7
22920: PUSH
22921: LD_INT 8
22923: PUSH
22924: LD_INT 9
22926: PUSH
22927: LD_INT 10
22929: PUSH
22930: LD_INT 11
22932: PUSH
22933: LD_INT 12
22935: PUSH
22936: LD_INT 13
22938: PUSH
22939: LD_INT 14
22941: PUSH
22942: LD_INT 15
22944: PUSH
22945: LD_INT 16
22947: PUSH
22948: LD_INT 17
22950: PUSH
22951: LD_INT 18
22953: PUSH
22954: LD_INT 19
22956: PUSH
22957: LD_INT 20
22959: PUSH
22960: LD_INT 21
22962: PUSH
22963: LD_INT 22
22965: PUSH
22966: LD_INT 23
22968: PUSH
22969: LD_INT 24
22971: PUSH
22972: LD_INT 25
22974: PUSH
22975: LD_INT 26
22977: PUSH
22978: LD_INT 28
22980: PUSH
22981: LD_INT 30
22983: PUSH
22984: LD_INT 31
22986: PUSH
22987: LD_INT 32
22989: PUSH
22990: LD_INT 34
22992: PUSH
22993: LD_INT 36
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 101
23031: PUSH
23032: LD_INT 102
23034: PUSH
23035: LD_INT 103
23037: PUSH
23038: LD_INT 104
23040: PUSH
23041: LD_INT 105
23043: PUSH
23044: LD_INT 106
23046: PUSH
23047: LD_INT 107
23049: PUSH
23050: LD_INT 108
23052: PUSH
23053: LD_INT 109
23055: PUSH
23056: LD_INT 110
23058: PUSH
23059: LD_INT 111
23061: PUSH
23062: LD_INT 112
23064: PUSH
23065: LD_INT 114
23067: PUSH
23068: LD_INT 116
23070: PUSH
23071: LD_INT 117
23073: PUSH
23074: LD_INT 118
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: ST_TO_ADDR
23099: GO 24782
23101: LD_INT 12
23103: DOUBLE
23104: EQUAL
23105: IFTRUE 23109
23107: GO 23329
23109: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23110: LD_ADDR_VAR 0 2
23114: PUSH
23115: LD_INT 1
23117: PUSH
23118: LD_INT 2
23120: PUSH
23121: LD_INT 3
23123: PUSH
23124: LD_INT 4
23126: PUSH
23127: LD_INT 5
23129: PUSH
23130: LD_INT 6
23132: PUSH
23133: LD_INT 7
23135: PUSH
23136: LD_INT 8
23138: PUSH
23139: LD_INT 9
23141: PUSH
23142: LD_INT 10
23144: PUSH
23145: LD_INT 11
23147: PUSH
23148: LD_INT 12
23150: PUSH
23151: LD_INT 13
23153: PUSH
23154: LD_INT 14
23156: PUSH
23157: LD_INT 15
23159: PUSH
23160: LD_INT 16
23162: PUSH
23163: LD_INT 17
23165: PUSH
23166: LD_INT 18
23168: PUSH
23169: LD_INT 19
23171: PUSH
23172: LD_INT 20
23174: PUSH
23175: LD_INT 21
23177: PUSH
23178: LD_INT 22
23180: PUSH
23181: LD_INT 23
23183: PUSH
23184: LD_INT 24
23186: PUSH
23187: LD_INT 25
23189: PUSH
23190: LD_INT 26
23192: PUSH
23193: LD_INT 27
23195: PUSH
23196: LD_INT 28
23198: PUSH
23199: LD_INT 30
23201: PUSH
23202: LD_INT 31
23204: PUSH
23205: LD_INT 32
23207: PUSH
23208: LD_INT 33
23210: PUSH
23211: LD_INT 34
23213: PUSH
23214: LD_INT 36
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 101
23255: PUSH
23256: LD_INT 102
23258: PUSH
23259: LD_INT 103
23261: PUSH
23262: LD_INT 104
23264: PUSH
23265: LD_INT 105
23267: PUSH
23268: LD_INT 106
23270: PUSH
23271: LD_INT 107
23273: PUSH
23274: LD_INT 108
23276: PUSH
23277: LD_INT 109
23279: PUSH
23280: LD_INT 110
23282: PUSH
23283: LD_INT 111
23285: PUSH
23286: LD_INT 112
23288: PUSH
23289: LD_INT 113
23291: PUSH
23292: LD_INT 114
23294: PUSH
23295: LD_INT 116
23297: PUSH
23298: LD_INT 117
23300: PUSH
23301: LD_INT 118
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: ST_TO_ADDR
23327: GO 24782
23329: LD_INT 13
23331: DOUBLE
23332: EQUAL
23333: IFTRUE 23337
23335: GO 23545
23337: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23338: LD_ADDR_VAR 0 2
23342: PUSH
23343: LD_INT 1
23345: PUSH
23346: LD_INT 2
23348: PUSH
23349: LD_INT 3
23351: PUSH
23352: LD_INT 4
23354: PUSH
23355: LD_INT 5
23357: PUSH
23358: LD_INT 8
23360: PUSH
23361: LD_INT 9
23363: PUSH
23364: LD_INT 10
23366: PUSH
23367: LD_INT 11
23369: PUSH
23370: LD_INT 12
23372: PUSH
23373: LD_INT 14
23375: PUSH
23376: LD_INT 15
23378: PUSH
23379: LD_INT 16
23381: PUSH
23382: LD_INT 17
23384: PUSH
23385: LD_INT 18
23387: PUSH
23388: LD_INT 19
23390: PUSH
23391: LD_INT 20
23393: PUSH
23394: LD_INT 21
23396: PUSH
23397: LD_INT 22
23399: PUSH
23400: LD_INT 23
23402: PUSH
23403: LD_INT 24
23405: PUSH
23406: LD_INT 25
23408: PUSH
23409: LD_INT 26
23411: PUSH
23412: LD_INT 27
23414: PUSH
23415: LD_INT 28
23417: PUSH
23418: LD_INT 30
23420: PUSH
23421: LD_INT 31
23423: PUSH
23424: LD_INT 32
23426: PUSH
23427: LD_INT 33
23429: PUSH
23430: LD_INT 34
23432: PUSH
23433: LD_INT 36
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 101
23471: PUSH
23472: LD_INT 102
23474: PUSH
23475: LD_INT 103
23477: PUSH
23478: LD_INT 104
23480: PUSH
23481: LD_INT 105
23483: PUSH
23484: LD_INT 106
23486: PUSH
23487: LD_INT 107
23489: PUSH
23490: LD_INT 108
23492: PUSH
23493: LD_INT 109
23495: PUSH
23496: LD_INT 110
23498: PUSH
23499: LD_INT 111
23501: PUSH
23502: LD_INT 112
23504: PUSH
23505: LD_INT 113
23507: PUSH
23508: LD_INT 114
23510: PUSH
23511: LD_INT 116
23513: PUSH
23514: LD_INT 117
23516: PUSH
23517: LD_INT 118
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: ST_TO_ADDR
23543: GO 24782
23545: LD_INT 14
23547: DOUBLE
23548: EQUAL
23549: IFTRUE 23553
23551: GO 23777
23553: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23554: LD_ADDR_VAR 0 2
23558: PUSH
23559: LD_INT 1
23561: PUSH
23562: LD_INT 2
23564: PUSH
23565: LD_INT 3
23567: PUSH
23568: LD_INT 4
23570: PUSH
23571: LD_INT 5
23573: PUSH
23574: LD_INT 6
23576: PUSH
23577: LD_INT 7
23579: PUSH
23580: LD_INT 8
23582: PUSH
23583: LD_INT 9
23585: PUSH
23586: LD_INT 10
23588: PUSH
23589: LD_INT 11
23591: PUSH
23592: LD_INT 12
23594: PUSH
23595: LD_INT 13
23597: PUSH
23598: LD_INT 14
23600: PUSH
23601: LD_INT 15
23603: PUSH
23604: LD_INT 16
23606: PUSH
23607: LD_INT 17
23609: PUSH
23610: LD_INT 18
23612: PUSH
23613: LD_INT 19
23615: PUSH
23616: LD_INT 20
23618: PUSH
23619: LD_INT 21
23621: PUSH
23622: LD_INT 22
23624: PUSH
23625: LD_INT 23
23627: PUSH
23628: LD_INT 24
23630: PUSH
23631: LD_INT 25
23633: PUSH
23634: LD_INT 26
23636: PUSH
23637: LD_INT 27
23639: PUSH
23640: LD_INT 28
23642: PUSH
23643: LD_INT 29
23645: PUSH
23646: LD_INT 30
23648: PUSH
23649: LD_INT 31
23651: PUSH
23652: LD_INT 32
23654: PUSH
23655: LD_INT 33
23657: PUSH
23658: LD_INT 34
23660: PUSH
23661: LD_INT 36
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 101
23703: PUSH
23704: LD_INT 102
23706: PUSH
23707: LD_INT 103
23709: PUSH
23710: LD_INT 104
23712: PUSH
23713: LD_INT 105
23715: PUSH
23716: LD_INT 106
23718: PUSH
23719: LD_INT 107
23721: PUSH
23722: LD_INT 108
23724: PUSH
23725: LD_INT 109
23727: PUSH
23728: LD_INT 110
23730: PUSH
23731: LD_INT 111
23733: PUSH
23734: LD_INT 112
23736: PUSH
23737: LD_INT 113
23739: PUSH
23740: LD_INT 114
23742: PUSH
23743: LD_INT 116
23745: PUSH
23746: LD_INT 117
23748: PUSH
23749: LD_INT 118
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: ST_TO_ADDR
23775: GO 24782
23777: LD_INT 15
23779: DOUBLE
23780: EQUAL
23781: IFTRUE 23785
23783: GO 24009
23785: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23786: LD_ADDR_VAR 0 2
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: LD_INT 2
23796: PUSH
23797: LD_INT 3
23799: PUSH
23800: LD_INT 4
23802: PUSH
23803: LD_INT 5
23805: PUSH
23806: LD_INT 6
23808: PUSH
23809: LD_INT 7
23811: PUSH
23812: LD_INT 8
23814: PUSH
23815: LD_INT 9
23817: PUSH
23818: LD_INT 10
23820: PUSH
23821: LD_INT 11
23823: PUSH
23824: LD_INT 12
23826: PUSH
23827: LD_INT 13
23829: PUSH
23830: LD_INT 14
23832: PUSH
23833: LD_INT 15
23835: PUSH
23836: LD_INT 16
23838: PUSH
23839: LD_INT 17
23841: PUSH
23842: LD_INT 18
23844: PUSH
23845: LD_INT 19
23847: PUSH
23848: LD_INT 20
23850: PUSH
23851: LD_INT 21
23853: PUSH
23854: LD_INT 22
23856: PUSH
23857: LD_INT 23
23859: PUSH
23860: LD_INT 24
23862: PUSH
23863: LD_INT 25
23865: PUSH
23866: LD_INT 26
23868: PUSH
23869: LD_INT 27
23871: PUSH
23872: LD_INT 28
23874: PUSH
23875: LD_INT 29
23877: PUSH
23878: LD_INT 30
23880: PUSH
23881: LD_INT 31
23883: PUSH
23884: LD_INT 32
23886: PUSH
23887: LD_INT 33
23889: PUSH
23890: LD_INT 34
23892: PUSH
23893: LD_INT 36
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 101
23935: PUSH
23936: LD_INT 102
23938: PUSH
23939: LD_INT 103
23941: PUSH
23942: LD_INT 104
23944: PUSH
23945: LD_INT 105
23947: PUSH
23948: LD_INT 106
23950: PUSH
23951: LD_INT 107
23953: PUSH
23954: LD_INT 108
23956: PUSH
23957: LD_INT 109
23959: PUSH
23960: LD_INT 110
23962: PUSH
23963: LD_INT 111
23965: PUSH
23966: LD_INT 112
23968: PUSH
23969: LD_INT 113
23971: PUSH
23972: LD_INT 114
23974: PUSH
23975: LD_INT 116
23977: PUSH
23978: LD_INT 117
23980: PUSH
23981: LD_INT 118
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: ST_TO_ADDR
24007: GO 24782
24009: LD_INT 16
24011: DOUBLE
24012: EQUAL
24013: IFTRUE 24017
24015: GO 24153
24017: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24018: LD_ADDR_VAR 0 2
24022: PUSH
24023: LD_INT 2
24025: PUSH
24026: LD_INT 4
24028: PUSH
24029: LD_INT 5
24031: PUSH
24032: LD_INT 7
24034: PUSH
24035: LD_INT 11
24037: PUSH
24038: LD_INT 12
24040: PUSH
24041: LD_INT 15
24043: PUSH
24044: LD_INT 16
24046: PUSH
24047: LD_INT 20
24049: PUSH
24050: LD_INT 21
24052: PUSH
24053: LD_INT 22
24055: PUSH
24056: LD_INT 23
24058: PUSH
24059: LD_INT 25
24061: PUSH
24062: LD_INT 26
24064: PUSH
24065: LD_INT 30
24067: PUSH
24068: LD_INT 31
24070: PUSH
24071: LD_INT 32
24073: PUSH
24074: LD_INT 33
24076: PUSH
24077: LD_INT 34
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 101
24103: PUSH
24104: LD_INT 102
24106: PUSH
24107: LD_INT 103
24109: PUSH
24110: LD_INT 106
24112: PUSH
24113: LD_INT 108
24115: PUSH
24116: LD_INT 112
24118: PUSH
24119: LD_INT 113
24121: PUSH
24122: LD_INT 114
24124: PUSH
24125: LD_INT 116
24127: PUSH
24128: LD_INT 117
24130: PUSH
24131: LD_INT 118
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: ST_TO_ADDR
24151: GO 24782
24153: LD_INT 17
24155: DOUBLE
24156: EQUAL
24157: IFTRUE 24161
24159: GO 24385
24161: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24162: LD_ADDR_VAR 0 2
24166: PUSH
24167: LD_INT 1
24169: PUSH
24170: LD_INT 2
24172: PUSH
24173: LD_INT 3
24175: PUSH
24176: LD_INT 4
24178: PUSH
24179: LD_INT 5
24181: PUSH
24182: LD_INT 6
24184: PUSH
24185: LD_INT 7
24187: PUSH
24188: LD_INT 8
24190: PUSH
24191: LD_INT 9
24193: PUSH
24194: LD_INT 10
24196: PUSH
24197: LD_INT 11
24199: PUSH
24200: LD_INT 12
24202: PUSH
24203: LD_INT 13
24205: PUSH
24206: LD_INT 14
24208: PUSH
24209: LD_INT 15
24211: PUSH
24212: LD_INT 16
24214: PUSH
24215: LD_INT 17
24217: PUSH
24218: LD_INT 18
24220: PUSH
24221: LD_INT 19
24223: PUSH
24224: LD_INT 20
24226: PUSH
24227: LD_INT 21
24229: PUSH
24230: LD_INT 22
24232: PUSH
24233: LD_INT 23
24235: PUSH
24236: LD_INT 24
24238: PUSH
24239: LD_INT 25
24241: PUSH
24242: LD_INT 26
24244: PUSH
24245: LD_INT 27
24247: PUSH
24248: LD_INT 28
24250: PUSH
24251: LD_INT 29
24253: PUSH
24254: LD_INT 30
24256: PUSH
24257: LD_INT 31
24259: PUSH
24260: LD_INT 32
24262: PUSH
24263: LD_INT 33
24265: PUSH
24266: LD_INT 34
24268: PUSH
24269: LD_INT 36
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 101
24311: PUSH
24312: LD_INT 102
24314: PUSH
24315: LD_INT 103
24317: PUSH
24318: LD_INT 104
24320: PUSH
24321: LD_INT 105
24323: PUSH
24324: LD_INT 106
24326: PUSH
24327: LD_INT 107
24329: PUSH
24330: LD_INT 108
24332: PUSH
24333: LD_INT 109
24335: PUSH
24336: LD_INT 110
24338: PUSH
24339: LD_INT 111
24341: PUSH
24342: LD_INT 112
24344: PUSH
24345: LD_INT 113
24347: PUSH
24348: LD_INT 114
24350: PUSH
24351: LD_INT 116
24353: PUSH
24354: LD_INT 117
24356: PUSH
24357: LD_INT 118
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: ST_TO_ADDR
24383: GO 24782
24385: LD_INT 18
24387: DOUBLE
24388: EQUAL
24389: IFTRUE 24393
24391: GO 24541
24393: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24394: LD_ADDR_VAR 0 2
24398: PUSH
24399: LD_INT 2
24401: PUSH
24402: LD_INT 4
24404: PUSH
24405: LD_INT 5
24407: PUSH
24408: LD_INT 7
24410: PUSH
24411: LD_INT 11
24413: PUSH
24414: LD_INT 12
24416: PUSH
24417: LD_INT 15
24419: PUSH
24420: LD_INT 16
24422: PUSH
24423: LD_INT 20
24425: PUSH
24426: LD_INT 21
24428: PUSH
24429: LD_INT 22
24431: PUSH
24432: LD_INT 23
24434: PUSH
24435: LD_INT 25
24437: PUSH
24438: LD_INT 26
24440: PUSH
24441: LD_INT 30
24443: PUSH
24444: LD_INT 31
24446: PUSH
24447: LD_INT 32
24449: PUSH
24450: LD_INT 33
24452: PUSH
24453: LD_INT 34
24455: PUSH
24456: LD_INT 35
24458: PUSH
24459: LD_INT 36
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 101
24487: PUSH
24488: LD_INT 102
24490: PUSH
24491: LD_INT 103
24493: PUSH
24494: LD_INT 106
24496: PUSH
24497: LD_INT 108
24499: PUSH
24500: LD_INT 112
24502: PUSH
24503: LD_INT 113
24505: PUSH
24506: LD_INT 114
24508: PUSH
24509: LD_INT 115
24511: PUSH
24512: LD_INT 116
24514: PUSH
24515: LD_INT 117
24517: PUSH
24518: LD_INT 118
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: ST_TO_ADDR
24539: GO 24782
24541: LD_INT 19
24543: DOUBLE
24544: EQUAL
24545: IFTRUE 24549
24547: GO 24781
24549: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24550: LD_ADDR_VAR 0 2
24554: PUSH
24555: LD_INT 1
24557: PUSH
24558: LD_INT 2
24560: PUSH
24561: LD_INT 3
24563: PUSH
24564: LD_INT 4
24566: PUSH
24567: LD_INT 5
24569: PUSH
24570: LD_INT 6
24572: PUSH
24573: LD_INT 7
24575: PUSH
24576: LD_INT 8
24578: PUSH
24579: LD_INT 9
24581: PUSH
24582: LD_INT 10
24584: PUSH
24585: LD_INT 11
24587: PUSH
24588: LD_INT 12
24590: PUSH
24591: LD_INT 13
24593: PUSH
24594: LD_INT 14
24596: PUSH
24597: LD_INT 15
24599: PUSH
24600: LD_INT 16
24602: PUSH
24603: LD_INT 17
24605: PUSH
24606: LD_INT 18
24608: PUSH
24609: LD_INT 19
24611: PUSH
24612: LD_INT 20
24614: PUSH
24615: LD_INT 21
24617: PUSH
24618: LD_INT 22
24620: PUSH
24621: LD_INT 23
24623: PUSH
24624: LD_INT 24
24626: PUSH
24627: LD_INT 25
24629: PUSH
24630: LD_INT 26
24632: PUSH
24633: LD_INT 27
24635: PUSH
24636: LD_INT 28
24638: PUSH
24639: LD_INT 29
24641: PUSH
24642: LD_INT 30
24644: PUSH
24645: LD_INT 31
24647: PUSH
24648: LD_INT 32
24650: PUSH
24651: LD_INT 33
24653: PUSH
24654: LD_INT 34
24656: PUSH
24657: LD_INT 35
24659: PUSH
24660: LD_INT 36
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 101
24703: PUSH
24704: LD_INT 102
24706: PUSH
24707: LD_INT 103
24709: PUSH
24710: LD_INT 104
24712: PUSH
24713: LD_INT 105
24715: PUSH
24716: LD_INT 106
24718: PUSH
24719: LD_INT 107
24721: PUSH
24722: LD_INT 108
24724: PUSH
24725: LD_INT 109
24727: PUSH
24728: LD_INT 110
24730: PUSH
24731: LD_INT 111
24733: PUSH
24734: LD_INT 112
24736: PUSH
24737: LD_INT 113
24739: PUSH
24740: LD_INT 114
24742: PUSH
24743: LD_INT 115
24745: PUSH
24746: LD_INT 116
24748: PUSH
24749: LD_INT 117
24751: PUSH
24752: LD_INT 118
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: ST_TO_ADDR
24779: GO 24782
24781: POP
// end else
24782: GO 25013
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24784: LD_ADDR_VAR 0 2
24788: PUSH
24789: LD_INT 1
24791: PUSH
24792: LD_INT 2
24794: PUSH
24795: LD_INT 3
24797: PUSH
24798: LD_INT 4
24800: PUSH
24801: LD_INT 5
24803: PUSH
24804: LD_INT 6
24806: PUSH
24807: LD_INT 7
24809: PUSH
24810: LD_INT 8
24812: PUSH
24813: LD_INT 9
24815: PUSH
24816: LD_INT 10
24818: PUSH
24819: LD_INT 11
24821: PUSH
24822: LD_INT 12
24824: PUSH
24825: LD_INT 13
24827: PUSH
24828: LD_INT 14
24830: PUSH
24831: LD_INT 15
24833: PUSH
24834: LD_INT 16
24836: PUSH
24837: LD_INT 17
24839: PUSH
24840: LD_INT 18
24842: PUSH
24843: LD_INT 19
24845: PUSH
24846: LD_INT 20
24848: PUSH
24849: LD_INT 21
24851: PUSH
24852: LD_INT 22
24854: PUSH
24855: LD_INT 23
24857: PUSH
24858: LD_INT 24
24860: PUSH
24861: LD_INT 25
24863: PUSH
24864: LD_INT 26
24866: PUSH
24867: LD_INT 27
24869: PUSH
24870: LD_INT 28
24872: PUSH
24873: LD_INT 29
24875: PUSH
24876: LD_INT 30
24878: PUSH
24879: LD_INT 31
24881: PUSH
24882: LD_INT 32
24884: PUSH
24885: LD_INT 33
24887: PUSH
24888: LD_INT 34
24890: PUSH
24891: LD_INT 35
24893: PUSH
24894: LD_INT 36
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 101
24937: PUSH
24938: LD_INT 102
24940: PUSH
24941: LD_INT 103
24943: PUSH
24944: LD_INT 104
24946: PUSH
24947: LD_INT 105
24949: PUSH
24950: LD_INT 106
24952: PUSH
24953: LD_INT 107
24955: PUSH
24956: LD_INT 108
24958: PUSH
24959: LD_INT 109
24961: PUSH
24962: LD_INT 110
24964: PUSH
24965: LD_INT 111
24967: PUSH
24968: LD_INT 112
24970: PUSH
24971: LD_INT 113
24973: PUSH
24974: LD_INT 114
24976: PUSH
24977: LD_INT 115
24979: PUSH
24980: LD_INT 116
24982: PUSH
24983: LD_INT 117
24985: PUSH
24986: LD_INT 118
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: ST_TO_ADDR
// if result then
25013: LD_VAR 0 2
25017: IFFALSE 25803
// begin normal :=  ;
25019: LD_ADDR_VAR 0 5
25023: PUSH
25024: LD_STRING 
25026: ST_TO_ADDR
// hardcore :=  ;
25027: LD_ADDR_VAR 0 6
25031: PUSH
25032: LD_STRING 
25034: ST_TO_ADDR
// active :=  ;
25035: LD_ADDR_VAR 0 7
25039: PUSH
25040: LD_STRING 
25042: ST_TO_ADDR
// for i = 1 to normalCounter do
25043: LD_ADDR_VAR 0 8
25047: PUSH
25048: DOUBLE
25049: LD_INT 1
25051: DEC
25052: ST_TO_ADDR
25053: LD_EXP 71
25057: PUSH
25058: FOR_TO
25059: IFFALSE 25160
// begin tmp := 0 ;
25061: LD_ADDR_VAR 0 3
25065: PUSH
25066: LD_STRING 0
25068: ST_TO_ADDR
// if result [ 1 ] then
25069: LD_VAR 0 2
25073: PUSH
25074: LD_INT 1
25076: ARRAY
25077: IFFALSE 25142
// if result [ 1 ] [ 1 ] = i then
25079: LD_VAR 0 2
25083: PUSH
25084: LD_INT 1
25086: ARRAY
25087: PUSH
25088: LD_INT 1
25090: ARRAY
25091: PUSH
25092: LD_VAR 0 8
25096: EQUAL
25097: IFFALSE 25142
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25099: LD_ADDR_VAR 0 2
25103: PUSH
25104: LD_VAR 0 2
25108: PPUSH
25109: LD_INT 1
25111: PPUSH
25112: LD_VAR 0 2
25116: PUSH
25117: LD_INT 1
25119: ARRAY
25120: PPUSH
25121: LD_INT 1
25123: PPUSH
25124: CALL_OW 3
25128: PPUSH
25129: CALL_OW 1
25133: ST_TO_ADDR
// tmp := 1 ;
25134: LD_ADDR_VAR 0 3
25138: PUSH
25139: LD_STRING 1
25141: ST_TO_ADDR
// end ; normal := normal & tmp ;
25142: LD_ADDR_VAR 0 5
25146: PUSH
25147: LD_VAR 0 5
25151: PUSH
25152: LD_VAR 0 3
25156: STR
25157: ST_TO_ADDR
// end ;
25158: GO 25058
25160: POP
25161: POP
// for i = 1 to hardcoreCounter do
25162: LD_ADDR_VAR 0 8
25166: PUSH
25167: DOUBLE
25168: LD_INT 1
25170: DEC
25171: ST_TO_ADDR
25172: LD_EXP 72
25176: PUSH
25177: FOR_TO
25178: IFFALSE 25283
// begin tmp := 0 ;
25180: LD_ADDR_VAR 0 3
25184: PUSH
25185: LD_STRING 0
25187: ST_TO_ADDR
// if result [ 2 ] then
25188: LD_VAR 0 2
25192: PUSH
25193: LD_INT 2
25195: ARRAY
25196: IFFALSE 25265
// if result [ 2 ] [ 1 ] = 100 + i then
25198: LD_VAR 0 2
25202: PUSH
25203: LD_INT 2
25205: ARRAY
25206: PUSH
25207: LD_INT 1
25209: ARRAY
25210: PUSH
25211: LD_INT 100
25213: PUSH
25214: LD_VAR 0 8
25218: PLUS
25219: EQUAL
25220: IFFALSE 25265
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25222: LD_ADDR_VAR 0 2
25226: PUSH
25227: LD_VAR 0 2
25231: PPUSH
25232: LD_INT 2
25234: PPUSH
25235: LD_VAR 0 2
25239: PUSH
25240: LD_INT 2
25242: ARRAY
25243: PPUSH
25244: LD_INT 1
25246: PPUSH
25247: CALL_OW 3
25251: PPUSH
25252: CALL_OW 1
25256: ST_TO_ADDR
// tmp := 1 ;
25257: LD_ADDR_VAR 0 3
25261: PUSH
25262: LD_STRING 1
25264: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25265: LD_ADDR_VAR 0 6
25269: PUSH
25270: LD_VAR 0 6
25274: PUSH
25275: LD_VAR 0 3
25279: STR
25280: ST_TO_ADDR
// end ;
25281: GO 25177
25283: POP
25284: POP
// if isGameLoad then
25285: LD_VAR 0 1
25289: IFFALSE 25764
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25291: LD_ADDR_VAR 0 4
25295: PUSH
25296: LD_EXP 75
25300: PUSH
25301: LD_EXP 74
25305: PUSH
25306: LD_EXP 76
25310: PUSH
25311: LD_EXP 73
25315: PUSH
25316: LD_EXP 77
25320: PUSH
25321: LD_EXP 78
25325: PUSH
25326: LD_EXP 79
25330: PUSH
25331: LD_EXP 80
25335: PUSH
25336: LD_EXP 81
25340: PUSH
25341: LD_EXP 82
25345: PUSH
25346: LD_EXP 83
25350: PUSH
25351: LD_EXP 84
25355: PUSH
25356: LD_EXP 85
25360: PUSH
25361: LD_EXP 86
25365: PUSH
25366: LD_EXP 94
25370: PUSH
25371: LD_EXP 95
25375: PUSH
25376: LD_EXP 96
25380: PUSH
25381: LD_EXP 97
25385: PUSH
25386: LD_EXP 99
25390: PUSH
25391: LD_EXP 100
25395: PUSH
25396: LD_EXP 101
25400: PUSH
25401: LD_EXP 104
25405: PUSH
25406: LD_EXP 106
25410: PUSH
25411: LD_EXP 107
25415: PUSH
25416: LD_EXP 108
25420: PUSH
25421: LD_EXP 110
25425: PUSH
25426: LD_EXP 111
25430: PUSH
25431: LD_EXP 114
25435: PUSH
25436: LD_EXP 115
25440: PUSH
25441: LD_EXP 116
25445: PUSH
25446: LD_EXP 117
25450: PUSH
25451: LD_EXP 118
25455: PUSH
25456: LD_EXP 119
25460: PUSH
25461: LD_EXP 120
25465: PUSH
25466: LD_EXP 121
25470: PUSH
25471: LD_EXP 122
25475: PUSH
25476: LD_EXP 87
25480: PUSH
25481: LD_EXP 88
25485: PUSH
25486: LD_EXP 91
25490: PUSH
25491: LD_EXP 92
25495: PUSH
25496: LD_EXP 93
25500: PUSH
25501: LD_EXP 89
25505: PUSH
25506: LD_EXP 90
25510: PUSH
25511: LD_EXP 98
25515: PUSH
25516: LD_EXP 102
25520: PUSH
25521: LD_EXP 103
25525: PUSH
25526: LD_EXP 105
25530: PUSH
25531: LD_EXP 109
25535: PUSH
25536: LD_EXP 112
25540: PUSH
25541: LD_EXP 113
25545: PUSH
25546: LD_EXP 123
25550: PUSH
25551: LD_EXP 124
25555: PUSH
25556: LD_EXP 125
25560: PUSH
25561: LD_EXP 126
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: ST_TO_ADDR
// tmp :=  ;
25622: LD_ADDR_VAR 0 3
25626: PUSH
25627: LD_STRING 
25629: ST_TO_ADDR
// for i = 1 to normalCounter do
25630: LD_ADDR_VAR 0 8
25634: PUSH
25635: DOUBLE
25636: LD_INT 1
25638: DEC
25639: ST_TO_ADDR
25640: LD_EXP 71
25644: PUSH
25645: FOR_TO
25646: IFFALSE 25682
// begin if flags [ i ] then
25648: LD_VAR 0 4
25652: PUSH
25653: LD_VAR 0 8
25657: ARRAY
25658: IFFALSE 25680
// tmp := tmp & i & ; ;
25660: LD_ADDR_VAR 0 3
25664: PUSH
25665: LD_VAR 0 3
25669: PUSH
25670: LD_VAR 0 8
25674: STR
25675: PUSH
25676: LD_STRING ;
25678: STR
25679: ST_TO_ADDR
// end ;
25680: GO 25645
25682: POP
25683: POP
// for i = 1 to hardcoreCounter do
25684: LD_ADDR_VAR 0 8
25688: PUSH
25689: DOUBLE
25690: LD_INT 1
25692: DEC
25693: ST_TO_ADDR
25694: LD_EXP 72
25698: PUSH
25699: FOR_TO
25700: IFFALSE 25746
// begin if flags [ normalCounter + i ] then
25702: LD_VAR 0 4
25706: PUSH
25707: LD_EXP 71
25711: PUSH
25712: LD_VAR 0 8
25716: PLUS
25717: ARRAY
25718: IFFALSE 25744
// tmp := tmp & ( 100 + i ) & ; ;
25720: LD_ADDR_VAR 0 3
25724: PUSH
25725: LD_VAR 0 3
25729: PUSH
25730: LD_INT 100
25732: PUSH
25733: LD_VAR 0 8
25737: PLUS
25738: STR
25739: PUSH
25740: LD_STRING ;
25742: STR
25743: ST_TO_ADDR
// end ;
25744: GO 25699
25746: POP
25747: POP
// if tmp then
25748: LD_VAR 0 3
25752: IFFALSE 25764
// active := tmp ;
25754: LD_ADDR_VAR 0 7
25758: PUSH
25759: LD_VAR 0 3
25763: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25764: LD_STRING getStreamItemsFromMission("
25766: PUSH
25767: LD_VAR 0 5
25771: STR
25772: PUSH
25773: LD_STRING ","
25775: STR
25776: PUSH
25777: LD_VAR 0 6
25781: STR
25782: PUSH
25783: LD_STRING ","
25785: STR
25786: PUSH
25787: LD_VAR 0 7
25791: STR
25792: PUSH
25793: LD_STRING ")
25795: STR
25796: PPUSH
25797: CALL_OW 559
// end else
25801: GO 25810
// ToLua ( getStreamItemsFromMission("","","") ) ;
25803: LD_STRING getStreamItemsFromMission("","","")
25805: PPUSH
25806: CALL_OW 559
// end ;
25810: LD_VAR 0 2
25814: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25815: LD_EXP 70
25819: PUSH
25820: LD_EXP 75
25824: AND
25825: IFFALSE 25949
25827: GO 25829
25829: DISABLE
25830: LD_INT 0
25832: PPUSH
25833: PPUSH
// begin enable ;
25834: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25835: LD_ADDR_VAR 0 2
25839: PUSH
25840: LD_INT 22
25842: PUSH
25843: LD_OWVAR 2
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 2
25854: PUSH
25855: LD_INT 34
25857: PUSH
25858: LD_INT 7
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 34
25867: PUSH
25868: LD_INT 45
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 34
25877: PUSH
25878: LD_INT 28
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 34
25887: PUSH
25888: LD_INT 47
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PPUSH
25906: CALL_OW 69
25910: ST_TO_ADDR
// if not tmp then
25911: LD_VAR 0 2
25915: NOT
25916: IFFALSE 25920
// exit ;
25918: GO 25949
// for i in tmp do
25920: LD_ADDR_VAR 0 1
25924: PUSH
25925: LD_VAR 0 2
25929: PUSH
25930: FOR_IN
25931: IFFALSE 25947
// begin SetLives ( i , 0 ) ;
25933: LD_VAR 0 1
25937: PPUSH
25938: LD_INT 0
25940: PPUSH
25941: CALL_OW 234
// end ;
25945: GO 25930
25947: POP
25948: POP
// end ;
25949: PPOPN 2
25951: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25952: LD_EXP 70
25956: PUSH
25957: LD_EXP 76
25961: AND
25962: IFFALSE 26046
25964: GO 25966
25966: DISABLE
25967: LD_INT 0
25969: PPUSH
25970: PPUSH
// begin enable ;
25971: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25972: LD_ADDR_VAR 0 2
25976: PUSH
25977: LD_INT 22
25979: PUSH
25980: LD_OWVAR 2
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 32
25991: PUSH
25992: LD_INT 3
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PPUSH
26003: CALL_OW 69
26007: ST_TO_ADDR
// if not tmp then
26008: LD_VAR 0 2
26012: NOT
26013: IFFALSE 26017
// exit ;
26015: GO 26046
// for i in tmp do
26017: LD_ADDR_VAR 0 1
26021: PUSH
26022: LD_VAR 0 2
26026: PUSH
26027: FOR_IN
26028: IFFALSE 26044
// begin SetLives ( i , 0 ) ;
26030: LD_VAR 0 1
26034: PPUSH
26035: LD_INT 0
26037: PPUSH
26038: CALL_OW 234
// end ;
26042: GO 26027
26044: POP
26045: POP
// end ;
26046: PPOPN 2
26048: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26049: LD_EXP 70
26053: PUSH
26054: LD_EXP 73
26058: AND
26059: IFFALSE 26152
26061: GO 26063
26063: DISABLE
26064: LD_INT 0
26066: PPUSH
// begin enable ;
26067: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26068: LD_ADDR_VAR 0 1
26072: PUSH
26073: LD_INT 22
26075: PUSH
26076: LD_OWVAR 2
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 2
26087: PUSH
26088: LD_INT 25
26090: PUSH
26091: LD_INT 5
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 25
26100: PUSH
26101: LD_INT 9
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 25
26110: PUSH
26111: LD_INT 8
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PPUSH
26128: CALL_OW 69
26132: PUSH
26133: FOR_IN
26134: IFFALSE 26150
// begin SetClass ( i , 1 ) ;
26136: LD_VAR 0 1
26140: PPUSH
26141: LD_INT 1
26143: PPUSH
26144: CALL_OW 336
// end ;
26148: GO 26133
26150: POP
26151: POP
// end ;
26152: PPOPN 1
26154: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26155: LD_EXP 70
26159: PUSH
26160: LD_EXP 74
26164: AND
26165: PUSH
26166: LD_OWVAR 65
26170: PUSH
26171: LD_INT 7
26173: LESS
26174: AND
26175: IFFALSE 26189
26177: GO 26179
26179: DISABLE
// begin enable ;
26180: ENABLE
// game_speed := 7 ;
26181: LD_ADDR_OWVAR 65
26185: PUSH
26186: LD_INT 7
26188: ST_TO_ADDR
// end ;
26189: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26190: LD_EXP 70
26194: PUSH
26195: LD_EXP 77
26199: AND
26200: IFFALSE 26402
26202: GO 26204
26204: DISABLE
26205: LD_INT 0
26207: PPUSH
26208: PPUSH
26209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26210: LD_ADDR_VAR 0 3
26214: PUSH
26215: LD_INT 81
26217: PUSH
26218: LD_OWVAR 2
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 21
26229: PUSH
26230: LD_INT 1
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PPUSH
26241: CALL_OW 69
26245: ST_TO_ADDR
// if not tmp then
26246: LD_VAR 0 3
26250: NOT
26251: IFFALSE 26255
// exit ;
26253: GO 26402
// if tmp > 5 then
26255: LD_VAR 0 3
26259: PUSH
26260: LD_INT 5
26262: GREATER
26263: IFFALSE 26275
// k := 5 else
26265: LD_ADDR_VAR 0 2
26269: PUSH
26270: LD_INT 5
26272: ST_TO_ADDR
26273: GO 26285
// k := tmp ;
26275: LD_ADDR_VAR 0 2
26279: PUSH
26280: LD_VAR 0 3
26284: ST_TO_ADDR
// for i := 1 to k do
26285: LD_ADDR_VAR 0 1
26289: PUSH
26290: DOUBLE
26291: LD_INT 1
26293: DEC
26294: ST_TO_ADDR
26295: LD_VAR 0 2
26299: PUSH
26300: FOR_TO
26301: IFFALSE 26400
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26303: LD_VAR 0 3
26307: PUSH
26308: LD_VAR 0 1
26312: ARRAY
26313: PPUSH
26314: LD_VAR 0 1
26318: PUSH
26319: LD_INT 4
26321: MOD
26322: PUSH
26323: LD_INT 1
26325: PLUS
26326: PPUSH
26327: CALL_OW 259
26331: PUSH
26332: LD_INT 10
26334: LESS
26335: IFFALSE 26398
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26337: LD_VAR 0 3
26341: PUSH
26342: LD_VAR 0 1
26346: ARRAY
26347: PPUSH
26348: LD_VAR 0 1
26352: PUSH
26353: LD_INT 4
26355: MOD
26356: PUSH
26357: LD_INT 1
26359: PLUS
26360: PPUSH
26361: LD_VAR 0 3
26365: PUSH
26366: LD_VAR 0 1
26370: ARRAY
26371: PPUSH
26372: LD_VAR 0 1
26376: PUSH
26377: LD_INT 4
26379: MOD
26380: PUSH
26381: LD_INT 1
26383: PLUS
26384: PPUSH
26385: CALL_OW 259
26389: PUSH
26390: LD_INT 1
26392: PLUS
26393: PPUSH
26394: CALL_OW 237
26398: GO 26300
26400: POP
26401: POP
// end ;
26402: PPOPN 3
26404: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26405: LD_EXP 70
26409: PUSH
26410: LD_EXP 78
26414: AND
26415: IFFALSE 26435
26417: GO 26419
26419: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26420: LD_INT 4
26422: PPUSH
26423: LD_OWVAR 2
26427: PPUSH
26428: LD_INT 0
26430: PPUSH
26431: CALL_OW 324
26435: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26436: LD_EXP 70
26440: PUSH
26441: LD_EXP 107
26445: AND
26446: IFFALSE 26466
26448: GO 26450
26450: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26451: LD_INT 19
26453: PPUSH
26454: LD_OWVAR 2
26458: PPUSH
26459: LD_INT 0
26461: PPUSH
26462: CALL_OW 324
26466: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26467: LD_EXP 70
26471: PUSH
26472: LD_EXP 79
26476: AND
26477: IFFALSE 26579
26479: GO 26481
26481: DISABLE
26482: LD_INT 0
26484: PPUSH
26485: PPUSH
// begin enable ;
26486: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26487: LD_ADDR_VAR 0 2
26491: PUSH
26492: LD_INT 22
26494: PUSH
26495: LD_OWVAR 2
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: LD_INT 34
26509: PUSH
26510: LD_INT 11
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 34
26519: PUSH
26520: LD_INT 30
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: LIST
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PPUSH
26536: CALL_OW 69
26540: ST_TO_ADDR
// if not tmp then
26541: LD_VAR 0 2
26545: NOT
26546: IFFALSE 26550
// exit ;
26548: GO 26579
// for i in tmp do
26550: LD_ADDR_VAR 0 1
26554: PUSH
26555: LD_VAR 0 2
26559: PUSH
26560: FOR_IN
26561: IFFALSE 26577
// begin SetLives ( i , 0 ) ;
26563: LD_VAR 0 1
26567: PPUSH
26568: LD_INT 0
26570: PPUSH
26571: CALL_OW 234
// end ;
26575: GO 26560
26577: POP
26578: POP
// end ;
26579: PPOPN 2
26581: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26582: LD_EXP 70
26586: PUSH
26587: LD_EXP 80
26591: AND
26592: IFFALSE 26612
26594: GO 26596
26596: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26597: LD_INT 32
26599: PPUSH
26600: LD_OWVAR 2
26604: PPUSH
26605: LD_INT 0
26607: PPUSH
26608: CALL_OW 324
26612: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26613: LD_EXP 70
26617: PUSH
26618: LD_EXP 81
26622: AND
26623: IFFALSE 26804
26625: GO 26627
26627: DISABLE
26628: LD_INT 0
26630: PPUSH
26631: PPUSH
26632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26633: LD_ADDR_VAR 0 2
26637: PUSH
26638: LD_INT 22
26640: PUSH
26641: LD_OWVAR 2
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 33
26652: PUSH
26653: LD_INT 3
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PPUSH
26664: CALL_OW 69
26668: ST_TO_ADDR
// if not tmp then
26669: LD_VAR 0 2
26673: NOT
26674: IFFALSE 26678
// exit ;
26676: GO 26804
// side := 0 ;
26678: LD_ADDR_VAR 0 3
26682: PUSH
26683: LD_INT 0
26685: ST_TO_ADDR
// for i := 1 to 8 do
26686: LD_ADDR_VAR 0 1
26690: PUSH
26691: DOUBLE
26692: LD_INT 1
26694: DEC
26695: ST_TO_ADDR
26696: LD_INT 8
26698: PUSH
26699: FOR_TO
26700: IFFALSE 26748
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26702: LD_OWVAR 2
26706: PUSH
26707: LD_VAR 0 1
26711: NONEQUAL
26712: PUSH
26713: LD_OWVAR 2
26717: PPUSH
26718: LD_VAR 0 1
26722: PPUSH
26723: CALL_OW 81
26727: PUSH
26728: LD_INT 2
26730: EQUAL
26731: AND
26732: IFFALSE 26746
// begin side := i ;
26734: LD_ADDR_VAR 0 3
26738: PUSH
26739: LD_VAR 0 1
26743: ST_TO_ADDR
// break ;
26744: GO 26748
// end ;
26746: GO 26699
26748: POP
26749: POP
// if not side then
26750: LD_VAR 0 3
26754: NOT
26755: IFFALSE 26759
// exit ;
26757: GO 26804
// for i := 1 to tmp do
26759: LD_ADDR_VAR 0 1
26763: PUSH
26764: DOUBLE
26765: LD_INT 1
26767: DEC
26768: ST_TO_ADDR
26769: LD_VAR 0 2
26773: PUSH
26774: FOR_TO
26775: IFFALSE 26802
// if Prob ( 60 ) then
26777: LD_INT 60
26779: PPUSH
26780: CALL_OW 13
26784: IFFALSE 26800
// SetSide ( i , side ) ;
26786: LD_VAR 0 1
26790: PPUSH
26791: LD_VAR 0 3
26795: PPUSH
26796: CALL_OW 235
26800: GO 26774
26802: POP
26803: POP
// end ;
26804: PPOPN 3
26806: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26807: LD_EXP 70
26811: PUSH
26812: LD_EXP 83
26816: AND
26817: IFFALSE 26936
26819: GO 26821
26821: DISABLE
26822: LD_INT 0
26824: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26825: LD_ADDR_VAR 0 1
26829: PUSH
26830: LD_INT 22
26832: PUSH
26833: LD_OWVAR 2
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 21
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 3
26854: PUSH
26855: LD_INT 23
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: LIST
26873: PPUSH
26874: CALL_OW 69
26878: PUSH
26879: FOR_IN
26880: IFFALSE 26934
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26882: LD_VAR 0 1
26886: PPUSH
26887: CALL_OW 257
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: LD_INT 2
26897: PUSH
26898: LD_INT 3
26900: PUSH
26901: LD_INT 4
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: IN
26910: IFFALSE 26932
// SetClass ( un , rand ( 1 , 4 ) ) ;
26912: LD_VAR 0 1
26916: PPUSH
26917: LD_INT 1
26919: PPUSH
26920: LD_INT 4
26922: PPUSH
26923: CALL_OW 12
26927: PPUSH
26928: CALL_OW 336
26932: GO 26879
26934: POP
26935: POP
// end ;
26936: PPOPN 1
26938: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26939: LD_EXP 70
26943: PUSH
26944: LD_EXP 82
26948: AND
26949: IFFALSE 27028
26951: GO 26953
26953: DISABLE
26954: LD_INT 0
26956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26957: LD_ADDR_VAR 0 1
26961: PUSH
26962: LD_INT 22
26964: PUSH
26965: LD_OWVAR 2
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 21
26976: PUSH
26977: LD_INT 3
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PPUSH
26988: CALL_OW 69
26992: ST_TO_ADDR
// if not tmp then
26993: LD_VAR 0 1
26997: NOT
26998: IFFALSE 27002
// exit ;
27000: GO 27028
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27002: LD_VAR 0 1
27006: PUSH
27007: LD_INT 1
27009: PPUSH
27010: LD_VAR 0 1
27014: PPUSH
27015: CALL_OW 12
27019: ARRAY
27020: PPUSH
27021: LD_INT 100
27023: PPUSH
27024: CALL_OW 234
// end ;
27028: PPOPN 1
27030: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27031: LD_EXP 70
27035: PUSH
27036: LD_EXP 84
27040: AND
27041: IFFALSE 27139
27043: GO 27045
27045: DISABLE
27046: LD_INT 0
27048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27049: LD_ADDR_VAR 0 1
27053: PUSH
27054: LD_INT 22
27056: PUSH
27057: LD_OWVAR 2
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 21
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PPUSH
27080: CALL_OW 69
27084: ST_TO_ADDR
// if not tmp then
27085: LD_VAR 0 1
27089: NOT
27090: IFFALSE 27094
// exit ;
27092: GO 27139
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27094: LD_VAR 0 1
27098: PUSH
27099: LD_INT 1
27101: PPUSH
27102: LD_VAR 0 1
27106: PPUSH
27107: CALL_OW 12
27111: ARRAY
27112: PPUSH
27113: LD_INT 1
27115: PPUSH
27116: LD_INT 4
27118: PPUSH
27119: CALL_OW 12
27123: PPUSH
27124: LD_INT 3000
27126: PPUSH
27127: LD_INT 9000
27129: PPUSH
27130: CALL_OW 12
27134: PPUSH
27135: CALL_OW 492
// end ;
27139: PPOPN 1
27141: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27142: LD_EXP 70
27146: PUSH
27147: LD_EXP 85
27151: AND
27152: IFFALSE 27172
27154: GO 27156
27156: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27157: LD_INT 1
27159: PPUSH
27160: LD_OWVAR 2
27164: PPUSH
27165: LD_INT 0
27167: PPUSH
27168: CALL_OW 324
27172: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27173: LD_EXP 70
27177: PUSH
27178: LD_EXP 86
27182: AND
27183: IFFALSE 27266
27185: GO 27187
27187: DISABLE
27188: LD_INT 0
27190: PPUSH
27191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27192: LD_ADDR_VAR 0 2
27196: PUSH
27197: LD_INT 22
27199: PUSH
27200: LD_OWVAR 2
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 21
27211: PUSH
27212: LD_INT 3
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PPUSH
27223: CALL_OW 69
27227: ST_TO_ADDR
// if not tmp then
27228: LD_VAR 0 2
27232: NOT
27233: IFFALSE 27237
// exit ;
27235: GO 27266
// for i in tmp do
27237: LD_ADDR_VAR 0 1
27241: PUSH
27242: LD_VAR 0 2
27246: PUSH
27247: FOR_IN
27248: IFFALSE 27264
// SetBLevel ( i , 10 ) ;
27250: LD_VAR 0 1
27254: PPUSH
27255: LD_INT 10
27257: PPUSH
27258: CALL_OW 241
27262: GO 27247
27264: POP
27265: POP
// end ;
27266: PPOPN 2
27268: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27269: LD_EXP 70
27273: PUSH
27274: LD_EXP 87
27278: AND
27279: IFFALSE 27390
27281: GO 27283
27283: DISABLE
27284: LD_INT 0
27286: PPUSH
27287: PPUSH
27288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27289: LD_ADDR_VAR 0 3
27293: PUSH
27294: LD_INT 22
27296: PUSH
27297: LD_OWVAR 2
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 25
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PPUSH
27320: CALL_OW 69
27324: ST_TO_ADDR
// if not tmp then
27325: LD_VAR 0 3
27329: NOT
27330: IFFALSE 27334
// exit ;
27332: GO 27390
// un := tmp [ rand ( 1 , tmp ) ] ;
27334: LD_ADDR_VAR 0 2
27338: PUSH
27339: LD_VAR 0 3
27343: PUSH
27344: LD_INT 1
27346: PPUSH
27347: LD_VAR 0 3
27351: PPUSH
27352: CALL_OW 12
27356: ARRAY
27357: ST_TO_ADDR
// if Crawls ( un ) then
27358: LD_VAR 0 2
27362: PPUSH
27363: CALL_OW 318
27367: IFFALSE 27378
// ComWalk ( un ) ;
27369: LD_VAR 0 2
27373: PPUSH
27374: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27378: LD_VAR 0 2
27382: PPUSH
27383: LD_INT 5
27385: PPUSH
27386: CALL_OW 336
// end ;
27390: PPOPN 3
27392: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27393: LD_EXP 70
27397: PUSH
27398: LD_EXP 88
27402: AND
27403: PUSH
27404: LD_OWVAR 67
27408: PUSH
27409: LD_INT 4
27411: LESS
27412: AND
27413: IFFALSE 27432
27415: GO 27417
27417: DISABLE
// begin Difficulty := Difficulty + 1 ;
27418: LD_ADDR_OWVAR 67
27422: PUSH
27423: LD_OWVAR 67
27427: PUSH
27428: LD_INT 1
27430: PLUS
27431: ST_TO_ADDR
// end ;
27432: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27433: LD_EXP 70
27437: PUSH
27438: LD_EXP 89
27442: AND
27443: IFFALSE 27546
27445: GO 27447
27447: DISABLE
27448: LD_INT 0
27450: PPUSH
// begin for i := 1 to 5 do
27451: LD_ADDR_VAR 0 1
27455: PUSH
27456: DOUBLE
27457: LD_INT 1
27459: DEC
27460: ST_TO_ADDR
27461: LD_INT 5
27463: PUSH
27464: FOR_TO
27465: IFFALSE 27544
// begin uc_nation := nation_nature ;
27467: LD_ADDR_OWVAR 21
27471: PUSH
27472: LD_INT 0
27474: ST_TO_ADDR
// uc_side := 0 ;
27475: LD_ADDR_OWVAR 20
27479: PUSH
27480: LD_INT 0
27482: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27483: LD_ADDR_OWVAR 29
27487: PUSH
27488: LD_INT 12
27490: PUSH
27491: LD_INT 12
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: ST_TO_ADDR
// hc_agressivity := 20 ;
27498: LD_ADDR_OWVAR 35
27502: PUSH
27503: LD_INT 20
27505: ST_TO_ADDR
// hc_class := class_tiger ;
27506: LD_ADDR_OWVAR 28
27510: PUSH
27511: LD_INT 14
27513: ST_TO_ADDR
// hc_gallery :=  ;
27514: LD_ADDR_OWVAR 33
27518: PUSH
27519: LD_STRING 
27521: ST_TO_ADDR
// hc_name :=  ;
27522: LD_ADDR_OWVAR 26
27526: PUSH
27527: LD_STRING 
27529: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27530: CALL_OW 44
27534: PPUSH
27535: LD_INT 0
27537: PPUSH
27538: CALL_OW 51
// end ;
27542: GO 27464
27544: POP
27545: POP
// end ;
27546: PPOPN 1
27548: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27549: LD_EXP 70
27553: PUSH
27554: LD_EXP 90
27558: AND
27559: IFFALSE 27568
27561: GO 27563
27563: DISABLE
// StreamSibBomb ;
27564: CALL 27569 0 0
27568: END
// export function StreamSibBomb ; var i , x , y ; begin
27569: LD_INT 0
27571: PPUSH
27572: PPUSH
27573: PPUSH
27574: PPUSH
// result := false ;
27575: LD_ADDR_VAR 0 1
27579: PUSH
27580: LD_INT 0
27582: ST_TO_ADDR
// for i := 1 to 16 do
27583: LD_ADDR_VAR 0 2
27587: PUSH
27588: DOUBLE
27589: LD_INT 1
27591: DEC
27592: ST_TO_ADDR
27593: LD_INT 16
27595: PUSH
27596: FOR_TO
27597: IFFALSE 27796
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27599: LD_ADDR_VAR 0 3
27603: PUSH
27604: LD_INT 10
27606: PUSH
27607: LD_INT 20
27609: PUSH
27610: LD_INT 30
27612: PUSH
27613: LD_INT 40
27615: PUSH
27616: LD_INT 50
27618: PUSH
27619: LD_INT 60
27621: PUSH
27622: LD_INT 70
27624: PUSH
27625: LD_INT 80
27627: PUSH
27628: LD_INT 90
27630: PUSH
27631: LD_INT 100
27633: PUSH
27634: LD_INT 110
27636: PUSH
27637: LD_INT 120
27639: PUSH
27640: LD_INT 130
27642: PUSH
27643: LD_INT 140
27645: PUSH
27646: LD_INT 150
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 1
27668: PPUSH
27669: LD_INT 15
27671: PPUSH
27672: CALL_OW 12
27676: ARRAY
27677: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27678: LD_ADDR_VAR 0 4
27682: PUSH
27683: LD_INT 10
27685: PUSH
27686: LD_INT 20
27688: PUSH
27689: LD_INT 30
27691: PUSH
27692: LD_INT 40
27694: PUSH
27695: LD_INT 50
27697: PUSH
27698: LD_INT 60
27700: PUSH
27701: LD_INT 70
27703: PUSH
27704: LD_INT 80
27706: PUSH
27707: LD_INT 90
27709: PUSH
27710: LD_INT 100
27712: PUSH
27713: LD_INT 110
27715: PUSH
27716: LD_INT 120
27718: PUSH
27719: LD_INT 130
27721: PUSH
27722: LD_INT 140
27724: PUSH
27725: LD_INT 150
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 1
27747: PPUSH
27748: LD_INT 15
27750: PPUSH
27751: CALL_OW 12
27755: ARRAY
27756: ST_TO_ADDR
// if ValidHex ( x , y ) then
27757: LD_VAR 0 3
27761: PPUSH
27762: LD_VAR 0 4
27766: PPUSH
27767: CALL_OW 488
27771: IFFALSE 27794
// begin result := [ x , y ] ;
27773: LD_ADDR_VAR 0 1
27777: PUSH
27778: LD_VAR 0 3
27782: PUSH
27783: LD_VAR 0 4
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: ST_TO_ADDR
// break ;
27792: GO 27796
// end ; end ;
27794: GO 27596
27796: POP
27797: POP
// if result then
27798: LD_VAR 0 1
27802: IFFALSE 27862
// begin ToLua ( playSibBomb() ) ;
27804: LD_STRING playSibBomb()
27806: PPUSH
27807: CALL_OW 559
// wait ( 0 0$14 ) ;
27811: LD_INT 490
27813: PPUSH
27814: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27818: LD_VAR 0 1
27822: PUSH
27823: LD_INT 1
27825: ARRAY
27826: PPUSH
27827: LD_VAR 0 1
27831: PUSH
27832: LD_INT 2
27834: ARRAY
27835: PPUSH
27836: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27840: LD_VAR 0 1
27844: PUSH
27845: LD_INT 1
27847: ARRAY
27848: PPUSH
27849: LD_VAR 0 1
27853: PUSH
27854: LD_INT 2
27856: ARRAY
27857: PPUSH
27858: CALL_OW 429
// end ; end ;
27862: LD_VAR 0 1
27866: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27867: LD_EXP 70
27871: PUSH
27872: LD_EXP 92
27876: AND
27877: IFFALSE 27889
27879: GO 27881
27881: DISABLE
// YouLost (  ) ;
27882: LD_STRING 
27884: PPUSH
27885: CALL_OW 104
27889: END
// every 0 0$1 trigger StreamModeActive and sFog do
27890: LD_EXP 70
27894: PUSH
27895: LD_EXP 91
27899: AND
27900: IFFALSE 27914
27902: GO 27904
27904: DISABLE
// FogOff ( your_side ) ;
27905: LD_OWVAR 2
27909: PPUSH
27910: CALL_OW 344
27914: END
// every 0 0$1 trigger StreamModeActive and sSun do
27915: LD_EXP 70
27919: PUSH
27920: LD_EXP 93
27924: AND
27925: IFFALSE 27953
27927: GO 27929
27929: DISABLE
// begin solar_recharge_percent := 0 ;
27930: LD_ADDR_OWVAR 79
27934: PUSH
27935: LD_INT 0
27937: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27938: LD_INT 10500
27940: PPUSH
27941: CALL_OW 67
// solar_recharge_percent := 100 ;
27945: LD_ADDR_OWVAR 79
27949: PUSH
27950: LD_INT 100
27952: ST_TO_ADDR
// end ;
27953: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27954: LD_EXP 70
27958: PUSH
27959: LD_EXP 94
27963: AND
27964: IFFALSE 28203
27966: GO 27968
27968: DISABLE
27969: LD_INT 0
27971: PPUSH
27972: PPUSH
27973: PPUSH
// begin tmp := [ ] ;
27974: LD_ADDR_VAR 0 3
27978: PUSH
27979: EMPTY
27980: ST_TO_ADDR
// for i := 1 to 6 do
27981: LD_ADDR_VAR 0 1
27985: PUSH
27986: DOUBLE
27987: LD_INT 1
27989: DEC
27990: ST_TO_ADDR
27991: LD_INT 6
27993: PUSH
27994: FOR_TO
27995: IFFALSE 28100
// begin uc_nation := nation_nature ;
27997: LD_ADDR_OWVAR 21
28001: PUSH
28002: LD_INT 0
28004: ST_TO_ADDR
// uc_side := 0 ;
28005: LD_ADDR_OWVAR 20
28009: PUSH
28010: LD_INT 0
28012: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28013: LD_ADDR_OWVAR 29
28017: PUSH
28018: LD_INT 12
28020: PUSH
28021: LD_INT 12
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: ST_TO_ADDR
// hc_agressivity := 20 ;
28028: LD_ADDR_OWVAR 35
28032: PUSH
28033: LD_INT 20
28035: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28036: LD_ADDR_OWVAR 28
28040: PUSH
28041: LD_INT 17
28043: ST_TO_ADDR
// hc_gallery :=  ;
28044: LD_ADDR_OWVAR 33
28048: PUSH
28049: LD_STRING 
28051: ST_TO_ADDR
// hc_name :=  ;
28052: LD_ADDR_OWVAR 26
28056: PUSH
28057: LD_STRING 
28059: ST_TO_ADDR
// un := CreateHuman ;
28060: LD_ADDR_VAR 0 2
28064: PUSH
28065: CALL_OW 44
28069: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28070: LD_VAR 0 2
28074: PPUSH
28075: LD_INT 1
28077: PPUSH
28078: CALL_OW 51
// tmp := tmp ^ un ;
28082: LD_ADDR_VAR 0 3
28086: PUSH
28087: LD_VAR 0 3
28091: PUSH
28092: LD_VAR 0 2
28096: ADD
28097: ST_TO_ADDR
// end ;
28098: GO 27994
28100: POP
28101: POP
// repeat wait ( 0 0$1 ) ;
28102: LD_INT 35
28104: PPUSH
28105: CALL_OW 67
// for un in tmp do
28109: LD_ADDR_VAR 0 2
28113: PUSH
28114: LD_VAR 0 3
28118: PUSH
28119: FOR_IN
28120: IFFALSE 28194
// begin if IsDead ( un ) then
28122: LD_VAR 0 2
28126: PPUSH
28127: CALL_OW 301
28131: IFFALSE 28151
// begin tmp := tmp diff un ;
28133: LD_ADDR_VAR 0 3
28137: PUSH
28138: LD_VAR 0 3
28142: PUSH
28143: LD_VAR 0 2
28147: DIFF
28148: ST_TO_ADDR
// continue ;
28149: GO 28119
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28151: LD_VAR 0 2
28155: PPUSH
28156: LD_INT 3
28158: PUSH
28159: LD_INT 22
28161: PUSH
28162: LD_INT 0
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PPUSH
28173: CALL_OW 69
28177: PPUSH
28178: LD_VAR 0 2
28182: PPUSH
28183: CALL_OW 74
28187: PPUSH
28188: CALL_OW 115
// end ;
28192: GO 28119
28194: POP
28195: POP
// until not tmp ;
28196: LD_VAR 0 3
28200: NOT
28201: IFFALSE 28102
// end ;
28203: PPOPN 3
28205: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28206: LD_EXP 70
28210: PUSH
28211: LD_EXP 95
28215: AND
28216: IFFALSE 28270
28218: GO 28220
28220: DISABLE
// begin ToLua ( displayTroll(); ) ;
28221: LD_STRING displayTroll();
28223: PPUSH
28224: CALL_OW 559
// wait ( 3 3$00 ) ;
28228: LD_INT 6300
28230: PPUSH
28231: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28235: LD_STRING hideTroll();
28237: PPUSH
28238: CALL_OW 559
// wait ( 1 1$00 ) ;
28242: LD_INT 2100
28244: PPUSH
28245: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28249: LD_STRING displayTroll();
28251: PPUSH
28252: CALL_OW 559
// wait ( 1 1$00 ) ;
28256: LD_INT 2100
28258: PPUSH
28259: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28263: LD_STRING hideTroll();
28265: PPUSH
28266: CALL_OW 559
// end ;
28270: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28271: LD_EXP 70
28275: PUSH
28276: LD_EXP 96
28280: AND
28281: IFFALSE 28344
28283: GO 28285
28285: DISABLE
28286: LD_INT 0
28288: PPUSH
// begin p := 0 ;
28289: LD_ADDR_VAR 0 1
28293: PUSH
28294: LD_INT 0
28296: ST_TO_ADDR
// repeat game_speed := 1 ;
28297: LD_ADDR_OWVAR 65
28301: PUSH
28302: LD_INT 1
28304: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28305: LD_INT 35
28307: PPUSH
28308: CALL_OW 67
// p := p + 1 ;
28312: LD_ADDR_VAR 0 1
28316: PUSH
28317: LD_VAR 0 1
28321: PUSH
28322: LD_INT 1
28324: PLUS
28325: ST_TO_ADDR
// until p >= 60 ;
28326: LD_VAR 0 1
28330: PUSH
28331: LD_INT 60
28333: GREATEREQUAL
28334: IFFALSE 28297
// game_speed := 4 ;
28336: LD_ADDR_OWVAR 65
28340: PUSH
28341: LD_INT 4
28343: ST_TO_ADDR
// end ;
28344: PPOPN 1
28346: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28347: LD_EXP 70
28351: PUSH
28352: LD_EXP 97
28356: AND
28357: IFFALSE 28503
28359: GO 28361
28361: DISABLE
28362: LD_INT 0
28364: PPUSH
28365: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28366: LD_ADDR_VAR 0 1
28370: PUSH
28371: LD_INT 22
28373: PUSH
28374: LD_OWVAR 2
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 2
28385: PUSH
28386: LD_INT 30
28388: PUSH
28389: LD_INT 0
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 30
28398: PUSH
28399: LD_INT 1
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: LIST
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PPUSH
28415: CALL_OW 69
28419: ST_TO_ADDR
// if not depot then
28420: LD_VAR 0 1
28424: NOT
28425: IFFALSE 28429
// exit ;
28427: GO 28503
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28429: LD_ADDR_VAR 0 2
28433: PUSH
28434: LD_VAR 0 1
28438: PUSH
28439: LD_INT 1
28441: PPUSH
28442: LD_VAR 0 1
28446: PPUSH
28447: CALL_OW 12
28451: ARRAY
28452: PPUSH
28453: CALL_OW 274
28457: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28458: LD_VAR 0 2
28462: PPUSH
28463: LD_INT 1
28465: PPUSH
28466: LD_INT 0
28468: PPUSH
28469: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28473: LD_VAR 0 2
28477: PPUSH
28478: LD_INT 2
28480: PPUSH
28481: LD_INT 0
28483: PPUSH
28484: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28488: LD_VAR 0 2
28492: PPUSH
28493: LD_INT 3
28495: PPUSH
28496: LD_INT 0
28498: PPUSH
28499: CALL_OW 277
// end ;
28503: PPOPN 2
28505: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28506: LD_EXP 70
28510: PUSH
28511: LD_EXP 98
28515: AND
28516: IFFALSE 28613
28518: GO 28520
28520: DISABLE
28521: LD_INT 0
28523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28524: LD_ADDR_VAR 0 1
28528: PUSH
28529: LD_INT 22
28531: PUSH
28532: LD_OWVAR 2
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 21
28543: PUSH
28544: LD_INT 1
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 3
28553: PUSH
28554: LD_INT 23
28556: PUSH
28557: LD_INT 0
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: LIST
28572: PPUSH
28573: CALL_OW 69
28577: ST_TO_ADDR
// if not tmp then
28578: LD_VAR 0 1
28582: NOT
28583: IFFALSE 28587
// exit ;
28585: GO 28613
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28587: LD_VAR 0 1
28591: PUSH
28592: LD_INT 1
28594: PPUSH
28595: LD_VAR 0 1
28599: PPUSH
28600: CALL_OW 12
28604: ARRAY
28605: PPUSH
28606: LD_INT 200
28608: PPUSH
28609: CALL_OW 234
// end ;
28613: PPOPN 1
28615: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28616: LD_EXP 70
28620: PUSH
28621: LD_EXP 99
28625: AND
28626: IFFALSE 28705
28628: GO 28630
28630: DISABLE
28631: LD_INT 0
28633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28634: LD_ADDR_VAR 0 1
28638: PUSH
28639: LD_INT 22
28641: PUSH
28642: LD_OWVAR 2
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 21
28653: PUSH
28654: LD_INT 2
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PPUSH
28665: CALL_OW 69
28669: ST_TO_ADDR
// if not tmp then
28670: LD_VAR 0 1
28674: NOT
28675: IFFALSE 28679
// exit ;
28677: GO 28705
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28679: LD_VAR 0 1
28683: PUSH
28684: LD_INT 1
28686: PPUSH
28687: LD_VAR 0 1
28691: PPUSH
28692: CALL_OW 12
28696: ARRAY
28697: PPUSH
28698: LD_INT 60
28700: PPUSH
28701: CALL_OW 234
// end ;
28705: PPOPN 1
28707: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28708: LD_EXP 70
28712: PUSH
28713: LD_EXP 100
28717: AND
28718: IFFALSE 28817
28720: GO 28722
28722: DISABLE
28723: LD_INT 0
28725: PPUSH
28726: PPUSH
// begin enable ;
28727: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28728: LD_ADDR_VAR 0 1
28732: PUSH
28733: LD_INT 22
28735: PUSH
28736: LD_OWVAR 2
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 61
28747: PUSH
28748: EMPTY
28749: LIST
28750: PUSH
28751: LD_INT 33
28753: PUSH
28754: LD_INT 2
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: LIST
28765: PPUSH
28766: CALL_OW 69
28770: ST_TO_ADDR
// if not tmp then
28771: LD_VAR 0 1
28775: NOT
28776: IFFALSE 28780
// exit ;
28778: GO 28817
// for i in tmp do
28780: LD_ADDR_VAR 0 2
28784: PUSH
28785: LD_VAR 0 1
28789: PUSH
28790: FOR_IN
28791: IFFALSE 28815
// if IsControledBy ( i ) then
28793: LD_VAR 0 2
28797: PPUSH
28798: CALL_OW 312
28802: IFFALSE 28813
// ComUnlink ( i ) ;
28804: LD_VAR 0 2
28808: PPUSH
28809: CALL_OW 136
28813: GO 28790
28815: POP
28816: POP
// end ;
28817: PPOPN 2
28819: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28820: LD_EXP 70
28824: PUSH
28825: LD_EXP 101
28829: AND
28830: IFFALSE 28970
28832: GO 28834
28834: DISABLE
28835: LD_INT 0
28837: PPUSH
28838: PPUSH
// begin ToLua ( displayPowell(); ) ;
28839: LD_STRING displayPowell();
28841: PPUSH
28842: CALL_OW 559
// uc_side := 0 ;
28846: LD_ADDR_OWVAR 20
28850: PUSH
28851: LD_INT 0
28853: ST_TO_ADDR
// uc_nation := 2 ;
28854: LD_ADDR_OWVAR 21
28858: PUSH
28859: LD_INT 2
28861: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28862: LD_ADDR_OWVAR 37
28866: PUSH
28867: LD_INT 14
28869: ST_TO_ADDR
// vc_engine := engine_siberite ;
28870: LD_ADDR_OWVAR 39
28874: PUSH
28875: LD_INT 3
28877: ST_TO_ADDR
// vc_control := control_apeman ;
28878: LD_ADDR_OWVAR 38
28882: PUSH
28883: LD_INT 5
28885: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28886: LD_ADDR_OWVAR 40
28890: PUSH
28891: LD_INT 29
28893: ST_TO_ADDR
// un := CreateVehicle ;
28894: LD_ADDR_VAR 0 2
28898: PUSH
28899: CALL_OW 45
28903: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28904: LD_VAR 0 2
28908: PPUSH
28909: LD_INT 1
28911: PPUSH
28912: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28916: LD_INT 35
28918: PPUSH
28919: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28923: LD_VAR 0 2
28927: PPUSH
28928: LD_INT 22
28930: PUSH
28931: LD_OWVAR 2
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PPUSH
28940: CALL_OW 69
28944: PPUSH
28945: LD_VAR 0 2
28949: PPUSH
28950: CALL_OW 74
28954: PPUSH
28955: CALL_OW 115
// until IsDead ( un ) ;
28959: LD_VAR 0 2
28963: PPUSH
28964: CALL_OW 301
28968: IFFALSE 28916
// end ;
28970: PPOPN 2
28972: END
// every 0 0$1 trigger StreamModeActive and sStu do
28973: LD_EXP 70
28977: PUSH
28978: LD_EXP 109
28982: AND
28983: IFFALSE 28999
28985: GO 28987
28987: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28988: LD_STRING displayStucuk();
28990: PPUSH
28991: CALL_OW 559
// ResetFog ;
28995: CALL_OW 335
// end ;
28999: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29000: LD_EXP 70
29004: PUSH
29005: LD_EXP 102
29009: AND
29010: IFFALSE 29151
29012: GO 29014
29014: DISABLE
29015: LD_INT 0
29017: PPUSH
29018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29019: LD_ADDR_VAR 0 2
29023: PUSH
29024: LD_INT 22
29026: PUSH
29027: LD_OWVAR 2
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 21
29038: PUSH
29039: LD_INT 1
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PPUSH
29050: CALL_OW 69
29054: ST_TO_ADDR
// if not tmp then
29055: LD_VAR 0 2
29059: NOT
29060: IFFALSE 29064
// exit ;
29062: GO 29151
// un := tmp [ rand ( 1 , tmp ) ] ;
29064: LD_ADDR_VAR 0 1
29068: PUSH
29069: LD_VAR 0 2
29073: PUSH
29074: LD_INT 1
29076: PPUSH
29077: LD_VAR 0 2
29081: PPUSH
29082: CALL_OW 12
29086: ARRAY
29087: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29088: LD_VAR 0 1
29092: PPUSH
29093: LD_INT 0
29095: PPUSH
29096: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29100: LD_VAR 0 1
29104: PPUSH
29105: LD_OWVAR 3
29109: PUSH
29110: LD_VAR 0 1
29114: DIFF
29115: PPUSH
29116: LD_VAR 0 1
29120: PPUSH
29121: CALL_OW 74
29125: PPUSH
29126: CALL_OW 115
// wait ( 0 0$20 ) ;
29130: LD_INT 700
29132: PPUSH
29133: CALL_OW 67
// SetSide ( un , your_side ) ;
29137: LD_VAR 0 1
29141: PPUSH
29142: LD_OWVAR 2
29146: PPUSH
29147: CALL_OW 235
// end ;
29151: PPOPN 2
29153: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29154: LD_EXP 70
29158: PUSH
29159: LD_EXP 103
29163: AND
29164: IFFALSE 29270
29166: GO 29168
29168: DISABLE
29169: LD_INT 0
29171: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29172: LD_ADDR_VAR 0 1
29176: PUSH
29177: LD_INT 22
29179: PUSH
29180: LD_OWVAR 2
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 2
29191: PUSH
29192: LD_INT 30
29194: PUSH
29195: LD_INT 0
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 30
29204: PUSH
29205: LD_INT 1
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: LIST
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PPUSH
29221: CALL_OW 69
29225: ST_TO_ADDR
// if not depot then
29226: LD_VAR 0 1
29230: NOT
29231: IFFALSE 29235
// exit ;
29233: GO 29270
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29235: LD_VAR 0 1
29239: PUSH
29240: LD_INT 1
29242: ARRAY
29243: PPUSH
29244: CALL_OW 250
29248: PPUSH
29249: LD_VAR 0 1
29253: PUSH
29254: LD_INT 1
29256: ARRAY
29257: PPUSH
29258: CALL_OW 251
29262: PPUSH
29263: LD_INT 70
29265: PPUSH
29266: CALL_OW 495
// end ;
29270: PPOPN 1
29272: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29273: LD_EXP 70
29277: PUSH
29278: LD_EXP 104
29282: AND
29283: IFFALSE 29494
29285: GO 29287
29287: DISABLE
29288: LD_INT 0
29290: PPUSH
29291: PPUSH
29292: PPUSH
29293: PPUSH
29294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29295: LD_ADDR_VAR 0 5
29299: PUSH
29300: LD_INT 22
29302: PUSH
29303: LD_OWVAR 2
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 21
29314: PUSH
29315: LD_INT 1
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PPUSH
29326: CALL_OW 69
29330: ST_TO_ADDR
// if not tmp then
29331: LD_VAR 0 5
29335: NOT
29336: IFFALSE 29340
// exit ;
29338: GO 29494
// for i in tmp do
29340: LD_ADDR_VAR 0 1
29344: PUSH
29345: LD_VAR 0 5
29349: PUSH
29350: FOR_IN
29351: IFFALSE 29492
// begin d := rand ( 0 , 5 ) ;
29353: LD_ADDR_VAR 0 4
29357: PUSH
29358: LD_INT 0
29360: PPUSH
29361: LD_INT 5
29363: PPUSH
29364: CALL_OW 12
29368: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29369: LD_ADDR_VAR 0 2
29373: PUSH
29374: LD_VAR 0 1
29378: PPUSH
29379: CALL_OW 250
29383: PPUSH
29384: LD_VAR 0 4
29388: PPUSH
29389: LD_INT 3
29391: PPUSH
29392: LD_INT 12
29394: PPUSH
29395: CALL_OW 12
29399: PPUSH
29400: CALL_OW 272
29404: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29405: LD_ADDR_VAR 0 3
29409: PUSH
29410: LD_VAR 0 1
29414: PPUSH
29415: CALL_OW 251
29419: PPUSH
29420: LD_VAR 0 4
29424: PPUSH
29425: LD_INT 3
29427: PPUSH
29428: LD_INT 12
29430: PPUSH
29431: CALL_OW 12
29435: PPUSH
29436: CALL_OW 273
29440: ST_TO_ADDR
// if ValidHex ( x , y ) then
29441: LD_VAR 0 2
29445: PPUSH
29446: LD_VAR 0 3
29450: PPUSH
29451: CALL_OW 488
29455: IFFALSE 29490
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29457: LD_VAR 0 1
29461: PPUSH
29462: LD_VAR 0 2
29466: PPUSH
29467: LD_VAR 0 3
29471: PPUSH
29472: LD_INT 3
29474: PPUSH
29475: LD_INT 6
29477: PPUSH
29478: CALL_OW 12
29482: PPUSH
29483: LD_INT 1
29485: PPUSH
29486: CALL_OW 483
// end ;
29490: GO 29350
29492: POP
29493: POP
// end ;
29494: PPOPN 5
29496: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29497: LD_EXP 70
29501: PUSH
29502: LD_EXP 105
29506: AND
29507: IFFALSE 29601
29509: GO 29511
29511: DISABLE
29512: LD_INT 0
29514: PPUSH
29515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29516: LD_ADDR_VAR 0 2
29520: PUSH
29521: LD_INT 22
29523: PUSH
29524: LD_OWVAR 2
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 32
29535: PUSH
29536: LD_INT 1
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 21
29545: PUSH
29546: LD_INT 2
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: LIST
29557: PPUSH
29558: CALL_OW 69
29562: ST_TO_ADDR
// if not tmp then
29563: LD_VAR 0 2
29567: NOT
29568: IFFALSE 29572
// exit ;
29570: GO 29601
// for i in tmp do
29572: LD_ADDR_VAR 0 1
29576: PUSH
29577: LD_VAR 0 2
29581: PUSH
29582: FOR_IN
29583: IFFALSE 29599
// SetFuel ( i , 0 ) ;
29585: LD_VAR 0 1
29589: PPUSH
29590: LD_INT 0
29592: PPUSH
29593: CALL_OW 240
29597: GO 29582
29599: POP
29600: POP
// end ;
29601: PPOPN 2
29603: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29604: LD_EXP 70
29608: PUSH
29609: LD_EXP 106
29613: AND
29614: IFFALSE 29680
29616: GO 29618
29618: DISABLE
29619: LD_INT 0
29621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29622: LD_ADDR_VAR 0 1
29626: PUSH
29627: LD_INT 22
29629: PUSH
29630: LD_OWVAR 2
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 30
29641: PUSH
29642: LD_INT 29
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PPUSH
29653: CALL_OW 69
29657: ST_TO_ADDR
// if not tmp then
29658: LD_VAR 0 1
29662: NOT
29663: IFFALSE 29667
// exit ;
29665: GO 29680
// DestroyUnit ( tmp [ 1 ] ) ;
29667: LD_VAR 0 1
29671: PUSH
29672: LD_INT 1
29674: ARRAY
29675: PPUSH
29676: CALL_OW 65
// end ;
29680: PPOPN 1
29682: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29683: LD_EXP 70
29687: PUSH
29688: LD_EXP 108
29692: AND
29693: IFFALSE 29822
29695: GO 29697
29697: DISABLE
29698: LD_INT 0
29700: PPUSH
// begin uc_side := 0 ;
29701: LD_ADDR_OWVAR 20
29705: PUSH
29706: LD_INT 0
29708: ST_TO_ADDR
// uc_nation := nation_arabian ;
29709: LD_ADDR_OWVAR 21
29713: PUSH
29714: LD_INT 2
29716: ST_TO_ADDR
// hc_gallery :=  ;
29717: LD_ADDR_OWVAR 33
29721: PUSH
29722: LD_STRING 
29724: ST_TO_ADDR
// hc_name :=  ;
29725: LD_ADDR_OWVAR 26
29729: PUSH
29730: LD_STRING 
29732: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29733: LD_INT 1
29735: PPUSH
29736: LD_INT 11
29738: PPUSH
29739: LD_INT 10
29741: PPUSH
29742: CALL_OW 380
// un := CreateHuman ;
29746: LD_ADDR_VAR 0 1
29750: PUSH
29751: CALL_OW 44
29755: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29756: LD_VAR 0 1
29760: PPUSH
29761: LD_INT 1
29763: PPUSH
29764: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29768: LD_INT 35
29770: PPUSH
29771: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29775: LD_VAR 0 1
29779: PPUSH
29780: LD_INT 22
29782: PUSH
29783: LD_OWVAR 2
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PPUSH
29792: CALL_OW 69
29796: PPUSH
29797: LD_VAR 0 1
29801: PPUSH
29802: CALL_OW 74
29806: PPUSH
29807: CALL_OW 115
// until IsDead ( un ) ;
29811: LD_VAR 0 1
29815: PPUSH
29816: CALL_OW 301
29820: IFFALSE 29768
// end ;
29822: PPOPN 1
29824: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29825: LD_EXP 70
29829: PUSH
29830: LD_EXP 110
29834: AND
29835: IFFALSE 29847
29837: GO 29839
29839: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29840: LD_STRING earthquake(getX(game), 0, 32)
29842: PPUSH
29843: CALL_OW 559
29847: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29848: LD_EXP 70
29852: PUSH
29853: LD_EXP 111
29857: AND
29858: IFFALSE 29949
29860: GO 29862
29862: DISABLE
29863: LD_INT 0
29865: PPUSH
// begin enable ;
29866: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29867: LD_ADDR_VAR 0 1
29871: PUSH
29872: LD_INT 22
29874: PUSH
29875: LD_OWVAR 2
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 21
29886: PUSH
29887: LD_INT 2
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 33
29896: PUSH
29897: LD_INT 3
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: PPUSH
29909: CALL_OW 69
29913: ST_TO_ADDR
// if not tmp then
29914: LD_VAR 0 1
29918: NOT
29919: IFFALSE 29923
// exit ;
29921: GO 29949
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29923: LD_VAR 0 1
29927: PUSH
29928: LD_INT 1
29930: PPUSH
29931: LD_VAR 0 1
29935: PPUSH
29936: CALL_OW 12
29940: ARRAY
29941: PPUSH
29942: LD_INT 1
29944: PPUSH
29945: CALL_OW 234
// end ;
29949: PPOPN 1
29951: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29952: LD_EXP 70
29956: PUSH
29957: LD_EXP 112
29961: AND
29962: IFFALSE 30103
29964: GO 29966
29966: DISABLE
29967: LD_INT 0
29969: PPUSH
29970: PPUSH
29971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29972: LD_ADDR_VAR 0 3
29976: PUSH
29977: LD_INT 22
29979: PUSH
29980: LD_OWVAR 2
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 25
29991: PUSH
29992: LD_INT 1
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PPUSH
30003: CALL_OW 69
30007: ST_TO_ADDR
// if not tmp then
30008: LD_VAR 0 3
30012: NOT
30013: IFFALSE 30017
// exit ;
30015: GO 30103
// un := tmp [ rand ( 1 , tmp ) ] ;
30017: LD_ADDR_VAR 0 2
30021: PUSH
30022: LD_VAR 0 3
30026: PUSH
30027: LD_INT 1
30029: PPUSH
30030: LD_VAR 0 3
30034: PPUSH
30035: CALL_OW 12
30039: ARRAY
30040: ST_TO_ADDR
// if Crawls ( un ) then
30041: LD_VAR 0 2
30045: PPUSH
30046: CALL_OW 318
30050: IFFALSE 30061
// ComWalk ( un ) ;
30052: LD_VAR 0 2
30056: PPUSH
30057: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30061: LD_VAR 0 2
30065: PPUSH
30066: LD_INT 9
30068: PPUSH
30069: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30073: LD_INT 28
30075: PPUSH
30076: LD_OWVAR 2
30080: PPUSH
30081: LD_INT 2
30083: PPUSH
30084: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30088: LD_INT 29
30090: PPUSH
30091: LD_OWVAR 2
30095: PPUSH
30096: LD_INT 2
30098: PPUSH
30099: CALL_OW 322
// end ;
30103: PPOPN 3
30105: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30106: LD_EXP 70
30110: PUSH
30111: LD_EXP 113
30115: AND
30116: IFFALSE 30227
30118: GO 30120
30120: DISABLE
30121: LD_INT 0
30123: PPUSH
30124: PPUSH
30125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30126: LD_ADDR_VAR 0 3
30130: PUSH
30131: LD_INT 22
30133: PUSH
30134: LD_OWVAR 2
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 25
30145: PUSH
30146: LD_INT 1
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PPUSH
30157: CALL_OW 69
30161: ST_TO_ADDR
// if not tmp then
30162: LD_VAR 0 3
30166: NOT
30167: IFFALSE 30171
// exit ;
30169: GO 30227
// un := tmp [ rand ( 1 , tmp ) ] ;
30171: LD_ADDR_VAR 0 2
30175: PUSH
30176: LD_VAR 0 3
30180: PUSH
30181: LD_INT 1
30183: PPUSH
30184: LD_VAR 0 3
30188: PPUSH
30189: CALL_OW 12
30193: ARRAY
30194: ST_TO_ADDR
// if Crawls ( un ) then
30195: LD_VAR 0 2
30199: PPUSH
30200: CALL_OW 318
30204: IFFALSE 30215
// ComWalk ( un ) ;
30206: LD_VAR 0 2
30210: PPUSH
30211: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30215: LD_VAR 0 2
30219: PPUSH
30220: LD_INT 8
30222: PPUSH
30223: CALL_OW 336
// end ;
30227: PPOPN 3
30229: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30230: LD_EXP 70
30234: PUSH
30235: LD_EXP 114
30239: AND
30240: IFFALSE 30384
30242: GO 30244
30244: DISABLE
30245: LD_INT 0
30247: PPUSH
30248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30249: LD_ADDR_VAR 0 2
30253: PUSH
30254: LD_INT 22
30256: PUSH
30257: LD_OWVAR 2
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 21
30268: PUSH
30269: LD_INT 2
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 2
30278: PUSH
30279: LD_INT 34
30281: PUSH
30282: LD_INT 12
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 34
30291: PUSH
30292: LD_INT 51
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 34
30301: PUSH
30302: LD_INT 32
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: PPUSH
30320: CALL_OW 69
30324: ST_TO_ADDR
// if not tmp then
30325: LD_VAR 0 2
30329: NOT
30330: IFFALSE 30334
// exit ;
30332: GO 30384
// for i in tmp do
30334: LD_ADDR_VAR 0 1
30338: PUSH
30339: LD_VAR 0 2
30343: PUSH
30344: FOR_IN
30345: IFFALSE 30382
// if GetCargo ( i , mat_artifact ) = 0 then
30347: LD_VAR 0 1
30351: PPUSH
30352: LD_INT 4
30354: PPUSH
30355: CALL_OW 289
30359: PUSH
30360: LD_INT 0
30362: EQUAL
30363: IFFALSE 30380
// SetCargo ( i , mat_siberit , 100 ) ;
30365: LD_VAR 0 1
30369: PPUSH
30370: LD_INT 3
30372: PPUSH
30373: LD_INT 100
30375: PPUSH
30376: CALL_OW 290
30380: GO 30344
30382: POP
30383: POP
// end ;
30384: PPOPN 2
30386: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30387: LD_EXP 70
30391: PUSH
30392: LD_EXP 115
30396: AND
30397: IFFALSE 30580
30399: GO 30401
30401: DISABLE
30402: LD_INT 0
30404: PPUSH
30405: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30406: LD_ADDR_VAR 0 2
30410: PUSH
30411: LD_INT 22
30413: PUSH
30414: LD_OWVAR 2
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PPUSH
30423: CALL_OW 69
30427: ST_TO_ADDR
// if not tmp then
30428: LD_VAR 0 2
30432: NOT
30433: IFFALSE 30437
// exit ;
30435: GO 30580
// for i := 1 to 2 do
30437: LD_ADDR_VAR 0 1
30441: PUSH
30442: DOUBLE
30443: LD_INT 1
30445: DEC
30446: ST_TO_ADDR
30447: LD_INT 2
30449: PUSH
30450: FOR_TO
30451: IFFALSE 30578
// begin uc_side := your_side ;
30453: LD_ADDR_OWVAR 20
30457: PUSH
30458: LD_OWVAR 2
30462: ST_TO_ADDR
// uc_nation := nation_american ;
30463: LD_ADDR_OWVAR 21
30467: PUSH
30468: LD_INT 1
30470: ST_TO_ADDR
// vc_chassis := us_morphling ;
30471: LD_ADDR_OWVAR 37
30475: PUSH
30476: LD_INT 5
30478: ST_TO_ADDR
// vc_engine := engine_siberite ;
30479: LD_ADDR_OWVAR 39
30483: PUSH
30484: LD_INT 3
30486: ST_TO_ADDR
// vc_control := control_computer ;
30487: LD_ADDR_OWVAR 38
30491: PUSH
30492: LD_INT 3
30494: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30495: LD_ADDR_OWVAR 40
30499: PUSH
30500: LD_INT 10
30502: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30503: LD_VAR 0 2
30507: PUSH
30508: LD_INT 1
30510: ARRAY
30511: PPUSH
30512: CALL_OW 310
30516: NOT
30517: IFFALSE 30564
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30519: CALL_OW 45
30523: PPUSH
30524: LD_VAR 0 2
30528: PUSH
30529: LD_INT 1
30531: ARRAY
30532: PPUSH
30533: CALL_OW 250
30537: PPUSH
30538: LD_VAR 0 2
30542: PUSH
30543: LD_INT 1
30545: ARRAY
30546: PPUSH
30547: CALL_OW 251
30551: PPUSH
30552: LD_INT 12
30554: PPUSH
30555: LD_INT 1
30557: PPUSH
30558: CALL_OW 50
30562: GO 30576
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30564: CALL_OW 45
30568: PPUSH
30569: LD_INT 1
30571: PPUSH
30572: CALL_OW 51
// end ;
30576: GO 30450
30578: POP
30579: POP
// end ;
30580: PPOPN 2
30582: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30583: LD_EXP 70
30587: PUSH
30588: LD_EXP 116
30592: AND
30593: IFFALSE 30815
30595: GO 30597
30597: DISABLE
30598: LD_INT 0
30600: PPUSH
30601: PPUSH
30602: PPUSH
30603: PPUSH
30604: PPUSH
30605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30606: LD_ADDR_VAR 0 6
30610: PUSH
30611: LD_INT 22
30613: PUSH
30614: LD_OWVAR 2
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 21
30625: PUSH
30626: LD_INT 1
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 3
30635: PUSH
30636: LD_INT 23
30638: PUSH
30639: LD_INT 0
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: LIST
30654: PPUSH
30655: CALL_OW 69
30659: ST_TO_ADDR
// if not tmp then
30660: LD_VAR 0 6
30664: NOT
30665: IFFALSE 30669
// exit ;
30667: GO 30815
// s1 := rand ( 1 , 4 ) ;
30669: LD_ADDR_VAR 0 2
30673: PUSH
30674: LD_INT 1
30676: PPUSH
30677: LD_INT 4
30679: PPUSH
30680: CALL_OW 12
30684: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30685: LD_ADDR_VAR 0 4
30689: PUSH
30690: LD_VAR 0 6
30694: PUSH
30695: LD_INT 1
30697: ARRAY
30698: PPUSH
30699: LD_VAR 0 2
30703: PPUSH
30704: CALL_OW 259
30708: ST_TO_ADDR
// if s1 = 1 then
30709: LD_VAR 0 2
30713: PUSH
30714: LD_INT 1
30716: EQUAL
30717: IFFALSE 30737
// s2 := rand ( 2 , 4 ) else
30719: LD_ADDR_VAR 0 3
30723: PUSH
30724: LD_INT 2
30726: PPUSH
30727: LD_INT 4
30729: PPUSH
30730: CALL_OW 12
30734: ST_TO_ADDR
30735: GO 30745
// s2 := 1 ;
30737: LD_ADDR_VAR 0 3
30741: PUSH
30742: LD_INT 1
30744: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30745: LD_ADDR_VAR 0 5
30749: PUSH
30750: LD_VAR 0 6
30754: PUSH
30755: LD_INT 1
30757: ARRAY
30758: PPUSH
30759: LD_VAR 0 3
30763: PPUSH
30764: CALL_OW 259
30768: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30769: LD_VAR 0 6
30773: PUSH
30774: LD_INT 1
30776: ARRAY
30777: PPUSH
30778: LD_VAR 0 2
30782: PPUSH
30783: LD_VAR 0 5
30787: PPUSH
30788: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30792: LD_VAR 0 6
30796: PUSH
30797: LD_INT 1
30799: ARRAY
30800: PPUSH
30801: LD_VAR 0 3
30805: PPUSH
30806: LD_VAR 0 4
30810: PPUSH
30811: CALL_OW 237
// end ;
30815: PPOPN 6
30817: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30818: LD_EXP 70
30822: PUSH
30823: LD_EXP 117
30827: AND
30828: IFFALSE 30907
30830: GO 30832
30832: DISABLE
30833: LD_INT 0
30835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30836: LD_ADDR_VAR 0 1
30840: PUSH
30841: LD_INT 22
30843: PUSH
30844: LD_OWVAR 2
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 30
30855: PUSH
30856: LD_INT 3
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PPUSH
30867: CALL_OW 69
30871: ST_TO_ADDR
// if not tmp then
30872: LD_VAR 0 1
30876: NOT
30877: IFFALSE 30881
// exit ;
30879: GO 30907
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30881: LD_VAR 0 1
30885: PUSH
30886: LD_INT 1
30888: PPUSH
30889: LD_VAR 0 1
30893: PPUSH
30894: CALL_OW 12
30898: ARRAY
30899: PPUSH
30900: LD_INT 1
30902: PPUSH
30903: CALL_OW 234
// end ;
30907: PPOPN 1
30909: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30910: LD_EXP 70
30914: PUSH
30915: LD_EXP 118
30919: AND
30920: IFFALSE 31032
30922: GO 30924
30924: DISABLE
30925: LD_INT 0
30927: PPUSH
30928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30929: LD_ADDR_VAR 0 2
30933: PUSH
30934: LD_INT 22
30936: PUSH
30937: LD_OWVAR 2
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 2
30948: PUSH
30949: LD_INT 30
30951: PUSH
30952: LD_INT 27
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 30
30961: PUSH
30962: LD_INT 26
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 30
30971: PUSH
30972: LD_INT 28
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PPUSH
30989: CALL_OW 69
30993: ST_TO_ADDR
// if not tmp then
30994: LD_VAR 0 2
30998: NOT
30999: IFFALSE 31003
// exit ;
31001: GO 31032
// for i in tmp do
31003: LD_ADDR_VAR 0 1
31007: PUSH
31008: LD_VAR 0 2
31012: PUSH
31013: FOR_IN
31014: IFFALSE 31030
// SetLives ( i , 1 ) ;
31016: LD_VAR 0 1
31020: PPUSH
31021: LD_INT 1
31023: PPUSH
31024: CALL_OW 234
31028: GO 31013
31030: POP
31031: POP
// end ;
31032: PPOPN 2
31034: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31035: LD_EXP 70
31039: PUSH
31040: LD_EXP 119
31044: AND
31045: IFFALSE 31332
31047: GO 31049
31049: DISABLE
31050: LD_INT 0
31052: PPUSH
31053: PPUSH
31054: PPUSH
// begin i := rand ( 1 , 7 ) ;
31055: LD_ADDR_VAR 0 1
31059: PUSH
31060: LD_INT 1
31062: PPUSH
31063: LD_INT 7
31065: PPUSH
31066: CALL_OW 12
31070: ST_TO_ADDR
// case i of 1 :
31071: LD_VAR 0 1
31075: PUSH
31076: LD_INT 1
31078: DOUBLE
31079: EQUAL
31080: IFTRUE 31084
31082: GO 31094
31084: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31085: LD_STRING earthquake(getX(game), 0, 32)
31087: PPUSH
31088: CALL_OW 559
31092: GO 31332
31094: LD_INT 2
31096: DOUBLE
31097: EQUAL
31098: IFTRUE 31102
31100: GO 31116
31102: POP
// begin ToLua ( displayStucuk(); ) ;
31103: LD_STRING displayStucuk();
31105: PPUSH
31106: CALL_OW 559
// ResetFog ;
31110: CALL_OW 335
// end ; 3 :
31114: GO 31332
31116: LD_INT 3
31118: DOUBLE
31119: EQUAL
31120: IFTRUE 31124
31122: GO 31228
31124: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31125: LD_ADDR_VAR 0 2
31129: PUSH
31130: LD_INT 22
31132: PUSH
31133: LD_OWVAR 2
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 25
31144: PUSH
31145: LD_INT 1
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PPUSH
31156: CALL_OW 69
31160: ST_TO_ADDR
// if not tmp then
31161: LD_VAR 0 2
31165: NOT
31166: IFFALSE 31170
// exit ;
31168: GO 31332
// un := tmp [ rand ( 1 , tmp ) ] ;
31170: LD_ADDR_VAR 0 3
31174: PUSH
31175: LD_VAR 0 2
31179: PUSH
31180: LD_INT 1
31182: PPUSH
31183: LD_VAR 0 2
31187: PPUSH
31188: CALL_OW 12
31192: ARRAY
31193: ST_TO_ADDR
// if Crawls ( un ) then
31194: LD_VAR 0 3
31198: PPUSH
31199: CALL_OW 318
31203: IFFALSE 31214
// ComWalk ( un ) ;
31205: LD_VAR 0 3
31209: PPUSH
31210: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31214: LD_VAR 0 3
31218: PPUSH
31219: LD_INT 8
31221: PPUSH
31222: CALL_OW 336
// end ; 4 :
31226: GO 31332
31228: LD_INT 4
31230: DOUBLE
31231: EQUAL
31232: IFTRUE 31236
31234: GO 31310
31236: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31237: LD_ADDR_VAR 0 2
31241: PUSH
31242: LD_INT 22
31244: PUSH
31245: LD_OWVAR 2
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 30
31256: PUSH
31257: LD_INT 29
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PPUSH
31268: CALL_OW 69
31272: ST_TO_ADDR
// if not tmp then
31273: LD_VAR 0 2
31277: NOT
31278: IFFALSE 31282
// exit ;
31280: GO 31332
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31282: LD_VAR 0 2
31286: PUSH
31287: LD_INT 1
31289: ARRAY
31290: PPUSH
31291: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31295: LD_VAR 0 2
31299: PUSH
31300: LD_INT 1
31302: ARRAY
31303: PPUSH
31304: CALL_OW 65
// end ; 5 .. 7 :
31308: GO 31332
31310: LD_INT 5
31312: DOUBLE
31313: GREATEREQUAL
31314: IFFALSE 31322
31316: LD_INT 7
31318: DOUBLE
31319: LESSEQUAL
31320: IFTRUE 31324
31322: GO 31331
31324: POP
// StreamSibBomb ; end ;
31325: CALL 27569 0 0
31329: GO 31332
31331: POP
// end ;
31332: PPOPN 3
31334: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31335: LD_EXP 70
31339: PUSH
31340: LD_EXP 120
31344: AND
31345: IFFALSE 31501
31347: GO 31349
31349: DISABLE
31350: LD_INT 0
31352: PPUSH
31353: PPUSH
31354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31355: LD_ADDR_VAR 0 2
31359: PUSH
31360: LD_INT 81
31362: PUSH
31363: LD_OWVAR 2
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 2
31374: PUSH
31375: LD_INT 21
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 21
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: LIST
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PPUSH
31404: CALL_OW 69
31408: ST_TO_ADDR
// if not tmp then
31409: LD_VAR 0 2
31413: NOT
31414: IFFALSE 31418
// exit ;
31416: GO 31501
// p := 0 ;
31418: LD_ADDR_VAR 0 3
31422: PUSH
31423: LD_INT 0
31425: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31426: LD_INT 35
31428: PPUSH
31429: CALL_OW 67
// p := p + 1 ;
31433: LD_ADDR_VAR 0 3
31437: PUSH
31438: LD_VAR 0 3
31442: PUSH
31443: LD_INT 1
31445: PLUS
31446: ST_TO_ADDR
// for i in tmp do
31447: LD_ADDR_VAR 0 1
31451: PUSH
31452: LD_VAR 0 2
31456: PUSH
31457: FOR_IN
31458: IFFALSE 31489
// if GetLives ( i ) < 1000 then
31460: LD_VAR 0 1
31464: PPUSH
31465: CALL_OW 256
31469: PUSH
31470: LD_INT 1000
31472: LESS
31473: IFFALSE 31487
// SetLives ( i , 1000 ) ;
31475: LD_VAR 0 1
31479: PPUSH
31480: LD_INT 1000
31482: PPUSH
31483: CALL_OW 234
31487: GO 31457
31489: POP
31490: POP
// until p > 20 ;
31491: LD_VAR 0 3
31495: PUSH
31496: LD_INT 20
31498: GREATER
31499: IFFALSE 31426
// end ;
31501: PPOPN 3
31503: END
// every 0 0$1 trigger StreamModeActive and sTime do
31504: LD_EXP 70
31508: PUSH
31509: LD_EXP 121
31513: AND
31514: IFFALSE 31549
31516: GO 31518
31518: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31519: LD_INT 28
31521: PPUSH
31522: LD_OWVAR 2
31526: PPUSH
31527: LD_INT 2
31529: PPUSH
31530: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31534: LD_INT 30
31536: PPUSH
31537: LD_OWVAR 2
31541: PPUSH
31542: LD_INT 2
31544: PPUSH
31545: CALL_OW 322
// end ;
31549: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31550: LD_EXP 70
31554: PUSH
31555: LD_EXP 122
31559: AND
31560: IFFALSE 31681
31562: GO 31564
31564: DISABLE
31565: LD_INT 0
31567: PPUSH
31568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31569: LD_ADDR_VAR 0 2
31573: PUSH
31574: LD_INT 22
31576: PUSH
31577: LD_OWVAR 2
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 21
31588: PUSH
31589: LD_INT 1
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 3
31598: PUSH
31599: LD_INT 23
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: LIST
31617: PPUSH
31618: CALL_OW 69
31622: ST_TO_ADDR
// if not tmp then
31623: LD_VAR 0 2
31627: NOT
31628: IFFALSE 31632
// exit ;
31630: GO 31681
// for i in tmp do
31632: LD_ADDR_VAR 0 1
31636: PUSH
31637: LD_VAR 0 2
31641: PUSH
31642: FOR_IN
31643: IFFALSE 31679
// begin if Crawls ( i ) then
31645: LD_VAR 0 1
31649: PPUSH
31650: CALL_OW 318
31654: IFFALSE 31665
// ComWalk ( i ) ;
31656: LD_VAR 0 1
31660: PPUSH
31661: CALL_OW 138
// SetClass ( i , 2 ) ;
31665: LD_VAR 0 1
31669: PPUSH
31670: LD_INT 2
31672: PPUSH
31673: CALL_OW 336
// end ;
31677: GO 31642
31679: POP
31680: POP
// end ;
31681: PPOPN 2
31683: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31684: LD_EXP 70
31688: PUSH
31689: LD_EXP 123
31693: AND
31694: IFFALSE 31982
31696: GO 31698
31698: DISABLE
31699: LD_INT 0
31701: PPUSH
31702: PPUSH
31703: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31704: LD_OWVAR 2
31708: PPUSH
31709: LD_INT 9
31711: PPUSH
31712: LD_INT 1
31714: PPUSH
31715: LD_INT 1
31717: PPUSH
31718: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31722: LD_INT 9
31724: PPUSH
31725: LD_OWVAR 2
31729: PPUSH
31730: CALL_OW 343
// uc_side := 9 ;
31734: LD_ADDR_OWVAR 20
31738: PUSH
31739: LD_INT 9
31741: ST_TO_ADDR
// uc_nation := 2 ;
31742: LD_ADDR_OWVAR 21
31746: PUSH
31747: LD_INT 2
31749: ST_TO_ADDR
// hc_name := Dark Warrior ;
31750: LD_ADDR_OWVAR 26
31754: PUSH
31755: LD_STRING Dark Warrior
31757: ST_TO_ADDR
// hc_gallery :=  ;
31758: LD_ADDR_OWVAR 33
31762: PUSH
31763: LD_STRING 
31765: ST_TO_ADDR
// hc_noskilllimit := true ;
31766: LD_ADDR_OWVAR 76
31770: PUSH
31771: LD_INT 1
31773: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31774: LD_ADDR_OWVAR 31
31778: PUSH
31779: LD_INT 30
31781: PUSH
31782: LD_INT 30
31784: PUSH
31785: LD_INT 30
31787: PUSH
31788: LD_INT 30
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: ST_TO_ADDR
// un := CreateHuman ;
31797: LD_ADDR_VAR 0 3
31801: PUSH
31802: CALL_OW 44
31806: ST_TO_ADDR
// hc_noskilllimit := false ;
31807: LD_ADDR_OWVAR 76
31811: PUSH
31812: LD_INT 0
31814: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31815: LD_VAR 0 3
31819: PPUSH
31820: LD_INT 1
31822: PPUSH
31823: CALL_OW 51
// ToLua ( playRanger() ) ;
31827: LD_STRING playRanger()
31829: PPUSH
31830: CALL_OW 559
// p := 0 ;
31834: LD_ADDR_VAR 0 2
31838: PUSH
31839: LD_INT 0
31841: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31842: LD_INT 35
31844: PPUSH
31845: CALL_OW 67
// p := p + 1 ;
31849: LD_ADDR_VAR 0 2
31853: PUSH
31854: LD_VAR 0 2
31858: PUSH
31859: LD_INT 1
31861: PLUS
31862: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31863: LD_VAR 0 3
31867: PPUSH
31868: CALL_OW 256
31872: PUSH
31873: LD_INT 1000
31875: LESS
31876: IFFALSE 31890
// SetLives ( un , 1000 ) ;
31878: LD_VAR 0 3
31882: PPUSH
31883: LD_INT 1000
31885: PPUSH
31886: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31890: LD_VAR 0 3
31894: PPUSH
31895: LD_INT 81
31897: PUSH
31898: LD_OWVAR 2
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 91
31909: PUSH
31910: LD_VAR 0 3
31914: PUSH
31915: LD_INT 30
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: LIST
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PPUSH
31927: CALL_OW 69
31931: PPUSH
31932: LD_VAR 0 3
31936: PPUSH
31937: CALL_OW 74
31941: PPUSH
31942: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31946: LD_VAR 0 2
31950: PUSH
31951: LD_INT 80
31953: GREATER
31954: PUSH
31955: LD_VAR 0 3
31959: PPUSH
31960: CALL_OW 301
31964: OR
31965: IFFALSE 31842
// if un then
31967: LD_VAR 0 3
31971: IFFALSE 31982
// RemoveUnit ( un ) ;
31973: LD_VAR 0 3
31977: PPUSH
31978: CALL_OW 64
// end ;
31982: PPOPN 3
31984: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31985: LD_EXP 124
31989: IFFALSE 32105
31991: GO 31993
31993: DISABLE
31994: LD_INT 0
31996: PPUSH
31997: PPUSH
31998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31999: LD_ADDR_VAR 0 2
32003: PUSH
32004: LD_INT 81
32006: PUSH
32007: LD_OWVAR 2
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 21
32018: PUSH
32019: LD_INT 1
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PPUSH
32030: CALL_OW 69
32034: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32035: LD_STRING playComputer()
32037: PPUSH
32038: CALL_OW 559
// if not tmp then
32042: LD_VAR 0 2
32046: NOT
32047: IFFALSE 32051
// exit ;
32049: GO 32105
// for i in tmp do
32051: LD_ADDR_VAR 0 1
32055: PUSH
32056: LD_VAR 0 2
32060: PUSH
32061: FOR_IN
32062: IFFALSE 32103
// for j := 1 to 4 do
32064: LD_ADDR_VAR 0 3
32068: PUSH
32069: DOUBLE
32070: LD_INT 1
32072: DEC
32073: ST_TO_ADDR
32074: LD_INT 4
32076: PUSH
32077: FOR_TO
32078: IFFALSE 32099
// SetSkill ( i , j , 10 ) ;
32080: LD_VAR 0 1
32084: PPUSH
32085: LD_VAR 0 3
32089: PPUSH
32090: LD_INT 10
32092: PPUSH
32093: CALL_OW 237
32097: GO 32077
32099: POP
32100: POP
32101: GO 32061
32103: POP
32104: POP
// end ;
32105: PPOPN 3
32107: END
// every 0 0$1 trigger s30 do var i , tmp ;
32108: LD_EXP 125
32112: IFFALSE 32181
32114: GO 32116
32116: DISABLE
32117: LD_INT 0
32119: PPUSH
32120: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32121: LD_ADDR_VAR 0 2
32125: PUSH
32126: LD_INT 22
32128: PUSH
32129: LD_OWVAR 2
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PPUSH
32138: CALL_OW 69
32142: ST_TO_ADDR
// if not tmp then
32143: LD_VAR 0 2
32147: NOT
32148: IFFALSE 32152
// exit ;
32150: GO 32181
// for i in tmp do
32152: LD_ADDR_VAR 0 1
32156: PUSH
32157: LD_VAR 0 2
32161: PUSH
32162: FOR_IN
32163: IFFALSE 32179
// SetLives ( i , 300 ) ;
32165: LD_VAR 0 1
32169: PPUSH
32170: LD_INT 300
32172: PPUSH
32173: CALL_OW 234
32177: GO 32162
32179: POP
32180: POP
// end ;
32181: PPOPN 2
32183: END
// every 0 0$1 trigger s60 do var i , tmp ;
32184: LD_EXP 126
32188: IFFALSE 32257
32190: GO 32192
32192: DISABLE
32193: LD_INT 0
32195: PPUSH
32196: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32197: LD_ADDR_VAR 0 2
32201: PUSH
32202: LD_INT 22
32204: PUSH
32205: LD_OWVAR 2
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PPUSH
32214: CALL_OW 69
32218: ST_TO_ADDR
// if not tmp then
32219: LD_VAR 0 2
32223: NOT
32224: IFFALSE 32228
// exit ;
32226: GO 32257
// for i in tmp do
32228: LD_ADDR_VAR 0 1
32232: PUSH
32233: LD_VAR 0 2
32237: PUSH
32238: FOR_IN
32239: IFFALSE 32255
// SetLives ( i , 600 ) ;
32241: LD_VAR 0 1
32245: PPUSH
32246: LD_INT 600
32248: PPUSH
32249: CALL_OW 234
32253: GO 32238
32255: POP
32256: POP
// end ;
32257: PPOPN 2
32259: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32260: LD_INT 0
32262: PPUSH
// case cmd of 301 :
32263: LD_VAR 0 1
32267: PUSH
32268: LD_INT 301
32270: DOUBLE
32271: EQUAL
32272: IFTRUE 32276
32274: GO 32308
32276: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32277: LD_VAR 0 6
32281: PPUSH
32282: LD_VAR 0 7
32286: PPUSH
32287: LD_VAR 0 8
32291: PPUSH
32292: LD_VAR 0 4
32296: PPUSH
32297: LD_VAR 0 5
32301: PPUSH
32302: CALL 33509 0 5
32306: GO 32429
32308: LD_INT 302
32310: DOUBLE
32311: EQUAL
32312: IFTRUE 32316
32314: GO 32353
32316: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32317: LD_VAR 0 6
32321: PPUSH
32322: LD_VAR 0 7
32326: PPUSH
32327: LD_VAR 0 8
32331: PPUSH
32332: LD_VAR 0 9
32336: PPUSH
32337: LD_VAR 0 4
32341: PPUSH
32342: LD_VAR 0 5
32346: PPUSH
32347: CALL 33600 0 6
32351: GO 32429
32353: LD_INT 303
32355: DOUBLE
32356: EQUAL
32357: IFTRUE 32361
32359: GO 32398
32361: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32362: LD_VAR 0 6
32366: PPUSH
32367: LD_VAR 0 7
32371: PPUSH
32372: LD_VAR 0 8
32376: PPUSH
32377: LD_VAR 0 9
32381: PPUSH
32382: LD_VAR 0 4
32386: PPUSH
32387: LD_VAR 0 5
32391: PPUSH
32392: CALL 32434 0 6
32396: GO 32429
32398: LD_INT 304
32400: DOUBLE
32401: EQUAL
32402: IFTRUE 32406
32404: GO 32428
32406: POP
// hHackTeleport ( unit , x , y ) ; end ;
32407: LD_VAR 0 2
32411: PPUSH
32412: LD_VAR 0 4
32416: PPUSH
32417: LD_VAR 0 5
32421: PPUSH
32422: CALL 34193 0 3
32426: GO 32429
32428: POP
// end ;
32429: LD_VAR 0 12
32433: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32434: LD_INT 0
32436: PPUSH
32437: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32438: LD_VAR 0 1
32442: PUSH
32443: LD_INT 1
32445: LESS
32446: PUSH
32447: LD_VAR 0 1
32451: PUSH
32452: LD_INT 3
32454: GREATER
32455: OR
32456: PUSH
32457: LD_VAR 0 5
32461: PPUSH
32462: LD_VAR 0 6
32466: PPUSH
32467: CALL_OW 428
32471: OR
32472: IFFALSE 32476
// exit ;
32474: GO 33196
// uc_side := your_side ;
32476: LD_ADDR_OWVAR 20
32480: PUSH
32481: LD_OWVAR 2
32485: ST_TO_ADDR
// uc_nation := nation ;
32486: LD_ADDR_OWVAR 21
32490: PUSH
32491: LD_VAR 0 1
32495: ST_TO_ADDR
// bc_level = 1 ;
32496: LD_ADDR_OWVAR 43
32500: PUSH
32501: LD_INT 1
32503: ST_TO_ADDR
// case btype of 1 :
32504: LD_VAR 0 2
32508: PUSH
32509: LD_INT 1
32511: DOUBLE
32512: EQUAL
32513: IFTRUE 32517
32515: GO 32528
32517: POP
// bc_type := b_depot ; 2 :
32518: LD_ADDR_OWVAR 42
32522: PUSH
32523: LD_INT 0
32525: ST_TO_ADDR
32526: GO 33140
32528: LD_INT 2
32530: DOUBLE
32531: EQUAL
32532: IFTRUE 32536
32534: GO 32547
32536: POP
// bc_type := b_warehouse ; 3 :
32537: LD_ADDR_OWVAR 42
32541: PUSH
32542: LD_INT 1
32544: ST_TO_ADDR
32545: GO 33140
32547: LD_INT 3
32549: DOUBLE
32550: EQUAL
32551: IFTRUE 32555
32553: GO 32566
32555: POP
// bc_type := b_lab ; 4 .. 9 :
32556: LD_ADDR_OWVAR 42
32560: PUSH
32561: LD_INT 6
32563: ST_TO_ADDR
32564: GO 33140
32566: LD_INT 4
32568: DOUBLE
32569: GREATEREQUAL
32570: IFFALSE 32578
32572: LD_INT 9
32574: DOUBLE
32575: LESSEQUAL
32576: IFTRUE 32580
32578: GO 32632
32580: POP
// begin bc_type := b_lab_half ;
32581: LD_ADDR_OWVAR 42
32585: PUSH
32586: LD_INT 7
32588: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32589: LD_ADDR_OWVAR 44
32593: PUSH
32594: LD_INT 10
32596: PUSH
32597: LD_INT 11
32599: PUSH
32600: LD_INT 12
32602: PUSH
32603: LD_INT 15
32605: PUSH
32606: LD_INT 14
32608: PUSH
32609: LD_INT 13
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: PUSH
32620: LD_VAR 0 2
32624: PUSH
32625: LD_INT 3
32627: MINUS
32628: ARRAY
32629: ST_TO_ADDR
// end ; 10 .. 13 :
32630: GO 33140
32632: LD_INT 10
32634: DOUBLE
32635: GREATEREQUAL
32636: IFFALSE 32644
32638: LD_INT 13
32640: DOUBLE
32641: LESSEQUAL
32642: IFTRUE 32646
32644: GO 32723
32646: POP
// begin bc_type := b_lab_full ;
32647: LD_ADDR_OWVAR 42
32651: PUSH
32652: LD_INT 8
32654: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32655: LD_ADDR_OWVAR 44
32659: PUSH
32660: LD_INT 10
32662: PUSH
32663: LD_INT 12
32665: PUSH
32666: LD_INT 14
32668: PUSH
32669: LD_INT 13
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: PUSH
32678: LD_VAR 0 2
32682: PUSH
32683: LD_INT 9
32685: MINUS
32686: ARRAY
32687: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32688: LD_ADDR_OWVAR 45
32692: PUSH
32693: LD_INT 11
32695: PUSH
32696: LD_INT 15
32698: PUSH
32699: LD_INT 12
32701: PUSH
32702: LD_INT 15
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: PUSH
32711: LD_VAR 0 2
32715: PUSH
32716: LD_INT 9
32718: MINUS
32719: ARRAY
32720: ST_TO_ADDR
// end ; 14 :
32721: GO 33140
32723: LD_INT 14
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32731
32729: GO 32742
32731: POP
// bc_type := b_workshop ; 15 :
32732: LD_ADDR_OWVAR 42
32736: PUSH
32737: LD_INT 2
32739: ST_TO_ADDR
32740: GO 33140
32742: LD_INT 15
32744: DOUBLE
32745: EQUAL
32746: IFTRUE 32750
32748: GO 32761
32750: POP
// bc_type := b_factory ; 16 :
32751: LD_ADDR_OWVAR 42
32755: PUSH
32756: LD_INT 3
32758: ST_TO_ADDR
32759: GO 33140
32761: LD_INT 16
32763: DOUBLE
32764: EQUAL
32765: IFTRUE 32769
32767: GO 32780
32769: POP
// bc_type := b_ext_gun ; 17 :
32770: LD_ADDR_OWVAR 42
32774: PUSH
32775: LD_INT 17
32777: ST_TO_ADDR
32778: GO 33140
32780: LD_INT 17
32782: DOUBLE
32783: EQUAL
32784: IFTRUE 32788
32786: GO 32816
32788: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32789: LD_ADDR_OWVAR 42
32793: PUSH
32794: LD_INT 19
32796: PUSH
32797: LD_INT 23
32799: PUSH
32800: LD_INT 19
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: LIST
32807: PUSH
32808: LD_VAR 0 1
32812: ARRAY
32813: ST_TO_ADDR
32814: GO 33140
32816: LD_INT 18
32818: DOUBLE
32819: EQUAL
32820: IFTRUE 32824
32822: GO 32835
32824: POP
// bc_type := b_ext_radar ; 19 :
32825: LD_ADDR_OWVAR 42
32829: PUSH
32830: LD_INT 20
32832: ST_TO_ADDR
32833: GO 33140
32835: LD_INT 19
32837: DOUBLE
32838: EQUAL
32839: IFTRUE 32843
32841: GO 32854
32843: POP
// bc_type := b_ext_radio ; 20 :
32844: LD_ADDR_OWVAR 42
32848: PUSH
32849: LD_INT 22
32851: ST_TO_ADDR
32852: GO 33140
32854: LD_INT 20
32856: DOUBLE
32857: EQUAL
32858: IFTRUE 32862
32860: GO 32873
32862: POP
// bc_type := b_ext_siberium ; 21 :
32863: LD_ADDR_OWVAR 42
32867: PUSH
32868: LD_INT 21
32870: ST_TO_ADDR
32871: GO 33140
32873: LD_INT 21
32875: DOUBLE
32876: EQUAL
32877: IFTRUE 32881
32879: GO 32892
32881: POP
// bc_type := b_ext_computer ; 22 :
32882: LD_ADDR_OWVAR 42
32886: PUSH
32887: LD_INT 24
32889: ST_TO_ADDR
32890: GO 33140
32892: LD_INT 22
32894: DOUBLE
32895: EQUAL
32896: IFTRUE 32900
32898: GO 32911
32900: POP
// bc_type := b_ext_track ; 23 :
32901: LD_ADDR_OWVAR 42
32905: PUSH
32906: LD_INT 16
32908: ST_TO_ADDR
32909: GO 33140
32911: LD_INT 23
32913: DOUBLE
32914: EQUAL
32915: IFTRUE 32919
32917: GO 32930
32919: POP
// bc_type := b_ext_laser ; 24 :
32920: LD_ADDR_OWVAR 42
32924: PUSH
32925: LD_INT 25
32927: ST_TO_ADDR
32928: GO 33140
32930: LD_INT 24
32932: DOUBLE
32933: EQUAL
32934: IFTRUE 32938
32936: GO 32949
32938: POP
// bc_type := b_control_tower ; 25 :
32939: LD_ADDR_OWVAR 42
32943: PUSH
32944: LD_INT 36
32946: ST_TO_ADDR
32947: GO 33140
32949: LD_INT 25
32951: DOUBLE
32952: EQUAL
32953: IFTRUE 32957
32955: GO 32968
32957: POP
// bc_type := b_breastwork ; 26 :
32958: LD_ADDR_OWVAR 42
32962: PUSH
32963: LD_INT 31
32965: ST_TO_ADDR
32966: GO 33140
32968: LD_INT 26
32970: DOUBLE
32971: EQUAL
32972: IFTRUE 32976
32974: GO 32987
32976: POP
// bc_type := b_bunker ; 27 :
32977: LD_ADDR_OWVAR 42
32981: PUSH
32982: LD_INT 32
32984: ST_TO_ADDR
32985: GO 33140
32987: LD_INT 27
32989: DOUBLE
32990: EQUAL
32991: IFTRUE 32995
32993: GO 33006
32995: POP
// bc_type := b_turret ; 28 :
32996: LD_ADDR_OWVAR 42
33000: PUSH
33001: LD_INT 33
33003: ST_TO_ADDR
33004: GO 33140
33006: LD_INT 28
33008: DOUBLE
33009: EQUAL
33010: IFTRUE 33014
33012: GO 33025
33014: POP
// bc_type := b_armoury ; 29 :
33015: LD_ADDR_OWVAR 42
33019: PUSH
33020: LD_INT 4
33022: ST_TO_ADDR
33023: GO 33140
33025: LD_INT 29
33027: DOUBLE
33028: EQUAL
33029: IFTRUE 33033
33031: GO 33044
33033: POP
// bc_type := b_barracks ; 30 :
33034: LD_ADDR_OWVAR 42
33038: PUSH
33039: LD_INT 5
33041: ST_TO_ADDR
33042: GO 33140
33044: LD_INT 30
33046: DOUBLE
33047: EQUAL
33048: IFTRUE 33052
33050: GO 33063
33052: POP
// bc_type := b_solar_power ; 31 :
33053: LD_ADDR_OWVAR 42
33057: PUSH
33058: LD_INT 27
33060: ST_TO_ADDR
33061: GO 33140
33063: LD_INT 31
33065: DOUBLE
33066: EQUAL
33067: IFTRUE 33071
33069: GO 33082
33071: POP
// bc_type := b_oil_power ; 32 :
33072: LD_ADDR_OWVAR 42
33076: PUSH
33077: LD_INT 26
33079: ST_TO_ADDR
33080: GO 33140
33082: LD_INT 32
33084: DOUBLE
33085: EQUAL
33086: IFTRUE 33090
33088: GO 33101
33090: POP
// bc_type := b_siberite_power ; 33 :
33091: LD_ADDR_OWVAR 42
33095: PUSH
33096: LD_INT 28
33098: ST_TO_ADDR
33099: GO 33140
33101: LD_INT 33
33103: DOUBLE
33104: EQUAL
33105: IFTRUE 33109
33107: GO 33120
33109: POP
// bc_type := b_oil_mine ; 34 :
33110: LD_ADDR_OWVAR 42
33114: PUSH
33115: LD_INT 29
33117: ST_TO_ADDR
33118: GO 33140
33120: LD_INT 34
33122: DOUBLE
33123: EQUAL
33124: IFTRUE 33128
33126: GO 33139
33128: POP
// bc_type := b_siberite_mine ; end ;
33129: LD_ADDR_OWVAR 42
33133: PUSH
33134: LD_INT 30
33136: ST_TO_ADDR
33137: GO 33140
33139: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33140: LD_ADDR_VAR 0 8
33144: PUSH
33145: LD_VAR 0 5
33149: PPUSH
33150: LD_VAR 0 6
33154: PPUSH
33155: LD_VAR 0 3
33159: PPUSH
33160: CALL_OW 47
33164: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33165: LD_OWVAR 42
33169: PUSH
33170: LD_INT 32
33172: PUSH
33173: LD_INT 33
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: IN
33180: IFFALSE 33196
// PlaceWeaponTurret ( b , weapon ) ;
33182: LD_VAR 0 8
33186: PPUSH
33187: LD_VAR 0 4
33191: PPUSH
33192: CALL_OW 431
// end ;
33196: LD_VAR 0 7
33200: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33201: LD_INT 0
33203: PPUSH
33204: PPUSH
33205: PPUSH
33206: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33207: LD_ADDR_VAR 0 4
33211: PUSH
33212: LD_INT 22
33214: PUSH
33215: LD_OWVAR 2
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 2
33226: PUSH
33227: LD_INT 30
33229: PUSH
33230: LD_INT 0
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 30
33239: PUSH
33240: LD_INT 1
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: LIST
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PPUSH
33256: CALL_OW 69
33260: ST_TO_ADDR
// if not tmp then
33261: LD_VAR 0 4
33265: NOT
33266: IFFALSE 33270
// exit ;
33268: GO 33329
// for i in tmp do
33270: LD_ADDR_VAR 0 2
33274: PUSH
33275: LD_VAR 0 4
33279: PUSH
33280: FOR_IN
33281: IFFALSE 33327
// for j = 1 to 3 do
33283: LD_ADDR_VAR 0 3
33287: PUSH
33288: DOUBLE
33289: LD_INT 1
33291: DEC
33292: ST_TO_ADDR
33293: LD_INT 3
33295: PUSH
33296: FOR_TO
33297: IFFALSE 33323
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33299: LD_VAR 0 2
33303: PPUSH
33304: CALL_OW 274
33308: PPUSH
33309: LD_VAR 0 3
33313: PPUSH
33314: LD_INT 99999
33316: PPUSH
33317: CALL_OW 277
33321: GO 33296
33323: POP
33324: POP
33325: GO 33280
33327: POP
33328: POP
// end ;
33329: LD_VAR 0 1
33333: RET
// export function hHackSetLevel10 ; var i , j ; begin
33334: LD_INT 0
33336: PPUSH
33337: PPUSH
33338: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33339: LD_ADDR_VAR 0 2
33343: PUSH
33344: LD_INT 21
33346: PUSH
33347: LD_INT 1
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PPUSH
33354: CALL_OW 69
33358: PUSH
33359: FOR_IN
33360: IFFALSE 33412
// if IsSelected ( i ) then
33362: LD_VAR 0 2
33366: PPUSH
33367: CALL_OW 306
33371: IFFALSE 33410
// begin for j := 1 to 4 do
33373: LD_ADDR_VAR 0 3
33377: PUSH
33378: DOUBLE
33379: LD_INT 1
33381: DEC
33382: ST_TO_ADDR
33383: LD_INT 4
33385: PUSH
33386: FOR_TO
33387: IFFALSE 33408
// SetSkill ( i , j , 10 ) ;
33389: LD_VAR 0 2
33393: PPUSH
33394: LD_VAR 0 3
33398: PPUSH
33399: LD_INT 10
33401: PPUSH
33402: CALL_OW 237
33406: GO 33386
33408: POP
33409: POP
// end ;
33410: GO 33359
33412: POP
33413: POP
// end ;
33414: LD_VAR 0 1
33418: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33419: LD_INT 0
33421: PPUSH
33422: PPUSH
33423: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33424: LD_ADDR_VAR 0 2
33428: PUSH
33429: LD_INT 22
33431: PUSH
33432: LD_OWVAR 2
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 21
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PPUSH
33455: CALL_OW 69
33459: PUSH
33460: FOR_IN
33461: IFFALSE 33502
// begin for j := 1 to 4 do
33463: LD_ADDR_VAR 0 3
33467: PUSH
33468: DOUBLE
33469: LD_INT 1
33471: DEC
33472: ST_TO_ADDR
33473: LD_INT 4
33475: PUSH
33476: FOR_TO
33477: IFFALSE 33498
// SetSkill ( i , j , 10 ) ;
33479: LD_VAR 0 2
33483: PPUSH
33484: LD_VAR 0 3
33488: PPUSH
33489: LD_INT 10
33491: PPUSH
33492: CALL_OW 237
33496: GO 33476
33498: POP
33499: POP
// end ;
33500: GO 33460
33502: POP
33503: POP
// end ;
33504: LD_VAR 0 1
33508: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33509: LD_INT 0
33511: PPUSH
// uc_side := your_side ;
33512: LD_ADDR_OWVAR 20
33516: PUSH
33517: LD_OWVAR 2
33521: ST_TO_ADDR
// uc_nation := nation ;
33522: LD_ADDR_OWVAR 21
33526: PUSH
33527: LD_VAR 0 1
33531: ST_TO_ADDR
// InitHc ;
33532: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33536: LD_INT 0
33538: PPUSH
33539: LD_VAR 0 2
33543: PPUSH
33544: LD_VAR 0 3
33548: PPUSH
33549: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33553: LD_VAR 0 4
33557: PPUSH
33558: LD_VAR 0 5
33562: PPUSH
33563: CALL_OW 428
33567: PUSH
33568: LD_INT 0
33570: EQUAL
33571: IFFALSE 33595
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33573: CALL_OW 44
33577: PPUSH
33578: LD_VAR 0 4
33582: PPUSH
33583: LD_VAR 0 5
33587: PPUSH
33588: LD_INT 1
33590: PPUSH
33591: CALL_OW 48
// end ;
33595: LD_VAR 0 6
33599: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33600: LD_INT 0
33602: PPUSH
33603: PPUSH
// uc_side := your_side ;
33604: LD_ADDR_OWVAR 20
33608: PUSH
33609: LD_OWVAR 2
33613: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33614: LD_VAR 0 1
33618: PUSH
33619: LD_INT 1
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: LD_INT 3
33627: PUSH
33628: LD_INT 4
33630: PUSH
33631: LD_INT 5
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: IN
33641: IFFALSE 33653
// uc_nation := nation_american else
33643: LD_ADDR_OWVAR 21
33647: PUSH
33648: LD_INT 1
33650: ST_TO_ADDR
33651: GO 33696
// if chassis in [ 11 , 12 , 13 , 14 ] then
33653: LD_VAR 0 1
33657: PUSH
33658: LD_INT 11
33660: PUSH
33661: LD_INT 12
33663: PUSH
33664: LD_INT 13
33666: PUSH
33667: LD_INT 14
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: IN
33676: IFFALSE 33688
// uc_nation := nation_arabian else
33678: LD_ADDR_OWVAR 21
33682: PUSH
33683: LD_INT 2
33685: ST_TO_ADDR
33686: GO 33696
// uc_nation := nation_russian ;
33688: LD_ADDR_OWVAR 21
33692: PUSH
33693: LD_INT 3
33695: ST_TO_ADDR
// vc_chassis := chassis ;
33696: LD_ADDR_OWVAR 37
33700: PUSH
33701: LD_VAR 0 1
33705: ST_TO_ADDR
// vc_engine := engine ;
33706: LD_ADDR_OWVAR 39
33710: PUSH
33711: LD_VAR 0 2
33715: ST_TO_ADDR
// vc_control := control ;
33716: LD_ADDR_OWVAR 38
33720: PUSH
33721: LD_VAR 0 3
33725: ST_TO_ADDR
// vc_weapon := weapon ;
33726: LD_ADDR_OWVAR 40
33730: PUSH
33731: LD_VAR 0 4
33735: ST_TO_ADDR
// un := CreateVehicle ;
33736: LD_ADDR_VAR 0 8
33740: PUSH
33741: CALL_OW 45
33745: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33746: LD_VAR 0 8
33750: PPUSH
33751: LD_INT 0
33753: PPUSH
33754: LD_INT 5
33756: PPUSH
33757: CALL_OW 12
33761: PPUSH
33762: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33766: LD_VAR 0 8
33770: PPUSH
33771: LD_VAR 0 5
33775: PPUSH
33776: LD_VAR 0 6
33780: PPUSH
33781: LD_INT 1
33783: PPUSH
33784: CALL_OW 48
// end ;
33788: LD_VAR 0 7
33792: RET
// export hInvincible ; every 1 do
33793: GO 33795
33795: DISABLE
// hInvincible := [ ] ;
33796: LD_ADDR_EXP 127
33800: PUSH
33801: EMPTY
33802: ST_TO_ADDR
33803: END
// every 10 do var i ;
33804: GO 33806
33806: DISABLE
33807: LD_INT 0
33809: PPUSH
// begin enable ;
33810: ENABLE
// if not hInvincible then
33811: LD_EXP 127
33815: NOT
33816: IFFALSE 33820
// exit ;
33818: GO 33864
// for i in hInvincible do
33820: LD_ADDR_VAR 0 1
33824: PUSH
33825: LD_EXP 127
33829: PUSH
33830: FOR_IN
33831: IFFALSE 33862
// if GetLives ( i ) < 1000 then
33833: LD_VAR 0 1
33837: PPUSH
33838: CALL_OW 256
33842: PUSH
33843: LD_INT 1000
33845: LESS
33846: IFFALSE 33860
// SetLives ( i , 1000 ) ;
33848: LD_VAR 0 1
33852: PPUSH
33853: LD_INT 1000
33855: PPUSH
33856: CALL_OW 234
33860: GO 33830
33862: POP
33863: POP
// end ;
33864: PPOPN 1
33866: END
// export function hHackInvincible ; var i ; begin
33867: LD_INT 0
33869: PPUSH
33870: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33871: LD_ADDR_VAR 0 2
33875: PUSH
33876: LD_INT 2
33878: PUSH
33879: LD_INT 21
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 21
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: LIST
33903: PPUSH
33904: CALL_OW 69
33908: PUSH
33909: FOR_IN
33910: IFFALSE 33971
// if IsSelected ( i ) then
33912: LD_VAR 0 2
33916: PPUSH
33917: CALL_OW 306
33921: IFFALSE 33969
// begin if i in hInvincible then
33923: LD_VAR 0 2
33927: PUSH
33928: LD_EXP 127
33932: IN
33933: IFFALSE 33953
// hInvincible := hInvincible diff i else
33935: LD_ADDR_EXP 127
33939: PUSH
33940: LD_EXP 127
33944: PUSH
33945: LD_VAR 0 2
33949: DIFF
33950: ST_TO_ADDR
33951: GO 33969
// hInvincible := hInvincible union i ;
33953: LD_ADDR_EXP 127
33957: PUSH
33958: LD_EXP 127
33962: PUSH
33963: LD_VAR 0 2
33967: UNION
33968: ST_TO_ADDR
// end ;
33969: GO 33909
33971: POP
33972: POP
// end ;
33973: LD_VAR 0 1
33977: RET
// export function hHackInvisible ; var i , j ; begin
33978: LD_INT 0
33980: PPUSH
33981: PPUSH
33982: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33983: LD_ADDR_VAR 0 2
33987: PUSH
33988: LD_INT 21
33990: PUSH
33991: LD_INT 1
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PPUSH
33998: CALL_OW 69
34002: PUSH
34003: FOR_IN
34004: IFFALSE 34028
// if IsSelected ( i ) then
34006: LD_VAR 0 2
34010: PPUSH
34011: CALL_OW 306
34015: IFFALSE 34026
// ComForceInvisible ( i ) ;
34017: LD_VAR 0 2
34021: PPUSH
34022: CALL_OW 496
34026: GO 34003
34028: POP
34029: POP
// end ;
34030: LD_VAR 0 1
34034: RET
// export function hHackChangeYourSide ; begin
34035: LD_INT 0
34037: PPUSH
// if your_side = 8 then
34038: LD_OWVAR 2
34042: PUSH
34043: LD_INT 8
34045: EQUAL
34046: IFFALSE 34058
// your_side := 0 else
34048: LD_ADDR_OWVAR 2
34052: PUSH
34053: LD_INT 0
34055: ST_TO_ADDR
34056: GO 34072
// your_side := your_side + 1 ;
34058: LD_ADDR_OWVAR 2
34062: PUSH
34063: LD_OWVAR 2
34067: PUSH
34068: LD_INT 1
34070: PLUS
34071: ST_TO_ADDR
// end ;
34072: LD_VAR 0 1
34076: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34077: LD_INT 0
34079: PPUSH
34080: PPUSH
34081: PPUSH
// for i in all_units do
34082: LD_ADDR_VAR 0 2
34086: PUSH
34087: LD_OWVAR 3
34091: PUSH
34092: FOR_IN
34093: IFFALSE 34171
// if IsSelected ( i ) then
34095: LD_VAR 0 2
34099: PPUSH
34100: CALL_OW 306
34104: IFFALSE 34169
// begin j := GetSide ( i ) ;
34106: LD_ADDR_VAR 0 3
34110: PUSH
34111: LD_VAR 0 2
34115: PPUSH
34116: CALL_OW 255
34120: ST_TO_ADDR
// if j = 8 then
34121: LD_VAR 0 3
34125: PUSH
34126: LD_INT 8
34128: EQUAL
34129: IFFALSE 34141
// j := 0 else
34131: LD_ADDR_VAR 0 3
34135: PUSH
34136: LD_INT 0
34138: ST_TO_ADDR
34139: GO 34155
// j := j + 1 ;
34141: LD_ADDR_VAR 0 3
34145: PUSH
34146: LD_VAR 0 3
34150: PUSH
34151: LD_INT 1
34153: PLUS
34154: ST_TO_ADDR
// SetSide ( i , j ) ;
34155: LD_VAR 0 2
34159: PPUSH
34160: LD_VAR 0 3
34164: PPUSH
34165: CALL_OW 235
// end ;
34169: GO 34092
34171: POP
34172: POP
// end ;
34173: LD_VAR 0 1
34177: RET
// export function hHackFog ; begin
34178: LD_INT 0
34180: PPUSH
// FogOff ( true ) ;
34181: LD_INT 1
34183: PPUSH
34184: CALL_OW 344
// end ;
34188: LD_VAR 0 1
34192: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34193: LD_INT 0
34195: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34196: LD_VAR 0 1
34200: PPUSH
34201: LD_VAR 0 2
34205: PPUSH
34206: LD_VAR 0 3
34210: PPUSH
34211: LD_INT 1
34213: PPUSH
34214: LD_INT 1
34216: PPUSH
34217: CALL_OW 483
// CenterOnXY ( x , y ) ;
34221: LD_VAR 0 2
34225: PPUSH
34226: LD_VAR 0 3
34230: PPUSH
34231: CALL_OW 84
// end ; end_of_file
34235: LD_VAR 0 4
34239: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34240: LD_INT 0
34242: PPUSH
34243: PPUSH
34244: PPUSH
34245: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34246: LD_VAR 0 1
34250: PPUSH
34251: CALL_OW 264
34255: PUSH
34256: LD_EXP 54
34260: EQUAL
34261: IFFALSE 34333
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34263: LD_INT 68
34265: PPUSH
34266: LD_VAR 0 1
34270: PPUSH
34271: CALL_OW 255
34275: PPUSH
34276: CALL_OW 321
34280: PUSH
34281: LD_INT 2
34283: EQUAL
34284: IFFALSE 34296
// eff := 70 else
34286: LD_ADDR_VAR 0 4
34290: PUSH
34291: LD_INT 70
34293: ST_TO_ADDR
34294: GO 34304
// eff := 30 ;
34296: LD_ADDR_VAR 0 4
34300: PUSH
34301: LD_INT 30
34303: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34304: LD_VAR 0 1
34308: PPUSH
34309: CALL_OW 250
34313: PPUSH
34314: LD_VAR 0 1
34318: PPUSH
34319: CALL_OW 251
34323: PPUSH
34324: LD_VAR 0 4
34328: PPUSH
34329: CALL_OW 495
// end ; end ;
34333: LD_VAR 0 2
34337: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34338: LD_INT 0
34340: PPUSH
// end ;
34341: LD_VAR 0 4
34345: RET
// export function SOS_Command ( cmd ) ; begin
34346: LD_INT 0
34348: PPUSH
// end ;
34349: LD_VAR 0 2
34353: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34354: LD_INT 0
34356: PPUSH
// end ;
34357: LD_VAR 0 6
34361: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34362: LD_INT 0
34364: PPUSH
34365: PPUSH
// if not vehicle or not factory then
34366: LD_VAR 0 1
34370: NOT
34371: PUSH
34372: LD_VAR 0 2
34376: NOT
34377: OR
34378: IFFALSE 34382
// exit ;
34380: GO 34613
// if factoryWaypoints >= factory then
34382: LD_EXP 128
34386: PUSH
34387: LD_VAR 0 2
34391: GREATEREQUAL
34392: IFFALSE 34613
// if factoryWaypoints [ factory ] then
34394: LD_EXP 128
34398: PUSH
34399: LD_VAR 0 2
34403: ARRAY
34404: IFFALSE 34613
// begin if GetControl ( vehicle ) = control_manual then
34406: LD_VAR 0 1
34410: PPUSH
34411: CALL_OW 263
34415: PUSH
34416: LD_INT 1
34418: EQUAL
34419: IFFALSE 34500
// begin driver := IsDrivenBy ( vehicle ) ;
34421: LD_ADDR_VAR 0 4
34425: PUSH
34426: LD_VAR 0 1
34430: PPUSH
34431: CALL_OW 311
34435: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34436: LD_VAR 0 4
34440: PPUSH
34441: LD_EXP 128
34445: PUSH
34446: LD_VAR 0 2
34450: ARRAY
34451: PUSH
34452: LD_INT 3
34454: ARRAY
34455: PPUSH
34456: LD_EXP 128
34460: PUSH
34461: LD_VAR 0 2
34465: ARRAY
34466: PUSH
34467: LD_INT 4
34469: ARRAY
34470: PPUSH
34471: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34475: LD_VAR 0 4
34479: PPUSH
34480: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34484: LD_VAR 0 4
34488: PPUSH
34489: LD_VAR 0 2
34493: PPUSH
34494: CALL_OW 180
// end else
34498: GO 34613
// if GetControl ( vehicle ) = control_remote then
34500: LD_VAR 0 1
34504: PPUSH
34505: CALL_OW 263
34509: PUSH
34510: LD_INT 2
34512: EQUAL
34513: IFFALSE 34574
// begin wait ( 0 0$2 ) ;
34515: LD_INT 70
34517: PPUSH
34518: CALL_OW 67
// if Connect ( vehicle ) then
34522: LD_VAR 0 1
34526: PPUSH
34527: CALL 46837 0 1
34531: IFFALSE 34572
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34533: LD_VAR 0 1
34537: PPUSH
34538: LD_EXP 128
34542: PUSH
34543: LD_VAR 0 2
34547: ARRAY
34548: PUSH
34549: LD_INT 3
34551: ARRAY
34552: PPUSH
34553: LD_EXP 128
34557: PUSH
34558: LD_VAR 0 2
34562: ARRAY
34563: PUSH
34564: LD_INT 4
34566: ARRAY
34567: PPUSH
34568: CALL_OW 171
// end else
34572: GO 34613
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34574: LD_VAR 0 1
34578: PPUSH
34579: LD_EXP 128
34583: PUSH
34584: LD_VAR 0 2
34588: ARRAY
34589: PUSH
34590: LD_INT 3
34592: ARRAY
34593: PPUSH
34594: LD_EXP 128
34598: PUSH
34599: LD_VAR 0 2
34603: ARRAY
34604: PUSH
34605: LD_INT 4
34607: ARRAY
34608: PPUSH
34609: CALL_OW 171
// end ; end ;
34613: LD_VAR 0 3
34617: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34618: LD_INT 0
34620: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34621: LD_VAR 0 1
34625: PUSH
34626: LD_INT 250
34628: EQUAL
34629: PUSH
34630: LD_VAR 0 2
34634: PPUSH
34635: CALL_OW 264
34639: PUSH
34640: LD_EXP 57
34644: EQUAL
34645: AND
34646: IFFALSE 34667
// MinerPlaceMine ( unit , x , y ) ;
34648: LD_VAR 0 2
34652: PPUSH
34653: LD_VAR 0 4
34657: PPUSH
34658: LD_VAR 0 5
34662: PPUSH
34663: CALL 37395 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34667: LD_VAR 0 1
34671: PUSH
34672: LD_INT 251
34674: EQUAL
34675: PUSH
34676: LD_VAR 0 2
34680: PPUSH
34681: CALL_OW 264
34685: PUSH
34686: LD_EXP 57
34690: EQUAL
34691: AND
34692: IFFALSE 34713
// MinerDetonateMine ( unit , x , y ) ;
34694: LD_VAR 0 2
34698: PPUSH
34699: LD_VAR 0 4
34703: PPUSH
34704: LD_VAR 0 5
34708: PPUSH
34709: CALL 37672 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34713: LD_VAR 0 1
34717: PUSH
34718: LD_INT 252
34720: EQUAL
34721: PUSH
34722: LD_VAR 0 2
34726: PPUSH
34727: CALL_OW 264
34731: PUSH
34732: LD_EXP 57
34736: EQUAL
34737: AND
34738: IFFALSE 34759
// MinerCreateMinefield ( unit , x , y ) ;
34740: LD_VAR 0 2
34744: PPUSH
34745: LD_VAR 0 4
34749: PPUSH
34750: LD_VAR 0 5
34754: PPUSH
34755: CALL 38089 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34759: LD_VAR 0 1
34763: PUSH
34764: LD_INT 253
34766: EQUAL
34767: PUSH
34768: LD_VAR 0 2
34772: PPUSH
34773: CALL_OW 257
34777: PUSH
34778: LD_INT 5
34780: EQUAL
34781: AND
34782: IFFALSE 34803
// ComBinocular ( unit , x , y ) ;
34784: LD_VAR 0 2
34788: PPUSH
34789: LD_VAR 0 4
34793: PPUSH
34794: LD_VAR 0 5
34798: PPUSH
34799: CALL 38460 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34803: LD_VAR 0 1
34807: PUSH
34808: LD_INT 254
34810: EQUAL
34811: PUSH
34812: LD_VAR 0 2
34816: PPUSH
34817: CALL_OW 264
34821: PUSH
34822: LD_EXP 52
34826: EQUAL
34827: AND
34828: PUSH
34829: LD_VAR 0 3
34833: PPUSH
34834: CALL_OW 263
34838: PUSH
34839: LD_INT 3
34841: EQUAL
34842: AND
34843: IFFALSE 34859
// HackDestroyVehicle ( unit , selectedUnit ) ;
34845: LD_VAR 0 2
34849: PPUSH
34850: LD_VAR 0 3
34854: PPUSH
34855: CALL 36755 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34859: LD_VAR 0 1
34863: PUSH
34864: LD_INT 255
34866: EQUAL
34867: PUSH
34868: LD_VAR 0 2
34872: PPUSH
34873: CALL_OW 264
34877: PUSH
34878: LD_INT 14
34880: PUSH
34881: LD_INT 53
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: IN
34888: AND
34889: PUSH
34890: LD_VAR 0 4
34894: PPUSH
34895: LD_VAR 0 5
34899: PPUSH
34900: CALL_OW 488
34904: AND
34905: IFFALSE 34929
// CutTreeXYR ( unit , x , y , 12 ) ;
34907: LD_VAR 0 2
34911: PPUSH
34912: LD_VAR 0 4
34916: PPUSH
34917: LD_VAR 0 5
34921: PPUSH
34922: LD_INT 12
34924: PPUSH
34925: CALL 35321 0 4
// if cmd = 256 then
34929: LD_VAR 0 1
34933: PUSH
34934: LD_INT 256
34936: EQUAL
34937: IFFALSE 34958
// SetFactoryWaypoint ( unit , x , y ) ;
34939: LD_VAR 0 2
34943: PPUSH
34944: LD_VAR 0 4
34948: PPUSH
34949: LD_VAR 0 5
34953: PPUSH
34954: CALL 34963 0 3
// end ;
34958: LD_VAR 0 6
34962: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34963: LD_INT 0
34965: PPUSH
34966: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34967: LD_VAR 0 1
34971: NOT
34972: PUSH
34973: LD_VAR 0 2
34977: PPUSH
34978: LD_VAR 0 3
34982: PPUSH
34983: CALL_OW 488
34987: NOT
34988: OR
34989: PUSH
34990: LD_VAR 0 1
34994: PPUSH
34995: CALL_OW 266
34999: PUSH
35000: LD_INT 3
35002: NONEQUAL
35003: PUSH
35004: LD_VAR 0 1
35008: PPUSH
35009: CALL_OW 247
35013: PUSH
35014: LD_INT 1
35016: EQUAL
35017: NOT
35018: AND
35019: OR
35020: IFFALSE 35024
// exit ;
35022: GO 35173
// if GetType ( factory ) = unit_human then
35024: LD_VAR 0 1
35028: PPUSH
35029: CALL_OW 247
35033: PUSH
35034: LD_INT 1
35036: EQUAL
35037: IFFALSE 35054
// factory := IsInUnit ( factory ) ;
35039: LD_ADDR_VAR 0 1
35043: PUSH
35044: LD_VAR 0 1
35048: PPUSH
35049: CALL_OW 310
35053: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35054: LD_VAR 0 1
35058: PPUSH
35059: CALL_OW 266
35063: PUSH
35064: LD_INT 3
35066: NONEQUAL
35067: IFFALSE 35071
// exit ;
35069: GO 35173
// if HexInfo ( x , y ) = factory then
35071: LD_VAR 0 2
35075: PPUSH
35076: LD_VAR 0 3
35080: PPUSH
35081: CALL_OW 428
35085: PUSH
35086: LD_VAR 0 1
35090: EQUAL
35091: IFFALSE 35118
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35093: LD_ADDR_EXP 128
35097: PUSH
35098: LD_EXP 128
35102: PPUSH
35103: LD_VAR 0 1
35107: PPUSH
35108: LD_INT 0
35110: PPUSH
35111: CALL_OW 1
35115: ST_TO_ADDR
35116: GO 35169
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35118: LD_ADDR_EXP 128
35122: PUSH
35123: LD_EXP 128
35127: PPUSH
35128: LD_VAR 0 1
35132: PPUSH
35133: LD_VAR 0 1
35137: PPUSH
35138: CALL_OW 255
35142: PUSH
35143: LD_VAR 0 1
35147: PUSH
35148: LD_VAR 0 2
35152: PUSH
35153: LD_VAR 0 3
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: PPUSH
35164: CALL_OW 1
35168: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35169: CALL 35178 0 0
// end ;
35173: LD_VAR 0 4
35177: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
35178: LD_INT 0
35180: PPUSH
35181: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35182: LD_STRING resetFactoryWaypoint();
35184: PPUSH
35185: CALL_OW 559
// if factoryWaypoints then
35189: LD_EXP 128
35193: IFFALSE 35316
// begin for i := 1 to factoryWaypoints do
35195: LD_ADDR_VAR 0 2
35199: PUSH
35200: DOUBLE
35201: LD_INT 1
35203: DEC
35204: ST_TO_ADDR
35205: LD_EXP 128
35209: PUSH
35210: FOR_TO
35211: IFFALSE 35314
// if factoryWaypoints [ i ] then
35213: LD_EXP 128
35217: PUSH
35218: LD_VAR 0 2
35222: ARRAY
35223: IFFALSE 35312
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
35225: LD_STRING setFactoryWaypointXY(
35227: PUSH
35228: LD_EXP 128
35232: PUSH
35233: LD_VAR 0 2
35237: ARRAY
35238: PUSH
35239: LD_INT 1
35241: ARRAY
35242: STR
35243: PUSH
35244: LD_STRING ,
35246: STR
35247: PUSH
35248: LD_EXP 128
35252: PUSH
35253: LD_VAR 0 2
35257: ARRAY
35258: PUSH
35259: LD_INT 2
35261: ARRAY
35262: STR
35263: PUSH
35264: LD_STRING ,
35266: STR
35267: PUSH
35268: LD_EXP 128
35272: PUSH
35273: LD_VAR 0 2
35277: ARRAY
35278: PUSH
35279: LD_INT 3
35281: ARRAY
35282: STR
35283: PUSH
35284: LD_STRING ,
35286: STR
35287: PUSH
35288: LD_EXP 128
35292: PUSH
35293: LD_VAR 0 2
35297: ARRAY
35298: PUSH
35299: LD_INT 4
35301: ARRAY
35302: STR
35303: PUSH
35304: LD_STRING )
35306: STR
35307: PPUSH
35308: CALL_OW 559
35312: GO 35210
35314: POP
35315: POP
// end ; end ;
35316: LD_VAR 0 1
35320: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35321: LD_INT 0
35323: PPUSH
35324: PPUSH
35325: PPUSH
35326: PPUSH
35327: PPUSH
35328: PPUSH
35329: PPUSH
35330: PPUSH
35331: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35332: LD_VAR 0 1
35336: NOT
35337: PUSH
35338: LD_VAR 0 2
35342: PPUSH
35343: LD_VAR 0 3
35347: PPUSH
35348: CALL_OW 488
35352: NOT
35353: OR
35354: PUSH
35355: LD_VAR 0 4
35359: NOT
35360: OR
35361: IFFALSE 35365
// exit ;
35363: GO 35705
// list := [ ] ;
35365: LD_ADDR_VAR 0 13
35369: PUSH
35370: EMPTY
35371: ST_TO_ADDR
// if x - r < 0 then
35372: LD_VAR 0 2
35376: PUSH
35377: LD_VAR 0 4
35381: MINUS
35382: PUSH
35383: LD_INT 0
35385: LESS
35386: IFFALSE 35398
// min_x := 0 else
35388: LD_ADDR_VAR 0 7
35392: PUSH
35393: LD_INT 0
35395: ST_TO_ADDR
35396: GO 35414
// min_x := x - r ;
35398: LD_ADDR_VAR 0 7
35402: PUSH
35403: LD_VAR 0 2
35407: PUSH
35408: LD_VAR 0 4
35412: MINUS
35413: ST_TO_ADDR
// if y - r < 0 then
35414: LD_VAR 0 3
35418: PUSH
35419: LD_VAR 0 4
35423: MINUS
35424: PUSH
35425: LD_INT 0
35427: LESS
35428: IFFALSE 35440
// min_y := 0 else
35430: LD_ADDR_VAR 0 8
35434: PUSH
35435: LD_INT 0
35437: ST_TO_ADDR
35438: GO 35456
// min_y := y - r ;
35440: LD_ADDR_VAR 0 8
35444: PUSH
35445: LD_VAR 0 3
35449: PUSH
35450: LD_VAR 0 4
35454: MINUS
35455: ST_TO_ADDR
// max_x := x + r ;
35456: LD_ADDR_VAR 0 9
35460: PUSH
35461: LD_VAR 0 2
35465: PUSH
35466: LD_VAR 0 4
35470: PLUS
35471: ST_TO_ADDR
// max_y := y + r ;
35472: LD_ADDR_VAR 0 10
35476: PUSH
35477: LD_VAR 0 3
35481: PUSH
35482: LD_VAR 0 4
35486: PLUS
35487: ST_TO_ADDR
// for _x = min_x to max_x do
35488: LD_ADDR_VAR 0 11
35492: PUSH
35493: DOUBLE
35494: LD_VAR 0 7
35498: DEC
35499: ST_TO_ADDR
35500: LD_VAR 0 9
35504: PUSH
35505: FOR_TO
35506: IFFALSE 35623
// for _y = min_y to max_y do
35508: LD_ADDR_VAR 0 12
35512: PUSH
35513: DOUBLE
35514: LD_VAR 0 8
35518: DEC
35519: ST_TO_ADDR
35520: LD_VAR 0 10
35524: PUSH
35525: FOR_TO
35526: IFFALSE 35619
// begin if not ValidHex ( _x , _y ) then
35528: LD_VAR 0 11
35532: PPUSH
35533: LD_VAR 0 12
35537: PPUSH
35538: CALL_OW 488
35542: NOT
35543: IFFALSE 35547
// continue ;
35545: GO 35525
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35547: LD_VAR 0 11
35551: PPUSH
35552: LD_VAR 0 12
35556: PPUSH
35557: CALL_OW 351
35561: PUSH
35562: LD_VAR 0 11
35566: PPUSH
35567: LD_VAR 0 12
35571: PPUSH
35572: CALL_OW 554
35576: AND
35577: IFFALSE 35617
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35579: LD_ADDR_VAR 0 13
35583: PUSH
35584: LD_VAR 0 13
35588: PPUSH
35589: LD_VAR 0 13
35593: PUSH
35594: LD_INT 1
35596: PLUS
35597: PPUSH
35598: LD_VAR 0 11
35602: PUSH
35603: LD_VAR 0 12
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PPUSH
35612: CALL_OW 2
35616: ST_TO_ADDR
// end ;
35617: GO 35525
35619: POP
35620: POP
35621: GO 35505
35623: POP
35624: POP
// if not list then
35625: LD_VAR 0 13
35629: NOT
35630: IFFALSE 35634
// exit ;
35632: GO 35705
// for i in list do
35634: LD_ADDR_VAR 0 6
35638: PUSH
35639: LD_VAR 0 13
35643: PUSH
35644: FOR_IN
35645: IFFALSE 35703
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35647: LD_VAR 0 1
35651: PPUSH
35652: LD_STRING M
35654: PUSH
35655: LD_VAR 0 6
35659: PUSH
35660: LD_INT 1
35662: ARRAY
35663: PUSH
35664: LD_VAR 0 6
35668: PUSH
35669: LD_INT 2
35671: ARRAY
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: PUSH
35694: EMPTY
35695: LIST
35696: PPUSH
35697: CALL_OW 447
35701: GO 35644
35703: POP
35704: POP
// end ;
35705: LD_VAR 0 5
35709: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35710: LD_EXP 129
35714: NOT
35715: IFFALSE 35765
35717: GO 35719
35719: DISABLE
// begin initHack := true ;
35720: LD_ADDR_EXP 129
35724: PUSH
35725: LD_INT 1
35727: ST_TO_ADDR
// hackTanks := [ ] ;
35728: LD_ADDR_EXP 130
35732: PUSH
35733: EMPTY
35734: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35735: LD_ADDR_EXP 131
35739: PUSH
35740: EMPTY
35741: ST_TO_ADDR
// hackLimit := 3 ;
35742: LD_ADDR_EXP 132
35746: PUSH
35747: LD_INT 3
35749: ST_TO_ADDR
// hackDist := 12 ;
35750: LD_ADDR_EXP 133
35754: PUSH
35755: LD_INT 12
35757: ST_TO_ADDR
// hackCounter := [ ] ;
35758: LD_ADDR_EXP 134
35762: PUSH
35763: EMPTY
35764: ST_TO_ADDR
// end ;
35765: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35766: LD_EXP 129
35770: PUSH
35771: LD_INT 34
35773: PUSH
35774: LD_EXP 52
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PPUSH
35783: CALL_OW 69
35787: AND
35788: IFFALSE 36043
35790: GO 35792
35792: DISABLE
35793: LD_INT 0
35795: PPUSH
35796: PPUSH
// begin enable ;
35797: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35798: LD_ADDR_VAR 0 1
35802: PUSH
35803: LD_INT 34
35805: PUSH
35806: LD_EXP 52
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PPUSH
35815: CALL_OW 69
35819: PUSH
35820: FOR_IN
35821: IFFALSE 36041
// begin if not i in hackTanks then
35823: LD_VAR 0 1
35827: PUSH
35828: LD_EXP 130
35832: IN
35833: NOT
35834: IFFALSE 35917
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35836: LD_ADDR_EXP 130
35840: PUSH
35841: LD_EXP 130
35845: PPUSH
35846: LD_EXP 130
35850: PUSH
35851: LD_INT 1
35853: PLUS
35854: PPUSH
35855: LD_VAR 0 1
35859: PPUSH
35860: CALL_OW 1
35864: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35865: LD_ADDR_EXP 131
35869: PUSH
35870: LD_EXP 131
35874: PPUSH
35875: LD_EXP 131
35879: PUSH
35880: LD_INT 1
35882: PLUS
35883: PPUSH
35884: EMPTY
35885: PPUSH
35886: CALL_OW 1
35890: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35891: LD_ADDR_EXP 134
35895: PUSH
35896: LD_EXP 134
35900: PPUSH
35901: LD_EXP 134
35905: PUSH
35906: LD_INT 1
35908: PLUS
35909: PPUSH
35910: EMPTY
35911: PPUSH
35912: CALL_OW 1
35916: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35917: LD_VAR 0 1
35921: PPUSH
35922: CALL_OW 302
35926: NOT
35927: IFFALSE 35940
// begin HackUnlinkAll ( i ) ;
35929: LD_VAR 0 1
35933: PPUSH
35934: CALL 36046 0 1
// continue ;
35938: GO 35820
// end ; HackCheckCapturedStatus ( i ) ;
35940: LD_VAR 0 1
35944: PPUSH
35945: CALL 36489 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35949: LD_ADDR_VAR 0 2
35953: PUSH
35954: LD_INT 81
35956: PUSH
35957: LD_VAR 0 1
35961: PPUSH
35962: CALL_OW 255
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 33
35973: PUSH
35974: LD_INT 3
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 91
35983: PUSH
35984: LD_VAR 0 1
35988: PUSH
35989: LD_EXP 133
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 50
36001: PUSH
36002: EMPTY
36003: LIST
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: PPUSH
36011: CALL_OW 69
36015: ST_TO_ADDR
// if not tmp then
36016: LD_VAR 0 2
36020: NOT
36021: IFFALSE 36025
// continue ;
36023: GO 35820
// HackLink ( i , tmp ) ;
36025: LD_VAR 0 1
36029: PPUSH
36030: LD_VAR 0 2
36034: PPUSH
36035: CALL 36182 0 2
// end ;
36039: GO 35820
36041: POP
36042: POP
// end ;
36043: PPOPN 2
36045: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36046: LD_INT 0
36048: PPUSH
36049: PPUSH
36050: PPUSH
// if not hack in hackTanks then
36051: LD_VAR 0 1
36055: PUSH
36056: LD_EXP 130
36060: IN
36061: NOT
36062: IFFALSE 36066
// exit ;
36064: GO 36177
// index := GetElementIndex ( hackTanks , hack ) ;
36066: LD_ADDR_VAR 0 4
36070: PUSH
36071: LD_EXP 130
36075: PPUSH
36076: LD_VAR 0 1
36080: PPUSH
36081: CALL 43651 0 2
36085: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36086: LD_EXP 131
36090: PUSH
36091: LD_VAR 0 4
36095: ARRAY
36096: IFFALSE 36177
// begin for i in hackTanksCaptured [ index ] do
36098: LD_ADDR_VAR 0 3
36102: PUSH
36103: LD_EXP 131
36107: PUSH
36108: LD_VAR 0 4
36112: ARRAY
36113: PUSH
36114: FOR_IN
36115: IFFALSE 36141
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36117: LD_VAR 0 3
36121: PUSH
36122: LD_INT 1
36124: ARRAY
36125: PPUSH
36126: LD_VAR 0 3
36130: PUSH
36131: LD_INT 2
36133: ARRAY
36134: PPUSH
36135: CALL_OW 235
36139: GO 36114
36141: POP
36142: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36143: LD_ADDR_EXP 131
36147: PUSH
36148: LD_EXP 131
36152: PPUSH
36153: LD_VAR 0 4
36157: PPUSH
36158: EMPTY
36159: PPUSH
36160: CALL_OW 1
36164: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36165: LD_VAR 0 1
36169: PPUSH
36170: LD_INT 0
36172: PPUSH
36173: CALL_OW 505
// end ; end ;
36177: LD_VAR 0 2
36181: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36182: LD_INT 0
36184: PPUSH
36185: PPUSH
36186: PPUSH
// if not hack in hackTanks or not vehicles then
36187: LD_VAR 0 1
36191: PUSH
36192: LD_EXP 130
36196: IN
36197: NOT
36198: PUSH
36199: LD_VAR 0 2
36203: NOT
36204: OR
36205: IFFALSE 36209
// exit ;
36207: GO 36484
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36209: LD_ADDR_VAR 0 2
36213: PUSH
36214: LD_VAR 0 1
36218: PPUSH
36219: LD_VAR 0 2
36223: PPUSH
36224: LD_INT 1
36226: PPUSH
36227: LD_INT 1
36229: PPUSH
36230: CALL 44301 0 4
36234: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36235: LD_ADDR_VAR 0 5
36239: PUSH
36240: LD_EXP 130
36244: PPUSH
36245: LD_VAR 0 1
36249: PPUSH
36250: CALL 43651 0 2
36254: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36255: LD_EXP 131
36259: PUSH
36260: LD_VAR 0 5
36264: ARRAY
36265: PUSH
36266: LD_EXP 132
36270: LESS
36271: IFFALSE 36460
// begin for i := 1 to vehicles do
36273: LD_ADDR_VAR 0 4
36277: PUSH
36278: DOUBLE
36279: LD_INT 1
36281: DEC
36282: ST_TO_ADDR
36283: LD_VAR 0 2
36287: PUSH
36288: FOR_TO
36289: IFFALSE 36458
// begin if hackTanksCaptured [ index ] = hackLimit then
36291: LD_EXP 131
36295: PUSH
36296: LD_VAR 0 5
36300: ARRAY
36301: PUSH
36302: LD_EXP 132
36306: EQUAL
36307: IFFALSE 36311
// break ;
36309: GO 36458
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36311: LD_ADDR_EXP 134
36315: PUSH
36316: LD_EXP 134
36320: PPUSH
36321: LD_VAR 0 5
36325: PPUSH
36326: LD_EXP 134
36330: PUSH
36331: LD_VAR 0 5
36335: ARRAY
36336: PUSH
36337: LD_INT 1
36339: PLUS
36340: PPUSH
36341: CALL_OW 1
36345: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36346: LD_ADDR_EXP 131
36350: PUSH
36351: LD_EXP 131
36355: PPUSH
36356: LD_VAR 0 5
36360: PUSH
36361: LD_EXP 131
36365: PUSH
36366: LD_VAR 0 5
36370: ARRAY
36371: PUSH
36372: LD_INT 1
36374: PLUS
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PPUSH
36380: LD_VAR 0 2
36384: PUSH
36385: LD_VAR 0 4
36389: ARRAY
36390: PUSH
36391: LD_VAR 0 2
36395: PUSH
36396: LD_VAR 0 4
36400: ARRAY
36401: PPUSH
36402: CALL_OW 255
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PPUSH
36411: CALL 43866 0 3
36415: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36416: LD_VAR 0 2
36420: PUSH
36421: LD_VAR 0 4
36425: ARRAY
36426: PPUSH
36427: LD_VAR 0 1
36431: PPUSH
36432: CALL_OW 255
36436: PPUSH
36437: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36441: LD_VAR 0 2
36445: PUSH
36446: LD_VAR 0 4
36450: ARRAY
36451: PPUSH
36452: CALL_OW 141
// end ;
36456: GO 36288
36458: POP
36459: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36460: LD_VAR 0 1
36464: PPUSH
36465: LD_EXP 131
36469: PUSH
36470: LD_VAR 0 5
36474: ARRAY
36475: PUSH
36476: LD_INT 0
36478: PLUS
36479: PPUSH
36480: CALL_OW 505
// end ;
36484: LD_VAR 0 3
36488: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36489: LD_INT 0
36491: PPUSH
36492: PPUSH
36493: PPUSH
36494: PPUSH
// if not hack in hackTanks then
36495: LD_VAR 0 1
36499: PUSH
36500: LD_EXP 130
36504: IN
36505: NOT
36506: IFFALSE 36510
// exit ;
36508: GO 36750
// index := GetElementIndex ( hackTanks , hack ) ;
36510: LD_ADDR_VAR 0 4
36514: PUSH
36515: LD_EXP 130
36519: PPUSH
36520: LD_VAR 0 1
36524: PPUSH
36525: CALL 43651 0 2
36529: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36530: LD_ADDR_VAR 0 3
36534: PUSH
36535: DOUBLE
36536: LD_EXP 131
36540: PUSH
36541: LD_VAR 0 4
36545: ARRAY
36546: INC
36547: ST_TO_ADDR
36548: LD_INT 1
36550: PUSH
36551: FOR_DOWNTO
36552: IFFALSE 36724
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36554: LD_ADDR_VAR 0 5
36558: PUSH
36559: LD_EXP 131
36563: PUSH
36564: LD_VAR 0 4
36568: ARRAY
36569: PUSH
36570: LD_VAR 0 3
36574: ARRAY
36575: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36576: LD_VAR 0 5
36580: PUSH
36581: LD_INT 1
36583: ARRAY
36584: PPUSH
36585: CALL_OW 302
36589: NOT
36590: PUSH
36591: LD_VAR 0 5
36595: PUSH
36596: LD_INT 1
36598: ARRAY
36599: PPUSH
36600: CALL_OW 255
36604: PUSH
36605: LD_VAR 0 1
36609: PPUSH
36610: CALL_OW 255
36614: NONEQUAL
36615: OR
36616: IFFALSE 36722
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36618: LD_VAR 0 5
36622: PUSH
36623: LD_INT 1
36625: ARRAY
36626: PPUSH
36627: CALL_OW 305
36631: PUSH
36632: LD_VAR 0 5
36636: PUSH
36637: LD_INT 1
36639: ARRAY
36640: PPUSH
36641: CALL_OW 255
36645: PUSH
36646: LD_VAR 0 1
36650: PPUSH
36651: CALL_OW 255
36655: EQUAL
36656: AND
36657: IFFALSE 36681
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36659: LD_VAR 0 5
36663: PUSH
36664: LD_INT 1
36666: ARRAY
36667: PPUSH
36668: LD_VAR 0 5
36672: PUSH
36673: LD_INT 2
36675: ARRAY
36676: PPUSH
36677: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36681: LD_ADDR_EXP 131
36685: PUSH
36686: LD_EXP 131
36690: PPUSH
36691: LD_VAR 0 4
36695: PPUSH
36696: LD_EXP 131
36700: PUSH
36701: LD_VAR 0 4
36705: ARRAY
36706: PPUSH
36707: LD_VAR 0 3
36711: PPUSH
36712: CALL_OW 3
36716: PPUSH
36717: CALL_OW 1
36721: ST_TO_ADDR
// end ; end ;
36722: GO 36551
36724: POP
36725: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36726: LD_VAR 0 1
36730: PPUSH
36731: LD_EXP 131
36735: PUSH
36736: LD_VAR 0 4
36740: ARRAY
36741: PUSH
36742: LD_INT 0
36744: PLUS
36745: PPUSH
36746: CALL_OW 505
// end ;
36750: LD_VAR 0 2
36754: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36755: LD_INT 0
36757: PPUSH
36758: PPUSH
36759: PPUSH
36760: PPUSH
// if not hack in hackTanks then
36761: LD_VAR 0 1
36765: PUSH
36766: LD_EXP 130
36770: IN
36771: NOT
36772: IFFALSE 36776
// exit ;
36774: GO 36861
// index := GetElementIndex ( hackTanks , hack ) ;
36776: LD_ADDR_VAR 0 5
36780: PUSH
36781: LD_EXP 130
36785: PPUSH
36786: LD_VAR 0 1
36790: PPUSH
36791: CALL 43651 0 2
36795: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36796: LD_ADDR_VAR 0 4
36800: PUSH
36801: DOUBLE
36802: LD_INT 1
36804: DEC
36805: ST_TO_ADDR
36806: LD_EXP 131
36810: PUSH
36811: LD_VAR 0 5
36815: ARRAY
36816: PUSH
36817: FOR_TO
36818: IFFALSE 36859
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36820: LD_EXP 131
36824: PUSH
36825: LD_VAR 0 5
36829: ARRAY
36830: PUSH
36831: LD_VAR 0 4
36835: ARRAY
36836: PUSH
36837: LD_INT 1
36839: ARRAY
36840: PUSH
36841: LD_VAR 0 2
36845: EQUAL
36846: IFFALSE 36857
// KillUnit ( vehicle ) ;
36848: LD_VAR 0 2
36852: PPUSH
36853: CALL_OW 66
36857: GO 36817
36859: POP
36860: POP
// end ;
36861: LD_VAR 0 3
36865: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36866: LD_EXP 135
36870: NOT
36871: IFFALSE 36906
36873: GO 36875
36875: DISABLE
// begin initMiner := true ;
36876: LD_ADDR_EXP 135
36880: PUSH
36881: LD_INT 1
36883: ST_TO_ADDR
// minersList := [ ] ;
36884: LD_ADDR_EXP 136
36888: PUSH
36889: EMPTY
36890: ST_TO_ADDR
// minerMinesList := [ ] ;
36891: LD_ADDR_EXP 137
36895: PUSH
36896: EMPTY
36897: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36898: LD_ADDR_EXP 138
36902: PUSH
36903: LD_INT 5
36905: ST_TO_ADDR
// end ;
36906: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36907: LD_EXP 135
36911: PUSH
36912: LD_INT 34
36914: PUSH
36915: LD_EXP 57
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PPUSH
36924: CALL_OW 69
36928: AND
36929: IFFALSE 37392
36931: GO 36933
36933: DISABLE
36934: LD_INT 0
36936: PPUSH
36937: PPUSH
36938: PPUSH
36939: PPUSH
// begin enable ;
36940: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36941: LD_ADDR_VAR 0 1
36945: PUSH
36946: LD_INT 34
36948: PUSH
36949: LD_EXP 57
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PPUSH
36958: CALL_OW 69
36962: PUSH
36963: FOR_IN
36964: IFFALSE 37036
// begin if not i in minersList then
36966: LD_VAR 0 1
36970: PUSH
36971: LD_EXP 136
36975: IN
36976: NOT
36977: IFFALSE 37034
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36979: LD_ADDR_EXP 136
36983: PUSH
36984: LD_EXP 136
36988: PPUSH
36989: LD_EXP 136
36993: PUSH
36994: LD_INT 1
36996: PLUS
36997: PPUSH
36998: LD_VAR 0 1
37002: PPUSH
37003: CALL_OW 1
37007: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37008: LD_ADDR_EXP 137
37012: PUSH
37013: LD_EXP 137
37017: PPUSH
37018: LD_EXP 137
37022: PUSH
37023: LD_INT 1
37025: PLUS
37026: PPUSH
37027: EMPTY
37028: PPUSH
37029: CALL_OW 1
37033: ST_TO_ADDR
// end end ;
37034: GO 36963
37036: POP
37037: POP
// for i := minerMinesList downto 1 do
37038: LD_ADDR_VAR 0 1
37042: PUSH
37043: DOUBLE
37044: LD_EXP 137
37048: INC
37049: ST_TO_ADDR
37050: LD_INT 1
37052: PUSH
37053: FOR_DOWNTO
37054: IFFALSE 37390
// begin if IsLive ( minersList [ i ] ) then
37056: LD_EXP 136
37060: PUSH
37061: LD_VAR 0 1
37065: ARRAY
37066: PPUSH
37067: CALL_OW 300
37071: IFFALSE 37099
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37073: LD_EXP 136
37077: PUSH
37078: LD_VAR 0 1
37082: ARRAY
37083: PPUSH
37084: LD_EXP 137
37088: PUSH
37089: LD_VAR 0 1
37093: ARRAY
37094: PPUSH
37095: CALL_OW 505
// if not minerMinesList [ i ] then
37099: LD_EXP 137
37103: PUSH
37104: LD_VAR 0 1
37108: ARRAY
37109: NOT
37110: IFFALSE 37114
// continue ;
37112: GO 37053
// for j := minerMinesList [ i ] downto 1 do
37114: LD_ADDR_VAR 0 2
37118: PUSH
37119: DOUBLE
37120: LD_EXP 137
37124: PUSH
37125: LD_VAR 0 1
37129: ARRAY
37130: INC
37131: ST_TO_ADDR
37132: LD_INT 1
37134: PUSH
37135: FOR_DOWNTO
37136: IFFALSE 37386
// begin side := GetSide ( minersList [ i ] ) ;
37138: LD_ADDR_VAR 0 3
37142: PUSH
37143: LD_EXP 136
37147: PUSH
37148: LD_VAR 0 1
37152: ARRAY
37153: PPUSH
37154: CALL_OW 255
37158: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37159: LD_ADDR_VAR 0 4
37163: PUSH
37164: LD_EXP 137
37168: PUSH
37169: LD_VAR 0 1
37173: ARRAY
37174: PUSH
37175: LD_VAR 0 2
37179: ARRAY
37180: PUSH
37181: LD_INT 1
37183: ARRAY
37184: PPUSH
37185: LD_EXP 137
37189: PUSH
37190: LD_VAR 0 1
37194: ARRAY
37195: PUSH
37196: LD_VAR 0 2
37200: ARRAY
37201: PUSH
37202: LD_INT 2
37204: ARRAY
37205: PPUSH
37206: CALL_OW 428
37210: ST_TO_ADDR
// if not tmp then
37211: LD_VAR 0 4
37215: NOT
37216: IFFALSE 37220
// continue ;
37218: GO 37135
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37220: LD_VAR 0 4
37224: PUSH
37225: LD_INT 81
37227: PUSH
37228: LD_VAR 0 3
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PPUSH
37237: CALL_OW 69
37241: IN
37242: PUSH
37243: LD_EXP 137
37247: PUSH
37248: LD_VAR 0 1
37252: ARRAY
37253: PUSH
37254: LD_VAR 0 2
37258: ARRAY
37259: PUSH
37260: LD_INT 1
37262: ARRAY
37263: PPUSH
37264: LD_EXP 137
37268: PUSH
37269: LD_VAR 0 1
37273: ARRAY
37274: PUSH
37275: LD_VAR 0 2
37279: ARRAY
37280: PUSH
37281: LD_INT 2
37283: ARRAY
37284: PPUSH
37285: CALL_OW 458
37289: AND
37290: IFFALSE 37384
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37292: LD_EXP 137
37296: PUSH
37297: LD_VAR 0 1
37301: ARRAY
37302: PUSH
37303: LD_VAR 0 2
37307: ARRAY
37308: PUSH
37309: LD_INT 1
37311: ARRAY
37312: PPUSH
37313: LD_EXP 137
37317: PUSH
37318: LD_VAR 0 1
37322: ARRAY
37323: PUSH
37324: LD_VAR 0 2
37328: ARRAY
37329: PUSH
37330: LD_INT 2
37332: ARRAY
37333: PPUSH
37334: LD_VAR 0 3
37338: PPUSH
37339: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37343: LD_ADDR_EXP 137
37347: PUSH
37348: LD_EXP 137
37352: PPUSH
37353: LD_VAR 0 1
37357: PPUSH
37358: LD_EXP 137
37362: PUSH
37363: LD_VAR 0 1
37367: ARRAY
37368: PPUSH
37369: LD_VAR 0 2
37373: PPUSH
37374: CALL_OW 3
37378: PPUSH
37379: CALL_OW 1
37383: ST_TO_ADDR
// end ; end ;
37384: GO 37135
37386: POP
37387: POP
// end ;
37388: GO 37053
37390: POP
37391: POP
// end ;
37392: PPOPN 4
37394: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37395: LD_INT 0
37397: PPUSH
37398: PPUSH
// result := false ;
37399: LD_ADDR_VAR 0 4
37403: PUSH
37404: LD_INT 0
37406: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37407: LD_VAR 0 1
37411: PPUSH
37412: CALL_OW 264
37416: PUSH
37417: LD_EXP 57
37421: EQUAL
37422: NOT
37423: IFFALSE 37427
// exit ;
37425: GO 37667
// index := GetElementIndex ( minersList , unit ) ;
37427: LD_ADDR_VAR 0 5
37431: PUSH
37432: LD_EXP 136
37436: PPUSH
37437: LD_VAR 0 1
37441: PPUSH
37442: CALL 43651 0 2
37446: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37447: LD_EXP 137
37451: PUSH
37452: LD_VAR 0 5
37456: ARRAY
37457: PUSH
37458: LD_EXP 138
37462: GREATEREQUAL
37463: IFFALSE 37467
// exit ;
37465: GO 37667
// ComMoveXY ( unit , x , y ) ;
37467: LD_VAR 0 1
37471: PPUSH
37472: LD_VAR 0 2
37476: PPUSH
37477: LD_VAR 0 3
37481: PPUSH
37482: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37486: LD_INT 35
37488: PPUSH
37489: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37493: LD_VAR 0 1
37497: PPUSH
37498: LD_VAR 0 2
37502: PPUSH
37503: LD_VAR 0 3
37507: PPUSH
37508: CALL 74370 0 3
37512: NOT
37513: PUSH
37514: LD_VAR 0 1
37518: PPUSH
37519: CALL_OW 314
37523: AND
37524: IFFALSE 37528
// exit ;
37526: GO 37667
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37528: LD_VAR 0 2
37532: PPUSH
37533: LD_VAR 0 3
37537: PPUSH
37538: CALL_OW 428
37542: PUSH
37543: LD_VAR 0 1
37547: EQUAL
37548: PUSH
37549: LD_VAR 0 1
37553: PPUSH
37554: CALL_OW 314
37558: NOT
37559: AND
37560: IFFALSE 37486
// PlaySoundXY ( x , y , PlantMine ) ;
37562: LD_VAR 0 2
37566: PPUSH
37567: LD_VAR 0 3
37571: PPUSH
37572: LD_STRING PlantMine
37574: PPUSH
37575: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37579: LD_VAR 0 2
37583: PPUSH
37584: LD_VAR 0 3
37588: PPUSH
37589: LD_VAR 0 1
37593: PPUSH
37594: CALL_OW 255
37598: PPUSH
37599: LD_INT 0
37601: PPUSH
37602: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37606: LD_ADDR_EXP 137
37610: PUSH
37611: LD_EXP 137
37615: PPUSH
37616: LD_VAR 0 5
37620: PUSH
37621: LD_EXP 137
37625: PUSH
37626: LD_VAR 0 5
37630: ARRAY
37631: PUSH
37632: LD_INT 1
37634: PLUS
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PPUSH
37640: LD_VAR 0 2
37644: PUSH
37645: LD_VAR 0 3
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PPUSH
37654: CALL 43866 0 3
37658: ST_TO_ADDR
// result := true ;
37659: LD_ADDR_VAR 0 4
37663: PUSH
37664: LD_INT 1
37666: ST_TO_ADDR
// end ;
37667: LD_VAR 0 4
37671: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37672: LD_INT 0
37674: PPUSH
37675: PPUSH
37676: PPUSH
// if not unit in minersList then
37677: LD_VAR 0 1
37681: PUSH
37682: LD_EXP 136
37686: IN
37687: NOT
37688: IFFALSE 37692
// exit ;
37690: GO 38084
// index := GetElementIndex ( minersList , unit ) ;
37692: LD_ADDR_VAR 0 6
37696: PUSH
37697: LD_EXP 136
37701: PPUSH
37702: LD_VAR 0 1
37706: PPUSH
37707: CALL 43651 0 2
37711: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37712: LD_ADDR_VAR 0 5
37716: PUSH
37717: DOUBLE
37718: LD_EXP 137
37722: PUSH
37723: LD_VAR 0 6
37727: ARRAY
37728: INC
37729: ST_TO_ADDR
37730: LD_INT 1
37732: PUSH
37733: FOR_DOWNTO
37734: IFFALSE 37895
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37736: LD_EXP 137
37740: PUSH
37741: LD_VAR 0 6
37745: ARRAY
37746: PUSH
37747: LD_VAR 0 5
37751: ARRAY
37752: PUSH
37753: LD_INT 1
37755: ARRAY
37756: PUSH
37757: LD_VAR 0 2
37761: EQUAL
37762: PUSH
37763: LD_EXP 137
37767: PUSH
37768: LD_VAR 0 6
37772: ARRAY
37773: PUSH
37774: LD_VAR 0 5
37778: ARRAY
37779: PUSH
37780: LD_INT 2
37782: ARRAY
37783: PUSH
37784: LD_VAR 0 3
37788: EQUAL
37789: AND
37790: IFFALSE 37893
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37792: LD_EXP 137
37796: PUSH
37797: LD_VAR 0 6
37801: ARRAY
37802: PUSH
37803: LD_VAR 0 5
37807: ARRAY
37808: PUSH
37809: LD_INT 1
37811: ARRAY
37812: PPUSH
37813: LD_EXP 137
37817: PUSH
37818: LD_VAR 0 6
37822: ARRAY
37823: PUSH
37824: LD_VAR 0 5
37828: ARRAY
37829: PUSH
37830: LD_INT 2
37832: ARRAY
37833: PPUSH
37834: LD_VAR 0 1
37838: PPUSH
37839: CALL_OW 255
37843: PPUSH
37844: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37848: LD_ADDR_EXP 137
37852: PUSH
37853: LD_EXP 137
37857: PPUSH
37858: LD_VAR 0 6
37862: PPUSH
37863: LD_EXP 137
37867: PUSH
37868: LD_VAR 0 6
37872: ARRAY
37873: PPUSH
37874: LD_VAR 0 5
37878: PPUSH
37879: CALL_OW 3
37883: PPUSH
37884: CALL_OW 1
37888: ST_TO_ADDR
// exit ;
37889: POP
37890: POP
37891: GO 38084
// end ; end ;
37893: GO 37733
37895: POP
37896: POP
// for i := minerMinesList [ index ] downto 1 do
37897: LD_ADDR_VAR 0 5
37901: PUSH
37902: DOUBLE
37903: LD_EXP 137
37907: PUSH
37908: LD_VAR 0 6
37912: ARRAY
37913: INC
37914: ST_TO_ADDR
37915: LD_INT 1
37917: PUSH
37918: FOR_DOWNTO
37919: IFFALSE 38082
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37921: LD_EXP 137
37925: PUSH
37926: LD_VAR 0 6
37930: ARRAY
37931: PUSH
37932: LD_VAR 0 5
37936: ARRAY
37937: PUSH
37938: LD_INT 1
37940: ARRAY
37941: PPUSH
37942: LD_EXP 137
37946: PUSH
37947: LD_VAR 0 6
37951: ARRAY
37952: PUSH
37953: LD_VAR 0 5
37957: ARRAY
37958: PUSH
37959: LD_INT 2
37961: ARRAY
37962: PPUSH
37963: LD_VAR 0 2
37967: PPUSH
37968: LD_VAR 0 3
37972: PPUSH
37973: CALL_OW 298
37977: PUSH
37978: LD_INT 6
37980: LESS
37981: IFFALSE 38080
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37983: LD_EXP 137
37987: PUSH
37988: LD_VAR 0 6
37992: ARRAY
37993: PUSH
37994: LD_VAR 0 5
37998: ARRAY
37999: PUSH
38000: LD_INT 1
38002: ARRAY
38003: PPUSH
38004: LD_EXP 137
38008: PUSH
38009: LD_VAR 0 6
38013: ARRAY
38014: PUSH
38015: LD_VAR 0 5
38019: ARRAY
38020: PUSH
38021: LD_INT 2
38023: ARRAY
38024: PPUSH
38025: LD_VAR 0 1
38029: PPUSH
38030: CALL_OW 255
38034: PPUSH
38035: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38039: LD_ADDR_EXP 137
38043: PUSH
38044: LD_EXP 137
38048: PPUSH
38049: LD_VAR 0 6
38053: PPUSH
38054: LD_EXP 137
38058: PUSH
38059: LD_VAR 0 6
38063: ARRAY
38064: PPUSH
38065: LD_VAR 0 5
38069: PPUSH
38070: CALL_OW 3
38074: PPUSH
38075: CALL_OW 1
38079: ST_TO_ADDR
// end ; end ;
38080: GO 37918
38082: POP
38083: POP
// end ;
38084: LD_VAR 0 4
38088: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38089: LD_INT 0
38091: PPUSH
38092: PPUSH
38093: PPUSH
38094: PPUSH
38095: PPUSH
38096: PPUSH
38097: PPUSH
38098: PPUSH
38099: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38100: LD_VAR 0 1
38104: PPUSH
38105: CALL_OW 264
38109: PUSH
38110: LD_EXP 57
38114: EQUAL
38115: NOT
38116: PUSH
38117: LD_VAR 0 1
38121: PUSH
38122: LD_EXP 136
38126: IN
38127: NOT
38128: OR
38129: IFFALSE 38133
// exit ;
38131: GO 38455
// index := GetElementIndex ( minersList , unit ) ;
38133: LD_ADDR_VAR 0 6
38137: PUSH
38138: LD_EXP 136
38142: PPUSH
38143: LD_VAR 0 1
38147: PPUSH
38148: CALL 43651 0 2
38152: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38153: LD_ADDR_VAR 0 8
38157: PUSH
38158: LD_EXP 138
38162: PUSH
38163: LD_EXP 137
38167: PUSH
38168: LD_VAR 0 6
38172: ARRAY
38173: MINUS
38174: ST_TO_ADDR
// if not minesFreeAmount then
38175: LD_VAR 0 8
38179: NOT
38180: IFFALSE 38184
// exit ;
38182: GO 38455
// tmp := [ ] ;
38184: LD_ADDR_VAR 0 7
38188: PUSH
38189: EMPTY
38190: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38191: LD_ADDR_VAR 0 5
38195: PUSH
38196: DOUBLE
38197: LD_INT 1
38199: DEC
38200: ST_TO_ADDR
38201: LD_VAR 0 8
38205: PUSH
38206: FOR_TO
38207: IFFALSE 38402
// begin _d := rand ( 0 , 5 ) ;
38209: LD_ADDR_VAR 0 11
38213: PUSH
38214: LD_INT 0
38216: PPUSH
38217: LD_INT 5
38219: PPUSH
38220: CALL_OW 12
38224: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38225: LD_ADDR_VAR 0 12
38229: PUSH
38230: LD_INT 2
38232: PPUSH
38233: LD_INT 6
38235: PPUSH
38236: CALL_OW 12
38240: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38241: LD_ADDR_VAR 0 9
38245: PUSH
38246: LD_VAR 0 2
38250: PPUSH
38251: LD_VAR 0 11
38255: PPUSH
38256: LD_VAR 0 12
38260: PPUSH
38261: CALL_OW 272
38265: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38266: LD_ADDR_VAR 0 10
38270: PUSH
38271: LD_VAR 0 3
38275: PPUSH
38276: LD_VAR 0 11
38280: PPUSH
38281: LD_VAR 0 12
38285: PPUSH
38286: CALL_OW 273
38290: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38291: LD_VAR 0 9
38295: PPUSH
38296: LD_VAR 0 10
38300: PPUSH
38301: CALL_OW 488
38305: PUSH
38306: LD_VAR 0 9
38310: PUSH
38311: LD_VAR 0 10
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_VAR 0 7
38324: IN
38325: NOT
38326: AND
38327: PUSH
38328: LD_VAR 0 9
38332: PPUSH
38333: LD_VAR 0 10
38337: PPUSH
38338: CALL_OW 458
38342: NOT
38343: AND
38344: IFFALSE 38386
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38346: LD_ADDR_VAR 0 7
38350: PUSH
38351: LD_VAR 0 7
38355: PPUSH
38356: LD_VAR 0 7
38360: PUSH
38361: LD_INT 1
38363: PLUS
38364: PPUSH
38365: LD_VAR 0 9
38369: PUSH
38370: LD_VAR 0 10
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PPUSH
38379: CALL_OW 1
38383: ST_TO_ADDR
38384: GO 38400
// i := i - 1 ;
38386: LD_ADDR_VAR 0 5
38390: PUSH
38391: LD_VAR 0 5
38395: PUSH
38396: LD_INT 1
38398: MINUS
38399: ST_TO_ADDR
// end ;
38400: GO 38206
38402: POP
38403: POP
// for i in tmp do
38404: LD_ADDR_VAR 0 5
38408: PUSH
38409: LD_VAR 0 7
38413: PUSH
38414: FOR_IN
38415: IFFALSE 38453
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38417: LD_VAR 0 1
38421: PPUSH
38422: LD_VAR 0 5
38426: PUSH
38427: LD_INT 1
38429: ARRAY
38430: PPUSH
38431: LD_VAR 0 5
38435: PUSH
38436: LD_INT 2
38438: ARRAY
38439: PPUSH
38440: CALL 37395 0 3
38444: NOT
38445: IFFALSE 38451
// exit ;
38447: POP
38448: POP
38449: GO 38455
38451: GO 38414
38453: POP
38454: POP
// end ;
38455: LD_VAR 0 4
38459: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38460: LD_INT 0
38462: PPUSH
38463: PPUSH
38464: PPUSH
38465: PPUSH
38466: PPUSH
38467: PPUSH
38468: PPUSH
// if not GetClass ( unit ) = class_sniper then
38469: LD_VAR 0 1
38473: PPUSH
38474: CALL_OW 257
38478: PUSH
38479: LD_INT 5
38481: EQUAL
38482: NOT
38483: IFFALSE 38487
// exit ;
38485: GO 38875
// dist := 8 ;
38487: LD_ADDR_VAR 0 5
38491: PUSH
38492: LD_INT 8
38494: ST_TO_ADDR
// viewRange := 12 ;
38495: LD_ADDR_VAR 0 7
38499: PUSH
38500: LD_INT 12
38502: ST_TO_ADDR
// side := GetSide ( unit ) ;
38503: LD_ADDR_VAR 0 6
38507: PUSH
38508: LD_VAR 0 1
38512: PPUSH
38513: CALL_OW 255
38517: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38518: LD_INT 61
38520: PPUSH
38521: LD_VAR 0 6
38525: PPUSH
38526: CALL_OW 321
38530: PUSH
38531: LD_INT 2
38533: EQUAL
38534: IFFALSE 38544
// viewRange := 16 ;
38536: LD_ADDR_VAR 0 7
38540: PUSH
38541: LD_INT 16
38543: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38544: LD_VAR 0 1
38548: PPUSH
38549: LD_VAR 0 2
38553: PPUSH
38554: LD_VAR 0 3
38558: PPUSH
38559: CALL_OW 297
38563: PUSH
38564: LD_VAR 0 5
38568: GREATER
38569: IFFALSE 38648
// begin ComMoveXY ( unit , x , y ) ;
38571: LD_VAR 0 1
38575: PPUSH
38576: LD_VAR 0 2
38580: PPUSH
38581: LD_VAR 0 3
38585: PPUSH
38586: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38590: LD_INT 35
38592: PPUSH
38593: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38597: LD_VAR 0 1
38601: PPUSH
38602: LD_VAR 0 2
38606: PPUSH
38607: LD_VAR 0 3
38611: PPUSH
38612: CALL 74370 0 3
38616: NOT
38617: IFFALSE 38621
// exit ;
38619: GO 38875
// until GetDistUnitXY ( unit , x , y ) < dist ;
38621: LD_VAR 0 1
38625: PPUSH
38626: LD_VAR 0 2
38630: PPUSH
38631: LD_VAR 0 3
38635: PPUSH
38636: CALL_OW 297
38640: PUSH
38641: LD_VAR 0 5
38645: LESS
38646: IFFALSE 38590
// end ; ComTurnXY ( unit , x , y ) ;
38648: LD_VAR 0 1
38652: PPUSH
38653: LD_VAR 0 2
38657: PPUSH
38658: LD_VAR 0 3
38662: PPUSH
38663: CALL_OW 118
// wait ( 5 ) ;
38667: LD_INT 5
38669: PPUSH
38670: CALL_OW 67
// _d := GetDir ( unit ) ;
38674: LD_ADDR_VAR 0 10
38678: PUSH
38679: LD_VAR 0 1
38683: PPUSH
38684: CALL_OW 254
38688: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38689: LD_ADDR_VAR 0 8
38693: PUSH
38694: LD_VAR 0 1
38698: PPUSH
38699: CALL_OW 250
38703: PPUSH
38704: LD_VAR 0 10
38708: PPUSH
38709: LD_VAR 0 5
38713: PPUSH
38714: CALL_OW 272
38718: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38719: LD_ADDR_VAR 0 9
38723: PUSH
38724: LD_VAR 0 1
38728: PPUSH
38729: CALL_OW 251
38733: PPUSH
38734: LD_VAR 0 10
38738: PPUSH
38739: LD_VAR 0 5
38743: PPUSH
38744: CALL_OW 273
38748: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38749: LD_VAR 0 8
38753: PPUSH
38754: LD_VAR 0 9
38758: PPUSH
38759: CALL_OW 488
38763: NOT
38764: IFFALSE 38768
// exit ;
38766: GO 38875
// ComAnimCustom ( unit , 1 ) ;
38768: LD_VAR 0 1
38772: PPUSH
38773: LD_INT 1
38775: PPUSH
38776: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38780: LD_VAR 0 8
38784: PPUSH
38785: LD_VAR 0 9
38789: PPUSH
38790: LD_VAR 0 6
38794: PPUSH
38795: LD_VAR 0 7
38799: PPUSH
38800: CALL_OW 330
// repeat wait ( 1 ) ;
38804: LD_INT 1
38806: PPUSH
38807: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38811: LD_VAR 0 1
38815: PPUSH
38816: CALL_OW 316
38820: PUSH
38821: LD_VAR 0 1
38825: PPUSH
38826: CALL_OW 314
38830: OR
38831: PUSH
38832: LD_VAR 0 1
38836: PPUSH
38837: CALL_OW 302
38841: NOT
38842: OR
38843: PUSH
38844: LD_VAR 0 1
38848: PPUSH
38849: CALL_OW 301
38853: OR
38854: IFFALSE 38804
// RemoveSeeing ( _x , _y , side ) ;
38856: LD_VAR 0 8
38860: PPUSH
38861: LD_VAR 0 9
38865: PPUSH
38866: LD_VAR 0 6
38870: PPUSH
38871: CALL_OW 331
// end ; end_of_file
38875: LD_VAR 0 4
38879: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38880: LD_INT 0
38882: PPUSH
38883: PPUSH
// if exist_mode then
38884: LD_VAR 0 2
38888: IFFALSE 38913
// unit := CreateCharacter ( prefix & ident ) else
38890: LD_ADDR_VAR 0 5
38894: PUSH
38895: LD_VAR 0 3
38899: PUSH
38900: LD_VAR 0 1
38904: STR
38905: PPUSH
38906: CALL_OW 34
38910: ST_TO_ADDR
38911: GO 38928
// unit := NewCharacter ( ident ) ;
38913: LD_ADDR_VAR 0 5
38917: PUSH
38918: LD_VAR 0 1
38922: PPUSH
38923: CALL_OW 25
38927: ST_TO_ADDR
// result := unit ;
38928: LD_ADDR_VAR 0 4
38932: PUSH
38933: LD_VAR 0 5
38937: ST_TO_ADDR
// end ;
38938: LD_VAR 0 4
38942: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38943: LD_INT 0
38945: PPUSH
38946: PPUSH
// if not side or not nation then
38947: LD_VAR 0 1
38951: NOT
38952: PUSH
38953: LD_VAR 0 2
38957: NOT
38958: OR
38959: IFFALSE 38963
// exit ;
38961: GO 39731
// case nation of nation_american :
38963: LD_VAR 0 2
38967: PUSH
38968: LD_INT 1
38970: DOUBLE
38971: EQUAL
38972: IFTRUE 38976
38974: GO 39190
38976: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38977: LD_ADDR_VAR 0 4
38981: PUSH
38982: LD_INT 35
38984: PUSH
38985: LD_INT 45
38987: PUSH
38988: LD_INT 46
38990: PUSH
38991: LD_INT 47
38993: PUSH
38994: LD_INT 82
38996: PUSH
38997: LD_INT 83
38999: PUSH
39000: LD_INT 84
39002: PUSH
39003: LD_INT 85
39005: PUSH
39006: LD_INT 86
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: LD_INT 2
39014: PUSH
39015: LD_INT 6
39017: PUSH
39018: LD_INT 15
39020: PUSH
39021: LD_INT 16
39023: PUSH
39024: LD_INT 7
39026: PUSH
39027: LD_INT 12
39029: PUSH
39030: LD_INT 13
39032: PUSH
39033: LD_INT 10
39035: PUSH
39036: LD_INT 14
39038: PUSH
39039: LD_INT 20
39041: PUSH
39042: LD_INT 21
39044: PUSH
39045: LD_INT 22
39047: PUSH
39048: LD_INT 25
39050: PUSH
39051: LD_INT 32
39053: PUSH
39054: LD_INT 27
39056: PUSH
39057: LD_INT 36
39059: PUSH
39060: LD_INT 69
39062: PUSH
39063: LD_INT 39
39065: PUSH
39066: LD_INT 34
39068: PUSH
39069: LD_INT 40
39071: PUSH
39072: LD_INT 48
39074: PUSH
39075: LD_INT 49
39077: PUSH
39078: LD_INT 50
39080: PUSH
39081: LD_INT 51
39083: PUSH
39084: LD_INT 52
39086: PUSH
39087: LD_INT 53
39089: PUSH
39090: LD_INT 54
39092: PUSH
39093: LD_INT 55
39095: PUSH
39096: LD_INT 56
39098: PUSH
39099: LD_INT 57
39101: PUSH
39102: LD_INT 58
39104: PUSH
39105: LD_INT 59
39107: PUSH
39108: LD_INT 60
39110: PUSH
39111: LD_INT 61
39113: PUSH
39114: LD_INT 62
39116: PUSH
39117: LD_INT 80
39119: PUSH
39120: LD_INT 82
39122: PUSH
39123: LD_INT 83
39125: PUSH
39126: LD_INT 84
39128: PUSH
39129: LD_INT 85
39131: PUSH
39132: LD_INT 86
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: ST_TO_ADDR
39188: GO 39655
39190: LD_INT 2
39192: DOUBLE
39193: EQUAL
39194: IFTRUE 39198
39196: GO 39424
39198: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39199: LD_ADDR_VAR 0 4
39203: PUSH
39204: LD_INT 35
39206: PUSH
39207: LD_INT 45
39209: PUSH
39210: LD_INT 46
39212: PUSH
39213: LD_INT 47
39215: PUSH
39216: LD_INT 82
39218: PUSH
39219: LD_INT 83
39221: PUSH
39222: LD_INT 84
39224: PUSH
39225: LD_INT 85
39227: PUSH
39228: LD_INT 87
39230: PUSH
39231: LD_INT 70
39233: PUSH
39234: LD_INT 1
39236: PUSH
39237: LD_INT 11
39239: PUSH
39240: LD_INT 3
39242: PUSH
39243: LD_INT 4
39245: PUSH
39246: LD_INT 5
39248: PUSH
39249: LD_INT 6
39251: PUSH
39252: LD_INT 15
39254: PUSH
39255: LD_INT 18
39257: PUSH
39258: LD_INT 7
39260: PUSH
39261: LD_INT 17
39263: PUSH
39264: LD_INT 8
39266: PUSH
39267: LD_INT 20
39269: PUSH
39270: LD_INT 21
39272: PUSH
39273: LD_INT 22
39275: PUSH
39276: LD_INT 72
39278: PUSH
39279: LD_INT 26
39281: PUSH
39282: LD_INT 69
39284: PUSH
39285: LD_INT 39
39287: PUSH
39288: LD_INT 40
39290: PUSH
39291: LD_INT 41
39293: PUSH
39294: LD_INT 42
39296: PUSH
39297: LD_INT 43
39299: PUSH
39300: LD_INT 48
39302: PUSH
39303: LD_INT 49
39305: PUSH
39306: LD_INT 50
39308: PUSH
39309: LD_INT 51
39311: PUSH
39312: LD_INT 52
39314: PUSH
39315: LD_INT 53
39317: PUSH
39318: LD_INT 54
39320: PUSH
39321: LD_INT 55
39323: PUSH
39324: LD_INT 56
39326: PUSH
39327: LD_INT 60
39329: PUSH
39330: LD_INT 61
39332: PUSH
39333: LD_INT 62
39335: PUSH
39336: LD_INT 66
39338: PUSH
39339: LD_INT 67
39341: PUSH
39342: LD_INT 68
39344: PUSH
39345: LD_INT 81
39347: PUSH
39348: LD_INT 82
39350: PUSH
39351: LD_INT 83
39353: PUSH
39354: LD_INT 84
39356: PUSH
39357: LD_INT 85
39359: PUSH
39360: LD_INT 87
39362: PUSH
39363: LD_INT 88
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: ST_TO_ADDR
39422: GO 39655
39424: LD_INT 3
39426: DOUBLE
39427: EQUAL
39428: IFTRUE 39432
39430: GO 39654
39432: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39433: LD_ADDR_VAR 0 4
39437: PUSH
39438: LD_INT 46
39440: PUSH
39441: LD_INT 47
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: LD_INT 2
39449: PUSH
39450: LD_INT 82
39452: PUSH
39453: LD_INT 83
39455: PUSH
39456: LD_INT 84
39458: PUSH
39459: LD_INT 85
39461: PUSH
39462: LD_INT 86
39464: PUSH
39465: LD_INT 11
39467: PUSH
39468: LD_INT 9
39470: PUSH
39471: LD_INT 20
39473: PUSH
39474: LD_INT 19
39476: PUSH
39477: LD_INT 21
39479: PUSH
39480: LD_INT 24
39482: PUSH
39483: LD_INT 22
39485: PUSH
39486: LD_INT 25
39488: PUSH
39489: LD_INT 28
39491: PUSH
39492: LD_INT 29
39494: PUSH
39495: LD_INT 30
39497: PUSH
39498: LD_INT 31
39500: PUSH
39501: LD_INT 37
39503: PUSH
39504: LD_INT 38
39506: PUSH
39507: LD_INT 32
39509: PUSH
39510: LD_INT 27
39512: PUSH
39513: LD_INT 33
39515: PUSH
39516: LD_INT 69
39518: PUSH
39519: LD_INT 39
39521: PUSH
39522: LD_INT 34
39524: PUSH
39525: LD_INT 40
39527: PUSH
39528: LD_INT 71
39530: PUSH
39531: LD_INT 23
39533: PUSH
39534: LD_INT 44
39536: PUSH
39537: LD_INT 48
39539: PUSH
39540: LD_INT 49
39542: PUSH
39543: LD_INT 50
39545: PUSH
39546: LD_INT 51
39548: PUSH
39549: LD_INT 52
39551: PUSH
39552: LD_INT 53
39554: PUSH
39555: LD_INT 54
39557: PUSH
39558: LD_INT 55
39560: PUSH
39561: LD_INT 56
39563: PUSH
39564: LD_INT 57
39566: PUSH
39567: LD_INT 58
39569: PUSH
39570: LD_INT 59
39572: PUSH
39573: LD_INT 63
39575: PUSH
39576: LD_INT 64
39578: PUSH
39579: LD_INT 65
39581: PUSH
39582: LD_INT 82
39584: PUSH
39585: LD_INT 83
39587: PUSH
39588: LD_INT 84
39590: PUSH
39591: LD_INT 85
39593: PUSH
39594: LD_INT 86
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: ST_TO_ADDR
39652: GO 39655
39654: POP
// if state > - 1 and state < 3 then
39655: LD_VAR 0 3
39659: PUSH
39660: LD_INT 1
39662: NEG
39663: GREATER
39664: PUSH
39665: LD_VAR 0 3
39669: PUSH
39670: LD_INT 3
39672: LESS
39673: AND
39674: IFFALSE 39731
// for i in result do
39676: LD_ADDR_VAR 0 5
39680: PUSH
39681: LD_VAR 0 4
39685: PUSH
39686: FOR_IN
39687: IFFALSE 39729
// if GetTech ( i , side ) <> state then
39689: LD_VAR 0 5
39693: PPUSH
39694: LD_VAR 0 1
39698: PPUSH
39699: CALL_OW 321
39703: PUSH
39704: LD_VAR 0 3
39708: NONEQUAL
39709: IFFALSE 39727
// result := result diff i ;
39711: LD_ADDR_VAR 0 4
39715: PUSH
39716: LD_VAR 0 4
39720: PUSH
39721: LD_VAR 0 5
39725: DIFF
39726: ST_TO_ADDR
39727: GO 39686
39729: POP
39730: POP
// end ;
39731: LD_VAR 0 4
39735: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39736: LD_INT 0
39738: PPUSH
39739: PPUSH
39740: PPUSH
// result := true ;
39741: LD_ADDR_VAR 0 3
39745: PUSH
39746: LD_INT 1
39748: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39749: LD_ADDR_VAR 0 5
39753: PUSH
39754: LD_VAR 0 2
39758: PPUSH
39759: CALL_OW 480
39763: ST_TO_ADDR
// if not tmp then
39764: LD_VAR 0 5
39768: NOT
39769: IFFALSE 39773
// exit ;
39771: GO 39822
// for i in tmp do
39773: LD_ADDR_VAR 0 4
39777: PUSH
39778: LD_VAR 0 5
39782: PUSH
39783: FOR_IN
39784: IFFALSE 39820
// if GetTech ( i , side ) <> state_researched then
39786: LD_VAR 0 4
39790: PPUSH
39791: LD_VAR 0 1
39795: PPUSH
39796: CALL_OW 321
39800: PUSH
39801: LD_INT 2
39803: NONEQUAL
39804: IFFALSE 39818
// begin result := false ;
39806: LD_ADDR_VAR 0 3
39810: PUSH
39811: LD_INT 0
39813: ST_TO_ADDR
// exit ;
39814: POP
39815: POP
39816: GO 39822
// end ;
39818: GO 39783
39820: POP
39821: POP
// end ;
39822: LD_VAR 0 3
39826: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39827: LD_INT 0
39829: PPUSH
39830: PPUSH
39831: PPUSH
39832: PPUSH
39833: PPUSH
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
39838: PPUSH
39839: PPUSH
39840: PPUSH
39841: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39842: LD_VAR 0 1
39846: NOT
39847: PUSH
39848: LD_VAR 0 1
39852: PPUSH
39853: CALL_OW 257
39857: PUSH
39858: LD_INT 9
39860: NONEQUAL
39861: OR
39862: IFFALSE 39866
// exit ;
39864: GO 40439
// side := GetSide ( unit ) ;
39866: LD_ADDR_VAR 0 9
39870: PUSH
39871: LD_VAR 0 1
39875: PPUSH
39876: CALL_OW 255
39880: ST_TO_ADDR
// tech_space := tech_spacanom ;
39881: LD_ADDR_VAR 0 12
39885: PUSH
39886: LD_INT 29
39888: ST_TO_ADDR
// tech_time := tech_taurad ;
39889: LD_ADDR_VAR 0 13
39893: PUSH
39894: LD_INT 28
39896: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39897: LD_ADDR_VAR 0 11
39901: PUSH
39902: LD_VAR 0 1
39906: PPUSH
39907: CALL_OW 310
39911: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39912: LD_VAR 0 11
39916: PPUSH
39917: CALL_OW 247
39921: PUSH
39922: LD_INT 2
39924: EQUAL
39925: IFFALSE 39929
// exit ;
39927: GO 40439
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39929: LD_ADDR_VAR 0 8
39933: PUSH
39934: LD_INT 81
39936: PUSH
39937: LD_VAR 0 9
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 3
39948: PUSH
39949: LD_INT 21
39951: PUSH
39952: LD_INT 3
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PPUSH
39967: CALL_OW 69
39971: ST_TO_ADDR
// if not tmp then
39972: LD_VAR 0 8
39976: NOT
39977: IFFALSE 39981
// exit ;
39979: GO 40439
// if in_unit then
39981: LD_VAR 0 11
39985: IFFALSE 40009
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39987: LD_ADDR_VAR 0 10
39991: PUSH
39992: LD_VAR 0 8
39996: PPUSH
39997: LD_VAR 0 11
40001: PPUSH
40002: CALL_OW 74
40006: ST_TO_ADDR
40007: GO 40029
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40009: LD_ADDR_VAR 0 10
40013: PUSH
40014: LD_VAR 0 8
40018: PPUSH
40019: LD_VAR 0 1
40023: PPUSH
40024: CALL_OW 74
40028: ST_TO_ADDR
// if not enemy then
40029: LD_VAR 0 10
40033: NOT
40034: IFFALSE 40038
// exit ;
40036: GO 40439
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40038: LD_VAR 0 11
40042: PUSH
40043: LD_VAR 0 11
40047: PPUSH
40048: LD_VAR 0 10
40052: PPUSH
40053: CALL_OW 296
40057: PUSH
40058: LD_INT 13
40060: GREATER
40061: AND
40062: PUSH
40063: LD_VAR 0 1
40067: PPUSH
40068: LD_VAR 0 10
40072: PPUSH
40073: CALL_OW 296
40077: PUSH
40078: LD_INT 12
40080: GREATER
40081: OR
40082: IFFALSE 40086
// exit ;
40084: GO 40439
// missile := [ 1 ] ;
40086: LD_ADDR_VAR 0 14
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: EMPTY
40095: LIST
40096: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40097: LD_VAR 0 9
40101: PPUSH
40102: LD_VAR 0 12
40106: PPUSH
40107: CALL_OW 325
40111: IFFALSE 40140
// missile := Replace ( missile , missile + 1 , 2 ) ;
40113: LD_ADDR_VAR 0 14
40117: PUSH
40118: LD_VAR 0 14
40122: PPUSH
40123: LD_VAR 0 14
40127: PUSH
40128: LD_INT 1
40130: PLUS
40131: PPUSH
40132: LD_INT 2
40134: PPUSH
40135: CALL_OW 1
40139: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40140: LD_VAR 0 9
40144: PPUSH
40145: LD_VAR 0 13
40149: PPUSH
40150: CALL_OW 325
40154: PUSH
40155: LD_VAR 0 10
40159: PPUSH
40160: CALL_OW 255
40164: PPUSH
40165: LD_VAR 0 13
40169: PPUSH
40170: CALL_OW 325
40174: NOT
40175: AND
40176: IFFALSE 40205
// missile := Replace ( missile , missile + 1 , 3 ) ;
40178: LD_ADDR_VAR 0 14
40182: PUSH
40183: LD_VAR 0 14
40187: PPUSH
40188: LD_VAR 0 14
40192: PUSH
40193: LD_INT 1
40195: PLUS
40196: PPUSH
40197: LD_INT 3
40199: PPUSH
40200: CALL_OW 1
40204: ST_TO_ADDR
// if missile < 2 then
40205: LD_VAR 0 14
40209: PUSH
40210: LD_INT 2
40212: LESS
40213: IFFALSE 40217
// exit ;
40215: GO 40439
// x := GetX ( enemy ) ;
40217: LD_ADDR_VAR 0 4
40221: PUSH
40222: LD_VAR 0 10
40226: PPUSH
40227: CALL_OW 250
40231: ST_TO_ADDR
// y := GetY ( enemy ) ;
40232: LD_ADDR_VAR 0 5
40236: PUSH
40237: LD_VAR 0 10
40241: PPUSH
40242: CALL_OW 251
40246: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40247: LD_ADDR_VAR 0 6
40251: PUSH
40252: LD_VAR 0 4
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: PPUSH
40261: LD_INT 1
40263: PPUSH
40264: CALL_OW 12
40268: PLUS
40269: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40270: LD_ADDR_VAR 0 7
40274: PUSH
40275: LD_VAR 0 5
40279: PUSH
40280: LD_INT 1
40282: NEG
40283: PPUSH
40284: LD_INT 1
40286: PPUSH
40287: CALL_OW 12
40291: PLUS
40292: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40293: LD_VAR 0 6
40297: PPUSH
40298: LD_VAR 0 7
40302: PPUSH
40303: CALL_OW 488
40307: NOT
40308: IFFALSE 40330
// begin _x := x ;
40310: LD_ADDR_VAR 0 6
40314: PUSH
40315: LD_VAR 0 4
40319: ST_TO_ADDR
// _y := y ;
40320: LD_ADDR_VAR 0 7
40324: PUSH
40325: LD_VAR 0 5
40329: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40330: LD_ADDR_VAR 0 3
40334: PUSH
40335: LD_INT 1
40337: PPUSH
40338: LD_VAR 0 14
40342: PPUSH
40343: CALL_OW 12
40347: ST_TO_ADDR
// case i of 1 :
40348: LD_VAR 0 3
40352: PUSH
40353: LD_INT 1
40355: DOUBLE
40356: EQUAL
40357: IFTRUE 40361
40359: GO 40378
40361: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40362: LD_VAR 0 1
40366: PPUSH
40367: LD_VAR 0 10
40371: PPUSH
40372: CALL_OW 115
40376: GO 40439
40378: LD_INT 2
40380: DOUBLE
40381: EQUAL
40382: IFTRUE 40386
40384: GO 40408
40386: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40387: LD_VAR 0 1
40391: PPUSH
40392: LD_VAR 0 6
40396: PPUSH
40397: LD_VAR 0 7
40401: PPUSH
40402: CALL_OW 153
40406: GO 40439
40408: LD_INT 3
40410: DOUBLE
40411: EQUAL
40412: IFTRUE 40416
40414: GO 40438
40416: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40417: LD_VAR 0 1
40421: PPUSH
40422: LD_VAR 0 6
40426: PPUSH
40427: LD_VAR 0 7
40431: PPUSH
40432: CALL_OW 154
40436: GO 40439
40438: POP
// end ;
40439: LD_VAR 0 2
40443: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40444: LD_INT 0
40446: PPUSH
40447: PPUSH
40448: PPUSH
40449: PPUSH
40450: PPUSH
40451: PPUSH
// if not unit or not building then
40452: LD_VAR 0 1
40456: NOT
40457: PUSH
40458: LD_VAR 0 2
40462: NOT
40463: OR
40464: IFFALSE 40468
// exit ;
40466: GO 40626
// x := GetX ( building ) ;
40468: LD_ADDR_VAR 0 5
40472: PUSH
40473: LD_VAR 0 2
40477: PPUSH
40478: CALL_OW 250
40482: ST_TO_ADDR
// y := GetY ( building ) ;
40483: LD_ADDR_VAR 0 6
40487: PUSH
40488: LD_VAR 0 2
40492: PPUSH
40493: CALL_OW 251
40497: ST_TO_ADDR
// for i = 0 to 5 do
40498: LD_ADDR_VAR 0 4
40502: PUSH
40503: DOUBLE
40504: LD_INT 0
40506: DEC
40507: ST_TO_ADDR
40508: LD_INT 5
40510: PUSH
40511: FOR_TO
40512: IFFALSE 40624
// begin _x := ShiftX ( x , i , 3 ) ;
40514: LD_ADDR_VAR 0 7
40518: PUSH
40519: LD_VAR 0 5
40523: PPUSH
40524: LD_VAR 0 4
40528: PPUSH
40529: LD_INT 3
40531: PPUSH
40532: CALL_OW 272
40536: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40537: LD_ADDR_VAR 0 8
40541: PUSH
40542: LD_VAR 0 6
40546: PPUSH
40547: LD_VAR 0 4
40551: PPUSH
40552: LD_INT 3
40554: PPUSH
40555: CALL_OW 273
40559: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40560: LD_VAR 0 7
40564: PPUSH
40565: LD_VAR 0 8
40569: PPUSH
40570: CALL_OW 488
40574: NOT
40575: IFFALSE 40579
// continue ;
40577: GO 40511
// if HexInfo ( _x , _y ) = 0 then
40579: LD_VAR 0 7
40583: PPUSH
40584: LD_VAR 0 8
40588: PPUSH
40589: CALL_OW 428
40593: PUSH
40594: LD_INT 0
40596: EQUAL
40597: IFFALSE 40622
// begin ComMoveXY ( unit , _x , _y ) ;
40599: LD_VAR 0 1
40603: PPUSH
40604: LD_VAR 0 7
40608: PPUSH
40609: LD_VAR 0 8
40613: PPUSH
40614: CALL_OW 111
// exit ;
40618: POP
40619: POP
40620: GO 40626
// end ; end ;
40622: GO 40511
40624: POP
40625: POP
// end ;
40626: LD_VAR 0 3
40630: RET
// export function ScanBase ( side , base_area ) ; begin
40631: LD_INT 0
40633: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40634: LD_ADDR_VAR 0 3
40638: PUSH
40639: LD_VAR 0 2
40643: PPUSH
40644: LD_INT 81
40646: PUSH
40647: LD_VAR 0 1
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PPUSH
40656: CALL_OW 70
40660: ST_TO_ADDR
// end ;
40661: LD_VAR 0 3
40665: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40666: LD_INT 0
40668: PPUSH
40669: PPUSH
40670: PPUSH
40671: PPUSH
// result := false ;
40672: LD_ADDR_VAR 0 2
40676: PUSH
40677: LD_INT 0
40679: ST_TO_ADDR
// side := GetSide ( unit ) ;
40680: LD_ADDR_VAR 0 3
40684: PUSH
40685: LD_VAR 0 1
40689: PPUSH
40690: CALL_OW 255
40694: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40695: LD_ADDR_VAR 0 4
40699: PUSH
40700: LD_VAR 0 1
40704: PPUSH
40705: CALL_OW 248
40709: ST_TO_ADDR
// case nat of 1 :
40710: LD_VAR 0 4
40714: PUSH
40715: LD_INT 1
40717: DOUBLE
40718: EQUAL
40719: IFTRUE 40723
40721: GO 40734
40723: POP
// tech := tech_lassight ; 2 :
40724: LD_ADDR_VAR 0 5
40728: PUSH
40729: LD_INT 12
40731: ST_TO_ADDR
40732: GO 40773
40734: LD_INT 2
40736: DOUBLE
40737: EQUAL
40738: IFTRUE 40742
40740: GO 40753
40742: POP
// tech := tech_mortar ; 3 :
40743: LD_ADDR_VAR 0 5
40747: PUSH
40748: LD_INT 41
40750: ST_TO_ADDR
40751: GO 40773
40753: LD_INT 3
40755: DOUBLE
40756: EQUAL
40757: IFTRUE 40761
40759: GO 40772
40761: POP
// tech := tech_bazooka ; end ;
40762: LD_ADDR_VAR 0 5
40766: PUSH
40767: LD_INT 44
40769: ST_TO_ADDR
40770: GO 40773
40772: POP
// if Researched ( side , tech ) then
40773: LD_VAR 0 3
40777: PPUSH
40778: LD_VAR 0 5
40782: PPUSH
40783: CALL_OW 325
40787: IFFALSE 40814
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40789: LD_ADDR_VAR 0 2
40793: PUSH
40794: LD_INT 5
40796: PUSH
40797: LD_INT 8
40799: PUSH
40800: LD_INT 9
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: LIST
40807: PUSH
40808: LD_VAR 0 4
40812: ARRAY
40813: ST_TO_ADDR
// end ;
40814: LD_VAR 0 2
40818: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40819: LD_INT 0
40821: PPUSH
40822: PPUSH
40823: PPUSH
// if not mines then
40824: LD_VAR 0 2
40828: NOT
40829: IFFALSE 40833
// exit ;
40831: GO 40977
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40833: LD_ADDR_VAR 0 5
40837: PUSH
40838: LD_INT 81
40840: PUSH
40841: LD_VAR 0 1
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 3
40852: PUSH
40853: LD_INT 21
40855: PUSH
40856: LD_INT 3
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PPUSH
40871: CALL_OW 69
40875: ST_TO_ADDR
// for i in mines do
40876: LD_ADDR_VAR 0 4
40880: PUSH
40881: LD_VAR 0 2
40885: PUSH
40886: FOR_IN
40887: IFFALSE 40975
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40889: LD_VAR 0 4
40893: PUSH
40894: LD_INT 1
40896: ARRAY
40897: PPUSH
40898: LD_VAR 0 4
40902: PUSH
40903: LD_INT 2
40905: ARRAY
40906: PPUSH
40907: CALL_OW 458
40911: NOT
40912: IFFALSE 40916
// continue ;
40914: GO 40886
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40916: LD_VAR 0 4
40920: PUSH
40921: LD_INT 1
40923: ARRAY
40924: PPUSH
40925: LD_VAR 0 4
40929: PUSH
40930: LD_INT 2
40932: ARRAY
40933: PPUSH
40934: CALL_OW 428
40938: PUSH
40939: LD_VAR 0 5
40943: IN
40944: IFFALSE 40973
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40946: LD_VAR 0 4
40950: PUSH
40951: LD_INT 1
40953: ARRAY
40954: PPUSH
40955: LD_VAR 0 4
40959: PUSH
40960: LD_INT 2
40962: ARRAY
40963: PPUSH
40964: LD_VAR 0 1
40968: PPUSH
40969: CALL_OW 456
// end ;
40973: GO 40886
40975: POP
40976: POP
// end ;
40977: LD_VAR 0 3
40981: RET
// export function Count ( array ) ; var i ; begin
40982: LD_INT 0
40984: PPUSH
40985: PPUSH
// result := 0 ;
40986: LD_ADDR_VAR 0 2
40990: PUSH
40991: LD_INT 0
40993: ST_TO_ADDR
// for i in array do
40994: LD_ADDR_VAR 0 3
40998: PUSH
40999: LD_VAR 0 1
41003: PUSH
41004: FOR_IN
41005: IFFALSE 41029
// if i then
41007: LD_VAR 0 3
41011: IFFALSE 41027
// result := result + 1 ;
41013: LD_ADDR_VAR 0 2
41017: PUSH
41018: LD_VAR 0 2
41022: PUSH
41023: LD_INT 1
41025: PLUS
41026: ST_TO_ADDR
41027: GO 41004
41029: POP
41030: POP
// end ;
41031: LD_VAR 0 2
41035: RET
// export function IsEmpty ( building ) ; begin
41036: LD_INT 0
41038: PPUSH
// if not building then
41039: LD_VAR 0 1
41043: NOT
41044: IFFALSE 41048
// exit ;
41046: GO 41091
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41048: LD_ADDR_VAR 0 2
41052: PUSH
41053: LD_VAR 0 1
41057: PUSH
41058: LD_INT 22
41060: PUSH
41061: LD_VAR 0 1
41065: PPUSH
41066: CALL_OW 255
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 58
41077: PUSH
41078: EMPTY
41079: LIST
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PPUSH
41085: CALL_OW 69
41089: IN
41090: ST_TO_ADDR
// end ;
41091: LD_VAR 0 2
41095: RET
// export function IsNotFull ( building ) ; begin
41096: LD_INT 0
41098: PPUSH
// if not building then
41099: LD_VAR 0 1
41103: NOT
41104: IFFALSE 41108
// exit ;
41106: GO 41127
// result := UnitsInside ( building ) < 6 ;
41108: LD_ADDR_VAR 0 2
41112: PUSH
41113: LD_VAR 0 1
41117: PPUSH
41118: CALL_OW 313
41122: PUSH
41123: LD_INT 6
41125: LESS
41126: ST_TO_ADDR
// end ;
41127: LD_VAR 0 2
41131: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41132: LD_INT 0
41134: PPUSH
41135: PPUSH
41136: PPUSH
41137: PPUSH
// tmp := [ ] ;
41138: LD_ADDR_VAR 0 3
41142: PUSH
41143: EMPTY
41144: ST_TO_ADDR
// list := [ ] ;
41145: LD_ADDR_VAR 0 5
41149: PUSH
41150: EMPTY
41151: ST_TO_ADDR
// for i = 16 to 25 do
41152: LD_ADDR_VAR 0 4
41156: PUSH
41157: DOUBLE
41158: LD_INT 16
41160: DEC
41161: ST_TO_ADDR
41162: LD_INT 25
41164: PUSH
41165: FOR_TO
41166: IFFALSE 41239
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41168: LD_ADDR_VAR 0 3
41172: PUSH
41173: LD_VAR 0 3
41177: PUSH
41178: LD_INT 22
41180: PUSH
41181: LD_VAR 0 1
41185: PPUSH
41186: CALL_OW 255
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 91
41197: PUSH
41198: LD_VAR 0 1
41202: PUSH
41203: LD_INT 6
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 30
41213: PUSH
41214: LD_VAR 0 4
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: LIST
41227: PUSH
41228: EMPTY
41229: LIST
41230: PPUSH
41231: CALL_OW 69
41235: ADD
41236: ST_TO_ADDR
41237: GO 41165
41239: POP
41240: POP
// for i = 1 to tmp do
41241: LD_ADDR_VAR 0 4
41245: PUSH
41246: DOUBLE
41247: LD_INT 1
41249: DEC
41250: ST_TO_ADDR
41251: LD_VAR 0 3
41255: PUSH
41256: FOR_TO
41257: IFFALSE 41345
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41259: LD_ADDR_VAR 0 5
41263: PUSH
41264: LD_VAR 0 5
41268: PUSH
41269: LD_VAR 0 3
41273: PUSH
41274: LD_VAR 0 4
41278: ARRAY
41279: PPUSH
41280: CALL_OW 266
41284: PUSH
41285: LD_VAR 0 3
41289: PUSH
41290: LD_VAR 0 4
41294: ARRAY
41295: PPUSH
41296: CALL_OW 250
41300: PUSH
41301: LD_VAR 0 3
41305: PUSH
41306: LD_VAR 0 4
41310: ARRAY
41311: PPUSH
41312: CALL_OW 251
41316: PUSH
41317: LD_VAR 0 3
41321: PUSH
41322: LD_VAR 0 4
41326: ARRAY
41327: PPUSH
41328: CALL_OW 254
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: PUSH
41339: EMPTY
41340: LIST
41341: ADD
41342: ST_TO_ADDR
41343: GO 41256
41345: POP
41346: POP
// result := list ;
41347: LD_ADDR_VAR 0 2
41351: PUSH
41352: LD_VAR 0 5
41356: ST_TO_ADDR
// end ;
41357: LD_VAR 0 2
41361: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41362: LD_INT 0
41364: PPUSH
41365: PPUSH
41366: PPUSH
41367: PPUSH
41368: PPUSH
41369: PPUSH
41370: PPUSH
// if not factory then
41371: LD_VAR 0 1
41375: NOT
41376: IFFALSE 41380
// exit ;
41378: GO 41973
// if control = control_apeman then
41380: LD_VAR 0 4
41384: PUSH
41385: LD_INT 5
41387: EQUAL
41388: IFFALSE 41497
// begin tmp := UnitsInside ( factory ) ;
41390: LD_ADDR_VAR 0 8
41394: PUSH
41395: LD_VAR 0 1
41399: PPUSH
41400: CALL_OW 313
41404: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41405: LD_VAR 0 8
41409: PPUSH
41410: LD_INT 25
41412: PUSH
41413: LD_INT 12
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PPUSH
41420: CALL_OW 72
41424: NOT
41425: IFFALSE 41435
// control := control_manual ;
41427: LD_ADDR_VAR 0 4
41431: PUSH
41432: LD_INT 1
41434: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41435: LD_ADDR_VAR 0 8
41439: PUSH
41440: LD_VAR 0 1
41444: PPUSH
41445: CALL 41132 0 1
41449: ST_TO_ADDR
// if tmp then
41450: LD_VAR 0 8
41454: IFFALSE 41497
// begin for i in tmp do
41456: LD_ADDR_VAR 0 7
41460: PUSH
41461: LD_VAR 0 8
41465: PUSH
41466: FOR_IN
41467: IFFALSE 41495
// if i [ 1 ] = b_ext_radio then
41469: LD_VAR 0 7
41473: PUSH
41474: LD_INT 1
41476: ARRAY
41477: PUSH
41478: LD_INT 22
41480: EQUAL
41481: IFFALSE 41493
// begin control := control_remote ;
41483: LD_ADDR_VAR 0 4
41487: PUSH
41488: LD_INT 2
41490: ST_TO_ADDR
// break ;
41491: GO 41495
// end ;
41493: GO 41466
41495: POP
41496: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41497: LD_VAR 0 1
41501: PPUSH
41502: LD_VAR 0 2
41506: PPUSH
41507: LD_VAR 0 3
41511: PPUSH
41512: LD_VAR 0 4
41516: PPUSH
41517: LD_VAR 0 5
41521: PPUSH
41522: CALL_OW 448
41526: IFFALSE 41561
// begin result := [ chassis , engine , control , weapon ] ;
41528: LD_ADDR_VAR 0 6
41532: PUSH
41533: LD_VAR 0 2
41537: PUSH
41538: LD_VAR 0 3
41542: PUSH
41543: LD_VAR 0 4
41547: PUSH
41548: LD_VAR 0 5
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: ST_TO_ADDR
// exit ;
41559: GO 41973
// end ; _chassis := AvailableChassisList ( factory ) ;
41561: LD_ADDR_VAR 0 9
41565: PUSH
41566: LD_VAR 0 1
41570: PPUSH
41571: CALL_OW 475
41575: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41576: LD_ADDR_VAR 0 11
41580: PUSH
41581: LD_VAR 0 1
41585: PPUSH
41586: CALL_OW 476
41590: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41591: LD_ADDR_VAR 0 12
41595: PUSH
41596: LD_VAR 0 1
41600: PPUSH
41601: CALL_OW 477
41605: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41606: LD_ADDR_VAR 0 10
41610: PUSH
41611: LD_VAR 0 1
41615: PPUSH
41616: CALL_OW 478
41620: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41621: LD_VAR 0 9
41625: NOT
41626: PUSH
41627: LD_VAR 0 11
41631: NOT
41632: OR
41633: PUSH
41634: LD_VAR 0 12
41638: NOT
41639: OR
41640: PUSH
41641: LD_VAR 0 10
41645: NOT
41646: OR
41647: IFFALSE 41682
// begin result := [ chassis , engine , control , weapon ] ;
41649: LD_ADDR_VAR 0 6
41653: PUSH
41654: LD_VAR 0 2
41658: PUSH
41659: LD_VAR 0 3
41663: PUSH
41664: LD_VAR 0 4
41668: PUSH
41669: LD_VAR 0 5
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: ST_TO_ADDR
// exit ;
41680: GO 41973
// end ; if not chassis in _chassis then
41682: LD_VAR 0 2
41686: PUSH
41687: LD_VAR 0 9
41691: IN
41692: NOT
41693: IFFALSE 41719
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41695: LD_ADDR_VAR 0 2
41699: PUSH
41700: LD_VAR 0 9
41704: PUSH
41705: LD_INT 1
41707: PPUSH
41708: LD_VAR 0 9
41712: PPUSH
41713: CALL_OW 12
41717: ARRAY
41718: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41719: LD_VAR 0 2
41723: PPUSH
41724: LD_VAR 0 3
41728: PPUSH
41729: CALL 41978 0 2
41733: NOT
41734: IFFALSE 41793
// repeat engine := _engine [ 1 ] ;
41736: LD_ADDR_VAR 0 3
41740: PUSH
41741: LD_VAR 0 11
41745: PUSH
41746: LD_INT 1
41748: ARRAY
41749: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41750: LD_ADDR_VAR 0 11
41754: PUSH
41755: LD_VAR 0 11
41759: PPUSH
41760: LD_INT 1
41762: PPUSH
41763: CALL_OW 3
41767: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41768: LD_VAR 0 2
41772: PPUSH
41773: LD_VAR 0 3
41777: PPUSH
41778: CALL 41978 0 2
41782: PUSH
41783: LD_VAR 0 11
41787: PUSH
41788: EMPTY
41789: EQUAL
41790: OR
41791: IFFALSE 41736
// if not control in _control then
41793: LD_VAR 0 4
41797: PUSH
41798: LD_VAR 0 12
41802: IN
41803: NOT
41804: IFFALSE 41830
// control := _control [ rand ( 1 , _control ) ] ;
41806: LD_ADDR_VAR 0 4
41810: PUSH
41811: LD_VAR 0 12
41815: PUSH
41816: LD_INT 1
41818: PPUSH
41819: LD_VAR 0 12
41823: PPUSH
41824: CALL_OW 12
41828: ARRAY
41829: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41830: LD_VAR 0 2
41834: PPUSH
41835: LD_VAR 0 5
41839: PPUSH
41840: CALL 42198 0 2
41844: NOT
41845: IFFALSE 41904
// repeat weapon := _weapon [ 1 ] ;
41847: LD_ADDR_VAR 0 5
41851: PUSH
41852: LD_VAR 0 10
41856: PUSH
41857: LD_INT 1
41859: ARRAY
41860: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41861: LD_ADDR_VAR 0 10
41865: PUSH
41866: LD_VAR 0 10
41870: PPUSH
41871: LD_INT 1
41873: PPUSH
41874: CALL_OW 3
41878: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41879: LD_VAR 0 2
41883: PPUSH
41884: LD_VAR 0 5
41888: PPUSH
41889: CALL 42198 0 2
41893: PUSH
41894: LD_VAR 0 10
41898: PUSH
41899: EMPTY
41900: EQUAL
41901: OR
41902: IFFALSE 41847
// result := [ ] ;
41904: LD_ADDR_VAR 0 6
41908: PUSH
41909: EMPTY
41910: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41911: LD_VAR 0 1
41915: PPUSH
41916: LD_VAR 0 2
41920: PPUSH
41921: LD_VAR 0 3
41925: PPUSH
41926: LD_VAR 0 4
41930: PPUSH
41931: LD_VAR 0 5
41935: PPUSH
41936: CALL_OW 448
41940: IFFALSE 41973
// result := [ chassis , engine , control , weapon ] ;
41942: LD_ADDR_VAR 0 6
41946: PUSH
41947: LD_VAR 0 2
41951: PUSH
41952: LD_VAR 0 3
41956: PUSH
41957: LD_VAR 0 4
41961: PUSH
41962: LD_VAR 0 5
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: ST_TO_ADDR
// end ;
41973: LD_VAR 0 6
41977: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41978: LD_INT 0
41980: PPUSH
// if not chassis or not engine then
41981: LD_VAR 0 1
41985: NOT
41986: PUSH
41987: LD_VAR 0 2
41991: NOT
41992: OR
41993: IFFALSE 41997
// exit ;
41995: GO 42193
// case engine of engine_solar :
41997: LD_VAR 0 2
42001: PUSH
42002: LD_INT 2
42004: DOUBLE
42005: EQUAL
42006: IFTRUE 42010
42008: GO 42048
42010: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42011: LD_ADDR_VAR 0 3
42015: PUSH
42016: LD_INT 11
42018: PUSH
42019: LD_INT 12
42021: PUSH
42022: LD_INT 13
42024: PUSH
42025: LD_INT 14
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: LD_INT 2
42033: PUSH
42034: LD_INT 3
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: ST_TO_ADDR
42046: GO 42177
42048: LD_INT 1
42050: DOUBLE
42051: EQUAL
42052: IFTRUE 42056
42054: GO 42118
42056: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42057: LD_ADDR_VAR 0 3
42061: PUSH
42062: LD_INT 11
42064: PUSH
42065: LD_INT 12
42067: PUSH
42068: LD_INT 13
42070: PUSH
42071: LD_INT 14
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: LD_INT 2
42079: PUSH
42080: LD_INT 3
42082: PUSH
42083: LD_INT 4
42085: PUSH
42086: LD_INT 5
42088: PUSH
42089: LD_INT 21
42091: PUSH
42092: LD_INT 23
42094: PUSH
42095: LD_INT 22
42097: PUSH
42098: LD_INT 24
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: ST_TO_ADDR
42116: GO 42177
42118: LD_INT 3
42120: DOUBLE
42121: EQUAL
42122: IFTRUE 42126
42124: GO 42176
42126: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42127: LD_ADDR_VAR 0 3
42131: PUSH
42132: LD_INT 13
42134: PUSH
42135: LD_INT 14
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: LD_INT 3
42143: PUSH
42144: LD_INT 4
42146: PUSH
42147: LD_INT 5
42149: PUSH
42150: LD_INT 21
42152: PUSH
42153: LD_INT 22
42155: PUSH
42156: LD_INT 23
42158: PUSH
42159: LD_INT 24
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: ST_TO_ADDR
42174: GO 42177
42176: POP
// result := ( chassis in result ) ;
42177: LD_ADDR_VAR 0 3
42181: PUSH
42182: LD_VAR 0 1
42186: PUSH
42187: LD_VAR 0 3
42191: IN
42192: ST_TO_ADDR
// end ;
42193: LD_VAR 0 3
42197: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42198: LD_INT 0
42200: PPUSH
// if not chassis or not weapon then
42201: LD_VAR 0 1
42205: NOT
42206: PUSH
42207: LD_VAR 0 2
42211: NOT
42212: OR
42213: IFFALSE 42217
// exit ;
42215: GO 43279
// case weapon of us_machine_gun :
42217: LD_VAR 0 2
42221: PUSH
42222: LD_INT 2
42224: DOUBLE
42225: EQUAL
42226: IFTRUE 42230
42228: GO 42260
42230: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42231: LD_ADDR_VAR 0 3
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: LD_INT 3
42244: PUSH
42245: LD_INT 4
42247: PUSH
42248: LD_INT 5
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: ST_TO_ADDR
42258: GO 43263
42260: LD_INT 3
42262: DOUBLE
42263: EQUAL
42264: IFTRUE 42268
42266: GO 42298
42268: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42269: LD_ADDR_VAR 0 3
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: LD_INT 2
42279: PUSH
42280: LD_INT 3
42282: PUSH
42283: LD_INT 4
42285: PUSH
42286: LD_INT 5
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: ST_TO_ADDR
42296: GO 43263
42298: LD_INT 11
42300: DOUBLE
42301: EQUAL
42302: IFTRUE 42306
42304: GO 42336
42306: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42307: LD_ADDR_VAR 0 3
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: LD_INT 2
42317: PUSH
42318: LD_INT 3
42320: PUSH
42321: LD_INT 4
42323: PUSH
42324: LD_INT 5
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: ST_TO_ADDR
42334: GO 43263
42336: LD_INT 4
42338: DOUBLE
42339: EQUAL
42340: IFTRUE 42344
42342: GO 42370
42344: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42345: LD_ADDR_VAR 0 3
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: LD_INT 3
42355: PUSH
42356: LD_INT 4
42358: PUSH
42359: LD_INT 5
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: ST_TO_ADDR
42368: GO 43263
42370: LD_INT 5
42372: DOUBLE
42373: EQUAL
42374: IFTRUE 42378
42376: GO 42404
42378: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42379: LD_ADDR_VAR 0 3
42383: PUSH
42384: LD_INT 2
42386: PUSH
42387: LD_INT 3
42389: PUSH
42390: LD_INT 4
42392: PUSH
42393: LD_INT 5
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: ST_TO_ADDR
42402: GO 43263
42404: LD_INT 9
42406: DOUBLE
42407: EQUAL
42408: IFTRUE 42412
42410: GO 42438
42412: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42413: LD_ADDR_VAR 0 3
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: LD_INT 3
42423: PUSH
42424: LD_INT 4
42426: PUSH
42427: LD_INT 5
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: ST_TO_ADDR
42436: GO 43263
42438: LD_INT 7
42440: DOUBLE
42441: EQUAL
42442: IFTRUE 42446
42444: GO 42472
42446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42447: LD_ADDR_VAR 0 3
42451: PUSH
42452: LD_INT 2
42454: PUSH
42455: LD_INT 3
42457: PUSH
42458: LD_INT 4
42460: PUSH
42461: LD_INT 5
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: ST_TO_ADDR
42470: GO 43263
42472: LD_INT 12
42474: DOUBLE
42475: EQUAL
42476: IFTRUE 42480
42478: GO 42506
42480: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42481: LD_ADDR_VAR 0 3
42485: PUSH
42486: LD_INT 2
42488: PUSH
42489: LD_INT 3
42491: PUSH
42492: LD_INT 4
42494: PUSH
42495: LD_INT 5
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: ST_TO_ADDR
42504: GO 43263
42506: LD_INT 13
42508: DOUBLE
42509: EQUAL
42510: IFTRUE 42514
42512: GO 42540
42514: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42515: LD_ADDR_VAR 0 3
42519: PUSH
42520: LD_INT 2
42522: PUSH
42523: LD_INT 3
42525: PUSH
42526: LD_INT 4
42528: PUSH
42529: LD_INT 5
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: ST_TO_ADDR
42538: GO 43263
42540: LD_INT 14
42542: DOUBLE
42543: EQUAL
42544: IFTRUE 42548
42546: GO 42566
42548: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42549: LD_ADDR_VAR 0 3
42553: PUSH
42554: LD_INT 4
42556: PUSH
42557: LD_INT 5
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: ST_TO_ADDR
42564: GO 43263
42566: LD_INT 6
42568: DOUBLE
42569: EQUAL
42570: IFTRUE 42574
42572: GO 42592
42574: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42575: LD_ADDR_VAR 0 3
42579: PUSH
42580: LD_INT 4
42582: PUSH
42583: LD_INT 5
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: ST_TO_ADDR
42590: GO 43263
42592: LD_INT 10
42594: DOUBLE
42595: EQUAL
42596: IFTRUE 42600
42598: GO 42618
42600: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42601: LD_ADDR_VAR 0 3
42605: PUSH
42606: LD_INT 4
42608: PUSH
42609: LD_INT 5
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: ST_TO_ADDR
42616: GO 43263
42618: LD_INT 22
42620: DOUBLE
42621: EQUAL
42622: IFTRUE 42626
42624: GO 42652
42626: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42627: LD_ADDR_VAR 0 3
42631: PUSH
42632: LD_INT 11
42634: PUSH
42635: LD_INT 12
42637: PUSH
42638: LD_INT 13
42640: PUSH
42641: LD_INT 14
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: ST_TO_ADDR
42650: GO 43263
42652: LD_INT 23
42654: DOUBLE
42655: EQUAL
42656: IFTRUE 42660
42658: GO 42686
42660: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42661: LD_ADDR_VAR 0 3
42665: PUSH
42666: LD_INT 11
42668: PUSH
42669: LD_INT 12
42671: PUSH
42672: LD_INT 13
42674: PUSH
42675: LD_INT 14
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: ST_TO_ADDR
42684: GO 43263
42686: LD_INT 24
42688: DOUBLE
42689: EQUAL
42690: IFTRUE 42694
42692: GO 42720
42694: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42695: LD_ADDR_VAR 0 3
42699: PUSH
42700: LD_INT 11
42702: PUSH
42703: LD_INT 12
42705: PUSH
42706: LD_INT 13
42708: PUSH
42709: LD_INT 14
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: ST_TO_ADDR
42718: GO 43263
42720: LD_INT 30
42722: DOUBLE
42723: EQUAL
42724: IFTRUE 42728
42726: GO 42754
42728: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42729: LD_ADDR_VAR 0 3
42733: PUSH
42734: LD_INT 11
42736: PUSH
42737: LD_INT 12
42739: PUSH
42740: LD_INT 13
42742: PUSH
42743: LD_INT 14
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: ST_TO_ADDR
42752: GO 43263
42754: LD_INT 25
42756: DOUBLE
42757: EQUAL
42758: IFTRUE 42762
42760: GO 42780
42762: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42763: LD_ADDR_VAR 0 3
42767: PUSH
42768: LD_INT 13
42770: PUSH
42771: LD_INT 14
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: ST_TO_ADDR
42778: GO 43263
42780: LD_INT 27
42782: DOUBLE
42783: EQUAL
42784: IFTRUE 42788
42786: GO 42806
42788: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42789: LD_ADDR_VAR 0 3
42793: PUSH
42794: LD_INT 13
42796: PUSH
42797: LD_INT 14
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: ST_TO_ADDR
42804: GO 43263
42806: LD_EXP 55
42810: DOUBLE
42811: EQUAL
42812: IFTRUE 42816
42814: GO 42842
42816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42817: LD_ADDR_VAR 0 3
42821: PUSH
42822: LD_INT 11
42824: PUSH
42825: LD_INT 12
42827: PUSH
42828: LD_INT 13
42830: PUSH
42831: LD_INT 14
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: ST_TO_ADDR
42840: GO 43263
42842: LD_INT 28
42844: DOUBLE
42845: EQUAL
42846: IFTRUE 42850
42848: GO 42868
42850: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42851: LD_ADDR_VAR 0 3
42855: PUSH
42856: LD_INT 13
42858: PUSH
42859: LD_INT 14
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: ST_TO_ADDR
42866: GO 43263
42868: LD_INT 29
42870: DOUBLE
42871: EQUAL
42872: IFTRUE 42876
42874: GO 42894
42876: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42877: LD_ADDR_VAR 0 3
42881: PUSH
42882: LD_INT 13
42884: PUSH
42885: LD_INT 14
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: ST_TO_ADDR
42892: GO 43263
42894: LD_INT 31
42896: DOUBLE
42897: EQUAL
42898: IFTRUE 42902
42900: GO 42920
42902: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42903: LD_ADDR_VAR 0 3
42907: PUSH
42908: LD_INT 13
42910: PUSH
42911: LD_INT 14
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: ST_TO_ADDR
42918: GO 43263
42920: LD_INT 26
42922: DOUBLE
42923: EQUAL
42924: IFTRUE 42928
42926: GO 42946
42928: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42929: LD_ADDR_VAR 0 3
42933: PUSH
42934: LD_INT 13
42936: PUSH
42937: LD_INT 14
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: ST_TO_ADDR
42944: GO 43263
42946: LD_INT 42
42948: DOUBLE
42949: EQUAL
42950: IFTRUE 42954
42952: GO 42980
42954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42955: LD_ADDR_VAR 0 3
42959: PUSH
42960: LD_INT 21
42962: PUSH
42963: LD_INT 22
42965: PUSH
42966: LD_INT 23
42968: PUSH
42969: LD_INT 24
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: ST_TO_ADDR
42978: GO 43263
42980: LD_INT 43
42982: DOUBLE
42983: EQUAL
42984: IFTRUE 42988
42986: GO 43014
42988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42989: LD_ADDR_VAR 0 3
42993: PUSH
42994: LD_INT 21
42996: PUSH
42997: LD_INT 22
42999: PUSH
43000: LD_INT 23
43002: PUSH
43003: LD_INT 24
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: ST_TO_ADDR
43012: GO 43263
43014: LD_INT 44
43016: DOUBLE
43017: EQUAL
43018: IFTRUE 43022
43020: GO 43048
43022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43023: LD_ADDR_VAR 0 3
43027: PUSH
43028: LD_INT 21
43030: PUSH
43031: LD_INT 22
43033: PUSH
43034: LD_INT 23
43036: PUSH
43037: LD_INT 24
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: ST_TO_ADDR
43046: GO 43263
43048: LD_INT 45
43050: DOUBLE
43051: EQUAL
43052: IFTRUE 43056
43054: GO 43082
43056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43057: LD_ADDR_VAR 0 3
43061: PUSH
43062: LD_INT 21
43064: PUSH
43065: LD_INT 22
43067: PUSH
43068: LD_INT 23
43070: PUSH
43071: LD_INT 24
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: ST_TO_ADDR
43080: GO 43263
43082: LD_INT 49
43084: DOUBLE
43085: EQUAL
43086: IFTRUE 43090
43088: GO 43116
43090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43091: LD_ADDR_VAR 0 3
43095: PUSH
43096: LD_INT 21
43098: PUSH
43099: LD_INT 22
43101: PUSH
43102: LD_INT 23
43104: PUSH
43105: LD_INT 24
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: ST_TO_ADDR
43114: GO 43263
43116: LD_INT 51
43118: DOUBLE
43119: EQUAL
43120: IFTRUE 43124
43122: GO 43150
43124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43125: LD_ADDR_VAR 0 3
43129: PUSH
43130: LD_INT 21
43132: PUSH
43133: LD_INT 22
43135: PUSH
43136: LD_INT 23
43138: PUSH
43139: LD_INT 24
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: ST_TO_ADDR
43148: GO 43263
43150: LD_INT 52
43152: DOUBLE
43153: EQUAL
43154: IFTRUE 43158
43156: GO 43184
43158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43159: LD_ADDR_VAR 0 3
43163: PUSH
43164: LD_INT 21
43166: PUSH
43167: LD_INT 22
43169: PUSH
43170: LD_INT 23
43172: PUSH
43173: LD_INT 24
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: ST_TO_ADDR
43182: GO 43263
43184: LD_INT 53
43186: DOUBLE
43187: EQUAL
43188: IFTRUE 43192
43190: GO 43210
43192: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43193: LD_ADDR_VAR 0 3
43197: PUSH
43198: LD_INT 23
43200: PUSH
43201: LD_INT 24
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: ST_TO_ADDR
43208: GO 43263
43210: LD_INT 46
43212: DOUBLE
43213: EQUAL
43214: IFTRUE 43218
43216: GO 43236
43218: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43219: LD_ADDR_VAR 0 3
43223: PUSH
43224: LD_INT 23
43226: PUSH
43227: LD_INT 24
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: ST_TO_ADDR
43234: GO 43263
43236: LD_INT 47
43238: DOUBLE
43239: EQUAL
43240: IFTRUE 43244
43242: GO 43262
43244: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43245: LD_ADDR_VAR 0 3
43249: PUSH
43250: LD_INT 23
43252: PUSH
43253: LD_INT 24
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: ST_TO_ADDR
43260: GO 43263
43262: POP
// result := ( chassis in result ) ;
43263: LD_ADDR_VAR 0 3
43267: PUSH
43268: LD_VAR 0 1
43272: PUSH
43273: LD_VAR 0 3
43277: IN
43278: ST_TO_ADDR
// end ;
43279: LD_VAR 0 3
43283: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43284: LD_INT 0
43286: PPUSH
43287: PPUSH
43288: PPUSH
43289: PPUSH
43290: PPUSH
43291: PPUSH
43292: PPUSH
// result := array ;
43293: LD_ADDR_VAR 0 5
43297: PUSH
43298: LD_VAR 0 1
43302: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43303: LD_VAR 0 1
43307: NOT
43308: PUSH
43309: LD_VAR 0 2
43313: NOT
43314: OR
43315: PUSH
43316: LD_VAR 0 3
43320: NOT
43321: OR
43322: PUSH
43323: LD_VAR 0 2
43327: PUSH
43328: LD_VAR 0 1
43332: GREATER
43333: OR
43334: PUSH
43335: LD_VAR 0 3
43339: PUSH
43340: LD_VAR 0 1
43344: GREATER
43345: OR
43346: IFFALSE 43350
// exit ;
43348: GO 43646
// if direction then
43350: LD_VAR 0 4
43354: IFFALSE 43418
// begin d := 1 ;
43356: LD_ADDR_VAR 0 9
43360: PUSH
43361: LD_INT 1
43363: ST_TO_ADDR
// if i_from > i_to then
43364: LD_VAR 0 2
43368: PUSH
43369: LD_VAR 0 3
43373: GREATER
43374: IFFALSE 43400
// length := ( array - i_from ) + i_to else
43376: LD_ADDR_VAR 0 11
43380: PUSH
43381: LD_VAR 0 1
43385: PUSH
43386: LD_VAR 0 2
43390: MINUS
43391: PUSH
43392: LD_VAR 0 3
43396: PLUS
43397: ST_TO_ADDR
43398: GO 43416
// length := i_to - i_from ;
43400: LD_ADDR_VAR 0 11
43404: PUSH
43405: LD_VAR 0 3
43409: PUSH
43410: LD_VAR 0 2
43414: MINUS
43415: ST_TO_ADDR
// end else
43416: GO 43479
// begin d := - 1 ;
43418: LD_ADDR_VAR 0 9
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: ST_TO_ADDR
// if i_from > i_to then
43427: LD_VAR 0 2
43431: PUSH
43432: LD_VAR 0 3
43436: GREATER
43437: IFFALSE 43457
// length := i_from - i_to else
43439: LD_ADDR_VAR 0 11
43443: PUSH
43444: LD_VAR 0 2
43448: PUSH
43449: LD_VAR 0 3
43453: MINUS
43454: ST_TO_ADDR
43455: GO 43479
// length := ( array - i_to ) + i_from ;
43457: LD_ADDR_VAR 0 11
43461: PUSH
43462: LD_VAR 0 1
43466: PUSH
43467: LD_VAR 0 3
43471: MINUS
43472: PUSH
43473: LD_VAR 0 2
43477: PLUS
43478: ST_TO_ADDR
// end ; if not length then
43479: LD_VAR 0 11
43483: NOT
43484: IFFALSE 43488
// exit ;
43486: GO 43646
// tmp := array ;
43488: LD_ADDR_VAR 0 10
43492: PUSH
43493: LD_VAR 0 1
43497: ST_TO_ADDR
// for i = 1 to length do
43498: LD_ADDR_VAR 0 6
43502: PUSH
43503: DOUBLE
43504: LD_INT 1
43506: DEC
43507: ST_TO_ADDR
43508: LD_VAR 0 11
43512: PUSH
43513: FOR_TO
43514: IFFALSE 43634
// begin for j = 1 to array do
43516: LD_ADDR_VAR 0 7
43520: PUSH
43521: DOUBLE
43522: LD_INT 1
43524: DEC
43525: ST_TO_ADDR
43526: LD_VAR 0 1
43530: PUSH
43531: FOR_TO
43532: IFFALSE 43620
// begin k := j + d ;
43534: LD_ADDR_VAR 0 8
43538: PUSH
43539: LD_VAR 0 7
43543: PUSH
43544: LD_VAR 0 9
43548: PLUS
43549: ST_TO_ADDR
// if k > array then
43550: LD_VAR 0 8
43554: PUSH
43555: LD_VAR 0 1
43559: GREATER
43560: IFFALSE 43570
// k := 1 ;
43562: LD_ADDR_VAR 0 8
43566: PUSH
43567: LD_INT 1
43569: ST_TO_ADDR
// if not k then
43570: LD_VAR 0 8
43574: NOT
43575: IFFALSE 43587
// k := array ;
43577: LD_ADDR_VAR 0 8
43581: PUSH
43582: LD_VAR 0 1
43586: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43587: LD_ADDR_VAR 0 10
43591: PUSH
43592: LD_VAR 0 10
43596: PPUSH
43597: LD_VAR 0 8
43601: PPUSH
43602: LD_VAR 0 1
43606: PUSH
43607: LD_VAR 0 7
43611: ARRAY
43612: PPUSH
43613: CALL_OW 1
43617: ST_TO_ADDR
// end ;
43618: GO 43531
43620: POP
43621: POP
// array := tmp ;
43622: LD_ADDR_VAR 0 1
43626: PUSH
43627: LD_VAR 0 10
43631: ST_TO_ADDR
// end ;
43632: GO 43513
43634: POP
43635: POP
// result := array ;
43636: LD_ADDR_VAR 0 5
43640: PUSH
43641: LD_VAR 0 1
43645: ST_TO_ADDR
// end ;
43646: LD_VAR 0 5
43650: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43651: LD_INT 0
43653: PPUSH
43654: PPUSH
// result := 0 ;
43655: LD_ADDR_VAR 0 3
43659: PUSH
43660: LD_INT 0
43662: ST_TO_ADDR
// if not array or not value in array then
43663: LD_VAR 0 1
43667: NOT
43668: PUSH
43669: LD_VAR 0 2
43673: PUSH
43674: LD_VAR 0 1
43678: IN
43679: NOT
43680: OR
43681: IFFALSE 43685
// exit ;
43683: GO 43739
// for i = 1 to array do
43685: LD_ADDR_VAR 0 4
43689: PUSH
43690: DOUBLE
43691: LD_INT 1
43693: DEC
43694: ST_TO_ADDR
43695: LD_VAR 0 1
43699: PUSH
43700: FOR_TO
43701: IFFALSE 43737
// if value = array [ i ] then
43703: LD_VAR 0 2
43707: PUSH
43708: LD_VAR 0 1
43712: PUSH
43713: LD_VAR 0 4
43717: ARRAY
43718: EQUAL
43719: IFFALSE 43735
// begin result := i ;
43721: LD_ADDR_VAR 0 3
43725: PUSH
43726: LD_VAR 0 4
43730: ST_TO_ADDR
// exit ;
43731: POP
43732: POP
43733: GO 43739
// end ;
43735: GO 43700
43737: POP
43738: POP
// end ;
43739: LD_VAR 0 3
43743: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43744: LD_INT 0
43746: PPUSH
// vc_chassis := chassis ;
43747: LD_ADDR_OWVAR 37
43751: PUSH
43752: LD_VAR 0 1
43756: ST_TO_ADDR
// vc_engine := engine ;
43757: LD_ADDR_OWVAR 39
43761: PUSH
43762: LD_VAR 0 2
43766: ST_TO_ADDR
// vc_control := control ;
43767: LD_ADDR_OWVAR 38
43771: PUSH
43772: LD_VAR 0 3
43776: ST_TO_ADDR
// vc_weapon := weapon ;
43777: LD_ADDR_OWVAR 40
43781: PUSH
43782: LD_VAR 0 4
43786: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43787: LD_ADDR_OWVAR 41
43791: PUSH
43792: LD_VAR 0 5
43796: ST_TO_ADDR
// end ;
43797: LD_VAR 0 6
43801: RET
// export function WantPlant ( unit ) ; var task ; begin
43802: LD_INT 0
43804: PPUSH
43805: PPUSH
// result := false ;
43806: LD_ADDR_VAR 0 2
43810: PUSH
43811: LD_INT 0
43813: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43814: LD_ADDR_VAR 0 3
43818: PUSH
43819: LD_VAR 0 1
43823: PPUSH
43824: CALL_OW 437
43828: ST_TO_ADDR
// if task then
43829: LD_VAR 0 3
43833: IFFALSE 43861
// if task [ 1 ] [ 1 ] = p then
43835: LD_VAR 0 3
43839: PUSH
43840: LD_INT 1
43842: ARRAY
43843: PUSH
43844: LD_INT 1
43846: ARRAY
43847: PUSH
43848: LD_STRING p
43850: EQUAL
43851: IFFALSE 43861
// result := true ;
43853: LD_ADDR_VAR 0 2
43857: PUSH
43858: LD_INT 1
43860: ST_TO_ADDR
// end ;
43861: LD_VAR 0 2
43865: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43866: LD_INT 0
43868: PPUSH
43869: PPUSH
43870: PPUSH
43871: PPUSH
// if pos < 1 then
43872: LD_VAR 0 2
43876: PUSH
43877: LD_INT 1
43879: LESS
43880: IFFALSE 43884
// exit ;
43882: GO 44187
// if pos = 1 then
43884: LD_VAR 0 2
43888: PUSH
43889: LD_INT 1
43891: EQUAL
43892: IFFALSE 43925
// result := Replace ( arr , pos [ 1 ] , value ) else
43894: LD_ADDR_VAR 0 4
43898: PUSH
43899: LD_VAR 0 1
43903: PPUSH
43904: LD_VAR 0 2
43908: PUSH
43909: LD_INT 1
43911: ARRAY
43912: PPUSH
43913: LD_VAR 0 3
43917: PPUSH
43918: CALL_OW 1
43922: ST_TO_ADDR
43923: GO 44187
// begin tmp := arr ;
43925: LD_ADDR_VAR 0 6
43929: PUSH
43930: LD_VAR 0 1
43934: ST_TO_ADDR
// s_arr := [ tmp ] ;
43935: LD_ADDR_VAR 0 7
43939: PUSH
43940: LD_VAR 0 6
43944: PUSH
43945: EMPTY
43946: LIST
43947: ST_TO_ADDR
// for i = 1 to pos - 1 do
43948: LD_ADDR_VAR 0 5
43952: PUSH
43953: DOUBLE
43954: LD_INT 1
43956: DEC
43957: ST_TO_ADDR
43958: LD_VAR 0 2
43962: PUSH
43963: LD_INT 1
43965: MINUS
43966: PUSH
43967: FOR_TO
43968: IFFALSE 44013
// begin tmp := tmp [ pos [ i ] ] ;
43970: LD_ADDR_VAR 0 6
43974: PUSH
43975: LD_VAR 0 6
43979: PUSH
43980: LD_VAR 0 2
43984: PUSH
43985: LD_VAR 0 5
43989: ARRAY
43990: ARRAY
43991: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43992: LD_ADDR_VAR 0 7
43996: PUSH
43997: LD_VAR 0 7
44001: PUSH
44002: LD_VAR 0 6
44006: PUSH
44007: EMPTY
44008: LIST
44009: ADD
44010: ST_TO_ADDR
// end ;
44011: GO 43967
44013: POP
44014: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44015: LD_ADDR_VAR 0 6
44019: PUSH
44020: LD_VAR 0 6
44024: PPUSH
44025: LD_VAR 0 2
44029: PUSH
44030: LD_VAR 0 2
44034: ARRAY
44035: PPUSH
44036: LD_VAR 0 3
44040: PPUSH
44041: CALL_OW 1
44045: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44046: LD_ADDR_VAR 0 7
44050: PUSH
44051: LD_VAR 0 7
44055: PPUSH
44056: LD_VAR 0 7
44060: PPUSH
44061: LD_VAR 0 6
44065: PPUSH
44066: CALL_OW 1
44070: ST_TO_ADDR
// for i = s_arr downto 2 do
44071: LD_ADDR_VAR 0 5
44075: PUSH
44076: DOUBLE
44077: LD_VAR 0 7
44081: INC
44082: ST_TO_ADDR
44083: LD_INT 2
44085: PUSH
44086: FOR_DOWNTO
44087: IFFALSE 44171
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44089: LD_ADDR_VAR 0 6
44093: PUSH
44094: LD_VAR 0 7
44098: PUSH
44099: LD_VAR 0 5
44103: PUSH
44104: LD_INT 1
44106: MINUS
44107: ARRAY
44108: PPUSH
44109: LD_VAR 0 2
44113: PUSH
44114: LD_VAR 0 5
44118: PUSH
44119: LD_INT 1
44121: MINUS
44122: ARRAY
44123: PPUSH
44124: LD_VAR 0 7
44128: PUSH
44129: LD_VAR 0 5
44133: ARRAY
44134: PPUSH
44135: CALL_OW 1
44139: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44140: LD_ADDR_VAR 0 7
44144: PUSH
44145: LD_VAR 0 7
44149: PPUSH
44150: LD_VAR 0 5
44154: PUSH
44155: LD_INT 1
44157: MINUS
44158: PPUSH
44159: LD_VAR 0 6
44163: PPUSH
44164: CALL_OW 1
44168: ST_TO_ADDR
// end ;
44169: GO 44086
44171: POP
44172: POP
// result := s_arr [ 1 ] ;
44173: LD_ADDR_VAR 0 4
44177: PUSH
44178: LD_VAR 0 7
44182: PUSH
44183: LD_INT 1
44185: ARRAY
44186: ST_TO_ADDR
// end ; end ;
44187: LD_VAR 0 4
44191: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44192: LD_INT 0
44194: PPUSH
44195: PPUSH
// if not list then
44196: LD_VAR 0 1
44200: NOT
44201: IFFALSE 44205
// exit ;
44203: GO 44296
// i := list [ pos1 ] ;
44205: LD_ADDR_VAR 0 5
44209: PUSH
44210: LD_VAR 0 1
44214: PUSH
44215: LD_VAR 0 2
44219: ARRAY
44220: ST_TO_ADDR
// if not i then
44221: LD_VAR 0 5
44225: NOT
44226: IFFALSE 44230
// exit ;
44228: GO 44296
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44230: LD_ADDR_VAR 0 1
44234: PUSH
44235: LD_VAR 0 1
44239: PPUSH
44240: LD_VAR 0 2
44244: PPUSH
44245: LD_VAR 0 1
44249: PUSH
44250: LD_VAR 0 3
44254: ARRAY
44255: PPUSH
44256: CALL_OW 1
44260: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44261: LD_ADDR_VAR 0 1
44265: PUSH
44266: LD_VAR 0 1
44270: PPUSH
44271: LD_VAR 0 3
44275: PPUSH
44276: LD_VAR 0 5
44280: PPUSH
44281: CALL_OW 1
44285: ST_TO_ADDR
// result := list ;
44286: LD_ADDR_VAR 0 4
44290: PUSH
44291: LD_VAR 0 1
44295: ST_TO_ADDR
// end ;
44296: LD_VAR 0 4
44300: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44301: LD_INT 0
44303: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44304: LD_ADDR_VAR 0 5
44308: PUSH
44309: LD_VAR 0 1
44313: PPUSH
44314: CALL_OW 250
44318: PPUSH
44319: LD_VAR 0 1
44323: PPUSH
44324: CALL_OW 251
44328: PPUSH
44329: LD_VAR 0 2
44333: PPUSH
44334: LD_VAR 0 3
44338: PPUSH
44339: LD_VAR 0 4
44343: PPUSH
44344: CALL 44354 0 5
44348: ST_TO_ADDR
// end ;
44349: LD_VAR 0 5
44353: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44354: LD_INT 0
44356: PPUSH
44357: PPUSH
44358: PPUSH
44359: PPUSH
// if not list then
44360: LD_VAR 0 3
44364: NOT
44365: IFFALSE 44369
// exit ;
44367: GO 44757
// result := [ ] ;
44369: LD_ADDR_VAR 0 6
44373: PUSH
44374: EMPTY
44375: ST_TO_ADDR
// for i in list do
44376: LD_ADDR_VAR 0 7
44380: PUSH
44381: LD_VAR 0 3
44385: PUSH
44386: FOR_IN
44387: IFFALSE 44589
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44389: LD_ADDR_VAR 0 9
44393: PUSH
44394: LD_VAR 0 7
44398: PPUSH
44399: LD_VAR 0 1
44403: PPUSH
44404: LD_VAR 0 2
44408: PPUSH
44409: CALL_OW 297
44413: ST_TO_ADDR
// if not result then
44414: LD_VAR 0 6
44418: NOT
44419: IFFALSE 44445
// result := [ [ i , tmp ] ] else
44421: LD_ADDR_VAR 0 6
44425: PUSH
44426: LD_VAR 0 7
44430: PUSH
44431: LD_VAR 0 9
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: EMPTY
44441: LIST
44442: ST_TO_ADDR
44443: GO 44587
// begin if result [ result ] [ 2 ] < tmp then
44445: LD_VAR 0 6
44449: PUSH
44450: LD_VAR 0 6
44454: ARRAY
44455: PUSH
44456: LD_INT 2
44458: ARRAY
44459: PUSH
44460: LD_VAR 0 9
44464: LESS
44465: IFFALSE 44507
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44467: LD_ADDR_VAR 0 6
44471: PUSH
44472: LD_VAR 0 6
44476: PPUSH
44477: LD_VAR 0 6
44481: PUSH
44482: LD_INT 1
44484: PLUS
44485: PPUSH
44486: LD_VAR 0 7
44490: PUSH
44491: LD_VAR 0 9
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PPUSH
44500: CALL_OW 2
44504: ST_TO_ADDR
44505: GO 44587
// for j = 1 to result do
44507: LD_ADDR_VAR 0 8
44511: PUSH
44512: DOUBLE
44513: LD_INT 1
44515: DEC
44516: ST_TO_ADDR
44517: LD_VAR 0 6
44521: PUSH
44522: FOR_TO
44523: IFFALSE 44585
// begin if tmp < result [ j ] [ 2 ] then
44525: LD_VAR 0 9
44529: PUSH
44530: LD_VAR 0 6
44534: PUSH
44535: LD_VAR 0 8
44539: ARRAY
44540: PUSH
44541: LD_INT 2
44543: ARRAY
44544: LESS
44545: IFFALSE 44583
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44547: LD_ADDR_VAR 0 6
44551: PUSH
44552: LD_VAR 0 6
44556: PPUSH
44557: LD_VAR 0 8
44561: PPUSH
44562: LD_VAR 0 7
44566: PUSH
44567: LD_VAR 0 9
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PPUSH
44576: CALL_OW 2
44580: ST_TO_ADDR
// break ;
44581: GO 44585
// end ; end ;
44583: GO 44522
44585: POP
44586: POP
// end ; end ;
44587: GO 44386
44589: POP
44590: POP
// if result and not asc then
44591: LD_VAR 0 6
44595: PUSH
44596: LD_VAR 0 4
44600: NOT
44601: AND
44602: IFFALSE 44677
// begin tmp := result ;
44604: LD_ADDR_VAR 0 9
44608: PUSH
44609: LD_VAR 0 6
44613: ST_TO_ADDR
// for i = tmp downto 1 do
44614: LD_ADDR_VAR 0 7
44618: PUSH
44619: DOUBLE
44620: LD_VAR 0 9
44624: INC
44625: ST_TO_ADDR
44626: LD_INT 1
44628: PUSH
44629: FOR_DOWNTO
44630: IFFALSE 44675
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44632: LD_ADDR_VAR 0 6
44636: PUSH
44637: LD_VAR 0 6
44641: PPUSH
44642: LD_VAR 0 9
44646: PUSH
44647: LD_VAR 0 7
44651: MINUS
44652: PUSH
44653: LD_INT 1
44655: PLUS
44656: PPUSH
44657: LD_VAR 0 9
44661: PUSH
44662: LD_VAR 0 7
44666: ARRAY
44667: PPUSH
44668: CALL_OW 1
44672: ST_TO_ADDR
44673: GO 44629
44675: POP
44676: POP
// end ; tmp := [ ] ;
44677: LD_ADDR_VAR 0 9
44681: PUSH
44682: EMPTY
44683: ST_TO_ADDR
// if mode then
44684: LD_VAR 0 5
44688: IFFALSE 44757
// begin for i = 1 to result do
44690: LD_ADDR_VAR 0 7
44694: PUSH
44695: DOUBLE
44696: LD_INT 1
44698: DEC
44699: ST_TO_ADDR
44700: LD_VAR 0 6
44704: PUSH
44705: FOR_TO
44706: IFFALSE 44745
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44708: LD_ADDR_VAR 0 9
44712: PUSH
44713: LD_VAR 0 9
44717: PPUSH
44718: LD_VAR 0 7
44722: PPUSH
44723: LD_VAR 0 6
44727: PUSH
44728: LD_VAR 0 7
44732: ARRAY
44733: PUSH
44734: LD_INT 1
44736: ARRAY
44737: PPUSH
44738: CALL_OW 1
44742: ST_TO_ADDR
44743: GO 44705
44745: POP
44746: POP
// result := tmp ;
44747: LD_ADDR_VAR 0 6
44751: PUSH
44752: LD_VAR 0 9
44756: ST_TO_ADDR
// end ; end ;
44757: LD_VAR 0 6
44761: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44762: LD_INT 0
44764: PPUSH
44765: PPUSH
44766: PPUSH
44767: PPUSH
44768: PPUSH
44769: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44770: LD_ADDR_VAR 0 5
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: EMPTY
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: ST_TO_ADDR
// if not x or not y then
44792: LD_VAR 0 2
44796: NOT
44797: PUSH
44798: LD_VAR 0 3
44802: NOT
44803: OR
44804: IFFALSE 44808
// exit ;
44806: GO 46460
// if not range then
44808: LD_VAR 0 4
44812: NOT
44813: IFFALSE 44823
// range := 10 ;
44815: LD_ADDR_VAR 0 4
44819: PUSH
44820: LD_INT 10
44822: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44823: LD_ADDR_VAR 0 8
44827: PUSH
44828: LD_INT 81
44830: PUSH
44831: LD_VAR 0 1
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 92
44842: PUSH
44843: LD_VAR 0 2
44847: PUSH
44848: LD_VAR 0 3
44852: PUSH
44853: LD_VAR 0 4
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 3
44866: PUSH
44867: LD_INT 21
44869: PUSH
44870: LD_INT 3
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: LIST
44885: PPUSH
44886: CALL_OW 69
44890: ST_TO_ADDR
// if not tmp then
44891: LD_VAR 0 8
44895: NOT
44896: IFFALSE 44900
// exit ;
44898: GO 46460
// for i in tmp do
44900: LD_ADDR_VAR 0 6
44904: PUSH
44905: LD_VAR 0 8
44909: PUSH
44910: FOR_IN
44911: IFFALSE 46435
// begin points := [ 0 , 0 , 0 ] ;
44913: LD_ADDR_VAR 0 9
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: LIST
44931: ST_TO_ADDR
// bpoints := 1 ;
44932: LD_ADDR_VAR 0 10
44936: PUSH
44937: LD_INT 1
44939: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44940: LD_VAR 0 6
44944: PPUSH
44945: CALL_OW 247
44949: PUSH
44950: LD_INT 1
44952: DOUBLE
44953: EQUAL
44954: IFTRUE 44958
44956: GO 45536
44958: POP
// begin if GetClass ( i ) = 1 then
44959: LD_VAR 0 6
44963: PPUSH
44964: CALL_OW 257
44968: PUSH
44969: LD_INT 1
44971: EQUAL
44972: IFFALSE 44993
// points := [ 10 , 5 , 3 ] ;
44974: LD_ADDR_VAR 0 9
44978: PUSH
44979: LD_INT 10
44981: PUSH
44982: LD_INT 5
44984: PUSH
44985: LD_INT 3
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: LIST
44992: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44993: LD_VAR 0 6
44997: PPUSH
44998: CALL_OW 257
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: LD_INT 3
45008: PUSH
45009: LD_INT 4
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: LIST
45016: IN
45017: IFFALSE 45038
// points := [ 3 , 2 , 1 ] ;
45019: LD_ADDR_VAR 0 9
45023: PUSH
45024: LD_INT 3
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: LIST
45037: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45038: LD_VAR 0 6
45042: PPUSH
45043: CALL_OW 257
45047: PUSH
45048: LD_INT 5
45050: EQUAL
45051: IFFALSE 45072
// points := [ 130 , 5 , 2 ] ;
45053: LD_ADDR_VAR 0 9
45057: PUSH
45058: LD_INT 130
45060: PUSH
45061: LD_INT 5
45063: PUSH
45064: LD_INT 2
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: LIST
45071: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45072: LD_VAR 0 6
45076: PPUSH
45077: CALL_OW 257
45081: PUSH
45082: LD_INT 8
45084: EQUAL
45085: IFFALSE 45106
// points := [ 35 , 35 , 30 ] ;
45087: LD_ADDR_VAR 0 9
45091: PUSH
45092: LD_INT 35
45094: PUSH
45095: LD_INT 35
45097: PUSH
45098: LD_INT 30
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: LIST
45105: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45106: LD_VAR 0 6
45110: PPUSH
45111: CALL_OW 257
45115: PUSH
45116: LD_INT 9
45118: EQUAL
45119: IFFALSE 45140
// points := [ 20 , 55 , 40 ] ;
45121: LD_ADDR_VAR 0 9
45125: PUSH
45126: LD_INT 20
45128: PUSH
45129: LD_INT 55
45131: PUSH
45132: LD_INT 40
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: LIST
45139: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45140: LD_VAR 0 6
45144: PPUSH
45145: CALL_OW 257
45149: PUSH
45150: LD_INT 12
45152: PUSH
45153: LD_INT 16
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: IN
45160: IFFALSE 45181
// points := [ 5 , 3 , 2 ] ;
45162: LD_ADDR_VAR 0 9
45166: PUSH
45167: LD_INT 5
45169: PUSH
45170: LD_INT 3
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: LIST
45180: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45181: LD_VAR 0 6
45185: PPUSH
45186: CALL_OW 257
45190: PUSH
45191: LD_INT 17
45193: EQUAL
45194: IFFALSE 45215
// points := [ 100 , 50 , 75 ] ;
45196: LD_ADDR_VAR 0 9
45200: PUSH
45201: LD_INT 100
45203: PUSH
45204: LD_INT 50
45206: PUSH
45207: LD_INT 75
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: LIST
45214: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45215: LD_VAR 0 6
45219: PPUSH
45220: CALL_OW 257
45224: PUSH
45225: LD_INT 15
45227: EQUAL
45228: IFFALSE 45249
// points := [ 10 , 5 , 3 ] ;
45230: LD_ADDR_VAR 0 9
45234: PUSH
45235: LD_INT 10
45237: PUSH
45238: LD_INT 5
45240: PUSH
45241: LD_INT 3
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: LIST
45248: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45249: LD_VAR 0 6
45253: PPUSH
45254: CALL_OW 257
45258: PUSH
45259: LD_INT 14
45261: EQUAL
45262: IFFALSE 45283
// points := [ 10 , 0 , 0 ] ;
45264: LD_ADDR_VAR 0 9
45268: PUSH
45269: LD_INT 10
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45283: LD_VAR 0 6
45287: PPUSH
45288: CALL_OW 257
45292: PUSH
45293: LD_INT 11
45295: EQUAL
45296: IFFALSE 45317
// points := [ 30 , 10 , 5 ] ;
45298: LD_ADDR_VAR 0 9
45302: PUSH
45303: LD_INT 30
45305: PUSH
45306: LD_INT 10
45308: PUSH
45309: LD_INT 5
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: LIST
45316: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45317: LD_VAR 0 1
45321: PPUSH
45322: LD_INT 5
45324: PPUSH
45325: CALL_OW 321
45329: PUSH
45330: LD_INT 2
45332: EQUAL
45333: IFFALSE 45350
// bpoints := bpoints * 1.8 ;
45335: LD_ADDR_VAR 0 10
45339: PUSH
45340: LD_VAR 0 10
45344: PUSH
45345: LD_REAL  1.80000000000000E+0000
45348: MUL
45349: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45350: LD_VAR 0 6
45354: PPUSH
45355: CALL_OW 257
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: LD_INT 2
45365: PUSH
45366: LD_INT 3
45368: PUSH
45369: LD_INT 4
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: IN
45378: PUSH
45379: LD_VAR 0 1
45383: PPUSH
45384: LD_INT 51
45386: PPUSH
45387: CALL_OW 321
45391: PUSH
45392: LD_INT 2
45394: EQUAL
45395: AND
45396: IFFALSE 45413
// bpoints := bpoints * 1.2 ;
45398: LD_ADDR_VAR 0 10
45402: PUSH
45403: LD_VAR 0 10
45407: PUSH
45408: LD_REAL  1.20000000000000E+0000
45411: MUL
45412: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45413: LD_VAR 0 6
45417: PPUSH
45418: CALL_OW 257
45422: PUSH
45423: LD_INT 5
45425: PUSH
45426: LD_INT 7
45428: PUSH
45429: LD_INT 9
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: LIST
45436: IN
45437: PUSH
45438: LD_VAR 0 1
45442: PPUSH
45443: LD_INT 52
45445: PPUSH
45446: CALL_OW 321
45450: PUSH
45451: LD_INT 2
45453: EQUAL
45454: AND
45455: IFFALSE 45472
// bpoints := bpoints * 1.5 ;
45457: LD_ADDR_VAR 0 10
45461: PUSH
45462: LD_VAR 0 10
45466: PUSH
45467: LD_REAL  1.50000000000000E+0000
45470: MUL
45471: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45472: LD_VAR 0 1
45476: PPUSH
45477: LD_INT 66
45479: PPUSH
45480: CALL_OW 321
45484: PUSH
45485: LD_INT 2
45487: EQUAL
45488: IFFALSE 45505
// bpoints := bpoints * 1.1 ;
45490: LD_ADDR_VAR 0 10
45494: PUSH
45495: LD_VAR 0 10
45499: PUSH
45500: LD_REAL  1.10000000000000E+0000
45503: MUL
45504: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45505: LD_ADDR_VAR 0 10
45509: PUSH
45510: LD_VAR 0 10
45514: PUSH
45515: LD_VAR 0 6
45519: PPUSH
45520: LD_INT 1
45522: PPUSH
45523: CALL_OW 259
45527: PUSH
45528: LD_REAL  1.15000000000000E+0000
45531: MUL
45532: MUL
45533: ST_TO_ADDR
// end ; unit_vehicle :
45534: GO 46364
45536: LD_INT 2
45538: DOUBLE
45539: EQUAL
45540: IFTRUE 45544
45542: GO 46352
45544: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45545: LD_VAR 0 6
45549: PPUSH
45550: CALL_OW 264
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: LD_INT 42
45560: PUSH
45561: LD_INT 24
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: LIST
45568: IN
45569: IFFALSE 45590
// points := [ 25 , 5 , 3 ] ;
45571: LD_ADDR_VAR 0 9
45575: PUSH
45576: LD_INT 25
45578: PUSH
45579: LD_INT 5
45581: PUSH
45582: LD_INT 3
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: LIST
45589: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45590: LD_VAR 0 6
45594: PPUSH
45595: CALL_OW 264
45599: PUSH
45600: LD_INT 4
45602: PUSH
45603: LD_INT 43
45605: PUSH
45606: LD_INT 25
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: IN
45614: IFFALSE 45635
// points := [ 40 , 15 , 5 ] ;
45616: LD_ADDR_VAR 0 9
45620: PUSH
45621: LD_INT 40
45623: PUSH
45624: LD_INT 15
45626: PUSH
45627: LD_INT 5
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: LIST
45634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45635: LD_VAR 0 6
45639: PPUSH
45640: CALL_OW 264
45644: PUSH
45645: LD_INT 3
45647: PUSH
45648: LD_INT 23
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: IN
45655: IFFALSE 45676
// points := [ 7 , 25 , 8 ] ;
45657: LD_ADDR_VAR 0 9
45661: PUSH
45662: LD_INT 7
45664: PUSH
45665: LD_INT 25
45667: PUSH
45668: LD_INT 8
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: LIST
45675: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45676: LD_VAR 0 6
45680: PPUSH
45681: CALL_OW 264
45685: PUSH
45686: LD_INT 5
45688: PUSH
45689: LD_INT 27
45691: PUSH
45692: LD_INT 44
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: LIST
45699: IN
45700: IFFALSE 45721
// points := [ 14 , 50 , 16 ] ;
45702: LD_ADDR_VAR 0 9
45706: PUSH
45707: LD_INT 14
45709: PUSH
45710: LD_INT 50
45712: PUSH
45713: LD_INT 16
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: LIST
45720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45721: LD_VAR 0 6
45725: PPUSH
45726: CALL_OW 264
45730: PUSH
45731: LD_INT 6
45733: PUSH
45734: LD_INT 46
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: IN
45741: IFFALSE 45762
// points := [ 32 , 120 , 70 ] ;
45743: LD_ADDR_VAR 0 9
45747: PUSH
45748: LD_INT 32
45750: PUSH
45751: LD_INT 120
45753: PUSH
45754: LD_INT 70
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: LIST
45761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45762: LD_VAR 0 6
45766: PPUSH
45767: CALL_OW 264
45771: PUSH
45772: LD_INT 7
45774: PUSH
45775: LD_INT 28
45777: PUSH
45778: LD_INT 45
45780: PUSH
45781: LD_EXP 55
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: IN
45792: IFFALSE 45813
// points := [ 35 , 20 , 45 ] ;
45794: LD_ADDR_VAR 0 9
45798: PUSH
45799: LD_INT 35
45801: PUSH
45802: LD_INT 20
45804: PUSH
45805: LD_INT 45
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: LIST
45812: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45813: LD_VAR 0 6
45817: PPUSH
45818: CALL_OW 264
45822: PUSH
45823: LD_INT 47
45825: PUSH
45826: EMPTY
45827: LIST
45828: IN
45829: IFFALSE 45850
// points := [ 67 , 45 , 75 ] ;
45831: LD_ADDR_VAR 0 9
45835: PUSH
45836: LD_INT 67
45838: PUSH
45839: LD_INT 45
45841: PUSH
45842: LD_INT 75
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: LIST
45849: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45850: LD_VAR 0 6
45854: PPUSH
45855: CALL_OW 264
45859: PUSH
45860: LD_INT 26
45862: PUSH
45863: EMPTY
45864: LIST
45865: IN
45866: IFFALSE 45887
// points := [ 120 , 30 , 80 ] ;
45868: LD_ADDR_VAR 0 9
45872: PUSH
45873: LD_INT 120
45875: PUSH
45876: LD_INT 30
45878: PUSH
45879: LD_INT 80
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: LIST
45886: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45887: LD_VAR 0 6
45891: PPUSH
45892: CALL_OW 264
45896: PUSH
45897: LD_INT 22
45899: PUSH
45900: EMPTY
45901: LIST
45902: IN
45903: IFFALSE 45924
// points := [ 40 , 1 , 1 ] ;
45905: LD_ADDR_VAR 0 9
45909: PUSH
45910: LD_INT 40
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: LIST
45923: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45924: LD_VAR 0 6
45928: PPUSH
45929: CALL_OW 264
45933: PUSH
45934: LD_INT 29
45936: PUSH
45937: EMPTY
45938: LIST
45939: IN
45940: IFFALSE 45961
// points := [ 70 , 200 , 400 ] ;
45942: LD_ADDR_VAR 0 9
45946: PUSH
45947: LD_INT 70
45949: PUSH
45950: LD_INT 200
45952: PUSH
45953: LD_INT 400
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: LIST
45960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45961: LD_VAR 0 6
45965: PPUSH
45966: CALL_OW 264
45970: PUSH
45971: LD_INT 14
45973: PUSH
45974: LD_INT 53
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: IN
45981: IFFALSE 46002
// points := [ 40 , 10 , 20 ] ;
45983: LD_ADDR_VAR 0 9
45987: PUSH
45988: LD_INT 40
45990: PUSH
45991: LD_INT 10
45993: PUSH
45994: LD_INT 20
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: LIST
46001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46002: LD_VAR 0 6
46006: PPUSH
46007: CALL_OW 264
46011: PUSH
46012: LD_INT 9
46014: PUSH
46015: EMPTY
46016: LIST
46017: IN
46018: IFFALSE 46039
// points := [ 5 , 70 , 20 ] ;
46020: LD_ADDR_VAR 0 9
46024: PUSH
46025: LD_INT 5
46027: PUSH
46028: LD_INT 70
46030: PUSH
46031: LD_INT 20
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: LIST
46038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46039: LD_VAR 0 6
46043: PPUSH
46044: CALL_OW 264
46048: PUSH
46049: LD_INT 10
46051: PUSH
46052: EMPTY
46053: LIST
46054: IN
46055: IFFALSE 46076
// points := [ 35 , 110 , 70 ] ;
46057: LD_ADDR_VAR 0 9
46061: PUSH
46062: LD_INT 35
46064: PUSH
46065: LD_INT 110
46067: PUSH
46068: LD_INT 70
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: LIST
46075: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46076: LD_VAR 0 6
46080: PPUSH
46081: CALL_OW 265
46085: PUSH
46086: LD_INT 25
46088: EQUAL
46089: IFFALSE 46110
// points := [ 80 , 65 , 100 ] ;
46091: LD_ADDR_VAR 0 9
46095: PUSH
46096: LD_INT 80
46098: PUSH
46099: LD_INT 65
46101: PUSH
46102: LD_INT 100
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: LIST
46109: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46110: LD_VAR 0 6
46114: PPUSH
46115: CALL_OW 263
46119: PUSH
46120: LD_INT 1
46122: EQUAL
46123: IFFALSE 46158
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46125: LD_ADDR_VAR 0 10
46129: PUSH
46130: LD_VAR 0 10
46134: PUSH
46135: LD_VAR 0 6
46139: PPUSH
46140: CALL_OW 311
46144: PPUSH
46145: LD_INT 3
46147: PPUSH
46148: CALL_OW 259
46152: PUSH
46153: LD_INT 4
46155: MUL
46156: MUL
46157: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46158: LD_VAR 0 6
46162: PPUSH
46163: CALL_OW 263
46167: PUSH
46168: LD_INT 2
46170: EQUAL
46171: IFFALSE 46222
// begin j := IsControledBy ( i ) ;
46173: LD_ADDR_VAR 0 7
46177: PUSH
46178: LD_VAR 0 6
46182: PPUSH
46183: CALL_OW 312
46187: ST_TO_ADDR
// if j then
46188: LD_VAR 0 7
46192: IFFALSE 46222
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46194: LD_ADDR_VAR 0 10
46198: PUSH
46199: LD_VAR 0 10
46203: PUSH
46204: LD_VAR 0 7
46208: PPUSH
46209: LD_INT 3
46211: PPUSH
46212: CALL_OW 259
46216: PUSH
46217: LD_INT 3
46219: MUL
46220: MUL
46221: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46222: LD_VAR 0 6
46226: PPUSH
46227: CALL_OW 264
46231: PUSH
46232: LD_INT 5
46234: PUSH
46235: LD_INT 6
46237: PUSH
46238: LD_INT 46
46240: PUSH
46241: LD_INT 44
46243: PUSH
46244: LD_INT 47
46246: PUSH
46247: LD_INT 45
46249: PUSH
46250: LD_INT 28
46252: PUSH
46253: LD_INT 7
46255: PUSH
46256: LD_INT 27
46258: PUSH
46259: LD_INT 29
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: IN
46274: PUSH
46275: LD_VAR 0 1
46279: PPUSH
46280: LD_INT 52
46282: PPUSH
46283: CALL_OW 321
46287: PUSH
46288: LD_INT 2
46290: EQUAL
46291: AND
46292: IFFALSE 46309
// bpoints := bpoints * 1.2 ;
46294: LD_ADDR_VAR 0 10
46298: PUSH
46299: LD_VAR 0 10
46303: PUSH
46304: LD_REAL  1.20000000000000E+0000
46307: MUL
46308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46309: LD_VAR 0 6
46313: PPUSH
46314: CALL_OW 264
46318: PUSH
46319: LD_INT 6
46321: PUSH
46322: LD_INT 46
46324: PUSH
46325: LD_INT 47
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: LIST
46332: IN
46333: IFFALSE 46350
// bpoints := bpoints * 1.2 ;
46335: LD_ADDR_VAR 0 10
46339: PUSH
46340: LD_VAR 0 10
46344: PUSH
46345: LD_REAL  1.20000000000000E+0000
46348: MUL
46349: ST_TO_ADDR
// end ; unit_building :
46350: GO 46364
46352: LD_INT 3
46354: DOUBLE
46355: EQUAL
46356: IFTRUE 46360
46358: GO 46363
46360: POP
// ; end ;
46361: GO 46364
46363: POP
// for j = 1 to 3 do
46364: LD_ADDR_VAR 0 7
46368: PUSH
46369: DOUBLE
46370: LD_INT 1
46372: DEC
46373: ST_TO_ADDR
46374: LD_INT 3
46376: PUSH
46377: FOR_TO
46378: IFFALSE 46431
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46380: LD_ADDR_VAR 0 5
46384: PUSH
46385: LD_VAR 0 5
46389: PPUSH
46390: LD_VAR 0 7
46394: PPUSH
46395: LD_VAR 0 5
46399: PUSH
46400: LD_VAR 0 7
46404: ARRAY
46405: PUSH
46406: LD_VAR 0 9
46410: PUSH
46411: LD_VAR 0 7
46415: ARRAY
46416: PUSH
46417: LD_VAR 0 10
46421: MUL
46422: PLUS
46423: PPUSH
46424: CALL_OW 1
46428: ST_TO_ADDR
46429: GO 46377
46431: POP
46432: POP
// end ;
46433: GO 44910
46435: POP
46436: POP
// result := Replace ( result , 4 , tmp ) ;
46437: LD_ADDR_VAR 0 5
46441: PUSH
46442: LD_VAR 0 5
46446: PPUSH
46447: LD_INT 4
46449: PPUSH
46450: LD_VAR 0 8
46454: PPUSH
46455: CALL_OW 1
46459: ST_TO_ADDR
// end ;
46460: LD_VAR 0 5
46464: RET
// export function DangerAtRange ( unit , range ) ; begin
46465: LD_INT 0
46467: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46468: LD_ADDR_VAR 0 3
46472: PUSH
46473: LD_VAR 0 1
46477: PPUSH
46478: CALL_OW 255
46482: PPUSH
46483: LD_VAR 0 1
46487: PPUSH
46488: CALL_OW 250
46492: PPUSH
46493: LD_VAR 0 1
46497: PPUSH
46498: CALL_OW 251
46502: PPUSH
46503: LD_VAR 0 2
46507: PPUSH
46508: CALL 44762 0 4
46512: ST_TO_ADDR
// end ;
46513: LD_VAR 0 3
46517: RET
// export function DangerInArea ( side , area ) ; begin
46518: LD_INT 0
46520: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46521: LD_ADDR_VAR 0 3
46525: PUSH
46526: LD_VAR 0 2
46530: PPUSH
46531: LD_INT 81
46533: PUSH
46534: LD_VAR 0 1
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PPUSH
46543: CALL_OW 70
46547: ST_TO_ADDR
// end ;
46548: LD_VAR 0 3
46552: RET
// export function IsExtension ( b ) ; begin
46553: LD_INT 0
46555: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46556: LD_ADDR_VAR 0 2
46560: PUSH
46561: LD_VAR 0 1
46565: PUSH
46566: LD_INT 23
46568: PUSH
46569: LD_INT 20
46571: PUSH
46572: LD_INT 22
46574: PUSH
46575: LD_INT 17
46577: PUSH
46578: LD_INT 24
46580: PUSH
46581: LD_INT 21
46583: PUSH
46584: LD_INT 19
46586: PUSH
46587: LD_INT 16
46589: PUSH
46590: LD_INT 25
46592: PUSH
46593: LD_INT 18
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: IN
46608: ST_TO_ADDR
// end ;
46609: LD_VAR 0 2
46613: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46614: LD_INT 0
46616: PPUSH
46617: PPUSH
46618: PPUSH
// result := [ ] ;
46619: LD_ADDR_VAR 0 4
46623: PUSH
46624: EMPTY
46625: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46626: LD_ADDR_VAR 0 5
46630: PUSH
46631: LD_VAR 0 2
46635: PPUSH
46636: LD_INT 21
46638: PUSH
46639: LD_INT 3
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PPUSH
46646: CALL_OW 70
46650: ST_TO_ADDR
// if not tmp then
46651: LD_VAR 0 5
46655: NOT
46656: IFFALSE 46660
// exit ;
46658: GO 46724
// if checkLink then
46660: LD_VAR 0 3
46664: IFFALSE 46714
// begin for i in tmp do
46666: LD_ADDR_VAR 0 6
46670: PUSH
46671: LD_VAR 0 5
46675: PUSH
46676: FOR_IN
46677: IFFALSE 46712
// if GetBase ( i ) <> base then
46679: LD_VAR 0 6
46683: PPUSH
46684: CALL_OW 274
46688: PUSH
46689: LD_VAR 0 1
46693: NONEQUAL
46694: IFFALSE 46710
// ComLinkToBase ( base , i ) ;
46696: LD_VAR 0 1
46700: PPUSH
46701: LD_VAR 0 6
46705: PPUSH
46706: CALL_OW 169
46710: GO 46676
46712: POP
46713: POP
// end ; result := tmp ;
46714: LD_ADDR_VAR 0 4
46718: PUSH
46719: LD_VAR 0 5
46723: ST_TO_ADDR
// end ;
46724: LD_VAR 0 4
46728: RET
// export function ComComplete ( units , b ) ; var i ; begin
46729: LD_INT 0
46731: PPUSH
46732: PPUSH
// if not units then
46733: LD_VAR 0 1
46737: NOT
46738: IFFALSE 46742
// exit ;
46740: GO 46832
// for i in units do
46742: LD_ADDR_VAR 0 4
46746: PUSH
46747: LD_VAR 0 1
46751: PUSH
46752: FOR_IN
46753: IFFALSE 46830
// if BuildingStatus ( b ) = bs_build then
46755: LD_VAR 0 2
46759: PPUSH
46760: CALL_OW 461
46764: PUSH
46765: LD_INT 1
46767: EQUAL
46768: IFFALSE 46828
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46770: LD_VAR 0 4
46774: PPUSH
46775: LD_STRING h
46777: PUSH
46778: LD_VAR 0 2
46782: PPUSH
46783: CALL_OW 250
46787: PUSH
46788: LD_VAR 0 2
46792: PPUSH
46793: CALL_OW 251
46797: PUSH
46798: LD_VAR 0 2
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: PUSH
46821: EMPTY
46822: LIST
46823: PPUSH
46824: CALL_OW 446
46828: GO 46752
46830: POP
46831: POP
// end ;
46832: LD_VAR 0 3
46836: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46837: LD_INT 0
46839: PPUSH
46840: PPUSH
46841: PPUSH
46842: PPUSH
46843: PPUSH
46844: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46845: LD_VAR 0 1
46849: NOT
46850: PUSH
46851: LD_VAR 0 1
46855: PPUSH
46856: CALL_OW 263
46860: PUSH
46861: LD_INT 2
46863: NONEQUAL
46864: OR
46865: IFFALSE 46869
// exit ;
46867: GO 47185
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46869: LD_ADDR_VAR 0 6
46873: PUSH
46874: LD_INT 22
46876: PUSH
46877: LD_VAR 0 1
46881: PPUSH
46882: CALL_OW 255
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: LD_INT 30
46896: PUSH
46897: LD_INT 36
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 34
46906: PUSH
46907: LD_INT 31
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: LIST
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PPUSH
46923: CALL_OW 69
46927: ST_TO_ADDR
// if not tmp then
46928: LD_VAR 0 6
46932: NOT
46933: IFFALSE 46937
// exit ;
46935: GO 47185
// result := [ ] ;
46937: LD_ADDR_VAR 0 2
46941: PUSH
46942: EMPTY
46943: ST_TO_ADDR
// for i in tmp do
46944: LD_ADDR_VAR 0 3
46948: PUSH
46949: LD_VAR 0 6
46953: PUSH
46954: FOR_IN
46955: IFFALSE 47026
// begin t := UnitsInside ( i ) ;
46957: LD_ADDR_VAR 0 4
46961: PUSH
46962: LD_VAR 0 3
46966: PPUSH
46967: CALL_OW 313
46971: ST_TO_ADDR
// if t then
46972: LD_VAR 0 4
46976: IFFALSE 47024
// for j in t do
46978: LD_ADDR_VAR 0 7
46982: PUSH
46983: LD_VAR 0 4
46987: PUSH
46988: FOR_IN
46989: IFFALSE 47022
// result := Replace ( result , result + 1 , j ) ;
46991: LD_ADDR_VAR 0 2
46995: PUSH
46996: LD_VAR 0 2
47000: PPUSH
47001: LD_VAR 0 2
47005: PUSH
47006: LD_INT 1
47008: PLUS
47009: PPUSH
47010: LD_VAR 0 7
47014: PPUSH
47015: CALL_OW 1
47019: ST_TO_ADDR
47020: GO 46988
47022: POP
47023: POP
// end ;
47024: GO 46954
47026: POP
47027: POP
// if not result then
47028: LD_VAR 0 2
47032: NOT
47033: IFFALSE 47037
// exit ;
47035: GO 47185
// mech := result [ 1 ] ;
47037: LD_ADDR_VAR 0 5
47041: PUSH
47042: LD_VAR 0 2
47046: PUSH
47047: LD_INT 1
47049: ARRAY
47050: ST_TO_ADDR
// if result > 1 then
47051: LD_VAR 0 2
47055: PUSH
47056: LD_INT 1
47058: GREATER
47059: IFFALSE 47171
// begin for i = 2 to result do
47061: LD_ADDR_VAR 0 3
47065: PUSH
47066: DOUBLE
47067: LD_INT 2
47069: DEC
47070: ST_TO_ADDR
47071: LD_VAR 0 2
47075: PUSH
47076: FOR_TO
47077: IFFALSE 47169
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47079: LD_ADDR_VAR 0 4
47083: PUSH
47084: LD_VAR 0 2
47088: PUSH
47089: LD_VAR 0 3
47093: ARRAY
47094: PPUSH
47095: LD_INT 3
47097: PPUSH
47098: CALL_OW 259
47102: PUSH
47103: LD_VAR 0 2
47107: PUSH
47108: LD_VAR 0 3
47112: ARRAY
47113: PPUSH
47114: CALL_OW 432
47118: MINUS
47119: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47120: LD_VAR 0 4
47124: PUSH
47125: LD_VAR 0 5
47129: PPUSH
47130: LD_INT 3
47132: PPUSH
47133: CALL_OW 259
47137: PUSH
47138: LD_VAR 0 5
47142: PPUSH
47143: CALL_OW 432
47147: MINUS
47148: GREATEREQUAL
47149: IFFALSE 47167
// mech := result [ i ] ;
47151: LD_ADDR_VAR 0 5
47155: PUSH
47156: LD_VAR 0 2
47160: PUSH
47161: LD_VAR 0 3
47165: ARRAY
47166: ST_TO_ADDR
// end ;
47167: GO 47076
47169: POP
47170: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47171: LD_VAR 0 1
47175: PPUSH
47176: LD_VAR 0 5
47180: PPUSH
47181: CALL_OW 135
// end ;
47185: LD_VAR 0 2
47189: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47190: LD_INT 0
47192: PPUSH
47193: PPUSH
47194: PPUSH
47195: PPUSH
47196: PPUSH
47197: PPUSH
47198: PPUSH
47199: PPUSH
47200: PPUSH
47201: PPUSH
47202: PPUSH
47203: PPUSH
47204: PPUSH
// result := [ ] ;
47205: LD_ADDR_VAR 0 7
47209: PUSH
47210: EMPTY
47211: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47212: LD_VAR 0 1
47216: PPUSH
47217: CALL_OW 266
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: IN
47232: NOT
47233: IFFALSE 47237
// exit ;
47235: GO 48871
// if name then
47237: LD_VAR 0 3
47241: IFFALSE 47257
// SetBName ( base_dep , name ) ;
47243: LD_VAR 0 1
47247: PPUSH
47248: LD_VAR 0 3
47252: PPUSH
47253: CALL_OW 500
// base := GetBase ( base_dep ) ;
47257: LD_ADDR_VAR 0 15
47261: PUSH
47262: LD_VAR 0 1
47266: PPUSH
47267: CALL_OW 274
47271: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47272: LD_ADDR_VAR 0 16
47276: PUSH
47277: LD_VAR 0 1
47281: PPUSH
47282: CALL_OW 255
47286: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47287: LD_ADDR_VAR 0 17
47291: PUSH
47292: LD_VAR 0 1
47296: PPUSH
47297: CALL_OW 248
47301: ST_TO_ADDR
// if sources then
47302: LD_VAR 0 5
47306: IFFALSE 47353
// for i = 1 to 3 do
47308: LD_ADDR_VAR 0 8
47312: PUSH
47313: DOUBLE
47314: LD_INT 1
47316: DEC
47317: ST_TO_ADDR
47318: LD_INT 3
47320: PUSH
47321: FOR_TO
47322: IFFALSE 47351
// AddResourceType ( base , i , sources [ i ] ) ;
47324: LD_VAR 0 15
47328: PPUSH
47329: LD_VAR 0 8
47333: PPUSH
47334: LD_VAR 0 5
47338: PUSH
47339: LD_VAR 0 8
47343: ARRAY
47344: PPUSH
47345: CALL_OW 276
47349: GO 47321
47351: POP
47352: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47353: LD_ADDR_VAR 0 18
47357: PUSH
47358: LD_VAR 0 15
47362: PPUSH
47363: LD_VAR 0 2
47367: PPUSH
47368: LD_INT 1
47370: PPUSH
47371: CALL 46614 0 3
47375: ST_TO_ADDR
// InitHc ;
47376: CALL_OW 19
// InitUc ;
47380: CALL_OW 18
// uc_side := side ;
47384: LD_ADDR_OWVAR 20
47388: PUSH
47389: LD_VAR 0 16
47393: ST_TO_ADDR
// uc_nation := nation ;
47394: LD_ADDR_OWVAR 21
47398: PUSH
47399: LD_VAR 0 17
47403: ST_TO_ADDR
// if buildings then
47404: LD_VAR 0 18
47408: IFFALSE 48730
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47410: LD_ADDR_VAR 0 19
47414: PUSH
47415: LD_VAR 0 18
47419: PPUSH
47420: LD_INT 2
47422: PUSH
47423: LD_INT 30
47425: PUSH
47426: LD_INT 29
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 30
47435: PUSH
47436: LD_INT 30
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: LIST
47447: PPUSH
47448: CALL_OW 72
47452: ST_TO_ADDR
// if tmp then
47453: LD_VAR 0 19
47457: IFFALSE 47505
// for i in tmp do
47459: LD_ADDR_VAR 0 8
47463: PUSH
47464: LD_VAR 0 19
47468: PUSH
47469: FOR_IN
47470: IFFALSE 47503
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47472: LD_VAR 0 8
47476: PPUSH
47477: CALL_OW 250
47481: PPUSH
47482: LD_VAR 0 8
47486: PPUSH
47487: CALL_OW 251
47491: PPUSH
47492: LD_VAR 0 16
47496: PPUSH
47497: CALL_OW 441
47501: GO 47469
47503: POP
47504: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47505: LD_VAR 0 18
47509: PPUSH
47510: LD_INT 2
47512: PUSH
47513: LD_INT 30
47515: PUSH
47516: LD_INT 32
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 30
47525: PUSH
47526: LD_INT 33
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: LIST
47537: PPUSH
47538: CALL_OW 72
47542: IFFALSE 47630
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47544: LD_ADDR_VAR 0 8
47548: PUSH
47549: LD_VAR 0 18
47553: PPUSH
47554: LD_INT 2
47556: PUSH
47557: LD_INT 30
47559: PUSH
47560: LD_INT 32
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 30
47569: PUSH
47570: LD_INT 33
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: LIST
47581: PPUSH
47582: CALL_OW 72
47586: PUSH
47587: FOR_IN
47588: IFFALSE 47628
// begin if not GetBWeapon ( i ) then
47590: LD_VAR 0 8
47594: PPUSH
47595: CALL_OW 269
47599: NOT
47600: IFFALSE 47626
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47602: LD_VAR 0 8
47606: PPUSH
47607: LD_VAR 0 8
47611: PPUSH
47612: LD_VAR 0 2
47616: PPUSH
47617: CALL 48876 0 2
47621: PPUSH
47622: CALL_OW 431
// end ;
47626: GO 47587
47628: POP
47629: POP
// end ; for i = 1 to personel do
47630: LD_ADDR_VAR 0 8
47634: PUSH
47635: DOUBLE
47636: LD_INT 1
47638: DEC
47639: ST_TO_ADDR
47640: LD_VAR 0 6
47644: PUSH
47645: FOR_TO
47646: IFFALSE 48710
// begin if i > 4 then
47648: LD_VAR 0 8
47652: PUSH
47653: LD_INT 4
47655: GREATER
47656: IFFALSE 47660
// break ;
47658: GO 48710
// case i of 1 :
47660: LD_VAR 0 8
47664: PUSH
47665: LD_INT 1
47667: DOUBLE
47668: EQUAL
47669: IFTRUE 47673
47671: GO 47753
47673: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47674: LD_ADDR_VAR 0 12
47678: PUSH
47679: LD_VAR 0 18
47683: PPUSH
47684: LD_INT 22
47686: PUSH
47687: LD_VAR 0 16
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 58
47698: PUSH
47699: EMPTY
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: LD_INT 30
47707: PUSH
47708: LD_INT 32
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 30
47717: PUSH
47718: LD_INT 4
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 30
47727: PUSH
47728: LD_INT 5
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: PPUSH
47746: CALL_OW 72
47750: ST_TO_ADDR
47751: GO 47975
47753: LD_INT 2
47755: DOUBLE
47756: EQUAL
47757: IFTRUE 47761
47759: GO 47823
47761: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47762: LD_ADDR_VAR 0 12
47766: PUSH
47767: LD_VAR 0 18
47771: PPUSH
47772: LD_INT 22
47774: PUSH
47775: LD_VAR 0 16
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 2
47786: PUSH
47787: LD_INT 30
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 30
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: LIST
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PPUSH
47816: CALL_OW 72
47820: ST_TO_ADDR
47821: GO 47975
47823: LD_INT 3
47825: DOUBLE
47826: EQUAL
47827: IFTRUE 47831
47829: GO 47893
47831: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47832: LD_ADDR_VAR 0 12
47836: PUSH
47837: LD_VAR 0 18
47841: PPUSH
47842: LD_INT 22
47844: PUSH
47845: LD_VAR 0 16
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: LD_INT 30
47859: PUSH
47860: LD_INT 2
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 30
47869: PUSH
47870: LD_INT 3
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: LIST
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PPUSH
47886: CALL_OW 72
47890: ST_TO_ADDR
47891: GO 47975
47893: LD_INT 4
47895: DOUBLE
47896: EQUAL
47897: IFTRUE 47901
47899: GO 47974
47901: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47902: LD_ADDR_VAR 0 12
47906: PUSH
47907: LD_VAR 0 18
47911: PPUSH
47912: LD_INT 22
47914: PUSH
47915: LD_VAR 0 16
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 2
47926: PUSH
47927: LD_INT 30
47929: PUSH
47930: LD_INT 6
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 30
47939: PUSH
47940: LD_INT 7
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 30
47949: PUSH
47950: LD_INT 8
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PPUSH
47967: CALL_OW 72
47971: ST_TO_ADDR
47972: GO 47975
47974: POP
// if i = 1 then
47975: LD_VAR 0 8
47979: PUSH
47980: LD_INT 1
47982: EQUAL
47983: IFFALSE 48094
// begin tmp := [ ] ;
47985: LD_ADDR_VAR 0 19
47989: PUSH
47990: EMPTY
47991: ST_TO_ADDR
// for j in f do
47992: LD_ADDR_VAR 0 9
47996: PUSH
47997: LD_VAR 0 12
48001: PUSH
48002: FOR_IN
48003: IFFALSE 48076
// if GetBType ( j ) = b_bunker then
48005: LD_VAR 0 9
48009: PPUSH
48010: CALL_OW 266
48014: PUSH
48015: LD_INT 32
48017: EQUAL
48018: IFFALSE 48045
// tmp := Insert ( tmp , 1 , j ) else
48020: LD_ADDR_VAR 0 19
48024: PUSH
48025: LD_VAR 0 19
48029: PPUSH
48030: LD_INT 1
48032: PPUSH
48033: LD_VAR 0 9
48037: PPUSH
48038: CALL_OW 2
48042: ST_TO_ADDR
48043: GO 48074
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48045: LD_ADDR_VAR 0 19
48049: PUSH
48050: LD_VAR 0 19
48054: PPUSH
48055: LD_VAR 0 19
48059: PUSH
48060: LD_INT 1
48062: PLUS
48063: PPUSH
48064: LD_VAR 0 9
48068: PPUSH
48069: CALL_OW 2
48073: ST_TO_ADDR
48074: GO 48002
48076: POP
48077: POP
// if tmp then
48078: LD_VAR 0 19
48082: IFFALSE 48094
// f := tmp ;
48084: LD_ADDR_VAR 0 12
48088: PUSH
48089: LD_VAR 0 19
48093: ST_TO_ADDR
// end ; x := personel [ i ] ;
48094: LD_ADDR_VAR 0 13
48098: PUSH
48099: LD_VAR 0 6
48103: PUSH
48104: LD_VAR 0 8
48108: ARRAY
48109: ST_TO_ADDR
// if x = - 1 then
48110: LD_VAR 0 13
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: EQUAL
48119: IFFALSE 48328
// begin for j in f do
48121: LD_ADDR_VAR 0 9
48125: PUSH
48126: LD_VAR 0 12
48130: PUSH
48131: FOR_IN
48132: IFFALSE 48324
// repeat InitHc ;
48134: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48138: LD_VAR 0 9
48142: PPUSH
48143: CALL_OW 266
48147: PUSH
48148: LD_INT 5
48150: EQUAL
48151: IFFALSE 48221
// begin if UnitsInside ( j ) < 3 then
48153: LD_VAR 0 9
48157: PPUSH
48158: CALL_OW 313
48162: PUSH
48163: LD_INT 3
48165: LESS
48166: IFFALSE 48202
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48168: LD_INT 0
48170: PPUSH
48171: LD_INT 5
48173: PUSH
48174: LD_INT 8
48176: PUSH
48177: LD_INT 9
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: LIST
48184: PUSH
48185: LD_VAR 0 17
48189: ARRAY
48190: PPUSH
48191: LD_VAR 0 4
48195: PPUSH
48196: CALL_OW 380
48200: GO 48219
// PrepareHuman ( false , i , skill ) ;
48202: LD_INT 0
48204: PPUSH
48205: LD_VAR 0 8
48209: PPUSH
48210: LD_VAR 0 4
48214: PPUSH
48215: CALL_OW 380
// end else
48219: GO 48238
// PrepareHuman ( false , i , skill ) ;
48221: LD_INT 0
48223: PPUSH
48224: LD_VAR 0 8
48228: PPUSH
48229: LD_VAR 0 4
48233: PPUSH
48234: CALL_OW 380
// un := CreateHuman ;
48238: LD_ADDR_VAR 0 14
48242: PUSH
48243: CALL_OW 44
48247: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48248: LD_ADDR_VAR 0 7
48252: PUSH
48253: LD_VAR 0 7
48257: PPUSH
48258: LD_INT 1
48260: PPUSH
48261: LD_VAR 0 14
48265: PPUSH
48266: CALL_OW 2
48270: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48271: LD_VAR 0 14
48275: PPUSH
48276: LD_VAR 0 9
48280: PPUSH
48281: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48285: LD_VAR 0 9
48289: PPUSH
48290: CALL_OW 313
48294: PUSH
48295: LD_INT 6
48297: EQUAL
48298: PUSH
48299: LD_VAR 0 9
48303: PPUSH
48304: CALL_OW 266
48308: PUSH
48309: LD_INT 32
48311: PUSH
48312: LD_INT 31
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: IN
48319: OR
48320: IFFALSE 48134
48322: GO 48131
48324: POP
48325: POP
// end else
48326: GO 48708
// for j = 1 to x do
48328: LD_ADDR_VAR 0 9
48332: PUSH
48333: DOUBLE
48334: LD_INT 1
48336: DEC
48337: ST_TO_ADDR
48338: LD_VAR 0 13
48342: PUSH
48343: FOR_TO
48344: IFFALSE 48706
// begin InitHc ;
48346: CALL_OW 19
// if not f then
48350: LD_VAR 0 12
48354: NOT
48355: IFFALSE 48444
// begin PrepareHuman ( false , i , skill ) ;
48357: LD_INT 0
48359: PPUSH
48360: LD_VAR 0 8
48364: PPUSH
48365: LD_VAR 0 4
48369: PPUSH
48370: CALL_OW 380
// un := CreateHuman ;
48374: LD_ADDR_VAR 0 14
48378: PUSH
48379: CALL_OW 44
48383: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48384: LD_ADDR_VAR 0 7
48388: PUSH
48389: LD_VAR 0 7
48393: PPUSH
48394: LD_INT 1
48396: PPUSH
48397: LD_VAR 0 14
48401: PPUSH
48402: CALL_OW 2
48406: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48407: LD_VAR 0 14
48411: PPUSH
48412: LD_VAR 0 1
48416: PPUSH
48417: CALL_OW 250
48421: PPUSH
48422: LD_VAR 0 1
48426: PPUSH
48427: CALL_OW 251
48431: PPUSH
48432: LD_INT 10
48434: PPUSH
48435: LD_INT 0
48437: PPUSH
48438: CALL_OW 50
// continue ;
48442: GO 48343
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48444: LD_VAR 0 12
48448: PUSH
48449: LD_INT 1
48451: ARRAY
48452: PPUSH
48453: CALL_OW 313
48457: PUSH
48458: LD_VAR 0 12
48462: PUSH
48463: LD_INT 1
48465: ARRAY
48466: PPUSH
48467: CALL_OW 266
48471: PUSH
48472: LD_INT 32
48474: PUSH
48475: LD_INT 31
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: IN
48482: AND
48483: PUSH
48484: LD_VAR 0 12
48488: PUSH
48489: LD_INT 1
48491: ARRAY
48492: PPUSH
48493: CALL_OW 313
48497: PUSH
48498: LD_INT 6
48500: EQUAL
48501: OR
48502: IFFALSE 48522
// f := Delete ( f , 1 ) ;
48504: LD_ADDR_VAR 0 12
48508: PUSH
48509: LD_VAR 0 12
48513: PPUSH
48514: LD_INT 1
48516: PPUSH
48517: CALL_OW 3
48521: ST_TO_ADDR
// if not f then
48522: LD_VAR 0 12
48526: NOT
48527: IFFALSE 48545
// begin x := x + 2 ;
48529: LD_ADDR_VAR 0 13
48533: PUSH
48534: LD_VAR 0 13
48538: PUSH
48539: LD_INT 2
48541: PLUS
48542: ST_TO_ADDR
// continue ;
48543: GO 48343
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48545: LD_VAR 0 12
48549: PUSH
48550: LD_INT 1
48552: ARRAY
48553: PPUSH
48554: CALL_OW 266
48558: PUSH
48559: LD_INT 5
48561: EQUAL
48562: IFFALSE 48636
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48564: LD_VAR 0 12
48568: PUSH
48569: LD_INT 1
48571: ARRAY
48572: PPUSH
48573: CALL_OW 313
48577: PUSH
48578: LD_INT 3
48580: LESS
48581: IFFALSE 48617
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48583: LD_INT 0
48585: PPUSH
48586: LD_INT 5
48588: PUSH
48589: LD_INT 8
48591: PUSH
48592: LD_INT 9
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: LIST
48599: PUSH
48600: LD_VAR 0 17
48604: ARRAY
48605: PPUSH
48606: LD_VAR 0 4
48610: PPUSH
48611: CALL_OW 380
48615: GO 48634
// PrepareHuman ( false , i , skill ) ;
48617: LD_INT 0
48619: PPUSH
48620: LD_VAR 0 8
48624: PPUSH
48625: LD_VAR 0 4
48629: PPUSH
48630: CALL_OW 380
// end else
48634: GO 48653
// PrepareHuman ( false , i , skill ) ;
48636: LD_INT 0
48638: PPUSH
48639: LD_VAR 0 8
48643: PPUSH
48644: LD_VAR 0 4
48648: PPUSH
48649: CALL_OW 380
// un := CreateHuman ;
48653: LD_ADDR_VAR 0 14
48657: PUSH
48658: CALL_OW 44
48662: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48663: LD_ADDR_VAR 0 7
48667: PUSH
48668: LD_VAR 0 7
48672: PPUSH
48673: LD_INT 1
48675: PPUSH
48676: LD_VAR 0 14
48680: PPUSH
48681: CALL_OW 2
48685: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48686: LD_VAR 0 14
48690: PPUSH
48691: LD_VAR 0 12
48695: PUSH
48696: LD_INT 1
48698: ARRAY
48699: PPUSH
48700: CALL_OW 52
// end ;
48704: GO 48343
48706: POP
48707: POP
// end ;
48708: GO 47645
48710: POP
48711: POP
// result := result ^ buildings ;
48712: LD_ADDR_VAR 0 7
48716: PUSH
48717: LD_VAR 0 7
48721: PUSH
48722: LD_VAR 0 18
48726: ADD
48727: ST_TO_ADDR
// end else
48728: GO 48871
// begin for i = 1 to personel do
48730: LD_ADDR_VAR 0 8
48734: PUSH
48735: DOUBLE
48736: LD_INT 1
48738: DEC
48739: ST_TO_ADDR
48740: LD_VAR 0 6
48744: PUSH
48745: FOR_TO
48746: IFFALSE 48869
// begin if i > 4 then
48748: LD_VAR 0 8
48752: PUSH
48753: LD_INT 4
48755: GREATER
48756: IFFALSE 48760
// break ;
48758: GO 48869
// x := personel [ i ] ;
48760: LD_ADDR_VAR 0 13
48764: PUSH
48765: LD_VAR 0 6
48769: PUSH
48770: LD_VAR 0 8
48774: ARRAY
48775: ST_TO_ADDR
// if x = - 1 then
48776: LD_VAR 0 13
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: EQUAL
48785: IFFALSE 48789
// continue ;
48787: GO 48745
// PrepareHuman ( false , i , skill ) ;
48789: LD_INT 0
48791: PPUSH
48792: LD_VAR 0 8
48796: PPUSH
48797: LD_VAR 0 4
48801: PPUSH
48802: CALL_OW 380
// un := CreateHuman ;
48806: LD_ADDR_VAR 0 14
48810: PUSH
48811: CALL_OW 44
48815: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48816: LD_VAR 0 14
48820: PPUSH
48821: LD_VAR 0 1
48825: PPUSH
48826: CALL_OW 250
48830: PPUSH
48831: LD_VAR 0 1
48835: PPUSH
48836: CALL_OW 251
48840: PPUSH
48841: LD_INT 10
48843: PPUSH
48844: LD_INT 0
48846: PPUSH
48847: CALL_OW 50
// result := result ^ un ;
48851: LD_ADDR_VAR 0 7
48855: PUSH
48856: LD_VAR 0 7
48860: PUSH
48861: LD_VAR 0 14
48865: ADD
48866: ST_TO_ADDR
// end ;
48867: GO 48745
48869: POP
48870: POP
// end ; end ;
48871: LD_VAR 0 7
48875: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48876: LD_INT 0
48878: PPUSH
48879: PPUSH
48880: PPUSH
48881: PPUSH
48882: PPUSH
48883: PPUSH
48884: PPUSH
48885: PPUSH
48886: PPUSH
48887: PPUSH
48888: PPUSH
48889: PPUSH
48890: PPUSH
48891: PPUSH
48892: PPUSH
48893: PPUSH
// result := false ;
48894: LD_ADDR_VAR 0 3
48898: PUSH
48899: LD_INT 0
48901: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48902: LD_VAR 0 1
48906: NOT
48907: PUSH
48908: LD_VAR 0 1
48912: PPUSH
48913: CALL_OW 266
48917: PUSH
48918: LD_INT 32
48920: PUSH
48921: LD_INT 33
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: IN
48928: NOT
48929: OR
48930: IFFALSE 48934
// exit ;
48932: GO 50043
// nat := GetNation ( tower ) ;
48934: LD_ADDR_VAR 0 12
48938: PUSH
48939: LD_VAR 0 1
48943: PPUSH
48944: CALL_OW 248
48948: ST_TO_ADDR
// side := GetSide ( tower ) ;
48949: LD_ADDR_VAR 0 16
48953: PUSH
48954: LD_VAR 0 1
48958: PPUSH
48959: CALL_OW 255
48963: ST_TO_ADDR
// x := GetX ( tower ) ;
48964: LD_ADDR_VAR 0 10
48968: PUSH
48969: LD_VAR 0 1
48973: PPUSH
48974: CALL_OW 250
48978: ST_TO_ADDR
// y := GetY ( tower ) ;
48979: LD_ADDR_VAR 0 11
48983: PUSH
48984: LD_VAR 0 1
48988: PPUSH
48989: CALL_OW 251
48993: ST_TO_ADDR
// if not x or not y then
48994: LD_VAR 0 10
48998: NOT
48999: PUSH
49000: LD_VAR 0 11
49004: NOT
49005: OR
49006: IFFALSE 49010
// exit ;
49008: GO 50043
// weapon := 0 ;
49010: LD_ADDR_VAR 0 18
49014: PUSH
49015: LD_INT 0
49017: ST_TO_ADDR
// fac_list := [ ] ;
49018: LD_ADDR_VAR 0 17
49022: PUSH
49023: EMPTY
49024: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49025: LD_ADDR_VAR 0 6
49029: PUSH
49030: LD_VAR 0 1
49034: PPUSH
49035: CALL_OW 274
49039: PPUSH
49040: LD_VAR 0 2
49044: PPUSH
49045: LD_INT 0
49047: PPUSH
49048: CALL 46614 0 3
49052: PPUSH
49053: LD_INT 30
49055: PUSH
49056: LD_INT 3
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PPUSH
49063: CALL_OW 72
49067: ST_TO_ADDR
// if not factories then
49068: LD_VAR 0 6
49072: NOT
49073: IFFALSE 49077
// exit ;
49075: GO 50043
// for i in factories do
49077: LD_ADDR_VAR 0 8
49081: PUSH
49082: LD_VAR 0 6
49086: PUSH
49087: FOR_IN
49088: IFFALSE 49113
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49090: LD_ADDR_VAR 0 17
49094: PUSH
49095: LD_VAR 0 17
49099: PUSH
49100: LD_VAR 0 8
49104: PPUSH
49105: CALL_OW 478
49109: UNION
49110: ST_TO_ADDR
49111: GO 49087
49113: POP
49114: POP
// if not fac_list then
49115: LD_VAR 0 17
49119: NOT
49120: IFFALSE 49124
// exit ;
49122: GO 50043
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49124: LD_ADDR_VAR 0 5
49128: PUSH
49129: LD_INT 4
49131: PUSH
49132: LD_INT 5
49134: PUSH
49135: LD_INT 9
49137: PUSH
49138: LD_INT 10
49140: PUSH
49141: LD_INT 6
49143: PUSH
49144: LD_INT 7
49146: PUSH
49147: LD_INT 11
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 27
49161: PUSH
49162: LD_INT 28
49164: PUSH
49165: LD_INT 26
49167: PUSH
49168: LD_INT 30
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 43
49179: PUSH
49180: LD_INT 44
49182: PUSH
49183: LD_INT 46
49185: PUSH
49186: LD_INT 45
49188: PUSH
49189: LD_INT 47
49191: PUSH
49192: LD_INT 49
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: LIST
49207: PUSH
49208: LD_VAR 0 12
49212: ARRAY
49213: ST_TO_ADDR
// list := list isect fac_list ;
49214: LD_ADDR_VAR 0 5
49218: PUSH
49219: LD_VAR 0 5
49223: PUSH
49224: LD_VAR 0 17
49228: ISECT
49229: ST_TO_ADDR
// if not list then
49230: LD_VAR 0 5
49234: NOT
49235: IFFALSE 49239
// exit ;
49237: GO 50043
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49239: LD_VAR 0 12
49243: PUSH
49244: LD_INT 3
49246: EQUAL
49247: PUSH
49248: LD_INT 49
49250: PUSH
49251: LD_VAR 0 5
49255: IN
49256: AND
49257: PUSH
49258: LD_INT 31
49260: PPUSH
49261: LD_VAR 0 16
49265: PPUSH
49266: CALL_OW 321
49270: PUSH
49271: LD_INT 2
49273: EQUAL
49274: AND
49275: IFFALSE 49335
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49277: LD_INT 22
49279: PUSH
49280: LD_VAR 0 16
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 35
49291: PUSH
49292: LD_INT 49
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 91
49301: PUSH
49302: LD_VAR 0 1
49306: PUSH
49307: LD_INT 10
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: LIST
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: LIST
49319: PPUSH
49320: CALL_OW 69
49324: NOT
49325: IFFALSE 49335
// weapon := ru_time_lapser ;
49327: LD_ADDR_VAR 0 18
49331: PUSH
49332: LD_INT 49
49334: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49335: LD_VAR 0 12
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: IN
49350: PUSH
49351: LD_INT 11
49353: PUSH
49354: LD_VAR 0 5
49358: IN
49359: PUSH
49360: LD_INT 30
49362: PUSH
49363: LD_VAR 0 5
49367: IN
49368: OR
49369: AND
49370: PUSH
49371: LD_INT 6
49373: PPUSH
49374: LD_VAR 0 16
49378: PPUSH
49379: CALL_OW 321
49383: PUSH
49384: LD_INT 2
49386: EQUAL
49387: AND
49388: IFFALSE 49553
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49390: LD_INT 22
49392: PUSH
49393: LD_VAR 0 16
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 2
49404: PUSH
49405: LD_INT 35
49407: PUSH
49408: LD_INT 11
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 35
49417: PUSH
49418: LD_INT 30
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 91
49432: PUSH
49433: LD_VAR 0 1
49437: PUSH
49438: LD_INT 18
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: LIST
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: LIST
49450: PPUSH
49451: CALL_OW 69
49455: NOT
49456: PUSH
49457: LD_INT 22
49459: PUSH
49460: LD_VAR 0 16
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 2
49471: PUSH
49472: LD_INT 30
49474: PUSH
49475: LD_INT 32
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 30
49484: PUSH
49485: LD_INT 33
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 91
49499: PUSH
49500: LD_VAR 0 1
49504: PUSH
49505: LD_INT 12
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: LIST
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: LIST
49517: PUSH
49518: EMPTY
49519: LIST
49520: PPUSH
49521: CALL_OW 69
49525: PUSH
49526: LD_INT 2
49528: GREATER
49529: AND
49530: IFFALSE 49553
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49532: LD_ADDR_VAR 0 18
49536: PUSH
49537: LD_INT 11
49539: PUSH
49540: LD_INT 30
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_VAR 0 12
49551: ARRAY
49552: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49553: LD_VAR 0 18
49557: NOT
49558: PUSH
49559: LD_INT 40
49561: PPUSH
49562: LD_VAR 0 16
49566: PPUSH
49567: CALL_OW 321
49571: PUSH
49572: LD_INT 2
49574: EQUAL
49575: AND
49576: PUSH
49577: LD_INT 7
49579: PUSH
49580: LD_VAR 0 5
49584: IN
49585: PUSH
49586: LD_INT 28
49588: PUSH
49589: LD_VAR 0 5
49593: IN
49594: OR
49595: PUSH
49596: LD_INT 45
49598: PUSH
49599: LD_VAR 0 5
49603: IN
49604: OR
49605: AND
49606: IFFALSE 49860
// begin hex := GetHexInfo ( x , y ) ;
49608: LD_ADDR_VAR 0 4
49612: PUSH
49613: LD_VAR 0 10
49617: PPUSH
49618: LD_VAR 0 11
49622: PPUSH
49623: CALL_OW 546
49627: ST_TO_ADDR
// if hex [ 1 ] then
49628: LD_VAR 0 4
49632: PUSH
49633: LD_INT 1
49635: ARRAY
49636: IFFALSE 49640
// exit ;
49638: GO 50043
// height := hex [ 2 ] ;
49640: LD_ADDR_VAR 0 15
49644: PUSH
49645: LD_VAR 0 4
49649: PUSH
49650: LD_INT 2
49652: ARRAY
49653: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49654: LD_ADDR_VAR 0 14
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: LD_INT 3
49667: PUSH
49668: LD_INT 5
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: ST_TO_ADDR
// for i in tmp do
49677: LD_ADDR_VAR 0 8
49681: PUSH
49682: LD_VAR 0 14
49686: PUSH
49687: FOR_IN
49688: IFFALSE 49858
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49690: LD_ADDR_VAR 0 9
49694: PUSH
49695: LD_VAR 0 10
49699: PPUSH
49700: LD_VAR 0 8
49704: PPUSH
49705: LD_INT 5
49707: PPUSH
49708: CALL_OW 272
49712: PUSH
49713: LD_VAR 0 11
49717: PPUSH
49718: LD_VAR 0 8
49722: PPUSH
49723: LD_INT 5
49725: PPUSH
49726: CALL_OW 273
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49735: LD_VAR 0 9
49739: PUSH
49740: LD_INT 1
49742: ARRAY
49743: PPUSH
49744: LD_VAR 0 9
49748: PUSH
49749: LD_INT 2
49751: ARRAY
49752: PPUSH
49753: CALL_OW 488
49757: IFFALSE 49856
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49759: LD_ADDR_VAR 0 4
49763: PUSH
49764: LD_VAR 0 9
49768: PUSH
49769: LD_INT 1
49771: ARRAY
49772: PPUSH
49773: LD_VAR 0 9
49777: PUSH
49778: LD_INT 2
49780: ARRAY
49781: PPUSH
49782: CALL_OW 546
49786: ST_TO_ADDR
// if hex [ 1 ] then
49787: LD_VAR 0 4
49791: PUSH
49792: LD_INT 1
49794: ARRAY
49795: IFFALSE 49799
// continue ;
49797: GO 49687
// h := hex [ 2 ] ;
49799: LD_ADDR_VAR 0 13
49803: PUSH
49804: LD_VAR 0 4
49808: PUSH
49809: LD_INT 2
49811: ARRAY
49812: ST_TO_ADDR
// if h + 7 < height then
49813: LD_VAR 0 13
49817: PUSH
49818: LD_INT 7
49820: PLUS
49821: PUSH
49822: LD_VAR 0 15
49826: LESS
49827: IFFALSE 49856
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49829: LD_ADDR_VAR 0 18
49833: PUSH
49834: LD_INT 7
49836: PUSH
49837: LD_INT 28
49839: PUSH
49840: LD_INT 45
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: LIST
49847: PUSH
49848: LD_VAR 0 12
49852: ARRAY
49853: ST_TO_ADDR
// break ;
49854: GO 49858
// end ; end ; end ;
49856: GO 49687
49858: POP
49859: POP
// end ; if not weapon then
49860: LD_VAR 0 18
49864: NOT
49865: IFFALSE 49925
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49867: LD_ADDR_VAR 0 5
49871: PUSH
49872: LD_VAR 0 5
49876: PUSH
49877: LD_INT 11
49879: PUSH
49880: LD_INT 30
49882: PUSH
49883: LD_INT 49
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: LIST
49890: DIFF
49891: ST_TO_ADDR
// if not list then
49892: LD_VAR 0 5
49896: NOT
49897: IFFALSE 49901
// exit ;
49899: GO 50043
// weapon := list [ rand ( 1 , list ) ] ;
49901: LD_ADDR_VAR 0 18
49905: PUSH
49906: LD_VAR 0 5
49910: PUSH
49911: LD_INT 1
49913: PPUSH
49914: LD_VAR 0 5
49918: PPUSH
49919: CALL_OW 12
49923: ARRAY
49924: ST_TO_ADDR
// end ; if weapon then
49925: LD_VAR 0 18
49929: IFFALSE 50043
// begin tmp := CostOfWeapon ( weapon ) ;
49931: LD_ADDR_VAR 0 14
49935: PUSH
49936: LD_VAR 0 18
49940: PPUSH
49941: CALL_OW 451
49945: ST_TO_ADDR
// j := GetBase ( tower ) ;
49946: LD_ADDR_VAR 0 9
49950: PUSH
49951: LD_VAR 0 1
49955: PPUSH
49956: CALL_OW 274
49960: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49961: LD_VAR 0 9
49965: PPUSH
49966: LD_INT 1
49968: PPUSH
49969: CALL_OW 275
49973: PUSH
49974: LD_VAR 0 14
49978: PUSH
49979: LD_INT 1
49981: ARRAY
49982: GREATEREQUAL
49983: PUSH
49984: LD_VAR 0 9
49988: PPUSH
49989: LD_INT 2
49991: PPUSH
49992: CALL_OW 275
49996: PUSH
49997: LD_VAR 0 14
50001: PUSH
50002: LD_INT 2
50004: ARRAY
50005: GREATEREQUAL
50006: AND
50007: PUSH
50008: LD_VAR 0 9
50012: PPUSH
50013: LD_INT 3
50015: PPUSH
50016: CALL_OW 275
50020: PUSH
50021: LD_VAR 0 14
50025: PUSH
50026: LD_INT 3
50028: ARRAY
50029: GREATEREQUAL
50030: AND
50031: IFFALSE 50043
// result := weapon ;
50033: LD_ADDR_VAR 0 3
50037: PUSH
50038: LD_VAR 0 18
50042: ST_TO_ADDR
// end ; end ;
50043: LD_VAR 0 3
50047: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50048: LD_INT 0
50050: PPUSH
50051: PPUSH
// result := true ;
50052: LD_ADDR_VAR 0 3
50056: PUSH
50057: LD_INT 1
50059: ST_TO_ADDR
// if array1 = array2 then
50060: LD_VAR 0 1
50064: PUSH
50065: LD_VAR 0 2
50069: EQUAL
50070: IFFALSE 50130
// begin for i = 1 to array1 do
50072: LD_ADDR_VAR 0 4
50076: PUSH
50077: DOUBLE
50078: LD_INT 1
50080: DEC
50081: ST_TO_ADDR
50082: LD_VAR 0 1
50086: PUSH
50087: FOR_TO
50088: IFFALSE 50126
// if array1 [ i ] <> array2 [ i ] then
50090: LD_VAR 0 1
50094: PUSH
50095: LD_VAR 0 4
50099: ARRAY
50100: PUSH
50101: LD_VAR 0 2
50105: PUSH
50106: LD_VAR 0 4
50110: ARRAY
50111: NONEQUAL
50112: IFFALSE 50124
// begin result := false ;
50114: LD_ADDR_VAR 0 3
50118: PUSH
50119: LD_INT 0
50121: ST_TO_ADDR
// break ;
50122: GO 50126
// end ;
50124: GO 50087
50126: POP
50127: POP
// end else
50128: GO 50138
// result := false ;
50130: LD_ADDR_VAR 0 3
50134: PUSH
50135: LD_INT 0
50137: ST_TO_ADDR
// end ;
50138: LD_VAR 0 3
50142: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50143: LD_INT 0
50145: PPUSH
50146: PPUSH
// if not array1 or not array2 then
50147: LD_VAR 0 1
50151: NOT
50152: PUSH
50153: LD_VAR 0 2
50157: NOT
50158: OR
50159: IFFALSE 50163
// exit ;
50161: GO 50227
// result := true ;
50163: LD_ADDR_VAR 0 3
50167: PUSH
50168: LD_INT 1
50170: ST_TO_ADDR
// for i = 1 to array1 do
50171: LD_ADDR_VAR 0 4
50175: PUSH
50176: DOUBLE
50177: LD_INT 1
50179: DEC
50180: ST_TO_ADDR
50181: LD_VAR 0 1
50185: PUSH
50186: FOR_TO
50187: IFFALSE 50225
// if array1 [ i ] <> array2 [ i ] then
50189: LD_VAR 0 1
50193: PUSH
50194: LD_VAR 0 4
50198: ARRAY
50199: PUSH
50200: LD_VAR 0 2
50204: PUSH
50205: LD_VAR 0 4
50209: ARRAY
50210: NONEQUAL
50211: IFFALSE 50223
// begin result := false ;
50213: LD_ADDR_VAR 0 3
50217: PUSH
50218: LD_INT 0
50220: ST_TO_ADDR
// break ;
50221: GO 50225
// end ;
50223: GO 50186
50225: POP
50226: POP
// end ;
50227: LD_VAR 0 3
50231: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50232: LD_INT 0
50234: PPUSH
50235: PPUSH
50236: PPUSH
// pom := GetBase ( fac ) ;
50237: LD_ADDR_VAR 0 5
50241: PUSH
50242: LD_VAR 0 1
50246: PPUSH
50247: CALL_OW 274
50251: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50252: LD_ADDR_VAR 0 4
50256: PUSH
50257: LD_VAR 0 2
50261: PUSH
50262: LD_INT 1
50264: ARRAY
50265: PPUSH
50266: LD_VAR 0 2
50270: PUSH
50271: LD_INT 2
50273: ARRAY
50274: PPUSH
50275: LD_VAR 0 2
50279: PUSH
50280: LD_INT 3
50282: ARRAY
50283: PPUSH
50284: LD_VAR 0 2
50288: PUSH
50289: LD_INT 4
50291: ARRAY
50292: PPUSH
50293: CALL_OW 449
50297: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50298: LD_ADDR_VAR 0 3
50302: PUSH
50303: LD_VAR 0 5
50307: PPUSH
50308: LD_INT 1
50310: PPUSH
50311: CALL_OW 275
50315: PUSH
50316: LD_VAR 0 4
50320: PUSH
50321: LD_INT 1
50323: ARRAY
50324: GREATEREQUAL
50325: PUSH
50326: LD_VAR 0 5
50330: PPUSH
50331: LD_INT 2
50333: PPUSH
50334: CALL_OW 275
50338: PUSH
50339: LD_VAR 0 4
50343: PUSH
50344: LD_INT 2
50346: ARRAY
50347: GREATEREQUAL
50348: AND
50349: PUSH
50350: LD_VAR 0 5
50354: PPUSH
50355: LD_INT 3
50357: PPUSH
50358: CALL_OW 275
50362: PUSH
50363: LD_VAR 0 4
50367: PUSH
50368: LD_INT 3
50370: ARRAY
50371: GREATEREQUAL
50372: AND
50373: ST_TO_ADDR
// end ;
50374: LD_VAR 0 3
50378: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50379: LD_INT 0
50381: PPUSH
50382: PPUSH
50383: PPUSH
50384: PPUSH
// pom := GetBase ( building ) ;
50385: LD_ADDR_VAR 0 3
50389: PUSH
50390: LD_VAR 0 1
50394: PPUSH
50395: CALL_OW 274
50399: ST_TO_ADDR
// if not pom then
50400: LD_VAR 0 3
50404: NOT
50405: IFFALSE 50409
// exit ;
50407: GO 50579
// btype := GetBType ( building ) ;
50409: LD_ADDR_VAR 0 5
50413: PUSH
50414: LD_VAR 0 1
50418: PPUSH
50419: CALL_OW 266
50423: ST_TO_ADDR
// if btype = b_armoury then
50424: LD_VAR 0 5
50428: PUSH
50429: LD_INT 4
50431: EQUAL
50432: IFFALSE 50442
// btype := b_barracks ;
50434: LD_ADDR_VAR 0 5
50438: PUSH
50439: LD_INT 5
50441: ST_TO_ADDR
// if btype = b_depot then
50442: LD_VAR 0 5
50446: PUSH
50447: LD_INT 0
50449: EQUAL
50450: IFFALSE 50460
// btype := b_warehouse ;
50452: LD_ADDR_VAR 0 5
50456: PUSH
50457: LD_INT 1
50459: ST_TO_ADDR
// if btype = b_workshop then
50460: LD_VAR 0 5
50464: PUSH
50465: LD_INT 2
50467: EQUAL
50468: IFFALSE 50478
// btype := b_factory ;
50470: LD_ADDR_VAR 0 5
50474: PUSH
50475: LD_INT 3
50477: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50478: LD_ADDR_VAR 0 4
50482: PUSH
50483: LD_VAR 0 5
50487: PPUSH
50488: LD_VAR 0 1
50492: PPUSH
50493: CALL_OW 248
50497: PPUSH
50498: CALL_OW 450
50502: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50503: LD_ADDR_VAR 0 2
50507: PUSH
50508: LD_VAR 0 3
50512: PPUSH
50513: LD_INT 1
50515: PPUSH
50516: CALL_OW 275
50520: PUSH
50521: LD_VAR 0 4
50525: PUSH
50526: LD_INT 1
50528: ARRAY
50529: GREATEREQUAL
50530: PUSH
50531: LD_VAR 0 3
50535: PPUSH
50536: LD_INT 2
50538: PPUSH
50539: CALL_OW 275
50543: PUSH
50544: LD_VAR 0 4
50548: PUSH
50549: LD_INT 2
50551: ARRAY
50552: GREATEREQUAL
50553: AND
50554: PUSH
50555: LD_VAR 0 3
50559: PPUSH
50560: LD_INT 3
50562: PPUSH
50563: CALL_OW 275
50567: PUSH
50568: LD_VAR 0 4
50572: PUSH
50573: LD_INT 3
50575: ARRAY
50576: GREATEREQUAL
50577: AND
50578: ST_TO_ADDR
// end ;
50579: LD_VAR 0 2
50583: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50584: LD_INT 0
50586: PPUSH
50587: PPUSH
50588: PPUSH
// pom := GetBase ( building ) ;
50589: LD_ADDR_VAR 0 4
50593: PUSH
50594: LD_VAR 0 1
50598: PPUSH
50599: CALL_OW 274
50603: ST_TO_ADDR
// if not pom then
50604: LD_VAR 0 4
50608: NOT
50609: IFFALSE 50613
// exit ;
50611: GO 50714
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50613: LD_ADDR_VAR 0 5
50617: PUSH
50618: LD_VAR 0 2
50622: PPUSH
50623: LD_VAR 0 1
50627: PPUSH
50628: CALL_OW 248
50632: PPUSH
50633: CALL_OW 450
50637: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50638: LD_ADDR_VAR 0 3
50642: PUSH
50643: LD_VAR 0 4
50647: PPUSH
50648: LD_INT 1
50650: PPUSH
50651: CALL_OW 275
50655: PUSH
50656: LD_VAR 0 5
50660: PUSH
50661: LD_INT 1
50663: ARRAY
50664: GREATEREQUAL
50665: PUSH
50666: LD_VAR 0 4
50670: PPUSH
50671: LD_INT 2
50673: PPUSH
50674: CALL_OW 275
50678: PUSH
50679: LD_VAR 0 5
50683: PUSH
50684: LD_INT 2
50686: ARRAY
50687: GREATEREQUAL
50688: AND
50689: PUSH
50690: LD_VAR 0 4
50694: PPUSH
50695: LD_INT 3
50697: PPUSH
50698: CALL_OW 275
50702: PUSH
50703: LD_VAR 0 5
50707: PUSH
50708: LD_INT 3
50710: ARRAY
50711: GREATEREQUAL
50712: AND
50713: ST_TO_ADDR
// end ;
50714: LD_VAR 0 3
50718: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50719: LD_INT 0
50721: PPUSH
50722: PPUSH
50723: PPUSH
50724: PPUSH
50725: PPUSH
50726: PPUSH
50727: PPUSH
50728: PPUSH
50729: PPUSH
50730: PPUSH
50731: PPUSH
// result := false ;
50732: LD_ADDR_VAR 0 8
50736: PUSH
50737: LD_INT 0
50739: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50740: LD_VAR 0 5
50744: NOT
50745: PUSH
50746: LD_VAR 0 1
50750: NOT
50751: OR
50752: PUSH
50753: LD_VAR 0 2
50757: NOT
50758: OR
50759: PUSH
50760: LD_VAR 0 3
50764: NOT
50765: OR
50766: IFFALSE 50770
// exit ;
50768: GO 51584
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50770: LD_ADDR_VAR 0 14
50774: PUSH
50775: LD_VAR 0 1
50779: PPUSH
50780: LD_VAR 0 2
50784: PPUSH
50785: LD_VAR 0 3
50789: PPUSH
50790: LD_VAR 0 4
50794: PPUSH
50795: LD_VAR 0 5
50799: PUSH
50800: LD_INT 1
50802: ARRAY
50803: PPUSH
50804: CALL_OW 248
50808: PPUSH
50809: LD_INT 0
50811: PPUSH
50812: CALL 52821 0 6
50816: ST_TO_ADDR
// if not hexes then
50817: LD_VAR 0 14
50821: NOT
50822: IFFALSE 50826
// exit ;
50824: GO 51584
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50826: LD_ADDR_VAR 0 17
50830: PUSH
50831: LD_VAR 0 5
50835: PPUSH
50836: LD_INT 22
50838: PUSH
50839: LD_VAR 0 13
50843: PPUSH
50844: CALL_OW 255
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: LD_INT 30
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 30
50868: PUSH
50869: LD_INT 1
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: LIST
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PPUSH
50885: CALL_OW 72
50889: ST_TO_ADDR
// for i = 1 to hexes do
50890: LD_ADDR_VAR 0 9
50894: PUSH
50895: DOUBLE
50896: LD_INT 1
50898: DEC
50899: ST_TO_ADDR
50900: LD_VAR 0 14
50904: PUSH
50905: FOR_TO
50906: IFFALSE 51582
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50908: LD_ADDR_VAR 0 13
50912: PUSH
50913: LD_VAR 0 14
50917: PUSH
50918: LD_VAR 0 9
50922: ARRAY
50923: PUSH
50924: LD_INT 1
50926: ARRAY
50927: PPUSH
50928: LD_VAR 0 14
50932: PUSH
50933: LD_VAR 0 9
50937: ARRAY
50938: PUSH
50939: LD_INT 2
50941: ARRAY
50942: PPUSH
50943: CALL_OW 428
50947: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50948: LD_VAR 0 14
50952: PUSH
50953: LD_VAR 0 9
50957: ARRAY
50958: PUSH
50959: LD_INT 1
50961: ARRAY
50962: PPUSH
50963: LD_VAR 0 14
50967: PUSH
50968: LD_VAR 0 9
50972: ARRAY
50973: PUSH
50974: LD_INT 2
50976: ARRAY
50977: PPUSH
50978: CALL_OW 351
50982: PUSH
50983: LD_VAR 0 14
50987: PUSH
50988: LD_VAR 0 9
50992: ARRAY
50993: PUSH
50994: LD_INT 1
50996: ARRAY
50997: PPUSH
50998: LD_VAR 0 14
51002: PUSH
51003: LD_VAR 0 9
51007: ARRAY
51008: PUSH
51009: LD_INT 2
51011: ARRAY
51012: PPUSH
51013: CALL_OW 488
51017: NOT
51018: OR
51019: PUSH
51020: LD_VAR 0 13
51024: PPUSH
51025: CALL_OW 247
51029: PUSH
51030: LD_INT 3
51032: EQUAL
51033: OR
51034: IFFALSE 51040
// exit ;
51036: POP
51037: POP
51038: GO 51584
// if not tmp then
51040: LD_VAR 0 13
51044: NOT
51045: IFFALSE 51049
// continue ;
51047: GO 50905
// result := true ;
51049: LD_ADDR_VAR 0 8
51053: PUSH
51054: LD_INT 1
51056: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51057: LD_VAR 0 6
51061: PUSH
51062: LD_VAR 0 13
51066: PPUSH
51067: CALL_OW 247
51071: PUSH
51072: LD_INT 2
51074: EQUAL
51075: AND
51076: PUSH
51077: LD_VAR 0 13
51081: PPUSH
51082: CALL_OW 263
51086: PUSH
51087: LD_INT 1
51089: EQUAL
51090: AND
51091: IFFALSE 51255
// begin if IsDrivenBy ( tmp ) then
51093: LD_VAR 0 13
51097: PPUSH
51098: CALL_OW 311
51102: IFFALSE 51106
// continue ;
51104: GO 50905
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51106: LD_VAR 0 6
51110: PPUSH
51111: LD_INT 3
51113: PUSH
51114: LD_INT 60
51116: PUSH
51117: EMPTY
51118: LIST
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 3
51126: PUSH
51127: LD_INT 55
51129: PUSH
51130: EMPTY
51131: LIST
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PPUSH
51141: CALL_OW 72
51145: IFFALSE 51253
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51147: LD_ADDR_VAR 0 18
51151: PUSH
51152: LD_VAR 0 6
51156: PPUSH
51157: LD_INT 3
51159: PUSH
51160: LD_INT 60
51162: PUSH
51163: EMPTY
51164: LIST
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 3
51172: PUSH
51173: LD_INT 55
51175: PUSH
51176: EMPTY
51177: LIST
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PPUSH
51187: CALL_OW 72
51191: PUSH
51192: LD_INT 1
51194: ARRAY
51195: ST_TO_ADDR
// if IsInUnit ( driver ) then
51196: LD_VAR 0 18
51200: PPUSH
51201: CALL_OW 310
51205: IFFALSE 51216
// ComExit ( driver ) ;
51207: LD_VAR 0 18
51211: PPUSH
51212: CALL 75949 0 1
// AddComEnterUnit ( driver , tmp ) ;
51216: LD_VAR 0 18
51220: PPUSH
51221: LD_VAR 0 13
51225: PPUSH
51226: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51230: LD_VAR 0 18
51234: PPUSH
51235: LD_VAR 0 7
51239: PPUSH
51240: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51244: LD_VAR 0 18
51248: PPUSH
51249: CALL_OW 181
// end ; continue ;
51253: GO 50905
// end ; if not cleaners or not tmp in cleaners then
51255: LD_VAR 0 6
51259: NOT
51260: PUSH
51261: LD_VAR 0 13
51265: PUSH
51266: LD_VAR 0 6
51270: IN
51271: NOT
51272: OR
51273: IFFALSE 51580
// begin if dep then
51275: LD_VAR 0 17
51279: IFFALSE 51415
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51281: LD_ADDR_VAR 0 16
51285: PUSH
51286: LD_VAR 0 17
51290: PUSH
51291: LD_INT 1
51293: ARRAY
51294: PPUSH
51295: CALL_OW 250
51299: PPUSH
51300: LD_VAR 0 17
51304: PUSH
51305: LD_INT 1
51307: ARRAY
51308: PPUSH
51309: CALL_OW 254
51313: PPUSH
51314: LD_INT 5
51316: PPUSH
51317: CALL_OW 272
51321: PUSH
51322: LD_VAR 0 17
51326: PUSH
51327: LD_INT 1
51329: ARRAY
51330: PPUSH
51331: CALL_OW 251
51335: PPUSH
51336: LD_VAR 0 17
51340: PUSH
51341: LD_INT 1
51343: ARRAY
51344: PPUSH
51345: CALL_OW 254
51349: PPUSH
51350: LD_INT 5
51352: PPUSH
51353: CALL_OW 273
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51362: LD_VAR 0 16
51366: PUSH
51367: LD_INT 1
51369: ARRAY
51370: PPUSH
51371: LD_VAR 0 16
51375: PUSH
51376: LD_INT 2
51378: ARRAY
51379: PPUSH
51380: CALL_OW 488
51384: IFFALSE 51415
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51386: LD_VAR 0 13
51390: PPUSH
51391: LD_VAR 0 16
51395: PUSH
51396: LD_INT 1
51398: ARRAY
51399: PPUSH
51400: LD_VAR 0 16
51404: PUSH
51405: LD_INT 2
51407: ARRAY
51408: PPUSH
51409: CALL_OW 111
// continue ;
51413: GO 50905
// end ; end ; r := GetDir ( tmp ) ;
51415: LD_ADDR_VAR 0 15
51419: PUSH
51420: LD_VAR 0 13
51424: PPUSH
51425: CALL_OW 254
51429: ST_TO_ADDR
// if r = 5 then
51430: LD_VAR 0 15
51434: PUSH
51435: LD_INT 5
51437: EQUAL
51438: IFFALSE 51448
// r := 0 ;
51440: LD_ADDR_VAR 0 15
51444: PUSH
51445: LD_INT 0
51447: ST_TO_ADDR
// for j = r to 5 do
51448: LD_ADDR_VAR 0 10
51452: PUSH
51453: DOUBLE
51454: LD_VAR 0 15
51458: DEC
51459: ST_TO_ADDR
51460: LD_INT 5
51462: PUSH
51463: FOR_TO
51464: IFFALSE 51578
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51466: LD_ADDR_VAR 0 11
51470: PUSH
51471: LD_VAR 0 13
51475: PPUSH
51476: CALL_OW 250
51480: PPUSH
51481: LD_VAR 0 10
51485: PPUSH
51486: LD_INT 2
51488: PPUSH
51489: CALL_OW 272
51493: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51494: LD_ADDR_VAR 0 12
51498: PUSH
51499: LD_VAR 0 13
51503: PPUSH
51504: CALL_OW 251
51508: PPUSH
51509: LD_VAR 0 10
51513: PPUSH
51514: LD_INT 2
51516: PPUSH
51517: CALL_OW 273
51521: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51522: LD_VAR 0 11
51526: PPUSH
51527: LD_VAR 0 12
51531: PPUSH
51532: CALL_OW 488
51536: PUSH
51537: LD_VAR 0 11
51541: PPUSH
51542: LD_VAR 0 12
51546: PPUSH
51547: CALL_OW 428
51551: NOT
51552: AND
51553: IFFALSE 51576
// begin ComMoveXY ( tmp , _x , _y ) ;
51555: LD_VAR 0 13
51559: PPUSH
51560: LD_VAR 0 11
51564: PPUSH
51565: LD_VAR 0 12
51569: PPUSH
51570: CALL_OW 111
// break ;
51574: GO 51578
// end ; end ;
51576: GO 51463
51578: POP
51579: POP
// end ; end ;
51580: GO 50905
51582: POP
51583: POP
// end ;
51584: LD_VAR 0 8
51588: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51589: LD_INT 0
51591: PPUSH
// result := true ;
51592: LD_ADDR_VAR 0 3
51596: PUSH
51597: LD_INT 1
51599: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51600: LD_VAR 0 2
51604: PUSH
51605: LD_INT 24
51607: DOUBLE
51608: EQUAL
51609: IFTRUE 51619
51611: LD_INT 33
51613: DOUBLE
51614: EQUAL
51615: IFTRUE 51619
51617: GO 51644
51619: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51620: LD_ADDR_VAR 0 3
51624: PUSH
51625: LD_INT 32
51627: PPUSH
51628: LD_VAR 0 1
51632: PPUSH
51633: CALL_OW 321
51637: PUSH
51638: LD_INT 2
51640: EQUAL
51641: ST_TO_ADDR
51642: GO 51964
51644: LD_INT 20
51646: DOUBLE
51647: EQUAL
51648: IFTRUE 51652
51650: GO 51677
51652: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51653: LD_ADDR_VAR 0 3
51657: PUSH
51658: LD_INT 6
51660: PPUSH
51661: LD_VAR 0 1
51665: PPUSH
51666: CALL_OW 321
51670: PUSH
51671: LD_INT 2
51673: EQUAL
51674: ST_TO_ADDR
51675: GO 51964
51677: LD_INT 22
51679: DOUBLE
51680: EQUAL
51681: IFTRUE 51691
51683: LD_INT 36
51685: DOUBLE
51686: EQUAL
51687: IFTRUE 51691
51689: GO 51716
51691: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51692: LD_ADDR_VAR 0 3
51696: PUSH
51697: LD_INT 15
51699: PPUSH
51700: LD_VAR 0 1
51704: PPUSH
51705: CALL_OW 321
51709: PUSH
51710: LD_INT 2
51712: EQUAL
51713: ST_TO_ADDR
51714: GO 51964
51716: LD_INT 30
51718: DOUBLE
51719: EQUAL
51720: IFTRUE 51724
51722: GO 51749
51724: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51725: LD_ADDR_VAR 0 3
51729: PUSH
51730: LD_INT 20
51732: PPUSH
51733: LD_VAR 0 1
51737: PPUSH
51738: CALL_OW 321
51742: PUSH
51743: LD_INT 2
51745: EQUAL
51746: ST_TO_ADDR
51747: GO 51964
51749: LD_INT 28
51751: DOUBLE
51752: EQUAL
51753: IFTRUE 51763
51755: LD_INT 21
51757: DOUBLE
51758: EQUAL
51759: IFTRUE 51763
51761: GO 51788
51763: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51764: LD_ADDR_VAR 0 3
51768: PUSH
51769: LD_INT 21
51771: PPUSH
51772: LD_VAR 0 1
51776: PPUSH
51777: CALL_OW 321
51781: PUSH
51782: LD_INT 2
51784: EQUAL
51785: ST_TO_ADDR
51786: GO 51964
51788: LD_INT 16
51790: DOUBLE
51791: EQUAL
51792: IFTRUE 51796
51794: GO 51823
51796: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51797: LD_ADDR_VAR 0 3
51801: PUSH
51802: LD_EXP 63
51806: PPUSH
51807: LD_VAR 0 1
51811: PPUSH
51812: CALL_OW 321
51816: PUSH
51817: LD_INT 2
51819: EQUAL
51820: ST_TO_ADDR
51821: GO 51964
51823: LD_INT 19
51825: DOUBLE
51826: EQUAL
51827: IFTRUE 51837
51829: LD_INT 23
51831: DOUBLE
51832: EQUAL
51833: IFTRUE 51837
51835: GO 51864
51837: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51838: LD_ADDR_VAR 0 3
51842: PUSH
51843: LD_EXP 62
51847: PPUSH
51848: LD_VAR 0 1
51852: PPUSH
51853: CALL_OW 321
51857: PUSH
51858: LD_INT 2
51860: EQUAL
51861: ST_TO_ADDR
51862: GO 51964
51864: LD_INT 17
51866: DOUBLE
51867: EQUAL
51868: IFTRUE 51872
51870: GO 51897
51872: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51873: LD_ADDR_VAR 0 3
51877: PUSH
51878: LD_INT 39
51880: PPUSH
51881: LD_VAR 0 1
51885: PPUSH
51886: CALL_OW 321
51890: PUSH
51891: LD_INT 2
51893: EQUAL
51894: ST_TO_ADDR
51895: GO 51964
51897: LD_INT 18
51899: DOUBLE
51900: EQUAL
51901: IFTRUE 51905
51903: GO 51930
51905: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51906: LD_ADDR_VAR 0 3
51910: PUSH
51911: LD_INT 40
51913: PPUSH
51914: LD_VAR 0 1
51918: PPUSH
51919: CALL_OW 321
51923: PUSH
51924: LD_INT 2
51926: EQUAL
51927: ST_TO_ADDR
51928: GO 51964
51930: LD_INT 27
51932: DOUBLE
51933: EQUAL
51934: IFTRUE 51938
51936: GO 51963
51938: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51939: LD_ADDR_VAR 0 3
51943: PUSH
51944: LD_INT 35
51946: PPUSH
51947: LD_VAR 0 1
51951: PPUSH
51952: CALL_OW 321
51956: PUSH
51957: LD_INT 2
51959: EQUAL
51960: ST_TO_ADDR
51961: GO 51964
51963: POP
// end ;
51964: LD_VAR 0 3
51968: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51969: LD_INT 0
51971: PPUSH
51972: PPUSH
51973: PPUSH
51974: PPUSH
51975: PPUSH
51976: PPUSH
51977: PPUSH
51978: PPUSH
51979: PPUSH
51980: PPUSH
51981: PPUSH
// result := false ;
51982: LD_ADDR_VAR 0 6
51986: PUSH
51987: LD_INT 0
51989: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51990: LD_VAR 0 1
51994: NOT
51995: PUSH
51996: LD_VAR 0 1
52000: PPUSH
52001: CALL_OW 266
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: IN
52016: NOT
52017: OR
52018: PUSH
52019: LD_VAR 0 2
52023: NOT
52024: OR
52025: PUSH
52026: LD_VAR 0 5
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: LD_INT 2
52039: PUSH
52040: LD_INT 3
52042: PUSH
52043: LD_INT 4
52045: PUSH
52046: LD_INT 5
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: IN
52057: NOT
52058: OR
52059: PUSH
52060: LD_VAR 0 3
52064: PPUSH
52065: LD_VAR 0 4
52069: PPUSH
52070: CALL_OW 488
52074: NOT
52075: OR
52076: IFFALSE 52080
// exit ;
52078: GO 52816
// side := GetSide ( depot ) ;
52080: LD_ADDR_VAR 0 9
52084: PUSH
52085: LD_VAR 0 1
52089: PPUSH
52090: CALL_OW 255
52094: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52095: LD_VAR 0 9
52099: PPUSH
52100: LD_VAR 0 2
52104: PPUSH
52105: CALL 51589 0 2
52109: NOT
52110: IFFALSE 52114
// exit ;
52112: GO 52816
// pom := GetBase ( depot ) ;
52114: LD_ADDR_VAR 0 10
52118: PUSH
52119: LD_VAR 0 1
52123: PPUSH
52124: CALL_OW 274
52128: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52129: LD_ADDR_VAR 0 11
52133: PUSH
52134: LD_VAR 0 2
52138: PPUSH
52139: LD_VAR 0 1
52143: PPUSH
52144: CALL_OW 248
52148: PPUSH
52149: CALL_OW 450
52153: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52154: LD_VAR 0 10
52158: PPUSH
52159: LD_INT 1
52161: PPUSH
52162: CALL_OW 275
52166: PUSH
52167: LD_VAR 0 11
52171: PUSH
52172: LD_INT 1
52174: ARRAY
52175: GREATEREQUAL
52176: PUSH
52177: LD_VAR 0 10
52181: PPUSH
52182: LD_INT 2
52184: PPUSH
52185: CALL_OW 275
52189: PUSH
52190: LD_VAR 0 11
52194: PUSH
52195: LD_INT 2
52197: ARRAY
52198: GREATEREQUAL
52199: AND
52200: PUSH
52201: LD_VAR 0 10
52205: PPUSH
52206: LD_INT 3
52208: PPUSH
52209: CALL_OW 275
52213: PUSH
52214: LD_VAR 0 11
52218: PUSH
52219: LD_INT 3
52221: ARRAY
52222: GREATEREQUAL
52223: AND
52224: NOT
52225: IFFALSE 52229
// exit ;
52227: GO 52816
// if GetBType ( depot ) = b_depot then
52229: LD_VAR 0 1
52233: PPUSH
52234: CALL_OW 266
52238: PUSH
52239: LD_INT 0
52241: EQUAL
52242: IFFALSE 52254
// dist := 28 else
52244: LD_ADDR_VAR 0 14
52248: PUSH
52249: LD_INT 28
52251: ST_TO_ADDR
52252: GO 52262
// dist := 36 ;
52254: LD_ADDR_VAR 0 14
52258: PUSH
52259: LD_INT 36
52261: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52262: LD_VAR 0 1
52266: PPUSH
52267: LD_VAR 0 3
52271: PPUSH
52272: LD_VAR 0 4
52276: PPUSH
52277: CALL_OW 297
52281: PUSH
52282: LD_VAR 0 14
52286: GREATER
52287: IFFALSE 52291
// exit ;
52289: GO 52816
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52291: LD_ADDR_VAR 0 12
52295: PUSH
52296: LD_VAR 0 2
52300: PPUSH
52301: LD_VAR 0 3
52305: PPUSH
52306: LD_VAR 0 4
52310: PPUSH
52311: LD_VAR 0 5
52315: PPUSH
52316: LD_VAR 0 1
52320: PPUSH
52321: CALL_OW 248
52325: PPUSH
52326: LD_INT 0
52328: PPUSH
52329: CALL 52821 0 6
52333: ST_TO_ADDR
// if not hexes then
52334: LD_VAR 0 12
52338: NOT
52339: IFFALSE 52343
// exit ;
52341: GO 52816
// hex := GetHexInfo ( x , y ) ;
52343: LD_ADDR_VAR 0 15
52347: PUSH
52348: LD_VAR 0 3
52352: PPUSH
52353: LD_VAR 0 4
52357: PPUSH
52358: CALL_OW 546
52362: ST_TO_ADDR
// if hex [ 1 ] then
52363: LD_VAR 0 15
52367: PUSH
52368: LD_INT 1
52370: ARRAY
52371: IFFALSE 52375
// exit ;
52373: GO 52816
// height := hex [ 2 ] ;
52375: LD_ADDR_VAR 0 13
52379: PUSH
52380: LD_VAR 0 15
52384: PUSH
52385: LD_INT 2
52387: ARRAY
52388: ST_TO_ADDR
// for i = 1 to hexes do
52389: LD_ADDR_VAR 0 7
52393: PUSH
52394: DOUBLE
52395: LD_INT 1
52397: DEC
52398: ST_TO_ADDR
52399: LD_VAR 0 12
52403: PUSH
52404: FOR_TO
52405: IFFALSE 52735
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52407: LD_VAR 0 12
52411: PUSH
52412: LD_VAR 0 7
52416: ARRAY
52417: PUSH
52418: LD_INT 1
52420: ARRAY
52421: PPUSH
52422: LD_VAR 0 12
52426: PUSH
52427: LD_VAR 0 7
52431: ARRAY
52432: PUSH
52433: LD_INT 2
52435: ARRAY
52436: PPUSH
52437: CALL_OW 488
52441: NOT
52442: PUSH
52443: LD_VAR 0 12
52447: PUSH
52448: LD_VAR 0 7
52452: ARRAY
52453: PUSH
52454: LD_INT 1
52456: ARRAY
52457: PPUSH
52458: LD_VAR 0 12
52462: PUSH
52463: LD_VAR 0 7
52467: ARRAY
52468: PUSH
52469: LD_INT 2
52471: ARRAY
52472: PPUSH
52473: CALL_OW 428
52477: PUSH
52478: LD_INT 0
52480: GREATER
52481: OR
52482: PUSH
52483: LD_VAR 0 12
52487: PUSH
52488: LD_VAR 0 7
52492: ARRAY
52493: PUSH
52494: LD_INT 1
52496: ARRAY
52497: PPUSH
52498: LD_VAR 0 12
52502: PUSH
52503: LD_VAR 0 7
52507: ARRAY
52508: PUSH
52509: LD_INT 2
52511: ARRAY
52512: PPUSH
52513: CALL_OW 351
52517: OR
52518: IFFALSE 52524
// exit ;
52520: POP
52521: POP
52522: GO 52816
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52524: LD_ADDR_VAR 0 8
52528: PUSH
52529: LD_VAR 0 12
52533: PUSH
52534: LD_VAR 0 7
52538: ARRAY
52539: PUSH
52540: LD_INT 1
52542: ARRAY
52543: PPUSH
52544: LD_VAR 0 12
52548: PUSH
52549: LD_VAR 0 7
52553: ARRAY
52554: PUSH
52555: LD_INT 2
52557: ARRAY
52558: PPUSH
52559: CALL_OW 546
52563: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52564: LD_VAR 0 8
52568: PUSH
52569: LD_INT 1
52571: ARRAY
52572: PUSH
52573: LD_VAR 0 8
52577: PUSH
52578: LD_INT 2
52580: ARRAY
52581: PUSH
52582: LD_VAR 0 13
52586: PUSH
52587: LD_INT 2
52589: PLUS
52590: GREATER
52591: OR
52592: PUSH
52593: LD_VAR 0 8
52597: PUSH
52598: LD_INT 2
52600: ARRAY
52601: PUSH
52602: LD_VAR 0 13
52606: PUSH
52607: LD_INT 2
52609: MINUS
52610: LESS
52611: OR
52612: PUSH
52613: LD_VAR 0 8
52617: PUSH
52618: LD_INT 3
52620: ARRAY
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: LD_INT 8
52627: PUSH
52628: LD_INT 9
52630: PUSH
52631: LD_INT 10
52633: PUSH
52634: LD_INT 11
52636: PUSH
52637: LD_INT 12
52639: PUSH
52640: LD_INT 13
52642: PUSH
52643: LD_INT 16
52645: PUSH
52646: LD_INT 17
52648: PUSH
52649: LD_INT 18
52651: PUSH
52652: LD_INT 19
52654: PUSH
52655: LD_INT 20
52657: PUSH
52658: LD_INT 21
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: IN
52676: NOT
52677: OR
52678: PUSH
52679: LD_VAR 0 8
52683: PUSH
52684: LD_INT 5
52686: ARRAY
52687: NOT
52688: OR
52689: PUSH
52690: LD_VAR 0 8
52694: PUSH
52695: LD_INT 6
52697: ARRAY
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: LD_INT 2
52704: PUSH
52705: LD_INT 7
52707: PUSH
52708: LD_INT 9
52710: PUSH
52711: LD_INT 10
52713: PUSH
52714: LD_INT 11
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: IN
52725: NOT
52726: OR
52727: IFFALSE 52733
// exit ;
52729: POP
52730: POP
52731: GO 52816
// end ;
52733: GO 52404
52735: POP
52736: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52737: LD_VAR 0 9
52741: PPUSH
52742: LD_VAR 0 3
52746: PPUSH
52747: LD_VAR 0 4
52751: PPUSH
52752: LD_INT 20
52754: PPUSH
52755: CALL 44762 0 4
52759: PUSH
52760: LD_INT 4
52762: ARRAY
52763: IFFALSE 52767
// exit ;
52765: GO 52816
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52767: LD_VAR 0 2
52771: PUSH
52772: LD_INT 29
52774: PUSH
52775: LD_INT 30
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: IN
52782: PUSH
52783: LD_VAR 0 3
52787: PPUSH
52788: LD_VAR 0 4
52792: PPUSH
52793: LD_VAR 0 9
52797: PPUSH
52798: CALL_OW 440
52802: NOT
52803: AND
52804: IFFALSE 52808
// exit ;
52806: GO 52816
// result := true ;
52808: LD_ADDR_VAR 0 6
52812: PUSH
52813: LD_INT 1
52815: ST_TO_ADDR
// end ;
52816: LD_VAR 0 6
52820: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52821: LD_INT 0
52823: PPUSH
52824: PPUSH
52825: PPUSH
52826: PPUSH
52827: PPUSH
52828: PPUSH
52829: PPUSH
52830: PPUSH
52831: PPUSH
52832: PPUSH
52833: PPUSH
52834: PPUSH
52835: PPUSH
52836: PPUSH
52837: PPUSH
52838: PPUSH
52839: PPUSH
52840: PPUSH
52841: PPUSH
52842: PPUSH
52843: PPUSH
52844: PPUSH
52845: PPUSH
52846: PPUSH
52847: PPUSH
52848: PPUSH
52849: PPUSH
52850: PPUSH
52851: PPUSH
52852: PPUSH
52853: PPUSH
52854: PPUSH
52855: PPUSH
52856: PPUSH
52857: PPUSH
52858: PPUSH
52859: PPUSH
52860: PPUSH
52861: PPUSH
52862: PPUSH
52863: PPUSH
52864: PPUSH
52865: PPUSH
52866: PPUSH
52867: PPUSH
52868: PPUSH
52869: PPUSH
52870: PPUSH
52871: PPUSH
52872: PPUSH
52873: PPUSH
52874: PPUSH
52875: PPUSH
52876: PPUSH
52877: PPUSH
52878: PPUSH
52879: PPUSH
52880: PPUSH
// result = [ ] ;
52881: LD_ADDR_VAR 0 7
52885: PUSH
52886: EMPTY
52887: ST_TO_ADDR
// temp_list = [ ] ;
52888: LD_ADDR_VAR 0 9
52892: PUSH
52893: EMPTY
52894: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52895: LD_VAR 0 4
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: LD_INT 3
52911: PUSH
52912: LD_INT 4
52914: PUSH
52915: LD_INT 5
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: IN
52926: NOT
52927: PUSH
52928: LD_VAR 0 1
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: IN
52943: PUSH
52944: LD_VAR 0 5
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: LD_INT 2
52954: PUSH
52955: LD_INT 3
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: LIST
52962: IN
52963: NOT
52964: AND
52965: OR
52966: IFFALSE 52970
// exit ;
52968: GO 71361
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52970: LD_VAR 0 1
52974: PUSH
52975: LD_INT 6
52977: PUSH
52978: LD_INT 7
52980: PUSH
52981: LD_INT 8
52983: PUSH
52984: LD_INT 13
52986: PUSH
52987: LD_INT 12
52989: PUSH
52990: LD_INT 15
52992: PUSH
52993: LD_INT 11
52995: PUSH
52996: LD_INT 14
52998: PUSH
52999: LD_INT 10
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: IN
53013: IFFALSE 53023
// btype = b_lab ;
53015: LD_ADDR_VAR 0 1
53019: PUSH
53020: LD_INT 6
53022: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53023: LD_VAR 0 6
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: LIST
53041: IN
53042: NOT
53043: PUSH
53044: LD_VAR 0 1
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: LD_INT 3
53060: PUSH
53061: LD_INT 6
53063: PUSH
53064: LD_INT 36
53066: PUSH
53067: LD_INT 4
53069: PUSH
53070: LD_INT 5
53072: PUSH
53073: LD_INT 31
53075: PUSH
53076: LD_INT 32
53078: PUSH
53079: LD_INT 33
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: IN
53095: NOT
53096: PUSH
53097: LD_VAR 0 6
53101: PUSH
53102: LD_INT 1
53104: EQUAL
53105: AND
53106: OR
53107: PUSH
53108: LD_VAR 0 1
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: LD_INT 3
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: IN
53123: NOT
53124: PUSH
53125: LD_VAR 0 6
53129: PUSH
53130: LD_INT 2
53132: EQUAL
53133: AND
53134: OR
53135: IFFALSE 53145
// mode = 0 ;
53137: LD_ADDR_VAR 0 6
53141: PUSH
53142: LD_INT 0
53144: ST_TO_ADDR
// case mode of 0 :
53145: LD_VAR 0 6
53149: PUSH
53150: LD_INT 0
53152: DOUBLE
53153: EQUAL
53154: IFTRUE 53158
53156: GO 64611
53158: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53159: LD_ADDR_VAR 0 11
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: LD_INT 2
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 2
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 3
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 3
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: LD_INT 2
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53352: LD_ADDR_VAR 0 12
53356: PUSH
53357: LD_INT 0
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: LD_INT 1
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: LD_INT 1
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 2
53475: NEG
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 3
53509: NEG
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 3
53520: NEG
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53548: LD_ADDR_VAR 0 13
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 0
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: NEG
53630: PUSH
53631: LD_INT 2
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: LD_INT 2
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 2
53671: NEG
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 2
53683: NEG
53684: PUSH
53685: LD_INT 2
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: LD_INT 3
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 3
53707: NEG
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 3
53719: NEG
53720: PUSH
53721: LD_INT 3
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53747: LD_ADDR_VAR 0 14
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: NEG
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 1
53828: NEG
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 2
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: LD_INT 2
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: LD_INT 3
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 0
53905: PUSH
53906: LD_INT 3
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53943: LD_ADDR_VAR 0 15
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 2
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 2
54066: NEG
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 2
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 3
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 3
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54136: LD_ADDR_VAR 0 16
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 2
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: LD_INT 2
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 2
54259: NEG
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: LD_INT 2
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 3
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 3
54293: PUSH
54294: LD_INT 3
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: PUSH
54304: LD_INT 3
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54329: LD_ADDR_VAR 0 17
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: LD_INT 1
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: LD_INT 2
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 2
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 2
54505: NEG
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 2
54516: NEG
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 2
54528: NEG
54529: PUSH
54530: LD_INT 2
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54559: LD_ADDR_VAR 0 18
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 2
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: LD_INT 2
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 2
54735: NEG
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: NEG
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54789: LD_ADDR_VAR 0 19
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 1
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: LD_INT 2
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 2
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 2
54965: NEG
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 2
54976: NEG
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 2
54988: NEG
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55019: LD_ADDR_VAR 0 20
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: LD_INT 1
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 2
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 2
55154: PUSH
55155: LD_INT 2
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: LD_INT 2
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 2
55195: NEG
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: LD_INT 2
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55249: LD_ADDR_VAR 0 21
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 0
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 1
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: NEG
55319: PUSH
55320: LD_INT 1
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: NEG
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: LD_INT 2
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55479: LD_ADDR_VAR 0 22
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: LD_INT 1
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 2
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 2
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: LD_INT 2
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 2
55655: NEG
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 2
55666: NEG
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 2
55678: NEG
55679: PUSH
55680: LD_INT 2
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55709: LD_ADDR_VAR 0 23
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: LD_INT 2
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 2
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 2
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: NEG
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 2
55896: NEG
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 2
55908: NEG
55909: PUSH
55910: LD_INT 2
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 2
55920: NEG
55921: PUSH
55922: LD_INT 3
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: LD_INT 3
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: PUSH
55945: LD_INT 2
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55989: LD_ADDR_VAR 0 24
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: LD_INT 0
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: LD_INT 2
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: LD_INT 2
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 2
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: LD_INT 2
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: LD_INT 2
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 2
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PUSH
56167: LD_INT 0
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 2
56176: NEG
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 2
56188: NEG
56189: PUSH
56190: LD_INT 2
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: LD_INT 2
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 3
56232: PUSH
56233: LD_INT 2
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56265: LD_ADDR_VAR 0 25
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: LD_INT 1
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: LD_INT 1
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: LD_INT 2
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: LD_INT 2
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 2
56390: PUSH
56391: LD_INT 1
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: PUSH
56401: LD_INT 2
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 2
56441: NEG
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 2
56452: NEG
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 2
56464: NEG
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 3
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 3
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: LD_INT 3
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: LD_INT 3
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56539: LD_ADDR_VAR 0 26
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 1
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 2
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: LD_INT 2
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: LD_INT 2
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 2
56715: NEG
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 2
56726: NEG
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 2
56738: NEG
56739: PUSH
56740: LD_INT 2
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 2
56750: PUSH
56751: LD_INT 3
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 3
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 2
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: NEG
56782: PUSH
56783: LD_INT 1
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56815: LD_ADDR_VAR 0 27
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 0
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: LD_INT 1
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 2
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 2
56940: PUSH
56941: LD_INT 1
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: LD_INT 2
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: LD_INT 2
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: NEG
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 2
57002: NEG
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: LD_INT 2
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: LD_INT 2
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: NEG
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 3
57048: NEG
57049: PUSH
57050: LD_INT 1
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 3
57060: NEG
57061: PUSH
57062: LD_INT 2
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57095: LD_ADDR_VAR 0 28
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: LD_INT 2
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 2
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 2
57271: NEG
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: NEG
57307: PUSH
57308: LD_INT 3
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: LD_INT 3
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 3
57330: NEG
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 3
57342: NEG
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57377: LD_ADDR_VAR 0 29
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: NEG
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: PUSH
57448: LD_INT 1
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: LD_INT 1
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: LD_INT 2
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: LD_INT 3
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 2
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: LD_INT 1
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 1
57610: NEG
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 3
57621: NEG
57622: PUSH
57623: LD_INT 2
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57656: LD_ADDR_VAR 0 30
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: LD_INT 2
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: LD_INT 2
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 2
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 2
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 2
57791: PUSH
57792: LD_INT 2
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: NEG
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 2
57822: NEG
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: NEG
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: LD_INT 3
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: LD_INT 2
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 3
57868: PUSH
57869: LD_INT 2
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 2
57878: PUSH
57879: LD_INT 3
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: NEG
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 3
57899: NEG
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57934: LD_ADDR_VAR 0 31
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: LD_INT 1
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 1
58003: NEG
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: LD_INT 2
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: PUSH
58039: LD_INT 0
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 2
58048: PUSH
58049: LD_INT 1
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 2
58058: PUSH
58059: LD_INT 2
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: LD_INT 2
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 2
58099: NEG
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 2
58111: NEG
58112: PUSH
58113: LD_INT 2
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: LD_INT 3
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: LD_INT 3
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 1
58166: NEG
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 3
58177: NEG
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58212: LD_ADDR_VAR 0 32
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: LD_INT 1
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: LD_INT 1
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: LD_INT 2
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: LD_INT 2
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 2
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 2
58337: PUSH
58338: LD_INT 2
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: LD_INT 2
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: LD_INT 2
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: LD_INT 1
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 2
58378: NEG
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 2
58389: NEG
58390: PUSH
58391: LD_INT 1
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: LD_INT 3
58405: NEG
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 3
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 2
58434: PUSH
58435: LD_INT 3
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 3
58455: NEG
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58490: LD_ADDR_VAR 0 33
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: LD_INT 0
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: LD_INT 0
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 1
58559: NEG
58560: PUSH
58561: LD_INT 1
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: LD_INT 2
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 2
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 2
58604: PUSH
58605: LD_INT 1
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: LD_INT 2
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 2
58645: NEG
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 2
58656: NEG
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: LD_INT 2
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: LD_INT 3
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 3
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: LD_INT 3
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 3
58734: NEG
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58769: LD_ADDR_VAR 0 34
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: LD_INT 1
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: LD_INT 1
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: LD_INT 0
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 1
58838: NEG
58839: PUSH
58840: LD_INT 1
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: LD_INT 2
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: LD_INT 2
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 1
58873: PUSH
58874: LD_INT 1
58876: NEG
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 2
58884: PUSH
58885: LD_INT 1
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: LD_INT 2
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 2
58925: NEG
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: NEG
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 2
58948: NEG
58949: PUSH
58950: LD_INT 2
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: LD_INT 3
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: LD_INT 2
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 3
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: LD_INT 3
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 2
59003: NEG
59004: PUSH
59005: LD_INT 1
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 3
59014: NEG
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59049: LD_ADDR_VAR 0 35
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: PUSH
59088: LD_INT 1
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 0
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: NEG
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 2
59130: PUSH
59131: LD_INT 1
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59161: LD_ADDR_VAR 0 36
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: LD_INT 1
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: NEG
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: LD_INT 2
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: LD_INT 2
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59273: LD_ADDR_VAR 0 37
59277: PUSH
59278: LD_INT 0
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 1
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: NEG
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59385: LD_ADDR_VAR 0 38
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: NEG
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 2
59476: NEG
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59497: LD_ADDR_VAR 0 39
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 1
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 1
59566: NEG
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: LD_INT 2
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59609: LD_ADDR_VAR 0 40
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: LD_INT 1
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: LD_INT 1
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59721: LD_ADDR_VAR 0 41
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: LD_INT 1
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: LD_INT 0
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 1
59790: NEG
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: LD_INT 2
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 2
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 2
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: PUSH
59846: LD_INT 2
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: LD_INT 2
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 2
59876: NEG
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 2
59887: NEG
59888: PUSH
59889: LD_INT 1
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: LD_INT 2
59903: NEG
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: LD_INT 3
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 3
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 3
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 3
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 3
59964: PUSH
59965: LD_INT 3
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 2
59974: PUSH
59975: LD_INT 3
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 2
59984: NEG
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 3
59995: NEG
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 3
60006: NEG
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 3
60018: NEG
60019: PUSH
60020: LD_INT 2
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 3
60030: NEG
60031: PUSH
60032: LD_INT 3
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60071: LD_ADDR_VAR 0 42
60075: PUSH
60076: LD_INT 0
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 0
60088: PUSH
60089: LD_INT 1
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 1
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 1
60109: PUSH
60110: LD_INT 1
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 1
60129: NEG
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: NEG
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: LD_INT 2
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 1
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 2
60186: PUSH
60187: LD_INT 1
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 2
60196: PUSH
60197: LD_INT 2
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: LD_INT 2
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: LD_INT 2
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 1
60226: NEG
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PUSH
60239: LD_INT 1
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 2
60249: NEG
60250: PUSH
60251: LD_INT 2
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 2
60261: NEG
60262: PUSH
60263: LD_INT 3
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: LD_INT 3
60277: NEG
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: LD_INT 3
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: LD_INT 2
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 3
60307: PUSH
60308: LD_INT 2
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 3
60317: PUSH
60318: LD_INT 3
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: PUSH
60328: LD_INT 3
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: LD_INT 3
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: LD_INT 3
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 1
60357: NEG
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 3
60368: NEG
60369: PUSH
60370: LD_INT 2
60372: NEG
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 3
60380: NEG
60381: PUSH
60382: LD_INT 3
60384: NEG
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60421: LD_ADDR_VAR 0 43
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 1
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: LD_INT 2
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: LD_INT 2
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 1
60525: PUSH
60526: LD_INT 1
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 2
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: LD_INT 1
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: LD_INT 2
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 0
60566: PUSH
60567: LD_INT 2
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: NEG
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 2
60587: NEG
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 2
60598: NEG
60599: PUSH
60600: LD_INT 1
60602: NEG
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 1
60610: NEG
60611: PUSH
60612: LD_INT 3
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: LD_INT 3
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: LD_INT 2
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 3
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 3
60665: PUSH
60666: LD_INT 1
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: PUSH
60676: LD_INT 3
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: LD_INT 3
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: LD_INT 2
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 2
60706: NEG
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 3
60717: NEG
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 3
60728: NEG
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60769: LD_ADDR_VAR 0 44
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: LD_INT 1
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: LD_INT 1
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: NEG
60851: PUSH
60852: LD_INT 2
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: LD_INT 1
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 2
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 2
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 2
60893: PUSH
60894: LD_INT 2
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: PUSH
60904: LD_INT 2
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 1
60913: NEG
60914: PUSH
60915: LD_INT 1
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 2
60924: NEG
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 2
60935: NEG
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 2
60947: NEG
60948: PUSH
60949: LD_INT 2
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: NEG
60960: PUSH
60961: LD_INT 3
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 2
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 3
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 3
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 3
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 3
61012: PUSH
61013: LD_INT 3
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 2
61022: PUSH
61023: LD_INT 3
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: LD_INT 1
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 3
61043: NEG
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 3
61054: NEG
61055: PUSH
61056: LD_INT 1
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 3
61066: NEG
61067: PUSH
61068: LD_INT 2
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 3
61078: NEG
61079: PUSH
61080: LD_INT 3
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61119: LD_ADDR_VAR 0 45
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 0
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: LD_INT 0
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 1
61157: PUSH
61158: LD_INT 1
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 1
61177: NEG
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 1
61188: NEG
61189: PUSH
61190: LD_INT 1
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: LD_INT 2
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 0
61212: PUSH
61213: LD_INT 2
61215: NEG
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 1
61223: PUSH
61224: LD_INT 1
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 2
61244: PUSH
61245: LD_INT 2
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: LD_INT 2
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 0
61264: PUSH
61265: LD_INT 2
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 1
61274: NEG
61275: PUSH
61276: LD_INT 1
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: LD_INT 1
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: LD_INT 2
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: LD_INT 3
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 3
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: PUSH
61345: LD_INT 2
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 3
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 3
61365: PUSH
61366: LD_INT 3
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 2
61375: PUSH
61376: LD_INT 3
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: PUSH
61386: LD_INT 3
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: LD_INT 3
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 1
61405: NEG
61406: PUSH
61407: LD_INT 2
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 3
61416: NEG
61417: PUSH
61418: LD_INT 2
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 3
61428: NEG
61429: PUSH
61430: LD_INT 3
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61469: LD_ADDR_VAR 0 46
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: LD_INT 1
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: LD_INT 1
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: LD_INT 2
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 1
61573: PUSH
61574: LD_INT 1
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 2
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 2
61594: PUSH
61595: LD_INT 1
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: LD_INT 2
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: LD_INT 2
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: LD_INT 1
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 2
61635: NEG
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 2
61646: NEG
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: LD_INT 3
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 0
61670: PUSH
61671: LD_INT 3
61673: NEG
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: LD_INT 2
61684: NEG
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 2
61692: PUSH
61693: LD_INT 1
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 3
61703: PUSH
61704: LD_INT 0
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 3
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: LD_INT 3
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: LD_INT 3
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 2
61754: NEG
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 3
61765: NEG
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 3
61776: NEG
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61817: LD_ADDR_VAR 0 47
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: LD_INT 0
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 1
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: LD_INT 1
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: LD_INT 0
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: LD_INT 1
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: NEG
61899: PUSH
61900: LD_INT 2
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 0
61910: PUSH
61911: LD_INT 2
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 1
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 2
61932: NEG
61933: PUSH
61934: LD_INT 1
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: NEG
61945: PUSH
61946: LD_INT 2
61948: NEG
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61968: LD_ADDR_VAR 0 48
61972: PUSH
61973: LD_INT 0
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: LD_INT 1
61988: NEG
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 1
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 1
62026: NEG
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: LD_INT 1
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: LD_INT 2
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: LD_INT 2
62064: NEG
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 2
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 2
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62115: LD_ADDR_VAR 0 49
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: LD_INT 1
62135: NEG
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: LD_INT 1
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 1
62184: NEG
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 2
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 2
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 2
62227: PUSH
62228: LD_INT 2
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: LD_INT 2
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62259: LD_ADDR_VAR 0 50
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: LD_INT 1
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: LD_INT 1
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 2
62340: PUSH
62341: LD_INT 1
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 2
62350: PUSH
62351: LD_INT 2
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 1
62360: PUSH
62361: LD_INT 2
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: LD_INT 2
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 1
62380: NEG
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62403: LD_ADDR_VAR 0 51
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: LD_INT 1
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 1
62441: PUSH
62442: LD_INT 1
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: LD_INT 1
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 1
62461: NEG
62462: PUSH
62463: LD_INT 0
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 1
62472: NEG
62473: PUSH
62474: LD_INT 1
62476: NEG
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 1
62484: PUSH
62485: LD_INT 2
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: LD_INT 2
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 1
62504: NEG
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 2
62515: NEG
62516: PUSH
62517: LD_INT 0
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 2
62526: NEG
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62550: LD_ADDR_VAR 0 52
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: LD_INT 1
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 1
62578: PUSH
62579: LD_INT 0
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: LD_INT 0
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: LD_INT 1
62623: NEG
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: LD_INT 2
62635: NEG
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 1
62643: NEG
62644: PUSH
62645: LD_INT 1
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 2
62654: NEG
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 2
62665: NEG
62666: PUSH
62667: LD_INT 1
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 2
62677: NEG
62678: PUSH
62679: LD_INT 2
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62701: LD_ADDR_VAR 0 53
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: LD_INT 1
62721: NEG
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 1
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 1
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 0
62749: PUSH
62750: LD_INT 1
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 1
62759: NEG
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 1
62770: NEG
62771: PUSH
62772: LD_INT 1
62774: NEG
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 1
62782: NEG
62783: PUSH
62784: LD_INT 2
62786: NEG
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 0
62794: PUSH
62795: LD_INT 2
62797: NEG
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 1
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 2
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 2
62826: PUSH
62827: LD_INT 1
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 2
62836: PUSH
62837: LD_INT 2
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: LD_INT 2
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: LD_INT 2
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 1
62866: NEG
62867: PUSH
62868: LD_INT 1
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 2
62877: NEG
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: EMPTY
62883: LIST
62884: LIST
62885: PUSH
62886: LD_INT 2
62888: NEG
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 2
62900: NEG
62901: PUSH
62902: LD_INT 2
62904: NEG
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62931: LD_ADDR_VAR 0 54
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 0
62948: PUSH
62949: LD_INT 1
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 1
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 1
62969: PUSH
62970: LD_INT 1
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 0
62979: PUSH
62980: LD_INT 1
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 1
62989: NEG
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 1
63000: NEG
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: NEG
63013: PUSH
63014: LD_INT 2
63016: NEG
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: LD_INT 2
63027: NEG
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: LD_INT 1
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 2
63046: PUSH
63047: LD_INT 0
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 2
63056: PUSH
63057: LD_INT 1
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 2
63066: PUSH
63067: LD_INT 2
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 1
63076: PUSH
63077: LD_INT 2
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: LD_INT 2
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 1
63096: NEG
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 2
63107: NEG
63108: PUSH
63109: LD_INT 0
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 2
63118: NEG
63119: PUSH
63120: LD_INT 1
63122: NEG
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 2
63130: NEG
63131: PUSH
63132: LD_INT 2
63134: NEG
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63161: LD_ADDR_VAR 0 55
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: LD_INT 1
63181: NEG
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 1
63189: PUSH
63190: LD_INT 0
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 1
63199: PUSH
63200: LD_INT 1
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: LD_INT 1
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 1
63219: NEG
63220: PUSH
63221: LD_INT 0
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 1
63230: NEG
63231: PUSH
63232: LD_INT 1
63234: NEG
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: LD_INT 2
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 0
63254: PUSH
63255: LD_INT 2
63257: NEG
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 1
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 2
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 2
63286: PUSH
63287: LD_INT 1
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 2
63296: PUSH
63297: LD_INT 2
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 1
63306: PUSH
63307: LD_INT 2
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: LD_INT 0
63316: PUSH
63317: LD_INT 2
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 1
63326: NEG
63327: PUSH
63328: LD_INT 1
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 2
63337: NEG
63338: PUSH
63339: LD_INT 0
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 2
63348: NEG
63349: PUSH
63350: LD_INT 1
63352: NEG
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 2
63360: NEG
63361: PUSH
63362: LD_INT 2
63364: NEG
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63391: LD_ADDR_VAR 0 56
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: LD_INT 1
63411: NEG
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: PUSH
63420: LD_INT 0
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: PUSH
63430: LD_INT 1
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 1
63449: NEG
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 1
63460: NEG
63461: PUSH
63462: LD_INT 1
63464: NEG
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: PUSH
63474: LD_INT 2
63476: NEG
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 0
63484: PUSH
63485: LD_INT 2
63487: NEG
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 1
63495: PUSH
63496: LD_INT 1
63498: NEG
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 2
63506: PUSH
63507: LD_INT 0
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 2
63516: PUSH
63517: LD_INT 1
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 2
63526: PUSH
63527: LD_INT 2
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 1
63536: PUSH
63537: LD_INT 2
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: LD_INT 2
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 1
63556: NEG
63557: PUSH
63558: LD_INT 1
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 2
63567: NEG
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 2
63578: NEG
63579: PUSH
63580: LD_INT 1
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 2
63590: NEG
63591: PUSH
63592: LD_INT 2
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63621: LD_ADDR_VAR 0 57
63625: PUSH
63626: LD_INT 0
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: LD_INT 1
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: LD_INT 0
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 1
63659: PUSH
63660: LD_INT 1
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 0
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 1
63679: NEG
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 1
63690: NEG
63691: PUSH
63692: LD_INT 1
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 1
63702: NEG
63703: PUSH
63704: LD_INT 2
63706: NEG
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: LD_INT 2
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: PUSH
63726: LD_INT 1
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 2
63736: PUSH
63737: LD_INT 0
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 2
63746: PUSH
63747: LD_INT 1
63749: PUSH
63750: EMPTY
63751: LIST
63752: LIST
63753: PUSH
63754: LD_INT 2
63756: PUSH
63757: LD_INT 2
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: LD_INT 2
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 1
63786: NEG
63787: PUSH
63788: LD_INT 1
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 2
63797: NEG
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 2
63808: NEG
63809: PUSH
63810: LD_INT 1
63812: NEG
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 2
63820: NEG
63821: PUSH
63822: LD_INT 2
63824: NEG
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63851: LD_ADDR_VAR 0 58
63855: PUSH
63856: LD_INT 0
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 0
63868: PUSH
63869: LD_INT 1
63871: NEG
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: PUSH
63880: LD_INT 0
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 1
63889: PUSH
63890: LD_INT 1
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 0
63899: PUSH
63900: LD_INT 1
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 1
63909: NEG
63910: PUSH
63911: LD_INT 0
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 1
63920: NEG
63921: PUSH
63922: LD_INT 1
63924: NEG
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 1
63932: NEG
63933: PUSH
63934: LD_INT 2
63936: NEG
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: LD_INT 2
63947: NEG
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 1
63955: PUSH
63956: LD_INT 1
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 2
63966: PUSH
63967: LD_INT 0
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 2
63976: PUSH
63977: LD_INT 1
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 2
63986: PUSH
63987: LD_INT 2
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 1
63996: PUSH
63997: LD_INT 2
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: LD_INT 2
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 1
64016: NEG
64017: PUSH
64018: LD_INT 1
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 2
64027: NEG
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 2
64038: NEG
64039: PUSH
64040: LD_INT 1
64042: NEG
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 2
64050: NEG
64051: PUSH
64052: LD_INT 2
64054: NEG
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64081: LD_ADDR_VAR 0 59
64085: PUSH
64086: LD_INT 0
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: LD_INT 1
64101: NEG
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 1
64109: PUSH
64110: LD_INT 0
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 1
64119: PUSH
64120: LD_INT 1
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: LD_INT 1
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 1
64139: NEG
64140: PUSH
64141: LD_INT 0
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 1
64150: NEG
64151: PUSH
64152: LD_INT 1
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64169: LD_ADDR_VAR 0 60
64173: PUSH
64174: LD_INT 0
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: LD_INT 1
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 1
64197: PUSH
64198: LD_INT 0
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: LD_INT 1
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 1
64227: NEG
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: LD_INT 1
64242: NEG
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64257: LD_ADDR_VAR 0 61
64261: PUSH
64262: LD_INT 0
64264: PUSH
64265: LD_INT 0
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: LD_INT 1
64277: NEG
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 1
64285: PUSH
64286: LD_INT 0
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 1
64295: PUSH
64296: LD_INT 1
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 0
64305: PUSH
64306: LD_INT 1
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 1
64315: NEG
64316: PUSH
64317: LD_INT 0
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 1
64326: NEG
64327: PUSH
64328: LD_INT 1
64330: NEG
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64345: LD_ADDR_VAR 0 62
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: LD_INT 0
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: LD_INT 1
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 1
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 1
64383: PUSH
64384: LD_INT 1
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: LD_INT 1
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 1
64403: NEG
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 1
64414: NEG
64415: PUSH
64416: LD_INT 1
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64433: LD_ADDR_VAR 0 63
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 1
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 0
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: NEG
64492: PUSH
64493: LD_INT 0
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 1
64502: NEG
64503: PUSH
64504: LD_INT 1
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64521: LD_ADDR_VAR 0 64
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 1
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 1
64559: PUSH
64560: LD_INT 1
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: LD_INT 1
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: ST_TO_ADDR
// end ; 1 :
64609: GO 70506
64611: LD_INT 1
64613: DOUBLE
64614: EQUAL
64615: IFTRUE 64619
64617: GO 67242
64619: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64620: LD_ADDR_VAR 0 11
64624: PUSH
64625: LD_INT 1
64627: NEG
64628: PUSH
64629: LD_INT 3
64631: NEG
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 0
64639: PUSH
64640: LD_INT 3
64642: NEG
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: LD_INT 2
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: LIST
64663: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64664: LD_ADDR_VAR 0 12
64668: PUSH
64669: LD_INT 2
64671: PUSH
64672: LD_INT 1
64674: NEG
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 3
64682: PUSH
64683: LD_INT 0
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 3
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: LIST
64704: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64705: LD_ADDR_VAR 0 13
64709: PUSH
64710: LD_INT 3
64712: PUSH
64713: LD_INT 2
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 3
64722: PUSH
64723: LD_INT 3
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 2
64732: PUSH
64733: LD_INT 3
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: LIST
64744: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64745: LD_ADDR_VAR 0 14
64749: PUSH
64750: LD_INT 1
64752: PUSH
64753: LD_INT 3
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: LD_INT 3
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 1
64772: NEG
64773: PUSH
64774: LD_INT 2
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: LIST
64785: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64786: LD_ADDR_VAR 0 15
64790: PUSH
64791: LD_INT 2
64793: NEG
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 3
64804: NEG
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 3
64815: NEG
64816: PUSH
64817: LD_INT 1
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: LIST
64829: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64830: LD_ADDR_VAR 0 16
64834: PUSH
64835: LD_INT 2
64837: NEG
64838: PUSH
64839: LD_INT 3
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 3
64849: NEG
64850: PUSH
64851: LD_INT 2
64853: NEG
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 3
64861: NEG
64862: PUSH
64863: LD_INT 3
64865: NEG
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: LIST
64875: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64876: LD_ADDR_VAR 0 17
64880: PUSH
64881: LD_INT 1
64883: NEG
64884: PUSH
64885: LD_INT 3
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 0
64895: PUSH
64896: LD_INT 3
64898: NEG
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: LD_INT 2
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: LIST
64919: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64920: LD_ADDR_VAR 0 18
64924: PUSH
64925: LD_INT 2
64927: PUSH
64928: LD_INT 1
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 3
64938: PUSH
64939: LD_INT 0
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 3
64948: PUSH
64949: LD_INT 1
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: LIST
64960: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64961: LD_ADDR_VAR 0 19
64965: PUSH
64966: LD_INT 3
64968: PUSH
64969: LD_INT 2
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 3
64978: PUSH
64979: LD_INT 3
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 2
64988: PUSH
64989: LD_INT 3
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: LIST
65000: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65001: LD_ADDR_VAR 0 20
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: LD_INT 3
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 0
65018: PUSH
65019: LD_INT 3
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 1
65028: NEG
65029: PUSH
65030: LD_INT 2
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: LIST
65041: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65042: LD_ADDR_VAR 0 21
65046: PUSH
65047: LD_INT 2
65049: NEG
65050: PUSH
65051: LD_INT 1
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 3
65060: NEG
65061: PUSH
65062: LD_INT 0
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 3
65071: NEG
65072: PUSH
65073: LD_INT 1
65075: NEG
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: LIST
65085: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65086: LD_ADDR_VAR 0 22
65090: PUSH
65091: LD_INT 2
65093: NEG
65094: PUSH
65095: LD_INT 3
65097: NEG
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 3
65105: NEG
65106: PUSH
65107: LD_INT 2
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 3
65117: NEG
65118: PUSH
65119: LD_INT 3
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: LIST
65131: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65132: LD_ADDR_VAR 0 23
65136: PUSH
65137: LD_INT 0
65139: PUSH
65140: LD_INT 3
65142: NEG
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: LD_INT 4
65154: NEG
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 1
65162: PUSH
65163: LD_INT 3
65165: NEG
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: LIST
65175: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65176: LD_ADDR_VAR 0 24
65180: PUSH
65181: LD_INT 3
65183: PUSH
65184: LD_INT 0
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 3
65193: PUSH
65194: LD_INT 1
65196: NEG
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 4
65204: PUSH
65205: LD_INT 1
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: LIST
65216: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65217: LD_ADDR_VAR 0 25
65221: PUSH
65222: LD_INT 3
65224: PUSH
65225: LD_INT 3
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 4
65234: PUSH
65235: LD_INT 3
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 3
65244: PUSH
65245: LD_INT 4
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: LIST
65256: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65257: LD_ADDR_VAR 0 26
65261: PUSH
65262: LD_INT 0
65264: PUSH
65265: LD_INT 3
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: LD_INT 4
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 1
65284: NEG
65285: PUSH
65286: LD_INT 3
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65298: LD_ADDR_VAR 0 27
65302: PUSH
65303: LD_INT 3
65305: NEG
65306: PUSH
65307: LD_INT 0
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 3
65316: NEG
65317: PUSH
65318: LD_INT 1
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 4
65327: NEG
65328: PUSH
65329: LD_INT 1
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: LIST
65341: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65342: LD_ADDR_VAR 0 28
65346: PUSH
65347: LD_INT 3
65349: NEG
65350: PUSH
65351: LD_INT 3
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 3
65361: NEG
65362: PUSH
65363: LD_INT 4
65365: NEG
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 4
65373: NEG
65374: PUSH
65375: LD_INT 3
65377: NEG
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: LIST
65387: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65388: LD_ADDR_VAR 0 29
65392: PUSH
65393: LD_INT 1
65395: NEG
65396: PUSH
65397: LD_INT 3
65399: NEG
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: LD_INT 3
65410: NEG
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 1
65418: PUSH
65419: LD_INT 2
65421: NEG
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 1
65429: NEG
65430: PUSH
65431: LD_INT 4
65433: NEG
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: LD_INT 4
65444: NEG
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 1
65452: PUSH
65453: LD_INT 3
65455: NEG
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 1
65463: NEG
65464: PUSH
65465: LD_INT 5
65467: NEG
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 0
65475: PUSH
65476: LD_INT 5
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 1
65486: PUSH
65487: LD_INT 4
65489: NEG
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 1
65497: NEG
65498: PUSH
65499: LD_INT 6
65501: NEG
65502: PUSH
65503: EMPTY
65504: LIST
65505: LIST
65506: PUSH
65507: LD_INT 0
65509: PUSH
65510: LD_INT 6
65512: NEG
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 1
65520: PUSH
65521: LD_INT 5
65523: NEG
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65543: LD_ADDR_VAR 0 30
65547: PUSH
65548: LD_INT 2
65550: PUSH
65551: LD_INT 1
65553: NEG
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 3
65561: PUSH
65562: LD_INT 0
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 3
65571: PUSH
65572: LD_INT 1
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 3
65581: PUSH
65582: LD_INT 1
65584: NEG
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 4
65592: PUSH
65593: LD_INT 0
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 4
65602: PUSH
65603: LD_INT 1
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 4
65612: PUSH
65613: LD_INT 1
65615: NEG
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 5
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 5
65633: PUSH
65634: LD_INT 1
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: PUSH
65641: LD_INT 5
65643: PUSH
65644: LD_INT 1
65646: NEG
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PUSH
65652: LD_INT 6
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 6
65664: PUSH
65665: LD_INT 1
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65686: LD_ADDR_VAR 0 31
65690: PUSH
65691: LD_INT 3
65693: PUSH
65694: LD_INT 2
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 3
65703: PUSH
65704: LD_INT 3
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 2
65713: PUSH
65714: LD_INT 3
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 4
65723: PUSH
65724: LD_INT 3
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 4
65733: PUSH
65734: LD_INT 4
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 3
65743: PUSH
65744: LD_INT 4
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 5
65753: PUSH
65754: LD_INT 4
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 5
65763: PUSH
65764: LD_INT 5
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 4
65773: PUSH
65774: LD_INT 5
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 6
65783: PUSH
65784: LD_INT 5
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 6
65793: PUSH
65794: LD_INT 6
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 5
65803: PUSH
65804: LD_INT 6
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65825: LD_ADDR_VAR 0 32
65829: PUSH
65830: LD_INT 1
65832: PUSH
65833: LD_INT 3
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 0
65842: PUSH
65843: LD_INT 3
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 1
65852: NEG
65853: PUSH
65854: LD_INT 2
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 1
65863: PUSH
65864: LD_INT 4
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: LD_INT 4
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 1
65883: NEG
65884: PUSH
65885: LD_INT 3
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 1
65894: PUSH
65895: LD_INT 5
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 0
65904: PUSH
65905: LD_INT 5
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 1
65914: NEG
65915: PUSH
65916: LD_INT 4
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 1
65925: PUSH
65926: LD_INT 6
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: LD_INT 6
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 1
65945: NEG
65946: PUSH
65947: LD_INT 5
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65968: LD_ADDR_VAR 0 33
65972: PUSH
65973: LD_INT 2
65975: NEG
65976: PUSH
65977: LD_INT 1
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 3
65986: NEG
65987: PUSH
65988: LD_INT 0
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 3
65997: NEG
65998: PUSH
65999: LD_INT 1
66001: NEG
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 3
66009: NEG
66010: PUSH
66011: LD_INT 1
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 4
66020: NEG
66021: PUSH
66022: LD_INT 0
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 4
66031: NEG
66032: PUSH
66033: LD_INT 1
66035: NEG
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 4
66043: NEG
66044: PUSH
66045: LD_INT 1
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 5
66054: NEG
66055: PUSH
66056: LD_INT 0
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 5
66065: NEG
66066: PUSH
66067: LD_INT 1
66069: NEG
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 5
66077: NEG
66078: PUSH
66079: LD_INT 1
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 6
66088: NEG
66089: PUSH
66090: LD_INT 0
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 6
66099: NEG
66100: PUSH
66101: LD_INT 1
66103: NEG
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66123: LD_ADDR_VAR 0 34
66127: PUSH
66128: LD_INT 2
66130: NEG
66131: PUSH
66132: LD_INT 3
66134: NEG
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 3
66142: NEG
66143: PUSH
66144: LD_INT 2
66146: NEG
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 3
66154: NEG
66155: PUSH
66156: LD_INT 3
66158: NEG
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 3
66166: NEG
66167: PUSH
66168: LD_INT 4
66170: NEG
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 4
66178: NEG
66179: PUSH
66180: LD_INT 3
66182: NEG
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: PUSH
66188: LD_INT 4
66190: NEG
66191: PUSH
66192: LD_INT 4
66194: NEG
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 4
66202: NEG
66203: PUSH
66204: LD_INT 5
66206: NEG
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 5
66214: NEG
66215: PUSH
66216: LD_INT 4
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 5
66226: NEG
66227: PUSH
66228: LD_INT 5
66230: NEG
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 5
66238: NEG
66239: PUSH
66240: LD_INT 6
66242: NEG
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 6
66250: NEG
66251: PUSH
66252: LD_INT 5
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 6
66262: NEG
66263: PUSH
66264: LD_INT 6
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66286: LD_ADDR_VAR 0 41
66290: PUSH
66291: LD_INT 0
66293: PUSH
66294: LD_INT 2
66296: NEG
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 1
66304: NEG
66305: PUSH
66306: LD_INT 3
66308: NEG
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 1
66316: PUSH
66317: LD_INT 2
66319: NEG
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: LIST
66329: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66330: LD_ADDR_VAR 0 42
66334: PUSH
66335: LD_INT 2
66337: PUSH
66338: LD_INT 0
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 2
66347: PUSH
66348: LD_INT 1
66350: NEG
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 3
66358: PUSH
66359: LD_INT 1
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: LIST
66370: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66371: LD_ADDR_VAR 0 43
66375: PUSH
66376: LD_INT 2
66378: PUSH
66379: LD_INT 2
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 3
66388: PUSH
66389: LD_INT 2
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 2
66398: PUSH
66399: LD_INT 3
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: LIST
66410: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66411: LD_ADDR_VAR 0 44
66415: PUSH
66416: LD_INT 0
66418: PUSH
66419: LD_INT 2
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 1
66428: PUSH
66429: LD_INT 3
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 1
66438: NEG
66439: PUSH
66440: LD_INT 2
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: LIST
66451: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66452: LD_ADDR_VAR 0 45
66456: PUSH
66457: LD_INT 2
66459: NEG
66460: PUSH
66461: LD_INT 0
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 2
66470: NEG
66471: PUSH
66472: LD_INT 1
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 3
66481: NEG
66482: PUSH
66483: LD_INT 1
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: LIST
66495: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66496: LD_ADDR_VAR 0 46
66500: PUSH
66501: LD_INT 2
66503: NEG
66504: PUSH
66505: LD_INT 2
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 2
66515: NEG
66516: PUSH
66517: LD_INT 3
66519: NEG
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 3
66527: NEG
66528: PUSH
66529: LD_INT 2
66531: NEG
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: LIST
66541: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66542: LD_ADDR_VAR 0 47
66546: PUSH
66547: LD_INT 2
66549: NEG
66550: PUSH
66551: LD_INT 3
66553: NEG
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 1
66561: NEG
66562: PUSH
66563: LD_INT 3
66565: NEG
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66575: LD_ADDR_VAR 0 48
66579: PUSH
66580: LD_INT 1
66582: PUSH
66583: LD_INT 2
66585: NEG
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 2
66593: PUSH
66594: LD_INT 1
66596: NEG
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66606: LD_ADDR_VAR 0 49
66610: PUSH
66611: LD_INT 3
66613: PUSH
66614: LD_INT 1
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 3
66623: PUSH
66624: LD_INT 2
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66635: LD_ADDR_VAR 0 50
66639: PUSH
66640: LD_INT 2
66642: PUSH
66643: LD_INT 3
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 1
66652: PUSH
66653: LD_INT 3
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66664: LD_ADDR_VAR 0 51
66668: PUSH
66669: LD_INT 1
66671: NEG
66672: PUSH
66673: LD_INT 2
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 2
66682: NEG
66683: PUSH
66684: LD_INT 1
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66695: LD_ADDR_VAR 0 52
66699: PUSH
66700: LD_INT 3
66702: NEG
66703: PUSH
66704: LD_INT 1
66706: NEG
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 3
66714: NEG
66715: PUSH
66716: LD_INT 2
66718: NEG
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66728: LD_ADDR_VAR 0 53
66732: PUSH
66733: LD_INT 1
66735: NEG
66736: PUSH
66737: LD_INT 3
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 0
66747: PUSH
66748: LD_INT 3
66750: NEG
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 1
66758: PUSH
66759: LD_INT 2
66761: NEG
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: LIST
66771: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66772: LD_ADDR_VAR 0 54
66776: PUSH
66777: LD_INT 2
66779: PUSH
66780: LD_INT 1
66782: NEG
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 3
66790: PUSH
66791: LD_INT 0
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 3
66800: PUSH
66801: LD_INT 1
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: LIST
66812: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66813: LD_ADDR_VAR 0 55
66817: PUSH
66818: LD_INT 3
66820: PUSH
66821: LD_INT 2
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 3
66830: PUSH
66831: LD_INT 3
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 2
66840: PUSH
66841: LD_INT 3
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: LIST
66852: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66853: LD_ADDR_VAR 0 56
66857: PUSH
66858: LD_INT 1
66860: PUSH
66861: LD_INT 3
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 0
66870: PUSH
66871: LD_INT 3
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 1
66880: NEG
66881: PUSH
66882: LD_INT 2
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: LIST
66893: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66894: LD_ADDR_VAR 0 57
66898: PUSH
66899: LD_INT 2
66901: NEG
66902: PUSH
66903: LD_INT 1
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 3
66912: NEG
66913: PUSH
66914: LD_INT 0
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 3
66923: NEG
66924: PUSH
66925: LD_INT 1
66927: NEG
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: LIST
66937: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66938: LD_ADDR_VAR 0 58
66942: PUSH
66943: LD_INT 2
66945: NEG
66946: PUSH
66947: LD_INT 3
66949: NEG
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 3
66957: NEG
66958: PUSH
66959: LD_INT 2
66961: NEG
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 3
66969: NEG
66970: PUSH
66971: LD_INT 3
66973: NEG
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: LIST
66983: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66984: LD_ADDR_VAR 0 59
66988: PUSH
66989: LD_INT 1
66991: NEG
66992: PUSH
66993: LD_INT 2
66995: NEG
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 0
67003: PUSH
67004: LD_INT 2
67006: NEG
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 1
67014: PUSH
67015: LD_INT 1
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: LIST
67027: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67028: LD_ADDR_VAR 0 60
67032: PUSH
67033: LD_INT 1
67035: PUSH
67036: LD_INT 1
67038: NEG
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: LD_INT 2
67046: PUSH
67047: LD_INT 0
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 2
67056: PUSH
67057: LD_INT 1
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: LIST
67068: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67069: LD_ADDR_VAR 0 61
67073: PUSH
67074: LD_INT 2
67076: PUSH
67077: LD_INT 1
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 2
67086: PUSH
67087: LD_INT 2
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 1
67096: PUSH
67097: LD_INT 2
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: LIST
67108: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67109: LD_ADDR_VAR 0 62
67113: PUSH
67114: LD_INT 1
67116: PUSH
67117: LD_INT 2
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 0
67126: PUSH
67127: LD_INT 2
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 1
67136: NEG
67137: PUSH
67138: LD_INT 1
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: LIST
67149: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67150: LD_ADDR_VAR 0 63
67154: PUSH
67155: LD_INT 1
67157: NEG
67158: PUSH
67159: LD_INT 1
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 2
67168: NEG
67169: PUSH
67170: LD_INT 0
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 2
67179: NEG
67180: PUSH
67181: LD_INT 1
67183: NEG
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: LIST
67193: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67194: LD_ADDR_VAR 0 64
67198: PUSH
67199: LD_INT 1
67201: NEG
67202: PUSH
67203: LD_INT 2
67205: NEG
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 2
67213: NEG
67214: PUSH
67215: LD_INT 1
67217: NEG
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 2
67225: NEG
67226: PUSH
67227: LD_INT 2
67229: NEG
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: LIST
67239: ST_TO_ADDR
// end ; 2 :
67240: GO 70506
67242: LD_INT 2
67244: DOUBLE
67245: EQUAL
67246: IFTRUE 67250
67248: GO 70505
67250: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67251: LD_ADDR_VAR 0 29
67255: PUSH
67256: LD_INT 4
67258: PUSH
67259: LD_INT 0
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 4
67268: PUSH
67269: LD_INT 1
67271: NEG
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 5
67279: PUSH
67280: LD_INT 0
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 5
67289: PUSH
67290: LD_INT 1
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 4
67299: PUSH
67300: LD_INT 1
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 3
67309: PUSH
67310: LD_INT 0
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 3
67319: PUSH
67320: LD_INT 1
67322: NEG
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 3
67330: PUSH
67331: LD_INT 2
67333: NEG
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 5
67341: PUSH
67342: LD_INT 2
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 3
67351: PUSH
67352: LD_INT 3
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 3
67361: PUSH
67362: LD_INT 2
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 4
67371: PUSH
67372: LD_INT 3
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 4
67381: PUSH
67382: LD_INT 4
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 3
67391: PUSH
67392: LD_INT 4
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 2
67401: PUSH
67402: LD_INT 3
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 2
67411: PUSH
67412: LD_INT 2
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 4
67421: PUSH
67422: LD_INT 2
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 2
67431: PUSH
67432: LD_INT 4
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 0
67441: PUSH
67442: LD_INT 4
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 0
67451: PUSH
67452: LD_INT 3
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 1
67461: PUSH
67462: LD_INT 4
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 1
67471: PUSH
67472: LD_INT 5
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 0
67481: PUSH
67482: LD_INT 5
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 1
67491: NEG
67492: PUSH
67493: LD_INT 4
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 1
67502: NEG
67503: PUSH
67504: LD_INT 3
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 2
67513: PUSH
67514: LD_INT 5
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 2
67523: NEG
67524: PUSH
67525: LD_INT 3
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 3
67534: NEG
67535: PUSH
67536: LD_INT 0
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 3
67545: NEG
67546: PUSH
67547: LD_INT 1
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 2
67557: NEG
67558: PUSH
67559: LD_INT 0
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 2
67568: NEG
67569: PUSH
67570: LD_INT 1
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 3
67579: NEG
67580: PUSH
67581: LD_INT 1
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 4
67590: NEG
67591: PUSH
67592: LD_INT 0
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 4
67601: NEG
67602: PUSH
67603: LD_INT 1
67605: NEG
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 4
67613: NEG
67614: PUSH
67615: LD_INT 2
67617: NEG
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 2
67625: NEG
67626: PUSH
67627: LD_INT 2
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 4
67636: NEG
67637: PUSH
67638: LD_INT 4
67640: NEG
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 4
67648: NEG
67649: PUSH
67650: LD_INT 5
67652: NEG
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 3
67660: NEG
67661: PUSH
67662: LD_INT 4
67664: NEG
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 3
67672: NEG
67673: PUSH
67674: LD_INT 3
67676: NEG
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 4
67684: NEG
67685: PUSH
67686: LD_INT 3
67688: NEG
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 5
67696: NEG
67697: PUSH
67698: LD_INT 4
67700: NEG
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 5
67708: NEG
67709: PUSH
67710: LD_INT 5
67712: NEG
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 3
67720: NEG
67721: PUSH
67722: LD_INT 5
67724: NEG
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 5
67732: NEG
67733: PUSH
67734: LD_INT 3
67736: NEG
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67789: LD_ADDR_VAR 0 30
67793: PUSH
67794: LD_INT 4
67796: PUSH
67797: LD_INT 4
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 4
67806: PUSH
67807: LD_INT 3
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 5
67816: PUSH
67817: LD_INT 4
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 5
67826: PUSH
67827: LD_INT 5
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 4
67836: PUSH
67837: LD_INT 5
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 3
67846: PUSH
67847: LD_INT 4
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 3
67856: PUSH
67857: LD_INT 3
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 5
67866: PUSH
67867: LD_INT 3
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 3
67876: PUSH
67877: LD_INT 5
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 0
67886: PUSH
67887: LD_INT 3
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 0
67896: PUSH
67897: LD_INT 2
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 1
67906: PUSH
67907: LD_INT 3
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 1
67916: PUSH
67917: LD_INT 4
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: LD_INT 0
67926: PUSH
67927: LD_INT 4
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: LD_INT 1
67936: NEG
67937: PUSH
67938: LD_INT 3
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 1
67947: NEG
67948: PUSH
67949: LD_INT 2
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 2
67958: PUSH
67959: LD_INT 4
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 2
67968: NEG
67969: PUSH
67970: LD_INT 2
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 4
67979: NEG
67980: PUSH
67981: LD_INT 0
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 4
67990: NEG
67991: PUSH
67992: LD_INT 1
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 3
68002: NEG
68003: PUSH
68004: LD_INT 0
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 3
68013: NEG
68014: PUSH
68015: LD_INT 1
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 4
68024: NEG
68025: PUSH
68026: LD_INT 1
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 5
68035: NEG
68036: PUSH
68037: LD_INT 0
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: LD_INT 5
68046: NEG
68047: PUSH
68048: LD_INT 1
68050: NEG
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 5
68058: NEG
68059: PUSH
68060: LD_INT 2
68062: NEG
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 3
68070: NEG
68071: PUSH
68072: LD_INT 2
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 3
68081: NEG
68082: PUSH
68083: LD_INT 3
68085: NEG
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 3
68093: NEG
68094: PUSH
68095: LD_INT 4
68097: NEG
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 2
68105: NEG
68106: PUSH
68107: LD_INT 3
68109: NEG
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 2
68117: NEG
68118: PUSH
68119: LD_INT 2
68121: NEG
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 3
68129: NEG
68130: PUSH
68131: LD_INT 2
68133: NEG
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 4
68141: NEG
68142: PUSH
68143: LD_INT 3
68145: NEG
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 4
68153: NEG
68154: PUSH
68155: LD_INT 4
68157: NEG
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 2
68165: NEG
68166: PUSH
68167: LD_INT 4
68169: NEG
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 4
68177: NEG
68178: PUSH
68179: LD_INT 2
68181: NEG
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 0
68189: PUSH
68190: LD_INT 4
68192: NEG
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 0
68200: PUSH
68201: LD_INT 5
68203: NEG
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 1
68211: PUSH
68212: LD_INT 4
68214: NEG
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 1
68222: PUSH
68223: LD_INT 3
68225: NEG
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 0
68233: PUSH
68234: LD_INT 3
68236: NEG
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 1
68244: NEG
68245: PUSH
68246: LD_INT 4
68248: NEG
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 1
68256: NEG
68257: PUSH
68258: LD_INT 5
68260: NEG
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 2
68268: PUSH
68269: LD_INT 3
68271: NEG
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 2
68279: NEG
68280: PUSH
68281: LD_INT 5
68283: NEG
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: LIST
68305: LIST
68306: LIST
68307: LIST
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68336: LD_ADDR_VAR 0 31
68340: PUSH
68341: LD_INT 0
68343: PUSH
68344: LD_INT 4
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 0
68353: PUSH
68354: LD_INT 3
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 1
68363: PUSH
68364: LD_INT 4
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 1
68373: PUSH
68374: LD_INT 5
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 0
68383: PUSH
68384: LD_INT 5
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 1
68393: NEG
68394: PUSH
68395: LD_INT 4
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 1
68404: NEG
68405: PUSH
68406: LD_INT 3
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 2
68415: PUSH
68416: LD_INT 5
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 2
68425: NEG
68426: PUSH
68427: LD_INT 3
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 3
68436: NEG
68437: PUSH
68438: LD_INT 0
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 3
68447: NEG
68448: PUSH
68449: LD_INT 1
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 2
68459: NEG
68460: PUSH
68461: LD_INT 0
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 2
68470: NEG
68471: PUSH
68472: LD_INT 1
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 3
68481: NEG
68482: PUSH
68483: LD_INT 1
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 4
68492: NEG
68493: PUSH
68494: LD_INT 0
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 4
68503: NEG
68504: PUSH
68505: LD_INT 1
68507: NEG
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 4
68515: NEG
68516: PUSH
68517: LD_INT 2
68519: NEG
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 2
68527: NEG
68528: PUSH
68529: LD_INT 2
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 4
68538: NEG
68539: PUSH
68540: LD_INT 4
68542: NEG
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 4
68550: NEG
68551: PUSH
68552: LD_INT 5
68554: NEG
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 3
68562: NEG
68563: PUSH
68564: LD_INT 4
68566: NEG
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 3
68574: NEG
68575: PUSH
68576: LD_INT 3
68578: NEG
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 4
68586: NEG
68587: PUSH
68588: LD_INT 3
68590: NEG
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 5
68598: NEG
68599: PUSH
68600: LD_INT 4
68602: NEG
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 5
68610: NEG
68611: PUSH
68612: LD_INT 5
68614: NEG
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 3
68622: NEG
68623: PUSH
68624: LD_INT 5
68626: NEG
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 5
68634: NEG
68635: PUSH
68636: LD_INT 3
68638: NEG
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 0
68646: PUSH
68647: LD_INT 3
68649: NEG
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 0
68657: PUSH
68658: LD_INT 4
68660: NEG
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 1
68668: PUSH
68669: LD_INT 3
68671: NEG
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 1
68679: PUSH
68680: LD_INT 2
68682: NEG
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 0
68690: PUSH
68691: LD_INT 2
68693: NEG
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 1
68701: NEG
68702: PUSH
68703: LD_INT 3
68705: NEG
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 1
68713: NEG
68714: PUSH
68715: LD_INT 4
68717: NEG
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 2
68725: PUSH
68726: LD_INT 2
68728: NEG
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 2
68736: NEG
68737: PUSH
68738: LD_INT 4
68740: NEG
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 4
68748: PUSH
68749: LD_INT 0
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 4
68758: PUSH
68759: LD_INT 1
68761: NEG
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: PUSH
68767: LD_INT 5
68769: PUSH
68770: LD_INT 0
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 5
68779: PUSH
68780: LD_INT 1
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 4
68789: PUSH
68790: LD_INT 1
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 3
68799: PUSH
68800: LD_INT 0
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 3
68809: PUSH
68810: LD_INT 1
68812: NEG
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: PUSH
68818: LD_INT 3
68820: PUSH
68821: LD_INT 2
68823: NEG
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 5
68831: PUSH
68832: LD_INT 2
68834: PUSH
68835: EMPTY
68836: LIST
68837: LIST
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68886: LD_ADDR_VAR 0 32
68890: PUSH
68891: LD_INT 4
68893: NEG
68894: PUSH
68895: LD_INT 0
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 4
68904: NEG
68905: PUSH
68906: LD_INT 1
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 3
68916: NEG
68917: PUSH
68918: LD_INT 0
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 3
68927: NEG
68928: PUSH
68929: LD_INT 1
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 4
68938: NEG
68939: PUSH
68940: LD_INT 1
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 5
68949: NEG
68950: PUSH
68951: LD_INT 0
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 5
68960: NEG
68961: PUSH
68962: LD_INT 1
68964: NEG
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 5
68972: NEG
68973: PUSH
68974: LD_INT 2
68976: NEG
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 3
68984: NEG
68985: PUSH
68986: LD_INT 2
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 3
68995: NEG
68996: PUSH
68997: LD_INT 3
68999: NEG
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 3
69007: NEG
69008: PUSH
69009: LD_INT 4
69011: NEG
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 2
69019: NEG
69020: PUSH
69021: LD_INT 3
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 2
69031: NEG
69032: PUSH
69033: LD_INT 2
69035: NEG
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 3
69043: NEG
69044: PUSH
69045: LD_INT 2
69047: NEG
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 4
69055: NEG
69056: PUSH
69057: LD_INT 3
69059: NEG
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 4
69067: NEG
69068: PUSH
69069: LD_INT 4
69071: NEG
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 2
69079: NEG
69080: PUSH
69081: LD_INT 4
69083: NEG
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 4
69091: NEG
69092: PUSH
69093: LD_INT 2
69095: NEG
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 0
69103: PUSH
69104: LD_INT 4
69106: NEG
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 0
69114: PUSH
69115: LD_INT 5
69117: NEG
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 1
69125: PUSH
69126: LD_INT 4
69128: NEG
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 1
69136: PUSH
69137: LD_INT 3
69139: NEG
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 0
69147: PUSH
69148: LD_INT 3
69150: NEG
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: LD_INT 1
69158: NEG
69159: PUSH
69160: LD_INT 4
69162: NEG
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 1
69170: NEG
69171: PUSH
69172: LD_INT 5
69174: NEG
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: LD_INT 2
69182: PUSH
69183: LD_INT 3
69185: NEG
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: LD_INT 2
69193: NEG
69194: PUSH
69195: LD_INT 5
69197: NEG
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 3
69205: PUSH
69206: LD_INT 0
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 3
69215: PUSH
69216: LD_INT 1
69218: NEG
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 4
69226: PUSH
69227: LD_INT 0
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 4
69236: PUSH
69237: LD_INT 1
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 3
69246: PUSH
69247: LD_INT 1
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 2
69256: PUSH
69257: LD_INT 0
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 2
69266: PUSH
69267: LD_INT 1
69269: NEG
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 2
69277: PUSH
69278: LD_INT 2
69280: NEG
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 4
69288: PUSH
69289: LD_INT 2
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 4
69298: PUSH
69299: LD_INT 4
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 4
69308: PUSH
69309: LD_INT 3
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 5
69318: PUSH
69319: LD_INT 4
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 5
69328: PUSH
69329: LD_INT 5
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 4
69338: PUSH
69339: LD_INT 5
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 3
69348: PUSH
69349: LD_INT 4
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 3
69358: PUSH
69359: LD_INT 3
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 5
69368: PUSH
69369: LD_INT 3
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 3
69378: PUSH
69379: LD_INT 5
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69433: LD_ADDR_VAR 0 33
69437: PUSH
69438: LD_INT 4
69440: NEG
69441: PUSH
69442: LD_INT 4
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 4
69452: NEG
69453: PUSH
69454: LD_INT 5
69456: NEG
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 3
69464: NEG
69465: PUSH
69466: LD_INT 4
69468: NEG
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 3
69476: NEG
69477: PUSH
69478: LD_INT 3
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 4
69488: NEG
69489: PUSH
69490: LD_INT 3
69492: NEG
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 5
69500: NEG
69501: PUSH
69502: LD_INT 4
69504: NEG
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 5
69512: NEG
69513: PUSH
69514: LD_INT 5
69516: NEG
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 3
69524: NEG
69525: PUSH
69526: LD_INT 5
69528: NEG
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 5
69536: NEG
69537: PUSH
69538: LD_INT 3
69540: NEG
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 0
69548: PUSH
69549: LD_INT 3
69551: NEG
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 0
69559: PUSH
69560: LD_INT 4
69562: NEG
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 1
69570: PUSH
69571: LD_INT 3
69573: NEG
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 1
69581: PUSH
69582: LD_INT 2
69584: NEG
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 0
69592: PUSH
69593: LD_INT 2
69595: NEG
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 1
69603: NEG
69604: PUSH
69605: LD_INT 3
69607: NEG
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 1
69615: NEG
69616: PUSH
69617: LD_INT 4
69619: NEG
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 2
69627: PUSH
69628: LD_INT 2
69630: NEG
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 2
69638: NEG
69639: PUSH
69640: LD_INT 4
69642: NEG
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 4
69650: PUSH
69651: LD_INT 0
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 4
69660: PUSH
69661: LD_INT 1
69663: NEG
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 5
69671: PUSH
69672: LD_INT 0
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 5
69681: PUSH
69682: LD_INT 1
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 4
69691: PUSH
69692: LD_INT 1
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 3
69701: PUSH
69702: LD_INT 0
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 3
69711: PUSH
69712: LD_INT 1
69714: NEG
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 3
69722: PUSH
69723: LD_INT 2
69725: NEG
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 5
69733: PUSH
69734: LD_INT 2
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 3
69743: PUSH
69744: LD_INT 3
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 3
69753: PUSH
69754: LD_INT 2
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 4
69763: PUSH
69764: LD_INT 3
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 4
69773: PUSH
69774: LD_INT 4
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 3
69783: PUSH
69784: LD_INT 4
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 2
69793: PUSH
69794: LD_INT 3
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 2
69803: PUSH
69804: LD_INT 2
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 4
69813: PUSH
69814: LD_INT 2
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 2
69823: PUSH
69824: LD_INT 4
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 0
69833: PUSH
69834: LD_INT 4
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 0
69843: PUSH
69844: LD_INT 3
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 1
69853: PUSH
69854: LD_INT 4
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 1
69863: PUSH
69864: LD_INT 5
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 0
69873: PUSH
69874: LD_INT 5
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 1
69883: NEG
69884: PUSH
69885: LD_INT 4
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 1
69894: NEG
69895: PUSH
69896: LD_INT 3
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 2
69905: PUSH
69906: LD_INT 5
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 2
69915: NEG
69916: PUSH
69917: LD_INT 3
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69971: LD_ADDR_VAR 0 34
69975: PUSH
69976: LD_INT 0
69978: PUSH
69979: LD_INT 4
69981: NEG
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 0
69989: PUSH
69990: LD_INT 5
69992: NEG
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 1
70000: PUSH
70001: LD_INT 4
70003: NEG
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 1
70011: PUSH
70012: LD_INT 3
70014: NEG
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 0
70022: PUSH
70023: LD_INT 3
70025: NEG
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 1
70033: NEG
70034: PUSH
70035: LD_INT 4
70037: NEG
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: PUSH
70043: LD_INT 1
70045: NEG
70046: PUSH
70047: LD_INT 5
70049: NEG
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: LD_INT 2
70057: PUSH
70058: LD_INT 3
70060: NEG
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: PUSH
70066: LD_INT 2
70068: NEG
70069: PUSH
70070: LD_INT 5
70072: NEG
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_INT 3
70080: PUSH
70081: LD_INT 0
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 3
70090: PUSH
70091: LD_INT 1
70093: NEG
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 4
70101: PUSH
70102: LD_INT 0
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 4
70111: PUSH
70112: LD_INT 1
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 3
70121: PUSH
70122: LD_INT 1
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 2
70131: PUSH
70132: LD_INT 0
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 2
70141: PUSH
70142: LD_INT 1
70144: NEG
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 2
70152: PUSH
70153: LD_INT 2
70155: NEG
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 4
70163: PUSH
70164: LD_INT 2
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 4
70173: PUSH
70174: LD_INT 4
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 4
70183: PUSH
70184: LD_INT 3
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 5
70193: PUSH
70194: LD_INT 4
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 5
70203: PUSH
70204: LD_INT 5
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 4
70213: PUSH
70214: LD_INT 5
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 3
70223: PUSH
70224: LD_INT 4
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 3
70233: PUSH
70234: LD_INT 3
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 5
70243: PUSH
70244: LD_INT 3
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 3
70253: PUSH
70254: LD_INT 5
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 0
70263: PUSH
70264: LD_INT 3
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 0
70273: PUSH
70274: LD_INT 2
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 1
70283: PUSH
70284: LD_INT 3
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 1
70293: PUSH
70294: LD_INT 4
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 0
70303: PUSH
70304: LD_INT 4
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 1
70313: NEG
70314: PUSH
70315: LD_INT 3
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: LD_INT 1
70324: NEG
70325: PUSH
70326: LD_INT 2
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 2
70335: PUSH
70336: LD_INT 4
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 2
70345: NEG
70346: PUSH
70347: LD_INT 2
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 4
70356: NEG
70357: PUSH
70358: LD_INT 0
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 4
70367: NEG
70368: PUSH
70369: LD_INT 1
70371: NEG
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 3
70379: NEG
70380: PUSH
70381: LD_INT 0
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 3
70390: NEG
70391: PUSH
70392: LD_INT 1
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 4
70401: NEG
70402: PUSH
70403: LD_INT 1
70405: PUSH
70406: EMPTY
70407: LIST
70408: LIST
70409: PUSH
70410: LD_INT 5
70412: NEG
70413: PUSH
70414: LD_INT 0
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 5
70423: NEG
70424: PUSH
70425: LD_INT 1
70427: NEG
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 5
70435: NEG
70436: PUSH
70437: LD_INT 2
70439: NEG
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 3
70447: NEG
70448: PUSH
70449: LD_INT 2
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: ST_TO_ADDR
// end ; end ;
70503: GO 70506
70505: POP
// case btype of b_depot , b_warehouse :
70506: LD_VAR 0 1
70510: PUSH
70511: LD_INT 0
70513: DOUBLE
70514: EQUAL
70515: IFTRUE 70525
70517: LD_INT 1
70519: DOUBLE
70520: EQUAL
70521: IFTRUE 70525
70523: GO 70726
70525: POP
// case nation of nation_american :
70526: LD_VAR 0 5
70530: PUSH
70531: LD_INT 1
70533: DOUBLE
70534: EQUAL
70535: IFTRUE 70539
70537: GO 70595
70539: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70540: LD_ADDR_VAR 0 9
70544: PUSH
70545: LD_VAR 0 11
70549: PUSH
70550: LD_VAR 0 12
70554: PUSH
70555: LD_VAR 0 13
70559: PUSH
70560: LD_VAR 0 14
70564: PUSH
70565: LD_VAR 0 15
70569: PUSH
70570: LD_VAR 0 16
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: PUSH
70583: LD_VAR 0 4
70587: PUSH
70588: LD_INT 1
70590: PLUS
70591: ARRAY
70592: ST_TO_ADDR
70593: GO 70724
70595: LD_INT 2
70597: DOUBLE
70598: EQUAL
70599: IFTRUE 70603
70601: GO 70659
70603: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70604: LD_ADDR_VAR 0 9
70608: PUSH
70609: LD_VAR 0 17
70613: PUSH
70614: LD_VAR 0 18
70618: PUSH
70619: LD_VAR 0 19
70623: PUSH
70624: LD_VAR 0 20
70628: PUSH
70629: LD_VAR 0 21
70633: PUSH
70634: LD_VAR 0 22
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: PUSH
70647: LD_VAR 0 4
70651: PUSH
70652: LD_INT 1
70654: PLUS
70655: ARRAY
70656: ST_TO_ADDR
70657: GO 70724
70659: LD_INT 3
70661: DOUBLE
70662: EQUAL
70663: IFTRUE 70667
70665: GO 70723
70667: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70668: LD_ADDR_VAR 0 9
70672: PUSH
70673: LD_VAR 0 23
70677: PUSH
70678: LD_VAR 0 24
70682: PUSH
70683: LD_VAR 0 25
70687: PUSH
70688: LD_VAR 0 26
70692: PUSH
70693: LD_VAR 0 27
70697: PUSH
70698: LD_VAR 0 28
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: PUSH
70711: LD_VAR 0 4
70715: PUSH
70716: LD_INT 1
70718: PLUS
70719: ARRAY
70720: ST_TO_ADDR
70721: GO 70724
70723: POP
70724: GO 71279
70726: LD_INT 2
70728: DOUBLE
70729: EQUAL
70730: IFTRUE 70740
70732: LD_INT 3
70734: DOUBLE
70735: EQUAL
70736: IFTRUE 70740
70738: GO 70796
70740: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70741: LD_ADDR_VAR 0 9
70745: PUSH
70746: LD_VAR 0 29
70750: PUSH
70751: LD_VAR 0 30
70755: PUSH
70756: LD_VAR 0 31
70760: PUSH
70761: LD_VAR 0 32
70765: PUSH
70766: LD_VAR 0 33
70770: PUSH
70771: LD_VAR 0 34
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: PUSH
70784: LD_VAR 0 4
70788: PUSH
70789: LD_INT 1
70791: PLUS
70792: ARRAY
70793: ST_TO_ADDR
70794: GO 71279
70796: LD_INT 16
70798: DOUBLE
70799: EQUAL
70800: IFTRUE 70858
70802: LD_INT 17
70804: DOUBLE
70805: EQUAL
70806: IFTRUE 70858
70808: LD_INT 18
70810: DOUBLE
70811: EQUAL
70812: IFTRUE 70858
70814: LD_INT 19
70816: DOUBLE
70817: EQUAL
70818: IFTRUE 70858
70820: LD_INT 22
70822: DOUBLE
70823: EQUAL
70824: IFTRUE 70858
70826: LD_INT 20
70828: DOUBLE
70829: EQUAL
70830: IFTRUE 70858
70832: LD_INT 21
70834: DOUBLE
70835: EQUAL
70836: IFTRUE 70858
70838: LD_INT 23
70840: DOUBLE
70841: EQUAL
70842: IFTRUE 70858
70844: LD_INT 24
70846: DOUBLE
70847: EQUAL
70848: IFTRUE 70858
70850: LD_INT 25
70852: DOUBLE
70853: EQUAL
70854: IFTRUE 70858
70856: GO 70914
70858: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70859: LD_ADDR_VAR 0 9
70863: PUSH
70864: LD_VAR 0 35
70868: PUSH
70869: LD_VAR 0 36
70873: PUSH
70874: LD_VAR 0 37
70878: PUSH
70879: LD_VAR 0 38
70883: PUSH
70884: LD_VAR 0 39
70888: PUSH
70889: LD_VAR 0 40
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: PUSH
70902: LD_VAR 0 4
70906: PUSH
70907: LD_INT 1
70909: PLUS
70910: ARRAY
70911: ST_TO_ADDR
70912: GO 71279
70914: LD_INT 6
70916: DOUBLE
70917: EQUAL
70918: IFTRUE 70970
70920: LD_INT 7
70922: DOUBLE
70923: EQUAL
70924: IFTRUE 70970
70926: LD_INT 8
70928: DOUBLE
70929: EQUAL
70930: IFTRUE 70970
70932: LD_INT 13
70934: DOUBLE
70935: EQUAL
70936: IFTRUE 70970
70938: LD_INT 12
70940: DOUBLE
70941: EQUAL
70942: IFTRUE 70970
70944: LD_INT 15
70946: DOUBLE
70947: EQUAL
70948: IFTRUE 70970
70950: LD_INT 11
70952: DOUBLE
70953: EQUAL
70954: IFTRUE 70970
70956: LD_INT 14
70958: DOUBLE
70959: EQUAL
70960: IFTRUE 70970
70962: LD_INT 10
70964: DOUBLE
70965: EQUAL
70966: IFTRUE 70970
70968: GO 71026
70970: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70971: LD_ADDR_VAR 0 9
70975: PUSH
70976: LD_VAR 0 41
70980: PUSH
70981: LD_VAR 0 42
70985: PUSH
70986: LD_VAR 0 43
70990: PUSH
70991: LD_VAR 0 44
70995: PUSH
70996: LD_VAR 0 45
71000: PUSH
71001: LD_VAR 0 46
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: LIST
71013: PUSH
71014: LD_VAR 0 4
71018: PUSH
71019: LD_INT 1
71021: PLUS
71022: ARRAY
71023: ST_TO_ADDR
71024: GO 71279
71026: LD_INT 36
71028: DOUBLE
71029: EQUAL
71030: IFTRUE 71034
71032: GO 71090
71034: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71035: LD_ADDR_VAR 0 9
71039: PUSH
71040: LD_VAR 0 47
71044: PUSH
71045: LD_VAR 0 48
71049: PUSH
71050: LD_VAR 0 49
71054: PUSH
71055: LD_VAR 0 50
71059: PUSH
71060: LD_VAR 0 51
71064: PUSH
71065: LD_VAR 0 52
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: PUSH
71078: LD_VAR 0 4
71082: PUSH
71083: LD_INT 1
71085: PLUS
71086: ARRAY
71087: ST_TO_ADDR
71088: GO 71279
71090: LD_INT 4
71092: DOUBLE
71093: EQUAL
71094: IFTRUE 71116
71096: LD_INT 5
71098: DOUBLE
71099: EQUAL
71100: IFTRUE 71116
71102: LD_INT 34
71104: DOUBLE
71105: EQUAL
71106: IFTRUE 71116
71108: LD_INT 37
71110: DOUBLE
71111: EQUAL
71112: IFTRUE 71116
71114: GO 71172
71116: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71117: LD_ADDR_VAR 0 9
71121: PUSH
71122: LD_VAR 0 53
71126: PUSH
71127: LD_VAR 0 54
71131: PUSH
71132: LD_VAR 0 55
71136: PUSH
71137: LD_VAR 0 56
71141: PUSH
71142: LD_VAR 0 57
71146: PUSH
71147: LD_VAR 0 58
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: PUSH
71160: LD_VAR 0 4
71164: PUSH
71165: LD_INT 1
71167: PLUS
71168: ARRAY
71169: ST_TO_ADDR
71170: GO 71279
71172: LD_INT 31
71174: DOUBLE
71175: EQUAL
71176: IFTRUE 71222
71178: LD_INT 32
71180: DOUBLE
71181: EQUAL
71182: IFTRUE 71222
71184: LD_INT 33
71186: DOUBLE
71187: EQUAL
71188: IFTRUE 71222
71190: LD_INT 27
71192: DOUBLE
71193: EQUAL
71194: IFTRUE 71222
71196: LD_INT 26
71198: DOUBLE
71199: EQUAL
71200: IFTRUE 71222
71202: LD_INT 28
71204: DOUBLE
71205: EQUAL
71206: IFTRUE 71222
71208: LD_INT 29
71210: DOUBLE
71211: EQUAL
71212: IFTRUE 71222
71214: LD_INT 30
71216: DOUBLE
71217: EQUAL
71218: IFTRUE 71222
71220: GO 71278
71222: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71223: LD_ADDR_VAR 0 9
71227: PUSH
71228: LD_VAR 0 59
71232: PUSH
71233: LD_VAR 0 60
71237: PUSH
71238: LD_VAR 0 61
71242: PUSH
71243: LD_VAR 0 62
71247: PUSH
71248: LD_VAR 0 63
71252: PUSH
71253: LD_VAR 0 64
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: PUSH
71266: LD_VAR 0 4
71270: PUSH
71271: LD_INT 1
71273: PLUS
71274: ARRAY
71275: ST_TO_ADDR
71276: GO 71279
71278: POP
// temp_list2 = [ ] ;
71279: LD_ADDR_VAR 0 10
71283: PUSH
71284: EMPTY
71285: ST_TO_ADDR
// for i in temp_list do
71286: LD_ADDR_VAR 0 8
71290: PUSH
71291: LD_VAR 0 9
71295: PUSH
71296: FOR_IN
71297: IFFALSE 71349
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71299: LD_ADDR_VAR 0 10
71303: PUSH
71304: LD_VAR 0 10
71308: PUSH
71309: LD_VAR 0 8
71313: PUSH
71314: LD_INT 1
71316: ARRAY
71317: PUSH
71318: LD_VAR 0 2
71322: PLUS
71323: PUSH
71324: LD_VAR 0 8
71328: PUSH
71329: LD_INT 2
71331: ARRAY
71332: PUSH
71333: LD_VAR 0 3
71337: PLUS
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: EMPTY
71344: LIST
71345: ADD
71346: ST_TO_ADDR
71347: GO 71296
71349: POP
71350: POP
// result = temp_list2 ;
71351: LD_ADDR_VAR 0 7
71355: PUSH
71356: LD_VAR 0 10
71360: ST_TO_ADDR
// end ;
71361: LD_VAR 0 7
71365: RET
// export function EnemyInRange ( unit , dist ) ; begin
71366: LD_INT 0
71368: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71369: LD_ADDR_VAR 0 3
71373: PUSH
71374: LD_VAR 0 1
71378: PPUSH
71379: CALL_OW 255
71383: PPUSH
71384: LD_VAR 0 1
71388: PPUSH
71389: CALL_OW 250
71393: PPUSH
71394: LD_VAR 0 1
71398: PPUSH
71399: CALL_OW 251
71403: PPUSH
71404: LD_VAR 0 2
71408: PPUSH
71409: CALL 44762 0 4
71413: PUSH
71414: LD_INT 4
71416: ARRAY
71417: ST_TO_ADDR
// end ;
71418: LD_VAR 0 3
71422: RET
// export function PlayerSeeMe ( unit ) ; begin
71423: LD_INT 0
71425: PPUSH
// result := See ( your_side , unit ) ;
71426: LD_ADDR_VAR 0 2
71430: PUSH
71431: LD_OWVAR 2
71435: PPUSH
71436: LD_VAR 0 1
71440: PPUSH
71441: CALL_OW 292
71445: ST_TO_ADDR
// end ;
71446: LD_VAR 0 2
71450: RET
// export function ReverseDir ( unit ) ; begin
71451: LD_INT 0
71453: PPUSH
// if not unit then
71454: LD_VAR 0 1
71458: NOT
71459: IFFALSE 71463
// exit ;
71461: GO 71486
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71463: LD_ADDR_VAR 0 2
71467: PUSH
71468: LD_VAR 0 1
71472: PPUSH
71473: CALL_OW 254
71477: PUSH
71478: LD_INT 3
71480: PLUS
71481: PUSH
71482: LD_INT 6
71484: MOD
71485: ST_TO_ADDR
// end ;
71486: LD_VAR 0 2
71490: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71491: LD_INT 0
71493: PPUSH
71494: PPUSH
71495: PPUSH
71496: PPUSH
71497: PPUSH
// if not hexes then
71498: LD_VAR 0 2
71502: NOT
71503: IFFALSE 71507
// exit ;
71505: GO 71655
// dist := 9999 ;
71507: LD_ADDR_VAR 0 5
71511: PUSH
71512: LD_INT 9999
71514: ST_TO_ADDR
// for i = 1 to hexes do
71515: LD_ADDR_VAR 0 4
71519: PUSH
71520: DOUBLE
71521: LD_INT 1
71523: DEC
71524: ST_TO_ADDR
71525: LD_VAR 0 2
71529: PUSH
71530: FOR_TO
71531: IFFALSE 71643
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71533: LD_VAR 0 1
71537: PPUSH
71538: LD_VAR 0 2
71542: PUSH
71543: LD_VAR 0 4
71547: ARRAY
71548: PUSH
71549: LD_INT 1
71551: ARRAY
71552: PPUSH
71553: LD_VAR 0 2
71557: PUSH
71558: LD_VAR 0 4
71562: ARRAY
71563: PUSH
71564: LD_INT 2
71566: ARRAY
71567: PPUSH
71568: CALL_OW 297
71572: PUSH
71573: LD_VAR 0 5
71577: LESS
71578: IFFALSE 71641
// begin hex := hexes [ i ] ;
71580: LD_ADDR_VAR 0 7
71584: PUSH
71585: LD_VAR 0 2
71589: PUSH
71590: LD_VAR 0 4
71594: ARRAY
71595: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71596: LD_ADDR_VAR 0 5
71600: PUSH
71601: LD_VAR 0 1
71605: PPUSH
71606: LD_VAR 0 2
71610: PUSH
71611: LD_VAR 0 4
71615: ARRAY
71616: PUSH
71617: LD_INT 1
71619: ARRAY
71620: PPUSH
71621: LD_VAR 0 2
71625: PUSH
71626: LD_VAR 0 4
71630: ARRAY
71631: PUSH
71632: LD_INT 2
71634: ARRAY
71635: PPUSH
71636: CALL_OW 297
71640: ST_TO_ADDR
// end ; end ;
71641: GO 71530
71643: POP
71644: POP
// result := hex ;
71645: LD_ADDR_VAR 0 3
71649: PUSH
71650: LD_VAR 0 7
71654: ST_TO_ADDR
// end ;
71655: LD_VAR 0 3
71659: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71660: LD_INT 0
71662: PPUSH
71663: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71664: LD_VAR 0 1
71668: NOT
71669: PUSH
71670: LD_VAR 0 1
71674: PUSH
71675: LD_INT 21
71677: PUSH
71678: LD_INT 2
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: LD_INT 23
71687: PUSH
71688: LD_INT 2
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PPUSH
71699: CALL_OW 69
71703: IN
71704: NOT
71705: OR
71706: IFFALSE 71710
// exit ;
71708: GO 71757
// for i = 1 to 3 do
71710: LD_ADDR_VAR 0 3
71714: PUSH
71715: DOUBLE
71716: LD_INT 1
71718: DEC
71719: ST_TO_ADDR
71720: LD_INT 3
71722: PUSH
71723: FOR_TO
71724: IFFALSE 71755
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71726: LD_VAR 0 1
71730: PPUSH
71731: CALL_OW 250
71735: PPUSH
71736: LD_VAR 0 1
71740: PPUSH
71741: CALL_OW 251
71745: PPUSH
71746: LD_INT 1
71748: PPUSH
71749: CALL_OW 453
71753: GO 71723
71755: POP
71756: POP
// end ;
71757: LD_VAR 0 2
71761: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71762: LD_INT 0
71764: PPUSH
71765: PPUSH
71766: PPUSH
71767: PPUSH
71768: PPUSH
71769: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71770: LD_VAR 0 1
71774: NOT
71775: PUSH
71776: LD_VAR 0 2
71780: NOT
71781: OR
71782: PUSH
71783: LD_VAR 0 1
71787: PPUSH
71788: CALL_OW 314
71792: OR
71793: IFFALSE 71797
// exit ;
71795: GO 72238
// x := GetX ( enemy_unit ) ;
71797: LD_ADDR_VAR 0 7
71801: PUSH
71802: LD_VAR 0 2
71806: PPUSH
71807: CALL_OW 250
71811: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71812: LD_ADDR_VAR 0 8
71816: PUSH
71817: LD_VAR 0 2
71821: PPUSH
71822: CALL_OW 251
71826: ST_TO_ADDR
// if not x or not y then
71827: LD_VAR 0 7
71831: NOT
71832: PUSH
71833: LD_VAR 0 8
71837: NOT
71838: OR
71839: IFFALSE 71843
// exit ;
71841: GO 72238
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71843: LD_ADDR_VAR 0 6
71847: PUSH
71848: LD_VAR 0 7
71852: PPUSH
71853: LD_INT 0
71855: PPUSH
71856: LD_INT 4
71858: PPUSH
71859: CALL_OW 272
71863: PUSH
71864: LD_VAR 0 8
71868: PPUSH
71869: LD_INT 0
71871: PPUSH
71872: LD_INT 4
71874: PPUSH
71875: CALL_OW 273
71879: PUSH
71880: EMPTY
71881: LIST
71882: LIST
71883: PUSH
71884: LD_VAR 0 7
71888: PPUSH
71889: LD_INT 1
71891: PPUSH
71892: LD_INT 4
71894: PPUSH
71895: CALL_OW 272
71899: PUSH
71900: LD_VAR 0 8
71904: PPUSH
71905: LD_INT 1
71907: PPUSH
71908: LD_INT 4
71910: PPUSH
71911: CALL_OW 273
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: LD_VAR 0 7
71924: PPUSH
71925: LD_INT 2
71927: PPUSH
71928: LD_INT 4
71930: PPUSH
71931: CALL_OW 272
71935: PUSH
71936: LD_VAR 0 8
71940: PPUSH
71941: LD_INT 2
71943: PPUSH
71944: LD_INT 4
71946: PPUSH
71947: CALL_OW 273
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: LD_VAR 0 7
71960: PPUSH
71961: LD_INT 3
71963: PPUSH
71964: LD_INT 4
71966: PPUSH
71967: CALL_OW 272
71971: PUSH
71972: LD_VAR 0 8
71976: PPUSH
71977: LD_INT 3
71979: PPUSH
71980: LD_INT 4
71982: PPUSH
71983: CALL_OW 273
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_VAR 0 7
71996: PPUSH
71997: LD_INT 4
71999: PPUSH
72000: LD_INT 4
72002: PPUSH
72003: CALL_OW 272
72007: PUSH
72008: LD_VAR 0 8
72012: PPUSH
72013: LD_INT 4
72015: PPUSH
72016: LD_INT 4
72018: PPUSH
72019: CALL_OW 273
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PUSH
72028: LD_VAR 0 7
72032: PPUSH
72033: LD_INT 5
72035: PPUSH
72036: LD_INT 4
72038: PPUSH
72039: CALL_OW 272
72043: PUSH
72044: LD_VAR 0 8
72048: PPUSH
72049: LD_INT 5
72051: PPUSH
72052: LD_INT 4
72054: PPUSH
72055: CALL_OW 273
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: ST_TO_ADDR
// for i = tmp downto 1 do
72072: LD_ADDR_VAR 0 4
72076: PUSH
72077: DOUBLE
72078: LD_VAR 0 6
72082: INC
72083: ST_TO_ADDR
72084: LD_INT 1
72086: PUSH
72087: FOR_DOWNTO
72088: IFFALSE 72189
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72090: LD_VAR 0 6
72094: PUSH
72095: LD_VAR 0 4
72099: ARRAY
72100: PUSH
72101: LD_INT 1
72103: ARRAY
72104: PPUSH
72105: LD_VAR 0 6
72109: PUSH
72110: LD_VAR 0 4
72114: ARRAY
72115: PUSH
72116: LD_INT 2
72118: ARRAY
72119: PPUSH
72120: CALL_OW 488
72124: NOT
72125: PUSH
72126: LD_VAR 0 6
72130: PUSH
72131: LD_VAR 0 4
72135: ARRAY
72136: PUSH
72137: LD_INT 1
72139: ARRAY
72140: PPUSH
72141: LD_VAR 0 6
72145: PUSH
72146: LD_VAR 0 4
72150: ARRAY
72151: PUSH
72152: LD_INT 2
72154: ARRAY
72155: PPUSH
72156: CALL_OW 428
72160: PUSH
72161: LD_INT 0
72163: NONEQUAL
72164: OR
72165: IFFALSE 72187
// tmp := Delete ( tmp , i ) ;
72167: LD_ADDR_VAR 0 6
72171: PUSH
72172: LD_VAR 0 6
72176: PPUSH
72177: LD_VAR 0 4
72181: PPUSH
72182: CALL_OW 3
72186: ST_TO_ADDR
72187: GO 72087
72189: POP
72190: POP
// j := GetClosestHex ( unit , tmp ) ;
72191: LD_ADDR_VAR 0 5
72195: PUSH
72196: LD_VAR 0 1
72200: PPUSH
72201: LD_VAR 0 6
72205: PPUSH
72206: CALL 71491 0 2
72210: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72211: LD_VAR 0 1
72215: PPUSH
72216: LD_VAR 0 5
72220: PUSH
72221: LD_INT 1
72223: ARRAY
72224: PPUSH
72225: LD_VAR 0 5
72229: PUSH
72230: LD_INT 2
72232: ARRAY
72233: PPUSH
72234: CALL_OW 111
// end ;
72238: LD_VAR 0 3
72242: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72243: LD_INT 0
72245: PPUSH
72246: PPUSH
72247: PPUSH
// uc_side = 0 ;
72248: LD_ADDR_OWVAR 20
72252: PUSH
72253: LD_INT 0
72255: ST_TO_ADDR
// uc_nation = 0 ;
72256: LD_ADDR_OWVAR 21
72260: PUSH
72261: LD_INT 0
72263: ST_TO_ADDR
// InitHc_All ( ) ;
72264: CALL_OW 584
// InitVc ;
72268: CALL_OW 20
// if mastodonts then
72272: LD_VAR 0 6
72276: IFFALSE 72343
// for i = 1 to mastodonts do
72278: LD_ADDR_VAR 0 11
72282: PUSH
72283: DOUBLE
72284: LD_INT 1
72286: DEC
72287: ST_TO_ADDR
72288: LD_VAR 0 6
72292: PUSH
72293: FOR_TO
72294: IFFALSE 72341
// begin vc_chassis := 31 ;
72296: LD_ADDR_OWVAR 37
72300: PUSH
72301: LD_INT 31
72303: ST_TO_ADDR
// vc_control := control_rider ;
72304: LD_ADDR_OWVAR 38
72308: PUSH
72309: LD_INT 4
72311: ST_TO_ADDR
// animal := CreateVehicle ;
72312: LD_ADDR_VAR 0 12
72316: PUSH
72317: CALL_OW 45
72321: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72322: LD_VAR 0 12
72326: PPUSH
72327: LD_VAR 0 8
72331: PPUSH
72332: LD_INT 0
72334: PPUSH
72335: CALL 74478 0 3
// end ;
72339: GO 72293
72341: POP
72342: POP
// if horses then
72343: LD_VAR 0 5
72347: IFFALSE 72414
// for i = 1 to horses do
72349: LD_ADDR_VAR 0 11
72353: PUSH
72354: DOUBLE
72355: LD_INT 1
72357: DEC
72358: ST_TO_ADDR
72359: LD_VAR 0 5
72363: PUSH
72364: FOR_TO
72365: IFFALSE 72412
// begin hc_class := 21 ;
72367: LD_ADDR_OWVAR 28
72371: PUSH
72372: LD_INT 21
72374: ST_TO_ADDR
// hc_gallery :=  ;
72375: LD_ADDR_OWVAR 33
72379: PUSH
72380: LD_STRING 
72382: ST_TO_ADDR
// animal := CreateHuman ;
72383: LD_ADDR_VAR 0 12
72387: PUSH
72388: CALL_OW 44
72392: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72393: LD_VAR 0 12
72397: PPUSH
72398: LD_VAR 0 8
72402: PPUSH
72403: LD_INT 0
72405: PPUSH
72406: CALL 74478 0 3
// end ;
72410: GO 72364
72412: POP
72413: POP
// if birds then
72414: LD_VAR 0 1
72418: IFFALSE 72485
// for i = 1 to birds do
72420: LD_ADDR_VAR 0 11
72424: PUSH
72425: DOUBLE
72426: LD_INT 1
72428: DEC
72429: ST_TO_ADDR
72430: LD_VAR 0 1
72434: PUSH
72435: FOR_TO
72436: IFFALSE 72483
// begin hc_class = 18 ;
72438: LD_ADDR_OWVAR 28
72442: PUSH
72443: LD_INT 18
72445: ST_TO_ADDR
// hc_gallery =  ;
72446: LD_ADDR_OWVAR 33
72450: PUSH
72451: LD_STRING 
72453: ST_TO_ADDR
// animal := CreateHuman ;
72454: LD_ADDR_VAR 0 12
72458: PUSH
72459: CALL_OW 44
72463: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72464: LD_VAR 0 12
72468: PPUSH
72469: LD_VAR 0 8
72473: PPUSH
72474: LD_INT 0
72476: PPUSH
72477: CALL 74478 0 3
// end ;
72481: GO 72435
72483: POP
72484: POP
// if tigers then
72485: LD_VAR 0 2
72489: IFFALSE 72573
// for i = 1 to tigers do
72491: LD_ADDR_VAR 0 11
72495: PUSH
72496: DOUBLE
72497: LD_INT 1
72499: DEC
72500: ST_TO_ADDR
72501: LD_VAR 0 2
72505: PUSH
72506: FOR_TO
72507: IFFALSE 72571
// begin hc_class = class_tiger ;
72509: LD_ADDR_OWVAR 28
72513: PUSH
72514: LD_INT 14
72516: ST_TO_ADDR
// hc_gallery =  ;
72517: LD_ADDR_OWVAR 33
72521: PUSH
72522: LD_STRING 
72524: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72525: LD_ADDR_OWVAR 35
72529: PUSH
72530: LD_INT 7
72532: NEG
72533: PPUSH
72534: LD_INT 7
72536: PPUSH
72537: CALL_OW 12
72541: ST_TO_ADDR
// animal := CreateHuman ;
72542: LD_ADDR_VAR 0 12
72546: PUSH
72547: CALL_OW 44
72551: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72552: LD_VAR 0 12
72556: PPUSH
72557: LD_VAR 0 8
72561: PPUSH
72562: LD_INT 0
72564: PPUSH
72565: CALL 74478 0 3
// end ;
72569: GO 72506
72571: POP
72572: POP
// if apemans then
72573: LD_VAR 0 3
72577: IFFALSE 72700
// for i = 1 to apemans do
72579: LD_ADDR_VAR 0 11
72583: PUSH
72584: DOUBLE
72585: LD_INT 1
72587: DEC
72588: ST_TO_ADDR
72589: LD_VAR 0 3
72593: PUSH
72594: FOR_TO
72595: IFFALSE 72698
// begin hc_class = class_apeman ;
72597: LD_ADDR_OWVAR 28
72601: PUSH
72602: LD_INT 12
72604: ST_TO_ADDR
// hc_gallery =  ;
72605: LD_ADDR_OWVAR 33
72609: PUSH
72610: LD_STRING 
72612: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72613: LD_ADDR_OWVAR 35
72617: PUSH
72618: LD_INT 2
72620: NEG
72621: PPUSH
72622: LD_INT 2
72624: PPUSH
72625: CALL_OW 12
72629: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72630: LD_ADDR_OWVAR 31
72634: PUSH
72635: LD_INT 1
72637: PPUSH
72638: LD_INT 3
72640: PPUSH
72641: CALL_OW 12
72645: PUSH
72646: LD_INT 1
72648: PPUSH
72649: LD_INT 3
72651: PPUSH
72652: CALL_OW 12
72656: PUSH
72657: LD_INT 0
72659: PUSH
72660: LD_INT 0
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: ST_TO_ADDR
// animal := CreateHuman ;
72669: LD_ADDR_VAR 0 12
72673: PUSH
72674: CALL_OW 44
72678: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72679: LD_VAR 0 12
72683: PPUSH
72684: LD_VAR 0 8
72688: PPUSH
72689: LD_INT 0
72691: PPUSH
72692: CALL 74478 0 3
// end ;
72696: GO 72594
72698: POP
72699: POP
// if enchidnas then
72700: LD_VAR 0 4
72704: IFFALSE 72771
// for i = 1 to enchidnas do
72706: LD_ADDR_VAR 0 11
72710: PUSH
72711: DOUBLE
72712: LD_INT 1
72714: DEC
72715: ST_TO_ADDR
72716: LD_VAR 0 4
72720: PUSH
72721: FOR_TO
72722: IFFALSE 72769
// begin hc_class = 13 ;
72724: LD_ADDR_OWVAR 28
72728: PUSH
72729: LD_INT 13
72731: ST_TO_ADDR
// hc_gallery =  ;
72732: LD_ADDR_OWVAR 33
72736: PUSH
72737: LD_STRING 
72739: ST_TO_ADDR
// animal := CreateHuman ;
72740: LD_ADDR_VAR 0 12
72744: PUSH
72745: CALL_OW 44
72749: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72750: LD_VAR 0 12
72754: PPUSH
72755: LD_VAR 0 8
72759: PPUSH
72760: LD_INT 0
72762: PPUSH
72763: CALL 74478 0 3
// end ;
72767: GO 72721
72769: POP
72770: POP
// if fishes then
72771: LD_VAR 0 7
72775: IFFALSE 72842
// for i = 1 to fishes do
72777: LD_ADDR_VAR 0 11
72781: PUSH
72782: DOUBLE
72783: LD_INT 1
72785: DEC
72786: ST_TO_ADDR
72787: LD_VAR 0 7
72791: PUSH
72792: FOR_TO
72793: IFFALSE 72840
// begin hc_class = 20 ;
72795: LD_ADDR_OWVAR 28
72799: PUSH
72800: LD_INT 20
72802: ST_TO_ADDR
// hc_gallery =  ;
72803: LD_ADDR_OWVAR 33
72807: PUSH
72808: LD_STRING 
72810: ST_TO_ADDR
// animal := CreateHuman ;
72811: LD_ADDR_VAR 0 12
72815: PUSH
72816: CALL_OW 44
72820: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72821: LD_VAR 0 12
72825: PPUSH
72826: LD_VAR 0 9
72830: PPUSH
72831: LD_INT 0
72833: PPUSH
72834: CALL 74478 0 3
// end ;
72838: GO 72792
72840: POP
72841: POP
// end ;
72842: LD_VAR 0 10
72846: RET
// export function WantHeal ( sci , unit ) ; begin
72847: LD_INT 0
72849: PPUSH
// if GetTaskList ( sci ) > 0 then
72850: LD_VAR 0 1
72854: PPUSH
72855: CALL_OW 437
72859: PUSH
72860: LD_INT 0
72862: GREATER
72863: IFFALSE 72933
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72865: LD_VAR 0 1
72869: PPUSH
72870: CALL_OW 437
72874: PUSH
72875: LD_INT 1
72877: ARRAY
72878: PUSH
72879: LD_INT 1
72881: ARRAY
72882: PUSH
72883: LD_STRING l
72885: EQUAL
72886: PUSH
72887: LD_VAR 0 1
72891: PPUSH
72892: CALL_OW 437
72896: PUSH
72897: LD_INT 1
72899: ARRAY
72900: PUSH
72901: LD_INT 4
72903: ARRAY
72904: PUSH
72905: LD_VAR 0 2
72909: EQUAL
72910: AND
72911: IFFALSE 72923
// result := true else
72913: LD_ADDR_VAR 0 3
72917: PUSH
72918: LD_INT 1
72920: ST_TO_ADDR
72921: GO 72931
// result := false ;
72923: LD_ADDR_VAR 0 3
72927: PUSH
72928: LD_INT 0
72930: ST_TO_ADDR
// end else
72931: GO 72941
// result := false ;
72933: LD_ADDR_VAR 0 3
72937: PUSH
72938: LD_INT 0
72940: ST_TO_ADDR
// end ;
72941: LD_VAR 0 3
72945: RET
// export function HealTarget ( sci ) ; begin
72946: LD_INT 0
72948: PPUSH
// if not sci then
72949: LD_VAR 0 1
72953: NOT
72954: IFFALSE 72958
// exit ;
72956: GO 73023
// result := 0 ;
72958: LD_ADDR_VAR 0 2
72962: PUSH
72963: LD_INT 0
72965: ST_TO_ADDR
// if GetTaskList ( sci ) then
72966: LD_VAR 0 1
72970: PPUSH
72971: CALL_OW 437
72975: IFFALSE 73023
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72977: LD_VAR 0 1
72981: PPUSH
72982: CALL_OW 437
72986: PUSH
72987: LD_INT 1
72989: ARRAY
72990: PUSH
72991: LD_INT 1
72993: ARRAY
72994: PUSH
72995: LD_STRING l
72997: EQUAL
72998: IFFALSE 73023
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73000: LD_ADDR_VAR 0 2
73004: PUSH
73005: LD_VAR 0 1
73009: PPUSH
73010: CALL_OW 437
73014: PUSH
73015: LD_INT 1
73017: ARRAY
73018: PUSH
73019: LD_INT 4
73021: ARRAY
73022: ST_TO_ADDR
// end ;
73023: LD_VAR 0 2
73027: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73028: LD_INT 0
73030: PPUSH
73031: PPUSH
73032: PPUSH
73033: PPUSH
// if not base_units then
73034: LD_VAR 0 1
73038: NOT
73039: IFFALSE 73043
// exit ;
73041: GO 73130
// result := false ;
73043: LD_ADDR_VAR 0 2
73047: PUSH
73048: LD_INT 0
73050: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73051: LD_ADDR_VAR 0 5
73055: PUSH
73056: LD_VAR 0 1
73060: PPUSH
73061: LD_INT 21
73063: PUSH
73064: LD_INT 3
73066: PUSH
73067: EMPTY
73068: LIST
73069: LIST
73070: PPUSH
73071: CALL_OW 72
73075: ST_TO_ADDR
// if not tmp then
73076: LD_VAR 0 5
73080: NOT
73081: IFFALSE 73085
// exit ;
73083: GO 73130
// for i in tmp do
73085: LD_ADDR_VAR 0 3
73089: PUSH
73090: LD_VAR 0 5
73094: PUSH
73095: FOR_IN
73096: IFFALSE 73128
// begin result := EnemyInRange ( i , 22 ) ;
73098: LD_ADDR_VAR 0 2
73102: PUSH
73103: LD_VAR 0 3
73107: PPUSH
73108: LD_INT 22
73110: PPUSH
73111: CALL 71366 0 2
73115: ST_TO_ADDR
// if result then
73116: LD_VAR 0 2
73120: IFFALSE 73126
// exit ;
73122: POP
73123: POP
73124: GO 73130
// end ;
73126: GO 73095
73128: POP
73129: POP
// end ;
73130: LD_VAR 0 2
73134: RET
// export function FilterByTag ( units , tag ) ; begin
73135: LD_INT 0
73137: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73138: LD_ADDR_VAR 0 3
73142: PUSH
73143: LD_VAR 0 1
73147: PPUSH
73148: LD_INT 120
73150: PUSH
73151: LD_VAR 0 2
73155: PUSH
73156: EMPTY
73157: LIST
73158: LIST
73159: PPUSH
73160: CALL_OW 72
73164: ST_TO_ADDR
// end ;
73165: LD_VAR 0 3
73169: RET
// export function IsDriver ( un ) ; begin
73170: LD_INT 0
73172: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73173: LD_ADDR_VAR 0 2
73177: PUSH
73178: LD_VAR 0 1
73182: PUSH
73183: LD_INT 55
73185: PUSH
73186: EMPTY
73187: LIST
73188: PPUSH
73189: CALL_OW 69
73193: IN
73194: ST_TO_ADDR
// end ;
73195: LD_VAR 0 2
73199: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73200: LD_INT 0
73202: PPUSH
73203: PPUSH
// list := [ ] ;
73204: LD_ADDR_VAR 0 5
73208: PUSH
73209: EMPTY
73210: ST_TO_ADDR
// case d of 0 :
73211: LD_VAR 0 3
73215: PUSH
73216: LD_INT 0
73218: DOUBLE
73219: EQUAL
73220: IFTRUE 73224
73222: GO 73357
73224: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73225: LD_ADDR_VAR 0 5
73229: PUSH
73230: LD_VAR 0 1
73234: PUSH
73235: LD_INT 4
73237: MINUS
73238: PUSH
73239: LD_VAR 0 2
73243: PUSH
73244: LD_INT 4
73246: MINUS
73247: PUSH
73248: LD_INT 2
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: LIST
73255: PUSH
73256: LD_VAR 0 1
73260: PUSH
73261: LD_INT 3
73263: MINUS
73264: PUSH
73265: LD_VAR 0 2
73269: PUSH
73270: LD_INT 1
73272: PUSH
73273: EMPTY
73274: LIST
73275: LIST
73276: LIST
73277: PUSH
73278: LD_VAR 0 1
73282: PUSH
73283: LD_INT 4
73285: PLUS
73286: PUSH
73287: LD_VAR 0 2
73291: PUSH
73292: LD_INT 4
73294: PUSH
73295: EMPTY
73296: LIST
73297: LIST
73298: LIST
73299: PUSH
73300: LD_VAR 0 1
73304: PUSH
73305: LD_INT 3
73307: PLUS
73308: PUSH
73309: LD_VAR 0 2
73313: PUSH
73314: LD_INT 3
73316: PLUS
73317: PUSH
73318: LD_INT 5
73320: PUSH
73321: EMPTY
73322: LIST
73323: LIST
73324: LIST
73325: PUSH
73326: LD_VAR 0 1
73330: PUSH
73331: LD_VAR 0 2
73335: PUSH
73336: LD_INT 4
73338: PLUS
73339: PUSH
73340: LD_INT 0
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: LIST
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: ST_TO_ADDR
// end ; 1 :
73355: GO 74055
73357: LD_INT 1
73359: DOUBLE
73360: EQUAL
73361: IFTRUE 73365
73363: GO 73498
73365: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73366: LD_ADDR_VAR 0 5
73370: PUSH
73371: LD_VAR 0 1
73375: PUSH
73376: LD_VAR 0 2
73380: PUSH
73381: LD_INT 4
73383: MINUS
73384: PUSH
73385: LD_INT 3
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: LIST
73392: PUSH
73393: LD_VAR 0 1
73397: PUSH
73398: LD_INT 3
73400: MINUS
73401: PUSH
73402: LD_VAR 0 2
73406: PUSH
73407: LD_INT 3
73409: MINUS
73410: PUSH
73411: LD_INT 2
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: LIST
73418: PUSH
73419: LD_VAR 0 1
73423: PUSH
73424: LD_INT 4
73426: MINUS
73427: PUSH
73428: LD_VAR 0 2
73432: PUSH
73433: LD_INT 1
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: LIST
73440: PUSH
73441: LD_VAR 0 1
73445: PUSH
73446: LD_VAR 0 2
73450: PUSH
73451: LD_INT 3
73453: PLUS
73454: PUSH
73455: LD_INT 0
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: LIST
73462: PUSH
73463: LD_VAR 0 1
73467: PUSH
73468: LD_INT 4
73470: PLUS
73471: PUSH
73472: LD_VAR 0 2
73476: PUSH
73477: LD_INT 4
73479: PLUS
73480: PUSH
73481: LD_INT 5
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: LIST
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: LIST
73493: LIST
73494: LIST
73495: ST_TO_ADDR
// end ; 2 :
73496: GO 74055
73498: LD_INT 2
73500: DOUBLE
73501: EQUAL
73502: IFTRUE 73506
73504: GO 73635
73506: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73507: LD_ADDR_VAR 0 5
73511: PUSH
73512: LD_VAR 0 1
73516: PUSH
73517: LD_VAR 0 2
73521: PUSH
73522: LD_INT 3
73524: MINUS
73525: PUSH
73526: LD_INT 3
73528: PUSH
73529: EMPTY
73530: LIST
73531: LIST
73532: LIST
73533: PUSH
73534: LD_VAR 0 1
73538: PUSH
73539: LD_INT 4
73541: PLUS
73542: PUSH
73543: LD_VAR 0 2
73547: PUSH
73548: LD_INT 4
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: LIST
73555: PUSH
73556: LD_VAR 0 1
73560: PUSH
73561: LD_VAR 0 2
73565: PUSH
73566: LD_INT 4
73568: PLUS
73569: PUSH
73570: LD_INT 0
73572: PUSH
73573: EMPTY
73574: LIST
73575: LIST
73576: LIST
73577: PUSH
73578: LD_VAR 0 1
73582: PUSH
73583: LD_INT 3
73585: MINUS
73586: PUSH
73587: LD_VAR 0 2
73591: PUSH
73592: LD_INT 1
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: LIST
73599: PUSH
73600: LD_VAR 0 1
73604: PUSH
73605: LD_INT 4
73607: MINUS
73608: PUSH
73609: LD_VAR 0 2
73613: PUSH
73614: LD_INT 4
73616: MINUS
73617: PUSH
73618: LD_INT 2
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: LIST
73625: PUSH
73626: EMPTY
73627: LIST
73628: LIST
73629: LIST
73630: LIST
73631: LIST
73632: ST_TO_ADDR
// end ; 3 :
73633: GO 74055
73635: LD_INT 3
73637: DOUBLE
73638: EQUAL
73639: IFTRUE 73643
73641: GO 73776
73643: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73644: LD_ADDR_VAR 0 5
73648: PUSH
73649: LD_VAR 0 1
73653: PUSH
73654: LD_INT 3
73656: PLUS
73657: PUSH
73658: LD_VAR 0 2
73662: PUSH
73663: LD_INT 4
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: LIST
73670: PUSH
73671: LD_VAR 0 1
73675: PUSH
73676: LD_INT 4
73678: PLUS
73679: PUSH
73680: LD_VAR 0 2
73684: PUSH
73685: LD_INT 4
73687: PLUS
73688: PUSH
73689: LD_INT 5
73691: PUSH
73692: EMPTY
73693: LIST
73694: LIST
73695: LIST
73696: PUSH
73697: LD_VAR 0 1
73701: PUSH
73702: LD_INT 4
73704: MINUS
73705: PUSH
73706: LD_VAR 0 2
73710: PUSH
73711: LD_INT 1
73713: PUSH
73714: EMPTY
73715: LIST
73716: LIST
73717: LIST
73718: PUSH
73719: LD_VAR 0 1
73723: PUSH
73724: LD_VAR 0 2
73728: PUSH
73729: LD_INT 4
73731: MINUS
73732: PUSH
73733: LD_INT 3
73735: PUSH
73736: EMPTY
73737: LIST
73738: LIST
73739: LIST
73740: PUSH
73741: LD_VAR 0 1
73745: PUSH
73746: LD_INT 3
73748: MINUS
73749: PUSH
73750: LD_VAR 0 2
73754: PUSH
73755: LD_INT 3
73757: MINUS
73758: PUSH
73759: LD_INT 2
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: LIST
73766: PUSH
73767: EMPTY
73768: LIST
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: ST_TO_ADDR
// end ; 4 :
73774: GO 74055
73776: LD_INT 4
73778: DOUBLE
73779: EQUAL
73780: IFTRUE 73784
73782: GO 73917
73784: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73785: LD_ADDR_VAR 0 5
73789: PUSH
73790: LD_VAR 0 1
73794: PUSH
73795: LD_VAR 0 2
73799: PUSH
73800: LD_INT 4
73802: PLUS
73803: PUSH
73804: LD_INT 0
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: LIST
73811: PUSH
73812: LD_VAR 0 1
73816: PUSH
73817: LD_INT 3
73819: PLUS
73820: PUSH
73821: LD_VAR 0 2
73825: PUSH
73826: LD_INT 3
73828: PLUS
73829: PUSH
73830: LD_INT 5
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: LIST
73837: PUSH
73838: LD_VAR 0 1
73842: PUSH
73843: LD_INT 4
73845: PLUS
73846: PUSH
73847: LD_VAR 0 2
73851: PUSH
73852: LD_INT 4
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: LIST
73859: PUSH
73860: LD_VAR 0 1
73864: PUSH
73865: LD_VAR 0 2
73869: PUSH
73870: LD_INT 3
73872: MINUS
73873: PUSH
73874: LD_INT 3
73876: PUSH
73877: EMPTY
73878: LIST
73879: LIST
73880: LIST
73881: PUSH
73882: LD_VAR 0 1
73886: PUSH
73887: LD_INT 4
73889: MINUS
73890: PUSH
73891: LD_VAR 0 2
73895: PUSH
73896: LD_INT 4
73898: MINUS
73899: PUSH
73900: LD_INT 2
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: LIST
73907: PUSH
73908: EMPTY
73909: LIST
73910: LIST
73911: LIST
73912: LIST
73913: LIST
73914: ST_TO_ADDR
// end ; 5 :
73915: GO 74055
73917: LD_INT 5
73919: DOUBLE
73920: EQUAL
73921: IFTRUE 73925
73923: GO 74054
73925: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73926: LD_ADDR_VAR 0 5
73930: PUSH
73931: LD_VAR 0 1
73935: PUSH
73936: LD_INT 4
73938: MINUS
73939: PUSH
73940: LD_VAR 0 2
73944: PUSH
73945: LD_INT 1
73947: PUSH
73948: EMPTY
73949: LIST
73950: LIST
73951: LIST
73952: PUSH
73953: LD_VAR 0 1
73957: PUSH
73958: LD_VAR 0 2
73962: PUSH
73963: LD_INT 4
73965: MINUS
73966: PUSH
73967: LD_INT 3
73969: PUSH
73970: EMPTY
73971: LIST
73972: LIST
73973: LIST
73974: PUSH
73975: LD_VAR 0 1
73979: PUSH
73980: LD_INT 4
73982: PLUS
73983: PUSH
73984: LD_VAR 0 2
73988: PUSH
73989: LD_INT 4
73991: PLUS
73992: PUSH
73993: LD_INT 5
73995: PUSH
73996: EMPTY
73997: LIST
73998: LIST
73999: LIST
74000: PUSH
74001: LD_VAR 0 1
74005: PUSH
74006: LD_INT 3
74008: PLUS
74009: PUSH
74010: LD_VAR 0 2
74014: PUSH
74015: LD_INT 4
74017: PUSH
74018: EMPTY
74019: LIST
74020: LIST
74021: LIST
74022: PUSH
74023: LD_VAR 0 1
74027: PUSH
74028: LD_VAR 0 2
74032: PUSH
74033: LD_INT 3
74035: PLUS
74036: PUSH
74037: LD_INT 0
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: LIST
74044: PUSH
74045: EMPTY
74046: LIST
74047: LIST
74048: LIST
74049: LIST
74050: LIST
74051: ST_TO_ADDR
// end ; end ;
74052: GO 74055
74054: POP
// result := list ;
74055: LD_ADDR_VAR 0 4
74059: PUSH
74060: LD_VAR 0 5
74064: ST_TO_ADDR
// end ;
74065: LD_VAR 0 4
74069: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74070: LD_INT 0
74072: PPUSH
74073: PPUSH
74074: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74075: LD_VAR 0 1
74079: NOT
74080: PUSH
74081: LD_VAR 0 2
74085: PUSH
74086: LD_INT 1
74088: PUSH
74089: LD_INT 2
74091: PUSH
74092: LD_INT 3
74094: PUSH
74095: LD_INT 4
74097: PUSH
74098: EMPTY
74099: LIST
74100: LIST
74101: LIST
74102: LIST
74103: IN
74104: NOT
74105: OR
74106: IFFALSE 74110
// exit ;
74108: GO 74202
// tmp := [ ] ;
74110: LD_ADDR_VAR 0 5
74114: PUSH
74115: EMPTY
74116: ST_TO_ADDR
// for i in units do
74117: LD_ADDR_VAR 0 4
74121: PUSH
74122: LD_VAR 0 1
74126: PUSH
74127: FOR_IN
74128: IFFALSE 74171
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74130: LD_ADDR_VAR 0 5
74134: PUSH
74135: LD_VAR 0 5
74139: PPUSH
74140: LD_VAR 0 5
74144: PUSH
74145: LD_INT 1
74147: PLUS
74148: PPUSH
74149: LD_VAR 0 4
74153: PPUSH
74154: LD_VAR 0 2
74158: PPUSH
74159: CALL_OW 259
74163: PPUSH
74164: CALL_OW 2
74168: ST_TO_ADDR
74169: GO 74127
74171: POP
74172: POP
// if not tmp then
74173: LD_VAR 0 5
74177: NOT
74178: IFFALSE 74182
// exit ;
74180: GO 74202
// result := SortListByListDesc ( units , tmp ) ;
74182: LD_ADDR_VAR 0 3
74186: PUSH
74187: LD_VAR 0 1
74191: PPUSH
74192: LD_VAR 0 5
74196: PPUSH
74197: CALL_OW 77
74201: ST_TO_ADDR
// end ;
74202: LD_VAR 0 3
74206: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74207: LD_INT 0
74209: PPUSH
74210: PPUSH
74211: PPUSH
// result := false ;
74212: LD_ADDR_VAR 0 3
74216: PUSH
74217: LD_INT 0
74219: ST_TO_ADDR
// x := GetX ( building ) ;
74220: LD_ADDR_VAR 0 4
74224: PUSH
74225: LD_VAR 0 2
74229: PPUSH
74230: CALL_OW 250
74234: ST_TO_ADDR
// y := GetY ( building ) ;
74235: LD_ADDR_VAR 0 5
74239: PUSH
74240: LD_VAR 0 2
74244: PPUSH
74245: CALL_OW 251
74249: ST_TO_ADDR
// if not building or not x or not y then
74250: LD_VAR 0 2
74254: NOT
74255: PUSH
74256: LD_VAR 0 4
74260: NOT
74261: OR
74262: PUSH
74263: LD_VAR 0 5
74267: NOT
74268: OR
74269: IFFALSE 74273
// exit ;
74271: GO 74365
// if GetTaskList ( unit ) then
74273: LD_VAR 0 1
74277: PPUSH
74278: CALL_OW 437
74282: IFFALSE 74365
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74284: LD_STRING e
74286: PUSH
74287: LD_VAR 0 1
74291: PPUSH
74292: CALL_OW 437
74296: PUSH
74297: LD_INT 1
74299: ARRAY
74300: PUSH
74301: LD_INT 1
74303: ARRAY
74304: EQUAL
74305: PUSH
74306: LD_VAR 0 4
74310: PUSH
74311: LD_VAR 0 1
74315: PPUSH
74316: CALL_OW 437
74320: PUSH
74321: LD_INT 1
74323: ARRAY
74324: PUSH
74325: LD_INT 2
74327: ARRAY
74328: EQUAL
74329: AND
74330: PUSH
74331: LD_VAR 0 5
74335: PUSH
74336: LD_VAR 0 1
74340: PPUSH
74341: CALL_OW 437
74345: PUSH
74346: LD_INT 1
74348: ARRAY
74349: PUSH
74350: LD_INT 3
74352: ARRAY
74353: EQUAL
74354: AND
74355: IFFALSE 74365
// result := true end ;
74357: LD_ADDR_VAR 0 3
74361: PUSH
74362: LD_INT 1
74364: ST_TO_ADDR
// end ;
74365: LD_VAR 0 3
74369: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74370: LD_INT 0
74372: PPUSH
// result := false ;
74373: LD_ADDR_VAR 0 4
74377: PUSH
74378: LD_INT 0
74380: ST_TO_ADDR
// if GetTaskList ( unit ) then
74381: LD_VAR 0 1
74385: PPUSH
74386: CALL_OW 437
74390: IFFALSE 74473
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74392: LD_STRING M
74394: PUSH
74395: LD_VAR 0 1
74399: PPUSH
74400: CALL_OW 437
74404: PUSH
74405: LD_INT 1
74407: ARRAY
74408: PUSH
74409: LD_INT 1
74411: ARRAY
74412: EQUAL
74413: PUSH
74414: LD_VAR 0 2
74418: PUSH
74419: LD_VAR 0 1
74423: PPUSH
74424: CALL_OW 437
74428: PUSH
74429: LD_INT 1
74431: ARRAY
74432: PUSH
74433: LD_INT 2
74435: ARRAY
74436: EQUAL
74437: AND
74438: PUSH
74439: LD_VAR 0 3
74443: PUSH
74444: LD_VAR 0 1
74448: PPUSH
74449: CALL_OW 437
74453: PUSH
74454: LD_INT 1
74456: ARRAY
74457: PUSH
74458: LD_INT 3
74460: ARRAY
74461: EQUAL
74462: AND
74463: IFFALSE 74473
// result := true ;
74465: LD_ADDR_VAR 0 4
74469: PUSH
74470: LD_INT 1
74472: ST_TO_ADDR
// end ; end ;
74473: LD_VAR 0 4
74477: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74478: LD_INT 0
74480: PPUSH
74481: PPUSH
74482: PPUSH
74483: PPUSH
// if not unit or not area then
74484: LD_VAR 0 1
74488: NOT
74489: PUSH
74490: LD_VAR 0 2
74494: NOT
74495: OR
74496: IFFALSE 74500
// exit ;
74498: GO 74664
// tmp := AreaToList ( area , i ) ;
74500: LD_ADDR_VAR 0 6
74504: PUSH
74505: LD_VAR 0 2
74509: PPUSH
74510: LD_VAR 0 5
74514: PPUSH
74515: CALL_OW 517
74519: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74520: LD_ADDR_VAR 0 5
74524: PUSH
74525: DOUBLE
74526: LD_INT 1
74528: DEC
74529: ST_TO_ADDR
74530: LD_VAR 0 6
74534: PUSH
74535: LD_INT 1
74537: ARRAY
74538: PUSH
74539: FOR_TO
74540: IFFALSE 74662
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74542: LD_ADDR_VAR 0 7
74546: PUSH
74547: LD_VAR 0 6
74551: PUSH
74552: LD_INT 1
74554: ARRAY
74555: PUSH
74556: LD_VAR 0 5
74560: ARRAY
74561: PUSH
74562: LD_VAR 0 6
74566: PUSH
74567: LD_INT 2
74569: ARRAY
74570: PUSH
74571: LD_VAR 0 5
74575: ARRAY
74576: PUSH
74577: EMPTY
74578: LIST
74579: LIST
74580: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74581: LD_VAR 0 7
74585: PUSH
74586: LD_INT 1
74588: ARRAY
74589: PPUSH
74590: LD_VAR 0 7
74594: PUSH
74595: LD_INT 2
74597: ARRAY
74598: PPUSH
74599: CALL_OW 428
74603: PUSH
74604: LD_INT 0
74606: EQUAL
74607: IFFALSE 74660
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74609: LD_VAR 0 1
74613: PPUSH
74614: LD_VAR 0 7
74618: PUSH
74619: LD_INT 1
74621: ARRAY
74622: PPUSH
74623: LD_VAR 0 7
74627: PUSH
74628: LD_INT 2
74630: ARRAY
74631: PPUSH
74632: LD_VAR 0 3
74636: PPUSH
74637: CALL_OW 48
// result := IsPlaced ( unit ) ;
74641: LD_ADDR_VAR 0 4
74645: PUSH
74646: LD_VAR 0 1
74650: PPUSH
74651: CALL_OW 305
74655: ST_TO_ADDR
// exit ;
74656: POP
74657: POP
74658: GO 74664
// end ; end ;
74660: GO 74539
74662: POP
74663: POP
// end ;
74664: LD_VAR 0 4
74668: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74669: LD_INT 0
74671: PPUSH
74672: PPUSH
74673: PPUSH
// if not side or side > 8 then
74674: LD_VAR 0 1
74678: NOT
74679: PUSH
74680: LD_VAR 0 1
74684: PUSH
74685: LD_INT 8
74687: GREATER
74688: OR
74689: IFFALSE 74693
// exit ;
74691: GO 74880
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74693: LD_ADDR_VAR 0 4
74697: PUSH
74698: LD_INT 22
74700: PUSH
74701: LD_VAR 0 1
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: PUSH
74710: LD_INT 21
74712: PUSH
74713: LD_INT 3
74715: PUSH
74716: EMPTY
74717: LIST
74718: LIST
74719: PUSH
74720: EMPTY
74721: LIST
74722: LIST
74723: PPUSH
74724: CALL_OW 69
74728: ST_TO_ADDR
// if not tmp then
74729: LD_VAR 0 4
74733: NOT
74734: IFFALSE 74738
// exit ;
74736: GO 74880
// enable_addtolog := true ;
74738: LD_ADDR_OWVAR 81
74742: PUSH
74743: LD_INT 1
74745: ST_TO_ADDR
// AddToLog ( [ ) ;
74746: LD_STRING [
74748: PPUSH
74749: CALL_OW 561
// for i in tmp do
74753: LD_ADDR_VAR 0 3
74757: PUSH
74758: LD_VAR 0 4
74762: PUSH
74763: FOR_IN
74764: IFFALSE 74871
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74766: LD_STRING [
74768: PUSH
74769: LD_VAR 0 3
74773: PPUSH
74774: CALL_OW 266
74778: STR
74779: PUSH
74780: LD_STRING , 
74782: STR
74783: PUSH
74784: LD_VAR 0 3
74788: PPUSH
74789: CALL_OW 250
74793: STR
74794: PUSH
74795: LD_STRING , 
74797: STR
74798: PUSH
74799: LD_VAR 0 3
74803: PPUSH
74804: CALL_OW 251
74808: STR
74809: PUSH
74810: LD_STRING , 
74812: STR
74813: PUSH
74814: LD_VAR 0 3
74818: PPUSH
74819: CALL_OW 254
74823: STR
74824: PUSH
74825: LD_STRING , 
74827: STR
74828: PUSH
74829: LD_VAR 0 3
74833: PPUSH
74834: LD_INT 1
74836: PPUSH
74837: CALL_OW 268
74841: STR
74842: PUSH
74843: LD_STRING , 
74845: STR
74846: PUSH
74847: LD_VAR 0 3
74851: PPUSH
74852: LD_INT 2
74854: PPUSH
74855: CALL_OW 268
74859: STR
74860: PUSH
74861: LD_STRING ],
74863: STR
74864: PPUSH
74865: CALL_OW 561
// end ;
74869: GO 74763
74871: POP
74872: POP
// AddToLog ( ]; ) ;
74873: LD_STRING ];
74875: PPUSH
74876: CALL_OW 561
// end ;
74880: LD_VAR 0 2
74884: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74885: LD_INT 0
74887: PPUSH
74888: PPUSH
74889: PPUSH
74890: PPUSH
74891: PPUSH
// if not area or not rate or not max then
74892: LD_VAR 0 1
74896: NOT
74897: PUSH
74898: LD_VAR 0 2
74902: NOT
74903: OR
74904: PUSH
74905: LD_VAR 0 4
74909: NOT
74910: OR
74911: IFFALSE 74915
// exit ;
74913: GO 75104
// while 1 do
74915: LD_INT 1
74917: IFFALSE 75104
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74919: LD_ADDR_VAR 0 9
74923: PUSH
74924: LD_VAR 0 1
74928: PPUSH
74929: LD_INT 1
74931: PPUSH
74932: CALL_OW 287
74936: PUSH
74937: LD_INT 10
74939: MUL
74940: ST_TO_ADDR
// r := rate / 10 ;
74941: LD_ADDR_VAR 0 7
74945: PUSH
74946: LD_VAR 0 2
74950: PUSH
74951: LD_INT 10
74953: DIVREAL
74954: ST_TO_ADDR
// time := 1 1$00 ;
74955: LD_ADDR_VAR 0 8
74959: PUSH
74960: LD_INT 2100
74962: ST_TO_ADDR
// if amount < min then
74963: LD_VAR 0 9
74967: PUSH
74968: LD_VAR 0 3
74972: LESS
74973: IFFALSE 74991
// r := r * 2 else
74975: LD_ADDR_VAR 0 7
74979: PUSH
74980: LD_VAR 0 7
74984: PUSH
74985: LD_INT 2
74987: MUL
74988: ST_TO_ADDR
74989: GO 75017
// if amount > max then
74991: LD_VAR 0 9
74995: PUSH
74996: LD_VAR 0 4
75000: GREATER
75001: IFFALSE 75017
// r := r / 2 ;
75003: LD_ADDR_VAR 0 7
75007: PUSH
75008: LD_VAR 0 7
75012: PUSH
75013: LD_INT 2
75015: DIVREAL
75016: ST_TO_ADDR
// time := time / r ;
75017: LD_ADDR_VAR 0 8
75021: PUSH
75022: LD_VAR 0 8
75026: PUSH
75027: LD_VAR 0 7
75031: DIVREAL
75032: ST_TO_ADDR
// if time < 0 then
75033: LD_VAR 0 8
75037: PUSH
75038: LD_INT 0
75040: LESS
75041: IFFALSE 75058
// time := time * - 1 ;
75043: LD_ADDR_VAR 0 8
75047: PUSH
75048: LD_VAR 0 8
75052: PUSH
75053: LD_INT 1
75055: NEG
75056: MUL
75057: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75058: LD_VAR 0 8
75062: PUSH
75063: LD_INT 35
75065: PPUSH
75066: LD_INT 875
75068: PPUSH
75069: CALL_OW 12
75073: PLUS
75074: PPUSH
75075: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75079: LD_INT 1
75081: PPUSH
75082: LD_INT 5
75084: PPUSH
75085: CALL_OW 12
75089: PPUSH
75090: LD_VAR 0 1
75094: PPUSH
75095: LD_INT 1
75097: PPUSH
75098: CALL_OW 55
// end ;
75102: GO 74915
// end ;
75104: LD_VAR 0 5
75108: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75109: LD_INT 0
75111: PPUSH
75112: PPUSH
75113: PPUSH
75114: PPUSH
75115: PPUSH
75116: PPUSH
75117: PPUSH
75118: PPUSH
// if not turrets or not factories then
75119: LD_VAR 0 1
75123: NOT
75124: PUSH
75125: LD_VAR 0 2
75129: NOT
75130: OR
75131: IFFALSE 75135
// exit ;
75133: GO 75442
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75135: LD_ADDR_VAR 0 10
75139: PUSH
75140: LD_INT 5
75142: PUSH
75143: LD_INT 6
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: PUSH
75150: LD_INT 2
75152: PUSH
75153: LD_INT 4
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: PUSH
75160: LD_INT 3
75162: PUSH
75163: LD_INT 5
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PUSH
75170: EMPTY
75171: LIST
75172: LIST
75173: LIST
75174: PUSH
75175: LD_INT 24
75177: PUSH
75178: LD_INT 25
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: PUSH
75185: LD_INT 23
75187: PUSH
75188: LD_INT 27
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: PUSH
75199: LD_INT 42
75201: PUSH
75202: LD_INT 43
75204: PUSH
75205: EMPTY
75206: LIST
75207: LIST
75208: PUSH
75209: LD_INT 44
75211: PUSH
75212: LD_INT 46
75214: PUSH
75215: EMPTY
75216: LIST
75217: LIST
75218: PUSH
75219: LD_INT 45
75221: PUSH
75222: LD_INT 47
75224: PUSH
75225: EMPTY
75226: LIST
75227: LIST
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: LIST
75233: PUSH
75234: EMPTY
75235: LIST
75236: LIST
75237: LIST
75238: ST_TO_ADDR
// result := [ ] ;
75239: LD_ADDR_VAR 0 3
75243: PUSH
75244: EMPTY
75245: ST_TO_ADDR
// for i in turrets do
75246: LD_ADDR_VAR 0 4
75250: PUSH
75251: LD_VAR 0 1
75255: PUSH
75256: FOR_IN
75257: IFFALSE 75440
// begin nat := GetNation ( i ) ;
75259: LD_ADDR_VAR 0 7
75263: PUSH
75264: LD_VAR 0 4
75268: PPUSH
75269: CALL_OW 248
75273: ST_TO_ADDR
// weapon := 0 ;
75274: LD_ADDR_VAR 0 8
75278: PUSH
75279: LD_INT 0
75281: ST_TO_ADDR
// if not nat then
75282: LD_VAR 0 7
75286: NOT
75287: IFFALSE 75291
// continue ;
75289: GO 75256
// for j in list [ nat ] do
75291: LD_ADDR_VAR 0 5
75295: PUSH
75296: LD_VAR 0 10
75300: PUSH
75301: LD_VAR 0 7
75305: ARRAY
75306: PUSH
75307: FOR_IN
75308: IFFALSE 75349
// if GetBWeapon ( i ) = j [ 1 ] then
75310: LD_VAR 0 4
75314: PPUSH
75315: CALL_OW 269
75319: PUSH
75320: LD_VAR 0 5
75324: PUSH
75325: LD_INT 1
75327: ARRAY
75328: EQUAL
75329: IFFALSE 75347
// begin weapon := j [ 2 ] ;
75331: LD_ADDR_VAR 0 8
75335: PUSH
75336: LD_VAR 0 5
75340: PUSH
75341: LD_INT 2
75343: ARRAY
75344: ST_TO_ADDR
// break ;
75345: GO 75349
// end ;
75347: GO 75307
75349: POP
75350: POP
// if not weapon then
75351: LD_VAR 0 8
75355: NOT
75356: IFFALSE 75360
// continue ;
75358: GO 75256
// for k in factories do
75360: LD_ADDR_VAR 0 6
75364: PUSH
75365: LD_VAR 0 2
75369: PUSH
75370: FOR_IN
75371: IFFALSE 75436
// begin weapons := AvailableWeaponList ( k ) ;
75373: LD_ADDR_VAR 0 9
75377: PUSH
75378: LD_VAR 0 6
75382: PPUSH
75383: CALL_OW 478
75387: ST_TO_ADDR
// if not weapons then
75388: LD_VAR 0 9
75392: NOT
75393: IFFALSE 75397
// continue ;
75395: GO 75370
// if weapon in weapons then
75397: LD_VAR 0 8
75401: PUSH
75402: LD_VAR 0 9
75406: IN
75407: IFFALSE 75434
// begin result := [ i , weapon ] ;
75409: LD_ADDR_VAR 0 3
75413: PUSH
75414: LD_VAR 0 4
75418: PUSH
75419: LD_VAR 0 8
75423: PUSH
75424: EMPTY
75425: LIST
75426: LIST
75427: ST_TO_ADDR
// exit ;
75428: POP
75429: POP
75430: POP
75431: POP
75432: GO 75442
// end ; end ;
75434: GO 75370
75436: POP
75437: POP
// end ;
75438: GO 75256
75440: POP
75441: POP
// end ;
75442: LD_VAR 0 3
75446: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75447: LD_INT 0
75449: PPUSH
// if not side or side > 8 then
75450: LD_VAR 0 3
75454: NOT
75455: PUSH
75456: LD_VAR 0 3
75460: PUSH
75461: LD_INT 8
75463: GREATER
75464: OR
75465: IFFALSE 75469
// exit ;
75467: GO 75528
// if not range then
75469: LD_VAR 0 4
75473: NOT
75474: IFFALSE 75485
// range := - 12 ;
75476: LD_ADDR_VAR 0 4
75480: PUSH
75481: LD_INT 12
75483: NEG
75484: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75485: LD_VAR 0 1
75489: PPUSH
75490: LD_VAR 0 2
75494: PPUSH
75495: LD_VAR 0 3
75499: PPUSH
75500: LD_VAR 0 4
75504: PPUSH
75505: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75509: LD_VAR 0 1
75513: PPUSH
75514: LD_VAR 0 2
75518: PPUSH
75519: LD_VAR 0 3
75523: PPUSH
75524: CALL_OW 331
// end ;
75528: LD_VAR 0 5
75532: RET
// export function Video ( mode ) ; begin
75533: LD_INT 0
75535: PPUSH
// ingame_video = mode ;
75536: LD_ADDR_OWVAR 52
75540: PUSH
75541: LD_VAR 0 1
75545: ST_TO_ADDR
// interface_hidden = mode ;
75546: LD_ADDR_OWVAR 54
75550: PUSH
75551: LD_VAR 0 1
75555: ST_TO_ADDR
// end ;
75556: LD_VAR 0 2
75560: RET
// export function Join ( array , element ) ; begin
75561: LD_INT 0
75563: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75564: LD_ADDR_VAR 0 3
75568: PUSH
75569: LD_VAR 0 1
75573: PPUSH
75574: LD_VAR 0 1
75578: PUSH
75579: LD_INT 1
75581: PLUS
75582: PPUSH
75583: LD_VAR 0 2
75587: PPUSH
75588: CALL_OW 1
75592: ST_TO_ADDR
// end ;
75593: LD_VAR 0 3
75597: RET
// export function JoinUnion ( array , element ) ; begin
75598: LD_INT 0
75600: PPUSH
// result := array union element ;
75601: LD_ADDR_VAR 0 3
75605: PUSH
75606: LD_VAR 0 1
75610: PUSH
75611: LD_VAR 0 2
75615: UNION
75616: ST_TO_ADDR
// end ;
75617: LD_VAR 0 3
75621: RET
// export function GetBehemoths ( side ) ; begin
75622: LD_INT 0
75624: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
75625: LD_ADDR_VAR 0 2
75629: PUSH
75630: LD_INT 22
75632: PUSH
75633: LD_VAR 0 1
75637: PUSH
75638: EMPTY
75639: LIST
75640: LIST
75641: PUSH
75642: LD_INT 31
75644: PUSH
75645: LD_INT 25
75647: PUSH
75648: EMPTY
75649: LIST
75650: LIST
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: PPUSH
75656: CALL_OW 69
75660: ST_TO_ADDR
// end ;
75661: LD_VAR 0 2
75665: RET
// export function Shuffle ( array ) ; var i , index ; begin
75666: LD_INT 0
75668: PPUSH
75669: PPUSH
75670: PPUSH
// result := [ ] ;
75671: LD_ADDR_VAR 0 2
75675: PUSH
75676: EMPTY
75677: ST_TO_ADDR
// if not array then
75678: LD_VAR 0 1
75682: NOT
75683: IFFALSE 75687
// exit ;
75685: GO 75786
// Randomize ;
75687: CALL_OW 10
// for i = array downto 1 do
75691: LD_ADDR_VAR 0 3
75695: PUSH
75696: DOUBLE
75697: LD_VAR 0 1
75701: INC
75702: ST_TO_ADDR
75703: LD_INT 1
75705: PUSH
75706: FOR_DOWNTO
75707: IFFALSE 75784
// begin index := rand ( 1 , array ) ;
75709: LD_ADDR_VAR 0 4
75713: PUSH
75714: LD_INT 1
75716: PPUSH
75717: LD_VAR 0 1
75721: PPUSH
75722: CALL_OW 12
75726: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75727: LD_ADDR_VAR 0 2
75731: PUSH
75732: LD_VAR 0 2
75736: PPUSH
75737: LD_VAR 0 2
75741: PUSH
75742: LD_INT 1
75744: PLUS
75745: PPUSH
75746: LD_VAR 0 1
75750: PUSH
75751: LD_VAR 0 4
75755: ARRAY
75756: PPUSH
75757: CALL_OW 2
75761: ST_TO_ADDR
// array := Delete ( array , index ) ;
75762: LD_ADDR_VAR 0 1
75766: PUSH
75767: LD_VAR 0 1
75771: PPUSH
75772: LD_VAR 0 4
75776: PPUSH
75777: CALL_OW 3
75781: ST_TO_ADDR
// end ;
75782: GO 75706
75784: POP
75785: POP
// end ;
75786: LD_VAR 0 2
75790: RET
// export function GetBaseMaterials ( base ) ; begin
75791: LD_INT 0
75793: PPUSH
// result := [ 0 , 0 , 0 ] ;
75794: LD_ADDR_VAR 0 2
75798: PUSH
75799: LD_INT 0
75801: PUSH
75802: LD_INT 0
75804: PUSH
75805: LD_INT 0
75807: PUSH
75808: EMPTY
75809: LIST
75810: LIST
75811: LIST
75812: ST_TO_ADDR
// if not base then
75813: LD_VAR 0 1
75817: NOT
75818: IFFALSE 75822
// exit ;
75820: GO 75871
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75822: LD_ADDR_VAR 0 2
75826: PUSH
75827: LD_VAR 0 1
75831: PPUSH
75832: LD_INT 1
75834: PPUSH
75835: CALL_OW 275
75839: PUSH
75840: LD_VAR 0 1
75844: PPUSH
75845: LD_INT 2
75847: PPUSH
75848: CALL_OW 275
75852: PUSH
75853: LD_VAR 0 1
75857: PPUSH
75858: LD_INT 3
75860: PPUSH
75861: CALL_OW 275
75865: PUSH
75866: EMPTY
75867: LIST
75868: LIST
75869: LIST
75870: ST_TO_ADDR
// end ;
75871: LD_VAR 0 2
75875: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75876: LD_INT 0
75878: PPUSH
75879: PPUSH
// result := array ;
75880: LD_ADDR_VAR 0 3
75884: PUSH
75885: LD_VAR 0 1
75889: ST_TO_ADDR
// if size > 0 then
75890: LD_VAR 0 2
75894: PUSH
75895: LD_INT 0
75897: GREATER
75898: IFFALSE 75944
// for i := array downto size do
75900: LD_ADDR_VAR 0 4
75904: PUSH
75905: DOUBLE
75906: LD_VAR 0 1
75910: INC
75911: ST_TO_ADDR
75912: LD_VAR 0 2
75916: PUSH
75917: FOR_DOWNTO
75918: IFFALSE 75942
// result := Delete ( result , result ) ;
75920: LD_ADDR_VAR 0 3
75924: PUSH
75925: LD_VAR 0 3
75929: PPUSH
75930: LD_VAR 0 3
75934: PPUSH
75935: CALL_OW 3
75939: ST_TO_ADDR
75940: GO 75917
75942: POP
75943: POP
// end ;
75944: LD_VAR 0 3
75948: RET
// export function ComExit ( unit ) ; var tmp ; begin
75949: LD_INT 0
75951: PPUSH
75952: PPUSH
// if not IsInUnit ( unit ) then
75953: LD_VAR 0 1
75957: PPUSH
75958: CALL_OW 310
75962: NOT
75963: IFFALSE 75967
// exit ;
75965: GO 76027
// tmp := IsInUnit ( unit ) ;
75967: LD_ADDR_VAR 0 3
75971: PUSH
75972: LD_VAR 0 1
75976: PPUSH
75977: CALL_OW 310
75981: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75982: LD_VAR 0 3
75986: PPUSH
75987: CALL_OW 247
75991: PUSH
75992: LD_INT 2
75994: EQUAL
75995: IFFALSE 76008
// ComExitVehicle ( unit ) else
75997: LD_VAR 0 1
76001: PPUSH
76002: CALL_OW 121
76006: GO 76017
// ComExitBuilding ( unit ) ;
76008: LD_VAR 0 1
76012: PPUSH
76013: CALL_OW 122
// result := tmp ;
76017: LD_ADDR_VAR 0 2
76021: PUSH
76022: LD_VAR 0 3
76026: ST_TO_ADDR
// end ;
76027: LD_VAR 0 2
76031: RET
// export function ComExitAll ( units ) ; var i ; begin
76032: LD_INT 0
76034: PPUSH
76035: PPUSH
// if not units then
76036: LD_VAR 0 1
76040: NOT
76041: IFFALSE 76045
// exit ;
76043: GO 76071
// for i in units do
76045: LD_ADDR_VAR 0 3
76049: PUSH
76050: LD_VAR 0 1
76054: PUSH
76055: FOR_IN
76056: IFFALSE 76069
// ComExit ( i ) ;
76058: LD_VAR 0 3
76062: PPUSH
76063: CALL 75949 0 1
76067: GO 76055
76069: POP
76070: POP
// end ;
76071: LD_VAR 0 2
76075: RET
// export function ResetHc ; begin
76076: LD_INT 0
76078: PPUSH
// InitHc ;
76079: CALL_OW 19
// hc_importance := 0 ;
76083: LD_ADDR_OWVAR 32
76087: PUSH
76088: LD_INT 0
76090: ST_TO_ADDR
// end ;
76091: LD_VAR 0 1
76095: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76096: LD_INT 0
76098: PPUSH
76099: PPUSH
76100: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76101: LD_ADDR_VAR 0 6
76105: PUSH
76106: LD_VAR 0 1
76110: PUSH
76111: LD_VAR 0 3
76115: PLUS
76116: PUSH
76117: LD_INT 2
76119: DIV
76120: ST_TO_ADDR
// if _x < 0 then
76121: LD_VAR 0 6
76125: PUSH
76126: LD_INT 0
76128: LESS
76129: IFFALSE 76146
// _x := _x * - 1 ;
76131: LD_ADDR_VAR 0 6
76135: PUSH
76136: LD_VAR 0 6
76140: PUSH
76141: LD_INT 1
76143: NEG
76144: MUL
76145: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76146: LD_ADDR_VAR 0 7
76150: PUSH
76151: LD_VAR 0 2
76155: PUSH
76156: LD_VAR 0 4
76160: PLUS
76161: PUSH
76162: LD_INT 2
76164: DIV
76165: ST_TO_ADDR
// if _y < 0 then
76166: LD_VAR 0 7
76170: PUSH
76171: LD_INT 0
76173: LESS
76174: IFFALSE 76191
// _y := _y * - 1 ;
76176: LD_ADDR_VAR 0 7
76180: PUSH
76181: LD_VAR 0 7
76185: PUSH
76186: LD_INT 1
76188: NEG
76189: MUL
76190: ST_TO_ADDR
// result := [ _x , _y ] ;
76191: LD_ADDR_VAR 0 5
76195: PUSH
76196: LD_VAR 0 6
76200: PUSH
76201: LD_VAR 0 7
76205: PUSH
76206: EMPTY
76207: LIST
76208: LIST
76209: ST_TO_ADDR
// end ;
76210: LD_VAR 0 5
76214: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76215: LD_INT 0
76217: PPUSH
76218: PPUSH
76219: PPUSH
76220: PPUSH
// task := GetTaskList ( unit ) ;
76221: LD_ADDR_VAR 0 7
76225: PUSH
76226: LD_VAR 0 1
76230: PPUSH
76231: CALL_OW 437
76235: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76236: LD_VAR 0 7
76240: NOT
76241: PUSH
76242: LD_VAR 0 1
76246: PPUSH
76247: LD_VAR 0 2
76251: PPUSH
76252: CALL_OW 308
76256: NOT
76257: AND
76258: IFFALSE 76262
// exit ;
76260: GO 76380
// if IsInArea ( unit , area ) then
76262: LD_VAR 0 1
76266: PPUSH
76267: LD_VAR 0 2
76271: PPUSH
76272: CALL_OW 308
76276: IFFALSE 76294
// begin ComMoveToArea ( unit , goAway ) ;
76278: LD_VAR 0 1
76282: PPUSH
76283: LD_VAR 0 3
76287: PPUSH
76288: CALL_OW 113
// exit ;
76292: GO 76380
// end ; if task [ 1 ] [ 1 ] <> M then
76294: LD_VAR 0 7
76298: PUSH
76299: LD_INT 1
76301: ARRAY
76302: PUSH
76303: LD_INT 1
76305: ARRAY
76306: PUSH
76307: LD_STRING M
76309: NONEQUAL
76310: IFFALSE 76314
// exit ;
76312: GO 76380
// x := task [ 1 ] [ 2 ] ;
76314: LD_ADDR_VAR 0 5
76318: PUSH
76319: LD_VAR 0 7
76323: PUSH
76324: LD_INT 1
76326: ARRAY
76327: PUSH
76328: LD_INT 2
76330: ARRAY
76331: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76332: LD_ADDR_VAR 0 6
76336: PUSH
76337: LD_VAR 0 7
76341: PUSH
76342: LD_INT 1
76344: ARRAY
76345: PUSH
76346: LD_INT 3
76348: ARRAY
76349: ST_TO_ADDR
// if InArea ( x , y , area ) then
76350: LD_VAR 0 5
76354: PPUSH
76355: LD_VAR 0 6
76359: PPUSH
76360: LD_VAR 0 2
76364: PPUSH
76365: CALL_OW 309
76369: IFFALSE 76380
// ComStop ( unit ) ;
76371: LD_VAR 0 1
76375: PPUSH
76376: CALL_OW 141
// end ;
76380: LD_VAR 0 4
76384: RET
// export function Abs ( value ) ; begin
76385: LD_INT 0
76387: PPUSH
// result := value ;
76388: LD_ADDR_VAR 0 2
76392: PUSH
76393: LD_VAR 0 1
76397: ST_TO_ADDR
// if value < 0 then
76398: LD_VAR 0 1
76402: PUSH
76403: LD_INT 0
76405: LESS
76406: IFFALSE 76423
// result := value * - 1 ;
76408: LD_ADDR_VAR 0 2
76412: PUSH
76413: LD_VAR 0 1
76417: PUSH
76418: LD_INT 1
76420: NEG
76421: MUL
76422: ST_TO_ADDR
// end ;
76423: LD_VAR 0 2
76427: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76428: LD_INT 0
76430: PPUSH
76431: PPUSH
76432: PPUSH
76433: PPUSH
76434: PPUSH
76435: PPUSH
76436: PPUSH
76437: PPUSH
// if not unit or not building then
76438: LD_VAR 0 1
76442: NOT
76443: PUSH
76444: LD_VAR 0 2
76448: NOT
76449: OR
76450: IFFALSE 76454
// exit ;
76452: GO 76680
// x := GetX ( building ) ;
76454: LD_ADDR_VAR 0 4
76458: PUSH
76459: LD_VAR 0 2
76463: PPUSH
76464: CALL_OW 250
76468: ST_TO_ADDR
// y := GetY ( building ) ;
76469: LD_ADDR_VAR 0 6
76473: PUSH
76474: LD_VAR 0 2
76478: PPUSH
76479: CALL_OW 251
76483: ST_TO_ADDR
// d := GetDir ( building ) ;
76484: LD_ADDR_VAR 0 8
76488: PUSH
76489: LD_VAR 0 2
76493: PPUSH
76494: CALL_OW 254
76498: ST_TO_ADDR
// r := 4 ;
76499: LD_ADDR_VAR 0 9
76503: PUSH
76504: LD_INT 4
76506: ST_TO_ADDR
// for i := 1 to 5 do
76507: LD_ADDR_VAR 0 10
76511: PUSH
76512: DOUBLE
76513: LD_INT 1
76515: DEC
76516: ST_TO_ADDR
76517: LD_INT 5
76519: PUSH
76520: FOR_TO
76521: IFFALSE 76678
// begin _x := ShiftX ( x , d , r + i ) ;
76523: LD_ADDR_VAR 0 5
76527: PUSH
76528: LD_VAR 0 4
76532: PPUSH
76533: LD_VAR 0 8
76537: PPUSH
76538: LD_VAR 0 9
76542: PUSH
76543: LD_VAR 0 10
76547: PLUS
76548: PPUSH
76549: CALL_OW 272
76553: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76554: LD_ADDR_VAR 0 7
76558: PUSH
76559: LD_VAR 0 6
76563: PPUSH
76564: LD_VAR 0 8
76568: PPUSH
76569: LD_VAR 0 9
76573: PUSH
76574: LD_VAR 0 10
76578: PLUS
76579: PPUSH
76580: CALL_OW 273
76584: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76585: LD_VAR 0 5
76589: PPUSH
76590: LD_VAR 0 7
76594: PPUSH
76595: CALL_OW 488
76599: PUSH
76600: LD_VAR 0 5
76604: PPUSH
76605: LD_VAR 0 7
76609: PPUSH
76610: CALL_OW 428
76614: PPUSH
76615: CALL_OW 247
76619: PUSH
76620: LD_INT 3
76622: PUSH
76623: LD_INT 2
76625: PUSH
76626: EMPTY
76627: LIST
76628: LIST
76629: IN
76630: NOT
76631: AND
76632: IFFALSE 76676
// begin ComMoveXY ( unit , _x , _y ) ;
76634: LD_VAR 0 1
76638: PPUSH
76639: LD_VAR 0 5
76643: PPUSH
76644: LD_VAR 0 7
76648: PPUSH
76649: CALL_OW 111
// result := [ _x , _y ] ;
76653: LD_ADDR_VAR 0 3
76657: PUSH
76658: LD_VAR 0 5
76662: PUSH
76663: LD_VAR 0 7
76667: PUSH
76668: EMPTY
76669: LIST
76670: LIST
76671: ST_TO_ADDR
// exit ;
76672: POP
76673: POP
76674: GO 76680
// end ; end ;
76676: GO 76520
76678: POP
76679: POP
// end ;
76680: LD_VAR 0 3
76684: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76685: LD_INT 0
76687: PPUSH
76688: PPUSH
76689: PPUSH
// result := 0 ;
76690: LD_ADDR_VAR 0 3
76694: PUSH
76695: LD_INT 0
76697: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76698: LD_VAR 0 1
76702: PUSH
76703: LD_INT 0
76705: LESS
76706: PUSH
76707: LD_VAR 0 1
76711: PUSH
76712: LD_INT 8
76714: GREATER
76715: OR
76716: PUSH
76717: LD_VAR 0 2
76721: PUSH
76722: LD_INT 0
76724: LESS
76725: OR
76726: PUSH
76727: LD_VAR 0 2
76731: PUSH
76732: LD_INT 8
76734: GREATER
76735: OR
76736: IFFALSE 76740
// exit ;
76738: GO 76815
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76740: LD_ADDR_VAR 0 4
76744: PUSH
76745: LD_INT 22
76747: PUSH
76748: LD_VAR 0 2
76752: PUSH
76753: EMPTY
76754: LIST
76755: LIST
76756: PPUSH
76757: CALL_OW 69
76761: PUSH
76762: FOR_IN
76763: IFFALSE 76813
// begin un := UnitShoot ( i ) ;
76765: LD_ADDR_VAR 0 5
76769: PUSH
76770: LD_VAR 0 4
76774: PPUSH
76775: CALL_OW 504
76779: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76780: LD_VAR 0 5
76784: PPUSH
76785: CALL_OW 255
76789: PUSH
76790: LD_VAR 0 1
76794: EQUAL
76795: IFFALSE 76811
// begin result := un ;
76797: LD_ADDR_VAR 0 3
76801: PUSH
76802: LD_VAR 0 5
76806: ST_TO_ADDR
// exit ;
76807: POP
76808: POP
76809: GO 76815
// end ; end ;
76811: GO 76762
76813: POP
76814: POP
// end ;
76815: LD_VAR 0 3
76819: RET
// export function GetCargoBay ( units ) ; begin
76820: LD_INT 0
76822: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76823: LD_ADDR_VAR 0 2
76827: PUSH
76828: LD_VAR 0 1
76832: PPUSH
76833: LD_INT 2
76835: PUSH
76836: LD_INT 34
76838: PUSH
76839: LD_INT 12
76841: PUSH
76842: EMPTY
76843: LIST
76844: LIST
76845: PUSH
76846: LD_INT 34
76848: PUSH
76849: LD_INT 51
76851: PUSH
76852: EMPTY
76853: LIST
76854: LIST
76855: PUSH
76856: LD_INT 34
76858: PUSH
76859: LD_INT 32
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: PUSH
76866: LD_INT 34
76868: PUSH
76869: LD_EXP 51
76873: PUSH
76874: EMPTY
76875: LIST
76876: LIST
76877: PUSH
76878: EMPTY
76879: LIST
76880: LIST
76881: LIST
76882: LIST
76883: LIST
76884: PPUSH
76885: CALL_OW 72
76889: ST_TO_ADDR
// end ;
76890: LD_VAR 0 2
76894: RET
// export function Negate ( value ) ; begin
76895: LD_INT 0
76897: PPUSH
// result := not value ;
76898: LD_ADDR_VAR 0 2
76902: PUSH
76903: LD_VAR 0 1
76907: NOT
76908: ST_TO_ADDR
// end ;
76909: LD_VAR 0 2
76913: RET
// export function Inc ( value ) ; begin
76914: LD_INT 0
76916: PPUSH
// result := value + 1 ;
76917: LD_ADDR_VAR 0 2
76921: PUSH
76922: LD_VAR 0 1
76926: PUSH
76927: LD_INT 1
76929: PLUS
76930: ST_TO_ADDR
// end ;
76931: LD_VAR 0 2
76935: RET
// export function Dec ( value ) ; begin
76936: LD_INT 0
76938: PPUSH
// result := value - 1 ;
76939: LD_ADDR_VAR 0 2
76943: PUSH
76944: LD_VAR 0 1
76948: PUSH
76949: LD_INT 1
76951: MINUS
76952: ST_TO_ADDR
// end ;
76953: LD_VAR 0 2
76957: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76958: LD_INT 0
76960: PPUSH
76961: PPUSH
76962: PPUSH
76963: PPUSH
76964: PPUSH
76965: PPUSH
76966: PPUSH
76967: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76968: LD_VAR 0 1
76972: PPUSH
76973: LD_VAR 0 2
76977: PPUSH
76978: CALL_OW 488
76982: NOT
76983: PUSH
76984: LD_VAR 0 3
76988: PPUSH
76989: LD_VAR 0 4
76993: PPUSH
76994: CALL_OW 488
76998: NOT
76999: OR
77000: IFFALSE 77013
// begin result := - 1 ;
77002: LD_ADDR_VAR 0 5
77006: PUSH
77007: LD_INT 1
77009: NEG
77010: ST_TO_ADDR
// exit ;
77011: GO 77248
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77013: LD_ADDR_VAR 0 12
77017: PUSH
77018: LD_VAR 0 1
77022: PPUSH
77023: LD_VAR 0 2
77027: PPUSH
77028: LD_VAR 0 3
77032: PPUSH
77033: LD_VAR 0 4
77037: PPUSH
77038: CALL 76096 0 4
77042: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77043: LD_ADDR_VAR 0 11
77047: PUSH
77048: LD_VAR 0 1
77052: PPUSH
77053: LD_VAR 0 2
77057: PPUSH
77058: LD_VAR 0 12
77062: PUSH
77063: LD_INT 1
77065: ARRAY
77066: PPUSH
77067: LD_VAR 0 12
77071: PUSH
77072: LD_INT 2
77074: ARRAY
77075: PPUSH
77076: CALL_OW 298
77080: ST_TO_ADDR
// distance := 9999 ;
77081: LD_ADDR_VAR 0 10
77085: PUSH
77086: LD_INT 9999
77088: ST_TO_ADDR
// for i := 0 to 5 do
77089: LD_ADDR_VAR 0 6
77093: PUSH
77094: DOUBLE
77095: LD_INT 0
77097: DEC
77098: ST_TO_ADDR
77099: LD_INT 5
77101: PUSH
77102: FOR_TO
77103: IFFALSE 77246
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77105: LD_ADDR_VAR 0 7
77109: PUSH
77110: LD_VAR 0 1
77114: PPUSH
77115: LD_VAR 0 6
77119: PPUSH
77120: LD_VAR 0 11
77124: PPUSH
77125: CALL_OW 272
77129: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77130: LD_ADDR_VAR 0 8
77134: PUSH
77135: LD_VAR 0 2
77139: PPUSH
77140: LD_VAR 0 6
77144: PPUSH
77145: LD_VAR 0 11
77149: PPUSH
77150: CALL_OW 273
77154: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77155: LD_VAR 0 7
77159: PPUSH
77160: LD_VAR 0 8
77164: PPUSH
77165: CALL_OW 488
77169: NOT
77170: IFFALSE 77174
// continue ;
77172: GO 77102
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77174: LD_ADDR_VAR 0 9
77178: PUSH
77179: LD_VAR 0 12
77183: PUSH
77184: LD_INT 1
77186: ARRAY
77187: PPUSH
77188: LD_VAR 0 12
77192: PUSH
77193: LD_INT 2
77195: ARRAY
77196: PPUSH
77197: LD_VAR 0 7
77201: PPUSH
77202: LD_VAR 0 8
77206: PPUSH
77207: CALL_OW 298
77211: ST_TO_ADDR
// if tmp < distance then
77212: LD_VAR 0 9
77216: PUSH
77217: LD_VAR 0 10
77221: LESS
77222: IFFALSE 77244
// begin result := i ;
77224: LD_ADDR_VAR 0 5
77228: PUSH
77229: LD_VAR 0 6
77233: ST_TO_ADDR
// distance := tmp ;
77234: LD_ADDR_VAR 0 10
77238: PUSH
77239: LD_VAR 0 9
77243: ST_TO_ADDR
// end ; end ;
77244: GO 77102
77246: POP
77247: POP
// end ;
77248: LD_VAR 0 5
77252: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77253: LD_INT 0
77255: PPUSH
77256: PPUSH
// if not driver or not IsInUnit ( driver ) then
77257: LD_VAR 0 1
77261: NOT
77262: PUSH
77263: LD_VAR 0 1
77267: PPUSH
77268: CALL_OW 310
77272: NOT
77273: OR
77274: IFFALSE 77278
// exit ;
77276: GO 77368
// vehicle := IsInUnit ( driver ) ;
77278: LD_ADDR_VAR 0 3
77282: PUSH
77283: LD_VAR 0 1
77287: PPUSH
77288: CALL_OW 310
77292: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77293: LD_VAR 0 1
77297: PPUSH
77298: LD_STRING \
77300: PUSH
77301: LD_INT 0
77303: PUSH
77304: LD_INT 0
77306: PUSH
77307: LD_INT 0
77309: PUSH
77310: LD_INT 0
77312: PUSH
77313: LD_INT 0
77315: PUSH
77316: LD_INT 0
77318: PUSH
77319: EMPTY
77320: LIST
77321: LIST
77322: LIST
77323: LIST
77324: LIST
77325: LIST
77326: LIST
77327: PUSH
77328: LD_STRING E
77330: PUSH
77331: LD_INT 0
77333: PUSH
77334: LD_INT 0
77336: PUSH
77337: LD_VAR 0 3
77341: PUSH
77342: LD_INT 0
77344: PUSH
77345: LD_INT 0
77347: PUSH
77348: LD_INT 0
77350: PUSH
77351: EMPTY
77352: LIST
77353: LIST
77354: LIST
77355: LIST
77356: LIST
77357: LIST
77358: LIST
77359: PUSH
77360: EMPTY
77361: LIST
77362: LIST
77363: PPUSH
77364: CALL_OW 446
// end ;
77368: LD_VAR 0 2
77372: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77373: LD_INT 0
77375: PPUSH
77376: PPUSH
// if not driver or not IsInUnit ( driver ) then
77377: LD_VAR 0 1
77381: NOT
77382: PUSH
77383: LD_VAR 0 1
77387: PPUSH
77388: CALL_OW 310
77392: NOT
77393: OR
77394: IFFALSE 77398
// exit ;
77396: GO 77488
// vehicle := IsInUnit ( driver ) ;
77398: LD_ADDR_VAR 0 3
77402: PUSH
77403: LD_VAR 0 1
77407: PPUSH
77408: CALL_OW 310
77412: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77413: LD_VAR 0 1
77417: PPUSH
77418: LD_STRING \
77420: PUSH
77421: LD_INT 0
77423: PUSH
77424: LD_INT 0
77426: PUSH
77427: LD_INT 0
77429: PUSH
77430: LD_INT 0
77432: PUSH
77433: LD_INT 0
77435: PUSH
77436: LD_INT 0
77438: PUSH
77439: EMPTY
77440: LIST
77441: LIST
77442: LIST
77443: LIST
77444: LIST
77445: LIST
77446: LIST
77447: PUSH
77448: LD_STRING E
77450: PUSH
77451: LD_INT 0
77453: PUSH
77454: LD_INT 0
77456: PUSH
77457: LD_VAR 0 3
77461: PUSH
77462: LD_INT 0
77464: PUSH
77465: LD_INT 0
77467: PUSH
77468: LD_INT 0
77470: PUSH
77471: EMPTY
77472: LIST
77473: LIST
77474: LIST
77475: LIST
77476: LIST
77477: LIST
77478: LIST
77479: PUSH
77480: EMPTY
77481: LIST
77482: LIST
77483: PPUSH
77484: CALL_OW 447
// end ;
77488: LD_VAR 0 2
77492: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77493: LD_INT 0
77495: PPUSH
77496: PPUSH
77497: PPUSH
// tmp := [ ] ;
77498: LD_ADDR_VAR 0 5
77502: PUSH
77503: EMPTY
77504: ST_TO_ADDR
// for i in units do
77505: LD_ADDR_VAR 0 4
77509: PUSH
77510: LD_VAR 0 1
77514: PUSH
77515: FOR_IN
77516: IFFALSE 77554
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77518: LD_ADDR_VAR 0 5
77522: PUSH
77523: LD_VAR 0 5
77527: PPUSH
77528: LD_VAR 0 5
77532: PUSH
77533: LD_INT 1
77535: PLUS
77536: PPUSH
77537: LD_VAR 0 4
77541: PPUSH
77542: CALL_OW 256
77546: PPUSH
77547: CALL_OW 2
77551: ST_TO_ADDR
77552: GO 77515
77554: POP
77555: POP
// if not tmp then
77556: LD_VAR 0 5
77560: NOT
77561: IFFALSE 77565
// exit ;
77563: GO 77613
// if asc then
77565: LD_VAR 0 2
77569: IFFALSE 77593
// result := SortListByListAsc ( units , tmp ) else
77571: LD_ADDR_VAR 0 3
77575: PUSH
77576: LD_VAR 0 1
77580: PPUSH
77581: LD_VAR 0 5
77585: PPUSH
77586: CALL_OW 76
77590: ST_TO_ADDR
77591: GO 77613
// result := SortListByListDesc ( units , tmp ) ;
77593: LD_ADDR_VAR 0 3
77597: PUSH
77598: LD_VAR 0 1
77602: PPUSH
77603: LD_VAR 0 5
77607: PPUSH
77608: CALL_OW 77
77612: ST_TO_ADDR
// end ;
77613: LD_VAR 0 3
77617: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77618: LD_INT 0
77620: PPUSH
77621: PPUSH
// task := GetTaskList ( mech ) ;
77622: LD_ADDR_VAR 0 4
77626: PUSH
77627: LD_VAR 0 1
77631: PPUSH
77632: CALL_OW 437
77636: ST_TO_ADDR
// if not task then
77637: LD_VAR 0 4
77641: NOT
77642: IFFALSE 77646
// exit ;
77644: GO 77688
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77646: LD_ADDR_VAR 0 3
77650: PUSH
77651: LD_VAR 0 4
77655: PUSH
77656: LD_INT 1
77658: ARRAY
77659: PUSH
77660: LD_INT 1
77662: ARRAY
77663: PUSH
77664: LD_STRING r
77666: EQUAL
77667: PUSH
77668: LD_VAR 0 4
77672: PUSH
77673: LD_INT 1
77675: ARRAY
77676: PUSH
77677: LD_INT 4
77679: ARRAY
77680: PUSH
77681: LD_VAR 0 2
77685: EQUAL
77686: AND
77687: ST_TO_ADDR
// end ;
77688: LD_VAR 0 3
77692: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77693: LD_INT 0
77695: PPUSH
// SetDir ( unit , d ) ;
77696: LD_VAR 0 1
77700: PPUSH
77701: LD_VAR 0 4
77705: PPUSH
77706: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77710: LD_VAR 0 1
77714: PPUSH
77715: LD_VAR 0 2
77719: PPUSH
77720: LD_VAR 0 3
77724: PPUSH
77725: LD_VAR 0 5
77729: PPUSH
77730: CALL_OW 48
// end ;
77734: LD_VAR 0 6
77738: RET
// export function ToNaturalNumber ( number ) ; begin
77739: LD_INT 0
77741: PPUSH
// result := number div 1 ;
77742: LD_ADDR_VAR 0 2
77746: PUSH
77747: LD_VAR 0 1
77751: PUSH
77752: LD_INT 1
77754: DIV
77755: ST_TO_ADDR
// if number < 0 then
77756: LD_VAR 0 1
77760: PUSH
77761: LD_INT 0
77763: LESS
77764: IFFALSE 77774
// result := 0 ;
77766: LD_ADDR_VAR 0 2
77770: PUSH
77771: LD_INT 0
77773: ST_TO_ADDR
// end ;
77774: LD_VAR 0 2
77778: RET
// export function SortByClass ( units , class ) ; var un ; begin
77779: LD_INT 0
77781: PPUSH
77782: PPUSH
// if not units or not class then
77783: LD_VAR 0 1
77787: NOT
77788: PUSH
77789: LD_VAR 0 2
77793: NOT
77794: OR
77795: IFFALSE 77799
// exit ;
77797: GO 77894
// result := [ ] ;
77799: LD_ADDR_VAR 0 3
77803: PUSH
77804: EMPTY
77805: ST_TO_ADDR
// for un in units do
77806: LD_ADDR_VAR 0 4
77810: PUSH
77811: LD_VAR 0 1
77815: PUSH
77816: FOR_IN
77817: IFFALSE 77892
// if GetClass ( un ) = class then
77819: LD_VAR 0 4
77823: PPUSH
77824: CALL_OW 257
77828: PUSH
77829: LD_VAR 0 2
77833: EQUAL
77834: IFFALSE 77861
// result := Insert ( result , 1 , un ) else
77836: LD_ADDR_VAR 0 3
77840: PUSH
77841: LD_VAR 0 3
77845: PPUSH
77846: LD_INT 1
77848: PPUSH
77849: LD_VAR 0 4
77853: PPUSH
77854: CALL_OW 2
77858: ST_TO_ADDR
77859: GO 77890
// result := Replace ( result , result + 1 , un ) ;
77861: LD_ADDR_VAR 0 3
77865: PUSH
77866: LD_VAR 0 3
77870: PPUSH
77871: LD_VAR 0 3
77875: PUSH
77876: LD_INT 1
77878: PLUS
77879: PPUSH
77880: LD_VAR 0 4
77884: PPUSH
77885: CALL_OW 1
77889: ST_TO_ADDR
77890: GO 77816
77892: POP
77893: POP
// end ;
77894: LD_VAR 0 3
77898: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77899: LD_INT 0
77901: PPUSH
77902: PPUSH
77903: PPUSH
77904: PPUSH
77905: PPUSH
77906: PPUSH
77907: PPUSH
// result := [ ] ;
77908: LD_ADDR_VAR 0 4
77912: PUSH
77913: EMPTY
77914: ST_TO_ADDR
// if x - r < 0 then
77915: LD_VAR 0 1
77919: PUSH
77920: LD_VAR 0 3
77924: MINUS
77925: PUSH
77926: LD_INT 0
77928: LESS
77929: IFFALSE 77941
// min_x := 0 else
77931: LD_ADDR_VAR 0 8
77935: PUSH
77936: LD_INT 0
77938: ST_TO_ADDR
77939: GO 77957
// min_x := x - r ;
77941: LD_ADDR_VAR 0 8
77945: PUSH
77946: LD_VAR 0 1
77950: PUSH
77951: LD_VAR 0 3
77955: MINUS
77956: ST_TO_ADDR
// if y - r < 0 then
77957: LD_VAR 0 2
77961: PUSH
77962: LD_VAR 0 3
77966: MINUS
77967: PUSH
77968: LD_INT 0
77970: LESS
77971: IFFALSE 77983
// min_y := 0 else
77973: LD_ADDR_VAR 0 7
77977: PUSH
77978: LD_INT 0
77980: ST_TO_ADDR
77981: GO 77999
// min_y := y - r ;
77983: LD_ADDR_VAR 0 7
77987: PUSH
77988: LD_VAR 0 2
77992: PUSH
77993: LD_VAR 0 3
77997: MINUS
77998: ST_TO_ADDR
// max_x := x + r ;
77999: LD_ADDR_VAR 0 9
78003: PUSH
78004: LD_VAR 0 1
78008: PUSH
78009: LD_VAR 0 3
78013: PLUS
78014: ST_TO_ADDR
// max_y := y + r ;
78015: LD_ADDR_VAR 0 10
78019: PUSH
78020: LD_VAR 0 2
78024: PUSH
78025: LD_VAR 0 3
78029: PLUS
78030: ST_TO_ADDR
// for _x = min_x to max_x do
78031: LD_ADDR_VAR 0 5
78035: PUSH
78036: DOUBLE
78037: LD_VAR 0 8
78041: DEC
78042: ST_TO_ADDR
78043: LD_VAR 0 9
78047: PUSH
78048: FOR_TO
78049: IFFALSE 78150
// for _y = min_y to max_y do
78051: LD_ADDR_VAR 0 6
78055: PUSH
78056: DOUBLE
78057: LD_VAR 0 7
78061: DEC
78062: ST_TO_ADDR
78063: LD_VAR 0 10
78067: PUSH
78068: FOR_TO
78069: IFFALSE 78146
// begin if not ValidHex ( _x , _y ) then
78071: LD_VAR 0 5
78075: PPUSH
78076: LD_VAR 0 6
78080: PPUSH
78081: CALL_OW 488
78085: NOT
78086: IFFALSE 78090
// continue ;
78088: GO 78068
// if GetResourceTypeXY ( _x , _y ) then
78090: LD_VAR 0 5
78094: PPUSH
78095: LD_VAR 0 6
78099: PPUSH
78100: CALL_OW 283
78104: IFFALSE 78144
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78106: LD_ADDR_VAR 0 4
78110: PUSH
78111: LD_VAR 0 4
78115: PPUSH
78116: LD_VAR 0 4
78120: PUSH
78121: LD_INT 1
78123: PLUS
78124: PPUSH
78125: LD_VAR 0 5
78129: PUSH
78130: LD_VAR 0 6
78134: PUSH
78135: EMPTY
78136: LIST
78137: LIST
78138: PPUSH
78139: CALL_OW 1
78143: ST_TO_ADDR
// end ;
78144: GO 78068
78146: POP
78147: POP
78148: GO 78048
78150: POP
78151: POP
// end ;
78152: LD_VAR 0 4
78156: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78157: LD_INT 0
78159: PPUSH
78160: PPUSH
78161: PPUSH
78162: PPUSH
78163: PPUSH
78164: PPUSH
78165: PPUSH
78166: PPUSH
// if not units then
78167: LD_VAR 0 1
78171: NOT
78172: IFFALSE 78176
// exit ;
78174: GO 78687
// result := UnitFilter ( units , [ f_ok ] ) ;
78176: LD_ADDR_VAR 0 3
78180: PUSH
78181: LD_VAR 0 1
78185: PPUSH
78186: LD_INT 50
78188: PUSH
78189: EMPTY
78190: LIST
78191: PPUSH
78192: CALL_OW 72
78196: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78197: LD_ADDR_VAR 0 8
78201: PUSH
78202: LD_VAR 0 1
78206: PUSH
78207: LD_INT 1
78209: ARRAY
78210: PPUSH
78211: CALL_OW 255
78215: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78216: LD_ADDR_VAR 0 10
78220: PUSH
78221: LD_INT 29
78223: PUSH
78224: LD_EXP 54
78228: PUSH
78229: LD_INT 49
78231: PUSH
78232: EMPTY
78233: LIST
78234: LIST
78235: LIST
78236: ST_TO_ADDR
// if not result then
78237: LD_VAR 0 3
78241: NOT
78242: IFFALSE 78246
// exit ;
78244: GO 78687
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78246: LD_ADDR_VAR 0 5
78250: PUSH
78251: LD_INT 81
78253: PUSH
78254: LD_VAR 0 8
78258: PUSH
78259: EMPTY
78260: LIST
78261: LIST
78262: PPUSH
78263: CALL_OW 69
78267: ST_TO_ADDR
// for i in result do
78268: LD_ADDR_VAR 0 4
78272: PUSH
78273: LD_VAR 0 3
78277: PUSH
78278: FOR_IN
78279: IFFALSE 78685
// begin tag := GetTag ( i ) + 1 ;
78281: LD_ADDR_VAR 0 9
78285: PUSH
78286: LD_VAR 0 4
78290: PPUSH
78291: CALL_OW 110
78295: PUSH
78296: LD_INT 1
78298: PLUS
78299: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78300: LD_ADDR_VAR 0 7
78304: PUSH
78305: LD_VAR 0 4
78309: PPUSH
78310: CALL_OW 250
78314: PPUSH
78315: LD_VAR 0 4
78319: PPUSH
78320: CALL_OW 251
78324: PPUSH
78325: LD_INT 6
78327: PPUSH
78328: CALL 77899 0 3
78332: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78333: LD_VAR 0 7
78337: PUSH
78338: LD_VAR 0 4
78342: PPUSH
78343: CALL_OW 264
78347: PUSH
78348: LD_VAR 0 10
78352: IN
78353: NOT
78354: AND
78355: IFFALSE 78394
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78357: LD_VAR 0 4
78361: PPUSH
78362: LD_VAR 0 7
78366: PUSH
78367: LD_INT 1
78369: ARRAY
78370: PUSH
78371: LD_INT 1
78373: ARRAY
78374: PPUSH
78375: LD_VAR 0 7
78379: PUSH
78380: LD_INT 1
78382: ARRAY
78383: PUSH
78384: LD_INT 2
78386: ARRAY
78387: PPUSH
78388: CALL_OW 116
78392: GO 78683
// if path > tag then
78394: LD_VAR 0 2
78398: PUSH
78399: LD_VAR 0 9
78403: GREATER
78404: IFFALSE 78612
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
78406: LD_ADDR_VAR 0 6
78410: PUSH
78411: LD_VAR 0 5
78415: PPUSH
78416: LD_INT 91
78418: PUSH
78419: LD_VAR 0 4
78423: PUSH
78424: LD_INT 12
78426: PUSH
78427: EMPTY
78428: LIST
78429: LIST
78430: LIST
78431: PPUSH
78432: CALL_OW 72
78436: ST_TO_ADDR
// if nearEnemy then
78437: LD_VAR 0 6
78441: IFFALSE 78510
// begin if GetWeapon ( i ) = ru_time_lapser then
78443: LD_VAR 0 4
78447: PPUSH
78448: CALL_OW 264
78452: PUSH
78453: LD_INT 49
78455: EQUAL
78456: IFFALSE 78484
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78458: LD_VAR 0 4
78462: PPUSH
78463: LD_VAR 0 6
78467: PPUSH
78468: LD_VAR 0 4
78472: PPUSH
78473: CALL_OW 74
78477: PPUSH
78478: CALL_OW 112
78482: GO 78508
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
78484: LD_VAR 0 4
78488: PPUSH
78489: LD_VAR 0 6
78493: PPUSH
78494: LD_VAR 0 4
78498: PPUSH
78499: CALL_OW 74
78503: PPUSH
78504: CALL_OW 115
// end else
78508: GO 78610
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78510: LD_VAR 0 4
78514: PPUSH
78515: LD_VAR 0 2
78519: PUSH
78520: LD_VAR 0 9
78524: ARRAY
78525: PUSH
78526: LD_INT 1
78528: ARRAY
78529: PPUSH
78530: LD_VAR 0 2
78534: PUSH
78535: LD_VAR 0 9
78539: ARRAY
78540: PUSH
78541: LD_INT 2
78543: ARRAY
78544: PPUSH
78545: CALL_OW 297
78549: PUSH
78550: LD_INT 6
78552: GREATER
78553: IFFALSE 78596
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78555: LD_VAR 0 4
78559: PPUSH
78560: LD_VAR 0 2
78564: PUSH
78565: LD_VAR 0 9
78569: ARRAY
78570: PUSH
78571: LD_INT 1
78573: ARRAY
78574: PPUSH
78575: LD_VAR 0 2
78579: PUSH
78580: LD_VAR 0 9
78584: ARRAY
78585: PUSH
78586: LD_INT 2
78588: ARRAY
78589: PPUSH
78590: CALL_OW 114
78594: GO 78610
// SetTag ( i , tag ) ;
78596: LD_VAR 0 4
78600: PPUSH
78601: LD_VAR 0 9
78605: PPUSH
78606: CALL_OW 109
// end else
78610: GO 78683
// if enemy then
78612: LD_VAR 0 5
78616: IFFALSE 78683
// begin if GetWeapon ( i ) = ru_time_lapser then
78618: LD_VAR 0 4
78622: PPUSH
78623: CALL_OW 264
78627: PUSH
78628: LD_INT 49
78630: EQUAL
78631: IFFALSE 78659
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78633: LD_VAR 0 4
78637: PPUSH
78638: LD_VAR 0 5
78642: PPUSH
78643: LD_VAR 0 4
78647: PPUSH
78648: CALL_OW 74
78652: PPUSH
78653: CALL_OW 112
78657: GO 78683
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78659: LD_VAR 0 4
78663: PPUSH
78664: LD_VAR 0 5
78668: PPUSH
78669: LD_VAR 0 4
78673: PPUSH
78674: CALL_OW 74
78678: PPUSH
78679: CALL_OW 115
// end ; end ;
78683: GO 78278
78685: POP
78686: POP
// end ;
78687: LD_VAR 0 3
78691: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78692: LD_INT 0
78694: PPUSH
78695: PPUSH
78696: PPUSH
// if not unit or IsInUnit ( unit ) then
78697: LD_VAR 0 1
78701: NOT
78702: PUSH
78703: LD_VAR 0 1
78707: PPUSH
78708: CALL_OW 310
78712: OR
78713: IFFALSE 78717
// exit ;
78715: GO 78808
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78717: LD_ADDR_VAR 0 4
78721: PUSH
78722: LD_VAR 0 1
78726: PPUSH
78727: CALL_OW 250
78731: PPUSH
78732: LD_VAR 0 2
78736: PPUSH
78737: LD_INT 1
78739: PPUSH
78740: CALL_OW 272
78744: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78745: LD_ADDR_VAR 0 5
78749: PUSH
78750: LD_VAR 0 1
78754: PPUSH
78755: CALL_OW 251
78759: PPUSH
78760: LD_VAR 0 2
78764: PPUSH
78765: LD_INT 1
78767: PPUSH
78768: CALL_OW 273
78772: ST_TO_ADDR
// if ValidHex ( x , y ) then
78773: LD_VAR 0 4
78777: PPUSH
78778: LD_VAR 0 5
78782: PPUSH
78783: CALL_OW 488
78787: IFFALSE 78808
// ComTurnXY ( unit , x , y ) ;
78789: LD_VAR 0 1
78793: PPUSH
78794: LD_VAR 0 4
78798: PPUSH
78799: LD_VAR 0 5
78803: PPUSH
78804: CALL_OW 118
// end ;
78808: LD_VAR 0 3
78812: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78813: LD_INT 0
78815: PPUSH
78816: PPUSH
// result := false ;
78817: LD_ADDR_VAR 0 3
78821: PUSH
78822: LD_INT 0
78824: ST_TO_ADDR
// if not units then
78825: LD_VAR 0 2
78829: NOT
78830: IFFALSE 78834
// exit ;
78832: GO 78879
// for i in units do
78834: LD_ADDR_VAR 0 4
78838: PUSH
78839: LD_VAR 0 2
78843: PUSH
78844: FOR_IN
78845: IFFALSE 78877
// if See ( side , i ) then
78847: LD_VAR 0 1
78851: PPUSH
78852: LD_VAR 0 4
78856: PPUSH
78857: CALL_OW 292
78861: IFFALSE 78875
// begin result := true ;
78863: LD_ADDR_VAR 0 3
78867: PUSH
78868: LD_INT 1
78870: ST_TO_ADDR
// exit ;
78871: POP
78872: POP
78873: GO 78879
// end ;
78875: GO 78844
78877: POP
78878: POP
// end ;
78879: LD_VAR 0 3
78883: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78884: LD_INT 0
78886: PPUSH
78887: PPUSH
78888: PPUSH
78889: PPUSH
// if not unit or not points then
78890: LD_VAR 0 1
78894: NOT
78895: PUSH
78896: LD_VAR 0 2
78900: NOT
78901: OR
78902: IFFALSE 78906
// exit ;
78904: GO 78996
// dist := 99999 ;
78906: LD_ADDR_VAR 0 5
78910: PUSH
78911: LD_INT 99999
78913: ST_TO_ADDR
// for i in points do
78914: LD_ADDR_VAR 0 4
78918: PUSH
78919: LD_VAR 0 2
78923: PUSH
78924: FOR_IN
78925: IFFALSE 78994
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78927: LD_ADDR_VAR 0 6
78931: PUSH
78932: LD_VAR 0 1
78936: PPUSH
78937: LD_VAR 0 4
78941: PUSH
78942: LD_INT 1
78944: ARRAY
78945: PPUSH
78946: LD_VAR 0 4
78950: PUSH
78951: LD_INT 2
78953: ARRAY
78954: PPUSH
78955: CALL_OW 297
78959: ST_TO_ADDR
// if tmpDist < dist then
78960: LD_VAR 0 6
78964: PUSH
78965: LD_VAR 0 5
78969: LESS
78970: IFFALSE 78992
// begin result := i ;
78972: LD_ADDR_VAR 0 3
78976: PUSH
78977: LD_VAR 0 4
78981: ST_TO_ADDR
// dist := tmpDist ;
78982: LD_ADDR_VAR 0 5
78986: PUSH
78987: LD_VAR 0 6
78991: ST_TO_ADDR
// end ; end ;
78992: GO 78924
78994: POP
78995: POP
// end ;
78996: LD_VAR 0 3
79000: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79001: LD_INT 0
79003: PPUSH
// uc_side := side ;
79004: LD_ADDR_OWVAR 20
79008: PUSH
79009: LD_VAR 0 1
79013: ST_TO_ADDR
// uc_nation := 3 ;
79014: LD_ADDR_OWVAR 21
79018: PUSH
79019: LD_INT 3
79021: ST_TO_ADDR
// vc_chassis := 25 ;
79022: LD_ADDR_OWVAR 37
79026: PUSH
79027: LD_INT 25
79029: ST_TO_ADDR
// vc_engine := engine_siberite ;
79030: LD_ADDR_OWVAR 39
79034: PUSH
79035: LD_INT 3
79037: ST_TO_ADDR
// vc_control := control_computer ;
79038: LD_ADDR_OWVAR 38
79042: PUSH
79043: LD_INT 3
79045: ST_TO_ADDR
// vc_weapon := 59 ;
79046: LD_ADDR_OWVAR 40
79050: PUSH
79051: LD_INT 59
79053: ST_TO_ADDR
// result := CreateVehicle ;
79054: LD_ADDR_VAR 0 5
79058: PUSH
79059: CALL_OW 45
79063: ST_TO_ADDR
// SetDir ( result , d ) ;
79064: LD_VAR 0 5
79068: PPUSH
79069: LD_VAR 0 4
79073: PPUSH
79074: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79078: LD_VAR 0 5
79082: PPUSH
79083: LD_VAR 0 2
79087: PPUSH
79088: LD_VAR 0 3
79092: PPUSH
79093: LD_INT 0
79095: PPUSH
79096: CALL_OW 48
// end ;
79100: LD_VAR 0 5
79104: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79105: LD_INT 0
79107: PPUSH
79108: PPUSH
79109: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79110: LD_ADDR_VAR 0 2
79114: PUSH
79115: LD_INT 0
79117: PUSH
79118: LD_INT 0
79120: PUSH
79121: LD_INT 0
79123: PUSH
79124: LD_INT 0
79126: PUSH
79127: EMPTY
79128: LIST
79129: LIST
79130: LIST
79131: LIST
79132: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79133: LD_VAR 0 1
79137: NOT
79138: PUSH
79139: LD_VAR 0 1
79143: PPUSH
79144: CALL_OW 264
79148: PUSH
79149: LD_INT 12
79151: PUSH
79152: LD_INT 51
79154: PUSH
79155: LD_INT 32
79157: PUSH
79158: LD_EXP 51
79162: PUSH
79163: EMPTY
79164: LIST
79165: LIST
79166: LIST
79167: LIST
79168: IN
79169: NOT
79170: OR
79171: IFFALSE 79175
// exit ;
79173: GO 79273
// for i := 1 to 3 do
79175: LD_ADDR_VAR 0 3
79179: PUSH
79180: DOUBLE
79181: LD_INT 1
79183: DEC
79184: ST_TO_ADDR
79185: LD_INT 3
79187: PUSH
79188: FOR_TO
79189: IFFALSE 79271
// begin tmp := GetCargo ( cargo , i ) ;
79191: LD_ADDR_VAR 0 4
79195: PUSH
79196: LD_VAR 0 1
79200: PPUSH
79201: LD_VAR 0 3
79205: PPUSH
79206: CALL_OW 289
79210: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79211: LD_ADDR_VAR 0 2
79215: PUSH
79216: LD_VAR 0 2
79220: PPUSH
79221: LD_VAR 0 3
79225: PPUSH
79226: LD_VAR 0 4
79230: PPUSH
79231: CALL_OW 1
79235: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79236: LD_ADDR_VAR 0 2
79240: PUSH
79241: LD_VAR 0 2
79245: PPUSH
79246: LD_INT 4
79248: PPUSH
79249: LD_VAR 0 2
79253: PUSH
79254: LD_INT 4
79256: ARRAY
79257: PUSH
79258: LD_VAR 0 4
79262: PLUS
79263: PPUSH
79264: CALL_OW 1
79268: ST_TO_ADDR
// end ;
79269: GO 79188
79271: POP
79272: POP
// end ; end_of_file
79273: LD_VAR 0 2
79277: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
79278: LD_VAR 0 1
79282: PUSH
79283: LD_INT 200
79285: DOUBLE
79286: GREATEREQUAL
79287: IFFALSE 79295
79289: LD_INT 299
79291: DOUBLE
79292: LESSEQUAL
79293: IFTRUE 79297
79295: GO 79329
79297: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
79298: LD_VAR 0 1
79302: PPUSH
79303: LD_VAR 0 2
79307: PPUSH
79308: LD_VAR 0 3
79312: PPUSH
79313: LD_VAR 0 4
79317: PPUSH
79318: LD_VAR 0 5
79322: PPUSH
79323: CALL 34618 0 5
79327: GO 79406
79329: LD_INT 300
79331: DOUBLE
79332: GREATEREQUAL
79333: IFFALSE 79341
79335: LD_INT 399
79337: DOUBLE
79338: LESSEQUAL
79339: IFTRUE 79343
79341: GO 79405
79343: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79344: LD_VAR 0 1
79348: PPUSH
79349: LD_VAR 0 2
79353: PPUSH
79354: LD_VAR 0 3
79358: PPUSH
79359: LD_VAR 0 4
79363: PPUSH
79364: LD_VAR 0 5
79368: PPUSH
79369: LD_VAR 0 6
79373: PPUSH
79374: LD_VAR 0 7
79378: PPUSH
79379: LD_VAR 0 8
79383: PPUSH
79384: LD_VAR 0 9
79388: PPUSH
79389: LD_VAR 0 10
79393: PPUSH
79394: LD_VAR 0 11
79398: PPUSH
79399: CALL 32260 0 11
79403: GO 79406
79405: POP
// end ;
79406: PPOPN 11
79408: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79409: LD_VAR 0 1
79413: PPUSH
79414: LD_VAR 0 2
79418: PPUSH
79419: LD_VAR 0 3
79423: PPUSH
79424: LD_VAR 0 4
79428: PPUSH
79429: LD_VAR 0 5
79433: PPUSH
79434: CALL 34354 0 5
// end ; end_of_file
79438: PPOPN 5
79440: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79441: LD_VAR 0 1
79445: PPUSH
79446: LD_VAR 0 2
79450: PPUSH
79451: LD_VAR 0 3
79455: PPUSH
79456: LD_VAR 0 4
79460: PPUSH
79461: LD_VAR 0 5
79465: PPUSH
79466: LD_VAR 0 6
79470: PPUSH
79471: CALL 19953 0 6
// end ;
79475: PPOPN 6
79477: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79478: LD_INT 0
79480: PPUSH
// begin if not units then
79481: LD_VAR 0 1
79485: NOT
79486: IFFALSE 79490
// exit ;
79488: GO 79578
// if p1 = 1 then
79490: LD_VAR 0 2
79494: PUSH
79495: LD_INT 1
79497: EQUAL
79498: IFFALSE 79578
// begin if p2 = 1 then
79500: LD_VAR 0 3
79504: PUSH
79505: LD_INT 1
79507: EQUAL
79508: IFFALSE 79539
// begin for i in units do
79510: LD_ADDR_VAR 0 7
79514: PUSH
79515: LD_VAR 0 1
79519: PUSH
79520: FOR_IN
79521: IFFALSE 79537
// begin SetUnitAttackType ( i , 3 ) ;
79523: LD_VAR 0 7
79527: PPUSH
79528: LD_INT 3
79530: PPUSH
79531: CALL_OW 603
// end ;
79535: GO 79520
79537: POP
79538: POP
// end ; if p2 = 2 then
79539: LD_VAR 0 3
79543: PUSH
79544: LD_INT 2
79546: EQUAL
79547: IFFALSE 79578
// begin for i in units do
79549: LD_ADDR_VAR 0 7
79553: PUSH
79554: LD_VAR 0 1
79558: PUSH
79559: FOR_IN
79560: IFFALSE 79576
// begin SetUnitAttackType ( i , 1 ) ;
79562: LD_VAR 0 7
79566: PPUSH
79567: LD_INT 1
79569: PPUSH
79570: CALL_OW 603
// end ;
79574: GO 79559
79576: POP
79577: POP
// end ; end ; end ;
79578: PPOPN 7
79580: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79581: CALL 19928 0 0
// end ;
79585: PPOPN 1
79587: END
