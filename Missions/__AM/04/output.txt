// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export reliefOfCommand ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 74 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 33
// begin Difficulty := 4 ;
  18: LD_ADDR_OWVAR 67
  22: PUSH
  23: LD_INT 4
  25: ST_TO_ADDR
// FogOff ( 1 ) ;
  26: LD_INT 1
  28: PPUSH
  29: CALL_OW 344
// end ; PrepareDifficulty ;
  33: CALL 4706 0 0
// PrepareRussianBase ;
  37: CALL 2968 0 0
// PrepareRussianCommander ;
  41: CALL 2919 0 0
// PrepareHeroes ;
  45: CALL 481 0 0
// SetBName ( ambdept0 , gamma ) ;
  49: LD_INT 4
  51: PPUSH
  52: LD_STRING gamma
  54: PPUSH
  55: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  59: LD_INT 21
  61: PPUSH
  62: LD_STRING fyodor
  64: PPUSH
  65: CALL_OW 500
// Action ;
  69: CALL 7783 0 0
// end ;
  73: END
// function Init ; begin
  74: LD_INT 0
  76: PPUSH
// mission_prefix := 04_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 04_
  84: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  85: LD_ADDR_EXP 50
  89: PUSH
  90: LD_STRING 03_
  92: ST_TO_ADDR
// ruSoldMinLevel := 0 ;
  93: LD_ADDR_EXP 16
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// ruSoldMaxLevel := 0 ;
 101: LD_ADDR_EXP 17
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// baseReadyToBuild := 0 ;
 109: LD_ADDR_EXP 20
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// debugMode := 0 ;
 117: LD_ADDR_EXP 45
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 125: LD_ADDR_EXP 42
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// bonusAvalaible := 0 ;
 133: LD_ADDR_EXP 44
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// firstRussianAttack := 0 ;
 141: LD_ADDR_EXP 23
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// saveDonaldson := 0 ;
 149: LD_ADDR_EXP 24
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// frankScoutBase := 0 ;
 157: LD_ADDR_EXP 25
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// harrAnswer := 0 ;
 165: LD_ADDR_EXP 26
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToDestroyRuBase := 0 ;
 173: LD_ADDR_EXP 27
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// timeToSupport := 9 9$00 ;
 181: LD_ADDR_EXP 28
 185: PUSH
 186: LD_INT 18900
 188: ST_TO_ADDR
// timerStatus := 0 ;
 189: LD_ADDR_EXP 29
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// startTimer := 0 ;
 197: LD_ADDR_EXP 30
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// factoryDialog := 0 ;
 205: LD_ADDR_EXP 31
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// bunkerDialog := 0 ;
 213: LD_ADDR_EXP 32
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// energyVDialog := 0 ;
 221: LD_ADDR_EXP 33
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildOil := 0 ;
 229: LD_ADDR_EXP 34
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// buildPower := 0 ;
 237: LD_ADDR_EXP 35
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// supply := [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 245: LD_ADDR_EXP 36
 249: PUSH
 250: LD_INT 14
 252: PUSH
 253: LD_INT 12
 255: PUSH
 256: LD_INT 11
 258: PUSH
 259: LD_INT 10
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_OWVAR 67
 272: ARRAY
 273: ST_TO_ADDR
// AIEnable := 1 ;
 274: LD_ADDR_EXP 37
 278: PUSH
 279: LD_INT 1
 281: ST_TO_ADDR
// donaldsonCoopAttack := 0 ;
 282: LD_ADDR_EXP 41
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// lostCounter := 0 ;
 290: LD_ADDR_EXP 38
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// honor := true ;
 298: LD_ADDR_EXP 39
 302: PUSH
 303: LD_INT 1
 305: ST_TO_ADDR
// reliefOfCommand := false ;
 306: LD_ADDR_EXP 48
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// escapeAvalaible = 0 ;
 314: LD_ADDR_EXP 40
 318: PUSH
 319: LD_INT 0
 321: ST_TO_ADDR
// specAttack := false ;
 322: LD_ADDR_EXP 47
 326: PUSH
 327: LD_INT 0
 329: ST_TO_ADDR
// ruMobile := [ ] ;
 330: LD_ADDR_EXP 46
 334: PUSH
 335: EMPTY
 336: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 337: LD_ADDR_EXP 43
 341: PUSH
 342: LD_INT 3
 344: PUSH
 345: LD_INT 4
 347: PUSH
 348: LD_INT 5
 350: PUSH
 351: LD_INT 6
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: LD_OWVAR 67
 364: ARRAY
 365: ST_TO_ADDR
// end ;
 366: LD_VAR 0 1
 370: RET
// every 0 0$1 trigger debugMode do var i ;
 371: LD_EXP 45
 375: IFFALSE 437
 377: GO 379
 379: DISABLE
 380: LD_INT 0
 382: PPUSH
// begin enable ;
 383: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 384: LD_ADDR_VAR 0 1
 388: PUSH
 389: LD_INT 22
 391: PUSH
 392: LD_INT 1
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 21
 401: PUSH
 402: LD_INT 1
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PPUSH
 413: CALL_OW 69
 417: PUSH
 418: FOR_IN
 419: IFFALSE 435
// SetLives ( i , 1000 ) ;
 421: LD_VAR 0 1
 425: PPUSH
 426: LD_INT 1000
 428: PPUSH
 429: CALL_OW 234
 433: GO 418
 435: POP
 436: POP
// end ;
 437: PPOPN 1
 439: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 440: LD_INT 22
 442: PUSH
 443: LD_INT 1
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 34
 452: PUSH
 453: LD_INT 44
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PPUSH
 464: CALL_OW 69
 468: IFFALSE 480
 470: GO 472
 472: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 473: LD_STRING ACH_GUN
 475: PPUSH
 476: CALL_OW 543
 480: END
// export function PrepareHeroes ; var i , tmp ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
 485: PPUSH
// uc_side = 1 ;
 486: LD_ADDR_OWVAR 20
 490: PUSH
 491: LD_INT 1
 493: ST_TO_ADDR
// uc_nation = 1 ;
 494: LD_ADDR_OWVAR 21
 498: PUSH
 499: LD_INT 1
 501: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 502: LD_ADDR_EXP 1
 506: PUSH
 507: LD_STRING JMM
 509: PPUSH
 510: LD_EXP 45
 514: NOT
 515: PPUSH
 516: LD_EXP 50
 520: PPUSH
 521: CALL 41958 0 3
 525: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 526: LD_ADDR_EXP 4
 530: PUSH
 531: LD_STRING Lisa
 533: PPUSH
 534: LD_EXP 45
 538: NOT
 539: PPUSH
 540: LD_EXP 50
 544: PPUSH
 545: CALL 41958 0 3
 549: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 550: LD_ADDR_EXP 7
 554: PUSH
 555: LD_STRING Brown
 557: PPUSH
 558: LD_INT 0
 560: PPUSH
 561: LD_EXP 50
 565: PPUSH
 566: CALL 41958 0 3
 570: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 571: LD_ADDR_EXP 8
 575: PUSH
 576: LD_STRING Dickens
 578: PPUSH
 579: LD_INT 0
 581: PPUSH
 582: LD_EXP 50
 586: PPUSH
 587: CALL 41958 0 3
 591: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 592: LD_ADDR_EXP 9
 596: PUSH
 597: LD_STRING Woodruff
 599: PPUSH
 600: LD_INT 0
 602: PPUSH
 603: LD_EXP 50
 607: PPUSH
 608: CALL 41958 0 3
 612: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 613: LD_ADDR_EXP 12
 617: PUSH
 618: LD_STRING Campell
 620: PPUSH
 621: LD_INT 0
 623: PPUSH
 624: LD_EXP 50
 628: PPUSH
 629: CALL 41958 0 3
 633: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 634: LD_ADDR_EXP 10
 638: PUSH
 639: LD_STRING Knight
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: LD_EXP 50
 649: PPUSH
 650: CALL 41958 0 3
 654: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 655: LD_ADDR_EXP 11
 659: PUSH
 660: LD_STRING Claptopn
 662: PPUSH
 663: LD_INT 0
 665: PPUSH
 666: LD_EXP 50
 670: PPUSH
 671: CALL 41958 0 3
 675: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 676: LD_ADDR_EXP 14
 680: PUSH
 681: LD_STRING Harisson
 683: PPUSH
 684: LD_INT 0
 686: PPUSH
 687: LD_EXP 50
 691: PPUSH
 692: CALL 41958 0 3
 696: ST_TO_ADDR
// if not Lisa then
 697: LD_EXP 4
 701: NOT
 702: IFFALSE 725
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 704: LD_ADDR_EXP 2
 708: PUSH
 709: LD_STRING Bobby
 711: PPUSH
 712: LD_INT 1
 714: PPUSH
 715: LD_EXP 50
 719: PPUSH
 720: CALL 41958 0 3
 724: ST_TO_ADDR
// if not Lisa and not Bobby then
 725: LD_EXP 4
 729: NOT
 730: IFFALSE 739
 732: PUSH
 733: LD_EXP 2
 737: NOT
 738: AND
 739: IFFALSE 762
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 741: LD_ADDR_EXP 3
 745: PUSH
 746: LD_STRING Cyrus
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_EXP 50
 756: PPUSH
 757: CALL 41958 0 3
 761: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 762: LD_EXP 4
 766: NOT
 767: IFFALSE 776
 769: PUSH
 770: LD_EXP 2
 774: NOT
 775: AND
 776: IFFALSE 785
 778: PUSH
 779: LD_EXP 3
 783: NOT
 784: AND
 785: IFFALSE 884
// begin tmp = CreateCharacterSet ( 03_others ) ;
 787: LD_ADDR_VAR 0 3
 791: PUSH
 792: LD_STRING 03_others
 794: PPUSH
 795: CALL_OW 31
 799: ST_TO_ADDR
// if tmp then
 800: LD_VAR 0 3
 804: IFFALSE 861
// begin RandomBeforeMission = tmp [ 1 ] ;
 806: LD_ADDR_EXP 6
 810: PUSH
 811: LD_VAR 0 3
 815: PUSH
 816: LD_INT 1
 818: ARRAY
 819: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 820: LD_STRING 03_others
 822: PPUSH
 823: CALL_OW 40
// if tmp > 1 then
 827: LD_VAR 0 3
 831: PUSH
 832: LD_INT 1
 834: GREATER
 835: IFFALSE 859
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 837: LD_VAR 0 3
 841: PUSH
 842: LD_VAR 0 3
 846: PUSH
 847: LD_INT 1
 849: ARRAY
 850: DIFF
 851: PPUSH
 852: LD_STRING 03_others
 854: PPUSH
 855: CALL_OW 38
// end else
 859: GO 884
// begin PrepareHuman ( false , 1 , 3 ) ;
 861: LD_INT 0
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: LD_INT 3
 869: PPUSH
 870: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 874: LD_ADDR_EXP 6
 878: PUSH
 879: CALL_OW 44
 883: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 884: LD_ADDR_OWVAR 20
 888: PUSH
 889: LD_INT 4
 891: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 892: LD_ADDR_EXP 13
 896: PUSH
 897: LD_STRING Donaldson
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_EXP 50
 907: PPUSH
 908: CALL 41958 0 3
 912: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 913: LD_ADDR_EXP 5
 917: PUSH
 918: LD_STRING Frank
 920: PPUSH
 921: LD_INT 1
 923: PPUSH
 924: LD_EXP 50
 928: PPUSH
 929: CALL 41958 0 3
 933: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 934: LD_EXP 1
 938: PPUSH
 939: LD_INT 32
 941: PPUSH
 942: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 946: LD_EXP 7
 950: PPUSH
 951: LD_INT 1
 953: PPUSH
 954: LD_INT 0
 956: PPUSH
 957: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 961: LD_EXP 7
 965: PPUSH
 966: LD_INT 32
 968: PPUSH
 969: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 973: LD_EXP 8
 977: PPUSH
 978: LD_INT 2
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 988: LD_EXP 9
 992: PPUSH
 993: LD_INT 2
 995: PPUSH
 996: LD_INT 0
 998: PPUSH
 999: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1003: LD_EXP 12
1007: PPUSH
1008: LD_INT 2
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1018: LD_EXP 10
1022: PPUSH
1023: LD_INT 2
1025: PPUSH
1026: LD_INT 0
1028: PPUSH
1029: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1033: LD_EXP 11
1037: PPUSH
1038: LD_INT 2
1040: PPUSH
1041: LD_INT 0
1043: PPUSH
1044: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1048: LD_EXP 4
1052: PPUSH
1053: LD_INT 2
1055: PPUSH
1056: LD_INT 0
1058: PPUSH
1059: CALL_OW 49
// if Lisa = false then
1063: LD_EXP 4
1067: PUSH
1068: LD_INT 0
1070: EQUAL
1071: IFFALSE 1088
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1073: LD_EXP 2
1077: PPUSH
1078: LD_INT 2
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 49
// if Lisa = false and Bobby = false then
1088: LD_EXP 4
1092: PUSH
1093: LD_INT 0
1095: EQUAL
1096: IFFALSE 1108
1098: PUSH
1099: LD_EXP 2
1103: PUSH
1104: LD_INT 0
1106: EQUAL
1107: AND
1108: IFFALSE 1125
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1110: LD_EXP 3
1114: PPUSH
1115: LD_INT 2
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1125: LD_EXP 4
1129: PUSH
1130: LD_INT 0
1132: EQUAL
1133: IFFALSE 1145
1135: PUSH
1136: LD_EXP 2
1140: PUSH
1141: LD_INT 0
1143: EQUAL
1144: AND
1145: IFFALSE 1157
1147: PUSH
1148: LD_EXP 3
1152: PUSH
1153: LD_INT 0
1155: EQUAL
1156: AND
1157: IFFALSE 1174
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1159: LD_EXP 6
1163: PPUSH
1164: LD_INT 2
1166: PPUSH
1167: LD_INT 0
1169: PPUSH
1170: CALL_OW 49
// end ;
1174: LD_VAR 0 1
1178: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1179: LD_INT 0
1181: PPUSH
1182: PPUSH
1183: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1184: LD_EXP 13
1188: PPUSH
1189: LD_INT 10
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: CALL_OW 49
// if Frank then
1199: LD_EXP 5
1203: IFFALSE 1220
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1205: LD_EXP 5
1209: PPUSH
1210: LD_INT 10
1212: PPUSH
1213: LD_INT 0
1215: PPUSH
1216: CALL_OW 49
// uc_nation = 1 ;
1220: LD_ADDR_OWVAR 21
1224: PUSH
1225: LD_INT 1
1227: ST_TO_ADDR
// uc_side = 4 ;
1228: LD_ADDR_OWVAR 20
1232: PUSH
1233: LD_INT 4
1235: ST_TO_ADDR
// hc_class := 3 ;
1236: LD_ADDR_OWVAR 28
1240: PUSH
1241: LD_INT 3
1243: ST_TO_ADDR
// hc_sex := sex_male ;
1244: LD_ADDR_OWVAR 27
1248: PUSH
1249: LD_INT 1
1251: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1252: LD_ADDR_OWVAR 33
1256: PUSH
1257: LD_STRING SecondCharsGal
1259: ST_TO_ADDR
// hc_face_number := 53 ;
1260: LD_ADDR_OWVAR 34
1264: PUSH
1265: LD_INT 53
1267: ST_TO_ADDR
// hc_name := Freddie Warner ;
1268: LD_ADDR_OWVAR 26
1272: PUSH
1273: LD_STRING Freddie Warner
1275: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1276: LD_ADDR_OWVAR 29
1280: PUSH
1281: LD_INT 8
1283: PUSH
1284: LD_INT 11
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 1 ] ;
1291: LD_ADDR_OWVAR 30
1295: PUSH
1296: LD_INT 0
1298: PUSH
1299: LD_INT 0
1301: PUSH
1302: LD_INT 2
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1314: LD_ADDR_OWVAR 31
1318: PUSH
1319: LD_INT 1
1321: PUSH
1322: LD_INT 0
1324: PUSH
1325: LD_INT 3
1327: PUSH
1328: LD_INT 2
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: ST_TO_ADDR
// un = CreateHuman ;
1337: LD_ADDR_VAR 0 3
1341: PUSH
1342: CALL_OW 44
1346: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1347: LD_VAR 0 3
1351: PPUSH
1352: LD_INT 10
1354: PPUSH
1355: LD_INT 0
1357: PPUSH
1358: CALL_OW 49
// hc_class := 1 ;
1362: LD_ADDR_OWVAR 28
1366: PUSH
1367: LD_INT 1
1369: ST_TO_ADDR
// hc_sex := sex_male ;
1370: LD_ADDR_OWVAR 27
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1378: LD_ADDR_OWVAR 33
1382: PUSH
1383: LD_STRING SecondCharsGal
1385: ST_TO_ADDR
// hc_face_number := 56 ;
1386: LD_ADDR_OWVAR 34
1390: PUSH
1391: LD_INT 56
1393: ST_TO_ADDR
// hc_name := Mel Brennan ;
1394: LD_ADDR_OWVAR 26
1398: PUSH
1399: LD_STRING Mel Brennan
1401: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1402: LD_ADDR_OWVAR 29
1406: PUSH
1407: LD_INT 12
1409: PUSH
1410: LD_INT 11
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 1 , 0 ] ;
1417: LD_ADDR_OWVAR 30
1421: PUSH
1422: LD_INT 2
1424: PUSH
1425: LD_INT 0
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: LD_INT 0
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1440: LD_ADDR_OWVAR 31
1444: PUSH
1445: LD_INT 4
1447: PUSH
1448: LD_INT 1
1450: PUSH
1451: LD_INT 1
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: ST_TO_ADDR
// un = CreateHuman ;
1463: LD_ADDR_VAR 0 3
1467: PUSH
1468: CALL_OW 44
1472: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1473: LD_VAR 0 3
1477: PPUSH
1478: LD_INT 10
1480: PPUSH
1481: LD_INT 0
1483: PPUSH
1484: CALL_OW 49
// hc_class := 1 ;
1488: LD_ADDR_OWVAR 28
1492: PUSH
1493: LD_INT 1
1495: ST_TO_ADDR
// hc_sex := sex_male ;
1496: LD_ADDR_OWVAR 27
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1504: LD_ADDR_OWVAR 33
1508: PUSH
1509: LD_STRING AmGalRemake
1511: ST_TO_ADDR
// hc_face_number := 5 ;
1512: LD_ADDR_OWVAR 34
1516: PUSH
1517: LD_INT 5
1519: ST_TO_ADDR
// hc_name := Bob Joplin ;
1520: LD_ADDR_OWVAR 26
1524: PUSH
1525: LD_STRING Bob Joplin
1527: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1528: LD_ADDR_OWVAR 29
1532: PUSH
1533: LD_INT 10
1535: PUSH
1536: LD_INT 11
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
1543: LD_ADDR_OWVAR 30
1547: PUSH
1548: LD_INT 0
1550: PUSH
1551: LD_INT 1
1553: PUSH
1554: LD_INT 1
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: EMPTY
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1566: LD_ADDR_OWVAR 31
1570: PUSH
1571: LD_INT 3
1573: PUSH
1574: LD_INT 1
1576: PUSH
1577: LD_INT 1
1579: PUSH
1580: LD_INT 1
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: ST_TO_ADDR
// un = CreateHuman ;
1589: LD_ADDR_VAR 0 3
1593: PUSH
1594: CALL_OW 44
1598: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1599: LD_VAR 0 3
1603: PPUSH
1604: LD_INT 10
1606: PPUSH
1607: LD_INT 0
1609: PPUSH
1610: CALL_OW 49
// hc_class := 3 ;
1614: LD_ADDR_OWVAR 28
1618: PUSH
1619: LD_INT 3
1621: ST_TO_ADDR
// hc_sex := sex_female ;
1622: LD_ADDR_OWVAR 27
1626: PUSH
1627: LD_INT 2
1629: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1630: LD_ADDR_OWVAR 33
1634: PUSH
1635: LD_STRING AmGalRemake
1637: ST_TO_ADDR
// hc_face_number := 8 ;
1638: LD_ADDR_OWVAR 34
1642: PUSH
1643: LD_INT 8
1645: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1646: LD_ADDR_OWVAR 26
1650: PUSH
1651: LD_STRING Elizabeth Whitney
1653: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1654: LD_ADDR_OWVAR 29
1658: PUSH
1659: LD_INT 9
1661: PUSH
1662: LD_INT 11
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 3 , 0 ] ;
1669: LD_ADDR_OWVAR 30
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: LD_INT 3
1682: PUSH
1683: LD_INT 0
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 4 , 1 ] ;
1692: LD_ADDR_OWVAR 31
1696: PUSH
1697: LD_INT 0
1699: PUSH
1700: LD_INT 1
1702: PUSH
1703: LD_INT 4
1705: PUSH
1706: LD_INT 1
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: ST_TO_ADDR
// un = CreateHuman ;
1715: LD_ADDR_VAR 0 3
1719: PUSH
1720: CALL_OW 44
1724: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1725: LD_VAR 0 3
1729: PPUSH
1730: LD_INT 10
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 49
// InitHc ;
1740: CALL_OW 19
// end ;
1744: LD_VAR 0 1
1748: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1749: LD_INT 0
1751: PPUSH
1752: PPUSH
1753: PPUSH
1754: PPUSH
// uc_nation = 1 ;
1755: LD_ADDR_OWVAR 21
1759: PUSH
1760: LD_INT 1
1762: ST_TO_ADDR
// uc_side = 1 ;
1763: LD_ADDR_OWVAR 20
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1771: LD_ADDR_OWVAR 37
1775: PUSH
1776: LD_INT 2
1778: ST_TO_ADDR
// vc_engine := engine_combustion ;
1779: LD_ADDR_OWVAR 39
1783: PUSH
1784: LD_INT 1
1786: ST_TO_ADDR
// vc_control := control_manual ;
1787: LD_ADDR_OWVAR 38
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1795: LD_ADDR_OWVAR 41
1799: PUSH
1800: LD_INT 65
1802: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1803: LD_ADDR_OWVAR 40
1807: PUSH
1808: LD_INT 5
1810: PUSH
1811: LD_INT 3
1813: PUSH
1814: LD_INT 4
1816: PUSH
1817: LD_INT 4
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: LIST
1824: LIST
1825: PUSH
1826: LD_OWVAR 67
1830: ARRAY
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 5
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1842: LD_VAR 0 5
1846: PPUSH
1847: LD_INT 2
1849: PPUSH
1850: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1854: LD_INT 17
1856: PPUSH
1857: LD_INT 4
1859: PPUSH
1860: CALL_OW 428
1864: PUSH
1865: LD_INT 0
1867: EQUAL
1868: IFFALSE 1890
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1870: LD_VAR 0 5
1874: PPUSH
1875: LD_INT 17
1877: PPUSH
1878: LD_INT 4
1880: PPUSH
1881: LD_INT 0
1883: PPUSH
1884: CALL_OW 48
1888: GO 1908
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1890: LD_VAR 0 5
1894: PPUSH
1895: LD_INT 23
1897: PPUSH
1898: LD_INT 10
1900: PPUSH
1901: LD_INT 0
1903: PPUSH
1904: CALL_OW 48
// hc_class := 1 ;
1908: LD_ADDR_OWVAR 28
1912: PUSH
1913: LD_INT 1
1915: ST_TO_ADDR
// hc_sex := sex_male ;
1916: LD_ADDR_OWVAR 27
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1924: LD_ADDR_OWVAR 33
1928: PUSH
1929: LD_STRING SecondCharsGal
1931: ST_TO_ADDR
// hc_face_number := 59 ;
1932: LD_ADDR_OWVAR 34
1936: PUSH
1937: LD_INT 59
1939: ST_TO_ADDR
// hc_name := Max Gray ;
1940: LD_ADDR_OWVAR 26
1944: PUSH
1945: LD_STRING Max Gray
1947: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1948: LD_ADDR_OWVAR 29
1952: PUSH
1953: LD_INT 9
1955: PUSH
1956: LD_INT 11
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: ST_TO_ADDR
// hc_basic_skills := [ 2 , 1 , 0 , 0 ] ;
1963: LD_ADDR_OWVAR 30
1967: PUSH
1968: LD_INT 2
1970: PUSH
1971: LD_INT 1
1973: PUSH
1974: LD_INT 0
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1986: LD_ADDR_OWVAR 31
1990: PUSH
1991: LD_INT 4
1993: PUSH
1994: LD_INT 1
1996: PUSH
1997: LD_INT 1
1999: PUSH
2000: LD_INT 0
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: ST_TO_ADDR
// un = CreateHuman ;
2009: LD_ADDR_VAR 0 4
2013: PUSH
2014: CALL_OW 44
2018: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2019: LD_VAR 0 4
2023: PPUSH
2024: LD_INT 11
2026: PPUSH
2027: LD_INT 0
2029: PPUSH
2030: CALL_OW 49
// hc_class := 2 ;
2034: LD_ADDR_OWVAR 28
2038: PUSH
2039: LD_INT 2
2041: ST_TO_ADDR
// hc_sex := sex_male ;
2042: LD_ADDR_OWVAR 27
2046: PUSH
2047: LD_INT 1
2049: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2050: LD_ADDR_OWVAR 33
2054: PUSH
2055: LD_STRING SecondCharsGal
2057: ST_TO_ADDR
// hc_face_number := 50 ;
2058: LD_ADDR_OWVAR 34
2062: PUSH
2063: LD_INT 50
2065: ST_TO_ADDR
// hc_name := Frank Hughes ;
2066: LD_ADDR_OWVAR 26
2070: PUSH
2071: LD_STRING Frank Hughes
2073: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2074: LD_ADDR_OWVAR 29
2078: PUSH
2079: LD_INT 10
2081: PUSH
2082: LD_INT 10
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2089: LD_ADDR_OWVAR 30
2093: PUSH
2094: LD_INT 1
2096: PUSH
2097: LD_INT 2
2099: PUSH
2100: LD_INT 0
2102: PUSH
2103: LD_INT 0
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: ST_TO_ADDR
// hc_skills := [ 1 , 4 , 0 , 1 ] ;
2112: LD_ADDR_OWVAR 31
2116: PUSH
2117: LD_INT 1
2119: PUSH
2120: LD_INT 4
2122: PUSH
2123: LD_INT 0
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: ST_TO_ADDR
// un = CreateHuman ;
2135: LD_ADDR_VAR 0 4
2139: PUSH
2140: CALL_OW 44
2144: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2145: LD_VAR 0 4
2149: PPUSH
2150: LD_INT 11
2152: PPUSH
2153: LD_INT 0
2155: PPUSH
2156: CALL_OW 49
// hc_class := 1 ;
2160: LD_ADDR_OWVAR 28
2164: PUSH
2165: LD_INT 1
2167: ST_TO_ADDR
// hc_sex := sex_male ;
2168: LD_ADDR_OWVAR 27
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2176: LD_ADDR_OWVAR 33
2180: PUSH
2181: LD_STRING SecondCharsGal
2183: ST_TO_ADDR
// hc_face_number := 54 ;
2184: LD_ADDR_OWVAR 34
2188: PUSH
2189: LD_INT 54
2191: ST_TO_ADDR
// hc_name := Luigi Ghibellini ;
2192: LD_ADDR_OWVAR 26
2196: PUSH
2197: LD_STRING Luigi Ghibellini
2199: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2200: LD_ADDR_OWVAR 29
2204: PUSH
2205: LD_INT 11
2207: PUSH
2208: LD_INT 11
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 1 , 1 ] ;
2215: LD_ADDR_OWVAR 30
2219: PUSH
2220: LD_INT 1
2222: PUSH
2223: LD_INT 0
2225: PUSH
2226: LD_INT 1
2228: PUSH
2229: LD_INT 1
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 2 ] ;
2238: LD_ADDR_OWVAR 31
2242: PUSH
2243: LD_INT 2
2245: PUSH
2246: LD_INT 1
2248: PUSH
2249: LD_INT 1
2251: PUSH
2252: LD_INT 2
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: ST_TO_ADDR
// un = CreateHuman ;
2261: LD_ADDR_VAR 0 4
2265: PUSH
2266: CALL_OW 44
2270: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2271: LD_VAR 0 4
2275: PPUSH
2276: LD_INT 11
2278: PPUSH
2279: LD_INT 0
2281: PPUSH
2282: CALL_OW 49
// hc_class := 3 ;
2286: LD_ADDR_OWVAR 28
2290: PUSH
2291: LD_INT 3
2293: ST_TO_ADDR
// hc_sex := sex_male ;
2294: LD_ADDR_OWVAR 27
2298: PUSH
2299: LD_INT 1
2301: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2302: LD_ADDR_OWVAR 33
2306: PUSH
2307: LD_STRING AmGalRemake
2309: ST_TO_ADDR
// hc_face_number := 6 ;
2310: LD_ADDR_OWVAR 34
2314: PUSH
2315: LD_INT 6
2317: ST_TO_ADDR
// hc_name := Leon Carter ;
2318: LD_ADDR_OWVAR 26
2322: PUSH
2323: LD_STRING Leon Carter
2325: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2326: LD_ADDR_OWVAR 29
2330: PUSH
2331: LD_INT 10
2333: PUSH
2334: LD_INT 9
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 1 ] ;
2341: LD_ADDR_OWVAR 30
2345: PUSH
2346: LD_INT 0
2348: PUSH
2349: LD_INT 0
2351: PUSH
2352: LD_INT 2
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2364: LD_ADDR_OWVAR 31
2368: PUSH
2369: LD_INT 0
2371: PUSH
2372: LD_INT 2
2374: PUSH
2375: LD_INT 3
2377: PUSH
2378: LD_INT 1
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: ST_TO_ADDR
// un = CreateHuman ;
2387: LD_ADDR_VAR 0 4
2391: PUSH
2392: CALL_OW 44
2396: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2397: LD_VAR 0 4
2401: PPUSH
2402: LD_VAR 0 5
2406: PPUSH
2407: CALL_OW 52
// if count = 4 then
2411: LD_VAR 0 1
2415: PUSH
2416: LD_INT 4
2418: EQUAL
2419: IFFALSE 2547
// begin hc_class := 1 ;
2421: LD_ADDR_OWVAR 28
2425: PUSH
2426: LD_INT 1
2428: ST_TO_ADDR
// hc_sex := sex_male ;
2429: LD_ADDR_OWVAR 27
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2437: LD_ADDR_OWVAR 33
2441: PUSH
2442: LD_STRING SecondCharsGal
2444: ST_TO_ADDR
// hc_face_number := 34 ;
2445: LD_ADDR_OWVAR 34
2449: PUSH
2450: LD_INT 34
2452: ST_TO_ADDR
// hc_name := Ian Hill ;
2453: LD_ADDR_OWVAR 26
2457: PUSH
2458: LD_STRING Ian Hill
2460: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2461: LD_ADDR_OWVAR 29
2465: PUSH
2466: LD_INT 10
2468: PUSH
2469: LD_INT 12
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
2476: LD_ADDR_OWVAR 30
2480: PUSH
2481: LD_INT 3
2483: PUSH
2484: LD_INT 0
2486: PUSH
2487: LD_INT 0
2489: PUSH
2490: LD_INT 0
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
2499: LD_ADDR_OWVAR 31
2503: PUSH
2504: LD_INT 4
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: LD_INT 1
2512: PUSH
2513: LD_INT 0
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: ST_TO_ADDR
// un = CreateHuman ;
2522: LD_ADDR_VAR 0 4
2526: PUSH
2527: CALL_OW 44
2531: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2532: LD_VAR 0 4
2536: PPUSH
2537: LD_INT 11
2539: PPUSH
2540: LD_INT 0
2542: PPUSH
2543: CALL_OW 49
// end ; if count = 5 then
2547: LD_VAR 0 1
2551: PUSH
2552: LD_INT 5
2554: EQUAL
2555: IFFALSE 2809
// begin hc_class := 1 ;
2557: LD_ADDR_OWVAR 28
2561: PUSH
2562: LD_INT 1
2564: ST_TO_ADDR
// hc_sex := sex_male ;
2565: LD_ADDR_OWVAR 27
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2573: LD_ADDR_OWVAR 33
2577: PUSH
2578: LD_STRING SecondCharsGal
2580: ST_TO_ADDR
// hc_face_number := 34 ;
2581: LD_ADDR_OWVAR 34
2585: PUSH
2586: LD_INT 34
2588: ST_TO_ADDR
// hc_name := Ian Hill ;
2589: LD_ADDR_OWVAR 26
2593: PUSH
2594: LD_STRING Ian Hill
2596: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2597: LD_ADDR_OWVAR 29
2601: PUSH
2602: LD_INT 10
2604: PUSH
2605: LD_INT 12
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
2612: LD_ADDR_OWVAR 30
2616: PUSH
2617: LD_INT 3
2619: PUSH
2620: LD_INT 0
2622: PUSH
2623: LD_INT 0
2625: PUSH
2626: LD_INT 0
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
2635: LD_ADDR_OWVAR 31
2639: PUSH
2640: LD_INT 4
2642: PUSH
2643: LD_INT 1
2645: PUSH
2646: LD_INT 1
2648: PUSH
2649: LD_INT 0
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: ST_TO_ADDR
// un = CreateHuman ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: CALL_OW 44
2667: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2668: LD_VAR 0 4
2672: PPUSH
2673: LD_INT 11
2675: PPUSH
2676: LD_INT 0
2678: PPUSH
2679: CALL_OW 49
// hc_class := 1 ;
2683: LD_ADDR_OWVAR 28
2687: PUSH
2688: LD_INT 1
2690: ST_TO_ADDR
// hc_sex := sex_female ;
2691: LD_ADDR_OWVAR 27
2695: PUSH
2696: LD_INT 2
2698: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2699: LD_ADDR_OWVAR 33
2703: PUSH
2704: LD_STRING SecondCharsGal
2706: ST_TO_ADDR
// hc_face_number := 41 ;
2707: LD_ADDR_OWVAR 34
2711: PUSH
2712: LD_INT 41
2714: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2715: LD_ADDR_OWVAR 26
2719: PUSH
2720: LD_STRING Kate Wadsworth
2722: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2723: LD_ADDR_OWVAR 29
2727: PUSH
2728: LD_INT 9
2730: PUSH
2731: LD_INT 9
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2738: LD_ADDR_OWVAR 30
2742: PUSH
2743: LD_INT 1
2745: PUSH
2746: LD_INT 2
2748: PUSH
2749: LD_INT 0
2751: PUSH
2752: LD_INT 0
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2761: LD_ADDR_OWVAR 31
2765: PUSH
2766: LD_INT 2
2768: PUSH
2769: LD_INT 3
2771: PUSH
2772: LD_INT 1
2774: PUSH
2775: LD_INT 0
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: LIST
2782: LIST
2783: ST_TO_ADDR
// un = CreateHuman ;
2784: LD_ADDR_VAR 0 4
2788: PUSH
2789: CALL_OW 44
2793: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2794: LD_VAR 0 4
2798: PPUSH
2799: LD_INT 11
2801: PPUSH
2802: LD_INT 0
2804: PPUSH
2805: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2809: LD_INT 11
2811: PPUSH
2812: LD_INT 22
2814: PUSH
2815: LD_INT 1
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 21
2824: PUSH
2825: LD_INT 1
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 26
2834: PUSH
2835: LD_INT 1
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: LIST
2846: PPUSH
2847: CALL_OW 70
2851: PUSH
2852: LD_INT 1
2854: ARRAY
2855: PPUSH
2856: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2860: LD_INT 11
2862: PPUSH
2863: LD_INT 22
2865: PUSH
2866: LD_INT 1
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PUSH
2873: LD_INT 21
2875: PUSH
2876: LD_INT 1
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 26
2885: PUSH
2886: LD_INT 1
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: LIST
2897: PPUSH
2898: CALL_OW 70
2902: PUSH
2903: LD_INT 1
2905: ARRAY
2906: PPUSH
2907: LD_STRING D6-Sol3-1
2909: PPUSH
2910: CALL_OW 88
// end ; end_of_file
2914: LD_VAR 0 2
2918: RET
// export function PrepareRussianCommander ; begin
2919: LD_INT 0
2921: PPUSH
// uc_side = 3 ;
2922: LD_ADDR_OWVAR 20
2926: PUSH
2927: LD_INT 3
2929: ST_TO_ADDR
// uc_nation = 3 ;
2930: LD_ADDR_OWVAR 21
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2938: LD_ADDR_EXP 15
2942: PUSH
2943: LD_STRING Stolypin
2945: PPUSH
2946: CALL_OW 25
2950: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2951: LD_EXP 15
2955: PPUSH
2956: LD_INT 21
2958: PPUSH
2959: CALL_OW 52
// end ;
2963: LD_VAR 0 1
2967: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2968: LD_INT 0
2970: PPUSH
2971: PPUSH
2972: PPUSH
2973: PPUSH
// if Difficulty > 1 then
2974: LD_OWVAR 67
2978: PUSH
2979: LD_INT 1
2981: GREATER
2982: IFFALSE 3092
// begin uc_side := 3 ;
2984: LD_ADDR_OWVAR 20
2988: PUSH
2989: LD_INT 3
2991: ST_TO_ADDR
// uc_nation := 3 ;
2992: LD_ADDR_OWVAR 21
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// InitHc_All ( ) ;
3000: CALL_OW 584
// InitBc ;
3004: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3008: LD_INT 0
3010: PPUSH
3011: LD_INT 1
3013: PPUSH
3014: LD_INT 4
3016: PPUSH
3017: CALL_OW 380
// bc_type := b_breastwork ;
3021: LD_ADDR_OWVAR 42
3025: PUSH
3026: LD_INT 31
3028: ST_TO_ADDR
// bc_level := 4 ;
3029: LD_ADDR_OWVAR 43
3033: PUSH
3034: LD_INT 4
3036: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3037: LD_ADDR_VAR 0 3
3041: PUSH
3042: LD_INT 100
3044: PPUSH
3045: LD_INT 58
3047: PPUSH
3048: LD_INT 2
3050: PPUSH
3051: CALL_OW 47
3055: ST_TO_ADDR
// un := CreateHuman ;
3056: LD_ADDR_VAR 0 4
3060: PUSH
3061: CALL_OW 44
3065: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3066: LD_VAR 0 4
3070: PPUSH
3071: LD_INT 5
3073: PPUSH
3074: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3078: LD_VAR 0 4
3082: PPUSH
3083: LD_VAR 0 3
3087: PPUSH
3088: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3092: LD_INT 3
3094: PPUSH
3095: LD_INT 3
3097: PPUSH
3098: LD_INT 22
3100: PPUSH
3101: LD_EXP 16
3105: PPUSH
3106: LD_EXP 17
3110: PPUSH
3111: CALL_OW 12
3115: PPUSH
3116: LD_INT 1
3118: PPUSH
3119: LD_INT 3
3121: PUSH
3122: LD_INT 4
3124: PUSH
3125: LD_INT 5
3127: PUSH
3128: LD_INT 6
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: PUSH
3137: LD_OWVAR 67
3141: ARRAY
3142: PPUSH
3143: CALL 4372 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3147: LD_INT 3
3149: PPUSH
3150: LD_INT 3
3152: PPUSH
3153: LD_INT 21
3155: PPUSH
3156: LD_EXP 16
3160: PPUSH
3161: LD_EXP 17
3165: PPUSH
3166: CALL_OW 12
3170: PPUSH
3171: LD_INT 2
3173: PPUSH
3174: LD_INT 3
3176: PPUSH
3177: CALL 4372 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3181: LD_INT 3
3183: PPUSH
3184: LD_INT 3
3186: PPUSH
3187: LD_INT 1
3189: PPUSH
3190: LD_EXP 16
3194: PPUSH
3195: LD_EXP 17
3199: PPUSH
3200: CALL_OW 12
3204: PPUSH
3205: LD_INT 4
3207: PPUSH
3208: LD_INT 3
3210: PPUSH
3211: CALL 4372 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3215: LD_INT 3
3217: PPUSH
3218: LD_INT 3
3220: PPUSH
3221: LD_INT 24
3223: PPUSH
3224: LD_EXP 16
3228: PPUSH
3229: LD_EXP 17
3233: PPUSH
3234: CALL_OW 12
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: LD_INT 5
3244: PPUSH
3245: CALL 4372 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3249: LD_ADDR_VAR 0 2
3253: PUSH
3254: LD_INT 22
3256: PUSH
3257: LD_INT 3
3259: PUSH
3260: EMPTY
3261: LIST
3262: LIST
3263: PUSH
3264: LD_INT 30
3266: PUSH
3267: LD_INT 32
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PPUSH
3278: CALL_OW 69
3282: PUSH
3283: FOR_IN
3284: IFFALSE 3324
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3286: LD_INT 3
3288: PPUSH
3289: LD_INT 3
3291: PPUSH
3292: LD_VAR 0 2
3296: PPUSH
3297: LD_EXP 16
3301: PPUSH
3302: LD_EXP 17
3306: PPUSH
3307: CALL_OW 12
3311: PPUSH
3312: LD_INT 1
3314: PPUSH
3315: LD_INT 1
3317: PPUSH
3318: CALL 4372 0 6
3322: GO 3283
3324: POP
3325: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3326: LD_ADDR_VAR 0 2
3330: PUSH
3331: LD_INT 22
3333: PUSH
3334: LD_INT 3
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PUSH
3341: LD_INT 30
3343: PUSH
3344: LD_INT 31
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: PPUSH
3355: CALL_OW 69
3359: PUSH
3360: FOR_IN
3361: IFFALSE 3389
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3363: LD_EXP 16
3367: PPUSH
3368: LD_EXP 17
3372: PPUSH
3373: CALL_OW 12
3377: PPUSH
3378: LD_VAR 0 2
3382: PPUSH
3383: CALL 4481 0 2
3387: GO 3360
3389: POP
3390: POP
// end ;
3391: LD_VAR 0 1
3395: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3396: LD_INT 0
3398: PPUSH
3399: PPUSH
3400: PPUSH
3401: PPUSH
// uc_side = 6 ;
3402: LD_ADDR_OWVAR 20
3406: PUSH
3407: LD_INT 6
3409: ST_TO_ADDR
// uc_nation = 3 ;
3410: LD_ADDR_OWVAR 21
3414: PUSH
3415: LD_INT 3
3417: ST_TO_ADDR
// InitHC_All ( ) ;
3418: CALL_OW 584
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3422: LD_ADDR_VAR 0 2
3426: PUSH
3427: DOUBLE
3428: LD_INT 1
3430: DEC
3431: ST_TO_ADDR
3432: LD_INT 1
3434: PUSH
3435: LD_INT 2
3437: PUSH
3438: LD_INT 2
3440: PUSH
3441: LD_INT 3
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: PUSH
3450: LD_OWVAR 67
3454: ARRAY
3455: PUSH
3456: FOR_TO
3457: IFFALSE 3625
// begin vc_engine = 1 ;
3459: LD_ADDR_OWVAR 39
3463: PUSH
3464: LD_INT 1
3466: ST_TO_ADDR
// vc_control = 1 ;
3467: LD_ADDR_OWVAR 38
3471: PUSH
3472: LD_INT 1
3474: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3475: LD_ADDR_OWVAR 40
3479: PUSH
3480: LD_INT 42
3482: PUSH
3483: LD_INT 42
3485: PUSH
3486: LD_INT 43
3488: PUSH
3489: LD_INT 43
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: PUSH
3498: LD_OWVAR 67
3502: ARRAY
3503: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3504: LD_ADDR_OWVAR 37
3508: PUSH
3509: LD_INT 21
3511: PUSH
3512: LD_INT 22
3514: PUSH
3515: LD_INT 22
3517: PUSH
3518: LD_INT 22
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_OWVAR 67
3531: ARRAY
3532: ST_TO_ADDR
// veh = CreateVehicle ;
3533: LD_ADDR_VAR 0 3
3537: PUSH
3538: CALL_OW 45
3542: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3543: LD_VAR 0 3
3547: PPUSH
3548: LD_INT 3
3550: PPUSH
3551: LD_INT 0
3553: PPUSH
3554: CALL_OW 49
// hc_gallery =  ;
3558: LD_ADDR_OWVAR 33
3562: PUSH
3563: LD_STRING 
3565: ST_TO_ADDR
// hc_name =  ;
3566: LD_ADDR_OWVAR 26
3570: PUSH
3571: LD_STRING 
3573: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3574: LD_INT 0
3576: PPUSH
3577: LD_INT 3
3579: PPUSH
3580: LD_EXP 16
3584: PPUSH
3585: LD_EXP 17
3589: PPUSH
3590: CALL_OW 12
3594: PPUSH
3595: CALL_OW 380
// un = CreateHuman ;
3599: LD_ADDR_VAR 0 4
3603: PUSH
3604: CALL_OW 44
3608: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3609: LD_VAR 0 4
3613: PPUSH
3614: LD_VAR 0 3
3618: PPUSH
3619: CALL_OW 52
// end ;
3623: GO 3456
3625: POP
3626: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3627: LD_INT 0
3629: PPUSH
3630: LD_INT 2
3632: PPUSH
3633: LD_EXP 16
3637: PPUSH
3638: LD_EXP 17
3642: PPUSH
3643: CALL_OW 12
3647: PUSH
3648: LD_INT 2
3650: PLUS
3651: PPUSH
3652: CALL_OW 380
// un = CreateHuman ;
3656: LD_ADDR_VAR 0 4
3660: PUSH
3661: CALL_OW 44
3665: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3666: LD_VAR 0 4
3670: PPUSH
3671: LD_INT 3
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3681: LD_INT 0
3683: PPUSH
3684: LD_INT 4
3686: PPUSH
3687: LD_EXP 16
3691: PPUSH
3692: LD_EXP 17
3696: PPUSH
3697: CALL_OW 12
3701: PUSH
3702: LD_INT 2
3704: PLUS
3705: PPUSH
3706: CALL_OW 380
// un = CreateHuman ;
3710: LD_ADDR_VAR 0 4
3714: PUSH
3715: CALL_OW 44
3719: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3720: LD_VAR 0 4
3724: PPUSH
3725: LD_INT 3
3727: PPUSH
3728: LD_INT 0
3730: PPUSH
3731: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3735: LD_ADDR_VAR 0 2
3739: PUSH
3740: DOUBLE
3741: LD_INT 1
3743: DEC
3744: ST_TO_ADDR
3745: LD_INT 2
3747: PUSH
3748: LD_INT 3
3750: PUSH
3751: LD_INT 3
3753: PUSH
3754: LD_INT 4
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: PUSH
3763: LD_OWVAR 67
3767: ARRAY
3768: PUSH
3769: LD_INT 1
3771: PPUSH
3772: LD_INT 3
3774: PPUSH
3775: CALL_OW 12
3779: PLUS
3780: PUSH
3781: FOR_TO
3782: IFFALSE 3852
// begin hc_gallery =  ;
3784: LD_ADDR_OWVAR 33
3788: PUSH
3789: LD_STRING 
3791: ST_TO_ADDR
// hc_name =  ;
3792: LD_ADDR_OWVAR 26
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3800: LD_INT 0
3802: PPUSH
3803: LD_INT 1
3805: PPUSH
3806: LD_EXP 16
3810: PPUSH
3811: LD_EXP 17
3815: PPUSH
3816: CALL_OW 12
3820: PPUSH
3821: CALL_OW 380
// un = CreateHuman ;
3825: LD_ADDR_VAR 0 4
3829: PUSH
3830: CALL_OW 44
3834: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3835: LD_VAR 0 4
3839: PPUSH
3840: LD_INT 3
3842: PPUSH
3843: LD_INT 0
3845: PPUSH
3846: CALL_OW 49
// end ;
3850: GO 3781
3852: POP
3853: POP
// vc_engine = 1 ;
3854: LD_ADDR_OWVAR 39
3858: PUSH
3859: LD_INT 1
3861: ST_TO_ADDR
// vc_control = 1 ;
3862: LD_ADDR_OWVAR 38
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// vc_weapon = 51 ;
3870: LD_ADDR_OWVAR 40
3874: PUSH
3875: LD_INT 51
3877: ST_TO_ADDR
// vc_chassis = 22 ;
3878: LD_ADDR_OWVAR 37
3882: PUSH
3883: LD_INT 22
3885: ST_TO_ADDR
// veh = CreateVehicle ;
3886: LD_ADDR_VAR 0 3
3890: PUSH
3891: CALL_OW 45
3895: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3896: LD_VAR 0 3
3900: PPUSH
3901: LD_INT 3
3903: PPUSH
3904: LD_INT 0
3906: PPUSH
3907: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3911: LD_VAR 0 3
3915: PPUSH
3916: LD_INT 1
3918: PPUSH
3919: LD_INT 100
3921: PPUSH
3922: CALL_OW 290
// hc_gallery =  ;
3926: LD_ADDR_OWVAR 33
3930: PUSH
3931: LD_STRING 
3933: ST_TO_ADDR
// hc_name =  ;
3934: LD_ADDR_OWVAR 26
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3942: LD_INT 0
3944: PPUSH
3945: LD_INT 3
3947: PPUSH
3948: LD_EXP 16
3952: PPUSH
3953: LD_EXP 17
3957: PPUSH
3958: CALL_OW 12
3962: PPUSH
3963: CALL_OW 380
// un = CreateHuman ;
3967: LD_ADDR_VAR 0 4
3971: PUSH
3972: CALL_OW 44
3976: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3977: LD_VAR 0 4
3981: PPUSH
3982: LD_VAR 0 3
3986: PPUSH
3987: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3991: LD_ADDR_VAR 0 2
3995: PUSH
3996: LD_INT 22
3998: PUSH
3999: LD_INT 6
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PUSH
4006: LD_INT 1
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: LD_INT 25
4014: PUSH
4015: LD_INT 2
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 3
4028: PUSH
4029: LD_INT 25
4031: PUSH
4032: LD_INT 4
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: PPUSH
4052: CALL_OW 69
4056: PUSH
4057: FOR_IN
4058: IFFALSE 4077
// ComAgressiveMove ( i , 45 , 46 ) ;
4060: LD_VAR 0 2
4064: PPUSH
4065: LD_INT 45
4067: PPUSH
4068: LD_INT 46
4070: PPUSH
4071: CALL_OW 114
4075: GO 4057
4077: POP
4078: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4079: LD_ADDR_VAR 0 2
4083: PUSH
4084: LD_INT 22
4086: PUSH
4087: LD_INT 6
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: PUSH
4094: LD_INT 25
4096: PUSH
4097: LD_INT 2
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 69
4112: PUSH
4113: FOR_IN
4114: IFFALSE 4145
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4116: LD_ADDR_EXP 21
4120: PUSH
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_INT 0
4128: PPUSH
4129: LD_INT 48
4131: PPUSH
4132: LD_INT 55
4134: PPUSH
4135: LD_INT 5
4137: PPUSH
4138: CALL_OW 145
4142: ST_TO_ADDR
4143: GO 4113
4145: POP
4146: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4147: LD_ADDR_VAR 0 2
4151: PUSH
4152: LD_INT 22
4154: PUSH
4155: LD_INT 6
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 25
4164: PUSH
4165: LD_INT 4
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 69
4180: PUSH
4181: FOR_IN
4182: IFFALSE 4201
// ComMoveXY ( i , 39 , 55 ) ;
4184: LD_VAR 0 2
4188: PPUSH
4189: LD_INT 39
4191: PPUSH
4192: LD_INT 55
4194: PPUSH
4195: CALL_OW 111
4199: GO 4181
4201: POP
4202: POP
// end ;
4203: LD_VAR 0 1
4207: RET
// export firstAttackGroup ; export function PrepareFirstAttack ; var i , un ; begin
4208: LD_INT 0
4210: PPUSH
4211: PPUSH
4212: PPUSH
// uc_side := 3 ;
4213: LD_ADDR_OWVAR 20
4217: PUSH
4218: LD_INT 3
4220: ST_TO_ADDR
// uc_nation := 3 ;
4221: LD_ADDR_OWVAR 21
4225: PUSH
4226: LD_INT 3
4228: ST_TO_ADDR
// firstAttackGroup := [ ] ;
4229: LD_ADDR_EXP 51
4233: PUSH
4234: EMPTY
4235: ST_TO_ADDR
// for i := 1 to 4 do
4236: LD_ADDR_VAR 0 2
4240: PUSH
4241: DOUBLE
4242: LD_INT 1
4244: DEC
4245: ST_TO_ADDR
4246: LD_INT 4
4248: PUSH
4249: FOR_TO
4250: IFFALSE 4357
// begin InitHC_All ( ) ;
4252: CALL_OW 584
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4256: LD_INT 0
4258: PPUSH
4259: LD_INT 1
4261: PPUSH
4262: LD_EXP 16
4266: PPUSH
4267: LD_EXP 17
4271: PPUSH
4272: CALL_OW 12
4276: PPUSH
4277: CALL_OW 380
// un := CreateHuman ;
4281: LD_ADDR_VAR 0 3
4285: PUSH
4286: CALL_OW 44
4290: ST_TO_ADDR
// firstAttackGroup := Join ( firstAttackGroup , un ) ;
4291: LD_ADDR_EXP 51
4295: PUSH
4296: LD_EXP 51
4300: PPUSH
4301: LD_VAR 0 3
4305: PPUSH
4306: CALL 80114 0 2
4310: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4311: LD_VAR 0 3
4315: PPUSH
4316: LD_INT 4
4318: PPUSH
4319: LD_INT 0
4321: PPUSH
4322: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4326: LD_VAR 0 3
4330: PPUSH
4331: LD_EXP 1
4335: PPUSH
4336: CALL_OW 250
4340: PPUSH
4341: LD_EXP 1
4345: PPUSH
4346: CALL_OW 251
4350: PPUSH
4351: CALL_OW 114
// end ;
4355: GO 4249
4357: POP
4358: POP
// firstRussianAttack := 1 ;
4359: LD_ADDR_EXP 23
4363: PUSH
4364: LD_INT 1
4366: ST_TO_ADDR
// end ; end_of_file
4367: LD_VAR 0 1
4371: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4372: LD_INT 0
4374: PPUSH
4375: PPUSH
4376: PPUSH
// for i = 1 to count do
4377: LD_ADDR_VAR 0 8
4381: PUSH
4382: DOUBLE
4383: LD_INT 1
4385: DEC
4386: ST_TO_ADDR
4387: LD_VAR 0 6
4391: PUSH
4392: FOR_TO
4393: IFFALSE 4474
// begin uc_side = side ;
4395: LD_ADDR_OWVAR 20
4399: PUSH
4400: LD_VAR 0 1
4404: ST_TO_ADDR
// uc_nation = nation ;
4405: LD_ADDR_OWVAR 21
4409: PUSH
4410: LD_VAR 0 2
4414: ST_TO_ADDR
// hc_gallery =  ;
4415: LD_ADDR_OWVAR 33
4419: PUSH
4420: LD_STRING 
4422: ST_TO_ADDR
// hc_name =  ;
4423: LD_ADDR_OWVAR 26
4427: PUSH
4428: LD_STRING 
4430: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4431: LD_INT 0
4433: PPUSH
4434: LD_VAR 0 5
4438: PPUSH
4439: LD_VAR 0 4
4443: PPUSH
4444: CALL_OW 380
// un = CreateHuman ;
4448: LD_ADDR_VAR 0 9
4452: PUSH
4453: CALL_OW 44
4457: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4458: LD_VAR 0 9
4462: PPUSH
4463: LD_VAR 0 3
4467: PPUSH
4468: CALL_OW 52
// end ;
4472: GO 4392
4474: POP
4475: POP
// end ;
4476: LD_VAR 0 7
4480: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4481: LD_INT 0
4483: PPUSH
4484: PPUSH
4485: PPUSH
// uc_side := GetSide ( b ) ;
4486: LD_ADDR_OWVAR 20
4490: PUSH
4491: LD_VAR 0 2
4495: PPUSH
4496: CALL_OW 255
4500: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4501: LD_ADDR_OWVAR 21
4505: PUSH
4506: LD_VAR 0 2
4510: PPUSH
4511: CALL_OW 248
4515: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4516: LD_INT 0
4518: PPUSH
4519: LD_INT 1
4521: PPUSH
4522: LD_VAR 0 1
4526: PPUSH
4527: CALL_OW 380
// un = CreateHuman ;
4531: LD_ADDR_VAR 0 4
4535: PUSH
4536: CALL_OW 44
4540: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4541: LD_ADDR_VAR 0 5
4545: PUSH
4546: LD_VAR 0 2
4550: PPUSH
4551: CALL_OW 254
4555: PUSH
4556: LD_INT 3
4558: MINUS
4559: ST_TO_ADDR
// if dir < 0 then
4560: LD_VAR 0 5
4564: PUSH
4565: LD_INT 0
4567: LESS
4568: IFFALSE 4584
// dir := 6 + dir ;
4570: LD_ADDR_VAR 0 5
4574: PUSH
4575: LD_INT 6
4577: PUSH
4578: LD_VAR 0 5
4582: PLUS
4583: ST_TO_ADDR
// SetDir ( un , dir ) ;
4584: LD_VAR 0 4
4588: PPUSH
4589: LD_VAR 0 5
4593: PPUSH
4594: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4598: LD_VAR 0 4
4602: PPUSH
4603: LD_VAR 0 2
4607: PPUSH
4608: CALL_OW 52
// end ;
4612: LD_VAR 0 3
4616: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4617: LD_INT 0
4619: PPUSH
4620: PPUSH
4621: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4622: LD_ADDR_VAR 0 6
4626: PUSH
4627: LD_VAR 0 1
4631: PUSH
4632: LD_INT 1
4634: PPUSH
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 12
4644: ARRAY
4645: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4646: LD_VAR 0 6
4650: PPUSH
4651: CALL_OW 258
4655: PUSH
4656: LD_INT 1
4658: EQUAL
4659: IFFALSE 4677
// Say ( speaker , dialogMID ) else
4661: LD_VAR 0 6
4665: PPUSH
4666: LD_VAR 0 2
4670: PPUSH
4671: CALL_OW 88
4675: GO 4691
// Say ( speaker , dialogFID ) ;
4677: LD_VAR 0 6
4681: PPUSH
4682: LD_VAR 0 3
4686: PPUSH
4687: CALL_OW 88
// result := speaker ;
4691: LD_ADDR_VAR 0 4
4695: PUSH
4696: LD_VAR 0 6
4700: ST_TO_ADDR
// end ;
4701: LD_VAR 0 4
4705: RET
// export function PrepareDifficulty ; var tmp ; begin
4706: LD_INT 0
4708: PPUSH
4709: PPUSH
// if Difficulty = 1 then
4710: LD_OWVAR 67
4714: PUSH
4715: LD_INT 1
4717: EQUAL
4718: IFFALSE 4736
// begin RuSoldMinLevel = 1 ;
4720: LD_ADDR_EXP 16
4724: PUSH
4725: LD_INT 1
4727: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4728: LD_ADDR_EXP 17
4732: PUSH
4733: LD_INT 2
4735: ST_TO_ADDR
// end ; if Difficulty = 2 then
4736: LD_OWVAR 67
4740: PUSH
4741: LD_INT 2
4743: EQUAL
4744: IFFALSE 4845
// begin RuSoldMinLevel = 2 ;
4746: LD_ADDR_EXP 16
4750: PUSH
4751: LD_INT 2
4753: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4754: LD_ADDR_EXP 17
4758: PUSH
4759: LD_INT 3
4761: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4762: LD_INT 23
4764: PPUSH
4765: CALL_OW 64
// uc_nation = 3 ;
4769: LD_ADDR_OWVAR 21
4773: PUSH
4774: LD_INT 3
4776: ST_TO_ADDR
// uc_side = 3 ;
4777: LD_ADDR_OWVAR 20
4781: PUSH
4782: LD_INT 3
4784: ST_TO_ADDR
// bc_level = 5 ;
4785: LD_ADDR_OWVAR 43
4789: PUSH
4790: LD_INT 5
4792: ST_TO_ADDR
// bc_type = 32 ;
4793: LD_ADDR_OWVAR 42
4797: PUSH
4798: LD_INT 32
4800: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4801: LD_ADDR_VAR 0 2
4805: PUSH
4806: LD_INT 76
4808: PPUSH
4809: LD_INT 91
4811: PPUSH
4812: LD_INT 2
4814: PPUSH
4815: CALL_OW 47
4819: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4820: LD_VAR 0 2
4824: PPUSH
4825: LD_INT 43
4827: PPUSH
4828: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4832: LD_INT 51
4834: PPUSH
4835: LD_INT 3
4837: PPUSH
4838: LD_INT 1
4840: PPUSH
4841: CALL_OW 322
// end ; if Difficulty >= 3 then
4845: LD_OWVAR 67
4849: PUSH
4850: LD_INT 3
4852: GREATEREQUAL
4853: IFFALSE 5017
// begin RuSoldMinLevel = Difficulty ;
4855: LD_ADDR_EXP 16
4859: PUSH
4860: LD_OWVAR 67
4864: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4865: LD_ADDR_EXP 17
4869: PUSH
4870: LD_INT 4
4872: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4873: LD_INT 26
4875: PPUSH
4876: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4880: LD_INT 23
4882: PPUSH
4883: CALL_OW 64
// uc_nation = 3 ;
4887: LD_ADDR_OWVAR 21
4891: PUSH
4892: LD_INT 3
4894: ST_TO_ADDR
// uc_side = 3 ;
4895: LD_ADDR_OWVAR 20
4899: PUSH
4900: LD_INT 3
4902: ST_TO_ADDR
// bc_level = 5 ;
4903: LD_ADDR_OWVAR 43
4907: PUSH
4908: LD_INT 5
4910: ST_TO_ADDR
// bc_type = 32 ;
4911: LD_ADDR_OWVAR 42
4915: PUSH
4916: LD_INT 32
4918: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4919: LD_ADDR_VAR 0 2
4923: PUSH
4924: LD_INT 76
4926: PPUSH
4927: LD_INT 91
4929: PPUSH
4930: LD_INT 2
4932: PPUSH
4933: CALL_OW 47
4937: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4938: LD_VAR 0 2
4942: PPUSH
4943: LD_INT 44
4945: PPUSH
4946: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4950: LD_ADDR_VAR 0 2
4954: PUSH
4955: LD_INT 83
4957: PPUSH
4958: LD_INT 84
4960: PPUSH
4961: LD_INT 2
4963: PPUSH
4964: CALL_OW 47
4968: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4969: LD_VAR 0 2
4973: PPUSH
4974: LD_INT 43
4976: PPUSH
4977: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4981: LD_INT 51
4983: PPUSH
4984: LD_INT 3
4986: PPUSH
4987: LD_INT 1
4989: PPUSH
4990: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4994: LD_INT 52
4996: PPUSH
4997: LD_INT 3
4999: PPUSH
5000: LD_INT 1
5002: PPUSH
5003: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
5007: LD_INT 25
5009: PPUSH
5010: LD_INT 44
5012: PPUSH
5013: CALL_OW 431
// end ; end ;
5017: LD_VAR 0 1
5021: RET
// export function EnergyDialog ; begin
5022: LD_INT 0
5024: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5025: LD_INT 46
5027: PPUSH
5028: LD_INT 1
5030: PPUSH
5031: CALL_OW 321
5035: PUSH
5036: LD_INT 1
5038: EQUAL
5039: IFFALSE 5057
5041: PUSH
5042: LD_INT 35
5044: PPUSH
5045: LD_INT 1
5047: PPUSH
5048: CALL_OW 321
5052: PUSH
5053: LD_INT 1
5055: EQUAL
5056: AND
5057: IFFALSE 5081
// begin Say ( JMM , D9c-JMM-1 ) ;
5059: LD_EXP 1
5063: PPUSH
5064: LD_STRING D9c-JMM-1
5066: PPUSH
5067: CALL_OW 88
// energyVDialog = 1 ;
5071: LD_ADDR_EXP 33
5075: PUSH
5076: LD_INT 1
5078: ST_TO_ADDR
// end else
5079: GO 5243
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5081: LD_INT 35
5083: PPUSH
5084: LD_INT 1
5086: PPUSH
5087: CALL_OW 321
5091: PUSH
5092: LD_INT 2
5094: EQUAL
5095: IFFALSE 5107
5097: PUSH
5098: LD_EXP 33
5102: PUSH
5103: LD_INT 0
5105: EQUAL
5106: AND
5107: IFFALSE 5129
// begin Say ( JMM , D9c-JMM-1a ) ;
5109: LD_EXP 1
5113: PPUSH
5114: LD_STRING D9c-JMM-1a
5116: PPUSH
5117: CALL_OW 88
// energyVDialog = 1 ;
5121: LD_ADDR_EXP 33
5125: PUSH
5126: LD_INT 1
5128: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5129: LD_INT 46
5131: PPUSH
5132: LD_INT 1
5134: PPUSH
5135: CALL_OW 321
5139: PUSH
5140: LD_INT 2
5142: EQUAL
5143: IFFALSE 5155
5145: PUSH
5146: LD_EXP 33
5150: PUSH
5151: LD_INT 0
5153: EQUAL
5154: AND
5155: IFFALSE 5177
// begin Say ( JMM , D9c-JMM-1b ) ;
5157: LD_EXP 1
5161: PPUSH
5162: LD_STRING D9c-JMM-1b
5164: PPUSH
5165: CALL_OW 88
// energyVDialog = 1 ;
5169: LD_ADDR_EXP 33
5173: PUSH
5174: LD_INT 1
5176: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5177: LD_INT 46
5179: PPUSH
5180: LD_INT 1
5182: PPUSH
5183: CALL_OW 321
5187: PUSH
5188: LD_INT 2
5190: EQUAL
5191: IFFALSE 5209
5193: PUSH
5194: LD_INT 21
5196: PPUSH
5197: LD_INT 1
5199: PPUSH
5200: CALL_OW 321
5204: PUSH
5205: LD_INT 2
5207: EQUAL
5208: AND
5209: IFFALSE 5221
5211: PUSH
5212: LD_EXP 33
5216: PUSH
5217: LD_INT 0
5219: EQUAL
5220: AND
5221: IFFALSE 5243
// begin Say ( JMM , D9c-JMM-1c ) ;
5223: LD_EXP 1
5227: PPUSH
5228: LD_STRING D9c-JMM-1c
5230: PPUSH
5231: CALL_OW 88
// energyVDialog = 1 ;
5235: LD_ADDR_EXP 33
5239: PUSH
5240: LD_INT 1
5242: ST_TO_ADDR
// end ; end ; end ;
5243: LD_VAR 0 1
5247: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5248: LD_INT 0
5250: PPUSH
5251: PPUSH
5252: PPUSH
5253: PPUSH
5254: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5255: LD_VAR 0 1
5259: NOT
5260: IFTRUE 5277
5262: PUSH
5263: LD_VAR 0 1
5267: PPUSH
5268: CALL_OW 256
5272: PUSH
5273: LD_INT 250
5275: LESS
5276: OR
5277: IFTRUE 5307
5279: PUSH
5280: LD_VAR 0 1
5284: PPUSH
5285: CALL_OW 314
5289: IFFALSE 5306
5291: PUSH
5292: LD_VAR 0 1
5296: PPUSH
5297: CALL_OW 261
5301: PUSH
5302: LD_INT 20
5304: GREATER
5305: AND
5306: OR
5307: IFFALSE 5311
// exit ;
5309: GO 5678
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5311: LD_VAR 0 1
5315: PPUSH
5316: CALL_OW 261
5320: PUSH
5321: LD_INT 20
5323: LESS
5324: IFFALSE 5342
5326: PUSH
5327: LD_VAR 0 1
5331: PPUSH
5332: CALL_OW 110
5336: PUSH
5337: LD_INT 21
5339: EQUAL
5340: NOT
5341: AND
5342: IFFALSE 5369
// begin ComStop ( bulldozer ) ;
5344: LD_VAR 0 1
5348: PPUSH
5349: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5353: LD_VAR 0 1
5357: PPUSH
5358: LD_INT 21
5360: PPUSH
5361: CALL_OW 109
// exit ;
5365: GO 5678
// end else
5367: GO 5396
// if GetFuel ( bulldozer ) > 20 then
5369: LD_VAR 0 1
5373: PPUSH
5374: CALL_OW 261
5378: PUSH
5379: LD_INT 20
5381: GREATER
5382: IFFALSE 5396
// SetTag ( bulldozer , 0 ) ;
5384: LD_VAR 0 1
5388: PPUSH
5389: LD_INT 0
5391: PPUSH
5392: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5396: LD_ADDR_VAR 0 5
5400: PUSH
5401: LD_VAR 0 2
5405: PPUSH
5406: CALL_OW 353
5410: ST_TO_ADDR
// tmp := [ ] ;
5411: LD_ADDR_VAR 0 6
5415: PUSH
5416: EMPTY
5417: ST_TO_ADDR
// for i = 1 to list do
5418: LD_ADDR_VAR 0 4
5422: PUSH
5423: DOUBLE
5424: LD_INT 1
5426: DEC
5427: ST_TO_ADDR
5428: LD_VAR 0 5
5432: PUSH
5433: FOR_TO
5434: IFFALSE 5532
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5436: LD_VAR 0 5
5440: PUSH
5441: LD_VAR 0 4
5445: ARRAY
5446: PUSH
5447: LD_INT 1
5449: ARRAY
5450: PPUSH
5451: LD_VAR 0 5
5455: PUSH
5456: LD_VAR 0 4
5460: ARRAY
5461: PUSH
5462: LD_INT 2
5464: ARRAY
5465: PPUSH
5466: CALL_OW 554
5470: IFFALSE 5530
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5472: LD_ADDR_VAR 0 6
5476: PUSH
5477: LD_VAR 0 6
5481: PPUSH
5482: LD_VAR 0 6
5486: PUSH
5487: LD_INT 1
5489: PLUS
5490: PPUSH
5491: LD_VAR 0 5
5495: PUSH
5496: LD_VAR 0 4
5500: ARRAY
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PUSH
5506: LD_VAR 0 5
5510: PUSH
5511: LD_VAR 0 4
5515: ARRAY
5516: PUSH
5517: LD_INT 2
5519: ARRAY
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PPUSH
5525: CALL_OW 1
5529: ST_TO_ADDR
// end ;
5530: GO 5433
5532: POP
5533: POP
// ComStop ( bulldozer ) ;
5534: LD_VAR 0 1
5538: PPUSH
5539: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5543: LD_ADDR_VAR 0 7
5547: PUSH
5548: LD_VAR 0 1
5552: PPUSH
5553: CALL_OW 250
5557: PUSH
5558: LD_VAR 0 1
5562: PPUSH
5563: CALL_OW 251
5567: PUSH
5568: EMPTY
5569: LIST
5570: LIST
5571: ST_TO_ADDR
// for i = tmp downto 1 do
5572: LD_ADDR_VAR 0 4
5576: PUSH
5577: DOUBLE
5578: LD_VAR 0 6
5582: INC
5583: ST_TO_ADDR
5584: LD_INT 1
5586: PUSH
5587: FOR_DOWNTO
5588: IFFALSE 5676
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5590: LD_ADDR_VAR 0 7
5594: PUSH
5595: LD_VAR 0 7
5599: PUSH
5600: LD_INT 1
5602: ARRAY
5603: PPUSH
5604: LD_VAR 0 7
5608: PUSH
5609: LD_INT 2
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 6
5617: PPUSH
5618: CALL 5785 0 3
5622: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5623: LD_VAR 0 1
5627: PPUSH
5628: LD_VAR 0 7
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: LD_VAR 0 7
5641: PUSH
5642: LD_INT 2
5644: ARRAY
5645: PPUSH
5646: CALL 5683 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5650: LD_ADDR_VAR 0 6
5654: PUSH
5655: LD_VAR 0 6
5659: PPUSH
5660: LD_VAR 0 7
5664: PUSH
5665: LD_INT 3
5667: ARRAY
5668: PPUSH
5669: CALL_OW 3
5673: ST_TO_ADDR
// end ;
5674: GO 5587
5676: POP
5677: POP
// end ;
5678: LD_VAR 0 3
5682: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5683: LD_INT 0
5685: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5686: LD_VAR 0 2
5690: PPUSH
5691: LD_VAR 0 3
5695: PPUSH
5696: CALL_OW 351
5700: IFFALSE 5718
5702: PUSH
5703: LD_VAR 0 2
5707: PPUSH
5708: LD_VAR 0 3
5712: PPUSH
5713: CALL_OW 554
5717: AND
5718: IFFALSE 5736
5720: PUSH
5721: LD_VAR 0 2
5725: PPUSH
5726: LD_VAR 0 3
5730: PPUSH
5731: CALL_OW 488
5735: AND
5736: IFFALSE 5759
5738: PUSH
5739: LD_VAR 0 2
5743: PPUSH
5744: LD_VAR 0 3
5748: PPUSH
5749: CALL_OW 428
5753: PUSH
5754: LD_INT 1
5756: NEG
5757: EQUAL
5758: AND
5759: IFFALSE 5780
// AddComMoveXY ( bulldozer , x , y ) ;
5761: LD_VAR 0 1
5765: PPUSH
5766: LD_VAR 0 2
5770: PPUSH
5771: LD_VAR 0 3
5775: PPUSH
5776: CALL_OW 171
// end ;
5780: LD_VAR 0 4
5784: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
// dist := 99999 ;
5794: LD_ADDR_VAR 0 6
5798: PUSH
5799: LD_INT 99999
5801: ST_TO_ADDR
// for i = 1 to list do
5802: LD_ADDR_VAR 0 5
5806: PUSH
5807: DOUBLE
5808: LD_INT 1
5810: DEC
5811: ST_TO_ADDR
5812: LD_VAR 0 3
5816: PUSH
5817: FOR_TO
5818: IFFALSE 5956
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5820: LD_ADDR_VAR 0 7
5824: PUSH
5825: LD_VAR 0 1
5829: PPUSH
5830: LD_VAR 0 2
5834: PPUSH
5835: LD_VAR 0 3
5839: PUSH
5840: LD_VAR 0 5
5844: ARRAY
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: PPUSH
5850: LD_VAR 0 3
5854: PUSH
5855: LD_VAR 0 5
5859: ARRAY
5860: PUSH
5861: LD_INT 2
5863: ARRAY
5864: PPUSH
5865: CALL_OW 298
5869: ST_TO_ADDR
// if d = 0 then
5870: LD_VAR 0 7
5874: PUSH
5875: LD_INT 0
5877: EQUAL
5878: IFFALSE 5882
// continue ;
5880: GO 5817
// if d < dist then
5882: LD_VAR 0 7
5886: PUSH
5887: LD_VAR 0 6
5891: LESS
5892: IFFALSE 5954
// begin _x := list [ i ] [ 1 ] ;
5894: LD_ADDR_VAR 0 8
5898: PUSH
5899: LD_VAR 0 3
5903: PUSH
5904: LD_VAR 0 5
5908: ARRAY
5909: PUSH
5910: LD_INT 1
5912: ARRAY
5913: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5914: LD_ADDR_VAR 0 9
5918: PUSH
5919: LD_VAR 0 3
5923: PUSH
5924: LD_VAR 0 5
5928: ARRAY
5929: PUSH
5930: LD_INT 2
5932: ARRAY
5933: ST_TO_ADDR
// _i := i ;
5934: LD_ADDR_VAR 0 10
5938: PUSH
5939: LD_VAR 0 5
5943: ST_TO_ADDR
// dist := d ;
5944: LD_ADDR_VAR 0 6
5948: PUSH
5949: LD_VAR 0 7
5953: ST_TO_ADDR
// end ; end ;
5954: GO 5817
5956: POP
5957: POP
// result := [ _x , _y , _i , dist ] ;
5958: LD_ADDR_VAR 0 4
5962: PUSH
5963: LD_VAR 0 8
5967: PUSH
5968: LD_VAR 0 9
5972: PUSH
5973: LD_VAR 0 10
5977: PUSH
5978: LD_VAR 0 6
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: ST_TO_ADDR
// end ;
5989: LD_VAR 0 4
5993: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5994: LD_INT 0
5996: PPUSH
5997: PPUSH
// for i = 1 to 72 do
5998: LD_ADDR_VAR 0 5
6002: PUSH
6003: DOUBLE
6004: LD_INT 1
6006: DEC
6007: ST_TO_ADDR
6008: LD_INT 72
6010: PUSH
6011: FOR_TO
6012: IFFALSE 6068
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
6014: LD_VAR 0 5
6018: PPUSH
6019: LD_VAR 0 1
6023: PPUSH
6024: CALL_OW 321
6028: PUSH
6029: LD_INT 1
6031: EQUAL
6032: IFFALSE 6050
6034: PUSH
6035: LD_VAR 0 5
6039: PPUSH
6040: LD_VAR 0 3
6044: PPUSH
6045: CALL_OW 482
6049: AND
6050: IFFALSE 6066
// AddComResearch ( lab , i ) ;
6052: LD_VAR 0 2
6056: PPUSH
6057: LD_VAR 0 5
6061: PPUSH
6062: CALL_OW 184
6066: GO 6011
6068: POP
6069: POP
// end ;
6070: LD_VAR 0 4
6074: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6075: LD_INT 0
6077: PPUSH
6078: PPUSH
6079: PPUSH
6080: PPUSH
6081: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6082: LD_ADDR_VAR 0 7
6086: PUSH
6087: LD_VAR 0 2
6091: PPUSH
6092: CALL_OW 313
6096: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6097: LD_ADDR_VAR 0 8
6101: PUSH
6102: LD_VAR 0 3
6106: PPUSH
6107: LD_INT 22
6109: PUSH
6110: LD_VAR 0 1
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 25
6121: PUSH
6122: LD_INT 2
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: LD_INT 24
6131: PUSH
6132: LD_INT 750
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PUSH
6139: LD_INT 3
6141: PUSH
6142: LD_INT 54
6144: PUSH
6145: EMPTY
6146: LIST
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 70
6162: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6163: LD_ADDR_VAR 0 5
6167: PUSH
6168: LD_VAR 0 3
6172: PPUSH
6173: LD_INT 22
6175: PUSH
6176: LD_VAR 0 1
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PUSH
6185: LD_INT 21
6187: PUSH
6188: LD_INT 3
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 3
6197: PUSH
6198: LD_INT 24
6200: PUSH
6201: LD_INT 1000
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: LIST
6216: PUSH
6217: EMPTY
6218: LIST
6219: PPUSH
6220: CALL_OW 70
6224: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6225: LD_VAR 0 5
6229: NOT
6230: IFFALSE 6276
6232: PUSH
6233: LD_INT 22
6235: PUSH
6236: LD_VAR 0 1
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 25
6247: PUSH
6248: LD_INT 2
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 24
6257: PUSH
6258: LD_INT 250
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 69
6274: NOT
6275: AND
6276: IFFALSE 6280
// exit ;
6278: GO 6382
// if buildingsList and engineerOkInside then
6280: LD_VAR 0 5
6284: IFFALSE 6292
6286: PUSH
6287: LD_VAR 0 7
6291: AND
6292: IFFALSE 6318
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6294: LD_VAR 0 7
6298: PPUSH
6299: LD_INT 25
6301: PUSH
6302: LD_INT 2
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PPUSH
6309: CALL_OW 72
6313: PPUSH
6314: CALL_OW 122
// if buildingsList and engineerOkOutside then
6318: LD_VAR 0 5
6322: IFFALSE 6330
6324: PUSH
6325: LD_VAR 0 8
6329: AND
6330: IFFALSE 6350
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6332: LD_VAR 0 8
6336: PPUSH
6337: LD_VAR 0 5
6341: PUSH
6342: LD_INT 1
6344: ARRAY
6345: PPUSH
6346: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6350: LD_VAR 0 5
6354: PUSH
6355: LD_INT 0
6357: EQUAL
6358: IFFALSE 6366
6360: PUSH
6361: LD_VAR 0 8
6365: AND
6366: IFFALSE 6382
// ComEnterUnit ( engineerOkOutside , building ) ;
6368: LD_VAR 0 8
6372: PPUSH
6373: LD_VAR 0 2
6377: PPUSH
6378: CALL_OW 120
// end ;
6382: LD_VAR 0 4
6386: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp ; begin
6387: LD_INT 0
6389: PPUSH
6390: PPUSH
6391: PPUSH
6392: PPUSH
6393: PPUSH
6394: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6395: LD_ADDR_VAR 0 6
6399: PUSH
6400: LD_INT 22
6402: PUSH
6403: LD_VAR 0 1
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 25
6414: PUSH
6415: LD_INT 4
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: PUSH
6422: LD_INT 23
6424: PUSH
6425: LD_INT 2
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: LD_INT 24
6434: PUSH
6435: LD_INT 251
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: PPUSH
6448: CALL_OW 69
6452: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6453: LD_ADDR_VAR 0 7
6457: PUSH
6458: LD_VAR 0 3
6462: PPUSH
6463: LD_INT 22
6465: PUSH
6466: LD_VAR 0 1
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 23
6477: PUSH
6478: LD_INT 2
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: PUSH
6485: LD_INT 25
6487: PUSH
6488: LD_INT 4
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 50
6497: PUSH
6498: EMPTY
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: PPUSH
6507: CALL_OW 70
6511: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6512: LD_ADDR_VAR 0 8
6516: PUSH
6517: LD_VAR 0 3
6521: PPUSH
6522: LD_INT 22
6524: PUSH
6525: LD_VAR 0 1
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: LD_INT 21
6536: PUSH
6537: LD_INT 1
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 3
6546: PUSH
6547: LD_INT 25
6549: PUSH
6550: LD_INT 3
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 3
6563: PUSH
6564: LD_INT 24
6566: PUSH
6567: LD_INT 750
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: PPUSH
6584: CALL_OW 70
6588: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6589: LD_ADDR_VAR 0 9
6593: PUSH
6594: LD_VAR 0 2
6598: PPUSH
6599: LD_INT 22
6601: PUSH
6602: LD_VAR 0 1
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 21
6613: PUSH
6614: LD_INT 1
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: LD_INT 3
6623: PUSH
6624: LD_INT 25
6626: PUSH
6627: LD_INT 3
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: LD_INT 3
6640: PUSH
6641: LD_INT 24
6643: PUSH
6644: LD_INT 1000
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PPUSH
6661: CALL_OW 70
6665: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6666: LD_VAR 0 8
6670: NOT
6671: IFFALSE 6680
6673: PUSH
6674: LD_VAR 0 9
6678: NOT
6679: AND
6680: IFFALSE 6689
6682: PUSH
6683: LD_VAR 0 6
6687: NOT
6688: AND
6689: IFFALSE 6693
// exit ;
6691: GO 6899
// if damageUnits and sciList then
6693: LD_VAR 0 8
6697: IFFALSE 6705
6699: PUSH
6700: LD_VAR 0 6
6704: AND
6705: IFFALSE 6721
// ComMoveToArea ( damageUnits , healArea ) ;
6707: LD_VAR 0 8
6711: PPUSH
6712: LD_VAR 0 2
6716: PPUSH
6717: CALL_OW 113
// if unitsToHeal and sciList then
6721: LD_VAR 0 9
6725: IFFALSE 6733
6727: PUSH
6728: LD_VAR 0 6
6732: AND
6733: IFFALSE 6744
// ComExitBuilding ( sciList ) ;
6735: LD_VAR 0 6
6739: PPUSH
6740: CALL_OW 122
// if unitsToHeal and sciListOutside then
6744: LD_VAR 0 9
6748: IFFALSE 6756
6750: PUSH
6751: LD_VAR 0 7
6755: AND
6756: IFFALSE 6776
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6758: LD_VAR 0 7
6762: PPUSH
6763: LD_VAR 0 9
6767: PUSH
6768: LD_INT 1
6770: ARRAY
6771: PPUSH
6772: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6776: LD_VAR 0 8
6780: PUSH
6781: LD_INT 0
6783: EQUAL
6784: IFFALSE 6796
6786: PUSH
6787: LD_VAR 0 9
6791: PUSH
6792: LD_INT 0
6794: EQUAL
6795: AND
6796: IFFALSE 6804
6798: PUSH
6799: LD_VAR 0 7
6803: AND
6804: IFFALSE 6899
// begin tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6806: LD_ADDR_VAR 0 10
6810: PUSH
6811: LD_INT 22
6813: PUSH
6814: LD_VAR 0 1
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: LD_INT 21
6825: PUSH
6826: LD_INT 3
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 30
6835: PUSH
6836: LD_INT 8
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: LIST
6847: PPUSH
6848: CALL_OW 69
6852: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rand ( 1 , tmp ) ] ) ;
6853: LD_VAR 0 7
6857: PPUSH
6858: LD_INT 3
6860: PUSH
6861: LD_INT 60
6863: PUSH
6864: EMPTY
6865: LIST
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PPUSH
6871: CALL_OW 72
6875: PPUSH
6876: LD_VAR 0 10
6880: PUSH
6881: LD_INT 1
6883: PPUSH
6884: LD_VAR 0 10
6888: PPUSH
6889: CALL_OW 12
6893: ARRAY
6894: PPUSH
6895: CALL_OW 120
// end ; end ;
6899: LD_VAR 0 5
6903: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6908: LD_INT 22
6910: PUSH
6911: LD_VAR 0 1
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PUSH
6920: LD_INT 21
6922: PUSH
6923: LD_INT 2
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PPUSH
6934: CALL_OW 69
6938: PUSH
6939: LD_VAR 0 3
6943: LESSEQUAL
6944: IFFALSE 7011
// for i := 1 to vehCount do
6946: LD_ADDR_VAR 0 9
6950: PUSH
6951: DOUBLE
6952: LD_INT 1
6954: DEC
6955: ST_TO_ADDR
6956: LD_VAR 0 3
6960: PUSH
6961: FOR_TO
6962: IFFALSE 7009
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6964: LD_VAR 0 2
6968: PPUSH
6969: LD_VAR 0 7
6973: PPUSH
6974: LD_VAR 0 5
6978: PPUSH
6979: LD_VAR 0 6
6983: PPUSH
6984: LD_VAR 0 4
6988: PUSH
6989: LD_INT 1
6991: PPUSH
6992: LD_VAR 0 4
6996: PPUSH
6997: CALL_OW 12
7001: ARRAY
7002: PPUSH
7003: CALL_OW 185
7007: GO 6961
7009: POP
7010: POP
// end ;
7011: LD_VAR 0 8
7015: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skill , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnits , medics , soldiers , enemyUnits , target ; begin
7016: LD_INT 0
7018: PPUSH
7019: PPUSH
7020: PPUSH
7021: PPUSH
7022: PPUSH
7023: PPUSH
7024: PPUSH
7025: PPUSH
7026: PPUSH
// soldiers := [ ] ;
7027: LD_ADDR_VAR 0 16
7031: PUSH
7032: EMPTY
7033: ST_TO_ADDR
// medics := [ ] ;
7034: LD_ADDR_VAR 0 15
7038: PUSH
7039: EMPTY
7040: ST_TO_ADDR
// for i := 1 to medicCount do
7041: LD_ADDR_VAR 0 11
7045: PUSH
7046: DOUBLE
7047: LD_INT 1
7049: DEC
7050: ST_TO_ADDR
7051: LD_VAR 0 4
7055: PUSH
7056: FOR_TO
7057: IFFALSE 7147
// begin uc_side := side ;
7059: LD_ADDR_OWVAR 20
7063: PUSH
7064: LD_VAR 0 1
7068: ST_TO_ADDR
// uc_nation := nation ;
7069: LD_ADDR_OWVAR 21
7073: PUSH
7074: LD_VAR 0 2
7078: ST_TO_ADDR
// InitHC_All ( ) ;
7079: CALL_OW 584
// PrepareHuman ( false , 4 , skill ) ;
7083: LD_INT 0
7085: PPUSH
7086: LD_INT 4
7088: PPUSH
7089: LD_VAR 0 5
7093: PPUSH
7094: CALL_OW 380
// un := CreateHuman ;
7098: LD_ADDR_VAR 0 13
7102: PUSH
7103: CALL_OW 44
7107: ST_TO_ADDR
// medics := Join ( medics , un ) ;
7108: LD_ADDR_VAR 0 15
7112: PUSH
7113: LD_VAR 0 15
7117: PPUSH
7118: LD_VAR 0 13
7122: PPUSH
7123: CALL 80114 0 2
7127: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7128: LD_VAR 0 13
7132: PPUSH
7133: LD_VAR 0 6
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 49
// end ;
7145: GO 7056
7147: POP
7148: POP
// for i = 1 to soldierCount do
7149: LD_ADDR_VAR 0 11
7153: PUSH
7154: DOUBLE
7155: LD_INT 1
7157: DEC
7158: ST_TO_ADDR
7159: LD_VAR 0 3
7163: PUSH
7164: FOR_TO
7165: IFFALSE 7255
// begin uc_side := side ;
7167: LD_ADDR_OWVAR 20
7171: PUSH
7172: LD_VAR 0 1
7176: ST_TO_ADDR
// uc_nation := nation ;
7177: LD_ADDR_OWVAR 21
7181: PUSH
7182: LD_VAR 0 2
7186: ST_TO_ADDR
// InitHC_All ( ) ;
7187: CALL_OW 584
// PrepareHuman ( false , 1 , skill ) ;
7191: LD_INT 0
7193: PPUSH
7194: LD_INT 1
7196: PPUSH
7197: LD_VAR 0 5
7201: PPUSH
7202: CALL_OW 380
// un := CreateHuman ;
7206: LD_ADDR_VAR 0 13
7210: PUSH
7211: CALL_OW 44
7215: ST_TO_ADDR
// soldiers := Join ( soldiers , un ) ;
7216: LD_ADDR_VAR 0 16
7220: PUSH
7221: LD_VAR 0 16
7225: PPUSH
7226: LD_VAR 0 13
7230: PPUSH
7231: CALL 80114 0 2
7235: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7236: LD_VAR 0 13
7240: PPUSH
7241: LD_VAR 0 6
7245: PPUSH
7246: LD_INT 0
7248: PPUSH
7249: CALL_OW 49
// end ;
7253: GO 7164
7255: POP
7256: POP
// ComMoveToArea ( medics , healArea ) ;
7257: LD_VAR 0 15
7261: PPUSH
7262: LD_VAR 0 7
7266: PPUSH
7267: CALL_OW 113
// if strategy = 1 then
7271: LD_VAR 0 9
7275: PUSH
7276: LD_INT 1
7278: EQUAL
7279: IFFALSE 7343
// begin AddComAgressiveMove ( soldiers , 91 , 63 ) ;
7281: LD_VAR 0 16
7285: PPUSH
7286: LD_INT 91
7288: PPUSH
7289: LD_INT 63
7291: PPUSH
7292: CALL_OW 174
// AddComAgressiveMove ( soldiers , 101 , 53 ) ;
7296: LD_VAR 0 16
7300: PPUSH
7301: LD_INT 101
7303: PPUSH
7304: LD_INT 53
7306: PPUSH
7307: CALL_OW 174
// AddComAgressiveMove ( soldiers , 75 , 23 ) ;
7311: LD_VAR 0 16
7315: PPUSH
7316: LD_INT 75
7318: PPUSH
7319: LD_INT 23
7321: PPUSH
7322: CALL_OW 174
// AddComAgressiveMove ( soldiers , 78 , 8 ) ;
7326: LD_VAR 0 16
7330: PPUSH
7331: LD_INT 78
7333: PPUSH
7334: LD_INT 8
7336: PPUSH
7337: CALL_OW 174
// end else
7341: GO 7358
// begin AddComAgressiveMove ( soldiers , 75 , 39 ) ;
7343: LD_VAR 0 16
7347: PPUSH
7348: LD_INT 75
7350: PPUSH
7351: LD_INT 39
7353: PPUSH
7354: CALL_OW 174
// end ; wait ( 0 0$10 ) ;
7358: LD_INT 350
7360: PPUSH
7361: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7365: LD_INT 35
7367: PPUSH
7368: CALL_OW 67
// damageUnits := UnitFilter ( soldiers , [ f_tag , 1 ] ) ;
7372: LD_ADDR_VAR 0 14
7376: PUSH
7377: LD_VAR 0 16
7381: PPUSH
7382: LD_INT 120
7384: PUSH
7385: LD_INT 1
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 72
7396: ST_TO_ADDR
// if medics and damageUnits then
7397: LD_VAR 0 15
7401: IFFALSE 7409
7403: PUSH
7404: LD_VAR 0 14
7408: AND
7409: IFFALSE 7429
// ComHeal ( medics , damageUnits [ 1 ] ) ;
7411: LD_VAR 0 15
7415: PPUSH
7416: LD_VAR 0 14
7420: PUSH
7421: LD_INT 1
7423: ARRAY
7424: PPUSH
7425: CALL_OW 128
// for i in soldiers do
7429: LD_ADDR_VAR 0 11
7433: PUSH
7434: LD_VAR 0 16
7438: PUSH
7439: FOR_IN
7440: IFFALSE 7645
// begin if IsDead ( i ) then
7442: LD_VAR 0 11
7446: PPUSH
7447: CALL_OW 301
7451: IFFALSE 7471
// begin soldiers := soldiers diff i ;
7453: LD_ADDR_VAR 0 16
7457: PUSH
7458: LD_VAR 0 16
7462: PUSH
7463: LD_VAR 0 11
7467: DIFF
7468: ST_TO_ADDR
// continue ;
7469: GO 7439
// end ; if GetTag ( i ) = 1 then
7471: LD_VAR 0 11
7475: PPUSH
7476: CALL_OW 110
7480: PUSH
7481: LD_INT 1
7483: EQUAL
7484: IFFALSE 7548
// begin if GetLives ( i ) = 1000 then
7486: LD_VAR 0 11
7490: PPUSH
7491: CALL_OW 256
7495: PUSH
7496: LD_INT 1000
7498: EQUAL
7499: IFFALSE 7515
// begin SetTag ( i , 0 ) ;
7501: LD_VAR 0 11
7505: PPUSH
7506: LD_INT 0
7508: PPUSH
7509: CALL_OW 109
// continue ;
7513: GO 7439
// end ; if not IsInArea ( i , healArea ) then
7515: LD_VAR 0 11
7519: PPUSH
7520: LD_VAR 0 7
7524: PPUSH
7525: CALL_OW 308
7529: NOT
7530: IFFALSE 7546
// ComMoveToArea ( i , healArea ) ;
7532: LD_VAR 0 11
7536: PPUSH
7537: LD_VAR 0 7
7541: PPUSH
7542: CALL_OW 113
// continue ;
7546: GO 7439
// end ; if GetLives ( i ) < 700 then
7548: LD_VAR 0 11
7552: PPUSH
7553: CALL_OW 256
7557: PUSH
7558: LD_INT 700
7560: LESS
7561: IFFALSE 7591
// begin SetTag ( i , 1 ) ;
7563: LD_VAR 0 11
7567: PPUSH
7568: LD_INT 1
7570: PPUSH
7571: CALL_OW 109
// ComMoveToArea ( i , healArea ) ;
7575: LD_VAR 0 11
7579: PPUSH
7580: LD_VAR 0 7
7584: PPUSH
7585: CALL_OW 113
// continue ;
7589: GO 7439
// end ; target := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7591: LD_ADDR_VAR 0 18
7595: PUSH
7596: LD_INT 22
7598: PUSH
7599: LD_VAR 0 8
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PPUSH
7608: CALL_OW 69
7612: PPUSH
7613: LD_VAR 0 11
7617: PPUSH
7618: CALL_OW 74
7622: ST_TO_ADDR
// if target then
7623: LD_VAR 0 18
7627: IFFALSE 7643
// ComAttackUnit ( i , target ) ;
7629: LD_VAR 0 11
7633: PPUSH
7634: LD_VAR 0 18
7638: PPUSH
7639: CALL_OW 115
// end ;
7643: GO 7439
7645: POP
7646: POP
// until not soldiers ;
7647: LD_VAR 0 16
7651: NOT
7652: IFFALSE 7365
// if medics then
7654: LD_VAR 0 15
7658: IFFALSE 7778
// begin repeat medics := UnitFilter ( medics , [ f_ok ] ) ;
7660: LD_ADDR_VAR 0 15
7664: PUSH
7665: LD_VAR 0 15
7669: PPUSH
7670: LD_INT 50
7672: PUSH
7673: EMPTY
7674: LIST
7675: PPUSH
7676: CALL_OW 72
7680: ST_TO_ADDR
// wait ( 0 0$1 ) ;
7681: LD_INT 35
7683: PPUSH
7684: CALL_OW 67
// for i in medics do
7688: LD_ADDR_VAR 0 11
7692: PUSH
7693: LD_VAR 0 15
7697: PUSH
7698: FOR_IN
7699: IFFALSE 7769
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
7701: LD_VAR 0 11
7705: PPUSH
7706: CALL_OW 314
7710: NOT
7711: IFFALSE 7728
7713: PUSH
7714: LD_VAR 0 11
7718: PPUSH
7719: LD_INT 4
7721: PPUSH
7722: CALL_OW 308
7726: NOT
7727: AND
7728: IFFALSE 7744
// ComMoveToArea ( i , RussianAttack ) else
7730: LD_VAR 0 11
7734: PPUSH
7735: LD_INT 4
7737: PPUSH
7738: CALL_OW 113
7742: GO 7767
// if IsInArea ( i , RussianAttack ) then
7744: LD_VAR 0 11
7748: PPUSH
7749: LD_INT 4
7751: PPUSH
7752: CALL_OW 308
7756: IFFALSE 7767
// RemoveUnit ( i ) ;
7758: LD_VAR 0 11
7762: PPUSH
7763: CALL_OW 64
7767: GO 7698
7769: POP
7770: POP
// until not medics ;
7771: LD_VAR 0 15
7775: NOT
7776: IFFALSE 7660
// end ; end ; end_of_file
7778: LD_VAR 0 10
7782: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
7783: LD_INT 0
7785: PPUSH
7786: PPUSH
7787: PPUSH
7788: PPUSH
7789: PPUSH
// InGameOn ;
7790: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
7794: LD_ADDR_VAR 0 3
7798: PUSH
7799: LD_EXP 8
7803: PUSH
7804: LD_EXP 9
7808: PUSH
7809: LD_EXP 10
7813: PUSH
7814: LD_EXP 11
7818: PUSH
7819: LD_EXP 12
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
7831: LD_ADDR_VAR 0 4
7835: PUSH
7836: LD_INT 46
7838: PUSH
7839: LD_INT 45
7841: PUSH
7842: LD_INT 44
7844: PUSH
7845: LD_INT 43
7847: PUSH
7848: LD_INT 42
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
7858: LD_ADDR_VAR 0 5
7862: PUSH
7863: LD_INT 14
7865: PUSH
7866: LD_INT 12
7868: PUSH
7869: LD_INT 10
7871: PUSH
7872: LD_INT 8
7874: PUSH
7875: LD_INT 6
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
7885: LD_EXP 11
7889: PPUSH
7890: LD_INT 31
7892: PPUSH
7893: LD_INT 59
7895: PPUSH
7896: LD_INT 19
7898: PPUSH
7899: LD_INT 5
7901: PPUSH
7902: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
7906: LD_INT 32
7908: PPUSH
7909: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
7913: LD_INT 32
7915: PPUSH
7916: LD_INT 51
7918: PPUSH
7919: LD_INT 26
7921: PPUSH
7922: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
7926: LD_INT 32
7928: PPUSH
7929: LD_INT 53
7931: PPUSH
7932: LD_INT 23
7934: PPUSH
7935: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
7939: LD_INT 32
7941: PPUSH
7942: LD_INT 52
7944: PPUSH
7945: LD_INT 19
7947: PPUSH
7948: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7952: LD_INT 35
7954: PPUSH
7955: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
7959: LD_INT 32
7961: PPUSH
7962: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
7966: LD_INT 32
7968: PPUSH
7969: CALL_OW 250
7973: PUSH
7974: LD_INT 52
7976: EQUAL
7977: IFFALSE 7992
7979: PUSH
7980: LD_INT 32
7982: PPUSH
7983: CALL_OW 251
7987: PUSH
7988: LD_INT 19
7990: EQUAL
7991: AND
7992: IFFALSE 7952
// ComExitVehicle ( JMM ) ;
7994: LD_EXP 1
7998: PPUSH
7999: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8003: LD_EXP 7
8007: PPUSH
8008: LD_EXP 1
8012: PPUSH
8013: CALL_OW 119
// wait ( 0 0$01 ) ;
8017: LD_INT 35
8019: PPUSH
8020: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8024: LD_EXP 1
8028: PPUSH
8029: LD_INT 46
8031: PPUSH
8032: LD_INT 10
8034: PPUSH
8035: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8039: LD_EXP 1
8043: PPUSH
8044: LD_EXP 7
8048: PPUSH
8049: CALL_OW 179
// wait ( 0 0$4 ) ;
8053: LD_INT 140
8055: PPUSH
8056: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8060: LD_EXP 1
8064: PPUSH
8065: LD_STRING D1-JMM-1
8067: PPUSH
8068: CALL_OW 88
// if not dialogue_skipped then
8072: LD_OWVAR 59
8076: NOT
8077: IFFALSE 8744
// begin for i := 1 to gammaSquad do
8079: LD_ADDR_VAR 0 2
8083: PUSH
8084: DOUBLE
8085: LD_INT 1
8087: DEC
8088: ST_TO_ADDR
8089: LD_VAR 0 3
8093: PUSH
8094: FOR_TO
8095: IFFALSE 8156
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8097: LD_VAR 0 3
8101: PUSH
8102: LD_VAR 0 2
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 4
8112: PUSH
8113: LD_VAR 0 2
8117: ARRAY
8118: PPUSH
8119: LD_VAR 0 5
8123: PUSH
8124: LD_VAR 0 2
8128: ARRAY
8129: PPUSH
8130: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8134: LD_VAR 0 3
8138: PUSH
8139: LD_VAR 0 2
8143: ARRAY
8144: PPUSH
8145: LD_EXP 1
8149: PPUSH
8150: CALL_OW 179
// end ;
8154: GO 8094
8156: POP
8157: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8158: LD_EXP 4
8162: PPUSH
8163: LD_INT 41
8165: PPUSH
8166: LD_INT 4
8168: PPUSH
8169: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8173: LD_EXP 4
8177: PPUSH
8178: LD_EXP 1
8182: PPUSH
8183: CALL_OW 179
// if Lisa = false and Bobby then
8187: LD_EXP 4
8191: PUSH
8192: LD_INT 0
8194: EQUAL
8195: IFFALSE 8203
8197: PUSH
8198: LD_EXP 2
8202: AND
8203: IFFALSE 8234
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8205: LD_EXP 2
8209: PPUSH
8210: LD_INT 41
8212: PPUSH
8213: LD_INT 4
8215: PPUSH
8216: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8220: LD_EXP 2
8224: PPUSH
8225: LD_EXP 1
8229: PPUSH
8230: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8234: LD_EXP 4
8238: PUSH
8239: LD_INT 0
8241: EQUAL
8242: IFFALSE 8254
8244: PUSH
8245: LD_EXP 2
8249: PUSH
8250: LD_INT 0
8252: EQUAL
8253: AND
8254: IFFALSE 8262
8256: PUSH
8257: LD_EXP 3
8261: AND
8262: IFFALSE 8293
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8264: LD_EXP 3
8268: PPUSH
8269: LD_INT 41
8271: PPUSH
8272: LD_INT 4
8274: PPUSH
8275: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8279: LD_EXP 3
8283: PPUSH
8284: LD_EXP 1
8288: PPUSH
8289: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8293: LD_EXP 4
8297: PUSH
8298: LD_INT 0
8300: EQUAL
8301: IFFALSE 8313
8303: PUSH
8304: LD_EXP 2
8308: PUSH
8309: LD_INT 0
8311: EQUAL
8312: AND
8313: IFFALSE 8325
8315: PUSH
8316: LD_EXP 3
8320: PUSH
8321: LD_INT 0
8323: EQUAL
8324: AND
8325: IFFALSE 8356
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8327: LD_EXP 6
8331: PPUSH
8332: LD_INT 41
8334: PPUSH
8335: LD_INT 4
8337: PPUSH
8338: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8342: LD_EXP 6
8346: PPUSH
8347: LD_EXP 1
8351: PPUSH
8352: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8356: LD_EXP 7
8360: PPUSH
8361: LD_STRING D1-Brown-1
8363: PPUSH
8364: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8368: LD_EXP 1
8372: PPUSH
8373: LD_STRING D1-JMM-2
8375: PPUSH
8376: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8380: LD_EXP 7
8384: PPUSH
8385: LD_STRING D1-Brown-2
8387: PPUSH
8388: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8392: LD_EXP 1
8396: PPUSH
8397: LD_EXP 9
8401: PPUSH
8402: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8406: LD_EXP 9
8410: PPUSH
8411: LD_STRING D1-FSol1-2
8413: PPUSH
8414: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8418: LD_EXP 1
8422: PPUSH
8423: LD_EXP 8
8427: PPUSH
8428: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8432: LD_EXP 8
8436: PPUSH
8437: LD_STRING D1-Sol2-2
8439: PPUSH
8440: CALL_OW 88
// if Lisa then
8444: LD_EXP 4
8448: IFFALSE 8488
// begin ComTurnUnit ( JMM , Lisa ) ;
8450: LD_EXP 1
8454: PPUSH
8455: LD_EXP 4
8459: PPUSH
8460: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
8464: LD_EXP 4
8468: PPUSH
8469: LD_STRING D1-Lisa-2
8471: PPUSH
8472: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8476: LD_EXP 1
8480: PPUSH
8481: LD_STRING D1-JMM-3
8483: PPUSH
8484: CALL_OW 88
// end ; if Bobby then
8488: LD_EXP 2
8492: IFFALSE 8532
// begin ComTurnUnit ( JMM , Bobby ) ;
8494: LD_EXP 1
8498: PPUSH
8499: LD_EXP 2
8503: PPUSH
8504: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
8508: LD_EXP 2
8512: PPUSH
8513: LD_STRING D1-Bobby-2
8515: PPUSH
8516: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8520: LD_EXP 1
8524: PPUSH
8525: LD_STRING D1-JMM-3
8527: PPUSH
8528: CALL_OW 88
// end ; if Cyrus then
8532: LD_EXP 3
8536: IFFALSE 8576
// begin ComTurnUnit ( JMM , Cyrus ) ;
8538: LD_EXP 1
8542: PPUSH
8543: LD_EXP 3
8547: PPUSH
8548: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
8552: LD_EXP 3
8556: PPUSH
8557: LD_STRING D1-Cyrus-2
8559: PPUSH
8560: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
8564: LD_EXP 1
8568: PPUSH
8569: LD_STRING D1-JMM-3
8571: PPUSH
8572: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
8576: LD_EXP 1
8580: PPUSH
8581: LD_EXP 7
8585: PPUSH
8586: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
8590: LD_EXP 1
8594: PPUSH
8595: LD_STRING D1-JMM-3a
8597: PPUSH
8598: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
8602: LD_EXP 7
8606: PPUSH
8607: LD_INT 38
8609: PPUSH
8610: LD_INT 5
8612: PPUSH
8613: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
8617: LD_EXP 7
8621: PPUSH
8622: LD_EXP 1
8626: PPUSH
8627: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
8631: LD_EXP 1
8635: PPUSH
8636: LD_INT 40
8638: PPUSH
8639: LD_INT 7
8641: PPUSH
8642: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8646: LD_EXP 1
8650: PPUSH
8651: LD_EXP 7
8655: PPUSH
8656: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
8660: LD_EXP 7
8664: PPUSH
8665: LD_STRING D1-Brown-3
8667: PPUSH
8668: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
8672: LD_EXP 14
8676: PPUSH
8677: LD_STRING D1-Har-3
8679: PPUSH
8680: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
8684: LD_EXP 1
8688: PPUSH
8689: LD_STRING D1-JMM-4
8691: PPUSH
8692: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
8696: LD_EXP 14
8700: PPUSH
8701: LD_STRING D1-Har-4
8703: PPUSH
8704: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
8708: LD_EXP 1
8712: PPUSH
8713: LD_STRING D1-JMM-5
8715: PPUSH
8716: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
8720: LD_EXP 14
8724: PPUSH
8725: LD_STRING D1-Har-5
8727: PPUSH
8728: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
8732: LD_EXP 1
8736: PPUSH
8737: LD_STRING D1-JMM-6
8739: PPUSH
8740: CALL_OW 88
// end ; InGameOff ;
8744: CALL_OW 9
// PrepareRussianConvoy ;
8748: CALL 3396 0 0
// ChangeMissionObjectives ( M1 ) ;
8752: LD_STRING M1
8754: PPUSH
8755: CALL_OW 337
// SaveForQuickRestart ;
8759: CALL_OW 22
// timerStatus = 1 ;
8763: LD_ADDR_EXP 29
8767: PUSH
8768: LD_INT 1
8770: ST_TO_ADDR
// startTimer = 1 ;
8771: LD_ADDR_EXP 30
8775: PUSH
8776: LD_INT 1
8778: ST_TO_ADDR
// bonusAvalaible = 1 ;
8779: LD_ADDR_EXP 44
8783: PUSH
8784: LD_INT 1
8786: ST_TO_ADDR
// wait ( 0 0$3 ) ;
8787: LD_INT 105
8789: PPUSH
8790: CALL_OW 67
// DialogueOn ;
8794: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
8798: LD_EXP 12
8802: PPUSH
8803: LD_STRING D9-Mech1-1
8805: PPUSH
8806: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
8810: LD_EXP 1
8814: PPUSH
8815: LD_STRING D9-JMM-1
8817: PPUSH
8818: CALL_OW 88
// DialogueOff ;
8822: CALL_OW 7
// end ;
8826: LD_VAR 0 1
8830: RET
// export function JMMTraitor ; begin
8831: LD_INT 0
8833: PPUSH
// wait ( 0 0$2 ) ;
8834: LD_INT 70
8836: PPUSH
8837: CALL_OW 67
// DialogueOn ;
8841: CALL_OW 6
// InGameOn ;
8845: CALL_OW 8
// SayRadio ( Harisson , D8-Har-1b ) ;
8849: LD_EXP 14
8853: PPUSH
8854: LD_STRING D8-Har-1b
8856: PPUSH
8857: CALL_OW 94
// YouLost ( LostCommand ) ;
8861: LD_STRING LostCommand
8863: PPUSH
8864: CALL_OW 104
// InGameOff ;
8868: CALL_OW 9
// DialogueOff ;
8872: CALL_OW 7
// end ;
8876: LD_VAR 0 1
8880: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
8881: LD_INT 47
8883: PPUSH
8884: LD_INT 1
8886: PPUSH
8887: CALL_OW 321
8891: PUSH
8892: LD_INT 2
8894: EQUAL
8895: IFFALSE 8904
8897: PUSH
8898: LD_EXP 31
8902: NOT
8903: AND
8904: IFFALSE 8954
8906: PUSH
8907: LD_INT 22
8909: PUSH
8910: LD_INT 1
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PUSH
8917: LD_INT 21
8919: PUSH
8920: LD_INT 3
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PUSH
8927: LD_INT 30
8929: PUSH
8930: LD_INT 3
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 57
8939: PUSH
8940: EMPTY
8941: LIST
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: PPUSH
8949: CALL_OW 69
8953: AND
8954: IFFALSE 9188
8956: GO 8958
8958: DISABLE
// begin factoryDialog := true ;
8959: LD_ADDR_EXP 31
8963: PUSH
8964: LD_INT 1
8966: ST_TO_ADDR
// if IsOk ( Campell ) then
8967: LD_EXP 12
8971: PPUSH
8972: CALL_OW 302
8976: IFFALSE 8992
// Say ( Campell , D10-Mech1-1 ) else
8978: LD_EXP 12
8982: PPUSH
8983: LD_STRING D10-Mech1-1
8985: PPUSH
8986: CALL_OW 88
8990: GO 9188
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
8992: LD_INT 22
8994: PUSH
8995: LD_INT 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 21
9004: PUSH
9005: LD_INT 1
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PUSH
9012: LD_INT 25
9014: PUSH
9015: LD_INT 3
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 26
9024: PUSH
9025: LD_INT 1
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: PPUSH
9038: CALL_OW 69
9042: PUSH
9043: LD_EXP 1
9047: PUSH
9048: EMPTY
9049: LIST
9050: DIFF
9051: IFFALSE 9125
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9053: LD_INT 22
9055: PUSH
9056: LD_INT 1
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PUSH
9063: LD_INT 21
9065: PUSH
9066: LD_INT 1
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PUSH
9073: LD_INT 25
9075: PUSH
9076: LD_INT 3
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: LD_INT 26
9085: PUSH
9086: LD_INT 1
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: PPUSH
9099: CALL_OW 69
9103: PUSH
9104: LD_EXP 1
9108: PUSH
9109: EMPTY
9110: LIST
9111: DIFF
9112: PPUSH
9113: LD_STRING D10-Mech1-1
9115: PPUSH
9116: LD_STRING D10-Mech1-1
9118: PPUSH
9119: CALL 4617 0 3
9123: GO 9188
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9125: LD_INT 22
9127: PUSH
9128: LD_INT 1
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: PUSH
9135: LD_INT 21
9137: PUSH
9138: LD_INT 1
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: PUSH
9145: LD_INT 26
9147: PUSH
9148: LD_INT 1
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: LIST
9159: PUSH
9160: LD_INT 1
9162: ARRAY
9163: PPUSH
9164: CALL_OW 69
9168: PUSH
9169: LD_EXP 1
9173: PUSH
9174: EMPTY
9175: LIST
9176: DIFF
9177: PPUSH
9178: LD_STRING D10-Mech1-1
9180: PPUSH
9181: LD_STRING D10-Mech1-1
9183: PPUSH
9184: CALL 4617 0 3
// end ; end ;
9188: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9189: LD_INT 22
9191: PUSH
9192: LD_INT 1
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: LD_INT 30
9201: PUSH
9202: LD_INT 32
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: PPUSH
9213: CALL_OW 69
9217: IFFALSE 9229
9219: PUSH
9220: LD_EXP 32
9224: PUSH
9225: LD_INT 0
9227: EQUAL
9228: AND
9229: IFFALSE 9465
9231: GO 9233
9233: DISABLE
// begin if IsOk ( Claptopn ) then
9234: LD_EXP 11
9238: PPUSH
9239: CALL_OW 302
9243: IFFALSE 9259
// Say ( Claptopn , D9b-Eng1-1 ) else
9245: LD_EXP 11
9249: PPUSH
9250: LD_STRING D9b-Eng1-1
9252: PPUSH
9253: CALL_OW 88
9257: GO 9451
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9259: LD_INT 22
9261: PUSH
9262: LD_INT 1
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 21
9271: PUSH
9272: LD_INT 1
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 25
9281: PUSH
9282: LD_INT 3
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 26
9291: PUSH
9292: LD_INT 1
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: PPUSH
9305: CALL_OW 69
9309: PUSH
9310: LD_EXP 1
9314: PUSH
9315: EMPTY
9316: LIST
9317: DIFF
9318: IFFALSE 9392
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9320: LD_INT 22
9322: PUSH
9323: LD_INT 1
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 21
9332: PUSH
9333: LD_INT 1
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 25
9342: PUSH
9343: LD_INT 2
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 26
9352: PUSH
9353: LD_INT 1
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: PPUSH
9366: CALL_OW 69
9370: PUSH
9371: LD_EXP 1
9375: PUSH
9376: EMPTY
9377: LIST
9378: DIFF
9379: PPUSH
9380: LD_STRING D9b-Eng1-1
9382: PPUSH
9383: LD_STRING D9b-Eng1-11
9385: PPUSH
9386: CALL 4617 0 3
9390: GO 9451
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9392: LD_INT 22
9394: PUSH
9395: LD_INT 1
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 21
9404: PUSH
9405: LD_INT 1
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 26
9414: PUSH
9415: LD_INT 1
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: LIST
9426: PPUSH
9427: CALL_OW 69
9431: PUSH
9432: LD_EXP 1
9436: PUSH
9437: EMPTY
9438: LIST
9439: DIFF
9440: PPUSH
9441: LD_STRING D9b-Eng1-1
9443: PPUSH
9444: LD_STRING D9b-Eng1-1
9446: PPUSH
9447: CALL 4617 0 3
// end ; if energyVDialog = 0 then
9451: LD_EXP 33
9455: PUSH
9456: LD_INT 0
9458: EQUAL
9459: IFFALSE 9465
// EnergyDialog ;
9461: CALL 5022 0 0
// end ;
9465: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9466: LD_EXP 34
9470: PUSH
9471: LD_INT 1
9473: EQUAL
9474: IFFALSE 9486
9476: PUSH
9477: LD_EXP 35
9481: PUSH
9482: LD_INT 1
9484: EQUAL
9485: AND
9486: IFFALSE 9498
9488: GO 9490
9490: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9491: LD_STRING M1a
9493: PPUSH
9494: CALL_OW 337
9498: END
// every 3 3$0 do
9499: GO 9501
9501: DISABLE
// PrepareFirstAttack ;
9502: CALL 4208 0 0
9506: END
// every 0 0$2 trigger UnitFilter ( firstAttackGroup , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9507: LD_EXP 51
9511: PPUSH
9512: LD_INT 21
9514: PUSH
9515: LD_INT 1
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 3
9524: PUSH
9525: LD_INT 24
9527: PUSH
9528: LD_INT 250
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PPUSH
9543: CALL_OW 72
9547: PUSH
9548: LD_INT 0
9550: GREATER
9551: IFFALSE 9563
9553: PUSH
9554: LD_EXP 23
9558: PUSH
9559: LD_INT 1
9561: EQUAL
9562: AND
9563: IFFALSE 9840
9565: GO 9567
9567: DISABLE
9568: LD_INT 0
9570: PPUSH
// begin firstRussianAttack := 2 ;
9571: LD_ADDR_EXP 23
9575: PUSH
9576: LD_INT 2
9578: ST_TO_ADDR
// ComMoveXY ( firstAttackGroup , 125 , 98 ) ;
9579: LD_EXP 51
9583: PPUSH
9584: LD_INT 125
9586: PPUSH
9587: LD_INT 98
9589: PPUSH
9590: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
9594: LD_INT 22
9596: PUSH
9597: LD_INT 1
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: LD_INT 21
9606: PUSH
9607: LD_INT 1
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PPUSH
9618: CALL_OW 69
9622: PUSH
9623: LD_EXP 1
9627: PUSH
9628: LD_EXP 7
9632: PUSH
9633: LD_EXP 4
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: DIFF
9643: PPUSH
9644: LD_STRING DAtt1-Sol1-1
9646: PPUSH
9647: LD_STRING DAtt1-FSol1-1
9649: PPUSH
9650: CALL 4617 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
9654: LD_EXP 1
9658: PPUSH
9659: LD_STRING DAtt1-JMM-1
9661: PPUSH
9662: CALL_OW 88
// if Lisa then
9666: LD_EXP 4
9670: IFFALSE 9686
// Say ( Lisa , DAtt1a-Lisa-1 ) else
9672: LD_EXP 4
9676: PPUSH
9677: LD_STRING DAtt1a-Lisa-1
9679: PPUSH
9680: CALL_OW 88
9684: GO 9757
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
9686: LD_INT 22
9688: PUSH
9689: LD_INT 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 21
9698: PUSH
9699: LD_INT 1
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 26
9708: PUSH
9709: LD_INT 1
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: PPUSH
9721: CALL_OW 69
9725: PUSH
9726: LD_EXP 1
9730: PUSH
9731: LD_EXP 7
9735: PUSH
9736: LD_EXP 4
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: LIST
9745: DIFF
9746: PPUSH
9747: LD_STRING DAtt1a-Sol1-1
9749: PPUSH
9750: LD_STRING DAtt1-FSol1-1
9752: PPUSH
9753: CALL 4617 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
9757: LD_EXP 1
9761: PPUSH
9762: LD_STRING DAtt1a-JMM-1
9764: PPUSH
9765: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
9769: LD_INT 22
9771: PUSH
9772: LD_INT 1
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: PUSH
9779: LD_INT 21
9781: PUSH
9782: LD_INT 1
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 26
9791: PUSH
9792: LD_INT 1
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 69
9808: PUSH
9809: LD_EXP 1
9813: PUSH
9814: LD_EXP 7
9818: PUSH
9819: LD_EXP 4
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: LIST
9828: DIFF
9829: PPUSH
9830: LD_STRING DAtt1b-Sol1-1
9832: PPUSH
9833: LD_STRING DAtt1a-Sol1-1
9835: PPUSH
9836: CALL 4617 0 3
// end ;
9840: PPOPN 1
9842: END
// every 0 0$1 trigger firstRussianAttack > 1 and UnitFilter ( firstAttackGroup , [ [ f_inarea , RussianEscape ] , [ f_type , unit_human ] ] ) do var i ;
9843: LD_EXP 23
9847: PUSH
9848: LD_INT 1
9850: GREATER
9851: IFFALSE 9888
9853: PUSH
9854: LD_EXP 51
9858: PPUSH
9859: LD_INT 95
9861: PUSH
9862: LD_INT 5
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 21
9871: PUSH
9872: LD_INT 1
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PPUSH
9883: CALL_OW 72
9887: AND
9888: IFFALSE 9933
9890: GO 9892
9892: DISABLE
9893: LD_INT 0
9895: PPUSH
// begin for i in UnitFilter ( firstAttackGroup , [ f_ok ] ) do
9896: LD_ADDR_VAR 0 1
9900: PUSH
9901: LD_EXP 51
9905: PPUSH
9906: LD_INT 50
9908: PUSH
9909: EMPTY
9910: LIST
9911: PPUSH
9912: CALL_OW 72
9916: PUSH
9917: FOR_IN
9918: IFFALSE 9931
// RemoveUnit ( i ) ;
9920: LD_VAR 0 1
9924: PPUSH
9925: CALL_OW 64
9929: GO 9917
9931: POP
9932: POP
// end ;
9933: PPOPN 1
9935: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
9936: LD_EXP 28
9940: PUSH
9941: LD_INT 0
9943: EQUAL
9944: IFFALSE 10025
9946: GO 9948
9948: DISABLE
// begin timerStatus = 4 ;
9949: LD_ADDR_EXP 29
9953: PUSH
9954: LD_INT 4
9956: ST_TO_ADDR
// DialogueOn ;
9957: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
9961: LD_EXP 13
9965: PPUSH
9966: LD_STRING D2-Don-1
9968: PPUSH
9969: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
9973: LD_EXP 1
9977: PPUSH
9978: LD_STRING D2-JMM-1
9980: PPUSH
9981: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
9985: LD_EXP 13
9989: PPUSH
9990: LD_STRING D2-Don-2
9992: PPUSH
9993: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9997: LD_EXP 1
10001: PPUSH
10002: LD_STRING D2-JMM-2
10004: PPUSH
10005: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10009: LD_EXP 13
10013: PPUSH
10014: LD_STRING D2-Don-3
10016: PPUSH
10017: CALL_OW 94
// DialogueOff ;
10021: CALL_OW 7
// end ;
10025: END
// every 12 12$0 do var tmp ;
10026: GO 10028
10028: DISABLE
10029: LD_INT 0
10031: PPUSH
// begin PrepareDonaldsonArmy ;
10032: CALL 1179 0 0
// CenterNowOnUnits ( Donaldson ) ;
10036: LD_EXP 13
10040: PPUSH
10041: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10045: LD_INT 22
10047: PUSH
10048: LD_INT 6
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PPUSH
10055: CALL_OW 69
10059: NOT
10060: IFFALSE 10076
// begin wait ( 3 ) ;
10062: LD_INT 3
10064: PPUSH
10065: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10069: LD_STRING ACH_BASE
10071: PPUSH
10072: CALL_OW 543
// end ; tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ Frank ] ;
10076: LD_ADDR_VAR 0 1
10080: PUSH
10081: LD_INT 22
10083: PUSH
10084: LD_INT 4
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PUSH
10091: LD_INT 21
10093: PUSH
10094: LD_INT 1
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PUSH
10101: LD_INT 26
10103: PUSH
10104: LD_INT 1
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: LIST
10115: PPUSH
10116: CALL_OW 69
10120: PUSH
10121: LD_EXP 5
10125: PUSH
10126: EMPTY
10127: LIST
10128: DIFF
10129: ST_TO_ADDR
// DialogueOn ;
10130: CALL_OW 6
// tmp := tmp diff DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10134: LD_ADDR_VAR 0 1
10138: PUSH
10139: LD_VAR 0 1
10143: PUSH
10144: LD_VAR 0 1
10148: PPUSH
10149: LD_STRING D3-Sol1-1
10151: PPUSH
10152: LD_STRING D3-Sol1-1
10154: PPUSH
10155: CALL 4617 0 3
10159: DIFF
10160: ST_TO_ADDR
// DialogRandom ( tmp , D3-Sol2-1 , D3-Sol2-1 ) ;
10161: LD_VAR 0 1
10165: PPUSH
10166: LD_STRING D3-Sol2-1
10168: PPUSH
10169: LD_STRING D3-Sol2-1
10171: PPUSH
10172: CALL 4617 0 3
// if Frank then
10176: LD_EXP 5
10180: IFFALSE 10194
// Say ( Frank , D3-Frank-1 ) ;
10182: LD_EXP 5
10186: PPUSH
10187: LD_STRING D3-Frank-1
10189: PPUSH
10190: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10194: LD_EXP 13
10198: PPUSH
10199: LD_STRING D3-Don-1
10201: PPUSH
10202: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10206: LD_EXP 13
10210: PPUSH
10211: LD_STRING D3-Don-1a
10213: PPUSH
10214: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10218: LD_EXP 1
10222: PPUSH
10223: LD_STRING D3-JMM-1
10225: PPUSH
10226: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10230: LD_EXP 13
10234: PPUSH
10235: LD_STRING D3-Don-2
10237: PPUSH
10238: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10242: LD_INT 22
10244: PUSH
10245: LD_INT 6
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: PUSH
10252: LD_INT 21
10254: PUSH
10255: LD_INT 1
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PPUSH
10266: CALL_OW 69
10270: IFFALSE 10408
// begin Say ( JMM , D3-JMM-2 ) ;
10272: LD_EXP 1
10276: PPUSH
10277: LD_STRING D3-JMM-2
10279: PPUSH
10280: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10284: LD_EXP 13
10288: PPUSH
10289: LD_STRING D3-Don-3
10291: PPUSH
10292: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10296: LD_EXP 1
10300: PPUSH
10301: LD_STRING D3-JMM-3
10303: PPUSH
10304: CALL_OW 88
// if IsOK ( Frank ) then
10308: LD_EXP 5
10312: PPUSH
10313: CALL_OW 302
10317: IFFALSE 10331
// Say ( Frank , D3-Frank-3 ) ;
10319: LD_EXP 5
10323: PPUSH
10324: LD_STRING D3-Frank-3
10326: PPUSH
10327: CALL_OW 88
// DialogueOff ;
10331: CALL_OW 7
// if IsOk ( Frank ) then
10335: LD_EXP 5
10339: PPUSH
10340: CALL_OW 302
10344: IFFALSE 10406
// begin SetSide ( Frank , 0 ) ;
10346: LD_EXP 5
10350: PPUSH
10351: LD_INT 0
10353: PPUSH
10354: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10358: LD_EXP 5
10362: PPUSH
10363: LD_INT 12
10365: PPUSH
10366: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10370: LD_EXP 5
10374: PPUSH
10375: LD_STRING 04t_Frank
10377: PPUSH
10378: CALL_OW 38
// wait ( 0 0$3 ) ;
10382: LD_INT 105
10384: PPUSH
10385: CALL_OW 67
// frankScoutBase = 1 ;
10389: LD_ADDR_EXP 25
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10397: LD_EXP 5
10401: PPUSH
10402: CALL_OW 64
// end ; end else
10406: GO 10495
// begin Say ( JMM , D3-JMM-4 ) ;
10408: LD_EXP 1
10412: PPUSH
10413: LD_STRING D3-JMM-4
10415: PPUSH
10416: CALL_OW 88
// DialogueOff ;
10420: CALL_OW 7
// if IsOk ( Frank ) then
10424: LD_EXP 5
10428: PPUSH
10429: CALL_OW 302
10433: IFFALSE 10495
// begin SetSide ( Frank , 0 ) ;
10435: LD_EXP 5
10439: PPUSH
10440: LD_INT 0
10442: PPUSH
10443: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10447: LD_EXP 5
10451: PPUSH
10452: LD_INT 12
10454: PPUSH
10455: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10459: LD_EXP 5
10463: PPUSH
10464: LD_STRING 04t_Frank
10466: PPUSH
10467: CALL_OW 38
// wait ( 0 0$3 ) ;
10471: LD_INT 105
10473: PPUSH
10474: CALL_OW 67
// frankScoutBase = 1 ;
10478: LD_ADDR_EXP 25
10482: PUSH
10483: LD_INT 1
10485: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
10486: LD_EXP 5
10490: PPUSH
10491: CALL_OW 64
// end ; end ; end ;
10495: PPOPN 1
10497: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
10498: LD_EXP 13
10502: PPUSH
10503: CALL_OW 255
10507: PUSH
10508: LD_INT 4
10510: EQUAL
10511: IFFALSE 10524
10513: PUSH
10514: LD_EXP 13
10518: PPUSH
10519: CALL_OW 302
10523: AND
10524: IFFALSE 10729
10526: GO 10528
10528: DISABLE
10529: LD_INT 0
10531: PPUSH
10532: PPUSH
// begin wait ( 5 5$00 ) ;
10533: LD_INT 10500
10535: PPUSH
10536: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
10540: LD_EXP 13
10544: PPUSH
10545: CALL_OW 255
10549: PUSH
10550: LD_INT 1
10552: EQUAL
10553: IFTRUE 10566
10555: PUSH
10556: LD_EXP 13
10560: PPUSH
10561: CALL_OW 301
10565: OR
10566: IFFALSE 10570
// exit ;
10568: GO 10729
// SayRadio ( Donaldson , D3b-Don-1 ) ;
10570: LD_EXP 13
10574: PPUSH
10575: LD_STRING D3b-Don-1
10577: PPUSH
10578: CALL_OW 94
// donaldsonCoopAttack = 1 ;
10582: LD_ADDR_EXP 41
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
10590: LD_ADDR_VAR 0 2
10594: PUSH
10595: LD_INT 22
10597: PUSH
10598: LD_INT 4
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PPUSH
10605: CALL_OW 69
10609: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10610: LD_INT 35
10612: PPUSH
10613: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
10617: LD_VAR 0 2
10621: NOT
10622: IFTRUE 10654
10624: PUSH
10625: LD_INT 22
10627: PUSH
10628: LD_INT 6
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 101
10637: PUSH
10638: LD_INT 1
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PPUSH
10649: CALL_OW 69
10653: OR
10654: IFFALSE 10610
// if not tmp then
10656: LD_VAR 0 2
10660: NOT
10661: IFFALSE 10665
// exit ;
10663: GO 10729
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
10665: LD_ADDR_VAR 0 1
10669: PUSH
10670: LD_INT 22
10672: PUSH
10673: LD_INT 4
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PPUSH
10680: CALL_OW 69
10684: PUSH
10685: LD_EXP 5
10689: DIFF
10690: PUSH
10691: FOR_IN
10692: IFFALSE 10708
// SetSide ( i , 1 ) ;
10694: LD_VAR 0 1
10698: PPUSH
10699: LD_INT 1
10701: PPUSH
10702: CALL_OW 235
10706: GO 10691
10708: POP
10709: POP
// if IsLive ( Donaldson ) then
10710: LD_EXP 13
10714: PPUSH
10715: CALL_OW 300
10719: IFFALSE 10729
// saveDonaldson := 1 ;
10721: LD_ADDR_EXP 24
10725: PUSH
10726: LD_INT 1
10728: ST_TO_ADDR
// end ;
10729: PPOPN 2
10731: END
// every 0 0$1 trigger IsOk ( Donaldson ) and not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
10732: LD_EXP 13
10736: PPUSH
10737: CALL_OW 302
10741: IFFALSE 10750
10743: PUSH
10744: LD_EXP 24
10748: NOT
10749: AND
10750: IFFALSE 10759
10752: PUSH
10753: LD_EXP 41
10757: NOT
10758: AND
10759: IFFALSE 10802
10761: PUSH
10762: LD_INT 26
10764: PPUSH
10765: LD_INT 22
10767: PUSH
10768: LD_INT 1
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PPUSH
10775: CALL_OW 70
10779: IFTRUE 10801
10781: PUSH
10782: LD_EXP 13
10786: PPUSH
10787: LD_EXP 1
10791: PPUSH
10792: CALL_OW 296
10796: PUSH
10797: LD_INT 6
10799: LESS
10800: OR
10801: AND
10802: IFFALSE 10857
10804: GO 10806
10806: DISABLE
10807: LD_INT 0
10809: PPUSH
// begin saveDonaldson := 1 ;
10810: LD_ADDR_EXP 24
10814: PUSH
10815: LD_INT 1
10817: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
10818: LD_ADDR_VAR 0 1
10822: PUSH
10823: LD_INT 22
10825: PUSH
10826: LD_INT 4
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PPUSH
10833: CALL_OW 69
10837: PUSH
10838: FOR_IN
10839: IFFALSE 10855
// SetSide ( i , 1 ) ;
10841: LD_VAR 0 1
10845: PPUSH
10846: LD_INT 1
10848: PPUSH
10849: CALL_OW 235
10853: GO 10838
10855: POP
10856: POP
// end ;
10857: PPOPN 1
10859: END
// every 0 0$1 trigger frankScoutBase do
10860: LD_EXP 25
10864: IFFALSE 11231
10866: GO 10868
10868: DISABLE
// begin wait ( 2 2$30 ) ;
10869: LD_INT 5250
10871: PPUSH
10872: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10876: LD_INT 35
10878: PPUSH
10879: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
10883: LD_INT 81
10885: PUSH
10886: LD_INT 4
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 92
10895: PUSH
10896: LD_INT 84
10898: PUSH
10899: LD_INT 28
10901: PUSH
10902: LD_INT 22
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PPUSH
10915: CALL_OW 69
10919: NOT
10920: IFFALSE 10876
// uc_side = 4 ;
10922: LD_ADDR_OWVAR 20
10926: PUSH
10927: LD_INT 4
10929: ST_TO_ADDR
// uc_nation = 1 ;
10930: LD_ADDR_OWVAR 21
10934: PUSH
10935: LD_INT 1
10937: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
10938: LD_ADDR_EXP 5
10942: PUSH
10943: LD_STRING 04t_Frank
10945: PPUSH
10946: CALL_OW 34
10950: ST_TO_ADDR
// if not Frank then
10951: LD_EXP 5
10955: NOT
10956: IFFALSE 10960
// exit ;
10958: GO 11231
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
10960: LD_EXP 5
10964: PPUSH
10965: LD_INT 13
10967: PPUSH
10968: LD_INT 0
10970: PPUSH
10971: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
10975: LD_INT 35
10977: PPUSH
10978: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
10982: LD_EXP 1
10986: PPUSH
10987: CALL_OW 310
10991: NOT
10992: IFFALSE 11012
10994: PUSH
10995: LD_EXP 1
10999: PPUSH
11000: LD_INT 4
11002: PPUSH
11003: CALL_OW 296
11007: PUSH
11008: LD_INT 20
11010: LESS
11011: AND
11012: IFFALSE 11045
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11014: LD_EXP 5
11018: PPUSH
11019: LD_EXP 1
11023: PPUSH
11024: CALL_OW 250
11028: PPUSH
11029: LD_EXP 1
11033: PPUSH
11034: CALL_OW 251
11038: PPUSH
11039: CALL_OW 111
11043: GO 11060
// ComMoveXY ( Frank , 51 , 15 ) ;
11045: LD_EXP 5
11049: PPUSH
11050: LD_INT 51
11052: PPUSH
11053: LD_INT 15
11055: PPUSH
11056: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11060: LD_EXP 5
11064: PPUSH
11065: LD_EXP 1
11069: PPUSH
11070: CALL_OW 296
11074: PUSH
11075: LD_INT 10
11077: LESS
11078: IFFALSE 10975
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11080: LD_EXP 1
11084: PUSH
11085: LD_EXP 5
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PPUSH
11094: CALL_OW 87
// DialogueOn ;
11098: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11102: LD_EXP 5
11106: PPUSH
11107: LD_STRING D3a-Frank-1
11109: PPUSH
11110: CALL_OW 88
// if Lisa then
11114: LD_EXP 4
11118: IFFALSE 11168
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11120: LD_EXP 4
11124: PPUSH
11125: LD_STRING D3a-Lisa-1
11127: PPUSH
11128: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11132: LD_EXP 5
11136: PPUSH
11137: LD_STRING D3a-Frank-2
11139: PPUSH
11140: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11144: LD_EXP 4
11148: PPUSH
11149: LD_STRING D3a-Lisa-2
11151: PPUSH
11152: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11156: LD_EXP 5
11160: PPUSH
11161: LD_STRING D3a-Frank-3
11163: PPUSH
11164: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11168: LD_EXP 1
11172: PPUSH
11173: LD_STRING D3a-JMM-3
11175: PPUSH
11176: CALL_OW 88
// DialogueOff ;
11180: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11184: LD_EXP 5
11188: PPUSH
11189: LD_INT 1
11191: PPUSH
11192: CALL_OW 235
// InGameOn ;
11196: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11200: LD_INT 1
11202: PPUSH
11203: LD_INT 7
11205: PPUSH
11206: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11210: LD_INT 93
11212: PPUSH
11213: LD_INT 91
11215: PPUSH
11216: CALL_OW 84
// wait ( 0 0$5 ) ;
11220: LD_INT 175
11222: PPUSH
11223: CALL_OW 67
// InGameOff ;
11227: CALL_OW 9
// end ;
11231: END
// every 12 12$0 trigger Difficulty > 1 do
11232: LD_OWVAR 67
11236: PUSH
11237: LD_INT 1
11239: GREATER
11240: IFFALSE 11264
11242: GO 11244
11244: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11245: LD_INT 24
11247: PPUSH
11248: LD_INT 24
11250: PPUSH
11251: LD_INT 1
11253: PPUSH
11254: LD_INT 1
11256: PPUSH
11257: LD_INT 53
11259: PPUSH
11260: CALL_OW 185
11264: END
// every 18 18$0 do
11265: GO 11267
11267: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11268: LD_EXP 14
11272: PPUSH
11273: LD_STRING D4-Har-1
11275: PPUSH
11276: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11280: LD_EXP 1
11284: PPUSH
11285: LD_STRING D4-JMM-1
11287: PPUSH
11288: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11292: LD_EXP 14
11296: PPUSH
11297: LD_STRING D4-Har-2
11299: PPUSH
11300: CALL_OW 94
// case Query ( Q1 ) of 1 :
11304: LD_STRING Q1
11306: PPUSH
11307: CALL_OW 97
11311: PUSH
11312: LD_INT 1
11314: DOUBLE
11315: EQUAL
11316: IFTRUE 11320
11318: GO 11379
11320: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11321: LD_EXP 1
11325: PPUSH
11326: LD_STRING D5-JMM-1
11328: PPUSH
11329: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11333: LD_EXP 14
11337: PPUSH
11338: LD_STRING D5-Har-1
11340: PPUSH
11341: CALL_OW 94
// timeToSupport = 10 10$0 ;
11345: LD_ADDR_EXP 28
11349: PUSH
11350: LD_INT 21000
11352: ST_TO_ADDR
// timerStatus = 2 ;
11353: LD_ADDR_EXP 29
11357: PUSH
11358: LD_INT 2
11360: ST_TO_ADDR
// startTimer = 1 ;
11361: LD_ADDR_EXP 30
11365: PUSH
11366: LD_INT 1
11368: ST_TO_ADDR
// harrAnswer = 1 ;
11369: LD_ADDR_EXP 26
11373: PUSH
11374: LD_INT 1
11376: ST_TO_ADDR
// end ; 2 :
11377: GO 11514
11379: LD_INT 2
11381: DOUBLE
11382: EQUAL
11383: IFTRUE 11387
11385: GO 11446
11387: POP
// begin Say ( JMM , D5-JMM-2 ) ;
11388: LD_EXP 1
11392: PPUSH
11393: LD_STRING D5-JMM-2
11395: PPUSH
11396: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
11400: LD_EXP 14
11404: PPUSH
11405: LD_STRING D5-Har-2
11407: PPUSH
11408: CALL_OW 94
// timeToSupport = 5 5$0 ;
11412: LD_ADDR_EXP 28
11416: PUSH
11417: LD_INT 10500
11419: ST_TO_ADDR
// timerStatus = 2 ;
11420: LD_ADDR_EXP 29
11424: PUSH
11425: LD_INT 2
11427: ST_TO_ADDR
// startTimer = 1 ;
11428: LD_ADDR_EXP 30
11432: PUSH
11433: LD_INT 1
11435: ST_TO_ADDR
// harrAnswer = 2 ;
11436: LD_ADDR_EXP 26
11440: PUSH
11441: LD_INT 2
11443: ST_TO_ADDR
// end ; 3 :
11444: GO 11514
11446: LD_INT 3
11448: DOUBLE
11449: EQUAL
11450: IFTRUE 11454
11452: GO 11513
11454: POP
// begin Say ( JMM , D5-JMM-3 ) ;
11455: LD_EXP 1
11459: PPUSH
11460: LD_STRING D5-JMM-3
11462: PPUSH
11463: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
11467: LD_EXP 14
11471: PPUSH
11472: LD_STRING D5-Har-3
11474: PPUSH
11475: CALL_OW 94
// timeToSupport = 5 5$0 ;
11479: LD_ADDR_EXP 28
11483: PUSH
11484: LD_INT 10500
11486: ST_TO_ADDR
// timerStatus = 2 ;
11487: LD_ADDR_EXP 29
11491: PUSH
11492: LD_INT 2
11494: ST_TO_ADDR
// startTimer = 1 ;
11495: LD_ADDR_EXP 30
11499: PUSH
11500: LD_INT 1
11502: ST_TO_ADDR
// harrAnswer = 3 ;
11503: LD_ADDR_EXP 26
11507: PUSH
11508: LD_INT 3
11510: ST_TO_ADDR
// end ; end ;
11511: GO 11514
11513: POP
// end ;
11514: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
11515: LD_EXP 29
11519: PUSH
11520: LD_INT 2
11522: EQUAL
11523: IFFALSE 11535
11525: PUSH
11526: LD_EXP 28
11530: PUSH
11531: LD_INT 0
11533: EQUAL
11534: AND
11535: IFFALSE 11824
11537: GO 11539
11539: DISABLE
// begin timerStatus = 4 ;
11540: LD_ADDR_EXP 29
11544: PUSH
11545: LD_INT 4
11547: ST_TO_ADDR
// if harrAnswer = 1 then
11548: LD_EXP 26
11552: PUSH
11553: LD_INT 1
11555: EQUAL
11556: IFFALSE 11640
// begin PrepareHarrisonSupport ( 3 ) ;
11558: LD_INT 3
11560: PPUSH
11561: CALL 1749 0 1
// wait ( 1 1$0 ) ;
11565: LD_INT 2100
11567: PPUSH
11568: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
11572: LD_EXP 14
11576: PPUSH
11577: LD_STRING D7-Har-1
11579: PPUSH
11580: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
11584: LD_STRING M2
11586: PPUSH
11587: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
11591: LD_ADDR_EXP 27
11595: PUSH
11596: LD_INT 31500
11598: PUSH
11599: LD_INT 10500
11601: PUSH
11602: LD_INT 8400
11604: PUSH
11605: LD_INT 6300
11607: PUSH
11608: LD_INT 6300
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: PUSH
11617: LD_OWVAR 67
11621: ARRAY
11622: PLUS
11623: ST_TO_ADDR
// startTimer = 1 ;
11624: LD_ADDR_EXP 30
11628: PUSH
11629: LD_INT 1
11631: ST_TO_ADDR
// timerStatus = 3 ;
11632: LD_ADDR_EXP 29
11636: PUSH
11637: LD_INT 3
11639: ST_TO_ADDR
// end ; if harrAnswer = 2 then
11640: LD_EXP 26
11644: PUSH
11645: LD_INT 2
11647: EQUAL
11648: IFFALSE 11732
// begin PrepareHarrisonSupport ( 4 ) ;
11650: LD_INT 4
11652: PPUSH
11653: CALL 1749 0 1
// wait ( 1 1$0 ) ;
11657: LD_INT 2100
11659: PPUSH
11660: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
11664: LD_EXP 14
11668: PPUSH
11669: LD_STRING D7-Har-1
11671: PPUSH
11672: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
11676: LD_STRING M2
11678: PPUSH
11679: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
11683: LD_ADDR_EXP 27
11687: PUSH
11688: LD_INT 33600
11690: PUSH
11691: LD_INT 10500
11693: PUSH
11694: LD_INT 8400
11696: PUSH
11697: LD_INT 6300
11699: PUSH
11700: LD_INT 5250
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: PUSH
11709: LD_OWVAR 67
11713: ARRAY
11714: PLUS
11715: ST_TO_ADDR
// startTimer = 1 ;
11716: LD_ADDR_EXP 30
11720: PUSH
11721: LD_INT 1
11723: ST_TO_ADDR
// timerStatus = 3 ;
11724: LD_ADDR_EXP 29
11728: PUSH
11729: LD_INT 3
11731: ST_TO_ADDR
// end ; if harrAnswer = 3 then
11732: LD_EXP 26
11736: PUSH
11737: LD_INT 3
11739: EQUAL
11740: IFFALSE 11824
// begin PrepareHarrisonSupport ( 5 ) ;
11742: LD_INT 5
11744: PPUSH
11745: CALL 1749 0 1
// wait ( 1 1$0 ) ;
11749: LD_INT 2100
11751: PPUSH
11752: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
11756: LD_EXP 14
11760: PPUSH
11761: LD_STRING D7-Har-1
11763: PPUSH
11764: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
11768: LD_STRING M2
11770: PPUSH
11771: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
11775: LD_ADDR_EXP 27
11779: PUSH
11780: LD_INT 35700
11782: PUSH
11783: LD_INT 10500
11785: PUSH
11786: LD_INT 6300
11788: PUSH
11789: LD_INT 4200
11791: PUSH
11792: LD_INT 3150
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: PUSH
11801: LD_OWVAR 67
11805: ARRAY
11806: PLUS
11807: ST_TO_ADDR
// startTimer = 1 ;
11808: LD_ADDR_EXP 30
11812: PUSH
11813: LD_INT 1
11815: ST_TO_ADDR
// timerStatus = 3 ;
11816: LD_ADDR_EXP 29
11820: PUSH
11821: LD_INT 3
11823: ST_TO_ADDR
// end ; end ;
11824: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
11825: LD_EXP 27
11829: PUSH
11830: LD_INT 8400
11832: LESSEQUAL
11833: IFFALSE 11845
11835: PUSH
11836: LD_EXP 29
11840: PUSH
11841: LD_INT 3
11843: EQUAL
11844: AND
11845: IFFALSE 11877
11847: GO 11849
11849: DISABLE
// begin DialogueOn ;
11850: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
11854: LD_EXP 14
11858: PPUSH
11859: LD_STRING D7a-Har-1
11861: PPUSH
11862: CALL_OW 94
// DialogueOff ;
11866: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
11870: LD_STRING M2a
11872: PPUSH
11873: CALL_OW 337
// end ;
11877: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
11878: LD_EXP 27
11882: PUSH
11883: LD_INT 0
11885: LESSEQUAL
11886: IFFALSE 11898
11888: PUSH
11889: LD_EXP 29
11893: PUSH
11894: LD_INT 3
11896: EQUAL
11897: AND
11898: IFFALSE 11907
11900: PUSH
11901: LD_EXP 40
11905: NOT
11906: AND
11907: IFFALSE 12046
11909: GO 11911
11911: DISABLE
11912: LD_INT 0
11914: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
11915: LD_ADDR_VAR 0 1
11919: PUSH
11920: LD_INT 22
11922: PUSH
11923: LD_INT 1
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PPUSH
11930: CALL_OW 69
11934: PUSH
11935: LD_EXP 1
11939: PUSH
11940: EMPTY
11941: LIST
11942: DIFF
11943: ST_TO_ADDR
// saveDonaldson := 2 ;
11944: LD_ADDR_EXP 24
11948: PUSH
11949: LD_INT 2
11951: ST_TO_ADDR
// DialogueOn ;
11952: CALL_OW 6
// if IsOk ( Donaldson ) then
11956: LD_EXP 13
11960: PPUSH
11961: CALL_OW 302
11965: IFFALSE 11981
// SayRadio ( Harisson , D8-Har-1 ) else
11967: LD_EXP 14
11971: PPUSH
11972: LD_STRING D8-Har-1
11974: PPUSH
11975: CALL_OW 94
11979: GO 11993
// SayRadio ( Harisson , D8-Har-1a ) ;
11981: LD_EXP 14
11985: PPUSH
11986: LD_STRING D8-Har-1a
11988: PPUSH
11989: CALL_OW 94
// DialogueOff ;
11993: CALL_OW 7
// SetSide ( tmp , 4 ) ;
11997: LD_VAR 0 1
12001: PPUSH
12002: LD_INT 4
12004: PPUSH
12005: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12009: LD_VAR 0 1
12013: PPUSH
12014: LD_INT 88
12016: PPUSH
12017: LD_INT 89
12019: PPUSH
12020: CALL_OW 114
// reliefOfCommand := true ;
12024: LD_ADDR_EXP 48
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12032: LD_INT 350
12034: PPUSH
12035: CALL_OW 67
// YouLost ( LostCommand ) ;
12039: LD_STRING LostCommand
12041: PPUSH
12042: CALL_OW 104
// end ;
12046: PPOPN 1
12048: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12049: LD_INT 22
12051: PUSH
12052: LD_INT 6
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PUSH
12059: LD_INT 21
12061: PUSH
12062: LD_INT 1
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 69
12077: PUSH
12078: LD_INT 0
12080: EQUAL
12081: IFFALSE 12093
12083: PUSH
12084: LD_EXP 20
12088: PUSH
12089: LD_INT 0
12091: EQUAL
12092: AND
12093: IFFALSE 12105
12095: PUSH
12096: LD_EXP 44
12100: PUSH
12101: LD_INT 1
12103: EQUAL
12104: AND
12105: IFFALSE 12199
12107: GO 12109
12109: DISABLE
12110: LD_INT 0
12112: PPUSH
12113: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12114: LD_ADDR_VAR 0 2
12118: PUSH
12119: LD_INT 22
12121: PUSH
12122: LD_INT 1
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 21
12131: PUSH
12132: LD_INT 1
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: LD_INT 23
12141: PUSH
12142: LD_INT 1
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 69
12158: ST_TO_ADDR
// for i in tmp do
12159: LD_ADDR_VAR 0 1
12163: PUSH
12164: LD_VAR 0 2
12168: PUSH
12169: FOR_IN
12170: IFFALSE 12197
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12172: LD_VAR 0 1
12176: PPUSH
12177: LD_INT 1
12179: PPUSH
12180: LD_INT 4
12182: PPUSH
12183: CALL_OW 12
12187: PPUSH
12188: LD_INT 500
12190: PPUSH
12191: CALL_OW 492
12195: GO 12169
12197: POP
12198: POP
// end ; end_of_file
12199: PPOPN 2
12201: END
// every 0 0$1 trigger AIEnable do
12202: LD_EXP 37
12206: IFFALSE 12302
12208: GO 12210
12210: DISABLE
// begin enable ;
12211: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12212: LD_INT 3
12214: PPUSH
12215: LD_INT 21
12217: PPUSH
12218: LD_INT 7
12220: PPUSH
12221: CALL 6075 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12225: LD_INT 3
12227: PPUSH
12228: LD_INT 8
12230: PPUSH
12231: LD_INT 7
12233: PPUSH
12234: LD_INT 1
12236: PPUSH
12237: CALL 6387 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12241: LD_EXP 20
12245: PUSH
12246: LD_INT 2
12248: EQUAL
12249: IFFALSE 12267
12251: PUSH
12252: LD_INT 22
12254: PUSH
12255: LD_INT 6
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PPUSH
12262: CALL_OW 69
12266: AND
12267: IFFALSE 12302
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12269: LD_INT 6
12271: PPUSH
12272: LD_EXP 21
12276: PPUSH
12277: LD_INT 6
12279: PPUSH
12280: CALL 6075 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12284: LD_INT 6
12286: PPUSH
12287: LD_INT 9
12289: PPUSH
12290: LD_INT 6
12292: PPUSH
12293: LD_EXP 22
12297: PPUSH
12298: CALL 6387 0 4
// end ; end ;
12302: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12303: LD_EXP 15
12307: PPUSH
12308: CALL_OW 310
12312: NOT
12313: IFFALSE 12324
12315: PUSH
12316: LD_INT 21
12318: PPUSH
12319: CALL_OW 302
12323: AND
12324: IFFALSE 12339
12326: PUSH
12327: LD_INT 21
12329: PPUSH
12330: CALL_OW 255
12334: PUSH
12335: LD_INT 3
12337: EQUAL
12338: AND
12339: IFFALSE 12356
12341: GO 12343
12343: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12344: LD_EXP 15
12348: PPUSH
12349: LD_INT 21
12351: PPUSH
12352: CALL_OW 120
12356: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12357: LD_INT 22
12359: PUSH
12360: LD_INT 3
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 21
12369: PUSH
12370: LD_INT 2
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 55
12379: PUSH
12380: EMPTY
12381: LIST
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: LIST
12387: PPUSH
12388: CALL_OW 69
12392: PUSH
12393: LD_INT 0
12395: EQUAL
12396: IFFALSE 12411
12398: PUSH
12399: LD_INT 1
12401: PPUSH
12402: CALL_OW 255
12406: PUSH
12407: LD_INT 3
12409: EQUAL
12410: AND
12411: IFFALSE 12422
12413: PUSH
12414: LD_INT 21
12416: PPUSH
12417: CALL_OW 302
12421: AND
12422: IFFALSE 12437
12424: PUSH
12425: LD_INT 21
12427: PPUSH
12428: CALL_OW 255
12432: PUSH
12433: LD_INT 3
12435: EQUAL
12436: AND
12437: IFFALSE 12448
12439: PUSH
12440: LD_INT 21
12442: PPUSH
12443: CALL_OW 302
12447: AND
12448: IFFALSE 12660
12450: GO 12452
12452: DISABLE
// begin enable ;
12453: ENABLE
// if Difficulty = 1 then
12454: LD_OWVAR 67
12458: PUSH
12459: LD_INT 1
12461: EQUAL
12462: IFFALSE 12506
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
12464: LD_INT 3
12466: PPUSH
12467: LD_INT 24
12469: PPUSH
12470: LD_OWVAR 67
12474: PUSH
12475: LD_INT 2
12477: PLUS
12478: PPUSH
12479: LD_INT 42
12481: PUSH
12482: LD_INT 44
12484: PUSH
12485: LD_INT 43
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: LIST
12492: PPUSH
12493: LD_INT 1
12495: PPUSH
12496: LD_INT 1
12498: PPUSH
12499: LD_INT 21
12501: PPUSH
12502: CALL 6904 0 7
// if Difficulty = 2 then
12506: LD_OWVAR 67
12510: PUSH
12511: LD_INT 2
12513: EQUAL
12514: IFFALSE 12581
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
12516: LD_INT 3
12518: PPUSH
12519: LD_INT 24
12521: PPUSH
12522: LD_OWVAR 67
12526: PUSH
12527: LD_INT 2
12529: PLUS
12530: PPUSH
12531: LD_INT 44
12533: PUSH
12534: LD_INT 44
12536: PUSH
12537: LD_INT 43
12539: PUSH
12540: LD_INT 43
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: PPUSH
12549: LD_INT 1
12551: PPUSH
12552: LD_INT 1
12554: PPUSH
12555: LD_INT 21
12557: PUSH
12558: LD_INT 22
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: LD_INT 1
12567: PPUSH
12568: LD_INT 2
12570: PPUSH
12571: CALL_OW 12
12575: ARRAY
12576: PPUSH
12577: CALL 6904 0 7
// if Difficulty >= 3 then
12581: LD_OWVAR 67
12585: PUSH
12586: LD_INT 3
12588: GREATEREQUAL
12589: IFFALSE 12660
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
12591: LD_INT 3
12593: PPUSH
12594: LD_INT 24
12596: PPUSH
12597: LD_OWVAR 67
12601: PUSH
12602: LD_INT 2
12604: PPUSH
12605: LD_INT 3
12607: PPUSH
12608: CALL_OW 12
12612: PLUS
12613: PPUSH
12614: LD_INT 44
12616: PUSH
12617: LD_INT 44
12619: PUSH
12620: LD_INT 43
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: LIST
12627: PPUSH
12628: LD_INT 1
12630: PPUSH
12631: LD_INT 1
12633: PPUSH
12634: LD_INT 22
12636: PUSH
12637: LD_INT 23
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: LD_INT 1
12646: PPUSH
12647: LD_INT 2
12649: PPUSH
12650: CALL_OW 12
12654: ARRAY
12655: PPUSH
12656: CALL 6904 0 7
// end ;
12660: END
// every 0 0$1 do
12661: GO 12663
12663: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
12664: LD_INT 3
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: LD_INT 3
12672: PPUSH
12673: CALL 5994 0 3
12677: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
12678: LD_EXP 20
12682: PUSH
12683: LD_INT 1
12685: EQUAL
12686: IFFALSE 12833
12688: GO 12690
12690: DISABLE
12691: LD_INT 0
12693: PPUSH
12694: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
12695: LD_ADDR_VAR 0 2
12699: PUSH
12700: LD_INT 22
12702: PUSH
12703: LD_INT 6
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 21
12712: PUSH
12713: LD_INT 2
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 34
12722: PUSH
12723: LD_INT 51
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: LIST
12734: PPUSH
12735: CALL_OW 69
12739: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
12740: LD_VAR 0 2
12744: PUSH
12745: LD_INT 1
12747: ARRAY
12748: PPUSH
12749: LD_EXP 21
12753: PPUSH
12754: CALL_OW 250
12758: PUSH
12759: LD_INT 5
12761: MINUS
12762: PPUSH
12763: LD_EXP 21
12767: PPUSH
12768: CALL_OW 251
12772: PUSH
12773: LD_INT 5
12775: MINUS
12776: PPUSH
12777: CALL_OW 111
// wait ( 0 0$5 ) ;
12781: LD_INT 175
12783: PPUSH
12784: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
12788: LD_VAR 0 2
12792: PUSH
12793: LD_INT 1
12795: ARRAY
12796: PPUSH
12797: LD_INT 41
12799: PPUSH
12800: LD_INT 52
12802: PPUSH
12803: CALL_OW 177
// wait ( 0 0$40 ) ;
12807: LD_INT 1400
12809: PPUSH
12810: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
12814: LD_VAR 0 2
12818: PUSH
12819: LD_INT 1
12821: ARRAY
12822: PPUSH
12823: LD_INT 41
12825: PPUSH
12826: LD_INT 44
12828: PPUSH
12829: CALL_OW 111
// end ;
12833: PPOPN 2
12835: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
12836: LD_EXP 21
12840: PPUSH
12841: CALL_OW 274
12845: PPUSH
12846: LD_INT 1
12848: PPUSH
12849: CALL_OW 275
12853: PUSH
12854: LD_INT 100
12856: GREATEREQUAL
12857: IFFALSE 13085
12859: GO 12861
12861: DISABLE
12862: LD_INT 0
12864: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
12865: LD_ADDR_VAR 0 1
12869: PUSH
12870: LD_INT 22
12872: PUSH
12873: LD_INT 6
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PUSH
12880: LD_INT 21
12882: PUSH
12883: LD_INT 1
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 25
12892: PUSH
12893: LD_INT 2
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: PPUSH
12905: CALL_OW 69
12909: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
12910: LD_VAR 0 1
12914: PUSH
12915: LD_INT 1
12917: ARRAY
12918: PPUSH
12919: LD_INT 4
12921: PPUSH
12922: LD_INT 39
12924: PPUSH
12925: LD_INT 37
12927: PPUSH
12928: LD_INT 3
12930: PPUSH
12931: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
12935: LD_VAR 0 1
12939: PUSH
12940: LD_INT 1
12942: ARRAY
12943: PPUSH
12944: LD_INT 29
12946: PPUSH
12947: LD_INT 42
12949: PPUSH
12950: LD_INT 54
12952: PPUSH
12953: LD_INT 3
12955: PPUSH
12956: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
12960: LD_VAR 0 1
12964: PUSH
12965: LD_INT 1
12967: ARRAY
12968: PPUSH
12969: LD_INT 6
12971: PPUSH
12972: LD_INT 38
12974: PPUSH
12975: LD_INT 48
12977: PPUSH
12978: LD_INT 0
12980: PPUSH
12981: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
12985: LD_VAR 0 1
12989: PUSH
12990: LD_INT 1
12992: ARRAY
12993: PPUSH
12994: LD_INT 2
12996: PPUSH
12997: LD_INT 32
12999: PPUSH
13000: LD_INT 38
13002: PPUSH
13003: LD_INT 2
13005: PPUSH
13006: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13010: LD_VAR 0 1
13014: PUSH
13015: LD_INT 1
13017: ARRAY
13018: PPUSH
13019: LD_INT 26
13021: PPUSH
13022: LD_INT 39
13024: PPUSH
13025: LD_INT 55
13027: PPUSH
13028: LD_INT 3
13030: PPUSH
13031: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13035: LD_VAR 0 1
13039: PUSH
13040: LD_INT 1
13042: ARRAY
13043: PPUSH
13044: LD_INT 32
13046: PPUSH
13047: LD_INT 31
13049: PPUSH
13050: LD_INT 31
13052: PPUSH
13053: LD_INT 3
13055: PPUSH
13056: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13060: LD_VAR 0 1
13064: PUSH
13065: LD_INT 1
13067: ARRAY
13068: PPUSH
13069: LD_INT 31
13071: PPUSH
13072: LD_INT 50
13074: PPUSH
13075: LD_INT 51
13077: PPUSH
13078: LD_INT 4
13080: PPUSH
13081: CALL_OW 205
// end ;
13085: PPOPN 1
13087: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13088: LD_EXP 46
13092: IFFALSE 13738
13094: GO 13096
13096: DISABLE
13097: LD_INT 0
13099: PPUSH
13100: PPUSH
13101: PPUSH
// begin enable ;
13102: ENABLE
// if not ruMobile then
13103: LD_EXP 46
13107: NOT
13108: IFFALSE 13112
// exit ;
13110: GO 13738
// for i in ruMobile do
13112: LD_ADDR_VAR 0 1
13116: PUSH
13117: LD_EXP 46
13121: PUSH
13122: FOR_IN
13123: IFFALSE 13736
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13125: LD_VAR 0 1
13129: PPUSH
13130: CALL_OW 302
13134: NOT
13135: IFTRUE 13152
13137: PUSH
13138: LD_VAR 0 1
13142: PPUSH
13143: CALL_OW 255
13147: PUSH
13148: LD_INT 3
13150: NONEQUAL
13151: OR
13152: IFFALSE 13172
// begin ruMobile := ruMobile diff i ;
13154: LD_ADDR_EXP 46
13158: PUSH
13159: LD_EXP 46
13163: PUSH
13164: LD_VAR 0 1
13168: DIFF
13169: ST_TO_ADDR
// continue ;
13170: GO 13122
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13172: LD_VAR 0 1
13176: PPUSH
13177: CALL_OW 110
13181: NOT
13182: IFTRUE 13199
13184: PUSH
13185: LD_VAR 0 1
13189: PPUSH
13190: CALL_OW 110
13194: PUSH
13195: LD_INT 0
13197: EQUAL
13198: OR
13199: IFFALSE 13395
// begin if GetFuel ( i ) < 50 then
13201: LD_VAR 0 1
13205: PPUSH
13206: CALL_OW 261
13210: PUSH
13211: LD_INT 50
13213: LESS
13214: IFFALSE 13273
// begin ComMoveXY ( i , 106 , 88 ) ;
13216: LD_VAR 0 1
13220: PPUSH
13221: LD_INT 106
13223: PPUSH
13224: LD_INT 88
13226: PPUSH
13227: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13231: LD_INT 35
13233: PPUSH
13234: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13238: LD_VAR 0 1
13242: PPUSH
13243: LD_INT 106
13245: PPUSH
13246: LD_INT 88
13248: PPUSH
13249: CALL_OW 297
13253: PUSH
13254: LD_INT 4
13256: LESS
13257: IFFALSE 13231
// SetFuel ( i , 100 ) ;
13259: LD_VAR 0 1
13263: PPUSH
13264: LD_INT 100
13266: PPUSH
13267: CALL_OW 240
// end else
13271: GO 13395
// if not IsInArea ( i , ruParking ) and not IsInArea ( i , ruParking2 ) then
13273: LD_VAR 0 1
13277: PPUSH
13278: LD_INT 25
13280: PPUSH
13281: CALL_OW 308
13285: NOT
13286: IFFALSE 13303
13288: PUSH
13289: LD_VAR 0 1
13293: PPUSH
13294: LD_INT 27
13296: PPUSH
13297: CALL_OW 308
13301: NOT
13302: AND
13303: IFFALSE 13383
// begin if not FilterUnitsInArea ( ruHillArea , [ f_side , 1 ] ) then
13305: LD_INT 28
13307: PPUSH
13308: LD_INT 22
13310: PUSH
13311: LD_INT 1
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PPUSH
13318: CALL_OW 70
13322: NOT
13323: IFFALSE 13354
// begin if not IsInArea ( i , ruParking ) then
13325: LD_VAR 0 1
13329: PPUSH
13330: LD_INT 25
13332: PPUSH
13333: CALL_OW 308
13337: NOT
13338: IFFALSE 13352
// ComMoveToArea ( i , ruParking ) ;
13340: LD_VAR 0 1
13344: PPUSH
13345: LD_INT 25
13347: PPUSH
13348: CALL_OW 113
// end else
13352: GO 13381
// if not IsInArea ( i , ruParking2 ) then
13354: LD_VAR 0 1
13358: PPUSH
13359: LD_INT 27
13361: PPUSH
13362: CALL_OW 308
13366: NOT
13367: IFFALSE 13381
// ComMoveToArea ( i , ruParking2 ) ;
13369: LD_VAR 0 1
13373: PPUSH
13374: LD_INT 27
13376: PPUSH
13377: CALL_OW 113
// end else
13381: GO 13395
// SetTag ( i , 101 ) ;
13383: LD_VAR 0 1
13387: PPUSH
13388: LD_INT 101
13390: PPUSH
13391: CALL_OW 109
// end ; if GetTag ( i ) = 101 then
13395: LD_VAR 0 1
13399: PPUSH
13400: CALL_OW 110
13404: PUSH
13405: LD_INT 101
13407: EQUAL
13408: IFFALSE 13538
// begin if GetLives ( i ) < 650 then
13410: LD_VAR 0 1
13414: PPUSH
13415: CALL_OW 256
13419: PUSH
13420: LD_INT 650
13422: LESS
13423: IFFALSE 13515
// begin if not IsDrivenBy ( i ) then
13425: LD_VAR 0 1
13429: PPUSH
13430: CALL_OW 311
13434: NOT
13435: IFFALSE 13439
// continue ;
13437: GO 13122
// mech := IsDrivenBy ( i ) ;
13439: LD_ADDR_VAR 0 2
13443: PUSH
13444: LD_VAR 0 1
13448: PPUSH
13449: CALL_OW 311
13453: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13454: LD_VAR 0 2
13458: PPUSH
13459: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13463: LD_VAR 0 2
13467: PPUSH
13468: LD_VAR 0 1
13472: PPUSH
13473: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13477: LD_INT 35
13479: PPUSH
13480: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13484: LD_VAR 0 1
13488: PPUSH
13489: CALL_OW 256
13493: PUSH
13494: LD_INT 1000
13496: EQUAL
13497: IFFALSE 13477
// ComEnterUnit ( mech , i ) ;
13499: LD_VAR 0 2
13503: PPUSH
13504: LD_VAR 0 1
13508: PPUSH
13509: CALL_OW 120
// end else
13513: GO 13538
// if IsDrivenBy ( i ) then
13515: LD_VAR 0 1
13519: PPUSH
13520: CALL_OW 311
13524: IFFALSE 13538
// SetTag ( i , 102 ) ;
13526: LD_VAR 0 1
13530: PPUSH
13531: LD_INT 102
13533: PPUSH
13534: CALL_OW 109
// end ; if GetTag ( i ) = 102 then
13538: LD_VAR 0 1
13542: PPUSH
13543: CALL_OW 110
13547: PUSH
13548: LD_INT 102
13550: EQUAL
13551: IFFALSE 13734
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
13553: LD_ADDR_VAR 0 3
13557: PUSH
13558: LD_INT 24
13560: PPUSH
13561: LD_INT 81
13563: PUSH
13564: LD_INT 3
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PPUSH
13571: CALL_OW 70
13575: ST_TO_ADDR
// if GetLives ( i ) < 650 then
13576: LD_VAR 0 1
13580: PPUSH
13581: CALL_OW 256
13585: PUSH
13586: LD_INT 650
13588: LESS
13589: IFFALSE 13614
// begin ComStop ( i ) ;
13591: LD_VAR 0 1
13595: PPUSH
13596: CALL_OW 141
// SetTag ( i , 0 ) ;
13600: LD_VAR 0 1
13604: PPUSH
13605: LD_INT 0
13607: PPUSH
13608: CALL_OW 109
// continue ;
13612: GO 13122
// end ; if enemy then
13614: LD_VAR 0 3
13618: IFFALSE 13658
// begin if not HasTask ( i ) then
13620: LD_VAR 0 1
13624: PPUSH
13625: CALL_OW 314
13629: NOT
13630: IFFALSE 13656
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13632: LD_VAR 0 1
13636: PPUSH
13637: LD_VAR 0 3
13641: PPUSH
13642: LD_VAR 0 1
13646: PPUSH
13647: CALL_OW 74
13651: PPUSH
13652: CALL_OW 115
// end else
13656: GO 13734
// if ruMobile then
13658: LD_EXP 46
13662: IFFALSE 13734
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
13664: LD_ADDR_VAR 0 3
13668: PUSH
13669: LD_INT 81
13671: PUSH
13672: LD_INT 3
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: PPUSH
13679: CALL_OW 69
13683: ST_TO_ADDR
// if enemy then
13684: LD_VAR 0 3
13688: IFFALSE 13734
// AgressiveMove ( i , [ [ 95 , 74 ] , [ 67 , 59 ] , [ 55 , 41 ] ] ) ;
13690: LD_VAR 0 1
13694: PPUSH
13695: LD_INT 95
13697: PUSH
13698: LD_INT 74
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PUSH
13705: LD_INT 67
13707: PUSH
13708: LD_INT 59
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PUSH
13715: LD_INT 55
13717: PUSH
13718: LD_INT 41
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: PPUSH
13730: CALL 82880 0 2
// end ; end ; end ;
13734: GO 13122
13736: POP
13737: POP
// end ; end_of_file
13738: PPOPN 3
13740: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
13741: LD_INT 0
13743: PPUSH
13744: PPUSH
13745: PPUSH
13746: PPUSH
13747: PPUSH
13748: PPUSH
13749: PPUSH
// begin tmpSold := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
13750: LD_ADDR_VAR 0 3
13754: PUSH
13755: LD_INT 22
13757: PUSH
13758: LD_INT 6
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 21
13767: PUSH
13768: LD_INT 1
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: LD_INT 25
13777: PUSH
13778: LD_INT 1
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 3
13787: PUSH
13788: LD_INT 54
13790: PUSH
13791: EMPTY
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: PPUSH
13804: CALL_OW 69
13808: ST_TO_ADDR
// tmpSoldInside := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
13809: LD_ADDR_VAR 0 7
13813: PUSH
13814: LD_INT 22
13816: PUSH
13817: LD_INT 6
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 21
13826: PUSH
13827: LD_INT 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 25
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 54
13846: PUSH
13847: EMPTY
13848: LIST
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: PPUSH
13856: CALL_OW 69
13860: ST_TO_ADDR
// tmpEng := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13861: LD_ADDR_VAR 0 4
13865: PUSH
13866: LD_INT 22
13868: PUSH
13869: LD_INT 6
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: LD_INT 21
13878: PUSH
13879: LD_INT 1
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 25
13888: PUSH
13889: LD_INT 2
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: LIST
13900: PPUSH
13901: CALL_OW 69
13905: ST_TO_ADDR
// tmpSci := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
13906: LD_ADDR_VAR 0 6
13910: PUSH
13911: LD_INT 22
13913: PUSH
13914: LD_INT 6
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 21
13923: PUSH
13924: LD_INT 1
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PUSH
13931: LD_INT 25
13933: PUSH
13934: LD_INT 4
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: LIST
13945: PPUSH
13946: CALL_OW 69
13950: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13951: LD_ADDR_VAR 0 8
13955: PUSH
13956: LD_INT 22
13958: PUSH
13959: LD_INT 6
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: PUSH
13966: LD_INT 21
13968: PUSH
13969: LD_INT 2
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PUSH
13976: LD_INT 34
13978: PUSH
13979: LD_INT 51
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: PPUSH
13991: CALL_OW 69
13995: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
13996: LD_VAR 0 1
14000: PPUSH
14001: CALL_OW 255
14005: PUSH
14006: LD_INT 6
14008: EQUAL
14009: IFFALSE 14026
14011: PUSH
14012: LD_VAR 0 1
14016: PPUSH
14017: CALL_OW 266
14021: PUSH
14022: LD_INT 0
14024: EQUAL
14025: AND
14026: IFFALSE 14046
// begin ruPDepot := building ;
14028: LD_ADDR_EXP 21
14032: PUSH
14033: LD_VAR 0 1
14037: ST_TO_ADDR
// baseReadyToBuild := 1 ;
14038: LD_ADDR_EXP 20
14042: PUSH
14043: LD_INT 1
14045: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14046: LD_VAR 0 1
14050: PPUSH
14051: CALL_OW 266
14055: PUSH
14056: LD_INT 4
14058: EQUAL
14059: IFFALSE 14076
14061: PUSH
14062: LD_VAR 0 1
14066: PPUSH
14067: CALL_OW 255
14071: PUSH
14072: LD_INT 6
14074: EQUAL
14075: AND
14076: IFFALSE 14109
// for i in tmpSold do
14078: LD_ADDR_VAR 0 2
14082: PUSH
14083: LD_VAR 0 3
14087: PUSH
14088: FOR_IN
14089: IFFALSE 14107
// ComEnterUnit ( i , building ) ;
14091: LD_VAR 0 2
14095: PPUSH
14096: LD_VAR 0 1
14100: PPUSH
14101: CALL_OW 120
14105: GO 14088
14107: POP
14108: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14109: LD_VAR 0 1
14113: PPUSH
14114: CALL_OW 266
14118: PUSH
14119: LD_INT 6
14121: EQUAL
14122: IFFALSE 14139
14124: PUSH
14125: LD_VAR 0 1
14129: PPUSH
14130: CALL_OW 255
14134: PUSH
14135: LD_INT 6
14137: EQUAL
14138: AND
14139: IFFALSE 14197
// begin for i in tmpSci do
14141: LD_ADDR_VAR 0 2
14145: PUSH
14146: LD_VAR 0 6
14150: PUSH
14151: FOR_IN
14152: IFFALSE 14170
// ComEnterUnit ( i , building ) ;
14154: LD_VAR 0 2
14158: PPUSH
14159: LD_VAR 0 1
14163: PPUSH
14164: CALL_OW 120
14168: GO 14151
14170: POP
14171: POP
// ResAllTechs ( 6 , building , 3 ) ;
14172: LD_INT 6
14174: PPUSH
14175: LD_VAR 0 1
14179: PPUSH
14180: LD_INT 3
14182: PPUSH
14183: CALL 5994 0 3
// ruPLab := building ;
14187: LD_ADDR_EXP 22
14191: PUSH
14192: LD_VAR 0 1
14196: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14197: LD_VAR 0 1
14201: PPUSH
14202: CALL_OW 266
14206: PUSH
14207: LD_INT 2
14209: EQUAL
14210: IFFALSE 14227
14212: PUSH
14213: LD_VAR 0 1
14217: PPUSH
14218: CALL_OW 255
14222: PUSH
14223: LD_INT 6
14225: EQUAL
14226: AND
14227: IFFALSE 14278
// begin tmpMeh := UnitsInside ( cargo [ 1 ] ) ;
14229: LD_ADDR_VAR 0 5
14233: PUSH
14234: LD_VAR 0 8
14238: PUSH
14239: LD_INT 1
14241: ARRAY
14242: PPUSH
14243: CALL_OW 313
14247: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14248: LD_VAR 0 5
14252: PPUSH
14253: CALL_OW 121
// wait ( 0 0$1 ) ;
14257: LD_INT 35
14259: PPUSH
14260: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14264: LD_VAR 0 5
14268: PPUSH
14269: LD_VAR 0 1
14273: PPUSH
14274: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14278: LD_VAR 0 1
14282: PPUSH
14283: CALL_OW 266
14287: PUSH
14288: LD_INT 32
14290: EQUAL
14291: IFFALSE 14308
14293: PUSH
14294: LD_VAR 0 1
14298: PPUSH
14299: CALL_OW 255
14303: PUSH
14304: LD_INT 6
14306: EQUAL
14307: AND
14308: IFFALSE 14360
// begin ComPlaceWeapon ( building , 42 ) ;
14310: LD_VAR 0 1
14314: PPUSH
14315: LD_INT 42
14317: PPUSH
14318: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14322: LD_VAR 0 7
14326: PUSH
14327: LD_INT 1
14329: ARRAY
14330: PPUSH
14331: CALL_OW 122
// wait ( 0 0$1 ) ;
14335: LD_INT 35
14337: PPUSH
14338: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14342: LD_VAR 0 7
14346: PUSH
14347: LD_INT 1
14349: ARRAY
14350: PPUSH
14351: LD_VAR 0 1
14355: PPUSH
14356: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14360: LD_VAR 0 1
14364: PPUSH
14365: CALL_OW 266
14369: PUSH
14370: LD_INT 31
14372: EQUAL
14373: IFFALSE 14390
14375: PUSH
14376: LD_VAR 0 1
14380: PPUSH
14381: CALL_OW 255
14385: PUSH
14386: LD_INT 6
14388: EQUAL
14389: AND
14390: IFFALSE 14456
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14392: LD_VAR 0 7
14396: PUSH
14397: LD_INT 2
14399: ARRAY
14400: PPUSH
14401: CALL_OW 122
// wait ( 0 0$1 ) ;
14405: LD_INT 35
14407: PPUSH
14408: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14412: LD_VAR 0 7
14416: PUSH
14417: LD_INT 2
14419: ARRAY
14420: PPUSH
14421: LD_VAR 0 1
14425: PPUSH
14426: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14430: LD_VAR 0 4
14434: PUSH
14435: LD_INT 1
14437: ARRAY
14438: PPUSH
14439: LD_EXP 21
14443: PPUSH
14444: CALL_OW 120
// baseReadyToBuild := 2 ;
14448: LD_ADDR_EXP 20
14452: PUSH
14453: LD_INT 2
14455: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14456: LD_VAR 0 1
14460: PPUSH
14461: CALL_OW 266
14465: PUSH
14466: LD_INT 32
14468: EQUAL
14469: IFFALSE 14486
14471: PUSH
14472: LD_VAR 0 1
14476: PPUSH
14477: CALL_OW 255
14481: PUSH
14482: LD_INT 1
14484: EQUAL
14485: AND
14486: IFFALSE 14498
14488: PUSH
14489: LD_EXP 32
14493: PUSH
14494: LD_INT 0
14496: EQUAL
14497: AND
14498: IFFALSE 14743
// begin bunkerDialog := 1 ;
14500: LD_ADDR_EXP 32
14504: PUSH
14505: LD_INT 1
14507: ST_TO_ADDR
// if IsOK ( Claptopn ) then
14508: LD_EXP 11
14512: PPUSH
14513: CALL_OW 302
14517: IFFALSE 14533
// Say ( Claptopn , D11-Eng1-1 ) else
14519: LD_EXP 11
14523: PPUSH
14524: LD_STRING D11-Eng1-1
14526: PPUSH
14527: CALL_OW 88
14531: GO 14729
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
14533: LD_INT 22
14535: PUSH
14536: LD_INT 1
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: PUSH
14543: LD_INT 21
14545: PUSH
14546: LD_INT 1
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PUSH
14553: LD_INT 25
14555: PUSH
14556: LD_INT 3
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PUSH
14563: LD_INT 26
14565: PUSH
14566: LD_INT 1
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: PPUSH
14579: CALL_OW 69
14583: PUSH
14584: LD_EXP 1
14588: PUSH
14589: EMPTY
14590: LIST
14591: PUSH
14592: LD_INT 0
14594: GREATER
14595: DIFF
14596: IFFALSE 14670
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
14598: LD_INT 22
14600: PUSH
14601: LD_INT 1
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 21
14610: PUSH
14611: LD_INT 1
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: LD_INT 25
14620: PUSH
14621: LD_INT 2
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: LD_INT 26
14630: PUSH
14631: LD_INT 1
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: PPUSH
14644: CALL_OW 69
14648: PUSH
14649: LD_EXP 1
14653: PUSH
14654: EMPTY
14655: LIST
14656: DIFF
14657: PPUSH
14658: LD_STRING D11-Eng1-1
14660: PPUSH
14661: LD_STRING D11-Eng1-1
14663: PPUSH
14664: CALL 4617 0 3
14668: GO 14729
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
14670: LD_INT 22
14672: PUSH
14673: LD_INT 1
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 1
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 26
14692: PUSH
14693: LD_INT 1
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 69
14709: PUSH
14710: LD_EXP 1
14714: PUSH
14715: EMPTY
14716: LIST
14717: DIFF
14718: PPUSH
14719: LD_STRING D11-Eng1-1
14721: PPUSH
14722: LD_STRING D11-Eng1-1
14724: PPUSH
14725: CALL 4617 0 3
// end ; if energyVDialog = 0 then
14729: LD_EXP 33
14733: PUSH
14734: LD_INT 0
14736: EQUAL
14737: IFFALSE 14743
// EnergyDialog ;
14739: CALL 5022 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
14743: LD_VAR 0 1
14747: PPUSH
14748: CALL_OW 266
14752: PUSH
14753: LD_INT 29
14755: EQUAL
14756: IFFALSE 14773
14758: PUSH
14759: LD_VAR 0 1
14763: PPUSH
14764: CALL_OW 255
14768: PUSH
14769: LD_INT 1
14771: EQUAL
14772: AND
14773: IFFALSE 14783
// buildOil := 1 ;
14775: LD_ADDR_EXP 34
14779: PUSH
14780: LD_INT 1
14782: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
14783: LD_VAR 0 1
14787: PPUSH
14788: CALL_OW 266
14792: PUSH
14793: LD_INT 26
14795: EQUAL
14796: IFFALSE 14813
14798: PUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 255
14808: PUSH
14809: LD_INT 1
14811: EQUAL
14812: AND
14813: IFFALSE 14823
// buildPower := 1 ;
14815: LD_ADDR_EXP 35
14819: PUSH
14820: LD_INT 1
14822: ST_TO_ADDR
// end ;
14823: PPOPN 8
14825: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
14826: LD_VAR 0 1
14830: PPUSH
14831: CALL_OW 266
14835: PUSH
14836: LD_INT 3
14838: EQUAL
14839: IFFALSE 14856
14841: PUSH
14842: LD_VAR 0 1
14846: PPUSH
14847: CALL_OW 255
14851: PUSH
14852: LD_INT 1
14854: EQUAL
14855: AND
14856: IFFALSE 14868
14858: PUSH
14859: LD_EXP 31
14863: PUSH
14864: LD_INT 0
14866: EQUAL
14867: AND
14868: IFFALSE 15218
// begin factoryDialog = 1 ;
14870: LD_ADDR_EXP 31
14874: PUSH
14875: LD_INT 1
14877: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
14878: LD_INT 47
14880: PPUSH
14881: LD_INT 1
14883: PPUSH
14884: CALL_OW 321
14888: PUSH
14889: LD_INT 1
14891: EQUAL
14892: IFFALSE 14910
14894: PUSH
14895: LD_INT 45
14897: PPUSH
14898: LD_INT 1
14900: PPUSH
14901: CALL_OW 321
14905: PUSH
14906: LD_INT 1
14908: EQUAL
14909: AND
14910: IFFALSE 15218
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
14912: LD_INT 22
14914: PUSH
14915: LD_INT 1
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PUSH
14922: LD_INT 21
14924: PUSH
14925: LD_INT 3
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 30
14934: PUSH
14935: LD_INT 3
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: LD_INT 24
14944: PUSH
14945: LD_INT 1000
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: PPUSH
14958: CALL_OW 69
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PPUSH
14967: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
14971: LD_EXP 1
14975: PPUSH
14976: LD_STRING D9a-JMM-1
14978: PPUSH
14979: CALL_OW 88
// if IsOK ( Campell ) then
14983: LD_EXP 12
14987: PPUSH
14988: CALL_OW 302
14992: IFFALSE 15008
// Say ( Campell , D9a-Mech1-1 ) else
14994: LD_EXP 12
14998: PPUSH
14999: LD_STRING D9a-Mech1-1
15001: PPUSH
15002: CALL_OW 88
15006: GO 15204
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15008: LD_INT 22
15010: PUSH
15011: LD_INT 1
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PUSH
15018: LD_INT 21
15020: PUSH
15021: LD_INT 1
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: LD_INT 25
15030: PUSH
15031: LD_INT 3
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 26
15040: PUSH
15041: LD_INT 1
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: PPUSH
15054: CALL_OW 69
15058: PUSH
15059: LD_EXP 1
15063: PUSH
15064: EMPTY
15065: LIST
15066: PUSH
15067: LD_INT 0
15069: GREATER
15070: DIFF
15071: IFFALSE 15145
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15073: LD_INT 22
15075: PUSH
15076: LD_INT 1
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 21
15085: PUSH
15086: LD_INT 1
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 25
15095: PUSH
15096: LD_INT 3
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: LD_INT 26
15105: PUSH
15106: LD_INT 1
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: PPUSH
15119: CALL_OW 69
15123: PUSH
15124: LD_EXP 1
15128: PUSH
15129: EMPTY
15130: LIST
15131: DIFF
15132: PPUSH
15133: LD_STRING D9a-Mech1-1
15135: PPUSH
15136: LD_STRING D9a-Mech1-1
15138: PPUSH
15139: CALL 4617 0 3
15143: GO 15204
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15145: LD_INT 22
15147: PUSH
15148: LD_INT 1
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: LD_INT 21
15157: PUSH
15158: LD_INT 1
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 26
15167: PUSH
15168: LD_INT 1
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: LIST
15179: PPUSH
15180: CALL_OW 69
15184: PUSH
15185: LD_EXP 1
15189: PUSH
15190: EMPTY
15191: LIST
15192: DIFF
15193: PPUSH
15194: LD_STRING D9a-Mech1-1
15196: PPUSH
15197: LD_STRING D9a-Mech1-1
15199: PPUSH
15200: CALL 4617 0 3
// end ; if energyVDialog = 0 then
15204: LD_EXP 33
15208: PUSH
15209: LD_INT 0
15211: EQUAL
15212: IFFALSE 15218
// EnergyDialog ;
15214: CALL 5022 0 0
// end ; end ; end ;
15218: PPOPN 1
15220: END
// on UnitDestroyed ( unit ) do var mech ;
15221: LD_INT 0
15223: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15224: LD_VAR 0 1
15228: PPUSH
15229: CALL 35755 0 1
// if unit = JMM then
15233: LD_VAR 0 1
15237: PUSH
15238: LD_EXP 1
15242: EQUAL
15243: IFFALSE 15252
// YouLost ( JMM ) ;
15245: LD_STRING JMM
15247: PPUSH
15248: CALL_OW 104
// if unit = ambdept0 then
15252: LD_VAR 0 1
15256: PUSH
15257: LD_INT 4
15259: EQUAL
15260: IFFALSE 15269
// YouLost ( Base ) ;
15262: LD_STRING Base
15264: PPUSH
15265: CALL_OW 104
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and IsInArea ( unit , ruDefArea ) then
15269: LD_VAR 0 1
15273: PPUSH
15274: CALL_OW 255
15278: PUSH
15279: LD_INT 1
15281: EQUAL
15282: IFFALSE 15299
15284: PUSH
15285: LD_VAR 0 1
15289: PPUSH
15290: CALL_OW 247
15294: PUSH
15295: LD_INT 1
15297: EQUAL
15298: AND
15299: IFFALSE 15315
15301: PUSH
15302: LD_VAR 0 1
15306: PPUSH
15307: LD_INT 24
15309: PPUSH
15310: CALL_OW 308
15314: AND
15315: IFFALSE 15325
// honor := false ;
15317: LD_ADDR_EXP 39
15321: PUSH
15322: LD_INT 0
15324: ST_TO_ADDR
// if unit in ruMobile then
15325: LD_VAR 0 1
15329: PUSH
15330: LD_EXP 46
15334: IN
15335: IFFALSE 15353
// ruMobile = ruMobile diff ruMobile ;
15337: LD_ADDR_EXP 46
15341: PUSH
15342: LD_EXP 46
15346: PUSH
15347: LD_EXP 46
15351: DIFF
15352: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15353: LD_VAR 0 1
15357: PPUSH
15358: CALL_OW 247
15362: PUSH
15363: LD_INT 1
15365: EQUAL
15366: IFFALSE 15383
15368: PUSH
15369: LD_VAR 0 1
15373: PPUSH
15374: CALL_OW 255
15378: PUSH
15379: LD_INT 1
15381: EQUAL
15382: AND
15383: IFFALSE 15399
// lostCounter = lostCounter + 1 ;
15385: LD_ADDR_EXP 38
15389: PUSH
15390: LD_EXP 38
15394: PUSH
15395: LD_INT 1
15397: PLUS
15398: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15399: LD_EXP 43
15403: IFFALSE 15418
15405: PUSH
15406: LD_INT 24
15408: PPUSH
15409: CALL_OW 313
15413: PUSH
15414: LD_INT 6
15416: LESS
15417: AND
15418: IFFALSE 15435
15420: PUSH
15421: LD_VAR 0 1
15425: PPUSH
15426: CALL_OW 257
15430: PUSH
15431: LD_INT 3
15433: EQUAL
15434: AND
15435: IFFALSE 15452
15437: PUSH
15438: LD_VAR 0 1
15442: PPUSH
15443: CALL_OW 255
15447: PUSH
15448: LD_INT 3
15450: EQUAL
15451: AND
15452: IFFALSE 15463
15454: PUSH
15455: LD_INT 24
15457: PPUSH
15458: CALL_OW 302
15462: AND
15463: IFFALSE 15478
15465: PUSH
15466: LD_INT 24
15468: PPUSH
15469: CALL_OW 255
15473: PUSH
15474: LD_INT 3
15476: EQUAL
15477: AND
15478: IFFALSE 15607
// begin ruMech := ruMech - 1 ;
15480: LD_ADDR_EXP 43
15484: PUSH
15485: LD_EXP 43
15489: PUSH
15490: LD_INT 1
15492: MINUS
15493: ST_TO_ADDR
// if ruMech = 0 then
15494: LD_EXP 43
15498: PUSH
15499: LD_INT 0
15501: EQUAL
15502: IFFALSE 15506
// exit ;
15504: GO 15607
// wait ( 0 0$40 ) ;
15506: LD_INT 1400
15508: PPUSH
15509: CALL_OW 67
// uc_side = 3 ;
15513: LD_ADDR_OWVAR 20
15517: PUSH
15518: LD_INT 3
15520: ST_TO_ADDR
// uc_nation = 3 ;
15521: LD_ADDR_OWVAR 21
15525: PUSH
15526: LD_INT 3
15528: ST_TO_ADDR
// hc_gallery :=  ;
15529: LD_ADDR_OWVAR 33
15533: PUSH
15534: LD_STRING 
15536: ST_TO_ADDR
// hc_name :=  ;
15537: LD_ADDR_OWVAR 26
15541: PUSH
15542: LD_STRING 
15544: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15545: LD_INT 0
15547: PPUSH
15548: LD_EXP 16
15552: PPUSH
15553: LD_EXP 17
15557: PPUSH
15558: CALL_OW 12
15562: PPUSH
15563: CALL_OW 383
// mech := CreateHuman ;
15567: LD_ADDR_VAR 0 2
15571: PUSH
15572: CALL_OW 44
15576: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15577: LD_VAR 0 2
15581: PPUSH
15582: LD_INT 124
15584: PPUSH
15585: LD_INT 97
15587: PPUSH
15588: LD_INT 0
15590: PPUSH
15591: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
15595: LD_VAR 0 2
15599: PPUSH
15600: LD_INT 24
15602: PPUSH
15603: CALL_OW 120
// end ; end ;
15607: PPOPN 2
15609: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
15610: LD_INT 0
15612: PPUSH
// begin SOS_VehicleConstructed ( vehicle , building ) ;
15613: LD_VAR 0 1
15617: PPUSH
15618: LD_VAR 0 2
15622: PPUSH
15623: CALL 35813 0 2
// if GetSide ( vehicle ) = 1 then
15627: LD_VAR 0 1
15631: PPUSH
15632: CALL_OW 255
15636: PUSH
15637: LD_INT 1
15639: EQUAL
15640: IFFALSE 15656
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
15642: LD_ADDR_EXP 42
15646: PUSH
15647: LD_EXP 42
15651: PUSH
15652: LD_INT 1
15654: PLUS
15655: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
15656: LD_VAR 0 1
15660: PPUSH
15661: CALL_OW 255
15665: PUSH
15666: LD_INT 3
15668: EQUAL
15669: IFFALSE 15697
15671: PUSH
15672: LD_VAR 0 1
15676: PPUSH
15677: CALL_OW 264
15681: PUSH
15682: LD_INT 42
15684: PUSH
15685: LD_INT 43
15687: PUSH
15688: LD_INT 44
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: LIST
15695: IN
15696: AND
15697: IFFALSE 15715
// ruMobile := ruMobile union vehicle ;
15699: LD_ADDR_EXP 46
15703: PUSH
15704: LD_EXP 46
15708: PUSH
15709: LD_VAR 0 1
15713: UNION
15714: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
15715: LD_VAR 0 1
15719: PPUSH
15720: CALL_OW 264
15724: PUSH
15725: LD_INT 53
15727: EQUAL
15728: IFFALSE 15864
// begin uc_side = 3 ;
15730: LD_ADDR_OWVAR 20
15734: PUSH
15735: LD_INT 3
15737: ST_TO_ADDR
// uc_nation = 3 ;
15738: LD_ADDR_OWVAR 21
15742: PUSH
15743: LD_INT 3
15745: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
15746: LD_INT 0
15748: PPUSH
15749: LD_EXP 17
15753: PPUSH
15754: CALL_OW 383
// driver := CreateHuman ;
15758: LD_ADDR_VAR 0 3
15762: PUSH
15763: CALL_OW 44
15767: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
15768: LD_VAR 0 3
15772: PPUSH
15773: LD_VAR 0 2
15777: PPUSH
15778: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
15782: LD_VAR 0 1
15786: PPUSH
15787: LD_INT 21
15789: PPUSH
15790: CALL 5248 0 2
// repeat wait ( 0 0$1 ) ;
15794: LD_INT 35
15796: PPUSH
15797: CALL_OW 67
// until not HasTask ( vehicle ) ;
15801: LD_VAR 0 1
15805: PPUSH
15806: CALL_OW 314
15810: NOT
15811: IFFALSE 15794
// driver := IsDrivenBy ( vehicle ) ;
15813: LD_ADDR_VAR 0 3
15817: PUSH
15818: LD_VAR 0 1
15822: PPUSH
15823: CALL_OW 311
15827: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
15828: LD_VAR 0 3
15832: PPUSH
15833: LD_INT 104
15835: PPUSH
15836: LD_INT 73
15838: PPUSH
15839: CALL_OW 171
// AddComExitVehicle ( driver ) ;
15843: LD_VAR 0 3
15847: PPUSH
15848: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
15852: LD_VAR 0 3
15856: PPUSH
15857: LD_INT 24
15859: PPUSH
15860: CALL_OW 180
// end ; end ;
15864: PPOPN 3
15866: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
15867: LD_VAR 0 1
15871: PPUSH
15872: CALL_OW 255
15876: PUSH
15877: LD_INT 3
15879: EQUAL
15880: IFFALSE 15897
15882: PUSH
15883: LD_VAR 0 1
15887: PPUSH
15888: CALL_OW 247
15892: PUSH
15893: LD_INT 2
15895: EQUAL
15896: AND
15897: IFFALSE 15925
15899: PUSH
15900: LD_VAR 0 1
15904: PPUSH
15905: CALL_OW 264
15909: PUSH
15910: LD_INT 42
15912: PUSH
15913: LD_INT 43
15915: PUSH
15916: LD_INT 44
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: LIST
15923: IN
15924: AND
15925: IFFALSE 15974
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
15927: LD_INT 24
15929: PPUSH
15930: LD_VAR 0 1
15934: PPUSH
15935: CALL_OW 265
15939: PPUSH
15940: LD_VAR 0 1
15944: PPUSH
15945: CALL_OW 262
15949: PPUSH
15950: LD_VAR 0 1
15954: PPUSH
15955: CALL_OW 263
15959: PPUSH
15960: LD_VAR 0 1
15964: PPUSH
15965: CALL_OW 264
15969: PPUSH
15970: CALL_OW 185
// end ;
15974: PPOPN 1
15976: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
15977: LD_VAR 0 1
15981: PPUSH
15982: CALL_OW 255
15986: PUSH
15987: LD_INT 3
15989: EQUAL
15990: IFFALSE 16007
15992: PUSH
15993: LD_VAR 0 2
15997: PPUSH
15998: CALL_OW 255
16002: PUSH
16003: LD_INT 3
16005: EQUAL
16006: AND
16007: IFFALSE 16018
16009: PUSH
16010: LD_INT 24
16012: PPUSH
16013: CALL_OW 302
16017: AND
16018: IFFALSE 16032
16020: PUSH
16021: LD_VAR 0 1
16025: PPUSH
16026: CALL_OW 302
16030: NOT
16031: AND
16032: IFFALSE 16046
// ComEnterUnit ( human , rubfact0 ) ;
16034: LD_VAR 0 2
16038: PPUSH
16039: LD_INT 24
16041: PPUSH
16042: CALL_OW 120
// end ;
16046: PPOPN 2
16048: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) = 3 and driver in ruSpecialAttackGroup then
16049: LD_VAR 0 1
16053: PPUSH
16054: CALL_OW 255
16058: PUSH
16059: LD_INT 3
16061: EQUAL
16062: IFFALSE 16076
16064: PUSH
16065: LD_VAR 0 1
16069: PUSH
16070: LD_EXP 52
16074: IN
16075: AND
16076: IFFALSE 16152
// begin repeat ComMoveXY ( driver , 125 , 97 ) ;
16078: LD_VAR 0 1
16082: PPUSH
16083: LD_INT 125
16085: PPUSH
16086: LD_INT 97
16088: PPUSH
16089: CALL_OW 111
// wait ( 0 0$1 ) ;
16093: LD_INT 35
16095: PPUSH
16096: CALL_OW 67
// until IsDead ( driver ) or IsAt ( driver , 125 , 97 ) ;
16100: LD_VAR 0 1
16104: PPUSH
16105: CALL_OW 301
16109: IFTRUE 16128
16111: PUSH
16112: LD_VAR 0 1
16116: PPUSH
16117: LD_INT 125
16119: PPUSH
16120: LD_INT 97
16122: PPUSH
16123: CALL_OW 307
16127: OR
16128: IFFALSE 16078
// if IsDead ( driver ) then
16130: LD_VAR 0 1
16134: PPUSH
16135: CALL_OW 301
16139: IFFALSE 16143
// exit ;
16141: GO 16152
// RemoveUnit ( driver ) ;
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 64
// end ; end ;
16152: PPOPN 4
16154: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16155: LD_VAR 0 1
16159: PUSH
16160: LD_INT 24
16162: EQUAL
16163: IFFALSE 16180
16165: PUSH
16166: LD_VAR 0 2
16170: PPUSH
16171: CALL_OW 256
16175: PUSH
16176: LD_INT 1000
16178: LESS
16179: AND
16180: IFFALSE 16194
// SetLives ( un , 1000 ) ;
16182: LD_VAR 0 2
16186: PPUSH
16187: LD_INT 1000
16189: PPUSH
16190: CALL_OW 234
// end ;
16194: PPOPN 2
16196: END
// on Command ( comandid ) do var i , j , tmp ;
16197: LD_INT 0
16199: PPUSH
16200: PPUSH
16201: PPUSH
// begin SOS_Command ( comandid ) ;
16202: LD_VAR 0 1
16206: PPUSH
16207: CALL 35797 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16211: LD_INT 22
16213: PUSH
16214: LD_INT 4
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PPUSH
16221: CALL_OW 69
16225: NOT
16226: IFFALSE 16230
// exit ;
16228: GO 16397
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16230: LD_ADDR_VAR 0 2
16234: PUSH
16235: LD_INT 22
16237: PUSH
16238: LD_INT 1
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 2
16247: PUSH
16248: LD_INT 21
16250: PUSH
16251: LD_INT 1
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: LD_INT 21
16260: PUSH
16261: LD_INT 2
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: LIST
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PPUSH
16277: CALL_OW 69
16281: PUSH
16282: FOR_IN
16283: IFFALSE 16395
// begin if GetTaskList ( i ) > 0 then
16285: LD_VAR 0 2
16289: PPUSH
16290: CALL_OW 437
16294: PUSH
16295: LD_INT 0
16297: GREATER
16298: IFFALSE 16393
// begin for j = 1 to GetTaskList ( i ) do
16300: LD_ADDR_VAR 0 3
16304: PUSH
16305: DOUBLE
16306: LD_INT 1
16308: DEC
16309: ST_TO_ADDR
16310: LD_VAR 0 2
16314: PPUSH
16315: CALL_OW 437
16319: PUSH
16320: FOR_TO
16321: IFFALSE 16391
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16323: LD_ADDR_VAR 0 4
16327: PUSH
16328: LD_VAR 0 2
16332: PPUSH
16333: CALL_OW 437
16337: PUSH
16338: LD_VAR 0 3
16342: ARRAY
16343: PUSH
16344: LD_INT 4
16346: ARRAY
16347: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16348: LD_VAR 0 4
16352: PPUSH
16353: CALL_OW 255
16357: PUSH
16358: LD_INT 4
16360: EQUAL
16361: IFTRUE 16378
16363: PUSH
16364: LD_VAR 0 4
16368: PPUSH
16369: CALL_OW 255
16373: PUSH
16374: LD_INT 0
16376: EQUAL
16377: OR
16378: IFFALSE 16389
// ComStop ( i ) ;
16380: LD_VAR 0 2
16384: PPUSH
16385: CALL_OW 141
// end ;
16389: GO 16320
16391: POP
16392: POP
// end ; end ;
16393: GO 16282
16395: POP
16396: POP
// end ;
16397: PPOPN 4
16399: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
16400: LD_VAR 0 1
16404: PUSH
16405: LD_INT 22
16407: PUSH
16408: LD_INT 1
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 23
16417: PUSH
16418: LD_INT 1
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 21
16427: PUSH
16428: LD_INT 1
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: LIST
16439: PPUSH
16440: CALL_OW 69
16444: IN
16445: IFFALSE 16457
16447: PUSH
16448: LD_VAR 0 2
16452: PUSH
16453: LD_INT 1
16455: EQUAL
16456: AND
16457: IFFALSE 16463
// JMMTraitor ;
16459: CALL 8831 0 0
// end ; end_of_file
16463: PPOPN 3
16465: END
// every 10 10$0 do
16466: GO 16468
16468: DISABLE
// RespawnAttackInfantry ( 3 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16469: LD_INT 3
16471: PPUSH
16472: LD_INT 3
16474: PPUSH
16475: LD_INT 2
16477: PUSH
16478: LD_INT 2
16480: PUSH
16481: LD_INT 3
16483: PUSH
16484: LD_INT 4
16486: PUSH
16487: LD_INT 4
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: PUSH
16496: LD_OWVAR 67
16500: ARRAY
16501: PLUS
16502: PPUSH
16503: LD_INT 2
16505: PPUSH
16506: LD_EXP 16
16510: PPUSH
16511: LD_EXP 17
16515: PPUSH
16516: CALL_OW 12
16520: PPUSH
16521: LD_INT 4
16523: PPUSH
16524: LD_INT 14
16526: PPUSH
16527: LD_INT 1
16529: PPUSH
16530: LD_INT 2
16532: PPUSH
16533: CALL 7016 0 9
16537: END
// every 20 20$0 do
16538: GO 16540
16540: DISABLE
// RespawnAttackInfantry ( 3 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16541: LD_INT 3
16543: PPUSH
16544: LD_INT 3
16546: PPUSH
16547: LD_INT 4
16549: PUSH
16550: LD_INT 2
16552: PUSH
16553: LD_INT 3
16555: PUSH
16556: LD_INT 4
16558: PUSH
16559: LD_INT 5
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: PUSH
16568: LD_OWVAR 67
16572: ARRAY
16573: PLUS
16574: PPUSH
16575: LD_INT 2
16577: PPUSH
16578: LD_EXP 16
16582: PPUSH
16583: LD_EXP 17
16587: PPUSH
16588: CALL_OW 12
16592: PPUSH
16593: LD_INT 4
16595: PPUSH
16596: LD_INT 14
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: LD_INT 1
16604: PPUSH
16605: CALL 7016 0 9
16609: END
// export ruSpecialAttackGroup ; every 25 25$0 do var i , un , veh , hex , tmp ;
16610: GO 16612
16612: DISABLE
16613: LD_INT 0
16615: PPUSH
16616: PPUSH
16617: PPUSH
16618: PPUSH
16619: PPUSH
// begin ruSpecialAttackGroup := [ ] ;
16620: LD_ADDR_EXP 52
16624: PUSH
16625: EMPTY
16626: ST_TO_ADDR
// hex := [ 123 , 95 ] ;
16627: LD_ADDR_VAR 0 4
16631: PUSH
16632: LD_INT 123
16634: PUSH
16635: LD_INT 95
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: ST_TO_ADDR
// tmp := [ ] ;
16642: LD_ADDR_VAR 0 5
16646: PUSH
16647: EMPTY
16648: ST_TO_ADDR
// if Difficulty > 1 then
16649: LD_OWVAR 67
16653: PUSH
16654: LD_INT 1
16656: GREATER
16657: IFFALSE 16667
// specAttack := true ;
16659: LD_ADDR_EXP 47
16663: PUSH
16664: LD_INT 1
16666: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16667: LD_ADDR_VAR 0 1
16671: PUSH
16672: DOUBLE
16673: LD_INT 1
16675: DEC
16676: ST_TO_ADDR
16677: LD_INT 4
16679: PUSH
16680: LD_INT 5
16682: PUSH
16683: LD_INT 6
16685: PUSH
16686: LD_INT 7
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: PUSH
16695: LD_OWVAR 67
16699: ARRAY
16700: PUSH
16701: FOR_TO
16702: IFFALSE 17034
// begin uc_side := 3 ;
16704: LD_ADDR_OWVAR 20
16708: PUSH
16709: LD_INT 3
16711: ST_TO_ADDR
// uc_nation := 3 ;
16712: LD_ADDR_OWVAR 21
16716: PUSH
16717: LD_INT 3
16719: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16720: LD_ADDR_OWVAR 37
16724: PUSH
16725: LD_INT 21
16727: PUSH
16728: LD_INT 22
16730: PUSH
16731: LD_INT 23
16733: PUSH
16734: LD_INT 24
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: PUSH
16743: LD_VAR 0 1
16747: PUSH
16748: LD_OWVAR 67
16752: MOD
16753: PUSH
16754: LD_INT 1
16756: PLUS
16757: ARRAY
16758: ST_TO_ADDR
// vc_engine := engine_combustion ;
16759: LD_ADDR_OWVAR 39
16763: PUSH
16764: LD_INT 1
16766: ST_TO_ADDR
// vc_control := control_manual ;
16767: LD_ADDR_OWVAR 38
16771: PUSH
16772: LD_INT 1
16774: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16775: LD_ADDR_OWVAR 40
16779: PUSH
16780: LD_INT 42
16782: PUSH
16783: LD_INT 43
16785: PUSH
16786: LD_INT 44
16788: PUSH
16789: LD_INT 44
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: PUSH
16798: LD_VAR 0 1
16802: PUSH
16803: LD_OWVAR 67
16807: MOD
16808: PUSH
16809: LD_INT 1
16811: PLUS
16812: ARRAY
16813: ST_TO_ADDR
// veh := CreateVehicle ;
16814: LD_ADDR_VAR 0 3
16818: PUSH
16819: CALL_OW 45
16823: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
16824: LD_VAR 0 3
16828: PPUSH
16829: LD_INT 5
16831: PPUSH
16832: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
16836: LD_INT 35
16838: PPUSH
16839: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
16843: LD_VAR 0 4
16847: PUSH
16848: LD_INT 1
16850: ARRAY
16851: PPUSH
16852: LD_VAR 0 4
16856: PUSH
16857: LD_INT 2
16859: ARRAY
16860: PPUSH
16861: CALL_OW 428
16865: PUSH
16866: LD_INT 0
16868: EQUAL
16869: IFFALSE 16836
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
16871: LD_VAR 0 3
16875: PPUSH
16876: LD_VAR 0 4
16880: PUSH
16881: LD_INT 1
16883: ARRAY
16884: PPUSH
16885: LD_VAR 0 4
16889: PUSH
16890: LD_INT 2
16892: ARRAY
16893: PPUSH
16894: LD_INT 0
16896: PPUSH
16897: CALL_OW 48
// uc_side := 3 ;
16901: LD_ADDR_OWVAR 20
16905: PUSH
16906: LD_INT 3
16908: ST_TO_ADDR
// uc_nation := 3 ;
16909: LD_ADDR_OWVAR 21
16913: PUSH
16914: LD_INT 3
16916: ST_TO_ADDR
// InitHC_All ( ) ;
16917: CALL_OW 584
// PrepareMechanic ( false , 2 + Difficulty ) ;
16921: LD_INT 0
16923: PPUSH
16924: LD_INT 2
16926: PUSH
16927: LD_OWVAR 67
16931: PLUS
16932: PPUSH
16933: CALL_OW 383
// un := CreateHuman ;
16937: LD_ADDR_VAR 0 2
16941: PUSH
16942: CALL_OW 44
16946: ST_TO_ADDR
// ruSpecialAttackGroup := Join ( ruSpecialAttackGroup , un ) ;
16947: LD_ADDR_EXP 52
16951: PUSH
16952: LD_EXP 52
16956: PPUSH
16957: LD_VAR 0 2
16961: PPUSH
16962: CALL 80114 0 2
16966: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16967: LD_VAR 0 2
16971: PPUSH
16972: LD_VAR 0 3
16976: PPUSH
16977: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
16981: LD_VAR 0 3
16985: PPUSH
16986: LD_INT 101
16988: PPUSH
16989: LD_INT 77
16991: PPUSH
16992: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
16996: LD_ADDR_VAR 0 5
17000: PUSH
17001: LD_VAR 0 5
17005: PPUSH
17006: LD_VAR 0 5
17010: PUSH
17011: LD_INT 1
17013: PLUS
17014: PPUSH
17015: LD_VAR 0 3
17019: PPUSH
17020: CALL_OW 1
17024: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17025: LD_INT 105
17027: PPUSH
17028: CALL_OW 67
// end ;
17032: GO 16701
17034: POP
17035: POP
// repeat wait ( 0 0$1 ) ;
17036: LD_INT 35
17038: PPUSH
17039: CALL_OW 67
// for i in tmp do
17043: LD_ADDR_VAR 0 1
17047: PUSH
17048: LD_VAR 0 5
17052: PUSH
17053: FOR_IN
17054: IFFALSE 17122
// if not IsOk ( i ) then
17056: LD_VAR 0 1
17060: PPUSH
17061: CALL_OW 302
17065: NOT
17066: IFFALSE 17086
// tmp := tmp diff i else
17068: LD_ADDR_VAR 0 5
17072: PUSH
17073: LD_VAR 0 5
17077: PUSH
17078: LD_VAR 0 1
17082: DIFF
17083: ST_TO_ADDR
17084: GO 17120
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17086: LD_VAR 0 1
17090: PPUSH
17091: LD_INT 22
17093: PUSH
17094: LD_INT 1
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PPUSH
17101: CALL_OW 69
17105: PPUSH
17106: LD_VAR 0 1
17110: PPUSH
17111: CALL_OW 74
17115: PPUSH
17116: CALL_OW 115
17120: GO 17053
17122: POP
17123: POP
// until not tmp ;
17124: LD_VAR 0 5
17128: NOT
17129: IFFALSE 17036
// end ;
17131: PPOPN 5
17133: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17134: LD_EXP 47
17138: IFFALSE 17516
17140: GO 17142
17142: DISABLE
17143: LD_INT 0
17145: PPUSH
17146: PPUSH
17147: PPUSH
17148: PPUSH
// begin wait ( 0 0$20 ) ;
17149: LD_INT 700
17151: PPUSH
17152: CALL_OW 67
// uc_side := 3 ;
17156: LD_ADDR_OWVAR 20
17160: PUSH
17161: LD_INT 3
17163: ST_TO_ADDR
// uc_nation := 3 ;
17164: LD_ADDR_OWVAR 21
17168: PUSH
17169: LD_INT 3
17171: ST_TO_ADDR
// InitHc ;
17172: CALL_OW 19
// hc_importance := 0 ;
17176: LD_ADDR_OWVAR 32
17180: PUSH
17181: LD_INT 0
17183: ST_TO_ADDR
// tmp := [ ] ;
17184: LD_ADDR_VAR 0 2
17188: PUSH
17189: EMPTY
17190: ST_TO_ADDR
// InitHC_All ( ) ;
17191: CALL_OW 584
// PrepareHuman ( false , 2 , 6 ) ;
17195: LD_INT 0
17197: PPUSH
17198: LD_INT 2
17200: PPUSH
17201: LD_INT 6
17203: PPUSH
17204: CALL_OW 380
// eng := CreateHuman ;
17208: LD_ADDR_VAR 0 4
17212: PUSH
17213: CALL_OW 44
17217: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17218: LD_VAR 0 4
17222: PPUSH
17223: LD_INT 78
17225: PPUSH
17226: LD_INT 2
17228: PPUSH
17229: LD_INT 4
17231: PPUSH
17232: LD_INT 0
17234: PPUSH
17235: CALL_OW 50
// for i = 1 to [ 3 , 3 , 4 , 5 ] [ Difficulty ] do
17239: LD_ADDR_VAR 0 3
17243: PUSH
17244: DOUBLE
17245: LD_INT 1
17247: DEC
17248: ST_TO_ADDR
17249: LD_INT 3
17251: PUSH
17252: LD_INT 3
17254: PUSH
17255: LD_INT 4
17257: PUSH
17258: LD_INT 5
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: PUSH
17267: LD_OWVAR 67
17271: ARRAY
17272: PUSH
17273: FOR_TO
17274: IFFALSE 17363
// begin InitHC_All ( ) ;
17276: CALL_OW 584
// PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17280: LD_INT 0
17282: PPUSH
17283: LD_INT 1
17285: PPUSH
17286: LD_INT 4
17288: PUSH
17289: LD_INT 5
17291: PUSH
17292: LD_INT 6
17294: PUSH
17295: LD_INT 6
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: PUSH
17304: LD_OWVAR 67
17308: ARRAY
17309: PPUSH
17310: CALL_OW 380
// un := CreateHuman ;
17314: LD_ADDR_VAR 0 1
17318: PUSH
17319: CALL_OW 44
17323: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17324: LD_VAR 0 1
17328: PPUSH
17329: LD_INT 78
17331: PPUSH
17332: LD_INT 2
17334: PPUSH
17335: LD_INT 4
17337: PPUSH
17338: LD_INT 0
17340: PPUSH
17341: CALL_OW 50
// tmp := tmp ^ un ;
17345: LD_ADDR_VAR 0 2
17349: PUSH
17350: LD_VAR 0 2
17354: PUSH
17355: LD_VAR 0 1
17359: ADD
17360: ST_TO_ADDR
// end ;
17361: GO 17273
17363: POP
17364: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17365: LD_VAR 0 2
17369: PPUSH
17370: LD_INT 49
17372: PPUSH
17373: LD_INT 3
17375: PPUSH
17376: CALL_OW 111
// wait ( 0 0$2 ) ;
17380: LD_INT 70
17382: PPUSH
17383: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17387: LD_VAR 0 4
17391: PPUSH
17392: LD_INT 49
17394: PPUSH
17395: LD_INT 3
17397: PPUSH
17398: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17402: LD_VAR 0 4
17406: PPUSH
17407: LD_INT 4
17409: PPUSH
17410: CALL_OW 227
// wait ( 0 0$10 ) ;
17414: LD_INT 350
17416: PPUSH
17417: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17421: LD_INT 35
17423: PPUSH
17424: CALL_OW 67
// for i in tmp do
17428: LD_ADDR_VAR 0 3
17432: PUSH
17433: LD_VAR 0 2
17437: PUSH
17438: FOR_IN
17439: IFFALSE 17507
// if not IsOk ( i ) then
17441: LD_VAR 0 3
17445: PPUSH
17446: CALL_OW 302
17450: NOT
17451: IFFALSE 17471
// tmp := tmp diff i else
17453: LD_ADDR_VAR 0 2
17457: PUSH
17458: LD_VAR 0 2
17462: PUSH
17463: LD_VAR 0 3
17467: DIFF
17468: ST_TO_ADDR
17469: GO 17505
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17471: LD_VAR 0 3
17475: PPUSH
17476: LD_INT 22
17478: PUSH
17479: LD_INT 1
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PPUSH
17486: CALL_OW 69
17490: PPUSH
17491: LD_VAR 0 3
17495: PPUSH
17496: CALL_OW 74
17500: PPUSH
17501: CALL_OW 115
17505: GO 17438
17507: POP
17508: POP
// until not tmp ;
17509: LD_VAR 0 2
17513: NOT
17514: IFFALSE 17421
// end ; end_of_file
17516: PPOPN 4
17518: END
// every 0 0$1 trigger startTimer = 1 do
17519: LD_EXP 30
17523: PUSH
17524: LD_INT 1
17526: EQUAL
17527: IFFALSE 17657
17529: GO 17531
17531: DISABLE
// begin enable ;
17532: ENABLE
// if timerStatus = 1 then
17533: LD_EXP 29
17537: PUSH
17538: LD_INT 1
17540: EQUAL
17541: IFFALSE 17574
// begin timeToSupport = timeToSupport - 0 0$01 ;
17543: LD_ADDR_EXP 28
17547: PUSH
17548: LD_EXP 28
17552: PUSH
17553: LD_INT 35
17555: MINUS
17556: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17557: LD_ADDR_OWVAR 47
17561: PUSH
17562: LD_STRING #Am04-1
17564: PUSH
17565: LD_EXP 28
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: ST_TO_ADDR
// end ; if timerStatus = 2 then
17574: LD_EXP 29
17578: PUSH
17579: LD_INT 2
17581: EQUAL
17582: IFFALSE 17615
// begin timeToSupport = timeToSupport - 0 0$01 ;
17584: LD_ADDR_EXP 28
17588: PUSH
17589: LD_EXP 28
17593: PUSH
17594: LD_INT 35
17596: MINUS
17597: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17598: LD_ADDR_OWVAR 47
17602: PUSH
17603: LD_STRING #Am04-2
17605: PUSH
17606: LD_EXP 28
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: ST_TO_ADDR
// end ; if timerStatus = 3 then
17615: LD_EXP 29
17619: PUSH
17620: LD_INT 3
17622: EQUAL
17623: IFFALSE 17639
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17625: LD_ADDR_EXP 27
17629: PUSH
17630: LD_EXP 27
17634: PUSH
17635: LD_INT 35
17637: MINUS
17638: ST_TO_ADDR
// if timerStatus = 4 then
17639: LD_EXP 29
17643: PUSH
17644: LD_INT 4
17646: EQUAL
17647: IFFALSE 17657
// display_strings =  ;
17649: LD_ADDR_OWVAR 47
17653: PUSH
17654: LD_STRING 
17656: ST_TO_ADDR
// end ; end_of_file
17657: END
// every 0 0$1 trigger not reliefOfCommand and IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17658: LD_EXP 48
17662: NOT
17663: IFFALSE 17676
17665: PUSH
17666: LD_EXP 15
17670: PPUSH
17671: CALL_OW 301
17675: AND
17676: IFFALSE 17733
17678: PUSH
17679: LD_INT 22
17681: PUSH
17682: LD_INT 3
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 21
17691: PUSH
17692: LD_INT 1
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PPUSH
17703: CALL_OW 69
17707: PUSH
17708: LD_INT 14
17710: PUSH
17711: LD_INT 13
17713: PUSH
17714: LD_INT 12
17716: PUSH
17717: LD_INT 11
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: PUSH
17726: LD_OWVAR 67
17730: ARRAY
17731: LESS
17732: AND
17733: IFFALSE 18321
17735: GO 17737
17737: DISABLE
17738: LD_INT 0
17740: PPUSH
17741: PPUSH
17742: PPUSH
// begin AIEnable = 0 ;
17743: LD_ADDR_EXP 37
17747: PUSH
17748: LD_INT 0
17750: ST_TO_ADDR
// escapeAvalaible = 1 ;
17751: LD_ADDR_EXP 40
17755: PUSH
17756: LD_INT 1
17758: ST_TO_ADDR
// Video ( true ) ;
17759: LD_INT 1
17761: PPUSH
17762: CALL 80086 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17766: LD_INT 3
17768: PPUSH
17769: LD_INT 1
17771: PPUSH
17772: LD_INT 1
17774: PPUSH
17775: LD_INT 0
17777: PPUSH
17778: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17782: LD_INT 6
17784: PPUSH
17785: LD_INT 1
17787: PPUSH
17788: LD_INT 1
17790: PPUSH
17791: LD_INT 0
17793: PPUSH
17794: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17798: LD_INT 5
17800: PPUSH
17801: LD_INT 1
17803: PPUSH
17804: LD_INT 1
17806: PPUSH
17807: LD_INT 0
17809: PPUSH
17810: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17814: LD_INT 3
17816: PPUSH
17817: LD_INT 1
17819: PPUSH
17820: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17824: LD_INT 97
17826: PPUSH
17827: LD_INT 91
17829: PPUSH
17830: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17834: LD_INT 22
17836: PUSH
17837: LD_INT 3
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 21
17846: PUSH
17847: LD_INT 1
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PPUSH
17858: CALL_OW 69
17862: PPUSH
17863: CALL_OW 121
// wait ( 0 0$01 ) ;
17867: LD_INT 35
17869: PPUSH
17870: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17874: LD_INT 22
17876: PUSH
17877: LD_INT 3
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 21
17886: PUSH
17887: LD_INT 1
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PPUSH
17898: CALL_OW 69
17902: PPUSH
17903: LD_INT 124
17905: PPUSH
17906: LD_INT 98
17908: PPUSH
17909: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
17913: LD_INT 22
17915: PUSH
17916: LD_INT 5
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 21
17925: PUSH
17926: LD_INT 1
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PPUSH
17937: CALL_OW 69
17941: PPUSH
17942: CALL_OW 121
// wait ( 0 0$01 ) ;
17946: LD_INT 35
17948: PPUSH
17949: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17953: LD_INT 22
17955: PUSH
17956: LD_INT 5
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 21
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PPUSH
17977: CALL_OW 69
17981: PPUSH
17982: LD_INT 124
17984: PPUSH
17985: LD_INT 98
17987: PPUSH
17988: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
17992: LD_INT 22
17994: PUSH
17995: LD_INT 6
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 21
18004: PUSH
18005: LD_INT 1
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PPUSH
18016: CALL_OW 69
18020: PPUSH
18021: CALL_OW 121
// wait ( 0 0$01 ) ;
18025: LD_INT 35
18027: PPUSH
18028: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18032: LD_INT 22
18034: PUSH
18035: LD_INT 6
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 21
18044: PUSH
18045: LD_INT 1
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PPUSH
18056: CALL_OW 69
18060: PPUSH
18061: LD_INT 124
18063: PPUSH
18064: LD_INT 98
18066: PPUSH
18067: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18071: LD_INT 22
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 21
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PPUSH
18095: CALL_OW 69
18099: PPUSH
18100: LD_INT 124
18102: PPUSH
18103: LD_INT 96
18105: PPUSH
18106: CALL_OW 114
// wait ( 0 0$1 ) ;
18110: LD_INT 35
18112: PPUSH
18113: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18117: LD_INT 124
18119: PPUSH
18120: LD_INT 96
18122: PPUSH
18123: CALL_OW 84
// p := 0 0$0 ;
18127: LD_ADDR_VAR 0 3
18131: PUSH
18132: LD_INT 0
18134: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18135: LD_ADDR_VAR 0 2
18139: PUSH
18140: LD_INT 2
18142: PUSH
18143: LD_INT 22
18145: PUSH
18146: LD_INT 3
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 22
18155: PUSH
18156: LD_INT 6
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 21
18170: PUSH
18171: LD_INT 1
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PPUSH
18182: CALL_OW 69
18186: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18187: LD_INT 35
18189: PPUSH
18190: CALL_OW 67
// p := p + 0 0$1 ;
18194: LD_ADDR_VAR 0 3
18198: PUSH
18199: LD_VAR 0 3
18203: PUSH
18204: LD_INT 35
18206: PLUS
18207: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18208: LD_VAR 0 2
18212: PPUSH
18213: LD_INT 5
18215: PPUSH
18216: CALL_OW 113
// for i in tmp do
18220: LD_ADDR_VAR 0 1
18224: PUSH
18225: LD_VAR 0 2
18229: PUSH
18230: FOR_IN
18231: IFFALSE 18258
// if IsInArea ( i , RussianEscape ) then
18233: LD_VAR 0 1
18237: PPUSH
18238: LD_INT 5
18240: PPUSH
18241: CALL_OW 308
18245: IFFALSE 18256
// RemoveUnit ( i ) ;
18247: LD_VAR 0 1
18251: PPUSH
18252: CALL_OW 64
18256: GO 18230
18258: POP
18259: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18260: LD_INT 23
18262: PUSH
18263: LD_INT 3
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 21
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 24
18282: PUSH
18283: LD_INT 250
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: LIST
18294: PPUSH
18295: CALL_OW 69
18299: PUSH
18300: LD_INT 0
18302: EQUAL
18303: IFTRUE 18315
18305: PUSH
18306: LD_VAR 0 3
18310: PUSH
18311: LD_INT 245
18313: GREATEREQUAL
18314: OR
18315: IFFALSE 18187
// FinishMission ;
18317: CALL 18324 0 0
// end ;
18321: PPOPN 3
18323: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18324: LD_INT 0
18326: PPUSH
18327: PPUSH
18328: PPUSH
18329: PPUSH
18330: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
18331: LD_INT 22
18333: PUSH
18334: LD_INT 1
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 21
18343: PUSH
18344: LD_INT 1
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 23
18353: PUSH
18354: LD_INT 1
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 50
18363: PUSH
18364: EMPTY
18365: LIST
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: PPUSH
18373: CALL_OW 69
18377: PPUSH
18378: CALL 44182 0 1
18382: PUSH
18383: LD_INT 5
18385: LESS
18386: IFFALSE 18397
// begin YouLost ( LostVictory ) ;
18388: LD_STRING LostVictory
18390: PPUSH
18391: CALL_OW 104
// exit ;
18395: GO 19098
// end ; if not vehicleProduceCounter then
18397: LD_EXP 42
18401: NOT
18402: IFFALSE 18411
// SetAchievement ( ACH_INFANTRY ) ;
18404: LD_STRING ACH_INFANTRY
18406: PPUSH
18407: CALL_OW 543
// if tick <= 20 20$00 then
18411: LD_OWVAR 1
18415: PUSH
18416: LD_INT 42000
18418: LESSEQUAL
18419: IFFALSE 18435
// begin wait ( 3 ) ;
18421: LD_INT 3
18423: PPUSH
18424: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18428: LD_STRING ACH_ASPEED_4
18430: PPUSH
18431: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18435: LD_INT 22
18437: PPUSH
18438: CALL 19103 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18442: LD_INT 69
18444: PPUSH
18445: LD_INT 1
18447: PPUSH
18448: CALL_OW 321
18452: PPUSH
18453: LD_STRING GatlingInGamma
18455: PPUSH
18456: CALL_OW 39
// m1 := false ;
18460: LD_ADDR_VAR 0 3
18464: PUSH
18465: LD_INT 0
18467: ST_TO_ADDR
// m2 := false ;
18468: LD_ADDR_VAR 0 4
18472: PUSH
18473: LD_INT 0
18475: ST_TO_ADDR
// m3 := false ;
18476: LD_ADDR_VAR 0 5
18480: PUSH
18481: LD_INT 0
18483: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18484: LD_EXP 34
18488: PUSH
18489: LD_INT 1
18491: EQUAL
18492: IFFALSE 18504
18494: PUSH
18495: LD_EXP 35
18499: PUSH
18500: LD_INT 1
18502: EQUAL
18503: AND
18504: IFFALSE 18526
// begin AddMedal ( oil , 1 ) ;
18506: LD_STRING oil
18508: PPUSH
18509: LD_INT 1
18511: PPUSH
18512: CALL_OW 101
// m1 := true ;
18516: LD_ADDR_VAR 0 3
18520: PUSH
18521: LD_INT 1
18523: ST_TO_ADDR
// end else
18524: GO 18625
// begin if buildOil = 1 and buildPower = 0 then
18526: LD_EXP 34
18530: PUSH
18531: LD_INT 1
18533: EQUAL
18534: IFFALSE 18546
18536: PUSH
18537: LD_EXP 35
18541: PUSH
18542: LD_INT 0
18544: EQUAL
18545: AND
18546: IFFALSE 18559
// AddMedal ( oil , - 1 ) ;
18548: LD_STRING oil
18550: PPUSH
18551: LD_INT 1
18553: NEG
18554: PPUSH
18555: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18559: LD_EXP 34
18563: PUSH
18564: LD_INT 0
18566: EQUAL
18567: IFFALSE 18579
18569: PUSH
18570: LD_EXP 35
18574: PUSH
18575: LD_INT 1
18577: EQUAL
18578: AND
18579: IFFALSE 18592
// AddMedal ( oil , - 2 ) ;
18581: LD_STRING oil
18583: PPUSH
18584: LD_INT 2
18586: NEG
18587: PPUSH
18588: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18592: LD_EXP 34
18596: PUSH
18597: LD_INT 0
18599: EQUAL
18600: IFFALSE 18612
18602: PUSH
18603: LD_EXP 35
18607: PUSH
18608: LD_INT 0
18610: EQUAL
18611: AND
18612: IFFALSE 18625
// AddMedal ( oil , - 3 ) ;
18614: LD_STRING oil
18616: PPUSH
18617: LD_INT 3
18619: NEG
18620: PPUSH
18621: CALL_OW 101
// end ; if lostCounter > 3 then
18625: LD_EXP 38
18629: PUSH
18630: LD_INT 3
18632: GREATER
18633: IFFALSE 18648
// AddMedal ( deaths , - 1 ) else
18635: LD_STRING deaths
18637: PPUSH
18638: LD_INT 1
18640: NEG
18641: PPUSH
18642: CALL_OW 101
18646: GO 18666
// begin AddMedal ( deaths , 1 ) ;
18648: LD_STRING deaths
18650: PPUSH
18651: LD_INT 1
18653: PPUSH
18654: CALL_OW 101
// m2 := true ;
18658: LD_ADDR_VAR 0 4
18662: PUSH
18663: LD_INT 1
18665: ST_TO_ADDR
// end ; if honor then
18666: LD_EXP 39
18670: IFFALSE 18692
// begin AddMedal ( honour , 1 ) ;
18672: LD_STRING honour
18674: PPUSH
18675: LD_INT 1
18677: PPUSH
18678: CALL_OW 101
// m3 := true ;
18682: LD_ADDR_VAR 0 5
18686: PUSH
18687: LD_INT 1
18689: ST_TO_ADDR
// end else
18690: GO 18703
// AddMedal ( honour , - 1 ) ;
18692: LD_STRING honour
18694: PPUSH
18695: LD_INT 1
18697: NEG
18698: PPUSH
18699: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18703: LD_VAR 0 3
18707: IFFALSE 18715
18709: PUSH
18710: LD_VAR 0 4
18714: AND
18715: IFFALSE 18723
18717: PUSH
18718: LD_VAR 0 5
18722: AND
18723: IFFALSE 18735
18725: PUSH
18726: LD_OWVAR 67
18730: PUSH
18731: LD_INT 3
18733: GREATEREQUAL
18734: AND
18735: IFFALSE 18747
// SetAchievementEX ( ACH_AMER , 4 ) ;
18737: LD_STRING ACH_AMER
18739: PPUSH
18740: LD_INT 4
18742: PPUSH
18743: CALL_OW 564
// GiveMedals ( Main ) ;
18747: LD_STRING Main
18749: PPUSH
18750: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18754: LD_INT 22
18756: PUSH
18757: LD_INT 1
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 23
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 21
18776: PUSH
18777: LD_INT 1
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: LIST
18788: PPUSH
18789: CALL_OW 69
18793: PPUSH
18794: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18798: LD_EXP 1
18802: PPUSH
18803: LD_EXP 49
18807: PUSH
18808: LD_STRING JMM
18810: STR
18811: PPUSH
18812: CALL_OW 38
// if IsOK ( Bobby ) then
18816: LD_EXP 2
18820: PPUSH
18821: CALL_OW 302
18825: IFFALSE 18845
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18827: LD_EXP 2
18831: PPUSH
18832: LD_EXP 49
18836: PUSH
18837: LD_STRING Bobby
18839: STR
18840: PPUSH
18841: CALL_OW 38
// if IsOK ( Cyrus ) then
18845: LD_EXP 3
18849: PPUSH
18850: CALL_OW 302
18854: IFFALSE 18874
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18856: LD_EXP 3
18860: PPUSH
18861: LD_EXP 49
18865: PUSH
18866: LD_STRING Cyrus
18868: STR
18869: PPUSH
18870: CALL_OW 38
// if IsOK ( Lisa ) then
18874: LD_EXP 4
18878: PPUSH
18879: CALL_OW 302
18883: IFFALSE 18903
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18885: LD_EXP 4
18889: PPUSH
18890: LD_EXP 49
18894: PUSH
18895: LD_STRING Lisa
18897: STR
18898: PPUSH
18899: CALL_OW 38
// if IsOK ( Brown ) then
18903: LD_EXP 7
18907: PPUSH
18908: CALL_OW 302
18912: IFFALSE 18939
// begin ToLua ( enableBioCharacter(BIO_JEFF) ) ;
18914: LD_STRING enableBioCharacter(BIO_JEFF)
18916: PPUSH
18917: CALL_OW 559
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18921: LD_EXP 7
18925: PPUSH
18926: LD_EXP 49
18930: PUSH
18931: LD_STRING Brown
18933: STR
18934: PPUSH
18935: CALL_OW 38
// end ; if not IsDead ( Donaldson ) then
18939: LD_EXP 13
18943: PPUSH
18944: CALL_OW 301
18948: NOT
18949: IFFALSE 18976
// begin ToLua ( enableBioCharacter(BIO_LUCY) ) ;
18951: LD_STRING enableBioCharacter(BIO_LUCY)
18953: PPUSH
18954: CALL_OW 559
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18958: LD_EXP 13
18962: PPUSH
18963: LD_EXP 49
18967: PUSH
18968: LD_STRING Donaldson
18970: STR
18971: PPUSH
18972: CALL_OW 38
// end ; if not IsDead ( Frank ) then
18976: LD_EXP 5
18980: PPUSH
18981: CALL_OW 301
18985: NOT
18986: IFFALSE 19006
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
18988: LD_EXP 5
18992: PPUSH
18993: LD_EXP 49
18997: PUSH
18998: LD_STRING Frank
19000: STR
19001: PPUSH
19002: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19006: LD_INT 50
19008: PUSH
19009: EMPTY
19010: LIST
19011: PUSH
19012: LD_INT 22
19014: PUSH
19015: LD_INT 1
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 21
19024: PUSH
19025: LD_INT 1
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: LIST
19036: PPUSH
19037: CALL_OW 69
19041: PUSH
19042: LD_EXP 1
19046: PUSH
19047: LD_EXP 2
19051: PUSH
19052: LD_EXP 3
19056: PUSH
19057: LD_EXP 4
19061: PUSH
19062: LD_EXP 7
19066: PUSH
19067: LD_EXP 13
19071: PUSH
19072: LD_EXP 5
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: DIFF
19086: PPUSH
19087: LD_STRING 04_other_survivors
19089: PPUSH
19090: CALL_OW 38
// YouWin ;
19094: CALL_OW 103
// end ;
19098: LD_VAR 0 1
19102: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19103: LD_INT 0
19105: PPUSH
19106: PPUSH
19107: PPUSH
19108: PPUSH
// gammaBase = [ ] ;
19109: LD_ADDR_VAR 0 4
19113: PUSH
19114: EMPTY
19115: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19116: LD_ADDR_VAR 0 5
19120: PUSH
19121: LD_VAR 0 1
19125: PPUSH
19126: LD_INT 22
19128: PUSH
19129: LD_INT 1
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 21
19138: PUSH
19139: LD_INT 3
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PPUSH
19150: CALL_OW 70
19154: ST_TO_ADDR
// for i in buildings do
19155: LD_ADDR_VAR 0 3
19159: PUSH
19160: LD_VAR 0 5
19164: PUSH
19165: FOR_IN
19166: IFFALSE 19503
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19168: LD_VAR 0 3
19172: PPUSH
19173: CALL_OW 266
19177: PUSH
19178: LD_INT 6
19180: PUSH
19181: LD_INT 7
19183: PUSH
19184: LD_INT 8
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: LIST
19191: IN
19192: IFFALSE 19306
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19194: LD_ADDR_VAR 0 4
19198: PUSH
19199: LD_VAR 0 4
19203: PUSH
19204: LD_VAR 0 3
19208: PPUSH
19209: CALL_OW 266
19213: PUSH
19214: LD_VAR 0 3
19218: PPUSH
19219: CALL_OW 250
19223: PUSH
19224: LD_VAR 0 3
19228: PPUSH
19229: CALL_OW 251
19233: PUSH
19234: LD_VAR 0 3
19238: PPUSH
19239: CALL_OW 254
19243: PUSH
19244: LD_VAR 0 3
19248: PPUSH
19249: CALL_OW 267
19253: PUSH
19254: LD_VAR 0 3
19258: PPUSH
19259: CALL_OW 248
19263: PUSH
19264: LD_VAR 0 3
19268: PPUSH
19269: LD_INT 1
19271: PPUSH
19272: CALL_OW 268
19276: PUSH
19277: LD_VAR 0 3
19281: PPUSH
19282: LD_INT 2
19284: PPUSH
19285: CALL_OW 268
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: PUSH
19300: EMPTY
19301: LIST
19302: ADD
19303: ST_TO_ADDR
19304: GO 19501
// if GetBType ( i ) in [ b_bunker ] then
19306: LD_VAR 0 3
19310: PPUSH
19311: CALL_OW 266
19315: PUSH
19316: LD_INT 32
19318: PUSH
19319: EMPTY
19320: LIST
19321: IN
19322: IFFALSE 19419
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19324: LD_ADDR_VAR 0 4
19328: PUSH
19329: LD_VAR 0 4
19333: PUSH
19334: LD_VAR 0 3
19338: PPUSH
19339: CALL_OW 266
19343: PUSH
19344: LD_VAR 0 3
19348: PPUSH
19349: CALL_OW 250
19353: PUSH
19354: LD_VAR 0 3
19358: PPUSH
19359: CALL_OW 251
19363: PUSH
19364: LD_VAR 0 3
19368: PPUSH
19369: CALL_OW 254
19373: PUSH
19374: LD_VAR 0 3
19378: PPUSH
19379: CALL_OW 267
19383: PUSH
19384: LD_VAR 0 3
19388: PPUSH
19389: CALL_OW 248
19393: PUSH
19394: LD_VAR 0 3
19398: PPUSH
19399: CALL_OW 269
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: PUSH
19413: EMPTY
19414: LIST
19415: ADD
19416: ST_TO_ADDR
19417: GO 19501
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19419: LD_ADDR_VAR 0 4
19423: PUSH
19424: LD_VAR 0 4
19428: PUSH
19429: LD_VAR 0 3
19433: PPUSH
19434: CALL_OW 266
19438: PUSH
19439: LD_VAR 0 3
19443: PPUSH
19444: CALL_OW 250
19448: PUSH
19449: LD_VAR 0 3
19453: PPUSH
19454: CALL_OW 251
19458: PUSH
19459: LD_VAR 0 3
19463: PPUSH
19464: CALL_OW 254
19468: PUSH
19469: LD_VAR 0 3
19473: PPUSH
19474: CALL_OW 267
19478: PUSH
19479: LD_VAR 0 3
19483: PPUSH
19484: CALL_OW 248
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: PUSH
19497: EMPTY
19498: LIST
19499: ADD
19500: ST_TO_ADDR
// end ;
19501: GO 19165
19503: POP
19504: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19505: LD_VAR 0 4
19509: PPUSH
19510: LD_STRING GammaBase
19512: PPUSH
19513: CALL_OW 39
// end ; end_of_file
19517: LD_VAR 0 2
19521: RET
// every 1 1$15 do
19522: GO 19524
19524: DISABLE
// begin if supply <= 13 and supply > 7 then
19525: LD_EXP 36
19529: PUSH
19530: LD_INT 13
19532: LESSEQUAL
19533: IFFALSE 19545
19535: PUSH
19536: LD_EXP 36
19540: PUSH
19541: LD_INT 7
19543: GREATER
19544: AND
19545: IFFALSE 19568
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19547: LD_INT 3
19549: PPUSH
19550: LD_INT 5
19552: PPUSH
19553: CALL_OW 12
19557: PPUSH
19558: LD_INT 18
19560: PPUSH
19561: LD_INT 1
19563: PPUSH
19564: CALL_OW 55
// if supply <= 7 and supply > 4 then
19568: LD_EXP 36
19572: PUSH
19573: LD_INT 7
19575: LESSEQUAL
19576: IFFALSE 19588
19578: PUSH
19579: LD_EXP 36
19583: PUSH
19584: LD_INT 4
19586: GREATER
19587: AND
19588: IFFALSE 19611
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19590: LD_INT 3
19592: PPUSH
19593: LD_INT 5
19595: PPUSH
19596: CALL_OW 12
19600: PPUSH
19601: LD_INT 19
19603: PPUSH
19604: LD_INT 1
19606: PPUSH
19607: CALL_OW 55
// if supply <= 4 and supply > 0 then
19611: LD_EXP 36
19615: PUSH
19616: LD_INT 4
19618: LESSEQUAL
19619: IFFALSE 19631
19621: PUSH
19622: LD_EXP 36
19626: PUSH
19627: LD_INT 0
19629: GREATER
19630: AND
19631: IFFALSE 19654
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19633: LD_INT 3
19635: PPUSH
19636: LD_INT 5
19638: PPUSH
19639: CALL_OW 12
19643: PPUSH
19644: LD_INT 20
19646: PPUSH
19647: LD_INT 1
19649: PPUSH
19650: CALL_OW 55
// if supply then
19654: LD_EXP 36
19658: IFFALSE 19675
// begin supply = supply - 1 ;
19660: LD_ADDR_EXP 36
19664: PUSH
19665: LD_EXP 36
19669: PUSH
19670: LD_INT 1
19672: MINUS
19673: ST_TO_ADDR
// enable ;
19674: ENABLE
// end ; end ; end_of_file end_of_file
19675: END
// export globalGameSaveCounter ; every 0 0$1 do
19676: GO 19678
19678: DISABLE
// begin enable ;
19679: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19680: LD_STRING updateTimer(
19682: PUSH
19683: LD_OWVAR 1
19687: STR
19688: PUSH
19689: LD_STRING );
19691: STR
19692: PPUSH
19693: CALL_OW 559
// end ;
19697: END
// every 0 0$1 do
19698: GO 19700
19700: DISABLE
// begin globalGameSaveCounter := 0 ;
19701: LD_ADDR_EXP 53
19705: PUSH
19706: LD_INT 0
19708: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19709: LD_STRING setGameSaveCounter(0)
19711: PPUSH
19712: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19716: LD_STRING initStreamRollete();
19718: PPUSH
19719: CALL_OW 559
// InitStreamMode ;
19723: CALL 21068 0 0
// DefineStreamItems ( false ) ;
19727: LD_INT 0
19729: PPUSH
19730: CALL 21532 0 1
// end ;
19734: END
// export function SOS_MapStart ( ) ; begin
19735: LD_INT 0
19737: PPUSH
// if streamModeActive then
19738: LD_EXP 54
19742: IFFALSE 19751
// DefineStreamItems ( true ) ;
19744: LD_INT 1
19746: PPUSH
19747: CALL 21532 0 1
// UpdateLuaVariables ( ) ;
19751: CALL 19768 0 0
// UpdateFactoryWaypoints ( ) ;
19755: CALL 34654 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19759: CALL 34906 0 0
// end ;
19763: LD_VAR 0 1
19767: RET
// function UpdateLuaVariables ( ) ; begin
19768: LD_INT 0
19770: PPUSH
// if globalGameSaveCounter then
19771: LD_EXP 53
19775: IFFALSE 19809
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19777: LD_ADDR_EXP 53
19781: PUSH
19782: LD_EXP 53
19786: PPUSH
19787: CALL 81487 0 1
19791: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19792: LD_STRING setGameSaveCounter(
19794: PUSH
19795: LD_EXP 53
19799: STR
19800: PUSH
19801: LD_STRING )
19803: STR
19804: PPUSH
19805: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19809: LD_STRING setGameDifficulty(
19811: PUSH
19812: LD_OWVAR 67
19816: STR
19817: PUSH
19818: LD_STRING )
19820: STR
19821: PPUSH
19822: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19826: LD_STRING displayDifficulty(
19828: PUSH
19829: LD_OWVAR 67
19833: STR
19834: PUSH
19835: LD_STRING )
19837: STR
19838: PPUSH
19839: CALL_OW 559
// end ;
19843: LD_VAR 0 1
19847: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19848: LD_INT 0
19850: PPUSH
// if p2 = stream_mode then
19851: LD_VAR 0 2
19855: PUSH
19856: LD_INT 100
19858: EQUAL
19859: IFFALSE 20862
// begin if not StreamModeActive then
19861: LD_EXP 54
19865: NOT
19866: IFFALSE 19876
// StreamModeActive := true ;
19868: LD_ADDR_EXP 54
19872: PUSH
19873: LD_INT 1
19875: ST_TO_ADDR
// if p3 = 0 then
19876: LD_VAR 0 3
19880: PUSH
19881: LD_INT 0
19883: EQUAL
19884: IFFALSE 19890
// InitStreamMode ;
19886: CALL 21068 0 0
// if p3 = 1 then
19890: LD_VAR 0 3
19894: PUSH
19895: LD_INT 1
19897: EQUAL
19898: IFFALSE 19908
// sRocket := true ;
19900: LD_ADDR_EXP 59
19904: PUSH
19905: LD_INT 1
19907: ST_TO_ADDR
// if p3 = 2 then
19908: LD_VAR 0 3
19912: PUSH
19913: LD_INT 2
19915: EQUAL
19916: IFFALSE 19926
// sSpeed := true ;
19918: LD_ADDR_EXP 58
19922: PUSH
19923: LD_INT 1
19925: ST_TO_ADDR
// if p3 = 3 then
19926: LD_VAR 0 3
19930: PUSH
19931: LD_INT 3
19933: EQUAL
19934: IFFALSE 19944
// sEngine := true ;
19936: LD_ADDR_EXP 60
19940: PUSH
19941: LD_INT 1
19943: ST_TO_ADDR
// if p3 = 4 then
19944: LD_VAR 0 3
19948: PUSH
19949: LD_INT 4
19951: EQUAL
19952: IFFALSE 19962
// sSpec := true ;
19954: LD_ADDR_EXP 57
19958: PUSH
19959: LD_INT 1
19961: ST_TO_ADDR
// if p3 = 5 then
19962: LD_VAR 0 3
19966: PUSH
19967: LD_INT 5
19969: EQUAL
19970: IFFALSE 19980
// sLevel := true ;
19972: LD_ADDR_EXP 61
19976: PUSH
19977: LD_INT 1
19979: ST_TO_ADDR
// if p3 = 6 then
19980: LD_VAR 0 3
19984: PUSH
19985: LD_INT 6
19987: EQUAL
19988: IFFALSE 19998
// sArmoury := true ;
19990: LD_ADDR_EXP 62
19994: PUSH
19995: LD_INT 1
19997: ST_TO_ADDR
// if p3 = 7 then
19998: LD_VAR 0 3
20002: PUSH
20003: LD_INT 7
20005: EQUAL
20006: IFFALSE 20016
// sRadar := true ;
20008: LD_ADDR_EXP 63
20012: PUSH
20013: LD_INT 1
20015: ST_TO_ADDR
// if p3 = 8 then
20016: LD_VAR 0 3
20020: PUSH
20021: LD_INT 8
20023: EQUAL
20024: IFFALSE 20034
// sBunker := true ;
20026: LD_ADDR_EXP 64
20030: PUSH
20031: LD_INT 1
20033: ST_TO_ADDR
// if p3 = 9 then
20034: LD_VAR 0 3
20038: PUSH
20039: LD_INT 9
20041: EQUAL
20042: IFFALSE 20052
// sHack := true ;
20044: LD_ADDR_EXP 65
20048: PUSH
20049: LD_INT 1
20051: ST_TO_ADDR
// if p3 = 10 then
20052: LD_VAR 0 3
20056: PUSH
20057: LD_INT 10
20059: EQUAL
20060: IFFALSE 20070
// sFire := true ;
20062: LD_ADDR_EXP 66
20066: PUSH
20067: LD_INT 1
20069: ST_TO_ADDR
// if p3 = 11 then
20070: LD_VAR 0 3
20074: PUSH
20075: LD_INT 11
20077: EQUAL
20078: IFFALSE 20088
// sRefresh := true ;
20080: LD_ADDR_EXP 67
20084: PUSH
20085: LD_INT 1
20087: ST_TO_ADDR
// if p3 = 12 then
20088: LD_VAR 0 3
20092: PUSH
20093: LD_INT 12
20095: EQUAL
20096: IFFALSE 20106
// sExp := true ;
20098: LD_ADDR_EXP 68
20102: PUSH
20103: LD_INT 1
20105: ST_TO_ADDR
// if p3 = 13 then
20106: LD_VAR 0 3
20110: PUSH
20111: LD_INT 13
20113: EQUAL
20114: IFFALSE 20124
// sDepot := true ;
20116: LD_ADDR_EXP 69
20120: PUSH
20121: LD_INT 1
20123: ST_TO_ADDR
// if p3 = 14 then
20124: LD_VAR 0 3
20128: PUSH
20129: LD_INT 14
20131: EQUAL
20132: IFFALSE 20142
// sFlag := true ;
20134: LD_ADDR_EXP 70
20138: PUSH
20139: LD_INT 1
20141: ST_TO_ADDR
// if p3 = 15 then
20142: LD_VAR 0 3
20146: PUSH
20147: LD_INT 15
20149: EQUAL
20150: IFFALSE 20160
// sKamikadze := true ;
20152: LD_ADDR_EXP 78
20156: PUSH
20157: LD_INT 1
20159: ST_TO_ADDR
// if p3 = 16 then
20160: LD_VAR 0 3
20164: PUSH
20165: LD_INT 16
20167: EQUAL
20168: IFFALSE 20178
// sTroll := true ;
20170: LD_ADDR_EXP 79
20174: PUSH
20175: LD_INT 1
20177: ST_TO_ADDR
// if p3 = 17 then
20178: LD_VAR 0 3
20182: PUSH
20183: LD_INT 17
20185: EQUAL
20186: IFFALSE 20196
// sSlow := true ;
20188: LD_ADDR_EXP 80
20192: PUSH
20193: LD_INT 1
20195: ST_TO_ADDR
// if p3 = 18 then
20196: LD_VAR 0 3
20200: PUSH
20201: LD_INT 18
20203: EQUAL
20204: IFFALSE 20214
// sLack := true ;
20206: LD_ADDR_EXP 81
20210: PUSH
20211: LD_INT 1
20213: ST_TO_ADDR
// if p3 = 19 then
20214: LD_VAR 0 3
20218: PUSH
20219: LD_INT 19
20221: EQUAL
20222: IFFALSE 20232
// sTank := true ;
20224: LD_ADDR_EXP 83
20228: PUSH
20229: LD_INT 1
20231: ST_TO_ADDR
// if p3 = 20 then
20232: LD_VAR 0 3
20236: PUSH
20237: LD_INT 20
20239: EQUAL
20240: IFFALSE 20250
// sRemote := true ;
20242: LD_ADDR_EXP 84
20246: PUSH
20247: LD_INT 1
20249: ST_TO_ADDR
// if p3 = 21 then
20250: LD_VAR 0 3
20254: PUSH
20255: LD_INT 21
20257: EQUAL
20258: IFFALSE 20268
// sPowell := true ;
20260: LD_ADDR_EXP 85
20264: PUSH
20265: LD_INT 1
20267: ST_TO_ADDR
// if p3 = 22 then
20268: LD_VAR 0 3
20272: PUSH
20273: LD_INT 22
20275: EQUAL
20276: IFFALSE 20286
// sTeleport := true ;
20278: LD_ADDR_EXP 88
20282: PUSH
20283: LD_INT 1
20285: ST_TO_ADDR
// if p3 = 23 then
20286: LD_VAR 0 3
20290: PUSH
20291: LD_INT 23
20293: EQUAL
20294: IFFALSE 20304
// sOilTower := true ;
20296: LD_ADDR_EXP 90
20300: PUSH
20301: LD_INT 1
20303: ST_TO_ADDR
// if p3 = 24 then
20304: LD_VAR 0 3
20308: PUSH
20309: LD_INT 24
20311: EQUAL
20312: IFFALSE 20322
// sShovel := true ;
20314: LD_ADDR_EXP 91
20318: PUSH
20319: LD_INT 1
20321: ST_TO_ADDR
// if p3 = 25 then
20322: LD_VAR 0 3
20326: PUSH
20327: LD_INT 25
20329: EQUAL
20330: IFFALSE 20340
// sSheik := true ;
20332: LD_ADDR_EXP 92
20336: PUSH
20337: LD_INT 1
20339: ST_TO_ADDR
// if p3 = 26 then
20340: LD_VAR 0 3
20344: PUSH
20345: LD_INT 26
20347: EQUAL
20348: IFFALSE 20358
// sEarthquake := true ;
20350: LD_ADDR_EXP 94
20354: PUSH
20355: LD_INT 1
20357: ST_TO_ADDR
// if p3 = 27 then
20358: LD_VAR 0 3
20362: PUSH
20363: LD_INT 27
20365: EQUAL
20366: IFFALSE 20376
// sAI := true ;
20368: LD_ADDR_EXP 95
20372: PUSH
20373: LD_INT 1
20375: ST_TO_ADDR
// if p3 = 28 then
20376: LD_VAR 0 3
20380: PUSH
20381: LD_INT 28
20383: EQUAL
20384: IFFALSE 20394
// sCargo := true ;
20386: LD_ADDR_EXP 98
20390: PUSH
20391: LD_INT 1
20393: ST_TO_ADDR
// if p3 = 29 then
20394: LD_VAR 0 3
20398: PUSH
20399: LD_INT 29
20401: EQUAL
20402: IFFALSE 20412
// sDLaser := true ;
20404: LD_ADDR_EXP 99
20408: PUSH
20409: LD_INT 1
20411: ST_TO_ADDR
// if p3 = 30 then
20412: LD_VAR 0 3
20416: PUSH
20417: LD_INT 30
20419: EQUAL
20420: IFFALSE 20430
// sExchange := true ;
20422: LD_ADDR_EXP 100
20426: PUSH
20427: LD_INT 1
20429: ST_TO_ADDR
// if p3 = 31 then
20430: LD_VAR 0 3
20434: PUSH
20435: LD_INT 31
20437: EQUAL
20438: IFFALSE 20448
// sFac := true ;
20440: LD_ADDR_EXP 101
20444: PUSH
20445: LD_INT 1
20447: ST_TO_ADDR
// if p3 = 32 then
20448: LD_VAR 0 3
20452: PUSH
20453: LD_INT 32
20455: EQUAL
20456: IFFALSE 20466
// sPower := true ;
20458: LD_ADDR_EXP 102
20462: PUSH
20463: LD_INT 1
20465: ST_TO_ADDR
// if p3 = 33 then
20466: LD_VAR 0 3
20470: PUSH
20471: LD_INT 33
20473: EQUAL
20474: IFFALSE 20484
// sRandom := true ;
20476: LD_ADDR_EXP 103
20480: PUSH
20481: LD_INT 1
20483: ST_TO_ADDR
// if p3 = 34 then
20484: LD_VAR 0 3
20488: PUSH
20489: LD_INT 34
20491: EQUAL
20492: IFFALSE 20502
// sShield := true ;
20494: LD_ADDR_EXP 104
20498: PUSH
20499: LD_INT 1
20501: ST_TO_ADDR
// if p3 = 35 then
20502: LD_VAR 0 3
20506: PUSH
20507: LD_INT 35
20509: EQUAL
20510: IFFALSE 20520
// sTime := true ;
20512: LD_ADDR_EXP 105
20516: PUSH
20517: LD_INT 1
20519: ST_TO_ADDR
// if p3 = 36 then
20520: LD_VAR 0 3
20524: PUSH
20525: LD_INT 36
20527: EQUAL
20528: IFFALSE 20538
// sTools := true ;
20530: LD_ADDR_EXP 106
20534: PUSH
20535: LD_INT 1
20537: ST_TO_ADDR
// if p3 = 101 then
20538: LD_VAR 0 3
20542: PUSH
20543: LD_INT 101
20545: EQUAL
20546: IFFALSE 20556
// sSold := true ;
20548: LD_ADDR_EXP 71
20552: PUSH
20553: LD_INT 1
20555: ST_TO_ADDR
// if p3 = 102 then
20556: LD_VAR 0 3
20560: PUSH
20561: LD_INT 102
20563: EQUAL
20564: IFFALSE 20574
// sDiff := true ;
20566: LD_ADDR_EXP 72
20570: PUSH
20571: LD_INT 1
20573: ST_TO_ADDR
// if p3 = 103 then
20574: LD_VAR 0 3
20578: PUSH
20579: LD_INT 103
20581: EQUAL
20582: IFFALSE 20592
// sFog := true ;
20584: LD_ADDR_EXP 75
20588: PUSH
20589: LD_INT 1
20591: ST_TO_ADDR
// if p3 = 104 then
20592: LD_VAR 0 3
20596: PUSH
20597: LD_INT 104
20599: EQUAL
20600: IFFALSE 20610
// sReset := true ;
20602: LD_ADDR_EXP 76
20606: PUSH
20607: LD_INT 1
20609: ST_TO_ADDR
// if p3 = 105 then
20610: LD_VAR 0 3
20614: PUSH
20615: LD_INT 105
20617: EQUAL
20618: IFFALSE 20628
// sSun := true ;
20620: LD_ADDR_EXP 77
20624: PUSH
20625: LD_INT 1
20627: ST_TO_ADDR
// if p3 = 106 then
20628: LD_VAR 0 3
20632: PUSH
20633: LD_INT 106
20635: EQUAL
20636: IFFALSE 20646
// sTiger := true ;
20638: LD_ADDR_EXP 73
20642: PUSH
20643: LD_INT 1
20645: ST_TO_ADDR
// if p3 = 107 then
20646: LD_VAR 0 3
20650: PUSH
20651: LD_INT 107
20653: EQUAL
20654: IFFALSE 20664
// sBomb := true ;
20656: LD_ADDR_EXP 74
20660: PUSH
20661: LD_INT 1
20663: ST_TO_ADDR
// if p3 = 108 then
20664: LD_VAR 0 3
20668: PUSH
20669: LD_INT 108
20671: EQUAL
20672: IFFALSE 20682
// sWound := true ;
20674: LD_ADDR_EXP 82
20678: PUSH
20679: LD_INT 1
20681: ST_TO_ADDR
// if p3 = 109 then
20682: LD_VAR 0 3
20686: PUSH
20687: LD_INT 109
20689: EQUAL
20690: IFFALSE 20700
// sBetray := true ;
20692: LD_ADDR_EXP 86
20696: PUSH
20697: LD_INT 1
20699: ST_TO_ADDR
// if p3 = 110 then
20700: LD_VAR 0 3
20704: PUSH
20705: LD_INT 110
20707: EQUAL
20708: IFFALSE 20718
// sContamin := true ;
20710: LD_ADDR_EXP 87
20714: PUSH
20715: LD_INT 1
20717: ST_TO_ADDR
// if p3 = 111 then
20718: LD_VAR 0 3
20722: PUSH
20723: LD_INT 111
20725: EQUAL
20726: IFFALSE 20736
// sOil := true ;
20728: LD_ADDR_EXP 89
20732: PUSH
20733: LD_INT 1
20735: ST_TO_ADDR
// if p3 = 112 then
20736: LD_VAR 0 3
20740: PUSH
20741: LD_INT 112
20743: EQUAL
20744: IFFALSE 20754
// sStu := true ;
20746: LD_ADDR_EXP 93
20750: PUSH
20751: LD_INT 1
20753: ST_TO_ADDR
// if p3 = 113 then
20754: LD_VAR 0 3
20758: PUSH
20759: LD_INT 113
20761: EQUAL
20762: IFFALSE 20772
// sBazooka := true ;
20764: LD_ADDR_EXP 96
20768: PUSH
20769: LD_INT 1
20771: ST_TO_ADDR
// if p3 = 114 then
20772: LD_VAR 0 3
20776: PUSH
20777: LD_INT 114
20779: EQUAL
20780: IFFALSE 20790
// sMortar := true ;
20782: LD_ADDR_EXP 97
20786: PUSH
20787: LD_INT 1
20789: ST_TO_ADDR
// if p3 = 115 then
20790: LD_VAR 0 3
20794: PUSH
20795: LD_INT 115
20797: EQUAL
20798: IFFALSE 20808
// sRanger := true ;
20800: LD_ADDR_EXP 107
20804: PUSH
20805: LD_INT 1
20807: ST_TO_ADDR
// if p3 = 116 then
20808: LD_VAR 0 3
20812: PUSH
20813: LD_INT 116
20815: EQUAL
20816: IFFALSE 20826
// sComputer := true ;
20818: LD_ADDR_EXP 108
20822: PUSH
20823: LD_INT 1
20825: ST_TO_ADDR
// if p3 = 117 then
20826: LD_VAR 0 3
20830: PUSH
20831: LD_INT 117
20833: EQUAL
20834: IFFALSE 20844
// s30 := true ;
20836: LD_ADDR_EXP 109
20840: PUSH
20841: LD_INT 1
20843: ST_TO_ADDR
// if p3 = 118 then
20844: LD_VAR 0 3
20848: PUSH
20849: LD_INT 118
20851: EQUAL
20852: IFFALSE 20862
// s60 := true ;
20854: LD_ADDR_EXP 110
20858: PUSH
20859: LD_INT 1
20861: ST_TO_ADDR
// end ; if p2 = hack_mode then
20862: LD_VAR 0 2
20866: PUSH
20867: LD_INT 101
20869: EQUAL
20870: IFFALSE 20998
// begin case p3 of 1 :
20872: LD_VAR 0 3
20876: PUSH
20877: LD_INT 1
20879: DOUBLE
20880: EQUAL
20881: IFTRUE 20885
20883: GO 20892
20885: POP
// hHackUnlimitedResources ; 2 :
20886: CALL 33261 0 0
20890: GO 20998
20892: LD_INT 2
20894: DOUBLE
20895: EQUAL
20896: IFTRUE 20900
20898: GO 20907
20900: POP
// hHackSetLevel10 ; 3 :
20901: CALL 33394 0 0
20905: GO 20998
20907: LD_INT 3
20909: DOUBLE
20910: EQUAL
20911: IFTRUE 20915
20913: GO 20922
20915: POP
// hHackSetLevel10YourUnits ; 4 :
20916: CALL 33479 0 0
20920: GO 20998
20922: LD_INT 4
20924: DOUBLE
20925: EQUAL
20926: IFTRUE 20930
20928: GO 20937
20930: POP
// hHackInvincible ; 5 :
20931: CALL 33927 0 0
20935: GO 20998
20937: LD_INT 5
20939: DOUBLE
20940: EQUAL
20941: IFTRUE 20945
20943: GO 20952
20945: POP
// hHackInvisible ; 6 :
20946: CALL 34038 0 0
20950: GO 20998
20952: LD_INT 6
20954: DOUBLE
20955: EQUAL
20956: IFTRUE 20960
20958: GO 20967
20960: POP
// hHackChangeYourSide ; 7 :
20961: CALL 34095 0 0
20965: GO 20998
20967: LD_INT 7
20969: DOUBLE
20970: EQUAL
20971: IFTRUE 20975
20973: GO 20982
20975: POP
// hHackChangeUnitSide ; 8 :
20976: CALL 34137 0 0
20980: GO 20998
20982: LD_INT 8
20984: DOUBLE
20985: EQUAL
20986: IFTRUE 20990
20988: GO 20997
20990: POP
// hHackFog ; end ;
20991: CALL 34238 0 0
20995: GO 20998
20997: POP
// end ; if p2 = game_save_mode then
20998: LD_VAR 0 2
21002: PUSH
21003: LD_INT 102
21005: EQUAL
21006: IFFALSE 21063
// begin if p3 = 1 then
21008: LD_VAR 0 3
21012: PUSH
21013: LD_INT 1
21015: EQUAL
21016: IFFALSE 21028
// globalGameSaveCounter := p4 ;
21018: LD_ADDR_EXP 53
21022: PUSH
21023: LD_VAR 0 4
21027: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
21028: LD_VAR 0 3
21032: PUSH
21033: LD_INT 2
21035: EQUAL
21036: IFFALSE 21044
21038: PUSH
21039: LD_EXP 53
21043: AND
21044: IFFALSE 21063
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21046: LD_STRING setGameSaveCounter(
21048: PUSH
21049: LD_EXP 53
21053: STR
21054: PUSH
21055: LD_STRING )
21057: STR
21058: PPUSH
21059: CALL_OW 559
// end ; end ;
21063: LD_VAR 0 7
21067: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
21068: LD_INT 0
21070: PPUSH
// streamModeActive := false ;
21071: LD_ADDR_EXP 54
21075: PUSH
21076: LD_INT 0
21078: ST_TO_ADDR
// normalCounter := 36 ;
21079: LD_ADDR_EXP 55
21083: PUSH
21084: LD_INT 36
21086: ST_TO_ADDR
// hardcoreCounter := 18 ;
21087: LD_ADDR_EXP 56
21091: PUSH
21092: LD_INT 18
21094: ST_TO_ADDR
// sRocket := false ;
21095: LD_ADDR_EXP 59
21099: PUSH
21100: LD_INT 0
21102: ST_TO_ADDR
// sSpeed := false ;
21103: LD_ADDR_EXP 58
21107: PUSH
21108: LD_INT 0
21110: ST_TO_ADDR
// sEngine := false ;
21111: LD_ADDR_EXP 60
21115: PUSH
21116: LD_INT 0
21118: ST_TO_ADDR
// sSpec := false ;
21119: LD_ADDR_EXP 57
21123: PUSH
21124: LD_INT 0
21126: ST_TO_ADDR
// sLevel := false ;
21127: LD_ADDR_EXP 61
21131: PUSH
21132: LD_INT 0
21134: ST_TO_ADDR
// sArmoury := false ;
21135: LD_ADDR_EXP 62
21139: PUSH
21140: LD_INT 0
21142: ST_TO_ADDR
// sRadar := false ;
21143: LD_ADDR_EXP 63
21147: PUSH
21148: LD_INT 0
21150: ST_TO_ADDR
// sBunker := false ;
21151: LD_ADDR_EXP 64
21155: PUSH
21156: LD_INT 0
21158: ST_TO_ADDR
// sHack := false ;
21159: LD_ADDR_EXP 65
21163: PUSH
21164: LD_INT 0
21166: ST_TO_ADDR
// sFire := false ;
21167: LD_ADDR_EXP 66
21171: PUSH
21172: LD_INT 0
21174: ST_TO_ADDR
// sRefresh := false ;
21175: LD_ADDR_EXP 67
21179: PUSH
21180: LD_INT 0
21182: ST_TO_ADDR
// sExp := false ;
21183: LD_ADDR_EXP 68
21187: PUSH
21188: LD_INT 0
21190: ST_TO_ADDR
// sDepot := false ;
21191: LD_ADDR_EXP 69
21195: PUSH
21196: LD_INT 0
21198: ST_TO_ADDR
// sFlag := false ;
21199: LD_ADDR_EXP 70
21203: PUSH
21204: LD_INT 0
21206: ST_TO_ADDR
// sKamikadze := false ;
21207: LD_ADDR_EXP 78
21211: PUSH
21212: LD_INT 0
21214: ST_TO_ADDR
// sTroll := false ;
21215: LD_ADDR_EXP 79
21219: PUSH
21220: LD_INT 0
21222: ST_TO_ADDR
// sSlow := false ;
21223: LD_ADDR_EXP 80
21227: PUSH
21228: LD_INT 0
21230: ST_TO_ADDR
// sLack := false ;
21231: LD_ADDR_EXP 81
21235: PUSH
21236: LD_INT 0
21238: ST_TO_ADDR
// sTank := false ;
21239: LD_ADDR_EXP 83
21243: PUSH
21244: LD_INT 0
21246: ST_TO_ADDR
// sRemote := false ;
21247: LD_ADDR_EXP 84
21251: PUSH
21252: LD_INT 0
21254: ST_TO_ADDR
// sPowell := false ;
21255: LD_ADDR_EXP 85
21259: PUSH
21260: LD_INT 0
21262: ST_TO_ADDR
// sTeleport := false ;
21263: LD_ADDR_EXP 88
21267: PUSH
21268: LD_INT 0
21270: ST_TO_ADDR
// sOilTower := false ;
21271: LD_ADDR_EXP 90
21275: PUSH
21276: LD_INT 0
21278: ST_TO_ADDR
// sShovel := false ;
21279: LD_ADDR_EXP 91
21283: PUSH
21284: LD_INT 0
21286: ST_TO_ADDR
// sSheik := false ;
21287: LD_ADDR_EXP 92
21291: PUSH
21292: LD_INT 0
21294: ST_TO_ADDR
// sEarthquake := false ;
21295: LD_ADDR_EXP 94
21299: PUSH
21300: LD_INT 0
21302: ST_TO_ADDR
// sAI := false ;
21303: LD_ADDR_EXP 95
21307: PUSH
21308: LD_INT 0
21310: ST_TO_ADDR
// sCargo := false ;
21311: LD_ADDR_EXP 98
21315: PUSH
21316: LD_INT 0
21318: ST_TO_ADDR
// sDLaser := false ;
21319: LD_ADDR_EXP 99
21323: PUSH
21324: LD_INT 0
21326: ST_TO_ADDR
// sExchange := false ;
21327: LD_ADDR_EXP 100
21331: PUSH
21332: LD_INT 0
21334: ST_TO_ADDR
// sFac := false ;
21335: LD_ADDR_EXP 101
21339: PUSH
21340: LD_INT 0
21342: ST_TO_ADDR
// sPower := false ;
21343: LD_ADDR_EXP 102
21347: PUSH
21348: LD_INT 0
21350: ST_TO_ADDR
// sRandom := false ;
21351: LD_ADDR_EXP 103
21355: PUSH
21356: LD_INT 0
21358: ST_TO_ADDR
// sShield := false ;
21359: LD_ADDR_EXP 104
21363: PUSH
21364: LD_INT 0
21366: ST_TO_ADDR
// sTime := false ;
21367: LD_ADDR_EXP 105
21371: PUSH
21372: LD_INT 0
21374: ST_TO_ADDR
// sTools := false ;
21375: LD_ADDR_EXP 106
21379: PUSH
21380: LD_INT 0
21382: ST_TO_ADDR
// sSold := false ;
21383: LD_ADDR_EXP 71
21387: PUSH
21388: LD_INT 0
21390: ST_TO_ADDR
// sDiff := false ;
21391: LD_ADDR_EXP 72
21395: PUSH
21396: LD_INT 0
21398: ST_TO_ADDR
// sFog := false ;
21399: LD_ADDR_EXP 75
21403: PUSH
21404: LD_INT 0
21406: ST_TO_ADDR
// sReset := false ;
21407: LD_ADDR_EXP 76
21411: PUSH
21412: LD_INT 0
21414: ST_TO_ADDR
// sSun := false ;
21415: LD_ADDR_EXP 77
21419: PUSH
21420: LD_INT 0
21422: ST_TO_ADDR
// sTiger := false ;
21423: LD_ADDR_EXP 73
21427: PUSH
21428: LD_INT 0
21430: ST_TO_ADDR
// sBomb := false ;
21431: LD_ADDR_EXP 74
21435: PUSH
21436: LD_INT 0
21438: ST_TO_ADDR
// sWound := false ;
21439: LD_ADDR_EXP 82
21443: PUSH
21444: LD_INT 0
21446: ST_TO_ADDR
// sBetray := false ;
21447: LD_ADDR_EXP 86
21451: PUSH
21452: LD_INT 0
21454: ST_TO_ADDR
// sContamin := false ;
21455: LD_ADDR_EXP 87
21459: PUSH
21460: LD_INT 0
21462: ST_TO_ADDR
// sOil := false ;
21463: LD_ADDR_EXP 89
21467: PUSH
21468: LD_INT 0
21470: ST_TO_ADDR
// sStu := false ;
21471: LD_ADDR_EXP 93
21475: PUSH
21476: LD_INT 0
21478: ST_TO_ADDR
// sBazooka := false ;
21479: LD_ADDR_EXP 96
21483: PUSH
21484: LD_INT 0
21486: ST_TO_ADDR
// sMortar := false ;
21487: LD_ADDR_EXP 97
21491: PUSH
21492: LD_INT 0
21494: ST_TO_ADDR
// sRanger := false ;
21495: LD_ADDR_EXP 107
21499: PUSH
21500: LD_INT 0
21502: ST_TO_ADDR
// sComputer := false ;
21503: LD_ADDR_EXP 108
21507: PUSH
21508: LD_INT 0
21510: ST_TO_ADDR
// s30 := false ;
21511: LD_ADDR_EXP 109
21515: PUSH
21516: LD_INT 0
21518: ST_TO_ADDR
// s60 := false ;
21519: LD_ADDR_EXP 110
21523: PUSH
21524: LD_INT 0
21526: ST_TO_ADDR
// end ;
21527: LD_VAR 0 1
21531: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21532: LD_INT 0
21534: PPUSH
21535: PPUSH
21536: PPUSH
21537: PPUSH
21538: PPUSH
21539: PPUSH
21540: PPUSH
// result := [ ] ;
21541: LD_ADDR_VAR 0 2
21545: PUSH
21546: EMPTY
21547: ST_TO_ADDR
// if campaign_id = 1 then
21548: LD_OWVAR 69
21552: PUSH
21553: LD_INT 1
21555: EQUAL
21556: IFFALSE 24722
// begin case mission_number of 1 :
21558: LD_OWVAR 70
21562: PUSH
21563: LD_INT 1
21565: DOUBLE
21566: EQUAL
21567: IFTRUE 21571
21569: GO 21647
21571: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21572: LD_ADDR_VAR 0 2
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: LD_INT 4
21582: PUSH
21583: LD_INT 11
21585: PUSH
21586: LD_INT 12
21588: PUSH
21589: LD_INT 15
21591: PUSH
21592: LD_INT 16
21594: PUSH
21595: LD_INT 22
21597: PUSH
21598: LD_INT 23
21600: PUSH
21601: LD_INT 26
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 101
21617: PUSH
21618: LD_INT 102
21620: PUSH
21621: LD_INT 106
21623: PUSH
21624: LD_INT 116
21626: PUSH
21627: LD_INT 117
21629: PUSH
21630: LD_INT 118
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: ST_TO_ADDR
21645: GO 24720
21647: LD_INT 2
21649: DOUBLE
21650: EQUAL
21651: IFTRUE 21655
21653: GO 21739
21655: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21656: LD_ADDR_VAR 0 2
21660: PUSH
21661: LD_INT 2
21663: PUSH
21664: LD_INT 4
21666: PUSH
21667: LD_INT 11
21669: PUSH
21670: LD_INT 12
21672: PUSH
21673: LD_INT 15
21675: PUSH
21676: LD_INT 16
21678: PUSH
21679: LD_INT 22
21681: PUSH
21682: LD_INT 23
21684: PUSH
21685: LD_INT 26
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 101
21701: PUSH
21702: LD_INT 102
21704: PUSH
21705: LD_INT 105
21707: PUSH
21708: LD_INT 106
21710: PUSH
21711: LD_INT 108
21713: PUSH
21714: LD_INT 116
21716: PUSH
21717: LD_INT 117
21719: PUSH
21720: LD_INT 118
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: ST_TO_ADDR
21737: GO 24720
21739: LD_INT 3
21741: DOUBLE
21742: EQUAL
21743: IFTRUE 21747
21745: GO 21835
21747: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21748: LD_ADDR_VAR 0 2
21752: PUSH
21753: LD_INT 2
21755: PUSH
21756: LD_INT 4
21758: PUSH
21759: LD_INT 5
21761: PUSH
21762: LD_INT 11
21764: PUSH
21765: LD_INT 12
21767: PUSH
21768: LD_INT 15
21770: PUSH
21771: LD_INT 16
21773: PUSH
21774: LD_INT 22
21776: PUSH
21777: LD_INT 26
21779: PUSH
21780: LD_INT 36
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 101
21797: PUSH
21798: LD_INT 102
21800: PUSH
21801: LD_INT 105
21803: PUSH
21804: LD_INT 106
21806: PUSH
21807: LD_INT 108
21809: PUSH
21810: LD_INT 116
21812: PUSH
21813: LD_INT 117
21815: PUSH
21816: LD_INT 118
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: ST_TO_ADDR
21833: GO 24720
21835: LD_INT 4
21837: DOUBLE
21838: EQUAL
21839: IFTRUE 21843
21841: GO 21939
21843: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21844: LD_ADDR_VAR 0 2
21848: PUSH
21849: LD_INT 2
21851: PUSH
21852: LD_INT 4
21854: PUSH
21855: LD_INT 5
21857: PUSH
21858: LD_INT 8
21860: PUSH
21861: LD_INT 11
21863: PUSH
21864: LD_INT 12
21866: PUSH
21867: LD_INT 15
21869: PUSH
21870: LD_INT 16
21872: PUSH
21873: LD_INT 22
21875: PUSH
21876: LD_INT 23
21878: PUSH
21879: LD_INT 26
21881: PUSH
21882: LD_INT 36
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 101
21901: PUSH
21902: LD_INT 102
21904: PUSH
21905: LD_INT 105
21907: PUSH
21908: LD_INT 106
21910: PUSH
21911: LD_INT 108
21913: PUSH
21914: LD_INT 116
21916: PUSH
21917: LD_INT 117
21919: PUSH
21920: LD_INT 118
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: ST_TO_ADDR
21937: GO 24720
21939: LD_INT 5
21941: DOUBLE
21942: EQUAL
21943: IFTRUE 21947
21945: GO 22059
21947: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21948: LD_ADDR_VAR 0 2
21952: PUSH
21953: LD_INT 2
21955: PUSH
21956: LD_INT 4
21958: PUSH
21959: LD_INT 5
21961: PUSH
21962: LD_INT 6
21964: PUSH
21965: LD_INT 8
21967: PUSH
21968: LD_INT 11
21970: PUSH
21971: LD_INT 12
21973: PUSH
21974: LD_INT 15
21976: PUSH
21977: LD_INT 16
21979: PUSH
21980: LD_INT 22
21982: PUSH
21983: LD_INT 23
21985: PUSH
21986: LD_INT 25
21988: PUSH
21989: LD_INT 26
21991: PUSH
21992: LD_INT 36
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 101
22013: PUSH
22014: LD_INT 102
22016: PUSH
22017: LD_INT 105
22019: PUSH
22020: LD_INT 106
22022: PUSH
22023: LD_INT 108
22025: PUSH
22026: LD_INT 109
22028: PUSH
22029: LD_INT 112
22031: PUSH
22032: LD_INT 116
22034: PUSH
22035: LD_INT 117
22037: PUSH
22038: LD_INT 118
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: ST_TO_ADDR
22057: GO 24720
22059: LD_INT 6
22061: DOUBLE
22062: EQUAL
22063: IFTRUE 22067
22065: GO 22199
22067: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
22068: LD_ADDR_VAR 0 2
22072: PUSH
22073: LD_INT 2
22075: PUSH
22076: LD_INT 4
22078: PUSH
22079: LD_INT 5
22081: PUSH
22082: LD_INT 6
22084: PUSH
22085: LD_INT 8
22087: PUSH
22088: LD_INT 11
22090: PUSH
22091: LD_INT 12
22093: PUSH
22094: LD_INT 15
22096: PUSH
22097: LD_INT 16
22099: PUSH
22100: LD_INT 20
22102: PUSH
22103: LD_INT 21
22105: PUSH
22106: LD_INT 22
22108: PUSH
22109: LD_INT 23
22111: PUSH
22112: LD_INT 25
22114: PUSH
22115: LD_INT 26
22117: PUSH
22118: LD_INT 30
22120: PUSH
22121: LD_INT 31
22123: PUSH
22124: LD_INT 32
22126: PUSH
22127: LD_INT 36
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 101
22153: PUSH
22154: LD_INT 102
22156: PUSH
22157: LD_INT 105
22159: PUSH
22160: LD_INT 106
22162: PUSH
22163: LD_INT 108
22165: PUSH
22166: LD_INT 109
22168: PUSH
22169: LD_INT 112
22171: PUSH
22172: LD_INT 116
22174: PUSH
22175: LD_INT 117
22177: PUSH
22178: LD_INT 118
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: ST_TO_ADDR
22197: GO 24720
22199: LD_INT 7
22201: DOUBLE
22202: EQUAL
22203: IFTRUE 22207
22205: GO 22319
22207: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
22208: LD_ADDR_VAR 0 2
22212: PUSH
22213: LD_INT 2
22215: PUSH
22216: LD_INT 4
22218: PUSH
22219: LD_INT 5
22221: PUSH
22222: LD_INT 7
22224: PUSH
22225: LD_INT 11
22227: PUSH
22228: LD_INT 12
22230: PUSH
22231: LD_INT 15
22233: PUSH
22234: LD_INT 16
22236: PUSH
22237: LD_INT 20
22239: PUSH
22240: LD_INT 21
22242: PUSH
22243: LD_INT 22
22245: PUSH
22246: LD_INT 23
22248: PUSH
22249: LD_INT 25
22251: PUSH
22252: LD_INT 26
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 101
22273: PUSH
22274: LD_INT 102
22276: PUSH
22277: LD_INT 103
22279: PUSH
22280: LD_INT 105
22282: PUSH
22283: LD_INT 106
22285: PUSH
22286: LD_INT 108
22288: PUSH
22289: LD_INT 112
22291: PUSH
22292: LD_INT 116
22294: PUSH
22295: LD_INT 117
22297: PUSH
22298: LD_INT 118
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: ST_TO_ADDR
22317: GO 24720
22319: LD_INT 8
22321: DOUBLE
22322: EQUAL
22323: IFTRUE 22327
22325: GO 22467
22327: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22328: LD_ADDR_VAR 0 2
22332: PUSH
22333: LD_INT 2
22335: PUSH
22336: LD_INT 4
22338: PUSH
22339: LD_INT 5
22341: PUSH
22342: LD_INT 6
22344: PUSH
22345: LD_INT 7
22347: PUSH
22348: LD_INT 8
22350: PUSH
22351: LD_INT 11
22353: PUSH
22354: LD_INT 12
22356: PUSH
22357: LD_INT 15
22359: PUSH
22360: LD_INT 16
22362: PUSH
22363: LD_INT 20
22365: PUSH
22366: LD_INT 21
22368: PUSH
22369: LD_INT 22
22371: PUSH
22372: LD_INT 23
22374: PUSH
22375: LD_INT 25
22377: PUSH
22378: LD_INT 26
22380: PUSH
22381: LD_INT 30
22383: PUSH
22384: LD_INT 31
22386: PUSH
22387: LD_INT 32
22389: PUSH
22390: LD_INT 36
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 101
22417: PUSH
22418: LD_INT 102
22420: PUSH
22421: LD_INT 103
22423: PUSH
22424: LD_INT 105
22426: PUSH
22427: LD_INT 106
22429: PUSH
22430: LD_INT 108
22432: PUSH
22433: LD_INT 109
22435: PUSH
22436: LD_INT 112
22438: PUSH
22439: LD_INT 116
22441: PUSH
22442: LD_INT 117
22444: PUSH
22445: LD_INT 118
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: ST_TO_ADDR
22465: GO 24720
22467: LD_INT 9
22469: DOUBLE
22470: EQUAL
22471: IFTRUE 22475
22473: GO 22623
22475: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22476: LD_ADDR_VAR 0 2
22480: PUSH
22481: LD_INT 2
22483: PUSH
22484: LD_INT 4
22486: PUSH
22487: LD_INT 5
22489: PUSH
22490: LD_INT 6
22492: PUSH
22493: LD_INT 7
22495: PUSH
22496: LD_INT 8
22498: PUSH
22499: LD_INT 11
22501: PUSH
22502: LD_INT 12
22504: PUSH
22505: LD_INT 15
22507: PUSH
22508: LD_INT 16
22510: PUSH
22511: LD_INT 20
22513: PUSH
22514: LD_INT 21
22516: PUSH
22517: LD_INT 22
22519: PUSH
22520: LD_INT 23
22522: PUSH
22523: LD_INT 25
22525: PUSH
22526: LD_INT 26
22528: PUSH
22529: LD_INT 28
22531: PUSH
22532: LD_INT 30
22534: PUSH
22535: LD_INT 31
22537: PUSH
22538: LD_INT 32
22540: PUSH
22541: LD_INT 36
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 101
22569: PUSH
22570: LD_INT 102
22572: PUSH
22573: LD_INT 103
22575: PUSH
22576: LD_INT 105
22578: PUSH
22579: LD_INT 106
22581: PUSH
22582: LD_INT 108
22584: PUSH
22585: LD_INT 109
22587: PUSH
22588: LD_INT 112
22590: PUSH
22591: LD_INT 114
22593: PUSH
22594: LD_INT 116
22596: PUSH
22597: LD_INT 117
22599: PUSH
22600: LD_INT 118
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: ST_TO_ADDR
22621: GO 24720
22623: LD_INT 10
22625: DOUBLE
22626: EQUAL
22627: IFTRUE 22631
22629: GO 22827
22631: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22632: LD_ADDR_VAR 0 2
22636: PUSH
22637: LD_INT 2
22639: PUSH
22640: LD_INT 4
22642: PUSH
22643: LD_INT 5
22645: PUSH
22646: LD_INT 6
22648: PUSH
22649: LD_INT 7
22651: PUSH
22652: LD_INT 8
22654: PUSH
22655: LD_INT 9
22657: PUSH
22658: LD_INT 10
22660: PUSH
22661: LD_INT 11
22663: PUSH
22664: LD_INT 12
22666: PUSH
22667: LD_INT 13
22669: PUSH
22670: LD_INT 14
22672: PUSH
22673: LD_INT 15
22675: PUSH
22676: LD_INT 16
22678: PUSH
22679: LD_INT 17
22681: PUSH
22682: LD_INT 18
22684: PUSH
22685: LD_INT 19
22687: PUSH
22688: LD_INT 20
22690: PUSH
22691: LD_INT 21
22693: PUSH
22694: LD_INT 22
22696: PUSH
22697: LD_INT 23
22699: PUSH
22700: LD_INT 24
22702: PUSH
22703: LD_INT 25
22705: PUSH
22706: LD_INT 26
22708: PUSH
22709: LD_INT 28
22711: PUSH
22712: LD_INT 30
22714: PUSH
22715: LD_INT 31
22717: PUSH
22718: LD_INT 32
22720: PUSH
22721: LD_INT 36
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 101
22757: PUSH
22758: LD_INT 102
22760: PUSH
22761: LD_INT 103
22763: PUSH
22764: LD_INT 104
22766: PUSH
22767: LD_INT 105
22769: PUSH
22770: LD_INT 106
22772: PUSH
22773: LD_INT 107
22775: PUSH
22776: LD_INT 108
22778: PUSH
22779: LD_INT 109
22781: PUSH
22782: LD_INT 110
22784: PUSH
22785: LD_INT 111
22787: PUSH
22788: LD_INT 112
22790: PUSH
22791: LD_INT 114
22793: PUSH
22794: LD_INT 116
22796: PUSH
22797: LD_INT 117
22799: PUSH
22800: LD_INT 118
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: ST_TO_ADDR
22825: GO 24720
22827: LD_INT 11
22829: DOUBLE
22830: EQUAL
22831: IFTRUE 22835
22833: GO 23039
22835: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22836: LD_ADDR_VAR 0 2
22840: PUSH
22841: LD_INT 2
22843: PUSH
22844: LD_INT 3
22846: PUSH
22847: LD_INT 4
22849: PUSH
22850: LD_INT 5
22852: PUSH
22853: LD_INT 6
22855: PUSH
22856: LD_INT 7
22858: PUSH
22859: LD_INT 8
22861: PUSH
22862: LD_INT 9
22864: PUSH
22865: LD_INT 10
22867: PUSH
22868: LD_INT 11
22870: PUSH
22871: LD_INT 12
22873: PUSH
22874: LD_INT 13
22876: PUSH
22877: LD_INT 14
22879: PUSH
22880: LD_INT 15
22882: PUSH
22883: LD_INT 16
22885: PUSH
22886: LD_INT 17
22888: PUSH
22889: LD_INT 18
22891: PUSH
22892: LD_INT 19
22894: PUSH
22895: LD_INT 20
22897: PUSH
22898: LD_INT 21
22900: PUSH
22901: LD_INT 22
22903: PUSH
22904: LD_INT 23
22906: PUSH
22907: LD_INT 24
22909: PUSH
22910: LD_INT 25
22912: PUSH
22913: LD_INT 26
22915: PUSH
22916: LD_INT 28
22918: PUSH
22919: LD_INT 30
22921: PUSH
22922: LD_INT 31
22924: PUSH
22925: LD_INT 32
22927: PUSH
22928: LD_INT 34
22930: PUSH
22931: LD_INT 36
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 101
22969: PUSH
22970: LD_INT 102
22972: PUSH
22973: LD_INT 103
22975: PUSH
22976: LD_INT 104
22978: PUSH
22979: LD_INT 105
22981: PUSH
22982: LD_INT 106
22984: PUSH
22985: LD_INT 107
22987: PUSH
22988: LD_INT 108
22990: PUSH
22991: LD_INT 109
22993: PUSH
22994: LD_INT 110
22996: PUSH
22997: LD_INT 111
22999: PUSH
23000: LD_INT 112
23002: PUSH
23003: LD_INT 114
23005: PUSH
23006: LD_INT 116
23008: PUSH
23009: LD_INT 117
23011: PUSH
23012: LD_INT 118
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: ST_TO_ADDR
23037: GO 24720
23039: LD_INT 12
23041: DOUBLE
23042: EQUAL
23043: IFTRUE 23047
23045: GO 23267
23047: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23048: LD_ADDR_VAR 0 2
23052: PUSH
23053: LD_INT 1
23055: PUSH
23056: LD_INT 2
23058: PUSH
23059: LD_INT 3
23061: PUSH
23062: LD_INT 4
23064: PUSH
23065: LD_INT 5
23067: PUSH
23068: LD_INT 6
23070: PUSH
23071: LD_INT 7
23073: PUSH
23074: LD_INT 8
23076: PUSH
23077: LD_INT 9
23079: PUSH
23080: LD_INT 10
23082: PUSH
23083: LD_INT 11
23085: PUSH
23086: LD_INT 12
23088: PUSH
23089: LD_INT 13
23091: PUSH
23092: LD_INT 14
23094: PUSH
23095: LD_INT 15
23097: PUSH
23098: LD_INT 16
23100: PUSH
23101: LD_INT 17
23103: PUSH
23104: LD_INT 18
23106: PUSH
23107: LD_INT 19
23109: PUSH
23110: LD_INT 20
23112: PUSH
23113: LD_INT 21
23115: PUSH
23116: LD_INT 22
23118: PUSH
23119: LD_INT 23
23121: PUSH
23122: LD_INT 24
23124: PUSH
23125: LD_INT 25
23127: PUSH
23128: LD_INT 26
23130: PUSH
23131: LD_INT 27
23133: PUSH
23134: LD_INT 28
23136: PUSH
23137: LD_INT 30
23139: PUSH
23140: LD_INT 31
23142: PUSH
23143: LD_INT 32
23145: PUSH
23146: LD_INT 33
23148: PUSH
23149: LD_INT 34
23151: PUSH
23152: LD_INT 36
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 101
23193: PUSH
23194: LD_INT 102
23196: PUSH
23197: LD_INT 103
23199: PUSH
23200: LD_INT 104
23202: PUSH
23203: LD_INT 105
23205: PUSH
23206: LD_INT 106
23208: PUSH
23209: LD_INT 107
23211: PUSH
23212: LD_INT 108
23214: PUSH
23215: LD_INT 109
23217: PUSH
23218: LD_INT 110
23220: PUSH
23221: LD_INT 111
23223: PUSH
23224: LD_INT 112
23226: PUSH
23227: LD_INT 113
23229: PUSH
23230: LD_INT 114
23232: PUSH
23233: LD_INT 116
23235: PUSH
23236: LD_INT 117
23238: PUSH
23239: LD_INT 118
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: ST_TO_ADDR
23265: GO 24720
23267: LD_INT 13
23269: DOUBLE
23270: EQUAL
23271: IFTRUE 23275
23273: GO 23483
23275: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23276: LD_ADDR_VAR 0 2
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: LD_INT 2
23286: PUSH
23287: LD_INT 3
23289: PUSH
23290: LD_INT 4
23292: PUSH
23293: LD_INT 5
23295: PUSH
23296: LD_INT 8
23298: PUSH
23299: LD_INT 9
23301: PUSH
23302: LD_INT 10
23304: PUSH
23305: LD_INT 11
23307: PUSH
23308: LD_INT 12
23310: PUSH
23311: LD_INT 14
23313: PUSH
23314: LD_INT 15
23316: PUSH
23317: LD_INT 16
23319: PUSH
23320: LD_INT 17
23322: PUSH
23323: LD_INT 18
23325: PUSH
23326: LD_INT 19
23328: PUSH
23329: LD_INT 20
23331: PUSH
23332: LD_INT 21
23334: PUSH
23335: LD_INT 22
23337: PUSH
23338: LD_INT 23
23340: PUSH
23341: LD_INT 24
23343: PUSH
23344: LD_INT 25
23346: PUSH
23347: LD_INT 26
23349: PUSH
23350: LD_INT 27
23352: PUSH
23353: LD_INT 28
23355: PUSH
23356: LD_INT 30
23358: PUSH
23359: LD_INT 31
23361: PUSH
23362: LD_INT 32
23364: PUSH
23365: LD_INT 33
23367: PUSH
23368: LD_INT 34
23370: PUSH
23371: LD_INT 36
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 101
23409: PUSH
23410: LD_INT 102
23412: PUSH
23413: LD_INT 103
23415: PUSH
23416: LD_INT 104
23418: PUSH
23419: LD_INT 105
23421: PUSH
23422: LD_INT 106
23424: PUSH
23425: LD_INT 107
23427: PUSH
23428: LD_INT 108
23430: PUSH
23431: LD_INT 109
23433: PUSH
23434: LD_INT 110
23436: PUSH
23437: LD_INT 111
23439: PUSH
23440: LD_INT 112
23442: PUSH
23443: LD_INT 113
23445: PUSH
23446: LD_INT 114
23448: PUSH
23449: LD_INT 116
23451: PUSH
23452: LD_INT 117
23454: PUSH
23455: LD_INT 118
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: ST_TO_ADDR
23481: GO 24720
23483: LD_INT 14
23485: DOUBLE
23486: EQUAL
23487: IFTRUE 23491
23489: GO 23715
23491: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23492: LD_ADDR_VAR 0 2
23496: PUSH
23497: LD_INT 1
23499: PUSH
23500: LD_INT 2
23502: PUSH
23503: LD_INT 3
23505: PUSH
23506: LD_INT 4
23508: PUSH
23509: LD_INT 5
23511: PUSH
23512: LD_INT 6
23514: PUSH
23515: LD_INT 7
23517: PUSH
23518: LD_INT 8
23520: PUSH
23521: LD_INT 9
23523: PUSH
23524: LD_INT 10
23526: PUSH
23527: LD_INT 11
23529: PUSH
23530: LD_INT 12
23532: PUSH
23533: LD_INT 13
23535: PUSH
23536: LD_INT 14
23538: PUSH
23539: LD_INT 15
23541: PUSH
23542: LD_INT 16
23544: PUSH
23545: LD_INT 17
23547: PUSH
23548: LD_INT 18
23550: PUSH
23551: LD_INT 19
23553: PUSH
23554: LD_INT 20
23556: PUSH
23557: LD_INT 21
23559: PUSH
23560: LD_INT 22
23562: PUSH
23563: LD_INT 23
23565: PUSH
23566: LD_INT 24
23568: PUSH
23569: LD_INT 25
23571: PUSH
23572: LD_INT 26
23574: PUSH
23575: LD_INT 27
23577: PUSH
23578: LD_INT 28
23580: PUSH
23581: LD_INT 29
23583: PUSH
23584: LD_INT 30
23586: PUSH
23587: LD_INT 31
23589: PUSH
23590: LD_INT 32
23592: PUSH
23593: LD_INT 33
23595: PUSH
23596: LD_INT 34
23598: PUSH
23599: LD_INT 36
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 101
23641: PUSH
23642: LD_INT 102
23644: PUSH
23645: LD_INT 103
23647: PUSH
23648: LD_INT 104
23650: PUSH
23651: LD_INT 105
23653: PUSH
23654: LD_INT 106
23656: PUSH
23657: LD_INT 107
23659: PUSH
23660: LD_INT 108
23662: PUSH
23663: LD_INT 109
23665: PUSH
23666: LD_INT 110
23668: PUSH
23669: LD_INT 111
23671: PUSH
23672: LD_INT 112
23674: PUSH
23675: LD_INT 113
23677: PUSH
23678: LD_INT 114
23680: PUSH
23681: LD_INT 116
23683: PUSH
23684: LD_INT 117
23686: PUSH
23687: LD_INT 118
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: ST_TO_ADDR
23713: GO 24720
23715: LD_INT 15
23717: DOUBLE
23718: EQUAL
23719: IFTRUE 23723
23721: GO 23947
23723: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23724: LD_ADDR_VAR 0 2
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: LD_INT 2
23734: PUSH
23735: LD_INT 3
23737: PUSH
23738: LD_INT 4
23740: PUSH
23741: LD_INT 5
23743: PUSH
23744: LD_INT 6
23746: PUSH
23747: LD_INT 7
23749: PUSH
23750: LD_INT 8
23752: PUSH
23753: LD_INT 9
23755: PUSH
23756: LD_INT 10
23758: PUSH
23759: LD_INT 11
23761: PUSH
23762: LD_INT 12
23764: PUSH
23765: LD_INT 13
23767: PUSH
23768: LD_INT 14
23770: PUSH
23771: LD_INT 15
23773: PUSH
23774: LD_INT 16
23776: PUSH
23777: LD_INT 17
23779: PUSH
23780: LD_INT 18
23782: PUSH
23783: LD_INT 19
23785: PUSH
23786: LD_INT 20
23788: PUSH
23789: LD_INT 21
23791: PUSH
23792: LD_INT 22
23794: PUSH
23795: LD_INT 23
23797: PUSH
23798: LD_INT 24
23800: PUSH
23801: LD_INT 25
23803: PUSH
23804: LD_INT 26
23806: PUSH
23807: LD_INT 27
23809: PUSH
23810: LD_INT 28
23812: PUSH
23813: LD_INT 29
23815: PUSH
23816: LD_INT 30
23818: PUSH
23819: LD_INT 31
23821: PUSH
23822: LD_INT 32
23824: PUSH
23825: LD_INT 33
23827: PUSH
23828: LD_INT 34
23830: PUSH
23831: LD_INT 36
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 101
23873: PUSH
23874: LD_INT 102
23876: PUSH
23877: LD_INT 103
23879: PUSH
23880: LD_INT 104
23882: PUSH
23883: LD_INT 105
23885: PUSH
23886: LD_INT 106
23888: PUSH
23889: LD_INT 107
23891: PUSH
23892: LD_INT 108
23894: PUSH
23895: LD_INT 109
23897: PUSH
23898: LD_INT 110
23900: PUSH
23901: LD_INT 111
23903: PUSH
23904: LD_INT 112
23906: PUSH
23907: LD_INT 113
23909: PUSH
23910: LD_INT 114
23912: PUSH
23913: LD_INT 116
23915: PUSH
23916: LD_INT 117
23918: PUSH
23919: LD_INT 118
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: ST_TO_ADDR
23945: GO 24720
23947: LD_INT 16
23949: DOUBLE
23950: EQUAL
23951: IFTRUE 23955
23953: GO 24091
23955: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23956: LD_ADDR_VAR 0 2
23960: PUSH
23961: LD_INT 2
23963: PUSH
23964: LD_INT 4
23966: PUSH
23967: LD_INT 5
23969: PUSH
23970: LD_INT 7
23972: PUSH
23973: LD_INT 11
23975: PUSH
23976: LD_INT 12
23978: PUSH
23979: LD_INT 15
23981: PUSH
23982: LD_INT 16
23984: PUSH
23985: LD_INT 20
23987: PUSH
23988: LD_INT 21
23990: PUSH
23991: LD_INT 22
23993: PUSH
23994: LD_INT 23
23996: PUSH
23997: LD_INT 25
23999: PUSH
24000: LD_INT 26
24002: PUSH
24003: LD_INT 30
24005: PUSH
24006: LD_INT 31
24008: PUSH
24009: LD_INT 32
24011: PUSH
24012: LD_INT 33
24014: PUSH
24015: LD_INT 34
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 101
24041: PUSH
24042: LD_INT 102
24044: PUSH
24045: LD_INT 103
24047: PUSH
24048: LD_INT 106
24050: PUSH
24051: LD_INT 108
24053: PUSH
24054: LD_INT 112
24056: PUSH
24057: LD_INT 113
24059: PUSH
24060: LD_INT 114
24062: PUSH
24063: LD_INT 116
24065: PUSH
24066: LD_INT 117
24068: PUSH
24069: LD_INT 118
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: ST_TO_ADDR
24089: GO 24720
24091: LD_INT 17
24093: DOUBLE
24094: EQUAL
24095: IFTRUE 24099
24097: GO 24323
24099: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
24100: LD_ADDR_VAR 0 2
24104: PUSH
24105: LD_INT 1
24107: PUSH
24108: LD_INT 2
24110: PUSH
24111: LD_INT 3
24113: PUSH
24114: LD_INT 4
24116: PUSH
24117: LD_INT 5
24119: PUSH
24120: LD_INT 6
24122: PUSH
24123: LD_INT 7
24125: PUSH
24126: LD_INT 8
24128: PUSH
24129: LD_INT 9
24131: PUSH
24132: LD_INT 10
24134: PUSH
24135: LD_INT 11
24137: PUSH
24138: LD_INT 12
24140: PUSH
24141: LD_INT 13
24143: PUSH
24144: LD_INT 14
24146: PUSH
24147: LD_INT 15
24149: PUSH
24150: LD_INT 16
24152: PUSH
24153: LD_INT 17
24155: PUSH
24156: LD_INT 18
24158: PUSH
24159: LD_INT 19
24161: PUSH
24162: LD_INT 20
24164: PUSH
24165: LD_INT 21
24167: PUSH
24168: LD_INT 22
24170: PUSH
24171: LD_INT 23
24173: PUSH
24174: LD_INT 24
24176: PUSH
24177: LD_INT 25
24179: PUSH
24180: LD_INT 26
24182: PUSH
24183: LD_INT 27
24185: PUSH
24186: LD_INT 28
24188: PUSH
24189: LD_INT 29
24191: PUSH
24192: LD_INT 30
24194: PUSH
24195: LD_INT 31
24197: PUSH
24198: LD_INT 32
24200: PUSH
24201: LD_INT 33
24203: PUSH
24204: LD_INT 34
24206: PUSH
24207: LD_INT 36
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 101
24249: PUSH
24250: LD_INT 102
24252: PUSH
24253: LD_INT 103
24255: PUSH
24256: LD_INT 104
24258: PUSH
24259: LD_INT 105
24261: PUSH
24262: LD_INT 106
24264: PUSH
24265: LD_INT 107
24267: PUSH
24268: LD_INT 108
24270: PUSH
24271: LD_INT 109
24273: PUSH
24274: LD_INT 110
24276: PUSH
24277: LD_INT 111
24279: PUSH
24280: LD_INT 112
24282: PUSH
24283: LD_INT 113
24285: PUSH
24286: LD_INT 114
24288: PUSH
24289: LD_INT 116
24291: PUSH
24292: LD_INT 117
24294: PUSH
24295: LD_INT 118
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: ST_TO_ADDR
24321: GO 24720
24323: LD_INT 18
24325: DOUBLE
24326: EQUAL
24327: IFTRUE 24331
24329: GO 24479
24331: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24332: LD_ADDR_VAR 0 2
24336: PUSH
24337: LD_INT 2
24339: PUSH
24340: LD_INT 4
24342: PUSH
24343: LD_INT 5
24345: PUSH
24346: LD_INT 7
24348: PUSH
24349: LD_INT 11
24351: PUSH
24352: LD_INT 12
24354: PUSH
24355: LD_INT 15
24357: PUSH
24358: LD_INT 16
24360: PUSH
24361: LD_INT 20
24363: PUSH
24364: LD_INT 21
24366: PUSH
24367: LD_INT 22
24369: PUSH
24370: LD_INT 23
24372: PUSH
24373: LD_INT 25
24375: PUSH
24376: LD_INT 26
24378: PUSH
24379: LD_INT 30
24381: PUSH
24382: LD_INT 31
24384: PUSH
24385: LD_INT 32
24387: PUSH
24388: LD_INT 33
24390: PUSH
24391: LD_INT 34
24393: PUSH
24394: LD_INT 35
24396: PUSH
24397: LD_INT 36
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 101
24425: PUSH
24426: LD_INT 102
24428: PUSH
24429: LD_INT 103
24431: PUSH
24432: LD_INT 106
24434: PUSH
24435: LD_INT 108
24437: PUSH
24438: LD_INT 112
24440: PUSH
24441: LD_INT 113
24443: PUSH
24444: LD_INT 114
24446: PUSH
24447: LD_INT 115
24449: PUSH
24450: LD_INT 116
24452: PUSH
24453: LD_INT 117
24455: PUSH
24456: LD_INT 118
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: ST_TO_ADDR
24477: GO 24720
24479: LD_INT 19
24481: DOUBLE
24482: EQUAL
24483: IFTRUE 24487
24485: GO 24719
24487: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24488: LD_ADDR_VAR 0 2
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: LD_INT 3
24501: PUSH
24502: LD_INT 4
24504: PUSH
24505: LD_INT 5
24507: PUSH
24508: LD_INT 6
24510: PUSH
24511: LD_INT 7
24513: PUSH
24514: LD_INT 8
24516: PUSH
24517: LD_INT 9
24519: PUSH
24520: LD_INT 10
24522: PUSH
24523: LD_INT 11
24525: PUSH
24526: LD_INT 12
24528: PUSH
24529: LD_INT 13
24531: PUSH
24532: LD_INT 14
24534: PUSH
24535: LD_INT 15
24537: PUSH
24538: LD_INT 16
24540: PUSH
24541: LD_INT 17
24543: PUSH
24544: LD_INT 18
24546: PUSH
24547: LD_INT 19
24549: PUSH
24550: LD_INT 20
24552: PUSH
24553: LD_INT 21
24555: PUSH
24556: LD_INT 22
24558: PUSH
24559: LD_INT 23
24561: PUSH
24562: LD_INT 24
24564: PUSH
24565: LD_INT 25
24567: PUSH
24568: LD_INT 26
24570: PUSH
24571: LD_INT 27
24573: PUSH
24574: LD_INT 28
24576: PUSH
24577: LD_INT 29
24579: PUSH
24580: LD_INT 30
24582: PUSH
24583: LD_INT 31
24585: PUSH
24586: LD_INT 32
24588: PUSH
24589: LD_INT 33
24591: PUSH
24592: LD_INT 34
24594: PUSH
24595: LD_INT 35
24597: PUSH
24598: LD_INT 36
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 101
24641: PUSH
24642: LD_INT 102
24644: PUSH
24645: LD_INT 103
24647: PUSH
24648: LD_INT 104
24650: PUSH
24651: LD_INT 105
24653: PUSH
24654: LD_INT 106
24656: PUSH
24657: LD_INT 107
24659: PUSH
24660: LD_INT 108
24662: PUSH
24663: LD_INT 109
24665: PUSH
24666: LD_INT 110
24668: PUSH
24669: LD_INT 111
24671: PUSH
24672: LD_INT 112
24674: PUSH
24675: LD_INT 113
24677: PUSH
24678: LD_INT 114
24680: PUSH
24681: LD_INT 115
24683: PUSH
24684: LD_INT 116
24686: PUSH
24687: LD_INT 117
24689: PUSH
24690: LD_INT 118
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: ST_TO_ADDR
24717: GO 24720
24719: POP
// end else
24720: GO 24951
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24722: LD_ADDR_VAR 0 2
24726: PUSH
24727: LD_INT 1
24729: PUSH
24730: LD_INT 2
24732: PUSH
24733: LD_INT 3
24735: PUSH
24736: LD_INT 4
24738: PUSH
24739: LD_INT 5
24741: PUSH
24742: LD_INT 6
24744: PUSH
24745: LD_INT 7
24747: PUSH
24748: LD_INT 8
24750: PUSH
24751: LD_INT 9
24753: PUSH
24754: LD_INT 10
24756: PUSH
24757: LD_INT 11
24759: PUSH
24760: LD_INT 12
24762: PUSH
24763: LD_INT 13
24765: PUSH
24766: LD_INT 14
24768: PUSH
24769: LD_INT 15
24771: PUSH
24772: LD_INT 16
24774: PUSH
24775: LD_INT 17
24777: PUSH
24778: LD_INT 18
24780: PUSH
24781: LD_INT 19
24783: PUSH
24784: LD_INT 20
24786: PUSH
24787: LD_INT 21
24789: PUSH
24790: LD_INT 22
24792: PUSH
24793: LD_INT 23
24795: PUSH
24796: LD_INT 24
24798: PUSH
24799: LD_INT 25
24801: PUSH
24802: LD_INT 26
24804: PUSH
24805: LD_INT 27
24807: PUSH
24808: LD_INT 28
24810: PUSH
24811: LD_INT 29
24813: PUSH
24814: LD_INT 30
24816: PUSH
24817: LD_INT 31
24819: PUSH
24820: LD_INT 32
24822: PUSH
24823: LD_INT 33
24825: PUSH
24826: LD_INT 34
24828: PUSH
24829: LD_INT 35
24831: PUSH
24832: LD_INT 36
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 101
24875: PUSH
24876: LD_INT 102
24878: PUSH
24879: LD_INT 103
24881: PUSH
24882: LD_INT 104
24884: PUSH
24885: LD_INT 105
24887: PUSH
24888: LD_INT 106
24890: PUSH
24891: LD_INT 107
24893: PUSH
24894: LD_INT 108
24896: PUSH
24897: LD_INT 109
24899: PUSH
24900: LD_INT 110
24902: PUSH
24903: LD_INT 111
24905: PUSH
24906: LD_INT 112
24908: PUSH
24909: LD_INT 113
24911: PUSH
24912: LD_INT 114
24914: PUSH
24915: LD_INT 115
24917: PUSH
24918: LD_INT 116
24920: PUSH
24921: LD_INT 117
24923: PUSH
24924: LD_INT 118
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: ST_TO_ADDR
// if result then
24951: LD_VAR 0 2
24955: IFFALSE 25741
// begin normal :=  ;
24957: LD_ADDR_VAR 0 5
24961: PUSH
24962: LD_STRING 
24964: ST_TO_ADDR
// hardcore :=  ;
24965: LD_ADDR_VAR 0 6
24969: PUSH
24970: LD_STRING 
24972: ST_TO_ADDR
// active :=  ;
24973: LD_ADDR_VAR 0 7
24977: PUSH
24978: LD_STRING 
24980: ST_TO_ADDR
// for i = 1 to normalCounter do
24981: LD_ADDR_VAR 0 8
24985: PUSH
24986: DOUBLE
24987: LD_INT 1
24989: DEC
24990: ST_TO_ADDR
24991: LD_EXP 55
24995: PUSH
24996: FOR_TO
24997: IFFALSE 25098
// begin tmp := 0 ;
24999: LD_ADDR_VAR 0 3
25003: PUSH
25004: LD_STRING 0
25006: ST_TO_ADDR
// if result [ 1 ] then
25007: LD_VAR 0 2
25011: PUSH
25012: LD_INT 1
25014: ARRAY
25015: IFFALSE 25080
// if result [ 1 ] [ 1 ] = i then
25017: LD_VAR 0 2
25021: PUSH
25022: LD_INT 1
25024: ARRAY
25025: PUSH
25026: LD_INT 1
25028: ARRAY
25029: PUSH
25030: LD_VAR 0 8
25034: EQUAL
25035: IFFALSE 25080
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25037: LD_ADDR_VAR 0 2
25041: PUSH
25042: LD_VAR 0 2
25046: PPUSH
25047: LD_INT 1
25049: PPUSH
25050: LD_VAR 0 2
25054: PUSH
25055: LD_INT 1
25057: ARRAY
25058: PPUSH
25059: LD_INT 1
25061: PPUSH
25062: CALL_OW 3
25066: PPUSH
25067: CALL_OW 1
25071: ST_TO_ADDR
// tmp := 1 ;
25072: LD_ADDR_VAR 0 3
25076: PUSH
25077: LD_STRING 1
25079: ST_TO_ADDR
// end ; normal := normal & tmp ;
25080: LD_ADDR_VAR 0 5
25084: PUSH
25085: LD_VAR 0 5
25089: PUSH
25090: LD_VAR 0 3
25094: STR
25095: ST_TO_ADDR
// end ;
25096: GO 24996
25098: POP
25099: POP
// for i = 1 to hardcoreCounter do
25100: LD_ADDR_VAR 0 8
25104: PUSH
25105: DOUBLE
25106: LD_INT 1
25108: DEC
25109: ST_TO_ADDR
25110: LD_EXP 56
25114: PUSH
25115: FOR_TO
25116: IFFALSE 25221
// begin tmp := 0 ;
25118: LD_ADDR_VAR 0 3
25122: PUSH
25123: LD_STRING 0
25125: ST_TO_ADDR
// if result [ 2 ] then
25126: LD_VAR 0 2
25130: PUSH
25131: LD_INT 2
25133: ARRAY
25134: IFFALSE 25203
// if result [ 2 ] [ 1 ] = 100 + i then
25136: LD_VAR 0 2
25140: PUSH
25141: LD_INT 2
25143: ARRAY
25144: PUSH
25145: LD_INT 1
25147: ARRAY
25148: PUSH
25149: LD_INT 100
25151: PUSH
25152: LD_VAR 0 8
25156: PLUS
25157: EQUAL
25158: IFFALSE 25203
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25160: LD_ADDR_VAR 0 2
25164: PUSH
25165: LD_VAR 0 2
25169: PPUSH
25170: LD_INT 2
25172: PPUSH
25173: LD_VAR 0 2
25177: PUSH
25178: LD_INT 2
25180: ARRAY
25181: PPUSH
25182: LD_INT 1
25184: PPUSH
25185: CALL_OW 3
25189: PPUSH
25190: CALL_OW 1
25194: ST_TO_ADDR
// tmp := 1 ;
25195: LD_ADDR_VAR 0 3
25199: PUSH
25200: LD_STRING 1
25202: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25203: LD_ADDR_VAR 0 6
25207: PUSH
25208: LD_VAR 0 6
25212: PUSH
25213: LD_VAR 0 3
25217: STR
25218: ST_TO_ADDR
// end ;
25219: GO 25115
25221: POP
25222: POP
// if isGameLoad then
25223: LD_VAR 0 1
25227: IFFALSE 25702
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25229: LD_ADDR_VAR 0 4
25233: PUSH
25234: LD_EXP 59
25238: PUSH
25239: LD_EXP 58
25243: PUSH
25244: LD_EXP 60
25248: PUSH
25249: LD_EXP 57
25253: PUSH
25254: LD_EXP 61
25258: PUSH
25259: LD_EXP 62
25263: PUSH
25264: LD_EXP 63
25268: PUSH
25269: LD_EXP 64
25273: PUSH
25274: LD_EXP 65
25278: PUSH
25279: LD_EXP 66
25283: PUSH
25284: LD_EXP 67
25288: PUSH
25289: LD_EXP 68
25293: PUSH
25294: LD_EXP 69
25298: PUSH
25299: LD_EXP 70
25303: PUSH
25304: LD_EXP 78
25308: PUSH
25309: LD_EXP 79
25313: PUSH
25314: LD_EXP 80
25318: PUSH
25319: LD_EXP 81
25323: PUSH
25324: LD_EXP 83
25328: PUSH
25329: LD_EXP 84
25333: PUSH
25334: LD_EXP 85
25338: PUSH
25339: LD_EXP 88
25343: PUSH
25344: LD_EXP 90
25348: PUSH
25349: LD_EXP 91
25353: PUSH
25354: LD_EXP 92
25358: PUSH
25359: LD_EXP 94
25363: PUSH
25364: LD_EXP 95
25368: PUSH
25369: LD_EXP 98
25373: PUSH
25374: LD_EXP 99
25378: PUSH
25379: LD_EXP 100
25383: PUSH
25384: LD_EXP 101
25388: PUSH
25389: LD_EXP 102
25393: PUSH
25394: LD_EXP 103
25398: PUSH
25399: LD_EXP 104
25403: PUSH
25404: LD_EXP 105
25408: PUSH
25409: LD_EXP 106
25413: PUSH
25414: LD_EXP 71
25418: PUSH
25419: LD_EXP 72
25423: PUSH
25424: LD_EXP 75
25428: PUSH
25429: LD_EXP 76
25433: PUSH
25434: LD_EXP 77
25438: PUSH
25439: LD_EXP 73
25443: PUSH
25444: LD_EXP 74
25448: PUSH
25449: LD_EXP 82
25453: PUSH
25454: LD_EXP 86
25458: PUSH
25459: LD_EXP 87
25463: PUSH
25464: LD_EXP 89
25468: PUSH
25469: LD_EXP 93
25473: PUSH
25474: LD_EXP 96
25478: PUSH
25479: LD_EXP 97
25483: PUSH
25484: LD_EXP 107
25488: PUSH
25489: LD_EXP 108
25493: PUSH
25494: LD_EXP 109
25498: PUSH
25499: LD_EXP 110
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: ST_TO_ADDR
// tmp :=  ;
25560: LD_ADDR_VAR 0 3
25564: PUSH
25565: LD_STRING 
25567: ST_TO_ADDR
// for i = 1 to normalCounter do
25568: LD_ADDR_VAR 0 8
25572: PUSH
25573: DOUBLE
25574: LD_INT 1
25576: DEC
25577: ST_TO_ADDR
25578: LD_EXP 55
25582: PUSH
25583: FOR_TO
25584: IFFALSE 25620
// begin if flags [ i ] then
25586: LD_VAR 0 4
25590: PUSH
25591: LD_VAR 0 8
25595: ARRAY
25596: IFFALSE 25618
// tmp := tmp & i & ; ;
25598: LD_ADDR_VAR 0 3
25602: PUSH
25603: LD_VAR 0 3
25607: PUSH
25608: LD_VAR 0 8
25612: STR
25613: PUSH
25614: LD_STRING ;
25616: STR
25617: ST_TO_ADDR
// end ;
25618: GO 25583
25620: POP
25621: POP
// for i = 1 to hardcoreCounter do
25622: LD_ADDR_VAR 0 8
25626: PUSH
25627: DOUBLE
25628: LD_INT 1
25630: DEC
25631: ST_TO_ADDR
25632: LD_EXP 56
25636: PUSH
25637: FOR_TO
25638: IFFALSE 25684
// begin if flags [ normalCounter + i ] then
25640: LD_VAR 0 4
25644: PUSH
25645: LD_EXP 55
25649: PUSH
25650: LD_VAR 0 8
25654: PLUS
25655: ARRAY
25656: IFFALSE 25682
// tmp := tmp & ( 100 + i ) & ; ;
25658: LD_ADDR_VAR 0 3
25662: PUSH
25663: LD_VAR 0 3
25667: PUSH
25668: LD_INT 100
25670: PUSH
25671: LD_VAR 0 8
25675: PLUS
25676: STR
25677: PUSH
25678: LD_STRING ;
25680: STR
25681: ST_TO_ADDR
// end ;
25682: GO 25637
25684: POP
25685: POP
// if tmp then
25686: LD_VAR 0 3
25690: IFFALSE 25702
// active := tmp ;
25692: LD_ADDR_VAR 0 7
25696: PUSH
25697: LD_VAR 0 3
25701: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25702: LD_STRING getStreamItemsFromMission("
25704: PUSH
25705: LD_VAR 0 5
25709: STR
25710: PUSH
25711: LD_STRING ","
25713: STR
25714: PUSH
25715: LD_VAR 0 6
25719: STR
25720: PUSH
25721: LD_STRING ","
25723: STR
25724: PUSH
25725: LD_VAR 0 7
25729: STR
25730: PUSH
25731: LD_STRING ")
25733: STR
25734: PPUSH
25735: CALL_OW 559
// end else
25739: GO 25748
// ToLua ( getStreamItemsFromMission("","","") ) ;
25741: LD_STRING getStreamItemsFromMission("","","")
25743: PPUSH
25744: CALL_OW 559
// end ;
25748: LD_VAR 0 2
25752: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25753: LD_EXP 54
25757: IFFALSE 25765
25759: PUSH
25760: LD_EXP 59
25764: AND
25765: IFFALSE 25889
25767: GO 25769
25769: DISABLE
25770: LD_INT 0
25772: PPUSH
25773: PPUSH
// begin enable ;
25774: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25775: LD_ADDR_VAR 0 2
25779: PUSH
25780: LD_INT 22
25782: PUSH
25783: LD_OWVAR 2
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 2
25794: PUSH
25795: LD_INT 34
25797: PUSH
25798: LD_INT 7
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 34
25807: PUSH
25808: LD_INT 45
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 34
25817: PUSH
25818: LD_INT 28
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 34
25827: PUSH
25828: LD_INT 47
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PPUSH
25846: CALL_OW 69
25850: ST_TO_ADDR
// if not tmp then
25851: LD_VAR 0 2
25855: NOT
25856: IFFALSE 25860
// exit ;
25858: GO 25889
// for i in tmp do
25860: LD_ADDR_VAR 0 1
25864: PUSH
25865: LD_VAR 0 2
25869: PUSH
25870: FOR_IN
25871: IFFALSE 25887
// begin SetLives ( i , 0 ) ;
25873: LD_VAR 0 1
25877: PPUSH
25878: LD_INT 0
25880: PPUSH
25881: CALL_OW 234
// end ;
25885: GO 25870
25887: POP
25888: POP
// end ;
25889: PPOPN 2
25891: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25892: LD_EXP 54
25896: IFFALSE 25904
25898: PUSH
25899: LD_EXP 60
25903: AND
25904: IFFALSE 25988
25906: GO 25908
25908: DISABLE
25909: LD_INT 0
25911: PPUSH
25912: PPUSH
// begin enable ;
25913: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25914: LD_ADDR_VAR 0 2
25918: PUSH
25919: LD_INT 22
25921: PUSH
25922: LD_OWVAR 2
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 32
25933: PUSH
25934: LD_INT 3
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PPUSH
25945: CALL_OW 69
25949: ST_TO_ADDR
// if not tmp then
25950: LD_VAR 0 2
25954: NOT
25955: IFFALSE 25959
// exit ;
25957: GO 25988
// for i in tmp do
25959: LD_ADDR_VAR 0 1
25963: PUSH
25964: LD_VAR 0 2
25968: PUSH
25969: FOR_IN
25970: IFFALSE 25986
// begin SetLives ( i , 0 ) ;
25972: LD_VAR 0 1
25976: PPUSH
25977: LD_INT 0
25979: PPUSH
25980: CALL_OW 234
// end ;
25984: GO 25969
25986: POP
25987: POP
// end ;
25988: PPOPN 2
25990: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25991: LD_EXP 54
25995: IFFALSE 26003
25997: PUSH
25998: LD_EXP 57
26002: AND
26003: IFFALSE 26096
26005: GO 26007
26007: DISABLE
26008: LD_INT 0
26010: PPUSH
// begin enable ;
26011: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26012: LD_ADDR_VAR 0 1
26016: PUSH
26017: LD_INT 22
26019: PUSH
26020: LD_OWVAR 2
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: LD_INT 25
26034: PUSH
26035: LD_INT 5
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 25
26044: PUSH
26045: LD_INT 9
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 25
26054: PUSH
26055: LD_INT 8
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PPUSH
26072: CALL_OW 69
26076: PUSH
26077: FOR_IN
26078: IFFALSE 26094
// begin SetClass ( i , 1 ) ;
26080: LD_VAR 0 1
26084: PPUSH
26085: LD_INT 1
26087: PPUSH
26088: CALL_OW 336
// end ;
26092: GO 26077
26094: POP
26095: POP
// end ;
26096: PPOPN 1
26098: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26099: LD_EXP 54
26103: IFFALSE 26111
26105: PUSH
26106: LD_EXP 58
26110: AND
26111: IFFALSE 26123
26113: PUSH
26114: LD_OWVAR 65
26118: PUSH
26119: LD_INT 7
26121: LESS
26122: AND
26123: IFFALSE 26137
26125: GO 26127
26127: DISABLE
// begin enable ;
26128: ENABLE
// game_speed := 7 ;
26129: LD_ADDR_OWVAR 65
26133: PUSH
26134: LD_INT 7
26136: ST_TO_ADDR
// end ;
26137: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26138: LD_EXP 54
26142: IFFALSE 26150
26144: PUSH
26145: LD_EXP 61
26149: AND
26150: IFFALSE 26352
26152: GO 26154
26154: DISABLE
26155: LD_INT 0
26157: PPUSH
26158: PPUSH
26159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26160: LD_ADDR_VAR 0 3
26164: PUSH
26165: LD_INT 81
26167: PUSH
26168: LD_OWVAR 2
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 21
26179: PUSH
26180: LD_INT 1
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PPUSH
26191: CALL_OW 69
26195: ST_TO_ADDR
// if not tmp then
26196: LD_VAR 0 3
26200: NOT
26201: IFFALSE 26205
// exit ;
26203: GO 26352
// if tmp > 5 then
26205: LD_VAR 0 3
26209: PUSH
26210: LD_INT 5
26212: GREATER
26213: IFFALSE 26225
// k := 5 else
26215: LD_ADDR_VAR 0 2
26219: PUSH
26220: LD_INT 5
26222: ST_TO_ADDR
26223: GO 26235
// k := tmp ;
26225: LD_ADDR_VAR 0 2
26229: PUSH
26230: LD_VAR 0 3
26234: ST_TO_ADDR
// for i := 1 to k do
26235: LD_ADDR_VAR 0 1
26239: PUSH
26240: DOUBLE
26241: LD_INT 1
26243: DEC
26244: ST_TO_ADDR
26245: LD_VAR 0 2
26249: PUSH
26250: FOR_TO
26251: IFFALSE 26350
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26253: LD_VAR 0 3
26257: PUSH
26258: LD_VAR 0 1
26262: ARRAY
26263: PPUSH
26264: LD_VAR 0 1
26268: PUSH
26269: LD_INT 4
26271: MOD
26272: PUSH
26273: LD_INT 1
26275: PLUS
26276: PPUSH
26277: CALL_OW 259
26281: PUSH
26282: LD_INT 10
26284: LESS
26285: IFFALSE 26348
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26287: LD_VAR 0 3
26291: PUSH
26292: LD_VAR 0 1
26296: ARRAY
26297: PPUSH
26298: LD_VAR 0 1
26302: PUSH
26303: LD_INT 4
26305: MOD
26306: PUSH
26307: LD_INT 1
26309: PLUS
26310: PPUSH
26311: LD_VAR 0 3
26315: PUSH
26316: LD_VAR 0 1
26320: ARRAY
26321: PPUSH
26322: LD_VAR 0 1
26326: PUSH
26327: LD_INT 4
26329: MOD
26330: PUSH
26331: LD_INT 1
26333: PLUS
26334: PPUSH
26335: CALL_OW 259
26339: PUSH
26340: LD_INT 1
26342: PLUS
26343: PPUSH
26344: CALL_OW 237
26348: GO 26250
26350: POP
26351: POP
// end ;
26352: PPOPN 3
26354: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26355: LD_EXP 54
26359: IFFALSE 26367
26361: PUSH
26362: LD_EXP 62
26366: AND
26367: IFFALSE 26387
26369: GO 26371
26371: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26372: LD_INT 4
26374: PPUSH
26375: LD_OWVAR 2
26379: PPUSH
26380: LD_INT 0
26382: PPUSH
26383: CALL_OW 324
26387: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26388: LD_EXP 54
26392: IFFALSE 26400
26394: PUSH
26395: LD_EXP 91
26399: AND
26400: IFFALSE 26420
26402: GO 26404
26404: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26405: LD_INT 19
26407: PPUSH
26408: LD_OWVAR 2
26412: PPUSH
26413: LD_INT 0
26415: PPUSH
26416: CALL_OW 324
26420: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26421: LD_EXP 54
26425: IFFALSE 26433
26427: PUSH
26428: LD_EXP 63
26432: AND
26433: IFFALSE 26535
26435: GO 26437
26437: DISABLE
26438: LD_INT 0
26440: PPUSH
26441: PPUSH
// begin enable ;
26442: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26443: LD_ADDR_VAR 0 2
26447: PUSH
26448: LD_INT 22
26450: PUSH
26451: LD_OWVAR 2
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: LD_INT 34
26465: PUSH
26466: LD_INT 11
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 34
26475: PUSH
26476: LD_INT 30
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: LIST
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PPUSH
26492: CALL_OW 69
26496: ST_TO_ADDR
// if not tmp then
26497: LD_VAR 0 2
26501: NOT
26502: IFFALSE 26506
// exit ;
26504: GO 26535
// for i in tmp do
26506: LD_ADDR_VAR 0 1
26510: PUSH
26511: LD_VAR 0 2
26515: PUSH
26516: FOR_IN
26517: IFFALSE 26533
// begin SetLives ( i , 0 ) ;
26519: LD_VAR 0 1
26523: PPUSH
26524: LD_INT 0
26526: PPUSH
26527: CALL_OW 234
// end ;
26531: GO 26516
26533: POP
26534: POP
// end ;
26535: PPOPN 2
26537: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26538: LD_EXP 54
26542: IFFALSE 26550
26544: PUSH
26545: LD_EXP 64
26549: AND
26550: IFFALSE 26570
26552: GO 26554
26554: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26555: LD_INT 32
26557: PPUSH
26558: LD_OWVAR 2
26562: PPUSH
26563: LD_INT 0
26565: PPUSH
26566: CALL_OW 324
26570: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26571: LD_EXP 54
26575: IFFALSE 26583
26577: PUSH
26578: LD_EXP 65
26582: AND
26583: IFFALSE 26766
26585: GO 26587
26587: DISABLE
26588: LD_INT 0
26590: PPUSH
26591: PPUSH
26592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26593: LD_ADDR_VAR 0 2
26597: PUSH
26598: LD_INT 22
26600: PUSH
26601: LD_OWVAR 2
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 33
26612: PUSH
26613: LD_INT 3
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PPUSH
26624: CALL_OW 69
26628: ST_TO_ADDR
// if not tmp then
26629: LD_VAR 0 2
26633: NOT
26634: IFFALSE 26638
// exit ;
26636: GO 26766
// side := 0 ;
26638: LD_ADDR_VAR 0 3
26642: PUSH
26643: LD_INT 0
26645: ST_TO_ADDR
// for i := 1 to 8 do
26646: LD_ADDR_VAR 0 1
26650: PUSH
26651: DOUBLE
26652: LD_INT 1
26654: DEC
26655: ST_TO_ADDR
26656: LD_INT 8
26658: PUSH
26659: FOR_TO
26660: IFFALSE 26710
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26662: LD_OWVAR 2
26666: PUSH
26667: LD_VAR 0 1
26671: NONEQUAL
26672: IFFALSE 26694
26674: PUSH
26675: LD_OWVAR 2
26679: PPUSH
26680: LD_VAR 0 1
26684: PPUSH
26685: CALL_OW 81
26689: PUSH
26690: LD_INT 2
26692: EQUAL
26693: AND
26694: IFFALSE 26708
// begin side := i ;
26696: LD_ADDR_VAR 0 3
26700: PUSH
26701: LD_VAR 0 1
26705: ST_TO_ADDR
// break ;
26706: GO 26710
// end ;
26708: GO 26659
26710: POP
26711: POP
// if not side then
26712: LD_VAR 0 3
26716: NOT
26717: IFFALSE 26721
// exit ;
26719: GO 26766
// for i := 1 to tmp do
26721: LD_ADDR_VAR 0 1
26725: PUSH
26726: DOUBLE
26727: LD_INT 1
26729: DEC
26730: ST_TO_ADDR
26731: LD_VAR 0 2
26735: PUSH
26736: FOR_TO
26737: IFFALSE 26764
// if Prob ( 60 ) then
26739: LD_INT 60
26741: PPUSH
26742: CALL_OW 13
26746: IFFALSE 26762
// SetSide ( i , side ) ;
26748: LD_VAR 0 1
26752: PPUSH
26753: LD_VAR 0 3
26757: PPUSH
26758: CALL_OW 235
26762: GO 26736
26764: POP
26765: POP
// end ;
26766: PPOPN 3
26768: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26769: LD_EXP 54
26773: IFFALSE 26781
26775: PUSH
26776: LD_EXP 67
26780: AND
26781: IFFALSE 26900
26783: GO 26785
26785: DISABLE
26786: LD_INT 0
26788: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26789: LD_ADDR_VAR 0 1
26793: PUSH
26794: LD_INT 22
26796: PUSH
26797: LD_OWVAR 2
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 21
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 3
26818: PUSH
26819: LD_INT 23
26821: PUSH
26822: LD_INT 0
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: LIST
26837: PPUSH
26838: CALL_OW 69
26842: PUSH
26843: FOR_IN
26844: IFFALSE 26898
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26846: LD_VAR 0 1
26850: PPUSH
26851: CALL_OW 257
26855: PUSH
26856: LD_INT 1
26858: PUSH
26859: LD_INT 2
26861: PUSH
26862: LD_INT 3
26864: PUSH
26865: LD_INT 4
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: IN
26874: IFFALSE 26896
// SetClass ( un , rand ( 1 , 4 ) ) ;
26876: LD_VAR 0 1
26880: PPUSH
26881: LD_INT 1
26883: PPUSH
26884: LD_INT 4
26886: PPUSH
26887: CALL_OW 12
26891: PPUSH
26892: CALL_OW 336
26896: GO 26843
26898: POP
26899: POP
// end ;
26900: PPOPN 1
26902: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26903: LD_EXP 54
26907: IFFALSE 26915
26909: PUSH
26910: LD_EXP 66
26914: AND
26915: IFFALSE 26994
26917: GO 26919
26919: DISABLE
26920: LD_INT 0
26922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26923: LD_ADDR_VAR 0 1
26927: PUSH
26928: LD_INT 22
26930: PUSH
26931: LD_OWVAR 2
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 21
26942: PUSH
26943: LD_INT 3
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PPUSH
26954: CALL_OW 69
26958: ST_TO_ADDR
// if not tmp then
26959: LD_VAR 0 1
26963: NOT
26964: IFFALSE 26968
// exit ;
26966: GO 26994
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26968: LD_VAR 0 1
26972: PUSH
26973: LD_INT 1
26975: PPUSH
26976: LD_VAR 0 1
26980: PPUSH
26981: CALL_OW 12
26985: ARRAY
26986: PPUSH
26987: LD_INT 100
26989: PPUSH
26990: CALL_OW 234
// end ;
26994: PPOPN 1
26996: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26997: LD_EXP 54
27001: IFFALSE 27009
27003: PUSH
27004: LD_EXP 68
27008: AND
27009: IFFALSE 27107
27011: GO 27013
27013: DISABLE
27014: LD_INT 0
27016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27017: LD_ADDR_VAR 0 1
27021: PUSH
27022: LD_INT 22
27024: PUSH
27025: LD_OWVAR 2
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 21
27036: PUSH
27037: LD_INT 1
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PPUSH
27048: CALL_OW 69
27052: ST_TO_ADDR
// if not tmp then
27053: LD_VAR 0 1
27057: NOT
27058: IFFALSE 27062
// exit ;
27060: GO 27107
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27062: LD_VAR 0 1
27066: PUSH
27067: LD_INT 1
27069: PPUSH
27070: LD_VAR 0 1
27074: PPUSH
27075: CALL_OW 12
27079: ARRAY
27080: PPUSH
27081: LD_INT 1
27083: PPUSH
27084: LD_INT 4
27086: PPUSH
27087: CALL_OW 12
27091: PPUSH
27092: LD_INT 3000
27094: PPUSH
27095: LD_INT 9000
27097: PPUSH
27098: CALL_OW 12
27102: PPUSH
27103: CALL_OW 492
// end ;
27107: PPOPN 1
27109: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27110: LD_EXP 54
27114: IFFALSE 27122
27116: PUSH
27117: LD_EXP 69
27121: AND
27122: IFFALSE 27142
27124: GO 27126
27126: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27127: LD_INT 1
27129: PPUSH
27130: LD_OWVAR 2
27134: PPUSH
27135: LD_INT 0
27137: PPUSH
27138: CALL_OW 324
27142: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27143: LD_EXP 54
27147: IFFALSE 27155
27149: PUSH
27150: LD_EXP 70
27154: AND
27155: IFFALSE 27238
27157: GO 27159
27159: DISABLE
27160: LD_INT 0
27162: PPUSH
27163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27164: LD_ADDR_VAR 0 2
27168: PUSH
27169: LD_INT 22
27171: PUSH
27172: LD_OWVAR 2
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 21
27183: PUSH
27184: LD_INT 3
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PPUSH
27195: CALL_OW 69
27199: ST_TO_ADDR
// if not tmp then
27200: LD_VAR 0 2
27204: NOT
27205: IFFALSE 27209
// exit ;
27207: GO 27238
// for i in tmp do
27209: LD_ADDR_VAR 0 1
27213: PUSH
27214: LD_VAR 0 2
27218: PUSH
27219: FOR_IN
27220: IFFALSE 27236
// SetBLevel ( i , 10 ) ;
27222: LD_VAR 0 1
27226: PPUSH
27227: LD_INT 10
27229: PPUSH
27230: CALL_OW 241
27234: GO 27219
27236: POP
27237: POP
// end ;
27238: PPOPN 2
27240: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27241: LD_EXP 54
27245: IFFALSE 27253
27247: PUSH
27248: LD_EXP 71
27252: AND
27253: IFFALSE 27364
27255: GO 27257
27257: DISABLE
27258: LD_INT 0
27260: PPUSH
27261: PPUSH
27262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27263: LD_ADDR_VAR 0 3
27267: PUSH
27268: LD_INT 22
27270: PUSH
27271: LD_OWVAR 2
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 25
27282: PUSH
27283: LD_INT 1
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PPUSH
27294: CALL_OW 69
27298: ST_TO_ADDR
// if not tmp then
27299: LD_VAR 0 3
27303: NOT
27304: IFFALSE 27308
// exit ;
27306: GO 27364
// un := tmp [ rand ( 1 , tmp ) ] ;
27308: LD_ADDR_VAR 0 2
27312: PUSH
27313: LD_VAR 0 3
27317: PUSH
27318: LD_INT 1
27320: PPUSH
27321: LD_VAR 0 3
27325: PPUSH
27326: CALL_OW 12
27330: ARRAY
27331: ST_TO_ADDR
// if Crawls ( un ) then
27332: LD_VAR 0 2
27336: PPUSH
27337: CALL_OW 318
27341: IFFALSE 27352
// ComWalk ( un ) ;
27343: LD_VAR 0 2
27347: PPUSH
27348: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27352: LD_VAR 0 2
27356: PPUSH
27357: LD_INT 5
27359: PPUSH
27360: CALL_OW 336
// end ;
27364: PPOPN 3
27366: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27367: LD_EXP 54
27371: IFFALSE 27379
27373: PUSH
27374: LD_EXP 72
27378: AND
27379: IFFALSE 27391
27381: PUSH
27382: LD_OWVAR 67
27386: PUSH
27387: LD_INT 4
27389: LESS
27390: AND
27391: IFFALSE 27410
27393: GO 27395
27395: DISABLE
// begin Difficulty := Difficulty + 1 ;
27396: LD_ADDR_OWVAR 67
27400: PUSH
27401: LD_OWVAR 67
27405: PUSH
27406: LD_INT 1
27408: PLUS
27409: ST_TO_ADDR
// end ;
27410: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27411: LD_EXP 54
27415: IFFALSE 27423
27417: PUSH
27418: LD_EXP 73
27422: AND
27423: IFFALSE 27526
27425: GO 27427
27427: DISABLE
27428: LD_INT 0
27430: PPUSH
// begin for i := 1 to 5 do
27431: LD_ADDR_VAR 0 1
27435: PUSH
27436: DOUBLE
27437: LD_INT 1
27439: DEC
27440: ST_TO_ADDR
27441: LD_INT 5
27443: PUSH
27444: FOR_TO
27445: IFFALSE 27524
// begin uc_nation := nation_nature ;
27447: LD_ADDR_OWVAR 21
27451: PUSH
27452: LD_INT 0
27454: ST_TO_ADDR
// uc_side := 0 ;
27455: LD_ADDR_OWVAR 20
27459: PUSH
27460: LD_INT 0
27462: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27463: LD_ADDR_OWVAR 29
27467: PUSH
27468: LD_INT 12
27470: PUSH
27471: LD_INT 12
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: ST_TO_ADDR
// hc_agressivity := 20 ;
27478: LD_ADDR_OWVAR 35
27482: PUSH
27483: LD_INT 20
27485: ST_TO_ADDR
// hc_class := class_tiger ;
27486: LD_ADDR_OWVAR 28
27490: PUSH
27491: LD_INT 14
27493: ST_TO_ADDR
// hc_gallery :=  ;
27494: LD_ADDR_OWVAR 33
27498: PUSH
27499: LD_STRING 
27501: ST_TO_ADDR
// hc_name :=  ;
27502: LD_ADDR_OWVAR 26
27506: PUSH
27507: LD_STRING 
27509: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27510: CALL_OW 44
27514: PPUSH
27515: LD_INT 0
27517: PPUSH
27518: CALL_OW 51
// end ;
27522: GO 27444
27524: POP
27525: POP
// end ;
27526: PPOPN 1
27528: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27529: LD_EXP 54
27533: IFFALSE 27541
27535: PUSH
27536: LD_EXP 74
27540: AND
27541: IFFALSE 27550
27543: GO 27545
27545: DISABLE
// StreamSibBomb ;
27546: CALL 27551 0 0
27550: END
// export function StreamSibBomb ; var i , x , y ; begin
27551: LD_INT 0
27553: PPUSH
27554: PPUSH
27555: PPUSH
27556: PPUSH
// result := false ;
27557: LD_ADDR_VAR 0 1
27561: PUSH
27562: LD_INT 0
27564: ST_TO_ADDR
// for i := 1 to 16 do
27565: LD_ADDR_VAR 0 2
27569: PUSH
27570: DOUBLE
27571: LD_INT 1
27573: DEC
27574: ST_TO_ADDR
27575: LD_INT 16
27577: PUSH
27578: FOR_TO
27579: IFFALSE 27778
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27581: LD_ADDR_VAR 0 3
27585: PUSH
27586: LD_INT 10
27588: PUSH
27589: LD_INT 20
27591: PUSH
27592: LD_INT 30
27594: PUSH
27595: LD_INT 40
27597: PUSH
27598: LD_INT 50
27600: PUSH
27601: LD_INT 60
27603: PUSH
27604: LD_INT 70
27606: PUSH
27607: LD_INT 80
27609: PUSH
27610: LD_INT 90
27612: PUSH
27613: LD_INT 100
27615: PUSH
27616: LD_INT 110
27618: PUSH
27619: LD_INT 120
27621: PUSH
27622: LD_INT 130
27624: PUSH
27625: LD_INT 140
27627: PUSH
27628: LD_INT 150
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 1
27650: PPUSH
27651: LD_INT 15
27653: PPUSH
27654: CALL_OW 12
27658: ARRAY
27659: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27660: LD_ADDR_VAR 0 4
27664: PUSH
27665: LD_INT 10
27667: PUSH
27668: LD_INT 20
27670: PUSH
27671: LD_INT 30
27673: PUSH
27674: LD_INT 40
27676: PUSH
27677: LD_INT 50
27679: PUSH
27680: LD_INT 60
27682: PUSH
27683: LD_INT 70
27685: PUSH
27686: LD_INT 80
27688: PUSH
27689: LD_INT 90
27691: PUSH
27692: LD_INT 100
27694: PUSH
27695: LD_INT 110
27697: PUSH
27698: LD_INT 120
27700: PUSH
27701: LD_INT 130
27703: PUSH
27704: LD_INT 140
27706: PUSH
27707: LD_INT 150
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 1
27729: PPUSH
27730: LD_INT 15
27732: PPUSH
27733: CALL_OW 12
27737: ARRAY
27738: ST_TO_ADDR
// if ValidHex ( x , y ) then
27739: LD_VAR 0 3
27743: PPUSH
27744: LD_VAR 0 4
27748: PPUSH
27749: CALL_OW 488
27753: IFFALSE 27776
// begin result := [ x , y ] ;
27755: LD_ADDR_VAR 0 1
27759: PUSH
27760: LD_VAR 0 3
27764: PUSH
27765: LD_VAR 0 4
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: ST_TO_ADDR
// break ;
27774: GO 27778
// end ; end ;
27776: GO 27578
27778: POP
27779: POP
// if result then
27780: LD_VAR 0 1
27784: IFFALSE 27844
// begin ToLua ( playSibBomb() ) ;
27786: LD_STRING playSibBomb()
27788: PPUSH
27789: CALL_OW 559
// wait ( 0 0$14 ) ;
27793: LD_INT 490
27795: PPUSH
27796: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27800: LD_VAR 0 1
27804: PUSH
27805: LD_INT 1
27807: ARRAY
27808: PPUSH
27809: LD_VAR 0 1
27813: PUSH
27814: LD_INT 2
27816: ARRAY
27817: PPUSH
27818: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27822: LD_VAR 0 1
27826: PUSH
27827: LD_INT 1
27829: ARRAY
27830: PPUSH
27831: LD_VAR 0 1
27835: PUSH
27836: LD_INT 2
27838: ARRAY
27839: PPUSH
27840: CALL_OW 429
// end ; end ;
27844: LD_VAR 0 1
27848: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27849: LD_EXP 54
27853: IFFALSE 27861
27855: PUSH
27856: LD_EXP 76
27860: AND
27861: IFFALSE 27873
27863: GO 27865
27865: DISABLE
// YouLost (  ) ;
27866: LD_STRING 
27868: PPUSH
27869: CALL_OW 104
27873: END
// every 0 0$1 trigger StreamModeActive and sFog do
27874: LD_EXP 54
27878: IFFALSE 27886
27880: PUSH
27881: LD_EXP 75
27885: AND
27886: IFFALSE 27900
27888: GO 27890
27890: DISABLE
// FogOff ( your_side ) ;
27891: LD_OWVAR 2
27895: PPUSH
27896: CALL_OW 344
27900: END
// every 0 0$1 trigger StreamModeActive and sSun do
27901: LD_EXP 54
27905: IFFALSE 27913
27907: PUSH
27908: LD_EXP 77
27912: AND
27913: IFFALSE 27941
27915: GO 27917
27917: DISABLE
// begin solar_recharge_percent := 0 ;
27918: LD_ADDR_OWVAR 79
27922: PUSH
27923: LD_INT 0
27925: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27926: LD_INT 10500
27928: PPUSH
27929: CALL_OW 67
// solar_recharge_percent := 100 ;
27933: LD_ADDR_OWVAR 79
27937: PUSH
27938: LD_INT 100
27940: ST_TO_ADDR
// end ;
27941: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27942: LD_EXP 54
27946: IFFALSE 27954
27948: PUSH
27949: LD_EXP 78
27953: AND
27954: IFFALSE 28193
27956: GO 27958
27958: DISABLE
27959: LD_INT 0
27961: PPUSH
27962: PPUSH
27963: PPUSH
// begin tmp := [ ] ;
27964: LD_ADDR_VAR 0 3
27968: PUSH
27969: EMPTY
27970: ST_TO_ADDR
// for i := 1 to 6 do
27971: LD_ADDR_VAR 0 1
27975: PUSH
27976: DOUBLE
27977: LD_INT 1
27979: DEC
27980: ST_TO_ADDR
27981: LD_INT 6
27983: PUSH
27984: FOR_TO
27985: IFFALSE 28090
// begin uc_nation := nation_nature ;
27987: LD_ADDR_OWVAR 21
27991: PUSH
27992: LD_INT 0
27994: ST_TO_ADDR
// uc_side := 0 ;
27995: LD_ADDR_OWVAR 20
27999: PUSH
28000: LD_INT 0
28002: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28003: LD_ADDR_OWVAR 29
28007: PUSH
28008: LD_INT 12
28010: PUSH
28011: LD_INT 12
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: ST_TO_ADDR
// hc_agressivity := 20 ;
28018: LD_ADDR_OWVAR 35
28022: PUSH
28023: LD_INT 20
28025: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28026: LD_ADDR_OWVAR 28
28030: PUSH
28031: LD_INT 17
28033: ST_TO_ADDR
// hc_gallery :=  ;
28034: LD_ADDR_OWVAR 33
28038: PUSH
28039: LD_STRING 
28041: ST_TO_ADDR
// hc_name :=  ;
28042: LD_ADDR_OWVAR 26
28046: PUSH
28047: LD_STRING 
28049: ST_TO_ADDR
// un := CreateHuman ;
28050: LD_ADDR_VAR 0 2
28054: PUSH
28055: CALL_OW 44
28059: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28060: LD_VAR 0 2
28064: PPUSH
28065: LD_INT 1
28067: PPUSH
28068: CALL_OW 51
// tmp := tmp ^ un ;
28072: LD_ADDR_VAR 0 3
28076: PUSH
28077: LD_VAR 0 3
28081: PUSH
28082: LD_VAR 0 2
28086: ADD
28087: ST_TO_ADDR
// end ;
28088: GO 27984
28090: POP
28091: POP
// repeat wait ( 0 0$1 ) ;
28092: LD_INT 35
28094: PPUSH
28095: CALL_OW 67
// for un in tmp do
28099: LD_ADDR_VAR 0 2
28103: PUSH
28104: LD_VAR 0 3
28108: PUSH
28109: FOR_IN
28110: IFFALSE 28184
// begin if IsDead ( un ) then
28112: LD_VAR 0 2
28116: PPUSH
28117: CALL_OW 301
28121: IFFALSE 28141
// begin tmp := tmp diff un ;
28123: LD_ADDR_VAR 0 3
28127: PUSH
28128: LD_VAR 0 3
28132: PUSH
28133: LD_VAR 0 2
28137: DIFF
28138: ST_TO_ADDR
// continue ;
28139: GO 28109
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28141: LD_VAR 0 2
28145: PPUSH
28146: LD_INT 3
28148: PUSH
28149: LD_INT 22
28151: PUSH
28152: LD_INT 0
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PPUSH
28163: CALL_OW 69
28167: PPUSH
28168: LD_VAR 0 2
28172: PPUSH
28173: CALL_OW 74
28177: PPUSH
28178: CALL_OW 115
// end ;
28182: GO 28109
28184: POP
28185: POP
// until not tmp ;
28186: LD_VAR 0 3
28190: NOT
28191: IFFALSE 28092
// end ;
28193: PPOPN 3
28195: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28196: LD_EXP 54
28200: IFFALSE 28208
28202: PUSH
28203: LD_EXP 79
28207: AND
28208: IFFALSE 28262
28210: GO 28212
28212: DISABLE
// begin ToLua ( displayTroll(); ) ;
28213: LD_STRING displayTroll();
28215: PPUSH
28216: CALL_OW 559
// wait ( 3 3$00 ) ;
28220: LD_INT 6300
28222: PPUSH
28223: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28227: LD_STRING hideTroll();
28229: PPUSH
28230: CALL_OW 559
// wait ( 1 1$00 ) ;
28234: LD_INT 2100
28236: PPUSH
28237: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28241: LD_STRING displayTroll();
28243: PPUSH
28244: CALL_OW 559
// wait ( 1 1$00 ) ;
28248: LD_INT 2100
28250: PPUSH
28251: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28255: LD_STRING hideTroll();
28257: PPUSH
28258: CALL_OW 559
// end ;
28262: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28263: LD_EXP 54
28267: IFFALSE 28275
28269: PUSH
28270: LD_EXP 80
28274: AND
28275: IFFALSE 28338
28277: GO 28279
28279: DISABLE
28280: LD_INT 0
28282: PPUSH
// begin p := 0 ;
28283: LD_ADDR_VAR 0 1
28287: PUSH
28288: LD_INT 0
28290: ST_TO_ADDR
// repeat game_speed := 1 ;
28291: LD_ADDR_OWVAR 65
28295: PUSH
28296: LD_INT 1
28298: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28299: LD_INT 35
28301: PPUSH
28302: CALL_OW 67
// p := p + 1 ;
28306: LD_ADDR_VAR 0 1
28310: PUSH
28311: LD_VAR 0 1
28315: PUSH
28316: LD_INT 1
28318: PLUS
28319: ST_TO_ADDR
// until p >= 60 ;
28320: LD_VAR 0 1
28324: PUSH
28325: LD_INT 60
28327: GREATEREQUAL
28328: IFFALSE 28291
// game_speed := 4 ;
28330: LD_ADDR_OWVAR 65
28334: PUSH
28335: LD_INT 4
28337: ST_TO_ADDR
// end ;
28338: PPOPN 1
28340: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28341: LD_EXP 54
28345: IFFALSE 28353
28347: PUSH
28348: LD_EXP 81
28352: AND
28353: IFFALSE 28499
28355: GO 28357
28357: DISABLE
28358: LD_INT 0
28360: PPUSH
28361: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28362: LD_ADDR_VAR 0 1
28366: PUSH
28367: LD_INT 22
28369: PUSH
28370: LD_OWVAR 2
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 2
28381: PUSH
28382: LD_INT 30
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 30
28394: PUSH
28395: LD_INT 1
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: LIST
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PPUSH
28411: CALL_OW 69
28415: ST_TO_ADDR
// if not depot then
28416: LD_VAR 0 1
28420: NOT
28421: IFFALSE 28425
// exit ;
28423: GO 28499
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28425: LD_ADDR_VAR 0 2
28429: PUSH
28430: LD_VAR 0 1
28434: PUSH
28435: LD_INT 1
28437: PPUSH
28438: LD_VAR 0 1
28442: PPUSH
28443: CALL_OW 12
28447: ARRAY
28448: PPUSH
28449: CALL_OW 274
28453: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28454: LD_VAR 0 2
28458: PPUSH
28459: LD_INT 1
28461: PPUSH
28462: LD_INT 0
28464: PPUSH
28465: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28469: LD_VAR 0 2
28473: PPUSH
28474: LD_INT 2
28476: PPUSH
28477: LD_INT 0
28479: PPUSH
28480: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28484: LD_VAR 0 2
28488: PPUSH
28489: LD_INT 3
28491: PPUSH
28492: LD_INT 0
28494: PPUSH
28495: CALL_OW 277
// end ;
28499: PPOPN 2
28501: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28502: LD_EXP 54
28506: IFFALSE 28514
28508: PUSH
28509: LD_EXP 82
28513: AND
28514: IFFALSE 28611
28516: GO 28518
28518: DISABLE
28519: LD_INT 0
28521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28522: LD_ADDR_VAR 0 1
28526: PUSH
28527: LD_INT 22
28529: PUSH
28530: LD_OWVAR 2
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 21
28541: PUSH
28542: LD_INT 1
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 3
28551: PUSH
28552: LD_INT 23
28554: PUSH
28555: LD_INT 0
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: LIST
28570: PPUSH
28571: CALL_OW 69
28575: ST_TO_ADDR
// if not tmp then
28576: LD_VAR 0 1
28580: NOT
28581: IFFALSE 28585
// exit ;
28583: GO 28611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28585: LD_VAR 0 1
28589: PUSH
28590: LD_INT 1
28592: PPUSH
28593: LD_VAR 0 1
28597: PPUSH
28598: CALL_OW 12
28602: ARRAY
28603: PPUSH
28604: LD_INT 200
28606: PPUSH
28607: CALL_OW 234
// end ;
28611: PPOPN 1
28613: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28614: LD_EXP 54
28618: IFFALSE 28626
28620: PUSH
28621: LD_EXP 83
28625: AND
28626: IFFALSE 28705
28628: GO 28630
28630: DISABLE
28631: LD_INT 0
28633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28634: LD_ADDR_VAR 0 1
28638: PUSH
28639: LD_INT 22
28641: PUSH
28642: LD_OWVAR 2
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 21
28653: PUSH
28654: LD_INT 2
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PPUSH
28665: CALL_OW 69
28669: ST_TO_ADDR
// if not tmp then
28670: LD_VAR 0 1
28674: NOT
28675: IFFALSE 28679
// exit ;
28677: GO 28705
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28679: LD_VAR 0 1
28683: PUSH
28684: LD_INT 1
28686: PPUSH
28687: LD_VAR 0 1
28691: PPUSH
28692: CALL_OW 12
28696: ARRAY
28697: PPUSH
28698: LD_INT 60
28700: PPUSH
28701: CALL_OW 234
// end ;
28705: PPOPN 1
28707: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28708: LD_EXP 54
28712: IFFALSE 28720
28714: PUSH
28715: LD_EXP 84
28719: AND
28720: IFFALSE 28819
28722: GO 28724
28724: DISABLE
28725: LD_INT 0
28727: PPUSH
28728: PPUSH
// begin enable ;
28729: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28730: LD_ADDR_VAR 0 1
28734: PUSH
28735: LD_INT 22
28737: PUSH
28738: LD_OWVAR 2
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 61
28749: PUSH
28750: EMPTY
28751: LIST
28752: PUSH
28753: LD_INT 33
28755: PUSH
28756: LD_INT 2
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: LIST
28767: PPUSH
28768: CALL_OW 69
28772: ST_TO_ADDR
// if not tmp then
28773: LD_VAR 0 1
28777: NOT
28778: IFFALSE 28782
// exit ;
28780: GO 28819
// for i in tmp do
28782: LD_ADDR_VAR 0 2
28786: PUSH
28787: LD_VAR 0 1
28791: PUSH
28792: FOR_IN
28793: IFFALSE 28817
// if IsControledBy ( i ) then
28795: LD_VAR 0 2
28799: PPUSH
28800: CALL_OW 312
28804: IFFALSE 28815
// ComUnlink ( i ) ;
28806: LD_VAR 0 2
28810: PPUSH
28811: CALL_OW 136
28815: GO 28792
28817: POP
28818: POP
// end ;
28819: PPOPN 2
28821: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28822: LD_EXP 54
28826: IFFALSE 28834
28828: PUSH
28829: LD_EXP 85
28833: AND
28834: IFFALSE 28974
28836: GO 28838
28838: DISABLE
28839: LD_INT 0
28841: PPUSH
28842: PPUSH
// begin ToLua ( displayPowell(); ) ;
28843: LD_STRING displayPowell();
28845: PPUSH
28846: CALL_OW 559
// uc_side := 0 ;
28850: LD_ADDR_OWVAR 20
28854: PUSH
28855: LD_INT 0
28857: ST_TO_ADDR
// uc_nation := 2 ;
28858: LD_ADDR_OWVAR 21
28862: PUSH
28863: LD_INT 2
28865: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28866: LD_ADDR_OWVAR 37
28870: PUSH
28871: LD_INT 14
28873: ST_TO_ADDR
// vc_engine := engine_siberite ;
28874: LD_ADDR_OWVAR 39
28878: PUSH
28879: LD_INT 3
28881: ST_TO_ADDR
// vc_control := control_apeman ;
28882: LD_ADDR_OWVAR 38
28886: PUSH
28887: LD_INT 5
28889: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28890: LD_ADDR_OWVAR 40
28894: PUSH
28895: LD_INT 29
28897: ST_TO_ADDR
// un := CreateVehicle ;
28898: LD_ADDR_VAR 0 2
28902: PUSH
28903: CALL_OW 45
28907: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28908: LD_VAR 0 2
28912: PPUSH
28913: LD_INT 1
28915: PPUSH
28916: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28920: LD_INT 35
28922: PPUSH
28923: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28927: LD_VAR 0 2
28931: PPUSH
28932: LD_INT 22
28934: PUSH
28935: LD_OWVAR 2
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PPUSH
28944: CALL_OW 69
28948: PPUSH
28949: LD_VAR 0 2
28953: PPUSH
28954: CALL_OW 74
28958: PPUSH
28959: CALL_OW 115
// until IsDead ( un ) ;
28963: LD_VAR 0 2
28967: PPUSH
28968: CALL_OW 301
28972: IFFALSE 28920
// end ;
28974: PPOPN 2
28976: END
// every 0 0$1 trigger StreamModeActive and sStu do
28977: LD_EXP 54
28981: IFFALSE 28989
28983: PUSH
28984: LD_EXP 93
28988: AND
28989: IFFALSE 29005
28991: GO 28993
28993: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28994: LD_STRING displayStucuk();
28996: PPUSH
28997: CALL_OW 559
// ResetFog ;
29001: CALL_OW 335
// end ;
29005: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29006: LD_EXP 54
29010: IFFALSE 29018
29012: PUSH
29013: LD_EXP 86
29017: AND
29018: IFFALSE 29159
29020: GO 29022
29022: DISABLE
29023: LD_INT 0
29025: PPUSH
29026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29027: LD_ADDR_VAR 0 2
29031: PUSH
29032: LD_INT 22
29034: PUSH
29035: LD_OWVAR 2
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 21
29046: PUSH
29047: LD_INT 1
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PPUSH
29058: CALL_OW 69
29062: ST_TO_ADDR
// if not tmp then
29063: LD_VAR 0 2
29067: NOT
29068: IFFALSE 29072
// exit ;
29070: GO 29159
// un := tmp [ rand ( 1 , tmp ) ] ;
29072: LD_ADDR_VAR 0 1
29076: PUSH
29077: LD_VAR 0 2
29081: PUSH
29082: LD_INT 1
29084: PPUSH
29085: LD_VAR 0 2
29089: PPUSH
29090: CALL_OW 12
29094: ARRAY
29095: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29096: LD_VAR 0 1
29100: PPUSH
29101: LD_INT 0
29103: PPUSH
29104: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29108: LD_VAR 0 1
29112: PPUSH
29113: LD_OWVAR 3
29117: PUSH
29118: LD_VAR 0 1
29122: DIFF
29123: PPUSH
29124: LD_VAR 0 1
29128: PPUSH
29129: CALL_OW 74
29133: PPUSH
29134: CALL_OW 115
// wait ( 0 0$20 ) ;
29138: LD_INT 700
29140: PPUSH
29141: CALL_OW 67
// SetSide ( un , your_side ) ;
29145: LD_VAR 0 1
29149: PPUSH
29150: LD_OWVAR 2
29154: PPUSH
29155: CALL_OW 235
// end ;
29159: PPOPN 2
29161: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29162: LD_EXP 54
29166: IFFALSE 29174
29168: PUSH
29169: LD_EXP 87
29173: AND
29174: IFFALSE 29280
29176: GO 29178
29178: DISABLE
29179: LD_INT 0
29181: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29182: LD_ADDR_VAR 0 1
29186: PUSH
29187: LD_INT 22
29189: PUSH
29190: LD_OWVAR 2
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 2
29201: PUSH
29202: LD_INT 30
29204: PUSH
29205: LD_INT 0
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 30
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: LIST
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PPUSH
29231: CALL_OW 69
29235: ST_TO_ADDR
// if not depot then
29236: LD_VAR 0 1
29240: NOT
29241: IFFALSE 29245
// exit ;
29243: GO 29280
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29245: LD_VAR 0 1
29249: PUSH
29250: LD_INT 1
29252: ARRAY
29253: PPUSH
29254: CALL_OW 250
29258: PPUSH
29259: LD_VAR 0 1
29263: PUSH
29264: LD_INT 1
29266: ARRAY
29267: PPUSH
29268: CALL_OW 251
29272: PPUSH
29273: LD_INT 70
29275: PPUSH
29276: CALL_OW 495
// end ;
29280: PPOPN 1
29282: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29283: LD_EXP 54
29287: IFFALSE 29295
29289: PUSH
29290: LD_EXP 88
29294: AND
29295: IFFALSE 29506
29297: GO 29299
29299: DISABLE
29300: LD_INT 0
29302: PPUSH
29303: PPUSH
29304: PPUSH
29305: PPUSH
29306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29307: LD_ADDR_VAR 0 5
29311: PUSH
29312: LD_INT 22
29314: PUSH
29315: LD_OWVAR 2
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 21
29326: PUSH
29327: LD_INT 1
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PPUSH
29338: CALL_OW 69
29342: ST_TO_ADDR
// if not tmp then
29343: LD_VAR 0 5
29347: NOT
29348: IFFALSE 29352
// exit ;
29350: GO 29506
// for i in tmp do
29352: LD_ADDR_VAR 0 1
29356: PUSH
29357: LD_VAR 0 5
29361: PUSH
29362: FOR_IN
29363: IFFALSE 29504
// begin d := rand ( 0 , 5 ) ;
29365: LD_ADDR_VAR 0 4
29369: PUSH
29370: LD_INT 0
29372: PPUSH
29373: LD_INT 5
29375: PPUSH
29376: CALL_OW 12
29380: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29381: LD_ADDR_VAR 0 2
29385: PUSH
29386: LD_VAR 0 1
29390: PPUSH
29391: CALL_OW 250
29395: PPUSH
29396: LD_VAR 0 4
29400: PPUSH
29401: LD_INT 3
29403: PPUSH
29404: LD_INT 12
29406: PPUSH
29407: CALL_OW 12
29411: PPUSH
29412: CALL_OW 272
29416: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29417: LD_ADDR_VAR 0 3
29421: PUSH
29422: LD_VAR 0 1
29426: PPUSH
29427: CALL_OW 251
29431: PPUSH
29432: LD_VAR 0 4
29436: PPUSH
29437: LD_INT 3
29439: PPUSH
29440: LD_INT 12
29442: PPUSH
29443: CALL_OW 12
29447: PPUSH
29448: CALL_OW 273
29452: ST_TO_ADDR
// if ValidHex ( x , y ) then
29453: LD_VAR 0 2
29457: PPUSH
29458: LD_VAR 0 3
29462: PPUSH
29463: CALL_OW 488
29467: IFFALSE 29502
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29469: LD_VAR 0 1
29473: PPUSH
29474: LD_VAR 0 2
29478: PPUSH
29479: LD_VAR 0 3
29483: PPUSH
29484: LD_INT 3
29486: PPUSH
29487: LD_INT 6
29489: PPUSH
29490: CALL_OW 12
29494: PPUSH
29495: LD_INT 1
29497: PPUSH
29498: CALL_OW 483
// end ;
29502: GO 29362
29504: POP
29505: POP
// end ;
29506: PPOPN 5
29508: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29509: LD_EXP 54
29513: IFFALSE 29521
29515: PUSH
29516: LD_EXP 89
29520: AND
29521: IFFALSE 29615
29523: GO 29525
29525: DISABLE
29526: LD_INT 0
29528: PPUSH
29529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29530: LD_ADDR_VAR 0 2
29534: PUSH
29535: LD_INT 22
29537: PUSH
29538: LD_OWVAR 2
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 32
29549: PUSH
29550: LD_INT 1
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 21
29559: PUSH
29560: LD_INT 2
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: LIST
29571: PPUSH
29572: CALL_OW 69
29576: ST_TO_ADDR
// if not tmp then
29577: LD_VAR 0 2
29581: NOT
29582: IFFALSE 29586
// exit ;
29584: GO 29615
// for i in tmp do
29586: LD_ADDR_VAR 0 1
29590: PUSH
29591: LD_VAR 0 2
29595: PUSH
29596: FOR_IN
29597: IFFALSE 29613
// SetFuel ( i , 0 ) ;
29599: LD_VAR 0 1
29603: PPUSH
29604: LD_INT 0
29606: PPUSH
29607: CALL_OW 240
29611: GO 29596
29613: POP
29614: POP
// end ;
29615: PPOPN 2
29617: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29618: LD_EXP 54
29622: IFFALSE 29630
29624: PUSH
29625: LD_EXP 90
29629: AND
29630: IFFALSE 29696
29632: GO 29634
29634: DISABLE
29635: LD_INT 0
29637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29638: LD_ADDR_VAR 0 1
29642: PUSH
29643: LD_INT 22
29645: PUSH
29646: LD_OWVAR 2
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 30
29657: PUSH
29658: LD_INT 29
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PPUSH
29669: CALL_OW 69
29673: ST_TO_ADDR
// if not tmp then
29674: LD_VAR 0 1
29678: NOT
29679: IFFALSE 29683
// exit ;
29681: GO 29696
// DestroyUnit ( tmp [ 1 ] ) ;
29683: LD_VAR 0 1
29687: PUSH
29688: LD_INT 1
29690: ARRAY
29691: PPUSH
29692: CALL_OW 65
// end ;
29696: PPOPN 1
29698: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29699: LD_EXP 54
29703: IFFALSE 29711
29705: PUSH
29706: LD_EXP 92
29710: AND
29711: IFFALSE 29840
29713: GO 29715
29715: DISABLE
29716: LD_INT 0
29718: PPUSH
// begin uc_side := 0 ;
29719: LD_ADDR_OWVAR 20
29723: PUSH
29724: LD_INT 0
29726: ST_TO_ADDR
// uc_nation := nation_arabian ;
29727: LD_ADDR_OWVAR 21
29731: PUSH
29732: LD_INT 2
29734: ST_TO_ADDR
// hc_gallery :=  ;
29735: LD_ADDR_OWVAR 33
29739: PUSH
29740: LD_STRING 
29742: ST_TO_ADDR
// hc_name :=  ;
29743: LD_ADDR_OWVAR 26
29747: PUSH
29748: LD_STRING 
29750: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29751: LD_INT 1
29753: PPUSH
29754: LD_INT 11
29756: PPUSH
29757: LD_INT 10
29759: PPUSH
29760: CALL_OW 380
// un := CreateHuman ;
29764: LD_ADDR_VAR 0 1
29768: PUSH
29769: CALL_OW 44
29773: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29774: LD_VAR 0 1
29778: PPUSH
29779: LD_INT 1
29781: PPUSH
29782: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29786: LD_INT 35
29788: PPUSH
29789: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29793: LD_VAR 0 1
29797: PPUSH
29798: LD_INT 22
29800: PUSH
29801: LD_OWVAR 2
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PPUSH
29810: CALL_OW 69
29814: PPUSH
29815: LD_VAR 0 1
29819: PPUSH
29820: CALL_OW 74
29824: PPUSH
29825: CALL_OW 115
// until IsDead ( un ) ;
29829: LD_VAR 0 1
29833: PPUSH
29834: CALL_OW 301
29838: IFFALSE 29786
// end ;
29840: PPOPN 1
29842: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29843: LD_EXP 54
29847: IFFALSE 29855
29849: PUSH
29850: LD_EXP 94
29854: AND
29855: IFFALSE 29867
29857: GO 29859
29859: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29860: LD_STRING earthquake(getX(game), 0, 32)
29862: PPUSH
29863: CALL_OW 559
29867: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29868: LD_EXP 54
29872: IFFALSE 29880
29874: PUSH
29875: LD_EXP 95
29879: AND
29880: IFFALSE 29971
29882: GO 29884
29884: DISABLE
29885: LD_INT 0
29887: PPUSH
// begin enable ;
29888: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29889: LD_ADDR_VAR 0 1
29893: PUSH
29894: LD_INT 22
29896: PUSH
29897: LD_OWVAR 2
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 21
29908: PUSH
29909: LD_INT 2
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 33
29918: PUSH
29919: LD_INT 3
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: LIST
29930: PPUSH
29931: CALL_OW 69
29935: ST_TO_ADDR
// if not tmp then
29936: LD_VAR 0 1
29940: NOT
29941: IFFALSE 29945
// exit ;
29943: GO 29971
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29945: LD_VAR 0 1
29949: PUSH
29950: LD_INT 1
29952: PPUSH
29953: LD_VAR 0 1
29957: PPUSH
29958: CALL_OW 12
29962: ARRAY
29963: PPUSH
29964: LD_INT 1
29966: PPUSH
29967: CALL_OW 234
// end ;
29971: PPOPN 1
29973: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29974: LD_EXP 54
29978: IFFALSE 29986
29980: PUSH
29981: LD_EXP 96
29985: AND
29986: IFFALSE 30127
29988: GO 29990
29990: DISABLE
29991: LD_INT 0
29993: PPUSH
29994: PPUSH
29995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29996: LD_ADDR_VAR 0 3
30000: PUSH
30001: LD_INT 22
30003: PUSH
30004: LD_OWVAR 2
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 25
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PPUSH
30027: CALL_OW 69
30031: ST_TO_ADDR
// if not tmp then
30032: LD_VAR 0 3
30036: NOT
30037: IFFALSE 30041
// exit ;
30039: GO 30127
// un := tmp [ rand ( 1 , tmp ) ] ;
30041: LD_ADDR_VAR 0 2
30045: PUSH
30046: LD_VAR 0 3
30050: PUSH
30051: LD_INT 1
30053: PPUSH
30054: LD_VAR 0 3
30058: PPUSH
30059: CALL_OW 12
30063: ARRAY
30064: ST_TO_ADDR
// if Crawls ( un ) then
30065: LD_VAR 0 2
30069: PPUSH
30070: CALL_OW 318
30074: IFFALSE 30085
// ComWalk ( un ) ;
30076: LD_VAR 0 2
30080: PPUSH
30081: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30085: LD_VAR 0 2
30089: PPUSH
30090: LD_INT 9
30092: PPUSH
30093: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30097: LD_INT 28
30099: PPUSH
30100: LD_OWVAR 2
30104: PPUSH
30105: LD_INT 2
30107: PPUSH
30108: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30112: LD_INT 29
30114: PPUSH
30115: LD_OWVAR 2
30119: PPUSH
30120: LD_INT 2
30122: PPUSH
30123: CALL_OW 322
// end ;
30127: PPOPN 3
30129: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30130: LD_EXP 54
30134: IFFALSE 30142
30136: PUSH
30137: LD_EXP 97
30141: AND
30142: IFFALSE 30253
30144: GO 30146
30146: DISABLE
30147: LD_INT 0
30149: PPUSH
30150: PPUSH
30151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30152: LD_ADDR_VAR 0 3
30156: PUSH
30157: LD_INT 22
30159: PUSH
30160: LD_OWVAR 2
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 25
30171: PUSH
30172: LD_INT 1
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PPUSH
30183: CALL_OW 69
30187: ST_TO_ADDR
// if not tmp then
30188: LD_VAR 0 3
30192: NOT
30193: IFFALSE 30197
// exit ;
30195: GO 30253
// un := tmp [ rand ( 1 , tmp ) ] ;
30197: LD_ADDR_VAR 0 2
30201: PUSH
30202: LD_VAR 0 3
30206: PUSH
30207: LD_INT 1
30209: PPUSH
30210: LD_VAR 0 3
30214: PPUSH
30215: CALL_OW 12
30219: ARRAY
30220: ST_TO_ADDR
// if Crawls ( un ) then
30221: LD_VAR 0 2
30225: PPUSH
30226: CALL_OW 318
30230: IFFALSE 30241
// ComWalk ( un ) ;
30232: LD_VAR 0 2
30236: PPUSH
30237: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30241: LD_VAR 0 2
30245: PPUSH
30246: LD_INT 8
30248: PPUSH
30249: CALL_OW 336
// end ;
30253: PPOPN 3
30255: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30256: LD_EXP 54
30260: IFFALSE 30268
30262: PUSH
30263: LD_EXP 98
30267: AND
30268: IFFALSE 30412
30270: GO 30272
30272: DISABLE
30273: LD_INT 0
30275: PPUSH
30276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30277: LD_ADDR_VAR 0 2
30281: PUSH
30282: LD_INT 22
30284: PUSH
30285: LD_OWVAR 2
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 21
30296: PUSH
30297: LD_INT 2
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 2
30306: PUSH
30307: LD_INT 34
30309: PUSH
30310: LD_INT 12
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 34
30319: PUSH
30320: LD_INT 51
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 34
30329: PUSH
30330: LD_INT 32
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: LIST
30347: PPUSH
30348: CALL_OW 69
30352: ST_TO_ADDR
// if not tmp then
30353: LD_VAR 0 2
30357: NOT
30358: IFFALSE 30362
// exit ;
30360: GO 30412
// for i in tmp do
30362: LD_ADDR_VAR 0 1
30366: PUSH
30367: LD_VAR 0 2
30371: PUSH
30372: FOR_IN
30373: IFFALSE 30410
// if GetCargo ( i , mat_artifact ) = 0 then
30375: LD_VAR 0 1
30379: PPUSH
30380: LD_INT 4
30382: PPUSH
30383: CALL_OW 289
30387: PUSH
30388: LD_INT 0
30390: EQUAL
30391: IFFALSE 30408
// SetCargo ( i , mat_siberit , 100 ) ;
30393: LD_VAR 0 1
30397: PPUSH
30398: LD_INT 3
30400: PPUSH
30401: LD_INT 100
30403: PPUSH
30404: CALL_OW 290
30408: GO 30372
30410: POP
30411: POP
// end ;
30412: PPOPN 2
30414: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30415: LD_EXP 54
30419: IFFALSE 30427
30421: PUSH
30422: LD_EXP 99
30426: AND
30427: IFFALSE 30610
30429: GO 30431
30431: DISABLE
30432: LD_INT 0
30434: PPUSH
30435: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30436: LD_ADDR_VAR 0 2
30440: PUSH
30441: LD_INT 22
30443: PUSH
30444: LD_OWVAR 2
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PPUSH
30453: CALL_OW 69
30457: ST_TO_ADDR
// if not tmp then
30458: LD_VAR 0 2
30462: NOT
30463: IFFALSE 30467
// exit ;
30465: GO 30610
// for i := 1 to 2 do
30467: LD_ADDR_VAR 0 1
30471: PUSH
30472: DOUBLE
30473: LD_INT 1
30475: DEC
30476: ST_TO_ADDR
30477: LD_INT 2
30479: PUSH
30480: FOR_TO
30481: IFFALSE 30608
// begin uc_side := your_side ;
30483: LD_ADDR_OWVAR 20
30487: PUSH
30488: LD_OWVAR 2
30492: ST_TO_ADDR
// uc_nation := nation_american ;
30493: LD_ADDR_OWVAR 21
30497: PUSH
30498: LD_INT 1
30500: ST_TO_ADDR
// vc_chassis := us_morphling ;
30501: LD_ADDR_OWVAR 37
30505: PUSH
30506: LD_INT 5
30508: ST_TO_ADDR
// vc_engine := engine_siberite ;
30509: LD_ADDR_OWVAR 39
30513: PUSH
30514: LD_INT 3
30516: ST_TO_ADDR
// vc_control := control_computer ;
30517: LD_ADDR_OWVAR 38
30521: PUSH
30522: LD_INT 3
30524: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30525: LD_ADDR_OWVAR 40
30529: PUSH
30530: LD_INT 10
30532: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30533: LD_VAR 0 2
30537: PUSH
30538: LD_INT 1
30540: ARRAY
30541: PPUSH
30542: CALL_OW 310
30546: NOT
30547: IFFALSE 30594
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30549: CALL_OW 45
30553: PPUSH
30554: LD_VAR 0 2
30558: PUSH
30559: LD_INT 1
30561: ARRAY
30562: PPUSH
30563: CALL_OW 250
30567: PPUSH
30568: LD_VAR 0 2
30572: PUSH
30573: LD_INT 1
30575: ARRAY
30576: PPUSH
30577: CALL_OW 251
30581: PPUSH
30582: LD_INT 12
30584: PPUSH
30585: LD_INT 1
30587: PPUSH
30588: CALL_OW 50
30592: GO 30606
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30594: CALL_OW 45
30598: PPUSH
30599: LD_INT 1
30601: PPUSH
30602: CALL_OW 51
// end ;
30606: GO 30480
30608: POP
30609: POP
// end ;
30610: PPOPN 2
30612: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30613: LD_EXP 54
30617: IFFALSE 30625
30619: PUSH
30620: LD_EXP 100
30624: AND
30625: IFFALSE 30847
30627: GO 30629
30629: DISABLE
30630: LD_INT 0
30632: PPUSH
30633: PPUSH
30634: PPUSH
30635: PPUSH
30636: PPUSH
30637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30638: LD_ADDR_VAR 0 6
30642: PUSH
30643: LD_INT 22
30645: PUSH
30646: LD_OWVAR 2
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 21
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 3
30667: PUSH
30668: LD_INT 23
30670: PUSH
30671: LD_INT 0
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: PPUSH
30687: CALL_OW 69
30691: ST_TO_ADDR
// if not tmp then
30692: LD_VAR 0 6
30696: NOT
30697: IFFALSE 30701
// exit ;
30699: GO 30847
// s1 := rand ( 1 , 4 ) ;
30701: LD_ADDR_VAR 0 2
30705: PUSH
30706: LD_INT 1
30708: PPUSH
30709: LD_INT 4
30711: PPUSH
30712: CALL_OW 12
30716: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30717: LD_ADDR_VAR 0 4
30721: PUSH
30722: LD_VAR 0 6
30726: PUSH
30727: LD_INT 1
30729: ARRAY
30730: PPUSH
30731: LD_VAR 0 2
30735: PPUSH
30736: CALL_OW 259
30740: ST_TO_ADDR
// if s1 = 1 then
30741: LD_VAR 0 2
30745: PUSH
30746: LD_INT 1
30748: EQUAL
30749: IFFALSE 30769
// s2 := rand ( 2 , 4 ) else
30751: LD_ADDR_VAR 0 3
30755: PUSH
30756: LD_INT 2
30758: PPUSH
30759: LD_INT 4
30761: PPUSH
30762: CALL_OW 12
30766: ST_TO_ADDR
30767: GO 30777
// s2 := 1 ;
30769: LD_ADDR_VAR 0 3
30773: PUSH
30774: LD_INT 1
30776: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30777: LD_ADDR_VAR 0 5
30781: PUSH
30782: LD_VAR 0 6
30786: PUSH
30787: LD_INT 1
30789: ARRAY
30790: PPUSH
30791: LD_VAR 0 3
30795: PPUSH
30796: CALL_OW 259
30800: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30801: LD_VAR 0 6
30805: PUSH
30806: LD_INT 1
30808: ARRAY
30809: PPUSH
30810: LD_VAR 0 2
30814: PPUSH
30815: LD_VAR 0 5
30819: PPUSH
30820: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30824: LD_VAR 0 6
30828: PUSH
30829: LD_INT 1
30831: ARRAY
30832: PPUSH
30833: LD_VAR 0 3
30837: PPUSH
30838: LD_VAR 0 4
30842: PPUSH
30843: CALL_OW 237
// end ;
30847: PPOPN 6
30849: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30850: LD_EXP 54
30854: IFFALSE 30862
30856: PUSH
30857: LD_EXP 101
30861: AND
30862: IFFALSE 30941
30864: GO 30866
30866: DISABLE
30867: LD_INT 0
30869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30870: LD_ADDR_VAR 0 1
30874: PUSH
30875: LD_INT 22
30877: PUSH
30878: LD_OWVAR 2
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 30
30889: PUSH
30890: LD_INT 3
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PPUSH
30901: CALL_OW 69
30905: ST_TO_ADDR
// if not tmp then
30906: LD_VAR 0 1
30910: NOT
30911: IFFALSE 30915
// exit ;
30913: GO 30941
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30915: LD_VAR 0 1
30919: PUSH
30920: LD_INT 1
30922: PPUSH
30923: LD_VAR 0 1
30927: PPUSH
30928: CALL_OW 12
30932: ARRAY
30933: PPUSH
30934: LD_INT 1
30936: PPUSH
30937: CALL_OW 234
// end ;
30941: PPOPN 1
30943: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30944: LD_EXP 54
30948: IFFALSE 30956
30950: PUSH
30951: LD_EXP 102
30955: AND
30956: IFFALSE 31068
30958: GO 30960
30960: DISABLE
30961: LD_INT 0
30963: PPUSH
30964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30965: LD_ADDR_VAR 0 2
30969: PUSH
30970: LD_INT 22
30972: PUSH
30973: LD_OWVAR 2
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 2
30984: PUSH
30985: LD_INT 30
30987: PUSH
30988: LD_INT 27
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 30
30997: PUSH
30998: LD_INT 26
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 30
31007: PUSH
31008: LD_INT 28
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PPUSH
31025: CALL_OW 69
31029: ST_TO_ADDR
// if not tmp then
31030: LD_VAR 0 2
31034: NOT
31035: IFFALSE 31039
// exit ;
31037: GO 31068
// for i in tmp do
31039: LD_ADDR_VAR 0 1
31043: PUSH
31044: LD_VAR 0 2
31048: PUSH
31049: FOR_IN
31050: IFFALSE 31066
// SetLives ( i , 1 ) ;
31052: LD_VAR 0 1
31056: PPUSH
31057: LD_INT 1
31059: PPUSH
31060: CALL_OW 234
31064: GO 31049
31066: POP
31067: POP
// end ;
31068: PPOPN 2
31070: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31071: LD_EXP 54
31075: IFFALSE 31083
31077: PUSH
31078: LD_EXP 103
31082: AND
31083: IFFALSE 31370
31085: GO 31087
31087: DISABLE
31088: LD_INT 0
31090: PPUSH
31091: PPUSH
31092: PPUSH
// begin i := rand ( 1 , 7 ) ;
31093: LD_ADDR_VAR 0 1
31097: PUSH
31098: LD_INT 1
31100: PPUSH
31101: LD_INT 7
31103: PPUSH
31104: CALL_OW 12
31108: ST_TO_ADDR
// case i of 1 :
31109: LD_VAR 0 1
31113: PUSH
31114: LD_INT 1
31116: DOUBLE
31117: EQUAL
31118: IFTRUE 31122
31120: GO 31132
31122: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31123: LD_STRING earthquake(getX(game), 0, 32)
31125: PPUSH
31126: CALL_OW 559
31130: GO 31370
31132: LD_INT 2
31134: DOUBLE
31135: EQUAL
31136: IFTRUE 31140
31138: GO 31154
31140: POP
// begin ToLua ( displayStucuk(); ) ;
31141: LD_STRING displayStucuk();
31143: PPUSH
31144: CALL_OW 559
// ResetFog ;
31148: CALL_OW 335
// end ; 3 :
31152: GO 31370
31154: LD_INT 3
31156: DOUBLE
31157: EQUAL
31158: IFTRUE 31162
31160: GO 31266
31162: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31163: LD_ADDR_VAR 0 2
31167: PUSH
31168: LD_INT 22
31170: PUSH
31171: LD_OWVAR 2
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 25
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PPUSH
31194: CALL_OW 69
31198: ST_TO_ADDR
// if not tmp then
31199: LD_VAR 0 2
31203: NOT
31204: IFFALSE 31208
// exit ;
31206: GO 31370
// un := tmp [ rand ( 1 , tmp ) ] ;
31208: LD_ADDR_VAR 0 3
31212: PUSH
31213: LD_VAR 0 2
31217: PUSH
31218: LD_INT 1
31220: PPUSH
31221: LD_VAR 0 2
31225: PPUSH
31226: CALL_OW 12
31230: ARRAY
31231: ST_TO_ADDR
// if Crawls ( un ) then
31232: LD_VAR 0 3
31236: PPUSH
31237: CALL_OW 318
31241: IFFALSE 31252
// ComWalk ( un ) ;
31243: LD_VAR 0 3
31247: PPUSH
31248: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31252: LD_VAR 0 3
31256: PPUSH
31257: LD_INT 8
31259: PPUSH
31260: CALL_OW 336
// end ; 4 :
31264: GO 31370
31266: LD_INT 4
31268: DOUBLE
31269: EQUAL
31270: IFTRUE 31274
31272: GO 31348
31274: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31275: LD_ADDR_VAR 0 2
31279: PUSH
31280: LD_INT 22
31282: PUSH
31283: LD_OWVAR 2
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 30
31294: PUSH
31295: LD_INT 29
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PPUSH
31306: CALL_OW 69
31310: ST_TO_ADDR
// if not tmp then
31311: LD_VAR 0 2
31315: NOT
31316: IFFALSE 31320
// exit ;
31318: GO 31370
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31320: LD_VAR 0 2
31324: PUSH
31325: LD_INT 1
31327: ARRAY
31328: PPUSH
31329: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31333: LD_VAR 0 2
31337: PUSH
31338: LD_INT 1
31340: ARRAY
31341: PPUSH
31342: CALL_OW 65
// end ; 5 .. 7 :
31346: GO 31370
31348: LD_INT 5
31350: DOUBLE
31351: GREATEREQUAL
31352: IFFALSE 31360
31354: LD_INT 7
31356: DOUBLE
31357: LESSEQUAL
31358: IFTRUE 31362
31360: GO 31369
31362: POP
// StreamSibBomb ; end ;
31363: CALL 27551 0 0
31367: GO 31370
31369: POP
// end ;
31370: PPOPN 3
31372: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31373: LD_EXP 54
31377: IFFALSE 31385
31379: PUSH
31380: LD_EXP 104
31384: AND
31385: IFFALSE 31541
31387: GO 31389
31389: DISABLE
31390: LD_INT 0
31392: PPUSH
31393: PPUSH
31394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31395: LD_ADDR_VAR 0 2
31399: PUSH
31400: LD_INT 81
31402: PUSH
31403: LD_OWVAR 2
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 2
31414: PUSH
31415: LD_INT 21
31417: PUSH
31418: LD_INT 1
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 21
31427: PUSH
31428: LD_INT 2
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PPUSH
31444: CALL_OW 69
31448: ST_TO_ADDR
// if not tmp then
31449: LD_VAR 0 2
31453: NOT
31454: IFFALSE 31458
// exit ;
31456: GO 31541
// p := 0 ;
31458: LD_ADDR_VAR 0 3
31462: PUSH
31463: LD_INT 0
31465: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31466: LD_INT 35
31468: PPUSH
31469: CALL_OW 67
// p := p + 1 ;
31473: LD_ADDR_VAR 0 3
31477: PUSH
31478: LD_VAR 0 3
31482: PUSH
31483: LD_INT 1
31485: PLUS
31486: ST_TO_ADDR
// for i in tmp do
31487: LD_ADDR_VAR 0 1
31491: PUSH
31492: LD_VAR 0 2
31496: PUSH
31497: FOR_IN
31498: IFFALSE 31529
// if GetLives ( i ) < 1000 then
31500: LD_VAR 0 1
31504: PPUSH
31505: CALL_OW 256
31509: PUSH
31510: LD_INT 1000
31512: LESS
31513: IFFALSE 31527
// SetLives ( i , 1000 ) ;
31515: LD_VAR 0 1
31519: PPUSH
31520: LD_INT 1000
31522: PPUSH
31523: CALL_OW 234
31527: GO 31497
31529: POP
31530: POP
// until p > 20 ;
31531: LD_VAR 0 3
31535: PUSH
31536: LD_INT 20
31538: GREATER
31539: IFFALSE 31466
// end ;
31541: PPOPN 3
31543: END
// every 0 0$1 trigger StreamModeActive and sTime do
31544: LD_EXP 54
31548: IFFALSE 31556
31550: PUSH
31551: LD_EXP 105
31555: AND
31556: IFFALSE 31591
31558: GO 31560
31560: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31561: LD_INT 28
31563: PPUSH
31564: LD_OWVAR 2
31568: PPUSH
31569: LD_INT 2
31571: PPUSH
31572: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31576: LD_INT 30
31578: PPUSH
31579: LD_OWVAR 2
31583: PPUSH
31584: LD_INT 2
31586: PPUSH
31587: CALL_OW 322
// end ;
31591: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31592: LD_EXP 54
31596: IFFALSE 31604
31598: PUSH
31599: LD_EXP 106
31603: AND
31604: IFFALSE 31725
31606: GO 31608
31608: DISABLE
31609: LD_INT 0
31611: PPUSH
31612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31613: LD_ADDR_VAR 0 2
31617: PUSH
31618: LD_INT 22
31620: PUSH
31621: LD_OWVAR 2
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 21
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 3
31642: PUSH
31643: LD_INT 23
31645: PUSH
31646: LD_INT 0
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: LIST
31661: PPUSH
31662: CALL_OW 69
31666: ST_TO_ADDR
// if not tmp then
31667: LD_VAR 0 2
31671: NOT
31672: IFFALSE 31676
// exit ;
31674: GO 31725
// for i in tmp do
31676: LD_ADDR_VAR 0 1
31680: PUSH
31681: LD_VAR 0 2
31685: PUSH
31686: FOR_IN
31687: IFFALSE 31723
// begin if Crawls ( i ) then
31689: LD_VAR 0 1
31693: PPUSH
31694: CALL_OW 318
31698: IFFALSE 31709
// ComWalk ( i ) ;
31700: LD_VAR 0 1
31704: PPUSH
31705: CALL_OW 138
// SetClass ( i , 2 ) ;
31709: LD_VAR 0 1
31713: PPUSH
31714: LD_INT 2
31716: PPUSH
31717: CALL_OW 336
// end ;
31721: GO 31686
31723: POP
31724: POP
// end ;
31725: PPOPN 2
31727: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31728: LD_EXP 54
31732: IFFALSE 31740
31734: PUSH
31735: LD_EXP 107
31739: AND
31740: IFFALSE 32030
31742: GO 31744
31744: DISABLE
31745: LD_INT 0
31747: PPUSH
31748: PPUSH
31749: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31750: LD_OWVAR 2
31754: PPUSH
31755: LD_INT 9
31757: PPUSH
31758: LD_INT 1
31760: PPUSH
31761: LD_INT 1
31763: PPUSH
31764: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31768: LD_INT 9
31770: PPUSH
31771: LD_OWVAR 2
31775: PPUSH
31776: CALL_OW 343
// uc_side := 9 ;
31780: LD_ADDR_OWVAR 20
31784: PUSH
31785: LD_INT 9
31787: ST_TO_ADDR
// uc_nation := 2 ;
31788: LD_ADDR_OWVAR 21
31792: PUSH
31793: LD_INT 2
31795: ST_TO_ADDR
// hc_name := Dark Warrior ;
31796: LD_ADDR_OWVAR 26
31800: PUSH
31801: LD_STRING Dark Warrior
31803: ST_TO_ADDR
// hc_gallery :=  ;
31804: LD_ADDR_OWVAR 33
31808: PUSH
31809: LD_STRING 
31811: ST_TO_ADDR
// hc_noskilllimit := true ;
31812: LD_ADDR_OWVAR 76
31816: PUSH
31817: LD_INT 1
31819: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31820: LD_ADDR_OWVAR 31
31824: PUSH
31825: LD_INT 30
31827: PUSH
31828: LD_INT 30
31830: PUSH
31831: LD_INT 30
31833: PUSH
31834: LD_INT 30
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: ST_TO_ADDR
// un := CreateHuman ;
31843: LD_ADDR_VAR 0 3
31847: PUSH
31848: CALL_OW 44
31852: ST_TO_ADDR
// hc_noskilllimit := false ;
31853: LD_ADDR_OWVAR 76
31857: PUSH
31858: LD_INT 0
31860: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31861: LD_VAR 0 3
31865: PPUSH
31866: LD_INT 1
31868: PPUSH
31869: CALL_OW 51
// ToLua ( playRanger() ) ;
31873: LD_STRING playRanger()
31875: PPUSH
31876: CALL_OW 559
// p := 0 ;
31880: LD_ADDR_VAR 0 2
31884: PUSH
31885: LD_INT 0
31887: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31888: LD_INT 35
31890: PPUSH
31891: CALL_OW 67
// p := p + 1 ;
31895: LD_ADDR_VAR 0 2
31899: PUSH
31900: LD_VAR 0 2
31904: PUSH
31905: LD_INT 1
31907: PLUS
31908: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31909: LD_VAR 0 3
31913: PPUSH
31914: CALL_OW 256
31918: PUSH
31919: LD_INT 1000
31921: LESS
31922: IFFALSE 31936
// SetLives ( un , 1000 ) ;
31924: LD_VAR 0 3
31928: PPUSH
31929: LD_INT 1000
31931: PPUSH
31932: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31936: LD_VAR 0 3
31940: PPUSH
31941: LD_INT 81
31943: PUSH
31944: LD_OWVAR 2
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 91
31955: PUSH
31956: LD_VAR 0 3
31960: PUSH
31961: LD_INT 30
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: LIST
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PPUSH
31973: CALL_OW 69
31977: PPUSH
31978: LD_VAR 0 3
31982: PPUSH
31983: CALL_OW 74
31987: PPUSH
31988: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31992: LD_VAR 0 2
31996: PUSH
31997: LD_INT 80
31999: GREATER
32000: IFTRUE 32013
32002: PUSH
32003: LD_VAR 0 3
32007: PPUSH
32008: CALL_OW 301
32012: OR
32013: IFFALSE 31888
// if un then
32015: LD_VAR 0 3
32019: IFFALSE 32030
// RemoveUnit ( un ) ;
32021: LD_VAR 0 3
32025: PPUSH
32026: CALL_OW 64
// end ;
32030: PPOPN 3
32032: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32033: LD_EXP 108
32037: IFFALSE 32153
32039: GO 32041
32041: DISABLE
32042: LD_INT 0
32044: PPUSH
32045: PPUSH
32046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32047: LD_ADDR_VAR 0 2
32051: PUSH
32052: LD_INT 81
32054: PUSH
32055: LD_OWVAR 2
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 21
32066: PUSH
32067: LD_INT 1
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PPUSH
32078: CALL_OW 69
32082: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32083: LD_STRING playComputer()
32085: PPUSH
32086: CALL_OW 559
// if not tmp then
32090: LD_VAR 0 2
32094: NOT
32095: IFFALSE 32099
// exit ;
32097: GO 32153
// for i in tmp do
32099: LD_ADDR_VAR 0 1
32103: PUSH
32104: LD_VAR 0 2
32108: PUSH
32109: FOR_IN
32110: IFFALSE 32151
// for j := 1 to 4 do
32112: LD_ADDR_VAR 0 3
32116: PUSH
32117: DOUBLE
32118: LD_INT 1
32120: DEC
32121: ST_TO_ADDR
32122: LD_INT 4
32124: PUSH
32125: FOR_TO
32126: IFFALSE 32147
// SetSkill ( i , j , 10 ) ;
32128: LD_VAR 0 1
32132: PPUSH
32133: LD_VAR 0 3
32137: PPUSH
32138: LD_INT 10
32140: PPUSH
32141: CALL_OW 237
32145: GO 32125
32147: POP
32148: POP
32149: GO 32109
32151: POP
32152: POP
// end ;
32153: PPOPN 3
32155: END
// every 0 0$1 trigger s30 do var i , tmp ;
32156: LD_EXP 109
32160: IFFALSE 32229
32162: GO 32164
32164: DISABLE
32165: LD_INT 0
32167: PPUSH
32168: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32169: LD_ADDR_VAR 0 2
32173: PUSH
32174: LD_INT 22
32176: PUSH
32177: LD_OWVAR 2
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PPUSH
32186: CALL_OW 69
32190: ST_TO_ADDR
// if not tmp then
32191: LD_VAR 0 2
32195: NOT
32196: IFFALSE 32200
// exit ;
32198: GO 32229
// for i in tmp do
32200: LD_ADDR_VAR 0 1
32204: PUSH
32205: LD_VAR 0 2
32209: PUSH
32210: FOR_IN
32211: IFFALSE 32227
// SetLives ( i , 300 ) ;
32213: LD_VAR 0 1
32217: PPUSH
32218: LD_INT 300
32220: PPUSH
32221: CALL_OW 234
32225: GO 32210
32227: POP
32228: POP
// end ;
32229: PPOPN 2
32231: END
// every 0 0$1 trigger s60 do var i , tmp ;
32232: LD_EXP 110
32236: IFFALSE 32305
32238: GO 32240
32240: DISABLE
32241: LD_INT 0
32243: PPUSH
32244: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32245: LD_ADDR_VAR 0 2
32249: PUSH
32250: LD_INT 22
32252: PUSH
32253: LD_OWVAR 2
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PPUSH
32262: CALL_OW 69
32266: ST_TO_ADDR
// if not tmp then
32267: LD_VAR 0 2
32271: NOT
32272: IFFALSE 32276
// exit ;
32274: GO 32305
// for i in tmp do
32276: LD_ADDR_VAR 0 1
32280: PUSH
32281: LD_VAR 0 2
32285: PUSH
32286: FOR_IN
32287: IFFALSE 32303
// SetLives ( i , 600 ) ;
32289: LD_VAR 0 1
32293: PPUSH
32294: LD_INT 600
32296: PPUSH
32297: CALL_OW 234
32301: GO 32286
32303: POP
32304: POP
// end ;
32305: PPOPN 2
32307: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32308: LD_INT 0
32310: PPUSH
// case cmd of 301 :
32311: LD_VAR 0 1
32315: PUSH
32316: LD_INT 301
32318: DOUBLE
32319: EQUAL
32320: IFTRUE 32324
32322: GO 32356
32324: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32325: LD_VAR 0 6
32329: PPUSH
32330: LD_VAR 0 7
32334: PPUSH
32335: LD_VAR 0 8
32339: PPUSH
32340: LD_VAR 0 4
32344: PPUSH
32345: LD_VAR 0 5
32349: PPUSH
32350: CALL 33569 0 5
32354: GO 32477
32356: LD_INT 302
32358: DOUBLE
32359: EQUAL
32360: IFTRUE 32364
32362: GO 32401
32364: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32365: LD_VAR 0 6
32369: PPUSH
32370: LD_VAR 0 7
32374: PPUSH
32375: LD_VAR 0 8
32379: PPUSH
32380: LD_VAR 0 9
32384: PPUSH
32385: LD_VAR 0 4
32389: PPUSH
32390: LD_VAR 0 5
32394: PPUSH
32395: CALL 33660 0 6
32399: GO 32477
32401: LD_INT 303
32403: DOUBLE
32404: EQUAL
32405: IFTRUE 32409
32407: GO 32446
32409: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32410: LD_VAR 0 6
32414: PPUSH
32415: LD_VAR 0 7
32419: PPUSH
32420: LD_VAR 0 8
32424: PPUSH
32425: LD_VAR 0 9
32429: PPUSH
32430: LD_VAR 0 4
32434: PPUSH
32435: LD_VAR 0 5
32439: PPUSH
32440: CALL 32482 0 6
32444: GO 32477
32446: LD_INT 304
32448: DOUBLE
32449: EQUAL
32450: IFTRUE 32454
32452: GO 32476
32454: POP
// hHackTeleport ( unit , x , y ) ; end ;
32455: LD_VAR 0 2
32459: PPUSH
32460: LD_VAR 0 4
32464: PPUSH
32465: LD_VAR 0 5
32469: PPUSH
32470: CALL 34253 0 3
32474: GO 32477
32476: POP
// end ;
32477: LD_VAR 0 12
32481: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32482: LD_INT 0
32484: PPUSH
32485: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32486: LD_VAR 0 1
32490: PUSH
32491: LD_INT 1
32493: LESS
32494: IFTRUE 32506
32496: PUSH
32497: LD_VAR 0 1
32501: PUSH
32502: LD_INT 3
32504: GREATER
32505: OR
32506: IFTRUE 32524
32508: PUSH
32509: LD_VAR 0 5
32513: PPUSH
32514: LD_VAR 0 6
32518: PPUSH
32519: CALL_OW 428
32523: OR
32524: IFFALSE 32528
// exit ;
32526: GO 33256
// uc_side := your_side ;
32528: LD_ADDR_OWVAR 20
32532: PUSH
32533: LD_OWVAR 2
32537: ST_TO_ADDR
// uc_nation := nation ;
32538: LD_ADDR_OWVAR 21
32542: PUSH
32543: LD_VAR 0 1
32547: ST_TO_ADDR
// bc_level = 1 ;
32548: LD_ADDR_OWVAR 43
32552: PUSH
32553: LD_INT 1
32555: ST_TO_ADDR
// case btype of 1 :
32556: LD_VAR 0 2
32560: PUSH
32561: LD_INT 1
32563: DOUBLE
32564: EQUAL
32565: IFTRUE 32569
32567: GO 32580
32569: POP
// bc_type := b_depot ; 2 :
32570: LD_ADDR_OWVAR 42
32574: PUSH
32575: LD_INT 0
32577: ST_TO_ADDR
32578: GO 33200
32580: LD_INT 2
32582: DOUBLE
32583: EQUAL
32584: IFTRUE 32588
32586: GO 32599
32588: POP
// bc_type := b_warehouse ; 3 :
32589: LD_ADDR_OWVAR 42
32593: PUSH
32594: LD_INT 1
32596: ST_TO_ADDR
32597: GO 33200
32599: LD_INT 3
32601: DOUBLE
32602: EQUAL
32603: IFTRUE 32607
32605: GO 32618
32607: POP
// bc_type := b_lab ; 4 .. 9 :
32608: LD_ADDR_OWVAR 42
32612: PUSH
32613: LD_INT 6
32615: ST_TO_ADDR
32616: GO 33200
32618: LD_INT 4
32620: DOUBLE
32621: GREATEREQUAL
32622: IFFALSE 32630
32624: LD_INT 9
32626: DOUBLE
32627: LESSEQUAL
32628: IFTRUE 32632
32630: GO 32692
32632: POP
// begin bc_type := b_lab_half ;
32633: LD_ADDR_OWVAR 42
32637: PUSH
32638: LD_INT 7
32640: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32641: LD_ADDR_OWVAR 44
32645: PUSH
32646: LD_INT 10
32648: PUSH
32649: LD_INT 11
32651: PUSH
32652: LD_INT 12
32654: PUSH
32655: LD_INT 15
32657: PUSH
32658: LD_INT 14
32660: PUSH
32661: LD_INT 13
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: PUSH
32672: LD_VAR 0 2
32676: PUSH
32677: LD_INT 3
32679: MINUS
32680: ARRAY
32681: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32682: LD_ADDR_OWVAR 45
32686: PUSH
32687: LD_INT 9
32689: ST_TO_ADDR
// end ; 10 .. 13 :
32690: GO 33200
32692: LD_INT 10
32694: DOUBLE
32695: GREATEREQUAL
32696: IFFALSE 32704
32698: LD_INT 13
32700: DOUBLE
32701: LESSEQUAL
32702: IFTRUE 32706
32704: GO 32783
32706: POP
// begin bc_type := b_lab_full ;
32707: LD_ADDR_OWVAR 42
32711: PUSH
32712: LD_INT 8
32714: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32715: LD_ADDR_OWVAR 44
32719: PUSH
32720: LD_INT 10
32722: PUSH
32723: LD_INT 12
32725: PUSH
32726: LD_INT 14
32728: PUSH
32729: LD_INT 13
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: PUSH
32738: LD_VAR 0 2
32742: PUSH
32743: LD_INT 9
32745: MINUS
32746: ARRAY
32747: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32748: LD_ADDR_OWVAR 45
32752: PUSH
32753: LD_INT 11
32755: PUSH
32756: LD_INT 15
32758: PUSH
32759: LD_INT 12
32761: PUSH
32762: LD_INT 15
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: PUSH
32771: LD_VAR 0 2
32775: PUSH
32776: LD_INT 9
32778: MINUS
32779: ARRAY
32780: ST_TO_ADDR
// end ; 14 :
32781: GO 33200
32783: LD_INT 14
32785: DOUBLE
32786: EQUAL
32787: IFTRUE 32791
32789: GO 32802
32791: POP
// bc_type := b_workshop ; 15 :
32792: LD_ADDR_OWVAR 42
32796: PUSH
32797: LD_INT 2
32799: ST_TO_ADDR
32800: GO 33200
32802: LD_INT 15
32804: DOUBLE
32805: EQUAL
32806: IFTRUE 32810
32808: GO 32821
32810: POP
// bc_type := b_factory ; 16 :
32811: LD_ADDR_OWVAR 42
32815: PUSH
32816: LD_INT 3
32818: ST_TO_ADDR
32819: GO 33200
32821: LD_INT 16
32823: DOUBLE
32824: EQUAL
32825: IFTRUE 32829
32827: GO 32840
32829: POP
// bc_type := b_ext_gun ; 17 :
32830: LD_ADDR_OWVAR 42
32834: PUSH
32835: LD_INT 17
32837: ST_TO_ADDR
32838: GO 33200
32840: LD_INT 17
32842: DOUBLE
32843: EQUAL
32844: IFTRUE 32848
32846: GO 32876
32848: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32849: LD_ADDR_OWVAR 42
32853: PUSH
32854: LD_INT 19
32856: PUSH
32857: LD_INT 23
32859: PUSH
32860: LD_INT 19
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: LIST
32867: PUSH
32868: LD_VAR 0 1
32872: ARRAY
32873: ST_TO_ADDR
32874: GO 33200
32876: LD_INT 18
32878: DOUBLE
32879: EQUAL
32880: IFTRUE 32884
32882: GO 32895
32884: POP
// bc_type := b_ext_radar ; 19 :
32885: LD_ADDR_OWVAR 42
32889: PUSH
32890: LD_INT 20
32892: ST_TO_ADDR
32893: GO 33200
32895: LD_INT 19
32897: DOUBLE
32898: EQUAL
32899: IFTRUE 32903
32901: GO 32914
32903: POP
// bc_type := b_ext_radio ; 20 :
32904: LD_ADDR_OWVAR 42
32908: PUSH
32909: LD_INT 22
32911: ST_TO_ADDR
32912: GO 33200
32914: LD_INT 20
32916: DOUBLE
32917: EQUAL
32918: IFTRUE 32922
32920: GO 32933
32922: POP
// bc_type := b_ext_siberium ; 21 :
32923: LD_ADDR_OWVAR 42
32927: PUSH
32928: LD_INT 21
32930: ST_TO_ADDR
32931: GO 33200
32933: LD_INT 21
32935: DOUBLE
32936: EQUAL
32937: IFTRUE 32941
32939: GO 32952
32941: POP
// bc_type := b_ext_computer ; 22 :
32942: LD_ADDR_OWVAR 42
32946: PUSH
32947: LD_INT 24
32949: ST_TO_ADDR
32950: GO 33200
32952: LD_INT 22
32954: DOUBLE
32955: EQUAL
32956: IFTRUE 32960
32958: GO 32971
32960: POP
// bc_type := b_ext_track ; 23 :
32961: LD_ADDR_OWVAR 42
32965: PUSH
32966: LD_INT 16
32968: ST_TO_ADDR
32969: GO 33200
32971: LD_INT 23
32973: DOUBLE
32974: EQUAL
32975: IFTRUE 32979
32977: GO 32990
32979: POP
// bc_type := b_ext_laser ; 24 :
32980: LD_ADDR_OWVAR 42
32984: PUSH
32985: LD_INT 25
32987: ST_TO_ADDR
32988: GO 33200
32990: LD_INT 24
32992: DOUBLE
32993: EQUAL
32994: IFTRUE 32998
32996: GO 33009
32998: POP
// bc_type := b_control_tower ; 25 :
32999: LD_ADDR_OWVAR 42
33003: PUSH
33004: LD_INT 36
33006: ST_TO_ADDR
33007: GO 33200
33009: LD_INT 25
33011: DOUBLE
33012: EQUAL
33013: IFTRUE 33017
33015: GO 33028
33017: POP
// bc_type := b_breastwork ; 26 :
33018: LD_ADDR_OWVAR 42
33022: PUSH
33023: LD_INT 31
33025: ST_TO_ADDR
33026: GO 33200
33028: LD_INT 26
33030: DOUBLE
33031: EQUAL
33032: IFTRUE 33036
33034: GO 33047
33036: POP
// bc_type := b_bunker ; 27 :
33037: LD_ADDR_OWVAR 42
33041: PUSH
33042: LD_INT 32
33044: ST_TO_ADDR
33045: GO 33200
33047: LD_INT 27
33049: DOUBLE
33050: EQUAL
33051: IFTRUE 33055
33053: GO 33066
33055: POP
// bc_type := b_turret ; 28 :
33056: LD_ADDR_OWVAR 42
33060: PUSH
33061: LD_INT 33
33063: ST_TO_ADDR
33064: GO 33200
33066: LD_INT 28
33068: DOUBLE
33069: EQUAL
33070: IFTRUE 33074
33072: GO 33085
33074: POP
// bc_type := b_armoury ; 29 :
33075: LD_ADDR_OWVAR 42
33079: PUSH
33080: LD_INT 4
33082: ST_TO_ADDR
33083: GO 33200
33085: LD_INT 29
33087: DOUBLE
33088: EQUAL
33089: IFTRUE 33093
33091: GO 33104
33093: POP
// bc_type := b_barracks ; 30 :
33094: LD_ADDR_OWVAR 42
33098: PUSH
33099: LD_INT 5
33101: ST_TO_ADDR
33102: GO 33200
33104: LD_INT 30
33106: DOUBLE
33107: EQUAL
33108: IFTRUE 33112
33110: GO 33123
33112: POP
// bc_type := b_solar_power ; 31 :
33113: LD_ADDR_OWVAR 42
33117: PUSH
33118: LD_INT 27
33120: ST_TO_ADDR
33121: GO 33200
33123: LD_INT 31
33125: DOUBLE
33126: EQUAL
33127: IFTRUE 33131
33129: GO 33142
33131: POP
// bc_type := b_oil_power ; 32 :
33132: LD_ADDR_OWVAR 42
33136: PUSH
33137: LD_INT 26
33139: ST_TO_ADDR
33140: GO 33200
33142: LD_INT 32
33144: DOUBLE
33145: EQUAL
33146: IFTRUE 33150
33148: GO 33161
33150: POP
// bc_type := b_siberite_power ; 33 :
33151: LD_ADDR_OWVAR 42
33155: PUSH
33156: LD_INT 28
33158: ST_TO_ADDR
33159: GO 33200
33161: LD_INT 33
33163: DOUBLE
33164: EQUAL
33165: IFTRUE 33169
33167: GO 33180
33169: POP
// bc_type := b_oil_mine ; 34 :
33170: LD_ADDR_OWVAR 42
33174: PUSH
33175: LD_INT 29
33177: ST_TO_ADDR
33178: GO 33200
33180: LD_INT 34
33182: DOUBLE
33183: EQUAL
33184: IFTRUE 33188
33186: GO 33199
33188: POP
// bc_type := b_siberite_mine ; end ;
33189: LD_ADDR_OWVAR 42
33193: PUSH
33194: LD_INT 30
33196: ST_TO_ADDR
33197: GO 33200
33199: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33200: LD_ADDR_VAR 0 8
33204: PUSH
33205: LD_VAR 0 5
33209: PPUSH
33210: LD_VAR 0 6
33214: PPUSH
33215: LD_VAR 0 3
33219: PPUSH
33220: CALL_OW 47
33224: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33225: LD_OWVAR 42
33229: PUSH
33230: LD_INT 32
33232: PUSH
33233: LD_INT 33
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: IN
33240: IFFALSE 33256
// PlaceWeaponTurret ( b , weapon ) ;
33242: LD_VAR 0 8
33246: PPUSH
33247: LD_VAR 0 4
33251: PPUSH
33252: CALL_OW 431
// end ;
33256: LD_VAR 0 7
33260: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33261: LD_INT 0
33263: PPUSH
33264: PPUSH
33265: PPUSH
33266: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33267: LD_ADDR_VAR 0 4
33271: PUSH
33272: LD_INT 22
33274: PUSH
33275: LD_OWVAR 2
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 2
33286: PUSH
33287: LD_INT 30
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 30
33299: PUSH
33300: LD_INT 1
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: LIST
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PPUSH
33316: CALL_OW 69
33320: ST_TO_ADDR
// if not tmp then
33321: LD_VAR 0 4
33325: NOT
33326: IFFALSE 33330
// exit ;
33328: GO 33389
// for i in tmp do
33330: LD_ADDR_VAR 0 2
33334: PUSH
33335: LD_VAR 0 4
33339: PUSH
33340: FOR_IN
33341: IFFALSE 33387
// for j = 1 to 3 do
33343: LD_ADDR_VAR 0 3
33347: PUSH
33348: DOUBLE
33349: LD_INT 1
33351: DEC
33352: ST_TO_ADDR
33353: LD_INT 3
33355: PUSH
33356: FOR_TO
33357: IFFALSE 33383
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33359: LD_VAR 0 2
33363: PPUSH
33364: CALL_OW 274
33368: PPUSH
33369: LD_VAR 0 3
33373: PPUSH
33374: LD_INT 99999
33376: PPUSH
33377: CALL_OW 277
33381: GO 33356
33383: POP
33384: POP
33385: GO 33340
33387: POP
33388: POP
// end ;
33389: LD_VAR 0 1
33393: RET
// export function hHackSetLevel10 ; var i , j ; begin
33394: LD_INT 0
33396: PPUSH
33397: PPUSH
33398: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33399: LD_ADDR_VAR 0 2
33403: PUSH
33404: LD_INT 21
33406: PUSH
33407: LD_INT 1
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PPUSH
33414: CALL_OW 69
33418: PUSH
33419: FOR_IN
33420: IFFALSE 33472
// if IsSelected ( i ) then
33422: LD_VAR 0 2
33426: PPUSH
33427: CALL_OW 306
33431: IFFALSE 33470
// begin for j := 1 to 4 do
33433: LD_ADDR_VAR 0 3
33437: PUSH
33438: DOUBLE
33439: LD_INT 1
33441: DEC
33442: ST_TO_ADDR
33443: LD_INT 4
33445: PUSH
33446: FOR_TO
33447: IFFALSE 33468
// SetSkill ( i , j , 10 ) ;
33449: LD_VAR 0 2
33453: PPUSH
33454: LD_VAR 0 3
33458: PPUSH
33459: LD_INT 10
33461: PPUSH
33462: CALL_OW 237
33466: GO 33446
33468: POP
33469: POP
// end ;
33470: GO 33419
33472: POP
33473: POP
// end ;
33474: LD_VAR 0 1
33478: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33479: LD_INT 0
33481: PPUSH
33482: PPUSH
33483: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33484: LD_ADDR_VAR 0 2
33488: PUSH
33489: LD_INT 22
33491: PUSH
33492: LD_OWVAR 2
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 21
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PPUSH
33515: CALL_OW 69
33519: PUSH
33520: FOR_IN
33521: IFFALSE 33562
// begin for j := 1 to 4 do
33523: LD_ADDR_VAR 0 3
33527: PUSH
33528: DOUBLE
33529: LD_INT 1
33531: DEC
33532: ST_TO_ADDR
33533: LD_INT 4
33535: PUSH
33536: FOR_TO
33537: IFFALSE 33558
// SetSkill ( i , j , 10 ) ;
33539: LD_VAR 0 2
33543: PPUSH
33544: LD_VAR 0 3
33548: PPUSH
33549: LD_INT 10
33551: PPUSH
33552: CALL_OW 237
33556: GO 33536
33558: POP
33559: POP
// end ;
33560: GO 33520
33562: POP
33563: POP
// end ;
33564: LD_VAR 0 1
33568: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33569: LD_INT 0
33571: PPUSH
// uc_side := your_side ;
33572: LD_ADDR_OWVAR 20
33576: PUSH
33577: LD_OWVAR 2
33581: ST_TO_ADDR
// uc_nation := nation ;
33582: LD_ADDR_OWVAR 21
33586: PUSH
33587: LD_VAR 0 1
33591: ST_TO_ADDR
// InitHc ;
33592: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33596: LD_INT 0
33598: PPUSH
33599: LD_VAR 0 2
33603: PPUSH
33604: LD_VAR 0 3
33608: PPUSH
33609: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33613: LD_VAR 0 4
33617: PPUSH
33618: LD_VAR 0 5
33622: PPUSH
33623: CALL_OW 428
33627: PUSH
33628: LD_INT 0
33630: EQUAL
33631: IFFALSE 33655
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33633: CALL_OW 44
33637: PPUSH
33638: LD_VAR 0 4
33642: PPUSH
33643: LD_VAR 0 5
33647: PPUSH
33648: LD_INT 1
33650: PPUSH
33651: CALL_OW 48
// end ;
33655: LD_VAR 0 6
33659: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33660: LD_INT 0
33662: PPUSH
33663: PPUSH
// uc_side := your_side ;
33664: LD_ADDR_OWVAR 20
33668: PUSH
33669: LD_OWVAR 2
33673: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33674: LD_VAR 0 1
33678: PUSH
33679: LD_INT 1
33681: PUSH
33682: LD_INT 2
33684: PUSH
33685: LD_INT 3
33687: PUSH
33688: LD_INT 4
33690: PUSH
33691: LD_INT 5
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: IN
33701: IFFALSE 33713
// uc_nation := nation_american else
33703: LD_ADDR_OWVAR 21
33707: PUSH
33708: LD_INT 1
33710: ST_TO_ADDR
33711: GO 33756
// if chassis in [ 11 , 12 , 13 , 14 ] then
33713: LD_VAR 0 1
33717: PUSH
33718: LD_INT 11
33720: PUSH
33721: LD_INT 12
33723: PUSH
33724: LD_INT 13
33726: PUSH
33727: LD_INT 14
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: IN
33736: IFFALSE 33748
// uc_nation := nation_arabian else
33738: LD_ADDR_OWVAR 21
33742: PUSH
33743: LD_INT 2
33745: ST_TO_ADDR
33746: GO 33756
// uc_nation := nation_russian ;
33748: LD_ADDR_OWVAR 21
33752: PUSH
33753: LD_INT 3
33755: ST_TO_ADDR
// vc_chassis := chassis ;
33756: LD_ADDR_OWVAR 37
33760: PUSH
33761: LD_VAR 0 1
33765: ST_TO_ADDR
// vc_engine := engine ;
33766: LD_ADDR_OWVAR 39
33770: PUSH
33771: LD_VAR 0 2
33775: ST_TO_ADDR
// vc_control := control ;
33776: LD_ADDR_OWVAR 38
33780: PUSH
33781: LD_VAR 0 3
33785: ST_TO_ADDR
// vc_weapon := weapon ;
33786: LD_ADDR_OWVAR 40
33790: PUSH
33791: LD_VAR 0 4
33795: ST_TO_ADDR
// un := CreateVehicle ;
33796: LD_ADDR_VAR 0 8
33800: PUSH
33801: CALL_OW 45
33805: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33806: LD_VAR 0 8
33810: PPUSH
33811: LD_INT 0
33813: PPUSH
33814: LD_INT 5
33816: PPUSH
33817: CALL_OW 12
33821: PPUSH
33822: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33826: LD_VAR 0 8
33830: PPUSH
33831: LD_VAR 0 5
33835: PPUSH
33836: LD_VAR 0 6
33840: PPUSH
33841: LD_INT 1
33843: PPUSH
33844: CALL_OW 48
// end ;
33848: LD_VAR 0 7
33852: RET
// export hInvincible ; every 1 do
33853: GO 33855
33855: DISABLE
// hInvincible := [ ] ;
33856: LD_ADDR_EXP 111
33860: PUSH
33861: EMPTY
33862: ST_TO_ADDR
33863: END
// every 10 do var i ;
33864: GO 33866
33866: DISABLE
33867: LD_INT 0
33869: PPUSH
// begin enable ;
33870: ENABLE
// if not hInvincible then
33871: LD_EXP 111
33875: NOT
33876: IFFALSE 33880
// exit ;
33878: GO 33924
// for i in hInvincible do
33880: LD_ADDR_VAR 0 1
33884: PUSH
33885: LD_EXP 111
33889: PUSH
33890: FOR_IN
33891: IFFALSE 33922
// if GetLives ( i ) < 1000 then
33893: LD_VAR 0 1
33897: PPUSH
33898: CALL_OW 256
33902: PUSH
33903: LD_INT 1000
33905: LESS
33906: IFFALSE 33920
// SetLives ( i , 1000 ) ;
33908: LD_VAR 0 1
33912: PPUSH
33913: LD_INT 1000
33915: PPUSH
33916: CALL_OW 234
33920: GO 33890
33922: POP
33923: POP
// end ;
33924: PPOPN 1
33926: END
// export function hHackInvincible ; var i ; begin
33927: LD_INT 0
33929: PPUSH
33930: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33931: LD_ADDR_VAR 0 2
33935: PUSH
33936: LD_INT 2
33938: PUSH
33939: LD_INT 21
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 21
33951: PUSH
33952: LD_INT 2
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: PPUSH
33964: CALL_OW 69
33968: PUSH
33969: FOR_IN
33970: IFFALSE 34031
// if IsSelected ( i ) then
33972: LD_VAR 0 2
33976: PPUSH
33977: CALL_OW 306
33981: IFFALSE 34029
// begin if i in hInvincible then
33983: LD_VAR 0 2
33987: PUSH
33988: LD_EXP 111
33992: IN
33993: IFFALSE 34013
// hInvincible := hInvincible diff i else
33995: LD_ADDR_EXP 111
33999: PUSH
34000: LD_EXP 111
34004: PUSH
34005: LD_VAR 0 2
34009: DIFF
34010: ST_TO_ADDR
34011: GO 34029
// hInvincible := hInvincible union i ;
34013: LD_ADDR_EXP 111
34017: PUSH
34018: LD_EXP 111
34022: PUSH
34023: LD_VAR 0 2
34027: UNION
34028: ST_TO_ADDR
// end ;
34029: GO 33969
34031: POP
34032: POP
// end ;
34033: LD_VAR 0 1
34037: RET
// export function hHackInvisible ; var i , j ; begin
34038: LD_INT 0
34040: PPUSH
34041: PPUSH
34042: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34043: LD_ADDR_VAR 0 2
34047: PUSH
34048: LD_INT 21
34050: PUSH
34051: LD_INT 1
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PPUSH
34058: CALL_OW 69
34062: PUSH
34063: FOR_IN
34064: IFFALSE 34088
// if IsSelected ( i ) then
34066: LD_VAR 0 2
34070: PPUSH
34071: CALL_OW 306
34075: IFFALSE 34086
// ComForceInvisible ( i ) ;
34077: LD_VAR 0 2
34081: PPUSH
34082: CALL_OW 496
34086: GO 34063
34088: POP
34089: POP
// end ;
34090: LD_VAR 0 1
34094: RET
// export function hHackChangeYourSide ; begin
34095: LD_INT 0
34097: PPUSH
// if your_side = 8 then
34098: LD_OWVAR 2
34102: PUSH
34103: LD_INT 8
34105: EQUAL
34106: IFFALSE 34118
// your_side := 0 else
34108: LD_ADDR_OWVAR 2
34112: PUSH
34113: LD_INT 0
34115: ST_TO_ADDR
34116: GO 34132
// your_side := your_side + 1 ;
34118: LD_ADDR_OWVAR 2
34122: PUSH
34123: LD_OWVAR 2
34127: PUSH
34128: LD_INT 1
34130: PLUS
34131: ST_TO_ADDR
// end ;
34132: LD_VAR 0 1
34136: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34137: LD_INT 0
34139: PPUSH
34140: PPUSH
34141: PPUSH
// for i in all_units do
34142: LD_ADDR_VAR 0 2
34146: PUSH
34147: LD_OWVAR 3
34151: PUSH
34152: FOR_IN
34153: IFFALSE 34231
// if IsSelected ( i ) then
34155: LD_VAR 0 2
34159: PPUSH
34160: CALL_OW 306
34164: IFFALSE 34229
// begin j := GetSide ( i ) ;
34166: LD_ADDR_VAR 0 3
34170: PUSH
34171: LD_VAR 0 2
34175: PPUSH
34176: CALL_OW 255
34180: ST_TO_ADDR
// if j = 8 then
34181: LD_VAR 0 3
34185: PUSH
34186: LD_INT 8
34188: EQUAL
34189: IFFALSE 34201
// j := 0 else
34191: LD_ADDR_VAR 0 3
34195: PUSH
34196: LD_INT 0
34198: ST_TO_ADDR
34199: GO 34215
// j := j + 1 ;
34201: LD_ADDR_VAR 0 3
34205: PUSH
34206: LD_VAR 0 3
34210: PUSH
34211: LD_INT 1
34213: PLUS
34214: ST_TO_ADDR
// SetSide ( i , j ) ;
34215: LD_VAR 0 2
34219: PPUSH
34220: LD_VAR 0 3
34224: PPUSH
34225: CALL_OW 235
// end ;
34229: GO 34152
34231: POP
34232: POP
// end ;
34233: LD_VAR 0 1
34237: RET
// export function hHackFog ; begin
34238: LD_INT 0
34240: PPUSH
// FogOff ( true ) ;
34241: LD_INT 1
34243: PPUSH
34244: CALL_OW 344
// end ;
34248: LD_VAR 0 1
34252: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34253: LD_INT 0
34255: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34256: LD_VAR 0 1
34260: PPUSH
34261: LD_VAR 0 2
34265: PPUSH
34266: LD_VAR 0 3
34270: PPUSH
34271: LD_INT 1
34273: PPUSH
34274: LD_INT 1
34276: PPUSH
34277: CALL_OW 483
// CenterOnXY ( x , y ) ;
34281: LD_VAR 0 2
34285: PPUSH
34286: LD_VAR 0 3
34290: PPUSH
34291: CALL_OW 84
// end ;
34295: LD_VAR 0 4
34299: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34300: LD_INT 0
34302: PPUSH
34303: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34304: LD_VAR 0 1
34308: NOT
34309: IFTRUE 34328
34311: PUSH
34312: LD_VAR 0 2
34316: PPUSH
34317: LD_VAR 0 3
34321: PPUSH
34322: CALL_OW 488
34326: NOT
34327: OR
34328: IFTRUE 34363
34330: PUSH
34331: LD_VAR 0 1
34335: PPUSH
34336: CALL_OW 266
34340: PUSH
34341: LD_INT 3
34343: NONEQUAL
34344: IFFALSE 34362
34346: PUSH
34347: LD_VAR 0 1
34351: PPUSH
34352: CALL_OW 247
34356: PUSH
34357: LD_INT 1
34359: EQUAL
34360: NOT
34361: AND
34362: OR
34363: IFFALSE 34367
// exit ;
34365: GO 34649
// if GetType ( factory ) = unit_human then
34367: LD_VAR 0 1
34371: PPUSH
34372: CALL_OW 247
34376: PUSH
34377: LD_INT 1
34379: EQUAL
34380: IFFALSE 34397
// factory := IsInUnit ( factory ) ;
34382: LD_ADDR_VAR 0 1
34386: PUSH
34387: LD_VAR 0 1
34391: PPUSH
34392: CALL_OW 310
34396: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34397: LD_VAR 0 1
34401: PPUSH
34402: CALL_OW 266
34406: PUSH
34407: LD_INT 3
34409: NONEQUAL
34410: IFFALSE 34414
// exit ;
34412: GO 34649
// for i := 1 to Count ( factoryWaypoints ) do
34414: LD_ADDR_VAR 0 5
34418: PUSH
34419: DOUBLE
34420: LD_INT 1
34422: DEC
34423: ST_TO_ADDR
34424: LD_EXP 112
34428: PPUSH
34429: CALL 44182 0 1
34433: PUSH
34434: FOR_TO
34435: IFFALSE 34597
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34437: LD_VAR 0 2
34441: PPUSH
34442: LD_VAR 0 3
34446: PPUSH
34447: CALL_OW 428
34451: PUSH
34452: LD_EXP 112
34456: PUSH
34457: LD_VAR 0 5
34461: ARRAY
34462: PUSH
34463: LD_INT 2
34465: ARRAY
34466: EQUAL
34467: IFFALSE 34499
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34469: LD_ADDR_EXP 112
34473: PUSH
34474: LD_EXP 112
34478: PPUSH
34479: LD_VAR 0 5
34483: PPUSH
34484: CALL_OW 3
34488: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34489: CALL 34654 0 0
// exit ;
34493: POP
34494: POP
34495: GO 34649
// end else
34497: GO 34595
// if factory = factoryWaypoints [ i ] [ 2 ] then
34499: LD_VAR 0 1
34503: PUSH
34504: LD_EXP 112
34508: PUSH
34509: LD_VAR 0 5
34513: ARRAY
34514: PUSH
34515: LD_INT 2
34517: ARRAY
34518: EQUAL
34519: IFFALSE 34595
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34521: LD_ADDR_EXP 112
34525: PUSH
34526: LD_EXP 112
34530: PPUSH
34531: LD_VAR 0 5
34535: PPUSH
34536: CALL_OW 3
34540: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34541: LD_ADDR_EXP 112
34545: PUSH
34546: LD_EXP 112
34550: PPUSH
34551: LD_VAR 0 1
34555: PPUSH
34556: CALL_OW 255
34560: PUSH
34561: LD_VAR 0 1
34565: PUSH
34566: LD_VAR 0 2
34570: PUSH
34571: LD_VAR 0 3
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: PPUSH
34582: CALL 80114 0 2
34586: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34587: CALL 34654 0 0
// exit ;
34591: POP
34592: POP
34593: GO 34649
// end ; end ;
34595: GO 34434
34597: POP
34598: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34599: LD_ADDR_EXP 112
34603: PUSH
34604: LD_EXP 112
34608: PPUSH
34609: LD_VAR 0 1
34613: PPUSH
34614: CALL_OW 255
34618: PUSH
34619: LD_VAR 0 1
34623: PUSH
34624: LD_VAR 0 2
34628: PUSH
34629: LD_VAR 0 3
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: PPUSH
34640: CALL 80114 0 2
34644: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34645: CALL 34654 0 0
// end ;
34649: LD_VAR 0 4
34653: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34654: LD_INT 0
34656: PPUSH
34657: PPUSH
34658: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34659: LD_STRING resetFactoryWaypoint();
34661: PPUSH
34662: CALL_OW 559
// if factoryWaypoints then
34666: LD_EXP 112
34670: IFFALSE 34791
// begin list := factoryWaypoints ;
34672: LD_ADDR_VAR 0 3
34676: PUSH
34677: LD_EXP 112
34681: ST_TO_ADDR
// for i := 1 to list do
34682: LD_ADDR_VAR 0 2
34686: PUSH
34687: DOUBLE
34688: LD_INT 1
34690: DEC
34691: ST_TO_ADDR
34692: LD_VAR 0 3
34696: PUSH
34697: FOR_TO
34698: IFFALSE 34789
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34700: LD_STRING setFactoryWaypointXY(
34702: PUSH
34703: LD_VAR 0 3
34707: PUSH
34708: LD_VAR 0 2
34712: ARRAY
34713: PUSH
34714: LD_INT 1
34716: ARRAY
34717: STR
34718: PUSH
34719: LD_STRING ,
34721: STR
34722: PUSH
34723: LD_VAR 0 3
34727: PUSH
34728: LD_VAR 0 2
34732: ARRAY
34733: PUSH
34734: LD_INT 2
34736: ARRAY
34737: STR
34738: PUSH
34739: LD_STRING ,
34741: STR
34742: PUSH
34743: LD_VAR 0 3
34747: PUSH
34748: LD_VAR 0 2
34752: ARRAY
34753: PUSH
34754: LD_INT 3
34756: ARRAY
34757: STR
34758: PUSH
34759: LD_STRING ,
34761: STR
34762: PUSH
34763: LD_VAR 0 3
34767: PUSH
34768: LD_VAR 0 2
34772: ARRAY
34773: PUSH
34774: LD_INT 4
34776: ARRAY
34777: STR
34778: PUSH
34779: LD_STRING )
34781: STR
34782: PPUSH
34783: CALL_OW 559
34787: GO 34697
34789: POP
34790: POP
// end ; end ;
34791: LD_VAR 0 1
34795: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34796: LD_INT 0
34798: PPUSH
// if HexInfo ( x , y ) = warehouse then
34799: LD_VAR 0 2
34803: PPUSH
34804: LD_VAR 0 3
34808: PPUSH
34809: CALL_OW 428
34813: PUSH
34814: LD_VAR 0 1
34818: EQUAL
34819: IFFALSE 34846
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34821: LD_ADDR_EXP 114
34825: PUSH
34826: LD_EXP 114
34830: PPUSH
34831: LD_VAR 0 1
34835: PPUSH
34836: LD_INT 0
34838: PPUSH
34839: CALL_OW 1
34843: ST_TO_ADDR
34844: GO 34897
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34846: LD_ADDR_EXP 114
34850: PUSH
34851: LD_EXP 114
34855: PPUSH
34856: LD_VAR 0 1
34860: PPUSH
34861: LD_VAR 0 1
34865: PPUSH
34866: CALL_OW 255
34870: PUSH
34871: LD_VAR 0 1
34875: PUSH
34876: LD_VAR 0 2
34880: PUSH
34881: LD_VAR 0 3
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: PPUSH
34892: CALL_OW 1
34896: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34897: CALL 34906 0 0
// end ;
34901: LD_VAR 0 4
34905: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34906: LD_INT 0
34908: PPUSH
34909: PPUSH
34910: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34911: LD_STRING resetWarehouseGatheringPoints();
34913: PPUSH
34914: CALL_OW 559
// if warehouseGatheringPoints then
34918: LD_EXP 114
34922: IFFALSE 35048
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34924: LD_ADDR_VAR 0 3
34928: PUSH
34929: LD_EXP 114
34933: PPUSH
34934: CALL 84048 0 1
34938: ST_TO_ADDR
// for i := 1 to list do
34939: LD_ADDR_VAR 0 2
34943: PUSH
34944: DOUBLE
34945: LD_INT 1
34947: DEC
34948: ST_TO_ADDR
34949: LD_VAR 0 3
34953: PUSH
34954: FOR_TO
34955: IFFALSE 35046
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34957: LD_STRING setWarehouseGatheringPointXY(
34959: PUSH
34960: LD_VAR 0 3
34964: PUSH
34965: LD_VAR 0 2
34969: ARRAY
34970: PUSH
34971: LD_INT 1
34973: ARRAY
34974: STR
34975: PUSH
34976: LD_STRING ,
34978: STR
34979: PUSH
34980: LD_VAR 0 3
34984: PUSH
34985: LD_VAR 0 2
34989: ARRAY
34990: PUSH
34991: LD_INT 2
34993: ARRAY
34994: STR
34995: PUSH
34996: LD_STRING ,
34998: STR
34999: PUSH
35000: LD_VAR 0 3
35004: PUSH
35005: LD_VAR 0 2
35009: ARRAY
35010: PUSH
35011: LD_INT 3
35013: ARRAY
35014: STR
35015: PUSH
35016: LD_STRING ,
35018: STR
35019: PUSH
35020: LD_VAR 0 3
35024: PUSH
35025: LD_VAR 0 2
35029: ARRAY
35030: PUSH
35031: LD_INT 4
35033: ARRAY
35034: STR
35035: PUSH
35036: LD_STRING )
35038: STR
35039: PPUSH
35040: CALL_OW 559
35044: GO 34954
35046: POP
35047: POP
// end ; end ;
35048: LD_VAR 0 1
35052: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35053: LD_EXP 114
35057: IFFALSE 35752
35059: GO 35061
35061: DISABLE
35062: LD_INT 0
35064: PPUSH
35065: PPUSH
35066: PPUSH
35067: PPUSH
35068: PPUSH
35069: PPUSH
35070: PPUSH
35071: PPUSH
35072: PPUSH
// begin enable ;
35073: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35074: LD_ADDR_VAR 0 3
35078: PUSH
35079: LD_EXP 114
35083: PPUSH
35084: CALL 84048 0 1
35088: ST_TO_ADDR
// if not list then
35089: LD_VAR 0 3
35093: NOT
35094: IFFALSE 35098
// exit ;
35096: GO 35752
// for i := 1 to list do
35098: LD_ADDR_VAR 0 1
35102: PUSH
35103: DOUBLE
35104: LD_INT 1
35106: DEC
35107: ST_TO_ADDR
35108: LD_VAR 0 3
35112: PUSH
35113: FOR_TO
35114: IFFALSE 35750
// begin depot := list [ i ] [ 2 ] ;
35116: LD_ADDR_VAR 0 8
35120: PUSH
35121: LD_VAR 0 3
35125: PUSH
35126: LD_VAR 0 1
35130: ARRAY
35131: PUSH
35132: LD_INT 2
35134: ARRAY
35135: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
35136: LD_ADDR_VAR 0 5
35140: PUSH
35141: LD_VAR 0 3
35145: PUSH
35146: LD_VAR 0 1
35150: ARRAY
35151: PUSH
35152: LD_INT 1
35154: ARRAY
35155: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
35156: LD_VAR 0 8
35160: PPUSH
35161: CALL_OW 301
35165: IFTRUE 35184
35167: PUSH
35168: LD_VAR 0 5
35172: PUSH
35173: LD_VAR 0 8
35177: PPUSH
35178: CALL_OW 255
35182: NONEQUAL
35183: OR
35184: IFFALSE 35213
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
35186: LD_ADDR_EXP 114
35190: PUSH
35191: LD_EXP 114
35195: PPUSH
35196: LD_VAR 0 8
35200: PPUSH
35201: LD_INT 0
35203: PPUSH
35204: CALL_OW 1
35208: ST_TO_ADDR
// exit ;
35209: POP
35210: POP
35211: GO 35752
// end ; x := list [ i ] [ 3 ] ;
35213: LD_ADDR_VAR 0 6
35217: PUSH
35218: LD_VAR 0 3
35222: PUSH
35223: LD_VAR 0 1
35227: ARRAY
35228: PUSH
35229: LD_INT 3
35231: ARRAY
35232: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
35233: LD_ADDR_VAR 0 7
35237: PUSH
35238: LD_VAR 0 3
35242: PUSH
35243: LD_VAR 0 1
35247: ARRAY
35248: PUSH
35249: LD_INT 4
35251: ARRAY
35252: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
35253: LD_ADDR_VAR 0 9
35257: PUSH
35258: LD_VAR 0 6
35262: PPUSH
35263: LD_VAR 0 7
35267: PPUSH
35268: LD_INT 16
35270: PPUSH
35271: CALL 82622 0 3
35275: ST_TO_ADDR
// if not cratesNearbyPoint then
35276: LD_VAR 0 9
35280: NOT
35281: IFFALSE 35287
// exit ;
35283: POP
35284: POP
35285: GO 35752
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
35287: LD_ADDR_VAR 0 4
35291: PUSH
35292: LD_INT 22
35294: PUSH
35295: LD_VAR 0 5
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 3
35306: PUSH
35307: LD_INT 60
35309: PUSH
35310: EMPTY
35311: LIST
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 91
35319: PUSH
35320: LD_VAR 0 8
35324: PUSH
35325: LD_INT 6
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 2
35335: PUSH
35336: LD_INT 25
35338: PUSH
35339: LD_INT 2
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 25
35348: PUSH
35349: LD_INT 16
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: LIST
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: PPUSH
35367: CALL_OW 69
35371: PUSH
35372: LD_VAR 0 8
35376: PPUSH
35377: CALL_OW 313
35381: PPUSH
35382: LD_INT 3
35384: PUSH
35385: LD_INT 60
35387: PUSH
35388: EMPTY
35389: LIST
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: LD_INT 25
35400: PUSH
35401: LD_INT 2
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 25
35410: PUSH
35411: LD_INT 16
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: LIST
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PPUSH
35427: CALL_OW 72
35431: UNION
35432: ST_TO_ADDR
// if tmp then
35433: LD_VAR 0 4
35437: IFFALSE 35517
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35439: LD_ADDR_VAR 0 4
35443: PUSH
35444: LD_VAR 0 4
35448: PPUSH
35449: LD_INT 3
35451: PPUSH
35452: CALL 80429 0 2
35456: ST_TO_ADDR
// for j in tmp do
35457: LD_ADDR_VAR 0 2
35461: PUSH
35462: LD_VAR 0 4
35466: PUSH
35467: FOR_IN
35468: IFFALSE 35511
// begin if IsInUnit ( j ) then
35470: LD_VAR 0 2
35474: PPUSH
35475: CALL_OW 310
35479: IFFALSE 35490
// ComExit ( j ) ;
35481: LD_VAR 0 2
35485: PPUSH
35486: CALL 80512 0 1
// AddComCollect ( j , x , y ) ;
35490: LD_VAR 0 2
35494: PPUSH
35495: LD_VAR 0 6
35499: PPUSH
35500: LD_VAR 0 7
35504: PPUSH
35505: CALL_OW 177
// end ;
35509: GO 35467
35511: POP
35512: POP
// exit ;
35513: POP
35514: POP
35515: GO 35752
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35517: LD_ADDR_VAR 0 4
35521: PUSH
35522: LD_INT 22
35524: PUSH
35525: LD_VAR 0 5
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 91
35536: PUSH
35537: LD_VAR 0 8
35541: PUSH
35542: LD_INT 8
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 2
35552: PUSH
35553: LD_INT 34
35555: PUSH
35556: LD_INT 12
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 34
35565: PUSH
35566: LD_INT 51
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 34
35575: PUSH
35576: LD_INT 32
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 34
35585: PUSH
35586: LD_INT 89
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: LIST
35604: PPUSH
35605: CALL_OW 69
35609: ST_TO_ADDR
// if tmp then
35610: LD_VAR 0 4
35614: IFFALSE 35748
// begin for j in tmp do
35616: LD_ADDR_VAR 0 2
35620: PUSH
35621: LD_VAR 0 4
35625: PUSH
35626: FOR_IN
35627: IFFALSE 35746
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35629: LD_VAR 0 2
35633: PPUSH
35634: CALL_OW 262
35638: PUSH
35639: LD_INT 3
35641: EQUAL
35642: IFTRUE 35659
35644: PUSH
35645: LD_VAR 0 2
35649: PPUSH
35650: CALL_OW 261
35654: PUSH
35655: LD_INT 20
35657: GREATER
35658: OR
35659: IFFALSE 35673
35661: PUSH
35662: LD_VAR 0 2
35666: PPUSH
35667: CALL_OW 314
35671: NOT
35672: AND
35673: IFFALSE 35703
35675: PUSH
35676: LD_VAR 0 2
35680: PPUSH
35681: CALL_OW 263
35685: PUSH
35686: LD_INT 1
35688: NONEQUAL
35689: IFTRUE 35702
35691: PUSH
35692: LD_VAR 0 2
35696: PPUSH
35697: CALL_OW 311
35701: OR
35702: AND
35703: IFFALSE 35744
// begin ComCollect ( j , x , y ) ;
35705: LD_VAR 0 2
35709: PPUSH
35710: LD_VAR 0 6
35714: PPUSH
35715: LD_VAR 0 7
35719: PPUSH
35720: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35724: LD_VAR 0 2
35728: PPUSH
35729: LD_VAR 0 8
35733: PPUSH
35734: CALL_OW 172
// exit ;
35738: POP
35739: POP
35740: POP
35741: POP
35742: GO 35752
// end ;
35744: GO 35626
35746: POP
35747: POP
// end ; end ;
35748: GO 35113
35750: POP
35751: POP
// end ; end_of_file
35752: PPOPN 9
35754: END
// export function SOS_UnitDestroyed ( un ) ; begin
35755: LD_INT 0
35757: PPUSH
// ComRadiation ( un ) ;
35758: LD_VAR 0 1
35762: PPUSH
35763: CALL 36844 0 1
// end ;
35767: LD_VAR 0 2
35771: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35772: LD_INT 0
35774: PPUSH
// ComRadiation ( un ) ;
35775: LD_VAR 0 1
35779: PPUSH
35780: CALL 36844 0 1
// end ;
35784: LD_VAR 0 2
35788: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35789: LD_INT 0
35791: PPUSH
// end ;
35792: LD_VAR 0 4
35796: RET
// export function SOS_Command ( cmd ) ; begin
35797: LD_INT 0
35799: PPUSH
// end ;
35800: LD_VAR 0 2
35804: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35805: LD_INT 0
35807: PPUSH
// end ;
35808: LD_VAR 0 6
35812: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
35813: LD_INT 0
35815: PPUSH
35816: PPUSH
35817: PPUSH
35818: PPUSH
// if not vehicle or not factory then
35819: LD_VAR 0 1
35823: NOT
35824: IFTRUE 35833
35826: PUSH
35827: LD_VAR 0 2
35831: NOT
35832: OR
35833: IFFALSE 35837
// exit ;
35835: GO 36419
// if not factoryWaypoints then
35837: LD_EXP 112
35841: NOT
35842: IFFALSE 35846
// exit ;
35844: GO 36419
// for i := 1 to Count ( factoryWaypoints ) do
35846: LD_ADDR_VAR 0 4
35850: PUSH
35851: DOUBLE
35852: LD_INT 1
35854: DEC
35855: ST_TO_ADDR
35856: LD_EXP 112
35860: PPUSH
35861: CALL 44182 0 1
35865: PUSH
35866: FOR_TO
35867: IFFALSE 36417
// if factoryWaypoints [ i ] [ 2 ] = factory then
35869: LD_EXP 112
35873: PUSH
35874: LD_VAR 0 4
35878: ARRAY
35879: PUSH
35880: LD_INT 2
35882: ARRAY
35883: PUSH
35884: LD_VAR 0 2
35888: EQUAL
35889: IFFALSE 36415
// begin if GetControl ( vehicle ) = control_manual then
35891: LD_VAR 0 1
35895: PPUSH
35896: CALL_OW 263
35900: PUSH
35901: LD_INT 1
35903: EQUAL
35904: IFFALSE 36268
// begin driver := IsDrivenBy ( vehicle ) ;
35906: LD_ADDR_VAR 0 5
35910: PUSH
35911: LD_VAR 0 1
35915: PPUSH
35916: CALL_OW 311
35920: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
35921: LD_VAR 0 5
35925: PUSH
35926: LD_EXP 113
35930: IN
35931: IFTRUE 35945
35933: PUSH
35934: LD_VAR 0 1
35938: PUSH
35939: LD_EXP 113
35943: IN
35944: OR
35945: IFFALSE 35951
// exit ;
35947: POP
35948: POP
35949: GO 36419
// if not HasTask ( driver ) then
35951: LD_VAR 0 5
35955: PPUSH
35956: CALL_OW 314
35960: NOT
35961: IFFALSE 36266
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
35963: LD_ADDR_EXP 113
35967: PUSH
35968: LD_EXP 113
35972: PPUSH
35973: LD_VAR 0 5
35977: PPUSH
35978: CALL 80114 0 2
35982: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
35983: LD_ADDR_EXP 113
35987: PUSH
35988: LD_EXP 113
35992: PPUSH
35993: LD_VAR 0 1
35997: PPUSH
35998: CALL 80114 0 2
36002: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36003: LD_ADDR_VAR 0 6
36007: PUSH
36008: LD_EXP 112
36012: PUSH
36013: LD_VAR 0 4
36017: ARRAY
36018: PUSH
36019: LD_INT 3
36021: ARRAY
36022: PPUSH
36023: LD_EXP 112
36027: PUSH
36028: LD_VAR 0 4
36032: ARRAY
36033: PUSH
36034: LD_INT 4
36036: ARRAY
36037: PPUSH
36038: CALL_OW 428
36042: ST_TO_ADDR
// if hex then
36043: LD_VAR 0 6
36047: IFFALSE 36065
// ComMoveUnit ( driver , hex ) else
36049: LD_VAR 0 5
36053: PPUSH
36054: LD_VAR 0 6
36058: PPUSH
36059: CALL_OW 112
36063: GO 36149
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
36065: LD_VAR 0 1
36069: PPUSH
36070: LD_EXP 112
36074: PUSH
36075: LD_VAR 0 4
36079: ARRAY
36080: PUSH
36081: LD_INT 3
36083: ARRAY
36084: PPUSH
36085: LD_EXP 112
36089: PUSH
36090: LD_VAR 0 4
36094: ARRAY
36095: PUSH
36096: LD_INT 4
36098: ARRAY
36099: PPUSH
36100: CALL_OW 297
36104: PUSH
36105: LD_INT 0
36107: GREATER
36108: IFFALSE 36149
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36110: LD_VAR 0 5
36114: PPUSH
36115: LD_EXP 112
36119: PUSH
36120: LD_VAR 0 4
36124: ARRAY
36125: PUSH
36126: LD_INT 3
36128: ARRAY
36129: PPUSH
36130: LD_EXP 112
36134: PUSH
36135: LD_VAR 0 4
36139: ARRAY
36140: PUSH
36141: LD_INT 4
36143: ARRAY
36144: PPUSH
36145: CALL_OW 111
// AddComExitVehicle ( driver ) ;
36149: LD_VAR 0 5
36153: PPUSH
36154: CALL_OW 181
// if Multiplayer then
36158: LD_OWVAR 4
36162: IFFALSE 36211
// begin repeat wait ( 10 ) ;
36164: LD_INT 10
36166: PPUSH
36167: CALL_OW 67
// until not IsInUnit ( driver ) ;
36171: LD_VAR 0 5
36175: PPUSH
36176: CALL_OW 310
36180: NOT
36181: IFFALSE 36164
// if not HasTask ( driver ) then
36183: LD_VAR 0 5
36187: PPUSH
36188: CALL_OW 314
36192: NOT
36193: IFFALSE 36209
// ComEnterUnit ( driver , factory ) ;
36195: LD_VAR 0 5
36199: PPUSH
36200: LD_VAR 0 2
36204: PPUSH
36205: CALL_OW 120
// end else
36209: GO 36225
// AddComEnterUnit ( driver , factory ) ;
36211: LD_VAR 0 5
36215: PPUSH
36216: LD_VAR 0 2
36220: PPUSH
36221: CALL_OW 180
// wait ( 0 0$1 ) ;
36225: LD_INT 35
36227: PPUSH
36228: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
36232: LD_ADDR_EXP 113
36236: PUSH
36237: LD_EXP 113
36241: PUSH
36242: LD_VAR 0 5
36246: DIFF
36247: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
36248: LD_ADDR_EXP 113
36252: PUSH
36253: LD_EXP 113
36257: PUSH
36258: LD_VAR 0 1
36262: DIFF
36263: ST_TO_ADDR
// break ;
36264: GO 36417
// end ; end else
36266: GO 36415
// if GetControl ( vehicle ) = control_remote then
36268: LD_VAR 0 1
36272: PPUSH
36273: CALL_OW 263
36277: PUSH
36278: LD_INT 2
36280: EQUAL
36281: IFFALSE 36367
// begin wait ( 0 0$2 ) ;
36283: LD_INT 70
36285: PPUSH
36286: CALL_OW 67
// repeat wait ( 10 ) ;
36290: LD_INT 10
36292: PPUSH
36293: CALL_OW 67
// Connect ( vehicle ) ;
36297: LD_VAR 0 1
36301: PPUSH
36302: CALL 50426 0 1
// until IsControledBy ( vehicle ) ;
36306: LD_VAR 0 1
36310: PPUSH
36311: CALL_OW 312
36315: IFFALSE 36290
// wait ( 10 ) ;
36317: LD_INT 10
36319: PPUSH
36320: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36324: LD_VAR 0 1
36328: PPUSH
36329: LD_EXP 112
36333: PUSH
36334: LD_VAR 0 4
36338: ARRAY
36339: PUSH
36340: LD_INT 3
36342: ARRAY
36343: PPUSH
36344: LD_EXP 112
36348: PUSH
36349: LD_VAR 0 4
36353: ARRAY
36354: PUSH
36355: LD_INT 4
36357: ARRAY
36358: PPUSH
36359: CALL_OW 111
// break ;
36363: GO 36417
// end else
36365: GO 36415
// begin wait ( 0 0$3 ) ;
36367: LD_INT 105
36369: PPUSH
36370: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
36374: LD_VAR 0 1
36378: PPUSH
36379: LD_EXP 112
36383: PUSH
36384: LD_VAR 0 4
36388: ARRAY
36389: PUSH
36390: LD_INT 3
36392: ARRAY
36393: PPUSH
36394: LD_EXP 112
36398: PUSH
36399: LD_VAR 0 4
36403: ARRAY
36404: PUSH
36405: LD_INT 4
36407: ARRAY
36408: PPUSH
36409: CALL_OW 111
// break ;
36413: GO 36417
// end ; end ;
36415: GO 35866
36417: POP
36418: POP
// end ;
36419: LD_VAR 0 3
36423: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36424: LD_INT 0
36426: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36427: LD_VAR 0 1
36431: PUSH
36432: LD_INT 250
36434: EQUAL
36435: IFFALSE 36452
36437: PUSH
36438: LD_VAR 0 2
36442: PPUSH
36443: CALL_OW 264
36447: PUSH
36448: LD_INT 81
36450: EQUAL
36451: AND
36452: IFFALSE 36473
// MinerPlaceMine ( unit , x , y ) ;
36454: LD_VAR 0 2
36458: PPUSH
36459: LD_VAR 0 4
36463: PPUSH
36464: LD_VAR 0 5
36468: PPUSH
36469: CALL 39605 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36473: LD_VAR 0 1
36477: PUSH
36478: LD_INT 251
36480: EQUAL
36481: IFFALSE 36498
36483: PUSH
36484: LD_VAR 0 2
36488: PPUSH
36489: CALL_OW 264
36493: PUSH
36494: LD_INT 81
36496: EQUAL
36497: AND
36498: IFFALSE 36519
// MinerDetonateMine ( unit , x , y ) ;
36500: LD_VAR 0 2
36504: PPUSH
36505: LD_VAR 0 4
36509: PPUSH
36510: LD_VAR 0 5
36514: PPUSH
36515: CALL 39884 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36519: LD_VAR 0 1
36523: PUSH
36524: LD_INT 252
36526: EQUAL
36527: IFFALSE 36544
36529: PUSH
36530: LD_VAR 0 2
36534: PPUSH
36535: CALL_OW 264
36539: PUSH
36540: LD_INT 81
36542: EQUAL
36543: AND
36544: IFFALSE 36565
// MinerCreateMinefield ( unit , x , y ) ;
36546: LD_VAR 0 2
36550: PPUSH
36551: LD_VAR 0 4
36555: PPUSH
36556: LD_VAR 0 5
36560: PPUSH
36561: CALL 40303 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36565: LD_VAR 0 1
36569: PUSH
36570: LD_INT 253
36572: EQUAL
36573: IFFALSE 36590
36575: PUSH
36576: LD_VAR 0 2
36580: PPUSH
36581: CALL_OW 257
36585: PUSH
36586: LD_INT 5
36588: EQUAL
36589: AND
36590: IFFALSE 36611
// ComBinocular ( unit , x , y ) ;
36592: LD_VAR 0 2
36596: PPUSH
36597: LD_VAR 0 4
36601: PPUSH
36602: LD_VAR 0 5
36606: PPUSH
36607: CALL 40678 0 3
// if selectedUnit then
36611: LD_VAR 0 3
36615: IFFALSE 36675
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36617: LD_VAR 0 1
36621: PUSH
36622: LD_INT 254
36624: EQUAL
36625: IFFALSE 36642
36627: PUSH
36628: LD_VAR 0 2
36632: PPUSH
36633: CALL_OW 264
36637: PUSH
36638: LD_INT 99
36640: EQUAL
36641: AND
36642: IFFALSE 36659
36644: PUSH
36645: LD_VAR 0 3
36649: PPUSH
36650: CALL_OW 263
36654: PUSH
36655: LD_INT 3
36657: EQUAL
36658: AND
36659: IFFALSE 36675
// HackDestroyVehicle ( unit , selectedUnit ) ;
36661: LD_VAR 0 2
36665: PPUSH
36666: LD_VAR 0 3
36670: PPUSH
36671: CALL 38965 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36675: LD_VAR 0 1
36679: PUSH
36680: LD_INT 255
36682: EQUAL
36683: IFFALSE 36707
36685: PUSH
36686: LD_VAR 0 2
36690: PPUSH
36691: CALL_OW 264
36695: PUSH
36696: LD_INT 14
36698: PUSH
36699: LD_INT 53
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: IN
36706: AND
36707: IFFALSE 36725
36709: PUSH
36710: LD_VAR 0 4
36714: PPUSH
36715: LD_VAR 0 5
36719: PPUSH
36720: CALL_OW 488
36724: AND
36725: IFFALSE 36749
// CutTreeXYR ( unit , x , y , 12 ) ;
36727: LD_VAR 0 2
36731: PPUSH
36732: LD_VAR 0 4
36736: PPUSH
36737: LD_VAR 0 5
36741: PPUSH
36742: LD_INT 12
36744: PPUSH
36745: CALL 36940 0 4
// if cmd = 256 then
36749: LD_VAR 0 1
36753: PUSH
36754: LD_INT 256
36756: EQUAL
36757: IFFALSE 36778
// SetFactoryWaypoint ( unit , x , y ) ;
36759: LD_VAR 0 2
36763: PPUSH
36764: LD_VAR 0 4
36768: PPUSH
36769: LD_VAR 0 5
36773: PPUSH
36774: CALL 34300 0 3
// if cmd = 257 then
36778: LD_VAR 0 1
36782: PUSH
36783: LD_INT 257
36785: EQUAL
36786: IFFALSE 36807
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36788: LD_VAR 0 2
36792: PPUSH
36793: LD_VAR 0 4
36797: PPUSH
36798: LD_VAR 0 5
36802: PPUSH
36803: CALL 34796 0 3
// if cmd = 258 then
36807: LD_VAR 0 1
36811: PUSH
36812: LD_INT 258
36814: EQUAL
36815: IFFALSE 36839
// BurnTreeXYR ( unit , x , y , 8 ) ;
36817: LD_VAR 0 2
36821: PPUSH
36822: LD_VAR 0 4
36826: PPUSH
36827: LD_VAR 0 5
36831: PPUSH
36832: LD_INT 8
36834: PPUSH
36835: CALL 37340 0 4
// end ;
36839: LD_VAR 0 6
36843: RET
// export function ComRadiation ( un ) ; var eff ; begin
36844: LD_INT 0
36846: PPUSH
36847: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
36848: LD_VAR 0 1
36852: PPUSH
36853: CALL_OW 264
36857: PUSH
36858: LD_INT 91
36860: NONEQUAL
36861: IFFALSE 36865
// exit ;
36863: GO 36935
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36865: LD_INT 68
36867: PPUSH
36868: LD_VAR 0 1
36872: PPUSH
36873: CALL_OW 255
36877: PPUSH
36878: CALL_OW 321
36882: PUSH
36883: LD_INT 2
36885: EQUAL
36886: IFFALSE 36898
// eff := 50 else
36888: LD_ADDR_VAR 0 3
36892: PUSH
36893: LD_INT 50
36895: ST_TO_ADDR
36896: GO 36906
// eff := 25 ;
36898: LD_ADDR_VAR 0 3
36902: PUSH
36903: LD_INT 25
36905: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36906: LD_VAR 0 1
36910: PPUSH
36911: CALL_OW 250
36915: PPUSH
36916: LD_VAR 0 1
36920: PPUSH
36921: CALL_OW 251
36925: PPUSH
36926: LD_VAR 0 3
36930: PPUSH
36931: CALL_OW 495
// end ;
36935: LD_VAR 0 2
36939: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36940: LD_INT 0
36942: PPUSH
36943: PPUSH
36944: PPUSH
36945: PPUSH
36946: PPUSH
36947: PPUSH
36948: PPUSH
36949: PPUSH
36950: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36951: LD_VAR 0 1
36955: PPUSH
36956: CALL_OW 302
36960: NOT
36961: IFTRUE 36980
36963: PUSH
36964: LD_VAR 0 2
36968: PPUSH
36969: LD_VAR 0 3
36973: PPUSH
36974: CALL_OW 488
36978: NOT
36979: OR
36980: IFTRUE 36989
36982: PUSH
36983: LD_VAR 0 4
36987: NOT
36988: OR
36989: IFFALSE 36993
// exit ;
36991: GO 37335
// list := [ ] ;
36993: LD_ADDR_VAR 0 13
36997: PUSH
36998: EMPTY
36999: ST_TO_ADDR
// if x - r < 0 then
37000: LD_VAR 0 2
37004: PUSH
37005: LD_VAR 0 4
37009: MINUS
37010: PUSH
37011: LD_INT 0
37013: LESS
37014: IFFALSE 37026
// min_x := 0 else
37016: LD_ADDR_VAR 0 7
37020: PUSH
37021: LD_INT 0
37023: ST_TO_ADDR
37024: GO 37042
// min_x := x - r ;
37026: LD_ADDR_VAR 0 7
37030: PUSH
37031: LD_VAR 0 2
37035: PUSH
37036: LD_VAR 0 4
37040: MINUS
37041: ST_TO_ADDR
// if y - r < 0 then
37042: LD_VAR 0 3
37046: PUSH
37047: LD_VAR 0 4
37051: MINUS
37052: PUSH
37053: LD_INT 0
37055: LESS
37056: IFFALSE 37068
// min_y := 0 else
37058: LD_ADDR_VAR 0 8
37062: PUSH
37063: LD_INT 0
37065: ST_TO_ADDR
37066: GO 37084
// min_y := y - r ;
37068: LD_ADDR_VAR 0 8
37072: PUSH
37073: LD_VAR 0 3
37077: PUSH
37078: LD_VAR 0 4
37082: MINUS
37083: ST_TO_ADDR
// max_x := x + r ;
37084: LD_ADDR_VAR 0 9
37088: PUSH
37089: LD_VAR 0 2
37093: PUSH
37094: LD_VAR 0 4
37098: PLUS
37099: ST_TO_ADDR
// max_y := y + r ;
37100: LD_ADDR_VAR 0 10
37104: PUSH
37105: LD_VAR 0 3
37109: PUSH
37110: LD_VAR 0 4
37114: PLUS
37115: ST_TO_ADDR
// for _x = min_x to max_x do
37116: LD_ADDR_VAR 0 11
37120: PUSH
37121: DOUBLE
37122: LD_VAR 0 7
37126: DEC
37127: ST_TO_ADDR
37128: LD_VAR 0 9
37132: PUSH
37133: FOR_TO
37134: IFFALSE 37253
// for _y = min_y to max_y do
37136: LD_ADDR_VAR 0 12
37140: PUSH
37141: DOUBLE
37142: LD_VAR 0 8
37146: DEC
37147: ST_TO_ADDR
37148: LD_VAR 0 10
37152: PUSH
37153: FOR_TO
37154: IFFALSE 37249
// begin if not ValidHex ( _x , _y ) then
37156: LD_VAR 0 11
37160: PPUSH
37161: LD_VAR 0 12
37165: PPUSH
37166: CALL_OW 488
37170: NOT
37171: IFFALSE 37175
// continue ;
37173: GO 37153
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37175: LD_VAR 0 11
37179: PPUSH
37180: LD_VAR 0 12
37184: PPUSH
37185: CALL_OW 351
37189: IFFALSE 37207
37191: PUSH
37192: LD_VAR 0 11
37196: PPUSH
37197: LD_VAR 0 12
37201: PPUSH
37202: CALL_OW 554
37206: AND
37207: IFFALSE 37247
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37209: LD_ADDR_VAR 0 13
37213: PUSH
37214: LD_VAR 0 13
37218: PPUSH
37219: LD_VAR 0 13
37223: PUSH
37224: LD_INT 1
37226: PLUS
37227: PPUSH
37228: LD_VAR 0 11
37232: PUSH
37233: LD_VAR 0 12
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PPUSH
37242: CALL_OW 2
37246: ST_TO_ADDR
// end ;
37247: GO 37153
37249: POP
37250: POP
37251: GO 37133
37253: POP
37254: POP
// if not list then
37255: LD_VAR 0 13
37259: NOT
37260: IFFALSE 37264
// exit ;
37262: GO 37335
// for i in list do
37264: LD_ADDR_VAR 0 6
37268: PUSH
37269: LD_VAR 0 13
37273: PUSH
37274: FOR_IN
37275: IFFALSE 37333
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37277: LD_VAR 0 1
37281: PPUSH
37282: LD_STRING M
37284: PUSH
37285: LD_VAR 0 6
37289: PUSH
37290: LD_INT 1
37292: ARRAY
37293: PUSH
37294: LD_VAR 0 6
37298: PUSH
37299: LD_INT 2
37301: ARRAY
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 0
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: PUSH
37324: EMPTY
37325: LIST
37326: PPUSH
37327: CALL_OW 447
37331: GO 37274
37333: POP
37334: POP
// end ;
37335: LD_VAR 0 5
37339: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
37340: LD_INT 0
37342: PPUSH
37343: PPUSH
37344: PPUSH
37345: PPUSH
37346: PPUSH
37347: PPUSH
37348: PPUSH
37349: PPUSH
37350: PPUSH
37351: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
37352: LD_VAR 0 1
37356: PPUSH
37357: CALL_OW 302
37361: NOT
37362: IFTRUE 37381
37364: PUSH
37365: LD_VAR 0 2
37369: PPUSH
37370: LD_VAR 0 3
37374: PPUSH
37375: CALL_OW 488
37379: NOT
37380: OR
37381: IFTRUE 37390
37383: PUSH
37384: LD_VAR 0 4
37388: NOT
37389: OR
37390: IFFALSE 37394
// exit ;
37392: GO 37911
// list := [ ] ;
37394: LD_ADDR_VAR 0 13
37398: PUSH
37399: EMPTY
37400: ST_TO_ADDR
// if x - r < 0 then
37401: LD_VAR 0 2
37405: PUSH
37406: LD_VAR 0 4
37410: MINUS
37411: PUSH
37412: LD_INT 0
37414: LESS
37415: IFFALSE 37427
// min_x := 0 else
37417: LD_ADDR_VAR 0 7
37421: PUSH
37422: LD_INT 0
37424: ST_TO_ADDR
37425: GO 37443
// min_x := x - r ;
37427: LD_ADDR_VAR 0 7
37431: PUSH
37432: LD_VAR 0 2
37436: PUSH
37437: LD_VAR 0 4
37441: MINUS
37442: ST_TO_ADDR
// if y - r < 0 then
37443: LD_VAR 0 3
37447: PUSH
37448: LD_VAR 0 4
37452: MINUS
37453: PUSH
37454: LD_INT 0
37456: LESS
37457: IFFALSE 37469
// min_y := 0 else
37459: LD_ADDR_VAR 0 8
37463: PUSH
37464: LD_INT 0
37466: ST_TO_ADDR
37467: GO 37485
// min_y := y - r ;
37469: LD_ADDR_VAR 0 8
37473: PUSH
37474: LD_VAR 0 3
37478: PUSH
37479: LD_VAR 0 4
37483: MINUS
37484: ST_TO_ADDR
// max_x := x + r ;
37485: LD_ADDR_VAR 0 9
37489: PUSH
37490: LD_VAR 0 2
37494: PUSH
37495: LD_VAR 0 4
37499: PLUS
37500: ST_TO_ADDR
// max_y := y + r ;
37501: LD_ADDR_VAR 0 10
37505: PUSH
37506: LD_VAR 0 3
37510: PUSH
37511: LD_VAR 0 4
37515: PLUS
37516: ST_TO_ADDR
// for _x = min_x to max_x do
37517: LD_ADDR_VAR 0 11
37521: PUSH
37522: DOUBLE
37523: LD_VAR 0 7
37527: DEC
37528: ST_TO_ADDR
37529: LD_VAR 0 9
37533: PUSH
37534: FOR_TO
37535: IFFALSE 37654
// for _y = min_y to max_y do
37537: LD_ADDR_VAR 0 12
37541: PUSH
37542: DOUBLE
37543: LD_VAR 0 8
37547: DEC
37548: ST_TO_ADDR
37549: LD_VAR 0 10
37553: PUSH
37554: FOR_TO
37555: IFFALSE 37650
// begin if not ValidHex ( _x , _y ) then
37557: LD_VAR 0 11
37561: PPUSH
37562: LD_VAR 0 12
37566: PPUSH
37567: CALL_OW 488
37571: NOT
37572: IFFALSE 37576
// continue ;
37574: GO 37554
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37576: LD_VAR 0 11
37580: PPUSH
37581: LD_VAR 0 12
37585: PPUSH
37586: CALL_OW 351
37590: IFFALSE 37608
37592: PUSH
37593: LD_VAR 0 11
37597: PPUSH
37598: LD_VAR 0 12
37602: PPUSH
37603: CALL_OW 554
37607: AND
37608: IFFALSE 37648
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37610: LD_ADDR_VAR 0 13
37614: PUSH
37615: LD_VAR 0 13
37619: PPUSH
37620: LD_VAR 0 13
37624: PUSH
37625: LD_INT 1
37627: PLUS
37628: PPUSH
37629: LD_VAR 0 11
37633: PUSH
37634: LD_VAR 0 12
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PPUSH
37643: CALL_OW 2
37647: ST_TO_ADDR
// end ;
37648: GO 37554
37650: POP
37651: POP
37652: GO 37534
37654: POP
37655: POP
// if not list then
37656: LD_VAR 0 13
37660: NOT
37661: IFFALSE 37665
// exit ;
37663: GO 37911
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37665: LD_ADDR_VAR 0 13
37669: PUSH
37670: LD_VAR 0 1
37674: PPUSH
37675: LD_VAR 0 13
37679: PPUSH
37680: LD_INT 1
37682: PPUSH
37683: LD_INT 1
37685: PPUSH
37686: CALL 47554 0 4
37690: ST_TO_ADDR
// ComStop ( flame ) ;
37691: LD_VAR 0 1
37695: PPUSH
37696: CALL_OW 141
// for i in list do
37700: LD_ADDR_VAR 0 6
37704: PUSH
37705: LD_VAR 0 13
37709: PUSH
37710: FOR_IN
37711: IFFALSE 37742
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37713: LD_VAR 0 1
37717: PPUSH
37718: LD_VAR 0 6
37722: PUSH
37723: LD_INT 1
37725: ARRAY
37726: PPUSH
37727: LD_VAR 0 6
37731: PUSH
37732: LD_INT 2
37734: ARRAY
37735: PPUSH
37736: CALL_OW 176
37740: GO 37710
37742: POP
37743: POP
// repeat wait ( 0 0$1 ) ;
37744: LD_INT 35
37746: PPUSH
37747: CALL_OW 67
// task := GetTaskList ( flame ) ;
37751: LD_ADDR_VAR 0 14
37755: PUSH
37756: LD_VAR 0 1
37760: PPUSH
37761: CALL_OW 437
37765: ST_TO_ADDR
// if not task then
37766: LD_VAR 0 14
37770: NOT
37771: IFFALSE 37775
// exit ;
37773: GO 37911
// if task [ 1 ] [ 1 ] <> | then
37775: LD_VAR 0 14
37779: PUSH
37780: LD_INT 1
37782: ARRAY
37783: PUSH
37784: LD_INT 1
37786: ARRAY
37787: PUSH
37788: LD_STRING |
37790: NONEQUAL
37791: IFFALSE 37795
// exit ;
37793: GO 37911
// _x := task [ 1 ] [ 2 ] ;
37795: LD_ADDR_VAR 0 11
37799: PUSH
37800: LD_VAR 0 14
37804: PUSH
37805: LD_INT 1
37807: ARRAY
37808: PUSH
37809: LD_INT 2
37811: ARRAY
37812: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37813: LD_ADDR_VAR 0 12
37817: PUSH
37818: LD_VAR 0 14
37822: PUSH
37823: LD_INT 1
37825: ARRAY
37826: PUSH
37827: LD_INT 3
37829: ARRAY
37830: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37831: LD_VAR 0 11
37835: PPUSH
37836: LD_VAR 0 12
37840: PPUSH
37841: CALL_OW 351
37845: NOT
37846: IFTRUE 37865
37848: PUSH
37849: LD_VAR 0 11
37853: PPUSH
37854: LD_VAR 0 12
37858: PPUSH
37859: CALL_OW 554
37863: NOT
37864: OR
37865: IFFALSE 37899
// begin task := Delete ( task , 1 ) ;
37867: LD_ADDR_VAR 0 14
37871: PUSH
37872: LD_VAR 0 14
37876: PPUSH
37877: LD_INT 1
37879: PPUSH
37880: CALL_OW 3
37884: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37885: LD_VAR 0 1
37889: PPUSH
37890: LD_VAR 0 14
37894: PPUSH
37895: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37899: LD_VAR 0 1
37903: PPUSH
37904: CALL_OW 314
37908: NOT
37909: IFFALSE 37744
// end ;
37911: LD_VAR 0 5
37915: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37916: LD_EXP 116
37920: NOT
37921: IFFALSE 37971
37923: GO 37925
37925: DISABLE
// begin initHack := true ;
37926: LD_ADDR_EXP 116
37930: PUSH
37931: LD_INT 1
37933: ST_TO_ADDR
// hackTanks := [ ] ;
37934: LD_ADDR_EXP 117
37938: PUSH
37939: EMPTY
37940: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37941: LD_ADDR_EXP 118
37945: PUSH
37946: EMPTY
37947: ST_TO_ADDR
// hackLimit := 3 ;
37948: LD_ADDR_EXP 119
37952: PUSH
37953: LD_INT 3
37955: ST_TO_ADDR
// hackDist := 12 ;
37956: LD_ADDR_EXP 120
37960: PUSH
37961: LD_INT 12
37963: ST_TO_ADDR
// hackCounter := [ ] ;
37964: LD_ADDR_EXP 121
37968: PUSH
37969: EMPTY
37970: ST_TO_ADDR
// end ;
37971: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37972: LD_EXP 116
37976: IFFALSE 37994
37978: PUSH
37979: LD_INT 34
37981: PUSH
37982: LD_INT 99
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PPUSH
37989: CALL_OW 69
37993: AND
37994: IFFALSE 38247
37996: GO 37998
37998: DISABLE
37999: LD_INT 0
38001: PPUSH
38002: PPUSH
// begin enable ;
38003: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38004: LD_ADDR_VAR 0 1
38008: PUSH
38009: LD_INT 34
38011: PUSH
38012: LD_INT 99
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PPUSH
38019: CALL_OW 69
38023: PUSH
38024: FOR_IN
38025: IFFALSE 38245
// begin if not i in hackTanks then
38027: LD_VAR 0 1
38031: PUSH
38032: LD_EXP 117
38036: IN
38037: NOT
38038: IFFALSE 38121
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38040: LD_ADDR_EXP 117
38044: PUSH
38045: LD_EXP 117
38049: PPUSH
38050: LD_EXP 117
38054: PUSH
38055: LD_INT 1
38057: PLUS
38058: PPUSH
38059: LD_VAR 0 1
38063: PPUSH
38064: CALL_OW 1
38068: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38069: LD_ADDR_EXP 118
38073: PUSH
38074: LD_EXP 118
38078: PPUSH
38079: LD_EXP 118
38083: PUSH
38084: LD_INT 1
38086: PLUS
38087: PPUSH
38088: EMPTY
38089: PPUSH
38090: CALL_OW 1
38094: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38095: LD_ADDR_EXP 121
38099: PUSH
38100: LD_EXP 121
38104: PPUSH
38105: LD_EXP 121
38109: PUSH
38110: LD_INT 1
38112: PLUS
38113: PPUSH
38114: EMPTY
38115: PPUSH
38116: CALL_OW 1
38120: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38121: LD_VAR 0 1
38125: PPUSH
38126: CALL_OW 302
38130: NOT
38131: IFFALSE 38144
// begin HackUnlinkAll ( i ) ;
38133: LD_VAR 0 1
38137: PPUSH
38138: CALL 38250 0 1
// continue ;
38142: GO 38024
// end ; HackCheckCapturedStatus ( i ) ;
38144: LD_VAR 0 1
38148: PPUSH
38149: CALL 38695 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38153: LD_ADDR_VAR 0 2
38157: PUSH
38158: LD_INT 81
38160: PUSH
38161: LD_VAR 0 1
38165: PPUSH
38166: CALL_OW 255
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 33
38177: PUSH
38178: LD_INT 3
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 91
38187: PUSH
38188: LD_VAR 0 1
38192: PUSH
38193: LD_EXP 120
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 50
38205: PUSH
38206: EMPTY
38207: LIST
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: PPUSH
38215: CALL_OW 69
38219: ST_TO_ADDR
// if not tmp then
38220: LD_VAR 0 2
38224: NOT
38225: IFFALSE 38229
// continue ;
38227: GO 38024
// HackLink ( i , tmp ) ;
38229: LD_VAR 0 1
38233: PPUSH
38234: LD_VAR 0 2
38238: PPUSH
38239: CALL 38386 0 2
// end ;
38243: GO 38024
38245: POP
38246: POP
// end ;
38247: PPOPN 2
38249: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38250: LD_INT 0
38252: PPUSH
38253: PPUSH
38254: PPUSH
// if not hack in hackTanks then
38255: LD_VAR 0 1
38259: PUSH
38260: LD_EXP 117
38264: IN
38265: NOT
38266: IFFALSE 38270
// exit ;
38268: GO 38381
// index := GetElementIndex ( hackTanks , hack ) ;
38270: LD_ADDR_VAR 0 4
38274: PUSH
38275: LD_EXP 117
38279: PPUSH
38280: LD_VAR 0 1
38284: PPUSH
38285: CALL 46849 0 2
38289: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38290: LD_EXP 118
38294: PUSH
38295: LD_VAR 0 4
38299: ARRAY
38300: IFFALSE 38381
// begin for i in hackTanksCaptured [ index ] do
38302: LD_ADDR_VAR 0 3
38306: PUSH
38307: LD_EXP 118
38311: PUSH
38312: LD_VAR 0 4
38316: ARRAY
38317: PUSH
38318: FOR_IN
38319: IFFALSE 38345
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38321: LD_VAR 0 3
38325: PUSH
38326: LD_INT 1
38328: ARRAY
38329: PPUSH
38330: LD_VAR 0 3
38334: PUSH
38335: LD_INT 2
38337: ARRAY
38338: PPUSH
38339: CALL_OW 235
38343: GO 38318
38345: POP
38346: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38347: LD_ADDR_EXP 118
38351: PUSH
38352: LD_EXP 118
38356: PPUSH
38357: LD_VAR 0 4
38361: PPUSH
38362: EMPTY
38363: PPUSH
38364: CALL_OW 1
38368: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
38369: LD_VAR 0 1
38373: PPUSH
38374: LD_INT 0
38376: PPUSH
38377: CALL_OW 505
// end ; end ;
38381: LD_VAR 0 2
38385: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
38386: LD_INT 0
38388: PPUSH
38389: PPUSH
38390: PPUSH
// if not hack in hackTanks or not vehicles then
38391: LD_VAR 0 1
38395: PUSH
38396: LD_EXP 117
38400: IN
38401: NOT
38402: IFTRUE 38411
38404: PUSH
38405: LD_VAR 0 2
38409: NOT
38410: OR
38411: IFFALSE 38415
// exit ;
38413: GO 38690
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
38415: LD_ADDR_VAR 0 2
38419: PUSH
38420: LD_VAR 0 1
38424: PPUSH
38425: LD_VAR 0 2
38429: PPUSH
38430: LD_INT 1
38432: PPUSH
38433: LD_INT 1
38435: PPUSH
38436: CALL 47501 0 4
38440: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38441: LD_ADDR_VAR 0 5
38445: PUSH
38446: LD_EXP 117
38450: PPUSH
38451: LD_VAR 0 1
38455: PPUSH
38456: CALL 46849 0 2
38460: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38461: LD_EXP 118
38465: PUSH
38466: LD_VAR 0 5
38470: ARRAY
38471: PUSH
38472: LD_EXP 119
38476: LESS
38477: IFFALSE 38666
// begin for i := 1 to vehicles do
38479: LD_ADDR_VAR 0 4
38483: PUSH
38484: DOUBLE
38485: LD_INT 1
38487: DEC
38488: ST_TO_ADDR
38489: LD_VAR 0 2
38493: PUSH
38494: FOR_TO
38495: IFFALSE 38664
// begin if hackTanksCaptured [ index ] = hackLimit then
38497: LD_EXP 118
38501: PUSH
38502: LD_VAR 0 5
38506: ARRAY
38507: PUSH
38508: LD_EXP 119
38512: EQUAL
38513: IFFALSE 38517
// break ;
38515: GO 38664
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38517: LD_ADDR_EXP 121
38521: PUSH
38522: LD_EXP 121
38526: PPUSH
38527: LD_VAR 0 5
38531: PPUSH
38532: LD_EXP 121
38536: PUSH
38537: LD_VAR 0 5
38541: ARRAY
38542: PUSH
38543: LD_INT 1
38545: PLUS
38546: PPUSH
38547: CALL_OW 1
38551: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38552: LD_ADDR_EXP 118
38556: PUSH
38557: LD_EXP 118
38561: PPUSH
38562: LD_VAR 0 5
38566: PUSH
38567: LD_EXP 118
38571: PUSH
38572: LD_VAR 0 5
38576: ARRAY
38577: PUSH
38578: LD_INT 1
38580: PLUS
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PPUSH
38586: LD_VAR 0 2
38590: PUSH
38591: LD_VAR 0 4
38595: ARRAY
38596: PUSH
38597: LD_VAR 0 2
38601: PUSH
38602: LD_VAR 0 4
38606: ARRAY
38607: PPUSH
38608: CALL_OW 255
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PPUSH
38617: CALL 47066 0 3
38621: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38622: LD_VAR 0 2
38626: PUSH
38627: LD_VAR 0 4
38631: ARRAY
38632: PPUSH
38633: LD_VAR 0 1
38637: PPUSH
38638: CALL_OW 255
38642: PPUSH
38643: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38647: LD_VAR 0 2
38651: PUSH
38652: LD_VAR 0 4
38656: ARRAY
38657: PPUSH
38658: CALL_OW 141
// end ;
38662: GO 38494
38664: POP
38665: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38666: LD_VAR 0 1
38670: PPUSH
38671: LD_EXP 118
38675: PUSH
38676: LD_VAR 0 5
38680: ARRAY
38681: PUSH
38682: LD_INT 0
38684: PLUS
38685: PPUSH
38686: CALL_OW 505
// end ;
38690: LD_VAR 0 3
38694: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38695: LD_INT 0
38697: PPUSH
38698: PPUSH
38699: PPUSH
38700: PPUSH
// if not hack in hackTanks then
38701: LD_VAR 0 1
38705: PUSH
38706: LD_EXP 117
38710: IN
38711: NOT
38712: IFFALSE 38716
// exit ;
38714: GO 38960
// index := GetElementIndex ( hackTanks , hack ) ;
38716: LD_ADDR_VAR 0 4
38720: PUSH
38721: LD_EXP 117
38725: PPUSH
38726: LD_VAR 0 1
38730: PPUSH
38731: CALL 46849 0 2
38735: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38736: LD_ADDR_VAR 0 3
38740: PUSH
38741: DOUBLE
38742: LD_EXP 118
38746: PUSH
38747: LD_VAR 0 4
38751: ARRAY
38752: INC
38753: ST_TO_ADDR
38754: LD_INT 1
38756: PUSH
38757: FOR_DOWNTO
38758: IFFALSE 38934
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38760: LD_ADDR_VAR 0 5
38764: PUSH
38765: LD_EXP 118
38769: PUSH
38770: LD_VAR 0 4
38774: ARRAY
38775: PUSH
38776: LD_VAR 0 3
38780: ARRAY
38781: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38782: LD_VAR 0 5
38786: PUSH
38787: LD_INT 1
38789: ARRAY
38790: PPUSH
38791: CALL_OW 302
38795: NOT
38796: IFTRUE 38824
38798: PUSH
38799: LD_VAR 0 5
38803: PUSH
38804: LD_INT 1
38806: ARRAY
38807: PPUSH
38808: CALL_OW 255
38812: PUSH
38813: LD_VAR 0 1
38817: PPUSH
38818: CALL_OW 255
38822: NONEQUAL
38823: OR
38824: IFFALSE 38932
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38826: LD_VAR 0 5
38830: PUSH
38831: LD_INT 1
38833: ARRAY
38834: PPUSH
38835: CALL_OW 305
38839: IFFALSE 38867
38841: PUSH
38842: LD_VAR 0 5
38846: PUSH
38847: LD_INT 1
38849: ARRAY
38850: PPUSH
38851: CALL_OW 255
38855: PUSH
38856: LD_VAR 0 1
38860: PPUSH
38861: CALL_OW 255
38865: EQUAL
38866: AND
38867: IFFALSE 38891
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38869: LD_VAR 0 5
38873: PUSH
38874: LD_INT 1
38876: ARRAY
38877: PPUSH
38878: LD_VAR 0 5
38882: PUSH
38883: LD_INT 2
38885: ARRAY
38886: PPUSH
38887: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38891: LD_ADDR_EXP 118
38895: PUSH
38896: LD_EXP 118
38900: PPUSH
38901: LD_VAR 0 4
38905: PPUSH
38906: LD_EXP 118
38910: PUSH
38911: LD_VAR 0 4
38915: ARRAY
38916: PPUSH
38917: LD_VAR 0 3
38921: PPUSH
38922: CALL_OW 3
38926: PPUSH
38927: CALL_OW 1
38931: ST_TO_ADDR
// end ; end ;
38932: GO 38757
38934: POP
38935: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38936: LD_VAR 0 1
38940: PPUSH
38941: LD_EXP 118
38945: PUSH
38946: LD_VAR 0 4
38950: ARRAY
38951: PUSH
38952: LD_INT 0
38954: PLUS
38955: PPUSH
38956: CALL_OW 505
// end ;
38960: LD_VAR 0 2
38964: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38965: LD_INT 0
38967: PPUSH
38968: PPUSH
38969: PPUSH
38970: PPUSH
// if not hack in hackTanks then
38971: LD_VAR 0 1
38975: PUSH
38976: LD_EXP 117
38980: IN
38981: NOT
38982: IFFALSE 38986
// exit ;
38984: GO 39071
// index := GetElementIndex ( hackTanks , hack ) ;
38986: LD_ADDR_VAR 0 5
38990: PUSH
38991: LD_EXP 117
38995: PPUSH
38996: LD_VAR 0 1
39000: PPUSH
39001: CALL 46849 0 2
39005: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39006: LD_ADDR_VAR 0 4
39010: PUSH
39011: DOUBLE
39012: LD_INT 1
39014: DEC
39015: ST_TO_ADDR
39016: LD_EXP 118
39020: PUSH
39021: LD_VAR 0 5
39025: ARRAY
39026: PUSH
39027: FOR_TO
39028: IFFALSE 39069
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39030: LD_EXP 118
39034: PUSH
39035: LD_VAR 0 5
39039: ARRAY
39040: PUSH
39041: LD_VAR 0 4
39045: ARRAY
39046: PUSH
39047: LD_INT 1
39049: ARRAY
39050: PUSH
39051: LD_VAR 0 2
39055: EQUAL
39056: IFFALSE 39067
// KillUnit ( vehicle ) ;
39058: LD_VAR 0 2
39062: PPUSH
39063: CALL_OW 66
39067: GO 39027
39069: POP
39070: POP
// end ;
39071: LD_VAR 0 3
39075: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39076: LD_EXP 122
39080: NOT
39081: IFFALSE 39116
39083: GO 39085
39085: DISABLE
// begin initMiner := true ;
39086: LD_ADDR_EXP 122
39090: PUSH
39091: LD_INT 1
39093: ST_TO_ADDR
// minersList := [ ] ;
39094: LD_ADDR_EXP 123
39098: PUSH
39099: EMPTY
39100: ST_TO_ADDR
// minerMinesList := [ ] ;
39101: LD_ADDR_EXP 124
39105: PUSH
39106: EMPTY
39107: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39108: LD_ADDR_EXP 125
39112: PUSH
39113: LD_INT 5
39115: ST_TO_ADDR
// end ;
39116: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39117: LD_EXP 122
39121: IFFALSE 39139
39123: PUSH
39124: LD_INT 34
39126: PUSH
39127: LD_INT 81
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PPUSH
39134: CALL_OW 69
39138: AND
39139: IFFALSE 39602
39141: GO 39143
39143: DISABLE
39144: LD_INT 0
39146: PPUSH
39147: PPUSH
39148: PPUSH
39149: PPUSH
// begin enable ;
39150: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39151: LD_ADDR_VAR 0 1
39155: PUSH
39156: LD_INT 34
39158: PUSH
39159: LD_INT 81
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PPUSH
39166: CALL_OW 69
39170: PUSH
39171: FOR_IN
39172: IFFALSE 39244
// begin if not i in minersList then
39174: LD_VAR 0 1
39178: PUSH
39179: LD_EXP 123
39183: IN
39184: NOT
39185: IFFALSE 39242
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39187: LD_ADDR_EXP 123
39191: PUSH
39192: LD_EXP 123
39196: PPUSH
39197: LD_EXP 123
39201: PUSH
39202: LD_INT 1
39204: PLUS
39205: PPUSH
39206: LD_VAR 0 1
39210: PPUSH
39211: CALL_OW 1
39215: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39216: LD_ADDR_EXP 124
39220: PUSH
39221: LD_EXP 124
39225: PPUSH
39226: LD_EXP 124
39230: PUSH
39231: LD_INT 1
39233: PLUS
39234: PPUSH
39235: EMPTY
39236: PPUSH
39237: CALL_OW 1
39241: ST_TO_ADDR
// end end ;
39242: GO 39171
39244: POP
39245: POP
// for i := minerMinesList downto 1 do
39246: LD_ADDR_VAR 0 1
39250: PUSH
39251: DOUBLE
39252: LD_EXP 124
39256: INC
39257: ST_TO_ADDR
39258: LD_INT 1
39260: PUSH
39261: FOR_DOWNTO
39262: IFFALSE 39600
// begin if IsLive ( minersList [ i ] ) then
39264: LD_EXP 123
39268: PUSH
39269: LD_VAR 0 1
39273: ARRAY
39274: PPUSH
39275: CALL_OW 300
39279: IFFALSE 39307
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39281: LD_EXP 123
39285: PUSH
39286: LD_VAR 0 1
39290: ARRAY
39291: PPUSH
39292: LD_EXP 124
39296: PUSH
39297: LD_VAR 0 1
39301: ARRAY
39302: PPUSH
39303: CALL_OW 505
// if not minerMinesList [ i ] then
39307: LD_EXP 124
39311: PUSH
39312: LD_VAR 0 1
39316: ARRAY
39317: NOT
39318: IFFALSE 39322
// continue ;
39320: GO 39261
// for j := minerMinesList [ i ] downto 1 do
39322: LD_ADDR_VAR 0 2
39326: PUSH
39327: DOUBLE
39328: LD_EXP 124
39332: PUSH
39333: LD_VAR 0 1
39337: ARRAY
39338: INC
39339: ST_TO_ADDR
39340: LD_INT 1
39342: PUSH
39343: FOR_DOWNTO
39344: IFFALSE 39596
// begin side := GetSide ( minersList [ i ] ) ;
39346: LD_ADDR_VAR 0 3
39350: PUSH
39351: LD_EXP 123
39355: PUSH
39356: LD_VAR 0 1
39360: ARRAY
39361: PPUSH
39362: CALL_OW 255
39366: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
39367: LD_ADDR_VAR 0 4
39371: PUSH
39372: LD_EXP 124
39376: PUSH
39377: LD_VAR 0 1
39381: ARRAY
39382: PUSH
39383: LD_VAR 0 2
39387: ARRAY
39388: PUSH
39389: LD_INT 1
39391: ARRAY
39392: PPUSH
39393: LD_EXP 124
39397: PUSH
39398: LD_VAR 0 1
39402: ARRAY
39403: PUSH
39404: LD_VAR 0 2
39408: ARRAY
39409: PUSH
39410: LD_INT 2
39412: ARRAY
39413: PPUSH
39414: CALL_OW 428
39418: ST_TO_ADDR
// if not tmp then
39419: LD_VAR 0 4
39423: NOT
39424: IFFALSE 39428
// continue ;
39426: GO 39343
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39428: LD_VAR 0 4
39432: PUSH
39433: LD_INT 81
39435: PUSH
39436: LD_VAR 0 3
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PPUSH
39445: CALL_OW 69
39449: IN
39450: IFFALSE 39500
39452: PUSH
39453: LD_EXP 124
39457: PUSH
39458: LD_VAR 0 1
39462: ARRAY
39463: PUSH
39464: LD_VAR 0 2
39468: ARRAY
39469: PUSH
39470: LD_INT 1
39472: ARRAY
39473: PPUSH
39474: LD_EXP 124
39478: PUSH
39479: LD_VAR 0 1
39483: ARRAY
39484: PUSH
39485: LD_VAR 0 2
39489: ARRAY
39490: PUSH
39491: LD_INT 2
39493: ARRAY
39494: PPUSH
39495: CALL_OW 458
39499: AND
39500: IFFALSE 39594
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39502: LD_EXP 124
39506: PUSH
39507: LD_VAR 0 1
39511: ARRAY
39512: PUSH
39513: LD_VAR 0 2
39517: ARRAY
39518: PUSH
39519: LD_INT 1
39521: ARRAY
39522: PPUSH
39523: LD_EXP 124
39527: PUSH
39528: LD_VAR 0 1
39532: ARRAY
39533: PUSH
39534: LD_VAR 0 2
39538: ARRAY
39539: PUSH
39540: LD_INT 2
39542: ARRAY
39543: PPUSH
39544: LD_VAR 0 3
39548: PPUSH
39549: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39553: LD_ADDR_EXP 124
39557: PUSH
39558: LD_EXP 124
39562: PPUSH
39563: LD_VAR 0 1
39567: PPUSH
39568: LD_EXP 124
39572: PUSH
39573: LD_VAR 0 1
39577: ARRAY
39578: PPUSH
39579: LD_VAR 0 2
39583: PPUSH
39584: CALL_OW 3
39588: PPUSH
39589: CALL_OW 1
39593: ST_TO_ADDR
// end ; end ;
39594: GO 39343
39596: POP
39597: POP
// end ;
39598: GO 39261
39600: POP
39601: POP
// end ;
39602: PPOPN 4
39604: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39605: LD_INT 0
39607: PPUSH
39608: PPUSH
// result := false ;
39609: LD_ADDR_VAR 0 4
39613: PUSH
39614: LD_INT 0
39616: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39617: LD_VAR 0 1
39621: PPUSH
39622: CALL_OW 264
39626: PUSH
39627: LD_INT 81
39629: EQUAL
39630: NOT
39631: IFFALSE 39635
// exit ;
39633: GO 39879
// index := GetElementIndex ( minersList , unit ) ;
39635: LD_ADDR_VAR 0 5
39639: PUSH
39640: LD_EXP 123
39644: PPUSH
39645: LD_VAR 0 1
39649: PPUSH
39650: CALL 46849 0 2
39654: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39655: LD_EXP 124
39659: PUSH
39660: LD_VAR 0 5
39664: ARRAY
39665: PUSH
39666: LD_EXP 125
39670: GREATEREQUAL
39671: IFFALSE 39675
// exit ;
39673: GO 39879
// ComMoveXY ( unit , x , y ) ;
39675: LD_VAR 0 1
39679: PPUSH
39680: LD_VAR 0 2
39684: PPUSH
39685: LD_VAR 0 3
39689: PPUSH
39690: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39694: LD_INT 35
39696: PPUSH
39697: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39701: LD_VAR 0 1
39705: PPUSH
39706: LD_VAR 0 2
39710: PPUSH
39711: LD_VAR 0 3
39715: PPUSH
39716: CALL 78895 0 3
39720: NOT
39721: IFFALSE 39734
39723: PUSH
39724: LD_VAR 0 1
39728: PPUSH
39729: CALL_OW 314
39733: AND
39734: IFFALSE 39738
// exit ;
39736: GO 39879
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39738: LD_VAR 0 2
39742: PPUSH
39743: LD_VAR 0 3
39747: PPUSH
39748: CALL_OW 428
39752: PUSH
39753: LD_VAR 0 1
39757: EQUAL
39758: IFFALSE 39772
39760: PUSH
39761: LD_VAR 0 1
39765: PPUSH
39766: CALL_OW 314
39770: NOT
39771: AND
39772: IFFALSE 39694
// PlaySoundXY ( x , y , PlantMine ) ;
39774: LD_VAR 0 2
39778: PPUSH
39779: LD_VAR 0 3
39783: PPUSH
39784: LD_STRING PlantMine
39786: PPUSH
39787: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39791: LD_VAR 0 2
39795: PPUSH
39796: LD_VAR 0 3
39800: PPUSH
39801: LD_VAR 0 1
39805: PPUSH
39806: CALL_OW 255
39810: PPUSH
39811: LD_INT 0
39813: PPUSH
39814: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39818: LD_ADDR_EXP 124
39822: PUSH
39823: LD_EXP 124
39827: PPUSH
39828: LD_VAR 0 5
39832: PUSH
39833: LD_EXP 124
39837: PUSH
39838: LD_VAR 0 5
39842: ARRAY
39843: PUSH
39844: LD_INT 1
39846: PLUS
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PPUSH
39852: LD_VAR 0 2
39856: PUSH
39857: LD_VAR 0 3
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PPUSH
39866: CALL 47066 0 3
39870: ST_TO_ADDR
// result := true ;
39871: LD_ADDR_VAR 0 4
39875: PUSH
39876: LD_INT 1
39878: ST_TO_ADDR
// end ;
39879: LD_VAR 0 4
39883: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39884: LD_INT 0
39886: PPUSH
39887: PPUSH
39888: PPUSH
// if not unit in minersList then
39889: LD_VAR 0 1
39893: PUSH
39894: LD_EXP 123
39898: IN
39899: NOT
39900: IFFALSE 39904
// exit ;
39902: GO 40298
// index := GetElementIndex ( minersList , unit ) ;
39904: LD_ADDR_VAR 0 6
39908: PUSH
39909: LD_EXP 123
39913: PPUSH
39914: LD_VAR 0 1
39918: PPUSH
39919: CALL 46849 0 2
39923: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39924: LD_ADDR_VAR 0 5
39928: PUSH
39929: DOUBLE
39930: LD_EXP 124
39934: PUSH
39935: LD_VAR 0 6
39939: ARRAY
39940: INC
39941: ST_TO_ADDR
39942: LD_INT 1
39944: PUSH
39945: FOR_DOWNTO
39946: IFFALSE 40109
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39948: LD_EXP 124
39952: PUSH
39953: LD_VAR 0 6
39957: ARRAY
39958: PUSH
39959: LD_VAR 0 5
39963: ARRAY
39964: PUSH
39965: LD_INT 1
39967: ARRAY
39968: PUSH
39969: LD_VAR 0 2
39973: EQUAL
39974: IFFALSE 40004
39976: PUSH
39977: LD_EXP 124
39981: PUSH
39982: LD_VAR 0 6
39986: ARRAY
39987: PUSH
39988: LD_VAR 0 5
39992: ARRAY
39993: PUSH
39994: LD_INT 2
39996: ARRAY
39997: PUSH
39998: LD_VAR 0 3
40002: EQUAL
40003: AND
40004: IFFALSE 40107
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40006: LD_EXP 124
40010: PUSH
40011: LD_VAR 0 6
40015: ARRAY
40016: PUSH
40017: LD_VAR 0 5
40021: ARRAY
40022: PUSH
40023: LD_INT 1
40025: ARRAY
40026: PPUSH
40027: LD_EXP 124
40031: PUSH
40032: LD_VAR 0 6
40036: ARRAY
40037: PUSH
40038: LD_VAR 0 5
40042: ARRAY
40043: PUSH
40044: LD_INT 2
40046: ARRAY
40047: PPUSH
40048: LD_VAR 0 1
40052: PPUSH
40053: CALL_OW 255
40057: PPUSH
40058: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40062: LD_ADDR_EXP 124
40066: PUSH
40067: LD_EXP 124
40071: PPUSH
40072: LD_VAR 0 6
40076: PPUSH
40077: LD_EXP 124
40081: PUSH
40082: LD_VAR 0 6
40086: ARRAY
40087: PPUSH
40088: LD_VAR 0 5
40092: PPUSH
40093: CALL_OW 3
40097: PPUSH
40098: CALL_OW 1
40102: ST_TO_ADDR
// exit ;
40103: POP
40104: POP
40105: GO 40298
// end ; end ;
40107: GO 39945
40109: POP
40110: POP
// for i := minerMinesList [ index ] downto 1 do
40111: LD_ADDR_VAR 0 5
40115: PUSH
40116: DOUBLE
40117: LD_EXP 124
40121: PUSH
40122: LD_VAR 0 6
40126: ARRAY
40127: INC
40128: ST_TO_ADDR
40129: LD_INT 1
40131: PUSH
40132: FOR_DOWNTO
40133: IFFALSE 40296
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40135: LD_EXP 124
40139: PUSH
40140: LD_VAR 0 6
40144: ARRAY
40145: PUSH
40146: LD_VAR 0 5
40150: ARRAY
40151: PUSH
40152: LD_INT 1
40154: ARRAY
40155: PPUSH
40156: LD_EXP 124
40160: PUSH
40161: LD_VAR 0 6
40165: ARRAY
40166: PUSH
40167: LD_VAR 0 5
40171: ARRAY
40172: PUSH
40173: LD_INT 2
40175: ARRAY
40176: PPUSH
40177: LD_VAR 0 2
40181: PPUSH
40182: LD_VAR 0 3
40186: PPUSH
40187: CALL_OW 298
40191: PUSH
40192: LD_INT 6
40194: LESS
40195: IFFALSE 40294
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40197: LD_EXP 124
40201: PUSH
40202: LD_VAR 0 6
40206: ARRAY
40207: PUSH
40208: LD_VAR 0 5
40212: ARRAY
40213: PUSH
40214: LD_INT 1
40216: ARRAY
40217: PPUSH
40218: LD_EXP 124
40222: PUSH
40223: LD_VAR 0 6
40227: ARRAY
40228: PUSH
40229: LD_VAR 0 5
40233: ARRAY
40234: PUSH
40235: LD_INT 2
40237: ARRAY
40238: PPUSH
40239: LD_VAR 0 1
40243: PPUSH
40244: CALL_OW 255
40248: PPUSH
40249: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40253: LD_ADDR_EXP 124
40257: PUSH
40258: LD_EXP 124
40262: PPUSH
40263: LD_VAR 0 6
40267: PPUSH
40268: LD_EXP 124
40272: PUSH
40273: LD_VAR 0 6
40277: ARRAY
40278: PPUSH
40279: LD_VAR 0 5
40283: PPUSH
40284: CALL_OW 3
40288: PPUSH
40289: CALL_OW 1
40293: ST_TO_ADDR
// end ; end ;
40294: GO 40132
40296: POP
40297: POP
// end ;
40298: LD_VAR 0 4
40302: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40303: LD_INT 0
40305: PPUSH
40306: PPUSH
40307: PPUSH
40308: PPUSH
40309: PPUSH
40310: PPUSH
40311: PPUSH
40312: PPUSH
40313: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40314: LD_VAR 0 1
40318: PPUSH
40319: CALL_OW 264
40323: PUSH
40324: LD_INT 81
40326: EQUAL
40327: NOT
40328: IFTRUE 40343
40330: PUSH
40331: LD_VAR 0 1
40335: PUSH
40336: LD_EXP 123
40340: IN
40341: NOT
40342: OR
40343: IFFALSE 40347
// exit ;
40345: GO 40673
// index := GetElementIndex ( minersList , unit ) ;
40347: LD_ADDR_VAR 0 6
40351: PUSH
40352: LD_EXP 123
40356: PPUSH
40357: LD_VAR 0 1
40361: PPUSH
40362: CALL 46849 0 2
40366: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
40367: LD_ADDR_VAR 0 8
40371: PUSH
40372: LD_EXP 125
40376: PUSH
40377: LD_EXP 124
40381: PUSH
40382: LD_VAR 0 6
40386: ARRAY
40387: MINUS
40388: ST_TO_ADDR
// if not minesFreeAmount then
40389: LD_VAR 0 8
40393: NOT
40394: IFFALSE 40398
// exit ;
40396: GO 40673
// tmp := [ ] ;
40398: LD_ADDR_VAR 0 7
40402: PUSH
40403: EMPTY
40404: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
40405: LD_ADDR_VAR 0 5
40409: PUSH
40410: DOUBLE
40411: LD_INT 1
40413: DEC
40414: ST_TO_ADDR
40415: LD_VAR 0 8
40419: PUSH
40420: FOR_TO
40421: IFFALSE 40620
// begin _d := rand ( 0 , 5 ) ;
40423: LD_ADDR_VAR 0 11
40427: PUSH
40428: LD_INT 0
40430: PPUSH
40431: LD_INT 5
40433: PPUSH
40434: CALL_OW 12
40438: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40439: LD_ADDR_VAR 0 12
40443: PUSH
40444: LD_INT 2
40446: PPUSH
40447: LD_INT 6
40449: PPUSH
40450: CALL_OW 12
40454: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40455: LD_ADDR_VAR 0 9
40459: PUSH
40460: LD_VAR 0 2
40464: PPUSH
40465: LD_VAR 0 11
40469: PPUSH
40470: LD_VAR 0 12
40474: PPUSH
40475: CALL_OW 272
40479: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40480: LD_ADDR_VAR 0 10
40484: PUSH
40485: LD_VAR 0 3
40489: PPUSH
40490: LD_VAR 0 11
40494: PPUSH
40495: LD_VAR 0 12
40499: PPUSH
40500: CALL_OW 273
40504: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40505: LD_VAR 0 9
40509: PPUSH
40510: LD_VAR 0 10
40514: PPUSH
40515: CALL_OW 488
40519: IFFALSE 40543
40521: PUSH
40522: LD_VAR 0 9
40526: PUSH
40527: LD_VAR 0 10
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_VAR 0 7
40540: IN
40541: NOT
40542: AND
40543: IFFALSE 40562
40545: PUSH
40546: LD_VAR 0 9
40550: PPUSH
40551: LD_VAR 0 10
40555: PPUSH
40556: CALL_OW 458
40560: NOT
40561: AND
40562: IFFALSE 40604
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40564: LD_ADDR_VAR 0 7
40568: PUSH
40569: LD_VAR 0 7
40573: PPUSH
40574: LD_VAR 0 7
40578: PUSH
40579: LD_INT 1
40581: PLUS
40582: PPUSH
40583: LD_VAR 0 9
40587: PUSH
40588: LD_VAR 0 10
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PPUSH
40597: CALL_OW 1
40601: ST_TO_ADDR
40602: GO 40618
// i := i - 1 ;
40604: LD_ADDR_VAR 0 5
40608: PUSH
40609: LD_VAR 0 5
40613: PUSH
40614: LD_INT 1
40616: MINUS
40617: ST_TO_ADDR
// end ;
40618: GO 40420
40620: POP
40621: POP
// for i in tmp do
40622: LD_ADDR_VAR 0 5
40626: PUSH
40627: LD_VAR 0 7
40631: PUSH
40632: FOR_IN
40633: IFFALSE 40671
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40635: LD_VAR 0 1
40639: PPUSH
40640: LD_VAR 0 5
40644: PUSH
40645: LD_INT 1
40647: ARRAY
40648: PPUSH
40649: LD_VAR 0 5
40653: PUSH
40654: LD_INT 2
40656: ARRAY
40657: PPUSH
40658: CALL 39605 0 3
40662: NOT
40663: IFFALSE 40669
// exit ;
40665: POP
40666: POP
40667: GO 40673
40669: GO 40632
40671: POP
40672: POP
// end ;
40673: LD_VAR 0 4
40677: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40678: LD_INT 0
40680: PPUSH
40681: PPUSH
40682: PPUSH
40683: PPUSH
40684: PPUSH
40685: PPUSH
40686: PPUSH
40687: PPUSH
40688: PPUSH
// if GetClass ( unit ) <> class_sniper then
40689: LD_VAR 0 1
40693: PPUSH
40694: CALL_OW 257
40698: PUSH
40699: LD_INT 5
40701: NONEQUAL
40702: IFFALSE 40706
// exit ;
40704: GO 41176
// dist := 8 ;
40706: LD_ADDR_VAR 0 5
40710: PUSH
40711: LD_INT 8
40713: ST_TO_ADDR
// viewRange := 12 ;
40714: LD_ADDR_VAR 0 8
40718: PUSH
40719: LD_INT 12
40721: ST_TO_ADDR
// side := GetSide ( unit ) ;
40722: LD_ADDR_VAR 0 6
40726: PUSH
40727: LD_VAR 0 1
40731: PPUSH
40732: CALL_OW 255
40736: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40737: LD_INT 61
40739: PPUSH
40740: LD_VAR 0 6
40744: PPUSH
40745: CALL_OW 321
40749: PUSH
40750: LD_INT 2
40752: EQUAL
40753: IFFALSE 40763
// viewRange := 16 ;
40755: LD_ADDR_VAR 0 8
40759: PUSH
40760: LD_INT 16
40762: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40763: LD_VAR 0 1
40767: PPUSH
40768: LD_VAR 0 2
40772: PPUSH
40773: LD_VAR 0 3
40777: PPUSH
40778: CALL_OW 297
40782: PUSH
40783: LD_VAR 0 5
40787: GREATER
40788: IFFALSE 40867
// begin ComMoveXY ( unit , x , y ) ;
40790: LD_VAR 0 1
40794: PPUSH
40795: LD_VAR 0 2
40799: PPUSH
40800: LD_VAR 0 3
40804: PPUSH
40805: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40809: LD_INT 35
40811: PPUSH
40812: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40816: LD_VAR 0 1
40820: PPUSH
40821: LD_VAR 0 2
40825: PPUSH
40826: LD_VAR 0 3
40830: PPUSH
40831: CALL 78895 0 3
40835: NOT
40836: IFFALSE 40840
// exit ;
40838: GO 41176
// until GetDistUnitXY ( unit , x , y ) < dist ;
40840: LD_VAR 0 1
40844: PPUSH
40845: LD_VAR 0 2
40849: PPUSH
40850: LD_VAR 0 3
40854: PPUSH
40855: CALL_OW 297
40859: PUSH
40860: LD_VAR 0 5
40864: LESS
40865: IFFALSE 40809
// end ; ComTurnXY ( unit , x , y ) ;
40867: LD_VAR 0 1
40871: PPUSH
40872: LD_VAR 0 2
40876: PPUSH
40877: LD_VAR 0 3
40881: PPUSH
40882: CALL_OW 118
// repeat if Multiplayer then
40886: LD_OWVAR 4
40890: IFFALSE 40901
// wait ( 35 ) else
40892: LD_INT 35
40894: PPUSH
40895: CALL_OW 67
40899: GO 40908
// wait ( 5 ) ;
40901: LD_INT 5
40903: PPUSH
40904: CALL_OW 67
// _d := GetDir ( unit ) ;
40908: LD_ADDR_VAR 0 11
40912: PUSH
40913: LD_VAR 0 1
40917: PPUSH
40918: CALL_OW 254
40922: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
40923: LD_ADDR_VAR 0 7
40927: PUSH
40928: LD_VAR 0 1
40932: PPUSH
40933: CALL_OW 250
40937: PPUSH
40938: LD_VAR 0 1
40942: PPUSH
40943: CALL_OW 251
40947: PPUSH
40948: LD_VAR 0 2
40952: PPUSH
40953: LD_VAR 0 3
40957: PPUSH
40958: CALL 81531 0 4
40962: ST_TO_ADDR
// until dir = _d ;
40963: LD_VAR 0 7
40967: PUSH
40968: LD_VAR 0 11
40972: EQUAL
40973: IFFALSE 40886
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
40975: LD_ADDR_VAR 0 9
40979: PUSH
40980: LD_VAR 0 1
40984: PPUSH
40985: CALL_OW 250
40989: PPUSH
40990: LD_VAR 0 7
40994: PPUSH
40995: LD_VAR 0 5
40999: PPUSH
41000: CALL_OW 272
41004: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
41005: LD_ADDR_VAR 0 10
41009: PUSH
41010: LD_VAR 0 1
41014: PPUSH
41015: CALL_OW 251
41019: PPUSH
41020: LD_VAR 0 7
41024: PPUSH
41025: LD_VAR 0 5
41029: PPUSH
41030: CALL_OW 273
41034: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41035: LD_VAR 0 9
41039: PPUSH
41040: LD_VAR 0 10
41044: PPUSH
41045: CALL_OW 488
41049: NOT
41050: IFFALSE 41054
// exit ;
41052: GO 41176
// ComAnimCustom ( unit , 1 ) ;
41054: LD_VAR 0 1
41058: PPUSH
41059: LD_INT 1
41061: PPUSH
41062: CALL_OW 592
// p := 0 ;
41066: LD_ADDR_VAR 0 12
41070: PUSH
41071: LD_INT 0
41073: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41074: LD_VAR 0 9
41078: PPUSH
41079: LD_VAR 0 10
41083: PPUSH
41084: LD_VAR 0 6
41088: PPUSH
41089: LD_VAR 0 8
41093: PPUSH
41094: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
41098: LD_INT 35
41100: PPUSH
41101: CALL_OW 67
// p := Inc ( p ) ;
41105: LD_ADDR_VAR 0 12
41109: PUSH
41110: LD_VAR 0 12
41114: PPUSH
41115: CALL 81487 0 1
41119: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
41120: LD_VAR 0 12
41124: PUSH
41125: LD_INT 3
41127: EQUAL
41128: IFTRUE 41142
41130: PUSH
41131: LD_VAR 0 1
41135: PPUSH
41136: CALL_OW 302
41140: NOT
41141: OR
41142: IFTRUE 41155
41144: PUSH
41145: LD_VAR 0 1
41149: PPUSH
41150: CALL_OW 301
41154: OR
41155: IFFALSE 41098
// RemoveSeeing ( _x , _y , side ) ;
41157: LD_VAR 0 9
41161: PPUSH
41162: LD_VAR 0 10
41166: PPUSH
41167: LD_VAR 0 6
41171: PPUSH
41172: CALL_OW 331
// end ;
41176: LD_VAR 0 4
41180: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
41181: LD_INT 0
41183: PPUSH
41184: PPUSH
41185: PPUSH
41186: PPUSH
41187: PPUSH
41188: PPUSH
41189: PPUSH
41190: PPUSH
41191: PPUSH
41192: PPUSH
41193: PPUSH
// if not unit then
41194: LD_VAR 0 1
41198: NOT
41199: IFFALSE 41203
// exit ;
41201: GO 41474
// side := GetSide ( unit ) ;
41203: LD_ADDR_VAR 0 3
41207: PUSH
41208: LD_VAR 0 1
41212: PPUSH
41213: CALL_OW 255
41217: ST_TO_ADDR
// x := GetX ( unit ) ;
41218: LD_ADDR_VAR 0 5
41222: PUSH
41223: LD_VAR 0 1
41227: PPUSH
41228: CALL_OW 250
41232: ST_TO_ADDR
// y := GetY ( unit ) ;
41233: LD_ADDR_VAR 0 6
41237: PUSH
41238: LD_VAR 0 1
41242: PPUSH
41243: CALL_OW 251
41247: ST_TO_ADDR
// r := 8 ;
41248: LD_ADDR_VAR 0 4
41252: PUSH
41253: LD_INT 8
41255: ST_TO_ADDR
// if x - r < 0 then
41256: LD_VAR 0 5
41260: PUSH
41261: LD_VAR 0 4
41265: MINUS
41266: PUSH
41267: LD_INT 0
41269: LESS
41270: IFFALSE 41282
// min_x := 0 else
41272: LD_ADDR_VAR 0 7
41276: PUSH
41277: LD_INT 0
41279: ST_TO_ADDR
41280: GO 41298
// min_x := x - r ;
41282: LD_ADDR_VAR 0 7
41286: PUSH
41287: LD_VAR 0 5
41291: PUSH
41292: LD_VAR 0 4
41296: MINUS
41297: ST_TO_ADDR
// if y - r < 0 then
41298: LD_VAR 0 6
41302: PUSH
41303: LD_VAR 0 4
41307: MINUS
41308: PUSH
41309: LD_INT 0
41311: LESS
41312: IFFALSE 41324
// min_y := 0 else
41314: LD_ADDR_VAR 0 8
41318: PUSH
41319: LD_INT 0
41321: ST_TO_ADDR
41322: GO 41340
// min_y := y - r ;
41324: LD_ADDR_VAR 0 8
41328: PUSH
41329: LD_VAR 0 6
41333: PUSH
41334: LD_VAR 0 4
41338: MINUS
41339: ST_TO_ADDR
// max_x := x + r ;
41340: LD_ADDR_VAR 0 9
41344: PUSH
41345: LD_VAR 0 5
41349: PUSH
41350: LD_VAR 0 4
41354: PLUS
41355: ST_TO_ADDR
// max_y := y + r ;
41356: LD_ADDR_VAR 0 10
41360: PUSH
41361: LD_VAR 0 6
41365: PUSH
41366: LD_VAR 0 4
41370: PLUS
41371: ST_TO_ADDR
// for _x = min_x to max_x do
41372: LD_ADDR_VAR 0 11
41376: PUSH
41377: DOUBLE
41378: LD_VAR 0 7
41382: DEC
41383: ST_TO_ADDR
41384: LD_VAR 0 9
41388: PUSH
41389: FOR_TO
41390: IFFALSE 41472
// for _y = min_y to max_y do
41392: LD_ADDR_VAR 0 12
41396: PUSH
41397: DOUBLE
41398: LD_VAR 0 8
41402: DEC
41403: ST_TO_ADDR
41404: LD_VAR 0 10
41408: PUSH
41409: FOR_TO
41410: IFFALSE 41468
// begin if not ValidHex ( _x , _y ) then
41412: LD_VAR 0 11
41416: PPUSH
41417: LD_VAR 0 12
41421: PPUSH
41422: CALL_OW 488
41426: NOT
41427: IFFALSE 41431
// continue ;
41429: GO 41409
// if MineAtPos ( _x , _y ) then
41431: LD_VAR 0 11
41435: PPUSH
41436: LD_VAR 0 12
41440: PPUSH
41441: CALL_OW 458
41445: IFFALSE 41466
// ViewMineAtPos ( _x , _y , side ) ;
41447: LD_VAR 0 11
41451: PPUSH
41452: LD_VAR 0 12
41456: PPUSH
41457: LD_VAR 0 3
41461: PPUSH
41462: CALL_OW 457
// end ;
41466: GO 41409
41468: POP
41469: POP
41470: GO 41389
41472: POP
41473: POP
// end ;
41474: LD_VAR 0 2
41478: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
41479: LD_INT 0
41481: PPUSH
41482: PPUSH
41483: PPUSH
41484: PPUSH
41485: PPUSH
41486: PPUSH
// if not units then
41487: LD_VAR 0 1
41491: NOT
41492: IFFALSE 41496
// exit ;
41494: GO 41926
// scaners := [ ] ;
41496: LD_ADDR_VAR 0 6
41500: PUSH
41501: EMPTY
41502: ST_TO_ADDR
// for i in units do
41503: LD_ADDR_VAR 0 3
41507: PUSH
41508: LD_VAR 0 1
41512: PUSH
41513: FOR_IN
41514: IFFALSE 41671
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
41516: LD_VAR 0 3
41520: PPUSH
41521: CALL_OW 264
41525: PUSH
41526: LD_INT 11
41528: NONEQUAL
41529: IFTRUE 41543
41531: PUSH
41532: LD_VAR 0 3
41536: PPUSH
41537: CALL_OW 302
41541: NOT
41542: OR
41543: IFTRUE 41560
41545: PUSH
41546: LD_VAR 0 3
41550: PPUSH
41551: CALL_OW 110
41555: PUSH
41556: LD_INT 502
41558: EQUAL
41559: OR
41560: IFFALSE 41564
// continue ;
41562: GO 41513
// ComStop ( i ) ;
41564: LD_VAR 0 3
41568: PPUSH
41569: CALL_OW 141
// x := GetX ( i ) ;
41573: LD_ADDR_VAR 0 4
41577: PUSH
41578: LD_VAR 0 3
41582: PPUSH
41583: CALL_OW 250
41587: ST_TO_ADDR
// y := GetY ( i ) ;
41588: LD_ADDR_VAR 0 5
41592: PUSH
41593: LD_VAR 0 3
41597: PPUSH
41598: CALL_OW 251
41602: ST_TO_ADDR
// if GetSide ( i ) = your_side then
41603: LD_VAR 0 3
41607: PPUSH
41608: CALL_OW 255
41612: PUSH
41613: LD_OWVAR 2
41617: EQUAL
41618: IFFALSE 41637
// PlaySoundXY ( x , y , mineDetector ) ;
41620: LD_VAR 0 4
41624: PPUSH
41625: LD_VAR 0 5
41629: PPUSH
41630: LD_STRING mineDetector
41632: PPUSH
41633: CALL_OW 366
// scaners := Join ( scaners , i ) ;
41637: LD_ADDR_VAR 0 6
41641: PUSH
41642: LD_VAR 0 6
41646: PPUSH
41647: LD_VAR 0 3
41651: PPUSH
41652: CALL 80114 0 2
41656: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
41657: LD_VAR 0 3
41661: PPUSH
41662: LD_INT 502
41664: PPUSH
41665: CALL_OW 109
// end ;
41669: GO 41513
41671: POP
41672: POP
// if not scaners then
41673: LD_VAR 0 6
41677: NOT
41678: IFFALSE 41682
// exit ;
41680: GO 41926
// wait ( 3 ) ;
41682: LD_INT 3
41684: PPUSH
41685: CALL_OW 67
// timer := 6 ;
41689: LD_ADDR_VAR 0 7
41693: PUSH
41694: LD_INT 6
41696: ST_TO_ADDR
// repeat for i in scaners do
41697: LD_ADDR_VAR 0 3
41701: PUSH
41702: LD_VAR 0 6
41706: PUSH
41707: FOR_IN
41708: IFFALSE 41824
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
41710: LD_VAR 0 3
41714: PPUSH
41715: CALL_OW 302
41719: NOT
41720: IFTRUE 41733
41722: PUSH
41723: LD_VAR 0 3
41727: PPUSH
41728: CALL_OW 314
41732: OR
41733: IFTRUE 41764
41735: PUSH
41736: LD_VAR 0 3
41740: PPUSH
41741: CALL_OW 263
41745: PUSH
41746: LD_INT 1
41748: EQUAL
41749: IFFALSE 41763
41751: PUSH
41752: LD_VAR 0 3
41756: PPUSH
41757: CALL_OW 311
41761: NOT
41762: AND
41763: OR
41764: IFFALSE 41808
// begin SetUnitDisplayNumber ( i , 0 ) ;
41766: LD_VAR 0 3
41770: PPUSH
41771: LD_INT 0
41773: PPUSH
41774: CALL_OW 505
// SetTag ( i , 0 ) ;
41778: LD_VAR 0 3
41782: PPUSH
41783: LD_INT 0
41785: PPUSH
41786: CALL_OW 109
// scaners := scaners diff i ;
41790: LD_ADDR_VAR 0 6
41794: PUSH
41795: LD_VAR 0 6
41799: PUSH
41800: LD_VAR 0 3
41804: DIFF
41805: ST_TO_ADDR
// continue ;
41806: GO 41707
// end ; SetUnitDisplayNumber ( i , timer ) ;
41808: LD_VAR 0 3
41812: PPUSH
41813: LD_VAR 0 7
41817: PPUSH
41818: CALL_OW 505
// end ;
41822: GO 41707
41824: POP
41825: POP
// if not scaners then
41826: LD_VAR 0 6
41830: NOT
41831: IFFALSE 41835
// exit ;
41833: GO 41926
// timer := Dec ( timer ) ;
41835: LD_ADDR_VAR 0 7
41839: PUSH
41840: LD_VAR 0 7
41844: PPUSH
41845: CALL 81509 0 1
41849: ST_TO_ADDR
// wait ( 0 0$1 ) ;
41850: LD_INT 35
41852: PPUSH
41853: CALL_OW 67
// until timer = 0 ;
41857: LD_VAR 0 7
41861: PUSH
41862: LD_INT 0
41864: EQUAL
41865: IFFALSE 41697
// if not scaners then
41867: LD_VAR 0 6
41871: NOT
41872: IFFALSE 41876
// exit ;
41874: GO 41926
// for i in scaners do
41876: LD_ADDR_VAR 0 3
41880: PUSH
41881: LD_VAR 0 6
41885: PUSH
41886: FOR_IN
41887: IFFALSE 41924
// begin SetUnitDisplayNumber ( i , 0 ) ;
41889: LD_VAR 0 3
41893: PPUSH
41894: LD_INT 0
41896: PPUSH
41897: CALL_OW 505
// SetTag ( i , 0 ) ;
41901: LD_VAR 0 3
41905: PPUSH
41906: LD_INT 0
41908: PPUSH
41909: CALL_OW 109
// RevealDetectorMine ( i ) ;
41913: LD_VAR 0 3
41917: PPUSH
41918: CALL 41181 0 1
// end ;
41922: GO 41886
41924: POP
41925: POP
// end ;
41926: LD_VAR 0 2
41930: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
41931: LD_INT 0
41933: PPUSH
// if p1 = mine_detector_mode then
41934: LD_VAR 0 2
41938: PUSH
41939: LD_INT 103
41941: EQUAL
41942: IFFALSE 41953
// DetectMine ( units ) ;
41944: LD_VAR 0 1
41948: PPUSH
41949: CALL 41479 0 1
// end ; end_of_file
41953: LD_VAR 0 7
41957: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41958: LD_INT 0
41960: PPUSH
41961: PPUSH
// if exist_mode then
41962: LD_VAR 0 2
41966: IFFALSE 42012
// begin unit := CreateCharacter ( prefix & ident ) ;
41968: LD_ADDR_VAR 0 5
41972: PUSH
41973: LD_VAR 0 3
41977: PUSH
41978: LD_VAR 0 1
41982: STR
41983: PPUSH
41984: CALL_OW 34
41988: ST_TO_ADDR
// if unit then
41989: LD_VAR 0 5
41993: IFFALSE 42010
// DeleteCharacters ( prefix & ident ) ;
41995: LD_VAR 0 3
41999: PUSH
42000: LD_VAR 0 1
42004: STR
42005: PPUSH
42006: CALL_OW 40
// end else
42010: GO 42027
// unit := NewCharacter ( ident ) ;
42012: LD_ADDR_VAR 0 5
42016: PUSH
42017: LD_VAR 0 1
42021: PPUSH
42022: CALL_OW 25
42026: ST_TO_ADDR
// result := unit ;
42027: LD_ADDR_VAR 0 4
42031: PUSH
42032: LD_VAR 0 5
42036: ST_TO_ADDR
// end ;
42037: LD_VAR 0 4
42041: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
42042: LD_INT 0
42044: PPUSH
42045: PPUSH
// if exist_mode then
42046: LD_VAR 0 2
42050: IFFALSE 42075
// unit := CreateCharacter ( prefix & ident ) else
42052: LD_ADDR_VAR 0 5
42056: PUSH
42057: LD_VAR 0 3
42061: PUSH
42062: LD_VAR 0 1
42066: STR
42067: PPUSH
42068: CALL_OW 34
42072: ST_TO_ADDR
42073: GO 42090
// unit := NewCharacter ( ident ) ;
42075: LD_ADDR_VAR 0 5
42079: PUSH
42080: LD_VAR 0 1
42084: PPUSH
42085: CALL_OW 25
42089: ST_TO_ADDR
// result := unit ;
42090: LD_ADDR_VAR 0 4
42094: PUSH
42095: LD_VAR 0 5
42099: ST_TO_ADDR
// end ;
42100: LD_VAR 0 4
42104: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42105: LD_INT 0
42107: PPUSH
42108: PPUSH
// if not side or not nation then
42109: LD_VAR 0 1
42113: NOT
42114: IFTRUE 42123
42116: PUSH
42117: LD_VAR 0 2
42121: NOT
42122: OR
42123: IFFALSE 42127
// exit ;
42125: GO 42921
// case nation of nation_american :
42127: LD_VAR 0 2
42131: PUSH
42132: LD_INT 1
42134: DOUBLE
42135: EQUAL
42136: IFTRUE 42140
42138: GO 42362
42140: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
42141: LD_ADDR_VAR 0 4
42145: PUSH
42146: LD_INT 35
42148: PUSH
42149: LD_INT 45
42151: PUSH
42152: LD_INT 46
42154: PUSH
42155: LD_INT 47
42157: PUSH
42158: LD_INT 82
42160: PUSH
42161: LD_INT 83
42163: PUSH
42164: LD_INT 84
42166: PUSH
42167: LD_INT 85
42169: PUSH
42170: LD_INT 86
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: LD_INT 2
42178: PUSH
42179: LD_INT 6
42181: PUSH
42182: LD_INT 15
42184: PUSH
42185: LD_INT 16
42187: PUSH
42188: LD_INT 7
42190: PUSH
42191: LD_INT 12
42193: PUSH
42194: LD_INT 13
42196: PUSH
42197: LD_INT 10
42199: PUSH
42200: LD_INT 14
42202: PUSH
42203: LD_INT 20
42205: PUSH
42206: LD_INT 21
42208: PUSH
42209: LD_INT 22
42211: PUSH
42212: LD_INT 25
42214: PUSH
42215: LD_INT 32
42217: PUSH
42218: LD_INT 27
42220: PUSH
42221: LD_INT 36
42223: PUSH
42224: LD_INT 69
42226: PUSH
42227: LD_INT 39
42229: PUSH
42230: LD_INT 34
42232: PUSH
42233: LD_INT 40
42235: PUSH
42236: LD_INT 48
42238: PUSH
42239: LD_INT 49
42241: PUSH
42242: LD_INT 50
42244: PUSH
42245: LD_INT 51
42247: PUSH
42248: LD_INT 52
42250: PUSH
42251: LD_INT 53
42253: PUSH
42254: LD_INT 54
42256: PUSH
42257: LD_INT 55
42259: PUSH
42260: LD_INT 56
42262: PUSH
42263: LD_INT 57
42265: PUSH
42266: LD_INT 58
42268: PUSH
42269: LD_INT 59
42271: PUSH
42272: LD_INT 60
42274: PUSH
42275: LD_INT 61
42277: PUSH
42278: LD_INT 62
42280: PUSH
42281: LD_INT 80
42283: PUSH
42284: LD_INT 82
42286: PUSH
42287: LD_INT 83
42289: PUSH
42290: LD_INT 84
42292: PUSH
42293: LD_INT 85
42295: PUSH
42296: LD_INT 86
42298: PUSH
42299: LD_INT 90
42301: PUSH
42302: LD_INT 93
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: ST_TO_ADDR
42360: GO 42843
42362: LD_INT 2
42364: DOUBLE
42365: EQUAL
42366: IFTRUE 42370
42368: GO 42604
42370: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
42371: LD_ADDR_VAR 0 4
42375: PUSH
42376: LD_INT 35
42378: PUSH
42379: LD_INT 45
42381: PUSH
42382: LD_INT 46
42384: PUSH
42385: LD_INT 47
42387: PUSH
42388: LD_INT 82
42390: PUSH
42391: LD_INT 83
42393: PUSH
42394: LD_INT 84
42396: PUSH
42397: LD_INT 85
42399: PUSH
42400: LD_INT 87
42402: PUSH
42403: LD_INT 70
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: LD_INT 11
42411: PUSH
42412: LD_INT 3
42414: PUSH
42415: LD_INT 4
42417: PUSH
42418: LD_INT 5
42420: PUSH
42421: LD_INT 6
42423: PUSH
42424: LD_INT 15
42426: PUSH
42427: LD_INT 18
42429: PUSH
42430: LD_INT 7
42432: PUSH
42433: LD_INT 17
42435: PUSH
42436: LD_INT 8
42438: PUSH
42439: LD_INT 20
42441: PUSH
42442: LD_INT 21
42444: PUSH
42445: LD_INT 22
42447: PUSH
42448: LD_INT 72
42450: PUSH
42451: LD_INT 26
42453: PUSH
42454: LD_INT 69
42456: PUSH
42457: LD_INT 39
42459: PUSH
42460: LD_INT 40
42462: PUSH
42463: LD_INT 41
42465: PUSH
42466: LD_INT 42
42468: PUSH
42469: LD_INT 43
42471: PUSH
42472: LD_INT 48
42474: PUSH
42475: LD_INT 49
42477: PUSH
42478: LD_INT 50
42480: PUSH
42481: LD_INT 51
42483: PUSH
42484: LD_INT 52
42486: PUSH
42487: LD_INT 53
42489: PUSH
42490: LD_INT 54
42492: PUSH
42493: LD_INT 55
42495: PUSH
42496: LD_INT 56
42498: PUSH
42499: LD_INT 60
42501: PUSH
42502: LD_INT 61
42504: PUSH
42505: LD_INT 62
42507: PUSH
42508: LD_INT 66
42510: PUSH
42511: LD_INT 67
42513: PUSH
42514: LD_INT 68
42516: PUSH
42517: LD_INT 81
42519: PUSH
42520: LD_INT 82
42522: PUSH
42523: LD_INT 83
42525: PUSH
42526: LD_INT 84
42528: PUSH
42529: LD_INT 85
42531: PUSH
42532: LD_INT 87
42534: PUSH
42535: LD_INT 88
42537: PUSH
42538: LD_INT 92
42540: PUSH
42541: LD_INT 94
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: ST_TO_ADDR
42602: GO 42843
42604: LD_INT 3
42606: DOUBLE
42607: EQUAL
42608: IFTRUE 42612
42610: GO 42842
42612: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
42613: LD_ADDR_VAR 0 4
42617: PUSH
42618: LD_INT 46
42620: PUSH
42621: LD_INT 47
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: LD_INT 2
42629: PUSH
42630: LD_INT 82
42632: PUSH
42633: LD_INT 83
42635: PUSH
42636: LD_INT 84
42638: PUSH
42639: LD_INT 85
42641: PUSH
42642: LD_INT 86
42644: PUSH
42645: LD_INT 11
42647: PUSH
42648: LD_INT 9
42650: PUSH
42651: LD_INT 20
42653: PUSH
42654: LD_INT 19
42656: PUSH
42657: LD_INT 21
42659: PUSH
42660: LD_INT 24
42662: PUSH
42663: LD_INT 22
42665: PUSH
42666: LD_INT 25
42668: PUSH
42669: LD_INT 28
42671: PUSH
42672: LD_INT 29
42674: PUSH
42675: LD_INT 30
42677: PUSH
42678: LD_INT 31
42680: PUSH
42681: LD_INT 37
42683: PUSH
42684: LD_INT 38
42686: PUSH
42687: LD_INT 32
42689: PUSH
42690: LD_INT 27
42692: PUSH
42693: LD_INT 33
42695: PUSH
42696: LD_INT 69
42698: PUSH
42699: LD_INT 39
42701: PUSH
42702: LD_INT 34
42704: PUSH
42705: LD_INT 40
42707: PUSH
42708: LD_INT 71
42710: PUSH
42711: LD_INT 23
42713: PUSH
42714: LD_INT 44
42716: PUSH
42717: LD_INT 48
42719: PUSH
42720: LD_INT 49
42722: PUSH
42723: LD_INT 50
42725: PUSH
42726: LD_INT 51
42728: PUSH
42729: LD_INT 52
42731: PUSH
42732: LD_INT 53
42734: PUSH
42735: LD_INT 54
42737: PUSH
42738: LD_INT 55
42740: PUSH
42741: LD_INT 56
42743: PUSH
42744: LD_INT 57
42746: PUSH
42747: LD_INT 58
42749: PUSH
42750: LD_INT 59
42752: PUSH
42753: LD_INT 63
42755: PUSH
42756: LD_INT 64
42758: PUSH
42759: LD_INT 65
42761: PUSH
42762: LD_INT 82
42764: PUSH
42765: LD_INT 83
42767: PUSH
42768: LD_INT 84
42770: PUSH
42771: LD_INT 85
42773: PUSH
42774: LD_INT 86
42776: PUSH
42777: LD_INT 89
42779: PUSH
42780: LD_INT 91
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: ST_TO_ADDR
42840: GO 42843
42842: POP
// if state > - 1 and state < 3 then
42843: LD_VAR 0 3
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: GREATER
42852: IFFALSE 42864
42854: PUSH
42855: LD_VAR 0 3
42859: PUSH
42860: LD_INT 3
42862: LESS
42863: AND
42864: IFFALSE 42921
// for i in result do
42866: LD_ADDR_VAR 0 5
42870: PUSH
42871: LD_VAR 0 4
42875: PUSH
42876: FOR_IN
42877: IFFALSE 42919
// if GetTech ( i , side ) <> state then
42879: LD_VAR 0 5
42883: PPUSH
42884: LD_VAR 0 1
42888: PPUSH
42889: CALL_OW 321
42893: PUSH
42894: LD_VAR 0 3
42898: NONEQUAL
42899: IFFALSE 42917
// result := result diff i ;
42901: LD_ADDR_VAR 0 4
42905: PUSH
42906: LD_VAR 0 4
42910: PUSH
42911: LD_VAR 0 5
42915: DIFF
42916: ST_TO_ADDR
42917: GO 42876
42919: POP
42920: POP
// end ;
42921: LD_VAR 0 4
42925: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42926: LD_INT 0
42928: PPUSH
42929: PPUSH
42930: PPUSH
// result := true ;
42931: LD_ADDR_VAR 0 3
42935: PUSH
42936: LD_INT 1
42938: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42939: LD_ADDR_VAR 0 5
42943: PUSH
42944: LD_VAR 0 2
42948: PPUSH
42949: CALL_OW 480
42953: ST_TO_ADDR
// if not tmp then
42954: LD_VAR 0 5
42958: NOT
42959: IFFALSE 42963
// exit ;
42961: GO 43012
// for i in tmp do
42963: LD_ADDR_VAR 0 4
42967: PUSH
42968: LD_VAR 0 5
42972: PUSH
42973: FOR_IN
42974: IFFALSE 43010
// if GetTech ( i , side ) <> state_researched then
42976: LD_VAR 0 4
42980: PPUSH
42981: LD_VAR 0 1
42985: PPUSH
42986: CALL_OW 321
42990: PUSH
42991: LD_INT 2
42993: NONEQUAL
42994: IFFALSE 43008
// begin result := false ;
42996: LD_ADDR_VAR 0 3
43000: PUSH
43001: LD_INT 0
43003: ST_TO_ADDR
// exit ;
43004: POP
43005: POP
43006: GO 43012
// end ;
43008: GO 42973
43010: POP
43011: POP
// end ;
43012: LD_VAR 0 3
43016: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43017: LD_INT 0
43019: PPUSH
43020: PPUSH
43021: PPUSH
43022: PPUSH
43023: PPUSH
43024: PPUSH
43025: PPUSH
43026: PPUSH
43027: PPUSH
43028: PPUSH
43029: PPUSH
43030: PPUSH
43031: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43032: LD_VAR 0 1
43036: NOT
43037: IFTRUE 43054
43039: PUSH
43040: LD_VAR 0 1
43044: PPUSH
43045: CALL_OW 257
43049: PUSH
43050: LD_INT 9
43052: NONEQUAL
43053: OR
43054: IFFALSE 43058
// exit ;
43056: GO 43637
// side := GetSide ( unit ) ;
43058: LD_ADDR_VAR 0 9
43062: PUSH
43063: LD_VAR 0 1
43067: PPUSH
43068: CALL_OW 255
43072: ST_TO_ADDR
// tech_space := tech_spacanom ;
43073: LD_ADDR_VAR 0 12
43077: PUSH
43078: LD_INT 29
43080: ST_TO_ADDR
// tech_time := tech_taurad ;
43081: LD_ADDR_VAR 0 13
43085: PUSH
43086: LD_INT 28
43088: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43089: LD_ADDR_VAR 0 11
43093: PUSH
43094: LD_VAR 0 1
43098: PPUSH
43099: CALL_OW 310
43103: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43104: LD_VAR 0 11
43108: PPUSH
43109: CALL_OW 247
43113: PUSH
43114: LD_INT 2
43116: EQUAL
43117: IFFALSE 43121
// exit ;
43119: GO 43637
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43121: LD_ADDR_VAR 0 8
43125: PUSH
43126: LD_INT 81
43128: PUSH
43129: LD_VAR 0 9
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 3
43140: PUSH
43141: LD_INT 21
43143: PUSH
43144: LD_INT 3
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PPUSH
43159: CALL_OW 69
43163: ST_TO_ADDR
// if not tmp then
43164: LD_VAR 0 8
43168: NOT
43169: IFFALSE 43173
// exit ;
43171: GO 43637
// if in_unit then
43173: LD_VAR 0 11
43177: IFFALSE 43201
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43179: LD_ADDR_VAR 0 10
43183: PUSH
43184: LD_VAR 0 8
43188: PPUSH
43189: LD_VAR 0 11
43193: PPUSH
43194: CALL_OW 74
43198: ST_TO_ADDR
43199: GO 43221
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43201: LD_ADDR_VAR 0 10
43205: PUSH
43206: LD_VAR 0 8
43210: PPUSH
43211: LD_VAR 0 1
43215: PPUSH
43216: CALL_OW 74
43220: ST_TO_ADDR
// if not enemy then
43221: LD_VAR 0 10
43225: NOT
43226: IFFALSE 43230
// exit ;
43228: GO 43637
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43230: LD_VAR 0 11
43234: IFFALSE 43256
43236: PUSH
43237: LD_VAR 0 11
43241: PPUSH
43242: LD_VAR 0 10
43246: PPUSH
43247: CALL_OW 296
43251: PUSH
43252: LD_INT 13
43254: GREATER
43255: AND
43256: IFTRUE 43278
43258: PUSH
43259: LD_VAR 0 1
43263: PPUSH
43264: LD_VAR 0 10
43268: PPUSH
43269: CALL_OW 296
43273: PUSH
43274: LD_INT 12
43276: GREATER
43277: OR
43278: IFFALSE 43282
// exit ;
43280: GO 43637
// missile := [ 1 ] ;
43282: LD_ADDR_VAR 0 14
43286: PUSH
43287: LD_INT 1
43289: PUSH
43290: EMPTY
43291: LIST
43292: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43293: LD_VAR 0 9
43297: PPUSH
43298: LD_VAR 0 12
43302: PPUSH
43303: CALL_OW 325
43307: IFFALSE 43336
// missile := Replace ( missile , missile + 1 , 2 ) ;
43309: LD_ADDR_VAR 0 14
43313: PUSH
43314: LD_VAR 0 14
43318: PPUSH
43319: LD_VAR 0 14
43323: PUSH
43324: LD_INT 1
43326: PLUS
43327: PPUSH
43328: LD_INT 2
43330: PPUSH
43331: CALL_OW 1
43335: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43336: LD_VAR 0 9
43340: PPUSH
43341: LD_VAR 0 13
43345: PPUSH
43346: CALL_OW 325
43350: IFFALSE 43374
43352: PUSH
43353: LD_VAR 0 10
43357: PPUSH
43358: CALL_OW 255
43362: PPUSH
43363: LD_VAR 0 13
43367: PPUSH
43368: CALL_OW 325
43372: NOT
43373: AND
43374: IFFALSE 43403
// missile := Replace ( missile , missile + 1 , 3 ) ;
43376: LD_ADDR_VAR 0 14
43380: PUSH
43381: LD_VAR 0 14
43385: PPUSH
43386: LD_VAR 0 14
43390: PUSH
43391: LD_INT 1
43393: PLUS
43394: PPUSH
43395: LD_INT 3
43397: PPUSH
43398: CALL_OW 1
43402: ST_TO_ADDR
// if missile < 2 then
43403: LD_VAR 0 14
43407: PUSH
43408: LD_INT 2
43410: LESS
43411: IFFALSE 43415
// exit ;
43413: GO 43637
// x := GetX ( enemy ) ;
43415: LD_ADDR_VAR 0 4
43419: PUSH
43420: LD_VAR 0 10
43424: PPUSH
43425: CALL_OW 250
43429: ST_TO_ADDR
// y := GetY ( enemy ) ;
43430: LD_ADDR_VAR 0 5
43434: PUSH
43435: LD_VAR 0 10
43439: PPUSH
43440: CALL_OW 251
43444: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43445: LD_ADDR_VAR 0 6
43449: PUSH
43450: LD_VAR 0 4
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PPUSH
43459: LD_INT 1
43461: PPUSH
43462: CALL_OW 12
43466: PLUS
43467: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43468: LD_ADDR_VAR 0 7
43472: PUSH
43473: LD_VAR 0 5
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PPUSH
43482: LD_INT 1
43484: PPUSH
43485: CALL_OW 12
43489: PLUS
43490: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43491: LD_VAR 0 6
43495: PPUSH
43496: LD_VAR 0 7
43500: PPUSH
43501: CALL_OW 488
43505: NOT
43506: IFFALSE 43528
// begin _x := x ;
43508: LD_ADDR_VAR 0 6
43512: PUSH
43513: LD_VAR 0 4
43517: ST_TO_ADDR
// _y := y ;
43518: LD_ADDR_VAR 0 7
43522: PUSH
43523: LD_VAR 0 5
43527: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43528: LD_ADDR_VAR 0 3
43532: PUSH
43533: LD_INT 1
43535: PPUSH
43536: LD_VAR 0 14
43540: PPUSH
43541: CALL_OW 12
43545: ST_TO_ADDR
// case i of 1 :
43546: LD_VAR 0 3
43550: PUSH
43551: LD_INT 1
43553: DOUBLE
43554: EQUAL
43555: IFTRUE 43559
43557: GO 43576
43559: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43560: LD_VAR 0 1
43564: PPUSH
43565: LD_VAR 0 10
43569: PPUSH
43570: CALL_OW 115
43574: GO 43637
43576: LD_INT 2
43578: DOUBLE
43579: EQUAL
43580: IFTRUE 43584
43582: GO 43606
43584: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43585: LD_VAR 0 1
43589: PPUSH
43590: LD_VAR 0 6
43594: PPUSH
43595: LD_VAR 0 7
43599: PPUSH
43600: CALL_OW 153
43604: GO 43637
43606: LD_INT 3
43608: DOUBLE
43609: EQUAL
43610: IFTRUE 43614
43612: GO 43636
43614: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43615: LD_VAR 0 1
43619: PPUSH
43620: LD_VAR 0 6
43624: PPUSH
43625: LD_VAR 0 7
43629: PPUSH
43630: CALL_OW 154
43634: GO 43637
43636: POP
// end ;
43637: LD_VAR 0 2
43641: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43642: LD_INT 0
43644: PPUSH
43645: PPUSH
43646: PPUSH
43647: PPUSH
43648: PPUSH
43649: PPUSH
// if not unit or not building then
43650: LD_VAR 0 1
43654: NOT
43655: IFTRUE 43664
43657: PUSH
43658: LD_VAR 0 2
43662: NOT
43663: OR
43664: IFFALSE 43668
// exit ;
43666: GO 43826
// x := GetX ( building ) ;
43668: LD_ADDR_VAR 0 5
43672: PUSH
43673: LD_VAR 0 2
43677: PPUSH
43678: CALL_OW 250
43682: ST_TO_ADDR
// y := GetY ( building ) ;
43683: LD_ADDR_VAR 0 6
43687: PUSH
43688: LD_VAR 0 2
43692: PPUSH
43693: CALL_OW 251
43697: ST_TO_ADDR
// for i := 0 to 5 do
43698: LD_ADDR_VAR 0 4
43702: PUSH
43703: DOUBLE
43704: LD_INT 0
43706: DEC
43707: ST_TO_ADDR
43708: LD_INT 5
43710: PUSH
43711: FOR_TO
43712: IFFALSE 43824
// begin _x := ShiftX ( x , i , 3 ) ;
43714: LD_ADDR_VAR 0 7
43718: PUSH
43719: LD_VAR 0 5
43723: PPUSH
43724: LD_VAR 0 4
43728: PPUSH
43729: LD_INT 3
43731: PPUSH
43732: CALL_OW 272
43736: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43737: LD_ADDR_VAR 0 8
43741: PUSH
43742: LD_VAR 0 6
43746: PPUSH
43747: LD_VAR 0 4
43751: PPUSH
43752: LD_INT 3
43754: PPUSH
43755: CALL_OW 273
43759: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43760: LD_VAR 0 7
43764: PPUSH
43765: LD_VAR 0 8
43769: PPUSH
43770: CALL_OW 488
43774: NOT
43775: IFFALSE 43779
// continue ;
43777: GO 43711
// if HexInfo ( _x , _y ) = 0 then
43779: LD_VAR 0 7
43783: PPUSH
43784: LD_VAR 0 8
43788: PPUSH
43789: CALL_OW 428
43793: PUSH
43794: LD_INT 0
43796: EQUAL
43797: IFFALSE 43822
// begin ComMoveXY ( unit , _x , _y ) ;
43799: LD_VAR 0 1
43803: PPUSH
43804: LD_VAR 0 7
43808: PPUSH
43809: LD_VAR 0 8
43813: PPUSH
43814: CALL_OW 111
// exit ;
43818: POP
43819: POP
43820: GO 43826
// end ; end ;
43822: GO 43711
43824: POP
43825: POP
// end ;
43826: LD_VAR 0 3
43830: RET
// export function ScanBase ( side , base_area ) ; begin
43831: LD_INT 0
43833: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43834: LD_ADDR_VAR 0 3
43838: PUSH
43839: LD_VAR 0 2
43843: PPUSH
43844: LD_INT 81
43846: PUSH
43847: LD_VAR 0 1
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PPUSH
43856: CALL_OW 70
43860: ST_TO_ADDR
// end ;
43861: LD_VAR 0 3
43865: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43866: LD_INT 0
43868: PPUSH
43869: PPUSH
43870: PPUSH
43871: PPUSH
// result := false ;
43872: LD_ADDR_VAR 0 2
43876: PUSH
43877: LD_INT 0
43879: ST_TO_ADDR
// side := GetSide ( unit ) ;
43880: LD_ADDR_VAR 0 3
43884: PUSH
43885: LD_VAR 0 1
43889: PPUSH
43890: CALL_OW 255
43894: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43895: LD_ADDR_VAR 0 4
43899: PUSH
43900: LD_VAR 0 1
43904: PPUSH
43905: CALL_OW 248
43909: ST_TO_ADDR
// case nat of 1 :
43910: LD_VAR 0 4
43914: PUSH
43915: LD_INT 1
43917: DOUBLE
43918: EQUAL
43919: IFTRUE 43923
43921: GO 43934
43923: POP
// tech := tech_lassight ; 2 :
43924: LD_ADDR_VAR 0 5
43928: PUSH
43929: LD_INT 12
43931: ST_TO_ADDR
43932: GO 43973
43934: LD_INT 2
43936: DOUBLE
43937: EQUAL
43938: IFTRUE 43942
43940: GO 43953
43942: POP
// tech := tech_mortar ; 3 :
43943: LD_ADDR_VAR 0 5
43947: PUSH
43948: LD_INT 41
43950: ST_TO_ADDR
43951: GO 43973
43953: LD_INT 3
43955: DOUBLE
43956: EQUAL
43957: IFTRUE 43961
43959: GO 43972
43961: POP
// tech := tech_bazooka ; end ;
43962: LD_ADDR_VAR 0 5
43966: PUSH
43967: LD_INT 44
43969: ST_TO_ADDR
43970: GO 43973
43972: POP
// if Researched ( side , tech ) then
43973: LD_VAR 0 3
43977: PPUSH
43978: LD_VAR 0 5
43982: PPUSH
43983: CALL_OW 325
43987: IFFALSE 44014
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43989: LD_ADDR_VAR 0 2
43993: PUSH
43994: LD_INT 5
43996: PUSH
43997: LD_INT 8
43999: PUSH
44000: LD_INT 9
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: LIST
44007: PUSH
44008: LD_VAR 0 4
44012: ARRAY
44013: ST_TO_ADDR
// end ;
44014: LD_VAR 0 2
44018: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44019: LD_INT 0
44021: PPUSH
44022: PPUSH
44023: PPUSH
// if not mines then
44024: LD_VAR 0 2
44028: NOT
44029: IFFALSE 44033
// exit ;
44031: GO 44177
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44033: LD_ADDR_VAR 0 5
44037: PUSH
44038: LD_INT 81
44040: PUSH
44041: LD_VAR 0 1
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 3
44052: PUSH
44053: LD_INT 21
44055: PUSH
44056: LD_INT 3
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PPUSH
44071: CALL_OW 69
44075: ST_TO_ADDR
// for i in mines do
44076: LD_ADDR_VAR 0 4
44080: PUSH
44081: LD_VAR 0 2
44085: PUSH
44086: FOR_IN
44087: IFFALSE 44175
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44089: LD_VAR 0 4
44093: PUSH
44094: LD_INT 1
44096: ARRAY
44097: PPUSH
44098: LD_VAR 0 4
44102: PUSH
44103: LD_INT 2
44105: ARRAY
44106: PPUSH
44107: CALL_OW 458
44111: NOT
44112: IFFALSE 44116
// continue ;
44114: GO 44086
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44116: LD_VAR 0 4
44120: PUSH
44121: LD_INT 1
44123: ARRAY
44124: PPUSH
44125: LD_VAR 0 4
44129: PUSH
44130: LD_INT 2
44132: ARRAY
44133: PPUSH
44134: CALL_OW 428
44138: PUSH
44139: LD_VAR 0 5
44143: IN
44144: IFFALSE 44173
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44146: LD_VAR 0 4
44150: PUSH
44151: LD_INT 1
44153: ARRAY
44154: PPUSH
44155: LD_VAR 0 4
44159: PUSH
44160: LD_INT 2
44162: ARRAY
44163: PPUSH
44164: LD_VAR 0 1
44168: PPUSH
44169: CALL_OW 456
// end ;
44173: GO 44086
44175: POP
44176: POP
// end ;
44177: LD_VAR 0 3
44181: RET
// export function Count ( array ) ; begin
44182: LD_INT 0
44184: PPUSH
// result := array + 0 ;
44185: LD_ADDR_VAR 0 2
44189: PUSH
44190: LD_VAR 0 1
44194: PUSH
44195: LD_INT 0
44197: PLUS
44198: ST_TO_ADDR
// end ;
44199: LD_VAR 0 2
44203: RET
// export function IsEmpty ( building ) ; begin
44204: LD_INT 0
44206: PPUSH
// if not building then
44207: LD_VAR 0 1
44211: NOT
44212: IFFALSE 44216
// exit ;
44214: GO 44259
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44216: LD_ADDR_VAR 0 2
44220: PUSH
44221: LD_VAR 0 1
44225: PUSH
44226: LD_INT 22
44228: PUSH
44229: LD_VAR 0 1
44233: PPUSH
44234: CALL_OW 255
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 58
44245: PUSH
44246: EMPTY
44247: LIST
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PPUSH
44253: CALL_OW 69
44257: IN
44258: ST_TO_ADDR
// end ;
44259: LD_VAR 0 2
44263: RET
// export function IsNotFull ( building ) ; var places ; begin
44264: LD_INT 0
44266: PPUSH
44267: PPUSH
// if not building then
44268: LD_VAR 0 1
44272: NOT
44273: IFFALSE 44277
// exit ;
44275: GO 44305
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44277: LD_ADDR_VAR 0 2
44281: PUSH
44282: LD_VAR 0 1
44286: PPUSH
44287: LD_INT 3
44289: PUSH
44290: LD_INT 62
44292: PUSH
44293: EMPTY
44294: LIST
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PPUSH
44300: CALL_OW 72
44304: ST_TO_ADDR
// end ;
44305: LD_VAR 0 2
44309: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44310: LD_INT 0
44312: PPUSH
44313: PPUSH
44314: PPUSH
44315: PPUSH
// tmp := [ ] ;
44316: LD_ADDR_VAR 0 3
44320: PUSH
44321: EMPTY
44322: ST_TO_ADDR
// list := [ ] ;
44323: LD_ADDR_VAR 0 5
44327: PUSH
44328: EMPTY
44329: ST_TO_ADDR
// for i = 16 to 25 do
44330: LD_ADDR_VAR 0 4
44334: PUSH
44335: DOUBLE
44336: LD_INT 16
44338: DEC
44339: ST_TO_ADDR
44340: LD_INT 25
44342: PUSH
44343: FOR_TO
44344: IFFALSE 44417
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44346: LD_ADDR_VAR 0 3
44350: PUSH
44351: LD_VAR 0 3
44355: PUSH
44356: LD_INT 22
44358: PUSH
44359: LD_VAR 0 1
44363: PPUSH
44364: CALL_OW 255
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 91
44375: PUSH
44376: LD_VAR 0 1
44380: PUSH
44381: LD_INT 6
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 30
44391: PUSH
44392: LD_VAR 0 4
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: LIST
44405: PUSH
44406: EMPTY
44407: LIST
44408: PPUSH
44409: CALL_OW 69
44413: ADD
44414: ST_TO_ADDR
44415: GO 44343
44417: POP
44418: POP
// for i = 1 to tmp do
44419: LD_ADDR_VAR 0 4
44423: PUSH
44424: DOUBLE
44425: LD_INT 1
44427: DEC
44428: ST_TO_ADDR
44429: LD_VAR 0 3
44433: PUSH
44434: FOR_TO
44435: IFFALSE 44523
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44437: LD_ADDR_VAR 0 5
44441: PUSH
44442: LD_VAR 0 5
44446: PUSH
44447: LD_VAR 0 3
44451: PUSH
44452: LD_VAR 0 4
44456: ARRAY
44457: PPUSH
44458: CALL_OW 266
44462: PUSH
44463: LD_VAR 0 3
44467: PUSH
44468: LD_VAR 0 4
44472: ARRAY
44473: PPUSH
44474: CALL_OW 250
44478: PUSH
44479: LD_VAR 0 3
44483: PUSH
44484: LD_VAR 0 4
44488: ARRAY
44489: PPUSH
44490: CALL_OW 251
44494: PUSH
44495: LD_VAR 0 3
44499: PUSH
44500: LD_VAR 0 4
44504: ARRAY
44505: PPUSH
44506: CALL_OW 254
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: PUSH
44517: EMPTY
44518: LIST
44519: ADD
44520: ST_TO_ADDR
44521: GO 44434
44523: POP
44524: POP
// result := list ;
44525: LD_ADDR_VAR 0 2
44529: PUSH
44530: LD_VAR 0 5
44534: ST_TO_ADDR
// end ;
44535: LD_VAR 0 2
44539: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44540: LD_INT 0
44542: PPUSH
44543: PPUSH
44544: PPUSH
44545: PPUSH
44546: PPUSH
44547: PPUSH
44548: PPUSH
// if not factory then
44549: LD_VAR 0 1
44553: NOT
44554: IFFALSE 44558
// exit ;
44556: GO 45161
// if control = control_apeman then
44558: LD_VAR 0 4
44562: PUSH
44563: LD_INT 5
44565: EQUAL
44566: IFFALSE 44675
// begin tmp := UnitsInside ( factory ) ;
44568: LD_ADDR_VAR 0 8
44572: PUSH
44573: LD_VAR 0 1
44577: PPUSH
44578: CALL_OW 313
44582: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44583: LD_VAR 0 8
44587: PPUSH
44588: LD_INT 25
44590: PUSH
44591: LD_INT 12
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PPUSH
44598: CALL_OW 72
44602: NOT
44603: IFFALSE 44613
// control := control_manual ;
44605: LD_ADDR_VAR 0 4
44609: PUSH
44610: LD_INT 1
44612: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44613: LD_ADDR_VAR 0 8
44617: PUSH
44618: LD_VAR 0 1
44622: PPUSH
44623: CALL 44310 0 1
44627: ST_TO_ADDR
// if tmp then
44628: LD_VAR 0 8
44632: IFFALSE 44675
// begin for i in tmp do
44634: LD_ADDR_VAR 0 7
44638: PUSH
44639: LD_VAR 0 8
44643: PUSH
44644: FOR_IN
44645: IFFALSE 44673
// if i [ 1 ] = b_ext_radio then
44647: LD_VAR 0 7
44651: PUSH
44652: LD_INT 1
44654: ARRAY
44655: PUSH
44656: LD_INT 22
44658: EQUAL
44659: IFFALSE 44671
// begin control := control_remote ;
44661: LD_ADDR_VAR 0 4
44665: PUSH
44666: LD_INT 2
44668: ST_TO_ADDR
// break ;
44669: GO 44673
// end ;
44671: GO 44644
44673: POP
44674: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44675: LD_VAR 0 1
44679: PPUSH
44680: LD_VAR 0 2
44684: PPUSH
44685: LD_VAR 0 3
44689: PPUSH
44690: LD_VAR 0 4
44694: PPUSH
44695: LD_VAR 0 5
44699: PPUSH
44700: CALL_OW 448
44704: IFFALSE 44739
// begin result := [ chassis , engine , control , weapon ] ;
44706: LD_ADDR_VAR 0 6
44710: PUSH
44711: LD_VAR 0 2
44715: PUSH
44716: LD_VAR 0 3
44720: PUSH
44721: LD_VAR 0 4
44725: PUSH
44726: LD_VAR 0 5
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: ST_TO_ADDR
// exit ;
44737: GO 45161
// end ; _chassis := AvailableChassisList ( factory ) ;
44739: LD_ADDR_VAR 0 9
44743: PUSH
44744: LD_VAR 0 1
44748: PPUSH
44749: CALL_OW 475
44753: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44754: LD_ADDR_VAR 0 11
44758: PUSH
44759: LD_VAR 0 1
44763: PPUSH
44764: CALL_OW 476
44768: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44769: LD_ADDR_VAR 0 12
44773: PUSH
44774: LD_VAR 0 1
44778: PPUSH
44779: CALL_OW 477
44783: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44784: LD_ADDR_VAR 0 10
44788: PUSH
44789: LD_VAR 0 1
44793: PPUSH
44794: CALL_OW 478
44798: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44799: LD_VAR 0 9
44803: NOT
44804: IFTRUE 44813
44806: PUSH
44807: LD_VAR 0 11
44811: NOT
44812: OR
44813: IFTRUE 44822
44815: PUSH
44816: LD_VAR 0 12
44820: NOT
44821: OR
44822: IFTRUE 44831
44824: PUSH
44825: LD_VAR 0 10
44829: NOT
44830: OR
44831: IFFALSE 44866
// begin result := [ chassis , engine , control , weapon ] ;
44833: LD_ADDR_VAR 0 6
44837: PUSH
44838: LD_VAR 0 2
44842: PUSH
44843: LD_VAR 0 3
44847: PUSH
44848: LD_VAR 0 4
44852: PUSH
44853: LD_VAR 0 5
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: ST_TO_ADDR
// exit ;
44864: GO 45161
// end ; if not chassis in _chassis then
44866: LD_VAR 0 2
44870: PUSH
44871: LD_VAR 0 9
44875: IN
44876: NOT
44877: IFFALSE 44903
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44879: LD_ADDR_VAR 0 2
44883: PUSH
44884: LD_VAR 0 9
44888: PUSH
44889: LD_INT 1
44891: PPUSH
44892: LD_VAR 0 9
44896: PPUSH
44897: CALL_OW 12
44901: ARRAY
44902: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44903: LD_VAR 0 2
44907: PPUSH
44908: LD_VAR 0 3
44912: PPUSH
44913: CALL 45166 0 2
44917: NOT
44918: IFFALSE 44979
// repeat engine := _engine [ 1 ] ;
44920: LD_ADDR_VAR 0 3
44924: PUSH
44925: LD_VAR 0 11
44929: PUSH
44930: LD_INT 1
44932: ARRAY
44933: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44934: LD_ADDR_VAR 0 11
44938: PUSH
44939: LD_VAR 0 11
44943: PPUSH
44944: LD_INT 1
44946: PPUSH
44947: CALL_OW 3
44951: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44952: LD_VAR 0 2
44956: PPUSH
44957: LD_VAR 0 3
44961: PPUSH
44962: CALL 45166 0 2
44966: IFTRUE 44977
44968: PUSH
44969: LD_VAR 0 11
44973: PUSH
44974: EMPTY
44975: EQUAL
44976: OR
44977: IFFALSE 44920
// if not control in _control then
44979: LD_VAR 0 4
44983: PUSH
44984: LD_VAR 0 12
44988: IN
44989: NOT
44990: IFFALSE 45016
// control := _control [ rand ( 1 , _control ) ] ;
44992: LD_ADDR_VAR 0 4
44996: PUSH
44997: LD_VAR 0 12
45001: PUSH
45002: LD_INT 1
45004: PPUSH
45005: LD_VAR 0 12
45009: PPUSH
45010: CALL_OW 12
45014: ARRAY
45015: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
45016: LD_VAR 0 2
45020: PPUSH
45021: LD_VAR 0 5
45025: PPUSH
45026: CALL 45388 0 2
45030: NOT
45031: IFFALSE 45092
// repeat weapon := _weapon [ 1 ] ;
45033: LD_ADDR_VAR 0 5
45037: PUSH
45038: LD_VAR 0 10
45042: PUSH
45043: LD_INT 1
45045: ARRAY
45046: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45047: LD_ADDR_VAR 0 10
45051: PUSH
45052: LD_VAR 0 10
45056: PPUSH
45057: LD_INT 1
45059: PPUSH
45060: CALL_OW 3
45064: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45065: LD_VAR 0 2
45069: PPUSH
45070: LD_VAR 0 5
45074: PPUSH
45075: CALL 45388 0 2
45079: IFTRUE 45090
45081: PUSH
45082: LD_VAR 0 10
45086: PUSH
45087: EMPTY
45088: EQUAL
45089: OR
45090: IFFALSE 45033
// result := [ ] ;
45092: LD_ADDR_VAR 0 6
45096: PUSH
45097: EMPTY
45098: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45099: LD_VAR 0 1
45103: PPUSH
45104: LD_VAR 0 2
45108: PPUSH
45109: LD_VAR 0 3
45113: PPUSH
45114: LD_VAR 0 4
45118: PPUSH
45119: LD_VAR 0 5
45123: PPUSH
45124: CALL_OW 448
45128: IFFALSE 45161
// result := [ chassis , engine , control , weapon ] ;
45130: LD_ADDR_VAR 0 6
45134: PUSH
45135: LD_VAR 0 2
45139: PUSH
45140: LD_VAR 0 3
45144: PUSH
45145: LD_VAR 0 4
45149: PUSH
45150: LD_VAR 0 5
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: ST_TO_ADDR
// end ;
45161: LD_VAR 0 6
45165: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45166: LD_INT 0
45168: PPUSH
// if not chassis or not engine then
45169: LD_VAR 0 1
45173: NOT
45174: IFTRUE 45183
45176: PUSH
45177: LD_VAR 0 2
45181: NOT
45182: OR
45183: IFFALSE 45187
// exit ;
45185: GO 45383
// case engine of engine_solar :
45187: LD_VAR 0 2
45191: PUSH
45192: LD_INT 2
45194: DOUBLE
45195: EQUAL
45196: IFTRUE 45200
45198: GO 45238
45200: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45201: LD_ADDR_VAR 0 3
45205: PUSH
45206: LD_INT 11
45208: PUSH
45209: LD_INT 12
45211: PUSH
45212: LD_INT 13
45214: PUSH
45215: LD_INT 14
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: LD_INT 3
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: ST_TO_ADDR
45236: GO 45367
45238: LD_INT 1
45240: DOUBLE
45241: EQUAL
45242: IFTRUE 45246
45244: GO 45308
45246: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45247: LD_ADDR_VAR 0 3
45251: PUSH
45252: LD_INT 11
45254: PUSH
45255: LD_INT 12
45257: PUSH
45258: LD_INT 13
45260: PUSH
45261: LD_INT 14
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: LD_INT 2
45269: PUSH
45270: LD_INT 3
45272: PUSH
45273: LD_INT 4
45275: PUSH
45276: LD_INT 5
45278: PUSH
45279: LD_INT 21
45281: PUSH
45282: LD_INT 23
45284: PUSH
45285: LD_INT 22
45287: PUSH
45288: LD_INT 24
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: ST_TO_ADDR
45306: GO 45367
45308: LD_INT 3
45310: DOUBLE
45311: EQUAL
45312: IFTRUE 45316
45314: GO 45366
45316: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45317: LD_ADDR_VAR 0 3
45321: PUSH
45322: LD_INT 13
45324: PUSH
45325: LD_INT 14
45327: PUSH
45328: LD_INT 2
45330: PUSH
45331: LD_INT 3
45333: PUSH
45334: LD_INT 4
45336: PUSH
45337: LD_INT 5
45339: PUSH
45340: LD_INT 21
45342: PUSH
45343: LD_INT 22
45345: PUSH
45346: LD_INT 23
45348: PUSH
45349: LD_INT 24
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: ST_TO_ADDR
45364: GO 45367
45366: POP
// result := ( chassis in result ) ;
45367: LD_ADDR_VAR 0 3
45371: PUSH
45372: LD_VAR 0 1
45376: PUSH
45377: LD_VAR 0 3
45381: IN
45382: ST_TO_ADDR
// end ;
45383: LD_VAR 0 3
45387: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45388: LD_INT 0
45390: PPUSH
// if not chassis or not weapon then
45391: LD_VAR 0 1
45395: NOT
45396: IFTRUE 45405
45398: PUSH
45399: LD_VAR 0 2
45403: NOT
45404: OR
45405: IFFALSE 45409
// exit ;
45407: GO 46469
// case weapon of us_machine_gun :
45409: LD_VAR 0 2
45413: PUSH
45414: LD_INT 2
45416: DOUBLE
45417: EQUAL
45418: IFTRUE 45422
45420: GO 45452
45422: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45423: LD_ADDR_VAR 0 3
45427: PUSH
45428: LD_INT 1
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: LD_INT 3
45436: PUSH
45437: LD_INT 4
45439: PUSH
45440: LD_INT 5
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: ST_TO_ADDR
45450: GO 46453
45452: LD_INT 3
45454: DOUBLE
45455: EQUAL
45456: IFTRUE 45460
45458: GO 45490
45460: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45461: LD_ADDR_VAR 0 3
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: LD_INT 3
45474: PUSH
45475: LD_INT 4
45477: PUSH
45478: LD_INT 5
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: ST_TO_ADDR
45488: GO 46453
45490: LD_INT 11
45492: DOUBLE
45493: EQUAL
45494: IFTRUE 45498
45496: GO 45528
45498: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45499: LD_ADDR_VAR 0 3
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: LD_INT 3
45512: PUSH
45513: LD_INT 4
45515: PUSH
45516: LD_INT 5
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: ST_TO_ADDR
45526: GO 46453
45528: LD_INT 4
45530: DOUBLE
45531: EQUAL
45532: IFTRUE 45536
45534: GO 45562
45536: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45537: LD_ADDR_VAR 0 3
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: LD_INT 3
45547: PUSH
45548: LD_INT 4
45550: PUSH
45551: LD_INT 5
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: ST_TO_ADDR
45560: GO 46453
45562: LD_INT 5
45564: DOUBLE
45565: EQUAL
45566: IFTRUE 45570
45568: GO 45596
45570: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45571: LD_ADDR_VAR 0 3
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: LD_INT 3
45581: PUSH
45582: LD_INT 4
45584: PUSH
45585: LD_INT 5
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: ST_TO_ADDR
45594: GO 46453
45596: LD_INT 9
45598: DOUBLE
45599: EQUAL
45600: IFTRUE 45604
45602: GO 45630
45604: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45605: LD_ADDR_VAR 0 3
45609: PUSH
45610: LD_INT 2
45612: PUSH
45613: LD_INT 3
45615: PUSH
45616: LD_INT 4
45618: PUSH
45619: LD_INT 5
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: ST_TO_ADDR
45628: GO 46453
45630: LD_INT 7
45632: DOUBLE
45633: EQUAL
45634: IFTRUE 45638
45636: GO 45664
45638: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45639: LD_ADDR_VAR 0 3
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: LD_INT 3
45649: PUSH
45650: LD_INT 4
45652: PUSH
45653: LD_INT 5
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: ST_TO_ADDR
45662: GO 46453
45664: LD_INT 12
45666: DOUBLE
45667: EQUAL
45668: IFTRUE 45672
45670: GO 45698
45672: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45673: LD_ADDR_VAR 0 3
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: LD_INT 3
45683: PUSH
45684: LD_INT 4
45686: PUSH
45687: LD_INT 5
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: ST_TO_ADDR
45696: GO 46453
45698: LD_INT 13
45700: DOUBLE
45701: EQUAL
45702: IFTRUE 45706
45704: GO 45732
45706: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45707: LD_ADDR_VAR 0 3
45711: PUSH
45712: LD_INT 2
45714: PUSH
45715: LD_INT 3
45717: PUSH
45718: LD_INT 4
45720: PUSH
45721: LD_INT 5
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: ST_TO_ADDR
45730: GO 46453
45732: LD_INT 14
45734: DOUBLE
45735: EQUAL
45736: IFTRUE 45740
45738: GO 45758
45740: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45741: LD_ADDR_VAR 0 3
45745: PUSH
45746: LD_INT 4
45748: PUSH
45749: LD_INT 5
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: ST_TO_ADDR
45756: GO 46453
45758: LD_INT 6
45760: DOUBLE
45761: EQUAL
45762: IFTRUE 45766
45764: GO 45784
45766: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45767: LD_ADDR_VAR 0 3
45771: PUSH
45772: LD_INT 4
45774: PUSH
45775: LD_INT 5
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: ST_TO_ADDR
45782: GO 46453
45784: LD_INT 10
45786: DOUBLE
45787: EQUAL
45788: IFTRUE 45792
45790: GO 45810
45792: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45793: LD_ADDR_VAR 0 3
45797: PUSH
45798: LD_INT 4
45800: PUSH
45801: LD_INT 5
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: ST_TO_ADDR
45808: GO 46453
45810: LD_INT 22
45812: DOUBLE
45813: EQUAL
45814: IFTRUE 45818
45816: GO 45844
45818: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45819: LD_ADDR_VAR 0 3
45823: PUSH
45824: LD_INT 11
45826: PUSH
45827: LD_INT 12
45829: PUSH
45830: LD_INT 13
45832: PUSH
45833: LD_INT 14
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: ST_TO_ADDR
45842: GO 46453
45844: LD_INT 23
45846: DOUBLE
45847: EQUAL
45848: IFTRUE 45852
45850: GO 45878
45852: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45853: LD_ADDR_VAR 0 3
45857: PUSH
45858: LD_INT 11
45860: PUSH
45861: LD_INT 12
45863: PUSH
45864: LD_INT 13
45866: PUSH
45867: LD_INT 14
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: ST_TO_ADDR
45876: GO 46453
45878: LD_INT 24
45880: DOUBLE
45881: EQUAL
45882: IFTRUE 45886
45884: GO 45912
45886: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45887: LD_ADDR_VAR 0 3
45891: PUSH
45892: LD_INT 11
45894: PUSH
45895: LD_INT 12
45897: PUSH
45898: LD_INT 13
45900: PUSH
45901: LD_INT 14
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: ST_TO_ADDR
45910: GO 46453
45912: LD_INT 30
45914: DOUBLE
45915: EQUAL
45916: IFTRUE 45920
45918: GO 45946
45920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45921: LD_ADDR_VAR 0 3
45925: PUSH
45926: LD_INT 11
45928: PUSH
45929: LD_INT 12
45931: PUSH
45932: LD_INT 13
45934: PUSH
45935: LD_INT 14
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: ST_TO_ADDR
45944: GO 46453
45946: LD_INT 25
45948: DOUBLE
45949: EQUAL
45950: IFTRUE 45954
45952: GO 45972
45954: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45955: LD_ADDR_VAR 0 3
45959: PUSH
45960: LD_INT 13
45962: PUSH
45963: LD_INT 14
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: ST_TO_ADDR
45970: GO 46453
45972: LD_INT 27
45974: DOUBLE
45975: EQUAL
45976: IFTRUE 45980
45978: GO 45998
45980: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45981: LD_ADDR_VAR 0 3
45985: PUSH
45986: LD_INT 13
45988: PUSH
45989: LD_INT 14
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: ST_TO_ADDR
45996: GO 46453
45998: LD_INT 92
46000: DOUBLE
46001: EQUAL
46002: IFTRUE 46006
46004: GO 46032
46006: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
46007: LD_ADDR_VAR 0 3
46011: PUSH
46012: LD_INT 11
46014: PUSH
46015: LD_INT 12
46017: PUSH
46018: LD_INT 13
46020: PUSH
46021: LD_INT 14
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: ST_TO_ADDR
46030: GO 46453
46032: LD_INT 28
46034: DOUBLE
46035: EQUAL
46036: IFTRUE 46040
46038: GO 46058
46040: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46041: LD_ADDR_VAR 0 3
46045: PUSH
46046: LD_INT 13
46048: PUSH
46049: LD_INT 14
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: ST_TO_ADDR
46056: GO 46453
46058: LD_INT 29
46060: DOUBLE
46061: EQUAL
46062: IFTRUE 46066
46064: GO 46084
46066: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46067: LD_ADDR_VAR 0 3
46071: PUSH
46072: LD_INT 13
46074: PUSH
46075: LD_INT 14
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: ST_TO_ADDR
46082: GO 46453
46084: LD_INT 31
46086: DOUBLE
46087: EQUAL
46088: IFTRUE 46092
46090: GO 46110
46092: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46093: LD_ADDR_VAR 0 3
46097: PUSH
46098: LD_INT 13
46100: PUSH
46101: LD_INT 14
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: ST_TO_ADDR
46108: GO 46453
46110: LD_INT 26
46112: DOUBLE
46113: EQUAL
46114: IFTRUE 46118
46116: GO 46136
46118: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46119: LD_ADDR_VAR 0 3
46123: PUSH
46124: LD_INT 13
46126: PUSH
46127: LD_INT 14
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: ST_TO_ADDR
46134: GO 46453
46136: LD_INT 42
46138: DOUBLE
46139: EQUAL
46140: IFTRUE 46144
46142: GO 46170
46144: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46145: LD_ADDR_VAR 0 3
46149: PUSH
46150: LD_INT 21
46152: PUSH
46153: LD_INT 22
46155: PUSH
46156: LD_INT 23
46158: PUSH
46159: LD_INT 24
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: ST_TO_ADDR
46168: GO 46453
46170: LD_INT 43
46172: DOUBLE
46173: EQUAL
46174: IFTRUE 46178
46176: GO 46204
46178: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46179: LD_ADDR_VAR 0 3
46183: PUSH
46184: LD_INT 21
46186: PUSH
46187: LD_INT 22
46189: PUSH
46190: LD_INT 23
46192: PUSH
46193: LD_INT 24
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: ST_TO_ADDR
46202: GO 46453
46204: LD_INT 44
46206: DOUBLE
46207: EQUAL
46208: IFTRUE 46212
46210: GO 46238
46212: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46213: LD_ADDR_VAR 0 3
46217: PUSH
46218: LD_INT 21
46220: PUSH
46221: LD_INT 22
46223: PUSH
46224: LD_INT 23
46226: PUSH
46227: LD_INT 24
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: ST_TO_ADDR
46236: GO 46453
46238: LD_INT 45
46240: DOUBLE
46241: EQUAL
46242: IFTRUE 46246
46244: GO 46272
46246: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46247: LD_ADDR_VAR 0 3
46251: PUSH
46252: LD_INT 21
46254: PUSH
46255: LD_INT 22
46257: PUSH
46258: LD_INT 23
46260: PUSH
46261: LD_INT 24
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: ST_TO_ADDR
46270: GO 46453
46272: LD_INT 49
46274: DOUBLE
46275: EQUAL
46276: IFTRUE 46280
46278: GO 46306
46280: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46281: LD_ADDR_VAR 0 3
46285: PUSH
46286: LD_INT 21
46288: PUSH
46289: LD_INT 22
46291: PUSH
46292: LD_INT 23
46294: PUSH
46295: LD_INT 24
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: ST_TO_ADDR
46304: GO 46453
46306: LD_INT 51
46308: DOUBLE
46309: EQUAL
46310: IFTRUE 46314
46312: GO 46340
46314: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46315: LD_ADDR_VAR 0 3
46319: PUSH
46320: LD_INT 21
46322: PUSH
46323: LD_INT 22
46325: PUSH
46326: LD_INT 23
46328: PUSH
46329: LD_INT 24
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: ST_TO_ADDR
46338: GO 46453
46340: LD_INT 52
46342: DOUBLE
46343: EQUAL
46344: IFTRUE 46348
46346: GO 46374
46348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46349: LD_ADDR_VAR 0 3
46353: PUSH
46354: LD_INT 21
46356: PUSH
46357: LD_INT 22
46359: PUSH
46360: LD_INT 23
46362: PUSH
46363: LD_INT 24
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: ST_TO_ADDR
46372: GO 46453
46374: LD_INT 53
46376: DOUBLE
46377: EQUAL
46378: IFTRUE 46382
46380: GO 46400
46382: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46383: LD_ADDR_VAR 0 3
46387: PUSH
46388: LD_INT 23
46390: PUSH
46391: LD_INT 24
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: ST_TO_ADDR
46398: GO 46453
46400: LD_INT 46
46402: DOUBLE
46403: EQUAL
46404: IFTRUE 46408
46406: GO 46426
46408: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46409: LD_ADDR_VAR 0 3
46413: PUSH
46414: LD_INT 23
46416: PUSH
46417: LD_INT 24
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: ST_TO_ADDR
46424: GO 46453
46426: LD_INT 47
46428: DOUBLE
46429: EQUAL
46430: IFTRUE 46434
46432: GO 46452
46434: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46435: LD_ADDR_VAR 0 3
46439: PUSH
46440: LD_INT 23
46442: PUSH
46443: LD_INT 24
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: ST_TO_ADDR
46450: GO 46453
46452: POP
// result := ( chassis in result ) ;
46453: LD_ADDR_VAR 0 3
46457: PUSH
46458: LD_VAR 0 1
46462: PUSH
46463: LD_VAR 0 3
46467: IN
46468: ST_TO_ADDR
// end ;
46469: LD_VAR 0 3
46473: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46474: LD_INT 0
46476: PPUSH
46477: PPUSH
46478: PPUSH
46479: PPUSH
46480: PPUSH
46481: PPUSH
46482: PPUSH
// result := array ;
46483: LD_ADDR_VAR 0 5
46487: PUSH
46488: LD_VAR 0 1
46492: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46493: LD_VAR 0 1
46497: NOT
46498: IFTRUE 46507
46500: PUSH
46501: LD_VAR 0 2
46505: NOT
46506: OR
46507: IFTRUE 46516
46509: PUSH
46510: LD_VAR 0 3
46514: NOT
46515: OR
46516: IFTRUE 46530
46518: PUSH
46519: LD_VAR 0 2
46523: PUSH
46524: LD_VAR 0 1
46528: GREATER
46529: OR
46530: IFTRUE 46544
46532: PUSH
46533: LD_VAR 0 3
46537: PUSH
46538: LD_VAR 0 1
46542: GREATER
46543: OR
46544: IFFALSE 46548
// exit ;
46546: GO 46844
// if direction then
46548: LD_VAR 0 4
46552: IFFALSE 46616
// begin d := 1 ;
46554: LD_ADDR_VAR 0 9
46558: PUSH
46559: LD_INT 1
46561: ST_TO_ADDR
// if i_from > i_to then
46562: LD_VAR 0 2
46566: PUSH
46567: LD_VAR 0 3
46571: GREATER
46572: IFFALSE 46598
// length := ( array - i_from ) + i_to else
46574: LD_ADDR_VAR 0 11
46578: PUSH
46579: LD_VAR 0 1
46583: PUSH
46584: LD_VAR 0 2
46588: MINUS
46589: PUSH
46590: LD_VAR 0 3
46594: PLUS
46595: ST_TO_ADDR
46596: GO 46614
// length := i_to - i_from ;
46598: LD_ADDR_VAR 0 11
46602: PUSH
46603: LD_VAR 0 3
46607: PUSH
46608: LD_VAR 0 2
46612: MINUS
46613: ST_TO_ADDR
// end else
46614: GO 46677
// begin d := - 1 ;
46616: LD_ADDR_VAR 0 9
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: ST_TO_ADDR
// if i_from > i_to then
46625: LD_VAR 0 2
46629: PUSH
46630: LD_VAR 0 3
46634: GREATER
46635: IFFALSE 46655
// length := i_from - i_to else
46637: LD_ADDR_VAR 0 11
46641: PUSH
46642: LD_VAR 0 2
46646: PUSH
46647: LD_VAR 0 3
46651: MINUS
46652: ST_TO_ADDR
46653: GO 46677
// length := ( array - i_to ) + i_from ;
46655: LD_ADDR_VAR 0 11
46659: PUSH
46660: LD_VAR 0 1
46664: PUSH
46665: LD_VAR 0 3
46669: MINUS
46670: PUSH
46671: LD_VAR 0 2
46675: PLUS
46676: ST_TO_ADDR
// end ; if not length then
46677: LD_VAR 0 11
46681: NOT
46682: IFFALSE 46686
// exit ;
46684: GO 46844
// tmp := array ;
46686: LD_ADDR_VAR 0 10
46690: PUSH
46691: LD_VAR 0 1
46695: ST_TO_ADDR
// for i = 1 to length do
46696: LD_ADDR_VAR 0 6
46700: PUSH
46701: DOUBLE
46702: LD_INT 1
46704: DEC
46705: ST_TO_ADDR
46706: LD_VAR 0 11
46710: PUSH
46711: FOR_TO
46712: IFFALSE 46832
// begin for j = 1 to array do
46714: LD_ADDR_VAR 0 7
46718: PUSH
46719: DOUBLE
46720: LD_INT 1
46722: DEC
46723: ST_TO_ADDR
46724: LD_VAR 0 1
46728: PUSH
46729: FOR_TO
46730: IFFALSE 46818
// begin k := j + d ;
46732: LD_ADDR_VAR 0 8
46736: PUSH
46737: LD_VAR 0 7
46741: PUSH
46742: LD_VAR 0 9
46746: PLUS
46747: ST_TO_ADDR
// if k > array then
46748: LD_VAR 0 8
46752: PUSH
46753: LD_VAR 0 1
46757: GREATER
46758: IFFALSE 46768
// k := 1 ;
46760: LD_ADDR_VAR 0 8
46764: PUSH
46765: LD_INT 1
46767: ST_TO_ADDR
// if not k then
46768: LD_VAR 0 8
46772: NOT
46773: IFFALSE 46785
// k := array ;
46775: LD_ADDR_VAR 0 8
46779: PUSH
46780: LD_VAR 0 1
46784: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46785: LD_ADDR_VAR 0 10
46789: PUSH
46790: LD_VAR 0 10
46794: PPUSH
46795: LD_VAR 0 8
46799: PPUSH
46800: LD_VAR 0 1
46804: PUSH
46805: LD_VAR 0 7
46809: ARRAY
46810: PPUSH
46811: CALL_OW 1
46815: ST_TO_ADDR
// end ;
46816: GO 46729
46818: POP
46819: POP
// array := tmp ;
46820: LD_ADDR_VAR 0 1
46824: PUSH
46825: LD_VAR 0 10
46829: ST_TO_ADDR
// end ;
46830: GO 46711
46832: POP
46833: POP
// result := array ;
46834: LD_ADDR_VAR 0 5
46838: PUSH
46839: LD_VAR 0 1
46843: ST_TO_ADDR
// end ;
46844: LD_VAR 0 5
46848: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46849: LD_INT 0
46851: PPUSH
46852: PPUSH
// result := 0 ;
46853: LD_ADDR_VAR 0 3
46857: PUSH
46858: LD_INT 0
46860: ST_TO_ADDR
// if not array or not value in array then
46861: LD_VAR 0 1
46865: NOT
46866: IFTRUE 46881
46868: PUSH
46869: LD_VAR 0 2
46873: PUSH
46874: LD_VAR 0 1
46878: IN
46879: NOT
46880: OR
46881: IFFALSE 46885
// exit ;
46883: GO 46939
// for i = 1 to array do
46885: LD_ADDR_VAR 0 4
46889: PUSH
46890: DOUBLE
46891: LD_INT 1
46893: DEC
46894: ST_TO_ADDR
46895: LD_VAR 0 1
46899: PUSH
46900: FOR_TO
46901: IFFALSE 46937
// if value = array [ i ] then
46903: LD_VAR 0 2
46907: PUSH
46908: LD_VAR 0 1
46912: PUSH
46913: LD_VAR 0 4
46917: ARRAY
46918: EQUAL
46919: IFFALSE 46935
// begin result := i ;
46921: LD_ADDR_VAR 0 3
46925: PUSH
46926: LD_VAR 0 4
46930: ST_TO_ADDR
// exit ;
46931: POP
46932: POP
46933: GO 46939
// end ;
46935: GO 46900
46937: POP
46938: POP
// end ;
46939: LD_VAR 0 3
46943: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46944: LD_INT 0
46946: PPUSH
// vc_chassis := chassis ;
46947: LD_ADDR_OWVAR 37
46951: PUSH
46952: LD_VAR 0 1
46956: ST_TO_ADDR
// vc_engine := engine ;
46957: LD_ADDR_OWVAR 39
46961: PUSH
46962: LD_VAR 0 2
46966: ST_TO_ADDR
// vc_control := control ;
46967: LD_ADDR_OWVAR 38
46971: PUSH
46972: LD_VAR 0 3
46976: ST_TO_ADDR
// vc_weapon := weapon ;
46977: LD_ADDR_OWVAR 40
46981: PUSH
46982: LD_VAR 0 4
46986: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46987: LD_ADDR_OWVAR 41
46991: PUSH
46992: LD_VAR 0 5
46996: ST_TO_ADDR
// end ;
46997: LD_VAR 0 6
47001: RET
// export function WantPlant ( unit ) ; var task ; begin
47002: LD_INT 0
47004: PPUSH
47005: PPUSH
// result := false ;
47006: LD_ADDR_VAR 0 2
47010: PUSH
47011: LD_INT 0
47013: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
47014: LD_ADDR_VAR 0 3
47018: PUSH
47019: LD_VAR 0 1
47023: PPUSH
47024: CALL_OW 437
47028: ST_TO_ADDR
// if task then
47029: LD_VAR 0 3
47033: IFFALSE 47061
// if task [ 1 ] [ 1 ] = p then
47035: LD_VAR 0 3
47039: PUSH
47040: LD_INT 1
47042: ARRAY
47043: PUSH
47044: LD_INT 1
47046: ARRAY
47047: PUSH
47048: LD_STRING p
47050: EQUAL
47051: IFFALSE 47061
// result := true ;
47053: LD_ADDR_VAR 0 2
47057: PUSH
47058: LD_INT 1
47060: ST_TO_ADDR
// end ;
47061: LD_VAR 0 2
47065: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47066: LD_INT 0
47068: PPUSH
47069: PPUSH
47070: PPUSH
47071: PPUSH
// if pos < 1 then
47072: LD_VAR 0 2
47076: PUSH
47077: LD_INT 1
47079: LESS
47080: IFFALSE 47084
// exit ;
47082: GO 47387
// if pos = 1 then
47084: LD_VAR 0 2
47088: PUSH
47089: LD_INT 1
47091: EQUAL
47092: IFFALSE 47125
// result := Replace ( arr , pos [ 1 ] , value ) else
47094: LD_ADDR_VAR 0 4
47098: PUSH
47099: LD_VAR 0 1
47103: PPUSH
47104: LD_VAR 0 2
47108: PUSH
47109: LD_INT 1
47111: ARRAY
47112: PPUSH
47113: LD_VAR 0 3
47117: PPUSH
47118: CALL_OW 1
47122: ST_TO_ADDR
47123: GO 47387
// begin tmp := arr ;
47125: LD_ADDR_VAR 0 6
47129: PUSH
47130: LD_VAR 0 1
47134: ST_TO_ADDR
// s_arr := [ tmp ] ;
47135: LD_ADDR_VAR 0 7
47139: PUSH
47140: LD_VAR 0 6
47144: PUSH
47145: EMPTY
47146: LIST
47147: ST_TO_ADDR
// for i = 1 to pos - 1 do
47148: LD_ADDR_VAR 0 5
47152: PUSH
47153: DOUBLE
47154: LD_INT 1
47156: DEC
47157: ST_TO_ADDR
47158: LD_VAR 0 2
47162: PUSH
47163: LD_INT 1
47165: MINUS
47166: PUSH
47167: FOR_TO
47168: IFFALSE 47213
// begin tmp := tmp [ pos [ i ] ] ;
47170: LD_ADDR_VAR 0 6
47174: PUSH
47175: LD_VAR 0 6
47179: PUSH
47180: LD_VAR 0 2
47184: PUSH
47185: LD_VAR 0 5
47189: ARRAY
47190: ARRAY
47191: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47192: LD_ADDR_VAR 0 7
47196: PUSH
47197: LD_VAR 0 7
47201: PUSH
47202: LD_VAR 0 6
47206: PUSH
47207: EMPTY
47208: LIST
47209: ADD
47210: ST_TO_ADDR
// end ;
47211: GO 47167
47213: POP
47214: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47215: LD_ADDR_VAR 0 6
47219: PUSH
47220: LD_VAR 0 6
47224: PPUSH
47225: LD_VAR 0 2
47229: PUSH
47230: LD_VAR 0 2
47234: ARRAY
47235: PPUSH
47236: LD_VAR 0 3
47240: PPUSH
47241: CALL_OW 1
47245: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47246: LD_ADDR_VAR 0 7
47250: PUSH
47251: LD_VAR 0 7
47255: PPUSH
47256: LD_VAR 0 7
47260: PPUSH
47261: LD_VAR 0 6
47265: PPUSH
47266: CALL_OW 1
47270: ST_TO_ADDR
// for i = s_arr downto 2 do
47271: LD_ADDR_VAR 0 5
47275: PUSH
47276: DOUBLE
47277: LD_VAR 0 7
47281: INC
47282: ST_TO_ADDR
47283: LD_INT 2
47285: PUSH
47286: FOR_DOWNTO
47287: IFFALSE 47371
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47289: LD_ADDR_VAR 0 6
47293: PUSH
47294: LD_VAR 0 7
47298: PUSH
47299: LD_VAR 0 5
47303: PUSH
47304: LD_INT 1
47306: MINUS
47307: ARRAY
47308: PPUSH
47309: LD_VAR 0 2
47313: PUSH
47314: LD_VAR 0 5
47318: PUSH
47319: LD_INT 1
47321: MINUS
47322: ARRAY
47323: PPUSH
47324: LD_VAR 0 7
47328: PUSH
47329: LD_VAR 0 5
47333: ARRAY
47334: PPUSH
47335: CALL_OW 1
47339: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47340: LD_ADDR_VAR 0 7
47344: PUSH
47345: LD_VAR 0 7
47349: PPUSH
47350: LD_VAR 0 5
47354: PUSH
47355: LD_INT 1
47357: MINUS
47358: PPUSH
47359: LD_VAR 0 6
47363: PPUSH
47364: CALL_OW 1
47368: ST_TO_ADDR
// end ;
47369: GO 47286
47371: POP
47372: POP
// result := s_arr [ 1 ] ;
47373: LD_ADDR_VAR 0 4
47377: PUSH
47378: LD_VAR 0 7
47382: PUSH
47383: LD_INT 1
47385: ARRAY
47386: ST_TO_ADDR
// end ; end ;
47387: LD_VAR 0 4
47391: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47392: LD_INT 0
47394: PPUSH
47395: PPUSH
// if not list then
47396: LD_VAR 0 1
47400: NOT
47401: IFFALSE 47405
// exit ;
47403: GO 47496
// i := list [ pos1 ] ;
47405: LD_ADDR_VAR 0 5
47409: PUSH
47410: LD_VAR 0 1
47414: PUSH
47415: LD_VAR 0 2
47419: ARRAY
47420: ST_TO_ADDR
// if not i then
47421: LD_VAR 0 5
47425: NOT
47426: IFFALSE 47430
// exit ;
47428: GO 47496
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47430: LD_ADDR_VAR 0 1
47434: PUSH
47435: LD_VAR 0 1
47439: PPUSH
47440: LD_VAR 0 2
47444: PPUSH
47445: LD_VAR 0 1
47449: PUSH
47450: LD_VAR 0 3
47454: ARRAY
47455: PPUSH
47456: CALL_OW 1
47460: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47461: LD_ADDR_VAR 0 1
47465: PUSH
47466: LD_VAR 0 1
47470: PPUSH
47471: LD_VAR 0 3
47475: PPUSH
47476: LD_VAR 0 5
47480: PPUSH
47481: CALL_OW 1
47485: ST_TO_ADDR
// result := list ;
47486: LD_ADDR_VAR 0 4
47490: PUSH
47491: LD_VAR 0 1
47495: ST_TO_ADDR
// end ;
47496: LD_VAR 0 4
47500: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47501: LD_INT 0
47503: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47504: LD_ADDR_VAR 0 5
47508: PUSH
47509: LD_VAR 0 1
47513: PPUSH
47514: CALL_OW 250
47518: PPUSH
47519: LD_VAR 0 1
47523: PPUSH
47524: CALL_OW 251
47528: PPUSH
47529: LD_VAR 0 2
47533: PPUSH
47534: LD_VAR 0 3
47538: PPUSH
47539: LD_VAR 0 4
47543: PPUSH
47544: CALL 47926 0 5
47548: ST_TO_ADDR
// end ;
47549: LD_VAR 0 5
47553: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47554: LD_INT 0
47556: PPUSH
47557: PPUSH
47558: PPUSH
47559: PPUSH
// if not list or not unit then
47560: LD_VAR 0 2
47564: NOT
47565: IFTRUE 47574
47567: PUSH
47568: LD_VAR 0 1
47572: NOT
47573: OR
47574: IFFALSE 47578
// exit ;
47576: GO 47921
// result := [ ] ;
47578: LD_ADDR_VAR 0 5
47582: PUSH
47583: EMPTY
47584: ST_TO_ADDR
// for i in list do
47585: LD_ADDR_VAR 0 6
47589: PUSH
47590: LD_VAR 0 2
47594: PUSH
47595: FOR_IN
47596: IFFALSE 47814
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47598: LD_ADDR_VAR 0 8
47602: PUSH
47603: LD_VAR 0 1
47607: PPUSH
47608: LD_VAR 0 6
47612: PUSH
47613: LD_INT 1
47615: ARRAY
47616: PPUSH
47617: LD_VAR 0 6
47621: PUSH
47622: LD_INT 2
47624: ARRAY
47625: PPUSH
47626: CALL_OW 297
47630: ST_TO_ADDR
// if not Count ( result ) then
47631: LD_VAR 0 5
47635: PPUSH
47636: CALL 44182 0 1
47640: NOT
47641: IFFALSE 47674
// begin result := Join ( result , [ i , tmp ] ) ;
47643: LD_ADDR_VAR 0 5
47647: PUSH
47648: LD_VAR 0 5
47652: PPUSH
47653: LD_VAR 0 6
47657: PUSH
47658: LD_VAR 0 8
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PPUSH
47667: CALL 80114 0 2
47671: ST_TO_ADDR
// continue ;
47672: GO 47595
// end ; if result [ result ] [ 2 ] <= tmp then
47674: LD_VAR 0 5
47678: PUSH
47679: LD_VAR 0 5
47683: ARRAY
47684: PUSH
47685: LD_INT 2
47687: ARRAY
47688: PUSH
47689: LD_VAR 0 8
47693: LESSEQUAL
47694: IFFALSE 47727
// result := Join ( result , [ i , tmp ] ) else
47696: LD_ADDR_VAR 0 5
47700: PUSH
47701: LD_VAR 0 5
47705: PPUSH
47706: LD_VAR 0 6
47710: PUSH
47711: LD_VAR 0 8
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PPUSH
47720: CALL 80114 0 2
47724: ST_TO_ADDR
47725: GO 47812
// begin for j := 1 to Count ( result ) do
47727: LD_ADDR_VAR 0 7
47731: PUSH
47732: DOUBLE
47733: LD_INT 1
47735: DEC
47736: ST_TO_ADDR
47737: LD_VAR 0 5
47741: PPUSH
47742: CALL 44182 0 1
47746: PUSH
47747: FOR_TO
47748: IFFALSE 47810
// begin if tmp < result [ j ] [ 2 ] then
47750: LD_VAR 0 8
47754: PUSH
47755: LD_VAR 0 5
47759: PUSH
47760: LD_VAR 0 7
47764: ARRAY
47765: PUSH
47766: LD_INT 2
47768: ARRAY
47769: LESS
47770: IFFALSE 47808
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47772: LD_ADDR_VAR 0 5
47776: PUSH
47777: LD_VAR 0 5
47781: PPUSH
47782: LD_VAR 0 7
47786: PPUSH
47787: LD_VAR 0 6
47791: PUSH
47792: LD_VAR 0 8
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PPUSH
47801: CALL_OW 2
47805: ST_TO_ADDR
// break ;
47806: GO 47810
// end ; end ;
47808: GO 47747
47810: POP
47811: POP
// end ; end ;
47812: GO 47595
47814: POP
47815: POP
// if result and not asc then
47816: LD_VAR 0 5
47820: IFFALSE 47829
47822: PUSH
47823: LD_VAR 0 3
47827: NOT
47828: AND
47829: IFFALSE 47846
// result := ReverseArray ( result ) ;
47831: LD_ADDR_VAR 0 5
47835: PUSH
47836: LD_VAR 0 5
47840: PPUSH
47841: CALL 75204 0 1
47845: ST_TO_ADDR
// tmp := [ ] ;
47846: LD_ADDR_VAR 0 8
47850: PUSH
47851: EMPTY
47852: ST_TO_ADDR
// if mode then
47853: LD_VAR 0 4
47857: IFFALSE 47921
// begin for i := 1 to result do
47859: LD_ADDR_VAR 0 6
47863: PUSH
47864: DOUBLE
47865: LD_INT 1
47867: DEC
47868: ST_TO_ADDR
47869: LD_VAR 0 5
47873: PUSH
47874: FOR_TO
47875: IFFALSE 47909
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47877: LD_ADDR_VAR 0 8
47881: PUSH
47882: LD_VAR 0 8
47886: PPUSH
47887: LD_VAR 0 5
47891: PUSH
47892: LD_VAR 0 6
47896: ARRAY
47897: PUSH
47898: LD_INT 1
47900: ARRAY
47901: PPUSH
47902: CALL 80114 0 2
47906: ST_TO_ADDR
47907: GO 47874
47909: POP
47910: POP
// result := tmp ;
47911: LD_ADDR_VAR 0 5
47915: PUSH
47916: LD_VAR 0 8
47920: ST_TO_ADDR
// end ; end ;
47921: LD_VAR 0 5
47925: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47926: LD_INT 0
47928: PPUSH
47929: PPUSH
47930: PPUSH
47931: PPUSH
// if not list then
47932: LD_VAR 0 3
47936: NOT
47937: IFFALSE 47941
// exit ;
47939: GO 48331
// result := [ ] ;
47941: LD_ADDR_VAR 0 6
47945: PUSH
47946: EMPTY
47947: ST_TO_ADDR
// for i in list do
47948: LD_ADDR_VAR 0 7
47952: PUSH
47953: LD_VAR 0 3
47957: PUSH
47958: FOR_IN
47959: IFFALSE 48161
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47961: LD_ADDR_VAR 0 9
47965: PUSH
47966: LD_VAR 0 7
47970: PPUSH
47971: LD_VAR 0 1
47975: PPUSH
47976: LD_VAR 0 2
47980: PPUSH
47981: CALL_OW 297
47985: ST_TO_ADDR
// if not result then
47986: LD_VAR 0 6
47990: NOT
47991: IFFALSE 48017
// result := [ [ i , tmp ] ] else
47993: LD_ADDR_VAR 0 6
47997: PUSH
47998: LD_VAR 0 7
48002: PUSH
48003: LD_VAR 0 9
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: EMPTY
48013: LIST
48014: ST_TO_ADDR
48015: GO 48159
// begin if result [ result ] [ 2 ] <= tmp then
48017: LD_VAR 0 6
48021: PUSH
48022: LD_VAR 0 6
48026: ARRAY
48027: PUSH
48028: LD_INT 2
48030: ARRAY
48031: PUSH
48032: LD_VAR 0 9
48036: LESSEQUAL
48037: IFFALSE 48079
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
48039: LD_ADDR_VAR 0 6
48043: PUSH
48044: LD_VAR 0 6
48048: PPUSH
48049: LD_VAR 0 6
48053: PUSH
48054: LD_INT 1
48056: PLUS
48057: PPUSH
48058: LD_VAR 0 7
48062: PUSH
48063: LD_VAR 0 9
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PPUSH
48072: CALL_OW 2
48076: ST_TO_ADDR
48077: GO 48159
// for j := 1 to result do
48079: LD_ADDR_VAR 0 8
48083: PUSH
48084: DOUBLE
48085: LD_INT 1
48087: DEC
48088: ST_TO_ADDR
48089: LD_VAR 0 6
48093: PUSH
48094: FOR_TO
48095: IFFALSE 48157
// begin if tmp < result [ j ] [ 2 ] then
48097: LD_VAR 0 9
48101: PUSH
48102: LD_VAR 0 6
48106: PUSH
48107: LD_VAR 0 8
48111: ARRAY
48112: PUSH
48113: LD_INT 2
48115: ARRAY
48116: LESS
48117: IFFALSE 48155
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48119: LD_ADDR_VAR 0 6
48123: PUSH
48124: LD_VAR 0 6
48128: PPUSH
48129: LD_VAR 0 8
48133: PPUSH
48134: LD_VAR 0 7
48138: PUSH
48139: LD_VAR 0 9
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PPUSH
48148: CALL_OW 2
48152: ST_TO_ADDR
// break ;
48153: GO 48157
// end ; end ;
48155: GO 48094
48157: POP
48158: POP
// end ; end ;
48159: GO 47958
48161: POP
48162: POP
// if result and not asc then
48163: LD_VAR 0 6
48167: IFFALSE 48176
48169: PUSH
48170: LD_VAR 0 4
48174: NOT
48175: AND
48176: IFFALSE 48251
// begin tmp := result ;
48178: LD_ADDR_VAR 0 9
48182: PUSH
48183: LD_VAR 0 6
48187: ST_TO_ADDR
// for i = tmp downto 1 do
48188: LD_ADDR_VAR 0 7
48192: PUSH
48193: DOUBLE
48194: LD_VAR 0 9
48198: INC
48199: ST_TO_ADDR
48200: LD_INT 1
48202: PUSH
48203: FOR_DOWNTO
48204: IFFALSE 48249
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48206: LD_ADDR_VAR 0 6
48210: PUSH
48211: LD_VAR 0 6
48215: PPUSH
48216: LD_VAR 0 9
48220: PUSH
48221: LD_VAR 0 7
48225: MINUS
48226: PUSH
48227: LD_INT 1
48229: PLUS
48230: PPUSH
48231: LD_VAR 0 9
48235: PUSH
48236: LD_VAR 0 7
48240: ARRAY
48241: PPUSH
48242: CALL_OW 1
48246: ST_TO_ADDR
48247: GO 48203
48249: POP
48250: POP
// end ; tmp := [ ] ;
48251: LD_ADDR_VAR 0 9
48255: PUSH
48256: EMPTY
48257: ST_TO_ADDR
// if mode then
48258: LD_VAR 0 5
48262: IFFALSE 48331
// begin for i = 1 to result do
48264: LD_ADDR_VAR 0 7
48268: PUSH
48269: DOUBLE
48270: LD_INT 1
48272: DEC
48273: ST_TO_ADDR
48274: LD_VAR 0 6
48278: PUSH
48279: FOR_TO
48280: IFFALSE 48319
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48282: LD_ADDR_VAR 0 9
48286: PUSH
48287: LD_VAR 0 9
48291: PPUSH
48292: LD_VAR 0 7
48296: PPUSH
48297: LD_VAR 0 6
48301: PUSH
48302: LD_VAR 0 7
48306: ARRAY
48307: PUSH
48308: LD_INT 1
48310: ARRAY
48311: PPUSH
48312: CALL_OW 1
48316: ST_TO_ADDR
48317: GO 48279
48319: POP
48320: POP
// result := tmp ;
48321: LD_ADDR_VAR 0 6
48325: PUSH
48326: LD_VAR 0 9
48330: ST_TO_ADDR
// end ; end ;
48331: LD_VAR 0 6
48335: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48336: LD_INT 0
48338: PPUSH
48339: PPUSH
48340: PPUSH
48341: PPUSH
48342: PPUSH
48343: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48344: LD_ADDR_VAR 0 5
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: EMPTY
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: ST_TO_ADDR
// if not x or not y then
48366: LD_VAR 0 2
48370: NOT
48371: IFTRUE 48380
48373: PUSH
48374: LD_VAR 0 3
48378: NOT
48379: OR
48380: IFFALSE 48384
// exit ;
48382: GO 50040
// if not range then
48384: LD_VAR 0 4
48388: NOT
48389: IFFALSE 48399
// range := 10 ;
48391: LD_ADDR_VAR 0 4
48395: PUSH
48396: LD_INT 10
48398: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48399: LD_ADDR_VAR 0 8
48403: PUSH
48404: LD_INT 81
48406: PUSH
48407: LD_VAR 0 1
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 92
48418: PUSH
48419: LD_VAR 0 2
48423: PUSH
48424: LD_VAR 0 3
48428: PUSH
48429: LD_VAR 0 4
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 3
48442: PUSH
48443: LD_INT 21
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: LIST
48461: PPUSH
48462: CALL_OW 69
48466: ST_TO_ADDR
// if not tmp then
48467: LD_VAR 0 8
48471: NOT
48472: IFFALSE 48476
// exit ;
48474: GO 50040
// for i in tmp do
48476: LD_ADDR_VAR 0 6
48480: PUSH
48481: LD_VAR 0 8
48485: PUSH
48486: FOR_IN
48487: IFFALSE 50015
// begin points := [ 0 , 0 , 0 ] ;
48489: LD_ADDR_VAR 0 9
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: LIST
48507: ST_TO_ADDR
// bpoints := 1 ;
48508: LD_ADDR_VAR 0 10
48512: PUSH
48513: LD_INT 1
48515: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48516: LD_VAR 0 6
48520: PPUSH
48521: CALL_OW 247
48525: PUSH
48526: LD_INT 1
48528: DOUBLE
48529: EQUAL
48530: IFTRUE 48534
48532: GO 49116
48534: POP
// begin if GetClass ( i ) = 1 then
48535: LD_VAR 0 6
48539: PPUSH
48540: CALL_OW 257
48544: PUSH
48545: LD_INT 1
48547: EQUAL
48548: IFFALSE 48569
// points := [ 10 , 5 , 3 ] ;
48550: LD_ADDR_VAR 0 9
48554: PUSH
48555: LD_INT 10
48557: PUSH
48558: LD_INT 5
48560: PUSH
48561: LD_INT 3
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: LIST
48568: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48569: LD_VAR 0 6
48573: PPUSH
48574: CALL_OW 257
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: LD_INT 3
48584: PUSH
48585: LD_INT 4
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: LIST
48592: IN
48593: IFFALSE 48614
// points := [ 3 , 2 , 1 ] ;
48595: LD_ADDR_VAR 0 9
48599: PUSH
48600: LD_INT 3
48602: PUSH
48603: LD_INT 2
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: LIST
48613: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48614: LD_VAR 0 6
48618: PPUSH
48619: CALL_OW 257
48623: PUSH
48624: LD_INT 5
48626: EQUAL
48627: IFFALSE 48648
// points := [ 130 , 5 , 2 ] ;
48629: LD_ADDR_VAR 0 9
48633: PUSH
48634: LD_INT 130
48636: PUSH
48637: LD_INT 5
48639: PUSH
48640: LD_INT 2
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: LIST
48647: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48648: LD_VAR 0 6
48652: PPUSH
48653: CALL_OW 257
48657: PUSH
48658: LD_INT 8
48660: EQUAL
48661: IFFALSE 48682
// points := [ 35 , 35 , 30 ] ;
48663: LD_ADDR_VAR 0 9
48667: PUSH
48668: LD_INT 35
48670: PUSH
48671: LD_INT 35
48673: PUSH
48674: LD_INT 30
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: LIST
48681: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48682: LD_VAR 0 6
48686: PPUSH
48687: CALL_OW 257
48691: PUSH
48692: LD_INT 9
48694: EQUAL
48695: IFFALSE 48716
// points := [ 20 , 55 , 40 ] ;
48697: LD_ADDR_VAR 0 9
48701: PUSH
48702: LD_INT 20
48704: PUSH
48705: LD_INT 55
48707: PUSH
48708: LD_INT 40
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: LIST
48715: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48716: LD_VAR 0 6
48720: PPUSH
48721: CALL_OW 257
48725: PUSH
48726: LD_INT 12
48728: PUSH
48729: LD_INT 16
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: IN
48736: IFFALSE 48757
// points := [ 5 , 3 , 2 ] ;
48738: LD_ADDR_VAR 0 9
48742: PUSH
48743: LD_INT 5
48745: PUSH
48746: LD_INT 3
48748: PUSH
48749: LD_INT 2
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: LIST
48756: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48757: LD_VAR 0 6
48761: PPUSH
48762: CALL_OW 257
48766: PUSH
48767: LD_INT 17
48769: EQUAL
48770: IFFALSE 48791
// points := [ 100 , 50 , 75 ] ;
48772: LD_ADDR_VAR 0 9
48776: PUSH
48777: LD_INT 100
48779: PUSH
48780: LD_INT 50
48782: PUSH
48783: LD_INT 75
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: LIST
48790: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48791: LD_VAR 0 6
48795: PPUSH
48796: CALL_OW 257
48800: PUSH
48801: LD_INT 15
48803: EQUAL
48804: IFFALSE 48825
// points := [ 10 , 5 , 3 ] ;
48806: LD_ADDR_VAR 0 9
48810: PUSH
48811: LD_INT 10
48813: PUSH
48814: LD_INT 5
48816: PUSH
48817: LD_INT 3
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: LIST
48824: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48825: LD_VAR 0 6
48829: PPUSH
48830: CALL_OW 257
48834: PUSH
48835: LD_INT 14
48837: EQUAL
48838: IFFALSE 48859
// points := [ 10 , 0 , 0 ] ;
48840: LD_ADDR_VAR 0 9
48844: PUSH
48845: LD_INT 10
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: LIST
48858: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48859: LD_VAR 0 6
48863: PPUSH
48864: CALL_OW 257
48868: PUSH
48869: LD_INT 11
48871: EQUAL
48872: IFFALSE 48893
// points := [ 30 , 10 , 5 ] ;
48874: LD_ADDR_VAR 0 9
48878: PUSH
48879: LD_INT 30
48881: PUSH
48882: LD_INT 10
48884: PUSH
48885: LD_INT 5
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: LIST
48892: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48893: LD_VAR 0 1
48897: PPUSH
48898: LD_INT 5
48900: PPUSH
48901: CALL_OW 321
48905: PUSH
48906: LD_INT 2
48908: EQUAL
48909: IFFALSE 48926
// bpoints := bpoints * 1.8 ;
48911: LD_ADDR_VAR 0 10
48915: PUSH
48916: LD_VAR 0 10
48920: PUSH
48921: LD_REAL  1.80000000000000E+0000
48924: MUL
48925: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48926: LD_VAR 0 6
48930: PPUSH
48931: CALL_OW 257
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: LD_INT 3
48944: PUSH
48945: LD_INT 4
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: IN
48954: IFFALSE 48974
48956: PUSH
48957: LD_VAR 0 1
48961: PPUSH
48962: LD_INT 51
48964: PPUSH
48965: CALL_OW 321
48969: PUSH
48970: LD_INT 2
48972: EQUAL
48973: AND
48974: IFFALSE 48991
// bpoints := bpoints * 1.2 ;
48976: LD_ADDR_VAR 0 10
48980: PUSH
48981: LD_VAR 0 10
48985: PUSH
48986: LD_REAL  1.20000000000000E+0000
48989: MUL
48990: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48991: LD_VAR 0 6
48995: PPUSH
48996: CALL_OW 257
49000: PUSH
49001: LD_INT 5
49003: PUSH
49004: LD_INT 7
49006: PUSH
49007: LD_INT 9
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: LIST
49014: IN
49015: IFFALSE 49035
49017: PUSH
49018: LD_VAR 0 1
49022: PPUSH
49023: LD_INT 52
49025: PPUSH
49026: CALL_OW 321
49030: PUSH
49031: LD_INT 2
49033: EQUAL
49034: AND
49035: IFFALSE 49052
// bpoints := bpoints * 1.5 ;
49037: LD_ADDR_VAR 0 10
49041: PUSH
49042: LD_VAR 0 10
49046: PUSH
49047: LD_REAL  1.50000000000000E+0000
49050: MUL
49051: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49052: LD_VAR 0 1
49056: PPUSH
49057: LD_INT 66
49059: PPUSH
49060: CALL_OW 321
49064: PUSH
49065: LD_INT 2
49067: EQUAL
49068: IFFALSE 49085
// bpoints := bpoints * 1.1 ;
49070: LD_ADDR_VAR 0 10
49074: PUSH
49075: LD_VAR 0 10
49079: PUSH
49080: LD_REAL  1.10000000000000E+0000
49083: MUL
49084: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49085: LD_ADDR_VAR 0 10
49089: PUSH
49090: LD_VAR 0 10
49094: PUSH
49095: LD_VAR 0 6
49099: PPUSH
49100: LD_INT 1
49102: PPUSH
49103: CALL_OW 259
49107: PUSH
49108: LD_REAL  1.15000000000000E+0000
49111: MUL
49112: MUL
49113: ST_TO_ADDR
// end ; unit_vehicle :
49114: GO 49944
49116: LD_INT 2
49118: DOUBLE
49119: EQUAL
49120: IFTRUE 49124
49122: GO 49932
49124: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49125: LD_VAR 0 6
49129: PPUSH
49130: CALL_OW 264
49134: PUSH
49135: LD_INT 2
49137: PUSH
49138: LD_INT 42
49140: PUSH
49141: LD_INT 24
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: LIST
49148: IN
49149: IFFALSE 49170
// points := [ 25 , 5 , 3 ] ;
49151: LD_ADDR_VAR 0 9
49155: PUSH
49156: LD_INT 25
49158: PUSH
49159: LD_INT 5
49161: PUSH
49162: LD_INT 3
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: LIST
49169: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49170: LD_VAR 0 6
49174: PPUSH
49175: CALL_OW 264
49179: PUSH
49180: LD_INT 4
49182: PUSH
49183: LD_INT 43
49185: PUSH
49186: LD_INT 25
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: LIST
49193: IN
49194: IFFALSE 49215
// points := [ 40 , 15 , 5 ] ;
49196: LD_ADDR_VAR 0 9
49200: PUSH
49201: LD_INT 40
49203: PUSH
49204: LD_INT 15
49206: PUSH
49207: LD_INT 5
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: LIST
49214: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49215: LD_VAR 0 6
49219: PPUSH
49220: CALL_OW 264
49224: PUSH
49225: LD_INT 3
49227: PUSH
49228: LD_INT 23
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: IN
49235: IFFALSE 49256
// points := [ 7 , 25 , 8 ] ;
49237: LD_ADDR_VAR 0 9
49241: PUSH
49242: LD_INT 7
49244: PUSH
49245: LD_INT 25
49247: PUSH
49248: LD_INT 8
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: LIST
49255: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49256: LD_VAR 0 6
49260: PPUSH
49261: CALL_OW 264
49265: PUSH
49266: LD_INT 5
49268: PUSH
49269: LD_INT 27
49271: PUSH
49272: LD_INT 44
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: LIST
49279: IN
49280: IFFALSE 49301
// points := [ 14 , 50 , 16 ] ;
49282: LD_ADDR_VAR 0 9
49286: PUSH
49287: LD_INT 14
49289: PUSH
49290: LD_INT 50
49292: PUSH
49293: LD_INT 16
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: LIST
49300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49301: LD_VAR 0 6
49305: PPUSH
49306: CALL_OW 264
49310: PUSH
49311: LD_INT 6
49313: PUSH
49314: LD_INT 46
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: IN
49321: IFFALSE 49342
// points := [ 32 , 120 , 70 ] ;
49323: LD_ADDR_VAR 0 9
49327: PUSH
49328: LD_INT 32
49330: PUSH
49331: LD_INT 120
49333: PUSH
49334: LD_INT 70
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: LIST
49341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49342: LD_VAR 0 6
49346: PPUSH
49347: CALL_OW 264
49351: PUSH
49352: LD_INT 7
49354: PUSH
49355: LD_INT 28
49357: PUSH
49358: LD_INT 45
49360: PUSH
49361: LD_INT 92
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: IN
49370: IFFALSE 49391
// points := [ 35 , 20 , 45 ] ;
49372: LD_ADDR_VAR 0 9
49376: PUSH
49377: LD_INT 35
49379: PUSH
49380: LD_INT 20
49382: PUSH
49383: LD_INT 45
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: LIST
49390: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49391: LD_VAR 0 6
49395: PPUSH
49396: CALL_OW 264
49400: PUSH
49401: LD_INT 47
49403: PUSH
49404: EMPTY
49405: LIST
49406: IN
49407: IFFALSE 49428
// points := [ 67 , 45 , 75 ] ;
49409: LD_ADDR_VAR 0 9
49413: PUSH
49414: LD_INT 67
49416: PUSH
49417: LD_INT 45
49419: PUSH
49420: LD_INT 75
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: LIST
49427: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49428: LD_VAR 0 6
49432: PPUSH
49433: CALL_OW 264
49437: PUSH
49438: LD_INT 26
49440: PUSH
49441: EMPTY
49442: LIST
49443: IN
49444: IFFALSE 49465
// points := [ 120 , 30 , 80 ] ;
49446: LD_ADDR_VAR 0 9
49450: PUSH
49451: LD_INT 120
49453: PUSH
49454: LD_INT 30
49456: PUSH
49457: LD_INT 80
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: LIST
49464: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49465: LD_VAR 0 6
49469: PPUSH
49470: CALL_OW 264
49474: PUSH
49475: LD_INT 22
49477: PUSH
49478: EMPTY
49479: LIST
49480: IN
49481: IFFALSE 49502
// points := [ 40 , 1 , 1 ] ;
49483: LD_ADDR_VAR 0 9
49487: PUSH
49488: LD_INT 40
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: LIST
49501: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49502: LD_VAR 0 6
49506: PPUSH
49507: CALL_OW 264
49511: PUSH
49512: LD_INT 29
49514: PUSH
49515: EMPTY
49516: LIST
49517: IN
49518: IFFALSE 49539
// points := [ 70 , 200 , 400 ] ;
49520: LD_ADDR_VAR 0 9
49524: PUSH
49525: LD_INT 70
49527: PUSH
49528: LD_INT 200
49530: PUSH
49531: LD_INT 400
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: LIST
49538: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49539: LD_VAR 0 6
49543: PPUSH
49544: CALL_OW 264
49548: PUSH
49549: LD_INT 14
49551: PUSH
49552: LD_INT 53
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: IN
49559: IFFALSE 49580
// points := [ 40 , 10 , 20 ] ;
49561: LD_ADDR_VAR 0 9
49565: PUSH
49566: LD_INT 40
49568: PUSH
49569: LD_INT 10
49571: PUSH
49572: LD_INT 20
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: LIST
49579: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49580: LD_VAR 0 6
49584: PPUSH
49585: CALL_OW 264
49589: PUSH
49590: LD_INT 9
49592: PUSH
49593: EMPTY
49594: LIST
49595: IN
49596: IFFALSE 49617
// points := [ 5 , 70 , 20 ] ;
49598: LD_ADDR_VAR 0 9
49602: PUSH
49603: LD_INT 5
49605: PUSH
49606: LD_INT 70
49608: PUSH
49609: LD_INT 20
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: LIST
49616: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49617: LD_VAR 0 6
49621: PPUSH
49622: CALL_OW 264
49626: PUSH
49627: LD_INT 10
49629: PUSH
49630: EMPTY
49631: LIST
49632: IN
49633: IFFALSE 49654
// points := [ 35 , 110 , 70 ] ;
49635: LD_ADDR_VAR 0 9
49639: PUSH
49640: LD_INT 35
49642: PUSH
49643: LD_INT 110
49645: PUSH
49646: LD_INT 70
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: LIST
49653: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49654: LD_VAR 0 6
49658: PPUSH
49659: CALL_OW 265
49663: PUSH
49664: LD_INT 25
49666: EQUAL
49667: IFFALSE 49688
// points := [ 80 , 65 , 100 ] ;
49669: LD_ADDR_VAR 0 9
49673: PUSH
49674: LD_INT 80
49676: PUSH
49677: LD_INT 65
49679: PUSH
49680: LD_INT 100
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: LIST
49687: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49688: LD_VAR 0 6
49692: PPUSH
49693: CALL_OW 263
49697: PUSH
49698: LD_INT 1
49700: EQUAL
49701: IFFALSE 49736
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49703: LD_ADDR_VAR 0 10
49707: PUSH
49708: LD_VAR 0 10
49712: PUSH
49713: LD_VAR 0 6
49717: PPUSH
49718: CALL_OW 311
49722: PPUSH
49723: LD_INT 3
49725: PPUSH
49726: CALL_OW 259
49730: PUSH
49731: LD_INT 4
49733: MUL
49734: MUL
49735: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49736: LD_VAR 0 6
49740: PPUSH
49741: CALL_OW 263
49745: PUSH
49746: LD_INT 2
49748: EQUAL
49749: IFFALSE 49800
// begin j := IsControledBy ( i ) ;
49751: LD_ADDR_VAR 0 7
49755: PUSH
49756: LD_VAR 0 6
49760: PPUSH
49761: CALL_OW 312
49765: ST_TO_ADDR
// if j then
49766: LD_VAR 0 7
49770: IFFALSE 49800
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49772: LD_ADDR_VAR 0 10
49776: PUSH
49777: LD_VAR 0 10
49781: PUSH
49782: LD_VAR 0 7
49786: PPUSH
49787: LD_INT 3
49789: PPUSH
49790: CALL_OW 259
49794: PUSH
49795: LD_INT 3
49797: MUL
49798: MUL
49799: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49800: LD_VAR 0 6
49804: PPUSH
49805: CALL_OW 264
49809: PUSH
49810: LD_INT 5
49812: PUSH
49813: LD_INT 6
49815: PUSH
49816: LD_INT 46
49818: PUSH
49819: LD_INT 44
49821: PUSH
49822: LD_INT 47
49824: PUSH
49825: LD_INT 45
49827: PUSH
49828: LD_INT 28
49830: PUSH
49831: LD_INT 7
49833: PUSH
49834: LD_INT 27
49836: PUSH
49837: LD_INT 29
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: IN
49852: IFFALSE 49872
49854: PUSH
49855: LD_VAR 0 1
49859: PPUSH
49860: LD_INT 52
49862: PPUSH
49863: CALL_OW 321
49867: PUSH
49868: LD_INT 2
49870: EQUAL
49871: AND
49872: IFFALSE 49889
// bpoints := bpoints * 1.2 ;
49874: LD_ADDR_VAR 0 10
49878: PUSH
49879: LD_VAR 0 10
49883: PUSH
49884: LD_REAL  1.20000000000000E+0000
49887: MUL
49888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49889: LD_VAR 0 6
49893: PPUSH
49894: CALL_OW 264
49898: PUSH
49899: LD_INT 6
49901: PUSH
49902: LD_INT 46
49904: PUSH
49905: LD_INT 47
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: LIST
49912: IN
49913: IFFALSE 49930
// bpoints := bpoints * 1.2 ;
49915: LD_ADDR_VAR 0 10
49919: PUSH
49920: LD_VAR 0 10
49924: PUSH
49925: LD_REAL  1.20000000000000E+0000
49928: MUL
49929: ST_TO_ADDR
// end ; unit_building :
49930: GO 49944
49932: LD_INT 3
49934: DOUBLE
49935: EQUAL
49936: IFTRUE 49940
49938: GO 49943
49940: POP
// ; end ;
49941: GO 49944
49943: POP
// for j = 1 to 3 do
49944: LD_ADDR_VAR 0 7
49948: PUSH
49949: DOUBLE
49950: LD_INT 1
49952: DEC
49953: ST_TO_ADDR
49954: LD_INT 3
49956: PUSH
49957: FOR_TO
49958: IFFALSE 50011
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49960: LD_ADDR_VAR 0 5
49964: PUSH
49965: LD_VAR 0 5
49969: PPUSH
49970: LD_VAR 0 7
49974: PPUSH
49975: LD_VAR 0 5
49979: PUSH
49980: LD_VAR 0 7
49984: ARRAY
49985: PUSH
49986: LD_VAR 0 9
49990: PUSH
49991: LD_VAR 0 7
49995: ARRAY
49996: PUSH
49997: LD_VAR 0 10
50001: MUL
50002: PLUS
50003: PPUSH
50004: CALL_OW 1
50008: ST_TO_ADDR
50009: GO 49957
50011: POP
50012: POP
// end ;
50013: GO 48486
50015: POP
50016: POP
// result := Replace ( result , 4 , tmp ) ;
50017: LD_ADDR_VAR 0 5
50021: PUSH
50022: LD_VAR 0 5
50026: PPUSH
50027: LD_INT 4
50029: PPUSH
50030: LD_VAR 0 8
50034: PPUSH
50035: CALL_OW 1
50039: ST_TO_ADDR
// end ;
50040: LD_VAR 0 5
50044: RET
// export function DangerAtRange ( unit , range ) ; begin
50045: LD_INT 0
50047: PPUSH
// if not unit then
50048: LD_VAR 0 1
50052: NOT
50053: IFFALSE 50057
// exit ;
50055: GO 50102
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50057: LD_ADDR_VAR 0 3
50061: PUSH
50062: LD_VAR 0 1
50066: PPUSH
50067: CALL_OW 255
50071: PPUSH
50072: LD_VAR 0 1
50076: PPUSH
50077: CALL_OW 250
50081: PPUSH
50082: LD_VAR 0 1
50086: PPUSH
50087: CALL_OW 251
50091: PPUSH
50092: LD_VAR 0 2
50096: PPUSH
50097: CALL 48336 0 4
50101: ST_TO_ADDR
// end ;
50102: LD_VAR 0 3
50106: RET
// export function DangerInArea ( side , area ) ; begin
50107: LD_INT 0
50109: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50110: LD_ADDR_VAR 0 3
50114: PUSH
50115: LD_VAR 0 2
50119: PPUSH
50120: LD_INT 81
50122: PUSH
50123: LD_VAR 0 1
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PPUSH
50132: CALL_OW 70
50136: ST_TO_ADDR
// end ;
50137: LD_VAR 0 3
50141: RET
// export function IsExtension ( b ) ; begin
50142: LD_INT 0
50144: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50145: LD_ADDR_VAR 0 2
50149: PUSH
50150: LD_VAR 0 1
50154: PUSH
50155: LD_INT 23
50157: PUSH
50158: LD_INT 20
50160: PUSH
50161: LD_INT 22
50163: PUSH
50164: LD_INT 17
50166: PUSH
50167: LD_INT 24
50169: PUSH
50170: LD_INT 21
50172: PUSH
50173: LD_INT 19
50175: PUSH
50176: LD_INT 16
50178: PUSH
50179: LD_INT 25
50181: PUSH
50182: LD_INT 18
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: IN
50197: ST_TO_ADDR
// end ;
50198: LD_VAR 0 2
50202: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50203: LD_INT 0
50205: PPUSH
50206: PPUSH
50207: PPUSH
// result := [ ] ;
50208: LD_ADDR_VAR 0 4
50212: PUSH
50213: EMPTY
50214: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50215: LD_ADDR_VAR 0 5
50219: PUSH
50220: LD_VAR 0 2
50224: PPUSH
50225: LD_INT 21
50227: PUSH
50228: LD_INT 3
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PPUSH
50235: CALL_OW 70
50239: ST_TO_ADDR
// if not tmp then
50240: LD_VAR 0 5
50244: NOT
50245: IFFALSE 50249
// exit ;
50247: GO 50313
// if checkLink then
50249: LD_VAR 0 3
50253: IFFALSE 50303
// begin for i in tmp do
50255: LD_ADDR_VAR 0 6
50259: PUSH
50260: LD_VAR 0 5
50264: PUSH
50265: FOR_IN
50266: IFFALSE 50301
// if GetBase ( i ) <> base then
50268: LD_VAR 0 6
50272: PPUSH
50273: CALL_OW 274
50277: PUSH
50278: LD_VAR 0 1
50282: NONEQUAL
50283: IFFALSE 50299
// ComLinkToBase ( base , i ) ;
50285: LD_VAR 0 1
50289: PPUSH
50290: LD_VAR 0 6
50294: PPUSH
50295: CALL_OW 169
50299: GO 50265
50301: POP
50302: POP
// end ; result := tmp ;
50303: LD_ADDR_VAR 0 4
50307: PUSH
50308: LD_VAR 0 5
50312: ST_TO_ADDR
// end ;
50313: LD_VAR 0 4
50317: RET
// export function ComComplete ( units , b ) ; var i ; begin
50318: LD_INT 0
50320: PPUSH
50321: PPUSH
// if not units then
50322: LD_VAR 0 1
50326: NOT
50327: IFFALSE 50331
// exit ;
50329: GO 50421
// for i in units do
50331: LD_ADDR_VAR 0 4
50335: PUSH
50336: LD_VAR 0 1
50340: PUSH
50341: FOR_IN
50342: IFFALSE 50419
// if BuildingStatus ( b ) = bs_build then
50344: LD_VAR 0 2
50348: PPUSH
50349: CALL_OW 461
50353: PUSH
50354: LD_INT 1
50356: EQUAL
50357: IFFALSE 50417
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50359: LD_VAR 0 4
50363: PPUSH
50364: LD_STRING h
50366: PUSH
50367: LD_VAR 0 2
50371: PPUSH
50372: CALL_OW 250
50376: PUSH
50377: LD_VAR 0 2
50381: PPUSH
50382: CALL_OW 251
50386: PUSH
50387: LD_VAR 0 2
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: PUSH
50410: EMPTY
50411: LIST
50412: PPUSH
50413: CALL_OW 446
50417: GO 50341
50419: POP
50420: POP
// end ;
50421: LD_VAR 0 3
50425: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50426: LD_INT 0
50428: PPUSH
50429: PPUSH
50430: PPUSH
50431: PPUSH
50432: PPUSH
50433: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50434: LD_VAR 0 1
50438: NOT
50439: IFTRUE 50456
50441: PUSH
50442: LD_VAR 0 1
50446: PPUSH
50447: CALL_OW 263
50451: PUSH
50452: LD_INT 2
50454: NONEQUAL
50455: OR
50456: IFFALSE 50460
// exit ;
50458: GO 50776
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50460: LD_ADDR_VAR 0 6
50464: PUSH
50465: LD_INT 22
50467: PUSH
50468: LD_VAR 0 1
50472: PPUSH
50473: CALL_OW 255
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: LD_INT 30
50487: PUSH
50488: LD_INT 36
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 34
50497: PUSH
50498: LD_INT 31
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: LIST
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PPUSH
50514: CALL_OW 69
50518: ST_TO_ADDR
// if not tmp then
50519: LD_VAR 0 6
50523: NOT
50524: IFFALSE 50528
// exit ;
50526: GO 50776
// result := [ ] ;
50528: LD_ADDR_VAR 0 2
50532: PUSH
50533: EMPTY
50534: ST_TO_ADDR
// for i in tmp do
50535: LD_ADDR_VAR 0 3
50539: PUSH
50540: LD_VAR 0 6
50544: PUSH
50545: FOR_IN
50546: IFFALSE 50617
// begin t := UnitsInside ( i ) ;
50548: LD_ADDR_VAR 0 4
50552: PUSH
50553: LD_VAR 0 3
50557: PPUSH
50558: CALL_OW 313
50562: ST_TO_ADDR
// if t then
50563: LD_VAR 0 4
50567: IFFALSE 50615
// for j in t do
50569: LD_ADDR_VAR 0 7
50573: PUSH
50574: LD_VAR 0 4
50578: PUSH
50579: FOR_IN
50580: IFFALSE 50613
// result := Replace ( result , result + 1 , j ) ;
50582: LD_ADDR_VAR 0 2
50586: PUSH
50587: LD_VAR 0 2
50591: PPUSH
50592: LD_VAR 0 2
50596: PUSH
50597: LD_INT 1
50599: PLUS
50600: PPUSH
50601: LD_VAR 0 7
50605: PPUSH
50606: CALL_OW 1
50610: ST_TO_ADDR
50611: GO 50579
50613: POP
50614: POP
// end ;
50615: GO 50545
50617: POP
50618: POP
// if not result then
50619: LD_VAR 0 2
50623: NOT
50624: IFFALSE 50628
// exit ;
50626: GO 50776
// mech := result [ 1 ] ;
50628: LD_ADDR_VAR 0 5
50632: PUSH
50633: LD_VAR 0 2
50637: PUSH
50638: LD_INT 1
50640: ARRAY
50641: ST_TO_ADDR
// if result > 1 then
50642: LD_VAR 0 2
50646: PUSH
50647: LD_INT 1
50649: GREATER
50650: IFFALSE 50762
// begin for i = 2 to result do
50652: LD_ADDR_VAR 0 3
50656: PUSH
50657: DOUBLE
50658: LD_INT 2
50660: DEC
50661: ST_TO_ADDR
50662: LD_VAR 0 2
50666: PUSH
50667: FOR_TO
50668: IFFALSE 50760
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50670: LD_ADDR_VAR 0 4
50674: PUSH
50675: LD_VAR 0 2
50679: PUSH
50680: LD_VAR 0 3
50684: ARRAY
50685: PPUSH
50686: LD_INT 3
50688: PPUSH
50689: CALL_OW 259
50693: PUSH
50694: LD_VAR 0 2
50698: PUSH
50699: LD_VAR 0 3
50703: ARRAY
50704: PPUSH
50705: CALL_OW 432
50709: MINUS
50710: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50711: LD_VAR 0 4
50715: PUSH
50716: LD_VAR 0 5
50720: PPUSH
50721: LD_INT 3
50723: PPUSH
50724: CALL_OW 259
50728: PUSH
50729: LD_VAR 0 5
50733: PPUSH
50734: CALL_OW 432
50738: MINUS
50739: GREATEREQUAL
50740: IFFALSE 50758
// mech := result [ i ] ;
50742: LD_ADDR_VAR 0 5
50746: PUSH
50747: LD_VAR 0 2
50751: PUSH
50752: LD_VAR 0 3
50756: ARRAY
50757: ST_TO_ADDR
// end ;
50758: GO 50667
50760: POP
50761: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50762: LD_VAR 0 1
50766: PPUSH
50767: LD_VAR 0 5
50771: PPUSH
50772: CALL_OW 135
// end ;
50776: LD_VAR 0 2
50780: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50781: LD_INT 0
50783: PPUSH
50784: PPUSH
50785: PPUSH
50786: PPUSH
50787: PPUSH
50788: PPUSH
50789: PPUSH
50790: PPUSH
50791: PPUSH
50792: PPUSH
50793: PPUSH
50794: PPUSH
50795: PPUSH
// result := [ ] ;
50796: LD_ADDR_VAR 0 7
50800: PUSH
50801: EMPTY
50802: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50803: LD_VAR 0 1
50807: PPUSH
50808: CALL_OW 266
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: IN
50823: NOT
50824: IFFALSE 50828
// exit ;
50826: GO 52468
// if name then
50828: LD_VAR 0 3
50832: IFFALSE 50848
// SetBName ( base_dep , name ) ;
50834: LD_VAR 0 1
50838: PPUSH
50839: LD_VAR 0 3
50843: PPUSH
50844: CALL_OW 500
// base := GetBase ( base_dep ) ;
50848: LD_ADDR_VAR 0 15
50852: PUSH
50853: LD_VAR 0 1
50857: PPUSH
50858: CALL_OW 274
50862: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50863: LD_ADDR_VAR 0 16
50867: PUSH
50868: LD_VAR 0 1
50872: PPUSH
50873: CALL_OW 255
50877: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50878: LD_ADDR_VAR 0 17
50882: PUSH
50883: LD_VAR 0 1
50887: PPUSH
50888: CALL_OW 248
50892: ST_TO_ADDR
// if sources then
50893: LD_VAR 0 5
50897: IFFALSE 50944
// for i = 1 to 3 do
50899: LD_ADDR_VAR 0 8
50903: PUSH
50904: DOUBLE
50905: LD_INT 1
50907: DEC
50908: ST_TO_ADDR
50909: LD_INT 3
50911: PUSH
50912: FOR_TO
50913: IFFALSE 50942
// AddResourceType ( base , i , sources [ i ] ) ;
50915: LD_VAR 0 15
50919: PPUSH
50920: LD_VAR 0 8
50924: PPUSH
50925: LD_VAR 0 5
50929: PUSH
50930: LD_VAR 0 8
50934: ARRAY
50935: PPUSH
50936: CALL_OW 276
50940: GO 50912
50942: POP
50943: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50944: LD_ADDR_VAR 0 18
50948: PUSH
50949: LD_VAR 0 15
50953: PPUSH
50954: LD_VAR 0 2
50958: PPUSH
50959: LD_INT 1
50961: PPUSH
50962: CALL 50203 0 3
50966: ST_TO_ADDR
// InitHc ;
50967: CALL_OW 19
// InitUc ;
50971: CALL_OW 18
// uc_side := side ;
50975: LD_ADDR_OWVAR 20
50979: PUSH
50980: LD_VAR 0 16
50984: ST_TO_ADDR
// uc_nation := nation ;
50985: LD_ADDR_OWVAR 21
50989: PUSH
50990: LD_VAR 0 17
50994: ST_TO_ADDR
// if buildings then
50995: LD_VAR 0 18
50999: IFFALSE 52327
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
51001: LD_ADDR_VAR 0 19
51005: PUSH
51006: LD_VAR 0 18
51010: PPUSH
51011: LD_INT 2
51013: PUSH
51014: LD_INT 30
51016: PUSH
51017: LD_INT 29
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 30
51026: PUSH
51027: LD_INT 30
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: LIST
51038: PPUSH
51039: CALL_OW 72
51043: ST_TO_ADDR
// if tmp then
51044: LD_VAR 0 19
51048: IFFALSE 51096
// for i in tmp do
51050: LD_ADDR_VAR 0 8
51054: PUSH
51055: LD_VAR 0 19
51059: PUSH
51060: FOR_IN
51061: IFFALSE 51094
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51063: LD_VAR 0 8
51067: PPUSH
51068: CALL_OW 250
51072: PPUSH
51073: LD_VAR 0 8
51077: PPUSH
51078: CALL_OW 251
51082: PPUSH
51083: LD_VAR 0 16
51087: PPUSH
51088: CALL_OW 441
51092: GO 51060
51094: POP
51095: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51096: LD_VAR 0 18
51100: PPUSH
51101: LD_INT 2
51103: PUSH
51104: LD_INT 30
51106: PUSH
51107: LD_INT 32
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 30
51116: PUSH
51117: LD_INT 33
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: LIST
51128: PPUSH
51129: CALL_OW 72
51133: IFFALSE 51221
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51135: LD_ADDR_VAR 0 8
51139: PUSH
51140: LD_VAR 0 18
51144: PPUSH
51145: LD_INT 2
51147: PUSH
51148: LD_INT 30
51150: PUSH
51151: LD_INT 32
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 30
51160: PUSH
51161: LD_INT 33
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: LIST
51172: PPUSH
51173: CALL_OW 72
51177: PUSH
51178: FOR_IN
51179: IFFALSE 51219
// begin if not GetBWeapon ( i ) then
51181: LD_VAR 0 8
51185: PPUSH
51186: CALL_OW 269
51190: NOT
51191: IFFALSE 51217
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51193: LD_VAR 0 8
51197: PPUSH
51198: LD_VAR 0 8
51202: PPUSH
51203: LD_VAR 0 2
51207: PPUSH
51208: CALL 52473 0 2
51212: PPUSH
51213: CALL_OW 431
// end ;
51217: GO 51178
51219: POP
51220: POP
// end ; for i = 1 to personel do
51221: LD_ADDR_VAR 0 8
51225: PUSH
51226: DOUBLE
51227: LD_INT 1
51229: DEC
51230: ST_TO_ADDR
51231: LD_VAR 0 6
51235: PUSH
51236: FOR_TO
51237: IFFALSE 52307
// begin if i > 4 then
51239: LD_VAR 0 8
51243: PUSH
51244: LD_INT 4
51246: GREATER
51247: IFFALSE 51251
// break ;
51249: GO 52307
// case i of 1 :
51251: LD_VAR 0 8
51255: PUSH
51256: LD_INT 1
51258: DOUBLE
51259: EQUAL
51260: IFTRUE 51264
51262: GO 51344
51264: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51265: LD_ADDR_VAR 0 12
51269: PUSH
51270: LD_VAR 0 18
51274: PPUSH
51275: LD_INT 22
51277: PUSH
51278: LD_VAR 0 16
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 58
51289: PUSH
51290: EMPTY
51291: LIST
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: LD_INT 30
51298: PUSH
51299: LD_INT 32
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 30
51308: PUSH
51309: LD_INT 4
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 30
51318: PUSH
51319: LD_INT 5
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: LIST
51336: PPUSH
51337: CALL_OW 72
51341: ST_TO_ADDR
51342: GO 51566
51344: LD_INT 2
51346: DOUBLE
51347: EQUAL
51348: IFTRUE 51352
51350: GO 51414
51352: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51353: LD_ADDR_VAR 0 12
51357: PUSH
51358: LD_VAR 0 18
51362: PPUSH
51363: LD_INT 22
51365: PUSH
51366: LD_VAR 0 16
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 2
51377: PUSH
51378: LD_INT 30
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 30
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: LIST
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PPUSH
51407: CALL_OW 72
51411: ST_TO_ADDR
51412: GO 51566
51414: LD_INT 3
51416: DOUBLE
51417: EQUAL
51418: IFTRUE 51422
51420: GO 51484
51422: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51423: LD_ADDR_VAR 0 12
51427: PUSH
51428: LD_VAR 0 18
51432: PPUSH
51433: LD_INT 22
51435: PUSH
51436: LD_VAR 0 16
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: LD_INT 30
51450: PUSH
51451: LD_INT 2
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 30
51460: PUSH
51461: LD_INT 3
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: LIST
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PPUSH
51477: CALL_OW 72
51481: ST_TO_ADDR
51482: GO 51566
51484: LD_INT 4
51486: DOUBLE
51487: EQUAL
51488: IFTRUE 51492
51490: GO 51565
51492: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51493: LD_ADDR_VAR 0 12
51497: PUSH
51498: LD_VAR 0 18
51502: PPUSH
51503: LD_INT 22
51505: PUSH
51506: LD_VAR 0 16
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: LD_INT 30
51520: PUSH
51521: LD_INT 6
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 30
51530: PUSH
51531: LD_INT 7
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 30
51540: PUSH
51541: LD_INT 8
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PPUSH
51558: CALL_OW 72
51562: ST_TO_ADDR
51563: GO 51566
51565: POP
// if i = 1 then
51566: LD_VAR 0 8
51570: PUSH
51571: LD_INT 1
51573: EQUAL
51574: IFFALSE 51685
// begin tmp := [ ] ;
51576: LD_ADDR_VAR 0 19
51580: PUSH
51581: EMPTY
51582: ST_TO_ADDR
// for j in f do
51583: LD_ADDR_VAR 0 9
51587: PUSH
51588: LD_VAR 0 12
51592: PUSH
51593: FOR_IN
51594: IFFALSE 51667
// if GetBType ( j ) = b_bunker then
51596: LD_VAR 0 9
51600: PPUSH
51601: CALL_OW 266
51605: PUSH
51606: LD_INT 32
51608: EQUAL
51609: IFFALSE 51636
// tmp := Insert ( tmp , 1 , j ) else
51611: LD_ADDR_VAR 0 19
51615: PUSH
51616: LD_VAR 0 19
51620: PPUSH
51621: LD_INT 1
51623: PPUSH
51624: LD_VAR 0 9
51628: PPUSH
51629: CALL_OW 2
51633: ST_TO_ADDR
51634: GO 51665
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51636: LD_ADDR_VAR 0 19
51640: PUSH
51641: LD_VAR 0 19
51645: PPUSH
51646: LD_VAR 0 19
51650: PUSH
51651: LD_INT 1
51653: PLUS
51654: PPUSH
51655: LD_VAR 0 9
51659: PPUSH
51660: CALL_OW 2
51664: ST_TO_ADDR
51665: GO 51593
51667: POP
51668: POP
// if tmp then
51669: LD_VAR 0 19
51673: IFFALSE 51685
// f := tmp ;
51675: LD_ADDR_VAR 0 12
51679: PUSH
51680: LD_VAR 0 19
51684: ST_TO_ADDR
// end ; x := personel [ i ] ;
51685: LD_ADDR_VAR 0 13
51689: PUSH
51690: LD_VAR 0 6
51694: PUSH
51695: LD_VAR 0 8
51699: ARRAY
51700: ST_TO_ADDR
// if x = - 1 then
51701: LD_VAR 0 13
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: EQUAL
51710: IFFALSE 51921
// begin for j in f do
51712: LD_ADDR_VAR 0 9
51716: PUSH
51717: LD_VAR 0 12
51721: PUSH
51722: FOR_IN
51723: IFFALSE 51917
// repeat InitHc ;
51725: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51729: LD_VAR 0 9
51733: PPUSH
51734: CALL_OW 266
51738: PUSH
51739: LD_INT 5
51741: EQUAL
51742: IFFALSE 51812
// begin if UnitsInside ( j ) < 3 then
51744: LD_VAR 0 9
51748: PPUSH
51749: CALL_OW 313
51753: PUSH
51754: LD_INT 3
51756: LESS
51757: IFFALSE 51793
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51759: LD_INT 0
51761: PPUSH
51762: LD_INT 5
51764: PUSH
51765: LD_INT 8
51767: PUSH
51768: LD_INT 9
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: LIST
51775: PUSH
51776: LD_VAR 0 17
51780: ARRAY
51781: PPUSH
51782: LD_VAR 0 4
51786: PPUSH
51787: CALL_OW 380
51791: GO 51810
// PrepareHuman ( false , i , skill ) ;
51793: LD_INT 0
51795: PPUSH
51796: LD_VAR 0 8
51800: PPUSH
51801: LD_VAR 0 4
51805: PPUSH
51806: CALL_OW 380
// end else
51810: GO 51829
// PrepareHuman ( false , i , skill ) ;
51812: LD_INT 0
51814: PPUSH
51815: LD_VAR 0 8
51819: PPUSH
51820: LD_VAR 0 4
51824: PPUSH
51825: CALL_OW 380
// un := CreateHuman ;
51829: LD_ADDR_VAR 0 14
51833: PUSH
51834: CALL_OW 44
51838: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51839: LD_ADDR_VAR 0 7
51843: PUSH
51844: LD_VAR 0 7
51848: PPUSH
51849: LD_INT 1
51851: PPUSH
51852: LD_VAR 0 14
51856: PPUSH
51857: CALL_OW 2
51861: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51862: LD_VAR 0 14
51866: PPUSH
51867: LD_VAR 0 9
51871: PPUSH
51872: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51876: LD_VAR 0 9
51880: PPUSH
51881: CALL_OW 313
51885: PUSH
51886: LD_INT 6
51888: EQUAL
51889: IFTRUE 51913
51891: PUSH
51892: LD_VAR 0 9
51896: PPUSH
51897: CALL_OW 266
51901: PUSH
51902: LD_INT 32
51904: PUSH
51905: LD_INT 31
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: IN
51912: OR
51913: IFFALSE 51725
51915: GO 51722
51917: POP
51918: POP
// end else
51919: GO 52305
// for j = 1 to x do
51921: LD_ADDR_VAR 0 9
51925: PUSH
51926: DOUBLE
51927: LD_INT 1
51929: DEC
51930: ST_TO_ADDR
51931: LD_VAR 0 13
51935: PUSH
51936: FOR_TO
51937: IFFALSE 52303
// begin InitHc ;
51939: CALL_OW 19
// if not f then
51943: LD_VAR 0 12
51947: NOT
51948: IFFALSE 52037
// begin PrepareHuman ( false , i , skill ) ;
51950: LD_INT 0
51952: PPUSH
51953: LD_VAR 0 8
51957: PPUSH
51958: LD_VAR 0 4
51962: PPUSH
51963: CALL_OW 380
// un := CreateHuman ;
51967: LD_ADDR_VAR 0 14
51971: PUSH
51972: CALL_OW 44
51976: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51977: LD_ADDR_VAR 0 7
51981: PUSH
51982: LD_VAR 0 7
51986: PPUSH
51987: LD_INT 1
51989: PPUSH
51990: LD_VAR 0 14
51994: PPUSH
51995: CALL_OW 2
51999: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52000: LD_VAR 0 14
52004: PPUSH
52005: LD_VAR 0 1
52009: PPUSH
52010: CALL_OW 250
52014: PPUSH
52015: LD_VAR 0 1
52019: PPUSH
52020: CALL_OW 251
52024: PPUSH
52025: LD_INT 10
52027: PPUSH
52028: LD_INT 0
52030: PPUSH
52031: CALL_OW 50
// continue ;
52035: GO 51936
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52037: LD_VAR 0 12
52041: PUSH
52042: LD_INT 1
52044: ARRAY
52045: PPUSH
52046: CALL_OW 313
52050: IFFALSE 52078
52052: PUSH
52053: LD_VAR 0 12
52057: PUSH
52058: LD_INT 1
52060: ARRAY
52061: PPUSH
52062: CALL_OW 266
52066: PUSH
52067: LD_INT 32
52069: PUSH
52070: LD_INT 31
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: IN
52077: AND
52078: IFTRUE 52099
52080: PUSH
52081: LD_VAR 0 12
52085: PUSH
52086: LD_INT 1
52088: ARRAY
52089: PPUSH
52090: CALL_OW 313
52094: PUSH
52095: LD_INT 6
52097: EQUAL
52098: OR
52099: IFFALSE 52119
// f := Delete ( f , 1 ) ;
52101: LD_ADDR_VAR 0 12
52105: PUSH
52106: LD_VAR 0 12
52110: PPUSH
52111: LD_INT 1
52113: PPUSH
52114: CALL_OW 3
52118: ST_TO_ADDR
// if not f then
52119: LD_VAR 0 12
52123: NOT
52124: IFFALSE 52142
// begin x := x + 2 ;
52126: LD_ADDR_VAR 0 13
52130: PUSH
52131: LD_VAR 0 13
52135: PUSH
52136: LD_INT 2
52138: PLUS
52139: ST_TO_ADDR
// continue ;
52140: GO 51936
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52142: LD_VAR 0 12
52146: PUSH
52147: LD_INT 1
52149: ARRAY
52150: PPUSH
52151: CALL_OW 266
52155: PUSH
52156: LD_INT 5
52158: EQUAL
52159: IFFALSE 52233
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52161: LD_VAR 0 12
52165: PUSH
52166: LD_INT 1
52168: ARRAY
52169: PPUSH
52170: CALL_OW 313
52174: PUSH
52175: LD_INT 3
52177: LESS
52178: IFFALSE 52214
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52180: LD_INT 0
52182: PPUSH
52183: LD_INT 5
52185: PUSH
52186: LD_INT 8
52188: PUSH
52189: LD_INT 9
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: LIST
52196: PUSH
52197: LD_VAR 0 17
52201: ARRAY
52202: PPUSH
52203: LD_VAR 0 4
52207: PPUSH
52208: CALL_OW 380
52212: GO 52231
// PrepareHuman ( false , i , skill ) ;
52214: LD_INT 0
52216: PPUSH
52217: LD_VAR 0 8
52221: PPUSH
52222: LD_VAR 0 4
52226: PPUSH
52227: CALL_OW 380
// end else
52231: GO 52250
// PrepareHuman ( false , i , skill ) ;
52233: LD_INT 0
52235: PPUSH
52236: LD_VAR 0 8
52240: PPUSH
52241: LD_VAR 0 4
52245: PPUSH
52246: CALL_OW 380
// un := CreateHuman ;
52250: LD_ADDR_VAR 0 14
52254: PUSH
52255: CALL_OW 44
52259: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52260: LD_ADDR_VAR 0 7
52264: PUSH
52265: LD_VAR 0 7
52269: PPUSH
52270: LD_INT 1
52272: PPUSH
52273: LD_VAR 0 14
52277: PPUSH
52278: CALL_OW 2
52282: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52283: LD_VAR 0 14
52287: PPUSH
52288: LD_VAR 0 12
52292: PUSH
52293: LD_INT 1
52295: ARRAY
52296: PPUSH
52297: CALL_OW 52
// end ;
52301: GO 51936
52303: POP
52304: POP
// end ;
52305: GO 51236
52307: POP
52308: POP
// result := result ^ buildings ;
52309: LD_ADDR_VAR 0 7
52313: PUSH
52314: LD_VAR 0 7
52318: PUSH
52319: LD_VAR 0 18
52323: ADD
52324: ST_TO_ADDR
// end else
52325: GO 52468
// begin for i = 1 to personel do
52327: LD_ADDR_VAR 0 8
52331: PUSH
52332: DOUBLE
52333: LD_INT 1
52335: DEC
52336: ST_TO_ADDR
52337: LD_VAR 0 6
52341: PUSH
52342: FOR_TO
52343: IFFALSE 52466
// begin if i > 4 then
52345: LD_VAR 0 8
52349: PUSH
52350: LD_INT 4
52352: GREATER
52353: IFFALSE 52357
// break ;
52355: GO 52466
// x := personel [ i ] ;
52357: LD_ADDR_VAR 0 13
52361: PUSH
52362: LD_VAR 0 6
52366: PUSH
52367: LD_VAR 0 8
52371: ARRAY
52372: ST_TO_ADDR
// if x = - 1 then
52373: LD_VAR 0 13
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: EQUAL
52382: IFFALSE 52386
// continue ;
52384: GO 52342
// PrepareHuman ( false , i , skill ) ;
52386: LD_INT 0
52388: PPUSH
52389: LD_VAR 0 8
52393: PPUSH
52394: LD_VAR 0 4
52398: PPUSH
52399: CALL_OW 380
// un := CreateHuman ;
52403: LD_ADDR_VAR 0 14
52407: PUSH
52408: CALL_OW 44
52412: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52413: LD_VAR 0 14
52417: PPUSH
52418: LD_VAR 0 1
52422: PPUSH
52423: CALL_OW 250
52427: PPUSH
52428: LD_VAR 0 1
52432: PPUSH
52433: CALL_OW 251
52437: PPUSH
52438: LD_INT 10
52440: PPUSH
52441: LD_INT 0
52443: PPUSH
52444: CALL_OW 50
// result := result ^ un ;
52448: LD_ADDR_VAR 0 7
52452: PUSH
52453: LD_VAR 0 7
52457: PUSH
52458: LD_VAR 0 14
52462: ADD
52463: ST_TO_ADDR
// end ;
52464: GO 52342
52466: POP
52467: POP
// end ; end ;
52468: LD_VAR 0 7
52472: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52473: LD_INT 0
52475: PPUSH
52476: PPUSH
52477: PPUSH
52478: PPUSH
52479: PPUSH
52480: PPUSH
52481: PPUSH
52482: PPUSH
52483: PPUSH
52484: PPUSH
52485: PPUSH
52486: PPUSH
52487: PPUSH
52488: PPUSH
52489: PPUSH
52490: PPUSH
// result := false ;
52491: LD_ADDR_VAR 0 3
52495: PUSH
52496: LD_INT 0
52498: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52499: LD_VAR 0 1
52503: NOT
52504: IFTRUE 52529
52506: PUSH
52507: LD_VAR 0 1
52511: PPUSH
52512: CALL_OW 266
52516: PUSH
52517: LD_INT 32
52519: PUSH
52520: LD_INT 33
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: IN
52527: NOT
52528: OR
52529: IFFALSE 52533
// exit ;
52531: GO 53668
// nat := GetNation ( tower ) ;
52533: LD_ADDR_VAR 0 12
52537: PUSH
52538: LD_VAR 0 1
52542: PPUSH
52543: CALL_OW 248
52547: ST_TO_ADDR
// side := GetSide ( tower ) ;
52548: LD_ADDR_VAR 0 16
52552: PUSH
52553: LD_VAR 0 1
52557: PPUSH
52558: CALL_OW 255
52562: ST_TO_ADDR
// x := GetX ( tower ) ;
52563: LD_ADDR_VAR 0 10
52567: PUSH
52568: LD_VAR 0 1
52572: PPUSH
52573: CALL_OW 250
52577: ST_TO_ADDR
// y := GetY ( tower ) ;
52578: LD_ADDR_VAR 0 11
52582: PUSH
52583: LD_VAR 0 1
52587: PPUSH
52588: CALL_OW 251
52592: ST_TO_ADDR
// if not x or not y then
52593: LD_VAR 0 10
52597: NOT
52598: IFTRUE 52607
52600: PUSH
52601: LD_VAR 0 11
52605: NOT
52606: OR
52607: IFFALSE 52611
// exit ;
52609: GO 53668
// weapon := 0 ;
52611: LD_ADDR_VAR 0 18
52615: PUSH
52616: LD_INT 0
52618: ST_TO_ADDR
// fac_list := [ ] ;
52619: LD_ADDR_VAR 0 17
52623: PUSH
52624: EMPTY
52625: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52626: LD_ADDR_VAR 0 6
52630: PUSH
52631: LD_VAR 0 1
52635: PPUSH
52636: CALL_OW 274
52640: PPUSH
52641: LD_VAR 0 2
52645: PPUSH
52646: LD_INT 0
52648: PPUSH
52649: CALL 50203 0 3
52653: PPUSH
52654: LD_INT 30
52656: PUSH
52657: LD_INT 3
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PPUSH
52664: CALL_OW 72
52668: ST_TO_ADDR
// if not factories then
52669: LD_VAR 0 6
52673: NOT
52674: IFFALSE 52678
// exit ;
52676: GO 53668
// for i in factories do
52678: LD_ADDR_VAR 0 8
52682: PUSH
52683: LD_VAR 0 6
52687: PUSH
52688: FOR_IN
52689: IFFALSE 52714
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52691: LD_ADDR_VAR 0 17
52695: PUSH
52696: LD_VAR 0 17
52700: PUSH
52701: LD_VAR 0 8
52705: PPUSH
52706: CALL_OW 478
52710: UNION
52711: ST_TO_ADDR
52712: GO 52688
52714: POP
52715: POP
// if not fac_list then
52716: LD_VAR 0 17
52720: NOT
52721: IFFALSE 52725
// exit ;
52723: GO 53668
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52725: LD_ADDR_VAR 0 5
52729: PUSH
52730: LD_INT 4
52732: PUSH
52733: LD_INT 5
52735: PUSH
52736: LD_INT 9
52738: PUSH
52739: LD_INT 10
52741: PUSH
52742: LD_INT 6
52744: PUSH
52745: LD_INT 7
52747: PUSH
52748: LD_INT 11
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 27
52762: PUSH
52763: LD_INT 28
52765: PUSH
52766: LD_INT 26
52768: PUSH
52769: LD_INT 30
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 43
52780: PUSH
52781: LD_INT 44
52783: PUSH
52784: LD_INT 46
52786: PUSH
52787: LD_INT 45
52789: PUSH
52790: LD_INT 47
52792: PUSH
52793: LD_INT 49
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: LIST
52808: PUSH
52809: LD_VAR 0 12
52813: ARRAY
52814: ST_TO_ADDR
// list := list isect fac_list ;
52815: LD_ADDR_VAR 0 5
52819: PUSH
52820: LD_VAR 0 5
52824: PUSH
52825: LD_VAR 0 17
52829: ISECT
52830: ST_TO_ADDR
// if not list then
52831: LD_VAR 0 5
52835: NOT
52836: IFFALSE 52840
// exit ;
52838: GO 53668
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52840: LD_VAR 0 12
52844: PUSH
52845: LD_INT 3
52847: EQUAL
52848: IFFALSE 52860
52850: PUSH
52851: LD_INT 49
52853: PUSH
52854: LD_VAR 0 5
52858: IN
52859: AND
52860: IFFALSE 52880
52862: PUSH
52863: LD_INT 31
52865: PPUSH
52866: LD_VAR 0 16
52870: PPUSH
52871: CALL_OW 321
52875: PUSH
52876: LD_INT 2
52878: EQUAL
52879: AND
52880: IFFALSE 52940
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52882: LD_INT 22
52884: PUSH
52885: LD_VAR 0 16
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 35
52896: PUSH
52897: LD_INT 49
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 91
52906: PUSH
52907: LD_VAR 0 1
52911: PUSH
52912: LD_INT 10
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: LIST
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: LIST
52924: PPUSH
52925: CALL_OW 69
52929: NOT
52930: IFFALSE 52940
// weapon := ru_time_lapser ;
52932: LD_ADDR_VAR 0 18
52936: PUSH
52937: LD_INT 49
52939: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52940: LD_VAR 0 12
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: LD_INT 2
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: IN
52955: IFFALSE 52979
52957: PUSH
52958: LD_INT 11
52960: PUSH
52961: LD_VAR 0 5
52965: IN
52966: IFTRUE 52978
52968: PUSH
52969: LD_INT 30
52971: PUSH
52972: LD_VAR 0 5
52976: IN
52977: OR
52978: AND
52979: IFFALSE 52999
52981: PUSH
52982: LD_INT 6
52984: PPUSH
52985: LD_VAR 0 16
52989: PPUSH
52990: CALL_OW 321
52994: PUSH
52995: LD_INT 2
52997: EQUAL
52998: AND
52999: IFFALSE 53166
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53001: LD_INT 22
53003: PUSH
53004: LD_VAR 0 16
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 2
53015: PUSH
53016: LD_INT 35
53018: PUSH
53019: LD_INT 11
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 35
53028: PUSH
53029: LD_INT 30
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 91
53043: PUSH
53044: LD_VAR 0 1
53048: PUSH
53049: LD_INT 18
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: LIST
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: LIST
53061: PPUSH
53062: CALL_OW 69
53066: NOT
53067: IFFALSE 53143
53069: PUSH
53070: LD_INT 22
53072: PUSH
53073: LD_VAR 0 16
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: LD_INT 30
53087: PUSH
53088: LD_INT 32
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 30
53097: PUSH
53098: LD_INT 33
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 91
53112: PUSH
53113: LD_VAR 0 1
53117: PUSH
53118: LD_INT 12
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: LIST
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: LIST
53130: PUSH
53131: EMPTY
53132: LIST
53133: PPUSH
53134: CALL_OW 69
53138: PUSH
53139: LD_INT 2
53141: GREATER
53142: AND
53143: IFFALSE 53166
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53145: LD_ADDR_VAR 0 18
53149: PUSH
53150: LD_INT 11
53152: PUSH
53153: LD_INT 30
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_VAR 0 12
53164: ARRAY
53165: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53166: LD_VAR 0 18
53170: NOT
53171: IFFALSE 53191
53173: PUSH
53174: LD_INT 40
53176: PPUSH
53177: LD_VAR 0 16
53181: PPUSH
53182: CALL_OW 321
53186: PUSH
53187: LD_INT 2
53189: EQUAL
53190: AND
53191: IFFALSE 53227
53193: PUSH
53194: LD_INT 7
53196: PUSH
53197: LD_VAR 0 5
53201: IN
53202: IFTRUE 53214
53204: PUSH
53205: LD_INT 28
53207: PUSH
53208: LD_VAR 0 5
53212: IN
53213: OR
53214: IFTRUE 53226
53216: PUSH
53217: LD_INT 45
53219: PUSH
53220: LD_VAR 0 5
53224: IN
53225: OR
53226: AND
53227: IFFALSE 53481
// begin hex := GetHexInfo ( x , y ) ;
53229: LD_ADDR_VAR 0 4
53233: PUSH
53234: LD_VAR 0 10
53238: PPUSH
53239: LD_VAR 0 11
53243: PPUSH
53244: CALL_OW 546
53248: ST_TO_ADDR
// if hex [ 1 ] then
53249: LD_VAR 0 4
53253: PUSH
53254: LD_INT 1
53256: ARRAY
53257: IFFALSE 53261
// exit ;
53259: GO 53668
// height := hex [ 2 ] ;
53261: LD_ADDR_VAR 0 15
53265: PUSH
53266: LD_VAR 0 4
53270: PUSH
53271: LD_INT 2
53273: ARRAY
53274: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53275: LD_ADDR_VAR 0 14
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: LD_INT 3
53288: PUSH
53289: LD_INT 5
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: ST_TO_ADDR
// for i in tmp do
53298: LD_ADDR_VAR 0 8
53302: PUSH
53303: LD_VAR 0 14
53307: PUSH
53308: FOR_IN
53309: IFFALSE 53479
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53311: LD_ADDR_VAR 0 9
53315: PUSH
53316: LD_VAR 0 10
53320: PPUSH
53321: LD_VAR 0 8
53325: PPUSH
53326: LD_INT 5
53328: PPUSH
53329: CALL_OW 272
53333: PUSH
53334: LD_VAR 0 11
53338: PPUSH
53339: LD_VAR 0 8
53343: PPUSH
53344: LD_INT 5
53346: PPUSH
53347: CALL_OW 273
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53356: LD_VAR 0 9
53360: PUSH
53361: LD_INT 1
53363: ARRAY
53364: PPUSH
53365: LD_VAR 0 9
53369: PUSH
53370: LD_INT 2
53372: ARRAY
53373: PPUSH
53374: CALL_OW 488
53378: IFFALSE 53477
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53380: LD_ADDR_VAR 0 4
53384: PUSH
53385: LD_VAR 0 9
53389: PUSH
53390: LD_INT 1
53392: ARRAY
53393: PPUSH
53394: LD_VAR 0 9
53398: PUSH
53399: LD_INT 2
53401: ARRAY
53402: PPUSH
53403: CALL_OW 546
53407: ST_TO_ADDR
// if hex [ 1 ] then
53408: LD_VAR 0 4
53412: PUSH
53413: LD_INT 1
53415: ARRAY
53416: IFFALSE 53420
// continue ;
53418: GO 53308
// h := hex [ 2 ] ;
53420: LD_ADDR_VAR 0 13
53424: PUSH
53425: LD_VAR 0 4
53429: PUSH
53430: LD_INT 2
53432: ARRAY
53433: ST_TO_ADDR
// if h + 7 < height then
53434: LD_VAR 0 13
53438: PUSH
53439: LD_INT 7
53441: PLUS
53442: PUSH
53443: LD_VAR 0 15
53447: LESS
53448: IFFALSE 53477
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53450: LD_ADDR_VAR 0 18
53454: PUSH
53455: LD_INT 7
53457: PUSH
53458: LD_INT 28
53460: PUSH
53461: LD_INT 45
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: LIST
53468: PUSH
53469: LD_VAR 0 12
53473: ARRAY
53474: ST_TO_ADDR
// break ;
53475: GO 53479
// end ; end ; end ;
53477: GO 53308
53479: POP
53480: POP
// end ; if not weapon then
53481: LD_VAR 0 18
53485: NOT
53486: IFFALSE 53546
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53488: LD_ADDR_VAR 0 5
53492: PUSH
53493: LD_VAR 0 5
53497: PUSH
53498: LD_INT 11
53500: PUSH
53501: LD_INT 30
53503: PUSH
53504: LD_INT 49
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: LIST
53511: DIFF
53512: ST_TO_ADDR
// if not list then
53513: LD_VAR 0 5
53517: NOT
53518: IFFALSE 53522
// exit ;
53520: GO 53668
// weapon := list [ rand ( 1 , list ) ] ;
53522: LD_ADDR_VAR 0 18
53526: PUSH
53527: LD_VAR 0 5
53531: PUSH
53532: LD_INT 1
53534: PPUSH
53535: LD_VAR 0 5
53539: PPUSH
53540: CALL_OW 12
53544: ARRAY
53545: ST_TO_ADDR
// end ; if weapon then
53546: LD_VAR 0 18
53550: IFFALSE 53668
// begin tmp := CostOfWeapon ( weapon ) ;
53552: LD_ADDR_VAR 0 14
53556: PUSH
53557: LD_VAR 0 18
53561: PPUSH
53562: CALL_OW 451
53566: ST_TO_ADDR
// j := GetBase ( tower ) ;
53567: LD_ADDR_VAR 0 9
53571: PUSH
53572: LD_VAR 0 1
53576: PPUSH
53577: CALL_OW 274
53581: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53582: LD_VAR 0 9
53586: PPUSH
53587: LD_INT 1
53589: PPUSH
53590: CALL_OW 275
53594: PUSH
53595: LD_VAR 0 14
53599: PUSH
53600: LD_INT 1
53602: ARRAY
53603: GREATEREQUAL
53604: IFFALSE 53630
53606: PUSH
53607: LD_VAR 0 9
53611: PPUSH
53612: LD_INT 2
53614: PPUSH
53615: CALL_OW 275
53619: PUSH
53620: LD_VAR 0 14
53624: PUSH
53625: LD_INT 2
53627: ARRAY
53628: GREATEREQUAL
53629: AND
53630: IFFALSE 53656
53632: PUSH
53633: LD_VAR 0 9
53637: PPUSH
53638: LD_INT 3
53640: PPUSH
53641: CALL_OW 275
53645: PUSH
53646: LD_VAR 0 14
53650: PUSH
53651: LD_INT 3
53653: ARRAY
53654: GREATEREQUAL
53655: AND
53656: IFFALSE 53668
// result := weapon ;
53658: LD_ADDR_VAR 0 3
53662: PUSH
53663: LD_VAR 0 18
53667: ST_TO_ADDR
// end ; end ;
53668: LD_VAR 0 3
53672: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53673: LD_INT 0
53675: PPUSH
53676: PPUSH
// result := true ;
53677: LD_ADDR_VAR 0 3
53681: PUSH
53682: LD_INT 1
53684: ST_TO_ADDR
// if array1 = array2 then
53685: LD_VAR 0 1
53689: PUSH
53690: LD_VAR 0 2
53694: EQUAL
53695: IFFALSE 53755
// begin for i = 1 to array1 do
53697: LD_ADDR_VAR 0 4
53701: PUSH
53702: DOUBLE
53703: LD_INT 1
53705: DEC
53706: ST_TO_ADDR
53707: LD_VAR 0 1
53711: PUSH
53712: FOR_TO
53713: IFFALSE 53751
// if array1 [ i ] <> array2 [ i ] then
53715: LD_VAR 0 1
53719: PUSH
53720: LD_VAR 0 4
53724: ARRAY
53725: PUSH
53726: LD_VAR 0 2
53730: PUSH
53731: LD_VAR 0 4
53735: ARRAY
53736: NONEQUAL
53737: IFFALSE 53749
// begin result := false ;
53739: LD_ADDR_VAR 0 3
53743: PUSH
53744: LD_INT 0
53746: ST_TO_ADDR
// break ;
53747: GO 53751
// end ;
53749: GO 53712
53751: POP
53752: POP
// end else
53753: GO 53763
// result := false ;
53755: LD_ADDR_VAR 0 3
53759: PUSH
53760: LD_INT 0
53762: ST_TO_ADDR
// end ;
53763: LD_VAR 0 3
53767: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53768: LD_INT 0
53770: PPUSH
53771: PPUSH
// if not array1 or not array2 then
53772: LD_VAR 0 1
53776: NOT
53777: IFTRUE 53786
53779: PUSH
53780: LD_VAR 0 2
53784: NOT
53785: OR
53786: IFFALSE 53790
// exit ;
53788: GO 53854
// result := true ;
53790: LD_ADDR_VAR 0 3
53794: PUSH
53795: LD_INT 1
53797: ST_TO_ADDR
// for i = 1 to array1 do
53798: LD_ADDR_VAR 0 4
53802: PUSH
53803: DOUBLE
53804: LD_INT 1
53806: DEC
53807: ST_TO_ADDR
53808: LD_VAR 0 1
53812: PUSH
53813: FOR_TO
53814: IFFALSE 53852
// if array1 [ i ] <> array2 [ i ] then
53816: LD_VAR 0 1
53820: PUSH
53821: LD_VAR 0 4
53825: ARRAY
53826: PUSH
53827: LD_VAR 0 2
53831: PUSH
53832: LD_VAR 0 4
53836: ARRAY
53837: NONEQUAL
53838: IFFALSE 53850
// begin result := false ;
53840: LD_ADDR_VAR 0 3
53844: PUSH
53845: LD_INT 0
53847: ST_TO_ADDR
// break ;
53848: GO 53852
// end ;
53850: GO 53813
53852: POP
53853: POP
// end ;
53854: LD_VAR 0 3
53858: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53859: LD_INT 0
53861: PPUSH
53862: PPUSH
53863: PPUSH
// pom := GetBase ( fac ) ;
53864: LD_ADDR_VAR 0 5
53868: PUSH
53869: LD_VAR 0 1
53873: PPUSH
53874: CALL_OW 274
53878: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53879: LD_ADDR_VAR 0 4
53883: PUSH
53884: LD_VAR 0 2
53888: PUSH
53889: LD_INT 1
53891: ARRAY
53892: PPUSH
53893: LD_VAR 0 2
53897: PUSH
53898: LD_INT 2
53900: ARRAY
53901: PPUSH
53902: LD_VAR 0 2
53906: PUSH
53907: LD_INT 3
53909: ARRAY
53910: PPUSH
53911: LD_VAR 0 2
53915: PUSH
53916: LD_INT 4
53918: ARRAY
53919: PPUSH
53920: CALL_OW 449
53924: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53925: LD_ADDR_VAR 0 3
53929: PUSH
53930: LD_VAR 0 5
53934: PPUSH
53935: LD_INT 1
53937: PPUSH
53938: CALL_OW 275
53942: PUSH
53943: LD_VAR 0 4
53947: PUSH
53948: LD_INT 1
53950: ARRAY
53951: GREATEREQUAL
53952: IFFALSE 53978
53954: PUSH
53955: LD_VAR 0 5
53959: PPUSH
53960: LD_INT 2
53962: PPUSH
53963: CALL_OW 275
53967: PUSH
53968: LD_VAR 0 4
53972: PUSH
53973: LD_INT 2
53975: ARRAY
53976: GREATEREQUAL
53977: AND
53978: IFFALSE 54004
53980: PUSH
53981: LD_VAR 0 5
53985: PPUSH
53986: LD_INT 3
53988: PPUSH
53989: CALL_OW 275
53993: PUSH
53994: LD_VAR 0 4
53998: PUSH
53999: LD_INT 3
54001: ARRAY
54002: GREATEREQUAL
54003: AND
54004: ST_TO_ADDR
// end ;
54005: LD_VAR 0 3
54009: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54010: LD_INT 0
54012: PPUSH
54013: PPUSH
54014: PPUSH
54015: PPUSH
// pom := GetBase ( building ) ;
54016: LD_ADDR_VAR 0 3
54020: PUSH
54021: LD_VAR 0 1
54025: PPUSH
54026: CALL_OW 274
54030: ST_TO_ADDR
// if not pom then
54031: LD_VAR 0 3
54035: NOT
54036: IFFALSE 54040
// exit ;
54038: GO 54214
// btype := GetBType ( building ) ;
54040: LD_ADDR_VAR 0 5
54044: PUSH
54045: LD_VAR 0 1
54049: PPUSH
54050: CALL_OW 266
54054: ST_TO_ADDR
// if btype = b_armoury then
54055: LD_VAR 0 5
54059: PUSH
54060: LD_INT 4
54062: EQUAL
54063: IFFALSE 54073
// btype := b_barracks ;
54065: LD_ADDR_VAR 0 5
54069: PUSH
54070: LD_INT 5
54072: ST_TO_ADDR
// if btype = b_depot then
54073: LD_VAR 0 5
54077: PUSH
54078: LD_INT 0
54080: EQUAL
54081: IFFALSE 54091
// btype := b_warehouse ;
54083: LD_ADDR_VAR 0 5
54087: PUSH
54088: LD_INT 1
54090: ST_TO_ADDR
// if btype = b_workshop then
54091: LD_VAR 0 5
54095: PUSH
54096: LD_INT 2
54098: EQUAL
54099: IFFALSE 54109
// btype := b_factory ;
54101: LD_ADDR_VAR 0 5
54105: PUSH
54106: LD_INT 3
54108: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54109: LD_ADDR_VAR 0 4
54113: PUSH
54114: LD_VAR 0 5
54118: PPUSH
54119: LD_VAR 0 1
54123: PPUSH
54124: CALL_OW 248
54128: PPUSH
54129: CALL_OW 450
54133: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54134: LD_ADDR_VAR 0 2
54138: PUSH
54139: LD_VAR 0 3
54143: PPUSH
54144: LD_INT 1
54146: PPUSH
54147: CALL_OW 275
54151: PUSH
54152: LD_VAR 0 4
54156: PUSH
54157: LD_INT 1
54159: ARRAY
54160: GREATEREQUAL
54161: IFFALSE 54187
54163: PUSH
54164: LD_VAR 0 3
54168: PPUSH
54169: LD_INT 2
54171: PPUSH
54172: CALL_OW 275
54176: PUSH
54177: LD_VAR 0 4
54181: PUSH
54182: LD_INT 2
54184: ARRAY
54185: GREATEREQUAL
54186: AND
54187: IFFALSE 54213
54189: PUSH
54190: LD_VAR 0 3
54194: PPUSH
54195: LD_INT 3
54197: PPUSH
54198: CALL_OW 275
54202: PUSH
54203: LD_VAR 0 4
54207: PUSH
54208: LD_INT 3
54210: ARRAY
54211: GREATEREQUAL
54212: AND
54213: ST_TO_ADDR
// end ;
54214: LD_VAR 0 2
54218: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54219: LD_INT 0
54221: PPUSH
54222: PPUSH
54223: PPUSH
// pom := GetBase ( building ) ;
54224: LD_ADDR_VAR 0 4
54228: PUSH
54229: LD_VAR 0 1
54233: PPUSH
54234: CALL_OW 274
54238: ST_TO_ADDR
// if not pom then
54239: LD_VAR 0 4
54243: NOT
54244: IFFALSE 54248
// exit ;
54246: GO 54353
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54248: LD_ADDR_VAR 0 5
54252: PUSH
54253: LD_VAR 0 2
54257: PPUSH
54258: LD_VAR 0 1
54262: PPUSH
54263: CALL_OW 248
54267: PPUSH
54268: CALL_OW 450
54272: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54273: LD_ADDR_VAR 0 3
54277: PUSH
54278: LD_VAR 0 4
54282: PPUSH
54283: LD_INT 1
54285: PPUSH
54286: CALL_OW 275
54290: PUSH
54291: LD_VAR 0 5
54295: PUSH
54296: LD_INT 1
54298: ARRAY
54299: GREATEREQUAL
54300: IFFALSE 54326
54302: PUSH
54303: LD_VAR 0 4
54307: PPUSH
54308: LD_INT 2
54310: PPUSH
54311: CALL_OW 275
54315: PUSH
54316: LD_VAR 0 5
54320: PUSH
54321: LD_INT 2
54323: ARRAY
54324: GREATEREQUAL
54325: AND
54326: IFFALSE 54352
54328: PUSH
54329: LD_VAR 0 4
54333: PPUSH
54334: LD_INT 3
54336: PPUSH
54337: CALL_OW 275
54341: PUSH
54342: LD_VAR 0 5
54346: PUSH
54347: LD_INT 3
54349: ARRAY
54350: GREATEREQUAL
54351: AND
54352: ST_TO_ADDR
// end ;
54353: LD_VAR 0 3
54357: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54358: LD_INT 0
54360: PPUSH
54361: PPUSH
54362: PPUSH
54363: PPUSH
54364: PPUSH
54365: PPUSH
54366: PPUSH
54367: PPUSH
54368: PPUSH
54369: PPUSH
54370: PPUSH
// result := false ;
54371: LD_ADDR_VAR 0 8
54375: PUSH
54376: LD_INT 0
54378: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54379: LD_VAR 0 5
54383: NOT
54384: IFTRUE 54393
54386: PUSH
54387: LD_VAR 0 1
54391: NOT
54392: OR
54393: IFTRUE 54402
54395: PUSH
54396: LD_VAR 0 2
54400: NOT
54401: OR
54402: IFTRUE 54411
54404: PUSH
54405: LD_VAR 0 3
54409: NOT
54410: OR
54411: IFFALSE 54415
// exit ;
54413: GO 55241
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54415: LD_ADDR_VAR 0 14
54419: PUSH
54420: LD_VAR 0 1
54424: PPUSH
54425: LD_VAR 0 2
54429: PPUSH
54430: LD_VAR 0 3
54434: PPUSH
54435: LD_VAR 0 4
54439: PPUSH
54440: LD_VAR 0 5
54444: PUSH
54445: LD_INT 1
54447: ARRAY
54448: PPUSH
54449: CALL_OW 248
54453: PPUSH
54454: LD_INT 0
54456: PPUSH
54457: CALL 56522 0 6
54461: ST_TO_ADDR
// if not hexes then
54462: LD_VAR 0 14
54466: NOT
54467: IFFALSE 54471
// exit ;
54469: GO 55241
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54471: LD_ADDR_VAR 0 17
54475: PUSH
54476: LD_VAR 0 5
54480: PPUSH
54481: LD_INT 22
54483: PUSH
54484: LD_VAR 0 13
54488: PPUSH
54489: CALL_OW 255
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 2
54500: PUSH
54501: LD_INT 30
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 30
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: LIST
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PPUSH
54530: CALL_OW 72
54534: ST_TO_ADDR
// for i = 1 to hexes do
54535: LD_ADDR_VAR 0 9
54539: PUSH
54540: DOUBLE
54541: LD_INT 1
54543: DEC
54544: ST_TO_ADDR
54545: LD_VAR 0 14
54549: PUSH
54550: FOR_TO
54551: IFFALSE 55239
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54553: LD_ADDR_VAR 0 13
54557: PUSH
54558: LD_VAR 0 14
54562: PUSH
54563: LD_VAR 0 9
54567: ARRAY
54568: PUSH
54569: LD_INT 1
54571: ARRAY
54572: PPUSH
54573: LD_VAR 0 14
54577: PUSH
54578: LD_VAR 0 9
54582: ARRAY
54583: PUSH
54584: LD_INT 2
54586: ARRAY
54587: PPUSH
54588: CALL_OW 428
54592: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54593: LD_VAR 0 14
54597: PUSH
54598: LD_VAR 0 9
54602: ARRAY
54603: PUSH
54604: LD_INT 1
54606: ARRAY
54607: PPUSH
54608: LD_VAR 0 14
54612: PUSH
54613: LD_VAR 0 9
54617: ARRAY
54618: PUSH
54619: LD_INT 2
54621: ARRAY
54622: PPUSH
54623: CALL_OW 351
54627: IFTRUE 54666
54629: PUSH
54630: LD_VAR 0 14
54634: PUSH
54635: LD_VAR 0 9
54639: ARRAY
54640: PUSH
54641: LD_INT 1
54643: ARRAY
54644: PPUSH
54645: LD_VAR 0 14
54649: PUSH
54650: LD_VAR 0 9
54654: ARRAY
54655: PUSH
54656: LD_INT 2
54658: ARRAY
54659: PPUSH
54660: CALL_OW 488
54664: NOT
54665: OR
54666: IFTRUE 54683
54668: PUSH
54669: LD_VAR 0 13
54673: PPUSH
54674: CALL_OW 247
54678: PUSH
54679: LD_INT 3
54681: EQUAL
54682: OR
54683: IFFALSE 54689
// exit ;
54685: POP
54686: POP
54687: GO 55241
// if not tmp then
54689: LD_VAR 0 13
54693: NOT
54694: IFFALSE 54698
// continue ;
54696: GO 54550
// result := true ;
54698: LD_ADDR_VAR 0 8
54702: PUSH
54703: LD_INT 1
54705: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54706: LD_VAR 0 6
54710: IFFALSE 54727
54712: PUSH
54713: LD_VAR 0 13
54717: PPUSH
54718: CALL_OW 247
54722: PUSH
54723: LD_INT 2
54725: EQUAL
54726: AND
54727: IFFALSE 54744
54729: PUSH
54730: LD_VAR 0 13
54734: PPUSH
54735: CALL_OW 263
54739: PUSH
54740: LD_INT 1
54742: EQUAL
54743: AND
54744: IFFALSE 54908
// begin if IsDrivenBy ( tmp ) then
54746: LD_VAR 0 13
54750: PPUSH
54751: CALL_OW 311
54755: IFFALSE 54759
// continue ;
54757: GO 54550
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54759: LD_VAR 0 6
54763: PPUSH
54764: LD_INT 3
54766: PUSH
54767: LD_INT 60
54769: PUSH
54770: EMPTY
54771: LIST
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 3
54779: PUSH
54780: LD_INT 55
54782: PUSH
54783: EMPTY
54784: LIST
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PPUSH
54794: CALL_OW 72
54798: IFFALSE 54906
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54800: LD_ADDR_VAR 0 18
54804: PUSH
54805: LD_VAR 0 6
54809: PPUSH
54810: LD_INT 3
54812: PUSH
54813: LD_INT 60
54815: PUSH
54816: EMPTY
54817: LIST
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 3
54825: PUSH
54826: LD_INT 55
54828: PUSH
54829: EMPTY
54830: LIST
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PPUSH
54840: CALL_OW 72
54844: PUSH
54845: LD_INT 1
54847: ARRAY
54848: ST_TO_ADDR
// if IsInUnit ( driver ) then
54849: LD_VAR 0 18
54853: PPUSH
54854: CALL_OW 310
54858: IFFALSE 54869
// ComExit ( driver ) ;
54860: LD_VAR 0 18
54864: PPUSH
54865: CALL 80512 0 1
// AddComEnterUnit ( driver , tmp ) ;
54869: LD_VAR 0 18
54873: PPUSH
54874: LD_VAR 0 13
54878: PPUSH
54879: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54883: LD_VAR 0 18
54887: PPUSH
54888: LD_VAR 0 7
54892: PPUSH
54893: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54897: LD_VAR 0 18
54901: PPUSH
54902: CALL_OW 181
// end ; continue ;
54906: GO 54550
// end ; if not cleaners or not tmp in cleaners then
54908: LD_VAR 0 6
54912: NOT
54913: IFTRUE 54928
54915: PUSH
54916: LD_VAR 0 13
54920: PUSH
54921: LD_VAR 0 6
54925: IN
54926: NOT
54927: OR
54928: IFFALSE 55237
// begin if dep then
54930: LD_VAR 0 17
54934: IFFALSE 55070
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54936: LD_ADDR_VAR 0 16
54940: PUSH
54941: LD_VAR 0 17
54945: PUSH
54946: LD_INT 1
54948: ARRAY
54949: PPUSH
54950: CALL_OW 250
54954: PPUSH
54955: LD_VAR 0 17
54959: PUSH
54960: LD_INT 1
54962: ARRAY
54963: PPUSH
54964: CALL_OW 254
54968: PPUSH
54969: LD_INT 5
54971: PPUSH
54972: CALL_OW 272
54976: PUSH
54977: LD_VAR 0 17
54981: PUSH
54982: LD_INT 1
54984: ARRAY
54985: PPUSH
54986: CALL_OW 251
54990: PPUSH
54991: LD_VAR 0 17
54995: PUSH
54996: LD_INT 1
54998: ARRAY
54999: PPUSH
55000: CALL_OW 254
55004: PPUSH
55005: LD_INT 5
55007: PPUSH
55008: CALL_OW 273
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55017: LD_VAR 0 16
55021: PUSH
55022: LD_INT 1
55024: ARRAY
55025: PPUSH
55026: LD_VAR 0 16
55030: PUSH
55031: LD_INT 2
55033: ARRAY
55034: PPUSH
55035: CALL_OW 488
55039: IFFALSE 55070
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55041: LD_VAR 0 13
55045: PPUSH
55046: LD_VAR 0 16
55050: PUSH
55051: LD_INT 1
55053: ARRAY
55054: PPUSH
55055: LD_VAR 0 16
55059: PUSH
55060: LD_INT 2
55062: ARRAY
55063: PPUSH
55064: CALL_OW 111
// continue ;
55068: GO 54550
// end ; end ; r := GetDir ( tmp ) ;
55070: LD_ADDR_VAR 0 15
55074: PUSH
55075: LD_VAR 0 13
55079: PPUSH
55080: CALL_OW 254
55084: ST_TO_ADDR
// if r = 5 then
55085: LD_VAR 0 15
55089: PUSH
55090: LD_INT 5
55092: EQUAL
55093: IFFALSE 55103
// r := 0 ;
55095: LD_ADDR_VAR 0 15
55099: PUSH
55100: LD_INT 0
55102: ST_TO_ADDR
// for j = r to 5 do
55103: LD_ADDR_VAR 0 10
55107: PUSH
55108: DOUBLE
55109: LD_VAR 0 15
55113: DEC
55114: ST_TO_ADDR
55115: LD_INT 5
55117: PUSH
55118: FOR_TO
55119: IFFALSE 55235
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55121: LD_ADDR_VAR 0 11
55125: PUSH
55126: LD_VAR 0 13
55130: PPUSH
55131: CALL_OW 250
55135: PPUSH
55136: LD_VAR 0 10
55140: PPUSH
55141: LD_INT 2
55143: PPUSH
55144: CALL_OW 272
55148: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55149: LD_ADDR_VAR 0 12
55153: PUSH
55154: LD_VAR 0 13
55158: PPUSH
55159: CALL_OW 251
55163: PPUSH
55164: LD_VAR 0 10
55168: PPUSH
55169: LD_INT 2
55171: PPUSH
55172: CALL_OW 273
55176: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55177: LD_VAR 0 11
55181: PPUSH
55182: LD_VAR 0 12
55186: PPUSH
55187: CALL_OW 488
55191: IFFALSE 55210
55193: PUSH
55194: LD_VAR 0 11
55198: PPUSH
55199: LD_VAR 0 12
55203: PPUSH
55204: CALL_OW 428
55208: NOT
55209: AND
55210: IFFALSE 55233
// begin ComMoveXY ( tmp , _x , _y ) ;
55212: LD_VAR 0 13
55216: PPUSH
55217: LD_VAR 0 11
55221: PPUSH
55222: LD_VAR 0 12
55226: PPUSH
55227: CALL_OW 111
// break ;
55231: GO 55235
// end ; end ;
55233: GO 55118
55235: POP
55236: POP
// end ; end ;
55237: GO 54550
55239: POP
55240: POP
// end ;
55241: LD_VAR 0 8
55245: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55246: LD_INT 0
55248: PPUSH
// result := true ;
55249: LD_ADDR_VAR 0 3
55253: PUSH
55254: LD_INT 1
55256: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55257: LD_VAR 0 2
55261: PUSH
55262: LD_INT 24
55264: DOUBLE
55265: EQUAL
55266: IFTRUE 55276
55268: LD_INT 33
55270: DOUBLE
55271: EQUAL
55272: IFTRUE 55276
55274: GO 55301
55276: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55277: LD_ADDR_VAR 0 3
55281: PUSH
55282: LD_INT 32
55284: PPUSH
55285: LD_VAR 0 1
55289: PPUSH
55290: CALL_OW 321
55294: PUSH
55295: LD_INT 2
55297: EQUAL
55298: ST_TO_ADDR
55299: GO 55617
55301: LD_INT 20
55303: DOUBLE
55304: EQUAL
55305: IFTRUE 55309
55307: GO 55334
55309: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55310: LD_ADDR_VAR 0 3
55314: PUSH
55315: LD_INT 6
55317: PPUSH
55318: LD_VAR 0 1
55322: PPUSH
55323: CALL_OW 321
55327: PUSH
55328: LD_INT 2
55330: EQUAL
55331: ST_TO_ADDR
55332: GO 55617
55334: LD_INT 22
55336: DOUBLE
55337: EQUAL
55338: IFTRUE 55348
55340: LD_INT 36
55342: DOUBLE
55343: EQUAL
55344: IFTRUE 55348
55346: GO 55373
55348: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55349: LD_ADDR_VAR 0 3
55353: PUSH
55354: LD_INT 15
55356: PPUSH
55357: LD_VAR 0 1
55361: PPUSH
55362: CALL_OW 321
55366: PUSH
55367: LD_INT 2
55369: EQUAL
55370: ST_TO_ADDR
55371: GO 55617
55373: LD_INT 30
55375: DOUBLE
55376: EQUAL
55377: IFTRUE 55381
55379: GO 55406
55381: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55382: LD_ADDR_VAR 0 3
55386: PUSH
55387: LD_INT 20
55389: PPUSH
55390: LD_VAR 0 1
55394: PPUSH
55395: CALL_OW 321
55399: PUSH
55400: LD_INT 2
55402: EQUAL
55403: ST_TO_ADDR
55404: GO 55617
55406: LD_INT 28
55408: DOUBLE
55409: EQUAL
55410: IFTRUE 55420
55412: LD_INT 21
55414: DOUBLE
55415: EQUAL
55416: IFTRUE 55420
55418: GO 55445
55420: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55421: LD_ADDR_VAR 0 3
55425: PUSH
55426: LD_INT 21
55428: PPUSH
55429: LD_VAR 0 1
55433: PPUSH
55434: CALL_OW 321
55438: PUSH
55439: LD_INT 2
55441: EQUAL
55442: ST_TO_ADDR
55443: GO 55617
55445: LD_INT 16
55447: DOUBLE
55448: EQUAL
55449: IFTRUE 55453
55451: GO 55478
55453: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55454: LD_ADDR_VAR 0 3
55458: PUSH
55459: LD_INT 84
55461: PPUSH
55462: LD_VAR 0 1
55466: PPUSH
55467: CALL_OW 321
55471: PUSH
55472: LD_INT 2
55474: EQUAL
55475: ST_TO_ADDR
55476: GO 55617
55478: LD_INT 19
55480: DOUBLE
55481: EQUAL
55482: IFTRUE 55492
55484: LD_INT 23
55486: DOUBLE
55487: EQUAL
55488: IFTRUE 55492
55490: GO 55517
55492: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55493: LD_ADDR_VAR 0 3
55497: PUSH
55498: LD_INT 83
55500: PPUSH
55501: LD_VAR 0 1
55505: PPUSH
55506: CALL_OW 321
55510: PUSH
55511: LD_INT 2
55513: EQUAL
55514: ST_TO_ADDR
55515: GO 55617
55517: LD_INT 17
55519: DOUBLE
55520: EQUAL
55521: IFTRUE 55525
55523: GO 55550
55525: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55526: LD_ADDR_VAR 0 3
55530: PUSH
55531: LD_INT 39
55533: PPUSH
55534: LD_VAR 0 1
55538: PPUSH
55539: CALL_OW 321
55543: PUSH
55544: LD_INT 2
55546: EQUAL
55547: ST_TO_ADDR
55548: GO 55617
55550: LD_INT 18
55552: DOUBLE
55553: EQUAL
55554: IFTRUE 55558
55556: GO 55583
55558: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55559: LD_ADDR_VAR 0 3
55563: PUSH
55564: LD_INT 40
55566: PPUSH
55567: LD_VAR 0 1
55571: PPUSH
55572: CALL_OW 321
55576: PUSH
55577: LD_INT 2
55579: EQUAL
55580: ST_TO_ADDR
55581: GO 55617
55583: LD_INT 27
55585: DOUBLE
55586: EQUAL
55587: IFTRUE 55591
55589: GO 55616
55591: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55592: LD_ADDR_VAR 0 3
55596: PUSH
55597: LD_INT 35
55599: PPUSH
55600: LD_VAR 0 1
55604: PPUSH
55605: CALL_OW 321
55609: PUSH
55610: LD_INT 2
55612: EQUAL
55613: ST_TO_ADDR
55614: GO 55617
55616: POP
// end ;
55617: LD_VAR 0 3
55621: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55622: LD_INT 0
55624: PPUSH
55625: PPUSH
55626: PPUSH
55627: PPUSH
55628: PPUSH
55629: PPUSH
55630: PPUSH
55631: PPUSH
55632: PPUSH
55633: PPUSH
55634: PPUSH
// result := false ;
55635: LD_ADDR_VAR 0 6
55639: PUSH
55640: LD_INT 0
55642: ST_TO_ADDR
// if btype = b_depot then
55643: LD_VAR 0 2
55647: PUSH
55648: LD_INT 0
55650: EQUAL
55651: IFFALSE 55663
// begin result := true ;
55653: LD_ADDR_VAR 0 6
55657: PUSH
55658: LD_INT 1
55660: ST_TO_ADDR
// exit ;
55661: GO 56517
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55663: LD_VAR 0 1
55667: NOT
55668: IFTRUE 55693
55670: PUSH
55671: LD_VAR 0 1
55675: PPUSH
55676: CALL_OW 266
55680: PUSH
55681: LD_INT 0
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: IN
55691: NOT
55692: OR
55693: IFTRUE 55702
55695: PUSH
55696: LD_VAR 0 2
55700: NOT
55701: OR
55702: IFTRUE 55738
55704: PUSH
55705: LD_VAR 0 5
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: LD_INT 3
55721: PUSH
55722: LD_INT 4
55724: PUSH
55725: LD_INT 5
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: IN
55736: NOT
55737: OR
55738: IFTRUE 55757
55740: PUSH
55741: LD_VAR 0 3
55745: PPUSH
55746: LD_VAR 0 4
55750: PPUSH
55751: CALL_OW 488
55755: NOT
55756: OR
55757: IFFALSE 55761
// exit ;
55759: GO 56517
// side := GetSide ( depot ) ;
55761: LD_ADDR_VAR 0 9
55765: PUSH
55766: LD_VAR 0 1
55770: PPUSH
55771: CALL_OW 255
55775: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55776: LD_VAR 0 9
55780: PPUSH
55781: LD_VAR 0 2
55785: PPUSH
55786: CALL 55246 0 2
55790: NOT
55791: IFFALSE 55795
// exit ;
55793: GO 56517
// pom := GetBase ( depot ) ;
55795: LD_ADDR_VAR 0 10
55799: PUSH
55800: LD_VAR 0 1
55804: PPUSH
55805: CALL_OW 274
55809: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55810: LD_ADDR_VAR 0 11
55814: PUSH
55815: LD_VAR 0 2
55819: PPUSH
55820: LD_VAR 0 1
55824: PPUSH
55825: CALL_OW 248
55829: PPUSH
55830: CALL_OW 450
55834: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55835: LD_VAR 0 10
55839: PPUSH
55840: LD_INT 1
55842: PPUSH
55843: CALL_OW 275
55847: PUSH
55848: LD_VAR 0 11
55852: PUSH
55853: LD_INT 1
55855: ARRAY
55856: GREATEREQUAL
55857: IFFALSE 55883
55859: PUSH
55860: LD_VAR 0 10
55864: PPUSH
55865: LD_INT 2
55867: PPUSH
55868: CALL_OW 275
55872: PUSH
55873: LD_VAR 0 11
55877: PUSH
55878: LD_INT 2
55880: ARRAY
55881: GREATEREQUAL
55882: AND
55883: IFFALSE 55909
55885: PUSH
55886: LD_VAR 0 10
55890: PPUSH
55891: LD_INT 3
55893: PPUSH
55894: CALL_OW 275
55898: PUSH
55899: LD_VAR 0 11
55903: PUSH
55904: LD_INT 3
55906: ARRAY
55907: GREATEREQUAL
55908: AND
55909: NOT
55910: IFFALSE 55914
// exit ;
55912: GO 56517
// if GetBType ( depot ) = b_depot then
55914: LD_VAR 0 1
55918: PPUSH
55919: CALL_OW 266
55923: PUSH
55924: LD_INT 0
55926: EQUAL
55927: IFFALSE 55939
// dist := 28 else
55929: LD_ADDR_VAR 0 14
55933: PUSH
55934: LD_INT 28
55936: ST_TO_ADDR
55937: GO 55947
// dist := 36 ;
55939: LD_ADDR_VAR 0 14
55943: PUSH
55944: LD_INT 36
55946: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55947: LD_VAR 0 1
55951: PPUSH
55952: LD_VAR 0 3
55956: PPUSH
55957: LD_VAR 0 4
55961: PPUSH
55962: CALL_OW 297
55966: PUSH
55967: LD_VAR 0 14
55971: GREATER
55972: IFFALSE 55976
// exit ;
55974: GO 56517
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55976: LD_ADDR_VAR 0 12
55980: PUSH
55981: LD_VAR 0 2
55985: PPUSH
55986: LD_VAR 0 3
55990: PPUSH
55991: LD_VAR 0 4
55995: PPUSH
55996: LD_VAR 0 5
56000: PPUSH
56001: LD_VAR 0 1
56005: PPUSH
56006: CALL_OW 248
56010: PPUSH
56011: LD_INT 0
56013: PPUSH
56014: CALL 56522 0 6
56018: ST_TO_ADDR
// if not hexes then
56019: LD_VAR 0 12
56023: NOT
56024: IFFALSE 56028
// exit ;
56026: GO 56517
// hex := GetHexInfo ( x , y ) ;
56028: LD_ADDR_VAR 0 15
56032: PUSH
56033: LD_VAR 0 3
56037: PPUSH
56038: LD_VAR 0 4
56042: PPUSH
56043: CALL_OW 546
56047: ST_TO_ADDR
// if hex [ 1 ] then
56048: LD_VAR 0 15
56052: PUSH
56053: LD_INT 1
56055: ARRAY
56056: IFFALSE 56060
// exit ;
56058: GO 56517
// height := hex [ 2 ] ;
56060: LD_ADDR_VAR 0 13
56064: PUSH
56065: LD_VAR 0 15
56069: PUSH
56070: LD_INT 2
56072: ARRAY
56073: ST_TO_ADDR
// for i = 1 to hexes do
56074: LD_ADDR_VAR 0 7
56078: PUSH
56079: DOUBLE
56080: LD_INT 1
56082: DEC
56083: ST_TO_ADDR
56084: LD_VAR 0 12
56088: PUSH
56089: FOR_TO
56090: IFFALSE 56434
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56092: LD_VAR 0 12
56096: PUSH
56097: LD_VAR 0 7
56101: ARRAY
56102: PUSH
56103: LD_INT 1
56105: ARRAY
56106: PPUSH
56107: LD_VAR 0 12
56111: PUSH
56112: LD_VAR 0 7
56116: ARRAY
56117: PUSH
56118: LD_INT 2
56120: ARRAY
56121: PPUSH
56122: CALL_OW 488
56126: NOT
56127: IFTRUE 56169
56129: PUSH
56130: LD_VAR 0 12
56134: PUSH
56135: LD_VAR 0 7
56139: ARRAY
56140: PUSH
56141: LD_INT 1
56143: ARRAY
56144: PPUSH
56145: LD_VAR 0 12
56149: PUSH
56150: LD_VAR 0 7
56154: ARRAY
56155: PUSH
56156: LD_INT 2
56158: ARRAY
56159: PPUSH
56160: CALL_OW 428
56164: PUSH
56165: LD_INT 0
56167: GREATER
56168: OR
56169: IFTRUE 56207
56171: PUSH
56172: LD_VAR 0 12
56176: PUSH
56177: LD_VAR 0 7
56181: ARRAY
56182: PUSH
56183: LD_INT 1
56185: ARRAY
56186: PPUSH
56187: LD_VAR 0 12
56191: PUSH
56192: LD_VAR 0 7
56196: ARRAY
56197: PUSH
56198: LD_INT 2
56200: ARRAY
56201: PPUSH
56202: CALL_OW 351
56206: OR
56207: IFFALSE 56213
// exit ;
56209: POP
56210: POP
56211: GO 56517
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56213: LD_ADDR_VAR 0 8
56217: PUSH
56218: LD_VAR 0 12
56222: PUSH
56223: LD_VAR 0 7
56227: ARRAY
56228: PUSH
56229: LD_INT 1
56231: ARRAY
56232: PPUSH
56233: LD_VAR 0 12
56237: PUSH
56238: LD_VAR 0 7
56242: ARRAY
56243: PUSH
56244: LD_INT 2
56246: ARRAY
56247: PPUSH
56248: CALL_OW 546
56252: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56253: LD_VAR 0 8
56257: PUSH
56258: LD_INT 1
56260: ARRAY
56261: IFTRUE 56283
56263: PUSH
56264: LD_VAR 0 8
56268: PUSH
56269: LD_INT 2
56271: ARRAY
56272: PUSH
56273: LD_VAR 0 13
56277: PUSH
56278: LD_INT 2
56280: PLUS
56281: GREATER
56282: OR
56283: IFTRUE 56305
56285: PUSH
56286: LD_VAR 0 8
56290: PUSH
56291: LD_INT 2
56293: ARRAY
56294: PUSH
56295: LD_VAR 0 13
56299: PUSH
56300: LD_INT 2
56302: MINUS
56303: LESS
56304: OR
56305: IFTRUE 56373
56307: PUSH
56308: LD_VAR 0 8
56312: PUSH
56313: LD_INT 3
56315: ARRAY
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 8
56322: PUSH
56323: LD_INT 9
56325: PUSH
56326: LD_INT 10
56328: PUSH
56329: LD_INT 11
56331: PUSH
56332: LD_INT 12
56334: PUSH
56335: LD_INT 13
56337: PUSH
56338: LD_INT 16
56340: PUSH
56341: LD_INT 17
56343: PUSH
56344: LD_INT 18
56346: PUSH
56347: LD_INT 19
56349: PUSH
56350: LD_INT 20
56352: PUSH
56353: LD_INT 21
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: IN
56371: NOT
56372: OR
56373: IFTRUE 56386
56375: PUSH
56376: LD_VAR 0 8
56380: PUSH
56381: LD_INT 5
56383: ARRAY
56384: NOT
56385: OR
56386: IFTRUE 56426
56388: PUSH
56389: LD_VAR 0 8
56393: PUSH
56394: LD_INT 6
56396: ARRAY
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: LD_INT 2
56403: PUSH
56404: LD_INT 7
56406: PUSH
56407: LD_INT 9
56409: PUSH
56410: LD_INT 10
56412: PUSH
56413: LD_INT 11
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: IN
56424: NOT
56425: OR
56426: IFFALSE 56432
// exit ;
56428: POP
56429: POP
56430: GO 56517
// end ;
56432: GO 56089
56434: POP
56435: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56436: LD_VAR 0 9
56440: PPUSH
56441: LD_VAR 0 3
56445: PPUSH
56446: LD_VAR 0 4
56450: PPUSH
56451: LD_INT 20
56453: PPUSH
56454: CALL 48336 0 4
56458: PUSH
56459: LD_INT 4
56461: ARRAY
56462: IFFALSE 56466
// exit ;
56464: GO 56517
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56466: LD_VAR 0 2
56470: PUSH
56471: LD_INT 29
56473: PUSH
56474: LD_INT 30
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: IN
56481: IFFALSE 56505
56483: PUSH
56484: LD_VAR 0 3
56488: PPUSH
56489: LD_VAR 0 4
56493: PPUSH
56494: LD_VAR 0 9
56498: PPUSH
56499: CALL_OW 440
56503: NOT
56504: AND
56505: IFFALSE 56509
// exit ;
56507: GO 56517
// result := true ;
56509: LD_ADDR_VAR 0 6
56513: PUSH
56514: LD_INT 1
56516: ST_TO_ADDR
// end ;
56517: LD_VAR 0 6
56521: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56522: LD_INT 0
56524: PPUSH
56525: PPUSH
56526: PPUSH
56527: PPUSH
56528: PPUSH
56529: PPUSH
56530: PPUSH
56531: PPUSH
56532: PPUSH
56533: PPUSH
56534: PPUSH
56535: PPUSH
56536: PPUSH
56537: PPUSH
56538: PPUSH
56539: PPUSH
56540: PPUSH
56541: PPUSH
56542: PPUSH
56543: PPUSH
56544: PPUSH
56545: PPUSH
56546: PPUSH
56547: PPUSH
56548: PPUSH
56549: PPUSH
56550: PPUSH
56551: PPUSH
56552: PPUSH
56553: PPUSH
56554: PPUSH
56555: PPUSH
56556: PPUSH
56557: PPUSH
56558: PPUSH
56559: PPUSH
56560: PPUSH
56561: PPUSH
56562: PPUSH
56563: PPUSH
56564: PPUSH
56565: PPUSH
56566: PPUSH
56567: PPUSH
56568: PPUSH
56569: PPUSH
56570: PPUSH
56571: PPUSH
56572: PPUSH
56573: PPUSH
56574: PPUSH
56575: PPUSH
56576: PPUSH
56577: PPUSH
56578: PPUSH
56579: PPUSH
56580: PPUSH
56581: PPUSH
// result = [ ] ;
56582: LD_ADDR_VAR 0 7
56586: PUSH
56587: EMPTY
56588: ST_TO_ADDR
// temp_list = [ ] ;
56589: LD_ADDR_VAR 0 9
56593: PUSH
56594: EMPTY
56595: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56596: LD_VAR 0 4
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: LD_INT 2
56609: PUSH
56610: LD_INT 3
56612: PUSH
56613: LD_INT 4
56615: PUSH
56616: LD_INT 5
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: IN
56627: NOT
56628: IFTRUE 56671
56630: PUSH
56631: LD_VAR 0 1
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: IN
56646: IFFALSE 56670
56648: PUSH
56649: LD_VAR 0 5
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: LD_INT 3
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: LIST
56667: IN
56668: NOT
56669: AND
56670: OR
56671: IFFALSE 56675
// exit ;
56673: GO 75074
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56675: LD_VAR 0 1
56679: PUSH
56680: LD_INT 6
56682: PUSH
56683: LD_INT 7
56685: PUSH
56686: LD_INT 8
56688: PUSH
56689: LD_INT 13
56691: PUSH
56692: LD_INT 12
56694: PUSH
56695: LD_INT 15
56697: PUSH
56698: LD_INT 11
56700: PUSH
56701: LD_INT 14
56703: PUSH
56704: LD_INT 10
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: IN
56718: IFFALSE 56728
// btype = b_lab ;
56720: LD_ADDR_VAR 0 1
56724: PUSH
56725: LD_INT 6
56727: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56728: LD_VAR 0 6
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: LD_INT 2
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: LIST
56746: IN
56747: NOT
56748: IFTRUE 56816
56750: PUSH
56751: LD_VAR 0 1
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: LD_INT 2
56764: PUSH
56765: LD_INT 3
56767: PUSH
56768: LD_INT 6
56770: PUSH
56771: LD_INT 36
56773: PUSH
56774: LD_INT 4
56776: PUSH
56777: LD_INT 5
56779: PUSH
56780: LD_INT 31
56782: PUSH
56783: LD_INT 32
56785: PUSH
56786: LD_INT 33
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: IN
56802: NOT
56803: IFFALSE 56815
56805: PUSH
56806: LD_VAR 0 6
56810: PUSH
56811: LD_INT 1
56813: EQUAL
56814: AND
56815: OR
56816: IFTRUE 56848
56818: PUSH
56819: LD_VAR 0 1
56823: PUSH
56824: LD_INT 2
56826: PUSH
56827: LD_INT 3
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: IN
56834: NOT
56835: IFFALSE 56847
56837: PUSH
56838: LD_VAR 0 6
56842: PUSH
56843: LD_INT 2
56845: EQUAL
56846: AND
56847: OR
56848: IFFALSE 56858
// mode = 0 ;
56850: LD_ADDR_VAR 0 6
56854: PUSH
56855: LD_INT 0
56857: ST_TO_ADDR
// case mode of 0 :
56858: LD_VAR 0 6
56862: PUSH
56863: LD_INT 0
56865: DOUBLE
56866: EQUAL
56867: IFTRUE 56871
56869: GO 68324
56871: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56872: LD_ADDR_VAR 0 11
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: LD_INT 0
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: LD_INT 1
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 1
56930: NEG
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: LD_INT 1
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: LD_INT 2
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 1
57007: NEG
57008: PUSH
57009: LD_INT 1
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 3
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 3
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57065: LD_ADDR_VAR 0 12
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 2
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 2
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: LD_INT 1
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: NEG
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 2
57211: NEG
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 3
57222: NEG
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 3
57233: NEG
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57261: LD_ADDR_VAR 0 13
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: LD_INT 2
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: LD_INT 2
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 2
57408: NEG
57409: PUSH
57410: LD_INT 3
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 3
57420: NEG
57421: PUSH
57422: LD_INT 2
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 3
57432: NEG
57433: PUSH
57434: LD_INT 3
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57460: LD_ADDR_VAR 0 14
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: LD_INT 2
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: LD_INT 2
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: LD_INT 2
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 0
57585: PUSH
57586: LD_INT 2
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: LD_INT 3
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: LD_INT 3
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57656: LD_ADDR_VAR 0 15
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: LD_INT 1
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 2
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: NEG
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 2
57779: NEG
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 2
57790: NEG
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 3
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 3
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57849: LD_ADDR_VAR 0 16
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: LD_INT 2
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 2
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: LD_INT 2
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 2
57972: NEG
57973: PUSH
57974: LD_INT 1
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 2
57984: NEG
57985: PUSH
57986: LD_INT 2
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 3
57996: PUSH
57997: LD_INT 2
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 3
58006: PUSH
58007: LD_INT 3
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: LD_INT 3
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58042: LD_ADDR_VAR 0 17
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 2
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 2
58177: PUSH
58178: LD_INT 2
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: PUSH
58188: LD_INT 2
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: LD_INT 2
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 2
58218: NEG
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 2
58241: NEG
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58272: LD_ADDR_VAR 0 18
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: LD_INT 2
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 2
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 1
58417: PUSH
58418: LD_INT 2
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: LD_INT 2
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 2
58459: NEG
58460: PUSH
58461: LD_INT 1
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: NEG
58472: PUSH
58473: LD_INT 2
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58502: LD_ADDR_VAR 0 19
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: LD_INT 1
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: NEG
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: NEG
58584: PUSH
58585: LD_INT 2
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 2
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 2
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 1
58647: PUSH
58648: LD_INT 2
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: LD_INT 2
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: NEG
58668: PUSH
58669: LD_INT 1
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 2
58701: NEG
58702: PUSH
58703: LD_INT 2
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58732: LD_ADDR_VAR 0 20
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: LD_INT 1
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: LD_INT 0
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: LD_INT 2
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: LD_INT 2
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 1
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 2
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 2
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 2
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 1
58877: PUSH
58878: LD_INT 2
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: LD_INT 2
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: NEG
58898: PUSH
58899: LD_INT 1
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 2
58908: NEG
58909: PUSH
58910: LD_INT 0
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: LD_INT 2
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58962: LD_ADDR_VAR 0 21
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: LD_INT 0
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 1
59031: NEG
59032: PUSH
59033: LD_INT 1
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: LD_INT 2
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: LD_INT 1
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 2
59097: PUSH
59098: LD_INT 2
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: LD_INT 2
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: LD_INT 2
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 2
59149: NEG
59150: PUSH
59151: LD_INT 1
59153: NEG
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 2
59161: NEG
59162: PUSH
59163: LD_INT 2
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59192: LD_ADDR_VAR 0 22
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: LD_INT 1
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 2
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 2
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: LD_INT 2
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: LD_INT 2
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: LD_INT 2
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: LD_INT 1
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: LD_INT 1
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 2
59391: NEG
59392: PUSH
59393: LD_INT 2
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59422: LD_ADDR_VAR 0 23
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 0
59470: PUSH
59471: LD_INT 1
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 1
59491: NEG
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: LD_INT 2
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: LD_INT 2
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: LD_INT 2
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: LD_INT 2
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: LD_INT 2
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 2
59609: NEG
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 2
59621: NEG
59622: PUSH
59623: LD_INT 2
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 2
59633: NEG
59634: PUSH
59635: LD_INT 3
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: LD_INT 3
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: LD_INT 2
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 2
59668: PUSH
59669: LD_INT 1
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59702: LD_ADDR_VAR 0 24
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 0
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 1
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 0
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: NEG
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 1
59771: NEG
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 2
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: LD_INT 2
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 2
59837: PUSH
59838: LD_INT 2
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: LD_INT 2
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: LD_INT 2
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 1
59867: NEG
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 2
59889: NEG
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 2
59901: NEG
59902: PUSH
59903: LD_INT 2
59905: NEG
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: LD_INT 2
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 2
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 3
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 3
59945: PUSH
59946: LD_INT 2
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59978: LD_ADDR_VAR 0 25
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 1
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: NEG
60048: PUSH
60049: LD_INT 1
60051: NEG
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 1
60082: PUSH
60083: LD_INT 1
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 2
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: LD_INT 2
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: LD_INT 2
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: LD_INT 2
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: NEG
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 2
60154: NEG
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 2
60165: NEG
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 2
60177: NEG
60178: PUSH
60179: LD_INT 2
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 3
60189: PUSH
60190: LD_INT 1
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 3
60199: PUSH
60200: LD_INT 2
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 2
60209: PUSH
60210: LD_INT 3
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: LD_INT 3
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60252: LD_ADDR_VAR 0 26
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: LD_INT 1
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: LD_INT 2
60337: NEG
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 2
60348: NEG
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 1
60356: PUSH
60357: LD_INT 1
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 2
60377: PUSH
60378: LD_INT 1
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 2
60387: PUSH
60388: LD_INT 2
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 2
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: LD_INT 2
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: LD_INT 1
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 2
60428: NEG
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 2
60439: NEG
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 2
60451: NEG
60452: PUSH
60453: LD_INT 2
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 2
60463: PUSH
60464: LD_INT 3
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: LD_INT 3
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: LD_INT 2
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 2
60494: NEG
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60528: LD_ADDR_VAR 0 27
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: LD_INT 1
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 1
60597: NEG
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 1
60609: NEG
60610: PUSH
60611: LD_INT 2
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 0
60621: PUSH
60622: LD_INT 2
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 2
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 2
60653: PUSH
60654: LD_INT 1
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: LD_INT 2
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: PUSH
60674: LD_INT 2
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: NEG
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 2
60704: NEG
60705: PUSH
60706: LD_INT 0
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 2
60715: NEG
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 2
60727: NEG
60728: PUSH
60729: LD_INT 2
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 2
60750: NEG
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 3
60761: NEG
60762: PUSH
60763: LD_INT 1
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 3
60773: NEG
60774: PUSH
60775: LD_INT 2
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60808: LD_ADDR_VAR 0 28
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 1
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: NEG
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 1
60889: NEG
60890: PUSH
60891: LD_INT 2
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: LD_INT 2
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 2
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 2
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: PUSH
60944: LD_INT 2
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: LD_INT 2
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: LD_INT 2
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: NEG
60974: PUSH
60975: LD_INT 1
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 2
60984: NEG
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 2
60995: NEG
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 2
61007: NEG
61008: PUSH
61009: LD_INT 2
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 2
61019: NEG
61020: PUSH
61021: LD_INT 3
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: LD_INT 3
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 3
61043: NEG
61044: PUSH
61045: LD_INT 1
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 3
61055: NEG
61056: PUSH
61057: LD_INT 2
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61090: LD_ADDR_VAR 0 29
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: LD_INT 0
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: LD_INT 0
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 1
61148: NEG
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: LD_INT 1
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: LD_INT 2
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: LD_INT 2
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: PUSH
61195: LD_INT 1
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 2
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 1
61225: PUSH
61226: LD_INT 2
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 0
61235: PUSH
61236: LD_INT 2
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 1
61245: NEG
61246: PUSH
61247: LD_INT 1
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: LD_INT 1
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 2
61268: NEG
61269: PUSH
61270: LD_INT 2
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 2
61280: NEG
61281: PUSH
61282: LD_INT 3
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 2
61292: PUSH
61293: LD_INT 1
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 3
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: LD_INT 2
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 3
61334: NEG
61335: PUSH
61336: LD_INT 2
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61369: LD_ADDR_VAR 0 30
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: LD_INT 1
61389: NEG
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: LD_INT 0
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: LD_INT 0
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: LD_INT 1
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: LD_INT 2
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: LD_INT 2
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: PUSH
61485: LD_INT 0
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 2
61494: PUSH
61495: LD_INT 1
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 2
61504: PUSH
61505: LD_INT 2
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 1
61514: PUSH
61515: LD_INT 2
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 2
61535: NEG
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 2
61546: NEG
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 1
61558: NEG
61559: PUSH
61560: LD_INT 3
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 1
61570: PUSH
61571: LD_INT 2
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 3
61581: PUSH
61582: LD_INT 2
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 2
61591: PUSH
61592: LD_INT 3
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 2
61601: NEG
61602: PUSH
61603: LD_INT 1
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 3
61612: NEG
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61647: LD_ADDR_VAR 0 31
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: LD_INT 0
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 1
61685: PUSH
61686: LD_INT 1
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 0
61695: PUSH
61696: LD_INT 1
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: NEG
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 1
61716: NEG
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: LD_INT 2
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 1
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 2
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 2
61761: PUSH
61762: LD_INT 1
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 2
61771: PUSH
61772: LD_INT 2
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 1
61781: PUSH
61782: LD_INT 2
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 0
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: LD_INT 1
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 2
61812: NEG
61813: PUSH
61814: LD_INT 1
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 2
61824: NEG
61825: PUSH
61826: LD_INT 2
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 2
61836: NEG
61837: PUSH
61838: LD_INT 3
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 2
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 3
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 1
61869: PUSH
61870: LD_INT 3
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 1
61879: NEG
61880: PUSH
61881: LD_INT 2
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 3
61890: NEG
61891: PUSH
61892: LD_INT 2
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61925: LD_ADDR_VAR 0 32
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: LD_INT 1
61945: NEG
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 1
61953: PUSH
61954: LD_INT 0
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: LD_INT 0
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: LD_INT 1
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: LD_INT 2
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 0
62018: PUSH
62019: LD_INT 2
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 1
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 2
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 2
62050: PUSH
62051: LD_INT 2
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 1
62060: PUSH
62061: LD_INT 2
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 0
62070: PUSH
62071: LD_INT 2
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: NEG
62081: PUSH
62082: LD_INT 1
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 2
62091: NEG
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 2
62102: NEG
62103: PUSH
62104: LD_INT 1
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: LD_INT 3
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: PUSH
62127: LD_INT 2
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 3
62137: PUSH
62138: LD_INT 2
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 2
62147: PUSH
62148: LD_INT 3
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 2
62157: NEG
62158: PUSH
62159: LD_INT 1
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: LD_INT 3
62168: NEG
62169: PUSH
62170: LD_INT 1
62172: NEG
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62203: LD_ADDR_VAR 0 33
62207: PUSH
62208: LD_INT 0
62210: PUSH
62211: LD_INT 0
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: LD_INT 1
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 1
62231: PUSH
62232: LD_INT 0
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: LD_INT 1
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 1
62261: NEG
62262: PUSH
62263: LD_INT 0
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 1
62284: NEG
62285: PUSH
62286: LD_INT 2
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 1
62296: PUSH
62297: LD_INT 1
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 2
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 2
62317: PUSH
62318: LD_INT 1
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 1
62327: PUSH
62328: LD_INT 2
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: LD_INT 2
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 1
62347: NEG
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 2
62358: NEG
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 2
62369: NEG
62370: PUSH
62371: LD_INT 1
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 2
62381: NEG
62382: PUSH
62383: LD_INT 2
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 2
62393: NEG
62394: PUSH
62395: LD_INT 3
62397: NEG
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 3
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 1
62426: PUSH
62427: LD_INT 3
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: LD_INT 2
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 3
62447: NEG
62448: PUSH
62449: LD_INT 2
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62482: LD_ADDR_VAR 0 34
62486: PUSH
62487: LD_INT 0
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 0
62499: PUSH
62500: LD_INT 1
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 1
62510: PUSH
62511: LD_INT 0
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: LD_INT 1
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: LD_INT 1
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: LD_INT 0
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 1
62551: NEG
62552: PUSH
62553: LD_INT 1
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: NEG
62564: PUSH
62565: LD_INT 2
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 0
62575: PUSH
62576: LD_INT 2
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: LD_INT 1
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 2
62597: PUSH
62598: LD_INT 1
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: LD_INT 2
62607: PUSH
62608: LD_INT 2
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 1
62617: PUSH
62618: LD_INT 2
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 1
62627: NEG
62628: PUSH
62629: LD_INT 1
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 2
62638: NEG
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 2
62649: NEG
62650: PUSH
62651: LD_INT 1
62653: NEG
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 2
62661: NEG
62662: PUSH
62663: LD_INT 2
62665: NEG
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: LD_INT 3
62677: NEG
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 1
62685: PUSH
62686: LD_INT 2
62688: NEG
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 3
62696: PUSH
62697: LD_INT 2
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 2
62706: PUSH
62707: LD_INT 3
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 2
62716: NEG
62717: PUSH
62718: LD_INT 1
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 3
62727: NEG
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62762: LD_ADDR_VAR 0 35
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 0
62779: PUSH
62780: LD_INT 1
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 1
62790: PUSH
62791: LD_INT 0
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 1
62800: PUSH
62801: LD_INT 1
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 1
62831: NEG
62832: PUSH
62833: LD_INT 1
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 2
62843: PUSH
62844: LD_INT 1
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 2
62853: NEG
62854: PUSH
62855: LD_INT 1
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62874: LD_ADDR_VAR 0 36
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: LD_INT 1
62894: NEG
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 1
62902: PUSH
62903: LD_INT 0
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 1
62912: PUSH
62913: LD_INT 1
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: LD_INT 1
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 1
62932: NEG
62933: PUSH
62934: LD_INT 0
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: NEG
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 1
62955: NEG
62956: PUSH
62957: LD_INT 2
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 1
62967: PUSH
62968: LD_INT 2
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62986: LD_ADDR_VAR 0 37
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: LD_INT 0
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: LD_INT 1
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 1
63024: PUSH
63025: LD_INT 1
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 0
63034: PUSH
63035: LD_INT 1
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 1
63044: NEG
63045: PUSH
63046: LD_INT 0
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 1
63055: NEG
63056: PUSH
63057: LD_INT 1
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: PUSH
63068: LD_INT 1
63070: NEG
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: NEG
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63098: LD_ADDR_VAR 0 38
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 1
63136: PUSH
63137: LD_INT 1
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 1
63156: NEG
63157: PUSH
63158: LD_INT 0
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 1
63167: NEG
63168: PUSH
63169: LD_INT 1
63171: NEG
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 2
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 2
63189: NEG
63190: PUSH
63191: LD_INT 1
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63210: LD_ADDR_VAR 0 39
63214: PUSH
63215: LD_INT 0
63217: PUSH
63218: LD_INT 0
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: LD_INT 1
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 1
63238: PUSH
63239: LD_INT 0
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: PUSH
63249: LD_INT 1
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: LD_INT 1
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 1
63291: NEG
63292: PUSH
63293: LD_INT 2
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: LD_INT 2
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63322: LD_ADDR_VAR 0 40
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 0
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 1
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 1
63360: PUSH
63361: LD_INT 1
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: LD_INT 1
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: NEG
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 1
63391: NEG
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 1
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 1
63414: NEG
63415: PUSH
63416: LD_INT 1
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63434: LD_ADDR_VAR 0 41
63438: PUSH
63439: LD_INT 0
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: LD_INT 1
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 1
63472: PUSH
63473: LD_INT 1
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: LD_INT 1
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 1
63492: NEG
63493: PUSH
63494: LD_INT 0
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 1
63503: NEG
63504: PUSH
63505: LD_INT 1
63507: NEG
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 1
63515: NEG
63516: PUSH
63517: LD_INT 2
63519: NEG
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 1
63527: PUSH
63528: LD_INT 1
63530: NEG
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 2
63538: PUSH
63539: LD_INT 0
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 2
63548: PUSH
63549: LD_INT 1
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: LD_INT 2
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: LD_INT 2
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 1
63578: NEG
63579: PUSH
63580: LD_INT 1
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 2
63589: NEG
63590: PUSH
63591: LD_INT 0
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 2
63600: NEG
63601: PUSH
63602: LD_INT 1
63604: NEG
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 2
63612: NEG
63613: PUSH
63614: LD_INT 2
63616: NEG
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 2
63624: NEG
63625: PUSH
63626: LD_INT 3
63628: NEG
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 2
63636: PUSH
63637: LD_INT 1
63639: NEG
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 3
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 3
63657: PUSH
63658: LD_INT 1
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 3
63667: PUSH
63668: LD_INT 2
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 3
63677: PUSH
63678: LD_INT 3
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 2
63687: PUSH
63688: LD_INT 3
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 2
63697: NEG
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 3
63708: NEG
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 3
63719: NEG
63720: PUSH
63721: LD_INT 1
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 3
63731: NEG
63732: PUSH
63733: LD_INT 2
63735: NEG
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 3
63743: NEG
63744: PUSH
63745: LD_INT 3
63747: NEG
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63784: LD_ADDR_VAR 0 42
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: LD_INT 1
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 1
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: LD_INT 1
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 1
63842: NEG
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 1
63865: NEG
63866: PUSH
63867: LD_INT 2
63869: NEG
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 0
63877: PUSH
63878: LD_INT 2
63880: NEG
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: LD_INT 1
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 2
63899: PUSH
63900: LD_INT 1
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 2
63909: PUSH
63910: LD_INT 2
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 1
63919: PUSH
63920: LD_INT 2
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 0
63929: PUSH
63930: LD_INT 2
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: PUSH
63941: LD_INT 1
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 2
63950: NEG
63951: PUSH
63952: LD_INT 1
63954: NEG
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 2
63962: NEG
63963: PUSH
63964: LD_INT 2
63966: NEG
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 2
63974: NEG
63975: PUSH
63976: LD_INT 3
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: LD_INT 3
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: LD_INT 3
64001: NEG
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 1
64009: PUSH
64010: LD_INT 2
64012: NEG
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 3
64020: PUSH
64021: LD_INT 2
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 3
64030: PUSH
64031: LD_INT 3
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 2
64040: PUSH
64041: LD_INT 3
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 1
64050: PUSH
64051: LD_INT 3
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: LD_INT 3
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 1
64070: NEG
64071: PUSH
64072: LD_INT 2
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 3
64081: NEG
64082: PUSH
64083: LD_INT 2
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 3
64093: NEG
64094: PUSH
64095: LD_INT 3
64097: NEG
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64134: LD_ADDR_VAR 0 43
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 0
64151: PUSH
64152: LD_INT 1
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 1
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 1
64172: PUSH
64173: LD_INT 1
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: LD_INT 1
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 1
64192: NEG
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 1
64203: NEG
64204: PUSH
64205: LD_INT 1
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 1
64215: NEG
64216: PUSH
64217: LD_INT 2
64219: NEG
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: LD_INT 2
64230: NEG
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 1
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 2
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 2
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: LD_INT 2
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 0
64279: PUSH
64280: LD_INT 2
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: LD_INT 1
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 2
64300: NEG
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 2
64311: NEG
64312: PUSH
64313: LD_INT 1
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 1
64323: NEG
64324: PUSH
64325: LD_INT 3
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: LD_INT 3
64338: NEG
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 1
64346: PUSH
64347: LD_INT 2
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 2
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 3
64368: PUSH
64369: LD_INT 0
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 3
64378: PUSH
64379: LD_INT 1
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 1
64388: PUSH
64389: LD_INT 3
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: LD_INT 3
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: LD_INT 2
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 2
64419: NEG
64420: PUSH
64421: LD_INT 1
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 3
64430: NEG
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 3
64441: NEG
64442: PUSH
64443: LD_INT 1
64445: NEG
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64482: LD_ADDR_VAR 0 44
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: LD_INT 0
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: LD_INT 1
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 1
64520: PUSH
64521: LD_INT 1
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 1
64540: NEG
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 1
64551: NEG
64552: PUSH
64553: LD_INT 1
64555: NEG
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 1
64563: NEG
64564: PUSH
64565: LD_INT 2
64567: NEG
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 1
64575: PUSH
64576: LD_INT 1
64578: NEG
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 2
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 2
64596: PUSH
64597: LD_INT 1
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 2
64606: PUSH
64607: LD_INT 2
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 1
64616: PUSH
64617: LD_INT 2
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 1
64626: NEG
64627: PUSH
64628: LD_INT 1
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 2
64637: NEG
64638: PUSH
64639: LD_INT 0
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 2
64648: NEG
64649: PUSH
64650: LD_INT 1
64652: NEG
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 2
64660: NEG
64661: PUSH
64662: LD_INT 2
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 2
64672: NEG
64673: PUSH
64674: LD_INT 3
64676: NEG
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 2
64684: PUSH
64685: LD_INT 1
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 3
64695: PUSH
64696: LD_INT 0
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 3
64705: PUSH
64706: LD_INT 1
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 3
64715: PUSH
64716: LD_INT 2
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 3
64725: PUSH
64726: LD_INT 3
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 2
64735: PUSH
64736: LD_INT 3
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 2
64745: NEG
64746: PUSH
64747: LD_INT 1
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 3
64756: NEG
64757: PUSH
64758: LD_INT 0
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 3
64767: NEG
64768: PUSH
64769: LD_INT 1
64771: NEG
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 3
64779: NEG
64780: PUSH
64781: LD_INT 2
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 3
64791: NEG
64792: PUSH
64793: LD_INT 3
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64832: LD_ADDR_VAR 0 45
64836: PUSH
64837: LD_INT 0
64839: PUSH
64840: LD_INT 0
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: LD_INT 1
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 1
64860: PUSH
64861: LD_INT 0
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 1
64870: PUSH
64871: LD_INT 1
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: LD_INT 1
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 1
64890: NEG
64891: PUSH
64892: LD_INT 0
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 1
64901: NEG
64902: PUSH
64903: LD_INT 1
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 1
64913: NEG
64914: PUSH
64915: LD_INT 2
64917: NEG
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: LD_INT 2
64928: NEG
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 1
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 2
64947: PUSH
64948: LD_INT 1
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 2
64957: PUSH
64958: LD_INT 2
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 1
64967: PUSH
64968: LD_INT 2
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 0
64977: PUSH
64978: LD_INT 2
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 1
64987: NEG
64988: PUSH
64989: LD_INT 1
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 2
64998: NEG
64999: PUSH
65000: LD_INT 1
65002: NEG
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 2
65010: NEG
65011: PUSH
65012: LD_INT 2
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 2
65022: NEG
65023: PUSH
65024: LD_INT 3
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 1
65034: NEG
65035: PUSH
65036: LD_INT 3
65038: NEG
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 0
65046: PUSH
65047: LD_INT 3
65049: NEG
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 1
65057: PUSH
65058: LD_INT 2
65060: NEG
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 3
65068: PUSH
65069: LD_INT 2
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 3
65078: PUSH
65079: LD_INT 3
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 2
65088: PUSH
65089: LD_INT 3
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 1
65098: PUSH
65099: LD_INT 3
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 0
65108: PUSH
65109: LD_INT 3
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 1
65118: NEG
65119: PUSH
65120: LD_INT 2
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 3
65129: NEG
65130: PUSH
65131: LD_INT 2
65133: NEG
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 3
65141: NEG
65142: PUSH
65143: LD_INT 3
65145: NEG
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65182: LD_ADDR_VAR 0 46
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: LD_INT 0
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 0
65199: PUSH
65200: LD_INT 1
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 1
65210: PUSH
65211: LD_INT 0
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 1
65220: PUSH
65221: LD_INT 1
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 1
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 1
65240: NEG
65241: PUSH
65242: LD_INT 0
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: NEG
65252: PUSH
65253: LD_INT 1
65255: NEG
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 1
65263: NEG
65264: PUSH
65265: LD_INT 2
65267: NEG
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: LD_INT 2
65278: NEG
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 1
65286: PUSH
65287: LD_INT 1
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 2
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 2
65307: PUSH
65308: LD_INT 1
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 1
65317: PUSH
65318: LD_INT 2
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 0
65327: PUSH
65328: LD_INT 2
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 1
65337: NEG
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 2
65348: NEG
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 2
65359: NEG
65360: PUSH
65361: LD_INT 1
65363: NEG
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: NEG
65372: PUSH
65373: LD_INT 3
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 0
65383: PUSH
65384: LD_INT 3
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 1
65394: PUSH
65395: LD_INT 2
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 2
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 3
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 3
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 1
65436: PUSH
65437: LD_INT 3
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 0
65446: PUSH
65447: LD_INT 3
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 1
65456: NEG
65457: PUSH
65458: LD_INT 2
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 2
65467: NEG
65468: PUSH
65469: LD_INT 1
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 3
65478: NEG
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 3
65489: NEG
65490: PUSH
65491: LD_INT 1
65493: NEG
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65530: LD_ADDR_VAR 0 47
65534: PUSH
65535: LD_INT 0
65537: PUSH
65538: LD_INT 0
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 0
65547: PUSH
65548: LD_INT 1
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 1
65558: PUSH
65559: LD_INT 0
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: PUSH
65566: LD_INT 1
65568: PUSH
65569: LD_INT 1
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 0
65578: PUSH
65579: LD_INT 1
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: PUSH
65586: LD_INT 1
65588: NEG
65589: PUSH
65590: LD_INT 0
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 1
65599: NEG
65600: PUSH
65601: LD_INT 1
65603: NEG
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 1
65611: NEG
65612: PUSH
65613: LD_INT 2
65615: NEG
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: LD_INT 2
65626: NEG
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 1
65634: PUSH
65635: LD_INT 1
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 2
65645: NEG
65646: PUSH
65647: LD_INT 1
65649: NEG
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 2
65657: NEG
65658: PUSH
65659: LD_INT 2
65661: NEG
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65681: LD_ADDR_VAR 0 48
65685: PUSH
65686: LD_INT 0
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 0
65698: PUSH
65699: LD_INT 1
65701: NEG
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 1
65709: PUSH
65710: LD_INT 0
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 1
65719: PUSH
65720: LD_INT 1
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: LD_INT 1
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 1
65739: NEG
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 1
65750: NEG
65751: PUSH
65752: LD_INT 1
65754: NEG
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 1
65762: NEG
65763: PUSH
65764: LD_INT 2
65766: NEG
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 0
65774: PUSH
65775: LD_INT 2
65777: NEG
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 1
65785: PUSH
65786: LD_INT 1
65788: NEG
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 2
65796: PUSH
65797: LD_INT 0
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 2
65806: PUSH
65807: LD_INT 1
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65828: LD_ADDR_VAR 0 49
65832: PUSH
65833: LD_INT 0
65835: PUSH
65836: LD_INT 0
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 0
65845: PUSH
65846: LD_INT 1
65848: NEG
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 1
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 1
65866: PUSH
65867: LD_INT 1
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 0
65876: PUSH
65877: LD_INT 1
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 1
65886: NEG
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 1
65897: NEG
65898: PUSH
65899: LD_INT 1
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 1
65909: PUSH
65910: LD_INT 1
65912: NEG
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 2
65920: PUSH
65921: LD_INT 0
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 2
65930: PUSH
65931: LD_INT 1
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 2
65940: PUSH
65941: LD_INT 2
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: PUSH
65951: LD_INT 2
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65972: LD_ADDR_VAR 0 50
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: LD_INT 0
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: LD_INT 1
65992: NEG
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 1
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 1
66010: PUSH
66011: LD_INT 1
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: LD_INT 1
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 1
66030: NEG
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 1
66041: NEG
66042: PUSH
66043: LD_INT 1
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 2
66053: PUSH
66054: LD_INT 1
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 2
66063: PUSH
66064: LD_INT 2
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 1
66073: PUSH
66074: LD_INT 2
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 0
66083: PUSH
66084: LD_INT 2
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 1
66093: NEG
66094: PUSH
66095: LD_INT 1
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66116: LD_ADDR_VAR 0 51
66120: PUSH
66121: LD_INT 0
66123: PUSH
66124: LD_INT 0
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 0
66133: PUSH
66134: LD_INT 1
66136: NEG
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 1
66144: PUSH
66145: LD_INT 0
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 1
66154: PUSH
66155: LD_INT 1
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 0
66164: PUSH
66165: LD_INT 1
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 1
66174: NEG
66175: PUSH
66176: LD_INT 0
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: LD_INT 1
66189: NEG
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 1
66197: PUSH
66198: LD_INT 2
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 0
66207: PUSH
66208: LD_INT 2
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 1
66217: NEG
66218: PUSH
66219: LD_INT 1
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 2
66228: NEG
66229: PUSH
66230: LD_INT 0
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 2
66239: NEG
66240: PUSH
66241: LD_INT 1
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66263: LD_ADDR_VAR 0 52
66267: PUSH
66268: LD_INT 0
66270: PUSH
66271: LD_INT 0
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 0
66280: PUSH
66281: LD_INT 1
66283: NEG
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 1
66291: PUSH
66292: LD_INT 0
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 1
66301: PUSH
66302: LD_INT 1
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: LD_INT 1
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 1
66321: NEG
66322: PUSH
66323: LD_INT 0
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 1
66332: NEG
66333: PUSH
66334: LD_INT 1
66336: NEG
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 1
66344: NEG
66345: PUSH
66346: LD_INT 2
66348: NEG
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 1
66356: NEG
66357: PUSH
66358: LD_INT 1
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 2
66367: NEG
66368: PUSH
66369: LD_INT 0
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 2
66378: NEG
66379: PUSH
66380: LD_INT 1
66382: NEG
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 2
66390: NEG
66391: PUSH
66392: LD_INT 2
66394: NEG
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: LIST
66413: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66414: LD_ADDR_VAR 0 53
66418: PUSH
66419: LD_INT 0
66421: PUSH
66422: LD_INT 0
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 0
66431: PUSH
66432: LD_INT 1
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 1
66442: PUSH
66443: LD_INT 0
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 1
66452: PUSH
66453: LD_INT 1
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 0
66462: PUSH
66463: LD_INT 1
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 1
66472: NEG
66473: PUSH
66474: LD_INT 0
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 1
66483: NEG
66484: PUSH
66485: LD_INT 1
66487: NEG
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 1
66495: NEG
66496: PUSH
66497: LD_INT 2
66499: NEG
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 0
66507: PUSH
66508: LD_INT 2
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 1
66518: PUSH
66519: LD_INT 1
66521: NEG
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 2
66529: PUSH
66530: LD_INT 0
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 2
66539: PUSH
66540: LD_INT 1
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 2
66549: PUSH
66550: LD_INT 2
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 1
66559: PUSH
66560: LD_INT 2
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 0
66569: PUSH
66570: LD_INT 2
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 1
66579: NEG
66580: PUSH
66581: LD_INT 1
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 2
66590: NEG
66591: PUSH
66592: LD_INT 0
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 2
66601: NEG
66602: PUSH
66603: LD_INT 1
66605: NEG
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 2
66613: NEG
66614: PUSH
66615: LD_INT 2
66617: NEG
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66644: LD_ADDR_VAR 0 54
66648: PUSH
66649: LD_INT 0
66651: PUSH
66652: LD_INT 0
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 0
66661: PUSH
66662: LD_INT 1
66664: NEG
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 1
66672: PUSH
66673: LD_INT 0
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 1
66682: PUSH
66683: LD_INT 1
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: LD_INT 1
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: LD_INT 1
66702: NEG
66703: PUSH
66704: LD_INT 0
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 1
66713: NEG
66714: PUSH
66715: LD_INT 1
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 1
66725: NEG
66726: PUSH
66727: LD_INT 2
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 0
66737: PUSH
66738: LD_INT 2
66740: NEG
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 1
66748: PUSH
66749: LD_INT 1
66751: NEG
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 2
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 2
66769: PUSH
66770: LD_INT 1
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 2
66779: PUSH
66780: LD_INT 2
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 1
66789: PUSH
66790: LD_INT 2
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 0
66799: PUSH
66800: LD_INT 2
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 1
66809: NEG
66810: PUSH
66811: LD_INT 1
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 2
66820: NEG
66821: PUSH
66822: LD_INT 0
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 2
66831: NEG
66832: PUSH
66833: LD_INT 1
66835: NEG
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 2
66843: NEG
66844: PUSH
66845: LD_INT 2
66847: NEG
66848: PUSH
66849: EMPTY
66850: LIST
66851: LIST
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66874: LD_ADDR_VAR 0 55
66878: PUSH
66879: LD_INT 0
66881: PUSH
66882: LD_INT 0
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: LD_INT 1
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 1
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 1
66912: PUSH
66913: LD_INT 1
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 0
66922: PUSH
66923: LD_INT 1
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 1
66932: NEG
66933: PUSH
66934: LD_INT 0
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 1
66943: NEG
66944: PUSH
66945: LD_INT 1
66947: NEG
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 1
66955: NEG
66956: PUSH
66957: LD_INT 2
66959: NEG
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 0
66967: PUSH
66968: LD_INT 2
66970: NEG
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: LD_INT 1
66978: PUSH
66979: LD_INT 1
66981: NEG
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 2
66989: PUSH
66990: LD_INT 0
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 2
66999: PUSH
67000: LD_INT 1
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 2
67009: PUSH
67010: LD_INT 2
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 1
67019: PUSH
67020: LD_INT 2
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 0
67029: PUSH
67030: LD_INT 2
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: PUSH
67037: LD_INT 1
67039: NEG
67040: PUSH
67041: LD_INT 1
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 2
67050: NEG
67051: PUSH
67052: LD_INT 0
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 2
67061: NEG
67062: PUSH
67063: LD_INT 1
67065: NEG
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 2
67073: NEG
67074: PUSH
67075: LD_INT 2
67077: NEG
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: LIST
67101: LIST
67102: LIST
67103: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67104: LD_ADDR_VAR 0 56
67108: PUSH
67109: LD_INT 0
67111: PUSH
67112: LD_INT 0
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 0
67121: PUSH
67122: LD_INT 1
67124: NEG
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 1
67132: PUSH
67133: LD_INT 0
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 1
67142: PUSH
67143: LD_INT 1
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 0
67152: PUSH
67153: LD_INT 1
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: LD_INT 1
67162: NEG
67163: PUSH
67164: LD_INT 0
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 1
67173: NEG
67174: PUSH
67175: LD_INT 1
67177: NEG
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PUSH
67183: LD_INT 1
67185: NEG
67186: PUSH
67187: LD_INT 2
67189: NEG
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 0
67197: PUSH
67198: LD_INT 2
67200: NEG
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 1
67208: PUSH
67209: LD_INT 1
67211: NEG
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 2
67219: PUSH
67220: LD_INT 0
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 2
67229: PUSH
67230: LD_INT 1
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 2
67239: PUSH
67240: LD_INT 2
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 1
67249: PUSH
67250: LD_INT 2
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 0
67259: PUSH
67260: LD_INT 2
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 1
67269: NEG
67270: PUSH
67271: LD_INT 1
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 2
67280: NEG
67281: PUSH
67282: LD_INT 0
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 2
67291: NEG
67292: PUSH
67293: LD_INT 1
67295: NEG
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PUSH
67301: LD_INT 2
67303: NEG
67304: PUSH
67305: LD_INT 2
67307: NEG
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67334: LD_ADDR_VAR 0 57
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: LD_INT 0
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PUSH
67349: LD_INT 0
67351: PUSH
67352: LD_INT 1
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 1
67362: PUSH
67363: LD_INT 0
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 1
67372: PUSH
67373: LD_INT 1
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 0
67382: PUSH
67383: LD_INT 1
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 1
67392: NEG
67393: PUSH
67394: LD_INT 0
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 1
67403: NEG
67404: PUSH
67405: LD_INT 1
67407: NEG
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 1
67415: NEG
67416: PUSH
67417: LD_INT 2
67419: NEG
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 0
67427: PUSH
67428: LD_INT 2
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 1
67438: PUSH
67439: LD_INT 1
67441: NEG
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 2
67449: PUSH
67450: LD_INT 0
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 2
67459: PUSH
67460: LD_INT 1
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: LD_INT 2
67469: PUSH
67470: LD_INT 2
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 1
67479: PUSH
67480: LD_INT 2
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 0
67489: PUSH
67490: LD_INT 2
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 1
67499: NEG
67500: PUSH
67501: LD_INT 1
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 2
67510: NEG
67511: PUSH
67512: LD_INT 0
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 2
67521: NEG
67522: PUSH
67523: LD_INT 1
67525: NEG
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 2
67533: NEG
67534: PUSH
67535: LD_INT 2
67537: NEG
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: LIST
67563: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67564: LD_ADDR_VAR 0 58
67568: PUSH
67569: LD_INT 0
67571: PUSH
67572: LD_INT 0
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 0
67581: PUSH
67582: LD_INT 1
67584: NEG
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 1
67592: PUSH
67593: LD_INT 0
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 1
67602: PUSH
67603: LD_INT 1
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 0
67612: PUSH
67613: LD_INT 1
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 1
67622: NEG
67623: PUSH
67624: LD_INT 0
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 1
67633: NEG
67634: PUSH
67635: LD_INT 1
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 1
67645: NEG
67646: PUSH
67647: LD_INT 2
67649: NEG
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 0
67657: PUSH
67658: LD_INT 2
67660: NEG
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 1
67668: PUSH
67669: LD_INT 1
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 2
67679: PUSH
67680: LD_INT 0
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 2
67689: PUSH
67690: LD_INT 1
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 2
67699: PUSH
67700: LD_INT 2
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 1
67709: PUSH
67710: LD_INT 2
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 0
67719: PUSH
67720: LD_INT 2
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 1
67729: NEG
67730: PUSH
67731: LD_INT 1
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: PUSH
67738: LD_INT 2
67740: NEG
67741: PUSH
67742: LD_INT 0
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 2
67751: NEG
67752: PUSH
67753: LD_INT 1
67755: NEG
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 2
67763: NEG
67764: PUSH
67765: LD_INT 2
67767: NEG
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67794: LD_ADDR_VAR 0 59
67798: PUSH
67799: LD_INT 0
67801: PUSH
67802: LD_INT 0
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: LD_INT 1
67814: NEG
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: PUSH
67820: LD_INT 1
67822: PUSH
67823: LD_INT 0
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 1
67832: PUSH
67833: LD_INT 1
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 0
67842: PUSH
67843: LD_INT 1
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 1
67852: NEG
67853: PUSH
67854: LD_INT 0
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 1
67863: NEG
67864: PUSH
67865: LD_INT 1
67867: NEG
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67882: LD_ADDR_VAR 0 60
67886: PUSH
67887: LD_INT 0
67889: PUSH
67890: LD_INT 0
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 0
67899: PUSH
67900: LD_INT 1
67902: NEG
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 1
67910: PUSH
67911: LD_INT 0
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 1
67920: PUSH
67921: LD_INT 1
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 0
67930: PUSH
67931: LD_INT 1
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 1
67940: NEG
67941: PUSH
67942: LD_INT 0
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 1
67951: NEG
67952: PUSH
67953: LD_INT 1
67955: NEG
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67970: LD_ADDR_VAR 0 61
67974: PUSH
67975: LD_INT 0
67977: PUSH
67978: LD_INT 0
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 0
67987: PUSH
67988: LD_INT 1
67990: NEG
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 1
67998: PUSH
67999: LD_INT 0
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 1
68008: PUSH
68009: LD_INT 1
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 0
68018: PUSH
68019: LD_INT 1
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 1
68028: NEG
68029: PUSH
68030: LD_INT 0
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 1
68039: NEG
68040: PUSH
68041: LD_INT 1
68043: NEG
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68058: LD_ADDR_VAR 0 62
68062: PUSH
68063: LD_INT 0
68065: PUSH
68066: LD_INT 0
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 0
68075: PUSH
68076: LD_INT 1
68078: NEG
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 1
68086: PUSH
68087: LD_INT 0
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 1
68096: PUSH
68097: LD_INT 1
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 0
68106: PUSH
68107: LD_INT 1
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 1
68116: NEG
68117: PUSH
68118: LD_INT 0
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 1
68127: NEG
68128: PUSH
68129: LD_INT 1
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68146: LD_ADDR_VAR 0 63
68150: PUSH
68151: LD_INT 0
68153: PUSH
68154: LD_INT 0
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 0
68163: PUSH
68164: LD_INT 1
68166: NEG
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 1
68174: PUSH
68175: LD_INT 0
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 1
68184: PUSH
68185: LD_INT 1
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 0
68194: PUSH
68195: LD_INT 1
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 1
68204: NEG
68205: PUSH
68206: LD_INT 0
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 1
68215: NEG
68216: PUSH
68217: LD_INT 1
68219: NEG
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68234: LD_ADDR_VAR 0 64
68238: PUSH
68239: LD_INT 0
68241: PUSH
68242: LD_INT 0
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 0
68251: PUSH
68252: LD_INT 1
68254: NEG
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 1
68262: PUSH
68263: LD_INT 0
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 1
68272: PUSH
68273: LD_INT 1
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 0
68282: PUSH
68283: LD_INT 1
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: LD_INT 1
68292: NEG
68293: PUSH
68294: LD_INT 0
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 1
68303: NEG
68304: PUSH
68305: LD_INT 1
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: ST_TO_ADDR
// end ; 1 :
68322: GO 74219
68324: LD_INT 1
68326: DOUBLE
68327: EQUAL
68328: IFTRUE 68332
68330: GO 70955
68332: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68333: LD_ADDR_VAR 0 11
68337: PUSH
68338: LD_INT 1
68340: NEG
68341: PUSH
68342: LD_INT 3
68344: NEG
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 0
68352: PUSH
68353: LD_INT 3
68355: NEG
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 1
68363: PUSH
68364: LD_INT 2
68366: NEG
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: LIST
68376: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68377: LD_ADDR_VAR 0 12
68381: PUSH
68382: LD_INT 2
68384: PUSH
68385: LD_INT 1
68387: NEG
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 3
68395: PUSH
68396: LD_INT 0
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 3
68405: PUSH
68406: LD_INT 1
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: LIST
68417: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68418: LD_ADDR_VAR 0 13
68422: PUSH
68423: LD_INT 3
68425: PUSH
68426: LD_INT 2
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 3
68435: PUSH
68436: LD_INT 3
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 2
68445: PUSH
68446: LD_INT 3
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: LIST
68457: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68458: LD_ADDR_VAR 0 14
68462: PUSH
68463: LD_INT 1
68465: PUSH
68466: LD_INT 3
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 0
68475: PUSH
68476: LD_INT 3
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 1
68485: NEG
68486: PUSH
68487: LD_INT 2
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: LIST
68498: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68499: LD_ADDR_VAR 0 15
68503: PUSH
68504: LD_INT 2
68506: NEG
68507: PUSH
68508: LD_INT 1
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 3
68517: NEG
68518: PUSH
68519: LD_INT 0
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 3
68528: NEG
68529: PUSH
68530: LD_INT 1
68532: NEG
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: LIST
68542: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68543: LD_ADDR_VAR 0 16
68547: PUSH
68548: LD_INT 2
68550: NEG
68551: PUSH
68552: LD_INT 3
68554: NEG
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 3
68562: NEG
68563: PUSH
68564: LD_INT 2
68566: NEG
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 3
68574: NEG
68575: PUSH
68576: LD_INT 3
68578: NEG
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: LIST
68588: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68589: LD_ADDR_VAR 0 17
68593: PUSH
68594: LD_INT 1
68596: NEG
68597: PUSH
68598: LD_INT 3
68600: NEG
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 0
68608: PUSH
68609: LD_INT 3
68611: NEG
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 1
68619: PUSH
68620: LD_INT 2
68622: NEG
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: LIST
68632: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68633: LD_ADDR_VAR 0 18
68637: PUSH
68638: LD_INT 2
68640: PUSH
68641: LD_INT 1
68643: NEG
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 3
68651: PUSH
68652: LD_INT 0
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 3
68661: PUSH
68662: LD_INT 1
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: LIST
68673: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68674: LD_ADDR_VAR 0 19
68678: PUSH
68679: LD_INT 3
68681: PUSH
68682: LD_INT 2
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 3
68691: PUSH
68692: LD_INT 3
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 2
68701: PUSH
68702: LD_INT 3
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: LIST
68713: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68714: LD_ADDR_VAR 0 20
68718: PUSH
68719: LD_INT 1
68721: PUSH
68722: LD_INT 3
68724: PUSH
68725: EMPTY
68726: LIST
68727: LIST
68728: PUSH
68729: LD_INT 0
68731: PUSH
68732: LD_INT 3
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 1
68741: NEG
68742: PUSH
68743: LD_INT 2
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: LIST
68754: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68755: LD_ADDR_VAR 0 21
68759: PUSH
68760: LD_INT 2
68762: NEG
68763: PUSH
68764: LD_INT 1
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 3
68773: NEG
68774: PUSH
68775: LD_INT 0
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 3
68784: NEG
68785: PUSH
68786: LD_INT 1
68788: NEG
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: LIST
68798: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68799: LD_ADDR_VAR 0 22
68803: PUSH
68804: LD_INT 2
68806: NEG
68807: PUSH
68808: LD_INT 3
68810: NEG
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 3
68818: NEG
68819: PUSH
68820: LD_INT 2
68822: NEG
68823: PUSH
68824: EMPTY
68825: LIST
68826: LIST
68827: PUSH
68828: LD_INT 3
68830: NEG
68831: PUSH
68832: LD_INT 3
68834: NEG
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: LIST
68844: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68845: LD_ADDR_VAR 0 23
68849: PUSH
68850: LD_INT 0
68852: PUSH
68853: LD_INT 3
68855: NEG
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 1
68863: NEG
68864: PUSH
68865: LD_INT 4
68867: NEG
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 1
68875: PUSH
68876: LD_INT 3
68878: NEG
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: LIST
68888: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68889: LD_ADDR_VAR 0 24
68893: PUSH
68894: LD_INT 3
68896: PUSH
68897: LD_INT 0
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 3
68906: PUSH
68907: LD_INT 1
68909: NEG
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 4
68917: PUSH
68918: LD_INT 1
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: LIST
68929: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68930: LD_ADDR_VAR 0 25
68934: PUSH
68935: LD_INT 3
68937: PUSH
68938: LD_INT 3
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 4
68947: PUSH
68948: LD_INT 3
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 3
68957: PUSH
68958: LD_INT 4
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: LIST
68969: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68970: LD_ADDR_VAR 0 26
68974: PUSH
68975: LD_INT 0
68977: PUSH
68978: LD_INT 3
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 1
68987: PUSH
68988: LD_INT 4
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 1
68997: NEG
68998: PUSH
68999: LD_INT 3
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: LIST
69010: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69011: LD_ADDR_VAR 0 27
69015: PUSH
69016: LD_INT 3
69018: NEG
69019: PUSH
69020: LD_INT 0
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 3
69029: NEG
69030: PUSH
69031: LD_INT 1
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 4
69040: NEG
69041: PUSH
69042: LD_INT 1
69044: NEG
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: LIST
69054: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69055: LD_ADDR_VAR 0 28
69059: PUSH
69060: LD_INT 3
69062: NEG
69063: PUSH
69064: LD_INT 3
69066: NEG
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 3
69074: NEG
69075: PUSH
69076: LD_INT 4
69078: NEG
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 4
69086: NEG
69087: PUSH
69088: LD_INT 3
69090: NEG
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: LIST
69100: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69101: LD_ADDR_VAR 0 29
69105: PUSH
69106: LD_INT 1
69108: NEG
69109: PUSH
69110: LD_INT 3
69112: NEG
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: LD_INT 0
69120: PUSH
69121: LD_INT 3
69123: NEG
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 1
69131: PUSH
69132: LD_INT 2
69134: NEG
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 1
69142: NEG
69143: PUSH
69144: LD_INT 4
69146: NEG
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 0
69154: PUSH
69155: LD_INT 4
69157: NEG
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 1
69165: PUSH
69166: LD_INT 3
69168: NEG
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: LD_INT 1
69176: NEG
69177: PUSH
69178: LD_INT 5
69180: NEG
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 0
69188: PUSH
69189: LD_INT 5
69191: NEG
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 1
69199: PUSH
69200: LD_INT 4
69202: NEG
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 1
69210: NEG
69211: PUSH
69212: LD_INT 6
69214: NEG
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 0
69222: PUSH
69223: LD_INT 6
69225: NEG
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 1
69233: PUSH
69234: LD_INT 5
69236: NEG
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69256: LD_ADDR_VAR 0 30
69260: PUSH
69261: LD_INT 2
69263: PUSH
69264: LD_INT 1
69266: NEG
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 3
69274: PUSH
69275: LD_INT 0
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 3
69284: PUSH
69285: LD_INT 1
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 3
69294: PUSH
69295: LD_INT 1
69297: NEG
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 4
69305: PUSH
69306: LD_INT 0
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 4
69315: PUSH
69316: LD_INT 1
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 4
69325: PUSH
69326: LD_INT 1
69328: NEG
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 5
69336: PUSH
69337: LD_INT 0
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 5
69346: PUSH
69347: LD_INT 1
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 5
69356: PUSH
69357: LD_INT 1
69359: NEG
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 6
69367: PUSH
69368: LD_INT 0
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 6
69377: PUSH
69378: LD_INT 1
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69399: LD_ADDR_VAR 0 31
69403: PUSH
69404: LD_INT 3
69406: PUSH
69407: LD_INT 2
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 3
69416: PUSH
69417: LD_INT 3
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 2
69426: PUSH
69427: LD_INT 3
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 4
69436: PUSH
69437: LD_INT 3
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 4
69446: PUSH
69447: LD_INT 4
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 3
69456: PUSH
69457: LD_INT 4
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 5
69466: PUSH
69467: LD_INT 4
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 5
69476: PUSH
69477: LD_INT 5
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 4
69486: PUSH
69487: LD_INT 5
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PUSH
69494: LD_INT 6
69496: PUSH
69497: LD_INT 5
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PUSH
69504: LD_INT 6
69506: PUSH
69507: LD_INT 6
69509: PUSH
69510: EMPTY
69511: LIST
69512: LIST
69513: PUSH
69514: LD_INT 5
69516: PUSH
69517: LD_INT 6
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69538: LD_ADDR_VAR 0 32
69542: PUSH
69543: LD_INT 1
69545: PUSH
69546: LD_INT 3
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 0
69555: PUSH
69556: LD_INT 3
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 1
69565: NEG
69566: PUSH
69567: LD_INT 2
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 1
69576: PUSH
69577: LD_INT 4
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 0
69586: PUSH
69587: LD_INT 4
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 1
69596: NEG
69597: PUSH
69598: LD_INT 3
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 1
69607: PUSH
69608: LD_INT 5
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 0
69617: PUSH
69618: LD_INT 5
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 1
69627: NEG
69628: PUSH
69629: LD_INT 4
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 1
69638: PUSH
69639: LD_INT 6
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 0
69648: PUSH
69649: LD_INT 6
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 1
69658: NEG
69659: PUSH
69660: LD_INT 5
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69681: LD_ADDR_VAR 0 33
69685: PUSH
69686: LD_INT 2
69688: NEG
69689: PUSH
69690: LD_INT 1
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 3
69699: NEG
69700: PUSH
69701: LD_INT 0
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 3
69710: NEG
69711: PUSH
69712: LD_INT 1
69714: NEG
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 3
69722: NEG
69723: PUSH
69724: LD_INT 1
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 4
69733: NEG
69734: PUSH
69735: LD_INT 0
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 4
69744: NEG
69745: PUSH
69746: LD_INT 1
69748: NEG
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 4
69756: NEG
69757: PUSH
69758: LD_INT 1
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 5
69767: NEG
69768: PUSH
69769: LD_INT 0
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 5
69778: NEG
69779: PUSH
69780: LD_INT 1
69782: NEG
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 5
69790: NEG
69791: PUSH
69792: LD_INT 1
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 6
69801: NEG
69802: PUSH
69803: LD_INT 0
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 6
69812: NEG
69813: PUSH
69814: LD_INT 1
69816: NEG
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69836: LD_ADDR_VAR 0 34
69840: PUSH
69841: LD_INT 2
69843: NEG
69844: PUSH
69845: LD_INT 3
69847: NEG
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 3
69855: NEG
69856: PUSH
69857: LD_INT 2
69859: NEG
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 3
69867: NEG
69868: PUSH
69869: LD_INT 3
69871: NEG
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 3
69879: NEG
69880: PUSH
69881: LD_INT 4
69883: NEG
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 4
69891: NEG
69892: PUSH
69893: LD_INT 3
69895: NEG
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 4
69903: NEG
69904: PUSH
69905: LD_INT 4
69907: NEG
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 4
69915: NEG
69916: PUSH
69917: LD_INT 5
69919: NEG
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 5
69927: NEG
69928: PUSH
69929: LD_INT 4
69931: NEG
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 5
69939: NEG
69940: PUSH
69941: LD_INT 5
69943: NEG
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 5
69951: NEG
69952: PUSH
69953: LD_INT 6
69955: NEG
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 6
69963: NEG
69964: PUSH
69965: LD_INT 5
69967: NEG
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 6
69975: NEG
69976: PUSH
69977: LD_INT 6
69979: NEG
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69999: LD_ADDR_VAR 0 41
70003: PUSH
70004: LD_INT 0
70006: PUSH
70007: LD_INT 2
70009: NEG
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: LD_INT 1
70017: NEG
70018: PUSH
70019: LD_INT 3
70021: NEG
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 1
70029: PUSH
70030: LD_INT 2
70032: NEG
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: LIST
70042: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70043: LD_ADDR_VAR 0 42
70047: PUSH
70048: LD_INT 2
70050: PUSH
70051: LD_INT 0
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 2
70060: PUSH
70061: LD_INT 1
70063: NEG
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 3
70071: PUSH
70072: LD_INT 1
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: LIST
70083: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70084: LD_ADDR_VAR 0 43
70088: PUSH
70089: LD_INT 2
70091: PUSH
70092: LD_INT 2
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 3
70101: PUSH
70102: LD_INT 2
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 2
70111: PUSH
70112: LD_INT 3
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: LIST
70123: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70124: LD_ADDR_VAR 0 44
70128: PUSH
70129: LD_INT 0
70131: PUSH
70132: LD_INT 2
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 1
70141: PUSH
70142: LD_INT 3
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 1
70151: NEG
70152: PUSH
70153: LD_INT 2
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: LIST
70164: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70165: LD_ADDR_VAR 0 45
70169: PUSH
70170: LD_INT 2
70172: NEG
70173: PUSH
70174: LD_INT 0
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 2
70183: NEG
70184: PUSH
70185: LD_INT 1
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 3
70194: NEG
70195: PUSH
70196: LD_INT 1
70198: NEG
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: LIST
70208: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70209: LD_ADDR_VAR 0 46
70213: PUSH
70214: LD_INT 2
70216: NEG
70217: PUSH
70218: LD_INT 2
70220: NEG
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 2
70228: NEG
70229: PUSH
70230: LD_INT 3
70232: NEG
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 3
70240: NEG
70241: PUSH
70242: LD_INT 2
70244: NEG
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: LIST
70254: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70255: LD_ADDR_VAR 0 47
70259: PUSH
70260: LD_INT 2
70262: NEG
70263: PUSH
70264: LD_INT 3
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 1
70274: NEG
70275: PUSH
70276: LD_INT 3
70278: NEG
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70288: LD_ADDR_VAR 0 48
70292: PUSH
70293: LD_INT 1
70295: PUSH
70296: LD_INT 2
70298: NEG
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 2
70306: PUSH
70307: LD_INT 1
70309: NEG
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70319: LD_ADDR_VAR 0 49
70323: PUSH
70324: LD_INT 3
70326: PUSH
70327: LD_INT 1
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 3
70336: PUSH
70337: LD_INT 2
70339: PUSH
70340: EMPTY
70341: LIST
70342: LIST
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70348: LD_ADDR_VAR 0 50
70352: PUSH
70353: LD_INT 2
70355: PUSH
70356: LD_INT 3
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 1
70365: PUSH
70366: LD_INT 3
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70377: LD_ADDR_VAR 0 51
70381: PUSH
70382: LD_INT 1
70384: NEG
70385: PUSH
70386: LD_INT 2
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 2
70395: NEG
70396: PUSH
70397: LD_INT 1
70399: PUSH
70400: EMPTY
70401: LIST
70402: LIST
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70408: LD_ADDR_VAR 0 52
70412: PUSH
70413: LD_INT 3
70415: NEG
70416: PUSH
70417: LD_INT 1
70419: NEG
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 3
70427: NEG
70428: PUSH
70429: LD_INT 2
70431: NEG
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70441: LD_ADDR_VAR 0 53
70445: PUSH
70446: LD_INT 1
70448: NEG
70449: PUSH
70450: LD_INT 3
70452: NEG
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 0
70460: PUSH
70461: LD_INT 3
70463: NEG
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 1
70471: PUSH
70472: LD_INT 2
70474: NEG
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: LIST
70484: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70485: LD_ADDR_VAR 0 54
70489: PUSH
70490: LD_INT 2
70492: PUSH
70493: LD_INT 1
70495: NEG
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 3
70503: PUSH
70504: LD_INT 0
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 3
70513: PUSH
70514: LD_INT 1
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: LIST
70525: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70526: LD_ADDR_VAR 0 55
70530: PUSH
70531: LD_INT 3
70533: PUSH
70534: LD_INT 2
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 3
70543: PUSH
70544: LD_INT 3
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 2
70553: PUSH
70554: LD_INT 3
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: LIST
70565: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70566: LD_ADDR_VAR 0 56
70570: PUSH
70571: LD_INT 1
70573: PUSH
70574: LD_INT 3
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 0
70583: PUSH
70584: LD_INT 3
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 1
70593: NEG
70594: PUSH
70595: LD_INT 2
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: LIST
70606: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70607: LD_ADDR_VAR 0 57
70611: PUSH
70612: LD_INT 2
70614: NEG
70615: PUSH
70616: LD_INT 1
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 3
70625: NEG
70626: PUSH
70627: LD_INT 0
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: LD_INT 3
70636: NEG
70637: PUSH
70638: LD_INT 1
70640: NEG
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: LIST
70650: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70651: LD_ADDR_VAR 0 58
70655: PUSH
70656: LD_INT 2
70658: NEG
70659: PUSH
70660: LD_INT 3
70662: NEG
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 3
70670: NEG
70671: PUSH
70672: LD_INT 2
70674: NEG
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 3
70682: NEG
70683: PUSH
70684: LD_INT 3
70686: NEG
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: LIST
70696: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70697: LD_ADDR_VAR 0 59
70701: PUSH
70702: LD_INT 1
70704: NEG
70705: PUSH
70706: LD_INT 2
70708: NEG
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: LD_INT 0
70716: PUSH
70717: LD_INT 2
70719: NEG
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 1
70727: PUSH
70728: LD_INT 1
70730: NEG
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: LIST
70740: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70741: LD_ADDR_VAR 0 60
70745: PUSH
70746: LD_INT 1
70748: PUSH
70749: LD_INT 1
70751: NEG
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: LD_INT 2
70759: PUSH
70760: LD_INT 0
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 2
70769: PUSH
70770: LD_INT 1
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: LIST
70781: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70782: LD_ADDR_VAR 0 61
70786: PUSH
70787: LD_INT 2
70789: PUSH
70790: LD_INT 1
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 2
70799: PUSH
70800: LD_INT 2
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 1
70809: PUSH
70810: LD_INT 2
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: LIST
70821: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70822: LD_ADDR_VAR 0 62
70826: PUSH
70827: LD_INT 1
70829: PUSH
70830: LD_INT 2
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 0
70839: PUSH
70840: LD_INT 2
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PUSH
70847: LD_INT 1
70849: NEG
70850: PUSH
70851: LD_INT 1
70853: PUSH
70854: EMPTY
70855: LIST
70856: LIST
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: LIST
70862: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70863: LD_ADDR_VAR 0 63
70867: PUSH
70868: LD_INT 1
70870: NEG
70871: PUSH
70872: LD_INT 1
70874: PUSH
70875: EMPTY
70876: LIST
70877: LIST
70878: PUSH
70879: LD_INT 2
70881: NEG
70882: PUSH
70883: LD_INT 0
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 2
70892: NEG
70893: PUSH
70894: LD_INT 1
70896: NEG
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: LIST
70906: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70907: LD_ADDR_VAR 0 64
70911: PUSH
70912: LD_INT 1
70914: NEG
70915: PUSH
70916: LD_INT 2
70918: NEG
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: PUSH
70924: LD_INT 2
70926: NEG
70927: PUSH
70928: LD_INT 1
70930: NEG
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 2
70938: NEG
70939: PUSH
70940: LD_INT 2
70942: NEG
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: LIST
70952: ST_TO_ADDR
// end ; 2 :
70953: GO 74219
70955: LD_INT 2
70957: DOUBLE
70958: EQUAL
70959: IFTRUE 70963
70961: GO 74218
70963: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70964: LD_ADDR_VAR 0 29
70968: PUSH
70969: LD_INT 4
70971: PUSH
70972: LD_INT 0
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 4
70981: PUSH
70982: LD_INT 1
70984: NEG
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: LD_INT 5
70992: PUSH
70993: LD_INT 0
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 5
71002: PUSH
71003: LD_INT 1
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 4
71012: PUSH
71013: LD_INT 1
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 3
71022: PUSH
71023: LD_INT 0
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 3
71032: PUSH
71033: LD_INT 1
71035: NEG
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 3
71043: PUSH
71044: LD_INT 2
71046: NEG
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 5
71054: PUSH
71055: LD_INT 2
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 3
71064: PUSH
71065: LD_INT 3
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 3
71074: PUSH
71075: LD_INT 2
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: LD_INT 4
71084: PUSH
71085: LD_INT 3
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 4
71094: PUSH
71095: LD_INT 4
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 3
71104: PUSH
71105: LD_INT 4
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 2
71114: PUSH
71115: LD_INT 3
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 2
71124: PUSH
71125: LD_INT 2
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PUSH
71132: LD_INT 4
71134: PUSH
71135: LD_INT 2
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: LD_INT 2
71144: PUSH
71145: LD_INT 4
71147: PUSH
71148: EMPTY
71149: LIST
71150: LIST
71151: PUSH
71152: LD_INT 0
71154: PUSH
71155: LD_INT 4
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: LD_INT 0
71164: PUSH
71165: LD_INT 3
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: LD_INT 1
71174: PUSH
71175: LD_INT 4
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: LD_INT 1
71184: PUSH
71185: LD_INT 5
71187: PUSH
71188: EMPTY
71189: LIST
71190: LIST
71191: PUSH
71192: LD_INT 0
71194: PUSH
71195: LD_INT 5
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 1
71204: NEG
71205: PUSH
71206: LD_INT 4
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_INT 1
71215: NEG
71216: PUSH
71217: LD_INT 3
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 2
71226: PUSH
71227: LD_INT 5
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 2
71236: NEG
71237: PUSH
71238: LD_INT 3
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 3
71247: NEG
71248: PUSH
71249: LD_INT 0
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 3
71258: NEG
71259: PUSH
71260: LD_INT 1
71262: NEG
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: PUSH
71268: LD_INT 2
71270: NEG
71271: PUSH
71272: LD_INT 0
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PUSH
71279: LD_INT 2
71281: NEG
71282: PUSH
71283: LD_INT 1
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: LD_INT 3
71292: NEG
71293: PUSH
71294: LD_INT 1
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 4
71303: NEG
71304: PUSH
71305: LD_INT 0
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 4
71314: NEG
71315: PUSH
71316: LD_INT 1
71318: NEG
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: LD_INT 4
71326: NEG
71327: PUSH
71328: LD_INT 2
71330: NEG
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 2
71338: NEG
71339: PUSH
71340: LD_INT 2
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: PUSH
71347: LD_INT 4
71349: NEG
71350: PUSH
71351: LD_INT 4
71353: NEG
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 4
71361: NEG
71362: PUSH
71363: LD_INT 5
71365: NEG
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: LD_INT 3
71373: NEG
71374: PUSH
71375: LD_INT 4
71377: NEG
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: PUSH
71383: LD_INT 3
71385: NEG
71386: PUSH
71387: LD_INT 3
71389: NEG
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PUSH
71395: LD_INT 4
71397: NEG
71398: PUSH
71399: LD_INT 3
71401: NEG
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 5
71409: NEG
71410: PUSH
71411: LD_INT 4
71413: NEG
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 5
71421: NEG
71422: PUSH
71423: LD_INT 5
71425: NEG
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: PUSH
71431: LD_INT 3
71433: NEG
71434: PUSH
71435: LD_INT 5
71437: NEG
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: LD_INT 5
71445: NEG
71446: PUSH
71447: LD_INT 3
71449: NEG
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71502: LD_ADDR_VAR 0 30
71506: PUSH
71507: LD_INT 4
71509: PUSH
71510: LD_INT 4
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 4
71519: PUSH
71520: LD_INT 3
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 5
71529: PUSH
71530: LD_INT 4
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: PUSH
71537: LD_INT 5
71539: PUSH
71540: LD_INT 5
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 4
71549: PUSH
71550: LD_INT 5
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: PUSH
71557: LD_INT 3
71559: PUSH
71560: LD_INT 4
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: PUSH
71567: LD_INT 3
71569: PUSH
71570: LD_INT 3
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 5
71579: PUSH
71580: LD_INT 3
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 3
71589: PUSH
71590: LD_INT 5
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: LD_INT 0
71599: PUSH
71600: LD_INT 3
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 0
71609: PUSH
71610: LD_INT 2
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 1
71619: PUSH
71620: LD_INT 3
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 1
71629: PUSH
71630: LD_INT 4
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 0
71639: PUSH
71640: LD_INT 4
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 1
71649: NEG
71650: PUSH
71651: LD_INT 3
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: PUSH
71658: LD_INT 1
71660: NEG
71661: PUSH
71662: LD_INT 2
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 2
71671: PUSH
71672: LD_INT 4
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 2
71681: NEG
71682: PUSH
71683: LD_INT 2
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 4
71692: NEG
71693: PUSH
71694: LD_INT 0
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 4
71703: NEG
71704: PUSH
71705: LD_INT 1
71707: NEG
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: PUSH
71713: LD_INT 3
71715: NEG
71716: PUSH
71717: LD_INT 0
71719: PUSH
71720: EMPTY
71721: LIST
71722: LIST
71723: PUSH
71724: LD_INT 3
71726: NEG
71727: PUSH
71728: LD_INT 1
71730: PUSH
71731: EMPTY
71732: LIST
71733: LIST
71734: PUSH
71735: LD_INT 4
71737: NEG
71738: PUSH
71739: LD_INT 1
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: PUSH
71746: LD_INT 5
71748: NEG
71749: PUSH
71750: LD_INT 0
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 5
71759: NEG
71760: PUSH
71761: LD_INT 1
71763: NEG
71764: PUSH
71765: EMPTY
71766: LIST
71767: LIST
71768: PUSH
71769: LD_INT 5
71771: NEG
71772: PUSH
71773: LD_INT 2
71775: NEG
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 3
71783: NEG
71784: PUSH
71785: LD_INT 2
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: PUSH
71792: LD_INT 3
71794: NEG
71795: PUSH
71796: LD_INT 3
71798: NEG
71799: PUSH
71800: EMPTY
71801: LIST
71802: LIST
71803: PUSH
71804: LD_INT 3
71806: NEG
71807: PUSH
71808: LD_INT 4
71810: NEG
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PUSH
71816: LD_INT 2
71818: NEG
71819: PUSH
71820: LD_INT 3
71822: NEG
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: PUSH
71828: LD_INT 2
71830: NEG
71831: PUSH
71832: LD_INT 2
71834: NEG
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: PUSH
71840: LD_INT 3
71842: NEG
71843: PUSH
71844: LD_INT 2
71846: NEG
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: PUSH
71852: LD_INT 4
71854: NEG
71855: PUSH
71856: LD_INT 3
71858: NEG
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 4
71866: NEG
71867: PUSH
71868: LD_INT 4
71870: NEG
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: LD_INT 2
71878: NEG
71879: PUSH
71880: LD_INT 4
71882: NEG
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: LD_INT 4
71890: NEG
71891: PUSH
71892: LD_INT 2
71894: NEG
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 0
71902: PUSH
71903: LD_INT 4
71905: NEG
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PUSH
71911: LD_INT 0
71913: PUSH
71914: LD_INT 5
71916: NEG
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: PUSH
71922: LD_INT 1
71924: PUSH
71925: LD_INT 4
71927: NEG
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: PUSH
71933: LD_INT 1
71935: PUSH
71936: LD_INT 3
71938: NEG
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 0
71946: PUSH
71947: LD_INT 3
71949: NEG
71950: PUSH
71951: EMPTY
71952: LIST
71953: LIST
71954: PUSH
71955: LD_INT 1
71957: NEG
71958: PUSH
71959: LD_INT 4
71961: NEG
71962: PUSH
71963: EMPTY
71964: LIST
71965: LIST
71966: PUSH
71967: LD_INT 1
71969: NEG
71970: PUSH
71971: LD_INT 5
71973: NEG
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 2
71981: PUSH
71982: LD_INT 3
71984: NEG
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 2
71992: NEG
71993: PUSH
71994: LD_INT 5
71996: NEG
71997: PUSH
71998: EMPTY
71999: LIST
72000: LIST
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: LIST
72006: LIST
72007: LIST
72008: LIST
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: LIST
72021: LIST
72022: LIST
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: LIST
72033: LIST
72034: LIST
72035: LIST
72036: LIST
72037: LIST
72038: LIST
72039: LIST
72040: LIST
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72049: LD_ADDR_VAR 0 31
72053: PUSH
72054: LD_INT 0
72056: PUSH
72057: LD_INT 4
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 0
72066: PUSH
72067: LD_INT 3
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 1
72076: PUSH
72077: LD_INT 4
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 1
72086: PUSH
72087: LD_INT 5
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 0
72096: PUSH
72097: LD_INT 5
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: LD_INT 1
72106: NEG
72107: PUSH
72108: LD_INT 4
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: PUSH
72115: LD_INT 1
72117: NEG
72118: PUSH
72119: LD_INT 3
72121: PUSH
72122: EMPTY
72123: LIST
72124: LIST
72125: PUSH
72126: LD_INT 2
72128: PUSH
72129: LD_INT 5
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: PUSH
72136: LD_INT 2
72138: NEG
72139: PUSH
72140: LD_INT 3
72142: PUSH
72143: EMPTY
72144: LIST
72145: LIST
72146: PUSH
72147: LD_INT 3
72149: NEG
72150: PUSH
72151: LD_INT 0
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PUSH
72158: LD_INT 3
72160: NEG
72161: PUSH
72162: LD_INT 1
72164: NEG
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: PUSH
72170: LD_INT 2
72172: NEG
72173: PUSH
72174: LD_INT 0
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: PUSH
72181: LD_INT 2
72183: NEG
72184: PUSH
72185: LD_INT 1
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 3
72194: NEG
72195: PUSH
72196: LD_INT 1
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 4
72205: NEG
72206: PUSH
72207: LD_INT 0
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: LD_INT 4
72216: NEG
72217: PUSH
72218: LD_INT 1
72220: NEG
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PUSH
72226: LD_INT 4
72228: NEG
72229: PUSH
72230: LD_INT 2
72232: NEG
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: LD_INT 2
72240: NEG
72241: PUSH
72242: LD_INT 2
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: PUSH
72249: LD_INT 4
72251: NEG
72252: PUSH
72253: LD_INT 4
72255: NEG
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: PUSH
72261: LD_INT 4
72263: NEG
72264: PUSH
72265: LD_INT 5
72267: NEG
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: PUSH
72273: LD_INT 3
72275: NEG
72276: PUSH
72277: LD_INT 4
72279: NEG
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 3
72287: NEG
72288: PUSH
72289: LD_INT 3
72291: NEG
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PUSH
72297: LD_INT 4
72299: NEG
72300: PUSH
72301: LD_INT 3
72303: NEG
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: LD_INT 5
72311: NEG
72312: PUSH
72313: LD_INT 4
72315: NEG
72316: PUSH
72317: EMPTY
72318: LIST
72319: LIST
72320: PUSH
72321: LD_INT 5
72323: NEG
72324: PUSH
72325: LD_INT 5
72327: NEG
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: PUSH
72333: LD_INT 3
72335: NEG
72336: PUSH
72337: LD_INT 5
72339: NEG
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 5
72347: NEG
72348: PUSH
72349: LD_INT 3
72351: NEG
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PUSH
72357: LD_INT 0
72359: PUSH
72360: LD_INT 3
72362: NEG
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 0
72370: PUSH
72371: LD_INT 4
72373: NEG
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: PUSH
72379: LD_INT 1
72381: PUSH
72382: LD_INT 3
72384: NEG
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 1
72392: PUSH
72393: LD_INT 2
72395: NEG
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 0
72403: PUSH
72404: LD_INT 2
72406: NEG
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: LD_INT 1
72414: NEG
72415: PUSH
72416: LD_INT 3
72418: NEG
72419: PUSH
72420: EMPTY
72421: LIST
72422: LIST
72423: PUSH
72424: LD_INT 1
72426: NEG
72427: PUSH
72428: LD_INT 4
72430: NEG
72431: PUSH
72432: EMPTY
72433: LIST
72434: LIST
72435: PUSH
72436: LD_INT 2
72438: PUSH
72439: LD_INT 2
72441: NEG
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: PUSH
72447: LD_INT 2
72449: NEG
72450: PUSH
72451: LD_INT 4
72453: NEG
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: PUSH
72459: LD_INT 4
72461: PUSH
72462: LD_INT 0
72464: PUSH
72465: EMPTY
72466: LIST
72467: LIST
72468: PUSH
72469: LD_INT 4
72471: PUSH
72472: LD_INT 1
72474: NEG
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PUSH
72480: LD_INT 5
72482: PUSH
72483: LD_INT 0
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: PUSH
72490: LD_INT 5
72492: PUSH
72493: LD_INT 1
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: PUSH
72500: LD_INT 4
72502: PUSH
72503: LD_INT 1
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: LD_INT 3
72512: PUSH
72513: LD_INT 0
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: LD_INT 3
72522: PUSH
72523: LD_INT 1
72525: NEG
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: PUSH
72531: LD_INT 3
72533: PUSH
72534: LD_INT 2
72536: NEG
72537: PUSH
72538: EMPTY
72539: LIST
72540: LIST
72541: PUSH
72542: LD_INT 5
72544: PUSH
72545: LD_INT 2
72547: PUSH
72548: EMPTY
72549: LIST
72550: LIST
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: LIST
72556: LIST
72557: LIST
72558: LIST
72559: LIST
72560: LIST
72561: LIST
72562: LIST
72563: LIST
72564: LIST
72565: LIST
72566: LIST
72567: LIST
72568: LIST
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: LIST
72574: LIST
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: LIST
72582: LIST
72583: LIST
72584: LIST
72585: LIST
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72599: LD_ADDR_VAR 0 32
72603: PUSH
72604: LD_INT 4
72606: NEG
72607: PUSH
72608: LD_INT 0
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 4
72617: NEG
72618: PUSH
72619: LD_INT 1
72621: NEG
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_INT 3
72629: NEG
72630: PUSH
72631: LD_INT 0
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: LD_INT 3
72640: NEG
72641: PUSH
72642: LD_INT 1
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 4
72651: NEG
72652: PUSH
72653: LD_INT 1
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 5
72662: NEG
72663: PUSH
72664: LD_INT 0
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: PUSH
72671: LD_INT 5
72673: NEG
72674: PUSH
72675: LD_INT 1
72677: NEG
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: PUSH
72683: LD_INT 5
72685: NEG
72686: PUSH
72687: LD_INT 2
72689: NEG
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: LD_INT 3
72697: NEG
72698: PUSH
72699: LD_INT 2
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: LD_INT 3
72708: NEG
72709: PUSH
72710: LD_INT 3
72712: NEG
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: LD_INT 3
72720: NEG
72721: PUSH
72722: LD_INT 4
72724: NEG
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: PUSH
72730: LD_INT 2
72732: NEG
72733: PUSH
72734: LD_INT 3
72736: NEG
72737: PUSH
72738: EMPTY
72739: LIST
72740: LIST
72741: PUSH
72742: LD_INT 2
72744: NEG
72745: PUSH
72746: LD_INT 2
72748: NEG
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: PUSH
72754: LD_INT 3
72756: NEG
72757: PUSH
72758: LD_INT 2
72760: NEG
72761: PUSH
72762: EMPTY
72763: LIST
72764: LIST
72765: PUSH
72766: LD_INT 4
72768: NEG
72769: PUSH
72770: LD_INT 3
72772: NEG
72773: PUSH
72774: EMPTY
72775: LIST
72776: LIST
72777: PUSH
72778: LD_INT 4
72780: NEG
72781: PUSH
72782: LD_INT 4
72784: NEG
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 2
72792: NEG
72793: PUSH
72794: LD_INT 4
72796: NEG
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: LD_INT 4
72804: NEG
72805: PUSH
72806: LD_INT 2
72808: NEG
72809: PUSH
72810: EMPTY
72811: LIST
72812: LIST
72813: PUSH
72814: LD_INT 0
72816: PUSH
72817: LD_INT 4
72819: NEG
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PUSH
72825: LD_INT 0
72827: PUSH
72828: LD_INT 5
72830: NEG
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_INT 1
72838: PUSH
72839: LD_INT 4
72841: NEG
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 1
72849: PUSH
72850: LD_INT 3
72852: NEG
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: LD_INT 0
72860: PUSH
72861: LD_INT 3
72863: NEG
72864: PUSH
72865: EMPTY
72866: LIST
72867: LIST
72868: PUSH
72869: LD_INT 1
72871: NEG
72872: PUSH
72873: LD_INT 4
72875: NEG
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PUSH
72881: LD_INT 1
72883: NEG
72884: PUSH
72885: LD_INT 5
72887: NEG
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: PUSH
72893: LD_INT 2
72895: PUSH
72896: LD_INT 3
72898: NEG
72899: PUSH
72900: EMPTY
72901: LIST
72902: LIST
72903: PUSH
72904: LD_INT 2
72906: NEG
72907: PUSH
72908: LD_INT 5
72910: NEG
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: PUSH
72916: LD_INT 3
72918: PUSH
72919: LD_INT 0
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 3
72928: PUSH
72929: LD_INT 1
72931: NEG
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: LD_INT 4
72939: PUSH
72940: LD_INT 0
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: LD_INT 4
72949: PUSH
72950: LD_INT 1
72952: PUSH
72953: EMPTY
72954: LIST
72955: LIST
72956: PUSH
72957: LD_INT 3
72959: PUSH
72960: LD_INT 1
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: PUSH
72967: LD_INT 2
72969: PUSH
72970: LD_INT 0
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: PUSH
72977: LD_INT 2
72979: PUSH
72980: LD_INT 1
72982: NEG
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: LD_INT 2
72990: PUSH
72991: LD_INT 2
72993: NEG
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: PUSH
72999: LD_INT 4
73001: PUSH
73002: LD_INT 2
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: PUSH
73009: LD_INT 4
73011: PUSH
73012: LD_INT 4
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: PUSH
73019: LD_INT 4
73021: PUSH
73022: LD_INT 3
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: PUSH
73029: LD_INT 5
73031: PUSH
73032: LD_INT 4
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: PUSH
73039: LD_INT 5
73041: PUSH
73042: LD_INT 5
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: PUSH
73049: LD_INT 4
73051: PUSH
73052: LD_INT 5
73054: PUSH
73055: EMPTY
73056: LIST
73057: LIST
73058: PUSH
73059: LD_INT 3
73061: PUSH
73062: LD_INT 4
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: LD_INT 3
73071: PUSH
73072: LD_INT 3
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: PUSH
73079: LD_INT 5
73081: PUSH
73082: LD_INT 3
73084: PUSH
73085: EMPTY
73086: LIST
73087: LIST
73088: PUSH
73089: LD_INT 3
73091: PUSH
73092: LD_INT 5
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: PUSH
73099: EMPTY
73100: LIST
73101: LIST
73102: LIST
73103: LIST
73104: LIST
73105: LIST
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: LIST
73115: LIST
73116: LIST
73117: LIST
73118: LIST
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73146: LD_ADDR_VAR 0 33
73150: PUSH
73151: LD_INT 4
73153: NEG
73154: PUSH
73155: LD_INT 4
73157: NEG
73158: PUSH
73159: EMPTY
73160: LIST
73161: LIST
73162: PUSH
73163: LD_INT 4
73165: NEG
73166: PUSH
73167: LD_INT 5
73169: NEG
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: PUSH
73175: LD_INT 3
73177: NEG
73178: PUSH
73179: LD_INT 4
73181: NEG
73182: PUSH
73183: EMPTY
73184: LIST
73185: LIST
73186: PUSH
73187: LD_INT 3
73189: NEG
73190: PUSH
73191: LD_INT 3
73193: NEG
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: PUSH
73199: LD_INT 4
73201: NEG
73202: PUSH
73203: LD_INT 3
73205: NEG
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: PUSH
73211: LD_INT 5
73213: NEG
73214: PUSH
73215: LD_INT 4
73217: NEG
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: LD_INT 5
73225: NEG
73226: PUSH
73227: LD_INT 5
73229: NEG
73230: PUSH
73231: EMPTY
73232: LIST
73233: LIST
73234: PUSH
73235: LD_INT 3
73237: NEG
73238: PUSH
73239: LD_INT 5
73241: NEG
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: PUSH
73247: LD_INT 5
73249: NEG
73250: PUSH
73251: LD_INT 3
73253: NEG
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: PUSH
73259: LD_INT 0
73261: PUSH
73262: LD_INT 3
73264: NEG
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: PUSH
73270: LD_INT 0
73272: PUSH
73273: LD_INT 4
73275: NEG
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: PUSH
73281: LD_INT 1
73283: PUSH
73284: LD_INT 3
73286: NEG
73287: PUSH
73288: EMPTY
73289: LIST
73290: LIST
73291: PUSH
73292: LD_INT 1
73294: PUSH
73295: LD_INT 2
73297: NEG
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: PUSH
73303: LD_INT 0
73305: PUSH
73306: LD_INT 2
73308: NEG
73309: PUSH
73310: EMPTY
73311: LIST
73312: LIST
73313: PUSH
73314: LD_INT 1
73316: NEG
73317: PUSH
73318: LD_INT 3
73320: NEG
73321: PUSH
73322: EMPTY
73323: LIST
73324: LIST
73325: PUSH
73326: LD_INT 1
73328: NEG
73329: PUSH
73330: LD_INT 4
73332: NEG
73333: PUSH
73334: EMPTY
73335: LIST
73336: LIST
73337: PUSH
73338: LD_INT 2
73340: PUSH
73341: LD_INT 2
73343: NEG
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: PUSH
73349: LD_INT 2
73351: NEG
73352: PUSH
73353: LD_INT 4
73355: NEG
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: PUSH
73361: LD_INT 4
73363: PUSH
73364: LD_INT 0
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: LD_INT 4
73373: PUSH
73374: LD_INT 1
73376: NEG
73377: PUSH
73378: EMPTY
73379: LIST
73380: LIST
73381: PUSH
73382: LD_INT 5
73384: PUSH
73385: LD_INT 0
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: PUSH
73392: LD_INT 5
73394: PUSH
73395: LD_INT 1
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: PUSH
73402: LD_INT 4
73404: PUSH
73405: LD_INT 1
73407: PUSH
73408: EMPTY
73409: LIST
73410: LIST
73411: PUSH
73412: LD_INT 3
73414: PUSH
73415: LD_INT 0
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: PUSH
73422: LD_INT 3
73424: PUSH
73425: LD_INT 1
73427: NEG
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: PUSH
73433: LD_INT 3
73435: PUSH
73436: LD_INT 2
73438: NEG
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: PUSH
73444: LD_INT 5
73446: PUSH
73447: LD_INT 2
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: PUSH
73454: LD_INT 3
73456: PUSH
73457: LD_INT 3
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: PUSH
73464: LD_INT 3
73466: PUSH
73467: LD_INT 2
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: PUSH
73474: LD_INT 4
73476: PUSH
73477: LD_INT 3
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: LD_INT 4
73486: PUSH
73487: LD_INT 4
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: LD_INT 3
73496: PUSH
73497: LD_INT 4
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: PUSH
73504: LD_INT 2
73506: PUSH
73507: LD_INT 3
73509: PUSH
73510: EMPTY
73511: LIST
73512: LIST
73513: PUSH
73514: LD_INT 2
73516: PUSH
73517: LD_INT 2
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: LD_INT 4
73526: PUSH
73527: LD_INT 2
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: PUSH
73534: LD_INT 2
73536: PUSH
73537: LD_INT 4
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: PUSH
73544: LD_INT 0
73546: PUSH
73547: LD_INT 4
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: LD_INT 0
73556: PUSH
73557: LD_INT 3
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: PUSH
73564: LD_INT 1
73566: PUSH
73567: LD_INT 4
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: PUSH
73574: LD_INT 1
73576: PUSH
73577: LD_INT 5
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: PUSH
73584: LD_INT 0
73586: PUSH
73587: LD_INT 5
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: PUSH
73594: LD_INT 1
73596: NEG
73597: PUSH
73598: LD_INT 4
73600: PUSH
73601: EMPTY
73602: LIST
73603: LIST
73604: PUSH
73605: LD_INT 1
73607: NEG
73608: PUSH
73609: LD_INT 3
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: PUSH
73616: LD_INT 2
73618: PUSH
73619: LD_INT 5
73621: PUSH
73622: EMPTY
73623: LIST
73624: LIST
73625: PUSH
73626: LD_INT 2
73628: NEG
73629: PUSH
73630: LD_INT 3
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: LIST
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: LIST
73648: LIST
73649: LIST
73650: LIST
73651: LIST
73652: LIST
73653: LIST
73654: LIST
73655: LIST
73656: LIST
73657: LIST
73658: LIST
73659: LIST
73660: LIST
73661: LIST
73662: LIST
73663: LIST
73664: LIST
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73684: LD_ADDR_VAR 0 34
73688: PUSH
73689: LD_INT 0
73691: PUSH
73692: LD_INT 4
73694: NEG
73695: PUSH
73696: EMPTY
73697: LIST
73698: LIST
73699: PUSH
73700: LD_INT 0
73702: PUSH
73703: LD_INT 5
73705: NEG
73706: PUSH
73707: EMPTY
73708: LIST
73709: LIST
73710: PUSH
73711: LD_INT 1
73713: PUSH
73714: LD_INT 4
73716: NEG
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PUSH
73722: LD_INT 1
73724: PUSH
73725: LD_INT 3
73727: NEG
73728: PUSH
73729: EMPTY
73730: LIST
73731: LIST
73732: PUSH
73733: LD_INT 0
73735: PUSH
73736: LD_INT 3
73738: NEG
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: PUSH
73744: LD_INT 1
73746: NEG
73747: PUSH
73748: LD_INT 4
73750: NEG
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: PUSH
73756: LD_INT 1
73758: NEG
73759: PUSH
73760: LD_INT 5
73762: NEG
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: PUSH
73768: LD_INT 2
73770: PUSH
73771: LD_INT 3
73773: NEG
73774: PUSH
73775: EMPTY
73776: LIST
73777: LIST
73778: PUSH
73779: LD_INT 2
73781: NEG
73782: PUSH
73783: LD_INT 5
73785: NEG
73786: PUSH
73787: EMPTY
73788: LIST
73789: LIST
73790: PUSH
73791: LD_INT 3
73793: PUSH
73794: LD_INT 0
73796: PUSH
73797: EMPTY
73798: LIST
73799: LIST
73800: PUSH
73801: LD_INT 3
73803: PUSH
73804: LD_INT 1
73806: NEG
73807: PUSH
73808: EMPTY
73809: LIST
73810: LIST
73811: PUSH
73812: LD_INT 4
73814: PUSH
73815: LD_INT 0
73817: PUSH
73818: EMPTY
73819: LIST
73820: LIST
73821: PUSH
73822: LD_INT 4
73824: PUSH
73825: LD_INT 1
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: PUSH
73832: LD_INT 3
73834: PUSH
73835: LD_INT 1
73837: PUSH
73838: EMPTY
73839: LIST
73840: LIST
73841: PUSH
73842: LD_INT 2
73844: PUSH
73845: LD_INT 0
73847: PUSH
73848: EMPTY
73849: LIST
73850: LIST
73851: PUSH
73852: LD_INT 2
73854: PUSH
73855: LD_INT 1
73857: NEG
73858: PUSH
73859: EMPTY
73860: LIST
73861: LIST
73862: PUSH
73863: LD_INT 2
73865: PUSH
73866: LD_INT 2
73868: NEG
73869: PUSH
73870: EMPTY
73871: LIST
73872: LIST
73873: PUSH
73874: LD_INT 4
73876: PUSH
73877: LD_INT 2
73879: PUSH
73880: EMPTY
73881: LIST
73882: LIST
73883: PUSH
73884: LD_INT 4
73886: PUSH
73887: LD_INT 4
73889: PUSH
73890: EMPTY
73891: LIST
73892: LIST
73893: PUSH
73894: LD_INT 4
73896: PUSH
73897: LD_INT 3
73899: PUSH
73900: EMPTY
73901: LIST
73902: LIST
73903: PUSH
73904: LD_INT 5
73906: PUSH
73907: LD_INT 4
73909: PUSH
73910: EMPTY
73911: LIST
73912: LIST
73913: PUSH
73914: LD_INT 5
73916: PUSH
73917: LD_INT 5
73919: PUSH
73920: EMPTY
73921: LIST
73922: LIST
73923: PUSH
73924: LD_INT 4
73926: PUSH
73927: LD_INT 5
73929: PUSH
73930: EMPTY
73931: LIST
73932: LIST
73933: PUSH
73934: LD_INT 3
73936: PUSH
73937: LD_INT 4
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: PUSH
73944: LD_INT 3
73946: PUSH
73947: LD_INT 3
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: PUSH
73954: LD_INT 5
73956: PUSH
73957: LD_INT 3
73959: PUSH
73960: EMPTY
73961: LIST
73962: LIST
73963: PUSH
73964: LD_INT 3
73966: PUSH
73967: LD_INT 5
73969: PUSH
73970: EMPTY
73971: LIST
73972: LIST
73973: PUSH
73974: LD_INT 0
73976: PUSH
73977: LD_INT 3
73979: PUSH
73980: EMPTY
73981: LIST
73982: LIST
73983: PUSH
73984: LD_INT 0
73986: PUSH
73987: LD_INT 2
73989: PUSH
73990: EMPTY
73991: LIST
73992: LIST
73993: PUSH
73994: LD_INT 1
73996: PUSH
73997: LD_INT 3
73999: PUSH
74000: EMPTY
74001: LIST
74002: LIST
74003: PUSH
74004: LD_INT 1
74006: PUSH
74007: LD_INT 4
74009: PUSH
74010: EMPTY
74011: LIST
74012: LIST
74013: PUSH
74014: LD_INT 0
74016: PUSH
74017: LD_INT 4
74019: PUSH
74020: EMPTY
74021: LIST
74022: LIST
74023: PUSH
74024: LD_INT 1
74026: NEG
74027: PUSH
74028: LD_INT 3
74030: PUSH
74031: EMPTY
74032: LIST
74033: LIST
74034: PUSH
74035: LD_INT 1
74037: NEG
74038: PUSH
74039: LD_INT 2
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: PUSH
74046: LD_INT 2
74048: PUSH
74049: LD_INT 4
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: PUSH
74056: LD_INT 2
74058: NEG
74059: PUSH
74060: LD_INT 2
74062: PUSH
74063: EMPTY
74064: LIST
74065: LIST
74066: PUSH
74067: LD_INT 4
74069: NEG
74070: PUSH
74071: LD_INT 0
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: PUSH
74078: LD_INT 4
74080: NEG
74081: PUSH
74082: LD_INT 1
74084: NEG
74085: PUSH
74086: EMPTY
74087: LIST
74088: LIST
74089: PUSH
74090: LD_INT 3
74092: NEG
74093: PUSH
74094: LD_INT 0
74096: PUSH
74097: EMPTY
74098: LIST
74099: LIST
74100: PUSH
74101: LD_INT 3
74103: NEG
74104: PUSH
74105: LD_INT 1
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: PUSH
74112: LD_INT 4
74114: NEG
74115: PUSH
74116: LD_INT 1
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: PUSH
74123: LD_INT 5
74125: NEG
74126: PUSH
74127: LD_INT 0
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: PUSH
74134: LD_INT 5
74136: NEG
74137: PUSH
74138: LD_INT 1
74140: NEG
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PUSH
74146: LD_INT 5
74148: NEG
74149: PUSH
74150: LD_INT 2
74152: NEG
74153: PUSH
74154: EMPTY
74155: LIST
74156: LIST
74157: PUSH
74158: LD_INT 3
74160: NEG
74161: PUSH
74162: LD_INT 2
74164: PUSH
74165: EMPTY
74166: LIST
74167: LIST
74168: PUSH
74169: EMPTY
74170: LIST
74171: LIST
74172: LIST
74173: LIST
74174: LIST
74175: LIST
74176: LIST
74177: LIST
74178: LIST
74179: LIST
74180: LIST
74181: LIST
74182: LIST
74183: LIST
74184: LIST
74185: LIST
74186: LIST
74187: LIST
74188: LIST
74189: LIST
74190: LIST
74191: LIST
74192: LIST
74193: LIST
74194: LIST
74195: LIST
74196: LIST
74197: LIST
74198: LIST
74199: LIST
74200: LIST
74201: LIST
74202: LIST
74203: LIST
74204: LIST
74205: LIST
74206: LIST
74207: LIST
74208: LIST
74209: LIST
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: LIST
74215: ST_TO_ADDR
// end ; end ;
74216: GO 74219
74218: POP
// case btype of b_depot , b_warehouse :
74219: LD_VAR 0 1
74223: PUSH
74224: LD_INT 0
74226: DOUBLE
74227: EQUAL
74228: IFTRUE 74238
74230: LD_INT 1
74232: DOUBLE
74233: EQUAL
74234: IFTRUE 74238
74236: GO 74439
74238: POP
// case nation of nation_american :
74239: LD_VAR 0 5
74243: PUSH
74244: LD_INT 1
74246: DOUBLE
74247: EQUAL
74248: IFTRUE 74252
74250: GO 74308
74252: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74253: LD_ADDR_VAR 0 9
74257: PUSH
74258: LD_VAR 0 11
74262: PUSH
74263: LD_VAR 0 12
74267: PUSH
74268: LD_VAR 0 13
74272: PUSH
74273: LD_VAR 0 14
74277: PUSH
74278: LD_VAR 0 15
74282: PUSH
74283: LD_VAR 0 16
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: LIST
74294: LIST
74295: PUSH
74296: LD_VAR 0 4
74300: PUSH
74301: LD_INT 1
74303: PLUS
74304: ARRAY
74305: ST_TO_ADDR
74306: GO 74437
74308: LD_INT 2
74310: DOUBLE
74311: EQUAL
74312: IFTRUE 74316
74314: GO 74372
74316: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74317: LD_ADDR_VAR 0 9
74321: PUSH
74322: LD_VAR 0 17
74326: PUSH
74327: LD_VAR 0 18
74331: PUSH
74332: LD_VAR 0 19
74336: PUSH
74337: LD_VAR 0 20
74341: PUSH
74342: LD_VAR 0 21
74346: PUSH
74347: LD_VAR 0 22
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: PUSH
74360: LD_VAR 0 4
74364: PUSH
74365: LD_INT 1
74367: PLUS
74368: ARRAY
74369: ST_TO_ADDR
74370: GO 74437
74372: LD_INT 3
74374: DOUBLE
74375: EQUAL
74376: IFTRUE 74380
74378: GO 74436
74380: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74381: LD_ADDR_VAR 0 9
74385: PUSH
74386: LD_VAR 0 23
74390: PUSH
74391: LD_VAR 0 24
74395: PUSH
74396: LD_VAR 0 25
74400: PUSH
74401: LD_VAR 0 26
74405: PUSH
74406: LD_VAR 0 27
74410: PUSH
74411: LD_VAR 0 28
74415: PUSH
74416: EMPTY
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: LIST
74422: LIST
74423: PUSH
74424: LD_VAR 0 4
74428: PUSH
74429: LD_INT 1
74431: PLUS
74432: ARRAY
74433: ST_TO_ADDR
74434: GO 74437
74436: POP
74437: GO 74992
74439: LD_INT 2
74441: DOUBLE
74442: EQUAL
74443: IFTRUE 74453
74445: LD_INT 3
74447: DOUBLE
74448: EQUAL
74449: IFTRUE 74453
74451: GO 74509
74453: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74454: LD_ADDR_VAR 0 9
74458: PUSH
74459: LD_VAR 0 29
74463: PUSH
74464: LD_VAR 0 30
74468: PUSH
74469: LD_VAR 0 31
74473: PUSH
74474: LD_VAR 0 32
74478: PUSH
74479: LD_VAR 0 33
74483: PUSH
74484: LD_VAR 0 34
74488: PUSH
74489: EMPTY
74490: LIST
74491: LIST
74492: LIST
74493: LIST
74494: LIST
74495: LIST
74496: PUSH
74497: LD_VAR 0 4
74501: PUSH
74502: LD_INT 1
74504: PLUS
74505: ARRAY
74506: ST_TO_ADDR
74507: GO 74992
74509: LD_INT 16
74511: DOUBLE
74512: EQUAL
74513: IFTRUE 74571
74515: LD_INT 17
74517: DOUBLE
74518: EQUAL
74519: IFTRUE 74571
74521: LD_INT 18
74523: DOUBLE
74524: EQUAL
74525: IFTRUE 74571
74527: LD_INT 19
74529: DOUBLE
74530: EQUAL
74531: IFTRUE 74571
74533: LD_INT 22
74535: DOUBLE
74536: EQUAL
74537: IFTRUE 74571
74539: LD_INT 20
74541: DOUBLE
74542: EQUAL
74543: IFTRUE 74571
74545: LD_INT 21
74547: DOUBLE
74548: EQUAL
74549: IFTRUE 74571
74551: LD_INT 23
74553: DOUBLE
74554: EQUAL
74555: IFTRUE 74571
74557: LD_INT 24
74559: DOUBLE
74560: EQUAL
74561: IFTRUE 74571
74563: LD_INT 25
74565: DOUBLE
74566: EQUAL
74567: IFTRUE 74571
74569: GO 74627
74571: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74572: LD_ADDR_VAR 0 9
74576: PUSH
74577: LD_VAR 0 35
74581: PUSH
74582: LD_VAR 0 36
74586: PUSH
74587: LD_VAR 0 37
74591: PUSH
74592: LD_VAR 0 38
74596: PUSH
74597: LD_VAR 0 39
74601: PUSH
74602: LD_VAR 0 40
74606: PUSH
74607: EMPTY
74608: LIST
74609: LIST
74610: LIST
74611: LIST
74612: LIST
74613: LIST
74614: PUSH
74615: LD_VAR 0 4
74619: PUSH
74620: LD_INT 1
74622: PLUS
74623: ARRAY
74624: ST_TO_ADDR
74625: GO 74992
74627: LD_INT 6
74629: DOUBLE
74630: EQUAL
74631: IFTRUE 74683
74633: LD_INT 7
74635: DOUBLE
74636: EQUAL
74637: IFTRUE 74683
74639: LD_INT 8
74641: DOUBLE
74642: EQUAL
74643: IFTRUE 74683
74645: LD_INT 13
74647: DOUBLE
74648: EQUAL
74649: IFTRUE 74683
74651: LD_INT 12
74653: DOUBLE
74654: EQUAL
74655: IFTRUE 74683
74657: LD_INT 15
74659: DOUBLE
74660: EQUAL
74661: IFTRUE 74683
74663: LD_INT 11
74665: DOUBLE
74666: EQUAL
74667: IFTRUE 74683
74669: LD_INT 14
74671: DOUBLE
74672: EQUAL
74673: IFTRUE 74683
74675: LD_INT 10
74677: DOUBLE
74678: EQUAL
74679: IFTRUE 74683
74681: GO 74739
74683: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74684: LD_ADDR_VAR 0 9
74688: PUSH
74689: LD_VAR 0 41
74693: PUSH
74694: LD_VAR 0 42
74698: PUSH
74699: LD_VAR 0 43
74703: PUSH
74704: LD_VAR 0 44
74708: PUSH
74709: LD_VAR 0 45
74713: PUSH
74714: LD_VAR 0 46
74718: PUSH
74719: EMPTY
74720: LIST
74721: LIST
74722: LIST
74723: LIST
74724: LIST
74725: LIST
74726: PUSH
74727: LD_VAR 0 4
74731: PUSH
74732: LD_INT 1
74734: PLUS
74735: ARRAY
74736: ST_TO_ADDR
74737: GO 74992
74739: LD_INT 36
74741: DOUBLE
74742: EQUAL
74743: IFTRUE 74747
74745: GO 74803
74747: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74748: LD_ADDR_VAR 0 9
74752: PUSH
74753: LD_VAR 0 47
74757: PUSH
74758: LD_VAR 0 48
74762: PUSH
74763: LD_VAR 0 49
74767: PUSH
74768: LD_VAR 0 50
74772: PUSH
74773: LD_VAR 0 51
74777: PUSH
74778: LD_VAR 0 52
74782: PUSH
74783: EMPTY
74784: LIST
74785: LIST
74786: LIST
74787: LIST
74788: LIST
74789: LIST
74790: PUSH
74791: LD_VAR 0 4
74795: PUSH
74796: LD_INT 1
74798: PLUS
74799: ARRAY
74800: ST_TO_ADDR
74801: GO 74992
74803: LD_INT 4
74805: DOUBLE
74806: EQUAL
74807: IFTRUE 74829
74809: LD_INT 5
74811: DOUBLE
74812: EQUAL
74813: IFTRUE 74829
74815: LD_INT 34
74817: DOUBLE
74818: EQUAL
74819: IFTRUE 74829
74821: LD_INT 37
74823: DOUBLE
74824: EQUAL
74825: IFTRUE 74829
74827: GO 74885
74829: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74830: LD_ADDR_VAR 0 9
74834: PUSH
74835: LD_VAR 0 53
74839: PUSH
74840: LD_VAR 0 54
74844: PUSH
74845: LD_VAR 0 55
74849: PUSH
74850: LD_VAR 0 56
74854: PUSH
74855: LD_VAR 0 57
74859: PUSH
74860: LD_VAR 0 58
74864: PUSH
74865: EMPTY
74866: LIST
74867: LIST
74868: LIST
74869: LIST
74870: LIST
74871: LIST
74872: PUSH
74873: LD_VAR 0 4
74877: PUSH
74878: LD_INT 1
74880: PLUS
74881: ARRAY
74882: ST_TO_ADDR
74883: GO 74992
74885: LD_INT 31
74887: DOUBLE
74888: EQUAL
74889: IFTRUE 74935
74891: LD_INT 32
74893: DOUBLE
74894: EQUAL
74895: IFTRUE 74935
74897: LD_INT 33
74899: DOUBLE
74900: EQUAL
74901: IFTRUE 74935
74903: LD_INT 27
74905: DOUBLE
74906: EQUAL
74907: IFTRUE 74935
74909: LD_INT 26
74911: DOUBLE
74912: EQUAL
74913: IFTRUE 74935
74915: LD_INT 28
74917: DOUBLE
74918: EQUAL
74919: IFTRUE 74935
74921: LD_INT 29
74923: DOUBLE
74924: EQUAL
74925: IFTRUE 74935
74927: LD_INT 30
74929: DOUBLE
74930: EQUAL
74931: IFTRUE 74935
74933: GO 74991
74935: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74936: LD_ADDR_VAR 0 9
74940: PUSH
74941: LD_VAR 0 59
74945: PUSH
74946: LD_VAR 0 60
74950: PUSH
74951: LD_VAR 0 61
74955: PUSH
74956: LD_VAR 0 62
74960: PUSH
74961: LD_VAR 0 63
74965: PUSH
74966: LD_VAR 0 64
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: LIST
74975: LIST
74976: LIST
74977: LIST
74978: PUSH
74979: LD_VAR 0 4
74983: PUSH
74984: LD_INT 1
74986: PLUS
74987: ARRAY
74988: ST_TO_ADDR
74989: GO 74992
74991: POP
// temp_list2 = [ ] ;
74992: LD_ADDR_VAR 0 10
74996: PUSH
74997: EMPTY
74998: ST_TO_ADDR
// for i in temp_list do
74999: LD_ADDR_VAR 0 8
75003: PUSH
75004: LD_VAR 0 9
75008: PUSH
75009: FOR_IN
75010: IFFALSE 75062
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75012: LD_ADDR_VAR 0 10
75016: PUSH
75017: LD_VAR 0 10
75021: PUSH
75022: LD_VAR 0 8
75026: PUSH
75027: LD_INT 1
75029: ARRAY
75030: PUSH
75031: LD_VAR 0 2
75035: PLUS
75036: PUSH
75037: LD_VAR 0 8
75041: PUSH
75042: LD_INT 2
75044: ARRAY
75045: PUSH
75046: LD_VAR 0 3
75050: PLUS
75051: PUSH
75052: EMPTY
75053: LIST
75054: LIST
75055: PUSH
75056: EMPTY
75057: LIST
75058: ADD
75059: ST_TO_ADDR
75060: GO 75009
75062: POP
75063: POP
// result = temp_list2 ;
75064: LD_ADDR_VAR 0 7
75068: PUSH
75069: LD_VAR 0 10
75073: ST_TO_ADDR
// end ;
75074: LD_VAR 0 7
75078: RET
// export function EnemyInRange ( unit , dist ) ; begin
75079: LD_INT 0
75081: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75082: LD_ADDR_VAR 0 3
75086: PUSH
75087: LD_VAR 0 1
75091: PPUSH
75092: CALL_OW 255
75096: PPUSH
75097: LD_VAR 0 1
75101: PPUSH
75102: CALL_OW 250
75106: PPUSH
75107: LD_VAR 0 1
75111: PPUSH
75112: CALL_OW 251
75116: PPUSH
75117: LD_VAR 0 2
75121: PPUSH
75122: CALL 48336 0 4
75126: PUSH
75127: LD_INT 4
75129: ARRAY
75130: ST_TO_ADDR
// end ;
75131: LD_VAR 0 3
75135: RET
// export function PlayerSeeMe ( unit ) ; begin
75136: LD_INT 0
75138: PPUSH
// result := See ( your_side , unit ) ;
75139: LD_ADDR_VAR 0 2
75143: PUSH
75144: LD_OWVAR 2
75148: PPUSH
75149: LD_VAR 0 1
75153: PPUSH
75154: CALL_OW 292
75158: ST_TO_ADDR
// end ;
75159: LD_VAR 0 2
75163: RET
// export function ReverseDir ( unit ) ; begin
75164: LD_INT 0
75166: PPUSH
// if not unit then
75167: LD_VAR 0 1
75171: NOT
75172: IFFALSE 75176
// exit ;
75174: GO 75199
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75176: LD_ADDR_VAR 0 2
75180: PUSH
75181: LD_VAR 0 1
75185: PPUSH
75186: CALL_OW 254
75190: PUSH
75191: LD_INT 3
75193: PLUS
75194: PUSH
75195: LD_INT 6
75197: MOD
75198: ST_TO_ADDR
// end ;
75199: LD_VAR 0 2
75203: RET
// export function ReverseArray ( array ) ; var i ; begin
75204: LD_INT 0
75206: PPUSH
75207: PPUSH
// if not array then
75208: LD_VAR 0 1
75212: NOT
75213: IFFALSE 75217
// exit ;
75215: GO 75272
// result := [ ] ;
75217: LD_ADDR_VAR 0 2
75221: PUSH
75222: EMPTY
75223: ST_TO_ADDR
// for i := array downto 1 do
75224: LD_ADDR_VAR 0 3
75228: PUSH
75229: DOUBLE
75230: LD_VAR 0 1
75234: INC
75235: ST_TO_ADDR
75236: LD_INT 1
75238: PUSH
75239: FOR_DOWNTO
75240: IFFALSE 75270
// result := Join ( result , array [ i ] ) ;
75242: LD_ADDR_VAR 0 2
75246: PUSH
75247: LD_VAR 0 2
75251: PPUSH
75252: LD_VAR 0 1
75256: PUSH
75257: LD_VAR 0 3
75261: ARRAY
75262: PPUSH
75263: CALL 80114 0 2
75267: ST_TO_ADDR
75268: GO 75239
75270: POP
75271: POP
// end ;
75272: LD_VAR 0 2
75276: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75277: LD_INT 0
75279: PPUSH
75280: PPUSH
75281: PPUSH
75282: PPUSH
75283: PPUSH
75284: PPUSH
// if not unit or not hexes then
75285: LD_VAR 0 1
75289: NOT
75290: IFTRUE 75299
75292: PUSH
75293: LD_VAR 0 2
75297: NOT
75298: OR
75299: IFFALSE 75303
// exit ;
75301: GO 75426
// dist := 9999 ;
75303: LD_ADDR_VAR 0 5
75307: PUSH
75308: LD_INT 9999
75310: ST_TO_ADDR
// for i = 1 to hexes do
75311: LD_ADDR_VAR 0 4
75315: PUSH
75316: DOUBLE
75317: LD_INT 1
75319: DEC
75320: ST_TO_ADDR
75321: LD_VAR 0 2
75325: PUSH
75326: FOR_TO
75327: IFFALSE 75414
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75329: LD_ADDR_VAR 0 6
75333: PUSH
75334: LD_VAR 0 1
75338: PPUSH
75339: LD_VAR 0 2
75343: PUSH
75344: LD_VAR 0 4
75348: ARRAY
75349: PUSH
75350: LD_INT 1
75352: ARRAY
75353: PPUSH
75354: LD_VAR 0 2
75358: PUSH
75359: LD_VAR 0 4
75363: ARRAY
75364: PUSH
75365: LD_INT 2
75367: ARRAY
75368: PPUSH
75369: CALL_OW 297
75373: ST_TO_ADDR
// if tdist < dist then
75374: LD_VAR 0 6
75378: PUSH
75379: LD_VAR 0 5
75383: LESS
75384: IFFALSE 75412
// begin hex := hexes [ i ] ;
75386: LD_ADDR_VAR 0 8
75390: PUSH
75391: LD_VAR 0 2
75395: PUSH
75396: LD_VAR 0 4
75400: ARRAY
75401: ST_TO_ADDR
// dist := tdist ;
75402: LD_ADDR_VAR 0 5
75406: PUSH
75407: LD_VAR 0 6
75411: ST_TO_ADDR
// end ; end ;
75412: GO 75326
75414: POP
75415: POP
// result := hex ;
75416: LD_ADDR_VAR 0 3
75420: PUSH
75421: LD_VAR 0 8
75425: ST_TO_ADDR
// end ;
75426: LD_VAR 0 3
75430: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75431: LD_INT 0
75433: PPUSH
75434: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75435: LD_VAR 0 1
75439: NOT
75440: IFTRUE 75479
75442: PUSH
75443: LD_VAR 0 1
75447: PUSH
75448: LD_INT 21
75450: PUSH
75451: LD_INT 2
75453: PUSH
75454: EMPTY
75455: LIST
75456: LIST
75457: PUSH
75458: LD_INT 23
75460: PUSH
75461: LD_INT 2
75463: PUSH
75464: EMPTY
75465: LIST
75466: LIST
75467: PUSH
75468: EMPTY
75469: LIST
75470: LIST
75471: PPUSH
75472: CALL_OW 69
75476: IN
75477: NOT
75478: OR
75479: IFFALSE 75483
// exit ;
75481: GO 75530
// for i = 1 to 3 do
75483: LD_ADDR_VAR 0 3
75487: PUSH
75488: DOUBLE
75489: LD_INT 1
75491: DEC
75492: ST_TO_ADDR
75493: LD_INT 3
75495: PUSH
75496: FOR_TO
75497: IFFALSE 75528
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75499: LD_VAR 0 1
75503: PPUSH
75504: CALL_OW 250
75508: PPUSH
75509: LD_VAR 0 1
75513: PPUSH
75514: CALL_OW 251
75518: PPUSH
75519: LD_INT 1
75521: PPUSH
75522: CALL_OW 453
75526: GO 75496
75528: POP
75529: POP
// end ;
75530: LD_VAR 0 2
75534: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75535: LD_INT 0
75537: PPUSH
75538: PPUSH
75539: PPUSH
75540: PPUSH
75541: PPUSH
75542: PPUSH
// if not unit or not enemy_unit then
75543: LD_VAR 0 1
75547: NOT
75548: IFTRUE 75557
75550: PUSH
75551: LD_VAR 0 2
75555: NOT
75556: OR
75557: IFFALSE 75561
// exit ;
75559: GO 76032
// if GetLives ( i ) < 250 then
75561: LD_VAR 0 4
75565: PPUSH
75566: CALL_OW 256
75570: PUSH
75571: LD_INT 250
75573: LESS
75574: IFFALSE 75587
// begin ComAutodestruct ( i ) ;
75576: LD_VAR 0 4
75580: PPUSH
75581: CALL 75431 0 1
// exit ;
75585: GO 76032
// end ; x := GetX ( enemy_unit ) ;
75587: LD_ADDR_VAR 0 7
75591: PUSH
75592: LD_VAR 0 2
75596: PPUSH
75597: CALL_OW 250
75601: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75602: LD_ADDR_VAR 0 8
75606: PUSH
75607: LD_VAR 0 2
75611: PPUSH
75612: CALL_OW 251
75616: ST_TO_ADDR
// if not x or not y then
75617: LD_VAR 0 7
75621: NOT
75622: IFTRUE 75631
75624: PUSH
75625: LD_VAR 0 8
75629: NOT
75630: OR
75631: IFFALSE 75635
// exit ;
75633: GO 76032
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75635: LD_ADDR_VAR 0 6
75639: PUSH
75640: LD_VAR 0 7
75644: PPUSH
75645: LD_INT 0
75647: PPUSH
75648: LD_INT 4
75650: PPUSH
75651: CALL_OW 272
75655: PUSH
75656: LD_VAR 0 8
75660: PPUSH
75661: LD_INT 0
75663: PPUSH
75664: LD_INT 4
75666: PPUSH
75667: CALL_OW 273
75671: PUSH
75672: EMPTY
75673: LIST
75674: LIST
75675: PUSH
75676: LD_VAR 0 7
75680: PPUSH
75681: LD_INT 1
75683: PPUSH
75684: LD_INT 4
75686: PPUSH
75687: CALL_OW 272
75691: PUSH
75692: LD_VAR 0 8
75696: PPUSH
75697: LD_INT 1
75699: PPUSH
75700: LD_INT 4
75702: PPUSH
75703: CALL_OW 273
75707: PUSH
75708: EMPTY
75709: LIST
75710: LIST
75711: PUSH
75712: LD_VAR 0 7
75716: PPUSH
75717: LD_INT 2
75719: PPUSH
75720: LD_INT 4
75722: PPUSH
75723: CALL_OW 272
75727: PUSH
75728: LD_VAR 0 8
75732: PPUSH
75733: LD_INT 2
75735: PPUSH
75736: LD_INT 4
75738: PPUSH
75739: CALL_OW 273
75743: PUSH
75744: EMPTY
75745: LIST
75746: LIST
75747: PUSH
75748: LD_VAR 0 7
75752: PPUSH
75753: LD_INT 3
75755: PPUSH
75756: LD_INT 4
75758: PPUSH
75759: CALL_OW 272
75763: PUSH
75764: LD_VAR 0 8
75768: PPUSH
75769: LD_INT 3
75771: PPUSH
75772: LD_INT 4
75774: PPUSH
75775: CALL_OW 273
75779: PUSH
75780: EMPTY
75781: LIST
75782: LIST
75783: PUSH
75784: LD_VAR 0 7
75788: PPUSH
75789: LD_INT 4
75791: PPUSH
75792: LD_INT 4
75794: PPUSH
75795: CALL_OW 272
75799: PUSH
75800: LD_VAR 0 8
75804: PPUSH
75805: LD_INT 4
75807: PPUSH
75808: LD_INT 4
75810: PPUSH
75811: CALL_OW 273
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: PUSH
75820: LD_VAR 0 7
75824: PPUSH
75825: LD_INT 5
75827: PPUSH
75828: LD_INT 4
75830: PPUSH
75831: CALL_OW 272
75835: PUSH
75836: LD_VAR 0 8
75840: PPUSH
75841: LD_INT 5
75843: PPUSH
75844: LD_INT 4
75846: PPUSH
75847: CALL_OW 273
75851: PUSH
75852: EMPTY
75853: LIST
75854: LIST
75855: PUSH
75856: EMPTY
75857: LIST
75858: LIST
75859: LIST
75860: LIST
75861: LIST
75862: LIST
75863: ST_TO_ADDR
// for i = tmp downto 1 do
75864: LD_ADDR_VAR 0 4
75868: PUSH
75869: DOUBLE
75870: LD_VAR 0 6
75874: INC
75875: ST_TO_ADDR
75876: LD_INT 1
75878: PUSH
75879: FOR_DOWNTO
75880: IFFALSE 75983
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75882: LD_VAR 0 6
75886: PUSH
75887: LD_VAR 0 4
75891: ARRAY
75892: PUSH
75893: LD_INT 1
75895: ARRAY
75896: PPUSH
75897: LD_VAR 0 6
75901: PUSH
75902: LD_VAR 0 4
75906: ARRAY
75907: PUSH
75908: LD_INT 2
75910: ARRAY
75911: PPUSH
75912: CALL_OW 488
75916: NOT
75917: IFTRUE 75959
75919: PUSH
75920: LD_VAR 0 6
75924: PUSH
75925: LD_VAR 0 4
75929: ARRAY
75930: PUSH
75931: LD_INT 1
75933: ARRAY
75934: PPUSH
75935: LD_VAR 0 6
75939: PUSH
75940: LD_VAR 0 4
75944: ARRAY
75945: PUSH
75946: LD_INT 2
75948: ARRAY
75949: PPUSH
75950: CALL_OW 428
75954: PUSH
75955: LD_INT 0
75957: NONEQUAL
75958: OR
75959: IFFALSE 75981
// tmp := Delete ( tmp , i ) ;
75961: LD_ADDR_VAR 0 6
75965: PUSH
75966: LD_VAR 0 6
75970: PPUSH
75971: LD_VAR 0 4
75975: PPUSH
75976: CALL_OW 3
75980: ST_TO_ADDR
75981: GO 75879
75983: POP
75984: POP
// j := GetClosestHex ( unit , tmp ) ;
75985: LD_ADDR_VAR 0 5
75989: PUSH
75990: LD_VAR 0 1
75994: PPUSH
75995: LD_VAR 0 6
75999: PPUSH
76000: CALL 75277 0 2
76004: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76005: LD_VAR 0 1
76009: PPUSH
76010: LD_VAR 0 5
76014: PUSH
76015: LD_INT 1
76017: ARRAY
76018: PPUSH
76019: LD_VAR 0 5
76023: PUSH
76024: LD_INT 2
76026: ARRAY
76027: PPUSH
76028: CALL_OW 111
// end ;
76032: LD_VAR 0 3
76036: RET
// export function PrepareApemanSoldier ( ) ; begin
76037: LD_INT 0
76039: PPUSH
// uc_nation := 0 ;
76040: LD_ADDR_OWVAR 21
76044: PUSH
76045: LD_INT 0
76047: ST_TO_ADDR
// hc_sex := sex_male ;
76048: LD_ADDR_OWVAR 27
76052: PUSH
76053: LD_INT 1
76055: ST_TO_ADDR
// hc_name :=  ;
76056: LD_ADDR_OWVAR 26
76060: PUSH
76061: LD_STRING 
76063: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
76064: LD_ADDR_OWVAR 28
76068: PUSH
76069: LD_INT 15
76071: ST_TO_ADDR
// hc_gallery :=  ;
76072: LD_ADDR_OWVAR 33
76076: PUSH
76077: LD_STRING 
76079: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76080: LD_ADDR_OWVAR 31
76084: PUSH
76085: LD_INT 0
76087: PPUSH
76088: LD_INT 3
76090: PPUSH
76091: CALL_OW 12
76095: PUSH
76096: LD_INT 0
76098: PPUSH
76099: LD_INT 3
76101: PPUSH
76102: CALL_OW 12
76106: PUSH
76107: LD_INT 0
76109: PUSH
76110: LD_INT 0
76112: PUSH
76113: EMPTY
76114: LIST
76115: LIST
76116: LIST
76117: LIST
76118: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76119: LD_ADDR_OWVAR 29
76123: PUSH
76124: LD_INT 12
76126: PUSH
76127: LD_INT 12
76129: PUSH
76130: EMPTY
76131: LIST
76132: LIST
76133: ST_TO_ADDR
// end ;
76134: LD_VAR 0 1
76138: RET
// export function PrepareApemanEngineer ( ) ; begin
76139: LD_INT 0
76141: PPUSH
// uc_nation := 0 ;
76142: LD_ADDR_OWVAR 21
76146: PUSH
76147: LD_INT 0
76149: ST_TO_ADDR
// hc_sex := sex_male ;
76150: LD_ADDR_OWVAR 27
76154: PUSH
76155: LD_INT 1
76157: ST_TO_ADDR
// hc_name :=  ;
76158: LD_ADDR_OWVAR 26
76162: PUSH
76163: LD_STRING 
76165: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
76166: LD_ADDR_OWVAR 28
76170: PUSH
76171: LD_INT 16
76173: ST_TO_ADDR
// hc_gallery :=  ;
76174: LD_ADDR_OWVAR 33
76178: PUSH
76179: LD_STRING 
76181: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76182: LD_ADDR_OWVAR 31
76186: PUSH
76187: LD_INT 0
76189: PPUSH
76190: LD_INT 3
76192: PPUSH
76193: CALL_OW 12
76197: PUSH
76198: LD_INT 0
76200: PPUSH
76201: LD_INT 3
76203: PPUSH
76204: CALL_OW 12
76208: PUSH
76209: LD_INT 0
76211: PUSH
76212: LD_INT 0
76214: PUSH
76215: EMPTY
76216: LIST
76217: LIST
76218: LIST
76219: LIST
76220: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76221: LD_ADDR_OWVAR 29
76225: PUSH
76226: LD_INT 12
76228: PUSH
76229: LD_INT 12
76231: PUSH
76232: EMPTY
76233: LIST
76234: LIST
76235: ST_TO_ADDR
// end ;
76236: LD_VAR 0 1
76240: RET
// export function PrepareApeman ( agressivity ) ; begin
76241: LD_INT 0
76243: PPUSH
// uc_side := 0 ;
76244: LD_ADDR_OWVAR 20
76248: PUSH
76249: LD_INT 0
76251: ST_TO_ADDR
// uc_nation := 0 ;
76252: LD_ADDR_OWVAR 21
76256: PUSH
76257: LD_INT 0
76259: ST_TO_ADDR
// hc_sex := sex_male ;
76260: LD_ADDR_OWVAR 27
76264: PUSH
76265: LD_INT 1
76267: ST_TO_ADDR
// hc_class := class_apeman ;
76268: LD_ADDR_OWVAR 28
76272: PUSH
76273: LD_INT 12
76275: ST_TO_ADDR
// hc_gallery :=  ;
76276: LD_ADDR_OWVAR 33
76280: PUSH
76281: LD_STRING 
76283: ST_TO_ADDR
// hc_name :=  ;
76284: LD_ADDR_OWVAR 26
76288: PUSH
76289: LD_STRING 
76291: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76292: LD_ADDR_OWVAR 29
76296: PUSH
76297: LD_INT 12
76299: PUSH
76300: LD_INT 12
76302: PUSH
76303: EMPTY
76304: LIST
76305: LIST
76306: ST_TO_ADDR
// if agressivity = 0 then
76307: LD_VAR 0 1
76311: PUSH
76312: LD_INT 0
76314: EQUAL
76315: IFFALSE 76327
// hc_agressivity := 0 else
76317: LD_ADDR_OWVAR 35
76321: PUSH
76322: LD_INT 0
76324: ST_TO_ADDR
76325: GO 76348
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76327: LD_ADDR_OWVAR 35
76331: PUSH
76332: LD_VAR 0 1
76336: NEG
76337: PPUSH
76338: LD_VAR 0 1
76342: PPUSH
76343: CALL_OW 12
76347: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76348: LD_ADDR_OWVAR 31
76352: PUSH
76353: LD_INT 0
76355: PPUSH
76356: LD_INT 3
76358: PPUSH
76359: CALL_OW 12
76363: PUSH
76364: LD_INT 0
76366: PPUSH
76367: LD_INT 3
76369: PPUSH
76370: CALL_OW 12
76374: PUSH
76375: LD_INT 0
76377: PUSH
76378: LD_INT 0
76380: PUSH
76381: EMPTY
76382: LIST
76383: LIST
76384: LIST
76385: LIST
76386: ST_TO_ADDR
// end ;
76387: LD_VAR 0 2
76391: RET
// export function PrepareTiger ( agressivity ) ; begin
76392: LD_INT 0
76394: PPUSH
// uc_side := 0 ;
76395: LD_ADDR_OWVAR 20
76399: PUSH
76400: LD_INT 0
76402: ST_TO_ADDR
// uc_nation := 0 ;
76403: LD_ADDR_OWVAR 21
76407: PUSH
76408: LD_INT 0
76410: ST_TO_ADDR
// InitHc ;
76411: CALL_OW 19
// hc_class := class_tiger ;
76415: LD_ADDR_OWVAR 28
76419: PUSH
76420: LD_INT 14
76422: ST_TO_ADDR
// hc_gallery :=  ;
76423: LD_ADDR_OWVAR 33
76427: PUSH
76428: LD_STRING 
76430: ST_TO_ADDR
// hc_name :=  ;
76431: LD_ADDR_OWVAR 26
76435: PUSH
76436: LD_STRING 
76438: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76439: LD_ADDR_OWVAR 35
76443: PUSH
76444: LD_VAR 0 1
76448: NEG
76449: PPUSH
76450: LD_VAR 0 1
76454: PPUSH
76455: CALL_OW 12
76459: ST_TO_ADDR
// end ;
76460: LD_VAR 0 2
76464: RET
// export function PrepareEnchidna ( ) ; begin
76465: LD_INT 0
76467: PPUSH
// uc_side := 0 ;
76468: LD_ADDR_OWVAR 20
76472: PUSH
76473: LD_INT 0
76475: ST_TO_ADDR
// uc_nation := 0 ;
76476: LD_ADDR_OWVAR 21
76480: PUSH
76481: LD_INT 0
76483: ST_TO_ADDR
// InitHc ;
76484: CALL_OW 19
// hc_class := class_baggie ;
76488: LD_ADDR_OWVAR 28
76492: PUSH
76493: LD_INT 13
76495: ST_TO_ADDR
// hc_gallery :=  ;
76496: LD_ADDR_OWVAR 33
76500: PUSH
76501: LD_STRING 
76503: ST_TO_ADDR
// hc_name :=  ;
76504: LD_ADDR_OWVAR 26
76508: PUSH
76509: LD_STRING 
76511: ST_TO_ADDR
// end ;
76512: LD_VAR 0 1
76516: RET
// export function PrepareFrog ( ) ; begin
76517: LD_INT 0
76519: PPUSH
// uc_side := 0 ;
76520: LD_ADDR_OWVAR 20
76524: PUSH
76525: LD_INT 0
76527: ST_TO_ADDR
// uc_nation := 0 ;
76528: LD_ADDR_OWVAR 21
76532: PUSH
76533: LD_INT 0
76535: ST_TO_ADDR
// InitHc ;
76536: CALL_OW 19
// hc_class := class_frog ;
76540: LD_ADDR_OWVAR 28
76544: PUSH
76545: LD_INT 19
76547: ST_TO_ADDR
// hc_gallery :=  ;
76548: LD_ADDR_OWVAR 33
76552: PUSH
76553: LD_STRING 
76555: ST_TO_ADDR
// hc_name :=  ;
76556: LD_ADDR_OWVAR 26
76560: PUSH
76561: LD_STRING 
76563: ST_TO_ADDR
// end ;
76564: LD_VAR 0 1
76568: RET
// export function PrepareFish ( ) ; begin
76569: LD_INT 0
76571: PPUSH
// uc_side := 0 ;
76572: LD_ADDR_OWVAR 20
76576: PUSH
76577: LD_INT 0
76579: ST_TO_ADDR
// uc_nation := 0 ;
76580: LD_ADDR_OWVAR 21
76584: PUSH
76585: LD_INT 0
76587: ST_TO_ADDR
// InitHc ;
76588: CALL_OW 19
// hc_class := class_fish ;
76592: LD_ADDR_OWVAR 28
76596: PUSH
76597: LD_INT 20
76599: ST_TO_ADDR
// hc_gallery :=  ;
76600: LD_ADDR_OWVAR 33
76604: PUSH
76605: LD_STRING 
76607: ST_TO_ADDR
// hc_name :=  ;
76608: LD_ADDR_OWVAR 26
76612: PUSH
76613: LD_STRING 
76615: ST_TO_ADDR
// end ;
76616: LD_VAR 0 1
76620: RET
// export function PrepareBird ( ) ; begin
76621: LD_INT 0
76623: PPUSH
// uc_side := 0 ;
76624: LD_ADDR_OWVAR 20
76628: PUSH
76629: LD_INT 0
76631: ST_TO_ADDR
// uc_nation := 0 ;
76632: LD_ADDR_OWVAR 21
76636: PUSH
76637: LD_INT 0
76639: ST_TO_ADDR
// InitHc ;
76640: CALL_OW 19
// hc_class := class_phororhacos ;
76644: LD_ADDR_OWVAR 28
76648: PUSH
76649: LD_INT 18
76651: ST_TO_ADDR
// hc_gallery :=  ;
76652: LD_ADDR_OWVAR 33
76656: PUSH
76657: LD_STRING 
76659: ST_TO_ADDR
// hc_name :=  ;
76660: LD_ADDR_OWVAR 26
76664: PUSH
76665: LD_STRING 
76667: ST_TO_ADDR
// end ;
76668: LD_VAR 0 1
76672: RET
// export function PrepareHorse ( ) ; begin
76673: LD_INT 0
76675: PPUSH
// uc_side := 0 ;
76676: LD_ADDR_OWVAR 20
76680: PUSH
76681: LD_INT 0
76683: ST_TO_ADDR
// uc_nation := 0 ;
76684: LD_ADDR_OWVAR 21
76688: PUSH
76689: LD_INT 0
76691: ST_TO_ADDR
// InitHc ;
76692: CALL_OW 19
// hc_class := class_horse ;
76696: LD_ADDR_OWVAR 28
76700: PUSH
76701: LD_INT 21
76703: ST_TO_ADDR
// hc_gallery :=  ;
76704: LD_ADDR_OWVAR 33
76708: PUSH
76709: LD_STRING 
76711: ST_TO_ADDR
// hc_name :=  ;
76712: LD_ADDR_OWVAR 26
76716: PUSH
76717: LD_STRING 
76719: ST_TO_ADDR
// end ;
76720: LD_VAR 0 1
76724: RET
// export function PrepareMastodont ( ) ; begin
76725: LD_INT 0
76727: PPUSH
// uc_side := 0 ;
76728: LD_ADDR_OWVAR 20
76732: PUSH
76733: LD_INT 0
76735: ST_TO_ADDR
// uc_nation := 0 ;
76736: LD_ADDR_OWVAR 21
76740: PUSH
76741: LD_INT 0
76743: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76744: LD_ADDR_OWVAR 37
76748: PUSH
76749: LD_INT 31
76751: ST_TO_ADDR
// vc_control := control_rider ;
76752: LD_ADDR_OWVAR 38
76756: PUSH
76757: LD_INT 4
76759: ST_TO_ADDR
// end ;
76760: LD_VAR 0 1
76764: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76765: LD_INT 0
76767: PPUSH
76768: PPUSH
76769: PPUSH
// uc_side = 0 ;
76770: LD_ADDR_OWVAR 20
76774: PUSH
76775: LD_INT 0
76777: ST_TO_ADDR
// uc_nation = 0 ;
76778: LD_ADDR_OWVAR 21
76782: PUSH
76783: LD_INT 0
76785: ST_TO_ADDR
// InitHc_All ( ) ;
76786: CALL_OW 584
// InitVc ;
76790: CALL_OW 20
// if mastodonts then
76794: LD_VAR 0 6
76798: IFFALSE 76865
// for i = 1 to mastodonts do
76800: LD_ADDR_VAR 0 11
76804: PUSH
76805: DOUBLE
76806: LD_INT 1
76808: DEC
76809: ST_TO_ADDR
76810: LD_VAR 0 6
76814: PUSH
76815: FOR_TO
76816: IFFALSE 76863
// begin vc_chassis := 31 ;
76818: LD_ADDR_OWVAR 37
76822: PUSH
76823: LD_INT 31
76825: ST_TO_ADDR
// vc_control := control_rider ;
76826: LD_ADDR_OWVAR 38
76830: PUSH
76831: LD_INT 4
76833: ST_TO_ADDR
// animal := CreateVehicle ;
76834: LD_ADDR_VAR 0 12
76838: PUSH
76839: CALL_OW 45
76843: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76844: LD_VAR 0 12
76848: PPUSH
76849: LD_VAR 0 8
76853: PPUSH
76854: LD_INT 0
76856: PPUSH
76857: CALL 79007 0 3
// end ;
76861: GO 76815
76863: POP
76864: POP
// if horses then
76865: LD_VAR 0 5
76869: IFFALSE 76936
// for i = 1 to horses do
76871: LD_ADDR_VAR 0 11
76875: PUSH
76876: DOUBLE
76877: LD_INT 1
76879: DEC
76880: ST_TO_ADDR
76881: LD_VAR 0 5
76885: PUSH
76886: FOR_TO
76887: IFFALSE 76934
// begin hc_class := 21 ;
76889: LD_ADDR_OWVAR 28
76893: PUSH
76894: LD_INT 21
76896: ST_TO_ADDR
// hc_gallery :=  ;
76897: LD_ADDR_OWVAR 33
76901: PUSH
76902: LD_STRING 
76904: ST_TO_ADDR
// animal := CreateHuman ;
76905: LD_ADDR_VAR 0 12
76909: PUSH
76910: CALL_OW 44
76914: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76915: LD_VAR 0 12
76919: PPUSH
76920: LD_VAR 0 8
76924: PPUSH
76925: LD_INT 0
76927: PPUSH
76928: CALL 79007 0 3
// end ;
76932: GO 76886
76934: POP
76935: POP
// if birds then
76936: LD_VAR 0 1
76940: IFFALSE 77007
// for i = 1 to birds do
76942: LD_ADDR_VAR 0 11
76946: PUSH
76947: DOUBLE
76948: LD_INT 1
76950: DEC
76951: ST_TO_ADDR
76952: LD_VAR 0 1
76956: PUSH
76957: FOR_TO
76958: IFFALSE 77005
// begin hc_class := 18 ;
76960: LD_ADDR_OWVAR 28
76964: PUSH
76965: LD_INT 18
76967: ST_TO_ADDR
// hc_gallery =  ;
76968: LD_ADDR_OWVAR 33
76972: PUSH
76973: LD_STRING 
76975: ST_TO_ADDR
// animal := CreateHuman ;
76976: LD_ADDR_VAR 0 12
76980: PUSH
76981: CALL_OW 44
76985: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76986: LD_VAR 0 12
76990: PPUSH
76991: LD_VAR 0 8
76995: PPUSH
76996: LD_INT 0
76998: PPUSH
76999: CALL 79007 0 3
// end ;
77003: GO 76957
77005: POP
77006: POP
// if tigers then
77007: LD_VAR 0 2
77011: IFFALSE 77095
// for i = 1 to tigers do
77013: LD_ADDR_VAR 0 11
77017: PUSH
77018: DOUBLE
77019: LD_INT 1
77021: DEC
77022: ST_TO_ADDR
77023: LD_VAR 0 2
77027: PUSH
77028: FOR_TO
77029: IFFALSE 77093
// begin hc_class = class_tiger ;
77031: LD_ADDR_OWVAR 28
77035: PUSH
77036: LD_INT 14
77038: ST_TO_ADDR
// hc_gallery =  ;
77039: LD_ADDR_OWVAR 33
77043: PUSH
77044: LD_STRING 
77046: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77047: LD_ADDR_OWVAR 35
77051: PUSH
77052: LD_INT 7
77054: NEG
77055: PPUSH
77056: LD_INT 7
77058: PPUSH
77059: CALL_OW 12
77063: ST_TO_ADDR
// animal := CreateHuman ;
77064: LD_ADDR_VAR 0 12
77068: PUSH
77069: CALL_OW 44
77073: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77074: LD_VAR 0 12
77078: PPUSH
77079: LD_VAR 0 8
77083: PPUSH
77084: LD_INT 0
77086: PPUSH
77087: CALL 79007 0 3
// end ;
77091: GO 77028
77093: POP
77094: POP
// if apemans then
77095: LD_VAR 0 3
77099: IFFALSE 77222
// for i = 1 to apemans do
77101: LD_ADDR_VAR 0 11
77105: PUSH
77106: DOUBLE
77107: LD_INT 1
77109: DEC
77110: ST_TO_ADDR
77111: LD_VAR 0 3
77115: PUSH
77116: FOR_TO
77117: IFFALSE 77220
// begin hc_class = class_apeman ;
77119: LD_ADDR_OWVAR 28
77123: PUSH
77124: LD_INT 12
77126: ST_TO_ADDR
// hc_gallery =  ;
77127: LD_ADDR_OWVAR 33
77131: PUSH
77132: LD_STRING 
77134: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
77135: LD_ADDR_OWVAR 35
77139: PUSH
77140: LD_INT 2
77142: NEG
77143: PPUSH
77144: LD_INT 2
77146: PPUSH
77147: CALL_OW 12
77151: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77152: LD_ADDR_OWVAR 31
77156: PUSH
77157: LD_INT 1
77159: PPUSH
77160: LD_INT 3
77162: PPUSH
77163: CALL_OW 12
77167: PUSH
77168: LD_INT 1
77170: PPUSH
77171: LD_INT 3
77173: PPUSH
77174: CALL_OW 12
77178: PUSH
77179: LD_INT 0
77181: PUSH
77182: LD_INT 0
77184: PUSH
77185: EMPTY
77186: LIST
77187: LIST
77188: LIST
77189: LIST
77190: ST_TO_ADDR
// animal := CreateHuman ;
77191: LD_ADDR_VAR 0 12
77195: PUSH
77196: CALL_OW 44
77200: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77201: LD_VAR 0 12
77205: PPUSH
77206: LD_VAR 0 8
77210: PPUSH
77211: LD_INT 0
77213: PPUSH
77214: CALL 79007 0 3
// end ;
77218: GO 77116
77220: POP
77221: POP
// if enchidnas then
77222: LD_VAR 0 4
77226: IFFALSE 77293
// for i = 1 to enchidnas do
77228: LD_ADDR_VAR 0 11
77232: PUSH
77233: DOUBLE
77234: LD_INT 1
77236: DEC
77237: ST_TO_ADDR
77238: LD_VAR 0 4
77242: PUSH
77243: FOR_TO
77244: IFFALSE 77291
// begin hc_class = 13 ;
77246: LD_ADDR_OWVAR 28
77250: PUSH
77251: LD_INT 13
77253: ST_TO_ADDR
// hc_gallery =  ;
77254: LD_ADDR_OWVAR 33
77258: PUSH
77259: LD_STRING 
77261: ST_TO_ADDR
// animal := CreateHuman ;
77262: LD_ADDR_VAR 0 12
77266: PUSH
77267: CALL_OW 44
77271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77272: LD_VAR 0 12
77276: PPUSH
77277: LD_VAR 0 8
77281: PPUSH
77282: LD_INT 0
77284: PPUSH
77285: CALL 79007 0 3
// end ;
77289: GO 77243
77291: POP
77292: POP
// if fishes then
77293: LD_VAR 0 7
77297: IFFALSE 77364
// for i = 1 to fishes do
77299: LD_ADDR_VAR 0 11
77303: PUSH
77304: DOUBLE
77305: LD_INT 1
77307: DEC
77308: ST_TO_ADDR
77309: LD_VAR 0 7
77313: PUSH
77314: FOR_TO
77315: IFFALSE 77362
// begin hc_class = 20 ;
77317: LD_ADDR_OWVAR 28
77321: PUSH
77322: LD_INT 20
77324: ST_TO_ADDR
// hc_gallery =  ;
77325: LD_ADDR_OWVAR 33
77329: PUSH
77330: LD_STRING 
77332: ST_TO_ADDR
// animal := CreateHuman ;
77333: LD_ADDR_VAR 0 12
77337: PUSH
77338: CALL_OW 44
77342: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77343: LD_VAR 0 12
77347: PPUSH
77348: LD_VAR 0 9
77352: PPUSH
77353: LD_INT 0
77355: PPUSH
77356: CALL 79007 0 3
// end ;
77360: GO 77314
77362: POP
77363: POP
// end ;
77364: LD_VAR 0 10
77368: RET
// export function WantHeal ( sci , unit ) ; begin
77369: LD_INT 0
77371: PPUSH
// if GetTaskList ( sci ) > 0 then
77372: LD_VAR 0 1
77376: PPUSH
77377: CALL_OW 437
77381: PUSH
77382: LD_INT 0
77384: GREATER
77385: IFFALSE 77457
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77387: LD_VAR 0 1
77391: PPUSH
77392: CALL_OW 437
77396: PUSH
77397: LD_INT 1
77399: ARRAY
77400: PUSH
77401: LD_INT 1
77403: ARRAY
77404: PUSH
77405: LD_STRING l
77407: EQUAL
77408: IFFALSE 77435
77410: PUSH
77411: LD_VAR 0 1
77415: PPUSH
77416: CALL_OW 437
77420: PUSH
77421: LD_INT 1
77423: ARRAY
77424: PUSH
77425: LD_INT 4
77427: ARRAY
77428: PUSH
77429: LD_VAR 0 2
77433: EQUAL
77434: AND
77435: IFFALSE 77447
// result := true else
77437: LD_ADDR_VAR 0 3
77441: PUSH
77442: LD_INT 1
77444: ST_TO_ADDR
77445: GO 77455
// result := false ;
77447: LD_ADDR_VAR 0 3
77451: PUSH
77452: LD_INT 0
77454: ST_TO_ADDR
// end else
77455: GO 77465
// result := false ;
77457: LD_ADDR_VAR 0 3
77461: PUSH
77462: LD_INT 0
77464: ST_TO_ADDR
// end ;
77465: LD_VAR 0 3
77469: RET
// export function HealTarget ( sci ) ; begin
77470: LD_INT 0
77472: PPUSH
// if not sci then
77473: LD_VAR 0 1
77477: NOT
77478: IFFALSE 77482
// exit ;
77480: GO 77547
// result := 0 ;
77482: LD_ADDR_VAR 0 2
77486: PUSH
77487: LD_INT 0
77489: ST_TO_ADDR
// if GetTaskList ( sci ) then
77490: LD_VAR 0 1
77494: PPUSH
77495: CALL_OW 437
77499: IFFALSE 77547
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77501: LD_VAR 0 1
77505: PPUSH
77506: CALL_OW 437
77510: PUSH
77511: LD_INT 1
77513: ARRAY
77514: PUSH
77515: LD_INT 1
77517: ARRAY
77518: PUSH
77519: LD_STRING l
77521: EQUAL
77522: IFFALSE 77547
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77524: LD_ADDR_VAR 0 2
77528: PUSH
77529: LD_VAR 0 1
77533: PPUSH
77534: CALL_OW 437
77538: PUSH
77539: LD_INT 1
77541: ARRAY
77542: PUSH
77543: LD_INT 4
77545: ARRAY
77546: ST_TO_ADDR
// end ;
77547: LD_VAR 0 2
77551: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77552: LD_INT 0
77554: PPUSH
77555: PPUSH
77556: PPUSH
77557: PPUSH
// if not base_units then
77558: LD_VAR 0 1
77562: NOT
77563: IFFALSE 77567
// exit ;
77565: GO 77654
// result := false ;
77567: LD_ADDR_VAR 0 2
77571: PUSH
77572: LD_INT 0
77574: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77575: LD_ADDR_VAR 0 5
77579: PUSH
77580: LD_VAR 0 1
77584: PPUSH
77585: LD_INT 21
77587: PUSH
77588: LD_INT 3
77590: PUSH
77591: EMPTY
77592: LIST
77593: LIST
77594: PPUSH
77595: CALL_OW 72
77599: ST_TO_ADDR
// if not tmp then
77600: LD_VAR 0 5
77604: NOT
77605: IFFALSE 77609
// exit ;
77607: GO 77654
// for i in tmp do
77609: LD_ADDR_VAR 0 3
77613: PUSH
77614: LD_VAR 0 5
77618: PUSH
77619: FOR_IN
77620: IFFALSE 77652
// begin result := EnemyInRange ( i , 22 ) ;
77622: LD_ADDR_VAR 0 2
77626: PUSH
77627: LD_VAR 0 3
77631: PPUSH
77632: LD_INT 22
77634: PPUSH
77635: CALL 75079 0 2
77639: ST_TO_ADDR
// if result then
77640: LD_VAR 0 2
77644: IFFALSE 77650
// exit ;
77646: POP
77647: POP
77648: GO 77654
// end ;
77650: GO 77619
77652: POP
77653: POP
// end ;
77654: LD_VAR 0 2
77658: RET
// export function FilterByTag ( units , tag ) ; begin
77659: LD_INT 0
77661: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77662: LD_ADDR_VAR 0 3
77666: PUSH
77667: LD_VAR 0 1
77671: PPUSH
77672: LD_INT 120
77674: PUSH
77675: LD_VAR 0 2
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: PPUSH
77684: CALL_OW 72
77688: ST_TO_ADDR
// end ;
77689: LD_VAR 0 3
77693: RET
// export function IsDriver ( un ) ; begin
77694: LD_INT 0
77696: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77697: LD_ADDR_VAR 0 2
77701: PUSH
77702: LD_VAR 0 1
77706: PUSH
77707: LD_INT 55
77709: PUSH
77710: EMPTY
77711: LIST
77712: PPUSH
77713: CALL_OW 69
77717: IN
77718: ST_TO_ADDR
// end ;
77719: LD_VAR 0 2
77723: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77724: LD_INT 0
77726: PPUSH
77727: PPUSH
// list := [ ] ;
77728: LD_ADDR_VAR 0 5
77732: PUSH
77733: EMPTY
77734: ST_TO_ADDR
// case d of 0 :
77735: LD_VAR 0 3
77739: PUSH
77740: LD_INT 0
77742: DOUBLE
77743: EQUAL
77744: IFTRUE 77748
77746: GO 77881
77748: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77749: LD_ADDR_VAR 0 5
77753: PUSH
77754: LD_VAR 0 1
77758: PUSH
77759: LD_INT 4
77761: MINUS
77762: PUSH
77763: LD_VAR 0 2
77767: PUSH
77768: LD_INT 4
77770: MINUS
77771: PUSH
77772: LD_INT 2
77774: PUSH
77775: EMPTY
77776: LIST
77777: LIST
77778: LIST
77779: PUSH
77780: LD_VAR 0 1
77784: PUSH
77785: LD_INT 3
77787: MINUS
77788: PUSH
77789: LD_VAR 0 2
77793: PUSH
77794: LD_INT 1
77796: PUSH
77797: EMPTY
77798: LIST
77799: LIST
77800: LIST
77801: PUSH
77802: LD_VAR 0 1
77806: PUSH
77807: LD_INT 4
77809: PLUS
77810: PUSH
77811: LD_VAR 0 2
77815: PUSH
77816: LD_INT 4
77818: PUSH
77819: EMPTY
77820: LIST
77821: LIST
77822: LIST
77823: PUSH
77824: LD_VAR 0 1
77828: PUSH
77829: LD_INT 3
77831: PLUS
77832: PUSH
77833: LD_VAR 0 2
77837: PUSH
77838: LD_INT 3
77840: PLUS
77841: PUSH
77842: LD_INT 5
77844: PUSH
77845: EMPTY
77846: LIST
77847: LIST
77848: LIST
77849: PUSH
77850: LD_VAR 0 1
77854: PUSH
77855: LD_VAR 0 2
77859: PUSH
77860: LD_INT 4
77862: PLUS
77863: PUSH
77864: LD_INT 0
77866: PUSH
77867: EMPTY
77868: LIST
77869: LIST
77870: LIST
77871: PUSH
77872: EMPTY
77873: LIST
77874: LIST
77875: LIST
77876: LIST
77877: LIST
77878: ST_TO_ADDR
// end ; 1 :
77879: GO 78579
77881: LD_INT 1
77883: DOUBLE
77884: EQUAL
77885: IFTRUE 77889
77887: GO 78022
77889: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77890: LD_ADDR_VAR 0 5
77894: PUSH
77895: LD_VAR 0 1
77899: PUSH
77900: LD_VAR 0 2
77904: PUSH
77905: LD_INT 4
77907: MINUS
77908: PUSH
77909: LD_INT 3
77911: PUSH
77912: EMPTY
77913: LIST
77914: LIST
77915: LIST
77916: PUSH
77917: LD_VAR 0 1
77921: PUSH
77922: LD_INT 3
77924: MINUS
77925: PUSH
77926: LD_VAR 0 2
77930: PUSH
77931: LD_INT 3
77933: MINUS
77934: PUSH
77935: LD_INT 2
77937: PUSH
77938: EMPTY
77939: LIST
77940: LIST
77941: LIST
77942: PUSH
77943: LD_VAR 0 1
77947: PUSH
77948: LD_INT 4
77950: MINUS
77951: PUSH
77952: LD_VAR 0 2
77956: PUSH
77957: LD_INT 1
77959: PUSH
77960: EMPTY
77961: LIST
77962: LIST
77963: LIST
77964: PUSH
77965: LD_VAR 0 1
77969: PUSH
77970: LD_VAR 0 2
77974: PUSH
77975: LD_INT 3
77977: PLUS
77978: PUSH
77979: LD_INT 0
77981: PUSH
77982: EMPTY
77983: LIST
77984: LIST
77985: LIST
77986: PUSH
77987: LD_VAR 0 1
77991: PUSH
77992: LD_INT 4
77994: PLUS
77995: PUSH
77996: LD_VAR 0 2
78000: PUSH
78001: LD_INT 4
78003: PLUS
78004: PUSH
78005: LD_INT 5
78007: PUSH
78008: EMPTY
78009: LIST
78010: LIST
78011: LIST
78012: PUSH
78013: EMPTY
78014: LIST
78015: LIST
78016: LIST
78017: LIST
78018: LIST
78019: ST_TO_ADDR
// end ; 2 :
78020: GO 78579
78022: LD_INT 2
78024: DOUBLE
78025: EQUAL
78026: IFTRUE 78030
78028: GO 78159
78030: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78031: LD_ADDR_VAR 0 5
78035: PUSH
78036: LD_VAR 0 1
78040: PUSH
78041: LD_VAR 0 2
78045: PUSH
78046: LD_INT 3
78048: MINUS
78049: PUSH
78050: LD_INT 3
78052: PUSH
78053: EMPTY
78054: LIST
78055: LIST
78056: LIST
78057: PUSH
78058: LD_VAR 0 1
78062: PUSH
78063: LD_INT 4
78065: PLUS
78066: PUSH
78067: LD_VAR 0 2
78071: PUSH
78072: LD_INT 4
78074: PUSH
78075: EMPTY
78076: LIST
78077: LIST
78078: LIST
78079: PUSH
78080: LD_VAR 0 1
78084: PUSH
78085: LD_VAR 0 2
78089: PUSH
78090: LD_INT 4
78092: PLUS
78093: PUSH
78094: LD_INT 0
78096: PUSH
78097: EMPTY
78098: LIST
78099: LIST
78100: LIST
78101: PUSH
78102: LD_VAR 0 1
78106: PUSH
78107: LD_INT 3
78109: MINUS
78110: PUSH
78111: LD_VAR 0 2
78115: PUSH
78116: LD_INT 1
78118: PUSH
78119: EMPTY
78120: LIST
78121: LIST
78122: LIST
78123: PUSH
78124: LD_VAR 0 1
78128: PUSH
78129: LD_INT 4
78131: MINUS
78132: PUSH
78133: LD_VAR 0 2
78137: PUSH
78138: LD_INT 4
78140: MINUS
78141: PUSH
78142: LD_INT 2
78144: PUSH
78145: EMPTY
78146: LIST
78147: LIST
78148: LIST
78149: PUSH
78150: EMPTY
78151: LIST
78152: LIST
78153: LIST
78154: LIST
78155: LIST
78156: ST_TO_ADDR
// end ; 3 :
78157: GO 78579
78159: LD_INT 3
78161: DOUBLE
78162: EQUAL
78163: IFTRUE 78167
78165: GO 78300
78167: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78168: LD_ADDR_VAR 0 5
78172: PUSH
78173: LD_VAR 0 1
78177: PUSH
78178: LD_INT 3
78180: PLUS
78181: PUSH
78182: LD_VAR 0 2
78186: PUSH
78187: LD_INT 4
78189: PUSH
78190: EMPTY
78191: LIST
78192: LIST
78193: LIST
78194: PUSH
78195: LD_VAR 0 1
78199: PUSH
78200: LD_INT 4
78202: PLUS
78203: PUSH
78204: LD_VAR 0 2
78208: PUSH
78209: LD_INT 4
78211: PLUS
78212: PUSH
78213: LD_INT 5
78215: PUSH
78216: EMPTY
78217: LIST
78218: LIST
78219: LIST
78220: PUSH
78221: LD_VAR 0 1
78225: PUSH
78226: LD_INT 4
78228: MINUS
78229: PUSH
78230: LD_VAR 0 2
78234: PUSH
78235: LD_INT 1
78237: PUSH
78238: EMPTY
78239: LIST
78240: LIST
78241: LIST
78242: PUSH
78243: LD_VAR 0 1
78247: PUSH
78248: LD_VAR 0 2
78252: PUSH
78253: LD_INT 4
78255: MINUS
78256: PUSH
78257: LD_INT 3
78259: PUSH
78260: EMPTY
78261: LIST
78262: LIST
78263: LIST
78264: PUSH
78265: LD_VAR 0 1
78269: PUSH
78270: LD_INT 3
78272: MINUS
78273: PUSH
78274: LD_VAR 0 2
78278: PUSH
78279: LD_INT 3
78281: MINUS
78282: PUSH
78283: LD_INT 2
78285: PUSH
78286: EMPTY
78287: LIST
78288: LIST
78289: LIST
78290: PUSH
78291: EMPTY
78292: LIST
78293: LIST
78294: LIST
78295: LIST
78296: LIST
78297: ST_TO_ADDR
// end ; 4 :
78298: GO 78579
78300: LD_INT 4
78302: DOUBLE
78303: EQUAL
78304: IFTRUE 78308
78306: GO 78441
78308: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78309: LD_ADDR_VAR 0 5
78313: PUSH
78314: LD_VAR 0 1
78318: PUSH
78319: LD_VAR 0 2
78323: PUSH
78324: LD_INT 4
78326: PLUS
78327: PUSH
78328: LD_INT 0
78330: PUSH
78331: EMPTY
78332: LIST
78333: LIST
78334: LIST
78335: PUSH
78336: LD_VAR 0 1
78340: PUSH
78341: LD_INT 3
78343: PLUS
78344: PUSH
78345: LD_VAR 0 2
78349: PUSH
78350: LD_INT 3
78352: PLUS
78353: PUSH
78354: LD_INT 5
78356: PUSH
78357: EMPTY
78358: LIST
78359: LIST
78360: LIST
78361: PUSH
78362: LD_VAR 0 1
78366: PUSH
78367: LD_INT 4
78369: PLUS
78370: PUSH
78371: LD_VAR 0 2
78375: PUSH
78376: LD_INT 4
78378: PUSH
78379: EMPTY
78380: LIST
78381: LIST
78382: LIST
78383: PUSH
78384: LD_VAR 0 1
78388: PUSH
78389: LD_VAR 0 2
78393: PUSH
78394: LD_INT 3
78396: MINUS
78397: PUSH
78398: LD_INT 3
78400: PUSH
78401: EMPTY
78402: LIST
78403: LIST
78404: LIST
78405: PUSH
78406: LD_VAR 0 1
78410: PUSH
78411: LD_INT 4
78413: MINUS
78414: PUSH
78415: LD_VAR 0 2
78419: PUSH
78420: LD_INT 4
78422: MINUS
78423: PUSH
78424: LD_INT 2
78426: PUSH
78427: EMPTY
78428: LIST
78429: LIST
78430: LIST
78431: PUSH
78432: EMPTY
78433: LIST
78434: LIST
78435: LIST
78436: LIST
78437: LIST
78438: ST_TO_ADDR
// end ; 5 :
78439: GO 78579
78441: LD_INT 5
78443: DOUBLE
78444: EQUAL
78445: IFTRUE 78449
78447: GO 78578
78449: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78450: LD_ADDR_VAR 0 5
78454: PUSH
78455: LD_VAR 0 1
78459: PUSH
78460: LD_INT 4
78462: MINUS
78463: PUSH
78464: LD_VAR 0 2
78468: PUSH
78469: LD_INT 1
78471: PUSH
78472: EMPTY
78473: LIST
78474: LIST
78475: LIST
78476: PUSH
78477: LD_VAR 0 1
78481: PUSH
78482: LD_VAR 0 2
78486: PUSH
78487: LD_INT 4
78489: MINUS
78490: PUSH
78491: LD_INT 3
78493: PUSH
78494: EMPTY
78495: LIST
78496: LIST
78497: LIST
78498: PUSH
78499: LD_VAR 0 1
78503: PUSH
78504: LD_INT 4
78506: PLUS
78507: PUSH
78508: LD_VAR 0 2
78512: PUSH
78513: LD_INT 4
78515: PLUS
78516: PUSH
78517: LD_INT 5
78519: PUSH
78520: EMPTY
78521: LIST
78522: LIST
78523: LIST
78524: PUSH
78525: LD_VAR 0 1
78529: PUSH
78530: LD_INT 3
78532: PLUS
78533: PUSH
78534: LD_VAR 0 2
78538: PUSH
78539: LD_INT 4
78541: PUSH
78542: EMPTY
78543: LIST
78544: LIST
78545: LIST
78546: PUSH
78547: LD_VAR 0 1
78551: PUSH
78552: LD_VAR 0 2
78556: PUSH
78557: LD_INT 3
78559: PLUS
78560: PUSH
78561: LD_INT 0
78563: PUSH
78564: EMPTY
78565: LIST
78566: LIST
78567: LIST
78568: PUSH
78569: EMPTY
78570: LIST
78571: LIST
78572: LIST
78573: LIST
78574: LIST
78575: ST_TO_ADDR
// end ; end ;
78576: GO 78579
78578: POP
// result := list ;
78579: LD_ADDR_VAR 0 4
78583: PUSH
78584: LD_VAR 0 5
78588: ST_TO_ADDR
// end ;
78589: LD_VAR 0 4
78593: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78594: LD_INT 0
78596: PPUSH
78597: PPUSH
78598: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78599: LD_VAR 0 1
78603: NOT
78604: IFTRUE 78632
78606: PUSH
78607: LD_VAR 0 2
78611: PUSH
78612: LD_INT 1
78614: PUSH
78615: LD_INT 2
78617: PUSH
78618: LD_INT 3
78620: PUSH
78621: LD_INT 4
78623: PUSH
78624: EMPTY
78625: LIST
78626: LIST
78627: LIST
78628: LIST
78629: IN
78630: NOT
78631: OR
78632: IFFALSE 78636
// exit ;
78634: GO 78719
// tmp := [ ] ;
78636: LD_ADDR_VAR 0 5
78640: PUSH
78641: EMPTY
78642: ST_TO_ADDR
// for i in units do
78643: LD_ADDR_VAR 0 4
78647: PUSH
78648: LD_VAR 0 1
78652: PUSH
78653: FOR_IN
78654: IFFALSE 78688
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78656: LD_ADDR_VAR 0 5
78660: PUSH
78661: LD_VAR 0 5
78665: PPUSH
78666: LD_VAR 0 4
78670: PPUSH
78671: LD_VAR 0 2
78675: PPUSH
78676: CALL_OW 259
78680: PPUSH
78681: CALL 80114 0 2
78685: ST_TO_ADDR
78686: GO 78653
78688: POP
78689: POP
// if not tmp then
78690: LD_VAR 0 5
78694: NOT
78695: IFFALSE 78699
// exit ;
78697: GO 78719
// result := SortListByListDesc ( units , tmp ) ;
78699: LD_ADDR_VAR 0 3
78703: PUSH
78704: LD_VAR 0 1
78708: PPUSH
78709: LD_VAR 0 5
78713: PPUSH
78714: CALL_OW 77
78718: ST_TO_ADDR
// end ;
78719: LD_VAR 0 3
78723: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78724: LD_INT 0
78726: PPUSH
78727: PPUSH
78728: PPUSH
// result := false ;
78729: LD_ADDR_VAR 0 3
78733: PUSH
78734: LD_INT 0
78736: ST_TO_ADDR
// if not building then
78737: LD_VAR 0 2
78741: NOT
78742: IFFALSE 78746
// exit ;
78744: GO 78890
// x := GetX ( building ) ;
78746: LD_ADDR_VAR 0 4
78750: PUSH
78751: LD_VAR 0 2
78755: PPUSH
78756: CALL_OW 250
78760: ST_TO_ADDR
// y := GetY ( building ) ;
78761: LD_ADDR_VAR 0 5
78765: PUSH
78766: LD_VAR 0 2
78770: PPUSH
78771: CALL_OW 251
78775: ST_TO_ADDR
// if not x or not y then
78776: LD_VAR 0 4
78780: NOT
78781: IFTRUE 78790
78783: PUSH
78784: LD_VAR 0 5
78788: NOT
78789: OR
78790: IFFALSE 78794
// exit ;
78792: GO 78890
// if GetTaskList ( unit ) then
78794: LD_VAR 0 1
78798: PPUSH
78799: CALL_OW 437
78803: IFFALSE 78890
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78805: LD_STRING e
78807: PUSH
78808: LD_VAR 0 1
78812: PPUSH
78813: CALL_OW 437
78817: PUSH
78818: LD_INT 1
78820: ARRAY
78821: PUSH
78822: LD_INT 1
78824: ARRAY
78825: EQUAL
78826: IFFALSE 78853
78828: PUSH
78829: LD_VAR 0 4
78833: PUSH
78834: LD_VAR 0 1
78838: PPUSH
78839: CALL_OW 437
78843: PUSH
78844: LD_INT 1
78846: ARRAY
78847: PUSH
78848: LD_INT 2
78850: ARRAY
78851: EQUAL
78852: AND
78853: IFFALSE 78880
78855: PUSH
78856: LD_VAR 0 5
78860: PUSH
78861: LD_VAR 0 1
78865: PPUSH
78866: CALL_OW 437
78870: PUSH
78871: LD_INT 1
78873: ARRAY
78874: PUSH
78875: LD_INT 3
78877: ARRAY
78878: EQUAL
78879: AND
78880: IFFALSE 78890
// result := true end ;
78882: LD_ADDR_VAR 0 3
78886: PUSH
78887: LD_INT 1
78889: ST_TO_ADDR
// end ;
78890: LD_VAR 0 3
78894: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78895: LD_INT 0
78897: PPUSH
// result := false ;
78898: LD_ADDR_VAR 0 4
78902: PUSH
78903: LD_INT 0
78905: ST_TO_ADDR
// if GetTaskList ( unit ) then
78906: LD_VAR 0 1
78910: PPUSH
78911: CALL_OW 437
78915: IFFALSE 79002
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78917: LD_STRING M
78919: PUSH
78920: LD_VAR 0 1
78924: PPUSH
78925: CALL_OW 437
78929: PUSH
78930: LD_INT 1
78932: ARRAY
78933: PUSH
78934: LD_INT 1
78936: ARRAY
78937: EQUAL
78938: IFFALSE 78965
78940: PUSH
78941: LD_VAR 0 2
78945: PUSH
78946: LD_VAR 0 1
78950: PPUSH
78951: CALL_OW 437
78955: PUSH
78956: LD_INT 1
78958: ARRAY
78959: PUSH
78960: LD_INT 2
78962: ARRAY
78963: EQUAL
78964: AND
78965: IFFALSE 78992
78967: PUSH
78968: LD_VAR 0 3
78972: PUSH
78973: LD_VAR 0 1
78977: PPUSH
78978: CALL_OW 437
78982: PUSH
78983: LD_INT 1
78985: ARRAY
78986: PUSH
78987: LD_INT 3
78989: ARRAY
78990: EQUAL
78991: AND
78992: IFFALSE 79002
// result := true ;
78994: LD_ADDR_VAR 0 4
78998: PUSH
78999: LD_INT 1
79001: ST_TO_ADDR
// end ; end ;
79002: LD_VAR 0 4
79006: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79007: LD_INT 0
79009: PPUSH
79010: PPUSH
79011: PPUSH
79012: PPUSH
// if not unit or not area then
79013: LD_VAR 0 1
79017: NOT
79018: IFTRUE 79027
79020: PUSH
79021: LD_VAR 0 2
79025: NOT
79026: OR
79027: IFFALSE 79031
// exit ;
79029: GO 79207
// tmp := AreaToList ( area , i ) ;
79031: LD_ADDR_VAR 0 6
79035: PUSH
79036: LD_VAR 0 2
79040: PPUSH
79041: LD_VAR 0 5
79045: PPUSH
79046: CALL_OW 517
79050: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79051: LD_ADDR_VAR 0 5
79055: PUSH
79056: DOUBLE
79057: LD_INT 1
79059: DEC
79060: ST_TO_ADDR
79061: LD_VAR 0 6
79065: PUSH
79066: LD_INT 1
79068: ARRAY
79069: PUSH
79070: FOR_TO
79071: IFFALSE 79205
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79073: LD_ADDR_VAR 0 7
79077: PUSH
79078: LD_VAR 0 6
79082: PUSH
79083: LD_INT 1
79085: ARRAY
79086: PUSH
79087: LD_VAR 0 5
79091: ARRAY
79092: PUSH
79093: LD_VAR 0 6
79097: PUSH
79098: LD_INT 2
79100: ARRAY
79101: PUSH
79102: LD_VAR 0 5
79106: ARRAY
79107: PUSH
79108: EMPTY
79109: LIST
79110: LIST
79111: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
79112: LD_INT 92
79114: PUSH
79115: LD_VAR 0 7
79119: PUSH
79120: LD_INT 1
79122: ARRAY
79123: PUSH
79124: LD_VAR 0 7
79128: PUSH
79129: LD_INT 2
79131: ARRAY
79132: PUSH
79133: LD_INT 2
79135: PUSH
79136: EMPTY
79137: LIST
79138: LIST
79139: LIST
79140: LIST
79141: PPUSH
79142: CALL_OW 69
79146: PUSH
79147: LD_INT 0
79149: EQUAL
79150: IFFALSE 79203
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79152: LD_VAR 0 1
79156: PPUSH
79157: LD_VAR 0 7
79161: PUSH
79162: LD_INT 1
79164: ARRAY
79165: PPUSH
79166: LD_VAR 0 7
79170: PUSH
79171: LD_INT 2
79173: ARRAY
79174: PPUSH
79175: LD_VAR 0 3
79179: PPUSH
79180: CALL_OW 48
// result := IsPlaced ( unit ) ;
79184: LD_ADDR_VAR 0 4
79188: PUSH
79189: LD_VAR 0 1
79193: PPUSH
79194: CALL_OW 305
79198: ST_TO_ADDR
// exit ;
79199: POP
79200: POP
79201: GO 79207
// end ; end ;
79203: GO 79070
79205: POP
79206: POP
// end ;
79207: LD_VAR 0 4
79211: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79212: LD_INT 0
79214: PPUSH
79215: PPUSH
79216: PPUSH
// if not side or side > 8 then
79217: LD_VAR 0 1
79221: NOT
79222: IFTRUE 79234
79224: PUSH
79225: LD_VAR 0 1
79229: PUSH
79230: LD_INT 8
79232: GREATER
79233: OR
79234: IFFALSE 79238
// exit ;
79236: GO 79425
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79238: LD_ADDR_VAR 0 4
79242: PUSH
79243: LD_INT 22
79245: PUSH
79246: LD_VAR 0 1
79250: PUSH
79251: EMPTY
79252: LIST
79253: LIST
79254: PUSH
79255: LD_INT 21
79257: PUSH
79258: LD_INT 3
79260: PUSH
79261: EMPTY
79262: LIST
79263: LIST
79264: PUSH
79265: EMPTY
79266: LIST
79267: LIST
79268: PPUSH
79269: CALL_OW 69
79273: ST_TO_ADDR
// if not tmp then
79274: LD_VAR 0 4
79278: NOT
79279: IFFALSE 79283
// exit ;
79281: GO 79425
// enable_addtolog := true ;
79283: LD_ADDR_OWVAR 81
79287: PUSH
79288: LD_INT 1
79290: ST_TO_ADDR
// AddToLog ( [ ) ;
79291: LD_STRING [
79293: PPUSH
79294: CALL_OW 561
// for i in tmp do
79298: LD_ADDR_VAR 0 3
79302: PUSH
79303: LD_VAR 0 4
79307: PUSH
79308: FOR_IN
79309: IFFALSE 79416
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79311: LD_STRING [
79313: PUSH
79314: LD_VAR 0 3
79318: PPUSH
79319: CALL_OW 266
79323: STR
79324: PUSH
79325: LD_STRING , 
79327: STR
79328: PUSH
79329: LD_VAR 0 3
79333: PPUSH
79334: CALL_OW 250
79338: STR
79339: PUSH
79340: LD_STRING , 
79342: STR
79343: PUSH
79344: LD_VAR 0 3
79348: PPUSH
79349: CALL_OW 251
79353: STR
79354: PUSH
79355: LD_STRING , 
79357: STR
79358: PUSH
79359: LD_VAR 0 3
79363: PPUSH
79364: CALL_OW 254
79368: STR
79369: PUSH
79370: LD_STRING , 
79372: STR
79373: PUSH
79374: LD_VAR 0 3
79378: PPUSH
79379: LD_INT 1
79381: PPUSH
79382: CALL_OW 268
79386: STR
79387: PUSH
79388: LD_STRING , 
79390: STR
79391: PUSH
79392: LD_VAR 0 3
79396: PPUSH
79397: LD_INT 2
79399: PPUSH
79400: CALL_OW 268
79404: STR
79405: PUSH
79406: LD_STRING ],
79408: STR
79409: PPUSH
79410: CALL_OW 561
// end ;
79414: GO 79308
79416: POP
79417: POP
// AddToLog ( ]; ) ;
79418: LD_STRING ];
79420: PPUSH
79421: CALL_OW 561
// end ;
79425: LD_VAR 0 2
79429: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79430: LD_INT 0
79432: PPUSH
79433: PPUSH
79434: PPUSH
79435: PPUSH
79436: PPUSH
// if not area or not rate or not max then
79437: LD_VAR 0 1
79441: NOT
79442: IFTRUE 79451
79444: PUSH
79445: LD_VAR 0 2
79449: NOT
79450: OR
79451: IFTRUE 79460
79453: PUSH
79454: LD_VAR 0 4
79458: NOT
79459: OR
79460: IFFALSE 79464
// exit ;
79462: GO 79653
// while 1 do
79464: LD_INT 1
79466: IFFALSE 79653
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79468: LD_ADDR_VAR 0 9
79472: PUSH
79473: LD_VAR 0 1
79477: PPUSH
79478: LD_INT 1
79480: PPUSH
79481: CALL_OW 287
79485: PUSH
79486: LD_INT 10
79488: MUL
79489: ST_TO_ADDR
// r := rate / 10 ;
79490: LD_ADDR_VAR 0 7
79494: PUSH
79495: LD_VAR 0 2
79499: PUSH
79500: LD_INT 10
79502: DIVREAL
79503: ST_TO_ADDR
// time := 1 1$00 ;
79504: LD_ADDR_VAR 0 8
79508: PUSH
79509: LD_INT 2100
79511: ST_TO_ADDR
// if amount < min then
79512: LD_VAR 0 9
79516: PUSH
79517: LD_VAR 0 3
79521: LESS
79522: IFFALSE 79540
// r := r * 2 else
79524: LD_ADDR_VAR 0 7
79528: PUSH
79529: LD_VAR 0 7
79533: PUSH
79534: LD_INT 2
79536: MUL
79537: ST_TO_ADDR
79538: GO 79566
// if amount > max then
79540: LD_VAR 0 9
79544: PUSH
79545: LD_VAR 0 4
79549: GREATER
79550: IFFALSE 79566
// r := r / 2 ;
79552: LD_ADDR_VAR 0 7
79556: PUSH
79557: LD_VAR 0 7
79561: PUSH
79562: LD_INT 2
79564: DIVREAL
79565: ST_TO_ADDR
// time := time / r ;
79566: LD_ADDR_VAR 0 8
79570: PUSH
79571: LD_VAR 0 8
79575: PUSH
79576: LD_VAR 0 7
79580: DIVREAL
79581: ST_TO_ADDR
// if time < 0 then
79582: LD_VAR 0 8
79586: PUSH
79587: LD_INT 0
79589: LESS
79590: IFFALSE 79607
// time := time * - 1 ;
79592: LD_ADDR_VAR 0 8
79596: PUSH
79597: LD_VAR 0 8
79601: PUSH
79602: LD_INT 1
79604: NEG
79605: MUL
79606: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79607: LD_VAR 0 8
79611: PUSH
79612: LD_INT 35
79614: PPUSH
79615: LD_INT 875
79617: PPUSH
79618: CALL_OW 12
79622: PLUS
79623: PPUSH
79624: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79628: LD_INT 1
79630: PPUSH
79631: LD_INT 5
79633: PPUSH
79634: CALL_OW 12
79638: PPUSH
79639: LD_VAR 0 1
79643: PPUSH
79644: LD_INT 1
79646: PPUSH
79647: CALL_OW 55
// end ;
79651: GO 79464
// end ;
79653: LD_VAR 0 5
79657: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79658: LD_INT 0
79660: PPUSH
79661: PPUSH
79662: PPUSH
79663: PPUSH
79664: PPUSH
79665: PPUSH
79666: PPUSH
79667: PPUSH
// if not turrets or not factories then
79668: LD_VAR 0 1
79672: NOT
79673: IFTRUE 79682
79675: PUSH
79676: LD_VAR 0 2
79680: NOT
79681: OR
79682: IFFALSE 79686
// exit ;
79684: GO 79993
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79686: LD_ADDR_VAR 0 10
79690: PUSH
79691: LD_INT 5
79693: PUSH
79694: LD_INT 6
79696: PUSH
79697: EMPTY
79698: LIST
79699: LIST
79700: PUSH
79701: LD_INT 2
79703: PUSH
79704: LD_INT 4
79706: PUSH
79707: EMPTY
79708: LIST
79709: LIST
79710: PUSH
79711: LD_INT 3
79713: PUSH
79714: LD_INT 5
79716: PUSH
79717: EMPTY
79718: LIST
79719: LIST
79720: PUSH
79721: EMPTY
79722: LIST
79723: LIST
79724: LIST
79725: PUSH
79726: LD_INT 24
79728: PUSH
79729: LD_INT 25
79731: PUSH
79732: EMPTY
79733: LIST
79734: LIST
79735: PUSH
79736: LD_INT 23
79738: PUSH
79739: LD_INT 27
79741: PUSH
79742: EMPTY
79743: LIST
79744: LIST
79745: PUSH
79746: EMPTY
79747: LIST
79748: LIST
79749: PUSH
79750: LD_INT 42
79752: PUSH
79753: LD_INT 43
79755: PUSH
79756: EMPTY
79757: LIST
79758: LIST
79759: PUSH
79760: LD_INT 44
79762: PUSH
79763: LD_INT 46
79765: PUSH
79766: EMPTY
79767: LIST
79768: LIST
79769: PUSH
79770: LD_INT 45
79772: PUSH
79773: LD_INT 47
79775: PUSH
79776: EMPTY
79777: LIST
79778: LIST
79779: PUSH
79780: EMPTY
79781: LIST
79782: LIST
79783: LIST
79784: PUSH
79785: EMPTY
79786: LIST
79787: LIST
79788: LIST
79789: ST_TO_ADDR
// result := [ ] ;
79790: LD_ADDR_VAR 0 3
79794: PUSH
79795: EMPTY
79796: ST_TO_ADDR
// for i in turrets do
79797: LD_ADDR_VAR 0 4
79801: PUSH
79802: LD_VAR 0 1
79806: PUSH
79807: FOR_IN
79808: IFFALSE 79991
// begin nat := GetNation ( i ) ;
79810: LD_ADDR_VAR 0 7
79814: PUSH
79815: LD_VAR 0 4
79819: PPUSH
79820: CALL_OW 248
79824: ST_TO_ADDR
// weapon := 0 ;
79825: LD_ADDR_VAR 0 8
79829: PUSH
79830: LD_INT 0
79832: ST_TO_ADDR
// if not nat then
79833: LD_VAR 0 7
79837: NOT
79838: IFFALSE 79842
// continue ;
79840: GO 79807
// for j in list [ nat ] do
79842: LD_ADDR_VAR 0 5
79846: PUSH
79847: LD_VAR 0 10
79851: PUSH
79852: LD_VAR 0 7
79856: ARRAY
79857: PUSH
79858: FOR_IN
79859: IFFALSE 79900
// if GetBWeapon ( i ) = j [ 1 ] then
79861: LD_VAR 0 4
79865: PPUSH
79866: CALL_OW 269
79870: PUSH
79871: LD_VAR 0 5
79875: PUSH
79876: LD_INT 1
79878: ARRAY
79879: EQUAL
79880: IFFALSE 79898
// begin weapon := j [ 2 ] ;
79882: LD_ADDR_VAR 0 8
79886: PUSH
79887: LD_VAR 0 5
79891: PUSH
79892: LD_INT 2
79894: ARRAY
79895: ST_TO_ADDR
// break ;
79896: GO 79900
// end ;
79898: GO 79858
79900: POP
79901: POP
// if not weapon then
79902: LD_VAR 0 8
79906: NOT
79907: IFFALSE 79911
// continue ;
79909: GO 79807
// for k in factories do
79911: LD_ADDR_VAR 0 6
79915: PUSH
79916: LD_VAR 0 2
79920: PUSH
79921: FOR_IN
79922: IFFALSE 79987
// begin weapons := AvailableWeaponList ( k ) ;
79924: LD_ADDR_VAR 0 9
79928: PUSH
79929: LD_VAR 0 6
79933: PPUSH
79934: CALL_OW 478
79938: ST_TO_ADDR
// if not weapons then
79939: LD_VAR 0 9
79943: NOT
79944: IFFALSE 79948
// continue ;
79946: GO 79921
// if weapon in weapons then
79948: LD_VAR 0 8
79952: PUSH
79953: LD_VAR 0 9
79957: IN
79958: IFFALSE 79985
// begin result := [ i , weapon ] ;
79960: LD_ADDR_VAR 0 3
79964: PUSH
79965: LD_VAR 0 4
79969: PUSH
79970: LD_VAR 0 8
79974: PUSH
79975: EMPTY
79976: LIST
79977: LIST
79978: ST_TO_ADDR
// exit ;
79979: POP
79980: POP
79981: POP
79982: POP
79983: GO 79993
// end ; end ;
79985: GO 79921
79987: POP
79988: POP
// end ;
79989: GO 79807
79991: POP
79992: POP
// end ;
79993: LD_VAR 0 3
79997: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79998: LD_INT 0
80000: PPUSH
// if not side or side > 8 then
80001: LD_VAR 0 3
80005: NOT
80006: IFTRUE 80018
80008: PUSH
80009: LD_VAR 0 3
80013: PUSH
80014: LD_INT 8
80016: GREATER
80017: OR
80018: IFFALSE 80022
// exit ;
80020: GO 80081
// if not range then
80022: LD_VAR 0 4
80026: NOT
80027: IFFALSE 80038
// range := - 12 ;
80029: LD_ADDR_VAR 0 4
80033: PUSH
80034: LD_INT 12
80036: NEG
80037: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80038: LD_VAR 0 1
80042: PPUSH
80043: LD_VAR 0 2
80047: PPUSH
80048: LD_VAR 0 3
80052: PPUSH
80053: LD_VAR 0 4
80057: PPUSH
80058: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80062: LD_VAR 0 1
80066: PPUSH
80067: LD_VAR 0 2
80071: PPUSH
80072: LD_VAR 0 3
80076: PPUSH
80077: CALL_OW 331
// end ;
80081: LD_VAR 0 5
80085: RET
// export function Video ( mode ) ; begin
80086: LD_INT 0
80088: PPUSH
// ingame_video = mode ;
80089: LD_ADDR_OWVAR 52
80093: PUSH
80094: LD_VAR 0 1
80098: ST_TO_ADDR
// interface_hidden = mode ;
80099: LD_ADDR_OWVAR 54
80103: PUSH
80104: LD_VAR 0 1
80108: ST_TO_ADDR
// end ;
80109: LD_VAR 0 2
80113: RET
// export function Join ( array , element ) ; begin
80114: LD_INT 0
80116: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80117: LD_ADDR_VAR 0 3
80121: PUSH
80122: LD_VAR 0 1
80126: PPUSH
80127: LD_VAR 0 1
80131: PUSH
80132: LD_INT 1
80134: PLUS
80135: PPUSH
80136: LD_VAR 0 2
80140: PPUSH
80141: CALL_OW 1
80145: ST_TO_ADDR
// end ;
80146: LD_VAR 0 3
80150: RET
// export function JoinUnion ( array , element ) ; begin
80151: LD_INT 0
80153: PPUSH
// result := array union element ;
80154: LD_ADDR_VAR 0 3
80158: PUSH
80159: LD_VAR 0 1
80163: PUSH
80164: LD_VAR 0 2
80168: UNION
80169: ST_TO_ADDR
// end ;
80170: LD_VAR 0 3
80174: RET
// export function GetBehemoths ( side ) ; begin
80175: LD_INT 0
80177: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
80178: LD_ADDR_VAR 0 2
80182: PUSH
80183: LD_INT 22
80185: PUSH
80186: LD_VAR 0 1
80190: PUSH
80191: EMPTY
80192: LIST
80193: LIST
80194: PUSH
80195: LD_INT 31
80197: PUSH
80198: LD_INT 25
80200: PUSH
80201: EMPTY
80202: LIST
80203: LIST
80204: PUSH
80205: EMPTY
80206: LIST
80207: LIST
80208: PPUSH
80209: CALL_OW 69
80213: ST_TO_ADDR
// end ;
80214: LD_VAR 0 2
80218: RET
// export function Shuffle ( array ) ; var i , index ; begin
80219: LD_INT 0
80221: PPUSH
80222: PPUSH
80223: PPUSH
// result := [ ] ;
80224: LD_ADDR_VAR 0 2
80228: PUSH
80229: EMPTY
80230: ST_TO_ADDR
// if not array then
80231: LD_VAR 0 1
80235: NOT
80236: IFFALSE 80240
// exit ;
80238: GO 80339
// Randomize ;
80240: CALL_OW 10
// for i = array downto 1 do
80244: LD_ADDR_VAR 0 3
80248: PUSH
80249: DOUBLE
80250: LD_VAR 0 1
80254: INC
80255: ST_TO_ADDR
80256: LD_INT 1
80258: PUSH
80259: FOR_DOWNTO
80260: IFFALSE 80337
// begin index := rand ( 1 , array ) ;
80262: LD_ADDR_VAR 0 4
80266: PUSH
80267: LD_INT 1
80269: PPUSH
80270: LD_VAR 0 1
80274: PPUSH
80275: CALL_OW 12
80279: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80280: LD_ADDR_VAR 0 2
80284: PUSH
80285: LD_VAR 0 2
80289: PPUSH
80290: LD_VAR 0 2
80294: PUSH
80295: LD_INT 1
80297: PLUS
80298: PPUSH
80299: LD_VAR 0 1
80303: PUSH
80304: LD_VAR 0 4
80308: ARRAY
80309: PPUSH
80310: CALL_OW 2
80314: ST_TO_ADDR
// array := Delete ( array , index ) ;
80315: LD_ADDR_VAR 0 1
80319: PUSH
80320: LD_VAR 0 1
80324: PPUSH
80325: LD_VAR 0 4
80329: PPUSH
80330: CALL_OW 3
80334: ST_TO_ADDR
// end ;
80335: GO 80259
80337: POP
80338: POP
// end ;
80339: LD_VAR 0 2
80343: RET
// export function GetBaseMaterials ( base ) ; begin
80344: LD_INT 0
80346: PPUSH
// result := [ 0 , 0 , 0 ] ;
80347: LD_ADDR_VAR 0 2
80351: PUSH
80352: LD_INT 0
80354: PUSH
80355: LD_INT 0
80357: PUSH
80358: LD_INT 0
80360: PUSH
80361: EMPTY
80362: LIST
80363: LIST
80364: LIST
80365: ST_TO_ADDR
// if not base then
80366: LD_VAR 0 1
80370: NOT
80371: IFFALSE 80375
// exit ;
80373: GO 80424
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80375: LD_ADDR_VAR 0 2
80379: PUSH
80380: LD_VAR 0 1
80384: PPUSH
80385: LD_INT 1
80387: PPUSH
80388: CALL_OW 275
80392: PUSH
80393: LD_VAR 0 1
80397: PPUSH
80398: LD_INT 2
80400: PPUSH
80401: CALL_OW 275
80405: PUSH
80406: LD_VAR 0 1
80410: PPUSH
80411: LD_INT 3
80413: PPUSH
80414: CALL_OW 275
80418: PUSH
80419: EMPTY
80420: LIST
80421: LIST
80422: LIST
80423: ST_TO_ADDR
// end ;
80424: LD_VAR 0 2
80428: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80429: LD_INT 0
80431: PPUSH
80432: PPUSH
// result := array ;
80433: LD_ADDR_VAR 0 3
80437: PUSH
80438: LD_VAR 0 1
80442: ST_TO_ADDR
// if size >= result then
80443: LD_VAR 0 2
80447: PUSH
80448: LD_VAR 0 3
80452: GREATEREQUAL
80453: IFFALSE 80457
// exit ;
80455: GO 80507
// if size then
80457: LD_VAR 0 2
80461: IFFALSE 80507
// for i := array downto size do
80463: LD_ADDR_VAR 0 4
80467: PUSH
80468: DOUBLE
80469: LD_VAR 0 1
80473: INC
80474: ST_TO_ADDR
80475: LD_VAR 0 2
80479: PUSH
80480: FOR_DOWNTO
80481: IFFALSE 80505
// result := Delete ( result , result ) ;
80483: LD_ADDR_VAR 0 3
80487: PUSH
80488: LD_VAR 0 3
80492: PPUSH
80493: LD_VAR 0 3
80497: PPUSH
80498: CALL_OW 3
80502: ST_TO_ADDR
80503: GO 80480
80505: POP
80506: POP
// end ;
80507: LD_VAR 0 3
80511: RET
// export function ComExit ( unit ) ; var tmp ; begin
80512: LD_INT 0
80514: PPUSH
80515: PPUSH
// if not IsInUnit ( unit ) then
80516: LD_VAR 0 1
80520: PPUSH
80521: CALL_OW 310
80525: NOT
80526: IFFALSE 80530
// exit ;
80528: GO 80590
// tmp := IsInUnit ( unit ) ;
80530: LD_ADDR_VAR 0 3
80534: PUSH
80535: LD_VAR 0 1
80539: PPUSH
80540: CALL_OW 310
80544: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80545: LD_VAR 0 3
80549: PPUSH
80550: CALL_OW 247
80554: PUSH
80555: LD_INT 2
80557: EQUAL
80558: IFFALSE 80571
// ComExitVehicle ( unit ) else
80560: LD_VAR 0 1
80564: PPUSH
80565: CALL_OW 121
80569: GO 80580
// ComExitBuilding ( unit ) ;
80571: LD_VAR 0 1
80575: PPUSH
80576: CALL_OW 122
// result := tmp ;
80580: LD_ADDR_VAR 0 2
80584: PUSH
80585: LD_VAR 0 3
80589: ST_TO_ADDR
// end ;
80590: LD_VAR 0 2
80594: RET
// export function ComExitAll ( units ) ; var i ; begin
80595: LD_INT 0
80597: PPUSH
80598: PPUSH
// if not units then
80599: LD_VAR 0 1
80603: NOT
80604: IFFALSE 80608
// exit ;
80606: GO 80634
// for i in units do
80608: LD_ADDR_VAR 0 3
80612: PUSH
80613: LD_VAR 0 1
80617: PUSH
80618: FOR_IN
80619: IFFALSE 80632
// ComExit ( i ) ;
80621: LD_VAR 0 3
80625: PPUSH
80626: CALL 80512 0 1
80630: GO 80618
80632: POP
80633: POP
// end ;
80634: LD_VAR 0 2
80638: RET
// export function ResetHc ; begin
80639: LD_INT 0
80641: PPUSH
// InitHc ;
80642: CALL_OW 19
// hc_importance := 0 ;
80646: LD_ADDR_OWVAR 32
80650: PUSH
80651: LD_INT 0
80653: ST_TO_ADDR
// end ;
80654: LD_VAR 0 1
80658: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80659: LD_INT 0
80661: PPUSH
80662: PPUSH
80663: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80664: LD_ADDR_VAR 0 6
80668: PUSH
80669: LD_VAR 0 1
80673: PUSH
80674: LD_VAR 0 3
80678: PLUS
80679: PUSH
80680: LD_INT 2
80682: DIV
80683: ST_TO_ADDR
// if _x < 0 then
80684: LD_VAR 0 6
80688: PUSH
80689: LD_INT 0
80691: LESS
80692: IFFALSE 80709
// _x := _x * - 1 ;
80694: LD_ADDR_VAR 0 6
80698: PUSH
80699: LD_VAR 0 6
80703: PUSH
80704: LD_INT 1
80706: NEG
80707: MUL
80708: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80709: LD_ADDR_VAR 0 7
80713: PUSH
80714: LD_VAR 0 2
80718: PUSH
80719: LD_VAR 0 4
80723: PLUS
80724: PUSH
80725: LD_INT 2
80727: DIV
80728: ST_TO_ADDR
// if _y < 0 then
80729: LD_VAR 0 7
80733: PUSH
80734: LD_INT 0
80736: LESS
80737: IFFALSE 80754
// _y := _y * - 1 ;
80739: LD_ADDR_VAR 0 7
80743: PUSH
80744: LD_VAR 0 7
80748: PUSH
80749: LD_INT 1
80751: NEG
80752: MUL
80753: ST_TO_ADDR
// result := [ _x , _y ] ;
80754: LD_ADDR_VAR 0 5
80758: PUSH
80759: LD_VAR 0 6
80763: PUSH
80764: LD_VAR 0 7
80768: PUSH
80769: EMPTY
80770: LIST
80771: LIST
80772: ST_TO_ADDR
// end ;
80773: LD_VAR 0 5
80777: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80778: LD_INT 0
80780: PPUSH
80781: PPUSH
80782: PPUSH
80783: PPUSH
// task := GetTaskList ( unit ) ;
80784: LD_ADDR_VAR 0 7
80788: PUSH
80789: LD_VAR 0 1
80793: PPUSH
80794: CALL_OW 437
80798: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80799: LD_VAR 0 7
80803: NOT
80804: IFFALSE 80823
80806: PUSH
80807: LD_VAR 0 1
80811: PPUSH
80812: LD_VAR 0 2
80816: PPUSH
80817: CALL_OW 308
80821: NOT
80822: AND
80823: IFFALSE 80827
// exit ;
80825: GO 80945
// if IsInArea ( unit , area ) then
80827: LD_VAR 0 1
80831: PPUSH
80832: LD_VAR 0 2
80836: PPUSH
80837: CALL_OW 308
80841: IFFALSE 80859
// begin ComMoveToArea ( unit , goAway ) ;
80843: LD_VAR 0 1
80847: PPUSH
80848: LD_VAR 0 3
80852: PPUSH
80853: CALL_OW 113
// exit ;
80857: GO 80945
// end ; if task [ 1 ] [ 1 ] <> M then
80859: LD_VAR 0 7
80863: PUSH
80864: LD_INT 1
80866: ARRAY
80867: PUSH
80868: LD_INT 1
80870: ARRAY
80871: PUSH
80872: LD_STRING M
80874: NONEQUAL
80875: IFFALSE 80879
// exit ;
80877: GO 80945
// x := task [ 1 ] [ 2 ] ;
80879: LD_ADDR_VAR 0 5
80883: PUSH
80884: LD_VAR 0 7
80888: PUSH
80889: LD_INT 1
80891: ARRAY
80892: PUSH
80893: LD_INT 2
80895: ARRAY
80896: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80897: LD_ADDR_VAR 0 6
80901: PUSH
80902: LD_VAR 0 7
80906: PUSH
80907: LD_INT 1
80909: ARRAY
80910: PUSH
80911: LD_INT 3
80913: ARRAY
80914: ST_TO_ADDR
// if InArea ( x , y , area ) then
80915: LD_VAR 0 5
80919: PPUSH
80920: LD_VAR 0 6
80924: PPUSH
80925: LD_VAR 0 2
80929: PPUSH
80930: CALL_OW 309
80934: IFFALSE 80945
// ComStop ( unit ) ;
80936: LD_VAR 0 1
80940: PPUSH
80941: CALL_OW 141
// end ;
80945: LD_VAR 0 4
80949: RET
// export function Abs ( value ) ; begin
80950: LD_INT 0
80952: PPUSH
// result := value ;
80953: LD_ADDR_VAR 0 2
80957: PUSH
80958: LD_VAR 0 1
80962: ST_TO_ADDR
// if value < 0 then
80963: LD_VAR 0 1
80967: PUSH
80968: LD_INT 0
80970: LESS
80971: IFFALSE 80988
// result := value * - 1 ;
80973: LD_ADDR_VAR 0 2
80977: PUSH
80978: LD_VAR 0 1
80982: PUSH
80983: LD_INT 1
80985: NEG
80986: MUL
80987: ST_TO_ADDR
// end ;
80988: LD_VAR 0 2
80992: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80993: LD_INT 0
80995: PPUSH
80996: PPUSH
80997: PPUSH
80998: PPUSH
80999: PPUSH
81000: PPUSH
81001: PPUSH
81002: PPUSH
// if not unit or not building then
81003: LD_VAR 0 1
81007: NOT
81008: IFTRUE 81017
81010: PUSH
81011: LD_VAR 0 2
81015: NOT
81016: OR
81017: IFFALSE 81021
// exit ;
81019: GO 81249
// x := GetX ( building ) ;
81021: LD_ADDR_VAR 0 4
81025: PUSH
81026: LD_VAR 0 2
81030: PPUSH
81031: CALL_OW 250
81035: ST_TO_ADDR
// y := GetY ( building ) ;
81036: LD_ADDR_VAR 0 6
81040: PUSH
81041: LD_VAR 0 2
81045: PPUSH
81046: CALL_OW 251
81050: ST_TO_ADDR
// d := GetDir ( building ) ;
81051: LD_ADDR_VAR 0 8
81055: PUSH
81056: LD_VAR 0 2
81060: PPUSH
81061: CALL_OW 254
81065: ST_TO_ADDR
// r := 4 ;
81066: LD_ADDR_VAR 0 9
81070: PUSH
81071: LD_INT 4
81073: ST_TO_ADDR
// for i := 1 to 5 do
81074: LD_ADDR_VAR 0 10
81078: PUSH
81079: DOUBLE
81080: LD_INT 1
81082: DEC
81083: ST_TO_ADDR
81084: LD_INT 5
81086: PUSH
81087: FOR_TO
81088: IFFALSE 81247
// begin _x := ShiftX ( x , d , r + i ) ;
81090: LD_ADDR_VAR 0 5
81094: PUSH
81095: LD_VAR 0 4
81099: PPUSH
81100: LD_VAR 0 8
81104: PPUSH
81105: LD_VAR 0 9
81109: PUSH
81110: LD_VAR 0 10
81114: PLUS
81115: PPUSH
81116: CALL_OW 272
81120: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
81121: LD_ADDR_VAR 0 7
81125: PUSH
81126: LD_VAR 0 6
81130: PPUSH
81131: LD_VAR 0 8
81135: PPUSH
81136: LD_VAR 0 9
81140: PUSH
81141: LD_VAR 0 10
81145: PLUS
81146: PPUSH
81147: CALL_OW 273
81151: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
81152: LD_VAR 0 5
81156: PPUSH
81157: LD_VAR 0 7
81161: PPUSH
81162: CALL_OW 488
81166: IFFALSE 81201
81168: PUSH
81169: LD_VAR 0 5
81173: PPUSH
81174: LD_VAR 0 7
81178: PPUSH
81179: CALL_OW 428
81183: PPUSH
81184: CALL_OW 247
81188: PUSH
81189: LD_INT 3
81191: PUSH
81192: LD_INT 2
81194: PUSH
81195: EMPTY
81196: LIST
81197: LIST
81198: IN
81199: NOT
81200: AND
81201: IFFALSE 81245
// begin ComMoveXY ( unit , _x , _y ) ;
81203: LD_VAR 0 1
81207: PPUSH
81208: LD_VAR 0 5
81212: PPUSH
81213: LD_VAR 0 7
81217: PPUSH
81218: CALL_OW 111
// result := [ _x , _y ] ;
81222: LD_ADDR_VAR 0 3
81226: PUSH
81227: LD_VAR 0 5
81231: PUSH
81232: LD_VAR 0 7
81236: PUSH
81237: EMPTY
81238: LIST
81239: LIST
81240: ST_TO_ADDR
// exit ;
81241: POP
81242: POP
81243: GO 81249
// end ; end ;
81245: GO 81087
81247: POP
81248: POP
// end ;
81249: LD_VAR 0 3
81253: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81254: LD_INT 0
81256: PPUSH
81257: PPUSH
81258: PPUSH
// result := 0 ;
81259: LD_ADDR_VAR 0 3
81263: PUSH
81264: LD_INT 0
81266: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81267: LD_VAR 0 1
81271: PUSH
81272: LD_INT 0
81274: LESS
81275: IFTRUE 81287
81277: PUSH
81278: LD_VAR 0 1
81282: PUSH
81283: LD_INT 8
81285: GREATER
81286: OR
81287: IFTRUE 81299
81289: PUSH
81290: LD_VAR 0 2
81294: PUSH
81295: LD_INT 0
81297: LESS
81298: OR
81299: IFTRUE 81311
81301: PUSH
81302: LD_VAR 0 2
81306: PUSH
81307: LD_INT 8
81309: GREATER
81310: OR
81311: IFFALSE 81315
// exit ;
81313: GO 81390
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81315: LD_ADDR_VAR 0 4
81319: PUSH
81320: LD_INT 22
81322: PUSH
81323: LD_VAR 0 2
81327: PUSH
81328: EMPTY
81329: LIST
81330: LIST
81331: PPUSH
81332: CALL_OW 69
81336: PUSH
81337: FOR_IN
81338: IFFALSE 81388
// begin un := UnitShoot ( i ) ;
81340: LD_ADDR_VAR 0 5
81344: PUSH
81345: LD_VAR 0 4
81349: PPUSH
81350: CALL_OW 504
81354: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81355: LD_VAR 0 5
81359: PPUSH
81360: CALL_OW 255
81364: PUSH
81365: LD_VAR 0 1
81369: EQUAL
81370: IFFALSE 81386
// begin result := un ;
81372: LD_ADDR_VAR 0 3
81376: PUSH
81377: LD_VAR 0 5
81381: ST_TO_ADDR
// exit ;
81382: POP
81383: POP
81384: GO 81390
// end ; end ;
81386: GO 81337
81388: POP
81389: POP
// end ;
81390: LD_VAR 0 3
81394: RET
// export function GetCargoBay ( units ) ; begin
81395: LD_INT 0
81397: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81398: LD_ADDR_VAR 0 2
81402: PUSH
81403: LD_VAR 0 1
81407: PPUSH
81408: LD_INT 2
81410: PUSH
81411: LD_INT 34
81413: PUSH
81414: LD_INT 12
81416: PUSH
81417: EMPTY
81418: LIST
81419: LIST
81420: PUSH
81421: LD_INT 34
81423: PUSH
81424: LD_INT 51
81426: PUSH
81427: EMPTY
81428: LIST
81429: LIST
81430: PUSH
81431: LD_INT 34
81433: PUSH
81434: LD_INT 32
81436: PUSH
81437: EMPTY
81438: LIST
81439: LIST
81440: PUSH
81441: LD_INT 34
81443: PUSH
81444: LD_INT 89
81446: PUSH
81447: EMPTY
81448: LIST
81449: LIST
81450: PUSH
81451: EMPTY
81452: LIST
81453: LIST
81454: LIST
81455: LIST
81456: LIST
81457: PPUSH
81458: CALL_OW 72
81462: ST_TO_ADDR
// end ;
81463: LD_VAR 0 2
81467: RET
// export function Negate ( value ) ; begin
81468: LD_INT 0
81470: PPUSH
// result := not value ;
81471: LD_ADDR_VAR 0 2
81475: PUSH
81476: LD_VAR 0 1
81480: NOT
81481: ST_TO_ADDR
// end ;
81482: LD_VAR 0 2
81486: RET
// export function Inc ( value ) ; begin
81487: LD_INT 0
81489: PPUSH
// result := value + 1 ;
81490: LD_ADDR_VAR 0 2
81494: PUSH
81495: LD_VAR 0 1
81499: PUSH
81500: LD_INT 1
81502: PLUS
81503: ST_TO_ADDR
// end ;
81504: LD_VAR 0 2
81508: RET
// export function Dec ( value ) ; begin
81509: LD_INT 0
81511: PPUSH
// result := value - 1 ;
81512: LD_ADDR_VAR 0 2
81516: PUSH
81517: LD_VAR 0 1
81521: PUSH
81522: LD_INT 1
81524: MINUS
81525: ST_TO_ADDR
// end ;
81526: LD_VAR 0 2
81530: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81531: LD_INT 0
81533: PPUSH
81534: PPUSH
81535: PPUSH
81536: PPUSH
81537: PPUSH
81538: PPUSH
81539: PPUSH
81540: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81541: LD_VAR 0 1
81545: PPUSH
81546: LD_VAR 0 2
81550: PPUSH
81551: CALL_OW 488
81555: NOT
81556: IFTRUE 81575
81558: PUSH
81559: LD_VAR 0 3
81563: PPUSH
81564: LD_VAR 0 4
81568: PPUSH
81569: CALL_OW 488
81573: NOT
81574: OR
81575: IFFALSE 81588
// begin result := - 1 ;
81577: LD_ADDR_VAR 0 5
81581: PUSH
81582: LD_INT 1
81584: NEG
81585: ST_TO_ADDR
// exit ;
81586: GO 81823
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81588: LD_ADDR_VAR 0 12
81592: PUSH
81593: LD_VAR 0 1
81597: PPUSH
81598: LD_VAR 0 2
81602: PPUSH
81603: LD_VAR 0 3
81607: PPUSH
81608: LD_VAR 0 4
81612: PPUSH
81613: CALL 80659 0 4
81617: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81618: LD_ADDR_VAR 0 11
81622: PUSH
81623: LD_VAR 0 1
81627: PPUSH
81628: LD_VAR 0 2
81632: PPUSH
81633: LD_VAR 0 12
81637: PUSH
81638: LD_INT 1
81640: ARRAY
81641: PPUSH
81642: LD_VAR 0 12
81646: PUSH
81647: LD_INT 2
81649: ARRAY
81650: PPUSH
81651: CALL_OW 298
81655: ST_TO_ADDR
// distance := 9999 ;
81656: LD_ADDR_VAR 0 10
81660: PUSH
81661: LD_INT 9999
81663: ST_TO_ADDR
// for i := 0 to 5 do
81664: LD_ADDR_VAR 0 6
81668: PUSH
81669: DOUBLE
81670: LD_INT 0
81672: DEC
81673: ST_TO_ADDR
81674: LD_INT 5
81676: PUSH
81677: FOR_TO
81678: IFFALSE 81821
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81680: LD_ADDR_VAR 0 7
81684: PUSH
81685: LD_VAR 0 1
81689: PPUSH
81690: LD_VAR 0 6
81694: PPUSH
81695: LD_VAR 0 11
81699: PPUSH
81700: CALL_OW 272
81704: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81705: LD_ADDR_VAR 0 8
81709: PUSH
81710: LD_VAR 0 2
81714: PPUSH
81715: LD_VAR 0 6
81719: PPUSH
81720: LD_VAR 0 11
81724: PPUSH
81725: CALL_OW 273
81729: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81730: LD_VAR 0 7
81734: PPUSH
81735: LD_VAR 0 8
81739: PPUSH
81740: CALL_OW 488
81744: NOT
81745: IFFALSE 81749
// continue ;
81747: GO 81677
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81749: LD_ADDR_VAR 0 9
81753: PUSH
81754: LD_VAR 0 12
81758: PUSH
81759: LD_INT 1
81761: ARRAY
81762: PPUSH
81763: LD_VAR 0 12
81767: PUSH
81768: LD_INT 2
81770: ARRAY
81771: PPUSH
81772: LD_VAR 0 7
81776: PPUSH
81777: LD_VAR 0 8
81781: PPUSH
81782: CALL_OW 298
81786: ST_TO_ADDR
// if tmp < distance then
81787: LD_VAR 0 9
81791: PUSH
81792: LD_VAR 0 10
81796: LESS
81797: IFFALSE 81819
// begin result := i ;
81799: LD_ADDR_VAR 0 5
81803: PUSH
81804: LD_VAR 0 6
81808: ST_TO_ADDR
// distance := tmp ;
81809: LD_ADDR_VAR 0 10
81813: PUSH
81814: LD_VAR 0 9
81818: ST_TO_ADDR
// end ; end ;
81819: GO 81677
81821: POP
81822: POP
// end ;
81823: LD_VAR 0 5
81827: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81828: LD_INT 0
81830: PPUSH
81831: PPUSH
// if not driver or not IsInUnit ( driver ) then
81832: LD_VAR 0 1
81836: NOT
81837: IFTRUE 81851
81839: PUSH
81840: LD_VAR 0 1
81844: PPUSH
81845: CALL_OW 310
81849: NOT
81850: OR
81851: IFFALSE 81855
// exit ;
81853: GO 81945
// vehicle := IsInUnit ( driver ) ;
81855: LD_ADDR_VAR 0 3
81859: PUSH
81860: LD_VAR 0 1
81864: PPUSH
81865: CALL_OW 310
81869: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81870: LD_VAR 0 1
81874: PPUSH
81875: LD_STRING \
81877: PUSH
81878: LD_INT 0
81880: PUSH
81881: LD_INT 0
81883: PUSH
81884: LD_INT 0
81886: PUSH
81887: LD_INT 0
81889: PUSH
81890: LD_INT 0
81892: PUSH
81893: LD_INT 0
81895: PUSH
81896: EMPTY
81897: LIST
81898: LIST
81899: LIST
81900: LIST
81901: LIST
81902: LIST
81903: LIST
81904: PUSH
81905: LD_STRING E
81907: PUSH
81908: LD_INT 0
81910: PUSH
81911: LD_INT 0
81913: PUSH
81914: LD_VAR 0 3
81918: PUSH
81919: LD_INT 0
81921: PUSH
81922: LD_INT 0
81924: PUSH
81925: LD_INT 0
81927: PUSH
81928: EMPTY
81929: LIST
81930: LIST
81931: LIST
81932: LIST
81933: LIST
81934: LIST
81935: LIST
81936: PUSH
81937: EMPTY
81938: LIST
81939: LIST
81940: PPUSH
81941: CALL_OW 446
// end ;
81945: LD_VAR 0 2
81949: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81950: LD_INT 0
81952: PPUSH
81953: PPUSH
// if not driver or not IsInUnit ( driver ) then
81954: LD_VAR 0 1
81958: NOT
81959: IFTRUE 81973
81961: PUSH
81962: LD_VAR 0 1
81966: PPUSH
81967: CALL_OW 310
81971: NOT
81972: OR
81973: IFFALSE 81977
// exit ;
81975: GO 82067
// vehicle := IsInUnit ( driver ) ;
81977: LD_ADDR_VAR 0 3
81981: PUSH
81982: LD_VAR 0 1
81986: PPUSH
81987: CALL_OW 310
81991: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81992: LD_VAR 0 1
81996: PPUSH
81997: LD_STRING \
81999: PUSH
82000: LD_INT 0
82002: PUSH
82003: LD_INT 0
82005: PUSH
82006: LD_INT 0
82008: PUSH
82009: LD_INT 0
82011: PUSH
82012: LD_INT 0
82014: PUSH
82015: LD_INT 0
82017: PUSH
82018: EMPTY
82019: LIST
82020: LIST
82021: LIST
82022: LIST
82023: LIST
82024: LIST
82025: LIST
82026: PUSH
82027: LD_STRING E
82029: PUSH
82030: LD_INT 0
82032: PUSH
82033: LD_INT 0
82035: PUSH
82036: LD_VAR 0 3
82040: PUSH
82041: LD_INT 0
82043: PUSH
82044: LD_INT 0
82046: PUSH
82047: LD_INT 0
82049: PUSH
82050: EMPTY
82051: LIST
82052: LIST
82053: LIST
82054: LIST
82055: LIST
82056: LIST
82057: LIST
82058: PUSH
82059: EMPTY
82060: LIST
82061: LIST
82062: PPUSH
82063: CALL_OW 447
// end ;
82067: LD_VAR 0 2
82071: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82072: LD_INT 0
82074: PPUSH
82075: PPUSH
82076: PPUSH
// tmp := [ ] ;
82077: LD_ADDR_VAR 0 5
82081: PUSH
82082: EMPTY
82083: ST_TO_ADDR
// for i in units do
82084: LD_ADDR_VAR 0 4
82088: PUSH
82089: LD_VAR 0 1
82093: PUSH
82094: FOR_IN
82095: IFFALSE 82133
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82097: LD_ADDR_VAR 0 5
82101: PUSH
82102: LD_VAR 0 5
82106: PPUSH
82107: LD_VAR 0 5
82111: PUSH
82112: LD_INT 1
82114: PLUS
82115: PPUSH
82116: LD_VAR 0 4
82120: PPUSH
82121: CALL_OW 256
82125: PPUSH
82126: CALL_OW 2
82130: ST_TO_ADDR
82131: GO 82094
82133: POP
82134: POP
// if not tmp then
82135: LD_VAR 0 5
82139: NOT
82140: IFFALSE 82144
// exit ;
82142: GO 82192
// if asc then
82144: LD_VAR 0 2
82148: IFFALSE 82172
// result := SortListByListAsc ( units , tmp ) else
82150: LD_ADDR_VAR 0 3
82154: PUSH
82155: LD_VAR 0 1
82159: PPUSH
82160: LD_VAR 0 5
82164: PPUSH
82165: CALL_OW 76
82169: ST_TO_ADDR
82170: GO 82192
// result := SortListByListDesc ( units , tmp ) ;
82172: LD_ADDR_VAR 0 3
82176: PUSH
82177: LD_VAR 0 1
82181: PPUSH
82182: LD_VAR 0 5
82186: PPUSH
82187: CALL_OW 77
82191: ST_TO_ADDR
// end ;
82192: LD_VAR 0 3
82196: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82197: LD_INT 0
82199: PPUSH
82200: PPUSH
// task := GetTaskList ( mech ) ;
82201: LD_ADDR_VAR 0 4
82205: PUSH
82206: LD_VAR 0 1
82210: PPUSH
82211: CALL_OW 437
82215: ST_TO_ADDR
// if not task then
82216: LD_VAR 0 4
82220: NOT
82221: IFFALSE 82225
// exit ;
82223: GO 82269
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82225: LD_ADDR_VAR 0 3
82229: PUSH
82230: LD_VAR 0 4
82234: PUSH
82235: LD_INT 1
82237: ARRAY
82238: PUSH
82239: LD_INT 1
82241: ARRAY
82242: PUSH
82243: LD_STRING r
82245: EQUAL
82246: IFFALSE 82268
82248: PUSH
82249: LD_VAR 0 4
82253: PUSH
82254: LD_INT 1
82256: ARRAY
82257: PUSH
82258: LD_INT 4
82260: ARRAY
82261: PUSH
82262: LD_VAR 0 2
82266: EQUAL
82267: AND
82268: ST_TO_ADDR
// end ;
82269: LD_VAR 0 3
82273: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82274: LD_INT 0
82276: PPUSH
// SetDir ( unit , d ) ;
82277: LD_VAR 0 1
82281: PPUSH
82282: LD_VAR 0 4
82286: PPUSH
82287: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
82291: LD_ADDR_VAR 0 6
82295: PUSH
82296: LD_VAR 0 1
82300: PPUSH
82301: LD_VAR 0 2
82305: PPUSH
82306: LD_VAR 0 3
82310: PPUSH
82311: LD_VAR 0 5
82315: PPUSH
82316: CALL_OW 48
82320: ST_TO_ADDR
// end ;
82321: LD_VAR 0 6
82325: RET
// export function ToNaturalNumber ( number ) ; begin
82326: LD_INT 0
82328: PPUSH
// result := number div 1 ;
82329: LD_ADDR_VAR 0 2
82333: PUSH
82334: LD_VAR 0 1
82338: PUSH
82339: LD_INT 1
82341: DIV
82342: ST_TO_ADDR
// if number < 0 then
82343: LD_VAR 0 1
82347: PUSH
82348: LD_INT 0
82350: LESS
82351: IFFALSE 82361
// result := 0 ;
82353: LD_ADDR_VAR 0 2
82357: PUSH
82358: LD_INT 0
82360: ST_TO_ADDR
// end ;
82361: LD_VAR 0 2
82365: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
82366: LD_INT 0
82368: PPUSH
82369: PPUSH
82370: PPUSH
// if not buildings then
82371: LD_VAR 0 1
82375: NOT
82376: IFFALSE 82380
// exit ;
82378: GO 82495
// tmp := [ ] ;
82380: LD_ADDR_VAR 0 5
82384: PUSH
82385: EMPTY
82386: ST_TO_ADDR
// for b in buildings do
82387: LD_ADDR_VAR 0 4
82391: PUSH
82392: LD_VAR 0 1
82396: PUSH
82397: FOR_IN
82398: IFFALSE 82436
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
82400: LD_ADDR_VAR 0 5
82404: PUSH
82405: LD_VAR 0 5
82409: PPUSH
82410: LD_VAR 0 5
82414: PUSH
82415: LD_INT 1
82417: PLUS
82418: PPUSH
82419: LD_VAR 0 4
82423: PPUSH
82424: CALL_OW 266
82428: PPUSH
82429: CALL_OW 1
82433: ST_TO_ADDR
82434: GO 82397
82436: POP
82437: POP
// if not tmp then
82438: LD_VAR 0 5
82442: NOT
82443: IFFALSE 82447
// exit ;
82445: GO 82495
// if asc then
82447: LD_VAR 0 2
82451: IFFALSE 82475
// result := SortListByListAsc ( buildings , tmp ) else
82453: LD_ADDR_VAR 0 3
82457: PUSH
82458: LD_VAR 0 1
82462: PPUSH
82463: LD_VAR 0 5
82467: PPUSH
82468: CALL_OW 76
82472: ST_TO_ADDR
82473: GO 82495
// result := SortListByListDesc ( buildings , tmp ) ;
82475: LD_ADDR_VAR 0 3
82479: PUSH
82480: LD_VAR 0 1
82484: PPUSH
82485: LD_VAR 0 5
82489: PPUSH
82490: CALL_OW 77
82494: ST_TO_ADDR
// end ;
82495: LD_VAR 0 3
82499: RET
// export function SortByClass ( units , class ) ; var un ; begin
82500: LD_INT 0
82502: PPUSH
82503: PPUSH
// if not units or not class then
82504: LD_VAR 0 1
82508: NOT
82509: IFTRUE 82518
82511: PUSH
82512: LD_VAR 0 2
82516: NOT
82517: OR
82518: IFFALSE 82522
// exit ;
82520: GO 82617
// result := [ ] ;
82522: LD_ADDR_VAR 0 3
82526: PUSH
82527: EMPTY
82528: ST_TO_ADDR
// for un in units do
82529: LD_ADDR_VAR 0 4
82533: PUSH
82534: LD_VAR 0 1
82538: PUSH
82539: FOR_IN
82540: IFFALSE 82615
// if GetClass ( un ) = class then
82542: LD_VAR 0 4
82546: PPUSH
82547: CALL_OW 257
82551: PUSH
82552: LD_VAR 0 2
82556: EQUAL
82557: IFFALSE 82584
// result := Insert ( result , 1 , un ) else
82559: LD_ADDR_VAR 0 3
82563: PUSH
82564: LD_VAR 0 3
82568: PPUSH
82569: LD_INT 1
82571: PPUSH
82572: LD_VAR 0 4
82576: PPUSH
82577: CALL_OW 2
82581: ST_TO_ADDR
82582: GO 82613
// result := Replace ( result , result + 1 , un ) ;
82584: LD_ADDR_VAR 0 3
82588: PUSH
82589: LD_VAR 0 3
82593: PPUSH
82594: LD_VAR 0 3
82598: PUSH
82599: LD_INT 1
82601: PLUS
82602: PPUSH
82603: LD_VAR 0 4
82607: PPUSH
82608: CALL_OW 1
82612: ST_TO_ADDR
82613: GO 82539
82615: POP
82616: POP
// end ;
82617: LD_VAR 0 3
82621: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82622: LD_INT 0
82624: PPUSH
82625: PPUSH
82626: PPUSH
82627: PPUSH
82628: PPUSH
82629: PPUSH
82630: PPUSH
// result := [ ] ;
82631: LD_ADDR_VAR 0 4
82635: PUSH
82636: EMPTY
82637: ST_TO_ADDR
// if x - r < 0 then
82638: LD_VAR 0 1
82642: PUSH
82643: LD_VAR 0 3
82647: MINUS
82648: PUSH
82649: LD_INT 0
82651: LESS
82652: IFFALSE 82664
// min_x := 0 else
82654: LD_ADDR_VAR 0 8
82658: PUSH
82659: LD_INT 0
82661: ST_TO_ADDR
82662: GO 82680
// min_x := x - r ;
82664: LD_ADDR_VAR 0 8
82668: PUSH
82669: LD_VAR 0 1
82673: PUSH
82674: LD_VAR 0 3
82678: MINUS
82679: ST_TO_ADDR
// if y - r < 0 then
82680: LD_VAR 0 2
82684: PUSH
82685: LD_VAR 0 3
82689: MINUS
82690: PUSH
82691: LD_INT 0
82693: LESS
82694: IFFALSE 82706
// min_y := 0 else
82696: LD_ADDR_VAR 0 7
82700: PUSH
82701: LD_INT 0
82703: ST_TO_ADDR
82704: GO 82722
// min_y := y - r ;
82706: LD_ADDR_VAR 0 7
82710: PUSH
82711: LD_VAR 0 2
82715: PUSH
82716: LD_VAR 0 3
82720: MINUS
82721: ST_TO_ADDR
// max_x := x + r ;
82722: LD_ADDR_VAR 0 9
82726: PUSH
82727: LD_VAR 0 1
82731: PUSH
82732: LD_VAR 0 3
82736: PLUS
82737: ST_TO_ADDR
// max_y := y + r ;
82738: LD_ADDR_VAR 0 10
82742: PUSH
82743: LD_VAR 0 2
82747: PUSH
82748: LD_VAR 0 3
82752: PLUS
82753: ST_TO_ADDR
// for _x = min_x to max_x do
82754: LD_ADDR_VAR 0 5
82758: PUSH
82759: DOUBLE
82760: LD_VAR 0 8
82764: DEC
82765: ST_TO_ADDR
82766: LD_VAR 0 9
82770: PUSH
82771: FOR_TO
82772: IFFALSE 82873
// for _y = min_y to max_y do
82774: LD_ADDR_VAR 0 6
82778: PUSH
82779: DOUBLE
82780: LD_VAR 0 7
82784: DEC
82785: ST_TO_ADDR
82786: LD_VAR 0 10
82790: PUSH
82791: FOR_TO
82792: IFFALSE 82869
// begin if not ValidHex ( _x , _y ) then
82794: LD_VAR 0 5
82798: PPUSH
82799: LD_VAR 0 6
82803: PPUSH
82804: CALL_OW 488
82808: NOT
82809: IFFALSE 82813
// continue ;
82811: GO 82791
// if GetResourceTypeXY ( _x , _y ) then
82813: LD_VAR 0 5
82817: PPUSH
82818: LD_VAR 0 6
82822: PPUSH
82823: CALL_OW 283
82827: IFFALSE 82867
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82829: LD_ADDR_VAR 0 4
82833: PUSH
82834: LD_VAR 0 4
82838: PPUSH
82839: LD_VAR 0 4
82843: PUSH
82844: LD_INT 1
82846: PLUS
82847: PPUSH
82848: LD_VAR 0 5
82852: PUSH
82853: LD_VAR 0 6
82857: PUSH
82858: EMPTY
82859: LIST
82860: LIST
82861: PPUSH
82862: CALL_OW 1
82866: ST_TO_ADDR
// end ;
82867: GO 82791
82869: POP
82870: POP
82871: GO 82771
82873: POP
82874: POP
// end ;
82875: LD_VAR 0 4
82879: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82880: LD_INT 0
82882: PPUSH
82883: PPUSH
82884: PPUSH
82885: PPUSH
82886: PPUSH
82887: PPUSH
82888: PPUSH
82889: PPUSH
// if not units then
82890: LD_VAR 0 1
82894: NOT
82895: IFFALSE 82899
// exit ;
82897: GO 83431
// result := UnitFilter ( units , [ f_ok ] ) ;
82899: LD_ADDR_VAR 0 3
82903: PUSH
82904: LD_VAR 0 1
82908: PPUSH
82909: LD_INT 50
82911: PUSH
82912: EMPTY
82913: LIST
82914: PPUSH
82915: CALL_OW 72
82919: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82920: LD_ADDR_VAR 0 8
82924: PUSH
82925: LD_VAR 0 1
82929: PUSH
82930: LD_INT 1
82932: ARRAY
82933: PPUSH
82934: CALL_OW 255
82938: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82939: LD_ADDR_VAR 0 10
82943: PUSH
82944: LD_INT 29
82946: PUSH
82947: LD_INT 91
82949: PUSH
82950: LD_INT 49
82952: PUSH
82953: EMPTY
82954: LIST
82955: LIST
82956: LIST
82957: ST_TO_ADDR
// if not result then
82958: LD_VAR 0 3
82962: NOT
82963: IFFALSE 82967
// exit ;
82965: GO 83431
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82967: LD_ADDR_VAR 0 5
82971: PUSH
82972: LD_INT 81
82974: PUSH
82975: LD_VAR 0 8
82979: PUSH
82980: EMPTY
82981: LIST
82982: LIST
82983: PPUSH
82984: CALL_OW 69
82988: ST_TO_ADDR
// for i in result do
82989: LD_ADDR_VAR 0 4
82993: PUSH
82994: LD_VAR 0 3
82998: PUSH
82999: FOR_IN
83000: IFFALSE 83429
// begin tag := GetTag ( i ) + 1 ;
83002: LD_ADDR_VAR 0 9
83006: PUSH
83007: LD_VAR 0 4
83011: PPUSH
83012: CALL_OW 110
83016: PUSH
83017: LD_INT 1
83019: PLUS
83020: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
83021: LD_ADDR_VAR 0 7
83025: PUSH
83026: LD_VAR 0 4
83030: PPUSH
83031: CALL_OW 250
83035: PPUSH
83036: LD_VAR 0 4
83040: PPUSH
83041: CALL_OW 251
83045: PPUSH
83046: LD_INT 4
83048: PPUSH
83049: CALL 82622 0 3
83053: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
83054: LD_VAR 0 4
83058: PPUSH
83059: CALL_OW 247
83063: PUSH
83064: LD_INT 2
83066: EQUAL
83067: IFFALSE 83079
83069: PUSH
83070: LD_VAR 0 7
83074: PUSH
83075: LD_INT 2
83077: GREATER
83078: AND
83079: IFFALSE 83099
83081: PUSH
83082: LD_VAR 0 4
83086: PPUSH
83087: CALL_OW 264
83091: PUSH
83092: LD_VAR 0 10
83096: IN
83097: NOT
83098: AND
83099: IFFALSE 83138
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83101: LD_VAR 0 4
83105: PPUSH
83106: LD_VAR 0 7
83110: PUSH
83111: LD_INT 1
83113: ARRAY
83114: PUSH
83115: LD_INT 1
83117: ARRAY
83118: PPUSH
83119: LD_VAR 0 7
83123: PUSH
83124: LD_INT 1
83126: ARRAY
83127: PUSH
83128: LD_INT 2
83130: ARRAY
83131: PPUSH
83132: CALL_OW 116
83136: GO 83427
// if path > tag then
83138: LD_VAR 0 2
83142: PUSH
83143: LD_VAR 0 9
83147: GREATER
83148: IFFALSE 83356
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83150: LD_ADDR_VAR 0 6
83154: PUSH
83155: LD_VAR 0 5
83159: PPUSH
83160: LD_INT 91
83162: PUSH
83163: LD_VAR 0 4
83167: PUSH
83168: LD_INT 8
83170: PUSH
83171: EMPTY
83172: LIST
83173: LIST
83174: LIST
83175: PPUSH
83176: CALL_OW 72
83180: ST_TO_ADDR
// if nearEnemy then
83181: LD_VAR 0 6
83185: IFFALSE 83254
// begin if GetWeapon ( i ) = ru_time_lapser then
83187: LD_VAR 0 4
83191: PPUSH
83192: CALL_OW 264
83196: PUSH
83197: LD_INT 49
83199: EQUAL
83200: IFFALSE 83228
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83202: LD_VAR 0 4
83206: PPUSH
83207: LD_VAR 0 6
83211: PPUSH
83212: LD_VAR 0 4
83216: PPUSH
83217: CALL_OW 74
83221: PPUSH
83222: CALL_OW 112
83226: GO 83252
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
83228: LD_VAR 0 4
83232: PPUSH
83233: LD_VAR 0 6
83237: PPUSH
83238: LD_VAR 0 4
83242: PPUSH
83243: CALL_OW 74
83247: PPUSH
83248: CALL 84512 0 2
// end else
83252: GO 83354
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83254: LD_VAR 0 4
83258: PPUSH
83259: LD_VAR 0 2
83263: PUSH
83264: LD_VAR 0 9
83268: ARRAY
83269: PUSH
83270: LD_INT 1
83272: ARRAY
83273: PPUSH
83274: LD_VAR 0 2
83278: PUSH
83279: LD_VAR 0 9
83283: ARRAY
83284: PUSH
83285: LD_INT 2
83287: ARRAY
83288: PPUSH
83289: CALL_OW 297
83293: PUSH
83294: LD_INT 6
83296: GREATER
83297: IFFALSE 83340
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83299: LD_VAR 0 4
83303: PPUSH
83304: LD_VAR 0 2
83308: PUSH
83309: LD_VAR 0 9
83313: ARRAY
83314: PUSH
83315: LD_INT 1
83317: ARRAY
83318: PPUSH
83319: LD_VAR 0 2
83323: PUSH
83324: LD_VAR 0 9
83328: ARRAY
83329: PUSH
83330: LD_INT 2
83332: ARRAY
83333: PPUSH
83334: CALL_OW 114
83338: GO 83354
// SetTag ( i , tag ) ;
83340: LD_VAR 0 4
83344: PPUSH
83345: LD_VAR 0 9
83349: PPUSH
83350: CALL_OW 109
// end else
83354: GO 83427
// if enemy then
83356: LD_VAR 0 5
83360: IFFALSE 83427
// begin if GetWeapon ( i ) = ru_time_lapser then
83362: LD_VAR 0 4
83366: PPUSH
83367: CALL_OW 264
83371: PUSH
83372: LD_INT 49
83374: EQUAL
83375: IFFALSE 83403
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
83377: LD_VAR 0 4
83381: PPUSH
83382: LD_VAR 0 5
83386: PPUSH
83387: LD_VAR 0 4
83391: PPUSH
83392: CALL_OW 74
83396: PPUSH
83397: CALL_OW 112
83401: GO 83427
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
83403: LD_VAR 0 4
83407: PPUSH
83408: LD_VAR 0 5
83412: PPUSH
83413: LD_VAR 0 4
83417: PPUSH
83418: CALL_OW 74
83422: PPUSH
83423: CALL 84512 0 2
// end ; end ;
83427: GO 82999
83429: POP
83430: POP
// end ;
83431: LD_VAR 0 3
83435: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
83436: LD_INT 0
83438: PPUSH
83439: PPUSH
83440: PPUSH
// if not unit or IsInUnit ( unit ) then
83441: LD_VAR 0 1
83445: NOT
83446: IFTRUE 83459
83448: PUSH
83449: LD_VAR 0 1
83453: PPUSH
83454: CALL_OW 310
83458: OR
83459: IFFALSE 83463
// exit ;
83461: GO 83554
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
83463: LD_ADDR_VAR 0 4
83467: PUSH
83468: LD_VAR 0 1
83472: PPUSH
83473: CALL_OW 250
83477: PPUSH
83478: LD_VAR 0 2
83482: PPUSH
83483: LD_INT 1
83485: PPUSH
83486: CALL_OW 272
83490: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
83491: LD_ADDR_VAR 0 5
83495: PUSH
83496: LD_VAR 0 1
83500: PPUSH
83501: CALL_OW 251
83505: PPUSH
83506: LD_VAR 0 2
83510: PPUSH
83511: LD_INT 1
83513: PPUSH
83514: CALL_OW 273
83518: ST_TO_ADDR
// if ValidHex ( x , y ) then
83519: LD_VAR 0 4
83523: PPUSH
83524: LD_VAR 0 5
83528: PPUSH
83529: CALL_OW 488
83533: IFFALSE 83554
// ComTurnXY ( unit , x , y ) ;
83535: LD_VAR 0 1
83539: PPUSH
83540: LD_VAR 0 4
83544: PPUSH
83545: LD_VAR 0 5
83549: PPUSH
83550: CALL_OW 118
// end ;
83554: LD_VAR 0 3
83558: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83559: LD_INT 0
83561: PPUSH
83562: PPUSH
// result := false ;
83563: LD_ADDR_VAR 0 3
83567: PUSH
83568: LD_INT 0
83570: ST_TO_ADDR
// if not units then
83571: LD_VAR 0 2
83575: NOT
83576: IFFALSE 83580
// exit ;
83578: GO 83625
// for i in units do
83580: LD_ADDR_VAR 0 4
83584: PUSH
83585: LD_VAR 0 2
83589: PUSH
83590: FOR_IN
83591: IFFALSE 83623
// if See ( side , i ) then
83593: LD_VAR 0 1
83597: PPUSH
83598: LD_VAR 0 4
83602: PPUSH
83603: CALL_OW 292
83607: IFFALSE 83621
// begin result := true ;
83609: LD_ADDR_VAR 0 3
83613: PUSH
83614: LD_INT 1
83616: ST_TO_ADDR
// exit ;
83617: POP
83618: POP
83619: GO 83625
// end ;
83621: GO 83590
83623: POP
83624: POP
// end ;
83625: LD_VAR 0 3
83629: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83630: LD_INT 0
83632: PPUSH
83633: PPUSH
83634: PPUSH
83635: PPUSH
// if not unit or not points then
83636: LD_VAR 0 1
83640: NOT
83641: IFTRUE 83650
83643: PUSH
83644: LD_VAR 0 2
83648: NOT
83649: OR
83650: IFFALSE 83654
// exit ;
83652: GO 83744
// dist := 99999 ;
83654: LD_ADDR_VAR 0 5
83658: PUSH
83659: LD_INT 99999
83661: ST_TO_ADDR
// for i in points do
83662: LD_ADDR_VAR 0 4
83666: PUSH
83667: LD_VAR 0 2
83671: PUSH
83672: FOR_IN
83673: IFFALSE 83742
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83675: LD_ADDR_VAR 0 6
83679: PUSH
83680: LD_VAR 0 1
83684: PPUSH
83685: LD_VAR 0 4
83689: PUSH
83690: LD_INT 1
83692: ARRAY
83693: PPUSH
83694: LD_VAR 0 4
83698: PUSH
83699: LD_INT 2
83701: ARRAY
83702: PPUSH
83703: CALL_OW 297
83707: ST_TO_ADDR
// if tmpDist < dist then
83708: LD_VAR 0 6
83712: PUSH
83713: LD_VAR 0 5
83717: LESS
83718: IFFALSE 83740
// begin result := i ;
83720: LD_ADDR_VAR 0 3
83724: PUSH
83725: LD_VAR 0 4
83729: ST_TO_ADDR
// dist := tmpDist ;
83730: LD_ADDR_VAR 0 5
83734: PUSH
83735: LD_VAR 0 6
83739: ST_TO_ADDR
// end ; end ;
83740: GO 83672
83742: POP
83743: POP
// end ;
83744: LD_VAR 0 3
83748: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
83749: LD_INT 0
83751: PPUSH
// uc_side := side ;
83752: LD_ADDR_OWVAR 20
83756: PUSH
83757: LD_VAR 0 1
83761: ST_TO_ADDR
// uc_nation := 3 ;
83762: LD_ADDR_OWVAR 21
83766: PUSH
83767: LD_INT 3
83769: ST_TO_ADDR
// vc_chassis := 25 ;
83770: LD_ADDR_OWVAR 37
83774: PUSH
83775: LD_INT 25
83777: ST_TO_ADDR
// vc_engine := engine_siberite ;
83778: LD_ADDR_OWVAR 39
83782: PUSH
83783: LD_INT 3
83785: ST_TO_ADDR
// vc_control := control_computer ;
83786: LD_ADDR_OWVAR 38
83790: PUSH
83791: LD_INT 3
83793: ST_TO_ADDR
// vc_weapon := 59 ;
83794: LD_ADDR_OWVAR 40
83798: PUSH
83799: LD_INT 59
83801: ST_TO_ADDR
// result := CreateVehicle ;
83802: LD_ADDR_VAR 0 5
83806: PUSH
83807: CALL_OW 45
83811: ST_TO_ADDR
// SetDir ( result , d ) ;
83812: LD_VAR 0 5
83816: PPUSH
83817: LD_VAR 0 4
83821: PPUSH
83822: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83826: LD_VAR 0 5
83830: PPUSH
83831: LD_VAR 0 2
83835: PPUSH
83836: LD_VAR 0 3
83840: PPUSH
83841: LD_INT 0
83843: PPUSH
83844: CALL_OW 48
// end ;
83848: LD_VAR 0 5
83852: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83853: LD_INT 0
83855: PPUSH
83856: PPUSH
83857: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83858: LD_ADDR_VAR 0 2
83862: PUSH
83863: LD_INT 0
83865: PUSH
83866: LD_INT 0
83868: PUSH
83869: LD_INT 0
83871: PUSH
83872: LD_INT 0
83874: PUSH
83875: EMPTY
83876: LIST
83877: LIST
83878: LIST
83879: LIST
83880: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83881: LD_VAR 0 1
83885: NOT
83886: IFTRUE 83919
83888: PUSH
83889: LD_VAR 0 1
83893: PPUSH
83894: CALL_OW 264
83898: PUSH
83899: LD_INT 12
83901: PUSH
83902: LD_INT 51
83904: PUSH
83905: LD_INT 32
83907: PUSH
83908: LD_INT 89
83910: PUSH
83911: EMPTY
83912: LIST
83913: LIST
83914: LIST
83915: LIST
83916: IN
83917: NOT
83918: OR
83919: IFFALSE 83923
// exit ;
83921: GO 84021
// for i := 1 to 3 do
83923: LD_ADDR_VAR 0 3
83927: PUSH
83928: DOUBLE
83929: LD_INT 1
83931: DEC
83932: ST_TO_ADDR
83933: LD_INT 3
83935: PUSH
83936: FOR_TO
83937: IFFALSE 84019
// begin tmp := GetCargo ( cargo , i ) ;
83939: LD_ADDR_VAR 0 4
83943: PUSH
83944: LD_VAR 0 1
83948: PPUSH
83949: LD_VAR 0 3
83953: PPUSH
83954: CALL_OW 289
83958: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83959: LD_ADDR_VAR 0 2
83963: PUSH
83964: LD_VAR 0 2
83968: PPUSH
83969: LD_VAR 0 3
83973: PPUSH
83974: LD_VAR 0 4
83978: PPUSH
83979: CALL_OW 1
83983: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83984: LD_ADDR_VAR 0 2
83988: PUSH
83989: LD_VAR 0 2
83993: PPUSH
83994: LD_INT 4
83996: PPUSH
83997: LD_VAR 0 2
84001: PUSH
84002: LD_INT 4
84004: ARRAY
84005: PUSH
84006: LD_VAR 0 4
84010: PLUS
84011: PPUSH
84012: CALL_OW 1
84016: ST_TO_ADDR
// end ;
84017: GO 83936
84019: POP
84020: POP
// end ;
84021: LD_VAR 0 2
84025: RET
// export function Length ( array ) ; begin
84026: LD_INT 0
84028: PPUSH
// result := array + 0 ;
84029: LD_ADDR_VAR 0 2
84033: PUSH
84034: LD_VAR 0 1
84038: PUSH
84039: LD_INT 0
84041: PLUS
84042: ST_TO_ADDR
// end ;
84043: LD_VAR 0 2
84047: RET
// export function PrepareArray ( array ) ; begin
84048: LD_INT 0
84050: PPUSH
// result := array diff 0 ;
84051: LD_ADDR_VAR 0 2
84055: PUSH
84056: LD_VAR 0 1
84060: PUSH
84061: LD_INT 0
84063: DIFF
84064: ST_TO_ADDR
// if not result [ 1 ] then
84065: LD_VAR 0 2
84069: PUSH
84070: LD_INT 1
84072: ARRAY
84073: NOT
84074: IFFALSE 84094
// result := Delete ( result , 1 ) ;
84076: LD_ADDR_VAR 0 2
84080: PUSH
84081: LD_VAR 0 2
84085: PPUSH
84086: LD_INT 1
84088: PPUSH
84089: CALL_OW 3
84093: ST_TO_ADDR
// end ;
84094: LD_VAR 0 2
84098: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
84099: LD_INT 0
84101: PPUSH
84102: PPUSH
84103: PPUSH
84104: PPUSH
// sibRocketRange := 25 ;
84105: LD_ADDR_VAR 0 6
84109: PUSH
84110: LD_INT 25
84112: ST_TO_ADDR
// result := false ;
84113: LD_ADDR_VAR 0 4
84117: PUSH
84118: LD_INT 0
84120: ST_TO_ADDR
// for i := 0 to 5 do
84121: LD_ADDR_VAR 0 5
84125: PUSH
84126: DOUBLE
84127: LD_INT 0
84129: DEC
84130: ST_TO_ADDR
84131: LD_INT 5
84133: PUSH
84134: FOR_TO
84135: IFFALSE 84202
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
84137: LD_VAR 0 1
84141: PPUSH
84142: LD_VAR 0 5
84146: PPUSH
84147: LD_VAR 0 6
84151: PPUSH
84152: CALL_OW 272
84156: PPUSH
84157: LD_VAR 0 2
84161: PPUSH
84162: LD_VAR 0 5
84166: PPUSH
84167: LD_VAR 0 6
84171: PPUSH
84172: CALL_OW 273
84176: PPUSH
84177: LD_VAR 0 3
84181: PPUSH
84182: CALL_OW 309
84186: IFFALSE 84200
// begin result := true ;
84188: LD_ADDR_VAR 0 4
84192: PUSH
84193: LD_INT 1
84195: ST_TO_ADDR
// exit ;
84196: POP
84197: POP
84198: GO 84204
// end ;
84200: GO 84134
84202: POP
84203: POP
// end ;
84204: LD_VAR 0 4
84208: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
84209: LD_INT 0
84211: PPUSH
84212: PPUSH
84213: PPUSH
// if btype = b_depot then
84214: LD_VAR 0 2
84218: PUSH
84219: LD_INT 0
84221: EQUAL
84222: IFFALSE 84234
// begin result := true ;
84224: LD_ADDR_VAR 0 3
84228: PUSH
84229: LD_INT 1
84231: ST_TO_ADDR
// exit ;
84232: GO 84354
// end ; pom := GetBase ( depot ) ;
84234: LD_ADDR_VAR 0 4
84238: PUSH
84239: LD_VAR 0 1
84243: PPUSH
84244: CALL_OW 274
84248: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
84249: LD_ADDR_VAR 0 5
84253: PUSH
84254: LD_VAR 0 2
84258: PPUSH
84259: LD_VAR 0 1
84263: PPUSH
84264: CALL_OW 248
84268: PPUSH
84269: CALL_OW 450
84273: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
84274: LD_ADDR_VAR 0 3
84278: PUSH
84279: LD_VAR 0 4
84283: PPUSH
84284: LD_INT 1
84286: PPUSH
84287: CALL_OW 275
84291: PUSH
84292: LD_VAR 0 5
84296: PUSH
84297: LD_INT 1
84299: ARRAY
84300: GREATEREQUAL
84301: IFFALSE 84327
84303: PUSH
84304: LD_VAR 0 4
84308: PPUSH
84309: LD_INT 2
84311: PPUSH
84312: CALL_OW 275
84316: PUSH
84317: LD_VAR 0 5
84321: PUSH
84322: LD_INT 2
84324: ARRAY
84325: GREATEREQUAL
84326: AND
84327: IFFALSE 84353
84329: PUSH
84330: LD_VAR 0 4
84334: PPUSH
84335: LD_INT 3
84337: PPUSH
84338: CALL_OW 275
84342: PUSH
84343: LD_VAR 0 5
84347: PUSH
84348: LD_INT 3
84350: ARRAY
84351: GREATEREQUAL
84352: AND
84353: ST_TO_ADDR
// end ;
84354: LD_VAR 0 3
84358: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
84359: LD_INT 0
84361: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
84362: LD_VAR 0 1
84366: PPUSH
84367: LD_VAR 0 2
84371: PPUSH
84372: LD_INT 0
84374: PPUSH
84375: LD_INT 0
84377: PPUSH
84378: LD_INT 1
84380: PPUSH
84381: LD_INT 0
84383: PPUSH
84384: CALL_OW 587
// end ;
84388: LD_VAR 0 3
84392: RET
// export function CenterOnNow ( unit ) ; begin
84393: LD_INT 0
84395: PPUSH
// result := IsInUnit ( unit ) ;
84396: LD_ADDR_VAR 0 2
84400: PUSH
84401: LD_VAR 0 1
84405: PPUSH
84406: CALL_OW 310
84410: ST_TO_ADDR
// if not result then
84411: LD_VAR 0 2
84415: NOT
84416: IFFALSE 84428
// result := unit ;
84418: LD_ADDR_VAR 0 2
84422: PUSH
84423: LD_VAR 0 1
84427: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
84428: LD_VAR 0 1
84432: PPUSH
84433: CALL_OW 87
// end ;
84437: LD_VAR 0 2
84441: RET
// export function ComMoveHex ( unit , hex ) ; begin
84442: LD_INT 0
84444: PPUSH
// if not hex then
84445: LD_VAR 0 2
84449: NOT
84450: IFFALSE 84454
// exit ;
84452: GO 84507
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
84454: LD_VAR 0 2
84458: PUSH
84459: LD_INT 1
84461: ARRAY
84462: PPUSH
84463: LD_VAR 0 2
84467: PUSH
84468: LD_INT 2
84470: ARRAY
84471: PPUSH
84472: CALL_OW 428
84476: IFFALSE 84480
// exit ;
84478: GO 84507
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
84480: LD_VAR 0 1
84484: PPUSH
84485: LD_VAR 0 2
84489: PUSH
84490: LD_INT 1
84492: ARRAY
84493: PPUSH
84494: LD_VAR 0 2
84498: PUSH
84499: LD_INT 2
84501: ARRAY
84502: PPUSH
84503: CALL_OW 111
// end ;
84507: LD_VAR 0 3
84511: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
84512: LD_INT 0
84514: PPUSH
84515: PPUSH
84516: PPUSH
// if not unit or not enemy then
84517: LD_VAR 0 1
84521: NOT
84522: IFTRUE 84531
84524: PUSH
84525: LD_VAR 0 2
84529: NOT
84530: OR
84531: IFFALSE 84535
// exit ;
84533: GO 84661
// x := GetX ( enemy ) ;
84535: LD_ADDR_VAR 0 4
84539: PUSH
84540: LD_VAR 0 2
84544: PPUSH
84545: CALL_OW 250
84549: ST_TO_ADDR
// y := GetY ( enemy ) ;
84550: LD_ADDR_VAR 0 5
84554: PUSH
84555: LD_VAR 0 2
84559: PPUSH
84560: CALL_OW 251
84564: ST_TO_ADDR
// if ValidHex ( x , y ) then
84565: LD_VAR 0 4
84569: PPUSH
84570: LD_VAR 0 5
84574: PPUSH
84575: CALL_OW 488
84579: IFFALSE 84661
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
84581: LD_VAR 0 2
84585: PPUSH
84586: CALL_OW 247
84590: PUSH
84591: LD_INT 3
84593: PUSH
84594: LD_INT 2
84596: PUSH
84597: EMPTY
84598: LIST
84599: LIST
84600: IN
84601: IFTRUE 84624
84603: PUSH
84604: LD_VAR 0 1
84608: PPUSH
84609: CALL_OW 255
84613: PPUSH
84614: LD_VAR 0 2
84618: PPUSH
84619: CALL_OW 292
84623: OR
84624: IFFALSE 84642
// ComAttackUnit ( unit , enemy ) else
84626: LD_VAR 0 1
84630: PPUSH
84631: LD_VAR 0 2
84635: PPUSH
84636: CALL_OW 115
84640: GO 84661
// ComAgressiveMove ( unit , x , y ) ;
84642: LD_VAR 0 1
84646: PPUSH
84647: LD_VAR 0 4
84651: PPUSH
84652: LD_VAR 0 5
84656: PPUSH
84657: CALL_OW 114
// end ;
84661: LD_VAR 0 3
84665: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
84666: LD_INT 0
84668: PPUSH
84669: PPUSH
84670: PPUSH
// list := AreaToList ( area , 0 ) ;
84671: LD_ADDR_VAR 0 5
84675: PUSH
84676: LD_VAR 0 1
84680: PPUSH
84681: LD_INT 0
84683: PPUSH
84684: CALL_OW 517
84688: ST_TO_ADDR
// if not list then
84689: LD_VAR 0 5
84693: NOT
84694: IFFALSE 84698
// exit ;
84696: GO 84828
// if all then
84698: LD_VAR 0 2
84702: IFFALSE 84790
// begin for i := 1 to list [ 1 ] do
84704: LD_ADDR_VAR 0 4
84708: PUSH
84709: DOUBLE
84710: LD_INT 1
84712: DEC
84713: ST_TO_ADDR
84714: LD_VAR 0 5
84718: PUSH
84719: LD_INT 1
84721: ARRAY
84722: PUSH
84723: FOR_TO
84724: IFFALSE 84786
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
84726: LD_ADDR_VAR 0 3
84730: PUSH
84731: LD_VAR 0 3
84735: PPUSH
84736: LD_VAR 0 3
84740: PUSH
84741: LD_INT 1
84743: PLUS
84744: PPUSH
84745: LD_VAR 0 5
84749: PUSH
84750: LD_INT 1
84752: ARRAY
84753: PUSH
84754: LD_VAR 0 4
84758: ARRAY
84759: PUSH
84760: LD_VAR 0 5
84764: PUSH
84765: LD_INT 2
84767: ARRAY
84768: PUSH
84769: LD_VAR 0 4
84773: ARRAY
84774: PUSH
84775: EMPTY
84776: LIST
84777: LIST
84778: PPUSH
84779: CALL_OW 1
84783: ST_TO_ADDR
84784: GO 84723
84786: POP
84787: POP
// exit ;
84788: GO 84828
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
84790: LD_ADDR_VAR 0 3
84794: PUSH
84795: LD_VAR 0 5
84799: PUSH
84800: LD_INT 1
84802: ARRAY
84803: PUSH
84804: LD_INT 1
84806: ARRAY
84807: PUSH
84808: LD_VAR 0 5
84812: PUSH
84813: LD_INT 2
84815: ARRAY
84816: PUSH
84817: LD_INT 1
84819: ARRAY
84820: PUSH
84821: EMPTY
84822: LIST
84823: LIST
84824: PUSH
84825: EMPTY
84826: LIST
84827: ST_TO_ADDR
// end ;
84828: LD_VAR 0 3
84832: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84833: LD_INT 0
84835: PPUSH
84836: PPUSH
// list := AreaToList ( area , 0 ) ;
84837: LD_ADDR_VAR 0 4
84841: PUSH
84842: LD_VAR 0 1
84846: PPUSH
84847: LD_INT 0
84849: PPUSH
84850: CALL_OW 517
84854: ST_TO_ADDR
// if not list then
84855: LD_VAR 0 4
84859: NOT
84860: IFFALSE 84864
// exit ;
84862: GO 84905
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
84864: LD_ADDR_VAR 0 3
84868: PUSH
84869: LD_VAR 0 4
84873: PUSH
84874: LD_INT 1
84876: ARRAY
84877: PUSH
84878: LD_INT 1
84880: ARRAY
84881: PUSH
84882: LD_VAR 0 4
84886: PUSH
84887: LD_INT 2
84889: ARRAY
84890: PUSH
84891: LD_INT 1
84893: ARRAY
84894: PUSH
84895: LD_VAR 0 2
84899: PUSH
84900: EMPTY
84901: LIST
84902: LIST
84903: LIST
84904: ST_TO_ADDR
// end ;
84905: LD_VAR 0 3
84909: RET
// export function First ( array ) ; begin
84910: LD_INT 0
84912: PPUSH
// if not array then
84913: LD_VAR 0 1
84917: NOT
84918: IFFALSE 84922
// exit ;
84920: GO 84936
// result := array [ 1 ] ;
84922: LD_ADDR_VAR 0 2
84926: PUSH
84927: LD_VAR 0 1
84931: PUSH
84932: LD_INT 1
84934: ARRAY
84935: ST_TO_ADDR
// end ;
84936: LD_VAR 0 2
84940: RET
// export function Last ( array ) ; begin
84941: LD_INT 0
84943: PPUSH
// if not array then
84944: LD_VAR 0 1
84948: NOT
84949: IFFALSE 84953
// exit ;
84951: GO 84969
// result := array [ array ] ;
84953: LD_ADDR_VAR 0 2
84957: PUSH
84958: LD_VAR 0 1
84962: PUSH
84963: LD_VAR 0 1
84967: ARRAY
84968: ST_TO_ADDR
// end ;
84969: LD_VAR 0 2
84973: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84974: LD_INT 0
84976: PPUSH
84977: PPUSH
// result := [ ] ;
84978: LD_ADDR_VAR 0 5
84982: PUSH
84983: EMPTY
84984: ST_TO_ADDR
// if not array then
84985: LD_VAR 0 1
84989: NOT
84990: IFFALSE 84994
// exit ;
84992: GO 85106
// for i := 1 to array do
84994: LD_ADDR_VAR 0 6
84998: PUSH
84999: DOUBLE
85000: LD_INT 1
85002: DEC
85003: ST_TO_ADDR
85004: LD_VAR 0 1
85008: PUSH
85009: FOR_TO
85010: IFFALSE 85104
// if array [ i ] [ index ] = value then
85012: LD_VAR 0 1
85016: PUSH
85017: LD_VAR 0 6
85021: ARRAY
85022: PUSH
85023: LD_VAR 0 2
85027: ARRAY
85028: PUSH
85029: LD_VAR 0 3
85033: EQUAL
85034: IFFALSE 85102
// begin if indexColumn then
85036: LD_VAR 0 4
85040: IFFALSE 85076
// result := Join ( result , array [ i ] [ indexColumn ] ) else
85042: LD_ADDR_VAR 0 5
85046: PUSH
85047: LD_VAR 0 5
85051: PPUSH
85052: LD_VAR 0 1
85056: PUSH
85057: LD_VAR 0 6
85061: ARRAY
85062: PUSH
85063: LD_VAR 0 4
85067: ARRAY
85068: PPUSH
85069: CALL 80114 0 2
85073: ST_TO_ADDR
85074: GO 85102
// result := Join ( result , array [ i ] ) ;
85076: LD_ADDR_VAR 0 5
85080: PUSH
85081: LD_VAR 0 5
85085: PPUSH
85086: LD_VAR 0 1
85090: PUSH
85091: LD_VAR 0 6
85095: ARRAY
85096: PPUSH
85097: CALL 80114 0 2
85101: ST_TO_ADDR
// end ;
85102: GO 85009
85104: POP
85105: POP
// end ;
85106: LD_VAR 0 5
85110: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
85111: LD_INT 0
85113: PPUSH
// if not vehicles or not parkingPoint then
85114: LD_VAR 0 1
85118: NOT
85119: IFTRUE 85128
85121: PUSH
85122: LD_VAR 0 2
85126: NOT
85127: OR
85128: IFFALSE 85132
// exit ;
85130: GO 85230
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
85132: LD_ADDR_VAR 0 1
85136: PUSH
85137: LD_VAR 0 1
85141: PPUSH
85142: LD_INT 50
85144: PUSH
85145: EMPTY
85146: LIST
85147: PUSH
85148: LD_INT 3
85150: PUSH
85151: LD_INT 92
85153: PUSH
85154: LD_VAR 0 2
85158: PUSH
85159: LD_INT 1
85161: ARRAY
85162: PUSH
85163: LD_VAR 0 2
85167: PUSH
85168: LD_INT 2
85170: ARRAY
85171: PUSH
85172: LD_INT 8
85174: PUSH
85175: EMPTY
85176: LIST
85177: LIST
85178: LIST
85179: LIST
85180: PUSH
85181: EMPTY
85182: LIST
85183: LIST
85184: PUSH
85185: EMPTY
85186: LIST
85187: LIST
85188: PPUSH
85189: CALL_OW 72
85193: ST_TO_ADDR
// if not vehicles then
85194: LD_VAR 0 1
85198: NOT
85199: IFFALSE 85203
// exit ;
85201: GO 85230
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
85203: LD_VAR 0 1
85207: PPUSH
85208: LD_VAR 0 2
85212: PUSH
85213: LD_INT 1
85215: ARRAY
85216: PPUSH
85217: LD_VAR 0 2
85221: PUSH
85222: LD_INT 2
85224: ARRAY
85225: PPUSH
85226: CALL_OW 111
// end ;
85230: LD_VAR 0 3
85234: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
85235: LD_INT 0
85237: PPUSH
85238: PPUSH
85239: PPUSH
// if not side or not area then
85240: LD_VAR 0 1
85244: NOT
85245: IFTRUE 85254
85247: PUSH
85248: LD_VAR 0 2
85252: NOT
85253: OR
85254: IFFALSE 85258
// exit ;
85256: GO 85377
// tmp := AreaToList ( area , 0 ) ;
85258: LD_ADDR_VAR 0 5
85262: PUSH
85263: LD_VAR 0 2
85267: PPUSH
85268: LD_INT 0
85270: PPUSH
85271: CALL_OW 517
85275: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
85276: LD_ADDR_VAR 0 4
85280: PUSH
85281: DOUBLE
85282: LD_INT 1
85284: DEC
85285: ST_TO_ADDR
85286: LD_VAR 0 5
85290: PUSH
85291: LD_INT 1
85293: ARRAY
85294: PUSH
85295: FOR_TO
85296: IFFALSE 85375
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
85298: LD_VAR 0 5
85302: PUSH
85303: LD_INT 1
85305: ARRAY
85306: PUSH
85307: LD_VAR 0 4
85311: ARRAY
85312: PPUSH
85313: LD_VAR 0 5
85317: PUSH
85318: LD_INT 2
85320: ARRAY
85321: PUSH
85322: LD_VAR 0 4
85326: ARRAY
85327: PPUSH
85328: CALL_OW 351
85332: IFFALSE 85373
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
85334: LD_VAR 0 5
85338: PUSH
85339: LD_INT 1
85341: ARRAY
85342: PUSH
85343: LD_VAR 0 4
85347: ARRAY
85348: PPUSH
85349: LD_VAR 0 5
85353: PUSH
85354: LD_INT 2
85356: ARRAY
85357: PUSH
85358: LD_VAR 0 4
85362: ARRAY
85363: PPUSH
85364: LD_VAR 0 1
85368: PPUSH
85369: CALL_OW 244
// end ;
85373: GO 85295
85375: POP
85376: POP
// end ;
85377: LD_VAR 0 3
85381: RET
// export function UniqueArray ( array ) ; var i ; begin
85382: LD_INT 0
85384: PPUSH
85385: PPUSH
// result := [ ] ;
85386: LD_ADDR_VAR 0 2
85390: PUSH
85391: EMPTY
85392: ST_TO_ADDR
// if not array then
85393: LD_VAR 0 1
85397: NOT
85398: IFFALSE 85402
// exit ;
85400: GO 85463
// for i := 1 to array do
85402: LD_ADDR_VAR 0 3
85406: PUSH
85407: DOUBLE
85408: LD_INT 1
85410: DEC
85411: ST_TO_ADDR
85412: LD_VAR 0 1
85416: PUSH
85417: FOR_TO
85418: IFFALSE 85461
// if not array [ i ] in result then
85420: LD_VAR 0 1
85424: PUSH
85425: LD_VAR 0 3
85429: ARRAY
85430: PUSH
85431: LD_VAR 0 2
85435: IN
85436: NOT
85437: IFFALSE 85459
// result := Join ( result , i ) ;
85439: LD_ADDR_VAR 0 2
85443: PUSH
85444: LD_VAR 0 2
85448: PPUSH
85449: LD_VAR 0 3
85453: PPUSH
85454: CALL 80114 0 2
85458: ST_TO_ADDR
85459: GO 85417
85461: POP
85462: POP
// end ; end_of_file
85463: LD_VAR 0 2
85467: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85468: LD_VAR 0 1
85472: PUSH
85473: LD_INT 200
85475: DOUBLE
85476: GREATEREQUAL
85477: IFFALSE 85485
85479: LD_INT 299
85481: DOUBLE
85482: LESSEQUAL
85483: IFTRUE 85487
85485: GO 85519
85487: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85488: LD_VAR 0 1
85492: PPUSH
85493: LD_VAR 0 2
85497: PPUSH
85498: LD_VAR 0 3
85502: PPUSH
85503: LD_VAR 0 4
85507: PPUSH
85508: LD_VAR 0 5
85512: PPUSH
85513: CALL 36424 0 5
85517: GO 85596
85519: LD_INT 300
85521: DOUBLE
85522: GREATEREQUAL
85523: IFFALSE 85531
85525: LD_INT 399
85527: DOUBLE
85528: LESSEQUAL
85529: IFTRUE 85533
85531: GO 85595
85533: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85534: LD_VAR 0 1
85538: PPUSH
85539: LD_VAR 0 2
85543: PPUSH
85544: LD_VAR 0 3
85548: PPUSH
85549: LD_VAR 0 4
85553: PPUSH
85554: LD_VAR 0 5
85558: PPUSH
85559: LD_VAR 0 6
85563: PPUSH
85564: LD_VAR 0 7
85568: PPUSH
85569: LD_VAR 0 8
85573: PPUSH
85574: LD_VAR 0 9
85578: PPUSH
85579: LD_VAR 0 10
85583: PPUSH
85584: LD_VAR 0 11
85588: PPUSH
85589: CALL 32308 0 11
85593: GO 85596
85595: POP
// end ;
85596: PPOPN 11
85598: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85599: LD_VAR 0 1
85603: PPUSH
85604: LD_VAR 0 2
85608: PPUSH
85609: LD_VAR 0 3
85613: PPUSH
85614: LD_VAR 0 4
85618: PPUSH
85619: LD_VAR 0 5
85623: PPUSH
85624: CALL 35805 0 5
// end ; end_of_file
85628: PPOPN 5
85630: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85631: LD_VAR 0 1
85635: PPUSH
85636: LD_VAR 0 2
85640: PPUSH
85641: LD_VAR 0 3
85645: PPUSH
85646: LD_VAR 0 4
85650: PPUSH
85651: LD_VAR 0 5
85655: PPUSH
85656: LD_VAR 0 6
85660: PPUSH
85661: CALL 19848 0 6
// end ;
85665: PPOPN 6
85667: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
85668: LD_INT 0
85670: PPUSH
// begin if not units then
85671: LD_VAR 0 1
85675: NOT
85676: IFFALSE 85680
// exit ;
85678: GO 85714
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
85680: LD_VAR 0 1
85684: PPUSH
85685: LD_VAR 0 2
85689: PPUSH
85690: LD_VAR 0 3
85694: PPUSH
85695: LD_VAR 0 4
85699: PPUSH
85700: LD_VAR 0 5
85704: PPUSH
85705: LD_VAR 0 6
85709: PPUSH
85710: CALL 41931 0 6
// end ;
85714: PPOPN 7
85716: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
85717: CALL 19735 0 0
// end ;
85721: PPOPN 1
85723: END
