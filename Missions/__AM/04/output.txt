// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter , ruMech ; export bonusAvalaible ; export debugMode ; export ruMobile ; export specAttack ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// RandomizeAll ;
   8: CALL_OW 11
// if debugMode then
  12: LD_EXP 45
  16: IFFALSE 25
// FogOff ( 1 ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 344
// PrepareDifficulty ;
  25: CALL 4695 0 0
// PrepareRussianBase ;
  29: CALL 2976 0 0
// PrepareRussianCommander ;
  33: CALL 2927 0 0
// PrepareHeroes ;
  37: CALL 501 0 0
// SetBName ( ambdept0 , gamma ) ;
  41: LD_INT 4
  43: PPUSH
  44: LD_STRING gamma
  46: PPUSH
  47: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
  51: LD_INT 21
  53: PPUSH
  54: LD_STRING fyodor
  56: PPUSH
  57: CALL_OW 500
// Action ;
  61: CALL 8338 0 0
// end ;
  65: END
// function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 04_ ;
  69: LD_ADDR_EXP 48
  73: PUSH
  74: LD_STRING 04_
  76: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  77: LD_ADDR_EXP 49
  81: PUSH
  82: LD_STRING 03_
  84: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  85: LD_ADDR_EXP 16
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  93: LD_ADDR_EXP 17
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// baseReadyToBuild = 0 ;
 101: LD_ADDR_EXP 20
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// debugMode = 0 ;
 109: LD_ADDR_EXP 45
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
 117: LD_ADDR_EXP 42
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// bonusAvalaible = 0 ;
 125: LD_ADDR_EXP 44
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// firstRussianAttack = 0 ;
 133: LD_ADDR_EXP 23
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// saveDonaldson = 0 ;
 141: LD_ADDR_EXP 24
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// frankScoutBase = 0 ;
 149: LD_ADDR_EXP 25
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// harrAnswer = 0 ;
 157: LD_ADDR_EXP 26
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 165: LD_ADDR_EXP 27
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 173: LD_ADDR_EXP 28
 177: PUSH
 178: LD_INT 18900
 180: ST_TO_ADDR
// timerStatus = 0 ;
 181: LD_ADDR_EXP 29
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// startTimer = 0 ;
 189: LD_ADDR_EXP 30
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// factoryDialog = 0 ;
 197: LD_ADDR_EXP 31
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// bunkerDialog = 0 ;
 205: LD_ADDR_EXP 32
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// energyVDialog = 0 ;
 213: LD_ADDR_EXP 33
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// buildOil = 0 ;
 221: LD_ADDR_EXP 34
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// buildPower = 0 ;
 229: LD_ADDR_EXP 35
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// supply = [ 14 , 12 , 11 , 10 ] [ Difficulty ] ;
 237: LD_ADDR_EXP 36
 241: PUSH
 242: LD_INT 14
 244: PUSH
 245: LD_INT 12
 247: PUSH
 248: LD_INT 11
 250: PUSH
 251: LD_INT 10
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_OWVAR 67
 264: ARRAY
 265: ST_TO_ADDR
// AIEnable = 1 ;
 266: LD_ADDR_EXP 37
 270: PUSH
 271: LD_INT 1
 273: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 274: LD_ADDR_EXP 41
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// lostCounter = 0 ;
 282: LD_ADDR_EXP 38
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// honor = 1 ;
 290: LD_ADDR_EXP 39
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// escapeAvalaible = 0 ;
 298: LD_ADDR_EXP 40
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// specAttack := false ;
 306: LD_ADDR_EXP 47
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// ruMobile := [ ] ;
 314: LD_ADDR_EXP 46
 318: PUSH
 319: EMPTY
 320: ST_TO_ADDR
// ruMech := [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 43
 325: PUSH
 326: LD_INT 3
 328: PUSH
 329: LD_INT 4
 331: PUSH
 332: LD_INT 5
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// every 0 0$1 trigger debugMode do var i ;
 355: LD_EXP 45
 359: IFFALSE 457
 361: GO 363
 363: DISABLE
 364: LD_INT 0
 366: PPUSH
// begin enable ;
 367: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 21
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PPUSH
 397: CALL_OW 69
 401: PUSH
 402: FOR_IN
 403: IFFALSE 419
// SetLives ( i , 1000 ) ;
 405: LD_VAR 0 1
 409: PPUSH
 410: LD_INT 1000
 412: PPUSH
 413: CALL_OW 234
 417: GO 402
 419: POP
 420: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 421: LD_INT 4
 423: PPUSH
 424: CALL_OW 274
 428: PPUSH
 429: LD_INT 1
 431: PPUSH
 432: LD_INT 9999
 434: PPUSH
 435: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 439: LD_INT 4
 441: PPUSH
 442: CALL_OW 274
 446: PPUSH
 447: LD_INT 2
 449: PPUSH
 450: LD_INT 9999
 452: PPUSH
 453: CALL_OW 277
// end ;
 457: PPOPN 1
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 34
 472: PUSH
 473: LD_INT 44
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 493: LD_STRING ACH_GUN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export function PrepareHeroes ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side = 1 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 1
 513: ST_TO_ADDR
// uc_nation = 1 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , ( not debugMode ) , mission_prefix_prev ) ;
 522: LD_ADDR_EXP 1
 526: PUSH
 527: LD_STRING JMM
 529: PPUSH
 530: LD_EXP 45
 534: NOT
 535: PPUSH
 536: LD_EXP 49
 540: PPUSH
 541: CALL 37074 0 3
 545: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , ( not debugMode ) , mission_prefix_prev ) ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_STRING Lisa
 553: PPUSH
 554: LD_EXP 45
 558: NOT
 559: PPUSH
 560: LD_EXP 49
 564: PPUSH
 565: CALL 37074 0 3
 569: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false , mission_prefix_prev ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING Brown
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: LD_EXP 49
 585: PPUSH
 586: CALL 37074 0 3
 590: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false , mission_prefix_prev ) ;
 591: LD_ADDR_EXP 8
 595: PUSH
 596: LD_STRING Dickens
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: LD_EXP 49
 606: PPUSH
 607: CALL 37074 0 3
 611: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false , mission_prefix_prev ) ;
 612: LD_ADDR_EXP 9
 616: PUSH
 617: LD_STRING Woodruff
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: LD_EXP 49
 627: PPUSH
 628: CALL 37074 0 3
 632: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false , mission_prefix_prev ) ;
 633: LD_ADDR_EXP 12
 637: PUSH
 638: LD_STRING Campell
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_EXP 49
 648: PPUSH
 649: CALL 37074 0 3
 653: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false , mission_prefix_prev ) ;
 654: LD_ADDR_EXP 10
 658: PUSH
 659: LD_STRING Knight
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: LD_EXP 49
 669: PPUSH
 670: CALL 37074 0 3
 674: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false , mission_prefix_prev ) ;
 675: LD_ADDR_EXP 11
 679: PUSH
 680: LD_STRING Claptopn
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: LD_EXP 49
 690: PPUSH
 691: CALL 37074 0 3
 695: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false , mission_prefix_prev ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING Harisson
 703: PPUSH
 704: LD_INT 0
 706: PPUSH
 707: LD_EXP 49
 711: PPUSH
 712: CALL 37074 0 3
 716: ST_TO_ADDR
// if not Lisa then
 717: LD_EXP 4
 721: NOT
 722: IFFALSE 745
// Bobby = PrepareUnit ( Bobby , true , mission_prefix_prev ) ;
 724: LD_ADDR_EXP 2
 728: PUSH
 729: LD_STRING Bobby
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_EXP 49
 739: PPUSH
 740: CALL 37074 0 3
 744: ST_TO_ADDR
// if not Lisa and not Bobby then
 745: LD_EXP 4
 749: NOT
 750: PUSH
 751: LD_EXP 2
 755: NOT
 756: AND
 757: IFFALSE 780
// Cyrus = PrepareUnit ( Cyrus , true , mission_prefix_prev ) ;
 759: LD_ADDR_EXP 3
 763: PUSH
 764: LD_STRING Cyrus
 766: PPUSH
 767: LD_INT 1
 769: PPUSH
 770: LD_EXP 49
 774: PPUSH
 775: CALL 37074 0 3
 779: ST_TO_ADDR
// if not Lisa and not Bobby and not Cyrus then
 780: LD_EXP 4
 784: NOT
 785: PUSH
 786: LD_EXP 2
 790: NOT
 791: AND
 792: PUSH
 793: LD_EXP 3
 797: NOT
 798: AND
 799: IFFALSE 898
// begin tmp = CreateCharacterSet ( 03_others ) ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_STRING 03_others
 808: PPUSH
 809: CALL_OW 31
 813: ST_TO_ADDR
// if tmp then
 814: LD_VAR 0 3
 818: IFFALSE 875
// begin RandomBeforeMission = tmp [ 1 ] ;
 820: LD_ADDR_EXP 6
 824: PUSH
 825: LD_VAR 0 3
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 834: LD_STRING 03_others
 836: PPUSH
 837: CALL_OW 40
// if tmp > 1 then
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: GREATER
 849: IFFALSE 873
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_VAR 0 3
 860: PUSH
 861: LD_INT 1
 863: ARRAY
 864: DIFF
 865: PPUSH
 866: LD_STRING 03_others
 868: PPUSH
 869: CALL_OW 38
// end else
 873: GO 898
// begin PrepareHuman ( false , 1 , 3 ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: LD_INT 3
 883: PPUSH
 884: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 888: LD_ADDR_EXP 6
 892: PUSH
 893: CALL_OW 44
 897: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 4
 905: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false , mission_prefix_prev ) ;
 906: LD_ADDR_EXP 13
 910: PUSH
 911: LD_STRING Donaldson
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: LD_EXP 49
 921: PPUSH
 922: CALL 37074 0 3
 926: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , mission_prefix_prev ) ;
 927: LD_ADDR_EXP 5
 931: PUSH
 932: LD_STRING Frank
 934: PPUSH
 935: LD_INT 1
 937: PPUSH
 938: LD_EXP 49
 942: PPUSH
 943: CALL 37074 0 3
 947: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 948: LD_EXP 1
 952: PPUSH
 953: LD_INT 32
 955: PPUSH
 956: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 960: LD_EXP 7
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_INT 0
 970: PPUSH
 971: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 975: LD_EXP 7
 979: PPUSH
 980: LD_INT 32
 982: PPUSH
 983: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 987: LD_EXP 8
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
1002: LD_EXP 9
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
1017: LD_EXP 12
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
1032: LD_EXP 10
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1047: LD_EXP 11
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1062: LD_EXP 4
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 49
// if Lisa = false then
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 0
1084: EQUAL
1085: IFFALSE 1102
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1087: LD_EXP 2
1091: PPUSH
1092: LD_INT 2
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// if Lisa = false and Bobby = false then
1102: LD_EXP 4
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: PUSH
1111: LD_EXP 2
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1137: LD_EXP 4
1141: PUSH
1142: LD_INT 0
1144: EQUAL
1145: PUSH
1146: LD_EXP 2
1150: PUSH
1151: LD_INT 0
1153: EQUAL
1154: AND
1155: PUSH
1156: LD_EXP 3
1160: PUSH
1161: LD_INT 0
1163: EQUAL
1164: AND
1165: IFFALSE 1182
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1167: LD_EXP 6
1171: PPUSH
1172: LD_INT 2
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: CALL_OW 49
// end ;
1182: LD_VAR 0 1
1186: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1187: LD_INT 0
1189: PPUSH
1190: PPUSH
1191: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1192: LD_EXP 13
1196: PPUSH
1197: LD_INT 10
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// if Frank then
1207: LD_EXP 5
1211: IFFALSE 1228
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1213: LD_EXP 5
1217: PPUSH
1218: LD_INT 10
1220: PPUSH
1221: LD_INT 0
1223: PPUSH
1224: CALL_OW 49
// uc_nation = 1 ;
1228: LD_ADDR_OWVAR 21
1232: PUSH
1233: LD_INT 1
1235: ST_TO_ADDR
// uc_side = 4 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// hc_class := 3 ;
1244: LD_ADDR_OWVAR 28
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_sex := sex_male ;
1252: LD_ADDR_OWVAR 27
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1260: LD_ADDR_OWVAR 33
1264: PUSH
1265: LD_STRING SecondCharsGal
1267: ST_TO_ADDR
// hc_face_number := 53 ;
1268: LD_ADDR_OWVAR 34
1272: PUSH
1273: LD_INT 53
1275: ST_TO_ADDR
// hc_name := Freddie Warner ;
1276: LD_ADDR_OWVAR 26
1280: PUSH
1281: LD_STRING Freddie Warner
1283: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1284: LD_ADDR_OWVAR 29
1288: PUSH
1289: LD_INT 8
1291: PUSH
1292: LD_INT 11
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1299: LD_ADDR_OWVAR 30
1303: PUSH
1304: LD_INT 0
1306: PUSH
1307: LD_INT 0
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 0
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 2 ] ;
1322: LD_ADDR_OWVAR 31
1326: PUSH
1327: LD_INT 1
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 2
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// un = CreateHuman ;
1345: LD_ADDR_VAR 0 3
1349: PUSH
1350: CALL_OW 44
1354: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1355: LD_VAR 0 3
1359: PPUSH
1360: LD_INT 10
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 56 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 56
1401: ST_TO_ADDR
// hc_name := Mel Brennan ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Mel Brennan
1409: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1410: LD_ADDR_OWVAR 29
1414: PUSH
1415: LD_INT 12
1417: PUSH
1418: LD_INT 11
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1425: LD_ADDR_OWVAR 30
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
1448: LD_ADDR_OWVAR 31
1452: PUSH
1453: LD_INT 3
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: LD_INT 0
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: ST_TO_ADDR
// un = CreateHuman ;
1471: LD_ADDR_VAR 0 3
1475: PUSH
1476: CALL_OW 44
1480: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1481: LD_VAR 0 3
1485: PPUSH
1486: LD_INT 10
1488: PPUSH
1489: LD_INT 0
1491: PPUSH
1492: CALL_OW 49
// hc_class := 1 ;
1496: LD_ADDR_OWVAR 28
1500: PUSH
1501: LD_INT 1
1503: ST_TO_ADDR
// hc_sex := sex_male ;
1504: LD_ADDR_OWVAR 27
1508: PUSH
1509: LD_INT 1
1511: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1512: LD_ADDR_OWVAR 33
1516: PUSH
1517: LD_STRING AmGalRemake
1519: ST_TO_ADDR
// hc_face_number := 5 ;
1520: LD_ADDR_OWVAR 34
1524: PUSH
1525: LD_INT 5
1527: ST_TO_ADDR
// hc_name := Bob Joplin ;
1528: LD_ADDR_OWVAR 26
1532: PUSH
1533: LD_STRING Bob Joplin
1535: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1536: LD_ADDR_OWVAR 29
1540: PUSH
1541: LD_INT 10
1543: PUSH
1544: LD_INT 11
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1551: LD_ADDR_OWVAR 30
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 0
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1574: LD_ADDR_OWVAR 31
1578: PUSH
1579: LD_INT 3
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// un = CreateHuman ;
1597: LD_ADDR_VAR 0 3
1601: PUSH
1602: CALL_OW 44
1606: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1607: LD_VAR 0 3
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: LD_INT 0
1617: PPUSH
1618: CALL_OW 49
// hc_class := 3 ;
1622: LD_ADDR_OWVAR 28
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// hc_sex := sex_female ;
1630: LD_ADDR_OWVAR 27
1634: PUSH
1635: LD_INT 2
1637: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING AmGalRemake
1645: ST_TO_ADDR
// hc_face_number := 8 ;
1646: LD_ADDR_OWVAR 34
1650: PUSH
1651: LD_INT 8
1653: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1654: LD_ADDR_OWVAR 26
1658: PUSH
1659: LD_STRING Elizabeth Whitney
1661: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1662: LD_ADDR_OWVAR 29
1666: PUSH
1667: LD_INT 9
1669: PUSH
1670: LD_INT 11
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1677: LD_ADDR_OWVAR 30
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 2
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1700: LD_ADDR_OWVAR 31
1704: PUSH
1705: LD_INT 2
1707: PUSH
1708: LD_INT 2
1710: PUSH
1711: LD_INT 4
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: ST_TO_ADDR
// un = CreateHuman ;
1723: LD_ADDR_VAR 0 3
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1733: LD_VAR 0 3
1737: PPUSH
1738: LD_INT 10
1740: PPUSH
1741: LD_INT 0
1743: PPUSH
1744: CALL_OW 49
// InitHc ;
1748: CALL_OW 19
// end ;
1752: LD_VAR 0 1
1756: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1757: LD_INT 0
1759: PPUSH
1760: PPUSH
1761: PPUSH
1762: PPUSH
// uc_nation = 1 ;
1763: LD_ADDR_OWVAR 21
1767: PUSH
1768: LD_INT 1
1770: ST_TO_ADDR
// uc_side = 1 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1779: LD_ADDR_OWVAR 37
1783: PUSH
1784: LD_INT 2
1786: ST_TO_ADDR
// vc_engine := engine_combustion ;
1787: LD_ADDR_OWVAR 39
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// vc_control := control_manual ;
1795: LD_ADDR_OWVAR 38
1799: PUSH
1800: LD_INT 1
1802: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1803: LD_ADDR_OWVAR 41
1807: PUSH
1808: LD_INT 65
1810: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun , us_gatling_gun ] [ Difficulty ] ;
1811: LD_ADDR_OWVAR 40
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: LD_INT 4
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: LD_OWVAR 67
1838: ARRAY
1839: ST_TO_ADDR
// veh := CreateVehicle ;
1840: LD_ADDR_VAR 0 5
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1850: LD_VAR 0 5
1854: PPUSH
1855: LD_INT 2
1857: PPUSH
1858: CALL_OW 233
// if HexInfo ( 17 , 4 ) = 0 then
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 4
1867: PPUSH
1868: CALL_OW 428
1872: PUSH
1873: LD_INT 0
1875: EQUAL
1876: IFFALSE 1898
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1878: LD_VAR 0 5
1882: PPUSH
1883: LD_INT 17
1885: PPUSH
1886: LD_INT 4
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 48
1896: GO 1916
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1898: LD_VAR 0 5
1902: PPUSH
1903: LD_INT 23
1905: PPUSH
1906: LD_INT 10
1908: PPUSH
1909: LD_INT 0
1911: PPUSH
1912: CALL_OW 48
// hc_class := 1 ;
1916: LD_ADDR_OWVAR 28
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// hc_sex := sex_male ;
1924: LD_ADDR_OWVAR 27
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1932: LD_ADDR_OWVAR 33
1936: PUSH
1937: LD_STRING SecondCharsGal
1939: ST_TO_ADDR
// hc_face_number := 59 ;
1940: LD_ADDR_OWVAR 34
1944: PUSH
1945: LD_INT 59
1947: ST_TO_ADDR
// hc_name := Max Gray ;
1948: LD_ADDR_OWVAR 26
1952: PUSH
1953: LD_STRING Max Gray
1955: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1956: LD_ADDR_OWVAR 29
1960: PUSH
1961: LD_INT 9
1963: PUSH
1964: LD_INT 11
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1971: LD_ADDR_OWVAR 30
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 0
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 1 , 0 ] ;
1994: LD_ADDR_OWVAR 31
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: LD_INT 1
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: LD_INT 0
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: ST_TO_ADDR
// un = CreateHuman ;
2017: LD_ADDR_VAR 0 4
2021: PUSH
2022: CALL_OW 44
2026: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2027: LD_VAR 0 4
2031: PPUSH
2032: LD_INT 11
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// hc_class := 2 ;
2042: LD_ADDR_OWVAR 28
2046: PUSH
2047: LD_INT 2
2049: ST_TO_ADDR
// hc_sex := sex_male ;
2050: LD_ADDR_OWVAR 27
2054: PUSH
2055: LD_INT 1
2057: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2058: LD_ADDR_OWVAR 33
2062: PUSH
2063: LD_STRING SecondCharsGal
2065: ST_TO_ADDR
// hc_face_number := 50 ;
2066: LD_ADDR_OWVAR 34
2070: PUSH
2071: LD_INT 50
2073: ST_TO_ADDR
// hc_name := Frank Hughes ;
2074: LD_ADDR_OWVAR 26
2078: PUSH
2079: LD_STRING Frank Hughes
2081: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2082: LD_ADDR_OWVAR 29
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: LD_INT 10
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
2097: LD_ADDR_OWVAR 30
2101: PUSH
2102: LD_INT 1
2104: PUSH
2105: LD_INT 2
2107: PUSH
2108: LD_INT 0
2110: PUSH
2111: LD_INT 0
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 0 , 1 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 0
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 11
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// hc_class := 1 ;
2168: LD_ADDR_OWVAR 28
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// hc_sex := sex_male ;
2176: LD_ADDR_OWVAR 27
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2184: LD_ADDR_OWVAR 33
2188: PUSH
2189: LD_STRING SecondCharsGal
2191: ST_TO_ADDR
// hc_face_number := 54 ;
2192: LD_ADDR_OWVAR 34
2196: PUSH
2197: LD_INT 54
2199: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_STRING Luigi Ghbellin
2207: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2208: LD_ADDR_OWVAR 29
2212: PUSH
2213: LD_INT 11
2215: PUSH
2216: LD_INT 11
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2223: LD_ADDR_OWVAR 30
2227: PUSH
2228: LD_INT 1
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2246: LD_ADDR_OWVAR 31
2250: PUSH
2251: LD_INT 2
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: ST_TO_ADDR
// un = CreateHuman ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: CALL_OW 44
2278: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2279: LD_VAR 0 4
2283: PPUSH
2284: LD_INT 11
2286: PPUSH
2287: LD_INT 0
2289: PPUSH
2290: CALL_OW 49
// hc_class := 3 ;
2294: LD_ADDR_OWVAR 28
2298: PUSH
2299: LD_INT 3
2301: ST_TO_ADDR
// hc_sex := sex_male ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2310: LD_ADDR_OWVAR 33
2314: PUSH
2315: LD_STRING AmGalRemake
2317: ST_TO_ADDR
// hc_face_number := 6 ;
2318: LD_ADDR_OWVAR 34
2322: PUSH
2323: LD_INT 6
2325: ST_TO_ADDR
// hc_name := Leon Carter ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Leon Carter
2333: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2334: LD_ADDR_OWVAR 29
2338: PUSH
2339: LD_INT 10
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 2 , 1 ] ;
2349: LD_ADDR_OWVAR 30
2353: PUSH
2354: LD_INT 0
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: ST_TO_ADDR
// hc_skills := [ 0 , 2 , 3 , 1 ] ;
2372: LD_ADDR_OWVAR 31
2376: PUSH
2377: LD_INT 0
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: ST_TO_ADDR
// un = CreateHuman ;
2395: LD_ADDR_VAR 0 4
2399: PUSH
2400: CALL_OW 44
2404: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2405: LD_VAR 0 4
2409: PPUSH
2410: LD_VAR 0 5
2414: PPUSH
2415: CALL_OW 52
// if count = 4 then
2419: LD_VAR 0 1
2423: PUSH
2424: LD_INT 4
2426: EQUAL
2427: IFFALSE 2555
// begin hc_class := 1 ;
2429: LD_ADDR_OWVAR 28
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// hc_sex := sex_male ;
2437: LD_ADDR_OWVAR 27
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING SecondCharsGal
2452: ST_TO_ADDR
// hc_face_number := 34 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 34
2460: ST_TO_ADDR
// hc_name := Ian Hill ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING Ian Hill
2468: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2469: LD_ADDR_OWVAR 29
2473: PUSH
2474: LD_INT 10
2476: PUSH
2477: LD_INT 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2484: LD_ADDR_OWVAR 30
2488: PUSH
2489: LD_INT 1
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: LD_INT 0
2497: PUSH
2498: LD_INT 0
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2507: LD_ADDR_OWVAR 31
2511: PUSH
2512: LD_INT 3
2514: PUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: LD_INT 0
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: ST_TO_ADDR
// un = CreateHuman ;
2530: LD_ADDR_VAR 0 4
2534: PUSH
2535: CALL_OW 44
2539: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2540: LD_VAR 0 4
2544: PPUSH
2545: LD_INT 11
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL_OW 49
// end ; if count = 5 then
2555: LD_VAR 0 1
2559: PUSH
2560: LD_INT 5
2562: EQUAL
2563: IFFALSE 2817
// begin hc_class := 1 ;
2565: LD_ADDR_OWVAR 28
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// hc_sex := sex_male ;
2573: LD_ADDR_OWVAR 27
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2581: LD_ADDR_OWVAR 33
2585: PUSH
2586: LD_STRING SecondCharsGal
2588: ST_TO_ADDR
// hc_face_number := 34 ;
2589: LD_ADDR_OWVAR 34
2593: PUSH
2594: LD_INT 34
2596: ST_TO_ADDR
// hc_name := Ian Hill ;
2597: LD_ADDR_OWVAR 26
2601: PUSH
2602: LD_STRING Ian Hill
2604: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2605: LD_ADDR_OWVAR 29
2609: PUSH
2610: LD_INT 10
2612: PUSH
2613: LD_INT 12
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2620: LD_ADDR_OWVAR 30
2624: PUSH
2625: LD_INT 1
2627: PUSH
2628: LD_INT 0
2630: PUSH
2631: LD_INT 0
2633: PUSH
2634: LD_INT 0
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2643: LD_ADDR_OWVAR 31
2647: PUSH
2648: LD_INT 3
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: LD_INT 0
2659: PUSH
2660: EMPTY
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: ST_TO_ADDR
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 4
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2676: LD_VAR 0 4
2680: PPUSH
2681: LD_INT 11
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// hc_class := 1 ;
2691: LD_ADDR_OWVAR 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// hc_sex := sex_female ;
2699: LD_ADDR_OWVAR 27
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2707: LD_ADDR_OWVAR 33
2711: PUSH
2712: LD_STRING SecondCharsGal
2714: ST_TO_ADDR
// hc_face_number := 41 ;
2715: LD_ADDR_OWVAR 34
2719: PUSH
2720: LD_INT 41
2722: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2723: LD_ADDR_OWVAR 26
2727: PUSH
2728: LD_STRING Kate Wadsworth
2730: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2731: LD_ADDR_OWVAR 29
2735: PUSH
2736: LD_INT 9
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2746: LD_ADDR_OWVAR 30
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 2
2756: PUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 0
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2769: LD_ADDR_OWVAR 31
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 3
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: EMPTY
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: ST_TO_ADDR
// un = CreateHuman ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: CALL_OW 44
2801: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: LD_INT 11
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2817: LD_INT 11
2819: PPUSH
2820: LD_INT 22
2822: PUSH
2823: LD_INT 1
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: LD_INT 21
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 26
2842: PUSH
2843: LD_INT 1
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: LIST
2854: PPUSH
2855: CALL_OW 70
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2868: LD_INT 11
2870: PPUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 21
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 26
2893: PUSH
2894: LD_INT 1
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 70
2910: PUSH
2911: LD_INT 1
2913: ARRAY
2914: PPUSH
2915: LD_STRING D6-Sol3-1
2917: PPUSH
2918: CALL_OW 88
// end ; end_of_file
2922: LD_VAR 0 2
2926: RET
// export function PrepareRussianCommander ; begin
2927: LD_INT 0
2929: PPUSH
// uc_side = 3 ;
2930: LD_ADDR_OWVAR 20
2934: PUSH
2935: LD_INT 3
2937: ST_TO_ADDR
// uc_nation = 3 ;
2938: LD_ADDR_OWVAR 21
2942: PUSH
2943: LD_INT 3
2945: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Stolypin
2953: PPUSH
2954: CALL_OW 25
2958: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2959: LD_EXP 15
2963: PPUSH
2964: LD_INT 21
2966: PPUSH
2967: CALL_OW 52
// end ;
2971: LD_VAR 0 1
2975: RET
// export function PrepareRussianBase ; var i , b , un ; begin
2976: LD_INT 0
2978: PPUSH
2979: PPUSH
2980: PPUSH
2981: PPUSH
// if Difficulty > 1 then
2982: LD_OWVAR 67
2986: PUSH
2987: LD_INT 1
2989: GREATER
2990: IFFALSE 3100
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := 3 ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// InitHc ;
3008: CALL_OW 19
// InitBc ;
3012: CALL_OW 21
// PrepareHuman ( false , 1 , 4 ) ;
3016: LD_INT 0
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 4
3024: PPUSH
3025: CALL_OW 380
// bc_type := b_breastwork ;
3029: LD_ADDR_OWVAR 42
3033: PUSH
3034: LD_INT 31
3036: ST_TO_ADDR
// bc_level := 4 ;
3037: LD_ADDR_OWVAR 43
3041: PUSH
3042: LD_INT 4
3044: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 100 , 58 , 2 ) ;
3045: LD_ADDR_VAR 0 3
3049: PUSH
3050: LD_INT 100
3052: PPUSH
3053: LD_INT 58
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: CALL_OW 47
3063: ST_TO_ADDR
// un := CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_INT 5
3081: PPUSH
3082: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3086: LD_VAR 0 4
3090: PPUSH
3091: LD_VAR 0 3
3095: PPUSH
3096: CALL_OW 52
// end ; RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3100: LD_INT 3
3102: PPUSH
3103: LD_INT 3
3105: PPUSH
3106: LD_INT 22
3108: PPUSH
3109: LD_EXP 16
3113: PPUSH
3114: LD_EXP 17
3118: PPUSH
3119: CALL_OW 12
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 4
3132: PUSH
3133: LD_INT 5
3135: PUSH
3136: LD_INT 6
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_OWVAR 67
3149: ARRAY
3150: PPUSH
3151: CALL 4361 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 3
3160: PPUSH
3161: LD_INT 21
3163: PPUSH
3164: LD_EXP 16
3168: PPUSH
3169: LD_EXP 17
3173: PPUSH
3174: CALL_OW 12
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL 4361 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 3 ) ;
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: LD_INT 1
3197: PPUSH
3198: LD_EXP 16
3202: PPUSH
3203: LD_EXP 17
3207: PPUSH
3208: CALL_OW 12
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: CALL 4361 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 5 ) ;
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 3
3228: PPUSH
3229: LD_INT 24
3231: PPUSH
3232: LD_EXP 16
3236: PPUSH
3237: LD_EXP 17
3241: PPUSH
3242: CALL_OW 12
3246: PPUSH
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 5
3252: PPUSH
3253: CALL 4361 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3257: LD_ADDR_VAR 0 2
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 30
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: FOR_IN
3292: IFFALSE 3332
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
3294: LD_INT 3
3296: PPUSH
3297: LD_INT 3
3299: PPUSH
3300: LD_VAR 0 2
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: LD_EXP 17
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL 4361 0 6
3330: GO 3291
3332: POP
3333: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 30
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: FOR_IN
3369: IFFALSE 3397
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PPUSH
3386: LD_VAR 0 2
3390: PPUSH
3391: CALL 4470 0 2
3395: GO 3368
3397: POP
3398: POP
// end ;
3399: LD_VAR 0 1
3403: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3404: LD_INT 0
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// uc_side = 6 ;
3410: LD_ADDR_OWVAR 20
3414: PUSH
3415: LD_INT 6
3417: ST_TO_ADDR
// uc_nation = 3 ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_INT 3
3425: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
3426: LD_ADDR_VAR 0 2
3430: PUSH
3431: DOUBLE
3432: LD_INT 1
3434: DEC
3435: ST_TO_ADDR
3436: LD_INT 1
3438: PUSH
3439: LD_INT 2
3441: PUSH
3442: LD_INT 2
3444: PUSH
3445: LD_INT 3
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: PUSH
3454: LD_OWVAR 67
3458: ARRAY
3459: PUSH
3460: FOR_TO
3461: IFFALSE 3629
// begin vc_engine = 1 ;
3463: LD_ADDR_OWVAR 39
3467: PUSH
3468: LD_INT 1
3470: ST_TO_ADDR
// vc_control = 1 ;
3471: LD_ADDR_OWVAR 38
3475: PUSH
3476: LD_INT 1
3478: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 , 43 ] [ Difficulty ] ;
3479: LD_ADDR_OWVAR 40
3483: PUSH
3484: LD_INT 42
3486: PUSH
3487: LD_INT 42
3489: PUSH
3490: LD_INT 43
3492: PUSH
3493: LD_INT 43
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: PUSH
3502: LD_OWVAR 67
3506: ARRAY
3507: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 , 22 ] [ Difficulty ] ;
3508: LD_ADDR_OWVAR 37
3512: PUSH
3513: LD_INT 21
3515: PUSH
3516: LD_INT 22
3518: PUSH
3519: LD_INT 22
3521: PUSH
3522: LD_INT 22
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: PUSH
3531: LD_OWVAR 67
3535: ARRAY
3536: ST_TO_ADDR
// veh = CreateVehicle ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 45
3546: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3547: LD_VAR 0 3
3551: PPUSH
3552: LD_INT 3
3554: PPUSH
3555: LD_INT 0
3557: PPUSH
3558: CALL_OW 49
// hc_gallery =  ;
3562: LD_ADDR_OWVAR 33
3566: PUSH
3567: LD_STRING 
3569: ST_TO_ADDR
// hc_name =  ;
3570: LD_ADDR_OWVAR 26
3574: PUSH
3575: LD_STRING 
3577: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3578: LD_INT 0
3580: PPUSH
3581: LD_INT 3
3583: PPUSH
3584: LD_EXP 16
3588: PPUSH
3589: LD_EXP 17
3593: PPUSH
3594: CALL_OW 12
3598: PPUSH
3599: CALL_OW 380
// un = CreateHuman ;
3603: LD_ADDR_VAR 0 4
3607: PUSH
3608: CALL_OW 44
3612: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3613: LD_VAR 0 4
3617: PPUSH
3618: LD_VAR 0 3
3622: PPUSH
3623: CALL_OW 52
// end ;
3627: GO 3460
3629: POP
3630: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3631: LD_INT 0
3633: PPUSH
3634: LD_INT 2
3636: PPUSH
3637: LD_EXP 16
3641: PPUSH
3642: LD_EXP 17
3646: PPUSH
3647: CALL_OW 12
3651: PUSH
3652: LD_INT 2
3654: PLUS
3655: PPUSH
3656: CALL_OW 380
// un = CreateHuman ;
3660: LD_ADDR_VAR 0 4
3664: PUSH
3665: CALL_OW 44
3669: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3670: LD_VAR 0 4
3674: PPUSH
3675: LD_INT 3
3677: PPUSH
3678: LD_INT 0
3680: PPUSH
3681: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3685: LD_INT 0
3687: PPUSH
3688: LD_INT 4
3690: PPUSH
3691: LD_EXP 16
3695: PPUSH
3696: LD_EXP 17
3700: PPUSH
3701: CALL_OW 12
3705: PUSH
3706: LD_INT 2
3708: PLUS
3709: PPUSH
3710: CALL_OW 380
// un = CreateHuman ;
3714: LD_ADDR_VAR 0 4
3718: PUSH
3719: CALL_OW 44
3723: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3724: LD_VAR 0 4
3728: PPUSH
3729: LD_INT 3
3731: PPUSH
3732: LD_INT 0
3734: PPUSH
3735: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + rand ( 1 , 3 ) do
3739: LD_ADDR_VAR 0 2
3743: PUSH
3744: DOUBLE
3745: LD_INT 1
3747: DEC
3748: ST_TO_ADDR
3749: LD_INT 2
3751: PUSH
3752: LD_INT 3
3754: PUSH
3755: LD_INT 3
3757: PUSH
3758: LD_INT 4
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: PUSH
3767: LD_OWVAR 67
3771: ARRAY
3772: PUSH
3773: LD_INT 1
3775: PPUSH
3776: LD_INT 3
3778: PPUSH
3779: CALL_OW 12
3783: PLUS
3784: PUSH
3785: FOR_TO
3786: IFFALSE 3856
// begin hc_gallery =  ;
3788: LD_ADDR_OWVAR 33
3792: PUSH
3793: LD_STRING 
3795: ST_TO_ADDR
// hc_name =  ;
3796: LD_ADDR_OWVAR 26
3800: PUSH
3801: LD_STRING 
3803: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3804: LD_INT 0
3806: PPUSH
3807: LD_INT 1
3809: PPUSH
3810: LD_EXP 16
3814: PPUSH
3815: LD_EXP 17
3819: PPUSH
3820: CALL_OW 12
3824: PPUSH
3825: CALL_OW 380
// un = CreateHuman ;
3829: LD_ADDR_VAR 0 4
3833: PUSH
3834: CALL_OW 44
3838: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3839: LD_VAR 0 4
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 0
3849: PPUSH
3850: CALL_OW 49
// end ;
3854: GO 3785
3856: POP
3857: POP
// vc_engine = 1 ;
3858: LD_ADDR_OWVAR 39
3862: PUSH
3863: LD_INT 1
3865: ST_TO_ADDR
// vc_control = 1 ;
3866: LD_ADDR_OWVAR 38
3870: PUSH
3871: LD_INT 1
3873: ST_TO_ADDR
// vc_weapon = 51 ;
3874: LD_ADDR_OWVAR 40
3878: PUSH
3879: LD_INT 51
3881: ST_TO_ADDR
// vc_chassis = 22 ;
3882: LD_ADDR_OWVAR 37
3886: PUSH
3887: LD_INT 22
3889: ST_TO_ADDR
// veh = CreateVehicle ;
3890: LD_ADDR_VAR 0 3
3894: PUSH
3895: CALL_OW 45
3899: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3900: LD_VAR 0 3
3904: PPUSH
3905: LD_INT 3
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3915: LD_VAR 0 3
3919: PPUSH
3920: LD_INT 1
3922: PPUSH
3923: LD_INT 100
3925: PPUSH
3926: CALL_OW 290
// hc_gallery =  ;
3930: LD_ADDR_OWVAR 33
3934: PUSH
3935: LD_STRING 
3937: ST_TO_ADDR
// hc_name =  ;
3938: LD_ADDR_OWVAR 26
3942: PUSH
3943: LD_STRING 
3945: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3946: LD_INT 0
3948: PPUSH
3949: LD_INT 3
3951: PPUSH
3952: LD_EXP 16
3956: PPUSH
3957: LD_EXP 17
3961: PPUSH
3962: CALL_OW 12
3966: PPUSH
3967: CALL_OW 380
// un = CreateHuman ;
3971: LD_ADDR_VAR 0 4
3975: PUSH
3976: CALL_OW 44
3980: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3981: LD_VAR 0 4
3985: PPUSH
3986: LD_VAR 0 3
3990: PPUSH
3991: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3995: LD_ADDR_VAR 0 2
3999: PUSH
4000: LD_INT 22
4002: PUSH
4003: LD_INT 6
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: PUSH
4010: LD_INT 1
4012: PUSH
4013: LD_INT 3
4015: PUSH
4016: LD_INT 25
4018: PUSH
4019: LD_INT 2
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 3
4032: PUSH
4033: LD_INT 25
4035: PUSH
4036: LD_INT 4
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: LIST
4051: PUSH
4052: EMPTY
4053: LIST
4054: LIST
4055: PPUSH
4056: CALL_OW 69
4060: PUSH
4061: FOR_IN
4062: IFFALSE 4081
// ComAgressiveMove ( i , 45 , 46 ) ;
4064: LD_VAR 0 2
4068: PPUSH
4069: LD_INT 45
4071: PPUSH
4072: LD_INT 46
4074: PPUSH
4075: CALL_OW 114
4079: GO 4061
4081: POP
4082: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
4083: LD_ADDR_VAR 0 2
4087: PUSH
4088: LD_INT 22
4090: PUSH
4091: LD_INT 6
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: LD_INT 25
4100: PUSH
4101: LD_INT 2
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PPUSH
4112: CALL_OW 69
4116: PUSH
4117: FOR_IN
4118: IFFALSE 4149
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
4120: LD_ADDR_EXP 21
4124: PUSH
4125: LD_VAR 0 2
4129: PPUSH
4130: LD_INT 0
4132: PPUSH
4133: LD_INT 48
4135: PPUSH
4136: LD_INT 55
4138: PPUSH
4139: LD_INT 5
4141: PPUSH
4142: CALL_OW 145
4146: ST_TO_ADDR
4147: GO 4117
4149: POP
4150: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
4151: LD_ADDR_VAR 0 2
4155: PUSH
4156: LD_INT 22
4158: PUSH
4159: LD_INT 6
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 25
4168: PUSH
4169: LD_INT 4
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 69
4184: PUSH
4185: FOR_IN
4186: IFFALSE 4205
// ComMoveXY ( i , 39 , 55 ) ;
4188: LD_VAR 0 2
4192: PPUSH
4193: LD_INT 39
4195: PPUSH
4196: LD_INT 55
4198: PPUSH
4199: CALL_OW 111
4203: GO 4185
4205: POP
4206: POP
// end ;
4207: LD_VAR 0 1
4211: RET
// export function PrepareFirstAttack ; var i , un ; begin
4212: LD_INT 0
4214: PPUSH
4215: PPUSH
4216: PPUSH
// uc_side = 5 ;
4217: LD_ADDR_OWVAR 20
4221: PUSH
4222: LD_INT 5
4224: ST_TO_ADDR
// uc_nation = 3 ;
4225: LD_ADDR_OWVAR 21
4229: PUSH
4230: LD_INT 3
4232: ST_TO_ADDR
// for i := 1 to 4 do
4233: LD_ADDR_VAR 0 2
4237: PUSH
4238: DOUBLE
4239: LD_INT 1
4241: DEC
4242: ST_TO_ADDR
4243: LD_INT 4
4245: PUSH
4246: FOR_TO
4247: IFFALSE 4346
// begin hc_gallery =  ;
4249: LD_ADDR_OWVAR 33
4253: PUSH
4254: LD_STRING 
4256: ST_TO_ADDR
// hc_name =  ;
4257: LD_ADDR_OWVAR 26
4261: PUSH
4262: LD_STRING 
4264: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
4265: LD_INT 0
4267: PPUSH
4268: LD_INT 1
4270: PPUSH
4271: LD_EXP 16
4275: PPUSH
4276: LD_EXP 17
4280: PPUSH
4281: CALL_OW 12
4285: PPUSH
4286: CALL_OW 380
// un = CreateHuman ;
4290: LD_ADDR_VAR 0 3
4294: PUSH
4295: CALL_OW 44
4299: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
4300: LD_VAR 0 3
4304: PPUSH
4305: LD_INT 4
4307: PPUSH
4308: LD_INT 0
4310: PPUSH
4311: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_EXP 1
4324: PPUSH
4325: CALL_OW 250
4329: PPUSH
4330: LD_EXP 1
4334: PPUSH
4335: CALL_OW 251
4339: PPUSH
4340: CALL_OW 114
// end ;
4344: GO 4246
4346: POP
4347: POP
// firstRussianAttack = 1 ;
4348: LD_ADDR_EXP 23
4352: PUSH
4353: LD_INT 1
4355: ST_TO_ADDR
// end ; end_of_file
4356: LD_VAR 0 1
4360: RET
// export function RespawnInside ( side , nation , building , skill , class , count ) ; var i , un ; begin
4361: LD_INT 0
4363: PPUSH
4364: PPUSH
4365: PPUSH
// for i = 1 to count do
4366: LD_ADDR_VAR 0 8
4370: PUSH
4371: DOUBLE
4372: LD_INT 1
4374: DEC
4375: ST_TO_ADDR
4376: LD_VAR 0 6
4380: PUSH
4381: FOR_TO
4382: IFFALSE 4463
// begin uc_side = side ;
4384: LD_ADDR_OWVAR 20
4388: PUSH
4389: LD_VAR 0 1
4393: ST_TO_ADDR
// uc_nation = nation ;
4394: LD_ADDR_OWVAR 21
4398: PUSH
4399: LD_VAR 0 2
4403: ST_TO_ADDR
// hc_gallery =  ;
4404: LD_ADDR_OWVAR 33
4408: PUSH
4409: LD_STRING 
4411: ST_TO_ADDR
// hc_name =  ;
4412: LD_ADDR_OWVAR 26
4416: PUSH
4417: LD_STRING 
4419: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4420: LD_INT 0
4422: PPUSH
4423: LD_VAR 0 5
4427: PPUSH
4428: LD_VAR 0 4
4432: PPUSH
4433: CALL_OW 380
// un = CreateHuman ;
4437: LD_ADDR_VAR 0 9
4441: PUSH
4442: CALL_OW 44
4446: ST_TO_ADDR
// PlaceHumanInUnit ( un , building ) ;
4447: LD_VAR 0 9
4451: PPUSH
4452: LD_VAR 0 3
4456: PPUSH
4457: CALL_OW 52
// end ;
4461: GO 4381
4463: POP
4464: POP
// end ;
4465: LD_VAR 0 7
4469: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4470: LD_INT 0
4472: PPUSH
4473: PPUSH
4474: PPUSH
// uc_side := GetSide ( b ) ;
4475: LD_ADDR_OWVAR 20
4479: PUSH
4480: LD_VAR 0 2
4484: PPUSH
4485: CALL_OW 255
4489: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4490: LD_ADDR_OWVAR 21
4494: PUSH
4495: LD_VAR 0 2
4499: PPUSH
4500: CALL_OW 248
4504: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4505: LD_INT 0
4507: PPUSH
4508: LD_INT 1
4510: PPUSH
4511: LD_VAR 0 1
4515: PPUSH
4516: CALL_OW 380
// un = CreateHuman ;
4520: LD_ADDR_VAR 0 4
4524: PUSH
4525: CALL_OW 44
4529: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4530: LD_ADDR_VAR 0 5
4534: PUSH
4535: LD_VAR 0 2
4539: PPUSH
4540: CALL_OW 254
4544: PUSH
4545: LD_INT 3
4547: MINUS
4548: ST_TO_ADDR
// if dir < 0 then
4549: LD_VAR 0 5
4553: PUSH
4554: LD_INT 0
4556: LESS
4557: IFFALSE 4573
// dir := 6 + dir ;
4559: LD_ADDR_VAR 0 5
4563: PUSH
4564: LD_INT 6
4566: PUSH
4567: LD_VAR 0 5
4571: PLUS
4572: ST_TO_ADDR
// SetDir ( un , dir ) ;
4573: LD_VAR 0 4
4577: PPUSH
4578: LD_VAR 0 5
4582: PPUSH
4583: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4587: LD_VAR 0 4
4591: PPUSH
4592: LD_VAR 0 2
4596: PPUSH
4597: CALL_OW 52
// end ;
4601: LD_VAR 0 3
4605: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4606: LD_INT 0
4608: PPUSH
4609: PPUSH
4610: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4611: LD_ADDR_VAR 0 6
4615: PUSH
4616: LD_VAR 0 1
4620: PUSH
4621: LD_INT 1
4623: PPUSH
4624: LD_VAR 0 1
4628: PPUSH
4629: CALL_OW 12
4633: ARRAY
4634: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4635: LD_VAR 0 6
4639: PPUSH
4640: CALL_OW 258
4644: PUSH
4645: LD_INT 1
4647: EQUAL
4648: IFFALSE 4666
// Say ( speaker , dialogMID ) else
4650: LD_VAR 0 6
4654: PPUSH
4655: LD_VAR 0 2
4659: PPUSH
4660: CALL_OW 88
4664: GO 4680
// Say ( speaker , dialogFID ) ;
4666: LD_VAR 0 6
4670: PPUSH
4671: LD_VAR 0 3
4675: PPUSH
4676: CALL_OW 88
// result := speaker ;
4680: LD_ADDR_VAR 0 4
4684: PUSH
4685: LD_VAR 0 6
4689: ST_TO_ADDR
// end ;
4690: LD_VAR 0 4
4694: RET
// export function PrepareDifficulty ; var tmp ; begin
4695: LD_INT 0
4697: PPUSH
4698: PPUSH
// if Difficulty = 1 then
4699: LD_OWVAR 67
4703: PUSH
4704: LD_INT 1
4706: EQUAL
4707: IFFALSE 4725
// begin RuSoldMinLevel = 1 ;
4709: LD_ADDR_EXP 16
4713: PUSH
4714: LD_INT 1
4716: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4717: LD_ADDR_EXP 17
4721: PUSH
4722: LD_INT 2
4724: ST_TO_ADDR
// end ; if Difficulty = 2 then
4725: LD_OWVAR 67
4729: PUSH
4730: LD_INT 2
4732: EQUAL
4733: IFFALSE 4834
// begin RuSoldMinLevel = 2 ;
4735: LD_ADDR_EXP 16
4739: PUSH
4740: LD_INT 2
4742: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4743: LD_ADDR_EXP 17
4747: PUSH
4748: LD_INT 3
4750: ST_TO_ADDR
// RemoveUnit ( rubbrwr1 ) ;
4751: LD_INT 23
4753: PPUSH
4754: CALL_OW 64
// uc_nation = 3 ;
4758: LD_ADDR_OWVAR 21
4762: PUSH
4763: LD_INT 3
4765: ST_TO_ADDR
// uc_side = 3 ;
4766: LD_ADDR_OWVAR 20
4770: PUSH
4771: LD_INT 3
4773: ST_TO_ADDR
// bc_level = 5 ;
4774: LD_ADDR_OWVAR 43
4778: PUSH
4779: LD_INT 5
4781: ST_TO_ADDR
// bc_type = 32 ;
4782: LD_ADDR_OWVAR 42
4786: PUSH
4787: LD_INT 32
4789: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4790: LD_ADDR_VAR 0 2
4794: PUSH
4795: LD_INT 76
4797: PPUSH
4798: LD_INT 91
4800: PPUSH
4801: LD_INT 2
4803: PPUSH
4804: CALL_OW 47
4808: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4809: LD_VAR 0 2
4813: PPUSH
4814: LD_INT 43
4816: PPUSH
4817: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4821: LD_INT 51
4823: PPUSH
4824: LD_INT 3
4826: PPUSH
4827: LD_INT 1
4829: PPUSH
4830: CALL_OW 322
// end ; if Difficulty >= 3 then
4834: LD_OWVAR 67
4838: PUSH
4839: LD_INT 3
4841: GREATEREQUAL
4842: IFFALSE 5006
// begin RuSoldMinLevel = Difficulty ;
4844: LD_ADDR_EXP 16
4848: PUSH
4849: LD_OWVAR 67
4853: ST_TO_ADDR
// RuSoldMaxLevel = 4 ;
4854: LD_ADDR_EXP 17
4858: PUSH
4859: LD_INT 4
4861: ST_TO_ADDR
// RemoveUnit ( rubbrwr0 ) ;
4862: LD_INT 26
4864: PPUSH
4865: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4869: LD_INT 23
4871: PPUSH
4872: CALL_OW 64
// uc_nation = 3 ;
4876: LD_ADDR_OWVAR 21
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// uc_side = 3 ;
4884: LD_ADDR_OWVAR 20
4888: PUSH
4889: LD_INT 3
4891: ST_TO_ADDR
// bc_level = 5 ;
4892: LD_ADDR_OWVAR 43
4896: PUSH
4897: LD_INT 5
4899: ST_TO_ADDR
// bc_type = 32 ;
4900: LD_ADDR_OWVAR 42
4904: PUSH
4905: LD_INT 32
4907: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4908: LD_ADDR_VAR 0 2
4912: PUSH
4913: LD_INT 76
4915: PPUSH
4916: LD_INT 91
4918: PPUSH
4919: LD_INT 2
4921: PPUSH
4922: CALL_OW 47
4926: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4927: LD_VAR 0 2
4931: PPUSH
4932: LD_INT 44
4934: PPUSH
4935: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4939: LD_ADDR_VAR 0 2
4943: PUSH
4944: LD_INT 83
4946: PPUSH
4947: LD_INT 84
4949: PPUSH
4950: LD_INT 2
4952: PPUSH
4953: CALL_OW 47
4957: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4958: LD_VAR 0 2
4962: PPUSH
4963: LD_INT 43
4965: PPUSH
4966: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4970: LD_INT 51
4972: PPUSH
4973: LD_INT 3
4975: PPUSH
4976: LD_INT 1
4978: PPUSH
4979: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4983: LD_INT 52
4985: PPUSH
4986: LD_INT 3
4988: PPUSH
4989: LD_INT 1
4991: PPUSH
4992: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4996: LD_INT 25
4998: PPUSH
4999: LD_INT 44
5001: PPUSH
5002: CALL_OW 431
// end ; end ;
5006: LD_VAR 0 1
5010: RET
// export function EnergyDialog ; begin
5011: LD_INT 0
5013: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
5014: LD_INT 46
5016: PPUSH
5017: LD_INT 1
5019: PPUSH
5020: CALL_OW 321
5024: PUSH
5025: LD_INT 1
5027: EQUAL
5028: PUSH
5029: LD_INT 35
5031: PPUSH
5032: LD_INT 1
5034: PPUSH
5035: CALL_OW 321
5039: PUSH
5040: LD_INT 1
5042: EQUAL
5043: AND
5044: IFFALSE 5068
// begin Say ( JMM , D9c-JMM-1 ) ;
5046: LD_EXP 1
5050: PPUSH
5051: LD_STRING D9c-JMM-1
5053: PPUSH
5054: CALL_OW 88
// energyVDialog = 1 ;
5058: LD_ADDR_EXP 33
5062: PUSH
5063: LD_INT 1
5065: ST_TO_ADDR
// end else
5066: GO 5222
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
5068: LD_INT 35
5070: PPUSH
5071: LD_INT 1
5073: PPUSH
5074: CALL_OW 321
5078: PUSH
5079: LD_INT 2
5081: EQUAL
5082: PUSH
5083: LD_EXP 33
5087: PUSH
5088: LD_INT 0
5090: EQUAL
5091: AND
5092: IFFALSE 5114
// begin Say ( JMM , D9c-JMM-1a ) ;
5094: LD_EXP 1
5098: PPUSH
5099: LD_STRING D9c-JMM-1a
5101: PPUSH
5102: CALL_OW 88
// energyVDialog = 1 ;
5106: LD_ADDR_EXP 33
5110: PUSH
5111: LD_INT 1
5113: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
5114: LD_INT 46
5116: PPUSH
5117: LD_INT 1
5119: PPUSH
5120: CALL_OW 321
5124: PUSH
5125: LD_INT 2
5127: EQUAL
5128: PUSH
5129: LD_EXP 33
5133: PUSH
5134: LD_INT 0
5136: EQUAL
5137: AND
5138: IFFALSE 5160
// begin Say ( JMM , D9c-JMM-1b ) ;
5140: LD_EXP 1
5144: PPUSH
5145: LD_STRING D9c-JMM-1b
5147: PPUSH
5148: CALL_OW 88
// energyVDialog = 1 ;
5152: LD_ADDR_EXP 33
5156: PUSH
5157: LD_INT 1
5159: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
5160: LD_INT 46
5162: PPUSH
5163: LD_INT 1
5165: PPUSH
5166: CALL_OW 321
5170: PUSH
5171: LD_INT 2
5173: EQUAL
5174: PUSH
5175: LD_INT 21
5177: PPUSH
5178: LD_INT 1
5180: PPUSH
5181: CALL_OW 321
5185: PUSH
5186: LD_INT 2
5188: EQUAL
5189: AND
5190: PUSH
5191: LD_EXP 33
5195: PUSH
5196: LD_INT 0
5198: EQUAL
5199: AND
5200: IFFALSE 5222
// begin Say ( JMM , D9c-JMM-1c ) ;
5202: LD_EXP 1
5206: PPUSH
5207: LD_STRING D9c-JMM-1c
5209: PPUSH
5210: CALL_OW 88
// energyVDialog = 1 ;
5214: LD_ADDR_EXP 33
5218: PUSH
5219: LD_INT 1
5221: ST_TO_ADDR
// end ; end ; end ;
5222: LD_VAR 0 1
5226: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
5227: LD_INT 0
5229: PPUSH
5230: PPUSH
5231: PPUSH
5232: PPUSH
5233: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
5234: LD_VAR 0 1
5238: NOT
5239: PUSH
5240: LD_VAR 0 1
5244: PPUSH
5245: CALL_OW 256
5249: PUSH
5250: LD_INT 250
5252: LESS
5253: OR
5254: PUSH
5255: LD_VAR 0 1
5259: PPUSH
5260: CALL_OW 314
5264: PUSH
5265: LD_VAR 0 1
5269: PPUSH
5270: CALL_OW 261
5274: PUSH
5275: LD_INT 20
5277: GREATER
5278: AND
5279: OR
5280: IFFALSE 5284
// exit ;
5282: GO 5649
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5284: LD_VAR 0 1
5288: PPUSH
5289: CALL_OW 261
5293: PUSH
5294: LD_INT 20
5296: LESS
5297: PUSH
5298: LD_VAR 0 1
5302: PPUSH
5303: CALL_OW 110
5307: PUSH
5308: LD_INT 21
5310: EQUAL
5311: NOT
5312: AND
5313: IFFALSE 5340
// begin ComStop ( bulldozer ) ;
5315: LD_VAR 0 1
5319: PPUSH
5320: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5324: LD_VAR 0 1
5328: PPUSH
5329: LD_INT 21
5331: PPUSH
5332: CALL_OW 109
// exit ;
5336: GO 5649
// end else
5338: GO 5367
// if GetFuel ( bulldozer ) > 20 then
5340: LD_VAR 0 1
5344: PPUSH
5345: CALL_OW 261
5349: PUSH
5350: LD_INT 20
5352: GREATER
5353: IFFALSE 5367
// SetTag ( bulldozer , 0 ) ;
5355: LD_VAR 0 1
5359: PPUSH
5360: LD_INT 0
5362: PPUSH
5363: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5367: LD_ADDR_VAR 0 5
5371: PUSH
5372: LD_VAR 0 2
5376: PPUSH
5377: CALL_OW 353
5381: ST_TO_ADDR
// tmp := [ ] ;
5382: LD_ADDR_VAR 0 6
5386: PUSH
5387: EMPTY
5388: ST_TO_ADDR
// for i = 1 to list do
5389: LD_ADDR_VAR 0 4
5393: PUSH
5394: DOUBLE
5395: LD_INT 1
5397: DEC
5398: ST_TO_ADDR
5399: LD_VAR 0 5
5403: PUSH
5404: FOR_TO
5405: IFFALSE 5503
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5407: LD_VAR 0 5
5411: PUSH
5412: LD_VAR 0 4
5416: ARRAY
5417: PUSH
5418: LD_INT 1
5420: ARRAY
5421: PPUSH
5422: LD_VAR 0 5
5426: PUSH
5427: LD_VAR 0 4
5431: ARRAY
5432: PUSH
5433: LD_INT 2
5435: ARRAY
5436: PPUSH
5437: CALL_OW 554
5441: IFFALSE 5501
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5443: LD_ADDR_VAR 0 6
5447: PUSH
5448: LD_VAR 0 6
5452: PPUSH
5453: LD_VAR 0 6
5457: PUSH
5458: LD_INT 1
5460: PLUS
5461: PPUSH
5462: LD_VAR 0 5
5466: PUSH
5467: LD_VAR 0 4
5471: ARRAY
5472: PUSH
5473: LD_INT 1
5475: ARRAY
5476: PUSH
5477: LD_VAR 0 5
5481: PUSH
5482: LD_VAR 0 4
5486: ARRAY
5487: PUSH
5488: LD_INT 2
5490: ARRAY
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PPUSH
5496: CALL_OW 1
5500: ST_TO_ADDR
// end ;
5501: GO 5404
5503: POP
5504: POP
// ComStop ( bulldozer ) ;
5505: LD_VAR 0 1
5509: PPUSH
5510: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5514: LD_ADDR_VAR 0 7
5518: PUSH
5519: LD_VAR 0 1
5523: PPUSH
5524: CALL_OW 250
5528: PUSH
5529: LD_VAR 0 1
5533: PPUSH
5534: CALL_OW 251
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: ST_TO_ADDR
// for i = tmp downto 1 do
5543: LD_ADDR_VAR 0 4
5547: PUSH
5548: DOUBLE
5549: LD_VAR 0 6
5553: INC
5554: ST_TO_ADDR
5555: LD_INT 1
5557: PUSH
5558: FOR_DOWNTO
5559: IFFALSE 5647
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5561: LD_ADDR_VAR 0 7
5565: PUSH
5566: LD_VAR 0 7
5570: PUSH
5571: LD_INT 1
5573: ARRAY
5574: PPUSH
5575: LD_VAR 0 7
5579: PUSH
5580: LD_INT 2
5582: ARRAY
5583: PPUSH
5584: LD_VAR 0 6
5588: PPUSH
5589: CALL 5750 0 3
5593: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5594: LD_VAR 0 1
5598: PPUSH
5599: LD_VAR 0 7
5603: PUSH
5604: LD_INT 1
5606: ARRAY
5607: PPUSH
5608: LD_VAR 0 7
5612: PUSH
5613: LD_INT 2
5615: ARRAY
5616: PPUSH
5617: CALL 5654 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5621: LD_ADDR_VAR 0 6
5625: PUSH
5626: LD_VAR 0 6
5630: PPUSH
5631: LD_VAR 0 7
5635: PUSH
5636: LD_INT 3
5638: ARRAY
5639: PPUSH
5640: CALL_OW 3
5644: ST_TO_ADDR
// end ;
5645: GO 5558
5647: POP
5648: POP
// end ;
5649: LD_VAR 0 3
5653: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5654: LD_INT 0
5656: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5657: LD_VAR 0 2
5661: PPUSH
5662: LD_VAR 0 3
5666: PPUSH
5667: CALL_OW 351
5671: PUSH
5672: LD_VAR 0 2
5676: PPUSH
5677: LD_VAR 0 3
5681: PPUSH
5682: CALL_OW 554
5686: AND
5687: PUSH
5688: LD_VAR 0 2
5692: PPUSH
5693: LD_VAR 0 3
5697: PPUSH
5698: CALL_OW 488
5702: AND
5703: PUSH
5704: LD_VAR 0 2
5708: PPUSH
5709: LD_VAR 0 3
5713: PPUSH
5714: CALL_OW 428
5718: PUSH
5719: LD_INT 1
5721: NEG
5722: EQUAL
5723: AND
5724: IFFALSE 5745
// AddComMoveXY ( bulldozer , x , y ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: LD_VAR 0 3
5740: PPUSH
5741: CALL_OW 171
// end ;
5745: LD_VAR 0 4
5749: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5750: LD_INT 0
5752: PPUSH
5753: PPUSH
5754: PPUSH
5755: PPUSH
5756: PPUSH
5757: PPUSH
5758: PPUSH
// dist := 99999 ;
5759: LD_ADDR_VAR 0 6
5763: PUSH
5764: LD_INT 99999
5766: ST_TO_ADDR
// for i = 1 to list do
5767: LD_ADDR_VAR 0 5
5771: PUSH
5772: DOUBLE
5773: LD_INT 1
5775: DEC
5776: ST_TO_ADDR
5777: LD_VAR 0 3
5781: PUSH
5782: FOR_TO
5783: IFFALSE 5921
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5785: LD_ADDR_VAR 0 7
5789: PUSH
5790: LD_VAR 0 1
5794: PPUSH
5795: LD_VAR 0 2
5799: PPUSH
5800: LD_VAR 0 3
5804: PUSH
5805: LD_VAR 0 5
5809: ARRAY
5810: PUSH
5811: LD_INT 1
5813: ARRAY
5814: PPUSH
5815: LD_VAR 0 3
5819: PUSH
5820: LD_VAR 0 5
5824: ARRAY
5825: PUSH
5826: LD_INT 2
5828: ARRAY
5829: PPUSH
5830: CALL_OW 298
5834: ST_TO_ADDR
// if d = 0 then
5835: LD_VAR 0 7
5839: PUSH
5840: LD_INT 0
5842: EQUAL
5843: IFFALSE 5847
// continue ;
5845: GO 5782
// if d < dist then
5847: LD_VAR 0 7
5851: PUSH
5852: LD_VAR 0 6
5856: LESS
5857: IFFALSE 5919
// begin _x := list [ i ] [ 1 ] ;
5859: LD_ADDR_VAR 0 8
5863: PUSH
5864: LD_VAR 0 3
5868: PUSH
5869: LD_VAR 0 5
5873: ARRAY
5874: PUSH
5875: LD_INT 1
5877: ARRAY
5878: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5879: LD_ADDR_VAR 0 9
5883: PUSH
5884: LD_VAR 0 3
5888: PUSH
5889: LD_VAR 0 5
5893: ARRAY
5894: PUSH
5895: LD_INT 2
5897: ARRAY
5898: ST_TO_ADDR
// _i := i ;
5899: LD_ADDR_VAR 0 10
5903: PUSH
5904: LD_VAR 0 5
5908: ST_TO_ADDR
// dist := d ;
5909: LD_ADDR_VAR 0 6
5913: PUSH
5914: LD_VAR 0 7
5918: ST_TO_ADDR
// end ; end ;
5919: GO 5782
5921: POP
5922: POP
// result := [ _x , _y , _i , dist ] ;
5923: LD_ADDR_VAR 0 4
5927: PUSH
5928: LD_VAR 0 8
5932: PUSH
5933: LD_VAR 0 9
5937: PUSH
5938: LD_VAR 0 10
5942: PUSH
5943: LD_VAR 0 6
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: ST_TO_ADDR
// end ;
5954: LD_VAR 0 4
5958: RET
// export function ResAllTechs ( side , lab , nation ) ; var i ; begin
5959: LD_INT 0
5961: PPUSH
5962: PPUSH
// for i = 1 to 72 do
5963: LD_ADDR_VAR 0 5
5967: PUSH
5968: DOUBLE
5969: LD_INT 1
5971: DEC
5972: ST_TO_ADDR
5973: LD_INT 72
5975: PUSH
5976: FOR_TO
5977: IFFALSE 6031
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) then
5979: LD_VAR 0 5
5983: PPUSH
5984: LD_VAR 0 1
5988: PPUSH
5989: CALL_OW 321
5993: PUSH
5994: LD_INT 1
5996: EQUAL
5997: PUSH
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_VAR 0 3
6007: PPUSH
6008: CALL_OW 482
6012: AND
6013: IFFALSE 6029
// AddComResearch ( lab , i ) ;
6015: LD_VAR 0 2
6019: PPUSH
6020: LD_VAR 0 5
6024: PPUSH
6025: CALL_OW 184
6029: GO 5976
6031: POP
6032: POP
// end ;
6033: LD_VAR 0 4
6037: RET
// export function RepairBuilding ( side , building , area ) ; var buildingsList , i , engineerOkInside , engineerOkOutside ; begin
6038: LD_INT 0
6040: PPUSH
6041: PPUSH
6042: PPUSH
6043: PPUSH
6044: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6045: LD_ADDR_VAR 0 7
6049: PUSH
6050: LD_VAR 0 2
6054: PPUSH
6055: CALL_OW 313
6059: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6060: LD_ADDR_VAR 0 8
6064: PUSH
6065: LD_VAR 0 3
6069: PPUSH
6070: LD_INT 22
6072: PUSH
6073: LD_VAR 0 1
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: LD_INT 25
6084: PUSH
6085: LD_INT 2
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: LD_INT 24
6094: PUSH
6095: LD_INT 750
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: PUSH
6102: LD_INT 3
6104: PUSH
6105: LD_INT 54
6107: PUSH
6108: EMPTY
6109: LIST
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 70
6125: ST_TO_ADDR
// buildingsList = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6126: LD_ADDR_VAR 0 5
6130: PUSH
6131: LD_VAR 0 3
6135: PPUSH
6136: LD_INT 22
6138: PUSH
6139: LD_VAR 0 1
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 21
6150: PUSH
6151: LD_INT 3
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 3
6160: PUSH
6161: LD_INT 24
6163: PUSH
6164: LD_INT 1000
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: PUSH
6180: EMPTY
6181: LIST
6182: PPUSH
6183: CALL_OW 70
6187: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6188: LD_VAR 0 5
6192: NOT
6193: PUSH
6194: LD_INT 22
6196: PUSH
6197: LD_VAR 0 1
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 25
6208: PUSH
6209: LD_INT 2
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 24
6218: PUSH
6219: LD_INT 250
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: PPUSH
6231: CALL_OW 69
6235: NOT
6236: AND
6237: IFFALSE 6241
// exit ;
6239: GO 6337
// if buildingsList and engineerOkInside then
6241: LD_VAR 0 5
6245: PUSH
6246: LD_VAR 0 7
6250: AND
6251: IFFALSE 6277
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6253: LD_VAR 0 7
6257: PPUSH
6258: LD_INT 25
6260: PUSH
6261: LD_INT 2
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PPUSH
6268: CALL_OW 72
6272: PPUSH
6273: CALL_OW 122
// if buildingsList and engineerOkOutside then
6277: LD_VAR 0 5
6281: PUSH
6282: LD_VAR 0 8
6286: AND
6287: IFFALSE 6307
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
6289: LD_VAR 0 8
6293: PPUSH
6294: LD_VAR 0 5
6298: PUSH
6299: LD_INT 1
6301: ARRAY
6302: PPUSH
6303: CALL_OW 130
// if buildingsList = 0 and engineerOkOutside then
6307: LD_VAR 0 5
6311: PUSH
6312: LD_INT 0
6314: EQUAL
6315: PUSH
6316: LD_VAR 0 8
6320: AND
6321: IFFALSE 6337
// ComEnterUnit ( engineerOkOutside , building ) ;
6323: LD_VAR 0 8
6327: PPUSH
6328: LD_VAR 0 2
6332: PPUSH
6333: CALL_OW 120
// end ;
6337: LD_VAR 0 4
6341: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sciList , sciListOutside , damageUnits , unitsToHeal , tmp , rnd ; begin
6342: LD_INT 0
6344: PPUSH
6345: PPUSH
6346: PPUSH
6347: PPUSH
6348: PPUSH
6349: PPUSH
6350: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6351: LD_ADDR_VAR 0 6
6355: PUSH
6356: LD_INT 22
6358: PUSH
6359: LD_VAR 0 1
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: PUSH
6368: LD_INT 25
6370: PUSH
6371: LD_INT 4
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 23
6380: PUSH
6381: LD_INT 2
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 24
6390: PUSH
6391: LD_INT 251
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 69
6408: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6409: LD_ADDR_VAR 0 7
6413: PUSH
6414: LD_VAR 0 3
6418: PPUSH
6419: LD_INT 22
6421: PUSH
6422: LD_VAR 0 1
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 23
6433: PUSH
6434: LD_INT 2
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 25
6443: PUSH
6444: LD_INT 4
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 50
6453: PUSH
6454: EMPTY
6455: LIST
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: PPUSH
6463: CALL_OW 70
6467: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6468: LD_ADDR_VAR 0 8
6472: PUSH
6473: LD_VAR 0 3
6477: PPUSH
6478: LD_INT 22
6480: PUSH
6481: LD_VAR 0 1
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: LD_INT 21
6492: PUSH
6493: LD_INT 1
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 3
6502: PUSH
6503: LD_INT 25
6505: PUSH
6506: LD_INT 3
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: LD_INT 3
6519: PUSH
6520: LD_INT 24
6522: PUSH
6523: LD_INT 750
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: PPUSH
6540: CALL_OW 70
6544: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6545: LD_ADDR_VAR 0 9
6549: PUSH
6550: LD_VAR 0 2
6554: PPUSH
6555: LD_INT 22
6557: PUSH
6558: LD_VAR 0 1
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PUSH
6567: LD_INT 21
6569: PUSH
6570: LD_INT 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: LD_INT 3
6579: PUSH
6580: LD_INT 25
6582: PUSH
6583: LD_INT 3
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 3
6596: PUSH
6597: LD_INT 24
6599: PUSH
6600: LD_INT 1000
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: PPUSH
6617: CALL_OW 70
6621: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sciList then
6622: LD_VAR 0 8
6626: NOT
6627: PUSH
6628: LD_VAR 0 9
6632: NOT
6633: AND
6634: PUSH
6635: LD_VAR 0 6
6639: NOT
6640: AND
6641: IFFALSE 6645
// exit ;
6643: GO 6851
// if damageUnits and sciList then
6645: LD_VAR 0 8
6649: PUSH
6650: LD_VAR 0 6
6654: AND
6655: IFFALSE 6671
// ComMoveToArea ( damageUnits , healArea ) ;
6657: LD_VAR 0 8
6661: PPUSH
6662: LD_VAR 0 2
6666: PPUSH
6667: CALL_OW 113
// if unitsToHeal and sciList then
6671: LD_VAR 0 9
6675: PUSH
6676: LD_VAR 0 6
6680: AND
6681: IFFALSE 6692
// ComExitBuilding ( sciList ) ;
6683: LD_VAR 0 6
6687: PPUSH
6688: CALL_OW 122
// if unitsToHeal and sciListOutside then
6692: LD_VAR 0 9
6696: PUSH
6697: LD_VAR 0 7
6701: AND
6702: IFFALSE 6722
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
6704: LD_VAR 0 7
6708: PPUSH
6709: LD_VAR 0 9
6713: PUSH
6714: LD_INT 1
6716: ARRAY
6717: PPUSH
6718: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
6722: LD_VAR 0 8
6726: PUSH
6727: LD_INT 0
6729: EQUAL
6730: PUSH
6731: LD_VAR 0 9
6735: PUSH
6736: LD_INT 0
6738: EQUAL
6739: AND
6740: PUSH
6741: LD_VAR 0 7
6745: AND
6746: IFFALSE 6851
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6748: LD_ADDR_VAR 0 10
6752: PUSH
6753: LD_INT 22
6755: PUSH
6756: LD_VAR 0 1
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: LD_INT 21
6767: PUSH
6768: LD_INT 3
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PUSH
6775: LD_INT 30
6777: PUSH
6778: LD_INT 8
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: PPUSH
6790: CALL_OW 69
6794: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6795: LD_ADDR_VAR 0 11
6799: PUSH
6800: LD_INT 1
6802: PPUSH
6803: LD_VAR 0 10
6807: PPUSH
6808: CALL_OW 12
6812: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6813: LD_VAR 0 7
6817: PPUSH
6818: LD_INT 3
6820: PUSH
6821: LD_INT 60
6823: PUSH
6824: EMPTY
6825: LIST
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: PPUSH
6831: CALL_OW 72
6835: PPUSH
6836: LD_VAR 0 10
6840: PUSH
6841: LD_VAR 0 11
6845: ARRAY
6846: PPUSH
6847: CALL_OW 120
// end ; end ;
6851: LD_VAR 0 5
6855: RET
// export function BuildVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6856: LD_INT 0
6858: PPUSH
6859: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6860: LD_INT 22
6862: PUSH
6863: LD_VAR 0 1
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: LD_INT 21
6874: PUSH
6875: LD_INT 2
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 69
6890: PUSH
6891: LD_VAR 0 3
6895: LESSEQUAL
6896: IFFALSE 6963
// for i = 1 to vehCount do
6898: LD_ADDR_VAR 0 9
6902: PUSH
6903: DOUBLE
6904: LD_INT 1
6906: DEC
6907: ST_TO_ADDR
6908: LD_VAR 0 3
6912: PUSH
6913: FOR_TO
6914: IFFALSE 6961
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6916: LD_VAR 0 2
6920: PPUSH
6921: LD_VAR 0 7
6925: PPUSH
6926: LD_VAR 0 5
6930: PPUSH
6931: LD_VAR 0 6
6935: PPUSH
6936: LD_VAR 0 4
6940: PUSH
6941: LD_INT 1
6943: PPUSH
6944: LD_VAR 0 4
6948: PPUSH
6949: CALL_OW 12
6953: ARRAY
6954: PPUSH
6955: CALL_OW 185
6959: GO 6913
6961: POP
6962: POP
// end ;
6963: LD_VAR 0 8
6967: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6968: LD_INT 0
6970: PPUSH
6971: PPUSH
6972: PPUSH
6973: PPUSH
6974: PPUSH
6975: PPUSH
6976: PPUSH
6977: PPUSH
6978: PPUSH
6979: PPUSH
6980: PPUSH
// for i = 1 to medicCount do
6981: LD_ADDR_VAR 0 11
6985: PUSH
6986: DOUBLE
6987: LD_INT 1
6989: DEC
6990: ST_TO_ADDR
6991: LD_VAR 0 4
6995: PUSH
6996: FOR_TO
6997: IFFALSE 7079
// begin uc_side = side ;
6999: LD_ADDR_OWVAR 20
7003: PUSH
7004: LD_VAR 0 1
7008: ST_TO_ADDR
// uc_nation = nation ;
7009: LD_ADDR_OWVAR 21
7013: PUSH
7014: LD_VAR 0 2
7018: ST_TO_ADDR
// hc_name =  ;
7019: LD_ADDR_OWVAR 26
7023: PUSH
7024: LD_STRING 
7026: ST_TO_ADDR
// hc_gallery =  ;
7027: LD_ADDR_OWVAR 33
7031: PUSH
7032: LD_STRING 
7034: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7035: LD_INT 0
7037: PPUSH
7038: LD_INT 4
7040: PPUSH
7041: LD_VAR 0 5
7045: PPUSH
7046: CALL_OW 380
// un = CreateHuman ;
7050: LD_ADDR_VAR 0 13
7054: PUSH
7055: CALL_OW 44
7059: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7060: LD_VAR 0 13
7064: PPUSH
7065: LD_VAR 0 6
7069: PPUSH
7070: LD_INT 0
7072: PPUSH
7073: CALL_OW 49
// end ;
7077: GO 6996
7079: POP
7080: POP
// for i = 1 to soldierCount do
7081: LD_ADDR_VAR 0 11
7085: PUSH
7086: DOUBLE
7087: LD_INT 1
7089: DEC
7090: ST_TO_ADDR
7091: LD_VAR 0 3
7095: PUSH
7096: FOR_TO
7097: IFFALSE 7179
// begin uc_side = side ;
7099: LD_ADDR_OWVAR 20
7103: PUSH
7104: LD_VAR 0 1
7108: ST_TO_ADDR
// uc_nation = nation ;
7109: LD_ADDR_OWVAR 21
7113: PUSH
7114: LD_VAR 0 2
7118: ST_TO_ADDR
// hc_name =  ;
7119: LD_ADDR_OWVAR 26
7123: PUSH
7124: LD_STRING 
7126: ST_TO_ADDR
// hc_gallery =  ;
7127: LD_ADDR_OWVAR 33
7131: PUSH
7132: LD_STRING 
7134: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7135: LD_INT 0
7137: PPUSH
7138: LD_INT 1
7140: PPUSH
7141: LD_VAR 0 5
7145: PPUSH
7146: CALL_OW 380
// un = CreateHuman ;
7150: LD_ADDR_VAR 0 13
7154: PUSH
7155: CALL_OW 44
7159: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7160: LD_VAR 0 13
7164: PPUSH
7165: LD_VAR 0 6
7169: PPUSH
7170: LD_INT 0
7172: PPUSH
7173: CALL_OW 49
// end ;
7177: GO 7096
7179: POP
7180: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7181: LD_ADDR_VAR 0 16
7185: PUSH
7186: LD_INT 22
7188: PUSH
7189: LD_VAR 0 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 2
7200: PUSH
7201: LD_INT 25
7203: PUSH
7204: LD_INT 1
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 25
7213: PUSH
7214: LD_INT 5
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 25
7223: PUSH
7224: LD_INT 8
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 25
7233: PUSH
7234: LD_INT 9
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PPUSH
7252: CALL_OW 69
7256: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7257: LD_ADDR_VAR 0 15
7261: PUSH
7262: LD_INT 22
7264: PUSH
7265: LD_VAR 0 1
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: LD_INT 25
7276: PUSH
7277: LD_INT 4
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PPUSH
7288: CALL_OW 69
7292: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7293: LD_VAR 0 15
7297: PPUSH
7298: LD_VAR 0 7
7302: PPUSH
7303: CALL_OW 113
// if strategy = 1 then
7307: LD_VAR 0 9
7311: PUSH
7312: LD_INT 1
7314: EQUAL
7315: IFFALSE 7763
// begin for i in soldiersOK_list do
7317: LD_ADDR_VAR 0 11
7321: PUSH
7322: LD_VAR 0 16
7326: PUSH
7327: FOR_IN
7328: IFFALSE 7392
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7330: LD_VAR 0 11
7334: PPUSH
7335: LD_INT 91
7337: PPUSH
7338: LD_INT 63
7340: PPUSH
7341: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7345: LD_VAR 0 11
7349: PPUSH
7350: LD_INT 101
7352: PPUSH
7353: LD_INT 53
7355: PPUSH
7356: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7360: LD_VAR 0 11
7364: PPUSH
7365: LD_INT 75
7367: PPUSH
7368: LD_INT 23
7370: PPUSH
7371: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7375: LD_VAR 0 11
7379: PPUSH
7380: LD_INT 78
7382: PPUSH
7383: LD_INT 8
7385: PPUSH
7386: CALL_OW 174
// end ;
7390: GO 7327
7392: POP
7393: POP
// wait ( 0 0$30 ) ;
7394: LD_INT 1050
7396: PPUSH
7397: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7401: LD_INT 35
7403: PPUSH
7404: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7408: LD_ADDR_VAR 0 14
7412: PUSH
7413: LD_INT 22
7415: PUSH
7416: LD_VAR 0 1
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: LD_INT 1
7427: PUSH
7428: LD_INT 3
7430: PUSH
7431: LD_INT 24
7433: PUSH
7434: LD_INT 550
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 24
7447: PUSH
7448: LD_INT 250
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PPUSH
7464: CALL_OW 69
7468: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7469: LD_ADDR_VAR 0 16
7473: PUSH
7474: LD_INT 22
7476: PUSH
7477: LD_VAR 0 1
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 25
7488: PUSH
7489: LD_INT 1
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 24
7498: PUSH
7499: LD_INT 1000
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: LIST
7510: PPUSH
7511: CALL_OW 69
7515: ST_TO_ADDR
// if medicCount then
7516: LD_VAR 0 4
7520: IFFALSE 7560
// begin if damageUnit_list then
7522: LD_VAR 0 14
7526: IFFALSE 7560
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7528: LD_VAR 0 14
7532: PPUSH
7533: LD_VAR 0 7
7537: PPUSH
7538: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7542: LD_VAR 0 4
7546: PPUSH
7547: LD_VAR 0 14
7551: PUSH
7552: LD_INT 1
7554: ARRAY
7555: PPUSH
7556: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7560: LD_ADDR_VAR 0 11
7564: PUSH
7565: LD_VAR 0 16
7569: PUSH
7570: FOR_IN
7571: IFFALSE 7747
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7573: LD_ADDR_VAR 0 19
7577: PUSH
7578: LD_INT 22
7580: PUSH
7581: LD_VAR 0 8
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PPUSH
7590: CALL_OW 69
7594: PPUSH
7595: LD_VAR 0 11
7599: PPUSH
7600: CALL_OW 74
7604: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7605: LD_ADDR_VAR 0 20
7609: PUSH
7610: LD_INT 22
7612: PUSH
7613: LD_VAR 0 8
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 2
7624: PUSH
7625: LD_INT 59
7627: PUSH
7628: EMPTY
7629: LIST
7630: PUSH
7631: LD_INT 21
7633: PUSH
7634: LD_INT 1
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: LD_INT 21
7643: PUSH
7644: LD_INT 2
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: EMPTY
7662: LIST
7663: PPUSH
7664: CALL_OW 69
7668: PPUSH
7669: LD_VAR 0 11
7673: PPUSH
7674: CALL_OW 74
7678: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7679: LD_VAR 0 11
7683: PPUSH
7684: LD_VAR 0 19
7688: PPUSH
7689: CALL_OW 296
7693: PUSH
7694: LD_INT 8
7696: PLUS
7697: PUSH
7698: LD_VAR 0 11
7702: PPUSH
7703: LD_VAR 0 20
7707: PPUSH
7708: CALL_OW 296
7712: LESS
7713: IFFALSE 7731
// ComAttackUnit ( i , target1 ) else
7715: LD_VAR 0 11
7719: PPUSH
7720: LD_VAR 0 19
7724: PPUSH
7725: CALL_OW 115
7729: GO 7745
// ComAttackUnit ( i , target2 ) ;
7731: LD_VAR 0 11
7735: PPUSH
7736: LD_VAR 0 20
7740: PPUSH
7741: CALL_OW 115
// end ;
7745: GO 7570
7747: POP
7748: POP
// until not soldiersOK_list and not damageUnit_list ;
7749: LD_VAR 0 16
7753: NOT
7754: PUSH
7755: LD_VAR 0 14
7759: NOT
7760: AND
7761: IFFALSE 7401
// end ; if strategy = 2 then
7763: LD_VAR 0 9
7767: PUSH
7768: LD_INT 2
7770: EQUAL
7771: IFFALSE 8189
// begin for i in soldiersOK_list do
7773: LD_ADDR_VAR 0 11
7777: PUSH
7778: LD_VAR 0 16
7782: PUSH
7783: FOR_IN
7784: IFFALSE 7818
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7786: LD_VAR 0 11
7790: PPUSH
7791: LD_INT 91
7793: PPUSH
7794: LD_INT 63
7796: PPUSH
7797: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7801: LD_VAR 0 11
7805: PPUSH
7806: LD_INT 75
7808: PPUSH
7809: LD_INT 33
7811: PPUSH
7812: CALL_OW 174
// end ;
7816: GO 7783
7818: POP
7819: POP
// wait ( 0 0$10 ) ;
7820: LD_INT 350
7822: PPUSH
7823: CALL_OW 67
// repeat wait ( 0 0$3 ) ;
7827: LD_INT 105
7829: PPUSH
7830: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7834: LD_ADDR_VAR 0 14
7838: PUSH
7839: LD_INT 22
7841: PUSH
7842: LD_VAR 0 1
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: LD_INT 1
7853: PUSH
7854: LD_INT 3
7856: PUSH
7857: LD_INT 24
7859: PUSH
7860: LD_INT 550
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: PUSH
7871: LD_INT 24
7873: PUSH
7874: LD_INT 250
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: LIST
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PPUSH
7890: CALL_OW 69
7894: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_lives , 1000 ] ] ) ;
7895: LD_ADDR_VAR 0 16
7899: PUSH
7900: LD_INT 22
7902: PUSH
7903: LD_VAR 0 1
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 25
7914: PUSH
7915: LD_INT 1
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 24
7924: PUSH
7925: LD_INT 1000
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: PPUSH
7937: CALL_OW 69
7941: ST_TO_ADDR
// if medicCount then
7942: LD_VAR 0 4
7946: IFFALSE 7986
// begin if damageUnit_list then
7948: LD_VAR 0 14
7952: IFFALSE 7986
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
7954: LD_VAR 0 14
7958: PPUSH
7959: LD_VAR 0 7
7963: PPUSH
7964: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
7968: LD_VAR 0 4
7972: PPUSH
7973: LD_VAR 0 14
7977: PUSH
7978: LD_INT 1
7980: ARRAY
7981: PPUSH
7982: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
7986: LD_ADDR_VAR 0 11
7990: PUSH
7991: LD_VAR 0 16
7995: PUSH
7996: FOR_IN
7997: IFFALSE 8173
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7999: LD_ADDR_VAR 0 19
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 8
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PPUSH
8016: CALL_OW 69
8020: PPUSH
8021: LD_VAR 0 11
8025: PPUSH
8026: CALL_OW 74
8030: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8031: LD_ADDR_VAR 0 20
8035: PUSH
8036: LD_INT 22
8038: PUSH
8039: LD_VAR 0 8
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 2
8050: PUSH
8051: LD_INT 59
8053: PUSH
8054: EMPTY
8055: LIST
8056: PUSH
8057: LD_INT 21
8059: PUSH
8060: LD_INT 1
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 21
8069: PUSH
8070: LD_INT 2
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: EMPTY
8088: LIST
8089: PPUSH
8090: CALL_OW 69
8094: PPUSH
8095: LD_VAR 0 11
8099: PPUSH
8100: CALL_OW 74
8104: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8105: LD_VAR 0 11
8109: PPUSH
8110: LD_VAR 0 19
8114: PPUSH
8115: CALL_OW 296
8119: PUSH
8120: LD_INT 8
8122: PLUS
8123: PUSH
8124: LD_VAR 0 11
8128: PPUSH
8129: LD_VAR 0 20
8133: PPUSH
8134: CALL_OW 296
8138: LESS
8139: IFFALSE 8157
// ComAttackUnit ( i , target1 ) else
8141: LD_VAR 0 11
8145: PPUSH
8146: LD_VAR 0 19
8150: PPUSH
8151: CALL_OW 115
8155: GO 8171
// ComAttackUnit ( i , target2 ) ;
8157: LD_VAR 0 11
8161: PPUSH
8162: LD_VAR 0 20
8166: PPUSH
8167: CALL_OW 115
// end ;
8171: GO 7996
8173: POP
8174: POP
// until not soldiersOK_list and not damageUnit_list ;
8175: LD_VAR 0 16
8179: NOT
8180: PUSH
8181: LD_VAR 0 14
8185: NOT
8186: AND
8187: IFFALSE 7827
// end ; if medic_list then
8189: LD_VAR 0 15
8193: IFFALSE 8333
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8195: LD_ADDR_VAR 0 15
8199: PUSH
8200: LD_INT 22
8202: PUSH
8203: LD_VAR 0 1
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 25
8214: PUSH
8215: LD_INT 4
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 50
8224: PUSH
8225: EMPTY
8226: LIST
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: LIST
8232: PPUSH
8233: CALL_OW 69
8237: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8238: LD_INT 35
8240: PPUSH
8241: CALL_OW 67
// for i in medic_list do
8245: LD_ADDR_VAR 0 11
8249: PUSH
8250: LD_VAR 0 15
8254: PUSH
8255: FOR_IN
8256: IFFALSE 8324
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
8258: LD_VAR 0 11
8262: PPUSH
8263: CALL_OW 314
8267: NOT
8268: PUSH
8269: LD_VAR 0 11
8273: PPUSH
8274: LD_INT 4
8276: PPUSH
8277: CALL_OW 308
8281: NOT
8282: AND
8283: IFFALSE 8299
// ComMoveToArea ( i , RussianAttack ) else
8285: LD_VAR 0 11
8289: PPUSH
8290: LD_INT 4
8292: PPUSH
8293: CALL_OW 113
8297: GO 8322
// if IsInArea ( i , RussianAttack ) then
8299: LD_VAR 0 11
8303: PPUSH
8304: LD_INT 4
8306: PPUSH
8307: CALL_OW 308
8311: IFFALSE 8322
// RemoveUnit ( i ) ;
8313: LD_VAR 0 11
8317: PPUSH
8318: CALL_OW 64
8322: GO 8255
8324: POP
8325: POP
// until not medic_list ;
8326: LD_VAR 0 15
8330: NOT
8331: IFFALSE 8195
// end ; end ; end_of_file
8333: LD_VAR 0 10
8337: RET
// export function Action ; var i , gammaSquad , startX , startY ; begin
8338: LD_INT 0
8340: PPUSH
8341: PPUSH
8342: PPUSH
8343: PPUSH
8344: PPUSH
// InGameOn ;
8345: CALL_OW 8
// gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
8349: LD_ADDR_VAR 0 3
8353: PUSH
8354: LD_EXP 8
8358: PUSH
8359: LD_EXP 9
8363: PUSH
8364: LD_EXP 10
8368: PUSH
8369: LD_EXP 11
8373: PUSH
8374: LD_EXP 12
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
8386: LD_ADDR_VAR 0 4
8390: PUSH
8391: LD_INT 46
8393: PUSH
8394: LD_INT 45
8396: PUSH
8397: LD_INT 44
8399: PUSH
8400: LD_INT 43
8402: PUSH
8403: LD_INT 42
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
8413: LD_ADDR_VAR 0 5
8417: PUSH
8418: LD_INT 14
8420: PUSH
8421: LD_INT 12
8423: PUSH
8424: LD_INT 10
8426: PUSH
8427: LD_INT 8
8429: PUSH
8430: LD_INT 6
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: ST_TO_ADDR
// ComBuild ( Claptopn , b_breastwork , 59 , 19 , 5 ) ;
8440: LD_EXP 11
8444: PPUSH
8445: LD_INT 31
8447: PPUSH
8448: LD_INT 59
8450: PPUSH
8451: LD_INT 19
8453: PPUSH
8454: LD_INT 5
8456: PPUSH
8457: CALL_OW 145
// CenterNowOnUnits ( amvj ) ;
8461: LD_INT 32
8463: PPUSH
8464: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
8468: LD_INT 32
8470: PPUSH
8471: LD_INT 51
8473: PPUSH
8474: LD_INT 26
8476: PPUSH
8477: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
8481: LD_INT 32
8483: PPUSH
8484: LD_INT 53
8486: PPUSH
8487: LD_INT 23
8489: PPUSH
8490: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
8494: LD_INT 32
8496: PPUSH
8497: LD_INT 52
8499: PPUSH
8500: LD_INT 19
8502: PPUSH
8503: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8507: LD_INT 35
8509: PPUSH
8510: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
8514: LD_INT 32
8516: PPUSH
8517: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
8521: LD_INT 32
8523: PPUSH
8524: CALL_OW 250
8528: PUSH
8529: LD_INT 52
8531: EQUAL
8532: PUSH
8533: LD_INT 32
8535: PPUSH
8536: CALL_OW 251
8540: PUSH
8541: LD_INT 19
8543: EQUAL
8544: AND
8545: IFFALSE 8507
// ComExitVehicle ( JMM ) ;
8547: LD_EXP 1
8551: PPUSH
8552: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
8556: LD_EXP 7
8560: PPUSH
8561: LD_EXP 1
8565: PPUSH
8566: CALL_OW 119
// wait ( 0 0$01 ) ;
8570: LD_INT 35
8572: PPUSH
8573: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
8577: LD_EXP 1
8581: PPUSH
8582: LD_INT 46
8584: PPUSH
8585: LD_INT 10
8587: PPUSH
8588: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
8592: LD_EXP 1
8596: PPUSH
8597: LD_EXP 7
8601: PPUSH
8602: CALL_OW 179
// wait ( 0 0$4 ) ;
8606: LD_INT 140
8608: PPUSH
8609: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
8613: LD_EXP 1
8617: PPUSH
8618: LD_STRING D1-JMM-1
8620: PPUSH
8621: CALL_OW 88
// if not dialogue_skipped then
8625: LD_OWVAR 59
8629: NOT
8630: IFFALSE 9287
// begin for i := 1 to gammaSquad do
8632: LD_ADDR_VAR 0 2
8636: PUSH
8637: DOUBLE
8638: LD_INT 1
8640: DEC
8641: ST_TO_ADDR
8642: LD_VAR 0 3
8646: PUSH
8647: FOR_TO
8648: IFFALSE 8709
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
8650: LD_VAR 0 3
8654: PUSH
8655: LD_VAR 0 2
8659: ARRAY
8660: PPUSH
8661: LD_VAR 0 4
8665: PUSH
8666: LD_VAR 0 2
8670: ARRAY
8671: PPUSH
8672: LD_VAR 0 5
8676: PUSH
8677: LD_VAR 0 2
8681: ARRAY
8682: PPUSH
8683: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
8687: LD_VAR 0 3
8691: PUSH
8692: LD_VAR 0 2
8696: ARRAY
8697: PPUSH
8698: LD_EXP 1
8702: PPUSH
8703: CALL_OW 179
// end ;
8707: GO 8647
8709: POP
8710: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
8711: LD_EXP 4
8715: PPUSH
8716: LD_INT 41
8718: PPUSH
8719: LD_INT 4
8721: PPUSH
8722: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
8726: LD_EXP 4
8730: PPUSH
8731: LD_EXP 1
8735: PPUSH
8736: CALL_OW 179
// if Lisa = false and Bobby then
8740: LD_EXP 4
8744: PUSH
8745: LD_INT 0
8747: EQUAL
8748: PUSH
8749: LD_EXP 2
8753: AND
8754: IFFALSE 8785
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
8756: LD_EXP 2
8760: PPUSH
8761: LD_INT 41
8763: PPUSH
8764: LD_INT 4
8766: PPUSH
8767: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
8771: LD_EXP 2
8775: PPUSH
8776: LD_EXP 1
8780: PPUSH
8781: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
8785: LD_EXP 4
8789: PUSH
8790: LD_INT 0
8792: EQUAL
8793: PUSH
8794: LD_EXP 2
8798: PUSH
8799: LD_INT 0
8801: EQUAL
8802: AND
8803: PUSH
8804: LD_EXP 3
8808: AND
8809: IFFALSE 8840
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
8811: LD_EXP 3
8815: PPUSH
8816: LD_INT 41
8818: PPUSH
8819: LD_INT 4
8821: PPUSH
8822: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
8826: LD_EXP 3
8830: PPUSH
8831: LD_EXP 1
8835: PPUSH
8836: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
8840: LD_EXP 4
8844: PUSH
8845: LD_INT 0
8847: EQUAL
8848: PUSH
8849: LD_EXP 2
8853: PUSH
8854: LD_INT 0
8856: EQUAL
8857: AND
8858: PUSH
8859: LD_EXP 3
8863: PUSH
8864: LD_INT 0
8866: EQUAL
8867: AND
8868: IFFALSE 8899
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
8870: LD_EXP 6
8874: PPUSH
8875: LD_INT 41
8877: PPUSH
8878: LD_INT 4
8880: PPUSH
8881: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
8885: LD_EXP 6
8889: PPUSH
8890: LD_EXP 1
8894: PPUSH
8895: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
8899: LD_EXP 7
8903: PPUSH
8904: LD_STRING D1-Brown-1
8906: PPUSH
8907: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
8911: LD_EXP 1
8915: PPUSH
8916: LD_STRING D1-JMM-2
8918: PPUSH
8919: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
8923: LD_EXP 7
8927: PPUSH
8928: LD_STRING D1-Brown-2
8930: PPUSH
8931: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
8935: LD_EXP 1
8939: PPUSH
8940: LD_EXP 9
8944: PPUSH
8945: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
8949: LD_EXP 9
8953: PPUSH
8954: LD_STRING D1-FSol1-2
8956: PPUSH
8957: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
8961: LD_EXP 1
8965: PPUSH
8966: LD_EXP 8
8970: PPUSH
8971: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
8975: LD_EXP 8
8979: PPUSH
8980: LD_STRING D1-Sol2-2
8982: PPUSH
8983: CALL_OW 88
// if Lisa then
8987: LD_EXP 4
8991: IFFALSE 9031
// begin ComTurnUnit ( JMM , Lisa ) ;
8993: LD_EXP 1
8997: PPUSH
8998: LD_EXP 4
9002: PPUSH
9003: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
9007: LD_EXP 4
9011: PPUSH
9012: LD_STRING D1-Lisa-2
9014: PPUSH
9015: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9019: LD_EXP 1
9023: PPUSH
9024: LD_STRING D1-JMM-3
9026: PPUSH
9027: CALL_OW 88
// end ; if Bobby then
9031: LD_EXP 2
9035: IFFALSE 9075
// begin ComTurnUnit ( JMM , Bobby ) ;
9037: LD_EXP 1
9041: PPUSH
9042: LD_EXP 2
9046: PPUSH
9047: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
9051: LD_EXP 2
9055: PPUSH
9056: LD_STRING D1-Bobby-2
9058: PPUSH
9059: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9063: LD_EXP 1
9067: PPUSH
9068: LD_STRING D1-JMM-3
9070: PPUSH
9071: CALL_OW 88
// end ; if Cyrus then
9075: LD_EXP 3
9079: IFFALSE 9119
// begin ComTurnUnit ( JMM , Cyrus ) ;
9081: LD_EXP 1
9085: PPUSH
9086: LD_EXP 3
9090: PPUSH
9091: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
9095: LD_EXP 3
9099: PPUSH
9100: LD_STRING D1-Cyrus-2
9102: PPUSH
9103: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9107: LD_EXP 1
9111: PPUSH
9112: LD_STRING D1-JMM-3
9114: PPUSH
9115: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
9119: LD_EXP 1
9123: PPUSH
9124: LD_EXP 7
9128: PPUSH
9129: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
9133: LD_EXP 1
9137: PPUSH
9138: LD_STRING D1-JMM-3a
9140: PPUSH
9141: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
9145: LD_EXP 7
9149: PPUSH
9150: LD_INT 38
9152: PPUSH
9153: LD_INT 5
9155: PPUSH
9156: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
9160: LD_EXP 7
9164: PPUSH
9165: LD_EXP 1
9169: PPUSH
9170: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
9174: LD_EXP 1
9178: PPUSH
9179: LD_INT 40
9181: PPUSH
9182: LD_INT 7
9184: PPUSH
9185: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
9189: LD_EXP 1
9193: PPUSH
9194: LD_EXP 7
9198: PPUSH
9199: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
9203: LD_EXP 7
9207: PPUSH
9208: LD_STRING D1-Brown-3
9210: PPUSH
9211: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
9215: LD_EXP 14
9219: PPUSH
9220: LD_STRING D1-Har-3
9222: PPUSH
9223: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
9227: LD_EXP 1
9231: PPUSH
9232: LD_STRING D1-JMM-4
9234: PPUSH
9235: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
9239: LD_EXP 14
9243: PPUSH
9244: LD_STRING D1-Har-4
9246: PPUSH
9247: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
9251: LD_EXP 1
9255: PPUSH
9256: LD_STRING D1-JMM-5
9258: PPUSH
9259: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
9263: LD_EXP 14
9267: PPUSH
9268: LD_STRING D1-Har-5
9270: PPUSH
9271: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
9275: LD_EXP 1
9279: PPUSH
9280: LD_STRING D1-JMM-6
9282: PPUSH
9283: CALL_OW 88
// end ; InGameOff ;
9287: CALL_OW 9
// PrepareRussianConvoy ;
9291: CALL 3404 0 0
// ChangeMissionObjectives ( M1 ) ;
9295: LD_STRING M1
9297: PPUSH
9298: CALL_OW 337
// SaveForQuickRestart ;
9302: CALL_OW 22
// timerStatus = 1 ;
9306: LD_ADDR_EXP 29
9310: PUSH
9311: LD_INT 1
9313: ST_TO_ADDR
// startTimer = 1 ;
9314: LD_ADDR_EXP 30
9318: PUSH
9319: LD_INT 1
9321: ST_TO_ADDR
// bonusAvalaible = 1 ;
9322: LD_ADDR_EXP 44
9326: PUSH
9327: LD_INT 1
9329: ST_TO_ADDR
// wait ( 0 0$3 ) ;
9330: LD_INT 105
9332: PPUSH
9333: CALL_OW 67
// DialogueOn ;
9337: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
9341: LD_EXP 12
9345: PPUSH
9346: LD_STRING D9-Mech1-1
9348: PPUSH
9349: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
9353: LD_EXP 1
9357: PPUSH
9358: LD_STRING D9-JMM-1
9360: PPUSH
9361: CALL_OW 88
// DialogueOff ;
9365: CALL_OW 7
// end ;
9369: LD_VAR 0 1
9373: RET
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and not factoryDialog and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
9374: LD_INT 47
9376: PPUSH
9377: LD_INT 1
9379: PPUSH
9380: CALL_OW 321
9384: PUSH
9385: LD_INT 2
9387: EQUAL
9388: PUSH
9389: LD_EXP 31
9393: NOT
9394: AND
9395: PUSH
9396: LD_INT 22
9398: PUSH
9399: LD_INT 1
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 21
9408: PUSH
9409: LD_INT 3
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 30
9418: PUSH
9419: LD_INT 3
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 57
9428: PUSH
9429: EMPTY
9430: LIST
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: PPUSH
9438: CALL_OW 69
9442: AND
9443: IFFALSE 9677
9445: GO 9447
9447: DISABLE
// begin factoryDialog := true ;
9448: LD_ADDR_EXP 31
9452: PUSH
9453: LD_INT 1
9455: ST_TO_ADDR
// if IsOk ( Campell ) then
9456: LD_EXP 12
9460: PPUSH
9461: CALL_OW 302
9465: IFFALSE 9481
// Say ( Campell , D10-Mech1-1 ) else
9467: LD_EXP 12
9471: PPUSH
9472: LD_STRING D10-Mech1-1
9474: PPUSH
9475: CALL_OW 88
9479: GO 9677
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9481: LD_INT 22
9483: PUSH
9484: LD_INT 1
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 21
9493: PUSH
9494: LD_INT 1
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 25
9503: PUSH
9504: LD_INT 3
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 26
9513: PUSH
9514: LD_INT 1
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: PPUSH
9527: CALL_OW 69
9531: PUSH
9532: LD_EXP 1
9536: PUSH
9537: EMPTY
9538: LIST
9539: DIFF
9540: IFFALSE 9614
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) else
9542: LD_INT 22
9544: PUSH
9545: LD_INT 1
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 21
9554: PUSH
9555: LD_INT 1
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 25
9564: PUSH
9565: LD_INT 3
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 26
9574: PUSH
9575: LD_INT 1
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: PPUSH
9588: CALL_OW 69
9592: PUSH
9593: LD_EXP 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: DIFF
9601: PPUSH
9602: LD_STRING D10-Mech1-1
9604: PPUSH
9605: LD_STRING D10-Mech1-1
9607: PPUSH
9608: CALL 4606 0 3
9612: GO 9677
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
9614: LD_INT 22
9616: PUSH
9617: LD_INT 1
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 21
9626: PUSH
9627: LD_INT 1
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: LD_INT 26
9636: PUSH
9637: LD_INT 1
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: LIST
9648: PUSH
9649: LD_INT 1
9651: ARRAY
9652: PPUSH
9653: CALL_OW 69
9657: PUSH
9658: LD_EXP 1
9662: PUSH
9663: EMPTY
9664: LIST
9665: DIFF
9666: PPUSH
9667: LD_STRING D10-Mech1-1
9669: PPUSH
9670: LD_STRING D10-Mech1-1
9672: PPUSH
9673: CALL 4606 0 3
// end ; end ;
9677: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and bunkerDialog = 0 do
9678: LD_INT 22
9680: PUSH
9681: LD_INT 1
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: LD_INT 30
9690: PUSH
9691: LD_INT 32
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PPUSH
9702: CALL_OW 69
9706: PUSH
9707: LD_EXP 32
9711: PUSH
9712: LD_INT 0
9714: EQUAL
9715: AND
9716: IFFALSE 9952
9718: GO 9720
9720: DISABLE
// begin if IsOk ( Claptopn ) then
9721: LD_EXP 11
9725: PPUSH
9726: CALL_OW 302
9730: IFFALSE 9746
// Say ( Claptopn , D9b-Eng1-1 ) else
9732: LD_EXP 11
9736: PPUSH
9737: LD_STRING D9b-Eng1-1
9739: PPUSH
9740: CALL_OW 88
9744: GO 9938
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] then
9746: LD_INT 22
9748: PUSH
9749: LD_INT 1
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 21
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 25
9768: PUSH
9769: LD_INT 3
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 26
9778: PUSH
9779: LD_INT 1
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: PPUSH
9792: CALL_OW 69
9796: PUSH
9797: LD_EXP 1
9801: PUSH
9802: EMPTY
9803: LIST
9804: DIFF
9805: IFFALSE 9879
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) else
9807: LD_INT 22
9809: PUSH
9810: LD_INT 1
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 21
9819: PUSH
9820: LD_INT 1
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 25
9829: PUSH
9830: LD_INT 2
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 26
9839: PUSH
9840: LD_INT 1
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: PPUSH
9853: CALL_OW 69
9857: PUSH
9858: LD_EXP 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: DIFF
9866: PPUSH
9867: LD_STRING D9b-Eng1-1
9869: PPUSH
9870: LD_STRING D9b-Eng1-11
9872: PPUSH
9873: CALL 4606 0 3
9877: GO 9938
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
9879: LD_INT 22
9881: PUSH
9882: LD_INT 1
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 21
9891: PUSH
9892: LD_INT 1
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: LD_INT 26
9901: PUSH
9902: LD_INT 1
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: LIST
9913: PPUSH
9914: CALL_OW 69
9918: PUSH
9919: LD_EXP 1
9923: PUSH
9924: EMPTY
9925: LIST
9926: DIFF
9927: PPUSH
9928: LD_STRING D9b-Eng1-1
9930: PPUSH
9931: LD_STRING D9b-Eng1-1
9933: PPUSH
9934: CALL 4606 0 3
// end ; if energyVDialog = 0 then
9938: LD_EXP 33
9942: PUSH
9943: LD_INT 0
9945: EQUAL
9946: IFFALSE 9952
// EnergyDialog ;
9948: CALL 5011 0 0
// end ;
9952: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
9953: LD_EXP 34
9957: PUSH
9958: LD_INT 1
9960: EQUAL
9961: PUSH
9962: LD_EXP 35
9966: PUSH
9967: LD_INT 1
9969: EQUAL
9970: AND
9971: IFFALSE 9983
9973: GO 9975
9975: DISABLE
// ChangeMissionObjectives ( M1a ) ;
9976: LD_STRING M1a
9978: PPUSH
9979: CALL_OW 337
9983: END
// every 3 3$0 do
9984: GO 9986
9986: DISABLE
// PrepareFirstAttack ;
9987: CALL 4212 0 0
9991: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
9992: LD_INT 22
9994: PUSH
9995: LD_INT 5
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 21
10004: PUSH
10005: LD_INT 1
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: LD_INT 24
10017: PUSH
10018: LD_INT 250
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: LIST
10033: PPUSH
10034: CALL_OW 69
10038: PUSH
10039: LD_INT 0
10041: GREATER
10042: PUSH
10043: LD_EXP 23
10047: PUSH
10048: LD_INT 1
10050: EQUAL
10051: AND
10052: IFFALSE 10353
10054: GO 10056
10056: DISABLE
10057: LD_INT 0
10059: PPUSH
// begin firstRussianAttack = 2 ;
10060: LD_ADDR_EXP 23
10064: PUSH
10065: LD_INT 2
10067: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
10068: LD_INT 22
10070: PUSH
10071: LD_INT 5
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: LD_INT 21
10080: PUSH
10081: LD_INT 1
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: PPUSH
10092: CALL_OW 69
10096: PPUSH
10097: LD_INT 125
10099: PPUSH
10100: LD_INT 98
10102: PPUSH
10103: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
10107: LD_INT 22
10109: PUSH
10110: LD_INT 1
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: LD_INT 21
10119: PUSH
10120: LD_INT 1
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PPUSH
10131: CALL_OW 69
10135: PUSH
10136: LD_EXP 1
10140: PUSH
10141: LD_EXP 7
10145: PUSH
10146: LD_EXP 4
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: DIFF
10156: PPUSH
10157: LD_STRING DAtt1-Sol1-1
10159: PPUSH
10160: LD_STRING DAtt1-FSol1-1
10162: PPUSH
10163: CALL 4606 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
10167: LD_EXP 1
10171: PPUSH
10172: LD_STRING DAtt1-JMM-1
10174: PPUSH
10175: CALL_OW 88
// if Lisa then
10179: LD_EXP 4
10183: IFFALSE 10199
// Say ( Lisa , DAtt1a-Lisa-1 ) else
10185: LD_EXP 4
10189: PPUSH
10190: LD_STRING DAtt1a-Lisa-1
10192: PPUSH
10193: CALL_OW 88
10197: GO 10270
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
10199: LD_INT 22
10201: PUSH
10202: LD_INT 1
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 21
10211: PUSH
10212: LD_INT 1
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 26
10221: PUSH
10222: LD_INT 1
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: PPUSH
10234: CALL_OW 69
10238: PUSH
10239: LD_EXP 1
10243: PUSH
10244: LD_EXP 7
10248: PUSH
10249: LD_EXP 4
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: LIST
10258: DIFF
10259: PPUSH
10260: LD_STRING DAtt1a-Sol1-1
10262: PPUSH
10263: LD_STRING DAtt1-FSol1-1
10265: PPUSH
10266: CALL 4606 0 3
// Say ( JMM , DAtt1a-JMM-1 ) ;
10270: LD_EXP 1
10274: PPUSH
10275: LD_STRING DAtt1a-JMM-1
10277: PPUSH
10278: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
10282: LD_INT 22
10284: PUSH
10285: LD_INT 1
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 21
10294: PUSH
10295: LD_INT 1
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 26
10304: PUSH
10305: LD_INT 1
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: LIST
10316: PPUSH
10317: CALL_OW 69
10321: PUSH
10322: LD_EXP 1
10326: PUSH
10327: LD_EXP 7
10331: PUSH
10332: LD_EXP 4
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: LIST
10341: DIFF
10342: PPUSH
10343: LD_STRING DAtt1b-Sol1-1
10345: PPUSH
10346: LD_STRING DAtt1a-Sol1-1
10348: PPUSH
10349: CALL 4606 0 3
// end ;
10353: PPOPN 1
10355: END
// every 0 0$1 trigger firstRussianAttack = 2 and FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do var i ;
10356: LD_EXP 23
10360: PUSH
10361: LD_INT 2
10363: EQUAL
10364: PUSH
10365: LD_INT 5
10367: PPUSH
10368: LD_INT 22
10370: PUSH
10371: LD_INT 5
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 21
10380: PUSH
10381: LD_INT 1
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PPUSH
10392: CALL_OW 70
10396: AND
10397: IFFALSE 10455
10399: GO 10401
10401: DISABLE
10402: LD_INT 0
10404: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
10405: LD_ADDR_VAR 0 1
10409: PUSH
10410: LD_INT 22
10412: PUSH
10413: LD_INT 5
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: LD_INT 21
10422: PUSH
10423: LD_INT 1
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 69
10438: PUSH
10439: FOR_IN
10440: IFFALSE 10453
// RemoveUnit ( i ) ;
10442: LD_VAR 0 1
10446: PPUSH
10447: CALL_OW 64
10451: GO 10439
10453: POP
10454: POP
// end ;
10455: PPOPN 1
10457: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
10458: LD_INT 22
10460: PUSH
10461: LD_INT 5
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: PPUSH
10471: CALL_OW 69
10475: PUSH
10476: LD_INT 0
10478: EQUAL
10479: PUSH
10480: LD_EXP 23
10484: PUSH
10485: LD_INT 2
10487: EQUAL
10488: AND
10489: IFFALSE 10502
10491: GO 10493
10493: DISABLE
// firstRussianAttack = 3 ;
10494: LD_ADDR_EXP 23
10498: PUSH
10499: LD_INT 3
10501: ST_TO_ADDR
10502: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
10503: LD_EXP 28
10507: PUSH
10508: LD_INT 0
10510: EQUAL
10511: IFFALSE 10592
10513: GO 10515
10515: DISABLE
// begin timerStatus = 4 ;
10516: LD_ADDR_EXP 29
10520: PUSH
10521: LD_INT 4
10523: ST_TO_ADDR
// DialogueOn ;
10524: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
10528: LD_EXP 13
10532: PPUSH
10533: LD_STRING D2-Don-1
10535: PPUSH
10536: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
10540: LD_EXP 1
10544: PPUSH
10545: LD_STRING D2-JMM-1
10547: PPUSH
10548: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
10552: LD_EXP 13
10556: PPUSH
10557: LD_STRING D2-Don-2
10559: PPUSH
10560: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10564: LD_EXP 1
10568: PPUSH
10569: LD_STRING D2-JMM-2
10571: PPUSH
10572: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
10576: LD_EXP 13
10580: PPUSH
10581: LD_STRING D2-Don-3
10583: PPUSH
10584: CALL_OW 94
// DialogueOff ;
10588: CALL_OW 7
// end ;
10592: END
// every 12 12$0 do var tmp ;
10593: GO 10595
10595: DISABLE
10596: LD_INT 0
10598: PPUSH
// begin PrepareDonaldsonArmy ;
10599: CALL 1187 0 0
// CenterNowOnUnits ( Donaldson ) ;
10603: LD_EXP 13
10607: PPUSH
10608: CALL_OW 87
// if not FilterAllUnits ( [ f_side , 6 ] ) then
10612: LD_INT 22
10614: PUSH
10615: LD_INT 6
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PPUSH
10622: CALL_OW 69
10626: NOT
10627: IFFALSE 10643
// begin wait ( 3 ) ;
10629: LD_INT 3
10631: PPUSH
10632: CALL_OW 67
// SetAchievement ( ACH_BASE ) ;
10636: LD_STRING ACH_BASE
10638: PPUSH
10639: CALL_OW 543
// end ; tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
10643: LD_ADDR_VAR 0 1
10647: PUSH
10648: LD_INT 22
10650: PUSH
10651: LD_INT 4
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 21
10660: PUSH
10661: LD_INT 1
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 26
10670: PUSH
10671: LD_INT 1
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 25
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: PPUSH
10694: CALL_OW 69
10698: PUSH
10699: LD_EXP 5
10703: PUSH
10704: EMPTY
10705: LIST
10706: DIFF
10707: ST_TO_ADDR
// DialogueOn ;
10708: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
10712: LD_VAR 0 1
10716: PPUSH
10717: LD_STRING D3-Sol1-1
10719: PPUSH
10720: LD_STRING D3-Sol1-1
10722: PPUSH
10723: CALL 4606 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
10727: LD_INT 22
10729: PUSH
10730: LD_INT 4
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 21
10739: PUSH
10740: LD_INT 1
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 26
10749: PUSH
10750: LD_INT 1
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 25
10759: PUSH
10760: LD_INT 3
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: PPUSH
10773: CALL_OW 69
10777: PPUSH
10778: LD_STRING D3-Sol2-1
10780: PPUSH
10781: LD_STRING D3-Sol2-1
10783: PPUSH
10784: CALL 4606 0 3
// if Frank then
10788: LD_EXP 5
10792: IFFALSE 10806
// Say ( Frank , D3-Frank-1 ) ;
10794: LD_EXP 5
10798: PPUSH
10799: LD_STRING D3-Frank-1
10801: PPUSH
10802: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
10806: LD_EXP 13
10810: PPUSH
10811: LD_STRING D3-Don-1
10813: PPUSH
10814: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
10818: LD_EXP 13
10822: PPUSH
10823: LD_STRING D3-Don-1a
10825: PPUSH
10826: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
10830: LD_EXP 1
10834: PPUSH
10835: LD_STRING D3-JMM-1
10837: PPUSH
10838: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
10842: LD_EXP 13
10846: PPUSH
10847: LD_STRING D3-Don-2
10849: PPUSH
10850: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) then
10854: LD_INT 22
10856: PUSH
10857: LD_INT 6
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 21
10866: PUSH
10867: LD_INT 1
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PPUSH
10878: CALL_OW 69
10882: IFFALSE 11020
// begin Say ( JMM , D3-JMM-2 ) ;
10884: LD_EXP 1
10888: PPUSH
10889: LD_STRING D3-JMM-2
10891: PPUSH
10892: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
10896: LD_EXP 13
10900: PPUSH
10901: LD_STRING D3-Don-3
10903: PPUSH
10904: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
10908: LD_EXP 1
10912: PPUSH
10913: LD_STRING D3-JMM-3
10915: PPUSH
10916: CALL_OW 88
// if IsOK ( Frank ) then
10920: LD_EXP 5
10924: PPUSH
10925: CALL_OW 302
10929: IFFALSE 10943
// Say ( Frank , D3-Frank-3 ) ;
10931: LD_EXP 5
10935: PPUSH
10936: LD_STRING D3-Frank-3
10938: PPUSH
10939: CALL_OW 88
// DialogueOff ;
10943: CALL_OW 7
// if IsOk ( Frank ) then
10947: LD_EXP 5
10951: PPUSH
10952: CALL_OW 302
10956: IFFALSE 11018
// begin SetSide ( Frank , 0 ) ;
10958: LD_EXP 5
10962: PPUSH
10963: LD_INT 0
10965: PPUSH
10966: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
10970: LD_EXP 5
10974: PPUSH
10975: LD_INT 12
10977: PPUSH
10978: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
10982: LD_EXP 5
10986: PPUSH
10987: LD_STRING 04t_Frank
10989: PPUSH
10990: CALL_OW 38
// wait ( 0 0$3 ) ;
10994: LD_INT 105
10996: PPUSH
10997: CALL_OW 67
// frankScoutBase = 1 ;
11001: LD_ADDR_EXP 25
11005: PUSH
11006: LD_INT 1
11008: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11009: LD_EXP 5
11013: PPUSH
11014: CALL_OW 64
// end ; end else
11018: GO 11107
// begin Say ( JMM , D3-JMM-4 ) ;
11020: LD_EXP 1
11024: PPUSH
11025: LD_STRING D3-JMM-4
11027: PPUSH
11028: CALL_OW 88
// DialogueOff ;
11032: CALL_OW 7
// if IsOk ( Frank ) then
11036: LD_EXP 5
11040: PPUSH
11041: CALL_OW 302
11045: IFFALSE 11107
// begin SetSide ( Frank , 0 ) ;
11047: LD_EXP 5
11051: PPUSH
11052: LD_INT 0
11054: PPUSH
11055: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
11059: LD_EXP 5
11063: PPUSH
11064: LD_INT 12
11066: PPUSH
11067: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
11071: LD_EXP 5
11075: PPUSH
11076: LD_STRING 04t_Frank
11078: PPUSH
11079: CALL_OW 38
// wait ( 0 0$3 ) ;
11083: LD_INT 105
11085: PPUSH
11086: CALL_OW 67
// frankScoutBase = 1 ;
11090: LD_ADDR_EXP 25
11094: PUSH
11095: LD_INT 1
11097: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
11098: LD_EXP 5
11102: PPUSH
11103: CALL_OW 64
// end ; end ; end ;
11107: PPOPN 1
11109: END
// every 0 0$1 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do var i , tmp ;
11110: LD_EXP 13
11114: PPUSH
11115: CALL_OW 255
11119: PUSH
11120: LD_INT 4
11122: EQUAL
11123: PUSH
11124: LD_EXP 13
11128: PPUSH
11129: CALL_OW 302
11133: AND
11134: IFFALSE 11374
11136: GO 11138
11138: DISABLE
11139: LD_INT 0
11141: PPUSH
11142: PPUSH
// begin wait ( 5 5$00 ) ;
11143: LD_INT 10500
11145: PPUSH
11146: CALL_OW 67
// if GetSide ( Donaldson ) = 1 or IsDead ( Donaldson ) then
11150: LD_EXP 13
11154: PPUSH
11155: CALL_OW 255
11159: PUSH
11160: LD_INT 1
11162: EQUAL
11163: PUSH
11164: LD_EXP 13
11168: PPUSH
11169: CALL_OW 301
11173: OR
11174: IFFALSE 11178
// exit ;
11176: GO 11374
// SayRadio ( Donaldson , D3b-Don-1 ) ;
11178: LD_EXP 13
11182: PPUSH
11183: LD_STRING D3b-Don-1
11185: PPUSH
11186: CALL_OW 94
// donaldsonCoopAttack = 1 ;
11190: LD_ADDR_EXP 41
11194: PUSH
11195: LD_INT 1
11197: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
11198: LD_ADDR_VAR 0 2
11202: PUSH
11203: LD_INT 22
11205: PUSH
11206: LD_INT 4
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PPUSH
11213: CALL_OW 69
11217: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11218: LD_INT 35
11220: PPUSH
11221: CALL_OW 67
// until not tmp or FilterAllUnits ( [ [ f_side , 6 ] , [ f_see , 1 ] ] ) ;
11225: LD_VAR 0 2
11229: NOT
11230: PUSH
11231: LD_INT 22
11233: PUSH
11234: LD_INT 6
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 101
11243: PUSH
11244: LD_INT 1
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PPUSH
11255: CALL_OW 69
11259: OR
11260: IFFALSE 11218
// if not tmp then
11262: LD_VAR 0 2
11266: NOT
11267: IFFALSE 11271
// exit ;
11269: GO 11374
// for i in tmp do
11271: LD_ADDR_VAR 0 1
11275: PUSH
11276: LD_VAR 0 2
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11301
// ComAgressiveMove ( i , 52 , 64 ) ;
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_INT 52
11291: PPUSH
11292: LD_INT 64
11294: PPUSH
11295: CALL_OW 114
11299: GO 11281
11301: POP
11302: POP
// wait ( 0 0$10 ) ;
11303: LD_INT 350
11305: PPUSH
11306: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) diff Frank do
11310: LD_ADDR_VAR 0 1
11314: PUSH
11315: LD_INT 22
11317: PUSH
11318: LD_INT 4
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PPUSH
11325: CALL_OW 69
11329: PUSH
11330: LD_EXP 5
11334: DIFF
11335: PUSH
11336: FOR_IN
11337: IFFALSE 11353
// SetSide ( i , 1 ) ;
11339: LD_VAR 0 1
11343: PPUSH
11344: LD_INT 1
11346: PPUSH
11347: CALL_OW 235
11351: GO 11336
11353: POP
11354: POP
// if IsLive ( Donaldson ) then
11355: LD_EXP 13
11359: PPUSH
11360: CALL_OW 300
11364: IFFALSE 11374
// saveDonaldson := 1 ;
11366: LD_ADDR_EXP 24
11370: PUSH
11371: LD_INT 1
11373: ST_TO_ADDR
// end ;
11374: PPOPN 2
11376: END
// every 0 0$1 trigger not saveDonaldson and not donaldsonCoopAttack and ( FilterUnitsInArea ( OuterDonaldsonArea , [ f_side , 1 ] ) or GetDistUnits ( Donaldson , JMM ) < 6 ) do var i ;
11377: LD_EXP 24
11381: NOT
11382: PUSH
11383: LD_EXP 41
11387: NOT
11388: AND
11389: PUSH
11390: LD_INT 26
11392: PPUSH
11393: LD_INT 22
11395: PUSH
11396: LD_INT 1
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PPUSH
11403: CALL_OW 70
11407: PUSH
11408: LD_EXP 13
11412: PPUSH
11413: LD_EXP 1
11417: PPUSH
11418: CALL_OW 296
11422: PUSH
11423: LD_INT 6
11425: LESS
11426: OR
11427: AND
11428: IFFALSE 11483
11430: GO 11432
11432: DISABLE
11433: LD_INT 0
11435: PPUSH
// begin saveDonaldson := 1 ;
11436: LD_ADDR_EXP 24
11440: PUSH
11441: LD_INT 1
11443: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
11444: LD_ADDR_VAR 0 1
11448: PUSH
11449: LD_INT 22
11451: PUSH
11452: LD_INT 4
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PPUSH
11459: CALL_OW 69
11463: PUSH
11464: FOR_IN
11465: IFFALSE 11481
// SetSide ( i , 1 ) ;
11467: LD_VAR 0 1
11471: PPUSH
11472: LD_INT 1
11474: PPUSH
11475: CALL_OW 235
11479: GO 11464
11481: POP
11482: POP
// end ;
11483: PPOPN 1
11485: END
// every 0 0$1 trigger frankScoutBase do
11486: LD_EXP 25
11490: IFFALSE 11855
11492: GO 11494
11494: DISABLE
// begin wait ( 2 2$30 ) ;
11495: LD_INT 5250
11497: PPUSH
11498: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
11502: LD_INT 35
11504: PPUSH
11505: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
11509: LD_INT 81
11511: PUSH
11512: LD_INT 4
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 92
11521: PUSH
11522: LD_INT 84
11524: PUSH
11525: LD_INT 28
11527: PUSH
11528: LD_INT 22
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PPUSH
11541: CALL_OW 69
11545: NOT
11546: IFFALSE 11502
// uc_side = 4 ;
11548: LD_ADDR_OWVAR 20
11552: PUSH
11553: LD_INT 4
11555: ST_TO_ADDR
// uc_nation = 1 ;
11556: LD_ADDR_OWVAR 21
11560: PUSH
11561: LD_INT 1
11563: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
11564: LD_ADDR_EXP 5
11568: PUSH
11569: LD_STRING 04t_Frank
11571: PPUSH
11572: CALL_OW 34
11576: ST_TO_ADDR
// if not Frank then
11577: LD_EXP 5
11581: NOT
11582: IFFALSE 11586
// exit ;
11584: GO 11855
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
11586: LD_EXP 5
11590: PPUSH
11591: LD_INT 13
11593: PPUSH
11594: LD_INT 0
11596: PPUSH
11597: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
11601: LD_INT 35
11603: PPUSH
11604: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
11608: LD_EXP 1
11612: PPUSH
11613: CALL_OW 310
11617: NOT
11618: PUSH
11619: LD_EXP 1
11623: PPUSH
11624: LD_INT 4
11626: PPUSH
11627: CALL_OW 296
11631: PUSH
11632: LD_INT 20
11634: LESS
11635: AND
11636: IFFALSE 11669
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
11638: LD_EXP 5
11642: PPUSH
11643: LD_EXP 1
11647: PPUSH
11648: CALL_OW 250
11652: PPUSH
11653: LD_EXP 1
11657: PPUSH
11658: CALL_OW 251
11662: PPUSH
11663: CALL_OW 111
11667: GO 11684
// ComMoveXY ( Frank , 51 , 15 ) ;
11669: LD_EXP 5
11673: PPUSH
11674: LD_INT 51
11676: PPUSH
11677: LD_INT 15
11679: PPUSH
11680: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
11684: LD_EXP 5
11688: PPUSH
11689: LD_EXP 1
11693: PPUSH
11694: CALL_OW 296
11698: PUSH
11699: LD_INT 10
11701: LESS
11702: IFFALSE 11601
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
11704: LD_EXP 1
11708: PUSH
11709: LD_EXP 5
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PPUSH
11718: CALL_OW 87
// DialogueOn ;
11722: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
11726: LD_EXP 5
11730: PPUSH
11731: LD_STRING D3a-Frank-1
11733: PPUSH
11734: CALL_OW 88
// if Lisa then
11738: LD_EXP 4
11742: IFFALSE 11792
// begin Say ( Lisa , D3a-Lisa-1 ) ;
11744: LD_EXP 4
11748: PPUSH
11749: LD_STRING D3a-Lisa-1
11751: PPUSH
11752: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
11756: LD_EXP 5
11760: PPUSH
11761: LD_STRING D3a-Frank-2
11763: PPUSH
11764: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
11768: LD_EXP 4
11772: PPUSH
11773: LD_STRING D3a-Lisa-2
11775: PPUSH
11776: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
11780: LD_EXP 5
11784: PPUSH
11785: LD_STRING D3a-Frank-3
11787: PPUSH
11788: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
11792: LD_EXP 1
11796: PPUSH
11797: LD_STRING D3a-JMM-3
11799: PPUSH
11800: CALL_OW 88
// DialogueOff ;
11804: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11808: LD_EXP 5
11812: PPUSH
11813: LD_INT 1
11815: PPUSH
11816: CALL_OW 235
// InGameOn ;
11820: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
11824: LD_INT 1
11826: PPUSH
11827: LD_INT 7
11829: PPUSH
11830: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
11834: LD_INT 93
11836: PPUSH
11837: LD_INT 91
11839: PPUSH
11840: CALL_OW 84
// wait ( 0 0$5 ) ;
11844: LD_INT 175
11846: PPUSH
11847: CALL_OW 67
// InGameOff ;
11851: CALL_OW 9
// end ;
11855: END
// every 12 12$0 trigger Difficulty > 1 do
11856: LD_OWVAR 67
11860: PUSH
11861: LD_INT 1
11863: GREATER
11864: IFFALSE 11888
11866: GO 11868
11868: DISABLE
// AddComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
11869: LD_INT 24
11871: PPUSH
11872: LD_INT 24
11874: PPUSH
11875: LD_INT 1
11877: PPUSH
11878: LD_INT 1
11880: PPUSH
11881: LD_INT 53
11883: PPUSH
11884: CALL_OW 185
11888: END
// every 18 18$0 do
11889: GO 11891
11891: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
11892: LD_EXP 14
11896: PPUSH
11897: LD_STRING D4-Har-1
11899: PPUSH
11900: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
11904: LD_EXP 1
11908: PPUSH
11909: LD_STRING D4-JMM-1
11911: PPUSH
11912: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
11916: LD_EXP 14
11920: PPUSH
11921: LD_STRING D4-Har-2
11923: PPUSH
11924: CALL_OW 94
// case Query ( Q1 ) of 1 :
11928: LD_STRING Q1
11930: PPUSH
11931: CALL_OW 97
11935: PUSH
11936: LD_INT 1
11938: DOUBLE
11939: EQUAL
11940: IFTRUE 11944
11942: GO 12003
11944: POP
// begin Say ( JMM , D5-JMM-1 ) ;
11945: LD_EXP 1
11949: PPUSH
11950: LD_STRING D5-JMM-1
11952: PPUSH
11953: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
11957: LD_EXP 14
11961: PPUSH
11962: LD_STRING D5-Har-1
11964: PPUSH
11965: CALL_OW 94
// timeToSupport = 10 10$0 ;
11969: LD_ADDR_EXP 28
11973: PUSH
11974: LD_INT 21000
11976: ST_TO_ADDR
// timerStatus = 2 ;
11977: LD_ADDR_EXP 29
11981: PUSH
11982: LD_INT 2
11984: ST_TO_ADDR
// startTimer = 1 ;
11985: LD_ADDR_EXP 30
11989: PUSH
11990: LD_INT 1
11992: ST_TO_ADDR
// harrAnswer = 1 ;
11993: LD_ADDR_EXP 26
11997: PUSH
11998: LD_INT 1
12000: ST_TO_ADDR
// end ; 2 :
12001: GO 12138
12003: LD_INT 2
12005: DOUBLE
12006: EQUAL
12007: IFTRUE 12011
12009: GO 12070
12011: POP
// begin Say ( JMM , D5-JMM-2 ) ;
12012: LD_EXP 1
12016: PPUSH
12017: LD_STRING D5-JMM-2
12019: PPUSH
12020: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
12024: LD_EXP 14
12028: PPUSH
12029: LD_STRING D5-Har-2
12031: PPUSH
12032: CALL_OW 94
// timeToSupport = 5 5$0 ;
12036: LD_ADDR_EXP 28
12040: PUSH
12041: LD_INT 10500
12043: ST_TO_ADDR
// timerStatus = 2 ;
12044: LD_ADDR_EXP 29
12048: PUSH
12049: LD_INT 2
12051: ST_TO_ADDR
// startTimer = 1 ;
12052: LD_ADDR_EXP 30
12056: PUSH
12057: LD_INT 1
12059: ST_TO_ADDR
// harrAnswer = 2 ;
12060: LD_ADDR_EXP 26
12064: PUSH
12065: LD_INT 2
12067: ST_TO_ADDR
// end ; 3 :
12068: GO 12138
12070: LD_INT 3
12072: DOUBLE
12073: EQUAL
12074: IFTRUE 12078
12076: GO 12137
12078: POP
// begin Say ( JMM , D5-JMM-3 ) ;
12079: LD_EXP 1
12083: PPUSH
12084: LD_STRING D5-JMM-3
12086: PPUSH
12087: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
12091: LD_EXP 14
12095: PPUSH
12096: LD_STRING D5-Har-3
12098: PPUSH
12099: CALL_OW 94
// timeToSupport = 5 5$0 ;
12103: LD_ADDR_EXP 28
12107: PUSH
12108: LD_INT 10500
12110: ST_TO_ADDR
// timerStatus = 2 ;
12111: LD_ADDR_EXP 29
12115: PUSH
12116: LD_INT 2
12118: ST_TO_ADDR
// startTimer = 1 ;
12119: LD_ADDR_EXP 30
12123: PUSH
12124: LD_INT 1
12126: ST_TO_ADDR
// harrAnswer = 3 ;
12127: LD_ADDR_EXP 26
12131: PUSH
12132: LD_INT 3
12134: ST_TO_ADDR
// end ; end ;
12135: GO 12138
12137: POP
// end ;
12138: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
12139: LD_EXP 29
12143: PUSH
12144: LD_INT 2
12146: EQUAL
12147: PUSH
12148: LD_EXP 28
12152: PUSH
12153: LD_INT 0
12155: EQUAL
12156: AND
12157: IFFALSE 12446
12159: GO 12161
12161: DISABLE
// begin timerStatus = 4 ;
12162: LD_ADDR_EXP 29
12166: PUSH
12167: LD_INT 4
12169: ST_TO_ADDR
// if harrAnswer = 1 then
12170: LD_EXP 26
12174: PUSH
12175: LD_INT 1
12177: EQUAL
12178: IFFALSE 12262
// begin PrepareHarrisonSupport ( 3 ) ;
12180: LD_INT 3
12182: PPUSH
12183: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12187: LD_INT 2100
12189: PPUSH
12190: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12194: LD_EXP 14
12198: PPUSH
12199: LD_STRING D7-Har-1
12201: PPUSH
12202: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12206: LD_STRING M2
12208: PPUSH
12209: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 3 3$0 ] [ Difficulty ] ;
12213: LD_ADDR_EXP 27
12217: PUSH
12218: LD_INT 31500
12220: PUSH
12221: LD_INT 10500
12223: PUSH
12224: LD_INT 8400
12226: PUSH
12227: LD_INT 6300
12229: PUSH
12230: LD_INT 6300
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: PUSH
12239: LD_OWVAR 67
12243: ARRAY
12244: PLUS
12245: ST_TO_ADDR
// startTimer = 1 ;
12246: LD_ADDR_EXP 30
12250: PUSH
12251: LD_INT 1
12253: ST_TO_ADDR
// timerStatus = 3 ;
12254: LD_ADDR_EXP 29
12258: PUSH
12259: LD_INT 3
12261: ST_TO_ADDR
// end ; if harrAnswer = 2 then
12262: LD_EXP 26
12266: PUSH
12267: LD_INT 2
12269: EQUAL
12270: IFFALSE 12354
// begin PrepareHarrisonSupport ( 4 ) ;
12272: LD_INT 4
12274: PPUSH
12275: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12279: LD_INT 2100
12281: PPUSH
12282: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12286: LD_EXP 14
12290: PPUSH
12291: LD_STRING D7-Har-1
12293: PPUSH
12294: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12298: LD_STRING M2
12300: PPUSH
12301: CALL_OW 337
// timeToDestroyRuBase = 16 16$0 + [ 5 5$0 , 4 4$0 , 3 3$0 , 2 2$30 ] [ Difficulty ] ;
12305: LD_ADDR_EXP 27
12309: PUSH
12310: LD_INT 33600
12312: PUSH
12313: LD_INT 10500
12315: PUSH
12316: LD_INT 8400
12318: PUSH
12319: LD_INT 6300
12321: PUSH
12322: LD_INT 5250
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: PUSH
12331: LD_OWVAR 67
12335: ARRAY
12336: PLUS
12337: ST_TO_ADDR
// startTimer = 1 ;
12338: LD_ADDR_EXP 30
12342: PUSH
12343: LD_INT 1
12345: ST_TO_ADDR
// timerStatus = 3 ;
12346: LD_ADDR_EXP 29
12350: PUSH
12351: LD_INT 3
12353: ST_TO_ADDR
// end ; if harrAnswer = 3 then
12354: LD_EXP 26
12358: PUSH
12359: LD_INT 3
12361: EQUAL
12362: IFFALSE 12446
// begin PrepareHarrisonSupport ( 5 ) ;
12364: LD_INT 5
12366: PPUSH
12367: CALL 1757 0 1
// wait ( 1 1$0 ) ;
12371: LD_INT 2100
12373: PPUSH
12374: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
12378: LD_EXP 14
12382: PPUSH
12383: LD_STRING D7-Har-1
12385: PPUSH
12386: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
12390: LD_STRING M2
12392: PPUSH
12393: CALL_OW 337
// timeToDestroyRuBase = 17 17$0 + [ 5 5$0 , 3 3$0 , 2 2$0 , 1 1$30 ] [ Difficulty ] ;
12397: LD_ADDR_EXP 27
12401: PUSH
12402: LD_INT 35700
12404: PUSH
12405: LD_INT 10500
12407: PUSH
12408: LD_INT 6300
12410: PUSH
12411: LD_INT 4200
12413: PUSH
12414: LD_INT 3150
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: PUSH
12423: LD_OWVAR 67
12427: ARRAY
12428: PLUS
12429: ST_TO_ADDR
// startTimer = 1 ;
12430: LD_ADDR_EXP 30
12434: PUSH
12435: LD_INT 1
12437: ST_TO_ADDR
// timerStatus = 3 ;
12438: LD_ADDR_EXP 29
12442: PUSH
12443: LD_INT 3
12445: ST_TO_ADDR
// end ; end ;
12446: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
12447: LD_EXP 27
12451: PUSH
12452: LD_INT 8400
12454: LESSEQUAL
12455: PUSH
12456: LD_EXP 29
12460: PUSH
12461: LD_INT 3
12463: EQUAL
12464: AND
12465: IFFALSE 12497
12467: GO 12469
12469: DISABLE
// begin DialogueOn ;
12470: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
12474: LD_EXP 14
12478: PPUSH
12479: LD_STRING D7a-Har-1
12481: PPUSH
12482: CALL_OW 94
// DialogueOff ;
12486: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
12490: LD_STRING M2a
12492: PPUSH
12493: CALL_OW 337
// end ;
12497: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
12498: LD_EXP 27
12502: PUSH
12503: LD_INT 0
12505: LESSEQUAL
12506: PUSH
12507: LD_EXP 29
12511: PUSH
12512: LD_INT 3
12514: EQUAL
12515: AND
12516: PUSH
12517: LD_EXP 40
12521: NOT
12522: AND
12523: IFFALSE 12662
12525: GO 12527
12527: DISABLE
12528: LD_INT 0
12530: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
12531: LD_ADDR_VAR 0 1
12535: PUSH
12536: LD_INT 22
12538: PUSH
12539: LD_INT 1
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PPUSH
12546: CALL_OW 69
12550: PUSH
12551: LD_EXP 1
12555: PUSH
12556: EMPTY
12557: LIST
12558: DIFF
12559: ST_TO_ADDR
// saveDonaldson = 2 ;
12560: LD_ADDR_EXP 24
12564: PUSH
12565: LD_INT 2
12567: ST_TO_ADDR
// DialogueOn ;
12568: CALL_OW 6
// if IsOk ( Donaldson ) then
12572: LD_EXP 13
12576: PPUSH
12577: CALL_OW 302
12581: IFFALSE 12597
// SayRadio ( Harisson , D8-Har-1 ) else
12583: LD_EXP 14
12587: PPUSH
12588: LD_STRING D8-Har-1
12590: PPUSH
12591: CALL_OW 94
12595: GO 12609
// SayRadio ( Harisson , D8-Har-1a ) ;
12597: LD_EXP 14
12601: PPUSH
12602: LD_STRING D8-Har-1a
12604: PPUSH
12605: CALL_OW 94
// DialogueOff ;
12609: CALL_OW 7
// SetSide ( tmp , 4 ) ;
12613: LD_VAR 0 1
12617: PPUSH
12618: LD_INT 4
12620: PPUSH
12621: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
12625: LD_VAR 0 1
12629: PPUSH
12630: LD_INT 88
12632: PPUSH
12633: LD_INT 89
12635: PPUSH
12636: CALL_OW 114
// honor = 0 ;
12640: LD_ADDR_EXP 39
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// wait ( 0 0$10 ) ;
12648: LD_INT 350
12650: PPUSH
12651: CALL_OW 67
// YouLost ( LostCommand ) ;
12655: LD_STRING LostCommand
12657: PPUSH
12658: CALL_OW 104
// end ;
12662: PPOPN 1
12664: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
12665: LD_INT 22
12667: PUSH
12668: LD_INT 6
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 21
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PPUSH
12689: CALL_OW 69
12693: PUSH
12694: LD_INT 0
12696: EQUAL
12697: PUSH
12698: LD_EXP 20
12702: PUSH
12703: LD_INT 0
12705: EQUAL
12706: AND
12707: PUSH
12708: LD_EXP 44
12712: PUSH
12713: LD_INT 1
12715: EQUAL
12716: AND
12717: IFFALSE 12811
12719: GO 12721
12721: DISABLE
12722: LD_INT 0
12724: PPUSH
12725: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
12726: LD_ADDR_VAR 0 2
12730: PUSH
12731: LD_INT 22
12733: PUSH
12734: LD_INT 1
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PUSH
12741: LD_INT 21
12743: PUSH
12744: LD_INT 1
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PUSH
12751: LD_INT 23
12753: PUSH
12754: LD_INT 1
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: LIST
12765: PPUSH
12766: CALL_OW 69
12770: ST_TO_ADDR
// for i in tmp do
12771: LD_ADDR_VAR 0 1
12775: PUSH
12776: LD_VAR 0 2
12780: PUSH
12781: FOR_IN
12782: IFFALSE 12809
// AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
12784: LD_VAR 0 1
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: LD_INT 4
12794: PPUSH
12795: CALL_OW 12
12799: PPUSH
12800: LD_INT 500
12802: PPUSH
12803: CALL_OW 492
12807: GO 12781
12809: POP
12810: POP
// end ; end_of_file
12811: PPOPN 2
12813: END
// every 0 0$1 trigger AIEnable do
12814: LD_EXP 37
12818: IFFALSE 12912
12820: GO 12822
12822: DISABLE
// begin enable ;
12823: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
12824: LD_INT 3
12826: PPUSH
12827: LD_INT 21
12829: PPUSH
12830: LD_INT 7
12832: PPUSH
12833: CALL 6038 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
12837: LD_INT 3
12839: PPUSH
12840: LD_INT 8
12842: PPUSH
12843: LD_INT 7
12845: PPUSH
12846: LD_INT 1
12848: PPUSH
12849: CALL 6342 0 4
// if baseReadyToBuild = 2 and FilterAllUnits ( [ f_side , 6 ] ) then
12853: LD_EXP 20
12857: PUSH
12858: LD_INT 2
12860: EQUAL
12861: PUSH
12862: LD_INT 22
12864: PUSH
12865: LD_INT 6
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PPUSH
12872: CALL_OW 69
12876: AND
12877: IFFALSE 12912
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
12879: LD_INT 6
12881: PPUSH
12882: LD_EXP 21
12886: PPUSH
12887: LD_INT 6
12889: PPUSH
12890: CALL 6038 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
12894: LD_INT 6
12896: PPUSH
12897: LD_INT 9
12899: PPUSH
12900: LD_INT 6
12902: PPUSH
12903: LD_EXP 22
12907: PPUSH
12908: CALL 6342 0 4
// end ; end ;
12912: END
// every 0 0$1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
12913: LD_EXP 15
12917: PPUSH
12918: CALL_OW 310
12922: NOT
12923: PUSH
12924: LD_INT 21
12926: PPUSH
12927: CALL_OW 302
12931: AND
12932: PUSH
12933: LD_INT 21
12935: PPUSH
12936: CALL_OW 255
12940: PUSH
12941: LD_INT 3
12943: EQUAL
12944: AND
12945: IFFALSE 12962
12947: GO 12949
12949: DISABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
12950: LD_EXP 15
12954: PPUSH
12955: LD_INT 21
12957: PPUSH
12958: CALL_OW 120
12962: END
// every 5 5$0 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
12963: LD_INT 22
12965: PUSH
12966: LD_INT 3
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PUSH
12973: LD_INT 21
12975: PUSH
12976: LD_INT 2
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: PUSH
12983: LD_INT 55
12985: PUSH
12986: EMPTY
12987: LIST
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: LIST
12993: PPUSH
12994: CALL_OW 69
12998: PUSH
12999: LD_INT 0
13001: EQUAL
13002: PUSH
13003: LD_INT 1
13005: PPUSH
13006: CALL_OW 255
13010: PUSH
13011: LD_INT 3
13013: EQUAL
13014: AND
13015: PUSH
13016: LD_INT 21
13018: PPUSH
13019: CALL_OW 302
13023: AND
13024: PUSH
13025: LD_INT 21
13027: PPUSH
13028: CALL_OW 255
13032: PUSH
13033: LD_INT 3
13035: EQUAL
13036: AND
13037: PUSH
13038: LD_INT 21
13040: PPUSH
13041: CALL_OW 302
13045: AND
13046: IFFALSE 13258
13048: GO 13050
13050: DISABLE
// begin enable ;
13051: ENABLE
// if Difficulty = 1 then
13052: LD_OWVAR 67
13056: PUSH
13057: LD_INT 1
13059: EQUAL
13060: IFFALSE 13104
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 44 , 43 ] , 1 , 1 , 21 ) ;
13062: LD_INT 3
13064: PPUSH
13065: LD_INT 24
13067: PPUSH
13068: LD_OWVAR 67
13072: PUSH
13073: LD_INT 2
13075: PLUS
13076: PPUSH
13077: LD_INT 42
13079: PUSH
13080: LD_INT 44
13082: PUSH
13083: LD_INT 43
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: LIST
13090: PPUSH
13091: LD_INT 1
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: LD_INT 21
13099: PPUSH
13100: CALL 6856 0 7
// if Difficulty = 2 then
13104: LD_OWVAR 67
13108: PUSH
13109: LD_INT 2
13111: EQUAL
13112: IFFALSE 13179
// BuildVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 44 , 44 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
13114: LD_INT 3
13116: PPUSH
13117: LD_INT 24
13119: PPUSH
13120: LD_OWVAR 67
13124: PUSH
13125: LD_INT 2
13127: PLUS
13128: PPUSH
13129: LD_INT 44
13131: PUSH
13132: LD_INT 44
13134: PUSH
13135: LD_INT 43
13137: PUSH
13138: LD_INT 43
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: PPUSH
13147: LD_INT 1
13149: PPUSH
13150: LD_INT 1
13152: PPUSH
13153: LD_INT 21
13155: PUSH
13156: LD_INT 22
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 1
13165: PPUSH
13166: LD_INT 2
13168: PPUSH
13169: CALL_OW 12
13173: ARRAY
13174: PPUSH
13175: CALL 6856 0 7
// if Difficulty >= 3 then
13179: LD_OWVAR 67
13183: PUSH
13184: LD_INT 3
13186: GREATEREQUAL
13187: IFFALSE 13258
// BuildVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 44 , 44 , 43 ] , 1 , 1 , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] ) ;
13189: LD_INT 3
13191: PPUSH
13192: LD_INT 24
13194: PPUSH
13195: LD_OWVAR 67
13199: PUSH
13200: LD_INT 2
13202: PPUSH
13203: LD_INT 3
13205: PPUSH
13206: CALL_OW 12
13210: PLUS
13211: PPUSH
13212: LD_INT 44
13214: PUSH
13215: LD_INT 44
13217: PUSH
13218: LD_INT 43
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: LIST
13225: PPUSH
13226: LD_INT 1
13228: PPUSH
13229: LD_INT 1
13231: PPUSH
13232: LD_INT 22
13234: PUSH
13235: LD_INT 23
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 1
13244: PPUSH
13245: LD_INT 2
13247: PPUSH
13248: CALL_OW 12
13252: ARRAY
13253: PPUSH
13254: CALL 6856 0 7
// end ;
13258: END
// every 0 0$1 do
13259: GO 13261
13261: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
13262: LD_INT 3
13264: PPUSH
13265: LD_INT 1
13267: PPUSH
13268: LD_INT 3
13270: PPUSH
13271: CALL 5959 0 3
13275: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
13276: LD_EXP 20
13280: PUSH
13281: LD_INT 1
13283: EQUAL
13284: IFFALSE 13431
13286: GO 13288
13288: DISABLE
13289: LD_INT 0
13291: PPUSH
13292: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
13293: LD_ADDR_VAR 0 2
13297: PUSH
13298: LD_INT 22
13300: PUSH
13301: LD_INT 6
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 21
13310: PUSH
13311: LD_INT 2
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 34
13320: PUSH
13321: LD_INT 51
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: LIST
13332: PPUSH
13333: CALL_OW 69
13337: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
13338: LD_VAR 0 2
13342: PUSH
13343: LD_INT 1
13345: ARRAY
13346: PPUSH
13347: LD_EXP 21
13351: PPUSH
13352: CALL_OW 250
13356: PUSH
13357: LD_INT 5
13359: MINUS
13360: PPUSH
13361: LD_EXP 21
13365: PPUSH
13366: CALL_OW 251
13370: PUSH
13371: LD_INT 5
13373: MINUS
13374: PPUSH
13375: CALL_OW 111
// wait ( 0 0$5 ) ;
13379: LD_INT 175
13381: PPUSH
13382: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
13386: LD_VAR 0 2
13390: PUSH
13391: LD_INT 1
13393: ARRAY
13394: PPUSH
13395: LD_INT 41
13397: PPUSH
13398: LD_INT 52
13400: PPUSH
13401: CALL_OW 177
// wait ( 0 0$40 ) ;
13405: LD_INT 1400
13407: PPUSH
13408: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
13412: LD_VAR 0 2
13416: PUSH
13417: LD_INT 1
13419: ARRAY
13420: PPUSH
13421: LD_INT 41
13423: PPUSH
13424: LD_INT 44
13426: PPUSH
13427: CALL_OW 111
// end ;
13431: PPOPN 2
13433: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
13434: LD_EXP 21
13438: PPUSH
13439: CALL_OW 274
13443: PPUSH
13444: LD_INT 1
13446: PPUSH
13447: CALL_OW 275
13451: PUSH
13452: LD_INT 100
13454: GREATEREQUAL
13455: IFFALSE 13683
13457: GO 13459
13459: DISABLE
13460: LD_INT 0
13462: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
13463: LD_ADDR_VAR 0 1
13467: PUSH
13468: LD_INT 22
13470: PUSH
13471: LD_INT 6
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 21
13480: PUSH
13481: LD_INT 1
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 25
13490: PUSH
13491: LD_INT 2
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: LIST
13502: PPUSH
13503: CALL_OW 69
13507: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
13508: LD_VAR 0 1
13512: PUSH
13513: LD_INT 1
13515: ARRAY
13516: PPUSH
13517: LD_INT 4
13519: PPUSH
13520: LD_INT 39
13522: PPUSH
13523: LD_INT 37
13525: PPUSH
13526: LD_INT 3
13528: PPUSH
13529: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
13533: LD_VAR 0 1
13537: PUSH
13538: LD_INT 1
13540: ARRAY
13541: PPUSH
13542: LD_INT 29
13544: PPUSH
13545: LD_INT 42
13547: PPUSH
13548: LD_INT 54
13550: PPUSH
13551: LD_INT 3
13553: PPUSH
13554: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
13558: LD_VAR 0 1
13562: PUSH
13563: LD_INT 1
13565: ARRAY
13566: PPUSH
13567: LD_INT 6
13569: PPUSH
13570: LD_INT 38
13572: PPUSH
13573: LD_INT 48
13575: PPUSH
13576: LD_INT 0
13578: PPUSH
13579: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
13583: LD_VAR 0 1
13587: PUSH
13588: LD_INT 1
13590: ARRAY
13591: PPUSH
13592: LD_INT 2
13594: PPUSH
13595: LD_INT 32
13597: PPUSH
13598: LD_INT 38
13600: PPUSH
13601: LD_INT 2
13603: PPUSH
13604: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
13608: LD_VAR 0 1
13612: PUSH
13613: LD_INT 1
13615: ARRAY
13616: PPUSH
13617: LD_INT 26
13619: PPUSH
13620: LD_INT 39
13622: PPUSH
13623: LD_INT 55
13625: PPUSH
13626: LD_INT 3
13628: PPUSH
13629: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
13633: LD_VAR 0 1
13637: PUSH
13638: LD_INT 1
13640: ARRAY
13641: PPUSH
13642: LD_INT 32
13644: PPUSH
13645: LD_INT 31
13647: PPUSH
13648: LD_INT 31
13650: PPUSH
13651: LD_INT 3
13653: PPUSH
13654: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
13658: LD_VAR 0 1
13662: PUSH
13663: LD_INT 1
13665: ARRAY
13666: PPUSH
13667: LD_INT 31
13669: PPUSH
13670: LD_INT 50
13672: PPUSH
13673: LD_INT 51
13675: PPUSH
13676: LD_INT 4
13678: PPUSH
13679: CALL_OW 205
// end ;
13683: PPOPN 1
13685: END
// every 0 0$1 trigger ruMobile do var i , mech , enemy ;
13686: LD_EXP 46
13690: IFFALSE 14247
13692: GO 13694
13694: DISABLE
13695: LD_INT 0
13697: PPUSH
13698: PPUSH
13699: PPUSH
// begin enable ;
13700: ENABLE
// if not ruMobile then
13701: LD_EXP 46
13705: NOT
13706: IFFALSE 13710
// exit ;
13708: GO 14247
// for i in ruMobile do
13710: LD_ADDR_VAR 0 1
13714: PUSH
13715: LD_EXP 46
13719: PUSH
13720: FOR_IN
13721: IFFALSE 14245
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
13723: LD_VAR 0 1
13727: PPUSH
13728: CALL_OW 302
13732: NOT
13733: PUSH
13734: LD_VAR 0 1
13738: PPUSH
13739: CALL_OW 255
13743: PUSH
13744: LD_INT 3
13746: NONEQUAL
13747: OR
13748: IFFALSE 13768
// begin ruMobile := ruMobile diff i ;
13750: LD_ADDR_EXP 46
13754: PUSH
13755: LD_EXP 46
13759: PUSH
13760: LD_VAR 0 1
13764: DIFF
13765: ST_TO_ADDR
// continue ;
13766: GO 13720
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
13768: LD_VAR 0 1
13772: PPUSH
13773: CALL_OW 110
13777: NOT
13778: PUSH
13779: LD_VAR 0 1
13783: PPUSH
13784: CALL_OW 110
13788: PUSH
13789: LD_INT 0
13791: EQUAL
13792: OR
13793: IFFALSE 13908
// begin if GetFuel ( i ) < 50 then
13795: LD_VAR 0 1
13799: PPUSH
13800: CALL_OW 261
13804: PUSH
13805: LD_INT 50
13807: LESS
13808: IFFALSE 13867
// begin ComMoveXY ( i , 106 , 88 ) ;
13810: LD_VAR 0 1
13814: PPUSH
13815: LD_INT 106
13817: PPUSH
13818: LD_INT 88
13820: PPUSH
13821: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13825: LD_INT 35
13827: PPUSH
13828: CALL_OW 67
// until GetDistUnitXY ( i , 106 , 88 ) < 4 ;
13832: LD_VAR 0 1
13836: PPUSH
13837: LD_INT 106
13839: PPUSH
13840: LD_INT 88
13842: PPUSH
13843: CALL_OW 297
13847: PUSH
13848: LD_INT 4
13850: LESS
13851: IFFALSE 13825
// SetFuel ( i , 100 ) ;
13853: LD_VAR 0 1
13857: PPUSH
13858: LD_INT 100
13860: PPUSH
13861: CALL_OW 240
// end else
13865: GO 13908
// if not IsInArea ( i , ruParking ) then
13867: LD_VAR 0 1
13871: PPUSH
13872: LD_INT 25
13874: PPUSH
13875: CALL_OW 308
13879: NOT
13880: IFFALSE 13896
// ComMoveToArea ( i , ruParking ) else
13882: LD_VAR 0 1
13886: PPUSH
13887: LD_INT 25
13889: PPUSH
13890: CALL_OW 113
13894: GO 13908
// SetTag ( i , 1 ) ;
13896: LD_VAR 0 1
13900: PPUSH
13901: LD_INT 1
13903: PPUSH
13904: CALL_OW 109
// end ; if GetTag ( i ) = 1 then
13908: LD_VAR 0 1
13912: PPUSH
13913: CALL_OW 110
13917: PUSH
13918: LD_INT 1
13920: EQUAL
13921: IFFALSE 14051
// begin if GetLives ( i ) < 1000 then
13923: LD_VAR 0 1
13927: PPUSH
13928: CALL_OW 256
13932: PUSH
13933: LD_INT 1000
13935: LESS
13936: IFFALSE 14028
// begin if not IsDrivenBy ( i ) then
13938: LD_VAR 0 1
13942: PPUSH
13943: CALL_OW 311
13947: NOT
13948: IFFALSE 13952
// continue ;
13950: GO 13720
// mech := IsDrivenBy ( i ) ;
13952: LD_ADDR_VAR 0 2
13956: PUSH
13957: LD_VAR 0 1
13961: PPUSH
13962: CALL_OW 311
13966: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13967: LD_VAR 0 2
13971: PPUSH
13972: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13976: LD_VAR 0 2
13980: PPUSH
13981: LD_VAR 0 1
13985: PPUSH
13986: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
13990: LD_INT 35
13992: PPUSH
13993: CALL_OW 67
// until GetLives ( i ) = 1000 ;
13997: LD_VAR 0 1
14001: PPUSH
14002: CALL_OW 256
14006: PUSH
14007: LD_INT 1000
14009: EQUAL
14010: IFFALSE 13990
// ComEnterUnit ( mech , i ) ;
14012: LD_VAR 0 2
14016: PPUSH
14017: LD_VAR 0 1
14021: PPUSH
14022: CALL_OW 120
// end else
14026: GO 14051
// if IsDrivenBy ( i ) then
14028: LD_VAR 0 1
14032: PPUSH
14033: CALL_OW 311
14037: IFFALSE 14051
// SetTag ( i , 2 ) ;
14039: LD_VAR 0 1
14043: PPUSH
14044: LD_INT 2
14046: PPUSH
14047: CALL_OW 109
// end ; if GetTag ( i ) = 2 then
14051: LD_VAR 0 1
14055: PPUSH
14056: CALL_OW 110
14060: PUSH
14061: LD_INT 2
14063: EQUAL
14064: IFFALSE 14243
// begin enemy := FilterUnitsInArea ( ruDefArea , [ f_enemy , 3 ] ) ;
14066: LD_ADDR_VAR 0 3
14070: PUSH
14071: LD_INT 24
14073: PPUSH
14074: LD_INT 81
14076: PUSH
14077: LD_INT 3
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PPUSH
14084: CALL_OW 70
14088: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14089: LD_VAR 0 1
14093: PPUSH
14094: CALL_OW 256
14098: PUSH
14099: LD_INT 650
14101: LESS
14102: IFFALSE 14127
// begin ComStop ( i ) ;
14104: LD_VAR 0 1
14108: PPUSH
14109: CALL_OW 141
// SetTag ( i , 0 ) ;
14113: LD_VAR 0 1
14117: PPUSH
14118: LD_INT 0
14120: PPUSH
14121: CALL_OW 109
// continue ;
14125: GO 13720
// end ; if enemy then
14127: LD_VAR 0 3
14131: IFFALSE 14171
// begin if not HasTask ( i ) then
14133: LD_VAR 0 1
14137: PPUSH
14138: CALL_OW 314
14142: NOT
14143: IFFALSE 14169
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14145: LD_VAR 0 1
14149: PPUSH
14150: LD_VAR 0 3
14154: PPUSH
14155: LD_VAR 0 1
14159: PPUSH
14160: CALL_OW 74
14164: PPUSH
14165: CALL_OW 115
// end else
14169: GO 14243
// if ruMobile > 2 then
14171: LD_EXP 46
14175: PUSH
14176: LD_INT 2
14178: GREATER
14179: IFFALSE 14243
// begin enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
14181: LD_ADDR_VAR 0 3
14185: PUSH
14186: LD_INT 81
14188: PUSH
14189: LD_INT 3
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PPUSH
14196: CALL_OW 69
14200: ST_TO_ADDR
// if enemy then
14201: LD_VAR 0 3
14205: IFFALSE 14243
// if not HasTask ( i ) then
14207: LD_VAR 0 1
14211: PPUSH
14212: CALL_OW 314
14216: NOT
14217: IFFALSE 14243
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14219: LD_VAR 0 1
14223: PPUSH
14224: LD_VAR 0 3
14228: PPUSH
14229: LD_VAR 0 1
14233: PPUSH
14234: CALL_OW 74
14238: PPUSH
14239: CALL_OW 115
// end ; end ; end ;
14243: GO 13720
14245: POP
14246: POP
// end ; end_of_file
14247: PPOPN 3
14249: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
14250: LD_INT 0
14252: PPUSH
14253: PPUSH
14254: PPUSH
14255: PPUSH
14256: PPUSH
14257: PPUSH
14258: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
14259: LD_ADDR_VAR 0 3
14263: PUSH
14264: LD_INT 22
14266: PUSH
14267: LD_INT 6
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: LD_INT 21
14276: PUSH
14277: LD_INT 1
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: LD_INT 25
14286: PUSH
14287: LD_INT 1
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PUSH
14294: LD_INT 3
14296: PUSH
14297: LD_INT 54
14299: PUSH
14300: EMPTY
14301: LIST
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: PPUSH
14313: CALL_OW 69
14317: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
14318: LD_ADDR_VAR 0 7
14322: PUSH
14323: LD_INT 22
14325: PUSH
14326: LD_INT 6
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 21
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 25
14345: PUSH
14346: LD_INT 1
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 54
14355: PUSH
14356: EMPTY
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: PPUSH
14365: CALL_OW 69
14369: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14370: LD_ADDR_VAR 0 4
14374: PUSH
14375: LD_INT 22
14377: PUSH
14378: LD_INT 6
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 21
14387: PUSH
14388: LD_INT 1
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 25
14397: PUSH
14398: LD_INT 2
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 69
14414: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
14415: LD_ADDR_VAR 0 6
14419: PUSH
14420: LD_INT 22
14422: PUSH
14423: LD_INT 6
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 21
14432: PUSH
14433: LD_INT 1
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 25
14442: PUSH
14443: LD_INT 4
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: LIST
14454: PPUSH
14455: CALL_OW 69
14459: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14460: LD_ADDR_VAR 0 8
14464: PUSH
14465: LD_INT 22
14467: PUSH
14468: LD_INT 6
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 21
14477: PUSH
14478: LD_INT 2
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: LD_INT 34
14487: PUSH
14488: LD_INT 51
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: LIST
14499: PPUSH
14500: CALL_OW 69
14504: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
14505: LD_VAR 0 1
14509: PPUSH
14510: CALL_OW 255
14514: PUSH
14515: LD_INT 6
14517: EQUAL
14518: PUSH
14519: LD_VAR 0 1
14523: PPUSH
14524: CALL_OW 266
14528: PUSH
14529: LD_INT 0
14531: EQUAL
14532: AND
14533: IFFALSE 14553
// begin ruPDepot = building ;
14535: LD_ADDR_EXP 21
14539: PUSH
14540: LD_VAR 0 1
14544: ST_TO_ADDR
// baseReadyToBuild = 1 ;
14545: LD_ADDR_EXP 20
14549: PUSH
14550: LD_INT 1
14552: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
14553: LD_VAR 0 1
14557: PPUSH
14558: CALL_OW 266
14562: PUSH
14563: LD_INT 4
14565: EQUAL
14566: PUSH
14567: LD_VAR 0 1
14571: PPUSH
14572: CALL_OW 255
14576: PUSH
14577: LD_INT 6
14579: EQUAL
14580: AND
14581: IFFALSE 14614
// for i in tmpSold do
14583: LD_ADDR_VAR 0 2
14587: PUSH
14588: LD_VAR 0 3
14592: PUSH
14593: FOR_IN
14594: IFFALSE 14612
// ComEnterUnit ( i , building ) ;
14596: LD_VAR 0 2
14600: PPUSH
14601: LD_VAR 0 1
14605: PPUSH
14606: CALL_OW 120
14610: GO 14593
14612: POP
14613: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
14614: LD_VAR 0 1
14618: PPUSH
14619: CALL_OW 266
14623: PUSH
14624: LD_INT 6
14626: EQUAL
14627: PUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 255
14637: PUSH
14638: LD_INT 6
14640: EQUAL
14641: AND
14642: IFFALSE 14700
// begin for i in tmpSci do
14644: LD_ADDR_VAR 0 2
14648: PUSH
14649: LD_VAR 0 6
14653: PUSH
14654: FOR_IN
14655: IFFALSE 14673
// ComEnterUnit ( i , building ) ;
14657: LD_VAR 0 2
14661: PPUSH
14662: LD_VAR 0 1
14666: PPUSH
14667: CALL_OW 120
14671: GO 14654
14673: POP
14674: POP
// ResAllTechs ( 6 , building , 3 ) ;
14675: LD_INT 6
14677: PPUSH
14678: LD_VAR 0 1
14682: PPUSH
14683: LD_INT 3
14685: PPUSH
14686: CALL 5959 0 3
// ruPLab = building ;
14690: LD_ADDR_EXP 22
14694: PUSH
14695: LD_VAR 0 1
14699: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
14700: LD_VAR 0 1
14704: PPUSH
14705: CALL_OW 266
14709: PUSH
14710: LD_INT 2
14712: EQUAL
14713: PUSH
14714: LD_VAR 0 1
14718: PPUSH
14719: CALL_OW 255
14723: PUSH
14724: LD_INT 6
14726: EQUAL
14727: AND
14728: IFFALSE 14779
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
14730: LD_ADDR_VAR 0 5
14734: PUSH
14735: LD_VAR 0 8
14739: PUSH
14740: LD_INT 1
14742: ARRAY
14743: PPUSH
14744: CALL_OW 313
14748: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
14749: LD_VAR 0 5
14753: PPUSH
14754: CALL_OW 121
// wait ( 0 0$1 ) ;
14758: LD_INT 35
14760: PPUSH
14761: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
14765: LD_VAR 0 5
14769: PPUSH
14770: LD_VAR 0 1
14774: PPUSH
14775: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
14779: LD_VAR 0 1
14783: PPUSH
14784: CALL_OW 266
14788: PUSH
14789: LD_INT 32
14791: EQUAL
14792: PUSH
14793: LD_VAR 0 1
14797: PPUSH
14798: CALL_OW 255
14802: PUSH
14803: LD_INT 6
14805: EQUAL
14806: AND
14807: IFFALSE 14859
// begin ComPlaceWeapon ( building , 42 ) ;
14809: LD_VAR 0 1
14813: PPUSH
14814: LD_INT 42
14816: PPUSH
14817: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
14821: LD_VAR 0 7
14825: PUSH
14826: LD_INT 1
14828: ARRAY
14829: PPUSH
14830: CALL_OW 122
// wait ( 0 0$1 ) ;
14834: LD_INT 35
14836: PPUSH
14837: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
14841: LD_VAR 0 7
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PPUSH
14850: LD_VAR 0 1
14854: PPUSH
14855: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
14859: LD_VAR 0 1
14863: PPUSH
14864: CALL_OW 266
14868: PUSH
14869: LD_INT 31
14871: EQUAL
14872: PUSH
14873: LD_VAR 0 1
14877: PPUSH
14878: CALL_OW 255
14882: PUSH
14883: LD_INT 6
14885: EQUAL
14886: AND
14887: IFFALSE 14953
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
14889: LD_VAR 0 7
14893: PUSH
14894: LD_INT 2
14896: ARRAY
14897: PPUSH
14898: CALL_OW 122
// wait ( 0 0$1 ) ;
14902: LD_INT 35
14904: PPUSH
14905: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
14909: LD_VAR 0 7
14913: PUSH
14914: LD_INT 2
14916: ARRAY
14917: PPUSH
14918: LD_VAR 0 1
14922: PPUSH
14923: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
14927: LD_VAR 0 4
14931: PUSH
14932: LD_INT 1
14934: ARRAY
14935: PPUSH
14936: LD_EXP 21
14940: PPUSH
14941: CALL_OW 120
// baseReadyToBuild = 2 ;
14945: LD_ADDR_EXP 20
14949: PUSH
14950: LD_INT 2
14952: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
14953: LD_VAR 0 1
14957: PPUSH
14958: CALL_OW 266
14962: PUSH
14963: LD_INT 32
14965: EQUAL
14966: PUSH
14967: LD_VAR 0 1
14971: PPUSH
14972: CALL_OW 255
14976: PUSH
14977: LD_INT 1
14979: EQUAL
14980: AND
14981: PUSH
14982: LD_EXP 32
14986: PUSH
14987: LD_INT 0
14989: EQUAL
14990: AND
14991: IFFALSE 15236
// begin bunkerDialog = 1 ;
14993: LD_ADDR_EXP 32
14997: PUSH
14998: LD_INT 1
15000: ST_TO_ADDR
// if IsOK ( Claptopn ) then
15001: LD_EXP 11
15005: PPUSH
15006: CALL_OW 302
15010: IFFALSE 15026
// Say ( Claptopn , D11-Eng1-1 ) else
15012: LD_EXP 11
15016: PPUSH
15017: LD_STRING D11-Eng1-1
15019: PPUSH
15020: CALL_OW 88
15024: GO 15222
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15026: LD_INT 22
15028: PUSH
15029: LD_INT 1
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 21
15038: PUSH
15039: LD_INT 1
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: LD_INT 25
15048: PUSH
15049: LD_INT 3
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: LD_INT 26
15058: PUSH
15059: LD_INT 1
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: PPUSH
15072: CALL_OW 69
15076: PUSH
15077: LD_EXP 1
15081: PUSH
15082: EMPTY
15083: LIST
15084: PUSH
15085: LD_INT 0
15087: GREATER
15088: DIFF
15089: IFFALSE 15163
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) else
15091: LD_INT 22
15093: PUSH
15094: LD_INT 1
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 21
15103: PUSH
15104: LD_INT 1
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 25
15113: PUSH
15114: LD_INT 2
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 26
15123: PUSH
15124: LD_INT 1
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: PPUSH
15137: CALL_OW 69
15141: PUSH
15142: LD_EXP 1
15146: PUSH
15147: EMPTY
15148: LIST
15149: DIFF
15150: PPUSH
15151: LD_STRING D11-Eng1-1
15153: PPUSH
15154: LD_STRING D11-Eng1-1
15156: PPUSH
15157: CALL 4606 0 3
15161: GO 15222
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15163: LD_INT 22
15165: PUSH
15166: LD_INT 1
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: LD_INT 21
15175: PUSH
15176: LD_INT 1
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: LD_INT 26
15185: PUSH
15186: LD_INT 1
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: LIST
15197: PPUSH
15198: CALL_OW 69
15202: PUSH
15203: LD_EXP 1
15207: PUSH
15208: EMPTY
15209: LIST
15210: DIFF
15211: PPUSH
15212: LD_STRING D11-Eng1-1
15214: PPUSH
15215: LD_STRING D11-Eng1-1
15217: PPUSH
15218: CALL 4606 0 3
// end ; if energyVDialog = 0 then
15222: LD_EXP 33
15226: PUSH
15227: LD_INT 0
15229: EQUAL
15230: IFFALSE 15236
// EnergyDialog ;
15232: CALL 5011 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
15236: LD_VAR 0 1
15240: PPUSH
15241: CALL_OW 266
15245: PUSH
15246: LD_INT 29
15248: EQUAL
15249: PUSH
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 255
15259: PUSH
15260: LD_INT 1
15262: EQUAL
15263: AND
15264: IFFALSE 15274
// buildOil = 1 ;
15266: LD_ADDR_EXP 34
15270: PUSH
15271: LD_INT 1
15273: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
15274: LD_VAR 0 1
15278: PPUSH
15279: CALL_OW 266
15283: PUSH
15284: LD_INT 26
15286: EQUAL
15287: PUSH
15288: LD_VAR 0 1
15292: PPUSH
15293: CALL_OW 255
15297: PUSH
15298: LD_INT 1
15300: EQUAL
15301: AND
15302: IFFALSE 15312
// buildPower = 1 ;
15304: LD_ADDR_EXP 35
15308: PUSH
15309: LD_INT 1
15311: ST_TO_ADDR
// end ;
15312: PPOPN 8
15314: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
15315: LD_VAR 0 1
15319: PPUSH
15320: CALL_OW 266
15324: PUSH
15325: LD_INT 3
15327: EQUAL
15328: PUSH
15329: LD_VAR 0 1
15333: PPUSH
15334: CALL_OW 255
15338: PUSH
15339: LD_INT 1
15341: EQUAL
15342: AND
15343: PUSH
15344: LD_EXP 31
15348: PUSH
15349: LD_INT 0
15351: EQUAL
15352: AND
15353: IFFALSE 15701
// begin factoryDialog = 1 ;
15355: LD_ADDR_EXP 31
15359: PUSH
15360: LD_INT 1
15362: ST_TO_ADDR
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
15363: LD_INT 47
15365: PPUSH
15366: LD_INT 1
15368: PPUSH
15369: CALL_OW 321
15373: PUSH
15374: LD_INT 1
15376: EQUAL
15377: PUSH
15378: LD_INT 45
15380: PPUSH
15381: LD_INT 1
15383: PPUSH
15384: CALL_OW 321
15388: PUSH
15389: LD_INT 1
15391: EQUAL
15392: AND
15393: IFFALSE 15701
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
15395: LD_INT 22
15397: PUSH
15398: LD_INT 1
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 21
15407: PUSH
15408: LD_INT 3
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 30
15417: PUSH
15418: LD_INT 3
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 24
15427: PUSH
15428: LD_INT 1000
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: PPUSH
15441: CALL_OW 69
15445: PUSH
15446: LD_INT 1
15448: ARRAY
15449: PPUSH
15450: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
15454: LD_EXP 1
15458: PPUSH
15459: LD_STRING D9a-JMM-1
15461: PPUSH
15462: CALL_OW 88
// if IsOK ( Campell ) then
15466: LD_EXP 12
15470: PPUSH
15471: CALL_OW 302
15475: IFFALSE 15491
// Say ( Campell , D9a-Mech1-1 ) else
15477: LD_EXP 12
15481: PPUSH
15482: LD_STRING D9a-Mech1-1
15484: PPUSH
15485: CALL_OW 88
15489: GO 15687
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15491: LD_INT 22
15493: PUSH
15494: LD_INT 1
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 21
15503: PUSH
15504: LD_INT 1
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 25
15513: PUSH
15514: LD_INT 3
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 26
15523: PUSH
15524: LD_INT 1
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: PPUSH
15537: CALL_OW 69
15541: PUSH
15542: LD_EXP 1
15546: PUSH
15547: EMPTY
15548: LIST
15549: PUSH
15550: LD_INT 0
15552: GREATER
15553: DIFF
15554: IFFALSE 15628
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) else
15556: LD_INT 22
15558: PUSH
15559: LD_INT 1
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 21
15568: PUSH
15569: LD_INT 1
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 25
15578: PUSH
15579: LD_INT 3
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 26
15588: PUSH
15589: LD_INT 1
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: PPUSH
15602: CALL_OW 69
15606: PUSH
15607: LD_EXP 1
15611: PUSH
15612: EMPTY
15613: LIST
15614: DIFF
15615: PPUSH
15616: LD_STRING D9a-Mech1-1
15618: PPUSH
15619: LD_STRING D9a-Mech1-1
15621: PPUSH
15622: CALL 4606 0 3
15626: GO 15687
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
15628: LD_INT 22
15630: PUSH
15631: LD_INT 1
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 21
15640: PUSH
15641: LD_INT 1
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: LD_INT 26
15650: PUSH
15651: LD_INT 1
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: LIST
15662: PPUSH
15663: CALL_OW 69
15667: PUSH
15668: LD_EXP 1
15672: PUSH
15673: EMPTY
15674: LIST
15675: DIFF
15676: PPUSH
15677: LD_STRING D9a-Mech1-1
15679: PPUSH
15680: LD_STRING D9a-Mech1-1
15682: PPUSH
15683: CALL 4606 0 3
// end ; if energyVDialog = 0 then
15687: LD_EXP 33
15691: PUSH
15692: LD_INT 0
15694: EQUAL
15695: IFFALSE 15701
// EnergyDialog ;
15697: CALL 5011 0 0
// end ; end ; end ;
15701: PPOPN 1
15703: END
// on UnitDestroyed ( unit ) do var mech ;
15704: LD_INT 0
15706: PPUSH
// begin if unit = JMM then
15707: LD_VAR 0 1
15711: PUSH
15712: LD_EXP 1
15716: EQUAL
15717: IFFALSE 15726
// YouLost ( JMM ) ;
15719: LD_STRING JMM
15721: PPUSH
15722: CALL_OW 104
// if unit = ambdept0 then
15726: LD_VAR 0 1
15730: PUSH
15731: LD_INT 4
15733: EQUAL
15734: IFFALSE 15743
// YouLost ( Base ) ;
15736: LD_STRING Base
15738: PPUSH
15739: CALL_OW 104
// if unit in ruMobile then
15743: LD_VAR 0 1
15747: PUSH
15748: LD_EXP 46
15752: IN
15753: IFFALSE 15771
// ruMobile = ruMobile diff ruMobile ;
15755: LD_ADDR_EXP 46
15759: PUSH
15760: LD_EXP 46
15764: PUSH
15765: LD_EXP 46
15769: DIFF
15770: ST_TO_ADDR
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
15771: LD_VAR 0 1
15775: PPUSH
15776: CALL_OW 247
15780: PUSH
15781: LD_INT 1
15783: EQUAL
15784: PUSH
15785: LD_VAR 0 1
15789: PPUSH
15790: CALL_OW 255
15794: PUSH
15795: LD_INT 1
15797: EQUAL
15798: AND
15799: IFFALSE 15815
// lostCounter = lostCounter + 1 ;
15801: LD_ADDR_EXP 38
15805: PUSH
15806: LD_EXP 38
15810: PUSH
15811: LD_INT 1
15813: PLUS
15814: ST_TO_ADDR
// if ruMech and UnitsInside ( rubfact0 ) < 6 and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
15815: LD_EXP 43
15819: PUSH
15820: LD_INT 24
15822: PPUSH
15823: CALL_OW 313
15827: PUSH
15828: LD_INT 6
15830: LESS
15831: AND
15832: PUSH
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 257
15842: PUSH
15843: LD_INT 3
15845: EQUAL
15846: AND
15847: PUSH
15848: LD_VAR 0 1
15852: PPUSH
15853: CALL_OW 255
15857: PUSH
15858: LD_INT 3
15860: EQUAL
15861: AND
15862: PUSH
15863: LD_INT 24
15865: PPUSH
15866: CALL_OW 302
15870: AND
15871: PUSH
15872: LD_INT 24
15874: PPUSH
15875: CALL_OW 255
15879: PUSH
15880: LD_INT 3
15882: EQUAL
15883: AND
15884: IFFALSE 16013
// begin ruMech := ruMech - 1 ;
15886: LD_ADDR_EXP 43
15890: PUSH
15891: LD_EXP 43
15895: PUSH
15896: LD_INT 1
15898: MINUS
15899: ST_TO_ADDR
// if ruMech = 0 then
15900: LD_EXP 43
15904: PUSH
15905: LD_INT 0
15907: EQUAL
15908: IFFALSE 15912
// exit ;
15910: GO 16013
// wait ( 0 0$40 ) ;
15912: LD_INT 1400
15914: PPUSH
15915: CALL_OW 67
// uc_side = 3 ;
15919: LD_ADDR_OWVAR 20
15923: PUSH
15924: LD_INT 3
15926: ST_TO_ADDR
// uc_nation = 3 ;
15927: LD_ADDR_OWVAR 21
15931: PUSH
15932: LD_INT 3
15934: ST_TO_ADDR
// hc_gallery :=  ;
15935: LD_ADDR_OWVAR 33
15939: PUSH
15940: LD_STRING 
15942: ST_TO_ADDR
// hc_name :=  ;
15943: LD_ADDR_OWVAR 26
15947: PUSH
15948: LD_STRING 
15950: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
15951: LD_INT 0
15953: PPUSH
15954: LD_EXP 16
15958: PPUSH
15959: LD_EXP 17
15963: PPUSH
15964: CALL_OW 12
15968: PPUSH
15969: CALL_OW 383
// mech := CreateHuman ;
15973: LD_ADDR_VAR 0 2
15977: PUSH
15978: CALL_OW 44
15982: ST_TO_ADDR
// PlaceUnitXY ( mech , 124 , 97 , false ) ;
15983: LD_VAR 0 2
15987: PPUSH
15988: LD_INT 124
15990: PPUSH
15991: LD_INT 97
15993: PPUSH
15994: LD_INT 0
15996: PPUSH
15997: CALL_OW 48
// ComEnterUnit ( mech , rubfact0 ) ;
16001: LD_VAR 0 2
16005: PPUSH
16006: LD_INT 24
16008: PPUSH
16009: CALL_OW 120
// end ; end ;
16013: PPOPN 2
16015: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
16016: LD_INT 0
16018: PPUSH
// begin if GetSide ( vehicle ) = 1 then
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 255
16028: PUSH
16029: LD_INT 1
16031: EQUAL
16032: IFFALSE 16048
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
16034: LD_ADDR_EXP 42
16038: PUSH
16039: LD_EXP 42
16043: PUSH
16044: LD_INT 1
16046: PLUS
16047: ST_TO_ADDR
// if GetSide ( vehicle ) = 3 and GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
16048: LD_VAR 0 1
16052: PPUSH
16053: CALL_OW 255
16057: PUSH
16058: LD_INT 3
16060: EQUAL
16061: PUSH
16062: LD_VAR 0 1
16066: PPUSH
16067: CALL_OW 264
16071: PUSH
16072: LD_INT 42
16074: PUSH
16075: LD_INT 43
16077: PUSH
16078: LD_INT 44
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: LIST
16085: IN
16086: AND
16087: IFFALSE 16105
// ruMobile := ruMobile union vehicle ;
16089: LD_ADDR_EXP 46
16093: PUSH
16094: LD_EXP 46
16098: PUSH
16099: LD_VAR 0 1
16103: UNION
16104: ST_TO_ADDR
// if GetWeapon ( vehicle ) = ru_bulldozer then
16105: LD_VAR 0 1
16109: PPUSH
16110: CALL_OW 264
16114: PUSH
16115: LD_INT 53
16117: EQUAL
16118: IFFALSE 16254
// begin uc_side = 3 ;
16120: LD_ADDR_OWVAR 20
16124: PUSH
16125: LD_INT 3
16127: ST_TO_ADDR
// uc_nation = 3 ;
16128: LD_ADDR_OWVAR 21
16132: PUSH
16133: LD_INT 3
16135: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16136: LD_INT 0
16138: PPUSH
16139: LD_EXP 17
16143: PPUSH
16144: CALL_OW 383
// driver := CreateHuman ;
16148: LD_ADDR_VAR 0 3
16152: PUSH
16153: CALL_OW 44
16157: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
16158: LD_VAR 0 3
16162: PPUSH
16163: LD_VAR 0 2
16167: PPUSH
16168: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
16172: LD_VAR 0 1
16176: PPUSH
16177: LD_INT 21
16179: PPUSH
16180: CALL 5227 0 2
// repeat wait ( 0 0$1 ) ;
16184: LD_INT 35
16186: PPUSH
16187: CALL_OW 67
// until not HasTask ( vehicle ) ;
16191: LD_VAR 0 1
16195: PPUSH
16196: CALL_OW 314
16200: NOT
16201: IFFALSE 16184
// driver := IsDrivenBy ( vehicle ) ;
16203: LD_ADDR_VAR 0 3
16207: PUSH
16208: LD_VAR 0 1
16212: PPUSH
16213: CALL_OW 311
16217: ST_TO_ADDR
// AddComMoveXY ( driver , 104 , 73 ) ;
16218: LD_VAR 0 3
16222: PPUSH
16223: LD_INT 104
16225: PPUSH
16226: LD_INT 73
16228: PPUSH
16229: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16233: LD_VAR 0 3
16237: PPUSH
16238: CALL_OW 181
// AddComEnterUnit ( driver , rubfact0 ) ;
16242: LD_VAR 0 3
16246: PPUSH
16247: LD_INT 24
16249: PPUSH
16250: CALL_OW 180
// end ; end ;
16254: PPOPN 3
16256: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and GetWeapon ( unit ) in [ 42 , 43 , 44 ] then
16257: LD_VAR 0 1
16261: PPUSH
16262: CALL_OW 255
16266: PUSH
16267: LD_INT 3
16269: EQUAL
16270: PUSH
16271: LD_VAR 0 1
16275: PPUSH
16276: CALL_OW 247
16280: PUSH
16281: LD_INT 2
16283: EQUAL
16284: AND
16285: PUSH
16286: LD_VAR 0 1
16290: PPUSH
16291: CALL_OW 264
16295: PUSH
16296: LD_INT 42
16298: PUSH
16299: LD_INT 43
16301: PUSH
16302: LD_INT 44
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: LIST
16309: IN
16310: AND
16311: IFFALSE 16360
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16313: LD_INT 24
16315: PPUSH
16316: LD_VAR 0 1
16320: PPUSH
16321: CALL_OW 265
16325: PPUSH
16326: LD_VAR 0 1
16330: PPUSH
16331: CALL_OW 262
16335: PPUSH
16336: LD_VAR 0 1
16340: PPUSH
16341: CALL_OW 263
16345: PPUSH
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 264
16355: PPUSH
16356: CALL_OW 185
// end ;
16360: PPOPN 1
16362: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
16363: LD_VAR 0 1
16367: PPUSH
16368: CALL_OW 255
16372: PUSH
16373: LD_INT 3
16375: EQUAL
16376: PUSH
16377: LD_VAR 0 2
16381: PPUSH
16382: CALL_OW 255
16386: PUSH
16387: LD_INT 3
16389: EQUAL
16390: AND
16391: PUSH
16392: LD_INT 24
16394: PPUSH
16395: CALL_OW 302
16399: AND
16400: PUSH
16401: LD_VAR 0 1
16405: PPUSH
16406: CALL_OW 302
16410: NOT
16411: AND
16412: IFFALSE 16426
// ComEnterUnit ( human , rubfact0 ) ;
16414: LD_VAR 0 2
16418: PPUSH
16419: LD_INT 24
16421: PPUSH
16422: CALL_OW 120
// end ;
16426: PPOPN 2
16428: END
// on EnterBuilding ( b , un ) do begin if b = rubfact0 and GetLives ( un ) < 1000 then
16429: LD_VAR 0 1
16433: PUSH
16434: LD_INT 24
16436: EQUAL
16437: PUSH
16438: LD_VAR 0 2
16442: PPUSH
16443: CALL_OW 256
16447: PUSH
16448: LD_INT 1000
16450: LESS
16451: AND
16452: IFFALSE 16466
// SetLives ( un , 1000 ) ;
16454: LD_VAR 0 2
16458: PPUSH
16459: LD_INT 1000
16461: PPUSH
16462: CALL_OW 234
// end ;
16466: PPOPN 2
16468: END
// on Command ( comandid ) do var i , j , tmp ;
16469: LD_INT 0
16471: PPUSH
16472: PPUSH
16473: PPUSH
// begin SOS_Command ( comandid ) ;
16474: LD_VAR 0 1
16478: PPUSH
16479: CALL 33165 0 1
// if not FilterAllUnits ( [ f_side , 4 ] ) then
16483: LD_INT 22
16485: PUSH
16486: LD_INT 4
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PPUSH
16493: CALL_OW 69
16497: NOT
16498: IFFALSE 16502
// exit ;
16500: GO 16667
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16502: LD_ADDR_VAR 0 2
16506: PUSH
16507: LD_INT 22
16509: PUSH
16510: LD_INT 1
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 2
16519: PUSH
16520: LD_INT 21
16522: PUSH
16523: LD_INT 1
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 21
16532: PUSH
16533: LD_INT 2
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: LIST
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PPUSH
16549: CALL_OW 69
16553: PUSH
16554: FOR_IN
16555: IFFALSE 16665
// begin if GetTaskList ( i ) > 0 then
16557: LD_VAR 0 2
16561: PPUSH
16562: CALL_OW 437
16566: PUSH
16567: LD_INT 0
16569: GREATER
16570: IFFALSE 16663
// begin for j = 1 to GetTaskList ( i ) do
16572: LD_ADDR_VAR 0 3
16576: PUSH
16577: DOUBLE
16578: LD_INT 1
16580: DEC
16581: ST_TO_ADDR
16582: LD_VAR 0 2
16586: PPUSH
16587: CALL_OW 437
16591: PUSH
16592: FOR_TO
16593: IFFALSE 16661
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
16595: LD_ADDR_VAR 0 4
16599: PUSH
16600: LD_VAR 0 2
16604: PPUSH
16605: CALL_OW 437
16609: PUSH
16610: LD_VAR 0 3
16614: ARRAY
16615: PUSH
16616: LD_INT 4
16618: ARRAY
16619: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
16620: LD_VAR 0 4
16624: PPUSH
16625: CALL_OW 255
16629: PUSH
16630: LD_INT 4
16632: EQUAL
16633: PUSH
16634: LD_VAR 0 4
16638: PPUSH
16639: CALL_OW 255
16643: PUSH
16644: LD_INT 0
16646: EQUAL
16647: OR
16648: IFFALSE 16659
// ComStop ( i ) ;
16650: LD_VAR 0 2
16654: PPUSH
16655: CALL_OW 141
// end ;
16659: GO 16592
16661: POP
16662: POP
// end ; end ;
16663: GO 16554
16665: POP
16666: POP
// end ; end_of_file
16667: PPOPN 4
16669: END
// every 10 10$0 do
16670: GO 16672
16672: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 2 + [ 2 , 3 , 4 , 4 ] [ Difficulty ] , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16673: LD_INT 5
16675: PPUSH
16676: LD_INT 3
16678: PPUSH
16679: LD_INT 2
16681: PUSH
16682: LD_INT 2
16684: PUSH
16685: LD_INT 3
16687: PUSH
16688: LD_INT 4
16690: PUSH
16691: LD_INT 4
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: PUSH
16700: LD_OWVAR 67
16704: ARRAY
16705: PLUS
16706: PPUSH
16707: LD_INT 0
16709: PPUSH
16710: LD_EXP 16
16714: PPUSH
16715: LD_EXP 17
16719: PPUSH
16720: CALL_OW 12
16724: PPUSH
16725: LD_INT 4
16727: PPUSH
16728: LD_INT 14
16730: PPUSH
16731: LD_INT 1
16733: PPUSH
16734: LD_INT 2
16736: PPUSH
16737: CALL 6968 0 9
16741: END
// every 20 20$0 do
16742: GO 16744
16744: DISABLE
// RespawnAttackInfantry ( 5 , 3 , 4 + [ 2 , 3 , 4 , 5 ] [ Difficulty ] , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16745: LD_INT 5
16747: PPUSH
16748: LD_INT 3
16750: PPUSH
16751: LD_INT 4
16753: PUSH
16754: LD_INT 2
16756: PUSH
16757: LD_INT 3
16759: PUSH
16760: LD_INT 4
16762: PUSH
16763: LD_INT 5
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: PUSH
16772: LD_OWVAR 67
16776: ARRAY
16777: PLUS
16778: PPUSH
16779: LD_INT 2
16781: PPUSH
16782: LD_EXP 16
16786: PPUSH
16787: LD_EXP 17
16791: PPUSH
16792: CALL_OW 12
16796: PPUSH
16797: LD_INT 4
16799: PPUSH
16800: LD_INT 14
16802: PPUSH
16803: LD_INT 1
16805: PPUSH
16806: LD_INT 1
16808: PPUSH
16809: CALL 6968 0 9
16813: END
// every 25 25$0 do var i , un , veh , hex , tmp ;
16814: GO 16816
16816: DISABLE
16817: LD_INT 0
16819: PPUSH
16820: PPUSH
16821: PPUSH
16822: PPUSH
16823: PPUSH
// begin hex := [ 123 , 95 ] ;
16824: LD_ADDR_VAR 0 4
16828: PUSH
16829: LD_INT 123
16831: PUSH
16832: LD_INT 95
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: ST_TO_ADDR
// tmp := [ ] ;
16839: LD_ADDR_VAR 0 5
16843: PUSH
16844: EMPTY
16845: ST_TO_ADDR
// if Difficulty > 1 then
16846: LD_OWVAR 67
16850: PUSH
16851: LD_INT 1
16853: GREATER
16854: IFFALSE 16864
// specAttack := true ;
16856: LD_ADDR_EXP 47
16860: PUSH
16861: LD_INT 1
16863: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
16864: LD_ADDR_VAR 0 1
16868: PUSH
16869: DOUBLE
16870: LD_INT 1
16872: DEC
16873: ST_TO_ADDR
16874: LD_INT 4
16876: PUSH
16877: LD_INT 5
16879: PUSH
16880: LD_INT 6
16882: PUSH
16883: LD_INT 7
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: PUSH
16892: LD_OWVAR 67
16896: ARRAY
16897: PUSH
16898: FOR_TO
16899: IFFALSE 17197
// begin uc_side := 5 ;
16901: LD_ADDR_OWVAR 20
16905: PUSH
16906: LD_INT 5
16908: ST_TO_ADDR
// uc_nation := 3 ;
16909: LD_ADDR_OWVAR 21
16913: PUSH
16914: LD_INT 3
16916: ST_TO_ADDR
// vc_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod Difficulty + 1 ] ;
16917: LD_ADDR_OWVAR 37
16921: PUSH
16922: LD_INT 21
16924: PUSH
16925: LD_INT 22
16927: PUSH
16928: LD_INT 23
16930: PUSH
16931: LD_INT 24
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: PUSH
16940: LD_VAR 0 1
16944: PUSH
16945: LD_OWVAR 67
16949: MOD
16950: PUSH
16951: LD_INT 1
16953: PLUS
16954: ARRAY
16955: ST_TO_ADDR
// vc_engine := engine_combustion ;
16956: LD_ADDR_OWVAR 39
16960: PUSH
16961: LD_INT 1
16963: ST_TO_ADDR
// vc_control := control_manual ;
16964: LD_ADDR_OWVAR 38
16968: PUSH
16969: LD_INT 1
16971: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_gun ] [ i mod Difficulty + 1 ] ;
16972: LD_ADDR_OWVAR 40
16976: PUSH
16977: LD_INT 42
16979: PUSH
16980: LD_INT 43
16982: PUSH
16983: LD_INT 44
16985: PUSH
16986: LD_INT 44
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: PUSH
16995: LD_VAR 0 1
16999: PUSH
17000: LD_OWVAR 67
17004: MOD
17005: PUSH
17006: LD_INT 1
17008: PLUS
17009: ARRAY
17010: ST_TO_ADDR
// veh := CreateVehicle ;
17011: LD_ADDR_VAR 0 3
17015: PUSH
17016: CALL_OW 45
17020: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17021: LD_VAR 0 3
17025: PPUSH
17026: LD_INT 5
17028: PPUSH
17029: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
17033: LD_INT 35
17035: PPUSH
17036: CALL_OW 67
// until HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 ;
17040: LD_VAR 0 4
17044: PUSH
17045: LD_INT 1
17047: ARRAY
17048: PPUSH
17049: LD_VAR 0 4
17053: PUSH
17054: LD_INT 2
17056: ARRAY
17057: PPUSH
17058: CALL_OW 428
17062: PUSH
17063: LD_INT 0
17065: EQUAL
17066: IFFALSE 17033
// PlaceUnitXY ( veh , hex [ 1 ] , hex [ 2 ] , false ) ;
17068: LD_VAR 0 3
17072: PPUSH
17073: LD_VAR 0 4
17077: PUSH
17078: LD_INT 1
17080: ARRAY
17081: PPUSH
17082: LD_VAR 0 4
17086: PUSH
17087: LD_INT 2
17089: ARRAY
17090: PPUSH
17091: LD_INT 0
17093: PPUSH
17094: CALL_OW 48
// uc_side := 5 ;
17098: LD_ADDR_OWVAR 20
17102: PUSH
17103: LD_INT 5
17105: ST_TO_ADDR
// uc_nation := 3 ;
17106: LD_ADDR_OWVAR 21
17110: PUSH
17111: LD_INT 3
17113: ST_TO_ADDR
// PrepareMechanic ( false , 2 + Difficulty ) ;
17114: LD_INT 0
17116: PPUSH
17117: LD_INT 2
17119: PUSH
17120: LD_OWVAR 67
17124: PLUS
17125: PPUSH
17126: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
17130: CALL_OW 44
17134: PPUSH
17135: LD_VAR 0 3
17139: PPUSH
17140: CALL_OW 52
// ComMoveXY ( veh , 101 , 77 ) ;
17144: LD_VAR 0 3
17148: PPUSH
17149: LD_INT 101
17151: PPUSH
17152: LD_INT 77
17154: PPUSH
17155: CALL_OW 111
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17159: LD_ADDR_VAR 0 5
17163: PUSH
17164: LD_VAR 0 5
17168: PPUSH
17169: LD_VAR 0 5
17173: PUSH
17174: LD_INT 1
17176: PLUS
17177: PPUSH
17178: LD_VAR 0 3
17182: PPUSH
17183: CALL_OW 1
17187: ST_TO_ADDR
// wait ( 0 0$3 ) ;
17188: LD_INT 105
17190: PPUSH
17191: CALL_OW 67
// end ;
17195: GO 16898
17197: POP
17198: POP
// repeat wait ( 0 0$1 ) ;
17199: LD_INT 35
17201: PPUSH
17202: CALL_OW 67
// for i in tmp do
17206: LD_ADDR_VAR 0 1
17210: PUSH
17211: LD_VAR 0 5
17215: PUSH
17216: FOR_IN
17217: IFFALSE 17285
// if not IsOk ( i ) then
17219: LD_VAR 0 1
17223: PPUSH
17224: CALL_OW 302
17228: NOT
17229: IFFALSE 17249
// tmp := tmp diff i else
17231: LD_ADDR_VAR 0 5
17235: PUSH
17236: LD_VAR 0 5
17240: PUSH
17241: LD_VAR 0 1
17245: DIFF
17246: ST_TO_ADDR
17247: GO 17283
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17249: LD_VAR 0 1
17253: PPUSH
17254: LD_INT 22
17256: PUSH
17257: LD_INT 1
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PPUSH
17264: CALL_OW 69
17268: PPUSH
17269: LD_VAR 0 1
17273: PPUSH
17274: CALL_OW 74
17278: PPUSH
17279: CALL_OW 115
17283: GO 17216
17285: POP
17286: POP
// until not tmp ;
17287: LD_VAR 0 5
17291: NOT
17292: IFFALSE 17199
// end ;
17294: PPOPN 5
17296: END
// every 0 0$1 trigger specAttack do var un , tmp , i , eng ;
17297: LD_EXP 47
17301: IFFALSE 17668
17303: GO 17305
17305: DISABLE
17306: LD_INT 0
17308: PPUSH
17309: PPUSH
17310: PPUSH
17311: PPUSH
// begin wait ( 0 0$20 ) ;
17312: LD_INT 700
17314: PPUSH
17315: CALL_OW 67
// uc_side := 5 ;
17319: LD_ADDR_OWVAR 20
17323: PUSH
17324: LD_INT 5
17326: ST_TO_ADDR
// uc_nation := 3 ;
17327: LD_ADDR_OWVAR 21
17331: PUSH
17332: LD_INT 3
17334: ST_TO_ADDR
// InitHc ;
17335: CALL_OW 19
// hc_importance := 0 ;
17339: LD_ADDR_OWVAR 32
17343: PUSH
17344: LD_INT 0
17346: ST_TO_ADDR
// tmp := [ ] ;
17347: LD_ADDR_VAR 0 2
17351: PUSH
17352: EMPTY
17353: ST_TO_ADDR
// PrepareHuman ( false , 2 , 6 ) ;
17354: LD_INT 0
17356: PPUSH
17357: LD_INT 2
17359: PPUSH
17360: LD_INT 6
17362: PPUSH
17363: CALL_OW 380
// eng := CreateHuman ;
17367: LD_ADDR_VAR 0 4
17371: PUSH
17372: CALL_OW 44
17376: ST_TO_ADDR
// PlaceUnitXYR ( eng , 78 , 2 , 4 , false ) ;
17377: LD_VAR 0 4
17381: PPUSH
17382: LD_INT 78
17384: PPUSH
17385: LD_INT 2
17387: PPUSH
17388: LD_INT 4
17390: PPUSH
17391: LD_INT 0
17393: PPUSH
17394: CALL_OW 50
// for i = 1 to 2 + Difficulty do
17398: LD_ADDR_VAR 0 3
17402: PUSH
17403: DOUBLE
17404: LD_INT 1
17406: DEC
17407: ST_TO_ADDR
17408: LD_INT 2
17410: PUSH
17411: LD_OWVAR 67
17415: PLUS
17416: PUSH
17417: FOR_TO
17418: IFFALSE 17503
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
17420: LD_INT 0
17422: PPUSH
17423: LD_INT 1
17425: PPUSH
17426: LD_INT 4
17428: PUSH
17429: LD_INT 5
17431: PUSH
17432: LD_INT 6
17434: PUSH
17435: LD_INT 6
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: PUSH
17444: LD_OWVAR 67
17448: ARRAY
17449: PPUSH
17450: CALL_OW 380
// un := CreateHuman ;
17454: LD_ADDR_VAR 0 1
17458: PUSH
17459: CALL_OW 44
17463: ST_TO_ADDR
// PlaceUnitXYR ( un , 78 , 2 , 4 , false ) ;
17464: LD_VAR 0 1
17468: PPUSH
17469: LD_INT 78
17471: PPUSH
17472: LD_INT 2
17474: PPUSH
17475: LD_INT 4
17477: PPUSH
17478: LD_INT 0
17480: PPUSH
17481: CALL_OW 50
// tmp := tmp ^ un ;
17485: LD_ADDR_VAR 0 2
17489: PUSH
17490: LD_VAR 0 2
17494: PUSH
17495: LD_VAR 0 1
17499: ADD
17500: ST_TO_ADDR
// end ;
17501: GO 17417
17503: POP
17504: POP
// ComMoveXY ( tmp , 49 , 3 ) ;
17505: LD_VAR 0 2
17509: PPUSH
17510: LD_INT 49
17512: PPUSH
17513: LD_INT 3
17515: PPUSH
17516: CALL_OW 111
// wait ( 0 0$2 ) ;
17520: LD_INT 70
17522: PPUSH
17523: CALL_OW 67
// ComMoveXY ( eng , 49 , 3 ) ;
17527: LD_VAR 0 4
17531: PPUSH
17532: LD_INT 49
17534: PPUSH
17535: LD_INT 3
17537: PPUSH
17538: CALL_OW 111
// AddComDismantle ( eng , ambdept0 ) ;
17542: LD_VAR 0 4
17546: PPUSH
17547: LD_INT 4
17549: PPUSH
17550: CALL_OW 227
// wait ( 0 0$10 ) ;
17554: LD_INT 350
17556: PPUSH
17557: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17561: LD_INT 35
17563: PPUSH
17564: CALL_OW 67
// for i in tmp do
17568: LD_ADDR_VAR 0 3
17572: PUSH
17573: LD_VAR 0 2
17577: PUSH
17578: FOR_IN
17579: IFFALSE 17659
// if not IsOk ( i ) then
17581: LD_VAR 0 3
17585: PPUSH
17586: CALL_OW 302
17590: NOT
17591: IFFALSE 17611
// tmp := tmp diff i else
17593: LD_ADDR_VAR 0 2
17597: PUSH
17598: LD_VAR 0 2
17602: PUSH
17603: LD_VAR 0 3
17607: DIFF
17608: ST_TO_ADDR
17609: GO 17657
// if not HasTask ( i ) then
17611: LD_VAR 0 3
17615: PPUSH
17616: CALL_OW 314
17620: NOT
17621: IFFALSE 17657
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
17623: LD_VAR 0 3
17627: PPUSH
17628: LD_INT 22
17630: PUSH
17631: LD_INT 1
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PPUSH
17638: CALL_OW 69
17642: PPUSH
17643: LD_VAR 0 3
17647: PPUSH
17648: CALL_OW 74
17652: PPUSH
17653: CALL_OW 115
17657: GO 17578
17659: POP
17660: POP
// until not tmp ;
17661: LD_VAR 0 2
17665: NOT
17666: IFFALSE 17561
// end ; end_of_file
17668: PPOPN 4
17670: END
// every 0 0$1 trigger startTimer = 1 do
17671: LD_EXP 30
17675: PUSH
17676: LD_INT 1
17678: EQUAL
17679: IFFALSE 17809
17681: GO 17683
17683: DISABLE
// begin enable ;
17684: ENABLE
// if timerStatus = 1 then
17685: LD_EXP 29
17689: PUSH
17690: LD_INT 1
17692: EQUAL
17693: IFFALSE 17726
// begin timeToSupport = timeToSupport - 0 0$01 ;
17695: LD_ADDR_EXP 28
17699: PUSH
17700: LD_EXP 28
17704: PUSH
17705: LD_INT 35
17707: MINUS
17708: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17709: LD_ADDR_OWVAR 47
17713: PUSH
17714: LD_STRING #Am04-1
17716: PUSH
17717: LD_EXP 28
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: ST_TO_ADDR
// end ; if timerStatus = 2 then
17726: LD_EXP 29
17730: PUSH
17731: LD_INT 2
17733: EQUAL
17734: IFFALSE 17767
// begin timeToSupport = timeToSupport - 0 0$01 ;
17736: LD_ADDR_EXP 28
17740: PUSH
17741: LD_EXP 28
17745: PUSH
17746: LD_INT 35
17748: MINUS
17749: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17750: LD_ADDR_OWVAR 47
17754: PUSH
17755: LD_STRING #Am04-2
17757: PUSH
17758: LD_EXP 28
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: ST_TO_ADDR
// end ; if timerStatus = 3 then
17767: LD_EXP 29
17771: PUSH
17772: LD_INT 3
17774: EQUAL
17775: IFFALSE 17791
// timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17777: LD_ADDR_EXP 27
17781: PUSH
17782: LD_EXP 27
17786: PUSH
17787: LD_INT 35
17789: MINUS
17790: ST_TO_ADDR
// if timerStatus = 4 then
17791: LD_EXP 29
17795: PUSH
17796: LD_INT 4
17798: EQUAL
17799: IFFALSE 17809
// display_strings =  ;
17801: LD_ADDR_OWVAR 47
17805: PUSH
17806: LD_STRING 
17808: ST_TO_ADDR
// end ; end_of_file
17809: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 , 11 ] [ Difficulty ] do var i , tmp , p ;
17810: LD_EXP 15
17814: PPUSH
17815: CALL_OW 301
17819: PUSH
17820: LD_INT 22
17822: PUSH
17823: LD_INT 3
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 21
17832: PUSH
17833: LD_INT 1
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PPUSH
17844: CALL_OW 69
17848: PUSH
17849: LD_INT 14
17851: PUSH
17852: LD_INT 13
17854: PUSH
17855: LD_INT 12
17857: PUSH
17858: LD_INT 11
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: PUSH
17867: LD_OWVAR 67
17871: ARRAY
17872: LESS
17873: AND
17874: IFFALSE 18460
17876: GO 17878
17878: DISABLE
17879: LD_INT 0
17881: PPUSH
17882: PPUSH
17883: PPUSH
// begin AIEnable = 0 ;
17884: LD_ADDR_EXP 37
17888: PUSH
17889: LD_INT 0
17891: ST_TO_ADDR
// escapeAvalaible = 1 ;
17892: LD_ADDR_EXP 40
17896: PUSH
17897: LD_INT 1
17899: ST_TO_ADDR
// Video ( true ) ;
17900: LD_INT 1
17902: PPUSH
17903: CALL 73783 0 1
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17907: LD_INT 3
17909: PPUSH
17910: LD_INT 1
17912: PPUSH
17913: LD_INT 1
17915: PPUSH
17916: LD_INT 0
17918: PPUSH
17919: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17923: LD_INT 6
17925: PPUSH
17926: LD_INT 1
17928: PPUSH
17929: LD_INT 1
17931: PPUSH
17932: LD_INT 0
17934: PPUSH
17935: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17939: LD_INT 5
17941: PPUSH
17942: LD_INT 1
17944: PPUSH
17945: LD_INT 1
17947: PPUSH
17948: LD_INT 0
17950: PPUSH
17951: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17955: LD_INT 3
17957: PPUSH
17958: LD_INT 1
17960: PPUSH
17961: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17965: LD_INT 97
17967: PPUSH
17968: LD_INT 91
17970: PPUSH
17971: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17975: LD_INT 22
17977: PUSH
17978: LD_INT 3
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 21
17987: PUSH
17988: LD_INT 1
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PPUSH
17999: CALL_OW 69
18003: PPUSH
18004: CALL_OW 121
// wait ( 0 0$01 ) ;
18008: LD_INT 35
18010: PPUSH
18011: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18015: LD_INT 22
18017: PUSH
18018: LD_INT 3
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 21
18027: PUSH
18028: LD_INT 1
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PPUSH
18039: CALL_OW 69
18043: PPUSH
18044: LD_INT 124
18046: PPUSH
18047: LD_INT 98
18049: PPUSH
18050: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18054: LD_INT 22
18056: PUSH
18057: LD_INT 5
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: LD_INT 21
18066: PUSH
18067: LD_INT 1
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PPUSH
18078: CALL_OW 69
18082: PPUSH
18083: CALL_OW 121
// wait ( 0 0$01 ) ;
18087: LD_INT 35
18089: PPUSH
18090: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18094: LD_INT 22
18096: PUSH
18097: LD_INT 5
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 21
18106: PUSH
18107: LD_INT 1
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PPUSH
18118: CALL_OW 69
18122: PPUSH
18123: LD_INT 124
18125: PPUSH
18126: LD_INT 98
18128: PPUSH
18129: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18133: LD_INT 22
18135: PUSH
18136: LD_INT 6
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 21
18145: PUSH
18146: LD_INT 1
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PPUSH
18157: CALL_OW 69
18161: PPUSH
18162: CALL_OW 121
// wait ( 0 0$01 ) ;
18166: LD_INT 35
18168: PPUSH
18169: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18173: LD_INT 22
18175: PUSH
18176: LD_INT 6
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 21
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PPUSH
18197: CALL_OW 69
18201: PPUSH
18202: LD_INT 124
18204: PPUSH
18205: LD_INT 98
18207: PPUSH
18208: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 96 ) ;
18212: LD_INT 22
18214: PUSH
18215: LD_INT 1
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 21
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PPUSH
18236: CALL_OW 69
18240: PPUSH
18241: LD_INT 124
18243: PPUSH
18244: LD_INT 96
18246: PPUSH
18247: CALL_OW 114
// wait ( 0 0$1 ) ;
18251: LD_INT 35
18253: PPUSH
18254: CALL_OW 67
// CenterOnXY ( 124 , 96 ) ;
18258: LD_INT 124
18260: PPUSH
18261: LD_INT 96
18263: PPUSH
18264: CALL_OW 84
// p := 0 0$0 ;
18268: LD_ADDR_VAR 0 3
18272: PUSH
18273: LD_INT 0
18275: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_human ] ] ) ;
18276: LD_ADDR_VAR 0 2
18280: PUSH
18281: LD_INT 2
18283: PUSH
18284: LD_INT 22
18286: PUSH
18287: LD_INT 3
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 22
18296: PUSH
18297: LD_INT 6
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 21
18311: PUSH
18312: LD_INT 1
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PPUSH
18323: CALL_OW 69
18327: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18328: LD_INT 35
18330: PPUSH
18331: CALL_OW 67
// p := p + 0 0$1 ;
18335: LD_ADDR_VAR 0 3
18339: PUSH
18340: LD_VAR 0 3
18344: PUSH
18345: LD_INT 35
18347: PLUS
18348: ST_TO_ADDR
// ComMoveToArea ( tmp , RussianEscape ) ;
18349: LD_VAR 0 2
18353: PPUSH
18354: LD_INT 5
18356: PPUSH
18357: CALL_OW 113
// for i in tmp do
18361: LD_ADDR_VAR 0 1
18365: PUSH
18366: LD_VAR 0 2
18370: PUSH
18371: FOR_IN
18372: IFFALSE 18399
// if IsInArea ( tmp , RussianEscape ) then
18374: LD_VAR 0 2
18378: PPUSH
18379: LD_INT 5
18381: PPUSH
18382: CALL_OW 308
18386: IFFALSE 18397
// RemoveUnit ( i ) ;
18388: LD_VAR 0 1
18392: PPUSH
18393: CALL_OW 64
18397: GO 18371
18399: POP
18400: POP
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
18401: LD_INT 23
18403: PUSH
18404: LD_INT 3
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 21
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 24
18423: PUSH
18424: LD_INT 250
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: LIST
18435: PPUSH
18436: CALL_OW 69
18440: PUSH
18441: LD_INT 0
18443: EQUAL
18444: PUSH
18445: LD_VAR 0 3
18449: PUSH
18450: LD_INT 245
18452: GREATEREQUAL
18453: OR
18454: IFFALSE 18328
// FinishMission ;
18456: CALL 18463 0 0
// end ;
18460: PPOPN 3
18462: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
18463: LD_INT 0
18465: PPUSH
18466: PPUSH
18467: PPUSH
18468: PPUSH
18469: PPUSH
// if not vehicleProduceCounter then
18470: LD_EXP 42
18474: NOT
18475: IFFALSE 18484
// SetAchievement ( ACH_INFANTRY ) ;
18477: LD_STRING ACH_INFANTRY
18479: PPUSH
18480: CALL_OW 543
// if tick <= 20 20$00 then
18484: LD_OWVAR 1
18488: PUSH
18489: LD_INT 42000
18491: LESSEQUAL
18492: IFFALSE 18508
// begin wait ( 3 ) ;
18494: LD_INT 3
18496: PPUSH
18497: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
18501: LD_STRING ACH_ASPEED_4
18503: PPUSH
18504: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
18508: LD_INT 22
18510: PPUSH
18511: CALL 19152 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18515: LD_INT 69
18517: PPUSH
18518: LD_INT 1
18520: PPUSH
18521: CALL_OW 321
18525: PPUSH
18526: LD_STRING GatlingInGamma
18528: PPUSH
18529: CALL_OW 39
// m1 := false ;
18533: LD_ADDR_VAR 0 3
18537: PUSH
18538: LD_INT 0
18540: ST_TO_ADDR
// m2 := false ;
18541: LD_ADDR_VAR 0 4
18545: PUSH
18546: LD_INT 0
18548: ST_TO_ADDR
// m3 := false ;
18549: LD_ADDR_VAR 0 5
18553: PUSH
18554: LD_INT 0
18556: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
18557: LD_EXP 34
18561: PUSH
18562: LD_INT 1
18564: EQUAL
18565: PUSH
18566: LD_EXP 35
18570: PUSH
18571: LD_INT 1
18573: EQUAL
18574: AND
18575: IFFALSE 18597
// begin AddMedal ( oil , 1 ) ;
18577: LD_STRING oil
18579: PPUSH
18580: LD_INT 1
18582: PPUSH
18583: CALL_OW 101
// m1 := true ;
18587: LD_ADDR_VAR 0 3
18591: PUSH
18592: LD_INT 1
18594: ST_TO_ADDR
// end else
18595: GO 18690
// begin if buildOil = 1 and buildPower = 0 then
18597: LD_EXP 34
18601: PUSH
18602: LD_INT 1
18604: EQUAL
18605: PUSH
18606: LD_EXP 35
18610: PUSH
18611: LD_INT 0
18613: EQUAL
18614: AND
18615: IFFALSE 18628
// AddMedal ( oil , - 1 ) ;
18617: LD_STRING oil
18619: PPUSH
18620: LD_INT 1
18622: NEG
18623: PPUSH
18624: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18628: LD_EXP 34
18632: PUSH
18633: LD_INT 0
18635: EQUAL
18636: PUSH
18637: LD_EXP 35
18641: PUSH
18642: LD_INT 1
18644: EQUAL
18645: AND
18646: IFFALSE 18659
// AddMedal ( oil , - 2 ) ;
18648: LD_STRING oil
18650: PPUSH
18651: LD_INT 2
18653: NEG
18654: PPUSH
18655: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18659: LD_EXP 34
18663: PUSH
18664: LD_INT 0
18666: EQUAL
18667: PUSH
18668: LD_EXP 35
18672: PUSH
18673: LD_INT 0
18675: EQUAL
18676: AND
18677: IFFALSE 18690
// AddMedal ( oil , - 3 ) ;
18679: LD_STRING oil
18681: PPUSH
18682: LD_INT 3
18684: NEG
18685: PPUSH
18686: CALL_OW 101
// end ; if lostCounter > 3 then
18690: LD_EXP 38
18694: PUSH
18695: LD_INT 3
18697: GREATER
18698: IFFALSE 18713
// AddMedal ( deaths , - 1 ) else
18700: LD_STRING deaths
18702: PPUSH
18703: LD_INT 1
18705: NEG
18706: PPUSH
18707: CALL_OW 101
18711: GO 18731
// begin AddMedal ( deaths , 1 ) ;
18713: LD_STRING deaths
18715: PPUSH
18716: LD_INT 1
18718: PPUSH
18719: CALL_OW 101
// m2 := true ;
18723: LD_ADDR_VAR 0 4
18727: PUSH
18728: LD_INT 1
18730: ST_TO_ADDR
// end ; if honor = 1 then
18731: LD_EXP 39
18735: PUSH
18736: LD_INT 1
18738: EQUAL
18739: IFFALSE 18761
// begin AddMedal ( honour , 1 ) ;
18741: LD_STRING honour
18743: PPUSH
18744: LD_INT 1
18746: PPUSH
18747: CALL_OW 101
// m3 := true ;
18751: LD_ADDR_VAR 0 5
18755: PUSH
18756: LD_INT 1
18758: ST_TO_ADDR
// end else
18759: GO 18772
// AddMedal ( honour , - 1 ) ;
18761: LD_STRING honour
18763: PPUSH
18764: LD_INT 1
18766: NEG
18767: PPUSH
18768: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
18772: LD_VAR 0 3
18776: PUSH
18777: LD_VAR 0 4
18781: AND
18782: PUSH
18783: LD_VAR 0 5
18787: AND
18788: PUSH
18789: LD_OWVAR 67
18793: PUSH
18794: LD_INT 3
18796: GREATEREQUAL
18797: AND
18798: IFFALSE 18810
// SetAchievementEX ( ACH_AMER , 4 ) ;
18800: LD_STRING ACH_AMER
18802: PPUSH
18803: LD_INT 4
18805: PPUSH
18806: CALL_OW 564
// GiveMedals ( Main ) ;
18810: LD_STRING Main
18812: PPUSH
18813: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18817: LD_INT 22
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 23
18829: PUSH
18830: LD_INT 1
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 21
18839: PUSH
18840: LD_INT 1
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: PPUSH
18852: CALL_OW 69
18856: PPUSH
18857: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18861: LD_EXP 1
18865: PPUSH
18866: LD_EXP 48
18870: PUSH
18871: LD_STRING JMM
18873: STR
18874: PPUSH
18875: CALL_OW 38
// if IsOK ( Bobby ) then
18879: LD_EXP 2
18883: PPUSH
18884: CALL_OW 302
18888: IFFALSE 18908
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18890: LD_EXP 2
18894: PPUSH
18895: LD_EXP 48
18899: PUSH
18900: LD_STRING Bobby
18902: STR
18903: PPUSH
18904: CALL_OW 38
// if IsOK ( Cyrus ) then
18908: LD_EXP 3
18912: PPUSH
18913: CALL_OW 302
18917: IFFALSE 18937
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18919: LD_EXP 3
18923: PPUSH
18924: LD_EXP 48
18928: PUSH
18929: LD_STRING Cyrus
18931: STR
18932: PPUSH
18933: CALL_OW 38
// if IsOK ( Lisa ) then
18937: LD_EXP 4
18941: PPUSH
18942: CALL_OW 302
18946: IFFALSE 18966
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18948: LD_EXP 4
18952: PPUSH
18953: LD_EXP 48
18957: PUSH
18958: LD_STRING Lisa
18960: STR
18961: PPUSH
18962: CALL_OW 38
// if IsOK ( Brown ) then
18966: LD_EXP 7
18970: PPUSH
18971: CALL_OW 302
18975: IFFALSE 18995
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18977: LD_EXP 7
18981: PPUSH
18982: LD_EXP 48
18986: PUSH
18987: LD_STRING Brown
18989: STR
18990: PPUSH
18991: CALL_OW 38
// if not IsDead ( Donaldson ) then
18995: LD_EXP 13
18999: PPUSH
19000: CALL_OW 301
19004: NOT
19005: IFFALSE 19025
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19007: LD_EXP 13
19011: PPUSH
19012: LD_EXP 48
19016: PUSH
19017: LD_STRING Donaldson
19019: STR
19020: PPUSH
19021: CALL_OW 38
// if not IsDead ( Frank ) then
19025: LD_EXP 5
19029: PPUSH
19030: CALL_OW 301
19034: NOT
19035: IFFALSE 19055
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19037: LD_EXP 5
19041: PPUSH
19042: LD_EXP 48
19046: PUSH
19047: LD_STRING Frank
19049: STR
19050: PPUSH
19051: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19055: LD_INT 50
19057: PUSH
19058: EMPTY
19059: LIST
19060: PUSH
19061: LD_INT 22
19063: PUSH
19064: LD_INT 1
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 21
19073: PUSH
19074: LD_INT 1
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: LIST
19085: PPUSH
19086: CALL_OW 69
19090: PUSH
19091: LD_EXP 1
19095: PUSH
19096: LD_EXP 2
19100: PUSH
19101: LD_EXP 3
19105: PUSH
19106: LD_EXP 4
19110: PUSH
19111: LD_EXP 7
19115: PUSH
19116: LD_EXP 13
19120: PUSH
19121: LD_EXP 5
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: DIFF
19135: PPUSH
19136: LD_STRING 04_other_survivors
19138: PPUSH
19139: CALL_OW 38
// YouWin ;
19143: CALL_OW 103
// end ;
19147: LD_VAR 0 1
19151: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19152: LD_INT 0
19154: PPUSH
19155: PPUSH
19156: PPUSH
19157: PPUSH
// gammaBase = [ ] ;
19158: LD_ADDR_VAR 0 4
19162: PUSH
19163: EMPTY
19164: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
19165: LD_ADDR_VAR 0 5
19169: PUSH
19170: LD_VAR 0 1
19174: PPUSH
19175: LD_INT 22
19177: PUSH
19178: LD_INT 1
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 21
19187: PUSH
19188: LD_INT 3
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PPUSH
19199: CALL_OW 70
19203: ST_TO_ADDR
// for i in buildings do
19204: LD_ADDR_VAR 0 3
19208: PUSH
19209: LD_VAR 0 5
19213: PUSH
19214: FOR_IN
19215: IFFALSE 19552
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19217: LD_VAR 0 3
19221: PPUSH
19222: CALL_OW 266
19226: PUSH
19227: LD_INT 6
19229: PUSH
19230: LD_INT 7
19232: PUSH
19233: LD_INT 8
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: LIST
19240: IN
19241: IFFALSE 19355
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19243: LD_ADDR_VAR 0 4
19247: PUSH
19248: LD_VAR 0 4
19252: PUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: CALL_OW 266
19262: PUSH
19263: LD_VAR 0 3
19267: PPUSH
19268: CALL_OW 250
19272: PUSH
19273: LD_VAR 0 3
19277: PPUSH
19278: CALL_OW 251
19282: PUSH
19283: LD_VAR 0 3
19287: PPUSH
19288: CALL_OW 254
19292: PUSH
19293: LD_VAR 0 3
19297: PPUSH
19298: CALL_OW 267
19302: PUSH
19303: LD_VAR 0 3
19307: PPUSH
19308: CALL_OW 248
19312: PUSH
19313: LD_VAR 0 3
19317: PPUSH
19318: LD_INT 1
19320: PPUSH
19321: CALL_OW 268
19325: PUSH
19326: LD_VAR 0 3
19330: PPUSH
19331: LD_INT 2
19333: PPUSH
19334: CALL_OW 268
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: PUSH
19349: EMPTY
19350: LIST
19351: ADD
19352: ST_TO_ADDR
19353: GO 19550
// if GetBType ( i ) in [ b_bunker ] then
19355: LD_VAR 0 3
19359: PPUSH
19360: CALL_OW 266
19364: PUSH
19365: LD_INT 32
19367: PUSH
19368: EMPTY
19369: LIST
19370: IN
19371: IFFALSE 19468
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19373: LD_ADDR_VAR 0 4
19377: PUSH
19378: LD_VAR 0 4
19382: PUSH
19383: LD_VAR 0 3
19387: PPUSH
19388: CALL_OW 266
19392: PUSH
19393: LD_VAR 0 3
19397: PPUSH
19398: CALL_OW 250
19402: PUSH
19403: LD_VAR 0 3
19407: PPUSH
19408: CALL_OW 251
19412: PUSH
19413: LD_VAR 0 3
19417: PPUSH
19418: CALL_OW 254
19422: PUSH
19423: LD_VAR 0 3
19427: PPUSH
19428: CALL_OW 267
19432: PUSH
19433: LD_VAR 0 3
19437: PPUSH
19438: CALL_OW 248
19442: PUSH
19443: LD_VAR 0 3
19447: PPUSH
19448: CALL_OW 269
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: PUSH
19462: EMPTY
19463: LIST
19464: ADD
19465: ST_TO_ADDR
19466: GO 19550
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19468: LD_ADDR_VAR 0 4
19472: PUSH
19473: LD_VAR 0 4
19477: PUSH
19478: LD_VAR 0 3
19482: PPUSH
19483: CALL_OW 266
19487: PUSH
19488: LD_VAR 0 3
19492: PPUSH
19493: CALL_OW 250
19497: PUSH
19498: LD_VAR 0 3
19502: PPUSH
19503: CALL_OW 251
19507: PUSH
19508: LD_VAR 0 3
19512: PPUSH
19513: CALL_OW 254
19517: PUSH
19518: LD_VAR 0 3
19522: PPUSH
19523: CALL_OW 267
19527: PUSH
19528: LD_VAR 0 3
19532: PPUSH
19533: CALL_OW 248
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: PUSH
19546: EMPTY
19547: LIST
19548: ADD
19549: ST_TO_ADDR
// end ;
19550: GO 19214
19552: POP
19553: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19554: LD_VAR 0 4
19558: PPUSH
19559: LD_STRING GammaBase
19561: PPUSH
19562: CALL_OW 39
// end ; end_of_file
19566: LD_VAR 0 2
19570: RET
// every 1 1$15 do
19571: GO 19573
19573: DISABLE
// begin if supply <= 13 and supply > 7 then
19574: LD_EXP 36
19578: PUSH
19579: LD_INT 13
19581: LESSEQUAL
19582: PUSH
19583: LD_EXP 36
19587: PUSH
19588: LD_INT 7
19590: GREATER
19591: AND
19592: IFFALSE 19615
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19594: LD_INT 3
19596: PPUSH
19597: LD_INT 5
19599: PPUSH
19600: CALL_OW 12
19604: PPUSH
19605: LD_INT 18
19607: PPUSH
19608: LD_INT 1
19610: PPUSH
19611: CALL_OW 55
// if supply <= 7 and supply > 4 then
19615: LD_EXP 36
19619: PUSH
19620: LD_INT 7
19622: LESSEQUAL
19623: PUSH
19624: LD_EXP 36
19628: PUSH
19629: LD_INT 4
19631: GREATER
19632: AND
19633: IFFALSE 19656
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19635: LD_INT 3
19637: PPUSH
19638: LD_INT 5
19640: PPUSH
19641: CALL_OW 12
19645: PPUSH
19646: LD_INT 19
19648: PPUSH
19649: LD_INT 1
19651: PPUSH
19652: CALL_OW 55
// if supply <= 4 and supply > 0 then
19656: LD_EXP 36
19660: PUSH
19661: LD_INT 4
19663: LESSEQUAL
19664: PUSH
19665: LD_EXP 36
19669: PUSH
19670: LD_INT 0
19672: GREATER
19673: AND
19674: IFFALSE 19697
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19676: LD_INT 3
19678: PPUSH
19679: LD_INT 5
19681: PPUSH
19682: CALL_OW 12
19686: PPUSH
19687: LD_INT 20
19689: PPUSH
19690: LD_INT 1
19692: PPUSH
19693: CALL_OW 55
// if supply then
19697: LD_EXP 36
19701: IFFALSE 19718
// begin supply = supply - 1 ;
19703: LD_ADDR_EXP 36
19707: PUSH
19708: LD_EXP 36
19712: PUSH
19713: LD_INT 1
19715: MINUS
19716: ST_TO_ADDR
// enable ;
19717: ENABLE
// end ; end ; end_of_file
19718: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19719: LD_INT 0
19721: PPUSH
// ar_miner := 81 ;
19722: LD_ADDR_EXP 57
19726: PUSH
19727: LD_INT 81
19729: ST_TO_ADDR
// ar_crane := 88 ;
19730: LD_ADDR_EXP 56
19734: PUSH
19735: LD_INT 88
19737: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19738: LD_ADDR_EXP 51
19742: PUSH
19743: LD_INT 89
19745: ST_TO_ADDR
// us_hack := 99 ;
19746: LD_ADDR_EXP 52
19750: PUSH
19751: LD_INT 99
19753: ST_TO_ADDR
// us_artillery := 97 ;
19754: LD_ADDR_EXP 53
19758: PUSH
19759: LD_INT 97
19761: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19762: LD_ADDR_EXP 54
19766: PUSH
19767: LD_INT 91
19769: ST_TO_ADDR
// ar_mortar := 92 ;
19770: LD_ADDR_EXP 55
19774: PUSH
19775: LD_INT 92
19777: ST_TO_ADDR
// ru_radar := 98 ;
19778: LD_ADDR_EXP 50
19782: PUSH
19783: LD_INT 98
19785: ST_TO_ADDR
// tech_Artillery := 80 ;
19786: LD_ADDR_EXP 58
19790: PUSH
19791: LD_INT 80
19793: ST_TO_ADDR
// tech_RadMat := 81 ;
19794: LD_ADDR_EXP 59
19798: PUSH
19799: LD_INT 81
19801: ST_TO_ADDR
// tech_BasicTools := 82 ;
19802: LD_ADDR_EXP 60
19806: PUSH
19807: LD_INT 82
19809: ST_TO_ADDR
// tech_Cargo := 83 ;
19810: LD_ADDR_EXP 61
19814: PUSH
19815: LD_INT 83
19817: ST_TO_ADDR
// tech_Track := 84 ;
19818: LD_ADDR_EXP 62
19822: PUSH
19823: LD_INT 84
19825: ST_TO_ADDR
// tech_Crane := 85 ;
19826: LD_ADDR_EXP 63
19830: PUSH
19831: LD_INT 85
19833: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19834: LD_ADDR_EXP 64
19838: PUSH
19839: LD_INT 86
19841: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19842: LD_ADDR_EXP 65
19846: PUSH
19847: LD_INT 87
19849: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19850: LD_ADDR_EXP 66
19854: PUSH
19855: LD_INT 88
19857: ST_TO_ADDR
// class_mastodont := 31 ;
19858: LD_ADDR_EXP 67
19862: PUSH
19863: LD_INT 31
19865: ST_TO_ADDR
// class_horse := 21 ;
19866: LD_ADDR_EXP 68
19870: PUSH
19871: LD_INT 21
19873: ST_TO_ADDR
// end ;
19874: LD_VAR 0 1
19878: RET
// every 1 do
19879: GO 19881
19881: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19882: CALL 19719 0 0
19886: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19887: LD_INT 0
19889: PPUSH
// if p2 = 100 then
19890: LD_VAR 0 2
19894: PUSH
19895: LD_INT 100
19897: EQUAL
19898: IFFALSE 20847
// begin if not StreamModeActive then
19900: LD_EXP 69
19904: NOT
19905: IFFALSE 19915
// StreamModeActive := true ;
19907: LD_ADDR_EXP 69
19911: PUSH
19912: LD_INT 1
19914: ST_TO_ADDR
// if p3 = 0 then
19915: LD_VAR 0 3
19919: PUSH
19920: LD_INT 0
19922: EQUAL
19923: IFFALSE 19929
// InitStreamMode ;
19925: CALL 21007 0 0
// if p3 = 1 then
19929: LD_VAR 0 3
19933: PUSH
19934: LD_INT 1
19936: EQUAL
19937: IFFALSE 19947
// sRocket := true ;
19939: LD_ADDR_EXP 74
19943: PUSH
19944: LD_INT 1
19946: ST_TO_ADDR
// if p3 = 2 then
19947: LD_VAR 0 3
19951: PUSH
19952: LD_INT 2
19954: EQUAL
19955: IFFALSE 19965
// sSpeed := true ;
19957: LD_ADDR_EXP 73
19961: PUSH
19962: LD_INT 1
19964: ST_TO_ADDR
// if p3 = 3 then
19965: LD_VAR 0 3
19969: PUSH
19970: LD_INT 3
19972: EQUAL
19973: IFFALSE 19983
// sEngine := true ;
19975: LD_ADDR_EXP 75
19979: PUSH
19980: LD_INT 1
19982: ST_TO_ADDR
// if p3 = 4 then
19983: LD_VAR 0 3
19987: PUSH
19988: LD_INT 4
19990: EQUAL
19991: IFFALSE 20001
// sSpec := true ;
19993: LD_ADDR_EXP 72
19997: PUSH
19998: LD_INT 1
20000: ST_TO_ADDR
// if p3 = 5 then
20001: LD_VAR 0 3
20005: PUSH
20006: LD_INT 5
20008: EQUAL
20009: IFFALSE 20019
// sLevel := true ;
20011: LD_ADDR_EXP 76
20015: PUSH
20016: LD_INT 1
20018: ST_TO_ADDR
// if p3 = 6 then
20019: LD_VAR 0 3
20023: PUSH
20024: LD_INT 6
20026: EQUAL
20027: IFFALSE 20037
// sArmoury := true ;
20029: LD_ADDR_EXP 77
20033: PUSH
20034: LD_INT 1
20036: ST_TO_ADDR
// if p3 = 7 then
20037: LD_VAR 0 3
20041: PUSH
20042: LD_INT 7
20044: EQUAL
20045: IFFALSE 20055
// sRadar := true ;
20047: LD_ADDR_EXP 78
20051: PUSH
20052: LD_INT 1
20054: ST_TO_ADDR
// if p3 = 8 then
20055: LD_VAR 0 3
20059: PUSH
20060: LD_INT 8
20062: EQUAL
20063: IFFALSE 20073
// sBunker := true ;
20065: LD_ADDR_EXP 79
20069: PUSH
20070: LD_INT 1
20072: ST_TO_ADDR
// if p3 = 9 then
20073: LD_VAR 0 3
20077: PUSH
20078: LD_INT 9
20080: EQUAL
20081: IFFALSE 20091
// sHack := true ;
20083: LD_ADDR_EXP 80
20087: PUSH
20088: LD_INT 1
20090: ST_TO_ADDR
// if p3 = 10 then
20091: LD_VAR 0 3
20095: PUSH
20096: LD_INT 10
20098: EQUAL
20099: IFFALSE 20109
// sFire := true ;
20101: LD_ADDR_EXP 81
20105: PUSH
20106: LD_INT 1
20108: ST_TO_ADDR
// if p3 = 11 then
20109: LD_VAR 0 3
20113: PUSH
20114: LD_INT 11
20116: EQUAL
20117: IFFALSE 20127
// sRefresh := true ;
20119: LD_ADDR_EXP 82
20123: PUSH
20124: LD_INT 1
20126: ST_TO_ADDR
// if p3 = 12 then
20127: LD_VAR 0 3
20131: PUSH
20132: LD_INT 12
20134: EQUAL
20135: IFFALSE 20145
// sExp := true ;
20137: LD_ADDR_EXP 83
20141: PUSH
20142: LD_INT 1
20144: ST_TO_ADDR
// if p3 = 13 then
20145: LD_VAR 0 3
20149: PUSH
20150: LD_INT 13
20152: EQUAL
20153: IFFALSE 20163
// sDepot := true ;
20155: LD_ADDR_EXP 84
20159: PUSH
20160: LD_INT 1
20162: ST_TO_ADDR
// if p3 = 14 then
20163: LD_VAR 0 3
20167: PUSH
20168: LD_INT 14
20170: EQUAL
20171: IFFALSE 20181
// sFlag := true ;
20173: LD_ADDR_EXP 85
20177: PUSH
20178: LD_INT 1
20180: ST_TO_ADDR
// if p3 = 15 then
20181: LD_VAR 0 3
20185: PUSH
20186: LD_INT 15
20188: EQUAL
20189: IFFALSE 20199
// sKamikadze := true ;
20191: LD_ADDR_EXP 93
20195: PUSH
20196: LD_INT 1
20198: ST_TO_ADDR
// if p3 = 16 then
20199: LD_VAR 0 3
20203: PUSH
20204: LD_INT 16
20206: EQUAL
20207: IFFALSE 20217
// sTroll := true ;
20209: LD_ADDR_EXP 94
20213: PUSH
20214: LD_INT 1
20216: ST_TO_ADDR
// if p3 = 17 then
20217: LD_VAR 0 3
20221: PUSH
20222: LD_INT 17
20224: EQUAL
20225: IFFALSE 20235
// sSlow := true ;
20227: LD_ADDR_EXP 95
20231: PUSH
20232: LD_INT 1
20234: ST_TO_ADDR
// if p3 = 18 then
20235: LD_VAR 0 3
20239: PUSH
20240: LD_INT 18
20242: EQUAL
20243: IFFALSE 20253
// sLack := true ;
20245: LD_ADDR_EXP 96
20249: PUSH
20250: LD_INT 1
20252: ST_TO_ADDR
// if p3 = 19 then
20253: LD_VAR 0 3
20257: PUSH
20258: LD_INT 19
20260: EQUAL
20261: IFFALSE 20271
// sTank := true ;
20263: LD_ADDR_EXP 98
20267: PUSH
20268: LD_INT 1
20270: ST_TO_ADDR
// if p3 = 20 then
20271: LD_VAR 0 3
20275: PUSH
20276: LD_INT 20
20278: EQUAL
20279: IFFALSE 20289
// sRemote := true ;
20281: LD_ADDR_EXP 99
20285: PUSH
20286: LD_INT 1
20288: ST_TO_ADDR
// if p3 = 21 then
20289: LD_VAR 0 3
20293: PUSH
20294: LD_INT 21
20296: EQUAL
20297: IFFALSE 20307
// sPowell := true ;
20299: LD_ADDR_EXP 100
20303: PUSH
20304: LD_INT 1
20306: ST_TO_ADDR
// if p3 = 22 then
20307: LD_VAR 0 3
20311: PUSH
20312: LD_INT 22
20314: EQUAL
20315: IFFALSE 20325
// sTeleport := true ;
20317: LD_ADDR_EXP 103
20321: PUSH
20322: LD_INT 1
20324: ST_TO_ADDR
// if p3 = 23 then
20325: LD_VAR 0 3
20329: PUSH
20330: LD_INT 23
20332: EQUAL
20333: IFFALSE 20343
// sOilTower := true ;
20335: LD_ADDR_EXP 105
20339: PUSH
20340: LD_INT 1
20342: ST_TO_ADDR
// if p3 = 24 then
20343: LD_VAR 0 3
20347: PUSH
20348: LD_INT 24
20350: EQUAL
20351: IFFALSE 20361
// sShovel := true ;
20353: LD_ADDR_EXP 106
20357: PUSH
20358: LD_INT 1
20360: ST_TO_ADDR
// if p3 = 25 then
20361: LD_VAR 0 3
20365: PUSH
20366: LD_INT 25
20368: EQUAL
20369: IFFALSE 20379
// sSheik := true ;
20371: LD_ADDR_EXP 107
20375: PUSH
20376: LD_INT 1
20378: ST_TO_ADDR
// if p3 = 26 then
20379: LD_VAR 0 3
20383: PUSH
20384: LD_INT 26
20386: EQUAL
20387: IFFALSE 20397
// sEarthquake := true ;
20389: LD_ADDR_EXP 109
20393: PUSH
20394: LD_INT 1
20396: ST_TO_ADDR
// if p3 = 27 then
20397: LD_VAR 0 3
20401: PUSH
20402: LD_INT 27
20404: EQUAL
20405: IFFALSE 20415
// sAI := true ;
20407: LD_ADDR_EXP 110
20411: PUSH
20412: LD_INT 1
20414: ST_TO_ADDR
// if p3 = 28 then
20415: LD_VAR 0 3
20419: PUSH
20420: LD_INT 28
20422: EQUAL
20423: IFFALSE 20433
// sCargo := true ;
20425: LD_ADDR_EXP 113
20429: PUSH
20430: LD_INT 1
20432: ST_TO_ADDR
// if p3 = 29 then
20433: LD_VAR 0 3
20437: PUSH
20438: LD_INT 29
20440: EQUAL
20441: IFFALSE 20451
// sDLaser := true ;
20443: LD_ADDR_EXP 114
20447: PUSH
20448: LD_INT 1
20450: ST_TO_ADDR
// if p3 = 30 then
20451: LD_VAR 0 3
20455: PUSH
20456: LD_INT 30
20458: EQUAL
20459: IFFALSE 20469
// sExchange := true ;
20461: LD_ADDR_EXP 115
20465: PUSH
20466: LD_INT 1
20468: ST_TO_ADDR
// if p3 = 31 then
20469: LD_VAR 0 3
20473: PUSH
20474: LD_INT 31
20476: EQUAL
20477: IFFALSE 20487
// sFac := true ;
20479: LD_ADDR_EXP 116
20483: PUSH
20484: LD_INT 1
20486: ST_TO_ADDR
// if p3 = 32 then
20487: LD_VAR 0 3
20491: PUSH
20492: LD_INT 32
20494: EQUAL
20495: IFFALSE 20505
// sPower := true ;
20497: LD_ADDR_EXP 117
20501: PUSH
20502: LD_INT 1
20504: ST_TO_ADDR
// if p3 = 33 then
20505: LD_VAR 0 3
20509: PUSH
20510: LD_INT 33
20512: EQUAL
20513: IFFALSE 20523
// sRandom := true ;
20515: LD_ADDR_EXP 118
20519: PUSH
20520: LD_INT 1
20522: ST_TO_ADDR
// if p3 = 34 then
20523: LD_VAR 0 3
20527: PUSH
20528: LD_INT 34
20530: EQUAL
20531: IFFALSE 20541
// sShield := true ;
20533: LD_ADDR_EXP 119
20537: PUSH
20538: LD_INT 1
20540: ST_TO_ADDR
// if p3 = 35 then
20541: LD_VAR 0 3
20545: PUSH
20546: LD_INT 35
20548: EQUAL
20549: IFFALSE 20559
// sTime := true ;
20551: LD_ADDR_EXP 120
20555: PUSH
20556: LD_INT 1
20558: ST_TO_ADDR
// if p3 = 36 then
20559: LD_VAR 0 3
20563: PUSH
20564: LD_INT 36
20566: EQUAL
20567: IFFALSE 20577
// sTools := true ;
20569: LD_ADDR_EXP 121
20573: PUSH
20574: LD_INT 1
20576: ST_TO_ADDR
// if p3 = 101 then
20577: LD_VAR 0 3
20581: PUSH
20582: LD_INT 101
20584: EQUAL
20585: IFFALSE 20595
// sSold := true ;
20587: LD_ADDR_EXP 86
20591: PUSH
20592: LD_INT 1
20594: ST_TO_ADDR
// if p3 = 102 then
20595: LD_VAR 0 3
20599: PUSH
20600: LD_INT 102
20602: EQUAL
20603: IFFALSE 20613
// sDiff := true ;
20605: LD_ADDR_EXP 87
20609: PUSH
20610: LD_INT 1
20612: ST_TO_ADDR
// if p3 = 103 then
20613: LD_VAR 0 3
20617: PUSH
20618: LD_INT 103
20620: EQUAL
20621: IFFALSE 20631
// sFog := true ;
20623: LD_ADDR_EXP 90
20627: PUSH
20628: LD_INT 1
20630: ST_TO_ADDR
// if p3 = 104 then
20631: LD_VAR 0 3
20635: PUSH
20636: LD_INT 104
20638: EQUAL
20639: IFFALSE 20649
// sReset := true ;
20641: LD_ADDR_EXP 91
20645: PUSH
20646: LD_INT 1
20648: ST_TO_ADDR
// if p3 = 105 then
20649: LD_VAR 0 3
20653: PUSH
20654: LD_INT 105
20656: EQUAL
20657: IFFALSE 20667
// sSun := true ;
20659: LD_ADDR_EXP 92
20663: PUSH
20664: LD_INT 1
20666: ST_TO_ADDR
// if p3 = 106 then
20667: LD_VAR 0 3
20671: PUSH
20672: LD_INT 106
20674: EQUAL
20675: IFFALSE 20685
// sTiger := true ;
20677: LD_ADDR_EXP 88
20681: PUSH
20682: LD_INT 1
20684: ST_TO_ADDR
// if p3 = 107 then
20685: LD_VAR 0 3
20689: PUSH
20690: LD_INT 107
20692: EQUAL
20693: IFFALSE 20703
// sBomb := true ;
20695: LD_ADDR_EXP 89
20699: PUSH
20700: LD_INT 1
20702: ST_TO_ADDR
// if p3 = 108 then
20703: LD_VAR 0 3
20707: PUSH
20708: LD_INT 108
20710: EQUAL
20711: IFFALSE 20721
// sWound := true ;
20713: LD_ADDR_EXP 97
20717: PUSH
20718: LD_INT 1
20720: ST_TO_ADDR
// if p3 = 109 then
20721: LD_VAR 0 3
20725: PUSH
20726: LD_INT 109
20728: EQUAL
20729: IFFALSE 20739
// sBetray := true ;
20731: LD_ADDR_EXP 101
20735: PUSH
20736: LD_INT 1
20738: ST_TO_ADDR
// if p3 = 110 then
20739: LD_VAR 0 3
20743: PUSH
20744: LD_INT 110
20746: EQUAL
20747: IFFALSE 20757
// sContamin := true ;
20749: LD_ADDR_EXP 102
20753: PUSH
20754: LD_INT 1
20756: ST_TO_ADDR
// if p3 = 111 then
20757: LD_VAR 0 3
20761: PUSH
20762: LD_INT 111
20764: EQUAL
20765: IFFALSE 20775
// sOil := true ;
20767: LD_ADDR_EXP 104
20771: PUSH
20772: LD_INT 1
20774: ST_TO_ADDR
// if p3 = 112 then
20775: LD_VAR 0 3
20779: PUSH
20780: LD_INT 112
20782: EQUAL
20783: IFFALSE 20793
// sStu := true ;
20785: LD_ADDR_EXP 108
20789: PUSH
20790: LD_INT 1
20792: ST_TO_ADDR
// if p3 = 113 then
20793: LD_VAR 0 3
20797: PUSH
20798: LD_INT 113
20800: EQUAL
20801: IFFALSE 20811
// sBazooka := true ;
20803: LD_ADDR_EXP 111
20807: PUSH
20808: LD_INT 1
20810: ST_TO_ADDR
// if p3 = 114 then
20811: LD_VAR 0 3
20815: PUSH
20816: LD_INT 114
20818: EQUAL
20819: IFFALSE 20829
// sMortar := true ;
20821: LD_ADDR_EXP 112
20825: PUSH
20826: LD_INT 1
20828: ST_TO_ADDR
// if p3 = 115 then
20829: LD_VAR 0 3
20833: PUSH
20834: LD_INT 115
20836: EQUAL
20837: IFFALSE 20847
// sRanger := true ;
20839: LD_ADDR_EXP 122
20843: PUSH
20844: LD_INT 1
20846: ST_TO_ADDR
// end ; if p2 = 101 then
20847: LD_VAR 0 2
20851: PUSH
20852: LD_INT 101
20854: EQUAL
20855: IFFALSE 20983
// begin case p3 of 1 :
20857: LD_VAR 0 3
20861: PUSH
20862: LD_INT 1
20864: DOUBLE
20865: EQUAL
20866: IFTRUE 20870
20868: GO 20877
20870: POP
// hHackUnlimitedResources ; 2 :
20871: CALL 32020 0 0
20875: GO 20983
20877: LD_INT 2
20879: DOUBLE
20880: EQUAL
20881: IFTRUE 20885
20883: GO 20892
20885: POP
// hHackSetLevel10 ; 3 :
20886: CALL 32153 0 0
20890: GO 20983
20892: LD_INT 3
20894: DOUBLE
20895: EQUAL
20896: IFTRUE 20900
20898: GO 20907
20900: POP
// hHackSetLevel10YourUnits ; 4 :
20901: CALL 32238 0 0
20905: GO 20983
20907: LD_INT 4
20909: DOUBLE
20910: EQUAL
20911: IFTRUE 20915
20913: GO 20922
20915: POP
// hHackInvincible ; 5 :
20916: CALL 32686 0 0
20920: GO 20983
20922: LD_INT 5
20924: DOUBLE
20925: EQUAL
20926: IFTRUE 20930
20928: GO 20937
20930: POP
// hHackInvisible ; 6 :
20931: CALL 32797 0 0
20935: GO 20983
20937: LD_INT 6
20939: DOUBLE
20940: EQUAL
20941: IFTRUE 20945
20943: GO 20952
20945: POP
// hHackChangeYourSide ; 7 :
20946: CALL 32854 0 0
20950: GO 20983
20952: LD_INT 7
20954: DOUBLE
20955: EQUAL
20956: IFTRUE 20960
20958: GO 20967
20960: POP
// hHackChangeUnitSide ; 8 :
20961: CALL 32896 0 0
20965: GO 20983
20967: LD_INT 8
20969: DOUBLE
20970: EQUAL
20971: IFTRUE 20975
20973: GO 20982
20975: POP
// hHackFog ; end ;
20976: CALL 32997 0 0
20980: GO 20983
20982: POP
// end ; end ;
20983: LD_VAR 0 7
20987: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20988: GO 20990
20990: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20991: LD_STRING initStreamRollete();
20993: PPUSH
20994: CALL_OW 559
// InitStreamMode ;
20998: CALL 21007 0 0
// DefineStreamItems ( ) ;
21002: CALL 21447 0 0
// end ;
21006: END
// function InitStreamMode ; begin
21007: LD_INT 0
21009: PPUSH
// streamModeActive := false ;
21010: LD_ADDR_EXP 69
21014: PUSH
21015: LD_INT 0
21017: ST_TO_ADDR
// normalCounter := 36 ;
21018: LD_ADDR_EXP 70
21022: PUSH
21023: LD_INT 36
21025: ST_TO_ADDR
// hardcoreCounter := 16 ;
21026: LD_ADDR_EXP 71
21030: PUSH
21031: LD_INT 16
21033: ST_TO_ADDR
// sRocket := false ;
21034: LD_ADDR_EXP 74
21038: PUSH
21039: LD_INT 0
21041: ST_TO_ADDR
// sSpeed := false ;
21042: LD_ADDR_EXP 73
21046: PUSH
21047: LD_INT 0
21049: ST_TO_ADDR
// sEngine := false ;
21050: LD_ADDR_EXP 75
21054: PUSH
21055: LD_INT 0
21057: ST_TO_ADDR
// sSpec := false ;
21058: LD_ADDR_EXP 72
21062: PUSH
21063: LD_INT 0
21065: ST_TO_ADDR
// sLevel := false ;
21066: LD_ADDR_EXP 76
21070: PUSH
21071: LD_INT 0
21073: ST_TO_ADDR
// sArmoury := false ;
21074: LD_ADDR_EXP 77
21078: PUSH
21079: LD_INT 0
21081: ST_TO_ADDR
// sRadar := false ;
21082: LD_ADDR_EXP 78
21086: PUSH
21087: LD_INT 0
21089: ST_TO_ADDR
// sBunker := false ;
21090: LD_ADDR_EXP 79
21094: PUSH
21095: LD_INT 0
21097: ST_TO_ADDR
// sHack := false ;
21098: LD_ADDR_EXP 80
21102: PUSH
21103: LD_INT 0
21105: ST_TO_ADDR
// sFire := false ;
21106: LD_ADDR_EXP 81
21110: PUSH
21111: LD_INT 0
21113: ST_TO_ADDR
// sRefresh := false ;
21114: LD_ADDR_EXP 82
21118: PUSH
21119: LD_INT 0
21121: ST_TO_ADDR
// sExp := false ;
21122: LD_ADDR_EXP 83
21126: PUSH
21127: LD_INT 0
21129: ST_TO_ADDR
// sDepot := false ;
21130: LD_ADDR_EXP 84
21134: PUSH
21135: LD_INT 0
21137: ST_TO_ADDR
// sFlag := false ;
21138: LD_ADDR_EXP 85
21142: PUSH
21143: LD_INT 0
21145: ST_TO_ADDR
// sKamikadze := false ;
21146: LD_ADDR_EXP 93
21150: PUSH
21151: LD_INT 0
21153: ST_TO_ADDR
// sTroll := false ;
21154: LD_ADDR_EXP 94
21158: PUSH
21159: LD_INT 0
21161: ST_TO_ADDR
// sSlow := false ;
21162: LD_ADDR_EXP 95
21166: PUSH
21167: LD_INT 0
21169: ST_TO_ADDR
// sLack := false ;
21170: LD_ADDR_EXP 96
21174: PUSH
21175: LD_INT 0
21177: ST_TO_ADDR
// sTank := false ;
21178: LD_ADDR_EXP 98
21182: PUSH
21183: LD_INT 0
21185: ST_TO_ADDR
// sRemote := false ;
21186: LD_ADDR_EXP 99
21190: PUSH
21191: LD_INT 0
21193: ST_TO_ADDR
// sPowell := false ;
21194: LD_ADDR_EXP 100
21198: PUSH
21199: LD_INT 0
21201: ST_TO_ADDR
// sTeleport := false ;
21202: LD_ADDR_EXP 103
21206: PUSH
21207: LD_INT 0
21209: ST_TO_ADDR
// sOilTower := false ;
21210: LD_ADDR_EXP 105
21214: PUSH
21215: LD_INT 0
21217: ST_TO_ADDR
// sShovel := false ;
21218: LD_ADDR_EXP 106
21222: PUSH
21223: LD_INT 0
21225: ST_TO_ADDR
// sSheik := false ;
21226: LD_ADDR_EXP 107
21230: PUSH
21231: LD_INT 0
21233: ST_TO_ADDR
// sEarthquake := false ;
21234: LD_ADDR_EXP 109
21238: PUSH
21239: LD_INT 0
21241: ST_TO_ADDR
// sAI := false ;
21242: LD_ADDR_EXP 110
21246: PUSH
21247: LD_INT 0
21249: ST_TO_ADDR
// sCargo := false ;
21250: LD_ADDR_EXP 113
21254: PUSH
21255: LD_INT 0
21257: ST_TO_ADDR
// sDLaser := false ;
21258: LD_ADDR_EXP 114
21262: PUSH
21263: LD_INT 0
21265: ST_TO_ADDR
// sExchange := false ;
21266: LD_ADDR_EXP 115
21270: PUSH
21271: LD_INT 0
21273: ST_TO_ADDR
// sFac := false ;
21274: LD_ADDR_EXP 116
21278: PUSH
21279: LD_INT 0
21281: ST_TO_ADDR
// sPower := false ;
21282: LD_ADDR_EXP 117
21286: PUSH
21287: LD_INT 0
21289: ST_TO_ADDR
// sRandom := false ;
21290: LD_ADDR_EXP 118
21294: PUSH
21295: LD_INT 0
21297: ST_TO_ADDR
// sShield := false ;
21298: LD_ADDR_EXP 119
21302: PUSH
21303: LD_INT 0
21305: ST_TO_ADDR
// sTime := false ;
21306: LD_ADDR_EXP 120
21310: PUSH
21311: LD_INT 0
21313: ST_TO_ADDR
// sTools := false ;
21314: LD_ADDR_EXP 121
21318: PUSH
21319: LD_INT 0
21321: ST_TO_ADDR
// sSold := false ;
21322: LD_ADDR_EXP 86
21326: PUSH
21327: LD_INT 0
21329: ST_TO_ADDR
// sDiff := false ;
21330: LD_ADDR_EXP 87
21334: PUSH
21335: LD_INT 0
21337: ST_TO_ADDR
// sFog := false ;
21338: LD_ADDR_EXP 90
21342: PUSH
21343: LD_INT 0
21345: ST_TO_ADDR
// sReset := false ;
21346: LD_ADDR_EXP 91
21350: PUSH
21351: LD_INT 0
21353: ST_TO_ADDR
// sSun := false ;
21354: LD_ADDR_EXP 92
21358: PUSH
21359: LD_INT 0
21361: ST_TO_ADDR
// sTiger := false ;
21362: LD_ADDR_EXP 88
21366: PUSH
21367: LD_INT 0
21369: ST_TO_ADDR
// sBomb := false ;
21370: LD_ADDR_EXP 89
21374: PUSH
21375: LD_INT 0
21377: ST_TO_ADDR
// sWound := false ;
21378: LD_ADDR_EXP 97
21382: PUSH
21383: LD_INT 0
21385: ST_TO_ADDR
// sBetray := false ;
21386: LD_ADDR_EXP 101
21390: PUSH
21391: LD_INT 0
21393: ST_TO_ADDR
// sContamin := false ;
21394: LD_ADDR_EXP 102
21398: PUSH
21399: LD_INT 0
21401: ST_TO_ADDR
// sOil := false ;
21402: LD_ADDR_EXP 104
21406: PUSH
21407: LD_INT 0
21409: ST_TO_ADDR
// sStu := false ;
21410: LD_ADDR_EXP 108
21414: PUSH
21415: LD_INT 0
21417: ST_TO_ADDR
// sBazooka := false ;
21418: LD_ADDR_EXP 111
21422: PUSH
21423: LD_INT 0
21425: ST_TO_ADDR
// sMortar := false ;
21426: LD_ADDR_EXP 112
21430: PUSH
21431: LD_INT 0
21433: ST_TO_ADDR
// sRanger := false ;
21434: LD_ADDR_EXP 122
21438: PUSH
21439: LD_INT 0
21441: ST_TO_ADDR
// end ;
21442: LD_VAR 0 1
21446: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21447: LD_INT 0
21449: PPUSH
21450: PPUSH
21451: PPUSH
21452: PPUSH
21453: PPUSH
// result := [ ] ;
21454: LD_ADDR_VAR 0 1
21458: PUSH
21459: EMPTY
21460: ST_TO_ADDR
// if campaign_id = 1 then
21461: LD_OWVAR 69
21465: PUSH
21466: LD_INT 1
21468: EQUAL
21469: IFFALSE 24407
// begin case mission_number of 1 :
21471: LD_OWVAR 70
21475: PUSH
21476: LD_INT 1
21478: DOUBLE
21479: EQUAL
21480: IFTRUE 21484
21482: GO 21548
21484: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
21485: LD_ADDR_VAR 0 1
21489: PUSH
21490: LD_INT 2
21492: PUSH
21493: LD_INT 4
21495: PUSH
21496: LD_INT 11
21498: PUSH
21499: LD_INT 12
21501: PUSH
21502: LD_INT 15
21504: PUSH
21505: LD_INT 16
21507: PUSH
21508: LD_INT 22
21510: PUSH
21511: LD_INT 23
21513: PUSH
21514: LD_INT 26
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 101
21530: PUSH
21531: LD_INT 102
21533: PUSH
21534: LD_INT 106
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: LIST
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: ST_TO_ADDR
21546: GO 24405
21548: LD_INT 2
21550: DOUBLE
21551: EQUAL
21552: IFTRUE 21556
21554: GO 21628
21556: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
21557: LD_ADDR_VAR 0 1
21561: PUSH
21562: LD_INT 2
21564: PUSH
21565: LD_INT 4
21567: PUSH
21568: LD_INT 11
21570: PUSH
21571: LD_INT 12
21573: PUSH
21574: LD_INT 15
21576: PUSH
21577: LD_INT 16
21579: PUSH
21580: LD_INT 22
21582: PUSH
21583: LD_INT 23
21585: PUSH
21586: LD_INT 26
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 101
21602: PUSH
21603: LD_INT 102
21605: PUSH
21606: LD_INT 105
21608: PUSH
21609: LD_INT 106
21611: PUSH
21612: LD_INT 108
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: ST_TO_ADDR
21626: GO 24405
21628: LD_INT 3
21630: DOUBLE
21631: EQUAL
21632: IFTRUE 21636
21634: GO 21712
21636: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
21637: LD_ADDR_VAR 0 1
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: LD_INT 4
21647: PUSH
21648: LD_INT 5
21650: PUSH
21651: LD_INT 11
21653: PUSH
21654: LD_INT 12
21656: PUSH
21657: LD_INT 15
21659: PUSH
21660: LD_INT 16
21662: PUSH
21663: LD_INT 22
21665: PUSH
21666: LD_INT 26
21668: PUSH
21669: LD_INT 36
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 101
21686: PUSH
21687: LD_INT 102
21689: PUSH
21690: LD_INT 105
21692: PUSH
21693: LD_INT 106
21695: PUSH
21696: LD_INT 108
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: ST_TO_ADDR
21710: GO 24405
21712: LD_INT 4
21714: DOUBLE
21715: EQUAL
21716: IFTRUE 21720
21718: GO 21804
21720: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21721: LD_ADDR_VAR 0 1
21725: PUSH
21726: LD_INT 2
21728: PUSH
21729: LD_INT 4
21731: PUSH
21732: LD_INT 5
21734: PUSH
21735: LD_INT 8
21737: PUSH
21738: LD_INT 11
21740: PUSH
21741: LD_INT 12
21743: PUSH
21744: LD_INT 15
21746: PUSH
21747: LD_INT 16
21749: PUSH
21750: LD_INT 22
21752: PUSH
21753: LD_INT 23
21755: PUSH
21756: LD_INT 26
21758: PUSH
21759: LD_INT 36
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 101
21778: PUSH
21779: LD_INT 102
21781: PUSH
21782: LD_INT 105
21784: PUSH
21785: LD_INT 106
21787: PUSH
21788: LD_INT 108
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: ST_TO_ADDR
21802: GO 24405
21804: LD_INT 5
21806: DOUBLE
21807: EQUAL
21808: IFTRUE 21812
21810: GO 21912
21812: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21813: LD_ADDR_VAR 0 1
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: LD_INT 4
21823: PUSH
21824: LD_INT 5
21826: PUSH
21827: LD_INT 6
21829: PUSH
21830: LD_INT 8
21832: PUSH
21833: LD_INT 11
21835: PUSH
21836: LD_INT 12
21838: PUSH
21839: LD_INT 15
21841: PUSH
21842: LD_INT 16
21844: PUSH
21845: LD_INT 22
21847: PUSH
21848: LD_INT 23
21850: PUSH
21851: LD_INT 25
21853: PUSH
21854: LD_INT 26
21856: PUSH
21857: LD_INT 36
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 101
21878: PUSH
21879: LD_INT 102
21881: PUSH
21882: LD_INT 105
21884: PUSH
21885: LD_INT 106
21887: PUSH
21888: LD_INT 108
21890: PUSH
21891: LD_INT 109
21893: PUSH
21894: LD_INT 112
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: ST_TO_ADDR
21910: GO 24405
21912: LD_INT 6
21914: DOUBLE
21915: EQUAL
21916: IFTRUE 21920
21918: GO 22040
21920: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21921: LD_ADDR_VAR 0 1
21925: PUSH
21926: LD_INT 2
21928: PUSH
21929: LD_INT 4
21931: PUSH
21932: LD_INT 5
21934: PUSH
21935: LD_INT 6
21937: PUSH
21938: LD_INT 8
21940: PUSH
21941: LD_INT 11
21943: PUSH
21944: LD_INT 12
21946: PUSH
21947: LD_INT 15
21949: PUSH
21950: LD_INT 16
21952: PUSH
21953: LD_INT 20
21955: PUSH
21956: LD_INT 21
21958: PUSH
21959: LD_INT 22
21961: PUSH
21962: LD_INT 23
21964: PUSH
21965: LD_INT 25
21967: PUSH
21968: LD_INT 26
21970: PUSH
21971: LD_INT 30
21973: PUSH
21974: LD_INT 31
21976: PUSH
21977: LD_INT 32
21979: PUSH
21980: LD_INT 36
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 101
22006: PUSH
22007: LD_INT 102
22009: PUSH
22010: LD_INT 105
22012: PUSH
22013: LD_INT 106
22015: PUSH
22016: LD_INT 108
22018: PUSH
22019: LD_INT 109
22021: PUSH
22022: LD_INT 112
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: ST_TO_ADDR
22038: GO 24405
22040: LD_INT 7
22042: DOUBLE
22043: EQUAL
22044: IFTRUE 22048
22046: GO 22148
22048: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
22049: LD_ADDR_VAR 0 1
22053: PUSH
22054: LD_INT 2
22056: PUSH
22057: LD_INT 4
22059: PUSH
22060: LD_INT 5
22062: PUSH
22063: LD_INT 7
22065: PUSH
22066: LD_INT 11
22068: PUSH
22069: LD_INT 12
22071: PUSH
22072: LD_INT 15
22074: PUSH
22075: LD_INT 16
22077: PUSH
22078: LD_INT 20
22080: PUSH
22081: LD_INT 21
22083: PUSH
22084: LD_INT 22
22086: PUSH
22087: LD_INT 23
22089: PUSH
22090: LD_INT 25
22092: PUSH
22093: LD_INT 26
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 101
22114: PUSH
22115: LD_INT 102
22117: PUSH
22118: LD_INT 103
22120: PUSH
22121: LD_INT 105
22123: PUSH
22124: LD_INT 106
22126: PUSH
22127: LD_INT 108
22129: PUSH
22130: LD_INT 112
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: ST_TO_ADDR
22146: GO 24405
22148: LD_INT 8
22150: DOUBLE
22151: EQUAL
22152: IFTRUE 22156
22154: GO 22284
22156: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
22157: LD_ADDR_VAR 0 1
22161: PUSH
22162: LD_INT 2
22164: PUSH
22165: LD_INT 4
22167: PUSH
22168: LD_INT 5
22170: PUSH
22171: LD_INT 6
22173: PUSH
22174: LD_INT 7
22176: PUSH
22177: LD_INT 8
22179: PUSH
22180: LD_INT 11
22182: PUSH
22183: LD_INT 12
22185: PUSH
22186: LD_INT 15
22188: PUSH
22189: LD_INT 16
22191: PUSH
22192: LD_INT 20
22194: PUSH
22195: LD_INT 21
22197: PUSH
22198: LD_INT 22
22200: PUSH
22201: LD_INT 23
22203: PUSH
22204: LD_INT 25
22206: PUSH
22207: LD_INT 26
22209: PUSH
22210: LD_INT 30
22212: PUSH
22213: LD_INT 31
22215: PUSH
22216: LD_INT 32
22218: PUSH
22219: LD_INT 36
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 101
22246: PUSH
22247: LD_INT 102
22249: PUSH
22250: LD_INT 103
22252: PUSH
22253: LD_INT 105
22255: PUSH
22256: LD_INT 106
22258: PUSH
22259: LD_INT 108
22261: PUSH
22262: LD_INT 109
22264: PUSH
22265: LD_INT 112
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: ST_TO_ADDR
22282: GO 24405
22284: LD_INT 9
22286: DOUBLE
22287: EQUAL
22288: IFTRUE 22292
22290: GO 22428
22292: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
22293: LD_ADDR_VAR 0 1
22297: PUSH
22298: LD_INT 2
22300: PUSH
22301: LD_INT 4
22303: PUSH
22304: LD_INT 5
22306: PUSH
22307: LD_INT 6
22309: PUSH
22310: LD_INT 7
22312: PUSH
22313: LD_INT 8
22315: PUSH
22316: LD_INT 11
22318: PUSH
22319: LD_INT 12
22321: PUSH
22322: LD_INT 15
22324: PUSH
22325: LD_INT 16
22327: PUSH
22328: LD_INT 20
22330: PUSH
22331: LD_INT 21
22333: PUSH
22334: LD_INT 22
22336: PUSH
22337: LD_INT 23
22339: PUSH
22340: LD_INT 25
22342: PUSH
22343: LD_INT 26
22345: PUSH
22346: LD_INT 28
22348: PUSH
22349: LD_INT 30
22351: PUSH
22352: LD_INT 31
22354: PUSH
22355: LD_INT 32
22357: PUSH
22358: LD_INT 36
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 101
22386: PUSH
22387: LD_INT 102
22389: PUSH
22390: LD_INT 103
22392: PUSH
22393: LD_INT 105
22395: PUSH
22396: LD_INT 106
22398: PUSH
22399: LD_INT 108
22401: PUSH
22402: LD_INT 109
22404: PUSH
22405: LD_INT 112
22407: PUSH
22408: LD_INT 114
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: ST_TO_ADDR
22426: GO 24405
22428: LD_INT 10
22430: DOUBLE
22431: EQUAL
22432: IFTRUE 22436
22434: GO 22620
22436: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
22437: LD_ADDR_VAR 0 1
22441: PUSH
22442: LD_INT 2
22444: PUSH
22445: LD_INT 4
22447: PUSH
22448: LD_INT 5
22450: PUSH
22451: LD_INT 6
22453: PUSH
22454: LD_INT 7
22456: PUSH
22457: LD_INT 8
22459: PUSH
22460: LD_INT 9
22462: PUSH
22463: LD_INT 10
22465: PUSH
22466: LD_INT 11
22468: PUSH
22469: LD_INT 12
22471: PUSH
22472: LD_INT 13
22474: PUSH
22475: LD_INT 14
22477: PUSH
22478: LD_INT 15
22480: PUSH
22481: LD_INT 16
22483: PUSH
22484: LD_INT 17
22486: PUSH
22487: LD_INT 18
22489: PUSH
22490: LD_INT 19
22492: PUSH
22493: LD_INT 20
22495: PUSH
22496: LD_INT 21
22498: PUSH
22499: LD_INT 22
22501: PUSH
22502: LD_INT 23
22504: PUSH
22505: LD_INT 24
22507: PUSH
22508: LD_INT 25
22510: PUSH
22511: LD_INT 26
22513: PUSH
22514: LD_INT 28
22516: PUSH
22517: LD_INT 30
22519: PUSH
22520: LD_INT 31
22522: PUSH
22523: LD_INT 32
22525: PUSH
22526: LD_INT 36
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 101
22562: PUSH
22563: LD_INT 102
22565: PUSH
22566: LD_INT 103
22568: PUSH
22569: LD_INT 104
22571: PUSH
22572: LD_INT 105
22574: PUSH
22575: LD_INT 106
22577: PUSH
22578: LD_INT 107
22580: PUSH
22581: LD_INT 108
22583: PUSH
22584: LD_INT 109
22586: PUSH
22587: LD_INT 110
22589: PUSH
22590: LD_INT 111
22592: PUSH
22593: LD_INT 112
22595: PUSH
22596: LD_INT 114
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: ST_TO_ADDR
22618: GO 24405
22620: LD_INT 11
22622: DOUBLE
22623: EQUAL
22624: IFTRUE 22628
22626: GO 22820
22628: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
22629: LD_ADDR_VAR 0 1
22633: PUSH
22634: LD_INT 2
22636: PUSH
22637: LD_INT 3
22639: PUSH
22640: LD_INT 4
22642: PUSH
22643: LD_INT 5
22645: PUSH
22646: LD_INT 6
22648: PUSH
22649: LD_INT 7
22651: PUSH
22652: LD_INT 8
22654: PUSH
22655: LD_INT 9
22657: PUSH
22658: LD_INT 10
22660: PUSH
22661: LD_INT 11
22663: PUSH
22664: LD_INT 12
22666: PUSH
22667: LD_INT 13
22669: PUSH
22670: LD_INT 14
22672: PUSH
22673: LD_INT 15
22675: PUSH
22676: LD_INT 16
22678: PUSH
22679: LD_INT 17
22681: PUSH
22682: LD_INT 18
22684: PUSH
22685: LD_INT 19
22687: PUSH
22688: LD_INT 20
22690: PUSH
22691: LD_INT 21
22693: PUSH
22694: LD_INT 22
22696: PUSH
22697: LD_INT 23
22699: PUSH
22700: LD_INT 24
22702: PUSH
22703: LD_INT 25
22705: PUSH
22706: LD_INT 26
22708: PUSH
22709: LD_INT 28
22711: PUSH
22712: LD_INT 30
22714: PUSH
22715: LD_INT 31
22717: PUSH
22718: LD_INT 32
22720: PUSH
22721: LD_INT 34
22723: PUSH
22724: LD_INT 36
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 101
22762: PUSH
22763: LD_INT 102
22765: PUSH
22766: LD_INT 103
22768: PUSH
22769: LD_INT 104
22771: PUSH
22772: LD_INT 105
22774: PUSH
22775: LD_INT 106
22777: PUSH
22778: LD_INT 107
22780: PUSH
22781: LD_INT 108
22783: PUSH
22784: LD_INT 109
22786: PUSH
22787: LD_INT 110
22789: PUSH
22790: LD_INT 111
22792: PUSH
22793: LD_INT 112
22795: PUSH
22796: LD_INT 114
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: ST_TO_ADDR
22818: GO 24405
22820: LD_INT 12
22822: DOUBLE
22823: EQUAL
22824: IFTRUE 22828
22826: GO 23036
22828: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22829: LD_ADDR_VAR 0 1
22833: PUSH
22834: LD_INT 1
22836: PUSH
22837: LD_INT 2
22839: PUSH
22840: LD_INT 3
22842: PUSH
22843: LD_INT 4
22845: PUSH
22846: LD_INT 5
22848: PUSH
22849: LD_INT 6
22851: PUSH
22852: LD_INT 7
22854: PUSH
22855: LD_INT 8
22857: PUSH
22858: LD_INT 9
22860: PUSH
22861: LD_INT 10
22863: PUSH
22864: LD_INT 11
22866: PUSH
22867: LD_INT 12
22869: PUSH
22870: LD_INT 13
22872: PUSH
22873: LD_INT 14
22875: PUSH
22876: LD_INT 15
22878: PUSH
22879: LD_INT 16
22881: PUSH
22882: LD_INT 17
22884: PUSH
22885: LD_INT 18
22887: PUSH
22888: LD_INT 19
22890: PUSH
22891: LD_INT 20
22893: PUSH
22894: LD_INT 21
22896: PUSH
22897: LD_INT 22
22899: PUSH
22900: LD_INT 23
22902: PUSH
22903: LD_INT 24
22905: PUSH
22906: LD_INT 25
22908: PUSH
22909: LD_INT 26
22911: PUSH
22912: LD_INT 27
22914: PUSH
22915: LD_INT 28
22917: PUSH
22918: LD_INT 30
22920: PUSH
22921: LD_INT 31
22923: PUSH
22924: LD_INT 32
22926: PUSH
22927: LD_INT 33
22929: PUSH
22930: LD_INT 34
22932: PUSH
22933: LD_INT 36
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 101
22974: PUSH
22975: LD_INT 102
22977: PUSH
22978: LD_INT 103
22980: PUSH
22981: LD_INT 104
22983: PUSH
22984: LD_INT 105
22986: PUSH
22987: LD_INT 106
22989: PUSH
22990: LD_INT 107
22992: PUSH
22993: LD_INT 108
22995: PUSH
22996: LD_INT 109
22998: PUSH
22999: LD_INT 110
23001: PUSH
23002: LD_INT 111
23004: PUSH
23005: LD_INT 112
23007: PUSH
23008: LD_INT 113
23010: PUSH
23011: LD_INT 114
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: ST_TO_ADDR
23034: GO 24405
23036: LD_INT 13
23038: DOUBLE
23039: EQUAL
23040: IFTRUE 23044
23042: GO 23240
23044: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
23045: LD_ADDR_VAR 0 1
23049: PUSH
23050: LD_INT 1
23052: PUSH
23053: LD_INT 2
23055: PUSH
23056: LD_INT 3
23058: PUSH
23059: LD_INT 4
23061: PUSH
23062: LD_INT 5
23064: PUSH
23065: LD_INT 8
23067: PUSH
23068: LD_INT 9
23070: PUSH
23071: LD_INT 10
23073: PUSH
23074: LD_INT 11
23076: PUSH
23077: LD_INT 12
23079: PUSH
23080: LD_INT 14
23082: PUSH
23083: LD_INT 15
23085: PUSH
23086: LD_INT 16
23088: PUSH
23089: LD_INT 17
23091: PUSH
23092: LD_INT 18
23094: PUSH
23095: LD_INT 19
23097: PUSH
23098: LD_INT 20
23100: PUSH
23101: LD_INT 21
23103: PUSH
23104: LD_INT 22
23106: PUSH
23107: LD_INT 23
23109: PUSH
23110: LD_INT 24
23112: PUSH
23113: LD_INT 25
23115: PUSH
23116: LD_INT 26
23118: PUSH
23119: LD_INT 27
23121: PUSH
23122: LD_INT 28
23124: PUSH
23125: LD_INT 30
23127: PUSH
23128: LD_INT 31
23130: PUSH
23131: LD_INT 32
23133: PUSH
23134: LD_INT 33
23136: PUSH
23137: LD_INT 34
23139: PUSH
23140: LD_INT 36
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 101
23178: PUSH
23179: LD_INT 102
23181: PUSH
23182: LD_INT 103
23184: PUSH
23185: LD_INT 104
23187: PUSH
23188: LD_INT 105
23190: PUSH
23191: LD_INT 106
23193: PUSH
23194: LD_INT 107
23196: PUSH
23197: LD_INT 108
23199: PUSH
23200: LD_INT 109
23202: PUSH
23203: LD_INT 110
23205: PUSH
23206: LD_INT 111
23208: PUSH
23209: LD_INT 112
23211: PUSH
23212: LD_INT 113
23214: PUSH
23215: LD_INT 114
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: ST_TO_ADDR
23238: GO 24405
23240: LD_INT 14
23242: DOUBLE
23243: EQUAL
23244: IFTRUE 23248
23246: GO 23460
23248: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
23249: LD_ADDR_VAR 0 1
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: LD_INT 2
23259: PUSH
23260: LD_INT 3
23262: PUSH
23263: LD_INT 4
23265: PUSH
23266: LD_INT 5
23268: PUSH
23269: LD_INT 6
23271: PUSH
23272: LD_INT 7
23274: PUSH
23275: LD_INT 8
23277: PUSH
23278: LD_INT 9
23280: PUSH
23281: LD_INT 10
23283: PUSH
23284: LD_INT 11
23286: PUSH
23287: LD_INT 12
23289: PUSH
23290: LD_INT 13
23292: PUSH
23293: LD_INT 14
23295: PUSH
23296: LD_INT 15
23298: PUSH
23299: LD_INT 16
23301: PUSH
23302: LD_INT 17
23304: PUSH
23305: LD_INT 18
23307: PUSH
23308: LD_INT 19
23310: PUSH
23311: LD_INT 20
23313: PUSH
23314: LD_INT 21
23316: PUSH
23317: LD_INT 22
23319: PUSH
23320: LD_INT 23
23322: PUSH
23323: LD_INT 24
23325: PUSH
23326: LD_INT 25
23328: PUSH
23329: LD_INT 26
23331: PUSH
23332: LD_INT 27
23334: PUSH
23335: LD_INT 28
23337: PUSH
23338: LD_INT 29
23340: PUSH
23341: LD_INT 30
23343: PUSH
23344: LD_INT 31
23346: PUSH
23347: LD_INT 32
23349: PUSH
23350: LD_INT 33
23352: PUSH
23353: LD_INT 34
23355: PUSH
23356: LD_INT 36
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 101
23398: PUSH
23399: LD_INT 102
23401: PUSH
23402: LD_INT 103
23404: PUSH
23405: LD_INT 104
23407: PUSH
23408: LD_INT 105
23410: PUSH
23411: LD_INT 106
23413: PUSH
23414: LD_INT 107
23416: PUSH
23417: LD_INT 108
23419: PUSH
23420: LD_INT 109
23422: PUSH
23423: LD_INT 110
23425: PUSH
23426: LD_INT 111
23428: PUSH
23429: LD_INT 112
23431: PUSH
23432: LD_INT 113
23434: PUSH
23435: LD_INT 114
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: ST_TO_ADDR
23458: GO 24405
23460: LD_INT 15
23462: DOUBLE
23463: EQUAL
23464: IFTRUE 23468
23466: GO 23680
23468: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
23469: LD_ADDR_VAR 0 1
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: LD_INT 2
23479: PUSH
23480: LD_INT 3
23482: PUSH
23483: LD_INT 4
23485: PUSH
23486: LD_INT 5
23488: PUSH
23489: LD_INT 6
23491: PUSH
23492: LD_INT 7
23494: PUSH
23495: LD_INT 8
23497: PUSH
23498: LD_INT 9
23500: PUSH
23501: LD_INT 10
23503: PUSH
23504: LD_INT 11
23506: PUSH
23507: LD_INT 12
23509: PUSH
23510: LD_INT 13
23512: PUSH
23513: LD_INT 14
23515: PUSH
23516: LD_INT 15
23518: PUSH
23519: LD_INT 16
23521: PUSH
23522: LD_INT 17
23524: PUSH
23525: LD_INT 18
23527: PUSH
23528: LD_INT 19
23530: PUSH
23531: LD_INT 20
23533: PUSH
23534: LD_INT 21
23536: PUSH
23537: LD_INT 22
23539: PUSH
23540: LD_INT 23
23542: PUSH
23543: LD_INT 24
23545: PUSH
23546: LD_INT 25
23548: PUSH
23549: LD_INT 26
23551: PUSH
23552: LD_INT 27
23554: PUSH
23555: LD_INT 28
23557: PUSH
23558: LD_INT 29
23560: PUSH
23561: LD_INT 30
23563: PUSH
23564: LD_INT 31
23566: PUSH
23567: LD_INT 32
23569: PUSH
23570: LD_INT 33
23572: PUSH
23573: LD_INT 34
23575: PUSH
23576: LD_INT 36
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 101
23618: PUSH
23619: LD_INT 102
23621: PUSH
23622: LD_INT 103
23624: PUSH
23625: LD_INT 104
23627: PUSH
23628: LD_INT 105
23630: PUSH
23631: LD_INT 106
23633: PUSH
23634: LD_INT 107
23636: PUSH
23637: LD_INT 108
23639: PUSH
23640: LD_INT 109
23642: PUSH
23643: LD_INT 110
23645: PUSH
23646: LD_INT 111
23648: PUSH
23649: LD_INT 112
23651: PUSH
23652: LD_INT 113
23654: PUSH
23655: LD_INT 114
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: ST_TO_ADDR
23678: GO 24405
23680: LD_INT 16
23682: DOUBLE
23683: EQUAL
23684: IFTRUE 23688
23686: GO 23812
23688: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
23689: LD_ADDR_VAR 0 1
23693: PUSH
23694: LD_INT 2
23696: PUSH
23697: LD_INT 4
23699: PUSH
23700: LD_INT 5
23702: PUSH
23703: LD_INT 7
23705: PUSH
23706: LD_INT 11
23708: PUSH
23709: LD_INT 12
23711: PUSH
23712: LD_INT 15
23714: PUSH
23715: LD_INT 16
23717: PUSH
23718: LD_INT 20
23720: PUSH
23721: LD_INT 21
23723: PUSH
23724: LD_INT 22
23726: PUSH
23727: LD_INT 23
23729: PUSH
23730: LD_INT 25
23732: PUSH
23733: LD_INT 26
23735: PUSH
23736: LD_INT 30
23738: PUSH
23739: LD_INT 31
23741: PUSH
23742: LD_INT 32
23744: PUSH
23745: LD_INT 33
23747: PUSH
23748: LD_INT 34
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 101
23774: PUSH
23775: LD_INT 102
23777: PUSH
23778: LD_INT 103
23780: PUSH
23781: LD_INT 106
23783: PUSH
23784: LD_INT 108
23786: PUSH
23787: LD_INT 112
23789: PUSH
23790: LD_INT 113
23792: PUSH
23793: LD_INT 114
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: ST_TO_ADDR
23810: GO 24405
23812: LD_INT 17
23814: DOUBLE
23815: EQUAL
23816: IFTRUE 23820
23818: GO 24032
23820: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23821: LD_ADDR_VAR 0 1
23825: PUSH
23826: LD_INT 1
23828: PUSH
23829: LD_INT 2
23831: PUSH
23832: LD_INT 3
23834: PUSH
23835: LD_INT 4
23837: PUSH
23838: LD_INT 5
23840: PUSH
23841: LD_INT 6
23843: PUSH
23844: LD_INT 7
23846: PUSH
23847: LD_INT 8
23849: PUSH
23850: LD_INT 9
23852: PUSH
23853: LD_INT 10
23855: PUSH
23856: LD_INT 11
23858: PUSH
23859: LD_INT 12
23861: PUSH
23862: LD_INT 13
23864: PUSH
23865: LD_INT 14
23867: PUSH
23868: LD_INT 15
23870: PUSH
23871: LD_INT 16
23873: PUSH
23874: LD_INT 17
23876: PUSH
23877: LD_INT 18
23879: PUSH
23880: LD_INT 19
23882: PUSH
23883: LD_INT 20
23885: PUSH
23886: LD_INT 21
23888: PUSH
23889: LD_INT 22
23891: PUSH
23892: LD_INT 23
23894: PUSH
23895: LD_INT 24
23897: PUSH
23898: LD_INT 25
23900: PUSH
23901: LD_INT 26
23903: PUSH
23904: LD_INT 27
23906: PUSH
23907: LD_INT 28
23909: PUSH
23910: LD_INT 29
23912: PUSH
23913: LD_INT 30
23915: PUSH
23916: LD_INT 31
23918: PUSH
23919: LD_INT 32
23921: PUSH
23922: LD_INT 33
23924: PUSH
23925: LD_INT 34
23927: PUSH
23928: LD_INT 36
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 101
23970: PUSH
23971: LD_INT 102
23973: PUSH
23974: LD_INT 103
23976: PUSH
23977: LD_INT 104
23979: PUSH
23980: LD_INT 105
23982: PUSH
23983: LD_INT 106
23985: PUSH
23986: LD_INT 107
23988: PUSH
23989: LD_INT 108
23991: PUSH
23992: LD_INT 109
23994: PUSH
23995: LD_INT 110
23997: PUSH
23998: LD_INT 111
24000: PUSH
24001: LD_INT 112
24003: PUSH
24004: LD_INT 113
24006: PUSH
24007: LD_INT 114
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: ST_TO_ADDR
24030: GO 24405
24032: LD_INT 18
24034: DOUBLE
24035: EQUAL
24036: IFTRUE 24040
24038: GO 24176
24040: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
24041: LD_ADDR_VAR 0 1
24045: PUSH
24046: LD_INT 2
24048: PUSH
24049: LD_INT 4
24051: PUSH
24052: LD_INT 5
24054: PUSH
24055: LD_INT 7
24057: PUSH
24058: LD_INT 11
24060: PUSH
24061: LD_INT 12
24063: PUSH
24064: LD_INT 15
24066: PUSH
24067: LD_INT 16
24069: PUSH
24070: LD_INT 20
24072: PUSH
24073: LD_INT 21
24075: PUSH
24076: LD_INT 22
24078: PUSH
24079: LD_INT 23
24081: PUSH
24082: LD_INT 25
24084: PUSH
24085: LD_INT 26
24087: PUSH
24088: LD_INT 30
24090: PUSH
24091: LD_INT 31
24093: PUSH
24094: LD_INT 32
24096: PUSH
24097: LD_INT 33
24099: PUSH
24100: LD_INT 34
24102: PUSH
24103: LD_INT 35
24105: PUSH
24106: LD_INT 36
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 101
24134: PUSH
24135: LD_INT 102
24137: PUSH
24138: LD_INT 103
24140: PUSH
24141: LD_INT 106
24143: PUSH
24144: LD_INT 108
24146: PUSH
24147: LD_INT 112
24149: PUSH
24150: LD_INT 113
24152: PUSH
24153: LD_INT 114
24155: PUSH
24156: LD_INT 115
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: ST_TO_ADDR
24174: GO 24405
24176: LD_INT 19
24178: DOUBLE
24179: EQUAL
24180: IFTRUE 24184
24182: GO 24404
24184: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
24185: LD_ADDR_VAR 0 1
24189: PUSH
24190: LD_INT 1
24192: PUSH
24193: LD_INT 2
24195: PUSH
24196: LD_INT 3
24198: PUSH
24199: LD_INT 4
24201: PUSH
24202: LD_INT 5
24204: PUSH
24205: LD_INT 6
24207: PUSH
24208: LD_INT 7
24210: PUSH
24211: LD_INT 8
24213: PUSH
24214: LD_INT 9
24216: PUSH
24217: LD_INT 10
24219: PUSH
24220: LD_INT 11
24222: PUSH
24223: LD_INT 12
24225: PUSH
24226: LD_INT 13
24228: PUSH
24229: LD_INT 14
24231: PUSH
24232: LD_INT 15
24234: PUSH
24235: LD_INT 16
24237: PUSH
24238: LD_INT 17
24240: PUSH
24241: LD_INT 18
24243: PUSH
24244: LD_INT 19
24246: PUSH
24247: LD_INT 20
24249: PUSH
24250: LD_INT 21
24252: PUSH
24253: LD_INT 22
24255: PUSH
24256: LD_INT 23
24258: PUSH
24259: LD_INT 24
24261: PUSH
24262: LD_INT 25
24264: PUSH
24265: LD_INT 26
24267: PUSH
24268: LD_INT 27
24270: PUSH
24271: LD_INT 28
24273: PUSH
24274: LD_INT 29
24276: PUSH
24277: LD_INT 30
24279: PUSH
24280: LD_INT 31
24282: PUSH
24283: LD_INT 32
24285: PUSH
24286: LD_INT 33
24288: PUSH
24289: LD_INT 34
24291: PUSH
24292: LD_INT 35
24294: PUSH
24295: LD_INT 36
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 101
24338: PUSH
24339: LD_INT 102
24341: PUSH
24342: LD_INT 103
24344: PUSH
24345: LD_INT 104
24347: PUSH
24348: LD_INT 105
24350: PUSH
24351: LD_INT 106
24353: PUSH
24354: LD_INT 107
24356: PUSH
24357: LD_INT 108
24359: PUSH
24360: LD_INT 109
24362: PUSH
24363: LD_INT 110
24365: PUSH
24366: LD_INT 111
24368: PUSH
24369: LD_INT 112
24371: PUSH
24372: LD_INT 113
24374: PUSH
24375: LD_INT 114
24377: PUSH
24378: LD_INT 115
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: ST_TO_ADDR
24402: GO 24405
24404: POP
// end else
24405: GO 24624
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
24407: LD_ADDR_VAR 0 1
24411: PUSH
24412: LD_INT 1
24414: PUSH
24415: LD_INT 2
24417: PUSH
24418: LD_INT 3
24420: PUSH
24421: LD_INT 4
24423: PUSH
24424: LD_INT 5
24426: PUSH
24427: LD_INT 6
24429: PUSH
24430: LD_INT 7
24432: PUSH
24433: LD_INT 8
24435: PUSH
24436: LD_INT 9
24438: PUSH
24439: LD_INT 10
24441: PUSH
24442: LD_INT 11
24444: PUSH
24445: LD_INT 12
24447: PUSH
24448: LD_INT 13
24450: PUSH
24451: LD_INT 14
24453: PUSH
24454: LD_INT 15
24456: PUSH
24457: LD_INT 16
24459: PUSH
24460: LD_INT 17
24462: PUSH
24463: LD_INT 18
24465: PUSH
24466: LD_INT 19
24468: PUSH
24469: LD_INT 20
24471: PUSH
24472: LD_INT 21
24474: PUSH
24475: LD_INT 22
24477: PUSH
24478: LD_INT 23
24480: PUSH
24481: LD_INT 24
24483: PUSH
24484: LD_INT 25
24486: PUSH
24487: LD_INT 26
24489: PUSH
24490: LD_INT 27
24492: PUSH
24493: LD_INT 28
24495: PUSH
24496: LD_INT 29
24498: PUSH
24499: LD_INT 30
24501: PUSH
24502: LD_INT 31
24504: PUSH
24505: LD_INT 32
24507: PUSH
24508: LD_INT 33
24510: PUSH
24511: LD_INT 34
24513: PUSH
24514: LD_INT 35
24516: PUSH
24517: LD_INT 36
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 101
24560: PUSH
24561: LD_INT 102
24563: PUSH
24564: LD_INT 103
24566: PUSH
24567: LD_INT 104
24569: PUSH
24570: LD_INT 105
24572: PUSH
24573: LD_INT 106
24575: PUSH
24576: LD_INT 107
24578: PUSH
24579: LD_INT 108
24581: PUSH
24582: LD_INT 109
24584: PUSH
24585: LD_INT 110
24587: PUSH
24588: LD_INT 111
24590: PUSH
24591: LD_INT 112
24593: PUSH
24594: LD_INT 113
24596: PUSH
24597: LD_INT 114
24599: PUSH
24600: LD_INT 115
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: ST_TO_ADDR
// if result then
24624: LD_VAR 0 1
24628: IFFALSE 24917
// begin normal :=  ;
24630: LD_ADDR_VAR 0 3
24634: PUSH
24635: LD_STRING 
24637: ST_TO_ADDR
// hardcore :=  ;
24638: LD_ADDR_VAR 0 4
24642: PUSH
24643: LD_STRING 
24645: ST_TO_ADDR
// for i = 1 to normalCounter do
24646: LD_ADDR_VAR 0 5
24650: PUSH
24651: DOUBLE
24652: LD_INT 1
24654: DEC
24655: ST_TO_ADDR
24656: LD_EXP 70
24660: PUSH
24661: FOR_TO
24662: IFFALSE 24763
// begin tmp := 0 ;
24664: LD_ADDR_VAR 0 2
24668: PUSH
24669: LD_STRING 0
24671: ST_TO_ADDR
// if result [ 1 ] then
24672: LD_VAR 0 1
24676: PUSH
24677: LD_INT 1
24679: ARRAY
24680: IFFALSE 24745
// if result [ 1 ] [ 1 ] = i then
24682: LD_VAR 0 1
24686: PUSH
24687: LD_INT 1
24689: ARRAY
24690: PUSH
24691: LD_INT 1
24693: ARRAY
24694: PUSH
24695: LD_VAR 0 5
24699: EQUAL
24700: IFFALSE 24745
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24702: LD_ADDR_VAR 0 1
24706: PUSH
24707: LD_VAR 0 1
24711: PPUSH
24712: LD_INT 1
24714: PPUSH
24715: LD_VAR 0 1
24719: PUSH
24720: LD_INT 1
24722: ARRAY
24723: PPUSH
24724: LD_INT 1
24726: PPUSH
24727: CALL_OW 3
24731: PPUSH
24732: CALL_OW 1
24736: ST_TO_ADDR
// tmp := 1 ;
24737: LD_ADDR_VAR 0 2
24741: PUSH
24742: LD_STRING 1
24744: ST_TO_ADDR
// end ; normal := normal & tmp ;
24745: LD_ADDR_VAR 0 3
24749: PUSH
24750: LD_VAR 0 3
24754: PUSH
24755: LD_VAR 0 2
24759: STR
24760: ST_TO_ADDR
// end ;
24761: GO 24661
24763: POP
24764: POP
// for i = 1 to hardcoreCounter do
24765: LD_ADDR_VAR 0 5
24769: PUSH
24770: DOUBLE
24771: LD_INT 1
24773: DEC
24774: ST_TO_ADDR
24775: LD_EXP 71
24779: PUSH
24780: FOR_TO
24781: IFFALSE 24886
// begin tmp := 0 ;
24783: LD_ADDR_VAR 0 2
24787: PUSH
24788: LD_STRING 0
24790: ST_TO_ADDR
// if result [ 2 ] then
24791: LD_VAR 0 1
24795: PUSH
24796: LD_INT 2
24798: ARRAY
24799: IFFALSE 24868
// if result [ 2 ] [ 1 ] = 100 + i then
24801: LD_VAR 0 1
24805: PUSH
24806: LD_INT 2
24808: ARRAY
24809: PUSH
24810: LD_INT 1
24812: ARRAY
24813: PUSH
24814: LD_INT 100
24816: PUSH
24817: LD_VAR 0 5
24821: PLUS
24822: EQUAL
24823: IFFALSE 24868
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24825: LD_ADDR_VAR 0 1
24829: PUSH
24830: LD_VAR 0 1
24834: PPUSH
24835: LD_INT 2
24837: PPUSH
24838: LD_VAR 0 1
24842: PUSH
24843: LD_INT 2
24845: ARRAY
24846: PPUSH
24847: LD_INT 1
24849: PPUSH
24850: CALL_OW 3
24854: PPUSH
24855: CALL_OW 1
24859: ST_TO_ADDR
// tmp := 1 ;
24860: LD_ADDR_VAR 0 2
24864: PUSH
24865: LD_STRING 1
24867: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24868: LD_ADDR_VAR 0 4
24872: PUSH
24873: LD_VAR 0 4
24877: PUSH
24878: LD_VAR 0 2
24882: STR
24883: ST_TO_ADDR
// end ;
24884: GO 24780
24886: POP
24887: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24888: LD_STRING getStreamItemsFromMission("
24890: PUSH
24891: LD_VAR 0 3
24895: STR
24896: PUSH
24897: LD_STRING ","
24899: STR
24900: PUSH
24901: LD_VAR 0 4
24905: STR
24906: PUSH
24907: LD_STRING ")
24909: STR
24910: PPUSH
24911: CALL_OW 559
// end else
24915: GO 24924
// ToLua ( getStreamItemsFromMission("","") ) ;
24917: LD_STRING getStreamItemsFromMission("","")
24919: PPUSH
24920: CALL_OW 559
// end ;
24924: LD_VAR 0 1
24928: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24929: LD_EXP 69
24933: PUSH
24934: LD_EXP 74
24938: AND
24939: IFFALSE 25063
24941: GO 24943
24943: DISABLE
24944: LD_INT 0
24946: PPUSH
24947: PPUSH
// begin enable ;
24948: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24949: LD_ADDR_VAR 0 2
24953: PUSH
24954: LD_INT 22
24956: PUSH
24957: LD_OWVAR 2
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 2
24968: PUSH
24969: LD_INT 34
24971: PUSH
24972: LD_INT 7
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 34
24981: PUSH
24982: LD_INT 45
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 34
24991: PUSH
24992: LD_INT 28
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 34
25001: PUSH
25002: LD_INT 47
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PPUSH
25020: CALL_OW 69
25024: ST_TO_ADDR
// if not tmp then
25025: LD_VAR 0 2
25029: NOT
25030: IFFALSE 25034
// exit ;
25032: GO 25063
// for i in tmp do
25034: LD_ADDR_VAR 0 1
25038: PUSH
25039: LD_VAR 0 2
25043: PUSH
25044: FOR_IN
25045: IFFALSE 25061
// begin SetLives ( i , 0 ) ;
25047: LD_VAR 0 1
25051: PPUSH
25052: LD_INT 0
25054: PPUSH
25055: CALL_OW 234
// end ;
25059: GO 25044
25061: POP
25062: POP
// end ;
25063: PPOPN 2
25065: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25066: LD_EXP 69
25070: PUSH
25071: LD_EXP 75
25075: AND
25076: IFFALSE 25160
25078: GO 25080
25080: DISABLE
25081: LD_INT 0
25083: PPUSH
25084: PPUSH
// begin enable ;
25085: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25086: LD_ADDR_VAR 0 2
25090: PUSH
25091: LD_INT 22
25093: PUSH
25094: LD_OWVAR 2
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 32
25105: PUSH
25106: LD_INT 3
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PPUSH
25117: CALL_OW 69
25121: ST_TO_ADDR
// if not tmp then
25122: LD_VAR 0 2
25126: NOT
25127: IFFALSE 25131
// exit ;
25129: GO 25160
// for i in tmp do
25131: LD_ADDR_VAR 0 1
25135: PUSH
25136: LD_VAR 0 2
25140: PUSH
25141: FOR_IN
25142: IFFALSE 25158
// begin SetLives ( i , 0 ) ;
25144: LD_VAR 0 1
25148: PPUSH
25149: LD_INT 0
25151: PPUSH
25152: CALL_OW 234
// end ;
25156: GO 25141
25158: POP
25159: POP
// end ;
25160: PPOPN 2
25162: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25163: LD_EXP 69
25167: PUSH
25168: LD_EXP 72
25172: AND
25173: IFFALSE 25266
25175: GO 25177
25177: DISABLE
25178: LD_INT 0
25180: PPUSH
// begin enable ;
25181: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25182: LD_ADDR_VAR 0 1
25186: PUSH
25187: LD_INT 22
25189: PUSH
25190: LD_OWVAR 2
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 2
25201: PUSH
25202: LD_INT 25
25204: PUSH
25205: LD_INT 5
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 25
25214: PUSH
25215: LD_INT 9
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 25
25224: PUSH
25225: LD_INT 8
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PPUSH
25242: CALL_OW 69
25246: PUSH
25247: FOR_IN
25248: IFFALSE 25264
// begin SetClass ( i , 1 ) ;
25250: LD_VAR 0 1
25254: PPUSH
25255: LD_INT 1
25257: PPUSH
25258: CALL_OW 336
// end ;
25262: GO 25247
25264: POP
25265: POP
// end ;
25266: PPOPN 1
25268: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25269: LD_EXP 69
25273: PUSH
25274: LD_EXP 73
25278: AND
25279: PUSH
25280: LD_OWVAR 65
25284: PUSH
25285: LD_INT 7
25287: LESS
25288: AND
25289: IFFALSE 25303
25291: GO 25293
25293: DISABLE
// begin enable ;
25294: ENABLE
// game_speed := 7 ;
25295: LD_ADDR_OWVAR 65
25299: PUSH
25300: LD_INT 7
25302: ST_TO_ADDR
// end ;
25303: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25304: LD_EXP 69
25308: PUSH
25309: LD_EXP 76
25313: AND
25314: IFFALSE 25516
25316: GO 25318
25318: DISABLE
25319: LD_INT 0
25321: PPUSH
25322: PPUSH
25323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25324: LD_ADDR_VAR 0 3
25328: PUSH
25329: LD_INT 81
25331: PUSH
25332: LD_OWVAR 2
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 21
25343: PUSH
25344: LD_INT 1
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PPUSH
25355: CALL_OW 69
25359: ST_TO_ADDR
// if not tmp then
25360: LD_VAR 0 3
25364: NOT
25365: IFFALSE 25369
// exit ;
25367: GO 25516
// if tmp > 5 then
25369: LD_VAR 0 3
25373: PUSH
25374: LD_INT 5
25376: GREATER
25377: IFFALSE 25389
// k := 5 else
25379: LD_ADDR_VAR 0 2
25383: PUSH
25384: LD_INT 5
25386: ST_TO_ADDR
25387: GO 25399
// k := tmp ;
25389: LD_ADDR_VAR 0 2
25393: PUSH
25394: LD_VAR 0 3
25398: ST_TO_ADDR
// for i := 1 to k do
25399: LD_ADDR_VAR 0 1
25403: PUSH
25404: DOUBLE
25405: LD_INT 1
25407: DEC
25408: ST_TO_ADDR
25409: LD_VAR 0 2
25413: PUSH
25414: FOR_TO
25415: IFFALSE 25514
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25417: LD_VAR 0 3
25421: PUSH
25422: LD_VAR 0 1
25426: ARRAY
25427: PPUSH
25428: LD_VAR 0 1
25432: PUSH
25433: LD_INT 4
25435: MOD
25436: PUSH
25437: LD_INT 1
25439: PLUS
25440: PPUSH
25441: CALL_OW 259
25445: PUSH
25446: LD_INT 10
25448: LESS
25449: IFFALSE 25512
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25451: LD_VAR 0 3
25455: PUSH
25456: LD_VAR 0 1
25460: ARRAY
25461: PPUSH
25462: LD_VAR 0 1
25466: PUSH
25467: LD_INT 4
25469: MOD
25470: PUSH
25471: LD_INT 1
25473: PLUS
25474: PPUSH
25475: LD_VAR 0 3
25479: PUSH
25480: LD_VAR 0 1
25484: ARRAY
25485: PPUSH
25486: LD_VAR 0 1
25490: PUSH
25491: LD_INT 4
25493: MOD
25494: PUSH
25495: LD_INT 1
25497: PLUS
25498: PPUSH
25499: CALL_OW 259
25503: PUSH
25504: LD_INT 1
25506: PLUS
25507: PPUSH
25508: CALL_OW 237
25512: GO 25414
25514: POP
25515: POP
// end ;
25516: PPOPN 3
25518: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25519: LD_EXP 69
25523: PUSH
25524: LD_EXP 77
25528: AND
25529: IFFALSE 25549
25531: GO 25533
25533: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25534: LD_INT 4
25536: PPUSH
25537: LD_OWVAR 2
25541: PPUSH
25542: LD_INT 0
25544: PPUSH
25545: CALL_OW 324
25549: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25550: LD_EXP 69
25554: PUSH
25555: LD_EXP 106
25559: AND
25560: IFFALSE 25580
25562: GO 25564
25564: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25565: LD_INT 19
25567: PPUSH
25568: LD_OWVAR 2
25572: PPUSH
25573: LD_INT 0
25575: PPUSH
25576: CALL_OW 324
25580: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25581: LD_EXP 69
25585: PUSH
25586: LD_EXP 78
25590: AND
25591: IFFALSE 25693
25593: GO 25595
25595: DISABLE
25596: LD_INT 0
25598: PPUSH
25599: PPUSH
// begin enable ;
25600: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25601: LD_ADDR_VAR 0 2
25605: PUSH
25606: LD_INT 22
25608: PUSH
25609: LD_OWVAR 2
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 2
25620: PUSH
25621: LD_INT 34
25623: PUSH
25624: LD_INT 11
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 34
25633: PUSH
25634: LD_INT 30
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: LIST
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PPUSH
25650: CALL_OW 69
25654: ST_TO_ADDR
// if not tmp then
25655: LD_VAR 0 2
25659: NOT
25660: IFFALSE 25664
// exit ;
25662: GO 25693
// for i in tmp do
25664: LD_ADDR_VAR 0 1
25668: PUSH
25669: LD_VAR 0 2
25673: PUSH
25674: FOR_IN
25675: IFFALSE 25691
// begin SetLives ( i , 0 ) ;
25677: LD_VAR 0 1
25681: PPUSH
25682: LD_INT 0
25684: PPUSH
25685: CALL_OW 234
// end ;
25689: GO 25674
25691: POP
25692: POP
// end ;
25693: PPOPN 2
25695: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25696: LD_EXP 69
25700: PUSH
25701: LD_EXP 79
25705: AND
25706: IFFALSE 25726
25708: GO 25710
25710: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25711: LD_INT 32
25713: PPUSH
25714: LD_OWVAR 2
25718: PPUSH
25719: LD_INT 0
25721: PPUSH
25722: CALL_OW 324
25726: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25727: LD_EXP 69
25731: PUSH
25732: LD_EXP 80
25736: AND
25737: IFFALSE 25918
25739: GO 25741
25741: DISABLE
25742: LD_INT 0
25744: PPUSH
25745: PPUSH
25746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25747: LD_ADDR_VAR 0 2
25751: PUSH
25752: LD_INT 22
25754: PUSH
25755: LD_OWVAR 2
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 33
25766: PUSH
25767: LD_INT 3
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PPUSH
25778: CALL_OW 69
25782: ST_TO_ADDR
// if not tmp then
25783: LD_VAR 0 2
25787: NOT
25788: IFFALSE 25792
// exit ;
25790: GO 25918
// side := 0 ;
25792: LD_ADDR_VAR 0 3
25796: PUSH
25797: LD_INT 0
25799: ST_TO_ADDR
// for i := 1 to 8 do
25800: LD_ADDR_VAR 0 1
25804: PUSH
25805: DOUBLE
25806: LD_INT 1
25808: DEC
25809: ST_TO_ADDR
25810: LD_INT 8
25812: PUSH
25813: FOR_TO
25814: IFFALSE 25862
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25816: LD_OWVAR 2
25820: PUSH
25821: LD_VAR 0 1
25825: NONEQUAL
25826: PUSH
25827: LD_OWVAR 2
25831: PPUSH
25832: LD_VAR 0 1
25836: PPUSH
25837: CALL_OW 81
25841: PUSH
25842: LD_INT 2
25844: EQUAL
25845: AND
25846: IFFALSE 25860
// begin side := i ;
25848: LD_ADDR_VAR 0 3
25852: PUSH
25853: LD_VAR 0 1
25857: ST_TO_ADDR
// break ;
25858: GO 25862
// end ;
25860: GO 25813
25862: POP
25863: POP
// if not side then
25864: LD_VAR 0 3
25868: NOT
25869: IFFALSE 25873
// exit ;
25871: GO 25918
// for i := 1 to tmp do
25873: LD_ADDR_VAR 0 1
25877: PUSH
25878: DOUBLE
25879: LD_INT 1
25881: DEC
25882: ST_TO_ADDR
25883: LD_VAR 0 2
25887: PUSH
25888: FOR_TO
25889: IFFALSE 25916
// if Prob ( 60 ) then
25891: LD_INT 60
25893: PPUSH
25894: CALL_OW 13
25898: IFFALSE 25914
// SetSide ( i , side ) ;
25900: LD_VAR 0 1
25904: PPUSH
25905: LD_VAR 0 3
25909: PPUSH
25910: CALL_OW 235
25914: GO 25888
25916: POP
25917: POP
// end ;
25918: PPOPN 3
25920: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25921: LD_EXP 69
25925: PUSH
25926: LD_EXP 82
25930: AND
25931: IFFALSE 26050
25933: GO 25935
25935: DISABLE
25936: LD_INT 0
25938: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25939: LD_ADDR_VAR 0 1
25943: PUSH
25944: LD_INT 22
25946: PUSH
25947: LD_OWVAR 2
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 21
25958: PUSH
25959: LD_INT 1
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 3
25968: PUSH
25969: LD_INT 23
25971: PUSH
25972: LD_INT 0
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: LIST
25987: PPUSH
25988: CALL_OW 69
25992: PUSH
25993: FOR_IN
25994: IFFALSE 26048
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25996: LD_VAR 0 1
26000: PPUSH
26001: CALL_OW 257
26005: PUSH
26006: LD_INT 1
26008: PUSH
26009: LD_INT 2
26011: PUSH
26012: LD_INT 3
26014: PUSH
26015: LD_INT 4
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: IN
26024: IFFALSE 26046
// SetClass ( un , rand ( 1 , 4 ) ) ;
26026: LD_VAR 0 1
26030: PPUSH
26031: LD_INT 1
26033: PPUSH
26034: LD_INT 4
26036: PPUSH
26037: CALL_OW 12
26041: PPUSH
26042: CALL_OW 336
26046: GO 25993
26048: POP
26049: POP
// end ;
26050: PPOPN 1
26052: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26053: LD_EXP 69
26057: PUSH
26058: LD_EXP 81
26062: AND
26063: IFFALSE 26142
26065: GO 26067
26067: DISABLE
26068: LD_INT 0
26070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26071: LD_ADDR_VAR 0 1
26075: PUSH
26076: LD_INT 22
26078: PUSH
26079: LD_OWVAR 2
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 21
26090: PUSH
26091: LD_INT 3
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PPUSH
26102: CALL_OW 69
26106: ST_TO_ADDR
// if not tmp then
26107: LD_VAR 0 1
26111: NOT
26112: IFFALSE 26116
// exit ;
26114: GO 26142
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26116: LD_VAR 0 1
26120: PUSH
26121: LD_INT 1
26123: PPUSH
26124: LD_VAR 0 1
26128: PPUSH
26129: CALL_OW 12
26133: ARRAY
26134: PPUSH
26135: LD_INT 100
26137: PPUSH
26138: CALL_OW 234
// end ;
26142: PPOPN 1
26144: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26145: LD_EXP 69
26149: PUSH
26150: LD_EXP 83
26154: AND
26155: IFFALSE 26253
26157: GO 26159
26159: DISABLE
26160: LD_INT 0
26162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26163: LD_ADDR_VAR 0 1
26167: PUSH
26168: LD_INT 22
26170: PUSH
26171: LD_OWVAR 2
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 21
26182: PUSH
26183: LD_INT 1
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PPUSH
26194: CALL_OW 69
26198: ST_TO_ADDR
// if not tmp then
26199: LD_VAR 0 1
26203: NOT
26204: IFFALSE 26208
// exit ;
26206: GO 26253
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26208: LD_VAR 0 1
26212: PUSH
26213: LD_INT 1
26215: PPUSH
26216: LD_VAR 0 1
26220: PPUSH
26221: CALL_OW 12
26225: ARRAY
26226: PPUSH
26227: LD_INT 1
26229: PPUSH
26230: LD_INT 4
26232: PPUSH
26233: CALL_OW 12
26237: PPUSH
26238: LD_INT 3000
26240: PPUSH
26241: LD_INT 9000
26243: PPUSH
26244: CALL_OW 12
26248: PPUSH
26249: CALL_OW 492
// end ;
26253: PPOPN 1
26255: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26256: LD_EXP 69
26260: PUSH
26261: LD_EXP 84
26265: AND
26266: IFFALSE 26286
26268: GO 26270
26270: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26271: LD_INT 1
26273: PPUSH
26274: LD_OWVAR 2
26278: PPUSH
26279: LD_INT 0
26281: PPUSH
26282: CALL_OW 324
26286: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26287: LD_EXP 69
26291: PUSH
26292: LD_EXP 85
26296: AND
26297: IFFALSE 26380
26299: GO 26301
26301: DISABLE
26302: LD_INT 0
26304: PPUSH
26305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26306: LD_ADDR_VAR 0 2
26310: PUSH
26311: LD_INT 22
26313: PUSH
26314: LD_OWVAR 2
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 21
26325: PUSH
26326: LD_INT 3
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PPUSH
26337: CALL_OW 69
26341: ST_TO_ADDR
// if not tmp then
26342: LD_VAR 0 2
26346: NOT
26347: IFFALSE 26351
// exit ;
26349: GO 26380
// for i in tmp do
26351: LD_ADDR_VAR 0 1
26355: PUSH
26356: LD_VAR 0 2
26360: PUSH
26361: FOR_IN
26362: IFFALSE 26378
// SetBLevel ( i , 10 ) ;
26364: LD_VAR 0 1
26368: PPUSH
26369: LD_INT 10
26371: PPUSH
26372: CALL_OW 241
26376: GO 26361
26378: POP
26379: POP
// end ;
26380: PPOPN 2
26382: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26383: LD_EXP 69
26387: PUSH
26388: LD_EXP 86
26392: AND
26393: IFFALSE 26504
26395: GO 26397
26397: DISABLE
26398: LD_INT 0
26400: PPUSH
26401: PPUSH
26402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26403: LD_ADDR_VAR 0 3
26407: PUSH
26408: LD_INT 22
26410: PUSH
26411: LD_OWVAR 2
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 25
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PPUSH
26434: CALL_OW 69
26438: ST_TO_ADDR
// if not tmp then
26439: LD_VAR 0 3
26443: NOT
26444: IFFALSE 26448
// exit ;
26446: GO 26504
// un := tmp [ rand ( 1 , tmp ) ] ;
26448: LD_ADDR_VAR 0 2
26452: PUSH
26453: LD_VAR 0 3
26457: PUSH
26458: LD_INT 1
26460: PPUSH
26461: LD_VAR 0 3
26465: PPUSH
26466: CALL_OW 12
26470: ARRAY
26471: ST_TO_ADDR
// if Crawls ( un ) then
26472: LD_VAR 0 2
26476: PPUSH
26477: CALL_OW 318
26481: IFFALSE 26492
// ComWalk ( un ) ;
26483: LD_VAR 0 2
26487: PPUSH
26488: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26492: LD_VAR 0 2
26496: PPUSH
26497: LD_INT 5
26499: PPUSH
26500: CALL_OW 336
// end ;
26504: PPOPN 3
26506: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
26507: LD_EXP 69
26511: PUSH
26512: LD_EXP 87
26516: AND
26517: PUSH
26518: LD_OWVAR 67
26522: PUSH
26523: LD_INT 3
26525: LESS
26526: AND
26527: IFFALSE 26546
26529: GO 26531
26531: DISABLE
// Difficulty := Difficulty + 1 ;
26532: LD_ADDR_OWVAR 67
26536: PUSH
26537: LD_OWVAR 67
26541: PUSH
26542: LD_INT 1
26544: PLUS
26545: ST_TO_ADDR
26546: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26547: LD_EXP 69
26551: PUSH
26552: LD_EXP 88
26556: AND
26557: IFFALSE 26660
26559: GO 26561
26561: DISABLE
26562: LD_INT 0
26564: PPUSH
// begin for i := 1 to 5 do
26565: LD_ADDR_VAR 0 1
26569: PUSH
26570: DOUBLE
26571: LD_INT 1
26573: DEC
26574: ST_TO_ADDR
26575: LD_INT 5
26577: PUSH
26578: FOR_TO
26579: IFFALSE 26658
// begin uc_nation := nation_nature ;
26581: LD_ADDR_OWVAR 21
26585: PUSH
26586: LD_INT 0
26588: ST_TO_ADDR
// uc_side := 0 ;
26589: LD_ADDR_OWVAR 20
26593: PUSH
26594: LD_INT 0
26596: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26597: LD_ADDR_OWVAR 29
26601: PUSH
26602: LD_INT 12
26604: PUSH
26605: LD_INT 12
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: ST_TO_ADDR
// hc_agressivity := 20 ;
26612: LD_ADDR_OWVAR 35
26616: PUSH
26617: LD_INT 20
26619: ST_TO_ADDR
// hc_class := class_tiger ;
26620: LD_ADDR_OWVAR 28
26624: PUSH
26625: LD_INT 14
26627: ST_TO_ADDR
// hc_gallery :=  ;
26628: LD_ADDR_OWVAR 33
26632: PUSH
26633: LD_STRING 
26635: ST_TO_ADDR
// hc_name :=  ;
26636: LD_ADDR_OWVAR 26
26640: PUSH
26641: LD_STRING 
26643: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26644: CALL_OW 44
26648: PPUSH
26649: LD_INT 0
26651: PPUSH
26652: CALL_OW 51
// end ;
26656: GO 26578
26658: POP
26659: POP
// end ;
26660: PPOPN 1
26662: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26663: LD_EXP 69
26667: PUSH
26668: LD_EXP 89
26672: AND
26673: IFFALSE 26682
26675: GO 26677
26677: DISABLE
// StreamSibBomb ;
26678: CALL 26683 0 0
26682: END
// export function StreamSibBomb ; var i , x , y ; begin
26683: LD_INT 0
26685: PPUSH
26686: PPUSH
26687: PPUSH
26688: PPUSH
// result := false ;
26689: LD_ADDR_VAR 0 1
26693: PUSH
26694: LD_INT 0
26696: ST_TO_ADDR
// for i := 1 to 16 do
26697: LD_ADDR_VAR 0 2
26701: PUSH
26702: DOUBLE
26703: LD_INT 1
26705: DEC
26706: ST_TO_ADDR
26707: LD_INT 16
26709: PUSH
26710: FOR_TO
26711: IFFALSE 26910
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26713: LD_ADDR_VAR 0 3
26717: PUSH
26718: LD_INT 10
26720: PUSH
26721: LD_INT 20
26723: PUSH
26724: LD_INT 30
26726: PUSH
26727: LD_INT 40
26729: PUSH
26730: LD_INT 50
26732: PUSH
26733: LD_INT 60
26735: PUSH
26736: LD_INT 70
26738: PUSH
26739: LD_INT 80
26741: PUSH
26742: LD_INT 90
26744: PUSH
26745: LD_INT 100
26747: PUSH
26748: LD_INT 110
26750: PUSH
26751: LD_INT 120
26753: PUSH
26754: LD_INT 130
26756: PUSH
26757: LD_INT 140
26759: PUSH
26760: LD_INT 150
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 1
26782: PPUSH
26783: LD_INT 15
26785: PPUSH
26786: CALL_OW 12
26790: ARRAY
26791: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26792: LD_ADDR_VAR 0 4
26796: PUSH
26797: LD_INT 10
26799: PUSH
26800: LD_INT 20
26802: PUSH
26803: LD_INT 30
26805: PUSH
26806: LD_INT 40
26808: PUSH
26809: LD_INT 50
26811: PUSH
26812: LD_INT 60
26814: PUSH
26815: LD_INT 70
26817: PUSH
26818: LD_INT 80
26820: PUSH
26821: LD_INT 90
26823: PUSH
26824: LD_INT 100
26826: PUSH
26827: LD_INT 110
26829: PUSH
26830: LD_INT 120
26832: PUSH
26833: LD_INT 130
26835: PUSH
26836: LD_INT 140
26838: PUSH
26839: LD_INT 150
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 1
26861: PPUSH
26862: LD_INT 15
26864: PPUSH
26865: CALL_OW 12
26869: ARRAY
26870: ST_TO_ADDR
// if ValidHex ( x , y ) then
26871: LD_VAR 0 3
26875: PPUSH
26876: LD_VAR 0 4
26880: PPUSH
26881: CALL_OW 488
26885: IFFALSE 26908
// begin result := [ x , y ] ;
26887: LD_ADDR_VAR 0 1
26891: PUSH
26892: LD_VAR 0 3
26896: PUSH
26897: LD_VAR 0 4
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: ST_TO_ADDR
// break ;
26906: GO 26910
// end ; end ;
26908: GO 26710
26910: POP
26911: POP
// if result then
26912: LD_VAR 0 1
26916: IFFALSE 26976
// begin ToLua ( playSibBomb() ) ;
26918: LD_STRING playSibBomb()
26920: PPUSH
26921: CALL_OW 559
// wait ( 0 0$14 ) ;
26925: LD_INT 490
26927: PPUSH
26928: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26932: LD_VAR 0 1
26936: PUSH
26937: LD_INT 1
26939: ARRAY
26940: PPUSH
26941: LD_VAR 0 1
26945: PUSH
26946: LD_INT 2
26948: ARRAY
26949: PPUSH
26950: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26954: LD_VAR 0 1
26958: PUSH
26959: LD_INT 1
26961: ARRAY
26962: PPUSH
26963: LD_VAR 0 1
26967: PUSH
26968: LD_INT 2
26970: ARRAY
26971: PPUSH
26972: CALL_OW 429
// end ; end ;
26976: LD_VAR 0 1
26980: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26981: LD_EXP 69
26985: PUSH
26986: LD_EXP 91
26990: AND
26991: IFFALSE 27003
26993: GO 26995
26995: DISABLE
// YouLost (  ) ;
26996: LD_STRING 
26998: PPUSH
26999: CALL_OW 104
27003: END
// every 0 0$1 trigger StreamModeActive and sFog do
27004: LD_EXP 69
27008: PUSH
27009: LD_EXP 90
27013: AND
27014: IFFALSE 27028
27016: GO 27018
27018: DISABLE
// FogOff ( your_side ) ;
27019: LD_OWVAR 2
27023: PPUSH
27024: CALL_OW 344
27028: END
// every 0 0$1 trigger StreamModeActive and sSun do
27029: LD_EXP 69
27033: PUSH
27034: LD_EXP 92
27038: AND
27039: IFFALSE 27067
27041: GO 27043
27043: DISABLE
// begin solar_recharge_percent := 0 ;
27044: LD_ADDR_OWVAR 79
27048: PUSH
27049: LD_INT 0
27051: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27052: LD_INT 10500
27054: PPUSH
27055: CALL_OW 67
// solar_recharge_percent := 100 ;
27059: LD_ADDR_OWVAR 79
27063: PUSH
27064: LD_INT 100
27066: ST_TO_ADDR
// end ;
27067: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27068: LD_EXP 69
27072: PUSH
27073: LD_EXP 93
27077: AND
27078: IFFALSE 27317
27080: GO 27082
27082: DISABLE
27083: LD_INT 0
27085: PPUSH
27086: PPUSH
27087: PPUSH
// begin tmp := [ ] ;
27088: LD_ADDR_VAR 0 3
27092: PUSH
27093: EMPTY
27094: ST_TO_ADDR
// for i := 1 to 6 do
27095: LD_ADDR_VAR 0 1
27099: PUSH
27100: DOUBLE
27101: LD_INT 1
27103: DEC
27104: ST_TO_ADDR
27105: LD_INT 6
27107: PUSH
27108: FOR_TO
27109: IFFALSE 27214
// begin uc_nation := nation_nature ;
27111: LD_ADDR_OWVAR 21
27115: PUSH
27116: LD_INT 0
27118: ST_TO_ADDR
// uc_side := 0 ;
27119: LD_ADDR_OWVAR 20
27123: PUSH
27124: LD_INT 0
27126: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27127: LD_ADDR_OWVAR 29
27131: PUSH
27132: LD_INT 12
27134: PUSH
27135: LD_INT 12
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: ST_TO_ADDR
// hc_agressivity := 20 ;
27142: LD_ADDR_OWVAR 35
27146: PUSH
27147: LD_INT 20
27149: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27150: LD_ADDR_OWVAR 28
27154: PUSH
27155: LD_INT 17
27157: ST_TO_ADDR
// hc_gallery :=  ;
27158: LD_ADDR_OWVAR 33
27162: PUSH
27163: LD_STRING 
27165: ST_TO_ADDR
// hc_name :=  ;
27166: LD_ADDR_OWVAR 26
27170: PUSH
27171: LD_STRING 
27173: ST_TO_ADDR
// un := CreateHuman ;
27174: LD_ADDR_VAR 0 2
27178: PUSH
27179: CALL_OW 44
27183: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27184: LD_VAR 0 2
27188: PPUSH
27189: LD_INT 1
27191: PPUSH
27192: CALL_OW 51
// tmp := tmp ^ un ;
27196: LD_ADDR_VAR 0 3
27200: PUSH
27201: LD_VAR 0 3
27205: PUSH
27206: LD_VAR 0 2
27210: ADD
27211: ST_TO_ADDR
// end ;
27212: GO 27108
27214: POP
27215: POP
// repeat wait ( 0 0$1 ) ;
27216: LD_INT 35
27218: PPUSH
27219: CALL_OW 67
// for un in tmp do
27223: LD_ADDR_VAR 0 2
27227: PUSH
27228: LD_VAR 0 3
27232: PUSH
27233: FOR_IN
27234: IFFALSE 27308
// begin if IsDead ( un ) then
27236: LD_VAR 0 2
27240: PPUSH
27241: CALL_OW 301
27245: IFFALSE 27265
// begin tmp := tmp diff un ;
27247: LD_ADDR_VAR 0 3
27251: PUSH
27252: LD_VAR 0 3
27256: PUSH
27257: LD_VAR 0 2
27261: DIFF
27262: ST_TO_ADDR
// continue ;
27263: GO 27233
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27265: LD_VAR 0 2
27269: PPUSH
27270: LD_INT 3
27272: PUSH
27273: LD_INT 22
27275: PUSH
27276: LD_INT 0
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PPUSH
27287: CALL_OW 69
27291: PPUSH
27292: LD_VAR 0 2
27296: PPUSH
27297: CALL_OW 74
27301: PPUSH
27302: CALL_OW 115
// end ;
27306: GO 27233
27308: POP
27309: POP
// until not tmp ;
27310: LD_VAR 0 3
27314: NOT
27315: IFFALSE 27216
// end ;
27317: PPOPN 3
27319: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27320: LD_EXP 69
27324: PUSH
27325: LD_EXP 94
27329: AND
27330: IFFALSE 27384
27332: GO 27334
27334: DISABLE
// begin ToLua ( displayTroll(); ) ;
27335: LD_STRING displayTroll();
27337: PPUSH
27338: CALL_OW 559
// wait ( 3 3$00 ) ;
27342: LD_INT 6300
27344: PPUSH
27345: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27349: LD_STRING hideTroll();
27351: PPUSH
27352: CALL_OW 559
// wait ( 1 1$00 ) ;
27356: LD_INT 2100
27358: PPUSH
27359: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27363: LD_STRING displayTroll();
27365: PPUSH
27366: CALL_OW 559
// wait ( 1 1$00 ) ;
27370: LD_INT 2100
27372: PPUSH
27373: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27377: LD_STRING hideTroll();
27379: PPUSH
27380: CALL_OW 559
// end ;
27384: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27385: LD_EXP 69
27389: PUSH
27390: LD_EXP 95
27394: AND
27395: IFFALSE 27458
27397: GO 27399
27399: DISABLE
27400: LD_INT 0
27402: PPUSH
// begin p := 0 ;
27403: LD_ADDR_VAR 0 1
27407: PUSH
27408: LD_INT 0
27410: ST_TO_ADDR
// repeat game_speed := 1 ;
27411: LD_ADDR_OWVAR 65
27415: PUSH
27416: LD_INT 1
27418: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27419: LD_INT 35
27421: PPUSH
27422: CALL_OW 67
// p := p + 1 ;
27426: LD_ADDR_VAR 0 1
27430: PUSH
27431: LD_VAR 0 1
27435: PUSH
27436: LD_INT 1
27438: PLUS
27439: ST_TO_ADDR
// until p >= 60 ;
27440: LD_VAR 0 1
27444: PUSH
27445: LD_INT 60
27447: GREATEREQUAL
27448: IFFALSE 27411
// game_speed := 4 ;
27450: LD_ADDR_OWVAR 65
27454: PUSH
27455: LD_INT 4
27457: ST_TO_ADDR
// end ;
27458: PPOPN 1
27460: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27461: LD_EXP 69
27465: PUSH
27466: LD_EXP 96
27470: AND
27471: IFFALSE 27617
27473: GO 27475
27475: DISABLE
27476: LD_INT 0
27478: PPUSH
27479: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27480: LD_ADDR_VAR 0 1
27484: PUSH
27485: LD_INT 22
27487: PUSH
27488: LD_OWVAR 2
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 2
27499: PUSH
27500: LD_INT 30
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 30
27512: PUSH
27513: LD_INT 1
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: LIST
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PPUSH
27529: CALL_OW 69
27533: ST_TO_ADDR
// if not depot then
27534: LD_VAR 0 1
27538: NOT
27539: IFFALSE 27543
// exit ;
27541: GO 27617
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27543: LD_ADDR_VAR 0 2
27547: PUSH
27548: LD_VAR 0 1
27552: PUSH
27553: LD_INT 1
27555: PPUSH
27556: LD_VAR 0 1
27560: PPUSH
27561: CALL_OW 12
27565: ARRAY
27566: PPUSH
27567: CALL_OW 274
27571: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27572: LD_VAR 0 2
27576: PPUSH
27577: LD_INT 1
27579: PPUSH
27580: LD_INT 0
27582: PPUSH
27583: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27587: LD_VAR 0 2
27591: PPUSH
27592: LD_INT 2
27594: PPUSH
27595: LD_INT 0
27597: PPUSH
27598: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27602: LD_VAR 0 2
27606: PPUSH
27607: LD_INT 3
27609: PPUSH
27610: LD_INT 0
27612: PPUSH
27613: CALL_OW 277
// end ;
27617: PPOPN 2
27619: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27620: LD_EXP 69
27624: PUSH
27625: LD_EXP 97
27629: AND
27630: IFFALSE 27727
27632: GO 27634
27634: DISABLE
27635: LD_INT 0
27637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27638: LD_ADDR_VAR 0 1
27642: PUSH
27643: LD_INT 22
27645: PUSH
27646: LD_OWVAR 2
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 21
27657: PUSH
27658: LD_INT 1
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 3
27667: PUSH
27668: LD_INT 23
27670: PUSH
27671: LD_INT 0
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: PPUSH
27687: CALL_OW 69
27691: ST_TO_ADDR
// if not tmp then
27692: LD_VAR 0 1
27696: NOT
27697: IFFALSE 27701
// exit ;
27699: GO 27727
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27701: LD_VAR 0 1
27705: PUSH
27706: LD_INT 1
27708: PPUSH
27709: LD_VAR 0 1
27713: PPUSH
27714: CALL_OW 12
27718: ARRAY
27719: PPUSH
27720: LD_INT 200
27722: PPUSH
27723: CALL_OW 234
// end ;
27727: PPOPN 1
27729: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27730: LD_EXP 69
27734: PUSH
27735: LD_EXP 98
27739: AND
27740: IFFALSE 27819
27742: GO 27744
27744: DISABLE
27745: LD_INT 0
27747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27748: LD_ADDR_VAR 0 1
27752: PUSH
27753: LD_INT 22
27755: PUSH
27756: LD_OWVAR 2
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 21
27767: PUSH
27768: LD_INT 2
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PPUSH
27779: CALL_OW 69
27783: ST_TO_ADDR
// if not tmp then
27784: LD_VAR 0 1
27788: NOT
27789: IFFALSE 27793
// exit ;
27791: GO 27819
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27793: LD_VAR 0 1
27797: PUSH
27798: LD_INT 1
27800: PPUSH
27801: LD_VAR 0 1
27805: PPUSH
27806: CALL_OW 12
27810: ARRAY
27811: PPUSH
27812: LD_INT 60
27814: PPUSH
27815: CALL_OW 234
// end ;
27819: PPOPN 1
27821: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27822: LD_EXP 69
27826: PUSH
27827: LD_EXP 99
27831: AND
27832: IFFALSE 27931
27834: GO 27836
27836: DISABLE
27837: LD_INT 0
27839: PPUSH
27840: PPUSH
// begin enable ;
27841: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27842: LD_ADDR_VAR 0 1
27846: PUSH
27847: LD_INT 22
27849: PUSH
27850: LD_OWVAR 2
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 61
27861: PUSH
27862: EMPTY
27863: LIST
27864: PUSH
27865: LD_INT 33
27867: PUSH
27868: LD_INT 2
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: LIST
27879: PPUSH
27880: CALL_OW 69
27884: ST_TO_ADDR
// if not tmp then
27885: LD_VAR 0 1
27889: NOT
27890: IFFALSE 27894
// exit ;
27892: GO 27931
// for i in tmp do
27894: LD_ADDR_VAR 0 2
27898: PUSH
27899: LD_VAR 0 1
27903: PUSH
27904: FOR_IN
27905: IFFALSE 27929
// if IsControledBy ( i ) then
27907: LD_VAR 0 2
27911: PPUSH
27912: CALL_OW 312
27916: IFFALSE 27927
// ComUnlink ( i ) ;
27918: LD_VAR 0 2
27922: PPUSH
27923: CALL_OW 136
27927: GO 27904
27929: POP
27930: POP
// end ;
27931: PPOPN 2
27933: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27934: LD_EXP 69
27938: PUSH
27939: LD_EXP 100
27943: AND
27944: IFFALSE 28084
27946: GO 27948
27948: DISABLE
27949: LD_INT 0
27951: PPUSH
27952: PPUSH
// begin ToLua ( displayPowell(); ) ;
27953: LD_STRING displayPowell();
27955: PPUSH
27956: CALL_OW 559
// uc_side := 0 ;
27960: LD_ADDR_OWVAR 20
27964: PUSH
27965: LD_INT 0
27967: ST_TO_ADDR
// uc_nation := 2 ;
27968: LD_ADDR_OWVAR 21
27972: PUSH
27973: LD_INT 2
27975: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27976: LD_ADDR_OWVAR 37
27980: PUSH
27981: LD_INT 14
27983: ST_TO_ADDR
// vc_engine := engine_siberite ;
27984: LD_ADDR_OWVAR 39
27988: PUSH
27989: LD_INT 3
27991: ST_TO_ADDR
// vc_control := control_apeman ;
27992: LD_ADDR_OWVAR 38
27996: PUSH
27997: LD_INT 5
27999: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28000: LD_ADDR_OWVAR 40
28004: PUSH
28005: LD_INT 29
28007: ST_TO_ADDR
// un := CreateVehicle ;
28008: LD_ADDR_VAR 0 2
28012: PUSH
28013: CALL_OW 45
28017: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28018: LD_VAR 0 2
28022: PPUSH
28023: LD_INT 1
28025: PPUSH
28026: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28030: LD_INT 35
28032: PPUSH
28033: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28037: LD_VAR 0 2
28041: PPUSH
28042: LD_INT 22
28044: PUSH
28045: LD_OWVAR 2
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PPUSH
28054: CALL_OW 69
28058: PPUSH
28059: LD_VAR 0 2
28063: PPUSH
28064: CALL_OW 74
28068: PPUSH
28069: CALL_OW 115
// until IsDead ( un ) ;
28073: LD_VAR 0 2
28077: PPUSH
28078: CALL_OW 301
28082: IFFALSE 28030
// end ;
28084: PPOPN 2
28086: END
// every 0 0$1 trigger StreamModeActive and sStu do
28087: LD_EXP 69
28091: PUSH
28092: LD_EXP 108
28096: AND
28097: IFFALSE 28113
28099: GO 28101
28101: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28102: LD_STRING displayStucuk();
28104: PPUSH
28105: CALL_OW 559
// ResetFog ;
28109: CALL_OW 335
// end ;
28113: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28114: LD_EXP 69
28118: PUSH
28119: LD_EXP 101
28123: AND
28124: IFFALSE 28265
28126: GO 28128
28128: DISABLE
28129: LD_INT 0
28131: PPUSH
28132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28133: LD_ADDR_VAR 0 2
28137: PUSH
28138: LD_INT 22
28140: PUSH
28141: LD_OWVAR 2
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 21
28152: PUSH
28153: LD_INT 1
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PPUSH
28164: CALL_OW 69
28168: ST_TO_ADDR
// if not tmp then
28169: LD_VAR 0 2
28173: NOT
28174: IFFALSE 28178
// exit ;
28176: GO 28265
// un := tmp [ rand ( 1 , tmp ) ] ;
28178: LD_ADDR_VAR 0 1
28182: PUSH
28183: LD_VAR 0 2
28187: PUSH
28188: LD_INT 1
28190: PPUSH
28191: LD_VAR 0 2
28195: PPUSH
28196: CALL_OW 12
28200: ARRAY
28201: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28202: LD_VAR 0 1
28206: PPUSH
28207: LD_INT 0
28209: PPUSH
28210: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28214: LD_VAR 0 1
28218: PPUSH
28219: LD_OWVAR 3
28223: PUSH
28224: LD_VAR 0 1
28228: DIFF
28229: PPUSH
28230: LD_VAR 0 1
28234: PPUSH
28235: CALL_OW 74
28239: PPUSH
28240: CALL_OW 115
// wait ( 0 0$20 ) ;
28244: LD_INT 700
28246: PPUSH
28247: CALL_OW 67
// SetSide ( un , your_side ) ;
28251: LD_VAR 0 1
28255: PPUSH
28256: LD_OWVAR 2
28260: PPUSH
28261: CALL_OW 235
// end ;
28265: PPOPN 2
28267: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28268: LD_EXP 69
28272: PUSH
28273: LD_EXP 102
28277: AND
28278: IFFALSE 28384
28280: GO 28282
28282: DISABLE
28283: LD_INT 0
28285: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28286: LD_ADDR_VAR 0 1
28290: PUSH
28291: LD_INT 22
28293: PUSH
28294: LD_OWVAR 2
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 2
28305: PUSH
28306: LD_INT 30
28308: PUSH
28309: LD_INT 0
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 30
28318: PUSH
28319: LD_INT 1
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: LIST
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PPUSH
28335: CALL_OW 69
28339: ST_TO_ADDR
// if not depot then
28340: LD_VAR 0 1
28344: NOT
28345: IFFALSE 28349
// exit ;
28347: GO 28384
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28349: LD_VAR 0 1
28353: PUSH
28354: LD_INT 1
28356: ARRAY
28357: PPUSH
28358: CALL_OW 250
28362: PPUSH
28363: LD_VAR 0 1
28367: PUSH
28368: LD_INT 1
28370: ARRAY
28371: PPUSH
28372: CALL_OW 251
28376: PPUSH
28377: LD_INT 70
28379: PPUSH
28380: CALL_OW 495
// end ;
28384: PPOPN 1
28386: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28387: LD_EXP 69
28391: PUSH
28392: LD_EXP 103
28396: AND
28397: IFFALSE 28608
28399: GO 28401
28401: DISABLE
28402: LD_INT 0
28404: PPUSH
28405: PPUSH
28406: PPUSH
28407: PPUSH
28408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28409: LD_ADDR_VAR 0 5
28413: PUSH
28414: LD_INT 22
28416: PUSH
28417: LD_OWVAR 2
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 21
28428: PUSH
28429: LD_INT 1
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PPUSH
28440: CALL_OW 69
28444: ST_TO_ADDR
// if not tmp then
28445: LD_VAR 0 5
28449: NOT
28450: IFFALSE 28454
// exit ;
28452: GO 28608
// for i in tmp do
28454: LD_ADDR_VAR 0 1
28458: PUSH
28459: LD_VAR 0 5
28463: PUSH
28464: FOR_IN
28465: IFFALSE 28606
// begin d := rand ( 0 , 5 ) ;
28467: LD_ADDR_VAR 0 4
28471: PUSH
28472: LD_INT 0
28474: PPUSH
28475: LD_INT 5
28477: PPUSH
28478: CALL_OW 12
28482: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28483: LD_ADDR_VAR 0 2
28487: PUSH
28488: LD_VAR 0 1
28492: PPUSH
28493: CALL_OW 250
28497: PPUSH
28498: LD_VAR 0 4
28502: PPUSH
28503: LD_INT 3
28505: PPUSH
28506: LD_INT 12
28508: PPUSH
28509: CALL_OW 12
28513: PPUSH
28514: CALL_OW 272
28518: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28519: LD_ADDR_VAR 0 3
28523: PUSH
28524: LD_VAR 0 1
28528: PPUSH
28529: CALL_OW 251
28533: PPUSH
28534: LD_VAR 0 4
28538: PPUSH
28539: LD_INT 3
28541: PPUSH
28542: LD_INT 12
28544: PPUSH
28545: CALL_OW 12
28549: PPUSH
28550: CALL_OW 273
28554: ST_TO_ADDR
// if ValidHex ( x , y ) then
28555: LD_VAR 0 2
28559: PPUSH
28560: LD_VAR 0 3
28564: PPUSH
28565: CALL_OW 488
28569: IFFALSE 28604
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28571: LD_VAR 0 1
28575: PPUSH
28576: LD_VAR 0 2
28580: PPUSH
28581: LD_VAR 0 3
28585: PPUSH
28586: LD_INT 3
28588: PPUSH
28589: LD_INT 6
28591: PPUSH
28592: CALL_OW 12
28596: PPUSH
28597: LD_INT 1
28599: PPUSH
28600: CALL_OW 483
// end ;
28604: GO 28464
28606: POP
28607: POP
// end ;
28608: PPOPN 5
28610: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28611: LD_EXP 69
28615: PUSH
28616: LD_EXP 104
28620: AND
28621: IFFALSE 28715
28623: GO 28625
28625: DISABLE
28626: LD_INT 0
28628: PPUSH
28629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28630: LD_ADDR_VAR 0 2
28634: PUSH
28635: LD_INT 22
28637: PUSH
28638: LD_OWVAR 2
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 32
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 21
28659: PUSH
28660: LD_INT 2
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: LIST
28671: PPUSH
28672: CALL_OW 69
28676: ST_TO_ADDR
// if not tmp then
28677: LD_VAR 0 2
28681: NOT
28682: IFFALSE 28686
// exit ;
28684: GO 28715
// for i in tmp do
28686: LD_ADDR_VAR 0 1
28690: PUSH
28691: LD_VAR 0 2
28695: PUSH
28696: FOR_IN
28697: IFFALSE 28713
// SetFuel ( i , 0 ) ;
28699: LD_VAR 0 1
28703: PPUSH
28704: LD_INT 0
28706: PPUSH
28707: CALL_OW 240
28711: GO 28696
28713: POP
28714: POP
// end ;
28715: PPOPN 2
28717: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28718: LD_EXP 69
28722: PUSH
28723: LD_EXP 105
28727: AND
28728: IFFALSE 28794
28730: GO 28732
28732: DISABLE
28733: LD_INT 0
28735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28736: LD_ADDR_VAR 0 1
28740: PUSH
28741: LD_INT 22
28743: PUSH
28744: LD_OWVAR 2
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 30
28755: PUSH
28756: LD_INT 29
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PPUSH
28767: CALL_OW 69
28771: ST_TO_ADDR
// if not tmp then
28772: LD_VAR 0 1
28776: NOT
28777: IFFALSE 28781
// exit ;
28779: GO 28794
// DestroyUnit ( tmp [ 1 ] ) ;
28781: LD_VAR 0 1
28785: PUSH
28786: LD_INT 1
28788: ARRAY
28789: PPUSH
28790: CALL_OW 65
// end ;
28794: PPOPN 1
28796: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28797: LD_EXP 69
28801: PUSH
28802: LD_EXP 107
28806: AND
28807: IFFALSE 28936
28809: GO 28811
28811: DISABLE
28812: LD_INT 0
28814: PPUSH
// begin uc_side := 0 ;
28815: LD_ADDR_OWVAR 20
28819: PUSH
28820: LD_INT 0
28822: ST_TO_ADDR
// uc_nation := nation_arabian ;
28823: LD_ADDR_OWVAR 21
28827: PUSH
28828: LD_INT 2
28830: ST_TO_ADDR
// hc_gallery :=  ;
28831: LD_ADDR_OWVAR 33
28835: PUSH
28836: LD_STRING 
28838: ST_TO_ADDR
// hc_name :=  ;
28839: LD_ADDR_OWVAR 26
28843: PUSH
28844: LD_STRING 
28846: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28847: LD_INT 1
28849: PPUSH
28850: LD_INT 11
28852: PPUSH
28853: LD_INT 10
28855: PPUSH
28856: CALL_OW 380
// un := CreateHuman ;
28860: LD_ADDR_VAR 0 1
28864: PUSH
28865: CALL_OW 44
28869: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28870: LD_VAR 0 1
28874: PPUSH
28875: LD_INT 1
28877: PPUSH
28878: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28882: LD_INT 35
28884: PPUSH
28885: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28889: LD_VAR 0 1
28893: PPUSH
28894: LD_INT 22
28896: PUSH
28897: LD_OWVAR 2
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PPUSH
28906: CALL_OW 69
28910: PPUSH
28911: LD_VAR 0 1
28915: PPUSH
28916: CALL_OW 74
28920: PPUSH
28921: CALL_OW 115
// until IsDead ( un ) ;
28925: LD_VAR 0 1
28929: PPUSH
28930: CALL_OW 301
28934: IFFALSE 28882
// end ;
28936: PPOPN 1
28938: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28939: LD_EXP 69
28943: PUSH
28944: LD_EXP 109
28948: AND
28949: IFFALSE 28961
28951: GO 28953
28953: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28954: LD_STRING earthquake(getX(game), 0, 32)
28956: PPUSH
28957: CALL_OW 559
28961: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28962: LD_EXP 69
28966: PUSH
28967: LD_EXP 110
28971: AND
28972: IFFALSE 29063
28974: GO 28976
28976: DISABLE
28977: LD_INT 0
28979: PPUSH
// begin enable ;
28980: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28981: LD_ADDR_VAR 0 1
28985: PUSH
28986: LD_INT 22
28988: PUSH
28989: LD_OWVAR 2
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 21
29000: PUSH
29001: LD_INT 2
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 33
29010: PUSH
29011: LD_INT 3
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: LIST
29022: PPUSH
29023: CALL_OW 69
29027: ST_TO_ADDR
// if not tmp then
29028: LD_VAR 0 1
29032: NOT
29033: IFFALSE 29037
// exit ;
29035: GO 29063
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29037: LD_VAR 0 1
29041: PUSH
29042: LD_INT 1
29044: PPUSH
29045: LD_VAR 0 1
29049: PPUSH
29050: CALL_OW 12
29054: ARRAY
29055: PPUSH
29056: LD_INT 1
29058: PPUSH
29059: CALL_OW 234
// end ;
29063: PPOPN 1
29065: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29066: LD_EXP 69
29070: PUSH
29071: LD_EXP 111
29075: AND
29076: IFFALSE 29217
29078: GO 29080
29080: DISABLE
29081: LD_INT 0
29083: PPUSH
29084: PPUSH
29085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29086: LD_ADDR_VAR 0 3
29090: PUSH
29091: LD_INT 22
29093: PUSH
29094: LD_OWVAR 2
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 25
29105: PUSH
29106: LD_INT 1
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PPUSH
29117: CALL_OW 69
29121: ST_TO_ADDR
// if not tmp then
29122: LD_VAR 0 3
29126: NOT
29127: IFFALSE 29131
// exit ;
29129: GO 29217
// un := tmp [ rand ( 1 , tmp ) ] ;
29131: LD_ADDR_VAR 0 2
29135: PUSH
29136: LD_VAR 0 3
29140: PUSH
29141: LD_INT 1
29143: PPUSH
29144: LD_VAR 0 3
29148: PPUSH
29149: CALL_OW 12
29153: ARRAY
29154: ST_TO_ADDR
// if Crawls ( un ) then
29155: LD_VAR 0 2
29159: PPUSH
29160: CALL_OW 318
29164: IFFALSE 29175
// ComWalk ( un ) ;
29166: LD_VAR 0 2
29170: PPUSH
29171: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29175: LD_VAR 0 2
29179: PPUSH
29180: LD_INT 9
29182: PPUSH
29183: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29187: LD_INT 28
29189: PPUSH
29190: LD_OWVAR 2
29194: PPUSH
29195: LD_INT 2
29197: PPUSH
29198: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29202: LD_INT 29
29204: PPUSH
29205: LD_OWVAR 2
29209: PPUSH
29210: LD_INT 2
29212: PPUSH
29213: CALL_OW 322
// end ;
29217: PPOPN 3
29219: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29220: LD_EXP 69
29224: PUSH
29225: LD_EXP 112
29229: AND
29230: IFFALSE 29341
29232: GO 29234
29234: DISABLE
29235: LD_INT 0
29237: PPUSH
29238: PPUSH
29239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29240: LD_ADDR_VAR 0 3
29244: PUSH
29245: LD_INT 22
29247: PUSH
29248: LD_OWVAR 2
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 25
29259: PUSH
29260: LD_INT 1
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PPUSH
29271: CALL_OW 69
29275: ST_TO_ADDR
// if not tmp then
29276: LD_VAR 0 3
29280: NOT
29281: IFFALSE 29285
// exit ;
29283: GO 29341
// un := tmp [ rand ( 1 , tmp ) ] ;
29285: LD_ADDR_VAR 0 2
29289: PUSH
29290: LD_VAR 0 3
29294: PUSH
29295: LD_INT 1
29297: PPUSH
29298: LD_VAR 0 3
29302: PPUSH
29303: CALL_OW 12
29307: ARRAY
29308: ST_TO_ADDR
// if Crawls ( un ) then
29309: LD_VAR 0 2
29313: PPUSH
29314: CALL_OW 318
29318: IFFALSE 29329
// ComWalk ( un ) ;
29320: LD_VAR 0 2
29324: PPUSH
29325: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29329: LD_VAR 0 2
29333: PPUSH
29334: LD_INT 8
29336: PPUSH
29337: CALL_OW 336
// end ;
29341: PPOPN 3
29343: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29344: LD_EXP 69
29348: PUSH
29349: LD_EXP 113
29353: AND
29354: IFFALSE 29498
29356: GO 29358
29358: DISABLE
29359: LD_INT 0
29361: PPUSH
29362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29363: LD_ADDR_VAR 0 2
29367: PUSH
29368: LD_INT 22
29370: PUSH
29371: LD_OWVAR 2
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 21
29382: PUSH
29383: LD_INT 2
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 2
29392: PUSH
29393: LD_INT 34
29395: PUSH
29396: LD_INT 12
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 34
29405: PUSH
29406: LD_INT 51
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 34
29415: PUSH
29416: LD_INT 32
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: PPUSH
29434: CALL_OW 69
29438: ST_TO_ADDR
// if not tmp then
29439: LD_VAR 0 2
29443: NOT
29444: IFFALSE 29448
// exit ;
29446: GO 29498
// for i in tmp do
29448: LD_ADDR_VAR 0 1
29452: PUSH
29453: LD_VAR 0 2
29457: PUSH
29458: FOR_IN
29459: IFFALSE 29496
// if GetCargo ( i , mat_artifact ) = 0 then
29461: LD_VAR 0 1
29465: PPUSH
29466: LD_INT 4
29468: PPUSH
29469: CALL_OW 289
29473: PUSH
29474: LD_INT 0
29476: EQUAL
29477: IFFALSE 29494
// SetCargo ( i , mat_siberit , 100 ) ;
29479: LD_VAR 0 1
29483: PPUSH
29484: LD_INT 3
29486: PPUSH
29487: LD_INT 100
29489: PPUSH
29490: CALL_OW 290
29494: GO 29458
29496: POP
29497: POP
// end ;
29498: PPOPN 2
29500: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29501: LD_EXP 69
29505: PUSH
29506: LD_EXP 114
29510: AND
29511: IFFALSE 29694
29513: GO 29515
29515: DISABLE
29516: LD_INT 0
29518: PPUSH
29519: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29520: LD_ADDR_VAR 0 2
29524: PUSH
29525: LD_INT 22
29527: PUSH
29528: LD_OWVAR 2
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PPUSH
29537: CALL_OW 69
29541: ST_TO_ADDR
// if not tmp then
29542: LD_VAR 0 2
29546: NOT
29547: IFFALSE 29551
// exit ;
29549: GO 29694
// for i := 1 to 2 do
29551: LD_ADDR_VAR 0 1
29555: PUSH
29556: DOUBLE
29557: LD_INT 1
29559: DEC
29560: ST_TO_ADDR
29561: LD_INT 2
29563: PUSH
29564: FOR_TO
29565: IFFALSE 29692
// begin uc_side := your_side ;
29567: LD_ADDR_OWVAR 20
29571: PUSH
29572: LD_OWVAR 2
29576: ST_TO_ADDR
// uc_nation := nation_american ;
29577: LD_ADDR_OWVAR 21
29581: PUSH
29582: LD_INT 1
29584: ST_TO_ADDR
// vc_chassis := us_morphling ;
29585: LD_ADDR_OWVAR 37
29589: PUSH
29590: LD_INT 5
29592: ST_TO_ADDR
// vc_engine := engine_siberite ;
29593: LD_ADDR_OWVAR 39
29597: PUSH
29598: LD_INT 3
29600: ST_TO_ADDR
// vc_control := control_computer ;
29601: LD_ADDR_OWVAR 38
29605: PUSH
29606: LD_INT 3
29608: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29609: LD_ADDR_OWVAR 40
29613: PUSH
29614: LD_INT 10
29616: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29617: LD_VAR 0 2
29621: PUSH
29622: LD_INT 1
29624: ARRAY
29625: PPUSH
29626: CALL_OW 310
29630: NOT
29631: IFFALSE 29678
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29633: CALL_OW 45
29637: PPUSH
29638: LD_VAR 0 2
29642: PUSH
29643: LD_INT 1
29645: ARRAY
29646: PPUSH
29647: CALL_OW 250
29651: PPUSH
29652: LD_VAR 0 2
29656: PUSH
29657: LD_INT 1
29659: ARRAY
29660: PPUSH
29661: CALL_OW 251
29665: PPUSH
29666: LD_INT 12
29668: PPUSH
29669: LD_INT 1
29671: PPUSH
29672: CALL_OW 50
29676: GO 29690
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29678: CALL_OW 45
29682: PPUSH
29683: LD_INT 1
29685: PPUSH
29686: CALL_OW 51
// end ;
29690: GO 29564
29692: POP
29693: POP
// end ;
29694: PPOPN 2
29696: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29697: LD_EXP 69
29701: PUSH
29702: LD_EXP 115
29706: AND
29707: IFFALSE 29929
29709: GO 29711
29711: DISABLE
29712: LD_INT 0
29714: PPUSH
29715: PPUSH
29716: PPUSH
29717: PPUSH
29718: PPUSH
29719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29720: LD_ADDR_VAR 0 6
29724: PUSH
29725: LD_INT 22
29727: PUSH
29728: LD_OWVAR 2
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 21
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 3
29749: PUSH
29750: LD_INT 23
29752: PUSH
29753: LD_INT 0
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: LIST
29768: PPUSH
29769: CALL_OW 69
29773: ST_TO_ADDR
// if not tmp then
29774: LD_VAR 0 6
29778: NOT
29779: IFFALSE 29783
// exit ;
29781: GO 29929
// s1 := rand ( 1 , 4 ) ;
29783: LD_ADDR_VAR 0 2
29787: PUSH
29788: LD_INT 1
29790: PPUSH
29791: LD_INT 4
29793: PPUSH
29794: CALL_OW 12
29798: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29799: LD_ADDR_VAR 0 4
29803: PUSH
29804: LD_VAR 0 6
29808: PUSH
29809: LD_INT 1
29811: ARRAY
29812: PPUSH
29813: LD_VAR 0 2
29817: PPUSH
29818: CALL_OW 259
29822: ST_TO_ADDR
// if s1 = 1 then
29823: LD_VAR 0 2
29827: PUSH
29828: LD_INT 1
29830: EQUAL
29831: IFFALSE 29851
// s2 := rand ( 2 , 4 ) else
29833: LD_ADDR_VAR 0 3
29837: PUSH
29838: LD_INT 2
29840: PPUSH
29841: LD_INT 4
29843: PPUSH
29844: CALL_OW 12
29848: ST_TO_ADDR
29849: GO 29859
// s2 := 1 ;
29851: LD_ADDR_VAR 0 3
29855: PUSH
29856: LD_INT 1
29858: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29859: LD_ADDR_VAR 0 5
29863: PUSH
29864: LD_VAR 0 6
29868: PUSH
29869: LD_INT 1
29871: ARRAY
29872: PPUSH
29873: LD_VAR 0 3
29877: PPUSH
29878: CALL_OW 259
29882: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29883: LD_VAR 0 6
29887: PUSH
29888: LD_INT 1
29890: ARRAY
29891: PPUSH
29892: LD_VAR 0 2
29896: PPUSH
29897: LD_VAR 0 5
29901: PPUSH
29902: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29906: LD_VAR 0 6
29910: PUSH
29911: LD_INT 1
29913: ARRAY
29914: PPUSH
29915: LD_VAR 0 3
29919: PPUSH
29920: LD_VAR 0 4
29924: PPUSH
29925: CALL_OW 237
// end ;
29929: PPOPN 6
29931: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29932: LD_EXP 69
29936: PUSH
29937: LD_EXP 116
29941: AND
29942: IFFALSE 30021
29944: GO 29946
29946: DISABLE
29947: LD_INT 0
29949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29950: LD_ADDR_VAR 0 1
29954: PUSH
29955: LD_INT 22
29957: PUSH
29958: LD_OWVAR 2
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 30
29969: PUSH
29970: LD_INT 3
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PPUSH
29981: CALL_OW 69
29985: ST_TO_ADDR
// if not tmp then
29986: LD_VAR 0 1
29990: NOT
29991: IFFALSE 29995
// exit ;
29993: GO 30021
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29995: LD_VAR 0 1
29999: PUSH
30000: LD_INT 1
30002: PPUSH
30003: LD_VAR 0 1
30007: PPUSH
30008: CALL_OW 12
30012: ARRAY
30013: PPUSH
30014: LD_INT 1
30016: PPUSH
30017: CALL_OW 234
// end ;
30021: PPOPN 1
30023: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30024: LD_EXP 69
30028: PUSH
30029: LD_EXP 117
30033: AND
30034: IFFALSE 30146
30036: GO 30038
30038: DISABLE
30039: LD_INT 0
30041: PPUSH
30042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30043: LD_ADDR_VAR 0 2
30047: PUSH
30048: LD_INT 22
30050: PUSH
30051: LD_OWVAR 2
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 2
30062: PUSH
30063: LD_INT 30
30065: PUSH
30066: LD_INT 27
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 30
30075: PUSH
30076: LD_INT 26
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 30
30085: PUSH
30086: LD_INT 28
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PPUSH
30103: CALL_OW 69
30107: ST_TO_ADDR
// if not tmp then
30108: LD_VAR 0 2
30112: NOT
30113: IFFALSE 30117
// exit ;
30115: GO 30146
// for i in tmp do
30117: LD_ADDR_VAR 0 1
30121: PUSH
30122: LD_VAR 0 2
30126: PUSH
30127: FOR_IN
30128: IFFALSE 30144
// SetLives ( i , 1 ) ;
30130: LD_VAR 0 1
30134: PPUSH
30135: LD_INT 1
30137: PPUSH
30138: CALL_OW 234
30142: GO 30127
30144: POP
30145: POP
// end ;
30146: PPOPN 2
30148: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30149: LD_EXP 69
30153: PUSH
30154: LD_EXP 118
30158: AND
30159: IFFALSE 30433
30161: GO 30163
30163: DISABLE
30164: LD_INT 0
30166: PPUSH
30167: PPUSH
30168: PPUSH
// begin i := rand ( 1 , 7 ) ;
30169: LD_ADDR_VAR 0 1
30173: PUSH
30174: LD_INT 1
30176: PPUSH
30177: LD_INT 7
30179: PPUSH
30180: CALL_OW 12
30184: ST_TO_ADDR
// case i of 1 :
30185: LD_VAR 0 1
30189: PUSH
30190: LD_INT 1
30192: DOUBLE
30193: EQUAL
30194: IFTRUE 30198
30196: GO 30208
30198: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30199: LD_STRING earthquake(getX(game), 0, 32)
30201: PPUSH
30202: CALL_OW 559
30206: GO 30433
30208: LD_INT 2
30210: DOUBLE
30211: EQUAL
30212: IFTRUE 30216
30214: GO 30230
30216: POP
// begin ToLua ( displayStucuk(); ) ;
30217: LD_STRING displayStucuk();
30219: PPUSH
30220: CALL_OW 559
// ResetFog ;
30224: CALL_OW 335
// end ; 3 :
30228: GO 30433
30230: LD_INT 3
30232: DOUBLE
30233: EQUAL
30234: IFTRUE 30238
30236: GO 30342
30238: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30239: LD_ADDR_VAR 0 2
30243: PUSH
30244: LD_INT 22
30246: PUSH
30247: LD_OWVAR 2
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 25
30258: PUSH
30259: LD_INT 1
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PPUSH
30270: CALL_OW 69
30274: ST_TO_ADDR
// if not tmp then
30275: LD_VAR 0 2
30279: NOT
30280: IFFALSE 30284
// exit ;
30282: GO 30433
// un := tmp [ rand ( 1 , tmp ) ] ;
30284: LD_ADDR_VAR 0 3
30288: PUSH
30289: LD_VAR 0 2
30293: PUSH
30294: LD_INT 1
30296: PPUSH
30297: LD_VAR 0 2
30301: PPUSH
30302: CALL_OW 12
30306: ARRAY
30307: ST_TO_ADDR
// if Crawls ( un ) then
30308: LD_VAR 0 3
30312: PPUSH
30313: CALL_OW 318
30317: IFFALSE 30328
// ComWalk ( un ) ;
30319: LD_VAR 0 3
30323: PPUSH
30324: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30328: LD_VAR 0 3
30332: PPUSH
30333: LD_INT 8
30335: PPUSH
30336: CALL_OW 336
// end ; 4 :
30340: GO 30433
30342: LD_INT 4
30344: DOUBLE
30345: EQUAL
30346: IFTRUE 30350
30348: GO 30411
30350: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30351: LD_ADDR_VAR 0 2
30355: PUSH
30356: LD_INT 22
30358: PUSH
30359: LD_OWVAR 2
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 30
30370: PUSH
30371: LD_INT 29
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PPUSH
30382: CALL_OW 69
30386: ST_TO_ADDR
// if not tmp then
30387: LD_VAR 0 2
30391: NOT
30392: IFFALSE 30396
// exit ;
30394: GO 30433
// DestroyUnit ( tmp [ 1 ] ) ;
30396: LD_VAR 0 2
30400: PUSH
30401: LD_INT 1
30403: ARRAY
30404: PPUSH
30405: CALL_OW 65
// end ; 5 .. 7 :
30409: GO 30433
30411: LD_INT 5
30413: DOUBLE
30414: GREATEREQUAL
30415: IFFALSE 30423
30417: LD_INT 7
30419: DOUBLE
30420: LESSEQUAL
30421: IFTRUE 30425
30423: GO 30432
30425: POP
// StreamSibBomb ; end ;
30426: CALL 26683 0 0
30430: GO 30433
30432: POP
// end ;
30433: PPOPN 3
30435: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30436: LD_EXP 69
30440: PUSH
30441: LD_EXP 119
30445: AND
30446: IFFALSE 30602
30448: GO 30450
30450: DISABLE
30451: LD_INT 0
30453: PPUSH
30454: PPUSH
30455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30456: LD_ADDR_VAR 0 2
30460: PUSH
30461: LD_INT 81
30463: PUSH
30464: LD_OWVAR 2
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 2
30475: PUSH
30476: LD_INT 21
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 21
30488: PUSH
30489: LD_INT 2
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: LIST
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PPUSH
30505: CALL_OW 69
30509: ST_TO_ADDR
// if not tmp then
30510: LD_VAR 0 2
30514: NOT
30515: IFFALSE 30519
// exit ;
30517: GO 30602
// p := 0 ;
30519: LD_ADDR_VAR 0 3
30523: PUSH
30524: LD_INT 0
30526: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30527: LD_INT 35
30529: PPUSH
30530: CALL_OW 67
// p := p + 1 ;
30534: LD_ADDR_VAR 0 3
30538: PUSH
30539: LD_VAR 0 3
30543: PUSH
30544: LD_INT 1
30546: PLUS
30547: ST_TO_ADDR
// for i in tmp do
30548: LD_ADDR_VAR 0 1
30552: PUSH
30553: LD_VAR 0 2
30557: PUSH
30558: FOR_IN
30559: IFFALSE 30590
// if GetLives ( i ) < 1000 then
30561: LD_VAR 0 1
30565: PPUSH
30566: CALL_OW 256
30570: PUSH
30571: LD_INT 1000
30573: LESS
30574: IFFALSE 30588
// SetLives ( i , 1000 ) ;
30576: LD_VAR 0 1
30580: PPUSH
30581: LD_INT 1000
30583: PPUSH
30584: CALL_OW 234
30588: GO 30558
30590: POP
30591: POP
// until p > 20 ;
30592: LD_VAR 0 3
30596: PUSH
30597: LD_INT 20
30599: GREATER
30600: IFFALSE 30527
// end ;
30602: PPOPN 3
30604: END
// every 0 0$1 trigger StreamModeActive and sTime do
30605: LD_EXP 69
30609: PUSH
30610: LD_EXP 120
30614: AND
30615: IFFALSE 30650
30617: GO 30619
30619: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30620: LD_INT 28
30622: PPUSH
30623: LD_OWVAR 2
30627: PPUSH
30628: LD_INT 2
30630: PPUSH
30631: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30635: LD_INT 30
30637: PPUSH
30638: LD_OWVAR 2
30642: PPUSH
30643: LD_INT 2
30645: PPUSH
30646: CALL_OW 322
// end ;
30650: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30651: LD_EXP 69
30655: PUSH
30656: LD_EXP 121
30660: AND
30661: IFFALSE 30782
30663: GO 30665
30665: DISABLE
30666: LD_INT 0
30668: PPUSH
30669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30670: LD_ADDR_VAR 0 2
30674: PUSH
30675: LD_INT 22
30677: PUSH
30678: LD_OWVAR 2
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 21
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 3
30699: PUSH
30700: LD_INT 23
30702: PUSH
30703: LD_INT 0
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: PPUSH
30719: CALL_OW 69
30723: ST_TO_ADDR
// if not tmp then
30724: LD_VAR 0 2
30728: NOT
30729: IFFALSE 30733
// exit ;
30731: GO 30782
// for i in tmp do
30733: LD_ADDR_VAR 0 1
30737: PUSH
30738: LD_VAR 0 2
30742: PUSH
30743: FOR_IN
30744: IFFALSE 30780
// begin if Crawls ( i ) then
30746: LD_VAR 0 1
30750: PPUSH
30751: CALL_OW 318
30755: IFFALSE 30766
// ComWalk ( i ) ;
30757: LD_VAR 0 1
30761: PPUSH
30762: CALL_OW 138
// SetClass ( i , 2 ) ;
30766: LD_VAR 0 1
30770: PPUSH
30771: LD_INT 2
30773: PPUSH
30774: CALL_OW 336
// end ;
30778: GO 30743
30780: POP
30781: POP
// end ;
30782: PPOPN 2
30784: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30785: LD_EXP 69
30789: PUSH
30790: LD_EXP 122
30794: AND
30795: IFFALSE 31076
30797: GO 30799
30799: DISABLE
30800: LD_INT 0
30802: PPUSH
30803: PPUSH
30804: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30805: LD_OWVAR 2
30809: PPUSH
30810: LD_INT 9
30812: PPUSH
30813: LD_INT 1
30815: PPUSH
30816: LD_INT 1
30818: PPUSH
30819: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30823: LD_INT 9
30825: PPUSH
30826: LD_OWVAR 2
30830: PPUSH
30831: CALL_OW 343
// uc_side := 9 ;
30835: LD_ADDR_OWVAR 20
30839: PUSH
30840: LD_INT 9
30842: ST_TO_ADDR
// uc_nation := 2 ;
30843: LD_ADDR_OWVAR 21
30847: PUSH
30848: LD_INT 2
30850: ST_TO_ADDR
// hc_name := Dark Warrior ;
30851: LD_ADDR_OWVAR 26
30855: PUSH
30856: LD_STRING Dark Warrior
30858: ST_TO_ADDR
// hc_gallery :=  ;
30859: LD_ADDR_OWVAR 33
30863: PUSH
30864: LD_STRING 
30866: ST_TO_ADDR
// hc_noskilllimit := true ;
30867: LD_ADDR_OWVAR 76
30871: PUSH
30872: LD_INT 1
30874: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30875: LD_ADDR_OWVAR 31
30879: PUSH
30880: LD_INT 30
30882: PUSH
30883: LD_INT 30
30885: PUSH
30886: LD_INT 30
30888: PUSH
30889: LD_INT 30
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: ST_TO_ADDR
// un := CreateHuman ;
30898: LD_ADDR_VAR 0 3
30902: PUSH
30903: CALL_OW 44
30907: ST_TO_ADDR
// hc_noskilllimit := false ;
30908: LD_ADDR_OWVAR 76
30912: PUSH
30913: LD_INT 0
30915: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30916: LD_VAR 0 3
30920: PPUSH
30921: LD_INT 1
30923: PPUSH
30924: CALL_OW 51
// p := 0 ;
30928: LD_ADDR_VAR 0 2
30932: PUSH
30933: LD_INT 0
30935: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30936: LD_INT 35
30938: PPUSH
30939: CALL_OW 67
// p := p + 1 ;
30943: LD_ADDR_VAR 0 2
30947: PUSH
30948: LD_VAR 0 2
30952: PUSH
30953: LD_INT 1
30955: PLUS
30956: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30957: LD_VAR 0 3
30961: PPUSH
30962: CALL_OW 256
30966: PUSH
30967: LD_INT 1000
30969: LESS
30970: IFFALSE 30984
// SetLives ( un , 1000 ) ;
30972: LD_VAR 0 3
30976: PPUSH
30977: LD_INT 1000
30979: PPUSH
30980: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30984: LD_VAR 0 3
30988: PPUSH
30989: LD_INT 81
30991: PUSH
30992: LD_OWVAR 2
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 91
31003: PUSH
31004: LD_VAR 0 3
31008: PUSH
31009: LD_INT 30
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: LIST
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PPUSH
31021: CALL_OW 69
31025: PPUSH
31026: LD_VAR 0 3
31030: PPUSH
31031: CALL_OW 74
31035: PPUSH
31036: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
31040: LD_VAR 0 2
31044: PUSH
31045: LD_INT 60
31047: GREATER
31048: PUSH
31049: LD_VAR 0 3
31053: PPUSH
31054: CALL_OW 301
31058: OR
31059: IFFALSE 30936
// if un then
31061: LD_VAR 0 3
31065: IFFALSE 31076
// RemoveUnit ( un ) ;
31067: LD_VAR 0 3
31071: PPUSH
31072: CALL_OW 64
// end ;
31076: PPOPN 3
31078: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31079: LD_INT 0
31081: PPUSH
// case cmd of 301 :
31082: LD_VAR 0 1
31086: PUSH
31087: LD_INT 301
31089: DOUBLE
31090: EQUAL
31091: IFTRUE 31095
31093: GO 31127
31095: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31096: LD_VAR 0 6
31100: PPUSH
31101: LD_VAR 0 7
31105: PPUSH
31106: LD_VAR 0 8
31110: PPUSH
31111: LD_VAR 0 4
31115: PPUSH
31116: LD_VAR 0 5
31120: PPUSH
31121: CALL 32328 0 5
31125: GO 31248
31127: LD_INT 302
31129: DOUBLE
31130: EQUAL
31131: IFTRUE 31135
31133: GO 31172
31135: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31136: LD_VAR 0 6
31140: PPUSH
31141: LD_VAR 0 7
31145: PPUSH
31146: LD_VAR 0 8
31150: PPUSH
31151: LD_VAR 0 9
31155: PPUSH
31156: LD_VAR 0 4
31160: PPUSH
31161: LD_VAR 0 5
31165: PPUSH
31166: CALL 32419 0 6
31170: GO 31248
31172: LD_INT 303
31174: DOUBLE
31175: EQUAL
31176: IFTRUE 31180
31178: GO 31217
31180: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31181: LD_VAR 0 6
31185: PPUSH
31186: LD_VAR 0 7
31190: PPUSH
31191: LD_VAR 0 8
31195: PPUSH
31196: LD_VAR 0 9
31200: PPUSH
31201: LD_VAR 0 4
31205: PPUSH
31206: LD_VAR 0 5
31210: PPUSH
31211: CALL 31253 0 6
31215: GO 31248
31217: LD_INT 304
31219: DOUBLE
31220: EQUAL
31221: IFTRUE 31225
31223: GO 31247
31225: POP
// hHackTeleport ( unit , x , y ) ; end ;
31226: LD_VAR 0 2
31230: PPUSH
31231: LD_VAR 0 4
31235: PPUSH
31236: LD_VAR 0 5
31240: PPUSH
31241: CALL 33012 0 3
31245: GO 31248
31247: POP
// end ;
31248: LD_VAR 0 12
31252: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31253: LD_INT 0
31255: PPUSH
31256: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31257: LD_VAR 0 1
31261: PUSH
31262: LD_INT 1
31264: LESS
31265: PUSH
31266: LD_VAR 0 1
31270: PUSH
31271: LD_INT 3
31273: GREATER
31274: OR
31275: PUSH
31276: LD_VAR 0 5
31280: PPUSH
31281: LD_VAR 0 6
31285: PPUSH
31286: CALL_OW 428
31290: OR
31291: IFFALSE 31295
// exit ;
31293: GO 32015
// uc_side := your_side ;
31295: LD_ADDR_OWVAR 20
31299: PUSH
31300: LD_OWVAR 2
31304: ST_TO_ADDR
// uc_nation := nation ;
31305: LD_ADDR_OWVAR 21
31309: PUSH
31310: LD_VAR 0 1
31314: ST_TO_ADDR
// bc_level = 1 ;
31315: LD_ADDR_OWVAR 43
31319: PUSH
31320: LD_INT 1
31322: ST_TO_ADDR
// case btype of 1 :
31323: LD_VAR 0 2
31327: PUSH
31328: LD_INT 1
31330: DOUBLE
31331: EQUAL
31332: IFTRUE 31336
31334: GO 31347
31336: POP
// bc_type := b_depot ; 2 :
31337: LD_ADDR_OWVAR 42
31341: PUSH
31342: LD_INT 0
31344: ST_TO_ADDR
31345: GO 31959
31347: LD_INT 2
31349: DOUBLE
31350: EQUAL
31351: IFTRUE 31355
31353: GO 31366
31355: POP
// bc_type := b_warehouse ; 3 :
31356: LD_ADDR_OWVAR 42
31360: PUSH
31361: LD_INT 1
31363: ST_TO_ADDR
31364: GO 31959
31366: LD_INT 3
31368: DOUBLE
31369: EQUAL
31370: IFTRUE 31374
31372: GO 31385
31374: POP
// bc_type := b_lab ; 4 .. 9 :
31375: LD_ADDR_OWVAR 42
31379: PUSH
31380: LD_INT 6
31382: ST_TO_ADDR
31383: GO 31959
31385: LD_INT 4
31387: DOUBLE
31388: GREATEREQUAL
31389: IFFALSE 31397
31391: LD_INT 9
31393: DOUBLE
31394: LESSEQUAL
31395: IFTRUE 31399
31397: GO 31451
31399: POP
// begin bc_type := b_lab_half ;
31400: LD_ADDR_OWVAR 42
31404: PUSH
31405: LD_INT 7
31407: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31408: LD_ADDR_OWVAR 44
31412: PUSH
31413: LD_INT 10
31415: PUSH
31416: LD_INT 11
31418: PUSH
31419: LD_INT 12
31421: PUSH
31422: LD_INT 15
31424: PUSH
31425: LD_INT 14
31427: PUSH
31428: LD_INT 13
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: PUSH
31439: LD_VAR 0 2
31443: PUSH
31444: LD_INT 3
31446: MINUS
31447: ARRAY
31448: ST_TO_ADDR
// end ; 10 .. 13 :
31449: GO 31959
31451: LD_INT 10
31453: DOUBLE
31454: GREATEREQUAL
31455: IFFALSE 31463
31457: LD_INT 13
31459: DOUBLE
31460: LESSEQUAL
31461: IFTRUE 31465
31463: GO 31542
31465: POP
// begin bc_type := b_lab_full ;
31466: LD_ADDR_OWVAR 42
31470: PUSH
31471: LD_INT 8
31473: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31474: LD_ADDR_OWVAR 44
31478: PUSH
31479: LD_INT 10
31481: PUSH
31482: LD_INT 12
31484: PUSH
31485: LD_INT 14
31487: PUSH
31488: LD_INT 13
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: PUSH
31497: LD_VAR 0 2
31501: PUSH
31502: LD_INT 9
31504: MINUS
31505: ARRAY
31506: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31507: LD_ADDR_OWVAR 45
31511: PUSH
31512: LD_INT 11
31514: PUSH
31515: LD_INT 15
31517: PUSH
31518: LD_INT 12
31520: PUSH
31521: LD_INT 15
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: PUSH
31530: LD_VAR 0 2
31534: PUSH
31535: LD_INT 9
31537: MINUS
31538: ARRAY
31539: ST_TO_ADDR
// end ; 14 :
31540: GO 31959
31542: LD_INT 14
31544: DOUBLE
31545: EQUAL
31546: IFTRUE 31550
31548: GO 31561
31550: POP
// bc_type := b_workshop ; 15 :
31551: LD_ADDR_OWVAR 42
31555: PUSH
31556: LD_INT 2
31558: ST_TO_ADDR
31559: GO 31959
31561: LD_INT 15
31563: DOUBLE
31564: EQUAL
31565: IFTRUE 31569
31567: GO 31580
31569: POP
// bc_type := b_factory ; 16 :
31570: LD_ADDR_OWVAR 42
31574: PUSH
31575: LD_INT 3
31577: ST_TO_ADDR
31578: GO 31959
31580: LD_INT 16
31582: DOUBLE
31583: EQUAL
31584: IFTRUE 31588
31586: GO 31599
31588: POP
// bc_type := b_ext_gun ; 17 :
31589: LD_ADDR_OWVAR 42
31593: PUSH
31594: LD_INT 17
31596: ST_TO_ADDR
31597: GO 31959
31599: LD_INT 17
31601: DOUBLE
31602: EQUAL
31603: IFTRUE 31607
31605: GO 31635
31607: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31608: LD_ADDR_OWVAR 42
31612: PUSH
31613: LD_INT 19
31615: PUSH
31616: LD_INT 23
31618: PUSH
31619: LD_INT 19
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: LIST
31626: PUSH
31627: LD_VAR 0 1
31631: ARRAY
31632: ST_TO_ADDR
31633: GO 31959
31635: LD_INT 18
31637: DOUBLE
31638: EQUAL
31639: IFTRUE 31643
31641: GO 31654
31643: POP
// bc_type := b_ext_radar ; 19 :
31644: LD_ADDR_OWVAR 42
31648: PUSH
31649: LD_INT 20
31651: ST_TO_ADDR
31652: GO 31959
31654: LD_INT 19
31656: DOUBLE
31657: EQUAL
31658: IFTRUE 31662
31660: GO 31673
31662: POP
// bc_type := b_ext_radio ; 20 :
31663: LD_ADDR_OWVAR 42
31667: PUSH
31668: LD_INT 22
31670: ST_TO_ADDR
31671: GO 31959
31673: LD_INT 20
31675: DOUBLE
31676: EQUAL
31677: IFTRUE 31681
31679: GO 31692
31681: POP
// bc_type := b_ext_siberium ; 21 :
31682: LD_ADDR_OWVAR 42
31686: PUSH
31687: LD_INT 21
31689: ST_TO_ADDR
31690: GO 31959
31692: LD_INT 21
31694: DOUBLE
31695: EQUAL
31696: IFTRUE 31700
31698: GO 31711
31700: POP
// bc_type := b_ext_computer ; 22 :
31701: LD_ADDR_OWVAR 42
31705: PUSH
31706: LD_INT 24
31708: ST_TO_ADDR
31709: GO 31959
31711: LD_INT 22
31713: DOUBLE
31714: EQUAL
31715: IFTRUE 31719
31717: GO 31730
31719: POP
// bc_type := b_ext_track ; 23 :
31720: LD_ADDR_OWVAR 42
31724: PUSH
31725: LD_INT 16
31727: ST_TO_ADDR
31728: GO 31959
31730: LD_INT 23
31732: DOUBLE
31733: EQUAL
31734: IFTRUE 31738
31736: GO 31749
31738: POP
// bc_type := b_ext_laser ; 24 :
31739: LD_ADDR_OWVAR 42
31743: PUSH
31744: LD_INT 25
31746: ST_TO_ADDR
31747: GO 31959
31749: LD_INT 24
31751: DOUBLE
31752: EQUAL
31753: IFTRUE 31757
31755: GO 31768
31757: POP
// bc_type := b_control_tower ; 25 :
31758: LD_ADDR_OWVAR 42
31762: PUSH
31763: LD_INT 36
31765: ST_TO_ADDR
31766: GO 31959
31768: LD_INT 25
31770: DOUBLE
31771: EQUAL
31772: IFTRUE 31776
31774: GO 31787
31776: POP
// bc_type := b_breastwork ; 26 :
31777: LD_ADDR_OWVAR 42
31781: PUSH
31782: LD_INT 31
31784: ST_TO_ADDR
31785: GO 31959
31787: LD_INT 26
31789: DOUBLE
31790: EQUAL
31791: IFTRUE 31795
31793: GO 31806
31795: POP
// bc_type := b_bunker ; 27 :
31796: LD_ADDR_OWVAR 42
31800: PUSH
31801: LD_INT 32
31803: ST_TO_ADDR
31804: GO 31959
31806: LD_INT 27
31808: DOUBLE
31809: EQUAL
31810: IFTRUE 31814
31812: GO 31825
31814: POP
// bc_type := b_turret ; 28 :
31815: LD_ADDR_OWVAR 42
31819: PUSH
31820: LD_INT 33
31822: ST_TO_ADDR
31823: GO 31959
31825: LD_INT 28
31827: DOUBLE
31828: EQUAL
31829: IFTRUE 31833
31831: GO 31844
31833: POP
// bc_type := b_armoury ; 29 :
31834: LD_ADDR_OWVAR 42
31838: PUSH
31839: LD_INT 4
31841: ST_TO_ADDR
31842: GO 31959
31844: LD_INT 29
31846: DOUBLE
31847: EQUAL
31848: IFTRUE 31852
31850: GO 31863
31852: POP
// bc_type := b_barracks ; 30 :
31853: LD_ADDR_OWVAR 42
31857: PUSH
31858: LD_INT 5
31860: ST_TO_ADDR
31861: GO 31959
31863: LD_INT 30
31865: DOUBLE
31866: EQUAL
31867: IFTRUE 31871
31869: GO 31882
31871: POP
// bc_type := b_solar_power ; 31 :
31872: LD_ADDR_OWVAR 42
31876: PUSH
31877: LD_INT 27
31879: ST_TO_ADDR
31880: GO 31959
31882: LD_INT 31
31884: DOUBLE
31885: EQUAL
31886: IFTRUE 31890
31888: GO 31901
31890: POP
// bc_type := b_oil_power ; 32 :
31891: LD_ADDR_OWVAR 42
31895: PUSH
31896: LD_INT 26
31898: ST_TO_ADDR
31899: GO 31959
31901: LD_INT 32
31903: DOUBLE
31904: EQUAL
31905: IFTRUE 31909
31907: GO 31920
31909: POP
// bc_type := b_siberite_power ; 33 :
31910: LD_ADDR_OWVAR 42
31914: PUSH
31915: LD_INT 28
31917: ST_TO_ADDR
31918: GO 31959
31920: LD_INT 33
31922: DOUBLE
31923: EQUAL
31924: IFTRUE 31928
31926: GO 31939
31928: POP
// bc_type := b_oil_mine ; 34 :
31929: LD_ADDR_OWVAR 42
31933: PUSH
31934: LD_INT 29
31936: ST_TO_ADDR
31937: GO 31959
31939: LD_INT 34
31941: DOUBLE
31942: EQUAL
31943: IFTRUE 31947
31945: GO 31958
31947: POP
// bc_type := b_siberite_mine ; end ;
31948: LD_ADDR_OWVAR 42
31952: PUSH
31953: LD_INT 30
31955: ST_TO_ADDR
31956: GO 31959
31958: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31959: LD_ADDR_VAR 0 8
31963: PUSH
31964: LD_VAR 0 5
31968: PPUSH
31969: LD_VAR 0 6
31973: PPUSH
31974: LD_VAR 0 3
31978: PPUSH
31979: CALL_OW 47
31983: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31984: LD_OWVAR 42
31988: PUSH
31989: LD_INT 32
31991: PUSH
31992: LD_INT 33
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: IN
31999: IFFALSE 32015
// PlaceWeaponTurret ( b , weapon ) ;
32001: LD_VAR 0 8
32005: PPUSH
32006: LD_VAR 0 4
32010: PPUSH
32011: CALL_OW 431
// end ;
32015: LD_VAR 0 7
32019: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32020: LD_INT 0
32022: PPUSH
32023: PPUSH
32024: PPUSH
32025: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32026: LD_ADDR_VAR 0 4
32030: PUSH
32031: LD_INT 22
32033: PUSH
32034: LD_OWVAR 2
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 2
32045: PUSH
32046: LD_INT 30
32048: PUSH
32049: LD_INT 0
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 30
32058: PUSH
32059: LD_INT 1
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: LIST
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PPUSH
32075: CALL_OW 69
32079: ST_TO_ADDR
// if not tmp then
32080: LD_VAR 0 4
32084: NOT
32085: IFFALSE 32089
// exit ;
32087: GO 32148
// for i in tmp do
32089: LD_ADDR_VAR 0 2
32093: PUSH
32094: LD_VAR 0 4
32098: PUSH
32099: FOR_IN
32100: IFFALSE 32146
// for j = 1 to 3 do
32102: LD_ADDR_VAR 0 3
32106: PUSH
32107: DOUBLE
32108: LD_INT 1
32110: DEC
32111: ST_TO_ADDR
32112: LD_INT 3
32114: PUSH
32115: FOR_TO
32116: IFFALSE 32142
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32118: LD_VAR 0 2
32122: PPUSH
32123: CALL_OW 274
32127: PPUSH
32128: LD_VAR 0 3
32132: PPUSH
32133: LD_INT 99999
32135: PPUSH
32136: CALL_OW 277
32140: GO 32115
32142: POP
32143: POP
32144: GO 32099
32146: POP
32147: POP
// end ;
32148: LD_VAR 0 1
32152: RET
// export function hHackSetLevel10 ; var i , j ; begin
32153: LD_INT 0
32155: PPUSH
32156: PPUSH
32157: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32158: LD_ADDR_VAR 0 2
32162: PUSH
32163: LD_INT 21
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PPUSH
32173: CALL_OW 69
32177: PUSH
32178: FOR_IN
32179: IFFALSE 32231
// if IsSelected ( i ) then
32181: LD_VAR 0 2
32185: PPUSH
32186: CALL_OW 306
32190: IFFALSE 32229
// begin for j := 1 to 4 do
32192: LD_ADDR_VAR 0 3
32196: PUSH
32197: DOUBLE
32198: LD_INT 1
32200: DEC
32201: ST_TO_ADDR
32202: LD_INT 4
32204: PUSH
32205: FOR_TO
32206: IFFALSE 32227
// SetSkill ( i , j , 10 ) ;
32208: LD_VAR 0 2
32212: PPUSH
32213: LD_VAR 0 3
32217: PPUSH
32218: LD_INT 10
32220: PPUSH
32221: CALL_OW 237
32225: GO 32205
32227: POP
32228: POP
// end ;
32229: GO 32178
32231: POP
32232: POP
// end ;
32233: LD_VAR 0 1
32237: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32238: LD_INT 0
32240: PPUSH
32241: PPUSH
32242: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32243: LD_ADDR_VAR 0 2
32247: PUSH
32248: LD_INT 22
32250: PUSH
32251: LD_OWVAR 2
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 21
32262: PUSH
32263: LD_INT 1
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PPUSH
32274: CALL_OW 69
32278: PUSH
32279: FOR_IN
32280: IFFALSE 32321
// begin for j := 1 to 4 do
32282: LD_ADDR_VAR 0 3
32286: PUSH
32287: DOUBLE
32288: LD_INT 1
32290: DEC
32291: ST_TO_ADDR
32292: LD_INT 4
32294: PUSH
32295: FOR_TO
32296: IFFALSE 32317
// SetSkill ( i , j , 10 ) ;
32298: LD_VAR 0 2
32302: PPUSH
32303: LD_VAR 0 3
32307: PPUSH
32308: LD_INT 10
32310: PPUSH
32311: CALL_OW 237
32315: GO 32295
32317: POP
32318: POP
// end ;
32319: GO 32279
32321: POP
32322: POP
// end ;
32323: LD_VAR 0 1
32327: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32328: LD_INT 0
32330: PPUSH
// uc_side := your_side ;
32331: LD_ADDR_OWVAR 20
32335: PUSH
32336: LD_OWVAR 2
32340: ST_TO_ADDR
// uc_nation := nation ;
32341: LD_ADDR_OWVAR 21
32345: PUSH
32346: LD_VAR 0 1
32350: ST_TO_ADDR
// InitHc ;
32351: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32355: LD_INT 0
32357: PPUSH
32358: LD_VAR 0 2
32362: PPUSH
32363: LD_VAR 0 3
32367: PPUSH
32368: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32372: LD_VAR 0 4
32376: PPUSH
32377: LD_VAR 0 5
32381: PPUSH
32382: CALL_OW 428
32386: PUSH
32387: LD_INT 0
32389: EQUAL
32390: IFFALSE 32414
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32392: CALL_OW 44
32396: PPUSH
32397: LD_VAR 0 4
32401: PPUSH
32402: LD_VAR 0 5
32406: PPUSH
32407: LD_INT 1
32409: PPUSH
32410: CALL_OW 48
// end ;
32414: LD_VAR 0 6
32418: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32419: LD_INT 0
32421: PPUSH
32422: PPUSH
// uc_side := your_side ;
32423: LD_ADDR_OWVAR 20
32427: PUSH
32428: LD_OWVAR 2
32432: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32433: LD_VAR 0 1
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: LD_INT 3
32446: PUSH
32447: LD_INT 4
32449: PUSH
32450: LD_INT 5
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: IN
32460: IFFALSE 32472
// uc_nation := nation_american else
32462: LD_ADDR_OWVAR 21
32466: PUSH
32467: LD_INT 1
32469: ST_TO_ADDR
32470: GO 32515
// if chassis in [ 11 , 12 , 13 , 14 ] then
32472: LD_VAR 0 1
32476: PUSH
32477: LD_INT 11
32479: PUSH
32480: LD_INT 12
32482: PUSH
32483: LD_INT 13
32485: PUSH
32486: LD_INT 14
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: IN
32495: IFFALSE 32507
// uc_nation := nation_arabian else
32497: LD_ADDR_OWVAR 21
32501: PUSH
32502: LD_INT 2
32504: ST_TO_ADDR
32505: GO 32515
// uc_nation := nation_russian ;
32507: LD_ADDR_OWVAR 21
32511: PUSH
32512: LD_INT 3
32514: ST_TO_ADDR
// vc_chassis := chassis ;
32515: LD_ADDR_OWVAR 37
32519: PUSH
32520: LD_VAR 0 1
32524: ST_TO_ADDR
// vc_engine := engine ;
32525: LD_ADDR_OWVAR 39
32529: PUSH
32530: LD_VAR 0 2
32534: ST_TO_ADDR
// vc_control := control ;
32535: LD_ADDR_OWVAR 38
32539: PUSH
32540: LD_VAR 0 3
32544: ST_TO_ADDR
// vc_weapon := weapon ;
32545: LD_ADDR_OWVAR 40
32549: PUSH
32550: LD_VAR 0 4
32554: ST_TO_ADDR
// un := CreateVehicle ;
32555: LD_ADDR_VAR 0 8
32559: PUSH
32560: CALL_OW 45
32564: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32565: LD_VAR 0 8
32569: PPUSH
32570: LD_INT 0
32572: PPUSH
32573: LD_INT 5
32575: PPUSH
32576: CALL_OW 12
32580: PPUSH
32581: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32585: LD_VAR 0 8
32589: PPUSH
32590: LD_VAR 0 5
32594: PPUSH
32595: LD_VAR 0 6
32599: PPUSH
32600: LD_INT 1
32602: PPUSH
32603: CALL_OW 48
// end ;
32607: LD_VAR 0 7
32611: RET
// export hInvincible ; every 1 do
32612: GO 32614
32614: DISABLE
// hInvincible := [ ] ;
32615: LD_ADDR_EXP 123
32619: PUSH
32620: EMPTY
32621: ST_TO_ADDR
32622: END
// every 10 do var i ;
32623: GO 32625
32625: DISABLE
32626: LD_INT 0
32628: PPUSH
// begin enable ;
32629: ENABLE
// if not hInvincible then
32630: LD_EXP 123
32634: NOT
32635: IFFALSE 32639
// exit ;
32637: GO 32683
// for i in hInvincible do
32639: LD_ADDR_VAR 0 1
32643: PUSH
32644: LD_EXP 123
32648: PUSH
32649: FOR_IN
32650: IFFALSE 32681
// if GetLives ( i ) < 1000 then
32652: LD_VAR 0 1
32656: PPUSH
32657: CALL_OW 256
32661: PUSH
32662: LD_INT 1000
32664: LESS
32665: IFFALSE 32679
// SetLives ( i , 1000 ) ;
32667: LD_VAR 0 1
32671: PPUSH
32672: LD_INT 1000
32674: PPUSH
32675: CALL_OW 234
32679: GO 32649
32681: POP
32682: POP
// end ;
32683: PPOPN 1
32685: END
// export function hHackInvincible ; var i ; begin
32686: LD_INT 0
32688: PPUSH
32689: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32690: LD_ADDR_VAR 0 2
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: LD_INT 21
32700: PUSH
32701: LD_INT 1
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 21
32710: PUSH
32711: LD_INT 2
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: LIST
32722: PPUSH
32723: CALL_OW 69
32727: PUSH
32728: FOR_IN
32729: IFFALSE 32790
// if IsSelected ( i ) then
32731: LD_VAR 0 2
32735: PPUSH
32736: CALL_OW 306
32740: IFFALSE 32788
// begin if i in hInvincible then
32742: LD_VAR 0 2
32746: PUSH
32747: LD_EXP 123
32751: IN
32752: IFFALSE 32772
// hInvincible := hInvincible diff i else
32754: LD_ADDR_EXP 123
32758: PUSH
32759: LD_EXP 123
32763: PUSH
32764: LD_VAR 0 2
32768: DIFF
32769: ST_TO_ADDR
32770: GO 32788
// hInvincible := hInvincible union i ;
32772: LD_ADDR_EXP 123
32776: PUSH
32777: LD_EXP 123
32781: PUSH
32782: LD_VAR 0 2
32786: UNION
32787: ST_TO_ADDR
// end ;
32788: GO 32728
32790: POP
32791: POP
// end ;
32792: LD_VAR 0 1
32796: RET
// export function hHackInvisible ; var i , j ; begin
32797: LD_INT 0
32799: PPUSH
32800: PPUSH
32801: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32802: LD_ADDR_VAR 0 2
32806: PUSH
32807: LD_INT 21
32809: PUSH
32810: LD_INT 1
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PPUSH
32817: CALL_OW 69
32821: PUSH
32822: FOR_IN
32823: IFFALSE 32847
// if IsSelected ( i ) then
32825: LD_VAR 0 2
32829: PPUSH
32830: CALL_OW 306
32834: IFFALSE 32845
// ComForceInvisible ( i ) ;
32836: LD_VAR 0 2
32840: PPUSH
32841: CALL_OW 496
32845: GO 32822
32847: POP
32848: POP
// end ;
32849: LD_VAR 0 1
32853: RET
// export function hHackChangeYourSide ; begin
32854: LD_INT 0
32856: PPUSH
// if your_side = 8 then
32857: LD_OWVAR 2
32861: PUSH
32862: LD_INT 8
32864: EQUAL
32865: IFFALSE 32877
// your_side := 0 else
32867: LD_ADDR_OWVAR 2
32871: PUSH
32872: LD_INT 0
32874: ST_TO_ADDR
32875: GO 32891
// your_side := your_side + 1 ;
32877: LD_ADDR_OWVAR 2
32881: PUSH
32882: LD_OWVAR 2
32886: PUSH
32887: LD_INT 1
32889: PLUS
32890: ST_TO_ADDR
// end ;
32891: LD_VAR 0 1
32895: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32896: LD_INT 0
32898: PPUSH
32899: PPUSH
32900: PPUSH
// for i in all_units do
32901: LD_ADDR_VAR 0 2
32905: PUSH
32906: LD_OWVAR 3
32910: PUSH
32911: FOR_IN
32912: IFFALSE 32990
// if IsSelected ( i ) then
32914: LD_VAR 0 2
32918: PPUSH
32919: CALL_OW 306
32923: IFFALSE 32988
// begin j := GetSide ( i ) ;
32925: LD_ADDR_VAR 0 3
32929: PUSH
32930: LD_VAR 0 2
32934: PPUSH
32935: CALL_OW 255
32939: ST_TO_ADDR
// if j = 8 then
32940: LD_VAR 0 3
32944: PUSH
32945: LD_INT 8
32947: EQUAL
32948: IFFALSE 32960
// j := 0 else
32950: LD_ADDR_VAR 0 3
32954: PUSH
32955: LD_INT 0
32957: ST_TO_ADDR
32958: GO 32974
// j := j + 1 ;
32960: LD_ADDR_VAR 0 3
32964: PUSH
32965: LD_VAR 0 3
32969: PUSH
32970: LD_INT 1
32972: PLUS
32973: ST_TO_ADDR
// SetSide ( i , j ) ;
32974: LD_VAR 0 2
32978: PPUSH
32979: LD_VAR 0 3
32983: PPUSH
32984: CALL_OW 235
// end ;
32988: GO 32911
32990: POP
32991: POP
// end ;
32992: LD_VAR 0 1
32996: RET
// export function hHackFog ; begin
32997: LD_INT 0
32999: PPUSH
// FogOff ( true ) ;
33000: LD_INT 1
33002: PPUSH
33003: CALL_OW 344
// end ;
33007: LD_VAR 0 1
33011: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33012: LD_INT 0
33014: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33015: LD_VAR 0 1
33019: PPUSH
33020: LD_VAR 0 2
33024: PPUSH
33025: LD_VAR 0 3
33029: PPUSH
33030: LD_INT 1
33032: PPUSH
33033: LD_INT 1
33035: PPUSH
33036: CALL_OW 483
// CenterOnXY ( x , y ) ;
33040: LD_VAR 0 2
33044: PPUSH
33045: LD_VAR 0 3
33049: PPUSH
33050: CALL_OW 84
// end ; end_of_file
33054: LD_VAR 0 4
33058: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33059: LD_INT 0
33061: PPUSH
33062: PPUSH
33063: PPUSH
33064: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33065: LD_VAR 0 1
33069: PPUSH
33070: CALL_OW 264
33074: PUSH
33075: LD_EXP 54
33079: EQUAL
33080: IFFALSE 33152
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33082: LD_INT 68
33084: PPUSH
33085: LD_VAR 0 1
33089: PPUSH
33090: CALL_OW 255
33094: PPUSH
33095: CALL_OW 321
33099: PUSH
33100: LD_INT 2
33102: EQUAL
33103: IFFALSE 33115
// eff := 70 else
33105: LD_ADDR_VAR 0 4
33109: PUSH
33110: LD_INT 70
33112: ST_TO_ADDR
33113: GO 33123
// eff := 30 ;
33115: LD_ADDR_VAR 0 4
33119: PUSH
33120: LD_INT 30
33122: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33123: LD_VAR 0 1
33127: PPUSH
33128: CALL_OW 250
33132: PPUSH
33133: LD_VAR 0 1
33137: PPUSH
33138: CALL_OW 251
33142: PPUSH
33143: LD_VAR 0 4
33147: PPUSH
33148: CALL_OW 495
// end ; end ;
33152: LD_VAR 0 2
33156: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33157: LD_INT 0
33159: PPUSH
// end ;
33160: LD_VAR 0 4
33164: RET
// export function SOS_Command ( cmd ) ; begin
33165: LD_INT 0
33167: PPUSH
// end ;
33168: LD_VAR 0 2
33172: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33173: LD_INT 0
33175: PPUSH
// if cmd = 121 then
33176: LD_VAR 0 1
33180: PUSH
33181: LD_INT 121
33183: EQUAL
33184: IFFALSE 33186
// end ;
33186: LD_VAR 0 6
33190: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
33191: LD_INT 0
33193: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
33194: LD_VAR 0 1
33198: PUSH
33199: LD_INT 250
33201: EQUAL
33202: PUSH
33203: LD_VAR 0 2
33207: PPUSH
33208: CALL_OW 264
33212: PUSH
33213: LD_EXP 57
33217: EQUAL
33218: AND
33219: IFFALSE 33240
// MinerPlaceMine ( unit , x , y ) ;
33221: LD_VAR 0 2
33225: PPUSH
33226: LD_VAR 0 4
33230: PPUSH
33231: LD_VAR 0 5
33235: PPUSH
33236: CALL 35589 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
33240: LD_VAR 0 1
33244: PUSH
33245: LD_INT 251
33247: EQUAL
33248: PUSH
33249: LD_VAR 0 2
33253: PPUSH
33254: CALL_OW 264
33258: PUSH
33259: LD_EXP 57
33263: EQUAL
33264: AND
33265: IFFALSE 33286
// MinerDetonateMine ( unit , x , y ) ;
33267: LD_VAR 0 2
33271: PPUSH
33272: LD_VAR 0 4
33276: PPUSH
33277: LD_VAR 0 5
33281: PPUSH
33282: CALL 35866 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33286: LD_VAR 0 1
33290: PUSH
33291: LD_INT 252
33293: EQUAL
33294: PUSH
33295: LD_VAR 0 2
33299: PPUSH
33300: CALL_OW 264
33304: PUSH
33305: LD_EXP 57
33309: EQUAL
33310: AND
33311: IFFALSE 33332
// MinerCreateMinefield ( unit , x , y ) ;
33313: LD_VAR 0 2
33317: PPUSH
33318: LD_VAR 0 4
33322: PPUSH
33323: LD_VAR 0 5
33327: PPUSH
33328: CALL 36283 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33332: LD_VAR 0 1
33336: PUSH
33337: LD_INT 253
33339: EQUAL
33340: PUSH
33341: LD_VAR 0 2
33345: PPUSH
33346: CALL_OW 257
33350: PUSH
33351: LD_INT 5
33353: EQUAL
33354: AND
33355: IFFALSE 33376
// ComBinocular ( unit , x , y ) ;
33357: LD_VAR 0 2
33361: PPUSH
33362: LD_VAR 0 4
33366: PPUSH
33367: LD_VAR 0 5
33371: PPUSH
33372: CALL 36654 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33376: LD_VAR 0 1
33380: PUSH
33381: LD_INT 254
33383: EQUAL
33384: PUSH
33385: LD_VAR 0 2
33389: PPUSH
33390: CALL_OW 264
33394: PUSH
33395: LD_EXP 52
33399: EQUAL
33400: AND
33401: PUSH
33402: LD_VAR 0 3
33406: PPUSH
33407: CALL_OW 263
33411: PUSH
33412: LD_INT 3
33414: EQUAL
33415: AND
33416: IFFALSE 33432
// HackDestroyVehicle ( unit , selectedUnit ) ;
33418: LD_VAR 0 2
33422: PPUSH
33423: LD_VAR 0 3
33427: PPUSH
33428: CALL 34949 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33432: LD_VAR 0 1
33436: PUSH
33437: LD_INT 255
33439: EQUAL
33440: PUSH
33441: LD_VAR 0 2
33445: PPUSH
33446: CALL_OW 264
33450: PUSH
33451: LD_INT 14
33453: PUSH
33454: LD_INT 53
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: IN
33461: AND
33462: PUSH
33463: LD_VAR 0 4
33467: PPUSH
33468: LD_VAR 0 5
33472: PPUSH
33473: CALL_OW 488
33477: AND
33478: IFFALSE 33502
// CutTreeXYR ( unit , x , y , 12 ) ;
33480: LD_VAR 0 2
33484: PPUSH
33485: LD_VAR 0 4
33489: PPUSH
33490: LD_VAR 0 5
33494: PPUSH
33495: LD_INT 12
33497: PPUSH
33498: CALL 33515 0 4
// end ;
33502: LD_VAR 0 6
33506: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
33507: LD_INT 0
33509: PPUSH
// end ;
33510: LD_VAR 0 4
33514: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33515: LD_INT 0
33517: PPUSH
33518: PPUSH
33519: PPUSH
33520: PPUSH
33521: PPUSH
33522: PPUSH
33523: PPUSH
33524: PPUSH
33525: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33526: LD_VAR 0 1
33530: NOT
33531: PUSH
33532: LD_VAR 0 2
33536: PPUSH
33537: LD_VAR 0 3
33541: PPUSH
33542: CALL_OW 488
33546: NOT
33547: OR
33548: PUSH
33549: LD_VAR 0 4
33553: NOT
33554: OR
33555: IFFALSE 33559
// exit ;
33557: GO 33899
// list := [ ] ;
33559: LD_ADDR_VAR 0 13
33563: PUSH
33564: EMPTY
33565: ST_TO_ADDR
// if x - r < 0 then
33566: LD_VAR 0 2
33570: PUSH
33571: LD_VAR 0 4
33575: MINUS
33576: PUSH
33577: LD_INT 0
33579: LESS
33580: IFFALSE 33592
// min_x := 0 else
33582: LD_ADDR_VAR 0 7
33586: PUSH
33587: LD_INT 0
33589: ST_TO_ADDR
33590: GO 33608
// min_x := x - r ;
33592: LD_ADDR_VAR 0 7
33596: PUSH
33597: LD_VAR 0 2
33601: PUSH
33602: LD_VAR 0 4
33606: MINUS
33607: ST_TO_ADDR
// if y - r < 0 then
33608: LD_VAR 0 3
33612: PUSH
33613: LD_VAR 0 4
33617: MINUS
33618: PUSH
33619: LD_INT 0
33621: LESS
33622: IFFALSE 33634
// min_y := 0 else
33624: LD_ADDR_VAR 0 8
33628: PUSH
33629: LD_INT 0
33631: ST_TO_ADDR
33632: GO 33650
// min_y := y - r ;
33634: LD_ADDR_VAR 0 8
33638: PUSH
33639: LD_VAR 0 3
33643: PUSH
33644: LD_VAR 0 4
33648: MINUS
33649: ST_TO_ADDR
// max_x := x + r ;
33650: LD_ADDR_VAR 0 9
33654: PUSH
33655: LD_VAR 0 2
33659: PUSH
33660: LD_VAR 0 4
33664: PLUS
33665: ST_TO_ADDR
// max_y := y + r ;
33666: LD_ADDR_VAR 0 10
33670: PUSH
33671: LD_VAR 0 3
33675: PUSH
33676: LD_VAR 0 4
33680: PLUS
33681: ST_TO_ADDR
// for _x = min_x to max_x do
33682: LD_ADDR_VAR 0 11
33686: PUSH
33687: DOUBLE
33688: LD_VAR 0 7
33692: DEC
33693: ST_TO_ADDR
33694: LD_VAR 0 9
33698: PUSH
33699: FOR_TO
33700: IFFALSE 33817
// for _y = min_y to max_y do
33702: LD_ADDR_VAR 0 12
33706: PUSH
33707: DOUBLE
33708: LD_VAR 0 8
33712: DEC
33713: ST_TO_ADDR
33714: LD_VAR 0 10
33718: PUSH
33719: FOR_TO
33720: IFFALSE 33813
// begin if not ValidHex ( _x , _y ) then
33722: LD_VAR 0 11
33726: PPUSH
33727: LD_VAR 0 12
33731: PPUSH
33732: CALL_OW 488
33736: NOT
33737: IFFALSE 33741
// continue ;
33739: GO 33719
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33741: LD_VAR 0 11
33745: PPUSH
33746: LD_VAR 0 12
33750: PPUSH
33751: CALL_OW 351
33755: PUSH
33756: LD_VAR 0 11
33760: PPUSH
33761: LD_VAR 0 12
33765: PPUSH
33766: CALL_OW 554
33770: AND
33771: IFFALSE 33811
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33773: LD_ADDR_VAR 0 13
33777: PUSH
33778: LD_VAR 0 13
33782: PPUSH
33783: LD_VAR 0 13
33787: PUSH
33788: LD_INT 1
33790: PLUS
33791: PPUSH
33792: LD_VAR 0 11
33796: PUSH
33797: LD_VAR 0 12
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PPUSH
33806: CALL_OW 2
33810: ST_TO_ADDR
// end ;
33811: GO 33719
33813: POP
33814: POP
33815: GO 33699
33817: POP
33818: POP
// if not list then
33819: LD_VAR 0 13
33823: NOT
33824: IFFALSE 33828
// exit ;
33826: GO 33899
// for i in list do
33828: LD_ADDR_VAR 0 6
33832: PUSH
33833: LD_VAR 0 13
33837: PUSH
33838: FOR_IN
33839: IFFALSE 33897
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33841: LD_VAR 0 1
33845: PPUSH
33846: LD_STRING M
33848: PUSH
33849: LD_VAR 0 6
33853: PUSH
33854: LD_INT 1
33856: ARRAY
33857: PUSH
33858: LD_VAR 0 6
33862: PUSH
33863: LD_INT 2
33865: ARRAY
33866: PUSH
33867: LD_INT 0
33869: PUSH
33870: LD_INT 0
33872: PUSH
33873: LD_INT 0
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: PUSH
33888: EMPTY
33889: LIST
33890: PPUSH
33891: CALL_OW 447
33895: GO 33838
33897: POP
33898: POP
// end ;
33899: LD_VAR 0 5
33903: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33904: LD_EXP 126
33908: NOT
33909: IFFALSE 33959
33911: GO 33913
33913: DISABLE
// begin initHack := true ;
33914: LD_ADDR_EXP 126
33918: PUSH
33919: LD_INT 1
33921: ST_TO_ADDR
// hackTanks := [ ] ;
33922: LD_ADDR_EXP 127
33926: PUSH
33927: EMPTY
33928: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33929: LD_ADDR_EXP 128
33933: PUSH
33934: EMPTY
33935: ST_TO_ADDR
// hackLimit := 3 ;
33936: LD_ADDR_EXP 129
33940: PUSH
33941: LD_INT 3
33943: ST_TO_ADDR
// hackDist := 12 ;
33944: LD_ADDR_EXP 130
33948: PUSH
33949: LD_INT 12
33951: ST_TO_ADDR
// hackCounter := [ ] ;
33952: LD_ADDR_EXP 131
33956: PUSH
33957: EMPTY
33958: ST_TO_ADDR
// end ;
33959: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33960: LD_EXP 126
33964: PUSH
33965: LD_INT 34
33967: PUSH
33968: LD_EXP 52
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PPUSH
33977: CALL_OW 69
33981: AND
33982: IFFALSE 34237
33984: GO 33986
33986: DISABLE
33987: LD_INT 0
33989: PPUSH
33990: PPUSH
// begin enable ;
33991: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33992: LD_ADDR_VAR 0 1
33996: PUSH
33997: LD_INT 34
33999: PUSH
34000: LD_EXP 52
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PPUSH
34009: CALL_OW 69
34013: PUSH
34014: FOR_IN
34015: IFFALSE 34235
// begin if not i in hackTanks then
34017: LD_VAR 0 1
34021: PUSH
34022: LD_EXP 127
34026: IN
34027: NOT
34028: IFFALSE 34111
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34030: LD_ADDR_EXP 127
34034: PUSH
34035: LD_EXP 127
34039: PPUSH
34040: LD_EXP 127
34044: PUSH
34045: LD_INT 1
34047: PLUS
34048: PPUSH
34049: LD_VAR 0 1
34053: PPUSH
34054: CALL_OW 1
34058: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34059: LD_ADDR_EXP 128
34063: PUSH
34064: LD_EXP 128
34068: PPUSH
34069: LD_EXP 128
34073: PUSH
34074: LD_INT 1
34076: PLUS
34077: PPUSH
34078: EMPTY
34079: PPUSH
34080: CALL_OW 1
34084: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34085: LD_ADDR_EXP 131
34089: PUSH
34090: LD_EXP 131
34094: PPUSH
34095: LD_EXP 131
34099: PUSH
34100: LD_INT 1
34102: PLUS
34103: PPUSH
34104: EMPTY
34105: PPUSH
34106: CALL_OW 1
34110: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34111: LD_VAR 0 1
34115: PPUSH
34116: CALL_OW 302
34120: NOT
34121: IFFALSE 34134
// begin HackUnlinkAll ( i ) ;
34123: LD_VAR 0 1
34127: PPUSH
34128: CALL 34240 0 1
// continue ;
34132: GO 34014
// end ; HackCheckCapturedStatus ( i ) ;
34134: LD_VAR 0 1
34138: PPUSH
34139: CALL 34683 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34143: LD_ADDR_VAR 0 2
34147: PUSH
34148: LD_INT 81
34150: PUSH
34151: LD_VAR 0 1
34155: PPUSH
34156: CALL_OW 255
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 33
34167: PUSH
34168: LD_INT 3
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 91
34177: PUSH
34178: LD_VAR 0 1
34182: PUSH
34183: LD_EXP 130
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 50
34195: PUSH
34196: EMPTY
34197: LIST
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: PPUSH
34205: CALL_OW 69
34209: ST_TO_ADDR
// if not tmp then
34210: LD_VAR 0 2
34214: NOT
34215: IFFALSE 34219
// continue ;
34217: GO 34014
// HackLink ( i , tmp ) ;
34219: LD_VAR 0 1
34223: PPUSH
34224: LD_VAR 0 2
34228: PPUSH
34229: CALL 34376 0 2
// end ;
34233: GO 34014
34235: POP
34236: POP
// end ;
34237: PPOPN 2
34239: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34240: LD_INT 0
34242: PPUSH
34243: PPUSH
34244: PPUSH
// if not hack in hackTanks then
34245: LD_VAR 0 1
34249: PUSH
34250: LD_EXP 127
34254: IN
34255: NOT
34256: IFFALSE 34260
// exit ;
34258: GO 34371
// index := GetElementIndex ( hackTanks , hack ) ;
34260: LD_ADDR_VAR 0 4
34264: PUSH
34265: LD_EXP 127
34269: PPUSH
34270: LD_VAR 0 1
34274: PPUSH
34275: CALL 41845 0 2
34279: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34280: LD_EXP 128
34284: PUSH
34285: LD_VAR 0 4
34289: ARRAY
34290: IFFALSE 34371
// begin for i in hackTanksCaptured [ index ] do
34292: LD_ADDR_VAR 0 3
34296: PUSH
34297: LD_EXP 128
34301: PUSH
34302: LD_VAR 0 4
34306: ARRAY
34307: PUSH
34308: FOR_IN
34309: IFFALSE 34335
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34311: LD_VAR 0 3
34315: PUSH
34316: LD_INT 1
34318: ARRAY
34319: PPUSH
34320: LD_VAR 0 3
34324: PUSH
34325: LD_INT 2
34327: ARRAY
34328: PPUSH
34329: CALL_OW 235
34333: GO 34308
34335: POP
34336: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34337: LD_ADDR_EXP 128
34341: PUSH
34342: LD_EXP 128
34346: PPUSH
34347: LD_VAR 0 4
34351: PPUSH
34352: EMPTY
34353: PPUSH
34354: CALL_OW 1
34358: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34359: LD_VAR 0 1
34363: PPUSH
34364: LD_INT 0
34366: PPUSH
34367: CALL_OW 505
// end ; end ;
34371: LD_VAR 0 2
34375: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34376: LD_INT 0
34378: PPUSH
34379: PPUSH
34380: PPUSH
// if not hack in hackTanks or not vehicles then
34381: LD_VAR 0 1
34385: PUSH
34386: LD_EXP 127
34390: IN
34391: NOT
34392: PUSH
34393: LD_VAR 0 2
34397: NOT
34398: OR
34399: IFFALSE 34403
// exit ;
34401: GO 34678
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34403: LD_ADDR_VAR 0 2
34407: PUSH
34408: LD_VAR 0 1
34412: PPUSH
34413: LD_VAR 0 2
34417: PPUSH
34418: LD_INT 1
34420: PPUSH
34421: LD_INT 1
34423: PPUSH
34424: CALL 42495 0 4
34428: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34429: LD_ADDR_VAR 0 5
34433: PUSH
34434: LD_EXP 127
34438: PPUSH
34439: LD_VAR 0 1
34443: PPUSH
34444: CALL 41845 0 2
34448: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34449: LD_EXP 128
34453: PUSH
34454: LD_VAR 0 5
34458: ARRAY
34459: PUSH
34460: LD_EXP 129
34464: LESS
34465: IFFALSE 34654
// begin for i := 1 to vehicles do
34467: LD_ADDR_VAR 0 4
34471: PUSH
34472: DOUBLE
34473: LD_INT 1
34475: DEC
34476: ST_TO_ADDR
34477: LD_VAR 0 2
34481: PUSH
34482: FOR_TO
34483: IFFALSE 34652
// begin if hackTanksCaptured [ index ] = hackLimit then
34485: LD_EXP 128
34489: PUSH
34490: LD_VAR 0 5
34494: ARRAY
34495: PUSH
34496: LD_EXP 129
34500: EQUAL
34501: IFFALSE 34505
// break ;
34503: GO 34652
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34505: LD_ADDR_EXP 131
34509: PUSH
34510: LD_EXP 131
34514: PPUSH
34515: LD_VAR 0 5
34519: PPUSH
34520: LD_EXP 131
34524: PUSH
34525: LD_VAR 0 5
34529: ARRAY
34530: PUSH
34531: LD_INT 1
34533: PLUS
34534: PPUSH
34535: CALL_OW 1
34539: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34540: LD_ADDR_EXP 128
34544: PUSH
34545: LD_EXP 128
34549: PPUSH
34550: LD_VAR 0 5
34554: PUSH
34555: LD_EXP 128
34559: PUSH
34560: LD_VAR 0 5
34564: ARRAY
34565: PUSH
34566: LD_INT 1
34568: PLUS
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PPUSH
34574: LD_VAR 0 2
34578: PUSH
34579: LD_VAR 0 4
34583: ARRAY
34584: PUSH
34585: LD_VAR 0 2
34589: PUSH
34590: LD_VAR 0 4
34594: ARRAY
34595: PPUSH
34596: CALL_OW 255
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PPUSH
34605: CALL 42060 0 3
34609: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34610: LD_VAR 0 2
34614: PUSH
34615: LD_VAR 0 4
34619: ARRAY
34620: PPUSH
34621: LD_VAR 0 1
34625: PPUSH
34626: CALL_OW 255
34630: PPUSH
34631: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34635: LD_VAR 0 2
34639: PUSH
34640: LD_VAR 0 4
34644: ARRAY
34645: PPUSH
34646: CALL_OW 141
// end ;
34650: GO 34482
34652: POP
34653: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34654: LD_VAR 0 1
34658: PPUSH
34659: LD_EXP 128
34663: PUSH
34664: LD_VAR 0 5
34668: ARRAY
34669: PUSH
34670: LD_INT 0
34672: PLUS
34673: PPUSH
34674: CALL_OW 505
// end ;
34678: LD_VAR 0 3
34682: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34683: LD_INT 0
34685: PPUSH
34686: PPUSH
34687: PPUSH
34688: PPUSH
// if not hack in hackTanks then
34689: LD_VAR 0 1
34693: PUSH
34694: LD_EXP 127
34698: IN
34699: NOT
34700: IFFALSE 34704
// exit ;
34702: GO 34944
// index := GetElementIndex ( hackTanks , hack ) ;
34704: LD_ADDR_VAR 0 4
34708: PUSH
34709: LD_EXP 127
34713: PPUSH
34714: LD_VAR 0 1
34718: PPUSH
34719: CALL 41845 0 2
34723: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34724: LD_ADDR_VAR 0 3
34728: PUSH
34729: DOUBLE
34730: LD_EXP 128
34734: PUSH
34735: LD_VAR 0 4
34739: ARRAY
34740: INC
34741: ST_TO_ADDR
34742: LD_INT 1
34744: PUSH
34745: FOR_DOWNTO
34746: IFFALSE 34918
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34748: LD_ADDR_VAR 0 5
34752: PUSH
34753: LD_EXP 128
34757: PUSH
34758: LD_VAR 0 4
34762: ARRAY
34763: PUSH
34764: LD_VAR 0 3
34768: ARRAY
34769: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34770: LD_VAR 0 5
34774: PUSH
34775: LD_INT 1
34777: ARRAY
34778: PPUSH
34779: CALL_OW 302
34783: NOT
34784: PUSH
34785: LD_VAR 0 5
34789: PUSH
34790: LD_INT 1
34792: ARRAY
34793: PPUSH
34794: CALL_OW 255
34798: PUSH
34799: LD_VAR 0 1
34803: PPUSH
34804: CALL_OW 255
34808: NONEQUAL
34809: OR
34810: IFFALSE 34916
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34812: LD_VAR 0 5
34816: PUSH
34817: LD_INT 1
34819: ARRAY
34820: PPUSH
34821: CALL_OW 305
34825: PUSH
34826: LD_VAR 0 5
34830: PUSH
34831: LD_INT 1
34833: ARRAY
34834: PPUSH
34835: CALL_OW 255
34839: PUSH
34840: LD_VAR 0 1
34844: PPUSH
34845: CALL_OW 255
34849: EQUAL
34850: AND
34851: IFFALSE 34875
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34853: LD_VAR 0 5
34857: PUSH
34858: LD_INT 1
34860: ARRAY
34861: PPUSH
34862: LD_VAR 0 5
34866: PUSH
34867: LD_INT 2
34869: ARRAY
34870: PPUSH
34871: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34875: LD_ADDR_EXP 128
34879: PUSH
34880: LD_EXP 128
34884: PPUSH
34885: LD_VAR 0 4
34889: PPUSH
34890: LD_EXP 128
34894: PUSH
34895: LD_VAR 0 4
34899: ARRAY
34900: PPUSH
34901: LD_VAR 0 3
34905: PPUSH
34906: CALL_OW 3
34910: PPUSH
34911: CALL_OW 1
34915: ST_TO_ADDR
// end ; end ;
34916: GO 34745
34918: POP
34919: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34920: LD_VAR 0 1
34924: PPUSH
34925: LD_EXP 128
34929: PUSH
34930: LD_VAR 0 4
34934: ARRAY
34935: PUSH
34936: LD_INT 0
34938: PLUS
34939: PPUSH
34940: CALL_OW 505
// end ;
34944: LD_VAR 0 2
34948: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34949: LD_INT 0
34951: PPUSH
34952: PPUSH
34953: PPUSH
34954: PPUSH
// if not hack in hackTanks then
34955: LD_VAR 0 1
34959: PUSH
34960: LD_EXP 127
34964: IN
34965: NOT
34966: IFFALSE 34970
// exit ;
34968: GO 35055
// index := GetElementIndex ( hackTanks , hack ) ;
34970: LD_ADDR_VAR 0 5
34974: PUSH
34975: LD_EXP 127
34979: PPUSH
34980: LD_VAR 0 1
34984: PPUSH
34985: CALL 41845 0 2
34989: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34990: LD_ADDR_VAR 0 4
34994: PUSH
34995: DOUBLE
34996: LD_INT 1
34998: DEC
34999: ST_TO_ADDR
35000: LD_EXP 128
35004: PUSH
35005: LD_VAR 0 5
35009: ARRAY
35010: PUSH
35011: FOR_TO
35012: IFFALSE 35053
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35014: LD_EXP 128
35018: PUSH
35019: LD_VAR 0 5
35023: ARRAY
35024: PUSH
35025: LD_VAR 0 4
35029: ARRAY
35030: PUSH
35031: LD_INT 1
35033: ARRAY
35034: PUSH
35035: LD_VAR 0 2
35039: EQUAL
35040: IFFALSE 35051
// KillUnit ( vehicle ) ;
35042: LD_VAR 0 2
35046: PPUSH
35047: CALL_OW 66
35051: GO 35011
35053: POP
35054: POP
// end ;
35055: LD_VAR 0 3
35059: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
35060: LD_EXP 132
35064: NOT
35065: IFFALSE 35100
35067: GO 35069
35069: DISABLE
// begin initMiner := true ;
35070: LD_ADDR_EXP 132
35074: PUSH
35075: LD_INT 1
35077: ST_TO_ADDR
// minersList := [ ] ;
35078: LD_ADDR_EXP 133
35082: PUSH
35083: EMPTY
35084: ST_TO_ADDR
// minerMinesList := [ ] ;
35085: LD_ADDR_EXP 134
35089: PUSH
35090: EMPTY
35091: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
35092: LD_ADDR_EXP 135
35096: PUSH
35097: LD_INT 5
35099: ST_TO_ADDR
// end ;
35100: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
35101: LD_EXP 132
35105: PUSH
35106: LD_INT 34
35108: PUSH
35109: LD_EXP 57
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PPUSH
35118: CALL_OW 69
35122: AND
35123: IFFALSE 35586
35125: GO 35127
35127: DISABLE
35128: LD_INT 0
35130: PPUSH
35131: PPUSH
35132: PPUSH
35133: PPUSH
// begin enable ;
35134: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35135: LD_ADDR_VAR 0 1
35139: PUSH
35140: LD_INT 34
35142: PUSH
35143: LD_EXP 57
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PPUSH
35152: CALL_OW 69
35156: PUSH
35157: FOR_IN
35158: IFFALSE 35230
// begin if not i in minersList then
35160: LD_VAR 0 1
35164: PUSH
35165: LD_EXP 133
35169: IN
35170: NOT
35171: IFFALSE 35228
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35173: LD_ADDR_EXP 133
35177: PUSH
35178: LD_EXP 133
35182: PPUSH
35183: LD_EXP 133
35187: PUSH
35188: LD_INT 1
35190: PLUS
35191: PPUSH
35192: LD_VAR 0 1
35196: PPUSH
35197: CALL_OW 1
35201: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35202: LD_ADDR_EXP 134
35206: PUSH
35207: LD_EXP 134
35211: PPUSH
35212: LD_EXP 134
35216: PUSH
35217: LD_INT 1
35219: PLUS
35220: PPUSH
35221: EMPTY
35222: PPUSH
35223: CALL_OW 1
35227: ST_TO_ADDR
// end end ;
35228: GO 35157
35230: POP
35231: POP
// for i := minerMinesList downto 1 do
35232: LD_ADDR_VAR 0 1
35236: PUSH
35237: DOUBLE
35238: LD_EXP 134
35242: INC
35243: ST_TO_ADDR
35244: LD_INT 1
35246: PUSH
35247: FOR_DOWNTO
35248: IFFALSE 35584
// begin if IsLive ( minersList [ i ] ) then
35250: LD_EXP 133
35254: PUSH
35255: LD_VAR 0 1
35259: ARRAY
35260: PPUSH
35261: CALL_OW 300
35265: IFFALSE 35293
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35267: LD_EXP 133
35271: PUSH
35272: LD_VAR 0 1
35276: ARRAY
35277: PPUSH
35278: LD_EXP 134
35282: PUSH
35283: LD_VAR 0 1
35287: ARRAY
35288: PPUSH
35289: CALL_OW 505
// if not minerMinesList [ i ] then
35293: LD_EXP 134
35297: PUSH
35298: LD_VAR 0 1
35302: ARRAY
35303: NOT
35304: IFFALSE 35308
// continue ;
35306: GO 35247
// for j := minerMinesList [ i ] downto 1 do
35308: LD_ADDR_VAR 0 2
35312: PUSH
35313: DOUBLE
35314: LD_EXP 134
35318: PUSH
35319: LD_VAR 0 1
35323: ARRAY
35324: INC
35325: ST_TO_ADDR
35326: LD_INT 1
35328: PUSH
35329: FOR_DOWNTO
35330: IFFALSE 35580
// begin side := GetSide ( minersList [ i ] ) ;
35332: LD_ADDR_VAR 0 3
35336: PUSH
35337: LD_EXP 133
35341: PUSH
35342: LD_VAR 0 1
35346: ARRAY
35347: PPUSH
35348: CALL_OW 255
35352: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35353: LD_ADDR_VAR 0 4
35357: PUSH
35358: LD_EXP 134
35362: PUSH
35363: LD_VAR 0 1
35367: ARRAY
35368: PUSH
35369: LD_VAR 0 2
35373: ARRAY
35374: PUSH
35375: LD_INT 1
35377: ARRAY
35378: PPUSH
35379: LD_EXP 134
35383: PUSH
35384: LD_VAR 0 1
35388: ARRAY
35389: PUSH
35390: LD_VAR 0 2
35394: ARRAY
35395: PUSH
35396: LD_INT 2
35398: ARRAY
35399: PPUSH
35400: CALL_OW 428
35404: ST_TO_ADDR
// if not tmp then
35405: LD_VAR 0 4
35409: NOT
35410: IFFALSE 35414
// continue ;
35412: GO 35329
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35414: LD_VAR 0 4
35418: PUSH
35419: LD_INT 81
35421: PUSH
35422: LD_VAR 0 3
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PPUSH
35431: CALL_OW 69
35435: IN
35436: PUSH
35437: LD_EXP 134
35441: PUSH
35442: LD_VAR 0 1
35446: ARRAY
35447: PUSH
35448: LD_VAR 0 2
35452: ARRAY
35453: PUSH
35454: LD_INT 1
35456: ARRAY
35457: PPUSH
35458: LD_EXP 134
35462: PUSH
35463: LD_VAR 0 1
35467: ARRAY
35468: PUSH
35469: LD_VAR 0 2
35473: ARRAY
35474: PUSH
35475: LD_INT 2
35477: ARRAY
35478: PPUSH
35479: CALL_OW 458
35483: AND
35484: IFFALSE 35578
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35486: LD_EXP 134
35490: PUSH
35491: LD_VAR 0 1
35495: ARRAY
35496: PUSH
35497: LD_VAR 0 2
35501: ARRAY
35502: PUSH
35503: LD_INT 1
35505: ARRAY
35506: PPUSH
35507: LD_EXP 134
35511: PUSH
35512: LD_VAR 0 1
35516: ARRAY
35517: PUSH
35518: LD_VAR 0 2
35522: ARRAY
35523: PUSH
35524: LD_INT 2
35526: ARRAY
35527: PPUSH
35528: LD_VAR 0 3
35532: PPUSH
35533: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35537: LD_ADDR_EXP 134
35541: PUSH
35542: LD_EXP 134
35546: PPUSH
35547: LD_VAR 0 1
35551: PPUSH
35552: LD_EXP 134
35556: PUSH
35557: LD_VAR 0 1
35561: ARRAY
35562: PPUSH
35563: LD_VAR 0 2
35567: PPUSH
35568: CALL_OW 3
35572: PPUSH
35573: CALL_OW 1
35577: ST_TO_ADDR
// end ; end ;
35578: GO 35329
35580: POP
35581: POP
// end ;
35582: GO 35247
35584: POP
35585: POP
// end ;
35586: PPOPN 4
35588: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35589: LD_INT 0
35591: PPUSH
35592: PPUSH
// result := false ;
35593: LD_ADDR_VAR 0 4
35597: PUSH
35598: LD_INT 0
35600: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35601: LD_VAR 0 1
35605: PPUSH
35606: CALL_OW 264
35610: PUSH
35611: LD_EXP 57
35615: EQUAL
35616: NOT
35617: IFFALSE 35621
// exit ;
35619: GO 35861
// index := GetElementIndex ( minersList , unit ) ;
35621: LD_ADDR_VAR 0 5
35625: PUSH
35626: LD_EXP 133
35630: PPUSH
35631: LD_VAR 0 1
35635: PPUSH
35636: CALL 41845 0 2
35640: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35641: LD_EXP 134
35645: PUSH
35646: LD_VAR 0 5
35650: ARRAY
35651: PUSH
35652: LD_EXP 135
35656: GREATEREQUAL
35657: IFFALSE 35661
// exit ;
35659: GO 35861
// ComMoveXY ( unit , x , y ) ;
35661: LD_VAR 0 1
35665: PPUSH
35666: LD_VAR 0 2
35670: PPUSH
35671: LD_VAR 0 3
35675: PPUSH
35676: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35680: LD_INT 35
35682: PPUSH
35683: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35687: LD_VAR 0 1
35691: PPUSH
35692: LD_VAR 0 2
35696: PPUSH
35697: LD_VAR 0 3
35701: PPUSH
35702: CALL 72617 0 3
35706: NOT
35707: PUSH
35708: LD_VAR 0 1
35712: PPUSH
35713: CALL_OW 314
35717: AND
35718: IFFALSE 35722
// exit ;
35720: GO 35861
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35722: LD_VAR 0 2
35726: PPUSH
35727: LD_VAR 0 3
35731: PPUSH
35732: CALL_OW 428
35736: PUSH
35737: LD_VAR 0 1
35741: EQUAL
35742: PUSH
35743: LD_VAR 0 1
35747: PPUSH
35748: CALL_OW 314
35752: NOT
35753: AND
35754: IFFALSE 35680
// PlaySoundXY ( x , y , PlantMine ) ;
35756: LD_VAR 0 2
35760: PPUSH
35761: LD_VAR 0 3
35765: PPUSH
35766: LD_STRING PlantMine
35768: PPUSH
35769: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35773: LD_VAR 0 2
35777: PPUSH
35778: LD_VAR 0 3
35782: PPUSH
35783: LD_VAR 0 1
35787: PPUSH
35788: CALL_OW 255
35792: PPUSH
35793: LD_INT 0
35795: PPUSH
35796: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35800: LD_ADDR_EXP 134
35804: PUSH
35805: LD_EXP 134
35809: PPUSH
35810: LD_VAR 0 5
35814: PUSH
35815: LD_EXP 134
35819: PUSH
35820: LD_VAR 0 5
35824: ARRAY
35825: PUSH
35826: LD_INT 1
35828: PLUS
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PPUSH
35834: LD_VAR 0 2
35838: PUSH
35839: LD_VAR 0 3
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PPUSH
35848: CALL 42060 0 3
35852: ST_TO_ADDR
// result := true ;
35853: LD_ADDR_VAR 0 4
35857: PUSH
35858: LD_INT 1
35860: ST_TO_ADDR
// end ;
35861: LD_VAR 0 4
35865: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35866: LD_INT 0
35868: PPUSH
35869: PPUSH
35870: PPUSH
// if not unit in minersList then
35871: LD_VAR 0 1
35875: PUSH
35876: LD_EXP 133
35880: IN
35881: NOT
35882: IFFALSE 35886
// exit ;
35884: GO 36278
// index := GetElementIndex ( minersList , unit ) ;
35886: LD_ADDR_VAR 0 6
35890: PUSH
35891: LD_EXP 133
35895: PPUSH
35896: LD_VAR 0 1
35900: PPUSH
35901: CALL 41845 0 2
35905: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35906: LD_ADDR_VAR 0 5
35910: PUSH
35911: DOUBLE
35912: LD_EXP 134
35916: PUSH
35917: LD_VAR 0 6
35921: ARRAY
35922: INC
35923: ST_TO_ADDR
35924: LD_INT 1
35926: PUSH
35927: FOR_DOWNTO
35928: IFFALSE 36089
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35930: LD_EXP 134
35934: PUSH
35935: LD_VAR 0 6
35939: ARRAY
35940: PUSH
35941: LD_VAR 0 5
35945: ARRAY
35946: PUSH
35947: LD_INT 1
35949: ARRAY
35950: PUSH
35951: LD_VAR 0 2
35955: EQUAL
35956: PUSH
35957: LD_EXP 134
35961: PUSH
35962: LD_VAR 0 6
35966: ARRAY
35967: PUSH
35968: LD_VAR 0 5
35972: ARRAY
35973: PUSH
35974: LD_INT 2
35976: ARRAY
35977: PUSH
35978: LD_VAR 0 3
35982: EQUAL
35983: AND
35984: IFFALSE 36087
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35986: LD_EXP 134
35990: PUSH
35991: LD_VAR 0 6
35995: ARRAY
35996: PUSH
35997: LD_VAR 0 5
36001: ARRAY
36002: PUSH
36003: LD_INT 1
36005: ARRAY
36006: PPUSH
36007: LD_EXP 134
36011: PUSH
36012: LD_VAR 0 6
36016: ARRAY
36017: PUSH
36018: LD_VAR 0 5
36022: ARRAY
36023: PUSH
36024: LD_INT 2
36026: ARRAY
36027: PPUSH
36028: LD_VAR 0 1
36032: PPUSH
36033: CALL_OW 255
36037: PPUSH
36038: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36042: LD_ADDR_EXP 134
36046: PUSH
36047: LD_EXP 134
36051: PPUSH
36052: LD_VAR 0 6
36056: PPUSH
36057: LD_EXP 134
36061: PUSH
36062: LD_VAR 0 6
36066: ARRAY
36067: PPUSH
36068: LD_VAR 0 5
36072: PPUSH
36073: CALL_OW 3
36077: PPUSH
36078: CALL_OW 1
36082: ST_TO_ADDR
// exit ;
36083: POP
36084: POP
36085: GO 36278
// end ; end ;
36087: GO 35927
36089: POP
36090: POP
// for i := minerMinesList [ index ] downto 1 do
36091: LD_ADDR_VAR 0 5
36095: PUSH
36096: DOUBLE
36097: LD_EXP 134
36101: PUSH
36102: LD_VAR 0 6
36106: ARRAY
36107: INC
36108: ST_TO_ADDR
36109: LD_INT 1
36111: PUSH
36112: FOR_DOWNTO
36113: IFFALSE 36276
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36115: LD_EXP 134
36119: PUSH
36120: LD_VAR 0 6
36124: ARRAY
36125: PUSH
36126: LD_VAR 0 5
36130: ARRAY
36131: PUSH
36132: LD_INT 1
36134: ARRAY
36135: PPUSH
36136: LD_EXP 134
36140: PUSH
36141: LD_VAR 0 6
36145: ARRAY
36146: PUSH
36147: LD_VAR 0 5
36151: ARRAY
36152: PUSH
36153: LD_INT 2
36155: ARRAY
36156: PPUSH
36157: LD_VAR 0 2
36161: PPUSH
36162: LD_VAR 0 3
36166: PPUSH
36167: CALL_OW 298
36171: PUSH
36172: LD_INT 6
36174: LESS
36175: IFFALSE 36274
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36177: LD_EXP 134
36181: PUSH
36182: LD_VAR 0 6
36186: ARRAY
36187: PUSH
36188: LD_VAR 0 5
36192: ARRAY
36193: PUSH
36194: LD_INT 1
36196: ARRAY
36197: PPUSH
36198: LD_EXP 134
36202: PUSH
36203: LD_VAR 0 6
36207: ARRAY
36208: PUSH
36209: LD_VAR 0 5
36213: ARRAY
36214: PUSH
36215: LD_INT 2
36217: ARRAY
36218: PPUSH
36219: LD_VAR 0 1
36223: PPUSH
36224: CALL_OW 255
36228: PPUSH
36229: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36233: LD_ADDR_EXP 134
36237: PUSH
36238: LD_EXP 134
36242: PPUSH
36243: LD_VAR 0 6
36247: PPUSH
36248: LD_EXP 134
36252: PUSH
36253: LD_VAR 0 6
36257: ARRAY
36258: PPUSH
36259: LD_VAR 0 5
36263: PPUSH
36264: CALL_OW 3
36268: PPUSH
36269: CALL_OW 1
36273: ST_TO_ADDR
// end ; end ;
36274: GO 36112
36276: POP
36277: POP
// end ;
36278: LD_VAR 0 4
36282: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36283: LD_INT 0
36285: PPUSH
36286: PPUSH
36287: PPUSH
36288: PPUSH
36289: PPUSH
36290: PPUSH
36291: PPUSH
36292: PPUSH
36293: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36294: LD_VAR 0 1
36298: PPUSH
36299: CALL_OW 264
36303: PUSH
36304: LD_EXP 57
36308: EQUAL
36309: NOT
36310: PUSH
36311: LD_VAR 0 1
36315: PUSH
36316: LD_EXP 133
36320: IN
36321: NOT
36322: OR
36323: IFFALSE 36327
// exit ;
36325: GO 36649
// index := GetElementIndex ( minersList , unit ) ;
36327: LD_ADDR_VAR 0 6
36331: PUSH
36332: LD_EXP 133
36336: PPUSH
36337: LD_VAR 0 1
36341: PPUSH
36342: CALL 41845 0 2
36346: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36347: LD_ADDR_VAR 0 8
36351: PUSH
36352: LD_EXP 135
36356: PUSH
36357: LD_EXP 134
36361: PUSH
36362: LD_VAR 0 6
36366: ARRAY
36367: MINUS
36368: ST_TO_ADDR
// if not minesFreeAmount then
36369: LD_VAR 0 8
36373: NOT
36374: IFFALSE 36378
// exit ;
36376: GO 36649
// tmp := [ ] ;
36378: LD_ADDR_VAR 0 7
36382: PUSH
36383: EMPTY
36384: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36385: LD_ADDR_VAR 0 5
36389: PUSH
36390: DOUBLE
36391: LD_INT 1
36393: DEC
36394: ST_TO_ADDR
36395: LD_VAR 0 8
36399: PUSH
36400: FOR_TO
36401: IFFALSE 36596
// begin _d := rand ( 0 , 5 ) ;
36403: LD_ADDR_VAR 0 11
36407: PUSH
36408: LD_INT 0
36410: PPUSH
36411: LD_INT 5
36413: PPUSH
36414: CALL_OW 12
36418: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36419: LD_ADDR_VAR 0 12
36423: PUSH
36424: LD_INT 2
36426: PPUSH
36427: LD_INT 6
36429: PPUSH
36430: CALL_OW 12
36434: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36435: LD_ADDR_VAR 0 9
36439: PUSH
36440: LD_VAR 0 2
36444: PPUSH
36445: LD_VAR 0 11
36449: PPUSH
36450: LD_VAR 0 12
36454: PPUSH
36455: CALL_OW 272
36459: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36460: LD_ADDR_VAR 0 10
36464: PUSH
36465: LD_VAR 0 3
36469: PPUSH
36470: LD_VAR 0 11
36474: PPUSH
36475: LD_VAR 0 12
36479: PPUSH
36480: CALL_OW 273
36484: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36485: LD_VAR 0 9
36489: PPUSH
36490: LD_VAR 0 10
36494: PPUSH
36495: CALL_OW 488
36499: PUSH
36500: LD_VAR 0 9
36504: PUSH
36505: LD_VAR 0 10
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_VAR 0 7
36518: IN
36519: NOT
36520: AND
36521: PUSH
36522: LD_VAR 0 9
36526: PPUSH
36527: LD_VAR 0 10
36531: PPUSH
36532: CALL_OW 458
36536: NOT
36537: AND
36538: IFFALSE 36580
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36540: LD_ADDR_VAR 0 7
36544: PUSH
36545: LD_VAR 0 7
36549: PPUSH
36550: LD_VAR 0 7
36554: PUSH
36555: LD_INT 1
36557: PLUS
36558: PPUSH
36559: LD_VAR 0 9
36563: PUSH
36564: LD_VAR 0 10
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PPUSH
36573: CALL_OW 1
36577: ST_TO_ADDR
36578: GO 36594
// i := i - 1 ;
36580: LD_ADDR_VAR 0 5
36584: PUSH
36585: LD_VAR 0 5
36589: PUSH
36590: LD_INT 1
36592: MINUS
36593: ST_TO_ADDR
// end ;
36594: GO 36400
36596: POP
36597: POP
// for i in tmp do
36598: LD_ADDR_VAR 0 5
36602: PUSH
36603: LD_VAR 0 7
36607: PUSH
36608: FOR_IN
36609: IFFALSE 36647
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36611: LD_VAR 0 1
36615: PPUSH
36616: LD_VAR 0 5
36620: PUSH
36621: LD_INT 1
36623: ARRAY
36624: PPUSH
36625: LD_VAR 0 5
36629: PUSH
36630: LD_INT 2
36632: ARRAY
36633: PPUSH
36634: CALL 35589 0 3
36638: NOT
36639: IFFALSE 36645
// exit ;
36641: POP
36642: POP
36643: GO 36649
36645: GO 36608
36647: POP
36648: POP
// end ;
36649: LD_VAR 0 4
36653: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36654: LD_INT 0
36656: PPUSH
36657: PPUSH
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
36662: PPUSH
// if not GetClass ( unit ) = class_sniper then
36663: LD_VAR 0 1
36667: PPUSH
36668: CALL_OW 257
36672: PUSH
36673: LD_INT 5
36675: EQUAL
36676: NOT
36677: IFFALSE 36681
// exit ;
36679: GO 37069
// dist := 8 ;
36681: LD_ADDR_VAR 0 5
36685: PUSH
36686: LD_INT 8
36688: ST_TO_ADDR
// viewRange := 12 ;
36689: LD_ADDR_VAR 0 7
36693: PUSH
36694: LD_INT 12
36696: ST_TO_ADDR
// side := GetSide ( unit ) ;
36697: LD_ADDR_VAR 0 6
36701: PUSH
36702: LD_VAR 0 1
36706: PPUSH
36707: CALL_OW 255
36711: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36712: LD_INT 61
36714: PPUSH
36715: LD_VAR 0 6
36719: PPUSH
36720: CALL_OW 321
36724: PUSH
36725: LD_INT 2
36727: EQUAL
36728: IFFALSE 36738
// viewRange := 16 ;
36730: LD_ADDR_VAR 0 7
36734: PUSH
36735: LD_INT 16
36737: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36738: LD_VAR 0 1
36742: PPUSH
36743: LD_VAR 0 2
36747: PPUSH
36748: LD_VAR 0 3
36752: PPUSH
36753: CALL_OW 297
36757: PUSH
36758: LD_VAR 0 5
36762: GREATER
36763: IFFALSE 36842
// begin ComMoveXY ( unit , x , y ) ;
36765: LD_VAR 0 1
36769: PPUSH
36770: LD_VAR 0 2
36774: PPUSH
36775: LD_VAR 0 3
36779: PPUSH
36780: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36784: LD_INT 35
36786: PPUSH
36787: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36791: LD_VAR 0 1
36795: PPUSH
36796: LD_VAR 0 2
36800: PPUSH
36801: LD_VAR 0 3
36805: PPUSH
36806: CALL 72617 0 3
36810: NOT
36811: IFFALSE 36815
// exit ;
36813: GO 37069
// until GetDistUnitXY ( unit , x , y ) < dist ;
36815: LD_VAR 0 1
36819: PPUSH
36820: LD_VAR 0 2
36824: PPUSH
36825: LD_VAR 0 3
36829: PPUSH
36830: CALL_OW 297
36834: PUSH
36835: LD_VAR 0 5
36839: LESS
36840: IFFALSE 36784
// end ; ComTurnXY ( unit , x , y ) ;
36842: LD_VAR 0 1
36846: PPUSH
36847: LD_VAR 0 2
36851: PPUSH
36852: LD_VAR 0 3
36856: PPUSH
36857: CALL_OW 118
// wait ( 5 ) ;
36861: LD_INT 5
36863: PPUSH
36864: CALL_OW 67
// _d := GetDir ( unit ) ;
36868: LD_ADDR_VAR 0 10
36872: PUSH
36873: LD_VAR 0 1
36877: PPUSH
36878: CALL_OW 254
36882: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36883: LD_ADDR_VAR 0 8
36887: PUSH
36888: LD_VAR 0 1
36892: PPUSH
36893: CALL_OW 250
36897: PPUSH
36898: LD_VAR 0 10
36902: PPUSH
36903: LD_VAR 0 5
36907: PPUSH
36908: CALL_OW 272
36912: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36913: LD_ADDR_VAR 0 9
36917: PUSH
36918: LD_VAR 0 1
36922: PPUSH
36923: CALL_OW 251
36927: PPUSH
36928: LD_VAR 0 10
36932: PPUSH
36933: LD_VAR 0 5
36937: PPUSH
36938: CALL_OW 273
36942: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36943: LD_VAR 0 8
36947: PPUSH
36948: LD_VAR 0 9
36952: PPUSH
36953: CALL_OW 488
36957: NOT
36958: IFFALSE 36962
// exit ;
36960: GO 37069
// ComAnimCustom ( unit , 1 ) ;
36962: LD_VAR 0 1
36966: PPUSH
36967: LD_INT 1
36969: PPUSH
36970: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36974: LD_VAR 0 8
36978: PPUSH
36979: LD_VAR 0 9
36983: PPUSH
36984: LD_VAR 0 6
36988: PPUSH
36989: LD_VAR 0 7
36993: PPUSH
36994: CALL_OW 330
// repeat wait ( 1 ) ;
36998: LD_INT 1
37000: PPUSH
37001: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
37005: LD_VAR 0 1
37009: PPUSH
37010: CALL_OW 316
37014: PUSH
37015: LD_VAR 0 1
37019: PPUSH
37020: CALL_OW 314
37024: OR
37025: PUSH
37026: LD_VAR 0 1
37030: PPUSH
37031: CALL_OW 302
37035: NOT
37036: OR
37037: PUSH
37038: LD_VAR 0 1
37042: PPUSH
37043: CALL_OW 301
37047: OR
37048: IFFALSE 36998
// RemoveSeeing ( _x , _y , side ) ;
37050: LD_VAR 0 8
37054: PPUSH
37055: LD_VAR 0 9
37059: PPUSH
37060: LD_VAR 0 6
37064: PPUSH
37065: CALL_OW 331
// end ; end_of_file
37069: LD_VAR 0 4
37073: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37074: LD_INT 0
37076: PPUSH
37077: PPUSH
// if exist_mode then
37078: LD_VAR 0 2
37082: IFFALSE 37107
// unit := CreateCharacter ( prefix & ident ) else
37084: LD_ADDR_VAR 0 5
37088: PUSH
37089: LD_VAR 0 3
37093: PUSH
37094: LD_VAR 0 1
37098: STR
37099: PPUSH
37100: CALL_OW 34
37104: ST_TO_ADDR
37105: GO 37122
// unit := NewCharacter ( ident ) ;
37107: LD_ADDR_VAR 0 5
37111: PUSH
37112: LD_VAR 0 1
37116: PPUSH
37117: CALL_OW 25
37121: ST_TO_ADDR
// result := unit ;
37122: LD_ADDR_VAR 0 4
37126: PUSH
37127: LD_VAR 0 5
37131: ST_TO_ADDR
// end ;
37132: LD_VAR 0 4
37136: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37137: LD_INT 0
37139: PPUSH
37140: PPUSH
// if not side or not nation then
37141: LD_VAR 0 1
37145: NOT
37146: PUSH
37147: LD_VAR 0 2
37151: NOT
37152: OR
37153: IFFALSE 37157
// exit ;
37155: GO 37925
// case nation of nation_american :
37157: LD_VAR 0 2
37161: PUSH
37162: LD_INT 1
37164: DOUBLE
37165: EQUAL
37166: IFTRUE 37170
37168: GO 37384
37170: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
37171: LD_ADDR_VAR 0 4
37175: PUSH
37176: LD_INT 35
37178: PUSH
37179: LD_INT 45
37181: PUSH
37182: LD_INT 46
37184: PUSH
37185: LD_INT 47
37187: PUSH
37188: LD_INT 82
37190: PUSH
37191: LD_INT 83
37193: PUSH
37194: LD_INT 84
37196: PUSH
37197: LD_INT 85
37199: PUSH
37200: LD_INT 86
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: LD_INT 2
37208: PUSH
37209: LD_INT 6
37211: PUSH
37212: LD_INT 15
37214: PUSH
37215: LD_INT 16
37217: PUSH
37218: LD_INT 7
37220: PUSH
37221: LD_INT 12
37223: PUSH
37224: LD_INT 13
37226: PUSH
37227: LD_INT 10
37229: PUSH
37230: LD_INT 14
37232: PUSH
37233: LD_INT 20
37235: PUSH
37236: LD_INT 21
37238: PUSH
37239: LD_INT 22
37241: PUSH
37242: LD_INT 25
37244: PUSH
37245: LD_INT 32
37247: PUSH
37248: LD_INT 27
37250: PUSH
37251: LD_INT 36
37253: PUSH
37254: LD_INT 69
37256: PUSH
37257: LD_INT 39
37259: PUSH
37260: LD_INT 34
37262: PUSH
37263: LD_INT 40
37265: PUSH
37266: LD_INT 48
37268: PUSH
37269: LD_INT 49
37271: PUSH
37272: LD_INT 50
37274: PUSH
37275: LD_INT 51
37277: PUSH
37278: LD_INT 52
37280: PUSH
37281: LD_INT 53
37283: PUSH
37284: LD_INT 54
37286: PUSH
37287: LD_INT 55
37289: PUSH
37290: LD_INT 56
37292: PUSH
37293: LD_INT 57
37295: PUSH
37296: LD_INT 58
37298: PUSH
37299: LD_INT 59
37301: PUSH
37302: LD_INT 60
37304: PUSH
37305: LD_INT 61
37307: PUSH
37308: LD_INT 62
37310: PUSH
37311: LD_INT 80
37313: PUSH
37314: LD_INT 82
37316: PUSH
37317: LD_INT 83
37319: PUSH
37320: LD_INT 84
37322: PUSH
37323: LD_INT 85
37325: PUSH
37326: LD_INT 86
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: ST_TO_ADDR
37382: GO 37849
37384: LD_INT 2
37386: DOUBLE
37387: EQUAL
37388: IFTRUE 37392
37390: GO 37618
37392: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
37393: LD_ADDR_VAR 0 4
37397: PUSH
37398: LD_INT 35
37400: PUSH
37401: LD_INT 45
37403: PUSH
37404: LD_INT 46
37406: PUSH
37407: LD_INT 47
37409: PUSH
37410: LD_INT 82
37412: PUSH
37413: LD_INT 83
37415: PUSH
37416: LD_INT 84
37418: PUSH
37419: LD_INT 85
37421: PUSH
37422: LD_INT 87
37424: PUSH
37425: LD_INT 70
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: LD_INT 11
37433: PUSH
37434: LD_INT 3
37436: PUSH
37437: LD_INT 4
37439: PUSH
37440: LD_INT 5
37442: PUSH
37443: LD_INT 6
37445: PUSH
37446: LD_INT 15
37448: PUSH
37449: LD_INT 18
37451: PUSH
37452: LD_INT 7
37454: PUSH
37455: LD_INT 17
37457: PUSH
37458: LD_INT 8
37460: PUSH
37461: LD_INT 20
37463: PUSH
37464: LD_INT 21
37466: PUSH
37467: LD_INT 22
37469: PUSH
37470: LD_INT 72
37472: PUSH
37473: LD_INT 26
37475: PUSH
37476: LD_INT 69
37478: PUSH
37479: LD_INT 39
37481: PUSH
37482: LD_INT 40
37484: PUSH
37485: LD_INT 41
37487: PUSH
37488: LD_INT 42
37490: PUSH
37491: LD_INT 43
37493: PUSH
37494: LD_INT 48
37496: PUSH
37497: LD_INT 49
37499: PUSH
37500: LD_INT 50
37502: PUSH
37503: LD_INT 51
37505: PUSH
37506: LD_INT 52
37508: PUSH
37509: LD_INT 53
37511: PUSH
37512: LD_INT 54
37514: PUSH
37515: LD_INT 55
37517: PUSH
37518: LD_INT 56
37520: PUSH
37521: LD_INT 60
37523: PUSH
37524: LD_INT 61
37526: PUSH
37527: LD_INT 62
37529: PUSH
37530: LD_INT 66
37532: PUSH
37533: LD_INT 67
37535: PUSH
37536: LD_INT 68
37538: PUSH
37539: LD_INT 81
37541: PUSH
37542: LD_INT 82
37544: PUSH
37545: LD_INT 83
37547: PUSH
37548: LD_INT 84
37550: PUSH
37551: LD_INT 85
37553: PUSH
37554: LD_INT 87
37556: PUSH
37557: LD_INT 88
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: ST_TO_ADDR
37616: GO 37849
37618: LD_INT 3
37620: DOUBLE
37621: EQUAL
37622: IFTRUE 37626
37624: GO 37848
37626: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37627: LD_ADDR_VAR 0 4
37631: PUSH
37632: LD_INT 46
37634: PUSH
37635: LD_INT 47
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: LD_INT 2
37643: PUSH
37644: LD_INT 82
37646: PUSH
37647: LD_INT 83
37649: PUSH
37650: LD_INT 84
37652: PUSH
37653: LD_INT 85
37655: PUSH
37656: LD_INT 86
37658: PUSH
37659: LD_INT 11
37661: PUSH
37662: LD_INT 9
37664: PUSH
37665: LD_INT 20
37667: PUSH
37668: LD_INT 19
37670: PUSH
37671: LD_INT 21
37673: PUSH
37674: LD_INT 24
37676: PUSH
37677: LD_INT 22
37679: PUSH
37680: LD_INT 25
37682: PUSH
37683: LD_INT 28
37685: PUSH
37686: LD_INT 29
37688: PUSH
37689: LD_INT 30
37691: PUSH
37692: LD_INT 31
37694: PUSH
37695: LD_INT 37
37697: PUSH
37698: LD_INT 38
37700: PUSH
37701: LD_INT 32
37703: PUSH
37704: LD_INT 27
37706: PUSH
37707: LD_INT 33
37709: PUSH
37710: LD_INT 69
37712: PUSH
37713: LD_INT 39
37715: PUSH
37716: LD_INT 34
37718: PUSH
37719: LD_INT 40
37721: PUSH
37722: LD_INT 71
37724: PUSH
37725: LD_INT 23
37727: PUSH
37728: LD_INT 44
37730: PUSH
37731: LD_INT 48
37733: PUSH
37734: LD_INT 49
37736: PUSH
37737: LD_INT 50
37739: PUSH
37740: LD_INT 51
37742: PUSH
37743: LD_INT 52
37745: PUSH
37746: LD_INT 53
37748: PUSH
37749: LD_INT 54
37751: PUSH
37752: LD_INT 55
37754: PUSH
37755: LD_INT 56
37757: PUSH
37758: LD_INT 57
37760: PUSH
37761: LD_INT 58
37763: PUSH
37764: LD_INT 59
37766: PUSH
37767: LD_INT 63
37769: PUSH
37770: LD_INT 64
37772: PUSH
37773: LD_INT 65
37775: PUSH
37776: LD_INT 82
37778: PUSH
37779: LD_INT 83
37781: PUSH
37782: LD_INT 84
37784: PUSH
37785: LD_INT 85
37787: PUSH
37788: LD_INT 86
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: ST_TO_ADDR
37846: GO 37849
37848: POP
// if state > - 1 and state < 3 then
37849: LD_VAR 0 3
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: GREATER
37858: PUSH
37859: LD_VAR 0 3
37863: PUSH
37864: LD_INT 3
37866: LESS
37867: AND
37868: IFFALSE 37925
// for i in result do
37870: LD_ADDR_VAR 0 5
37874: PUSH
37875: LD_VAR 0 4
37879: PUSH
37880: FOR_IN
37881: IFFALSE 37923
// if GetTech ( i , side ) <> state then
37883: LD_VAR 0 5
37887: PPUSH
37888: LD_VAR 0 1
37892: PPUSH
37893: CALL_OW 321
37897: PUSH
37898: LD_VAR 0 3
37902: NONEQUAL
37903: IFFALSE 37921
// result := result diff i ;
37905: LD_ADDR_VAR 0 4
37909: PUSH
37910: LD_VAR 0 4
37914: PUSH
37915: LD_VAR 0 5
37919: DIFF
37920: ST_TO_ADDR
37921: GO 37880
37923: POP
37924: POP
// end ;
37925: LD_VAR 0 4
37929: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37930: LD_INT 0
37932: PPUSH
37933: PPUSH
37934: PPUSH
// result := true ;
37935: LD_ADDR_VAR 0 3
37939: PUSH
37940: LD_INT 1
37942: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37943: LD_ADDR_VAR 0 5
37947: PUSH
37948: LD_VAR 0 2
37952: PPUSH
37953: CALL_OW 480
37957: ST_TO_ADDR
// if not tmp then
37958: LD_VAR 0 5
37962: NOT
37963: IFFALSE 37967
// exit ;
37965: GO 38016
// for i in tmp do
37967: LD_ADDR_VAR 0 4
37971: PUSH
37972: LD_VAR 0 5
37976: PUSH
37977: FOR_IN
37978: IFFALSE 38014
// if GetTech ( i , side ) <> state_researched then
37980: LD_VAR 0 4
37984: PPUSH
37985: LD_VAR 0 1
37989: PPUSH
37990: CALL_OW 321
37994: PUSH
37995: LD_INT 2
37997: NONEQUAL
37998: IFFALSE 38012
// begin result := false ;
38000: LD_ADDR_VAR 0 3
38004: PUSH
38005: LD_INT 0
38007: ST_TO_ADDR
// exit ;
38008: POP
38009: POP
38010: GO 38016
// end ;
38012: GO 37977
38014: POP
38015: POP
// end ;
38016: LD_VAR 0 3
38020: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38021: LD_INT 0
38023: PPUSH
38024: PPUSH
38025: PPUSH
38026: PPUSH
38027: PPUSH
38028: PPUSH
38029: PPUSH
38030: PPUSH
38031: PPUSH
38032: PPUSH
38033: PPUSH
38034: PPUSH
38035: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38036: LD_VAR 0 1
38040: NOT
38041: PUSH
38042: LD_VAR 0 1
38046: PPUSH
38047: CALL_OW 257
38051: PUSH
38052: LD_INT 9
38054: NONEQUAL
38055: OR
38056: IFFALSE 38060
// exit ;
38058: GO 38633
// side := GetSide ( unit ) ;
38060: LD_ADDR_VAR 0 9
38064: PUSH
38065: LD_VAR 0 1
38069: PPUSH
38070: CALL_OW 255
38074: ST_TO_ADDR
// tech_space := tech_spacanom ;
38075: LD_ADDR_VAR 0 12
38079: PUSH
38080: LD_INT 29
38082: ST_TO_ADDR
// tech_time := tech_taurad ;
38083: LD_ADDR_VAR 0 13
38087: PUSH
38088: LD_INT 28
38090: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38091: LD_ADDR_VAR 0 11
38095: PUSH
38096: LD_VAR 0 1
38100: PPUSH
38101: CALL_OW 310
38105: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38106: LD_VAR 0 11
38110: PPUSH
38111: CALL_OW 247
38115: PUSH
38116: LD_INT 2
38118: EQUAL
38119: IFFALSE 38123
// exit ;
38121: GO 38633
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38123: LD_ADDR_VAR 0 8
38127: PUSH
38128: LD_INT 81
38130: PUSH
38131: LD_VAR 0 9
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 3
38142: PUSH
38143: LD_INT 21
38145: PUSH
38146: LD_INT 3
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PPUSH
38161: CALL_OW 69
38165: ST_TO_ADDR
// if not tmp then
38166: LD_VAR 0 8
38170: NOT
38171: IFFALSE 38175
// exit ;
38173: GO 38633
// if in_unit then
38175: LD_VAR 0 11
38179: IFFALSE 38203
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38181: LD_ADDR_VAR 0 10
38185: PUSH
38186: LD_VAR 0 8
38190: PPUSH
38191: LD_VAR 0 11
38195: PPUSH
38196: CALL_OW 74
38200: ST_TO_ADDR
38201: GO 38223
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38203: LD_ADDR_VAR 0 10
38207: PUSH
38208: LD_VAR 0 8
38212: PPUSH
38213: LD_VAR 0 1
38217: PPUSH
38218: CALL_OW 74
38222: ST_TO_ADDR
// if not enemy then
38223: LD_VAR 0 10
38227: NOT
38228: IFFALSE 38232
// exit ;
38230: GO 38633
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38232: LD_VAR 0 11
38236: PUSH
38237: LD_VAR 0 11
38241: PPUSH
38242: LD_VAR 0 10
38246: PPUSH
38247: CALL_OW 296
38251: PUSH
38252: LD_INT 13
38254: GREATER
38255: AND
38256: PUSH
38257: LD_VAR 0 1
38261: PPUSH
38262: LD_VAR 0 10
38266: PPUSH
38267: CALL_OW 296
38271: PUSH
38272: LD_INT 12
38274: GREATER
38275: OR
38276: IFFALSE 38280
// exit ;
38278: GO 38633
// missile := [ 1 ] ;
38280: LD_ADDR_VAR 0 14
38284: PUSH
38285: LD_INT 1
38287: PUSH
38288: EMPTY
38289: LIST
38290: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38291: LD_VAR 0 9
38295: PPUSH
38296: LD_VAR 0 12
38300: PPUSH
38301: CALL_OW 325
38305: IFFALSE 38334
// missile := Insert ( missile , missile + 1 , 2 ) ;
38307: LD_ADDR_VAR 0 14
38311: PUSH
38312: LD_VAR 0 14
38316: PPUSH
38317: LD_VAR 0 14
38321: PUSH
38322: LD_INT 1
38324: PLUS
38325: PPUSH
38326: LD_INT 2
38328: PPUSH
38329: CALL_OW 2
38333: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38334: LD_VAR 0 9
38338: PPUSH
38339: LD_VAR 0 13
38343: PPUSH
38344: CALL_OW 325
38348: PUSH
38349: LD_VAR 0 10
38353: PPUSH
38354: CALL_OW 255
38358: PPUSH
38359: LD_VAR 0 13
38363: PPUSH
38364: CALL_OW 325
38368: NOT
38369: AND
38370: IFFALSE 38399
// missile := Insert ( missile , missile + 1 , 3 ) ;
38372: LD_ADDR_VAR 0 14
38376: PUSH
38377: LD_VAR 0 14
38381: PPUSH
38382: LD_VAR 0 14
38386: PUSH
38387: LD_INT 1
38389: PLUS
38390: PPUSH
38391: LD_INT 3
38393: PPUSH
38394: CALL_OW 2
38398: ST_TO_ADDR
// if missile < 2 then
38399: LD_VAR 0 14
38403: PUSH
38404: LD_INT 2
38406: LESS
38407: IFFALSE 38411
// exit ;
38409: GO 38633
// x := GetX ( enemy ) ;
38411: LD_ADDR_VAR 0 4
38415: PUSH
38416: LD_VAR 0 10
38420: PPUSH
38421: CALL_OW 250
38425: ST_TO_ADDR
// y := GetY ( enemy ) ;
38426: LD_ADDR_VAR 0 5
38430: PUSH
38431: LD_VAR 0 10
38435: PPUSH
38436: CALL_OW 251
38440: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38441: LD_ADDR_VAR 0 6
38445: PUSH
38446: LD_VAR 0 4
38450: PUSH
38451: LD_INT 1
38453: NEG
38454: PPUSH
38455: LD_INT 1
38457: PPUSH
38458: CALL_OW 12
38462: PLUS
38463: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38464: LD_ADDR_VAR 0 7
38468: PUSH
38469: LD_VAR 0 5
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PPUSH
38478: LD_INT 1
38480: PPUSH
38481: CALL_OW 12
38485: PLUS
38486: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38487: LD_VAR 0 6
38491: PPUSH
38492: LD_VAR 0 7
38496: PPUSH
38497: CALL_OW 488
38501: NOT
38502: IFFALSE 38524
// begin _x := x ;
38504: LD_ADDR_VAR 0 6
38508: PUSH
38509: LD_VAR 0 4
38513: ST_TO_ADDR
// _y := y ;
38514: LD_ADDR_VAR 0 7
38518: PUSH
38519: LD_VAR 0 5
38523: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38524: LD_ADDR_VAR 0 3
38528: PUSH
38529: LD_INT 1
38531: PPUSH
38532: LD_VAR 0 14
38536: PPUSH
38537: CALL_OW 12
38541: ST_TO_ADDR
// case i of 1 :
38542: LD_VAR 0 3
38546: PUSH
38547: LD_INT 1
38549: DOUBLE
38550: EQUAL
38551: IFTRUE 38555
38553: GO 38572
38555: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38556: LD_VAR 0 1
38560: PPUSH
38561: LD_VAR 0 10
38565: PPUSH
38566: CALL_OW 115
38570: GO 38633
38572: LD_INT 2
38574: DOUBLE
38575: EQUAL
38576: IFTRUE 38580
38578: GO 38602
38580: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38581: LD_VAR 0 1
38585: PPUSH
38586: LD_VAR 0 6
38590: PPUSH
38591: LD_VAR 0 7
38595: PPUSH
38596: CALL_OW 153
38600: GO 38633
38602: LD_INT 3
38604: DOUBLE
38605: EQUAL
38606: IFTRUE 38610
38608: GO 38632
38610: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38611: LD_VAR 0 1
38615: PPUSH
38616: LD_VAR 0 6
38620: PPUSH
38621: LD_VAR 0 7
38625: PPUSH
38626: CALL_OW 154
38630: GO 38633
38632: POP
// end ;
38633: LD_VAR 0 2
38637: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38638: LD_INT 0
38640: PPUSH
38641: PPUSH
38642: PPUSH
38643: PPUSH
38644: PPUSH
38645: PPUSH
// if not unit or not building then
38646: LD_VAR 0 1
38650: NOT
38651: PUSH
38652: LD_VAR 0 2
38656: NOT
38657: OR
38658: IFFALSE 38662
// exit ;
38660: GO 38820
// x := GetX ( building ) ;
38662: LD_ADDR_VAR 0 5
38666: PUSH
38667: LD_VAR 0 2
38671: PPUSH
38672: CALL_OW 250
38676: ST_TO_ADDR
// y := GetY ( building ) ;
38677: LD_ADDR_VAR 0 6
38681: PUSH
38682: LD_VAR 0 2
38686: PPUSH
38687: CALL_OW 251
38691: ST_TO_ADDR
// for i = 0 to 5 do
38692: LD_ADDR_VAR 0 4
38696: PUSH
38697: DOUBLE
38698: LD_INT 0
38700: DEC
38701: ST_TO_ADDR
38702: LD_INT 5
38704: PUSH
38705: FOR_TO
38706: IFFALSE 38818
// begin _x := ShiftX ( x , i , 3 ) ;
38708: LD_ADDR_VAR 0 7
38712: PUSH
38713: LD_VAR 0 5
38717: PPUSH
38718: LD_VAR 0 4
38722: PPUSH
38723: LD_INT 3
38725: PPUSH
38726: CALL_OW 272
38730: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38731: LD_ADDR_VAR 0 8
38735: PUSH
38736: LD_VAR 0 6
38740: PPUSH
38741: LD_VAR 0 4
38745: PPUSH
38746: LD_INT 3
38748: PPUSH
38749: CALL_OW 273
38753: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38754: LD_VAR 0 7
38758: PPUSH
38759: LD_VAR 0 8
38763: PPUSH
38764: CALL_OW 488
38768: NOT
38769: IFFALSE 38773
// continue ;
38771: GO 38705
// if HexInfo ( _x , _y ) = 0 then
38773: LD_VAR 0 7
38777: PPUSH
38778: LD_VAR 0 8
38782: PPUSH
38783: CALL_OW 428
38787: PUSH
38788: LD_INT 0
38790: EQUAL
38791: IFFALSE 38816
// begin ComMoveXY ( unit , _x , _y ) ;
38793: LD_VAR 0 1
38797: PPUSH
38798: LD_VAR 0 7
38802: PPUSH
38803: LD_VAR 0 8
38807: PPUSH
38808: CALL_OW 111
// exit ;
38812: POP
38813: POP
38814: GO 38820
// end ; end ;
38816: GO 38705
38818: POP
38819: POP
// end ;
38820: LD_VAR 0 3
38824: RET
// export function ScanBase ( side , base_area ) ; begin
38825: LD_INT 0
38827: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38828: LD_ADDR_VAR 0 3
38832: PUSH
38833: LD_VAR 0 2
38837: PPUSH
38838: LD_INT 81
38840: PUSH
38841: LD_VAR 0 1
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PPUSH
38850: CALL_OW 70
38854: ST_TO_ADDR
// end ;
38855: LD_VAR 0 3
38859: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38860: LD_INT 0
38862: PPUSH
38863: PPUSH
38864: PPUSH
38865: PPUSH
// result := false ;
38866: LD_ADDR_VAR 0 2
38870: PUSH
38871: LD_INT 0
38873: ST_TO_ADDR
// side := GetSide ( unit ) ;
38874: LD_ADDR_VAR 0 3
38878: PUSH
38879: LD_VAR 0 1
38883: PPUSH
38884: CALL_OW 255
38888: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38889: LD_ADDR_VAR 0 4
38893: PUSH
38894: LD_VAR 0 1
38898: PPUSH
38899: CALL_OW 248
38903: ST_TO_ADDR
// case nat of 1 :
38904: LD_VAR 0 4
38908: PUSH
38909: LD_INT 1
38911: DOUBLE
38912: EQUAL
38913: IFTRUE 38917
38915: GO 38928
38917: POP
// tech := tech_lassight ; 2 :
38918: LD_ADDR_VAR 0 5
38922: PUSH
38923: LD_INT 12
38925: ST_TO_ADDR
38926: GO 38967
38928: LD_INT 2
38930: DOUBLE
38931: EQUAL
38932: IFTRUE 38936
38934: GO 38947
38936: POP
// tech := tech_mortar ; 3 :
38937: LD_ADDR_VAR 0 5
38941: PUSH
38942: LD_INT 41
38944: ST_TO_ADDR
38945: GO 38967
38947: LD_INT 3
38949: DOUBLE
38950: EQUAL
38951: IFTRUE 38955
38953: GO 38966
38955: POP
// tech := tech_bazooka ; end ;
38956: LD_ADDR_VAR 0 5
38960: PUSH
38961: LD_INT 44
38963: ST_TO_ADDR
38964: GO 38967
38966: POP
// if Researched ( side , tech ) then
38967: LD_VAR 0 3
38971: PPUSH
38972: LD_VAR 0 5
38976: PPUSH
38977: CALL_OW 325
38981: IFFALSE 39008
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38983: LD_ADDR_VAR 0 2
38987: PUSH
38988: LD_INT 5
38990: PUSH
38991: LD_INT 8
38993: PUSH
38994: LD_INT 9
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: PUSH
39002: LD_VAR 0 4
39006: ARRAY
39007: ST_TO_ADDR
// end ;
39008: LD_VAR 0 2
39012: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
39013: LD_INT 0
39015: PPUSH
39016: PPUSH
39017: PPUSH
// if not mines then
39018: LD_VAR 0 2
39022: NOT
39023: IFFALSE 39027
// exit ;
39025: GO 39171
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39027: LD_ADDR_VAR 0 5
39031: PUSH
39032: LD_INT 81
39034: PUSH
39035: LD_VAR 0 1
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 3
39046: PUSH
39047: LD_INT 21
39049: PUSH
39050: LD_INT 3
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PPUSH
39065: CALL_OW 69
39069: ST_TO_ADDR
// for i in mines do
39070: LD_ADDR_VAR 0 4
39074: PUSH
39075: LD_VAR 0 2
39079: PUSH
39080: FOR_IN
39081: IFFALSE 39169
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
39083: LD_VAR 0 4
39087: PUSH
39088: LD_INT 1
39090: ARRAY
39091: PPUSH
39092: LD_VAR 0 4
39096: PUSH
39097: LD_INT 2
39099: ARRAY
39100: PPUSH
39101: CALL_OW 458
39105: NOT
39106: IFFALSE 39110
// continue ;
39108: GO 39080
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
39110: LD_VAR 0 4
39114: PUSH
39115: LD_INT 1
39117: ARRAY
39118: PPUSH
39119: LD_VAR 0 4
39123: PUSH
39124: LD_INT 2
39126: ARRAY
39127: PPUSH
39128: CALL_OW 428
39132: PUSH
39133: LD_VAR 0 5
39137: IN
39138: IFFALSE 39167
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
39140: LD_VAR 0 4
39144: PUSH
39145: LD_INT 1
39147: ARRAY
39148: PPUSH
39149: LD_VAR 0 4
39153: PUSH
39154: LD_INT 2
39156: ARRAY
39157: PPUSH
39158: LD_VAR 0 1
39162: PPUSH
39163: CALL_OW 456
// end ;
39167: GO 39080
39169: POP
39170: POP
// end ;
39171: LD_VAR 0 3
39175: RET
// export function Count ( array ) ; var i ; begin
39176: LD_INT 0
39178: PPUSH
39179: PPUSH
// result := 0 ;
39180: LD_ADDR_VAR 0 2
39184: PUSH
39185: LD_INT 0
39187: ST_TO_ADDR
// for i in array do
39188: LD_ADDR_VAR 0 3
39192: PUSH
39193: LD_VAR 0 1
39197: PUSH
39198: FOR_IN
39199: IFFALSE 39223
// if i then
39201: LD_VAR 0 3
39205: IFFALSE 39221
// result := result + 1 ;
39207: LD_ADDR_VAR 0 2
39211: PUSH
39212: LD_VAR 0 2
39216: PUSH
39217: LD_INT 1
39219: PLUS
39220: ST_TO_ADDR
39221: GO 39198
39223: POP
39224: POP
// end ;
39225: LD_VAR 0 2
39229: RET
// export function IsEmpty ( building ) ; begin
39230: LD_INT 0
39232: PPUSH
// if not building then
39233: LD_VAR 0 1
39237: NOT
39238: IFFALSE 39242
// exit ;
39240: GO 39285
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
39242: LD_ADDR_VAR 0 2
39246: PUSH
39247: LD_VAR 0 1
39251: PUSH
39252: LD_INT 22
39254: PUSH
39255: LD_VAR 0 1
39259: PPUSH
39260: CALL_OW 255
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 58
39271: PUSH
39272: EMPTY
39273: LIST
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PPUSH
39279: CALL_OW 69
39283: IN
39284: ST_TO_ADDR
// end ;
39285: LD_VAR 0 2
39289: RET
// export function IsNotFull ( building ) ; begin
39290: LD_INT 0
39292: PPUSH
// if not building then
39293: LD_VAR 0 1
39297: NOT
39298: IFFALSE 39302
// exit ;
39300: GO 39321
// result := UnitsInside ( building ) < 6 ;
39302: LD_ADDR_VAR 0 2
39306: PUSH
39307: LD_VAR 0 1
39311: PPUSH
39312: CALL_OW 313
39316: PUSH
39317: LD_INT 6
39319: LESS
39320: ST_TO_ADDR
// end ;
39321: LD_VAR 0 2
39325: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39326: LD_INT 0
39328: PPUSH
39329: PPUSH
39330: PPUSH
39331: PPUSH
// tmp := [ ] ;
39332: LD_ADDR_VAR 0 3
39336: PUSH
39337: EMPTY
39338: ST_TO_ADDR
// list := [ ] ;
39339: LD_ADDR_VAR 0 5
39343: PUSH
39344: EMPTY
39345: ST_TO_ADDR
// for i = 16 to 25 do
39346: LD_ADDR_VAR 0 4
39350: PUSH
39351: DOUBLE
39352: LD_INT 16
39354: DEC
39355: ST_TO_ADDR
39356: LD_INT 25
39358: PUSH
39359: FOR_TO
39360: IFFALSE 39433
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39362: LD_ADDR_VAR 0 3
39366: PUSH
39367: LD_VAR 0 3
39371: PUSH
39372: LD_INT 22
39374: PUSH
39375: LD_VAR 0 1
39379: PPUSH
39380: CALL_OW 255
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 91
39391: PUSH
39392: LD_VAR 0 1
39396: PUSH
39397: LD_INT 6
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 30
39407: PUSH
39408: LD_VAR 0 4
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: LIST
39421: PUSH
39422: EMPTY
39423: LIST
39424: PPUSH
39425: CALL_OW 69
39429: ADD
39430: ST_TO_ADDR
39431: GO 39359
39433: POP
39434: POP
// for i = 1 to tmp do
39435: LD_ADDR_VAR 0 4
39439: PUSH
39440: DOUBLE
39441: LD_INT 1
39443: DEC
39444: ST_TO_ADDR
39445: LD_VAR 0 3
39449: PUSH
39450: FOR_TO
39451: IFFALSE 39539
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39453: LD_ADDR_VAR 0 5
39457: PUSH
39458: LD_VAR 0 5
39462: PUSH
39463: LD_VAR 0 3
39467: PUSH
39468: LD_VAR 0 4
39472: ARRAY
39473: PPUSH
39474: CALL_OW 266
39478: PUSH
39479: LD_VAR 0 3
39483: PUSH
39484: LD_VAR 0 4
39488: ARRAY
39489: PPUSH
39490: CALL_OW 250
39494: PUSH
39495: LD_VAR 0 3
39499: PUSH
39500: LD_VAR 0 4
39504: ARRAY
39505: PPUSH
39506: CALL_OW 251
39510: PUSH
39511: LD_VAR 0 3
39515: PUSH
39516: LD_VAR 0 4
39520: ARRAY
39521: PPUSH
39522: CALL_OW 254
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: PUSH
39533: EMPTY
39534: LIST
39535: ADD
39536: ST_TO_ADDR
39537: GO 39450
39539: POP
39540: POP
// result := list ;
39541: LD_ADDR_VAR 0 2
39545: PUSH
39546: LD_VAR 0 5
39550: ST_TO_ADDR
// end ;
39551: LD_VAR 0 2
39555: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39556: LD_INT 0
39558: PPUSH
39559: PPUSH
39560: PPUSH
39561: PPUSH
39562: PPUSH
39563: PPUSH
39564: PPUSH
// if not factory then
39565: LD_VAR 0 1
39569: NOT
39570: IFFALSE 39574
// exit ;
39572: GO 40167
// if control = control_apeman then
39574: LD_VAR 0 4
39578: PUSH
39579: LD_INT 5
39581: EQUAL
39582: IFFALSE 39691
// begin tmp := UnitsInside ( factory ) ;
39584: LD_ADDR_VAR 0 8
39588: PUSH
39589: LD_VAR 0 1
39593: PPUSH
39594: CALL_OW 313
39598: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39599: LD_VAR 0 8
39603: PPUSH
39604: LD_INT 25
39606: PUSH
39607: LD_INT 12
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PPUSH
39614: CALL_OW 72
39618: NOT
39619: IFFALSE 39629
// control := control_manual ;
39621: LD_ADDR_VAR 0 4
39625: PUSH
39626: LD_INT 1
39628: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39629: LD_ADDR_VAR 0 8
39633: PUSH
39634: LD_VAR 0 1
39638: PPUSH
39639: CALL 39326 0 1
39643: ST_TO_ADDR
// if tmp then
39644: LD_VAR 0 8
39648: IFFALSE 39691
// begin for i in tmp do
39650: LD_ADDR_VAR 0 7
39654: PUSH
39655: LD_VAR 0 8
39659: PUSH
39660: FOR_IN
39661: IFFALSE 39689
// if i [ 1 ] = b_ext_radio then
39663: LD_VAR 0 7
39667: PUSH
39668: LD_INT 1
39670: ARRAY
39671: PUSH
39672: LD_INT 22
39674: EQUAL
39675: IFFALSE 39687
// begin control := control_remote ;
39677: LD_ADDR_VAR 0 4
39681: PUSH
39682: LD_INT 2
39684: ST_TO_ADDR
// break ;
39685: GO 39689
// end ;
39687: GO 39660
39689: POP
39690: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39691: LD_VAR 0 1
39695: PPUSH
39696: LD_VAR 0 2
39700: PPUSH
39701: LD_VAR 0 3
39705: PPUSH
39706: LD_VAR 0 4
39710: PPUSH
39711: LD_VAR 0 5
39715: PPUSH
39716: CALL_OW 448
39720: IFFALSE 39755
// begin result := [ chassis , engine , control , weapon ] ;
39722: LD_ADDR_VAR 0 6
39726: PUSH
39727: LD_VAR 0 2
39731: PUSH
39732: LD_VAR 0 3
39736: PUSH
39737: LD_VAR 0 4
39741: PUSH
39742: LD_VAR 0 5
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: ST_TO_ADDR
// exit ;
39753: GO 40167
// end ; _chassis := AvailableChassisList ( factory ) ;
39755: LD_ADDR_VAR 0 9
39759: PUSH
39760: LD_VAR 0 1
39764: PPUSH
39765: CALL_OW 475
39769: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39770: LD_ADDR_VAR 0 11
39774: PUSH
39775: LD_VAR 0 1
39779: PPUSH
39780: CALL_OW 476
39784: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39785: LD_ADDR_VAR 0 12
39789: PUSH
39790: LD_VAR 0 1
39794: PPUSH
39795: CALL_OW 477
39799: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39800: LD_ADDR_VAR 0 10
39804: PUSH
39805: LD_VAR 0 1
39809: PPUSH
39810: CALL_OW 478
39814: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39815: LD_VAR 0 9
39819: NOT
39820: PUSH
39821: LD_VAR 0 11
39825: NOT
39826: OR
39827: PUSH
39828: LD_VAR 0 12
39832: NOT
39833: OR
39834: PUSH
39835: LD_VAR 0 10
39839: NOT
39840: OR
39841: IFFALSE 39876
// begin result := [ chassis , engine , control , weapon ] ;
39843: LD_ADDR_VAR 0 6
39847: PUSH
39848: LD_VAR 0 2
39852: PUSH
39853: LD_VAR 0 3
39857: PUSH
39858: LD_VAR 0 4
39862: PUSH
39863: LD_VAR 0 5
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: ST_TO_ADDR
// exit ;
39874: GO 40167
// end ; if not chassis in _chassis then
39876: LD_VAR 0 2
39880: PUSH
39881: LD_VAR 0 9
39885: IN
39886: NOT
39887: IFFALSE 39913
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39889: LD_ADDR_VAR 0 2
39893: PUSH
39894: LD_VAR 0 9
39898: PUSH
39899: LD_INT 1
39901: PPUSH
39902: LD_VAR 0 9
39906: PPUSH
39907: CALL_OW 12
39911: ARRAY
39912: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39913: LD_VAR 0 2
39917: PPUSH
39918: LD_VAR 0 3
39922: PPUSH
39923: CALL 40172 0 2
39927: NOT
39928: IFFALSE 39987
// repeat engine := _engine [ 1 ] ;
39930: LD_ADDR_VAR 0 3
39934: PUSH
39935: LD_VAR 0 11
39939: PUSH
39940: LD_INT 1
39942: ARRAY
39943: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39944: LD_ADDR_VAR 0 11
39948: PUSH
39949: LD_VAR 0 11
39953: PPUSH
39954: LD_INT 1
39956: PPUSH
39957: CALL_OW 3
39961: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39962: LD_VAR 0 2
39966: PPUSH
39967: LD_VAR 0 3
39971: PPUSH
39972: CALL 40172 0 2
39976: PUSH
39977: LD_VAR 0 11
39981: PUSH
39982: EMPTY
39983: EQUAL
39984: OR
39985: IFFALSE 39930
// if not control in _control then
39987: LD_VAR 0 4
39991: PUSH
39992: LD_VAR 0 12
39996: IN
39997: NOT
39998: IFFALSE 40024
// control := _control [ rand ( 1 , _control ) ] ;
40000: LD_ADDR_VAR 0 4
40004: PUSH
40005: LD_VAR 0 12
40009: PUSH
40010: LD_INT 1
40012: PPUSH
40013: LD_VAR 0 12
40017: PPUSH
40018: CALL_OW 12
40022: ARRAY
40023: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
40024: LD_VAR 0 2
40028: PPUSH
40029: LD_VAR 0 5
40033: PPUSH
40034: CALL 40392 0 2
40038: NOT
40039: IFFALSE 40098
// repeat weapon := _weapon [ 1 ] ;
40041: LD_ADDR_VAR 0 5
40045: PUSH
40046: LD_VAR 0 10
40050: PUSH
40051: LD_INT 1
40053: ARRAY
40054: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
40055: LD_ADDR_VAR 0 10
40059: PUSH
40060: LD_VAR 0 10
40064: PPUSH
40065: LD_INT 1
40067: PPUSH
40068: CALL_OW 3
40072: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
40073: LD_VAR 0 2
40077: PPUSH
40078: LD_VAR 0 5
40082: PPUSH
40083: CALL 40392 0 2
40087: PUSH
40088: LD_VAR 0 10
40092: PUSH
40093: EMPTY
40094: EQUAL
40095: OR
40096: IFFALSE 40041
// result := [ ] ;
40098: LD_ADDR_VAR 0 6
40102: PUSH
40103: EMPTY
40104: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40105: LD_VAR 0 1
40109: PPUSH
40110: LD_VAR 0 2
40114: PPUSH
40115: LD_VAR 0 3
40119: PPUSH
40120: LD_VAR 0 4
40124: PPUSH
40125: LD_VAR 0 5
40129: PPUSH
40130: CALL_OW 448
40134: IFFALSE 40167
// result := [ chassis , engine , control , weapon ] ;
40136: LD_ADDR_VAR 0 6
40140: PUSH
40141: LD_VAR 0 2
40145: PUSH
40146: LD_VAR 0 3
40150: PUSH
40151: LD_VAR 0 4
40155: PUSH
40156: LD_VAR 0 5
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: ST_TO_ADDR
// end ;
40167: LD_VAR 0 6
40171: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
40172: LD_INT 0
40174: PPUSH
// if not chassis or not engine then
40175: LD_VAR 0 1
40179: NOT
40180: PUSH
40181: LD_VAR 0 2
40185: NOT
40186: OR
40187: IFFALSE 40191
// exit ;
40189: GO 40387
// case engine of engine_solar :
40191: LD_VAR 0 2
40195: PUSH
40196: LD_INT 2
40198: DOUBLE
40199: EQUAL
40200: IFTRUE 40204
40202: GO 40242
40204: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
40205: LD_ADDR_VAR 0 3
40209: PUSH
40210: LD_INT 11
40212: PUSH
40213: LD_INT 12
40215: PUSH
40216: LD_INT 13
40218: PUSH
40219: LD_INT 14
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: LD_INT 3
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: ST_TO_ADDR
40240: GO 40371
40242: LD_INT 1
40244: DOUBLE
40245: EQUAL
40246: IFTRUE 40250
40248: GO 40312
40250: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
40251: LD_ADDR_VAR 0 3
40255: PUSH
40256: LD_INT 11
40258: PUSH
40259: LD_INT 12
40261: PUSH
40262: LD_INT 13
40264: PUSH
40265: LD_INT 14
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: LD_INT 3
40276: PUSH
40277: LD_INT 4
40279: PUSH
40280: LD_INT 5
40282: PUSH
40283: LD_INT 21
40285: PUSH
40286: LD_INT 23
40288: PUSH
40289: LD_INT 22
40291: PUSH
40292: LD_INT 24
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: ST_TO_ADDR
40310: GO 40371
40312: LD_INT 3
40314: DOUBLE
40315: EQUAL
40316: IFTRUE 40320
40318: GO 40370
40320: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40321: LD_ADDR_VAR 0 3
40325: PUSH
40326: LD_INT 13
40328: PUSH
40329: LD_INT 14
40331: PUSH
40332: LD_INT 2
40334: PUSH
40335: LD_INT 3
40337: PUSH
40338: LD_INT 4
40340: PUSH
40341: LD_INT 5
40343: PUSH
40344: LD_INT 21
40346: PUSH
40347: LD_INT 22
40349: PUSH
40350: LD_INT 23
40352: PUSH
40353: LD_INT 24
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: ST_TO_ADDR
40368: GO 40371
40370: POP
// result := ( chassis in result ) ;
40371: LD_ADDR_VAR 0 3
40375: PUSH
40376: LD_VAR 0 1
40380: PUSH
40381: LD_VAR 0 3
40385: IN
40386: ST_TO_ADDR
// end ;
40387: LD_VAR 0 3
40391: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40392: LD_INT 0
40394: PPUSH
// if not chassis or not weapon then
40395: LD_VAR 0 1
40399: NOT
40400: PUSH
40401: LD_VAR 0 2
40405: NOT
40406: OR
40407: IFFALSE 40411
// exit ;
40409: GO 41473
// case weapon of us_machine_gun :
40411: LD_VAR 0 2
40415: PUSH
40416: LD_INT 2
40418: DOUBLE
40419: EQUAL
40420: IFTRUE 40424
40422: GO 40454
40424: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40425: LD_ADDR_VAR 0 3
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: LD_INT 2
40435: PUSH
40436: LD_INT 3
40438: PUSH
40439: LD_INT 4
40441: PUSH
40442: LD_INT 5
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: ST_TO_ADDR
40452: GO 41457
40454: LD_INT 3
40456: DOUBLE
40457: EQUAL
40458: IFTRUE 40462
40460: GO 40492
40462: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40463: LD_ADDR_VAR 0 3
40467: PUSH
40468: LD_INT 1
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: LD_INT 3
40476: PUSH
40477: LD_INT 4
40479: PUSH
40480: LD_INT 5
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: ST_TO_ADDR
40490: GO 41457
40492: LD_INT 11
40494: DOUBLE
40495: EQUAL
40496: IFTRUE 40500
40498: GO 40530
40500: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40501: LD_ADDR_VAR 0 3
40505: PUSH
40506: LD_INT 1
40508: PUSH
40509: LD_INT 2
40511: PUSH
40512: LD_INT 3
40514: PUSH
40515: LD_INT 4
40517: PUSH
40518: LD_INT 5
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: ST_TO_ADDR
40528: GO 41457
40530: LD_INT 4
40532: DOUBLE
40533: EQUAL
40534: IFTRUE 40538
40536: GO 40564
40538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40539: LD_ADDR_VAR 0 3
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: LD_INT 3
40549: PUSH
40550: LD_INT 4
40552: PUSH
40553: LD_INT 5
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: ST_TO_ADDR
40562: GO 41457
40564: LD_INT 5
40566: DOUBLE
40567: EQUAL
40568: IFTRUE 40572
40570: GO 40598
40572: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40573: LD_ADDR_VAR 0 3
40577: PUSH
40578: LD_INT 2
40580: PUSH
40581: LD_INT 3
40583: PUSH
40584: LD_INT 4
40586: PUSH
40587: LD_INT 5
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: ST_TO_ADDR
40596: GO 41457
40598: LD_INT 9
40600: DOUBLE
40601: EQUAL
40602: IFTRUE 40606
40604: GO 40632
40606: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40607: LD_ADDR_VAR 0 3
40611: PUSH
40612: LD_INT 2
40614: PUSH
40615: LD_INT 3
40617: PUSH
40618: LD_INT 4
40620: PUSH
40621: LD_INT 5
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: ST_TO_ADDR
40630: GO 41457
40632: LD_INT 7
40634: DOUBLE
40635: EQUAL
40636: IFTRUE 40640
40638: GO 40666
40640: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40641: LD_ADDR_VAR 0 3
40645: PUSH
40646: LD_INT 2
40648: PUSH
40649: LD_INT 3
40651: PUSH
40652: LD_INT 4
40654: PUSH
40655: LD_INT 5
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: ST_TO_ADDR
40664: GO 41457
40666: LD_INT 12
40668: DOUBLE
40669: EQUAL
40670: IFTRUE 40674
40672: GO 40700
40674: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40675: LD_ADDR_VAR 0 3
40679: PUSH
40680: LD_INT 2
40682: PUSH
40683: LD_INT 3
40685: PUSH
40686: LD_INT 4
40688: PUSH
40689: LD_INT 5
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: ST_TO_ADDR
40698: GO 41457
40700: LD_INT 13
40702: DOUBLE
40703: EQUAL
40704: IFTRUE 40708
40706: GO 40734
40708: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40709: LD_ADDR_VAR 0 3
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: LD_INT 3
40719: PUSH
40720: LD_INT 4
40722: PUSH
40723: LD_INT 5
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: ST_TO_ADDR
40732: GO 41457
40734: LD_INT 14
40736: DOUBLE
40737: EQUAL
40738: IFTRUE 40742
40740: GO 40760
40742: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40743: LD_ADDR_VAR 0 3
40747: PUSH
40748: LD_INT 4
40750: PUSH
40751: LD_INT 5
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: ST_TO_ADDR
40758: GO 41457
40760: LD_INT 6
40762: DOUBLE
40763: EQUAL
40764: IFTRUE 40768
40766: GO 40786
40768: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40769: LD_ADDR_VAR 0 3
40773: PUSH
40774: LD_INT 4
40776: PUSH
40777: LD_INT 5
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: ST_TO_ADDR
40784: GO 41457
40786: LD_INT 10
40788: DOUBLE
40789: EQUAL
40790: IFTRUE 40794
40792: GO 40812
40794: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40795: LD_ADDR_VAR 0 3
40799: PUSH
40800: LD_INT 4
40802: PUSH
40803: LD_INT 5
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: ST_TO_ADDR
40810: GO 41457
40812: LD_INT 22
40814: DOUBLE
40815: EQUAL
40816: IFTRUE 40820
40818: GO 40846
40820: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40821: LD_ADDR_VAR 0 3
40825: PUSH
40826: LD_INT 11
40828: PUSH
40829: LD_INT 12
40831: PUSH
40832: LD_INT 13
40834: PUSH
40835: LD_INT 14
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: ST_TO_ADDR
40844: GO 41457
40846: LD_INT 23
40848: DOUBLE
40849: EQUAL
40850: IFTRUE 40854
40852: GO 40880
40854: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40855: LD_ADDR_VAR 0 3
40859: PUSH
40860: LD_INT 11
40862: PUSH
40863: LD_INT 12
40865: PUSH
40866: LD_INT 13
40868: PUSH
40869: LD_INT 14
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: ST_TO_ADDR
40878: GO 41457
40880: LD_INT 24
40882: DOUBLE
40883: EQUAL
40884: IFTRUE 40888
40886: GO 40914
40888: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40889: LD_ADDR_VAR 0 3
40893: PUSH
40894: LD_INT 11
40896: PUSH
40897: LD_INT 12
40899: PUSH
40900: LD_INT 13
40902: PUSH
40903: LD_INT 14
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: ST_TO_ADDR
40912: GO 41457
40914: LD_INT 30
40916: DOUBLE
40917: EQUAL
40918: IFTRUE 40922
40920: GO 40948
40922: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40923: LD_ADDR_VAR 0 3
40927: PUSH
40928: LD_INT 11
40930: PUSH
40931: LD_INT 12
40933: PUSH
40934: LD_INT 13
40936: PUSH
40937: LD_INT 14
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: ST_TO_ADDR
40946: GO 41457
40948: LD_INT 25
40950: DOUBLE
40951: EQUAL
40952: IFTRUE 40956
40954: GO 40974
40956: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40957: LD_ADDR_VAR 0 3
40961: PUSH
40962: LD_INT 13
40964: PUSH
40965: LD_INT 14
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: ST_TO_ADDR
40972: GO 41457
40974: LD_INT 27
40976: DOUBLE
40977: EQUAL
40978: IFTRUE 40982
40980: GO 41000
40982: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
40983: LD_ADDR_VAR 0 3
40987: PUSH
40988: LD_INT 13
40990: PUSH
40991: LD_INT 14
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: ST_TO_ADDR
40998: GO 41457
41000: LD_EXP 55
41004: DOUBLE
41005: EQUAL
41006: IFTRUE 41010
41008: GO 41036
41010: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
41011: LD_ADDR_VAR 0 3
41015: PUSH
41016: LD_INT 11
41018: PUSH
41019: LD_INT 12
41021: PUSH
41022: LD_INT 13
41024: PUSH
41025: LD_INT 14
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: ST_TO_ADDR
41034: GO 41457
41036: LD_INT 28
41038: DOUBLE
41039: EQUAL
41040: IFTRUE 41044
41042: GO 41062
41044: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
41045: LD_ADDR_VAR 0 3
41049: PUSH
41050: LD_INT 13
41052: PUSH
41053: LD_INT 14
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: ST_TO_ADDR
41060: GO 41457
41062: LD_INT 29
41064: DOUBLE
41065: EQUAL
41066: IFTRUE 41070
41068: GO 41088
41070: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
41071: LD_ADDR_VAR 0 3
41075: PUSH
41076: LD_INT 13
41078: PUSH
41079: LD_INT 14
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: ST_TO_ADDR
41086: GO 41457
41088: LD_INT 31
41090: DOUBLE
41091: EQUAL
41092: IFTRUE 41096
41094: GO 41114
41096: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
41097: LD_ADDR_VAR 0 3
41101: PUSH
41102: LD_INT 13
41104: PUSH
41105: LD_INT 14
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: ST_TO_ADDR
41112: GO 41457
41114: LD_INT 26
41116: DOUBLE
41117: EQUAL
41118: IFTRUE 41122
41120: GO 41140
41122: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
41123: LD_ADDR_VAR 0 3
41127: PUSH
41128: LD_INT 13
41130: PUSH
41131: LD_INT 14
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: ST_TO_ADDR
41138: GO 41457
41140: LD_INT 42
41142: DOUBLE
41143: EQUAL
41144: IFTRUE 41148
41146: GO 41174
41148: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
41149: LD_ADDR_VAR 0 3
41153: PUSH
41154: LD_INT 21
41156: PUSH
41157: LD_INT 22
41159: PUSH
41160: LD_INT 23
41162: PUSH
41163: LD_INT 24
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: ST_TO_ADDR
41172: GO 41457
41174: LD_INT 43
41176: DOUBLE
41177: EQUAL
41178: IFTRUE 41182
41180: GO 41208
41182: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
41183: LD_ADDR_VAR 0 3
41187: PUSH
41188: LD_INT 21
41190: PUSH
41191: LD_INT 22
41193: PUSH
41194: LD_INT 23
41196: PUSH
41197: LD_INT 24
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: ST_TO_ADDR
41206: GO 41457
41208: LD_INT 44
41210: DOUBLE
41211: EQUAL
41212: IFTRUE 41216
41214: GO 41242
41216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
41217: LD_ADDR_VAR 0 3
41221: PUSH
41222: LD_INT 21
41224: PUSH
41225: LD_INT 22
41227: PUSH
41228: LD_INT 23
41230: PUSH
41231: LD_INT 24
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: ST_TO_ADDR
41240: GO 41457
41242: LD_INT 45
41244: DOUBLE
41245: EQUAL
41246: IFTRUE 41250
41248: GO 41276
41250: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
41251: LD_ADDR_VAR 0 3
41255: PUSH
41256: LD_INT 21
41258: PUSH
41259: LD_INT 22
41261: PUSH
41262: LD_INT 23
41264: PUSH
41265: LD_INT 24
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: ST_TO_ADDR
41274: GO 41457
41276: LD_INT 49
41278: DOUBLE
41279: EQUAL
41280: IFTRUE 41284
41282: GO 41310
41284: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
41285: LD_ADDR_VAR 0 3
41289: PUSH
41290: LD_INT 21
41292: PUSH
41293: LD_INT 22
41295: PUSH
41296: LD_INT 23
41298: PUSH
41299: LD_INT 24
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: ST_TO_ADDR
41308: GO 41457
41310: LD_INT 51
41312: DOUBLE
41313: EQUAL
41314: IFTRUE 41318
41316: GO 41344
41318: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41319: LD_ADDR_VAR 0 3
41323: PUSH
41324: LD_INT 21
41326: PUSH
41327: LD_INT 22
41329: PUSH
41330: LD_INT 23
41332: PUSH
41333: LD_INT 24
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: ST_TO_ADDR
41342: GO 41457
41344: LD_INT 52
41346: DOUBLE
41347: EQUAL
41348: IFTRUE 41352
41350: GO 41378
41352: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41353: LD_ADDR_VAR 0 3
41357: PUSH
41358: LD_INT 21
41360: PUSH
41361: LD_INT 22
41363: PUSH
41364: LD_INT 23
41366: PUSH
41367: LD_INT 24
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: ST_TO_ADDR
41376: GO 41457
41378: LD_INT 53
41380: DOUBLE
41381: EQUAL
41382: IFTRUE 41386
41384: GO 41404
41386: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41387: LD_ADDR_VAR 0 3
41391: PUSH
41392: LD_INT 23
41394: PUSH
41395: LD_INT 24
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: ST_TO_ADDR
41402: GO 41457
41404: LD_INT 46
41406: DOUBLE
41407: EQUAL
41408: IFTRUE 41412
41410: GO 41430
41412: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41413: LD_ADDR_VAR 0 3
41417: PUSH
41418: LD_INT 23
41420: PUSH
41421: LD_INT 24
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: ST_TO_ADDR
41428: GO 41457
41430: LD_INT 47
41432: DOUBLE
41433: EQUAL
41434: IFTRUE 41438
41436: GO 41456
41438: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41439: LD_ADDR_VAR 0 3
41443: PUSH
41444: LD_INT 23
41446: PUSH
41447: LD_INT 24
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: ST_TO_ADDR
41454: GO 41457
41456: POP
// result := ( chassis in result ) ;
41457: LD_ADDR_VAR 0 3
41461: PUSH
41462: LD_VAR 0 1
41466: PUSH
41467: LD_VAR 0 3
41471: IN
41472: ST_TO_ADDR
// end ;
41473: LD_VAR 0 3
41477: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41478: LD_INT 0
41480: PPUSH
41481: PPUSH
41482: PPUSH
41483: PPUSH
41484: PPUSH
41485: PPUSH
41486: PPUSH
// result := array ;
41487: LD_ADDR_VAR 0 5
41491: PUSH
41492: LD_VAR 0 1
41496: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41497: LD_VAR 0 1
41501: NOT
41502: PUSH
41503: LD_VAR 0 2
41507: NOT
41508: OR
41509: PUSH
41510: LD_VAR 0 3
41514: NOT
41515: OR
41516: PUSH
41517: LD_VAR 0 2
41521: PUSH
41522: LD_VAR 0 1
41526: GREATER
41527: OR
41528: PUSH
41529: LD_VAR 0 3
41533: PUSH
41534: LD_VAR 0 1
41538: GREATER
41539: OR
41540: IFFALSE 41544
// exit ;
41542: GO 41840
// if direction then
41544: LD_VAR 0 4
41548: IFFALSE 41612
// begin d := 1 ;
41550: LD_ADDR_VAR 0 9
41554: PUSH
41555: LD_INT 1
41557: ST_TO_ADDR
// if i_from > i_to then
41558: LD_VAR 0 2
41562: PUSH
41563: LD_VAR 0 3
41567: GREATER
41568: IFFALSE 41594
// length := ( array - i_from ) + i_to else
41570: LD_ADDR_VAR 0 11
41574: PUSH
41575: LD_VAR 0 1
41579: PUSH
41580: LD_VAR 0 2
41584: MINUS
41585: PUSH
41586: LD_VAR 0 3
41590: PLUS
41591: ST_TO_ADDR
41592: GO 41610
// length := i_to - i_from ;
41594: LD_ADDR_VAR 0 11
41598: PUSH
41599: LD_VAR 0 3
41603: PUSH
41604: LD_VAR 0 2
41608: MINUS
41609: ST_TO_ADDR
// end else
41610: GO 41673
// begin d := - 1 ;
41612: LD_ADDR_VAR 0 9
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: ST_TO_ADDR
// if i_from > i_to then
41621: LD_VAR 0 2
41625: PUSH
41626: LD_VAR 0 3
41630: GREATER
41631: IFFALSE 41651
// length := i_from - i_to else
41633: LD_ADDR_VAR 0 11
41637: PUSH
41638: LD_VAR 0 2
41642: PUSH
41643: LD_VAR 0 3
41647: MINUS
41648: ST_TO_ADDR
41649: GO 41673
// length := ( array - i_to ) + i_from ;
41651: LD_ADDR_VAR 0 11
41655: PUSH
41656: LD_VAR 0 1
41660: PUSH
41661: LD_VAR 0 3
41665: MINUS
41666: PUSH
41667: LD_VAR 0 2
41671: PLUS
41672: ST_TO_ADDR
// end ; if not length then
41673: LD_VAR 0 11
41677: NOT
41678: IFFALSE 41682
// exit ;
41680: GO 41840
// tmp := array ;
41682: LD_ADDR_VAR 0 10
41686: PUSH
41687: LD_VAR 0 1
41691: ST_TO_ADDR
// for i = 1 to length do
41692: LD_ADDR_VAR 0 6
41696: PUSH
41697: DOUBLE
41698: LD_INT 1
41700: DEC
41701: ST_TO_ADDR
41702: LD_VAR 0 11
41706: PUSH
41707: FOR_TO
41708: IFFALSE 41828
// begin for j = 1 to array do
41710: LD_ADDR_VAR 0 7
41714: PUSH
41715: DOUBLE
41716: LD_INT 1
41718: DEC
41719: ST_TO_ADDR
41720: LD_VAR 0 1
41724: PUSH
41725: FOR_TO
41726: IFFALSE 41814
// begin k := j + d ;
41728: LD_ADDR_VAR 0 8
41732: PUSH
41733: LD_VAR 0 7
41737: PUSH
41738: LD_VAR 0 9
41742: PLUS
41743: ST_TO_ADDR
// if k > array then
41744: LD_VAR 0 8
41748: PUSH
41749: LD_VAR 0 1
41753: GREATER
41754: IFFALSE 41764
// k := 1 ;
41756: LD_ADDR_VAR 0 8
41760: PUSH
41761: LD_INT 1
41763: ST_TO_ADDR
// if not k then
41764: LD_VAR 0 8
41768: NOT
41769: IFFALSE 41781
// k := array ;
41771: LD_ADDR_VAR 0 8
41775: PUSH
41776: LD_VAR 0 1
41780: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41781: LD_ADDR_VAR 0 10
41785: PUSH
41786: LD_VAR 0 10
41790: PPUSH
41791: LD_VAR 0 8
41795: PPUSH
41796: LD_VAR 0 1
41800: PUSH
41801: LD_VAR 0 7
41805: ARRAY
41806: PPUSH
41807: CALL_OW 1
41811: ST_TO_ADDR
// end ;
41812: GO 41725
41814: POP
41815: POP
// array := tmp ;
41816: LD_ADDR_VAR 0 1
41820: PUSH
41821: LD_VAR 0 10
41825: ST_TO_ADDR
// end ;
41826: GO 41707
41828: POP
41829: POP
// result := array ;
41830: LD_ADDR_VAR 0 5
41834: PUSH
41835: LD_VAR 0 1
41839: ST_TO_ADDR
// end ;
41840: LD_VAR 0 5
41844: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41845: LD_INT 0
41847: PPUSH
41848: PPUSH
// result := 0 ;
41849: LD_ADDR_VAR 0 3
41853: PUSH
41854: LD_INT 0
41856: ST_TO_ADDR
// if not array or not value in array then
41857: LD_VAR 0 1
41861: NOT
41862: PUSH
41863: LD_VAR 0 2
41867: PUSH
41868: LD_VAR 0 1
41872: IN
41873: NOT
41874: OR
41875: IFFALSE 41879
// exit ;
41877: GO 41933
// for i = 1 to array do
41879: LD_ADDR_VAR 0 4
41883: PUSH
41884: DOUBLE
41885: LD_INT 1
41887: DEC
41888: ST_TO_ADDR
41889: LD_VAR 0 1
41893: PUSH
41894: FOR_TO
41895: IFFALSE 41931
// if value = array [ i ] then
41897: LD_VAR 0 2
41901: PUSH
41902: LD_VAR 0 1
41906: PUSH
41907: LD_VAR 0 4
41911: ARRAY
41912: EQUAL
41913: IFFALSE 41929
// begin result := i ;
41915: LD_ADDR_VAR 0 3
41919: PUSH
41920: LD_VAR 0 4
41924: ST_TO_ADDR
// exit ;
41925: POP
41926: POP
41927: GO 41933
// end ;
41929: GO 41894
41931: POP
41932: POP
// end ;
41933: LD_VAR 0 3
41937: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41938: LD_INT 0
41940: PPUSH
// vc_chassis := chassis ;
41941: LD_ADDR_OWVAR 37
41945: PUSH
41946: LD_VAR 0 1
41950: ST_TO_ADDR
// vc_engine := engine ;
41951: LD_ADDR_OWVAR 39
41955: PUSH
41956: LD_VAR 0 2
41960: ST_TO_ADDR
// vc_control := control ;
41961: LD_ADDR_OWVAR 38
41965: PUSH
41966: LD_VAR 0 3
41970: ST_TO_ADDR
// vc_weapon := weapon ;
41971: LD_ADDR_OWVAR 40
41975: PUSH
41976: LD_VAR 0 4
41980: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41981: LD_ADDR_OWVAR 41
41985: PUSH
41986: LD_VAR 0 5
41990: ST_TO_ADDR
// end ;
41991: LD_VAR 0 6
41995: RET
// export function WantPlant ( unit ) ; var task ; begin
41996: LD_INT 0
41998: PPUSH
41999: PPUSH
// result := false ;
42000: LD_ADDR_VAR 0 2
42004: PUSH
42005: LD_INT 0
42007: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
42008: LD_ADDR_VAR 0 3
42012: PUSH
42013: LD_VAR 0 1
42017: PPUSH
42018: CALL_OW 437
42022: ST_TO_ADDR
// if task then
42023: LD_VAR 0 3
42027: IFFALSE 42055
// if task [ 1 ] [ 1 ] = p then
42029: LD_VAR 0 3
42033: PUSH
42034: LD_INT 1
42036: ARRAY
42037: PUSH
42038: LD_INT 1
42040: ARRAY
42041: PUSH
42042: LD_STRING p
42044: EQUAL
42045: IFFALSE 42055
// result := true ;
42047: LD_ADDR_VAR 0 2
42051: PUSH
42052: LD_INT 1
42054: ST_TO_ADDR
// end ;
42055: LD_VAR 0 2
42059: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
42060: LD_INT 0
42062: PPUSH
42063: PPUSH
42064: PPUSH
42065: PPUSH
// if pos < 1 then
42066: LD_VAR 0 2
42070: PUSH
42071: LD_INT 1
42073: LESS
42074: IFFALSE 42078
// exit ;
42076: GO 42381
// if pos = 1 then
42078: LD_VAR 0 2
42082: PUSH
42083: LD_INT 1
42085: EQUAL
42086: IFFALSE 42119
// result := Replace ( arr , pos [ 1 ] , value ) else
42088: LD_ADDR_VAR 0 4
42092: PUSH
42093: LD_VAR 0 1
42097: PPUSH
42098: LD_VAR 0 2
42102: PUSH
42103: LD_INT 1
42105: ARRAY
42106: PPUSH
42107: LD_VAR 0 3
42111: PPUSH
42112: CALL_OW 1
42116: ST_TO_ADDR
42117: GO 42381
// begin tmp := arr ;
42119: LD_ADDR_VAR 0 6
42123: PUSH
42124: LD_VAR 0 1
42128: ST_TO_ADDR
// s_arr := [ tmp ] ;
42129: LD_ADDR_VAR 0 7
42133: PUSH
42134: LD_VAR 0 6
42138: PUSH
42139: EMPTY
42140: LIST
42141: ST_TO_ADDR
// for i = 1 to pos - 1 do
42142: LD_ADDR_VAR 0 5
42146: PUSH
42147: DOUBLE
42148: LD_INT 1
42150: DEC
42151: ST_TO_ADDR
42152: LD_VAR 0 2
42156: PUSH
42157: LD_INT 1
42159: MINUS
42160: PUSH
42161: FOR_TO
42162: IFFALSE 42207
// begin tmp := tmp [ pos [ i ] ] ;
42164: LD_ADDR_VAR 0 6
42168: PUSH
42169: LD_VAR 0 6
42173: PUSH
42174: LD_VAR 0 2
42178: PUSH
42179: LD_VAR 0 5
42183: ARRAY
42184: ARRAY
42185: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
42186: LD_ADDR_VAR 0 7
42190: PUSH
42191: LD_VAR 0 7
42195: PUSH
42196: LD_VAR 0 6
42200: PUSH
42201: EMPTY
42202: LIST
42203: ADD
42204: ST_TO_ADDR
// end ;
42205: GO 42161
42207: POP
42208: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
42209: LD_ADDR_VAR 0 6
42213: PUSH
42214: LD_VAR 0 6
42218: PPUSH
42219: LD_VAR 0 2
42223: PUSH
42224: LD_VAR 0 2
42228: ARRAY
42229: PPUSH
42230: LD_VAR 0 3
42234: PPUSH
42235: CALL_OW 1
42239: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
42240: LD_ADDR_VAR 0 7
42244: PUSH
42245: LD_VAR 0 7
42249: PPUSH
42250: LD_VAR 0 7
42254: PPUSH
42255: LD_VAR 0 6
42259: PPUSH
42260: CALL_OW 1
42264: ST_TO_ADDR
// for i = s_arr downto 2 do
42265: LD_ADDR_VAR 0 5
42269: PUSH
42270: DOUBLE
42271: LD_VAR 0 7
42275: INC
42276: ST_TO_ADDR
42277: LD_INT 2
42279: PUSH
42280: FOR_DOWNTO
42281: IFFALSE 42365
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
42283: LD_ADDR_VAR 0 6
42287: PUSH
42288: LD_VAR 0 7
42292: PUSH
42293: LD_VAR 0 5
42297: PUSH
42298: LD_INT 1
42300: MINUS
42301: ARRAY
42302: PPUSH
42303: LD_VAR 0 2
42307: PUSH
42308: LD_VAR 0 5
42312: PUSH
42313: LD_INT 1
42315: MINUS
42316: ARRAY
42317: PPUSH
42318: LD_VAR 0 7
42322: PUSH
42323: LD_VAR 0 5
42327: ARRAY
42328: PPUSH
42329: CALL_OW 1
42333: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42334: LD_ADDR_VAR 0 7
42338: PUSH
42339: LD_VAR 0 7
42343: PPUSH
42344: LD_VAR 0 5
42348: PUSH
42349: LD_INT 1
42351: MINUS
42352: PPUSH
42353: LD_VAR 0 6
42357: PPUSH
42358: CALL_OW 1
42362: ST_TO_ADDR
// end ;
42363: GO 42280
42365: POP
42366: POP
// result := s_arr [ 1 ] ;
42367: LD_ADDR_VAR 0 4
42371: PUSH
42372: LD_VAR 0 7
42376: PUSH
42377: LD_INT 1
42379: ARRAY
42380: ST_TO_ADDR
// end ; end ;
42381: LD_VAR 0 4
42385: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42386: LD_INT 0
42388: PPUSH
42389: PPUSH
// if not list then
42390: LD_VAR 0 1
42394: NOT
42395: IFFALSE 42399
// exit ;
42397: GO 42490
// i := list [ pos1 ] ;
42399: LD_ADDR_VAR 0 5
42403: PUSH
42404: LD_VAR 0 1
42408: PUSH
42409: LD_VAR 0 2
42413: ARRAY
42414: ST_TO_ADDR
// if not i then
42415: LD_VAR 0 5
42419: NOT
42420: IFFALSE 42424
// exit ;
42422: GO 42490
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42424: LD_ADDR_VAR 0 1
42428: PUSH
42429: LD_VAR 0 1
42433: PPUSH
42434: LD_VAR 0 2
42438: PPUSH
42439: LD_VAR 0 1
42443: PUSH
42444: LD_VAR 0 3
42448: ARRAY
42449: PPUSH
42450: CALL_OW 1
42454: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42455: LD_ADDR_VAR 0 1
42459: PUSH
42460: LD_VAR 0 1
42464: PPUSH
42465: LD_VAR 0 3
42469: PPUSH
42470: LD_VAR 0 5
42474: PPUSH
42475: CALL_OW 1
42479: ST_TO_ADDR
// result := list ;
42480: LD_ADDR_VAR 0 4
42484: PUSH
42485: LD_VAR 0 1
42489: ST_TO_ADDR
// end ;
42490: LD_VAR 0 4
42494: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42495: LD_INT 0
42497: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42498: LD_ADDR_VAR 0 5
42502: PUSH
42503: LD_VAR 0 1
42507: PPUSH
42508: CALL_OW 250
42512: PPUSH
42513: LD_VAR 0 1
42517: PPUSH
42518: CALL_OW 251
42522: PPUSH
42523: LD_VAR 0 2
42527: PPUSH
42528: LD_VAR 0 3
42532: PPUSH
42533: LD_VAR 0 4
42537: PPUSH
42538: CALL 42548 0 5
42542: ST_TO_ADDR
// end ;
42543: LD_VAR 0 5
42547: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42548: LD_INT 0
42550: PPUSH
42551: PPUSH
42552: PPUSH
42553: PPUSH
// if not list then
42554: LD_VAR 0 3
42558: NOT
42559: IFFALSE 42563
// exit ;
42561: GO 42951
// result := [ ] ;
42563: LD_ADDR_VAR 0 6
42567: PUSH
42568: EMPTY
42569: ST_TO_ADDR
// for i in list do
42570: LD_ADDR_VAR 0 7
42574: PUSH
42575: LD_VAR 0 3
42579: PUSH
42580: FOR_IN
42581: IFFALSE 42783
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42583: LD_ADDR_VAR 0 9
42587: PUSH
42588: LD_VAR 0 7
42592: PPUSH
42593: LD_VAR 0 1
42597: PPUSH
42598: LD_VAR 0 2
42602: PPUSH
42603: CALL_OW 297
42607: ST_TO_ADDR
// if not result then
42608: LD_VAR 0 6
42612: NOT
42613: IFFALSE 42639
// result := [ [ i , tmp ] ] else
42615: LD_ADDR_VAR 0 6
42619: PUSH
42620: LD_VAR 0 7
42624: PUSH
42625: LD_VAR 0 9
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: EMPTY
42635: LIST
42636: ST_TO_ADDR
42637: GO 42781
// begin if result [ result ] [ 2 ] < tmp then
42639: LD_VAR 0 6
42643: PUSH
42644: LD_VAR 0 6
42648: ARRAY
42649: PUSH
42650: LD_INT 2
42652: ARRAY
42653: PUSH
42654: LD_VAR 0 9
42658: LESS
42659: IFFALSE 42701
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42661: LD_ADDR_VAR 0 6
42665: PUSH
42666: LD_VAR 0 6
42670: PPUSH
42671: LD_VAR 0 6
42675: PUSH
42676: LD_INT 1
42678: PLUS
42679: PPUSH
42680: LD_VAR 0 7
42684: PUSH
42685: LD_VAR 0 9
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PPUSH
42694: CALL_OW 2
42698: ST_TO_ADDR
42699: GO 42781
// for j = 1 to result do
42701: LD_ADDR_VAR 0 8
42705: PUSH
42706: DOUBLE
42707: LD_INT 1
42709: DEC
42710: ST_TO_ADDR
42711: LD_VAR 0 6
42715: PUSH
42716: FOR_TO
42717: IFFALSE 42779
// begin if tmp < result [ j ] [ 2 ] then
42719: LD_VAR 0 9
42723: PUSH
42724: LD_VAR 0 6
42728: PUSH
42729: LD_VAR 0 8
42733: ARRAY
42734: PUSH
42735: LD_INT 2
42737: ARRAY
42738: LESS
42739: IFFALSE 42777
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42741: LD_ADDR_VAR 0 6
42745: PUSH
42746: LD_VAR 0 6
42750: PPUSH
42751: LD_VAR 0 8
42755: PPUSH
42756: LD_VAR 0 7
42760: PUSH
42761: LD_VAR 0 9
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PPUSH
42770: CALL_OW 2
42774: ST_TO_ADDR
// break ;
42775: GO 42779
// end ; end ;
42777: GO 42716
42779: POP
42780: POP
// end ; end ;
42781: GO 42580
42783: POP
42784: POP
// if result and not asc then
42785: LD_VAR 0 6
42789: PUSH
42790: LD_VAR 0 4
42794: NOT
42795: AND
42796: IFFALSE 42871
// begin tmp := result ;
42798: LD_ADDR_VAR 0 9
42802: PUSH
42803: LD_VAR 0 6
42807: ST_TO_ADDR
// for i = tmp downto 1 do
42808: LD_ADDR_VAR 0 7
42812: PUSH
42813: DOUBLE
42814: LD_VAR 0 9
42818: INC
42819: ST_TO_ADDR
42820: LD_INT 1
42822: PUSH
42823: FOR_DOWNTO
42824: IFFALSE 42869
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42826: LD_ADDR_VAR 0 6
42830: PUSH
42831: LD_VAR 0 6
42835: PPUSH
42836: LD_VAR 0 9
42840: PUSH
42841: LD_VAR 0 7
42845: MINUS
42846: PUSH
42847: LD_INT 1
42849: PLUS
42850: PPUSH
42851: LD_VAR 0 9
42855: PUSH
42856: LD_VAR 0 7
42860: ARRAY
42861: PPUSH
42862: CALL_OW 1
42866: ST_TO_ADDR
42867: GO 42823
42869: POP
42870: POP
// end ; tmp := [ ] ;
42871: LD_ADDR_VAR 0 9
42875: PUSH
42876: EMPTY
42877: ST_TO_ADDR
// if mode then
42878: LD_VAR 0 5
42882: IFFALSE 42951
// begin for i = 1 to result do
42884: LD_ADDR_VAR 0 7
42888: PUSH
42889: DOUBLE
42890: LD_INT 1
42892: DEC
42893: ST_TO_ADDR
42894: LD_VAR 0 6
42898: PUSH
42899: FOR_TO
42900: IFFALSE 42939
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42902: LD_ADDR_VAR 0 9
42906: PUSH
42907: LD_VAR 0 9
42911: PPUSH
42912: LD_VAR 0 7
42916: PPUSH
42917: LD_VAR 0 6
42921: PUSH
42922: LD_VAR 0 7
42926: ARRAY
42927: PUSH
42928: LD_INT 1
42930: ARRAY
42931: PPUSH
42932: CALL_OW 1
42936: ST_TO_ADDR
42937: GO 42899
42939: POP
42940: POP
// result := tmp ;
42941: LD_ADDR_VAR 0 6
42945: PUSH
42946: LD_VAR 0 9
42950: ST_TO_ADDR
// end ; end ;
42951: LD_VAR 0 6
42955: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42956: LD_INT 0
42958: PPUSH
42959: PPUSH
42960: PPUSH
42961: PPUSH
42962: PPUSH
42963: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42964: LD_ADDR_VAR 0 5
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: ST_TO_ADDR
// if not x or not y then
42986: LD_VAR 0 2
42990: NOT
42991: PUSH
42992: LD_VAR 0 3
42996: NOT
42997: OR
42998: IFFALSE 43002
// exit ;
43000: GO 44654
// if not range then
43002: LD_VAR 0 4
43006: NOT
43007: IFFALSE 43017
// range := 10 ;
43009: LD_ADDR_VAR 0 4
43013: PUSH
43014: LD_INT 10
43016: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43017: LD_ADDR_VAR 0 8
43021: PUSH
43022: LD_INT 81
43024: PUSH
43025: LD_VAR 0 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 92
43036: PUSH
43037: LD_VAR 0 2
43041: PUSH
43042: LD_VAR 0 3
43046: PUSH
43047: LD_VAR 0 4
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 3
43060: PUSH
43061: LD_INT 21
43063: PUSH
43064: LD_INT 3
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: LIST
43079: PPUSH
43080: CALL_OW 69
43084: ST_TO_ADDR
// if not tmp then
43085: LD_VAR 0 8
43089: NOT
43090: IFFALSE 43094
// exit ;
43092: GO 44654
// for i in tmp do
43094: LD_ADDR_VAR 0 6
43098: PUSH
43099: LD_VAR 0 8
43103: PUSH
43104: FOR_IN
43105: IFFALSE 44629
// begin points := [ 0 , 0 , 0 ] ;
43107: LD_ADDR_VAR 0 9
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: LIST
43125: ST_TO_ADDR
// bpoints := 1 ;
43126: LD_ADDR_VAR 0 10
43130: PUSH
43131: LD_INT 1
43133: ST_TO_ADDR
// case GetType ( i ) of unit_human :
43134: LD_VAR 0 6
43138: PPUSH
43139: CALL_OW 247
43143: PUSH
43144: LD_INT 1
43146: DOUBLE
43147: EQUAL
43148: IFTRUE 43152
43150: GO 43730
43152: POP
// begin if GetClass ( i ) = 1 then
43153: LD_VAR 0 6
43157: PPUSH
43158: CALL_OW 257
43162: PUSH
43163: LD_INT 1
43165: EQUAL
43166: IFFALSE 43187
// points := [ 10 , 5 , 3 ] ;
43168: LD_ADDR_VAR 0 9
43172: PUSH
43173: LD_INT 10
43175: PUSH
43176: LD_INT 5
43178: PUSH
43179: LD_INT 3
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: LIST
43186: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
43187: LD_VAR 0 6
43191: PPUSH
43192: CALL_OW 257
43196: PUSH
43197: LD_INT 2
43199: PUSH
43200: LD_INT 3
43202: PUSH
43203: LD_INT 4
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: LIST
43210: IN
43211: IFFALSE 43232
// points := [ 3 , 2 , 1 ] ;
43213: LD_ADDR_VAR 0 9
43217: PUSH
43218: LD_INT 3
43220: PUSH
43221: LD_INT 2
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: LIST
43231: ST_TO_ADDR
// if GetClass ( i ) = 5 then
43232: LD_VAR 0 6
43236: PPUSH
43237: CALL_OW 257
43241: PUSH
43242: LD_INT 5
43244: EQUAL
43245: IFFALSE 43266
// points := [ 130 , 5 , 2 ] ;
43247: LD_ADDR_VAR 0 9
43251: PUSH
43252: LD_INT 130
43254: PUSH
43255: LD_INT 5
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: LIST
43265: ST_TO_ADDR
// if GetClass ( i ) = 8 then
43266: LD_VAR 0 6
43270: PPUSH
43271: CALL_OW 257
43275: PUSH
43276: LD_INT 8
43278: EQUAL
43279: IFFALSE 43300
// points := [ 35 , 35 , 30 ] ;
43281: LD_ADDR_VAR 0 9
43285: PUSH
43286: LD_INT 35
43288: PUSH
43289: LD_INT 35
43291: PUSH
43292: LD_INT 30
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: LIST
43299: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43300: LD_VAR 0 6
43304: PPUSH
43305: CALL_OW 257
43309: PUSH
43310: LD_INT 9
43312: EQUAL
43313: IFFALSE 43334
// points := [ 20 , 55 , 40 ] ;
43315: LD_ADDR_VAR 0 9
43319: PUSH
43320: LD_INT 20
43322: PUSH
43323: LD_INT 55
43325: PUSH
43326: LD_INT 40
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: LIST
43333: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43334: LD_VAR 0 6
43338: PPUSH
43339: CALL_OW 257
43343: PUSH
43344: LD_INT 12
43346: PUSH
43347: LD_INT 16
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: IN
43354: IFFALSE 43375
// points := [ 5 , 3 , 2 ] ;
43356: LD_ADDR_VAR 0 9
43360: PUSH
43361: LD_INT 5
43363: PUSH
43364: LD_INT 3
43366: PUSH
43367: LD_INT 2
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: LIST
43374: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43375: LD_VAR 0 6
43379: PPUSH
43380: CALL_OW 257
43384: PUSH
43385: LD_INT 17
43387: EQUAL
43388: IFFALSE 43409
// points := [ 100 , 50 , 75 ] ;
43390: LD_ADDR_VAR 0 9
43394: PUSH
43395: LD_INT 100
43397: PUSH
43398: LD_INT 50
43400: PUSH
43401: LD_INT 75
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: LIST
43408: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43409: LD_VAR 0 6
43413: PPUSH
43414: CALL_OW 257
43418: PUSH
43419: LD_INT 15
43421: EQUAL
43422: IFFALSE 43443
// points := [ 10 , 5 , 3 ] ;
43424: LD_ADDR_VAR 0 9
43428: PUSH
43429: LD_INT 10
43431: PUSH
43432: LD_INT 5
43434: PUSH
43435: LD_INT 3
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: LIST
43442: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43443: LD_VAR 0 6
43447: PPUSH
43448: CALL_OW 257
43452: PUSH
43453: LD_INT 14
43455: EQUAL
43456: IFFALSE 43477
// points := [ 10 , 0 , 0 ] ;
43458: LD_ADDR_VAR 0 9
43462: PUSH
43463: LD_INT 10
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: LIST
43476: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43477: LD_VAR 0 6
43481: PPUSH
43482: CALL_OW 257
43486: PUSH
43487: LD_INT 11
43489: EQUAL
43490: IFFALSE 43511
// points := [ 30 , 10 , 5 ] ;
43492: LD_ADDR_VAR 0 9
43496: PUSH
43497: LD_INT 30
43499: PUSH
43500: LD_INT 10
43502: PUSH
43503: LD_INT 5
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: LIST
43510: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43511: LD_VAR 0 1
43515: PPUSH
43516: LD_INT 5
43518: PPUSH
43519: CALL_OW 321
43523: PUSH
43524: LD_INT 2
43526: EQUAL
43527: IFFALSE 43544
// bpoints := bpoints * 1.8 ;
43529: LD_ADDR_VAR 0 10
43533: PUSH
43534: LD_VAR 0 10
43538: PUSH
43539: LD_REAL  1.80000000000000E+0000
43542: MUL
43543: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43544: LD_VAR 0 6
43548: PPUSH
43549: CALL_OW 257
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: LD_INT 3
43562: PUSH
43563: LD_INT 4
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: IN
43572: PUSH
43573: LD_VAR 0 1
43577: PPUSH
43578: LD_INT 51
43580: PPUSH
43581: CALL_OW 321
43585: PUSH
43586: LD_INT 2
43588: EQUAL
43589: AND
43590: IFFALSE 43607
// bpoints := bpoints * 1.2 ;
43592: LD_ADDR_VAR 0 10
43596: PUSH
43597: LD_VAR 0 10
43601: PUSH
43602: LD_REAL  1.20000000000000E+0000
43605: MUL
43606: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43607: LD_VAR 0 6
43611: PPUSH
43612: CALL_OW 257
43616: PUSH
43617: LD_INT 5
43619: PUSH
43620: LD_INT 7
43622: PUSH
43623: LD_INT 9
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: LIST
43630: IN
43631: PUSH
43632: LD_VAR 0 1
43636: PPUSH
43637: LD_INT 52
43639: PPUSH
43640: CALL_OW 321
43644: PUSH
43645: LD_INT 2
43647: EQUAL
43648: AND
43649: IFFALSE 43666
// bpoints := bpoints * 1.5 ;
43651: LD_ADDR_VAR 0 10
43655: PUSH
43656: LD_VAR 0 10
43660: PUSH
43661: LD_REAL  1.50000000000000E+0000
43664: MUL
43665: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43666: LD_VAR 0 1
43670: PPUSH
43671: LD_INT 66
43673: PPUSH
43674: CALL_OW 321
43678: PUSH
43679: LD_INT 2
43681: EQUAL
43682: IFFALSE 43699
// bpoints := bpoints * 1.1 ;
43684: LD_ADDR_VAR 0 10
43688: PUSH
43689: LD_VAR 0 10
43693: PUSH
43694: LD_REAL  1.10000000000000E+0000
43697: MUL
43698: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43699: LD_ADDR_VAR 0 10
43703: PUSH
43704: LD_VAR 0 10
43708: PUSH
43709: LD_VAR 0 6
43713: PPUSH
43714: LD_INT 1
43716: PPUSH
43717: CALL_OW 259
43721: PUSH
43722: LD_REAL  1.15000000000000E+0000
43725: MUL
43726: MUL
43727: ST_TO_ADDR
// end ; unit_vehicle :
43728: GO 44558
43730: LD_INT 2
43732: DOUBLE
43733: EQUAL
43734: IFTRUE 43738
43736: GO 44546
43738: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43739: LD_VAR 0 6
43743: PPUSH
43744: CALL_OW 264
43748: PUSH
43749: LD_INT 2
43751: PUSH
43752: LD_INT 42
43754: PUSH
43755: LD_INT 24
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: LIST
43762: IN
43763: IFFALSE 43784
// points := [ 25 , 5 , 3 ] ;
43765: LD_ADDR_VAR 0 9
43769: PUSH
43770: LD_INT 25
43772: PUSH
43773: LD_INT 5
43775: PUSH
43776: LD_INT 3
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: LIST
43783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43784: LD_VAR 0 6
43788: PPUSH
43789: CALL_OW 264
43793: PUSH
43794: LD_INT 4
43796: PUSH
43797: LD_INT 43
43799: PUSH
43800: LD_INT 25
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: LIST
43807: IN
43808: IFFALSE 43829
// points := [ 40 , 15 , 5 ] ;
43810: LD_ADDR_VAR 0 9
43814: PUSH
43815: LD_INT 40
43817: PUSH
43818: LD_INT 15
43820: PUSH
43821: LD_INT 5
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: LIST
43828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43829: LD_VAR 0 6
43833: PPUSH
43834: CALL_OW 264
43838: PUSH
43839: LD_INT 3
43841: PUSH
43842: LD_INT 23
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: IN
43849: IFFALSE 43870
// points := [ 7 , 25 , 8 ] ;
43851: LD_ADDR_VAR 0 9
43855: PUSH
43856: LD_INT 7
43858: PUSH
43859: LD_INT 25
43861: PUSH
43862: LD_INT 8
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: LIST
43869: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43870: LD_VAR 0 6
43874: PPUSH
43875: CALL_OW 264
43879: PUSH
43880: LD_INT 5
43882: PUSH
43883: LD_INT 27
43885: PUSH
43886: LD_INT 44
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: LIST
43893: IN
43894: IFFALSE 43915
// points := [ 14 , 50 , 16 ] ;
43896: LD_ADDR_VAR 0 9
43900: PUSH
43901: LD_INT 14
43903: PUSH
43904: LD_INT 50
43906: PUSH
43907: LD_INT 16
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: LIST
43914: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43915: LD_VAR 0 6
43919: PPUSH
43920: CALL_OW 264
43924: PUSH
43925: LD_INT 6
43927: PUSH
43928: LD_INT 46
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: IN
43935: IFFALSE 43956
// points := [ 32 , 120 , 70 ] ;
43937: LD_ADDR_VAR 0 9
43941: PUSH
43942: LD_INT 32
43944: PUSH
43945: LD_INT 120
43947: PUSH
43948: LD_INT 70
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: LIST
43955: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
43956: LD_VAR 0 6
43960: PPUSH
43961: CALL_OW 264
43965: PUSH
43966: LD_INT 7
43968: PUSH
43969: LD_INT 28
43971: PUSH
43972: LD_INT 45
43974: PUSH
43975: LD_EXP 55
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: IN
43986: IFFALSE 44007
// points := [ 35 , 20 , 45 ] ;
43988: LD_ADDR_VAR 0 9
43992: PUSH
43993: LD_INT 35
43995: PUSH
43996: LD_INT 20
43998: PUSH
43999: LD_INT 45
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: LIST
44006: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
44007: LD_VAR 0 6
44011: PPUSH
44012: CALL_OW 264
44016: PUSH
44017: LD_INT 47
44019: PUSH
44020: EMPTY
44021: LIST
44022: IN
44023: IFFALSE 44044
// points := [ 67 , 45 , 75 ] ;
44025: LD_ADDR_VAR 0 9
44029: PUSH
44030: LD_INT 67
44032: PUSH
44033: LD_INT 45
44035: PUSH
44036: LD_INT 75
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: LIST
44043: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
44044: LD_VAR 0 6
44048: PPUSH
44049: CALL_OW 264
44053: PUSH
44054: LD_INT 26
44056: PUSH
44057: EMPTY
44058: LIST
44059: IN
44060: IFFALSE 44081
// points := [ 120 , 30 , 80 ] ;
44062: LD_ADDR_VAR 0 9
44066: PUSH
44067: LD_INT 120
44069: PUSH
44070: LD_INT 30
44072: PUSH
44073: LD_INT 80
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: LIST
44080: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
44081: LD_VAR 0 6
44085: PPUSH
44086: CALL_OW 264
44090: PUSH
44091: LD_INT 22
44093: PUSH
44094: EMPTY
44095: LIST
44096: IN
44097: IFFALSE 44118
// points := [ 40 , 1 , 1 ] ;
44099: LD_ADDR_VAR 0 9
44103: PUSH
44104: LD_INT 40
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: LIST
44117: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
44118: LD_VAR 0 6
44122: PPUSH
44123: CALL_OW 264
44127: PUSH
44128: LD_INT 29
44130: PUSH
44131: EMPTY
44132: LIST
44133: IN
44134: IFFALSE 44155
// points := [ 70 , 200 , 400 ] ;
44136: LD_ADDR_VAR 0 9
44140: PUSH
44141: LD_INT 70
44143: PUSH
44144: LD_INT 200
44146: PUSH
44147: LD_INT 400
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: LIST
44154: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
44155: LD_VAR 0 6
44159: PPUSH
44160: CALL_OW 264
44164: PUSH
44165: LD_INT 14
44167: PUSH
44168: LD_INT 53
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: IN
44175: IFFALSE 44196
// points := [ 40 , 10 , 20 ] ;
44177: LD_ADDR_VAR 0 9
44181: PUSH
44182: LD_INT 40
44184: PUSH
44185: LD_INT 10
44187: PUSH
44188: LD_INT 20
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: LIST
44195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
44196: LD_VAR 0 6
44200: PPUSH
44201: CALL_OW 264
44205: PUSH
44206: LD_INT 9
44208: PUSH
44209: EMPTY
44210: LIST
44211: IN
44212: IFFALSE 44233
// points := [ 5 , 70 , 20 ] ;
44214: LD_ADDR_VAR 0 9
44218: PUSH
44219: LD_INT 5
44221: PUSH
44222: LD_INT 70
44224: PUSH
44225: LD_INT 20
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: LIST
44232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
44233: LD_VAR 0 6
44237: PPUSH
44238: CALL_OW 264
44242: PUSH
44243: LD_INT 10
44245: PUSH
44246: EMPTY
44247: LIST
44248: IN
44249: IFFALSE 44270
// points := [ 35 , 110 , 70 ] ;
44251: LD_ADDR_VAR 0 9
44255: PUSH
44256: LD_INT 35
44258: PUSH
44259: LD_INT 110
44261: PUSH
44262: LD_INT 70
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: LIST
44269: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
44270: LD_VAR 0 6
44274: PPUSH
44275: CALL_OW 265
44279: PUSH
44280: LD_INT 25
44282: EQUAL
44283: IFFALSE 44304
// points := [ 80 , 65 , 100 ] ;
44285: LD_ADDR_VAR 0 9
44289: PUSH
44290: LD_INT 80
44292: PUSH
44293: LD_INT 65
44295: PUSH
44296: LD_INT 100
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: LIST
44303: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44304: LD_VAR 0 6
44308: PPUSH
44309: CALL_OW 263
44313: PUSH
44314: LD_INT 1
44316: EQUAL
44317: IFFALSE 44352
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44319: LD_ADDR_VAR 0 10
44323: PUSH
44324: LD_VAR 0 10
44328: PUSH
44329: LD_VAR 0 6
44333: PPUSH
44334: CALL_OW 311
44338: PPUSH
44339: LD_INT 3
44341: PPUSH
44342: CALL_OW 259
44346: PUSH
44347: LD_INT 4
44349: MUL
44350: MUL
44351: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44352: LD_VAR 0 6
44356: PPUSH
44357: CALL_OW 263
44361: PUSH
44362: LD_INT 2
44364: EQUAL
44365: IFFALSE 44416
// begin j := IsControledBy ( i ) ;
44367: LD_ADDR_VAR 0 7
44371: PUSH
44372: LD_VAR 0 6
44376: PPUSH
44377: CALL_OW 312
44381: ST_TO_ADDR
// if j then
44382: LD_VAR 0 7
44386: IFFALSE 44416
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44388: LD_ADDR_VAR 0 10
44392: PUSH
44393: LD_VAR 0 10
44397: PUSH
44398: LD_VAR 0 7
44402: PPUSH
44403: LD_INT 3
44405: PPUSH
44406: CALL_OW 259
44410: PUSH
44411: LD_INT 3
44413: MUL
44414: MUL
44415: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44416: LD_VAR 0 6
44420: PPUSH
44421: CALL_OW 264
44425: PUSH
44426: LD_INT 5
44428: PUSH
44429: LD_INT 6
44431: PUSH
44432: LD_INT 46
44434: PUSH
44435: LD_INT 44
44437: PUSH
44438: LD_INT 47
44440: PUSH
44441: LD_INT 45
44443: PUSH
44444: LD_INT 28
44446: PUSH
44447: LD_INT 7
44449: PUSH
44450: LD_INT 27
44452: PUSH
44453: LD_INT 29
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: IN
44468: PUSH
44469: LD_VAR 0 1
44473: PPUSH
44474: LD_INT 52
44476: PPUSH
44477: CALL_OW 321
44481: PUSH
44482: LD_INT 2
44484: EQUAL
44485: AND
44486: IFFALSE 44503
// bpoints := bpoints * 1.2 ;
44488: LD_ADDR_VAR 0 10
44492: PUSH
44493: LD_VAR 0 10
44497: PUSH
44498: LD_REAL  1.20000000000000E+0000
44501: MUL
44502: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44503: LD_VAR 0 6
44507: PPUSH
44508: CALL_OW 264
44512: PUSH
44513: LD_INT 6
44515: PUSH
44516: LD_INT 46
44518: PUSH
44519: LD_INT 47
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: LIST
44526: IN
44527: IFFALSE 44544
// bpoints := bpoints * 1.2 ;
44529: LD_ADDR_VAR 0 10
44533: PUSH
44534: LD_VAR 0 10
44538: PUSH
44539: LD_REAL  1.20000000000000E+0000
44542: MUL
44543: ST_TO_ADDR
// end ; unit_building :
44544: GO 44558
44546: LD_INT 3
44548: DOUBLE
44549: EQUAL
44550: IFTRUE 44554
44552: GO 44557
44554: POP
// ; end ;
44555: GO 44558
44557: POP
// for j = 1 to 3 do
44558: LD_ADDR_VAR 0 7
44562: PUSH
44563: DOUBLE
44564: LD_INT 1
44566: DEC
44567: ST_TO_ADDR
44568: LD_INT 3
44570: PUSH
44571: FOR_TO
44572: IFFALSE 44625
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44574: LD_ADDR_VAR 0 5
44578: PUSH
44579: LD_VAR 0 5
44583: PPUSH
44584: LD_VAR 0 7
44588: PPUSH
44589: LD_VAR 0 5
44593: PUSH
44594: LD_VAR 0 7
44598: ARRAY
44599: PUSH
44600: LD_VAR 0 9
44604: PUSH
44605: LD_VAR 0 7
44609: ARRAY
44610: PUSH
44611: LD_VAR 0 10
44615: MUL
44616: PLUS
44617: PPUSH
44618: CALL_OW 1
44622: ST_TO_ADDR
44623: GO 44571
44625: POP
44626: POP
// end ;
44627: GO 43104
44629: POP
44630: POP
// result := Replace ( result , 4 , tmp ) ;
44631: LD_ADDR_VAR 0 5
44635: PUSH
44636: LD_VAR 0 5
44640: PPUSH
44641: LD_INT 4
44643: PPUSH
44644: LD_VAR 0 8
44648: PPUSH
44649: CALL_OW 1
44653: ST_TO_ADDR
// end ;
44654: LD_VAR 0 5
44658: RET
// export function DangerAtRange ( unit , range ) ; begin
44659: LD_INT 0
44661: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44662: LD_ADDR_VAR 0 3
44666: PUSH
44667: LD_VAR 0 1
44671: PPUSH
44672: CALL_OW 255
44676: PPUSH
44677: LD_VAR 0 1
44681: PPUSH
44682: CALL_OW 250
44686: PPUSH
44687: LD_VAR 0 1
44691: PPUSH
44692: CALL_OW 251
44696: PPUSH
44697: LD_VAR 0 2
44701: PPUSH
44702: CALL 42956 0 4
44706: ST_TO_ADDR
// end ;
44707: LD_VAR 0 3
44711: RET
// export function DangerInArea ( side , area ) ; begin
44712: LD_INT 0
44714: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44715: LD_ADDR_VAR 0 3
44719: PUSH
44720: LD_VAR 0 2
44724: PPUSH
44725: LD_INT 81
44727: PUSH
44728: LD_VAR 0 1
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PPUSH
44737: CALL_OW 70
44741: ST_TO_ADDR
// end ;
44742: LD_VAR 0 3
44746: RET
// export function IsExtension ( b ) ; begin
44747: LD_INT 0
44749: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44750: LD_ADDR_VAR 0 2
44754: PUSH
44755: LD_VAR 0 1
44759: PUSH
44760: LD_INT 23
44762: PUSH
44763: LD_INT 20
44765: PUSH
44766: LD_INT 22
44768: PUSH
44769: LD_INT 17
44771: PUSH
44772: LD_INT 24
44774: PUSH
44775: LD_INT 21
44777: PUSH
44778: LD_INT 19
44780: PUSH
44781: LD_INT 16
44783: PUSH
44784: LD_INT 25
44786: PUSH
44787: LD_INT 18
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: IN
44802: ST_TO_ADDR
// end ;
44803: LD_VAR 0 2
44807: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
44808: LD_INT 0
44810: PPUSH
44811: PPUSH
44812: PPUSH
// result := [ ] ;
44813: LD_ADDR_VAR 0 4
44817: PUSH
44818: EMPTY
44819: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44820: LD_ADDR_VAR 0 5
44824: PUSH
44825: LD_VAR 0 2
44829: PPUSH
44830: LD_INT 21
44832: PUSH
44833: LD_INT 3
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PPUSH
44840: CALL_OW 70
44844: ST_TO_ADDR
// if not tmp then
44845: LD_VAR 0 5
44849: NOT
44850: IFFALSE 44854
// exit ;
44852: GO 44918
// if checkLink then
44854: LD_VAR 0 3
44858: IFFALSE 44908
// begin for i in tmp do
44860: LD_ADDR_VAR 0 6
44864: PUSH
44865: LD_VAR 0 5
44869: PUSH
44870: FOR_IN
44871: IFFALSE 44906
// if GetBase ( i ) <> base then
44873: LD_VAR 0 6
44877: PPUSH
44878: CALL_OW 274
44882: PUSH
44883: LD_VAR 0 1
44887: NONEQUAL
44888: IFFALSE 44904
// ComLinkToBase ( base , i ) ;
44890: LD_VAR 0 1
44894: PPUSH
44895: LD_VAR 0 6
44899: PPUSH
44900: CALL_OW 169
44904: GO 44870
44906: POP
44907: POP
// end ; result := tmp ;
44908: LD_ADDR_VAR 0 4
44912: PUSH
44913: LD_VAR 0 5
44917: ST_TO_ADDR
// end ;
44918: LD_VAR 0 4
44922: RET
// export function ComComplete ( units , b ) ; var i ; begin
44923: LD_INT 0
44925: PPUSH
44926: PPUSH
// if not units then
44927: LD_VAR 0 1
44931: NOT
44932: IFFALSE 44936
// exit ;
44934: GO 45026
// for i in units do
44936: LD_ADDR_VAR 0 4
44940: PUSH
44941: LD_VAR 0 1
44945: PUSH
44946: FOR_IN
44947: IFFALSE 45024
// if BuildingStatus ( b ) = bs_build then
44949: LD_VAR 0 2
44953: PPUSH
44954: CALL_OW 461
44958: PUSH
44959: LD_INT 1
44961: EQUAL
44962: IFFALSE 45022
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44964: LD_VAR 0 4
44968: PPUSH
44969: LD_STRING h
44971: PUSH
44972: LD_VAR 0 2
44976: PPUSH
44977: CALL_OW 250
44981: PUSH
44982: LD_VAR 0 2
44986: PPUSH
44987: CALL_OW 251
44991: PUSH
44992: LD_VAR 0 2
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: PUSH
45015: EMPTY
45016: LIST
45017: PPUSH
45018: CALL_OW 446
45022: GO 44946
45024: POP
45025: POP
// end ;
45026: LD_VAR 0 3
45030: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
45031: LD_INT 0
45033: PPUSH
45034: PPUSH
45035: PPUSH
45036: PPUSH
45037: PPUSH
45038: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
45039: LD_VAR 0 1
45043: NOT
45044: PUSH
45045: LD_VAR 0 1
45049: PPUSH
45050: CALL_OW 263
45054: PUSH
45055: LD_INT 2
45057: NONEQUAL
45058: OR
45059: IFFALSE 45063
// exit ;
45061: GO 45379
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
45063: LD_ADDR_VAR 0 6
45067: PUSH
45068: LD_INT 22
45070: PUSH
45071: LD_VAR 0 1
45075: PPUSH
45076: CALL_OW 255
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 2
45087: PUSH
45088: LD_INT 30
45090: PUSH
45091: LD_INT 36
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 34
45100: PUSH
45101: LD_INT 31
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: LIST
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PPUSH
45117: CALL_OW 69
45121: ST_TO_ADDR
// if not tmp then
45122: LD_VAR 0 6
45126: NOT
45127: IFFALSE 45131
// exit ;
45129: GO 45379
// result := [ ] ;
45131: LD_ADDR_VAR 0 2
45135: PUSH
45136: EMPTY
45137: ST_TO_ADDR
// for i in tmp do
45138: LD_ADDR_VAR 0 3
45142: PUSH
45143: LD_VAR 0 6
45147: PUSH
45148: FOR_IN
45149: IFFALSE 45220
// begin t := UnitsInside ( i ) ;
45151: LD_ADDR_VAR 0 4
45155: PUSH
45156: LD_VAR 0 3
45160: PPUSH
45161: CALL_OW 313
45165: ST_TO_ADDR
// if t then
45166: LD_VAR 0 4
45170: IFFALSE 45218
// for j in t do
45172: LD_ADDR_VAR 0 7
45176: PUSH
45177: LD_VAR 0 4
45181: PUSH
45182: FOR_IN
45183: IFFALSE 45216
// result := Replace ( result , result + 1 , j ) ;
45185: LD_ADDR_VAR 0 2
45189: PUSH
45190: LD_VAR 0 2
45194: PPUSH
45195: LD_VAR 0 2
45199: PUSH
45200: LD_INT 1
45202: PLUS
45203: PPUSH
45204: LD_VAR 0 7
45208: PPUSH
45209: CALL_OW 1
45213: ST_TO_ADDR
45214: GO 45182
45216: POP
45217: POP
// end ;
45218: GO 45148
45220: POP
45221: POP
// if not result then
45222: LD_VAR 0 2
45226: NOT
45227: IFFALSE 45231
// exit ;
45229: GO 45379
// mech := result [ 1 ] ;
45231: LD_ADDR_VAR 0 5
45235: PUSH
45236: LD_VAR 0 2
45240: PUSH
45241: LD_INT 1
45243: ARRAY
45244: ST_TO_ADDR
// if result > 1 then
45245: LD_VAR 0 2
45249: PUSH
45250: LD_INT 1
45252: GREATER
45253: IFFALSE 45365
// begin for i = 2 to result do
45255: LD_ADDR_VAR 0 3
45259: PUSH
45260: DOUBLE
45261: LD_INT 2
45263: DEC
45264: ST_TO_ADDR
45265: LD_VAR 0 2
45269: PUSH
45270: FOR_TO
45271: IFFALSE 45363
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
45273: LD_ADDR_VAR 0 4
45277: PUSH
45278: LD_VAR 0 2
45282: PUSH
45283: LD_VAR 0 3
45287: ARRAY
45288: PPUSH
45289: LD_INT 3
45291: PPUSH
45292: CALL_OW 259
45296: PUSH
45297: LD_VAR 0 2
45301: PUSH
45302: LD_VAR 0 3
45306: ARRAY
45307: PPUSH
45308: CALL_OW 432
45312: MINUS
45313: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
45314: LD_VAR 0 4
45318: PUSH
45319: LD_VAR 0 5
45323: PPUSH
45324: LD_INT 3
45326: PPUSH
45327: CALL_OW 259
45331: PUSH
45332: LD_VAR 0 5
45336: PPUSH
45337: CALL_OW 432
45341: MINUS
45342: GREATEREQUAL
45343: IFFALSE 45361
// mech := result [ i ] ;
45345: LD_ADDR_VAR 0 5
45349: PUSH
45350: LD_VAR 0 2
45354: PUSH
45355: LD_VAR 0 3
45359: ARRAY
45360: ST_TO_ADDR
// end ;
45361: GO 45270
45363: POP
45364: POP
// end ; ComLinkTo ( vehicle , mech ) ;
45365: LD_VAR 0 1
45369: PPUSH
45370: LD_VAR 0 5
45374: PPUSH
45375: CALL_OW 135
// end ;
45379: LD_VAR 0 2
45383: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45384: LD_INT 0
45386: PPUSH
45387: PPUSH
45388: PPUSH
45389: PPUSH
45390: PPUSH
45391: PPUSH
45392: PPUSH
45393: PPUSH
45394: PPUSH
45395: PPUSH
45396: PPUSH
45397: PPUSH
45398: PPUSH
// result := [ ] ;
45399: LD_ADDR_VAR 0 7
45403: PUSH
45404: EMPTY
45405: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45406: LD_VAR 0 1
45410: PPUSH
45411: CALL_OW 266
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: IN
45426: NOT
45427: IFFALSE 45431
// exit ;
45429: GO 47065
// if name then
45431: LD_VAR 0 3
45435: IFFALSE 45451
// SetBName ( base_dep , name ) ;
45437: LD_VAR 0 1
45441: PPUSH
45442: LD_VAR 0 3
45446: PPUSH
45447: CALL_OW 500
// base := GetBase ( base_dep ) ;
45451: LD_ADDR_VAR 0 15
45455: PUSH
45456: LD_VAR 0 1
45460: PPUSH
45461: CALL_OW 274
45465: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45466: LD_ADDR_VAR 0 16
45470: PUSH
45471: LD_VAR 0 1
45475: PPUSH
45476: CALL_OW 255
45480: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45481: LD_ADDR_VAR 0 17
45485: PUSH
45486: LD_VAR 0 1
45490: PPUSH
45491: CALL_OW 248
45495: ST_TO_ADDR
// if sources then
45496: LD_VAR 0 5
45500: IFFALSE 45547
// for i = 1 to 3 do
45502: LD_ADDR_VAR 0 8
45506: PUSH
45507: DOUBLE
45508: LD_INT 1
45510: DEC
45511: ST_TO_ADDR
45512: LD_INT 3
45514: PUSH
45515: FOR_TO
45516: IFFALSE 45545
// AddResourceType ( base , i , sources [ i ] ) ;
45518: LD_VAR 0 15
45522: PPUSH
45523: LD_VAR 0 8
45527: PPUSH
45528: LD_VAR 0 5
45532: PUSH
45533: LD_VAR 0 8
45537: ARRAY
45538: PPUSH
45539: CALL_OW 276
45543: GO 45515
45545: POP
45546: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
45547: LD_ADDR_VAR 0 18
45551: PUSH
45552: LD_VAR 0 15
45556: PPUSH
45557: LD_VAR 0 2
45561: PPUSH
45562: LD_INT 1
45564: PPUSH
45565: CALL 44808 0 3
45569: ST_TO_ADDR
// InitHc ;
45570: CALL_OW 19
// InitUc ;
45574: CALL_OW 18
// uc_side := side ;
45578: LD_ADDR_OWVAR 20
45582: PUSH
45583: LD_VAR 0 16
45587: ST_TO_ADDR
// uc_nation := nation ;
45588: LD_ADDR_OWVAR 21
45592: PUSH
45593: LD_VAR 0 17
45597: ST_TO_ADDR
// if buildings then
45598: LD_VAR 0 18
45602: IFFALSE 46924
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45604: LD_ADDR_VAR 0 19
45608: PUSH
45609: LD_VAR 0 18
45613: PPUSH
45614: LD_INT 2
45616: PUSH
45617: LD_INT 30
45619: PUSH
45620: LD_INT 29
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 30
45629: PUSH
45630: LD_INT 30
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: LIST
45641: PPUSH
45642: CALL_OW 72
45646: ST_TO_ADDR
// if tmp then
45647: LD_VAR 0 19
45651: IFFALSE 45699
// for i in tmp do
45653: LD_ADDR_VAR 0 8
45657: PUSH
45658: LD_VAR 0 19
45662: PUSH
45663: FOR_IN
45664: IFFALSE 45697
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45666: LD_VAR 0 8
45670: PPUSH
45671: CALL_OW 250
45675: PPUSH
45676: LD_VAR 0 8
45680: PPUSH
45681: CALL_OW 251
45685: PPUSH
45686: LD_VAR 0 16
45690: PPUSH
45691: CALL_OW 441
45695: GO 45663
45697: POP
45698: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45699: LD_VAR 0 18
45703: PPUSH
45704: LD_INT 2
45706: PUSH
45707: LD_INT 30
45709: PUSH
45710: LD_INT 32
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 30
45719: PUSH
45720: LD_INT 33
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: LIST
45731: PPUSH
45732: CALL_OW 72
45736: IFFALSE 45824
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45738: LD_ADDR_VAR 0 8
45742: PUSH
45743: LD_VAR 0 18
45747: PPUSH
45748: LD_INT 2
45750: PUSH
45751: LD_INT 30
45753: PUSH
45754: LD_INT 32
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 30
45763: PUSH
45764: LD_INT 33
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: LIST
45775: PPUSH
45776: CALL_OW 72
45780: PUSH
45781: FOR_IN
45782: IFFALSE 45822
// begin if not GetBWeapon ( i ) then
45784: LD_VAR 0 8
45788: PPUSH
45789: CALL_OW 269
45793: NOT
45794: IFFALSE 45820
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45796: LD_VAR 0 8
45800: PPUSH
45801: LD_VAR 0 8
45805: PPUSH
45806: LD_VAR 0 2
45810: PPUSH
45811: CALL 47070 0 2
45815: PPUSH
45816: CALL_OW 431
// end ;
45820: GO 45781
45822: POP
45823: POP
// end ; for i = 1 to personel do
45824: LD_ADDR_VAR 0 8
45828: PUSH
45829: DOUBLE
45830: LD_INT 1
45832: DEC
45833: ST_TO_ADDR
45834: LD_VAR 0 6
45838: PUSH
45839: FOR_TO
45840: IFFALSE 46904
// begin if i > 4 then
45842: LD_VAR 0 8
45846: PUSH
45847: LD_INT 4
45849: GREATER
45850: IFFALSE 45854
// break ;
45852: GO 46904
// case i of 1 :
45854: LD_VAR 0 8
45858: PUSH
45859: LD_INT 1
45861: DOUBLE
45862: EQUAL
45863: IFTRUE 45867
45865: GO 45947
45867: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45868: LD_ADDR_VAR 0 12
45872: PUSH
45873: LD_VAR 0 18
45877: PPUSH
45878: LD_INT 22
45880: PUSH
45881: LD_VAR 0 16
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 58
45892: PUSH
45893: EMPTY
45894: LIST
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: LD_INT 30
45901: PUSH
45902: LD_INT 32
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 30
45911: PUSH
45912: LD_INT 4
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 30
45921: PUSH
45922: LD_INT 5
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: LIST
45939: PPUSH
45940: CALL_OW 72
45944: ST_TO_ADDR
45945: GO 46169
45947: LD_INT 2
45949: DOUBLE
45950: EQUAL
45951: IFTRUE 45955
45953: GO 46017
45955: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45956: LD_ADDR_VAR 0 12
45960: PUSH
45961: LD_VAR 0 18
45965: PPUSH
45966: LD_INT 22
45968: PUSH
45969: LD_VAR 0 16
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: LD_INT 30
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 30
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: LIST
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PPUSH
46010: CALL_OW 72
46014: ST_TO_ADDR
46015: GO 46169
46017: LD_INT 3
46019: DOUBLE
46020: EQUAL
46021: IFTRUE 46025
46023: GO 46087
46025: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
46026: LD_ADDR_VAR 0 12
46030: PUSH
46031: LD_VAR 0 18
46035: PPUSH
46036: LD_INT 22
46038: PUSH
46039: LD_VAR 0 16
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 2
46050: PUSH
46051: LD_INT 30
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 30
46063: PUSH
46064: LD_INT 3
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: LIST
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PPUSH
46080: CALL_OW 72
46084: ST_TO_ADDR
46085: GO 46169
46087: LD_INT 4
46089: DOUBLE
46090: EQUAL
46091: IFTRUE 46095
46093: GO 46168
46095: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
46096: LD_ADDR_VAR 0 12
46100: PUSH
46101: LD_VAR 0 18
46105: PPUSH
46106: LD_INT 22
46108: PUSH
46109: LD_VAR 0 16
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: LD_INT 30
46123: PUSH
46124: LD_INT 6
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 30
46133: PUSH
46134: LD_INT 7
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 30
46143: PUSH
46144: LD_INT 8
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PPUSH
46161: CALL_OW 72
46165: ST_TO_ADDR
46166: GO 46169
46168: POP
// if i = 1 then
46169: LD_VAR 0 8
46173: PUSH
46174: LD_INT 1
46176: EQUAL
46177: IFFALSE 46288
// begin tmp := [ ] ;
46179: LD_ADDR_VAR 0 19
46183: PUSH
46184: EMPTY
46185: ST_TO_ADDR
// for j in f do
46186: LD_ADDR_VAR 0 9
46190: PUSH
46191: LD_VAR 0 12
46195: PUSH
46196: FOR_IN
46197: IFFALSE 46270
// if GetBType ( j ) = b_bunker then
46199: LD_VAR 0 9
46203: PPUSH
46204: CALL_OW 266
46208: PUSH
46209: LD_INT 32
46211: EQUAL
46212: IFFALSE 46239
// tmp := Insert ( tmp , 1 , j ) else
46214: LD_ADDR_VAR 0 19
46218: PUSH
46219: LD_VAR 0 19
46223: PPUSH
46224: LD_INT 1
46226: PPUSH
46227: LD_VAR 0 9
46231: PPUSH
46232: CALL_OW 2
46236: ST_TO_ADDR
46237: GO 46268
// tmp := Insert ( tmp , tmp + 1 , j ) ;
46239: LD_ADDR_VAR 0 19
46243: PUSH
46244: LD_VAR 0 19
46248: PPUSH
46249: LD_VAR 0 19
46253: PUSH
46254: LD_INT 1
46256: PLUS
46257: PPUSH
46258: LD_VAR 0 9
46262: PPUSH
46263: CALL_OW 2
46267: ST_TO_ADDR
46268: GO 46196
46270: POP
46271: POP
// if tmp then
46272: LD_VAR 0 19
46276: IFFALSE 46288
// f := tmp ;
46278: LD_ADDR_VAR 0 12
46282: PUSH
46283: LD_VAR 0 19
46287: ST_TO_ADDR
// end ; x := personel [ i ] ;
46288: LD_ADDR_VAR 0 13
46292: PUSH
46293: LD_VAR 0 6
46297: PUSH
46298: LD_VAR 0 8
46302: ARRAY
46303: ST_TO_ADDR
// if x = - 1 then
46304: LD_VAR 0 13
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: EQUAL
46313: IFFALSE 46522
// begin for j in f do
46315: LD_ADDR_VAR 0 9
46319: PUSH
46320: LD_VAR 0 12
46324: PUSH
46325: FOR_IN
46326: IFFALSE 46518
// repeat InitHc ;
46328: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46332: LD_VAR 0 9
46336: PPUSH
46337: CALL_OW 266
46341: PUSH
46342: LD_INT 5
46344: EQUAL
46345: IFFALSE 46415
// begin if UnitsInside ( j ) < 3 then
46347: LD_VAR 0 9
46351: PPUSH
46352: CALL_OW 313
46356: PUSH
46357: LD_INT 3
46359: LESS
46360: IFFALSE 46396
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46362: LD_INT 0
46364: PPUSH
46365: LD_INT 5
46367: PUSH
46368: LD_INT 8
46370: PUSH
46371: LD_INT 9
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: LIST
46378: PUSH
46379: LD_VAR 0 17
46383: ARRAY
46384: PPUSH
46385: LD_VAR 0 4
46389: PPUSH
46390: CALL_OW 380
46394: GO 46413
// PrepareHuman ( false , i , skill ) ;
46396: LD_INT 0
46398: PPUSH
46399: LD_VAR 0 8
46403: PPUSH
46404: LD_VAR 0 4
46408: PPUSH
46409: CALL_OW 380
// end else
46413: GO 46432
// PrepareHuman ( false , i , skill ) ;
46415: LD_INT 0
46417: PPUSH
46418: LD_VAR 0 8
46422: PPUSH
46423: LD_VAR 0 4
46427: PPUSH
46428: CALL_OW 380
// un := CreateHuman ;
46432: LD_ADDR_VAR 0 14
46436: PUSH
46437: CALL_OW 44
46441: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46442: LD_ADDR_VAR 0 7
46446: PUSH
46447: LD_VAR 0 7
46451: PPUSH
46452: LD_INT 1
46454: PPUSH
46455: LD_VAR 0 14
46459: PPUSH
46460: CALL_OW 2
46464: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46465: LD_VAR 0 14
46469: PPUSH
46470: LD_VAR 0 9
46474: PPUSH
46475: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46479: LD_VAR 0 9
46483: PPUSH
46484: CALL_OW 313
46488: PUSH
46489: LD_INT 6
46491: EQUAL
46492: PUSH
46493: LD_VAR 0 9
46497: PPUSH
46498: CALL_OW 266
46502: PUSH
46503: LD_INT 32
46505: PUSH
46506: LD_INT 31
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: IN
46513: OR
46514: IFFALSE 46328
46516: GO 46325
46518: POP
46519: POP
// end else
46520: GO 46902
// for j = 1 to x do
46522: LD_ADDR_VAR 0 9
46526: PUSH
46527: DOUBLE
46528: LD_INT 1
46530: DEC
46531: ST_TO_ADDR
46532: LD_VAR 0 13
46536: PUSH
46537: FOR_TO
46538: IFFALSE 46900
// begin InitHc ;
46540: CALL_OW 19
// if not f then
46544: LD_VAR 0 12
46548: NOT
46549: IFFALSE 46638
// begin PrepareHuman ( false , i , skill ) ;
46551: LD_INT 0
46553: PPUSH
46554: LD_VAR 0 8
46558: PPUSH
46559: LD_VAR 0 4
46563: PPUSH
46564: CALL_OW 380
// un := CreateHuman ;
46568: LD_ADDR_VAR 0 14
46572: PUSH
46573: CALL_OW 44
46577: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46578: LD_ADDR_VAR 0 7
46582: PUSH
46583: LD_VAR 0 7
46587: PPUSH
46588: LD_INT 1
46590: PPUSH
46591: LD_VAR 0 14
46595: PPUSH
46596: CALL_OW 2
46600: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46601: LD_VAR 0 14
46605: PPUSH
46606: LD_VAR 0 1
46610: PPUSH
46611: CALL_OW 250
46615: PPUSH
46616: LD_VAR 0 1
46620: PPUSH
46621: CALL_OW 251
46625: PPUSH
46626: LD_INT 10
46628: PPUSH
46629: LD_INT 0
46631: PPUSH
46632: CALL_OW 50
// continue ;
46636: GO 46537
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46638: LD_VAR 0 12
46642: PUSH
46643: LD_INT 1
46645: ARRAY
46646: PPUSH
46647: CALL_OW 313
46651: PUSH
46652: LD_VAR 0 12
46656: PUSH
46657: LD_INT 1
46659: ARRAY
46660: PPUSH
46661: CALL_OW 266
46665: PUSH
46666: LD_INT 32
46668: PUSH
46669: LD_INT 31
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: IN
46676: AND
46677: PUSH
46678: LD_VAR 0 12
46682: PUSH
46683: LD_INT 1
46685: ARRAY
46686: PPUSH
46687: CALL_OW 313
46691: PUSH
46692: LD_INT 6
46694: EQUAL
46695: OR
46696: IFFALSE 46716
// f := Delete ( f , 1 ) ;
46698: LD_ADDR_VAR 0 12
46702: PUSH
46703: LD_VAR 0 12
46707: PPUSH
46708: LD_INT 1
46710: PPUSH
46711: CALL_OW 3
46715: ST_TO_ADDR
// if not f then
46716: LD_VAR 0 12
46720: NOT
46721: IFFALSE 46739
// begin x := x + 2 ;
46723: LD_ADDR_VAR 0 13
46727: PUSH
46728: LD_VAR 0 13
46732: PUSH
46733: LD_INT 2
46735: PLUS
46736: ST_TO_ADDR
// continue ;
46737: GO 46537
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46739: LD_VAR 0 12
46743: PUSH
46744: LD_INT 1
46746: ARRAY
46747: PPUSH
46748: CALL_OW 266
46752: PUSH
46753: LD_INT 5
46755: EQUAL
46756: IFFALSE 46830
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46758: LD_VAR 0 12
46762: PUSH
46763: LD_INT 1
46765: ARRAY
46766: PPUSH
46767: CALL_OW 313
46771: PUSH
46772: LD_INT 3
46774: LESS
46775: IFFALSE 46811
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46777: LD_INT 0
46779: PPUSH
46780: LD_INT 5
46782: PUSH
46783: LD_INT 8
46785: PUSH
46786: LD_INT 9
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: LIST
46793: PUSH
46794: LD_VAR 0 17
46798: ARRAY
46799: PPUSH
46800: LD_VAR 0 4
46804: PPUSH
46805: CALL_OW 380
46809: GO 46828
// PrepareHuman ( false , i , skill ) ;
46811: LD_INT 0
46813: PPUSH
46814: LD_VAR 0 8
46818: PPUSH
46819: LD_VAR 0 4
46823: PPUSH
46824: CALL_OW 380
// end else
46828: GO 46847
// PrepareHuman ( false , i , skill ) ;
46830: LD_INT 0
46832: PPUSH
46833: LD_VAR 0 8
46837: PPUSH
46838: LD_VAR 0 4
46842: PPUSH
46843: CALL_OW 380
// un := CreateHuman ;
46847: LD_ADDR_VAR 0 14
46851: PUSH
46852: CALL_OW 44
46856: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46857: LD_ADDR_VAR 0 7
46861: PUSH
46862: LD_VAR 0 7
46866: PPUSH
46867: LD_INT 1
46869: PPUSH
46870: LD_VAR 0 14
46874: PPUSH
46875: CALL_OW 2
46879: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46880: LD_VAR 0 14
46884: PPUSH
46885: LD_VAR 0 12
46889: PUSH
46890: LD_INT 1
46892: ARRAY
46893: PPUSH
46894: CALL_OW 52
// end ;
46898: GO 46537
46900: POP
46901: POP
// end ;
46902: GO 45839
46904: POP
46905: POP
// result := result ^ buildings ;
46906: LD_ADDR_VAR 0 7
46910: PUSH
46911: LD_VAR 0 7
46915: PUSH
46916: LD_VAR 0 18
46920: ADD
46921: ST_TO_ADDR
// end else
46922: GO 47065
// begin for i = 1 to personel do
46924: LD_ADDR_VAR 0 8
46928: PUSH
46929: DOUBLE
46930: LD_INT 1
46932: DEC
46933: ST_TO_ADDR
46934: LD_VAR 0 6
46938: PUSH
46939: FOR_TO
46940: IFFALSE 47063
// begin if i > 4 then
46942: LD_VAR 0 8
46946: PUSH
46947: LD_INT 4
46949: GREATER
46950: IFFALSE 46954
// break ;
46952: GO 47063
// x := personel [ i ] ;
46954: LD_ADDR_VAR 0 13
46958: PUSH
46959: LD_VAR 0 6
46963: PUSH
46964: LD_VAR 0 8
46968: ARRAY
46969: ST_TO_ADDR
// if x = - 1 then
46970: LD_VAR 0 13
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: EQUAL
46979: IFFALSE 46983
// continue ;
46981: GO 46939
// PrepareHuman ( false , i , skill ) ;
46983: LD_INT 0
46985: PPUSH
46986: LD_VAR 0 8
46990: PPUSH
46991: LD_VAR 0 4
46995: PPUSH
46996: CALL_OW 380
// un := CreateHuman ;
47000: LD_ADDR_VAR 0 14
47004: PUSH
47005: CALL_OW 44
47009: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47010: LD_VAR 0 14
47014: PPUSH
47015: LD_VAR 0 1
47019: PPUSH
47020: CALL_OW 250
47024: PPUSH
47025: LD_VAR 0 1
47029: PPUSH
47030: CALL_OW 251
47034: PPUSH
47035: LD_INT 10
47037: PPUSH
47038: LD_INT 0
47040: PPUSH
47041: CALL_OW 50
// result := result ^ un ;
47045: LD_ADDR_VAR 0 7
47049: PUSH
47050: LD_VAR 0 7
47054: PUSH
47055: LD_VAR 0 14
47059: ADD
47060: ST_TO_ADDR
// end ;
47061: GO 46939
47063: POP
47064: POP
// end ; end ;
47065: LD_VAR 0 7
47069: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
47070: LD_INT 0
47072: PPUSH
47073: PPUSH
47074: PPUSH
47075: PPUSH
47076: PPUSH
47077: PPUSH
47078: PPUSH
47079: PPUSH
47080: PPUSH
47081: PPUSH
47082: PPUSH
47083: PPUSH
47084: PPUSH
47085: PPUSH
47086: PPUSH
47087: PPUSH
// result := false ;
47088: LD_ADDR_VAR 0 3
47092: PUSH
47093: LD_INT 0
47095: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
47096: LD_VAR 0 1
47100: NOT
47101: PUSH
47102: LD_VAR 0 1
47106: PPUSH
47107: CALL_OW 266
47111: PUSH
47112: LD_INT 32
47114: PUSH
47115: LD_INT 33
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: IN
47122: NOT
47123: OR
47124: IFFALSE 47128
// exit ;
47126: GO 48237
// nat := GetNation ( tower ) ;
47128: LD_ADDR_VAR 0 12
47132: PUSH
47133: LD_VAR 0 1
47137: PPUSH
47138: CALL_OW 248
47142: ST_TO_ADDR
// side := GetSide ( tower ) ;
47143: LD_ADDR_VAR 0 16
47147: PUSH
47148: LD_VAR 0 1
47152: PPUSH
47153: CALL_OW 255
47157: ST_TO_ADDR
// x := GetX ( tower ) ;
47158: LD_ADDR_VAR 0 10
47162: PUSH
47163: LD_VAR 0 1
47167: PPUSH
47168: CALL_OW 250
47172: ST_TO_ADDR
// y := GetY ( tower ) ;
47173: LD_ADDR_VAR 0 11
47177: PUSH
47178: LD_VAR 0 1
47182: PPUSH
47183: CALL_OW 251
47187: ST_TO_ADDR
// if not x or not y then
47188: LD_VAR 0 10
47192: NOT
47193: PUSH
47194: LD_VAR 0 11
47198: NOT
47199: OR
47200: IFFALSE 47204
// exit ;
47202: GO 48237
// weapon := 0 ;
47204: LD_ADDR_VAR 0 18
47208: PUSH
47209: LD_INT 0
47211: ST_TO_ADDR
// fac_list := [ ] ;
47212: LD_ADDR_VAR 0 17
47216: PUSH
47217: EMPTY
47218: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
47219: LD_ADDR_VAR 0 6
47223: PUSH
47224: LD_VAR 0 1
47228: PPUSH
47229: CALL_OW 274
47233: PPUSH
47234: LD_VAR 0 2
47238: PPUSH
47239: LD_INT 0
47241: PPUSH
47242: CALL 44808 0 3
47246: PPUSH
47247: LD_INT 30
47249: PUSH
47250: LD_INT 3
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PPUSH
47257: CALL_OW 72
47261: ST_TO_ADDR
// if not factories then
47262: LD_VAR 0 6
47266: NOT
47267: IFFALSE 47271
// exit ;
47269: GO 48237
// for i in factories do
47271: LD_ADDR_VAR 0 8
47275: PUSH
47276: LD_VAR 0 6
47280: PUSH
47281: FOR_IN
47282: IFFALSE 47307
// fac_list := fac_list union AvailableWeaponList ( i ) ;
47284: LD_ADDR_VAR 0 17
47288: PUSH
47289: LD_VAR 0 17
47293: PUSH
47294: LD_VAR 0 8
47298: PPUSH
47299: CALL_OW 478
47303: UNION
47304: ST_TO_ADDR
47305: GO 47281
47307: POP
47308: POP
// if not fac_list then
47309: LD_VAR 0 17
47313: NOT
47314: IFFALSE 47318
// exit ;
47316: GO 48237
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
47318: LD_ADDR_VAR 0 5
47322: PUSH
47323: LD_INT 4
47325: PUSH
47326: LD_INT 5
47328: PUSH
47329: LD_INT 9
47331: PUSH
47332: LD_INT 10
47334: PUSH
47335: LD_INT 6
47337: PUSH
47338: LD_INT 7
47340: PUSH
47341: LD_INT 11
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 27
47355: PUSH
47356: LD_INT 28
47358: PUSH
47359: LD_INT 26
47361: PUSH
47362: LD_INT 30
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 43
47373: PUSH
47374: LD_INT 44
47376: PUSH
47377: LD_INT 46
47379: PUSH
47380: LD_INT 45
47382: PUSH
47383: LD_INT 47
47385: PUSH
47386: LD_INT 49
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: LIST
47401: PUSH
47402: LD_VAR 0 12
47406: ARRAY
47407: ST_TO_ADDR
// list := list isect fac_list ;
47408: LD_ADDR_VAR 0 5
47412: PUSH
47413: LD_VAR 0 5
47417: PUSH
47418: LD_VAR 0 17
47422: ISECT
47423: ST_TO_ADDR
// if not list then
47424: LD_VAR 0 5
47428: NOT
47429: IFFALSE 47433
// exit ;
47431: GO 48237
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47433: LD_VAR 0 12
47437: PUSH
47438: LD_INT 3
47440: EQUAL
47441: PUSH
47442: LD_INT 49
47444: PUSH
47445: LD_VAR 0 5
47449: IN
47450: AND
47451: PUSH
47452: LD_INT 31
47454: PPUSH
47455: LD_VAR 0 16
47459: PPUSH
47460: CALL_OW 321
47464: PUSH
47465: LD_INT 2
47467: EQUAL
47468: AND
47469: IFFALSE 47529
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47471: LD_INT 22
47473: PUSH
47474: LD_VAR 0 16
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 35
47485: PUSH
47486: LD_INT 49
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 91
47495: PUSH
47496: LD_VAR 0 1
47500: PUSH
47501: LD_INT 10
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: LIST
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: LIST
47513: PPUSH
47514: CALL_OW 69
47518: NOT
47519: IFFALSE 47529
// weapon := ru_time_lapser ;
47521: LD_ADDR_VAR 0 18
47525: PUSH
47526: LD_INT 49
47528: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47529: LD_VAR 0 12
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 2
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: IN
47544: PUSH
47545: LD_INT 11
47547: PUSH
47548: LD_VAR 0 5
47552: IN
47553: PUSH
47554: LD_INT 30
47556: PUSH
47557: LD_VAR 0 5
47561: IN
47562: OR
47563: AND
47564: PUSH
47565: LD_INT 6
47567: PPUSH
47568: LD_VAR 0 16
47572: PPUSH
47573: CALL_OW 321
47577: PUSH
47578: LD_INT 2
47580: EQUAL
47581: AND
47582: IFFALSE 47747
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47584: LD_INT 22
47586: PUSH
47587: LD_VAR 0 16
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: LD_INT 35
47601: PUSH
47602: LD_INT 11
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 35
47611: PUSH
47612: LD_INT 30
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 91
47626: PUSH
47627: LD_VAR 0 1
47631: PUSH
47632: LD_INT 18
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: LIST
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: PPUSH
47645: CALL_OW 69
47649: NOT
47650: PUSH
47651: LD_INT 22
47653: PUSH
47654: LD_VAR 0 16
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: LD_INT 30
47668: PUSH
47669: LD_INT 32
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 30
47678: PUSH
47679: LD_INT 33
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 91
47693: PUSH
47694: LD_VAR 0 1
47698: PUSH
47699: LD_INT 12
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: LIST
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: LIST
47711: PUSH
47712: EMPTY
47713: LIST
47714: PPUSH
47715: CALL_OW 69
47719: PUSH
47720: LD_INT 2
47722: GREATER
47723: AND
47724: IFFALSE 47747
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47726: LD_ADDR_VAR 0 18
47730: PUSH
47731: LD_INT 11
47733: PUSH
47734: LD_INT 30
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_VAR 0 12
47745: ARRAY
47746: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47747: LD_VAR 0 18
47751: NOT
47752: PUSH
47753: LD_INT 40
47755: PPUSH
47756: LD_VAR 0 16
47760: PPUSH
47761: CALL_OW 321
47765: PUSH
47766: LD_INT 2
47768: EQUAL
47769: AND
47770: PUSH
47771: LD_INT 7
47773: PUSH
47774: LD_VAR 0 5
47778: IN
47779: PUSH
47780: LD_INT 28
47782: PUSH
47783: LD_VAR 0 5
47787: IN
47788: OR
47789: PUSH
47790: LD_INT 45
47792: PUSH
47793: LD_VAR 0 5
47797: IN
47798: OR
47799: AND
47800: IFFALSE 48054
// begin hex := GetHexInfo ( x , y ) ;
47802: LD_ADDR_VAR 0 4
47806: PUSH
47807: LD_VAR 0 10
47811: PPUSH
47812: LD_VAR 0 11
47816: PPUSH
47817: CALL_OW 546
47821: ST_TO_ADDR
// if hex [ 1 ] then
47822: LD_VAR 0 4
47826: PUSH
47827: LD_INT 1
47829: ARRAY
47830: IFFALSE 47834
// exit ;
47832: GO 48237
// height := hex [ 2 ] ;
47834: LD_ADDR_VAR 0 15
47838: PUSH
47839: LD_VAR 0 4
47843: PUSH
47844: LD_INT 2
47846: ARRAY
47847: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47848: LD_ADDR_VAR 0 14
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: LD_INT 3
47861: PUSH
47862: LD_INT 5
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: ST_TO_ADDR
// for i in tmp do
47871: LD_ADDR_VAR 0 8
47875: PUSH
47876: LD_VAR 0 14
47880: PUSH
47881: FOR_IN
47882: IFFALSE 48052
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47884: LD_ADDR_VAR 0 9
47888: PUSH
47889: LD_VAR 0 10
47893: PPUSH
47894: LD_VAR 0 8
47898: PPUSH
47899: LD_INT 5
47901: PPUSH
47902: CALL_OW 272
47906: PUSH
47907: LD_VAR 0 11
47911: PPUSH
47912: LD_VAR 0 8
47916: PPUSH
47917: LD_INT 5
47919: PPUSH
47920: CALL_OW 273
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47929: LD_VAR 0 9
47933: PUSH
47934: LD_INT 1
47936: ARRAY
47937: PPUSH
47938: LD_VAR 0 9
47942: PUSH
47943: LD_INT 2
47945: ARRAY
47946: PPUSH
47947: CALL_OW 488
47951: IFFALSE 48050
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47953: LD_ADDR_VAR 0 4
47957: PUSH
47958: LD_VAR 0 9
47962: PUSH
47963: LD_INT 1
47965: ARRAY
47966: PPUSH
47967: LD_VAR 0 9
47971: PUSH
47972: LD_INT 2
47974: ARRAY
47975: PPUSH
47976: CALL_OW 546
47980: ST_TO_ADDR
// if hex [ 1 ] then
47981: LD_VAR 0 4
47985: PUSH
47986: LD_INT 1
47988: ARRAY
47989: IFFALSE 47993
// continue ;
47991: GO 47881
// h := hex [ 2 ] ;
47993: LD_ADDR_VAR 0 13
47997: PUSH
47998: LD_VAR 0 4
48002: PUSH
48003: LD_INT 2
48005: ARRAY
48006: ST_TO_ADDR
// if h + 7 < height then
48007: LD_VAR 0 13
48011: PUSH
48012: LD_INT 7
48014: PLUS
48015: PUSH
48016: LD_VAR 0 15
48020: LESS
48021: IFFALSE 48050
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
48023: LD_ADDR_VAR 0 18
48027: PUSH
48028: LD_INT 7
48030: PUSH
48031: LD_INT 28
48033: PUSH
48034: LD_INT 45
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: LIST
48041: PUSH
48042: LD_VAR 0 12
48046: ARRAY
48047: ST_TO_ADDR
// break ;
48048: GO 48052
// end ; end ; end ;
48050: GO 47881
48052: POP
48053: POP
// end ; if not weapon then
48054: LD_VAR 0 18
48058: NOT
48059: IFFALSE 48119
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
48061: LD_ADDR_VAR 0 5
48065: PUSH
48066: LD_VAR 0 5
48070: PUSH
48071: LD_INT 11
48073: PUSH
48074: LD_INT 30
48076: PUSH
48077: LD_INT 49
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: LIST
48084: DIFF
48085: ST_TO_ADDR
// if not list then
48086: LD_VAR 0 5
48090: NOT
48091: IFFALSE 48095
// exit ;
48093: GO 48237
// weapon := list [ rand ( 1 , list ) ] ;
48095: LD_ADDR_VAR 0 18
48099: PUSH
48100: LD_VAR 0 5
48104: PUSH
48105: LD_INT 1
48107: PPUSH
48108: LD_VAR 0 5
48112: PPUSH
48113: CALL_OW 12
48117: ARRAY
48118: ST_TO_ADDR
// end ; if weapon then
48119: LD_VAR 0 18
48123: IFFALSE 48237
// begin tmp := CostOfWeapon ( weapon ) ;
48125: LD_ADDR_VAR 0 14
48129: PUSH
48130: LD_VAR 0 18
48134: PPUSH
48135: CALL_OW 451
48139: ST_TO_ADDR
// j := GetBase ( tower ) ;
48140: LD_ADDR_VAR 0 9
48144: PUSH
48145: LD_VAR 0 1
48149: PPUSH
48150: CALL_OW 274
48154: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
48155: LD_VAR 0 9
48159: PPUSH
48160: LD_INT 1
48162: PPUSH
48163: CALL_OW 275
48167: PUSH
48168: LD_VAR 0 14
48172: PUSH
48173: LD_INT 1
48175: ARRAY
48176: GREATEREQUAL
48177: PUSH
48178: LD_VAR 0 9
48182: PPUSH
48183: LD_INT 2
48185: PPUSH
48186: CALL_OW 275
48190: PUSH
48191: LD_VAR 0 14
48195: PUSH
48196: LD_INT 2
48198: ARRAY
48199: GREATEREQUAL
48200: AND
48201: PUSH
48202: LD_VAR 0 9
48206: PPUSH
48207: LD_INT 3
48209: PPUSH
48210: CALL_OW 275
48214: PUSH
48215: LD_VAR 0 14
48219: PUSH
48220: LD_INT 3
48222: ARRAY
48223: GREATEREQUAL
48224: AND
48225: IFFALSE 48237
// result := weapon ;
48227: LD_ADDR_VAR 0 3
48231: PUSH
48232: LD_VAR 0 18
48236: ST_TO_ADDR
// end ; end ;
48237: LD_VAR 0 3
48241: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
48242: LD_INT 0
48244: PPUSH
48245: PPUSH
// result := true ;
48246: LD_ADDR_VAR 0 3
48250: PUSH
48251: LD_INT 1
48253: ST_TO_ADDR
// if array1 = array2 then
48254: LD_VAR 0 1
48258: PUSH
48259: LD_VAR 0 2
48263: EQUAL
48264: IFFALSE 48324
// begin for i = 1 to array1 do
48266: LD_ADDR_VAR 0 4
48270: PUSH
48271: DOUBLE
48272: LD_INT 1
48274: DEC
48275: ST_TO_ADDR
48276: LD_VAR 0 1
48280: PUSH
48281: FOR_TO
48282: IFFALSE 48320
// if array1 [ i ] <> array2 [ i ] then
48284: LD_VAR 0 1
48288: PUSH
48289: LD_VAR 0 4
48293: ARRAY
48294: PUSH
48295: LD_VAR 0 2
48299: PUSH
48300: LD_VAR 0 4
48304: ARRAY
48305: NONEQUAL
48306: IFFALSE 48318
// begin result := false ;
48308: LD_ADDR_VAR 0 3
48312: PUSH
48313: LD_INT 0
48315: ST_TO_ADDR
// break ;
48316: GO 48320
// end ;
48318: GO 48281
48320: POP
48321: POP
// end else
48322: GO 48332
// result := false ;
48324: LD_ADDR_VAR 0 3
48328: PUSH
48329: LD_INT 0
48331: ST_TO_ADDR
// end ;
48332: LD_VAR 0 3
48336: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
48337: LD_INT 0
48339: PPUSH
48340: PPUSH
// if not array1 or not array2 then
48341: LD_VAR 0 1
48345: NOT
48346: PUSH
48347: LD_VAR 0 2
48351: NOT
48352: OR
48353: IFFALSE 48357
// exit ;
48355: GO 48421
// result := true ;
48357: LD_ADDR_VAR 0 3
48361: PUSH
48362: LD_INT 1
48364: ST_TO_ADDR
// for i = 1 to array1 do
48365: LD_ADDR_VAR 0 4
48369: PUSH
48370: DOUBLE
48371: LD_INT 1
48373: DEC
48374: ST_TO_ADDR
48375: LD_VAR 0 1
48379: PUSH
48380: FOR_TO
48381: IFFALSE 48419
// if array1 [ i ] <> array2 [ i ] then
48383: LD_VAR 0 1
48387: PUSH
48388: LD_VAR 0 4
48392: ARRAY
48393: PUSH
48394: LD_VAR 0 2
48398: PUSH
48399: LD_VAR 0 4
48403: ARRAY
48404: NONEQUAL
48405: IFFALSE 48417
// begin result := false ;
48407: LD_ADDR_VAR 0 3
48411: PUSH
48412: LD_INT 0
48414: ST_TO_ADDR
// break ;
48415: GO 48419
// end ;
48417: GO 48380
48419: POP
48420: POP
// end ;
48421: LD_VAR 0 3
48425: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48426: LD_INT 0
48428: PPUSH
48429: PPUSH
48430: PPUSH
// pom := GetBase ( fac ) ;
48431: LD_ADDR_VAR 0 5
48435: PUSH
48436: LD_VAR 0 1
48440: PPUSH
48441: CALL_OW 274
48445: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48446: LD_ADDR_VAR 0 4
48450: PUSH
48451: LD_VAR 0 2
48455: PUSH
48456: LD_INT 1
48458: ARRAY
48459: PPUSH
48460: LD_VAR 0 2
48464: PUSH
48465: LD_INT 2
48467: ARRAY
48468: PPUSH
48469: LD_VAR 0 2
48473: PUSH
48474: LD_INT 3
48476: ARRAY
48477: PPUSH
48478: LD_VAR 0 2
48482: PUSH
48483: LD_INT 4
48485: ARRAY
48486: PPUSH
48487: CALL_OW 449
48491: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48492: LD_ADDR_VAR 0 3
48496: PUSH
48497: LD_VAR 0 5
48501: PPUSH
48502: LD_INT 1
48504: PPUSH
48505: CALL_OW 275
48509: PUSH
48510: LD_VAR 0 4
48514: PUSH
48515: LD_INT 1
48517: ARRAY
48518: GREATEREQUAL
48519: PUSH
48520: LD_VAR 0 5
48524: PPUSH
48525: LD_INT 2
48527: PPUSH
48528: CALL_OW 275
48532: PUSH
48533: LD_VAR 0 4
48537: PUSH
48538: LD_INT 2
48540: ARRAY
48541: GREATEREQUAL
48542: AND
48543: PUSH
48544: LD_VAR 0 5
48548: PPUSH
48549: LD_INT 3
48551: PPUSH
48552: CALL_OW 275
48556: PUSH
48557: LD_VAR 0 4
48561: PUSH
48562: LD_INT 3
48564: ARRAY
48565: GREATEREQUAL
48566: AND
48567: ST_TO_ADDR
// end ;
48568: LD_VAR 0 3
48572: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48573: LD_INT 0
48575: PPUSH
48576: PPUSH
48577: PPUSH
48578: PPUSH
// pom := GetBase ( building ) ;
48579: LD_ADDR_VAR 0 3
48583: PUSH
48584: LD_VAR 0 1
48588: PPUSH
48589: CALL_OW 274
48593: ST_TO_ADDR
// if not pom then
48594: LD_VAR 0 3
48598: NOT
48599: IFFALSE 48603
// exit ;
48601: GO 48773
// btype := GetBType ( building ) ;
48603: LD_ADDR_VAR 0 5
48607: PUSH
48608: LD_VAR 0 1
48612: PPUSH
48613: CALL_OW 266
48617: ST_TO_ADDR
// if btype = b_armoury then
48618: LD_VAR 0 5
48622: PUSH
48623: LD_INT 4
48625: EQUAL
48626: IFFALSE 48636
// btype := b_barracks ;
48628: LD_ADDR_VAR 0 5
48632: PUSH
48633: LD_INT 5
48635: ST_TO_ADDR
// if btype = b_depot then
48636: LD_VAR 0 5
48640: PUSH
48641: LD_INT 0
48643: EQUAL
48644: IFFALSE 48654
// btype := b_warehouse ;
48646: LD_ADDR_VAR 0 5
48650: PUSH
48651: LD_INT 1
48653: ST_TO_ADDR
// if btype = b_workshop then
48654: LD_VAR 0 5
48658: PUSH
48659: LD_INT 2
48661: EQUAL
48662: IFFALSE 48672
// btype := b_factory ;
48664: LD_ADDR_VAR 0 5
48668: PUSH
48669: LD_INT 3
48671: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48672: LD_ADDR_VAR 0 4
48676: PUSH
48677: LD_VAR 0 5
48681: PPUSH
48682: LD_VAR 0 1
48686: PPUSH
48687: CALL_OW 248
48691: PPUSH
48692: CALL_OW 450
48696: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48697: LD_ADDR_VAR 0 2
48701: PUSH
48702: LD_VAR 0 3
48706: PPUSH
48707: LD_INT 1
48709: PPUSH
48710: CALL_OW 275
48714: PUSH
48715: LD_VAR 0 4
48719: PUSH
48720: LD_INT 1
48722: ARRAY
48723: GREATEREQUAL
48724: PUSH
48725: LD_VAR 0 3
48729: PPUSH
48730: LD_INT 2
48732: PPUSH
48733: CALL_OW 275
48737: PUSH
48738: LD_VAR 0 4
48742: PUSH
48743: LD_INT 2
48745: ARRAY
48746: GREATEREQUAL
48747: AND
48748: PUSH
48749: LD_VAR 0 3
48753: PPUSH
48754: LD_INT 3
48756: PPUSH
48757: CALL_OW 275
48761: PUSH
48762: LD_VAR 0 4
48766: PUSH
48767: LD_INT 3
48769: ARRAY
48770: GREATEREQUAL
48771: AND
48772: ST_TO_ADDR
// end ;
48773: LD_VAR 0 2
48777: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48778: LD_INT 0
48780: PPUSH
48781: PPUSH
48782: PPUSH
// pom := GetBase ( building ) ;
48783: LD_ADDR_VAR 0 4
48787: PUSH
48788: LD_VAR 0 1
48792: PPUSH
48793: CALL_OW 274
48797: ST_TO_ADDR
// if not pom then
48798: LD_VAR 0 4
48802: NOT
48803: IFFALSE 48807
// exit ;
48805: GO 48908
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48807: LD_ADDR_VAR 0 5
48811: PUSH
48812: LD_VAR 0 2
48816: PPUSH
48817: LD_VAR 0 1
48821: PPUSH
48822: CALL_OW 248
48826: PPUSH
48827: CALL_OW 450
48831: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48832: LD_ADDR_VAR 0 3
48836: PUSH
48837: LD_VAR 0 4
48841: PPUSH
48842: LD_INT 1
48844: PPUSH
48845: CALL_OW 275
48849: PUSH
48850: LD_VAR 0 5
48854: PUSH
48855: LD_INT 1
48857: ARRAY
48858: GREATEREQUAL
48859: PUSH
48860: LD_VAR 0 4
48864: PPUSH
48865: LD_INT 2
48867: PPUSH
48868: CALL_OW 275
48872: PUSH
48873: LD_VAR 0 5
48877: PUSH
48878: LD_INT 2
48880: ARRAY
48881: GREATEREQUAL
48882: AND
48883: PUSH
48884: LD_VAR 0 4
48888: PPUSH
48889: LD_INT 3
48891: PPUSH
48892: CALL_OW 275
48896: PUSH
48897: LD_VAR 0 5
48901: PUSH
48902: LD_INT 3
48904: ARRAY
48905: GREATEREQUAL
48906: AND
48907: ST_TO_ADDR
// end ;
48908: LD_VAR 0 3
48912: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
48913: LD_INT 0
48915: PPUSH
48916: PPUSH
48917: PPUSH
48918: PPUSH
48919: PPUSH
48920: PPUSH
48921: PPUSH
48922: PPUSH
48923: PPUSH
48924: PPUSH
48925: PPUSH
// result := false ;
48926: LD_ADDR_VAR 0 8
48930: PUSH
48931: LD_INT 0
48933: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
48934: LD_VAR 0 5
48938: NOT
48939: PUSH
48940: LD_VAR 0 1
48944: NOT
48945: OR
48946: PUSH
48947: LD_VAR 0 2
48951: NOT
48952: OR
48953: PUSH
48954: LD_VAR 0 3
48958: NOT
48959: OR
48960: IFFALSE 48964
// exit ;
48962: GO 49778
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
48964: LD_ADDR_VAR 0 14
48968: PUSH
48969: LD_VAR 0 1
48973: PPUSH
48974: LD_VAR 0 2
48978: PPUSH
48979: LD_VAR 0 3
48983: PPUSH
48984: LD_VAR 0 4
48988: PPUSH
48989: LD_VAR 0 5
48993: PUSH
48994: LD_INT 1
48996: ARRAY
48997: PPUSH
48998: CALL_OW 248
49002: PPUSH
49003: LD_INT 0
49005: PPUSH
49006: CALL 51015 0 6
49010: ST_TO_ADDR
// if not hexes then
49011: LD_VAR 0 14
49015: NOT
49016: IFFALSE 49020
// exit ;
49018: GO 49778
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49020: LD_ADDR_VAR 0 17
49024: PUSH
49025: LD_VAR 0 5
49029: PPUSH
49030: LD_INT 22
49032: PUSH
49033: LD_VAR 0 13
49037: PPUSH
49038: CALL_OW 255
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 2
49049: PUSH
49050: LD_INT 30
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 30
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: LIST
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PPUSH
49079: CALL_OW 72
49083: ST_TO_ADDR
// for i = 1 to hexes do
49084: LD_ADDR_VAR 0 9
49088: PUSH
49089: DOUBLE
49090: LD_INT 1
49092: DEC
49093: ST_TO_ADDR
49094: LD_VAR 0 14
49098: PUSH
49099: FOR_TO
49100: IFFALSE 49776
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49102: LD_ADDR_VAR 0 13
49106: PUSH
49107: LD_VAR 0 14
49111: PUSH
49112: LD_VAR 0 9
49116: ARRAY
49117: PUSH
49118: LD_INT 1
49120: ARRAY
49121: PPUSH
49122: LD_VAR 0 14
49126: PUSH
49127: LD_VAR 0 9
49131: ARRAY
49132: PUSH
49133: LD_INT 2
49135: ARRAY
49136: PPUSH
49137: CALL_OW 428
49141: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
49142: LD_VAR 0 14
49146: PUSH
49147: LD_VAR 0 9
49151: ARRAY
49152: PUSH
49153: LD_INT 1
49155: ARRAY
49156: PPUSH
49157: LD_VAR 0 14
49161: PUSH
49162: LD_VAR 0 9
49166: ARRAY
49167: PUSH
49168: LD_INT 2
49170: ARRAY
49171: PPUSH
49172: CALL_OW 351
49176: PUSH
49177: LD_VAR 0 14
49181: PUSH
49182: LD_VAR 0 9
49186: ARRAY
49187: PUSH
49188: LD_INT 1
49190: ARRAY
49191: PPUSH
49192: LD_VAR 0 14
49196: PUSH
49197: LD_VAR 0 9
49201: ARRAY
49202: PUSH
49203: LD_INT 2
49205: ARRAY
49206: PPUSH
49207: CALL_OW 488
49211: NOT
49212: OR
49213: PUSH
49214: LD_VAR 0 13
49218: PPUSH
49219: CALL_OW 247
49223: PUSH
49224: LD_INT 3
49226: EQUAL
49227: OR
49228: IFFALSE 49234
// exit ;
49230: POP
49231: POP
49232: GO 49778
// if not tmp then
49234: LD_VAR 0 13
49238: NOT
49239: IFFALSE 49243
// continue ;
49241: GO 49099
// result := true ;
49243: LD_ADDR_VAR 0 8
49247: PUSH
49248: LD_INT 1
49250: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
49251: LD_VAR 0 6
49255: PUSH
49256: LD_VAR 0 13
49260: PPUSH
49261: CALL_OW 247
49265: PUSH
49266: LD_INT 2
49268: EQUAL
49269: AND
49270: PUSH
49271: LD_VAR 0 13
49275: PPUSH
49276: CALL_OW 263
49280: PUSH
49281: LD_INT 1
49283: EQUAL
49284: AND
49285: IFFALSE 49449
// begin if IsDrivenBy ( tmp ) then
49287: LD_VAR 0 13
49291: PPUSH
49292: CALL_OW 311
49296: IFFALSE 49300
// continue ;
49298: GO 49099
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
49300: LD_VAR 0 6
49304: PPUSH
49305: LD_INT 3
49307: PUSH
49308: LD_INT 60
49310: PUSH
49311: EMPTY
49312: LIST
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 3
49320: PUSH
49321: LD_INT 55
49323: PUSH
49324: EMPTY
49325: LIST
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PPUSH
49335: CALL_OW 72
49339: IFFALSE 49447
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
49341: LD_ADDR_VAR 0 18
49345: PUSH
49346: LD_VAR 0 6
49350: PPUSH
49351: LD_INT 3
49353: PUSH
49354: LD_INT 60
49356: PUSH
49357: EMPTY
49358: LIST
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 3
49366: PUSH
49367: LD_INT 55
49369: PUSH
49370: EMPTY
49371: LIST
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PPUSH
49381: CALL_OW 72
49385: PUSH
49386: LD_INT 1
49388: ARRAY
49389: ST_TO_ADDR
// if IsInUnit ( driver ) then
49390: LD_VAR 0 18
49394: PPUSH
49395: CALL_OW 310
49399: IFFALSE 49410
// ComExit ( driver ) ;
49401: LD_VAR 0 18
49405: PPUSH
49406: CALL 74199 0 1
// AddComEnterUnit ( driver , tmp ) ;
49410: LD_VAR 0 18
49414: PPUSH
49415: LD_VAR 0 13
49419: PPUSH
49420: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
49424: LD_VAR 0 18
49428: PPUSH
49429: LD_VAR 0 7
49433: PPUSH
49434: CALL_OW 173
// AddComExitVehicle ( driver ) ;
49438: LD_VAR 0 18
49442: PPUSH
49443: CALL_OW 181
// end ; continue ;
49447: GO 49099
// end ; if not cleaners or not tmp in cleaners then
49449: LD_VAR 0 6
49453: NOT
49454: PUSH
49455: LD_VAR 0 13
49459: PUSH
49460: LD_VAR 0 6
49464: IN
49465: NOT
49466: OR
49467: IFFALSE 49774
// begin if dep then
49469: LD_VAR 0 17
49473: IFFALSE 49609
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
49475: LD_ADDR_VAR 0 16
49479: PUSH
49480: LD_VAR 0 17
49484: PUSH
49485: LD_INT 1
49487: ARRAY
49488: PPUSH
49489: CALL_OW 250
49493: PPUSH
49494: LD_VAR 0 17
49498: PUSH
49499: LD_INT 1
49501: ARRAY
49502: PPUSH
49503: CALL_OW 254
49507: PPUSH
49508: LD_INT 5
49510: PPUSH
49511: CALL_OW 272
49515: PUSH
49516: LD_VAR 0 17
49520: PUSH
49521: LD_INT 1
49523: ARRAY
49524: PPUSH
49525: CALL_OW 251
49529: PPUSH
49530: LD_VAR 0 17
49534: PUSH
49535: LD_INT 1
49537: ARRAY
49538: PPUSH
49539: CALL_OW 254
49543: PPUSH
49544: LD_INT 5
49546: PPUSH
49547: CALL_OW 273
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
49556: LD_VAR 0 16
49560: PUSH
49561: LD_INT 1
49563: ARRAY
49564: PPUSH
49565: LD_VAR 0 16
49569: PUSH
49570: LD_INT 2
49572: ARRAY
49573: PPUSH
49574: CALL_OW 488
49578: IFFALSE 49609
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
49580: LD_VAR 0 13
49584: PPUSH
49585: LD_VAR 0 16
49589: PUSH
49590: LD_INT 1
49592: ARRAY
49593: PPUSH
49594: LD_VAR 0 16
49598: PUSH
49599: LD_INT 2
49601: ARRAY
49602: PPUSH
49603: CALL_OW 111
// continue ;
49607: GO 49099
// end ; end ; r := GetDir ( tmp ) ;
49609: LD_ADDR_VAR 0 15
49613: PUSH
49614: LD_VAR 0 13
49618: PPUSH
49619: CALL_OW 254
49623: ST_TO_ADDR
// if r = 5 then
49624: LD_VAR 0 15
49628: PUSH
49629: LD_INT 5
49631: EQUAL
49632: IFFALSE 49642
// r := 0 ;
49634: LD_ADDR_VAR 0 15
49638: PUSH
49639: LD_INT 0
49641: ST_TO_ADDR
// for j = r to 5 do
49642: LD_ADDR_VAR 0 10
49646: PUSH
49647: DOUBLE
49648: LD_VAR 0 15
49652: DEC
49653: ST_TO_ADDR
49654: LD_INT 5
49656: PUSH
49657: FOR_TO
49658: IFFALSE 49772
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49660: LD_ADDR_VAR 0 11
49664: PUSH
49665: LD_VAR 0 13
49669: PPUSH
49670: CALL_OW 250
49674: PPUSH
49675: LD_VAR 0 10
49679: PPUSH
49680: LD_INT 2
49682: PPUSH
49683: CALL_OW 272
49687: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49688: LD_ADDR_VAR 0 12
49692: PUSH
49693: LD_VAR 0 13
49697: PPUSH
49698: CALL_OW 251
49702: PPUSH
49703: LD_VAR 0 10
49707: PPUSH
49708: LD_INT 2
49710: PPUSH
49711: CALL_OW 273
49715: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49716: LD_VAR 0 11
49720: PPUSH
49721: LD_VAR 0 12
49725: PPUSH
49726: CALL_OW 488
49730: PUSH
49731: LD_VAR 0 11
49735: PPUSH
49736: LD_VAR 0 12
49740: PPUSH
49741: CALL_OW 428
49745: NOT
49746: AND
49747: IFFALSE 49770
// begin ComMoveXY ( tmp , _x , _y ) ;
49749: LD_VAR 0 13
49753: PPUSH
49754: LD_VAR 0 11
49758: PPUSH
49759: LD_VAR 0 12
49763: PPUSH
49764: CALL_OW 111
// break ;
49768: GO 49772
// end ; end ;
49770: GO 49657
49772: POP
49773: POP
// end ; end ;
49774: GO 49099
49776: POP
49777: POP
// end ;
49778: LD_VAR 0 8
49782: RET
// export function BuildingTechInvented ( side , btype ) ; begin
49783: LD_INT 0
49785: PPUSH
// result := true ;
49786: LD_ADDR_VAR 0 3
49790: PUSH
49791: LD_INT 1
49793: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
49794: LD_VAR 0 2
49798: PUSH
49799: LD_INT 24
49801: DOUBLE
49802: EQUAL
49803: IFTRUE 49813
49805: LD_INT 33
49807: DOUBLE
49808: EQUAL
49809: IFTRUE 49813
49811: GO 49838
49813: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
49814: LD_ADDR_VAR 0 3
49818: PUSH
49819: LD_INT 32
49821: PPUSH
49822: LD_VAR 0 1
49826: PPUSH
49827: CALL_OW 321
49831: PUSH
49832: LD_INT 2
49834: EQUAL
49835: ST_TO_ADDR
49836: GO 50158
49838: LD_INT 20
49840: DOUBLE
49841: EQUAL
49842: IFTRUE 49846
49844: GO 49871
49846: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
49847: LD_ADDR_VAR 0 3
49851: PUSH
49852: LD_INT 6
49854: PPUSH
49855: LD_VAR 0 1
49859: PPUSH
49860: CALL_OW 321
49864: PUSH
49865: LD_INT 2
49867: EQUAL
49868: ST_TO_ADDR
49869: GO 50158
49871: LD_INT 22
49873: DOUBLE
49874: EQUAL
49875: IFTRUE 49885
49877: LD_INT 36
49879: DOUBLE
49880: EQUAL
49881: IFTRUE 49885
49883: GO 49910
49885: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
49886: LD_ADDR_VAR 0 3
49890: PUSH
49891: LD_INT 15
49893: PPUSH
49894: LD_VAR 0 1
49898: PPUSH
49899: CALL_OW 321
49903: PUSH
49904: LD_INT 2
49906: EQUAL
49907: ST_TO_ADDR
49908: GO 50158
49910: LD_INT 30
49912: DOUBLE
49913: EQUAL
49914: IFTRUE 49918
49916: GO 49943
49918: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
49919: LD_ADDR_VAR 0 3
49923: PUSH
49924: LD_INT 20
49926: PPUSH
49927: LD_VAR 0 1
49931: PPUSH
49932: CALL_OW 321
49936: PUSH
49937: LD_INT 2
49939: EQUAL
49940: ST_TO_ADDR
49941: GO 50158
49943: LD_INT 28
49945: DOUBLE
49946: EQUAL
49947: IFTRUE 49957
49949: LD_INT 21
49951: DOUBLE
49952: EQUAL
49953: IFTRUE 49957
49955: GO 49982
49957: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
49958: LD_ADDR_VAR 0 3
49962: PUSH
49963: LD_INT 21
49965: PPUSH
49966: LD_VAR 0 1
49970: PPUSH
49971: CALL_OW 321
49975: PUSH
49976: LD_INT 2
49978: EQUAL
49979: ST_TO_ADDR
49980: GO 50158
49982: LD_INT 16
49984: DOUBLE
49985: EQUAL
49986: IFTRUE 49990
49988: GO 50017
49990: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
49991: LD_ADDR_VAR 0 3
49995: PUSH
49996: LD_EXP 62
50000: PPUSH
50001: LD_VAR 0 1
50005: PPUSH
50006: CALL_OW 321
50010: PUSH
50011: LD_INT 2
50013: EQUAL
50014: ST_TO_ADDR
50015: GO 50158
50017: LD_INT 19
50019: DOUBLE
50020: EQUAL
50021: IFTRUE 50031
50023: LD_INT 23
50025: DOUBLE
50026: EQUAL
50027: IFTRUE 50031
50029: GO 50058
50031: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
50032: LD_ADDR_VAR 0 3
50036: PUSH
50037: LD_EXP 61
50041: PPUSH
50042: LD_VAR 0 1
50046: PPUSH
50047: CALL_OW 321
50051: PUSH
50052: LD_INT 2
50054: EQUAL
50055: ST_TO_ADDR
50056: GO 50158
50058: LD_INT 17
50060: DOUBLE
50061: EQUAL
50062: IFTRUE 50066
50064: GO 50091
50066: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
50067: LD_ADDR_VAR 0 3
50071: PUSH
50072: LD_INT 39
50074: PPUSH
50075: LD_VAR 0 1
50079: PPUSH
50080: CALL_OW 321
50084: PUSH
50085: LD_INT 2
50087: EQUAL
50088: ST_TO_ADDR
50089: GO 50158
50091: LD_INT 18
50093: DOUBLE
50094: EQUAL
50095: IFTRUE 50099
50097: GO 50124
50099: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
50100: LD_ADDR_VAR 0 3
50104: PUSH
50105: LD_INT 40
50107: PPUSH
50108: LD_VAR 0 1
50112: PPUSH
50113: CALL_OW 321
50117: PUSH
50118: LD_INT 2
50120: EQUAL
50121: ST_TO_ADDR
50122: GO 50158
50124: LD_INT 27
50126: DOUBLE
50127: EQUAL
50128: IFTRUE 50132
50130: GO 50157
50132: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
50133: LD_ADDR_VAR 0 3
50137: PUSH
50138: LD_INT 35
50140: PPUSH
50141: LD_VAR 0 1
50145: PPUSH
50146: CALL_OW 321
50150: PUSH
50151: LD_INT 2
50153: EQUAL
50154: ST_TO_ADDR
50155: GO 50158
50157: POP
// end ;
50158: LD_VAR 0 3
50162: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
50163: LD_INT 0
50165: PPUSH
50166: PPUSH
50167: PPUSH
50168: PPUSH
50169: PPUSH
50170: PPUSH
50171: PPUSH
50172: PPUSH
50173: PPUSH
50174: PPUSH
50175: PPUSH
// result := false ;
50176: LD_ADDR_VAR 0 6
50180: PUSH
50181: LD_INT 0
50183: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50184: LD_VAR 0 1
50188: NOT
50189: PUSH
50190: LD_VAR 0 1
50194: PPUSH
50195: CALL_OW 266
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: IN
50210: NOT
50211: OR
50212: PUSH
50213: LD_VAR 0 2
50217: NOT
50218: OR
50219: PUSH
50220: LD_VAR 0 5
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: LD_INT 3
50236: PUSH
50237: LD_INT 4
50239: PUSH
50240: LD_INT 5
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: IN
50251: NOT
50252: OR
50253: PUSH
50254: LD_VAR 0 3
50258: PPUSH
50259: LD_VAR 0 4
50263: PPUSH
50264: CALL_OW 488
50268: NOT
50269: OR
50270: IFFALSE 50274
// exit ;
50272: GO 51010
// side := GetSide ( depot ) ;
50274: LD_ADDR_VAR 0 9
50278: PUSH
50279: LD_VAR 0 1
50283: PPUSH
50284: CALL_OW 255
50288: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
50289: LD_VAR 0 9
50293: PPUSH
50294: LD_VAR 0 2
50298: PPUSH
50299: CALL 49783 0 2
50303: NOT
50304: IFFALSE 50308
// exit ;
50306: GO 51010
// pom := GetBase ( depot ) ;
50308: LD_ADDR_VAR 0 10
50312: PUSH
50313: LD_VAR 0 1
50317: PPUSH
50318: CALL_OW 274
50322: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50323: LD_ADDR_VAR 0 11
50327: PUSH
50328: LD_VAR 0 2
50332: PPUSH
50333: LD_VAR 0 1
50337: PPUSH
50338: CALL_OW 248
50342: PPUSH
50343: CALL_OW 450
50347: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
50348: LD_VAR 0 10
50352: PPUSH
50353: LD_INT 1
50355: PPUSH
50356: CALL_OW 275
50360: PUSH
50361: LD_VAR 0 11
50365: PUSH
50366: LD_INT 1
50368: ARRAY
50369: GREATEREQUAL
50370: PUSH
50371: LD_VAR 0 10
50375: PPUSH
50376: LD_INT 2
50378: PPUSH
50379: CALL_OW 275
50383: PUSH
50384: LD_VAR 0 11
50388: PUSH
50389: LD_INT 2
50391: ARRAY
50392: GREATEREQUAL
50393: AND
50394: PUSH
50395: LD_VAR 0 10
50399: PPUSH
50400: LD_INT 3
50402: PPUSH
50403: CALL_OW 275
50407: PUSH
50408: LD_VAR 0 11
50412: PUSH
50413: LD_INT 3
50415: ARRAY
50416: GREATEREQUAL
50417: AND
50418: NOT
50419: IFFALSE 50423
// exit ;
50421: GO 51010
// if GetBType ( depot ) = b_depot then
50423: LD_VAR 0 1
50427: PPUSH
50428: CALL_OW 266
50432: PUSH
50433: LD_INT 0
50435: EQUAL
50436: IFFALSE 50448
// dist := 28 else
50438: LD_ADDR_VAR 0 14
50442: PUSH
50443: LD_INT 28
50445: ST_TO_ADDR
50446: GO 50456
// dist := 36 ;
50448: LD_ADDR_VAR 0 14
50452: PUSH
50453: LD_INT 36
50455: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
50456: LD_VAR 0 1
50460: PPUSH
50461: LD_VAR 0 3
50465: PPUSH
50466: LD_VAR 0 4
50470: PPUSH
50471: CALL_OW 297
50475: PUSH
50476: LD_VAR 0 14
50480: GREATER
50481: IFFALSE 50485
// exit ;
50483: GO 51010
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
50485: LD_ADDR_VAR 0 12
50489: PUSH
50490: LD_VAR 0 2
50494: PPUSH
50495: LD_VAR 0 3
50499: PPUSH
50500: LD_VAR 0 4
50504: PPUSH
50505: LD_VAR 0 5
50509: PPUSH
50510: LD_VAR 0 1
50514: PPUSH
50515: CALL_OW 248
50519: PPUSH
50520: LD_INT 0
50522: PPUSH
50523: CALL 51015 0 6
50527: ST_TO_ADDR
// if not hexes then
50528: LD_VAR 0 12
50532: NOT
50533: IFFALSE 50537
// exit ;
50535: GO 51010
// hex := GetHexInfo ( x , y ) ;
50537: LD_ADDR_VAR 0 15
50541: PUSH
50542: LD_VAR 0 3
50546: PPUSH
50547: LD_VAR 0 4
50551: PPUSH
50552: CALL_OW 546
50556: ST_TO_ADDR
// if hex [ 1 ] then
50557: LD_VAR 0 15
50561: PUSH
50562: LD_INT 1
50564: ARRAY
50565: IFFALSE 50569
// exit ;
50567: GO 51010
// height := hex [ 2 ] ;
50569: LD_ADDR_VAR 0 13
50573: PUSH
50574: LD_VAR 0 15
50578: PUSH
50579: LD_INT 2
50581: ARRAY
50582: ST_TO_ADDR
// for i = 1 to hexes do
50583: LD_ADDR_VAR 0 7
50587: PUSH
50588: DOUBLE
50589: LD_INT 1
50591: DEC
50592: ST_TO_ADDR
50593: LD_VAR 0 12
50597: PUSH
50598: FOR_TO
50599: IFFALSE 50929
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
50601: LD_VAR 0 12
50605: PUSH
50606: LD_VAR 0 7
50610: ARRAY
50611: PUSH
50612: LD_INT 1
50614: ARRAY
50615: PPUSH
50616: LD_VAR 0 12
50620: PUSH
50621: LD_VAR 0 7
50625: ARRAY
50626: PUSH
50627: LD_INT 2
50629: ARRAY
50630: PPUSH
50631: CALL_OW 488
50635: NOT
50636: PUSH
50637: LD_VAR 0 12
50641: PUSH
50642: LD_VAR 0 7
50646: ARRAY
50647: PUSH
50648: LD_INT 1
50650: ARRAY
50651: PPUSH
50652: LD_VAR 0 12
50656: PUSH
50657: LD_VAR 0 7
50661: ARRAY
50662: PUSH
50663: LD_INT 2
50665: ARRAY
50666: PPUSH
50667: CALL_OW 428
50671: PUSH
50672: LD_INT 0
50674: GREATER
50675: OR
50676: PUSH
50677: LD_VAR 0 12
50681: PUSH
50682: LD_VAR 0 7
50686: ARRAY
50687: PUSH
50688: LD_INT 1
50690: ARRAY
50691: PPUSH
50692: LD_VAR 0 12
50696: PUSH
50697: LD_VAR 0 7
50701: ARRAY
50702: PUSH
50703: LD_INT 2
50705: ARRAY
50706: PPUSH
50707: CALL_OW 351
50711: OR
50712: IFFALSE 50718
// exit ;
50714: POP
50715: POP
50716: GO 51010
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50718: LD_ADDR_VAR 0 8
50722: PUSH
50723: LD_VAR 0 12
50727: PUSH
50728: LD_VAR 0 7
50732: ARRAY
50733: PUSH
50734: LD_INT 1
50736: ARRAY
50737: PPUSH
50738: LD_VAR 0 12
50742: PUSH
50743: LD_VAR 0 7
50747: ARRAY
50748: PUSH
50749: LD_INT 2
50751: ARRAY
50752: PPUSH
50753: CALL_OW 546
50757: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
50758: LD_VAR 0 8
50762: PUSH
50763: LD_INT 1
50765: ARRAY
50766: PUSH
50767: LD_VAR 0 8
50771: PUSH
50772: LD_INT 2
50774: ARRAY
50775: PUSH
50776: LD_VAR 0 13
50780: PUSH
50781: LD_INT 2
50783: PLUS
50784: GREATER
50785: OR
50786: PUSH
50787: LD_VAR 0 8
50791: PUSH
50792: LD_INT 2
50794: ARRAY
50795: PUSH
50796: LD_VAR 0 13
50800: PUSH
50801: LD_INT 2
50803: MINUS
50804: LESS
50805: OR
50806: PUSH
50807: LD_VAR 0 8
50811: PUSH
50812: LD_INT 3
50814: ARRAY
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 8
50821: PUSH
50822: LD_INT 9
50824: PUSH
50825: LD_INT 10
50827: PUSH
50828: LD_INT 11
50830: PUSH
50831: LD_INT 12
50833: PUSH
50834: LD_INT 13
50836: PUSH
50837: LD_INT 16
50839: PUSH
50840: LD_INT 17
50842: PUSH
50843: LD_INT 18
50845: PUSH
50846: LD_INT 19
50848: PUSH
50849: LD_INT 20
50851: PUSH
50852: LD_INT 21
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: IN
50870: NOT
50871: OR
50872: PUSH
50873: LD_VAR 0 8
50877: PUSH
50878: LD_INT 5
50880: ARRAY
50881: NOT
50882: OR
50883: PUSH
50884: LD_VAR 0 8
50888: PUSH
50889: LD_INT 6
50891: ARRAY
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: LD_INT 7
50901: PUSH
50902: LD_INT 9
50904: PUSH
50905: LD_INT 10
50907: PUSH
50908: LD_INT 11
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: IN
50919: NOT
50920: OR
50921: IFFALSE 50927
// exit ;
50923: POP
50924: POP
50925: GO 51010
// end ;
50927: GO 50598
50929: POP
50930: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
50931: LD_VAR 0 9
50935: PPUSH
50936: LD_VAR 0 3
50940: PPUSH
50941: LD_VAR 0 4
50945: PPUSH
50946: LD_INT 20
50948: PPUSH
50949: CALL 42956 0 4
50953: PUSH
50954: LD_INT 4
50956: ARRAY
50957: IFFALSE 50961
// exit ;
50959: GO 51010
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
50961: LD_VAR 0 2
50965: PUSH
50966: LD_INT 29
50968: PUSH
50969: LD_INT 30
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: IN
50976: PUSH
50977: LD_VAR 0 3
50981: PPUSH
50982: LD_VAR 0 4
50986: PPUSH
50987: LD_VAR 0 9
50991: PPUSH
50992: CALL_OW 440
50996: NOT
50997: AND
50998: IFFALSE 51002
// exit ;
51000: GO 51010
// result := true ;
51002: LD_ADDR_VAR 0 6
51006: PUSH
51007: LD_INT 1
51009: ST_TO_ADDR
// end ;
51010: LD_VAR 0 6
51014: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
51015: LD_INT 0
51017: PPUSH
51018: PPUSH
51019: PPUSH
51020: PPUSH
51021: PPUSH
51022: PPUSH
51023: PPUSH
51024: PPUSH
51025: PPUSH
51026: PPUSH
51027: PPUSH
51028: PPUSH
51029: PPUSH
51030: PPUSH
51031: PPUSH
51032: PPUSH
51033: PPUSH
51034: PPUSH
51035: PPUSH
51036: PPUSH
51037: PPUSH
51038: PPUSH
51039: PPUSH
51040: PPUSH
51041: PPUSH
51042: PPUSH
51043: PPUSH
51044: PPUSH
51045: PPUSH
51046: PPUSH
51047: PPUSH
51048: PPUSH
51049: PPUSH
51050: PPUSH
51051: PPUSH
51052: PPUSH
51053: PPUSH
51054: PPUSH
51055: PPUSH
51056: PPUSH
51057: PPUSH
51058: PPUSH
51059: PPUSH
51060: PPUSH
51061: PPUSH
51062: PPUSH
51063: PPUSH
51064: PPUSH
51065: PPUSH
51066: PPUSH
51067: PPUSH
51068: PPUSH
51069: PPUSH
51070: PPUSH
51071: PPUSH
51072: PPUSH
51073: PPUSH
51074: PPUSH
// result = [ ] ;
51075: LD_ADDR_VAR 0 7
51079: PUSH
51080: EMPTY
51081: ST_TO_ADDR
// temp_list = [ ] ;
51082: LD_ADDR_VAR 0 9
51086: PUSH
51087: EMPTY
51088: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51089: LD_VAR 0 4
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: LD_INT 3
51105: PUSH
51106: LD_INT 4
51108: PUSH
51109: LD_INT 5
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: IN
51120: NOT
51121: PUSH
51122: LD_VAR 0 1
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: IN
51137: PUSH
51138: LD_VAR 0 5
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: LD_INT 3
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: LIST
51156: IN
51157: NOT
51158: AND
51159: OR
51160: IFFALSE 51164
// exit ;
51162: GO 69555
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51164: LD_VAR 0 1
51168: PUSH
51169: LD_INT 6
51171: PUSH
51172: LD_INT 7
51174: PUSH
51175: LD_INT 8
51177: PUSH
51178: LD_INT 13
51180: PUSH
51181: LD_INT 12
51183: PUSH
51184: LD_INT 15
51186: PUSH
51187: LD_INT 11
51189: PUSH
51190: LD_INT 14
51192: PUSH
51193: LD_INT 10
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: IN
51207: IFFALSE 51217
// btype = b_lab ;
51209: LD_ADDR_VAR 0 1
51213: PUSH
51214: LD_INT 6
51216: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
51217: LD_VAR 0 6
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: LIST
51235: IN
51236: NOT
51237: PUSH
51238: LD_VAR 0 1
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: LD_INT 3
51254: PUSH
51255: LD_INT 6
51257: PUSH
51258: LD_INT 36
51260: PUSH
51261: LD_INT 4
51263: PUSH
51264: LD_INT 5
51266: PUSH
51267: LD_INT 31
51269: PUSH
51270: LD_INT 32
51272: PUSH
51273: LD_INT 33
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: IN
51289: NOT
51290: PUSH
51291: LD_VAR 0 6
51295: PUSH
51296: LD_INT 1
51298: EQUAL
51299: AND
51300: OR
51301: PUSH
51302: LD_VAR 0 1
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: LD_INT 3
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: IN
51317: NOT
51318: PUSH
51319: LD_VAR 0 6
51323: PUSH
51324: LD_INT 2
51326: EQUAL
51327: AND
51328: OR
51329: IFFALSE 51339
// mode = 0 ;
51331: LD_ADDR_VAR 0 6
51335: PUSH
51336: LD_INT 0
51338: ST_TO_ADDR
// case mode of 0 :
51339: LD_VAR 0 6
51343: PUSH
51344: LD_INT 0
51346: DOUBLE
51347: EQUAL
51348: IFTRUE 51352
51350: GO 62805
51352: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51353: LD_ADDR_VAR 0 11
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: LD_INT 2
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 2
51449: NEG
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: LD_INT 3
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: LD_INT 3
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: LD_INT 2
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51546: LD_ADDR_VAR 0 12
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 1
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 2
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: LD_INT 1
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 2
51669: NEG
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 2
51680: NEG
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 3
51703: NEG
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 3
51714: NEG
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51742: LD_ADDR_VAR 0 13
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: LD_INT 2
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: LD_INT 2
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 2
51877: NEG
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 2
51889: NEG
51890: PUSH
51891: LD_INT 3
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 3
51901: NEG
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 3
51913: NEG
51914: PUSH
51915: LD_INT 3
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51941: LD_ADDR_VAR 0 14
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: LD_INT 2
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: LD_INT 2
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: LD_INT 3
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 3
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: LD_INT 2
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52137: LD_ADDR_VAR 0 15
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 2
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 2
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 2
52271: NEG
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 3
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 3
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52330: LD_ADDR_VAR 0 16
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: LD_INT 2
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 2
52433: PUSH
52434: LD_INT 2
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: LD_INT 2
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: NEG
52466: PUSH
52467: LD_INT 2
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 3
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 3
52487: PUSH
52488: LD_INT 3
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: LD_INT 3
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52523: LD_ADDR_VAR 0 17
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: LD_INT 2
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 2
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: LD_INT 1
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: LD_INT 2
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 2
52699: NEG
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 2
52710: NEG
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 2
52722: NEG
52723: PUSH
52724: LD_INT 2
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52753: LD_ADDR_VAR 0 18
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: LD_INT 2
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 2
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 2
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 2
52888: PUSH
52889: LD_INT 2
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: PUSH
52899: LD_INT 2
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: LD_INT 2
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 2
52929: NEG
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 2
52940: NEG
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 2
52952: NEG
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52983: LD_ADDR_VAR 0 19
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_INT 1
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: LD_INT 2
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: LD_INT 2
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 2
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 2
53159: NEG
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: NEG
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 2
53182: NEG
53183: PUSH
53184: LD_INT 2
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53213: LD_ADDR_VAR 0 20
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: LD_INT 2
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 2
53348: PUSH
53349: LD_INT 2
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 2
53400: NEG
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: NEG
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53443: LD_ADDR_VAR 0 21
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: LD_INT 2
53528: NEG
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 2
53630: NEG
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53673: LD_ADDR_VAR 0 22
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: LD_INT 2
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: LD_INT 2
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 2
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 2
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: LD_INT 2
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: NEG
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 2
53860: NEG
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 2
53872: NEG
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53903: LD_ADDR_VAR 0 23
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: LD_INT 2
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 2
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: LD_INT 2
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: NEG
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 2
54090: NEG
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: NEG
54103: PUSH
54104: LD_INT 2
54106: NEG
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 2
54114: NEG
54115: PUSH
54116: LD_INT 3
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: LD_INT 3
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54183: LD_ADDR_VAR 0 24
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: LD_INT 2
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: LD_INT 2
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 2
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 2
54359: NEG
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: NEG
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 2
54382: NEG
54383: PUSH
54384: LD_INT 2
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: LD_INT 2
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 2
54405: PUSH
54406: LD_INT 1
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 3
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 3
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
54459: LD_ADDR_VAR 0 25
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 0
54507: PUSH
54508: LD_INT 1
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: LD_INT 2
54544: NEG
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 2
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: LD_INT 2
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: LD_INT 2
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 2
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 2
54635: NEG
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: NEG
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 2
54658: NEG
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 3
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 3
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 2
54690: PUSH
54691: LD_INT 3
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: LD_INT 3
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54733: LD_ADDR_VAR 0 26
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 0
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 2
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 2
54909: NEG
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 2
54932: NEG
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 2
54944: PUSH
54945: LD_INT 3
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: LD_INT 3
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: LD_INT 1
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55009: LD_ADDR_VAR 0 27
55013: PUSH
55014: LD_INT 0
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 2
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: PUSH
55145: LD_INT 2
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: LD_INT 2
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: LD_INT 2
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: NEG
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 2
55196: NEG
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: LD_INT 2
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: LD_INT 2
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 2
55231: NEG
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 3
55242: NEG
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 3
55254: NEG
55255: PUSH
55256: LD_INT 2
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55289: LD_ADDR_VAR 0 28
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: LD_INT 2
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: LD_INT 2
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 2
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: LD_INT 2
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 2
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: NEG
55489: PUSH
55490: LD_INT 2
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 2
55500: NEG
55501: PUSH
55502: LD_INT 3
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: LD_INT 3
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 3
55524: NEG
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 3
55536: NEG
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55571: LD_ADDR_VAR 0 29
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: LD_INT 2
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: NEG
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: NEG
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 2
55761: NEG
55762: PUSH
55763: LD_INT 3
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 2
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 3
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: LD_INT 3
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: LD_INT 2
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 3
55815: NEG
55816: PUSH
55817: LD_INT 2
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55850: LD_ADDR_VAR 0 30
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: LD_INT 2
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: LD_INT 2
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 2
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 2
55985: PUSH
55986: LD_INT 2
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: LD_INT 2
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 2
56016: NEG
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: LD_INT 3
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 3
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: LD_INT 3
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 2
56082: NEG
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 3
56093: NEG
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56128: LD_ADDR_VAR 0 31
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 2
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 2
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 2
56252: PUSH
56253: LD_INT 2
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 2
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 2
56293: NEG
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: NEG
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: LD_INT 3
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 2
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 3
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 3
56371: NEG
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56406: LD_ADDR_VAR 0 32
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 2
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 2
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: LD_INT 2
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: LD_INT 2
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: LD_INT 1
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: LD_INT 3
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: LD_INT 2
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 3
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: PUSH
56629: LD_INT 3
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 3
56649: NEG
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56684: LD_ADDR_VAR 0 33
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: LD_INT 2
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 1
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 2
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 2
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: LD_INT 2
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 2
56839: NEG
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 2
56850: NEG
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 2
56862: NEG
56863: PUSH
56864: LD_INT 2
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: LD_INT 3
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 2
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 3
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 3
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 3
56928: NEG
56929: PUSH
56930: LD_INT 2
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56963: LD_ADDR_VAR 0 34
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 1
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: LD_INT 2
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 2
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 2
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: LD_INT 2
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: LD_INT 2
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 2
57119: NEG
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: NEG
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 3
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: LD_INT 2
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 3
57177: PUSH
57178: LD_INT 2
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: LD_INT 3
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 3
57208: NEG
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57243: LD_ADDR_VAR 0 35
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: LD_INT 0
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: LD_INT 1
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 0
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: NEG
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: NEG
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57355: LD_ADDR_VAR 0 36
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: LD_INT 0
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: LD_INT 1
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: LD_INT 2
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: LD_INT 2
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57467: LD_ADDR_VAR 0 37
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 1
57525: NEG
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: NEG
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
57579: LD_ADDR_VAR 0 38
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 1
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 1
57648: NEG
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 2
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
57691: LD_ADDR_VAR 0 39
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: LD_INT 2
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
57803: LD_ADDR_VAR 0 40
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: LD_INT 0
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: LD_INT 1
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57915: LD_ADDR_VAR 0 41
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: LD_INT 1
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: LD_INT 1
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: LD_INT 2
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 2
58081: NEG
58082: PUSH
58083: LD_INT 1
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 2
58093: NEG
58094: PUSH
58095: LD_INT 2
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 2
58105: NEG
58106: PUSH
58107: LD_INT 3
58109: NEG
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 2
58117: PUSH
58118: LD_INT 1
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 3
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 3
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 3
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 3
58158: PUSH
58159: LD_INT 3
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 2
58168: PUSH
58169: LD_INT 3
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 3
58189: NEG
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 3
58200: NEG
58201: PUSH
58202: LD_INT 1
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 3
58212: NEG
58213: PUSH
58214: LD_INT 2
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 3
58224: NEG
58225: PUSH
58226: LD_INT 3
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58265: LD_ADDR_VAR 0 42
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: LD_INT 0
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: LD_INT 1
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: LD_INT 2
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: LD_INT 2
58361: NEG
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: PUSH
58381: LD_INT 1
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 2
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: LD_INT 2
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: LD_INT 2
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 2
58431: NEG
58432: PUSH
58433: LD_INT 1
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 2
58443: NEG
58444: PUSH
58445: LD_INT 2
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: NEG
58456: PUSH
58457: LD_INT 3
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: LD_INT 3
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: LD_INT 3
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 3
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 3
58511: PUSH
58512: LD_INT 3
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 2
58521: PUSH
58522: LD_INT 3
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: LD_INT 3
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: LD_INT 3
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 1
58551: NEG
58552: PUSH
58553: LD_INT 2
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 3
58562: NEG
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 3
58574: NEG
58575: PUSH
58576: LD_INT 3
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58615: LD_ADDR_VAR 0 43
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: LD_INT 2
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: LD_INT 2
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 1
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 2
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: LD_INT 1
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: LD_INT 2
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: LD_INT 2
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 2
58781: NEG
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: LD_INT 3
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: LD_INT 3
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 3
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 3
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 3
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: LD_INT 3
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: NEG
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 2
58900: NEG
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 3
58911: NEG
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 3
58922: NEG
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58963: LD_ADDR_VAR 0 44
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 0
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: LD_INT 1
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 1
59021: NEG
59022: PUSH
59023: LD_INT 0
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: LD_INT 2
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: LD_INT 2
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: PUSH
59098: LD_INT 2
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 1
59107: NEG
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 2
59118: NEG
59119: PUSH
59120: LD_INT 0
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: NEG
59130: PUSH
59131: LD_INT 1
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 2
59141: NEG
59142: PUSH
59143: LD_INT 2
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: NEG
59154: PUSH
59155: LD_INT 3
59157: NEG
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 2
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 3
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 3
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 3
59196: PUSH
59197: LD_INT 2
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 3
59206: PUSH
59207: LD_INT 3
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 2
59216: PUSH
59217: LD_INT 3
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 3
59237: NEG
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 3
59248: NEG
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 3
59260: NEG
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 3
59272: NEG
59273: PUSH
59274: LD_INT 3
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59313: LD_ADDR_VAR 0 45
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 0
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: NEG
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 1
59382: NEG
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: LD_INT 2
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 2
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 2
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 2
59438: PUSH
59439: LD_INT 2
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: LD_INT 2
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: LD_INT 2
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 2
59479: NEG
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 2
59491: NEG
59492: PUSH
59493: LD_INT 2
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 2
59503: NEG
59504: PUSH
59505: LD_INT 3
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: LD_INT 3
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: LD_INT 3
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: LD_INT 2
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 3
59549: PUSH
59550: LD_INT 2
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 3
59559: PUSH
59560: LD_INT 3
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 2
59569: PUSH
59570: LD_INT 3
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: LD_INT 3
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: LD_INT 3
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: LD_INT 2
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 3
59610: NEG
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 3
59622: NEG
59623: PUSH
59624: LD_INT 3
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59663: LD_ADDR_VAR 0 46
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 0
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: LD_INT 0
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: LD_INT 1
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: LD_INT 1
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 1
59721: NEG
59722: PUSH
59723: LD_INT 0
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: NEG
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: LD_INT 2
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: LD_INT 2
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 1
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 2
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: LD_INT 2
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: LD_INT 2
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: LD_INT 1
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: NEG
59830: PUSH
59831: LD_INT 0
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 2
59840: NEG
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: NEG
59853: PUSH
59854: LD_INT 3
59856: NEG
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: LD_INT 3
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 2
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 3
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 3
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: LD_INT 3
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: LD_INT 3
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: NEG
59938: PUSH
59939: LD_INT 2
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 2
59948: NEG
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 3
59959: NEG
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 3
59970: NEG
59971: PUSH
59972: LD_INT 1
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60011: LD_ADDR_VAR 0 47
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: LD_INT 1
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: LD_INT 1
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: LD_INT 0
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 1
60080: NEG
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: NEG
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: LD_INT 2
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 2
60126: NEG
60127: PUSH
60128: LD_INT 1
60130: NEG
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 2
60138: NEG
60139: PUSH
60140: LD_INT 2
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60162: LD_ADDR_VAR 0 48
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: LD_INT 0
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: LD_INT 1
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: LD_INT 1
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: LD_INT 2
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: LD_INT 2
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: LD_INT 1
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 2
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60309: LD_ADDR_VAR 0 49
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: LD_INT 1
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 1
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 2
60401: PUSH
60402: LD_INT 0
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 2
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 2
60421: PUSH
60422: LD_INT 2
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: LD_INT 2
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60453: LD_ADDR_VAR 0 50
60457: PUSH
60458: LD_INT 0
60460: PUSH
60461: LD_INT 0
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: LD_INT 1
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 2
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 2
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: PUSH
60555: LD_INT 2
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: LD_INT 2
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 1
60574: NEG
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60597: LD_ADDR_VAR 0 51
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 1
60666: NEG
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: LD_INT 2
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: LD_INT 2
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 2
60709: NEG
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 2
60720: NEG
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60744: LD_ADDR_VAR 0 52
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: LD_INT 1
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: LD_INT 0
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 1
60825: NEG
60826: PUSH
60827: LD_INT 2
60829: NEG
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 2
60848: NEG
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 2
60859: NEG
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 2
60871: NEG
60872: PUSH
60873: LD_INT 2
60875: NEG
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60895: LD_ADDR_VAR 0 53
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 0
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 1
60976: NEG
60977: PUSH
60978: LD_INT 2
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: LD_INT 2
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 2
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 2
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 2
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: LD_INT 2
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 2
61071: NEG
61072: PUSH
61073: LD_INT 0
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 2
61082: NEG
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: LD_INT 2
61098: NEG
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61125: LD_ADDR_VAR 0 54
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: LD_INT 0
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: LD_INT 1
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: LD_INT 1
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: LD_INT 1
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 1
61206: NEG
61207: PUSH
61208: LD_INT 2
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: LD_INT 2
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: LD_INT 1
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 2
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 2
61250: PUSH
61251: LD_INT 1
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 2
61260: PUSH
61261: LD_INT 2
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: PUSH
61271: LD_INT 2
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: LD_INT 2
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 1
61290: NEG
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 2
61301: NEG
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 2
61312: NEG
61313: PUSH
61314: LD_INT 1
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 2
61324: NEG
61325: PUSH
61326: LD_INT 2
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61355: LD_ADDR_VAR 0 55
61359: PUSH
61360: LD_INT 0
61362: PUSH
61363: LD_INT 0
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 0
61372: PUSH
61373: LD_INT 1
61375: NEG
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 1
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: LD_INT 1
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 1
61413: NEG
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 1
61424: NEG
61425: PUSH
61426: LD_INT 1
61428: NEG
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: LD_INT 2
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 2
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: LD_INT 1
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 2
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 2
61480: PUSH
61481: LD_INT 1
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 2
61490: PUSH
61491: LD_INT 2
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 1
61500: PUSH
61501: LD_INT 2
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: LD_INT 2
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 2
61531: NEG
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: LD_INT 2
61558: NEG
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61585: LD_ADDR_VAR 0 56
61589: PUSH
61590: LD_INT 0
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 0
61602: PUSH
61603: LD_INT 1
61605: NEG
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: LD_INT 1
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: LD_INT 1
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 1
61643: NEG
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 1
61666: NEG
61667: PUSH
61668: LD_INT 2
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: LD_INT 2
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: PUSH
61690: LD_INT 1
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 2
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 2
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 2
61720: PUSH
61721: LD_INT 2
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: PUSH
61731: LD_INT 2
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: LD_INT 2
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: LD_INT 1
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 2
61761: NEG
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 2
61772: NEG
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 2
61784: NEG
61785: PUSH
61786: LD_INT 2
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61815: LD_ADDR_VAR 0 57
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 0
61832: PUSH
61833: LD_INT 1
61835: NEG
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 1
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: LD_INT 1
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: LD_INT 1
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 1
61896: NEG
61897: PUSH
61898: LD_INT 2
61900: NEG
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 2
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 1
61919: PUSH
61920: LD_INT 1
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 2
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 2
61940: PUSH
61941: LD_INT 1
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 2
61950: PUSH
61951: LD_INT 2
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: LD_INT 2
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: LD_INT 2
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 2
61991: NEG
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 2
62002: NEG
62003: PUSH
62004: LD_INT 1
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 2
62014: NEG
62015: PUSH
62016: LD_INT 2
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62045: LD_ADDR_VAR 0 58
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: LD_INT 1
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: LD_INT 1
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 0
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: LD_INT 1
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: LD_INT 2
62130: NEG
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: LD_INT 2
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 2
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 2
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 2
62180: PUSH
62181: LD_INT 2
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: LD_INT 2
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: LD_INT 2
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: LD_INT 1
62210: NEG
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 2
62221: NEG
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 2
62232: NEG
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 2
62244: NEG
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62275: LD_ADDR_VAR 0 59
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 0
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 1
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: LD_INT 1
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 0
62323: PUSH
62324: LD_INT 1
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 1
62333: NEG
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 1
62344: NEG
62345: PUSH
62346: LD_INT 1
62348: NEG
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62363: LD_ADDR_VAR 0 60
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 1
62432: NEG
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62451: LD_ADDR_VAR 0 61
62455: PUSH
62456: LD_INT 0
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: LD_INT 1
62471: NEG
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 1
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: PUSH
62490: LD_INT 1
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 0
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 1
62509: NEG
62510: PUSH
62511: LD_INT 0
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 1
62520: NEG
62521: PUSH
62522: LD_INT 1
62524: NEG
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62539: LD_ADDR_VAR 0 62
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: LD_INT 0
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 0
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: LD_INT 1
62577: PUSH
62578: LD_INT 1
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: LD_INT 1
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 1
62597: NEG
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 1
62608: NEG
62609: PUSH
62610: LD_INT 1
62612: NEG
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62627: LD_ADDR_VAR 0 63
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: LD_INT 0
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: LD_INT 1
62647: NEG
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: LD_INT 1
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 1
62685: NEG
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 1
62696: NEG
62697: PUSH
62698: LD_INT 1
62700: NEG
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
62715: LD_ADDR_VAR 0 64
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: LD_INT 1
62735: NEG
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 1
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: PUSH
62754: LD_INT 1
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 0
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: LD_INT 0
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 1
62784: NEG
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: ST_TO_ADDR
// end ; 1 :
62803: GO 68700
62805: LD_INT 1
62807: DOUBLE
62808: EQUAL
62809: IFTRUE 62813
62811: GO 65436
62813: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62814: LD_ADDR_VAR 0 11
62818: PUSH
62819: LD_INT 1
62821: NEG
62822: PUSH
62823: LD_INT 3
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: LD_INT 3
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: LD_INT 2
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: LIST
62857: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62858: LD_ADDR_VAR 0 12
62862: PUSH
62863: LD_INT 2
62865: PUSH
62866: LD_INT 1
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 3
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 3
62886: PUSH
62887: LD_INT 1
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: LIST
62898: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62899: LD_ADDR_VAR 0 13
62903: PUSH
62904: LD_INT 3
62906: PUSH
62907: LD_INT 2
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 3
62916: PUSH
62917: LD_INT 3
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 2
62926: PUSH
62927: LD_INT 3
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: LIST
62938: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62939: LD_ADDR_VAR 0 14
62943: PUSH
62944: LD_INT 1
62946: PUSH
62947: LD_INT 3
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 0
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 1
62966: NEG
62967: PUSH
62968: LD_INT 2
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: LIST
62979: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62980: LD_ADDR_VAR 0 15
62984: PUSH
62985: LD_INT 2
62987: NEG
62988: PUSH
62989: LD_INT 1
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 3
62998: NEG
62999: PUSH
63000: LD_INT 0
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: LD_INT 3
63009: NEG
63010: PUSH
63011: LD_INT 1
63013: NEG
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: LIST
63023: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63024: LD_ADDR_VAR 0 16
63028: PUSH
63029: LD_INT 2
63031: NEG
63032: PUSH
63033: LD_INT 3
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 3
63043: NEG
63044: PUSH
63045: LD_INT 2
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 3
63055: NEG
63056: PUSH
63057: LD_INT 3
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: LIST
63069: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63070: LD_ADDR_VAR 0 17
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: PUSH
63079: LD_INT 3
63081: NEG
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: LD_INT 3
63092: NEG
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 1
63100: PUSH
63101: LD_INT 2
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: LIST
63113: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63114: LD_ADDR_VAR 0 18
63118: PUSH
63119: LD_INT 2
63121: PUSH
63122: LD_INT 1
63124: NEG
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 3
63132: PUSH
63133: LD_INT 0
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 3
63142: PUSH
63143: LD_INT 1
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: LIST
63154: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63155: LD_ADDR_VAR 0 19
63159: PUSH
63160: LD_INT 3
63162: PUSH
63163: LD_INT 2
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 3
63172: PUSH
63173: LD_INT 3
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 2
63182: PUSH
63183: LD_INT 3
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: LIST
63194: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63195: LD_ADDR_VAR 0 20
63199: PUSH
63200: LD_INT 1
63202: PUSH
63203: LD_INT 3
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: LD_INT 3
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: LD_INT 2
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: LIST
63235: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63236: LD_ADDR_VAR 0 21
63240: PUSH
63241: LD_INT 2
63243: NEG
63244: PUSH
63245: LD_INT 1
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 3
63254: NEG
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 3
63265: NEG
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: LIST
63279: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63280: LD_ADDR_VAR 0 22
63284: PUSH
63285: LD_INT 2
63287: NEG
63288: PUSH
63289: LD_INT 3
63291: NEG
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 3
63299: NEG
63300: PUSH
63301: LD_INT 2
63303: NEG
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 3
63311: NEG
63312: PUSH
63313: LD_INT 3
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: LIST
63325: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
63326: LD_ADDR_VAR 0 23
63330: PUSH
63331: LD_INT 0
63333: PUSH
63334: LD_INT 3
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 1
63344: NEG
63345: PUSH
63346: LD_INT 4
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: LD_INT 3
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: LIST
63369: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
63370: LD_ADDR_VAR 0 24
63374: PUSH
63375: LD_INT 3
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 3
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 4
63398: PUSH
63399: LD_INT 1
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: LIST
63410: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
63411: LD_ADDR_VAR 0 25
63415: PUSH
63416: LD_INT 3
63418: PUSH
63419: LD_INT 3
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 4
63428: PUSH
63429: LD_INT 3
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 3
63438: PUSH
63439: LD_INT 4
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: LIST
63450: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
63451: LD_ADDR_VAR 0 26
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: LD_INT 3
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: LD_INT 4
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: LD_INT 3
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: LIST
63491: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
63492: LD_ADDR_VAR 0 27
63496: PUSH
63497: LD_INT 3
63499: NEG
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 3
63510: NEG
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 4
63521: NEG
63522: PUSH
63523: LD_INT 1
63525: NEG
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: LIST
63535: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
63536: LD_ADDR_VAR 0 28
63540: PUSH
63541: LD_INT 3
63543: NEG
63544: PUSH
63545: LD_INT 3
63547: NEG
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 3
63555: NEG
63556: PUSH
63557: LD_INT 4
63559: NEG
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 4
63567: NEG
63568: PUSH
63569: LD_INT 3
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: LIST
63581: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
63582: LD_ADDR_VAR 0 29
63586: PUSH
63587: LD_INT 1
63589: NEG
63590: PUSH
63591: LD_INT 3
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 0
63601: PUSH
63602: LD_INT 3
63604: NEG
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 1
63612: PUSH
63613: LD_INT 2
63615: NEG
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 1
63623: NEG
63624: PUSH
63625: LD_INT 4
63627: NEG
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: LD_INT 4
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: LD_INT 3
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: LD_INT 5
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 0
63669: PUSH
63670: LD_INT 5
63672: NEG
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 1
63680: PUSH
63681: LD_INT 4
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 1
63691: NEG
63692: PUSH
63693: LD_INT 6
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 0
63703: PUSH
63704: LD_INT 6
63706: NEG
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: PUSH
63715: LD_INT 5
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
63737: LD_ADDR_VAR 0 30
63741: PUSH
63742: LD_INT 2
63744: PUSH
63745: LD_INT 1
63747: NEG
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 3
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 3
63765: PUSH
63766: LD_INT 1
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 3
63775: PUSH
63776: LD_INT 1
63778: NEG
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 4
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 4
63796: PUSH
63797: LD_INT 1
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 4
63806: PUSH
63807: LD_INT 1
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 5
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 5
63827: PUSH
63828: LD_INT 1
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 5
63837: PUSH
63838: LD_INT 1
63840: NEG
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 6
63848: PUSH
63849: LD_INT 0
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 6
63858: PUSH
63859: LD_INT 1
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
63880: LD_ADDR_VAR 0 31
63884: PUSH
63885: LD_INT 3
63887: PUSH
63888: LD_INT 2
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 3
63897: PUSH
63898: LD_INT 3
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 2
63907: PUSH
63908: LD_INT 3
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 4
63917: PUSH
63918: LD_INT 3
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 4
63927: PUSH
63928: LD_INT 4
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 3
63937: PUSH
63938: LD_INT 4
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 5
63947: PUSH
63948: LD_INT 4
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 5
63957: PUSH
63958: LD_INT 5
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 4
63967: PUSH
63968: LD_INT 5
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 6
63977: PUSH
63978: LD_INT 5
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 6
63987: PUSH
63988: LD_INT 6
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 5
63997: PUSH
63998: LD_INT 6
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64019: LD_ADDR_VAR 0 32
64023: PUSH
64024: LD_INT 1
64026: PUSH
64027: LD_INT 3
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: LD_INT 3
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 1
64046: NEG
64047: PUSH
64048: LD_INT 2
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 1
64057: PUSH
64058: LD_INT 4
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: LD_INT 4
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 1
64077: NEG
64078: PUSH
64079: LD_INT 3
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 1
64088: PUSH
64089: LD_INT 5
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: LD_INT 5
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 1
64108: NEG
64109: PUSH
64110: LD_INT 4
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 1
64119: PUSH
64120: LD_INT 6
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: LD_INT 6
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 1
64139: NEG
64140: PUSH
64141: LD_INT 5
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64162: LD_ADDR_VAR 0 33
64166: PUSH
64167: LD_INT 2
64169: NEG
64170: PUSH
64171: LD_INT 1
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 3
64180: NEG
64181: PUSH
64182: LD_INT 0
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 3
64191: NEG
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 3
64203: NEG
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 4
64214: NEG
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 4
64225: NEG
64226: PUSH
64227: LD_INT 1
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 4
64237: NEG
64238: PUSH
64239: LD_INT 1
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 5
64248: NEG
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 5
64259: NEG
64260: PUSH
64261: LD_INT 1
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 5
64271: NEG
64272: PUSH
64273: LD_INT 1
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 6
64282: NEG
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 6
64293: NEG
64294: PUSH
64295: LD_INT 1
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
64317: LD_ADDR_VAR 0 34
64321: PUSH
64322: LD_INT 2
64324: NEG
64325: PUSH
64326: LD_INT 3
64328: NEG
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 3
64336: NEG
64337: PUSH
64338: LD_INT 2
64340: NEG
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 3
64348: NEG
64349: PUSH
64350: LD_INT 3
64352: NEG
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 3
64360: NEG
64361: PUSH
64362: LD_INT 4
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 4
64372: NEG
64373: PUSH
64374: LD_INT 3
64376: NEG
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 4
64384: NEG
64385: PUSH
64386: LD_INT 4
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 4
64396: NEG
64397: PUSH
64398: LD_INT 5
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 5
64408: NEG
64409: PUSH
64410: LD_INT 4
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 5
64420: NEG
64421: PUSH
64422: LD_INT 5
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 5
64432: NEG
64433: PUSH
64434: LD_INT 6
64436: NEG
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 6
64444: NEG
64445: PUSH
64446: LD_INT 5
64448: NEG
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 6
64456: NEG
64457: PUSH
64458: LD_INT 6
64460: NEG
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
64480: LD_ADDR_VAR 0 41
64484: PUSH
64485: LD_INT 0
64487: PUSH
64488: LD_INT 2
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 1
64498: NEG
64499: PUSH
64500: LD_INT 3
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: LD_INT 2
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: LIST
64523: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
64524: LD_ADDR_VAR 0 42
64528: PUSH
64529: LD_INT 2
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 2
64541: PUSH
64542: LD_INT 1
64544: NEG
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 3
64552: PUSH
64553: LD_INT 1
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: LIST
64564: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
64565: LD_ADDR_VAR 0 43
64569: PUSH
64570: LD_INT 2
64572: PUSH
64573: LD_INT 2
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 3
64582: PUSH
64583: LD_INT 2
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 2
64592: PUSH
64593: LD_INT 3
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: LIST
64604: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
64605: LD_ADDR_VAR 0 44
64609: PUSH
64610: LD_INT 0
64612: PUSH
64613: LD_INT 2
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 1
64622: PUSH
64623: LD_INT 3
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: LD_INT 2
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: LIST
64645: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64646: LD_ADDR_VAR 0 45
64650: PUSH
64651: LD_INT 2
64653: NEG
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 2
64664: NEG
64665: PUSH
64666: LD_INT 1
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 3
64675: NEG
64676: PUSH
64677: LD_INT 1
64679: NEG
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: LIST
64689: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
64690: LD_ADDR_VAR 0 46
64694: PUSH
64695: LD_INT 2
64697: NEG
64698: PUSH
64699: LD_INT 2
64701: NEG
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 2
64709: NEG
64710: PUSH
64711: LD_INT 3
64713: NEG
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 3
64721: NEG
64722: PUSH
64723: LD_INT 2
64725: NEG
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: LIST
64735: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
64736: LD_ADDR_VAR 0 47
64740: PUSH
64741: LD_INT 2
64743: NEG
64744: PUSH
64745: LD_INT 3
64747: NEG
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 1
64755: NEG
64756: PUSH
64757: LD_INT 3
64759: NEG
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
64769: LD_ADDR_VAR 0 48
64773: PUSH
64774: LD_INT 1
64776: PUSH
64777: LD_INT 2
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 2
64787: PUSH
64788: LD_INT 1
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
64800: LD_ADDR_VAR 0 49
64804: PUSH
64805: LD_INT 3
64807: PUSH
64808: LD_INT 1
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 3
64817: PUSH
64818: LD_INT 2
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
64829: LD_ADDR_VAR 0 50
64833: PUSH
64834: LD_INT 2
64836: PUSH
64837: LD_INT 3
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 1
64846: PUSH
64847: LD_INT 3
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64858: LD_ADDR_VAR 0 51
64862: PUSH
64863: LD_INT 1
64865: NEG
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 2
64876: NEG
64877: PUSH
64878: LD_INT 1
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64889: LD_ADDR_VAR 0 52
64893: PUSH
64894: LD_INT 3
64896: NEG
64897: PUSH
64898: LD_INT 1
64900: NEG
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 3
64908: NEG
64909: PUSH
64910: LD_INT 2
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64922: LD_ADDR_VAR 0 53
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: LD_INT 3
64933: NEG
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 0
64941: PUSH
64942: LD_INT 3
64944: NEG
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: LD_INT 2
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: LIST
64965: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64966: LD_ADDR_VAR 0 54
64970: PUSH
64971: LD_INT 2
64973: PUSH
64974: LD_INT 1
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 3
64984: PUSH
64985: LD_INT 0
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 3
64994: PUSH
64995: LD_INT 1
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: LIST
65006: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65007: LD_ADDR_VAR 0 55
65011: PUSH
65012: LD_INT 3
65014: PUSH
65015: LD_INT 2
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 3
65024: PUSH
65025: LD_INT 3
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 2
65034: PUSH
65035: LD_INT 3
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: LIST
65046: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65047: LD_ADDR_VAR 0 56
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: LD_INT 3
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 0
65064: PUSH
65065: LD_INT 3
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 1
65074: NEG
65075: PUSH
65076: LD_INT 2
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: LIST
65087: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65088: LD_ADDR_VAR 0 57
65092: PUSH
65093: LD_INT 2
65095: NEG
65096: PUSH
65097: LD_INT 1
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 3
65106: NEG
65107: PUSH
65108: LD_INT 0
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 3
65117: NEG
65118: PUSH
65119: LD_INT 1
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: LIST
65131: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65132: LD_ADDR_VAR 0 58
65136: PUSH
65137: LD_INT 2
65139: NEG
65140: PUSH
65141: LD_INT 3
65143: NEG
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 3
65151: NEG
65152: PUSH
65153: LD_INT 2
65155: NEG
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 3
65163: NEG
65164: PUSH
65165: LD_INT 3
65167: NEG
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: LIST
65177: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65178: LD_ADDR_VAR 0 59
65182: PUSH
65183: LD_INT 1
65185: NEG
65186: PUSH
65187: LD_INT 2
65189: NEG
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: LD_INT 2
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: LD_INT 1
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: LIST
65221: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65222: LD_ADDR_VAR 0 60
65226: PUSH
65227: LD_INT 1
65229: PUSH
65230: LD_INT 1
65232: NEG
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 2
65240: PUSH
65241: LD_INT 0
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 2
65250: PUSH
65251: LD_INT 1
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: LIST
65262: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65263: LD_ADDR_VAR 0 61
65267: PUSH
65268: LD_INT 2
65270: PUSH
65271: LD_INT 1
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 2
65280: PUSH
65281: LD_INT 2
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 1
65290: PUSH
65291: LD_INT 2
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: LIST
65302: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65303: LD_ADDR_VAR 0 62
65307: PUSH
65308: LD_INT 1
65310: PUSH
65311: LD_INT 2
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 0
65320: PUSH
65321: LD_INT 2
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 1
65330: NEG
65331: PUSH
65332: LD_INT 1
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: LIST
65343: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65344: LD_ADDR_VAR 0 63
65348: PUSH
65349: LD_INT 1
65351: NEG
65352: PUSH
65353: LD_INT 1
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 2
65362: NEG
65363: PUSH
65364: LD_INT 0
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 2
65373: NEG
65374: PUSH
65375: LD_INT 1
65377: NEG
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: LIST
65387: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65388: LD_ADDR_VAR 0 64
65392: PUSH
65393: LD_INT 1
65395: NEG
65396: PUSH
65397: LD_INT 2
65399: NEG
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 2
65407: NEG
65408: PUSH
65409: LD_INT 1
65411: NEG
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 2
65419: NEG
65420: PUSH
65421: LD_INT 2
65423: NEG
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: LIST
65433: ST_TO_ADDR
// end ; 2 :
65434: GO 68700
65436: LD_INT 2
65438: DOUBLE
65439: EQUAL
65440: IFTRUE 65444
65442: GO 68699
65444: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
65445: LD_ADDR_VAR 0 29
65449: PUSH
65450: LD_INT 4
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 4
65462: PUSH
65463: LD_INT 1
65465: NEG
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 5
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 5
65483: PUSH
65484: LD_INT 1
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 4
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 3
65503: PUSH
65504: LD_INT 0
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 3
65513: PUSH
65514: LD_INT 1
65516: NEG
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 3
65524: PUSH
65525: LD_INT 2
65527: NEG
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 5
65535: PUSH
65536: LD_INT 2
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 3
65545: PUSH
65546: LD_INT 3
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 3
65555: PUSH
65556: LD_INT 2
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 4
65565: PUSH
65566: LD_INT 3
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 4
65575: PUSH
65576: LD_INT 4
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 3
65585: PUSH
65586: LD_INT 4
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 2
65595: PUSH
65596: LD_INT 3
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 2
65605: PUSH
65606: LD_INT 2
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 4
65615: PUSH
65616: LD_INT 2
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 2
65625: PUSH
65626: LD_INT 4
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: LD_INT 4
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: LD_INT 3
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 1
65655: PUSH
65656: LD_INT 4
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 1
65665: PUSH
65666: LD_INT 5
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: LD_INT 5
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 1
65685: NEG
65686: PUSH
65687: LD_INT 4
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 1
65696: NEG
65697: PUSH
65698: LD_INT 3
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 2
65707: PUSH
65708: LD_INT 5
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 2
65717: NEG
65718: PUSH
65719: LD_INT 3
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 3
65728: NEG
65729: PUSH
65730: LD_INT 0
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 3
65739: NEG
65740: PUSH
65741: LD_INT 1
65743: NEG
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 2
65751: NEG
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 2
65762: NEG
65763: PUSH
65764: LD_INT 1
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 3
65773: NEG
65774: PUSH
65775: LD_INT 1
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 4
65784: NEG
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 4
65795: NEG
65796: PUSH
65797: LD_INT 1
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 4
65807: NEG
65808: PUSH
65809: LD_INT 2
65811: NEG
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 2
65819: NEG
65820: PUSH
65821: LD_INT 2
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 4
65830: NEG
65831: PUSH
65832: LD_INT 4
65834: NEG
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 4
65842: NEG
65843: PUSH
65844: LD_INT 5
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 3
65854: NEG
65855: PUSH
65856: LD_INT 4
65858: NEG
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 3
65866: NEG
65867: PUSH
65868: LD_INT 3
65870: NEG
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 4
65878: NEG
65879: PUSH
65880: LD_INT 3
65882: NEG
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 5
65890: NEG
65891: PUSH
65892: LD_INT 4
65894: NEG
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 5
65902: NEG
65903: PUSH
65904: LD_INT 5
65906: NEG
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 3
65914: NEG
65915: PUSH
65916: LD_INT 5
65918: NEG
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 5
65926: NEG
65927: PUSH
65928: LD_INT 3
65930: NEG
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
65983: LD_ADDR_VAR 0 30
65987: PUSH
65988: LD_INT 4
65990: PUSH
65991: LD_INT 4
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 4
66000: PUSH
66001: LD_INT 3
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 5
66010: PUSH
66011: LD_INT 4
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 5
66020: PUSH
66021: LD_INT 5
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 4
66030: PUSH
66031: LD_INT 5
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 3
66040: PUSH
66041: LD_INT 4
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 3
66050: PUSH
66051: LD_INT 3
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 5
66060: PUSH
66061: LD_INT 3
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 3
66070: PUSH
66071: LD_INT 5
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: LD_INT 3
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 0
66090: PUSH
66091: LD_INT 2
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 1
66100: PUSH
66101: LD_INT 3
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 1
66110: PUSH
66111: LD_INT 4
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 0
66120: PUSH
66121: LD_INT 4
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 1
66130: NEG
66131: PUSH
66132: LD_INT 3
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 1
66141: NEG
66142: PUSH
66143: LD_INT 2
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 2
66152: PUSH
66153: LD_INT 4
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 2
66162: NEG
66163: PUSH
66164: LD_INT 2
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 4
66173: NEG
66174: PUSH
66175: LD_INT 0
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 4
66184: NEG
66185: PUSH
66186: LD_INT 1
66188: NEG
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 3
66196: NEG
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 3
66207: NEG
66208: PUSH
66209: LD_INT 1
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 4
66218: NEG
66219: PUSH
66220: LD_INT 1
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 5
66229: NEG
66230: PUSH
66231: LD_INT 0
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 5
66240: NEG
66241: PUSH
66242: LD_INT 1
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 5
66252: NEG
66253: PUSH
66254: LD_INT 2
66256: NEG
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 3
66264: NEG
66265: PUSH
66266: LD_INT 2
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 3
66275: NEG
66276: PUSH
66277: LD_INT 3
66279: NEG
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 3
66287: NEG
66288: PUSH
66289: LD_INT 4
66291: NEG
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 2
66299: NEG
66300: PUSH
66301: LD_INT 3
66303: NEG
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 2
66311: NEG
66312: PUSH
66313: LD_INT 2
66315: NEG
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 3
66323: NEG
66324: PUSH
66325: LD_INT 2
66327: NEG
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 4
66335: NEG
66336: PUSH
66337: LD_INT 3
66339: NEG
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 4
66347: NEG
66348: PUSH
66349: LD_INT 4
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 2
66359: NEG
66360: PUSH
66361: LD_INT 4
66363: NEG
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 4
66371: NEG
66372: PUSH
66373: LD_INT 2
66375: NEG
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 0
66383: PUSH
66384: LD_INT 4
66386: NEG
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 0
66394: PUSH
66395: LD_INT 5
66397: NEG
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 1
66405: PUSH
66406: LD_INT 4
66408: NEG
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: LD_INT 3
66419: NEG
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 0
66427: PUSH
66428: LD_INT 3
66430: NEG
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 1
66438: NEG
66439: PUSH
66440: LD_INT 4
66442: NEG
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 1
66450: NEG
66451: PUSH
66452: LD_INT 5
66454: NEG
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 2
66462: PUSH
66463: LD_INT 3
66465: NEG
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 2
66473: NEG
66474: PUSH
66475: LD_INT 5
66477: NEG
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: LIST
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
66530: LD_ADDR_VAR 0 31
66534: PUSH
66535: LD_INT 0
66537: PUSH
66538: LD_INT 4
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 0
66547: PUSH
66548: LD_INT 3
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 1
66557: PUSH
66558: LD_INT 4
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 1
66567: PUSH
66568: LD_INT 5
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: LD_INT 5
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PUSH
66585: LD_INT 1
66587: NEG
66588: PUSH
66589: LD_INT 4
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 1
66598: NEG
66599: PUSH
66600: LD_INT 3
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 2
66609: PUSH
66610: LD_INT 5
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 2
66619: NEG
66620: PUSH
66621: LD_INT 3
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 3
66630: NEG
66631: PUSH
66632: LD_INT 0
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 3
66641: NEG
66642: PUSH
66643: LD_INT 1
66645: NEG
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 2
66653: NEG
66654: PUSH
66655: LD_INT 0
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 2
66664: NEG
66665: PUSH
66666: LD_INT 1
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 3
66675: NEG
66676: PUSH
66677: LD_INT 1
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 4
66686: NEG
66687: PUSH
66688: LD_INT 0
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 4
66697: NEG
66698: PUSH
66699: LD_INT 1
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 4
66709: NEG
66710: PUSH
66711: LD_INT 2
66713: NEG
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 2
66721: NEG
66722: PUSH
66723: LD_INT 2
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 4
66732: NEG
66733: PUSH
66734: LD_INT 4
66736: NEG
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 4
66744: NEG
66745: PUSH
66746: LD_INT 5
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 3
66756: NEG
66757: PUSH
66758: LD_INT 4
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 3
66768: NEG
66769: PUSH
66770: LD_INT 3
66772: NEG
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 4
66780: NEG
66781: PUSH
66782: LD_INT 3
66784: NEG
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 5
66792: NEG
66793: PUSH
66794: LD_INT 4
66796: NEG
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 5
66804: NEG
66805: PUSH
66806: LD_INT 5
66808: NEG
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: LD_INT 3
66816: NEG
66817: PUSH
66818: LD_INT 5
66820: NEG
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 5
66828: NEG
66829: PUSH
66830: LD_INT 3
66832: NEG
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 0
66840: PUSH
66841: LD_INT 3
66843: NEG
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 0
66851: PUSH
66852: LD_INT 4
66854: NEG
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 1
66862: PUSH
66863: LD_INT 3
66865: NEG
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 1
66873: PUSH
66874: LD_INT 2
66876: NEG
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 0
66884: PUSH
66885: LD_INT 2
66887: NEG
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 1
66895: NEG
66896: PUSH
66897: LD_INT 3
66899: NEG
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 1
66907: NEG
66908: PUSH
66909: LD_INT 4
66911: NEG
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 2
66919: PUSH
66920: LD_INT 2
66922: NEG
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 2
66930: NEG
66931: PUSH
66932: LD_INT 4
66934: NEG
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 4
66942: PUSH
66943: LD_INT 0
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 4
66952: PUSH
66953: LD_INT 1
66955: NEG
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 5
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 5
66973: PUSH
66974: LD_INT 1
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 4
66983: PUSH
66984: LD_INT 1
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 3
66993: PUSH
66994: LD_INT 0
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 3
67003: PUSH
67004: LD_INT 1
67006: NEG
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 3
67014: PUSH
67015: LD_INT 2
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 5
67025: PUSH
67026: LD_INT 2
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67080: LD_ADDR_VAR 0 32
67084: PUSH
67085: LD_INT 4
67087: NEG
67088: PUSH
67089: LD_INT 0
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 4
67098: NEG
67099: PUSH
67100: LD_INT 1
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 3
67110: NEG
67111: PUSH
67112: LD_INT 0
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 3
67121: NEG
67122: PUSH
67123: LD_INT 1
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 4
67132: NEG
67133: PUSH
67134: LD_INT 1
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 5
67143: NEG
67144: PUSH
67145: LD_INT 0
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 5
67154: NEG
67155: PUSH
67156: LD_INT 1
67158: NEG
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 5
67166: NEG
67167: PUSH
67168: LD_INT 2
67170: NEG
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 3
67178: NEG
67179: PUSH
67180: LD_INT 2
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 3
67189: NEG
67190: PUSH
67191: LD_INT 3
67193: NEG
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: LD_INT 3
67201: NEG
67202: PUSH
67203: LD_INT 4
67205: NEG
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 2
67213: NEG
67214: PUSH
67215: LD_INT 3
67217: NEG
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 2
67225: NEG
67226: PUSH
67227: LD_INT 2
67229: NEG
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 3
67237: NEG
67238: PUSH
67239: LD_INT 2
67241: NEG
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 4
67249: NEG
67250: PUSH
67251: LD_INT 3
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 4
67261: NEG
67262: PUSH
67263: LD_INT 4
67265: NEG
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 2
67273: NEG
67274: PUSH
67275: LD_INT 4
67277: NEG
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 4
67285: NEG
67286: PUSH
67287: LD_INT 2
67289: NEG
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 0
67297: PUSH
67298: LD_INT 4
67300: NEG
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 0
67308: PUSH
67309: LD_INT 5
67311: NEG
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 1
67319: PUSH
67320: LD_INT 4
67322: NEG
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 1
67330: PUSH
67331: LD_INT 3
67333: NEG
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: LD_INT 3
67344: NEG
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 1
67352: NEG
67353: PUSH
67354: LD_INT 4
67356: NEG
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 1
67364: NEG
67365: PUSH
67366: LD_INT 5
67368: NEG
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 2
67376: PUSH
67377: LD_INT 3
67379: NEG
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 2
67387: NEG
67388: PUSH
67389: LD_INT 5
67391: NEG
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 3
67399: PUSH
67400: LD_INT 0
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 3
67409: PUSH
67410: LD_INT 1
67412: NEG
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 4
67420: PUSH
67421: LD_INT 0
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 4
67430: PUSH
67431: LD_INT 1
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 3
67440: PUSH
67441: LD_INT 1
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 2
67450: PUSH
67451: LD_INT 0
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 2
67460: PUSH
67461: LD_INT 1
67463: NEG
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 2
67471: PUSH
67472: LD_INT 2
67474: NEG
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 4
67482: PUSH
67483: LD_INT 2
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 4
67492: PUSH
67493: LD_INT 4
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 4
67502: PUSH
67503: LD_INT 3
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 5
67512: PUSH
67513: LD_INT 4
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 5
67522: PUSH
67523: LD_INT 5
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 4
67532: PUSH
67533: LD_INT 5
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 3
67542: PUSH
67543: LD_INT 4
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 3
67552: PUSH
67553: LD_INT 3
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 5
67562: PUSH
67563: LD_INT 3
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 3
67572: PUSH
67573: LD_INT 5
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: LIST
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
67627: LD_ADDR_VAR 0 33
67631: PUSH
67632: LD_INT 4
67634: NEG
67635: PUSH
67636: LD_INT 4
67638: NEG
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 4
67646: NEG
67647: PUSH
67648: LD_INT 5
67650: NEG
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 3
67658: NEG
67659: PUSH
67660: LD_INT 4
67662: NEG
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 3
67670: NEG
67671: PUSH
67672: LD_INT 3
67674: NEG
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 4
67682: NEG
67683: PUSH
67684: LD_INT 3
67686: NEG
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 5
67694: NEG
67695: PUSH
67696: LD_INT 4
67698: NEG
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 5
67706: NEG
67707: PUSH
67708: LD_INT 5
67710: NEG
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 3
67718: NEG
67719: PUSH
67720: LD_INT 5
67722: NEG
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 5
67730: NEG
67731: PUSH
67732: LD_INT 3
67734: NEG
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 0
67742: PUSH
67743: LD_INT 3
67745: NEG
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 0
67753: PUSH
67754: LD_INT 4
67756: NEG
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 1
67764: PUSH
67765: LD_INT 3
67767: NEG
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 1
67775: PUSH
67776: LD_INT 2
67778: NEG
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 0
67786: PUSH
67787: LD_INT 2
67789: NEG
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 1
67797: NEG
67798: PUSH
67799: LD_INT 3
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 1
67809: NEG
67810: PUSH
67811: LD_INT 4
67813: NEG
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 2
67821: PUSH
67822: LD_INT 2
67824: NEG
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 2
67832: NEG
67833: PUSH
67834: LD_INT 4
67836: NEG
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 4
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 4
67854: PUSH
67855: LD_INT 1
67857: NEG
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 5
67865: PUSH
67866: LD_INT 0
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 5
67875: PUSH
67876: LD_INT 1
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 4
67885: PUSH
67886: LD_INT 1
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 3
67895: PUSH
67896: LD_INT 0
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 3
67905: PUSH
67906: LD_INT 1
67908: NEG
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 3
67916: PUSH
67917: LD_INT 2
67919: NEG
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 5
67927: PUSH
67928: LD_INT 2
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 3
67937: PUSH
67938: LD_INT 3
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 3
67947: PUSH
67948: LD_INT 2
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 4
67957: PUSH
67958: LD_INT 3
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 4
67967: PUSH
67968: LD_INT 4
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 3
67977: PUSH
67978: LD_INT 4
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 2
67987: PUSH
67988: LD_INT 3
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 2
67997: PUSH
67998: LD_INT 2
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: PUSH
68005: LD_INT 4
68007: PUSH
68008: LD_INT 2
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 2
68017: PUSH
68018: LD_INT 4
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 0
68027: PUSH
68028: LD_INT 4
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 0
68037: PUSH
68038: LD_INT 3
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 1
68047: PUSH
68048: LD_INT 4
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: PUSH
68055: LD_INT 1
68057: PUSH
68058: LD_INT 5
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: PUSH
68065: LD_INT 0
68067: PUSH
68068: LD_INT 5
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: PUSH
68075: LD_INT 1
68077: NEG
68078: PUSH
68079: LD_INT 4
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 1
68088: NEG
68089: PUSH
68090: LD_INT 3
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 2
68099: PUSH
68100: LD_INT 5
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 2
68109: NEG
68110: PUSH
68111: LD_INT 3
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: LIST
68141: LIST
68142: LIST
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68165: LD_ADDR_VAR 0 34
68169: PUSH
68170: LD_INT 0
68172: PUSH
68173: LD_INT 4
68175: NEG
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 0
68183: PUSH
68184: LD_INT 5
68186: NEG
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: PUSH
68192: LD_INT 1
68194: PUSH
68195: LD_INT 4
68197: NEG
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PUSH
68203: LD_INT 1
68205: PUSH
68206: LD_INT 3
68208: NEG
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 0
68216: PUSH
68217: LD_INT 3
68219: NEG
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 1
68227: NEG
68228: PUSH
68229: LD_INT 4
68231: NEG
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 1
68239: NEG
68240: PUSH
68241: LD_INT 5
68243: NEG
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 2
68251: PUSH
68252: LD_INT 3
68254: NEG
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 2
68262: NEG
68263: PUSH
68264: LD_INT 5
68266: NEG
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 3
68274: PUSH
68275: LD_INT 0
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 3
68284: PUSH
68285: LD_INT 1
68287: NEG
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 4
68295: PUSH
68296: LD_INT 0
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 4
68305: PUSH
68306: LD_INT 1
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 3
68315: PUSH
68316: LD_INT 1
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 2
68325: PUSH
68326: LD_INT 0
68328: PUSH
68329: EMPTY
68330: LIST
68331: LIST
68332: PUSH
68333: LD_INT 2
68335: PUSH
68336: LD_INT 1
68338: NEG
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 2
68346: PUSH
68347: LD_INT 2
68349: NEG
68350: PUSH
68351: EMPTY
68352: LIST
68353: LIST
68354: PUSH
68355: LD_INT 4
68357: PUSH
68358: LD_INT 2
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 4
68367: PUSH
68368: LD_INT 4
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 4
68377: PUSH
68378: LD_INT 3
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 5
68387: PUSH
68388: LD_INT 4
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 5
68397: PUSH
68398: LD_INT 5
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 4
68407: PUSH
68408: LD_INT 5
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 3
68417: PUSH
68418: LD_INT 4
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 3
68427: PUSH
68428: LD_INT 3
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 5
68437: PUSH
68438: LD_INT 3
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 3
68447: PUSH
68448: LD_INT 5
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 0
68457: PUSH
68458: LD_INT 3
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 0
68467: PUSH
68468: LD_INT 2
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 1
68477: PUSH
68478: LD_INT 3
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 1
68487: PUSH
68488: LD_INT 4
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 0
68497: PUSH
68498: LD_INT 4
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 1
68507: NEG
68508: PUSH
68509: LD_INT 3
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: LD_INT 1
68518: NEG
68519: PUSH
68520: LD_INT 2
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 2
68529: PUSH
68530: LD_INT 4
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 2
68539: NEG
68540: PUSH
68541: LD_INT 2
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 4
68550: NEG
68551: PUSH
68552: LD_INT 0
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: LD_INT 4
68561: NEG
68562: PUSH
68563: LD_INT 1
68565: NEG
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 3
68573: NEG
68574: PUSH
68575: LD_INT 0
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 3
68584: NEG
68585: PUSH
68586: LD_INT 1
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 4
68595: NEG
68596: PUSH
68597: LD_INT 1
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 5
68606: NEG
68607: PUSH
68608: LD_INT 0
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: LD_INT 5
68617: NEG
68618: PUSH
68619: LD_INT 1
68621: NEG
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 5
68629: NEG
68630: PUSH
68631: LD_INT 2
68633: NEG
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 3
68641: NEG
68642: PUSH
68643: LD_INT 2
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: ST_TO_ADDR
// end ; end ;
68697: GO 68700
68699: POP
// case btype of b_depot , b_warehouse :
68700: LD_VAR 0 1
68704: PUSH
68705: LD_INT 0
68707: DOUBLE
68708: EQUAL
68709: IFTRUE 68719
68711: LD_INT 1
68713: DOUBLE
68714: EQUAL
68715: IFTRUE 68719
68717: GO 68920
68719: POP
// case nation of nation_american :
68720: LD_VAR 0 5
68724: PUSH
68725: LD_INT 1
68727: DOUBLE
68728: EQUAL
68729: IFTRUE 68733
68731: GO 68789
68733: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
68734: LD_ADDR_VAR 0 9
68738: PUSH
68739: LD_VAR 0 11
68743: PUSH
68744: LD_VAR 0 12
68748: PUSH
68749: LD_VAR 0 13
68753: PUSH
68754: LD_VAR 0 14
68758: PUSH
68759: LD_VAR 0 15
68763: PUSH
68764: LD_VAR 0 16
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: PUSH
68777: LD_VAR 0 4
68781: PUSH
68782: LD_INT 1
68784: PLUS
68785: ARRAY
68786: ST_TO_ADDR
68787: GO 68918
68789: LD_INT 2
68791: DOUBLE
68792: EQUAL
68793: IFTRUE 68797
68795: GO 68853
68797: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
68798: LD_ADDR_VAR 0 9
68802: PUSH
68803: LD_VAR 0 17
68807: PUSH
68808: LD_VAR 0 18
68812: PUSH
68813: LD_VAR 0 19
68817: PUSH
68818: LD_VAR 0 20
68822: PUSH
68823: LD_VAR 0 21
68827: PUSH
68828: LD_VAR 0 22
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: PUSH
68841: LD_VAR 0 4
68845: PUSH
68846: LD_INT 1
68848: PLUS
68849: ARRAY
68850: ST_TO_ADDR
68851: GO 68918
68853: LD_INT 3
68855: DOUBLE
68856: EQUAL
68857: IFTRUE 68861
68859: GO 68917
68861: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
68862: LD_ADDR_VAR 0 9
68866: PUSH
68867: LD_VAR 0 23
68871: PUSH
68872: LD_VAR 0 24
68876: PUSH
68877: LD_VAR 0 25
68881: PUSH
68882: LD_VAR 0 26
68886: PUSH
68887: LD_VAR 0 27
68891: PUSH
68892: LD_VAR 0 28
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: PUSH
68905: LD_VAR 0 4
68909: PUSH
68910: LD_INT 1
68912: PLUS
68913: ARRAY
68914: ST_TO_ADDR
68915: GO 68918
68917: POP
68918: GO 69473
68920: LD_INT 2
68922: DOUBLE
68923: EQUAL
68924: IFTRUE 68934
68926: LD_INT 3
68928: DOUBLE
68929: EQUAL
68930: IFTRUE 68934
68932: GO 68990
68934: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
68935: LD_ADDR_VAR 0 9
68939: PUSH
68940: LD_VAR 0 29
68944: PUSH
68945: LD_VAR 0 30
68949: PUSH
68950: LD_VAR 0 31
68954: PUSH
68955: LD_VAR 0 32
68959: PUSH
68960: LD_VAR 0 33
68964: PUSH
68965: LD_VAR 0 34
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: PUSH
68978: LD_VAR 0 4
68982: PUSH
68983: LD_INT 1
68985: PLUS
68986: ARRAY
68987: ST_TO_ADDR
68988: GO 69473
68990: LD_INT 16
68992: DOUBLE
68993: EQUAL
68994: IFTRUE 69052
68996: LD_INT 17
68998: DOUBLE
68999: EQUAL
69000: IFTRUE 69052
69002: LD_INT 18
69004: DOUBLE
69005: EQUAL
69006: IFTRUE 69052
69008: LD_INT 19
69010: DOUBLE
69011: EQUAL
69012: IFTRUE 69052
69014: LD_INT 22
69016: DOUBLE
69017: EQUAL
69018: IFTRUE 69052
69020: LD_INT 20
69022: DOUBLE
69023: EQUAL
69024: IFTRUE 69052
69026: LD_INT 21
69028: DOUBLE
69029: EQUAL
69030: IFTRUE 69052
69032: LD_INT 23
69034: DOUBLE
69035: EQUAL
69036: IFTRUE 69052
69038: LD_INT 24
69040: DOUBLE
69041: EQUAL
69042: IFTRUE 69052
69044: LD_INT 25
69046: DOUBLE
69047: EQUAL
69048: IFTRUE 69052
69050: GO 69108
69052: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69053: LD_ADDR_VAR 0 9
69057: PUSH
69058: LD_VAR 0 35
69062: PUSH
69063: LD_VAR 0 36
69067: PUSH
69068: LD_VAR 0 37
69072: PUSH
69073: LD_VAR 0 38
69077: PUSH
69078: LD_VAR 0 39
69082: PUSH
69083: LD_VAR 0 40
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: PUSH
69096: LD_VAR 0 4
69100: PUSH
69101: LD_INT 1
69103: PLUS
69104: ARRAY
69105: ST_TO_ADDR
69106: GO 69473
69108: LD_INT 6
69110: DOUBLE
69111: EQUAL
69112: IFTRUE 69164
69114: LD_INT 7
69116: DOUBLE
69117: EQUAL
69118: IFTRUE 69164
69120: LD_INT 8
69122: DOUBLE
69123: EQUAL
69124: IFTRUE 69164
69126: LD_INT 13
69128: DOUBLE
69129: EQUAL
69130: IFTRUE 69164
69132: LD_INT 12
69134: DOUBLE
69135: EQUAL
69136: IFTRUE 69164
69138: LD_INT 15
69140: DOUBLE
69141: EQUAL
69142: IFTRUE 69164
69144: LD_INT 11
69146: DOUBLE
69147: EQUAL
69148: IFTRUE 69164
69150: LD_INT 14
69152: DOUBLE
69153: EQUAL
69154: IFTRUE 69164
69156: LD_INT 10
69158: DOUBLE
69159: EQUAL
69160: IFTRUE 69164
69162: GO 69220
69164: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
69165: LD_ADDR_VAR 0 9
69169: PUSH
69170: LD_VAR 0 41
69174: PUSH
69175: LD_VAR 0 42
69179: PUSH
69180: LD_VAR 0 43
69184: PUSH
69185: LD_VAR 0 44
69189: PUSH
69190: LD_VAR 0 45
69194: PUSH
69195: LD_VAR 0 46
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: PUSH
69208: LD_VAR 0 4
69212: PUSH
69213: LD_INT 1
69215: PLUS
69216: ARRAY
69217: ST_TO_ADDR
69218: GO 69473
69220: LD_INT 36
69222: DOUBLE
69223: EQUAL
69224: IFTRUE 69228
69226: GO 69284
69228: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
69229: LD_ADDR_VAR 0 9
69233: PUSH
69234: LD_VAR 0 47
69238: PUSH
69239: LD_VAR 0 48
69243: PUSH
69244: LD_VAR 0 49
69248: PUSH
69249: LD_VAR 0 50
69253: PUSH
69254: LD_VAR 0 51
69258: PUSH
69259: LD_VAR 0 52
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: PUSH
69272: LD_VAR 0 4
69276: PUSH
69277: LD_INT 1
69279: PLUS
69280: ARRAY
69281: ST_TO_ADDR
69282: GO 69473
69284: LD_INT 4
69286: DOUBLE
69287: EQUAL
69288: IFTRUE 69310
69290: LD_INT 5
69292: DOUBLE
69293: EQUAL
69294: IFTRUE 69310
69296: LD_INT 34
69298: DOUBLE
69299: EQUAL
69300: IFTRUE 69310
69302: LD_INT 37
69304: DOUBLE
69305: EQUAL
69306: IFTRUE 69310
69308: GO 69366
69310: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
69311: LD_ADDR_VAR 0 9
69315: PUSH
69316: LD_VAR 0 53
69320: PUSH
69321: LD_VAR 0 54
69325: PUSH
69326: LD_VAR 0 55
69330: PUSH
69331: LD_VAR 0 56
69335: PUSH
69336: LD_VAR 0 57
69340: PUSH
69341: LD_VAR 0 58
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: PUSH
69354: LD_VAR 0 4
69358: PUSH
69359: LD_INT 1
69361: PLUS
69362: ARRAY
69363: ST_TO_ADDR
69364: GO 69473
69366: LD_INT 31
69368: DOUBLE
69369: EQUAL
69370: IFTRUE 69416
69372: LD_INT 32
69374: DOUBLE
69375: EQUAL
69376: IFTRUE 69416
69378: LD_INT 33
69380: DOUBLE
69381: EQUAL
69382: IFTRUE 69416
69384: LD_INT 27
69386: DOUBLE
69387: EQUAL
69388: IFTRUE 69416
69390: LD_INT 26
69392: DOUBLE
69393: EQUAL
69394: IFTRUE 69416
69396: LD_INT 28
69398: DOUBLE
69399: EQUAL
69400: IFTRUE 69416
69402: LD_INT 29
69404: DOUBLE
69405: EQUAL
69406: IFTRUE 69416
69408: LD_INT 30
69410: DOUBLE
69411: EQUAL
69412: IFTRUE 69416
69414: GO 69472
69416: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
69417: LD_ADDR_VAR 0 9
69421: PUSH
69422: LD_VAR 0 59
69426: PUSH
69427: LD_VAR 0 60
69431: PUSH
69432: LD_VAR 0 61
69436: PUSH
69437: LD_VAR 0 62
69441: PUSH
69442: LD_VAR 0 63
69446: PUSH
69447: LD_VAR 0 64
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: PUSH
69460: LD_VAR 0 4
69464: PUSH
69465: LD_INT 1
69467: PLUS
69468: ARRAY
69469: ST_TO_ADDR
69470: GO 69473
69472: POP
// temp_list2 = [ ] ;
69473: LD_ADDR_VAR 0 10
69477: PUSH
69478: EMPTY
69479: ST_TO_ADDR
// for i in temp_list do
69480: LD_ADDR_VAR 0 8
69484: PUSH
69485: LD_VAR 0 9
69489: PUSH
69490: FOR_IN
69491: IFFALSE 69543
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
69493: LD_ADDR_VAR 0 10
69497: PUSH
69498: LD_VAR 0 10
69502: PUSH
69503: LD_VAR 0 8
69507: PUSH
69508: LD_INT 1
69510: ARRAY
69511: PUSH
69512: LD_VAR 0 2
69516: PLUS
69517: PUSH
69518: LD_VAR 0 8
69522: PUSH
69523: LD_INT 2
69525: ARRAY
69526: PUSH
69527: LD_VAR 0 3
69531: PLUS
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: EMPTY
69538: LIST
69539: ADD
69540: ST_TO_ADDR
69541: GO 69490
69543: POP
69544: POP
// result = temp_list2 ;
69545: LD_ADDR_VAR 0 7
69549: PUSH
69550: LD_VAR 0 10
69554: ST_TO_ADDR
// end ;
69555: LD_VAR 0 7
69559: RET
// export function EnemyInRange ( unit , dist ) ; begin
69560: LD_INT 0
69562: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
69563: LD_ADDR_VAR 0 3
69567: PUSH
69568: LD_VAR 0 1
69572: PPUSH
69573: CALL_OW 255
69577: PPUSH
69578: LD_VAR 0 1
69582: PPUSH
69583: CALL_OW 250
69587: PPUSH
69588: LD_VAR 0 1
69592: PPUSH
69593: CALL_OW 251
69597: PPUSH
69598: LD_VAR 0 2
69602: PPUSH
69603: CALL 42956 0 4
69607: PUSH
69608: LD_INT 4
69610: ARRAY
69611: ST_TO_ADDR
// end ;
69612: LD_VAR 0 3
69616: RET
// export function PlayerSeeMe ( unit ) ; begin
69617: LD_INT 0
69619: PPUSH
// result := See ( your_side , unit ) ;
69620: LD_ADDR_VAR 0 2
69624: PUSH
69625: LD_OWVAR 2
69629: PPUSH
69630: LD_VAR 0 1
69634: PPUSH
69635: CALL_OW 292
69639: ST_TO_ADDR
// end ;
69640: LD_VAR 0 2
69644: RET
// export function ReverseDir ( unit ) ; begin
69645: LD_INT 0
69647: PPUSH
// if not unit then
69648: LD_VAR 0 1
69652: NOT
69653: IFFALSE 69657
// exit ;
69655: GO 69680
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
69657: LD_ADDR_VAR 0 2
69661: PUSH
69662: LD_VAR 0 1
69666: PPUSH
69667: CALL_OW 254
69671: PUSH
69672: LD_INT 3
69674: PLUS
69675: PUSH
69676: LD_INT 6
69678: MOD
69679: ST_TO_ADDR
// end ;
69680: LD_VAR 0 2
69684: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
69685: LD_INT 0
69687: PPUSH
69688: PPUSH
69689: PPUSH
69690: PPUSH
69691: PPUSH
// if not hexes then
69692: LD_VAR 0 2
69696: NOT
69697: IFFALSE 69701
// exit ;
69699: GO 69849
// dist := 9999 ;
69701: LD_ADDR_VAR 0 5
69705: PUSH
69706: LD_INT 9999
69708: ST_TO_ADDR
// for i = 1 to hexes do
69709: LD_ADDR_VAR 0 4
69713: PUSH
69714: DOUBLE
69715: LD_INT 1
69717: DEC
69718: ST_TO_ADDR
69719: LD_VAR 0 2
69723: PUSH
69724: FOR_TO
69725: IFFALSE 69837
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
69727: LD_VAR 0 1
69731: PPUSH
69732: LD_VAR 0 2
69736: PUSH
69737: LD_VAR 0 4
69741: ARRAY
69742: PUSH
69743: LD_INT 1
69745: ARRAY
69746: PPUSH
69747: LD_VAR 0 2
69751: PUSH
69752: LD_VAR 0 4
69756: ARRAY
69757: PUSH
69758: LD_INT 2
69760: ARRAY
69761: PPUSH
69762: CALL_OW 297
69766: PUSH
69767: LD_VAR 0 5
69771: LESS
69772: IFFALSE 69835
// begin hex := hexes [ i ] ;
69774: LD_ADDR_VAR 0 7
69778: PUSH
69779: LD_VAR 0 2
69783: PUSH
69784: LD_VAR 0 4
69788: ARRAY
69789: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69790: LD_ADDR_VAR 0 5
69794: PUSH
69795: LD_VAR 0 1
69799: PPUSH
69800: LD_VAR 0 2
69804: PUSH
69805: LD_VAR 0 4
69809: ARRAY
69810: PUSH
69811: LD_INT 1
69813: ARRAY
69814: PPUSH
69815: LD_VAR 0 2
69819: PUSH
69820: LD_VAR 0 4
69824: ARRAY
69825: PUSH
69826: LD_INT 2
69828: ARRAY
69829: PPUSH
69830: CALL_OW 297
69834: ST_TO_ADDR
// end ; end ;
69835: GO 69724
69837: POP
69838: POP
// result := hex ;
69839: LD_ADDR_VAR 0 3
69843: PUSH
69844: LD_VAR 0 7
69848: ST_TO_ADDR
// end ;
69849: LD_VAR 0 3
69853: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
69854: LD_INT 0
69856: PPUSH
69857: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
69858: LD_VAR 0 1
69862: NOT
69863: PUSH
69864: LD_VAR 0 1
69868: PUSH
69869: LD_INT 21
69871: PUSH
69872: LD_INT 2
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 23
69881: PUSH
69882: LD_INT 2
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PPUSH
69893: CALL_OW 69
69897: IN
69898: NOT
69899: OR
69900: IFFALSE 69904
// exit ;
69902: GO 69951
// for i = 1 to 3 do
69904: LD_ADDR_VAR 0 3
69908: PUSH
69909: DOUBLE
69910: LD_INT 1
69912: DEC
69913: ST_TO_ADDR
69914: LD_INT 3
69916: PUSH
69917: FOR_TO
69918: IFFALSE 69949
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
69920: LD_VAR 0 1
69924: PPUSH
69925: CALL_OW 250
69929: PPUSH
69930: LD_VAR 0 1
69934: PPUSH
69935: CALL_OW 251
69939: PPUSH
69940: LD_INT 1
69942: PPUSH
69943: CALL_OW 453
69947: GO 69917
69949: POP
69950: POP
// end ;
69951: LD_VAR 0 2
69955: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69956: LD_INT 0
69958: PPUSH
69959: PPUSH
69960: PPUSH
69961: PPUSH
69962: PPUSH
69963: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
69964: LD_VAR 0 1
69968: NOT
69969: PUSH
69970: LD_VAR 0 2
69974: NOT
69975: OR
69976: PUSH
69977: LD_VAR 0 1
69981: PPUSH
69982: CALL_OW 314
69986: OR
69987: IFFALSE 69991
// exit ;
69989: GO 70432
// x := GetX ( enemy_unit ) ;
69991: LD_ADDR_VAR 0 7
69995: PUSH
69996: LD_VAR 0 2
70000: PPUSH
70001: CALL_OW 250
70005: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70006: LD_ADDR_VAR 0 8
70010: PUSH
70011: LD_VAR 0 2
70015: PPUSH
70016: CALL_OW 251
70020: ST_TO_ADDR
// if not x or not y then
70021: LD_VAR 0 7
70025: NOT
70026: PUSH
70027: LD_VAR 0 8
70031: NOT
70032: OR
70033: IFFALSE 70037
// exit ;
70035: GO 70432
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70037: LD_ADDR_VAR 0 6
70041: PUSH
70042: LD_VAR 0 7
70046: PPUSH
70047: LD_INT 0
70049: PPUSH
70050: LD_INT 4
70052: PPUSH
70053: CALL_OW 272
70057: PUSH
70058: LD_VAR 0 8
70062: PPUSH
70063: LD_INT 0
70065: PPUSH
70066: LD_INT 4
70068: PPUSH
70069: CALL_OW 273
70073: PUSH
70074: EMPTY
70075: LIST
70076: LIST
70077: PUSH
70078: LD_VAR 0 7
70082: PPUSH
70083: LD_INT 1
70085: PPUSH
70086: LD_INT 4
70088: PPUSH
70089: CALL_OW 272
70093: PUSH
70094: LD_VAR 0 8
70098: PPUSH
70099: LD_INT 1
70101: PPUSH
70102: LD_INT 4
70104: PPUSH
70105: CALL_OW 273
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_VAR 0 7
70118: PPUSH
70119: LD_INT 2
70121: PPUSH
70122: LD_INT 4
70124: PPUSH
70125: CALL_OW 272
70129: PUSH
70130: LD_VAR 0 8
70134: PPUSH
70135: LD_INT 2
70137: PPUSH
70138: LD_INT 4
70140: PPUSH
70141: CALL_OW 273
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_VAR 0 7
70154: PPUSH
70155: LD_INT 3
70157: PPUSH
70158: LD_INT 4
70160: PPUSH
70161: CALL_OW 272
70165: PUSH
70166: LD_VAR 0 8
70170: PPUSH
70171: LD_INT 3
70173: PPUSH
70174: LD_INT 4
70176: PPUSH
70177: CALL_OW 273
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_VAR 0 7
70190: PPUSH
70191: LD_INT 4
70193: PPUSH
70194: LD_INT 4
70196: PPUSH
70197: CALL_OW 272
70201: PUSH
70202: LD_VAR 0 8
70206: PPUSH
70207: LD_INT 4
70209: PPUSH
70210: LD_INT 4
70212: PPUSH
70213: CALL_OW 273
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_VAR 0 7
70226: PPUSH
70227: LD_INT 5
70229: PPUSH
70230: LD_INT 4
70232: PPUSH
70233: CALL_OW 272
70237: PUSH
70238: LD_VAR 0 8
70242: PPUSH
70243: LD_INT 5
70245: PPUSH
70246: LD_INT 4
70248: PPUSH
70249: CALL_OW 273
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: ST_TO_ADDR
// for i = tmp downto 1 do
70266: LD_ADDR_VAR 0 4
70270: PUSH
70271: DOUBLE
70272: LD_VAR 0 6
70276: INC
70277: ST_TO_ADDR
70278: LD_INT 1
70280: PUSH
70281: FOR_DOWNTO
70282: IFFALSE 70383
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
70284: LD_VAR 0 6
70288: PUSH
70289: LD_VAR 0 4
70293: ARRAY
70294: PUSH
70295: LD_INT 1
70297: ARRAY
70298: PPUSH
70299: LD_VAR 0 6
70303: PUSH
70304: LD_VAR 0 4
70308: ARRAY
70309: PUSH
70310: LD_INT 2
70312: ARRAY
70313: PPUSH
70314: CALL_OW 488
70318: NOT
70319: PUSH
70320: LD_VAR 0 6
70324: PUSH
70325: LD_VAR 0 4
70329: ARRAY
70330: PUSH
70331: LD_INT 1
70333: ARRAY
70334: PPUSH
70335: LD_VAR 0 6
70339: PUSH
70340: LD_VAR 0 4
70344: ARRAY
70345: PUSH
70346: LD_INT 2
70348: ARRAY
70349: PPUSH
70350: CALL_OW 428
70354: PUSH
70355: LD_INT 0
70357: NONEQUAL
70358: OR
70359: IFFALSE 70381
// tmp := Delete ( tmp , i ) ;
70361: LD_ADDR_VAR 0 6
70365: PUSH
70366: LD_VAR 0 6
70370: PPUSH
70371: LD_VAR 0 4
70375: PPUSH
70376: CALL_OW 3
70380: ST_TO_ADDR
70381: GO 70281
70383: POP
70384: POP
// j := GetClosestHex ( unit , tmp ) ;
70385: LD_ADDR_VAR 0 5
70389: PUSH
70390: LD_VAR 0 1
70394: PPUSH
70395: LD_VAR 0 6
70399: PPUSH
70400: CALL 69685 0 2
70404: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
70405: LD_VAR 0 1
70409: PPUSH
70410: LD_VAR 0 5
70414: PUSH
70415: LD_INT 1
70417: ARRAY
70418: PPUSH
70419: LD_VAR 0 5
70423: PUSH
70424: LD_INT 2
70426: ARRAY
70427: PPUSH
70428: CALL_OW 111
// end ;
70432: LD_VAR 0 3
70436: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70437: LD_INT 0
70439: PPUSH
70440: PPUSH
70441: PPUSH
// uc_side = 0 ;
70442: LD_ADDR_OWVAR 20
70446: PUSH
70447: LD_INT 0
70449: ST_TO_ADDR
// uc_nation = 0 ;
70450: LD_ADDR_OWVAR 21
70454: PUSH
70455: LD_INT 0
70457: ST_TO_ADDR
// InitHc_All ( ) ;
70458: CALL_OW 584
// InitVc ;
70462: CALL_OW 20
// if mastodonts then
70466: LD_VAR 0 6
70470: IFFALSE 70537
// for i = 1 to mastodonts do
70472: LD_ADDR_VAR 0 11
70476: PUSH
70477: DOUBLE
70478: LD_INT 1
70480: DEC
70481: ST_TO_ADDR
70482: LD_VAR 0 6
70486: PUSH
70487: FOR_TO
70488: IFFALSE 70535
// begin vc_chassis := 31 ;
70490: LD_ADDR_OWVAR 37
70494: PUSH
70495: LD_INT 31
70497: ST_TO_ADDR
// vc_control := control_rider ;
70498: LD_ADDR_OWVAR 38
70502: PUSH
70503: LD_INT 4
70505: ST_TO_ADDR
// animal := CreateVehicle ;
70506: LD_ADDR_VAR 0 12
70510: PUSH
70511: CALL_OW 45
70515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70516: LD_VAR 0 12
70520: PPUSH
70521: LD_VAR 0 8
70525: PPUSH
70526: LD_INT 0
70528: PPUSH
70529: CALL 72725 0 3
// end ;
70533: GO 70487
70535: POP
70536: POP
// if horses then
70537: LD_VAR 0 5
70541: IFFALSE 70608
// for i = 1 to horses do
70543: LD_ADDR_VAR 0 11
70547: PUSH
70548: DOUBLE
70549: LD_INT 1
70551: DEC
70552: ST_TO_ADDR
70553: LD_VAR 0 5
70557: PUSH
70558: FOR_TO
70559: IFFALSE 70606
// begin hc_class := 21 ;
70561: LD_ADDR_OWVAR 28
70565: PUSH
70566: LD_INT 21
70568: ST_TO_ADDR
// hc_gallery :=  ;
70569: LD_ADDR_OWVAR 33
70573: PUSH
70574: LD_STRING 
70576: ST_TO_ADDR
// animal := CreateHuman ;
70577: LD_ADDR_VAR 0 12
70581: PUSH
70582: CALL_OW 44
70586: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70587: LD_VAR 0 12
70591: PPUSH
70592: LD_VAR 0 8
70596: PPUSH
70597: LD_INT 0
70599: PPUSH
70600: CALL 72725 0 3
// end ;
70604: GO 70558
70606: POP
70607: POP
// if birds then
70608: LD_VAR 0 1
70612: IFFALSE 70679
// for i = 1 to birds do
70614: LD_ADDR_VAR 0 11
70618: PUSH
70619: DOUBLE
70620: LD_INT 1
70622: DEC
70623: ST_TO_ADDR
70624: LD_VAR 0 1
70628: PUSH
70629: FOR_TO
70630: IFFALSE 70677
// begin hc_class = 18 ;
70632: LD_ADDR_OWVAR 28
70636: PUSH
70637: LD_INT 18
70639: ST_TO_ADDR
// hc_gallery =  ;
70640: LD_ADDR_OWVAR 33
70644: PUSH
70645: LD_STRING 
70647: ST_TO_ADDR
// animal := CreateHuman ;
70648: LD_ADDR_VAR 0 12
70652: PUSH
70653: CALL_OW 44
70657: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70658: LD_VAR 0 12
70662: PPUSH
70663: LD_VAR 0 8
70667: PPUSH
70668: LD_INT 0
70670: PPUSH
70671: CALL 72725 0 3
// end ;
70675: GO 70629
70677: POP
70678: POP
// if tigers then
70679: LD_VAR 0 2
70683: IFFALSE 70767
// for i = 1 to tigers do
70685: LD_ADDR_VAR 0 11
70689: PUSH
70690: DOUBLE
70691: LD_INT 1
70693: DEC
70694: ST_TO_ADDR
70695: LD_VAR 0 2
70699: PUSH
70700: FOR_TO
70701: IFFALSE 70765
// begin hc_class = class_tiger ;
70703: LD_ADDR_OWVAR 28
70707: PUSH
70708: LD_INT 14
70710: ST_TO_ADDR
// hc_gallery =  ;
70711: LD_ADDR_OWVAR 33
70715: PUSH
70716: LD_STRING 
70718: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70719: LD_ADDR_OWVAR 35
70723: PUSH
70724: LD_INT 7
70726: NEG
70727: PPUSH
70728: LD_INT 7
70730: PPUSH
70731: CALL_OW 12
70735: ST_TO_ADDR
// animal := CreateHuman ;
70736: LD_ADDR_VAR 0 12
70740: PUSH
70741: CALL_OW 44
70745: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70746: LD_VAR 0 12
70750: PPUSH
70751: LD_VAR 0 8
70755: PPUSH
70756: LD_INT 0
70758: PPUSH
70759: CALL 72725 0 3
// end ;
70763: GO 70700
70765: POP
70766: POP
// if apemans then
70767: LD_VAR 0 3
70771: IFFALSE 70894
// for i = 1 to apemans do
70773: LD_ADDR_VAR 0 11
70777: PUSH
70778: DOUBLE
70779: LD_INT 1
70781: DEC
70782: ST_TO_ADDR
70783: LD_VAR 0 3
70787: PUSH
70788: FOR_TO
70789: IFFALSE 70892
// begin hc_class = class_apeman ;
70791: LD_ADDR_OWVAR 28
70795: PUSH
70796: LD_INT 12
70798: ST_TO_ADDR
// hc_gallery =  ;
70799: LD_ADDR_OWVAR 33
70803: PUSH
70804: LD_STRING 
70806: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70807: LD_ADDR_OWVAR 35
70811: PUSH
70812: LD_INT 2
70814: NEG
70815: PPUSH
70816: LD_INT 2
70818: PPUSH
70819: CALL_OW 12
70823: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70824: LD_ADDR_OWVAR 31
70828: PUSH
70829: LD_INT 1
70831: PPUSH
70832: LD_INT 3
70834: PPUSH
70835: CALL_OW 12
70839: PUSH
70840: LD_INT 1
70842: PPUSH
70843: LD_INT 3
70845: PPUSH
70846: CALL_OW 12
70850: PUSH
70851: LD_INT 0
70853: PUSH
70854: LD_INT 0
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: ST_TO_ADDR
// animal := CreateHuman ;
70863: LD_ADDR_VAR 0 12
70867: PUSH
70868: CALL_OW 44
70872: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70873: LD_VAR 0 12
70877: PPUSH
70878: LD_VAR 0 8
70882: PPUSH
70883: LD_INT 0
70885: PPUSH
70886: CALL 72725 0 3
// end ;
70890: GO 70788
70892: POP
70893: POP
// if enchidnas then
70894: LD_VAR 0 4
70898: IFFALSE 70965
// for i = 1 to enchidnas do
70900: LD_ADDR_VAR 0 11
70904: PUSH
70905: DOUBLE
70906: LD_INT 1
70908: DEC
70909: ST_TO_ADDR
70910: LD_VAR 0 4
70914: PUSH
70915: FOR_TO
70916: IFFALSE 70963
// begin hc_class = 13 ;
70918: LD_ADDR_OWVAR 28
70922: PUSH
70923: LD_INT 13
70925: ST_TO_ADDR
// hc_gallery =  ;
70926: LD_ADDR_OWVAR 33
70930: PUSH
70931: LD_STRING 
70933: ST_TO_ADDR
// animal := CreateHuman ;
70934: LD_ADDR_VAR 0 12
70938: PUSH
70939: CALL_OW 44
70943: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70944: LD_VAR 0 12
70948: PPUSH
70949: LD_VAR 0 8
70953: PPUSH
70954: LD_INT 0
70956: PPUSH
70957: CALL 72725 0 3
// end ;
70961: GO 70915
70963: POP
70964: POP
// if fishes then
70965: LD_VAR 0 7
70969: IFFALSE 71036
// for i = 1 to fishes do
70971: LD_ADDR_VAR 0 11
70975: PUSH
70976: DOUBLE
70977: LD_INT 1
70979: DEC
70980: ST_TO_ADDR
70981: LD_VAR 0 7
70985: PUSH
70986: FOR_TO
70987: IFFALSE 71034
// begin hc_class = 20 ;
70989: LD_ADDR_OWVAR 28
70993: PUSH
70994: LD_INT 20
70996: ST_TO_ADDR
// hc_gallery =  ;
70997: LD_ADDR_OWVAR 33
71001: PUSH
71002: LD_STRING 
71004: ST_TO_ADDR
// animal := CreateHuman ;
71005: LD_ADDR_VAR 0 12
71009: PUSH
71010: CALL_OW 44
71014: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
71015: LD_VAR 0 12
71019: PPUSH
71020: LD_VAR 0 9
71024: PPUSH
71025: LD_INT 0
71027: PPUSH
71028: CALL 72725 0 3
// end ;
71032: GO 70986
71034: POP
71035: POP
// end ;
71036: LD_VAR 0 10
71040: RET
// export function WantHeal ( sci , unit ) ; begin
71041: LD_INT 0
71043: PPUSH
// if GetTaskList ( sci ) > 0 then
71044: LD_VAR 0 1
71048: PPUSH
71049: CALL_OW 437
71053: PUSH
71054: LD_INT 0
71056: GREATER
71057: IFFALSE 71127
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
71059: LD_VAR 0 1
71063: PPUSH
71064: CALL_OW 437
71068: PUSH
71069: LD_INT 1
71071: ARRAY
71072: PUSH
71073: LD_INT 1
71075: ARRAY
71076: PUSH
71077: LD_STRING l
71079: EQUAL
71080: PUSH
71081: LD_VAR 0 1
71085: PPUSH
71086: CALL_OW 437
71090: PUSH
71091: LD_INT 1
71093: ARRAY
71094: PUSH
71095: LD_INT 4
71097: ARRAY
71098: PUSH
71099: LD_VAR 0 2
71103: EQUAL
71104: AND
71105: IFFALSE 71117
// result := true else
71107: LD_ADDR_VAR 0 3
71111: PUSH
71112: LD_INT 1
71114: ST_TO_ADDR
71115: GO 71125
// result := false ;
71117: LD_ADDR_VAR 0 3
71121: PUSH
71122: LD_INT 0
71124: ST_TO_ADDR
// end else
71125: GO 71135
// result := false ;
71127: LD_ADDR_VAR 0 3
71131: PUSH
71132: LD_INT 0
71134: ST_TO_ADDR
// end ;
71135: LD_VAR 0 3
71139: RET
// export function HealTarget ( sci ) ; begin
71140: LD_INT 0
71142: PPUSH
// if not sci then
71143: LD_VAR 0 1
71147: NOT
71148: IFFALSE 71152
// exit ;
71150: GO 71217
// result := 0 ;
71152: LD_ADDR_VAR 0 2
71156: PUSH
71157: LD_INT 0
71159: ST_TO_ADDR
// if GetTaskList ( sci ) then
71160: LD_VAR 0 1
71164: PPUSH
71165: CALL_OW 437
71169: IFFALSE 71217
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
71171: LD_VAR 0 1
71175: PPUSH
71176: CALL_OW 437
71180: PUSH
71181: LD_INT 1
71183: ARRAY
71184: PUSH
71185: LD_INT 1
71187: ARRAY
71188: PUSH
71189: LD_STRING l
71191: EQUAL
71192: IFFALSE 71217
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71194: LD_ADDR_VAR 0 2
71198: PUSH
71199: LD_VAR 0 1
71203: PPUSH
71204: CALL_OW 437
71208: PUSH
71209: LD_INT 1
71211: ARRAY
71212: PUSH
71213: LD_INT 4
71215: ARRAY
71216: ST_TO_ADDR
// end ;
71217: LD_VAR 0 2
71221: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71222: LD_INT 0
71224: PPUSH
71225: PPUSH
71226: PPUSH
71227: PPUSH
// if not base_units then
71228: LD_VAR 0 1
71232: NOT
71233: IFFALSE 71237
// exit ;
71235: GO 71324
// result := false ;
71237: LD_ADDR_VAR 0 2
71241: PUSH
71242: LD_INT 0
71244: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71245: LD_ADDR_VAR 0 5
71249: PUSH
71250: LD_VAR 0 1
71254: PPUSH
71255: LD_INT 21
71257: PUSH
71258: LD_INT 3
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PPUSH
71265: CALL_OW 72
71269: ST_TO_ADDR
// if not tmp then
71270: LD_VAR 0 5
71274: NOT
71275: IFFALSE 71279
// exit ;
71277: GO 71324
// for i in tmp do
71279: LD_ADDR_VAR 0 3
71283: PUSH
71284: LD_VAR 0 5
71288: PUSH
71289: FOR_IN
71290: IFFALSE 71322
// begin result := EnemyInRange ( i , 22 ) ;
71292: LD_ADDR_VAR 0 2
71296: PUSH
71297: LD_VAR 0 3
71301: PPUSH
71302: LD_INT 22
71304: PPUSH
71305: CALL 69560 0 2
71309: ST_TO_ADDR
// if result then
71310: LD_VAR 0 2
71314: IFFALSE 71320
// exit ;
71316: POP
71317: POP
71318: GO 71324
// end ;
71320: GO 71289
71322: POP
71323: POP
// end ;
71324: LD_VAR 0 2
71328: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71329: LD_INT 0
71331: PPUSH
71332: PPUSH
// if not units then
71333: LD_VAR 0 1
71337: NOT
71338: IFFALSE 71342
// exit ;
71340: GO 71412
// result := [ ] ;
71342: LD_ADDR_VAR 0 3
71346: PUSH
71347: EMPTY
71348: ST_TO_ADDR
// for i in units do
71349: LD_ADDR_VAR 0 4
71353: PUSH
71354: LD_VAR 0 1
71358: PUSH
71359: FOR_IN
71360: IFFALSE 71410
// if GetTag ( i ) = tag then
71362: LD_VAR 0 4
71366: PPUSH
71367: CALL_OW 110
71371: PUSH
71372: LD_VAR 0 2
71376: EQUAL
71377: IFFALSE 71408
// result := Insert ( result , result + 1 , i ) ;
71379: LD_ADDR_VAR 0 3
71383: PUSH
71384: LD_VAR 0 3
71388: PPUSH
71389: LD_VAR 0 3
71393: PUSH
71394: LD_INT 1
71396: PLUS
71397: PPUSH
71398: LD_VAR 0 4
71402: PPUSH
71403: CALL_OW 2
71407: ST_TO_ADDR
71408: GO 71359
71410: POP
71411: POP
// end ;
71412: LD_VAR 0 3
71416: RET
// export function IsDriver ( un ) ; begin
71417: LD_INT 0
71419: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71420: LD_ADDR_VAR 0 2
71424: PUSH
71425: LD_VAR 0 1
71429: PUSH
71430: LD_INT 55
71432: PUSH
71433: EMPTY
71434: LIST
71435: PPUSH
71436: CALL_OW 69
71440: IN
71441: ST_TO_ADDR
// end ;
71442: LD_VAR 0 2
71446: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71447: LD_INT 0
71449: PPUSH
71450: PPUSH
// list := [ ] ;
71451: LD_ADDR_VAR 0 5
71455: PUSH
71456: EMPTY
71457: ST_TO_ADDR
// case d of 0 :
71458: LD_VAR 0 3
71462: PUSH
71463: LD_INT 0
71465: DOUBLE
71466: EQUAL
71467: IFTRUE 71471
71469: GO 71604
71471: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71472: LD_ADDR_VAR 0 5
71476: PUSH
71477: LD_VAR 0 1
71481: PUSH
71482: LD_INT 4
71484: MINUS
71485: PUSH
71486: LD_VAR 0 2
71490: PUSH
71491: LD_INT 4
71493: MINUS
71494: PUSH
71495: LD_INT 2
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: LIST
71502: PUSH
71503: LD_VAR 0 1
71507: PUSH
71508: LD_INT 3
71510: MINUS
71511: PUSH
71512: LD_VAR 0 2
71516: PUSH
71517: LD_INT 1
71519: PUSH
71520: EMPTY
71521: LIST
71522: LIST
71523: LIST
71524: PUSH
71525: LD_VAR 0 1
71529: PUSH
71530: LD_INT 4
71532: PLUS
71533: PUSH
71534: LD_VAR 0 2
71538: PUSH
71539: LD_INT 4
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: LIST
71546: PUSH
71547: LD_VAR 0 1
71551: PUSH
71552: LD_INT 3
71554: PLUS
71555: PUSH
71556: LD_VAR 0 2
71560: PUSH
71561: LD_INT 3
71563: PLUS
71564: PUSH
71565: LD_INT 5
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: LIST
71572: PUSH
71573: LD_VAR 0 1
71577: PUSH
71578: LD_VAR 0 2
71582: PUSH
71583: LD_INT 4
71585: PLUS
71586: PUSH
71587: LD_INT 0
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: LIST
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: ST_TO_ADDR
// end ; 1 :
71602: GO 72302
71604: LD_INT 1
71606: DOUBLE
71607: EQUAL
71608: IFTRUE 71612
71610: GO 71745
71612: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71613: LD_ADDR_VAR 0 5
71617: PUSH
71618: LD_VAR 0 1
71622: PUSH
71623: LD_VAR 0 2
71627: PUSH
71628: LD_INT 4
71630: MINUS
71631: PUSH
71632: LD_INT 3
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: LIST
71639: PUSH
71640: LD_VAR 0 1
71644: PUSH
71645: LD_INT 3
71647: MINUS
71648: PUSH
71649: LD_VAR 0 2
71653: PUSH
71654: LD_INT 3
71656: MINUS
71657: PUSH
71658: LD_INT 2
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: LIST
71665: PUSH
71666: LD_VAR 0 1
71670: PUSH
71671: LD_INT 4
71673: MINUS
71674: PUSH
71675: LD_VAR 0 2
71679: PUSH
71680: LD_INT 1
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: LIST
71687: PUSH
71688: LD_VAR 0 1
71692: PUSH
71693: LD_VAR 0 2
71697: PUSH
71698: LD_INT 3
71700: PLUS
71701: PUSH
71702: LD_INT 0
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: LIST
71709: PUSH
71710: LD_VAR 0 1
71714: PUSH
71715: LD_INT 4
71717: PLUS
71718: PUSH
71719: LD_VAR 0 2
71723: PUSH
71724: LD_INT 4
71726: PLUS
71727: PUSH
71728: LD_INT 5
71730: PUSH
71731: EMPTY
71732: LIST
71733: LIST
71734: LIST
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: ST_TO_ADDR
// end ; 2 :
71743: GO 72302
71745: LD_INT 2
71747: DOUBLE
71748: EQUAL
71749: IFTRUE 71753
71751: GO 71882
71753: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71754: LD_ADDR_VAR 0 5
71758: PUSH
71759: LD_VAR 0 1
71763: PUSH
71764: LD_VAR 0 2
71768: PUSH
71769: LD_INT 3
71771: MINUS
71772: PUSH
71773: LD_INT 3
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: LIST
71780: PUSH
71781: LD_VAR 0 1
71785: PUSH
71786: LD_INT 4
71788: PLUS
71789: PUSH
71790: LD_VAR 0 2
71794: PUSH
71795: LD_INT 4
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: LIST
71802: PUSH
71803: LD_VAR 0 1
71807: PUSH
71808: LD_VAR 0 2
71812: PUSH
71813: LD_INT 4
71815: PLUS
71816: PUSH
71817: LD_INT 0
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: LIST
71824: PUSH
71825: LD_VAR 0 1
71829: PUSH
71830: LD_INT 3
71832: MINUS
71833: PUSH
71834: LD_VAR 0 2
71838: PUSH
71839: LD_INT 1
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: LIST
71846: PUSH
71847: LD_VAR 0 1
71851: PUSH
71852: LD_INT 4
71854: MINUS
71855: PUSH
71856: LD_VAR 0 2
71860: PUSH
71861: LD_INT 4
71863: MINUS
71864: PUSH
71865: LD_INT 2
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: LIST
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: ST_TO_ADDR
// end ; 3 :
71880: GO 72302
71882: LD_INT 3
71884: DOUBLE
71885: EQUAL
71886: IFTRUE 71890
71888: GO 72023
71890: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71891: LD_ADDR_VAR 0 5
71895: PUSH
71896: LD_VAR 0 1
71900: PUSH
71901: LD_INT 3
71903: PLUS
71904: PUSH
71905: LD_VAR 0 2
71909: PUSH
71910: LD_INT 4
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: LIST
71917: PUSH
71918: LD_VAR 0 1
71922: PUSH
71923: LD_INT 4
71925: PLUS
71926: PUSH
71927: LD_VAR 0 2
71931: PUSH
71932: LD_INT 4
71934: PLUS
71935: PUSH
71936: LD_INT 5
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: LIST
71943: PUSH
71944: LD_VAR 0 1
71948: PUSH
71949: LD_INT 4
71951: MINUS
71952: PUSH
71953: LD_VAR 0 2
71957: PUSH
71958: LD_INT 1
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: LIST
71965: PUSH
71966: LD_VAR 0 1
71970: PUSH
71971: LD_VAR 0 2
71975: PUSH
71976: LD_INT 4
71978: MINUS
71979: PUSH
71980: LD_INT 3
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: LIST
71987: PUSH
71988: LD_VAR 0 1
71992: PUSH
71993: LD_INT 3
71995: MINUS
71996: PUSH
71997: LD_VAR 0 2
72001: PUSH
72002: LD_INT 3
72004: MINUS
72005: PUSH
72006: LD_INT 2
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: LIST
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: ST_TO_ADDR
// end ; 4 :
72021: GO 72302
72023: LD_INT 4
72025: DOUBLE
72026: EQUAL
72027: IFTRUE 72031
72029: GO 72164
72031: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
72032: LD_ADDR_VAR 0 5
72036: PUSH
72037: LD_VAR 0 1
72041: PUSH
72042: LD_VAR 0 2
72046: PUSH
72047: LD_INT 4
72049: PLUS
72050: PUSH
72051: LD_INT 0
72053: PUSH
72054: EMPTY
72055: LIST
72056: LIST
72057: LIST
72058: PUSH
72059: LD_VAR 0 1
72063: PUSH
72064: LD_INT 3
72066: PLUS
72067: PUSH
72068: LD_VAR 0 2
72072: PUSH
72073: LD_INT 3
72075: PLUS
72076: PUSH
72077: LD_INT 5
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: LIST
72084: PUSH
72085: LD_VAR 0 1
72089: PUSH
72090: LD_INT 4
72092: PLUS
72093: PUSH
72094: LD_VAR 0 2
72098: PUSH
72099: LD_INT 4
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: LIST
72106: PUSH
72107: LD_VAR 0 1
72111: PUSH
72112: LD_VAR 0 2
72116: PUSH
72117: LD_INT 3
72119: MINUS
72120: PUSH
72121: LD_INT 3
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: LIST
72128: PUSH
72129: LD_VAR 0 1
72133: PUSH
72134: LD_INT 4
72136: MINUS
72137: PUSH
72138: LD_VAR 0 2
72142: PUSH
72143: LD_INT 4
72145: MINUS
72146: PUSH
72147: LD_INT 2
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: LIST
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: ST_TO_ADDR
// end ; 5 :
72162: GO 72302
72164: LD_INT 5
72166: DOUBLE
72167: EQUAL
72168: IFTRUE 72172
72170: GO 72301
72172: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
72173: LD_ADDR_VAR 0 5
72177: PUSH
72178: LD_VAR 0 1
72182: PUSH
72183: LD_INT 4
72185: MINUS
72186: PUSH
72187: LD_VAR 0 2
72191: PUSH
72192: LD_INT 1
72194: PUSH
72195: EMPTY
72196: LIST
72197: LIST
72198: LIST
72199: PUSH
72200: LD_VAR 0 1
72204: PUSH
72205: LD_VAR 0 2
72209: PUSH
72210: LD_INT 4
72212: MINUS
72213: PUSH
72214: LD_INT 3
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: LIST
72221: PUSH
72222: LD_VAR 0 1
72226: PUSH
72227: LD_INT 4
72229: PLUS
72230: PUSH
72231: LD_VAR 0 2
72235: PUSH
72236: LD_INT 4
72238: PLUS
72239: PUSH
72240: LD_INT 5
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: LIST
72247: PUSH
72248: LD_VAR 0 1
72252: PUSH
72253: LD_INT 3
72255: PLUS
72256: PUSH
72257: LD_VAR 0 2
72261: PUSH
72262: LD_INT 4
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: LIST
72269: PUSH
72270: LD_VAR 0 1
72274: PUSH
72275: LD_VAR 0 2
72279: PUSH
72280: LD_INT 3
72282: PLUS
72283: PUSH
72284: LD_INT 0
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: LIST
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: LIST
72298: ST_TO_ADDR
// end ; end ;
72299: GO 72302
72301: POP
// result := list ;
72302: LD_ADDR_VAR 0 4
72306: PUSH
72307: LD_VAR 0 5
72311: ST_TO_ADDR
// end ;
72312: LD_VAR 0 4
72316: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72317: LD_INT 0
72319: PPUSH
72320: PPUSH
72321: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72322: LD_VAR 0 1
72326: NOT
72327: PUSH
72328: LD_VAR 0 2
72332: PUSH
72333: LD_INT 1
72335: PUSH
72336: LD_INT 2
72338: PUSH
72339: LD_INT 3
72341: PUSH
72342: LD_INT 4
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: IN
72351: NOT
72352: OR
72353: IFFALSE 72357
// exit ;
72355: GO 72449
// tmp := [ ] ;
72357: LD_ADDR_VAR 0 5
72361: PUSH
72362: EMPTY
72363: ST_TO_ADDR
// for i in units do
72364: LD_ADDR_VAR 0 4
72368: PUSH
72369: LD_VAR 0 1
72373: PUSH
72374: FOR_IN
72375: IFFALSE 72418
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
72377: LD_ADDR_VAR 0 5
72381: PUSH
72382: LD_VAR 0 5
72386: PPUSH
72387: LD_VAR 0 5
72391: PUSH
72392: LD_INT 1
72394: PLUS
72395: PPUSH
72396: LD_VAR 0 4
72400: PPUSH
72401: LD_VAR 0 2
72405: PPUSH
72406: CALL_OW 259
72410: PPUSH
72411: CALL_OW 2
72415: ST_TO_ADDR
72416: GO 72374
72418: POP
72419: POP
// if not tmp then
72420: LD_VAR 0 5
72424: NOT
72425: IFFALSE 72429
// exit ;
72427: GO 72449
// result := SortListByListDesc ( units , tmp ) ;
72429: LD_ADDR_VAR 0 3
72433: PUSH
72434: LD_VAR 0 1
72438: PPUSH
72439: LD_VAR 0 5
72443: PPUSH
72444: CALL_OW 77
72448: ST_TO_ADDR
// end ;
72449: LD_VAR 0 3
72453: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72454: LD_INT 0
72456: PPUSH
72457: PPUSH
72458: PPUSH
// result := false ;
72459: LD_ADDR_VAR 0 3
72463: PUSH
72464: LD_INT 0
72466: ST_TO_ADDR
// x := GetX ( building ) ;
72467: LD_ADDR_VAR 0 4
72471: PUSH
72472: LD_VAR 0 2
72476: PPUSH
72477: CALL_OW 250
72481: ST_TO_ADDR
// y := GetY ( building ) ;
72482: LD_ADDR_VAR 0 5
72486: PUSH
72487: LD_VAR 0 2
72491: PPUSH
72492: CALL_OW 251
72496: ST_TO_ADDR
// if not building or not x or not y then
72497: LD_VAR 0 2
72501: NOT
72502: PUSH
72503: LD_VAR 0 4
72507: NOT
72508: OR
72509: PUSH
72510: LD_VAR 0 5
72514: NOT
72515: OR
72516: IFFALSE 72520
// exit ;
72518: GO 72612
// if GetTaskList ( unit ) then
72520: LD_VAR 0 1
72524: PPUSH
72525: CALL_OW 437
72529: IFFALSE 72612
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72531: LD_STRING e
72533: PUSH
72534: LD_VAR 0 1
72538: PPUSH
72539: CALL_OW 437
72543: PUSH
72544: LD_INT 1
72546: ARRAY
72547: PUSH
72548: LD_INT 1
72550: ARRAY
72551: EQUAL
72552: PUSH
72553: LD_VAR 0 4
72557: PUSH
72558: LD_VAR 0 1
72562: PPUSH
72563: CALL_OW 437
72567: PUSH
72568: LD_INT 1
72570: ARRAY
72571: PUSH
72572: LD_INT 2
72574: ARRAY
72575: EQUAL
72576: AND
72577: PUSH
72578: LD_VAR 0 5
72582: PUSH
72583: LD_VAR 0 1
72587: PPUSH
72588: CALL_OW 437
72592: PUSH
72593: LD_INT 1
72595: ARRAY
72596: PUSH
72597: LD_INT 3
72599: ARRAY
72600: EQUAL
72601: AND
72602: IFFALSE 72612
// result := true end ;
72604: LD_ADDR_VAR 0 3
72608: PUSH
72609: LD_INT 1
72611: ST_TO_ADDR
// end ;
72612: LD_VAR 0 3
72616: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72617: LD_INT 0
72619: PPUSH
// result := false ;
72620: LD_ADDR_VAR 0 4
72624: PUSH
72625: LD_INT 0
72627: ST_TO_ADDR
// if GetTaskList ( unit ) then
72628: LD_VAR 0 1
72632: PPUSH
72633: CALL_OW 437
72637: IFFALSE 72720
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72639: LD_STRING M
72641: PUSH
72642: LD_VAR 0 1
72646: PPUSH
72647: CALL_OW 437
72651: PUSH
72652: LD_INT 1
72654: ARRAY
72655: PUSH
72656: LD_INT 1
72658: ARRAY
72659: EQUAL
72660: PUSH
72661: LD_VAR 0 2
72665: PUSH
72666: LD_VAR 0 1
72670: PPUSH
72671: CALL_OW 437
72675: PUSH
72676: LD_INT 1
72678: ARRAY
72679: PUSH
72680: LD_INT 2
72682: ARRAY
72683: EQUAL
72684: AND
72685: PUSH
72686: LD_VAR 0 3
72690: PUSH
72691: LD_VAR 0 1
72695: PPUSH
72696: CALL_OW 437
72700: PUSH
72701: LD_INT 1
72703: ARRAY
72704: PUSH
72705: LD_INT 3
72707: ARRAY
72708: EQUAL
72709: AND
72710: IFFALSE 72720
// result := true ;
72712: LD_ADDR_VAR 0 4
72716: PUSH
72717: LD_INT 1
72719: ST_TO_ADDR
// end ; end ;
72720: LD_VAR 0 4
72724: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72725: LD_INT 0
72727: PPUSH
72728: PPUSH
72729: PPUSH
72730: PPUSH
// if not unit or not area then
72731: LD_VAR 0 1
72735: NOT
72736: PUSH
72737: LD_VAR 0 2
72741: NOT
72742: OR
72743: IFFALSE 72747
// exit ;
72745: GO 72911
// tmp := AreaToList ( area , i ) ;
72747: LD_ADDR_VAR 0 6
72751: PUSH
72752: LD_VAR 0 2
72756: PPUSH
72757: LD_VAR 0 5
72761: PPUSH
72762: CALL_OW 517
72766: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72767: LD_ADDR_VAR 0 5
72771: PUSH
72772: DOUBLE
72773: LD_INT 1
72775: DEC
72776: ST_TO_ADDR
72777: LD_VAR 0 6
72781: PUSH
72782: LD_INT 1
72784: ARRAY
72785: PUSH
72786: FOR_TO
72787: IFFALSE 72909
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72789: LD_ADDR_VAR 0 7
72793: PUSH
72794: LD_VAR 0 6
72798: PUSH
72799: LD_INT 1
72801: ARRAY
72802: PUSH
72803: LD_VAR 0 5
72807: ARRAY
72808: PUSH
72809: LD_VAR 0 6
72813: PUSH
72814: LD_INT 2
72816: ARRAY
72817: PUSH
72818: LD_VAR 0 5
72822: ARRAY
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
72828: LD_VAR 0 7
72832: PUSH
72833: LD_INT 1
72835: ARRAY
72836: PPUSH
72837: LD_VAR 0 7
72841: PUSH
72842: LD_INT 2
72844: ARRAY
72845: PPUSH
72846: CALL_OW 428
72850: PUSH
72851: LD_INT 0
72853: EQUAL
72854: IFFALSE 72907
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72856: LD_VAR 0 1
72860: PPUSH
72861: LD_VAR 0 7
72865: PUSH
72866: LD_INT 1
72868: ARRAY
72869: PPUSH
72870: LD_VAR 0 7
72874: PUSH
72875: LD_INT 2
72877: ARRAY
72878: PPUSH
72879: LD_VAR 0 3
72883: PPUSH
72884: CALL_OW 48
// result := IsPlaced ( unit ) ;
72888: LD_ADDR_VAR 0 4
72892: PUSH
72893: LD_VAR 0 1
72897: PPUSH
72898: CALL_OW 305
72902: ST_TO_ADDR
// exit ;
72903: POP
72904: POP
72905: GO 72911
// end ; end ;
72907: GO 72786
72909: POP
72910: POP
// end ;
72911: LD_VAR 0 4
72915: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72916: LD_INT 0
72918: PPUSH
72919: PPUSH
72920: PPUSH
// if not side or side > 8 then
72921: LD_VAR 0 1
72925: NOT
72926: PUSH
72927: LD_VAR 0 1
72931: PUSH
72932: LD_INT 8
72934: GREATER
72935: OR
72936: IFFALSE 72940
// exit ;
72938: GO 73127
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72940: LD_ADDR_VAR 0 4
72944: PUSH
72945: LD_INT 22
72947: PUSH
72948: LD_VAR 0 1
72952: PUSH
72953: EMPTY
72954: LIST
72955: LIST
72956: PUSH
72957: LD_INT 21
72959: PUSH
72960: LD_INT 3
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PPUSH
72971: CALL_OW 69
72975: ST_TO_ADDR
// if not tmp then
72976: LD_VAR 0 4
72980: NOT
72981: IFFALSE 72985
// exit ;
72983: GO 73127
// enable_addtolog := true ;
72985: LD_ADDR_OWVAR 81
72989: PUSH
72990: LD_INT 1
72992: ST_TO_ADDR
// AddToLog ( [ ) ;
72993: LD_STRING [
72995: PPUSH
72996: CALL_OW 561
// for i in tmp do
73000: LD_ADDR_VAR 0 3
73004: PUSH
73005: LD_VAR 0 4
73009: PUSH
73010: FOR_IN
73011: IFFALSE 73118
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
73013: LD_STRING [
73015: PUSH
73016: LD_VAR 0 3
73020: PPUSH
73021: CALL_OW 266
73025: STR
73026: PUSH
73027: LD_STRING , 
73029: STR
73030: PUSH
73031: LD_VAR 0 3
73035: PPUSH
73036: CALL_OW 250
73040: STR
73041: PUSH
73042: LD_STRING , 
73044: STR
73045: PUSH
73046: LD_VAR 0 3
73050: PPUSH
73051: CALL_OW 251
73055: STR
73056: PUSH
73057: LD_STRING , 
73059: STR
73060: PUSH
73061: LD_VAR 0 3
73065: PPUSH
73066: CALL_OW 254
73070: STR
73071: PUSH
73072: LD_STRING , 
73074: STR
73075: PUSH
73076: LD_VAR 0 3
73080: PPUSH
73081: LD_INT 1
73083: PPUSH
73084: CALL_OW 268
73088: STR
73089: PUSH
73090: LD_STRING , 
73092: STR
73093: PUSH
73094: LD_VAR 0 3
73098: PPUSH
73099: LD_INT 2
73101: PPUSH
73102: CALL_OW 268
73106: STR
73107: PUSH
73108: LD_STRING ],
73110: STR
73111: PPUSH
73112: CALL_OW 561
// end ;
73116: GO 73010
73118: POP
73119: POP
// AddToLog ( ]; ) ;
73120: LD_STRING ];
73122: PPUSH
73123: CALL_OW 561
// end ;
73127: LD_VAR 0 2
73131: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
73132: LD_INT 0
73134: PPUSH
73135: PPUSH
73136: PPUSH
73137: PPUSH
73138: PPUSH
// if not area or not rate or not max then
73139: LD_VAR 0 1
73143: NOT
73144: PUSH
73145: LD_VAR 0 2
73149: NOT
73150: OR
73151: PUSH
73152: LD_VAR 0 4
73156: NOT
73157: OR
73158: IFFALSE 73162
// exit ;
73160: GO 73354
// while 1 do
73162: LD_INT 1
73164: IFFALSE 73354
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
73166: LD_ADDR_VAR 0 9
73170: PUSH
73171: LD_VAR 0 1
73175: PPUSH
73176: LD_INT 1
73178: PPUSH
73179: CALL_OW 287
73183: PUSH
73184: LD_INT 10
73186: MUL
73187: ST_TO_ADDR
// r := rate / 10 ;
73188: LD_ADDR_VAR 0 7
73192: PUSH
73193: LD_VAR 0 2
73197: PUSH
73198: LD_INT 10
73200: DIVREAL
73201: ST_TO_ADDR
// time := 1 1$00 ;
73202: LD_ADDR_VAR 0 8
73206: PUSH
73207: LD_INT 2100
73209: ST_TO_ADDR
// if amount < min then
73210: LD_VAR 0 9
73214: PUSH
73215: LD_VAR 0 3
73219: LESS
73220: IFFALSE 73238
// r := r * 2 else
73222: LD_ADDR_VAR 0 7
73226: PUSH
73227: LD_VAR 0 7
73231: PUSH
73232: LD_INT 2
73234: MUL
73235: ST_TO_ADDR
73236: GO 73264
// if amount > max then
73238: LD_VAR 0 9
73242: PUSH
73243: LD_VAR 0 4
73247: GREATER
73248: IFFALSE 73264
// r := r / 2 ;
73250: LD_ADDR_VAR 0 7
73254: PUSH
73255: LD_VAR 0 7
73259: PUSH
73260: LD_INT 2
73262: DIVREAL
73263: ST_TO_ADDR
// time := time / r ;
73264: LD_ADDR_VAR 0 8
73268: PUSH
73269: LD_VAR 0 8
73273: PUSH
73274: LD_VAR 0 7
73278: DIVREAL
73279: ST_TO_ADDR
// if time < 0 then
73280: LD_VAR 0 8
73284: PUSH
73285: LD_INT 0
73287: LESS
73288: IFFALSE 73305
// time := time * - 1 ;
73290: LD_ADDR_VAR 0 8
73294: PUSH
73295: LD_VAR 0 8
73299: PUSH
73300: LD_INT 1
73302: NEG
73303: MUL
73304: ST_TO_ADDR
// wait ( time ) ;
73305: LD_VAR 0 8
73309: PPUSH
73310: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
73314: LD_INT 35
73316: PPUSH
73317: LD_INT 875
73319: PPUSH
73320: CALL_OW 12
73324: PPUSH
73325: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73329: LD_INT 1
73331: PPUSH
73332: LD_INT 5
73334: PPUSH
73335: CALL_OW 12
73339: PPUSH
73340: LD_VAR 0 1
73344: PPUSH
73345: LD_INT 1
73347: PPUSH
73348: CALL_OW 55
// end ;
73352: GO 73162
// end ;
73354: LD_VAR 0 5
73358: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73359: LD_INT 0
73361: PPUSH
73362: PPUSH
73363: PPUSH
73364: PPUSH
73365: PPUSH
73366: PPUSH
73367: PPUSH
73368: PPUSH
// if not turrets or not factories then
73369: LD_VAR 0 1
73373: NOT
73374: PUSH
73375: LD_VAR 0 2
73379: NOT
73380: OR
73381: IFFALSE 73385
// exit ;
73383: GO 73692
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73385: LD_ADDR_VAR 0 10
73389: PUSH
73390: LD_INT 5
73392: PUSH
73393: LD_INT 6
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: PUSH
73400: LD_INT 2
73402: PUSH
73403: LD_INT 4
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: LD_INT 3
73412: PUSH
73413: LD_INT 5
73415: PUSH
73416: EMPTY
73417: LIST
73418: LIST
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: LIST
73424: PUSH
73425: LD_INT 24
73427: PUSH
73428: LD_INT 25
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: PUSH
73435: LD_INT 23
73437: PUSH
73438: LD_INT 27
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: PUSH
73445: EMPTY
73446: LIST
73447: LIST
73448: PUSH
73449: LD_INT 42
73451: PUSH
73452: LD_INT 43
73454: PUSH
73455: EMPTY
73456: LIST
73457: LIST
73458: PUSH
73459: LD_INT 44
73461: PUSH
73462: LD_INT 46
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: PUSH
73469: LD_INT 45
73471: PUSH
73472: LD_INT 47
73474: PUSH
73475: EMPTY
73476: LIST
73477: LIST
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: LIST
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: LIST
73488: ST_TO_ADDR
// result := [ ] ;
73489: LD_ADDR_VAR 0 3
73493: PUSH
73494: EMPTY
73495: ST_TO_ADDR
// for i in turrets do
73496: LD_ADDR_VAR 0 4
73500: PUSH
73501: LD_VAR 0 1
73505: PUSH
73506: FOR_IN
73507: IFFALSE 73690
// begin nat := GetNation ( i ) ;
73509: LD_ADDR_VAR 0 7
73513: PUSH
73514: LD_VAR 0 4
73518: PPUSH
73519: CALL_OW 248
73523: ST_TO_ADDR
// weapon := 0 ;
73524: LD_ADDR_VAR 0 8
73528: PUSH
73529: LD_INT 0
73531: ST_TO_ADDR
// if not nat then
73532: LD_VAR 0 7
73536: NOT
73537: IFFALSE 73541
// continue ;
73539: GO 73506
// for j in list [ nat ] do
73541: LD_ADDR_VAR 0 5
73545: PUSH
73546: LD_VAR 0 10
73550: PUSH
73551: LD_VAR 0 7
73555: ARRAY
73556: PUSH
73557: FOR_IN
73558: IFFALSE 73599
// if GetBWeapon ( i ) = j [ 1 ] then
73560: LD_VAR 0 4
73564: PPUSH
73565: CALL_OW 269
73569: PUSH
73570: LD_VAR 0 5
73574: PUSH
73575: LD_INT 1
73577: ARRAY
73578: EQUAL
73579: IFFALSE 73597
// begin weapon := j [ 2 ] ;
73581: LD_ADDR_VAR 0 8
73585: PUSH
73586: LD_VAR 0 5
73590: PUSH
73591: LD_INT 2
73593: ARRAY
73594: ST_TO_ADDR
// break ;
73595: GO 73599
// end ;
73597: GO 73557
73599: POP
73600: POP
// if not weapon then
73601: LD_VAR 0 8
73605: NOT
73606: IFFALSE 73610
// continue ;
73608: GO 73506
// for k in factories do
73610: LD_ADDR_VAR 0 6
73614: PUSH
73615: LD_VAR 0 2
73619: PUSH
73620: FOR_IN
73621: IFFALSE 73686
// begin weapons := AvailableWeaponList ( k ) ;
73623: LD_ADDR_VAR 0 9
73627: PUSH
73628: LD_VAR 0 6
73632: PPUSH
73633: CALL_OW 478
73637: ST_TO_ADDR
// if not weapons then
73638: LD_VAR 0 9
73642: NOT
73643: IFFALSE 73647
// continue ;
73645: GO 73620
// if weapon in weapons then
73647: LD_VAR 0 8
73651: PUSH
73652: LD_VAR 0 9
73656: IN
73657: IFFALSE 73684
// begin result := [ i , weapon ] ;
73659: LD_ADDR_VAR 0 3
73663: PUSH
73664: LD_VAR 0 4
73668: PUSH
73669: LD_VAR 0 8
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: ST_TO_ADDR
// exit ;
73678: POP
73679: POP
73680: POP
73681: POP
73682: GO 73692
// end ; end ;
73684: GO 73620
73686: POP
73687: POP
// end ;
73688: GO 73506
73690: POP
73691: POP
// end ;
73692: LD_VAR 0 3
73696: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73697: LD_INT 0
73699: PPUSH
// if not side or side > 8 then
73700: LD_VAR 0 3
73704: NOT
73705: PUSH
73706: LD_VAR 0 3
73710: PUSH
73711: LD_INT 8
73713: GREATER
73714: OR
73715: IFFALSE 73719
// exit ;
73717: GO 73778
// if not range then
73719: LD_VAR 0 4
73723: NOT
73724: IFFALSE 73735
// range := - 12 ;
73726: LD_ADDR_VAR 0 4
73730: PUSH
73731: LD_INT 12
73733: NEG
73734: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73735: LD_VAR 0 1
73739: PPUSH
73740: LD_VAR 0 2
73744: PPUSH
73745: LD_VAR 0 3
73749: PPUSH
73750: LD_VAR 0 4
73754: PPUSH
73755: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73759: LD_VAR 0 1
73763: PPUSH
73764: LD_VAR 0 2
73768: PPUSH
73769: LD_VAR 0 3
73773: PPUSH
73774: CALL_OW 331
// end ;
73778: LD_VAR 0 5
73782: RET
// export function Video ( mode ) ; begin
73783: LD_INT 0
73785: PPUSH
// ingame_video = mode ;
73786: LD_ADDR_OWVAR 52
73790: PUSH
73791: LD_VAR 0 1
73795: ST_TO_ADDR
// interface_hidden = mode ;
73796: LD_ADDR_OWVAR 54
73800: PUSH
73801: LD_VAR 0 1
73805: ST_TO_ADDR
// end ;
73806: LD_VAR 0 2
73810: RET
// export function Join ( array , element ) ; begin
73811: LD_INT 0
73813: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73814: LD_ADDR_VAR 0 3
73818: PUSH
73819: LD_VAR 0 1
73823: PPUSH
73824: LD_VAR 0 1
73828: PUSH
73829: LD_INT 1
73831: PLUS
73832: PPUSH
73833: LD_VAR 0 2
73837: PPUSH
73838: CALL_OW 1
73842: ST_TO_ADDR
// end ;
73843: LD_VAR 0 3
73847: RET
// export function JoinUnion ( array , element ) ; begin
73848: LD_INT 0
73850: PPUSH
// result := array union element ;
73851: LD_ADDR_VAR 0 3
73855: PUSH
73856: LD_VAR 0 1
73860: PUSH
73861: LD_VAR 0 2
73865: UNION
73866: ST_TO_ADDR
// end ;
73867: LD_VAR 0 3
73871: RET
// export function GetBehemoths ( side ) ; begin
73872: LD_INT 0
73874: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
73875: LD_ADDR_VAR 0 2
73879: PUSH
73880: LD_INT 22
73882: PUSH
73883: LD_VAR 0 1
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: PUSH
73892: LD_INT 31
73894: PUSH
73895: LD_INT 25
73897: PUSH
73898: EMPTY
73899: LIST
73900: LIST
73901: PUSH
73902: EMPTY
73903: LIST
73904: LIST
73905: PPUSH
73906: CALL_OW 69
73910: ST_TO_ADDR
// end ;
73911: LD_VAR 0 2
73915: RET
// export function Shuffle ( array ) ; var i , index ; begin
73916: LD_INT 0
73918: PPUSH
73919: PPUSH
73920: PPUSH
// result := [ ] ;
73921: LD_ADDR_VAR 0 2
73925: PUSH
73926: EMPTY
73927: ST_TO_ADDR
// if not array then
73928: LD_VAR 0 1
73932: NOT
73933: IFFALSE 73937
// exit ;
73935: GO 74036
// Randomize ;
73937: CALL_OW 10
// for i = array downto 1 do
73941: LD_ADDR_VAR 0 3
73945: PUSH
73946: DOUBLE
73947: LD_VAR 0 1
73951: INC
73952: ST_TO_ADDR
73953: LD_INT 1
73955: PUSH
73956: FOR_DOWNTO
73957: IFFALSE 74034
// begin index := rand ( 1 , array ) ;
73959: LD_ADDR_VAR 0 4
73963: PUSH
73964: LD_INT 1
73966: PPUSH
73967: LD_VAR 0 1
73971: PPUSH
73972: CALL_OW 12
73976: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73977: LD_ADDR_VAR 0 2
73981: PUSH
73982: LD_VAR 0 2
73986: PPUSH
73987: LD_VAR 0 2
73991: PUSH
73992: LD_INT 1
73994: PLUS
73995: PPUSH
73996: LD_VAR 0 1
74000: PUSH
74001: LD_VAR 0 4
74005: ARRAY
74006: PPUSH
74007: CALL_OW 2
74011: ST_TO_ADDR
// array := Delete ( array , index ) ;
74012: LD_ADDR_VAR 0 1
74016: PUSH
74017: LD_VAR 0 1
74021: PPUSH
74022: LD_VAR 0 4
74026: PPUSH
74027: CALL_OW 3
74031: ST_TO_ADDR
// end ;
74032: GO 73956
74034: POP
74035: POP
// end ;
74036: LD_VAR 0 2
74040: RET
// export function GetBaseMaterials ( base ) ; begin
74041: LD_INT 0
74043: PPUSH
// result := [ 0 , 0 , 0 ] ;
74044: LD_ADDR_VAR 0 2
74048: PUSH
74049: LD_INT 0
74051: PUSH
74052: LD_INT 0
74054: PUSH
74055: LD_INT 0
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: LIST
74062: ST_TO_ADDR
// if not base then
74063: LD_VAR 0 1
74067: NOT
74068: IFFALSE 74072
// exit ;
74070: GO 74121
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
74072: LD_ADDR_VAR 0 2
74076: PUSH
74077: LD_VAR 0 1
74081: PPUSH
74082: LD_INT 1
74084: PPUSH
74085: CALL_OW 275
74089: PUSH
74090: LD_VAR 0 1
74094: PPUSH
74095: LD_INT 2
74097: PPUSH
74098: CALL_OW 275
74102: PUSH
74103: LD_VAR 0 1
74107: PPUSH
74108: LD_INT 3
74110: PPUSH
74111: CALL_OW 275
74115: PUSH
74116: EMPTY
74117: LIST
74118: LIST
74119: LIST
74120: ST_TO_ADDR
// end ;
74121: LD_VAR 0 2
74125: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
74126: LD_INT 0
74128: PPUSH
74129: PPUSH
// result := array ;
74130: LD_ADDR_VAR 0 3
74134: PUSH
74135: LD_VAR 0 1
74139: ST_TO_ADDR
// if size > 0 then
74140: LD_VAR 0 2
74144: PUSH
74145: LD_INT 0
74147: GREATER
74148: IFFALSE 74194
// for i := array downto size do
74150: LD_ADDR_VAR 0 4
74154: PUSH
74155: DOUBLE
74156: LD_VAR 0 1
74160: INC
74161: ST_TO_ADDR
74162: LD_VAR 0 2
74166: PUSH
74167: FOR_DOWNTO
74168: IFFALSE 74192
// result := Delete ( result , result ) ;
74170: LD_ADDR_VAR 0 3
74174: PUSH
74175: LD_VAR 0 3
74179: PPUSH
74180: LD_VAR 0 3
74184: PPUSH
74185: CALL_OW 3
74189: ST_TO_ADDR
74190: GO 74167
74192: POP
74193: POP
// end ;
74194: LD_VAR 0 3
74198: RET
// export function ComExit ( unit ) ; var tmp ; begin
74199: LD_INT 0
74201: PPUSH
74202: PPUSH
// if not IsInUnit ( unit ) then
74203: LD_VAR 0 1
74207: PPUSH
74208: CALL_OW 310
74212: NOT
74213: IFFALSE 74217
// exit ;
74215: GO 74277
// tmp := IsInUnit ( unit ) ;
74217: LD_ADDR_VAR 0 3
74221: PUSH
74222: LD_VAR 0 1
74226: PPUSH
74227: CALL_OW 310
74231: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74232: LD_VAR 0 3
74236: PPUSH
74237: CALL_OW 247
74241: PUSH
74242: LD_INT 2
74244: EQUAL
74245: IFFALSE 74258
// ComExitVehicle ( unit ) else
74247: LD_VAR 0 1
74251: PPUSH
74252: CALL_OW 121
74256: GO 74267
// ComExitBuilding ( unit ) ;
74258: LD_VAR 0 1
74262: PPUSH
74263: CALL_OW 122
// result := tmp ;
74267: LD_ADDR_VAR 0 2
74271: PUSH
74272: LD_VAR 0 3
74276: ST_TO_ADDR
// end ;
74277: LD_VAR 0 2
74281: RET
// export function ComExitAll ( units ) ; var i ; begin
74282: LD_INT 0
74284: PPUSH
74285: PPUSH
// if not units then
74286: LD_VAR 0 1
74290: NOT
74291: IFFALSE 74295
// exit ;
74293: GO 74321
// for i in units do
74295: LD_ADDR_VAR 0 3
74299: PUSH
74300: LD_VAR 0 1
74304: PUSH
74305: FOR_IN
74306: IFFALSE 74319
// ComExit ( i ) ;
74308: LD_VAR 0 3
74312: PPUSH
74313: CALL 74199 0 1
74317: GO 74305
74319: POP
74320: POP
// end ;
74321: LD_VAR 0 2
74325: RET
// export function ResetHc ; begin
74326: LD_INT 0
74328: PPUSH
// InitHc ;
74329: CALL_OW 19
// hc_importance := 0 ;
74333: LD_ADDR_OWVAR 32
74337: PUSH
74338: LD_INT 0
74340: ST_TO_ADDR
// end ;
74341: LD_VAR 0 1
74345: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74346: LD_INT 0
74348: PPUSH
74349: PPUSH
74350: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74351: LD_ADDR_VAR 0 6
74355: PUSH
74356: LD_VAR 0 1
74360: PUSH
74361: LD_VAR 0 3
74365: PLUS
74366: PUSH
74367: LD_INT 2
74369: DIV
74370: ST_TO_ADDR
// if _x < 0 then
74371: LD_VAR 0 6
74375: PUSH
74376: LD_INT 0
74378: LESS
74379: IFFALSE 74396
// _x := _x * - 1 ;
74381: LD_ADDR_VAR 0 6
74385: PUSH
74386: LD_VAR 0 6
74390: PUSH
74391: LD_INT 1
74393: NEG
74394: MUL
74395: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74396: LD_ADDR_VAR 0 7
74400: PUSH
74401: LD_VAR 0 2
74405: PUSH
74406: LD_VAR 0 4
74410: PLUS
74411: PUSH
74412: LD_INT 2
74414: DIV
74415: ST_TO_ADDR
// if _y < 0 then
74416: LD_VAR 0 7
74420: PUSH
74421: LD_INT 0
74423: LESS
74424: IFFALSE 74441
// _y := _y * - 1 ;
74426: LD_ADDR_VAR 0 7
74430: PUSH
74431: LD_VAR 0 7
74435: PUSH
74436: LD_INT 1
74438: NEG
74439: MUL
74440: ST_TO_ADDR
// result := [ _x , _y ] ;
74441: LD_ADDR_VAR 0 5
74445: PUSH
74446: LD_VAR 0 6
74450: PUSH
74451: LD_VAR 0 7
74455: PUSH
74456: EMPTY
74457: LIST
74458: LIST
74459: ST_TO_ADDR
// end ;
74460: LD_VAR 0 5
74464: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74465: LD_INT 0
74467: PPUSH
74468: PPUSH
74469: PPUSH
74470: PPUSH
// task := GetTaskList ( unit ) ;
74471: LD_ADDR_VAR 0 7
74475: PUSH
74476: LD_VAR 0 1
74480: PPUSH
74481: CALL_OW 437
74485: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74486: LD_VAR 0 7
74490: NOT
74491: PUSH
74492: LD_VAR 0 1
74496: PPUSH
74497: LD_VAR 0 2
74501: PPUSH
74502: CALL_OW 308
74506: NOT
74507: AND
74508: IFFALSE 74512
// exit ;
74510: GO 74630
// if IsInArea ( unit , area ) then
74512: LD_VAR 0 1
74516: PPUSH
74517: LD_VAR 0 2
74521: PPUSH
74522: CALL_OW 308
74526: IFFALSE 74544
// begin ComMoveToArea ( unit , goAway ) ;
74528: LD_VAR 0 1
74532: PPUSH
74533: LD_VAR 0 3
74537: PPUSH
74538: CALL_OW 113
// exit ;
74542: GO 74630
// end ; if task [ 1 ] [ 1 ] <> M then
74544: LD_VAR 0 7
74548: PUSH
74549: LD_INT 1
74551: ARRAY
74552: PUSH
74553: LD_INT 1
74555: ARRAY
74556: PUSH
74557: LD_STRING M
74559: NONEQUAL
74560: IFFALSE 74564
// exit ;
74562: GO 74630
// x := task [ 1 ] [ 2 ] ;
74564: LD_ADDR_VAR 0 5
74568: PUSH
74569: LD_VAR 0 7
74573: PUSH
74574: LD_INT 1
74576: ARRAY
74577: PUSH
74578: LD_INT 2
74580: ARRAY
74581: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74582: LD_ADDR_VAR 0 6
74586: PUSH
74587: LD_VAR 0 7
74591: PUSH
74592: LD_INT 1
74594: ARRAY
74595: PUSH
74596: LD_INT 3
74598: ARRAY
74599: ST_TO_ADDR
// if InArea ( x , y , area ) then
74600: LD_VAR 0 5
74604: PPUSH
74605: LD_VAR 0 6
74609: PPUSH
74610: LD_VAR 0 2
74614: PPUSH
74615: CALL_OW 309
74619: IFFALSE 74630
// ComStop ( unit ) ;
74621: LD_VAR 0 1
74625: PPUSH
74626: CALL_OW 141
// end ;
74630: LD_VAR 0 4
74634: RET
// export function Abs ( value ) ; begin
74635: LD_INT 0
74637: PPUSH
// result := value ;
74638: LD_ADDR_VAR 0 2
74642: PUSH
74643: LD_VAR 0 1
74647: ST_TO_ADDR
// if value < 0 then
74648: LD_VAR 0 1
74652: PUSH
74653: LD_INT 0
74655: LESS
74656: IFFALSE 74673
// result := value * - 1 ;
74658: LD_ADDR_VAR 0 2
74662: PUSH
74663: LD_VAR 0 1
74667: PUSH
74668: LD_INT 1
74670: NEG
74671: MUL
74672: ST_TO_ADDR
// end ;
74673: LD_VAR 0 2
74677: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74678: LD_INT 0
74680: PPUSH
74681: PPUSH
74682: PPUSH
74683: PPUSH
74684: PPUSH
74685: PPUSH
74686: PPUSH
74687: PPUSH
// if not unit or not building then
74688: LD_VAR 0 1
74692: NOT
74693: PUSH
74694: LD_VAR 0 2
74698: NOT
74699: OR
74700: IFFALSE 74704
// exit ;
74702: GO 74930
// x := GetX ( building ) ;
74704: LD_ADDR_VAR 0 4
74708: PUSH
74709: LD_VAR 0 2
74713: PPUSH
74714: CALL_OW 250
74718: ST_TO_ADDR
// y := GetY ( building ) ;
74719: LD_ADDR_VAR 0 6
74723: PUSH
74724: LD_VAR 0 2
74728: PPUSH
74729: CALL_OW 251
74733: ST_TO_ADDR
// d := GetDir ( building ) ;
74734: LD_ADDR_VAR 0 8
74738: PUSH
74739: LD_VAR 0 2
74743: PPUSH
74744: CALL_OW 254
74748: ST_TO_ADDR
// r := 4 ;
74749: LD_ADDR_VAR 0 9
74753: PUSH
74754: LD_INT 4
74756: ST_TO_ADDR
// for i := 1 to 5 do
74757: LD_ADDR_VAR 0 10
74761: PUSH
74762: DOUBLE
74763: LD_INT 1
74765: DEC
74766: ST_TO_ADDR
74767: LD_INT 5
74769: PUSH
74770: FOR_TO
74771: IFFALSE 74928
// begin _x := ShiftX ( x , d , r + i ) ;
74773: LD_ADDR_VAR 0 5
74777: PUSH
74778: LD_VAR 0 4
74782: PPUSH
74783: LD_VAR 0 8
74787: PPUSH
74788: LD_VAR 0 9
74792: PUSH
74793: LD_VAR 0 10
74797: PLUS
74798: PPUSH
74799: CALL_OW 272
74803: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74804: LD_ADDR_VAR 0 7
74808: PUSH
74809: LD_VAR 0 6
74813: PPUSH
74814: LD_VAR 0 8
74818: PPUSH
74819: LD_VAR 0 9
74823: PUSH
74824: LD_VAR 0 10
74828: PLUS
74829: PPUSH
74830: CALL_OW 273
74834: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74835: LD_VAR 0 5
74839: PPUSH
74840: LD_VAR 0 7
74844: PPUSH
74845: CALL_OW 488
74849: PUSH
74850: LD_VAR 0 5
74854: PPUSH
74855: LD_VAR 0 7
74859: PPUSH
74860: CALL_OW 428
74864: PPUSH
74865: CALL_OW 247
74869: PUSH
74870: LD_INT 3
74872: PUSH
74873: LD_INT 2
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: IN
74880: NOT
74881: AND
74882: IFFALSE 74926
// begin ComMoveXY ( unit , _x , _y ) ;
74884: LD_VAR 0 1
74888: PPUSH
74889: LD_VAR 0 5
74893: PPUSH
74894: LD_VAR 0 7
74898: PPUSH
74899: CALL_OW 111
// result := [ _x , _y ] ;
74903: LD_ADDR_VAR 0 3
74907: PUSH
74908: LD_VAR 0 5
74912: PUSH
74913: LD_VAR 0 7
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: ST_TO_ADDR
// exit ;
74922: POP
74923: POP
74924: GO 74930
// end ; end ;
74926: GO 74770
74928: POP
74929: POP
// end ;
74930: LD_VAR 0 3
74934: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74935: LD_INT 0
74937: PPUSH
74938: PPUSH
74939: PPUSH
// result := 0 ;
74940: LD_ADDR_VAR 0 3
74944: PUSH
74945: LD_INT 0
74947: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74948: LD_VAR 0 1
74952: PUSH
74953: LD_INT 0
74955: LESS
74956: PUSH
74957: LD_VAR 0 1
74961: PUSH
74962: LD_INT 8
74964: GREATER
74965: OR
74966: PUSH
74967: LD_VAR 0 2
74971: PUSH
74972: LD_INT 0
74974: LESS
74975: OR
74976: PUSH
74977: LD_VAR 0 2
74981: PUSH
74982: LD_INT 8
74984: GREATER
74985: OR
74986: IFFALSE 74990
// exit ;
74988: GO 75065
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74990: LD_ADDR_VAR 0 4
74994: PUSH
74995: LD_INT 22
74997: PUSH
74998: LD_VAR 0 2
75002: PUSH
75003: EMPTY
75004: LIST
75005: LIST
75006: PPUSH
75007: CALL_OW 69
75011: PUSH
75012: FOR_IN
75013: IFFALSE 75063
// begin un := UnitShoot ( i ) ;
75015: LD_ADDR_VAR 0 5
75019: PUSH
75020: LD_VAR 0 4
75024: PPUSH
75025: CALL_OW 504
75029: ST_TO_ADDR
// if GetSide ( un ) = side1 then
75030: LD_VAR 0 5
75034: PPUSH
75035: CALL_OW 255
75039: PUSH
75040: LD_VAR 0 1
75044: EQUAL
75045: IFFALSE 75061
// begin result := un ;
75047: LD_ADDR_VAR 0 3
75051: PUSH
75052: LD_VAR 0 5
75056: ST_TO_ADDR
// exit ;
75057: POP
75058: POP
75059: GO 75065
// end ; end ;
75061: GO 75012
75063: POP
75064: POP
// end ;
75065: LD_VAR 0 3
75069: RET
// export function GetCargoBay ( units ) ; begin
75070: LD_INT 0
75072: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
75073: LD_ADDR_VAR 0 2
75077: PUSH
75078: LD_VAR 0 1
75082: PPUSH
75083: LD_INT 2
75085: PUSH
75086: LD_INT 34
75088: PUSH
75089: LD_INT 12
75091: PUSH
75092: EMPTY
75093: LIST
75094: LIST
75095: PUSH
75096: LD_INT 34
75098: PUSH
75099: LD_INT 51
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: PUSH
75106: LD_INT 34
75108: PUSH
75109: LD_INT 32
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: PUSH
75116: LD_INT 34
75118: PUSH
75119: LD_EXP 51
75123: PUSH
75124: EMPTY
75125: LIST
75126: LIST
75127: PUSH
75128: EMPTY
75129: LIST
75130: LIST
75131: LIST
75132: LIST
75133: LIST
75134: PPUSH
75135: CALL_OW 72
75139: ST_TO_ADDR
// end ;
75140: LD_VAR 0 2
75144: RET
// export function Negate ( value ) ; begin
75145: LD_INT 0
75147: PPUSH
// result := not value ;
75148: LD_ADDR_VAR 0 2
75152: PUSH
75153: LD_VAR 0 1
75157: NOT
75158: ST_TO_ADDR
// end ;
75159: LD_VAR 0 2
75163: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
75164: LD_INT 0
75166: PPUSH
// if x1 = x2 then
75167: LD_VAR 0 1
75171: PUSH
75172: LD_VAR 0 3
75176: EQUAL
75177: IFFALSE 75211
// begin if y1 > y2 then
75179: LD_VAR 0 2
75183: PUSH
75184: LD_VAR 0 4
75188: GREATER
75189: IFFALSE 75201
// result := 0 else
75191: LD_ADDR_VAR 0 5
75195: PUSH
75196: LD_INT 0
75198: ST_TO_ADDR
75199: GO 75209
// result := 3 ;
75201: LD_ADDR_VAR 0 5
75205: PUSH
75206: LD_INT 3
75208: ST_TO_ADDR
// exit ;
75209: GO 75297
// end ; if y1 = y2 then
75211: LD_VAR 0 2
75215: PUSH
75216: LD_VAR 0 4
75220: EQUAL
75221: IFFALSE 75255
// begin if x1 > x2 then
75223: LD_VAR 0 1
75227: PUSH
75228: LD_VAR 0 3
75232: GREATER
75233: IFFALSE 75245
// result := 1 else
75235: LD_ADDR_VAR 0 5
75239: PUSH
75240: LD_INT 1
75242: ST_TO_ADDR
75243: GO 75253
// result := 4 ;
75245: LD_ADDR_VAR 0 5
75249: PUSH
75250: LD_INT 4
75252: ST_TO_ADDR
// exit ;
75253: GO 75297
// end ; if x1 > x2 and y1 > y2 then
75255: LD_VAR 0 1
75259: PUSH
75260: LD_VAR 0 3
75264: GREATER
75265: PUSH
75266: LD_VAR 0 2
75270: PUSH
75271: LD_VAR 0 4
75275: GREATER
75276: AND
75277: IFFALSE 75289
// result := 2 else
75279: LD_ADDR_VAR 0 5
75283: PUSH
75284: LD_INT 2
75286: ST_TO_ADDR
75287: GO 75297
// result := 5 ;
75289: LD_ADDR_VAR 0 5
75293: PUSH
75294: LD_INT 5
75296: ST_TO_ADDR
// end ;
75297: LD_VAR 0 5
75301: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75302: LD_INT 0
75304: PPUSH
75305: PPUSH
// if not driver or not IsInUnit ( driver ) then
75306: LD_VAR 0 1
75310: NOT
75311: PUSH
75312: LD_VAR 0 1
75316: PPUSH
75317: CALL_OW 310
75321: NOT
75322: OR
75323: IFFALSE 75327
// exit ;
75325: GO 75417
// vehicle := IsInUnit ( driver ) ;
75327: LD_ADDR_VAR 0 3
75331: PUSH
75332: LD_VAR 0 1
75336: PPUSH
75337: CALL_OW 310
75341: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75342: LD_VAR 0 1
75346: PPUSH
75347: LD_STRING \
75349: PUSH
75350: LD_INT 0
75352: PUSH
75353: LD_INT 0
75355: PUSH
75356: LD_INT 0
75358: PUSH
75359: LD_INT 0
75361: PUSH
75362: LD_INT 0
75364: PUSH
75365: LD_INT 0
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: PUSH
75377: LD_STRING E
75379: PUSH
75380: LD_INT 0
75382: PUSH
75383: LD_INT 0
75385: PUSH
75386: LD_VAR 0 3
75390: PUSH
75391: LD_INT 0
75393: PUSH
75394: LD_INT 0
75396: PUSH
75397: LD_INT 0
75399: PUSH
75400: EMPTY
75401: LIST
75402: LIST
75403: LIST
75404: LIST
75405: LIST
75406: LIST
75407: LIST
75408: PUSH
75409: EMPTY
75410: LIST
75411: LIST
75412: PPUSH
75413: CALL_OW 446
// end ;
75417: LD_VAR 0 2
75421: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75422: LD_INT 0
75424: PPUSH
75425: PPUSH
// if not driver or not IsInUnit ( driver ) then
75426: LD_VAR 0 1
75430: NOT
75431: PUSH
75432: LD_VAR 0 1
75436: PPUSH
75437: CALL_OW 310
75441: NOT
75442: OR
75443: IFFALSE 75447
// exit ;
75445: GO 75537
// vehicle := IsInUnit ( driver ) ;
75447: LD_ADDR_VAR 0 3
75451: PUSH
75452: LD_VAR 0 1
75456: PPUSH
75457: CALL_OW 310
75461: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75462: LD_VAR 0 1
75466: PPUSH
75467: LD_STRING \
75469: PUSH
75470: LD_INT 0
75472: PUSH
75473: LD_INT 0
75475: PUSH
75476: LD_INT 0
75478: PUSH
75479: LD_INT 0
75481: PUSH
75482: LD_INT 0
75484: PUSH
75485: LD_INT 0
75487: PUSH
75488: EMPTY
75489: LIST
75490: LIST
75491: LIST
75492: LIST
75493: LIST
75494: LIST
75495: LIST
75496: PUSH
75497: LD_STRING E
75499: PUSH
75500: LD_INT 0
75502: PUSH
75503: LD_INT 0
75505: PUSH
75506: LD_VAR 0 3
75510: PUSH
75511: LD_INT 0
75513: PUSH
75514: LD_INT 0
75516: PUSH
75517: LD_INT 0
75519: PUSH
75520: EMPTY
75521: LIST
75522: LIST
75523: LIST
75524: LIST
75525: LIST
75526: LIST
75527: LIST
75528: PUSH
75529: EMPTY
75530: LIST
75531: LIST
75532: PPUSH
75533: CALL_OW 447
// end ;
75537: LD_VAR 0 2
75541: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75542: LD_INT 0
75544: PPUSH
75545: PPUSH
75546: PPUSH
// tmp := [ ] ;
75547: LD_ADDR_VAR 0 5
75551: PUSH
75552: EMPTY
75553: ST_TO_ADDR
// for i in units do
75554: LD_ADDR_VAR 0 4
75558: PUSH
75559: LD_VAR 0 1
75563: PUSH
75564: FOR_IN
75565: IFFALSE 75603
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75567: LD_ADDR_VAR 0 5
75571: PUSH
75572: LD_VAR 0 5
75576: PPUSH
75577: LD_VAR 0 5
75581: PUSH
75582: LD_INT 1
75584: PLUS
75585: PPUSH
75586: LD_VAR 0 4
75590: PPUSH
75591: CALL_OW 256
75595: PPUSH
75596: CALL_OW 2
75600: ST_TO_ADDR
75601: GO 75564
75603: POP
75604: POP
// if not tmp then
75605: LD_VAR 0 5
75609: NOT
75610: IFFALSE 75614
// exit ;
75612: GO 75662
// if asc then
75614: LD_VAR 0 2
75618: IFFALSE 75642
// result := SortListByListAsc ( units , tmp ) else
75620: LD_ADDR_VAR 0 3
75624: PUSH
75625: LD_VAR 0 1
75629: PPUSH
75630: LD_VAR 0 5
75634: PPUSH
75635: CALL_OW 76
75639: ST_TO_ADDR
75640: GO 75662
// result := SortListByListDesc ( units , tmp ) ;
75642: LD_ADDR_VAR 0 3
75646: PUSH
75647: LD_VAR 0 1
75651: PPUSH
75652: LD_VAR 0 5
75656: PPUSH
75657: CALL_OW 77
75661: ST_TO_ADDR
// end ;
75662: LD_VAR 0 3
75666: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75667: LD_INT 0
75669: PPUSH
75670: PPUSH
// task := GetTaskList ( mech ) ;
75671: LD_ADDR_VAR 0 4
75675: PUSH
75676: LD_VAR 0 1
75680: PPUSH
75681: CALL_OW 437
75685: ST_TO_ADDR
// if not task then
75686: LD_VAR 0 4
75690: NOT
75691: IFFALSE 75695
// exit ;
75693: GO 75737
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75695: LD_ADDR_VAR 0 3
75699: PUSH
75700: LD_VAR 0 4
75704: PUSH
75705: LD_INT 1
75707: ARRAY
75708: PUSH
75709: LD_INT 1
75711: ARRAY
75712: PUSH
75713: LD_STRING r
75715: EQUAL
75716: PUSH
75717: LD_VAR 0 4
75721: PUSH
75722: LD_INT 1
75724: ARRAY
75725: PUSH
75726: LD_INT 4
75728: ARRAY
75729: PUSH
75730: LD_VAR 0 2
75734: EQUAL
75735: AND
75736: ST_TO_ADDR
// end ;
75737: LD_VAR 0 3
75741: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75742: LD_INT 0
75744: PPUSH
// SetDir ( unit , d ) ;
75745: LD_VAR 0 1
75749: PPUSH
75750: LD_VAR 0 4
75754: PPUSH
75755: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75759: LD_VAR 0 1
75763: PPUSH
75764: LD_VAR 0 2
75768: PPUSH
75769: LD_VAR 0 3
75773: PPUSH
75774: LD_VAR 0 5
75778: PPUSH
75779: CALL_OW 48
// end ;
75783: LD_VAR 0 6
75787: RET
// export function ToNaturalNumber ( number ) ; begin
75788: LD_INT 0
75790: PPUSH
// result := number div 1 ;
75791: LD_ADDR_VAR 0 2
75795: PUSH
75796: LD_VAR 0 1
75800: PUSH
75801: LD_INT 1
75803: DIV
75804: ST_TO_ADDR
// if number < 0 then
75805: LD_VAR 0 1
75809: PUSH
75810: LD_INT 0
75812: LESS
75813: IFFALSE 75823
// result := 0 ;
75815: LD_ADDR_VAR 0 2
75819: PUSH
75820: LD_INT 0
75822: ST_TO_ADDR
// end ;
75823: LD_VAR 0 2
75827: RET
// export function SortByClass ( units , class ) ; var un ; begin
75828: LD_INT 0
75830: PPUSH
75831: PPUSH
// if not units or not class then
75832: LD_VAR 0 1
75836: NOT
75837: PUSH
75838: LD_VAR 0 2
75842: NOT
75843: OR
75844: IFFALSE 75848
// exit ;
75846: GO 75943
// result := [ ] ;
75848: LD_ADDR_VAR 0 3
75852: PUSH
75853: EMPTY
75854: ST_TO_ADDR
// for un in units do
75855: LD_ADDR_VAR 0 4
75859: PUSH
75860: LD_VAR 0 1
75864: PUSH
75865: FOR_IN
75866: IFFALSE 75941
// if GetClass ( un ) = class then
75868: LD_VAR 0 4
75872: PPUSH
75873: CALL_OW 257
75877: PUSH
75878: LD_VAR 0 2
75882: EQUAL
75883: IFFALSE 75910
// result := Insert ( result , 1 , un ) else
75885: LD_ADDR_VAR 0 3
75889: PUSH
75890: LD_VAR 0 3
75894: PPUSH
75895: LD_INT 1
75897: PPUSH
75898: LD_VAR 0 4
75902: PPUSH
75903: CALL_OW 2
75907: ST_TO_ADDR
75908: GO 75939
// result := Replace ( result , result + 1 , un ) ;
75910: LD_ADDR_VAR 0 3
75914: PUSH
75915: LD_VAR 0 3
75919: PPUSH
75920: LD_VAR 0 3
75924: PUSH
75925: LD_INT 1
75927: PLUS
75928: PPUSH
75929: LD_VAR 0 4
75933: PPUSH
75934: CALL_OW 1
75938: ST_TO_ADDR
75939: GO 75865
75941: POP
75942: POP
// end ; end_of_file
75943: LD_VAR 0 3
75947: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75948: LD_VAR 0 1
75952: PUSH
75953: LD_INT 200
75955: DOUBLE
75956: GREATEREQUAL
75957: IFFALSE 75965
75959: LD_INT 299
75961: DOUBLE
75962: LESSEQUAL
75963: IFTRUE 75967
75965: GO 75999
75967: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75968: LD_VAR 0 1
75972: PPUSH
75973: LD_VAR 0 2
75977: PPUSH
75978: LD_VAR 0 3
75982: PPUSH
75983: LD_VAR 0 4
75987: PPUSH
75988: LD_VAR 0 5
75992: PPUSH
75993: CALL 33191 0 5
75997: GO 76076
75999: LD_INT 300
76001: DOUBLE
76002: GREATEREQUAL
76003: IFFALSE 76011
76005: LD_INT 399
76007: DOUBLE
76008: LESSEQUAL
76009: IFTRUE 76013
76011: GO 76075
76013: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76014: LD_VAR 0 1
76018: PPUSH
76019: LD_VAR 0 2
76023: PPUSH
76024: LD_VAR 0 3
76028: PPUSH
76029: LD_VAR 0 4
76033: PPUSH
76034: LD_VAR 0 5
76038: PPUSH
76039: LD_VAR 0 6
76043: PPUSH
76044: LD_VAR 0 7
76048: PPUSH
76049: LD_VAR 0 8
76053: PPUSH
76054: LD_VAR 0 9
76058: PPUSH
76059: LD_VAR 0 10
76063: PPUSH
76064: LD_VAR 0 11
76068: PPUSH
76069: CALL 31079 0 11
76073: GO 76076
76075: POP
// end ;
76076: PPOPN 11
76078: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76079: LD_VAR 0 1
76083: PPUSH
76084: LD_VAR 0 2
76088: PPUSH
76089: LD_VAR 0 3
76093: PPUSH
76094: LD_VAR 0 4
76098: PPUSH
76099: LD_VAR 0 5
76103: PPUSH
76104: CALL 33173 0 5
// end ; end_of_file
76108: PPOPN 5
76110: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76111: LD_VAR 0 1
76115: PPUSH
76116: LD_VAR 0 2
76120: PPUSH
76121: LD_VAR 0 3
76125: PPUSH
76126: LD_VAR 0 4
76130: PPUSH
76131: LD_VAR 0 5
76135: PPUSH
76136: LD_VAR 0 6
76140: PPUSH
76141: CALL 19887 0 6
// end ;
76145: PPOPN 6
76147: END
