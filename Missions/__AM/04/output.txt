// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export vehicleProduceCounter ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 45
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 46
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 44
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// vehicleProduceCounter := 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// bonusAvalaible = 0 ;
  68: LD_ADDR_EXP 43
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// firstRussianAttack = 0 ;
  76: LD_ADDR_EXP 23
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// saveDonaldson = 0 ;
  84: LD_ADDR_EXP 24
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// frankScoutBase = 0 ;
  92: LD_ADDR_EXP 25
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// harrAnswer = 0 ;
 100: LD_ADDR_EXP 26
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 108: LD_ADDR_EXP 27
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 116: LD_ADDR_EXP 28
 120: PUSH
 121: LD_INT 18900
 123: ST_TO_ADDR
// timerStatus = 0 ;
 124: LD_ADDR_EXP 29
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// startTimer = 0 ;
 132: LD_ADDR_EXP 30
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// factoryDialog = 0 ;
 140: LD_ADDR_EXP 31
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// bunkerDialog = 0 ;
 148: LD_ADDR_EXP 32
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// energyVDialog = 0 ;
 156: LD_ADDR_EXP 33
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildOil = 0 ;
 164: LD_ADDR_EXP 34
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// buildPower = 0 ;
 172: LD_ADDR_EXP 35
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 180: LD_ADDR_EXP 36
 184: PUSH
 185: LD_INT 14
 187: PUSH
 188: LD_INT 12
 190: PUSH
 191: LD_INT 11
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_OWVAR 67
 203: ARRAY
 204: ST_TO_ADDR
// AIEnable = 1 ;
 205: LD_ADDR_EXP 37
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 213: LD_ADDR_EXP 41
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// lostCounter = 0 ;
 221: LD_ADDR_EXP 38
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// honor = 1 ;
 229: LD_ADDR_EXP 39
 233: PUSH
 234: LD_INT 1
 236: ST_TO_ADDR
// escapeAvalaible = 0 ;
 237: LD_ADDR_EXP 40
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// PrepareDifficulty ;
 245: CALL 4435 0 0
// PrepareRussianBase ;
 249: CALL 2801 0 0
// PrepareRussianCommander ;
 253: CALL 2752 0 0
// PrepareHeroes ;
 257: CALL 470 0 0
// SetBName ( ambdept0 , gamma ) ;
 261: LD_INT 4
 263: PPUSH
 264: LD_STRING gamma
 266: PPUSH
 267: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 271: LD_INT 21
 273: PPUSH
 274: LD_STRING fyodor
 276: PPUSH
 277: CALL_OW 500
// end ;
 281: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 282: LD_EXP 44
 286: PUSH
 287: LD_INT 1
 289: EQUAL
 290: IFFALSE 395
 292: GO 294
 294: DISABLE
 295: LD_INT 0
 297: PPUSH
// begin enable ;
 298: ENABLE
// fogoff ( true ) ;
 299: LD_INT 1
 301: PPUSH
 302: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 306: LD_ADDR_VAR 0 1
 310: PUSH
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 21
 323: PUSH
 324: LD_INT 1
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PPUSH
 335: CALL_OW 69
 339: PUSH
 340: FOR_IN
 341: IFFALSE 357
// SetLives ( i , 1000 ) ;
 343: LD_VAR 0 1
 347: PPUSH
 348: LD_INT 1000
 350: PPUSH
 351: CALL_OW 234
 355: GO 340
 357: POP
 358: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 359: LD_INT 4
 361: PPUSH
 362: CALL_OW 274
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_INT 9999
 372: PPUSH
 373: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 377: LD_INT 4
 379: PPUSH
 380: CALL_OW 274
 384: PPUSH
 385: LD_INT 2
 387: PPUSH
 388: LD_INT 9999
 390: PPUSH
 391: CALL_OW 277
// end ;
 395: PPOPN 1
 397: END
// every 0 0$2 trigger FilterAllUnits ( [ f_side , 6 ] ) = 0 do
 398: LD_INT 22
 400: PUSH
 401: LD_INT 6
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PPUSH
 408: CALL_OW 69
 412: PUSH
 413: LD_INT 0
 415: EQUAL
 416: IFFALSE 428
 418: GO 420
 420: DISABLE
// SetAchievement ( ACH_BASE ) ;
 421: LD_STRING ACH_BASE
 423: PPUSH
 424: CALL_OW 543
 428: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , ru_gun ] ] ) do
 429: LD_INT 22
 431: PUSH
 432: LD_INT 1
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: PUSH
 439: LD_INT 34
 441: PUSH
 442: LD_INT 44
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PPUSH
 453: CALL_OW 69
 457: IFFALSE 469
 459: GO 461
 461: DISABLE
// SetAchievement ( ACH_GUN ) ; end_of_file
 462: LD_STRING ACH_GUN
 464: PPUSH
 465: CALL_OW 543
 469: END
// export function PrepareHeroes ; var i , tmp ; begin
 470: LD_INT 0
 472: PPUSH
 473: PPUSH
 474: PPUSH
// uc_side = 1 ;
 475: LD_ADDR_OWVAR 20
 479: PUSH
 480: LD_INT 1
 482: ST_TO_ADDR
// uc_nation = 1 ;
 483: LD_ADDR_OWVAR 21
 487: PUSH
 488: LD_INT 1
 490: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 491: LD_ADDR_EXP 1
 495: PUSH
 496: LD_STRING JMM
 498: PPUSH
 499: LD_INT 1
 501: PPUSH
 502: CALL 4037 0 2
 506: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 507: LD_ADDR_EXP 4
 511: PUSH
 512: LD_STRING Lisa
 514: PPUSH
 515: LD_INT 1
 517: PPUSH
 518: CALL 4037 0 2
 522: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 523: LD_ADDR_EXP 7
 527: PUSH
 528: LD_STRING Brown
 530: PPUSH
 531: LD_INT 0
 533: PPUSH
 534: CALL 4037 0 2
 538: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 539: LD_ADDR_EXP 8
 543: PUSH
 544: LD_STRING Dickens
 546: PPUSH
 547: LD_INT 0
 549: PPUSH
 550: CALL 4037 0 2
 554: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 555: LD_ADDR_EXP 9
 559: PUSH
 560: LD_STRING Woodruff
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL 4037 0 2
 570: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 571: LD_ADDR_EXP 12
 575: PUSH
 576: LD_STRING Campell
 578: PPUSH
 579: LD_INT 0
 581: PPUSH
 582: CALL 4037 0 2
 586: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 587: LD_ADDR_EXP 10
 591: PUSH
 592: LD_STRING Knight
 594: PPUSH
 595: LD_INT 0
 597: PPUSH
 598: CALL 4037 0 2
 602: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 603: LD_ADDR_EXP 11
 607: PUSH
 608: LD_STRING Claptopn
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: CALL 4037 0 2
 618: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 619: LD_ADDR_EXP 14
 623: PUSH
 624: LD_STRING Harisson
 626: PPUSH
 627: LD_INT 0
 629: PPUSH
 630: CALL 4037 0 2
 634: ST_TO_ADDR
// if Lisa = false then
 635: LD_EXP 4
 639: PUSH
 640: LD_INT 0
 642: EQUAL
 643: IFFALSE 661
// Bobby = PrepareUnit ( Bobby , true ) ;
 645: LD_ADDR_EXP 2
 649: PUSH
 650: LD_STRING Bobby
 652: PPUSH
 653: LD_INT 1
 655: PPUSH
 656: CALL 4037 0 2
 660: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 661: LD_EXP 4
 665: PUSH
 666: LD_INT 0
 668: EQUAL
 669: PUSH
 670: LD_EXP 2
 674: PUSH
 675: LD_INT 0
 677: EQUAL
 678: AND
 679: IFFALSE 697
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 681: LD_ADDR_EXP 3
 685: PUSH
 686: LD_STRING Cyrus
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: CALL 4037 0 2
 696: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 697: LD_EXP 4
 701: PUSH
 702: LD_INT 0
 704: EQUAL
 705: PUSH
 706: LD_EXP 2
 710: PUSH
 711: LD_INT 0
 713: EQUAL
 714: AND
 715: PUSH
 716: LD_EXP 3
 720: PUSH
 721: LD_INT 0
 723: EQUAL
 724: AND
 725: IFFALSE 824
// begin tmp = CreateCharacterSet ( 03_others ) ;
 727: LD_ADDR_VAR 0 3
 731: PUSH
 732: LD_STRING 03_others
 734: PPUSH
 735: CALL_OW 31
 739: ST_TO_ADDR
// if tmp then
 740: LD_VAR 0 3
 744: IFFALSE 801
// begin RandomBeforeMission = tmp [ 1 ] ;
 746: LD_ADDR_EXP 6
 750: PUSH
 751: LD_VAR 0 3
 755: PUSH
 756: LD_INT 1
 758: ARRAY
 759: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 760: LD_STRING 03_others
 762: PPUSH
 763: CALL_OW 40
// if tmp > 1 then
 767: LD_VAR 0 3
 771: PUSH
 772: LD_INT 1
 774: GREATER
 775: IFFALSE 799
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 777: LD_VAR 0 3
 781: PUSH
 782: LD_VAR 0 3
 786: PUSH
 787: LD_INT 1
 789: ARRAY
 790: DIFF
 791: PPUSH
 792: LD_STRING 03_others
 794: PPUSH
 795: CALL_OW 38
// end else
 799: GO 824
// begin PrepareHuman ( false , 1 , 3 ) ;
 801: LD_INT 0
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 3
 809: PPUSH
 810: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 814: LD_ADDR_EXP 6
 818: PUSH
 819: CALL_OW 44
 823: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 824: LD_ADDR_OWVAR 20
 828: PUSH
 829: LD_INT 4
 831: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 832: LD_ADDR_EXP 13
 836: PUSH
 837: LD_STRING Donaldson
 839: PPUSH
 840: LD_INT 0
 842: PPUSH
 843: CALL 4037 0 2
 847: ST_TO_ADDR
// if TestCharacters ( 03_Frank ) = true then
 848: LD_STRING 03_Frank
 850: PPUSH
 851: CALL_OW 28
 855: PUSH
 856: LD_INT 1
 858: EQUAL
 859: IFFALSE 903
// begin Frank = PrepareUnit ( 03_Frank , true ) ;
 861: LD_ADDR_EXP 5
 865: PUSH
 866: LD_STRING 03_Frank
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: CALL 4037 0 2
 876: ST_TO_ADDR
// if Frank = 0 then
 877: LD_EXP 5
 881: PUSH
 882: LD_INT 0
 884: EQUAL
 885: IFFALSE 903
// Frank = PrepareUnit ( Frank , false ) ;
 887: LD_ADDR_EXP 5
 891: PUSH
 892: LD_STRING Frank
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL 4037 0 2
 902: ST_TO_ADDR
// end ; PlaceHumanInUnit ( JMM , amvj ) ;
 903: LD_EXP 1
 907: PPUSH
 908: LD_INT 32
 910: PPUSH
 911: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 915: LD_EXP 7
 919: PPUSH
 920: LD_INT 1
 922: PPUSH
 923: LD_INT 0
 925: PPUSH
 926: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 930: LD_EXP 7
 934: PPUSH
 935: LD_INT 32
 937: PPUSH
 938: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 942: LD_EXP 8
 946: PPUSH
 947: LD_INT 2
 949: PPUSH
 950: LD_INT 0
 952: PPUSH
 953: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 957: LD_EXP 9
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 972: LD_EXP 12
 976: PPUSH
 977: LD_INT 2
 979: PPUSH
 980: LD_INT 0
 982: PPUSH
 983: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 987: LD_EXP 10
 991: PPUSH
 992: LD_INT 2
 994: PPUSH
 995: LD_INT 0
 997: PPUSH
 998: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
1002: LD_EXP 11
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: LD_INT 0
1012: PPUSH
1013: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
1017: LD_EXP 4
1021: PPUSH
1022: LD_INT 2
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// if Lisa = false then
1032: LD_EXP 4
1036: PUSH
1037: LD_INT 0
1039: EQUAL
1040: IFFALSE 1057
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
1042: LD_EXP 2
1046: PPUSH
1047: LD_INT 2
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: CALL_OW 49
// if Lisa = false and Bobby = false then
1057: LD_EXP 4
1061: PUSH
1062: LD_INT 0
1064: EQUAL
1065: PUSH
1066: LD_EXP 2
1070: PUSH
1071: LD_INT 0
1073: EQUAL
1074: AND
1075: IFFALSE 1092
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
1077: LD_EXP 3
1081: PPUSH
1082: LD_INT 2
1084: PPUSH
1085: LD_INT 0
1087: PPUSH
1088: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1092: LD_EXP 4
1096: PUSH
1097: LD_INT 0
1099: EQUAL
1100: PUSH
1101: LD_EXP 2
1105: PUSH
1106: LD_INT 0
1108: EQUAL
1109: AND
1110: PUSH
1111: LD_EXP 3
1115: PUSH
1116: LD_INT 0
1118: EQUAL
1119: AND
1120: IFFALSE 1137
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1122: LD_EXP 6
1126: PPUSH
1127: LD_INT 2
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 49
// end ;
1137: LD_VAR 0 1
1141: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1142: LD_INT 0
1144: PPUSH
1145: PPUSH
1146: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1147: LD_EXP 13
1151: PPUSH
1152: LD_INT 10
1154: PPUSH
1155: LD_INT 0
1157: PPUSH
1158: CALL_OW 49
// if Frank then
1162: LD_EXP 5
1166: IFFALSE 1183
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1168: LD_EXP 5
1172: PPUSH
1173: LD_INT 10
1175: PPUSH
1176: LD_INT 0
1178: PPUSH
1179: CALL_OW 49
// uc_nation = 1 ;
1183: LD_ADDR_OWVAR 21
1187: PUSH
1188: LD_INT 1
1190: ST_TO_ADDR
// uc_side = 4 ;
1191: LD_ADDR_OWVAR 20
1195: PUSH
1196: LD_INT 4
1198: ST_TO_ADDR
// hc_class := 3 ;
1199: LD_ADDR_OWVAR 28
1203: PUSH
1204: LD_INT 3
1206: ST_TO_ADDR
// hc_sex := sex_male ;
1207: LD_ADDR_OWVAR 27
1211: PUSH
1212: LD_INT 1
1214: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1215: LD_ADDR_OWVAR 33
1219: PUSH
1220: LD_STRING SecondCharsGal
1222: ST_TO_ADDR
// hc_face_number := 53 ;
1223: LD_ADDR_OWVAR 34
1227: PUSH
1228: LD_INT 53
1230: ST_TO_ADDR
// hc_name := Freddie Warner ;
1231: LD_ADDR_OWVAR 26
1235: PUSH
1236: LD_STRING Freddie Warner
1238: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1239: LD_ADDR_OWVAR 29
1243: PUSH
1244: LD_INT 8
1246: PUSH
1247: LD_INT 11
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1254: LD_ADDR_OWVAR 30
1258: PUSH
1259: LD_INT 0
1261: PUSH
1262: LD_INT 0
1264: PUSH
1265: LD_INT 1
1267: PUSH
1268: LD_INT 0
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1277: LD_ADDR_OWVAR 31
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: LD_INT 0
1287: PUSH
1288: LD_INT 3
1290: PUSH
1291: LD_INT 0
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: ST_TO_ADDR
// un = CreateHuman ;
1300: LD_ADDR_VAR 0 3
1304: PUSH
1305: CALL_OW 44
1309: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1310: LD_VAR 0 3
1314: PPUSH
1315: LD_INT 10
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 49
// hc_class := 1 ;
1325: LD_ADDR_OWVAR 28
1329: PUSH
1330: LD_INT 1
1332: ST_TO_ADDR
// hc_sex := sex_male ;
1333: LD_ADDR_OWVAR 27
1337: PUSH
1338: LD_INT 1
1340: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1341: LD_ADDR_OWVAR 33
1345: PUSH
1346: LD_STRING SecondCharsGal
1348: ST_TO_ADDR
// hc_face_number := 56 ;
1349: LD_ADDR_OWVAR 34
1353: PUSH
1354: LD_INT 56
1356: ST_TO_ADDR
// hc_name := Mel Brennan ;
1357: LD_ADDR_OWVAR 26
1361: PUSH
1362: LD_STRING Mel Brennan
1364: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1365: LD_ADDR_OWVAR 29
1369: PUSH
1370: LD_INT 12
1372: PUSH
1373: LD_INT 11
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1380: LD_ADDR_OWVAR 30
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 0
1393: PUSH
1394: LD_INT 0
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1403: LD_ADDR_OWVAR 31
1407: PUSH
1408: LD_INT 2
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: LD_INT 0
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: ST_TO_ADDR
// un = CreateHuman ;
1426: LD_ADDR_VAR 0 3
1430: PUSH
1431: CALL_OW 44
1435: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1436: LD_VAR 0 3
1440: PPUSH
1441: LD_INT 10
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 49
// hc_class := 1 ;
1451: LD_ADDR_OWVAR 28
1455: PUSH
1456: LD_INT 1
1458: ST_TO_ADDR
// hc_sex := sex_male ;
1459: LD_ADDR_OWVAR 27
1463: PUSH
1464: LD_INT 1
1466: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1467: LD_ADDR_OWVAR 33
1471: PUSH
1472: LD_STRING AmGalRemake
1474: ST_TO_ADDR
// hc_face_number := 5 ;
1475: LD_ADDR_OWVAR 34
1479: PUSH
1480: LD_INT 5
1482: ST_TO_ADDR
// hc_name := Bob Joplin ;
1483: LD_ADDR_OWVAR 26
1487: PUSH
1488: LD_STRING Bob Joplin
1490: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1491: LD_ADDR_OWVAR 29
1495: PUSH
1496: LD_INT 10
1498: PUSH
1499: LD_INT 11
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1506: LD_ADDR_OWVAR 30
1510: PUSH
1511: LD_INT 0
1513: PUSH
1514: LD_INT 1
1516: PUSH
1517: LD_INT 1
1519: PUSH
1520: LD_INT 0
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1529: LD_ADDR_OWVAR 31
1533: PUSH
1534: LD_INT 3
1536: PUSH
1537: LD_INT 1
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 1
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: ST_TO_ADDR
// un = CreateHuman ;
1552: LD_ADDR_VAR 0 3
1556: PUSH
1557: CALL_OW 44
1561: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1562: LD_VAR 0 3
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: LD_INT 0
1572: PPUSH
1573: CALL_OW 49
// hc_class := 3 ;
1577: LD_ADDR_OWVAR 28
1581: PUSH
1582: LD_INT 3
1584: ST_TO_ADDR
// hc_sex := sex_female ;
1585: LD_ADDR_OWVAR 27
1589: PUSH
1590: LD_INT 2
1592: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1593: LD_ADDR_OWVAR 33
1597: PUSH
1598: LD_STRING AmGalRemake
1600: ST_TO_ADDR
// hc_face_number := 8 ;
1601: LD_ADDR_OWVAR 34
1605: PUSH
1606: LD_INT 8
1608: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1609: LD_ADDR_OWVAR 26
1613: PUSH
1614: LD_STRING Elizabeth Whitney
1616: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1617: LD_ADDR_OWVAR 29
1621: PUSH
1622: LD_INT 9
1624: PUSH
1625: LD_INT 11
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1632: LD_ADDR_OWVAR 30
1636: PUSH
1637: LD_INT 0
1639: PUSH
1640: LD_INT 0
1642: PUSH
1643: LD_INT 2
1645: PUSH
1646: LD_INT 0
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1655: LD_ADDR_OWVAR 31
1659: PUSH
1660: LD_INT 2
1662: PUSH
1663: LD_INT 2
1665: PUSH
1666: LD_INT 4
1668: PUSH
1669: LD_INT 2
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: ST_TO_ADDR
// un = CreateHuman ;
1678: LD_ADDR_VAR 0 3
1682: PUSH
1683: CALL_OW 44
1687: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1688: LD_VAR 0 3
1692: PPUSH
1693: LD_INT 10
1695: PPUSH
1696: LD_INT 0
1698: PPUSH
1699: CALL_OW 49
// InitHc ;
1703: CALL_OW 19
// end ;
1707: LD_VAR 0 1
1711: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un , veh ; begin
1712: LD_INT 0
1714: PPUSH
1715: PPUSH
1716: PPUSH
1717: PPUSH
// uc_nation = 1 ;
1718: LD_ADDR_OWVAR 21
1722: PUSH
1723: LD_INT 1
1725: ST_TO_ADDR
// uc_side = 1 ;
1726: LD_ADDR_OWVAR 20
1730: PUSH
1731: LD_INT 1
1733: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1734: LD_ADDR_OWVAR 37
1738: PUSH
1739: LD_INT 2
1741: ST_TO_ADDR
// vc_engine := engine_combustion ;
1742: LD_ADDR_OWVAR 39
1746: PUSH
1747: LD_INT 1
1749: ST_TO_ADDR
// vc_control := control_manual ;
1750: LD_ADDR_OWVAR 38
1754: PUSH
1755: LD_INT 1
1757: ST_TO_ADDR
// vc_fuel_battery := 65 ;
1758: LD_ADDR_OWVAR 41
1762: PUSH
1763: LD_INT 65
1765: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_light_gun , us_gatling_gun ] [ Difficulty ] ;
1766: LD_ADDR_OWVAR 40
1770: PUSH
1771: LD_INT 5
1773: PUSH
1774: LD_INT 3
1776: PUSH
1777: LD_INT 4
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PUSH
1785: LD_OWVAR 67
1789: ARRAY
1790: ST_TO_ADDR
// veh := CreateVehicle ;
1791: LD_ADDR_VAR 0 5
1795: PUSH
1796: CALL_OW 45
1800: ST_TO_ADDR
// if HexInfo ( 17 , 4 ) = 0 then
1801: LD_INT 17
1803: PPUSH
1804: LD_INT 4
1806: PPUSH
1807: CALL_OW 428
1811: PUSH
1812: LD_INT 0
1814: EQUAL
1815: IFFALSE 1837
// PlaceUnitXY ( veh , 17 , 4 , false ) else
1817: LD_VAR 0 5
1821: PPUSH
1822: LD_INT 17
1824: PPUSH
1825: LD_INT 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 48
1835: GO 1855
// PlaceUnitXY ( veh , 23 , 10 , false ) ;
1837: LD_VAR 0 5
1841: PPUSH
1842: LD_INT 23
1844: PPUSH
1845: LD_INT 10
1847: PPUSH
1848: LD_INT 0
1850: PPUSH
1851: CALL_OW 48
// SetDir ( veh , 2 ) ;
1855: LD_VAR 0 5
1859: PPUSH
1860: LD_INT 2
1862: PPUSH
1863: CALL_OW 233
// hc_class := 1 ;
1867: LD_ADDR_OWVAR 28
1871: PUSH
1872: LD_INT 1
1874: ST_TO_ADDR
// hc_sex := sex_male ;
1875: LD_ADDR_OWVAR 27
1879: PUSH
1880: LD_INT 1
1882: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1883: LD_ADDR_OWVAR 33
1887: PUSH
1888: LD_STRING SecondCharsGal
1890: ST_TO_ADDR
// hc_face_number := 59 ;
1891: LD_ADDR_OWVAR 34
1895: PUSH
1896: LD_INT 59
1898: ST_TO_ADDR
// hc_name := Max Gray ;
1899: LD_ADDR_OWVAR 26
1903: PUSH
1904: LD_STRING Max Gray
1906: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1907: LD_ADDR_OWVAR 29
1911: PUSH
1912: LD_INT 9
1914: PUSH
1915: LD_INT 11
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1922: LD_ADDR_OWVAR 30
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: LD_INT 0
1935: PUSH
1936: LD_INT 0
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1945: LD_ADDR_OWVAR 31
1949: PUSH
1950: LD_INT 2
1952: PUSH
1953: LD_INT 1
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: LD_INT 0
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: ST_TO_ADDR
// un = CreateHuman ;
1968: LD_ADDR_VAR 0 4
1972: PUSH
1973: CALL_OW 44
1977: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1978: LD_VAR 0 4
1982: PPUSH
1983: LD_INT 11
1985: PPUSH
1986: LD_INT 0
1988: PPUSH
1989: CALL_OW 49
// hc_class := 1 ;
1993: LD_ADDR_OWVAR 28
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// hc_sex := sex_male ;
2001: LD_ADDR_OWVAR 27
2005: PUSH
2006: LD_INT 1
2008: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2009: LD_ADDR_OWVAR 33
2013: PUSH
2014: LD_STRING SecondCharsGal
2016: ST_TO_ADDR
// hc_face_number := 54 ;
2017: LD_ADDR_OWVAR 34
2021: PUSH
2022: LD_INT 54
2024: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
2025: LD_ADDR_OWVAR 26
2029: PUSH
2030: LD_STRING Luigi Ghbellin
2032: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2033: LD_ADDR_OWVAR 29
2037: PUSH
2038: LD_INT 11
2040: PUSH
2041: LD_INT 11
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
2048: LD_ADDR_OWVAR 30
2052: PUSH
2053: LD_INT 1
2055: PUSH
2056: LD_INT 0
2058: PUSH
2059: LD_INT 0
2061: PUSH
2062: LD_INT 0
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
2071: LD_ADDR_OWVAR 31
2075: PUSH
2076: LD_INT 1
2078: PUSH
2079: LD_INT 0
2081: PUSH
2082: LD_INT 0
2084: PUSH
2085: LD_INT 1
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: ST_TO_ADDR
// un = CreateHuman ;
2094: LD_ADDR_VAR 0 4
2098: PUSH
2099: CALL_OW 44
2103: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2104: LD_VAR 0 4
2108: PPUSH
2109: LD_INT 11
2111: PPUSH
2112: LD_INT 0
2114: PPUSH
2115: CALL_OW 49
// hc_class := 3 ;
2119: LD_ADDR_OWVAR 28
2123: PUSH
2124: LD_INT 3
2126: ST_TO_ADDR
// hc_sex := sex_male ;
2127: LD_ADDR_OWVAR 27
2131: PUSH
2132: LD_INT 1
2134: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2135: LD_ADDR_OWVAR 33
2139: PUSH
2140: LD_STRING AmGalRemake
2142: ST_TO_ADDR
// hc_face_number := 6 ;
2143: LD_ADDR_OWVAR 34
2147: PUSH
2148: LD_INT 6
2150: ST_TO_ADDR
// hc_name := Leon Carter ;
2151: LD_ADDR_OWVAR 26
2155: PUSH
2156: LD_STRING Leon Carter
2158: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
2159: LD_ADDR_OWVAR 29
2163: PUSH
2164: LD_INT 10
2166: PUSH
2167: LD_INT 9
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
2174: LD_ADDR_OWVAR 30
2178: PUSH
2179: LD_INT 0
2181: PUSH
2182: LD_INT 1
2184: PUSH
2185: LD_INT 1
2187: PUSH
2188: LD_INT 0
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: LIST
2195: LIST
2196: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
2197: LD_ADDR_OWVAR 31
2201: PUSH
2202: LD_INT 0
2204: PUSH
2205: LD_INT 1
2207: PUSH
2208: LD_INT 3
2210: PUSH
2211: LD_INT 0
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: ST_TO_ADDR
// un = CreateHuman ;
2220: LD_ADDR_VAR 0 4
2224: PUSH
2225: CALL_OW 44
2229: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2230: LD_VAR 0 4
2234: PPUSH
2235: LD_VAR 0 5
2239: PPUSH
2240: CALL_OW 52
// if count = 4 then
2244: LD_VAR 0 1
2248: PUSH
2249: LD_INT 4
2251: EQUAL
2252: IFFALSE 2380
// begin hc_class := 1 ;
2254: LD_ADDR_OWVAR 28
2258: PUSH
2259: LD_INT 1
2261: ST_TO_ADDR
// hc_sex := sex_male ;
2262: LD_ADDR_OWVAR 27
2266: PUSH
2267: LD_INT 1
2269: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2270: LD_ADDR_OWVAR 33
2274: PUSH
2275: LD_STRING SecondCharsGal
2277: ST_TO_ADDR
// hc_face_number := 34 ;
2278: LD_ADDR_OWVAR 34
2282: PUSH
2283: LD_INT 34
2285: ST_TO_ADDR
// hc_name := Ian Hill ;
2286: LD_ADDR_OWVAR 26
2290: PUSH
2291: LD_STRING Ian Hill
2293: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2294: LD_ADDR_OWVAR 29
2298: PUSH
2299: LD_INT 10
2301: PUSH
2302: LD_INT 12
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2309: LD_ADDR_OWVAR 30
2313: PUSH
2314: LD_INT 0
2316: PUSH
2317: LD_INT 0
2319: PUSH
2320: LD_INT 1
2322: PUSH
2323: LD_INT 0
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2332: LD_ADDR_OWVAR 31
2336: PUSH
2337: LD_INT 2
2339: PUSH
2340: LD_INT 0
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: LD_INT 0
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: ST_TO_ADDR
// un = CreateHuman ;
2355: LD_ADDR_VAR 0 4
2359: PUSH
2360: CALL_OW 44
2364: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2365: LD_VAR 0 4
2369: PPUSH
2370: LD_INT 11
2372: PPUSH
2373: LD_INT 0
2375: PPUSH
2376: CALL_OW 49
// end ; if count = 5 then
2380: LD_VAR 0 1
2384: PUSH
2385: LD_INT 5
2387: EQUAL
2388: IFFALSE 2642
// begin hc_class := 1 ;
2390: LD_ADDR_OWVAR 28
2394: PUSH
2395: LD_INT 1
2397: ST_TO_ADDR
// hc_sex := sex_male ;
2398: LD_ADDR_OWVAR 27
2402: PUSH
2403: LD_INT 1
2405: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2406: LD_ADDR_OWVAR 33
2410: PUSH
2411: LD_STRING SecondCharsGal
2413: ST_TO_ADDR
// hc_face_number := 34 ;
2414: LD_ADDR_OWVAR 34
2418: PUSH
2419: LD_INT 34
2421: ST_TO_ADDR
// hc_name := Ian Hill ;
2422: LD_ADDR_OWVAR 26
2426: PUSH
2427: LD_STRING Ian Hill
2429: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2430: LD_ADDR_OWVAR 29
2434: PUSH
2435: LD_INT 10
2437: PUSH
2438: LD_INT 12
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2445: LD_ADDR_OWVAR 30
2449: PUSH
2450: LD_INT 0
2452: PUSH
2453: LD_INT 0
2455: PUSH
2456: LD_INT 1
2458: PUSH
2459: LD_INT 0
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: LIST
2466: LIST
2467: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2468: LD_ADDR_OWVAR 31
2472: PUSH
2473: LD_INT 2
2475: PUSH
2476: LD_INT 0
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: LD_INT 0
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: ST_TO_ADDR
// un = CreateHuman ;
2491: LD_ADDR_VAR 0 4
2495: PUSH
2496: CALL_OW 44
2500: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2501: LD_VAR 0 4
2505: PPUSH
2506: LD_INT 11
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: CALL_OW 49
// hc_class := 1 ;
2516: LD_ADDR_OWVAR 28
2520: PUSH
2521: LD_INT 1
2523: ST_TO_ADDR
// hc_sex := sex_female ;
2524: LD_ADDR_OWVAR 27
2528: PUSH
2529: LD_INT 2
2531: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2532: LD_ADDR_OWVAR 33
2536: PUSH
2537: LD_STRING SecondCharsGal
2539: ST_TO_ADDR
// hc_face_number := 41 ;
2540: LD_ADDR_OWVAR 34
2544: PUSH
2545: LD_INT 41
2547: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2548: LD_ADDR_OWVAR 26
2552: PUSH
2553: LD_STRING Kate Wadsworth
2555: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2556: LD_ADDR_OWVAR 29
2560: PUSH
2561: LD_INT 9
2563: PUSH
2564: LD_INT 9
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2571: LD_ADDR_OWVAR 30
2575: PUSH
2576: LD_INT 0
2578: PUSH
2579: LD_INT 2
2581: PUSH
2582: LD_INT 0
2584: PUSH
2585: LD_INT 0
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2594: LD_ADDR_OWVAR 31
2598: PUSH
2599: LD_INT 2
2601: PUSH
2602: LD_INT 3
2604: PUSH
2605: LD_INT 1
2607: PUSH
2608: LD_INT 0
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: LIST
2615: LIST
2616: ST_TO_ADDR
// un = CreateHuman ;
2617: LD_ADDR_VAR 0 4
2621: PUSH
2622: CALL_OW 44
2626: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2627: LD_VAR 0 4
2631: PPUSH
2632: LD_INT 11
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2642: LD_INT 11
2644: PPUSH
2645: LD_INT 22
2647: PUSH
2648: LD_INT 1
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PUSH
2655: LD_INT 21
2657: PUSH
2658: LD_INT 1
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: PUSH
2665: LD_INT 26
2667: PUSH
2668: LD_INT 1
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: PPUSH
2680: CALL_OW 70
2684: PUSH
2685: LD_INT 1
2687: ARRAY
2688: PPUSH
2689: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2693: LD_INT 11
2695: PPUSH
2696: LD_INT 22
2698: PUSH
2699: LD_INT 1
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 21
2708: PUSH
2709: LD_INT 1
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PUSH
2716: LD_INT 26
2718: PUSH
2719: LD_INT 1
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PPUSH
2731: CALL_OW 70
2735: PUSH
2736: LD_INT 1
2738: ARRAY
2739: PPUSH
2740: LD_STRING D6-Sol3-1
2742: PPUSH
2743: CALL_OW 88
// end ; end_of_file
2747: LD_VAR 0 2
2751: RET
// export function PrepareRussianCommander ; begin
2752: LD_INT 0
2754: PPUSH
// uc_side = 3 ;
2755: LD_ADDR_OWVAR 20
2759: PUSH
2760: LD_INT 3
2762: ST_TO_ADDR
// uc_nation = 3 ;
2763: LD_ADDR_OWVAR 21
2767: PUSH
2768: LD_INT 3
2770: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2771: LD_ADDR_EXP 15
2775: PUSH
2776: LD_STRING Stolypin
2778: PPUSH
2779: CALL_OW 25
2783: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2784: LD_EXP 15
2788: PPUSH
2789: LD_INT 21
2791: PPUSH
2792: CALL_OW 52
// end ;
2796: LD_VAR 0 1
2800: RET
// export function PrepareRussianBase ; var i ; begin
2801: LD_INT 0
2803: PPUSH
2804: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2805: LD_INT 3
2807: PPUSH
2808: LD_INT 3
2810: PPUSH
2811: LD_INT 22
2813: PPUSH
2814: LD_EXP 16
2818: PPUSH
2819: LD_EXP 17
2823: PPUSH
2824: CALL_OW 12
2828: PPUSH
2829: LD_INT 1
2831: PPUSH
2832: LD_INT 2
2834: PPUSH
2835: CALL 4100 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2839: LD_INT 3
2841: PPUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 21
2847: PPUSH
2848: LD_EXP 16
2852: PPUSH
2853: LD_EXP 17
2857: PPUSH
2858: CALL_OW 12
2862: PPUSH
2863: LD_INT 2
2865: PPUSH
2866: LD_INT 3
2868: PPUSH
2869: CALL 4100 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2873: LD_INT 3
2875: PPUSH
2876: LD_INT 3
2878: PPUSH
2879: LD_INT 1
2881: PPUSH
2882: LD_EXP 16
2886: PPUSH
2887: LD_EXP 17
2891: PPUSH
2892: CALL_OW 12
2896: PPUSH
2897: LD_INT 4
2899: PPUSH
2900: LD_INT 2
2902: PPUSH
2903: CALL 4100 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2907: LD_INT 3
2909: PPUSH
2910: LD_INT 3
2912: PPUSH
2913: LD_INT 24
2915: PPUSH
2916: LD_EXP 16
2920: PPUSH
2921: LD_EXP 17
2925: PPUSH
2926: CALL_OW 12
2930: PPUSH
2931: LD_INT 3
2933: PPUSH
2934: LD_INT 6
2936: PPUSH
2937: CALL 4100 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2941: LD_ADDR_VAR 0 2
2945: PUSH
2946: LD_INT 22
2948: PUSH
2949: LD_INT 3
2951: PUSH
2952: EMPTY
2953: LIST
2954: LIST
2955: PUSH
2956: LD_INT 30
2958: PUSH
2959: LD_INT 32
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PPUSH
2970: CALL_OW 69
2974: PUSH
2975: FOR_IN
2976: IFFALSE 3016
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2978: LD_INT 3
2980: PPUSH
2981: LD_INT 3
2983: PPUSH
2984: LD_VAR 0 2
2988: PPUSH
2989: LD_EXP 16
2993: PPUSH
2994: LD_EXP 17
2998: PPUSH
2999: CALL_OW 12
3003: PPUSH
3004: LD_INT 1
3006: PPUSH
3007: LD_INT 1
3009: PPUSH
3010: CALL 4100 0 6
3014: GO 2975
3016: POP
3017: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
3018: LD_ADDR_VAR 0 2
3022: PUSH
3023: LD_INT 22
3025: PUSH
3026: LD_INT 3
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: LD_INT 30
3035: PUSH
3036: LD_INT 31
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PPUSH
3047: CALL_OW 69
3051: PUSH
3052: FOR_IN
3053: IFFALSE 3081
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
3055: LD_EXP 16
3059: PPUSH
3060: LD_EXP 17
3064: PPUSH
3065: CALL_OW 12
3069: PPUSH
3070: LD_VAR 0 2
3074: PPUSH
3075: CALL 4210 0 2
3079: GO 3052
3081: POP
3082: POP
// end ;
3083: LD_VAR 0 1
3087: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
3088: LD_INT 0
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
// uc_side = 6 ;
3094: LD_ADDR_OWVAR 20
3098: PUSH
3099: LD_INT 6
3101: ST_TO_ADDR
// uc_nation = 3 ;
3102: LD_ADDR_OWVAR 21
3106: PUSH
3107: LD_INT 3
3109: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
3110: LD_ADDR_VAR 0 2
3114: PUSH
3115: DOUBLE
3116: LD_INT 1
3118: DEC
3119: ST_TO_ADDR
3120: LD_INT 1
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: LD_INT 1
3128: PPUSH
3129: LD_INT 2
3131: PPUSH
3132: CALL_OW 12
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: LIST
3141: PUSH
3142: LD_OWVAR 67
3146: ARRAY
3147: PUSH
3148: FOR_TO
3149: IFFALSE 3309
// begin vc_engine = 1 ;
3151: LD_ADDR_OWVAR 39
3155: PUSH
3156: LD_INT 1
3158: ST_TO_ADDR
// vc_control = 1 ;
3159: LD_ADDR_OWVAR 38
3163: PUSH
3164: LD_INT 1
3166: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
3167: LD_ADDR_OWVAR 40
3171: PUSH
3172: LD_INT 42
3174: PUSH
3175: LD_INT 42
3177: PUSH
3178: LD_INT 43
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: LIST
3185: PUSH
3186: LD_OWVAR 67
3190: ARRAY
3191: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
3192: LD_ADDR_OWVAR 37
3196: PUSH
3197: LD_INT 21
3199: PUSH
3200: LD_INT 22
3202: PUSH
3203: LD_INT 22
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: LIST
3210: PUSH
3211: LD_OWVAR 67
3215: ARRAY
3216: ST_TO_ADDR
// veh = CreateVehicle ;
3217: LD_ADDR_VAR 0 3
3221: PUSH
3222: CALL_OW 45
3226: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3227: LD_VAR 0 3
3231: PPUSH
3232: LD_INT 3
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: CALL_OW 49
// hc_gallery =  ;
3242: LD_ADDR_OWVAR 33
3246: PUSH
3247: LD_STRING 
3249: ST_TO_ADDR
// hc_name =  ;
3250: LD_ADDR_OWVAR 26
3254: PUSH
3255: LD_STRING 
3257: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3258: LD_INT 0
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: LD_EXP 16
3268: PPUSH
3269: LD_EXP 17
3273: PPUSH
3274: CALL_OW 12
3278: PPUSH
3279: CALL_OW 380
// un = CreateHuman ;
3283: LD_ADDR_VAR 0 4
3287: PUSH
3288: CALL_OW 44
3292: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3293: LD_VAR 0 4
3297: PPUSH
3298: LD_VAR 0 3
3302: PPUSH
3303: CALL_OW 52
// end ;
3307: GO 3148
3309: POP
3310: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3311: LD_INT 0
3313: PPUSH
3314: LD_INT 2
3316: PPUSH
3317: LD_EXP 16
3321: PPUSH
3322: LD_EXP 17
3326: PPUSH
3327: CALL_OW 12
3331: PUSH
3332: LD_INT 2
3334: PLUS
3335: PPUSH
3336: CALL_OW 380
// un = CreateHuman ;
3340: LD_ADDR_VAR 0 4
3344: PUSH
3345: CALL_OW 44
3349: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3350: LD_VAR 0 4
3354: PPUSH
3355: LD_INT 3
3357: PPUSH
3358: LD_INT 0
3360: PPUSH
3361: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3365: LD_INT 0
3367: PPUSH
3368: LD_INT 4
3370: PPUSH
3371: LD_EXP 16
3375: PPUSH
3376: LD_EXP 17
3380: PPUSH
3381: CALL_OW 12
3385: PUSH
3386: LD_INT 2
3388: PLUS
3389: PPUSH
3390: CALL_OW 380
// un = CreateHuman ;
3394: LD_ADDR_VAR 0 4
3398: PUSH
3399: CALL_OW 44
3403: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3404: LD_VAR 0 4
3408: PPUSH
3409: LD_INT 3
3411: PPUSH
3412: LD_INT 0
3414: PPUSH
3415: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3419: LD_ADDR_VAR 0 2
3423: PUSH
3424: DOUBLE
3425: LD_INT 1
3427: DEC
3428: ST_TO_ADDR
3429: LD_INT 2
3431: PUSH
3432: LD_INT 3
3434: PUSH
3435: LD_INT 3
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: LIST
3442: PUSH
3443: LD_OWVAR 67
3447: ARRAY
3448: PUSH
3449: LD_INT 1
3451: PPUSH
3452: LD_INT 3
3454: PPUSH
3455: CALL_OW 12
3459: PLUS
3460: PUSH
3461: FOR_TO
3462: IFFALSE 3532
// begin hc_gallery =  ;
3464: LD_ADDR_OWVAR 33
3468: PUSH
3469: LD_STRING 
3471: ST_TO_ADDR
// hc_name =  ;
3472: LD_ADDR_OWVAR 26
3476: PUSH
3477: LD_STRING 
3479: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3480: LD_INT 0
3482: PPUSH
3483: LD_INT 1
3485: PPUSH
3486: LD_EXP 16
3490: PPUSH
3491: LD_EXP 17
3495: PPUSH
3496: CALL_OW 12
3500: PPUSH
3501: CALL_OW 380
// un = CreateHuman ;
3505: LD_ADDR_VAR 0 4
3509: PUSH
3510: CALL_OW 44
3514: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3515: LD_VAR 0 4
3519: PPUSH
3520: LD_INT 3
3522: PPUSH
3523: LD_INT 0
3525: PPUSH
3526: CALL_OW 49
// end ;
3530: GO 3461
3532: POP
3533: POP
// vc_engine = 1 ;
3534: LD_ADDR_OWVAR 39
3538: PUSH
3539: LD_INT 1
3541: ST_TO_ADDR
// vc_control = 1 ;
3542: LD_ADDR_OWVAR 38
3546: PUSH
3547: LD_INT 1
3549: ST_TO_ADDR
// vc_weapon = 51 ;
3550: LD_ADDR_OWVAR 40
3554: PUSH
3555: LD_INT 51
3557: ST_TO_ADDR
// vc_chassis = 22 ;
3558: LD_ADDR_OWVAR 37
3562: PUSH
3563: LD_INT 22
3565: ST_TO_ADDR
// veh = CreateVehicle ;
3566: LD_ADDR_VAR 0 3
3570: PUSH
3571: CALL_OW 45
3575: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3576: LD_VAR 0 3
3580: PPUSH
3581: LD_INT 3
3583: PPUSH
3584: LD_INT 0
3586: PPUSH
3587: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3591: LD_VAR 0 3
3595: PPUSH
3596: LD_INT 1
3598: PPUSH
3599: LD_INT 100
3601: PPUSH
3602: CALL_OW 290
// hc_gallery =  ;
3606: LD_ADDR_OWVAR 33
3610: PUSH
3611: LD_STRING 
3613: ST_TO_ADDR
// hc_name =  ;
3614: LD_ADDR_OWVAR 26
3618: PUSH
3619: LD_STRING 
3621: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3622: LD_INT 0
3624: PPUSH
3625: LD_INT 3
3627: PPUSH
3628: LD_EXP 16
3632: PPUSH
3633: LD_EXP 17
3637: PPUSH
3638: CALL_OW 12
3642: PPUSH
3643: CALL_OW 380
// un = CreateHuman ;
3647: LD_ADDR_VAR 0 4
3651: PUSH
3652: CALL_OW 44
3656: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3657: LD_VAR 0 4
3661: PPUSH
3662: LD_VAR 0 3
3666: PPUSH
3667: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3671: LD_ADDR_VAR 0 2
3675: PUSH
3676: LD_INT 22
3678: PUSH
3679: LD_INT 6
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: LD_INT 3
3691: PUSH
3692: LD_INT 25
3694: PUSH
3695: LD_INT 2
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_INT 3
3708: PUSH
3709: LD_INT 25
3711: PUSH
3712: LD_INT 4
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: LIST
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: PPUSH
3732: CALL_OW 69
3736: PUSH
3737: FOR_IN
3738: IFFALSE 3757
// ComAgressiveMove ( i , 45 , 46 ) ;
3740: LD_VAR 0 2
3744: PPUSH
3745: LD_INT 45
3747: PPUSH
3748: LD_INT 46
3750: PPUSH
3751: CALL_OW 114
3755: GO 3737
3757: POP
3758: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3759: LD_ADDR_VAR 0 2
3763: PUSH
3764: LD_INT 22
3766: PUSH
3767: LD_INT 6
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PUSH
3774: LD_INT 25
3776: PUSH
3777: LD_INT 2
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PPUSH
3788: CALL_OW 69
3792: PUSH
3793: FOR_IN
3794: IFFALSE 3825
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3796: LD_ADDR_EXP 21
3800: PUSH
3801: LD_VAR 0 2
3805: PPUSH
3806: LD_INT 0
3808: PPUSH
3809: LD_INT 48
3811: PPUSH
3812: LD_INT 55
3814: PPUSH
3815: LD_INT 5
3817: PPUSH
3818: CALL_OW 145
3822: ST_TO_ADDR
3823: GO 3793
3825: POP
3826: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3827: LD_ADDR_VAR 0 2
3831: PUSH
3832: LD_INT 22
3834: PUSH
3835: LD_INT 6
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PUSH
3842: LD_INT 25
3844: PUSH
3845: LD_INT 4
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PPUSH
3856: CALL_OW 69
3860: PUSH
3861: FOR_IN
3862: IFFALSE 3881
// ComMoveXY ( i , 39 , 55 ) ;
3864: LD_VAR 0 2
3868: PPUSH
3869: LD_INT 39
3871: PPUSH
3872: LD_INT 55
3874: PPUSH
3875: CALL_OW 111
3879: GO 3861
3881: POP
3882: POP
// end ;
3883: LD_VAR 0 1
3887: RET
// export function PrepareFirstAttack ; var i , un ; begin
3888: LD_INT 0
3890: PPUSH
3891: PPUSH
3892: PPUSH
// uc_side = 5 ;
3893: LD_ADDR_OWVAR 20
3897: PUSH
3898: LD_INT 5
3900: ST_TO_ADDR
// uc_nation = 3 ;
3901: LD_ADDR_OWVAR 21
3905: PUSH
3906: LD_INT 3
3908: ST_TO_ADDR
// for i := 1 to 4 do
3909: LD_ADDR_VAR 0 2
3913: PUSH
3914: DOUBLE
3915: LD_INT 1
3917: DEC
3918: ST_TO_ADDR
3919: LD_INT 4
3921: PUSH
3922: FOR_TO
3923: IFFALSE 4022
// begin hc_gallery =  ;
3925: LD_ADDR_OWVAR 33
3929: PUSH
3930: LD_STRING 
3932: ST_TO_ADDR
// hc_name =  ;
3933: LD_ADDR_OWVAR 26
3937: PUSH
3938: LD_STRING 
3940: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3941: LD_INT 0
3943: PPUSH
3944: LD_INT 1
3946: PPUSH
3947: LD_EXP 16
3951: PPUSH
3952: LD_EXP 17
3956: PPUSH
3957: CALL_OW 12
3961: PPUSH
3962: CALL_OW 380
// un = CreateHuman ;
3966: LD_ADDR_VAR 0 3
3970: PUSH
3971: CALL_OW 44
3975: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3976: LD_VAR 0 3
3980: PPUSH
3981: LD_INT 4
3983: PPUSH
3984: LD_INT 0
3986: PPUSH
3987: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
3991: LD_VAR 0 3
3995: PPUSH
3996: LD_EXP 1
4000: PPUSH
4001: CALL_OW 250
4005: PPUSH
4006: LD_EXP 1
4010: PPUSH
4011: CALL_OW 251
4015: PPUSH
4016: CALL_OW 114
// end ;
4020: GO 3922
4022: POP
4023: POP
// firstRussianAttack = 1 ;
4024: LD_ADDR_EXP 23
4028: PUSH
4029: LD_INT 1
4031: ST_TO_ADDR
// end ; end_of_file
4032: LD_VAR 0 1
4036: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4037: LD_INT 0
4039: PPUSH
4040: PPUSH
// if exist_mode then
4041: LD_VAR 0 2
4045: IFFALSE 4070
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
4047: LD_ADDR_VAR 0 4
4051: PUSH
4052: LD_EXP 46
4056: PUSH
4057: LD_VAR 0 1
4061: STR
4062: PPUSH
4063: CALL_OW 34
4067: ST_TO_ADDR
// end else
4068: GO 4085
// begin unit := NewCharacter ( ident ) ;
4070: LD_ADDR_VAR 0 4
4074: PUSH
4075: LD_VAR 0 1
4079: PPUSH
4080: CALL_OW 25
4084: ST_TO_ADDR
// end ; result := unit ;
4085: LD_ADDR_VAR 0 3
4089: PUSH
4090: LD_VAR 0 4
4094: ST_TO_ADDR
// end ;
4095: LD_VAR 0 3
4099: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4100: LD_INT 0
4102: PPUSH
4103: PPUSH
4104: PPUSH
4105: PPUSH
// for i = 1 to count do
4106: LD_ADDR_VAR 0 8
4110: PUSH
4111: DOUBLE
4112: LD_INT 1
4114: DEC
4115: ST_TO_ADDR
4116: LD_VAR 0 6
4120: PUSH
4121: FOR_TO
4122: IFFALSE 4203
// begin uc_side = side ;
4124: LD_ADDR_OWVAR 20
4128: PUSH
4129: LD_VAR 0 1
4133: ST_TO_ADDR
// uc_nation = nation ;
4134: LD_ADDR_OWVAR 21
4138: PUSH
4139: LD_VAR 0 2
4143: ST_TO_ADDR
// hc_gallery =  ;
4144: LD_ADDR_OWVAR 33
4148: PUSH
4149: LD_STRING 
4151: ST_TO_ADDR
// hc_name =  ;
4152: LD_ADDR_OWVAR 26
4156: PUSH
4157: LD_STRING 
4159: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4160: LD_INT 0
4162: PPUSH
4163: LD_VAR 0 5
4167: PPUSH
4168: LD_VAR 0 4
4172: PPUSH
4173: CALL_OW 380
// un = CreateHuman ;
4177: LD_ADDR_VAR 0 10
4181: PUSH
4182: CALL_OW 44
4186: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4187: LD_VAR 0 10
4191: PPUSH
4192: LD_VAR 0 3
4196: PPUSH
4197: CALL_OW 52
// end ;
4201: GO 4121
4203: POP
4204: POP
// end ;
4205: LD_VAR 0 7
4209: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4210: LD_INT 0
4212: PPUSH
4213: PPUSH
4214: PPUSH
// uc_side := GetSide ( b ) ;
4215: LD_ADDR_OWVAR 20
4219: PUSH
4220: LD_VAR 0 2
4224: PPUSH
4225: CALL_OW 255
4229: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4230: LD_ADDR_OWVAR 21
4234: PUSH
4235: LD_VAR 0 2
4239: PPUSH
4240: CALL_OW 248
4244: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4245: LD_INT 0
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: LD_VAR 0 1
4255: PPUSH
4256: CALL_OW 380
// un = CreateHuman ;
4260: LD_ADDR_VAR 0 4
4264: PUSH
4265: CALL_OW 44
4269: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4270: LD_ADDR_VAR 0 5
4274: PUSH
4275: LD_VAR 0 2
4279: PPUSH
4280: CALL_OW 254
4284: PUSH
4285: LD_INT 3
4287: MINUS
4288: ST_TO_ADDR
// if dir < 0 then
4289: LD_VAR 0 5
4293: PUSH
4294: LD_INT 0
4296: LESS
4297: IFFALSE 4313
// dir := 6 + dir ;
4299: LD_ADDR_VAR 0 5
4303: PUSH
4304: LD_INT 6
4306: PUSH
4307: LD_VAR 0 5
4311: PLUS
4312: ST_TO_ADDR
// SetDir ( un , dir ) ;
4313: LD_VAR 0 4
4317: PPUSH
4318: LD_VAR 0 5
4322: PPUSH
4323: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4327: LD_VAR 0 4
4331: PPUSH
4332: LD_VAR 0 2
4336: PPUSH
4337: CALL_OW 52
// end ;
4341: LD_VAR 0 3
4345: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
4346: LD_INT 0
4348: PPUSH
4349: PPUSH
4350: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
4351: LD_ADDR_VAR 0 6
4355: PUSH
4356: LD_VAR 0 1
4360: PUSH
4361: LD_INT 1
4363: PPUSH
4364: LD_VAR 0 1
4368: PPUSH
4369: CALL_OW 12
4373: ARRAY
4374: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
4375: LD_VAR 0 6
4379: PPUSH
4380: CALL_OW 258
4384: PUSH
4385: LD_INT 1
4387: EQUAL
4388: IFFALSE 4406
// Say ( speaker , dialogMID ) else
4390: LD_VAR 0 6
4394: PPUSH
4395: LD_VAR 0 2
4399: PPUSH
4400: CALL_OW 88
4404: GO 4420
// Say ( speaker , dialogFID ) ;
4406: LD_VAR 0 6
4410: PPUSH
4411: LD_VAR 0 3
4415: PPUSH
4416: CALL_OW 88
// result := speaker ;
4420: LD_ADDR_VAR 0 4
4424: PUSH
4425: LD_VAR 0 6
4429: ST_TO_ADDR
// end ;
4430: LD_VAR 0 4
4434: RET
// export function PrepareDifficulty ; var tmp ; begin
4435: LD_INT 0
4437: PPUSH
4438: PPUSH
// if Difficulty = 1 then
4439: LD_OWVAR 67
4443: PUSH
4444: LD_INT 1
4446: EQUAL
4447: IFFALSE 4465
// begin RuSoldMinLevel = 0 ;
4449: LD_ADDR_EXP 16
4453: PUSH
4454: LD_INT 0
4456: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4457: LD_ADDR_EXP 17
4461: PUSH
4462: LD_INT 2
4464: ST_TO_ADDR
// end ; if Difficulty = 2 then
4465: LD_OWVAR 67
4469: PUSH
4470: LD_INT 2
4472: EQUAL
4473: IFFALSE 4581
// begin RuSoldMinLevel = 1 ;
4475: LD_ADDR_EXP 16
4479: PUSH
4480: LD_INT 1
4482: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4483: LD_ADDR_EXP 17
4487: PUSH
4488: LD_INT 2
4490: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4491: LD_INT 14
4493: PPUSH
4494: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4498: LD_INT 23
4500: PPUSH
4501: CALL_OW 64
// uc_nation = 3 ;
4505: LD_ADDR_OWVAR 21
4509: PUSH
4510: LD_INT 3
4512: ST_TO_ADDR
// uc_side = 3 ;
4513: LD_ADDR_OWVAR 20
4517: PUSH
4518: LD_INT 3
4520: ST_TO_ADDR
// bc_level = 5 ;
4521: LD_ADDR_OWVAR 43
4525: PUSH
4526: LD_INT 5
4528: ST_TO_ADDR
// bc_type = 32 ;
4529: LD_ADDR_OWVAR 42
4533: PUSH
4534: LD_INT 32
4536: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4537: LD_ADDR_VAR 0 2
4541: PUSH
4542: LD_INT 76
4544: PPUSH
4545: LD_INT 91
4547: PPUSH
4548: LD_INT 2
4550: PPUSH
4551: CALL_OW 47
4555: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4556: LD_VAR 0 2
4560: PPUSH
4561: LD_INT 43
4563: PPUSH
4564: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4568: LD_INT 51
4570: PPUSH
4571: LD_INT 3
4573: PPUSH
4574: LD_INT 1
4576: PPUSH
4577: CALL_OW 322
// end ; if Difficulty = 3 then
4581: LD_OWVAR 67
4585: PUSH
4586: LD_INT 3
4588: EQUAL
4589: IFFALSE 4765
// begin RuSoldMinLevel = 1 ;
4591: LD_ADDR_EXP 16
4595: PUSH
4596: LD_INT 1
4598: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4599: LD_ADDR_EXP 17
4603: PUSH
4604: LD_INT 3
4606: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4607: LD_INT 13
4609: PPUSH
4610: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4614: LD_INT 14
4616: PPUSH
4617: CALL_OW 64
// RemoveUnit ( rubbrwr0 ) ;
4621: LD_INT 26
4623: PPUSH
4624: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4628: LD_INT 23
4630: PPUSH
4631: CALL_OW 64
// uc_nation = 3 ;
4635: LD_ADDR_OWVAR 21
4639: PUSH
4640: LD_INT 3
4642: ST_TO_ADDR
// uc_side = 3 ;
4643: LD_ADDR_OWVAR 20
4647: PUSH
4648: LD_INT 3
4650: ST_TO_ADDR
// bc_level = 5 ;
4651: LD_ADDR_OWVAR 43
4655: PUSH
4656: LD_INT 5
4658: ST_TO_ADDR
// bc_type = 32 ;
4659: LD_ADDR_OWVAR 42
4663: PUSH
4664: LD_INT 32
4666: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4667: LD_ADDR_VAR 0 2
4671: PUSH
4672: LD_INT 76
4674: PPUSH
4675: LD_INT 91
4677: PPUSH
4678: LD_INT 2
4680: PPUSH
4681: CALL_OW 47
4685: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4686: LD_VAR 0 2
4690: PPUSH
4691: LD_INT 44
4693: PPUSH
4694: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4698: LD_ADDR_VAR 0 2
4702: PUSH
4703: LD_INT 83
4705: PPUSH
4706: LD_INT 84
4708: PPUSH
4709: LD_INT 2
4711: PPUSH
4712: CALL_OW 47
4716: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4717: LD_VAR 0 2
4721: PPUSH
4722: LD_INT 43
4724: PPUSH
4725: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4729: LD_INT 51
4731: PPUSH
4732: LD_INT 3
4734: PPUSH
4735: LD_INT 1
4737: PPUSH
4738: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4742: LD_INT 52
4744: PPUSH
4745: LD_INT 3
4747: PPUSH
4748: LD_INT 1
4750: PPUSH
4751: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4755: LD_INT 25
4757: PPUSH
4758: LD_INT 44
4760: PPUSH
4761: CALL_OW 431
// end ; end ;
4765: LD_VAR 0 1
4769: RET
// export function EnergyDialog ; begin
4770: LD_INT 0
4772: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4773: LD_INT 46
4775: PPUSH
4776: LD_INT 1
4778: PPUSH
4779: CALL_OW 321
4783: PUSH
4784: LD_INT 1
4786: EQUAL
4787: PUSH
4788: LD_INT 35
4790: PPUSH
4791: LD_INT 1
4793: PPUSH
4794: CALL_OW 321
4798: PUSH
4799: LD_INT 1
4801: EQUAL
4802: AND
4803: IFFALSE 4827
// begin Say ( JMM , D9c-JMM-1 ) ;
4805: LD_EXP 1
4809: PPUSH
4810: LD_STRING D9c-JMM-1
4812: PPUSH
4813: CALL_OW 88
// energyVDialog = 1 ;
4817: LD_ADDR_EXP 33
4821: PUSH
4822: LD_INT 1
4824: ST_TO_ADDR
// end else
4825: GO 4981
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4827: LD_INT 35
4829: PPUSH
4830: LD_INT 1
4832: PPUSH
4833: CALL_OW 321
4837: PUSH
4838: LD_INT 2
4840: EQUAL
4841: PUSH
4842: LD_EXP 33
4846: PUSH
4847: LD_INT 0
4849: EQUAL
4850: AND
4851: IFFALSE 4873
// begin Say ( JMM , D9c-JMM-1a ) ;
4853: LD_EXP 1
4857: PPUSH
4858: LD_STRING D9c-JMM-1a
4860: PPUSH
4861: CALL_OW 88
// energyVDialog = 1 ;
4865: LD_ADDR_EXP 33
4869: PUSH
4870: LD_INT 1
4872: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4873: LD_INT 46
4875: PPUSH
4876: LD_INT 1
4878: PPUSH
4879: CALL_OW 321
4883: PUSH
4884: LD_INT 2
4886: EQUAL
4887: PUSH
4888: LD_EXP 33
4892: PUSH
4893: LD_INT 0
4895: EQUAL
4896: AND
4897: IFFALSE 4919
// begin Say ( JMM , D9c-JMM-1b ) ;
4899: LD_EXP 1
4903: PPUSH
4904: LD_STRING D9c-JMM-1b
4906: PPUSH
4907: CALL_OW 88
// energyVDialog = 1 ;
4911: LD_ADDR_EXP 33
4915: PUSH
4916: LD_INT 1
4918: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4919: LD_INT 46
4921: PPUSH
4922: LD_INT 1
4924: PPUSH
4925: CALL_OW 321
4929: PUSH
4930: LD_INT 2
4932: EQUAL
4933: PUSH
4934: LD_INT 21
4936: PPUSH
4937: LD_INT 1
4939: PPUSH
4940: CALL_OW 321
4944: PUSH
4945: LD_INT 2
4947: EQUAL
4948: AND
4949: PUSH
4950: LD_EXP 33
4954: PUSH
4955: LD_INT 0
4957: EQUAL
4958: AND
4959: IFFALSE 4981
// begin Say ( JMM , D9c-JMM-1c ) ;
4961: LD_EXP 1
4965: PPUSH
4966: LD_STRING D9c-JMM-1c
4968: PPUSH
4969: CALL_OW 88
// energyVDialog = 1 ;
4973: LD_ADDR_EXP 33
4977: PUSH
4978: LD_INT 1
4980: ST_TO_ADDR
// end ; end ; end ;
4981: LD_VAR 0 1
4985: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4986: LD_INT 0
4988: PPUSH
4989: PPUSH
4990: PPUSH
4991: PPUSH
4992: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4993: LD_VAR 0 1
4997: NOT
4998: PUSH
4999: LD_VAR 0 1
5003: PPUSH
5004: CALL_OW 256
5008: PUSH
5009: LD_INT 250
5011: LESS
5012: OR
5013: PUSH
5014: LD_VAR 0 1
5018: PPUSH
5019: CALL_OW 314
5023: PUSH
5024: LD_VAR 0 1
5028: PPUSH
5029: CALL_OW 261
5033: PUSH
5034: LD_INT 20
5036: GREATER
5037: AND
5038: OR
5039: IFFALSE 5043
// exit ;
5041: GO 5408
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
5043: LD_VAR 0 1
5047: PPUSH
5048: CALL_OW 261
5052: PUSH
5053: LD_INT 20
5055: LESS
5056: PUSH
5057: LD_VAR 0 1
5061: PPUSH
5062: CALL_OW 110
5066: PUSH
5067: LD_INT 21
5069: EQUAL
5070: NOT
5071: AND
5072: IFFALSE 5099
// begin ComStop ( bulldozer ) ;
5074: LD_VAR 0 1
5078: PPUSH
5079: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
5083: LD_VAR 0 1
5087: PPUSH
5088: LD_INT 21
5090: PPUSH
5091: CALL_OW 109
// exit ;
5095: GO 5408
// end else
5097: GO 5126
// if GetFuel ( bulldozer ) > 20 then
5099: LD_VAR 0 1
5103: PPUSH
5104: CALL_OW 261
5108: PUSH
5109: LD_INT 20
5111: GREATER
5112: IFFALSE 5126
// SetTag ( bulldozer , 0 ) ;
5114: LD_VAR 0 1
5118: PPUSH
5119: LD_INT 0
5121: PPUSH
5122: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
5126: LD_ADDR_VAR 0 5
5130: PUSH
5131: LD_VAR 0 2
5135: PPUSH
5136: CALL_OW 353
5140: ST_TO_ADDR
// tmp := [ ] ;
5141: LD_ADDR_VAR 0 6
5145: PUSH
5146: EMPTY
5147: ST_TO_ADDR
// for i = 1 to list do
5148: LD_ADDR_VAR 0 4
5152: PUSH
5153: DOUBLE
5154: LD_INT 1
5156: DEC
5157: ST_TO_ADDR
5158: LD_VAR 0 5
5162: PUSH
5163: FOR_TO
5164: IFFALSE 5262
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5166: LD_VAR 0 5
5170: PUSH
5171: LD_VAR 0 4
5175: ARRAY
5176: PUSH
5177: LD_INT 1
5179: ARRAY
5180: PPUSH
5181: LD_VAR 0 5
5185: PUSH
5186: LD_VAR 0 4
5190: ARRAY
5191: PUSH
5192: LD_INT 2
5194: ARRAY
5195: PPUSH
5196: CALL_OW 554
5200: IFFALSE 5260
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5202: LD_ADDR_VAR 0 6
5206: PUSH
5207: LD_VAR 0 6
5211: PPUSH
5212: LD_VAR 0 6
5216: PUSH
5217: LD_INT 1
5219: PLUS
5220: PPUSH
5221: LD_VAR 0 5
5225: PUSH
5226: LD_VAR 0 4
5230: ARRAY
5231: PUSH
5232: LD_INT 1
5234: ARRAY
5235: PUSH
5236: LD_VAR 0 5
5240: PUSH
5241: LD_VAR 0 4
5245: ARRAY
5246: PUSH
5247: LD_INT 2
5249: ARRAY
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PPUSH
5255: CALL_OW 1
5259: ST_TO_ADDR
// end ;
5260: GO 5163
5262: POP
5263: POP
// ComStop ( bulldozer ) ;
5264: LD_VAR 0 1
5268: PPUSH
5269: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5273: LD_ADDR_VAR 0 7
5277: PUSH
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 250
5287: PUSH
5288: LD_VAR 0 1
5292: PPUSH
5293: CALL_OW 251
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: ST_TO_ADDR
// for i = tmp downto 1 do
5302: LD_ADDR_VAR 0 4
5306: PUSH
5307: DOUBLE
5308: LD_VAR 0 6
5312: INC
5313: ST_TO_ADDR
5314: LD_INT 1
5316: PUSH
5317: FOR_DOWNTO
5318: IFFALSE 5406
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5320: LD_ADDR_VAR 0 7
5324: PUSH
5325: LD_VAR 0 7
5329: PUSH
5330: LD_INT 1
5332: ARRAY
5333: PPUSH
5334: LD_VAR 0 7
5338: PUSH
5339: LD_INT 2
5341: ARRAY
5342: PPUSH
5343: LD_VAR 0 6
5347: PPUSH
5348: CALL 5509 0 3
5352: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5353: LD_VAR 0 1
5357: PPUSH
5358: LD_VAR 0 7
5362: PUSH
5363: LD_INT 1
5365: ARRAY
5366: PPUSH
5367: LD_VAR 0 7
5371: PUSH
5372: LD_INT 2
5374: ARRAY
5375: PPUSH
5376: CALL 5413 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5380: LD_ADDR_VAR 0 6
5384: PUSH
5385: LD_VAR 0 6
5389: PPUSH
5390: LD_VAR 0 7
5394: PUSH
5395: LD_INT 3
5397: ARRAY
5398: PPUSH
5399: CALL_OW 3
5403: ST_TO_ADDR
// end ;
5404: GO 5317
5406: POP
5407: POP
// end ;
5408: LD_VAR 0 3
5412: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5413: LD_INT 0
5415: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5416: LD_VAR 0 2
5420: PPUSH
5421: LD_VAR 0 3
5425: PPUSH
5426: CALL_OW 351
5430: PUSH
5431: LD_VAR 0 2
5435: PPUSH
5436: LD_VAR 0 3
5440: PPUSH
5441: CALL_OW 554
5445: AND
5446: PUSH
5447: LD_VAR 0 2
5451: PPUSH
5452: LD_VAR 0 3
5456: PPUSH
5457: CALL_OW 488
5461: AND
5462: PUSH
5463: LD_VAR 0 2
5467: PPUSH
5468: LD_VAR 0 3
5472: PPUSH
5473: CALL_OW 428
5477: PUSH
5478: LD_INT 1
5480: NEG
5481: EQUAL
5482: AND
5483: IFFALSE 5504
// AddComMoveXY ( bulldozer , x , y ) ;
5485: LD_VAR 0 1
5489: PPUSH
5490: LD_VAR 0 2
5494: PPUSH
5495: LD_VAR 0 3
5499: PPUSH
5500: CALL_OW 171
// end ;
5504: LD_VAR 0 4
5508: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5509: LD_INT 0
5511: PPUSH
5512: PPUSH
5513: PPUSH
5514: PPUSH
5515: PPUSH
5516: PPUSH
5517: PPUSH
// dist := 99999 ;
5518: LD_ADDR_VAR 0 6
5522: PUSH
5523: LD_INT 99999
5525: ST_TO_ADDR
// for i = 1 to list do
5526: LD_ADDR_VAR 0 5
5530: PUSH
5531: DOUBLE
5532: LD_INT 1
5534: DEC
5535: ST_TO_ADDR
5536: LD_VAR 0 3
5540: PUSH
5541: FOR_TO
5542: IFFALSE 5680
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5544: LD_ADDR_VAR 0 7
5548: PUSH
5549: LD_VAR 0 1
5553: PPUSH
5554: LD_VAR 0 2
5558: PPUSH
5559: LD_VAR 0 3
5563: PUSH
5564: LD_VAR 0 5
5568: ARRAY
5569: PUSH
5570: LD_INT 1
5572: ARRAY
5573: PPUSH
5574: LD_VAR 0 3
5578: PUSH
5579: LD_VAR 0 5
5583: ARRAY
5584: PUSH
5585: LD_INT 2
5587: ARRAY
5588: PPUSH
5589: CALL_OW 298
5593: ST_TO_ADDR
// if d = 0 then
5594: LD_VAR 0 7
5598: PUSH
5599: LD_INT 0
5601: EQUAL
5602: IFFALSE 5606
// continue ;
5604: GO 5541
// if d < dist then
5606: LD_VAR 0 7
5610: PUSH
5611: LD_VAR 0 6
5615: LESS
5616: IFFALSE 5678
// begin _x := list [ i ] [ 1 ] ;
5618: LD_ADDR_VAR 0 8
5622: PUSH
5623: LD_VAR 0 3
5627: PUSH
5628: LD_VAR 0 5
5632: ARRAY
5633: PUSH
5634: LD_INT 1
5636: ARRAY
5637: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5638: LD_ADDR_VAR 0 9
5642: PUSH
5643: LD_VAR 0 3
5647: PUSH
5648: LD_VAR 0 5
5652: ARRAY
5653: PUSH
5654: LD_INT 2
5656: ARRAY
5657: ST_TO_ADDR
// _i := i ;
5658: LD_ADDR_VAR 0 10
5662: PUSH
5663: LD_VAR 0 5
5667: ST_TO_ADDR
// dist := d ;
5668: LD_ADDR_VAR 0 6
5672: PUSH
5673: LD_VAR 0 7
5677: ST_TO_ADDR
// end ; end ;
5678: GO 5541
5680: POP
5681: POP
// result := [ _x , _y , _i , dist ] ;
5682: LD_ADDR_VAR 0 4
5686: PUSH
5687: LD_VAR 0 8
5691: PUSH
5692: LD_VAR 0 9
5696: PUSH
5697: LD_VAR 0 10
5701: PUSH
5702: LD_VAR 0 6
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: ST_TO_ADDR
// end ;
5713: LD_VAR 0 4
5717: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5718: LD_INT 0
5720: PPUSH
5721: PPUSH
5722: PPUSH
5723: PPUSH
// for i = 1 to 72 do
5724: LD_ADDR_VAR 0 5
5728: PUSH
5729: DOUBLE
5730: LD_INT 1
5732: DEC
5733: ST_TO_ADDR
5734: LD_INT 72
5736: PUSH
5737: FOR_TO
5738: IFFALSE 5796
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5740: LD_VAR 0 5
5744: PPUSH
5745: LD_VAR 0 1
5749: PPUSH
5750: CALL_OW 321
5754: PUSH
5755: LD_INT 1
5757: EQUAL
5758: PUSH
5759: LD_VAR 0 5
5763: PPUSH
5764: LD_VAR 0 3
5768: PPUSH
5769: CALL_OW 482
5773: PUSH
5774: LD_INT 1
5776: EQUAL
5777: AND
5778: IFFALSE 5794
// AddComResearch ( lab , i ) ;
5780: LD_VAR 0 2
5784: PPUSH
5785: LD_VAR 0 5
5789: PPUSH
5790: CALL_OW 184
5794: GO 5737
5796: POP
5797: POP
// end ;
5798: LD_VAR 0 4
5802: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5803: LD_INT 0
5805: PPUSH
5806: PPUSH
5807: PPUSH
5808: PPUSH
5809: PPUSH
5810: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
5811: LD_ADDR_VAR 0 7
5815: PUSH
5816: LD_VAR 0 2
5820: PPUSH
5821: CALL_OW 313
5825: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
5826: LD_ADDR_VAR 0 8
5830: PUSH
5831: LD_VAR 0 3
5835: PPUSH
5836: LD_INT 22
5838: PUSH
5839: LD_VAR 0 1
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: PUSH
5848: LD_INT 25
5850: PUSH
5851: LD_INT 2
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 24
5860: PUSH
5861: LD_INT 750
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: PUSH
5868: LD_INT 3
5870: PUSH
5871: LD_INT 54
5873: PUSH
5874: EMPTY
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: PPUSH
5887: CALL_OW 70
5891: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5892: LD_ADDR_VAR 0 5
5896: PUSH
5897: LD_VAR 0 3
5901: PPUSH
5902: LD_INT 22
5904: PUSH
5905: LD_VAR 0 1
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: LD_INT 21
5916: PUSH
5917: LD_INT 3
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: LD_INT 3
5926: PUSH
5927: LD_INT 24
5929: PUSH
5930: LD_INT 1000
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: LIST
5945: PUSH
5946: EMPTY
5947: LIST
5948: PPUSH
5949: CALL_OW 70
5953: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
5954: LD_VAR 0 5
5958: NOT
5959: PUSH
5960: LD_INT 22
5962: PUSH
5963: LD_VAR 0 1
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PUSH
5972: LD_INT 25
5974: PUSH
5975: LD_INT 2
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: PUSH
5982: LD_INT 24
5984: PUSH
5985: LD_INT 250
5987: PUSH
5988: EMPTY
5989: LIST
5990: LIST
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: LIST
5996: PPUSH
5997: CALL_OW 69
6001: NOT
6002: AND
6003: IFFALSE 6007
// exit ;
6005: GO 6119
// if buildings_list > 0 and engineerOkInside then
6007: LD_VAR 0 5
6011: PUSH
6012: LD_INT 0
6014: GREATER
6015: PUSH
6016: LD_VAR 0 7
6020: AND
6021: IFFALSE 6047
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
6023: LD_VAR 0 7
6027: PPUSH
6028: LD_INT 25
6030: PUSH
6031: LD_INT 2
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: PPUSH
6038: CALL_OW 72
6042: PPUSH
6043: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
6047: LD_VAR 0 5
6051: PUSH
6052: LD_INT 0
6054: GREATER
6055: PUSH
6056: LD_VAR 0 8
6060: PUSH
6061: LD_INT 0
6063: GREATER
6064: AND
6065: IFFALSE 6085
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
6067: LD_VAR 0 8
6071: PPUSH
6072: LD_VAR 0 5
6076: PUSH
6077: LD_INT 1
6079: ARRAY
6080: PPUSH
6081: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
6085: LD_VAR 0 5
6089: PUSH
6090: LD_INT 0
6092: EQUAL
6093: PUSH
6094: LD_VAR 0 8
6098: PUSH
6099: LD_INT 0
6101: GREATER
6102: AND
6103: IFFALSE 6119
// ComEnterUnit ( engineerOkOutside , building ) ;
6105: LD_VAR 0 8
6109: PPUSH
6110: LD_VAR 0 2
6114: PPUSH
6115: CALL_OW 120
// end ;
6119: LD_VAR 0 4
6123: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
6124: LD_INT 0
6126: PPUSH
6127: PPUSH
6128: PPUSH
6129: PPUSH
6130: PPUSH
6131: PPUSH
6132: PPUSH
6133: PPUSH
6134: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6135: LD_ADDR_VAR 0 6
6139: PUSH
6140: LD_INT 22
6142: PUSH
6143: LD_VAR 0 1
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PUSH
6152: LD_INT 25
6154: PUSH
6155: LD_INT 4
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PUSH
6162: LD_INT 23
6164: PUSH
6165: LD_INT 2
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PUSH
6172: LD_INT 24
6174: PUSH
6175: LD_INT 251
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: PPUSH
6188: CALL_OW 69
6192: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6193: LD_ADDR_VAR 0 7
6197: PUSH
6198: LD_VAR 0 3
6202: PPUSH
6203: LD_INT 22
6205: PUSH
6206: LD_VAR 0 1
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 23
6217: PUSH
6218: LD_INT 2
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PUSH
6225: LD_INT 25
6227: PUSH
6228: LD_INT 4
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 50
6237: PUSH
6238: EMPTY
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: PPUSH
6247: CALL_OW 70
6251: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6252: LD_ADDR_VAR 0 10
6256: PUSH
6257: LD_VAR 0 3
6261: PPUSH
6262: LD_INT 22
6264: PUSH
6265: LD_VAR 0 1
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PUSH
6274: LD_INT 21
6276: PUSH
6277: LD_INT 1
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: PUSH
6284: LD_INT 3
6286: PUSH
6287: LD_INT 25
6289: PUSH
6290: LD_INT 3
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 3
6303: PUSH
6304: LD_INT 24
6306: PUSH
6307: LD_INT 750
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: PPUSH
6324: CALL_OW 70
6328: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6329: LD_ADDR_VAR 0 11
6333: PUSH
6334: LD_VAR 0 2
6338: PPUSH
6339: LD_INT 22
6341: PUSH
6342: LD_VAR 0 1
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PUSH
6351: LD_INT 21
6353: PUSH
6354: LD_INT 1
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: LD_INT 3
6363: PUSH
6364: LD_INT 25
6366: PUSH
6367: LD_INT 3
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 3
6380: PUSH
6381: LD_INT 24
6383: PUSH
6384: LD_INT 1000
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: PPUSH
6401: CALL_OW 70
6405: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6406: LD_VAR 0 10
6410: NOT
6411: PUSH
6412: LD_VAR 0 11
6416: NOT
6417: AND
6418: PUSH
6419: LD_VAR 0 6
6423: NOT
6424: AND
6425: IFFALSE 6429
// exit ;
6427: GO 6663
// if damageUnits > 0 and sci_list > 0 then
6429: LD_VAR 0 10
6433: PUSH
6434: LD_INT 0
6436: GREATER
6437: PUSH
6438: LD_VAR 0 6
6442: PUSH
6443: LD_INT 0
6445: GREATER
6446: AND
6447: IFFALSE 6463
// ComMoveToArea ( damageUnits , healArea ) ;
6449: LD_VAR 0 10
6453: PPUSH
6454: LD_VAR 0 2
6458: PPUSH
6459: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6463: LD_VAR 0 11
6467: PUSH
6468: LD_INT 0
6470: GREATER
6471: PUSH
6472: LD_VAR 0 6
6476: PUSH
6477: LD_INT 0
6479: GREATER
6480: AND
6481: IFFALSE 6492
// ComExitBuilding ( sci_list ) ;
6483: LD_VAR 0 6
6487: PPUSH
6488: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6492: LD_VAR 0 11
6496: PUSH
6497: LD_INT 0
6499: GREATER
6500: PUSH
6501: LD_VAR 0 7
6505: PUSH
6506: LD_INT 0
6508: GREATER
6509: AND
6510: IFFALSE 6530
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6512: LD_VAR 0 7
6516: PPUSH
6517: LD_VAR 0 11
6521: PUSH
6522: LD_INT 1
6524: ARRAY
6525: PPUSH
6526: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6530: LD_VAR 0 10
6534: PUSH
6535: LD_INT 0
6537: EQUAL
6538: PUSH
6539: LD_VAR 0 11
6543: PUSH
6544: LD_INT 0
6546: EQUAL
6547: AND
6548: PUSH
6549: LD_VAR 0 7
6553: PUSH
6554: LD_INT 0
6556: GREATER
6557: AND
6558: IFFALSE 6663
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6560: LD_ADDR_VAR 0 12
6564: PUSH
6565: LD_INT 22
6567: PUSH
6568: LD_VAR 0 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: LD_INT 21
6579: PUSH
6580: LD_INT 3
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 30
6589: PUSH
6590: LD_INT 8
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: PPUSH
6602: CALL_OW 69
6606: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6607: LD_ADDR_VAR 0 13
6611: PUSH
6612: LD_INT 1
6614: PPUSH
6615: LD_VAR 0 12
6619: PPUSH
6620: CALL_OW 12
6624: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6625: LD_VAR 0 7
6629: PPUSH
6630: LD_INT 3
6632: PUSH
6633: LD_INT 60
6635: PUSH
6636: EMPTY
6637: LIST
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PPUSH
6643: CALL_OW 72
6647: PPUSH
6648: LD_VAR 0 12
6652: PUSH
6653: LD_VAR 0 13
6657: ARRAY
6658: PPUSH
6659: CALL_OW 120
// end ; end ;
6663: LD_VAR 0 5
6667: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6668: LD_INT 0
6670: PPUSH
6671: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6672: LD_INT 22
6674: PUSH
6675: LD_VAR 0 1
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PUSH
6684: LD_INT 21
6686: PUSH
6687: LD_INT 2
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PPUSH
6698: CALL_OW 69
6702: PUSH
6703: LD_VAR 0 3
6707: LESSEQUAL
6708: IFFALSE 6775
// for i = 1 to vehCount do
6710: LD_ADDR_VAR 0 9
6714: PUSH
6715: DOUBLE
6716: LD_INT 1
6718: DEC
6719: ST_TO_ADDR
6720: LD_VAR 0 3
6724: PUSH
6725: FOR_TO
6726: IFFALSE 6773
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6728: LD_VAR 0 2
6732: PPUSH
6733: LD_VAR 0 7
6737: PPUSH
6738: LD_VAR 0 5
6742: PPUSH
6743: LD_VAR 0 6
6747: PPUSH
6748: LD_VAR 0 4
6752: PUSH
6753: LD_INT 1
6755: PPUSH
6756: LD_VAR 0 4
6760: PPUSH
6761: CALL_OW 12
6765: ARRAY
6766: PPUSH
6767: CALL_OW 185
6771: GO 6725
6773: POP
6774: POP
// end ;
6775: LD_VAR 0 8
6779: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6780: LD_INT 0
6782: PPUSH
6783: PPUSH
6784: PPUSH
6785: PPUSH
6786: PPUSH
6787: PPUSH
6788: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
6789: LD_ADDR_VAR 0 8
6793: PUSH
6794: LD_INT 22
6796: PUSH
6797: LD_VAR 0 1
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 21
6808: PUSH
6809: LD_INT 2
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: LD_INT 34
6821: PUSH
6822: LD_INT 51
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: LD_INT 34
6831: PUSH
6832: LD_INT 53
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 34
6841: PUSH
6842: LD_INT 52
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: PUSH
6855: LD_INT 24
6857: PUSH
6858: LD_INT 650
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: PPUSH
6871: CALL_OW 69
6875: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
6876: LD_INT 22
6878: PUSH
6879: LD_VAR 0 1
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 21
6890: PUSH
6891: LD_INT 2
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 24
6900: PUSH
6901: LD_INT 1000
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: LIST
6912: PPUSH
6913: CALL_OW 69
6917: PUSH
6918: LD_INT 3
6920: PUSH
6921: LD_INT 4
6923: PUSH
6924: LD_INT 5
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: LIST
6931: PUSH
6932: LD_OWVAR 67
6936: ARRAY
6937: GREATEREQUAL
6938: IFFALSE 7435
// repeat wait ( 0 0$1 ) ;
6940: LD_INT 35
6942: PPUSH
6943: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_lives , 650 ] ] ) ;
6947: LD_ADDR_VAR 0 8
6951: PUSH
6952: LD_INT 22
6954: PUSH
6955: LD_VAR 0 1
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PUSH
6964: LD_INT 21
6966: PUSH
6967: LD_INT 2
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 3
6976: PUSH
6977: LD_INT 34
6979: PUSH
6980: LD_INT 51
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 34
6989: PUSH
6990: LD_INT 53
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: LD_INT 34
6999: PUSH
7000: LD_INT 52
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: PUSH
7013: LD_INT 24
7015: PUSH
7016: LD_INT 650
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: PPUSH
7029: CALL_OW 69
7033: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7034: LD_INT 22
7036: PUSH
7037: LD_VAR 0 1
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 95
7048: PUSH
7049: LD_VAR 0 2
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PPUSH
7062: CALL_OW 69
7066: NOT
7067: PUSH
7068: LD_VAR 0 11
7072: PUSH
7073: LD_INT 0
7075: EQUAL
7076: AND
7077: IFFALSE 7132
// for i := 1 to wayX do
7079: LD_ADDR_VAR 0 6
7083: PUSH
7084: DOUBLE
7085: LD_INT 1
7087: DEC
7088: ST_TO_ADDR
7089: LD_VAR 0 3
7093: PUSH
7094: FOR_TO
7095: IFFALSE 7130
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7097: LD_VAR 0 8
7101: PPUSH
7102: LD_VAR 0 3
7106: PUSH
7107: LD_VAR 0 6
7111: ARRAY
7112: PPUSH
7113: LD_VAR 0 4
7117: PUSH
7118: LD_VAR 0 6
7122: ARRAY
7123: PPUSH
7124: CALL_OW 174
7128: GO 7094
7130: POP
7131: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
7132: LD_INT 22
7134: PUSH
7135: LD_VAR 0 1
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: LD_INT 95
7146: PUSH
7147: LD_VAR 0 2
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PPUSH
7160: CALL_OW 69
7164: IFFALSE 7388
// begin seeEnemy = 1 ;
7166: LD_ADDR_VAR 0 11
7170: PUSH
7171: LD_INT 1
7173: ST_TO_ADDR
// for j in vehiclesOK do
7174: LD_ADDR_VAR 0 7
7178: PUSH
7179: LD_VAR 0 8
7183: PUSH
7184: FOR_IN
7185: IFFALSE 7386
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7187: LD_ADDR_VAR 0 9
7191: PUSH
7192: LD_INT 81
7194: PUSH
7195: LD_VAR 0 1
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: LD_INT 101
7206: PUSH
7207: LD_INT 1
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PPUSH
7218: CALL_OW 69
7222: PPUSH
7223: LD_VAR 0 7
7227: PPUSH
7228: CALL_OW 74
7232: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7233: LD_ADDR_VAR 0 10
7237: PUSH
7238: LD_INT 81
7240: PUSH
7241: LD_VAR 0 1
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 101
7252: PUSH
7253: LD_INT 1
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: LD_INT 2
7262: PUSH
7263: LD_INT 59
7265: PUSH
7266: EMPTY
7267: LIST
7268: PUSH
7269: LD_INT 21
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: LD_INT 21
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: PUSH
7300: EMPTY
7301: LIST
7302: PPUSH
7303: CALL_OW 69
7307: PPUSH
7308: LD_VAR 0 7
7312: PPUSH
7313: CALL_OW 74
7317: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7318: LD_VAR 0 7
7322: PPUSH
7323: LD_VAR 0 9
7327: PPUSH
7328: CALL_OW 296
7332: PUSH
7333: LD_INT 8
7335: PLUS
7336: PUSH
7337: LD_VAR 0 7
7341: PPUSH
7342: LD_VAR 0 10
7346: PPUSH
7347: CALL_OW 296
7351: LESS
7352: IFFALSE 7370
// ComAttackUnit ( j , target1 ) else
7354: LD_VAR 0 7
7358: PPUSH
7359: LD_VAR 0 9
7363: PPUSH
7364: CALL_OW 115
7368: GO 7384
// ComAttackUnit ( j , target2 ) ;
7370: LD_VAR 0 7
7374: PPUSH
7375: LD_VAR 0 10
7379: PPUSH
7380: CALL_OW 115
// end ;
7384: GO 7184
7386: POP
7387: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7388: LD_INT 22
7390: PUSH
7391: LD_VAR 0 1
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PUSH
7400: LD_INT 21
7402: PUSH
7403: LD_INT 2
7405: PUSH
7406: EMPTY
7407: LIST
7408: LIST
7409: PUSH
7410: LD_INT 24
7412: PUSH
7413: LD_INT 1000
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: PPUSH
7425: CALL_OW 69
7429: PUSH
7430: LD_INT 0
7432: EQUAL
7433: IFFALSE 6940
// seeEnemy = 0 ;
7435: LD_ADDR_VAR 0 11
7439: PUSH
7440: LD_INT 0
7442: ST_TO_ADDR
// end ;
7443: LD_VAR 0 5
7447: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7448: LD_INT 0
7450: PPUSH
7451: PPUSH
7452: PPUSH
7453: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_crane ] ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7454: LD_ADDR_VAR 0 8
7458: PUSH
7459: LD_INT 22
7461: PUSH
7462: LD_VAR 0 1
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PUSH
7471: LD_INT 21
7473: PUSH
7474: LD_INT 2
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 3
7483: PUSH
7484: LD_INT 34
7486: PUSH
7487: LD_INT 51
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: PUSH
7494: LD_INT 34
7496: PUSH
7497: LD_INT 53
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PUSH
7504: LD_INT 34
7506: PUSH
7507: LD_INT 52
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: PUSH
7520: LD_INT 3
7522: PUSH
7523: LD_INT 24
7525: PUSH
7526: LD_INT 650
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: PPUSH
7543: CALL_OW 69
7547: ST_TO_ADDR
// if damageVehicles > 0 then
7548: LD_VAR 0 8
7552: PUSH
7553: LD_INT 0
7555: GREATER
7556: IFFALSE 7577
// ComMoveXY ( damageVehicles , repX , repY ) ;
7558: LD_VAR 0 8
7562: PPUSH
7563: LD_VAR 0 3
7567: PPUSH
7568: LD_VAR 0 4
7572: PPUSH
7573: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7577: LD_VAR 0 8
7581: PPUSH
7582: LD_INT 95
7584: PUSH
7585: LD_VAR 0 2
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 3
7596: PUSH
7597: LD_INT 58
7599: PUSH
7600: EMPTY
7601: LIST
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PPUSH
7611: CALL_OW 72
7615: PUSH
7616: LD_INT 0
7618: GREATER
7619: IFFALSE 7686
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7621: LD_ADDR_VAR 0 6
7625: PUSH
7626: LD_VAR 0 8
7630: PPUSH
7631: LD_INT 95
7633: PUSH
7634: LD_VAR 0 2
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PUSH
7643: LD_INT 3
7645: PUSH
7646: LD_INT 58
7648: PUSH
7649: EMPTY
7650: LIST
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PPUSH
7660: CALL_OW 72
7664: PUSH
7665: FOR_IN
7666: IFFALSE 7684
// ComExitVehicle ( UnitsInside ( i ) ) ;
7668: LD_VAR 0 6
7672: PPUSH
7673: CALL_OW 313
7677: PPUSH
7678: CALL_OW 121
7682: GO 7665
7684: POP
7685: POP
// end ;
7686: LD_VAR 0 5
7690: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7691: LD_INT 0
7693: PPUSH
7694: PPUSH
7695: PPUSH
7696: PPUSH
7697: PPUSH
7698: PPUSH
7699: PPUSH
7700: PPUSH
7701: PPUSH
7702: PPUSH
7703: PPUSH
// for i = 1 to medicCount do
7704: LD_ADDR_VAR 0 14
7708: PUSH
7709: DOUBLE
7710: LD_INT 1
7712: DEC
7713: ST_TO_ADDR
7714: LD_VAR 0 7
7718: PUSH
7719: FOR_TO
7720: IFFALSE 7802
// begin uc_side = side ;
7722: LD_ADDR_OWVAR 20
7726: PUSH
7727: LD_VAR 0 1
7731: ST_TO_ADDR
// uc_nation = nation ;
7732: LD_ADDR_OWVAR 21
7736: PUSH
7737: LD_VAR 0 2
7741: ST_TO_ADDR
// hc_name =  ;
7742: LD_ADDR_OWVAR 26
7746: PUSH
7747: LD_STRING 
7749: ST_TO_ADDR
// hc_gallery =  ;
7750: LD_ADDR_OWVAR 33
7754: PUSH
7755: LD_STRING 
7757: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7758: LD_INT 0
7760: PPUSH
7761: LD_INT 4
7763: PPUSH
7764: LD_VAR 0 8
7768: PPUSH
7769: CALL_OW 380
// un = CreateHuman ;
7773: LD_ADDR_VAR 0 16
7777: PUSH
7778: CALL_OW 44
7782: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7783: LD_VAR 0 16
7787: PPUSH
7788: LD_VAR 0 9
7792: PPUSH
7793: LD_INT 0
7795: PPUSH
7796: CALL_OW 49
// end ;
7800: GO 7719
7802: POP
7803: POP
// for i = 1 to soldierCount do
7804: LD_ADDR_VAR 0 14
7808: PUSH
7809: DOUBLE
7810: LD_INT 1
7812: DEC
7813: ST_TO_ADDR
7814: LD_VAR 0 3
7818: PUSH
7819: FOR_TO
7820: IFFALSE 7902
// begin uc_side = side ;
7822: LD_ADDR_OWVAR 20
7826: PUSH
7827: LD_VAR 0 1
7831: ST_TO_ADDR
// uc_nation = nation ;
7832: LD_ADDR_OWVAR 21
7836: PUSH
7837: LD_VAR 0 2
7841: ST_TO_ADDR
// hc_name =  ;
7842: LD_ADDR_OWVAR 26
7846: PUSH
7847: LD_STRING 
7849: ST_TO_ADDR
// hc_gallery =  ;
7850: LD_ADDR_OWVAR 33
7854: PUSH
7855: LD_STRING 
7857: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7858: LD_INT 0
7860: PPUSH
7861: LD_INT 1
7863: PPUSH
7864: LD_VAR 0 8
7868: PPUSH
7869: CALL_OW 380
// un = CreateHuman ;
7873: LD_ADDR_VAR 0 16
7877: PUSH
7878: CALL_OW 44
7882: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7883: LD_VAR 0 16
7887: PPUSH
7888: LD_VAR 0 9
7892: PPUSH
7893: LD_INT 0
7895: PPUSH
7896: CALL_OW 49
// end ;
7900: GO 7819
7902: POP
7903: POP
// for i = 1 to sniperCount do
7904: LD_ADDR_VAR 0 14
7908: PUSH
7909: DOUBLE
7910: LD_INT 1
7912: DEC
7913: ST_TO_ADDR
7914: LD_VAR 0 4
7918: PUSH
7919: FOR_TO
7920: IFFALSE 8002
// begin uc_side = side ;
7922: LD_ADDR_OWVAR 20
7926: PUSH
7927: LD_VAR 0 1
7931: ST_TO_ADDR
// uc_nation = nation ;
7932: LD_ADDR_OWVAR 21
7936: PUSH
7937: LD_VAR 0 2
7941: ST_TO_ADDR
// hc_name =  ;
7942: LD_ADDR_OWVAR 26
7946: PUSH
7947: LD_STRING 
7949: ST_TO_ADDR
// hc_gallery =  ;
7950: LD_ADDR_OWVAR 33
7954: PUSH
7955: LD_STRING 
7957: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7958: LD_INT 0
7960: PPUSH
7961: LD_INT 5
7963: PPUSH
7964: LD_VAR 0 8
7968: PPUSH
7969: CALL_OW 380
// un = CreateHuman ;
7973: LD_ADDR_VAR 0 16
7977: PUSH
7978: CALL_OW 44
7982: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7983: LD_VAR 0 16
7987: PPUSH
7988: LD_VAR 0 9
7992: PPUSH
7993: LD_INT 0
7995: PPUSH
7996: CALL_OW 49
// end ;
8000: GO 7919
8002: POP
8003: POP
// for i = 1 to bazookCount do
8004: LD_ADDR_VAR 0 14
8008: PUSH
8009: DOUBLE
8010: LD_INT 1
8012: DEC
8013: ST_TO_ADDR
8014: LD_VAR 0 5
8018: PUSH
8019: FOR_TO
8020: IFFALSE 8102
// begin uc_side = side ;
8022: LD_ADDR_OWVAR 20
8026: PUSH
8027: LD_VAR 0 1
8031: ST_TO_ADDR
// uc_nation = nation ;
8032: LD_ADDR_OWVAR 21
8036: PUSH
8037: LD_VAR 0 2
8041: ST_TO_ADDR
// hc_name =  ;
8042: LD_ADDR_OWVAR 26
8046: PUSH
8047: LD_STRING 
8049: ST_TO_ADDR
// hc_gallery =  ;
8050: LD_ADDR_OWVAR 33
8054: PUSH
8055: LD_STRING 
8057: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8058: LD_INT 0
8060: PPUSH
8061: LD_INT 9
8063: PPUSH
8064: LD_VAR 0 8
8068: PPUSH
8069: CALL_OW 380
// un = CreateHuman ;
8073: LD_ADDR_VAR 0 16
8077: PUSH
8078: CALL_OW 44
8082: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8083: LD_VAR 0 16
8087: PPUSH
8088: LD_VAR 0 9
8092: PPUSH
8093: LD_INT 0
8095: PPUSH
8096: CALL_OW 49
// end ;
8100: GO 8019
8102: POP
8103: POP
// for i = 1 to mortalCount do
8104: LD_ADDR_VAR 0 14
8108: PUSH
8109: DOUBLE
8110: LD_INT 1
8112: DEC
8113: ST_TO_ADDR
8114: LD_VAR 0 6
8118: PUSH
8119: FOR_TO
8120: IFFALSE 8202
// begin uc_side = side ;
8122: LD_ADDR_OWVAR 20
8126: PUSH
8127: LD_VAR 0 1
8131: ST_TO_ADDR
// uc_nation = nation ;
8132: LD_ADDR_OWVAR 21
8136: PUSH
8137: LD_VAR 0 2
8141: ST_TO_ADDR
// hc_name =  ;
8142: LD_ADDR_OWVAR 26
8146: PUSH
8147: LD_STRING 
8149: ST_TO_ADDR
// hc_gallery =  ;
8150: LD_ADDR_OWVAR 33
8154: PUSH
8155: LD_STRING 
8157: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8158: LD_INT 0
8160: PPUSH
8161: LD_INT 8
8163: PPUSH
8164: LD_VAR 0 8
8168: PPUSH
8169: CALL_OW 380
// un = CreateHuman ;
8173: LD_ADDR_VAR 0 16
8177: PUSH
8178: CALL_OW 44
8182: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8183: LD_VAR 0 16
8187: PPUSH
8188: LD_VAR 0 9
8192: PPUSH
8193: LD_INT 0
8195: PPUSH
8196: CALL_OW 49
// end ;
8200: GO 8119
8202: POP
8203: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8204: LD_ADDR_VAR 0 19
8208: PUSH
8209: LD_INT 22
8211: PUSH
8212: LD_VAR 0 1
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: LD_INT 2
8223: PUSH
8224: LD_INT 25
8226: PUSH
8227: LD_INT 1
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: LD_INT 25
8236: PUSH
8237: LD_INT 5
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PUSH
8244: LD_INT 25
8246: PUSH
8247: LD_INT 8
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PUSH
8254: LD_INT 25
8256: PUSH
8257: LD_INT 9
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PPUSH
8275: CALL_OW 69
8279: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8280: LD_ADDR_VAR 0 18
8284: PUSH
8285: LD_INT 22
8287: PUSH
8288: LD_VAR 0 1
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PUSH
8297: LD_INT 25
8299: PUSH
8300: LD_INT 4
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PPUSH
8311: CALL_OW 69
8315: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8316: LD_VAR 0 18
8320: PPUSH
8321: LD_VAR 0 10
8325: PPUSH
8326: CALL_OW 113
// if strategy = 1 then
8330: LD_VAR 0 12
8334: PUSH
8335: LD_INT 1
8337: EQUAL
8338: IFFALSE 8854
// begin repeat wait ( 0 0$3 ) ;
8340: LD_INT 105
8342: PPUSH
8343: CALL_OW 67
// for i in soldiersOK_list do
8347: LD_ADDR_VAR 0 14
8351: PUSH
8352: LD_VAR 0 19
8356: PUSH
8357: FOR_IN
8358: IFFALSE 8422
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8360: LD_VAR 0 14
8364: PPUSH
8365: LD_INT 91
8367: PPUSH
8368: LD_INT 63
8370: PPUSH
8371: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8375: LD_VAR 0 14
8379: PPUSH
8380: LD_INT 101
8382: PPUSH
8383: LD_INT 53
8385: PPUSH
8386: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8390: LD_VAR 0 14
8394: PPUSH
8395: LD_INT 75
8397: PPUSH
8398: LD_INT 23
8400: PPUSH
8401: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8405: LD_VAR 0 14
8409: PPUSH
8410: LD_INT 78
8412: PPUSH
8413: LD_INT 8
8415: PPUSH
8416: CALL_OW 174
// end ;
8420: GO 8357
8422: POP
8423: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
8424: LD_INT 15
8426: PPUSH
8427: LD_INT 22
8429: PUSH
8430: LD_VAR 0 1
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PPUSH
8439: CALL_OW 70
8443: PUSH
8444: LD_INT 2
8446: GREATER
8447: IFFALSE 8340
// repeat wait ( 0 0$1 ) ;
8449: LD_INT 35
8451: PPUSH
8452: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8456: LD_ADDR_VAR 0 17
8460: PUSH
8461: LD_INT 22
8463: PUSH
8464: LD_VAR 0 1
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: PUSH
8473: LD_INT 1
8475: PUSH
8476: LD_INT 3
8478: PUSH
8479: LD_INT 24
8481: PUSH
8482: LD_INT 550
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: LD_INT 24
8495: PUSH
8496: LD_INT 250
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: LIST
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: PPUSH
8512: CALL_OW 69
8516: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8517: LD_ADDR_VAR 0 19
8521: PUSH
8522: LD_INT 22
8524: PUSH
8525: LD_VAR 0 1
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 2
8536: PUSH
8537: LD_INT 25
8539: PUSH
8540: LD_INT 1
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PUSH
8547: LD_INT 25
8549: PUSH
8550: LD_INT 5
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 25
8559: PUSH
8560: LD_INT 8
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 25
8569: PUSH
8570: LD_INT 9
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 24
8586: PUSH
8587: LD_INT 1000
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: LIST
8598: PPUSH
8599: CALL_OW 69
8603: ST_TO_ADDR
// if medicCount > 0 then
8604: LD_VAR 0 7
8608: PUSH
8609: LD_INT 0
8611: GREATER
8612: IFFALSE 8656
// begin if damageUnit_list > 0 then
8614: LD_VAR 0 17
8618: PUSH
8619: LD_INT 0
8621: GREATER
8622: IFFALSE 8656
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8624: LD_VAR 0 17
8628: PPUSH
8629: LD_VAR 0 10
8633: PPUSH
8634: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8638: LD_VAR 0 7
8642: PPUSH
8643: LD_VAR 0 17
8647: PUSH
8648: LD_INT 1
8650: ARRAY
8651: PPUSH
8652: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8656: LD_ADDR_VAR 0 14
8660: PUSH
8661: LD_VAR 0 19
8665: PUSH
8666: FOR_IN
8667: IFFALSE 8843
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8669: LD_ADDR_VAR 0 22
8673: PUSH
8674: LD_INT 22
8676: PUSH
8677: LD_VAR 0 11
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PPUSH
8686: CALL_OW 69
8690: PPUSH
8691: LD_VAR 0 14
8695: PPUSH
8696: CALL_OW 74
8700: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8701: LD_ADDR_VAR 0 23
8705: PUSH
8706: LD_INT 22
8708: PUSH
8709: LD_VAR 0 11
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: LD_INT 2
8720: PUSH
8721: LD_INT 59
8723: PUSH
8724: EMPTY
8725: LIST
8726: PUSH
8727: LD_INT 21
8729: PUSH
8730: LD_INT 1
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PUSH
8737: LD_INT 21
8739: PUSH
8740: LD_INT 2
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: EMPTY
8758: LIST
8759: PPUSH
8760: CALL_OW 69
8764: PPUSH
8765: LD_VAR 0 14
8769: PPUSH
8770: CALL_OW 74
8774: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8775: LD_VAR 0 14
8779: PPUSH
8780: LD_VAR 0 22
8784: PPUSH
8785: CALL_OW 296
8789: PUSH
8790: LD_INT 8
8792: PLUS
8793: PUSH
8794: LD_VAR 0 14
8798: PPUSH
8799: LD_VAR 0 23
8803: PPUSH
8804: CALL_OW 296
8808: LESS
8809: IFFALSE 8827
// begin ComAttackUnit ( i , target1 ) ;
8811: LD_VAR 0 14
8815: PPUSH
8816: LD_VAR 0 22
8820: PPUSH
8821: CALL_OW 115
// end else
8825: GO 8841
// begin ComAttackUnit ( i , target2 ) ;
8827: LD_VAR 0 14
8831: PPUSH
8832: LD_VAR 0 23
8836: PPUSH
8837: CALL_OW 115
// end ; end ;
8841: GO 8666
8843: POP
8844: POP
// until soldiersOK_list = [ ] ;
8845: LD_VAR 0 19
8849: PUSH
8850: EMPTY
8851: EQUAL
8852: IFFALSE 8449
// end ; if strategy = 2 then
8854: LD_VAR 0 12
8858: PUSH
8859: LD_INT 2
8861: EQUAL
8862: IFFALSE 9348
// begin repeat wait ( 0 0$1 ) ;
8864: LD_INT 35
8866: PPUSH
8867: CALL_OW 67
// for i in soldiersOK_list do
8871: LD_ADDR_VAR 0 14
8875: PUSH
8876: LD_VAR 0 19
8880: PUSH
8881: FOR_IN
8882: IFFALSE 8916
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8884: LD_VAR 0 14
8888: PPUSH
8889: LD_INT 91
8891: PPUSH
8892: LD_INT 63
8894: PPUSH
8895: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8899: LD_VAR 0 14
8903: PPUSH
8904: LD_INT 75
8906: PPUSH
8907: LD_INT 33
8909: PPUSH
8910: CALL_OW 174
// end ;
8914: GO 8881
8916: POP
8917: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
8918: LD_INT 16
8920: PPUSH
8921: LD_INT 22
8923: PUSH
8924: LD_VAR 0 1
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PPUSH
8933: CALL_OW 70
8937: PUSH
8938: LD_INT 2
8940: GREATER
8941: IFFALSE 8864
// repeat wait ( 0 0$3 ) ;
8943: LD_INT 105
8945: PPUSH
8946: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8950: LD_ADDR_VAR 0 17
8954: PUSH
8955: LD_INT 22
8957: PUSH
8958: LD_VAR 0 1
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PUSH
8967: LD_INT 1
8969: PUSH
8970: LD_INT 3
8972: PUSH
8973: LD_INT 24
8975: PUSH
8976: LD_INT 550
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PUSH
8987: LD_INT 24
8989: PUSH
8990: LD_INT 250
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: LIST
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PPUSH
9006: CALL_OW 69
9010: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9011: LD_ADDR_VAR 0 19
9015: PUSH
9016: LD_INT 22
9018: PUSH
9019: LD_VAR 0 1
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: LD_INT 2
9030: PUSH
9031: LD_INT 25
9033: PUSH
9034: LD_INT 1
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PUSH
9041: LD_INT 25
9043: PUSH
9044: LD_INT 5
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: PUSH
9051: LD_INT 25
9053: PUSH
9054: LD_INT 8
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 25
9063: PUSH
9064: LD_INT 9
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: PUSH
9078: LD_INT 24
9080: PUSH
9081: LD_INT 1000
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: LIST
9092: PPUSH
9093: CALL_OW 69
9097: ST_TO_ADDR
// if medicCount > 0 then
9098: LD_VAR 0 7
9102: PUSH
9103: LD_INT 0
9105: GREATER
9106: IFFALSE 9150
// begin if damageUnit_list > 0 then
9108: LD_VAR 0 17
9112: PUSH
9113: LD_INT 0
9115: GREATER
9116: IFFALSE 9150
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
9118: LD_VAR 0 17
9122: PPUSH
9123: LD_VAR 0 10
9127: PPUSH
9128: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
9132: LD_VAR 0 7
9136: PPUSH
9137: LD_VAR 0 17
9141: PUSH
9142: LD_INT 1
9144: ARRAY
9145: PPUSH
9146: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
9150: LD_ADDR_VAR 0 14
9154: PUSH
9155: LD_VAR 0 19
9159: PUSH
9160: FOR_IN
9161: IFFALSE 9337
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9163: LD_ADDR_VAR 0 22
9167: PUSH
9168: LD_INT 22
9170: PUSH
9171: LD_VAR 0 11
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: PPUSH
9180: CALL_OW 69
9184: PPUSH
9185: LD_VAR 0 14
9189: PPUSH
9190: CALL_OW 74
9194: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9195: LD_ADDR_VAR 0 23
9199: PUSH
9200: LD_INT 22
9202: PUSH
9203: LD_VAR 0 11
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: LD_INT 2
9214: PUSH
9215: LD_INT 59
9217: PUSH
9218: EMPTY
9219: LIST
9220: PUSH
9221: LD_INT 21
9223: PUSH
9224: LD_INT 1
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: LD_INT 21
9233: PUSH
9234: LD_INT 2
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PUSH
9251: EMPTY
9252: LIST
9253: PPUSH
9254: CALL_OW 69
9258: PPUSH
9259: LD_VAR 0 14
9263: PPUSH
9264: CALL_OW 74
9268: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9269: LD_VAR 0 14
9273: PPUSH
9274: LD_VAR 0 22
9278: PPUSH
9279: CALL_OW 296
9283: PUSH
9284: LD_INT 8
9286: PLUS
9287: PUSH
9288: LD_VAR 0 14
9292: PPUSH
9293: LD_VAR 0 23
9297: PPUSH
9298: CALL_OW 296
9302: LESS
9303: IFFALSE 9321
// begin ComAttackUnit ( i , target1 ) ;
9305: LD_VAR 0 14
9309: PPUSH
9310: LD_VAR 0 22
9314: PPUSH
9315: CALL_OW 115
// end else
9319: GO 9335
// begin ComAttackUnit ( i , target2 ) ;
9321: LD_VAR 0 14
9325: PPUSH
9326: LD_VAR 0 23
9330: PPUSH
9331: CALL_OW 115
// end ; end ;
9335: GO 9160
9337: POP
9338: POP
// until soldiersOK_list = [ ] ;
9339: LD_VAR 0 19
9343: PUSH
9344: EMPTY
9345: EQUAL
9346: IFFALSE 8943
// end ; if not soldiersOK_list and medic_list then
9348: LD_VAR 0 19
9352: NOT
9353: PUSH
9354: LD_VAR 0 18
9358: AND
9359: IFFALSE 9499
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
9361: LD_ADDR_VAR 0 18
9365: PUSH
9366: LD_INT 22
9368: PUSH
9369: LD_VAR 0 1
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: PUSH
9378: LD_INT 25
9380: PUSH
9381: LD_INT 4
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 50
9390: PUSH
9391: EMPTY
9392: LIST
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: LIST
9398: PPUSH
9399: CALL_OW 69
9403: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9404: LD_INT 35
9406: PPUSH
9407: CALL_OW 67
// for i in medic_list do
9411: LD_ADDR_VAR 0 14
9415: PUSH
9416: LD_VAR 0 18
9420: PUSH
9421: FOR_IN
9422: IFFALSE 9490
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
9424: LD_VAR 0 14
9428: PPUSH
9429: CALL_OW 314
9433: NOT
9434: PUSH
9435: LD_VAR 0 14
9439: PPUSH
9440: LD_INT 4
9442: PPUSH
9443: CALL_OW 308
9447: NOT
9448: AND
9449: IFFALSE 9465
// ComMoveToArea ( i , RussianAttack ) else
9451: LD_VAR 0 14
9455: PPUSH
9456: LD_INT 4
9458: PPUSH
9459: CALL_OW 113
9463: GO 9488
// if IsInArea ( i , RussianAttack ) then
9465: LD_VAR 0 14
9469: PPUSH
9470: LD_INT 4
9472: PPUSH
9473: CALL_OW 308
9477: IFFALSE 9488
// RemoveUnit ( i ) ;
9479: LD_VAR 0 14
9483: PPUSH
9484: CALL_OW 64
9488: GO 9421
9490: POP
9491: POP
// until not medic_list ;
9492: LD_VAR 0 18
9496: NOT
9497: IFFALSE 9361
// end ; end ;
9499: LD_VAR 0 13
9503: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9504: LD_INT 0
9506: PPUSH
9507: PPUSH
9508: PPUSH
9509: PPUSH
9510: PPUSH
9511: PPUSH
9512: PPUSH
9513: PPUSH
9514: PPUSH
9515: PPUSH
9516: PPUSH
// amChassisTab = [ ] ;
9517: LD_ADDR_VAR 0 19
9521: PUSH
9522: EMPTY
9523: ST_TO_ADDR
// arChassisTab = [ ] ;
9524: LD_ADDR_VAR 0 18
9528: PUSH
9529: EMPTY
9530: ST_TO_ADDR
// ruChassisTab = [ ] ;
9531: LD_ADDR_VAR 0 17
9535: PUSH
9536: EMPTY
9537: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9538: LD_INT 35
9540: PPUSH
9541: CALL_OW 67
// if nation = 1 then
9545: LD_VAR 0 5
9549: PUSH
9550: LD_INT 1
9552: EQUAL
9553: IFFALSE 10044
// begin uc_side = side ;
9555: LD_ADDR_OWVAR 20
9559: PUSH
9560: LD_VAR 0 2
9564: ST_TO_ADDR
// uc_nation = nation ;
9565: LD_ADDR_OWVAR 21
9569: PUSH
9570: LD_VAR 0 5
9574: ST_TO_ADDR
// vc_engine = vehengine ;
9575: LD_ADDR_OWVAR 39
9579: PUSH
9580: LD_VAR 0 6
9584: ST_TO_ADDR
// vc_control = vehcontrol ;
9585: LD_ADDR_OWVAR 38
9589: PUSH
9590: LD_VAR 0 7
9594: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9595: LD_ADDR_OWVAR 40
9599: PUSH
9600: LD_VAR 0 10
9604: PUSH
9605: LD_INT 1
9607: PPUSH
9608: LD_VAR 0 10
9612: PPUSH
9613: CALL_OW 12
9617: ARRAY
9618: ST_TO_ADDR
// for j = 1 to AMWeapon do
9619: LD_ADDR_VAR 0 14
9623: PUSH
9624: DOUBLE
9625: LD_INT 1
9627: DEC
9628: ST_TO_ADDR
9629: LD_VAR 0 10
9633: PUSH
9634: FOR_TO
9635: IFFALSE 9936
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9637: LD_VAR 0 10
9641: PUSH
9642: LD_VAR 0 14
9646: ARRAY
9647: PUSH
9648: LD_INT 2
9650: EQUAL
9651: PUSH
9652: LD_VAR 0 10
9656: PUSH
9657: LD_VAR 0 14
9661: ARRAY
9662: PUSH
9663: LD_INT 3
9665: EQUAL
9666: OR
9667: IFFALSE 9720
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9669: LD_ADDR_VAR 0 19
9673: PUSH
9674: LD_INT 1
9676: PUSH
9677: LD_INT 2
9679: PUSH
9680: LD_INT 3
9682: PUSH
9683: LD_INT 4
9685: PUSH
9686: LD_INT 5
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9696: LD_ADDR_OWVAR 37
9700: PUSH
9701: LD_VAR 0 19
9705: PUSH
9706: LD_INT 1
9708: PPUSH
9709: LD_VAR 0 19
9713: PPUSH
9714: CALL_OW 12
9718: ARRAY
9719: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9720: LD_VAR 0 10
9724: PUSH
9725: LD_VAR 0 14
9729: ARRAY
9730: PUSH
9731: LD_INT 4
9733: EQUAL
9734: PUSH
9735: LD_VAR 0 10
9739: PUSH
9740: LD_VAR 0 14
9744: ARRAY
9745: PUSH
9746: LD_INT 5
9748: EQUAL
9749: OR
9750: PUSH
9751: LD_VAR 0 10
9755: PUSH
9756: LD_VAR 0 14
9760: ARRAY
9761: PUSH
9762: LD_INT 9
9764: EQUAL
9765: OR
9766: PUSH
9767: LD_VAR 0 10
9771: PUSH
9772: LD_VAR 0 14
9776: ARRAY
9777: PUSH
9778: LD_INT 11
9780: EQUAL
9781: OR
9782: PUSH
9783: LD_VAR 0 10
9787: PUSH
9788: LD_VAR 0 14
9792: ARRAY
9793: PUSH
9794: LD_INT 7
9796: EQUAL
9797: OR
9798: IFFALSE 9847
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9800: LD_ADDR_VAR 0 19
9804: PUSH
9805: LD_INT 2
9807: PUSH
9808: LD_INT 3
9810: PUSH
9811: LD_INT 4
9813: PUSH
9814: LD_INT 5
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9823: LD_ADDR_OWVAR 37
9827: PUSH
9828: LD_VAR 0 19
9832: PUSH
9833: LD_INT 1
9835: PPUSH
9836: LD_VAR 0 19
9840: PPUSH
9841: CALL_OW 12
9845: ARRAY
9846: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9847: LD_VAR 0 10
9851: PUSH
9852: LD_VAR 0 14
9856: ARRAY
9857: PUSH
9858: LD_INT 8
9860: EQUAL
9861: PUSH
9862: LD_VAR 0 10
9866: PUSH
9867: LD_VAR 0 14
9871: ARRAY
9872: PUSH
9873: LD_INT 6
9875: EQUAL
9876: OR
9877: PUSH
9878: LD_VAR 0 10
9882: PUSH
9883: LD_VAR 0 14
9887: ARRAY
9888: PUSH
9889: LD_INT 10
9891: EQUAL
9892: OR
9893: IFFALSE 9934
// begin amChassisTab = [ 4 , 5 ] ;
9895: LD_ADDR_VAR 0 19
9899: PUSH
9900: LD_INT 4
9902: PUSH
9903: LD_INT 5
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9910: LD_ADDR_OWVAR 37
9914: PUSH
9915: LD_VAR 0 19
9919: PUSH
9920: LD_INT 1
9922: PPUSH
9923: LD_VAR 0 19
9927: PPUSH
9928: CALL_OW 12
9932: ARRAY
9933: ST_TO_ADDR
// end ; end ;
9934: GO 9634
9936: POP
9937: POP
// veh = CreateVehicle ;
9938: LD_ADDR_VAR 0 16
9942: PUSH
9943: CALL_OW 45
9947: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9948: LD_VAR 0 16
9952: PPUSH
9953: LD_VAR 0 1
9957: PPUSH
9958: LD_INT 0
9960: PPUSH
9961: CALL_OW 49
// if vehControl = 1 then
9965: LD_VAR 0 7
9969: PUSH
9970: LD_INT 1
9972: EQUAL
9973: IFFALSE 10030
// begin hc_gallery =  ;
9975: LD_ADDR_OWVAR 33
9979: PUSH
9980: LD_STRING 
9982: ST_TO_ADDR
// hc_name =  ;
9983: LD_ADDR_OWVAR 26
9987: PUSH
9988: LD_STRING 
9990: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9991: LD_INT 0
9993: PPUSH
9994: LD_INT 3
9996: PPUSH
9997: LD_VAR 0 4
10001: PPUSH
10002: CALL_OW 380
// un = CreateHuman ;
10006: LD_ADDR_VAR 0 15
10010: PUSH
10011: CALL_OW 44
10015: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10016: LD_VAR 0 15
10020: PPUSH
10021: LD_VAR 0 16
10025: PPUSH
10026: CALL_OW 52
// end ; i = i + 1 ;
10030: LD_ADDR_VAR 0 13
10034: PUSH
10035: LD_VAR 0 13
10039: PUSH
10040: LD_INT 1
10042: PLUS
10043: ST_TO_ADDR
// end ; if nation = 2 then
10044: LD_VAR 0 5
10048: PUSH
10049: LD_INT 2
10051: EQUAL
10052: IFFALSE 10476
// begin uc_side = side ;
10054: LD_ADDR_OWVAR 20
10058: PUSH
10059: LD_VAR 0 2
10063: ST_TO_ADDR
// uc_nation = nation ;
10064: LD_ADDR_OWVAR 21
10068: PUSH
10069: LD_VAR 0 5
10073: ST_TO_ADDR
// vc_engine = vehengine ;
10074: LD_ADDR_OWVAR 39
10078: PUSH
10079: LD_VAR 0 6
10083: ST_TO_ADDR
// vc_control = vehcontrol ;
10084: LD_ADDR_OWVAR 38
10088: PUSH
10089: LD_VAR 0 7
10093: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10094: LD_ADDR_OWVAR 40
10098: PUSH
10099: LD_VAR 0 9
10103: PUSH
10104: LD_INT 1
10106: PPUSH
10107: LD_VAR 0 9
10111: PPUSH
10112: CALL_OW 12
10116: ARRAY
10117: ST_TO_ADDR
// for j = 1 to ARWeapons do
10118: LD_ADDR_VAR 0 14
10122: PUSH
10123: DOUBLE
10124: LD_INT 1
10126: DEC
10127: ST_TO_ADDR
10128: LD_VAR 0 9
10132: PUSH
10133: FOR_TO
10134: IFFALSE 10368
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10136: LD_VAR 0 9
10140: PUSH
10141: LD_VAR 0 14
10145: ARRAY
10146: PUSH
10147: LD_INT 24
10149: EQUAL
10150: PUSH
10151: LD_VAR 0 9
10155: PUSH
10156: LD_VAR 0 14
10160: ARRAY
10161: PUSH
10162: LD_INT 22
10164: EQUAL
10165: OR
10166: PUSH
10167: LD_VAR 0 9
10171: PUSH
10172: LD_VAR 0 14
10176: ARRAY
10177: PUSH
10178: LD_INT 23
10180: EQUAL
10181: OR
10182: PUSH
10183: LD_VAR 0 9
10187: PUSH
10188: LD_VAR 0 14
10192: ARRAY
10193: PUSH
10194: LD_INT 30
10196: EQUAL
10197: OR
10198: IFFALSE 10247
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10200: LD_ADDR_VAR 0 18
10204: PUSH
10205: LD_INT 11
10207: PUSH
10208: LD_INT 12
10210: PUSH
10211: LD_INT 13
10213: PUSH
10214: LD_INT 14
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10223: LD_ADDR_OWVAR 37
10227: PUSH
10228: LD_VAR 0 18
10232: PUSH
10233: LD_INT 1
10235: PPUSH
10236: LD_VAR 0 18
10240: PPUSH
10241: CALL_OW 12
10245: ARRAY
10246: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10247: LD_VAR 0 9
10251: PUSH
10252: LD_VAR 0 14
10256: ARRAY
10257: PUSH
10258: LD_INT 29
10260: EQUAL
10261: PUSH
10262: LD_VAR 0 9
10266: PUSH
10267: LD_VAR 0 14
10271: ARRAY
10272: PUSH
10273: LD_INT 28
10275: EQUAL
10276: OR
10277: PUSH
10278: LD_VAR 0 9
10282: PUSH
10283: LD_VAR 0 14
10287: ARRAY
10288: PUSH
10289: LD_INT 27
10291: EQUAL
10292: OR
10293: PUSH
10294: LD_VAR 0 9
10298: PUSH
10299: LD_VAR 0 14
10303: ARRAY
10304: PUSH
10305: LD_INT 26
10307: EQUAL
10308: OR
10309: PUSH
10310: LD_VAR 0 9
10314: PUSH
10315: LD_VAR 0 14
10319: ARRAY
10320: PUSH
10321: LD_INT 25
10323: EQUAL
10324: OR
10325: IFFALSE 10366
// begin arChassisTab = [ 13 , 14 ] ;
10327: LD_ADDR_VAR 0 18
10331: PUSH
10332: LD_INT 13
10334: PUSH
10335: LD_INT 14
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10342: LD_ADDR_OWVAR 37
10346: PUSH
10347: LD_VAR 0 18
10351: PUSH
10352: LD_INT 1
10354: PPUSH
10355: LD_VAR 0 18
10359: PPUSH
10360: CALL_OW 12
10364: ARRAY
10365: ST_TO_ADDR
// end ; end ;
10366: GO 10133
10368: POP
10369: POP
// veh = CreateVehicle ;
10370: LD_ADDR_VAR 0 16
10374: PUSH
10375: CALL_OW 45
10379: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10380: LD_VAR 0 16
10384: PPUSH
10385: LD_VAR 0 1
10389: PPUSH
10390: LD_INT 0
10392: PPUSH
10393: CALL_OW 49
// if vehcontrol = 1 then
10397: LD_VAR 0 7
10401: PUSH
10402: LD_INT 1
10404: EQUAL
10405: IFFALSE 10462
// begin hc_gallery =  ;
10407: LD_ADDR_OWVAR 33
10411: PUSH
10412: LD_STRING 
10414: ST_TO_ADDR
// hc_name =  ;
10415: LD_ADDR_OWVAR 26
10419: PUSH
10420: LD_STRING 
10422: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10423: LD_INT 0
10425: PPUSH
10426: LD_INT 3
10428: PPUSH
10429: LD_VAR 0 4
10433: PPUSH
10434: CALL_OW 380
// un = CreateHuman ;
10438: LD_ADDR_VAR 0 15
10442: PUSH
10443: CALL_OW 44
10447: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10448: LD_VAR 0 15
10452: PPUSH
10453: LD_VAR 0 16
10457: PPUSH
10458: CALL_OW 52
// end ; i = i + 1 ;
10462: LD_ADDR_VAR 0 13
10466: PUSH
10467: LD_VAR 0 13
10471: PUSH
10472: LD_INT 1
10474: PLUS
10475: ST_TO_ADDR
// end ; if nation = 3 then
10476: LD_VAR 0 5
10480: PUSH
10481: LD_INT 3
10483: EQUAL
10484: IFFALSE 10876
// begin uc_side = side ;
10486: LD_ADDR_OWVAR 20
10490: PUSH
10491: LD_VAR 0 2
10495: ST_TO_ADDR
// uc_nation = nation ;
10496: LD_ADDR_OWVAR 21
10500: PUSH
10501: LD_VAR 0 5
10505: ST_TO_ADDR
// vc_engine = vehengine ;
10506: LD_ADDR_OWVAR 39
10510: PUSH
10511: LD_VAR 0 6
10515: ST_TO_ADDR
// vc_control = vehcontrol ;
10516: LD_ADDR_OWVAR 38
10520: PUSH
10521: LD_VAR 0 7
10525: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10526: LD_ADDR_OWVAR 40
10530: PUSH
10531: LD_VAR 0 8
10535: PUSH
10536: LD_INT 1
10538: PPUSH
10539: LD_VAR 0 8
10543: PPUSH
10544: CALL_OW 12
10548: ARRAY
10549: ST_TO_ADDR
// for j = 1 to RuWeapons do
10550: LD_ADDR_VAR 0 14
10554: PUSH
10555: DOUBLE
10556: LD_INT 1
10558: DEC
10559: ST_TO_ADDR
10560: LD_VAR 0 8
10564: PUSH
10565: FOR_TO
10566: IFFALSE 10768
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10568: LD_VAR 0 8
10572: PUSH
10573: LD_VAR 0 14
10577: ARRAY
10578: PUSH
10579: LD_INT 42
10581: EQUAL
10582: PUSH
10583: LD_VAR 0 8
10587: PUSH
10588: LD_VAR 0 14
10592: ARRAY
10593: PUSH
10594: LD_INT 43
10596: EQUAL
10597: OR
10598: PUSH
10599: LD_VAR 0 8
10603: PUSH
10604: LD_VAR 0 14
10608: ARRAY
10609: PUSH
10610: LD_INT 44
10612: EQUAL
10613: OR
10614: PUSH
10615: LD_VAR 0 8
10619: PUSH
10620: LD_VAR 0 14
10624: ARRAY
10625: PUSH
10626: LD_INT 45
10628: EQUAL
10629: OR
10630: PUSH
10631: LD_VAR 0 8
10635: PUSH
10636: LD_VAR 0 14
10640: ARRAY
10641: PUSH
10642: LD_INT 49
10644: EQUAL
10645: OR
10646: IFFALSE 10695
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10648: LD_ADDR_VAR 0 17
10652: PUSH
10653: LD_INT 21
10655: PUSH
10656: LD_INT 22
10658: PUSH
10659: LD_INT 23
10661: PUSH
10662: LD_INT 24
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10671: LD_ADDR_OWVAR 37
10675: PUSH
10676: LD_VAR 0 17
10680: PUSH
10681: LD_INT 1
10683: PPUSH
10684: LD_VAR 0 17
10688: PPUSH
10689: CALL_OW 12
10693: ARRAY
10694: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10695: LD_VAR 0 8
10699: PUSH
10700: LD_VAR 0 14
10704: ARRAY
10705: PUSH
10706: LD_INT 46
10708: EQUAL
10709: PUSH
10710: LD_VAR 0 8
10714: PUSH
10715: LD_VAR 0 14
10719: ARRAY
10720: PUSH
10721: LD_INT 47
10723: EQUAL
10724: OR
10725: IFFALSE 10766
// begin ruChassisTab = [ 23 , 24 ] ;
10727: LD_ADDR_VAR 0 17
10731: PUSH
10732: LD_INT 23
10734: PUSH
10735: LD_INT 24
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10742: LD_ADDR_OWVAR 37
10746: PUSH
10747: LD_VAR 0 17
10751: PUSH
10752: LD_INT 1
10754: PPUSH
10755: LD_VAR 0 17
10759: PPUSH
10760: CALL_OW 12
10764: ARRAY
10765: ST_TO_ADDR
// end ; end ;
10766: GO 10565
10768: POP
10769: POP
// veh = CreateVehicle ;
10770: LD_ADDR_VAR 0 16
10774: PUSH
10775: CALL_OW 45
10779: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10780: LD_VAR 0 16
10784: PPUSH
10785: LD_VAR 0 1
10789: PPUSH
10790: LD_INT 0
10792: PPUSH
10793: CALL_OW 49
// if vehcontrol = 1 then
10797: LD_VAR 0 7
10801: PUSH
10802: LD_INT 1
10804: EQUAL
10805: IFFALSE 10862
// begin hc_gallery =  ;
10807: LD_ADDR_OWVAR 33
10811: PUSH
10812: LD_STRING 
10814: ST_TO_ADDR
// hc_name =  ;
10815: LD_ADDR_OWVAR 26
10819: PUSH
10820: LD_STRING 
10822: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10823: LD_INT 0
10825: PPUSH
10826: LD_INT 3
10828: PPUSH
10829: LD_VAR 0 4
10833: PPUSH
10834: CALL_OW 380
// un = CreateHuman ;
10838: LD_ADDR_VAR 0 15
10842: PUSH
10843: CALL_OW 44
10847: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10848: LD_VAR 0 15
10852: PPUSH
10853: LD_VAR 0 16
10857: PPUSH
10858: CALL_OW 52
// end ; i = i + 1 ;
10862: LD_ADDR_VAR 0 13
10866: PUSH
10867: LD_VAR 0 13
10871: PUSH
10872: LD_INT 1
10874: PLUS
10875: ST_TO_ADDR
// end ; until i = vehCount ;
10876: LD_VAR 0 13
10880: PUSH
10881: LD_VAR 0 3
10885: EQUAL
10886: IFFALSE 9538
// repeat wait ( 0 0$1 ) ;
10888: LD_INT 35
10890: PPUSH
10891: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10895: LD_INT 22
10897: PUSH
10898: LD_VAR 0 2
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PUSH
10907: LD_INT 21
10909: PUSH
10910: LD_INT 2
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 24
10919: PUSH
10920: LD_INT 250
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: LD_INT 3
10929: PUSH
10930: LD_INT 58
10932: PUSH
10933: EMPTY
10934: LIST
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: PPUSH
10946: CALL_OW 69
10950: PUSH
10951: LD_INT 0
10953: GREATER
10954: IFFALSE 11196
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
10956: LD_ADDR_VAR 0 13
10960: PUSH
10961: LD_INT 22
10963: PUSH
10964: LD_VAR 0 2
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 21
10975: PUSH
10976: LD_INT 2
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: LD_INT 24
10985: PUSH
10986: LD_INT 250
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PUSH
10993: LD_INT 3
10995: PUSH
10996: LD_INT 58
10998: PUSH
10999: EMPTY
11000: LIST
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: PPUSH
11012: CALL_OW 69
11016: PUSH
11017: FOR_IN
11018: IFFALSE 11194
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11020: LD_ADDR_VAR 0 21
11024: PUSH
11025: LD_INT 22
11027: PUSH
11028: LD_VAR 0 11
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PPUSH
11037: CALL_OW 69
11041: PPUSH
11042: LD_VAR 0 13
11046: PPUSH
11047: CALL_OW 74
11051: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11052: LD_ADDR_VAR 0 22
11056: PUSH
11057: LD_INT 22
11059: PUSH
11060: LD_VAR 0 11
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: LD_INT 2
11071: PUSH
11072: LD_INT 59
11074: PUSH
11075: EMPTY
11076: LIST
11077: PUSH
11078: LD_INT 21
11080: PUSH
11081: LD_INT 1
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: LD_INT 21
11090: PUSH
11091: LD_INT 2
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: PPUSH
11111: CALL_OW 69
11115: PPUSH
11116: LD_VAR 0 13
11120: PPUSH
11121: CALL_OW 74
11125: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11126: LD_VAR 0 13
11130: PPUSH
11131: LD_VAR 0 21
11135: PPUSH
11136: CALL_OW 296
11140: PUSH
11141: LD_INT 8
11143: PLUS
11144: PUSH
11145: LD_VAR 0 13
11149: PPUSH
11150: LD_VAR 0 22
11154: PPUSH
11155: CALL_OW 296
11159: LESS
11160: IFFALSE 11178
// begin ComAttackUnit ( i , target1 ) ;
11162: LD_VAR 0 13
11166: PPUSH
11167: LD_VAR 0 21
11171: PPUSH
11172: CALL_OW 115
// end else
11176: GO 11192
// begin ComAttackUnit ( i , target2 ) ;
11178: LD_VAR 0 13
11182: PPUSH
11183: LD_VAR 0 22
11187: PPUSH
11188: CALL_OW 115
// end ; end ;
11192: GO 11017
11194: POP
11195: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
11196: LD_INT 22
11198: PUSH
11199: LD_VAR 0 2
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PUSH
11208: LD_INT 21
11210: PUSH
11211: LD_INT 2
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PUSH
11218: LD_INT 24
11220: PUSH
11221: LD_INT 250
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: LD_INT 3
11230: PUSH
11231: LD_INT 58
11233: PUSH
11234: EMPTY
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: PPUSH
11247: CALL_OW 69
11251: PUSH
11252: LD_INT 0
11254: EQUAL
11255: IFFALSE 10888
// end ; end_of_file
11257: LD_VAR 0 12
11261: RET
// every 1 do var i , gammaSquad , startX , startY ;
11262: GO 11264
11264: DISABLE
11265: LD_INT 0
11267: PPUSH
11268: PPUSH
11269: PPUSH
11270: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11271: LD_ADDR_VAR 0 2
11275: PUSH
11276: LD_EXP 8
11280: PUSH
11281: LD_EXP 9
11285: PUSH
11286: LD_EXP 10
11290: PUSH
11291: LD_EXP 11
11295: PUSH
11296: LD_EXP 12
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11308: LD_ADDR_VAR 0 3
11312: PUSH
11313: LD_INT 46
11315: PUSH
11316: LD_INT 45
11318: PUSH
11319: LD_INT 44
11321: PUSH
11322: LD_INT 43
11324: PUSH
11325: LD_INT 42
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11335: LD_ADDR_VAR 0 4
11339: PUSH
11340: LD_INT 14
11342: PUSH
11343: LD_INT 12
11345: PUSH
11346: LD_INT 10
11348: PUSH
11349: LD_INT 8
11351: PUSH
11352: LD_INT 6
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
11362: LD_INT 32
11364: PPUSH
11365: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11369: LD_INT 32
11371: PPUSH
11372: LD_INT 51
11374: PPUSH
11375: LD_INT 26
11377: PPUSH
11378: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11382: LD_INT 32
11384: PPUSH
11385: LD_INT 53
11387: PPUSH
11388: LD_INT 23
11390: PPUSH
11391: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11395: LD_INT 32
11397: PPUSH
11398: LD_INT 52
11400: PPUSH
11401: LD_INT 19
11403: PPUSH
11404: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11408: LD_INT 35
11410: PPUSH
11411: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11415: LD_INT 32
11417: PPUSH
11418: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11422: LD_INT 32
11424: PPUSH
11425: CALL_OW 250
11429: PUSH
11430: LD_INT 52
11432: EQUAL
11433: PUSH
11434: LD_INT 32
11436: PPUSH
11437: CALL_OW 251
11441: PUSH
11442: LD_INT 19
11444: EQUAL
11445: AND
11446: IFFALSE 11408
// ComExitVehicle ( JMM ) ;
11448: LD_EXP 1
11452: PPUSH
11453: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11457: LD_EXP 7
11461: PPUSH
11462: LD_EXP 1
11466: PPUSH
11467: CALL_OW 119
// wait ( 0 0$01 ) ;
11471: LD_INT 35
11473: PPUSH
11474: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11478: LD_EXP 1
11482: PPUSH
11483: LD_INT 46
11485: PPUSH
11486: LD_INT 10
11488: PPUSH
11489: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11493: LD_EXP 1
11497: PPUSH
11498: LD_EXP 7
11502: PPUSH
11503: CALL_OW 179
// wait ( 0 0$4 ) ;
11507: LD_INT 140
11509: PPUSH
11510: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11514: LD_EXP 1
11518: PPUSH
11519: LD_STRING D1-JMM-1
11521: PPUSH
11522: CALL_OW 88
// if not dialogue_skipped then
11526: LD_OWVAR 59
11530: NOT
11531: IFFALSE 12188
// begin for i := 1 to gammaSquad do
11533: LD_ADDR_VAR 0 1
11537: PUSH
11538: DOUBLE
11539: LD_INT 1
11541: DEC
11542: ST_TO_ADDR
11543: LD_VAR 0 2
11547: PUSH
11548: FOR_TO
11549: IFFALSE 11610
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11551: LD_VAR 0 2
11555: PUSH
11556: LD_VAR 0 1
11560: ARRAY
11561: PPUSH
11562: LD_VAR 0 3
11566: PUSH
11567: LD_VAR 0 1
11571: ARRAY
11572: PPUSH
11573: LD_VAR 0 4
11577: PUSH
11578: LD_VAR 0 1
11582: ARRAY
11583: PPUSH
11584: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11588: LD_VAR 0 2
11592: PUSH
11593: LD_VAR 0 1
11597: ARRAY
11598: PPUSH
11599: LD_EXP 1
11603: PPUSH
11604: CALL_OW 179
// end ;
11608: GO 11548
11610: POP
11611: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11612: LD_EXP 4
11616: PPUSH
11617: LD_INT 41
11619: PPUSH
11620: LD_INT 4
11622: PPUSH
11623: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11627: LD_EXP 4
11631: PPUSH
11632: LD_EXP 1
11636: PPUSH
11637: CALL_OW 179
// if Lisa = false and Bobby then
11641: LD_EXP 4
11645: PUSH
11646: LD_INT 0
11648: EQUAL
11649: PUSH
11650: LD_EXP 2
11654: AND
11655: IFFALSE 11686
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11657: LD_EXP 2
11661: PPUSH
11662: LD_INT 41
11664: PPUSH
11665: LD_INT 4
11667: PPUSH
11668: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11672: LD_EXP 2
11676: PPUSH
11677: LD_EXP 1
11681: PPUSH
11682: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11686: LD_EXP 4
11690: PUSH
11691: LD_INT 0
11693: EQUAL
11694: PUSH
11695: LD_EXP 2
11699: PUSH
11700: LD_INT 0
11702: EQUAL
11703: AND
11704: PUSH
11705: LD_EXP 3
11709: AND
11710: IFFALSE 11741
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11712: LD_EXP 3
11716: PPUSH
11717: LD_INT 41
11719: PPUSH
11720: LD_INT 4
11722: PPUSH
11723: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11727: LD_EXP 3
11731: PPUSH
11732: LD_EXP 1
11736: PPUSH
11737: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11741: LD_EXP 4
11745: PUSH
11746: LD_INT 0
11748: EQUAL
11749: PUSH
11750: LD_EXP 2
11754: PUSH
11755: LD_INT 0
11757: EQUAL
11758: AND
11759: PUSH
11760: LD_EXP 3
11764: PUSH
11765: LD_INT 0
11767: EQUAL
11768: AND
11769: IFFALSE 11800
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11771: LD_EXP 6
11775: PPUSH
11776: LD_INT 41
11778: PPUSH
11779: LD_INT 4
11781: PPUSH
11782: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11786: LD_EXP 6
11790: PPUSH
11791: LD_EXP 1
11795: PPUSH
11796: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11800: LD_EXP 7
11804: PPUSH
11805: LD_STRING D1-Brown-1
11807: PPUSH
11808: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11812: LD_EXP 1
11816: PPUSH
11817: LD_STRING D1-JMM-2
11819: PPUSH
11820: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11824: LD_EXP 7
11828: PPUSH
11829: LD_STRING D1-Brown-2
11831: PPUSH
11832: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11836: LD_EXP 1
11840: PPUSH
11841: LD_EXP 9
11845: PPUSH
11846: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11850: LD_EXP 9
11854: PPUSH
11855: LD_STRING D1-FSol1-2
11857: PPUSH
11858: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11862: LD_EXP 1
11866: PPUSH
11867: LD_EXP 8
11871: PPUSH
11872: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11876: LD_EXP 8
11880: PPUSH
11881: LD_STRING D1-Sol2-2
11883: PPUSH
11884: CALL_OW 88
// if Lisa then
11888: LD_EXP 4
11892: IFFALSE 11932
// begin ComTurnUnit ( JMM , Lisa ) ;
11894: LD_EXP 1
11898: PPUSH
11899: LD_EXP 4
11903: PPUSH
11904: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11908: LD_EXP 4
11912: PPUSH
11913: LD_STRING D1-Lisa-2
11915: PPUSH
11916: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11920: LD_EXP 1
11924: PPUSH
11925: LD_STRING D1-JMM-3
11927: PPUSH
11928: CALL_OW 88
// end ; if Bobby then
11932: LD_EXP 2
11936: IFFALSE 11976
// begin ComTurnUnit ( JMM , Bobby ) ;
11938: LD_EXP 1
11942: PPUSH
11943: LD_EXP 2
11947: PPUSH
11948: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11952: LD_EXP 2
11956: PPUSH
11957: LD_STRING D1-Bobby-2
11959: PPUSH
11960: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11964: LD_EXP 1
11968: PPUSH
11969: LD_STRING D1-JMM-3
11971: PPUSH
11972: CALL_OW 88
// end ; if Cyrus then
11976: LD_EXP 3
11980: IFFALSE 12020
// begin ComTurnUnit ( JMM , Cyrus ) ;
11982: LD_EXP 1
11986: PPUSH
11987: LD_EXP 3
11991: PPUSH
11992: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11996: LD_EXP 3
12000: PPUSH
12001: LD_STRING D1-Cyrus-2
12003: PPUSH
12004: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12008: LD_EXP 1
12012: PPUSH
12013: LD_STRING D1-JMM-3
12015: PPUSH
12016: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
12020: LD_EXP 1
12024: PPUSH
12025: LD_EXP 7
12029: PPUSH
12030: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
12034: LD_EXP 1
12038: PPUSH
12039: LD_STRING D1-JMM-3a
12041: PPUSH
12042: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
12046: LD_EXP 7
12050: PPUSH
12051: LD_INT 38
12053: PPUSH
12054: LD_INT 5
12056: PPUSH
12057: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
12061: LD_EXP 7
12065: PPUSH
12066: LD_EXP 1
12070: PPUSH
12071: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
12075: LD_EXP 1
12079: PPUSH
12080: LD_INT 40
12082: PPUSH
12083: LD_INT 7
12085: PPUSH
12086: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12090: LD_EXP 1
12094: PPUSH
12095: LD_EXP 7
12099: PPUSH
12100: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12104: LD_EXP 7
12108: PPUSH
12109: LD_STRING D1-Brown-3
12111: PPUSH
12112: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12116: LD_EXP 14
12120: PPUSH
12121: LD_STRING D1-Har-3
12123: PPUSH
12124: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12128: LD_EXP 1
12132: PPUSH
12133: LD_STRING D1-JMM-4
12135: PPUSH
12136: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12140: LD_EXP 14
12144: PPUSH
12145: LD_STRING D1-Har-4
12147: PPUSH
12148: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12152: LD_EXP 1
12156: PPUSH
12157: LD_STRING D1-JMM-5
12159: PPUSH
12160: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12164: LD_EXP 14
12168: PPUSH
12169: LD_STRING D1-Har-5
12171: PPUSH
12172: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12176: LD_EXP 1
12180: PPUSH
12181: LD_STRING D1-JMM-6
12183: PPUSH
12184: CALL_OW 88
// end ; InGameOff ;
12188: CALL_OW 9
// PrepareRussianConvoy ;
12192: CALL 3088 0 0
// ChangeMissionObjectives ( M1 ) ;
12196: LD_STRING M1
12198: PPUSH
12199: CALL_OW 337
// SaveForQuickRestart ;
12203: CALL_OW 22
// timerStatus = 1 ;
12207: LD_ADDR_EXP 29
12211: PUSH
12212: LD_INT 1
12214: ST_TO_ADDR
// startTimer = 1 ;
12215: LD_ADDR_EXP 30
12219: PUSH
12220: LD_INT 1
12222: ST_TO_ADDR
// bonusAvalaible = 1 ;
12223: LD_ADDR_EXP 43
12227: PUSH
12228: LD_INT 1
12230: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12231: LD_INT 105
12233: PPUSH
12234: CALL_OW 67
// DialogueOn ;
12238: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12242: LD_EXP 12
12246: PPUSH
12247: LD_STRING D9-Mech1-1
12249: PPUSH
12250: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12254: LD_EXP 1
12258: PPUSH
12259: LD_STRING D9-JMM-1
12261: PPUSH
12262: CALL_OW 88
// DialogueOff ;
12266: CALL_OW 7
// end ;
12270: PPOPN 4
12272: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
12273: LD_INT 47
12275: PPUSH
12276: LD_INT 1
12278: PPUSH
12279: CALL_OW 321
12283: PUSH
12284: LD_INT 2
12286: EQUAL
12287: PUSH
12288: LD_INT 22
12290: PUSH
12291: LD_INT 1
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: LD_INT 21
12300: PUSH
12301: LD_INT 3
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PUSH
12308: LD_INT 30
12310: PUSH
12311: LD_INT 3
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 69
12327: PUSH
12328: LD_INT 0
12330: GREATER
12331: AND
12332: IFFALSE 12562
12334: GO 12336
12336: DISABLE
// begin if IsOk ( Campell ) then
12337: LD_EXP 12
12341: PPUSH
12342: CALL_OW 302
12346: IFFALSE 12362
// begin Say ( Campell , D10-Mech1-1 ) ;
12348: LD_EXP 12
12352: PPUSH
12353: LD_STRING D10-Mech1-1
12355: PPUSH
12356: CALL_OW 88
// end else
12360: GO 12562
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12362: LD_INT 22
12364: PUSH
12365: LD_INT 1
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: LD_INT 21
12374: PUSH
12375: LD_INT 1
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: LD_INT 25
12384: PUSH
12385: LD_INT 3
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PUSH
12392: LD_INT 26
12394: PUSH
12395: LD_INT 1
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: PPUSH
12408: CALL_OW 69
12412: PUSH
12413: LD_EXP 1
12417: PUSH
12418: EMPTY
12419: LIST
12420: PUSH
12421: LD_INT 0
12423: GREATER
12424: DIFF
12425: IFFALSE 12499
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12427: LD_INT 22
12429: PUSH
12430: LD_INT 1
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 21
12439: PUSH
12440: LD_INT 1
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 25
12449: PUSH
12450: LD_INT 3
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: PUSH
12457: LD_INT 26
12459: PUSH
12460: LD_INT 1
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: PPUSH
12473: CALL_OW 69
12477: PUSH
12478: LD_EXP 1
12482: PUSH
12483: EMPTY
12484: LIST
12485: DIFF
12486: PPUSH
12487: LD_STRING D10-Mech1-1
12489: PPUSH
12490: LD_STRING D10-Mech1-1
12492: PPUSH
12493: CALL 4346 0 3
// end else
12497: GO 12562
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12499: LD_INT 22
12501: PUSH
12502: LD_INT 1
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: LD_INT 21
12511: PUSH
12512: LD_INT 1
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PUSH
12519: LD_INT 26
12521: PUSH
12522: LD_INT 1
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 1
12536: ARRAY
12537: PPUSH
12538: CALL_OW 69
12542: PUSH
12543: LD_EXP 1
12547: PUSH
12548: EMPTY
12549: LIST
12550: DIFF
12551: PPUSH
12552: LD_STRING D10-Mech1-1
12554: PPUSH
12555: LD_STRING D10-Mech1-1
12557: PPUSH
12558: CALL 4346 0 3
// end ; end ; end ;
12562: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12563: LD_INT 22
12565: PUSH
12566: LD_INT 1
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 30
12575: PUSH
12576: LD_INT 32
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PPUSH
12587: CALL_OW 69
12591: PUSH
12592: LD_INT 0
12594: GREATER
12595: PUSH
12596: LD_EXP 32
12600: PUSH
12601: LD_INT 0
12603: EQUAL
12604: AND
12605: IFFALSE 12845
12607: GO 12609
12609: DISABLE
// begin if IsOK ( Claptopn ) then
12610: LD_EXP 11
12614: PPUSH
12615: CALL_OW 302
12619: IFFALSE 12635
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12621: LD_EXP 11
12625: PPUSH
12626: LD_STRING D9b-Eng1-1
12628: PPUSH
12629: CALL_OW 88
// end else
12633: GO 12831
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12635: LD_INT 22
12637: PUSH
12638: LD_INT 1
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PUSH
12645: LD_INT 21
12647: PUSH
12648: LD_INT 1
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: LD_INT 25
12657: PUSH
12658: LD_INT 3
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: LD_INT 26
12667: PUSH
12668: LD_INT 1
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: PPUSH
12681: CALL_OW 69
12685: PUSH
12686: LD_EXP 1
12690: PUSH
12691: EMPTY
12692: LIST
12693: PUSH
12694: LD_INT 0
12696: GREATER
12697: DIFF
12698: IFFALSE 12772
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12700: LD_INT 22
12702: PUSH
12703: LD_INT 1
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 21
12712: PUSH
12713: LD_INT 1
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 25
12722: PUSH
12723: LD_INT 2
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PUSH
12730: LD_INT 26
12732: PUSH
12733: LD_INT 1
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: PPUSH
12746: CALL_OW 69
12750: PUSH
12751: LD_EXP 1
12755: PUSH
12756: EMPTY
12757: LIST
12758: DIFF
12759: PPUSH
12760: LD_STRING D9b-Eng1-1
12762: PPUSH
12763: LD_STRING D9b-Eng1-11
12765: PPUSH
12766: CALL 4346 0 3
// end else
12770: GO 12831
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12772: LD_INT 22
12774: PUSH
12775: LD_INT 1
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: LD_INT 21
12784: PUSH
12785: LD_INT 1
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PUSH
12792: LD_INT 26
12794: PUSH
12795: LD_INT 1
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: LIST
12806: PPUSH
12807: CALL_OW 69
12811: PUSH
12812: LD_EXP 1
12816: PUSH
12817: EMPTY
12818: LIST
12819: DIFF
12820: PPUSH
12821: LD_STRING D9b-Eng1-1
12823: PPUSH
12824: LD_STRING D9b-Eng1-1
12826: PPUSH
12827: CALL 4346 0 3
// end ; end ; if energyVDialog = 0 then
12831: LD_EXP 33
12835: PUSH
12836: LD_INT 0
12838: EQUAL
12839: IFFALSE 12845
// EnergyDialog ;
12841: CALL 4770 0 0
// end ;
12845: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12846: LD_EXP 34
12850: PUSH
12851: LD_INT 1
12853: EQUAL
12854: PUSH
12855: LD_EXP 35
12859: PUSH
12860: LD_INT 1
12862: EQUAL
12863: AND
12864: IFFALSE 12876
12866: GO 12868
12868: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12869: LD_STRING M1a
12871: PPUSH
12872: CALL_OW 337
12876: END
// every 3 3$0 do
12877: GO 12879
12879: DISABLE
// begin PrepareFirstAttack ;
12880: CALL 3888 0 0
// end ;
12884: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
12885: LD_INT 22
12887: PUSH
12888: LD_INT 5
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: LD_INT 21
12897: PUSH
12898: LD_INT 1
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 3
12907: PUSH
12908: LD_INT 24
12910: PUSH
12911: LD_INT 250
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 69
12931: PUSH
12932: LD_INT 0
12934: GREATER
12935: PUSH
12936: LD_EXP 23
12940: PUSH
12941: LD_INT 1
12943: EQUAL
12944: AND
12945: IFFALSE 13246
12947: GO 12949
12949: DISABLE
12950: LD_INT 0
12952: PPUSH
// begin firstRussianAttack = 2 ;
12953: LD_ADDR_EXP 23
12957: PUSH
12958: LD_INT 2
12960: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
12961: LD_INT 22
12963: PUSH
12964: LD_INT 5
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PUSH
12971: LD_INT 21
12973: PUSH
12974: LD_INT 1
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PPUSH
12985: CALL_OW 69
12989: PPUSH
12990: LD_INT 125
12992: PPUSH
12993: LD_INT 98
12995: PPUSH
12996: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
13000: LD_INT 22
13002: PUSH
13003: LD_INT 1
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 21
13012: PUSH
13013: LD_INT 1
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PPUSH
13024: CALL_OW 69
13028: PUSH
13029: LD_EXP 1
13033: PUSH
13034: LD_EXP 7
13038: PUSH
13039: LD_EXP 4
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: LIST
13048: DIFF
13049: PPUSH
13050: LD_STRING DAtt1-Sol1-1
13052: PPUSH
13053: LD_STRING DAtt1-FSol1-1
13055: PPUSH
13056: CALL 4346 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
13060: LD_EXP 1
13064: PPUSH
13065: LD_STRING DAtt1-JMM-1
13067: PPUSH
13068: CALL_OW 88
// if Lisa then
13072: LD_EXP 4
13076: IFFALSE 13092
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
13078: LD_EXP 4
13082: PPUSH
13083: LD_STRING DAtt1a-Lisa-1
13085: PPUSH
13086: CALL_OW 88
// end else
13090: GO 13163
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13092: LD_INT 22
13094: PUSH
13095: LD_INT 1
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PUSH
13102: LD_INT 21
13104: PUSH
13105: LD_INT 1
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: PUSH
13112: LD_INT 26
13114: PUSH
13115: LD_INT 1
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: LIST
13126: PPUSH
13127: CALL_OW 69
13131: PUSH
13132: LD_EXP 1
13136: PUSH
13137: LD_EXP 7
13141: PUSH
13142: LD_EXP 4
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: LIST
13151: DIFF
13152: PPUSH
13153: LD_STRING DAtt1a-Sol1-1
13155: PPUSH
13156: LD_STRING DAtt1-FSol1-1
13158: PPUSH
13159: CALL 4346 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13163: LD_EXP 1
13167: PPUSH
13168: LD_STRING DAtt1a-JMM-1
13170: PPUSH
13171: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13175: LD_INT 22
13177: PUSH
13178: LD_INT 1
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: PUSH
13185: LD_INT 21
13187: PUSH
13188: LD_INT 1
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PUSH
13195: LD_INT 26
13197: PUSH
13198: LD_INT 1
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: LIST
13209: PPUSH
13210: CALL_OW 69
13214: PUSH
13215: LD_EXP 1
13219: PUSH
13220: LD_EXP 7
13224: PUSH
13225: LD_EXP 4
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: LIST
13234: DIFF
13235: PPUSH
13236: LD_STRING DAtt1b-Sol1-1
13238: PPUSH
13239: LD_STRING DAtt1a-Sol1-1
13241: PPUSH
13242: CALL 4346 0 3
// end ;
13246: PPOPN 1
13248: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13249: LD_EXP 23
13253: PUSH
13254: LD_INT 2
13256: EQUAL
13257: IFFALSE 13319
13259: GO 13261
13261: DISABLE
13262: LD_INT 0
13264: PPUSH
// begin enable ;
13265: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13266: LD_ADDR_VAR 0 1
13270: PUSH
13271: LD_INT 5
13273: PPUSH
13274: LD_INT 22
13276: PUSH
13277: LD_INT 5
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: LD_INT 21
13286: PUSH
13287: LD_INT 1
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PPUSH
13298: CALL_OW 70
13302: PUSH
13303: FOR_IN
13304: IFFALSE 13317
// RemoveUnit ( i ) ;
13306: LD_VAR 0 1
13310: PPUSH
13311: CALL_OW 64
13315: GO 13303
13317: POP
13318: POP
// end ;
13319: PPOPN 1
13321: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13322: LD_INT 22
13324: PUSH
13325: LD_INT 5
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: EMPTY
13333: LIST
13334: PPUSH
13335: CALL_OW 69
13339: PUSH
13340: LD_INT 0
13342: EQUAL
13343: PUSH
13344: LD_EXP 23
13348: PUSH
13349: LD_INT 2
13351: EQUAL
13352: AND
13353: IFFALSE 13366
13355: GO 13357
13357: DISABLE
// firstRussianAttack = 3 ;
13358: LD_ADDR_EXP 23
13362: PUSH
13363: LD_INT 3
13365: ST_TO_ADDR
13366: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13367: LD_EXP 28
13371: PUSH
13372: LD_INT 0
13374: EQUAL
13375: IFFALSE 13456
13377: GO 13379
13379: DISABLE
// begin timerStatus = 4 ;
13380: LD_ADDR_EXP 29
13384: PUSH
13385: LD_INT 4
13387: ST_TO_ADDR
// DialogueOn ;
13388: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13392: LD_EXP 13
13396: PPUSH
13397: LD_STRING D2-Don-1
13399: PPUSH
13400: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13404: LD_EXP 1
13408: PPUSH
13409: LD_STRING D2-JMM-1
13411: PPUSH
13412: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13416: LD_EXP 13
13420: PPUSH
13421: LD_STRING D2-Don-2
13423: PPUSH
13424: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13428: LD_EXP 1
13432: PPUSH
13433: LD_STRING D2-JMM-2
13435: PPUSH
13436: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13440: LD_EXP 13
13444: PPUSH
13445: LD_STRING D2-Don-3
13447: PPUSH
13448: CALL_OW 94
// DialogueOff ;
13452: CALL_OW 7
// end ;
13456: END
// every 12 12$0 do var tmp ;
13457: GO 13459
13459: DISABLE
13460: LD_INT 0
13462: PPUSH
// begin PrepareDonaldsonArmy ;
13463: CALL 1142 0 0
// CenterNowOnUnits ( Donaldson ) ;
13467: LD_EXP 13
13471: PPUSH
13472: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13476: LD_ADDR_VAR 0 1
13480: PUSH
13481: LD_INT 22
13483: PUSH
13484: LD_INT 4
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: LD_INT 21
13493: PUSH
13494: LD_INT 1
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: LD_INT 26
13503: PUSH
13504: LD_INT 1
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 25
13513: PUSH
13514: LD_INT 1
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: PPUSH
13527: CALL_OW 69
13531: PUSH
13532: LD_EXP 5
13536: PUSH
13537: EMPTY
13538: LIST
13539: DIFF
13540: ST_TO_ADDR
// DialogueOn ;
13541: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13545: LD_VAR 0 1
13549: PPUSH
13550: LD_STRING D3-Sol1-1
13552: PPUSH
13553: LD_STRING D3-Sol1-1
13555: PPUSH
13556: CALL 4346 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13560: LD_INT 22
13562: PUSH
13563: LD_INT 4
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 21
13572: PUSH
13573: LD_INT 1
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 26
13582: PUSH
13583: LD_INT 1
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 25
13592: PUSH
13593: LD_INT 3
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: PPUSH
13606: CALL_OW 69
13610: PPUSH
13611: LD_STRING D3-Sol2-1
13613: PPUSH
13614: LD_STRING D3-Sol2-1
13616: PPUSH
13617: CALL 4346 0 3
// if Frank then
13621: LD_EXP 5
13625: IFFALSE 13639
// Say ( Frank , D3-Frank-1 ) ;
13627: LD_EXP 5
13631: PPUSH
13632: LD_STRING D3-Frank-1
13634: PPUSH
13635: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13639: LD_EXP 13
13643: PPUSH
13644: LD_STRING D3-Don-1
13646: PPUSH
13647: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13651: LD_EXP 13
13655: PPUSH
13656: LD_STRING D3-Don-1a
13658: PPUSH
13659: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13663: LD_EXP 1
13667: PPUSH
13668: LD_STRING D3-JMM-1
13670: PPUSH
13671: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13675: LD_EXP 13
13679: PPUSH
13680: LD_STRING D3-Don-2
13682: PPUSH
13683: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13687: LD_INT 22
13689: PUSH
13690: LD_INT 6
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: LD_INT 21
13699: PUSH
13700: LD_INT 1
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PPUSH
13711: CALL_OW 69
13715: PUSH
13716: LD_INT 0
13718: GREATER
13719: IFFALSE 13857
// begin Say ( JMM , D3-JMM-2 ) ;
13721: LD_EXP 1
13725: PPUSH
13726: LD_STRING D3-JMM-2
13728: PPUSH
13729: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13733: LD_EXP 13
13737: PPUSH
13738: LD_STRING D3-Don-3
13740: PPUSH
13741: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13745: LD_EXP 1
13749: PPUSH
13750: LD_STRING D3-JMM-3
13752: PPUSH
13753: CALL_OW 88
// if IsOK ( Frank ) then
13757: LD_EXP 5
13761: PPUSH
13762: CALL_OW 302
13766: IFFALSE 13780
// Say ( Frank , D3-Frank-3 ) ;
13768: LD_EXP 5
13772: PPUSH
13773: LD_STRING D3-Frank-3
13775: PPUSH
13776: CALL_OW 88
// DialogueOff ;
13780: CALL_OW 7
// if IsOK ( Frank ) then
13784: LD_EXP 5
13788: PPUSH
13789: CALL_OW 302
13793: IFFALSE 13855
// begin SetSide ( Frank , 0 ) ;
13795: LD_EXP 5
13799: PPUSH
13800: LD_INT 0
13802: PPUSH
13803: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13807: LD_EXP 5
13811: PPUSH
13812: LD_INT 12
13814: PPUSH
13815: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
13819: LD_EXP 5
13823: PPUSH
13824: LD_STRING 04t_Frank
13826: PPUSH
13827: CALL_OW 38
// Wait ( 0 0$3 ) ;
13831: LD_INT 105
13833: PPUSH
13834: CALL_OW 67
// frankScoutBase = 1 ;
13838: LD_ADDR_EXP 25
13842: PUSH
13843: LD_INT 1
13845: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13846: LD_EXP 5
13850: PPUSH
13851: CALL_OW 64
// end ; end else
13855: GO 13944
// begin Say ( JMM , D3-JMM-4 ) ;
13857: LD_EXP 1
13861: PPUSH
13862: LD_STRING D3-JMM-4
13864: PPUSH
13865: CALL_OW 88
// DialogueOff ;
13869: CALL_OW 7
// if IsOK ( Frank ) then
13873: LD_EXP 5
13877: PPUSH
13878: CALL_OW 302
13882: IFFALSE 13944
// begin SetSide ( Frank , 0 ) ;
13884: LD_EXP 5
13888: PPUSH
13889: LD_INT 0
13891: PPUSH
13892: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13896: LD_EXP 5
13900: PPUSH
13901: LD_INT 12
13903: PPUSH
13904: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
13908: LD_EXP 5
13912: PPUSH
13913: LD_STRING 04t_Frank
13915: PPUSH
13916: CALL_OW 38
// Wait ( 0 0$3 ) ;
13920: LD_INT 105
13922: PPUSH
13923: CALL_OW 67
// frankScoutBase = 1 ;
13927: LD_ADDR_EXP 25
13931: PUSH
13932: LD_INT 1
13934: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13935: LD_EXP 5
13939: PPUSH
13940: CALL_OW 64
// end ; end ; end ;
13944: PPOPN 1
13946: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13947: LD_EXP 13
13951: PPUSH
13952: CALL_OW 255
13956: PUSH
13957: LD_INT 4
13959: EQUAL
13960: PUSH
13961: LD_EXP 13
13965: PPUSH
13966: CALL_OW 302
13970: AND
13971: IFFALSE 13996
13973: GO 13975
13975: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13976: LD_EXP 13
13980: PPUSH
13981: LD_STRING D3b-Don-1
13983: PPUSH
13984: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13988: LD_ADDR_EXP 41
13992: PUSH
13993: LD_INT 1
13995: ST_TO_ADDR
// end ;
13996: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13997: LD_EXP 24
14001: PUSH
14002: LD_INT 0
14004: EQUAL
14005: IFFALSE 14161
14007: GO 14009
14009: DISABLE
14010: LD_INT 0
14012: PPUSH
14013: PPUSH
// begin enable ;
14014: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
14015: LD_ADDR_VAR 0 1
14019: PUSH
14020: LD_INT 22
14022: PUSH
14023: LD_INT 4
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 21
14032: PUSH
14033: LD_INT 1
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PPUSH
14044: CALL_OW 69
14048: PUSH
14049: FOR_IN
14050: IFFALSE 14159
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
14052: LD_ADDR_VAR 0 2
14056: PUSH
14057: LD_INT 22
14059: PUSH
14060: LD_INT 1
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: PUSH
14067: LD_INT 21
14069: PUSH
14070: LD_INT 1
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PPUSH
14081: CALL_OW 69
14085: PUSH
14086: FOR_IN
14087: IFFALSE 14155
// begin if GetDistUnits ( i , j ) < 7 then
14089: LD_VAR 0 1
14093: PPUSH
14094: LD_VAR 0 2
14098: PPUSH
14099: CALL_OW 296
14103: PUSH
14104: LD_INT 7
14106: LESS
14107: IFFALSE 14153
// begin saveDonaldson = 1 ;
14109: LD_ADDR_EXP 24
14113: PUSH
14114: LD_INT 1
14116: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
14117: LD_INT 22
14119: PUSH
14120: LD_INT 4
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 21
14129: PUSH
14130: LD_INT 1
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PPUSH
14141: CALL_OW 69
14145: PPUSH
14146: LD_INT 1
14148: PPUSH
14149: CALL_OW 235
// end ; end ;
14153: GO 14086
14155: POP
14156: POP
// end ;
14157: GO 14049
14159: POP
14160: POP
// end ;
14161: PPOPN 2
14163: END
// every 0 0$1 trigger frankScoutBase do
14164: LD_EXP 25
14168: IFFALSE 14533
14170: GO 14172
14172: DISABLE
// begin wait ( 2 2$30 ) ;
14173: LD_INT 5250
14175: PPUSH
14176: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14180: LD_INT 35
14182: PPUSH
14183: CALL_OW 67
// until not FilterAllUnits ( [ [ f_enemy , 4 ] , [ f_distxy , 84 , 28 , 22 ] ] ) ;
14187: LD_INT 81
14189: PUSH
14190: LD_INT 4
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 92
14199: PUSH
14200: LD_INT 84
14202: PUSH
14203: LD_INT 28
14205: PUSH
14206: LD_INT 22
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PPUSH
14219: CALL_OW 69
14223: NOT
14224: IFFALSE 14180
// uc_side = 4 ;
14226: LD_ADDR_OWVAR 20
14230: PUSH
14231: LD_INT 4
14233: ST_TO_ADDR
// uc_nation = 1 ;
14234: LD_ADDR_OWVAR 21
14238: PUSH
14239: LD_INT 1
14241: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
14242: LD_ADDR_EXP 5
14246: PUSH
14247: LD_STRING 04t_Frank
14249: PPUSH
14250: CALL_OW 34
14254: ST_TO_ADDR
// if not Frank then
14255: LD_EXP 5
14259: NOT
14260: IFFALSE 14264
// exit ;
14262: GO 14533
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14264: LD_EXP 5
14268: PPUSH
14269: LD_INT 13
14271: PPUSH
14272: LD_INT 0
14274: PPUSH
14275: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14279: LD_INT 35
14281: PPUSH
14282: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
14286: LD_EXP 1
14290: PPUSH
14291: CALL_OW 310
14295: NOT
14296: PUSH
14297: LD_EXP 1
14301: PPUSH
14302: LD_INT 4
14304: PPUSH
14305: CALL_OW 296
14309: PUSH
14310: LD_INT 20
14312: LESS
14313: AND
14314: IFFALSE 14347
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14316: LD_EXP 5
14320: PPUSH
14321: LD_EXP 1
14325: PPUSH
14326: CALL_OW 250
14330: PPUSH
14331: LD_EXP 1
14335: PPUSH
14336: CALL_OW 251
14340: PPUSH
14341: CALL_OW 111
14345: GO 14362
// ComMoveXY ( Frank , 51 , 15 ) ;
14347: LD_EXP 5
14351: PPUSH
14352: LD_INT 51
14354: PPUSH
14355: LD_INT 15
14357: PPUSH
14358: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14362: LD_EXP 5
14366: PPUSH
14367: LD_EXP 1
14371: PPUSH
14372: CALL_OW 296
14376: PUSH
14377: LD_INT 10
14379: LESS
14380: IFFALSE 14279
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14382: LD_EXP 1
14386: PUSH
14387: LD_EXP 5
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PPUSH
14396: CALL_OW 87
// DialogueOn ;
14400: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14404: LD_EXP 5
14408: PPUSH
14409: LD_STRING D3a-Frank-1
14411: PPUSH
14412: CALL_OW 88
// if Lisa then
14416: LD_EXP 4
14420: IFFALSE 14470
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14422: LD_EXP 4
14426: PPUSH
14427: LD_STRING D3a-Lisa-1
14429: PPUSH
14430: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14434: LD_EXP 5
14438: PPUSH
14439: LD_STRING D3a-Frank-2
14441: PPUSH
14442: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14446: LD_EXP 4
14450: PPUSH
14451: LD_STRING D3a-Lisa-2
14453: PPUSH
14454: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14458: LD_EXP 5
14462: PPUSH
14463: LD_STRING D3a-Frank-3
14465: PPUSH
14466: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14470: LD_EXP 1
14474: PPUSH
14475: LD_STRING D3a-JMM-3
14477: PPUSH
14478: CALL_OW 88
// DialogueOff ;
14482: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14486: LD_EXP 5
14490: PPUSH
14491: LD_INT 1
14493: PPUSH
14494: CALL_OW 235
// InGameOn ;
14498: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14502: LD_INT 1
14504: PPUSH
14505: LD_INT 7
14507: PPUSH
14508: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14512: LD_INT 93
14514: PPUSH
14515: LD_INT 91
14517: PPUSH
14518: CALL_OW 84
// wait ( 0 0$5 ) ;
14522: LD_INT 175
14524: PPUSH
14525: CALL_OW 67
// InGameOff ;
14529: CALL_OW 9
// end ;
14533: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
14534: LD_OWVAR 67
14538: PUSH
14539: LD_INT 2
14541: EQUAL
14542: PUSH
14543: LD_OWVAR 67
14547: PUSH
14548: LD_INT 3
14550: EQUAL
14551: OR
14552: IFFALSE 14576
14554: GO 14556
14556: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14557: LD_INT 24
14559: PPUSH
14560: LD_INT 24
14562: PPUSH
14563: LD_INT 1
14565: PPUSH
14566: LD_INT 1
14568: PPUSH
14569: LD_INT 53
14571: PPUSH
14572: CALL_OW 125
14576: END
// every 18 18$0 do
14577: GO 14579
14579: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14580: LD_EXP 14
14584: PPUSH
14585: LD_STRING D4-Har-1
14587: PPUSH
14588: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14592: LD_EXP 1
14596: PPUSH
14597: LD_STRING D4-JMM-1
14599: PPUSH
14600: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14604: LD_EXP 14
14608: PPUSH
14609: LD_STRING D4-Har-2
14611: PPUSH
14612: CALL_OW 94
// case query ( Q1 ) of 1 :
14616: LD_STRING Q1
14618: PPUSH
14619: CALL_OW 97
14623: PUSH
14624: LD_INT 1
14626: DOUBLE
14627: EQUAL
14628: IFTRUE 14632
14630: GO 14691
14632: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14633: LD_EXP 1
14637: PPUSH
14638: LD_STRING D5-JMM-1
14640: PPUSH
14641: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14645: LD_EXP 14
14649: PPUSH
14650: LD_STRING D5-Har-1
14652: PPUSH
14653: CALL_OW 94
// timeToSupport = 10 10$0 ;
14657: LD_ADDR_EXP 28
14661: PUSH
14662: LD_INT 21000
14664: ST_TO_ADDR
// timerStatus = 2 ;
14665: LD_ADDR_EXP 29
14669: PUSH
14670: LD_INT 2
14672: ST_TO_ADDR
// startTimer = 1 ;
14673: LD_ADDR_EXP 30
14677: PUSH
14678: LD_INT 1
14680: ST_TO_ADDR
// harrAnswer = 1 ;
14681: LD_ADDR_EXP 26
14685: PUSH
14686: LD_INT 1
14688: ST_TO_ADDR
// end ; 2 :
14689: GO 14826
14691: LD_INT 2
14693: DOUBLE
14694: EQUAL
14695: IFTRUE 14699
14697: GO 14758
14699: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14700: LD_EXP 1
14704: PPUSH
14705: LD_STRING D5-JMM-2
14707: PPUSH
14708: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14712: LD_EXP 14
14716: PPUSH
14717: LD_STRING D5-Har-2
14719: PPUSH
14720: CALL_OW 94
// timeToSupport = 5 5$0 ;
14724: LD_ADDR_EXP 28
14728: PUSH
14729: LD_INT 10500
14731: ST_TO_ADDR
// timerStatus = 2 ;
14732: LD_ADDR_EXP 29
14736: PUSH
14737: LD_INT 2
14739: ST_TO_ADDR
// startTimer = 1 ;
14740: LD_ADDR_EXP 30
14744: PUSH
14745: LD_INT 1
14747: ST_TO_ADDR
// harrAnswer = 2 ;
14748: LD_ADDR_EXP 26
14752: PUSH
14753: LD_INT 2
14755: ST_TO_ADDR
// end ; 3 :
14756: GO 14826
14758: LD_INT 3
14760: DOUBLE
14761: EQUAL
14762: IFTRUE 14766
14764: GO 14825
14766: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14767: LD_EXP 1
14771: PPUSH
14772: LD_STRING D5-JMM-3
14774: PPUSH
14775: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14779: LD_EXP 14
14783: PPUSH
14784: LD_STRING D5-Har-3
14786: PPUSH
14787: CALL_OW 94
// timeToSupport = 5 5$0 ;
14791: LD_ADDR_EXP 28
14795: PUSH
14796: LD_INT 10500
14798: ST_TO_ADDR
// timerStatus = 2 ;
14799: LD_ADDR_EXP 29
14803: PUSH
14804: LD_INT 2
14806: ST_TO_ADDR
// startTimer = 1 ;
14807: LD_ADDR_EXP 30
14811: PUSH
14812: LD_INT 1
14814: ST_TO_ADDR
// harrAnswer = 3 ;
14815: LD_ADDR_EXP 26
14819: PUSH
14820: LD_INT 3
14822: ST_TO_ADDR
// end ; end ;
14823: GO 14826
14825: POP
// end ;
14826: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14827: LD_EXP 29
14831: PUSH
14832: LD_INT 2
14834: EQUAL
14835: PUSH
14836: LD_EXP 28
14840: PUSH
14841: LD_INT 0
14843: EQUAL
14844: AND
14845: IFFALSE 15122
14847: GO 14849
14849: DISABLE
// begin timerStatus = 4 ;
14850: LD_ADDR_EXP 29
14854: PUSH
14855: LD_INT 4
14857: ST_TO_ADDR
// if harrAnswer = 1 then
14858: LD_EXP 26
14862: PUSH
14863: LD_INT 1
14865: EQUAL
14866: IFFALSE 14946
// begin PrepareHarrisonSupport ( 3 ) ;
14868: LD_INT 3
14870: PPUSH
14871: CALL 1712 0 1
// wait ( 1 1$0 ) ;
14875: LD_INT 2100
14877: PPUSH
14878: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14882: LD_EXP 14
14886: PPUSH
14887: LD_STRING D7-Har-1
14889: PPUSH
14890: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14894: LD_STRING M2
14896: PPUSH
14897: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14901: LD_ADDR_EXP 27
14905: PUSH
14906: LD_INT 31500
14908: PUSH
14909: LD_INT 10500
14911: PUSH
14912: LD_INT 8400
14914: PUSH
14915: LD_INT 6300
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: LIST
14922: PUSH
14923: LD_OWVAR 67
14927: ARRAY
14928: PLUS
14929: ST_TO_ADDR
// startTimer = 1 ;
14930: LD_ADDR_EXP 30
14934: PUSH
14935: LD_INT 1
14937: ST_TO_ADDR
// timerStatus = 3 ;
14938: LD_ADDR_EXP 29
14942: PUSH
14943: LD_INT 3
14945: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14946: LD_EXP 26
14950: PUSH
14951: LD_INT 2
14953: EQUAL
14954: IFFALSE 15034
// begin PrepareHarrisonSupport ( 4 ) ;
14956: LD_INT 4
14958: PPUSH
14959: CALL 1712 0 1
// wait ( 1 1$0 ) ;
14963: LD_INT 2100
14965: PPUSH
14966: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14970: LD_EXP 14
14974: PPUSH
14975: LD_STRING D7-Har-1
14977: PPUSH
14978: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14982: LD_STRING M2
14984: PPUSH
14985: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14989: LD_ADDR_EXP 27
14993: PUSH
14994: LD_INT 27300
14996: PUSH
14997: LD_INT 8400
14999: PUSH
15000: LD_INT 8400
15002: PUSH
15003: LD_INT 6300
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: LIST
15010: PUSH
15011: LD_OWVAR 67
15015: ARRAY
15016: PLUS
15017: ST_TO_ADDR
// startTimer = 1 ;
15018: LD_ADDR_EXP 30
15022: PUSH
15023: LD_INT 1
15025: ST_TO_ADDR
// timerStatus = 3 ;
15026: LD_ADDR_EXP 29
15030: PUSH
15031: LD_INT 3
15033: ST_TO_ADDR
// end ; if harrAnswer = 3 then
15034: LD_EXP 26
15038: PUSH
15039: LD_INT 3
15041: EQUAL
15042: IFFALSE 15122
// begin PrepareHarrisonSupport ( 5 ) ;
15044: LD_INT 5
15046: PPUSH
15047: CALL 1712 0 1
// wait ( 1 1$0 ) ;
15051: LD_INT 2100
15053: PPUSH
15054: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15058: LD_EXP 14
15062: PPUSH
15063: LD_STRING D7-Har-1
15065: PPUSH
15066: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15070: LD_STRING M2
15072: PPUSH
15073: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
15077: LD_ADDR_EXP 27
15081: PUSH
15082: LD_INT 21000
15084: PUSH
15085: LD_INT 8400
15087: PUSH
15088: LD_INT 6300
15090: PUSH
15091: LD_INT 4200
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: LIST
15098: PUSH
15099: LD_OWVAR 67
15103: ARRAY
15104: PLUS
15105: ST_TO_ADDR
// startTimer = 1 ;
15106: LD_ADDR_EXP 30
15110: PUSH
15111: LD_INT 1
15113: ST_TO_ADDR
// timerStatus = 3 ;
15114: LD_ADDR_EXP 29
15118: PUSH
15119: LD_INT 3
15121: ST_TO_ADDR
// end ; end ;
15122: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
15123: LD_EXP 27
15127: PUSH
15128: LD_INT 8400
15130: LESSEQUAL
15131: PUSH
15132: LD_EXP 29
15136: PUSH
15137: LD_INT 3
15139: EQUAL
15140: AND
15141: IFFALSE 15173
15143: GO 15145
15145: DISABLE
// begin DialogueOn ;
15146: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15150: LD_EXP 14
15154: PPUSH
15155: LD_STRING D7a-Har-1
15157: PPUSH
15158: CALL_OW 94
// DialogueOff ;
15162: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15166: LD_STRING M2a
15168: PPUSH
15169: CALL_OW 337
// end ;
15173: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
15174: LD_EXP 27
15178: PUSH
15179: LD_INT 0
15181: LESSEQUAL
15182: PUSH
15183: LD_EXP 29
15187: PUSH
15188: LD_INT 3
15190: EQUAL
15191: AND
15192: PUSH
15193: LD_EXP 40
15197: NOT
15198: AND
15199: IFFALSE 15338
15201: GO 15203
15203: DISABLE
15204: LD_INT 0
15206: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15207: LD_ADDR_VAR 0 1
15211: PUSH
15212: LD_INT 22
15214: PUSH
15215: LD_INT 1
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PPUSH
15222: CALL_OW 69
15226: PUSH
15227: LD_EXP 1
15231: PUSH
15232: EMPTY
15233: LIST
15234: DIFF
15235: ST_TO_ADDR
// saveDonaldson = 2 ;
15236: LD_ADDR_EXP 24
15240: PUSH
15241: LD_INT 2
15243: ST_TO_ADDR
// DialogueOn ;
15244: CALL_OW 6
// if IsOK ( Donaldson ) then
15248: LD_EXP 13
15252: PPUSH
15253: CALL_OW 302
15257: IFFALSE 15273
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15259: LD_EXP 14
15263: PPUSH
15264: LD_STRING D8-Har-1
15266: PPUSH
15267: CALL_OW 94
// end else
15271: GO 15285
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15273: LD_EXP 14
15277: PPUSH
15278: LD_STRING D8-Har-1a
15280: PPUSH
15281: CALL_OW 94
// end ; DialogueOff ;
15285: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15289: LD_VAR 0 1
15293: PPUSH
15294: LD_INT 4
15296: PPUSH
15297: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15301: LD_VAR 0 1
15305: PPUSH
15306: LD_INT 88
15308: PPUSH
15309: LD_INT 89
15311: PPUSH
15312: CALL_OW 114
// honor = 0 ;
15316: LD_ADDR_EXP 39
15320: PUSH
15321: LD_INT 0
15323: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15324: LD_INT 350
15326: PPUSH
15327: CALL_OW 67
// YouLost ( LostCommand ) ;
15331: LD_STRING LostCommand
15333: PPUSH
15334: CALL_OW 104
// end ;
15338: PPOPN 1
15340: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15341: LD_INT 22
15343: PUSH
15344: LD_INT 6
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 21
15353: PUSH
15354: LD_INT 1
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PPUSH
15365: CALL_OW 69
15369: PUSH
15370: LD_INT 0
15372: EQUAL
15373: PUSH
15374: LD_EXP 20
15378: PUSH
15379: LD_INT 0
15381: EQUAL
15382: AND
15383: PUSH
15384: LD_EXP 43
15388: PUSH
15389: LD_INT 1
15391: EQUAL
15392: AND
15393: IFFALSE 15487
15395: GO 15397
15397: DISABLE
15398: LD_INT 0
15400: PPUSH
15401: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15402: LD_ADDR_VAR 0 2
15406: PUSH
15407: LD_INT 22
15409: PUSH
15410: LD_INT 1
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: LD_INT 21
15419: PUSH
15420: LD_INT 1
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: LD_INT 23
15429: PUSH
15430: LD_INT 1
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: LIST
15441: PPUSH
15442: CALL_OW 69
15446: ST_TO_ADDR
// for i in tmp do
15447: LD_ADDR_VAR 0 1
15451: PUSH
15452: LD_VAR 0 2
15456: PUSH
15457: FOR_IN
15458: IFFALSE 15485
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15460: LD_VAR 0 1
15464: PPUSH
15465: LD_INT 1
15467: PPUSH
15468: LD_INT 4
15470: PPUSH
15471: CALL_OW 12
15475: PPUSH
15476: LD_INT 500
15478: PPUSH
15479: CALL_OW 492
// end ;
15483: GO 15457
15485: POP
15486: POP
// end ; end_of_file
15487: PPOPN 2
15489: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15490: GO 15492
15492: DISABLE
15493: LD_INT 0
15495: PPUSH
// begin enemyWayX = [ ] ;
15496: LD_ADDR_EXP 47
15500: PUSH
15501: EMPTY
15502: ST_TO_ADDR
// enemyWayY = [ ] ;
15503: LD_ADDR_EXP 48
15507: PUSH
15508: EMPTY
15509: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15510: LD_ADDR_VAR 0 1
15514: PUSH
15515: LD_INT 1
15517: PPUSH
15518: LD_INT 3
15520: PPUSH
15521: CALL_OW 12
15525: ST_TO_ADDR
// if rnd = 1 then
15526: LD_VAR 0 1
15530: PUSH
15531: LD_INT 1
15533: EQUAL
15534: IFFALSE 15574
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15536: LD_ADDR_EXP 47
15540: PUSH
15541: LD_INT 73
15543: PUSH
15544: LD_INT 46
15546: PUSH
15547: LD_INT 29
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: LIST
15554: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15555: LD_ADDR_EXP 48
15559: PUSH
15560: LD_INT 71
15562: PUSH
15563: LD_INT 43
15565: PUSH
15566: LD_INT 29
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: LIST
15573: ST_TO_ADDR
// end ; if rnd = 2 then
15574: LD_VAR 0 1
15578: PUSH
15579: LD_INT 2
15581: EQUAL
15582: IFFALSE 15606
// begin enemyWayX = [ 64 ] ;
15584: LD_ADDR_EXP 47
15588: PUSH
15589: LD_INT 64
15591: PUSH
15592: EMPTY
15593: LIST
15594: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15595: LD_ADDR_EXP 48
15599: PUSH
15600: LD_INT 43
15602: PUSH
15603: EMPTY
15604: LIST
15605: ST_TO_ADDR
// end ; if rnd = 3 then
15606: LD_VAR 0 1
15610: PUSH
15611: LD_INT 3
15613: EQUAL
15614: IFFALSE 15638
// begin enemyWayX = [ 80 ] ;
15616: LD_ADDR_EXP 47
15620: PUSH
15621: LD_INT 80
15623: PUSH
15624: EMPTY
15625: LIST
15626: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15627: LD_ADDR_EXP 48
15631: PUSH
15632: LD_INT 28
15634: PUSH
15635: EMPTY
15636: LIST
15637: ST_TO_ADDR
// end ; enable ;
15638: ENABLE
// end ;
15639: PPOPN 1
15641: END
// every 0 0$1 trigger AIEnable = 1 do
15642: LD_EXP 37
15646: PUSH
15647: LD_INT 1
15649: EQUAL
15650: IFFALSE 15764
15652: GO 15654
15654: DISABLE
// begin enable ;
15655: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15656: LD_INT 3
15658: PPUSH
15659: LD_INT 21
15661: PPUSH
15662: LD_INT 7
15664: PPUSH
15665: CALL 5803 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15669: LD_INT 3
15671: PPUSH
15672: LD_INT 8
15674: PPUSH
15675: LD_INT 7
15677: PPUSH
15678: LD_INT 1
15680: PPUSH
15681: CALL 6124 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15685: LD_INT 3
15687: PPUSH
15688: LD_INT 17
15690: PPUSH
15691: LD_INT 108
15693: PPUSH
15694: LD_INT 95
15696: PPUSH
15697: CALL 7448 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15701: LD_INT 3
15703: PPUSH
15704: LD_INT 23
15706: PPUSH
15707: LD_EXP 47
15711: PPUSH
15712: LD_EXP 48
15716: PPUSH
15717: CALL 6780 0 4
// if baseReadyToBuild = 2 then
15721: LD_EXP 20
15725: PUSH
15726: LD_INT 2
15728: EQUAL
15729: IFFALSE 15764
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
15731: LD_INT 6
15733: PPUSH
15734: LD_EXP 21
15738: PPUSH
15739: LD_INT 6
15741: PPUSH
15742: CALL 5803 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15746: LD_INT 6
15748: PPUSH
15749: LD_INT 9
15751: PPUSH
15752: LD_INT 6
15754: PPUSH
15755: LD_EXP 22
15759: PPUSH
15760: CALL 6124 0 4
// end ; end ;
15764: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
15765: LD_EXP 15
15769: PPUSH
15770: CALL_OW 310
15774: NOT
15775: PUSH
15776: LD_INT 21
15778: PPUSH
15779: CALL_OW 302
15783: AND
15784: PUSH
15785: LD_INT 21
15787: PPUSH
15788: CALL_OW 255
15792: PUSH
15793: LD_INT 3
15795: EQUAL
15796: AND
15797: IFFALSE 15815
15799: GO 15801
15801: DISABLE
// begin enable ;
15802: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
15803: LD_EXP 15
15807: PPUSH
15808: LD_INT 21
15810: PPUSH
15811: CALL_OW 120
// end ;
15815: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15816: LD_INT 22
15818: PUSH
15819: LD_INT 3
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 21
15828: PUSH
15829: LD_INT 2
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 55
15838: PUSH
15839: EMPTY
15840: LIST
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 69
15851: PUSH
15852: LD_INT 0
15854: EQUAL
15855: PUSH
15856: LD_INT 1
15858: PPUSH
15859: CALL_OW 255
15863: PUSH
15864: LD_INT 3
15866: EQUAL
15867: AND
15868: PUSH
15869: LD_INT 21
15871: PPUSH
15872: CALL_OW 302
15876: AND
15877: PUSH
15878: LD_INT 21
15880: PPUSH
15881: CALL_OW 255
15885: PUSH
15886: LD_INT 3
15888: EQUAL
15889: AND
15890: PUSH
15891: LD_INT 21
15893: PPUSH
15894: CALL_OW 302
15898: AND
15899: IFFALSE 16104
15901: GO 15903
15903: DISABLE
// begin enable ;
15904: ENABLE
// if Difficulty = 1 then
15905: LD_OWVAR 67
15909: PUSH
15910: LD_INT 1
15912: EQUAL
15913: IFFALSE 15957
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15915: LD_INT 3
15917: PPUSH
15918: LD_INT 24
15920: PPUSH
15921: LD_OWVAR 67
15925: PUSH
15926: LD_INT 2
15928: PLUS
15929: PPUSH
15930: LD_INT 42
15932: PUSH
15933: LD_INT 42
15935: PUSH
15936: LD_INT 43
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: LIST
15943: PPUSH
15944: LD_INT 1
15946: PPUSH
15947: LD_INT 1
15949: PPUSH
15950: LD_INT 21
15952: PPUSH
15953: CALL 6668 0 7
// if Difficulty = 2 then
15957: LD_OWVAR 67
15961: PUSH
15962: LD_INT 2
15964: EQUAL
15965: IFFALSE 16032
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15967: LD_INT 3
15969: PPUSH
15970: LD_INT 24
15972: PPUSH
15973: LD_OWVAR 67
15977: PUSH
15978: LD_INT 2
15980: PLUS
15981: PPUSH
15982: LD_INT 42
15984: PUSH
15985: LD_INT 42
15987: PUSH
15988: LD_INT 43
15990: PUSH
15991: LD_INT 43
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: PPUSH
16000: LD_INT 1
16002: PPUSH
16003: LD_INT 1
16005: PPUSH
16006: LD_INT 21
16008: PUSH
16009: LD_INT 22
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: LD_INT 1
16018: PPUSH
16019: LD_INT 2
16021: PPUSH
16022: CALL_OW 12
16026: ARRAY
16027: PPUSH
16028: CALL 6668 0 7
// if Difficulty = 3 then
16032: LD_OWVAR 67
16036: PUSH
16037: LD_INT 3
16039: EQUAL
16040: IFFALSE 16104
// BuildingVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 43 , 43 , 43 , 43 , 44 , 44 ] , 1 , 1 , 22 ) ;
16042: LD_INT 3
16044: PPUSH
16045: LD_INT 24
16047: PPUSH
16048: LD_OWVAR 67
16052: PUSH
16053: LD_INT 2
16055: PPUSH
16056: LD_INT 3
16058: PPUSH
16059: CALL_OW 12
16063: PLUS
16064: PPUSH
16065: LD_INT 43
16067: PUSH
16068: LD_INT 43
16070: PUSH
16071: LD_INT 43
16073: PUSH
16074: LD_INT 43
16076: PUSH
16077: LD_INT 44
16079: PUSH
16080: LD_INT 44
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: PPUSH
16091: LD_INT 1
16093: PPUSH
16094: LD_INT 1
16096: PPUSH
16097: LD_INT 22
16099: PPUSH
16100: CALL 6668 0 7
// end ;
16104: END
// every 0 0$1 do
16105: GO 16107
16107: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
16108: LD_INT 3
16110: PPUSH
16111: LD_INT 1
16113: PPUSH
16114: LD_INT 3
16116: PPUSH
16117: CALL 5718 0 3
16121: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
16122: LD_EXP 20
16126: PUSH
16127: LD_INT 1
16129: EQUAL
16130: IFFALSE 16277
16132: GO 16134
16134: DISABLE
16135: LD_INT 0
16137: PPUSH
16138: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16139: LD_ADDR_VAR 0 2
16143: PUSH
16144: LD_INT 22
16146: PUSH
16147: LD_INT 6
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 21
16156: PUSH
16157: LD_INT 2
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 34
16166: PUSH
16167: LD_INT 51
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: LIST
16178: PPUSH
16179: CALL_OW 69
16183: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16184: LD_VAR 0 2
16188: PUSH
16189: LD_INT 1
16191: ARRAY
16192: PPUSH
16193: LD_EXP 21
16197: PPUSH
16198: CALL_OW 250
16202: PUSH
16203: LD_INT 5
16205: MINUS
16206: PPUSH
16207: LD_EXP 21
16211: PPUSH
16212: CALL_OW 251
16216: PUSH
16217: LD_INT 5
16219: MINUS
16220: PPUSH
16221: CALL_OW 111
// wait ( 0 0$5 ) ;
16225: LD_INT 175
16227: PPUSH
16228: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16232: LD_VAR 0 2
16236: PUSH
16237: LD_INT 1
16239: ARRAY
16240: PPUSH
16241: LD_INT 41
16243: PPUSH
16244: LD_INT 52
16246: PPUSH
16247: CALL_OW 177
// wait ( 0 0$40 ) ;
16251: LD_INT 1400
16253: PPUSH
16254: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16258: LD_VAR 0 2
16262: PUSH
16263: LD_INT 1
16265: ARRAY
16266: PPUSH
16267: LD_INT 41
16269: PPUSH
16270: LD_INT 44
16272: PPUSH
16273: CALL_OW 111
// end ;
16277: PPOPN 2
16279: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16280: LD_EXP 21
16284: PPUSH
16285: CALL_OW 274
16289: PPUSH
16290: LD_INT 1
16292: PPUSH
16293: CALL_OW 275
16297: PUSH
16298: LD_INT 100
16300: GREATEREQUAL
16301: IFFALSE 16529
16303: GO 16305
16305: DISABLE
16306: LD_INT 0
16308: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16309: LD_ADDR_VAR 0 1
16313: PUSH
16314: LD_INT 22
16316: PUSH
16317: LD_INT 6
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 21
16326: PUSH
16327: LD_INT 1
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 25
16336: PUSH
16337: LD_INT 2
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: PPUSH
16349: CALL_OW 69
16353: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16354: LD_VAR 0 1
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: LD_INT 4
16365: PPUSH
16366: LD_INT 39
16368: PPUSH
16369: LD_INT 37
16371: PPUSH
16372: LD_INT 3
16374: PPUSH
16375: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16379: LD_VAR 0 1
16383: PUSH
16384: LD_INT 1
16386: ARRAY
16387: PPUSH
16388: LD_INT 29
16390: PPUSH
16391: LD_INT 42
16393: PPUSH
16394: LD_INT 54
16396: PPUSH
16397: LD_INT 3
16399: PPUSH
16400: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16404: LD_VAR 0 1
16408: PUSH
16409: LD_INT 1
16411: ARRAY
16412: PPUSH
16413: LD_INT 6
16415: PPUSH
16416: LD_INT 38
16418: PPUSH
16419: LD_INT 48
16421: PPUSH
16422: LD_INT 0
16424: PPUSH
16425: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16429: LD_VAR 0 1
16433: PUSH
16434: LD_INT 1
16436: ARRAY
16437: PPUSH
16438: LD_INT 2
16440: PPUSH
16441: LD_INT 32
16443: PPUSH
16444: LD_INT 38
16446: PPUSH
16447: LD_INT 2
16449: PPUSH
16450: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16454: LD_VAR 0 1
16458: PUSH
16459: LD_INT 1
16461: ARRAY
16462: PPUSH
16463: LD_INT 26
16465: PPUSH
16466: LD_INT 39
16468: PPUSH
16469: LD_INT 55
16471: PPUSH
16472: LD_INT 3
16474: PPUSH
16475: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16479: LD_VAR 0 1
16483: PUSH
16484: LD_INT 1
16486: ARRAY
16487: PPUSH
16488: LD_INT 32
16490: PPUSH
16491: LD_INT 31
16493: PPUSH
16494: LD_INT 31
16496: PPUSH
16497: LD_INT 3
16499: PPUSH
16500: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16504: LD_VAR 0 1
16508: PUSH
16509: LD_INT 1
16511: ARRAY
16512: PPUSH
16513: LD_INT 31
16515: PPUSH
16516: LD_INT 50
16518: PPUSH
16519: LD_INT 51
16521: PPUSH
16522: LD_INT 4
16524: PPUSH
16525: CALL_OW 205
// end ; end_of_file
16529: PPOPN 1
16531: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
16532: LD_INT 0
16534: PPUSH
16535: PPUSH
16536: PPUSH
16537: PPUSH
16538: PPUSH
16539: PPUSH
16540: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
16541: LD_ADDR_VAR 0 3
16545: PUSH
16546: LD_INT 22
16548: PUSH
16549: LD_INT 6
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: LD_INT 21
16558: PUSH
16559: LD_INT 1
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 25
16568: PUSH
16569: LD_INT 1
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 3
16578: PUSH
16579: LD_INT 54
16581: PUSH
16582: EMPTY
16583: LIST
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: PPUSH
16595: CALL_OW 69
16599: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
16600: LD_ADDR_VAR 0 7
16604: PUSH
16605: LD_INT 22
16607: PUSH
16608: LD_INT 6
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 21
16617: PUSH
16618: LD_INT 1
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 25
16627: PUSH
16628: LD_INT 1
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 54
16637: PUSH
16638: EMPTY
16639: LIST
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: PPUSH
16647: CALL_OW 69
16651: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16652: LD_ADDR_VAR 0 4
16656: PUSH
16657: LD_INT 22
16659: PUSH
16660: LD_INT 6
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 21
16669: PUSH
16670: LD_INT 1
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 25
16679: PUSH
16680: LD_INT 2
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: LIST
16691: PPUSH
16692: CALL_OW 69
16696: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
16697: LD_ADDR_VAR 0 6
16701: PUSH
16702: LD_INT 22
16704: PUSH
16705: LD_INT 6
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_INT 21
16714: PUSH
16715: LD_INT 1
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 25
16724: PUSH
16725: LD_INT 4
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: LIST
16736: PPUSH
16737: CALL_OW 69
16741: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16742: LD_ADDR_VAR 0 8
16746: PUSH
16747: LD_INT 22
16749: PUSH
16750: LD_INT 6
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 21
16759: PUSH
16760: LD_INT 2
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 34
16769: PUSH
16770: LD_INT 51
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: LIST
16781: PPUSH
16782: CALL_OW 69
16786: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16787: LD_VAR 0 1
16791: PPUSH
16792: CALL_OW 255
16796: PUSH
16797: LD_INT 6
16799: EQUAL
16800: PUSH
16801: LD_VAR 0 1
16805: PPUSH
16806: CALL_OW 266
16810: PUSH
16811: LD_INT 0
16813: EQUAL
16814: AND
16815: IFFALSE 16835
// begin ruPDepot = building ;
16817: LD_ADDR_EXP 21
16821: PUSH
16822: LD_VAR 0 1
16826: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16827: LD_ADDR_EXP 20
16831: PUSH
16832: LD_INT 1
16834: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16835: LD_VAR 0 1
16839: PPUSH
16840: CALL_OW 266
16844: PUSH
16845: LD_INT 4
16847: EQUAL
16848: PUSH
16849: LD_VAR 0 1
16853: PPUSH
16854: CALL_OW 255
16858: PUSH
16859: LD_INT 6
16861: EQUAL
16862: AND
16863: IFFALSE 16896
// for i in tmpSold do
16865: LD_ADDR_VAR 0 2
16869: PUSH
16870: LD_VAR 0 3
16874: PUSH
16875: FOR_IN
16876: IFFALSE 16894
// ComEnterUnit ( i , building ) ;
16878: LD_VAR 0 2
16882: PPUSH
16883: LD_VAR 0 1
16887: PPUSH
16888: CALL_OW 120
16892: GO 16875
16894: POP
16895: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16896: LD_VAR 0 1
16900: PPUSH
16901: CALL_OW 266
16905: PUSH
16906: LD_INT 6
16908: EQUAL
16909: PUSH
16910: LD_VAR 0 1
16914: PPUSH
16915: CALL_OW 255
16919: PUSH
16920: LD_INT 6
16922: EQUAL
16923: AND
16924: IFFALSE 16982
// begin for i in tmpSci do
16926: LD_ADDR_VAR 0 2
16930: PUSH
16931: LD_VAR 0 6
16935: PUSH
16936: FOR_IN
16937: IFFALSE 16955
// ComEnterUnit ( i , building ) ;
16939: LD_VAR 0 2
16943: PPUSH
16944: LD_VAR 0 1
16948: PPUSH
16949: CALL_OW 120
16953: GO 16936
16955: POP
16956: POP
// ResAllTechs ( 6 , building , 3 ) ;
16957: LD_INT 6
16959: PPUSH
16960: LD_VAR 0 1
16964: PPUSH
16965: LD_INT 3
16967: PPUSH
16968: CALL 5718 0 3
// ruPLab = building ;
16972: LD_ADDR_EXP 22
16976: PUSH
16977: LD_VAR 0 1
16981: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16982: LD_VAR 0 1
16986: PPUSH
16987: CALL_OW 266
16991: PUSH
16992: LD_INT 2
16994: EQUAL
16995: PUSH
16996: LD_VAR 0 1
17000: PPUSH
17001: CALL_OW 255
17005: PUSH
17006: LD_INT 6
17008: EQUAL
17009: AND
17010: IFFALSE 17061
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
17012: LD_ADDR_VAR 0 5
17016: PUSH
17017: LD_VAR 0 8
17021: PUSH
17022: LD_INT 1
17024: ARRAY
17025: PPUSH
17026: CALL_OW 313
17030: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
17031: LD_VAR 0 5
17035: PPUSH
17036: CALL_OW 121
// wait ( 0 0$1 ) ;
17040: LD_INT 35
17042: PPUSH
17043: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
17047: LD_VAR 0 5
17051: PPUSH
17052: LD_VAR 0 1
17056: PPUSH
17057: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
17061: LD_VAR 0 1
17065: PPUSH
17066: CALL_OW 266
17070: PUSH
17071: LD_INT 32
17073: EQUAL
17074: PUSH
17075: LD_VAR 0 1
17079: PPUSH
17080: CALL_OW 255
17084: PUSH
17085: LD_INT 6
17087: EQUAL
17088: AND
17089: IFFALSE 17141
// begin ComPlaceWeapon ( building , 42 ) ;
17091: LD_VAR 0 1
17095: PPUSH
17096: LD_INT 42
17098: PPUSH
17099: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
17103: LD_VAR 0 7
17107: PUSH
17108: LD_INT 1
17110: ARRAY
17111: PPUSH
17112: CALL_OW 122
// wait ( 0 0$1 ) ;
17116: LD_INT 35
17118: PPUSH
17119: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
17123: LD_VAR 0 7
17127: PUSH
17128: LD_INT 1
17130: ARRAY
17131: PPUSH
17132: LD_VAR 0 1
17136: PPUSH
17137: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
17141: LD_VAR 0 1
17145: PPUSH
17146: CALL_OW 266
17150: PUSH
17151: LD_INT 31
17153: EQUAL
17154: PUSH
17155: LD_VAR 0 1
17159: PPUSH
17160: CALL_OW 255
17164: PUSH
17165: LD_INT 6
17167: EQUAL
17168: AND
17169: IFFALSE 17235
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
17171: LD_VAR 0 7
17175: PUSH
17176: LD_INT 2
17178: ARRAY
17179: PPUSH
17180: CALL_OW 122
// wait ( 0 0$1 ) ;
17184: LD_INT 35
17186: PPUSH
17187: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
17191: LD_VAR 0 7
17195: PUSH
17196: LD_INT 2
17198: ARRAY
17199: PPUSH
17200: LD_VAR 0 1
17204: PPUSH
17205: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
17209: LD_VAR 0 4
17213: PUSH
17214: LD_INT 1
17216: ARRAY
17217: PPUSH
17218: LD_EXP 21
17222: PPUSH
17223: CALL_OW 120
// baseReadyToBuild = 2 ;
17227: LD_ADDR_EXP 20
17231: PUSH
17232: LD_INT 2
17234: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
17235: LD_VAR 0 1
17239: PPUSH
17240: CALL_OW 266
17244: PUSH
17245: LD_INT 32
17247: EQUAL
17248: PUSH
17249: LD_VAR 0 1
17253: PPUSH
17254: CALL_OW 255
17258: PUSH
17259: LD_INT 1
17261: EQUAL
17262: AND
17263: PUSH
17264: LD_EXP 32
17268: PUSH
17269: LD_INT 0
17271: EQUAL
17272: AND
17273: IFFALSE 17518
// begin bunkerDialog = 1 ;
17275: LD_ADDR_EXP 32
17279: PUSH
17280: LD_INT 1
17282: ST_TO_ADDR
// if IsOK ( Claptopn ) then
17283: LD_EXP 11
17287: PPUSH
17288: CALL_OW 302
17292: IFFALSE 17308
// begin Say ( Claptopn , D11-Eng1-1 ) ;
17294: LD_EXP 11
17298: PPUSH
17299: LD_STRING D11-Eng1-1
17301: PPUSH
17302: CALL_OW 88
// end else
17306: GO 17504
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17308: LD_INT 22
17310: PUSH
17311: LD_INT 1
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 21
17320: PUSH
17321: LD_INT 1
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 25
17330: PUSH
17331: LD_INT 3
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 26
17340: PUSH
17341: LD_INT 1
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: PPUSH
17354: CALL_OW 69
17358: PUSH
17359: LD_EXP 1
17363: PUSH
17364: EMPTY
17365: LIST
17366: PUSH
17367: LD_INT 0
17369: GREATER
17370: DIFF
17371: IFFALSE 17445
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17373: LD_INT 22
17375: PUSH
17376: LD_INT 1
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 21
17385: PUSH
17386: LD_INT 1
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 25
17395: PUSH
17396: LD_INT 2
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 26
17405: PUSH
17406: LD_INT 1
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: PPUSH
17419: CALL_OW 69
17423: PUSH
17424: LD_EXP 1
17428: PUSH
17429: EMPTY
17430: LIST
17431: DIFF
17432: PPUSH
17433: LD_STRING D11-Eng1-1
17435: PPUSH
17436: LD_STRING D11-Eng1-1
17438: PPUSH
17439: CALL 4346 0 3
// end else
17443: GO 17504
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17445: LD_INT 22
17447: PUSH
17448: LD_INT 1
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: LD_INT 21
17457: PUSH
17458: LD_INT 1
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 26
17467: PUSH
17468: LD_INT 1
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: LIST
17479: PPUSH
17480: CALL_OW 69
17484: PUSH
17485: LD_EXP 1
17489: PUSH
17490: EMPTY
17491: LIST
17492: DIFF
17493: PPUSH
17494: LD_STRING D11-Eng1-1
17496: PPUSH
17497: LD_STRING D11-Eng1-1
17499: PPUSH
17500: CALL 4346 0 3
// end ; end ; if energyVDialog = 0 then
17504: LD_EXP 33
17508: PUSH
17509: LD_INT 0
17511: EQUAL
17512: IFFALSE 17518
// EnergyDialog ;
17514: CALL 4770 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
17518: LD_VAR 0 1
17522: PPUSH
17523: CALL_OW 266
17527: PUSH
17528: LD_INT 29
17530: EQUAL
17531: PUSH
17532: LD_VAR 0 1
17536: PPUSH
17537: CALL_OW 255
17541: PUSH
17542: LD_INT 1
17544: EQUAL
17545: AND
17546: IFFALSE 17556
// buildOil = 1 ;
17548: LD_ADDR_EXP 34
17552: PUSH
17553: LD_INT 1
17555: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
17556: LD_VAR 0 1
17560: PPUSH
17561: CALL_OW 266
17565: PUSH
17566: LD_INT 26
17568: EQUAL
17569: PUSH
17570: LD_VAR 0 1
17574: PPUSH
17575: CALL_OW 255
17579: PUSH
17580: LD_INT 1
17582: EQUAL
17583: AND
17584: IFFALSE 17594
// buildPower = 1 ;
17586: LD_ADDR_EXP 35
17590: PUSH
17591: LD_INT 1
17593: ST_TO_ADDR
// end ;
17594: PPOPN 8
17596: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
17597: LD_VAR 0 1
17601: PPUSH
17602: CALL_OW 266
17606: PUSH
17607: LD_INT 3
17609: EQUAL
17610: PUSH
17611: LD_VAR 0 1
17615: PPUSH
17616: CALL_OW 255
17620: PUSH
17621: LD_INT 1
17623: EQUAL
17624: AND
17625: PUSH
17626: LD_EXP 31
17630: PUSH
17631: LD_INT 0
17633: EQUAL
17634: AND
17635: IFFALSE 17983
// begin factoryDialog = 1 ;
17637: LD_ADDR_EXP 31
17641: PUSH
17642: LD_INT 1
17644: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17645: LD_INT 22
17647: PUSH
17648: LD_INT 1
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 21
17657: PUSH
17658: LD_INT 3
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 30
17667: PUSH
17668: LD_INT 3
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 24
17677: PUSH
17678: LD_INT 1000
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: PPUSH
17691: CALL_OW 69
17695: PUSH
17696: LD_INT 1
17698: ARRAY
17699: PPUSH
17700: CALL_OW 87
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
17704: LD_INT 47
17706: PPUSH
17707: LD_INT 1
17709: PPUSH
17710: CALL_OW 321
17714: PUSH
17715: LD_INT 1
17717: EQUAL
17718: PUSH
17719: LD_INT 45
17721: PPUSH
17722: LD_INT 1
17724: PPUSH
17725: CALL_OW 321
17729: PUSH
17730: LD_INT 1
17732: EQUAL
17733: AND
17734: IFFALSE 17983
// begin Say ( JMM , D9a-JMM-1 ) ;
17736: LD_EXP 1
17740: PPUSH
17741: LD_STRING D9a-JMM-1
17743: PPUSH
17744: CALL_OW 88
// if IsOK ( Campell ) then
17748: LD_EXP 12
17752: PPUSH
17753: CALL_OW 302
17757: IFFALSE 17773
// begin Say ( Campell , D9a-Mech1-1 ) ;
17759: LD_EXP 12
17763: PPUSH
17764: LD_STRING D9a-Mech1-1
17766: PPUSH
17767: CALL_OW 88
// end else
17771: GO 17969
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17773: LD_INT 22
17775: PUSH
17776: LD_INT 1
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 21
17785: PUSH
17786: LD_INT 1
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: LD_INT 25
17795: PUSH
17796: LD_INT 3
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 26
17805: PUSH
17806: LD_INT 1
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: PPUSH
17819: CALL_OW 69
17823: PUSH
17824: LD_EXP 1
17828: PUSH
17829: EMPTY
17830: LIST
17831: PUSH
17832: LD_INT 0
17834: GREATER
17835: DIFF
17836: IFFALSE 17910
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17838: LD_INT 22
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 21
17850: PUSH
17851: LD_INT 1
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 25
17860: PUSH
17861: LD_INT 3
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 26
17870: PUSH
17871: LD_INT 1
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: PPUSH
17884: CALL_OW 69
17888: PUSH
17889: LD_EXP 1
17893: PUSH
17894: EMPTY
17895: LIST
17896: DIFF
17897: PPUSH
17898: LD_STRING D9a-Mech1-1
17900: PPUSH
17901: LD_STRING D9a-Mech1-1
17903: PPUSH
17904: CALL 4346 0 3
// end else
17908: GO 17969
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17910: LD_INT 22
17912: PUSH
17913: LD_INT 1
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 21
17922: PUSH
17923: LD_INT 1
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 26
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: LIST
17944: PPUSH
17945: CALL_OW 69
17949: PUSH
17950: LD_EXP 1
17954: PUSH
17955: EMPTY
17956: LIST
17957: DIFF
17958: PPUSH
17959: LD_STRING D9a-Mech1-1
17961: PPUSH
17962: LD_STRING D9a-Mech1-1
17964: PPUSH
17965: CALL 4346 0 3
// end ; end ; if energyVDialog = 0 then
17969: LD_EXP 33
17973: PUSH
17974: LD_INT 0
17976: EQUAL
17977: IFFALSE 17983
// EnergyDialog ;
17979: CALL 4770 0 0
// end ; end ; end ;
17983: PPOPN 1
17985: END
// on UnitDestroyed ( unit ) do var mech ;
17986: LD_INT 0
17988: PPUSH
// begin if unit = JMM then
17989: LD_VAR 0 1
17993: PUSH
17994: LD_EXP 1
17998: EQUAL
17999: IFFALSE 18008
// YouLost ( JMM ) ;
18001: LD_STRING JMM
18003: PPUSH
18004: CALL_OW 104
// if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
18008: LD_VAR 0 1
18012: PPUSH
18013: CALL_OW 247
18017: PUSH
18018: LD_INT 1
18020: EQUAL
18021: PUSH
18022: LD_VAR 0 1
18026: PPUSH
18027: CALL_OW 255
18031: PUSH
18032: LD_INT 1
18034: EQUAL
18035: AND
18036: IFFALSE 18052
// lostCounter = lostCounter + 1 ;
18038: LD_ADDR_EXP 38
18042: PUSH
18043: LD_EXP 38
18047: PUSH
18048: LD_INT 1
18050: PLUS
18051: ST_TO_ADDR
// if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
18052: LD_VAR 0 1
18056: PPUSH
18057: CALL_OW 257
18061: PUSH
18062: LD_INT 3
18064: EQUAL
18065: PUSH
18066: LD_VAR 0 1
18070: PPUSH
18071: CALL_OW 255
18075: PUSH
18076: LD_INT 3
18078: EQUAL
18079: AND
18080: PUSH
18081: LD_INT 24
18083: PPUSH
18084: CALL_OW 302
18088: AND
18089: PUSH
18090: LD_INT 24
18092: PPUSH
18093: CALL_OW 255
18097: PUSH
18098: LD_INT 3
18100: EQUAL
18101: AND
18102: IFFALSE 18201
// begin uc_side = 3 ;
18104: LD_ADDR_OWVAR 20
18108: PUSH
18109: LD_INT 3
18111: ST_TO_ADDR
// uc_nation = 3 ;
18112: LD_ADDR_OWVAR 21
18116: PUSH
18117: LD_INT 3
18119: ST_TO_ADDR
// hc_gallery :=  ;
18120: LD_ADDR_OWVAR 33
18124: PUSH
18125: LD_STRING 
18127: ST_TO_ADDR
// hc_name :=  ;
18128: LD_ADDR_OWVAR 26
18132: PUSH
18133: LD_STRING 
18135: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
18136: LD_INT 0
18138: PPUSH
18139: LD_EXP 16
18143: PPUSH
18144: LD_EXP 17
18148: PPUSH
18149: CALL_OW 12
18153: PPUSH
18154: CALL_OW 383
// mech := CreateHuman ;
18158: LD_ADDR_VAR 0 2
18162: PUSH
18163: CALL_OW 44
18167: ST_TO_ADDR
// PlaceUnitXYR ( mech , 124 , 97 , 3 , false ) ;
18168: LD_VAR 0 2
18172: PPUSH
18173: LD_INT 124
18175: PPUSH
18176: LD_INT 97
18178: PPUSH
18179: LD_INT 3
18181: PPUSH
18182: LD_INT 0
18184: PPUSH
18185: CALL_OW 50
// ComEnterUnit ( mech , rubfact0 ) ;
18189: LD_VAR 0 2
18193: PPUSH
18194: LD_INT 24
18196: PPUSH
18197: CALL_OW 120
// end ; end ;
18201: PPOPN 2
18203: END
// on Contact ( side1 , side2 ) do var i , tmp ;
18204: LD_INT 0
18206: PPUSH
18207: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
18208: LD_ADDR_VAR 0 4
18212: PUSH
18213: LD_INT 22
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PPUSH
18223: CALL_OW 69
18227: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
18228: LD_VAR 0 1
18232: PUSH
18233: LD_INT 1
18235: EQUAL
18236: PUSH
18237: LD_VAR 0 2
18241: PUSH
18242: LD_INT 6
18244: EQUAL
18245: AND
18246: PUSH
18247: LD_EXP 41
18251: PUSH
18252: LD_INT 1
18254: EQUAL
18255: AND
18256: IFFALSE 18311
// begin donaldsonCoopAttack = 0 ;
18258: LD_ADDR_EXP 41
18262: PUSH
18263: LD_INT 0
18265: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
18266: LD_ADDR_VAR 0 3
18270: PUSH
18271: LD_INT 22
18273: PUSH
18274: LD_INT 4
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: EMPTY
18282: LIST
18283: PPUSH
18284: CALL_OW 69
18288: PUSH
18289: FOR_IN
18290: IFFALSE 18309
// ComAgressiveMove ( i , 52 , 64 ) ;
18292: LD_VAR 0 3
18296: PPUSH
18297: LD_INT 52
18299: PPUSH
18300: LD_INT 64
18302: PPUSH
18303: CALL_OW 114
18307: GO 18289
18309: POP
18310: POP
// end ; end ;
18311: PPOPN 4
18313: END
// on VehicleConstructed ( vehicle , building ) do var driver ;
18314: LD_INT 0
18316: PPUSH
// begin if GetSide ( vehicle ) = 1 then
18317: LD_VAR 0 1
18321: PPUSH
18322: CALL_OW 255
18326: PUSH
18327: LD_INT 1
18329: EQUAL
18330: IFFALSE 18346
// vehicleProduceCounter := vehicleProduceCounter + 1 ;
18332: LD_ADDR_EXP 42
18336: PUSH
18337: LD_EXP 42
18341: PUSH
18342: LD_INT 1
18344: PLUS
18345: ST_TO_ADDR
// if GetWeapon ( vehicle ) = 53 then
18346: LD_VAR 0 1
18350: PPUSH
18351: CALL_OW 264
18355: PUSH
18356: LD_INT 53
18358: EQUAL
18359: IFFALSE 18491
// begin uc_side = 3 ;
18361: LD_ADDR_OWVAR 20
18365: PUSH
18366: LD_INT 3
18368: ST_TO_ADDR
// uc_nation = 3 ;
18369: LD_ADDR_OWVAR 21
18373: PUSH
18374: LD_INT 3
18376: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
18377: LD_INT 0
18379: PPUSH
18380: LD_EXP 17
18384: PPUSH
18385: CALL_OW 383
// driver := CreateHuman ;
18389: LD_ADDR_VAR 0 3
18393: PUSH
18394: CALL_OW 44
18398: ST_TO_ADDR
// PlaceHumanInUnit ( driver , building ) ;
18399: LD_VAR 0 3
18403: PPUSH
18404: LD_VAR 0 2
18408: PPUSH
18409: CALL_OW 52
// CutTreeInArea ( vehicle , TreesArea ) ;
18413: LD_VAR 0 1
18417: PPUSH
18418: LD_INT 21
18420: PPUSH
18421: CALL 4986 0 2
// AddComMoveXY ( vehicle , 104 , 73 ) ;
18425: LD_VAR 0 1
18429: PPUSH
18430: LD_INT 104
18432: PPUSH
18433: LD_INT 73
18435: PPUSH
18436: CALL_OW 171
// AddComExitVehicle ( driver ) ;
18440: LD_VAR 0 3
18444: PPUSH
18445: CALL_OW 181
// AddComEnterUnit ( driver , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
18449: LD_VAR 0 3
18453: PPUSH
18454: LD_INT 22
18456: PUSH
18457: LD_INT 3
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 30
18466: PUSH
18467: LD_INT 3
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PPUSH
18478: CALL_OW 69
18482: PUSH
18483: LD_INT 1
18485: ARRAY
18486: PPUSH
18487: CALL_OW 180
// end ; end ;
18491: PPOPN 3
18493: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18494: LD_INT 0
18496: PPUSH
18497: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18498: LD_VAR 0 1
18502: PPUSH
18503: CALL_OW 255
18507: PUSH
18508: LD_INT 3
18510: EQUAL
18511: PUSH
18512: LD_VAR 0 1
18516: PPUSH
18517: CALL_OW 247
18521: PUSH
18522: LD_INT 2
18524: EQUAL
18525: AND
18526: IFFALSE 18620
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
18528: LD_VAR 0 1
18532: PPUSH
18533: CALL_OW 264
18537: PUSH
18538: LD_INT 42
18540: EQUAL
18541: PUSH
18542: LD_VAR 0 1
18546: PPUSH
18547: CALL_OW 264
18551: PUSH
18552: LD_INT 43
18554: EQUAL
18555: OR
18556: PUSH
18557: LD_VAR 0 1
18561: PPUSH
18562: CALL_OW 264
18566: PUSH
18567: LD_INT 44
18569: EQUAL
18570: OR
18571: IFFALSE 18620
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18573: LD_INT 24
18575: PPUSH
18576: LD_VAR 0 1
18580: PPUSH
18581: CALL_OW 265
18585: PPUSH
18586: LD_VAR 0 1
18590: PPUSH
18591: CALL_OW 262
18595: PPUSH
18596: LD_VAR 0 1
18600: PPUSH
18601: CALL_OW 263
18605: PPUSH
18606: LD_VAR 0 1
18610: PPUSH
18611: CALL_OW 264
18615: PPUSH
18616: CALL_OW 185
// end ;
18620: PPOPN 3
18622: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18623: LD_VAR 0 1
18627: PPUSH
18628: CALL_OW 255
18632: PUSH
18633: LD_INT 3
18635: EQUAL
18636: PUSH
18637: LD_VAR 0 2
18641: PPUSH
18642: CALL_OW 255
18646: PUSH
18647: LD_INT 3
18649: EQUAL
18650: AND
18651: PUSH
18652: LD_VAR 0 1
18656: PPUSH
18657: CALL_OW 302
18661: AND
18662: IFFALSE 18704
// begin ComRepairVehicle ( human , vehicle ) ;
18664: LD_VAR 0 2
18668: PPUSH
18669: LD_VAR 0 1
18673: PPUSH
18674: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18678: LD_VAR 0 2
18682: PPUSH
18683: LD_VAR 0 1
18687: PPUSH
18688: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18692: LD_VAR 0 1
18696: PPUSH
18697: LD_INT 100
18699: PPUSH
18700: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
18704: LD_VAR 0 1
18708: PPUSH
18709: CALL_OW 255
18713: PUSH
18714: LD_INT 3
18716: EQUAL
18717: PUSH
18718: LD_VAR 0 2
18722: PPUSH
18723: CALL_OW 255
18727: PUSH
18728: LD_INT 3
18730: EQUAL
18731: AND
18732: PUSH
18733: LD_INT 24
18735: PPUSH
18736: CALL_OW 302
18740: AND
18741: PUSH
18742: LD_VAR 0 1
18746: PPUSH
18747: CALL_OW 302
18751: NOT
18752: AND
18753: IFFALSE 18767
// ComEnterUnit ( human , rubfact0 ) ;
18755: LD_VAR 0 2
18759: PPUSH
18760: LD_INT 24
18762: PPUSH
18763: CALL_OW 120
// end ;
18767: PPOPN 2
18769: END
// on Command ( comandid ) do var i , j , tmp ;
18770: LD_INT 0
18772: PPUSH
18773: PPUSH
18774: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18775: LD_ADDR_VAR 0 2
18779: PUSH
18780: LD_INT 22
18782: PUSH
18783: LD_INT 1
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 2
18792: PUSH
18793: LD_INT 21
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 21
18805: PUSH
18806: LD_INT 2
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: LIST
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PPUSH
18822: CALL_OW 69
18826: PUSH
18827: FOR_IN
18828: IFFALSE 18938
// begin if GetTaskList ( i ) > 0 then
18830: LD_VAR 0 2
18834: PPUSH
18835: CALL_OW 437
18839: PUSH
18840: LD_INT 0
18842: GREATER
18843: IFFALSE 18936
// begin for j = 1 to GetTaskList ( i ) do
18845: LD_ADDR_VAR 0 3
18849: PUSH
18850: DOUBLE
18851: LD_INT 1
18853: DEC
18854: ST_TO_ADDR
18855: LD_VAR 0 2
18859: PPUSH
18860: CALL_OW 437
18864: PUSH
18865: FOR_TO
18866: IFFALSE 18934
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
18868: LD_ADDR_VAR 0 4
18872: PUSH
18873: LD_VAR 0 2
18877: PPUSH
18878: CALL_OW 437
18882: PUSH
18883: LD_VAR 0 3
18887: ARRAY
18888: PUSH
18889: LD_INT 4
18891: ARRAY
18892: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
18893: LD_VAR 0 4
18897: PPUSH
18898: CALL_OW 255
18902: PUSH
18903: LD_INT 4
18905: EQUAL
18906: PUSH
18907: LD_VAR 0 4
18911: PPUSH
18912: CALL_OW 255
18916: PUSH
18917: LD_INT 0
18919: EQUAL
18920: OR
18921: IFFALSE 18932
// ComStop ( i ) ;
18923: LD_VAR 0 2
18927: PPUSH
18928: CALL_OW 141
// end ;
18932: GO 18865
18934: POP
18935: POP
// end ; end ;
18936: GO 18827
18938: POP
18939: POP
// end ; end_of_file
18940: PPOPN 4
18942: END
// every 10 10$0 do
18943: GO 18945
18945: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 1 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18946: LD_INT 5
18948: PPUSH
18949: LD_INT 3
18951: PPUSH
18952: LD_INT 1
18954: PUSH
18955: LD_INT 2
18957: PUSH
18958: LD_INT 3
18960: PUSH
18961: LD_INT 4
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: LIST
18968: PUSH
18969: LD_OWVAR 67
18973: ARRAY
18974: PLUS
18975: PPUSH
18976: LD_INT 0
18978: PPUSH
18979: LD_INT 0
18981: PPUSH
18982: LD_INT 0
18984: PPUSH
18985: LD_INT 0
18987: PPUSH
18988: LD_EXP 16
18992: PPUSH
18993: LD_EXP 17
18997: PPUSH
18998: CALL_OW 12
19002: PPUSH
19003: LD_INT 4
19005: PPUSH
19006: LD_INT 14
19008: PPUSH
19009: LD_INT 1
19011: PPUSH
19012: LD_INT 2
19014: PPUSH
19015: CALL 7691 0 12
// end ;
19019: END
// every 20 20$0 do
19020: GO 19022
19022: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 3 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
19023: LD_INT 5
19025: PPUSH
19026: LD_INT 3
19028: PPUSH
19029: LD_INT 3
19031: PUSH
19032: LD_INT 2
19034: PUSH
19035: LD_INT 3
19037: PUSH
19038: LD_INT 4
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: LIST
19045: PUSH
19046: LD_OWVAR 67
19050: ARRAY
19051: PLUS
19052: PPUSH
19053: LD_INT 0
19055: PPUSH
19056: LD_INT 0
19058: PPUSH
19059: LD_INT 0
19061: PPUSH
19062: LD_INT 2
19064: PPUSH
19065: LD_EXP 16
19069: PPUSH
19070: LD_EXP 17
19074: PPUSH
19075: CALL_OW 12
19079: PPUSH
19080: LD_INT 4
19082: PPUSH
19083: LD_INT 14
19085: PPUSH
19086: LD_INT 1
19088: PPUSH
19089: LD_INT 1
19091: PPUSH
19092: CALL 7691 0 12
// end ;
19096: END
// every 25 25$0 do
19097: GO 19099
19099: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
19100: LD_INT 4
19102: PPUSH
19103: LD_INT 5
19105: PPUSH
19106: LD_INT 3
19108: PUSH
19109: LD_INT 4
19111: PUSH
19112: LD_INT 5
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: LIST
19119: PUSH
19120: LD_OWVAR 67
19124: ARRAY
19125: PPUSH
19126: LD_EXP 16
19130: PPUSH
19131: LD_EXP 17
19135: PPUSH
19136: CALL_OW 12
19140: PPUSH
19141: LD_INT 3
19143: PPUSH
19144: LD_INT 1
19146: PPUSH
19147: LD_INT 1
19149: PPUSH
19150: LD_INT 42
19152: PUSH
19153: LD_INT 42
19155: PUSH
19156: LD_INT 43
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 42
19166: PUSH
19167: LD_INT 43
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 43
19176: PUSH
19177: LD_INT 43
19179: PUSH
19180: LD_INT 43
19182: PUSH
19183: LD_INT 44
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: LIST
19196: PUSH
19197: LD_OWVAR 67
19201: ARRAY
19202: PPUSH
19203: EMPTY
19204: PPUSH
19205: EMPTY
19206: PPUSH
19207: LD_INT 1
19209: PPUSH
19210: CALL 9504 0 11
// end ; end_of_file
19214: END
// every 0 0$1 trigger startTimer = 1 do
19215: LD_EXP 30
19219: PUSH
19220: LD_INT 1
19222: EQUAL
19223: IFFALSE 19353
19225: GO 19227
19227: DISABLE
// begin enable ;
19228: ENABLE
// if timerStatus = 1 then
19229: LD_EXP 29
19233: PUSH
19234: LD_INT 1
19236: EQUAL
19237: IFFALSE 19270
// begin timeToSupport = timeToSupport - 0 0$01 ;
19239: LD_ADDR_EXP 28
19243: PUSH
19244: LD_EXP 28
19248: PUSH
19249: LD_INT 35
19251: MINUS
19252: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
19253: LD_ADDR_OWVAR 47
19257: PUSH
19258: LD_STRING #Am04-1
19260: PUSH
19261: LD_EXP 28
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: ST_TO_ADDR
// end ; if timerStatus = 2 then
19270: LD_EXP 29
19274: PUSH
19275: LD_INT 2
19277: EQUAL
19278: IFFALSE 19311
// begin timeToSupport = timeToSupport - 0 0$01 ;
19280: LD_ADDR_EXP 28
19284: PUSH
19285: LD_EXP 28
19289: PUSH
19290: LD_INT 35
19292: MINUS
19293: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
19294: LD_ADDR_OWVAR 47
19298: PUSH
19299: LD_STRING #Am04-2
19301: PUSH
19302: LD_EXP 28
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: ST_TO_ADDR
// end ; if timerStatus = 3 then
19311: LD_EXP 29
19315: PUSH
19316: LD_INT 3
19318: EQUAL
19319: IFFALSE 19335
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
19321: LD_ADDR_EXP 27
19325: PUSH
19326: LD_EXP 27
19330: PUSH
19331: LD_INT 35
19333: MINUS
19334: ST_TO_ADDR
// end ; if timerStatus = 4 then
19335: LD_EXP 29
19339: PUSH
19340: LD_INT 4
19342: EQUAL
19343: IFFALSE 19353
// begin display_strings =  ;
19345: LD_ADDR_OWVAR 47
19349: PUSH
19350: LD_STRING 
19352: ST_TO_ADDR
// end ; end ; end_of_file
19353: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
19354: LD_INT 4
19356: PPUSH
19357: CALL_OW 301
19361: IFFALSE 19373
19363: GO 19365
19365: DISABLE
// YouLost ( Base ) ; end_of_file
19366: LD_STRING Base
19368: PPUSH
19369: CALL_OW 104
19373: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , p ;
19374: LD_EXP 15
19378: PPUSH
19379: CALL_OW 301
19383: PUSH
19384: LD_INT 22
19386: PUSH
19387: LD_INT 3
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 21
19396: PUSH
19397: LD_INT 1
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PPUSH
19408: CALL_OW 69
19412: PUSH
19413: LD_INT 14
19415: PUSH
19416: LD_INT 13
19418: PUSH
19419: LD_INT 12
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: LIST
19426: PUSH
19427: LD_OWVAR 67
19431: ARRAY
19432: LESS
19433: AND
19434: IFFALSE 19905
19436: GO 19438
19438: DISABLE
19439: LD_INT 0
19441: PPUSH
19442: PPUSH
// begin AIEnable = 0 ;
19443: LD_ADDR_EXP 37
19447: PUSH
19448: LD_INT 0
19450: ST_TO_ADDR
// escapeAvalaible = 1 ;
19451: LD_ADDR_EXP 40
19455: PUSH
19456: LD_INT 1
19458: ST_TO_ADDR
// InGameOn ;
19459: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
19463: LD_INT 3
19465: PPUSH
19466: LD_INT 1
19468: PPUSH
19469: LD_INT 1
19471: PPUSH
19472: LD_INT 0
19474: PPUSH
19475: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
19479: LD_INT 6
19481: PPUSH
19482: LD_INT 1
19484: PPUSH
19485: LD_INT 1
19487: PPUSH
19488: LD_INT 0
19490: PPUSH
19491: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
19495: LD_INT 5
19497: PPUSH
19498: LD_INT 1
19500: PPUSH
19501: LD_INT 1
19503: PPUSH
19504: LD_INT 0
19506: PPUSH
19507: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
19511: LD_INT 3
19513: PPUSH
19514: LD_INT 1
19516: PPUSH
19517: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
19521: LD_INT 97
19523: PPUSH
19524: LD_INT 91
19526: PPUSH
19527: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19531: LD_INT 22
19533: PUSH
19534: LD_INT 3
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 21
19543: PUSH
19544: LD_INT 1
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PPUSH
19555: CALL_OW 69
19559: PPUSH
19560: CALL_OW 121
// wait ( 0 0$01 ) ;
19564: LD_INT 35
19566: PPUSH
19567: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19571: LD_INT 22
19573: PUSH
19574: LD_INT 3
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 21
19583: PUSH
19584: LD_INT 1
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PPUSH
19595: CALL_OW 69
19599: PPUSH
19600: LD_INT 124
19602: PPUSH
19603: LD_INT 98
19605: PPUSH
19606: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
19610: LD_INT 22
19612: PUSH
19613: LD_INT 5
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 21
19622: PUSH
19623: LD_INT 1
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PPUSH
19634: CALL_OW 69
19638: PPUSH
19639: CALL_OW 121
// wait ( 0 0$01 ) ;
19643: LD_INT 35
19645: PPUSH
19646: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19650: LD_INT 22
19652: PUSH
19653: LD_INT 5
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 21
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PPUSH
19674: CALL_OW 69
19678: PPUSH
19679: LD_INT 124
19681: PPUSH
19682: LD_INT 98
19684: PPUSH
19685: CALL_OW 171
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19689: LD_INT 22
19691: PUSH
19692: LD_INT 6
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 21
19701: PUSH
19702: LD_INT 1
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PPUSH
19713: CALL_OW 69
19717: PPUSH
19718: CALL_OW 121
// wait ( 0 0$01 ) ;
19722: LD_INT 35
19724: PPUSH
19725: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19729: LD_INT 22
19731: PUSH
19732: LD_INT 6
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 21
19741: PUSH
19742: LD_INT 1
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PPUSH
19753: CALL_OW 69
19757: PPUSH
19758: LD_INT 124
19760: PPUSH
19761: LD_INT 98
19763: PPUSH
19764: CALL_OW 171
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19768: LD_INT 22
19770: PUSH
19771: LD_INT 1
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 21
19780: PUSH
19781: LD_INT 1
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PPUSH
19792: CALL_OW 69
19796: PPUSH
19797: LD_INT 124
19799: PPUSH
19800: LD_INT 98
19802: PPUSH
19803: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
19807: LD_INT 124
19809: PPUSH
19810: LD_INT 98
19812: PPUSH
19813: CALL_OW 84
// p := 0 0$0 ;
19817: LD_ADDR_VAR 0 2
19821: PUSH
19822: LD_INT 0
19824: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19825: LD_INT 35
19827: PPUSH
19828: CALL_OW 67
// p := p + 0 0$1 ;
19832: LD_ADDR_VAR 0 2
19836: PUSH
19837: LD_VAR 0 2
19841: PUSH
19842: LD_INT 35
19844: PLUS
19845: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
19846: LD_INT 23
19848: PUSH
19849: LD_INT 3
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 21
19858: PUSH
19859: LD_INT 1
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 24
19868: PUSH
19869: LD_INT 250
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: LIST
19880: PPUSH
19881: CALL_OW 69
19885: PUSH
19886: LD_INT 0
19888: EQUAL
19889: PUSH
19890: LD_VAR 0 2
19894: PUSH
19895: LD_INT 245
19897: GREATEREQUAL
19898: OR
19899: IFFALSE 19825
// FinishMission ;
19901: CALL 19987 0 0
// end ;
19905: PPOPN 2
19907: END
// every 0 0$01 trigger escapeAvalaible do var i ;
19908: LD_EXP 40
19912: IFFALSE 19984
19914: GO 19916
19916: DISABLE
19917: LD_INT 0
19919: PPUSH
// begin enable ;
19920: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_not , [ f_side , 1 ] ] , [ f_not , [ f_empty ] ] ] ) do
19921: LD_ADDR_VAR 0 1
19925: PUSH
19926: LD_INT 5
19928: PPUSH
19929: LD_INT 3
19931: PUSH
19932: LD_INT 22
19934: PUSH
19935: LD_INT 1
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 3
19948: PUSH
19949: LD_INT 58
19951: PUSH
19952: EMPTY
19953: LIST
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PPUSH
19963: CALL_OW 70
19967: PUSH
19968: FOR_IN
19969: IFFALSE 19982
// RemoveUnit ( i ) ;
19971: LD_VAR 0 1
19975: PPUSH
19976: CALL_OW 64
19980: GO 19968
19982: POP
19983: POP
// end ;
19984: PPOPN 1
19986: END
// export function FinishMission ; var tmp , m1 , m2 , m3 ; begin
19987: LD_INT 0
19989: PPUSH
19990: PPUSH
19991: PPUSH
19992: PPUSH
19993: PPUSH
// if not vehicleProduceCounter then
19994: LD_EXP 42
19998: NOT
19999: IFFALSE 20008
// SetAchievement ( ACH_INFANTRY ) ;
20001: LD_STRING ACH_INFANTRY
20003: PPUSH
20004: CALL_OW 543
// if tick <= 15 15$00 then
20008: LD_OWVAR 1
20012: PUSH
20013: LD_INT 31500
20015: LESSEQUAL
20016: IFFALSE 20032
// begin wait ( 3 ) ;
20018: LD_INT 3
20020: PPUSH
20021: CALL_OW 67
// SetAchievement ( ACH_ASPEED_4 ) ;
20025: LD_STRING ACH_ASPEED_4
20027: PPUSH
20028: CALL_OW 543
// end ; SaveBase ( GammBaseArea ) ;
20032: LD_INT 22
20034: PPUSH
20035: CALL 20684 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
20039: LD_INT 69
20041: PPUSH
20042: LD_INT 1
20044: PPUSH
20045: CALL_OW 321
20049: PPUSH
20050: LD_STRING GatlingInGamma
20052: PPUSH
20053: CALL_OW 39
// m1 := false ;
20057: LD_ADDR_VAR 0 3
20061: PUSH
20062: LD_INT 0
20064: ST_TO_ADDR
// m2 := false ;
20065: LD_ADDR_VAR 0 4
20069: PUSH
20070: LD_INT 0
20072: ST_TO_ADDR
// m3 := false ;
20073: LD_ADDR_VAR 0 5
20077: PUSH
20078: LD_INT 0
20080: ST_TO_ADDR
// if buildOil = 1 and buildPower = 1 then
20081: LD_EXP 34
20085: PUSH
20086: LD_INT 1
20088: EQUAL
20089: PUSH
20090: LD_EXP 35
20094: PUSH
20095: LD_INT 1
20097: EQUAL
20098: AND
20099: IFFALSE 20121
// begin AddMedal ( oil , 1 ) ;
20101: LD_STRING oil
20103: PPUSH
20104: LD_INT 1
20106: PPUSH
20107: CALL_OW 101
// m1 := true ;
20111: LD_ADDR_VAR 0 3
20115: PUSH
20116: LD_INT 1
20118: ST_TO_ADDR
// end else
20119: GO 20214
// begin if buildOil = 1 and buildPower = 0 then
20121: LD_EXP 34
20125: PUSH
20126: LD_INT 1
20128: EQUAL
20129: PUSH
20130: LD_EXP 35
20134: PUSH
20135: LD_INT 0
20137: EQUAL
20138: AND
20139: IFFALSE 20152
// AddMedal ( oil , - 1 ) ;
20141: LD_STRING oil
20143: PPUSH
20144: LD_INT 1
20146: NEG
20147: PPUSH
20148: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
20152: LD_EXP 34
20156: PUSH
20157: LD_INT 0
20159: EQUAL
20160: PUSH
20161: LD_EXP 35
20165: PUSH
20166: LD_INT 1
20168: EQUAL
20169: AND
20170: IFFALSE 20183
// AddMedal ( oil , - 2 ) ;
20172: LD_STRING oil
20174: PPUSH
20175: LD_INT 2
20177: NEG
20178: PPUSH
20179: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
20183: LD_EXP 34
20187: PUSH
20188: LD_INT 0
20190: EQUAL
20191: PUSH
20192: LD_EXP 35
20196: PUSH
20197: LD_INT 0
20199: EQUAL
20200: AND
20201: IFFALSE 20214
// AddMedal ( oil , - 3 ) ;
20203: LD_STRING oil
20205: PPUSH
20206: LD_INT 3
20208: NEG
20209: PPUSH
20210: CALL_OW 101
// end ; if lostCounter > 3 then
20214: LD_EXP 38
20218: PUSH
20219: LD_INT 3
20221: GREATER
20222: IFFALSE 20237
// AddMedal ( deaths , - 1 ) else
20224: LD_STRING deaths
20226: PPUSH
20227: LD_INT 1
20229: NEG
20230: PPUSH
20231: CALL_OW 101
20235: GO 20255
// begin AddMedal ( deaths , 1 ) ;
20237: LD_STRING deaths
20239: PPUSH
20240: LD_INT 1
20242: PPUSH
20243: CALL_OW 101
// m2 := true ;
20247: LD_ADDR_VAR 0 4
20251: PUSH
20252: LD_INT 1
20254: ST_TO_ADDR
// end ; if honor = 1 then
20255: LD_EXP 39
20259: PUSH
20260: LD_INT 1
20262: EQUAL
20263: IFFALSE 20285
// begin AddMedal ( honour , 1 ) ;
20265: LD_STRING honour
20267: PPUSH
20268: LD_INT 1
20270: PPUSH
20271: CALL_OW 101
// m3 := true ;
20275: LD_ADDR_VAR 0 5
20279: PUSH
20280: LD_INT 1
20282: ST_TO_ADDR
// end else
20283: GO 20296
// begin AddMedal ( honour , - 1 ) ;
20285: LD_STRING honour
20287: PPUSH
20288: LD_INT 1
20290: NEG
20291: PPUSH
20292: CALL_OW 101
// end ; if m1 and m2 and m3 and Difficulty = 3 then
20296: LD_VAR 0 3
20300: PUSH
20301: LD_VAR 0 4
20305: AND
20306: PUSH
20307: LD_VAR 0 5
20311: AND
20312: PUSH
20313: LD_OWVAR 67
20317: PUSH
20318: LD_INT 3
20320: EQUAL
20321: AND
20322: IFFALSE 20334
// SetAchievementEX ( ACH_AMER , 4 ) ;
20324: LD_STRING ACH_AMER
20326: PPUSH
20327: LD_INT 4
20329: PPUSH
20330: CALL_OW 564
// GiveMedals ( Main ) ;
20334: LD_STRING Main
20336: PPUSH
20337: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
20341: LD_INT 22
20343: PUSH
20344: LD_INT 1
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 23
20353: PUSH
20354: LD_INT 1
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 21
20363: PUSH
20364: LD_INT 1
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: LIST
20375: PPUSH
20376: CALL_OW 69
20380: PPUSH
20381: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20385: LD_EXP 1
20389: PPUSH
20390: LD_EXP 45
20394: PUSH
20395: LD_STRING JMM
20397: STR
20398: PPUSH
20399: CALL_OW 38
// if IsOK ( Bobby ) then
20403: LD_EXP 2
20407: PPUSH
20408: CALL_OW 302
20412: IFFALSE 20432
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20414: LD_EXP 2
20418: PPUSH
20419: LD_EXP 45
20423: PUSH
20424: LD_STRING Bobby
20426: STR
20427: PPUSH
20428: CALL_OW 38
// if IsOK ( Cyrus ) then
20432: LD_EXP 3
20436: PPUSH
20437: CALL_OW 302
20441: IFFALSE 20461
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20443: LD_EXP 3
20447: PPUSH
20448: LD_EXP 45
20452: PUSH
20453: LD_STRING Cyrus
20455: STR
20456: PPUSH
20457: CALL_OW 38
// if IsOK ( Lisa ) then
20461: LD_EXP 4
20465: PPUSH
20466: CALL_OW 302
20470: IFFALSE 20490
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20472: LD_EXP 4
20476: PPUSH
20477: LD_EXP 45
20481: PUSH
20482: LD_STRING Lisa
20484: STR
20485: PPUSH
20486: CALL_OW 38
// if IsOK ( Brown ) then
20490: LD_EXP 7
20494: PPUSH
20495: CALL_OW 302
20499: IFFALSE 20519
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
20501: LD_EXP 7
20505: PPUSH
20506: LD_EXP 45
20510: PUSH
20511: LD_STRING Brown
20513: STR
20514: PPUSH
20515: CALL_OW 38
// if IsOK ( Donaldson ) then
20519: LD_EXP 13
20523: PPUSH
20524: CALL_OW 302
20528: IFFALSE 20548
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20530: LD_EXP 13
20534: PPUSH
20535: LD_EXP 45
20539: PUSH
20540: LD_STRING Donaldson
20542: STR
20543: PPUSH
20544: CALL_OW 38
// if IsOK ( Frank ) then
20548: LD_EXP 5
20552: PPUSH
20553: CALL_OW 302
20557: IFFALSE 20577
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
20559: LD_EXP 5
20563: PPUSH
20564: LD_EXP 45
20568: PUSH
20569: LD_STRING Frank
20571: STR
20572: PPUSH
20573: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
20577: LD_INT 50
20579: PUSH
20580: EMPTY
20581: LIST
20582: PUSH
20583: LD_INT 22
20585: PUSH
20586: LD_INT 1
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 21
20595: PUSH
20596: LD_INT 1
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: LIST
20607: PPUSH
20608: CALL_OW 69
20612: PUSH
20613: LD_EXP 1
20617: PUSH
20618: LD_EXP 2
20622: PUSH
20623: LD_EXP 3
20627: PUSH
20628: LD_EXP 4
20632: PUSH
20633: LD_EXP 7
20637: PUSH
20638: LD_EXP 13
20642: PUSH
20643: LD_EXP 5
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: DIFF
20657: PPUSH
20658: LD_STRING 04_other_survivors
20660: PPUSH
20661: CALL_OW 38
// SetAchievementEX ( ACH_AMER , 4 ) ;
20665: LD_STRING ACH_AMER
20667: PPUSH
20668: LD_INT 4
20670: PPUSH
20671: CALL_OW 564
// YouWin ;
20675: CALL_OW 103
// end ;
20679: LD_VAR 0 1
20683: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
20684: LD_INT 0
20686: PPUSH
20687: PPUSH
20688: PPUSH
20689: PPUSH
// gammaBase = [ ] ;
20690: LD_ADDR_VAR 0 4
20694: PUSH
20695: EMPTY
20696: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
20697: LD_ADDR_VAR 0 5
20701: PUSH
20702: LD_VAR 0 1
20706: PPUSH
20707: LD_INT 22
20709: PUSH
20710: LD_INT 1
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 21
20719: PUSH
20720: LD_INT 3
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PPUSH
20731: CALL_OW 70
20735: ST_TO_ADDR
// for i in buildings do
20736: LD_ADDR_VAR 0 3
20740: PUSH
20741: LD_VAR 0 5
20745: PUSH
20746: FOR_IN
20747: IFFALSE 21084
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20749: LD_VAR 0 3
20753: PPUSH
20754: CALL_OW 266
20758: PUSH
20759: LD_INT 6
20761: PUSH
20762: LD_INT 7
20764: PUSH
20765: LD_INT 8
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: LIST
20772: IN
20773: IFFALSE 20887
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20775: LD_ADDR_VAR 0 4
20779: PUSH
20780: LD_VAR 0 4
20784: PUSH
20785: LD_VAR 0 3
20789: PPUSH
20790: CALL_OW 266
20794: PUSH
20795: LD_VAR 0 3
20799: PPUSH
20800: CALL_OW 250
20804: PUSH
20805: LD_VAR 0 3
20809: PPUSH
20810: CALL_OW 251
20814: PUSH
20815: LD_VAR 0 3
20819: PPUSH
20820: CALL_OW 254
20824: PUSH
20825: LD_VAR 0 3
20829: PPUSH
20830: CALL_OW 267
20834: PUSH
20835: LD_VAR 0 3
20839: PPUSH
20840: CALL_OW 248
20844: PUSH
20845: LD_VAR 0 3
20849: PPUSH
20850: LD_INT 1
20852: PPUSH
20853: CALL_OW 268
20857: PUSH
20858: LD_VAR 0 3
20862: PPUSH
20863: LD_INT 2
20865: PPUSH
20866: CALL_OW 268
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: PUSH
20881: EMPTY
20882: LIST
20883: ADD
20884: ST_TO_ADDR
20885: GO 21082
// if GetBType ( i ) in [ b_bunker ] then
20887: LD_VAR 0 3
20891: PPUSH
20892: CALL_OW 266
20896: PUSH
20897: LD_INT 32
20899: PUSH
20900: EMPTY
20901: LIST
20902: IN
20903: IFFALSE 21000
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20905: LD_ADDR_VAR 0 4
20909: PUSH
20910: LD_VAR 0 4
20914: PUSH
20915: LD_VAR 0 3
20919: PPUSH
20920: CALL_OW 266
20924: PUSH
20925: LD_VAR 0 3
20929: PPUSH
20930: CALL_OW 250
20934: PUSH
20935: LD_VAR 0 3
20939: PPUSH
20940: CALL_OW 251
20944: PUSH
20945: LD_VAR 0 3
20949: PPUSH
20950: CALL_OW 254
20954: PUSH
20955: LD_VAR 0 3
20959: PPUSH
20960: CALL_OW 267
20964: PUSH
20965: LD_VAR 0 3
20969: PPUSH
20970: CALL_OW 248
20974: PUSH
20975: LD_VAR 0 3
20979: PPUSH
20980: CALL_OW 269
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: PUSH
20994: EMPTY
20995: LIST
20996: ADD
20997: ST_TO_ADDR
20998: GO 21082
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
21000: LD_ADDR_VAR 0 4
21004: PUSH
21005: LD_VAR 0 4
21009: PUSH
21010: LD_VAR 0 3
21014: PPUSH
21015: CALL_OW 266
21019: PUSH
21020: LD_VAR 0 3
21024: PPUSH
21025: CALL_OW 250
21029: PUSH
21030: LD_VAR 0 3
21034: PPUSH
21035: CALL_OW 251
21039: PUSH
21040: LD_VAR 0 3
21044: PPUSH
21045: CALL_OW 254
21049: PUSH
21050: LD_VAR 0 3
21054: PPUSH
21055: CALL_OW 267
21059: PUSH
21060: LD_VAR 0 3
21064: PPUSH
21065: CALL_OW 248
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: PUSH
21078: EMPTY
21079: LIST
21080: ADD
21081: ST_TO_ADDR
// end ;
21082: GO 20746
21084: POP
21085: POP
// SaveVariable ( gammaBase , GammaBase ) ;
21086: LD_VAR 0 4
21090: PPUSH
21091: LD_STRING GammaBase
21093: PPUSH
21094: CALL_OW 39
// end ; end_of_file
21098: LD_VAR 0 2
21102: RET
// every 1 1$15 do
21103: GO 21105
21105: DISABLE
// begin if supply <= 13 and supply > 7 then
21106: LD_EXP 36
21110: PUSH
21111: LD_INT 13
21113: LESSEQUAL
21114: PUSH
21115: LD_EXP 36
21119: PUSH
21120: LD_INT 7
21122: GREATER
21123: AND
21124: IFFALSE 21147
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
21126: LD_INT 3
21128: PPUSH
21129: LD_INT 5
21131: PPUSH
21132: CALL_OW 12
21136: PPUSH
21137: LD_INT 18
21139: PPUSH
21140: LD_INT 1
21142: PPUSH
21143: CALL_OW 55
// if supply <= 7 and supply > 4 then
21147: LD_EXP 36
21151: PUSH
21152: LD_INT 7
21154: LESSEQUAL
21155: PUSH
21156: LD_EXP 36
21160: PUSH
21161: LD_INT 4
21163: GREATER
21164: AND
21165: IFFALSE 21188
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
21167: LD_INT 3
21169: PPUSH
21170: LD_INT 5
21172: PPUSH
21173: CALL_OW 12
21177: PPUSH
21178: LD_INT 19
21180: PPUSH
21181: LD_INT 1
21183: PPUSH
21184: CALL_OW 55
// if supply <= 4 and supply > 0 then
21188: LD_EXP 36
21192: PUSH
21193: LD_INT 4
21195: LESSEQUAL
21196: PUSH
21197: LD_EXP 36
21201: PUSH
21202: LD_INT 0
21204: GREATER
21205: AND
21206: IFFALSE 21229
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
21208: LD_INT 3
21210: PPUSH
21211: LD_INT 5
21213: PPUSH
21214: CALL_OW 12
21218: PPUSH
21219: LD_INT 20
21221: PPUSH
21222: LD_INT 1
21224: PPUSH
21225: CALL_OW 55
// if supply > 0 then
21229: LD_EXP 36
21233: PUSH
21234: LD_INT 0
21236: GREATER
21237: IFFALSE 21254
// begin supply = supply - 1 ;
21239: LD_ADDR_EXP 36
21243: PUSH
21244: LD_EXP 36
21248: PUSH
21249: LD_INT 1
21251: MINUS
21252: ST_TO_ADDR
// enable ;
21253: ENABLE
// end ; end ; end_of_file
21254: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
21255: GO 21257
21257: DISABLE
// begin ru_radar := 98 ;
21258: LD_ADDR_EXP 49
21262: PUSH
21263: LD_INT 98
21265: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21266: LD_ADDR_EXP 50
21270: PUSH
21271: LD_INT 89
21273: ST_TO_ADDR
// us_hack := 99 ;
21274: LD_ADDR_EXP 51
21278: PUSH
21279: LD_INT 99
21281: ST_TO_ADDR
// us_artillery := 97 ;
21282: LD_ADDR_EXP 52
21286: PUSH
21287: LD_INT 97
21289: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21290: LD_ADDR_EXP 53
21294: PUSH
21295: LD_INT 91
21297: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
21298: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
21299: LD_INT 0
21301: PPUSH
21302: PPUSH
21303: PPUSH
21304: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21305: LD_VAR 0 1
21309: PPUSH
21310: CALL_OW 264
21314: PUSH
21315: LD_EXP 53
21319: EQUAL
21320: IFFALSE 21392
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21322: LD_INT 68
21324: PPUSH
21325: LD_VAR 0 1
21329: PPUSH
21330: CALL_OW 255
21334: PPUSH
21335: CALL_OW 321
21339: PUSH
21340: LD_INT 2
21342: EQUAL
21343: IFFALSE 21355
// eff := 70 else
21345: LD_ADDR_VAR 0 6
21349: PUSH
21350: LD_INT 70
21352: ST_TO_ADDR
21353: GO 21363
// eff := 30 ;
21355: LD_ADDR_VAR 0 6
21359: PUSH
21360: LD_INT 30
21362: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21363: LD_VAR 0 1
21367: PPUSH
21368: CALL_OW 250
21372: PPUSH
21373: LD_VAR 0 1
21377: PPUSH
21378: CALL_OW 251
21382: PPUSH
21383: LD_VAR 0 6
21387: PPUSH
21388: CALL_OW 495
// end ; end ;
21392: LD_VAR 0 4
21396: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
21397: LD_INT 0
21399: PPUSH
21400: PPUSH
21401: PPUSH
21402: PPUSH
21403: PPUSH
21404: PPUSH
// if cmd = 124 then
21405: LD_VAR 0 1
21409: PUSH
21410: LD_INT 124
21412: EQUAL
21413: IFFALSE 21619
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
21415: LD_ADDR_VAR 0 5
21419: PUSH
21420: LD_INT 2
21422: PUSH
21423: LD_INT 34
21425: PUSH
21426: LD_INT 53
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 34
21435: PUSH
21436: LD_INT 14
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: LIST
21447: PPUSH
21448: CALL_OW 69
21452: ST_TO_ADDR
// if not tmp then
21453: LD_VAR 0 5
21457: NOT
21458: IFFALSE 21462
// exit ;
21460: GO 21619
// for i in tmp do
21462: LD_ADDR_VAR 0 3
21466: PUSH
21467: LD_VAR 0 5
21471: PUSH
21472: FOR_IN
21473: IFFALSE 21617
// begin taskList := GetTaskList ( i ) ;
21475: LD_ADDR_VAR 0 6
21479: PUSH
21480: LD_VAR 0 3
21484: PPUSH
21485: CALL_OW 437
21489: ST_TO_ADDR
// if not taskList then
21490: LD_VAR 0 6
21494: NOT
21495: IFFALSE 21499
// continue ;
21497: GO 21472
// for j = 1 to taskList do
21499: LD_ADDR_VAR 0 4
21503: PUSH
21504: DOUBLE
21505: LD_INT 1
21507: DEC
21508: ST_TO_ADDR
21509: LD_VAR 0 6
21513: PUSH
21514: FOR_TO
21515: IFFALSE 21613
// if taskList [ j ] [ 1 ] = | then
21517: LD_VAR 0 6
21521: PUSH
21522: LD_VAR 0 4
21526: ARRAY
21527: PUSH
21528: LD_INT 1
21530: ARRAY
21531: PUSH
21532: LD_STRING |
21534: EQUAL
21535: IFFALSE 21611
// begin _taskList := Delete ( taskList , 1 ) ;
21537: LD_ADDR_VAR 0 7
21541: PUSH
21542: LD_VAR 0 6
21546: PPUSH
21547: LD_INT 1
21549: PPUSH
21550: CALL_OW 3
21554: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
21555: LD_VAR 0 3
21559: PPUSH
21560: LD_VAR 0 7
21564: PPUSH
21565: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
21569: LD_VAR 0 3
21573: PPUSH
21574: LD_VAR 0 6
21578: PUSH
21579: LD_VAR 0 4
21583: ARRAY
21584: PUSH
21585: LD_INT 2
21587: ARRAY
21588: PPUSH
21589: LD_VAR 0 6
21593: PUSH
21594: LD_VAR 0 4
21598: ARRAY
21599: PUSH
21600: LD_INT 3
21602: ARRAY
21603: PPUSH
21604: LD_INT 8
21606: PPUSH
21607: CALL 21624 0 4
// end ;
21611: GO 21514
21613: POP
21614: POP
// end ;
21615: GO 21472
21617: POP
21618: POP
// end ; end ;
21619: LD_VAR 0 2
21623: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21624: LD_INT 0
21626: PPUSH
21627: PPUSH
21628: PPUSH
21629: PPUSH
21630: PPUSH
21631: PPUSH
21632: PPUSH
21633: PPUSH
21634: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21635: LD_VAR 0 1
21639: NOT
21640: PUSH
21641: LD_VAR 0 2
21645: PPUSH
21646: LD_VAR 0 3
21650: PPUSH
21651: CALL_OW 488
21655: NOT
21656: OR
21657: PUSH
21658: LD_VAR 0 4
21662: NOT
21663: OR
21664: IFFALSE 21668
// exit ;
21666: GO 22008
// list := [ ] ;
21668: LD_ADDR_VAR 0 13
21672: PUSH
21673: EMPTY
21674: ST_TO_ADDR
// if x - r < 0 then
21675: LD_VAR 0 2
21679: PUSH
21680: LD_VAR 0 4
21684: MINUS
21685: PUSH
21686: LD_INT 0
21688: LESS
21689: IFFALSE 21701
// min_x := 0 else
21691: LD_ADDR_VAR 0 7
21695: PUSH
21696: LD_INT 0
21698: ST_TO_ADDR
21699: GO 21717
// min_x := x - r ;
21701: LD_ADDR_VAR 0 7
21705: PUSH
21706: LD_VAR 0 2
21710: PUSH
21711: LD_VAR 0 4
21715: MINUS
21716: ST_TO_ADDR
// if y - r < 0 then
21717: LD_VAR 0 3
21721: PUSH
21722: LD_VAR 0 4
21726: MINUS
21727: PUSH
21728: LD_INT 0
21730: LESS
21731: IFFALSE 21743
// min_y := 0 else
21733: LD_ADDR_VAR 0 8
21737: PUSH
21738: LD_INT 0
21740: ST_TO_ADDR
21741: GO 21759
// min_y := y - r ;
21743: LD_ADDR_VAR 0 8
21747: PUSH
21748: LD_VAR 0 3
21752: PUSH
21753: LD_VAR 0 4
21757: MINUS
21758: ST_TO_ADDR
// max_x := x + r ;
21759: LD_ADDR_VAR 0 9
21763: PUSH
21764: LD_VAR 0 2
21768: PUSH
21769: LD_VAR 0 4
21773: PLUS
21774: ST_TO_ADDR
// max_y := y + r ;
21775: LD_ADDR_VAR 0 10
21779: PUSH
21780: LD_VAR 0 3
21784: PUSH
21785: LD_VAR 0 4
21789: PLUS
21790: ST_TO_ADDR
// for _x = min_x to max_x do
21791: LD_ADDR_VAR 0 11
21795: PUSH
21796: DOUBLE
21797: LD_VAR 0 7
21801: DEC
21802: ST_TO_ADDR
21803: LD_VAR 0 9
21807: PUSH
21808: FOR_TO
21809: IFFALSE 21926
// for _y = min_y to max_y do
21811: LD_ADDR_VAR 0 12
21815: PUSH
21816: DOUBLE
21817: LD_VAR 0 8
21821: DEC
21822: ST_TO_ADDR
21823: LD_VAR 0 10
21827: PUSH
21828: FOR_TO
21829: IFFALSE 21922
// begin if not ValidHex ( _x , _y ) then
21831: LD_VAR 0 11
21835: PPUSH
21836: LD_VAR 0 12
21840: PPUSH
21841: CALL_OW 488
21845: NOT
21846: IFFALSE 21850
// continue ;
21848: GO 21828
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21850: LD_VAR 0 11
21854: PPUSH
21855: LD_VAR 0 12
21859: PPUSH
21860: CALL_OW 351
21864: PUSH
21865: LD_VAR 0 11
21869: PPUSH
21870: LD_VAR 0 12
21874: PPUSH
21875: CALL_OW 554
21879: AND
21880: IFFALSE 21920
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21882: LD_ADDR_VAR 0 13
21886: PUSH
21887: LD_VAR 0 13
21891: PPUSH
21892: LD_VAR 0 13
21896: PUSH
21897: LD_INT 1
21899: PLUS
21900: PPUSH
21901: LD_VAR 0 11
21905: PUSH
21906: LD_VAR 0 12
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PPUSH
21915: CALL_OW 2
21919: ST_TO_ADDR
// end ;
21920: GO 21828
21922: POP
21923: POP
21924: GO 21808
21926: POP
21927: POP
// if not list then
21928: LD_VAR 0 13
21932: NOT
21933: IFFALSE 21937
// exit ;
21935: GO 22008
// for i in list do
21937: LD_ADDR_VAR 0 6
21941: PUSH
21942: LD_VAR 0 13
21946: PUSH
21947: FOR_IN
21948: IFFALSE 22006
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21950: LD_VAR 0 1
21954: PPUSH
21955: LD_STRING M
21957: PUSH
21958: LD_VAR 0 6
21962: PUSH
21963: LD_INT 1
21965: ARRAY
21966: PUSH
21967: LD_VAR 0 6
21971: PUSH
21972: LD_INT 2
21974: ARRAY
21975: PUSH
21976: LD_INT 0
21978: PUSH
21979: LD_INT 0
21981: PUSH
21982: LD_INT 0
21984: PUSH
21985: LD_INT 0
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: PUSH
21997: EMPTY
21998: LIST
21999: PPUSH
22000: CALL_OW 447
22004: GO 21947
22006: POP
22007: POP
// end ;
22008: LD_VAR 0 5
22012: RET
